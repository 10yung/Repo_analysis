,full_name,forks_count,open_issues_count,watchers_count,comment_count,star_count,issue_content
0,freeCodeCamp/freeCodeCamp,23528,292,308061,,308061,"<img width=""1396"" alt=""Notifications___Twitter"" src=""https://user-images.githubusercontent.com/985197/72214720-29a76e00-34cd-11ea-9f1e-45f48bb736d8.png"">
[[[[[Next]]]]]Hi -

I was working on the ""APIs and Microservices Projects - URL Shortener Microservice"" project today and experienced difficulties getting the project to connect to the MongoLabs service used in this section of the curriculum.  

After a lot of digging, I eventually found out that the Mongoose version in the project boilerplate is out of date and doesn't connect with MongoLabs. The free tier requires a newer version of Mongoose.

It looks there is already a pull request out there to get this fixed:

https://github.com/freeCodeCamp/boilerplate-project-urlshortener/pull/15

It would be nice to see this get merged in as it caused a lot of issues while I was working on this project."
1,facebook/react,27243,957,142182,,142182,"When a component calls custom Hooks, we ""collect"" a signature in two steps.

https://github.com/facebook/react/blob/64aae7b06fa47e126b0ba9c0ba9896caa803528e/packages/react-refresh/src/ReactFreshRuntime.js#L582-L603

For example, given this component:

```js
function App() {
  const x = useFancyState('x')
  const y = useFancyState('x')
}

function useFancyState(value) {
  return React.useState(value)
}
```

we want to:

1. First, establish that `App` has two `useFancyState` calls.
   - Our transform does this with a call like `_s(App, 'useFancyState(x) useFancyState(y)', () => [useFancyState, useFancyState])`
2. Then, when we're inside `App` for the first time, trigger the function to save their identities
   - Our transform does this with a call like `_s()`

We intentionally trigger the function to save function identities lazily on first render. This is so that we don't change the module definition order when you have inline requires.

We reuse the same function to minimize the transform noise. So we count calls. First call saves `() => [useFancyState, useFancyState]`, second call actually triggers it to get references. Next calls don't do anything.

This usually works, but it breaks in the corner case like this:

```js
render(<App />);

function App() { ... }
function useFancyState() { ... }
```

This is because we end up *inside* `App` before the *first* call injected by our transform runs. So we get the ""inside"" call before we get the ""outside"" call.

This is edge casey but can happen in environments like CodeSandbox where you write all code in one file.

The fix is to not rely on the call index, and instead to look at what we're passing. With this fix, we ignore all empty `_s()` calls until after we actually get the first `_s(App, ...)` registration call. To make this clearer, I'm changing a number tracking the call number to a status enum.

A regression test is added. This should fix [this broken case](https://codesandbox.io/s/invalid-value-used-as-weak-map-key-broken-react-fresh-y2mx3) on CodeSandbox. (After CodeSandbox updates `react-refresh` to the version with this fix.)[[[[[Next]]]]]Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.3.0-3e0967783

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)
    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)
    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)
    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)
    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)
    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)
    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)

Component stack: in Sl
    in div
    in div
    in div
    in vo
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Qi
    in Ve
    in nn
    in Da
    in Yc"
2,twbs/bootstrap,67848,413,138077,,138077,"Only solution I have right now, is to downgrade to bootstrap 3. And straight way it has started working. Please tell me the reason.[[[[[Next]]]]]Fixes https://github.com/twbs/bootstrap/issues/29833

`v4-dev` Backport of https://github.com/twbs/bootstrap/pull/29835 "
3,facebook/create-react-app,17800,505,75161,,75161,"UI from dev mode and prod mode look different because, if I'm not mistaken, the project initially created by `create-react-app` and built by `npm run build` seems to ignore nested css calc() functions and the math calculations in it when I inspect the component of the two different modes: <br>
<br>
In the original `src`, it says:<br>
`.switch:after {
  width: calc((var(--size) / 2) - calc(var(--indent) * 2));
}`<br><br>
but when I inspect the built (deployed) web UI, it shows:<br>
`.switch:after {
  width: calc((--size) - var(--indent));
}`<br>
of course the UI looks different from the development mode.
<br><br>
my `react` version is `16.12.0` and `create-react-app` version is `3.3.0`<br>
also `node` version is `v10.15.0` and `npm` version is `6.4.1`[[[[[Next]]]]]I would like to remove documentation that is no longer relevant (outdated). It is regarding ESLint extension for Visual Studio Code and its Typescript support. https://github.com/Microsoft/vscode-eslint/issues/609

Before ESLint extension version 2.0.4 (before December 16, 2019 source: 
https://github.com/microsoft/vscode-eslint/releases), the extension did not have Typescript support enabled by default and it had to be enabled manually by adding a specific configuration in `.vscode/settings.json` (the block removed by this PR)

As aforesaid, this issue (and its need for a workaround) has been fixed with version 2.x (released on Dec 16, 2019) and is no longer relevant
![Capture](https://user-images.githubusercontent.com/57100733/72164234-36d53780-33bd-11ea-9f58-86381b6f5160.PNG) source: https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint

In fact this configuration is now squiggle-lined once added to `.vscode/settings.json` with a warning as shown in the screenshot.

![Screenshot (31)](https://user-images.githubusercontent.com/57100733/72165335-30e05600-33bf-11ea-9bf8-2ba7801b5859.png)




<!--
Thank you for sending the PR!

If you changed any code, please provide us with clear instructions on how you verified your changes work. Bonus points for screenshots!

Happy contributing!
-->
"
4,axios/axios,6018,498,68592,,68592,"<!-- Click ""Preview"" for a more readable version --

Please read and follow the instructions before submitting an issue:

- Read all our documentation, especially the [README](https://github.com/axios/axios/blob/master/README.md). It may contain information that helps you solve your issue.
- Ensure your issue isn't already [reported](https://github.com/axios/axios/issues?utf8=%E2%9C%93&q=is%3Aissue).
- If you aren't sure that the issue is caused by Axios or you just need help, please use [Stack Overflow](https://stackoverflow.com/questions/tagged/axios) or [our chat](https://gitter.im/mzabriskie/axios).
- If you're reporting a bug, ensure it isn't already fixed in the latest Axios version.

‚ö†Ô∏èüëÜ Feel free to these instructions before submitting the issue üëÜ‚ö†Ô∏è
-->

**Describe the bug**
After upgrading axios from 0.19.0 to 0.19.1 all tests that use nock got broken. They now produce the following error:

```text
Error: Cross origin http://localhost forbidden
```

**To Reproduce**
Repo with minimal test case that reproduces the issue: https://github.com/EvgenyOrekhov/js-framework/tree/axios-bug.

Note that [previous commit](https://github.com/EvgenyOrekhov/js-framework/tree/150ebe811c9531b7699c030e7921514e469fe84e) (which has axios 0.19.0) works fine, the test passes.

```js
import axios from ""axios"";
import nock from ""nock"";

it(""makes HTTP requests"", async done => {
  const scope = nock(""https://example.com/foo/"")
    .get(""/bar"")
    .reply(200, { foo: ""bar"" });

  await axios.get(""https://example.com/foo/bar"");

  scope.done();
  done();
});
```

**Expected behavior**
The test should pass.

**Environment:**
 - Axios Version: 0.19.1
 - OS: Ubuntu 19.10
 - Browser: n/a
 - Browser Version: n/a
 - Additional Library Versions: nock 11.7.2

**Additional context/Screenshots**
Jest error with stack trace:

```text
 FAIL  src/http.test.js
  ‚úï makes HTTP requests (34ms)

  ‚óè makes HTTP requests

    Network Error

      at createError (node_modules/axios/lib/core/createError.js:16:15)
      at XMLHttpRequest.handleError (node_modules/axios/lib/adapters/xhr.js:83:14)
      at XMLHttpRequest.<anonymous> (node_modules/jsdom/lib/jsdom/living/helpers/create-event-accessor.js:33:32)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)
      at XMLHttpRequestEventTargetImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)
      at XMLHttpRequestEventTargetImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)
      at XMLHttpRequest.dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)
      at requestErrorSteps (node_modules/jsdom/lib/jsdom/living/xhr-utils.js:132:7)
      at dispatchError (node_modules/jsdom/lib/jsdom/living/xhr-utils.js:62:3)
      at Object.validCORSHeaders (node_modules/jsdom/lib/jsdom/living/xhr-utils.js:77:5)
      at receiveResponse (node_modules/jsdom/lib/jsdom/living/xmlhttprequest.js:847:21)
      at Request.<anonymous> (node_modules/jsdom/lib/jsdom/living/xmlhttprequest.js:679:38)
      at Request.onRequestResponse (node_modules/request/request.js:1066:10)
      at respond (node_modules/nock/lib/playback_interceptor.js:299:11)
      at respondUsingInterceptor (node_modules/nock/lib/playback_interceptor.js:341:7)
      at node_modules/nock/lib/playback_interceptor.js:281:7

  console.error node_modules/jsdom/lib/jsdom/virtual-console.js:29
    Error: Cross origin http://localhost forbidden
        at dispatchError (/home/user/my-app/node_modules/jsdom/lib/jsdom/living/xhr-utils.js:65:19)
        at Object.validCORSHeaders (/home/user/my-app/node_modules/jsdom/lib/jsdom/living/xhr-utils.js:77:5)
        at receiveResponse (/home/user/my-app/node_modules/jsdom/lib/jsdom/living/xmlhttprequest.js:847:21)
        at Request.<anonymous> (/home/user/my-app/node_modules/jsdom/lib/jsdom/living/xmlhttprequest.js:679:38)
        at Request.emit (events.js:321:20)
        at Request.onRequestResponse (/home/user/my-app/node_modules/request/request.js:1066:10)
        at OverriddenClientRequest.emit (events.js:321:20)
        at respond (/home/user/my-app/node_modules/nock/lib/playback_interceptor.js:299:11)
        at respondUsingInterceptor (/home/user/my-app/node_modules/nock/lib/playback_interceptor.js:341:7)
        at /home/user/my-app/node_modules/nock/lib/playback_interceptor.js:281:7 undefined
```[[[[[Next]]]]]<!-- Click ""Preview"" for a more readable version -->

#### Instructions

Please read and follow the instructions before creating and submitting a pull request:

- Create an issue explaining the feature. It could save you some effort in case we don't consider it should be included in axios.
- If you're fixing a bug, try to commit the failing test/s and the code fixing it in different commits.
- Ensure you're following our [contributing guide](https://github.com/axios/axios/blob/master/CONTRIBUTING.md).

**‚ö†Ô∏èüëÜ Delete the instructions before submitting the pull request üëÜ‚ö†Ô∏è**

Describe your pull request here.
"
