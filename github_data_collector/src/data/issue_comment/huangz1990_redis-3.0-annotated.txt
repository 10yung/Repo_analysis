https://github.com/huangz1990/redis-3.0-annotated/blob/8e60a75884e75503fb8be1a322406f21fb455f67/src/ae.c#L178
通过sdsfree()释放一个sds的复杂度为O(1)

zskiplistNode level为何什么是个数组,生成  zskiplistNode  的时候， 为其随机分配一个 1 到32 之间的值作为 level   数组的大小，那如何为其赋值呢？
源码中对 `sdscatvprintf` 这个函数的时间复杂度分析
```C
/* Try with buffers two times bigger every time we fail to
     * fit the string in the current buffer size. */
    while(1) {
        buf[buflen-2] = '\0';
        va_copy(cpy,ap);
        // T = O(N)
        vsnprintf(buf, buflen, fmt, cpy);
        if (buf[buflen-2] != '\0') {
            if (buf != staticbuf) zfree(buf);
            buflen *= 2;
            buf = zmalloc(buflen);
            if (buf == NULL) return NULL;
            continue;
        }
        break;
    }
```
buf 每次是两倍的长度增长, 时间复杂度应该是 `n*logn` 吧
n 代表 fmt 字符串的长度
while((unsigned long)p & 3 && count)  
在 redis bitcount实现中 说不足32 bit的直接使用这个这个循环进行计算。但是 不理解 p&3 什么含义。
似乎跟32bit 没什么关系

读取服务端响应没有对tcp数据流进行粘包和拆包，这个应该有问题吧

调用read返回的nread长度不一定等于一条完整消息的长度吧，有可能会小于。
int redisBufferRead(redisContext *c) {
    char buf[1024*16];
    int nread;

    /* Return early when the context has seen an error. */
    if (c->err)
        return REDIS_ERR;

    nread = read(c->fd,buf,sizeof(buf));
    if (nread == -1) {
        if (errno == EAGAIN && !(c->flags & REDIS_BLOCK)) {
            /* Try again later */
        } else {
            __redisSetError(c,REDIS_ERR_IO,NULL);
            return REDIS_ERR;
        }
    } else if (nread == 0) {
        __redisSetError(c,REDIS_ERR_EOF,"Server closed the connection");
        return REDIS_ERR;
    } else {
        if (redisReaderFeed(c->reader,buf,nread) != REDIS_OK) {
            __redisSetError(c,c->reader->err,c->reader->errstr);
            return REDIS_ERR;
        }
    }
    return REDIS_OK;
}

while(de) {
        uint64_t h;
        nextde = de->next;
        /* Get the index in the new hash table */
        h = dictHashKey(d, de->key) & d->ht[1].sizemask;
        de->next = d->ht[1].table[h];
        d->ht[1].table[h] = de;
        d->ht[0].used--;
        d->ht[1].used++;
        de = nextde;
    }
以上代码是int dictRehash(dict *d, int n)中的部分实现，对于d->ht[0].used--有疑问，由于我们使用链接法解决冲突，所以de节点后面链接的所有节点理论上并没有记录在d->ht[0].used中，所以这里不是很明白，希望大神能帮我解惑。