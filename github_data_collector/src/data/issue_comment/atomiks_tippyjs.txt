## Bug description

When using the mouse rest plugin, tooltips will still be hidden when set up to be interactive.

## Reproduction

https://codepen.io/justinanastos/pen/xxbyRdz

Hover over the button and then try to select the content because it's interactive; the `mouseleave` event will remove the tooltip when I'd expect it to remain.
Currently, the only triggers are `mouseenter`, `focus`, `click`, and `manual`. This means you have to directly wrap the target element (or reference it, which can be difficult for React apps). It would be nice to have a way to show the tooltip when focus enters the target element and hide it when focus leaves.
@FezVrasta and I have been working hard on releasing the next [Popper version (v2)](https://popper.js.org/) since November (the rewrite initially started by him in 2018 though but laid dormant for ages due to difficulties). The rewrite of Popper will be explained more in-depth in an article once the final release is out, but it fixes tons of bugs and API flaws that have come to light over the past 3 years (Popper v1 was released in early 2017 and has been in use since Tippy v0!)

It's a breaking major, so Tippy will need to increment its own major (v6). I'd like to make some other changes to Tippy as well to better integrate with libraries like `react-spring` - effectively stripping the built-in CSS animations out and element creation and making them optional, but of course still easy to use and add in.
## Bug description

Tooltip flips when offset prop is used with negative y axis value, e.g. "0, -5". For more background, see #673. 

## Reproduction

https://codepen.io/AlgeoMA/pen/rNadrxM

Hi,

I tried to add tippy on `area` on image maps. But it did not work. I see the tooltip below the image. Is there any way I can do this?

`<img sarc="assets/images/cp.PNG" usemap="#image-map" >

        <map name="image-map" style="position: relative">
            <area target="" alt="UPS" id="are" title="UPS" href="https://www.image-map.net/" coords="61,552,353,183"
                shape="rect">
            <area target="" alt="pac" title="pac" href="https://html.com/images/how-to-make-an-image-map/"
                coords="411,181,1387,364" shape="rect">
        </map>`

Javascript:

`tippy(document.querySelector('#are'), {
    content: 'TheTooltip',
showOnCreate: true,
  hideOnClick: false
 })`
## Bug description

A few weeks ago we opened a bug (code #634) in which we indicated that when displaying the tooltip for the first time in an event with the showOnCreate property, delay and followCursor were not respected. The problem with the delay has been corrected, but we still have the problem with the followCursor.

We have detected that the error occurs with Chrome (v78) and Firefox (v70), but with Internet Explorer (v11) it works correctly.

## Reproduction

In the same request indicated above (#634) a CodePen was attached in which we see that the incidence can be reproduced.
CodePen link: https://codepen.io/atomiks/pen/wvvyQmQ

The error is reproduced as follows:
- Place the cursor on the button (It is the first time that the onmouseover event is executed, so the tippy instance will be created and displayed thanks to the showOnCreate property). The tooltip will appear in a centered position.
- Move the cursor from the button.
- Reposition the cursor over the button (It is the second time the onmouseover event is executed). Now the tooltip will appear in its correct position, next to the cursor.

We have recorded a video reproducing the error with the CodePen.
[Tippy.js issue #634.zip](https://github.com/atomiks/tippyjs/files/3926361/Tippy.js.issue.634.zip)





@KubaJastrz  if you're up to it, couldn't really get these working ðŸ™‚ 

These are the main ones I'm aware of currently:

1.  Functions should be typed with exported interface types from `types.ts`: `Tippy` & `Delegate`. I'm not sure how to get this working with the new function overload types however. I think it will require some refactoring.

```js
// This
const tippy: Tippy = (...) => {};

// Instead of current
function tippy(...) {}
```

2. `Tippy` will return `undefined` if called a second time with `multiple: false` (default) - currently not typed at all. How can we type that correctly?

```ts
// Assuming reference is an Element.
const instance1 = tippy(reference); // Instance
const instance2 = tippy(reference); // undefined
const instance3 = tippy(reference, {multiple: true}); // Instance
```

3.  Remove `@ts-ignore` comments and type correctly (there are currently a few) 

https://github.com/atomiks/tippyjs/blob/cc0fa207df2a841d9152265e4746f51af5955b1a/src/utils.ts#L268-L270

https://github.com/atomiks/tippyjs/blob/cc0fa207df2a841d9152265e4746f51af5955b1a/src/createTippy.ts#L222-L231

https://github.com/atomiks/tippyjs/blob/cc0fa207df2a841d9152265e4746f51af5955b1a/src/index.ts#L135-L137

I haven't touched the Travis file for like 2 years. I think it only runs `test` without linting or type checks.

- Automated unit/integration tests (current) - there's more work to be done there
- Automated visual tests (how? this seems finicky) - `npm run dev:{themes,animations}` are current ones
- Automated type tests
- Semantic releases? Though it seems to publish a new release after _every_ successful build, I prefer batching many fixes/changes into a single release to reduce noise, since overly frequent releases are really annoying. (I try to limit each release to 7-14 days minimum unless something is bothering me, or there's a critical problem). Maybe it can be configured.
- Automated website deploys (update `@tippy.js/react` dep along with it)
- I think `build/` files should also become `.ts` with tests on `dist/` to make sure they work - there's been some problems reported with the `iife` version lately since it uses different techniques from `esm` & `cjs`

cc @KubaJastrz I think you know more about this than I do
## Problem

When updating content, it would be nice if the dimensions could transition from one size to another. This makes singleton transitions and dynamic content look more natural.

## Solution

[Seen experimentally here](https://atomiks.github.io/tippyjs/animations/#fully-dynamic)

Since the solutions I've worked on don't work for every case, this will likely be documentation only.
