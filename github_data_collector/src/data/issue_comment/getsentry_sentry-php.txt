Hello, 
Currently I cannot update our project's dependency from the old `raven`'s sdk (`1.*`) to the newest `sentry`'s sdk version (`2.3.0`) as there are compliances where we cannot expose our user's private data (eg: token).

I know I can use `before_send` hook to avoid posting data from the HTTP request, but there's no way to scrub the data from the exception stack trace ([`Sentry\Frame`'s vars](https://github.com/getsentry/sentry-php/blob/master/src/Frame.php#L57)).

I wonder if there's a feasible way to do so or if there are any plans in order to make this data scrubbing possible. Otherwise, I won't be able to update the sdk.

_Reference_

<img width="834" alt="Screen Shot 2020-01-17 at 2 32 10 pm" src="https://user-images.githubusercontent.com/3244346/72582257-57117300-3936-11ea-81dd-4a47973e411c.png">


Cheers.
#953
None
we are seeing an issue where basically none of our issues are merging properly. As far as i can tell its due to the memory locations automatically included by PHP in the stack trace for anonymous functions:

when i go to "view similar issues" and then "diff" on sentry.io the only difference appears to be this one line in the stack trace:
![image](https://user-images.githubusercontent.com/1666071/72358698-f9252700-36ba-11ea-9a9d-dfd9b173b315.png)

ive seen the other conversations [here](https://github.com/getsentry/sentry-php/issues/481) but it seems like it was only addressed in some system areas of the code?

I would think keeping the lines in the stacktrace makes sense but maybe setting the fingerprint differently? or maybe just filtering out the memory addresses from the stack trace?

For example when logging CSP violations with Sentry, the projectID is needed. Of course this is the last part of the sentry key but with the old Raven SDK it was possible to do `$client->project` to get the project ID. I couldn't find a way to get the project ID with the new SDK. Would be nice to have that.
Before #909 we deducted from project root all excludes. Now logic changed and we add to excludes all includes.

### Example before #909
- project_root = /app
- in_app_exclude = /app/vendor

And if comes frame with path /app/vendor/xxx it **not appears** in sentry.

### Example after #909 
- in_app_include = /app
- in_app_exclude = /app/vendor

And if comes frame with path /app/vendor/xxx it **appears** in sentry because we check in_app_include in the end of function.



If any cURL errors are thrown, sentry catches these without the ability to forward them to the sentry dashboard.

This results in nothing being logged in either sentry or other logs.

Replication: 

Install sentry and comment out the cacert file path in php.ini.

I can imagine this could catch a lot of people out.
Clearly writing custom transport is not something as easy as it seems right now since you have to configure yourself the HTTP client with all the plugins needed for authentication. 

Also since the behavior of the HttpTransport by sending events immediately instead of waiting the shutdown of the application is deprecated and has a significant impact on performance. 

For applications with use cases where there is a need to send events immediately regardless of performance, this is a big dilemma. Although it is possible using a compiler pass or an extension that accesses the transport properties using reflection, the solution may seem hacky and perhaps unnecessary. 

Therefore the best outcome could be to give make this delay configurable so anyone can use it the way they want. 
Q | A
-- | --
Branch? | 2.3
Bug fix? | no
New feature? | yes
BC breaks? | no
Deprecations? | no
License | MIT


To be able to log Sentry PHP framework incidents,
a logger is added to the option, which be default logs nothing.

Integrations can set any PSR-3 logger by setting
an instance to the "error_logger" option.

The logger is currently only used to log failures when sending
an event.

Hi!

I like concept of class serializes, but i have a bit specific use case:

I have 100+ classes like this:
```php
final class OrderId
{
    use EntityId;
}
```
And would love to be able to serialize them. They have no common parent or either interface.

At first my idea was something like:
```php
final class GenericSentrySerializer
{
    /**
     * @param object $object
     */
    public function __invoke($object): ?array
    {
        if (method_exists($object, 'id')) {
            return [
                'id' => (string) $object->id(),
            ];
        }

        if (in_array(EntityId::class, \Safe\class_uses($object), true)) {
            return [
                'id' => (string) $object,
            ];
        }

        return null;
    }
}
```
But this does not work, since i have to pass into `Options` object array of `$type => $serializer` (`AbstractSerializer::resolveClassSerializers()`:
```php
foreach ($this->options->getClassSerializers() as $type => $serializer) {
            if ($object instanceof $type) { // <<<<<---- here it will fail
                $serializers[] = $serializer;
            }
        }
```

Do you have any ideas how to overcome this limitation?

I could imagine having option `generic_class_serializers` or `universal_class_serializers` :-) 
