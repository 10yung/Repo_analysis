In AppDeployToolkitMain.ps1, lines 6432 - 6438 the code prevents the name of the product being displayed in the dialog if CloseApps is specified, which is confusing for the end-user if the application is deployed to them as "Required" via SCCM.

## Initial form layout: Close Applications / Allow Deferral
If ($showCloseApps) {
	$labelAppNameText = $configClosePromptMessage
}
ElseIf (($showDefer) -or ($forceCountdown)) {
	$labelAppNameText = "$configDeferPromptWelcomeMessage `n$installTitle"
}

Changing line 6434 to the following, fixes this issue. (The escape characters are messing it up a bit, but you get the idea)

$labelAppNameText = "$configDeferPromptWelcomeMessage `n$installTitle`n`n$configClosePromptMessage"
Hi, I am testing PSAppDeployToolkit with Windows Defender Application control.

The following line in execute-process fails.
$stdOutBuilder = New-Object -TypeName 'System.Text.StringBuilder' -ArgumentList ''
I replaced it with
$stdOutBuilder = New-Object -TypeName 'System.Text.StringBuilder' -ArgumentList [String]::Empty

See error message below.
[01-01-2020 20:20:00.032] [Installation] [Execute-Process] :: Function failed, setting exit code to [60002].
Error Record:
-------------

Message        : Cannot validate argument on parameter 'ArgumentList'. Cannot process input. The argument "System.Object[]" is not trusted.
InnerException : System.Management.Automation.ValidationMetadataException: Cannot process input. The argument "System.Object[]" is not
                 trusted.
                    at System.Management.Automation.ValidateTrustedDataAttribute.Validate(Object arguments, EngineIntrinsics
                 engineIntrinsics)
                    at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter,
                 CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)

FullyQualifiedErrorId : ParameterArgumentValidationError,Microsoft.PowerShell.Commands.NewObjectCommand
ScriptStackTrace      : at Execute-Process<Process>, C:\Users\kim.oppalfens\Downloads\Putty\AppDeployToolkit\AppDeployToolkitMain.ps1: line
                        2776
                        at Execute-MSI<Process>, C:\Users\kim.oppalfens\Downloads\Putty\AppDeployToolkit\AppDeployToolkitMain.ps1: line 2363
                        at <ScriptBlock>, C:\Users\kim.oppalfens\Downloads\Putty\Deploy-Application.ps1: line 140
                        at <ScriptBlock>, <No file>: line 1

PositionMessage : At C:\Users\kim.oppalfens\Downloads\Putty\AppDeployToolkit\AppDeployToolkitMain.ps1:2776 char:85
                  + ... r = New-Object -TypeName 'System.Text.StringBuilder' -ArgumentList ''
                  +                                                                        ~~



Error Inner Exception(s):
-------------------------

Message        : Cannot process input. The argument "System.Object[]" is not trusted.
InnerException :
Add logic to allow Execute-ProcessAsUser to run PowerShell scriptblocks
Set-PinnedApplication does not work anymore on Windows 10 1903
When using pin action to Start menu in the Set-PinnedApplication function the FilePath parameter is case sensitive on Windows 10.
This is caused by StartsWith being case sensitive:
`($FilePath.StartsWith($envUserStartMenu) -or $FilePath.StartsWith($envCommonStartMenu)`

Solution is to make StartsWith not case sensistive:
`($FilePath.StartsWith($envUserStartMenu, 'CurrentCultureIgnoreCase') -or $FilePath.StartsWith($envCommonStartMenu, 'CurrentCultureIgnoreCase')`
Hi,

I have create a simple package that will enable .Net Framework on Windows 10 machine using the command  
 ` Execute-Process -Path "$envSystem32Directory\Dism.exe" -Parameters "/Online /Disable-Feature /FeatureName:NetFX3" -WindowStyle Hidden`

The package runs well when I launch it with Deploy-Application.exe. However, if renew the Deploy-Application.exe to another any other name, I will get the Windows's Prompt to enable .Net Framework 3.5(https://images.app.goo.gl/1SZqVwAuEkyoaSYH7). I did not rename the Deploy-Application.exe.config and Deploy-Application.ps1 files.

Cheers.

Stanley Lim


I'd like to extend the ToolkitHelp.ps1 with my own functions. Other people can quickly find help for these functions when needed, it's all at one place. 

_AppDeployToolkitMain.ps1_ does not dot source _AppDeployToolkitExtensions.ps1_ when called from _AppDeployToolkitHelp.ps1_. This needs to be changed or dot source directly from the _AppDeployToolkitHelp.ps1_ file


`. "$scriptDirectory\AppDeployToolkitExtensions.ps1"`

edit: Maybe split of function pane to seperate customs from original, default prefix for function or names in different color?

![CustomFunctionHelp](https://user-images.githubusercontent.com/39791149/70607167-3c90ff00-1bfe-11ea-84a1-a52ec173c68f.png)
Hi All, I've been using PSADT for a little while now and its been awesome. I think I just found a bug in the Show-InstallationPrompt dialog when using the Timeout and PersistPrompt.  Basically after attempting to close using the X in the top right corner of the dialog, the dialog reappears as expected but the timeout now does not work, the dialog sits there forever.  Here is a code example of what I'm doing.

Main {
Function Display-Popup {

    $message="A critical update needs to be applied in " + [math]::Round(($TimeLeft.TotalMinutes),0) + " after which forced restart will occur. Select Defer to defer this message for 30 minutes or select Install Now to apply the update immediately..."
    $ButtonPressed=(Show-InstallationPrompt -title 'Critical Update' -message $message -ButtonLeftText 'Defer' -ButtonRightText 'InstallNow' -Icon None -PersistPrompt -timeout 60 -ExitOnTimeout $false -MessageAlignment Left -MinimizeWindows $true)
    return $ButtonPressed
}

$StartTime=(Get-Date)
$Duration=New-TimeSpan -Minutes 100
$TimeLeft=  $Duration - (New-TimeSpan -Start $StartTime -End (Get-Date))

do {
    switch (Display-Popup) {

        "Defer" {$TimeLeft=  $Duration - (New-TimeSpan -Start $StartTime -End (Get-Date)); $Timer=[math]::Round(($TimeLeft.TotalMinutes),0); Write-Host "User selected Defer, time left is $timer" ; Start-Sleep -s 1800}
        "InstallNow" {Write-Host "User selected InstallNow"; $Duration =New-TimeSpan -Minutes -1;Break }

    }
    $TimeLeft=  $Duration - (New-TimeSpan -Start $StartTime -End (Get-Date))
    $Timer=[math]::Round(($TimeLeft.TotalMinutes),0)
    Write-Host "Timer = $timer minutes"
} While ($timer -ge 0)

}

I've already updated to PSADT 3.8  and the issue persists...

Cheers

Captain
Hello,

I do NOT use a deployment-solution like SCCM.
I call the PSAppDeployToolkit from a PowerShell-script. 

It is not important, but the call looks somehow like this:
```Powershell
Start-Process -FilePath "PowerShell.exe" -WorkingDirectory "C:\Temp\MyPackage" -PassThru -Wait -ArgumentList "-ExecutionPolicy ByPass","-NoProfile","-NoLogo","-File `"C:\Temp\MyPackage\Deploy-Application.ps1`"","-DeploymentType `"Install`"","-DeployMode `"Silent`""
```

The PowerShell-window opens and the installation of the package starts. Unfortunately the window has no meaningful title:

![Window-Title](https://user-images.githubusercontent.com/42859522/69279955-ae6cbe80-0be5-11ea-8d96-e743e72594eb.png)

When installing a lot of packages in a sequence I would love to see the package-name in the window-title somehow like this:

![Windows-Title-mod](https://user-images.githubusercontent.com/42859522/69280641-1bcd1f00-0be7-11ea-969e-3dc55529a62e.png)

Getting the title like in the example above is a one-liner:

```Powershell
$Host.UI.RawUI.WindowTitle = "$DeploymentType - $installTitle"
```

I would love, if you could implement this.

Thank you!

I have Discovered this when using `Execute-MSI uninstall "PRODUCTCODE"` the logname is generatet by using the data from the registry entry of this software.
By using this characters like : ®™ are not removed from the Log-Name and the when using Zip-compression for the logs the operation fails due bad filenames.
So for this Software I get an error after the uninstall.
 
![Window-2019-11-13 10_07_34](https://user-images.githubusercontent.com/11937981/68749369-64407780-05fe-11ea-97de-fe0b1531cf5d.png)
