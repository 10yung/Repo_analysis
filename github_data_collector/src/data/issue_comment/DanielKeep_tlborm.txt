
I made a [fork](https://github.com/fprijate/tlborm) of this repo. 
Here is [book in mdBook format](https://fprijate.github.io/tlborm/)

You can change the style, print it, ...
To [2.2 `macro_rules!` / Captures](https://danielkeep.github.io/tlborm/book/mbe-macro-rules.html#captures) as per [RFC 1590](https://github.com/rust-lang/rfcs/pull/1590).



Hi @DanielKeep and others,

Made some suggestions for spelling corrections and minor Markdown formatting issues for when markup is used for communicating a message.

This PR addresses issue: #28 and a few other unreported things, please pick what you like and throw away the rest. The spelling issues where reported by my editor, so I decided to share the suggestions with you.
Hello @DanielKeep and others.

I was looking over the repository and my editor complained about the Markdown. I am using [Markdownlint](https://github.com/DavidAnson/markdownlint) to check my Markdown as I write it. To avoid issues, I added a **Markdownlint** configuration and decided to share it with you.

If you have questions to the configuration or Markdownlint in generation I will gladly answer these. If you would like to get Markdownlint integrated with CI using Travis or similar please let me know.

The initial revision disables or configures **Markdownlint** rules to make the current source pass the **Markdownlint** check.

The following rules, should be addressed:

- `no-trailing-spaces`, should be easy, have a look at [EditorConfig](https://editorconfig.org/) or similar

The following rules can just be kept in the specified configuration.

- `first-line-heading`, seems to conflict with the implementation, which uses `%` for indicating headings. (This is not-markdown) and is expected to be something local

- `ul-indent`, has been configured from the default of `2` to `4`. This is primarily addressing issues in Summary.md

- `line-length` rule, has been configured to `false`indicating disabled, since length of lines is a _style_ issue. Could be addressed with EditorConfig or similar

Ref: https://github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md

https://blog.rust-lang.org/2019/01/17/Rust-1.32.0.html

Macro improvements
A few improvements to macros have landed in Rust 1.32.0. First, a new `literal` matcher was added:

```rust
macro_rules! m {
    ($lt:literal) => {};
}

fn main() {
    m!("some string literal");
}
```
`literal` matches against literals of any type; string literals, numeric literals, `char` literals.

In the 2018 edition, `macro_rules` macros can also use `?`, like this:

```rust
macro_rules! bar {
    ($(a)?) => {}
}
```
The `?` will match zero or one repetitions of the pattern, similar to the already-existing `*` for "zero or more" and `+` for "one or more."