â€¦cripts
we should update the [README](https://github.com/crossbario/autobahn-python/blob/master/README.rst) for:

1. "Autobahn supports **Python 3.5+** (on CPython and PyPy)."
2. "The last Autobahn version supporting Python<3.5 was **v19.11.2** which also supported Python 2.7 and 3.3/3.4."


Now that we have deprecate support for python < 3.5, we should **use & promote the async/await syntax** in:

* documentation
* examples

Docs are living [here](https://github.com/crossbario/autobahn-python/tree/master/docs), are writeen in ReST, can be build manually (using `make docs`) and are published automatically (from Travis) to RTD ([here](https://autobahn.readthedocs.io/en/latest/))
Currently one needs to have autobahn[twisted] installed for the `wamp` commandline tool to work. Just like the rest of the project I believe it would make sense to add an asyncio backend as well so that the commandline tool could be used with much less dependencies.
The test occasionally fails, here is one such instance https://travis-ci.org/crossbario/autobahn-python/jobs/628375836
hi,
I have been looking at autobahn-python client code, it looks like we do not have correct error message for scenario's where we are trying to use a secured raw socket, `rss::` and connection fails for any reason.

Currently we have 
```
'ssl argument value passed to %s conflicts with the "ws:" '
'prefix of the url argument. Did you mean to use "wss:"?' %
 self.__class__.__name__)
```

which can certainly be improved upon.
Hi everybody,
I am having an issue on connecting to [JEX Websocket API](https://github.com/JexApi/jex-official-api-docs/blob/master/web-socket-streams.md) while deriving it from [python-binance](https://github.com/sammchardy/python-binance) which is really similar to JEX.
Following example with [Partial Book Depth Streams](https://github.com/JexApi/jex-official-api-docs/blob/master/web-socket-streams.md#partial-book-depth-streams).
I already tested my `rest.py` implementation and it works properly for all the endpoints.

## Steps to reproduce

> environment
<img width="318" alt="OS-configuration" src="https://user-images.githubusercontent.com/21016014/68569498-cc714b00-0490-11ea-9c45-8f36e6a12b6b.png">

**Python** 3.7.4

**pip** 19.3.1 *from /Users/me/.pyenv/versions/3.7.4/lib/python3.7/site-packages/pip (python 3.7)*

---

> exceptions.py
```python
class JEXAPIException(Exception):
    def __init__(self, response):
        self.code = 0
        try:
            json_res = response.json()
        except ValueError:
            self.message = 'Invalid JSON error message from JEX: {}'.format(response.text)
        else:
            self.code = json_res['code']
            self.message = json_res['msg']
        self.status_code = response.status_code
        self.response = response
        self.request = getattr(response, 'request', None)

    def __str__(self):  # pragma: no cover
        return 'APIError(code=%s): %s' % (self.code, self.message)

class JEXRequestException(Exception):
    def __init__(self, message):
        self.message = message

    def __str__(self):
        return 'JEXRequestException: %s' % self.message
```

> rest.py
```python
# coding=utf-8

import hashlib
import hmac
import requests
import time
from binance.helpers import date_to_milliseconds, interval_to_milliseconds
from exceptions import JEXAPIException, JEXRequestException

class Rest(object):

    def __init__(self, api_key=None, api_secret=None):
      self.API_KEY = api_key
      self.API_SECRET = api_secret
      self.session = self._init_session()
      # init DNS and SSL cert
      self.ping()

    def _init_session(self):
      session = requests.Session()
      session.headers.update({'Accept': 'application/json',
                              'User-Agent': 'jex/python',
                              'X-JEX-APIKEY': self.API_KEY})
      return session
    
    def _url(self, domain, version, path):
      return domain + '/' + 'api' + '/' + version + '/' + path

    def _encrypt(self, message):
      return hmac.new(self.API_SECRET.encode('utf-8'), message.encode('utf-8'), hashlib.sha256).hexdigest()

    def _stringify(self, data):
      return '&'.join(["{}={}".format(k, v) for k, v in data.items()])

    def _sign(self, data):
      stringified = self._stringify(data)
      encrypted = self._encrypt(stringified)
      return encrypted

    def _nonce(self):
      return int(time.time() * 1000)

    def _handle(self, response):
        if not str(response.status_code).startswith('2'):
            raise JEXAPIException(response)
        try:
            return response.json()
        except ValueError:
            raise JEXRequestException('Invalid Response: %s' % response.text)

    def _request(self, method, domain, version, path, signed, **kwargs):
      url = self._url(domain, version, path)
      # beware of the order of the parameters
      if signed:
        kwargs['timestamp'] = self._nonce()
        kwargs['signature'] = self._sign(kwargs)
      call = getattr(self.session, method)
      if method == 'get' or method == 'delete':
        if len(kwargs) > 0:
          url += '?' + self._stringify(kwargs)
        response = call(url)
      else:
        response = call(url, kwargs)
      print(method.upper(), url)
      print('params', kwargs)
      json = self._handle(response)
      print('response', json)
      print('')
      return json

    def _public(self, method, path, domain = 'https://www.jex.com', version = 'v1', **kwargs):
      return self._request(method, domain, version, path, signed = False, **kwargs)
    
    def _private(self, method, path, domain = 'https://www.jex.com', version = 'v1', **kwargs):
      return self._request(method, domain, version, path, signed = True, **kwargs)

    # beware of the order of the parameters in each methods below

    # PUBLIC

    def ping(self):
      return self._public(method = 'get', path = 'ping')

    def ticker(self, symbol):
      return self._public(method = 'get', path = 'contract/ticker/24hr', symbol = symbol)

    def depth(self, symbol):
      return self._public(method = 'get', path = 'contract/depth', symbol = symbol, limit = 60)

      # PRIVATE

    def open_orders(self, symbol):
      return self._private(method = 'get', path = 'contract/openOrders', symbol = symbol)

    def create_order(self, symbol, side, quantity, price, type = 'LIMIT', recvWindow = 5000):
      path = 'contract/order'
      return self._private(
        method = 'post',
        path = path,
        symbol = symbol,
        side = side,
        type = type,
        quantity = quantity,
        price = price,
        recvWindow = recvWindow)
    
    def delete_order(self, symbol, orderId, recvWindow = 5000):
      return self._private(
        method = 'delete',
        path = 'contract/order',
        symbol = symbol,
        orderId = orderId,
        recvWindow = recvWindow)
    
    def position(self, symbol, recvWindow = 5000):
      return self._private(
        method = 'get',
        path = 'contract/position',
        symbol = symbol,
        recvWindow = recvWindow)

    def open_stream(self):
      return self._private(method = 'post', path = 'userDataStream')

    def keep_stream(self, listenKey):
      return self._private(method = 'put', path = 'userDataStream', listenKey = listenKey)

    def close_stream(self, listenKey):
      return self._private(method = 'delete', path = 'userDataStream', listenKey = listenKey)
```

> ws.py
```python
from twisted.internet import ssl
from binance.client import Client
from binance.websockets import BinanceSocketManager, BinanceClientFactory, BinanceClientProtocol, BinanceReconnectingClientFactory
from autobahn.twisted.websocket import connectWS, WebSocketClientFactory
from rest import Rest
from os import getenv
from dotenv import load_dotenv
load_dotenv()

def process_message(msg):
    print("message type: {}".format(msg['e']))
    print(msg)
    # do something

class MyClientProtocol(BinanceClientProtocol):
  def onConnect(self, response):
        print("Server connected: {0}".format(response.peer))

  def onConnecting(self, transport_details):
      print("Connecting; transport details: {}".format(transport_details))
      return None
  
  def onClose(self, wasClean, code, reason):
      print("WebSocket connection closed: {}".format(reason))

class MySocketManager(BinanceSocketManager):

  def _start_socket(self, path, callback, prefix='ws/'):
    if path in self._conns:
            return False

    factory_url = self.STREAM_URL + prefix + path
    print(factory_url)
    factory = BinanceClientFactory(factory_url)
    factory.protocol = MyClientProtocol
    factory.protocol.logRxFrame = True
    factory.callback = callback
    factory.reconnect = True
    context_factory = ssl.ClientContextFactory()

    self._conns[path] = connectWS(factory, context_factory)
    return path

  def test_stream(self, symbol, callback):
    return self._start_socket(symbol.lower() + '@spotDepth5', callback)

client = Rest(api_key=getenv('apiKey'), api_secret=getenv('secret'))
bm = MySocketManager(client)
bm.STREAM_URL ='wss://ws.jex.com/'
bm.test_stream('LTCBTC', process_message)
bm.start()
```

## Expected output
I would expect to be able to connect and receive data from the `Partial Book Depth Streams` properly

## Real output
```sh
GET https://www.jex.com/api/v1/ping
params {}
response {}

wss://ws.jex.com/ws/ltcbtc@spotDepth5
Connecting; transport details: {"peer": "tcp4:SOME_IP:443", "is_secure": true, "secure_channel_id": {"tls-unique": null}} // replaced actual IP with SOME_IP as it's not relevant
WebSocket connection closed: connection was closed uncleanly (SSL error: sslv3 alert handshake failure (in ssl3_read_bytes))
```
## Further notes
I also gave a try with a simple `rust` implementation using [websocket crate](https://docs.rs/websocket/0.23.0/websocket/) and another Python lib called [websocket-client](https://github.com/websocket-client/websocket-client) and both work as expected, hence my confusion.

Also, past this simple example my `ws.py` implementation wouldn't work as there's some inner method which calls different `rest.py` method, but it's sufficient enough to test and of course I would rebuild it from scratch once being able to correctly connect with the Websocket.
Looks like the API has changed and it needs to call `add_authenticator(...)` with a `IAuthenticator` instance and not `(u"wampcra", authid="xxxx", secret="xxxx")`.

```
python  examples/twisted/wamp/auth/backend.py 
2019-11-08T21:10:47+0800 ApplicationSession could not be instantiated: add_authenticator() got an unexpected keyword argument 'authid'
2019-11-08T21:10:47+0800 Traceback (most recent call last):
  File "/home/Projects/venv11/lib64/python3.7/site-packages/autobahn/wamp/websocket.py", line 60, in onOpen
    self._session = self.factory._factory()
  File "/home/Projects/venv11/lib64/python3.7/site-packages/autobahn/twisted/wamp.py", line 244, in create
    session = make(cfg)
  File "examples/twisted/wamp/auth/backend.py", line 53, in make
    u"wampcra", authid=u'username', secret=u'p4ssw0rd'
TypeError: add_authenticator() got an unexpected keyword argument 'authid'

2019-11-08T21:10:47+0800 failing WebSocket connection (code=1011): "WAMP Internal Error (add_authenticator() got an unexpected keyword argument 'authid')"
2019-11-08T21:10:47+0800 Main loop terminated.
```
Python documentation encourages users to use asyncio.run to launch the "main" coroutine. ApplicationRunner does not expose how to integrate itself into that pattern, as the `run()` method encapsulates the `loop.run_forever()`.

One use case is to add other non-WAMP coroutines to the event loop:

```
# Desired use case: integrate non-autobahn tasks into the event loop
# 
async def main():
    coro = runner.hypothetical_asyncio_friendly_method(...)
    # then
    t1 = asyncio.create_task()
    t2 = asyncio.create_task()
    tN = asyncio.create_task()
    await asyncio.gather(t1, t2, t3..., coro)

if __name__ == "__main__":
    asyncio.run(main())
```
 

Specifically, how do you convert the examples to idiomatic `asyncio.run`? Attempting to do this with
`examples/asyncio/wamp/rpc/complex/frontend.py`.

1. First attempt
```
    runner = ApplicationRunner(url, realm)
    coro = runner.run(Component, start_loop=False)

    asyncio.run(coro) # blows up

  ## OK so this coro is not suitable to be a asyncio main() ...
  ## ...it is the return value of loop.create_connection()
  ## ...in any case asyncio.run wants to create a new event loop
```
Results in:
```
RuntimeError: Task <Task pending coro=<BaseEventLoop.create_connection() running at /usr/lib64/python3.7/asyncio/base_events.py:941>
cb=[_run_until_complete_cb() at /usr/lib64/python3.7/asyncio/base_events.py:153]>
got Future <Future pending cb=[BaseSelectorEventLoop._sock_connect_done(9)()]>
attached to a different loop
```


`pip install autobahn[all]` fails on CPython 3.8.0 in **cytoolz** with:

```
Installing collected packages: cytoolz, eth-utils, eth-keys, attrdict, hexbytes, rlp, eth-rlp, eth-keyfile, parsimonious, eth-abi, eth-account, protobuf, certifi, urllib3, chardet, idna, requests, lru-dict, varint, netaddr, base58, multiaddr, ipfshttpclient, websockets, attrs, pyrsistent, more-itertools, zipp, importlib-metadata, jsonschema, web3, py-ubjson, argon2-cffi, wsaccel, zope.interface, cbor2, flatbuffers, py-eth-sig-utils, cbor, constantly, incremental, Automat, hyperlink, PyHamcrest, twisted, pyasn1, pyasn1-modules, service-identity, pynacl, msgpack, mypy-extensions, py-ecc, sortedcontainers, pytrie, lz4, ujson, passlib, pyopenssl, lmdb, click, numpy, pyyaml, zlmdb, pyqrcode, autobahn
  Running setup.py install for cytoolz ... error
    ERROR: Command errored out with exit status 1:
     command: /home/oberstet/cpy380_1/bin/python3 -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-79_s_9f9/cytoolz/setup.py'"'"'; __file__='"'"'/tmp/pip-install-79_s_9f9/cytoolz/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record /tmp/pip-record-g4522pr0/install-record.txt --single-version-externally-managed --compile --install-headers /home/oberstet/cpy380_1/include/site/python3.8/cytoolz
         cwd: /tmp/pip-install-79_s_9f9/cytoolz/
    Complete output (111 lines):
    running install
    running build
    running build_py
    creating build
    creating build/lib.linux-x86_64-3.8
    creating build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/__init__.py -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/_version.py -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/_signatures.py -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/utils_test.py -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/compatibility.py -> build/lib.linux-x86_64-3.8/cytoolz
    creating build/lib.linux-x86_64-3.8/cytoolz/curried
    copying cytoolz/curried/__init__.py -> build/lib.linux-x86_64-3.8/cytoolz/curried
    copying cytoolz/curried/exceptions.py -> build/lib.linux-x86_64-3.8/cytoolz/curried
    copying cytoolz/curried/operator.py -> build/lib.linux-x86_64-3.8/cytoolz/curried
    copying cytoolz/itertoolz.pyx -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/recipes.pyx -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/utils.pyx -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/functoolz.pyx -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/dicttoolz.pyx -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/functoolz.pxd -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/utils.pxd -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/dicttoolz.pxd -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/cpython.pxd -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/recipes.pxd -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/itertoolz.pxd -> build/lib.linux-x86_64-3.8/cytoolz
    copying cytoolz/__init__.pxd -> build/lib.linux-x86_64-3.8/cytoolz
    creating build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/dev_skip_test.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_docstrings.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_dicttoolz.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_itertoolz.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_curried.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_dev_skip_test.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_serialization.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_compatibility.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_curried_toolzlike.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_utils.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_inspect_args.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_tlz.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_recipes.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_functoolz.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_embedded_sigs.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_doctests.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_signatures.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    copying cytoolz/tests/test_none_safe.py -> build/lib.linux-x86_64-3.8/cytoolz/tests
    running build_ext
    building 'cytoolz.dicttoolz' extension
    creating build/temp.linux-x86_64-3.8
    creating build/temp.linux-x86_64-3.8/cytoolz
    gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -I/home/oberstet/cpy380_1/include -I/home/oberstet/cpy380/include/python3.8 -c cytoolz/dicttoolz.c -o build/temp.linux-x86_64-3.8/cytoolz/dicttoolz.o
    cytoolz/dicttoolz.c: In function â€˜__Pyx_InitCachedConstantsâ€™:
    cytoolz/dicttoolz.c:8073:272: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(1, 1, __pyx_L1_error)
                                                                                                                                                                                                                                                                                    ^
    cytoolz/dicttoolz.c:8073:34: error: â€˜__Pyx_PyCode_Newâ€™ undeclared (first use in this function); did you mean â€˜PyCode_Newâ€™?
       __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(1, 1, __pyx_L1_error)
                                      ^~~~~~~~~~~~~~~~
                                      PyCode_New
    cytoolz/dicttoolz.c:8073:34: note: each undeclared identifier is reported only once for each function it appears in
    cytoolz/dicttoolz.c:8084:274: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(1, 3, __pyx_L1_error)
                                                                                                                                                                                                                                                                                      ^
    cytoolz/dicttoolz.c:8096:301: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_merge, 100, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 100, __pyx_L1_error)
                                                                                                                                                                                                                                                                                                                 ^
    cytoolz/dicttoolz.c:8108:306: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_merge_with, 157, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 157, __pyx_L1_error)
                                                                                                                                                                                                                                                                                                                      ^
    cytoolz/dicttoolz.c:8120:276: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_valmap, 179, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 179, __pyx_L1_error)
                                                                                                                                                                                                                                                                                        ^
    cytoolz/dicttoolz.c:8132:276: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_keymap, 208, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 208, __pyx_L1_error)
                                                                                                                                                                                                                                                                                        ^
    cytoolz/dicttoolz.c:8144:277: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_itemmap, 237, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 237, __pyx_L1_error)
                                                                                                                                                                                                                                                                                         ^
    cytoolz/dicttoolz.c:8156:279: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_valfilter, 267, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 267, __pyx_L1_error)
                                                                                                                                                                                                                                                                                           ^
    cytoolz/dicttoolz.c:8168:279: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_keyfilter, 299, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 299, __pyx_L1_error)
                                                                                                                                                                                                                                                                                           ^
    cytoolz/dicttoolz.c:8180:280: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_itemfilter, 331, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 331, __pyx_L1_error)
                                                                                                                                                                                                                                                                                            ^
    cytoolz/dicttoolz.c:8192:275: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_assoc, 368, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 368, __pyx_L1_error)
                                                                                                                                                                                                                                                                                       ^
    cytoolz/dicttoolz.c:8204:278: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_assoc_in, 389, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 389, __pyx_L1_error)
                                                                                                                                                                                                                                                                                          ^
    cytoolz/dicttoolz.c:8216:302: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_dissoc, 448, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 448, __pyx_L1_error)
                                                                                                                                                                                                                                                                                                                  ^
    cytoolz/dicttoolz.c:8228:279: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_update_in, 465, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 465, __pyx_L1_error)
                                                                                                                                                                                                                                                                                           ^
    cytoolz/dicttoolz.c:8251:276: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
       __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cytoolz_dicttoolz_pyx, __pyx_n_s_get_in, 536, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 536, __pyx_L1_error)
                                                                                                                                                                                                                                                                                        ^
    cytoolz/dicttoolz.c: In function â€˜__Pyx_CreateCodeObjectForTracebackâ€™:
    cytoolz/dicttoolz.c:11394:5: error: macro "__Pyx_PyCode_New" requires 16 arguments, but only 15 given
         );
         ^
    cytoolz/dicttoolz.c:11378:15: error: â€˜__Pyx_PyCode_Newâ€™ undeclared (first use in this function); did you mean â€˜PyCode_Newâ€™?
         py_code = __Pyx_PyCode_New(
                   ^~~~~~~~~~~~~~~~
                   PyCode_New
    error: command 'gcc' failed with exit status 1
    ----------------------------------------
ERROR: Command errored out with exit status 1: /home/oberstet/cpy380_1/bin/python3 -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-79_s_9f9/cytoolz/setup.py'"'"'; __file__='"'"'/tmp/pip-install-79_s_9f9/cytoolz/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record /tmp/pip-record-g4522pr0/install-record.txt --single-version-externally-managed --compile --install-headers /home/oberstet/cpy380_1/include/site/python3.8/cytoolz Check the logs for full command output.
WARNING: You are using pip version 19.2.3, however version 19.3.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
(cpy380_1) oberstet@intel-nuci7:~$ 
```