### What's in this pull request?
Adds an `usleep` invocation right after the `read(fd, &buf, buf.count * MemoryLayout<CChar>.stride)` call on `readData` function on the **UART.swift** class in order to be able to fully read all the available data on the serial port before returning.

### Is there something you want to discuss?

For my SwiftyXBee library, I am checking whether there is available data on the serial port right before trying to read actual data from it; in order to avoid blocking my program in case there is no data available. Pretty often, I would be getting this crash: `Fatal error: Index out of range: file /home/buildSwiftOnARM/swift/stdlib/public/core/ContiguousArrayBuffer.swift, line 369` when calling `uart.hasAvailableData()` immediately followed by `uart.readData()`.
By trial an error, I found out that adding a 100ms sleep call right after the actual `read` method, would allow all the data to be read, so that `Array(buf[0..<n])` at the return of the `readData` method wouldn't cause me a crash. I know it is not the most elegant solution, but it does its job.

### Pull Request Checklist

- [x] I've added the default copyright header to every new file.
- [x] Every new file has been correctly indented, no tabs, 4 spaces (you can use swiftlint).
- [x] Verify that you only import what's necessary, this reduces compilation time.
- [x] Try to declare the type of every variable and constant, not using type inference greatly reduces compilation time.
- [x] Verify that your code compiles with the currently supported Swift version (currently 4.1.3)
- [x] You've read the [contribution guidelines](https://github.com/uraimo/SwiftyGPIO/blob/master/CONTRIBUTING.md).



### Board Type 
Raspberry PI but not applicable

### Operating System

Linux

### Swift Version

I use prebuilt binaries

### Description

_sysfs GPIO is deprecated and will be removed in 2020, so maybe it is time to update your lib if you are still interested in maintaining it.
Thanks for your consideration 
John James k1ym

Video explaining the interface
https://www.youtube.com/watch?v=BK6gOLVRKuU

New GPIO Interface for User Space - Bartosz Golaszewski, BGDev
https://www.youtube.com/watch?v=cdTLewJCL1Y&list=PLbzoR-pLrL6pISWAq-1cXP4_UZAyRtesk&index=56

Https://git.kernal.org/pub/scm/libs/libgpiod/libgpiod.git

===
https://www.beyondlogic.org/an-introduction-to-chardev-gpio-and-libgpiod-on-the-raspberry-pi/
An Introduction to chardev GPIO and Libgpiod on the Raspberry PI


From the discussion for #98 , we discovered that a PiZero with Buster has two UARTs like the Pi 3/4.
Right now the Zero shares all the configuration of the Pi 1, a new enum case should be added, easy to so in 2.0.0-beta, but that need to be documented for 1.x since the splitting of the original value will break user code.
### Board Type

RaspberryPi3

### Operating System

Raspbian

### Swift Version

Swift 5

### Description

I want to control three LEDs, each connected to a different GPIO port. I want to make them dimmable. I know there are non-Swift solutions out there, such as `PiGPIO`, but I am looking into SwiftyGPIO to complete my project. I know this is CPU intensive, but are there any options for me with this library?

Thanks in advance.


The values returned by readData() are not what we would expect (single value instead of an array with multiple uint8 values that have to be used to obtain the actual temperature Ã  la SHT).
### Board Type

RPi 3 Model B

### Operating System

Ubuntu Mate 16.04

### Swift Version

Swift 4.1.3, canned.

### Description

Attempting to address four SPI slaves using a LS7366R break-out board.  I'm unclear from the SwiftyGPIO SPI documentation how to do slave select.  Do I separately set the CS or GPIO pins low/high in order to select a slave, i.e. slave select is separate from the SPI library implementation itself?

Thanks in advance!

### Board Type

RaspberryPi3 B

### Operating System

Ubuntu Mate 16.04

### Swift Version

Pre-built 4.1.3

### Description

Communicating with the [ADC1115](http://www.ti.com/lit/ds/symlink/ads1115.pdf) analog to digital convertor.  

I'm basing my implementation on the approach described [here](https://github.com/ControlEverythingCommunity/ADS1115/blob/master/Arduino/ADS1115.ino) for Arduino.

Communication with the device is fine.  `i2cdetect -y 1` reports the board as present at address 0x48.

Here is my code:

```swift
let myData: [UInt8] = [1, 132, 131]
// PROBLEM IS HERE...
i2c.writeData(72, command: 0, values: myData)

usleep(3000)
while true == true {
    i2c.writeByte(72, value: 0)
    let byte1 = i2c.readByte(72)
    let byte2 = i2c.readByte(72)
    //let resData = i2c.readWord(72, command: 0)
    print(byte1, byte2)
    //print(resData)
    usleep(5000)
}
```
_Please list any error message you've receveived during execution._

When I attempt to do a `writeData` write, I get this error message:
```
true
I2C write failed: Input/output error
Aborted
```

(True refers to the result of `isReachable(72)`.)
### Board Type

Any

### Operating System

Any

### Swift Version

Any

### Description

Currently, the SwiftGPIO interfaces are tight up to concrete classes which heavily depend on Raspberry Pi's environment, OS and libraries. The downside is the code which has integrated SwiftyGPIO gets crash when run on MAC.

In order to take advanges of XCode, and enable debugging capable on MAC/XCode, I'd like to add mocks feature into SwiftyGPIO. 

The overall feature will conduct these things:
1) Implement mock classes of UARTInterface, SPIInterface, I2CInterface, ADCInterface, OneWireInterface, PWMOutput.
2) Mock classes provide extra closures, so that developers can provide any simulation logic into any certain function of mock object.
2) The concrete object shouldn't be created directly, but by help of InstanceCreator
3) InstanceCreate is able to instantiate the actual objects or alternative mock objects depending on 2 things, enableMock flag and the current OS. if enableMock is true and the OS is MAC then return the mock object, otherwise return the actual object

Check out this branch for more detail: https://github.com/haikieu/SwiftyGPIO/tree/Add-Mocks
### Board Type

_Specify which kind of ARM board you are using, e.g. RaspberryPi3, RaspberryPi1, BBB, etc..._
Raspberry Pi 3 B+

### Operating System

_Which OS are you using? e.g. Ubuntu Mate 16.04, Raspbian, Armbian, etc..._
Hypriot 1.9.0

### Swift Version

_Which Swift version are you using? Did you compile it yourself or did you use prebuilt binaries?_
4.1.2 using [pre-built binaries](https://github.com/helje5/dockSwiftOnARM)

### Description

_Describe your hardware setup (e.g. board connected to i2c sensor) and describe briefly the issue, specifying the steps needed to reproduce it, if necessary._
I have an LED on the breadboard with a resistor. The ground is connected to P6, the positive is connected to P4 on a Raspberry Pi 3 B+

I've got a project created that compiles. The code in main.swift is as follows:

```
import Glibc
import SwiftyGPIO

var gp4 = GPIO(name: "P4", id: 4)
gp4.direction = .OUT

repeat {
    gp4.value = (gp4.value == 0) ? 1 : 0
    usleep(150 * 1000)
} while(true)
```

I also tried declaring `gp4` like this:

```
let gpios = SwiftyGPIO.GPIOs(for: .RaspberryPi3)
var gp4 = gpios[.P4]!
```

_Please list any error message you've receveived during execution._

When `gp4` is declared like this:

```
var gp4 = GPIO(name: "P4", id: 4)
gp4.direction = .OUT
```
> Fatal error: Unexpectedly found nil while unwrapping an Optional value: file /home/swift/GPIOTest/.build/checkouts/SwiftyGPIO.git-1189449763/Sources/SwiftyGPIO.swift, line 104
> Current stack trace:
> Illegal instruction (core dumped)
> 

When `gp4` is declared like this:

```
let gpios = SwiftyGPIO.GPIOs(for: .RaspberryPi3)
var gp4 = gpios[.P4]!
```

> Fatal error: Can't open /dev/mem , use sudo!: file /home/swift/GPIOTest/.build/checkouts/SwiftyGPIO.git-1189449763/Sources/SwiftyGPIO.swift, line 353
> Current stack trace:
> Illegal instruction (core dumped)
### What's in this pull request?

Changes how the PWM hardware is controlled in PWM.swift to make it possible to drive both channels at the same time and rapidly be able to change the duty cycle (pulsing, ramps, etc) on the PWM channels without excess flickering. 

### Why a New Request?

I originally pulled from my fork's master instead of the work branch. This one uses the work branch, so it doesn't accidentally include unrelated changes, like my aarch64 fixes.

### Is there something you want to discuss?

This PR doesn't attempt to modify the pattern writing behaviors at all, and only attempts to clean things up so that when going into pattern writing, you get the existing behavior, while the simpler PWM control gets the new behavior, with a bit of work tracking which mode the PHY is currently in. Unfortunately, I don't know how successful this change is. 

### Pull Request Checklist

- [X] I've added a copyright header to every new file.
- [X] Every new file has been correctly indented, no tabs, 4 spaces (you can use swiftlint).
- [X] Verify that you only import what's necessary, this reduces compilation time.
- [X] Try to declare the type of every variable and constant, not using type inference greatly reduces compilation time.
- [X] Verify that your code compiles with the currently supported Swift version (currently 3.0.2 to support boards with Raspbian, don't use any 3.1 or 3.1.1 feature)
- [X] You've read the [contribution guidelines](https://github.com/uraimo/SwiftyGPIO/blob/master/CONTRIBUTING.md).

