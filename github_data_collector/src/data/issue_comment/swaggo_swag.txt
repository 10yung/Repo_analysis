I cant install swag
![image](https://user-images.githubusercontent.com/26333526/72208853-05da2d00-34b9-11ea-90de-88ab578d2270.png)

**Your swag version**
last
**Your go version**
1.13.6 windows/amd64


Hi
I just want to add multiple base path in swagger doc.
For  ex : 
My base path is `/api/v1`
I have defined two tags(let say A and B)
1. Endpoints under tag A will have url like 

> `localhost:8080/api/v1/getList`

2. Endpoints under tag B will have url like 

> `localhost:8080/api/v1/sub/getList`

I can do this by adding `@router /sub/getList [post]`, but it is not a best practice for adding _/sub_ in all endpoints. So I am searching for solutions like **define basepath for particular tags** or **override the global base path**.

Or is there any way of adding servers like following:
```
"servers": [
    {
      "url": "https://localhost:8080/api/v1/"
    },
    {
      "url": "https://localhost:8080/api/v1/sub/"
    }
  ],
```
**Is your feature request related to a problem? Please describe.**
When using OAuth2 security definitions, it is frustrating to always have to put the OAuth information into the Swagger UI modal every time I want to authenticate. Swagger UI provides functionality to include default values for these variables (e.g. `clientId`, `realm`, `appName`) - [see here](https://swagger.io/docs/open-source-tools/swagger-ui/usage/oauth2/) for relevant Swagger UI documentation.

**Describe the solution you'd like**
In order for implementations using this library and Swagger UI (such as swaggo/echo-swagger, which I'm using), the relevant configuration parameters need to be provided to the Swagger UI JS library. This information could be included by this library using `// @clientId my-client` in the `// @securitydefinitions.oauth2.*` comment block (or similar).

**Describe alternatives you've considered**
This could also be a part only of libraries such as swaggo/echo-swagger that use this library - these are the components that would actually call the `initOAuth()` function from the Swagger UI library. It makes sense to me to have this information available from this central library, though.

**Additional context**
You can see how flask-restplus handle this here: https://flask-restplus.readthedocs.io/en/stable/swagger.html#customization and https://github.com/noirbizarre/flask-restplus/blob/master/flask_restplus/templates/swagger-ui.html

**Describe the bug**
After authenticating properly with OAuth2Implicit, I get redirected back to the swagger docs with the token in the url fragment, but it does not send those as a Bearer token for my requests.
Even with this security definition:
```
// @securitydefinitions.oauth2.implicit OAuth2Implicit
// @in header
// @name Authorization
// @authorizationurl myauthurl.com
```
and my endpoint has: `// @Security OAuth2Implicit` on each

**To Reproduce**
Steps to reproduce the behavior:
1. Setup swagger with OAuth2Implicit
2. Authenticate in swagger
3. Make a request inside swagger
4. Realize the Authorization header is not sent

**Expected behavior**
The Bearer token should be sent as a header called Authorization when making requests

**Your swag version**
e.g. 1.6.3

**Your go version**
e.g. 1.13.4

**Desktop (please complete the following information):**
 - OS: [e.g. iOS] Ubuntu
 - Browser: [e.g. chrome, safari] Firefox
 - Version: [e.g. 22

**This PR propose one new feature and fix:**
- Feature: Possibility to specify which docs file to generate - `go` or `json` or `yaml`. Defaults preserved to all file types.
- Fix: Typo for file name and space before parentheses in cmd package.

**Reason for implemented feature:**
Needed because I created my own handler for serving static files and the only file I need to show Swagger UI for my API is `docs.go`. I don't need other files, because I'm setting basic project/docs variables (name, version, description, ...) dynamically at the start of API/Docs server and after `swag init` they are not fully correct (as expected).
**Describe the bug**
The data type formats link in the README does not point at anything.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to https://github.com/swaggo/swag/blob/ab69c2399a4b62ecf9fe39ebe2cab91e91a437e9/README.md#available
2. Click on Data Type Formats
3. It goes nowhere

**Expected behavior**
To show me the documentation for Data Type formats.

**Desktop (please complete the following information):**
 - OS: ubuntu 18.04
 - Browser:  chrome
 - Version: 78


A few weeks back I grabbed the prebuilt OSX binary of v1.6.3.  Today I'm adding a swagger generation task to our CI. I started getting errors.  To make sure the CI machine and my Mac are running the same version I:

`go get -u github.com/swaggo/swag/cmd/swag`

On both platforms.  Both platforms and the prebuilt binary all report v1.6.3.  The OSX version I just "go got" produces the error, while the prebuilt binary I grabbed a few weeks ago does not.

Steps to reproduce the behavior:
Sorry, No easy answer here as I don't have a small source code example

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
 The error I'm getting...

`2019/12/05 13:44:09 Type definition of type '*ast.InterfaceType' is not supported yet. Using 'object' instead.
2019/12/05 13:44:09 unknown field type &ast.InterfaceType{Interface:4414, Methods:(*ast.FieldList)(0xc00082ecf0), Incomplete:false}`

**Your swag version**
v1.6.3

**Your go version**
go version go1.13.3 darwin/amd64

**Desktop (please complete the following information):**
 - OS: OSX 10.15.1
 - Browser: Chrome Version 78.0.3904.108 (Official Build) (64-bit)


Has as use the same model in many @param different, just that with different values of example.

Example:

`type User struct {
	ID        uint64 
	Email     string
	Password  string
	Person    *Person
}`

In endpoint A:

// @Param full body model.User true "..."
`{
	"email": "sample@sample.com",
	"password": "password",
	"person": 
	{
		"name": "Sample name",
                 "..."
	}
}`

In endpoint B:
// @Param short body model.User true "..."
`{
	"email": "sample@sample.com"
}`

I saw that you can use the example tag to specify, but it seems to me that it becomes an example for all parameters that model is used.

a demo struct like this:

```
type Model struct {
    s string `example:""`
}
```

the docs example will set s exmaple is `{"s": "string"}`, is there a way to let it be `{"s": ""}` 
I have a controller use by two gin Group, such as:

```
g1 := ginapp.Group("/g1")
{
    g1.GET("/ping", Ping)
}
g2 := ginapp.Group("/g2")
{
    g2.GET("/ping", Ping)
}
```

Is there a way can write comments for the Ping to support two different router? 