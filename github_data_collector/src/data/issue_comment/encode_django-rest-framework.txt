# Removed section that said to: add import line `from django.conf.urls import include`
* Reasoning: Tutorial already had user add from `django.urls import include` in part 1.  Alternatively mention that either import will link to the same module function. The implication was that this new `include` import had different functionality or that maybe one of the imports were deprecated or something.

# Added clarification to open browser at snippets endpoint
* Reasoning: there are a lot of possible endpoints at this point in the tutorial and user hasn't been given a browser URL/endpoint for a while.  Neither the index `/` or the newly added `/api-auth/` give the described Login button,  potentially leading user to believe code was enterered incorrectly at some point .

*Note*: Before submitting this pull request, please review our [contributing guidelines](https://github.com/encode/django-rest-framework/blob/master/CONTRIBUTING.md#pull-requests).

## Description

Please describe your pull request. If it fixes a bug or resolves a feature request, be sure to link to that issue. When linking to an issue, please use `refs #...` in the description of the pull request.

## Checklist

- [x] I have verified that that issue exists against the `master` branch of Django REST framework.
- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate.
- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)
- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)
- [x] I have reduced the issue to the simplest possible case.
- [ ] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)

## Steps to reproduce
[link to issue explaining "pause" on maintenance](https://github.com/Tivix/django-rest-auth/issues/568#issuecomment-529569881)

## Expected behavior

## Actual behavior
Discussion:
Should the [DRF documentation](https://www.django-rest-framework.org/api-guide/authentication/#django-rest-auth) point to projects no longer maintained/"on pause".
Given the critical nature of authentication, I think it would be good to either remove the project from the documentation or display its maintenance status. Especially as it is just mentioned in an issue.


Fixes https://github.com/encode/django-rest-framework/pull/6240#discussion_r361321402. `SearchFilter.must_call_distinct` incorrectly exits early if it encounters an annotation. Any subsequent m2m fields are ignored instead of causing the method to return true. By continuing, the annotations still bypass the distinct check, and will return false at the end if no m2m fields are encountered.
This fixes #7100 which was caused by related changes in #7086. Model serializers will now correctly use serializer field names that map to the field sources in `unique_together`. If there are multiple fields that use the same source (seems unlikely but doesn't hurt to check?), then an error is raised instead. Note that the error is raised somewhat late during validation, but that's when the validators are generated. We could create/cache them on `__init__` (maybe cache fields and validators?), but that seems like a separate discussion.
Adjusts the related field pk-only optimization check to also handle properties. Should fix #6643 as well as #4653. Tests were adapted from #2690, but didn't include the hyperlink tests, since I don't think they're necessary here.

In regards to https://github.com/encode/django-rest-framework/pull/2690#issuecomment-125200044, I'm not too worried about the tests model changes, since the rest of the test module fairly heavily relies on them. I'm not worried about impact either, since the method/prop won't have an impact on other model serializer tests. Thoughts?
Consider this useless serializer:

``` python
class MySerializer(serializers.Serializer):

    random_number = serializers.SerializerMethodField()

    def get_random_number(self):
        # Chosen by fair dice roll.
        # Guaranteed to be random.
        return 4
```

Assuming you added this serializer in an endpoint and generated the OpenAPI schema, the serializer would look like this:

``` yaml
properties:
  random_number:
    type: string
  required:
  - random_number
```

The issue here is there is no way to tell DRF to use `type: number` here. I thought of a few possibilities:

* An `output_field` attribute, like `serializers.SerializerMethodField(output_field=serializers.IntegerField())`, similarly to Django's [Query Expressions](https://docs.djangoproject.com/en/2.2/ref/models/expressions/#expressionwrapper-expressions)
* A decorator, like `openapi_type(serializers.SerializerMethodField(), serializers.IntegerField())`
* An attribute, similarly to setting descriptions on [admin actions](https://docs.djangoproject.com/en/3.0/ref/contrib/admin/actions/#writing-action-functions):

  ``` python
  random_number = serializers.SerializerMethodField()

  def get_random_number(self):
      return 4

  get_random_number.output_field = serializers.IntegerField()
  ```
* Simply something DRF does not support, which probably should be documented somewhere as a possible caveat.
Instead of copying over a select few fields from the schema generation for `ListField`, we are now copying over the entire generated schema and trusting our schema generation to produce the right sub-schema for the child field.

This fixes #7023.
This closes #7080.
Request Method: | GET
-- | --
http://127.0.0.1:8000/api/
3.0.2
AssertionError
Using OpenAPIRenderer, but `pyyaml` is not installed.
/home/admin/DEV/PYTHON/Frameworks/django/HighEndSalesEnv/lib/python3.7/site-packages/rest_framework/renderers.py  in __init__, line 1053
/home/admin/DEV/PYTHON/Frameworks/django/HighEndSalesEnv/bin/python
3.7.5
['/home/admin/DEV/PYTHON/Frameworks/django/HighEndSalesEnv/backend',  '/usr/lib/python37.zip',  '/usr/lib/python3.7',  '/usr/lib/python3.7/lib-dynload',  '/home/admin/DEV/PYTHON/Frameworks/django/HighEndSalesEnv/lib/python3.7/site-packages']
Fri, 10 Jan 2020 01:39:39 +0000

Why this error again when this issue is already resolved in #6366
Adds failing test for #7134 

## Checklist

- [x] I have verified that that issue exists against the `master` branch of Django REST framework.
- [x] I have searched for similar issues in both open and closed tickets and cannot find a duplicate. **but** I think it might be related to the work here: https://github.com/encode/django-rest-framework/pull/4217
- [x] This is not a usage question. (Those should be directed to the [discussion group](https://groups.google.com/forum/#!forum/django-rest-framework) instead.)
- [x] This cannot be dealt with as a third party library. (We prefer new functionality to be [in the form of third party libraries](https://www.django-rest-framework.org/community/third-party-packages/#about-third-party-packages) where possible.)
- [x] I have reduced the issue to the simplest possible case.
- [x] I have included a failing test as a pull request. (If you are unable to do so we can still accept the issue.)

## Steps to reproduce

### First: check Django behaviour

Given a simple Model with a single `IntegerField`, when working with SQLite (I'm running version 3.27 which is officially supported by Django) it is possible to generate an overflow error.

Model:

```py
class OverflowModel(models.Model):
    value = models.IntegerField(unique=True)
```

Test:

```py
    def test_model(self):
        OverflowModel(value=9223372036854775808).full_clean()
```

Gives an `OverflowException`:

```py
tests/test_model_serializer.py:1320: in test_model
    OverflowModel(value=9223372036854775808).full_clean()
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/models/base.py:1217: in full_clean
    self.validate_unique(exclude=exclude)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/models/base.py:999: in validate_unique
    errors = self._perform_unique_checks(unique_checks)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/models/base.py:1103: in _perform_unique_checks
    if qs.exists():
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/models/query.py:777: in exists
    return self.query.has_results(using=self.db)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/models/sql/query.py:537: in has_results
    return compiler.has_results()
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/models/sql/compiler.py:1114: in has_results
    return bool(self.execute_sql(SINGLE))
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/models/sql/compiler.py:1144: in execute_sql
    cursor.execute(sql, params)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/backends/utils.py:68: in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/backends/utils.py:77: in _execute_with_wrappers
    return executor(sql, params, many, context)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/backends/utils.py:86: in _execute
    return self.cursor.execute(sql, params)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/backends/sqlite3/base.py:396: in execute
    return Database.Cursor.execute(self, query, params)
E   OverflowError: Python int too large to convert to SQLite INTEGER
```

However, using `MaxValueValidator` allows us to protect SQLite from this overflow. So if we change the model and test, then Django raises a `ValidationError` complaining that `value` is too large:

Model:

```py
class OverflowModel(models.Model):
    value = models.IntegerField(unique=True, validators=[
        MaxValueValidator(9223372036854775807),
    ])
```

Test:

```py
    def test_model(self):
        with self.assertRaises(ValidationError):
            OverflowModel(value=9223372036854775808).full_clean()
```

In this way we can use Django to protect SQLite from the overflow - all is good at the Django level.

### DRF behaviour

Now we make a `ModelSerializer` for this updated model with the `MaxValueValidator` in place and test it with the large int:

```py
    def test(self):
        class TestSerializer(serializers.ModelSerializer):
            class Meta:
                model = OverflowModel
                fields = '__all__'

        serializer = TestSerializer(data={'value': 9223372036854775808})

        with self.assertRaises(serializers.ValidationError):
            serializer.is_valid()
```

## Expected behaviour

This test should pass. The DRF model serializer should raise a `ValidationError` that complains that `value` is too large, something like:

```
rest_framework.exceptions.ValidationError: {'value': [ErrorDetail(string='Ensure this value is less than or equal to 9223372036854775807.', code='max_value')]}
```

## Actual behaviour

However the test fails with an `OverflowError` which arises from the uniqueness check:

```py
tests/test_model_serializer.py:1334: in test
    serializer.is_valid()
rest_framework/serializers.py:219: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
rest_framework/serializers.py:418: in run_validation
    value = self.to_internal_value(data)
rest_framework/serializers.py:475: in to_internal_value
    validated_value = field.run_validation(primitive_value)
rest_framework/fields.py:567: in run_validation
    self.run_validators(value)
rest_framework/fields.py:589: in run_validators
    validator(value, self)
rest_framework/validators.py:73: in __call__
    if qs_exists(queryset):
rest_framework/validators.py:21: in qs_exists
    return queryset.exists()
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/models/query.py:777: in exists
    return self.query.has_results(using=self.db)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/models/sql/query.py:537: in has_results
    return compiler.has_results()
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/models/sql/compiler.py:1114: in has_results
    return bool(self.execute_sql(SINGLE))
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/models/sql/compiler.py:1144: in execute_sql
    cursor.execute(sql, params)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/backends/utils.py:68: in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/backends/utils.py:77: in _execute_with_wrappers
    return executor(sql, params, many, context)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/backends/utils.py:86: in _execute
    return self.cursor.execute(sql, params)
.tox/venvs/py37-django30/lib/python3.7/site-packages/django/db/backends/sqlite3/base.py:396: in execute
    return Database.Cursor.execute(self, query, params)
E   OverflowError: Python int too large to convert to SQLite INTEGER
```

## Thoughts

(Ignore as appropriate)

It looks to me like the check for uniqueness happens before the field level validation that happens as a result of the `MaxValueValidator` because when I dump the field's `validators` I get:

```
[
    <UniqueValidator(queryset=OverflowModel.objects.all())>,
    <django.core.validators.MaxValueValidator object at 0x7f6743eff7f0>
]
```

This means that round-tripping the database happens before checking the max value. This is unexpected behaviour and I was surprised when I found it - I would expect as much validation as possible to take place before the database hit.

I also experimented with adding a field-level `validate_value()` function to the serializer, but it appears that `run_validators()` happens before that is trigged, so it's no help in preventing the overflow.