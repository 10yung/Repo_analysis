I have implemented the sign in with the apple and connected it to Parse. Everything worked fine until I started saving objects in different classes I got Following Error

[Error]: jwt expired (Code: 0, Version: 1.17.3)
Optional("jwt expired")

Before making any conclusion on this issue I tried to refresh my token by logging In again with apple, I am now able to save objects in any class. 

In facebook there is the token expiration date, if token would expire, login In again would do the trick but the problem is there is no expiry date attached with Auth Token returned by Apple.

Is there any other way around to solve this issue or to ask user every time to signup with apple.     

For some reason we've never added OCMock as an official dependency in Carthage. It's just automatically loaded because of the Facebook SDK till now. 
I am trying to implement Sign in With Apple.  I am able to successfully authenticate the user on my iPhone 11 running iOS 13.3 using iOS API. 
Parse Server version 3.9.0. 
Parse iOS SDK  1.17.3

As part of login process, i save more information in _User for the newly created user after PFUser.logInWithAuthType(inBackground: "apple",  is executed successfully. 

I get error 206 when saving. I read somewhere that it could be related nil sessionToken. it is indeed nil after successful login. The PFUser.current().authenticated is true.

I read in many posts about keychain access but not able find entry for my app in Keychain app. is missing entry an issue? How to add it? Keychain Sharing is enabled.

I have also Facebook and email based account. These work fine.

How to fix the issue?

Things i have tried
1. Clear build
2. Clean folder
3. Delete app

Thanks
Ashish
I've been using Parse since around 2015 and have migrated to AWS ever since. I've become pretty familiar with it but this new issue I found is a bit odd. When you execute a PFQuery on a PFRelation object with a ```limit``` value of **< 5** the query returns incorrect objects. I haven't manipulated the server code, so I'm assuming this is an issue with the iOS SDK(?). Here's an example of what I have:

```
// MARK: - DispatchGroup
let dispatchGroup = DispatchGroup()
        
/// Initialized array of Post objects to append to this class' ```posts``` array each time the user scrolls to the end of the collection view. Useful to sort each new list of Post objects from newest to oldest
var additionalPosts: [Post] = [Post]()
additionalPosts.removeAll()

// Loop through the "Group" PFObjects
for group in groups {
    // MARK: - DispatchGroup
    dispatchGroup.enter()
            
    // MARK: - PFQuery
    let postsQuery = group.relation(forKey: "posts").query()
    postsQuery.order(byDescending: "createdAt")
    postsQuery.skip = 0
    postsQuery.limit = 2    // If 2 it returns the incorrect objects ‚Äî¬†sometimes not at all. If 5, it works fine.
    postsQuery.findObjectsInBackground { (objects: [PFObject]?, error: Error?) in
        if error == nil {
            // Iterate through each "Post" PFObject
            objects?.forEach({ (object: PFObject) in
                // MARK: - Post
                let post = Post(object, group)
                additionalPosts.append(post)
                            
                // Sort the ```additionalPosts``` array with the new element
                additionalPosts = additionalPosts.sorted(by: {$0.object?.createdAt ?? Date() > $1.object?.createdAt ?? Date()})
            })
                    
            // MARK: - DispatchGroup
            dispatchGroup.leave()
                    
            } else {
                print("\(#file)/\(#line) - Error: \(error?.localizedDescription as Any)")
                // MARK: - DispatchGroup
                dispatchGroup.leave()
            }
        }
    }
```

Essentially, this piece of code gets the first 2 posts per each group the current user is a member of. The reason why we even need to use ```skip``` and ```limit``` on these queries is because we page the ```UICollectionView``` once the user scrolls to the end of the list (classic implementation seen in every product). Once scrolled to the end of the list, the request gets the "next 2 most recent posts per each group you're a part of," but this doesn't happen. It only happens when the limit is > 5. 
Hi folks

So I've started working on this, but I've run into some trouble that I'm going to need some extra eyes on.

Basically, in recent versions of our stack, you can check for iOS 13 and above in Objective C using this syntax:
```
if (@available(iOS 13.0, *)) {

}
```

Since Sign in with Apple is officially available for iOS 13 and newer only, I'm using this to ensure the compiler doesn't choke on the new types. Unfortunately, it's choking on them anyway. The static analysis doesn't show any issues, but at actual build time, this gets thrown up:

<img width="596" alt="Screenshot 2019-12-19 at 15 02 26" src="https://user-images.githubusercontent.com/845731/71179495-93d34700-2270-11ea-8f8b-c720efd8878b.png">

I've tried creating a new project with a deploy target of 8.0 like ours, but it just works ü§∑üèΩ‚Äç‚ôÇÔ∏è.

So this is likely some build setting somewhere, and I have no idea where that might be. Any hints or help would be appreciated.

EDIT: The code in question can be found in PFLoginViewController.m in the '_loginWithApple' method.
logic error
 Converting a pointer value of type 'NSNumber *' to a primitive boolean value; instead, either compare the pointer to nil or call -boolValue

Converting a pointer value of type 'NSNumber *' to a primitive boolean value; instead, either compare the pointer to nil or call -boolValue

nil returned from a method that is expected to return a non-null value
So I wanted to create an issue to being a discussion on things we need to do to resume regular releases. Seems we have several issues out there that keep our builds from passing and most need to be fixed in order to have a release build complete. We have some pull requests that are currently being worked on at fixing a few of these issues. Information is spread out all over and I feel we need a discussion to bring all the information together so we can work out what needs to be fixed and what does not. Also, its safe to mention that most of these issues also effect ParseLiveQuery. So let this issue serve as a discussion for both. 

I'll start the discussion by providing some info and then I welcome any and all feedback.

### Bolts:

Xcode 11 build tools now handles macOS builds. We are seeing that dependencies that have a non-specific target names(aka "Bolts" vs "Bolts-macOS")  or dynamic dependencies are attempting to use, what was previously and iOS only target, as dynamic or macOS/Catalyst targets. I dont know which it is but basically iOS targets are somehow being used for macOS builds now. When loaded in Xcode 11 you can clearly see all files in "compiled sources"  for those targets to be marked as "macOS and iOS". This issue primarily effects builds that are using Carthage. 

The primary issue here is that Bolts is no longer being maintained by Facebook and currently our only option is to update it ourselves through our own fork found [here](https://github.com/parse-community/Bolts-ObjC).

Currently @mman has started removing all deprecated aka iOS only class "UIWebView". We still need to fix universal build targets to include/exclude specific files from specific platforms.  Overall, this is a temporary fix as this needs a lot of work. Promise Kit is a framework that has been tossed in there as a potential replacement. I'd love to hear opinions about wether or not we should bring bolts up to date and maintain it or switch to a well maintained async Promise-like framework like Promise Kit. Also, if anyone would like to assist us in implementing this let us know. 

### CircleCI and Travis

Now I know we've been using both for quite a while but looking at other repos and seeing what CircleCI does now I'm beginning to question whether or not we need both. Both services are now capable of unit testing, building multiple targets for different devices, and running documentation/release scripts. Do we really want to keep maintaining both? Was there a specific reason they both where implemented? 

If anyone reading this has experience with creating CircleCI/Travis config files I'd love to hear from you. So far I've learned enough to get our builds working again but I feel they are far from perfect. Also, if anyone is adept at writing rake files I feel ours could use an update to take into account the latest iOS versions and Xcode 11. We could use your advice on not only Parse and ParseLiveQuery but on updating our Bolts fork as well. 

### ParseUI

Apple Sign In

The last word I heard about this is that we where looking at adding some code that helped with the login process via added functions. If we really want to implement this correctly we need to update the Login/Signup UI with the official required button from Apple as well as automatically have this added as a dependency anytime Twitter or Facebook submodules are used. Apples official policy is that all apps that use any other form of 3rd party oAuth that Apple Sign In must be offered and presented as the first option. If we do this properly we can save a lot of developers so major time and I think it will be much appreciated.

iPad OS & Catalyst

Now I haven't looked into what will be required to support these two but I do know we need some testers for our current components. PFImageView, TableView, etc.. all could use a bit of testing to see what kind of work, if any, needs to be done to offer ParseUI to those platforms. If it's too much we need to be excluding those elements from those platforms to protect users from potentially some major confusion or frustration. In the future we should look to make specific iPadOS and Catalyst classes to make developing for those platforms with Parse easier.

### Unit Tests

We have several tests failing for iOS and macOS. We need this fixed if we really want to get back on track. Anyone that would like to take a look at the build logs and help us get them fixed would be extremely appreciated. 

### Warnings

Now that we have officially upgraded everything to Swift 5 we should have a look at our warnings I've seen popping up in our CI/CD builds. I'd love to see these go away before our next release. 

### Docs

I'd like to thank everyone whos been helping getting our docs repo updated so that our guide on parseplatform.org remains accurate. However, we still need quite a bit of work done. This obviously isnt required for our next release but I thought it was worth mentioning. 

### Conclusion

We have a lot of work to do, but if we can all work together to knock these out we can get back to adding features and improving Parse and LiveQuery with the regularity Parse is known for. I'd love to hear any and all feedback about any of these issues. If anyone wants to start working on any of them I'd love to start getting the other associated issues assigned to them. It seems we are kind of all over the place and all our issues are becoming dated, making it hard to keep track of what we need done. Please let's use this discussion to regroup and get on the same page and make our next release possible. 

If anyone is interested in being a regular contributor and joining our team let us know!
https://circleci.com/gh/parse-community/Parse-SDK-iOS-OSX/3641?utm_campaign=workflow-failed&utm_medium=email&utm_source=notification

This started a few days ago. There haven't been any source changes to trigger this. Has our environment been changed? 

@parse-community/ios-osx 

EDIT: Full disclosure, I posted this before I tested it locally. I think I just wanted attention.

But `bundle exec rake test:cocoapods` locally fails at the same spot with Xcode 11.2.
Hi,

We always download the iOS source ZIP file from https://github.com/parse-community/Parse-SDK-iOS-OSX/releases. It normally consists of 2 files (e.g. version 1.17.2):

1. Bolts.framework
2. Parse.framework

However, the [ZIP for iOS 1.17.3](https://github.com/parse-community/Parse-SDK-iOS-OSX/releases/download/1.17.3/Parse-iOS.zip) only contains the Parse.framework.
Is this intentional? And can the Bolts.framework from version 1.17.3 still be used?

Thanks
Hi, I understand that Parse Server has been updated with native support for Apple Sign In, though I'm very uncertain what's recommended to implement it with this SDK.  Should I write a helper that conforms to `PFUserAuthenticationDelegate`, similar to what the SDK has in `PFFacebookUtils`, or is that overkill? 

PFFacebookUtils calls `[FBSDKAccessToken setCurrentAccessToken: token]` but idk what the equivalent would be for Apple.

Perhaps this information would be helpful to include in the SDK docs!