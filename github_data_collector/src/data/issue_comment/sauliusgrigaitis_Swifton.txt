I appreciate your frankness (and I'm sure frustration) of your remark:

> IMPORTANT! We don't see any way how to make web development as great as Ruby on Rails or Django with a very static nature of current Swift. We hope that things will change at some point and we will return to active development.


Could you please expound upon this and provide more reasoning as to how (and perhaps maybe why) this is the case? Personally I'm curious about how Swift has this lock-in when compared to Crystal (albeit Crystal is modeled after Ruby and I can see somewhat the difference).  I'm just hoping to see things through your eyes better after working on this so diligently as you have and to understand the walls you hit more clearly.
Using the last version of Swift (Swift version 3.0-dev)

When executing: swift build

```
Cloning https://github.com/necolt/Stencil.git
HEAD is now at ee7c76f Merge pull request #3 from weby/master
Resolved version: 0.5.6
Cloning https://github.com/necolt/PathKit.git
HEAD is now at c99537a Merge pull request #2 from weby/master
Resolved version: 0.6.4
Empty manifest file is not supported anymore. Use `swift package init` to autogenerate.
error: The package at `/bitnami/swift/Swifton/Packages/PathKit.git' has no Package.swift for the specific version: 0.6.4
```

It seems that the version of the dependencies are correct.

If good, I'll add tests.

I was thinking if it's possible to map routes directly to methods of Controller. For example:

```
router.get("/", TodosController().index)
etc
```

Resources can be implemented by adopting protocols. I.e. TodosController adopts Resource protocol and implements some or all of the protocol's methods. router.resources() will expect a class which adopts that protocol.

Filtering can be implemented by looking up method names via reflection.

What do you think of this approach?

This is kind of the same as #25 but that issue encompassed two issues:
1. All static files were returned in a response with a "text/plain" mimeType -> Now fixed
2. Media assets can't be returned because the following line failed

``` swift
// Router.swift:111
...
if let body = String(data:contents!, encoding: NSUTF8StringEncoding) {
...
```

Any file that is a **jpeg** or **png** etc... Returns a nil body on this line which leads to this code returning a `notFound` Response:

``` swift
// Router.swift:95
if let staticFile = serveStaticFile(newRequest) {
    return staticFile as! Response
}

return notFound(newRequest) as! Response
```

So we are still having an issue with not returning media assets this isn't in line with the [README](https://github.com/necolt/Swifton/blob/master/README.md)

> Static assets (JavaScript, CSS, images etc.) are loaded from Public directory by default
> This is crucial and needs to be fixed before Swifton can be useful. I can't imagine a website without any media assets!

I'm willing to investigate this much further but we may need to modify the router to return `ResponseType`s from the router instead of Inquiline `Response` types... Of course any other thoughts are welcome!

I started to add Cookies code [here](https://github.com/necolt/Inquiline/blob/master/Sources/Request.swift#L20), but actually it should be extracted to Middleware.

[TodoApp](https://github.com/necolt/Swifton-TodoApp) is good starting point, but would be really great to build fully featured app that developers could use as a reference. Please suggest ideas and discuss about it here. Few initial ideas:
- TodoApp - we can extend current [TodoApp](https://github.com/necolt/Swifton-TodoApp), but it's well know that a Todo App doesn't represent complexities that usual real world apps has.
- E-Commerce - boring, but definitely would help to findout missing features in [Swifton](https://github.com/necolt/Swifton)
- New Startup - this would be most exciting, any hustlers here that would like to get their idea implemented?

TodoApp deploys on Heroku, but for some reason templates are not found. It could be working directory path issue, so probably quickest solution would be to play with `SwiftonConfig.viewsDirectory` variable.

- [ ] Investigate http://guides.rubyonrails.org/form_helpers.html and check what most important helpers do we need.
- [ ] Investigate https://github.com/kylef/Stencil#customisation and findout how it can help 
