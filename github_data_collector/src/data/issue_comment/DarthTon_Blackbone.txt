
sample:
```
    auto handler = AsmFactory::GetAssembler();
    auto& asmCore = *handler;
    asmCore->jmp(asmCore->intptr_ptr_abs(MAXDWORD + 1));
    auto func = reinterpret_cast<void(*)()>(asmCore->make());
    printf_s("size: %zu\n", asmCore->getCodeSize());
    printf_s("hex code: ");
    for (size_t i = 0; i < asmCore->getCodeSize(); i++)
        printf_s("%02X ", reinterpret_cast<PBYTE>(func)[i]);
```

x86  Compile:
size: 6
hex code: FF 25 00 00 00 00

x64  Compile:
size: 7
hex code: FF 24 25 00 00 00 00


jmp [a]                ;ff 24 25 00 00 00 00 - 32-bit absolute 
jmp [rel a]            ;ff 25 e7 ff ff ff    - RIP + 32-bit displacement
jmp [rdi]              ;ff 27                - base pointer
jmp [rdi +4*rsi + a]   ;ff a4 b7 00 00 00 00 - base pointer +4*index + displacement

OS: Win10 x64
Compile: x86
samlpe code
```
blackbone::Process _process;
_ASSERT(NT_SUCCESS(_process.Attach(GetCurrentProcess())));
auto m = _process.modules().GetMainModule();
```
m = empty


First error:
[if (_proc.barrier().x86OS)](https://github.com/DarthTon/Blackbone/blob/master/src/BlackBone/Process/ProcessModules.cpp#L138)

Maybe it should be "_proc.barrier (). TargetWow64"

Second error:
The cause of the error is because "NativeWow64::ReadProcessMemoryT"
_hProcess = GetCurrentProcess() return STATUS_INVALID_HANDLE

Maybe when "true == targetWow64" or "&& GetCurrentProcess() == _hProcess"
"call ReadProcessMemory" is better.

associate:
ReadProcessMemoryT
WriteProcessMemoryT
QueryProcessInfoT
The "asmjit" in the project is obsolete and some required instructions are missing (for example: loop).
Hope you can update in your free time.
 Failed to load BlackBone driver:

The request is not supported. 
Is the error I get whenever I try to switch the the kernel apc inject option 

can I use "blackbone::Detour" without knowing their typedefs, or only when it's running.
like is: https://github.com/stevemk14ebr/UniHook
typedef struct _PEB 
{
    UCHAR InheritedAddressSpace;
    UCHAR ReadImageFileExecOptions;
    UCHAR BeingDebugged;
    UCHAR BitField;
    UINT8 _PADDING_[4]; -> Add
    PVOID Mutant;
    PVOID ImageBaseAddress;
    PPEB_LDR_DATA Ldr;
    PVOID ProcessParameters;
    PVOID SubSystemData;
    PVOID ProcessHeap;
    PVOID FastPebLock;
    PVOID AtlThunkSListPtr;
    PVOID IFEOKey;
    PVOID CrossProcessFlags;
    PVOID KernelCallbackTable;
    ULONG SystemReserved;
    ULONG AtlThunkSListPtr32;
    PVOID ApiSetMap;
} PEB, *PPEB;
//////////////////////////////////////////////////////////////////////////////

struct PEB64
{
    union
    {
        struct
        {
            BYTE InheritedAddressSpace;                                 //0x000
            BYTE ReadImageFileExecOptions;                              //0x001
            BYTE BeingDebugged;                                         //0x002
            BYTE _SYSTEM_DEPENDENT_01;                                  //0x003
        } flags;
        QWORD dummyalign;
    } dword0;
    QWORD                           Mutant;                             //0x0008
    QWORD                           ImageBaseAddress;                   //0x0010
    PTR64                           Ldr;                                //0x0018
    PTR64                           ProcessParameters;                  //0x0020 / pointer to RTL_USER_PROCESS_PARAMETERS64
    QWORD                           SubSystemData;                      //0x0028
    QWORD                           ProcessHeap;                        //0x0030
    QWORD                           FastPebLock;                        //0x0038
    QWORD                           _SYSTEM_DEPENDENT_02;               //0x0040
    QWORD                           _SYSTEM_DEPENDENT_03;               //0x0048
    QWORD                           _SYSTEM_DEPENDENT_04;               //0x0050

https://github.com/DarthTon/Blackbone/blob/f0b9bc97b1536368e3b130aa9e820679c2f6a1e8/src/BlackBoneDrv/NativeStructs.h#L484

L485 add dummy 4byte add?

uchar -> 2byte?? 

64-bit peb type address calculation is weird

4 bytes are missing

http://bytepointer.com/resources/tebpeb64.htm

-source code-

typedef struct _PEB 
{
    UCHAR InheritedAddressSpace;         
    UCHAR ReadImageFileExecOptions;  
    UCHAR BeingDebugged;                   
    UCHAR BitField;                        

 +0x004 Padding0 : [4] UChar Padding0  Add Data?
 
    PVOID Mutant;                                  
    PVOID ImageBaseAddress;
    PPEB_LDR_DATA Ldr;            -> 0x14 -> Error  offset -> No Error Offset -> 0x18
    PVOID ProcessParameters;
    PVOID SubSystemData;
    PVOID ProcessHeap;
    PVOID FastPebLock;
    PVOID AtlThunkSListPtr;
    PVOID IFEOKey;
    PVOID CrossProcessFlags;
    PVOID KernelCallbackTable;
    ULONG SystemReserved;
    ULONG AtlThunkSListPtr32;
    PVOID ApiSetMap;
} PEB, *PPEB;

0:007> dt ntdll!_PEB
 +0x000 InheritedAddressSpace : UChar
 +0x001 ReadImageFileExecOptions : UChar
 +0x002 BeingDebugged : UChar
 +0x003 BitField : UChar
 +0x003 ImageUsesLargePages : Pos 0, 1 Bit
 +0x003 IsProtectedProcess : Pos 1, 1 Bit
 +0x003 IsImageDynamicallyRelocated : Pos 2, 1 Bit
 +0x003 SkipPatchingUser32Forwarders : Pos 3, 1 Bit
 +0x003 IsPackagedProcess : Pos 4, 1 Bit
 +0x003 IsAppContainer : Pos 5, 1 Bit
 +0x003 IsProtectedProcessLight : Pos 6, 1 Bit
 +0x003 IsLongPathAwareProcess : Pos 7, 1 Bit

 +0x004 Padding0 : [4] UChar Padding0 data Add

 +0x008 Mutant : Ptr64 Void
 +0x010 ImageBaseAddress : Ptr64 Void
 +0x018 Ldr : Ptr64 _PEB_LDR_DATA
 +0x020 ProcessParameters : Ptr64 _RTL_USER_PROCESS_PARAMETERS
 +0x028 SubSystemData : Ptr64 Void
 +0x030 ProcessHeap : Ptr64 Void
 +0x038 FastPebLock : Ptr64 _RTL_CRITICAL_SECTION
 +0x040 AtlThunkSListPtr : Ptr64 _SLIST_HEADER
 +0x048 IFEOKey : Ptr64 Void
 +0x050 CrossProcessFlags : Uint4B
 +0x050 ProcessInJob : Pos 0, 1 Bit
 +0x050 ProcessInitializing : Pos 1, 1 Bit
 +0x050 ProcessUsingVEH : Pos 2, 1 Bit
 +0x050 ProcessUsingVCH : Pos 3, 1 Bit
 +0x050 ProcessUsingFTH : Pos 4, 1 Bit
 +0x050 ProcessPreviouslyThrottled : Pos 5, 1 Bit
 +0x050 ProcessCurrentlyThrottled : Pos 6, 1 Bit
 +0x050 ReservedBits0 : Pos 7, 25 Bits
 +0x054 Padding1 : [4] UChar
 +0x058 KernelCallbackTable : Ptr64 Void
 +0x058 UserSharedInfoPtr : Ptr64 Void
 +0x060 SystemReserved : Uint4B
 +0x064 AtlThunkSListPtr32 : Uint4B
 +0x068 ApiSetMap : Ptr64 Void


Besides Windows 1903, I worked very well when I tried manualmapping using xenos and blackbone.
However, mmap does not work after Windows 1903.
xenos printed out error code 0xC0000138.
Please share the information you know about this problem.
up 2 date