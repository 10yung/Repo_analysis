Should listen to activity lifecycle and invoke `clearRemovedAdapterAndCancelRunnable()` when activity is destroyed. I got this memory leak report from [LeakCanary](https://github.com/square/leakcanary).

```
1672448 bytes retained
┬
├─ android.os.MessageQueue
│    Leaking: NO (MessageQueue#mQuitting is false)
│    GC Root: Input or output parameters in native code
│    ↓ MessageQueue.mMessages
│                   ~~~~~~~~~
├─ android.os.Message
│    Leaking: UNKNOWN
│    ↓ Message.callback
│              ~~~~~~~~
├─ com.airbnb.epoxy.EpoxyRecyclerView$removeAdapterRunnable$1
│    Leaking: UNKNOWN
│    Anonymous class implementing java.lang.Runnable
│    ↓ EpoxyRecyclerView$removeAdapterRunnable$1.this$0
│                                                ~~~~~~
╰→ com.spruce.messenger.ui.DisablePoolEpoxyRecyclerView
​     Leaking: YES (View.mContext references a destroyed activity and ObjectWatcher was watching this)
​     mContext instance of com.spruce.messenger.ui.MainActivity with mDestroyed = true
​     View#mParent is set
​     View#mAttachInfo is null (view detached)
​     View.mWindowAttachCount = 1
​     key = b6ffc8e0-9178-46ad-94c0-71e9b5b0d8cd
​     watchDurationMillis = 207
​     retainedDurationMillis = -1
​     key = 33364902-1f22-47e7-87b7-e9d8a227a309

METADATA

Build.VERSION.SDK_INT: 28
Build.MANUFACTURER: Google
LeakCanary version: 2.0
App process name: xxxxxxxxx
Analysis duration: 10093 ms
```


`DisablePoolEpoxyRecyclerView` is a subclass with only one method:

```
class DisablePoolEpoxyRecyclerView @JvmOverloads constructor(
        context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0
) : EpoxyRecyclerView(context, attrs, defStyleAttr) {

    override fun shouldShareViewPoolAcrossContext(): Boolean {
        return false
    }
}
```

Using Epoxy: 3.8.0
I've looked at the samples, at the docs and search in the issues.
For all of these, I don't see those mentioned.

What should be done if I use this library and want those?
Per the suggestion given in https://github.com/airbnb/epoxy/issues/668, I've implemented a View with its own internal expand and collapse logic and animation, but the EpoxyRecyclerView seems to have issues with laying out/measuring the dynamically changing height.

![androidscreen](https://user-images.githubusercontent.com/863461/72191559-6aad5e80-33b7-11ea-8f33-a899d1c1bae1.gif)

Attached is the ModeViewl: 
```
@ModelView(autoLayout = ModelView.Size.MATCH_WIDTH_WRAP_HEIGHT)
class ListItemAccordion @JvmOverloads constructor(
  context: Context,
  attrs: AttributeSet? = null,
  defStyleAttr: Int = 0
) : LinearLayout(context, attrs, defStyleAttr) {

  var isOpen: Boolean = false
    private set

  private val iconSize = resources.getDimensionPixelSize(R.dimen.small_list_item_icon_size)
  private val collapsedSize = resources.getDimensionPixelSize(R.dimen.small_list_item_size)
  private val paddingSpace = resources.getDimensionPixelSize(R.dimen.space_1x)

  private val colorTintList =
    ResourcesCompat.getColorStateList(
      resources,
      R.color.list_item_text,
      context.theme
    )

  private val iconView = AppCompatImageView(context).apply {
    imageTintList = colorTintList
  }
  private val titleText = TextView(context).apply {
    gravity = Gravity.CENTER_VERTICAL
    TextViewCompat.setTextAppearance(this, R.style.H5_Regular)
    setTextColor(colorTintList)
    maxLines = 2
  }
  private val chevron = AppCompatImageView(context).apply {
    imageTintList = colorTintList
  }
  private val infoText = TextView(context).apply {
    visibility = GONE
    TextViewCompat.setTextAppearance(this, R.style.B3_Regular)
    setPaddingRelative(resources.getDimensionPixelSize(R.dimen.space_3x), 0, 0, 0)
  }

  init {
    orientation = VERTICAL
    setBackgroundResource(R.drawable.list_item_background)
    isClickable = true
    isFocusable = true
    isEnabled = true
    layoutTransition = LayoutTransition()

    addView(LinearLayout(context).apply {
      orientation = HORIZONTAL
      gravity = Gravity.CENTER_VERTICAL

      addView(iconView, LayoutParams(iconSize, iconSize))

      addView(titleText, LayoutParams(0, MATCH_PARENT).apply {
        weight = 1f
        leftMargin = paddingSpace
        rightMargin = paddingSpace
        gravity = Gravity.CENTER_VERTICAL
      })

      addView(chevron, LayoutParams(iconSize, iconSize))
    }, LayoutParams(MATCH_PARENT, collapsedSize))
    addView(infoText)

    updateOpenState()

    setOnClickListener {
      isOpen = !isOpen
      updateOpenState()
    }
  }

  private fun updateOpenState() {
    chevron.setImageResource(if (isOpen) R.drawable.chevron_up else R.drawable.chevron_down)
    infoText.visibility = if (isOpen) VISIBLE else GONE
  }

  @ModelProp
  fun setIconResId(@DrawableRes resId: Int) {
    iconView.setImageResource(resId)
  }

  @TextProp
  fun setTitle(title: CharSequence) {
    titleText.text = title
  }

  @TextProp
  fun setInfo(info: CharSequence) {
    infoText.text = info
  }
}
```

Any ideas on how to fix this floating list item issue?

Currently I am really enjoying Epoxy, I would like to make some requests 

Please add examples of following to wiki

- using Epoxy with Search View
- using Epoxy with contextual action mode

It will be much better if you can also add a sample app to the repo demonstrating how to use epoxy with search view, contextual action mode and dragging since they are common cases in apps.

---------
Does epoxy have any helper classes to use with search view and contextual action mode? just like `EpoxyTouchHelper` for dragging
I am reading Wiki about EpoxyController and I find some description may be not correct.
> Note: The first time an EpoxyController builds models it will always run on the main thread, even if you have specified an async handler. 
[link](https://github.com/airbnb/epoxy/wiki/Epoxy-Controller#asynchronous-support)

The running thread of models built in first time should be same as the thread running the `requetModelsBuild`. If it is the first time we call requestModelBuild, buildModelsRunnable will just run in current thread, and buildModels will run in this thread as well.
```
public void requestModelBuild() {
    if (isBuildingModels()) {
      throw new IllegalEpoxyUsage("Cannot call `requestModelBuild` from inside `buildModels`");
    }
    if (hasBuiltModelsEver) {
      requestDelayedModelBuild(0);
    } else {
      buildModelsRunnable.run();
    }
  }
```

Epoxy not check and restrain the running thread of requestModelBuild, if it will always be called in main thread, the Wiki is correct, but it's not.

@elihart Please help confirm that.
Thanks!
Hello! I'm not actually terribly familiar with Epoxy, but figured I'd take a crack at this since it seems like one of the last major holdouts in the community for incremental annotation processing.

Notes:
- It's isolating by default, but will be aggregating if `KotlinModelBuilderExtension` is enabled. I would recommend separating the kotlin model builder to a separate processor in a separate PR, as that would allow the others to remain isolating regardless. 
  - The isolating processors should maybe also be separated, as right now even one change to one isolating type will cause all of them to rerun.
- Like [Butter Knife](https://github.com/JakeWharton/butterknife/pull/1546), this uses a workaround for reflectively digging out the `Trees` API and will fall back to being a `DYNAMIC` processor if trees aren't available.
- Updated KotlinPoet to the latest (1.4.4). Some time back we added back support for `Filer` after kapt added support for generating Kotlin sources via them. Note that this effectively requires Kotlin 1.3.50+.

I didn't understand this comment from the original issue

> EpoxyController's @AutoModel is mostly isolated, but it is a bit of a hack because the model types it depends on aren't available until after annotation processing so it does some reflection to monitor that process

Can take a look if you can point me to the right place.

Resolves #423 
At the moment, **epoxy** only support for **GridLayoutManager**, but sometime we use **StaggeredLayoutManager** and we would like to render some model is a full span model.

In this pull request, I have added a class to support to set **Model View** is full span when we use **StaggeredLayoutManager**

How it work:
```kotlin
// Your model view
@ModelView(defautLayout = ..., baseModelClass = EpoxyModelStaggeredGrid::class)
class MyModelView @JvmOverloads... : FrameLayout(..) {
  // Your logic
}
// Your controller
myModelView {
  id("my_id")
  setIsFullSpanModel(true) // make this model is a full span model
}
```
Convert Java to Kotlin.
I understand that immutability is good (well, I guess I know it's good because it makes things thread safe).

I don't understand how changing a value in my Car (i.e. let's say I increase passengerCount++) doesn't tell epoxy that my object has changed. The hashcode changes. Therefore, wouldn't it make sense for epoxy to dispatch the changes? If it doesn't use hashcode... then why not? I guess I'm just more curious at this point at the underlying decisions in epoxy because I find it super annoying to update a model that might end up being a list within a list within a list. It's just a lot of copy methods that I somehow mess up all the time. There's just copy methods within copy methods in order to just change a small value.

Sincerely,

-someone still new at hashcode, equals, immutability, etc.
When a Carousel is used inside an `EpoxyRecyclerView` with a height of `wrap_content`, it does not scroll sideways.

This problem is not present when the height of the RecyclerView is a fixed height, `match_parent` or `match_constraint` (0dp).

Here's a sample project for reproducing the issue: https://github.com/haroldadmin/EpoxyCarouselBugSample

Here's a gif for the issue:
![GIF](https://user-images.githubusercontent.com/24315306/71072948-771e0d00-21a5-11ea-9673-0e75318c1bba.gif)
