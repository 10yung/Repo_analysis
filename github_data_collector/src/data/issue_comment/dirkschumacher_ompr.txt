Is there any way to set the optimization problem stops after a certain amount of time or reaching a certain optimality gap? Is there any way to set these parameters before running our code?
Hi I am trying to translate a 3-year-old Julia code to R because I am more familiar with R. I figured that maybe someone reading the Issues here or you yourself could help me.
 
I have this Julia code:
```julia
    @variable(m, used_team[i=1:num_teams], Bin)

    @constraint(m, constr[i=1:num_teams], used_team[i] <= sum{skaters_teams[t, i]*skaters_lineup[t], t=1:num_skaters})

    @constraint(m, sum{used_team[i], i=1:num_teams} >= 3)
```

and tried to write it in R like this:
```R
add_variable(used_team[i],i=1:num_teams, type = "binary")%>%
  add_constraint(used_team[i=1:num_teams] <= sum_expr(skaters_teams[t,1:num_teams]*skaters_lineups[t], t=1:num_skaters))%>%
  add_constraint(sum_expr(used_team[i], i=1:num_teams) >= 3)%>%
```

but i get this message: 

Error in check_for_unknown_vars_impl(model, the_ast) : 
  The expression contains a variable that is not part of the model.


How can I resolve this? 
thank you in advance!
KInd regards,

Christian



Optimization/R/OMPR newbie here...

**Background**
I'm trying to allocate product between two storage locations based on storage cost, such that the total qty of products equals given constant demand (governed by optimization equation below).

minimize: 
![image](https://user-images.githubusercontent.com/55604635/66157174-3294c380-e5f1-11e9-8709-e517f3cc8da8.png)
subject to:
![image](https://user-images.githubusercontent.com/55604635/66157755-74723980-e5f2-11e9-937f-c237060591ce.png)

**Question 1**
I noticed that when I try to run the below code with MILP, one of the last two constraints in the model is never met. ie. max_c = 120, but the optimization would 'solve' and give an answer where the corresponding sum = 140. 
However, when I switch to MIP, the model works fine.... is this a bug or am I just using the functions incorrectly?

**Question 2**
Then when I try to change the objective function to the following by adding cost for transportation

![image](https://user-images.githubusercontent.com/55604635/66157637-3412bb80-e5f2-11e9-8d79-94c22a4aad86.png)

and the objective function part of the model to:

`
set_objective(r_c * sum_expr(product$space[i]*x[i,1], i = 1:n) + r_w * sum_expr(product$space[i]*x[i,2], i = 1:n) + f_l * sum_expr(x[i,2], i = 1:n), "min") %>%`

One of my variables always comes back negative, even though I have explicitly set all variables to be positive. Any ideas on what I'm doing wrong here?

```
    # all variables need to be positive
  add_constraint(x[i,1] >= 0, i=1:n) %>%
  add_constraint(x[i,2] >= 0, i=1:n) %>%
```


**

Code
```
# n represents no. of distinct UPNs
n <- 10
# m represents no. of warehouses
m <- 2

# storage rate of central and warehouse
r_c = 100
r_w = 30

# max storage space for central and warehouse
max_c = 150
max_w = 120

model <- MIPModel() %>%
  # qty of product i allocated to location l
  add_variable(x[i, l], i=1:n, l=1:m, type="continuous") %>%
  
  # minimize total cost
  set_objective(r_c * sum_expr(product$space[i]*x[i,1], i = 1:n) + r_w * sum_expr(product$space[i]*x[i,2], i = 1:n), "min") %>%
  
  # need at least one product of i in location l = 1
  add_constraint(x[i,1] >= 1, i=1:n) %>%
  add_constraint(x[i,1] + x[i,2] >= product$demand[i]/20, i=1:n) %>%
  
    # all variables need to be positive
  add_constraint(x[i,1] >= 0, i=1:n) %>%
  add_constraint(x[i,2] >= 0, i=1:n) %>%
  
  # max central and warehouse storage area constraint
  add_constraint(sum_expr(product$space[i]*x[i,1], i = 1:n) <= max_c) %>%
  add_constraint(sum_expr(product$space[i]*x[i,2], i = 1:n) <= max_w)
```
Hi all,

I have been thinking about how to advance modelling in R and recently I had some energy again to spend on optimization. 

One idea is to have a central, mutable solver object instead of an immutable model object (julia JuMP approach), as it enables communicating directly with the solver. It is then possible to implement things like quadratic programs, callbacks or very solver specific stuff.

I started implementing and testing these ideas in a separate package this week: https://github.com/dirkschumacher/rmpk The package shares most of the API with `ompr` so it feels quite familiar. Another goal is also to make the package so fast that you can use it within a package as well as in interactive analyses.

There are three options I have, once the experimental package is complete and I am satisfied with the result.

1) Release this as an independent package and leaving ompr as it is
2) Merge this with ompr as a third "model backend" while deprecating the other two.
3) Using the new code in the `ompr` package thus breaking all previous code. (But it would not be too hard to fix any broken code as the API is roughly the same)

Any input is very welcome.

PS: I cannot give any timeline on the new development as I am just doing that after work when I have some energy.
Hi, I am trying to set up the following problem:

v < 1:10
result <- MILPModel() %>%
  add_variable(x[i], i = 1:v, type = "binary") %>%
  set_objective(sum_expr(x[i], i = 1:v), sense = "min")  %>%
  add_constraint(traveltime(x) <= 60) %>%
  solve_model(with_ROI(solver = "glpk")) 

Here, _traveltime_ is a function which takes an entire vector as the input, rather than a single value (such as stats::sd). Thus, I would like the constraint to be **global** for the variable x, rather than discrete for each of its values. 

How can I rewrite this? 
Hi All

To speed up my optimization I am trying to exclude irrelevant variables x[k,j] by using a grid to define the index combinations that should enter the model. 

This works up to the point where I want to enter a constraint on the sum of the relevant x[k,jj]:

`set.seed(123)
u<- matrix(sample(c(0,0,0,0,10,12,15,55,77,95,100),9,replace=TRUE),ncol=3,nrow=3)

grid <- expand.grid(k = 1:3, j = 1:3)
grid_small <- grid[which(u>0),]  
grid_small_table <- data.table(grid_small)
grid_small_table$id <- seq.int(nrow(grid_small))

u
model<-MILPModel() %>% 
  add_variable(x[grid_small$k, grid_small$j])  %>%
  set_objective(sum_expr(u[m]*x[grid_small$k,grid_small$j], m=which(u>0)))%>%
  add_constraint(x[grid_small$k,grid_small$j] <=4)%>%
  add_constraint(x[j,k] <=3, j=1,k=3)%>%
  add_constraint(sum_expr(x[grid_small$k,grid_small$j])<=9)%>%
  solve_model(with_ROI("glpk",verbose=TRUE))
  get_solution(model, x[k,j])
    
model$objective_value  `

But this will give me an error

`
Error in FUN(X[[i]], ...) : not implemented`


 I also tried to implement it in the same way as the objective function, by doing 
this: 

`one <- rep(1,3*3)
add_constraint(sum_expr(one[m]*x[grid_small$k,grid_small$j],m=which(u>0))<=9)`

But then
`<SOLVER MSG>  ----
GLPK Simplex Optimizer, v4.47
15 rows, 7 columns, 15 non-zeros
*     0: obj =  0.000000000e+000  infeas = 0.000e+000 (0)
*     7: obj =  1.604000000e+003  infeas = 0.000e+000 (0)
OPTIMAL SOLUTION FOUND
<!SOLVER MSG> ----
>   get_solution(model, x[k,j])
  variable k j value
1        x 2 1     4
2        x 3 1     4
3        x 1 2     4
4        x 2 2     4
5        x 1 3     3
6        x 2 3     4
7        x 3 3     4
>   
>   
> model$objective_value
[1] 1604`

The constraint that the sum of the x should be lower or equal than 9 will be ignored. Any ideas?


Hi Dirk,

First, thanks very much for creating and maintaining  this app. It is very nice and useful.

The problem I am having is when I try to get the map_data after:
library(rgeos)
library(rgdal)
library(maptools)
library(dplyr)
 and 
map_data <- rgdal::readOGR("https://raw.githubusercontent.com/datasets/geo-boundaries-us-110m/84e946f6b1de01e2642bcdb17d5b697acb6b48c4/json/ne_110m_admin_1_states_provinces_shp_scale_rank.geojson", "OGRGeoJSON")

I get the following error in R:

"Error in ogrInfo(dsn = dsn, layer = layer, encoding = encoding, use_iconv = use_iconv,  : 
  Cannot open layer"

Do I need to get another package?

Thanks for your help.

Wes

First off all, thank you for creating a terrific intuitive package for modelling MILP's.
I'm modelling a scheduling problem and I have a question concerning the use of sum_expr. 

In my model I'm trying to model the following constraint: 

![image](https://user-images.githubusercontent.com/30954995/60088092-6fbdff80-973e-11e9-9164-e6bd73df7ea3.png)

I tried to model the constraint as follows:
(this is a simplified example that does not account for negative values in t_t)
```R
timeslots <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)
r <- c(1,2,3,4,5,6,7,8,9,10)
add_constraint(sum_expr(x[r,t_t], 
            r = requests, 
            t_t = t-l[r,"Duration"]+1), 
            <= chairs, t = timeslots)
```
l is a dataframe containing the requests (r) and duration of the request, respectively. 
The variable X[r,t_t] is 1 when a request starts at time t_t and 0 otherwise. 
The idea behind the constraint is that it ensures that the number of chairs taken by the requests that start on any time t and the requests that started before t (but have not ended yet) do not exceed the number of available chairs. 

For this to work t_t is dependent on the current time (t) and the duration of each individual request (r).  
Though when running the code I get the error message of object 'r' not found. I couldn't find a way to solve my problem in previously posted issues or documentation. 
I hope someone is able to help me out. 

In the documentation it is shown how to express the following matrix in a constraint:

x[1, 1]
x[1, 1] + x[1, 2]
x[1, 1] + x[1, 2] + x[1, 3]

by x[1, colwise(1, 1:2, 1:3)].

I'd like to be able similarly to express, say 

x[1, 1] + x[1, 2]
x[2, 1] 

but am running into problems with duplicate indexes with  i = colwise(1:2,1), j = colwise(1,1:2). Any thoughts welcome!




Hi again, I'm having some trouble formatting the following as a MILP problem. I have 980 products and 4 groups. Each product has a attraction rate AR that differs for each group. Each product also has total sales. I want to maximize the sum of AR + Sales (normalized). I have the latest dev version.

The following MIPModel works just fine:

````
model <- MIPModel() %>%
  add_variable(x[p, g], p = 1:n, g = 1:m, type = "binary") %>%
  set_objective(sum_expr(ar[p, g] * x[p, g] +
                         total_sales[p] * x[p, g], p = 1:n, g = 1:m), "max") %>%
  # each product can be used once
  add_constraint(sum_expr(x[p, g], g = 1:m) <= 1, p = 1:n) %>% 
  # we want n_products selected for each group
  add_constraint(sum_expr(x[p, g], p = 1:n) == n_products, g = 1:m)

````
I'm bit confused how to model the ar part as MILPModel. The following works but yields different (wrong) results: (https://github.com/dirkschumacher/ompr/issues/238) 

````
ar_vector <- ar[1:nrow(ar), 1:ncol(ar)] %>% unlist()

milpmodel <- MILPModel() %>%
  add_variable(x[p, g], p = 1:n, g = 1:m, type = "binary") %>%
  set_objective(sum_expr(ar_vector * x[p, g]  +
                         colwise(total_sales[p]) * x[p, g] , p = 1:n, g = 1:m), "max")
  # each product can be used once
  add_constraint(sum_expr(x[p, g], g = 1:m) <= 1, p = 1:n) %>% 
  # we want n_products selected for each group
  add_constraint(sum_expr(x[p, g], p = 1:n) == n_products, g = 1:m) 
  ````
I also tried the following:

````
arfunc <- function(p,g){
  ar_sub <- ar[p, g] 
  ar_vec <- as.vector(ar_sub) 
  return(ar_vec)
}

set_objective(sum_expr(w_ar * colwise(arfunc(p, g)) * x[p, g] +
                           w_sales * colwise(total_sales[p]) * x[p, g], p = 1:n, g = 1:m), "max") 

Error in as.data.frame.default(x[[i]], optional = TRUE) : 
  cannot coerce class ‘structure("LinearVariableCollection", package = "ompr")’ to a data.frame
````
What is the correct way to format this problem? 
