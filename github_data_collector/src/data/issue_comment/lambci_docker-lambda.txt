When trying to run a suite of jest unit tests I get repeated errors saying

```
Error: listen tcp 127.0.0.1:9001: bind: address already in use"
```

My first test will always succeed but subsequent ones all fails. Since Jest runs all tests in parallel (I tried using --runInBand which did not help), I suspect that is what is causing this error. How can this be fixed?
First of all: Thanks for your amazing work on this project!

I understand it is possible to attach a remote debugger to process running in the docker container.

However I'm missing documentation on how to do so?

I'm specifically search for info on how to attach a debugger on **node**, **java** and **python** lambdas when they are running in the container.

Thanks ðŸ™‚

I'm using [GitHub Actions](https://github.com/features/actions) to run integration tests against your Docker image. Locally on my MacBook everything works fine but when they run in my `GitHub Actions` workflow I get following response:

```json
{
  "errorType": "Runtime.ImportModuleError",
  "errorMessage": "Error: Cannot find module 'color'\nRequire stack:\n- /var/runtime/UserFunction.js\n- /var/runtime/index.js"
}
```

My `.github/workflows/build.yml` looks like this:

```yml
name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      lambda:
        image: lambci/lambda:nodejs12.x
        ports:
          - 9001:9001
        volumes:
          - $PWD:/var/task:ro,delegated
        env:
          DOCKER_LAMBDA_STAY_OPEN: 1
          AWS_LAMBDA_FUNCTION_HANDLER: lambda/my-test.handler
    steps:
      - ...
```
Certain packages such as `ssh2-python` require openssl to build native assets. Would be nice if the build image could have openssl installed. 

The above install works after

```sh
yum install openssl openssl-devel
```
I'm trying to run a lambda function locally, with the docker image set to Python3.6
For some reason, I get a weird error, even when there are no imports in the code

This is the code of the lambda function:

`def lambda_handler(event, context):

    return {
        'statusCode': 200,
        'body': 'asd'
    }`

The command I'm running:

`docker run --rm -v C:\sandbox-lambda:/var/task:ro,delegated lambci/lambda:python3.6 lambda_function.lambda_handler --network="host"`

The error:

```
START RequestId: 5765fe27-9f5b-1e2d-2c8d-a62b20632f03 Version: $LATEST
Unable to parse input as json: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
Traceback (most recent call last):
  File "/var/lang/lib/python3.6/json/__init__.py", line 354, in loads
    return _default_decoder.decode(s)
  File "/var/lang/lib/python3.6/json/decoder.py", line 339, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/var/lang/lib/python3.6/json/decoder.py", line 355, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)

END RequestId: 5765fe27-9f5b-1e2d-2c8d-a62b20632f03
REPORT RequestId: 5765fe27-9f5b-1e2d-2c8d-a62b20632f03  Init Duration: 145.84 ms        Duration: 3.95 ms       Billed Duration: 100 ms Memory Size: 1536 MB    Max Memory Used: 26 MB

{"errorType":"JSONDecodeError","errorMessage":"Expecting property name enclosed in double quotes: line 1 column 2 (char 1)","stackTrace":["  File \"/var/lang/lib/python3.6/json/__init__.py\", line 354, in loads\n    return _default_decoder.decode(s)\n","  File \"/var/lang/lib/python3.6/json/decoder.py\", line 339, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n","  File \"/var/lang/lib/python3.6/json/decoder.py\", line 355, in raw_decode\n    obj, end = self.scan_once(s, idx)\n"]}
PS C:\sandbox-lambda> 
```
I'm getting python package dependency conflict when installing zappa into new virtual environment. 

I use `lambci/lambda-base:build-python3.6` image to build zappa project. 

### Steps to replicate:
```
docker run --rm -it lambci/lambda:build-python3.6 sh -c "virtualenv venv && source venv/bin/activate && pip install zappa && pip check" 
```
#### What's happening:
* Zappa 0.48.2 requires `python-dateutil<=2.7.0` dependency
* virtualenv pip tries to install `python-dateutil==2.6.1` to solve zappa dependency
* virtualenv pip install fails to install `python-dateutil==2.6.1` because
    ```
    Found existing installation: python-dateutil 2.7.3
    Not uninstalling python-dateutil at /var/runtime, outside environment /var/task/venv
    Can't uninstall 'python-dateutil'. No files were found to uninstall.
   ```
* pip check fails with
    ```
    zappa 0.48.2 has requirement python-dateutil<2.7.0,>=2.6.1, but you have python-dateutil 2.7.3.
    ```
* python-dateutil dependency isn't installed in `venv` and is injected into python runtime by `PYTHONPATH` from outside  https://github.com/lambci/docker-lambda/blob/8f6145d649067704c8048578dae4b8e32063839f/python3.6/build/Dockerfile#L6

### Question:
* I would like to know why does `lambci/lambda:build-python3.6` have extra python dependencies in  image that interfere with every virtual environment? 
* Is it safe to ignore those extra global dependencies?

Some extra dependencies in `/var/runtime` installed here https://github.com/lambci/docker-lambda/blob/8f6145d649067704c8048578dae4b8e32063839f/python3.6/build/Dockerfile#L22


### Workaround
I use workaround for this problem by resetting `PYTHONPATH` for now.
```
 docker run --rm -it -e PYTHONPATH="" lambci/lambda:build-python3.6 sh -c "virtualenv venv && source venv/bin/activate && pip install zappa && pip check"
```


The installation of bundler as root from #145 has broken bundler functionality for non-root users.

Reproduction: as root:
```
$ docker run --rm  -ti lambci/lambda:build-ruby2.5 bundle -v
Bundler version 1.17.2
```
As non-root:
```
$ docker run --rm  -ti --user ec2-user lambci/lambda:build-ruby2.5 bundle -v
Traceback (most recent call last):
        3: from /var/lang/bin/bundle:10:in `<main>'
        2: from /var/lang/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:39:in `require'
        1: from /var/lang/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:135:in `rescue in require'
/var/lang/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:135:in `require': cannot load such file -- bundler (LoadError)
```

Could we perhaps install bundler as a non-root user in the dockerfile? (using `runuser` if necessary), or fix the permissions as a secondary step?

I have an issue trying to use the RazorLight package on docker-lambda. 
It errors with "Can't load metadata reference from the entry assembly. Make sure PreserveCompilationContext is set to true in *.csproj file" but only when run on docker-lambda. It runs properly when run on live AWS.

I've boiled it down to a minimal reproduction case here:

[LambdaTest.zip](https://github.com/lambci/docker-lambda/files/2736242/LambdaTest.zip)

It's running on dotnetcore2.1 and originally it was running through the aws-sam-cli but running it via
`docker run --rm -v ${PWD}/bin/release/netcoreapp2.1/publish:/var/task lambci/lambda:dotnetcore2.1 LambdaTest::LambdaTest.Function::FunctionHandler '"""someevent"""'`
in powershell also causes the issue.

Running Docker Desktop 2.0.0.0-win81 (29211) with engine 18.09.0.
I have a .NET lambda function containing the following code:

```
        this.config = new ConfigurationBuilder()
          .AddJsonFile("appSettings.json", optional: false, reloadOnChange: true)
          .Build();
```

And a file appSettings.json that is copied to the publish folder.

If I deploy this to AWS then it runs fine (and I can access the values defined in the file) however if I run it with docker-lambda then i will get an error:

```
Unhandled Exception: AWSLambda.Internal.Bootstrap.LambdaUserCodeException: An exception was thrown when the constructor for type 'SaleCycle.Enrichments.EarlyBirds.Lambda' was invoked. Check inner exception for more details. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileNotFoundException: The configuration file 'appSettings.json' was not found and is not optional. The physical path is '/var/runtime/appSettings.json'.
   at Microsoft.Extensions.Configuration.FileConfigurationProvider.Load(Boolean reload)
   at Microsoft.Extensions.Configuration.ConfigurationRoot..ctor(IList`1 providers)
   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()
```

This error makes sense given that my settings file is in /var/task not /var/runtime - so there is an issue with exactly how the .NET core runner invokes the function.

I have a workround (make it optional and use an environment variable) and am endeavouring to wrap my head around how the .NET stuff works in order to possibly try and fix.
See here: https://hub.docker.com/r/lambci/lambda/