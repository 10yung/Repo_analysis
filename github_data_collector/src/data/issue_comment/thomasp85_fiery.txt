
I was looking at some of the tutorials at https://vuejs.org and was very interested to see that vue.js is reactive. Reactivity is, of course, one of Shiny's killer features. I started looking around to see if anyone had tried to link vue.js and R (or fiery). 

@hrbrmstr's [fiery example](https://rud.is/b/2016/07/05/a-simple-prediction-web-service-using-the-new-firery-package/) provides a nice illustration of using fiery but it would be great to see how to connect that to a basic user front-end, e.g., using vue.js. @timelyportfolio has some interesting work on embedding vue.js in R (https://github.com/timelyportfolio/vueR) but I haven't seen anything that uses R server-side and vue.js on the client side.

If anyone has an example of using R / fiery with vue.js I'd be very interested to see it.

In general, I think some (simple) examples using fiery to show how to generate plots and tables in a browser would make this very promising tool much more accessible.
It seems as though fiery/routr/reqres based apps don't currently have a mechanism for reporting trace stacks (of errors), which makes debugging complex applications difficult. Here's a minimal example of the information reported in a request error (BTW, any idea why the error is being reported twice?):

```r
library(fiery)
library(routr)

app <- Fire$new()

route <- Route$new()
route$add_handler('get', '*', function(request, response, keys, ...) {
  response$type <- 'html'
  response$status <- 200L
  response$body <- '<h1>All your AI are belong to us</h1>'
  1 + "a"
  FALSE
})

router <- RouteStack$new()
router$add_route(route, "main")
app$attach(router)
app$ignite(showcase = TRUE)
```

```r
Fire started at 127.0.0.1:8080
error: non-numeric argument to binary operator
error: non-numeric argument to binary operator
```

With shiny, if you run an app that is saved to disk, it reports the line at which the error occurs -- would it be possible to add something similar to the fiery/routr/reqres stack?

```r
library(shiny)

ui <- fluidPage(
  plotOutput("p")
)

server <- function(input, output, ...) {
  
  output$p <- renderPlot({
    1+"a"
    qplot(1:10)
  })
  
}

shinyApp(ui, server)
```

```r
runApp('test-app-shiny.R')
```

```r
Listening on http://127.0.0.1:5017
Warning: Error in +: non-numeric argument to binary operator
  161: renderPlot [~/test-app-shiny.R#10]
  159: func
  119: drawPlot
  105: <reactive:plotObj>
   92: drawReactive
   79: origRenderFunc
   78: output$p
    1: runApp
```

This package is great! Thanks very much for your excellent work.
I'm confused for passing value from outside into Fiery. The example may be like this:

> curl http://127.0.0.1:8080/predict?val=10

The output depends on the input `val`=10, I want to get(10*2): 

```
{
  "v": 20,
}
```

Thank you very much for your help.

Trying to write an authentication plugin to use with `fiery` and and `routr` but I cannot figure how to block the process if a condition is not met: e.g. return an error directly from the plugin. 

A very minimal example would be something like this: 

```r
Basic <- R6Class('Basic', 
                 public = list(
                   initialize = function() {
                     
                   },
                   name = 'Basic',
                   on_attach = function(server, ...) {
                     server$on('before-request', function(request,...) {
                  
                       if (request$headers$Auth == 'foo') {
                          # continue
                         }
                       else {
                         # return error response
                         }
                     })
                   }
                 ))

basic = Basic$new()
route <- Route$new()

route$add_handler('post', '/', function(request, response, keys, ...) {
  response$status <- 200L
  response$body <- 'request handled'
  TRUE
})

router <- RouteStack$new()
router$add_route(route, 'app_router')

app <- Fire$new()

app$attach(basic)
app$attach(router)
app$ignite(block = TRUE)
```

How should I do that ?

Recognise the *fireplace* DESCRIPTION entry that defines an expression returning a Fire object

Add `firestarter()` function to start package based servers
At the moment the event cycle should be a zero-operation unless handlers have been attached. Still, I need to look into the efficiency of the cycle, as well as the event flushing mechanism to make sure it is as performant as possible