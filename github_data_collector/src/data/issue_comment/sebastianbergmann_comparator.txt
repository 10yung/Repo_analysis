- [ ] Use GitHub Actions instead of Travis CI
- [x] Have Composer in `tools/composer` and managed through `composer self-update` (see `update-tools` target in [build.xml](https://github.com/sebastianbergmann/phpunit/blob/655558a622e9cfa67f376b2fd640635a72eac6e3/build.xml#L408)
- [x] Install Psalm using [Phive](https://phar.io/) as `tools/psalm` (`phive install --copy psalm`)
- [x] Install PHP-CS-Fixer using [Phive](https://phar.io/) as `tools/php-cs-fixer` (`phive install --copy php-cs-fixer`)
- [x] Create Psalm configuration
- [ ] Add Psalm build step to GitHub Actions-based CI workflow
- [ ] Add PHP-CS-Fixer build step to GitHub Actions-based CI workflow

See #70
DOMNode::C14N() call removes encoding from XML somehow. This is bad for comparison of non ascii xmls, because it makes them unreadable. Please see example: https://3v4l.org/FvCAs


Currently resources are compared by their internal ID. For readable streams, it would be useful to compare their content. This tries to read (and reset) the resource, and compares the hashed results.

(Refs https://github.com/libero/content-api-bundle/pull/5#discussion_r229208333)
According to docs of `ScalarComparator`:
> Compares scalar or NULL values for equality.

`equality`, do we consider it as an equality operator `==` of PHP ?

for that, I would propose to put extra assertion that compares not only if `expected/actual` matches provided expectation, but also are they following contract and mimics `==` equality.

I expect Travis to fail and show when contract of `==` is violated

ref: https://github.com/sebastianbergmann/phpunit/issues/3185
ref: https://github.com/sebastianbergmann/comparator/pull/58/files
1. I removed

    $document->formatOutput = true;
    $document->normalizeDocument();

Because the unit-tests not failed after that and I don't see why it needed.
2. I removed a lot of checks instanceof DOMDocument because in fact there is always DOMDocument in the $node variable in case if canonicalize is true (and it is always true).
3. I removed $canonicalize because in fact it is always true and the unused argument just make the code maintenance harder. Especially without corresponding unit-tests.
This fix implements a custom serialize/deserialize method on the
ComparisionFailure class, which means it loses the stack trace
during serialization.

This allows PHPUnit to run in process isolation mode when the stack
trace may contain references to non-serializable objects such as
the PDO.