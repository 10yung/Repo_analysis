
Due to security concerns, we're not able to use the SaaS version (although it's very kind and awesome of you to host). I'd love to be able to run a local version with at least some generators (java, go, python) on a local kubernetes cluster. Is there, or can there be a set of working instructions for this scenario?
Example:
```
        "enum_array_example": {
          "items": {
            "enum": [
              "a",
              "b",
              "c"
            ],
            "x-enum-labels": [
              {
                "default": "a"
              },
              {
                "default": "b"
              },
              {
                "default": "c"
              }
            ],
            "type": "string"
          },
          "x-label": {
            "default": "a"
          },
          "type": "array"
        }
```
Hi All,

I just got into the ApiBluider but it seems that you dont support C#, is there any plan for this? some one is working on that? How can we participate.

Rodrigo
On https://www.apibuilder.io:

`Node` button
<img width="598" alt="Screen Shot 2019-04-17 at 10 35 05" src="https://user-images.githubusercontent.com/1754664/56277595-8f142d00-60fc-11e9-81f9-4b8b36a68924.png">

which leads to https://app.apibuilder.io/flow/github/latest/node_5_es6 is broken.

Returning:
`Generator failed with HTTP 500: Unsupported response code[500]. Expected: 200, 409`

The same error message shows up for other project:
- `Node (5.x.x)` https://app.apibuilder.io/michal/playground-api/0.0.4-dev/node_5_es5
- `Node (5.x.x) ES6 / Babel` https://app.apibuilder.io/michal/playground-api/0.0.4-dev/node_5_es6
- similarly `Node GraphQL` https://app.apibuilder.io/michal/playground-api/0.0.4-dev/node_graphql errors out with `Could not find generator with key: node_graphql`.
- (Node (0.12.x) works fine https://app.apibuilder.io/michal/playground-api/0.0.4-dev/node_0_12)
### To reproduce:
For a given application in version e.g. `0.0.1-dev`, upload current api.json just with a new version `0.0.2-dev` (and no other changes to api.json).

This causes a new entry in history (correct):
`<org>/<app>/0.0.2-dev | version changed from 0.0.1-dev to 0.0.2-dev`

Then delete the current version (with `Delete this version`).

Go back to application history page. The above history entry `version changed from 0.0.1-dev to 0.0.2-dev` is still the last one, and there's no mention of deletion (and the fact that `0.0.2-dev` no longer exists).

### Proposal:
when version gets deleted, create new entry in history as:
`<org>/<app>/0.0.1-dev | deleted version 0.0.2-dev` (proposal 1) or 
`<org>/<app>/0.0.1-dev | deleted version 0.0.2-dev (now at 0.0.1-dev)` (proposal 2)
Currently on https://app.apibuilder.io, there are two lists of organizations: 
- Your Organizations
- Public Organizations

For a given user who has visibility of non-public organization, this organization will be also included in Public Organizations. This may be misleading.
Currently the below api.json definition is accepted by apibuilder:

```
  "unions": {
    "item_state": {
      "discriminator": "type",
      "types": [
        { "type": "t1" },
        { "type": "[t2]" }    // <-- NOTE a collection
      ]
    }
  },
```
where `t1`, `t2` are e.g. enums or models or primitive types.

However, then when Scala code is generated (Play, http4s), it fails with `Generator failed with HTTP 500: Unsupported response code[500]. Expected: 200, 409`.

Reproduced locally for 
https://app.apibuilder.io/michal/playground-api/0.0.3-dev
and the stack trace is 
```
15:12:29.513 [application-akka.actor.default-dispatcher-3] ERROR application - java.lang.RuntimeException: illegal container type List(Enum(Namespaces(io.github.mkows.playground.api.v0),ItemStateFailedCause)) encountered in union [item_state_failed_cause]
java.lang.RuntimeException: illegal container type List(Enum(Namespaces(io.github.mkows.playground.api.v0),ItemStateFailedCause)) encountered in union [item_state_failed_cause]
    at scala.sys.package$.error(package.scala:30)
    at scala.generator.ScalaUnionType$.apply(ScalaService.scala:185)
    at scala.generator.ScalaUnion.$anonfun$types$1(ScalaService.scala:125)
    at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:237)
    at scala.collection.Iterator.foreach(Iterator.scala:941)
    at scala.collection.Iterator.foreach$(Iterator.scala:941)
    at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
    at scala.collection.IterableLike.foreach(IterableLike.scala:74)
    at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
    at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
    at scala.collection.TraversableLike.map(TraversableLike.scala:237)
    at scala.collection.TraversableLike.map$(TraversableLike.scala:230)
    at scala.collection.AbstractTraversable.map(Traversable.scala:108)
    at scala.generator.ScalaUnion.<init>(ScalaService.scala:125)
    at scala.generator.ScalaService.$anonfun$unions$2(ScalaService.scala:36)
    at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:237)
```
(btw. prev version w/o an array union type works just fine `0.0.2-dev`).

Docs:
https://app.apibuilder.io/doc/apiJson#union says for `Union Type > type`
```
type specifies the type to include in this union type. Acceptable values include the name of either an enum, a model, or a (primitive type).
```

So complex type (collection, map) such be rejected (as per current apibuilder docs) when such api.json is uploaded.
I searched the apibuilder docs but I was not able to find any documentation regarding async APIs. At home page(https://www.apibuilder.io/) it is mentioned that

> Define API and Event Schemas

but I was not able to find any docs about event schemas?
Currently we can get a specific version of an api e.g. 1.2.3 as well as the 'latest' - with 'latest' being the highest version.

Proposal to add an additional special version key called latest-[selector]
e.g. latest-1 => highest version >= 1.0.0 < 2.0.0
e.g. latest-1.2=> highest version >=1.2.0 < 1.3.0

Motivation is to make our CLI scripts work when we introduce v2+ for apis.
Solution should work for site and cli at least.

Suggestions for other formats? perhaps if people love sem ver ('^1.2.3')