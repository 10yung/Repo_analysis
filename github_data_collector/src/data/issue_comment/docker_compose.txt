Hi,

what is the reason that env_file does not handle variable substitution for env_file when running stack_deploy?

This would be useful in some cases.

This suggestion is to add `backup` and `restore` options to docker-compose.yml. Example:

```
services:
  db:
    image: postgres
    backup: pg_dumpall -f /dump/db/pg.dump
    restore: psql < /dump/db/pg.dump
    volumes:
    - ./dump:/dump

  web:
    image: wordpress
    backup: rsync /uploads /dumps/uploads
    restore: rsync /dumps/uploads /uploads
    volumes:
    - ./dump:/dump
```

With this configuration, it makes it possible to add `backup` and `restore` commands. The responsibility to encrypt and upload backups somewhere is left to the user.
To keep the master branch clean on my projects, I use CI to deploy compose stacks with something like `HOST=${BRANCH}.ci.example.com docker-compose --project-name=review-${BRANCH}`. Then when a dev pushes a branch they can get feedback from the product team on the "review" deployment, without having to merge half-finished stuff into master and thus block it from being deployable to production.

The problem is that resources are not unlimited. So, I made this ephemeral deployments to **not** auto-restart, so that I can reboot the CI server and then run `docker system prune -af`. This is not an ideal solution of course, but still a small price to pay to keep the master branch deployable at any time which is priceless as you can fairly imagine.

I've been looking into solutions for a while, of course I could setup a cron job that would go over stacks which project name start with `review-` and if they are say 5 days old then drop them. As such, if a developer does not push anything to the branch during 5 days then the stack auto-removes.

But now I think that the best would be to add a lifetime to the stack. For example: `docker-compose up --lifetime=5d` would make the stack auto-remove itself after 5 days of uptime. The only thing I'm wondering about, is if this can be done purely in compose, or if it would require to contribute a lifetime option to docker containers/volumes/networks and so on.

What do you think ?
PR -> https://github.com/docker/compose/pull/7155
Hi, 
on several machines with Ubuntu 18.04 (docker compose 1.17) and 19.10 (compose 1.21) I've experienced the problem, that docker-compose-created networks ignore IPv6 settings or at least do not assign IPv6 addresses to containers. I'm aware that the current version is 1.25, but I didn't see any entries about that in the Changelog, so I guess the problem is still there. 

I've configured docker to use IPv6 in /etc/docker/daemon.json and given a default network, and containers started with regular docker automatically get an IPv6 address assigned. 

This does not work with docker-compose, not even when defining networks with IPv6 in the docker-compose file. 

When googleing the problem, you'll find some workarounds which solve the problems by manually deleting the docker networks created by docker-compose and manually recreating them with IPv6 settings, telling that once the network is created in a proper way, IPv6 works even with docker-compose. However, such workarounds are annoying and error prone. 

Docker compose should treat IPv6 in the same way as IPv4, i.e. automatically assign network addresses and ranges, if not given in the docker-compose.yaml, and obey the settings if given. 

Nowadays it is becoming production-critical to be able to talk IPv6. 

regards

Here is an simple docker-compose.yml and a .env file. The idea is to use .env to set the TAG to use in the image for service.

**docker-compose.yml**

`version: "3.7"
services:
  service:
    image: seb/service:${MY_TAG:-latest}
`

**.env**

`MY_TAG=v1.0
MY_FULL_TAG=v1.0-12345`

If i run docker-compose -f docker-compose.yml from within the same directory as the docker-compose.yml and .env file. Everything works as expected.

But if i run the docker-compose from an parent directory, it will not respect the .env file.

Example1 (**works**):
`docker-compose -f .\docker-compose.yml config`

`services:
  service:
    image: seb/service:v1.0
version: '3.7'
`

Example2 (**not working**):
`docker-compose -f .\dockerfiles\docker-compose.yml config`

`services:
  service:
    image: seb/service:latest
version: '3.7'`

If i try to declare the .env file inside the docker-compose like 
`env_file: ./dockerfiles/.env`
i get an error message
**ERROR: Couldn't find env file: C:\temp\dockerfiles\dockerfiles\dockerfiles\.env**

So my conclusion is that docker-compose is not working correctly when it comes to using -f and having the .env in the same directory as the docker-compose.yml file. And if i specify the path inside the docker-compose file, it is clearly already using it due to the error message.

Workaround is to have the .env file in the same directory as the command is executing, not using relative paths to docker-compose.yml files.
Resolves: #6511 #6838 #2854
Closes: #6897 #6923

That's a WIP for now since the new version of python-dotenv is not released. A new version of `python-dotenv` should include my [empty value PR](https://github.com/theskumar/python-dotenv/pull/220). At this point, I will change `requirements.txt` to avoid the vendoring on my branch and we should be able to merge.

ERROR: Couldn't connect to Docker daemon at http+docker://localhost - is it running?

If it's at a non-standard location, specify the URL with the DOCKER_HOST environment variable.

I am getting the above error on Ubuntu 18 machine when running docker compose on jenkins workspace `/var/lib/jenkins/workspace`

```
docker-compose version 1.25.1, build a82fef07
```
```
Docker version 19.03.5, build 633a0ea838
```

```
Distributor ID: Ubuntu
Description:    Ubuntu 18.04.3 LTS
Release:        18.04
Codename:       bionic
```
```
systemctl status docker.service

Jan 16 06:57:53 Wdsys dockerd[19160]: time="2020-01-16T06:57:53.569004581Z" level=error msg="Handler for POST /v1.30/build returned error: invalid reference format"
```
<!--
Welcome to the docker-compose issue tracker! Before creating an issue, please heed the following:

1. This tracker should only be used to report bugs and request features / enhancements to docker-compose
    - For questions and general support, use https://forums.docker.com
    - For documentation issues, use https://github.com/docker/docker.github.io
    - For issues with the `docker stack` commands and the version 3 of the Compose file, use
      https://github.com/docker/cli
2. Use the search function before creating a new issue. Duplicates will be closed and directed to
   the original discussion.
3. When making a bug report, make sure you provide all required information. The easier it is for
   maintainers to reproduce, the faster it'll be fixed.
-->

## Description of the issue
docker-compose up brings up extra containers which docker-compose down doesn't remove

I can't show much information as this is a company-classified project, but I'm using CentOS7 and docker 3. There are containers that are brought up by "docker-compose up", that do not go down when I type "docker-compose down", and that are causing port locking issues (these are dockerised APIs). These containers also do not disappear when I kill these ports using "kill -9 $(lsof -t -i:PORT_NUM)".

These extra containers also have a different name shown (e.g. I am in folder XYZ and my expected services have names XYZ_.... while these extra ones are named ABC_...), so I was wondering if Compose is somehow using multiple yml files in its "up", but there aren't any others in my current working directory.

Am trying to write a crontab that stops and starts my Docker services. Any help is appreciated, thank you!
I am trying to run an ASP.NET Core 3.1 framework based app on an Ubuntu (18.04.3 LTS) server using Docker container.

First I created run the `nginx-proxy` image using the following docker-compose.yml` file


    version: '3.4'
    services:
      nginx-proxy:
        image: jwilder/nginx-proxy
        container_name: nginx-proxy
        ports:
          - "80:80"
        volumes:
          - /var/run/docker.sock:/tmp/docker.sock:ro
    
    networks:
      default:
        external:
          name: nginx-proxy
    secrets:
      server.cert:
        file: ./server.cert
      server.key:
        file: ./server.key

Both `server.cert` and `server.key` files are stored next to the `docker-compose.yml` file and were created using the following command

    sudo openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -subj "/C=US/ST=CA/L=SF/O=Docker-demo/CN=nginx-proxy.example.com" -keyout server.key -out server.cert

I ran that image using `docker-composer up -d` command.

Now that my nginx proxy is running, I created my first app using the following `docker-composer.yml` file


    version: '3.4'
    
    services:
      private_image:
        image: private_image:latest
        environment:
          - VIRTUAL_HOST=sub.domainsname.com
          - ASPNETCORE_ENVIRONMENT=Production
          - ASPNETCORE_URLS=https://+:443;http://+:80
        expose:
          - 80
          - 443
        ports:
          - 51736:80
          - 44344:443
        volumes:
          - storage:/storage
          - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
          - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
        container_name: realestatestorage
    volumes:
      storage:
    networks:
      default:
        external:
          name: nginx-proxy
    secrets:
      sub.domainsname.com.cert:
        file: ./sub.domainsname.com.cert
      sub.domainsname.com.key:
        file: ./sub.domainsname.com.key


Both `sub.domainsname.com.cert` and `sub.domainsname.com.key` files are stored next to the `docker-compose.yml` file and were created using the following command

    sudo openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -subj "/C=US/ST=CA/L=SF/O=PrivateImage/CN=sub.domainsname.com" -keyout sub.domainsname.com.key -out sub.domainsname.com.cert

When I run my private image using `docker-compose up` I get the following

    WARNING: The APPDATA variable is not set. Defaulting to a blank string.
    Recreating private_image ... done
    Attaching to private_image
    private_image    | crit: Microsoft.AspNetCore.Server.Kestrel[0]
    private_image    |       Unable to start Kestrel.
    private_image    | System.InvalidOperationException: Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found or is out of date.
    private_image    | To generate a developer certificate run 'dotnet dev-certs https'. To trust the certificate (Windows and macOS only) run 'dotnet dev-certs https --trust'.
    private_image    | For more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.
    private_image    |    at Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(ListenOptions listenOptions, Action`1 configureOptions)
    private_image    |    at Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(ListenOptions listenOptions)
    private_image    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.AddressesStrategy.BindAsync(AddressBindContext context)
    private_image    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindAsync(IServerAddressesFeature addresses, KestrelServerOptions serverOptions, ILogger logger, Func`2 createBinding)
    private_image    |    at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken)
    private_image    | Unhandled exception. System.InvalidOperationException: Unable to configure HTTPS endpoint. No server certificate was specified, and the default developer certificate could not be found or is out of date.
    private_image    | To generate a developer certificate run 'dotnet dev-certs https'. To trust the certificate (Windows and macOS only) run 'dotnet dev-certs https --trust'.
    private_image    | For more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.
    private_image    |    at Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(ListenOptions listenOptions, Action`1 configureOptions)
    private_image    |    at Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions.UseHttps(ListenOptions listenOptions)
    private_image    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.AddressesStrategy.BindAsync(AddressBindContext context)
    private_image    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindAsync(IServerAddressesFeature addresses, KestrelServerOptions serverOptions, ILogger logger, Func`2 createBinding)
    private_image    |    at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken)
    private_image    |    at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)
    private_image    |    at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)
    private_image    |    at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
    private_image    |    at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)
    private_image    |    at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)
    private_image    |    at private_image.Program.Main(String[] args) in /src/private_image/Program.cs:line 17
    private_image exited with code 139


The command `dotnet dev-certs https --trust` works on Windows and macOS only. But how can I fix this issue on Ubuntu?
