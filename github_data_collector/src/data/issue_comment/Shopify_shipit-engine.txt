#989 was merely a hotfix, we need to properly support paginating the results of the commit status query.
This allows (efficiently) querying for stacks locked for this reason while retaining a user-friendly presentation.
This replaces https://github.com/Shopify/shipit-engine/pull/967 and is a work in progress; most of the business logic for this lives in our downstream application and is yet to be extracted.
Allow users to manage `Repository` objects
Greetings,

At PowerHRG we desire to implement the ability to automatically deploy a branch as a new "review instance" of our application to our Kubernetes cluster when a Pull Request for that branch is opened - and subsequently clean up the instance when the PR is closed or merged - functionality similar to Heroku's Review Apps. However, we maintain a number of projects and do NOT want to expose this functionality for every application/repository/pipeline.

As we understand it, Shipit offers no mechanism at the repository level to control which repositories can dynamically provision stacks. We'd like to add such a feature to Shipit and are seeking design guidance / gauging appetite for possible upstream contribution. It seems the Stack is the highest level concept which involves an application/repository/pipeline, but this remains insufficient since the Stack also marries a particular branch and environment to the application/repository/pipeline concept. What we _think_ we'd like is a higher level concept which represents the application/repository/pipeline to which stacks could belong. This application/repository/pipeline could then contain its own configuration for the project-level features we desire.

As I've stated earlier, we seek guidance:

1. Are we alone in this problem?
1. What aren't we considering?
1. How are others achieving this goal already given the existing tools?
1. Does this seem like a reasonable feature for Shipit?
1. Does the design direction make sense given the goals of Shipit?
1. Aside from the [workflow guidelines](https://github.com/Shopify/shipit-engine#instructions) listed in the README, what's the least contentious path for upstream adoption of contributions?

Shipit creates a deployment as soon as the task starts, but seems to only set the deployment status when the task is complete:

<img width="474" alt="Screenshot 2019-11-27 at 11 33 50" src="https://user-images.githubusercontent.com/398706/69720122-d25e6180-1109-11ea-99e7-5d1d2075e5ad.png">

=> 

<img width="545" alt="Screenshot 2019-11-27 at 11 36 24" src="https://user-images.githubusercontent.com/398706/69720277-26694600-110a-11ea-9021-133de7d4b41c.png">


This means other apps cannot discover the log url of the in flight deploy. Shipit should set an [`in_progress`](https://developer.github.com/v3/repos/deployments/#create-a-deployment-status) status after creating the deployment.
We recently updated our Shipit install from v0.28.0 to v0.28.1, and now we're seeing new branches being pushed back to the GitHub repos we're deploying.

They're named `shipit-deploy/production` and `shipit-deploy/staging` which match the stack names we have.

This is unexpected and problematic as it triggers CI runs. We've configured around it for now but a fix (or explanation if this is intentional) would be appreciated.

My only idea so far is that it has to do with the branch name config that was changed in #927.
A bit of preliminary plumbing to set deploy state refs.

I subclassed the last-deployed-ref job as it was quicker, but ideally all three would inherit from a common base (or it would be one, customizable/composed job class).

Currently only doing the additional updating on `stack.trigger_deploy` and after a status change to 'success' for a deploy.

The refs would then be utilized by merge-queue / shipit-next: https://github.com/Shopify/shipit-next/pull/830

Still _very much_ WIP.
Normally it shouldn't be an issue, but I think it's worth mentioning in case a user doesn't see their tasks. This also will help them lean towards thinking something is wrong if they refresh and still don't see their new tasks.
This line: https://github.com/Shopify/shipit-engine/blob/740b8a98eb7c11f84378334270e320d986ce6b1a/lib/snippets/assert-lerna-independent-version-tags#L19

Fails deploys of polaris-icons for packages not in `/packages/`.

In this deployment:
https://shipit.shopify.io/shopify/polaris-icons/libraries-js/deploys/843212

The [version in ./packages-ruby/polaris_icons/package.json](https://github.com/Shopify/polaris-icons/blob/master/packages-ruby/polaris_icons/package.json#L3) isn't being detected correctly:

```
$ assert-lerna-independent-version-tags
pid: 362510
module.js:550
    throw err;
    ^
Error: Cannot find module './packages/polaris_icons/package.json'
    at Function.Module._resolveFilename (module.js:548:15)
    at Function.Module._load (module.js:475:25)
    at Module.require (module.js:597:17)
    at require (internal/module.js:11:18)
    at [eval]:1:13
    at ContextifyScript.Script.runInThisContext (vm.js:50:33)
    at Object.runInThisContext (vm.js:139:38)
    at Object.<anonymous> ([eval]-wrapper:6:22)
    at Module._compile (module.js:653:30)
    at evalScript (bootstrap_node.js:479:27)
polaris_icons is tagged as 0.3.0, but its package.json version is .
```