
org.kotlin99.misc.SudokuDancingLinks.ExactCoverMatrix.Companion#toSudokuBoard
does `it.header.toString().toInt()`. This should be refactored, e.g. to use Int as Node label.
Because there are really "equal to ignoring order" matchers.

The text was mostly copied from 99 scala problems and overall is too verbose.
Probably it should also explain existing Kotlin API for graphs.


- overall `Graph` class seems a bit more complicated than you'd expect
- `Node` has `U` type parameter only to pass it into `Edge`
- there are too many methods in `Graph` companion object, ideally directed/undirected, labelled/unlabelled, terms/adjacency list should be "orthogonal"
- comparator in P84 https://github.com/dkandalov/kotlin-99/blob/8230bfa99c5bc692de9864d8ba0708dea6b041ff/src/org/kotlin99/graphs/P84.kt#L18-L18

1) Is it a good decision to model â€œno node" as `End` object? Or should it be `null` or may be a class?
2) What is the best way to model Nodes with XY position? I decided to wrap node value into object which has coordinates, unlike for example this solution http://aperiodic.net/phil/scala/s-99/p64.scala where they define `PositionedNode` class.
