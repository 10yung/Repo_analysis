Hello.

Now, `pyflow init` generates `LICENSE`, which I don't think is useful.
This is because I create license file on github.com, and empty `LICENSE` makes it unavailable.
I have two alternative ideas as follows.

1. `pyflow init` does not create `LICENSE`
2. `pyflow init` make user choose using license (including nothing),  and generates it as users choose.

As you know, `cargo new` does not create `LICENSE`, for the first idea is sufficient, I think.
Please think on it.

Regards.
With a fresh project, specifying only `py_version = "3.7"`

```
> env RUST_BACKTRACE=full pyflow
Please enter the number corresponding to your Linux distro:
1: 2016 or newer (Ubuntu‚â•16.04, Debian‚â•9, SUSE‚â•15, Arch, Kali, etc)
2: Older (Centos, Redhat, Fedora, older versions of distros listed in option 1)
1
Installing Python 3.7.4...
üêç Setting up Python...
thread 'main' panicked at 'Timed out waiting for venv to be created.: AliasError { details: "Timed out attempting to create a directory" }', src/libcore/result.rs:1165:5
stack backtrace:
   0:     0x55c09138bba4 - <unknown>
   1:     0x55c0913b442c - core::fmt::write::h01edf6dd68a42c9c
   2:     0x55c0913860c7 - <unknown>
   3:     0x55c09138e745 - <unknown>
   4:     0x55c09138e436 - <unknown>
   5:     0x55c09138ee45 - std::panicking::rust_panic_with_hook::h825f041245da8739
   6:     0x55c09138e9e2 - <unknown>
   7:     0x55c09138e8d6 - rust_begin_unwind
   8:     0x55c0913b0e9a - core::panicking::panic_fmt::h527855ce0bc891f6
   9:     0x55c0913b0f97 - core::result::unwrap_failed::ha8b77e6004f0ba38
  10:     0x55c091012dc5 - <unknown>
  11:     0x55c090fd8b7b - <unknown>
  12:     0x55c090ffa202 - <unknown>
  13:     0x55c09102ed53 - <unknown>
  14:     0x55c09138e873 - <unknown>
  15:     0x55c091398c3a - __rust_maybe_catch_panic
  16:     0x55c09138f33d - std::rt::lang_start_internal::h409d4f2fe51133b0
  17:     0x55c0910029c2 - <unknown>
  18:     0x7f3402dc12e1 - __libc_start_main
  19:     0x55c090f27dc9 - <unknown>
  20:                0x0 - <unknown>

> tree __pypackages__/
__pypackages__/
‚îî‚îÄ‚îÄ 3.7
    ‚îî‚îÄ‚îÄ lib

2 directories, 0 files
```

Environment:
* Debian 9.7
* pyflow 0.2.3 binary download from releases
When dependency is a source only distribution, I got error. Here is a procedure to reproduce it.
pyflow 0.2.3
OS: Linux Mint 19.2

```
~/tmp$ pyflow new proj
Please enter the Python version for this project: (eg: 3.8)
3.8
Created a new Python project named proj
~/tmp$ cd proj
~/tmp/proj (master #)$ RUST_BACKTRACE=full pyflow install ifaddr
‚¨á Installing ifaddr 0.1.6 ...
thread 'main' panicked at 'Problem running setup.py bdist_wheel: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/libcore/result.rs:1165:5
stack backtrace:
   0:     0x55d79b1daba4 - <unknown>
   1:     0x55d79b20342c - core::fmt::write::h01edf6dd68a42c9c
   2:     0x55d79b1d50c7 - <unknown>
   3:     0x55d79b1dd745 - <unknown>
   4:     0x55d79b1dd436 - <unknown>
   5:     0x55d79b1dde45 - std::panicking::rust_panic_with_hook::h825f041245da8739
   6:     0x55d79b1dd9e2 - <unknown>
   7:     0x55d79b1dd8d6 - rust_begin_unwind
   8:     0x55d79b1ffe9a - core::panicking::panic_fmt::h527855ce0bc891f6
   9:     0x55d79b1fff97 - core::result::unwrap_failed::ha8b77e6004f0ba38
  10:     0x55d79ae69812 - <unknown>
  11:     0x55d79ae422f1 - <unknown>
  12:     0x55d79ae4d248 - <unknown>
  13:     0x55d79ae7dd53 - <unknown>
  14:     0x55d79b1dd873 - <unknown>
  15:     0x55d79b1e7c3a - __rust_maybe_catch_panic
  16:     0x55d79b1de33d - std::rt::lang_start_internal::h409d4f2fe51133b0
  17:     0x55d79ae519c2 - <unknown>
  18:     0x7f5767267b97 - __libc_start_main
  19:     0x55d79ad76dc9 - <unknown>
  20:                0x0 - <unknown>
~/tmp/proj (master #)$ 
```
Reading the Readme, the point about pyflow using a cache stood out to me. Pip does it as well; on POSIX systems, look at `~/.cache/pip/wheels`. Was there a reason it's not used for pyflow?
1. Be on git master
2. Make a script `a.py`:
```Python
__requires__ = ["fonttools[ufo]"]

import fontTools.ufoLib
```
3. `pyflow script a.py`

```
thread 'main' panicked at 'Problem opening the Python script file.: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/libcore/result.rs:1165:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

`println!`-debugging reveals `filename` in main.rs:970 to be "a_py". Looks like someone stepped on the dot.
(From https://github.com/David-OConnor/pyflow/issues/32#issuecomment-561347978)

1. `pyflow new aaa ; cd aaa`
2. `pyflow install ufoLib2` -- this will install `fonttools[ufo]`
3. Add `fonttools = {version = "^4.2.0", extras = ["ufo", "lxml", "unicode"]}` to the pyproject.toml file.
4. `pyflow install`

What happened: nothing. What I expected: the `lxml` and on Python < 3.8 `unicodedata2` dependency are installed in addition to the `[ufo]` stuff.
Hello!

First issue posted there so tell me if I need to edit its description or title :)

So, I just want to be able to pull dependencies from my own artifactory or any other pypi clone I would own, from custom python builds installation to my own libraries.

I would love to contribute and help you do it if you're ok with it üëç 

Thanks for reading.
```
[tool.pyflow.dependencies]
pywebview = { git = "https://github.com/r0x0r/pywebview" }
```
[causes](https://github.com/David-OConnor/pyflow/blob/master/src/util.rs#L57)
```
‚ùØ pyflow install
thread 'main' panicked at 'Problem parsing Os in extras: openbsd6', src\dep_types.rs:706:49
```
[because of](https://github.com/r0x0r/pywebview/blob/master/setup.py#L14)
```
install_requires = [
    ...,
    'PyQt5 ; sys_platform == "openbsd6"',
]
```

The point is that I'm running pyflow in Windows.

Given that `sys.platform` is built dynamically [in most POSIX systems](https://docs.python.org/3/library/sys.html#sys.platform), as are other PEP508's environment markers, I think that a best-effort parsing of `install_requires` would be a more resilient approach.

Thank you for your work :) Python is greatly in need of tools like this.
I‚Äôm using Fedora and after creating a new project, I was asked the following:
```bash
$ pyflow install aiohttp
Found multiple compatible Python versions. Please enter the number associated with the
  one you‚Äôd like to use:
1: python3.7: 3.7.5
2: python3: 3.7.5
3: python: 3.7.5
```

Pyflow could detect it‚Äôs linking to the same version. Maybe it could even see if it‚Äôs about symlink to the same binary.  
And then not ask this question.
I installed `black`(`pflow install --dev black`) and set `"python.autoComplete.extraPaths": ["__pypackages__/3.7/lib"]` , but VSCode formatter did not work. 

Setting `black` path to `__pypackages__/3.7/bin/black` or `__pypackages__/3.7/lib/black` has no effects. Are there any workarounds?

Note that `pflow black` works as expected.