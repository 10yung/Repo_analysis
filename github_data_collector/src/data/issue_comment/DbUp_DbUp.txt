Wery usefull when
-  you want to test if the scripts won't fail
-  to integrate in a CI pipeline. Fail the build if any of the scripts fail to execute

It is like running in the command line 'dotnet new console --dry-run' where you see what files are going to be created by they wont be created
There is no way today to use DbUp with an SSL secured connection. I'd like to add this support to DbUp since we need it for our project. The way I'd like to do this is by providing a byte array of the certificate (.pfx) file to new extension methods for Postgres. The PostgresqlConnectionManager class will set the callback function for handling the certificate. 
This would be a breaking change.
It would be great to get a dbup-cockroachdb project created to allow dbup to be used with cockroachdb. Although its based on PostgreSQL, DbUp-PostgreSQL does not work out of the box with cockroachdb and requires a few changes. Not sure if this is something which you would prefer was added to the dbup repo or done in one of my public repos. If your happy to add it then i'm more than happy to open a PR (unless you fancy doing it your self), otherwise, i'm happy to do this independently of the main repo. Thanks
With .NET Core, we can now create projects using the dotnet cli. That could be interesting to be able to create new projects using pre-defined templates, mostly for ASP.NET Core projects.
Using 4.2.0, attempting to upgrade from sql files via dir path, when attempting to do update on a new empty pgsql 10 database I receive the 'Journal table does not exist' error.

My c# code:
```
var upgrader = DeployChanges.To.PostgresqlDatabase(_config.GetConnectionString("DefaultConnection"), "public")
                    .WithScriptsFromFileSystem(martenPatchDir.ParsedValue)
                    .JournalToPostgresqlTable("public", "SchemaVersions")
                    .LogToConsole()
                    .Build();

                var result = upgrader.PerformUpgrade();
```
I'm looking at implementing DbUp in an existing project with stored procs, views and functions that have drop and create statements. Unfortunately some run fine while others run into the exception "SqlException (0x80131904): Incorrect syntax near '?'" and I can't find where the issue is in the script. These scripts run fine as-is when executing in SSMS against MSSQL.

Its very odd because some SQL file scripts will drop / create just fine, however others will fail on various places such as parameter inputs or at inner joins. For example, the below script in sp_test123.sql, if I comment out all of the INNER JOINs the script will run just fine. I've combed through the documentation, however haven't been able to find if I'm missing a configuration option. Thus far none of our migration scripts have not run into this issue.

sp_test123.sql:
```sql
CREATE OR ALTER PROCEDURE sp_test123    
	@State nvarchar(50),  
	@City nvarchar(30)  
AS  
BEGIN  
	SELECT [CustomerID]  
FROM   
(  
SELECT DISTINCT c.[CustomerID]  
FROM [SalesLT].[Customer] c  
INNER JOIN [SalesLT].[CustomerAddress] ca ON ca.[CustomerID] = c.[CustomerID]  
--INNER JOIN [SalesLT].[Address] a ON a.[AddressID] = ca.[AddressID]  
-- WHERE j.State = @State   
) AS T  
END  
GO
```

Program.cs excerpt:
```csharp
var upgrader = DeployChanges.To
.SqlDatabase(connectionString)
.WithScriptsEmbeddedInAssembly(Assembly.GetExecutingAssembly(), s => s.StartsWith("ConsoleApp1.Scripts.", StringComparison.OrdinalIgnoreCase))
.LogToConsole()
.JournalToSqlTable("dbo", "SchemaVersions")
.WithTransaction()
.Build();

var storedProcUpgrader = DeployChanges.To
.SqlDatabase(connectionString)
.WithScriptsEmbeddedInAssembly(Assembly.GetExecutingAssembly(), s => s.StartsWith("ConsoleApp1.AlwaysRun.", StringComparison.OrdinalIgnoreCase))
.LogToConsole()
.JournalTo(new NullJournal())
.WithTransaction()
.Build();
```

Console Log:
```powershell
Beginning transaction
Beginning database upgrade
Checking whether journal table exists..
Fetching list of already executed scripts.
No new scripts need to be executed - completing.
Beginning transaction
Beginning database upgrade
Executing Database Server script 'ConsoleApp1.AlwaysRun.SQLQuery3.sql'
SQL exception has occured in script: 'ConsoleApp1.AlwaysRun.SQLQuery3.sql'
Script block number: 0; Block line 10; Message: sp_test123
System.Data.SqlClient.SqlException (0x80131904): Incorrect syntax near '?'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)
   at System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at DbUp.Support.ScriptExecutor.ExecuteNonQuery(IDbCommand command)
   at DbUp.Support.ScriptExecutor.<>c__DisplayClass18_2.<Execute>b__1()
   at DbUp.SqlServer.SqlScriptExecutor.ExecuteCommandsWithinExceptionHandler(Int32 index, SqlScript script, Action excuteCommand)
ClientConnectionId:7e325b28-f5eb-448e-868f-c07d3a39efb7
Error Number:102,State:1,Class:15
DB exception has occured in script: 'ConsoleApp1.AlwaysRun.SQLQuery3.sql'
Script block number: 0; Message: Incorrect syntax near '?'.
   at System.Data.SqlClient.SqlConnection.OnError( ...
```

packages.config

```xml
<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="dbup" version="4.2.0" targetFramework="net471" />
  <package id="dbup-core" version="4.2.0" targetFramework="net471" />
  <package id="dbup-sqlserver" version="4.2.0" targetFramework="net471" />
</packages>
```

Sample connstring for MSSQL 14.0.1000.169
```config
connectionString="Server=localhost\sqlexpress;Database=AdventureWorksLT2017;Trusted_connection=true"
```
When using dbup v4 if a statement contains the word 'delimiter' then the word and the following word are dropped from the statement.  This causes a problem if the word occurs in a string that's being inserted or updated for example.  See the unit test below.  This was not an issue in v3.3.5.

Expecting 'Some text with delimiter in it' to be written to the database but what actually gets written is 'Some text with it'.

```
        [Fact]
        public void DoesNotParseOutTheWordDelimiterWhenItsInAString()
        {
            var multiCommand = "USE `test`;";
            multiCommand += "CREATE TABLE IF NOT EXISTS 'FOO';";
            multiCommand += Environment.NewLine;
            multiCommand += "DELIMITER $$";
            multiCommand += Environment.NewLine;
            multiCommand += "CREATE TABLE 'ZIP'$$";
            multiCommand += Environment.NewLine;
            multiCommand += "CREATE TABLE IF NOT EXISTS 'BAR';";
            multiCommand += Environment.NewLine;
            multiCommand += "INSERT INTO mytable(description) VALUES ('Some text with delimiter in it');";

            var connectionManager = new MySqlConnectionManager("connectionstring");
            var result = connectionManager.SplitScriptIntoCommands(multiCommand);

            var enumerable = result as string[] ?? result.ToArray();
            enumerable.Length.ShouldBe(4);
            enumerable[0].IndexOf("DELIMITER", StringComparison.Ordinal).ShouldBe(-1);
            enumerable[1].IndexOf("DELIMITER", StringComparison.Ordinal).ShouldBe(-1);
            enumerable[2].IndexOf("DELIMITER", StringComparison.Ordinal).ShouldBe(-1);
            enumerable[3].IndexOf("DELIMITER", StringComparison.OrdinalIgnoreCase).ShouldBeGreaterThan(-1);
        }
```
(TO DO - write this summary properly)

- Uses the `Microsoft.SqlServer.DacFx` package to parse script contents to split to commands
- Updates the SQL Server package frameworks through necessity (required by the `DacFx` package)
- Duplicates unit tests because existing `SqlCommandSplitter` tests aren't valid SQL

Resolves #444 
Following up on https://github.com/DbUp/DbUp/issues/441#issuecomment-539545122 
Please let me know if this format works for you @droyad, I'll be happy to adjust if needed.
Thanks!