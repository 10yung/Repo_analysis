I haven't been able to isolate the cause, but upgrading

```-      "org.specs2" %% "specs2-core" % "4.7.1" % "test,it",
-      "org.specs2" %% "specs2-mock" % "4.7.1" % "test",
-      "org.specs2" %% "specs2-scalacheck" % "4.7.1" % "test"
+      "org.specs2" %% "specs2-core" % "4.8.0" % "test,it",
+      "org.specs2" %% "specs2-mock" % "4.8.0" % "test",
+      "org.specs2" %% "specs2-scalacheck" % "4.8.0" % "test"
```

Causes my test suite to take significantly longer and thrash the CPU. Travis jobs often time out.

Upgrading to 4.8.1 did not resolve this.

https://github.com/Synesso/scala-stellar-sdk/commit/be3b74409977abdb7c7d4009478cf550a6680a90


This spec here:

https://github.com/jroper/play-geojson/blob/master/src/test/scala/au/id/jazzy/play/geojson/ExampleSpec.scala

Has examples nested two deep (ie, `"foo" should { "do something" in { "bar" in { ... } } }`. Using specs 4.6.0, this runs fine with Scala 2.11 and 2.12, but with 2.13, it doesn't run at all, it's as if the specs aren't there. Not sure if this is a Scala issue, specs2 issue, or if it's by design with Scala 2.13 and I need to update my specs.
In Scala 2.13, `Option` extends `IterableOnce` and `TraversableOnce` is a (deprecated) alias to `IterableOnce`. This creates an inconsistency with the output of failure messages including `Option`s, since `Option`s become unquoted in Scala 2.13, but quoted in Scala versions below 2.13:

https://github.com/etorreborre/specs2/blob/8305db76c5084e4b3ce5827ce23117f6fb6beee4/common/shared/src/main/scala/org/specs2/text/Quote.scala#L14-L24

@etorreborre: I'd be happy to submit a PR to fix this, but I'd like your input first. Should `Option`s be quoted or unquoted?
It will be good to have a global setup and teardown for whole test suite in addition to the existing setup and teardown for each specification (https://etorreborre.github.io/specs2/guide/SPECS2-2.4.17/org.specs2.guide.Structure.html#Global+setup%2Fteardown). This will be very similar to  @BeforeClass in Junit and will be useful to manage expensive resources like a Db or a testContainer. The approaches that I have seen so far has been by editing build.sbt

- https://github.com/sbt/sbt/issues/2056#issuecomment-387893613
- https://gist.github.com/etorreborre/fb264e72aa4600a6a477

Tinkering with build.sbt doesn't work well with tools, for example IntelliJ which ignores the testOptions in build.sbt

Is there a betterWay to achieve the same, for example from specs2 runner ?
This enables tests using syntax like this:

```scala
"an IO[MatchResult[_]] is implicitly a Result" >> {
  for {
    x <- IO.pure(42)
  } yield {
    x must_== 42
  }
}
```

would be really useful to have such feature
Fixes #713

Using JUnit 5 Vintage allows us to run vintage JUnit tests (tests written in the JUnit 4 style) on the new JUnit Platform. Therefore we don't need to upgrade the tests itself yet.

See https://www.baeldung.com/junit-5-migration:
> JUnit Vintage aids in the migration of JUnit tests by running JUnit 3 or JUnit 4 tests within the JUnit 5 context.

Also https://junit.org/junit5/docs/current/user-guide/#dependency-metadata-junit-vintage
> JUnit Vintage test engine implementation that allows to run vintage JUnit tests, i.e. tests written in the JUnit 3 or JUnit 4 style, on the new JUnit Platform.

JUnit 5 releases: https://github.com/junit-team/junit5/releases

Why upgrade?
So frameworks that use specs2 can also upgrade to JUnit 5 without conflicting dependencies.
Hello,

is it possible to upgrade to latest JUnit 5.3.1?
https://github.com/etorreborre/specs2/blob/9f93c270421a27bec8001d363f69ca02b5c6fa4f/project/depends.scala#L42