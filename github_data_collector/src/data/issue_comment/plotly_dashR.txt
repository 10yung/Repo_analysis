This PR adds in custom index functionality by adding in a method to the Dash class which takes in an HTML index string with some necessary defaults, and whatever custom additions or changes a user wants to make, and then renders it above or below the app based on where the code is added. Custom `meta_tags`, `title`, and scripts like the Google Tag Manager analytics can be added to the index body and loaded with the `script` tag. 

This functionality brings `DashR` more inline with the features available for `Dash` for Python.

An example of a custom string is below:

```
string <-
"<!DOCTYPE html>
        <html>
          <head>
            {meta_tags}
            <title>{private$name}</title>
            {favicon}
            {css_tags}
            <script type ='text/javascript' src='googleanalytics.js'></script>
          </head>
          <body>
            <p>'This is a custom string!'</p>
            <!-- Google Tag Manager (noscript) -->
              <noscript><iframe src='https://www.googletagmanager.com/ns.html?id=GTM-XXXXXXX'
              height='0' width='0' style='display:none;visibility:hidden'></iframe></noscript>
          <!-- End Google Tag Manager (noscript) -->
            <div id='react-entry-point'>
              <div class='_dash-loading'>Loading...</div>
            </div>
            <footer>
              <script id='_dash-config' type='application/json'> {to_JSON(self$config)} </script>
              {scripts_tags}
            </footer>
          </body>
        </html>"
```

Closes #42 
The problem appears on Safari 13.0.3 on macOS 10.15.1 (Catalina) but interestingly does NOT occur on Chrome Version 78.0.3904.108. Possibly related to [this issue](https://github.com/plotly/plotly.js/issues/4377) ?

[Here's a video](https://ln.sync.com/dl/18a533ab0/z5zdnx8y-gbvpbrix-8y46xqbk-d8frxmek) of the problem in action (the plot actually flashes):

![Screen Shot 2019-12-10 at 1 14 33 AM](https://user-images.githubusercontent.com/2507459/70515593-740e8700-1aea-11ea-99da-f58cf8c24c2d.png)

Here's the code to cause the crash (actually most plots have this behaviour). Just copy this into a JupyterLab notebook and run the cell:

```
options(tidyverse.quiet = TRUE,
        repr.plot.width = 5,
        repr.plot.height = 3)

library(tidyverse)
library(plotly)

# Let's load up a familiar dataset: mtcars

head(mtcars)

p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() + 
geom_smooth() +
theme_bw() + 
labs(x='Weight (/1000 lbs)',
     y='Fuel efficiency (mpg)',
     title='Car Fuel efficiency by weight')

p

ggplotly(p)
```

R sessionInfo() :

```
R version 3.6.1 (2019-07-05)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Catalina 10.15.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] plotly_4.9.1  ggplot2_3.2.1

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3        later_1.0.0       pillar_1.4.2      compiler_3.6.1   
 [5] base64enc_0.1-3   tools_3.6.1       zeallot_0.1.0     digest_0.6.23    
 [9] uuid_0.1-2        viridisLite_0.3.0 jsonlite_1.6      evaluate_0.14    
[13] lifecycle_0.1.0   tibble_2.1.3      gtable_0.3.0      pkgconfig_2.0.3  
[17] rlang_0.4.2       shiny_1.2.0       IRdisplay_0.7.0   crosstalk_1.0.0  
[21] yaml_2.2.0        IRkernel_1.0.1    repr_1.0.1        withr_2.1.2      
[25] dplyr_0.8.3       httr_1.4.1        htmlwidgets_1.5.1 vctrs_0.2.0      
[29] grid_3.6.1        tidyselect_0.2.5  glue_1.3.1        data.table_1.12.6
[33] R6_2.4.1          pbdZMQ_0.3-3      farver_2.0.1      purrr_0.3.3      
[37] tidyr_1.0.0       magrittr_1.5      promises_1.1.0    backports_1.1.5  
[41] scales_1.1.0      htmltools_0.4.0   assertthat_0.2.1  xtable_1.8-4     
[45] mime_0.7          colorspace_1.4-1  httpuv_1.5.2      labeling_0.3     
[49] lazyeval_0.2.2    munsell_0.5.0     crayon_1.3.4     
```

and `jupyter --version`:

```
jupyter core     : 4.6.1
jupyter-notebook : 6.0.1
qtconsole        : 4.5.1
ipython          : 6.2.1
ipykernel        : 5.1.1
jupyter client   : 5.3.4
jupyter lab      : 1.2.3
nbconvert        : 5.5.0
ipywidgets       : 7.5.0
nbformat         : 4.4.0
traitlets        : 4.3.2
```

When columns contain 'NA' values, then Plotly changes the colors that I assign for the lines and markers. Any ideas on how to fix this? Thank you! (I am using R version '3.6.0 (2019-04-26)' and Plotly version ‘4.9.0’)

The data for the first graph contains some 'NA' values for the 'trust_ecb' column which is plotted on the y-axis. The colors for the lines and markers are incorrect, i.e. different than the colors assigned in the code.

However, when I then recode the 'NA' values to '70', and plot the graph, then the colors are correct.

![IddiDZN](https://user-images.githubusercontent.com/18424513/68172762-99c5d080-ff2d-11e9-9c85-1ceddbef140d.png)
![I2FVxyZ](https://user-images.githubusercontent.com/18424513/68172767-9fbbb180-ff2d-11e9-8119-8795ed3f26ce.png)


    #Creating dataframe
    trust_eur_cyp <- structure(list(year = c(2009L, 2010L, 2011L, 2012L, 2013L, 2014L, 
                    2015L, 2009L, 2010L, 2011L, 2012L, 2013L, 2014L, 2015L, 2009L, 
                    2010L, 2011L, 2012L, 2013L, 2014L, 2015L), group = structure(c(4L, 
                                                                                   4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 1L, 1L, 1L, 
                                                                                   1L, 1L, 1L, 1L), .Label = c("Cypriots", "EU-15", "EU-25", "Greek-Cypriots", 
                                                                                                               "Turkish-Cypriots"), class = "factor"), trust_ecb = c(53.2, 50.2, 
                                                                                                                                                                     44, 33.7, 10.9, 23.2, 19.3, 29.1, 42.1, 36.6, 41.8, 48.1, NA, 
                                                                                                                                                                     NA, 48.8, 48.7, 42.7, 35.1, 17.5, NA, NA)), row.names = c(6L, 
                                                                                                                                                                                                                               7L, 8L, 9L, 10L, 11L, 12L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 
                                                                                                                                                                                                                               36L, 37L, 38L, 39L, 40L, 41L, 42L), class = "data.frame")




    #Creating plots
    library(plotly)
    
    plot_trust_ecb_cyp <- plot_ly(trust_eur_cyp, y = ~trust_ecb, x= ~year, color = ~group, type = "scatter",
                          mode = "lines+markers",
                          line = list(color = factor(trust_eur_cyp$group, labels = c("FFCF00","9702A7","00A876")), width = 3), 
                          marker = list(color = factor(trust_eur_cyp$group, labels = c("FFCF00","9702A7","00A876")), size = 6),
                          legendgroup = ~group, showlegend = T) %>%
      layout(yaxis = list(title = "%  'Tend to Trust'", titlefont=list(size=20), range = c(0,80), tickfont = list(size = 16)),
     xaxis = list(title = "", dtick = 2, tickfont = list(size = 16)))  

    #Recoding 'NA' to '70' to show that now colors in plots are correct
    trust_eur_cyp$trust_ecb[is.na(trust_eur_cyp$trust_ecb)] <- 70

    #Rerun plotly code above.`

This PR proposes to allow passing JavaScript-functions-as-strings within callbacks in Dash for R, addressing #135. This implementation fixes the `namespace` as `_dashprivate_clientside` and automatically prepends `_dashprivate_clientside_` to the output of `createCallbackId`.

A simple test is performed to ensure that a clientside callback does not overlap with an existing (R) callback in `private$callback_map`.

To do:
- [ ] Create simple integration test to demonstrate the functionality
- [ ] Write a simple unit test to ensure that collisions between clientside and serverside callbacks targeting the same output are prevented, with a useful message supplied to the developer

@Marc-Andre-Rivet 
As noted in plotly/dash#956 and plotly/dash#967, it would be very convenient for app developers who wish to leverage JavaScript callbacks to compose these directly within the callback method. One approach might be to pass the JS directly as a string:

```
app$callback(
  output('out-component', 'value'),
  params=list(input('in-component1', 'value'), input('in-component2', 'value')),
  clientsideFunction(
    "
    function(largeValue1, largeValue2) {
        return someTransform(largeValue1, largeValue2);
    }
    "
    )
)
```

The namespace / function name can be determined in a fashion similar as what's done in DashPy (https://github.com/plotly/dash/pull/967), or not, with the `_dashprivate_` prefix.

This feature should be reasonably straightforward to implement in Dash for R, and it would help improve developer ergonomics if it were available.
As described in https://dash.plot.ly/integrating-dash and seen in [code examples](https://community.plot.ly/t/allowing-users-to-download-csv-on-click/5550/9) posted to our community forum, Dash for Python permits app developers to leverage Flask support for adding new routes. 

Dash for R currently lacks this functionality, so Dash for Python code like this:

```
@app.callback(Output('my-link', 'href'), [Input('my-dropdown', 'value')])
def update_link(value):
    return '/dash/urlToDownload?value={}'.format(value)

@app.server.route('/dash/urlToDownload') 
def download_csv():
    value = flask.request.args.get('value')
    # create a dynamic csv or file here using `StringIO` 
    # (instead of writing to the file system)
    strIO = StringIO.StringIO()
    strIO.write('You have selected {}'.format(value)) 
    strIO.seek(0)    
    return send_file(strIO,
                     mimetype='text/csv',
                     attachment_filename='downloadFile.csv',
                     as_attachment=True)
```

currently has no direct counterpart on the R side. We should expose the ability for application developers to define new routes within the Dash for R API. One possible option is through the use of `fiery` plugins. e.g. a `server_route` method could be added which exposes the ability to add plugins with new route handlers:

```
plugin <- list(
    on_attach = function(server) {
     router <- server$plugins$request_routr
     route <- Route$new()
     route$add_handler('all', '*', function(request, response, arg_list, ...) {
       message('Hello')
       TRUE
    })
    router$add_route(route, 1)
    },
  name = 'Hello_plugin',
  require = 'request_routr'
)
```

Thanks to @CanerIrfanoglu for raising this issue initially.
I'm not sure if this is intended behavior, but `dccLink("click me", href = "/foo?p=1", refresh = TRUE)` will encode the `?` in the URL upon refreshing. This will create an incorrect path name.

Here's a sample app to illustrate my problem:

```r
library("dash")
library("dashCoreComponents")
library("dashHtmlComponents")

app <- Dash$new(suppress_callback_exceptions = TRUE)

app$layout(dccLocation(id = "url"), htmlDiv(id = "page-content"))

app$callback(
  output = list(id = "page-content", property = "children"),
  params = list(input(id = "url", property = "pathname")),
  function(path) {
    if (path == "/") {
      list(
        htmlP(dccLink("'/foo?p=1' with ddcLink and refresh=TRUE",
                      href = "/foo?p=1",
                      refresh = TRUE)),
        htmlP(dccLink("'/foo?p=1' with ddcLink and refresh=FALSE",
                      href = "/foo?p=1",
                      refresh = FALSE))
      )

    } else if (path == "/foo") {
      htmlP("It works!")

    } else {
      htmlP("Something went wrong!")

    }
  }
)

app$run_server(debug = TRUE)
```
Of course, the correct result can be achieved using `htmlA` and I realize that this may not actually be related to DashR itself, but to Dash in general.
I have two comments related to the documentation of `htmlButton`:

1. htmlButton is [documented](https://dashr.plot.ly/dash-core-components/button) in the core components, which makes sense to me, but it is actually part of the _dashHtmlComponents_ R package. Maybe add a link from the documentation of the HTML components?
2. The documentation for htmlButton states that its initial value is `NULL`, but is actually `list(NULL)`. Below is the example from the documentation adapted to confirm this. The original example works fine because it actually does `as.character(list(NULL))` which is the string "NULL".

```r
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)

app <- Dash$new()

app$layout(
  htmlDiv(
    list(
      htmlDiv(dccInput(id="input-box", type="text")),
      htmlButton("Submit", id="button"),
      htmlDiv(id="output-container-button",
              children="Enter a value and press submit")
    )
  )
)

app$callback(
  output = list(id = "output-container-button", property = 'children'),
  params=list(input(id = "button", property = "n_clicks"),
              input(id = "input-box", property = "value")),
  function(n_clicks, value) {
    if (is.list(n_clicks)) {
      sprintf("'n_clicks' is a list of length %d", length(n_clicks))
    } else {
      sprintf("'n_clicks' is not a list and you have clicked the button %d time(s)", n_clicks)
    }
  }
)

app$run_server()
```
This app will initially display the following:
![htmlButton-example](https://user-images.githubusercontent.com/4612238/64248373-33163d80-cf11-11e9-9071-02e0c7c040da.png)

The changes proposed by this PR are minimal, and largely related to outdated code:
- :hocho: `is.layout()` and `layout_container_id()`
- :hocho: redundant `is.component(layout_)` [test](https://github.com/plotly/dashR/pull/99/commits/3a38d40a05fe56ec5bf703bad0bd5b3e11cdc82e#r297435510)

https://github.com/plotly/dashR/blob/9aace061a7a957fc79285cc21a87a212489ecf1b/R/utils.R#L18-L25

Closes #120.