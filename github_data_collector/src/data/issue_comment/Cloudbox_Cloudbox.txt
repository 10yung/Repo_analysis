Hi there, it could be great to postpone backup in case of an active streams on Plex.
As already effective with cloudpl0w with throttle feature :)

Thank you !
I have this error in the wizard setup for nextcloud 

Error while trying to create admin user: Failed to connect to the database: An exception occurred in driver: SQLSTATE[HY000] [1045] Access denied for user 'oc_tarek'@'nextcloud.cloudbox' (using password: YES)

I used everything exactly as in the wiki page and i can connect to mariadb from mysql-client from any container 

**System Information**

 - Cloudbox Version: [Develop (latest)]
 - Operating System: [ Debian ]


**Describe the bug**

Have run tag but no joy. 

**System Information**

 - Cloudbox Version: `Develop (latest)`
 - Operating System: `Ubuntu Server 18.04.3 LTS`
 - Linux Kernel: `5.3.0-050300-generic`

```
jq --version
jq-1.5-1-a5b5cbe
```
```
bc 1.07.1
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.
```
**Describe the problem**
Cloudbox can only use 1 remote out of the box. Multiple mount support natively would be useful.

**Describe any solutions you think might work**
Adding multiple options via commas (or some other syntax) in `settings.yml` could create additional systemd services and equivalent warmup files.
```
rclone:
  version: latest
  remote: remote1,remote2
```

---

**Describe the problem**
Traktarr currently only allows syncing of Trakt lists with one root path for Radarr and one for Sonarr. It also only syncs to one instance of Radarr and Sonarr. This creates limitations for the following scenarios:

1. If you run multiple instances of Radarr/Sonarr, such as an instance for 4K content, you need to run just as many Traktarr instances.
2. If you have multiple root paths (e.g. "/movies/English_HD" and "/movies/Klingon_HD") you need to run a separate instance of Traktarr for each path. 

**Describe any solutions you think might work**
Traktarr is fairly lightweight and having multiple instances running is not an issue. Each instance would run from a separate config file but otherwise should be identical. This seems like an easy solution to implement without having to overhaul the Traktarr script to be able to manage multiple instances/roots.

**Additional context**
It's not difficult to manually start new Traktarr containers (possibly even just duplicate them within portainer), but having it as part of Cloudbox would be nice since it's possible to create new instances of Radarr/Sonarr for 4k content without doing so manually.


Edit: I also realized that Traktarr is not actually running in a docker container even though it exists in Cloudb0x's Dockerhub repos. I pulled it manually and mounted the /opt/traktarr directory to /config in the docker container. Running it with the given entrypoint and the command "run --run-now" seems to work fine as long as you authenticate Trakt outside the container. Is it not possible to use the container rather than installing to the system by default?

**For posterity, if anyone else wants to set up multiple dockers:**

1. Install traktarr via cloudbox per the wiki.
2. Navigate into /opt/traktarr and run `sudo python3 -m pip install -r requirements.txt`.
3. Create 3 folders: `mkdir /opt/traktarr/configs /opt/traktarr/logs /opt/traktarr/caches`.
4. Copy the sample config into the new config directory `cp /opt/traktarr/config.json /opt/traktarr/configs/instance1.json`. *Note: make as many copies as you need different instances of traktarr running, and name them whatever you want (instance1 is just a placeholder).*
5. Authenticate trakt for each config file: `python3 /opt/traktarr/traktarr.py --config /opt/traktarr/configs/instance1.json --logfile /opt/traktarr/logs/instance1.log --cachefile /opt/caches/instance1.db trakt_authentication`.
6. Go into each config and modify your Sonarr url to `http://sonarr:8989/` and the Radarr url to `http://radarr:7878`. *You will not be able to run these configs outside of Docker after this as the url is for the Docker network.*
7. Modify each config as needed.
8. Run the following docker command for each instance. *Note that these are the settings I use for traktarr but you can change the last line to whatever suits your needs (e.g. if you want to respect blacklist, just remove `--ignore--blacklist`).*

```
docker run -d /
  --restart=unless-stopped /
  --name='traktarr-instance1' /
  --net='cloudbox' /
  -e 'PUID'='1000' /
  -e 'PGID'='1000' /
  -e 'UMASK'='2' /
  -e TZ="America/New_York" /
  -e 'TRAKTARR_CONFIG'='/config/configs/instance1.json' /
  -e 'TRAKTARR_LOGFILE'='/config/logs/instance1.log' /
  -e 'TRAKTARR_CACHEFILE'='/config/cache/instance1.db' /
  -v '/opt/traktarr':'/config':'rw' /
  cloudb0x/traktarr:latest /
  run --run-now --ignore-blacklist --add-delay 5
```
9. Check `/opt/traktarr/logs/instance1.log` and make sure everything is working smoothly.
Would love some of the following SSH hardening options during server setup

- Specify a pubkey to provision for the provisioned user
- Specify an alternate port for sshd
- Disable root login via SSH
- Disable SSH login with passwords
It would be nice making cloudbox available in the local network and not only purely through domains.

This would mean that the settings.yml should be enhanced by network: local/cloud.

As I already saw in the updated tasks changes like `published_ports: "{{ plex_docker_ports }}"` we could add a switch to read the ip:port configuration of each app through deployment.
---

**Describe the problem**
Only Resilio Sync is supported, when the open-source alternative Syncthing works just as well, and also has a [docker image.](https://github.com/linuxserver/docker-syncthing)

**Describe any solutions you think might work**
Supporting Syncthing would be nice to have, especially for those who prefer using open-source technologies.

Cloudbox is growing and the default build requires nearly a dozen sub-domains and their corresponding SSL certificates, the community aspect of Cloudbox is also growing; leading to even more demand for single domain SSLs'. 

If we enabled the option to use a wildcard SSL certificate instead of using single domain SSLs' for every sub-domain we could simplify certificate management

I'm following the guide in the wiki and the final step is st configure Organizr. It requires us to use homepage.php. But this file seems to be missing. Please advise.