It's the issue here: https://github.com/numpy/numpy/issues/12744

Happens with numpy 1.17 but fine with 1.15.
Implement GridMask augmentation from paper 
https://arxiv.org/pdf/2001.04086.pdf
## üêõ Bug

After applying `albumentations.imgaug.transforms.IAAPerspective`: 
![image](https://user-images.githubusercontent.com/15197972/72196945-d6e88c00-33d0-11ea-950b-f97b550e14d1.png)

The bounding box is clearly off. It suppose to include blue box as it happens in Imgaug.


## To Reproduce

Steps to reproduce the behavior:

1. Apply single augmentation with single bounding box, which corresponds to a square drawn on the image to see how the box becomes off.


<!-- If you have a code sample, error messages, stack traces, please provide it here as well -->

## Expected behavior
Bounding box includes original area as it happens in Imgaug
<!-- A clear and concise description of what you expected to happen. -->

## Environment

 - Albumentations version (e.g., 0.1.8): 0.4.0
 - Python version (e.g., 3.7): 3.7.5
 - OS (e.g., Linux): MacOS
 - How you installed albumentations (`conda`, `pip`, source): pip3
 - Any other relevant information:

## Additional context

<!-- Add any other context about the problem here. -->

Grid distortion can crash for certain image sizes because `range(0, width, x_step)` may produce a number of steps larger than the size of `xsteps`.

Simple repro, should crash with current master.
```
import numpy as np
import albumentations as ab
transf = ab.GridDistortion(p=1, num_steps=15)
x = np.random.rand(17, 17, 3)
transf(image=x)
```

Using linspace guarantees there are only `num_steps` steps.
## üêõ Bug

Segmentation fault is hapening when I try to use GridDistortion and ElasticTransform augmentations. The problem does not happen in every execution.

## To Reproduce

Minimal reproducible example:
```python
import cv2
import numpy as np
from albumentations import ElasticTransform, GridDistortion, OneOf, Compose


class DataAug:
    @staticmethod
    def get_augs():
        grid = GridDistortion(
            distort_limit=0.2,
            interpolation=cv2.INTER_NEAREST,
            border_mode=cv2.BORDER_CONSTANT,
            value=0,
            always_apply=True
        )
        elast = ElasticTransform(
            alpha_affine=20,
            interpolation=cv2.INTER_NEAREST,
            border_mode=cv2.BORDER_CONSTANT,
            value=0,
            always_apply=True
        )
        return OneOf([
            OneOf([grid, elast], p=1),
            Compose([grid, elast], p=1)
        ], p=1)

    def apply(self, image, mask):
        aug = self.get_augs()
        res = aug(image=image.astype('uint8'), mask=mask.astype('uint8'))
        return res['image'], res['mask']


if __name__ == '__main__':
    input_a = np.zeros((1, 512, 512, 3))
    input_b = np.zeros((1, 512, 512, 1))

    image, mask = DataAug().apply(image=input_a[0, :, :, :], mask=input_b[0, :, :, 0])

    print(image.shape, mask.shape)
```

## Expected behavior

Code should execute without errors and print the shape of the augmented image and mask.

## Environment

 - Albumentations version: 0.4.3
 - Python version: 3.6.9
 - OS: Ubuntu 18.04.2 LTS
 - How you installed albumentations: Pip

---

EDIT:
Apparently it happens less frequently  when using python 3.6.8. I tried in 4 different machines (all ubuntu using conda virtual env) and this was the result:

* opencv 4.1.1 python 3.6.8 albu 0.4.3 > OK
* opencv 4.1.2 python 3.6.9 albu 0.4.3 > not OK
* opencv 4.1.2 python 3.6.8 albu 0.4.3 > OK
* opencv 4.1.2 python 3.6.9 albu 0.4.3 > not OK (but less frequent)

---
EDIT:
Using the trace method from this answer the last lines printed are:
```
line, /home/gustavomaia/miniconda3/envs/test/lib/python3.6/site-packages/albumentations/augmentations/functional.py:172
line, /home/gustavomaia/miniconda3/envs/test/lib/python3.6/site-packages/albumentations/augmentations/functional.py:180
Segmentation fault (core dumped)
```
This PR allows using horizontal flip augmentation for keypoints in the problems, where horizontal flip inverts the semantics for the keypoint. E.g. within pose estimation task, a flipped keypoint for a left arm actually becomes a keypoint for a right arm. 

## üêõ Bug
Setting `'label_fields'` to `[]` for `bbox_params` when creating `Compose` objects results in empty resulting `bbox` tuples after augmentationas are applied. The error appeared after v.0.3.1, for v.0.3.1 if worker correcly.
The problem is caused that `DataProcessor.data_length` is not initialized at `DataProcessor.add_label_fields_to_data` in this case and remains 0, but is used at `DataProcessor.remove_label_fields_from_data` to cut `data`.
Also I noted that using `DataProcessor.data_length` implies that all `data_fields` have the same data length. An opposite case is probably seldom but will result in error.

## To Reproduce

```code=python
import albumentations as A
import albumentations.augmentations.transforms as T
import numpy as np

augs_list = [T.HorizontalFlip(p=1.)]
alb = A.Compose(augs_list, bbox_params={'format': 'pascal_voc',
        'label_fields': [] # if you comment out this line it will operate properly
})
img = np.zeros((256,512,3), dtype = np.uint8)
rects = [[131, 129, 173, 175, 15], [173, 115, 216, 177, 4],]
aug_res = alb(image=img, bboxes=rects)
print(aug_res['image'].shape, aug_res['bboxes'])
->
(256, 512, 3) [(), ()]
```

## Expected behavior

`(256, 512, 3) [(339.0, 129.0, 381.0, 175.0, 15), (296.0, 115.0, 339.0, 177.0, 4)]` in the above example.

## Environment
 - Albumentations version (master rev. c5807e )
 - Python version (e.g., 3.6)
 - OS (Windows)
 - How you installed albumentations (git clone)

## Additional information
I'll fix it.
1. Add `AdditiveNoise` like `MultiplicativeNoise`.
2. Add warning message for `shift_hsv`: `Do not use shift_hsv for grayscale image. Use AdditiveNoise with argument elementwise=False.`
#499