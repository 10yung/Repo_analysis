<!-- Love badgen? Please consider supporting our collective:
ðŸ‘‰  https://opencollective.com/badgen/donate -->

Like this on https://shields.io/

![image](https://user-images.githubusercontent.com/8784712/68073678-68ce8a00-fdcd-11e9-9e12-2e07188a901b.png)

DeepScan is a code quality measurement service. They offer their own badge, but I prefer the consistency that Badgen offers.

Example: https://deepscan.io/dashboard/#view=project&tid=5147&pid=6925&bid=61474
CodeFactor is a code quality measurement service. They offer their own badge, but I prefer the consistency that Badgen offers.

Example: https://www.codefactor.io/repository/github/ghengeveld/react-async
Hello.

Is it possible to support more GitLab related badges? The same way it's done for GitHub, for example:

<div align='center'>
<img src='https://user-images.githubusercontent.com/3982052/61206387-cd53c500-a6c8-11e9-9858-7f9b08b90115.png'>
</div>
Just thinking. Bots and spammers may be pretty clever nowadays, so I'm not sure if putting an email inside a url (for badge generation) is good idea too.

Fanatism isn't a bad thing some times. :D 

Badge: ![](https://badgen.net/badge/%20/consulting@tunnckocore.com?label&color=07ba96)
Source: `https://badgen.net/badge/%20/consulting@tunnckocore.com?label&color=07ba96`

So, what I'm proposing the following

```
badgen.net/email/<tld>/<name>/<domain name>
badgen.net/email/com/consulting/tunnckocore
badgen.net/email/co.uk/foobar/mydomain
```

to be able to generate badge like the above (of course with possibility for `label` and etc).

The idea of live badge will be just to combine the parts in correct order.

I can create runkit for it, but still. Interesting to hear.
For couple of hours I got error 500. First noticed that a ton of badges are just broken on ton of repos. So then I tried to create new project (for which I use mine `charlike` scaffolder which is again using the unpkg registry too) it turns out that unpkg returns 500 for non-cached packages (which is still strange cuz it should have mine pacakges already cached, but probably some cache invalidation happen in recent months).

So, we need to handle this case and fallback to some more reliable source of truth. I bet on jsdelivr, cuz as we know the npm registry sucks a bit.
The left one is generated by `badgen-icons/preview/index.html`, and the right one is generated by `badgen.net`:

![image](https://user-images.githubusercontent.com/18205362/56940966-08bc0a00-6b44-11e9-9bd1-b26a4dd0aacd.png)

![image](https://user-images.githubusercontent.com/18205362/56940978-1ffaf780-6b44-11e9-86ae-0adecd050dab.png)

Maybe all the icons of circle shape have this problem:

![image](https://user-images.githubusercontent.com/18205362/56941104-cfd06500-6b44-11e9-9e51-1acbb72be975.png)

![image](https://user-images.githubusercontent.com/18205362/56941128-f4c4d800-6b44-11e9-96bc-84962a2dcbd1.png)


I'm not sure if there is something wrong with my eyes ðŸ¤£ 

Currently, it kinda work, but only if it is synced-based lerna monorepo.
The thing is that I think we can support independent-versioned monorepo badges too.

For example, you have monorepo that has few packages that are with different versions, and so you have release/tags for each package and here "latest release" isn't the right fit.

The endpoint probably can be

- `/release/:org/:repo/<packageName>`
- `/release/:org/:repo/<packageName>/v1.2.3`
- `/release/:org/:repo/<packageName>/latest`
- `/release/:org/:repo/<packageName>/canary`
- `/release/:org/:repo/<packageName>/next`

It also should support other than `packages/` folder. That's the common case, but there are cases where you must have more workspaces, and you can't put it to `packages/` (some doing it, but there are limitations to this).
Or we can support `/release/:org/:repo/<packagesDir>/<packageName>` too, e.g. `/release/tunnckoCore/monorepo/@tunnckoCore/git-semver-tags` - `@tunnckoCore` is a directory in the monorepo, same as `packages` one.

Something like `/release/remarkjs/remark/remark-parse` for https://github.com/remarkjs/remark/releases/tag/remark-parse@6.0.3

![](https://badgen.net/badge/release/remark-parse@6.0.3/blue)

Or in my case it would be `/release/tunnckoCore/monorepo/parse-commit-message`.
There are many badge styles. Custom style builder would allow us to create even more beautiful badges :)
microbadger.com shows the size, number of layers, and version of a docker image.

![image](https://user-images.githubusercontent.com/229881/47654968-61452700-db62-11e8-8d3a-5859b22dd832.png)


It would be nice if badgen could support this service (I am not sure if an API is available).

https://images.microbadger.com/badges/image/node.svg
https://images.microbadger.com/badges/image/elasticsearch:2.3.1.svg
https://images.microbadger.com/badges/image/mhart/alpine-node:base-10.12.0.svg

