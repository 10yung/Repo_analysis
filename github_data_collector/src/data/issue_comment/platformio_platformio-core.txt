```
pio platform install some-platform --with-all-packages
```

It should install ALL required dependencies (toolchains, frameworks, upload and debug tools).
BUG:

Platform IO Remote: OSX 10.15.2

When trying to connect to a remote target after upload the following error occurs:

Starting Serial Monitor on mini.local:/dev/cu.usbmodemFA1301
b'dictionary changed size during iteration'

Terminal will be reused by tasks, press any key to close it.

Closing and and trying again will then work.




Hi All,

P32-Series is based on ESP32 with C1RM NB-IoT/GSM chipset from Cavli Wireless. ESP32 is already supported in PlatformIO, but from P32 board, we get NB-IoT libraries for easy development and it also has eSIM management onboard. Please see [P32-C1RM](https://www.cavliwireless.com/iot-modules/compute-modules/) and its datasheet [here](https://www.cavliwireless.com/wp-content/uploads/2019/11/Cavli_P32C1RM_EVK-Hardware-Manual.pdf).

We will be happy send out samples for development.

Thanks.
What kind of issue is this?

- [X] **PlatformIO Core**.
      If you’ve found a bug, please provide an information below.

------------------------------------------------------------------

### Configuration

**Operating system**:

PlatformIO, version 4.1.0

### Description of problem

Tests does not output to serial port as expected on mbed os.

#### Steps to Reproduce

Create a embedded test with mbed os using the UNITY framework provided by platformio

### Actual Results

The test compile and runs on the board but does not output anything on serial port

### Expected Results

The test compile and runs on the board and output the results on the serial port

### If problems with PlatformIO Build System:

**The content of `platformio.ini`:**
```ini
[env:disco_f407vg]
framework = mbed
platform = ststm32
board = disco_f407vg
build_flags = -DPIO_FRAMEWORK_MBED_RTOS_PRESENT -std=gnu++11
build_unflags = -std=gnu++98
test_transport = custom
```

**Source file to reproduce issue:**
```cpp
#ifdef PIO_FRAMEWORK_MBED_RTOS_PRESENT
#include "mbed.h"
#endif

#include "unity.h"

void test_function_calculator_addition(void) {
  TEST_ASSERT_EQUAL(32, 32);
}

void test_function_calculator_subtraction(void) {
  TEST_ASSERT_EQUAL(20, 20);
}

void test_function_calculator_multiplication(void) {
  TEST_ASSERT_EQUAL(50, 50);
}

void test_function_calculator_division(void) {
  TEST_ASSERT_EQUAL(32, 32);
}

int main(int argc, char **argv) {
  #ifdef PIO_FRAMEWORK_MBED_RTOS_PRESENT
  wait(5);     // for ARM mbed framework
  #endif
  UNITY_BEGIN();
  RUN_TEST(test_function_calculator_addition);
  RUN_TEST(test_function_calculator_subtraction);
  RUN_TEST(test_function_calculator_multiplication);
  RUN_TEST(test_function_calculator_division);
  UNITY_END();
}
```

### Additional info

I was able to fix this issue by creating a .mbedignore on the mbed folder for the unity framework (features/framework/unity). 

When I include the unity.h file, the one that is included is from the mbed framework when I do not ignore it, so the modifications done by platformio to the macros variables that allow me to print to the serial port are not used.
What kind of issue is this?

- [true] **Question**.
      This issue tracker is not the place for questions. If you want to ask how to do something,
      or to understand why something isn't working the way you expect it to, 
      use [Community Forums](https://community.platformio.org) or [Premium Support](https://platformio.org/support)

- [ ] **PlatformIO IDE**.
      All issues related to PlatformIO IDE should be reported to appropriate repository:
      [PlatformIO IDE for Atom](https://github.com/platformio/platformio-atom-ide/issues) or
      [PlatformIO IDE for VSCode](https://github.com/platformio/platformio-vscode-ide/issues)

- [ ] **Development Platform or Board**.
      All issues (building, uploading, adding new boards, etc.) related to PlatformIO development platforms
      should be reported to appropriate repository related to your hardware
      https://github.com/topics/platformio-platform

- [ ] **Feature Request**.
      Start by telling us what problem you’re trying to solve. Often a solution
      already exists! Don’t send pull requests to implement new features without first getting our
      support. Sometimes we leave features out on purpose to keep the project small.

- [ ] **PlatformIO Core**.
      If you’ve found a bug, please provide an information below.


*You can erase any parts of this template not applicable to your Issue.*

------------------------------------------------------------------

### Configuration

**Operating system**:
WIndows10 1903
**PlatformIO Version** (`platformio --version`):
4.1.0
### Description of problem
I have a time counter.
It use an uint64_t.
By the time it exceeds 10^10,it change to about 5.6*10^9.

### If problems with PlatformIO Build System:

**The content of `platformio.ini`:**
```ini
> [env:esp12e]
> platform = espressif8266
> board = esp12e
> framework = arduino
> monitor_speed= 74880
> upload_speed = 921600
```

**Source file to reproduce issue:**
```cpp
It's ouput code.
>   rtcTimer.refresh();
>   uint64_t currentTime = rtcTimer.getStandTime();
>   Serial.printf("%llu: ", currentTime);
>   Serial.printf("Time in %llu min %llu s.\n",
>                 currentTime / 1000 / 1000 / 60, currentTime / 1000 / 1000 % 60);
>   delay(1000);
```

# Feature Request

Hi, we have developed several RISC-V processors called [Nuclei](https://translate.google.com/translate?sl=auto&tl=en&u=https://nucleisys.com/), covering from low-end to high-end use cases.

We have supported three boards:
* HummingBird FPGA evaluation board which will run Nuclei N/NX processor FPGA bitstream file
* Nuclei RV-Star Evaluation Board
* GD32VF103V Evaluation Board which this MCU on board is based on our Nuclei RISC-V Processor Core

Our support for Nuclei Platform currently is using our [Nuclei Embedded Software Development Kit](https://github.com/Nuclei-Software/nuclei-sdk), and you can find our support repo here: https://github.com/Nuclei-Software/platform-nuclei.

Currently, our software development tools are kept in github release here: https://github.com/Nuclei-Software/platform-nuclei/releases/tag/nuclei_tools_v0.1.0-alpha.

I think we still missing the following tasks need to be done:
* [ ] Add information about `nuclei` platform and boards to main documentation
* [ ] Add information about `nuclei` platform and boards to PlatformIO Web Site

# Questions
And during the support, I also found that debugging in VSCode is slower than debugging in GNU MCU Eclipse with RISC-V support, even we are using the same openocd and riscv-gdb tool, and also open all the windows like registers, call stacks, peripherals, variables, etc, VSCode is much slower than Eclipse, do you have any experiences in these?

I also found that in these line of code:
https://github.com/platformio/platformio-core/blob/develop/platformio/commands/debug/server.py#L73-L75
~~~py
            args.extend(
                ["-c", "gdb_port pipe; tcl_port disabled; telnet_port disabled"]
            )
~~~
In openocd manual, it suggest to write the openocd file into log file in order to ensure that the pipe is not saturated when using higher debug level outputs, I tried to modify it like this:
~~~py
            args.extend(
                ["-c", "gdb_port pipe; log_output openocd.log; tcl_port disabled; telnet_port disabled"]
            )
~~~
Then the debug server connection speed and download speed will be faster than before, if you use load command, with previous version, the download speed will be 1 KB/s, but after my modification, it will be 7KB/s.
* Download Speed Before
![Download Speed Before](https://user-images.githubusercontent.com/1538922/72396954-52ec2680-3779-11ea-8c49-4e1feb4aadb7.png)

* Download Speed Now 
![Download Speed Now](https://user-images.githubusercontent.com/1538922/72397036-87f87900-3779-11ea-8d1e-79bf228f2bef.png)

* Debug is really slow in VSCode, when all debug windows are clicked and opened
![vscode_debug_slow](https://user-images.githubusercontent.com/1538922/72397626-6d270400-377b-11ea-8336-1aa0b1f17fee.gif)


Thanks
Huaqi
PIO does not put the correct Arduino-compatible mcu and/or architecture defines on the command line during the build.

Any valid Arduino library that has for example #ifdef ARDUINO_ARCH_ESP32 (maybe not that specific one, but you get the picture) fails the build.  I raised this issue so long ago I can't remember when - close on 2 years probably. For that reason, I'm not going to waste any more of MY time tracking down whether its system-wide or board-specific, but it just failed again for one of my users.

It is THE single reason that a) I have not used it since then b) I argue very firmly in other support groups who claims that PIO is "Arduino-compatible" since is clearly most certainly is NOT. and c) I tell anyone who will listen to steer well clear of it until this bug is fixed and use something that actually works. 

Seriously guys, isn't it about time this got fixed? How can anybody recommend this as a serious alternative when it is russian roulette whether any 100% perfectly valid Arduino library you want to use may fail to compile?
Makes `pio test --verbose` output the same as `pio run --verbose`, showing exact shell commands that are executed.
<s>Also, `--silent` flag probably needs to be exposed too.</s>

---

In case of `native` test, what I now see instead of:
```
Linking .pio/build/test/program
```
Is this:
```
g++ -o .pio/build/test/program .pio/build/test/test/output_export.o .pio/build/test/test/my_test.o -L.pio/build/test -Wl,--start-group .pio/build/test/libUnityTestLib.a -Wl,--end-group
```
It would be nice to redefine the main.cpp file.

In **platformio-core\platformio\commands\home\rpc\handlers\project.py** there is a method (**_generate_project_main()**) to generate de default main.cpp.

I have a custom framework and I would like to create a default main.cpp.

Is it possible ?
Allow dumping of runtime configuration to JSON
```
pio project config --json-output
```

> python -c "from platformio.project.config import ProjectConfig; print(ProjectConfig().to_json())"