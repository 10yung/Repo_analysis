Version 2.0.0 of node-redis introduces breaking changes (see NodeRedis/node_redis#874). Until these changes are addressed, use version 1.0.0 of the client library.

Hello,

my application crashes when Redis is/becomes unavailable and I'm not sure how to handle this. Should I be catching an exception somewhere ?

Thank you.

While trying to test PRs I ran into this  [issue](https://github.com/mranney/node_redis/issues/651).  Need to have a default set of options, which should work with both older version as well as future proof coffee-resque.

Thanks for this awesome module!

One of the things that ruby-resque does at boot is inspect the list of workers redis has, and check if any of them used to run on `this` server, and check if they are still running.  This is important for knowing the status of your ecosystem (and allowing the resque web interface to continue to make sense)

In our projects, we use the following methods to clean up pids at boot:

``` javascript
var os = require("os");
var exec = require('child_process').exec;

var pidCleanup = function(worker, callback){
  var self = this;
  var hostname = worker.name;
  var redis = worker.redis;
  self.getPids('node', function(error, matchedPids){
    var hostKey = "resque:worker:" + hostName + "*"; 
    redis.keys(hostKey, function(err, keys){
      if(keys.length == 0){ 
        callback(); 
      }else{
        var started = 0;
        keys.forEach(function(key){
          started++;
          var pid = parseInt(key.split(":")[3]);
          var queues = key.split(":")[4];
          if(matchedPids.indexOf(pid) >= 0){
            // pid is still running,
            process.nextTick(function(){
              started--;
              if(started == 0){ callback(); }
            })
          }else{
            // pid has crashed or been stopped
            console.log("removing previously stopped worker pid from resque: " + pid);
            redis.del(key, function(){
              var setEntry = hostName + ":" + pid + ":" + queues;
              redis.srem(setEntry, function(){
                started--;
                if(started == 0){ callback(); }
              });
            });
          }
        });
        }
    });
  });
};

var getPids = function(matcher, callback){
  // It's important here to ALSO look for what normal resque would run `grep resque`
  var grepString = 'ps awx | grep "' + String(matcher) + '\\|resque" | grep -v grep';
  var child = exec(grepString, function(error, stdout, stderr){
    var pids = [];
    stdout.split("\n").forEach(function(line){
      line = line.trim();
      if(line.length > 0){
        var pid = parseInt(line.split(' ')[0]);
        pids.push(pid);
      }
    });
    callback(error, pids);
  });
},

///////////////////
// Boot Sequence //
///////////////////

var worker = require('coffee-resque').connect().worker(queues, processor);
worker.name = os.hostname(); // an important override to match ruby-redis!

worker.pidCleanup(worker, function(){
  callback();
});
```

As the title describes, kinda new to redis and resque and would like to know more on how I can use this. Looking for alternative to replace AWS SQS + Node.js

Cheers :)

Hey,
Thanks for coffee-resque, it's awesome.
I'm having a question though : is the changing of the process title mandatory ?
It is causing me problems on heroku: since the process title has changed, I cannot catch signals (like SIGTERM) sent to it :(
If I don't call worker.start() I have no issue catching the signal, I guess it's because as long as the worker has not started, the process title is not modified.
