Hi

I have created a card for your framework here 
https://alternativeto.net/software/bs-framework/

You can change any information there 
The IMGUI plugin demo fails the compilation on Windows 10, AMD64, VS 2019. The error is:
```
[ 98%] Building CXX object _deps/imgui-build/CMakeFiles/bsfImgui.dir/Src/BsImguiDemo.cpp.obj
BsImguiDemo.cpp
_deps\imgui-src\Src\BsImgui.h(49): error C2555: 'bs::ct::ImguiRendererExtension::check': overriding virtual function return type differs and is not covariant from 'bs::RendererExtension::check'
Source\Foundation\bsfCore\Renderer\BsRendererExtension.h(114): note: see declaration of 'bs::RendererExtension::check'
_deps\imgui-src\Src\BsImgui.h(51): error C3668: 'bs::ct::ImguiRendererExtension::render': method with override specifier 'override' did not override any base class methods
```
I have not checked whether this fails compilation on any other platforms.
Memory is allocated but never freed
[WARNING] WARNING: [Validation] Code 0:  [ UNASSIGNED-CoreValidation-Shader-OutputNotConsumed ] Object: 0x377 (Type = 15) | fragment shader writes to output location 0 with no matching attachment

		 in unsigned int __cdecl bs::ct::debugMsgCallback(unsigned int,enum VkDebugReportObjectTypeEXT,unsigned __int64,unsigned __int64,int,const char *,const char *,void *) [C:\dev\bsf\Source\Plugins\bsfVulkanRenderAPI\BsVulkanRenderAPI.cpp:85]

[FATAL] A fatal error occurred and the program has to terminate!
  - Error: RenderingAPIException
  - Description: ERROR: [Validation] Code 0:  [ UNASSIGNED-CoreValidation-DrawState-InvalidQuery ] Object: 0x2d7 (Type = 12) | vkGetQueryPoolResults() on VkQueryPool 0x2d7[] and query 1: query may return no data

  - In function: unsigned int __cdecl bs::ct::debugMsgCallback(unsigned int,enum VkDebugReportObjectTypeEXT,unsigned __int64,unsigned __int64,int,const char *,const char *,void *)
  - In file: C:\dev\bsf\Source\Plugins\bsfVulkanRenderAPI\BsVulkanRenderAPI.cpp:83

Stack trace: 
bs::CrashHandler::reportCrash() - 0x140710815611302 File[BsWin32CrashHandler.cpp:482 (0)] Module[bsf.dll]
bs::ct::debugMsgCallback() - 0x140711005905877 File[BsVulkanRenderAPI.cpp:83 (156)] Module[bsfVulkanRenderAPI.dll]
debug_log_msg() - 0x140710779131465 File[vk_layer_logging.h:484 (67)] Module[VkLayer_khronos_validation.dll]
log_msg() - 0x140710779178682 File[vk_layer_logging.h:1011 (74)] Module[VkLayer_khronos_validation.dll]
CoreChecks::PreCallValidateGetQueryPoolResults() - 0x140710778809024 File[core_validation.cpp:4023 (247)] Module[VkLayer_khronos_validation.dll]
vulkan_layer_chassis::GetQueryPoolResults() - 0x140710777800935 File[chassis.cpp:1885 (69)] Module[VkLayer_khronos_validation.dll]
0x140712054745304 Module[vulkan-1.dll]
bs::ct::VulkanQuery::getResult() - 0x140711007180332 File[BsVulkanQueryManager.cpp:201 (81)] Module[bsfVulkanRenderAPI.dll]
bs::ct::VulkanTimerQuery::isReady() - 0x140711005653252 File[BsVulkanTimerQuery.cpp:125 (41)] Module[bsfVulkanRenderAPI.dll]
bs::ct::QueryManager::_update() - 0x140710826592770 File[BsQueryManager.cpp:49 (48)] Module[bsf.dll]
std::_Invoker_pmf_pointer::_Call<void (__cdecl bs::ct::QueryManager::*)(void),bs::ct::QueryManager * &>() - 0x140710824574724 File[type_traits:1457 (68)] Module[bsf.dll]
std::invoke<void (__cdecl bs::ct::QueryManager::*&)(void),bs::ct::QueryManager * &>() - 0x140710824597072 File[type_traits:1457 (96)] Module[bsf.dll]
std::_Invoker_ret<std::_Unforced,0>::_Call<void (__cdecl bs::ct::QueryManager::*&)(void),bs::ct::QueryManager * &>() - 0x140710824573776 File[type_traits:1493 (0)] Module[bsf.dll]
std::_Call_binder<std::_Unforced,0,void (__cdecl bs::ct::QueryManager::*)(void),std::tuple<bs::ct::QueryManager *>,std::tuple<> >() - 0x140710824575175 File[functional:1486 (0)] Module[bsf.dll]
std::_Binder<std::_Unforced,void (__cdecl bs::ct::QueryManager::*)(void),bs::ct::QueryManager *>::operator()<>() - 0x140710824571642 File[functional:1531 (138)] Module[bsf.dll]
std::_Invoker_functor::_Call<std::_Binder<std::_Unforced,void (__cdecl bs::ct::QueryManager::*)(void),bs::ct::QueryManager *> &>() - 0x140710824574222 File[type_traits:1457 (62)] Module[bsf.dll]
std::invoke<std::_Binder<std::_Unforced,void (__cdecl bs::ct::QueryManager::*)(void),bs::ct::QueryManager *> &>() - 0x140710824597422 File[type_traits:1457 (62)] Module[bsf.dll]
std::_Invoker_ret<void,1>::_Call<std::_Binder<std::_Unforced,void (__cdecl bs::ct::QueryManager::*)(void),bs::ct::QueryManager *> &>() - 0x140710824574318 File[type_traits:1476 (0)] Module[bsf.dll]
std::_Func_impl_no_alloc<std::_Binder<std::_Unforced,void (__cdecl bs::ct::QueryManager::*)(void),bs::ct::QueryManager *>,void>::_Do_call() - 0x140710824644621 File[functional:1007 (0)] Module[bsf.dll]
std::_Func_class<void>::operator()() - 0x140710813659584 File[functional:1050 (0)] Module[bsf.dll]
bs::CommandQueueBase::playbackWithNotify() - 0x140710816199538 File[BsCommandQueue.cpp:129 (0)] Module[bsf.dll]
bs::CoreThread::runCoreThread() - 0x140710816517497 File[BsCoreThread.cpp:141 (0)] Module[bsf.dll]
std::_Invoker_pmf_pointer::_Call<void (__cdecl bs::CoreThread::*)(void),bs::CoreThread * &>() - 0x140710816434580 File[type_traits:1457 (68)] Module[bsf.dll]
std::invoke<void (__cdecl bs::CoreThread::*&)(void),bs::CoreThread * &>() - 0x140710816451728 File[type_traits:1457 (96)] Module[bsf.dll]
std::_Invoker_ret<std::_Unforced,0>::_Call<void (__cdecl bs::CoreThread::*&)(void),bs::CoreThread * &>() - 0x140710816432928 File[type_traits:1493 (0)] Module[bsf.dll]
std::_Call_binder<std::_Unforced,0,void (__cdecl bs::CoreThread::*)(void),std::tuple<bs::CoreThread *>,std::tuple<> >() - 0x140710816435255 File[functional:1486 (0)] Module[bsf.dll]
std::_Binder<std::_Unforced,void (__cdecl bs::CoreThread::*)(void),bs::CoreThread *>::operator()<>() - 0x140710816431722 File[functional:1531 (138)] Module[bsf.dll]
std::_Invoker_functor::_Call<std::_Binder<std::_Unforced,void (__cdecl bs::CoreThread::*)(void),bs::CoreThread *> &>() - 0x140710816434094 File[type_traits:1457 (62)] Module[bsf.dll]
std::invoke<std::_Binder<std::_Unforced,void (__cdecl bs::CoreThread::*)(void),bs::CoreThread *> &>() - 0x140710816452366 File[type_traits:1457 (62)] Module[bsf.dll]
std::_Invoker_ret<void,1>::_Call<std::_Binder<std::_Unforced,void (__cdecl bs::CoreThread::*)(void),bs::CoreThread *> &>() - 0x140710816434190 File[type_traits:1476 (0)] Module[bsf.dll]
std::_Func_impl_no_alloc<std::_Binder<std::_Unforced,void (__cdecl bs::CoreThread::*)(void),bs::CoreThread *>,void>::_Do_call() - 0x140710816495549 File[functional:1007 (0)] Module[bsf.dll]
std::_Func_class<void>::operator()() - 0x140710813659584 File[functional:1050 (0)] Module[bsf.dll]
bs::PooledThread::runFunctionHelper() - 0x140710814065563 File[BsThreadPool.cpp:135 (12)] Module[bsf.dll]
bs::PooledThread::run() - 0x140710814064910 File[BsThreadPool.cpp:119 (0)] Module[bsf.dll]
std::_Invoker_pmf_pointer::_Call<void (__cdecl bs::PooledThread::*)(void),bs::PooledThread * &>() - 0x140710814040516 File[type_traits:1457 (68)] Module[bsf.dll]
std::invoke<void (__cdecl bs::PooledThread::*&)(void),bs::PooledThread * &>() - 0x140710814049136 File[type_traits:1457 (96)] Module[bsf.dll]
std::_Invoker_ret<std::_Unforced,0>::_Call<void (__cdecl bs::PooledThread::*&)(void),bs::PooledThread * &>() - 0x140710814040400 File[type_traits:1493 (0)] Module[bsf.dll]
std::_Call_binder<std::_Unforced,0,void (__cdecl bs::PooledThread::*)(void),std::tuple<bs::PooledThread *>,std::tuple<> >() - 0x140710814040775 File[functional:1486 (0)] Module[bsf.dll]
std::_Binder<std::_Unforced,void (__cdecl bs::PooledThread::*)(void),bs::PooledThread *>::operator()<>() - 0x140710814040154 File[functional:1531 (138)] Module[bsf.dll]
std::_Invoker_functor::_Call<std::_Binder<std::_Unforced,void (__cdecl bs::PooledThread::*)(void),bs::PooledThread *> >() - 0x140710814040622 File[type_traits:1457 (62)] Module[bsf.dll]
std::invoke<std::_Binder<std::_Unforced,void (__cdecl bs::PooledThread::*)(void),bs::PooledThread *> >() - 0x140710814049246 File[type_traits:1457 (62)] Module[bsf.dll]
std::thread::_Invoke<std::tuple<std::_Binder<std::_Unforced,void (__cdecl bs::PooledThread::*)(void),bs::PooledThread *> >,0>() - 0x140710814044576 File[thread:40 (0)] Module[bsf.dll]
0x140712056869932 Module[ucrtbased.dll]
0x140712771156948 Module[KERNEL32.DLL]
0x140712792346321 Module[ntdll.dll]

I'd like to have an option on the bs::Camera to automatically set the aspect ratio based on where it is rendering. Ogre had an option to enable auto aspect ratio, but bsf doesn't seem to have it (the samples also manually set the aspect ratio). This requires extra work when the game window is resized, which I'd like for bsf to handle automatically.
Is there a way to enable GL_VERTEX_PROGRAM_POINT_SIZE within the opengl renderer? 
I've encountered this problem when working on the `VertexDataDecl` PR, when the `VertexDataDecl` was used in some places that caused the serialized structure layout to change in `GpuProgramBytecode`. I can force it to work by reverting a few changes around there, but I think that this problem can make any future changes to serialized shader asset layout quite painful? Below is the analysis of the issue:

The import tool cannot be started if the compiled shader assets are missing. Even if we want to create compiled shader assets :smile:

This is caused by the following reduced chain of calls:
* Running `bsfImportTool` on `"IrradianceComputeSH.bsl"` executes:
* `Application::startUp` which calls
* `RenderBeast::initializeCore` which calls
* `RenderBeastIBLUtility::filterCubemapForIrradiance` which requires that `BuiltinResources::getShader` returned a proper shader for `"IrradianceComputeSH.bsl"` 
* and that requires the asset to already exist.

This looks very much like a bootstrap problem encountered when a compiler is written in a language it's meant to compile.


This is mostly a proposal and a call for help from D3D11 and Vulkan gurus out there.

What is missing:
- Vulkan support
- D3D11 support
- Optional written-area-within-target checks.
I currently help out at REGoth, a game engine reimplementation which uses bsf. Recently, a Manjaro user reported, that he gets segmentation faults when he compiles and runs this engine.

Today, I set up a virtual machine with Manjaro (all updates applied and using Linux 5.2) and installed REGoth, and was able to reproduce these segmentation faults.

Here is the logfile together with a backtrace from gdb: https://pastebin.com/QND696m0

The backtrace shows, that the segmentation fault seems to origin from some bsf code, and I hereby wanted to report this issue in the hope to get this resolved.

If you need more information to debug this, please let me know.
Publication notes.
http://phildec.users.sourceforge.net/Research/Forest.php
https://proland.inrialpes.fr/trees3D.html

I've got proland working locally linux opengl. needs to be translated to bsl shaders:

![Screenshot from 2019-07-18 23-21-03](https://user-images.githubusercontent.com/3332598/61598201-817cb080-abdf-11e9-89c8-e934cd0ac1a0.png)


somewhat relevant to the official terrain issue https://github.com/GameFoundry/bsf/issues/16