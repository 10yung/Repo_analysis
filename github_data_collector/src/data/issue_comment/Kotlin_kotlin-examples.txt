Trying this:
import java.io.IOException
import javax.servlet.*
import javax.servlet.annotation.WebFilter

/**
 *
 */
@WebFilter(urlPatterns = ["/*"])
class SimpleServletFilter(private var filterConfig: FilterConfig) : Filter {

    @Throws(ServletException::class)
    override fun init(filterConfig: FilterConfig) {
        print("init called..")
        this.filterConfig = filterConfig;
    }

    @Throws(IOException::class, ServletException::class)
    override fun doFilter(
        request: ServletRequest, response: ServletResponse,
        filterChain: FilterChain
    ) {
        println("here..")
    }

    override fun destroy() {}
}

but the request does not pass through the filter.

Also tried:

```
import javax.ws.rs.container.ContainerRequestContext
import javax.ws.rs.container.ContainerResponseContext
import javax.ws.rs.container.ContainerResponseFilter
import javax.ws.rs.ext.Provider


@Provider
class CORSFilter : ContainerResponseFilter {
    override fun filter(requestContext: ContainerRequestContext?, responseContext: ContainerResponseContext?) {
        responseContext!!.headers.add("Access-Control-Allow-Origin", "*")
        responseContext.headers.add("Access-Control-Allow-Headers", "origin, content-type, accept, authorization")
        responseContext.headers.add("Access-Control-Allow-Credentials", "true")
        responseContext.headers.add("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS, HEAD")
        responseContext.headers.add("Access-Control-Max-Age", "1209600")
    }
}

```
No luck there.
When creating a primitive array with big size as:

`CharArray(99912345)`

It produces Exception:
`Exception in thread "main" java.lang.OutOfMemoryError: Java heap space`
Creates a new array of the specified size, with all elements initialized to null char (`\u0000').

Similar code in Java won't produce an exception:

`char[]a = new char[99912345];`

Same issue for other primitive arrays, as BooleanArray
`BooleanArray(99912345)`
Checked with Kotlin Playground
I Use APT to append annotation to a field. When I used in kotlin. It not work.
```
@Target(AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER, AnnotationTarget.CONSTRUCTOR, AnnotationTarget.FIELD)
@Retention(AnnotationRetention.SOURCE)
@MustBeDocumented
annotation class Inject(
    val value: String = ""
)
```
When It annotation on a field, I want to replace it to javax.inject.Inject.
so I extends AbstractProcessor and init context.
```
override fun init(processingEnv: ProcessingEnvironment) {
  val trees = JavacTrees.instance(processingEnv as JavacProcessingEnvironment)
}
```
It throws 
```
[ERROR] [kapt] An exception occurred: java.lang.ClassCastException: com.sun.tools.javac.processing.JavacProcessingEnvironment cannot be cast to com.sun.tools.javac.processing.JavacProcessingEnvironment
[ERROR] 	at com.meitu.rec.starter.annotation.processor.InjectProcessor.init(InjectProcessor.kt:73)
[ERROR] 	at org.jetbrains.kotlin.kapt3.base.incremental.IncrementalProcessor.init(incrementalProcessors.kt:31)
[ERROR] 	at org.jetbrains.kotlin.kapt3.base.ProcessorWrapper.init(annotationProcessing.kt:156)
[ERROR] 	at com.sun.tools.javac.processing.JavacProcessingEnvironment$ProcessorState.<init>(JavacProcessingEnvironment.java:500)
```
I don't know how to solve it.



I'm new to kotlin and maven and i'm looking for a hello world.
```
$ mvn test
...
Caused by: java.lang.ClassNotFoundException: sun.reflect.ConstructorAccessor
        at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)
        at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)
        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)
        at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)
        ... 114 more

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  4.263 s
[INFO] Finished at: 2019-10-13T18:20:56+02:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.jetbrains.kotlin:kotlin-maven-plugin:1.0.3:test-compile (test-compile) on project hello-world: Internal compiler error. See log for more details -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
```

```
✔ ~/dev/kotlin-examples/maven/hello-world [master|✔]
18:19 $ mvn exec:java
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[INFO] Scanning for projects...
[INFO]
[INFO] -------------< org.jetbrains.kotlin.examples:hello-world >--------------
[INFO] Building hello-world 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] >>> exec-maven-plugin:1.2.1:java (default-cli) > validate @ hello-world >>>
[INFO]
[INFO] <<< exec-maven-plugin:1.2.1:java (default-cli) < validate @ hello-world <<<
[INFO]
[INFO]
[INFO] --- exec-maven-plugin:1.2.1:java (default-cli) @ hello-world ---
[WARNING]
java.lang.ClassNotFoundException: hello.HelloKt
    at java.net.URLClassLoader.findClass (URLClassLoader.java:471)
    at java.lang.ClassLoader.loadClass (ClassLoader.java:588)
    at java.lang.ClassLoader.loadClass (ClassLoader.java:521)
    at org.codehaus.mojo.exec.ExecJavaMojo$1.run (ExecJavaMojo.java:285)
    at java.lang.Thread.run (Thread.java:834)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.362 s
[INFO] Finished at: 2019-10-13T18:19:08+02:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.2.1:java (default-cli) on project hello-world: An exception occured while executing the Java class. hello.HelloKt -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
```

```
 $ java --version
openjdk 11.0.4 2019-07-16
OpenJDK Runtime Environment (build 11.0.4+11-post-Ubuntu-1ubuntu218.04.3)
OpenJDK 64-Bit Server VM (build 11.0.4+11-post-Ubuntu-1ubuntu218.04.3, mixed mode, sharing)
```

Kotlin 1.3.40 saw the release of a new KotlinJS plugin, `org.jetbrains.kotlin.js`. `apply plugin: 'kotlin-dce-js'` still seems to work, but the [buildBundle](https://github.com/Kotlin/kotlin-examples/blob/64e6cf95508056d716cb024cad3d6e9cc5dda0d5/gradle/js-dce/build.gradle#L34-L36) part doesn't, as `NpmTask` doesn't exist anymore.

Can we update the example? Otherwise it's tricky to see how to properly use DCE, since it spits out a bunch of separate files.
