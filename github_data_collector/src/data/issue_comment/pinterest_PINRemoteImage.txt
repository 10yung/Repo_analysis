I'm rendering several `PINAnimatedImageView` in a `UIScrollView`. As the user scrolls, it sets `isPlaybackPaused` to `true` when shown on screen and `false` when off screen. Overall, I really like this library. The performance of my app is meaningfully better than the other two libraries I integrated before this.

There are three UX issues that I'd like to report.

#### 1. When `PINAnimatedImageView` is initially paused, it does not display the cover image

When/how is the cover image displayed?

I've noticed that whenever `isPlaybackPaused` is set to `true` before the image loads, the `coverImage` is never displayed, so the user sees an empty UIView and its sad.

Expected behavior: Even while paused, render the cover image once the image loads.

#### 2. Pausing playback makes the `PINAnimatedImageView` display nothing
Currently, when `isPlaybackPaused` is false, the `PINAnimatedImageView` displays nothing. If there's any delay between pausing and unpausing (such as, the JS bridge when using this library in a React Native app), there are brief moments of black nothingness where the most recently played frame is supposed to go.

Expected behavior: Display the last image rendered before the animation was paused (maybe not setting `frameImage` to `nil` would work?)

I spent a couple of hours investigating this today. I think the image frame is being released here:

https://github.com/pinterest/PINRemoteImage/blob/5e51b816a5c7f2ba877250f3fdf3f441cec2dc9d/Source/Classes/AnimatedImages/PINAnimatedImageView.m#L237

#### 3. `isPlaybackPaused` stops instead of pauses

`stopAnimating`, (which `isPlaybackPaused` calls) causes the `PINCachedAnimatedImage` to start over from the first frame the next time `startAnimating` is called. This appears to be a deliberate implementation detail. Is resume a thing other people care about too or is it just me?


Its quite likely that 1 and 2 are the same issue.
Apologies if this already exists, but I couldn't find a reference anywhere in the docs, and I'm unclear as to the order of ops when it comes to loading cached items vs. the placeholder images. As far as I'm aware, calling the following:

```swift
        imageView.pin_setImage(
            from: site.image,
            placeholderImage: UIImage(named: "Custom Placeholder")
        )
```

will cause the library to load the placeholder image and attempt to make a network call. If the call succeeds it will use that item, otherwise it falls back to the cache.

Is there any way to configure the `PINRemoteImageManager` or the `PINCache` to always check the cache first and load any image found there before going to the network? This would greatly reduce the number of times that my placeholder image is shown.

I can reach into the cache myself, but I figure I'd check if its natively supported before doing so.


> we estimate the size of one hundred 600x600 images as our max memory image cache.

`600pt x 600pt`

You have to multiply the scale by both width and height.
The idea behind this optimization was to reduce the number of calls the display
link would need for animated images which didn't draw every frame. But this
has resulted in frames being dropped in certain cases where frameInterval isn't
respected (see https://i.pinimg.com/originals/58/9c/e8/589ce828d2ef0797da0e85b1c6d2f2b3.gif)

Since the the display link fire method continues if we detect we're
at the same image index as before, let's just remove this optimization.
### Hi,

They could review the possibility of adding Package.swift manifest to support Swift Package Manager

```
// swift-tools-version:5.0
// The swift-tools-version declares the minimum version of Swift required to build this package.

import PackageDescription

let package = Package(
    name: "PINRemoteImage",
    products: [
        // Products define the executables and libraries produced by a package, and make them visible to other packages.
        .library(
            name: "PINRemoteImager",
            targets: ["PINRemoteImage"]),
    ],
    dependencies: [
        // Dependencies declare other packages that this package depends on.
        // .package(url: /* package url */, from: "1.0.0"),
    ],
    targets: [
        // Targets are the basic building blocks of a package. A target can define a module or a test suite.
        // Targets can depend on other targets in this package, and on products in packages which this package depends on.
        .target(
            name: "PINRemoteImage",
            dependencies: [],
            path: "Source"),
    ]
)
```

### it's likely they'll have to wrap some of their code in

#if canImport(UIKit)
    import UIKit

    extension UIImage {
    }
#endif




Talked in https://github.com/pinterest/PINRemoteImage/pull/509#issuecomment-510121440, we can use map to find the task instead, may more efficient and readability. 


- [x] Add Changelog.
- [x] Add test case.

Currently, our frame index search algorithm time complexity for a GIF is O(N^2), we can burst it to O(N*logN), the time saving is distinct, for the example url like below, old algorithm needs 4.8ms, but new algorithm only need 0.038ms. Saving time for main thread.

```
    // test code
    for (int i = 0; i < animatedImage.frameCount; i++) {
        [self frameIndexAtPlayHeadPosition:_durations[i]];
    }


Old: 0.0048750638961791992 s
New: 0.000038027763366699219 s
```

https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1562863518519&di=89f96479d2f9f85b01af61e281903af0&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20170110%2Fb56b87be5f174eca81f9d06116aa1968.jpg
The reason I make this PR is I have a requirement to pause the playback of gif before scroll and resume the next frame after scroll stopped to improve the scrolling performance, I already make an issue to describe, please see https://github.com/pinterest/PINRemoteImage/issues/520.
I have the requirement to improve the scroll performance when collection view has many GIFs, thus pause the playback in scrolling state and resume after scroll finished. (By setting runloop mode to default mode other than common mode)

For example, a gif has 20 frames, frame interval 16ms, collection view not scrolled, now it's playing 5th frame, and scroll started, after scroll finished, maybe 5s passed, it started to resume, and even 5s passed,  it still need to play 6th frame.

But in our implementation currently, we use absolute time(CACurrentMediaTime) to calculate which frame we should play, leads to frame skip. Another simple example, if a gif's loop count is 1(play only once), 20 frames, frame interval 16ms, after it played 1th frame, scroll started, keep runloop mode to default 3s, after that, gif would not resume any more, because elapsed time already exceed total duration of gif.

@garrettmoon Any reason why we choose absolute time to calculate frame index? seems all other third frameworks like YYImage/FLAnimatedImage... use `CADisplayLink.duration`.