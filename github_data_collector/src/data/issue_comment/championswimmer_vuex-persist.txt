
if (process.env.NODE_ENV === 'production') {
            this.storage = new exports.MockStorage();
 }
When I include the supportCircular flag, despite installing flatted, it produces this error:

JSON.parse(...).map is not a function
    at Module.parse (index.js?5bc5:24)
    at VuexPersistence.restoreState (index.ts?0e3e:202)
    at VuexPersistence.plugin (index.ts?0e3e:238)
    at eval (vuex.esm.js?2f62:352)
    at Array.forEach (<anonymous>)
    at new Store (vuex.esm.js?2f62:352)
    at eval (store.js?c0d6:23)
    at Module../src/store.js (app.js:20774)
    at __webpack_require__ (app.js:724)
    at fn (app.js:101)
Persisted JSON has been corrupted and I can't handle JSON.Parse "Unexpected end of JSON input".
Although removing data from storage will solve problem, in production I can't do that.
this version will break any and all custom async storage implementations. this should be a major or at least minor version update and not just a patch version increase!

the data type for async storage that is not localForage has been changed form being json to being the raw object.

Although this change might be good, it certainly is no patch version Update as it breaks stuff on what most people have on automatic update duty
Here's the `restoreState` function that retrieves some data from Firebase based on localStorage `wishlistId`

``` js
restoreState: async (key, storage) => {
  const snapshot = await db
    .ref(`wishlist/${storage.wishlistId}`)
    .once('value');

  const data = snapshot.val();

  console.log('restoring', data);

  return {
    wishlist: {
      ids: data.ids || [],
    },
  };
},
```

Here's the `beforeEnter` route callback.
``` js
beforeEnter: async (to, { params }, next) => {
  console.log('before restore');
  await store.restored;
  console.log('after restore');

  // ... sone additional logic

  next();
},
```

I would expect the messages to be logged in the following order:
- `before restore`
- `restoring`
- `after restore`

But the messages are logged in this order:
- `before restore`
- `after restore`
- `restoring`

---
As a result, the router redirects to a route before the state is restored. I have `asyncStorage` set to `true`
SyntaxError: missing = in const declaration

found in: dist/esm/index.js
line 26 `for (const key of Object.keys(this))`
line 122 `for (const propertyName of Object.keys(mergedState))`

I tested it on Firefox version 49 where this error causes Vue application to crash.
Replacing `const` with `let` should fix this.
While you have the reducer property, we have to list ALL parts of the state that we want to persist. In my situation of a complex store with many modules & I only need to stop 2-3 pieces of state data from being persisted it means that I have a lot of code to write for the reducer just so I can show what is to be persisted.

A much better approach (for me) would be a reducer that signifies what I  DO NOT want to persist.

Is this an easy addition?

I'm wondering if i can use this package with a single module, not with the entire nuxt store.
IDB is a more popular library than localForage, with a significantly smaller footprint.
Would you consider adding IDB support?

https://www.npmjs.com/package/idb