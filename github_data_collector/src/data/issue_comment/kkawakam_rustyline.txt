The example in the docs just uses `()`. It either needs to be extended or a different one needs to be provided. It should show how to define a custom Completer, etc.
The current implementation of [`KeyPress`](https://docs.rs/rustyline/6.0.0/src/rustyline/keys.rs.html#26) only allows Meta to take a `char` rather than another `KeyPress`, which also has a `KeyPress::Char(char)` variant, and as such it disallows multi char control sequences. On OSX if one wishes to implement Ctrl+Left or Ctrl+Right functionality for a terminal shell the equivalent is Meta+Left and Meta+Right as the prior functionality is bound to switching workspaces.

Would having it take a `KeyPress` be reasonable? I see that things like `KeyPress::ControlLeft` exist but this seems less flexible rather than allowing some command modifier taking another `KeyPress` or multiple of them. Maybe I'm missing some architectural choice as to why it is this way, but I couldn't find anything in the issues or git log that would help me figure out why and have probably overlooked something here.
In most other shells I've used cursor keys work up and down when inside the multi-line string and only switch history on the first and last lines of that input respectively. Is there a configuration that allows that in rustyline?
I want to extend multi-line functionality of the library to have different prompts for different lines, like this:
```
sql> SELECT x
...> FROM y;
```
Or this:
```
zsh> python -c '
quote> print "hello"
quote> '
```

This work two complex things:
1. Make prompt a trait rather than string and pass `dyn Prompt`
2. Break highlighting between lines

The questions are:
1. Should we move prompt logic to `Helper` because it might share a tokenizer and other things with a highlighter and other parts of `Helper` trait?
2. What is a good interface for the trait, I would go with something like:
    ```
    fn get_prompt(&self, prompt_info: PromptInfo, context: Context)
    ```
    To abstract the line number, slice, whole buffer and all other things we might add in the future. But it seems the current code prefers adding that arguments explicitly on the function signature. Is that style important?
3. And how to cope with highlighting:
   * We can try to parse all the highlighting codes, reset the highlighting at the end of a line and reinsert all of them at the start of the next line after prompt
   * We can require a highlighter to close highlight line by line

    Both have some trade-offs, I'm not sure which one to choose.

Any other hints are also appreciated.
It would be a really handy feature to add a `Cmd::Multiple(Vec<Cmd>)` enumeration for the `Cmd` enum so that multiple commands could be used in succession for a keybinding.
The readline library supports a [configuration file that initializes the library based on a user's defaults in their home director](https://www.gnu.org/software/bash/manual/html_node/Readline-Init-File.html). I'm assuming this feature is in scope for this project?
I would love to see tab  to switch between autocompleting options. something similar to what ZSH does like in this ascinema

[![asciicast](https://asciinema.org/a/00Efj9eOFHE2RThH7Um7RwkZQ.svg)](https://asciinema.org/a/00Efj9eOFHE2RThH7Um7RwkZQ)

I am not quite sure if this feature exists, but hidden somewhere, or it is not here yet.
I think it's common enough that people use `Editor<()>` that providing an easy to remember type alias for it makes sense.
Is it possible to add lines to the history and tell the history they are lines with errors so that the history hinter doesn't use them?

If this isn't possible yet, I think it'd be a helpful addition.
Make possible to return different command depending on input state.

Try to fix #269.
No breaking change but a `Cmd` enum with `Custom(Action)` entry which can return a `Cmd` looks bad...