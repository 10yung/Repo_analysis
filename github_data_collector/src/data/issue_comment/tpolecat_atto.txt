Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.4 to 1.3.5](https://github.com/sbt/sbt/compare/v1.3.4...v1.3.5).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.5)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: semver-patch
Updates [io.github.davidgregory084:sbt-tpolecat](https://github.com/DavidGregory084/sbt-tpolecat) [from 0.1.8 to 0.1.9](https://github.com/DavidGregory084/sbt-tpolecat/compare/v0.1.8...v0.1.9).
[Release Notes/Changelog](https://github.com/DavidGregory084/sbt-tpolecat/releases/tag/v0.1.9)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "io.github.davidgregory084", artifactId = "sbt-tpolecat" } ]
```
</details>

labels: semver-patch
Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.2 to 1.3.3](https://github.com/sbt/sbt/compare/v1.3.2...v1.3.3).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.3)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: semver-patch
All the derived specializations of `bracket` aren't actually lazy in their argument when the generated parser is finally applied to some string. This prevents me from writing mutually recursive parsers that make use of any of these specializations of `bracket` as they will promptly enter an infinite loop when asked to parse any string.

```
import atto._
import Atto._

def dummyParser: Parser[Char] = {println("activate!"); char('a')}

// Prints activate!
parens(dummyParser).parseOnly("notparentheses")

def myParens[A](p: => Parser[A]): Parser[A] =
  bracket(char('('), p, char(')')) // Notice the absence of named

// Does not print anything
myParens(dummyParser).parseOnly("notparentheses")
```
```
[info] ! Combinator.choice/1: Falsified after 90 passed tests.
[info] > ARG_0: "枇噻㷻讃"
[info] > ARG_1: ""
[info] > ARG_2: "\u0000"
[info] > ARG_2_ORIGINAL: "얐꽭ḋ廧뀎陏ၢ茁迏ἵ䝨쑥醹黜㱩隢ଧꜾ㹉᥂乬䙗⫑뼂ữ॥鈘䇏蠵ܺ漽탳蜥礵㓹䉔눎只睃绪㚱뽈ి蹈쌁쳪鶙ꝺ愛ꄒ늾ᶰ榉泆⑦캳蔅௯抡⦡喝ᥡ讔ᅄ벎ꎏ誹ᑁ涝寣㒿ɜ烞ə윕"
```
There is no termination, once the compiler starts on
`val la = many(takeWhile(c => c != 'r')).parseOnly("awe")`.
The numeric parsing methods in the JDK stubs delegate to `parseInt`, etc., in Javascript which is not as lenient as the parsers on the JVM. In particular `c.isDigit` doesn't guarantee that `Integer.parseInt` will work. See https://github.com/gemini-hlsw/gem/issues/201
I remembered that there were some useful atto tut docs, but after the microsite transition I found them a little difficult to locate and probably wouldn't have kept looking for them if I didn't know that they were there somewhere.

Currently it looks like the only real way to get to them from the site is to click on "Documentation" in the top right. For some reason I had assumed that this would take me to the API ScalaDocs, which might just be a me thing. However, I think that at a minimum it would be helpful to link to the tut docs in the readme/index body.
get test coverage up!