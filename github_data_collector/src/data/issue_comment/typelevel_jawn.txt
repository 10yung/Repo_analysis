Reflects 083ace92a951f093afb77ec129181574a9771a0a.
I think it's time for Jawn to graduate to 1.0.0.

The only pressing issue I see before that can happen is scala.js support (#38), but apart from that, there's not much activity that demands staying in the 0.x series.

Thoughts?
Hi Erik,

Very nice piece of work indeed! 

Recently i changed from play to your parser for my home brew json operator lib. Because I have quite a lot if "comments" in my json i forked your lib, and wanted to extend it so it can spit out comments or at least skip them. Due to the clarity of your code this is rather easy to do. 

I have a question about one design decision you made though. You differentiate between `parseStringSimple` and `parseStringComplex`, the only difference (from a performance point of view at least) seems to be the inspection of `\\`. The price you pay is rescanning the string when it turns out not be simple after all. Was this the sole ground for have two separate methods here, or am I missing something? Would one extra `if` statement in the scan make a big difference and not outweigh the disposal of work done? 

If not, i would integrate the methods scan regularly until the first `\\` and then, if this happens, switch to the collection into the CharBuilder. But, maybe you have already tested this and turned out to be a dead end. 
I have tried to use the `AsyncParser` but I couldn't figure out how to get anything out other than a single `jsobject` as defined by my AST (in this case Play JSON).

Assume I have something like:
```
{
  "name": "thing"
  "elements": [{
    "key": "a",
    "value": "alice"
  },{
    "key": "b",
    "value": "bob"
  },
  ...
  ]
}
```

How can I get it so that each call to `absorb` will return zero or more elements?
After the results of SLIP-28/scala contributors, the ScalaJSON AST has finally been put into the scala platform (see https://github.com/mdedetrich/scalajson for more details). Currently its a `1.0.0-M1` release however a full release is expected in a few days if there are no major issues).

This ticket is to describe integration with Jawn, and how it would possibly work. A really ideal situation would be to integrate the `scalajson.ast.unsafe.JValue` into the core Jawn parser (and I would also be interested to see the results in regards to parsing). Doing so would also automatically expose the standard safe AST to any users and would provide "automatic" interopt once the other frameworks/json libraries adopt scalaJSON.

If this doesn't work out, it can always be added as either a module (least ideal situation) or a first class type that jawn exposes. Let me know if there are any ways that I can help!
@non  when I use jawn lib, some error happens below:

> [info]   java.lang.NumberFormatException: For input string: "1493016373269"
[info]   at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
[info]   at java.lang.Integer.parseInt(Integer.java:583)
[info]   at java.lang.Integer.parseInt(Integer.java:615)
[info]   at jawn.support.json4s.Parser$$anon$1.jint(Parser.scala:15)
[info]   at jawn.support.json4s.Parser$$anon$1.jint(Parser.scala:10)
[info]   at jawn.Parser.parseNum(Parser.scala:188)
[info]   at jawn.Parser.rparse(Parser.scala:392)
[info]   at jawn.AsyncParser.churn(AsyncParser.scala:213)
[info]   at jawn.AsyncParser.finish(AsyncParser.scala:98)
[info]   at jawnstreamz.package$$anonfun$parseJson$1$$anonfun$apply$2.apply(package.scala:31)

How to fix it ?
These are currently missing
I know I can access each indexing e.g. `.get(0)` but how do I iterate over it?

```
val list = jawn.ast.JParser.parseFromString("""{"stuff": [1,2,3]}""").get
val stuff = list.get("stuff")
for (item <- stuff) println(item)
```

Not sure how applicable this is to Jawn, but should we look at using https://github.com/densh/scala-offheap to both improve the performance (but more importantly the latency/memory characteristics) of the parser?

There are some smart strategies here:

https://github.com/sirthias/benchmarks/blob/master/src/main/scala/benchmarks/json/ArrayBasedAstParser.scala

We should steal some of them.
