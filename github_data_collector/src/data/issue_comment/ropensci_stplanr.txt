Its seems that https://github.com/vlarmet/cppRouting is fast and powerful, perhaps this is how we should be doing route networks?
Some of the most useful functions in stplanr revolve around handline OD data, like `od2line()`, `od_oneway()` and `odmatrix_to_od()`. I wonder if it would be useful, based on the concept of modularity in software development, to split such functions out into a new package with minimal dependencies, e.g. called `od`. Thoughts welcome.

Heads-up @mpadge, @richardellison, @rafapereirabr, @mem48, @rCarto and anyone else watching this, feedback welcome.

Running revdep checks for current rgdal on R-Forge - see:

https://stat.ethz.ch/pipermail/r-sig-geo/2019-November/027801.html

shows the errors in the attached check log, related to use of PROJ&/GDAL3
and required changes to sp and rgdal. If useful find a regerence to a docker
image in this thread:

https://github.com/r-spatial/discuss/issues/28

Changes will occur quite fast, and packages need to be prepared.

```
* checking examples ... ERROR
Running examples in ‘stplanr-Ex.R’ failed
The error most likely occurred in:

> ### Name: buff_geo
> ### Title: Create a buffer of n metres for non-projected 'geographical'
> ###   spatial data
> ### Aliases: buff_geo
> 
> ### ** Examples
> 
> r <- routes_fast[1:3, ]
> buff <- buff_geo(r, width = 100)
Transforming to CRS +proj=aeqd +lat_0=53.82763236 +lon_0=-1.53163002 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs
Warning in spTransform(xSP, CRSobj, ...) :
  NULL source CRS comment, falling back to PROJ string
proj_create: init=epsg:/init=IGNF: syntax not supported in non-PROJ4 emulation mode
Error in .spTransform_Line(input[[i]], to_args = to_args, from_args = from_args,  : 
  source crs creation failed: (null)
Calls: buff_geo ... spTransform -> .spTransform_Lines -> .spTransform_Line
Execution halted
```

This may not be the best place to solve this, but I can imagine non overlapping buffers, that represent the area in which each line/feature is the nearest one with no overlaps, would be useful. Reproducible example plus sketch of what I'm thinking below.

``` r
# question about buffer types
library(sf)
#> Linking to GEOS 3.7.1, GDAL 2.4.2, PROJ 5.2.0
library(stplanr)
l1 = stplanr::osm_net_example[1, ]
l = stplanr::osm_net_example[l1, ]
#> although coordinates are longitude/latitude, st_intersects assumes that they are planar
lb = geo_projected(shp = l, fun = st_buffer, dist = 10)
lb_flat = geo_projected(shp = l, fun = st_buffer, dist = 10, endCapStyle = "FLAT")
plot(st_geometry(l))
plot(st_geometry(lb), col = sf.colors(nrow(l), alpha = 0.5), add = TRUE)
```

![](https://i.imgur.com/tlVHmie.png)

``` r
plot(st_geometry(l))
plot(st_geometry(lb_flat), col = sf.colors(nrow(l), alpha = 0.5), add = TRUE)
```

![](https://i.imgur.com/Sen0iMz.png)

<sup>Created on 2019-11-07 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

Very rough sketch of solution:

![image](https://user-images.githubusercontent.com/1825120/68428050-4066d700-01a3-11ea-8b67-f37844c1f670.png)

While I was experimenting with #358 I faced this error. 

``` r
library(stplanr)
library(sf)
#> Linking to GEOS 3.6.1, GDAL 2.2.3, PROJ 4.9.3

line2points(st_linestring(matrix(c(0, 0, 2, 2), ncol = 2, byrow = TRUE)))
#> Error in UseMethod("line2points"): no applicable method for 'line2points' applied to an object of class "c('XY', 'LINESTRING', 'sfg')"
st_sfc(st_linestring(matrix(c(0, 0, 2, 2), ncol = 2, byrow = TRUE))) %>% 
  line2points()
#> Error in UseMethod("line2points"): no applicable method for 'line2points' applied to an object of class "c('sfc_LINESTRING', 'sfc')"
```

<sup>Created on 2019-11-07 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

The reasons why it's happening are quite clear but I'm not sure what are the best practices. Should I create "ad-hoc" methods for `sfc`/`LINESTRING`? Should I just ignore that and let `line2points `work only on `sf `objects? 
As demonstrated below.

```r
library(stplanr)
l = osm_net_example
l$length_units = sf::st_length(l)
l$length_ = as.numeric(l$length_units)
hist(log(l$length))
l_points4 = line_midpoint(l_longest) # fails
plot(l_points4)
```
For some types of analysis on networks, very short segments are undesirable. As discussed with @agila5, it would be useful to have a function that could go in the opossite direction of `rnet_breakub_vertices()` and join short segments (to the shortest segment it touches is plan A).
Reprex of the problem

``` r
# packages
library(sf)
#> Linking to GEOS 3.6.1, GDAL 2.2.3, PROJ 4.9.3
library(stplanr)

# create some fake data
my_sfc_linestring <- st_sfc(
  st_linestring(matrix(c(1, 1, 2, 2, 3, 3), ncol = 2, byrow = TRUE))
)
my_sf_linestring <- st_as_sf(data.frame(ID = 1), geometry = my_sfc_linestring)
line2points(my_sf_linestring)
#> Simple feature collection with 2 features and 1 field
#> geometry type:  POINT
#> dimension:      XY
#> bbox:           xmin: 1 ymin: 1 xmax: 3 ymax: 3
#> epsg (SRID):    NA
#> proj4string:    NA
#>   id    geometry
#> 1  1 POINT (1 1)
#> 2  1 POINT (3 3)
colnames(my_sf_linestring)
#> [1] "ID"       "geometry"

# save data
st_write(my_sf_linestring, "my_sf_linestring.gpkg")
#> Updating layer `my_sf_linestring' to data source `my_sf_linestring.gpkg' using driver `GPKG'
#> Writing 1 features with 1 fields and geometry type Line String.

# read that same data
my_sf_linestring <- st_read("my_sf_linestring.gpkg")
#> Reading layer `my_sf_linestring' from data source `C:\Users\Utente\AppData\Local\Temp\RtmpEJviv4\reprex20fc24412f88\my_sf_linestring.gpkg' using driver `GPKG'
#> Simple feature collection with 1 feature and 1 field
#> geometry type:  LINESTRING
#> dimension:      XY
#> bbox:           xmin: 1 ymin: 1 xmax: 3 ymax: 3
#> epsg (SRID):    NA
#> proj4string:    NA
line2points(my_sf_linestring)
#> Error in x_coords[o_indices] <- sapply(l$geometry, `[[`, 1): replacement has length zero
colnames(my_sf_linestring)
#> [1] "ID"   "geom"
```

<sup>Created on 2019-11-05 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

The problem lies here I think
https://github.com/ropensci/stplanr/blob/b2fd352275632b9dcdd662332cacb207fa4937bc/R/od-funs.R#L388-L391

I can fill a PR in the next days. 
This will be very useful for road safety research using a variety of spatial network data sources, including OSM (which has a junction column, but which may not always be marked as such).

The beginnings of a solution are shown below. Note that the main problem with this solution is that it also returns start points of lines ([cul de sac](https://en.wikipedia.org/wiki/Dead_end_(street))):

``` r
library(stplanr)
# roads_key = readRDS(url("https://github.com/ropensci/stats19/releases/download/1.1.0/roads_key.Rds"))
roads_key = stplanr::osm_net_example
junctions_maybe = line2points(roads_key)
length(unique(junctions_maybe$geometry))
#> [1] 110
mapview::mapview(junctions_maybe)
```

![](https://i.imgur.com/J6LYZrO.png)

``` r
roads_key$value = 1
roads_key_rnet = overline2(roads_key, attrib = "value")
#> 2019-10-24 12:44:22 constructing segments
#> 2019-10-24 12:44:22 building geometry
#> 2019-10-24 12:44:22 simplifying geometry
#> 2019-10-24 12:44:22 aggregating flows
#> 2019-10-24 12:44:22 rejoining segments into linestrings
junctions_maybe2 = line2points(roads_key_rnet)
length(unique(junctions_maybe2$geometry))
#> [1] 104
mapview::mapview(junctions_maybe2)
```

![](https://i.imgur.com/05BsS0d.png)

<sup>Created on 2019-10-24 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
