Sometimes, we might have repeated instances in the array passed to the import and those might cause a fail while inserting, because the same value is being inserted more than once when it shouldn't be possible. This is pretty useful for upsert operations.

This PR adds a `unique_records_by` option, which if present, depending on the value, it will try to filter the passed elements for import. It also works for hashes.
I am trying to import products and save images through remote urls. Import works well, but I can't manage it to make it work work ActiveStorage images.

Is this supported in anyway? This is what I have

```
    product = Product.new(
        name: row['name'],
        sku: row['sku'],
        brand_id: row['brand']
    )
    product.image.attach(io: parsed_image_url, filename: row['sku']+ '.jpg', content_type: 'image/jpg')
    products << product
...
    importing = Product.import products, recursive: true
```
when I check the development logs, I don't see any actions for images.
Hello! Are there any plans on adding the ability to update `has_many` associations fields together with main object update with option `recursive: true` (so existing associations would be updated and new ones created)? This scenario works for the main collection, so probably it might be added for associations as well.

Example:
```Ruby
author1 = Author.create!(name: 'John Doe', country: 'SomeCountry')
author1.books.create!(name: 'Book1', pages_number: 123)

author1.country = 'Another Country'
author.books.first.pages_number = 333
author1.books.build(name: 'Book2', pages_number: 777)

# WAY-1:

Author.import [author1], recursive: true,
  on_duplicate_key_update: { 
    conflict_target: { 
      authors: :id, 
      books: :id 
    }, 
    columns: { 
      authors: [:name, :country], 
      books: [:name, :page_number] 
    },
  validate: false

# WAY-2:

Author.import [author1], recursive: true,
  on_duplicate_key_update: { 
    authors: { conflict_target: :id, columns: [:name, :country] },
    books: { conflict_target: :id, columns: [:name, :page_number] },
  validate: false
```
So at the end it should create new book `Book2` with all initialized fields and update fields `country` in `author1` and `pages_number` in `Book1`.

I guess the main problem here is an extra query to retrieve a list of existing associations IDs to know what of them to create and what to update.

Such ability would be really helpful for data syncing since now it takes 2 operations - first create missing objects, second - update existing.
Postgres has the options to insert a massive volume of data using [Copy](https://www.postgresql.org/docs/9.4/populate.html)

I think using Copy will be a great performance boost for the Gem when used via the PG adapter. Thoughts? 
https://github.com/rails/rails/pull/35077

Looks like Rails is FINALLY adding support for this (though not nearly as comprehensive as this gem). Thoughts about starting to:
1) Deprecate the gem?
2) Add additional methods that match up to the Rails API so that it's easy for people to migrate off the gem when they want to?
Hi,

I found that recursive import with hashes is not supported (https://github.com/zdennis/activerecord-import/issues/522#issuecomment-397033165) and this is ok, but it took me a little while to realize this after getting a fairly opaque error message. I think it would be an improvement if `activerecord-import` raised or warned on the combination of `recursive: true` and an array of hashes or, alternatively, if a warning about this appeared in the [hashes](https://github.com/zdennis/activerecord-import#hashes) section of the readme.

Thanks!
The `import` aliases defined by this gem prevent the `import` method from `elasticsearch-model` from being added to a project's active record models.

Why? Because with `elasticsearch-model`, you cause an `import` method to be added to your model by using an `include`. However, note that `include` will not override or replace existing methods, if they already exist, they are simply skipped.

This means that since the `import` alias from `activerecord-import` is already in place when the model file does the `include`, the elastic search's `import` is never added. https://github.com/elastic/elasticsearch-rails/blob/master/elasticsearch-model/lib/elasticsearch/model/importing.rb#L119

This cannot be solved by gem load order - the include mechanism happens when the model files are loaded, which happens after the gems.

One workaround I found was to remove the import aliases in an initializer like this:
```
# Avoid a conflict with the `elasticsearch-model` gem by removing the `import`
# aliases created by the `activerecord-import` gem
ActiveRecord::Associations::CollectionAssociation.class_eval { remove_method :import }
ActiveRecord::Associations::CollectionProxy.class_eval { remove_method :import }
class ActiveRecord::Base
  class << self
    remove_method :import
    remove_method :import!
  end
end
```

Any chance the import aliases can be removed/dropped officially, or somehow made possible to easily "opt out" of this behavior?

Thanks for the awesome library. It took me a while to find the index_predicate option for on_duplicate_key_update.  Could you add an example to the README?
I seems that `belongs_to` relation isn't proceeded by import during commit, my log shows that import inserts the only `has_one/many` relations. How can it be fixed?

A lot of people over the years have contributed to activerecord-import. This gem wouldn't be around today if it wasn't for everyone's contributions. I'm very grateful for that and I know the community has benefited from these contributions (just look at the ruby gems download numbers).

I realize that I am the biggest bottleneck for continuing to making, keeping, and extending the offering of this gem to other developers in the community. I'd like to change that. One possible way is the addition of a core team of developers who would help distribute the effort involved with maintaining and evolving `activerecord-import`.

If you're interested in this or have any thoughts on this topic in general please don't hesitate to share your thoughts. If you want to discuss anything privately feel free to email me at: zach.dennis@gmail.com

Happy coding!
