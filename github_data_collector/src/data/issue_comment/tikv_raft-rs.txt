Hi, are there any plans to upgrade prost to it's 0.6.1 version? It includes a security fix as in addition to lots of other updates. https://github.com/danburkert/prost/releases/tag/v0.6.1 

I know there are many upstream places that it's used as well in raft's toolchain, if someone could tell me where they all are I can open PRs upgrading all the specific components. I just want to make sure I get them all in one pass.
Ported to etcd: https://github.com/etcd-io/etcd/pull/11505.
I suggest add an customize quorum function hook. The hook can produce any number between [n / 2 + 1, n], where n is the number of available voters. So that we can make data safer in some cases.

/cc @siddontang @disksing @hicqu 
Add a bot to close stale issues/PRs automatically.
Signed-off-by: Fullstop000 <fullstop1005@gmail.com>

Relate to https://github.com/etcd-io/etcd/pull/11466
In `Raft::new`, we always create a `ProgressSet` with setting `next_idx` 1 in each `Progress`:
https://github.com/tikv/raft-rs/blob/f7f7d0121132ef6406b59fc774778285cd1477d6/src/raft.rs#L251-L255

In the situation where recovering the raft node, I think maybe we can just use the current `Snapshot`'s meta index as same as the implementation in `restore_raft` :
https://github.com/tikv/raft-rs/blob/f7f7d0121132ef6406b59fc774778285cd1477d6/src/raft.rs#L1984-L1987


https://github.com/tikv/raft-rs/blob/f7f7d0121132ef6406b59fc774778285cd1477d6/src/raft.rs#L565-L566
`try_batch` doesn't check the entries size after batched which might cause the overflow.
Do we need to worry about this?

@hicqu @BusyJay 
Raft doesn't requires follower reports its commit index. But aggregated them can help us find out whether a log is committed in all nodes, which is quite useful in some cases.

For example, in TiKV, when enabling hibernate regions, it's better to let all the followers to commit to latest logs before going to sleep, otherwise follower can wait for a long time before committing and applying logs, which can hurt follower reads.

It can also be used in merge too.
the Raft Paper link in the Links for Further Research part is not available. the file is not found. 
**Is your feature request related to a problem? Please describe.**
This is related to #314 - the raft-rs callbacks do not include logic to truncate logs that the Leader knows to be applied to all followers. In combination with #320 this forces full snapshot replication to be the only viable form of catching up leaders.

**Describe the solution you'd like**
The leader keeps track of the last 'good' log on all followers, it seems sensible for the leader to truncate logs that are know to be replicated and applied to all Followers. A callback in the Storage trait seems to be useful.

**Describe alternatives you've considered**
Exposing all the needed information on the leader to introspect follower indexes and commits to manually implement truncation.