Instead of manually entering in package version numbers, is it possible to use `packrat`? Maybe this can be accomplished with the `include` metadata?
When the path contains blank, the `render_docker` would fail. I suggested to add a test for blank in path. When the path contains blank, use extra quotation for the path of `Dockerfile`.

For example:

```
$docker_build_cmd
[1] "docker build --no-cache=false --rm=true  /Users/hehe/Box Sync/xcmsrocker/ISMMS"
```

This command would fail since the blank in the path would break the build and the right one should be

```
$docker_build_cmd
[1] "docker build --no-cache=false --rm=true  "/Users/hehe/Box Sync/xcmsrocker/ISMMS""
```

Also, I am curious about why you use `\" \"` for the tag and a default tag with `lastest` might be fine in most cases.

ps. I know blank in path is not cool and I have no idea why Box use such path...
We can improve the cli message interface using `cli` and `crayon`.
add support for rendering [blogdown](https://github.com/rstudio/blogdown) websites using Docker.
add support for rendering [https://github.com/yihui/xaringan](xaringan) slides using Docker.
Need a reliable way to return the version of current Docker installation.
Support docker pull and docker push (possibly docker tag and friends) within R.
https://twitter.com/_r_c_a/status/922738638756163584
http://rmarkdown.rstudio.com/lesson-13.html
Hi,

I liked your liftr package, but i needed some refining like custom templates.

As student, I often have to produce reports in french, and even if there is no mandatory template, I created mine.

So I integrated it to liftr, because I liked how it works. I think it can be a good example.

It can be seen there:

https://github.com/Bakaniko/liftr/tree/templates_usage

Features:
- all file are in one docs folder, with template folder and image folder
- all templates are loaded in /data/templates in the docker image
 - all images are loaded in /images/ in the docker image and listed in process (easier to debug)
- several parameters are available:
    - mainfont: custom main font (Linux Libertine O installed with apt by default)
    - sansfont: custom sans font (Linux Biolinum O installed with apt by default)
    - maincolor: choose main color for section title and title page ribbon
    - secondcolor: for horizontal ribbon
    - fontsize: 11pt ( show Rmarkdown option usage)
    - lang: fr ( show Rmarkdown option usage)
    - tocname: custom toc name (in France, with have 2 names depending of TOC position in the document)
- custom yml entries for title page:
    - title
    - subtitle
    - author
    - classname : project name
    - formation: diploma major
    - parcours: diploma minor
    - notesA
    - notesB 

Cons / issues:

- multiple author list don't work, needs to be on 1 line/string
- cls file needs the texlive-lang-french deb package, even for english document
- some configurations need to be done in etude.cls and etude.tex file (moving things in title page, custom LoF and LoT titles), tweaking is not easy (2 separated files, latex macros, tikz).
- Makefile needs improvements (Rscript call to build the pdf), for now it just clean the working folder 
- needs xelatex (provided by the docker image to work)

Not tested:
- include appendix or tex files
- bibliography
- other bookdown classes (epub, html, etc)

Shows some (R)markdown features:
- sectionning 
- images
- references
- footnotes
- python code execution

Custom colors

- MSBlue (M$ blue)
- MSLightBlue (lighter M$ blue)
- DarkColor( similar to DarkGrey)
- LightColor (similar to LightGrey)
- LightGrey
- DarkGrey
- BaseColor (currently set to greenish color)
- TextColor (black)
- VertDepartementGeo (greenish color from my university department)
- jaune (yellow)
- bleu (blue)
- bleuciel (skyblue)
- rstudioblue 

You can add your color in etude.tex file.

Anyway thanks for liftr, give me plenty reasons to procrastinate and an integrated Rmarkdown/latex writing workflow. I hope this will help people using and tweaking liftr.

Best,

Nicolas
The file render addin should open the pdf/html/... automatically after compilation.