fixes #225
fixes #159
According to [the documentation](https://redis.io/commands/setnx), you shouldn't use SETNX for locking and instead use the [Redlock algorithm as described here](https://redis.io/topics/distlock). Since there's already a [redlock-rb](https://github.com/antirez/redlock-rb) gem, integrating it shouldn't be too hard.
The document [here](https://github.com/nateware/redis-objects#option-1-model-class-include) says:
> Redis::Objects automatically creates keys that are unique to each object, in the format:
`model_name:id:field_name`

But if two models in different namespace have same name. The generated key will be the same.
For example:

```rb
class Group < ActiveRecord::Base
  include Redis::Objects
  counter :test_counter
end

class XXX::Group < ActiveRecord::Base
  include Redis::Objects
  counter :test_counter
end
```

```rb
Group.first.test_counter.key
# => "group:1:test_counter"

XXX::Group.first.test_counter.key
# => "group:1:test_counter"
```
When setting a value that has an expiration time, I noticed that redis-objects will first set the value, and in a separate operation set the expiration time. This is unfortunate not just for performance, but mainly because:

when setting the expiration fails (eg. due to network issues, ruby process interrupted, you name it), the value will *never* expire.

I have observed this problem in a production environment, where values would stick around forever. In our case, this was very problematic. Cache invalidation is a hard problem made easier by Redis (since it can be done atomically with [the operation that sets the value](https://redis.io/commands/set)). Unfortunately, redis-objects doesn't seem to make use of that.
First off, love this gem! I just started reviewing it this week and I believe it will finally allow unlocking more potential of our redis server that is currently just used for resque.  We can now store and retrieve data values and objects in an idiomatic manner for a ruby programmer and seamlessly integrated into our AR models, reducing unnecessary high volume of calls to the database for scanning that has been causing some deadlock nightmares.

As we start down this path it becomes evident that we need some sort of browser to do inspections of the data like we do with mysqlworkbench.  Using redis-cli is a bit slow and too narrow of a field of vision when you want to move quickly through the data.

I tried using the redis-browser gem and at first glance it seems to be a nice lightweight tree-like browser solution yet when drill into my lists objects that use `marshal: true`, they show up blank. 

Is there another solution or tool out there to visually browse redis objects that are created using the redis-objects gem and have been marshaled? Or is there some way to connect these two gems so that redis-browser knows how to unmarshal the data using redis-objects?
I have a use case where I would like to use "SETEX" call to set the key with expiration in single call. Currently I am doing this in two separate calls and if possible I would like to avoid one extra call to redis
Imagine a base class called service
```
class Service < ActiveRecord::Base
  include Redis::Objects
  lock :mylock, :expiration => 15.minutes, :timeout => 10.seconds 
end
```
And two subclasses Service 1
```
class Service1 < Service

end
```
and Service 2
```
class Service2 < Service

end
```

Now you can call
```
Service.first.mylock_lock.lock.do
   sleep 60
end
```

and when you check the redis lock object you will see a 1 instead of a timestamp. Any idea why this is not working as expected?

Thanks!



Class method `lock` defined in `Redis::Objects::Locks::ClassMethods` conflicts with `lock` in `ActiveRecord::Querying#lock`, which makes it impossible to enable ActiveRecord Pessimistic Locking by `Account.lock.find(1)`.

We can still chain the method like this `Account.wherer(id:1).lock.take`. but that is dirty and better be avoided.

This issue could be part of #153 .

when include Redis::Objects in model。activerecord's lock was override by Redis::Objects。

I have the following lock defined in a class

``` ruby
lock :service, :expiration => 15.minutes, :timeout => 20.seconds 
```

I have also tried several other variations

``` ruby
lock :service, :expiration => 15.minutes, :timeout => 20 
lock :service, { :expiration => 15.minutes, :timeout => 20.seconds }
```

for setting the lock up. However when I use the lock and I cause a collision that should block the second thread for 10-15 seconds I end up with the following error.

``` ruby
Timeout on lock service:1:service_lock exceeded 5 sec
```

It seems like it is not taking the options I am passing into the lock and just using the default.

Not that I think it matters but this is how I am grabbing the lock

``` ruby
service.service_lock.lock do
```

I am on Ruby 1.9.3p448, redis 3.0.7 and redis-objects 0.9.1.

Thanks in advance for any suggestions.
