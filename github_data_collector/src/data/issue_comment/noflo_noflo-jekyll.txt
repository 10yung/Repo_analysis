Let’s get started with automated dependency management for noflo-jekyll :muscle:

This pull request **updates all your dependencies to their latest version**. Having them all up to date really is the best starting point. I will look out for further dependency updates and make sure to handle them in isolation and in real-time, **as soon as you merge this pull request**.

## ✅ If this pull request passes and everything is still working

This is really good news. Merge this pull request and I will keep you posted about dependency updates you shouldn’t miss.

## ❌ If this pull request fails and things aren’t working

**Note: I won’t start sending you further updates, unless you have merged this very pull request**.

So, how do we proceed? I suggest you find out what dependency update is causing the problem. Adapt your code so things are working nicely together again. [next-update](https://www.npmjs.com/package/next-update) is a really handy tool to help you with this.

Push the changes to this branch and merge it.

In case you can not, or do not want to update a certain dependency right now, you can of course just [change the `package.json` file back to your liking](https://github.com/noflo/noflo-jekyll/edit/greenkeeper/update-all/package.json).

Don’t forget to push your changes to this branch, and merge this pull request, so I can start sending you further updates.


---


<details>
<summary>How to update this pull request</summary>

```bash
# change into your repository’s directory
git fetch
git checkout greenkeeper/update-all
npm install-test
# adapt your code, so it’s working again
git commit -m 'chore: adapt code to updated dependencies'
git push origin greenkeeper/update-all
```
</details>

<details>
<summary>How to ignore certain dependencies</summary>

Add a `greenkeeper.ignore` field to your `package.json`, containing a list of dependencies you don’t want to update right now.

```js
// package.json
{
  …
  "greenkeeper": {
    "ignore": [
      "package-names",
      "you-want-me-to-ignore"
    ]
  }
}
```
</details>

<details>
<summary>How the updates will look like</summary>

As soon as you merge this pull request **I’ll create a branch for every dependency update**, with the new version applied. The branch creation should trigger your testing services to check the new version. Using the results of these tests I’ll try to open meaningful and helpful pull requests and issues, so your dependencies remain working and up-to-date.

```diff
-  "underscore": "^1.6.0"
+  "underscore": "^1.7.0"
```

In the above example you can see an in-range update. `1.7.0` is included in the old `^1.6.0` range, because of the [caret `^` character ](https://docs.npmjs.com/misc/semver#ranges).
When the test services report success I’ll delete the branch again, because no action needs to be taken – everything is fine.
When there is a failure however, I’ll create an issue so you know about the problem immediately.

This way every single version update of your dependencies will either continue to work with your project, or you’ll get to know of potential problems immediately.

```diff
-  "lodash": "^3.0.0"
+  "lodash": "^4.0.0"
```

In this example the new version `4.0.0` is not included in the old `^3.0.0` range.
For version updates like these – let’s call them “out of range” updates – you’ll receive a pull request.

Now **you no longer need to check for exciting new versions by hand** – I’ll just let you know automatically.
And the pull request will not only serve as a reminder to update. In case it passes your decent test suite that’s a strong reason to merge right away :shipit:
</details>

<details>
<summary>Not sure how things are going to work exactly?</summary>

There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html) and of course you may always [ask my humans](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>


---


Good luck with your project and see you soon :sparkles:

Your [Greenkeeper](https://greenkeeper.io) Bot :palm_tree:

Several things:

* Porting tests to Mocha
* Updating dependencies to modern ones
* Updating graphs to latest spec (disambiguated in/outports, disambiguated component libs)
Followed the README directions:

```
$ node -v
v0.10.32
$ npm -v
2.1.3
$ npm install -g noflo-jekyll
[snip]
$ noflo-jekyll . _site
env: coffee: No such file or directory
```

Is there a step about installing coffee-script missing from the README?

We'd like to call noflo-jekyll via an API passing it the sources and getting back the rendered result instead of passing it source and target directory names.

Do you have example index source from external site? 
For example : http://www.cnn.com/ListOfExternalLinks.txt (This contain list of markup files and separated by carriage return ). 
Basically, the noflow will grap each of the links in ListOfExternalLinks.txt and use it as the source

I checkout this link
https://github.com/the-grid/noflo-jekyll/blob/master/test/BuildPostPath.coffee
