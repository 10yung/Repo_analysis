Hi,
For this formula,
```
(declare-fun head_fs_0 () (_ BitVec 4)) (declare-fun tail_fs_0 () (_ BitVec 4)) (declare-fun full_fs_0 () (_ BitVec 1)) (declare-fun bp () (_ BitVec 1)) (declare-fun data_out_fs_0 () (_ BitVec 32)) (declare-fun head_fq_0 () (_ BitVec 4)) (declare-fun tail_fq_0 () (_ BitVec 4)) (declare-fun bq () (_ BitVec 1)) (declare-fun empty_fq_0 () (_ BitVec 1)) (declare-fun data_out_fq_0 () (_ BitVec 32)) (declare-fun reset_0 () (_ BitVec 1)) (declare-fun a40 () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun a41 () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun enqeue_0 () (_ BitVec 1)) (declare-fun deqeue_0 () (_ BitVec 1)) (declare-fun data_in_0 () (_ BitVec 32)) (declare-fun head_fs_1 () (_ BitVec 4)) (declare-fun tail_fs_1 () (_ BitVec 4)) (declare-fun full_fs_1 () (_ BitVec 1)) (declare-fun empty_fs_1 () (_ BitVec 1)) (declare-fun data_out_fs_1 () (_ BitVec 32)) (declare-fun head_fq_1 () (_ BitVec 4)) (declare-fun tail_fq_1 () (_ BitVec 4)) (declare-fun full_fq_1 () (_ BitVec 1)) (declare-fun empty_fq_1 () (_ BitVec 1)) (declare-fun bd () (_ BitVec 32)) (declare-fun reset_1 () (_ BitVec 1)) (declare-fun af () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun a163 () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun enqeue_1 () (_ BitVec 1)) (declare-fun deqeue_1 () (_ BitVec 1)) (declare-fun data_in_1 () (_ BitVec 32)) (declare-fun head_fs_2 () (_ BitVec 4)) (declare-fun tail_fs_2 () (_ BitVec 4)) (declare-fun full_fs_2 () (_ BitVec 1)) (declare-fun bo () (_ BitVec 1)) (declare-fun data_out_fs_2 () (_ BitVec 32)) (declare-fun head_fq_2 () (_ BitVec 4)) (declare-fun tail_fq_2 () (_ BitVec 4)) (declare-fun full_fq_2 () (_ BitVec 1)) (declare-fun bh () (_ BitVec 1)) (declare-fun data_out_fq_2 () (_ BitVec 32)) (declare-fun reset_2 () (_ BitVec 1)) (declare-fun a299 () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun a303 () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun bk () (_ BitVec 1)) (declare-fun deqeue_2 () (_ BitVec 1)) (declare-fun data_in_2 () (_ BitVec 32)) (declare-fun head_fs_3 () (_ BitVec 4)) (declare-fun bl () (_ BitVec 4)) (declare-fun full_fs_3 () (_ BitVec 1)) (declare-fun br () (_ BitVec 1)) (declare-fun data_out_fs_3 () (_ BitVec 32)) (declare-fun head_fq_3 () (_ BitVec 4)) (declare-fun bs () (_ BitVec 4)) (declare-fun full_fq_3 () (_ BitVec 1)) (declare-fun empty_fq_3 () (_ BitVec 1)) (declare-fun data_out_fq_3 () (_ BitVec 32)) (declare-fun reset_3 () (_ BitVec 1)) (declare-fun a443 () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun a449 () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun bi () (_ BitVec 1)) (declare-fun deqeue_3 () (_ BitVec 1)) (declare-fun data_in_3 () (_ BitVec 32)) (declare-fun head_fs_4 () (_ BitVec 4)) (declare-fun tail_fs_4 () (_ BitVec 4)) (declare-fun full_fs_4 () (_ BitVec 1)) (declare-fun bt () (_ BitVec 1)) (declare-fun data_out_fs_4 () (_ BitVec 32)) (declare-fun head_fq_4 () (_ BitVec 4)) (declare-fun tail_fq_4 () (_ BitVec 4)) (declare-fun full_fq_4 () (_ BitVec 1)) (declare-fun empty_fq_4 () (_ BitVec 1)) (declare-fun data_out_fq_4 () (_ BitVec 32)) (declare-fun reset_4 () (_ BitVec 1)) (declare-fun a593 () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun a601 () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun enqeue_4 () (_ BitVec 1)) (declare-fun deqeue_4 () (_ BitVec 1)) (declare-fun data_in_4 () (_ BitVec 32)) (declare-fun head_fs_5 () (_ BitVec 4)) (declare-fun tail_fs_5 () (_ BitVec 4)) (declare-fun full_fs_5 () (_ BitVec 1)) (declare-fun empty_fs_5 () (_ BitVec 1)) (declare-fun data_out_fs_5 () (_ BitVec 32)) (declare-fun bn () (_ BitVec 4)) (declare-fun tail_fq_5 () (_ BitVec 4)) (declare-fun full_fq_5 () (_ BitVec 1)) (declare-fun empty_fq_5 () (_ BitVec 1)) (declare-fun data_out_fq_5 () (_ BitVec 32)) (declare-fun reset_5 () (_ BitVec 1)) (declare-fun bj () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun a759 () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun enqeue_5 () (_ BitVec 1)) (declare-fun deqeue_5 () (_ BitVec 1)) (declare-fun data_in_5 () (_ BitVec 32)) (declare-fun head_fs_6 () (_ BitVec 4)) (declare-fun tail_fs_6 () (_ BitVec 4)) (declare-fun full_fs_6 () (_ BitVec 1)) (declare-fun empty_fs_6 () (_ BitVec 1)) (declare-fun data_out_fs_6 () (_ BitVec 32)) (declare-fun be () (_ BitVec 4)) (declare-fun tail_fq_6 () (_ BitVec 4)) (declare-fun bg () (_ BitVec 1)) (declare-fun empty_fq_6 () (_ BitVec 1)) (declare-fun data_out_fq_6 () (_ BitVec 32)) (declare-fun reset_6 () (_ BitVec 1)) (declare-fun a911 () (Array (_ BitVec 4) (_ BitVec 32))) (declare-fun bm () (Array (_ BitVec 4) (_ BitVec 32))) (assert (let ((?ag (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat head_fs_0 tail_fs_0) full_fs_0) bp) data_out_fs_0) head_fq_0) tail_fq_0) bq) empty_fq_0) data_out_fq_0) reset_0)) (?a (= (_ bv1 1) full_fs_0)) (?b (= (_ bv1 1) enqeue_0)) (?ah (= (_ bv1 1) (bvand (bvnot (bvand (bvnot enqeue_0) (bvnot deqeue_0))) (bvnot (bvand enqeue_0 deqeue_0))))) (?ai (= (_ bv1 1) reset_0)) (?c (= (_ bv1 1) deqeue_0)) (?aj (bvadd (_ bv1 4) head_fq_0)) (?ak (bvadd (_ bv1 4) tail_fq_0)) (?d (= (_ bv1 1) bq)) (?al (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat head_fs_1 tail_fs_1) full_fs_1) empty_fs_1) data_out_fs_1) head_fq_1) tail_fq_1) full_fq_1) empty_fq_1) bd) reset_1)) (?t (= (_ bv1 1) full_fs_1)) (?am (= (_ bv1 1) enqeue_1)) (?u (= (_ bv1 1) (bvand (bvnot (bvand (bvnot enqeue_1) (bvnot deqeue_1))) (bvneg (bvand enqeue_1 deqeue_1))))) (?an (= (_ bv1 1) reset_1)) (?ao (= (_ bv1 1) deqeue_1)) (?ap (bvadd (_ bv1 4) head_fq_1)) (?aq (bvadd (_ bv1 4) tail_fq_1)) (?e (= (_ bv1 1) full_fq_1)) (?v (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat head_fs_2 tail_fs_2) full_fs_2) bo) data_out_fs_2) head_fq_2) tail_fq_2) full_fq_2) bh) data_out_fq_2) reset_2)) (?w (= (_ bv1 1) full_fs_2)) (?x (= (_ bv1 1) bk)) (?f (= (_ bv1 1) (bvand (bvnot (bvand (bvnot bk) (bvnot deqeue_2))) (bvnot (bvand bk deqeue_2))))) (?y (= (_ bv1 1) reset_2)) (?ar (= (_ bv1 1) deqeue_2)) (?aa (bvadd (_ bv1 4) head_fq_2)) (?as (bvadd (_ bv1 4) tail_fq_2)) (?z (= (_ bv1 1) full_fq_2)) (?bf (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat head_fs_3 bl) full_fs_3) br) data_out_fs_3) head_fq_3) bs) full_fq_3) empty_fq_3) data_out_fq_3) reset_3)) (?g (= (_ bv1 1) full_fs_3)) (?ab (= (_ bv1 1) bi)) (?at (distinct (_ bv1 1) (bvand (bvnot (bvand   bi  (bvnot deqeue_3))) (bvnot (bvand bi deqeue_3))))) (?h (= (_ bv1 1) reset_3)) (?i (= (_ bv1 1) deqeue_3)) (?j (bvadd (_ bv1 4) head_fq_3)) (?k (bvadd (_ bv1 4) bs)) (?l (= (_ bv1 1) full_fq_3)) (?au (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat head_fs_4 tail_fs_4) full_fs_4) bt) data_out_fs_4) head_fq_4) tail_fq_4) full_fq_4) empty_fq_4) data_out_fq_4) reset_4)) (?av (distinct (_ bv1 1) full_fs_4)) (?m (= (_ bv1 1) enqeue_4)) (?aw (= (_ bv1 1) (bvand (bvnot (bvand (bvnot enqeue_4) (bvnot deqeue_4))) (bvnot (bvand enqeue_4 deqeue_4))))) (?n (= (_ bv1 1) reset_4)) (?ac (= (_ bv1 1) deqeue_4)) (?o (bvadd (_ bv1 4) head_fq_4)) (?ax (bvlshr (_ bv1 4) tail_fq_4)) (?p (= (_ bv1 1) full_fq_4)) (?ay (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat head_fs_5 tail_fs_5) full_fs_5) empty_fs_5) data_out_fs_5) bn) tail_fq_5) full_fq_5) empty_fq_5) data_out_fq_5) reset_5)) (?q (= (_ bv1 1) full_fs_5)) (?ad (= (_ bv1 1) enqeue_5)) (?az (= (_ bv1 1) (bvand (bvnot (bvand (bvnot enqeue_5) (bvnot deqeue_5))) (bvnot (bvand enqeue_5 deqeue_5))))) (?ba (distinct (_ bv1 1) reset_5)) (?bb (= (_ bv1 1) deqeue_5)) (?r (bvadd (_ bv1 4) bn)) (?bc (bvadd (_ bv1 4) tail_fq_5)) (?s (= (_ bv1 1) full_fq_5)) (?ae (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat head_fs_6 tail_fs_6) full_fs_6) empty_fs_6) data_out_fs_6) be) tail_fq_6) bg) empty_fq_6) data_out_fq_6) reset_6))) (not (= (bvand reset_6 (bvand (bvnot (bvand (ite (= data_out_fs_6 data_out_fq_6) (_ bv1 1) (_ bv0 1)) (bvand (ite (distinct full_fs_6 bg) (_ bv1 1) (_ bv0 1)) (ite (= empty_fs_6 empty_fq_6) (_ bv1 1) (_ bv0 1))))) (bvand reset_6 (bvand (ite (= (ite ?ba (ite ?az (ite ?ad (ite ?s a759 (store a759 tail_fq_5 data_in_5)) a759) a759) a759) bm) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ba (ite ?az (ite (= (_ bv1 1) (bvand   empty_fq_5  deqeue_5)) (select a759 bn) data_out_fq_5) data_out_fq_5) data_out_fq_5) data_out_fq_6) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ba (ite ?az (ite ?ad (_ bv0 1) (ite (= (_ bv1 1) (ite (= tail_fq_5 ?r) (_ bv1 1) (_ bv0 1))) (_ bv1 1) empty_fq_5)) empty_fq_5) (_ bv1 1)) empty_fq_6) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ba (ite ?az (ite ?bb (_ bv0 1) (ite (= (_ bv1 1) (ite (= bn (bvadd (_ bv1 4) ?bc)) (_ bv1 1) (_ bv0 1))) (_ bv1 1) full_fq_5)) full_fq_5) (_ bv0 1)) bg) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ba (ite ?az (ite ?ad (ite ?s tail_fq_5 ?bc) tail_fq_5) tail_fq_5) (_ bv0 4)) tail_fq_6) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ba (ite ?az (ite ?bb (ite (distinct (_ bv1 1) empty_fq_5) bn ?r) bn) bn) (_ bv0 4)) be) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ba (ite ?az (ite ?ad (ite ?q bj (store bj tail_fs_5 data_in_5)) (store (store (store (store (store (store (store (store (store (store (store (store (store (store bj (_ bv0 4) (select bj (_ bv1 4))) (_ bv1 4) (select bj (_ bv2 4))) (_ bv2 4) (select bj (_ bv3 4))) (_ bv3 4) (select bj (_ bv4 4))) (_ bv4 4) (select bj (_ bv5 4))) (_ bv5 4) (select bj (_ bv6 4))) (_ bv6 4) (select bj (_ bv7 4))) (_ bv7 4) (select bj (_ bv8 4))) (_ bv8 4) (select bj (_ bv9 4))) (_ bv9 4) (select bj (_ bv10 4))) (_ bv10 4) (select bj (_ bv11 4))) (_ bv11 4) (select bj (_ bv12 4))) (_ bv12 4) (select bj (_ bv13 4))) (_ bv13 4) (select bj (_ bv14 4)))) bj) bj) a911) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ba (ite ?az (ite (= (_ bv1 1) (bvand (bvnot empty_fs_5) deqeue_5)) (select bj head_fs_5) data_out_fs_5) data_out_fs_5) data_out_fs_5) data_out_fs_6) (_ bv1 1) (_ bv0 1)) (bvand (ite (distinct (ite ?ba (ite ?az (ite ?ad (_ bv0 1) (ite (= (_ bv1 1) (ite (= (_ bv1 4) tail_fs_5) (_ bv1 1) (_ bv0 1))) (_ bv1 1) empty_fs_5)) empty_fs_5) (_ bv1 1)) empty_fs_6) (_ bv1 1) (_ bv0 1)) (bvand (ite (distinct (ite ?ba (ite ?az (ite ?bb (_ bv0 1) (ite (= (_ bv1 1) (ite (= (_ bv14 4) tail_fs_5) (_ bv1 1) (_ bv0 1))) (_ bv1 1) full_fs_5)) full_fs_5) (_ bv0 1)) full_fs_6) (_ bv1 1) (_ bv0 1)) (bvudiv (ite (= (ite ?ba (ite ?az (ite ?ad (ite ?q tail_fs_5 (bvadd (_ bv1 4) tail_fs_5)) (ite (= (_ bv1 1) empty_fs_5) tail_fs_5 (bvmul (_ bv15 4) tail_fs_5))) tail_fs_5) (_ bv0 4)) tail_fs_6) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (_ bv0 4) head_fs_6) (_ bv1 1) (_ bv0 1)) (bvand (bvnot (bvand (bvand (bvnot (bvand (bvand (bvand (bvand (bvand (bvnot (ite (= a40 a911) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= af a911) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a299 a911) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a443 a911) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a593 a911) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= bj a911) (_ bv1 1) (_ bv0 1))))) (bvneg (bvurem (bvand (bvand (bvand (bvand (bvnot (ite (= a41 bm) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= a163 bm) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a303 bm) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a449 bm) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a601 bm) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a759 bm) (_ bv1 1) (_ bv0 1)))))) (bvnot (bvand (bvand (bvashr (bvand (bvand (bvnot (ite (= ?ag ?ae) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= ?al ?ae) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= ?v ?ae) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= ?bf ?ae) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= ?au ?ae) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= ?ay ?ae) (_ bv1 1) (_ bv0 1))))))) (bvand (bvnot (bvand reset_5 (bvnot (bvsdiv (ite (= data_out_fs_5 data_out_fq_5) (_ bv1 1) (_ bv0 1)) (bvand (ite (= full_fs_5 full_fq_5) (_ bv1 1) (_ bv0 1)) (ite (= empty_fs_5 empty_fq_5) (_ bv1 1) (_ bv0 1))))))) (bvand reset_5 (bvand (ite (= (ite ?n (ite ?aw (ite ?m (ite ?p a601 (store a601 tail_fq_4 data_in_4)) a601) a601) a601) a759) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?n (ite ?aw (ite (= (_ bv1 1) (bvand (bvnot empty_fq_4) deqeue_4)) (select a601 head_fq_4) data_out_fq_4) data_out_fq_4) data_out_fq_4) data_out_fq_5) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?n (ite ?aw (ite ?m (_ bv0 1) (ite (distinct (_ bv1 1) (ite (= tail_fq_4 ?o) (_ bv1 1) (_ bv0 1))) (_ bv1 1) empty_fq_4)) empty_fq_4) (_ bv1 1)) empty_fq_5) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?n (ite ?aw (ite ?ac (_ bv0 1) (ite (= (_ bv1 1) (ite (= head_fq_4 (bvadd (_ bv1 4) ?ax)) (_ bv1 1) (_ bv0 1))) (_ bv1 1) full_fq_4)) full_fq_4) (_ bv0 1)) full_fq_5) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?n (ite ?aw (ite ?m (ite ?p tail_fq_4 ?ax) tail_fq_4) tail_fq_4) (_ bv0 4)) tail_fq_5) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?n (ite ?aw (ite ?ac (ite (= (_ bv1 1) empty_fq_4) head_fq_4 ?o) head_fq_4) head_fq_4) (_ bv0 4)) bn) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?n (ite ?aw (ite ?m (ite ?av a593 (store a593 tail_fs_4 data_in_4)) (store (store (store (store (store (store (store (store (store (store (store (store (store (store a593 (_ bv0 4) (select a593 (_ bv1 4))) (_ bv1 4) (select a593 (_ bv2 4))) (_ bv2 4) (select a593 (_ bv3 4))) (_ bv3 4) (select a593 (_ bv4 4))) (_ bv4 4) (select a593 (_ bv5 4))) (_ bv5 4) (select a593 (_ bv6 4))) (_ bv6 4) (select a593 (_ bv7 4))) (_ bv7 4) (select a593 (_ bv8 4))) (_ bv8 4) (select a593 (_ bv9 4))) (_ bv9 4) (select a593 (_ bv10 4))) (_ bv10 4) (select a593 (_ bv11 4))) (_ bv11 4) (select a593 (_ bv12 4))) (_ bv12 4) (select a593 (_ bv13 4))) (_ bv13 4) (select a593 (_ bv14 4)))) a593) a593) bj) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?n (ite ?aw (ite (= (_ bv1 1) (bvand (bvnot bt) deqeue_4)) (select a593 head_fs_4) data_out_fs_4) data_out_fs_4) data_out_fs_4) data_out_fs_5) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?n (ite ?aw (ite ?m (_ bv0 1) (ite (= (_ bv1 1) (ite (= (_ bv1 4) tail_fs_4) (_ bv1 1) (_ bv0 1))) (_ bv1 1) bt)) bt) (_ bv1 1)) empty_fs_5) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?n (ite ?aw (ite ?ac (_ bv0 1) (ite (= (_ bv1 1) (ite (= (_ bv14 4) tail_fs_4) (_ bv1 1) (_ bv0 1))) (_ bv1 1) full_fs_4)) full_fs_4) (_ bv0 1)) full_fs_5) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?n (ite ?aw (ite ?m (ite ?av tail_fs_4 (bvadd (_ bv1 4) tail_fs_4)) (ite (= (_ bv1 1) bt) tail_fs_4 (bvsdiv (_ bv15 4) tail_fs_4))) tail_fs_4) (_ bv0 4)) tail_fs_5) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (_ bv0 4) head_fs_5) (_ bv1 1) (_ bv0 1)) (bvand (bvnot (bvand (bvsub (bvnot (bvand (bvand (bvand (bvand (bvnot (ite (= a40 bj) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= af bj) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a299 bj) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a443 bj) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a593 bj) (_ bv1 1) (_ bv0 1))))) (bvnot (bvand (bvand (bvand (bvand (bvnot (ite (= a41 a759) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= a163 a759) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a303 a759) (_ bv1 1) (_ bv0 1)))) (bvneg (ite (= a449 a759) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a601 a759) (_ bv1 1) (_ bv0 1)))))) (bvnot (bvand (bvand (bvand (bvand (bvnot (ite (= ?ag ?ay) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= ?al ?ay) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= ?v ?ay) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= ?bf ?ay) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= ?au ?ay) (_ bv1 1) (_ bv0 1))))))) (bvand (bvnot (bvand reset_4 (bvnot (bvand (ite (= data_out_fs_4 data_out_fq_4) (_ bv1 1) (_ bv0 1)) (bvand (ite (= full_fs_4 full_fq_4) (_ bv1 1) (_ bv0 1)) (ite (distinct bt empty_fq_4) (_ bv1 1) (_ bv0 1))))))) (bvand reset_4 (bvand (ite (= (ite ?h (ite ?at (ite ?ab (ite ?l a449 (store a449 bs data_in_3)) a449) a449) a449) a601) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?h (ite ?at (ite (= (_ bv1 1) (bvand (bvnot empty_fq_3) deqeue_3)) (select a449 head_fq_3) data_out_fq_3) data_out_fq_3) data_out_fq_3) data_out_fq_4) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?h (ite ?at (ite ?ab (_ bv0 1) (ite (= (_ bv1 1) (ite (= bs ?j) (_ bv1 1) (_ bv0 1))) (_ bv1 1) empty_fq_3)) empty_fq_3) (_ bv1 1)) empty_fq_4) (_ bv1 1) (_ bv0 1)) (bvsmod (ite (= (ite ?h (ite ?at (ite ?i (_ bv0 1) (ite (= (_ bv1 1) (ite (= head_fq_3 (bvadd (_ bv1 4) ?k)) (_ bv1 1) (_ bv0 1))) (_ bv1 1) full_fq_3)) full_fq_3) (_ bv0 1)) full_fq_4) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?h (ite ?at (ite ?ab (ite ?l bs ?k) bs) bs) (_ bv0 4)) tail_fq_4) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?h (ite ?at (ite ?i (ite (= (_ bv1 1) empty_fq_3) head_fq_3 ?j) head_fq_3) head_fq_3) (_ bv0 4)) head_fq_4) (_ bv1 1) (_ bv0 1)) (bvnand (ite (= (ite ?h (ite ?at (ite ?ab (ite ?g a443 (store a443 bl data_in_3)) (store (store (store (store (store (store (store (store (store (store (store (store (store (store a443 (_ bv0 4) (select a443 (_ bv1 4))) (_ bv1 4) (select a443 (_ bv2 4))) (_ bv2 4) (select a443 (_ bv3 4))) (_ bv3 4) (select a443 (_ bv4 4))) (_ bv4 4) (select a443 (_ bv5 4))) (_ bv5 4) (select a443 (_ bv6 4))) (_ bv6 4) (select a443 (_ bv7 4))) (_ bv7 4) (select a443 (_ bv8 4))) (_ bv8 4) (select a443 (_ bv9 4))) (_ bv9 4) (select a443 (_ bv10 4))) (_ bv10 4) (select a443 (_ bv11 4))) (_ bv11 4) (select a443 (_ bv12 4))) (_ bv12 4) (select a443 (_ bv13 4))) (_ bv13 4) (select a443 (_ bv14 4)))) a443) a443) a593) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?h (ite ?at (ite (distinct (_ bv1 1) (bvand (bvnot br) deqeue_3)) (select a443 head_fs_3) data_out_fs_3) data_out_fs_3) data_out_fs_3) data_out_fs_4) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?h (ite ?at (ite ?ab (_ bv0 1) (ite (= (_ bv1 1) (ite (= (_ bv1 4) bl) (_ bv1 1) (_ bv0 1))) (_ bv1 1) br)) br) (_ bv1 1)) bt) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?h (ite ?at (ite ?i (_ bv0 1) (ite (= (_ bv1 1) (ite (= (_ bv14 4) bl) (_ bv1 1) (_ bv0 1))) (_ bv1 1) full_fs_3)) full_fs_3) (_ bv0 1)) full_fs_4) (_ bv1 1) (_ bv0 1)) (bvand (ite (distinct (ite ?h (ite ?at (ite ?ab (ite ?g bl (bvadd (_ bv1 4) bl)) (ite (= (_ bv1 1) br) bl (bvadd (_ bv15 4) bl))) bl) (_ bv0 4)) tail_fs_4) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (_ bv0 4) head_fs_4) (_ bv1 1) (_ bv0 1)) (bvand (bvnot (bvand (bvand (bvnot (bvand (bvsmod (bvand (bvneg (ite (= a40 a593) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= af a593) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a299 a593) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a443 a593) (_ bv1 1) (_ bv0 1))))) (bvnot (bvand (bvand (bvand (bvnot (ite (distinct a41 a601) (_ bv1 1) (_ bv0 1))) (bvnot (ite (distinct a163 a601) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a303 a601) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a449 a601) (_ bv1 1) (_ bv0 1)))))) (bvnot (bvand (bvand (bvand (bvnot (ite (= ?ag ?au) (_ bv1 1) (_ bv0 1))) (bvnot (ite (distinct ?al ?au) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= ?v ?au) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= ?bf ?au) (_ bv1 1) (_ bv0 1))))))) (bvand (bvnot (bvand reset_3 (bvnot (bvnor (ite (= data_out_fs_3 data_out_fq_3) (_ bv1 1) (_ bv0 1)) (bvand (ite (= full_fs_3 full_fq_3) (_ bv1 1) (_ bv0 1)) (ite (= br empty_fq_3) (_ bv1 1) (_ bv0 1))))))) (bvand reset_3 (bvand (ite (= (ite ?y (ite ?f (ite ?x (ite ?z a303 (store a303 tail_fq_2 data_in_2)) a303) a303) a303) a449) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?y (ite ?f (ite (= (_ bv1 1) (bvand (bvnot bh) deqeue_2)) (select a303 head_fq_2) data_out_fq_2) data_out_fq_2) data_out_fq_2) data_out_fq_3) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?y (ite ?f (ite ?x (_ bv0 1) (ite (= (_ bv1 1) (ite (= tail_fq_2 ?aa) (_ bv1 1) (_ bv0 1))) (_ bv1 1) bh)) bh) (_ bv1 1)) empty_fq_3) (_ bv1 1) (_ bv0 1)) (bvand (ite (distinct (ite ?y (ite ?f (ite ?ar (_ bv0 1) (ite (distinct (_ bv1 1) (ite (distinct head_fq_2 (bvadd (_ bv1 4) ?as)) (_ bv1 1) (_ bv0 1))) (_ bv1 1) full_fq_2)) full_fq_2) (_ bv0 1)) full_fq_3) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?y (ite ?f (ite ?x (ite ?z tail_fq_2 ?as) tail_fq_2) tail_fq_2) (_ bv0 4)) bs) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?y (ite ?f (ite ?ar (ite (= (_ bv1 1) bh) head_fq_2 ?aa) head_fq_2) head_fq_2) (_ bv0 4)) head_fq_3) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?y (ite ?f (ite ?x (ite ?w a299 (store a299 tail_fs_2 data_in_2)) (store (store (store (store (store (store (store (store (store (store (store (store (store (store a299 (_ bv0 4) (select a299 (_ bv1 4))) (_ bv1 4) (select a299 (_ bv2 4))) (_ bv2 4) (select a299 (_ bv3 4))) (_ bv3 4) (select a299 (_ bv4 4))) (_ bv4 4) (select a299 (_ bv5 4))) (_ bv5 4) (select a299 (_ bv6 4))) (_ bv6 4) (select a299 (_ bv7 4))) (_ bv7 4) (select a299 (_ bv8 4))) (_ bv8 4) (select a299 (_ bv9 4))) (_ bv9 4) (select a299 (_ bv10 4))) (_ bv10 4) (select a299 (_ bv11 4))) (_ bv11 4) (select a299 (_ bv12 4))) (_ bv12 4) (select a299 (_ bv13 4))) (_ bv13 4) (select a299 (_ bv14 4)))) a299) a299) a443) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?y (ite ?f (ite (= (_ bv1 1) (bvand (bvnot bo) deqeue_2)) (select a299 head_fs_2) data_out_fs_2) data_out_fs_2) data_out_fs_2) data_out_fs_3) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?y (ite ?f (ite ?x (_ bv0 1) (ite (= (_ bv1 1) (ite (= (_ bv1 4) tail_fs_2) (_ bv1 1) (_ bv0 1))) (_ bv1 1) bo)) bo) (_ bv1 1)) br) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?y (ite ?f (ite ?ar (_ bv0 1) (ite (distinct (_ bv1 1) (ite (= (_ bv14 4) tail_fs_2) (_ bv1 1) (_ bv0 1))) (_ bv1 1) full_fs_2)) full_fs_2) (_ bv0 1)) full_fs_3) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?y (ite ?f (ite ?x (ite ?w tail_fs_2 (bvadd (_ bv1 4) tail_fs_2)) (ite (= (_ bv1 1) bo) tail_fs_2 (bvadd (_ bv15 4) tail_fs_2))) tail_fs_2) (_ bv0 4)) bl) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (_ bv0 4) head_fs_3) (_ bv1 1) (_ bv0 1)) (bvand (bvnot (bvand (bvand (bvnot (bvand (bvand (bvnot (ite (= a40 a443) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= af a443) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a299 a443) (_ bv1 1) (_ bv0 1))))) (bvnot (bvand (bvand (bvnot (ite (= a41 a449) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= a163 a449) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (= a303 a449) (_ bv1 1) (_ bv0 1)))))) (bvnot (bvand (bvand (bvnot (ite (= ?ag ?bf) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= ?al ?bf) (_ bv1 1) (_ bv0 1)))) (bvnot (ite (distinct ?v ?bf) (_ bv1 1) (_ bv0 1))))))) (bvand (bvnot (bvmul reset_2 (bvnot (bvand (ite (distinct data_out_fs_2 data_out_fq_2) (_ bv1 1) (_ bv0 1)) (bvand (ite (= full_fs_2 full_fq_2) (_ bv1 1) (_ bv0 1)) (ite (= bo bh) (_ bv1 1) (_ bv0 1))))))) (bvand reset_2 (bvand (ite (= (ite ?an (ite ?u (ite ?am (ite ?e a163 (store a163 tail_fq_1 data_in_1)) a163) a163) a163) a303) (_ bv1 1) (_ bv0 1)) (bvudiv (ite (= (ite ?an (ite ?u (ite (= (_ bv1 1) (bvand (bvnot empty_fq_1) deqeue_1)) (select a163 head_fq_1) bd) bd) bd) data_out_fq_2) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?an (ite ?u (ite ?am (_ bv0 1) (ite (= (_ bv1 1) (ite (= tail_fq_1 ?ap) (_ bv1 1) (_ bv0 1))) (_ bv1 1) empty_fq_1)) empty_fq_1) (_ bv1 1)) bh) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?an (ite ?u (ite ?ao (_ bv0 1) (ite (= (_ bv1 1) (ite (= head_fq_1 (bvsmod (_ bv1 4) ?aq)) (_ bv1 1) (_ bv0 1))) (_ bv1 1) full_fq_1)) full_fq_1) (_ bv0 1)) full_fq_2) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?an (ite ?u (ite ?am (ite ?e tail_fq_1 ?aq) tail_fq_1) tail_fq_1) (_ bv0 4)) tail_fq_2) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?an (ite ?u (ite ?ao (ite (= (_ bv1 1) empty_fq_1) head_fq_1 ?ap) head_fq_1) head_fq_1) (_ bv0 4)) head_fq_2) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?an (ite ?u (ite ?am (ite ?t af (store af tail_fs_1 data_in_1)) (store (store (store (store (store (store (store (store (store (store (store (store (store (store af (_ bv0 4) (select af (_ bv1 4))) (_ bv1 4) (select af (_ bv2 4))) (_ bv2 4) (select af (_ bv3 4))) (_ bv3 4) (select af (_ bv4 4))) (_ bv4 4) (select af (_ bv5 4))) (_ bv5 4) (select af (_ bv6 4))) (_ bv6 4) (select af (_ bv7 4))) (_ bv7 4) (select af (_ bv8 4))) (_ bv8 4) (select af (_ bv9 4))) (_ bv9 4) (select af (_ bv10 4))) (_ bv10 4) (select af (_ bv11 4))) (_ bv11 4) (select af (_ bv12 4))) (_ bv12 4) (select af (_ bv13 4))) (_ bv13 4) (select af (_ bv14 4)))) af) af) a299) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?an (ite ?u (ite (= (_ bv1 1) (bvand (bvnot empty_fs_1) deqeue_1)) (select af head_fs_1) data_out_fs_1) data_out_fs_1) data_out_fs_1) data_out_fs_2) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?an (ite ?u (ite ?am (_ bv0 1) (ite (= (_ bv1 1) (ite (= (_ bv1 4) tail_fs_1) (_ bv1 1) (_ bv0 1))) (_ bv1 1) empty_fs_1)) empty_fs_1) (_ bv1 1)) bo) (_ bv1 1) (_ bv0 1)) (bvand (ite (distinct (ite ?an (ite ?u (ite ?ao (_ bv0 1) (ite (= (_ bv1 1) (ite (= (_ bv14 4) tail_fs_1) (_ bv1 1) (_ bv0 1))) (_ bv1 1) full_fs_1)) full_fs_1) (_ bv0 1)) full_fs_2) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?an (ite ?u (ite ?am (ite ?t tail_fs_1 (bvadd (_ bv1 4) tail_fs_1)) (ite (= (_ bv1 1) empty_fs_1) tail_fs_1 (bvadd (_ bv15 4) tail_fs_1))) tail_fs_1) (_ bv0 4)) tail_fs_2) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (_ bv0 4) head_fs_2) (_ bv1 1) (_ bv0 1)) (bvand (bvnot (bvashr (bvand (bvnot (bvand (bvnot (ite (= a40 a299) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= af a299) (_ bv1 1) (_ bv0 1))))) (bvnot (bvnor (bvnot (ite (= a41 a303) (_ bv1 1) (_ bv0 1))) (bvneg (ite (= a163 a303) (_ bv1 1) (_ bv0 1)))))) (bvnot (bvand (bvnot (ite (= ?ag ?v) (_ bv1 1) (_ bv0 1))) (bvnot (ite (= ?al ?v) (_ bv1 1) (_ bv0 1))))))) (bvand (bvnot (bvand reset_1 (bvnot (bvand (ite (= data_out_fs_1 bd) (_ bv1 1) (_ bv0 1)) (bvashr (ite (= full_fs_1 full_fq_1) (_ bv1 1) (_ bv0 1)) (ite (= empty_fs_1 empty_fq_1) (_ bv1 1) (_ bv0 1))))))) (bvand reset_1 (bvand (ite (distinct (ite ?ai (ite ?ah (ite ?b (ite ?d a41 (store a41 tail_fq_0 data_in_0)) a41) a41) a41) a163) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ai (ite ?ah (ite (= (_ bv1 1) (bvand (bvnot empty_fq_0) deqeue_0)) (select a41 head_fq_0) data_out_fq_0) data_out_fq_0) data_out_fq_0) bd) (_ bv1 1) (_ bv0 1)) (bvashr (ite (= (ite ?ai (ite ?ah (ite ?b (_ bv0 1) (ite (= (_ bv1 1) (ite (= tail_fq_0 ?aj) (_ bv1 1) (_ bv0 1))) (_ bv1 1) empty_fq_0)) empty_fq_0) (_ bv1 1)) empty_fq_1) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ai (ite ?ah (ite ?c (_ bv0 1) (ite (= (_ bv1 1) (ite (distinct head_fq_0 (bvadd (_ bv1 4) ?ak)) (_ bv1 1) (_ bv0 1))) (_ bv1 1) bq)) bq) (_ bv0 1)) full_fq_1) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ai (ite ?ah (ite ?b (ite ?d tail_fq_0 ?ak) tail_fq_0) tail_fq_0) (_ bv0 4)) tail_fq_1) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ai (ite ?ah (ite ?c (ite (= (_ bv1 1) empty_fq_0) head_fq_0 ?aj) head_fq_0) head_fq_0) (_ bv0 4)) head_fq_1) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ai (ite ?ah (ite ?b (ite ?a a40 (store a40 tail_fs_0 data_in_0)) (store (store (store (store (store (store (store (store (store (store (store (store (store (store a40 (_ bv0 4) (select a40 (_ bv1 4))) (_ bv1 4) (select a40 (_ bv2 4))) (_ bv2 4) (select a40 (_ bv3 4))) (_ bv3 4) (select a40 (_ bv4 4))) (_ bv4 4) (select a40 (_ bv5 4))) (_ bv5 4) (select a40 (_ bv6 4))) (_ bv6 4) (select a40 (_ bv7 4))) (_ bv7 4) (select a40 (_ bv8 4))) (_ bv8 4) (select a40 (_ bv9 4))) (_ bv9 4) (select a40 (_ bv10 4))) (_ bv10 4) (select a40 (_ bv11 4))) (_ bv11 4) (select a40 (_ bv12 4))) (_ bv12 4) (select a40 (_ bv13 4))) (_ bv13 4) (select a40 (_ bv14 4)))) a40) a40) af) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ai (ite ?ah (ite (= (_ bv1 1) (bvand (bvnot bp) deqeue_0)) (select a40 head_fs_0) data_out_fs_0) data_out_fs_0) data_out_fs_0) data_out_fs_1) (_ bv1 1) (_ bv0 1)) (bvand (ite (distinct (ite ?ai (ite ?ah (ite ?b (_ bv0 1) (ite (= (_ bv1 1) (ite (= (_ bv1 4) tail_fs_0) (_ bv1 1) (_ bv0 1))) (_ bv1 1) bp)) bp) (_ bv1 1)) empty_fs_1) (_ bv1 1) (_ bv0 1)) (bvxnor (ite (= (ite ?ai (ite ?ah (ite ?c (_ bv0 1) (ite (= (_ bv1 1) (ite (= (_ bv14 4) tail_fs_0) (_ bv1 1) (_ bv0 1))) (_ bv1 1) full_fs_0)) full_fs_0) (_ bv0 1)) full_fs_1) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (ite ?ai (ite ?ah (ite ?b (ite ?a tail_fs_0 (bvadd (_ bv1 4) tail_fs_0)) (ite (= (_ bv1 1) bp) tail_fs_0 (bvadd (_ bv15 4) tail_fs_0))) tail_fs_0) (_ bv0 4)) tail_fs_1) (_ bv1 1) (_ bv0 1)) (bvand (ite (= (_ bv0 4) head_fs_1) (_ bv1 1) (_ bv0 1)) (bvadd (bvneg (bvand reset_0 (bvnot (bvand (ite (= data_out_fs_0 data_out_fq_0) (_ bv1 1) (_ bv0 1)) (bvand (ite (= full_fs_0 bq) (_ bv1 1) (_ bv0 1)) (ite (= bp empty_fq_0) (_ bv1 1) (_ bv0 1))))))) (bvnot (bvand (bvand (ite (= a40 af) (_ bv1 1) (_ bv0 1)) (ite (= a41 a163) (_ bv1 1) (_ bv0 1))) (ite (= ?ag ?al) (_ bv1 1) (_ bv0 1))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (_ bv0 1))))) (check-sat)
```
z3 throws out an assertion violation:
```
ASSERTION VIOLATION
File: ../src/smt/theory_bv.cpp
Line: 1803
val1 == val2
(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB
```

OS: Ubuntu 18.04
Revision: 22f1c64
Hi,
For this formula,
```
(declare-fun a () Real)
(declare-fun b () Real)
(declare-fun c () Real)
(declare-fun d () Real)
(declare-fun f () Real)
(declare-fun g () Real)
(declare-fun h () Real)
(declare-fun vuscore2dollarskuscore () Real)
(assert
 (exists ((e Real))
  (and
   (or
    (> (/ 0 (- (+ (* g h) (* b d) (/ 6 b d)) (* (- 39 b d) vuscore2dollarskuscore))) f)
    (< vuscore2dollarskuscore (/ 0 a c)))
   (<= (/ 2 a c) h))))
(check-sat)
```
Z3 will be hundres of times faster if I change `vuscore2dollarskuscore` to `i`:
```
[760] % time z3 small.smt2
sat
real    1m47.390s
user    1m47.214s
sys     0m0.012s
[761] % time z3 small2.smt2 
sat
real    0m0.114s
user    0m0.107s
sys     0m0.004s
[762] % 
[762] % cat small.smt2
(declare-fun a () Real)
(declare-fun b () Real)
(declare-fun c () Real)
(declare-fun d () Real)
(declare-fun f () Real)
(declare-fun g () Real)
(declare-fun h () Real)
(declare-fun vuscore2dollarskuscore () Real)
(assert
 (exists ((e Real))
  (and
   (or
    (> (/ 0 (- (+ (* g h) (* b d) (/ 6 b d)) (* (- 39 b d) vuscore2dollarskuscore))) f)
    (< vuscore2dollarskuscore (/ 0 a c)))
   (<= (/ 2 a c) h))))
(check-sat)
[763] % 
[763] % cat small2.smt2 
(declare-fun a () Real)
(declare-fun b () Real)
(declare-fun c () Real)
(declare-fun d () Real)
(declare-fun f () Real)
(declare-fun g () Real)
(declare-fun h () Real)
(declare-fun i () Real)
(assert
 (exists ((e Real))
  (and
   (or
    (> (/ 0 (- (+ (* g h) (* b d) (/ 6 b d)) (* (- 39 b d) i))) f)
    (< i (/ 0 a c)))
   (<= (/ 2 a c) h))))
(check-sat)
```

OS: Ubuntu 18.04
Revision: 22f1c64
Hi,
For this formula:
```
(declare-fun a () Real)
(declare-fun b () Real)
(declare-fun c () Real)
(declare-fun d () Real)
(declare-fun ag () Real)
(declare-fun u () Real)
(declare-fun e () Real)
(declare-fun ah () Real)
(declare-fun f () Real)
(declare-fun YUNCA_new () Real)
(declare-fun EMrJi_new () Real)
(declare-fun ae () Real)
(declare-fun g () Real)
(declare-fun YSjFW_new () Real)
(declare-fun h () Real)
(declare-fun SuTDY_new () Real)
(declare-fun i () Real)
(declare-fun v1 () Real)
(declare-fun j () Real)
(declare-fun k () Real)
(declare-fun B () Real)
(declare-fun v2 () Real)
(declare-fun l () Real)
(declare-fun m () Real)
(declare-fun n () Real)
(declare-fun x1 () Real)
(declare-fun xI1 () Real)
(declare-fun o () Real)
(declare-fun ai () Real)
(declare-fun I1uscore4dollarskuscore353 () Real)
(declare-fun ab () Real)
(declare-fun p () Real)
(declare-fun v1uscore4dollarskuscore353 () Real)
(declare-fun q () Real)
(declare-fun r () Real)
(declare-fun s () Real)
(declare-fun af () Real)
(declare-fun ac () Real)
(declare-fun t () Real)
(declare-fun aa () Real)
(declare-fun v () Real)
(declare-fun w () Real)
(declare-fun x () Real)
(declare-fun y () Real)
(declare-fun ad () Real)
(assert
 (and
  (forall ((p Real))
   (and
    (and
     (or
      (and
       (or (distinct j 0.0) (< (+ 31 (/ (* v1 v1) (/ 2.0 B))) (- 7 YUNCA_new af)))
       (distinct (/ 7 e (- g)) 2.0)
       (>= (- (*  (*  SuTDY_new p) (/ v2 v2 2.0))) (/ 144 EMrJi_new (/ YSjFW_new I1uscore4dollarskuscore353)))
       (< 0.0 v1)
       (<= v1 (* ae (/ 142 YSjFW_new I1uscore4dollarskuscore353)))
       (>= 0.0 v2))
      (> v2 ae))
     (> 0.0 k)
     (> 0.0 (- ae (/ 112 YSjFW_new I1uscore4dollarskuscore353))))
    (or
     (= (/ 209 EMrJi_new (- 5 YSjFW_new I1uscore4dollarskuscore353)) (+ u ac))
     (<= 0.0 (+ a (/ 71 c k)))
     (and (or (<= (/ 190 (* (* 110 (* 241 1.0)) p) v1uscore4dollarskuscore353) 0) (> ai 0)) false))))
  (exists ((z Real))
   (or
   (and
    (or
     (and
      (or
       (and
        (or
         (> r d)
         (< 0.0 (/ (- (- 9 YUNCA_new xI1) r) (* ag v2)))
         (<= (/ (* (* 202 xI1) r) (+ 94 ag v2)) x)
         (>= 0.0 (/ 1 d B))
         (distinct (+ SuTDY_new p) c))
        (= v 1.0))
       (<=
        (- (/
            (+ 210 (/ 233 (+ 22 YUNCA_new) (- i v1uscore4dollarskuscore353)))
            (* 39 (+ 180 YUNCA_new xI1 (- 1 2)) (- (/ 244 f x1) (* 10 f x1)) (+ 252 f x1 ag v2))))
        (+  SuTDY_new p)))
      (<= 0.0 (* ag v2)))
     (> (/ 213 ag v2) x)
     (> ad (/ 120 SuTDY_new p))
     (< 0.0 (- i v1uscore4dollarskuscore353)))
    (> w x)
    (> 0.0 (* YUNCA_new xI1))
    (>= 0.0 (* f x1)))
    (= v 2.0)
    (> 0.0 (- (/ 105 YUNCA_new xI1) (* 60 d)))))))
(assert (distinct a (-  aa af)))
(assert (distinct b (-  j ac)))
(assert (= c (* k aa)))
(assert (distinct d (/ B s)))
(assert (distinct ag (* v2 aa)))
(assert (distinct u (+ l ac m y aa)))
(assert (distinct ah (* n q)))
(assert (distinct f (/ x1 y)))
(assert (= YUNCA_new (/ xI1 af)))
(assert (= EMrJi_new (+ 2 o)))
(assert (distinct g (/ 6 ai aa)))
(assert (= h (/ ab y)))
(assert (distinct SuTDY_new (+ p q)))
(assert (= i (- t)))
(check-sat)
```
z3 throws out an assertion violation:
```
ASSERTION VIOLATION
File: ../src/nlsat/nlsat_interval_set.cpp
Line: 84
s <= 0
(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB
```

OS: Ubuntu 18.04
Revision: 22f1c64
Good evening,

I was wondering if there were a way to apply a forall to uninterpreted functions. mkForAll expects an array of Expr, from which FuncDecl does not inherit. I am trying to express that I want my formula to stand for any valuations that a function might take 
(ex: mkForAll( func(int,int,int) int, .....)
Reproducer: [file.zip](https://github.com/Z3Prover/z3/files/4081549/file.zip)

```
$ z3 smt.ematching=false file.smt2
ASSERTION VIOLATION
File: ../src/util/obj_hashtable.h
Line: 171
(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB
```

Trace:
```
#1  0x00007ffff667d74f in obj_map<smt::enode, app*>::find (k=<optimized out>,
    this=0x20) at ../src/ast/ast.h:505
#2  obj_map<smt::enode, app*>::operator[] (k=<optimized out>, this=0x20)
    at ../src/util/obj_hashtable.h:182
#3  smt::model_generator::get_value (this=this@entry=0xb5f628,
    n=n@entry=0xb84768) at ../src/smt/smt_model_generator.cpp:379
#4  0x00007ffff66849cf in smt::model_generator::mk_values (
    this=this@entry=0xb5f628) at ../src/smt/smt_model_generator.cpp:363
#5  0x00007ffff6684ca2 in smt::model_generator::mk_model (this=0xb5f628)
    at ../src/smt/smt_model_generator.cpp:500
#6  0x00007ffff66118f8 in smt::context::mk_proto_model (
    this=this@entry=0xb23968, r=r@entry=l_true)
    at ../src/smt/smt_context.cpp:4397
```

Git bisect says the regression was introduced in https://github.com/Z3Prover/z3/commit/77689ed002c4e93678e3d96a57dae034a2024b1c

Hi,
For this formula,
```
(declare-datatypes ((A 0)))
(declare-datatypes ((B 0)) (((f (g A)))))
```
Z3 throws out an assertion violation:
```
ASSERTION VIOLATION
File: ../src/util/map.h
Line: 157
e
(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB
```

OS: Ubuntu 18.04
Revision: 93d1091
Hi,
For this formula:
```
(declare-fun a () String)
(declare-fun b () Bool)
(declare-fun c () String)
(declare-fun d () Bool)
(declare-fun e () Bool)
(declare-fun f () Bool)
(declare-fun g () String)
(declare-fun h () Bool)
(declare-fun i () Bool)
(declare-fun j () Bool)
(declare-fun k () Bool)
(declare-fun l () String)
(declare-fun m () String)
(declare-fun n () Bool)
(declare-fun o () Bool)
(assert (= (distinct b (= "" (str.substr c 20 (str.len l)))) (= b (distinct f j)) (distinct "-" (str.substr c 10 (str.len l)))))
(assert (distinct (distinct n o) i))
(assert (distinct (= d e) (= d (distinct e (= "-" l)))))
(assert (distinct (distinct h d) (distinct "" (str.substr c 1 (str.len l)))))
(assert (= (= d k) (distinct "" (str.substr a 0 (str.len m)))))
(assert (= b (= d k)))
(assert (distinct b i))
(assert (distinct g m))
(assert (distinct n o))
(assert (distinct d (= k e)))
(assert (distinct h (distinct b e)))
(assert (= c (str.++ l m)))
(check-sat)
```
Z3 nightly build incorrectly gives unsat, while z3-4.8.7 gives sat.

OS: Ubuntu 18.04
Revision: dc5d881
Hi, I ran into a problem when dealing with bitvector arithmetics in logic `QF_BV` - the following snippet produces unexpected output:
```smt
(set-option :produce-models true)
(set-logic QF_BV)
(declare-fun a () (_ BitVec 32))
(assert (bvslt a (_ bv32768 32)))
(assert (bvslt (_ bv4294934527 32) a))
(check-sat)
(push 1)
(assert (bvslt a (_ bv11 32)))
(push 1)
(pop 1)
(pop 1)
(assert (not (bvslt a (_ bv11 32))))
(check-sat)
(assert (= a (_ bv123 32)))
(check-sat)
(get-value (a)) ; should be #x0000007b (123), but is #x00000079 (121)
```

As stated, this should ideally return `#x0000007b` (and does so on CVC4), but returns `#x00000079`. Interestingly, removal of the sat-checks or the redundant push / pop sequences fixes this problem, hence this test case seems a little bit convoluted.

The full output is:
```
sat
sat
sat
((a #x00000079))
``` 

I tested this on Z3 v4.8.8 built from source on Fedora 30.

This is the example from example/java folder and pom file dependency is given below. While running the code I get below issue that -

> java.lang.UnsatisfiedLinkError: no libz3java in java.library.path

import com.microsoft.z3.*;

 HashMap<String, String> cfg = new HashMap<String, String>();
        cfg.put("model", "true");
        Context ctx = new Context(cfg);
        System.out.println("EvalExample1");
        Log.append("EvalExample1");

        IntExpr x = ctx.mkIntConst("x");
        IntExpr y = ctx.mkIntConst("y");
        IntExpr two = ctx.mkInt(2);

        Solver solver = ctx.mkSolver();

        /* assert x < y */
        solver.add(ctx.mkLt(x, y));

        /* assert x > 2 */
        solver.add(ctx.mkGt(x, two));



        /* find model for the constraints above */
        Model model = null;
        if (Status.SATISFIABLE == solver.check())
        {
            model = solver.getModel();
            System.out.println(model);
            System.out.println("\nevaluating x+y");
            Expr v = model.evaluate(ctx.mkAdd(x, y), false);
            if (v != null)
            {
                System.out.println("result = " + (v));
            } else
            {
                System.out.println("Failed to evaluate: x+y");
            }
        } else
        {
            System.out.println("BUG, the constraints are satisfiable.");
        }

-------------------------------------------------------------
 <dependency>
            <groupId>org.sosy-lab</groupId>
            <artifactId>javasmt-solver-z3</artifactId>
            <version>z3-4.4.1-1558-gf96cfea</version>
        </dependency>

-------------------------------------------------------------
java.lang.UnsatisfiedLinkError: no libz3java in java.library.path

	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1860)
	at java.lang.Runtime.loadLibrary0(Runtime.java:870)
	at java.lang.System.loadLibrary(System.java:1122)
	at com.microsoft.z3.Native.<clinit>(Native.java:14)
	at com.microsoft.z3.Context.<init>(Context.java:62)
	at RunTimeProcessorTest.testApplicationRunTime(RunTimeProcessorTest.java:24)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)