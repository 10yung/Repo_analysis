The `Top` in Chipyard is really a digital-only `Top`. Typically, our chips have had at least one other later of hierarchy above the `DigitalTop`, below the `TestHarness`. This "ChipTop" layer would also contain analog blocks.

It may be useful to create that layer in Chipyard, such that the default designs are more realistic representations of chips that might be taped out.
Backport from #362 
h/t @jerryz123
Fixes #381.

Adds a configuration that removes off-chip memory interface in favor of a configurable scratchpad hanging off the `mbus`. This builds Verilog but I haven't tested any code with this. 

Based on #347 so this must go in after that. (Ill change the base branch when the other PR is done).
The DUT instance name in the hierarchy is not getting a proper name (i.e. `dut`, etc) but is instead getting `TestHarness`.

![image](https://user-images.githubusercontent.com/8823803/72642266-c5e3d180-3920-11ea-8019-0dfc51e95811.png)

See the comment on #347 for more discussion on it.
We should have an example design that uses an on-chip scratchpad as backing memory.
There's no scope for the Chipyard packages:

https://github.com/ucb-bar/chipyard/blob/612f1d5a104684ad901408c35f97c39d14aeff46/generators/example/src/main/scala/BoomConfigs.scala#L1

https://github.com/ucb-bar/chipyard/blob/612f1d5a104684ad901408c35f97c39d14aeff46/generators/utilities/src/main/scala/System.scala#L6

Typically when multiple packages are in a repo you expect them to share some part of the namespace.  I'd suggest changing them to `chipyard.example` and `chipyard.utilities`. I originally came across this because I saw an `import utilities.{...}` and had no idea where that was coming from.


This seems to be the same issue as #319, but as there was no information provided about replicating and no details as to why it was closed shortly after opening, I figured a new issue would be better.

I also tried creating a new generator and noticed that printf outputs weren't showing up when I expected, but as I added more printf calls, earlier calls that hadn't shown up before began to show up. I somewhat replicated this on master using the pwm example generator, though it seems like something is kind of nondeterministic.

I first changed the `PWMBase` class to print the PWM output:

```
  // If PWM is enabled, pwmout is high when counter < duty                      
  // If PWM is not enabled, it will always be low                               
  val pwmval = Wire(Bool())                                                     
  pwmval := io.enable && (counter < io.duty)                                    
  printf(p"pwmval: $pwmval \n")                                        
```

After running a clean build (`make clean; make CONFIG=PWMRocketConfig TOP=TopWithPWMTL -j32`), running the test with `./simulator-example-PWMRocketConfig +verbose ../../tests/pwm.riscv` did not show the expected printf output (including or not including `+verbose` did not make a difference either way). However, when I went through my steps one more time to write up this issue, it did show up, and I don't believe there was any difference.

Adding another printf beneath the first call (I just used `printf(p"another print\n")`) and recompiling resulted in the `pwmval:` output displaying, but the `another print` line not being shown.

Similarly, adding a third printf beneath the second line and recompiling resulted in the first two printfs appearing in the output. (In the redo, it did not show up, but adding a fourth printf caused the second and third message to output).

Commenting out or removing lines suffers from the same issue - the next compilation still includes the printed output from the line that should no longer have any effect. 

Is this an issue with the build system for chipyard? When I add and remove print statements in a non-chipyard Chisel project, the change is immediately reflected when running tests.
hi, I have compiled rocket using :
make debug CONFIG=Sha3RocketConfig
toolchains is: chipyard-toolchain-prebuilt https://github.com/ucb-bar/chipyard-toolchain-prebuilt.git
and get fileÂ simulator-example-Sha3RocketConfig-debug
but when I ran sha3-rocc.c example using:
./simulator-example-Sha3RocketConfig-debug +verbose -v sha3.vcd /mnt/c/chipyard/generators/sha3/src/main/c/sha3.rv
I got errors (hwacha has the same problem):
./simulator-example-Sha3RocketConfig-debug +verbose -v sha3.vcd /mnt/c/chipyard/generators/sha3/src/main/c/sha3.rv
using random seed 1578896255
This emulator compiled with JTAG Remote Bitbang client. To enable, use +jtag_rbb_enable=1.
Listening on port 63817
C0:          0 [0] pc=[fffffff00781e10f] W[r 0=f4127e83c66bb0c8][0] R[r24=0000000000000000] R[r15=5248c5aa209602f5] inst=[00007462] DASM(00007462)
warning: tohost and fromhost symbols not in ELF; can't communicate with target
thanks!
I'm new to chipyard and now following the tutorial in https://chipyard.readthedocs.io

When I follow all the steps and type make in the sims/verilator directory,
sbt emits error downloading org.scalameta:semanticdb-scalac_2.12.4:4.2.3 (Not found)

It seems to be related to the version issue, but I could not solve the problem.
Could you help me?

Thank you.
When I run

`./scripts/build-toolchains.sh
`

I get the following error:

`build-toolchains.sh: obsolete make version; need GNU make 4.x or later`

However, I have already installed GNU Make 4.1 in my machine:

```
make --version
GNU Make 4.1
Built for x86_64-pc-linux-gnu
Copyright (C) 1988-2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law. 
```

PS By the way, I noticed that `MAKE` variable has not been set in the script.