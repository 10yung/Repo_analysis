Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
Updates 
* [org.specs2:specs2-core](https://github.com/etorreborre/specs2)
* [org.specs2:specs2-scalacheck](https://github.com/etorreborre/specs2)

 from 4.8.1 to 4.8.3.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.specs2" } ]
```
</details>

labels: test-library-update, semver-patch
Hello there - 

I was going through your examples when setting up a project of my own, and I noticed that you are including the swagger-ui distribution directly in the project's resources files. 

Considering http4s has support for webjars, and the swagger-ui is distributed in its own webjar, we should be possible to provide an example that uses said webjar. 
In "org.http4s" % "rho-swagger_2.12" % "0.19.0", 
BlazeServerBuilder[IO].bindHttp(port, "0.0.0.0") .withHttpApp(service1 <+> service2)...
swagger-ui only show routes of service1, does not show another.
Rho makes heavy use of symbolic operators and extension methods for syntax:
```scala
"description" ** route
Map("oauth" -> List("admin")) ^^ route
route >>> headerDecoders
route |>> { () => doThing }
// Proposed in #314:
List("tag1", "tag2") @@ route
```
My team (relatively new to Scala) sees this syntax as the biggest pain-point of using Rho, to the point that we ended up defining our own syntax extensions:
```scala
implicit class BuilderOps[HL <: HList](val builder: PathBuilder[IO, HL]) extends AnyVal {
  def withDescription(description: String): PathBuilder[IO, HL] =
    new PathBuilder(
      builder.method,
      PathAST.MetaCons(builder.path, RouteDesc(description))
    )
}

implicit class RouteOps[F[_], T <: HList](val route: RouteExecutable[F, T]) extends AnyVal {
  def bindAction[U, R](action: U)(implicit hltf: HListToFunc[F, T, U], srvc: CompileRoutes[F, R]): R = route |>> action
}
```
Would there be interest in adding alphanumeric methods like these to the main Rho types? I'm thinking we could do something like the [new collections did](https://github.com/scala/collection-strawman/pull/57), and:
1. Add methods with descriptive names to the builder classes
2. For backwards-compat, change the existing symbolic operators to call the new alphanumeric methods
I'll try and put in an example next week, but it appears the fix for #216 does break using circe's fully automatic derivation.  In the mean time, the work around is just using the semiauto derivation instead.
Presently generating the swagger model for a shapeless `Coproduct` type outputs lots of implementation details about `Coproducts`.  Rho should output a composite type with each type included instead.

See [discussion and test case here](https://github.com/http4s/rho/pull/281#discussion_r247348087)
(I'm filing this per [discussion](https://gitter.im/http4s/rho?at=5c26266f2863d8612ba068a5) with @zarthross on Gitter.)

**How to reproduce**

```scala
import cats.effect.{ExitCode, IO, IOApp, Sync}
import io.circe.generic.auto._
import org.http4s.headers._
import org.http4s.rho.swagger
import org.http4s.server.blaze.BlazeServerBuilder
import org.http4s.syntax.kleisli.http4sKleisliResponseSyntax
import org.http4s.{EntityEncoder, MediaType}
import org.http4s.rho.RhoRoutes

case class SampleResponse(msg: String)

class Routes[F[_]: Sync] extends RhoRoutes[F] {
  def accept(mediaType: MediaType) =
    existsAnd(Accept) { (hdr: Accept) ⇒
      hdr.values.exists(_.mediaRange.satisfiedBy(mediaType))
    }

  {
    implicit val entityEncoder: EntityEncoder[F, SampleResponse] = org.http4s.circe.CirceEntityEncoder.circeEntityEncoder[F, SampleResponse]
    GET / "text-or-json" >>> accept(MediaType.application.json) |>> { () ⇒ Ok(SampleResponse("some JSON")) }
  }
  {
    implicit val encoder: EntityEncoder[F, SampleResponse] = EntityEncoder.stringEncoder[F].contramap(_.toString)
    GET / "text-or-json" >>> accept(MediaType.text.plain)       |>> { () ⇒ Ok(SampleResponse("some text")) }
  }
}

object Bug extends IOApp {
  override def run(args: List[String]): IO[ExitCode] = {
    val httpApp = new Routes[IO]()
      .toRoutes(swagger.syntax.io.createRhoMiddleware())
        .orNotFound

    BlazeServerBuilder[IO]
      .bindHttp(8081, "localhost")
      .withHttpApp(httpApp)
      .resource
      .use(server ⇒ IO.never)
  }
}
```

Once this is running, I did a 

```bash
curl -v http://localhost:8081/swagger.json
```

and got:

```json
  "paths" : {
    "/text-or-json" : {
      "get" : {
        "tags" : [ "text-or-json" ],
        "operationId" : "getText-or-json-Accept",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "Accept",
          "in" : "header",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SampleResponse"
            }
          }
        },
        "deprecated" : false
      }
    }
  }
```

I'd have expected to see also "application/json" in the "produces" array.

**Note**

The actual routes work correctly:

```bash
$ http -v GET :8081/text-or-json Accept:text/plain
…
SampleResponse(some text)

$  http -v GET :8081/text-or-json Accept:application/json
{
   "msg": "some JSON"
}
```
Resolves: #258

Todos:
- [ ] Add Secured Sonotype credentials 
- [ ] Add Secured PGP keys for signing releases
- [ ] Add Secured Github token for publishing gh-pages
Before 0.19.1 is released, we'll need to start using [Mima](https://github.com/lightbend/migration-manager) to ensure binary compatibility is preserved.