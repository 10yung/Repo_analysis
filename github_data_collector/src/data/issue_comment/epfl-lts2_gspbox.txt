The current implementation of the Erdos-Renyi graph seems to have an issue related to the generation of the adjacency matrix. In particular, the edge probability does not follow the input probability p but it is roughly half. This is due to the following lines:

G.W = sprandsym(N,p)>0;
G.W(1:N+1:end) = 0;

where sprandsym(N,p) generates a sparse matrix with nonzero probability p but the nonzero entries are normally distributed, so taking >0 only selects half of those.

A quick fix, albeit inefficient, is

G.W = tril(rand(N,N)<p);
G.W = G.W - eye(N);
G.W = G.W + G.W'; 
function appears to have many dependencies not included in the repo, including:
normalize_data
gabwin
I think the behavior on L141 in `gsp_graph_multiresolution.m` is wrong in the case when `largest_eigenvector(1)==0`, which now leads to filling `largest_eigenvector` with 0s as `sign(0)=0`. I suggest L141 being executed only if `largest_eigenvector(1)~=0`.
Also, as eig works up to `eps` precision, one should IMHO have `nonnegative_logicals=(largest_eigenvector >= -eps);` instead of `nonnegative_logicals=(largest_eigenvector >= 0);`, as the current may lead to problems with graphs with multiple connected components, which are then numerically not properly identified to be kept, which may lead to NaNs in Kron reduction.
The current code throws "GSP_GRAPH_SPARSIFY: Epsilon out of required range" if `gsp_graph_multiresolution()` comes to the point that the current graph has three nodes. I think L175 in gsp_graph_multiresolution.m should be ` if Gs{lev+1}.N>3` as 2/sqrt(3)>1, a condition in `gsp_graph_sparsify()`. Another useful condition would be `sum(find(Gs{lev+1}.A,1))>0` as otherwise there is nothing to sparsify and this later leads to error in `results=gendist(Pe',q,1);`.
In addition a piggy-backed comment: `gsp_graph_sparsify()` should be documented that it is non-deterministic.