Chapter 6, Overthinking R code block 6.12:  It would be nice to explicitly state that the "true" model to generate the simulated data by `sim.train.test` is based on the default `rho=c(0.15,-0.4)` argument.  When I ran the code block it seemed like magic to me that the 3 parameter model (i.e. two predictors) was the implicit "true" model.  That is, I recommend a footnote or something that the `rho` argument for `sim.train.test` is what describes the model that generates the simulated data.
I am trying to install package using following call, `install_github("rmcelreath/rethinking",ref="Experimental")`.

This is causing the following error
```
Warning: file ‘Boxes_model_age.rda’ has magic number 'RDX3'
  Use of save versions prior to 2 is deprecated
Error in load(zfile, envir = envir) : 
  bad restore file magic number (file may be corrupted) -- no data loaded
ERROR: installing package indices failed
```

I also tried manually loading this file in R and I get the same warning/error message "bad restore file magic number".

More detailed log here.

```* installing *source* package ‘rethinking’ ...
** R
** data
** inst
** preparing package for lazy loading
** help
*** installing help indices
** building package indices
Warning: file ‘Boxes_model_age.rda’ has magic number 'RDX3'
  Use of save versions prior to 2 is deprecated
Error in load(zfile, envir = envir) : 
  bad restore file magic number (file may be corrupted) -- no data loaded
ERROR: installing package indices failed
* removing ‘/Users/sarang/Library/R/3.4/library/rethinking’
* restoring previous ‘/Users/sarang/Library/R/3.4/library/rethinking’
Error: Failed to install 'rethinking' from GitHub:
  (converted from warning) installation of package ‘/var/folders/mx/m3m9mrnd7pdd9_cc3f7r35zclphfj6/T//RtmpFcvGf8/fileb26856b1fe78/rethinking_1.93.tar.gz’ had non-zero exit status
> ```


I'm running the code snippets that use `ulam` function from the textbook, and it takes about 1 minute to compile. Even on the second run. The sampling itself is very fast, it takes milliseconds, it is the compilation that is slow.

1. Is it normal for the model to take 1 minute to compile?

2. Is there a way to skip compilation when I run the code second time? I know this could be done in rstan with `rstan_options(auto_write = TRUE)`, but this option does not seem to help with ulam.

```R
library(rethinking)
rstan_options(auto_write = TRUE)
set.seed(41)
y <- rnorm( 100 , mean=0 , sd=1 )

m9.5 <- ulam( alist(
        y ~ dnorm( mu , 1000 ),
        mu <- a1 + a2 ,
        a1 ~ dnorm( 0, 10 ),
        a2 ~ dnorm( 0, 10 ),
        sigma ~ dexp( 1 )
    ), data=list(y=y) , chains=2, cores=2 )

precis( m9.5 )
stancode(m9.5)
traceplot( m9.5 )
pairs( m9.5@stanfit )
```

Thanks!
Hi, I'm getting an error when running example code 9.12 from Statistical Rethinking 2 (Compiled February 28, 2019). Note that the code ran successfully for the first time, but after that it fails.


```R
library(rethinking)
data(rugged)
d <- rugged
d$log_gdp <- log(d$rgdppc_2000)
dd <- d[ complete.cases(d$rgdppc_2000) , ]
dd$log_gdp_std <- dd$log_gdp / mean(dd$log_gdp)
dd$rugged_std <- dd$rugged / max(dd$rugged)
dd$cid <- ifelse( dd$cont_africa==1 , 1 , 2 )

dat_slim <- list(
    log_gdp_std = dd$log_gdp_std,
    rugged_std = dd$rugged_std,
    cid = as.integer( dd$cid )
)

m9.1 <- ulam(
    alist(
        log_gdp_std ~ dnorm( mu , sigma ) ,
        mu <- a[cid] + b[cid]*( rugged_std - 0.215 ) ,
        a[cid] ~ dnorm( 1 , 0.1 ) ,
        b[cid] ~ dnorm( 0 , 0.3 ) ,
        sigma ~ dexp( 1 )
    ),
    data=dat_slim , chains=1 )

precis( m9.1 , depth=2 )
```

Here is the output

```
$ Rscript ex9.12.r 
Loading required package: rstan
Loading required package: StanHeaders
Loading required package: ggplot2
rstan (Version 2.19.2, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)
Loading required package: parallel
Loading required package: dagitty
rethinking (Version 1.93)

Attaching package: ‘rethinking’

The following object is masked from ‘package:stats’:

    rstudent


SAMPLING FOR MODEL 'f3314e777e4c586121dcc9de98266129' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 4.1e-05 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.41 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Iteration:   1 / 1000 [  0%]  (Warmup)
[1] "Error in sampler$call_sampler(args_list[[i]]) : "
[2] "  c++ exception (unknown reason)"                
error occurred during calling the sampler; sampling not done
Stan model 'f3314e777e4c586121dcc9de98266129' does not contain samples.
Error in validObject(.Object) : 
  invalid class “ulam” object: invalid object for slot "coef" in class "ulam": got class "NULL", should be or extend class "numeric"
Calls: ulam -> new -> initialize -> initialize -> validObject
Execution halted

```

I just installed rethinking library today:

```
library(devtools)
devtools::install_github("evgenyneu/rethinking",ref="Experimental")
```

I'm on macOS Catalina 10.15.1, R version 3.6.1

Also note, that the following code **works** every time:

```R
library(rethinking)
rstan_options(auto_write = TRUE)
y <- c(-1,1)
set.seed(11)

m9.3 <- ulam(
    alist(
        y ~ dnorm( mu , sigma ) ,
        mu <- alpha ,
        alpha ~ dnorm( 1 , 10 ) ,
        sigma ~ dexp( 1 )
    ),
    data=list(y=y) , chains=2 )

precis( m9.3 )
```

I was trying to use vector start values for map but it always shows up as randomly initialized values.
Probably the error is mine but documentation for map is not very transparent on this matter.

My code:
```r
library(rethinking)
data(tulips)
tulips$bedid<-coerce_index(tulips$bed) #from the rethinking package, but standard methods exist for this

centered=function(data){
  (data-mean(data))#/sd(data)
}
tulips$water <- centered(tulips$water)
tulips$shade <- centered(tulips$shade)

meanbloom=mean(tulips$blooms)
sdbloom=sd(tulips$blooms)
starta=c(meanbloom,meanbloom,meanbloom)

m7h1 <-map(
  alist(
    blooms ~ dnorm(mu,sigma),
    mu <- a[bedid]+bw*water+bs*shade+bws*water*shade,
    a[bedid] ~ dnorm(meanbloom,sdbloom),#useful priors!    
    sigma ~ dunif(0,100),
    bw ~ dnorm(0,100),
    bs ~ dnorm(0,100),
    bws ~ dnorm(0,100)
  ),data=tulips,
  start=list(
  a=starta
  ,bw=0,bs=0,bws=0
  ,sigma=sdbloom
  )
)
```

This returns the following error:
`Error in map(alist(blooms ~ dnorm(mu, sigma), mu <- a[bedid] + bw * water +  :
  non-finite finite-difference value [7]
Start values for parameters may be too far from MAP.
Try better priors or use explicit start values.
If you sampled random start values, just trying again may work.
Start values used in this attempt:
a = c(179.784301827294, 307.399897046674, 60.8822657645863)
bw = 0
bs = 0
bws = 0
sigma = 92.6839228506528`
https://github.com/rmcelreath/rethinking/blob/1def057174071beb212532d545bc2d8c559760a2/R/distributions.r#L150-L155

The LKJ density is not equal to but proportional to this function of the determinant (for quick reference see <https://mc-stan.org/docs/2_18/functions-reference/lkj-correlation.html>). The formula is missing a normalizing constant discussed on pages 1996–1997 in LKJ's 2009 paper.

Note that this issue is distinct from the issue with the _logging_ of the scaled density highlighted in https://github.com/rmcelreath/rethinking/issues/141 which looks like a duplicate of https://github.com/rmcelreath/rethinking/issues/101
The documentation for dbeta2() is no longer in the help file.
Porting `plp()` to cover the `ulam` class is not straightforward; I would like to leave this request here to see if anyone would like to contribute some code.

Hi Richard,

I cannot find the 'Boxes_model_gender.rda' and 'Boxes_model_age.rda' files that you mention on page 534 of the latest version (26th Sept 2019) of the 2nd Edition of the Statistical Rethinking book.  They're not in the data folder of the Experimental branch nor the Master branch.

Please could you push these files to the Experimental branch so that I can access them?

Many thanks for your help,

Ross