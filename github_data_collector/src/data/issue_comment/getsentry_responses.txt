Fix #264 
In case a `BaseException` (or a subclass) is raised in the `get_response()` method of a match object (e.g. in a callback) the call accounting isn't updated for that call.

This then leads to test failures due to `Not all requests have been executed`.

The reason is that only `Exception`s are expected:
https://github.com/getsentry/responses/blob/8b0b9c1883c1242246af3dd535df79bfb071732a/responses.py#L642-L648

I noticed this in the context of `gevent` and its `Timeout` feature which raises an exception inherited from `BaseException`.
self = <RequestsCookieJar[]>, response = <requests.cookies.MockResponse object at 0x7f45f4e76f60>, request = <requests.cookies.MockRequest object at 0x7f45f4e76e48>

    def make_cookies(self, response, request):
        """Return sequence of Cookie objects extracted from response object."""
        # get cookie-attributes for RFC 2965 and Netscape protocols
        headers = response.info()
>       rfc2965_hdrs = headers.get_all("Set-Cookie2", [])
E       AttributeError: 'HTTPHeaderDict' object has no attribute 'get_all'
Feature request to add a multipart/form-data content-type.
I have this piece of request:

```
rs = requests.Session()
rp = rs.post(url, data={
   "key1" : "value1",
   "key2" : "value2",
})
```

I am tracking to mock this with:

```
responses.add(
        responses.POST,
        body={
            "key1" : "value1",
            "key2" : "value2",
        },
        status=304,
        content_type="application/x-www-form-urlencoded",
        match_querystring=True 
```

But I keep getting:

> E           requests.exceptions.ConnectionError: Connection refused by Responses

I am using version `0.10.6` of `responses`, on python `3.7`.

---
I am aware that the `body` only accepts `str or BufferedReader`, so I've tried manually building a url form encoded body:

```
        body="key1=value1&key2=value2",
```

But I can't still seem to get it to work. Am I missing something?
I an async test function is used, pytest no longer knows how to await the function. I suspect the response.active wrapper is assuming this is a normal function. How can we get around this? 

```python
import responses
import requests

@responses.activate
async def test_simple():
    responses.add(responses.GET, 'http://twitter.com/api/1/foobar',
                  json={'error': 'not found'}, status=404)

    resp = requests.get('http://twitter.com/api/1/foobar')

    assert resp.json() == {"error": "not found"}

    assert len(responses.calls) == 1
    assert responses.calls[0].request.url == 'http://twitter.com/api/1/foobar'
    assert responses.calls[0].response.text == '{"error": "not found"}'
```

Resulting error:
```
test_init.py::test_simple
  /home/rvangork/Documents/git/home-assistant/venv/lib/python3.7/site-packages/_pytest/python.py:178: RuntimeWarning: coroutine 'test_simple' was never awaited
    testfunction(**testargs)
```
When using a pytest fixture like this:

```py
@pytest.fixture
def mocked_responses():
    with responses.RequestsMock() as rsps:
        yield rsps
```

In my tests, I have to import `responses` to add mocks:

```py
import responses

def test_server(mocked_responses):
     mocked_responses.add(responses.GET, "http://server/fake", json={})
```

Instead, I believe it would be more convenient to have a shortcut for each verb:

```py
def test_server(mocked_responses):
     mocked_responses.get("http://server/fake", json={})
```

> Note: this is the API offered by [aioresponses](https://github.com/pnuckowski/aioresponses/)

The contribution is trivial, and I would be happy to do it. But first, what do you think?
Currently `responses` does not capture requests coming from `requests-futures` library (based on `concurrent.futures`). 
Similar to as discussed in #148 , when using the params parameter in requests, I need to set `match_querystring=False` to ignore the query string:

```
responses.add(
    method=responses.GET,
    url="http://example.com?hello=world,
    json={"response": "response"},
    status=200,
    match_querystring=False,
)
req = requests.get('http://example.com', params={"hello": "world"})
```

This returns a list of calls where I can get the requested URL:
```
print(requests.calls[0].request.url)
> http://example.com
```

However, theres no way to see what the original params passed in the original `request`. It would be nice to be able to also do something like the following so that I can very what the parameters are that were passed in the request:

```
print(requests.calls[0].request.params)
> {"hello": "world"}
```
Adds and passes `kwargs` through to the underlying `CallbackResponse` object.

Closes #228 
Doing the same as #241 but includes a test
