This should up our code coverage a good bit. Enables testing that our Objective-C compatibility methods are returning the right objects.

Having Objective-C tests also forces us to get our code comments correct. Nice added bonus ðŸ™‚
This branch is the long-lived development branch for Valet 4.0.

https://github.com/square/Valet/issues/179
This PR tries to make Valet more semantic Swift by relying on `throws` rather than `Bool` or `enum` return types. It's a bit of a massive change, but IMO this API feels a whole lot nicer to use.
I'll be using this issue to track what we'll want to do in our next major version.

- [x] Allow for customizing kSecAttrService on Mac: https://github.com/square/Valet/issues/140
- [x] Remove Xcode 9 Support: #190 
- [x] Dropping Xcode 10 support: #190 
- [x] Drop Swift 4 support: #191
- [ ] Consider renaming SecureEnclaveValet per @gravisman â€“Â non-biometric keychain items are also stored in the Secure Enclave under the hood.
- [x] Bring `SinglePromptSecureEnclaveValet` to the tvOS target (LocalAuthentication was enabled in tvOS 10): #191
- [x] Get rid of `Accessibility`'s `always` and `alwaysThisDeviceOnly`, since these values have been deprecated: #197
- [ ] Move away from `@discardableResult` and towards a `throws` API. We're already letting folk ignore errors. Let's enable that in a more idiomatic way: #198
- [ ] Support keychain [sharing via App Groups](https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps) in addition to keychain access groups.
- [ ] Update README to include migration steps required to update to Valet 4

If you want us to include more action items in this list, please file an issue for the change you'd like, and link that issue to this one.
Like apple doc says.
> This bypasses a scenario where the user unlocks the device and then is almost immediately prompted for another fingerprint.

Some times that scenario is really annoying.
Since watchOS does not have an XCTest framework, we [created a mock of the XCTest framework](https://github.com/square/Valet/pull/127/files#diff-4faaefffc8a2c2b2f510a97d4e1f2f74R30) and [built a watch app to host & run the tests](https://github.com/square/Valet/pull/127/files#diff-2dda50437e8523a6808dbbcf3eeb8791R29).

This watch app allows us to manually verify that Valet works as expected on the watch, but it doesn't allow us to catch regressions in CI. It'd be great for us to improve this situation by running our watch app in CI.

Since the watch app exits with code 0 after successfully running tests, we're most of the way there. The crux of the remaining challenge is determining how to launch the watch app in the simulator from the command line.

I've done some digging, and it looks like we may need to rely one some of the following commands:
- `xcrun simctl list` # this command will allow us to determine which sims are on the CI machine, and allow us to find the UUIDs of phone+watch pairs.
- `xcrun simctl boot <uuid>` # this command will boot the sims with the uuids we've found above. We'll likely need to launch both the phone and watch sims.
- `xcrun simctl install <uuid> <path-to-phone-app AND/OR path-to-watch-app>` # this command should install the app on the simulator
- `xcrun simctl launch <uuid> <path-to-phone-app AND/OR path-to-watch-app>` # this command should allow us to launch the app(s) we installed above

I'm likely missing a command above, as I haven't managed to get a script working with the above. Pro-tip: you can monitor the logs emanating from your simulators by running the command `xcrun simctl spawn <uuid> log stream`. Note that the phone host app is `ValetTouchIDTest`, and the watch app is `Valet watchOS Test Host App`.

Help would be greatly appreciated, since I'm brand new to command-line simulator manipulation.