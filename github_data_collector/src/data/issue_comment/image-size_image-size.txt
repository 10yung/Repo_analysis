This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [@types/node](https://togithub.com/DefinitelyTyped/DefinitelyTyped) | devDependencies | patch | [`12.12.24` -> `12.12.25`](https://renovatebot.com/diffs/npm/@types%2fnode/12.12.24/12.12.25) |

---

### Renovate configuration

:date: **Schedule**: At any time (no schedule defined).

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#image-size/image-size).
using latest version throwing errs

ExperimentalWarning: The fs.promises API is experimental

please change it using util.promisify on fs dont use experimentals for production thanks
Running `imageSize` on the attached png throws an out of bounds exeption while using Linux on Windows. The package works fine for other png and jpg files. The package works fine parsing the same file on macOS.

Error:
```
internal/buffer.js:70
    throw new ERR_BUFFER_OUT_OF_BOUNDS();
    ^
RangeError [ERR_BUFFER_OUT_OF_BOUNDS]: Attempt to access memory outside buffer bounds
    at boundsError (internal/buffer.js:70:11)
    at Buffer.readUInt16LE (internal/buffer.js:229:5)
    at Object.validate (/<redacted>/node_modules/image-size/dist/types/cur.js:7:20)
    at finder (/<redacted>/node_modules/image-size/dist/detector.js:26:55)
    at Array.find (<anonymous>)
    at Object.detector (/<redacted>/node_modules/image-size/dist/detector.js:27:17)
    at lookup (/<redacted>/node_modules/image-size/dist/index.js:32:29)
    at imageSize (/<redacted>/node_modules/image-size/dist/index.js:102:16)
    at <redacted> (/<redacted>/makeManifest.js:20:7)
  code: 'ERR_BUFFER_OUT_OF_BOUNDS'
}
```

Image file:
![handset_icon@3x](https://user-images.githubusercontent.com/28565/70665726-0c5b5780-1c22-11ea-8829-d4f37d6eacae.png)

System:
**OS:** Ubuntu 18.04 bionic [Ubuntu on Windows 10]
**Kernel:** x86_64 Linux 4.4.0-18362-Microsoft
**CPU:** Intel Core i7-8565U @ 8x 2.001Ghz
**image-size version**: 0.8.3 (npm)

According to the [example](https://github.com/image-size/image-size#using-a-url) it's ok to download only a few KB in order to get image size/dimensions. But according to this stackoverflow [answer](https://stackoverflow.com/questions/18264357/how-to-get-the-width-height-of-jpeg-file-without-using-library) in order to get JPEG width/height:

> You have to scan through the JPEG file, parsing each segment, until you find the segment with the information in it that you want. This is described in the wikipedia [article](https://en.wikipedia.org/wiki/JPEG#Syntax_and_structure).

Am I missing something or your library has a workaround?
Since 0.8.0, the module exports named functions instead of a top-level function. In the README, the old state is still documented.
Not to be merged yet. There is too much code duplication.
If WSQ is just a JPEG variant, it should be handled such.

Do you know if this repo support HEIC photo file
https://github.com/image-size/image-size/blob/175bca5d57ceb024ecd307f7a1d70e03fafec205/lib/detector.ts#L5-L17

This constant doesn't include .jpeg (0x41), and doesn't want to work with a buffer from a downloaded .jpeg image... Gives the error: `unsupported file type: undefined (file: undefined)(...)`. The buffer was a buffer, and not undefined.

I also see it is missing some other file types.

**Edit:** I thought all JPEG types was supported. Maybe this isn't a bug. I read in your code that the file has to be `0xff`, if not the table was corrupt... But I don't think that is true. The picture I am trying to read is fine.
Currently only functions and some consts are exported in type definition. But all types that are used in this functions as parameters or results should be exported too. As far as I can see  `ISizeCalculationResult` and `CallbackFn` are missing but there might be others.
When first reading the doc, I did
```js
import imageSize from 'image-size'
```
But my IDE complained that there isn't any default export.
In fact, in `index.js` there is a line that makes it work:
```js
module.exports = exports = imageSize; // backwards compatibility
```
But it's a compatibility code and it's not referenced in the typings, so the doc should be updated accordingly like this:
```js
import {imageSize} from 'image-size'
```
Or with `require`:
```js
const {imageSize} = require('image-size')
```