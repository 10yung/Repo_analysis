I am particularly interested in Kucoin at this time. One property I need to evaluate is whether or not trading is enabled for a particular symbol or not.

I have done some digging and debugging and just simply cannot find where this value is found in the "dto" objects. Can someone please point me in the right direction?

The data for this is available in the SymbolResponse but is not being mapped into the CurrencyPairMetaData object, I think because there is no property for it. I suppose I could add the property and map it, but at this time I do not know of the impact of modifying a core object, as I am new here.
see `CoinmateAuthenticated` class

```
@POST
  @Path("rippleWithdrawal")
  CoinmateTradeResponse rippleWithdrawal(
      @FormParam("publicKey") String publicKey,
      @FormParam("clientId") String clientId,
      @FormParam("signature") ParamsDigest signer,
      @FormParam("nonce") SynchronizedValueFactory<Long> nonce,
      @FormParam("amount") BigDecimal amount,
      @FormParam("address") String address)
      throws IOException;
```

destination tag is not passed to coinmate thought it's optional:

https://coinmate.docs.apiary.io/#reference/ripple-withdrawal-and-deposit/withdraw-ripple/post?console=1

example body
```
clientId=1011&nonce=15397647460&signature=EEBC5BC4F33143C6469BABC81CB36FFA1239E63D60E38E6812A7D376FEB9C2BC&amount=10.02&address=rLB8RknSSxmrATQzNYjXwvmKrXckbdPaCk&destinationTag=10
```
Bumps [crypto](https://github.com/web3j/web3j) from 4.5.11 to 4.5.12.
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href="https://github.com/web3j/web3j/commits">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.web3j:crypto&package-manager=maven&previous-version=4.5.11&new-version=4.5.12)](https://dependabot.com/compatibility-score.html?dependency-name=org.web3j:crypto&package-manager=maven&previous-version=4.5.11&new-version=4.5.12)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
The following test fails for the last two lines.  compareTo returns 
   btc.compareTo(Currency.LTC) --> -10, 
   xbt.compareTo(Currency.LTC) --> 12

To fix, I think we need to add look at Currency.compareTo, subtracting hashcodes looks like it should work.  CurrencyPair.compareTo looks ok too.  so wondering how to fix.

Changing this may have a big impact, so any ideas?
````
  @Test
  public void testCompareTo() {
    Currency btc = Currency.BTC;
    Currency xbt = Currency.XBT;

    assertThat(btc.equals(btc));
    assertThat(btc.equals(xbt));
    assertThat(xbt.equals(btc));
    assertThat(xbt.equals(xbt));

    assertEquals(btc.compareTo(xbt), 0);
    assertEquals(xbt.compareTo(btc), 0);

    assertEquals(btc.compareTo(Currency.LTC), xbt.compareTo(Currency.LTC));
    assertEquals(btc.compareTo(Currency.ETH), xbt.compareTo(Currency.ETH));
  }
````
https://binance-docs.github.io/apidocs/spot/en/#change-log

Deprecation of v1 endpoints:

By **end of Q1 2020**, the following endpoints will be removed from the API. The documentation has been updated to use the v3 versions of these endpoints.

GET api/v1/depth
GET api/v1/historicalTrades
GET api/v1/aggTrades
GET api/v1/klines
GET api/v1/ticker/24hr
GET api/v1/ticker/price
GET api/v1/exchangeInfo
POST api/v1/userDataStream
PUT api/v1/userDataStream
GET api/v1/ping
GET api/v1/time
GET api/v1/ticker/bookTicker

These endpoints however, will NOT be migrated to v3. Please use the following endpoints instead moving forward.

Old V1 Endpoints	New V3 Endpoints
GET api/v1/ticker/allPrices	GET api/v3/ticker/price
GET api/v1/ticker/allBookTickers
I created a sandbox account on Kucoin. Printing AccountInfo works well but `username` is null as you can see if I print it : 

`AccountInfo [username=null, tradingFee=null, wallets={main=Wallet{balances={BTC=Balance [currency=BTC, total=1, available=1, frozen=0, borrowed=0, loaned=0, withdrawing=0, depositing=0], ETH=Balance [currency=ETH, total=10, available=10, frozen=0, borrowed=0, loaned=0, withdrawing=0, depositing=0], KCS=Balance [currency=KCS, total=1000, available=1000, frozen=0, borrowed=0, loaned=0, withdrawing=0, depositing=0]}, id='main', name='main', walletFeatures=[TRADING, FUNDING], maxLeverage=0, currentLeverage=0}}]`

Tried with `4.4.2-SNAPSHOT`
I created a Gemini sandbox account and created an access for API.

When i do a : `accountService.getAccountInfo()`

I get this exception : `GeminiException: Expected a JSON payload with accounts`

I tried with `4.4.2-SNAPSHOT` and `4.4.1`. My credentials seems right because if i set a wrong API secret, i get a `org.knowm.xchange.gemini.v1.dto.GeminiException: InvalidSignature`

Full trace 
```
org.knowm.xchange.exceptions.ExchangeException: org.knowm.xchange.gemini.v1.dto.GeminiException: Expected a JSON payload with accounts
	at org.knowm.xchange.gemini.v1.service.GeminiBaseService.handleException(GeminiBaseService.java:45)
	at org.knowm.xchange.gemini.v1.service.GeminiAccountServiceRaw.getGeminiAccountInfo(GeminiAccountServiceRaw.java:55)
	at org.knowm.xchange.gemini.v1.service.GeminiAccountService.getAccountInfo(GeminiAccountService.java:42)
	at com.cassandre.configuration.ExchangeConfiguration.configure(ExchangeConfiguration.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:389)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:333)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:157)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:416)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1788)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215)
	at com.cassandre.Application.main(Application.java:21)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.knowm.xchange.gemini.v1.dto.GeminiException: Expected a JSON payload with accounts
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.call(AnnotatedConstructor.java:124)
	at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromObjectWith(StdValueInstantiator.java:283)
	at com.fasterxml.jackson.databind.deser.ValueInstantiator.createFromObjectWith(ValueInstantiator.java:229)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:198)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:422)
	at com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer.deserializeFromObject(ThrowableDeserializer.java:65)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4202)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3205)
	at si.mazi.rescu.serialization.jackson.JacksonResponseReader.read(JacksonResponseReader.java:53)
	at si.mazi.rescu.serialization.jackson.JacksonResponseReader.readException(JacksonResponseReader.java:58)
	at si.mazi.rescu.ResponseReader.read(ResponseReader.java:82)
	at si.mazi.rescu.RestInvocationHandler.mapInvocationResult(RestInvocationHandler.java:175)
	at si.mazi.rescu.RestInvocationHandler.receiveAndMap(RestInvocationHandler.java:163)
	at si.mazi.rescu.RestInvocationHandler.invoke(RestInvocationHandler.java:119)
	at com.sun.proxy.$Proxy47.balances(Unknown Source)
	at org.knowm.xchange.gemini.v1.service.GeminiAccountServiceRaw.getGeminiAccountInfo(GeminiAccountServiceRaw.java:52)
```


Hi there,
is there a way to access the margin trading account in Binance, can't find it :)
… orders with nested trades and we should separate these trades in indepentent orders, because you would get different results which depended on the time of a trade will get accepted.
Hello, i had a big pause from the development of this library and i don't know if someone has implement this feature already. I would like to implement a getOpenPositions() method on the TradingService.class in order to get the openPositions on exchanges that we can use leverage. The default method output will be an ExchangeNotSupportedException. Can i do that? Thanks