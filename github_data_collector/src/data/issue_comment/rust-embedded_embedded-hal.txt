Although there is an interface for an i2c blocking master, a corresponding slave interface is missing.
Are there any ideas or work already done on this?
Related to #94, PR for review / discussion
Part of https://github.com/rust-embedded/wg/issues/383

Blockers:

* [ ] [WIP: Re-organising repo](https://github.com/rust-embedded/embedded-hal/pull/169)
* [ ] [[RFC] Changing the way we handle addition/changes to the traits](https://github.com/rust-embedded/embedded-hal/issues/163)
* [ ] [[RFC] Use core language async primitives instead external crates](https://github.com/rust-embedded/embedded-hal/issues/172)
* [ ] [[RFC] digital::v3 interface](https://github.com/rust-embedded/wg/pull/393) + moving to a single interface
(add more issues / PRs here)

I'd like to propose a new `CapturePin` trait for representing a single input capture channel. It is to the `Capture` trait what `PwmPin` is to `Pwm`. Since single-channel singleton abstractions are preferable to multi-channel abstractions, a trait like `CapturePin` should become the recommended way to handle input capture hardware. The trait will only have the method `.capture()`, which has the same API as the same method in `Capture` trait except it doesn't pass in a channel. Since not every chip supports enabling/disabling single capture channels, the `enable` and `disable` methods are omitted (perhaps they can be a separate sub-trait). For a prototype of what the trait will look like, refer to [this PR](https://github.com/rust-embedded/embedded-hal/pull/173).
Swaps digital trait default to `digital::v2` (breaking change), as the next step in the planned `digital::v1` [deprecation](https://github.com/rust-embedded/embedded-hal/issues/95), as an alternative to https://github.com/rust-embedded/wg/pull/393.

I had hoped to port the compatibility shims back to the v0.2 series, however, this seems impossible to do without cyclic dependencies.

## Dependencies
- embedded-hal release 0.2.4 https://github.com/rust-embedded/embedded-hal/pull/174 containing the semver-trick to maintain backwards compatibility

## Impact
- HAL consumers using `digital::*` traits directly will need to update to fallible types
- HAL consumers using `digital::v1::*` or `digital::v2::*` will observe no change

## Next steps
- HAL v0.4.x series should remove `digital::{v1, v1_compat, v2_compat}` to complete the migration

- bump cargo version
- semver trick against embedded-hal v0.3.x
The `CapturePin` trait is the input capture analogue to the `PwmPin` trait, representing a single capture channel. Unlike `PwmPin`, there's no `enable` or `disable` methods, because some chips, such as the MSP430FR2355, may have trouble implementing those two methods on capture abstractions. The proposed trait has been implemented in [msp430fr2x5x-hal](https://github.com/YuhanLiin/msp430fr2x5x-hal/blob/master/src/capture.rs#L300).
# Summary
This proposal proposes to change the way how `async api` does implemented. It makes `async api` more clearly for use and extend.

# Motivation
Our current approach to implement trait primitives as depends on `nb` crate. It was actually on start of this project but after version `1.36` rust already have `async traits` and methodology for work with it. So in 2018 edition of rust lang we have language words as `async`, `await`. The marcosses exported by `nb` are conflicted with key words, we need to use `r#` prefix for each macros use.

This RFC attempts to change implementation to `core types` based implementation. It will be more effective and more conform rust language ideas.

# Detailed design
This RFC inspired of PR #13, but after apply external crate I redesign for use core functionality because it will be better than external depends.

For example we have interface for serial:
```rust
use core::task::Poll;

/// A serial interface
pub trait Serial {
    /// Error type associated to this serial interface
    type Error;
    /// Reads a single byte
    fn read(&mut self) -> Poll<Result<u8, Self::Error>>;
    /// Writes a single byte
    fn write(&mut self, byte: u8) -> Poll<Result<(), Self::Error>>;
}
```
It use `core::task::Poll` as point of `async` run status. It was easy for implement and it isn't depends on `nb` or another external crates.

# Alternatives
Don't implement this RFC.

# Uresolved questions:
 - More clear examples of right use `async` code.
 - How we need to update depend crates?
 - Do we need to rewrite `nb` prefer than rewrite `async` api of `embedded-hal`?
Remove stm32f3 hal implementation as dependency and it's examples from runned doc tests.
Following the #156 
This PR re-organises the embedded-hal repo into a workspace of related crates. There's a top-level `embedded-hal` crate which pulls in the stable items from the other crates, at stable revisions.

**DO NOT MERGE**. This PR is a work in progress.

The goal for this PR is to allow unstable features to be developed at a different pace to stable releases. By moving the traits into their own crates, they can have new unstable features added as and when required, which can be published to crates.io. If you want a stable HAL, you should simply continue to use the top-level `embedded-hal` crate which simply pulls in only the stable items from some recent release of each of the sub-crates.

For example, `embedded-hal` might contain:

```rust
pub mod serial {
    pub use embedded_hal_serial::Write as Write;
}
```

Here the `Write` trait is being re-exported from the `embedded_hal_serial`. Some new experimental `AsyncWrite` trait could be added to `embedded_hal_serial`, causing a minor, or even major, version bump of that crate, but users of the top-level `embedded-hal` trait wouldn't notice until we elected to up-version the dependency in the top-level crate.