![image](https://user-images.githubusercontent.com/4670343/72313758-62ab3280-36c7-11ea-9c3d-daad13ae1f2b.png)

It'd be cool to make calls to `FindWindow` and look for window names associated with debuggers.

From [1]:
```
OLLYDBG
WinDbgFrameClass
Zeta Debugger
Rock Debugger
ObsidianGUI
```

From [2] (not including ones mentioned above):
```
icu_dbg
pe-diy
TDeDeMainForm
TIdaWindow
```

[1] https://cofense.com/satan/
[2] https://github.com/3val/Athena/blob/master/Source%20-%20Bot/Source/Protection/AntiDebugEmulate.cpp
Does it make sense to expand al-khaser to detect the presence of known anti-virus programs as well, since some malware will check for these and not run because of it?  For example, checking for known service names, running processes, uninstaller registry keys, file paths, etc.?

Right now, some of the 'DLL Exports and Loaded DLLs' check for artifacts related to AV products, but otherwise it doesn't look like this is something al-khaser has tried to tackle.
From [1], disk enums in `HKLM\System\CurrentControlSet\Services\Disk\Enum` sometimes contains strings like `Virtual`, `VMW`, or `Vbox`, which some malware uses as an anti-VM check.  Would it be worth also checking for this in al-khaser?

[1] https://cofense.com/kutaki-malware-bypasses-gateways-steal-users-credentials/
Some malware will look for ProductIds associated with commercial sandboxes and stop running if detected.  For example, from [1]:
```
76487-337-8429955-22614 // Anubis Sandbox
76487-644-3177037-23510 // CW Sandbox
55274-640-2673064-23950 // Joe Sandbox
```

Although these checks are still common in malware, they are a bit dated (Anubis has shutdown, for instance).  Is it worth adding a check for these?

[1] https://cofense.com/kutaki-malware-bypasses-gateways-steal-users-credentials/
Some malware will stop executing if it's running on a machine with certain host names and user names, presumably as an anti-sandbox check.  It'd be awesome if al-khaser could have a check for these.

Usernames checked for by Gootkit, from [1]:
```
CurrentUser
Sandbox
```

Hostnames checked for by Gootkit, from [1]:
```
SANDBOX
7SILVIA
```

Usernames / Hostnames checked for by a Trickbot downloader, from [2]: 
```
Emily
HANSPETER-PC
HAPUBWS
Hong Lee
IT-ADMIN
JOHN-PC
Johnson
Miller
MUELLER-PC
Peter Wilson
SystemIT | admin
Timmy
WIN7-TRAPS
```

More research will need to be done to know which sandboxes these usernames and hostnames correspond to.  For the ones that we can't definitively tie back to a known sandbox, should these be included in al-khaser?  It's possible those could be the username/hostname of the malware author's test environment, for instance, and isn't technically an anti-sandbox check.

[1] https://www.sentinelone.com/blog/gootkit-banking-trojan-deep-dive-anti-analysis-features/
[2] https://www.bromium.com/deobfuscating-ostap-trickbots-javascript-downloader/
Gootkit will self-destruct if it's running under one of the following file names (presumably as an anti-sandbox check):
```
SAMPLE.EXE
MALWARE.EXE
BOT.EXE
SANDBOX.EXE
TEST.EXE
KLAVME.EXE
MYAPP.EXE
TESTAPP.EXE
```
Reference: https://www.sentinelone.com/blog/gootkit-banking-trojan-deep-dive-anti-analysis-features/

Emotet looks for:
```
sample.*
mlwr_smple.*
artifact.exe
```
Reference: https://blog.trendmicro.com/trendlabs-security-intelligence/new-emotet-hijacks-windows-api-evades-sandbox-analysis/

It'd be cool if al-khaser had this check as well, for cases where someone uses the al-khaser binary to test out a sandbox.
https://twitter.com/sherrod_im/status/1140748556606644230
This approach is similar to the previous one, except that here you enable the
trap flag in the current process and check whether an exception is raised or
not. If an exception is not raised, you can assume that a debugger has “swallowed” the exception for us, and that the program is being traced. The beauty
of this approach is that it detects every debugger, user mode or kernel mode,
because they all use the trap flag for tracing a program. The following is a sample implementation of this technique. Again, the code is written in C for the
Microsoft C/C++ compiler.
```
BOOL bExceptionHit = FALSE;
__try
{
_asm
{
pushfd
or dword ptr [esp], 0x100 // Set the Trap Flag
popfd
// Load value into EFLAGS register
nop
}
}
__except(EXCEPTION_EXECUTE_HANDLER)
{
bExceptionHit = TRUE; // An exception has been raised –
// there is no debugger.
}
if (bExceptionHit == FALSE)
printf (“A debugger is present!\n”);
```
Just as with the previous approach, this trick is somewhat limited because
the PUSHFD and POPFD instructions really stand out. Additionally, some
debuggers will only be detected if the detection code is being stepped through,
in such cases the mere presence of the debugger won’t be detected as long the
code is not being traced.

This technique from https://github.com/wanttobeno/AntiDebuggers/blob/master/Tencent2016D.cpp#L541 and Reversing Secrets of Reverse Engineering book.

Need add to al-khaser?
Based on some experimentation, if these classes have no instances it's a good chance of being a VM:

Win32_CacheMemory, Win32_PhysicalMemory,
Win32_MemoryDevice, Win32_MemoryArray, Win32_VoltageProbe,
Win32_PortConnector, Win32_SMBIOSMemory, ThermalZoneInfo performance
counters, CIM_Memory, CIM_Sensor, CIM_NumericSensor,
CIM_TemperatureSensor, CIM_VoltageSensor, CIM_PhysicalConnector, and
CIM_Slot

For VirtualBox I also have some specific WMI detections:

* Win32_PnPDevice DeviceId values
* Win32_PnPDevice Name values (common controller devices (82801FB, 82441FX, 82371SB, OpenHCD)
* Win32_PnPDevice Name values containing VBOX
* Win32_Bus only having ACPIBus_BUS_0, PCI_BUS_0, PNP_BUS_0
* Win32_BaseBoard values ("VirtualBox", "Oracle Corporation")

