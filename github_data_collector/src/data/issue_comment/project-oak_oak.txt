Currently wasm nodes must declare and export an entrypoint function with type `(i64) -> (i32)`:

https://github.com/project-oak/oak/blob/7b2d6eff6e00162cb37e287571728f334e1c7f2b/oak/server/wasm_node.cc#L110-L111

The return type is meant to be used to represent an `OakStatus` value:

https://github.com/project-oak/oak/blob/7b2d6eff6e00162cb37e287571728f334e1c7f2b/oak/proto/oak_api.proto#L21-L45

There are a few issues with this:

- `OakStatus` was initially created to serve as the return value from host function calls; having it as return value from a node entry point may not necessarily make sense
- in particular, #475  added idiomatic `Result` types in the Rust SDK to wrap the status returned by the host function calls, and by using the `?` operator these errors can easily be propagated upstream, so that e.g. if a host function returned `ERR_CHANNEL_EMPTY` and it was not handled correctly, this would be returned as the return value of the node entrypoint, which may not be semantically accurate; also there are other categories of errors that do not necessarily map to `OakStatus` (e.g. protobuf serialization issues), which we would have to map to `ERR_INTERNAL`, and for which we would still have to rely on other logging mechanisms anyways in order to be preserved
- perhaps more importantly, once we introduce stricter labels / policies, the entrypoint return value creates effectively an output channel from any node (including those that have observed very secret data) to the runtime; while this is not an issue in itself, since the runtime is trusted, it is yet another potential source of covert / side channels, for instance if the runtime accidentally passed that to the untrusted host as part of a termination log message or similar

I propose we get rid of return values from a node entrypoint, and instead rely exclusively on proper logging mechanisms to ensure that errors are captured and logged at the level of the entrypoint (which we already do for the most part).

@project-oak/core thoughts?

@daviddrysdale in particular, I remember you were in favour of keeping this return value

More details on individual commit messages.
This change fixes TensorFlow example build in non-root Docker containers.

Fixes #476
I suggest the following architecture for the chat Oak Application:

- a gRPC entry node
- a "router" WebAssembly node, whose job is, for each incoming gRPC message, to inspect its associated label, create a new "room" node for each unique label, and hold a reference to the write end of a channel to the room node in a map; this is somewhat similar to what the current "frontend" node does:
  https://github.com/project-oak/oak/blob/6a2aa7315628a668ff3a091aa7f4b67e2f73f6c2/examples/chat/module_0/rust/src/lib.rs#L34-L37
  Except that the concept of "room id" would disappear, since a room would be uniquely identified by its label (assuming one room per label for now, i.e. the same set of participants may not have more than room).
  Note the router node does not implement the gRPC service interface, it merely inspects labels (which are public) and routes opaque messages to downstream nodes, therefore not getting tainted with any label itself. This may require some changes to the way the gRPC node forward requests, perhaps by introducing a new "read" channel alongside each message (which will also be useful for client streaming).
- the "room" node keeps any state relative to the current room, and participants who want to send a message to the same group of users (identified by the policy) would be routed to the same node 
When code in a wasm node panics, it will cause the node to abort. This leaves the rest of the application in a problematic state.

One option is to terminate the entire application when this happens.
At the moment the test hangs when the thread executing the code for a node panics, as it is waiting for a return value that never comes.

Since TensorFlow Lite requires `pthread` library, that is currently not implemented in `STANDALONE_WASM` Emscripten mode, we can try to experiment with the [TensorFlow Lite for Microcontrollers](https://www.tensorflow.org/lite/microcontrollers).

This issue is a continuation of the https://github.com/project-oak/oak/issues/439
Similar to

- https://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html
- https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html

We should have a higher-level way of interacting with channels. I suggest we layer things as follows:

- `oak_abi` defines the raw (and unsafe) host function calls
- the root of the SDK crate (`oak`) has thin safe wrappers around them, with idiomatic return types (#475) but not much more than that
- add `Sender` and `Receiver` traits in `oak::io` (also `Encodable` and `Decodable`, #457) that can be used for higher-level interactions with channels