This is more a question than an issue so feel free to remove this if not appropriate.

I am using the python library. I need to get a node of minimum degree. I noticed the GetMxDegNId function that does just the opposite. So I'm wondering, why is there no function that gets a node of minimum degree?

Is it because it isn't needed? In that case, is there a smart way to do that?

Thanks.
I didn't find any method relates to 1-hop neighbourhood, is that not included here?
Besides, it seems that the function `isLocalMin(int idx, double thresh)` in file "snap/snap-adv/localmotifcluster.cpp" line 681 doesn't match the definition in the paper.

I've searched for instructions about how to work with undirected weighted networks in the MAPPR community detection algorithm without success... Can someone tell me if it is possible to consider the weights in the clustering process and how to do it? My net is in an text file with <source id> <target id> <weight>
How to generate the Block Two-Level Erdos-Renyi (BTER) graphï¼Ÿ
node2vec is not deterministic, i.e. multiple runs will lead to different embeddings.

I am working with to very similar, but not identical graphs. If I compare their embeddings, it is not clear which changes are caused by the graphs being different, or simply by having done two different runs of embeddings.

Can this be somehow adressed?

Would setting the random seed to a fixed value address this?

If yes, _can_ the random seed be set to a fixed value?
Hi,
I'm having this problem. It runs ok with the karate edge list example but not working with my real example. This is the log:


```
(env) mwon@mwon:/disk2/MP2Vec/snap/examples/node2vec$ ./node2vec -i:/disk2/MP2Vec/results/adj_retweets.csv -o:/disk2/MP2Vec/results/emb_node2vec -l:10 -w -v

An algorithmic framework for representational learning on graphs. [Sep 23 2019]
================================================================================
Input graph path (-i:)=/disk2/MP2Vec/results/adj_retweets.csv
Output graph path (-o:)=/disk2/MP2Vec/results/emb_node2vec
Number of dimensions. Default is 128 (-d:)=128
Length of walk per source. Default is 80 (-l:)=10
Number of walks per source. Default is 10 (-r:)=10
Context size for optimization. Default is 10 (-k:)=10
Number of epochs in SGD. Default is 1 (-e:)=1
Return hyperparameter. Default is 1 (-p:)=1
Inout hyperparameter. Default is 1 (-q:)=1
Verbose output. (-v)=YES
Graph is directed. (-dr)=NO
Graph is weighted. (-w)=YES
Output random walks instead of embeddings. (-ow)=NO
Read 601823 lines from /disk2/MP2Vec/results/adj_retweets.csv
Preprocessing progress: 99.36% 
Walking Progress: 92.19%
Learning Progress: 91.68% 
terminate called after throwing an instance of 'TPt<TExcept>'
Aborted
```
make -C snap-core
make[1]: Entering directory '/home/james/software/snap/snap-core'
g++ -c -std=c++98 -Wall -O3 -DNDEBUG -fopenmp Snap.cpp -I../glib-core
In file included from ../glib-core/base.cpp:79:0,
                 from Snap.cpp:6:
../glib-core/bd.cpp: In function 'int _matherr(__exception*)':
../glib-core/bd.cpp:14:4: error: invalid use of incomplete type 'struct __exception'
   e->retval=0;
    ^
../glib-core/bd.cpp:13:21: note: forward declaration of 'struct __exception'
 int _matherr(struct __exception* e){
                     ^
In file included from ../glib-core/base.h:178:0,
                 from Snap.h:9,
                 from Snap.cpp:4:
../glib-core/bd.h: In instantiation of 'void TPt<TRec>::UnRef() const [with TRec = TNEANet]':
../glib-core/bd.h:480:15:   required from 'TPt<TRec>::~TPt() [with TRec = TNEANet]'
network.h:2015:54:   required from here
../glib-core/bd.h:472:31: warning: deleting object of polymorphic class type 'TNEANet' which has non-virtual destructor might cause undefined behaviour [-Wdelete-non-virtual-dtor]
       if (Addr->CRef.NoRef()){delete Addr;}
                               ^
Makefile:13: recipe for target 'Snap.o' failed
make[1]: *** [Snap.o] Error 1
make[1]: Leaving directory '/home/james/software/snap/snap-core'
Makefile:10: recipe for target 'MakeAll' failed
make: *** [MakeAll] Error 2
Could you guys add the license to the repo? The website says SNAP is licensed under the BSD license
The facility to handle exceptions with matherr has been removed on glibc 2.27, see http://man7.org/linux/man-pages/man3/matherr.3.html 
This patch disables the usage of this mechanism in the code with the newer versions of glibc.