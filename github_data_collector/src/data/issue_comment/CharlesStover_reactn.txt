Hello, 
as I am getting a better understanding of how internals of ReactN works I switched from the UNSAFE_componentWillUpdate to shouldComponentUpdate only if using React 16.3.x onwards, so the behavior for older Reacts is unchanged.

The only difference in behavior between componentWillUpdate and shouldComponentUpdate is that the first doesn't return anything while the second must return true if you want to simulate a function not been defined un user's class.

This should ensure compatibility with React 17.x onwards without using UNSAFE's methods.

Still a NOOB on TypeScript, apologizes if I used improper syntax, but all checks pass.
```jsx
import { addReducer, setGlobal, useDispatch, useGlobal, getGlobal } from "reactn";

// Initialize the global state with the value 0.
setGlobal({ value: 0 });

// When the increment reducer is called, increment the global value by X.
addReducer("increment", (global, dispatch) => ({
  value: global.value + 1
}));

const Post = props => {
  const increment = useDispatch("increment");
  const [global] = useGlobal();

  return (
    <>
      <Button
        onClick={() => {
          increment();
          // increment(global.value); // it works
        }}
      >
        {global.value}
      </Button>
    </>
  );
};
```
I'm using Expo with a web project and a native project that are both part of the same package / project / repo.

Is there any suggested way to structure multiple reactn stores for Typescript - one for the web and one for native? Using 'global.d.ts' you can't have multiple store type definitions it seems like.

The obvious answer seems to be to use Providers instead, but just curious if anyone else has come across this use case. I don't see documentation in the Providers readme on how to structure the typescript type definitions

EDIT: I also tried conditionally declaring the module by using a conditional on react-native Platform, but that didn't seem to work either.
This Issue serves as documentation for anticipated breaking changes in 3.0 and allows community feedback to drive the development process.

# Breaking Changes ðŸ’”

- Do not re-export React from `reactn`. Have users just import React and ReactN Component/hooks from separate packages. This will help with the namespace conflicts with `Component` in TypeScript.
- Remove support for `@reactn` decorator. Typing the decorator is difficult to maintain, and the feature is not often (if ever?) used.
- Property reducers/dispatchers to be moved to `addPropertyReducer` and `usePropertyDispatch` instead of sharing a namespace with `addReducer` and `useDispatch`.

# New Features âœ¨

- Since the decorator is removed, the project can be pure TypeScript with the "as MagicType" happening in `src/index.ts`.
- Since `addPropertyReducer` is given its own helper function, the property can be tightly coupled at the global level. `addPropertyReducer(property, reducer)` would be synonymous with `addReducer((global, dispatch, ...args) => ({ [property]: reducer(global[property], ...args) }))`. This may make some reducers easier to write.
- `useSelector('id')` as a simplified way to grab `global.x.y.z.mutate(f)`.
- Update the `/docs` app to reflect 3.0 as development occurs.
- Rerendering of multiple subscriptions are batched. #129 

# Undecided ðŸ“ƒ

- Try to officialize `type Reducers = typeof reducers` in `reactn/global.d.ts`.
- Use a different helper function for adding reducers that dispatch other actions.
  - `function reducer(global, ...args)` and `function reducer(global, dispatch, ...args)` should both be acceptable ways to write a reducer.
  - Forcing users to write the latter is annoying when the majority of reducers do not use the dispatch parameter.
  - This would require a verbiage change to describe reducers that dispatch and reducers that don't, e.g. `addReducer` and `addSaga`.
- Come up with solid verbiage for actions, reducers, dispatchers. The concept that actions and reducers are tightly coupled is not immediately obvious to users.
- Can the saga pattern be officialized? The global state manager has a concept of building up state changes before committing them. Should a commit/rollback method be exposed to saga reducers to allow them to build state before finalizing/committing it? Is the desired behavior of sagas to finish multiple state changes before re-rendering, or should the UI re-render as the state changes and the UI rolls back as the saga rolls back?
- Support deep-nested listeners? Perhaps only for objects that share an immediately prototype with Object or null, i.e. not instances of `Error`, etc. `useGlobal('x', 'y', 'z')`. On state change, check all global subscriptions for shallow keys, then check all matches for shallow key changes. Implementation direction could use fleshing out.

I've just started using reactn, when I switch to using 

import React, {Component} from 'reactn'

in all my classes where I have

class FooBar extends Component<FooProps, FooState> {
    constructor(props: FooProps) {
        super(props);

I'm getting the following for error for the call to super(props)

Expected 0 arguments, but got 1.

I'm using TypeScript 3.6.2.

If a component has be instantiated (constructor has executed) but not yet mounted, `this.updater` will be undefined. If the global state is accessed in the constructor, it will subscribe. If it changes before mount, it will attempt to update, throwing an error that `this.updater` does not exist.

Either check that `this.updater` exists or prevent subscribing in the constructor (if possible to differentiate).
`"react": "^16.8.1",`
`"reactn": "^2.1.4",`

When using reactn as: `import React, { Component } from 'reactn'`

TypeScript fails with the following:
```
Class static side 'typeof Form' incorrectly extends base class static side '{ propTypes?: WeakValidationMap<{}> | undefined; contextType?: Context<any> | undefined; contextTypes?: ValidationMap<any> | undefined; childContextTypes?: ValidationMap<any> | undefined; defaultProps?: Partial<...> | undefined; displayName?: string | undefined; getDerivedStateFromProps?: GetDerivedStateFromProps<.....'.
  Type 'typeof Form' is not assignable to type '{ propTypes?: WeakValidationMap<{}> | undefined; contextType?: Context<any> | undefined; contextTypes?: ValidationMap<any> | undefined; childContextTypes?: ValidationMap<any> | undefined; defaultProps?: Partial<...> | undefined; displayName?: string | undefined; getDerivedStateFromProps?: GetDerivedStateFromProps<.....'.
    Types of property 'getDerivedStateFromProps' are incompatible.
      Type '(nextProps: Props, prevState: State) => { prevPath: string; } | null' is not assignable to type 'GetDerivedStateFromProps<{}, {}>'.
        Types of parameters 'nextProps' and 'nextProps' are incompatible.
          Type 'Readonly<{}>' is not assignable to type 'Props'.
            Type 'Readonly<{}>' is missing the following properties from type 'RouteComponentProps<RouteParams, StaticContext, any>': history, location, match  TS2417

    54 | }
    55 | 
  > 56 | class Form extends Component<Props, State> {
       |       ^
    57 |   constructor(props: Props) {
    58 |     super(props)
    59 | 
```

@CharlesStover, do you have any idea why? Any help would be appreciated
In `src/index.ts`, the ReactN interface should not have `Component` and `PureComponent` defined, as these are defined in the `namespace` in order to maintain their generics.

The existence of this interface property prevents `class MyComponent extends React.Component` from being used with no generics.

TravisCI fails to build if they are missing in the interface, despite the build succeeding locally.

Investigate potential TypeScript version conflicts (delete all node modules and try local build again?)
Also did update and set global callback

Async elsewhere
