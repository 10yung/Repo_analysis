I tried to use noVNC from the master branch and run it in a subdirectory at http://127.0.0.1/novnc/vnc.html

But when I open this url, the `ui.js` script tries to download the http://127.0.0.1/package.json file which obviously does not exist. http://127.0.0.1/novnc/package.json exists instead.

https://github.com/novnc/noVNC/blob/2d53a785d521b29dbed9fbe0ec686ad2a34516bf/app/ui.js#L64

Is it a bug, am I doing something wrong, or subdirectory is not supported by design?
Limit mouse move events to one every 17 mS.
Supports RA2ne security type for compatibility with RealVNC servers
This PR adds support for automatic copy-pasting.
So when you are focused on the canvas and paste text it's pasted in the server and when you copy something in the server it's automatically copied to your local keyboard.

I've seen #1301 and #1174. But this takes a very different approach since it adds support for copy-pasting to noVNC's core. And I think that it's quite cleaner.

I've tested it in Safari, Firefox, and Chrome.
Unfortunately, the Clipboard API is only supported by Chrome and the `paste` event is broken (see https://bugs.chromium.org/p/chromium/issues/detail?id=634426).
So it just does nothing in Safari and Firefox, while in Chrome the copying of data works but not the pasting.

So, for now, this is not super useful but it should become better as browser support improves.

WDYT?
This PR is an initial step towards #1267 
It separates the mouse event handling from the touch event handling.

A separate step could be to implement multiple Touch modules for different interaction styles a.k.a convert touch events to mouse events in different ways.
For example, one that would work for me would be something like:

| Touch action | Click event |
|------|------|
| Single Tap| Click|
| Long press | Right-click (contextmenu or click event)|
| Press and then drag | Click and drag (mousemove event) |
| Two-finger press and drag | Pan (Wheel event)|
| Two-finger pinch | Zoom (Not sure of the events here) |

A library like hammer.js would make such implementations very easy.
**Describe the bug**
If the remote desktop is larger than the browser window on macOS or ChromeOS you see some small scrollbars for a short period of time before they disappear for good.

**To Reproduce**
Steps to reproduce the behavior:
1. Using any browser on macOS or ChromeOS open noVNC and a remote connection
2. Ensure that the setting "Clip to Window" is disabled
3. Ensure that the setting "Scaling Mode" is set to "None"
4. Make the browser window smaller than the remote desktop
5. Observe the invisible scrollbars

**Expected behavior**
I don't expect scrollbars to be available on platforms that use these types of scrollbars. On iOS and Android the browsers typically behave the same way, and on these platforms, noVNC doesn't allow scrollbars and instead force clipping. I think we should do the same on macOS and ChromeOS.

**Client (please complete the following information):**
 - OS: macOS 10.15 or ChromeOS
 - Browser: Safari, Chrome, Firefox
 - Browser version: most recent versions available

**Server (please complete the following information):**
 - noVNC version: master (80b078c)
 - VNC server: TigerVNC
 - WebSocket proxy: websockify

**Describe the bug**
While holding a click with one mouse button and simultaneously clicking with another mouse button will result in that the second mouse click never gets through.

**To Reproduce**
Steps to reproduce the behavior:
1. Connect using noVNC
2. Monitor mouse events using 'xev' in a terminal on the remote
3. Press the left mouse button but don't release it
4. Click with the right mouse button
5. Release the left mouse button
6. Observe that the right click never got sent to the remote

**Expected behavior**
I expect all mouse clicks to get sent

**Client (please complete the following information):**
 - OS: Fedora 30
 - Browser: Chrome
 - Browser version: 77

**Server (please complete the following information):**
 - noVNC version: master (412d930)
 - VNC server: TigerVNC
 - WebSocket proxy: websockify

**Additional context**
It works fine on Firefox


**Describe the bug**

In Chrome 77(and 78), when running noVnc on a canvas object, if we switch to a different browser tab memory stops being garbage collected and fills up to the brim(graphics memory and then system ram).

**To Reproduce**
Steps to reproduce the behavior:

1. Access www.demodesk.com/manage
2. Create a free account
3. Start a demo(Via Meet Now button)
4. Share more => local desktop => share local desktop
5. Inspect memory consumption(disabling hardware acceleration helps visualize the problem since the graphics card memory will not be touched)

**Expected behavior**
The memory used should drop every couple of seconds(garbage collected)

**Client (please complete the following information):**
 - OS: Mint 18.2(Linux 4.8.0-53-generic x86_64)
 - Browser: Chrome
 - Browser version: 77 & 78

**Server (please complete the following information):**
 - noVNC version: commit id: 8acadd9e972b72eb5667e397c9dac07feca78949
 - VNC server: TigerVNC
 - WebSocket proxy: websockify

**Additional context**

I'm aware that this is exclusively a Chrome issues(since Chrome 76 worked perfectly fine), but I'm filing in case it helps narrow down the problem.

This seems to happen if the canvas is not being directly visualized(either running in a different tab or being set do `display: none`)

I've also tested on the latest release of noVNC, **1.1.0**, and the issue persisted.

Firefox does not seem to have this problem.

I've been able to also reproduce it on a Mac system.

-------------------
P.S. Thanks a lot for the noVNC project. It's awesome what you guys managed to do.

I'll appreciate any help or input into this issue. Thank you for your time!

Hi!
I added the automatical copy-paste function that is available through the `navigator.clipboard` API in some browsers (e.g. Google Chrome) as mentioned earlier in PR #1174.

Co-authored-by: bulldozier <kentdozier@gmail.com>