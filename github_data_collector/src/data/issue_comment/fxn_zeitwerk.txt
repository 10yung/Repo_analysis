Hi, I think Zeitwerk's gets messed up by Bundler's `reverse_rubygems_kernel_mixin` internal method.

I'll do my best to explain the initial issue and what I've found so far.
On the app I'm working on we had an issue where Karafka wouldn't fail on launch (launched with `bundle exec foreman start karafka`), raising a `LoadError - file not found 'app/channels/application_cable'`. 
As the path is a folder and not an actual ruby file, it seems like it should've been autovivified instead of being `require`d by the app. So I went digging some more and it appears that even though the `require` method defined in lib/zeitwerk/kernel.rb is called at the beginning of the application initialization, as soon as the app reaches `config/application.rb` (more specifically `Bundler.require(*Rails.group)`), Bundler tries to setup, which includes a call to `reverse_rubygems_kernel_mixin`, resetting `Kernel#require` to its original version and overwriting Zeitwerk's modifications to it.

I don't really know how to fix it, and I don't know why we only encounter it when launching our karafka process and not on the rails server one, but I'm open to ideas on how we could solve this.

For now we had to resort to defaulting back on the `:classic` loader, which I'm not a big fan of but does the work.

I also have opened an issue on Bundler's repository (bundler/bundler#7553).

----
#### If you have the same issue and stumbled on this, here are some workarounds we've found:
- Falling back to the `:classic` autoloader (`config.autoloader = :classic` in `config/application.rb`)
- Using a binstub (`bundle binstub <library>`) in the Procfile for the library instead of the `bundle exec` call (`service: bin/<library>` instead of `service: bundle exec <library>`)