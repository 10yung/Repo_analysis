It is looking for 

/usr/local/lib/libIlmImf-2_2.22.dylib 

but I have a different file 

/usr/local/lib/libIlmImf-2_3.24.dylib

I think I need to run some mexfile to update the binaries in RenderToolbox4_binary, but I am not sure which one.

Error for recipe "luminance-0_3500-reflectance-001-BigBall-Library":
Invalid MEX-file '/Users/julian/Documents/MATLAB/toolboxes/RenderToolbox4_binary/build/ReadMultichannelEXR.mexmaci64': dlopen(/Users/julian/Documents/MATLAB/toolboxes/RenderToolbox4_binary/build/ReadMultichannelEXR.mexmaci64, 6): Library not loaded: /usr/local/lib/libIlmImf-2_2.22.dylib
  Referenced from: /Users/julian/Documents/MATLAB/toolboxes/RenderToolbox4_binary/build/ReadMultichannelEXR.mexmaci64
  Reason: image not foundSaving error info to "/Volumes/G-DRIVE USB/VirtualWorldColorConstancy/StimuliCondition2_covScaleFactor_0_001_NoReflection/Originals/Errors/luminance-0_3500-reflectance-001-BigBall-Library.mat":

Hi there, 

I am trying to revive some RenderToolbox3 code and want to first make it run on RenderToolbox4 and eventually migrate it. I installed Version 4 but get an error in trying to render an example scene (in this case rtbMakeLightFieldSphere.m)

```
rtbMakeSimpleSphere

MakeSceneFiles started at 24-Jul-2019 15:50:26.

Using strategy RtbAssimpStrategy


strategy = 

  RtbAssimpStrategy with properties:

                                hints: [1×1 struct]
                           importArgs: {'ignoreRootTransform'  [1]  'flipUVs'  [1]}
                         mappingsArgs: {[1×1 struct]}
         remodelOnceBeforeAllFunction: []
    remodelPerConditionBeforeFunction: []
     remodelPerConditionAfterFunction: []
                            converter: [1×1 RtbAssimpMitsubaConverter]
                             renderer: [1×1 RtbMitsubaRenderer]


MakeSceneFiles started with isParallel=0 at 24-Jul-2019 15:50:27.


nConditions =

     1


conditionValues =

  0×0 empty cell array


MakeSceneFiles finished at 24-Jul-2019 15:50:27 (0.6s elapsed).

Using strategy RtbAssimpStrategy


BatchRender started with isParallel=0 at 24-Jul-2019 15:50:28.


Starting scene 1 of 1 at 24-Jul-2019 15:50:28 (0.0s elapsed).

docker run -ti --rm --user="1158290076":"1158290076" --workdir="/Users/gizem/Documents/MATLAB/render_toolbox/rtbMakeSimpleSphere" --volume="/Users/gizem/Documents/MATLAB/render_toolbox/rtbMakeSimpleSphere":"/Users/gizem/Documents/MATLAB/render_toolbox/rtbMakeSimpleSphere" --volume="/Users/gizem/Documents/MATLAB/toolboxes/RenderToolbox4":"/Users/gizem/Documents/MATLAB/toolboxes/RenderToolbox4" rendertoolbox/mitsuba-spectral mitsuba -o "/Users/gizem/Documents/MATLAB/render_toolbox/rtbMakeSimpleSphere/renderings/Mitsuba/scene-001.exr" "/Users/gizem/Documents/MATLAB/render_toolbox/rtbMakeSimpleSphere/scenes/Mitsuba/scene-001.xml"
Invalid MEX-file '/Users/gizem/Documents/MATLAB/toolboxes/RenderToolbox4_binary/build/ReadMultichannelEXR.mexmaci64':
dlopen(/Users/gizem/Documents/MATLAB/toolboxes/RenderToolbox4_binary/build/ReadMultichannelEXR.mexmaci64, 6): Library
not loaded: /usr/local/lib/libIlmImf-2_2.22.dylib
  Referenced from: /Users/gizem/Documents/MATLAB/toolboxes/RenderToolbox4_binary/build/ReadMultichannelEXR.mexmaci64
  Reason: image not found.

Error in rtbReadMultichannelEXR (line 23)
[channelInfo, imageData] = ReadMultichannelEXR(exrFile);

Error in rtbReadMultispectralEXR (line 39)
[sliceInfo, imageData] = rtbReadMultichannelEXR(exrFile);

Error in RtbMitsubaRenderer/render (line 124)
            [image, ~, sampling] = rtbReadMultispectralEXR(outFile);

Error in rtbBatchRender>renderScene (line 101)
    strategy.renderer.render(scene);

Error in rtbBatchRender (line 85)
        outFiles{ii} = renderScene(strategy, nativeScenes{ii}, versionInfo, hints);

Error in rtbMakeSimpleSphere (line 34)
    radianceDataFiles = rtbBatchRender(nativeSceneFiles, ...

```
My system is Mac OS 10.14, MATLAB_R2018a. 
I tried to downgrade openexr thinking it is an unsupported version issue but couldn't get that to run either. I even tried converting back to RenderToolbox3 with no success. 
Also, I was able to run rtbMakeReadMultiChannelEXR.m and generate the output sphere images so at this point I am not even sure if the error is due to OpenEXR or something else. 

Thanks for the help!
Gizem
I think there may be a mistake in the wiki documentation for Conditions Files. It says that `sceneFile` is the keyword variable that specifies a different scene than the `parentSceneFile` stated in the exec script. The keyword variable for Conditions Files should be `parentScene`.
e.g.

imageName | parentScene
------------ | -------------
nightCafe | myCafeScene.dae
nightPark | myParkScene.dae

Best,
Joshua
We've occasionally run into this issue where sometimes the rendered images are flipped horizontally.  I've tracked down the issue to the following:

If you are not using the remodeler, the following line:

`[scene, mappings] = strategy.applyBasicMappings(scene, mappings, names, conditionValues, cc);`

in _rtbMakeSceneFiles.m_ applies a mapping transformation which flips the x-axis on the camera. This transformation is first generated in _loadDefaultMappings_ in _RtbAssimpPBRTConverter.m_. This flip produces images that are correctly oriented with respect to the original Blender scene. 

However, if we move the camera in your mexximp Remodeller, the camera is reset again in the following line:

`[scene, mappings] = strategy.remodelPerConditionAfter(scene, mappings, names, conditionValues, cc);
`

And the mapping transformation seen in the default mappings is lost. The x-axis is flipped (incorrectly) in these images with respect to the original Blender scene.

This needs to be fixed and investigating more carefully. First off, we need to determine why the flip is necessary in the first place?
I am seeing the usage of an informal 'camera' or 'cameras' or 'placedCameras' a lot these days.  There is no guarantee that these different usages are compatible - same slots, sizes, units.  I should look through the code for examples and consider how we might formalize, possibly coordinating with the 'camera' object in ISET/CISET.
In a number of places, and rtbCamerasPlace is one example, there are factors that scale by 1000 to deal with meters and millimeters.  There are rarely comments about this near the code.  We need to catch these locations and deal with units more explicitly.

This might all be relatively new with code from HB and me.  If we don't deal with the units throughout, say distance is sometimes meters and sometimes millimeters, we will have long term problems. 
I spent a good amount of time the last day or so unsuccessfully trying to install RTB4 on a Windows machine and wanted to share and log my experience. 

Installing Docker went smoothly. The only unique thing you may need to do is enable virtualization on the BIOS settings for your machine. On an ASUS motherboard, it was under Advanced Settings → CPU Configuration.

After cloning all the repositories, the next step was to install Assimp and compile mexximp. This turned out to be the unsolvable roadblock for me.

To compile mexximp, we have to 1) compile Assimp on Windows and 2) [Install a C++ compiler for MATLAB](https://www.mathworks.com/matlabcentral/fileexchange/52848-matlab-support-for-mingw-w64-c-c++-compiler) and 3) link the compiled library when running mex.

I was able to complete step (1) by cloning the repo, running cmake, and then building it in Visual Studio. Step (2) was very straightforward, as long as you follow the MATLAB instructions. However step (3) seemed to be the major issue. No matter how I tried to link the library and include files, it could not seem to link properly to Assimp and would complain about not being able to find any of the Assimp classes. 

I eventually gave up on this, and I now run RTB4 on OSX and then send the docker run commands over to the Windows machine to run, which I suppose is similar to what we do with cloud computing.

I think if we want to get this to work on Windows, we may need to dockerize Mexximp/Assimp, if that is even possible...
At Stanford, we only want to test PBRT.  I should add a flag that tests only PBRT (or Mitsuba), since we don't even install the Mitsuba version.
Currently, Matlab interfaces with the OpenEXR library via the in-memory mex function interface.  This is an efficient interface.

However, it has become difficult to build, maintain, and distribute mex functions that use shared libraries like OpenEXR.  Two main reasons are:
 - On OS X, Matlab's mex build configuration often goes out of date with respect to the OS X/XCode build tools.
 - On Linux, Matlab distributes and loads its own version of system libraries like `libstdc++`, which may be incompatible with the library versions that are required for shared libraries like OpenEXR (see #20 ).

To alleviate these problems, we should decouple ReadMultichannelEXR from the Matlab mex function interface.  We should make ReadMultichannelEXR into a stand-alone utility for reading and writing OpenEXR files to and from a simple structured representation, like [ubjson](http://ubjson.org/).

We could continue to use ReadMultichannelEXR from Matlab by reading and writing ubjson files or streams, for example with [jsonlab](https://github.com/fangq/jsonlab).  We could choose the format of the ubjson representation to match the current ReadMultichannelEXR data format.  We could include an m-function wrapper with the same behaviors as the current ReadMultichannelEXR mex-function, and minimize the impact on existing ReadMultichannelEXR code.

As a stand-alone tool, the ubjson version of ReadMultichannelEXR would have several advantages:
 - easier to build
 - available to use for Matlab-based projects
 - available to use for non-Matlab-based projects
 - able to be distributed as a Docker image

In RenderToolbox4, it's possible to make scene adjustments using "remodeler" hook functions in addition to or instead of a mappings file.  The [Flythrough](https://github.com/RenderToolbox/RenderToolbox4/wiki/Flythrough) example is the best example of this so far.

We should add more documentation for how to set up remodeler hooks, and how to use them.  Some specific examples that would be good:
  - How to remove an existing point light?
  - How to assign spectra to surfaces?

The new documentation should explain:
  - What hooks are available and how to assign functions to the hooks.
  - The function signature required for hook functions.
  - Description of remodelers that work on the mexximp scene struct.
  - Description of remodelers that work on the mMitsuba or mPbrt native scene representation.
  - Examples of useful operations, like the two above.
