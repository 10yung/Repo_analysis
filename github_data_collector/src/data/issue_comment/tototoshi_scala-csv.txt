Ignore the case where the escape char is not the quote and is used in
the content.
Hi!

I am wondering is anybody interested in adding feature of writing/reading custom classes (at least product types) into CSV? Something similar to what [circe](https://github.com/circe/circe) does for JSON?
A user has uploaded a CSV which uses solely carriage return (CR, or `\r`) characters for their newlines. The current `SourceLineReader.readLineWithTerminator` handles this by successfully reading in the header row and then discarding the rest. We want it to display every row in the CSV.

We run something like this:

```scala
// get a blob from Google Cloud Platform storage
val spreadsheetSource = Source.fromInputStream(Channels.newInputStream(blob.reader()))
val reader = CsvReader.open(spreadsheetSource)
val lines = reader.all()
// lines: List[List[String]] = List(List("First Name", " Last Name", " email"))
```

This is despite the fact that the file we're reading from has five lines. I have also tried this with `Source.fromFile`, and there's no difference.

I created the file from a normal CSV with `LF`-style line endings, and then ran this bash command:

```bash
$ tr '\n' '\r' < fnln.csv >fnln.cr.csv
```

Side note: why can't we use `Source`'s built-in `getLines` function? Is there a reason that we need the line terminator in each string?
Instead of change `CSVParser.parse` to handle `QUOTE_NONE`,
I simply deleted all quote related branches and states in `CSVParser.parse` and get `CSVParserQuoteNone.parse`.
Ihis will make `CSVParserQuoteNone.parse` faster.
When calling toStreamWithHeaders.head two times it takes the headers correctly on the first call, the second call it used the next line as header-line. 
```scala

import com.github.tototoshi.csv.{CSVWriter, DefaultCSVFormat}
import play.api.libs.json.Json

implicit object MyCSVFormat extends DefaultCSVFormat {
  override val escapeChar: Char = '\\'
}

val writer = CSVWriter.open(new java.io.OutputStreamWriter(System.out))
writer.writeRow(Seq(1, Json.obj("created" -> System.currentTimeMillis().toString), ","))
import com.github.tototoshi.csv.{CSVWriter, DefaultCSVFormat}
```

returns `1,"{""created"":""1549966608854""}",","`, but I expect `1,"{\"created\":\"1549966608854\"}",","`
Hi Toshiyuki,

I've used your library in many projects, recently I've been using scala.js quite a lot and I was missing a good csv library so I've tried to do a porting of your library, and actually it was quite simple so here the pull request.

It didn't changed the API for the JVM, i've just added an object `CSV` to access read and write directly (without writing or reading a file).

The method in CSV are:
```
def read(input: String)(implicit format: CSVFormat): List[List[String]]
def writeAll(input: Seq[Seq[String]])(implicit format: CSVFormat): String
def writeRow(input: Seq[String])(implicit format: CSVFormat): String 
```

It would be great if you could merge my pull request and release it on the maven repository, I guess also for the library to be listed between the libraries that are supporting scala.js would be a good visibility.

Regards and thank you for your great work

Andrea


Example:

```scala
import java.io.ByteArrayInputStream
import java.io.InputStreamReader

import com.github.tototoshi.csv.CSVReader

object App extends App {
  val csv = ",퀙䘘縤ઞ◒䘬掤⢶坪⁓匕ମҀꑤꇮ腋觯\uE5D8\uE564栚ℑ钺剸蕁耥믠鐛挀쐜麂\uE6BF슊䧩奌쒒\u0085䃡썙츚祉≔轾╠扒㱉鞎뽖븢暩䜄蚂\uE0F4窏\uEF66㋡\uEAC8\uEDEE\uF172秊ӥ붝ヴ恢둊\uEE65\uED46\uF4AC쫎,,,,2018-10-04T20:23:15.639Z,,,,,,,,,,,233299423,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Ⓑ쁖僂\uEF95䳀呇捧動瀼䂲殆䶐훥鼟쿠덠Ớ땄礪\uEEF4ἳ홤篏碽⪎ʞ昉\uF7E2\u0B29걫雘᪆脟\uEE43ᠪ뒤栗\uE487ɦ瀻\uE4AF뮲\uEF5B橾\uF358ᝬﭧ薪쉶䗹훴殊Ӯ\u0FF2ᢦ\uD7A9묬鼃\uEFBF䀌럚ᆾ掽呈콒ᶿ蟡䵫䃽ꅡᠹ檸ⰹ\uA4CA뢳ᑤ\uE57D웪ⷹ\uF436槵巸貉ﻥگ쁸㎿顲鱿뽿쒏﹪\uEB34浱ퟲ驊,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,-7.147540834511315E-49,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2018-10-04T09:54:28.639Z,,,,,,,,,"

  val input = new InputStreamReader(new ByteArrayInputStream(csv.getBytes("UTF-8")))

  val res = CSVReader.open(input).all()

  println(res)
}
```

The output is:

```
List(List(, 퀙䘘縤ઞ◒䘬掤⢶坪⁓匕ମҀꑤꇮ腋觯栚ℑ钺剸蕁耥믠鐛挀쐜麂슊䧩奌쒒), List(䃡썙츚祉≔轾╠扒㱉鞎뽖븢暩䜄蚂窏㋡秊ӥ붝ヴ恢둊쫎, , , , 2018-10-04T20:23:15.639Z, , , , , , , , , , , 233299423, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , Ⓑ쁖僂䳀呇捧動瀼䂲殆䶐훥鼟쿠덠Ớ땄礪ἳ홤篏碽⪎ʞ昉଩걫雘᪆脟ᠪ뒤栗ɦ瀻뮲橾ᝬﭧ薪쉶䗹훴殊Ӯ࿲ᢦ힩묬鼃䀌럚ᆾ掽呈콒ᶿ蟡䵫䃽ꅡᠹ檸ⰹ꓊뢳ᑤ웪ⷹ槵巸貉ﻥگ쁸㎿顲鱿뽿쒏﹪浱ퟲ驊, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , -7.147540834511315E-49, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 2018-10-04T09:54:28.639Z, , , , , , , , , ))
```

But, the second value was supposed to be `퀙䘘縤ઞ◒䘬掤⢶坪⁓匕ମҀꑤꇮ腋觯栚ℑ钺剸蕁耥믠鐛挀쐜麂슊䧩奌쒒䃡썙츚祉≔轾╠扒㱉鞎뽖븢暩䜄蚂窏㋡秊ӥ붝ヴ恢둊쫎`! instead, it was truncated to ` 퀙䘘縤ઞ◒䘬掤⢶坪⁓匕ମҀꑤꇮ腋觯栚ℑ钺剸蕁耥믠鐛挀쐜麂슊䧩奌쒒`
None
This way all the APIs that use "with headers" is guaranteed to be in same order