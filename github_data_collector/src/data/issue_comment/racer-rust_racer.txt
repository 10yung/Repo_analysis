Trying to use racer with deoplete-rust.  Getting these option unwrapping panicks all over the place.  Here's one reliable way to duplicate at least one of them:

With racer v2.1.28:

1) Run racer on [this](https://github.com/rust-lang/rust/blob/91642e3ac0120c8e9cdd5f3c85ad03f3bf1b8b69/src/libsyntax/util/parser.rs#L1) file:
```bash
$ git clone https://github.com/rust-lang/rust
$ cd rust
$ git checkout 91642e3ac0120c8e9cdd5f3c85ad03f3bf1b8b69
$ racer complete 1 0 src/libsyntax/util/parser.rs
PREFIX 0,0,
thread 'searcher' panicked at 'called `Option::unwrap()` on a `None` value', /rustc/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src/libcore/macros/mod.rs:15:40
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
ERROR 2019-11-25T21:27:39.310446000Z: racer: Search thread panicked: Any
END
```
racer fails to lookup symbols which are made available by `std::include!()`.

E.g.

#### `main.rs`

   ```rust
   std::include!("common.inc-rs");

   fn main() {
       crate::bar::foo()
	   //           ^
   }
```
#### `common.inc-rs`

   ```rust
   mod bar;
```

### `bar.rs`
   ```rust
   pub fn foo() {}
```

does not return a result

```
$ racer find-definition 4 17 main.rs
END
$
```

Position "4 17" is the  `foo` in the function call.


racer 2.1.28; built with 1.41.0-nightly (5c5b8afd8 2019-11-16)

racer 2.1.28

The line/col info (see below) is one char too early if it has CRLF line endings.

Racer command:

```
racer complete 2 16 main.rs
```

main.rs:

```
fn f() {
    let _ = E::E0;
}
enum E {
    E0,
    E1,
    E2,
    E3,
    E4,
    E5,
    E6,
    E7,
    E8,
    E9,
    E10,
}
```

CRLF line endings (wrong):

```
PREFIX 25,26,E
MATCH E0,5,3,main.rs,EnumVariant,E0,
MATCH E1,6,2,main.rs,EnumVariant,E1,
MATCH E10,14,2,main.rs,EnumVariant,E9,
MATCH E2,7,1,main.rs,EnumVariant,E2,
MATCH E3,8,0,main.rs,EnumVariant,E3,
MATCH E4,8,8,main.rs,EnumVariant,
MATCH E5,9,7,main.rs,EnumVariant,
MATCH E6,10,6,main.rs,EnumVariant,,
MATCH E7,11,5,main.rs,EnumVariant,6,
MATCH E8,12,4,main.rs,EnumVariant,E7,
MATCH E9,13,3,main.rs,EnumVariant,E8,
END
```

LF line endings (correct):

```
PREFIX 24,25,E
MATCH E0,5,4,main.rs,EnumVariant,E0,
MATCH E1,6,4,main.rs,EnumVariant,E1,
MATCH E10,15,4,main.rs,EnumVariant,E10,
MATCH E2,7,4,main.rs,EnumVariant,E2,
MATCH E3,8,4,main.rs,EnumVariant,E3,
MATCH E4,9,4,main.rs,EnumVariant,E4,
MATCH E5,10,4,main.rs,EnumVariant,E5,
MATCH E6,11,4,main.rs,EnumVariant,E6,
MATCH E7,12,4,main.rs,EnumVariant,E7,
MATCH E8,13,4,main.rs,EnumVariant,E8,
MATCH E9,14,4,main.rs,EnumVariant,E9,
END
```

I am running `cargo +nightly install --path . --all-features` against the current source (`99a830229c974d5f7ca227e3a66a60d5dba6423a`), and getting many compile errors.

*edit: `cargo +nightly install racer` works for me.*

I am getting

>    Compiling rustc-ap-syntax v610.0.0
> error[E0407]: method `mixed_site` is not a member of trait `server::Span`
>    --> /home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-syntax-610.0.0/ext/proc_macro_server.rs:669:5
>     |
> 669 | /     fn mixed_site(&mut self) -> Self::Span {
> 670 | |         self.mixed_site
> 671 | |     }
>     | |_____^ not a member of trait `server::Span`

and lots of errors like

> error[E0658]: use of unstable library feature 'mem_take'
>     --> /home/martin/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-ap-syntax-610.0.0/parse/parser.rs:1535:22
>      |
> 1535 |                 Some(mem::take(list))
>      |                      ^^^^^^^^^
>      |
>      = note: for more information, see https://github.com/rust-lang/rust/issues/61129
>      = help: add `#![feature(mem_take)]` to the crate attributes to enable

For your information:

> rustc -V
> rustc 1.37.0 (eae3437df 2019-08-13)
> 
> uname -a
> Linux starnova 4.4.154-59-rockchip-g5e70f14 #4 SMP Fri Dec 14 20:55:41 CST 2018 aarch64 aarch64 aarch64 GNU/Linux

https://github.com/rust-lang/rust/issues/39412
Because of this now we cannot complete some builtin macros in `libcore/macros.rs`
```
#![allow(warnings)]
#![feature(async_await)]
use std::io;

use futures::prelude::*;
use futures::StreamExt;
use futures::executor::{self, ThreadPool};
use futures::io::AsyncWriteExt;
use futures::io::AsyncReadExt;
use futures::task::{SpawnExt};

use hyper::server::*;
use hyper::server::conn::*;
use hyper::service::service_fn_ok;
use hyper::{Body, Request, Response};

use romio::tcp::{TcpListener, TcpStream};

async fn listen() -> io::Result<()> {
    let mut listener = TcpListener::bind(&"127.0.0.1:8000".parse().unwrap())?;
    let mut streams = listener.incoming();

    while let Some(stream) = streams.next().await {
        let service = service_fn_ok(|req: Request<Body>| {
            Response::new(Body::from("Hello, World!"))
        });
    }

    Ok(())
}

fn tag(in: String) {

}

fn main() {

}
```

`racer complete 32 8 src/main.rs` results in `ERROR 2019-07-19T03:36:40.729973000Z: racer: Search thread panicked: Any`. I tried to minify the example but any code that I remove now avoids the panic for some reason.
   Compiling smallvec v0.6.10
error[E0554]: #![feature] may not be used on the stable release channel
Racer isn't able to complete modules that looks like `my_module.rs`, `my_module/sub_mod.rs` (https://doc.rust-lang.org/nightly/edition-guide/rust-2018/module-system/path-clarity.html#no-more-modrs).
Changing to `my_module/mod.rs`, `my_module/sub_mod.rs` makes it work again.
I realize it's not correct syntax, but the splatter of panic errors on IDE integrations are intrusive.

```
use std::str;
// line 3 col 6 below
str.f
```

`racer complete 3 6 main.rs`

```
PREFIX 801,802,f
thread 'searcher' panicked at 'Failed load file "": Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/libcore/result.rs:999:5
stack backtrace:
   0: std::panicking::default_hook::{{closure}}
   1: std::panicking::default_hook
   2: std::panicking::rust_panic_with_hook
   3: std::panicking::continue_panic_fmt
   4: rust_begin_unwind
   5: core::panicking::panic_fmt
   6: core::result::unwrap_failed
   7: racer::core::FileCache::load_file
   8: <racer::core::Session as racer::core::SessionExt>::load_source_file
   9: <racer::ast::ExprTypeVisitor as syntax::visit::Visitor>::visit_expr
  10: scoped_tls::ScopedKey<T>::set
  11: syntax::with_globals
  12: racer::ast::get_type_of
  13: racer::core::complete_from_file_
  14: racer::core::complete_from_file
  15: racer::run_the_complete_fn
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
ERROR 2019-06-21T18:19:29.406766000Z: racer: Search thread panicked: Any
END
```

```
nightly-x86_64-apple-darwin (default)
```
I have racer mainly working now but I can't get it to complete fields within a struct or methods for that struct. When I try and complete structs from a crate ("cgmath::" then autocomplete) that seems to work. When I try and autocomplete a field or method ("v2.") that doesn't seem to return anything. Are fields and methods supported? Thanks for helping look into this!

```
Windows 10.0.17134
rustc --version: rustc 1.35.0 (3c235d560 2019-05-20)
cargo --version: cargo 1.35.0 (6f3e9c367 2019-04-04)
racer --version: racer 2.1.22
rustup --version: rustup 1.18.3 (435397f48 2019-05-22)
echo %CARGO_HOME%: C:\Users\spenc\.cargo
echo %RUST_SRC_PATH%: C:\Users\spenc\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib\rustlib\src\rust\src
```
main.rs
```
extern crate cgmath;

use cgmath::

fn main() {
    let v2 = Vector2::new(1.0, 2.0);
    v2.
    println!("{:#?}", v2.yy());
}
```

cargo.toml
```
[package]
name = "luxr"
version = "0.1.0"
authors = ["Spencer MacKinnon <spencer@spencermackinnon.com>"]
edition = "2018"

[dependencies]

[dependencies.cgmath]
version = "0.17.0"
features = ["swizzle"]
```