**Status:** experimental for now

AnimWavesAddFromTex - generate displacements from heights

Uses forward differences to compute derivates and displace proportionally.
Similar to how the disps are generated from the dynamic wave sim.

@skaughtx0r - is this still of interest? i think you mentioned you're using a different approach to get the displacements but thought i'd ask.

**Describe the bug**
I found the same issue here: https://github.com/crest-ocean/crest/issues/116 but I noticed that it's already implemented in the script. However, I still have this problem in my scene.

I usually set `camera.useOcclusionCulling = false;` but since the script that comes with Crest uses the attached camera instead of a dedicated camera it would disable occlusion culling altogether.

**Screenshots / video**
https://media.giphy.com/media/QYwFipmOpF6vrEdeo2/giphy.gif

**Log**
No warnings/errors

**Versions**
Built-in, 2019.3.0f3

**To Reproduce**
Like usual. Bake the occlusion and apply the planar script to the camera.

**Platform**
 - Windows 10

**Hardware**
GTX 1070, i7 4770k

Getting an IndexOutOfRangeException in Crest.QueryBase.UpdateQueryPoints().

I started to try and make a reproducible project with just the DWP2 demo scene and Crest and it just errors immediately, the water never renders, and all the water objects just fall.

It seems the issue is that there is a s_maxQueryCount set to 4096 and if that gets exceeded, exceptions start to get spammed.

**Log**

The following errors are spammed repeatedly in the log.

```
IndexOutOfRangeException: Index was outside the bounds of the array.
Crest.QueryBase.UpdateQueryPoints (System.Int32 i_ownerHash, Crest.SamplingData i_samplingData, UnityEngine.Vector3[] queryPoints, UnityEngine.Vector3[] queryNormals) (at Assets/Crest/Crest/Scripts/Collision/QueryBase.cs:245)
Crest.QueryDisplacements.Query (System.Int32 i_ownerHash, Crest.SamplingData i_samplingData, UnityEngine.Vector3[] i_queryPoints, System.Single[] o_resultHeights, UnityEngine.Vector3[] o_resultNorms, UnityEngine.Vector3[] o_resultVels) (at Assets/Crest/Crest/Scripts/Collision/QueryDisplacements.cs:61)
DWP2.CrestWaterDataProvider.GetWaterHeights (UnityEngine.Vector3[]& p0s, UnityEngine.Vector3[]& p1s, UnityEngine.Vector3[]& p2s, System.Single[]& waterHeights0, System.Single[]& waterHeights1, System.Single[]& waterHeights2, UnityEngine.Matrix4x4[]& localToWorldMatrices) (at Assets/DWP2/Dynamic Water Physics 2/Scripts/WaterObject/WaterDataProvider/CrestWaterDataProvider.cs:104)
DWP2.WaterObjectManager.Schedule () (at Assets/DWP2/Dynamic Water Physics 2/Scripts/WaterObject/WaterObjectManager.cs:475)
DWP2.WaterObjectManager.FixedUpdate () (at Assets/DWP2/Dynamic Water Physics 2/Scripts/WaterObject/WaterObjectManager.cs:228)
```
```
ArgumentOutOfRangeException: Specified argument was out of the range of valid values.
Parameter name: Bad indices/count arguments (managedBufferStartIndex:0 computeBufferStartIndex:0 count:5196)
UnityEngine.ComputeBuffer.SetData (System.Array data, System.Int32 managedBufferStartIndex, System.Int32 computeBufferStartIndex, System.Int32 count) (at C:/buildslave/unity/build/Runtime/Export/ComputeShader.bindings.cs:166)
Crest.QueryBase.ExecuteQueries () (at Assets/Crest/Crest/Scripts/Collision/QueryBase.cs:423)
Crest.QueryBase.Update () (at Assets/Crest/Crest/Scripts/Collision/QueryBase.cs:403)
```

**Versions**
Crest: master branch
DWP2: 2.1.0
Unity: 2018.4.10f1

**To Reproduce**
This can be reproduced by adding the Crest Ocean to the DWP2 demo scene. I have an example project, but I probably cannot attach it here, message me in discord and we can figure out a way to get it to you.

You can probably reproduce by querying more than 4096 points.

**Platform**
 - Editor and Standalone
 - Windows

**Hardware**
Nvidia RTX 2080


I've made a room with complete darkness and thick walls but it seems like the reflection from outside is bleeding through. Also, the shadowing doesn't make the ocean completely dark. Is this a bug or am I doing something wrong?

![Annotation 2020-01-09 222444](https://user-images.githubusercontent.com/14958256/72106206-38581e80-332f-11ea-8f18-0e4c80333769.png)

Hello Huw,

I've noticed the ShapeGrestnerBatched.cs script is responsible for creating waves in OceanInputs - 
OceanWavesBatched object.
We want to get small and frequent waves in our sea and we managed to get this look by exceeding the number of Components per Octave (from 8 to 100). 
I've got an error about exceeding buffer size and realized the look we got was actually a "bug" on my side, and overall increasing this variable can compromise performance. 
Also, after increasing the buffer size on both the script and the shader (keeping the "Component per Octave" at 100) - the expected look changed as well.

Which component should I change to get the desired result? 

Thank you!

**Describe the bug**
Here is everything with a LOD Data Resolution of 256
<img width="1242" alt="image" src="https://user-images.githubusercontent.com/10348641/71516481-8853d180-28a9-11ea-8a14-37795b9bb156.png">

Things go wrong for any value above that (using 384 here as it is the default, but have checked 260 and 512 amongs other values, have checked that values below 256 do seem to work).

<img width="1239" alt="image" src="https://user-images.githubusercontent.com/10348641/71516540-c9e47c80-28a9-11ea-98dd-b1b386c11f3f.png">

According to @daleeidd in issue [#279](https://github.com/crest-ocean/crest/issues/279#issuecomment-566423133), this *only* affects integrated GPUs and not discrete GPUs. I cannot I can only confirm that I get the issue on my MacBook Air as well.

**Log**
Nothing is in the log!

**Versions**
Which render pipeline (built-in/LWRP/HDRP)? Which version of LWRP/HDRP? Which version of unity (including minor, i.e. 2019.1.0f2)? 

**Platform**
 - Editor and standalone?
 - MacOS Catalina (Metal)

**Hardware**
Confirmed Cases:
- Intel(R) Core(TM) i5-8500B CPU @ 3.00GHz
- 1.6 GHz Dual-Core Intel Core i5 (Intel UHD Graphics 617 1536 MB)

**Additional context**
Very easy to reproduce, but no error messages or other feedback that could indicate the possible cause of the error.

This will help address #357
There is also vertex light support with #382

Experimental support for pixel lights. Pixel lights can be point, spot or directional lights which are set to _Important_ or in some cases _Automatic_.

![Red Pixel](https://user-images.githubusercontent.com/5249806/71513585-0eded200-28ef-11ea-901d-98b5a8a1cb17.jpg)
Point Light

![Green Pixel](https://user-images.githubusercontent.com/5249806/71513588-11d9c280-28ef-11ea-87b4-ad8a6da7ea3d.jpg)
Spot Light

## About

This is a very rough PR. It will need a lot of work.

### Pass and Blending
Adds another pass and uses `BlendOp Max`. This prevents the more egregious artefacts. Improving the extra pass is a better way to go. Distilling the pass to only perform the necessary work for the light itself is the ideal.

### Performance
Only the tiles which are affected by the light will require additional passes. Performance will depend on how many lights and their coverage. Performance can be improved by removing unnecessary work.

## Issues

Plenty. I haven't properly worked through everything so some features are broken or misused.

### Technical Debt
In its current form, technical debt is pretty high.

### Directional Light
Based on light direction rather than camera to light for spot lights.

This will help address #357
There is also pixel light support with #383

Experimental support for vertex lights. Vertex lights are point lights which are set to _Not Important_ or in some cases _Automatic_.

![Night](https://user-images.githubusercontent.com/5249806/71505496-7c7c0580-28d1-11ea-9f5a-6c4e7094686f.jpg)
Night Time

## About

### Attenuation
The attenuation formula was taken from [here](https://forum.unity.com/threads/point-light-in-v-f-shader.499717). The `UNITY_LIGHT_ATTENUATION` doesn't work for vertex lights. The `Shade4PointLights`, as discussed in the thread, didn't give good results.

### Shader Parameters
I've added some shader parameters so others for flexibility for the time being. Not sure if they will be merged. They are mostly there to separate the parameters for the primary direction light.

### Notes
`ShadeVertexLightsFull` cannot be used since it is for _Legacy Vertex Lit_.

## Issues

### Tiling Artefacts
![Tiling](https://user-images.githubusercontent.com/5249806/71506195-088f2c80-28d4-11ea-9617-08927ec8fcbd.jpg)

Tiling artefacts occur depending on the attenuation, lights overlapping and camera orientation. The frame debugger shows lighting values being filled. It could be the attenuation calculation or a limitation in vertex lighting. Further investigation required.

### Underwater
![Underwater](https://user-images.githubusercontent.com/5249806/71509401-404fa180-28df-11ea-8144-e15b4a79a8f5.jpg)

I have come across this issue when trying to integrate a weather asset with cloud shadows. It is much worse at night. Not including lights might be the best solution. Or at least having it behind a toggle.

## Missing

- Directional Light style reflections
Hello, is it possible to add a color map to have parts of the ocean with different colors? For example, having blue water that transitions to green near a swamp. Tiling a texture, vertex painting or a world aligned plane that projects a texture would be great.

Disabling domain reload breaks Crest currently.
