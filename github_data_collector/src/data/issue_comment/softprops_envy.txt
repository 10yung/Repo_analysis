<!-- Please search existing issues to avoid creating duplicates. -->

## 💡 Feature description

Continue parsing for more missing required values (instead stopping at the first one).

#### 😍 Motivation

This can provide more information to the user/devops/developer in order to setup all missing values at once (instead of one by one).

#### 💻 Basic example

Today, this:

```rust
use serde::Deserialize;

#[derive(Deserialize, Debug)]
struct Config {
    host: String,
    port: String,
}

fn main() {
    match envy::prefixed("APP_").from_env::<Config>() {
        Ok(config) => println!("{:#?}", config),
        Err(err) => {
            eprintln!("error: {:#?}", err);
            std::process::exit(1);
        }
    }
}
```

running with:

```bash
cargo run
```

outputs this:

```
error: MissingValue(
    "host",
)
```

The desired behaviour would output this instead:

```
error: MissingValues(
    [
        "host", // Or even better: "APP_HOST", considering prefix
        "port" // Or even better: "APP_PORT", considering prefix
    ]
)
```

<!-- Please search existing issues to avoid creating duplicates. -->

## 🐛 Bug description
Parsing finishes with error `Error::MissingValue` if I rename a field of parsed structure to a word consists of capitals only.

#### 🤔 Expected Behavior
Should be parsed without errors.

#### 👟 Steps to reproduce
Define structure for parsing
```rust
#[derive(Deserialize, Debug)]
pub struct DB {
    #[serde(rename="DB_USER")]
    pub user: String,
    #[serde(rename="DB_PASS")]
    pub pass: String,
    #[serde(rename="DB_NAME")]
    pub name: String,
    #[serde(default="host", rename="DB_HOST")]
    pub host: String,
    #[serde(default="port", rename="DB_PORT")]
    pub port: u16,
}

let db_config = envy::from_env::<settings::DB>().unwrap();
```
Make `export DB_USER=postgres` before running, run and get panic `value: MissingValue("DB_USER")`

#### 🌍 Your environment
Archlinux

envy version:
0.4.0

So. I see this code in lib.rs
```rust 
impl<Iter: Iterator<Item = (String, String)>> Iterator for Vars<Iter> {
    type Item = (VarName, Val);

    fn next(&mut self) -> Option<Self::Item> {
        self.0
            .next()
            .map(|(k, v)| (VarName(k.to_lowercase()), Val(k, v)))
    }
}
```
So I understand why the `k` is got lowercased. I get the expected behavior if I remove this conversion but it's not a solution because I lose feature of automatic comparison of a field of parsed structure and an environment variable. So my question is how to determine if a field has Serde tag `rename`? I can use the determining in order to prevent the conversion only for "renamed" fields.
<!--
1. If there is a breaking or notable change please call that out as these will need to be added to the CHANGELOG.md file in this repository.
2. This repository tries to stick with the community style conventions using [rustfmt](https://github.com/rust-lang-nursery/rustfmt#quick-start) with the *default* settings. If you have custom settings you may find that rustfmt
clutter the diff of your change with unrelated changes. Please apply formatting with `cargo  +nightly fmt` before submitting a pr.
-->

## What did you implement:

<!--
If this closes an open issue please replace xxx below with the issue number
-->

Closes: #26 

just a failing test for now to kick start this

#### How did you verify your change:

when this test passes. the issue will be fixed

#### What (if anything) would need to be called out in the CHANGELOG for the next release:

add support for serde flattened structs
<!-- Please search existing issues to avoid creating duplicates. -->

## 🐛 Bug description
Using the flatten attribute from serde almost works but breaks in the case of non string values in flattened structs. In this case config always parses size as a string. However, if I put the size attribute directly in Config then everything works. 


#### 🤔 Expected Behavior
The usize value in the flattened struct should parse

#### 👟 Steps to reproduce

```rust
#[derive(Deserialize)]
struct Config {
   #[serde(flatten)]
   pub subconfig: Subconfig
}

#[derive(Deserialize)]
struct Subconfig {
   pub size: usize
}
```

#### 🌍 Your environment
nightly-x86_64-unknown-linux-gnu (default)
rustc 1.33.0-nightly (a8a2a887d 2018-12-16)

envy version:
latest


The readme says that it supports parsing into Vec by separating the values by commas.
If I want to parse a variable as `Vec<PathBuf>` where each path could contain commas, would it work by putting that path in single quotes?
E.g.
```sh
FOLDERS='C:\Foo,Bar',D:\Baz
```
resulting in `vec![r"C:\Foo,Bar", r"D:\Baz"]`?

And if there is a space after the separating comma, it won't work, right?
