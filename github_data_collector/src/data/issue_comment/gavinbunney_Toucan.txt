thx!
```
Toucan(image: hexagonImageView.image!)
   .maskWithRoundedRect(cornerRadius: 10)
   .maskWithPath(path: path).image
```

this code not working.
Do you have any best practices/guide for using the API in a way that doesn't block the main thread?

```swift
let roundImage = Toucan(image: image).maskWithEllipse(borderWidth: 3.0, borderColor: UIColor.white).image
```

Especially when used in a TableView with lots of rounded images causes quite a bit of main thread activity.

<img width="810" alt="toucan" src="https://user-images.githubusercontent.com/29829961/57706632-fef1d680-761a-11e9-80b7-5f4d5ce2a595.png">
The following code takes the upper bound of 170.6666 (which is 171) when UIScreen.main.scale is 3.0

```
let size = 512 / UIScreen.main.scale
let image = Toucan(image: item.image!).resize(CGSize(width: size, height: size), fitMode: Toucan.Resize.FitMode.clip).image!
```

It should have been resized the image according to the float in size. Not the upper bound of it.
We currently expire crashes in our app, which we "fixed" by removing force unwraps and adding logging to get more insights.

## Crashlog
```
Crashed: com.apple.root.user-interactive-qos
0  Rabbit                         0x104977fc4 specialized static Toucan.Util.CGImageWithCorrectOrientation(UIImage) -> CGImage (Toucan.swift:571)
1  Rabbit                         0x10497871c specialized static Toucan.Resize.resizeImage(UIImage, size : CGSize, fitMode : Toucan.Resize.FitMode) -> UIImage? (Toucan.swift)
2  Rabbit                         0x1049c9100 specialized ThumbnailGenerator.generate(for : UIImage) -> [ThumbnailGenerator.GeneratedThumbnail] (ThumbnailGenerator.swift:61)
3  Rabbit                         0x1049fa134 specialized ContentMetadataFetcher.(generateVisualPreviews(for : Content, image : UIImage, storageController : LocalStorageController, completionHandler : ([VisualPreview]) -> ()) -> ()).(closure #2).(closure #1) (ContentMetadataFetcher+Thumbnails.swift:73)
4  Rabbit                         0x1049fa08c partial apply for ContentMetadataFetcher.(generateVisualPreviews(for : Content, image : UIImage, storageController : LocalStorageController, completionHandler : ([VisualPreview]) -> ()) -> ()).(closure #2).(closure #1) (ContentMetadataFetcher+Thumbnails.swift)
5  Rabbit                         0x10493db00 thunk (ContentCreationController.swift)
6  libdispatch.dylib              0x1851a6a54 _dispatch_call_block_and_release + 24
7  libdispatch.dylib              0x1851a6a14 _dispatch_client_callout + 16
8  libdispatch.dylib              0x1851b3ea4 _dispatch_root_queue_drain + 1032
9  libdispatch.dylib              0x1851b3a38 _dispatch_worker_thread3 + 120
10 libsystem_pthread.dylib        0x18544f06c _pthread_wqthread + 1268
11 libsystem_pthread.dylib        0x18544eb6c start_wqthread + 4
```

## Device and system information
iOS 10 and iOS 11
iPad and iPhone

## Known stats from logging
The crash is happening on [this](https://github.com/gavinbunney/Toucan/blob/develop/Source/Toucan.swift#L567) line which force unwraps the `CGContext`. It seems that scenarios exist in which the created context is `nil`.

After adding a guard and logging in the return statement, we've seen logs like this:

```swift
Error Domain=Toucan Code=-3 "width: 3840 height: 5760 bitsPerComponent: 8 bitmapInfo: 5" UserInfo={NSLocalizedDescription=width: 3840 height: 5760 bitsPerComponent: 8 bitmapInfo: 5}
```

```swift
Error Domain=Toucan Code=-3 "width: 120 height: 160 bitsPerComponent: 8 bitmapInfo: 0" UserInfo={NSLocalizedDescription=width: 120 height: 160 bitsPerComponent: 8 bitmapInfo: 0}
```

I've tried to reproduce the crash by hardcoding these values, but that didn't reproduce the crash. I've also made sure that the cgImage and Colorspace are non nil:

```swift
guard let cgImage = image.cgImage else {
    throw NSError(domain: "Toucan", code: -1, userInfo: [NSLocalizedDescriptionKey: "CGImage is nil"])
}

guard let colorSpace = cgImage.colorSpace else {
    throw NSError(domain: "Toucan", code: -2, userInfo: [NSLocalizedDescriptionKey: "Color space is nil"])
}
```

We've never seen these being logged.

## Next steps
We for now prevented this crash from happening again by adding guards and throws instead of force unwrapping. It would be great if we can find the cause of this crash and fix it instead.
Hello, 

We're using toucan in our app to resize product images using FitMode.crop. This fit mode produce really bad quality image even though the cropped image would maintain same aspect ratio as the original image.

 Resize code in UIImageExtension:

`Toucan(image: self).resize(CGSize(width: 345, height: 519), fitMode: Toucan.Resize.FitMode.crop).image!`

I couldn't find any reason why this is happening. Please help.
Hi guys! 

I just got a crash `CGBitmapContextCreate: invalid data bytes/row: should be at least 12096 for 8 integer bits/component, 3 components, kCGImageAlphaNoneSkipLast` **using** `Toucan(image: image).resize(size, fitMode: .crop).image` **from an image taken with the camera**.

Same build is working in iOS 10.3.3 but is crashing on 11.1.1

Any help?
Hey! I just noticed that each operation in Toucan starts off with a call to `CGImageWithCorrectOrientation` function which involves creating a new context and drawing an image into it. So, for example, if I want to crop an image with `UIImageOrientation.Left` then instead of simply cropping the image (which is extremely fast) Toucan would first physically rotate its bitmap (which is much more expensive then cropping itself) and just then crop the image. It would also change the image orientation to `UIImageOrientation.Up`. 

I understand that it might be tempting to just "fix" an orientation so that all the other functions would only have to deal with images in `UIImageOrientation.Up`. However, if would be nice if Toucan could add a proper support for images in all orientations.
