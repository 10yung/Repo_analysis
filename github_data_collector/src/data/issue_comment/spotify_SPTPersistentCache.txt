This change adds an option to exclude the cache directory from backup the first time it is created. 
`data` property of `SPTPersistentCacheRecord` is declared as `strong`. This could lead to problem when instances of `SPTPersistentCacheRecord` are created with `NSMutableData`. PR adds failing test case to show this behaviour and fix for it.
@8W9aG Thank you in advance for taking a look at this.

SPTPersistentCache doesn't compile via standard Carthage pull under Xcode 10.

The error is:
```
CompileC /Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/IntermediateBuildFilesPath/SPTPersistentCacheFramework.build/Release-iphoneos/SPTPersistentCache-iOS.build/Objects-normal/armv7/SPTPersistentCache.o /Users/z002r44/Dustin-Harmony-iOS/Carthage/Checkouts/SPTPersistentCache/Sources/SPTPersistentCache.m normal armv7 objective-c com.apple.compilers.llvm.clang.1_0.compiler (in target: SPTPersistentCache-iOS)
    cd /Users/z002r44/Dustin-Harmony-iOS/Carthage/Checkouts/SPTPersistentCache/SPTPersistentCacheFramework
    export LANG=en_US.US-ASCII
    /Users/z002r44/Downloads/Xcode10.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch armv7 -fmessage-length=0 -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0 -std=gnu11 -fobjc-arc -fmodules -gmodules -fmodules-cache-path=/Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/ModuleCache.noindex -fno-autolink -fmodules-prune-interval=86400 -fmodules-prune-after=345600 -fbuild-session-file=/Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/ModuleCache.noindex/Session.modulevalidation -fmodules-validate-once-per-build-session -Wnon-modular-include-in-framework-module -Werror=non-modular-include-in-framework-module -fmodule-name=SPTPersistentCache -Wno-trigraphs -fpascal-strings -Os -fno-common -Werror=incompatible-pointer-types -Werror=implicit-function-declaration -Wmissing-field-initializers -Wmissing-prototypes -Werror=return-type -Wdocumentation -Wunreachable-code -Wnullable-to-nonnull-conversion -Wimplicit-atomic-properties -Werror=deprecated-objc-isa-usage -Wno-objc-interface-ivars -Werror=objc-root-class -Warc-repeated-use-of-weak -Wno-arc-maybe-repeated-use-of-weak -Wexplicit-ownership-type -Wimplicit-retain-self -Wduplicate-method-match -Wmissing-braces -Wparentheses -Wswitch -Wunused-function -Wunused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body -Wuninitialized -Wconditional-uninitialized -Wunknown-pragmas -Wshadow -Wfour-char-constants -Wconversion -Wconstant-conversion -Wint-conversion -Wbool-conversion -Wenum-conversion -Wfloat-conversion -Wnon-literal-null-conversion -Wobjc-literal-conversion -Wassign-enum -Wsign-compare -Wshorten-64-to-32 -Wpointer-sign -Wnewline-eof -Wselector -Wstrict-selector-match -Wundeclared-selector -Wdeprecated-implementations -DNS_BLOCK_ASSERTIONS=1 -DOBJC_OLD_DISPATCH_PROTOTYPES=0 -isysroot /Users/z002r44/Downloads/Xcode10.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS12.0.sdk -fstrict-aliasing -Wprotocol -Wdeprecated-declarations -miphoneos-version-min=8.0 -g -Wsign-conversion -Winfinite-recursion -Wcomma -Wblock-capture-autoreleasing -Wstrict-prototypes -Wno-semicolon-before-method-body -fembed-bitcode -iquote /Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/IntermediateBuildFilesPath/SPTPersistentCacheFramework.build/Release-iphoneos/SPTPersistentCache-iOS.build/SPTPersistentCache-generated-files.hmap -I/Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/IntermediateBuildFilesPath/SPTPersistentCacheFramework.build/Release-iphoneos/SPTPersistentCache-iOS.build/SPTPersistentCache-own-target-headers.hmap -I/Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/IntermediateBuildFilesPath/SPTPersistentCacheFramework.build/Release-iphoneos/SPTPersistentCache-iOS.build/SPTPersistentCache-all-non-framework-target-headers.hmap -ivfsoverlay /Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/IntermediateBuildFilesPath/SPTPersistentCacheFramework.build/Release-iphoneos/SPTPersistentCache-iOS.build/all-product-headers.yaml -iquote /Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/IntermediateBuildFilesPath/SPTPersistentCacheFramework.build/Release-iphoneos/SPTPersistentCache-iOS.build/SPTPersistentCache-project-headers.hmap -I/Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/BuildProductsPath/Release-iphoneos/include -I../include -I/Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/IntermediateBuildFilesPath/SPTPersistentCacheFramework.build/Release-iphoneos/SPTPersistentCache-iOS.build/DerivedSources/armv7 -I/Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/IntermediateBuildFilesPath/SPTPersistentCacheFramework.build/Release-iphoneos/SPTPersistentCache-iOS.build/DerivedSources -Weverything -Wno-error=deprecated -Wno-objc-missing-property-synthesis -Wno-gnu-conditional-omitted-operand -Wno-gnu -Wno-documentation-unknown-command -Wno-reserved-id-macro -Wno-auto-import -Wno-missing-variable-declarations -Wno-c++98-compat -Werror -Wno-direct-ivar-access -Wno-padded -F/Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/BuildProductsPath/Release-iphoneos -MMD -MT dependencies -MF /Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/IntermediateBuildFilesPath/SPTPersistentCacheFramework.build/Release-iphoneos/SPTPersistentCache-iOS.build/Objects-normal/armv7/SPTPersistentCache.d --serialize-diagnostics /Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/IntermediateBuildFilesPath/SPTPersistentCacheFramework.build/Release-iphoneos/SPTPersistentCache-iOS.build/Objects-normal/armv7/SPTPersistentCache.dia -c /Users/z002r44/Dustin-Harmony-iOS/Carthage/Checkouts/SPTPersistentCache/Sources/SPTPersistentCache.m -o /Users/z002r44/Library/Caches/org.carthage.CarthageKit/DerivedData/10.0_10A254a/SPTPersistentCache/1.1.1/Build/Intermediates.noindex/ArchiveIntermediates/SPTPersistentCache-iOS/IntermediateBuildFilesPath/SPTPersistentCacheFramework.build/Release-iphoneos/SPTPersistentCache-iOS.build/Objects-normal/armv7/SPTPersistentCache.o
/Users/z002r44/Dustin-Harmony-iOS/Carthage/Checkouts/SPTPersistentCache/Sources/SPTPersistentCache.m:737:80: error: implicit conversion from nullable pointer 'NSString * _Nullable' to non-nullable pointer type 'ObjectType _Nonnull' (aka 'id') [-Werror,-Wnullable-to-nonnull-conversion]
                                        userInfo:@{ NSLocalizedDescriptionKey: @(errorString) }];
                                                                               ^
/Users/z002r44/Dustin-Harmony-iOS/Carthage/Checkouts/SPTPersistentCache/Sources/SPTPersistentCache.m:965:30: warning: messaging unqualified id [-Wobjc-messaging-id]
        currentCacheSize += [image[SPTDataCacheFileAttributesKey][NSFileSize] integerValue];
                             ^
/Users/z002r44/Dustin-Harmony-iOS/Carthage/Checkouts/SPTPersistentCache/Sources/SPTPersistentCache.m:984:30: warning: messaging unqualified id [-Wobjc-messaging-id]
        currentCacheSize -= [image[SPTDataCacheFileAttributesKey][NSFileSize] integerValue];
```

I put in a PR to fix, but can't figure out why the CI process fails on the PR.
Would like to use SPTPersistentCache from master if possible, not from a fork that I took:
https://github.com/DanEdgarTarget/SPTPersistentCache

Thank you for any help.
This has been deprecated for [over two years](https://github.com/spotify/SPTPersistentCache/pull/63).

If we merge this itâ€™s a semver MAJOR change, so I guess the question is if we want anything else in a 2.0.0 release.

@rastersize @8W9aG @dflems 
I see in the code that there are functions to determine the URI of the cached images, however, they are not exposed.  Are there any exposed functions, or recommended methods for determining the URI of a cached image?  I need this for an application that will be using QMChatViewController, and the library only accepts URI paths for image attachments.

Thanks!
I have an app, that is a comic book reader, so the user can download a book then read it later, even without internet.

I'm thinking to cache all pages(images) of the book with SPTPersistentCache.
I need to save each book in a different folder, ex: `spider man` will be saved on a folder `spider-man/pages`, minions will be saved on `minions/pages` and so on...

Also SPTPersistentCache can't garbage the books downloaded, it must keep the cache until the user delete that specific book. Also no disk size limite.

What I need is the very same way Spotify does with offline musics downloaded. Can I do that?
- Expose `enqueueGarbageCollection`
Scheduling garbage collection by time isn't appropriate for short-lived applications. This adds an alternative API which allows you to schedule the garbage collection instantly. This fixes #89 

- Expose `minimumFreeDiskSpaceFraction`
Defaulting to require 10% of free disk space does not make sense for some apps. For example, on a huge disk, say 64GB, there is no reason to require 6GB free space for a 30MB cache.
I'm considering how to schedule the garbage collector for an app that does not have long sessions. I understand that the current way of scheduling works fine for Spotify, since your app will be long running in the background.

Do you guys have any suggestions on how to handle scheduling in an app where the average user session is around 20 seconds? Scheduling it to run every 10 seconds seems unnecessary, but scheduling it to run at > 20 seconds could mean that the GC never runs for some users (since we need to unschedule when the app enters the background, to avoid an NSTimer keeping the app awake).

I think ideally, SPTPersistentCache should have a way to manually start the GC instead of scheduling it. This would allow us to run it once when the app enters background before it gets terminated.

I could achieve this in the current way by scheduling it at 0 seconds when the app enters background, and then immediately unscheduling it. This seems kind of insecure though, since it could run 10 times or even cancel before it runs at all.

Any input is appreciated!
Whenever we try to save large files (>100MB, actual size depends on device capabilities) to cache, nothing happens except console log message like
```
*** mach_vm_map(size=997462016) failed (error code=3)
*** error: can't allocate region
*** set a breakpoint in malloc_error_break to debug
```

The problem is in **SPTPersistentCache** method
```
- (NSError *)storeDataSync:(NSData *)data
                    forKey:(NSString *)key
                       ttl:(NSUInteger)ttl
                    locked:(BOOL)isLocked
              withCallback:(SPTPersistentCacheResponseCallback)callback
                   onQueue:(dispatch_queue_t)queue
```

The following code does not work for large rawDataLength
`NSMutableData *rawData = [NSMutableData dataWithCapacity:rawDataLength];`

One way to handle large amounts of data is to fill temporary file with relatively small blocks of data first and then writing it atomically to target filePath


I expect to get the cache from the return value rather than in a block
Is there an alternative way to implement that makes it can return cache value directly? 

```
- (BOOL)loadDataForKey:(NSString *)key
          withCallback:(SPTPersistentCacheResponseCallback _Nullable)callback
               onQueue:(dispatch_queue_t _Nullable)queue;
```
