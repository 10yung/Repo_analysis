Hi. When I try to use Google Recaptcha V2 inside a lit-element component, I get error saying:
```
Uncaught DOMException: Blocked a frame with origin â€œhttps://www.google.com" from accessing a cross-origin frame.
```
While I found some references for React:
https://medium.com/@tomas_26986/using-recaptcha-with-react-and-shadow-dom-abfd19fa03a

And also some discussions here for Polymer:
https://github.com/cbalit/re-captcha/issues/6

Any guidance to do this for lit-elements

Thanks.

Hi! I try to use lit-element in my current project and previous I use that code
 ```javascript 
class HomePageSearch extends HTMLInputElement {
  connectedCallback() {
    console.log("works");
    this.focus();
  }
}
customElements.define("homepage-search", HomePageSearch, {extends: "input"});
```
 and then in html I can use that component like `<input is="homepage-search" >`. It's really important for me because in that case I can use that component without any css changes.

And now I want to convert the code to lit-element component. But I don't understand how because using that variant 
```javascript
import { LitElement } from "lit-element";
class HomePageSearch extends LitElement {
  connectedCallback() {
    console.log("works");
    this.focus();
  }
}
customElements.define("homepage-search", HomePageSearch, {extends: "input"});
```

I got the error `TypeError: Class constructor bo cannot be invoked without 'new'`

Thank you
### Browsers Affected
- [ ] Chrome

### Versions
- lit-element: v2.1
- webcomponents: v1

### Description
When using the default TypeScript settings in `create-react-app` it seems that the `@property` decorator isn't creating the accessors correctly. Strangle running a delete (`delete this.text`) on the property fixes the accessors.

#### Workaround
To get the accessors working for the moment just run a delete on the property you created in the constructor.
```typescript
@customElement("my-element")
export class MyElement extends LitElement {
    @property() text: string;

    constructor() {
        super();
        delete this["text"]; // This will fix the accessors.
        this.text = "Initial text.";
    }

    render(): TemplateResult {
        return html`<p>${this.text}</p>`;
    }
}
```

#### Demo
https://github.com/karlbennett/litelement-property-bug

#### Steps to Reproduce
Example:
1. Create `my-element`
2. Add a `text` property to `my-element` with the `@property` decorator.
3. Use the `my-element` tag in some HTML.
4. Select the `my-element` tag instance.
5. Assign a new value to the `text` property (`myElement.text = 'some new text.';`).

#### Expected Results
A property update should trigger update events/methods (`update`, `updated`);

#### Actual Results
The events/methods are not triggered on a property update.

### Browsers Affected
<!-- Check all that apply -->
- [x] Chrome
- [x] Firefox
- [ ] Edge
- [ ] Safari 11
- [ ] Safari 10
- [ ] IE 11

### Versions
-  lit-element: 2.2.1

See https://github.com/Polymer/lit-element/pull/866

Apps and design systems that want to add additional styles to a component should override `getStyles()`. Previously they might have tried to override `finalize()`, but style gathering has been moved from there.
Hi. I am using Lit-Element with Typescript, ESLint and IONIC in VSCode and my indentation is getting always messed up difficult to make sense of (Screenshot below). Any way to actually make the alignment more neat?

If I use prettier, things are getting messed up even more. It works well for Node.js but messed up alignment and indentation when using LitElement.

![Screenshot from 2020-01-14 19-02-25](https://user-images.githubusercontent.com/1165845/72348606-c6058680-3700-11ea-80bb-b48265c717b2.png)

**PS:** I am using many IONIC 4 components within Lit Element. Hence you see ion all over. 
### Description
`LitElement.render` returns`TemplateResult|void`, which makes it look less type safe for typescript users.

Source code of `lit-element.ts`:
```ts
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */
  protected render(): TemplateResult|void {
  }
```

Wondering if it's possible to make it an abstract function with only `TemplateResult` as return type, 

#### Steps to Reproduce
```ts
render() {
  if (this.prop) {
    return html`<p></p>`;
  }
}
```

#### Expected Results
TypeScript compile error.

#### Actual Results
Compiles fine on strict mode.

### Versions
- lit-element: v2.2.1

I'm looking for example of demo showing the usage of Tailwindcss with LitElement. At least how should we proceed ?
<!--
If you are asking a question rather than filing a bug, try one of these instead:
- StackOverflow (https://stackoverflow.com/questions/tagged/polymer)
- Polymer Slack Channel (https://bit.ly/polymerslack)
- Mailing List (https://groups.google.com/forum/#!forum/polymer-dev)
-->
<!-- Instructions For Filing a Bug: https://github.com/Polymer/lit-element/blob/master/CONTRIBUTING.md#filing-bugs -->
### Description
<!-- Example: Error thrown when calling `appendChild` on Lit element -->
Setting string property to `undefined`, with `reflect: true`, does not remove the attribute.

EDIT: I see this is documented [here](https://lit-element.polymer-project.org/guide/properties#conversion-type)... so my question is, why is this so inconsistent? For strings & numbers, undefined tells it not to change, but for booleans, objects, & arrays, undefined removes the attribute? It would make a lot more sense if undefined & null both removed the attribute for all cases.

#### Live Demo

https://stackblitz.com/edit/lit-element-example-ahub5j?file=index.html

#### Steps to Reproduce
<!--
Example:

1. Create `my-element`
2. Append `my-element` to document.body
3. Create `div`.
4. Append `div` to `my-element`
-->
1. Create `my-element` with `mood` set to `good` via attribute
2. Append `my-element` to document.body
3. Set `mood` to `undefined` via property
4. See that the `mood` attribute is still set

#### Expected Results
<!-- Example: No error is throw -->
Expected mood attribute to be removed

#### Actual Results
<!-- Example: Error is thrown -->
Mood attribute is still set to `great`

### Browsers Affected
<!-- Check all that apply -->
- [x] Chrome
- [ ] Firefox
- [ ] Edge
- [ ] Safari 11
- [ ] Safari 10
- [ ] IE 11

### Versions
<!--
`npm ls` will show the version of webcomponents.js and lit-element
-->
- lit-element: v2.2.1
- webcomponents: N/A

Hello,
maybe this is not the best place for asking this, but there are no other places.
I'm wondering why the LitElement uses bare imports in its source and force us to use Polymer CLI or a bundler (or pika).
I cannot see the point of this design decision, I would be glad to learn the reason behind.
I thought I'd share this with you because I remember trying to use this design from Polymer 1, 2 but it was always a mess. Finally from Polymer 3 and then `LitElement` I can get closer from my expectation and I am very satisfied but there's still one caveat.

First let me show you what I try to do, I want to create an object that acts as a plain old object

```typescript
interface Planet {
  name: string,
  mass: number,
  satellites: string[]
}

const planet: Planet = {
  name: 'earth',
  mass: 5.97237e+24,
  satellites: ['moon']
}
```

**but also like a custom element**. In order to do that we can make a new `LitElement` element

```typescript
@customElement('planet-element')
class PlanetElement extends LitElement {
  @property({ type: String })
  public name: string = ''

  public mass: number = 0
  public satellites: string[] = []

  render () {
    return html`
    <h2>${this.name}</h2>
    `
  }
}
```

I already see 2 problems : 
- The properties need a default value if not optional _[1]_
- The auto-completion also includes the properties of `LitElement` _[2]_

To resolve _[1]_ default values have to be pass when the object is created (hence in the constructor) :

```typescript
// @ts-ignore
@customElement('planet-element')
class PlanetElement extends LitElement {
  @property({ type: String })
  public name: string = ''

  public mass: number = 0
  public satellites: string[] = []

  constructor (name: string, mass: number, satellites: string[]) {
    super()
    this.name = name
    this.mass = mass
    this.satellites = satellites
  }

  render () {
    return html`
    <h2>${this.name}</h2>
    `
  }
}
```

and because the constructor can't include parameters the decorator presents an exception which I, for now..., ignore using `// @ts-ignore`

To resolve _[2]_ I implement the interface

```typescript
// @ts-ignore
@customElement('planet-element')
class PlanetElement extends LitElement implements Planet {

  @property({ type: String })
  public name: string = ''

  public mass: number = 0
  public satellites: string[] = []

  constructor (name: string, mass: number, satellites: string[]) {
    super()
    this.name = name
    this.mass = mass
    this.satellites = satellites
  }

  render () {
    return html`
    <h2>${this.name}</h2>
    `
  }
}
```

We get somewhere, now we can type

```typescript
const myplanet = new PlanetElement('my little big planet', 12, ['b612'])

// it feels more like a plain object
myplanet.mass = 9999
myplanet.name = 'cool name' // rerender
```

And it acts like a custom element

```typescript
class SolarSystem extends LitElement {
  private planets: PlanetElement[] = []

  render () {
    return html`
      ${this.planets}
    `
  }
}
```

Thanks to `lit-html` this works. `lit-html` understands that the array is an array of `Planet` elements and stamps the appropriate template of each elements.

But still this is not near perfect for **3** reasons.

### 1. It's still a customElement

I expect the object to be a plain old one if for instance I type `JSON.stringify(myplanet)` it would include exposed properties of `LitElement` too.  
We could resolve it by creating this function in the custom element : 

```typescript
class PlanetElement ... {
  ...
  
  getPlainObject () {
    return <Planet>{
      name: this.name
      mass: this.mass
      satellites: this.satellites
    }
  }

  ...
}
```

Now `JSON.stringify(myplanet.getPlainObject())` works. But it gets even more cumbersome.

### 2. four parts to modify

When we need to add a property we have to modify four parts : in the interface, in the class properties, in the constructor, and in the `getPlainObject`.

### 3. Auto-completion

For the completion to only propose the properties of the POJO we need explicit specification :

```typescript
myplanet.<the auto-completion also includes `LitElement` properties>
(myplanet as Planet).<the auto-completion works well now>
```

---

I really wish there were a mechanism to achieve this. I wanted to expose this issue I am facing, I am sure this is not a pattern everyone's think about but I think it's worth considering.  
What would you say to someone that tries to seamlessly fusion a plain old JS object and a custom element ? Any suggestions, insights, ideas ?  

Thanks in advance.