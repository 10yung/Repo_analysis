### Steps to reproduce
1. create vagrant file as instructed by README file
```
Vagrant.configure("2") do |config|
  config.vm.define :test_vm do |test_vm|
    test_vm.vm.box = "fedora/24-cloud-base"
  end
end
```
2. After the `vagrant up --provider=libvirt` command, the vagrant box won't be able to download. But others boxes is fine. For example, the following Vagrantfile can be successfully downloaded.
```
Vagrant.configure("2") do |config|
  config.vm.define :test_vm do |test_vm|
    test_vm.vm.box = "centos/7"
  end
end
```



I've been putting this off for a while now as I keep hoping to get back to maintaining this project. The sad reality is that I'm no longer working with it, nor have a system where I could run https://github.com/vagrant-libvirt/vagrant-libvirt-qa to bring it up to date to catch various issues.

So this is a call out for others to help maintain this project and if you have the time, make it easier for others to help out in a smaller capacity by improving the tests, being able to have some of the free CI tooling take care of running through running vagrant-libvirt on multiple OSs as set up in https://github.com/vagrant-libvirt/vagrant-libvirt-qa, either by rewriting it to use a matrix in Travis or something else to exercise the installation of this plugin.
```
$ vagrant --version
Vagrant 2.0.2
$ vagrant plugin list
vagrant-libvirt (0.0.43, system)
```

From Vagrantfile:
```
config.vm.define "foo", autostart: false do |foo|
    # lots of it expunged
    foo.vm.synced_folder "../code", "/srv/project", type: "9p",
        disabled: "false", owner: "vagrant", accessmode: "squash"
```

Running `vagrant up`, with the irrelevant lines snipped out:
```
$ vagrant up foo

# snip...

==> python2-libvirt:  /srv/project, opts: {:type=>:"9p", :disabled=>false, :owner=>"vagrant", :accessmode=>"squash", :guestpath=>"/srv/project", :hostpath=>"/home/candeira/foo/code", :__vagrantfile=>true, :target=>"/srv/project", :mount=>true, :readonly=>nil, :mount_tag=>"dbba20a924546d1223f3f7a7f27eaff"}

# snip...

/usr/share/rubygems-integration/all/gems/vagrant-2.0.2/plugins/communicators/ssh/communicator.rb:257:in `execute': The following SSH command responded with a non-zero exit status. (Vagrant::Errors::LinuxMountFailed)
Vagrant assumes that this means the command failed!

mount -t 9p -o trans=virtio,access=vagrant,version=9p2000.L 'dbba20a924546d1223f3f7a7f27eaff' /srv/project
```

Notice how the mount command passes the string "vagrant" as an access type. The code responsible for this seems to be here:

https://github.com/vagrant-libvirt/vagrant-libvirt/blob/39f9a9d0b455a358917290417bb447396c245034/lib/vagrant-libvirt/cap/mount_p9.rb#L24
I tried to install a simple fedora31 box on a fedora 31 machine and it's failing (even tried a brand new install). It seems to work fine on RHEL8 which is the only alternative I had available (or on OSX with the virtual box provider).

Version information:
```
$ rpm -q vagrant vagrant-libvirt libvirt qemu-kvm
vagrant-2.2.6-1.fc31.noarch
vagrant-libvirt-0.0.45-3.fc31.noarch
libvirt-5.6.0-5.fc31.x86_64
qemu-kvm-4.1.1-1.fc31.x86_64
$ vagrant version; vagrant plugin list
Installed Version: 2.2.6

Vagrant was unable to check for the latest version of Vagrant.
Please check manually at https://www.vagrantup.com
vagrant-libvirt (0.0.45, system)
vagrant-reload (0.0.1, global)
vagrant-sshfs (1.3.3, global)

```

Replication step, install latest fedora 31 with updates:

```
$ mkdir test

$ cd test

$ vagrant init generic/fedora31
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.

$ vagrant up
Bringing machine 'default' up with 'libvirt' provider...
==> default: Checking if box 'generic/fedora31' version '2.0.6' is up to date...
==> default: Creating image (snapshot of base box volume).
==> default: Creating domain with the following settings...
==> default:  -- Name:              test_default
==> default:  -- Domain type:       kvm
==> default:  -- Cpus:              2
==> default:  -- Feature:           acpi
==> default:  -- Feature:           apic
==> default:  -- Feature:           pae
==> default:  -- Memory:            2048M
==> default:  -- Management MAC:    
==> default:  -- Loader:            
==> default:  -- Nvram:             
==> default:  -- Base box:          generic/fedora31
==> default:  -- Storage pool:      default
==> default:  -- Image:             /home/echaudro/.local/share/libvirt/images/test_default.img (32G)
==> default:  -- Volume Cache:      default
==> default:  -- Kernel:            
==> default:  -- Initrd:            
==> default:  -- Graphics Type:     vnc
==> default:  -- Graphics Port:     -1
==> default:  -- Graphics IP:       127.0.0.1
==> default:  -- Graphics Password: Not defined
==> default:  -- Video Type:        cirrus
==> default:  -- Video VRAM:        256
==> default:  -- Sound Type:	
==> default:  -- Keymap:            en-us
==> default:  -- TPM Path:          
==> default:  -- INPUT:             type=mouse, bus=ps2
==> default: Creating shared folders metadata...
==> default: Starting domain.
==> default: Waiting for domain to get an IP address...
```
It's waiting for the IP forever, on the console for the VM I can see it's waiting for start job to complete (see attachment).

![console](https://user-images.githubusercontent.com/18258026/72168256-0eedd000-33cd-11ea-8498-546730ccad78.png)


### Steps to reproduce
1. Spin up a VM with no `sshd`
2. After a timeout, vagrant destroys the VM.

### Expected behaviour
There should be a way to disable all attempts to use SSH.

### Actual behaviour
There doesn't appear to be a way to completely disable SSH.

### System configuration
**OS/Distro version:**: Void Linux 64-bit

**Libvirt version:** libvirt-5.10.0_1

**Output of `vagrant version; vagrant plugin list`:**

```
Installed Version: 2.2.6
Latest Version: 2.2.6
vagrant-libvirt (0.0.45, global)
```


**Are you using upstream vagrant package or your distros package?**
The distro version, whose build file can be found [here](https://github.com/void-linux/void-packages/blob/master/srcpkgs/vagrant/template)

Is anyone following "[Development](https://github.com/vagrant-libvirt/vagrant-libvirt#development)" instructions getting anything other than lots of failed tests?

My result: **25 examples, 23 failures** — and time waste, of course.

If the tests are actually broken why Docs don't say a thing to reflect this?

Also it's not documented whether _all the_ "[Installation](https://github.com/vagrant-libvirt/vagrant-libvirt#installation)" steps should be done before (anyways I tried both cases).
~— And the docs don't have this.~ (It's listed among features of `:public_network` actually.)

Meanwhile it's probably simpler to just fix the docs, support for `:private_network` is way more appreciated.
Users are allowed to set a LIBVIRT_DEFAULT_URI environment variable that
controls tools (i.e. virsh, virt-install, etc) that communicate with
libvirt. Let's allow for that mechanism to be used here.
It would be nice to be able to support binding the spice service to a unix socket instead of forcing the use of IP and ports like: 

```
    <graphics type='spice' autoport='yes' listen='127.0.0.1' keymap='en-us'>
      <listen type='socket' socket='/tmp/spice-myvm.socket'/>
    </graphics>
```
Latest release is `0.0.45` from `Oct 23, 2018`.