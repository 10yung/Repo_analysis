I tend to use this a lot in my infrastructure tests.
Hi there,

I have just started to use terratest and I would like to know which will be a best practices for example testing a RDS Database which creation is really hard.
When an AWS resource takes longer than 5 minutes (aprox.) which can we do?
Terratest doesn't currently (seem to) detect or report warnings in Terraform runs.  It would be useful to detect warning messages and optionally fail tests if warnings are present.
I noticed that running the test against `examples/terraform-aws-example` failed as it was missing ` tags = {` after the
Just wondering if the tests should be working against terraform v0.12.12?
I'm using terraform v0.12.12, when I execute the following tests `go test -v -run TestTerraformAwsRdsExample` I see the following errors:

```
panic: test timed out after 10m0s

goroutine 46 [running]:
testing.(*M).startAlarm.func1()
	/usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:1377 +0xdf
created by time.goFunc
	/usr/local/Cellar/go/1.13.4/libexec/src/time/sleep.go:168 +0x44

goroutine 1 [chan receive, 10 minutes]:
testing.tRunner.func1(0xc00050e900)
	/usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:885 +0x202
testing.tRunner(0xc00050e900, 0xc00056ddc0)
	/usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:913 +0xd3
testing.runTests(0xc000349460, 0x4280ea0, 0x1f, 0x1f, 0x0)
	/usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:1200 +0x2a7
testing.(*M).Run(0xc000270900, 0x0)
	/usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:1117 +0x176
main.main()
	_testmain.go:104 +0x135

goroutine 7 [select]:
go.opencensus.io/stats/view.(*worker).start(0xc0000ded20)
	/Users/gauravg/go/pkg/mod/go.opencensus.io@v0.21.0/stats/view/worker.go:154 +0x100
created by go.opencensus.io/stats/view.init.0
	/Users/gauravg/go/pkg/mod/go.opencensus.io@v0.21.0/stats/view/worker.go:32 +0x57

goroutine 8 [chan receive]:
github.com/golang/glog.(*loggingT).flushDaemon(0x428fdc0)
	/Users/gauravg/go/pkg/mod/github.com/golang/glog@v0.0.0-20160126235308-23def4e6c14b/glog.go:882 +0x8b
created by github.com/golang/glog.init.0
	/Users/gauravg/go/pkg/mod/github.com/golang/glog@v0.0.0-20160126235308-23def4e6c14b/glog.go:410 +0x26f

goroutine 12 [semacquire, 3 minutes]:
sync.runtime_Semacquire(0xc000598328)
	/usr/local/Cellar/go/1.13.4/libexec/src/runtime/sema.go:56 +0x42
sync.(*WaitGroup).Wait(0xc000598320)
	/usr/local/Cellar/go/1.13.4/libexec/src/sync/waitgroup.go:130 +0x64
github.com/gruntwork-io/terratest/modules/shell.readStdoutAndStderr(0xc00050ea00, 0x3204980, 0xc0002982d8, 0x3204980, 0xc0002982e8, 0xc00055dfc0, 0xc00055dfc0, 0x0, 0x0, 0xc0000f6000)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/shell/command.go:136 +0x23d
github.com/gruntwork-io/terratest/modules/shell.runCommandAndStoreOutputE(0xc00050ea00, 0x2e7d180, 0x9, 0xc0000bcd00, 0x1a, 0x1a, 0x2eae101, 0x25, 0xc0002be030, 0x0, ...)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/shell/command.go:109 +0x313
github.com/gruntwork-io/terratest/modules/shell.RunCommandAndGetOutputE(0xc00050ea00, 0x2e7d180, 0x9, 0xc0000bcd00, 0x1a, 0x1a, 0x2eae101, 0x25, 0xc0002be030, 0x0, ...)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/shell/command.go:57 +0xb2
github.com/gruntwork-io/terratest/modules/terraform.RunTerraformCommandE.func1(0xc000719550, 0x106e97c, 0x4278c80, 0xc000519000)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/terraform/cmd.go:61 +0xad
github.com/gruntwork-io/terratest/modules/retry.DoWithRetryableErrorsE.func1(0xc00050ea00, 0x2, 0x31ecd40, 0xc000010018)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/retry/retry.go:118 +0x6b
github.com/gruntwork-io/terratest/modules/retry.DoWithRetryE(0xc00050ea00, 0xc0002a6000, 0x167, 0x0, 0x0, 0xc0002af868, 0x7a12368, 0x0, 0x28bbc60, 0xc00055df80)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/retry/retry.go:74 +0x2ff
github.com/gruntwork-io/terratest/modules/retry.DoWithRetryableErrorsE(0xc00050ea00, 0xc0002a6000, 0x167, 0x0, 0x0, 0x0, 0xc000719ac0, 0x1a, 0x104754e, 0x101627a, ...)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/retry/retry.go:117 +0x2a8
github.com/gruntwork-io/terratest/modules/terraform.RunTerraformCommandE(0xc00050ea00, 0xc000719ec0, 0xc0000bcd00, 0x1a, 0x1a, 0x1a, 0x1a, 0xc000719bf0, 0x1108514)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/terraform/cmd.go:60 +0x2ea
github.com/gruntwork-io/terratest/modules/terraform.DestroyE(0xc00050ea00, 0xc000719ec0, 0x0, 0x2f2d5a8, 0x719e10, 0xc000719c00)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/terraform/destroy.go:25 +0xc8
github.com/gruntwork-io/terratest/modules/terraform.Destroy(0xc00050ea00, 0xc000719ec0, 0x348bd78, 0xf)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/terraform/destroy.go:11 +0x39
runtime.Goexit()
	/usr/local/Cellar/go/1.13.4/libexec/src/runtime/panic.go:563 +0xec
testing.(*common).FailNow(0xc00050ea00)
	/usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:653 +0x39
testing.(*common).Fatal(0xc00050ea00, 0xc000719d50, 0x1, 0x1)
	/usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:710 +0x78
github.com/gruntwork-io/terratest/modules/aws.GetWhetherSchemaExistsInRdsMySqlInstance(0xc00050ea00, 0xc00067c190, 0x49, 0xcea, 0x2e7bb57, 0x8, 0x2e7b7c7, 0x8, 0x2e7d189, 0x9, ...)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/aws/rds.go:86 +0x114
github.com/gruntwork-io/terratest/test.TestTerraformAwsRdsExample(0xc00050ea00)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/test/terraform_aws_rds_example_test.go:66 +0x860
testing.tRunner(0xc00050ea00, 0x2f2ba80)
	/usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:909 +0xc9
created by testing.(*T).Run
	/usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:960 +0x350

goroutine 13 [chan receive, 10 minutes]:
testing.runTests.func1.1(0xc00050e900)
	/usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:1207 +0x3b
created by testing.runTests.func1
	/usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:1207 +0xac

goroutine 74 [IO wait]:
internal/poll.runtime_pollWait(0x4d79e68, 0x72, 0xffffffffffffffff)
	/usr/local/Cellar/go/1.13.4/libexec/src/runtime/netpoll.go:184 +0x55
internal/poll.(*pollDesc).wait(0xc000677398, 0x72, 0xb01, 0xb8e, 0xffffffffffffffff)
	/usr/local/Cellar/go/1.13.4/libexec/src/internal/poll/fd_poll_runtime.go:87 +0x45
internal/poll.(*pollDesc).waitRead(...)
	/usr/local/Cellar/go/1.13.4/libexec/src/internal/poll/fd_poll_runtime.go:92
internal/poll.(*FD).Read(0xc000677380, 0xc00069e472, 0xb8e, 0xb8e, 0x0, 0x0, 0x0)
	/usr/local/Cellar/go/1.13.4/libexec/src/internal/poll/fd_unix.go:169 +0x22b
os.(*File).read(...)
	/usr/local/Cellar/go/1.13.4/libexec/src/os/file_unix.go:259
os.(*File).Read(0xc0002982d8, 0xc00069e472, 0xb8e, 0xb8e, 0xc00007eea8, 0xc0006e2080, 0x2907f60)
	/usr/local/Cellar/go/1.13.4/libexec/src/os/file.go:116 +0x71
bufio.(*Scanner).Scan(0xc000266c80, 0xc000598330)
	/usr/local/Cellar/go/1.13.4/libexec/src/bufio/scan.go:213 +0xa4
github.com/gruntwork-io/terratest/modules/shell.readData(0xc00050ea00, 0xc000266c80, 0xc000598320, 0xc000598330, 0xc00055dfc0)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/shell/command.go:151 +0xd7
created by github.com/gruntwork-io/terratest/modules/shell.readStdoutAndStderr
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/shell/command.go:134 +0x1df

goroutine 75 [IO wait, 3 minutes]:
internal/poll.runtime_pollWait(0x4d79cc8, 0x72, 0xffffffffffffffff)
	/usr/local/Cellar/go/1.13.4/libexec/src/runtime/netpoll.go:184 +0x55
internal/poll.(*pollDesc).wait(0xc000677458, 0x72, 0x1001, 0x1000, 0xffffffffffffffff)
	/usr/local/Cellar/go/1.13.4/libexec/src/internal/poll/fd_poll_runtime.go:87 +0x45
internal/poll.(*pollDesc).waitRead(...)
	/usr/local/Cellar/go/1.13.4/libexec/src/internal/poll/fd_poll_runtime.go:92
internal/poll.(*FD).Read(0xc000677440, 0xc000647000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
	/usr/local/Cellar/go/1.13.4/libexec/src/internal/poll/fd_unix.go:169 +0x22b
os.(*File).read(...)
	/usr/local/Cellar/go/1.13.4/libexec/src/os/file_unix.go:259
os.(*File).Read(0xc0002982e8, 0xc000647000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
	/usr/local/Cellar/go/1.13.4/libexec/src/os/file.go:116 +0x71
bufio.(*Scanner).Scan(0xc000266d00, 0x0)
	/usr/local/Cellar/go/1.13.4/libexec/src/bufio/scan.go:213 +0xa4
github.com/gruntwork-io/terratest/modules/shell.readData(0xc00050ea00, 0xc000266d00, 0xc000598320, 0xc000598330, 0xc00055dfc0)
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/shell/command.go:151 +0xd7
created by github.com/gruntwork-io/terratest/modules/shell.readStdoutAndStderr
	/Users/gauravg/go/src/github.com/gruntwork-io/terratest/modules/shell/command.go:135 +0x22f
exit status 2
FAIL	github.com/gruntwork-io/terratest/test	600.053s
12.41s user 5.80s system 2% cpu 10:30.11s total
```

Just wondering if the tests, modules and examples under terratest are being kept up to date? 
Hello, 

I was thinking to add a new aws module for interacting with the AWS secretsmanager. 
It would be something similar to the [SSM module](https://github.com/gruntwork-io/terratest/blob/master/modules/aws/ssm.go).

We have some terraform workspaces that rely on some secrets that are already created. So we would use this module for creating them before running our tests. 

Thanks!
I could not find any example code using AWS Lambda in the repo. Is there any reason why AWS Lambda and terratest would not work well together?

I've done some initial work in a fork here to see how it might work: https://github.com/davegallant/terratest/commit/f5fdaea97646e63696d83ec09e2f845ffb214f57

Do not want to contribute bloat to the repo, but AWS Lambda is a popular AWS service.

I'm pretty new at using Terratest. I can hard code the ``` awsRegion := "us-east-1" ``` and all works but when using the random region, which I want to use, I get the resources created and destroyed consistently without error but then the assertions run and error out. It seems like the AWS_DEFAULT_REGION isn't being used. I'm using an AWS ECS Fargate container with an Admin IAM policy attached to its ECS_Task_Execution role to run these tests.. Has anyone seen this before?

Not sure if I need to pass in awsRegion specifically to the terratest calls like we do to the aws SDK calls.
```
TestTerraformAwsEcs1Example 2019-11-10T19:35:32Z command.go:158: aws_ecs_cluster.example: Destroying... [id=arn:aws:ecs:us-east-1:xxxx:cluster/terratest-aws-ecs-example-cluster-6BCIRm]
TestTerraformAwsEcs1Example 2019-11-10T19:35:32Z command.go:158: aws_ecs_task_definition.example: Destroying... [id=terratest]
TestTerraformAwsEcs1Example 2019-11-10T19:35:32Z command.go:158: aws_ecs_task_definition.example: Destruction complete after 0s
TestTerraformAwsEcs1Example 2019-11-10T19:35:32Z command.go:158: aws_iam_role.execution: Destroying... [id=terratest-aws-ecs-example-cluster-6BCIRm-ecs-execution]
TestTerraformAwsEcs1Example 2019-11-10T19:35:32Z command.go:158: aws_ecs_cluster.example: Destruction complete after 0s
TestTerraformAwsEcs1Example 2019-11-10T19:35:32Z command.go:158: aws_iam_role.execution: Destruction complete after 0s
TestTerraformAwsEcs1Example 2019-11-10T19:35:32Z command.go:158: 
TestTerraformAwsEcs1Example 2019-11-10T19:35:32Z command.go:158: Destroy complete! Resources: 5 destroyed.
--- FAIL: TestTerraformAwsEcs1Example (55.89s) 
ecs.go:15:  
Error Trace:	ecs.go:15 
terraform_aws_ecs_1_test.go:51 
Error: Received unexpected error: 
Expected to find 1 ECS cluster named 'terratest-aws-ecs-example-cluster-6BCIRm' in region 'eu-west-1', but found '0' 
Test: TestTerraformAwsEcs1Example 
FAIL 
FAIL	test	55.899s 
FAIL 
```
Here is my whole script - just using one of the Terratest simple examples for testing with a simple ECS Fargate cluster setup:
```
package test

import (
	"fmt"
	"testing"

	"github.com/gruntwork-io/terratest/modules/aws"
	"github.com/gruntwork-io/terratest/modules/random"
	"github.com/gruntwork-io/terratest/modules/terraform"

	awsSDK "github.com/aws/aws-sdk-go/aws"
	"github.com/stretchr/testify/assert"
)

// An example of how to test the Terraform module in examples/terraform-aws-ecs-example using Terratest.
func TestTerraformAwsEcs1Example(t *testing.T) {
	t.Parallel()

	expectedClusterName := fmt.Sprintf("terratest-aws-ecs-example-cluster-%s", random.UniqueId())
	expectedServiceName := fmt.Sprintf("terratest-aws-ecs-example-service-%s", random.UniqueId())

	// Pick a random AWS region to test in. This helps ensure your code works in all regions.
	// awsRegion := aws.GetRandomStableRegion(t, []string{"us-east-1", "eu-west-1"}, nil)
	awsRegion := "us-east-1"

	terraformOptions := &terraform.Options{
		// The path to where our Terraform code is located
		TerraformDir: "../examples/ecs_1",

		// Variables to pass to our Terraform code using -var options
		Vars: map[string]interface{}{
			"cluster_name": expectedClusterName,
			"service_name": expectedServiceName,
		},

		// Environment variables to set when running Terraform
		EnvVars: map[string]string{
			"AWS_DEFAULT_REGION": awsRegion,
		},
	}

	// At the end of the test, run `terraform destroy` to clean up any resources that were created
	defer terraform.Destroy(t, terraformOptions)

	// This will run `terraform init` and `terraform apply` and fail the test if there are any errors
	terraform.InitAndApply(t, terraformOptions)

	// Run `terraform output` to get the value of an output variable
	taskDefinition := terraform.Output(t, terraformOptions, "task_definition")

	// Look up the ECS cluster by name
	cluster := aws.GetEcsCluster(t, awsRegion, expectedClusterName)

	assert.Equal(t, int64(1), awsSDK.Int64Value(cluster.ActiveServicesCount))

	// Look up the ECS service by name
	service := aws.GetEcsService(t, awsRegion, expectedClusterName, expectedServiceName)

	assert.Equal(t, int64(0), awsSDK.Int64Value(service.DesiredCount))
	assert.Equal(t, "FARGATE", awsSDK.StringValue(service.LaunchType))

	// Look up the ECS task definition by ARN
	task := aws.GetEcsTaskDefinition(t, awsRegion, taskDefinition)

	assert.Equal(t, "256", awsSDK.StringValue(task.Cpu))
	assert.Equal(t, "512", awsSDK.StringValue(task.Memory))
	assert.Equal(t, "awsvpc", awsSDK.StringValue(task.NetworkMode))
}
```
`terraform output` only supports outputs from the root module unless otherwise specified with a `-module=` argument.

Similarly in terratest, `terraform.Output` works fine for single modules, but not nested child modules.  It doesn't look like the terratest code for outputs allows passing in optional arguments like the CLI `terrafom output` does.

Let's say I have a repo called "base" which calls a submodule called "test".  I need to get an autoscaling group name from "test" when running terratest from "base".

The "test" module has an output defined:
`output "asg_name" {
    value = "${aws_autoscaling_group.test.name}"
}`

The "base" module has this which doesn't work because I have no way of telling .Outputs to give me outputs for the "test" module instead of "base":
`asgName := terraform.Output(t, terraformOptions, "asg_name")`

Am I missing something or will this require a new feature request?
Hello.
Do you consider for helm3 support? If yes any ETA on this?