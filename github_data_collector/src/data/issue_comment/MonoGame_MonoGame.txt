
Fixed Tara's blog links, the archive was moved to docs.microsoft.com

Hello,

i found the following bug if i use the following Options in the Content Pipline
![grafik](https://user-images.githubusercontent.com/5760157/72167129-d4833380-33ca-11ea-8665-9ed3a9746eb5.png)
![grafik](https://user-images.githubusercontent.com/5760157/72167424-64c17880-33cb-11ea-904a-77a1c60cdd83.png)

if i use instead this options(TextureFormat:Color):
![grafik](https://user-images.githubusercontent.com/5760157/72167489-7d319300-33cb-11ea-8bf0-82e43fca2675.png)
![grafik](https://user-images.githubusercontent.com/5760157/72167541-92a6bd00-33cb-11ea-9d13-e39f31a17a21.png)

Texture I'm using but made it smaller for Github
![tile_land_macros1](https://user-images.githubusercontent.com/5760157/72167791-2082a800-33cc-11ea-81fa-416d0c641c13.png)

Also if I'm not using BlendState.AlphaBlend instead using BlendState.NonPremultiplied in my Spritebatch all working correctly with the compressed Images.

How can i get Compression without the Artifacts?

#### What version of MonoGame does the bug occur on:
- MonoGame 3.7

#### What operating system are you using:
- Windows

#### What MonoGame platform are you using:
- DesktopGL, Content Pipeline

<!--
# Please make sure that the issue is present in the
# develop branch of MonoGame before reporting
#
# You can download the development build installer from:
# http://www.monogame.net/downloads/
-->

<!-- Write your issue below -->

Regardless if I initialize the GraphicsAdapter in the DesktopGL or Content Pipeline, GraphicsAdapter.Adapters always returns 1 for multi-screen desktop environments.  In contrast, if the project is built as a Windows project, the number of adapters is 2 or more as intended for multiple displays.  I am unable to compile my code as a Windows project as that project type doesn't support more than 4 controllers in which we need 6.
I am able to work around this problem temporarily by setting the position of the window offscreen to set to monitor 2, with the disadvantage of not discovering supported resolutions.
Example- for monitor one, set window position 0,0.  For monitor two showing a 1080p display on one, set window position 1920,0

<!-- System stats -->

#### What version of MonoGame does the bug occur on:
- MonoGame 3.7

#### What operating system are you using:
- Windows

#### What MonoGame platform are you using:
<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->
- DesktopGL, Content Pipeline

I was checking out the website and I thought this project was abandoned because the latest news if from 2017.
Recently I've been switching from BlendState.AlphaBlend to BlendState.NonPremultiplied since it simplifies things and improves loading performance by removing the need to premultiply textures loaded through Texture2D.FromStream.

However, there is an issue with the way BlendState.NonPremultiplied behaves. Using the source alpha as AlphaSourceBlend results in more translucency than I would expect, and in fact can reduce the overall opacity of the resulting image when using render targets, as seen here:

![image](https://user-images.githubusercontent.com/8607119/71916085-e4e1a700-315b-11ea-814e-deca1799d6b7.png)

The backbuffer is cleared to be magenta, but the background image is fully opaque and thus should hide it completely. The correct result would be as follows:

![image](https://user-images.githubusercontent.com/8607119/71916172-1c505380-315c-11ea-89ef-1846ea21b5c7.png)

I've created a sample project demonstrating this:
[Test.zip](https://github.com/MonoGame/MonoGame/files/4031762/Test.zip)

The corrected blendstate is as follows:
```csharp
var nonPremultiplied = new BlendState
{
    ColorSourceBlend = Blend.SourceAlpha,
    ColorDestinationBlend = Blend.InverseSourceAlpha,
    AlphaSourceBlend = Blend.One,
    AlphaDestinationBlend = Blend.InverseSourceAlpha,
};
```

#### What version of MonoGame does the bug occur on:
- MonoGame 3.7

#### What operating system are you using:
- Windows 10 Pro x64

#### What MonoGame platform are you using:
- WindowsDX

Hello there,

On UWP, when using an Xbox gamepad and pressing the "start" button, ```KeyboardState.GetPressedKeys()``` will return a key with the ```207``` code.


This is likely a ```Windows.UI.Core.CoreWindow.KeyDown``` issue from the WinRT API.
I haven't looked into it any further.

<!-- System stats -->

#### What version of MonoGame does the bug occur on:
- latest develop branch

#### What operating system are you using:
- Windows

#### What MonoGame platform are you using:
<!-- e.g. DesktopGL, WindowsDX, WindowsUWP, Android -->
- UWP

Closes #6870

This pull request is still a work in progress. I am just creating it so I can see the CI Test results as I am having issues testing on my own machine.

Sorry I messed up the last one
