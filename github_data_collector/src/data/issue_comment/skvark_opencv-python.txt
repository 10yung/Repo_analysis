### Description of the problem
I notice running many different applications using opencv libraries are showing very significant performance difference when using the upstream python bindings vs. opencv-python. I verified this on Red Hat 7 and Fedora 30 / 31 Linux distributions. Fedora provides opencv python packages (3.4 series) which I also adapted to work on Red Hat Linux (modifying the RPM spec file to disable a couple of components not available in Red Hat).

When running the same code / applications slowdown is significant. Depending on the application it can take 3 to more than 10 longers. One of the tested application is: [DeepLabCut](https://github.com/AlexEMG/DeepLabCut). Switching only the opencv package and keeping the rest of the environment exactly the same, tripled the performance of our analysis time.

I tried to recompile the opencv-python locally using the setup.py and gcc-8 on CentOS 7, but it didn't make a big difference (there was a 10-20% improvement, but still very far away from the 300% observed with upstream build).

Looking at the cmake arguments in the RPM spec file and comparing it to the one in setup.py I cannot see anything that could explain the problem. I can see the Fedora RPM forces the use of OPENMP rather than using pthreads (and I understand opencv-python uses pthreads instead), not sure if this could be the primary cause of the issue. Sounds strange if it is though. I ran out of ideas and thought about opening this issue.

### Expected behaviour

Same or close to same performance as upstream python bindings

### Actual behaviour

Not entirely sure, but multiple applications are showing significant slowdowns when using this opencv-python rather than the upstream python binding

### Steps to reproduce

- https://github.com/AlexEMG/DeepLabCut / any 3D reconstruction demo from the opencv example code should also work
- CentOS 7 / Fedora 30 - 31
- x86_64
- opencv-python both 29 and 30 (so opencv 3.4 and 4.2) seems to be affected

Thank your for any help.
I'm trying to use this script, https://github.com/kevinam99/capturing-images-from-webcam-using-opencv-python/blob/master/webcam-capture-v1.01.py, on my MacBook with an extra, USB webcam attached to it to take a quick picture for a demo. But, I'm unable to access the USB cam, only the built-in iSight or whatever camera.

I know the script is from another person, but he hasn't been answering any questions, so I thought I would try here.

I had hoped that changing **webcam = cv2.VideoCapture(0)** to **webcam = cv2.VideoCapture(1)** would allow me to use the USB camera, but it still uses the built-in camera. The USB camera does work with Photo Booth and other applications, but not via this py file. Any ideas on what I need to do?

Thanks for any help!

### Expected behavior
I am using Opencv Python version 4.1.2.30 for write image to video as mention in code but unfortunately when I run Script in Pycharm it run correctly but when I convert script to EXE from pyinstaller with PYQT5 its give me error like as below. 
'
### Actual behavior

[ERROR:0] global C:\projects\opencv-python\opencv\modules\videoio\src\cap.cpp (392) cv::VideoWriter::open VIDEOIO(CV_IMAGES): raised OpenCV exception:

OpenCV(4.1.2) C:\projects\opencv-python\opencv\modules\videoio\src\cap_images.cpp:253: error: (-5:Bad argument) CAP_IMAGES: can't find starting number (in the name of file): Detected_video.avi in function 'cv::icvExtractPattern

### Steps to reproduce

- example code
` pathIn = IMG_OUTPUT_FOLDER
image_interval = 1  # Interval between two images
fps = 1 / image_interval
files = video_df
frame_array = []
for i in range(len(files.index)):
      img_name = files.loc[i, 'Image_Name']
      filename = os.path.join(pathIn, img_name)
      # reading each files
       img = cv2.imread(filename)
       height, width, layers = img.shape
       size = (width, height)
       # inserting the frames into an image array
       frame_array.append(img)
  os.chdir(VIDEO_OUTPUT_FOLDER)
  out = cv2.VideoWriter("Detected_video.avi", cv2.VideoWriter_fourcc(*'DIVX'), fps, size)
       for i in range(len(frame_array)):
            # writing to a image array
            out.write(frame_array[i])
    out.release()
   os.chdir(CWD_PATH)`
- operating system
windows 10
- architecture (e.g. x64)
- opencv-python version 4.1.2.30


I want to use tensor data with opencv methods such as cv2.threshold() or cv2.connectedComponentsWithStats() etc. But when I try to give tensor data to these methods then I get an error like `TypeError: Expected Ptr<cv::UMat> for argument '%s'`

How to use tensor data with opencv methods?

[OpenCV 4.2.0](https://github.com/opencv/opencv/wiki/ChangeLog#version420) was released on December 20, 2019. Could an `opencv-python` build of this be released?

Thanks.

### Expected behaviour

Expecting to build a binary package on an Orange Pi 3 running Armbian:

```python setup.py bdist_wheel```

### Actual behaviour

```
CMake Error at /usr/share/cmake-3.10/Modules/FindQt4.cmake:1320 (message):
  Found unsuitable Qt version "" from NOTFOUND, this code requires Qt 4.x
Call Stack (most recent call first):
  cmake/OpenCVFindLibsGUI.cmake:30 (find_package)
  CMakeLists.txt:669 (include)


-- Configuring incomplete, errors occurred!
See also "/home/weiwang/ai/opencv-python/_skbuild/linux-aarch64-3.6/cmake-build/CMakeFiles/CMakeOutput.log".
See also "/home/weiwang/ai/opencv-python/_skbuild/linux-aarch64-3.6/cmake-build/CMakeFiles/CMakeError.log".
Traceback (most recent call last):
  File "/home/weiwang/env/lib/python3.6/site-packages/skbuild/setuptools_wrap.py", line 574, in setup
    languages=cmake_languages
  File "/home/weiwang/env/lib/python3.6/site-packages/skbuild/cmaker.py", line 232, in configure
    os.path.abspath(CMAKE_BUILD_DIR())))

An error occurred while configuring with CMake.
  Command:
    "cmake" "/home/weiwang/ai/opencv-python/opencv" "-G" "Unix Makefiles" "-DCMAKE_INSTALL_PREFIX:PATH=/home/weiwang/ai/opencv-python/_skbuild/linux-aarch64-3.6/cmake-install" "-DPYTHON_EXECUTABLE:FILEPATH=/home/weiwang/env/bin/python" "-DPYTHON_VERSION_STRING:STRING=3.6.8" "-DPYTHON_INCLUDE_DIR:PATH=/usr/include/python3.6m" "-DPYTHON_LIBRARY:FILEPATH=/usr/lib/aarch64-linux-gnu/libpython3.6m.so" "-DSKBUILD:BOOL=TRUE" "-DCMAKE_MODULE_PATH:PATH=/home/weiwang/env/lib/python3.6/site-packages/skbuild/resources/cmake" "-DPYTHON3_EXECUTABLE=/home/weiwang/env/bin/python" "-DBUILD_opencv_python3=ON" "-DOPENCV_SKIP_PYTHON_LOADER=ON" "-DOPENCV_PYTHON3_INSTALL_PATH=python" "-DINSTALL_CREATE_DISTRIB=ON" "-DBUILD_opencv_apps=OFF" "-DBUILD_SHARED_LIBS=OFF" "-DBUILD_TESTS=OFF" "-DBUILD_PERF_TESTS=OFF" "-DBUILD_DOCS=OFF" "-DWITH_QT=4" "-DWITH_V4L=ON" "-DENABLE_PRECOMPILED_HEADERS=OFF" "-DWITH_IPP=OFF" "-DCMAKE_BUILD_TYPE:STRING=Release"
  Source directory:
    /home/weiwang/ai/opencv-python/opencv
  Working directory:
    /home/weiwang/ai/opencv-python/_skbuild/linux-aarch64-3.6/cmake-build
Please see CMake's output for more information.
```

Found in ```/home/weiwang/ai/opencv-python/_skbuild/linux-aarch64-3.6/cmake-build/CMakeFiles/CMakeError.log```:
```
===== BUILD LOG =====
Change Dir: /home/weiwang/ai/opencv-python/_skbuild/linux-aarch64-3.6/cmake-build/CMakeFiles/CMakeTmp

Run Build Command:"/usr/bin/make" "cmTC_d561a/fast"
/usr/bin/make -f CMakeFiles/cmTC_d561a.dir/build.make CMakeFiles/cmTC_d561a.dir/build
make[1]: Entering directory '/home/weiwang/ai/opencv-python/_skbuild/linux-aarch64-3.6/cmake-build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_d561a.dir/src.c.o
/usr/bin/cc   -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wuninitialized -Winit-self -Wno-comment -Wimplicit-fallthrough=3 -Wno-strict-overflow -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fdata-sections    -fvisibility=hidden -Wno-implicit-function-declaration -Wno-uninitialized -Wno-missing-prototypes -Wno-unused-but-set-parameter -Wno-missing-declarations -Wno-unused -Wno-shadow -Wno-sign-compare -Wno-strict-overflow -Wno-pointer-compare  -O3 -DNDEBUG -fPIE   -Wno-absolute-value -o CMakeFiles/cmTC_d561a.dir/src.c.o   -c /home/weiwang/ai/opencv-python/_skbuild/linux-aarch64-3.6/cmake-build/CMakeFiles/CMakeTmp/src.c
/home/weiwang/ai/opencv-python/_skbuild/linux-aarch64-3.6/cmake-build/CMakeFiles/CMakeTmp/src.c:1:0: warning: ignoring #pragma   [-Wunknown-pragmas]
 #pragma

cc1: warning: unrecognized command line option '-Wno-absolute-value'
Linking C executable cmTC_d561a
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTC_d561a.dir/link.txt --verbose=1
/usr/bin/cc    -fsigned-char -W -Wall -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -Wformat -Werror=format-security -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wuninitialized -Winit-self -Wno-comment -Wimplicit-fallthrough=3 -Wno-strict-overflow -fdiagnostics-show-option -pthread -fomit-frame-pointer -ffunction-sections -fda
ta-sections    -fvisibility=hidden -Wno-implicit-function-declaration -Wno-uninitialized -Wno-missing-prototypes -Wno-unused-but-set-parameter -Wno-missing-declarations -Wno-unused -Wno-shadow -Wno-sign-compare -Wno-strict-overflow -Wno-pointer-compare  -O3 -DNDEBUG    -Wl,--gc-sections  CMakeFiles/cmTC_d561a.dir/src.c.o  -o cmTC_d561a
make[1]: Leaving directory '/home/weiwang/ai/opencv-python/_skbuild/linux-aarch64-3.6/cmake-build/CMakeFiles/CMakeTmp'

===== END =====
```

### Steps to reproduce

- example code: ```git clone git@github.com:skvark/opencv-python.git```
- operating system: Armbian ```Ubuntu 18.04.3 LTS```
- architecture (e.g. x86): aarch64
- opencv-python version: ```git clone git@github.com:skvark/opencv-python.git```

### Expected behaviour

Installing OpenCV for python should work with pip install on manjaro (arch-linux).

### Actual behaviour

The installer won't find a manylinux2010 wheel for opencv-python 4.

### Steps to reproduce



Hi, thanks for putting all the work into this! :sparkles:

I have an issue with using opencv-python on Travis Windows instances.
Here a simple ```import cv2``` will result in ```ImportError: DLL load failed: The specified module could not be found.```

The problem is: this even happens with **opencv-python-headless**.

I prepared a small example: https://travis-ci.org/pfaion/travis-opencv-python-test/builds/614589763#L68-L72

#### More context

I had similar problems when loading manually compiled opencv DLLs on travis. It appears this stems from travis using a Windows server version without GUI support. For manually compiled opencv DLLs I was able to fix this by excluding all Windows GUI options in cmake for OpenCV:
```
...
    -DWITH_WIN32UI=OFF\
    -DWITH_DSHOW=OFF\
    -DWITH_MSMF=OFF\
    -DWITH_DIRECTX=OFF\
...
```

Now I tried to use **opencv-python-headless** but I still can't load the DLL. I found a thread where other people reported this problem in a travis forum:
https://travis-ci.community/t/python-and-opencv-dll-load-fails-every-time/4431/6

Apparently someone already figured out the cause of the problem here:
> opencv-python-headless gives the same result because this is a result of OpenCV-Python being linked with AVFoundation support 1.

So I assume this is just a flag that was not turned off correctly for the headless build? I quickly searched through the issues, but could not found it, so here it is 🙂 
Should it be possible to install opencv via

git clone https://github.com/skvark/opencv-python.git
cd opencv-python
python setup.py develop --install-dir $HOME/local

As I understand from cv2.getBuildInformation() opencv-python and opencv-contrib-python isnt compiled with Cmake flag WITH_GSTREAMER. 

With gstreamer it is possible to make RTSP streams and VideoCapture stream augmentations/improvements with gstreamer pipes.

Is there any plan to support the Gstreamer module in the future?
