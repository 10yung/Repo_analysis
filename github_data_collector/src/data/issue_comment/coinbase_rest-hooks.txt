**Is your feature request related to a problem? Please describe.**
Maximize performance

**Describe the solution you'd like**

Ensure this actually has performance benefits

### Setup

```
const mySchema = new schema.Entity('tacos');
const data = [];
for (let i = 0; i < N; i++) {
  data.push({ id: i, type: `foo-${i}` });
}
normalize(data, [mySchema]);
```

### Normalization times in milliseconds for 5 runs

|N = 10,000 entities   |  |  |  |  |          |
| -------- | ---:| ---:| ---:| ---:| ---:|
|current              | 27| 22| 22| 22| 21|
|loose transformation | 17|  9| 11|  9| 12|

|N = 100,000 entities  |  |  |  |  |          |
| -------- | ----:| ----:| ----:| ----:| ----:|
|current              | 210| 201| 200| 200| 198|
|loose transformation |  97| 111|  97|  97|  94|

**Additional context**
Inspiration from https://github.com/paularmstrong/normalizr/pull/431

We already do loose spreads, but since rest-hooks should only be using normalizr after json parsing cycle detection is probably not needed.

### Motivation
<!--
Does this solve a bug? Enable a new use-case? Improve an existing behavior? Concrete examples are helpful here.
-->
Test coverage all the things


### Solution
<!--
What is the solution here from a high level. What are the key technical decisions and why were they made?
-->
Waiting on next ts-jest release so it supports root level babel configs. Currently it's bugging out due to 
having to just read the babel file directly, which transforms the ~/ path wrong.


Should keep existing type, just change the Params
```
{ data: [Entity] } does not match response:
{
  bar: [
     ...
    ]
 }
check key name foo != bar
```

- Should mark error with status 400 so treated as network error
- Should link to rest hooks docs
**Describe the solution you'd like**

* Custom manager.
* Shows connection, disconnection lifecycles.
* Shows intercepting sub/unsub actions
* Shows dispatching receives on message pushes

**Describe the solution you'd like**
Broken down into two use cases:
- Web
- React native

adapt https://github.com/rt2zz/redux-persist to work with async middlewares
**Describe the solution you'd like**
Include multiple methods like:
- react-lightyear
- simply using the suspense fallback mechanism and not loading any data
- integration with things like after.js (using something similar to https://resthooks.io/docs/guides/no-suspense)

Ideally example code will have been tested.
**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

**Is your feature request related to a problem? Please describe.**
Rest Hooks uses memoization to cache certain method calls that aren't expected to change for the lifetime of a given class or object. Lodash.memoize is not even the best general memoizer; but there could be a better special-case method for our uses.

**Describe the solution you'd like**
* Not increase the LOC in actual Rest Hooks (i.e., one line wrapper)
* Have a benchmark to back up claims of good performance
* As small code add as possible.
* Key on `this`. Sometimes it will be static (class) and others the instance (object).

**Describe alternatives you've considered**
Since we're essentially attaching based on `this` a simple custom implementation is not out of the question.

**Additional context**
Stumbled upon https://github.com/anywhichway/nano-memoize recently. Though this is a more general-purpose solution.
Have some example to implement infinite scroll?