I've been trying to left align GalleryItems in InRibbonGallery to the left without much success
![image](https://user-images.githubusercontent.com/5438286/72576204-de52ec80-391e-11ea-9ed9-0cf0c95d7ec2.png)

**Things I've tried:**
- Setting "HorizontalContentAlignment" on InRibbonGallery
- Setting the alignment on GalleryPanel under the hood

So far my workaround is padding the row with placeholder GalleryItems and set their visibility to hidden, but it's kind of ugly

---
### Environment

- Fluent.Ribbon v7.0.1
- Windows 10
- .NET Framework 4.5.2

I'm currently working on a project that uses the InRibbonGallery control. The control has a number of items it hosts, each item has a string property called "Folder" and the entire collection is grouped by "Folder" in the drop-down.

**What I would like to achieve is the following:**
- Filter "InRibbonGallery" down to items in the same "Folder" as the currently selected item.
- The filter needs to be disabled when drop-down appears, allowing the user to see all the groups/"Folder"s.
- A filter is reapplied upon user selecting an item in the drop-down.

So far everything works fine except the scroll down button would not disable when filtering down to a "Folder" with an item count less than or equal to "MaxItemsInRow".

The enable/disable logic for the scroll buttons are based on "ScrollableHeight" property in the "ScrollViewer", which doesn't change at all, and it looks like it's due to GalleryPanel height not adjusting to the new filtered down collection

I hope I've described my issue clear enough as I'm unable to provide zipped code

---
### Environment

- Fluent.Ribbon v7.0.1
- Windows 10
- .NET Framework 4.5.2

I'm currently try to make our application as accessable as possible and stumbled upon this tool: 
https://accessibilityinsights.io/

The tool reports on every ribbon button the following issue:

![image](https://user-images.githubusercontent.com/756703/72370728-209fe200-3703-11ea-9e6c-645e2218ca91.png)

It appears that the root cause is the implementation of the TwoLineLabel.cs:

If the button text has enough space to be on one line the tool will report an error. If there are two lines everything is fine. 

I tried the following in the TwoLineLabel.cs (but this didn't solve all issues, because there are some other code paths) and it "worked":

```
private void UpdateTextRun()
        {
            ...

                if (string.IsNullOrWhiteSpace(this.textRun2.Text))
                {
                    this.textRun2.Visibility = Visibility.Hidden;
                    // this didn't did the trick:
                    //this.textRun2.SetValue(AutomationProperties.IsOffscreenBehaviorProperty, IsOffscreenBehavior.Offscreen);
                }
            }
        }
```

When I set the textRun2 to "hidden" it seems to be "better"

![image](https://user-images.githubusercontent.com/756703/72373023-c6555000-3707-11ea-9d2c-d4ffe32cfc3b.png)

Be aware: I'm not an expert in this area. The accessibility tool gives some good hints, but I'm not sure how important those things are.

If you are interested and need help I could try to make a PR. Maybe you could give me a hint if this "code behind" stuff is OK for you or if I should try to put this in the style or somewhere else.

---
### Environment

- Fluent.Ribbon __v7.1.0__
- Windows 10 (v 1903)
- .NET Framework 472 & .NET Core 3



I'm trying to understand an issue that we finally solved with a call to `InvalidateMeasure()`. It feels like a bug in `Fluent Ribbon`, but I'm not sure.

1. We add `QuickAccessItems` from code **after** the ribbon has been initialized/loaded:

```c#
ribbon.QuickAccessItems.Add(quickAccessMenuItem);
```

2. We have enabled automatic state management:

```xml
<fluent:Ribbon AutomaticStateManagement="True" ...
```

3. And the result is that our quick access menu items are never added to the visually tree. On some machines (it seems). Seems like a race condition of some kind.

**The workaround**
Anyway, if we add the following before adding our `QuickAccessItems` the items are indeed present in the visual tree:

```c#
ribbon.TitleBar.InvalidateMeasure();
ribbon.QuickAccessItems.Add(quickAccessMenuItem);
```

**Is this expected?** Is there a good explanation for this?
Auto opening the submenu is not working for MenuItems with ItemsSource bindings.

Having a DropDownButton with ItemsSource binding, that binds to a collection of objects that themselves contain collections of objects (like "**Dropdown (auto close on click) g**" button, but with ItemsSource binding, not manually adding MenuItem elements in XAML).

Adapting the style with 
```
                        <Fluent:DropDownButton.ItemContainerStyle>
                            <Style TargetType="Fluent:MenuItem" BasedOn="{StaticResource Fluent.Ribbon.Styles.MenuItem}">
                                <Setter Value="{Binding Name}" Property="Header"/>
                                <Setter Value="{Binding MoreStuff}" Property="ItemsSource"/>
                            </Style>
                        </Fluent:DropDownButton.ItemContainerStyle>
```

Problem is pinpointed to File : Fluent.Ribbon\Controls\MenuItem.cs, line 434 and line 
450: `this.Parent` is null.

---
### Environment

- Fluent.Ribbon __v7.0.0
- Windows 7/10
- .NET Framework 4.61

Why is the ComboBox Template (ComboBox.xaml)  => Grid.Height set to 22?

Sure i can override it with a custom template, but why not set it auto or bind it to the ComboBox.Height ?
---
### Environment

- Fluent.Ribbon __v7
- Windows __10__
- .NET Framework __4.7__

Is it possible to align the RibbonGroupBox inside RibbonTabItem to the right?

if yes, then how ??

Thanks in advance

---
### Environment

- Fluent.Ribbon __v7.0.0__
- Windows __10__
- .NET Framework __4.7.2__

I have been trying to figure out how to set the border color of the tab item itself when it is highlighted due to a mouseover. Currently what I have working is the following:

No mouseover:

![image](https://user-images.githubusercontent.com/18285074/68420984-725c4700-016b-11ea-9164-31bf40f81d60.png)

Mouseover of Tab2:
![image](https://user-images.githubusercontent.com/18285074/68421021-8011cc80-016b-11ea-9902-0bb0bd4f1b98.png)

As you can see in the mouseover case, there is no border at all (or a white border perhaps). 

Which `SolidColorBrush x:Key` is used to control that border color? I looked through all the `*Border*` entries in https://github.com/fluentribbon/Fluent.Ribbon/blob/develop/Fluent.Ribbon/Themes/Themes/Theme.Template.xaml but none seem to affect it. Unless I missed it somehow.

Thank you!

---
### Environment

- Fluent.Ribbon __v7.0,0__
- Windows __10__
- .NET Framework __4.7.2__

We have backstage views that need to receive the loaded / unloaded events (so we can dispose some classes). There are a few things that we found and hope can be verified by others:

1. The backstage controls are eagerly loaded (so when the shell is loaded, all the backstage components are already being loaded)
2. The first time the backstage closes, the unloaded event is not fired

I will try to create a small repro. If this is desired behavior, we will implement workarounds in our apps.

---
### Environment

- Fluent.Ribbon 7.0.0
- Windows 10
- .NET Framework 4.7.2

If the RibbonGroupBox (RGB) header text is longer than the content (buttons) in the RGB, the header's text will get trimmed. Is there a reason this trimming is active? Can you disabled it?

**Left**: Header text is trimmed. **Right**: As I would expect the content.
![image](https://user-images.githubusercontent.com/4010559/67414406-4f566280-f5c3-11e9-8a1d-adc6573b3d4f.png)

If you decide to fix this:
- In **RibbonGroupBoxStyle** set **HorizontalContentAlignment** to **Center**.
- In **Fluent.Ribbon.Templates.RibbonGroupBox.OneLineHeaderTemplate**, set **TextTrimming** to **None**.
- Check if **Fluent.Ribbon.Templates.RibbonGroupBox.TwoLineHeaderTemplate** needs similar fix.

