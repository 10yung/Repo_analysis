According to https://github.com/houndci/hound/issues/1756, Hound CI supports a curated list of Rubocop extensions. However, it is difficult to tell which extensions are available, and which are not.

Please list supported Rubocop extensions on documentation pages.
Hello,

Seems like we're not able to use the `@react-native-community` ESLint plugin. Every time I push to a PR branch, Hound shows this error message:

> Some files could not be reviewed due to errors:
> ```
> Oops! Something went wrong! :(
> ESLint: 6.3.0.
> ESLint couldn't find the config "@react-native-community" to extend from. Please check that the > name of the config is correct.
> The config "@react-native-community" was referenced from the config file in ".eslintrc".
> If you still have problems, please stop by https://gitter.im/eslint/eslint to chat with the team.
> ```

`.hound.yml`:
```yaml
eslint:
  enabled: true
  config_file: .eslintrc
  version: 6.3.0
```

`.eslintrc`:
```js
{
    "parser": "@typescript-eslint/parser",
    "root": true,
    "extends": ["@react-native-community", "prettier", "prettier/@typescript-eslint", "prettier/react"]
}
```
Is there the support to Postgres scripts or any SQL lint in the pipeline? 
Hello Hound!

Thank you for this useful tool.  [Linter versioning](http://help.houndci.com/en/articles/2489940-linter-versioning) is really helpful.  It would be great if [haml-lint](https://github.com/sds/haml-lint/releases) could be added to the list of tools that hound supports for custom versioning, as haml-lint@0.25.1 is pretty out-of-date.  Thanks much for your consideration!

Hey there! Talked to @gylaz through the chat, opening the issue here as requested.

Any plans on the roadmap to support to lint HTML files?

An example linter that would fit is this: https://github.com/htmlhint/HTMLHint

Thanks a lot!
GitHub's "[Suggested Changes](https://help.github.com/en/articles/incorporating-feedback-in-your-pull-request#applying-a-suggested-change)" feature allows PR reviewers to suggest quick one-liner changes that can be easily incorporated by the author. An excellent use for this would be to combine with the auto-correct feature of linters (where available).

With this, Hound could report the problem, suggest the auto-correct fix, and the PR author could simply apply it. This would save a huge amount of time vs. normal Git workflows for simple (e.g. whitespace) changes.

Admittedly, this seems like it might potentially be complex to implement, but the time-savings would be immense.
Hound currently only supports specifying single ESLint config file to be used for the whole repository. Unfortunately this does not play nicely with monorepos or repositories with different types of JS source files that have different linting requirements.

Quoting from the [ESLint docs](https://eslint.org/docs/user-guide/configuring#using-configuration-files-1):

> The first way to use configuration files is via .eslintrc.* and package.json files. ESLint will automatically look for them in the directory of the file to be linted, and in successive parent directories all the way up to the root directory of the filesystem (unless `root: true` is specified). This option is useful when you want different configurations for different parts of a project or when you want others to be able to use ESLint directly without needing to remember to pass in the configuration file.

It would be great, if Hound could support / use the same resolution logic for ESLint projects. Instead of specifying the config file explicitly, you would just specify the files / directories to be linted and let ESLint handle the config resolution.

This repo describes why you would want to use different ESLint configs in the same repo: [`@clark/eslint-config-ember`](https://github.com/ClarkSource/eslint-config/tree/master/packages/eslint-config-ember#readme)

Thank you for considering!
I'm working on a project that uses several different JavaScript frameworks (Vue and React) in different areas of the application. As such, it requires multiple configurations for linters such as sass-lint. This works fine locally as my IDE automatically parses the multiple sass-lint configuration files at the root and in any subdirectories. This seems to be standard practice for plugins with standalone configuration files. Ideally, Hound work 'pick up on' any configuration files with standard naming; but given that that may be difficult to maintain, it should at least support multiple config_paths ala: 

```
sass-lint:
   config_file:
      - sass-lint.yml
      - path/to/another/sass-lint.yml     
```
Hi, love the tool, but wondering if you had any plans to add mypy support at some point? This is something my team would be interested in getting integrated alongside our existing hound flake8 & eslint checks.