### Description

Utilities for the configuration file are spread over all the source code. This PR centralized them in a new package. As it is only intended for `kubebuilder`s use, it has been placed in a `internal` directory. As they are accessed from both the `cmd` and the `pkg` directories, it has to be the root `internal` directory. `cmd` package's interaction with this package has also been centralized in the `cmd/util` package.

The variable and field names have also been moved towards `config` instead of `project` as it is more descriptive.

### Motivation

This PR is part of a bigger change tracked in #1218 but can be applied rightaway.

/kind cleanup
Order Travis script execution in order to avoid using resources if easier checks fail. If any stage fails, the rest are not executed, and thus easy to run stages should be placed first.

The order chosen has been:
1. Linting: fastest to run
2. Golden test: only executed once
3. Test: executed for several OS, Go and K8s configurations
4. Coverage: trivial
Suggested in https://github.com/kubernetes-sigs/kubebuilder/pull/1310#discussion_r367616222

Tacked in #1309

/kind cleanup
This fixes if for the first run for goenv
kubernetes-sigs#1319

<!--

Hiya!  Welcome to KubeBuilder!  For a smooth PR process, please ensure
that you include the following information:

* a description of the change
* the motivation for the change
* what issue it fixes, if any, in GitHub syntax (e.g. Fixes #XYZ)

Both the description and motivation may reference other issues and PRs,
but should be mostly understandable without following the links (e.g. when
reading the git commit log).

Please don't @-mention people in PR or commit messages (do so in an
additional comment).

**PLEASE REMOVE THIS COMMENT BLOCK BEFORE SUBMITTING THE PR** (the bits
between the arrows)

-->

<!-- STOP

* If this is an issue with some sort of runtime mechanics, it probably belongs in https://sigs.k8s.io/controller-runtime instead
* If this is an issue with CRD generation or webhook config generation, it probably belongs in sigs.k8s.io/controller-tools instead
* If this is an issue with scaffolding, or is definitely a cross repository effort, it probably belongs here.

-->

<!-- 

Hiya!  Welcome to KubeBuilder!  For a smooth issue process, try to answer the following questions.
Don't worry if they're not all applicable; just try to include what you can :-)

If you need to include code snippets or logs, please put them in fenced code
blocks.  If they're super-long, please use the details tag like
<details><summary>super-long log</summary> lots of stuff </details>

-->

<!-- What broke (please include exact error messages if you can) -->
Generated makefile controller-gen install errors on 1st run for some configs like goenv
~
<!-- What did you expect to happen?  What do you think went wrong? -->
Generated the makefile and tried to run in 1st time without having controller-gen installed
```
 >> make generate
go: creating new go.mod: module tmp
go: finding sigs.k8s.io/controller-tools/cmd v0.2.4
go: finding sigs.k8s.io v0.2.4
go: finding sigs.k8s.io/controller-tools/cmd/controller-gen v0.2.4
/Users/opetrushka/go/1.13.5/bin/controller-gen object:headerFile=./hack/boilerplate.go.txt paths="./..."
/bin/sh: /Users/opetrushka/go/1.13.5/bin/controller-gen: No such file or directory
make: *** [generate] Error 127
```
I think this line should be amended
`CONTROLLER_GEN=$(GOBIN)/controller-gen`
https://github.com/kubernetes-sigs/kubebuilder/blob/master/pkg/scaffold/v2/makefile.go#L123

Identification for both the need to install and using and installed binary uses `$(shell which controller-gen)` which should always be true
$(GOBIN) might not always be the right place, for example with using goenv, running the makefile points to the global one, while go points to a versioned one.

My suggestion is to use the same line as used elsewhere `CONTROLLER_GEN=$(shell which controller-gen)`
which would give a consistent result and would match the rest of the code.

<!-- If you don't know what broke, but have a minimal reproducer, that would be super-helpful helpful! -->

<!--

What versions of software are you using?  Specifically, the following are often useful:

* go version
* kubebuilder version (`kubebuilder version`) and scaffolding version (check your `PROJECT` file)
* controller-runtime version (check your `go.mod` file)
* controller-tools version
* Kubernetes & kubectl versions (just run `kubectl version` against your API server)

-->

<!-- If this is actually about documentation, add `/kind documentation` below -->

/kind bug

One of the first things you have to do when getting started is to select a domain name. For a small project in a small organisation, this might be straight forward, but let's say you work for a large multinational that has 1000s of development teams, you don't just go using your companies domain name anywhere without first asking yourself "is this going to cause a conflict if we ever need to integrate with the operators from other teams in the company? Should I include my organisation unit name in the domain name?"

The most important information that's needed I think is whether the domain name needs to be unique - ie, if two different kubebuilder projects use the same domain name, could that cause a problem, in particular if they ever need to coexist with each other in the same system? The getting started guide should mention this, and the book should probably go into more detail about what the domain name is used for.
### Description

Add `--image` flag to `kubebuilder init ...` command that allows to specify a image name instead of having it hardcoded.

### Motivation

This PR is part of a bigger change tracked in #1218 but can be applied rightaway.

/kind feature

### Description

Include the PROJECT file into `model.Universe`.

It also provides a constructor for `model.Universe` called `model.NewUniverse` that uses the functional options paradigm to provide optional configuration.

### Motivation

The main motivation is providing plugins access to the configuration file. Additionally, `scaffold.Execute` needs some information aside from the files it scaffolds. Right now this informnation is provided in three different ways. As fields to the `Scaffold` instance, the first parameter to `Scaffold.Execute` (`model.Universe`), and the second parameter to `Scaffold.Execute` (`input.Options`). This change is a first step into providing a single way to provide that information.

This PR is part of a bigger change tracked in #1218 but can be applied rightaway.

/kind feature

GolangCI uses [several different linters](https://github.com/golangci/golangci-lint#supported-linters) concurrently to asses the code quality of this repository.

This issue lists which ones are implemented in this project:

- [ ] [bodyclose](https://github.com/timakin/bodyclose)
- [x] [deadcode](https://github.com/remyoudompheng/go-misc/tree/master/deadcode): #1205
- [ ] [depguard](https://github.com/OpenPeeDeeP/depguard)
- [ ] [dogsled](https://github.com/alexkohler/dogsled)
- [x] [dupl](https://github.com/mibk/dupl): #1205
- [x] [errcheck](https://github.com/kisielk/errcheck): #1205
- [ ] [funlen](https://github.com/ultraware/funlen)
- [ ] [gochecknoglobals](https://github.com/leighmcculloch/gochecknoglobals)
- [ ] [gochecknoinits](https://github.com/leighmcculloch/gochecknoinits)
- [ ] [gocognit](https://github.com/uudashr/gocognit)
- [x] [goconst](https://github.com/jgautheron/goconst): #1294
- [ ] [gocritic](https://github.com/go-critic/go-critic)
- [x] [gocyclo](https://github.com/alecthomas/gocyclo): #1302
- [ ] [godox](https://github.com/matoous/godox)
- [x] [gofmt](https://golang.org/cmd/gofmt/): #1310
- [x] [goimports](https://godoc.org/golang.org/x/tools/cmd/goimports): #1292
- [x] [golint](https://github.com/golang/lint): #1291
- [ ] [gomnd](https://github.com/tommy-muehle/go-mnd)
- [x] [gosec](https://github.com/securego/gosec): #1304
- [x] [gosimple](https://github.com/dominikh/go-tools/tree/master/simple): #1312
- [x] [govet](https://golang.org/cmd/vet/): #1310
- [x] [ineffassign](https://github.com/gordonklaus/ineffassign): #1205
- [x] [interfacer](https://github.com/mvdan/interfacer): #1205
- [ ] [lll](https://github.com/walle/lll): #1305
- [x] [maligned](https://github.com/mdempsky/maligned): #1293
- [x] [misspell](https://github.com/client9/misspell): #1205
- [x] [nakedret](https://github.com/alexkohler/nakedret): #1205
- [ ] [prealloc](https://github.com/alexkohler/prealloc)
- [ ] [rowserrcheck](https://github.com/jingyugao/rowserr)
- [ ] [scopelint](https://github.com/kyoh86/scopelint)
- [x] [staticcheck](https://staticcheck.io/): #1312
- [x] [structcheck](https://github.com/opennota/check): #1205
- [ ] [stylecheck](https://github.com/dominikh/go-tools/tree/master/stylecheck)
- [ ] typecheck
- [ ] [unconvert](https://github.com/mdempsky/unconvert)
- [x] [unparam](https://github.com/mvdan/unparam): #1205
- [x] [unused](https://github.com/dominikh/go-tools/tree/master/unused): #1312
- [x] [varcheck](https://github.com/opennota/check): #1205
- [ ] [whitespace](https://github.com/ultraware/whitespace)
- [ ] [wsl](https://github.com/bombsimon/wsl)

<details><summary>Linters descriptions for reference</summary>

- [govet](https://golang.org/cmd/vet/) - Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
- [errcheck](https://github.com/kisielk/errcheck) - Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
- [staticcheck](https://staticcheck.io/) - Staticcheck is a go vet on steroids, applying a ton of static analysis checks
- [unused](https://github.com/dominikh/go-tools/tree/master/unused) - Checks Go code for unused constants, variables, functions and types
- [gosimple](https://github.com/dominikh/go-tools/tree/master/simple) - Linter for Go source code that specializes in simplifying a code
- [structcheck](https://github.com/opennota/check) - Finds unused struct fields
- [varcheck](https://github.com/opennota/check) - Finds unused global variables and constants
- [ineffassign](https://github.com/gordonklaus/ineffassign) - Detects when assignments to existing variables are not used
- [deadcode](https://github.com/remyoudompheng/go-misc/tree/master/deadcode) - Finds unused code
- typecheck - Like the front-end of a Go compiler, parses and type-checks Go code
- [bodyclose](https://github.com/timakin/bodyclose) - checks whether HTTP response body is closed successfully
- [golint](https://github.com/golang/lint) - Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
- [rowserrcheck](https://github.com/jingyugao/rowserr) - checks whether Err of rows is checked successfully
- [stylecheck](https://github.com/dominikh/go-tools/tree/master/stylecheck) - Stylecheck is a replacement for golint
- [gosec](https://github.com/securego/gosec) - Inspects source code for security problems
- [interfacer](https://github.com/mvdan/interfacer) - Linter that suggests narrower interface types
- [unconvert](https://github.com/mdempsky/unconvert) - Remove unnecessary type conversions
- [dupl](https://github.com/mibk/dupl) - Tool for code clone detection
- [goconst](https://github.com/jgautheron/goconst) - Finds repeated strings that could be replaced by a constant
- [gocyclo](https://github.com/alecthomas/gocyclo) - Computes and checks the cyclomatic complexity of functions
- [gocognit](https://github.com/uudashr/gocognit) - Computes and checks the cognitive complexity of functions
- [gofmt](https://golang.org/cmd/gofmt/) - Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
- [goimports](https://godoc.org/golang.org/x/tools/cmd/goimports) - Goimports does everything that gofmt does. Additionally it checks unused imports
- [maligned](https://github.com/mdempsky/maligned) - Tool to detect Go structs that would take less memory if their fields were sorted
- [depguard](https://github.com/OpenPeeDeeP/depguard) - Go linter that checks if package imports are in a list of acceptable packages
- [misspell](https://github.com/client9/misspell) - Finds commonly misspelled English words in comments
- [lll](https://github.com/walle/lll) - Reports long lines
- [unparam](https://github.com/mvdan/unparam) - Reports unused function parameters
- [dogsled](https://github.com/alexkohler/dogsled) - Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
- [nakedret](https://github.com/alexkohler/nakedret) - Finds naked returns in functions greater than a specified function length
- [prealloc](https://github.com/alexkohler/prealloc) - Finds slice declarations that could potentially be preallocated
- [scopelint](https://github.com/kyoh86/scopelint) - Scopelint checks for unpinned variables in go programs
- [gocritic](https://github.com/go-critic/go-critic) - The most opinionated Go source code linter
- [gochecknoinits](https://github.com/leighmcculloch/gochecknoinits) - Checks that no init functions are present in Go code
- [gochecknoglobals](https://github.com/leighmcculloch/gochecknoglobals) - Checks that no globals are present in Go code
- [godox](https://github.com/matoous/godox) - Tool for detection of FIXME, TODO and other comment keywords
- [funlen](https://github.com/ultraware/funlen) - Tool for detection of long functions
- [whitespace](https://github.com/ultraware/whitespace) - Tool for detection of leading and trailing whitespace
- [wsl](https://github.com/bombsimon/wsl) - Whitespace Linter - Forces you to use empty lines!
- [gomnd](https://github.com/tommy-muehle/go-mnd) - An analyzer to detect magic numbers.

</details>
v0.6.1 was released more than 1 month ago.
kubebuilder currently uses v0.5.1, we should update to use v0.6.1+
