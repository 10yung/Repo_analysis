`arfima()`
MRE

```
y <- ts(rnorm(120,0,3) + 1:120 + 20*sin(2*pi*(1:120)/12), frequency=12)
y[10] <- NA
fit <- tslm(y ~ trend + season)
summary(fit)
```

Example (note R^2, Adjusted R^2 and F stat values)

``` r
library(fpp2)
tslm(marathon ~ trend, lambda = 0) %>% summary()
#> 
#> Call:
#> tslm(formula = marathon ~ trend, lambda = 0)
#> 
#> Residuals:
#>       Min        1Q    Median        3Q       Max 
#> -0.094887 -0.026131  0.001828  0.028511  0.111537 
#> 
#> Coefficients:
#>               Estimate Std. Error t value Pr(>|t|)    
#> (Intercept)  5.0764690  0.0075050  676.41   <2e-16 ***
#> trend       -0.0020431  0.0001077  -18.98   <2e-16 ***
#> ---
#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
#> 
#> Residual standard error: 0.04085 on 118 degrees of freedom
#> Multiple R-squared:      1,  Adjusted R-squared:      1 
#> F-statistic: 7.249e+06 on 1 and 118 DF,  p-value: < 2.2e-16
tslm(log(marathon) ~ trend) %>% summary()
#> 
#> Call:
#> tslm(formula = log(marathon) ~ trend)
#> 
#> Residuals:
#>       Min        1Q    Median        3Q       Max 
#> -0.094887 -0.026131  0.001828  0.028511  0.111537 
#> 
#> Coefficients:
#>               Estimate Std. Error t value Pr(>|t|)    
#> (Intercept)  5.0764690  0.0075050  676.41   <2e-16 ***
#> trend       -0.0020431  0.0001077  -18.98   <2e-16 ***
#> ---
#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
#> 
#> Residual standard error: 0.04085 on 118 degrees of freedom
#> Multiple R-squared:  0.7532, Adjusted R-squared:  0.7512 
#> F-statistic: 360.2 on 1 and 118 DF,  p-value: < 2.2e-16
```

<sup>Created on 2019-11-22 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

We could fix the problem by writing our own `summary.tslm()` function.
When setting parameter Parallel=T, the system was giving error

`Error in checkForRemoteErrors(val) :
  4 nodes produced errors; first error: object 'max.order' not found`

function "par.all.arima" used max.order which is not passed in the function.

The issue has been mitigated by exporting max.order in the cluster
Hi,

I would like to contribute to your bootstrap methods and add there three new methods (to the script bootstrap.R).
I would also add new examples to the bagged model script how to use them.
These methods are based on my blog post: [Bootstrapping time series for improving forecasting accuracy](https://petolau.github.io/Bootstrapping-time-series-for-improving-forecasting-in-R/) and also published in journal: [Density-based unsupervised ensemble learning methods for time series forecasting of aggregated or clustered electricity consumption](https://link.springer.com/article/10.1007%2Fs10844-019-00550-3).
The script for these three methods can be found on [my repo](https://github.com/PetoLau/petolau.github.io/blob/master/_Rscripts/11post-BootstrappingTimeSeries.R), and methods are at the beginning. 

Would you be interested and can I make pull request?

Thanks
Hi,
I sometimes get this error when running snaive multiple times.
Error: evaluation nested too deeply: infinite recursion / options(expressions=)?
Error during wrapup: evaluation nested too deeply: infinite recursion / options(expressions=)?

The error then appears with any dataset even just running snaive(AirPassengers) gives return the error.
Any idea?
Thank you
When I run my model with a polynomial trend, I get the following error:

Error in structure(x, class = unique(c("AsIs", oldClass(x)))) : 
  object 'trend' not found

Here is my R code:

mymodel <- tslm(activations ~ trend*season + I(trend^2) + I(sqrt(sold)) + I(sqrt(sold1)) + I(sqrt(sold2)), my_df_ts_all) #final model
my_fc <- forecast(mymodel, h = 12, newdata = tvs_data_test[1:12, ])
my_fc

Any ideas?

Related to #811 

``` r
library(forecast)

fit <- auto.arima(mdeaths + (1:72)*30, xreg = fdeaths)
fit_no_drift <- auto.arima(mdeaths + (1:72)*30, xreg = fdeaths, allowdrift = FALSE)

# produces error
forecast:::simulate.Arima(fit)
#> Error in `+.default`(myarima.sim(model, nsim, x - oldxm, e = e), xm): time-series/vector length mismatch

# does not produce error
forecast:::simulate.Arima(fit_no_drift)
#>           Jan      Feb      Mar      Apr      May      Jun      Jul
#> 1980 3647.331 3471.065 3273.538 3049.595 2864.703 2775.937 2806.507
#> 1981 3388.430 3440.110 3219.104 2707.438 2399.102 2328.691 2381.159
#> 1982 3370.411 3339.870 3249.522 2904.897 2753.535 2521.345 2432.948
#> 1983 2642.220 2540.952 2313.751 1976.971 2010.321 2118.790 2046.678
#> 1984 2426.988 2386.199 2285.428 1965.375 1973.944 1732.831 1584.810
#> 1985 2059.110 2142.306 1899.974 1665.342 1559.392 1478.512 1333.226
#>           Aug      Sep      Oct      Nov      Dec
#> 1980 2653.835 2467.323 2459.332 2627.739 2886.022
#> 1981 2384.757 2291.644 2602.370 2689.139 3069.964
#> 1982 2282.678 2276.852 2197.609 2161.379 2264.961
#> 1983 1868.813 1698.695 1585.489 1711.511 1966.778
#> 1984 1465.333 1370.752 1164.277 1509.773 1806.065
#> 1985 1090.844 1138.965 1052.502 1044.206 1222.235

packageVersion("forecast")
#> [1] '8.9'
```

<sup>Created on 2019-09-10 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

Hi Rob

Not sure if this is an issue or just a choice of methodology.  In the following you decompose all of the data on the second stlm.  I would have thought you would use only the train portion to do that, since it is part of the model (with naive seasonal forecast used on new portion).  

ap=ts(AirPassengers,start=c(1949,1),frequency=12)
log.AP = log(ap)
train <- head(log.AP,n=120)
etsmod <- stlm(train,method="ets",etsmodel="AAN")
logAP.stlm <- stlm(log.AP,model=etsmod)

I am fitting regression with ARIMA errors using auto.arima. Since I suspect the models could be over-fit, I want to use regularization with it. Is it possible to implement lasso or elastic net regularization ?