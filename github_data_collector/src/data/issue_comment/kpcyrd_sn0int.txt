There should be a first class command to check the api status of a given key, like the current credits. This could be done with a regular script that takes a keypair as input.
Updating the database directly is cumbersome, there should be a way to set/unset the featured flag and the new properties described in #134.

This should be tied to a moderator role that can be assigned to users.
We want to expand the current api responses with the following features:

- Flag modules as `defunct`
- Allow redirecting modules to other modules with an automatic update. This is used to rename modules or transfer ownership to a new maintainer
- Deprecate modules to automatically uninstall them (not sure if we actually want this)

All of these are automatically overwritten/cleared by uploading a new update.
In addition to #35 we should add tooling to run CI for module repos. As an example the modules currently in kpcyrd/sn0int should be moved into their own repo with CI enabled.
<!--
Hello!

If you want to report a bug we added some common questions below that help us analyse your issue faster.

All of these are optional so feel free to remove anything that doesn't apply.
-->

snOint fails to install on Kali Linux Rolling.
This is the output:

```
101 root@xxxxx ~/sn0int (git)-[master] # cargo install -f --path .                                                                                                                                                                           :(
  Installing sn0int v0.12.0 (/root/sn0int)
    Updating crates.io index
   Compiling ring v0.16.7
   Compiling url v2.1.0
error[E0658]: use of unstable library feature 'alloc': this library is unlikely to be stabilized in its current form or name (see issue #27783)
  --> /root/.cargo/registry/src/github.com-1ecc6299db9ec823/ring-0.16.7/src/lib.rs:69:1
   |
69 | extern crate alloc;
   | ^^^^^^^^^^^^^^^^^^^

error: aborting due to previous error

For more information about this error, try `rustc --explain E0658`.
error: Could not compile `ring`.
warning: build failed, waiting for other jobs to finish...
error: failed to compile `sn0int v0.12.0 (/root/sn0int)`, intermediate artifacts can be found at `/root/sn0int/target`

Caused by:
  build failed
cargo install -f --path .  13,62s user 0,31s system 120% cpu 11,591 total
```
How to fix that to test sn0int?

Regards
Olaf

---

## Versions

- **rustc --version:**
rustc 1.34.2
- **cargo --version:**
cargo 1.36.0
- **sn0int --version:**
not yet built due to the error described above

- **uname -a:**
Linux xxxxxx 4.19.0-kali5-amd64 #1 SMP Debian 4.19.37-6kali1 (2019-07-22) x86_64 GNU/Linux

## Environment

- **Operating System/Distro:**
$ cat /etc/issue:
Kali GNU/Linux Rolling \n \l

- **Installed from (source/apt/pacman/brew/docker):**
source (github.com) v0.12.0 
cloned two hours ago... 

<!--
Thank you!

We'll try to respond as quickly as possible.
-->

There's currently no way to learn about newly featured modules besides running `quickstart` occisionally. We could include the list of featured modules in the update check response.
`mod` seems slightly overloaded and/or counter-intuitive, since we claim to be a package manager we should consider changing the wording to `package` and `pkg` while keeping `mod` as an alias.

This is a somewhat invasive change, but something we should decide before further investing into the `mod` term.
There are a few shortcomings that should be fixed before the next release:

- [x] accounts should have a phonenumber field
- [ ] devices should have location fields for locations that aren't tied to a network struct (see also #116)
- [x] domains, subdomains and emails should be lowercased automatically
- [x] accounts should have a profile picture field that points to an image blob
- [x] accounts should have a birthday field
- [x] networks should have a description field
- [ ] devices should have a first_seen field (?)
Right now we can have TTLs for structs and links, but we can't have a TTL for fields (like location info that expires over time).

I'm not sure what's the best way to go here yet.
This is a bit of a larger problem/thought.

Most/all datetime are built around the idea very specific timestamps, often with minute or second precision. In some cases we're getting data like "on 2019-07-28" or "1 day ago" which is rather inaccurate. We could try to translate "2019-07-28" into "2019-07-28 00:00:00" but it would be hard to tell if we mean "at some point at that day" or "exactly at this time". "1 day ago" is even worse because this is usually range of "24h-48h59m".