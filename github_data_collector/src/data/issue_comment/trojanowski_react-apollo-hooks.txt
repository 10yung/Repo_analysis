Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/trojanowski/react-apollo-hooks/network/alerts).

</details>
We can see by the code that the useSubscription should unsubscribe to the graphql subscription by it self https://github.com/trojanowski/react-apollo-hooks/blob/master/src/useSubscription.ts#L96

But... on page refresh it seens to be Duplicated, and I am receiving responses from all the subscriptions  (for each page refresh)

I am using 'apollo-link-error' to centrally log errors to the console.   But I wanted to also from that same location in the code, use 'react-toast-notifications' to render an error message to the end user.   The issue is that this second library changes state higher up on the component tree, and forces re-renders down the component tree, resulting in toast notifications being sent in an infinite loop.  

Following code example works:
https://codesandbox.io/s/blissful-hypatia-9qsoy?fontsize=14

The below GQL is valid and works as I intend:
```
const GET_ITEMS = gql`
  {
    continents {
      name
    }
  }
`;
```

but if you were to alter the GQL to simulate a network or GQL error, to something invalid as shown below, my issue can be replicated:
```
const GET_ITEMS = gql`
  {
    invalidGQL {
      name
    }
  }
`;
```

<img width="481" alt="Screenshot 2019-10-26 at 16 04 01" src="https://user-images.githubusercontent.com/19197564/67621700-486d6100-f80a-11e9-8a7d-7ef6b76a574d.png">

There seems to be a problem with `react-apollo-hooks` in that the response is correct but when I print out the `data` object in `useQuery` its incorrect. Anyone any clues as to how to fix this? 
Hey there,

is it possible to use `getMarkupFromTree` with `renderToStream` instead of `renderToString`?
Hi,

I'm using `useLazyQuery` for a user lookup for suggestions, so it's important that requests aren't missed.

The default behaviour it seems is that requests are ignored if one is happening - I would like to cancel running requests and fire the new one.

At the moment if I type "Dominic Tobiaz" and then correct it to "Dominic Tobias", the request will be ignored if the misspelled one is still running.

The `useLazyQuery` request function sadly is not returning the fetch Promise for me to be able to cancel, nor have I had any luck with `fetchPolicy: 'network-only'`.

Thanks for any help!
Is there any way to abort a useQuery that is in progress?  

I have a map that queries data based on the bounding coordinates of the current window. Data fetch times can be a few seconds but if the user rapidly moves around I want to be able to cancel the last request made in favor of the new query.

I do use throttling and checking the loading state of the useQuery however this just prevents new queries being executed concurrently. This is fine but it leaves me with waiting for data from the original useQuery to finish before I can do anything else.



SinglePost
C:/Users/Aveesh shetty/Desktop/classsed-graphql-server-master/classsed-graphql-server-master/client/src/pages/SinglePost.js:8
   5 | import { Button, Icon,Card,Grid,Image,Label } from 'semantic-ui-react';
   6 | import {AuthContext} from '../context/auth';
   7 | 
>  8 | function SinglePost(props){
   9 |     const { user } = useContext(AuthContext);  
  10 |     const postId = props.match.params.postId;
  11 |     console.log(postId)
Can you archive this repo so that first timers do not get confused.