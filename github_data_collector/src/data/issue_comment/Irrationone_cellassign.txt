In data(example_marker_mat) : data set ‘example_marker_mat’ not found
Hi Guys,
So I cannot install cellassign despite downloading. Python 3.7 64 bit, Tensorflow 2.0 and its extra package. Error code it down below.

> library(tensorflow)
> tensorflow::tf_config()
TensorFlow v1.13.1 ()
Python v3.7 (C:\Users\alexanderlee\AppData\Local\Continuum\miniconda3\envs\r-reticulate\python.exe)
> devtools::install_github("Irrationone/cellassign")
Downloading GitHub repo Irrationone/cellassign@master
√  checking for file 'C:\Users\alexanderlee\AppData\Local\Temp\RtmpAFv6rj\remotese9020cb4678\Irrationone-cellassign-bded394/DESCRIPTION' (490ms)
-  preparing 'cellassign':
√  checking DESCRIPTION meta-information ... 
-  checking for LF line-endings in source and make files and shell scripts
-  checking for empty or unneeded directories
-  looking to see if a 'data/datalist' file should be added
-  building 'cellassign_0.99.12.tar.gz'
   
* installing *source* package 'cellassign' ...
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
  converting help for package 'cellassign'
    finding HTML links ... done
    cellassign                              html  
    cellprobs                               html  
    celltypes                               html  
    dot-onLoad                              html  
    example_TME_markers                     html  
    example_cellassign_fit                  html  
    example_marker_mat                      html  
    example_sce                             html  
    extract_expression_matrix               html  
    get_mle_cell_type                       html  
    holik_data                              html  
    inference_tensorflow                    html  
    initialize_X                            html  
    marker_list_to_mat                      html  
    mleparams                               html  
    print.cellassign                        html  
    simulate_cellassign                     html  
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
*** arch - i386
Error: package or namespace load failed for 'cellassign':
 .onLoad failed in loadNamespace() for 'cellassign', details:
  call: initialize_python(required_module, use_environment)
  error: Your current architecture is 32bit however this version of Python is compiled for 64bit.
Error: loading failed
Execution halted
*** arch - x64
ERROR: loading failed for 'i386'
* removing 'C:/Users/alexanderlee/Documents/R/R-3.6.1/library/cellassign'
Error: Failed to install 'cellassign' from GitHub:
  (converted from warning) installation of package ‘C:/Users/ALEXAN~1/AppData/Local/Temp/RtmpAFv6rj/filee904fbe6929/cellassign_0.99.12.tar.gz’ had non-zero exit status
Hi,
I can not install cellassign in Rstudio. I even tried R console with the same errors happen. There are several errors that I do not know if they are separate or derive from the same problem.

> devtools::install_github("Irrationone/cellassign")
Downloading GitHub repo Irrationone/cellassign@master
These packages have more recent versions available.
Which would you like to update?

 1: All                                    
 2: CRAN packages only                     
 3: None                                   
 4: Biobase      (2.42.0  -> 2.44.0) [CRAN]
 5: BiocGenerics (0.28.0  -> 0.30.0) [CRAN]
 6: BiocParallel (1.16.6  -> 1.18.1) [CRAN]
 7: edgeR        (3.24.3  -> 3.26.8) [CRAN]
 8: limma        (3.38.3  -> 3.40.6) [CRAN]
 9: matrixStats  (0.54.0  -> 0.55.0) [CRAN]
10: lambda.r     (1.2.3   -> 1.2.4 ) [CRAN]
11: RcppAnnoy    (0.0.12  -> 0.0.13) [CRAN]
12: RcppHNSW     (0.1.0   -> 0.2.0 ) [CRAN]
13: pkgconfig    (2.0.2   -> 2.0.3 ) [CRAN]
14: digest       (0.6.20  -> 0.6.21) [CRAN]
15: ellipsis     (0.2.0.1 -> 0.3.0 ) [CRAN]

Enter one or more numbers, or an empty line to skip updates:
3
√  checking for file 'C:\Users\key\AppData\Local\Temp\RtmpgtITQJ\remotes2b401eec5abe\Irrationone-cellassign-dc8ee37/DESCRIPTION' ...
-  preparing 'cellassign':
√  checking DESCRIPTION meta-information ... 
-  checking for LF line-endings in source and make files and shell scripts
-  checking for empty or unneeded directories
-  looking to see if a 'data/datalist' file should be added
-  building 'cellassign_0.99.11.tar.gz'
   
Installing package into ‘C:/Users/key/Documents/R/win-library/3.6’
(as ‘lib’ is unspecified)
* installing *source* package 'cellassign' ...
** using staged installation
** R
** data
*** moving datasets to lazyload DB
Warning: multiple methods tables found for 'lengths'
Warning: multiple methods tables found for 'lengths'
Warning: multiple methods tables found for 'rowSums'
Warning: multiple methods tables found for 'colSums'
Warning: multiple methods tables found for 'rowMeans'
Warning: multiple methods tables found for 'colMeans'
** inst
** byte-compile and prepare package for lazy loading
Warning: multiple methods tables found for 'lengths'
Warning: multiple methods tables found for 'lengths'
Warning: multiple methods tables found for 'rowSums'
Warning: multiple methods tables found for 'colSums'
Warning: multiple methods tables found for 'rowMeans'
Warning: multiple methods tables found for 'colMeans'
** help
*** installing help indices
  converting help for package 'cellassign'
    finding HTML links ... done
    cellassign                              html  
    cellprobs                               html  
    celltypes                               html  
    dot-onLoad                              html  
    example_TME_markers                     html  
    example_cellassign_fit                  html  
    example_rho                             html  
    example_sce                             html  
    extract_expression_matrix               html  
    get_mle_cell_type                       html  
    holik_data                              html  
    inference_tensorflow                    html  
    initialize_X                            html  
    marker_list_to_mat                      html  
    mleparams                               html  
    print.cellassign                        html  
    simulate_cellassign                     html  
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
*** arch - i386
Warning: multiple methods tables found for 'lengths'
Warning: multiple methods tables found for 'lengths'
Warning: multiple methods tables found for 'rowSums'
Warning: multiple methods tables found for 'colSums'
Warning: multiple methods tables found for 'rowMeans'
Warning: multiple methods tables found for 'colMeans'
Error: package or namespace load failed for 'cellassign':
 .onLoad failed in loadNamespace() for 'cellassign', details:
  call: initialize_python(required_module, use_environment)
  error: Your current architecture is 32bit however this version of Python is compiled for 64bit.
Error: loading failed
Execution halted
*** arch - x64
Warning: multiple methods tables found for 'lengths'
Warning: multiple methods tables found for 'lengths'
Warning: multiple methods tables found for 'rowSums'
Warning: multiple methods tables found for 'colSums'
Warning: multiple methods tables found for 'rowMeans'
Warning: multiple methods tables found for 'colMeans'
ERROR: loading failed for 'i386'
* removing 'C:/Users/key/Documents/R/win-library/3.6/cellassign'
Error: Failed to install 'cellassign' from GitHub


**When I install python 64bit, It complains alternatively about:**


error: Your current architecture is 64bit however this version of Python is compiled for 32bit.

**Also to confirm Tensorflow installation I tried:**

> library("tensorflow", lib.loc="~/R/win-library/3.6")
Warning message:
multiple methods tables found for ‘lengths’ 
> sess = tf$Session()
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorflow\python\framework\dtypes.py:516: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint8 = np.dtype([("qint8", np.int8, 1)])
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorflow\python\framework\dtypes.py:517: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint8 = np.dtype([("quint8", np.uint8, 1)])
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorflow\python\framework\dtypes.py:518: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint16 = np.dtype([("qint16", np.int16, 1)])
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorflow\python\framework\dtypes.py:519: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint16 = np.dtype([("quint16", np.uint16, 1)])
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorflow\python\framework\dtypes.py:520: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint32 = np.dtype([("qint32", np.int32, 1)])
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorflow\python\framework\dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  np_resource = np.dtype([("resource", np.ubyte, 1)])
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorboard\compat\tensorflow_stub\dtypes.py:541: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint8 = np.dtype([("qint8", np.int8, 1)])
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorboard\compat\tensorflow_stub\dtypes.py:542: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint8 = np.dtype([("quint8", np.uint8, 1)])
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorboard\compat\tensorflow_stub\dtypes.py:543: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint16 = np.dtype([("qint16", np.int16, 1)])
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorboard\compat\tensorflow_stub\dtypes.py:544: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint16 = np.dtype([("quint16", np.uint16, 1)])
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorboard\compat\tensorflow_stub\dtypes.py:545: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint32 = np.dtype([("qint32", np.int32, 1)])
C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorboard\compat\tensorflow_stub\dtypes.py:550: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  np_resource = np.dtype([("resource", np.ubyte, 1)])
WARNING:tensorflow:From C:\Users\KEY\AppData\Local\CONTIN~1\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorflow\python\util\deprecation_wrapper.py:119: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.

> hello <- tf$constant('Hello, TensorFlow!')
> sess$run(hello)
b'Hello, TensorFlow!'

I think it has something to do with Tensorflow detection.


I am running cellassign on a dataset I tried to use your method on a dataset with 19684 cells, 316 marker genes, and 58 cell types (in theory I have more marker genes too). It has been running for a whole day without signs of finishing, so I stopped the process in case I am doing something wrong. 

I got the following warning: 

`2019-09-12 17:30:30.736025: W tensorflow/compiler/jit/mark_for_compilation_pass.cc:1412] (One-time warning): Not using XLA:CPU for cluster because envvar TF_XLA_FLAGS=--tf_xla_cpu_global_jit was not set.  If you want XLA:CPU, either set that envvar, or use experimental_jit_scope to enable XLA:CPU.  To confirm that XLA is active, pass --vmodule=xla_compilation_cache=1 (as a proper command-line flag, not via TF_XLA_FLAGS) or set the envvar XLA_FLAGS=--xla_hlo_profile.
`

and my session info is the following: 
```
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0
LAPACK: /data/yosef2/users/chenling/miniconda3/envs/r_env/lib/libmkl_rt.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] SingleCellExperiment_1.4.1  SummarizedExperiment_1.12.0
 [3] DelayedArray_0.8.0          BiocParallel_1.16.6        
 [5] matrixStats_0.55.0          Biobase_2.42.0             
 [7] GenomicRanges_1.34.0        GenomeInfoDb_1.18.2        
 [9] IRanges_2.16.0              S4Vectors_0.20.1           
[11] BiocGenerics_0.28.0         cellassign_0.99.2          
[13] Matrix_1.2-17              

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.2             whisker_0.4            XVector_0.22.0        
 [4] magrittr_1.5           zlibbioc_1.28.0        lattice_0.20-38       
 [7] tools_3.5.1            grid_3.5.1             tfruns_1.4            
[10] tensorflow_1.14.0      GenomeInfoDbData_1.2.0 base64enc_0.1-3       
[13] bitops_1.0-6           RCurl_1.95-4.12        glue_1.3.1            
[16] compiler_3.5.1         reticulate_1.13        jsonlite_1.6          

```
And my system specs: 

`Linux s128 4.13.0-45-generic #50~16.04.1-Ubuntu SMP Wed May 30 11:18:27 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
`
For paper acceptance / bioconductor submission, we should aim to have the following usability enhancements:

1. Allow multiple ways of passing the marker matrix - ie let the user pass the named list and have cellassign call `marker_list_to_mat` with nice errors if something fails
2. If the SCE doesn't match the number of marker genes, can we try to do something intelligent with subsetting? Ie work out if the rownames look like ensmebl IDs or symbols, and try and subset the sce based on rowData(sce)$Symbol or rowData(sce)$ID ?
3. If SCE already has size factors, use them if s isn't provided (and should we change s to size_factors anyway? bad name)

^^ all of the above should throw a message to the user warning them of what the software is up to and that results aren't guaranteed 


I saw some tags relating to bioc-check, and just wanted to check in on the status of Cellassign being submitted to BIoconductor. Thanks!
Something like:

```r
train <- function(..., top=100) {
    everything <- list(...)
    combined <- do.call(cbind, everything)
    block <- rep(seq_along(everything), vapply(everything, ncol, FUN.VALUE=0L))
    labels <- unlist(lapply(everything, FUN=function(x) x$label)) # assumes we have a 'labels' field.

    # Toy examples with very few cells cause Irlba issues, hence the try().
    clust <- NULL
    try(clust <- scran::quickCluster(combined, min.mean=0.1, BSPARAM=IrlbaParam(), assay.type=1))
    combined <- scran::computeSumFactors(combined, clust=clust, assay.type=1)
    combined <- normalize(combined, exprs_values=1)

    de <- scran::findMarkers(combined, direction="up", block=block, cluster=labels)
    markers <- lapply(de, FUN=function(x) head(rownames(x), top))
    cellassign::marker_list_to_mat(markers)
}
```

The aim would be to auto-generate a decent `marker_gene_info` from one or more reference data sets in `...`. This would enable people to use _cellassign_ as an end-to-end classification tool, i.e., train and test without mandatory human intervention. Right now, people have to read through the vignette, put together a DE analysis, etc. Not too hard for battle-hardened bioinformaticians but still annoying to do. Of course, people can still fiddle with the marker lists if they want to, but if they don't, `train()` is there.

I haven't tested this (beyond checking that it runs) so YMMV. 
I originally wrote that if an SCE isn't provided and a user provides a count matrix then effectively it should be cell by gene, ie

```r
t( counts( sce ) )
```

as input, out of a pedantic need that dim 1 should be samples (cells). However, this is probably over confusing and we should change it to just gene by cell (ie `counts(sce)` equiv)
Accept seurat data types as input using the `Convert` function in seurat. Note that `Seurat` should only be a suggests rather than depends to avoid depending on too many libraries.
If `s` is `NULL` we can check `sizeFactors(sce)` before computing them ourselves, but should have warning as often people don't know what sits there
