I am developing from Linux Mint 19 using `cargo 1.40.0-nightly (5da4b4d47 2019-10-28)`
 and running into the following issue:

I copied the simple example code from https://pyo3.rs/v0.8.5/class.html#constructor
to an example repository:

https://github.com/BurnySc2/PyO3-error/blob/f5d68bd119b509a9aad2ad0a091d7abe08330d41/src/lib.rs#L13-L16

However, as soon as I enable the `new()` function with `#[new]` I get the following linking error on linux:

https://github.com/BurnySc2/PyO3-error/commit/f5d68bd119b509a9aad2ad0a091d7abe08330d41/checks?check_suite_id=408095792#step:9:67

On windows, it compiles without a problem.

I also tested upgrading from 0.8.5 to the 0.9.0-alpha.1 version while changing the syntax properly

https://github.com/BurnySc2/PyO3-error/blob/1c559d55332f7e6bf074f7cd771b24eb034db38a/src/lib.rs#L13-L16

The error is the same:

https://github.com/BurnySc2/PyO3-error/runs/397018311#step:9:126

The error can be reproduced using the following github actions workflow:

https://github.com/BurnySc2/PyO3-error/blob/master/.github/workflows/rust_build.yml

In summary:
`cargo test` and `cargo bench` do not work on linux, but `cargo build --release` does.
All three of the above commands work on windows.
It is not used in Python core, should not be used in user code, and will be removed in Python 3.9. `METH_NOARGS` functions should have type `PyCFunction` instead of `PyNoArgsFunction` and take `NULL` as the second argument.
The `AsPyRef` trait was stripped down considerably; methods `with`, `with_mut`, `into_py`, `into_mut_py` are gone.

The changelog should mention how to rewrite code using them, or if removal was an oversight they should be reinstated.
Could there be an os independent wrapper around things like Py_SetPythonHome? It's not the most rustic of ffi interfaces and the sizes change between windows and linux.
After creating a new exception using:
```rust
create_exception!(my_module, MyException, ExceptionClass);
```
It is natural that I would want to make it available as an import within my python module:
```python
from my_module import MyException
```
However, in order to do this, I had to do some deep Kung Foo action:
```rust
#[pymodule]
fn my_module(py: Python, m: PyModule) {
    m.add("MyException", py.get_type::<MyException>())?;
}
```
It would be nice to have an easier API for this:
```rust
#[pymodule]
fn my_module(_py: Python, m: PyModule) {
    m.add_exception::<MyException>()?;
}
```
I had an idea how to support extracting for pyclasses automatically for `T: Clone`.

It also has really nice error messages if the user attempts to extract a non-clone `#[pyclass]` (see the `ui` test).

Closes #706 
It is much cleaner to be able to choose a local venv in runtime rather than rely on packages being globally installed

I am trying to orchestrate python modules being executed using user input data then forwarding results etc..
The test `test_datetime_check` fails from time to time with an error like
```
---- test_datetime_check stdout ----
thread 'test_datetime_check' panicked at 'called `Result::unwrap()` on an `Err` value: PyErr { type: Py(0x60d15300, PhantomData) }', src\libcore\result.rs:1192:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```
It could be that this occurs only on Windows with Python 3.6: https://github.com/PyO3/pyo3/pull/719/checks?check_run_id=384307686 and https://github.com/PyO3/pyo3/pull/651#issuecomment-546640959.

@pganssle Do you have any idea what could cause this?
## 🐛 Bug Reports

Hi guys, I'm working on a Python module to be used in a Blender addon. I'm getting a weird panic with MacOS Catalina. The weird thing about it is that if I run Blender from the command line it loads fine, but if I run it from the icon/dock something in `pyo3::derive_utils::make_module` fails.

Python version is 3.7.4 bundled with Blender, and I have confirmed that it's the same version running on both situations. I don't know much about MacOS but there shouldn't be any difference on how it's run, right? Could enviroment variables make pyo3 fail?

Here's the backtrace (`pangu.so` is my module)

```
Thread 0 Crashed:: Dispatch queue: com.apple.main-thread
0   libsystem_kernel.dylib        	0x00007fff6a0a97fa __pthread_kill + 10
1   libsystem_pthread.dylib       	0x00007fff6a16bbc1 pthread_kill + 432
2   libsystem_c.dylib             	0x00007fff6a030ab6 __abort + 139
3   libsystem_c.dylib             	0x00007fff6a030a2b abort + 135
4   pangu.so                      	0x0000000134e33939 std::sys::unix::abort_internal::h6717f22b70679bc4 + 9
5   pangu.so                      	0x0000000134e31c70 std::sys_common::util::abort::h1dd17fd3c0d65cf7 + 80
6   pangu.so                      	0x0000000134e32c53 rust_panic + 99
7   pangu.so                      	0x0000000134e32bed std::panicking::rust_panic_with_hook::h4a09e69cd55e5140 + 589
8   pangu.so                      	0x0000000134e32689 rust_begin_unwind + 169
9   pangu.so                      	0x0000000134e5162c core::panicking::panic_fmt::h504df364bc4c5c34 + 44
10  pangu.so                      	0x0000000134e51709 core::result::unwrap_failed::h6f0ff48485ebd7be + 121
11  pangu.so                      	0x0000000134e08a6a pangu::pangu::hf0851a193c56c6ff + 218
12  pangu.so                      	0x0000000134e02d83 pyo3::derive_utils::make_module::h9760a9aa3677d944 + 147
13  org.blenderfoundation.blender 	0x000000010ec53d83 _PyImport_LoadDynamicModuleWithSpec + 579
14  org.blenderfoundation.blender 	0x000000010ec537d3 _imp_create_dynamic + 355
15  org.blenderfoundation.blender 	0x000000010eb5cfcd _PyMethodDef_RawFastCallDict + 605
16  org.blenderfoundation.blender 	0x000000010eb5ca78 PyCFunction_Call + 200
```

### 🌍 Environment

 - Your operating system and version: MacOS Catalina 10.15.2
 - Your python version: 3.7.4 (bundled with Blender)
 - How did you install python (e.g. apt or pyenv)? Did you use a virtualenv?: No, it's bundled with Blender
 - Your rust version (`rustc --version`):  1.41.0-nightly
 - Are you using the latest pyo3 version? Have you tried using latest master (replace `version = "0.x.y"` with `git = "https://github.com/PyO3/pyo3")?` 0.8.2

`&PyAny -> T where T: Clone` conversion should be implementd for all `T: PyClass + Clone`, though I don't know it's possible...
```rust
#[pyclass]
#[derive(Clone)]
struct Attr {
    inner: u32,
}

impl<'source> pyo3::FromPyObject<'source> for Attr {
    fn extract(ob: &'source pyo3::types::PyAny) -> pyo3::PyResult<Attr> {
        let cls: &Attr = pyo3::PyTryFrom::try_from(ob)?;
        Ok(cls.clone())
    }
}
```
