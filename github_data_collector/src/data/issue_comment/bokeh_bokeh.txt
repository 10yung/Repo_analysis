#### ALL software version info (bokeh, python, notebook, OS, browser, any other relevant packages)

Bokeh: 1.4.0
Python: 3.7.4
Jupyter:  1.0.0
OS: Windows 8.1
Browser: Chrome

#### Description of expected behavior and the observed behavior

I'm trying to learn how to create custom bokeh models. I started out trying the Custom model in https://docs.bokeh.org/en/latest/docs/user_guide/extensions.html. But it raises the below exception.

![image](https://user-images.githubusercontent.com/42288570/72675851-b2547a00-3a8a-11ea-820e-3f8426d3047f.png)

Expected: It works without exception
Actual: Exception

#### Complete, minimal, self-contained example code that reproduces the issue

I have the file `custom.ipynb`

```python
from bokeh.core.properties import Instance, String
from bokeh.io import output_file, show
from bokeh.layouts import column
from bokeh.models import HTMLBox, Slider
class Custom(HTMLBox):

    __implementation__ = "custom.ts"

    text = String(default="Custom text")

    slider = Instance(Slider)


slider = Slider(start=0, end=10, step=0.1, value=0, title="value")

custom = Custom(text="Special Slider Display", slider=slider)

layout = column(slider, custom)
show(layout)
```

and the file `custom.ts` in the same folder

```typescript
import { HTMLBox, HTMLBoxView } from "models/layouts/html_box"

import { div } from "core/dom"
import * as p from "core/properties"

export class CustomView extends HTMLBoxView {

    connect_signals(): void {
        super.connect_signals()

        // Set BokehJS listener so that when the Bokeh slider has a change
        // event, we can process the new data.
        this.connect(this.model.slider.change, () => {
            this.render()
            this.invalidate_layout()
        })
    }

    render(): void {
        // BokehjS Views create <div> elements by default, accessible as
        // ``this.el``. Many Bokeh views ignore this default <div>, and instead
        // do things like draw to the HTML canvas. In this case though, we change
        // the contents of the <div>, based on the current slider value.
        super.render()

        this.el.appendChild(div({
            style: {
                padding: '2px',
                color: '#b88d8e',
                backgroundColor: '#2a3153',
            },
        }, `${this.model.text}: ${this.model.slider.value}`))
    }
}

export class Custom extends HTMLBox {
    slider: { value: string }

    // The ``__name__`` class attribute should generally match exactly the name
    // of the corresponding Python class. Note that if using TypeScript, this
    // will be automatically filled in during compilation, so except in some
    // special cases, this shouldn't be generally included manually, to avoid
    // typos, which would prohibit serialization/deserialization of this model.
    static __name__ = "Custom"

    static init_Custom(): void {
        // If there is an associated view, this is typically boilerplate.
        this.prototype.default_view = CustomView

        // The this.define() block adds corresponding "properties" to the JS model.
        // These should normally line up 1-1 with the Python model class. Most property
        // types have counterparts, e.g. bokeh.core.properties.String will be
        // ``p.String`` in the JS implementation. Any time the JS type system is not
        // yet as complete, you can use ``p.Any`` as a "wildcard" property type.
        this.define<Custom.Props>({
            text: [p.String],
            slider: [p.Any],
        })
    }
}
```

#### Stack traceback and/or browser JavaScript console output

```bash
Compilation failed:

custom.ts:13:33 - error TS2339: Property 'slider' does not exist on type 'HTMLBox'.

13         this.connect(this.model.slider.change, () => {
                                   ~~~~~~
custom.ts:32:26 - error TS2339: Property 'text' does not exist on type 'HTMLBox'.

32         }, `${this.model.text}: ${this.model.slider.value}`))
                            ~~~~
custom.ts:32:46 - error TS2339: Property 'slider' does not exist on type 'HTMLBox'.

32         }, `${this.model.text}: ${this.model.slider.value}`))
                                                ~~~~~~
custom.ts:55:21 - error TS2702: 'Custom' only refers to a type, but is being used as a namespace here.

55         this.define<Custom.Props>({
                       ~~~~~~
An exception has occurred, use %tb to see the full traceback.

SystemExit: 1
```




- [x] issues: fixes #9406
- [x] release document entry (if new feature or API change)

This could be automates using `Options` similar to `FigureOptions`. If I can get to it before the release I will, otherwise this at least updates things by hand (there were alot of other params missing at this point)

Also: would be good to fix up the docs references to be sphinx refs, not hardcoded URLs
@bryevdv @Karel-van-de-Plassche 

Following up on the [discussion how to use Docker for deployments](https://discourse.bokeh.org/t/deploying-bokeh-app-on-google-app-engine-gae-with-docker/4469/10) I am planning to update `docker-tools`.

Looking at the current Dockerfiles, I see `alpine` is used as the base image. Assuming that many Bokeh apps requires `pandas`, and following [these recommendations as to which Docker image is best for Python deployments](https://pythonspeed.com/articles/base-image-python-docker-images/) may plan is to:

- [ ] add short explanation on the pro's and cons of different images
- [ ] add a table on the various Dockerfiles to summarize their intent (as examples, with different approaches)
- [ ] add `Dockerfile-from-pip`, which

  - is based on `python:3.7-slim` for apps requiring numpy/scipy/pandas
  - can serve as a template for other Bokeh deployments via `requirements.txt`
  - uses `demo.bokeh.org` as an example

- [ ] add a section on how to deploy on Google App Engine

`Dockerfile-from-pip`
```
FROM python:3.7-slim

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
WORKDIR /some_app

RUN apt-get update \
    && apt-get install gcc -y \
    && apt-get clean
    
COPY . .

RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

EXPOSE 8080
bokeh serve --port 8080 \
   ...
```

Please let me know what your thoughts are on this, after which I wil submit a PR.
#### Environment 
* python: 3.6.9
* bokeh: 1.4.0
* OS: Ubuntu 18.04
* Browser: Chrome
* Graphics card: Nvidia GeForce GTX 1650
* Graphics driver: Nvidia driver 435

#### Description of expected behavior and the observed behavior
In the [ohlc example](https://github.com/bokeh/bokeh/tree/master/examples/app/ohlc), when the backend is changed to webgl, the plot has weird behavior and disappears time to time.

 #### Screenshots or screencasts of the bug in action

![bokeh_streaming_bug](https://user-images.githubusercontent.com/35002731/72341063-a737cd80-36c9-11ea-910d-338b6f1c30cb.jpg)

![bokeh_streaming_bug_2](https://user-images.githubusercontent.com/35002731/72341073-ad2dae80-36c9-11ea-8e59-a681df4f524e.jpg)


#### Complete, minimal, self-contained example code that reproduces the issue

```
import numpy as np
np.random.seed(1)

from bokeh.layouts import row, column, gridplot
from bokeh.models import ColumnDataSource, Slider, Select
from bokeh.plotting import curdoc, figure
from bokeh.driving import count

MA12, MA26, EMA12, EMA26 = '12-tick Moving Avg', '26-tick Moving Avg', '12-tick EMA', '26-tick EMA'

source = ColumnDataSource(dict(
    time=[], average=[], low=[], high=[], open=[], close=[],
    ma=[], macd=[], macd9=[], macdh=[], color=[]
))

p = figure(plot_height=500, tools="xpan,xwheel_zoom,xbox_zoom,reset", x_axis_type=None, y_axis_location="right", output_backend="webgl")
p.x_range.follow = "end"
p.x_range.follow_interval = 100
p.x_range.range_padding = 0

p.line(x='time', y='average', alpha=0.2, line_width=3, color='navy', source=source)
p.line(x='time', y='ma', alpha=0.8, line_width=2, color='orange', source=source)
p.segment(x0='time', y0='low', x1='time', y1='high', line_width=2, color='black', source=source)
p.segment(x0='time', y0='open', x1='time', y1='close', line_width=8, color='color', source=source)

p2 = figure(plot_height=250, x_range=p.x_range, tools="xpan,xwheel_zoom,xbox_zoom,reset", y_axis_location="right", output_backend="webgl")
p2.line(x='time', y='macd', color='red', source=source)
p2.line(x='time', y='macd9', color='blue', source=source)
p2.segment(x0='time', y0=0, x1='time', y1='macdh', line_width=6, color='black', alpha=0.5, source=source)

mean = Slider(title="mean", value=0, start=-0.01, end=0.01, step=0.001)
stddev = Slider(title="stddev", value=0.04, start=0.01, end=0.1, step=0.01)
mavg = Select(value=MA12, options=[MA12, MA26, EMA12, EMA26])

def _create_prices(t):
    last_average = 100 if t==0 else source.data['average'][-1]
    returns = np.asarray(np.random.lognormal(mean.value, stddev.value, 1))
    average =  last_average * np.cumprod(returns)
    high = average * np.exp(abs(np.random.gamma(1, 0.03, size=1)))
    low = average / np.exp(abs(np.random.gamma(1, 0.03, size=1)))
    delta = high - low
    open = low + delta * np.random.uniform(0.05, 0.95, size=1)
    close = low + delta * np.random.uniform(0.05, 0.95, size=1)
    return open[0], high[0], low[0], close[0], average[0]

def _moving_avg(prices, days=10):
    if len(prices) < days: return [100]
    return np.convolve(prices[-days:], np.ones(days, dtype=float), mode="valid") / days

def _ema(prices, days=10):
    if len(prices) < days or days < 2: return [prices[-1]]
    a = 2.0 / (days+1)
    kernel = np.ones(days, dtype=float)
    kernel[1:] = 1 - a
    kernel = a * np.cumprod(kernel)
    # The 0.8647 normalizes out that we stop the EMA after a finite number of terms
    return np.convolve(prices[-days:], kernel, mode="valid") / (0.8647)

@count()
def update(t):
    open, high, low, close, average = _create_prices(t)
    color = "green" if open < close else "red"

    new_data = dict(
        time=[t],
        open=[open],
        high=[high],
        low=[low],
        close=[close],
        average=[average],
        color=[color],
    )

    close = source.data['close'] + [close]
    ma12 = _moving_avg(close[-12:], 12)[0]
    ma26 = _moving_avg(close[-26:], 26)[0]
    ema12 = _ema(close[-12:], 12)[0]
    ema26 = _ema(close[-26:], 26)[0]

    if   mavg.value == MA12:  new_data['ma'] = [ma12]
    elif mavg.value == MA26:  new_data['ma'] = [ma26]
    elif mavg.value == EMA12: new_data['ma'] = [ema12]
    elif mavg.value == EMA26: new_data['ma'] = [ema26]

    macd = ema12 - ema26
    new_data['macd'] = [macd]

    macd_series = source.data['macd'] + [macd]
    macd9 = _ema(macd_series[-26:], 9)[0]
    new_data['macd9'] = [macd9]
    new_data['macdh'] = [macd - macd9]

    source.stream(new_data, 300)

curdoc().add_root(column(row(mean, stddev, mavg), gridplot([[p], [p2]], toolbar_location="left", plot_width=1000)))
curdoc().add_periodic_callback(update, 50)
curdoc().title = "OHLC"

```


This is specific to use cases where you are using bokehJS to render plot JSONs you do not directly control. An example use case is a dashboarding app where you allow users to create plots in python but are not giving them control over the web app side (my use case).

I'd like to be able to do things like disable custom Javascript for security, and enforce sizing modes to 'stretch_both'. I understand this would probably break some plots but in this use case I'd rather the plot looked busted and have the author fix it than wrecking the entire dashboard.
All runs seem to be uploading to the exact same location:

https://ci.bokeh.org/github-ci/run10/examples.html

When trying to create a plot with a hover tool, only hovering over the plot triggers it and clicking usually does something else, like imitate dragging. 

On some hand held devices like cell phones it is not possible to hover over an image being displayed in an html page, touching the screen becomes a click.

It will be nice if there will be an option to detect the device or set the device on a bokeh tool that will interpret a screen click as a hover and display the hover information of the clicked entity.

This will make bokeh plots much more useful on hand held devices since a lot of information provided in the hover is currently not accessible on these devices. Considering that [mobile browsing  surpassed regular web browsing in 2016](https://www.theguardian.com/technology/2016/nov/02/mobile-web-browsing-desktop-smartphones-tablets), this will really help improve experience for a large audience.


# Software versions
OS: Linux 5.4.6
Browser: Chrome 78.0.3904.108 (Official Build) (64-bit)
Python: 3.8.1
JupyterLab: 1.2.4
Pandas: 0.25.3
Bokeh: 1.4.0

# Issue
When plotting a `vbar_stack`, the entire row in the data source is ignored if the first input column contains a NaN in a `pandas.DataFrame`.

If a standard Python `dict` is used as a data source, the output is plotted as expected.

```
from bokeh.plotting import figure, show
from bokeh.models import ColumnDataSource

data = dict(index=[1, 2, 3, 4],
            a=[4, 5, None, 7],
            b=[9, None, 7, 6])

source = ColumnDataSource(data)

f = figure()
f.vbar_stack(x="index", stackers=["a", "b"], source=source,
             width=0.5, color=["red", "blue"])
show(f)

source = ColumnDataSource(pd.DataFrame(index=[1, 2, 3, 4],
                                       data=[dict(a=4, b=9),
                                             dict(a=5, b=None),
                                             dict(a=None, b=7),
                                             dict(a=7, b=6),
                                            ]))

f = figure()
f.vbar_stack(x="index", stackers=["a", "b"], source=source,
             width=0.5, color=["red", "blue"])
show(f)
```

## Expected behavior with dict as data source

![Expected: dict as data source](https://user-images.githubusercontent.com/5302291/71999553-eb4a4e80-3241-11ea-90b0-629ac1c0f3bb.png)

## Unexpected behavior with DataFrame as data source

![Unexpected: DataFrame as data source](https://user-images.githubusercontent.com/5302291/71999567-f2715c80-3241-11ea-8f85-cd42e623ecdc.png)

# Mitigation

I currently let Pandas fill the `NaN`s with zeros.

Thanks for Bokeh, guys!
TextInput only responds to on_change. My use case is to provide a text field that will dynamically load a python module; the idea is that the user can modify the module and get it reloaded by just hitting <Enter> in the TextInput box. With on_change, nothing happens on <Enter>.

 My workaround is to provide a second button that would explicitly reload.

I had some discussion in discourse about adding a property to TextInput that would respond to <Enter>. 

https://discourse.bokeh.org/t/textinput-on-change-behavior/2239

Adds a FullscreenTool which maximizes the root view. Might want to make that configurable and allow just fullscreening the specific subplot (although I'd have to test that).

- [x] issues: fixes #3598
- [ ] Add icon
- [ ] tests added / passed
- [ ] release document entry (if new feature or API change)
