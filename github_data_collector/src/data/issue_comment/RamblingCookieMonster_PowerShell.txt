In my application, I needed to differentiate between users not mapped and domain trust issues. I thought the change may be useful for others too. Thanks for writing a terrific script.
You can add multiple [System.Management.Automation.ParameterAttribute] to a ['Collections.ObjectModel.Collection[System.Attribute]] which allows you to assign multiple parametersetnames to a dynamic parameter. 
Hi,

In Invoke-Parallel i am creating a new disk with a command New-AzureRmDisk, then it gives an error: **Get-RunspaceData : The term 'New-AzureRmDisk' is not recognized as the name of a cmdlet, function, or script file.......**

**code:**
$servers = 1..2
Invoke-Parallel -InputObject $servers -ScriptBlock {
New-AzureRmDisk -Disk .................
}

Please suggest me the solution for the same.

Thanks and Regards
Harsh
`SqlCmd` allows you to pass variable values that can be used in scripts:

```
& sqlcmd -i CreateDb.sql -v dbName="foo"
```

`CreateDb.sql`:
```
CREATE DATABASE $(dbName)
ON (
  NAME = $(dbName)
)
LOG ON (
  NAME = $(dbName)_log,  
)
```

These are different from SQL parameters. 

Does `Invoke-SqlCmd2` cater for this functionality somehow?
Thanks
If a FQDN is used on input, the returned domain is the FQDN of the server and the RPC test will always fail.  It appears that $Name can be either the NetBiosName or FQDN for most things, but not for getting the domain or the RPC test.  

When running from cmd.exe (like a scheduled task) I get an error.  

Cannot find path 'C:\Program Files\PowerShell\Modules\Invoke-SqlCmd2\1.6.4\Private' because it does not exist.

You can't easily see the error as the powershell sub process throws it away.  To demonstrate I have created some scripts. I will attach to this issue.
Add Write-DataTable from scriptcenter gallery
https://gallery.technet.microsoft.com/scriptcenter/2fdeaf8d-b164-411c-9483-99413d6053ae
Question: How can below specified required result be achieved?

Data examples:

file1:
hostname;IP Address
s1;10.10.1.1
s3;10.10.1.3

file2:
Hostname;exist
s1;Y
missing1;Y

Required result:

file3:
hostname;IP Address;exist
"s3";"10.10.1.3";
"s1";"10.10.1.1";"Y"
"missing1";;"Y"
I've tried:
```
$CSVfieldDelimiter =';'
# Get the files loaded into objects
$Object1 = Import-CSV file1 -Delimiter $CSVfieldDelimiter 
$Object2 = Import-CSV file2 -Delimiter $CSVfieldDelimiter 
# Dot source the file
. .\join-object.ps1

Join-Object -Left $Object1 -Right $Object2 `
			-LeftJoinProperty Hostname `
			-RightJoinProperty Hostname `
			-RightProperties exist `
			-Type AllInBoth |
    Export-CSV $file3 -Delimiter $CSVfieldDelimiter -NoTypeInformation

```
but result is:
file3:
hostname;IP Address;exist
"s3";"10.10.1.3";
"s1";"10.10.1.1";"Y"
;;"Y"

This caught me by surprise since Export-Credential takes a PSCredential object as position parameter 1.
If you leave off the version number, PowerShellGallery.com will automatically forward the developer to the WFTools' latest version URL.