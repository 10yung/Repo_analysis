Running as a user who is certainly not the root, I have spark builds failing with:

[error] Could not create directory /root/.zinc/0.3.9/compiler-interface-2.11.8-51.0

What could cause this?
Angular CLI makes  'ng' command available and it causes nailgun script to fail
https://cli.angular.io/

Simplest fix is to disable check for ng existence:

# check whether we have an ng command
#do not check as it collides with ng from angular  
#function ng_exists {
#type -P $ng_cmd > /dev/null 2>&1
#}
ng_exists=false;
I currently have a compilation job that I would like to run in memory but because Zinc uses io which in turn uses the DefaultFileSystem it's impossible to do so. 

With latest master, here's what I get:

```
> reload plugins
[info] Loading global plugins from /Users/grek/.sbt/0.13/plugins
[info] Loading project definition from /Users/grek/scala/zinc/project
> printWarnings
[info] Updating {file:/Users/grek/scala/zinc/project/}project...
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Done updating.
[warn] /Users/grek/scala/zinc/project/Scriptit.scala:31: method apply in object InputTask is deprecated: Use another InputTask constructor or the `Def.inputTask` macro.
[warn]   def scriptitTask = InputTask((scriptitBase, scriptitTestName)((dir, name) => (s: State) => scriptitParser(dir, name))) { input =>
[warn]                      ^
[warn] /Users/grek/scala/zinc/project/Scriptit.scala:77: method binaryVersion in object CrossVersion is deprecated: Use CrossVersion.scalaApiVersion or CrossVersion.sbtApiVersion
[warn]       val binaryVersion = CrossVersion.binaryVersion(version, "")
[warn]                                        ^
[warn] /Users/grek/scala/zinc/project/Scriptit.scala:81: method libraryJar in trait ScalaProvider is deprecated: see corresponding Javadoc for more information.
[warn]         property("library") -> provider.libraryJar.getAbsolutePath,
[warn]                                         ^
[warn] /Users/grek/scala/zinc/project/Scriptit.scala:82: method compilerJar in trait ScalaProvider is deprecated: see corresponding Javadoc for more information.
[warn]         property("compiler") -> provider.compilerJar.getAbsolutePath,
[warn]                                          ^
[warn] /Users/grek/scala/zinc/project/Scriptit.scala:83: method libraryJar in trait ScalaProvider is deprecated: see corresponding Javadoc for more information.
[warn]         property("extra") -> Path.makeString((provider.jars.toSet - provider.libraryJar - provider.compilerJar).toSeq),
[warn]                                                                              ^
[warn] /Users/grek/scala/zinc/project/Scriptit.scala:83: method compilerJar in trait ScalaProvider is deprecated: see corresponding Javadoc for more information.
[warn]         property("extra") -> Path.makeString((provider.jars.toSet - provider.libraryJar - provider.compilerJar).toSeq),
[warn]                                                                                                    ^
[warn] /Users/grek/scala/zinc/project/Scriptit.scala:85: method libraryJar in trait ScalaProvider is deprecated: see corresponding Javadoc for more information.
[warn]         property("home") -> provider.libraryJar.getParentFile.getParentFile.getAbsolutePath
[warn]                                      ^
```

It would be great to get rid of them.

This is reflected by test failures:

```
[info] analysis/merge
[info]  + ! zinc -status
[info]  + zinc -nailed -analysis-cache analysis/a -d classes a/A.scala
[info]  + zinc -nailed -analysis-cache analysis/b -d classes b/B.scala
[info]  + zinc -nailed -analysis-cache analysis/c -d classes c/C.scala
[error] ! zinc -nailed -analysis -cache analysis/abc -merge analysis/a:analysis/b:analysis/c
[error]   /Users/grek/scala/zinc/src/scriptit/analysis/merge/test:11
[error]   [error] Merging of Analyses that have`relations.memberRefAndInheritanceDeps` set to `true` is not supported.

[error] ! zinc -nailed -analysis -cache a2 -rebase c1:c2
[error]   /Users/grek/scala/zinc/src/scriptit/analysis/rebase/test:11
[error]   [error] The `direct` source dependencies relation is not supported when `nameHashing` flag is disabled.

[error] ! zinc -nailed -analysis -cache a1 -rebase c1:c2
[error]   /Users/grek/scala/zinc/src/scriptit/analysis/reload/test:15
[error]   [error] The `direct` source dependencies relation is not supported when `nameHashing` flag is disabled.

[error] ! zinc -nailed -analysis -cache analysis/abc -split a:analysis/a,b:analysis/b,c:analysis/c
[error]   /Users/grek/scala/zinc/src/scriptit/analysis/split/test:7
[error]   [error] Grouping of Analyses that have`relations.memberRefAndInheritanceDeps` set to `true` is not supported.
```

There is currently no option to prevent `zinc -start` from putting Nailgun in the background. This is a problem if I want to use something like runit to keep zinc running (after reboots or zinc crashes, etc).

An ideal solution would include this option making the zinc script use `exec` to start the JVM, so that signals work correctly.

(This would be a pull request, but getting $work to sign off on the CLA would take ages, sorry.)

`$SCALA_HOME` is pretty widely set to point at a local scala installation, right? Wouldn't this be preferable to defaulting to the bundled version of scala?

I use Zinc from Gradle to compile a Scala project. Compilation fails with "implicit numeric widening" error, but I don't see any information where is the error located. I mean there is no file name, line number, ...

I run "gradle -d compileTestScala" and I get following output:

```
10:39:58.372 [ERROR] [system.err] 10:39:58.372 [ERROR] [org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler] implicit numeric widening
10:39:59.468 [QUIET] [system.out] 10:39:59.468 [DEBUG] [org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler] Compilation failed (CompilerInterface)
10:39:59.471 [QUIET] [system.out] 10:39:59.469 [INFO] [org.gradle.api.internal.tasks.compile.daemon.CompilerDaemonServer] Exception executing org.gradle.api.intaCompiler@74f7baf5 in compiler daemon: org.gradle.api.internal.tasks.compile.CompilationFailedException: Compilation failed.
10:39:59.470 [ERROR] [system.err] 10:39:59.468 [ERROR] [org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler] one error found
10:39:59.496 [DEBUG] [org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter] Finished executing task ':compileTestScala'
10:39:59.499 [LIFECYCLE] [class org.gradle.TaskExecutionLogger] :compileTestScala FAILED
```

The project I am currently working, even using the incremental compiler, very often takes around 2 minutes to compile. Often in change-compile cycle I get some compilation errors in a few seconds but the incremental compiler still takes 2 minutes to finish. 

One argument against fail fast would be the possibility of more errors. My counter argument would be: what's the difference? The compilation session won't be cached anyways.

As it only makes sense to invoke Zink locally (#33) the listening port should only be opened locally, too. This reduces the risk of being exploited remotely.
