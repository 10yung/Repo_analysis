Adds support for `<category>` tags within feed items for atom/rss2.0. 

Also, some small fixes to allow the demo app to compile using the latest version of Xcode.


How can do this by swift 2? 

Deprecated method `sizeWithFont:constrainedToSize:lineBreakMode:` is replaced by `boundingRectWithSize`
And Bitcode is disabled is project setting as project is supporting below ios 6.


I had exc_bad_access when dismissed the MWFeedParser delegate view controller before all parsing labours were done.

I could fix this by making the delegate definition weak:

```
// MWFeedParser.h
@property (nonatomic, weak) id <MWFeedParserDelegate> delegate;
```

I also had to delete the private redefinition: 

`id <MWFeedParserDelegate> __unsafe_unretained delegate;`

Hi!

I added tvOS support to MWFeedParser, to do this I define the framework code as an external iOS framework and then I defined the tvOS framework, I also updated the pod spec to support this new platform, for testing the result I added another tvOS application target.

Let me know what you think.

I was using this Parser since long time in my app so i thought its time to upgrade the code. so i just download the latest code and try to tun in xcode 7.2 but not working.  giving below error. 

MWFeedParser[2185:222872] **\* Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Application windows are expected to have a root view controller at the end of application launch'

can u please guide me so i can upgrade my code with this.

If you try this, it does not substitute the entities:
NSString \* example = @"Title &#x1f693;&#x1f68c;&#x1f692;&#x1f696;";
NSString \* result = [example stringByDecodingHTMLEntities];

Here is the fix (GTMNSString+HTML.m from line 481):
NSScanner *scanner = [NSScanner scannerWithString:hexSequence];
unsigned long long value;
if ([scanner scanHexLongLong:&value] && [scanner scanLocation] == length - 4) {
    if (value < USHRT_MAX) {
        unichar uchar = value;
        NSString *charString = [NSString stringWithCharacters:&uchar length:1];
        [finalString replaceCharactersInRange:escapeRange withString:charString];
    } else if ( (value & 0xFF000000) == 0 ){
        value -= 0x10000;
        unichar highSurrogate = value >> 10; // leave the top 10 bits
        highSurrogate += 0xD800;
        unichar lowSurrogate = value & 0x3FF; // leave the low 10 bits
        lowSurrogate += 0xDC00;
        NSString *charString = [NSString stringWithCharacters:(unichar[]){highSurrogate, lowSurrogate} length:2];
        [finalString replaceCharactersInRange:escapeRange withString:charString];
    }
