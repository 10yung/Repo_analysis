Hi,
`fff`  is a wonderful tool I think which is easy to use. But When I want to open a selected text file whose sizes may be large than several GBs,  it's not easy to open it with `vim`. So how to change the tools (eg. `less`) to open a text file?

Thanks.
Hi, I've noticed that image preview doesn't work correctly if you don't use a window manager that doesn't have EWMH support to retrieve _NET_ACTIVE_WINDOW as the WIDTH and HEIGHT of the terminal window. As such, w3m-img displays the image at max resolution, not fitting the terminal window. I realise this is an unusual setup I have, but finding a more simpler way of retrieving these things might be nice. wattr from wmutils is a nice solution, but obviously xdotool is installed by default usually, whereas wmutils is not.

Basically, it would be nice not to have to maintain a personal fork :100: 

Would be awesome to have the file operations (copy, paste, cut, ranger style bulk rename, etc) available between shells so that you could tag items in one fff instance in say a tmux pane and then paste them in another instance of fff running in another pane.
Is there a way to execute an arbitrary shell command from within fff?

For example, run `fd` and see the results, then use fff to navigate there?
https://unix.stackexchange.com/questions/185216/file-command-apparently-returning-wrong-mime-type
### ?: display keyboard shortcuts
```
sage                                                                  right: go to child dir
       j: scroll down                                                  f: new file
       k: scroll up                                                    n: new dir
       h: go to parent dir                                             r: rename
       l: go to child dir                                              X: toggle executable
       enter: go to child dir                                          y: mark copy
       backspace: go to parent dir                                     m: mark move
       -: Go to previous dir.                                          d: mark trash (~/.local/share/fff/trash/)
       g: go to top                                                    s: mark symbolic link
       G: go to bottom                                                 b: mark bulk rename
       :: go to a directory by typing.                                 Y: mark all for copy
       /: search                                                       M: mark all for move
       t: go to trash                                                  D: mark all for trash (~/.local/share/fff/trash/)
       ~: go to home                                                   S: mark all for symbolic link
       e: refresh current dir                                          B: mark all for bulk rename
       !: open shell in current dir                                    p: paste/move/delete/bulk_rename
       x: view file/dir attributes                                     c: clear file selections
       i: display image with w3m-img                                   [1-9]: favourites/bookmarks (see customization)
       down:  scroll down                                              q: exit with 'cd' (if enabled).
       up:    scroll up                                                Ctrl+C: exit without 'cd'.
       left:  go to parent dir

```
Blank line that goes up one directory when selected,  "thing" titled empty that always appears at the top & doesn't do anything
```
empty

LICENSE.md
Makefile
README.md
fff
fff.1

```

Works as expected with an updated bash(i.e with homebrew)
Maybe it is already included and i haven't found it, but i miss a keybinding for printing out the marked files.
So i am able to check, which files will be processed with copy, move, etc. when i am in the target directory.
something like  printf '%s\n' "${marked_files[@]}"...

Nerd Fonts is a font made for developers, which includes icons for a variety of file types.

It is used by the plugin [ranger_devicons](https://github.com/alexanderjeurissen/ranger_devicons) to produce an output like so:

![image](https://user-images.githubusercontent.com/4635334/62484586-7d789300-b788-11e9-86c6-05a9c74a55bd.png)

A feature like this for fff would be much appreciated.

An example of how it could be implemented in the config:

```
# File format.
# Customize the item string.
# Format ('%f' is the current file, '%i' is the file type icon): "str%fstr"
# Example (Add a tab before files): FFF_FILE_FORMAT="\t%f"
export FFF_FILE_FORMAT="%i%f"

# Mark format.
# Customize the marked item string.
# Format ('%f' is the current file, '%i' is the file type icon): "str%fstr"
# Example (Add a ' >' before files): FFF_MARK_FORMAT="> %f"
export FFF_MARK_FORMAT=" %i%f*"
```

This feature would have to use the file extension (which the ranger plugin also uses) because repeated mime-type lookup is computationally expensive.