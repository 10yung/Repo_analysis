Seems like, latest version of animint not  released, I tried with lower version  of R, still that also not avilable. 

package ‘animint’ is not available (for R version 3.4.3)
```r
library(animint)
mtcars$cyl <- as.factor(mtcars$cyl)
plot_car <- ggplot()+geom_point(aes(mpg, disp, 
                                      colour=cyl), 
                                  data = mtcars)
animint2dir(list(plot=plot_car), "test_plot")
```

```r
Error in if (attributes(margin.value)$unit == "pt") { : 
  argument is of length zero
```

```r
devtools::session_info()
```

```r
Session info -------------------------------------------------------------------------------------------------------------
 setting  value                       
 version  R version 3.4.3 (2017-11-30)
 system   x86_64, darwin15.6.0        
 ui       RStudio (1.1.383)           
 language (EN)                        
 collate  en_US.UTF-8                 
 tz       America/Chicago             
 date     2018-03-09                  

Packages -----------------------------------------------------------------------------------------------------------------
 package     * version    date       source                               
 animint     * 2017.01.04 2018-03-09 Github (tdhock/animint@9f3f84d)      
 assertthat    0.2.0      2017-04-11 CRAN (R 3.4.0)                       
 autoinst      0.0.0.9000 2017-04-27 Github (jimhester/autoinst@dfbdc50)  
 backports     1.1.2      2017-12-13 CRAN (R 3.4.3)                       
 base        * 3.4.3      2017-12-07 local                                
 colorout      1.1-2      2017-04-23 Github (jalvesaq/colorout@020a14d)   
 colorspace    1.3-2      2016-12-14 CRAN (R 3.4.0)                       
 compiler      3.4.3      2017-12-07 local                                
 crayon        1.3.4      2017-09-16 CRAN (R 3.4.1)                       
 datasets    * 3.4.3      2017-12-07 local                                
 desc          1.1.1      2017-08-03 CRAN (R 3.4.1)                       
 devtools    * 1.13.5     2018-02-18 CRAN (R 3.4.3)                       
 digest        0.6.15     2018-01-28 cran (@0.6.15)                       
 fortunes      1.5-4      2016-12-29 CRAN (R 3.4.0)                       
 ggplot2     * 2.2.1      2016-12-30 CRAN (R 3.4.0)                       
 graphics    * 3.4.3      2017-12-07 local                                
 grDevices   * 3.4.3      2017-12-07 local                                
 grid          3.4.3      2017-12-07 local                                
 gtable        0.2.0      2016-02-26 CRAN (R 3.4.0)                       
 htmltools     0.3.6      2017-09-11 local                                
 htmlwidgets   1.1        2018-03-02 Github (ramnathv/htmlwidgets@03b6d9b)
 inline        0.3.14     2015-04-13 CRAN (R 3.4.0)                       
 knitr         1.20       2018-02-20 CRAN (R 3.4.3)                       
 labeling      0.3        2014-08-23 CRAN (R 3.4.0)                       
 lazyeval      0.2.1.9000 2018-03-02 Github (hadley/lazyeval@93c455c)     
 magrittr      1.5        2014-11-22 CRAN (R 3.4.0)                       
 memoise       1.1.0      2017-04-21 CRAN (R 3.4.0)                       
 methods     * 3.4.3      2017-12-07 local                                
 munsell       0.4.3      2016-02-13 CRAN (R 3.4.0)                       
 pillar        1.2.1      2018-02-27 CRAN (R 3.4.3)                       
 pkgload       0.0.0.9000 2017-10-26 Github (r-lib/pkgload@8b97605)       
 plyr          1.8.4      2016-06-08 CRAN (R 3.4.0)                       
 R6            2.2.2      2017-06-17 CRAN (R 3.4.0)                       
 Rcpp          0.12.15    2018-01-20 CRAN (R 3.4.3)                       
 reprex      * 0.1.2      2018-01-26 CRAN (R 3.4.3)                       
 rlang         0.2.0.9000 2018-03-02 Github (tidyverse/rlang@9ea33dd)     
 rprojroot     1.3-2      2018-01-03 CRAN (R 3.4.3)                       
 rstudioapi    0.7        2017-09-07 CRAN (R 3.4.1)                       
 scales        0.5.0.9000 2018-03-02 Github (hadley/scales@d767915)       
 stats       * 3.4.3      2017-12-07 local                                
 testthat      2.0.0      2017-12-13 CRAN (R 3.4.3)                       
 tibble        1.4.2      2018-01-22 cran (@1.4.2)                        
 tools         3.4.3      2017-12-07 local                                
 utils       * 3.4.3      2017-12-07 local                                
 withr         2.1.1.9000 2018-03-02 Github (jimhester/withr@5d05571)     
 yaml          2.1.17     2018-02-27 cran (@2.1.17)
```
Hi, I am facing the same error when running the example. I changed my ggplot2 version as suggested by you in a similar thread but now I get this error : Error in as.vector(y) : attempt to apply non-function. Appreciate your help.
This branch implements a test that fails for infinite data. This used to be working when we saved the built data to tsv files (before axis updates). See screenshot below. 

- Left: the current animint code which renders segments incorrectly (outside of their panels).
- Right: rendering in In ggplot2, infinite data are rendered on the edge of the panel.

![screenshot-inf-full](https://cloud.githubusercontent.com/assets/932850/19965309/c6d4cb72-a19c-11e6-990f-92b9fc5e2124.png)

Note also that the DOM panel shows that the JavaScript code is not able to tell the difference between positive and negative infinity (they are both read as NaN).

To fix this I propose to modify the compiler to replace Inf/-Inf values with the appropriate finite values that correspond to the panel border positions (scale limits). These scale limits will be different for different showSelected subsets, if axis_updates is on. @faizan-khan-iit do you have any ideas about where to change the compiler in order to achieve this?

TODO add a test for infinite values in a plot with axis updates. 
rather than explicitly writing `structure(list(...), class="animint")` we can write `animint(...)`
Currently, ([through this PR](https://github.com/tdhock/animint/pull/158)) we have axes updates for [most `geoms`](https://github.com/tdhock/animint/pull/158#issuecomment-239511469). The computation for data subsets to be used during updates is done in the compiler. This works for most cases, but due to the limitations of the compiler, it does not work properly for some examples: https://github.com/tdhock/animint-examples/blob/master/examples/chip.seq.R#L247

We want axes updates to handles all the cases of `single` selection variables. One possible solution, as @tdhock suggested, would be to move the whole computation to the renderer, since there seems to be no efficient way to handle this in the compiler.

Any other suggestions?

as it is, scales are trained before removing NA rows (which will not be plotted). an example where this is problematic (but not a huge problem) is described in comments in test-renderer1-text.R https://github.com/tdhock/animint/blob/NA-separate-lines/tests/testthat/test-renderer1-text.R#L6-L11

In general selected.\* aesthetics are to let the plot designer answer the question, "how should the geom look after it is clicked?" right now in animint we use a simple heuristic which is not configurable by the plot designer
- when a geom_rect is clicked we set its border (stroke) color to black. Otherwise it has no border. Using selected.\* aesthetics we could say color=NA and selected.color="black"
- when any other geom is clicked we set its alpha (opacity) to 0.5 more than the value that was specified in the R code. using selected.\* aesthetics we could say alpha=0.5 and selected.alpha=1, or alpha=0 and selected.alpha=0.5.
  The idea of selected.\* aesthetics is to make this behavior more configurable, so the designer can change what the geoms look like after they are clicked. However if you implement this new feature, please make sure to respect these settings as defaults.

@viswaraavi here are detailed answers to your questions.

```
For this example 
p <- ggplot() +
  geom_point(data = tips, 
             aes(x = total_bill, y = tip, colour = sex_smoker),selected.colour="Red")
we will have all the legends selected and all the data is shown and the legends will
respond to mouse clicks and update selection.
```

that is correct. However, the selected.colour will have no effect, since there is no clickSelects aesthetic specified. selected.colour="red" means that the point color should be changed to red when the point's clickSelects value is selected.

```
What will be the difference between specifying colour and selected.colour?
Is it that if we specify colour all the variable will be shown with colour red. But with
selected.colour we want only selected variable to be in colour red.
```
- selected.colour=red means we want to change the point color to red when it is clicked (has no effect if no clickSelects is specified).
- color=red mean we want the point color to be red when it is not clicked.

```
If this is the
case then if multiple variables are selected then will all have red colour?. If variables are not 
selected what colour will they have?
```

again if you do not specify clickSelects then none of the points will be red. they will all be black (ggplot2 default).

if you do specify clickSelects, for example

``` r
p <- ggplot() +
  geom_point(data = tips, 
             aes(x = total_bill, y = tip, clickSelects=sex_smoker), selected.colour="Red")
```

then I would expect all points corresponding to the selected sex_smoker are red, and other points are black.

When the user hovers on the element the respective legend text gets highlighted and gets bold with increase in font size. When hovers out the legend text becomes normal.

we need to specify non-standard geom params such as `geom_point(chunk_vars=c("var1", "var2"))`

@faizan-khan-iit implemented a PR https://github.com/hadley/ggplot2/pull/1649 which was rejected by ggplot2.

now we have to wait until ggplot2 figures out a solution to the issue https://github.com/hadley/ggplot2/issues/1585

until then, I suggest we continue to depend on Faizan's `validate_params` branch https://github.com/faizan-khan-iit/ggplot2/tree/validate-params
