Hi!

The init method for macaron causes a panic if the current working directory cannot be read. 

https://github.com/go-macaron/macaron/blob/4df59ae8a50bd2e82ed915ff1ce764b1bb128a9d/macaron.go#L315

Because this runs on init even if macaron is not going to be started, if it is linked to a binary it will prevent the binary from starting if it is started in a non-readable working directory.

A workaround is possible but it's not ideal. Is there any way to avoid panicking here?
At the moment, the `If-None-Match` header is ignored, whereas it should be checked to be the same as the ETag of the file being served by the static handler. Currently, the static content is always served, even when Macaron should close the connection with a `304 Not Modified` response.

I've added this functionality to [Gitea, in this PR.](https://github.com/go-gitea/gitea/pull/3376/commits/eb161866a794d586418f07e7458ff65d84855af9#diff-e92d900db9a283aeca0ff57133479b66R143) I'd be very glad to port it over to the official macaron repo, if Unknown is available to review & merge the PR :)
Nowadays every webserver must run over HTTPS (TLS). Golang Autocert automatically generates and manages Let's Encrypt certs. The method below is a suggestion to include to Macaton struct to be very easy to all Go-Macaron users run their web applications over HTTPS:
```
// RunWithAutoCert the http server with Let's Encrypt Cert automatically generated. Listening 443 by default.
func (m *Macaron) RunWithAutoCert() {
	host, port := GetDefaultListenInfo()
	port = 443
	addr := host + ":" + com.ToStr(port)
	logger := m.GetVal(reflect.TypeOf(m.logger)).Interface().(*log.Logger)
	server := &http.Server{
		Addr:    addr,
		Handler: m,
	}
	certManager := autocert.Manager{
		Prompt: autocert.AcceptTOS,
		Cache:  autocert.DirCache("certs"),
	}
	server.TLSConfig = &tls.Config{
		GetCertificate: certManager.GetCertificate,
	}
	logger.Printf("listening HTTPS on %s (%s)\n", addr, safeEnv())
	logger.Fatalln(server.ListenAndServeTLS("", ""))
}
```
about http2 push

reference [HTTP/2 Server Push](https://blog.golang.org/h2push)

    **http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        if pusher, ok := w.(http.Pusher); ok {
            // Push is supported.
            if err := pusher.Push("/app.js", nil); err != nil {
                log.Printf("Failed to push: %v", err)
            }
        }
        // ...
    })**

below is my code
```
	m := macaron.New()
	m.Get("/", func(ctx *macaron.Context) {
		if push, ok := ctx.Resp.(http.Pusher); ok {
			log.Println("ok", push)
		} else {
			log.Println("no")
		}
	})
	m.Get("/pushTest", func(w http.ResponseWriter, r *http.Request) {
		if pusher, ok := w.(http.Pusher); ok {
			log.Println("ok", pusher)
		} else {
			log.Println("no")
		}
	})
	log.Panic(http.ListenAndServeTLS(":1234", "server.crt", "server.key", m))
```
output is always `no`.Do not support it



Real and serious web applications need to run over HTTPS. So, how could I start a Macaron instance over HTTPS? I didn't find any docs explaining how to do it. It seems the Macaron has this lack of functionality. Am I right? My team had to create the following workaround:

macaron.go
``` 
// Run the http server. Listening on os.GetEnv("PORT") or 4000 by default.
func (m *Macaron) Run(args ...interface{}) {
	host, port := GetDefaultListenInfo()
	var fullchain, privateKey string
	if len(args) == 1 {
		switch arg := args[0].(type) {
		case string:
			host = arg
		case int:
			port = arg
		}
	} else if len(args) >= 2 {
		if arg, ok := args[0].(string); ok {
			host = arg
		}
		if arg, ok := args[1].(int); ok {
			port = arg
		}
		if arg, ok := args[2].(string); ok {
			fullchain = arg
		}
		if arg, ok := args[3].(string); ok {
			privateKey = arg
		}
	}

	addr := host + ":" + com.ToStr(port)
	logger := m.GetVal(reflect.TypeOf(m.logger)).Interface().(*log.Logger)
	logger.Printf("listening on %s (%s)\n", addr, safeEnv())
	if len(fullchain) > 5 {
		logger.Fatalln(http.ListenAndServeTLS(addr, fullchain, privateKey, m))
		return
	}
	logger.Fatalln(http.ListenAndServe(addr, m))
}
```
main.go
```
if port == 443 {
		app.Run("0.0.0.0", port, getFullchainPemFilePath(), getPrivatekeyPemFilePath())
		return
	}
```
Is there an alternative? Or should we send a PullRequest with a new RunOverTLS function to be added into macaron package?
We'll be glad to help the project. We just want to avoid duplicated work if an existent solution already have been in place.
Cheers!
```
[Macaron] PANIC: reflect: call of reflect.Value.Interface on zero Value
/usr/local/go/src/runtime/panic.go:426 (0x8070a0d)
    gopanic: reflectcall(nil, unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))
/usr/local/go/src/reflect/value.go:913 (0x81a05fa)
    valueInterface: panic(&ValueError{"reflect.Value.Interface", 0})
/usr/local/go/src/reflect/value.go:908 (0x81a0572)
    Value.Interface: return valueInterface(v, true)
/home/simon/go/src/github.com/go-macaron/binding/binding.go:333 (0x825ec6b)
    validateField: sliceValue := sliceVal.Interface()
/home/simon/go/src/github.com/go-macaron/binding/binding.go:320 (0x825e9fe)
    validateStruct: errors = validateField(errors, zero, field, fieldVal, fieldValue)
/home/simon/go/src/github.com/go-macaron/binding/binding.go:318 (0x825e95a)
    validateStruct: errors = validateStruct(errors, fieldValue)
/home/simon/go/src/github.com/go-macaron/binding/binding.go:236 (0x8264d23)
    Validate.func1: errors = validateStruct(errors, obj)
/usr/local/go/src/runtime/asm_386.s:488 (0x80973da)
    call16: CALLFN(·call16, 16)
/usr/local/go/src/reflect/value.go:435 (0x819ecdb)
    Value.call: call(frametype, fn, args, uint32(frametype.size), uint32(retOffset))
/usr/local/go/src/reflect/value.go:303 (0x819dcfc)
    Value.Call: return v.call("Call", in)
/home/simon/go/src/github.com/go-macaron/inject/inject.go:117 (0x81b7fd4)
    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil
/home/simon/go/src/github.com/go-macaron/binding/binding.go:633 (0x8263e61)
    validateAndMap: ctx.Invoke(Validate(obj.Interface()))
/home/simon/go/src/github.com/go-macaron/binding/binding.go:210 (0x82649ed)
    Json.func1: validateAndMap(jsonStruct, ctx, errors, ifacePtr...)
/usr/local/go/src/runtime/asm_386.s:488 (0x80973da)
    call16: CALLFN(·call16, 16)
/usr/local/go/src/reflect/value.go:435 (0x819ecdb)
    Value.call: call(frametype, fn, args, uint32(frametype.size), uint32(retOffset))
/usr/local/go/src/reflect/value.go:303 (0x819dcfc)
    Value.Call: return v.call("Call", in)
/home/simon/go/src/github.com/go-macaron/inject/inject.go:117 (0x81b7fd4)
    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil
/home/simon/go/src/gopkg.in/macaron.v1/context.go:113 (0x809bd54)
    (*Context).run: vals, err := c.Invoke(c.handler())
/home/simon/go/src/gopkg.in/macaron.v1/context.go:104 (0x809bc68)
    (*Context).Next: c.run()
/home/simon/go/src/gopkg.in/macaron.v1/recovery.go:161 (0x80ada5b)
    Recovery.func1: c.Next()
/usr/local/go/src/runtime/asm_386.s:488 (0x80973da)
    call16: CALLFN(·call16, 16)
/usr/local/go/src/reflect/value.go:435 (0x819ecdb)
    Value.call: call(frametype, fn, args, uint32(frametype.size), uint32(retOffset))
/usr/local/go/src/reflect/value.go:303 (0x819dcfc)
    Value.Call: return v.call("Call", in)
/home/simon/go/src/github.com/go-macaron/inject/inject.go:117 (0x81b7fd4)
    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil
/home/simon/go/src/gopkg.in/macaron.v1/context.go:113 (0x809bd54)
    (*Context).run: vals, err := c.Invoke(c.handler())
/home/simon/go/src/gopkg.in/macaron.v1/context.go:104 (0x809bc68)
    (*Context).Next: c.run()
/home/simon/go/src/gopkg.in/macaron.v1/logger.go:40 (0x80aca1e)
    Logger.func1: ctx.Next()
/usr/local/go/src/runtime/asm_386.s:488 (0x80973da)
    call16: CALLFN(·call16, 16)
/usr/local/go/src/reflect/value.go:435 (0x819ecdb)
    Value.call: call(frametype, fn, args, uint32(frametype.size), uint32(retOffset))
/usr/local/go/src/reflect/value.go:303 (0x819dcfc)
    Value.Call: return v.call("Call", in)
/home/simon/go/src/github.com/go-macaron/inject/inject.go:117 (0x81b7fd4)
    (*injector).Invoke: return reflect.ValueOf(f).Call(in), nil
/home/simon/go/src/gopkg.in/macaron.v1/context.go:113 (0x809bd54)
    (*Context).run: vals, err := c.Invoke(c.handler())
/home/simon/go/src/gopkg.in/macaron.v1/router.go:184 (0x80aef02)
    (*Router).Handle.func1: c.run()
/home/simon/go/src/gopkg.in/macaron.v1/router.go:286 (0x80a75bd)
    (*Router).ServeHTTP: h(rw, req, p)
/home/simon/go/src/gopkg.in/macaron.v1/macaron.go:177 (0x80a041f)
    (*Macaron).ServeHTTP: m.Router.ServeHTTP(rw, req)
/usr/local/go/src/net/http/server.go:2081 (0x816a256)
    serverHandler.ServeHTTP: handler.ServeHTTP(rw, req)
/usr/local/go/src/net/http/server.go:1472 (0x81676a8)
    (*conn).serve: serverHandler{c.server}.ServeHTTP(w, w.req)
/usr/local/go/src/runtime/asm_386.s:1585 (0x8099211)
    goexit: BYTE    $0x90   // NOP
```

添加一个jwt验证的组件吧。结合jwt-go

https://github.com/dgrijalva/jwt-go

https://github.com/martini-contrib/sessionauth
目前是否有类似这样的东西呢？

类似于这样的
https://github.com/gin-gonic/gin/tree/master/examples/realtime-chat
https://github.com/gin-gonic/gin/issues/285

Like go-restful built-in Swagger integration. Auto-generated documentation with Swagger is pretty awesome. And you can auto-generate API clients for lots of different languages.

Further on, it is possible to generate code with Swagger json defines.
