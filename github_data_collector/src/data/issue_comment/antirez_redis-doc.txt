
@itamarhaber this is an idea following the discussion over the DSL in https://github.com/antirez/redis-doc/pull/1231

This PR consists of a small js script which parses `commands.json` to produce a json file in a slightly different format. Each command has the same root-level properties, except for `arguments`, which is now in the format:

```typescript
Array<{
  name: string;
  optional: boolean;
  schema: JSONSchema7;
}>
```

This allows redis to avoid re-inventing the wheel for any of the undifferentiated schema-description parts of the documentation, instead relying on [json-schema](https://json-schema.org/), which is well established, widely used, unambiguous, flexible enough to cover edge-cases, and a good balance of human- and machine-readable.

It's worth taking a look at the [generated json-schema file](https://github.com/mmkal/redis-doc/blob/1b9ed2343df263405ec69d53ffbeec0e8d355d7d/commands.json-schema.json), since it's large, so github suppresses the diff. 

Note:

Each argument is represented by JSON-schema, but conceptually the schemas are "flattened" when passed as CLI arguments. For example, [`DEL`](https://github.com/mmkal/redis-doc/blob/1b9ed2343df263405ec69d53ffbeec0e8d355d7d/commands.json-schema.json#L1086-L1105). This has one argument, `key`, which is of type `array`, meaning it would be valid for inputs like `['foo', 'bar']`, corresponding to `redis del foo bar`. So to go from arguments valid per the schema to a CLI call, clients would have to do something like `redis ${command} ${flatten(arguments).join(' ')}`.

I also wrote a simple function that parses the `.md` documentation for each command to extract the return type and convert to json-schema, so that type can be kept alongside the arguments. Going forward, this json file could become the source of truth for return types, so that this repo could document not just basic return types like `@array-reply`, but specify the type of the items in the array too, easily and unambiguously with json-schema (e.g. `{ "type": "array", "items": { "type": "string" } }`).

This will make client generation much easier, because existing json-schema tooling can be used rather than each client library having to write a custom parser which reverse-engineers the custom DSL currently in `commands.json`. (The [library I maintain](https://github.com/mmkal/handy-redis) does exactly this reverse-engineering, and has a lot of hacks and pieces of difficult-to-maintain code. I have held off adding it to clients.json so far because of this).

My thought was that if this accepted, the generated `commands.json-schema.json` acts as a starting point, and would eventually take the place of `commands.json`. it would then be manually edited, as the source of truth, going forwards. The js file shouldn't need to hang around, it's just for generating the "starter" json-schema file. This will allow taking advantage of json-schema's API to go further with type specificity. For example, the problem highlighted in https://github.com/antirez/redis-doc/pull/1231 would go away, because `SET` could become (using yaml for conciseness):

```yaml
summary: Set the string value of a key
complexity: O(1)
arguments:
- name: key
  schema:
    type: string
- name: value
  schema:
    type: string
- name: expiration
  optional: true
  schema:
    type: array
    items:
    - type: enum
      enum: [EX, PX]
    - type: integer
- name: condition
  optional: true
  schema:
    type: string
    enum:
    - NX
    - XX
since: 1.0.0
group: string
return:
  anyOf:
  - type: string
  - type: 'null'
```

Would be great to get your thoughts on this! I'd also be interested to learn what is currently using `commands.json` in the existing format - if you think the idea has legs, I could see what it would take for whatever's downstream (if anything) to switch over to json-schema.
PR https://github.com/antirez/redis-doc/pull/927 fixed a valid issue, namely allowing nonsensical usage of `EX` and `PX` together, but the fix had a worse side-effect (IMO). By setting the type of the `expiration` argument as type `enum` with enum values `["EX seconds", "PX milliseconds"]`, this suggests to clients that the `set` command can receive an optional argument with _literal value_ `'EX seconds'` or `'PX seconds'`. In a client library I maintain which [generates types from commands.json](https://github.com/mmkal/handy-redis), this produces incorrect types. Here's a simplified diff (typescript) when updating the redis-doc submodule the client uses to latest master:

```diff
- set(key: string, value: string, seconds: ["EX", number]): Promise<string | null>;
- set(key: string, value: string, milliseconds: ["PX", number]): Promise<string | null>;
+ set(key: string, value: string, expiration: "EX seconds" | "PX milliseconds"): Promise<string | null>;
```

If the library updated to latest master, the new client would actually disallow correct usage. This was formerly a valid call:

```typescript
client.set("a:foo", "123", ["EX", 60])
```

With latest master of redis-doc that above receives a compiler error, and it's impossible to use `EX` or `PX` without one. It only allows `client.set("a:foo": "123", "EX seconds")`.

A fix for this that didn't allow for `set foo bar EX 2 PX 200` type usage would be to allow enum types within tuples, something like:

```json
{
  "name": ["expiry", "period"],
  "type": [{ "enum": ["EX", "PX"]}, "integer"]
}
```

I would be happy to discuss adding something like that in a follow-up, but it'd be introducing a new concept, and probably requires more careful thought in order to not create confusion or inconsistency. With this PR, I'd like to just fix a bug, which is that `enum` is being used incorrectly.
This moves the 6 bit-related commands from the 'string' to a new
category. The motivation is giving more exposure for these lesser-
known capabilities.

@antirez - your thoughts?
# Why
The redis-docs are supposed to be designed for beginners learning about how to use redis. However, the incr docs can lead these new developers into implementing non-thread-safe rate limiters in their modern web applications.

Here is an explanation of why the current code fails, and how the new code improves in concurrency.
![concurrency_explanation](https://user-images.githubusercontent.com/9659853/70394425-16cbe600-19c3-11ea-8d23-034bec7ef4bd.png)

# What
Made very minor changes to two of the three provided examples to support concurrent rate limiting.
Fixed minor grammar/spelling mistakes throughout the section.
Elaborated on **why** the examples are written the way they are (concurrency, exceptional behavior outcomes, etc.) and what the short-comings of each example are.

I believe these changes are simpler, easier to follow, and more effective than the previous PRs opened to address this problem. (#893 and #782).
Please consider my changes, and let me know if anything I wrote needs elaboration.

Ref: https://github.com/antirez/redis/pull/5889



