It seems in the design of this example, the separation of operations that mutate the persistent entity and the ones that query the state of it, is rather lax. E.g. placing a bid also return the current price.

What is the authors' take on separating commands and queries (CQS) when it comes to Lagom persistent entities?
It seems some CQRS proponents on the internet suggest following this rather strictly, e.g. a command that mutates the state should only result in an acknowledgement, not in business data being returned. 

If we were to follow that, to query the state, either the read side or in the Lagom case also ReadOnlyCommands should be used, but not commands that also mutate the state.

Is Lagom opinionated in the same way, or is it considered good practise to return e.g. the updated state from the command handler?


I am not 100% sure if this is the issue specifics to my local settings or not. But every time I try to deploy the item-svc or bidding-svc to my Google KBE, I am getting this exception.

Resolve attempt failed! Cause: spray.json.DeserializationException: Object is missing required member 'items'

<img width="1117" alt="screen shot 2018-05-09 at 7 23 54 am" src="https://user-images.githubusercontent.com/795143/39820285-4b8fd74c-535a-11e8-9edd-e8655fb33f58.png">

`online-auciton-scala`'s version of the Search service is not as complete as the java equivalent in `online-auction-java`. For starters: there's no UI.

As raised in https://github.com/lagom/online-auction-scala/pull/68, there was a runtime issue fixed in https://github.com/lagom/online-auction-scala/pull/72. But https://github.com/lagom/online-auction-scala/pull/72 exposed another runtime issue:

```
$ curl -d'{"keywords":"chair","maxPrice":10, "currency":"USD"}' -X POST -H "Content-Type: application/json" "http://localhost:9000/api/search?pageNo=1&pageSize=10"
```

returns:

```
{"name":"UndeserializableException","detail":"{\"error\":{\"root_cause\":[{\"type\":\"parsing_exception\",\"reason\":\"[itemStatus] query malformed, no start_object after query name\",\"line\":1,\"col\":63}],\"type\":\"parsing_exception\",\"reason\":\"[itemStatus] query malformed, no start_object after query name\",\"line\":1,\"col\":63},\"status\":400}"}
``` 
Hi everyone,

I would like to refactor the user service and add a couple of features. Most of it will be inspired by the online-auction-java and specificaly from their service descriptor:
https://github.com/lagom/online-auction-java/blob/master/user-api/src/main/java/com/example/auction/user/api/UserService.java
As you can see, the java versions is supporting a registration process, a login endpoint as well as a Read side support.

I'll submit several PRs this week in order to make the user-service support those.

If you have any other suggestions for this service, let me know.

Chris
It's necessary to provide the transaction api (api and implementation projects) in this repository with Scala code, following the same endpoints and business rules of the [online-auction-java](https://github.com/lagom/online-auction-java) repository.

Is there any reason why transaction api project isn't available yet?
As reported via [Gitter](https://gitter.im/lagom/lagom?at=59394b897503e2b70622864f) the [subscriptions](https://github.com/lagom/online-auction-scala/blob/master/search-impl/src/main/scala/com/example/auction/search/impl/BrokerEventConsumer.scala#L18-L21) on serach-service are not compliant since the `collect` operation will ski√±p some messages causing the _user-code_ branch and the _offset_ branch in the [topic consumption](https://github.com/lagom/lagom/blob/88102075090a91f8ad37655d599e6bdae9bedb73/service/core/kafka/client/src/main/scala/com/lightbend/lagom/internal/broker/kafka/KafkaSubscriberActor.scala#L112-L114) to miss-align.

I think the equivalent code is correct in `online-auction-java.
## Reproduction

1. Start the sample app with a fresh database by running `sbt clean runAll`
2. Create a user and an item
3. Stop the server
4. `sbt test`

## Expected behavior

The tests should pass.

## Actual behavior

```
[info] The Item service
[info] - should allow creating items
[info] - should return all items for a given user
[info] - should should emit auction started event *** FAILED ***
[info]   ItemUpdated(5d50b8b0-022b-11e7-87c6-bf22b4dc5f33,51971f4d-da2e-4c8d-a758-c047404df29a,title,description,USD,Created) was not an instance of com.example.auction.item.api.AuctionStarted, but an instance of com.example.auction.item.api.ItemUpdated (ItemServiceImplIntegrationTest.scala:87)
```

The events created by the test are not isolated in any way.

## Workaround

`sbt clean test`
Currently readme lists a set of services and operations/messages each of them supports.

Readme should give some context wrt the project, the purpose, Lagom, instructions to import it into an IDE, instructions to run it and a high level architecture (See #20).

This issue can be split into multiple small PRs.
As an Item owner I want to edit an item's description and auction settings before I start the auction.

I also want to edit the description and title once the  auction is already started.