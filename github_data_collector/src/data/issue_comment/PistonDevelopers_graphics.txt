
**Description**
When any piston program is run and the window is resized the graphics appear incorrectly.

**To Reproduce**
Run this:
```
extern crate piston;
extern crate graphics;
extern crate glutin_window;
extern crate opengl_graphics;

use piston::window::WindowSettings;
use piston::event_loop::*;
use piston::input::*;
use glutin_window::GlutinWindow as Window;
use opengl_graphics::{ GlGraphics, OpenGL };

pub struct App {
    gl: GlGraphics,
}

impl App {
    fn render(&mut self, args: &RenderArgs) {
        use graphics::*;

        const GREEN: [f32; 4] = [0.0, 1.0, 0.0, 1.0];
        const RED:   [f32; 4] = [1.0, 0.0, 0.0, 1.0];

        let square = rectangle::square(0.0, 0.0, 50.0);
        let (x, y) = (args.width / 2., args.height / 2.);

        self.gl.draw(args.viewport(), |c, gl| {
            clear(GREEN, gl);

            let transform = c.transform.trans(x, y);
            rectangle(RED, square, transform, gl);
        });
    }

    fn update(&mut self, args: &UpdateArgs) {}
}

fn main() {
    let opengl = OpenGL::V3_2;

    let mut window: Window = WindowSettings::new(
        "spinning-square",
        [200, 200]
    )
        .opengl(opengl)
        .exit_on_esc(true)
        .build()
        .unwrap();

    let mut app = App {
        gl: GlGraphics::new(opengl)
    };

    let mut events = Events::new(EventSettings::new());
    while let Some(e) = events.next(&mut window) {
        if let Some(r) = e.render_args() {
            app.render(&r);
        }

        if let Some(u) = e.update_args() {
            app.update(&u);
        }
    }
}
```
and then resize the window

**Expected behavior**
The boxes should continue to appear in the centre of the window

**Screenshots**
Initial window:
<img width="312" alt="Screenshot 2019-06-02 at 13 06 07" src="https://user-images.githubusercontent.com/1632774/58761123-632bfa00-8538-11e9-8f5d-69c2a64424f0.png">

When I change the size (the square moves towards the top right as the windows grows):
<img width="371" alt="Screenshot 2019-06-02 at 13 06 15" src="https://user-images.githubusercontent.com/1632774/58761124-6626ea80-8538-11e9-9f51-2efafbb2ecb3.png">

**Hardware and Software**

Piston versions:
```
piston = "0.43.0"
piston2d-graphics = "0.32.0"
pistoncore-glutin_window = "0.55.0"
piston2d-opengl_graphics = "0.62.0"
```
OS: macOS Mojave 10.14.4, 13.3-inch (2560 x 1600) - DPI is 2
Graphics card: Intel Iris Plus Graphics 640
I'm trying to draw an image from a path and ran into some type issues. Can somebody tell me why this is happening?
The official [example](https://docs.rs/piston2d-graphics/0.28.0/graphics/image/struct.Image.html#example) on the docs also doesn't compile (for another set of reasons it seems)

Relevant sections of code:
```rust
use graphics::rectangle::square;
use graphics::{Context, DrawState, Graphics, Image};
use opengl_graphics::{Texture, TextureSettings};
use std::path::Path;

impl GameView {
    pub fn draw<G: Graphics>(&self, c: &Context, g: &mut G) {
        let img = Image::new().rect(square(0.8, 0.0, 0.0));
        let texture = Texture::from_path(Path::new("./assets/brick.png"), &TextureSettings::new())
            .expect("Could not load brick.");

        let draw_state: DrawState = Default::default();
        img.draw(&texture, &draw_state, c.transform, g);
    }
}
```

I'm using an OpenGL backend:
```rust
    while let Some(e) = events.next(&mut window) {
        game_controller.event(&e);
        if let Some(args) = e.render_args() {
            gl.draw(args.viewport(), |c, g| {
                use graphics::clear;

                clear([1.0; 4], g);
                game_view.draw(&c, g);
            })
        }
    }
```

Here's the error I get
```rust
  --> src/game_view.rs:19:13
   |
19 |         img.draw(&texture, &draw_state, c.transform, g);
   |             ^^^^ expected associated type, found struct `opengl_graphics::Texture`
   |
   = note: expected type `<G as graphics::Graphics>::Texture`
              found type `opengl_graphics::Texture`
```
I tried to use `expect` method on the result of `CharacterCache.character` method, but turns out I can't, because the associated Error type doesn't require Debug trait:

```Rust
error[E0599]: no method named `expect` found for type `std::result::Result<graphics::character::Character<'_, <G as graphics::Graphics>::Texture>, <C as graphics::character::CharacterCache>::Error>` in the current scope
  --> src/some_file.rs:44:53
   |
44 |             let ch_glyph = glyphs.character(34, ch).expect("Couldn't load character");
   |                                                     ^^^^^^
   |
   = note: the method `expect` exists but the following trait bounds were not satisfied:
           `<C as graphics::character::CharacterCache>::Error : std::fmt::Debug`
```

It would be obvious to add a constraint that Error should implement the Debug trait. It seems to me as a good idea â€” however, I'm not sure of it, since I have modest Rust experience. [I even asked a question on stack overflow about this pattern](https://stackoverflow.com/questions/53529608/is-it-good-practice-to-require-associated-error-types-implement-debug-trait).

Anyway, if you guys think it's a good idea, it seems kind of obvious to add the derive to all of it's implementations and I would be glad to do it.
I'm trying to make piston scale my graphics automatically, but it seems to cause some wierd artifacting. 

What I'm trying to do is cause my coordinate space to be stretched to fit the size of the window, without changing the coordinates. 
I'm currently using this code to scale it, which does work:
``c.transform = c.transform.scale(
                args.width as f64 / 1920., args.height as f64 / 1080.
            );
``
Where args is "RenderArgs" and c is "Context". This causes everything everything to be sized and positioned relatively with 1920x1080 being the lower left corner.
However, it causes some serious artifacting.
This image (the image is only the black part and has no white in it)
![image](https://user-images.githubusercontent.com/25505176/43920611-b2b54cc4-9c19-11e8-9bed-e125f347e9b9.png)
Turns into this (again, blue is just a background)
![image](https://user-images.githubusercontent.com/25505176/43920185-8077d958-9c18-11e8-849a-d7080c09a9a9.png)
When the window size is 1900 by 1000. The issue is present even downscaling by eg. 0.5x.
In fact, this happens even if the window is 1920 by 1080 and no scaling should happen.

The issue might be solved by using a Viewport, but it doesn't seem obvious to me how it's supposed to be used, and I couldn't get it to work properly when trying.

Is this because I'm scaling it incorrectly, not using a viewport, or a bug?
I have a weird use case for piston2d-graphics, where I'm making draw calls without a game loop, because I'm generating a batch of one-off images in a headless OpenGL context. The problem is that, given a `glutin::HeadlessContext` with dimensions `width`x`height`, I don't know how to construct a [graphics::Viewport](https://docs.rs/piston2d-graphics/0.26.0/graphics/struct.Viewport.html) that covers exactly that rectangle.

For clarity, here's where my code diverges from regular code. Where a lot of sample code suggests something like
```rust
let mut glgraphics = GlGraphics::new(opengl);
let mut events = Events::new(EventSettings::new());
while let Some(e) = events.next(&mut window) {
if let Some(args) = e.render_args() {
    glgraphics.draw(e.viewport(), |c, g| {
        something.draw(c.transform, g);
    });
}
```
I instead use code like this, because I don't have a window or event loop:
```rust
let mut glgraphics = GlGraphics::new(opengl);
let viewport = Viewport {
    rect: [0, 0, width, height], // pretty sure this is wrong!
    draw_size: [width as u32, height as u32],
    window_size: [width as u32, height as u32],
};
for _ in some_iterator() {
    glgraphics.draw(&viewport, |c, g| {
        /* what I'd like to write is
           graphics::image(&some_texture, c.transform, g);
           but to make sure my viewport coordinates are sensible I currently write */
        graphics::Rectangle::new([1.0, 1.0, 1.0, 1.0])
            .draw([0.0, 0.0, 1000.0, 1000.0], &c.draw_state, c.transform, g);
        // and, spoiler, they're not
    });
}
```
The resulting image shows the square stretched out of shape, and partially off the horizontal edge it should be aligned to, and I'm pretty sure it's the result of my initial viewport dimensions being wrong.
The quality of rusttype rendering, as well as the number of font formats available, makes it a little experimental for general-purpose use.

Is it be possible to use features to activate this in piston, (or have a feature to change it to freetype)?
I needed this for getting turtle.rs running in the browser via webassembly, so I wrote up a partial implementation here: https://github.com/sunjay/turtle/pull/53/files#diff-1f72391b08b32f9b933c3e078f485e4d. It only does plain colors (not textures) because that's all Turtle needed.

Is this of interest? Maybe to #1070?
Hi,
Is there a way to draw multiple points that are collected by lines? The `polygon` method fills the shape. What can I use to draw the entire path as a set of lines? Drawing each line of the path individually is extremely slow at the moment.

Thanks!


Currently, you pass the draw state as argument to every draw method on the backend implementing the `Graphics` trait. The benefit of this design is that the API is state-less: The draw state object keeps track of the state of the backend.

However, in practice there are some downsides to this approach:

- Most code never changes the default draw state. It is mostly used for stencil clipping and scissoring, which changes infrequently.
- Passing in draw state leads to typing more code.
- The backend code, to perform efficiently, needs a state for the draw state and detecting when to pack the vertices into buffers anyway. Checking the draw state for equality against previously set draw state leads to unnecessary overhead. When changing the draw state through the `Graphics` trait, the backend can do this directly and detect whether flushing of buffers is required.
- Instead of manipulating the draw state for clipping, one could use a separate object with a method taking a closure that changes the draw state and sets it back end to previous state when done.

Plan:

1. Add two new method to `Graphics`:
  - `fn set_draw_state(&mut self, &DrawState)`
  - `fn get_draw_state(&self) -> DrawState`
2. Remove `Context::draw_state`
3. Remove draw state parameters on draw methods