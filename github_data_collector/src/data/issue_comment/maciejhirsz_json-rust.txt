I added one test as an example and proof that it works.

Fixes #171
Hi,

Thank you for you project!
I have a feature request : expose the Generator trait in order to create a custom PrettyWriter
Just convenience helpers, similar to the standard library's `HashMap` etc - useful when e.g. checking that a certain key is present or not.
Just a quick idea, this would be nice for those cases when you have to generate an error `"expected a list, got {}"` (and maybe a few other similar cases) â€“ add `JsonValue::kind()` method that returns something like this:

```rust
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub enum JsonValueKind {
    Null,
    Short,
    String,
    Number,
    Boolean,
    Object,
    Array,
}

impl Display for JsonValueKind {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", format!("{:?}", self).to_lowercase())
    }
}

impl From<&JsonValue> for JsonValueKind {
    fn from(value: &JsonValue) -> Self {
        match value {
            &JsonValue::Null => JsonValueKind::Null,
            &JsonValue::Short(_) => JsonValueKind::Short,
            &JsonValue::String(_) => JsonValueKind::String,
            &JsonValue::Number(_) => JsonValueKind::Number,
            &JsonValue::Boolean(_) => JsonValueKind::Boolean,
            &JsonValue::Object(_) => JsonValueKind::Object,
            &JsonValue::Array(_) => JsonValueKind::Array,
        }
    }
}
```
Heya!
Since I borrowed most of the encoding logic for simd-json.rs from just-rust I wanted to contribute back. I improved the write-string logic to use simd instructions to speed up those parts (especially for larger strings).

If there is interest I'll open a PR so json-rust can take advantage of that :)
Hi,
Thanks for all your great work on _json-rust_!

I recently needed a way of writing a json object with highlights on certain slices for my work on [gmmorris/jg](https://github.com/gmmorris/jg).

To achieve this I wrote an external writer which takes your _json-rust_ implementation which I have published as [json-highlight-writer](https://github.com/gmmorris/json-highlight-writer). This required duplicating some code from _json-rust_ (license kept in tact, as you can see) as it wasn't exposed in a consumable manner.

My original intent was to keep the _highlight-writer_ as an external writer and use it in the manner [you can see in the jg library](https://github.com/gmmorris/jg/blob/3f05f1ea3309f38913be2106102b83fb014c5d4c/src/input/mod.rs#L107), but it occurred to me that it might be worth offering to add it as a build in writer in _json-rust_.

Before I go to the effort of putting together a pull request I wanted to make sure there's an interest. If not, I'm happy to keep it external. :)

Cheers
In https://github.com/binast/binjs-ref/issues/232, we fail to parse a JSON document because of an `ExceededDepthLimit`. It would be useful to be able to customize the depth limit.
```json
{"entity_number":17,"name":"medium-electric-pole","position":{"x}}
```

Attempting to parse this json using the `as_i32` method results in:

```
thread 'main' panicked at 'attempt to multiply with overflow', /rustc/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src/libcore/num/mod.rs:3554:24
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39
   1: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:70
   2: std::panicking::default_hook::{{closure}}
             at src/libstd/sys_common/backtrace.rs:58
             at src/libstd/panicking.rs:200
   3: std::panicking::default_hook
             at src/libstd/panicking.rs:215
   4: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:478
   5: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:385
   6: rust_begin_unwind
             at src/libstd/panicking.rs:312
   7: core::panicking::panic_fmt
             at src/libcore/panicking.rs:85
   8: core::panicking::panic
             at src/libcore/panicking.rs:49
   9: core::num::<impl u64>::pow
             at /rustc/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src/libcore/num/mod.rs:3554
  10: json::number::<impl core::convert::From<json::number::Number> for i64>::from
             at /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/json-0.11.13/src/number.rs:444
  11: <T as core::convert::Into<U>>::into
             at /rustc/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src/libcore/convert.rs:441
  12: json::value::JsonValue::as_i64::{{closure}}
             at /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/json-0.11.13/src/value/mod.rs:258
  13: <core::option::Option<T>>::map
             at /rustc/daa53a52a2667533d5fe59bfcc5b8614b79c3d31/src/libcore/option.rs:414
  14: json::value::JsonValue::as_i64
             at /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/json-0.11.13/src/value/mod.rs:258
  15: json::value::JsonValue::as_i32
             at /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/json-0.11.13/src/value/mod.rs:262
```

This should really be wrapped in a `Result` type that can return an error type.
https://github.com/maciejhirsz/json-rust/issues/152
```json
{
    "entity_number": 57,
    "name": "fast-splitter",
    "position": {
        "x": -5.5,
        "y": 4
    },
    "direction": 4
}
```
In this example, `obj["position"]["x"].as_i32().unwrap() == -55`

Floats should return `false` for the `is_<integer>` functions.