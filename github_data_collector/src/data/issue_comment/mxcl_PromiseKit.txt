Hello.
Thank you for PromiseKit.
In this pull request I added a new parameter to some `when` versions. With this parameter `when` behaves like `race` with the amount of winners.
Enabled the BUILD_LIBRARY_FOR_DISTRIBUTION flag introduced in Xcode 11 for supporting framework distribution for creating the XCFramework.
I have multiple promises that can be pending for a long time, or get rejected early on. I'm looking for a way to find out which is the first to fulfill.

For example: One promise gets rejected, another fulfills and a third is still pending.
In this case I would like the new promise to fulfill.
When all promises get rejected I would like the new promise to reject with an array of errors.

I can't use `race`, since it will reject once my first promise will reject.
I can't use `when(fulfilled:)`, since it will reject once one of my promise rejects and will continue after the first promise fulfills.
I can't use `when(resolved:)`, since it will continue after the first promise resolves.

What I'm looking for might not exist (yet) but I would expect it to be called something like  `race(fulfilled:)`
In the v7 branch, there is no podspec (at least for the tip of it and the most recent release)

**Promise 6.2.4 installed via CocoaPods**
I'm trying to use PromiseKit with ReSwift thunks and running into an issue which I feel might be down to my understanding of initializing Promises.

```
func foo() -> (Thunk, Promise) {
   let promise = Promise()
   let thunk = Thunk { ... promise.fulfill() ... }
   return (thunk, promise)
}
let (thunk, promise) = foo()
dispatch(thunk)
promise.done { ... }
```

My question is how do I initialize a Promise that returns `[String :Any]` instead of the `Void` of `Promise()` ?

I try to use the Swift Package Manager. I have no problem using with the promises classes and functions. But I can't use the CLLocationManager extension. I imported the PromiseKit, but the extensions folder is outside the Sources folder of Swift Package Manager. I think this is the problem. Any suggestion? # #
As development of v7 is well underway, and I just ran into this limitation, I thought I'd make the request: `Promise` should be generic to its `Error` type.

This was previously, and extensively, discussed in #135. However, it's been over 4 years and much has changed, including the addition of `Result` to the language and the fact that `Error` now conforms to itself, making possible a fully type-safe error pipeline. We recently made this change in Alamofire, making our `Response` types generic to the `Failure` type as well as the `Success` type. However, for projects using Alamofire (or any API that produces typed errors) and PromiseKit, this creates a rather tedious developer experience of having to cast back out to the known error type before processing. Personally, I don't see much in the way of a downside.

What do you think?
Moving PromiseKit.conf to a static variable would enable (thread safe) lazy initialization. Something like:

```swift
struct Configuration {

    let label: String
    
}

struct ConfContainer {

    static var _conf: Configuration = Configuration (label: "Default")
    
    static let conf = { return _conf }()

}


ConfContainer._conf = Configuration (label: "As Set")
print (ConfContainer.conf.label)
```
-> "As Set"

The actual implementation should probably log a warning if the _conf var is set after conf has been initialized.

I got the idea from [this stack overflow post](https://stackoverflow.com/questions/34667134/implicitly-lazy-static-members-in-swift). The post actually says that global variables initialize lazily but this this didn't work in my playground. I suppose it might work in a project.

I'm happy to work up a PR (eventually, not immediately), but if you are interested in going this way we should discuss naming and design first. 

Breaking change, obviously.
This PR introduces tuple overloads for `when(resolved:)` (which make use of `Thenable` protocol) and additional tuple overloads for `when(fulfilled:)` up to 9 arguments.
This PR also introduces an associated type `R` representing the result type in `Thenable` protocol which improves a return type in `when(resolved:)` when using Guarantees, so this is now allowed:
```
let p1 = Promise.value(true)
let p2 = Promise.value(2)
let g1 = Guarantee.value("abc")

when(resolved: p1, p2, g1).done { r1, r2, r3 in
    // r1 is Result<Bool>, r2 is Result<Int>, r3 is String
}
```

In the future it might be worth considering changing the `pipe` declaration to use `R` instead of `Result<T>`, this would however impact all the other operators so I didn't want to introduce such a big change in this PR.
When upgrading from PromiseKit 4.5.0 to 6.8.4, we are always getting an error in NSURLSession+AnyPromise.m file.

![image](https://user-images.githubusercontent.com/35230439/63487471-07369900-c4c9-11e9-8a37-a9adbf70e765.png)

Please let me know if anything specific needs to be changed in my project configuration.
