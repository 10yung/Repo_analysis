There's not too much there, but it'd be nice to have instead of having to try and find it in the repo.
adply() does not seem to work consistently. It does not work with some functions (i.e., mean(), median()) but does work with other functions (sum(), sd()) when applying to the same df of numeric values. 

> df = tibble(x = 1:10, y = 1:10)
> plyr::adply(df, 1, mean)
    x  y V1
1   1  1 NA
2   2  2 NA
3   3  3 NA
4   4  4 NA
5   5  5 NA
6   6  6 NA
7   7  7 NA
8   8  8 NA
9   9  9 NA
10 10 10 NA
Warning messages:
1: In mean.default(piece, ...) :
  argument is not numeric or logical: returning NA
2: In mean.default(piece, ...) :
  argument is not numeric or logical: returning NA
3: In mean.default(piece, ...) :
  argument is not numeric or logical: returning NA
4: In mean.default(piece, ...) :
  argument is not numeric or logical: returning NA
5: In mean.default(piece, ...) :
  argument is not numeric or logical: returning NA
6: In mean.default(piece, ...) :
  argument is not numeric or logical: returning NA
7: In mean.default(piece, ...) :
  argument is not numeric or logical: returning NA
8: In mean.default(piece, ...) :
  argument is not numeric or logical: returning NA
9: In mean.default(piece, ...) :
  argument is not numeric or logical: returning NA
10: In mean.default(piece, ...) :
  argument is not numeric or logical: returning NA

> plyr::adply(df, 1, median)
Error in median.default(piece, ...) : need numeric data


But works with sum():

> plyr::adply(df, 1, sum)
    x  y V1
1   1  1  2
2   2  2  4
3   3  3  6
4   4  4  8
5   5  5 10
6   6  6 12
7   7  7 14
8   8  8 16
9   9  9 18
10 10 10 20

or sd():
> plyr::adply(df, 1, sd)
    x  y V1
1   1  1  0
2   2  2  0
3   3  3  0
4   4  4  0
5   5  5  0
6   6  6  0
7   7  7  0
8   8  8  0
9   9  9  0
10 10 10  0





 
I am unsure if this should be two separate bug reports, if this is a single issue with a common source, or if I am simply using it wrong.

```
library(plyr)
ir <- iris[1:2,]
adply(ir,1,function (x) data.frame(a=1),.id='row')
```

The expectation is that this snippet will run my function on each of the two rows in the `ir` data frame, `rbind` the results, and add an `id` column containing the margin index. Thus, the output I was expecting based on the documentation was:

```
  a row
1 1   1
2 1   2
```

However, the output obtained is:

```
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species a
1          5.1         3.5          1.4         0.2  setosa 1
2          4.9         3.0          1.4         0.2  setosa 1
```

Thus, (1) the `.id` argument seems to be ignored, and (2) `adply` seems to silently prepend the original columns to the output data frame, which I do not want. Both of these points seem to go  against the documentation?

R 3.6.0, plyr 1.8.4, running on 64-bit Windows 10.
I had expected this to give `a` back but it permutes the dimensions:

```
a <- array(1:24, 2:4)
aa <- aaply(a, c(1, 3), c)
dim(aa)
## [1] 2 4 3
```

If this is correct maybe it should not be called idempotent.



effefefefe
Greetings,

I am using round_any() function in one of my projects and few values are getting incorrectly floored. 
```
test_var <- unlist(
                     lapply(
                         seq(1000, 10000, 10), function(x) plyr::round_any(x / 1000, accuracy = 0.01, f = floor)
                               )
                      )

check_var <- test_var[duplicated(test_var)] 

test_df <- data.frame(Original_Ser = seq(1000, 10000, 10), Trunc2Deci_Result = test_var, 
                                   Dups_Tag = duplicated(test_var)
                                  )
```
Ideally there should not be any duplicates as I am increasing the input by 10. But I am getting 76 duplicates. I did not observe any pattern for these duplicates. 

Thanks!
Heramb

```
> df<-data.frame(a=rep(1:3,5),freq=0)
> plyr::count(df)
Using freq as weighting variable
  a freq freq.1
1 1    0      0
2 2    0      0
3 3    0      0
```

I expected the output:
```
  a freq freq.1
1 1    0      5
2 2    0      5
3 3    0      5
```

`freq` shouldn't be assumed as a weighting variable.
This is probably a conda issue instead of plyr itself, but maybe someone has ideas on what to do about it. I've installed R via conda: r-base v3.4.1 from the "r" channel. When trying to install plyr (or any packages depending on plyr) with `install.packages()`, I get the error: 

```
/ebio/abt3_projects/software/dev/miniconda3/envs/test/bin/x86_64-conda_cos6-linux-gnu-c++  -I/ebio/abt3_projects/software/dev/miniconda3/envs/test/lib/R/include -DNDEBUG -I../inst/include/  -D_FORTIFY_SOURCE=2 -O2 -I/ebio/abt3_projects/software/dev/miniconda3/envs/test/include   -fpic  -fvisibility-inlines-hidden  -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -I/ebio/abt3_projects/software/dev/miniconda3/envs/test/include  -c Date.cpp -o Date.o
make: /ebio/abt3_projects/software/dev/miniconda3/envs/test/bin/x86_64-conda_cos6-linux-gnu-c++: Command not found
/ebio/abt3_projects/software/dev/miniconda3/envs/test/lib/R/etc/Makeconf:167: recipe for target 'Date.o' failed
```

I've tried `conda install gcc_linux-64`, but this doesn't install x86_64-conda_cos6-linux-gnu-c++. The closest file to this is "x86_64-conda_cos6-linux-gnu-c++filt", and symlinking this as "x86_64-conda_cos6-linux-gnu-c++" doesn't work. 

Is there a way to bypass using `x86_64-conda_cos6-linux-gnu-c++`? 
Hello everyone,

I am new to GitHub, this is my first post. I'm using R x64 3.4.1 on Windows 10 and trying to run the function ddply in the plyr package. I've attached a screenshot of some code as I can't share the data: I'm working with a large dataframe and so I've created a smaller dataframe to illustrate the issue. I've created "lm" with 40 obs and 4 variables, three variables I'm interested in and one I'm not ("blah"). I produce the names of the variables in the dataframe and then run ddply to get the mean based on "CAsNum" and "tAsNum" with the condition that the values of "qAsNum" are between 1 and 5. Works great.

When I try to do the same with another dataframe, "fullData," I get the error cited in the title. But before I produce the error, I show the names of the variables in "fullData" to show that the three variables of interest have the same name (of note, they are of class "numeric"), and then I table each to show there are no "NA" in these variables. I've looked at many, many postings online but found no fix for this issue. Any advice would be welcome.

Justin
![console](https://user-images.githubusercontent.com/33464292/32513311-d729242a-c3c7-11e7-9ac6-61e91845ef54.png)

plyr is not showing up in the CRAN repository for some reason.  Is there another way to install plyr?