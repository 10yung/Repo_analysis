[named export](https://github.com/johnagan/clean-webpack-plugin/blob/6fd2f73bed5f96897ff802c526b62ed595b9199d/src/clean-webpack-plugin.ts#L350)


The plugin does nothing (does not remove the old files) when there is an error in the build. I think this is a bug.

**Steps to reproduce:**

1. Use the following minimal `webpack.config.js`:
```js
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
module.exports = {
  output: { filename: '[name].[contenthash].js' },
  plugins: [ new CleanWebpackPlugin() ]
};
```
2. Create a minimal `src/index.js` with no errors.
3. Launch webpack in watch mode: the `dist` folder is populated with only one `main.*.js` file.
4. Change `src/index.js` introducing a syntax error.

**Result: the `dist` folder now has two `main.*.js` files.**

Expected result: the old file is cleaned an only the newest version remains.

**Workaround**

Remove the following lines from the plugin source code:
```js
    /**
     * Do nothing if there is a webpack error
     */
    if (stats.hasErrors()) {
      if (this.verbose) {
        // eslint-disable-next-line no-console
        console.warn('clean-webpack-plugin: pausing due to webpack errors');
      }

      return;
    }
```
### Issue description or question
When a method inside of a plugin catched the error it won't appear in a console. Webpack will just stop its compilation and gets stuck there. I think it's caused by lack of error handling in hooks version. Try catch blocks were omitted there. I locally improved error handling and it was pretty simple but I think these additional information would be significant for the users. I could provide PR for these changes :). WDYT @johnagan ?
### Webpack Config
No related
```js
// paste your webpack config here
```

### Environment
No related
Run: `npx envinfo --system --binaries --npmPackages clean-webpack-plugin,webpack`

```bash
# Paste the result here
```

When using this, CleanWebpackPlugin does literally nothing.

```js
output: {
        path: path.join(__dirname, 'dist/static/js/[hash]'),
        filename: '[name].js',
    },
```

Please just let us clear the whole dist folder. I am going to rimraf this for now.

This plugin assumes the `compiler.outputFileSystem` is set to the local system `fs` instance. 

This plugin should instead target the output file system set on the compiler instance if set.

see: https://webpack.js.org/api/node/#custom-file-systems
This is a major version bump because the `@types/webpack` have been removed, and `cleanOnceBeforeBuildPatterns` uses the compile hook `afterCompile` instead of `emit` so plugin order should no longer matter.

Also enables async removal of files for webpack 4+.

Miscellaneous package maintenance such as package upgrades done as well.

Closes: #127, #150, #155, #163 
Hi
An sorry, but I will be really synthetic this time.
`$webpack-dev-server --open --output dist --config webpack.config.js` + clean-webpack-plugin = Evanesco

The webpack config worked perfectly before, for a while, except webpack-dev-server complaining about missing js file while accessing in browser.
I haven't any more information now since I run testdisk before getting older backups.
So I can't be even sure that this issue is related to `clean-webpack-plugin` or `webpack-dev-server`

But I think that in both case it should be any security stopping all if the config file is under the directory that is asked to be delete.

Edit: Just seeing https://github.com/johnagan/clean-webpack-plugin/pull/155
Edit: Unable to restore with `testdisk`, only able to list all root file, but their size are 0.

Additional information:
"clean-webpack-plugin": "^3.0.0", (according to atom)
```
devServer: {
      contentBase: './dist',
      historyApiFallback: true,
      hot: true,
      overlay: true
    },
```
### Steps to reproduce

1. `cd /path/to/project`
2. `npm init -y`
3. `npm install -D webpack webpack-cli style-loader css-loader mini-css-extract-plugin file-loader clean-webpack-plugin`

4. Code to reproduce

`package.json` `scripts`:
```js
    "build": "webpack --mode production",
    "dev": "webpack --mode development --watch",
```

`webpack.config.js`:
```js
const path = require('path')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')

var config = {
  entry: {
    main: './src/main.js',
  },
  output: {
    path: path.resolve(__dirname, 'public'),
    filename: 'build/app.js',
  },
  module: {
    rules: [
      {
        test: /\.css$/,
        use: [
          'style-loader',
          MiniCssExtractPlugin.loader,
          'css-loader',
        ],
      },
      {
        test: /\.(png|jpe?g|gif|svg)$/,
        loader: 'file-loader',
        options: {
          outputPath: 'build/images',
          name: '[name].[hash:7].[ext]',
        },
      },
    ],
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: 'build/app.css',
    }),
    new CleanWebpackPlugin({
      cleanOnceBeforeBuildPatterns: [ 'build/**/*', ],
    }),
  ],
}

module.exports = config
```

`src/assets/images/bg.png`: any dummy image (e.g. https://dummyimage.com/600x400/000/fff).

`src/css/app.css`:
```css
.whatever {
  background-image: url('../assets/images/bg.png');
}
```

`src/main.js`:
```js
import './css/app.css'
```

5. `npm run dev`

6. Save `src/css/app.css`

### Observed behavior

`bg.png` unexpectedly disappears (from `public/build/images`).
