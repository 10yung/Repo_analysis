Hi.
It appears that this version of Uglify doesn't preserve parentheses around multiplications, effectively reordering them. This may lead to problems, e.g. turning "huge_num * (huge_num * almost_zero)" may change the result of the computation from a finite number to infinity.

P.S. I had to modify package.json and test/unit/scripts.js because otherwise I couldn't run the tests (got "Error: No such module: evals" both in scripts.js and nodeunit).
Added in licence to package.json


I add some code to make "let" performs like "var".
I test it works well when "let" used.
Maybe more test should be done.


Here's an example:
The origin:

``` javascript
    function test(condition, func1, func2, arg1, arg2) {
        if (condition) {
            return func1(arg1, arg2);
        } else {
            return func2(arg1, arg2);
        }
    }
```

What I expect is:

``` javascript
    function test(a,b,c,d,e){return(a?b:c)(d,e)}
```

But what the tool gives me is (`(t,u)` is uneccessary repeated 2 times):

``` javascript
   function main(n,i,r,t,u){return n?i(t,u):r(t,u)}
```

https://github.com/mishoo/UglifyJS/blob/lib/parse-js.js link is 404'd

sometimes (especially with AngularJS) you get errors only in your uglified code that are about function(e){}
which is hard to track down when there are 4700 function(e){}

This option makes each parameter name unique to help you find the area of code where the problem was.
see http://stackoverflow.com/a/25109762/1969871 for an example. I'm not suggesting you use it all the time, but just to help track down problems if they happen.

Hopefully you think this is useful. I'm not sure it's the best way to implement it, but it worked for me.

