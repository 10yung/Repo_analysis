@danthorpe **You've built a great framework and people want to use it!** Unfortunately, we're eight months on without any updates and as far as I can tell without even any replies to issues or PRs.  As a maintainer of open source projects myself, I fully understand that work & life can leave little time for these things but this projects needs updates.

**Add maintainers to help you.** Alternatively everybody is just going to fork the project and we'll all be worse off for it.  I, and I am quite sure many others, are ready, willing and able to pitch in.

Two of the four links which appear at the top of the readme file lead nowhere.

This annotated screen capture explains it best:

<img width="921" alt="Screen Shot 2020-01-09 at 16 53 46" src="https://user-images.githubusercontent.com/59220837/72078416-b6053580-3301-11ea-94a6-91f966ab1299.png">



Hey there,

I've been dealing with ProcedureKit conditions for the last few hours and a puzzling behavior came to my attention which I'm not sure is right.

It is implied in multiple parts of the codebase that a condition returning `success(false)` should stop the procedure it's attached to from executing.

> ```swift
> procedure.add(condition: BlockCondition {
>     // procedure will cancel instead of executing if this is false
>     return trueOrFalse
> })
> ```
> _from https://github.com/ProcedureKit/ProcedureKit/blob/development/Documentation/Guides/Basic%20Features/Conditions.md_

or

> ```swift
> operation.addCondition(BlockCondition { 
>    // operation will only be executed if this is true
>    return trueOrFalse
> })
> ```
> _from the [legacy manual](https://operations.readme.io/docs/conditions)_

The reason for my confusion comes from a procedure where I had two `BlockConditions`. One returns `false` because I want the procedure to not be executed without any particular error being thrown (in a specific execution scenario which is irrelevant for the purpose of this issue), and the other returns `true` because the specific thing it checks for succeeds.

I initially assumed that in a scenario where one condition returned `false` and the other returned `true` the first would prevail, much like an implied "AND" condition. That wasn't the case. I then tried to use the built-in `AndCondition` to join the two results together, to no avail.

I decided to inspect the source code of ProcedureKit to investigate if any assumption I was making was wrong, and there was it:

https://github.com/ProcedureKit/ProcedureKit/blob/b4e54f7c710c606ad78223592f18c01d825cab16/Sources/ProcedureKit/Condition.swift#L1482-L1484

What this seems to imply is that a condition returning `success(false)` means that **the condition itself is to be ignored**, not the procedure execution. This goes against the terminology previously quoted in the documentation, and honestly seems a bit counterintuitive to me: this is further corroborated by the fact that if I get rid of the condition returning `true`, the procedure doesn't execute.

It appears that the only proper way to do this is either:
- make the first condition throw an error instead of returning `success(false)`, dealing with the returned error somewhere else in the chain.
- create a custom condition which checks for both things and returns `success(false)`, thus having only one point where `success(false)` is returned.

So, is the behavior currently implemented the expected/correct one? If so, I think it's worth to amend the documentation to make this clear (even though I still don't agree with the inconsistency when only one `success(false)` is present.)

Thanks!
With Xcode 11 carthage compilation for archiving is broken, as ProcedureKitLocation doesn't correctly declare device families supported, adding the missing device families 3 (tvOS) and 4 (watchOS), fixes the issue.
Based largely on @richardpiazza work in #945 

This PR updates the Swift Package.swift file to the tools version 5 format.
And adds support form missing mobile content product

Along with that change, the minimum supported platforms are added (using platforms: []), and the supported language versions are listed (using swiftLanguageVersions: []).

Due to now listed the minimum os support, files in ProcedureKitCoreDataTests needed to have a '@available' attribute applied making sure the tests where only run on supported platforms. (Primarily due to the use of NSPersistentContainer).

Also, since some build environments may not understand what an .xcdatamodeld file is, I've added the TestEntity class definitions, as well as, creating the NSManagedObjectModel definition in code. This allows the tests to run and pass while using the swift test command.

These updates were tested with Xcode 11.1 using swift packages.
(Could relate to #939)

@danthorpe There's and issue i haven't managed to resolve with the Location target:

The pointer address passing doesn't work with swift 5, this needs to be addressed before merging the PR, maybe you can take a look at this, frankly i'm a bit stuck here

```
internal extension CLLocationManager {

    static func make() -> CLLocationManager {
        fatalError("FIX THIS")
//        var manager : CLLocationManager
//        performSelector(onMainThread: #selector(make(new:)), with: &manager, waitUntilDone: true)
//        return manager
        // return DispatchQueue.onMain { CLLocationManager() }
    }
    
    @objc static func make(new manager: CLLocationManager) {
        fatalError("FIX THIS")
//        manager = CLLocationManager.init()
    }
}
```
On Xcode 11.2 I instantly get a EXC_BAD_ACCESS

```
// Grouped in a class to allow for easily deinitializing in `deinit`.
    fileprivate class ProtectedProperties {
        var log: ProcedureLog = Log.Channels<Log>()
        var error: Error? = nil
        var observers = [AnyObserver<Procedure>]()
        var directDependencies = Set<Operation>()
        var conditions = Set<Condition>()
    }
```

The Debugger stops on `var log: ProcedureLog = Log.Channels<Log>()`
The package file isn't fully defined, the "mobile" product is missing
Hi,

I've been playing around the Combine framework and mixing it with Operations a bit. First thing that stands out is that the errors are properly typed compared to ProcedureKit where all errors are generic and handling them is often difficult due to the amount of type casting and edge cases.

What do you think about typing the failure type in `ProcedureResult` and `Procedure` in particular? 

I haven't come up with the proper solution yet, the idea I have in mind was to have a separate error type that would unite the auxiliary errors thrown by ProcedureKit such as errors coming from conditions etc.. and the output error produced by operation itself:

```swift
enum ProcedureError<Failure> where Failure: Error {

  /// Error originating from the OutputProcedure or any Procedure that provides the typed Failure type
  case output(Failure)

   /// Errors thrown by conditions or internally produced by ProcedureKit
  case internal(ProcedureKitError)
}
```

This won't work out of the box apparently without changes across the board. For instance `OutputProcedure` accepts the `Output` which is wrapped into `ProcedureResult` down the road, so I think the best solution would be to force the consumer to provide the complete `ProcedureResult<Success, Failure>` type.
This PR updates the Swift `Package.swift` file to the tools version 5 format.
Along with that change, the minimum supported platforms are added (using **platforms: []**), and the supported language versions are listed (using **swiftLanguageVersions: []**).

Due to now listed the minimum os support, files in `ProcedureKitCoreDataTests` needed to have a '@available' attribute applied making sure the tests where only run on supported platforms. (Primarily due to the use of `NSPersistentContainer`).

Also, since some build environments may not understand what an `.xcdatamodeld` file is, I've added the TestEntity class definitions, as well as, creating the `NSManagedObjectModel` definition in code. This allows the tests to run and pass while using the `swift test` command.

These updates were tested with Xcode 11.1 using swift packages.
(Could relate to https://github.com/ProcedureKit/ProcedureKit/issues/939)
Seeing 403 errors when I try to access the project documentation at http://procedure.kit.run/development/ and http://docs.danthorpe.me/operations/2.9.0/index.html

<img width="795" alt="Screen Shot 2019-09-08 at 4 05 01 PM" src="https://user-images.githubusercontent.com/45495001/64493803-cc678b80-d252-11e9-85d7-cc8ae9bc5e1d.png">
