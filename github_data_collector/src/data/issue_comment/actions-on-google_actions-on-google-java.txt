Currently it seems that smarthome integration always returns an empty response for DisconnectRequest.

https://github.com/actions-on-google/actions-on-google-java/blob/master/src/main/kotlin/com/google/actions/api/smarthome/SmartHomeApp.kt#L166

This could be problematic as developer might need to return an `errorCode` when the `DisconnectRequest` is failing.
According to https://developers.google.com/assistant/smarthome/develop/process-intents#response_format `SyncResponse.Payload` can contains an `errorCode` property.

Currently the libraries exposes JSONObject as part of the public smarthome API object:
https://github.com/actions-on-google/actions-on-google-java/blob/7f3b1e2fd51e3b044380ea3c72722058ad99240f/src/main/kotlin/com/google/actions/api/smarthome/SmartHomeResponse.kt

This force reverse dependencies to both depens on `org.json` (as a direct dependency) and `gson` (transitively).

It would be nice if the library instead only surfaced standard `Map<String, Object>` types in the public API.

/cc @taycaldwell @Fleker 

Running https://github.com/nebula-plugins/gradle-lint-plugin on a project that depens on `actions-on-google:1.8.0` will trigger the following warning.
```
com.google.actions:actions-on-google:1.8.0 in configuration ':implementation' has 18 classes duplicated by com.google.api.grpc:proto-google-common-protos:1.17.0. Duplicate classes: [com/google/api/CustomHttpPatternOrBuilder, com/google/api/AnnotationsProto$1, com/google/api/CustomHttpPattern$1, com/google/api/AnnotationsProto, com/google/api/CustomHttpPattern, com/google/api/Http$Builder, com/google/api/HttpOrBuilder, com/google/api/CustomHttpPattern$Builder, com/google/api/HttpRule, com/google/api/HttpRuleOrBuilder, com/google/api/HttpRule$PatternCase, com/google/api/HttpProto, com/google/api/HttpRule$Builder, com/google/api/HttpRule$2, com/google/api/HttpRule$1, com/google/api/Http, com/google/api/Http$1, com/google/api/HttpProto$1]

This project contains lint violations. A complete listing of the violations follows. 
Because none were serious, the build's overall status was unaffected.

warning   duplicate-dependency-class         com.google.actions:actions-on-google:1.8.0 in configuration ':implementation' has 18 classes duplicated by com.google.api.grpc:proto-google-common-protos:1.17.0 (use --info for detailed class list) (no auto-fix available)
```

I believe this is due to the project vendoring the generated class from the following proto:
https://github.com/actions-on-google/actions-on-google-java/tree/master/src/main/proto/google/api

While those are also available as part of the `com.google.api.grpc:proto-google-common-protos:1.17.0`, which `actions-on-google:1.8.0` depends transitively thru `io.grpc:grpc-protobuf` in https://github.com/actions-on-google/actions-on-google-java/blob/master/build-smarthome.gradle#L51.

see:
```
~ üçä join <(unzip -Z1 /usr/local/google/home/proppy/.gradle/caches/modules-2/files-2.1/com.google.api.grpc/proto-google-common-protos/1.17.0/40471bf2045151c17da555889b5550fcfd5224a8/proto-google-common-protos-1.17.0.jar | sort)  <(unzip -Z1 ~/.gradle/caches/modules-2/files-2.1/com.google.actions/actions-on-google/1.8.0/4c3c71a26360b337a0afe4f3e5d27157a04ff132/actions-on-google-1.8.0.jar | sort)
com/
com/google/
com/google/api/
com/google/api/AnnotationsProto$1.class
com/google/api/AnnotationsProto.class
com/google/api/CustomHttpPattern$1.class
com/google/api/CustomHttpPattern$Builder.class
com/google/api/CustomHttpPattern.class
com/google/api/CustomHttpPatternOrBuilder.class
com/google/api/Http$1.class
com/google/api/Http$Builder.class
com/google/api/Http.class
com/google/api/HttpOrBuilder.class
com/google/api/HttpProto$1.class
com/google/api/HttpProto.class
com/google/api/HttpRule$1.class
com/google/api/HttpRule$2.class
com/google/api/HttpRule$Builder.class
com/google/api/HttpRule$PatternCase.class
com/google/api/HttpRule.class
com/google/api/HttpRuleOrBuilder.class
google/
google/api/
google/api/annotations.proto
google/api/http.proto
META-INF/
META-INF/MANIFEST.MF
```
/cc @taycaldwell @Fleker 

This fixes #39
As of version 1.8.0 `noInputPrompts` is not supported. There is a field in `DialogflowGooglePayload` declared for it but it is never used. This is important for us to be able to migrate away from our own SDK.
To avoid having to first create an intermediary JSON string it would be great if an `InputStream`/`OutputStream` could be used to parse requests and serialize responses. Seeing as you are using gson already it would likely be a minor change.

I'd be happy to open a PR if this is something you feel worth implementing.
This version is not compatible if we are using any GCP functionality within the action. I got following dependency conflict:
Description	Resource	Path	Location	Type
Could not resolve version conflict among [StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> com.google.cloud:google-cloud-logging:jar:1.98.0 -> com.google.cloud:google-cloud-core-grpc:jar:1.91.2 -> com.google.api:gax-grpc:jar:1.49.0 -> io.grpc:grpc-netty-shaded:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> com.google.cloud:google-cloud-logging:jar:1.98.0 -> com.google.cloud:google-cloud-core-grpc:jar:1.91.2 -> com.google.api:gax-grpc:jar:1.49.0 -> io.grpc:grpc-alts:jar:1.23.0 -> io.grpc:grpc-grpclb:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> com.google.cloud:google-cloud-logging:jar:1.98.0 -> com.google.cloud:google-cloud-core-grpc:jar:1.91.2 -> com.google.api:gax-grpc:jar:1.49.0 -> io.grpc:grpc-alts:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> com.google.cloud:google-cloud-logging:jar:1.98.0 -> com.google.cloud:google-cloud-core-grpc:jar:1.91.2 -> io.grpc:grpc-core:jar:1.24.0, StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> io.grpc:grpc-all:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> io.grpc:grpc-all:jar:1.23.0 -> io.grpc:grpc-netty:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> io.grpc:grpc-all:jar:1.23.0 -> io.grpc:grpc-okhttp:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> io.grpc:grpc-all:jar:1.23.0 -> io.grpc:grpc-testing:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], com.starfish.utils:intent-parser:jar:1.0-SNAPSHOT -> com.google.cloud:google-cloud-datastore:jar:1.98.0 -> io.grpc:grpc-core:jar:1.24.0, com.google.actions:actions-on-google:jar:1.7.0 -> io.grpc:grpc-protobuf:jar:1.15.1 -> io.grpc:grpc-core:jar:1.15.1, com.google.actions:actions-on-google:jar:1.7.0 -> io.grpc:grpc-protobuf:jar:1.15.1 -> io.grpc:grpc-protobuf-lite:jar:1.15.1 -> io.grpc:grpc-core:jar:1.15.1, com.google.actions:actions-on-google:jar:1.7.0 -> io.grpc:grpc-stub:jar:1.15.1 -> io.grpc:grpc-core:jar:1.15.1, com.google.actions:actions-on-google:jar:1.7.0 -> io.grpc:grpc-auth:jar:1.15.1 -> io.grpc:grpc-core:jar:[1.15.1,1.15.1]]

org.eclipse.aether.collection.UnsolvableVersionConflictException: Could not resolve version conflict among [StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> com.google.cloud:google-cloud-logging:jar:1.98.0 -> com.google.cloud:google-cloud-core-grpc:jar:1.91.2 -> com.google.api:gax-grpc:jar:1.49.0 -> io.grpc:grpc-netty-shaded:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> com.google.cloud:google-cloud-logging:jar:1.98.0 -> com.google.cloud:google-cloud-core-grpc:jar:1.91.2 -> com.google.api:gax-grpc:jar:1.49.0 -> io.grpc:grpc-alts:jar:1.23.0 -> io.grpc:grpc-grpclb:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> com.google.cloud:google-cloud-logging:jar:1.98.0 -> com.google.cloud:google-cloud-core-grpc:jar:1.91.2 -> com.google.api:gax-grpc:jar:1.49.0 -> io.grpc:grpc-alts:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> com.google.cloud:google-cloud-logging:jar:1.98.0 -> com.google.cloud:google-cloud-core-grpc:jar:1.91.2 -> io.grpc:grpc-core:jar:1.24.0, StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> io.grpc:grpc-all:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> io.grpc:grpc-all:jar:1.23.0 -> io.grpc:grpc-netty:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> io.grpc:grpc-all:jar:1.23.0 -> io.grpc:grpc-okhttp:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], StarfishELK:StarfishELK:jar:0.0.1-SNAPSHOT -> io.grpc:grpc-all:jar:1.23.0 -> io.grpc:grpc-testing:jar:1.23.0 -> io.grpc:grpc-core:jar:[1.23.0,1.23.0], com.starfish.utils:intent-parser:jar:1.0-SNAPSHOT -> com.google.cloud:google-cloud-datastore:jar:1.98.0 -> io.grpc:grpc-core:jar:1.24.0, com.google.actions:actions-on-google:jar:1.7.0 -> io.grpc:grpc-protobuf:jar:1.15.1 -> io.grpc:grpc-core:jar:1.15.1, com.google.actions:actions-on-google:jar:1.7.0 -> io.grpc:grpc-protobuf:jar:1.15.1 -> io.grpc:grpc-protobuf-lite:jar:1.15.1 -> io.grpc:grpc-core:jar:1.15.1, com.google.actions:actions-on-google:jar:1.7.0 -> io.grpc:grpc-stub:jar:1.15.1 -> io.grpc:grpc-core:jar:1.15.1, com.google.actions:actions-on-google:jar:1.7.0 -> io.grpc:grpc-auth:jar:1.15.1 -> io.grpc:grpc-core:jar:[1.15.1,1.15.1]]
	at org.eclipse.aether.util.graph.transformer.NearestVersionSelector.newFailure(NearestVersionSelector.java:159)
	at org.eclipse.aether.util.graph.transformer.NearestVersionSelector.backtrack(NearestVersionSelector.java:120)
	at org.eclipse.aether.util.graph.transformer.NearestVersionSelector.selectVersion(NearestVersionSelector.java:93)
	at org.eclipse.aether.util.graph.transformer.ConflictResolver.transformGraph(ConflictResolver.java:181)
	at org.eclipse.aether.internal.impl.collect.DefaultDependencyCollector.collectDependencies(DefaultDependencyCollector.java:266)
	at org.eclipse.aether.internal.impl.DefaultRepositorySystem.collectDependencies(DefaultRepositorySystem.java:279)
	at org.apache.maven.project.DefaultProjectDependenciesResolver.resolve(DefaultProjectDependenciesResolver.java:169)
	at org.apache.maven.project.DefaultProjectBuilder.resolveDependencies(DefaultProjectBuilder.java:225)
	at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:198)
	at org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:122)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.readMavenProject(MavenImpl.java:630)
	at org.eclipse.m2e.core.internal.project.registry.DefaultMavenDependencyResolver.resolveProjectDependencies(DefaultMavenDependencyResolver.java:63)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.refreshPhase2(ProjectRegistryManager.java:551)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.lambda$2(ProjectRegistryManager.java:515)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:177)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:151)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.refresh(ProjectRegistryManager.java:513)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.refresh(ProjectRegistryManager.java:365)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.refresh(ProjectRegistryManager.java:312)
	at org.eclipse.m2e.core.internal.builder.MavenBuilder$BuildMethod.getProjectFacade(MavenBuilder.java:155)
	at org.eclipse.m2e.core.internal.builder.MavenBuilder$BuildMethod$1.call(MavenBuilder.java:90)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:177)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:151)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:99)
	at org.eclipse.m2e.core.internal.builder.MavenBuilder$BuildMethod.execute(MavenBuilder.java:87)
	at org.eclipse.m2e.core.internal.builder.MavenBuilder.build(MavenBuilder.java:201)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:833)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:220)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:316)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:319)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:371)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:392)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:154)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:244)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
	pom.xml	/My-MP-Bean	line 1	Maven Dependency Problem

I have resolved it for now by excluding it like this:

`<dependency>
	<groupId>com.google.actions</groupId>
	<artifactId>actions-on-google</artifactId>
	<version>1.7.0</version>
	<exclusions>
            <exclusion>
                <groupId>io.grpc</groupId>
                <artifactId>grpc-netty-shaded</artifactId>
            </exclusion>
            <exclusion>
                <groupId>io.grpc</groupId>
      			<artifactId>grpc-protobuf</artifactId>
            </exclusion>
            <exclusion>
                <groupId>io.grpc</groupId>
      			<artifactId>grpc-auth</artifactId>
            </exclusion>
        </exclusions>
</dependency>
`
There is a requirement of Action on Google that richResponse [must have SimpleResponse as first item of an Items array](https://developers.google.com/assistant/conversational/responses#RichResponsesProperties).

But in the app you can provide different way to implement this array and there is no way to sort it manually, because that property is internal:
```kotlin
internal var responseItems: MutableList<RichResponseItem> = ArrayList()
```
So you **have to** create your fulfillment logic in the certain way, which is not really great. It would be nice if after building response there was a sorting to set the SimpleResponse as a first response as it is in requirements.

For example in MockRequestBuilder a `build()` method sets `user` field of appRequest and creates aogRequest out of it:
```kotlin
...
if (userStorage != null) {
    user.userStorage = gson.toJson(userStorage)
}
appRequest.user = user
...
val aogRequest = AogRequest(appRequest)
...
```
But inside internal constructor of AogRequest `userStorage` field is not set at all, only `user.userStorage` does:
```kotlin
internal class AogRequest internal constructor(
        override val appRequest: AppRequest) : ActionRequest {
    ...
    override var userStorage: MutableMap<String, Any> = HashMap()
    ...
    override val user: User? get() = appRequest.user
    ...
}
```
So, if we try in a test to set this userStorage, the field will be empty:
```kotlin
@Test
fun userStorageTest() {
    val actionRequest = MockRequestBuilder()
        .setUserStorage(mapOf(Pair("userId", "someId")))
        .build()
    println("userStorage = ${actionRequest.userStorage}")
    println("user.userStorage = ${actionRequest.user?.userStorage}")
}
```
the output will be:
```
userStorage = {}
user.userStorage = {"userId":"someId"}
```
