In trying to reproduce the `apt` progress bar I adapted https://github.com/gosuri/uiprogress/blob/ec0f254bbca2b17ed68f18af8773a0527b522f01/example/simple/simple.go so that some lines are printed:
```go
package main

import (
        "time"
        "fmt"

        "github.com/gosuri/uiprogress"
)

func main() {
        uiprogress.Start()            // start rendering
        bar := uiprogress.AddBar(100) // Add a new bar

        // optionally, append and prepend completion and elapsed time
        bar.AppendCompleted()
        bar.PrependElapsed()

        i := 0
        for bar.Incr() {
                time.Sleep(time.Millisecond * 20)
                i++
                if i % 10 == 0 {
                        fmt.Println("Well hello there")
                }
        }
}
```
I'd like for the lines to print above the progress bar, which would stay at the bottom. However I'm only getting duplicated progress and only one line printed (also not at the right place but I'm sure that's another issue):
```
   0s [=====>--------------------------------------------------------------]  10%
   0s [============>-------------------------------------------------------]  20%
   0s [===================>------------------------------------------------]  30%
   0s [==========================>-----------------------------------------]  40%
   0s [=================================>----------------------------------]  50%
   1s [========================================>---------------------------]  60%
   1s [===============================================>--------------------]  70%
   1s [======================================================>-------------]  80%
   1s [=============================================================>------]  90%
   1s [====================================================================] 100%
Well hello there
```
Hello,
I may be missing a point, but it seems that starting and stoping a uiprogress twice make the program panic.

Please find bellow a short test program:

```go
package main

import (
    "fmt"
    "time"

    "github.com/gosuri/uiprogress"
)

func createbar() {
    uiprogress.Start()
    defer uiprogress.Stop()
    // create a new bar and prepend the task progress to the bar
    count := 100
    bar := uiprogress.AddBar(count).AppendCompleted().PrependElapsed()
    bar.PrependFunc(func(b *uiprogress.Bar) string {
        return fmt.Sprintf("Task (%d/%d)", b.Current(), count)
    })

    for i := 0; i < count; i++ {
            bar.Incr()
            time.Sleep(time.Millisecond * time.Duration(50))
    }
    time.Sleep(time.Millisecond * time.Duration(500))
}

func main() {
  createbar()
  createbar()
}
```

The console:
```sh
$ go run main.go
Task (100/100)    5s [====================================================================] 100%
Task (1/100)    0s [--------------------------------------------------------------------]   1%
panic: close of closed channel

goroutine 20 [running]:
github.com/gosuri/uiprogress.(*Progress).Listen(0xc00007a1e0)
	/Users/jtbonhomme/Developments/golang/src/github.com/gosuri/uiprogress/progress.go:117 +0x12f
created by github.com/gosuri/uiprogress.(*Progress).Start
	/Users/jtbonhomme/Developments/golang/src/github.com/gosuri/uiprogress/progress.go:134 +0x3f
exit status 2
```

My program is creating 2 Bars like so: 

```
        uiprogress.Start()

	bar := uiprogress.AddBar(int(file.Size())).PrependElapsed().
		AppendCompleted()
	bar.PrependFunc(func(b *uiprogress.Bar) string {
		return paddedName
	})
	bar.Fill = '#'
	bar.Head = '#'
	bar.Empty = ' '

        // In a calback, keep calling this until done:
       bar.Set(int(count))

       uiprogress.Stop()

```

I would expect to see 2 lines of output, one per bar -- instead I am seeing the following:

```
Bar1   --- [#############################################################       ]  90%
Bar1   --- [####################################################################] 100%
Bar2  --- [#############################################################       ]  90%
Bar1   --- [####################################################################] 100%
Bar2  --- [####################################################################] 100%

```

I am creating the bars in arbitrary goroutines. Is this an issue? Should all the bars be created in a single goroutine?

Doing something pretty simple here and I'm not sure why the display is wrong.
`[--------------------------------------------------------------------] 38/3805-------] 0/3805`

```
	uiprogress.Start()         
	bar := uiprogress.AddBar(filesCount) 


	bar.AppendFunc(func(b *uiprogress.Bar) string {
		return fmt.Sprintf("%d/%d", b.Current(), b.Total)
	})

	for _, file := range files {
                 //process
		bar.Incr()
	}
```
Added Go 1.11 modules files `go.mod` and `go.sum`

The code was using a new instance of uilive and not the one with the correct "Out" instance. This means even if you set uiprogress.Out to dev null you'll still get progress bars.

This PR uses the correct instance.

Thanks for the library!
Apparently I get "---" for the time elapsed prepend when using Set(). Is this by design?
It may be desirable to have runes that are wider than a byte (such as â–¶ for the `uiprogress.Head`). Additionally it would be nice to support not only runes, but also short strings so that ansi control charaters can be used (for color).
Currently, the variables needed to show time elapsed are only set when using `Incr()`. This PR makes it also work when using `Set()`.