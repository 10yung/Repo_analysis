Dear developers,

great tool! Your README only includes linux as the target architecture in the Java section. Is there any reason for that?

I'd like to be able to use Warp with .NET Core to target `linux-musl-x64`. Right now only `linux-x64` is supported.

Support for `linux-musl-x64` would allow me to layer binaries onto the `mcr.microsoft.com/dotnet/core/runtime-deps:3.1-alpine` container.

This would save over 100 (!) MB in container size compared to the Debian-based `runtime-deps` container, bringing the total to around 23 MB (10 for container, 13 for binary) for a basic Hello World application.

And that would be _really_ lightweight.
I plan to use this project for [cdr/code-server](https://github.com/cdr/code-server) but I'll need ARM builds since I intend it to be used for ARM builds and possibly for normal builds as part of an experiment.
I try compile this project ,but failed like this:
![image](https://user-images.githubusercontent.com/808983/68395679-2cbf6e80-01ab-11ea-9ac1-5e6ae9ec13d9.png)
```
[root@iz0xi6fyb0guktgu5ux21tz warp]# make
make build
make[1]: Entering directory `/root/warp'
cargo build -p warp-runner --release --target x86_64-unknown-linux-gnu
   Compiling warp-runner v0.3.0 (/root/warp/warp-runner)
warning: trait objects without an explicit `dyn` are deprecated
  --> warp-runner/src/main.rs:46:29
   |
46 | fn main() -> Result<(), Box<Error>> {
   |                             ^^^^^ help: use `dyn`: `dyn Error`
   |
   = note: `#[warn(bare_trait_objects)]` on by default

    Finished release [optimized] target(s) in 3.16s
strip target/x86_64-unknown-linux-gnu/release/warp-runner
cargo build -p warp-runner --release --target x86_64-pc-windows-gnu
   Compiling approx v0.1.1
error[E0463]: can't find crate for `std`
  |
  = note: the `x86_64-pc-windows-gnu` target may not be installed

error: aborting due to previous error

For more information about this error, try `rustc --explain E0463`.
error: Could not compile `approx`.

To learn more, run the command again with --verbose.
make[1]: *** [build] Error 101
make[1]: Leaving directory `/root/warp'
make: *** [all] Error 2
[root@iz0xi6fyb0guktgu5ux21tz warp]# ^C

```

Can you help me? Thank you very much

How do you update the app local cache? Right now Iâ€™m having to manually delete this.
This threw me a bit, as I copied and pasted trying to clear the cache on macOS and this path was wrong.

Would be really great to make this cache based on a hash or version somehow. 
Is there any way to compile windows executables for 32-bit systems ?
is it possible like with node to make a single executable of a php application (such as laravel and composer)? I see a great need in bundling composer dependencies.
Create a user with no login shell and no bin/bash

`sudo useradd -r subversion`

I am trying to create a systemd service which will be executed by a user of this category.

Executing the warped application using this user 

`sudo -u subversion ./warped` 

creates  error 
> Error: Custom { kind: Other, error: StringError("no tarball found inside binary") 

Is there a way run warped dotnet applications for users with no login shell users / no bin/bash users?

I have to switch some of our net core binaries to run on a rhel 7.x instance and hit a show stopper where warp-packer as well as binaries I made with this awesome tool failed to run due to glib_c being on 2.17 for rhel 7.x, it wanted 2.18.  I'm still learning (probably never will stop) my ways through linux and didn't see anything obvious where I could change this or an easy way to work around.  It seemed my options were to either compile glibc outside and place it in rhel or upgrade rhel to 8.x, which is probably the better choice, but I'm not in control of those decisions in what I'm facing.

Thanks for any insight if this is something I can specify/config when running warp-packer.