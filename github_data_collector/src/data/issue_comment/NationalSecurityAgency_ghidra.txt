i960 / Intel 80960 


I was unable to test with SleighDevTools.  I found 2 compilers, one for COFF and kind of decided that was too much development for me at this time (see #1349) and another for ELF, but was unable to get the pcodetest compiling due to limitations in that version of GCC (it was unable to statically initialize the global array containing the unit tests for each test).

(https://github.com/mumbel/ghidra_i960/tree/coff  has my initial attempt at COFF)
**Describe the bug**

There is a memory access violation (BAD_ACCESS) in the d_unqualified_name function [1]  of demangler_gnu, as demonstrated with  the string "_ZN11951592242730AnimationOverlayHandlerImplD18446744073709551616Ev" . This leads to a segmentation fault when launching the demangler_gnu process. 

[1]Â https://github.com/NationalSecurityAgency/ghidra/blob/6ae0c1ce239932882b7e4577d76ebd7d23779a09/GPL/DemanglerGnu/src/demangler_gnu/c/cp-demangle.c#L1486

**To Reproduce**
lldb  ./GPL/DemanglerGnu/os/osx64/demangler_gnu _ZN11951592242730AnimationOverlayHandlerImplD18446744073709551616Ev

(lldb) target create "./GPL/DemanglerGnu/os/osx64/demangler_gnu"
Current executable set to './GPL/DemanglerGnu/os/osx64/demangler_gnu' (x86_64).
(lldb) settings set -- target.run-args  "_ZN11951592242730AnimationOverlayHandlerImplD18446744073709551616Ev"
(lldb) r
Process 46162 launched: '/Users/marc/Downloads/ghidra_9.1.1_PUBLIC/GPL/DemanglerGnu/os/osx64/demangler_gnu' (x86_64)
Process 46162 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x7ffea228f89d)
    frame #0: 0x0000000100009eab demangler_gnu`d_unqualified_name + 571
demangler_gnu`d_unqualified_name:
->  0x100009eab <+571>: movsx  ecx, byte ptr [rax]
    0x100009eae <+574>: cmp    ecx, 0x42
    0x100009eb1 <+577>: jne    0x100009ec8               ; <+600>
    0x100009eb7 <+583>: mov    rdi, qword ptr [rbp - 0x10]
Target 0: (demangler_gnu) stopped.
(lldb) bt
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x7ffea228f89d)
  * frame #0: 0x0000000100009eab demangler_gnu`d_unqualified_name + 571
    frame #1: 0x000000010000a09f demangler_gnu`d_prefix + 255
    frame #2: 0x0000000100009986 demangler_gnu`d_nested_name + 166
    frame #3: 0x000000010000901f demangler_gnu`d_name + 79
    frame #4: 0x00000001000023d1 demangler_gnu`d_encoding + 81
    frame #5: 0x0000000100002279 demangler_gnu`cplus_demangle_mangled_name + 201
    frame #6: 0x000000010000826c demangler_gnu`d_demangle_callback + 556
    frame #7: 0x0000000100007f91 demangler_gnu`d_demangle + 65
    frame #8: 0x0000000100007f3f demangler_gnu`cplus_demangle_v3 + 31
    frame #9: 0x00000001000103cc demangler_gnu`cplus_demangle + 188
    frame #10: 0x0000000100011b42 demangler_gnu`demangle_it + 130
    frame #11: 0x000000010001164b demangler_gnu`main + 507
    frame #12: 0x00007fff6b67c3d5 libdyld.dylib`start + 1
    frame #13: 0x00007fff6b67c3d5 libdyld.dylib`start + 1
(lldb) register read rax
     rax = 0x00007ffea228f89d


**Expected behavior**
No crash, return proper error return code. 

**Environment (please complete the following information):**
 - OS: [e.g. macOS 10.14.6]
 - Java Version: [13.0.2]
 - Ghidra Version: [ 9.1.1]

**Additional context**
In the long run the Ghidra default demangler could be implemented in a language which does not allow memory faults when using attacker created mangled symbols.  
RISC-V   pre/post patterns
- Tricore ELF relocations
- paterns
The parseConversionOperator was removing the operator portion from the demangled string and using the namespace to set the name and namespace and then setting the name to operator.cast.to.

Essentially it was flowing like this:
```
demangled = NS1::Foo::operator
fullName = NS1::Foo
demangledNamespace = NS1
demangledName = Foo
demangledName = operator.cast.to
```

It is now:
```
demangled = NS1::Foo::operator
fullNamespace = NS1::Foo
demangledNamespace = NS1::Foo
demangledName = operator.case.to
```

I have also renamed the variables fullName and templatelessName to fullNamespace and templatelessNamespace to make it easier to understand when reviewing in the future.

There is also an unimportant typo fix in the commit.

resolves #1441 
This simple patch will add the missing fields, `e_ident_osabi` and `e_ident_abiversion`, to the ElfHeader which may be useful for OS specific loaders and analyzers, as well as displays the two fields in the Listing.

![image](https://user-images.githubusercontent.com/12718188/72667400-4ec24200-39e1-11ea-8cde-7a329b939e57.png)

The got and symbol ptrs in Mach-O executables is broken (offsetted) sometimes:

![2020-01-18-154156_922x794_scrot](https://user-images.githubusercontent.com/34467/72665562-d328bb00-3a09-11ea-8bab-93ae9835efd9.png)

Here we can see the addresses to not corresponds properly. This is how it appears in IDA typically where the mapping is correct:

![2020-01-18-154315_967x430_scrot](https://user-images.githubusercontent.com/34467/72665583-331f6180-3a0a-11ea-9d24-ce1fa9e04ee2.png)

Similarly, all the `__la_symbol_ptr` table looks off:

![2020-01-18-154548_934x571_scrot](https://user-images.githubusercontent.com/34467/72665610-724db280-3a0a-11ea-925a-31a9a7d28df1.png)

In IDA:

![2020-01-18-154540_968x533_scrot](https://user-images.githubusercontent.com/34467/72665608-619d3c80-3a0a-11ea-8675-c757e257cd01.png)

After analysis in Ghidra, this results in a completely broken output, because all the function calls are wrong.

The bug is not present in all mach-o executables, and since I don't have a mac, it's hard for me to provide a reproducible test-case. What additional information can I provide?

Env:
- Linux x86_64
- Binary: Mach-O 64-bit
- Ghidra 9.1.1
**Describe the bug**
Element in the decompiler window sometimes not highlighted when you press middle button of mouse (or other button for highlighting), if you click again, than maybe element will be highlighted.

**To Reproduce**
Steps to reproduce the behavior:
1. Hover over the decompiler element (variable, for example).
2. Press middle mouse button.

**Expected behavior**
You should see all highlighted elements.

**Environment (please complete the following information):**
- OS: Linux 5.3.11
- Java Version: 13.0.1
- Ghidra Version: 6ae0c1ce239932882b7e4577d76ebd7d23779a09

**Additional context**
I found problem commit, is d307623f67f10598a7b787c480b337cde7907fca, but I think, that real problem in commits, that were made earlier.

The following code:

```c
#include <sys/stat.h>
#include <fcntl.h>

int f(const char *s)
{
    return open(s, O_RDWR | O_CREAT | O_EXCL, 0644);
}
```

Gives the following assembly in x86_64 (after converting the mode argument):

```
         00100000 ba a4 01 00 00              MOV          EDX,644o
         00100005 be c2 00 00 00              MOV          ESI,0xc2
         0010000a 31 c0                       XOR          EAX,EAX
         0010000c e9 f7 0f 00 00              JMP          open
```

Even after creating an arbitrary enum with the `O_*` defines from `fcntl.h`, it does not seem possible to convert the `0xc2` argument back to `O_RDWR | O_CREAT | O_EXCL` using the `Set equate` menu. The Multi-term filtering option does not seem to help.

`Apply Enum` also seems absent unless I select the whole `MOV` line, but it does not have any effect.

Env:
Ghidra 9.1.1
Linux x86_64
**Describe the bug**
When exporting a program to XML, a .bytes file containing the memory blocks/sections is also created. If the block currently being dumped is > 32KiB in length, and there is a second block directly following the current block, there may be an overread into the next block. The XML file reports the correct lengths of the blocks, so the data from the overread appears as padding in the file between adjacent blocks.

The root of the problem appears to be here, where there is a memory read bounded only by the chunking buffer size:
https://github.com/NationalSecurityAgency/ghidra/blob/6ae0c1ce239932882b7e4577d76ebd7d23779a09/Ghidra/Features/Base/src/main/java/ghidra/app/util/xml/MemoryMapXmlMgr.java#L397

On a block > 32KiB in size, subsequent reads in this chunking loop will always attempt to read into the 32KiB buffer. If there is no adjacent block, only the bytes remaining in the block will be returned. If there is a block adjacent however, the read may extend into that next block and it will be dumped to the file if the block range is not aligned to 32KiB.

**To Reproduce**
Have a binary file containing memory layout as described above. Import the binary, then run `File > Export Program...` and select XML.

**Expected behavior**
Dumping of memory blocks to a file should read only the block currently being dumped.

**Screenshots**
N/A

**Attachments**
N/A

**Environment (please complete the following information):**
 - OS: Ubuntu 18.04
 - Java Version: 11.0
 - Ghidra Version: 9.1.1

**Additional context**
I have a need to redistribute the analysis of a binary, but prefer to not distribute the binary itself. I was creating a script that can reproduce the .bytes file given the original binary and discovered this unusual padding between blocks.
