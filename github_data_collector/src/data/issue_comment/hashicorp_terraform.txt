Hello,

I have a this very simple  use case I'm trying to make work for hours now without any success.

I have a simple lambda (written in Go) that is zipped 7.5MB big. A lambda is eventually created into my account (and works). But terraform is somehow try to re-create the same lambda again, and fails (because the lambda already exists)

It seems to be related to the size of this archive somehow. When I try with a smaller archive (around 5MB) everything works fine.

Is there any workaround, limitation or any clue about this issue?

Thanks

Adrien

### Terraform Version

```
Terraform v0.12.19
+ provider.archive v1.3.0
+ provider.aws v2.45.0
+ provider.null v2.1.2
```

### Terraform Configuration Files

```hcl
variable "aws_region" {
  default = "eu-west-1"
}

provider "aws" {
  region = var.aws_region
}

resource "aws_iam_role" "iam_for_lambda" {
  name = "iam_for_lambda"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_lambda_function" "foo" {
  function_name = "foooooo"

  filename         = "function.zip"

  handler = "main"
  runtime = "go1.x"

  role = aws_iam_role.iam_for_lambda.arn
}

```

### Debug Output

https://gist.github.com/frediana/606331547ca66d41e658449032e63ad4

### Crash Output

https://gist.github.com/frediana/24e0c3454271afa88588b95cf7d99372

### Expected Behavior

A lambda should be created successfully and terraform apply should not end up with an error.

### Actual Behavior

Lambda is created/uploaded to AWS because but terraform crash.

```
Error: Error creating Lambda function: ResourceConflictException: Function already exist: foooooo
{
  Message_: "Function already exist: foooooo",
  Type: "User"
}
```

### Steps to Reproduce

1. `terraform init`
2. `terraform apply`

### Additional Context

The function I try to create is a 7.5MB zip, Golang binary.

### Terraform Version
```
Terraform v0.12.6
```

### Terraform Configuration Files
```hcl
variable "tenancy_ocid" {}
variable "user_ocid" {}
variable "fingerprint" {}
variable "private_key_path" {}
variable "region" {}

variable "compartment_ocid" {}
variable "ssh_public_key" {}


provider "oci" {
  tenancy_ocid     = "${var.tenancy_ocid}"
  user_ocid        = "${var.user_ocid}"
  fingerprint      = "${var.fingerprint}"
  private_key_path = "${var.private_key_path}"
  region           = "${var.region}"
}

# Defines the number of volumes to create and attach to each instance
# NOTE: Changing this value after applying it could result in re-attaching existing volumes to different instances.
# This is a result of using 'count' variables to specify the volume and instance IDs for the volume attachment resource.
variable "num_iscsi_volumes_per_instance" {
  default = "1"
}

variable "instance_shape" {
  default = "VM.Standard2.1"
}

variable "instance_image_ocid" {
  type = "map"

  default = {
    us-phoenix-1 = "ocid1.image.oc1.phx.aaaaaaaa4utqyolfcrdqef6u6aa3irshacsg55x7y6btsss6otqxzpvhshvq"
  }
}

variable "db_size" {
  default = "50" # size in GBs
}

variable "tag_namespace_description" {
  default = "Just a test"
}

variable "tag_namespace_name" {
  default = "testexamples-tag-namespace"
}

resource "oci_core_instance" "test_instance" {
  for_each             = var.instance_params
  availability_domain = "${data.oci_identity_availability_domain.ad.name}"
  compartment_id      = "${var.compartment_ocid}"
  display_name        = "jump"
  shape                = each.value.shape

  create_vnic_details {
    subnet_id        = "${oci_core_subnet.test_subnet.id}"
    display_name     = "Primaryvnic"
    assign_public_ip = true
    hostname_label   = each.value.hostname
  }

  source_details {
    source_type = "image"
    source_id   = "${var.instance_image_ocid[var.region]}"

    # Apply this to set the size of the boot volume that's created for this instance.
    # Otherwise, the default boot volume size of the image is used.
    # This should only be specified when source_type is set to "image".
    #boot_volume_size_in_gbs = "60"
  }

  # Apply the following flag only if you wish to preserve the attached boot volume upon destroying this instance
  # Setting this and destroying the instance will result in a boot volume that should be managed outside of this config.
  # When changing this value, make sure to run 'terraform apply' so that it takes effect before the resource is destroyed.
  #preserve_boot_volume = true

  metadata = {
    ssh_authorized_keys = "${var.ssh_public_key}"
    user_data           = "${base64encode(file("./userdata/bootstrap"))}"
  }

   timeouts {
    create = "60m"
  }
}

resource "oci_core_vcn" "test_vcn" {
  cidr_block     = "10.1.0.0/16"
  compartment_id = "${var.compartment_ocid}"
  display_name   = "TestVcn"
  dns_label      = "testvcn"
}

resource "oci_core_internet_gateway" "test_internet_gateway" {
  compartment_id = "${var.compartment_ocid}"
  display_name   = "TestInternetGateway"
  vcn_id         = "${oci_core_vcn.test_vcn.id}"
}

resource "oci_core_default_route_table" "default_route_table" {
  manage_default_resource_id = "${oci_core_vcn.test_vcn.default_route_table_id}"
  display_name               = "DefaultRouteTable"

  route_rules {
    destination       = "0.0.0.0/0"
    destination_type  = "CIDR_BLOCK"
    network_entity_id = "${oci_core_internet_gateway.test_internet_gateway.id}"
  }
}

resource "oci_core_subnet" "test_subnet" {
  availability_domain = "${data.oci_identity_availability_domain.ad.name}"
  cidr_block          = "10.1.20.0/24"
  display_name        = "TestSubnet"
  dns_label           = "testsubnet"
  security_list_ids   = ["${oci_core_vcn.test_vcn.default_security_list_id}"]
  compartment_id      = "${var.compartment_ocid}"
  vcn_id              = "${oci_core_vcn.test_vcn.id}"
  route_table_id      = "${oci_core_vcn.test_vcn.default_route_table_id}"
  dhcp_options_id     = "${oci_core_vcn.test_vcn.default_dhcp_options_id}"
}

data "oci_identity_availability_domain" "ad" {
  compartment_id = "${var.tenancy_ocid}"
  ad_number      = 1
}

resource "oci_core_volume" "block" {
  for_each            = var.bv_params
  availability_domain = oci_core_instance.test_instance[each.value.instance_name].availability_domain
  #compartment_id      = oci_core_instance.test_instance[each.value.instance_name].compartment_id
  display_name        = each.value.display_name
  size_in_gbs         = each.value.bv_size
  compartment_id      = oci_core_instance.test_instance[each.value.instance_name].compartment_id
}




variable "bv_params" {
  description = "Placeholder the bv parameters"
  type = map(object({
  display_name  = string
  bv_size       = number
  instance_name = string
  #device_name   = string
}))
}

variable "instance_params" {
description = "Placeholder for the parameters of the instances"
type = map(object({
shape                = string
hostname             = string
boot_volume_size     = number
assign_public_ip     = bool
private_ip           = string
nsg_names            = list(string)
preserve_boot_volume = bool
subnet_name          = string
device_disk_mappings = string
fault_domain         = number
image_name           = string
}))
}


terraform.tfvars
bv_params = {
  jumpbv1 = {
    display_name  = "jumpbv1"
    bv_size       = 50
    instance_name = "jump"
  }
}

instance_params = {
  jump = {
    shape                = "VM.Standard2.1"
    hostname             = "jump"
    boot_volume_size     = 300
    preserve_boot_volume = false
    assign_public_ip     = false
    private_ip           = "10.0.5.10"
    nsg_names            = ["nsg-test-jump"]
    subnet_name          = "calypso_test_jump"
    device_disk_mappings = "/u01:/dev/oracleoci/oraclevdb"
    fault_domain         = 1
    image_name           = "us-phoenix-1-win2016"
  }
}

```

### Debug Output


### Crash Output
Error: Invalid index
in resource "oci_core_volume" "block":
      availability_domain = oci_core_instance. test_instance[each.value.instance_name].availability_domain
      |----------------
      | each.value.instance_name is "jump"
      | oci_core_instance.test_instance is object with no attributes
  
  The given key does not identify an element in this collection value.


### Expected Behavior
Even though the apply failed, the destroy operation should have succeeded

### Actual Behavior
When Apply failed at provisioning the instance (instance got in state Terminating from Provisioning, TF destroy also failed

### Steps to Reproduce
Run Terraform apply
if apply fails
run TF destroy

### Additional Context


### References


Hello Terraform Team.

I am experiencing a problem while creating an aws_ec2_client_vpn_network_association resource. Every time I run a `terraform plan`, it tries to re-create 2 of 3 aws_ec2_client_vpn_network_association resources because the `subnet_id` is not the expected one. The weird thing is that the tfstate does not reflect what the `terraform plan output` showed before creating the resources initially (I will share it in the following sections).

I am iterating a set value (the variable used to be list) with a for_each statement.

The resource with key id subnet-05fdg4kuor86fkq2m is the only resource which does not ask to re-create.

### Terraform Version
<!---
Run `terraform -v` to show the version, and paste the result between the ``` marks below.

If you are not running the latest version of Terraform, please try upgrading because your issue may have already been fixed.
-->

```
terraform v0.12.19
provider.aws v2.44.0
```

### Terraform Configuration Files
<!--
Paste the relevant parts of your Terraform configuration between the ``` marks below.

For large Terraform configs, please use a service like Dropbox and share a link to the ZIP file. For security, you can also encrypt the files using our GPG public key.
-->

```hcl
resource "aws_ec2_client_vpn_network_association" "vpn_dc_to_aws_association" {
  for_each               = toset(module.vpc.private_subnet_ids)
  client_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.vpn_dc_to_aws.id
  subnet_id              = each.value
}

# This is the module.vpc.private_subnet_ids output
output "private_subnet_ids" {
  description = "List of private subnets identifiers"
  value       = aws_subnet.private[*].id
}
# This is how the output looks like (the subnet's id hash were changed but keeping the first 2 digits so the toset() return the same order)
private_subnet_ids = [
  "subnet-05fdg4kuor86fkq2m",
  "subnet-02m6ll1sct6jpusqo",
  "subnet-0324jab2wrkww2n9w",
]
```
### Terraform plan when creating the resource for 2nd time
Creating for 2nd time because previously I deleted the 2 inconsistent resources with terraform

```hcl
Terraform will perform the following actions:

  # aws_ec2_client_vpn_network_association.vpn_dc_to_aws_association["subnet-02m6ll1sct6jpusqo"] will be created
  + resource "aws_ec2_client_vpn_network_association" "vpn_dc_to_aws_association" {
      + client_vpn_endpoint_id = cvpn-endpoint-079f359043fb461"
      + id                     = (known after apply)
      + security_groups        = (known after apply)
      + status                 = (known after apply)
      + subnet_id              = "subnet-02m6ll1sct6jpusqo"
      + vpc_id                 = (known after apply)
    }

  # aws_ec2_client_vpn_network_association.vpn_dc_to_aws_association["subnet-0324jab2wrkww2n9w"] will be created
  + resource "aws_ec2_client_vpn_network_association" "vpn_dc_to_aws_association" {
      + client_vpn_endpoint_id = "cvpn-endpoint-079f359043fb461"
      + id                     = (known after apply)
      + security_groups        = (known after apply)
      + status                 = (known after apply)
      + subnet_id              = "subnet-0324jab2wrkww2n9w"
      + vpc_id                 = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.
```
### Apply
```hcl
aws_ec2_client_vpn_network_association.vpn_dc_to_aws_association["subnet-02m6ll1sct6jpusqo"]: Creating...
aws_ec2_client_vpn_network_association.vpn_dc_to_aws_association["subnet-0324jab2wrkww2n9w"]: Creating...
aws_ec2_client_vpn_network_association.vpn_dc_to_aws_association["subnet-02m6ll1sct6jpusqo"]: Creation complete after 1s [id=cvpn-assoc-0e282ba6751b2b456]
aws_ec2_client_vpn_network_association.vpn_dc_to_aws_association["subnet-0324jab2wrkww2n9w"]: Creation complete after 2s [id=cvpn-assoc-0a62f3349b5bf48e3]
```

### Tfstate
```json
{
  "mode": "managed",
  "type": "aws_ec2_client_vpn_network_association",
  "name": "vpn_dc_to_aws_association",
  "each": "map",
  "provider": "provider.aws",
  "instances": [
    {
      "index_key": "subnet-02m6ll1sct6jpusqo",
      "schema_version": 0,
      "attributes": {
        "client_vpn_endpoint_id": "cvpn-endpoint-079f359043fb461",
        "id": "cvpn-assoc-0e282ba6751b2b456",
        "security_groups": [
          "sg-26dnzaak7k1b0asb5"
        ],
        "status": "associated",
        "subnet_id": "subnet-05fdg4kuor86fkq2m",
        "vpc_id": "vpc-nx1tigsi8nuzgop3k"
      },
      "private": "bnVsbA==",
      "dependencies": [
        "aws_ec2_client_vpn_endpoint.vpn_dc_to_aws",
        "module.vpc.aws_subnet.private"
      ]
    },
    {
      "index_key": "subnet-0324jab2wrkww2n9w",
      "schema_version": 0,
      "attributes": {
        "client_vpn_endpoint_id": "cvpn-endpoint-079f359043fb461",
        "id": "cvpn-assoc-0a62f3349b5bf48e3",
        "security_groups": [
          "sg-26dnzaak7k1b0asb5"
        ],
        "status": "associated",
        "subnet_id": "subnet-05fdg4kuor86fkq2m",
        "vpc_id": "vpc-nx1tigsi8nuzgop3k"
      },
      "private": "bnVsbA==",
      "dependencies": [
        "aws_ec2_client_vpn_endpoint.vpn_dc_to_aws",
        "module.vpc.aws_subnet.private"
      ]
    },
    {
      "index_key": "subnet-05fdg4kuor86fkq2m",
      "schema_version": 0,
      "attributes": {
        "client_vpn_endpoint_id": "cvpn-endpoint-079f359043fb461",
        "id": "cvpn-assoc-051194d3b9447750b",
        "security_groups": [
          "sg-26dnzaak7k1b0asb5"
        ],
        "status": "associated",
        "subnet_id": "subnet-05fdg4kuor86fkq2m",
        "vpc_id": "vpc-nx1tigsi8nuzgop3k"
      },
      "private": "bnVsbA==",
      "dependencies": [
        "aws_ec2_client_vpn_endpoint.vpn_dc_to_aws",
        "module.vpc.aws_subnet.private"
      ]
    }
  ]
},
```

### Terraform plan when creating the resource for 3rd time
After running the previous apply, I ran a new terraform plan
```hcl
Terraform will perform the following actions:

  # aws_ec2_client_vpn_network_association.vpn_dc_to_aws_association["subnet-02m6ll1sct6jpusqo"] must be replaced
-/+ resource "aws_ec2_client_vpn_network_association" "vpn_dc_to_aws_association" {
        client_vpn_endpoint_id = "cvpn-endpoint-07609f359043fb461"
      ~ id                     = "cvpn-assoc-0e282ba6751b2b456" -> (known after apply)
      ~ security_groups        = [
          - "sg-26dnzaak7k1b0asb5",
        ] -> (known after apply)
      ~ status                 = "associated" -> (known after apply)
      ~ subnet_id              = "subnet-05fdg4kuor86fkq2m" -> "subnet-02m6ll1sct6jpusqo" # forces replacement
      ~ vpc_id                 = "vpc-nx1tigsi8nuzgop3k" -> (known after apply)
    }

  # aws_ec2_client_vpn_network_association.vpn_dc_to_aws_association["subnet-0324jab2wrkww2n9w"] must be replaced
-/+ resource "aws_ec2_client_vpn_network_association" "vpn_dc_to_aws_association" {
        client_vpn_endpoint_id = "cvpn-endpoint-07609f359043fb461"
      ~ id                     = "cvpn-assoc-0a62f3349b5bf48e3" -> (known after apply)
      ~ security_groups        = [
          - "sg-26dnzaak7k1b0asb5",
        ] -> (known after apply)
      ~ status                 = "associated" -> (known after apply)
      ~ subnet_id              = "subnet-05fdg4kuor86fkq2m" -> "subnet-0324jab2wrkww2n9w" # forces replacement
      ~ vpc_id                 = "vpc-nx1tigsi8nuzgop3k" -> (known after apply)
    }

Plan: 2 to add, 0 to change, 2 to destroy.
```

### Debug Output
<!--
Full debug output can be obtained by running Terraform with the environment variable `TF_LOG=trace`. Please create a GitHub Gist containing the debug output. Please do _not_ paste the debug output in the issue, since debug output is long.

Debug output may contain sensitive information. Please review it before posting publicly, and if you are concerned feel free to encrypt the files using the HashiCorp security public key.
-->

### Crash Output
<!--
If the console output indicates that Terraform crashed, please share a link to a GitHub Gist containing the output of the `crash.log` file.
-->

### Expected Behavior
<!--
What should have happened?
-->
The subnet_id in the tfstate has to match with the object key (which has the same value as subnet_id) 

### Actual Behavior
<!--
What actually happened?
-->
It wants to recreate 2 of 3 resources because the tfstate is created inconsistently.

### Steps to Reproduce
<!--
Please list the full steps required to reproduce the issue, for example:
1. `terraform init`
2. `terraform apply`
-->

### Additional Context
<!--
Are there anything atypical about your situation that we should know? For example: is Terraform running in a wrapper script or in a CI system? Are you passing any unusual command line options or environment variables to opt-in to non-default behavior?
-->
I am running terraform with a home-made wrapper. Anyways, I don't think it is causing any problem because it forwards all terraform parameter to the terraform binary. I haven't tried to reproduce it without the wrapper because it is hard to play with my current infra config.

### References
<!--
Are there any other GitHub issues (open or closed) or Pull Requests that should be linked here? For example:

- #6017

-->
### Current Terraform Version
0.12 (Latest)

### Use-cases
Would be nice to get failures right on plan if a given variable is not the expected pattern or allowed value just like AWS CloudFormation does with Parameters with AllowedPattern & AllowedValues

### Proposal
Something like this:
```
variable  "instance_type" : {
    type = string
    allowed_values = ["t2.micro", "m1.small", "m1.large"]
}
```

### References
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html

<!--
Hi there,

Thank you for opening an issue. Please note that we try to keep the Terraform issue tracker reserved for bug reports and feature requests. For general usage questions, please see: https://www.terraform.io/community.html.

If your issue relates to a specific Terraform provider, please open it in the provider's own repository. The index of providers is at https://github.com/terraform-providers .
-->
When Using the Terraform habitat provider the supervisor fails to start when using any service. 

### Terraform Version
<!---
Run `terraform -v` to show the version, and paste the result between the ``` marks below.

If you are not running the latest version of Terraform, please try upgrading because your issue may have already been fixed.
-->

```
Terraform v0.12.19
+ provider.aws v2.25.0
+ provider.template v2.1.2
```

### Terraform Configuration Files
<!--
Paste the relevant parts of your Terraform configuration between the ``` marks below.

For large Terraform configs, please use a service like Dropbox and share a link to the ZIP file. For security, you can also encrypt the files using our GPG public key.
-->
Snippit of TF file
```hcl
#
# Data
#
# This retrieves the latest AMI ID for Ubuntu 16.04.
data "aws_ami" "ubuntu1604" {
  # description = "amazon ubuntu 16.04 image"
  most_recent = true
  owners      = ["801119661308"] # amazon windows ownerid
  filter {
    name   = "name"
    values = ["ubuntu-xenial-16.04-amd64-server*"]
  }
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}

data "template_file" "vault_service" {
  template = "${file("${path.module}/templates/vault.service.tpl")}"
}

resource "aws_instance" "vault_server" {
  ami               = data.aws_ami.ubuntu1604.id
  instance_type     = "t2.large"
  key_name          = "key_aws"
  availability_zone = "us-west-2a"
  subnet_id         = "subnet-xxxxxxxx"
  security_groups   = ["sg-07xx78998xxx"]

  tags = {
    Name      = "Hashivault"
  }

  root_block_device {
    delete_on_termination = true
    volume_size           = 50
    volume_type           = "gp2"
  }

  connection {
    host = coalesce(self.public_ip, self.private_ip)
    type = "ssh"
    user = "ubuntu"
    password = file(var.aws_key_pair_file)
  }

  provisioner "habitat" {
    peer           = aws_instance.vault_server.private_ip
    use_sudo       = true
    service_type   = "systemd"
    accept_license = true
    service {
      name     = "core/vault"
      topology = "standalone"
      strategy = "at-once"
      user_toml     = file("conf/vault.toml")
    }
  }
```

### Debug Output
<!--
Full debug output can be obtained by running Terraform with the environment variable `TF_LOG=trace`. Please create a GitHub Gist containing the debug output. Please do _not_ paste the debug output in the issue, since debug output is long.

Debug output may contain sensitive information. Please review it before posting publicly, and if you are concerned feel free to encrypt the files using the HashiCorp security public key.
-->
```
aws_instance.vault_server (habitat): Created symlink from /etc/systemd/system/default.target.wants/hab-supervisor.service to /etc/systemd/system/hab-supervisor.service.
aws_instance.vault_server (habitat): Starting service: core/vault
aws_instance.vault_server (habitat): » Installing core/vault
aws_instance.vault_server (habitat): ☁ Determining latest version of core/vault in the 'stable' channel
aws_instance.vault_server (habitat): ↓ Downloading core/vault/1.2.1/20190809170344
aws_instance.vault_server: Still creating... [1m0s elapsed]
aws_instance.vault_server (habitat): ☛ Verifying core/vault/1.2.1/20190809170344
aws_instance.vault_server (habitat): ✓ Installed core/vault/1.2.1/20190809170344
aws_instance.vault_server (habitat): ★ Install of core/vault/1.2.1/20190809170344 complete with 1 new packages installed.
aws_instance.vault_server (habitat): Uploading user.toml for service: core/vault
aws_instance.vault_server (habitat): ✗✗✗
aws_instance.vault_server (habitat): ✗✗✗ Unable to contact the Supervisor.
aws_instance.vault_server (habitat): ✗✗✗
aws_instance.vault_server (habitat): ✗✗✗ If the Supervisor you are contacting is local, this probably means it is not running. You can run a Supervisor in the foreground with:
aws_instance.vault_server (habitat): ✗✗✗
aws_instance.vault_server (habitat): ✗✗✗ hab sup run
aws_instance.vault_server (habitat): ✗✗✗
aws_instance.vault_server (habitat): ✗✗✗ Or try restarting the Supervisor through your operating system's init process or Windows service.
aws_instance.vault_server (habitat): ✗✗✗


Error: error executing "env HAB_NONINTERACTIVE=true HAB_NOCOLORING=true sudo -E /bin/bash -c 'hab svc load core/vault  --topology standalone --strategy at-once'": Process exited with status 1
```
### Crash Output
<!--
If the console output indicates that Terraform crashed, please share a link to a GitHub Gist containing the output of the `crash.log` file.
-->

### Expected Behavior
<!--
What should have happened?
-->
The service that is being loaded is running and the supervisor service is running.
### Actual Behavior
<!--
What actually happened?
-->
Error apperas saying that hab svc load exited with a staus 1
### Steps to Reproduce
<!--
Please list the full steps required to reproduce the issue, for example:
1. `terraform init`
2. `terraform apply`
-->

### Additional Context
<!--
Are there anything atypical about your situation that we should know? For example: is Terraform running in a wrapper script or in a CI system? Are you passing any unusual command line options or environment variables to opt-in to non-default behavior?
-->
If I log onto the server and run the hab svc manually it starts just fine and I can load any service. 
### References
<!--
Are there any other GitHub issues (open or closed) or Pull Requests that should be linked here? For example:

- #6017

-->

Not a real PR, I'd just like acctests to run 😀 
### Terraform Version
Tested on both 0.12.18 and 0.12.19
```
➜ terraform version
Terraform v0.12.19
```

### Terraform Configuration Files
Can be found on the [sample repo](https://github.com/env0/terraform-destroy-bug) along with the [steps to reproduce](#Steps-to-Reproduce)

### Expected Behavior
Running either: 
```
terraform plan -destroy -out=destroy.tf-plan
...
terraform apply destroy.tf-plan
```
or
```
terraform destroy [-auto-approve]
```
should destroy the resources

### Actual Behavior
Running the latter succeeds in destroying the resources, while the former reports an error:  
```
Error: Cycle: module.cluster.output.host, module.cluster.output.password, module.cluster.output.cluster_ca_certificate, provider.kubernetes, module.kubernetes.kubernetes_storage_class.ssd (destroy), module.cluster.google_container_cluster.cluster (destroy)
```

### Steps to Reproduce
1. Place a `credentials.json` with your google account.
2. Create a project in your google account `env0project` (or set your project as `var.gcp_project`)
3. `➜ terraform init`
    <details><summary>(output)</summary>
    <p>
      
      ```      
    Initializing modules...
    - cluster in modules/cluster
    - kubernetes in modules/kubernetes

    Initializing the backend...

    Initializing provider plugins...
    - Checking for available provider plugins...
    - Downloading plugin for provider "google" (hashicorp/google) 3.3.0...
    - Downloading plugin for provider "google-beta" (terraform-providers/google-beta) 3.3.0...
    - Downloading plugin for provider "kubernetes" (hashicorp/kubernetes) 1.9.0...
    - Downloading plugin for provider "null" (hashicorp/null) 2.1.2...
    - Downloading plugin for provider "random" (hashicorp/random) 2.2.1...
    - Downloading plugin for provider "external" (hashicorp/external) 1.2.0...
    - Downloading plugin for provider "tls" (hashicorp/tls) 2.1.1...

    Terraform has been successfully initialized!
      
      ```
      
  </p>
  </details>
  
4. `➜ terraform apply`

    <details><summary>(output)</summary>
    <p>
      
      ```      
    module.cluster.data.google_container_engine_versions.valid_gke_versions: Refreshing state...

    An execution plan has been generated and is shown below.
    Resource actions are indicated with the following symbols:
    + create

    Terraform will perform the following actions:

    # module.cluster.google_compute_address.gke-outgoing-address[0] will be created
    + resource "google_compute_address" "gke-outgoing-address" {
        + address            = (known after apply)
        + address_type       = "EXTERNAL"
        + creation_timestamp = (known after apply)
        + id                 = (known after apply)
        + name               = "default-gke-outgoing-nat-address-0"
        + network_tier       = (known after apply)
        + project            = (known after apply)
        + purpose            = (known after apply)
        + region             = "us-east1"
        + self_link          = (known after apply)
        + subnetwork         = (known after apply)
        + users              = (known after apply)
        }

    # module.cluster.google_compute_address.gke-outgoing-address[1] will be created
    + resource "google_compute_address" "gke-outgoing-address" {
        + address            = (known after apply)
        + address_type       = "EXTERNAL"
        + creation_timestamp = (known after apply)
        + id                 = (known after apply)
        + name               = "default-gke-outgoing-nat-address-1"
        + network_tier       = (known after apply)
        + project            = (known after apply)
        + purpose            = (known after apply)
        + region             = "us-east1"
        + self_link          = (known after apply)
        + subnetwork         = (known after apply)
        + users              = (known after apply)
        }

    # module.cluster.google_compute_global_address.external-ip will be created
    + resource "google_compute_global_address" "external-ip" {
        + address            = (known after apply)
        + creation_timestamp = (known after apply)
        + id                 = (known after apply)
        + name               = "default-backend-ip"
        + project            = (known after apply)
        + self_link          = (known after apply)
        }

    # module.cluster.google_compute_network.network will be created
    + resource "google_compute_network" "network" {
        + auto_create_subnetworks         = true
        + delete_default_routes_on_create = false
        + gateway_ipv4                    = (known after apply)
        + id                              = (known after apply)
        + ipv4_range                      = (known after apply)
        + name                            = "default-vpc"
        + project                         = (known after apply)
        + routing_mode                    = (known after apply)
        + self_link                       = (known after apply)
        }

    # module.cluster.google_compute_router.gke-outgoing-router will be created
    + resource "google_compute_router" "gke-outgoing-router" {
        + creation_timestamp = (known after apply)
        + id                 = (known after apply)
        + name               = "default-gke-outgoing-router"
        + network            = (known after apply)
        + project            = (known after apply)
        + region             = "us-east1"
        + self_link          = (known after apply)
        }

    # module.cluster.google_compute_router_nat.gke-outgoing-nat will be created
    + resource "google_compute_router_nat" "gke-outgoing-nat" {
        + icmp_idle_timeout_sec              = 30
        + id                                 = (known after apply)
        + min_ports_per_vm                   = 16384
        + name                               = "default-gke-outgoing-nat"
        + nat_ip_allocate_option             = "MANUAL_ONLY"
        + nat_ips                            = (known after apply)
        + project                            = (known after apply)
        + region                             = "us-east1"
        + router                             = "default-gke-outgoing-router"
        + source_subnetwork_ip_ranges_to_nat = "LIST_OF_SUBNETWORKS"
        + tcp_established_idle_timeout_sec   = 1200
        + tcp_transitory_idle_timeout_sec    = 30
        + udp_idle_timeout_sec               = 30

        + log_config {
            + enable = true
            + filter = "ALL"
            }

        + subnetwork {
            + name                     = "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/subnetworks/default-vpc"
            + secondary_ip_range_names = []
            + source_ip_ranges_to_nat  = [
                + "ALL_IP_RANGES",
                ]
            }
        }

    # module.cluster.google_container_cluster.cluster will be created
    + resource "google_container_cluster" "cluster" {
        + cluster_ipv4_cidr           = (known after apply)
        + default_max_pods_per_node   = (known after apply)
        + enable_binary_authorization = (known after apply)
        + enable_kubernetes_alpha     = false
        + enable_legacy_abac          = false
        + enable_tpu                  = (known after apply)
        + endpoint                    = (known after apply)
        + id                          = (known after apply)
        + initial_node_count          = 1
        + instance_group_urls         = (known after apply)
        + location                    = "us-east1-b"
        + logging_service             = "logging.googleapis.com/kubernetes"
        + master_version              = (known after apply)
        + min_master_version          = "1.14.10-gke.0"
        + monitoring_service          = "monitoring.googleapis.com/kubernetes"
        + name                        = "default-cluster"
        + network                     = (known after apply)
        + node_locations              = (known after apply)
        + node_version                = (known after apply)
        + project                     = (known after apply)
        + remove_default_node_pool    = true
        + resource_labels             = {
            + "workspace" = "default"
            }
        + services_ipv4_cidr          = (known after apply)
        + subnetwork                  = (known after apply)

        + addons_config {
            + horizontal_pod_autoscaling {
                + disabled = (known after apply)
                }

            + http_load_balancing {
                + disabled = (known after apply)
                }

            + kubernetes_dashboard {
                + disabled = (known after apply)
                }

            + network_policy_config {
                + disabled = (known after apply)
                }
            }

        + authenticator_groups_config {
            + security_group = (known after apply)
            }

        + cluster_autoscaling {
            + enabled = (known after apply)

            + auto_provisioning_defaults {
                + oauth_scopes    = (known after apply)
                + service_account = (known after apply)
                }

            + resource_limits {
                + maximum       = (known after apply)
                + minimum       = (known after apply)
                + resource_type = (known after apply)
                }
            }

        + ip_allocation_policy {
            + cluster_ipv4_cidr_block       = (known after apply)
            + cluster_secondary_range_name  = (known after apply)
            + create_subnetwork             = (known after apply)
            + node_ipv4_cidr_block          = (known after apply)
            + services_ipv4_cidr_block      = (known after apply)
            + services_secondary_range_name = (known after apply)
            + subnetwork_name               = (known after apply)
            + use_ip_aliases                = (known after apply)
            }

        + master_auth {
            + client_certificate     = (known after apply)
            + client_key             = (sensitive value)
            + cluster_ca_certificate = (known after apply)
            + password               = (sensitive value)
            + username               = "admin"

            + client_certificate_config {
                + issue_client_certificate = false
                }
            }

        + master_authorized_networks_config {
            + cidr_blocks {
                + cidr_block   = "0.0.0.0/0"
                + display_name = "allow-all"
                }
            }

        + network_policy {
            + enabled  = (known after apply)
            + provider = (known after apply)
            }

        + node_config {
            + disk_size_gb      = (known after apply)
            + disk_type         = (known after apply)
            + guest_accelerator = (known after apply)
            + image_type        = (known after apply)
            + labels            = (known after apply)
            + local_ssd_count   = (known after apply)
            + machine_type      = (known after apply)
            + metadata          = (known after apply)
            + min_cpu_platform  = (known after apply)
            + oauth_scopes      = (known after apply)
            + preemptible       = (known after apply)
            + service_account   = (known after apply)
            + tags              = (known after apply)
            + taint             = (known after apply)

            + sandbox_config {
                + sandbox_type = (known after apply)
                }

            + shielded_instance_config {
                + enable_integrity_monitoring = (known after apply)
                + enable_secure_boot          = (known after apply)
                }

            + workload_metadata_config {
                + node_metadata = (known after apply)
                }
            }

        + node_pool {
            + initial_node_count  = (known after apply)
            + instance_group_urls = (known after apply)
            + max_pods_per_node   = (known after apply)
            + name                = (known after apply)
            + name_prefix         = (known after apply)
            + node_count          = (known after apply)
            + version             = (known after apply)

            + autoscaling {
                + max_node_count = (known after apply)
                + min_node_count = (known after apply)
                }

            + management {
                + auto_repair  = (known after apply)
                + auto_upgrade = (known after apply)
                }

            + node_config {
                + disk_size_gb      = (known after apply)
                + disk_type         = (known after apply)
                + guest_accelerator = (known after apply)
                + image_type        = (known after apply)
                + labels            = (known after apply)
                + local_ssd_count   = (known after apply)
                + machine_type      = (known after apply)
                + metadata          = (known after apply)
                + min_cpu_platform  = (known after apply)
                + oauth_scopes      = (known after apply)
                + preemptible       = (known after apply)
                + service_account   = (known after apply)
                + tags              = (known after apply)
                + taint             = (known after apply)

                + sandbox_config {
                    + sandbox_type = (known after apply)
                    }

                + shielded_instance_config {
                    + enable_integrity_monitoring = (known after apply)
                    + enable_secure_boot          = (known after apply)
                    }

                + workload_metadata_config {
                    + node_metadata = (known after apply)
                    }
                }
            }

        + private_cluster_config {
            + enable_private_nodes   = true
            + master_ipv4_cidr_block = "172.16.0.0/28"
            + private_endpoint       = (known after apply)
            + public_endpoint        = (known after apply)
            }
        }

    # module.cluster.google_container_node_pool.node_pool will be created
    + resource "google_container_node_pool" "node_pool" {
        + cluster             = "default-cluster"
        + id                  = (known after apply)
        + initial_node_count  = 1
        + instance_group_urls = (known after apply)
        + location            = (known after apply)
        + max_pods_per_node   = (known after apply)
        + name                = "default-node-pool"
        + name_prefix         = (known after apply)
        + node_count          = (known after apply)
        + project             = (known after apply)
        + version             = "1.14.7-gke.10"

        + autoscaling {
            + max_node_count = 2
            + min_node_count = 1
            }

        + management {
            + auto_repair  = true
            + auto_upgrade = false
            }

        + node_config {
            + disk_size_gb      = (known after apply)
            + disk_type         = (known after apply)
            + guest_accelerator = (known after apply)
            + image_type        = (known after apply)
            + labels            = {
                + "workspace" = "default"
                }
            + local_ssd_count   = (known after apply)
            + machine_type      = "n1-highcpu-8"
            + metadata          = {
                + "disable-legacy-endpoints" = "true"
                }
            + min_cpu_platform  = "Intel Haswell"
            + oauth_scopes      = [
                + "https://www.googleapis.com/auth/compute",
                + "https://www.googleapis.com/auth/devstorage.read_only",
                + "https://www.googleapis.com/auth/logging.write",
                + "https://www.googleapis.com/auth/monitoring",
                ]
            + preemptible       = false
            + service_account   = (known after apply)
            + taint             = (known after apply)

            + shielded_instance_config {
                + enable_integrity_monitoring = (known after apply)
                + enable_secure_boot          = (known after apply)
                }
            }
        }

    # module.cluster.random_string.cluster_password will be created
    + resource "random_string" "cluster_password" {
        + id          = (known after apply)
        + length      = 50
        + lower       = true
        + min_lower   = 0
        + min_numeric = 0
        + min_special = 0
        + min_upper   = 0
        + number      = true
        + result      = (known after apply)
        + special     = true
        + upper       = true
        }

    # module.kubernetes.kubernetes_storage_class.ssd will be created
    + resource "kubernetes_storage_class" "ssd" {
        + allow_volume_expansion = true
        + id                     = (known after apply)
        + parameters             = {
            + "type" = "pd-ssd"
            }
        + reclaim_policy         = "Delete"
        + storage_provisioner    = "kubernetes.io/gce-pd"
        + volume_binding_mode    = "Immediate"

        + metadata {
            + generation       = (known after apply)
            + name             = "ssd"
            + resource_version = (known after apply)
            + self_link        = (known after apply)
            + uid              = (known after apply)
            }
        }

    Plan: 10 to add, 0 to change, 0 to destroy.

    Do you want to perform these actions?
    Terraform will perform the actions described above.
    Only 'yes' will be accepted to approve.

    Enter a value: yes
      
      ```
      
  </p>
  </details>
  
5. `➜ terraform plan -destroy -out=destroy.tf-plan`

    <details><summary>(output)</summary>
    <p>
      
      ```              
    Refreshing Terraform state in-memory prior to plan...
    The refreshed state will be used to calculate this plan, but will not be
    persisted to local or remote state storage.

    module.cluster.random_string.cluster_password: Refreshing state... [id=YJww(=l+yo)-F0BW-(cF{I(-(##MmU8N*U3$zk_f_HCA01}G3?]
    module.cluster.google_compute_global_address.external-ip: Refreshing state... [id=projects/env0project/global/addresses/default-backend-ip]
    module.cluster.google_compute_network.network: Refreshing state... [id=projects/env0project/global/networks/default-vpc]
    module.cluster.data.google_container_engine_versions.valid_gke_versions: Refreshing state...
    module.cluster.google_compute_address.gke-outgoing-address[1]: Refreshing state... [id=projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-1]
    module.cluster.google_compute_address.gke-outgoing-address[0]: Refreshing state... [id=projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-0]
    module.cluster.google_compute_router.gke-outgoing-router: Refreshing state... [id=projects/env0project/regions/us-east1/routers/default-gke-outgoing-router]
    module.cluster.google_container_cluster.cluster: Refreshing state... [id=projects/env0project/locations/us-east1-b/clusters/default-cluster]
    module.cluster.google_compute_router_nat.gke-outgoing-nat: Refreshing state... [id=env0project/us-east1/default-gke-outgoing-router/default-gke-outgoing-nat]
    module.cluster.google_container_node_pool.node_pool: Refreshing state... [id=projects/env0project/locations/us-east1-b/clusters/default-cluster/nodePools/default-node-pool]
    module.kubernetes.kubernetes_storage_class.ssd: Refreshing state... [id=ssd]

    ------------------------------------------------------------------------

    An execution plan has been generated and is shown below.
    Resource actions are indicated with the following symbols:
    - destroy

    Terraform will perform the following actions:

    # module.cluster.google_compute_address.gke-outgoing-address[0] will be destroyed
    - resource "google_compute_address" "gke-outgoing-address" {
        - address            = "35.231.97.206" -> null
        - address_type       = "EXTERNAL" -> null
        - creation_timestamp = "2020-01-16T08:11:18.565-08:00" -> null
        - id                 = "projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-0" -> null
        - name               = "default-gke-outgoing-nat-address-0" -> null
        - network_tier       = "PREMIUM" -> null
        - project            = "env0project" -> null
        - region             = "us-east1" -> null
        - self_link          = "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-0" -> null
        - users              = [
            - "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/routers/default-gke-outgoing-router",
            ] -> null
        }

    # module.cluster.google_compute_address.gke-outgoing-address[1] will be destroyed
    - resource "google_compute_address" "gke-outgoing-address" {
        - address            = "35.237.142.252" -> null
        - address_type       = "EXTERNAL" -> null
        - creation_timestamp = "2020-01-16T08:11:18.685-08:00" -> null
        - id                 = "projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-1" -> null
        - name               = "default-gke-outgoing-nat-address-1" -> null
        - network_tier       = "PREMIUM" -> null
        - project            = "env0project" -> null
        - region             = "us-east1" -> null
        - self_link          = "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-1" -> null
        - users              = [
            - "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/routers/default-gke-outgoing-router",
            ] -> null
        }

    # module.cluster.google_compute_global_address.external-ip will be destroyed
    - resource "google_compute_global_address" "external-ip" {
        - address            = "34.107.146.15" -> null
        - address_type       = "EXTERNAL" -> null
        - creation_timestamp = "2020-01-16T08:11:18.515-08:00" -> null
        - id                 = "projects/env0project/global/addresses/default-backend-ip" -> null
        - name               = "default-backend-ip" -> null
        - prefix_length      = 0 -> null
        - project            = "env0project" -> null
        - self_link          = "https://www.googleapis.com/compute/v1/projects/env0project/global/addresses/default-backend-ip" -> null
        }

    # module.cluster.google_compute_network.network will be destroyed
    - resource "google_compute_network" "network" {
        - auto_create_subnetworks         = true -> null
        - delete_default_routes_on_create = false -> null
        - id                              = "projects/env0project/global/networks/default-vpc" -> null
        - name                            = "default-vpc" -> null
        - project                         = "env0project" -> null
        - routing_mode                    = "REGIONAL" -> null
        - self_link                       = "https://www.googleapis.com/compute/v1/projects/env0project/global/networks/default-vpc" -> null
        }

    # module.cluster.google_compute_router.gke-outgoing-router will be destroyed
    - resource "google_compute_router" "gke-outgoing-router" {
        - creation_timestamp = "2020-01-16T08:12:17.665-08:00" -> null
        - id                 = "projects/env0project/regions/us-east1/routers/default-gke-outgoing-router" -> null
        - name               = "default-gke-outgoing-router" -> null
        - network            = "https://www.googleapis.com/compute/v1/projects/env0project/global/networks/default-vpc" -> null
        - project            = "env0project" -> null
        - region             = "us-east1" -> null
        - self_link          = "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/routers/default-gke-outgoing-router" -> null
        }

    # module.cluster.google_compute_router_nat.gke-outgoing-nat will be destroyed
    - resource "google_compute_router_nat" "gke-outgoing-nat" {
        - icmp_idle_timeout_sec              = 30 -> null
        - id                                 = "env0project/us-east1/default-gke-outgoing-router/default-gke-outgoing-nat" -> null
        - min_ports_per_vm                   = 16384 -> null
        - name                               = "default-gke-outgoing-nat" -> null
        - nat_ip_allocate_option             = "MANUAL_ONLY" -> null
        - nat_ips                            = [
            - "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-0",
            - "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-1",
            ] -> null
        - project                            = "env0project" -> null
        - region                             = "us-east1" -> null
        - router                             = "default-gke-outgoing-router" -> null
        - source_subnetwork_ip_ranges_to_nat = "LIST_OF_SUBNETWORKS" -> null
        - tcp_established_idle_timeout_sec   = 1200 -> null
        - tcp_transitory_idle_timeout_sec    = 30 -> null
        - udp_idle_timeout_sec               = 30 -> null

        - log_config {
            - enable = true -> null
            - filter = "ALL" -> null
            }

        - subnetwork {
            - name                     = "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/subnetworks/default-vpc" -> null
            - secondary_ip_range_names = [] -> null
            - source_ip_ranges_to_nat  = [
                - "ALL_IP_RANGES",
                ] -> null
            }
        }

    # module.cluster.google_container_cluster.cluster will be destroyed
    - resource "google_container_cluster" "cluster" {
        - cluster_ipv4_cidr         = "10.8.0.0/14" -> null
        - default_max_pods_per_node = 110 -> null
        - enable_kubernetes_alpha   = false -> null
        - enable_legacy_abac        = false -> null
        - endpoint                  = "104.196.137.78" -> null
        - id                        = "projects/env0project/locations/us-east1-b/clusters/default-cluster" -> null
        - initial_node_count        = 1 -> null
        - instance_group_urls       = [
            - "https://www.googleapis.com/compute/v1/projects/env0project/zones/us-east1-b/instanceGroups/gke-default-cluster-default-node-pool-c0a170c4-grp",
            ] -> null
        - location                  = "us-east1-b" -> null
        - logging_service           = "logging.googleapis.com/kubernetes" -> null
        - master_version            = "1.14.10-gke.0" -> null
        - min_master_version        = "1.14.10-gke.0" -> null
        - monitoring_service        = "monitoring.googleapis.com/kubernetes" -> null
        - name                      = "default-cluster" -> null
        - network                   = "projects/env0project/global/networks/default-vpc" -> null
        - node_locations            = [] -> null
        - node_version              = "1.14.7-gke.10" -> null
        - project                   = "env0project" -> null
        - remove_default_node_pool  = true -> null
        - resource_labels           = {
            - "workspace" = "default"
            } -> null
        - services_ipv4_cidr        = "10.72.0.0/20" -> null
        - subnetwork                = "projects/env0project/regions/us-east1/subnetworks/default-vpc" -> null

        - addons_config {

            - network_policy_config {
                - disabled = true -> null
                }
            }

        - cluster_autoscaling {
            - enabled = false -> null
            }

        - ip_allocation_policy {
            - cluster_ipv4_cidr_block       = "10.8.0.0/14" -> null
            - cluster_secondary_range_name  = "gke-default-cluster-pods-baaf834f" -> null
            - create_subnetwork             = false -> null
            - services_ipv4_cidr_block      = "10.72.0.0/20" -> null
            - services_secondary_range_name = "gke-default-cluster-services-baaf834f" -> null
            - use_ip_aliases                = false -> null
            }

        - master_auth {
            - cluster_ca_certificate = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURERENDQWZTZ0F3SUJBZ0lSQUpNM1cxNkRpUExKMGZrdXVocUQzQ1l3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa01qSTNZV0prTlRJdFlUWXpaaTAwWW1FeExUa3dZemd0TnpBeE1qZzNObUkwWkRNdwpNQjRYRFRJd01ERXhOakUxTVRJeE9Gb1hEVEkxTURFeE5ERTJNVEl4T0Zvd0x6RXRNQ3NHQTFVRUF4TWtNakkzCllXSmtOVEl0WVRZelppMDBZbUV4TFRrd1l6Z3ROekF4TWpnM05tSTBaRE13TUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeW9wbFQ0dmFpV1NuQXhBRng1NlZ5WXRoTlIvUVZsNVRhNU9sNWdtRQovQmhoRXRuNm1MOXhsMFcxaGJaUlNyK1grZnRzR2FUQmNwRk9iWHNvVmk0TDJJY2hwUStyYVdoZXF1dmpTNS9FCkN5bGU2Qmk2czZ1QXVoeU9wcFByaVNXYlBYa1NDTEx0VHc4aTdMZGZtMHprVnU2djErdGRmdkRPbFNIVVFsVGsKKzNXbHovNmsrcEluaUdNTXFmbFZJUHR3QXJhejRNUGhjcTludUpKMGtsSHo5UlNmMU51TXJYUFhLalo2LzRwNwpuSkNHR3ZydDJ6STRDYWRJQjhCU2I3ZTNsbVNOMU12WEcyQ3M2RUQ3SG55MW1JVHcvTDFSRCtSVDE2S1NrZXo2ClRCQ0VIdjdLekIzNG1sbTRmcUprSVNQbTVyZGZMaS83cDNFd3ZRaVlaLzZkQXdJREFRQUJveU13SVRBT0JnTlYKSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQQpIVW9Qa0NlSlRQcDNXeDJVcGFqU3h5RDFhMk03aXNIVTJPWmVtaDU5M1hTekJOeFVHSEE5MHlSd0kvRE5HTmVMCm1rdlJLb2xRc3p1UkdFR1JmeWkwdWlXYjlmYURTNFlxY3NZbGxJZ3ZOMytpb28rblE0R0FVaXJOYUVxWTZJLzkKcWlQV2J0dVNLQVl1b2Eva0JqSDA4djNUNXM0NHh4SkM2dWhlTzNsRzFZSk9qaVRzM2JwNnVOUllHME0xSktSMQo0MitQcksxOURNVGpidlI0eWI3bklxdkhpQ2xySnF6VUF3V1l3RlNpOUNtNS9VSWxuY0xHeUxtTkttUkVDY1dDCmN6TjRoNTBaTnlneUFiazVuaFpKaGcyRmRWeDdSdksrZ1M5ajQ2U1Q3VjlabjVmMXZOeDVZMkZIVFhnSys3NXoKMDF1VmNlNy9RdkdoU1hmUUlNbS9pZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" -> null
            - password               = (sensitive value)
            - username               = "admin" -> null

            - client_certificate_config {
                - issue_client_certificate = false -> null
                }
            }

        - master_authorized_networks_config {
            - cidr_blocks {
                - cidr_block   = "0.0.0.0/0" -> null
                - display_name = "allow-all" -> null
                }
            }

        - network_policy {
            - enabled  = false -> null
            - provider = "PROVIDER_UNSPECIFIED" -> null
            }

        - node_config {
            - disk_size_gb      = 100 -> null
            - disk_type         = "pd-standard" -> null
            - guest_accelerator = [] -> null
            - image_type        = "COS" -> null
            - labels            = {
                - "workspace" = "default"
                } -> null
            - local_ssd_count   = 0 -> null
            - machine_type      = "n1-highcpu-8" -> null
            - metadata          = {
                - "disable-legacy-endpoints" = "true"
                } -> null
            - min_cpu_platform  = "Intel Haswell" -> null
            - oauth_scopes      = [
                - "https://www.googleapis.com/auth/compute",
                - "https://www.googleapis.com/auth/devstorage.read_only",
                - "https://www.googleapis.com/auth/logging.write",
                - "https://www.googleapis.com/auth/monitoring",
                ] -> null
            - preemptible       = false -> null
            - service_account   = "default" -> null
            - tags              = [] -> null
            - taint             = [] -> null

            - shielded_instance_config {
                - enable_integrity_monitoring = true -> null
                - enable_secure_boot          = false -> null
                }
            }

        - node_pool {
            - initial_node_count  = 1 -> null
            - instance_group_urls = [
                - "https://www.googleapis.com/compute/v1/projects/env0project/zones/us-east1-b/instanceGroupManagers/gke-default-cluster-default-node-pool-c0a170c4-grp",
                ] -> null
            - max_pods_per_node   = 110 -> null
            - name                = "default-node-pool" -> null
            - node_count          = 1 -> null
            - version             = "1.14.7-gke.10" -> null

            - autoscaling {
                - max_node_count = 2 -> null
                - min_node_count = 1 -> null
                }

            - management {
                - auto_repair  = true -> null
                - auto_upgrade = false -> null
                }

            - node_config {
                - disk_size_gb      = 100 -> null
                - disk_type         = "pd-standard" -> null
                - guest_accelerator = [] -> null
                - image_type        = "COS" -> null
                - labels            = {
                    - "workspace" = "default"
                    } -> null
                - local_ssd_count   = 0 -> null
                - machine_type      = "n1-highcpu-8" -> null
                - metadata          = {
                    - "disable-legacy-endpoints" = "true"
                    } -> null
                - min_cpu_platform  = "Intel Haswell" -> null
                - oauth_scopes      = [
                    - "https://www.googleapis.com/auth/compute",
                    - "https://www.googleapis.com/auth/devstorage.read_only",
                    - "https://www.googleapis.com/auth/logging.write",
                    - "https://www.googleapis.com/auth/monitoring",
                    ] -> null
                - preemptible       = false -> null
                - service_account   = "default" -> null
                - tags              = [] -> null
                - taint             = [] -> null

                - shielded_instance_config {
                    - enable_integrity_monitoring = true -> null
                    - enable_secure_boot          = false -> null
                    }
                }
            }

        - private_cluster_config {
            - enable_private_endpoint = false -> null
            - enable_private_nodes    = true -> null
            - master_ipv4_cidr_block  = "172.16.0.0/28" -> null
            - private_endpoint        = "172.16.0.2" -> null
            - public_endpoint         = "104.196.137.78" -> null
            }
        }

    # module.cluster.google_container_node_pool.node_pool will be destroyed
    - resource "google_container_node_pool" "node_pool" {
        - cluster             = "default-cluster" -> null
        - id                  = "projects/env0project/locations/us-east1-b/clusters/default-cluster/nodePools/default-node-pool" -> null
        - initial_node_count  = 1 -> null
        - instance_group_urls = [
            - "https://www.googleapis.com/compute/v1/projects/env0project/zones/us-east1-b/instanceGroupManagers/gke-default-cluster-default-node-pool-c0a170c4-grp",
            ] -> null
        - location            = "us-east1-b" -> null
        - max_pods_per_node   = 110 -> null
        - name                = "default-node-pool" -> null
        - node_count          = 1 -> null
        - project             = "env0project" -> null
        - version             = "1.14.7-gke.10" -> null

        - autoscaling {
            - max_node_count = 2 -> null
            - min_node_count = 1 -> null
            }

        - management {
            - auto_repair  = true -> null
            - auto_upgrade = false -> null
            }

        - node_config {
            - disk_size_gb      = 100 -> null
            - disk_type         = "pd-standard" -> null
            - guest_accelerator = [] -> null
            - image_type        = "COS" -> null
            - labels            = {
                - "workspace" = "default"
                } -> null
            - local_ssd_count   = 0 -> null
            - machine_type      = "n1-highcpu-8" -> null
            - metadata          = {
                - "disable-legacy-endpoints" = "true"
                } -> null
            - min_cpu_platform  = "Intel Haswell" -> null
            - oauth_scopes      = [
                - "https://www.googleapis.com/auth/compute",
                - "https://www.googleapis.com/auth/devstorage.read_only",
                - "https://www.googleapis.com/auth/logging.write",
                - "https://www.googleapis.com/auth/monitoring",
                ] -> null
            - preemptible       = false -> null
            - service_account   = "default" -> null
            - tags              = [] -> null
            - taint             = [] -> null

            - shielded_instance_config {
                - enable_integrity_monitoring = true -> null
                - enable_secure_boot          = false -> null
                }
            }
        }

    # module.cluster.random_string.cluster_password will be destroyed
    - resource "random_string" "cluster_password" {
        - id          = "YJww(=l+yo)-F0BW-(cF{I(-(##MmU8N*U3$zk_f_HCA01}G3?" -> null
        - length      = 50 -> null
        - lower       = true -> null
        - min_lower   = 0 -> null
        - min_numeric = 0 -> null
        - min_special = 0 -> null
        - min_upper   = 0 -> null
        - number      = true -> null
        - result      = "YJww(=l+yo)-F0BW-(cF{I(-(##MmU8N*U3$zk_f_HCA01}G3?" -> null
        - special     = true -> null
        - upper       = true -> null
        }

    # module.kubernetes.kubernetes_storage_class.ssd will be destroyed
    - resource "kubernetes_storage_class" "ssd" {
        - allow_volume_expansion = true -> null
        - id                     = "ssd" -> null
        - parameters             = {
            - "type" = "pd-ssd"
            } -> null
        - reclaim_policy         = "Delete" -> null
        - storage_provisioner    = "kubernetes.io/gce-pd" -> null
        - volume_binding_mode    = "Immediate" -> null

        - metadata {
            - annotations      = {} -> null
            - generation       = 0 -> null
            - labels           = {} -> null
            - name             = "ssd" -> null
            - resource_version = "1353" -> null
            - self_link        = "/apis/storage.k8s.io/v1/storageclasses/ssd" -> null
            - uid              = "1284f3ae-387c-11ea-8da6-4201ac100003" -> null
            }
        }

    Plan: 0 to add, 0 to change, 10 to destroy.

    ------------------------------------------------------------------------

    This plan was saved to: destroy.tf-plan

    To perform exactly these actions, run the following command to apply:
        terraform apply "destroy.tf-plan"
      
      ```
      
  </p>
  </details>
  
6. Trying to apply the plan will fail, claiming there are cycles which aren't clear to me:  
    `➜ terraform apply destroy.tf-plan`
    <details><summary>(output)</summary>
    <p>
      
      ```              
    Error: Cycle: module.cluster.output.host, module.cluster.output.password, module.cluster.output.cluster_ca_certificate, provider.kubernetes, module.kubernetes.kubernetes_storage_class.ssd (destroy), module.cluster.google_container_cluster.cluster (destroy)
      
      ```
      
  </p>
  </details>

  
7. What's worse, trying to destroy rather than applying the destruction plan works:  
    `➜ terraform destroy`
    <details><summary>(output)</summary>
    <p>
      
      ```              
    module.cluster.random_string.cluster_password: Refreshing state... [id=BhsaSh(H#!bnB}-CX6bifs($CIRaEn{Ml]3O+W[P{@c*PVitX2]
    module.cluster.google_compute_network.network: Refreshing state... [id=projects/env0project/global/networks/default-vpc]
    module.cluster.google_compute_address.gke-outgoing-address[0]: Refreshing state... [id=projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-0]
    module.cluster.google_compute_address.gke-outgoing-address[1]: Refreshing state... [id=projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-1]
    module.cluster.data.google_container_engine_versions.valid_gke_versions: Refreshing state...
    module.cluster.google_compute_global_address.external-ip: Refreshing state... [id=projects/env0project/global/addresses/default-backend-ip]
    module.cluster.google_compute_router.gke-outgoing-router: Refreshing state... [id=projects/env0project/regions/us-east1/routers/default-gke-outgoing-router]
    module.cluster.google_container_cluster.cluster: Refreshing state... [id=projects/env0project/locations/us-east1-b/clusters/default-cluster]
    module.cluster.google_compute_router_nat.gke-outgoing-nat: Refreshing state... [id=env0project/us-east1/default-gke-outgoing-router/default-gke-outgoing-nat]
    module.cluster.google_container_node_pool.node_pool: Refreshing state... [id=projects/env0project/locations/us-east1-b/clusters/default-cluster/nodePools/default-node-pool]
    module.kubernetes.kubernetes_storage_class.ssd: Refreshing state... [id=ssd]

    An execution plan has been generated and is shown below.
    Resource actions are indicated with the following symbols:
    - destroy

    Terraform will perform the following actions:

    # module.cluster.google_compute_address.gke-outgoing-address[0] will be destroyed
    - resource "google_compute_address" "gke-outgoing-address" {
        - address            = "35.231.97.206" -> null
        - address_type       = "EXTERNAL" -> null
        - creation_timestamp = "2020-01-16T06:43:11.220-08:00" -> null
        - id                 = "projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-0" -> null
        - name               = "default-gke-outgoing-nat-address-0" -> null
        - network_tier       = "PREMIUM" -> null
        - project            = "env0project" -> null
        - region             = "us-east1" -> null
        - self_link          = "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-0" -> null
        - users              = [
            - "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/routers/default-gke-outgoing-router",
            ] -> null
        }

    # module.cluster.google_compute_address.gke-outgoing-address[1] will be destroyed
    - resource "google_compute_address" "gke-outgoing-address" {
        - address            = "35.237.142.252" -> null
        - address_type       = "EXTERNAL" -> null
        - creation_timestamp = "2020-01-16T06:43:11.339-08:00" -> null
        - id                 = "projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-1" -> null
        - name               = "default-gke-outgoing-nat-address-1" -> null
        - network_tier       = "PREMIUM" -> null
        - project            = "env0project" -> null
        - region             = "us-east1" -> null
        - self_link          = "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-1" -> null
        - users              = [
            - "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/routers/default-gke-outgoing-router",
            ] -> null
        }

    # module.cluster.google_compute_global_address.external-ip will be destroyed
    - resource "google_compute_global_address" "external-ip" {
        - address            = "34.107.146.15" -> null
        - address_type       = "EXTERNAL" -> null
        - creation_timestamp = "2020-01-16T06:43:11.081-08:00" -> null
        - id                 = "projects/env0project/global/addresses/default-backend-ip" -> null
        - name               = "default-backend-ip" -> null
        - prefix_length      = 0 -> null
        - project            = "env0project" -> null
        - self_link          = "https://www.googleapis.com/compute/v1/projects/env0project/global/addresses/default-backend-ip" -> null
        }

    # module.cluster.google_compute_network.network will be destroyed
    - resource "google_compute_network" "network" {
        - auto_create_subnetworks         = true -> null
        - delete_default_routes_on_create = false -> null
        - id                              = "projects/env0project/global/networks/default-vpc" -> null
        - name                            = "default-vpc" -> null
        - project                         = "env0project" -> null
        - routing_mode                    = "REGIONAL" -> null
        - self_link                       = "https://www.googleapis.com/compute/v1/projects/env0project/global/networks/default-vpc" -> null
        }

    # module.cluster.google_compute_router.gke-outgoing-router will be destroyed
    - resource "google_compute_router" "gke-outgoing-router" {
        - creation_timestamp = "2020-01-16T06:43:59.995-08:00" -> null
        - id                 = "projects/env0project/regions/us-east1/routers/default-gke-outgoing-router" -> null
        - name               = "default-gke-outgoing-router" -> null
        - network            = "https://www.googleapis.com/compute/v1/projects/env0project/global/networks/default-vpc" -> null
        - project            = "env0project" -> null
        - region             = "us-east1" -> null
        - self_link          = "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/routers/default-gke-outgoing-router" -> null
        }

    # module.cluster.google_compute_router_nat.gke-outgoing-nat will be destroyed
    - resource "google_compute_router_nat" "gke-outgoing-nat" {
        - icmp_idle_timeout_sec              = 30 -> null
        - id                                 = "env0project/us-east1/default-gke-outgoing-router/default-gke-outgoing-nat" -> null
        - min_ports_per_vm                   = 16384 -> null
        - name                               = "default-gke-outgoing-nat" -> null
        - nat_ip_allocate_option             = "MANUAL_ONLY" -> null
        - nat_ips                            = [
            - "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-0",
            - "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/addresses/default-gke-outgoing-nat-address-1",
            ] -> null
        - project                            = "env0project" -> null
        - region                             = "us-east1" -> null
        - router                             = "default-gke-outgoing-router" -> null
        - source_subnetwork_ip_ranges_to_nat = "LIST_OF_SUBNETWORKS" -> null
        - tcp_established_idle_timeout_sec   = 1200 -> null
        - tcp_transitory_idle_timeout_sec    = 30 -> null
        - udp_idle_timeout_sec               = 30 -> null

        - log_config {
            - enable = true -> null
            - filter = "ALL" -> null
            }

        - subnetwork {
            - name                     = "https://www.googleapis.com/compute/v1/projects/env0project/regions/us-east1/subnetworks/default-vpc" -> null
            - secondary_ip_range_names = [] -> null
            - source_ip_ranges_to_nat  = [
                - "ALL_IP_RANGES",
                ] -> null
            }
        }

    # module.cluster.google_container_cluster.cluster will be destroyed
    - resource "google_container_cluster" "cluster" {
        - cluster_ipv4_cidr         = "10.8.0.0/14" -> null
        - default_max_pods_per_node = 110 -> null
        - enable_kubernetes_alpha   = false -> null
        - enable_legacy_abac        = false -> null
        - endpoint                  = "35.196.124.50" -> null
        - id                        = "projects/env0project/locations/us-east1-b/clusters/default-cluster" -> null
        - initial_node_count        = 1 -> null
        - instance_group_urls       = [
            - "https://www.googleapis.com/compute/v1/projects/env0project/zones/us-east1-b/instanceGroups/gke-default-cluster-default-node-pool-67368eb2-grp",
            ] -> null
        - location                  = "us-east1-b" -> null
        - logging_service           = "logging.googleapis.com/kubernetes" -> null
        - master_version            = "1.14.10-gke.0" -> null
        - min_master_version        = "1.14.10-gke.0" -> null
        - monitoring_service        = "monitoring.googleapis.com/kubernetes" -> null
        - name                      = "default-cluster" -> null
        - network                   = "projects/env0project/global/networks/default-vpc" -> null
        - node_locations            = [] -> null
        - node_version              = "1.14.7-gke.10" -> null
        - project                   = "env0project" -> null
        - remove_default_node_pool  = true -> null
        - resource_labels           = {
            - "workspace" = "default"
            } -> null
        - services_ipv4_cidr        = "10.72.0.0/20" -> null
        - subnetwork                = "projects/env0project/regions/us-east1/subnetworks/default-vpc" -> null

        - addons_config {

            - network_policy_config {
                - disabled = true -> null
                }
            }

        - cluster_autoscaling {
            - enabled = false -> null
            }

        - ip_allocation_policy {
            - cluster_ipv4_cidr_block       = "10.8.0.0/14" -> null
            - cluster_secondary_range_name  = "gke-default-cluster-pods-d72e3347" -> null
            - create_subnetwork             = false -> null
            - services_ipv4_cidr_block      = "10.72.0.0/20" -> null
            - services_secondary_range_name = "gke-default-cluster-services-d72e3347" -> null
            - use_ip_aliases                = false -> null
            }

        - master_auth {
            - cluster_ca_certificate = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDekNDQWZPZ0F3SUJBZ0lRYmlVbUh3WGdsNTJ3ZEsvUjc3cDVVakFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRek5tSmpNR1k1T0MwMll6SmxMVFExWkRVdFlqSTRNeTFsWkRjMFpqRTRaV1psTnpjdwpIaGNOTWpBd01URTJNVE0wTXpVNVdoY05NalV3TVRFME1UUTBNelU1V2pBdk1TMHdLd1lEVlFRREV5UXpObUpqCk1HWTVPQzAyWXpKbExUUTFaRFV0WWpJNE15MWxaRGMwWmpFNFpXWmxOemN3Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNraUpVTlZONmxnNy9HN3Q1R005WjIwd1VzclA0dXc4eGxleWlXTXdhKwpCUFdjWVFKNlVyQW1KeXlWVXZlZVBkZlY5Tk5KMkd2Q0FiUEVucG9KK1cvbGpGcEhyUXBtdnhQVU9Ta1hrNVdXCnZYcTZJblA1aWN5Nkd0VEVPbFdjYkdhdkhuTVZVTnJoVCtya1l6RHNFV1lhcEh5a002eFRzbnZMbFhZekZQVGUKS3hWanArZHVZN3RtQ2NaOXVqbTFRalFKdTdXTzdxTVViaUJXWWtPcTRRUWhoLzJ0NUQzNGxpTjRPZEhsVSszTwpSY1JPM2wyOXprQ0VVT1JwV1NLcTYzMERHM2twbkx5dThiaW4rNVhtUW0wbHo4MDdKRGJSbUFEUXNtMlpvSy8xCmxyS0lwQkVSMVZDTzd3aS9NQW5QWGFsZDB0R0o0MS9HdVBBTDM1Um4zTFJCQWdNQkFBR2pJekFoTUE0R0ExVWQKRHdFQi93UUVBd0lDQkRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCcQpoRTNyTW1SL2NER1YrWUVYeGs3MlY5N0VKdlUyaVVVNFZaVGhVM0J5MVZPVEY4UXdKSldkd09JZE55UklJVStaCm9VMHpocm93L0I2RnI5NG4zc3c5RDlFZld0dkp0WHhVY2JvaWhGLzRqdzJ6YlNleERsMU5HeU5RL0YvaFd4YzcKd1Vzc1JrVzNqbmg0UkpOS0YzTk1FcnhmVjg5MEVkZEFyTWFxTUJXVHFTcVVuMFFNQXB3OG1qNTVWSHhMVC9YSApyMHhETy8yYytXa0FIbk82bi81QWdRN1NwNUloYUxpdmlsdG9yMEprUnVoalNPL2o3ZHR5R2Zqb3hQbDlmamNWCksxQ2gxV3RIU3IxazB4djB1ZzAzUTVoNTUwdCtpNFU1aTJMRFhhYjlZMHdQOC80SEYwVVlldFVYWkNpems3WGcKbS93VnU0SG9idHc3dE16VDdOVnQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=" -> null
            - password               = (sensitive value)
            - username               = "admin" -> null

            - client_certificate_config {
                - issue_client_certificate = false -> null
                }
            }

        - master_authorized_networks_config {
            - cidr_blocks {
                - cidr_block   = "0.0.0.0/0" -> null
                - display_name = "allow-all" -> null
                }
            }

        - network_policy {
            - enabled  = false -> null
            - provider = "PROVIDER_UNSPECIFIED" -> null
            }

        - node_config {
            - disk_size_gb      = 100 -> null
            - disk_type         = "pd-standard" -> null
            - guest_accelerator = [] -> null
            - image_type        = "COS" -> null
            - labels            = {
                - "workspace" = "default"
                } -> null
            - local_ssd_count   = 0 -> null
            - machine_type      = "n1-highcpu-8" -> null
            - metadata          = {
                - "disable-legacy-endpoints" = "true"
                } -> null
            - min_cpu_platform  = "Intel Haswell" -> null
            - oauth_scopes      = [
                - "https://www.googleapis.com/auth/compute",
                - "https://www.googleapis.com/auth/devstorage.read_only",
                - "https://www.googleapis.com/auth/logging.write",
                - "https://www.googleapis.com/auth/monitoring",
                ] -> null
            - preemptible       = false -> null
            - service_account   = "default" -> null
            - tags              = [] -> null
            - taint             = [] -> null

            - shielded_instance_config {
                - enable_integrity_monitoring = true -> null
                - enable_secure_boot          = false -> null
                }
            }

        - node_pool {
            - initial_node_count  = 1 -> null
            - instance_group_urls = [
                - "https://www.googleapis.com/compute/v1/projects/env0project/zones/us-east1-b/instanceGroupManagers/gke-default-cluster-default-node-pool-67368eb2-grp",
                ] -> null
            - max_pods_per_node   = 110 -> null
            - name                = "default-node-pool" -> null
            - node_count          = 1 -> null
            - version             = "1.14.7-gke.10" -> null

            - autoscaling {
                - max_node_count = 2 -> null
                - min_node_count = 1 -> null
                }

            - management {
                - auto_repair  = true -> null
                - auto_upgrade = false -> null
                }

            - node_config {
                - disk_size_gb      = 100 -> null
                - disk_type         = "pd-standard" -> null
                - guest_accelerator = [] -> null
                - image_type        = "COS" -> null
                - labels            = {
                    - "workspace" = "default"
                    } -> null
                - local_ssd_count   = 0 -> null
                - machine_type      = "n1-highcpu-8" -> null
                - metadata          = {
                    - "disable-legacy-endpoints" = "true"
                    } -> null
                - min_cpu_platform  = "Intel Haswell" -> null
                - oauth_scopes      = [
                    - "https://www.googleapis.com/auth/compute",
                    - "https://www.googleapis.com/auth/devstorage.read_only",
                    - "https://www.googleapis.com/auth/logging.write",
                    - "https://www.googleapis.com/auth/monitoring",
                    ] -> null
                - preemptible       = false -> null
                - service_account   = "default" -> null
                - tags              = [] -> null
                - taint             = [] -> null

                - shielded_instance_config {
                    - enable_integrity_monitoring = true -> null
                    - enable_secure_boot          = false -> null
                    }
                }
            }

        - private_cluster_config {
            - enable_private_endpoint = false -> null
            - enable_private_nodes    = true -> null
            - master_ipv4_cidr_block  = "172.16.0.0/28" -> null
            - private_endpoint        = "172.16.0.2" -> null
            - public_endpoint         = "35.196.124.50" -> null
            }
        }

    # module.cluster.google_container_node_pool.node_pool will be destroyed
    - resource "google_container_node_pool" "node_pool" {
        - cluster             = "default-cluster" -> null
        - id                  = "projects/env0project/locations/us-east1-b/clusters/default-cluster/nodePools/default-node-pool" -> null
        - initial_node_count  = 1 -> null
        - instance_group_urls = [
            - "https://www.googleapis.com/compute/v1/projects/env0project/zones/us-east1-b/instanceGroupManagers/gke-default-cluster-default-node-pool-67368eb2-grp",
            ] -> null
        - location            = "us-east1-b" -> null
        - max_pods_per_node   = 110 -> null
        - name                = "default-node-pool" -> null
        - node_count          = 1 -> null
        - project             = "env0project" -> null
        - version             = "1.14.7-gke.10" -> null

        - autoscaling {
            - max_node_count = 2 -> null
            - min_node_count = 1 -> null
            }

        - management {
            - auto_repair  = true -> null
            - auto_upgrade = false -> null
            }

        - node_config {
            - disk_size_gb      = 100 -> null
            - disk_type         = "pd-standard" -> null
            - guest_accelerator = [] -> null
            - image_type        = "COS" -> null
            - labels            = {
                - "workspace" = "default"
                } -> null
            - local_ssd_count   = 0 -> null
            - machine_type      = "n1-highcpu-8" -> null
            - metadata          = {
                - "disable-legacy-endpoints" = "true"
                } -> null
            - min_cpu_platform  = "Intel Haswell" -> null
            - oauth_scopes      = [
                - "https://www.googleapis.com/auth/compute",
                - "https://www.googleapis.com/auth/devstorage.read_only",
                - "https://www.googleapis.com/auth/logging.write",
                - "https://www.googleapis.com/auth/monitoring",
                ] -> null
            - preemptible       = false -> null
            - service_account   = "default" -> null
            - tags              = [] -> null
            - taint             = [] -> null

            - shielded_instance_config {
                - enable_integrity_monitoring = true -> null
                - enable_secure_boot          = false -> null
                }
            }
        }

    # module.cluster.random_string.cluster_password will be destroyed
    - resource "random_string" "cluster_password" {
        - id          = "BhsaSh(H#!bnB}-CX6bifs($CIRaEn{Ml]3O+W[P{@c*PVitX2" -> null
        - length      = 50 -> null
        - lower       = true -> null
        - min_lower   = 0 -> null
        - min_numeric = 0 -> null
        - min_special = 0 -> null
        - min_upper   = 0 -> null
        - number      = true -> null
        - result      = "BhsaSh(H#!bnB}-CX6bifs($CIRaEn{Ml]3O+W[P{@c*PVitX2" -> null
        - special     = true -> null
        - upper       = true -> null
        }

    # module.kubernetes.kubernetes_storage_class.ssd will be destroyed
    - resource "kubernetes_storage_class" "ssd" {
        - allow_volume_expansion = true -> null
        - id                     = "ssd" -> null
        - parameters             = {
            - "type" = "pd-ssd"
            } -> null
        - reclaim_policy         = "Delete" -> null
        - storage_provisioner    = "kubernetes.io/gce-pd" -> null
        - volume_binding_mode    = "Immediate" -> null

        - metadata {
            - annotations      = {} -> null
            - generation       = 0 -> null
            - labels           = {} -> null
            - name             = "ssd" -> null
            - resource_version = "894" -> null
            - self_link        = "/apis/storage.k8s.io/v1/storageclasses/ssd" -> null
            - uid              = "6cc51038-386f-11ea-9648-4201ac100003" -> null
            }
        }

    Plan: 0 to add, 0 to change, 10 to destroy.

    Do you really want to destroy all resources?
    Terraform will destroy all your managed infrastructure, as shown above.
    There is no undo. Only 'yes' will be accepted to confirm.

    Enter a value: yes

    ...

    Destroy complete! Resources: 10 destroyed.
      
      ```
      
  </p>
  </details>

currently it's not possible to have backend per workspace.

for example workspace "bar" to have bucket "terraform-bar" and "beer" to have bucket "terraform-beer"

both workspaces live in the same bucket, effectively granting user access to all workspaces.

this is due to `.terraform/terraform.tfstate` not supporting workspaces.

proposed solution: use `.terraform/<workspacename>.tfstate` when workspace configured.

We use separate TF data directories and TFVARS files to separate environments. Everything works lovely except for `terraform state show`.

### Terraform Version

`v0.12.19`

### Terraform Configuration Files

```hcl
module "app1" {
  source      = "../../modules/rps_services/app1"
  environment = var.env
  vpc_id      = data.terraform_remote_state.region_state.outputs.vpc_id
}

```

### Debug Output

If you want, I'm happy to provide but I think it's an issue with the `Source` in `terraform/apps/app1/.terraform/eu01/stg01/modules/modules.json`

### Expected Behavior

To show the resource from the state without error

### Actual Behavior

`Error: Module not installed`

### Steps to Reproduce


Run init:

```
$ TF_DATA_DIR="terraform/apps/app1/.terraform/eu01/stg01" terraform init terraform/apps/app1
```

List state:

```
$ cd terraform/apps/app1
$ TF_DATA_DIR=".terraform/eu01/stg01" terraform state list
data.terraform_remote_state.region_state
module.restaurant_monitor.aws_s3_bucket.s3_bucket_rm
```

Try to show a resource:

```
$ cd terraform/apps/app1
$ TF_DATA_DIR=".terraform/eu01/stg01" terraform state show module.app1.aws_s3_bucket.s3_bucket_rm

Error: Module not installed

  on /Users/max.williams/git/dh/rps-system-engineering/terraform/apps/app1/main.tf line 1:
   1: module "app1" {

This module's local cache directory
terraform/modules/rps_services/app1 could not be read. Run
"terraform init" to install all modules required by this configuration.
```

But plan, apply etc works:

```
TF_DATA_DIR="terraform/apps/app1/.terraform/eu01/stg01" terraform plan terraform/apps/app1
```

We have a few `-backend-config` options but I've omitted them for simplicity.
I upgraded from 0.12.18 to 0.12.19 yesterday and found a major bug. I've rolled back and it's working fine again. Sorry I don't know Go or have the time or I'd try to track down the issue and just PR. Good Luck!

### Terraform Version
<!---
Run `terraform -v` to show the version, and paste the result between the ``` marks below.

If you are not running the latest version of Terraform, please try upgrading because your issue may have already been fixed.
-->

```
Environment
* macOS 10.15.2
* Homebrew 2.2.3
* Terraform 0.12.19
```

### Terraform Configuration Files
<!--
Paste the relevant parts of your Terraform configuration between the ``` marks below.

For large Terraform configs, please use a service like Dropbox and share a link to the ZIP file. For security, you can also encrypt the files using our GPG public key.
-->

```hcl
provider "aws" {
  region = "eu-west-1"
}

data "aws_security_group" "default" {
  name   = "default"
  vpc_id = module.vpc.vpc_id
}

module "vpc" {
  source = "terraform-aws-modules/vpc/aws"

  name = "simple-example"

  cidr = "10.0.0.0/16"

  azs             = ["eu-west-1a", "eu-west-1b", "eu-west-1c"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24", "10.0.103.0/24"]

  enable_ipv6 = true

  enable_nat_gateway = true
  single_nat_gateway = true

  public_subnet_tags = {
    Name = "overridden-name-public"
  }

  tags = {
    Owner       = "user"
    Environment = "dev"
  }

  vpc_tags = {
    Name = "vpc-name"
  }
}
```

### Debug Output
```
Initializing modules...
- vpc in ../..

Initializing the backend...

Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider "aws" (hashicorp/aws) 2.44.0...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.aws: version = "~> 2.44"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
levon@Blackhawk /Users/levon/Development/community_projects/terraform-aws-modules/terraform-aws-vpc/examples/simple-vpc:
# ls
README.md  main.tf    outputs.tf
levon@Blackhawk /Users/levon/Development/community_projects/terraform-aws-modules/terraform-aws-vpc/examples/simple-vpc:
# vim main.tf
levon@Blackhawk /Users/levon/Development/community_projects/terraform-aws-modules/terraform-aws-vpc/examples/simple-vpc:
# tfi
Initializing modules...
Downloading terraform-aws-modules/vpc/aws 2.21.0 for vpc...

Error: Failed to download module

Could not download module "vpc" (main.tf:10) source code from
"https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0//*?archive=tar.gz":
Get
https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0:
x509: certificate signed by unknown authority.


Error: Failed to download module

Could not download module "vpc" (main.tf:10) source code from
"https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0//*?archive=tar.gz":
Get
https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0:
x509: certificate signed by unknown authority.

levon@Blackhawk /Users/levon/Development/community_projects/terraform-aws-modules/terraform-aws-vpc/examples/simple-vpc:
# TF_LOG=trace tfi
2020/01/15 09:44:02 [INFO] Terraform version: 0.12.19
2020/01/15 09:44:02 [INFO] Go runtime version: go1.13.5
2020/01/15 09:44:02 [INFO] CLI args: []string{"/usr/local/bin/terraform", "init"}
2020/01/15 09:44:02 [DEBUG] Attempting to open CLI config file: /Users/levon/.terraformrc
2020/01/15 09:44:02 [DEBUG] File doesn't exist, but doesn't need to. Ignoring.
2020/01/15 09:44:02 [INFO] CLI command args: []string{"init"}
2020/01/15 09:44:02 [TRACE] ModuleInstaller: installing child modules for . into .terraform/modules
Initializing modules...
2020/01/15 09:44:02 [DEBUG] Module installer: begin vpc
2020/01/15 09:44:02 [TRACE] ModuleInstaller: vpc is not yet installed
2020/01/15 09:44:02 [TRACE] ModuleInstaller: cleaning directory .terraform/modules/vpc prior to install of vpc
2020/01/15 09:44:02 [TRACE] ModuleInstaller: vpc is a registry module at terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] vpc listing available versions of terraform-aws-modules/vpc/aws at registry.terraform.io
2020/01/15 09:44:02 [DEBUG] Service discovery for registry.terraform.io at https://registry.terraform.io/.well-known/terraform.json
2020/01/15 09:44:02 [TRACE] HTTP client GET request to https://registry.terraform.io/.well-known/terraform.json
2020/01/15 09:44:02 [DEBUG] fetching module versions from "https://registry.terraform.io/v1/modules/terraform-aws-modules/vpc/aws/versions"
2020/01/15 09:44:02 [TRACE] HTTP client GET request to https://registry.terraform.io/v1/modules/terraform-aws-modules/vpc/aws/versions
2020/01/15 09:44:02 [DEBUG] found available version "1.0.2" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.8.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.16.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.47.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.54.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.43.1" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.42.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.4.1" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.0.3" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.10.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.8.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.29.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.24.0-pre" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.43.2" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.39.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.20.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.9.1" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.41.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.63.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.0.4" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.18.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.5.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.38.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.45.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.35.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.34.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.6.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.19.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.17.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.4.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.48.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.14.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.69.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.21.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.22.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.1.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.43.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.67.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.3.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.52.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.25.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.9.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.70.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.2.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.16.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.57.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.64.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.46.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.14.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.4.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.13.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.28.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.33.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.61.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.10.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.20.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.11.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.31.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.36.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.58.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.3.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.1.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.21.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.12.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.26.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.19.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.53.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.59.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.62.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.71.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.32.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.0.1" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.13.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.15.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.18.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.12.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.27.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.11.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.68.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.60.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.5.1" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.6.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.65.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.51.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.40.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.72.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.30.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.56.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.7.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.17.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.0.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.23.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.9.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.7.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.22.1" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.37.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.66.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.49.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.5.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.2.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.0.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.50.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.44.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "1.55.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [DEBUG] found available version "2.15.0" for terraform-aws-modules/vpc/aws
2020/01/15 09:44:02 [TRACE] ModuleInstaller: vpc ignoring 1.24.0-pre because it is a pre-release and was not requested exactly
2020/01/15 09:44:02 [DEBUG] looking up module location from "https://registry.terraform.io/v1/modules/terraform-aws-modules/vpc/aws/2.21.0/download"
2020/01/15 09:44:02 [TRACE] HTTP client GET request to https://registry.terraform.io/v1/modules/terraform-aws-modules/vpc/aws/2.21.0/download
Downloading terraform-aws-modules/vpc/aws 2.21.0 for vpc...
2020/01/15 09:44:02 [TRACE] ModuleInstaller: vpc terraform-aws-modules/vpc/aws 2.21.0 is available at "https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0//*?archive=tar.gz"
2020/01/15 09:44:02 [DEBUG] will download "https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0?archive=tar.gz" to .terraform/modules/vpc
2020/01/15 09:44:02 [TRACE] fetching "https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0?archive=tar.gz" to ".terraform/modules/vpc"
2020/01/15 09:44:02 [TRACE] modsdir: writing modules manifest to .terraform/modules/modules.json

Error: Failed to download module

Could not download module "vpc" (main.tf:10) source code from
"https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0//*?archive=tar.gz":
Get
https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0:
x509: certificate signed by unknown authority.


Error: Failed to download module

Could not download module "vpc" (main.tf:10) source code from
"https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0//*?archive=tar.gz":
Get
https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0:
x509: certificate signed by unknown authority.
```

### Crash Output
<!--
If the console output indicates that Terraform crashed, please share a link to a GitHub Gist containing the output of the `crash.log` file.
-->

### Expected Behavior
Download/Upgrade modules from github.com

### Actual Behavior
Certificate error when attempting to download. 
```
Error: Failed to download module

Could not download module "vpc" (modules/vpc/main.tf:14) source code from
"https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0//*?archive=tar.gz":
Get
https://api.github.com/repos/terraform-aws-modules/terraform-aws-vpc/tarball/v2.21.0:
x509: certificate signed by unknown authority.
```

### Steps to Reproduce
1. Install Homebrew
1. ```brew install terraform@0.12.19```
1. grab example
    1. ```git clone https://github.com/terraform-aws-modules/terraform-aws-vpc.git```
1. ```cd terraform-aws-vpc/examples/simple-vpc/```
1. Change line 11 source to url path
    1. from ```source = "../../"``` to ```source = "terraform-aws-modules/vpc/aws"```
1. ```terraform init```

### Additional Context
<!--
Are there anything atypical about your situation that we should know? For example: is Terraform running in a wrapper script or in a CI system? Are you passing any unusual command line options or environment variables to opt-in to non-default behavior?
-->
Good Luck!

### References
<!--
Are there any other GitHub issues (open or closed) or Pull Requests that should be linked here? For example:

- #6017

-->
