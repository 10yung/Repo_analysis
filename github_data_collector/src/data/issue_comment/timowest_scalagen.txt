How to make a complete conversion from Scala to java?
**Java Code:**
```
private final static Map<String, String> props = new LinkedHashMap<String, String>();

final Set<String> propSet = props.keySet(); 
StringBuilder newString = new StringBuilder(); 

for (String prop : propSet) { 
    if (newString.length() > 0) { 
        newString.append("|"); 
    } 
    newString.append(prop); 
} 
```

On converting this code to scala, get an error on the line,
**Scala Code**
```
...
for (prop <- propSet) {
...
```
saying `foreach does not exist for the class java.util.Set[String]`. Had to convert it to Scala set using `asScalaSet(propSet)` as mentioned in https://alvinalexander.com/scala/how-to-go-from-java-collections-convert-in-scala-interact. 

Being new to Scala not sure if this is actually a bug to be reported here
I'm getting the following error trying to use the [scalagen_2.10.1](https://github.com/timowest/scalagen/blob/0_3_2/scalagen/pom.xml) module via gradle. When I add this dependency I see this error:

```
org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.MetaDataParseException:
inconsistent module metadata found. 
Descriptor: com.mysema.scalagen:scalagen_2.9.3:0.3.2 
Errors: bad module name: expected='scalagen_2.10.1' found='scalagen_2.9.3'
```

I think the problem here is the way the scalagen module users a property, defined by its own profiles to define the artifactid. So the artifact is resolved, but the `scala-2.9.x` profile defined in that same pom.xml and set as active by default then changes the id of the artifact itself. So you load `scalagen_2.10.1` and it's contents changes it's own artifactid to `scalagen_2.9.3`.

I've tried various techniques, including:

* seting `scala.version` explicitly in my own pom.xml;
* disabling the `scala-2.9.x` profile
* setting the `scala-2.10.x` profile active by default in my own pom.xml 

but no matter what I try I get the same error. I don't believe it's possible to use this module without someone having to set `-Pscala-2.10.x` on all builds.

So I'm planning to fork this library and modify the artifactid to remove this property. I'll package a modified version of this library as a module of my own project, and .
The latest version is much more stable and has support for Java 9.

https://github.com/javaparser/javaparser/
/cc @timowest @nightscape

hello. I'm currently working on Scala-Native and we have a lot of java code to port from java to scala. I would like to spend some time rebooting this project if there is an interest.
Hi @timowest,

I've dug much deeper than I initially planned and made quite some changes to scalagen, but I hope they pay off:

- I replaced the Maven build by an SBT one which gives much nicer compilation speed and other goodies and is the de facto standard for most Scala projects.
- I transformed the statefull `ScalaDumpVisitor` into a stateless `ScalaStringVisitor` which instead of modifying a local `SourcePrinter` returns `String`s in all `visit` methods.
- Formatting is now handled by [Scalafmt](https://github.com/olafurpg/scalafmt) which gives much more flexibility on how to format code and reduces the complexity of scalagen a little.
- The Java parser library is updated to a version that supports Java 8 and the corresponding `visit` methods implemented, so we should be able to transform Java 8 code (most likely there's some bugs in there, which we can fix as we discover them)
- Comments are copied as good as possible. There's still some edge cases where they can get lost, especially when multiple comments occur in a row.

It would be great if you could have a look at this so we can start discussing on how to integrate and release this. If I have time, I'll publish a build on Bintray so that people can already start trying this out and finding bugs :wink: 

Phew, that was a journey! :smile: 
MIN_VALUE/MinValue should be good candidates for a translation too.
original code:
`private BigMoney with(BigDecimal newAmount) {`

generated:
`  private def with(newAmount: BigDecimal): BigMoney = {`

should be:
`  private def `with`(newAmount: BigDecimal): BigMoney = {`
original code:
`assert currency != null : "Joda-Money bug: Currency must not be null";`

generated code:
`    assert(currency != null) : "Joda-Money bug: Currency must not be null"`

it's definitely a slightly-obscure java code...just reporting it as an issue for tracking
`byte[][] capabilities = new byte[this.capabilities.size()][];`

was converted to:

`val capabilities = new Array.ofDim[ByteByte,](this.capabilities.size)`

which does not compile
