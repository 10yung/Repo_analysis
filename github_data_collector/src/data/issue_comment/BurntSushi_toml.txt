Usually, a time.Duration in string format decode to a struct, we must do more things:

First, create time.Duration parse struct:

```go
import (
	"time"
)

type Duration struct {
	time.Duration
}

func (d *Duration) UnmarshalText(text []byte) error {
	var err error
	d.Duration, err = time.ParseDuration(string(text))
	return err
}
```
Then change config struct field for time.Duration. `time.Duration => my.Duration`.

This will cause we must pre process config field for adapt some third library.

So create this merge request for parse time.Duration in string format. And then we don't need to create personal Duration.
Hey,guys,I just changed the project to support go module,wish you can merge it to the master,thank you~
When encoding a map that was previously decoded from JSON using [`UseNumber`](https://golang.org/pkg/encoding/json/#Decoder.UseNumber), the TOML encoder marshals integers and floats to string (see https://github.com/helm/helm/issues/6539 and https://play.golang.org/p/afaXYox7qBP).

For some reason the [YAML encoder](https://github.com/ghodss/yaml) used by Helm is not facing the same issue, but I couldn't find any kind of special treatment for `json.Number`.

I'm not a Go programmer, but I think we could deal with such case with something like that:

```
func convertJSONNumber(n json.Number) (interface{}, error) {
	i, err1 := n.Int64()
	if err1 != nil {
		f, err2 := n.Float64()
		if err2 != nil {
			return 0, errors.New(fmt.Sprintf("Unable to convert %s to neither int64 nor float64", n))
		}
		return f, nil
	}
	return i, nil
}
```

See: https://play.golang.org/p/YiE1vIlNRd6
Seems to fix #250 
I'm having a problem round-tripping a structure containing nested anonymous structs.

https://play.golang.org/p/uMig0i_5GmK

```
package main

import (
	"bytes"
	"fmt"
	"log"

	"github.com/BurntSushi/toml"
)

type (
	A struct {
		A string
	}

	B struct {
		B string
	}

	C struct {
		C string
	}

	BC struct {
		B
		C
	}

	Foo struct {
		A
		BC
	}
)

func main() {
	foo := &Foo{
		A: A{
			A: "a",
		},
		BC: BC{
			B: B{
				B: "b",
			},
			C: C{
				C: "c",
			},
		},
	}

	buf := new(bytes.Buffer)
	if err := toml.NewEncoder(buf).Encode(foo); err != nil {
		log.Fatal(err)
	}

	fmt.Println(buf.String())

	var blob = `
A = "aa"
B = "bb"
C = "cc"
`

	foo2 := &Foo{}
	md, err := toml.Decode(blob, foo2)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("%+v\n", foo2)
	fmt.Println("undecoded:", md.Undecoded())
}
```

This program outputs:

```
A = "a"
A = "a"

[B]
  B = "b"

&{A:{A:aa} BC:{B:{B:bb} C:{C:cc}}}
undecoded: []
```

The TOML duplicates field `A`, does not treat `B` as a top-level field and is missing field `C` altogether. I would have expected the output of `Encode` to look like:

```
A = "a"
B = "b"
C = "c"
```

In the latter part of the example code, you can see that the `blob` variable decodes as expected.

Am I doing something wrong?
I've encountered an issue where I had a configuration file like this:
```toml
default_display = ":0"
loop = false
slideshow_delay = 10
force_resolution = "800x480"
```

and a struct like this:
```go
type Cfg struct {
	Loop            bool      `toml:"loop"`
	SlideShowDelay  int       `toml:"slideshow_delay"`
	ForceResolution string    `toml:"force_resolution"`
}
```

and after parsing, Cfg.Loop would always be true, even if in the configuration file it was set to false. I fixed the issue by renaming it from "loop" to "img_loop", and now they look like this:
```toml
default_display = ":0"
img_loop = false
slideshow_delay = 10
force_resolution = "800x480"
```
```go
type Cfg struct {
	Loop            bool      `toml:"img_loop"`
	SlideShowDelay  int       `toml:"slideshow_delay"`
	ForceResolution string    `toml:"force_resolution"`
}
```
Could potentially also just copy here.
Using the following input:
``` toml
date = 2019-10-10t11:12:13z
```
I get the error:
Error decoding TOML: Near line 1 (last key parsed ''): expected a top-level item to end with a newline, comment, or EOF, but got 't' instead                                                

The expected output is something like:
``` json
{
   "date" : {
      "type" : "datetime",
      "value" : "2019-10-10T11:12:13Z"
   }
}
```

According to RFC 3339 and the toml ABNF, the "T" and "Z" part of a date/time value are case insensitive and can therefore be lower case characters.

Hey, this small change would increase the debugability on errors during decoding. Now we would have a small hint which value causes the actual issue. WDYT?
Fixes #243