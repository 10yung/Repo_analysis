In the case where _NET_NUMBER_OF_DESKTOPS > |_NET_DESKTOP_NAMES|
the last branch of the get_desktop_names method would return a vector
with _NET_NUMBER_OF_DESKTOPS + 1 elements because we iterate until
_NET_NUMBER_OF_DESKTOPS + 1.

Fixes #1983
## Describe the issue

The xworkspaces module will show one desktop/workspace too many when the window manager does not provide workspace names (such as 2bwm).

**Expected behavior:**

The number of workspaces displayed should be equal to the actual number of workspaces.

**Actual behavior:**

When no names are provided the number of names is smaller than the number of workspaces.
This results in the names vector being filled with n+1 values even though there are only n workspaces thus adding one name too many.
https://github.com/polybar/polybar/blob/d93a50836dd45287a463235666b5573f2e5c20f6/src/modules/xworkspaces.cpp#L234-L247

The +1 would need to be removed.

**Was it working before?**
No, this bug existed since the xworkspaces module was merged.

## To Reproduce
*A minimal but complete config with which the problem occurs:*
```dosini
[bar/example]
center = ewmh
[module/ewmh]
type = internal/xworkspaces
pin-workspaces = false
```
A window manager that doesn't set workspace names such as 2bwm is necessary.
Default 2bwm will have 10 workspaces so the bar will display 11 instead.

## Polybar Log
No relevant logs since no crashes etc occur.

## Environment:
* WM: 2bwm
* Distro: Arch 
* `polybar -vvv`:
```
polybar 3.4.0-57-g2cbbc86

Features: +alsa +curl +i3 +mpd +network(libnl) +pulseaudio +xkeyboard

X extensions: +randr (+monitors) +composite +xkb +xrm +xcursor

Build type: Release
Compiler: /usr/bin/c++
Compiler flags: -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt -Wall -Wextra -Wpedantic -O3 -DNDEBUG
Linker flags: -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now 
```

## Describe the issue
When running a script module that updates its contents extremely fast, the formatting string passed to the parser (`polybar -s`) can get corrupted. In particular the formatting string is missing characters and contains unexpected characters (control characters etc).

This was first discovered by [u/runningnak3d](https://www.reddit.com/user/runningnak3d/) on reddit [here](https://www.reddit.com/r/unixporn/comments/egsdro/oc_polybar_vu_meters/fcfpabk) and [here](https://www.reddit.com/r/Polybar/comments/eh7434/polybar_vu_meters/).

**Was it working before?**
* Did you also experience this bug in an earlier version of polybar?
I also tested this with polybar `3.0.0` and was still able to trigger this bug. This has likely been here from the start.

## To Reproduce
```dosini
[bar/example]
modules-left = script

[module/script]
type = custom/script
exec = /tmp/x.sh
tail = true

; vim:set ft=dosini:
```
`/tmp/x.sh`:
```bash
#!/usr/bin/env bash

bars=(
    "=========================================================="
    "==========================================================="
    "============================================================"
    "============================================================="
)

# bars=(
#     "%{F#0f0}==================================="
#     "%{F#ff0}==================================="
#     "%{F#0ff}==================================="
#     "%{F#f00}==================================="
# )

# bars=(
#     "============"
#     "%{F#0f0}==%{F-}=========="
#     "%{F#0f0}====%{F-}========"
#     "%{F#0f0}====%{F-}%{F#ff0}==%{F-}======"
#     "%{F#0f0}====%{F-}%{F#ff0}====%{F-}===="
#     "%{F#0f0}====%{F-}%{F#ff0}====%{F-}%{F#f00}==%{F-}=="
#     "%{F#0f0}====%{F-}%{F#ff0}====%{F-}%{F#f00}====%{F-}"
# )

# bars=(
#     "%{F#0f0}====%{F-}%{F#0f0}============"
#     "%{F#ff0}====%{F-}%{F#0f0}============"
#     "%{F#f00}====%{F-}%{F#0f0}============"
#     "%{F#0ff}====%{F-}%{F#0f0}============"
#     "%{F#00f}====%{F-}%{F#0f0}============"
#     "%{F#f0f}====%{F-}%{F#0f0}============"
# )

while true; do
    for b in ${bars[*]}; do
        echo "$b"
    done
done
```

Since this is likely a race condition bug, you cannot always reliably reproduce this. Try to use some of the other `bars` arrays. From what I have found the bug is easier to reproduce with larger strings, with strings with more formatting tags (because you also get parser errors) and with strings containting multi-byte characters (because you get cairo UTF8 errors). 

## Polybar Log
The bug is not necessarily obvious if you don't look at the log. I was able to get the following warnings and errors:
```
error: cairo_scaled_font_text_to_glyphs()input string not valid UTF-8
warn: Dropping unmatched character (U+0008)
```

I was also able to get a parser error but I can't find the log message and am not able to reproduce that error again.

The cairo error only happens once and after that no text will be rendered on the bar until it is restarted.

## Environment:
* WM: HerbstluftWM
* Distro: ArchLinux
* Output of `polybar -vvv`:

```
polybar 3.4.0-52-g34e742e0

Features: +alsa +curl +i3 +mpd +network(libnl) +pulseaudio +xkeyboard

X extensions: +randr (+monitors) +composite +xkb +xrm +xcursor

Build type: Release
Compiler: /usr/lib/ccache/bin/c++
Compiler flags: -march=x86-64 -mtune=generic -O2 -pipe -fno-plt -Wall -Wextra -Wpedantic -O3 -DNDEBUG
Linker flags: -Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now 
```

## Additional context

The bug occurs before formatting string is sent to the parser, because the formatting string (`polybar -s`) is already malformed. The expected sequence of formatting strings would be:

```
%{l}==========================================================%{PR}
%{l}============================================================%{PR}
%{l}=============================================================%{PR}
```

But `polybar -s` gave me things like

```
%{l}d==========================================%{PR}
```

With the last `bars` variable I was even able to get

```
%{l0W F#0f0}============%{PR}
```

This one is particularly interesting. I always thought the issue lies in the script module not correctly reading input, but `%{l}` is generated by the controller. But I have found out that the entire `%{l}` is still generated, it just doesn't show up in the output of `polybar -s` because it is followed by the `\b` backspace control character which makes it look like things were deleted even though they still exist in the generated text. I confirmed this by adding the following patch to polybar:

```patch
diff --git a/src/modules/script.cpp b/src/modules/script.cpp
index 3883eb1..5c6587e 100644
--- a/src/modules/script.cpp
+++ b/src/modules/script.cpp
@@ -36,9 +36,15 @@ namespace modules {
             while (!m_stopping && fd != -1 && m_command->is_running() && !io_util::poll(fd, POLLHUP, 0)) {
               if (!io_util::poll_read(fd, 25)) {
                 continue;
-              } else if ((m_output = m_command->readline()) != m_prev) {
-                m_prev = m_output;
-                broadcast();
+              } else {
+                m_output = m_command->readline();
+                for(char c : m_output) {
+                  assert(!iscntrl(c));
+                }
+                if (m_output != m_prev) {
+                  m_prev = m_output;
+                  broadcast();
+                }
               }
             }
 
@@ -169,9 +175,17 @@ namespace modules {
       return "";
     }
 
+    for(char c : m_output) {
+      assert(!iscntrl(c));
+    }
+
     if (m_label) {
       m_label->reset_tokens();
       m_label->replace_token("%output%", m_output);
+
+      for(char c : m_label->get()) {
+        assert(!iscntrl(c));
+      }
     }
 
     string cnt{to_string(m_counter)};
```

This also showed me that the command output is read correctly (at least it doesn't contain control characters). But the first assertion fails in the `get_output` method. So `m_output` is read from `m_command` fine and at some point in between that and `get_output` gets corrupted. I tried putting a `lock_guard` with a new mutex everywhere `m_output` is used, but I got a deadlock and couldn't figure out why.

@Lomadriel do you mind taking a look at this? Maybe you have some insights here.
I have just successfully compiled polybar for Debian Buster and packaged it up into an installable deb package that I can throw into my own local repo.  This has several advantages:  I can build the package in a container and deploy to my normal system without having to install all of the build dependencies on it.  When installing the package from my local repo, APT will do the dependency resolution for me and only install the runtime dependencies.

Right now, the packaging option in CMake is turned off my default.  Building the package works via the new `package` target.

Open questions/future work:
- [ ] Possibly add the package building option to `build.sh`
- [ ] Maybe automatically build packages on Travis CI and deploy via GitHub releases.
- [ ] Perhaps users do not want to build both DEB and RPM (for which they'd have to have `dpkg` and `rpm` installed) so maybe split the CMake option into two.

Here is what building the package looks like in the terminal:
```console
root@debian:~/polybar/build# make package
[  5%] Built target xpp
[  9%] Built target jsoncpp_lib_static
[ 11%] Built target i3ipc++
[ 92%] Built target poly
[ 94%] Built target polybar
[100%] Built target polybar-msg
Run CPack packaging tool...
CPack: Create package using TGZ
CPack: Install projects
CPack: - Run preinstall target for: polybar
CPack: - Install project: polybar
CPack: Create package
CPack: - package: /root/polybar/build/polybar-3.4.0-Linux.tar.gz generated.
CPack: Create package using RPM
CPack: Install projects
CPack: - Run preinstall target for: polybar
CPack: - Install project: polybar
CPack: Create package
-- CPackRPM:Debug: Using CPACK_RPM_ROOTDIR=/root/polybar/build/_CPack_Packages/Linux/RPM
CPackRPM: Will use GENERATED spec file: /root/polybar/build/_CPack_Packages/Linux/RPM/SPECS/polybar.spec
CPack: - package: /root/polybar/build/polybar-3.4.0-Linux.rpm generated.
CPack: Create package using DEB
CPack: Install projects
CPack: - Run preinstall target for: polybar
CPack: - Install project: polybar
CPack: Create package
CPackDeb: - Generating dependency list
CPack: - package: /root/polybar/build/polybar-3.4.0-Linux.deb generated.
```
Packaged and available in official repos. Now [on QA](https://bodhi.fedoraproject.org/updates/FEDORA-2019-f0e9cd0ce7). Please hold a little bit this PR and don't merge until status in Bodhi will be changed from Pending/Testing to **Stable**.
![DeepinScreenshot_select-area_20191228231133](https://user-images.githubusercontent.com/5614476/71549509-79fbd780-29c7-11ea-8bf3-c384fcddf3be.png)

TEAM EDIT:
Closes #1639 
Closes #1645 
If you want to create a polybar package for your distro, please read [this page](https://polybar.readthedocs.io/en/latest/dev/packaging.html) in our documentation.

If you are already maintaining a polybar package in some distro, please subscribe to this thread.

We will post a comment here whenever there is a new release and we will also include anything that has changed for building and packaging the new version.

This thread is not intended for discussions of new releases, please do not comment here, we don't want to spam people that have subscribed to this thread. If you have any issues or questions about packaging the new release, please open a new issue (or ask on [Gitter](https://gitter.im/polybar/polybar)).
This is a first proof of concept for something discussed in #1529. I separated out all the "backend" logic in the cpu module that gathers the data for the module into an adapter that is instantiated by the module. I also tried to see how well the module state machine idea could be implemented.

Separating out this backend logic that talks to the "outside world" to gather data has the benefit that it makes the cpu module more easily testable by creating a mock implementation of the adapter. It theoretically also allows for implementing multiple adapters that work on different OSes (though I have not implemented any of that yet).

The idea for the module state machines was to make the module more robust but also have things like warning states for high usage etc.
I'm not really sure the adapter is the right place to put that state machine. For one, if there are multiple adapters, each would have to reimplement the warning states and so on, even though the logic for those is the same. Also the adapter should only be responsible for gathering data and the "frontend" should be responsible for deciding if we are in a warning state or not.

Maybe it would be a better idea to divide each module into three components:

* The adapter: Is responsible for gathering information for the module
* The module state machine: Calls the adapter to read information and handles state transitions should either the adapter return an error or should the new data indicate a new state (high temperature, battery discharging/charging).
* The module itself: 
  * Triggers updates in the state machine. 
  * Determines the `format-*` to use depending on the state. 
  * Reads data from the state machine and uses it to produce the module output.

@Lomadriel what are your thoughts on the module state machine idea?
As I see from the installation instructions there are no specific way to install polybar in Debian based distros, which gives me the following question:
Will polybar be packaged under Debian format? If not can I try to do something about it? 
This is a basic implementation of padding for progressbar, based loosely on the implementation for label.

I also looked at animation and ramp, but it appears they should get padding support automatically due to the use of load_optional_label() and copy_undefined() in their load methods.

This was targeting at resolving issue #809 .
## Is your feature request related to a problem? Please describe.
We only can declare static path, this is not modular.

## Why does polybar need this feature?
Make configuration more modular.

## Describe the solution you'd like
It would be great to create file per module in a ``modules.d`` and add in config
```
include-files = modules.d/*
```
