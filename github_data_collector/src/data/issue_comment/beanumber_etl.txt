For example, figure out `smallint(4)` for `numeric`. 
@beanumber have you applied this framework to spatial data? I noticed that the macleish uses spacial data but from my understanding it doesn't load the spatial data to the SQL database. I have made a few attempts to but I seem to run into an issue when it checks for csv. 
in conjunction with listing existing files. 

Always return `fs::path` vectors
https://case.law/
The [new dm package](https://krlmlr.github.io/dm/) offers a class that holds a number of tables and their referential relationships, among other things. Would this be a good target container for {etl}?
`find_schema` looks in `package_root/sql` to find sql source files. But when running unit tests the files are in `package_root/inst/sql`. This makes it impossible (as far as I can tell) for an etl extension package to include `etl_init` in unit tests if it includes sql files.

`devtools` and `testthat` quietly replace `system.file` with [a modified version](https://github.com/r-lib/pkgload/blob/master/R/shims.r#L25) to keep it working in most unit tests. But those packages can only replace `system.file` in the package being tested. So if a package imports `find_schema` from `etl`, in a unit test when `find_schema` calls `system.file` it doesn't add the extra `inst` folder.

I don't know if the `devtools` people provide a way to fix this. Maybe `find_schema` could check to see if `package_root/sql` exists, and if not then try `package_root/inst/sql`?

You should be able to reproduce this issue with the following steps:

1. Create a package that extends `etl`.
1. Include a sql file.
1. Use `testthat` and try to test `find_schema` with something like the example below.

```R
test_that("find_schema works", {
  pkgname = etl("pkgname")
  schema_path = etl::find_schema(pkgname)
  expect_equal(is.null(schema_path), FALSE)
})
```
* (https://github.com/beanumber/nyc311/issues/16)
* (https://github.com/beanumber/statcastr/issues/3)


> However, modern best practice is to use tbl() directly on an DBIConnection.

Not clear how much work this will be, but it is not insignificant. 