





added additional tests


Caught this on 8 cores 16G VPS instance:

```
2020-01-13 02:02:40,857 INFO  [appender-47] c.w.s.BlockchainUpdaterImpl - MicroBlock(2WDheEm... -> 4j34xpk..., txs=3) appended
2020-01-13 02:02:45,886 ERROR [ecution-context-global-57] c.w.Application - Error in Appender
com.google.common.util.concurrent.UncheckedExecutionException: org.iq80.leveldb.DBException: IO error: /var/lib/waves/data/33837022.ldb: Too many open files
        at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2050)
        at com.google.common.cache.LocalCache.get(LocalCache.java:3952)
        at com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3974)
        at com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4958)
        at com.wavesplatform.database.Caches.filledVolumeAndFee(Caches.scala:145)
        at com.wavesplatform.state.BlockchainUpdaterImpl.$anonfun$filledVolumeAndFee$3(BlockchainUpdaterImpl.scala:662)
        at com.wavesplatform.state.BlockchainUpdaterImpl.$anonfun$filledVolumeAndFee$1(BlockchainUpdaterImpl.scala:662)
        at com.wavesplatform.state.BlockchainUpdaterImpl.filledVolumeAndFee(BlockchainUpdaterImpl.scala:48)
        at com.wavesplatform.state.reader.CompositeBlockchain.filledVolumeAndFee(CompositeBlockchain.scala:144)
        at com.wavesplatform.state.diffs.ExchangeTransactionDiff$.enoughVolume(ExchangeTransactionDiff.scala:127)
        at com.wavesplatform.state.diffs.ExchangeTransactionDiff$.$anonfun$apply$19(ExchangeTransactionDiff.scala:50)
        at com.wavesplatform.state.diffs.ExchangeTransactionDiff$.$anonfun$apply$16(ExchangeTransactionDiff.scala:45)
        at com.wavesplatform.state.diffs.ExchangeTransactionDiff$.$anonfun$apply$12(ExchangeTransactionDiff.scala:39)
        at com.wavesplatform.state.diffs.ExchangeTransactionDiff$.$anonfun$apply$8(ExchangeTransactionDiff.scala:33)
        at com.wavesplatform.state.diffs.ExchangeTransactionDiff$.apply(ExchangeTransactionDiff.scala:31)
        at com.wavesplatform.state.diffs.TransactionDiffer$.$anonfun$unverified$1(TransactionDiffer.scala:74)
        at com.wavesplatform.state.diffs.TransactionDiffer$.unverified(TransactionDiffer.scala:69)
        at com.wavesplatform.state.diffs.TransactionDiffer$.$anonfun$verified$9(TransactionDiffer.scala:56)
        at com.wavesplatform.state.diffs.TransactionDiffer$.$anonfun$verified$1(TransactionDiffer.scala:43)
        at com.wavesplatform.state.diffs.TransactionDiffer$.verified(TransactionDiffer.scala:42)
        at com.wavesplatform.state.diffs.TransactionDiffer$.$anonfun$apply$1(TransactionDiffer.scala:32)
        at com.wavesplatform.state.diffs.TransactionDiffer$.apply(TransactionDiffer.scala:34)
        at com.wavesplatform.state.diffs.BlockDiffer$.$anonfun$apply$1(BlockDiffer.scala:124)
        at com.wavesplatform.state.diffs.BlockDiffer$.$anonfun$apply$3(BlockDiffer.scala:152)
        at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:126)
        at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:122)
        at scala.collection.immutable.List.foldLeft(List.scala:89)
        at com.wavesplatform.state.diffs.BlockDiffer$.apply(BlockDiffer.scala:148)
        at com.wavesplatform.state.diffs.BlockDiffer$.$anonfun$fromMicroBlockTraced$4(BlockDiffer.scala:104)
        at com.wavesplatform.state.diffs.BlockDiffer$.$anonfun$fromMicroBlockTraced$3(BlockDiffer.scala:96)
        at com.wavesplatform.state.diffs.BlockDiffer$.fromMicroBlockTraced(BlockDiffer.scala:90)
        at com.wavesplatform.state.diffs.BlockDiffer$.fromMicroBlock(BlockDiffer.scala:80)
        at com.wavesplatform.state.BlockchainUpdaterImpl.$anonfun$processMicroBlock$8(BlockchainUpdaterImpl.scala:414)
        at com.wavesplatform.state.BlockchainUpdaterImpl.$anonfun$processMicroBlock$5(BlockchainUpdaterImpl.scala:405)
        at com.wavesplatform.state.BlockchainUpdaterImpl.$anonfun$processMicroBlock$2(BlockchainUpdaterImpl.scala:394)
        at com.wavesplatform.state.BlockchainUpdaterImpl.$anonfun$processMicroBlock$1(BlockchainUpdaterImpl.scala:393)
        at com.wavesplatform.state.BlockchainUpdaterImpl.processMicroBlock(BlockchainUpdaterImpl.scala:48)
        at com.wavesplatform.state.appender.MicroblockAppender$.$anonfun$apply$2(MicroblockAppender.scala:28)
        at com.wavesplatform.state.appender.MicroblockAppender$.$anonfun$apply$1(MicroblockAppender.scala:29)
        at monix.eval.internal.TaskRunLoop$.startFull(TaskRunLoop.scala:81)
        at monix.eval.internal.TaskRunLoop$.$anonfun$restartAsync$1(TaskRunLoop.scala:222)
        at monix.execution.internal.InterceptRunnable.run(InterceptRunnable.scala:27)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
Caused by: org.iq80.leveldb.DBException: IO error: /var/lib/waves/data/33837022.ldb: Too many open files
        at org.fusesource.leveldbjni.internal.JniDB.get(JniDB.java:90)
        at com.wavesplatform.database.ReadOnlyDB.get(ReadOnlyDB.scala:11)
        at com.wavesplatform.database.LevelDBWriter.$anonfun$loadVolumeAndFee$1(LevelDBWriter.scala:62)
        at com.wavesplatform.database.LevelDBWriter.readOnly(LevelDBWriter.scala:96)
        at com.wavesplatform.database.LevelDBWriter.loadVolumeAndFee(LevelDBWriter.scala:203)
        at com.wavesplatform.database.Caches.$anonfun$volumeAndFeeCache$1(Caches.scala:142)
        at com.wavesplatform.database.Caches$$anon$1.load(Caches.scala:381)
        at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3528)
        at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2277)
        at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2154)
        at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2044)
        ... 48 common frames omitted
Caused by: org.fusesource.leveldbjni.internal.NativeDB$DBException: IO error: /var/lib/waves/data/33837022.ldb: Too many open files
        at org.fusesource.leveldbjni.internal.NativeDB.get(NativeDB.java:316)
        at org.fusesource.leveldbjni.internal.NativeDB.get(NativeDB.java:300)
        at org.fusesource.leveldbjni.internal.NativeDB.get(NativeDB.java:293)
        at org.fusesource.leveldbjni.internal.JniDB.get(JniDB.java:85)
        ... 58 common frames omitted
2020-01-13 02:02:45,893 DEBUG [shutdownHook4] c.w.Application - Shutting down HistoryReplier
```

additional info:
```
ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 47785
max locked memory       (kbytes, -l) 16384
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 47785
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
```