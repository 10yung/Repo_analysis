Hi Greetings

Thank you for making this awesome integration.  I have a need for using Python 3.6.6

Does this package support that version of Python?

If so, how would I point the node python-shell to execute a specific interpreter to ensure I am not going to run Python 2?
My programming environment:
VScode
node.js  v12.14.0
vue-cli   4.X
and some plugin(electron-builder,vuetify)

![image](https://user-images.githubusercontent.com/49749136/71919180-fc9e4700-31be-11ea-99ac-c1cfcc418479.png)

> child_process_1.spawn is not a function

when I face this proble,first of all,I try to fix by myself. I found that in es6 value different from function. so, I changed like this:(in my test.js file)

```
let foo1 = PythonShell.run('./py/my_script.py', null, function (err) {
    if (err) throw err;
    console.log('finished');
});

function foo() {
    console.log("there is test.js,welcome!");
}

var a = 'my name is xiaoming';
export { foo, a, foo1 }
```
I ensured my es6 grammer.

then I try to do something python code in the my_script.py, which print("hello python!")
I get this picture.
I found this problem. 
then fond [this](https://stackoverflow.com/questions/42529261/uncaught-in-promise-typeerror-spawn-is-not-a-function)

> Spawn is a construct of nodejs. React as a framework does not have the method. This library is to be used in server side (nodejs). You can expose a http api which can be triggered via react. The http api can then trigger the library in nodejs server.

I know Spawn can't run in Vue-cli without nodejs.
Is there some ways to use Spawn in vue.js?  
I need nodejs run in client and invoke python script.



I am trying to run the example found in the readme, and I receive the following error. 

events.js:187
      throw er; // Unhandled 'error' event
      ^

Error: spawn py ENOENT
    at Process.ChildProcess._handle.onexit (internal/child_process.js:264:19)
    at onErrorNT (internal/child_process.js:456:16)
    at processTicksAndRejections (internal/process/task_queues.js:80:21)
Emitted 'error' event on ChildProcess instance at:
    at Process.ChildProcess._handle.onexit (internal/child_process.js:270:12)
    at onErrorNT (internal/child_process.js:456:16)
    at processTicksAndRejections (internal/process/task_queues.js:80:21) {
  errno: 'ENOENT',
  code: 'ENOENT',
  syscall: 'spawn py',
  path: 'py',}

I am using windows 10 with node js, and VS code. 
###  test.js
```js
let {PythonShell} = require('python-shell');
let pyshell = new PythonShell('python/test.py');
pyshell.send("hello");
pyshell.on('message', function (message) {
  console.log(message);
});
```
###  test.py
```python
import json,sys

if __name__ == '__main__':   
    s = sys.stdin.read()
    print(s)
```
in this way,  console can print hello. but when i add { mode: 'text '} into the PythonShell constructor as below 
###  test.js
```
let {PythonShell} = require('python-shell');
let pyshell = new PythonShell('python/test.py', { mode: 'text '});
pyshell.send("hello");
pyshell.on('message', function (message) {
  console.log(message);
});
```
console dosen't print hello, it doesn't work.
Bumps [diff](https://github.com/kpdecker/jsdiff) from 3.3.1 to 3.5.0.
<details>
<summary>Changelog</summary>

*Sourced from [diff's changelog](https://github.com/kpdecker/jsdiff/blob/master/release-notes.md).*

> ## v3.5.0 - March 4th, 2018
> - Omit redundant slice in join method of diffArrays - 1023590
> - Support patches with empty lines - fb0f208
> - Accept a custom JSON replacer function for JSON diffing - 69c7f0a
> - Optimize parch header parser - 2aec429
> - Fix typos - e89c832
> 
> [Commits](https://github.com/kpdecker/jsdiff/compare/v3.4.0...v3.5.0)
> 
> ## v3.4.0 - October 7th, 2017
> - [#183](https://github-redirect.dependabot.com/kpdecker/jsdiff/issues/183) - Feature request: ability to specify a custom equality checker for `diffArrays`
> - [#173](https://github-redirect.dependabot.com/kpdecker/jsdiff/issues/173) - Bug: diffArrays gives wrong result on array of booleans
> - [#158](https://github-redirect.dependabot.com/kpdecker/jsdiff/issues/158) - diffArrays will not compare the empty string in array?
> - comparator for custom equality checks - 30e141e
> - count oldLines and newLines when there are conflicts - 53bf384
> - Fix: diffArrays can compare falsey items - 9e24284
> - Docs: Replace grunt with npm test - 00e2f94
> 
> [Commits](https://github.com/kpdecker/jsdiff/compare/v3.3.1...v3.4.0)
</details>
<details>
<summary>Commits</summary>

- [`e9ab948`](https://github.com/kpdecker/jsdiff/commit/e9ab94893a77f1f7d7ea8483b873083e6c6a390a) v3.5.0
- [`b73884c`](https://github.com/kpdecker/jsdiff/commit/b73884c013d199aeba62f583c392a823083a889f) Update release notes
- [`8953021`](https://github.com/kpdecker/jsdiff/commit/89530211601abfd0baf6276f0f862d5e43f908ee) Update release notes
- [`1023590`](https://github.com/kpdecker/jsdiff/commit/1023590bd4b29edb8c4d280f9bd50966fc22e469) Omit redundant slice in join method of diffArrays
- [`c72ef4a`](https://github.com/kpdecker/jsdiff/commit/c72ef4aec8fc6318dd413ab7c225fa47891f607c) Add missing test coverage
- [`b9ef24f`](https://github.com/kpdecker/jsdiff/commit/b9ef24f8004624f024f9853842ea45903dc0afc7) Support patches with empty lines
- [`10aaabb`](https://github.com/kpdecker/jsdiff/commit/10aaabb3b7b22c8019dc74f0ab674041167e7438) Support patches with empty lines
- [`196d3aa`](https://github.com/kpdecker/jsdiff/commit/196d3aa052e89bfe929ed6368b11dc7d011bf911) Support patches with empty lines
- [`e24d789`](https://github.com/kpdecker/jsdiff/commit/e24d789f71991db9a74e3997653d9cf52d071749) Support patches with empty lines
- [`8616a02`](https://github.com/kpdecker/jsdiff/commit/8616a02a139422c8a3e008b63d60083abdd56b7c) Support patches with empty lines
- Additional commits viewable in [compare view](https://github.com/kpdecker/jsdiff/compare/v3.3.1...v3.5.0)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=diff&package-manager=npm_and_yarn&previous-version=3.3.1&new-version=3.5.0)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/extrabacon/python-shell/network/alerts).

</details>
https://github.com/extrabacon/python-shell/blob/968c651d2dcf92be7969927da07fbfc4794155aa/index.ts#L284

For debugging failures, it's very useful to have the rest of the output from the python code, not just the stacktrace.
Hello,

After testing this code...

```
const {PythonShell} = require('python-shell');
var myPythonScriptPath = 'my_script.py';

var pyshell = new PythonShell(myPythonScriptPath);

// sends a message to the Python script via stdin
pyshell.send(852438003098);

pyshell.on('message', function (message) {
  // received a message sent from the Python script (a simple "print" statement)
  console.log('This is the response from Python: ', message);
});

// end the input stream and allow the process to exit
pyshell.end(function (err,code,signal) {
  if (err) throw err;
  console.log('The exit code was: ' + code);
  console.log('The exit signal was: ' + signal);
  console.log('finished');
  console.log('finished');
});
```

With this python script:
```
import sys
from pymongo import MongoClient

# MONGODB STUFF
client = MongoClient()
db = client.TestDB
c = db.main_items

# GET INPUT FROM JAVASCRIPT HERE
query = sys.argv[1]

# SUPPOSED TO WRITE TO DATABASE HERE
c.insert_one({data: query})
```

And I get this error when running the JavaScript code:
```
PS C:\Users\User\Desktop\App_Backend\routes> node test.js
C:\Users\User\Desktop\App_Backend\routes\test.js:20
  if (err) throw err;
           ^

PythonShellError: AssertionError: SRE module mismatch
    at PythonShell.parseError (C:\Users\User\Desktop\App_Backend\node_modules\python-shell\index.js:260:21)
    at terminateIfNeeded (C:\Users\User\Desktop\App_Backend\node_modules\python-shell\index.js:139:32)
    at ChildProcess.<anonymous> (C:\Users\User\Desktop\App_Backend\node_modules\python-shell\index.js:131:13)
    at ChildProcess.emit (events.js:203:13)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:272:12)
    ----- Python Traceback -----
    File "C:\Users\User\Desktop\App_Backend\routes\my_script.py", line 3, in <module>
      from pymongo import MongoClient
    File "C:\ProgramData\Anaconda3\lib\site-packages\pymongo\__init__.py", line 77, in <module>
      from pymongo.collection import ReturnDocument
    File "C:\ProgramData\Anaconda3\lib\site-packages\pymongo\collection.py", line 21, in <module>
      from bson.code import Code
    File "C:\ProgramData\Anaconda3\lib\site-packages\bson\__init__.py", line 67, in <module>
      import calendar
    File "C:\ProgramData\Anaconda3\lib\calendar.py", line 10, in <module>
      import locale as _locale
    File "C:\ProgramData\Anaconda3\lib\locale.py", line 16, in <module>
      import re
    File "C:\ProgramData\Anaconda3\lib\re.py", line 123, in <module>
      import sre_compile
    File "C:\ProgramData\Anaconda3\lib\sre_compile.py", line 17, in <module>
      assert _sre.MAGIC == MAGIC, "SRE module mismatch" {
  traceback: 'Traceback (most recent call last):\r\n' +
    '  File "C:\\Users\\User\\Desktop\\App_Backend\\routes\\my_script.py", line 3, in <module>\r\n' +
    '    from pymongo import MongoClient\r\n' +
    '  File "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pymongo\\__init__.py", line 77, in <module>\r\n' +
    '    from pymongo.collection import ReturnDocument\r\n' +
    '  File "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pymongo\\collection.py", line 21, in <module>\r\n' +
    '    from bson.code import Code\r\n' +
    '  File "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\bson\\__init__.py", line 67, in <module>\r\n' +
    '    import calendar\r\n' +
    '  File "C:\\ProgramData\\Anaconda3\\lib\\calendar.py", line 10, in <module>\r\n' +
    '    import locale as _locale\r\n' +
    '  File "C:\\ProgramData\\Anaconda3\\lib\\locale.py", line 16, in <module>\r\n' +
    '    import re\r\n' +
    '  File "C:\\ProgramData\\Anaconda3\\lib\\re.py", line 123, in <module>\r\n' +
    '    import sre_compile\r\n' +
    '  File "C:\\ProgramData\\Anaconda3\\lib\\sre_compile.py", line 17, in <module>\r\n' +
    '    assert _sre.MAGIC == MAGIC, "SRE module mismatch"\r\n' +
    'AssertionError: SRE module mismatch\r\n',
  executable: 'py',
  options: null,
  script: 'C:\\Users\\User\\Desktop\\App_Backend\\routes\\my_script.py',
  args: null,
  exitCode: 1
```

What is going on?  Why this error?  I have not found solution so far. 














For some functions you must provide the python path, is there a way to check if a python path is valid?
```
let {PythonShell} = require('python-shell')
let path = require("path")
PythonShell.run(path.join(__dirname, "pyengine/view.py"), null, function (err,result) {
  if (err) throw err;
  console.log('finished');
  console.log(result)
});

```

So here, I can see the output of the Python script with "console.log(result)". I want to store this result which is coming from a Python script via print method, and use it on NodeJS part. Since this result is in .run's scope, how can I assign it to a variable?

It's not particularly about python-shell but I'll be really glad if someone could help me.
Currently, pythonshell is working in python2.
But I need to import a package that's only available for Python 3.

how can I run pythonshell in python 3??
Thank You