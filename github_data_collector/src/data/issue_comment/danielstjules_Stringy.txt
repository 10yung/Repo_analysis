I can see there's no code commits from @danielstjules since 2017.
There are multiple issues and pull requests not touched for years.

Should we consider replacing Stringy with a different package?
At present hyphenated words such as 'up-to-date' would become 'Up-to-date'.

Allowing the option of treating hyphenated words as a individual words would be a nice feature:
```php
s('up-to-date')->titleize(['to'], [' ', '-']);
```
Would return 'Up-to-Date'.

The image at the top of the README seems to be missing:
![Screenshot of Stringy README showing broken image](https://user-images.githubusercontent.com/17884198/56614052-e7e83780-65cc-11e9-909d-127746852a41.png)

I found an image for Stringy on another site. 
Can this be used, or is there a better one?
https://hotexamples.com/i/libraries#stringy
It fixes preg_replace(): Compilation failed: invalid range in character class at offset 12 error in PHP 7.3. See https://github.com/danielstjules/Stringy/issues/191
Executing these:

	use Stringy\Stringy;

	$text = Stringy::create('/asd/qwe/');
	$text = $text->trim(' \\/');

(A)

With `mbstring` extension enabled in `php.ini`  
=> It works fine, result is `'asd/qwe'`

(B)

Without `mbstring`
=> It is buggy, result is `''`, and there is a php warning: `preg_replace(): Unknown modifier ']'`

This is a fix for the Greek letter Theta (https://en.wikipedia.org/wiki/Theta) which is now replaced by O which is completely irrelevant.
I believe this was a mistake due to the cyrilic ө (https://en.wiktionary.org/wiki/%D3%A8) which is correctly replaced by ο (it is left untouched in my proposal).

P.S. I am a Greek native speaker
Fixed following warning:

> Warning: preg_replace(): Compilation failed: invalid range in character class at offset 12 {"exception":"[object] (ErrorException(code: 0): Warning: preg_replace(): Compilation failed: invalid range in character class at offset 12 at vendor/danielstjules/stringy/src/Stringy.php:1174)"} []
On line 813 of Stringify.php there is a function called slugify(). I had to add an escape character in the regex pattern on the dash or hyphen to prevent the error message. I'm not sure if that hyphen was intended to be unescaped. I made the following change to that function to prevent the error and allow the pages to load correctly.

Apparently the hyphen needs to be either the first or last character in the pattern, or escaped: [invalid range in character class](https://stackoverflow.com/questions/27426645/preg-match-compilation-failed-invalid-range-in-character-class)

public function slugify($replacement = '-')
    {
        $stringy = $this->toAscii();

        $quotedReplacement = preg_quote($replacement);
//        $pattern = "/[^a-zA-Z\d\s-_$quotedReplacement]/u"; // Commented this out.
        $pattern = "/[^a-zA-Z\d\s\-_$quotedReplacement]/u"; // Added backslash in front of the hyphen.
        $stringy->str = preg_replace($pattern, '', $stringy);

        return $stringy->toLowerCase()->delimit($replacement)
                       ->removeLeft($replacement)->removeRight($replacement);
    }
`Stringy::langSpecificCharsArray()` defines ASCII counterparts for the following Bulgarian characters: `ъ`, `Ъ`, `ь`, and `Ь`

However none of those characters have any alternatives in `Stringy::charsArray()`, which means they will be untouched by `Stringy::toAscii()` unless `$language` is set to `'bg'`.

As there are no other ASCII equivalents for these characters, I think they should be defined in `charsArray()` instead.

```php
echo Stringy::create('ъ')->toAscii();
// outputs: 'ъ'
// expected: 'a'

echo Stringy::create('ъ')->toAscii('bg');
// outputs: 'a' (as expected)
```
# Changed log
- Remove the `php-5.4` and `php-5.5` support because it's time to let the repo require `php-5.6` now.
- Set the multiple PHPUnit versions to support different PHP versions.
- Add the correct filter white list in `phpunit.xml` file.
- Add more tests.
- Using the class-based PHPUnit namespace to be compatible with stable PHPUnit version.