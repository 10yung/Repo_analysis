Code banking: Many modern 8051 chips (cc2530/C8051F120/..) have code memory address extension by banking. [Ref1](http://www.keil.com/support/man/docs/bl51/bl51_codebanking.htm), [Ref2](https://www.embedded.com/expand-your-8051-memory/)
How can I deal with it?

Switch jump table: Compilers usually emit jump table for switch statement. 
How can i specify switch paradigm for 8051?

simple test code [attached](https://github.com/uxmal/reko/files/4053352/test.zip)
Hello,
I have an instruction which gets 2 registers (`reg1`, `reg2`), does some logic and puts the result into `resultReg`.

The logic is as follows:
```c
mask = 0x80000000
resultReg = 0

LoopStart:
temp = (reg2 & mask) >> (31 - resultReg)
if (reg1 != temp) Branch to next instruction
resultReg++
mask = mask >> 1
Branch "LoopStart"
```
My problem is that i can't branch to `LoopStart` because it doesn't have a real address as it is in the middle of a cluster.

I've looked at the the `NextStatmentRequiresLabel` flag but it doesn't seem to do what I need.
Is there any way to do this?
During decomping an old Windows (16-Bit Protected Mode, Windows 16) executable I need to add required DLL's.

If i try to add binary  nothing happens.
Sample program LinkIIgs
Error occurs during Analyze dataflow, 

Error,,An internal error occurred. Offset must be non-negative.
Parameter name: bitOffset 


Using the the analysis-development branch I am seeing the issue where D3 is being included in the procedure declaration in linkiigs at 001056f8 INITCURSORCTL. It appears that D3 is pushed onto the stack at the start of the function and restored from the stack at the end of the function. It appears that D3 is only being used after having a value assigned.

I have included a project file for linkiigs, that has all but four of the procedures named and matched  against library procedures/functions.


[LinkIIGS.Hqx-2.zip](https://github.com/uxmal/reko/files/3153082/LinkIIGS.Hqx-2.zip)


By using the contents of a library file, Function names and binary that makes up the function can be utilised to enhance the decompilation process. IDA has a tech called FLIRT which does this. 
In the standard compilation process library files are linked into the exe copying the relevant parts into the bin, you cannot do a straight search for the library binary as optimisers cut out bits that are not used, and the linker process will change some bytes values as they are addresses.
 
It will require for an application to create signature files which will in effect scan the library file to produce list of the function names, and the binary pattern that makes up the app. this will be saved away as a signature file. this app will have to process COFF, ELF and MACHO, but I would recommend that you need to understand instruction sets here.
Then within Reko, as part of the decompilation process, after the functions have been identified a search will be required to see if a pattern match exists, but it will have to take into account some byte values have changed due to the change of address values.  It will require that the disassemblers identify which instructs contain a operand which is an address, in this case the operand values will be ignored.

To do this the best way is to load all the signature files into a tree like structure, then as a function is check, if the operand is identified as an address the process will jump down the size of the operand, then check for the next byte match. This will continue until either the function being examine has no more bytes to check, if at this point the tree has a leaf which contains a function name, the function been examined is renamed.
After selecting a method in the tree view the correct assembly and code are displayed an a split window. The problem is that if the number of params is large, you cannot scroll to see all the params within the window, even if you move the split fully across to the left.
Yes move again! The only reason for suggesting this is that it will remove issues going ahead, something that could be done on small blocks, does not need a big bang approach, and will also provide a UI that (WFP) that could be used going forward
Provide the functionality to all the user to define know data types and structures that will be used in the assemble and decompiled code