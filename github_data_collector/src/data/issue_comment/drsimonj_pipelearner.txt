Current version of purrr (0.2.3) results in following error being thrown:

```r
`cross_d()` is deprecated; please use `cross_df()` instead. 
```
In general, a user will want to predict values and score/evaluated their fit after learning all models via `learn()`. The exact functions to do this are many. However, pipeable functions could be written that takes the tibble coming from `learn()` as well as a function that will take the relevant columns (e.g., test, target, and fit), and output the predicted values. It will then be the responsibility of the user to create a function that accepts these arguments.

e.g.,...

```
pl %>% learn() %>%
pl_predict("test_hat", FUN = function(test, target, fit) {
   # etc... to produce vectors of fitted values
}) %>%
pl_score("test_rsqr", FUN = function(test, target, test_hat) {
   # etc...
})
```
Currently, `predict.pipelearner` assumes that the output of `predict` on each fit will return a single vector of values. However, this isn't always the case. For example, default settings on `predict.rpart` when a classification tree is run will return a data frame of predicted probabilities.
Currently, `predict.pipelearner()` applies default `predict()` to each fit. However, sometimes this needs to be adjusted. For example, changing `predict` to produce probabilities or classes.