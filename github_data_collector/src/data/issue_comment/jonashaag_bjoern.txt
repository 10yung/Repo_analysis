Closes #52.
Fix for #146 
Wanted to use bjoern in the work, but could not find full official documentation of the project with clear examples anywhere. Whether the project has a page with normal documentation on readthedocs.org or somewhere else?
I'm running Bjoern embedded in Python in this way:
```python
logger.info('Bjoern bound to UNIX socket %s', sock_name)
try:
    os.unlink(sock_name)
except OSError:
    logger.error('Could not remove previous UNIX socket %s', sock_name)
    pass
bjoern.run(api_app, 'unix:{}'.format(sock_name))
try:
    os.unlink(sock_name)
except OSError:
    pass
```

By default, supervisord sends SIGTERM to processes to quit them, as stated in [this issue](https://github.com/skoczen/will/issues/181).
Sending this signal, if I wouldn't remove the pending sockets, they prevent bjoern from starting next time, because the old socket is assumed to be in use.
I saw there is code for unlinking sockets in bjoern, but it is appearantly bypassed when receiving SIGTERM. Is there any way to make shutdown of bjoern more safe?

OS: Debian 8, Python 2.7.9
I'd like to run bjoern in production, but my organization requires TLS behind load balancers/proxies. I attempted to wrap a socket I created before calling `bjoern.server_run`, but it looks like the wrap call is actually supposed be called after `socket.accept()` is called. We're deploying in containers, so I'd like to avoid the heavyweight solution of deploying a webserver like nginx just to get TLS termination on the backend.

It would be great if `bjoern.server_run` could also accept an `ssl.SSLContext` as an argument and use it to automatically wrap the socket when accepting connections.
This way you can pass a `0` port, and get back a randomly assigned port.

Right now you have to use `bjoern._default_instance[0].getsockname()`.
Used a construct from here http://pythonextensionpatterns.readthedocs.io/en/latest/compiler_flags.html to differentiate between Debug and Production builds.
When running 'pip install bjoern' on Windows 10:

"cl : Command line error D8021 : invalid numeric argument '/Wextra'
error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.13.26128\\bin\\HostX86\\x64\\cl.exe' failed with exit status 2"

Apparently the compile flag -Wextra is meant for GCC and we are trying to use that on cl (the Microsoft compiler) too
Having wheels on PyPi could make installation a lot faster and may also solve the "library headers are required for installation"-problem. 

By the way, nice work!
The fork example (https://github.com/jonashaag/bjoern/blob/master/tests/fork.py) ignores child processes' exit codes. Whatever happens to the children, the parent process will exit gracefully. This does not allow to run it with supervisord or similar means (which automatically restart crashed processes).

Additionally, the fork example will allow a situation when (on a multi-CPU machine) half of child processes crashed for some reason, the other half is still alive, and the server is thus underperforming (not utilizing all CPU cores).

I personally reworked the end of the file like this:

```python
        try:
            # Wait for the first worker to exit. They should never exit!
            # Once first is dead, kill the others and exit with error code.
            pid, xx = os.wait()
            worker_pids.remove(pid)
        finally:
            for pid in worker_pids:
                os.kill(pid, signal.SIGINT)
            exit(1)
```