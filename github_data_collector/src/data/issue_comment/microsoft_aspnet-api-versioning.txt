I am using OData EDM model builder to add additional additional OData Functions/Actions to model.
But when I am doing it, swagger will not generate proper input parameters for them, because those Actions/Functions are taking ODataActionParameters and then generated schema for these Functions/Actions schema looks like this:
```
-schema: {
type: "object",
-additionalProperties: {
type: "object"
}
}
```

And example models looks like this:
```
{
  "additionalProp1": {},
  "additionalProp2": {},
  "additionalProp3": {}
}
```

It seems like Action/Functions parameters that are defined when created are not used for swagger schema generation. Can I setup/configure EDM model exploration to get this working or do I need to implement custom IOperationFilter in swashbuckle and hack fix it manually ?

Thank you for answer.
Add license file extension. Fixes #587
We are using $select on PUT/PATCH/POST requests to filter the properties on the model returned by a successful request. This works well but we cannot get swagger to show $select as an available parameter for these actions.

These are valid operations as per the OData spec [http://docs.oasis-open.org/odata/odata/v4.01/cs01/part2-url-conventions/odata-v4.01-cs01-part2-url-conventions.html#sec_SystemQueryOptions](url)

If I change the code below to return true for PUT/PATCH/POST, all works as it should, and it would also support the other rules of the spec.

https://github.com/microsoft/aspnet-api-versioning/blob/6ea139e77b82266ea1a8cc130b55725f8beeaa42/src/Microsoft.AspNet.OData.Versioning.ApiExplorer/AspNet.OData/Builder/ODataValidationSettingsConvention.cs#L146-L154




I am using asp.net core 3.1 project template to develop a web api. There are no compilation errors.

Here goes my code details

**Program.cs**
```
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace MyProject
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Use the W3C Trace Context format to propagate distributed trace identifiers.
            // See https://devblogs.microsoft.com/aspnet/improvements-in-net-core-3-0-for-troubleshooting-and-monitoring-distributed-apps/
            Activity.DefaultIdFormat = ActivityIdFormat.W3C;
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}
```

**Startup.cs**

```
using Sample.API.Constants;
using Sample.API.Extensions;
using Sample.API.GraphQL;
using Sample.API.Middleware;
using Boxed.AspNetCore;
using GraphQL.Server;
using GraphQL.Server.Ui.Playground;
using GraphQL.Server.Ui.Voyager;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Diagnostics.HealthChecks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace MyProject
{
    public class Startup
    {
        private readonly IConfiguration configuration;
        private readonly IWebHostEnvironment webHostEnvironment;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Startup"/> class.
        /// </summary>
        /// <param name = "configuration">The application configuration, where key value pair settings are stored. See
        /// http://docs.asp.net/en/latest/fundamentals/configuration.html</param>
        /// <param name = "webHostEnvironment">The environment the application is running under. This can be Development,
        /// Staging or Production by default. See http://docs.asp.net/en/latest/fundamentals/environments.html</param>
        public Startup(IConfiguration configuration, IWebHostEnvironment webHostEnvironment)
        {
            this.configuration = configuration;
            this.webHostEnvironment = webHostEnvironment;
        }

        /// <summary>
        /// Configures the services to add to the ASP.NET Core Injection of Control (IoC) container. This method gets
        /// called by the ASP.NET runtime. See
        /// http://blogs.msdn.com/b/webdev/archive/2014/06/17/dependency-injection-in-asp-net-vnext.aspx
        /// </summary>
        public virtual void ConfigureServices(IServiceCollection services) => 
            services
            .AddCosmosDBConfiguration(configuration)
            .AddAutoMapperConfiguration()
            .AddCustomResponseCompression(configuration)
            .AddCustomCors()
            .AddCustomOptions(configuration)
            .AddHttpContextAccessor()
            .AddCustomRouting()
            .AddCustomStrictTransportSecurity()
            .AddCustomHealthChecks()
            .AddServerTiming()
            .AddControllers()
               .AddCustomJsonOptions(webHostEnvironment)
               .AddCustomMvcOptions(configuration)
            .Services
            .AddCustomGraphQL(configuration, webHostEnvironment)
            .AddGraphQLResolvers()
            .AddGraphQLResponse()
            .AddProjectRepositories()
            .AddProjectSchemas();

        /// <summary>
        /// Configures the application and HTTP request pipeline. Configure is called after ConfigureServices is
        /// called by the ASP.NET runtime.
        /// </summary>
        public virtual void Configure(IApplicationBuilder application) =>
            application
                .UseIf(
                    this.webHostEnvironment.IsDevelopment(),
                    x => x.UseServerTiming())
            .UseForwardedHeaders()
            .UseResponseCompression()
            .UseFetchLocaleMiddleware()
            .UseIf(
                    !this.webHostEnvironment.IsDevelopment(),
                    x => x.UseHsts())
                .UseIf(
                    this.webHostEnvironment.IsDevelopment(),
                    x => x.UseDeveloperExceptionPage())
            .UseRouting()
                .UseCors(CorsPolicyName.AllowAny)
            .UseEndpoints(
                    builder =>
                    {
                        builder
                            .MapHealthChecks("/status")
                            .RequireCors(CorsPolicyName.AllowAny);
                        builder
                            .MapHealthChecks("/status/self", new HealthCheckOptions() { Predicate = _ => false })
                            .RequireCors(CorsPolicyName.AllowAny);
                    })
            .UseWebSockets()
                // Use the GraphQL subscriptions in the specified schema and make them available at /graphql.
                .UseGraphQLWebSockets<MainSchema>()
                // Use the specified GraphQL schema and make them available at /graphql.
                .UseGraphQL<MainSchema>()
                .UseIf(
                    this.webHostEnvironment.IsDevelopment(),
                    x => x
                        // Add the GraphQL Playground UI to try out the GraphQL API at /.
                        .UseGraphQLPlayground(new GraphQLPlaygroundOptions() { Path = "/" })
                        // Add the GraphQL Voyager UI to let you navigate your GraphQL API as a spider graph at /voyager.
                        .UseGraphQLVoyager(new GraphQLVoyagerOptions() { Path = "/voyager" }));
    }
}
```

**Response.cs**

```
namespace MyProject
{
    public class Response
    {
        public object Data { get; set; }

        public string StatusCode { get; set; }

        public string ErrorMessage { get; set; }

        public Response(object data)
        {
            StatusCode = "Success";
            Data = data;
        }

        public Response(string statusCode, string errorMessage)
        {
            StatusCode = statusCode;
            ErrorMessage = errorMessage;
        }
    }
}
```

All the dependencies mentioned in the ConfigureServices of the Startup.cs are available. While validating the APIs I am getting a run time error as mentioned below:

No constructor for type 'MyProject.Response' can be instantiated using services from the service container and default values.

Here goes the dependency setup required for the Response class as mentioned below:

**ProjectServiceCollectionExtensions.cs**

```
namespace MyProject
{
    public static class ProjectServiceCollectionExtensions
    {
        public static IServiceCollection AddGraphQLResponse(this IServiceCollection services) => services.AddScoped<Response>();
    }
}
```

Can anyone help me to fix this issue by providing their guidance
Be careful with your versioning. If you are using SemVer then breaking changes mean bumping the major part of the version number. 

* Version 4.1.0 of Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer supports .NET Standard 2.0
* Version 4.1.1 does not and forces .NET Core 3.1. This is a breaking change for those that are not on .NET Core 3.1 yet. 

Therefore a patch bump is highly inappropriate. This should have been Version 5.0.0 due to this breaking change.
Hello, when adding the nuget package Microsoft.AspNetCore.Mvc.Versioning 4.0.0 or 4.1.0, we are hitting the following exception:

> Part URI cannot start with two forward slashes.

This only happens when we use tools like Nuget Package Explorer to download the nuget. It does not seem to happen when consuming directly from Visual Studios. 

It seems this is caused by the same issue as described here: https://github.com/Microsoft/onnxruntime/issues/664 

Any chance we could get a similar fix? Thanks 
Hello!

This must be a very simple question...

I have a versioned API which is based on CotrollerBase-based controllers. We plan to introduce OData support in the next version of the API. Could you please point out what is the best practice to do it?

As a test I tried to add a ControllerBase-based controller to SwaggerODataSample. I attributed it with

```
[ApiController]
[ApiVersion( "2.0" )]
[Route("api/v2.0/TestController")]
```

The result was that loading of swagger/index.html resulted with
```
Failed to load API definition.
Fetch error
Internal Server Error /swagger/v0.9/swagger.json

```
Hello,

I want to test the ASP.NET Core example with OData API Explorer (https://github.com/microsoft/aspnet-api-versioning/tree/master/samples/aspnetcore/SwaggerODataSample))

I want to create a basic controller to transmit methods to my main controllers via inheritance.

Here is the controller I created with the Get method of PeopleController (v3):
`public class BaseController2 : ODataController
    {
        [Produces("application/json")]
        [ProducesResponseType(typeof(ODataValue<IEnumerable<Person>>), Status200OK)]
        public IActionResult Get(ODataQueryOptions<Person> options)
        {
            var validationSettings = new ODataValidationSettings()
            {
                AllowedQueryOptions = Select | OrderBy | Top | Skip | Count,
                AllowedOrderByProperties = { "firstName", "lastName" },
                AllowedArithmeticOperators = AllowedArithmeticOperators.None,
                AllowedFunctions = AllowedFunctions.None,
                AllowedLogicalOperators = AllowedLogicalOperators.None,
                MaxOrderByNodeCount = 2,
                MaxTop = 100,
            };

            try
            {
                options.Validate(validationSettings);
            }
            catch (ODataException e)
            {
                return BadRequest();
            }

            var people = new[]
            {
                new Person()
                {
                    Id = 1,
                    FirstName = "John",
                    LastName = "Doe",
                    Email = "john.doe@somewhere.com",
                    Phone = "555-987-1234",
                },
                new Person()
                {
                    Id = 2,
                    FirstName = "Bob",
                    LastName = "Smith",
                    Email = "bob.smith@somewhere.com",
                    Phone = "555-654-4321",
                },
                new Person()
                {
                    Id = 3,
                    FirstName = "Jane",
                    LastName = "Doe",
                    Email = "jane.doe@somewhere.com",
                    Phone = "555-789-3456",
                }
            };

            return Ok(options.ApplyTo(people.AsQueryable()));
        }
    }`

Then I inherit PeopleController from the BaseController.

The problem is that in swagger, the skip and top methods disappear.

Do you know how I can solve this problem?

Thank you.
This is the same issue as [here](https://github.com/aspnet/AspNetCore/issues/17242). I was instructed to open the issue here as well.

### Describe the bug
Api versioning via the URL Path fails when the status contains the same character as the literal.

### Assumption

I read over the [API Version Format documentation](https://github.com/microsoft/aspnet-api-versioning/wiki/Version-Format) to see if there were any constrains on the values that **Status** in *[Version Group.]<Major>.<Minor>[-Status]* can take, but did not find anything. I assumed that this is not desired behavior.

In our case we have a v1-preview version for some of the routes, which fails even when there is a match.

### To Reproduce

[Repo](https://github.com/bderveni/ApiVersioningIssue) with a simple Web API project to reproduce the issue. 
I have included an [insomnia](https://insomnia.rest/) config [file](https://github.com/bderveni/ApiVersioningIssue/blob/master/ApiVersioningIssue.json) with all the following calls. No postman config as I do not use it ¯\_(ツ)_/¯.

Either way the following cURL calls will work just as good once the app is running:

#### Version Parsed and matching route

##### Routes with literal A

```cURL
curl -X GET -d "" https://localhost:5001/a1/WeatherForecastVersionLiteralA
```

```cURL
curl -X GET -d "" https://localhost:5001/a1-preview/WeatherForecastVersionLiteralA
```

##### Routes with literal V

```cURL
curl -X GET -d "" https://localhost:5001/v1/WeatherForecastVersionLiteralV
```

```cURL
curl -X GET -d "" https://localhost:5001/v1-status/WeatherForecastVersionLiteralV
```

#### Version parsed but no matching routes with that version

```cURL
curl -X GET -d "" https://localhost:5001/a1-sts/WeatherForecastVersionLiteralA
```

```json
{
  "error": {
    "code": "UnsupportedApiVersion",
    "message": "The HTTP resource that matches the request URI 'https://localhost:5001/a1-sts/WeatherForecastVersionLiteralA' does not support the API version '1-sts'.",
    "innerError": null
  }
}
```

```cURL
curl -X GET -d "" https://localhost:5001/v1-sts/WeatherForecastVersionLiteralV
```

```json
{
  "error": {
    "code": "UnsupportedApiVersion",
    "message": "The HTTP resource that matches the request URI 'https://localhost:5001/a1-sts/WeatherForecastVersionLiteralA' does not support the API version '1-sts'.",
    "innerError": null
  }
}
```

#### Version not parsed (there is a matching route but that does not really matter cause it cannot that far)

##### Routes with literal A

```cURL
curl -X GET -d "" https://localhost:5001/a1-statusWithAIn/WeatherForecastVersionLiteralA
```

```json
{
  "error": {
    "code": "ApiVersionUnspecified",
    "message": "An API version is required, but was not specified.",
    "innerError": null
  }
}
```

##### Routes with literal V

```cURL
curl -X GET -d "" https://localhost:5001/v1-statusWithVIn/WeatherForecastVersionLiteralV
```

```json
{
  "error": {
    "code": "ApiVersionUnspecified",
    "message": "An API version is required, but was not specified.",
    "innerError": null
  }
}
```

### Culprit

The app uses serilog and is configured to log debug messages from the middleware.

The following messages provided good insight into where the issue was:

```log
[Debug] ({ Id: 1002, Name: "CandidateRejectedByComplexSegment" }) Endpoint '"RouteVersioningIssue.Controllers.WeatherForecastVersionLiteralVController.Get (RouteVersioningIssue)"' with route pattern '"v{version:apiVersion}/WeatherForecastVersionLiteralV"' was rejected by complex segment '"v{version:}"' for the request path '"/v1-statusWithVIn/WeatherForecastVersionLiteralV"'

[Debug] ({ Id: 1003, Name: "CandidateRejectedByConstraint" }) Endpoint '"RouteVersioningIssue.Controllers.WeatherForecastVersionLiteralVController.Get (RouteVersioningIssue)"' with route pattern '"v{version:apiVersion}/WeatherForecastVersionLiteralV"' was rejected by constraint '"version"':'"Microsoft.AspNetCore.Mvc.Routing.ApiVersionRouteConstraint"' with value 'null' for the request path '"/v1-statusWithVIn/WeatherForecastVersionLiteralV"'

[Debug] ({ Id: 1004, Name: "CandiateNotValid" }) Endpoint '"RouteVersioningIssue.Controllers.WeatherForecastVersionLiteralVController.Get (RouteVersioningIssue)"' with route pattern '"v{version:apiVersion}/WeatherForecastVersionLiteralV"' is not valid for the request path '"/v1-statusWithVIn/WeatherForecastVersionLiteralV"'
```

After some debugging I think the issue is at the following [line](https://github.com/aspnet/AspNetCore/blob/6cc99ea04f8254da4963740e627fc2e61b446063/src/Http/Routing/src/Patterns/RoutePatternMatcher.cs#L384).

After LastIndexOf(literal.Content, StringComparison.OrdinalIgnoreCase) the literal ends up being the corresponding matching char in the **Status** instead of the first character. The parameter is determined at this [line](https://github.com/aspnet/AspNetCore/blob/6cc99ea04f8254da4963740e627fc2e61b446063/src/Http/Routing/src/Patterns/RoutePatternMatcher.cs#L454). As a result the condition at this [line](https://github.com/aspnet/AspNetCore/blob/6cc99ea04f8254da4963740e627fc2e61b446063/src/Http/Routing/src/Patterns/RoutePatternMatcher.cs#L495) is not satisfied and the complex segment is not matched, hence the behavior. 

### Further technical details

- Microsoft.AspNetCore.Mvc.Versioning 4.0.0

- ASP.NET Core version

 Microsoft.AspNetCore.App 3.0.0

- Include the output of `dotnet --info`

```
.NET Core SDK (reflecting any global.json):
 Version:   3.0.100
 Commit:    04339c3a26

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.17763
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.0.100\

Host (useful for support):
  Version: 3.0.0
  Commit:  7d57652f33
```
- The IDE (VS / VS Code/ VS4Mac) you're running on, and it's version

Microsoft Visual Studio Professional 2019, Version 16.3.9
Hello @commonsensesoftware ,

You might remember that helped me to write an extension to this library a while back. #458 

https://github.com/purplebricks/PB.ITOps.AspNetCore.Versioning

It adds the attributes `IntroducedInApiVersion` and `RemovedAsOfApiVersion`.

I've just updated this to support asp.net core 3.

I think you were going to add this as an example of how to extend functionality of the library to the docs? Would you still like to do this? If so, would you like me to send a PR? 