There's no proper example in the documentation which is giving me a big headache how to properly implement this functionality.

I've been trying to implement a multi threaded Telegram download client. For single downloads we can simply use the download_media functionality.

But telethon offers iter_download function, as per documenation it is used for streaming which also includes pausing and resuming functionality. We can use this to download a single file with multiple connections.

This is what I've scripted so far. No where to find any solid examples for multi connection download

```
async def multi_downloader(file, total_size, part, offset, part_size):

f = open('output.mkv.'+str(part), 'wb')
size = 0

global chunk_size
limit = 10485760#closestInteger(part_size / chunk_size, 10485760)
print(limit)
print(part)
async for chunk in client.iter_download(obj, offset = offset, limit = limit, chunk_size = chunk_size, request_size = chunk_size, file_size = total_size):
    f.write(chunk)
    f.flush()
    size += (len(chunk))
    if size >= (part_size):
        print("Part "+str(part)+" completed. "+str(part_size))
        break
f.close()
```
The thing is it always throws the invalid limit error, if I change the offset for seeking. If the offset is zero then everything is fine.

> telethon.errors.rpcerrorlist.LimitInvalidError: An invalid limit was provided. See https://core.telegram.org/api/files#downloading-files (caused by GetFileRequest)
Original report from https://t.me/TelethonChat/185248:

> Hi, i have a problem when i try to `send_file` as album with vids, like this:
> ```python
> vids = ['1.mp4', '2.mp4']
> client.send_file('me', vids)
> ```
> Client sends only first vid and ignores other. I also added `supports_streaming`.
> Has anyone come across this?
This is still a work in progress so expect more commits to it. 
Used https://core.telegram.org/api/end-to-end at first but it wasn't clear enough so I followed their advice and checked one of the implementations that had it https://github.com/danog/MadelineProto so this PR is based on daniil's implementation at its core.

- [x] Accepting secret chats  
- [x] Creating secret chats 
- [x] Closing secret chats 
- [x] Sending text messages 
- [x]  Recieving text messages 
- [ ] Uploading/downloading media 
- [x] Dealing with rekeying¹
- [ ] Saving secret chats keys to database²
- [ ] Saving messages to database³
- [ ] Automatic decryption/accepting/finishing⁴

¹ Every 100 messages you need to recreate the auth key.
² Auth keys are saved client sides so if you restart the script you will lose all secret chats you had and can no longer recieve messages from them
³ There is no get_messages function in secret chats so users can't see old messages.
⁴ Since event building are sync we currently can't decrypt implitctly and the user has to do it themselves.


Examples : 

```

@client.on(events.SecretChat(to_finish=True))
async def finishing(event):
    await event.finish()


@client.on(events.SecretChat(to_accept=True))
async def accepting(event):
    await event.accept()


@client.on(events.SecretChat(to_decrypt=True))
async def decrypting(event: events.SecretChat):
    message = await event.decrypt()
    if message and message.message == "hi":
        await event.reply("Hello")

```

The reason we use `if message` is because sometimes when you decrypt a message the result isn't relevant. for example https://core.telegram.org/constructor/decryptedMessageActionNoop or https://core.telegram.org/constructor/decryptedMessageActionNotifyLayer

If we were able to explicity decrypt the messages this wouldn't be needed. 

You also need to use sequential_updates=True for this to work because sometimes the library is still accepting the chat and a new message comes. 
Hi! I am using Redis session backend, and it seems inappropriate to me to use synchronous session backends, that rely on IO operations.
Is there any way to create a new base Session class, that uses async functions (and, maybe, properties?) and subclass current Session class from it?
There should be some sort of delay, such that if all senders were returned and a certain amount of time passed, *then* we can disconnect them. [The current implementation skips the time check](https://github.com/LonamiWebs/Telethon/blob/ccbc1c669c6351022676186c19b6953da1f702ad/telethon/client/telegrambaseclient.py#L651), which means that:
```python
async for m in client.iter_messages(chat):
    await m.download_media()
```

…may be constantly having to connect and disconnect a sender, while it would be better if the connection was kept for a while. 
Please add support for all the `InlineQueryResultCached*` results for media objects stored on telegram servers.

A possible use case could look like this:

```python
async def inline_query_event_handler(self, event: InlineQuery) -> None:
   await event.answer([
            event.builder.cached_photo(
                Path('testpicture_pixeled.jpg'),
                ....
            )
       ])
```

https://core.telegram.org/bots/api#inlinequeryresult
```
InlineQueryResultCachedAudio
InlineQueryResultCachedDocument
InlineQueryResultCachedGif
InlineQueryResultCachedMpeg4Gif
InlineQueryResultCachedPhoto
InlineQueryResultCachedSticker
InlineQueryResultCachedVideo
InlineQueryResultCachedVoice
```

**Checklist**
* [x] The error is in the library's code, and not in my own.
* [x] I have searched for this issue before posting it and there isn't a duplicate.
* [x] I ran `pip install -U https://github.com/LonamiWebs/Telethon/archive/master.zip` and triggered the bug in the latest version.

**Description**
Megagroups and channels on test server is giving a negative 13 digit number on Bot API, but Telethon is only masking it with prepending -100.

For example, a megagroup is giving `-1000010567596` as its ID on bot API, but Telethon is recognising it as `-10010567596` (since the raw ID is `10567596`).

**Steps of reproduction**
1. Log in with any real account (99966- accounts will not work) on a **test server**.
2. Create a bot with @BotFather
3. Create a megagroup / channel (“Chat A” onwards) and add the bot in.
4. Send a message in Chat A
5. Get the masked ID of Chat A via bot API (entry point: `https://api.telegram.org/botTOKEN/test/getUpdates`).
6. Log in with the same account on test server using Telethon and run code below:

```python
from telethon.sync import TelegramClient

client = TelegramClient(None, APP_ID, APP_SECRET)
client.session.set_dc(TEST_DC_ID, HOST, PORT)
client.start(phone='PHONE_NUMBER')

masked_id = -1000010567596
entity = client.get_entity(masked_id)
```

**Traceback**
```
>       entity = client.get_entity(masked_id)   # masked_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../../efb-dev-env/lib/python3.7/site-packages/telethon/client/users.py:284: in get_entity
    functions.messages.GetChatsRequest(chats))).chats
../../efb-dev-env/lib/python3.7/site-packages/telethon/client/users.py:53: in __call__
    future = self._sender.send(request, ordered=ordered)
../../efb-dev-env/lib/python3.7/site-packages/telethon/network/mtprotosender.py:172: in send
    state = RequestState(request, self._loop)
../../efb-dev-env/lib/python3.7/site-packages/telethon/network/requeststate.py:17: in __init__
    self.data = bytes(request)
../../efb-dev-env/lib/python3.7/site-packages/telethon/tl/functions/messages.py:1141: in __bytes__
    b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.id)),b''.join(struct.pack('<i', x) for x in self.id),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <list_iterator object at 0x121a066d0>

>       b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.id)),b''.join(struct.pack('<i', x) for x in self.id),
    ))
E   struct.error: required argument is not an integer
```

**Additional contexts**

Part of code responsible of masking channel ID
https://github.com/LonamiWebs/Telethon/blob/0683d9771a891efc07266451117b5f6295fbf2a3/telethon/utils.py#L927-L928
Maybe it would be wise to have some form of base class that indicates "this can be converted into this input type".
I try to connect to the telegram client like this:

**Code that causes the issue**
```python
    lclient = TelegramClient(phone, api_id, api_hash)
    lclient.connect()
    if not lclient.is_user_authorized():
        lclient.send_code_request(phone)
        lclient.sign_in(phone, input('Enter the code: '))
    return lclient

...

```

for some reason the connection just gets stuck. Not a timeout error or anything just staying on client.connect() for hours.
I tried to set a timeout for the execution time but all the solutions I've found are working with linux via ``` import signal```.

I saw that @Lonami fixed that problem when someone else posted the issue, but I still get that same bug in the updated telethon package.
What can I do?

I can't found an easy way to create a new private channel and get the chat_id in return, can anyone say to me what to see?