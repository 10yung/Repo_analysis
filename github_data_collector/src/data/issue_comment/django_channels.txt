Let's assume we have a WebSocket consumer wrapped in a ``AuthMiddlewareStack`` (SessionMiddleware).

```
application = ProtocolTypeRouter({
    'websocket': AllowedHostsOriginValidator(
        AuthMiddlewareStack(
            URLRouter(
                # ...
            )
        ),
    )
})
```

As an anonymous user I ``connect()`` to my consumer, modify the session store and save it.
```
self.scope["session"]["test"] = 123
self.scope["session"].save()
```

This will create (default Django configuration) a new row in the database table ``public.django_session``. Doing this [in a traditional view](https://stackoverflow.com/questions/32458657/django-sessions-for-anonymous-users#answer-49709138) Django will take care to send the ``sessionid`` cookie back to the user by setting the corresponding host header in the response object. Channels (with a WebSocket consumer) behaves differently as the client will never get informed about his sessionid and therefore his corresponding store. The session for an anonymous user is lost when the user reconnects.

One hacky workaround could look like this:

```
 def connect(self):
    headers = {}
    if settings.SESSION_COOKIE_NAME not in self.scope['cookies']:
        session_store = self.scope['session']
        session_store['test'] = 123
        session_store.save()
        headers['Set-Cookie'] = f'{settings.SESSION_COOKIE_NAME}={session_store.session_key}'
        self.scope['cookies'][settings.SESSION_COOKIE_NAME] = session_store.session_key
     self.accept(subprotocol=(None, headers))
```

Any thoughts on that? Is there a better way to handle such a scenario?


_____
Update: Maybe the following code is a bit better:

```
        headers = {}
        session_store = self.scope['session']
        if not session_store.session_key:
            session_store.create()
            headers['Set-Cookie'] = f'{settings.SESSION_COOKIE_NAME}={session_store.session_key}'
        self.accept(subprotocol=(None, headers))
```
In Custom Authentication section of documentation,  there is database query in `__call__` method:

```
def __call__(self, scope):
        ...
        user = User.objects.get(id=int(scope["query_string"]))
        ...
```

It's OK with Django 2, but in Django 3 it cause `django.core.exceptions.SynchronousOnlyOperation` error.
please update docs, and explain how to use database query in Custom Authentications.
Thanks.
I have done
> pip install django
> pip install channels
> django-admin start project mysite
> cd mysite
> python manage.py startapp chat
Added the new 'chat' app in 'installed_apps'
Created chat/index.html
Then created chat/views.py
.....
Added 'channels' in 'installed_apps'
Added ASGI_APPLICATION = 'mysite.routing.application' in mysite/settings.py
At this point when I execute:
> python manage.py runserver
I'm using this on Win 10 machine.
I'm getting the following error : 

Exception in thread django-main-thread:
Traceback (most recent call last):
  File "c:\users\win10\appdata\local\programs\python\python38-32\Lib\threading.py", line 932, in _bootstrap_inner
    self.run()
  File "c:\users\win10\appdata\local\programs\python\python38-32\Lib\threading.py", line 870, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\django\utils\autoreload.py", line 53, in wrapper
    fn(*args, **kwargs)
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\django\core\management\commands\runserver.py", line 109, in inner_run
    autoreload.raise_last_exception()
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\django\utils\autoreload.py", line 76, in raise_last_exception
    raise _exception[1]
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\django\core\management\__init__.py", line 357, in execute
    autoreload.check_errors(django.setup)()
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\django\utils\autoreload.py", line 53, in wrapper
    fn(*args, **kwargs)
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\django\__init__.py", line 24, in setup
    apps.populate(settings.INSTALLED_APPS)
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\django\apps\registry.py", line 91, in populate
    app_config = AppConfig.create(entry)
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\django\apps\config.py", line 116, in create
    mod = import_module(mod_path)
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\importlib\__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 975, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 671, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 783, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\channels\apps.py", line 6, in <module>
    import daphne.server
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\daphne\server.py", line 20, in <module>
    asyncioreactor.install(twisted_loop)
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\twisted\internet\asyncioreactor.py", line 320, in install
    reactor = AsyncioSelectorReactor(eventloop)
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\twisted\internet\asyncioreactor.py", line 69, in __init__
    super().__init__()
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\twisted\internet\base.py", line 571, in __init__
    self.installWaker()
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\twisted\internet\posixbase.py", line 286, in installWaker
    self.addReader(self.waker)
  File "C:\Users\win10\PycharmProjects\profilics\chatenv\lib\site-packages\twisted\internet\asyncioreactor.py", line 151, in addReader
    self._asyncioEventloop.add_reader(fd, callWithLogger, reader,
  File "c:\users\win10\appdata\local\programs\python\python38-32\Lib\asyncio\events.py", line 501, in add_reader
    raise NotImplementedError
NotImplementedError

Does anyone have idea why I'm getting this error?

I have put my code to this repo's master branch : 
https://github.com/rahimnagori/django-channel

You may also check the code if you wish to.
I'm using windows machine.
For the same change in Django, see PR django/django#12013 and issue [30948](https://code.djangoproject.com/ticket/30948).

I tried to convert `setup.py` 1:1 to `setup.cfg` with the following exceptions:
- Add `long_description`
- Add classifier `Programming Language :: Python :: 3 :: Only`
PR #1389 moved minimum supported Django to 2.2 so these old code paths can be removed.
I recently used Django channels for the first time and there was a gap in the documentation which made things a fair bit harder than it could have been.

I wanted to send a message to a single channel. Eventually I found the a section in the docs on this page. https://channels.readthedocs.io/en/latest/topics/channel_layers.html 
(where it says "To send to a single channel, just find its channel name (for the example above, we could crawl the database), and use channel_layer.send:")

However the code sample included the "type" parameter. I didn't realize for a long time that this type parameter has to match the name of a function of the consumer. I think it would really help if there was an extra sentence in the docs which could explain this.
I think I spent about 2-3 hours stumped by putting the wrong value into the "type" field, or getting "type" field missing errors.
If you want me to make a PR with a few sentences explaining the "type" field I'll give it a go.

PS. On the whole I had a very good experience using channels. The tutorial was especially good! Thanks for your work.
```
python 3.8
channels==2.3.1
channels-redis==2.4.1
daphne==2.4.0
Django==2.2.8
```

Entrypoint is daphne on alpine linux.  
Consumer is quite simple:

```

class Consumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.user = self.scope["user"]
        self.name = self.scope["url_route"]["kwargs"]["name"]
        # this line is changed by different subclasses
        self.group_name = "%s%s" % ("chat-", self.name)

        await self.accept()
        # Join group
        await self.channel_layer.group_add(self.group_name, self.channel_name)

        if not True: # auth check
            await self.send(text_data="not authorized")
            await self.close()

    # Receive message from group
    async def m(self, event):
        message = event["m"]

        # Send message to WebSocket
        await self.send(text_data=json.dumps(message))
```

This is the error that comes up after a random amount of disconnects:
```
2019-12-15 15:57:32,107 WARNING  Application instance <Task pending name='Task-21465' coro=<SessionMiddlewareInstance.__call__() running at /usr/local/lib/python3.8/site-packages/channels/sessions.py:178> wait_for=<Future pending cb=[_chain_future.<locals>._call_check_cancel() at /usr/local/lib/python3.8/asyncio/futures.py:357, <TaskWakeupMethWrapper object at 0x7f7ebec32910>()]>> for connection <WebSocketProtocol client=['127.0.0.1', 41380] path=b'/api/ws/chat/ddd8ce11-50d0-456a-b8d8-15a068682d1e/'> took too long to shut down and was killed.
2019-12-15 15:57:33,108 ERROR    Exception in callback AsyncioSelectorReactor.callLater.<locals>.run() at /usr/local/lib/python3.8/site-packages/twisted/internet/asyncioreactor.py:287
handle: <TimerHandle when=1090864.949068441 AsyncioSelectorReactor.callLater.<locals>.run() at /usr/local/lib/python3.8/site-packages/twisted/internet/asyncioreactor.py:287>
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/asyncio/events.py", line 81, in _run
    self._context.run(self._callback, *self._args)
  File "/usr/local/lib/python3.8/site-packages/twisted/internet/asyncioreactor.py", line 290, in run
    f(*args, **kwargs)
  File "/usr/local/lib/python3.8/site-packages/daphne/server.py", line 275, in application_checker
    exception = application_instance.exception()
asyncio.exceptions.CancelledError
```

Subsequent requests, http and ws, aren't served anymore. Timeout.

Any insight into this at all is greatly appreciated!
I am using channels 2.3.1 with daphne 2.4.0 - which I can confirm fixed https://github.com/django/channels/issues/962. Unfortunately, while it doesn't hang anymore, it segfaults when the server connects to a PostgreSQL server with psycopg2 (built on OSX, not using the provided binaries).

It only happens specifically on OSX and when running a ChannelsLiveServerTestCase - not on debian or when using runserver.

I'm not able to provide logs as of now, but if you need it I can provide them tomorrow, with a minimal project to try and reproduce this issue.
#### Reproduction Repo

Minimal reproducible example with steps - https://github.com/iamareebjamal/channels-multipart-bad-request

#### Bug

Most probably relate to #1100

Consider a multipart request as such:

Body:
```
--d66f495a-c4d1-487c-9277-9ab1a20001cc
Content-Disposition: form-data; name="content"
Content-Type: multipart/form-data; charset=utf-8

Anything
--d66f495a-c4d1-487c-9277-9ab1a20001cc--
```

Header:
`Content-Type: multipart/form-data; boundary=d66f495a-c4d1-487c-9277-9ab1a20001cc`

And any simple handler/view in Django. For example, one that just returns `Hello World` without even processing the request data. 

For Python 3.6 (tested with Python 3.6.9 and 3.6.6), the channels server (dev server [runserver] and daphne both) handle multipart requests correctly. The specified view is called and the request is handled and correct response with `200 OK` status code is returned. 

For the same channels and Django version, if the Python version is switched to 3.7+ (tested with Python 3.7.0 3.7.4 3.7.5 3.8.0), the server returns `400 Bad Request` and empty response body. The request does not even reach any view or middleware regardless of the view processing the request or statically returning content like in the example repo above. No exception is raised even with django log level set to `DEBUG`. Although I have not tested if the channels logger is separate and logs anything else. At least it does not log in default settings or throw any exception.

As seen in the example repo, the entire environment is same except the python version. And hence, the behaviour of channels should be same across Python versions as well. 

#### Environment

##### pip freeze

Identical for both versions

###### Python 3.7

```
asgiref==3.2.3
attrs==19.3.0
autobahn==19.11.1
Automat==0.8.0
certifi==2019.11.28
cffi==1.13.2
channels==2.3.1
chardet==3.0.4
constantly==15.1.0
cryptography==2.8
daphne==2.4.0
Django==2.2.7
hyperlink==19.0.0
idna==2.8
incremental==17.5.0
pyasn1==0.4.8
pyasn1-modules==0.2.7
pycparser==2.19
PyHamcrest==1.9.0
pyOpenSSL==19.1.0
pytz==2019.3
requests==2.22.0
service-identity==18.1.0
six==1.13.0
sqlparse==0.3.0
Twisted==19.10.0
txaio==18.8.1
urllib3==1.25.7
zope.interface==4.7.1
```

###### Python 3.6

```
asgiref==3.2.3
attrs==19.3.0
autobahn==19.11.1
Automat==0.8.0
certifi==2019.11.28
cffi==1.13.2
channels==2.3.1
chardet==3.0.4
constantly==15.1.0
cryptography==2.8
daphne==2.4.0
Django==2.2.7
hyperlink==19.0.0
idna==2.8
incremental==17.5.0
pyasn1==0.4.8
pyasn1-modules==0.2.7
pycparser==2.19
PyHamcrest==1.9.0
pyOpenSSL==19.1.0
pytz==2019.3
requests==2.22.0
service-identity==18.1.0
six==1.13.0
sqlparse==0.3.0
Twisted==19.10.0
txaio==18.8.1
urllib3==1.25.7
zope.interface==4.7.1
```

##### OS

Tested on:
- Linux/Ubuntu 19.10
- Linux/Mint 19.1
Hi
I faced with some issue when run ASGI/Channels development server. When request with different method (POST, PATH ...) , Always get "GET" method in my code. I try to print my method with this sample code:

@csrf_exempt
def test(request):
    return JsonResponse({"method": request.method})