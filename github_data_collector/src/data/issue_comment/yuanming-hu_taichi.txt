
Failed to run frozen.py, it says: [unified_allocator.cpp:UnifiedAllocator@23] Cuda Error cudaErrorMemoryAllocation: out of memory. Even I changed n_particles to 90 and n_grid to 28, it also failed and there were no other programs using GPU. But I can successfully run fractals.py.

My os: Ubuntu 18.04
CUDA version: 10.1
Taichi installation: python3 -m pip install taichi-nightly-cuda-10-1
 GPU: Quadro K4200
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 440.44       Driver Version: 440.44       CUDA Version: 10.2     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+==|
|   0  Quadro K4200        Off  | 00000000:01:00.0 Off |                  N/A |
| 33%   44C    P0    27W / 110W |      0MiB /  4033MiB |      0%      Default |
+-------------------------------+----------------------+----------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|========================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+

Log:
xxh@Boltzmann:~/taichi$ python frozen.py
[Release mode]
[T 01/18/20 16:07:32.101] [logging.cpp:Logger@68] Taichi core started. Thread ID = 9599
[Taichi version 0.3.20, cuda 10.1, commit 1c85d8e1]
Using CUDA Device [0]: Quadro K4200
Device Compute Capability: 3.0
[E 01/18/20 16:07:32.628] [unified_allocator.cpp:UnifiedAllocator@23] Cuda Error cudaErrorMemoryAllocation: out of memory
[E 01/18/20 16:07:32.628] Received signal 6 (Aborted)
***********************************
* Taichi Compiler Stack Traceback *
***********************************
/home/xxh/miniconda3/lib/python3.7/site-packages/taichi/core/../lib/taichi_core.so: taichi::signal_handler(int)
/lib/x86_64-linux-gnu/libc.so.6(+0x3ef20) [0x7f5da44adf20]
/lib/x86_64-linux-gnu/libpthread.so.0: raise
/home/xxh/miniconda3/lib/python3.7/site-packages/taichi/core/../lib/taichi_core.so: taichi::Tlang::UnifiedAllocator::UnifiedAllocator(unsigned long, bool)
/home/xxh/miniconda3/lib/python3.7/site-packages/taichi/core/../lib/taichi_core.so: taichi::Tlang::UnifiedAllocator::create(bool)
/home/xxh/miniconda3/lib/python3.7/site-packages/taichi/core/../lib/taichi_core.so: taichi::Tlang::Program::Program(taichi::Tlang::Arch)
/home/xxh/miniconda3/lib/python3.7/site-packages/taichi/core/../lib/taichi_core.so(+0xdce9c9) [0x7f5d919b99c9]
/home/xxh/miniconda3/lib/python3.7/site-packages/taichi/core/../lib/taichi_core.so(+0xb341d4) [0x7f5d9171f1d4]
python(_PyMethodDef_RawFastCallDict+0x265) [0x5555ebd9fa55]
python(_PyCFunction_FastCallDict+0x21) [0x5555ebd9fbd1]
python(_PyObject_Call_Prepend+0x63) [0x5555ebd9d943]
python(PyObject_Call+0x6e) [0x5555ebd90b9e]
python(+0xb6726) [0x5555ebd1d726]
python(_PyObject_FastCallKeywords+0x128) [0x5555ebddce28]
python(_PyEval_EvalFrameDefault+0x52cf) [0x5555ebe2ce8f]
python(_PyEval_EvalCodeWithName+0xc30) [0x5555ebd82030]
python(_PyFunction_FastCallKeywords+0x387) [0x5555ebdc7917]
python(_PyEval_EvalFrameDefault+0x4b09) [0x5555ebe2c6c9]
python(_PyFunction_FastCallDict+0x10b) [0x5555ebd8273b]
python(_PyObject_FastCall_Prepend+0x65) [0x5555ebd9d8a5]
python(+0x17586b) [0x5555ebddc86b]
python(_PyEval_EvalFrameDefault+0x120a) [0x5555ebe28dca]
python(_PyFunction_FastCallDict+0x10b) [0x5555ebd8273b]
python(_PyObject_FastCall_Prepend+0x65) [0x5555ebd9d8a5]
python(+0x17586b) [0x5555ebddc86b]
python(_PyEval_EvalFrameDefault+0x120a) [0x5555ebe28dca]
python(_PyEval_EvalCodeWithName+0x2f9) [0x5555ebd816f9]
python(PyEval_EvalCodeEx+0x44) [0x5555ebd825f4]
python(PyEval_EvalCode+0x1c) [0x5555ebd8261c]
python(+0x21c974) [0x5555ebe83974]
python(PyRun_FileExFlags+0xa1) [0x5555ebe8dcf1]
python(PyRun_SimpleFileExFlags+0x1c3) [0x5555ebe8dee3]
python(+0x227f95) [0x5555ebe8ef95]
python(_Py_UnixMain+0x3c) [0x5555ebe8f0bc]
/lib/x86_64-linux-gnu/libc.so.6: __libc_start_main
python(+0x1d0990) [0x5555ebe37990]



在控制台发现
[Taichi version 0.3.21, cpu only, commit 8f36125f]

指定 ti.cfg.arch = ti.cuda
也还是 cpu only, 不知道这是我使用问题还是提示信息没有改还是bug?

**Describe the bug**

I think there is a bug when simplifying `IfStmt`, around how it handles atomics. See the screenshots below when running `renderer.py` for a difference.

If I disable the simplification when there is an `AtomicOp` inside `IfStmt`, the bug gets resolved.

I.e., change [this line in `simplify.cpp`](https://github.com/taichi-dev/taichi/blob/0726d495c92c30568e3055ba688294e42808a624/taichi/transforms/simplify.cpp#L805) from

```cpp
  if (is_global_write(clause[i].get()) ||
```

to

```cpp
  if (clause[i]->is<GlobalStoreStmt>() ||
```

I'm running the CPU version on `macOS Catalina 10.15.2`.

**Log/Screenshots**

This is the result I got when running the renderer example on the head release `0.3.21` or the master branch 0726d495c92c30568e3055ba688294e42808a624:

<img width="1280" alt="Screen Shot 2020-01-15 at 22 28 12" src="https://user-images.githubusercontent.com/7481356/72437912-19ea9b00-37e7-11ea-9943-949095646275.png">

And if I patch in the fix, the rendered result will show the taichi logo

<img width="1281" alt="Screen Shot 2020-01-15 at 22 29 06" src="https://user-images.githubusercontent.com/7481356/72438027-58805580-37e7-11ea-8d42-d0ad5a50c227.png">


**To Reproduce**

`python examples/renderer.py`
Form many problems, having the Hessian and using a Newton-Raphson solver will greatly decrease the number of iterations needed to converge.

Is it possible to to auto Hessian calculations, mush like the auto gradient calculation now available?

Thanks,
Shai
This is a really bad anti-pattern. My bad.
**Is your feature request related to a problem? Please describe.**
List generation on GPU for struct-fors can be time-consuming especially pre-RTX.

**Describe the solution you'd like**
Automatically lower dense struct fors into range fors.
**Describe the bug**
 My environment is as blow：
```
jetson@jetson-nano:/taichi/build$ jetson_release 
 - NVIDIA Jetson NANO/TX1
   * Jetpack 4.2.1 [L4T 32.2.0]
   * CUDA GPU architecture 5.3
 - Libraries:
   * CUDA 10.0.326
   * cuDNN 7.5.0.56-1+cuda10.0
   * TensorRT 5.1.6.1-1+cuda10.0
   * Visionworks 1.6.0.500n
   * OpenCV 4.1.0 compiled CUDA: YES
 - Jetson Performance: inactive
```

**Log/Screenshots**

```
/taichi/build$ cmake .. -DPYTHON_EXECUTABLE=python3.6 -DCMAKE_C_COMPILER=/usr/local/clang-8.0.1/bin/clang -DCMAKE_CXX_COMPILER=/usr/local/clang-8.0.1/bin/clang++ 
Taichi Version 0.3.20
       Commit 04d78bf8f5dc660a3e3dc61d4305166bfe346243
Using C++ compiler: /usr/local/clang-8.0.1/bin/clang++
Clang compiler detected. Using std=c++17.
Using float32 (single) precision as real
Using python3.6 as python executable.
Python 3.6.9
    version: 3.6
    include: /usr/include/python3.6m
    library: PYTHON_LIBRARY-NOTFOUND
    numpy include: /usr/local/lib/python3.6/dist-packages/numpy/core/include
    pybind11 include: /usr/local/include/python3.6;/home/jetson/.local/include/python3.6m
Building with CUDA 10.0
Found CUDA. Arch = 61
-- Found LLVM 8.0.1
-- Using LLVMConfig.cmake in: /usr/local/clang-8.0.1/lib/cmake/llvm
llvm include dirs /usr/local/clang-8.0.1/include
-- Could NOT find OpenMP_CXX (missing: OpenMP_CXX_FLAGS OpenMP_CXX_LIB_NAMES) 
-- Could NOT find OpenMP (missing: OpenMP_CXX_FOUND) 
OpenMP not found.
PYTHON_LIBRARIESPYTHON_LIBRARY-NOTFOUND
C++ Flags:  -DTC_ISE_NONE -std=c++17 -fsized-deallocation -Wall  -DTC_PASS_EXCEPTION_TO_PYTHON -DTC_INCLUDED -g -DCUDA_FOUND -DTLANG_WITH_CUDA -D TLANG_CUDA_VERSION='"10.0"'
Build type: RelWithDebInfo
-- Configuring done
-- Generating done
-- Build files have been written to: /home/jetson/taichi/build

jetson@jetson-nano: /taichi/build$ make
Scanning dependencies of target taichi_core
[  1%] Building CXX object CMakeFiles/taichi_core.dir/taichi/analysis/value_diff.cpp.o
In file included from /home/jetson/taichi/taichi/analysis/value_diff.cpp:3:
In file included from /home/jetson/taichi/taichi/analysis/../ir.h:6:
In file included from /home/jetson/taichi/taichi/util.h:7:
In file included from /home/jetson/taichi/taichi/common/loader.h:8:
In file included from /home/jetson/taichi/taichi/common/interface.h:8:
In file included from /home/jetson/taichi/taichi/common/dict.h:17:
In file included from /home/jetson/taichi/taichi/math/math.h:9:
In file included from /home/jetson/taichi/taichi/math/geometry_util.h:11:
In file included from /home/jetson/taichi/taichi/math/linalg.h:13:
In file included from /usr/local/clang-8.0.1/lib/clang/8.0.1/include/immintrin.h:28:
**/usr/local/clang-8.0.1/lib/clang/8.0.1/include/mmintrin.h:47:5: error: use of undeclared identifier '__builtin_ia32_emms'; did you mean '__builtin_isless'?**
    __builtin_ia32_emms();
    ^
/usr/lib/gcc/aarch64-linux-gnu/7/../../../../include/c++/7/cmath:743:12: note: '__builtin_isless' declared here
  { return __builtin_isless(__x, __y); }
           ^
In file included from /home/jetson/taichi/taichi/analysis/value_diff.cpp:3:
In file included from /home/jetson/taichi/taichi/analysis/../ir.h:6:
In file included from /home/jetson/taichi/taichi/util.h:7:
In file included from /home/jetson/taichi/taichi/common/loader.h:8:
In file included from /home/jetson/taichi/taichi/common/interface.h:8:
In file included from /home/jetson/taichi/taichi/common/dict.h:17:
In file included from /home/jetson/taichi/taichi/math/math.h:9:
In file included from /home/jetson/taichi/taichi/math/geometry_util.h:11:
In file included from /home/jetson/taichi/taichi/math/linalg.h:13:
In file included from /usr/local/clang-8.0.1/lib/clang/8.0.1/include/immintrin.h:28:
/usr/local/clang-8.0.1/lib/clang/8.0.1/include/mmintrin.h:47:25: error: too few arguments to function call, expected 2, have 0
    __builtin_ia32_emms();
                        ^
/usr/local/clang-8.0.1/lib/clang/8.0.1/include/mmintrin.h:64:19: error: use of undeclared identifier '__builtin_ia32_vec_init_v2si'
    return (__m64)__builtin_ia32_vec_init_v2si(__i, 0);
                  ^
/usr/local/clang-8.0.1/lib/clang/8.0.1/include/mmintrin.h:81:12: error: use of undeclared identifier '__builtin_ia32_vec_ext_v2si'
    return __builtin_ia32_vec_ext_v2si((__v2si)__m, 0);
           ^
.....
fatal error: too many errors emitted, stopping now [-ferror-limit=]
20 errors generated.
CMakeFiles/taichi_core.dir/build.make:62: recipe for target 'CMakeFiles/taichi_core.dir/taichi/analysis/value_diff.cpp.o' failed
make[2]: *** [CMakeFiles/taichi_core.dir/taichi/analysis/value_diff.cpp.o] Error 1
CMakeFiles/Makefile2:67: recipe for target 'CMakeFiles/taichi_core.dir/all' failed
make[1]: *** [CMakeFiles/taichi_core.dir/all] Error 2
Makefile:83: recipe for target 'all' failed
make: *** [all] Error 2
```
Can anyone tell me how to solve it?

