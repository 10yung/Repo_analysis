Is there a way to color the full line based on its level? For instance, if the level is error, the color of the full line would be red.
## Motivation

I have some projects using _fern_ where I'm sensitive to new dependencies. I noticed on upgrade that _fern_ 0.5.9 promoted _chrono_ to a (non-dev) dependency. The projects in question didn't already use _chrono_, and via cargo tree one can see that _chrono_ itself has additional dependencies:

``` txt
fern v0.5.9
â”œâ”€â”€ chrono v0.4.10
â”‚   â”œâ”€â”€ num-integer v0.1.41
â”‚   â”‚   â””â”€â”€ num-traits v0.2.10
â”‚   â”‚       [build-dependencies]
â”‚   â”‚       â””â”€â”€ autocfg v0.1.7
â”‚   â”‚   [build-dependencies]
â”‚   â”‚   â””â”€â”€ autocfg v0.1.7 (*)
â”‚   â”œâ”€â”€ num-traits v0.2.10 (*)
â”‚   â””â”€â”€ time v0.1.42
â”‚       â””â”€â”€ libc v0.2.65
â”‚       [dev-dependencies]
â”‚       â””â”€â”€ winapi v0.3.8
â””â”€â”€ log v0.4.8
    â””â”€â”€ cfg-if v0.1.9
```

## Solution

Add a _date-based_ feature and gate `DateBased` and the _chrono_ dependency on that feature.

Since _fern_ doesn't have any other default features, currently _date-based_ is left non-default as well.

## Alternatives

Alternatively _date-based_ could be the first default feature, which has the advantage being an entirely PATCH safe change from 0.5.9. But fern is still pre-1.x and I wonder what percentage of _fern_ users are currently using `DateBased`?

Its somewhat unclear regarding the long term future of _chrono_ vs alternative crates like _humantime_ and a more recent proposal to revive the _time_ crate with a new release: time-rs/time#190.  Thus I think a non-default _chrono_ dependency is a safer bet.


Should be fairly straightforward, we can do the same thing we did for the syslog3/4 distinction for adding support for syslog 5. Main work is in rewriting full examples to use syslog 5.

There were some things that syslog 3 could do, but syslog 4 couldn't. I can't remember off the top of my head what they were. If syslog 5 fixes these, and is at least as capable as both syslog 3 and 4, we can remove syslog 3/4 examples and leave only actual library code, replacing them entirely with syslog 5 examples.
> ```
> [2019-09-29 22:37:40][[32mINFO [0m][test] Hello, world!
> [2019-09-29 22:37:40][[33mWARN [0m][test] Hello, world!
> [2019-09-29 22:37:40][[31mERROR[0m][test] Hello, world!
> ```

Is there a way to prevent fern from writing color codes into files?
for example we could use it like this:

```rust
fern::Dispatch::new()
    // ...
    .format(move |out, message, record| {
        out.finish(format_args!(
            "[{}] {}",
            // if out.color, we render it with ANSI color (e.g. io::stdout())
            // otherwise render it as plain text (e.g. fern::log_file)
            if out.color { colors.color(record.level()) } else { record.level() },
            message
        ))
    })
```
like after an hour
I want it to log into `logs/mm-dd-yyyy.log`, but if the program is online for more than a day this will become outdated, how would I make it automatically switch to the next day's file?
Ideally, this would be a stdout-like color output stream which parsed ANSI color codes and transformed them into the correct output on both Windows and UNIX terminals.

Crates of note:

- https://crates.io/crates/termcolor provides a platform-agnostic colored stdout writer. The downside is each color needs to be specified via a method, it can't parse ANSI color codes passed to it.
- https://crates.io/crates/wincolor is the backend termcolor uses on windows (we might want to just depend on this if we don't need to do anything else on linux)

Ideas for implementation:

- We can test the functionality in fern, but it would probably be good to separate out "stream which turns ANSI color codes into windows commands" into a separate crate.
- If we find a simpler ANSI color code only crate, we might want to remove our dependency on https://crates.io/crates/colored. We don't use very much of its functionality right now, so we'd have a lighter footprint if we switched to something which only provided ANSI codes.
I'm planning to use fern in the asynchronous app and non-blocking logging is vital for us.

How can I setup fern to implement async logging? Can it write logs in a separate thread or at least use mpsc::channel as an output?