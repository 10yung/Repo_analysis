**Describe the bug**

Trying to do the following using the default `docker-compose` setup causes Git to throw the following arbitrary errors due to unexpected filesystem syscalls failures, such as `ENOENT` on `getcwd`. When some of those happen, even the shell calling Git often becomes confused about what its current pwd is, ending up showing it as `(unknown)`

```sh
# After starting the docker-compose setup
docker run --rm -it --network seaweedfs_default --device /dev/fuse --cap-add SYS_ADMIN --entrypoint /bin/sh chrislusf/seaweedfs
apk add fuse git
mkdir /mnt/seaweedfs
weed mount -filer filer:8888 -dir /mnt/seaweedfs &
cd /mnt/seaweedfs
git config --global user.name test
git config --global user.email test@test.test
git init test
echo Hello, World! > hello.txt
git add hello.txt
git commit
cd ..
touch foo
git init test2
```

Errors:
```
fatal: not a git repository (or any parent up to mount point /mnt)
Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).
```

```
fatal: unable to get current working directory: No such file or directory
sh: getcwd: No such file or directory
```

**System Setup**
- The default `docker-compose` setup from here: [docker/seaweedfs-compose.yml](https://github.com/chrislusf/seaweedfs/blob/e4b660699f0e49944c8e951cb552d215da29471f/docker/seaweedfs-compose.yml)
- The default from the `docker-compose` setup: Alpine 3.10.2, on top of Docker for Mac 2.1.0.5 on macOS 10.14.6.
- output of `weed version`: version 30GB 1.50 linux amd64
- if using filer, show the content of `filer.toml`

**Expected behavior**
Git should work correctly like it does on a local disk.
Hi,

is there any way to convert a ec volume back to a normal volume ?

best regards,
Stefan
If the upload file size limit is configured, any file larger than the limit would not be uploaded.

Default to no limit.


**Describe the bug**
Getting timeout over 10 seconds from volumeserver while doing GC

**System Setup**
```
/usr/local/bin/weed -logtostderr master -mdir=/mnt/data01/meta -ip=10.1.21.17 -defaultReplication=010 -volumePreallocate -volumeSizeLimitMB 30000 -pulseSeconds 10 -peers=10.1.21.17:9333,10.1.21.18:9333,10.1.21.19:9333
/usr/local/bin/weed -logtostderr -v=1 volume -port=8080 -mserver=10.1.21.17:9333,10.1.21.18:9333,10.1.21.19:9333 -dir=/mnt/data01/data,/mnt/data02/data -index leveldb -max 3866,3866 -ip 10.1.21.17 -rack photol-107
```
- OS version: Ubuntu 16.04
- output of `weed version`: version 30GB 1.44 linux amd64

**Expected behavior**
Do not get highly reduced performance while doing GC

**Screenshots**
https://www.jottacloud.com/s/006d6b606b06d544986b1cdd288d7a3524d

**Logs**
Logs from the volume server shows alot of log and a broken pipe in the periods of timeout:
https://gist.github.com/roflmao/5f27a6944c8ab25deb521e65bde675b2

**Additional context**
GC by:
```
$ curl "http://localhost:9333/vol/vacuum?garbageThreshold=0.05"
```

store original S3 bucket info, and use it to copy or sync data.
Sponsors SeaweedFS via Patreon https://www.patreon.com/seaweedfs

**Describe the bug**
[README#Installation-guide](https://github.com/chrislusf/seaweedfs#installation-guide) Step 3 contains command:
`go get github.com/chrislusf/seaweedfs/weed`

It builds weed here without compiler errors, but `weed` binary panicing same as in #1058 :
```
panic: /debug/requests is already registered. You may have two independent copies of golang.org/x/net/trace in your binary, trying to maintain separate state...
goroutine 1 [running]:
go.etcd.io/etcd/vendor/golang.org/x/net/trace.init.0()
    /mnt/src/user/projects/pkgbuild/seaweedfs-git/src/src/go.etcd.io/etcd/vendor/golang.org/x/net/trace/trace.go:123 +0x1cd
```

**BUT**, if `weed` is built via `git clone ...` + `make` (without `go get ...`), everything is ok.

**System Setup**
- `/usr/bin/weed server -dir=/home/user/weedfs -volume.max=10 -volume.port=8080 -volume.publicUrl=192.168.0.1:9000`
- OS version: ArchLinux, fresh
- output of `weed version`:
  - `version 30GB 1.44 linux amd64`
  - `seaweedfs-git r2620.7de121d9-1`

**Additional context**
I'm maintainer of [seaweedfs-git PKGBUILD in Archlinux AUR](https://aur.archlinux.org/packages/seaweedfs-git/) for last 4 years.
I've not checked build last ~4 months, but before this time everything in `PKGBUILD` was worked without issues and strongly according to `README`'s build instructions. Today, it switched to `make` due to panic in `weed`.
Can use WinFsp to support Windows Mount as FUSE?
WinFsp is a set of software components for Windows computers that allows the creation of user mode file systems. In this sense it is similar to FUSE (Filesystem in Userspace), which provides the same functionality on UNIX-like computers. 
The RClone use it to mount filesystem in windows.
This is project url: https://github.com/billziss-gh/winfsp  http://www.secfs.net/winfsp/download/
https://jepsen.io/

Would iron out any potential bugs.
Volume server count how many object has been written, 
if the number of objects is bigger than threshold, sync the kernel cache.

===
给volume server加了启动参数fsyncThreshold，volume每写fsyncThreshold个对象，执行一次fsync。
Seaweedfs topo:
host1(rack1): master1, volume1
host2(rack2): master2, volume2
host3(rack3): master3, volume3

Replication: 010

High Availability Goal: tolerance one machine crashed

Assume an object is going to be stored in volume1 and volume2, but suddenly host1 crashed, object failed to store in volume1 completely. When host1 come back, a client call for that object, Seaweedfs would tell the client to find object in volume1 or volume2. But volume1 do not contain that object, cause error.

My solution for this issue:
Implement a proxy layer in volume. When volume failed to find an object, ask master for the volumes list, proxy the request to another volume. When get the object, write the object to the local disk again.

===
假设有个对象将要写入volume1和volume2，host1突然宕机了，对象在host1没有落盘。后续host1恢复服务后，客户端请求这个对象时，Seaweedfs会告诉客户去volume1或volume2取数据，但是volume1并没有这个对象，会返回错误。

我的解决方案：
给volume加个代理层，如果volume找不到一个对象，先尝试去别的volume找，找到后，返回给客户，并回写本地磁盘。

如果你觉得这个修复方案可以的话，我可以尝试实现。
