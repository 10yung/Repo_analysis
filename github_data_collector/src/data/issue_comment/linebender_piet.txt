This is related to https://github.com/xi-editor/druid/issues/430 and exposes `current_transform()` and required for https://github.com/xi-editor/druid/pull/466
## My environment
**Windows 7 SP1** (build 7601) x64
rustc **1.39.0** (4560ea788 2019-11-04)
nVidia GTX 1060 (**397.93**)

The tests fail with both `stable-x86_64-pc-windows-msvc` and `stable-x86_64-pc-windows-gnu`.

## These two tests fail in `piet-direct2d`

```
test test::test_hit_test_point_complex ... FAILED
test test::test_hit_test_text_position_complex_1 ... FAILED

---- test::test_hit_test_point_complex stdout ----
text pos 2: Some(HitTestTextPosition { point: (6.275390625, 0.0), metrics: HitTestMetrics { text_position: 2 } })
text pos 9: Some(HitTestTextPosition { point: (13.365234375, 0.0), metrics: HitTestMetrics { text_position: 9 } })
text pos 10: Some(HitTestTextPosition { point: (19.833984375, 1.546875), metrics: HitTestMetrics { text_position: 10 } })
text pos 14: Some(HitTestTextPosition { point: (28.669921875, 0.0), metrics: HitTestMetrics { text_position: 14 } })
thread 'test::test_hit_test_point_complex' panicked at 'assertion failed: `(left == right)`
  left: `6`,
 right: `2`', piet-direct2d\src\lib.rs:1001:9

---- test::test_hit_test_text_position_complex_1 stdout ----
thread 'test::test_hit_test_text_position_complex_1' panicked at 'assertion failed: x <= max && x >= min', piet-direct2d\src\lib.rs:707:9
```

## `piet-web` also has a bunch of test failures

### Chrome 78.0.3904.108 (64-bit) fails these three

#### test_hit_test_point_basic_0
```
piet_web_example.js:506 text pos 4: Some(HitTestTextPosition { point: (17.994140625, 0.0), metrics: HitTestMetrics { text_position: 4 } })
piet_web_example.js:506 text pos 5: Some(HitTestTextPosition { point: (20.994140625, 0.0), metrics: HitTestMetrics { text_position: 5 } })
RuntimeError: unreachable
    at __rust_start_panic (wasm-function[396]:0x1ab88)
    at rust_panic (wasm-function[254]:0x1a1a6)
    at std::panicking::rust_panic_with_hook::h5e7c2dc110ae79d4 (wasm-function[142]:0x172f1)
    at std::panicking::continue_panic_fmt::hb5b3e4b5160fe2ab (wasm-function[175]:0x18978)
    at std::panicking::begin_panic_fmt::h62d8474306d91923 (wasm-function[206]:0x19622)
    at piet_web_example::test::test_hit_test_point_basic_0::h63a9a73ce15a91e1 (wasm-function[66]:0x80af)
    at run (wasm-function[76]:0xd6ac)
    at Module.run (webpack:///./dist/piet_web_example.js?:68:66)
    at eval (webpack:///./index.js?:4:16)
```

#### test_hit_test_point_basic_1
```
RuntimeError: unreachable
    at __rust_start_panic (wasm-function[394]:0x1a723)
    at rust_panic (wasm-function[254]:0x19d6e)
    at std::panicking::rust_panic_with_hook::h5e7c2dc110ae79d4 (wasm-function[142]:0x16eb9)
    at std::panicking::continue_panic_fmt::hb5b3e4b5160fe2ab (wasm-function[175]:0x18540)
    at std::panicking::begin_panic_fmt::h62d8474306d91923 (wasm-function[206]:0x191ea)
    at piet_web_example::test::test_hit_test_point_basic_1::h48971481aa43754a (wasm-function[72]:0xba70)
    at run (wasm-function[76]:0xd29d)
    at Module.run (webpack:///./dist/piet_web_example.js?:68:66)
    at eval (webpack:///./index.js?:4:16)
```

#### test_hit_test_point_complex_1
```
RuntimeError: unreachable
    at __rust_start_panic (wasm-function[394]:0x1a4af)
    at rust_panic (wasm-function[254]:0x19afa)
    at std::panicking::rust_panic_with_hook::h5e7c2dc110ae79d4 (wasm-function[142]:0x16c45)
    at std::panicking::continue_panic_fmt::hb5b3e4b5160fe2ab (wasm-function[175]:0x182cc)
    at std::panicking::begin_panic_fmt::h62d8474306d91923 (wasm-function[206]:0x18f76)
    at piet_web_example::test::test_hit_test_point_complex_1::hd758df858f1cc9ef (wasm-function[75]:0xcc4f)
    at run (wasm-function[76]:0xd07b)
    at Module.run (webpack:///./dist/piet_web_example.js?:68:66)
    at eval (webpack:///./index.js?:4:16)
```

### Firefox 71.0 (64-bit) fails these different three

#### test_hit_test_point_basic_0
```
piet_web_example.js:506:13
text pos 4: Some(HitTestTextPosition { point: (18.0, 0.0), metrics: HitTestMetrics { text_position: 4 } }) piet_web_example.js:506:13
text pos 5: Some(HitTestTextPosition { point: (21.0, 0.0), metrics: HitTestMetrics { text_position: 5 } }) piet_web_example.js:506:13
RuntimeError: "unreachable executed"
    run webpack:///./dist/piet_web_example.js?:68
    <anonymous> webpack:///./index.js?:4
```

#### test_hit_test_point_complex_0
```
piet_web_example.js:506:13
text pos 2: Some(HitTestTextPosition { point: (5.333333492279053, 0.0), metrics: HitTestMetrics { text_position: 2 } }) piet_web_example.js:506:13
text pos 9: Some(HitTestTextPosition { point: (11.333333015441895, 0.0), metrics: HitTestMetrics { text_position: 9 } }) piet_web_example.js:506:13
text pos 10: Some(HitTestTextPosition { point: (17.33333396911621, 0.0), metrics: HitTestMetrics { text_position: 10 } }) piet_web_example.js:506:13
text pos 14: Some(HitTestTextPosition { point: (26.16666603088379, 0.0), metrics: HitTestMetrics { text_position: 14 } }) piet_web_example.js:506:13
RuntimeError: "unreachable executed"
    run webpack:///./dist/piet_web_example.js?:68
    <anonymous> webpack:///./index.js?:4
```

#### test_hit_test_point_complex_1
```
piet_web_example.js:506:13
RuntimeError: "unreachable executed"
    run webpack:///./dist/piet_web_example.js?:68
    <anonymous> webpack:///./index.js?:4
```

## Discussion

Does anyone have ideas why the tests might be failing? @hwchen

This PR expands the `draw_image` API call by adding a `src_rect` parameter. The drawing works as before, but now it uses the area of the image that is specified.

This is motivated by an image gallery app I'm writing using druid, where I need to show different areas of known images for every animation frame.

Previously this was possible by either having different images in memory or using `clip`. The new API makes it easier and probably more efficient.

Keeping ergonomics in mind for people who just want to draw the whole image (or upgrade to this new API) I also wanted it to be easy to do that. I tried a few ways of doing this.

First idea was to use `Option<impl Into<Rect>>` but unfortunately this ended up looking less than ideal.

```rust
Some(Rect::new(10.0, 10.0, 20.0, 20.0)) // Subimage
None as Option<Rect> // Whole image, the compiler demands the type info for None
```

Thus I ended up using just `impl Into<Rect>` with a special case. Less typing and better errors.

```rust
Rect::new(10.0, 10.0, 20.0, 20.0) // Subimage
Rect::ZERO // Whole image, can also be any rect for which .area() == 0
```
Lightly tested; produces output similar to the cairo backend for test images 1, 3 and 4. Attempts to use text and images will produce `NotSupported` error; the `unimplemented` invocations are all statically unreachable as a result.

For some reason I couldn't get SVG line elements to display, but paths work fine and are more concise anyway.
WIP for finishing integration of raw d2d bindings.

- move d3d api into `piet-direct2d`
- integrate `piet-common` with `piet-direct2d`

Note: on my maching (windows 10 in virtualbox) the test fails for `piet-direct2d`, not sure why.

TODO: text

These are fairly important public types, and currently undocumented.
I'm sure this is on some font roadmap I'm too lazy to look for, so feel free to close as a dupe if appropriate:

When drawing text (via `RenderCtx::draw_text`) we supply a position where the text should draw. This is an origin in "text space", that is with `(0,0)` at the intersection of the baseline with the left edge.

Unfortunately, there's no way to know where the baseline is relative to the overall height. (There's also no real way of getting the overall height, afaict, although what "height" means is not well defined; I would settle for "the union of the bounding boxes of all glyphs in the font").

Anyway: this is more a practical issue than a font-metaphysics issue. It would be nice if we could, in the general case, draw some text in a box with equal padding on the top and bottom. A reasonable first step for this would be exposing general metrics like ascender/descender.
Creating a PR to trigger azure to run; let me know if there's a way to do this on my fork.

The eventual goal is to be able to build piet-cairo for Windows in CI.
Line breaking:

- [ ] confirm trait methods and basic docs
- [ ] update directwrite
- [ ] update cairo
- [ ] update web