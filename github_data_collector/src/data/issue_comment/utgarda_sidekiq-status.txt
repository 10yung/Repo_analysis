When I call `perform_async` on an encrypted worker it hits the branch in `api.rb` (379 is a print line I added) that anonymizes things:

![image](https://user-images.githubusercontent.com/261668/66246532-9e4a5f80-e6c9-11e9-9ac8-dd3fdac686c9.png)

This caused the value `[encrypted data]` to be encrypted and stored in redis. When the job is run, it appropriately decrypts the data and passes that literal string `"[encrypted data]"` to the method.

This plugin [calls `display_args`](https://github.com/utgarda/sidekiq-status/blob/master/lib/sidekiq-status/client_middleware.rb#L38) which then calls down into the base implementation of `display_args`.

Making my jobs that need encryption bypass calling `include Sidekiq::Status::Worker` has fixed the issue for me.

I don't know the middleware stack well enough to know if there is a fix for this or the "solution" is simply not using status workers but I thought I should file something to help others out.
I'm trying to test some controllers of my application with rspec, one of them use background jobs with sidekiq and sidekiq-status.
I folowed the guide (https://github.com/utgarda/sidekiq-status#testing) to enabling testing for inline mode but when i launch tests Redis::CannotConnectError exceptions is fired.
The worker is launched inside a method of my controller with:

``` job_id = ProductImportWorker.perform_async(file_path) ```

in spec_helper.rb i added the folowing lines:

```ruby
  require 'sidekiq/testing/inline'
  require 'sidekiq-status/testing/inline'
  Sidekiq::Testing.inline!
```

Folowing the code of my worker class:

```ruby
class ProductImportWorker

  include Sidekiq::Worker
  include Sidekiq::Status::Worker # enables job status tracking

  def perform(file_path, debug = false)

    logger.info "ProductImportWorker START import from file: #{file_path} ..."
    # read all import_data hash from file saved in temp directory


    unless File.exist?(file_path)
      raise "source file not found"
    end

    import_data = File.open(file_path, "r") {|from_file| Marshal.load(from_file)}

    moltiplicator = 100.0 / import_data&.size

    logger.info "ProductImportWorker START import #{import_data&.size} products..."
    # set first sidekiq status percentage end message
    at 0, "Started"

    ActiveRecord::Base.transaction do

      import_data.each_with_index do |product_hash, index|

        if debug
          sleep(0.05)
        else
          # for each product verify if it exists, then update it, else create a new one
          internal_code = product_hash.dig(:internal_code)
          existing_product = Product.find_by_internal_code(internal_code.to_s)
          if existing_product # Update existing product
            existing_product.update!(product_hash)
          else # Create a new product
            Product.create!(product_hash)
          end
        end

        # percentage of completion overall process
        perc = ((index + 1) * moltiplicator).to_i
        logger.info "CREATED product #{index}, completion: #{perc}%"
        # update sidekiq status percentage end message
        at perc, "Waiting ..."

      end
    end

    File.delete(file_path) if File.exist?(file_path)

    logger.info "ProductImportWorker FINISH"
    at 100, "Finish"
  end
end
```
if i comment `include Sidekiq::Status::Worker` with all `at` commands the worker is executed and test pass so the `sidekiq/testing/inline` works.
Seems that import `require 'sidekiq-status/testing/inline'` doesn't work properly, someone has encountered the same problem ?

If you pass a string value in for the class name, the `Module.const_defined?` will not return true if the constant has not yet been loaded.  In a Rails environment this can be a bummer due to the lazy loading in Rails.  To address this, we can instead attempt to load the const and if a NameError occurs, we'll just return `nil` as the original code would have done.

I ran into this when using the `#push_bulk` feature of Sidekiq.  Jobs created using that method did not get created properly as status workers if the class name was a string and not yet loaded.
When I use `#get_all`, I get an empty hash during my test. Am I missing something?
Pressing the Remove button of completed jobs inside the Statuses tab leads to a 404.

This is the HTML element of the generated button.

```html
<div class="actions">
  <form action="statuses" method="post">
    <input type="hidden" name="jid" value="a33...35b">
    <input type="hidden" name="authenticity_token" value="PHx...U8=">
    <input type="hidden" name="_method" value="delete">
    <input type="submit" class="btn btn-danger btn-xs" value="Remove">
  </form>
</div>
```

I am mounting the dashboard using `Rack::URLMap` - but it is mounted as the root and using current versions of everything.

This has me stumped because it will fail 3-4 times out of 10 but I can't understand it.

#142 
We are using 1.1.0 and we have long running jobs which are not getting their expiration set

```
After a first status:
>> redis.ttl "sidekiq:status:#{id}"
=> 1793

When finished
>> redis.ttl "sidekiq:status:#{id}"
=> 86368
```

I am not able to replicate consistently. But I have a test case that fails when running multiple times. Linking to this issue.
I have a worker with a method that takes a long time to execute and would like to update the progress status within this method. Currently my plan is to pass the job ID to the method and then periodically update it but i cannot work out how to do this, I have only managed to retrieve the status but not set it.

```
class MyJob < ApplicationJob
  queue_as :default

  def perform(*args)
    total 100
    at 5
    slow_method(self.provider_job_id)
  end
end
```

The other class with the method called in it:

```
class OtherClass
    def slow_method(job_id)
    ??????
end
```
Redis is up and running. Background process is working normal.  On web monitor job is visible but statuses empty. 
With simple sidekiq-status functions from docs I'm geting nil, empty or false results. Problem started when I changed my workstation to new one. 

Please check my SO question about empty status for Sidekiq status in Redis.
#[SO detailed question](https://stackoverflow.com/questions/51802889/rails-sidekiq-status-is-empty-in-redis)

Using:

1. Ruby 2.5.1
2. Rails 5.1.6
3. Redis 4.0.1
4. Sidekiq 5.1.3
5. Sidekiq-status 1.0.2
I noticed that I can get all of my jobs into the status reporting interface but mailers sent with `deliver_later` do not seem to be picked up.  Is there an easy way to include mailers as well?