I'd like to make three changes to the project, for the sake of project cleanliness:
1) Change our formatting configuration to use Unix EOLs globally.
2) Add `cargo fmt --check` to our CI
3) Configure Clippy in our CI

These changes will have the following dev flow impositions:
- PRs will not be able to be merged until `cargo fmt` is ran.
- PRs will not be able to be merged until `cargo clippy` returns clean.

If we're fine with these changes, I can go ahead an implement them.

### Further reading
Clippy - https://github.com/rust-lang/rust-clippy/blob/master/README.md
Rustfmt - https://github.com/rust-lang/rustfmt/blob/master/README.md
I have been thinking about opportunities for us to harden everything, and we could *theoretically* add `Subresource Integrity` to the build pipeline. Since that whole flow is entirely controlled by tauri and we can fingerprint the assets are guaranteed to be the same, we could potentially use this for external validation of the app - where a notary knows the checksums and the app validates these checksums or `die()`.

Here is something to read about SRI
https://sri.js.org/
Custom URL schemes provide a way to reference resources inside an app. Users tapping a custom URL e.g. `yourapp://foo?bar` in an email, for example, launch the app in a specified context. Other apps can also trigger the app to launch with specific context data; for example, a photo library app might display a specified image.

Tauri could have a simplified API to register/unregister the custom URI scheme protocol a listener.

A Rust package https://github.com/maidsafe/system_uri exists that does System App URI registration for macOS, Linux and Windows. Unfortunately, this package does not support passing also the url params to the application - it only triggers the application launch. An example implementation together with Tauri  -https://github.com/iotaledger/spark-wallet/blob/master/src-tauri/src/main.rs

<!--
Please make sure to read the Pull Request Guidelines:
https://github.com/tauri-apps/tauri/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines
-->

<!-- PULL REQUEST TEMPLATE -->
<!-- (Update "[ ]" to "[x]" to check a box) -->

**What kind of change does this PR introduce?** (check at least one)
<!--
If you are introducing a new binding, you must reference an issue where this binding has been proposed, discussed and approved by the maintainers.
-->

- [ ] Bugfix
- [x] Feature
- [ ] New Binding Issue #___
- [ ] Code style update
- [ ] Refactor
- [ ] Build-related changes
- [ ] Other, please describe:

**Does this PR introduce a breaking change?** (check one)
<!--
If yes, please describe the impact and migration path for existing applications in an attached issue. Filing a PR with breaking changes that has not been discussed and approved by the maintainers in an issue will be immediately closed.
-->

- [ ] Yes. Issue #___
- [x] No


**The PR fulfills these requirements:**

- [x] It's submitted to the `dev` branch and _not_ the `master` branch
- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix: #xxx[,#xxx]`, where "xxx" is the issue number)

If adding a **new feature**, the PR's description includes:
- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)

**Other information:**

When using a SPA built with Nuxt, the site does not load correctly - it just shows a loading/error page, and a couple of errors appear in the console.
This happens using both `embeddedServer.active` `true` and `false`, as well as running the tauri app in dev mode, and ensuring the `build.devPath` points to a local server (I.e. [npm.im/serve](https://npm.im/serve)) running the exact same `dist` folder (although @nklayman said that [was not the case for him](https://discordapp.com/channels/616186924390023171/625037620996734986)).

The logs that appear are as follows:

`embeddedServer.active: true`
`SCRIPT5022: SCRIPT5022: Expected identifier, string or number`

`embeddedServer.active: false`
`HTML1507: Unexpected character: U+0000 NULL. Null characters should not be used.`



**To Reproduce**
1. Create a new project with NuxtJS, and make sure to select `spa` mode.
2. Build the project with `yarn build`, and either init tauri, or copy the dist folder to a tauri project.
3. Configure `tauri.conf.json` to use the `dist` folder as `distDir`.
4. Build the tauri project, and run it.

**Expected behavior**
The SPA site should load correctly inside the app, as happens with a usual VueJS app.

**Screenshots**
Loading/Error screen:
![image](https://user-images.githubusercontent.com/12587127/72166213-bd3f4880-33c0-11ea-9e77-8ef288239506.png)


**Platform and Versions:**

**Operating System** - Windows_NT(10.0.19541) - win32/x64   

**Node.js environment**
    Node.js - 13.5.0
    tauri.js - 0.3.1

**Rust environment**
  rustc - 1.40.0
  cargo - 1.40.0
  tauri-cli - 0.1.2

**Global packages**
  NPM - 6.13.4
  yarn - 1.21.1

**App directory structure**
/src-tauri

**App**
  tauri - 0.3.1
  mode - no-server
  build-type - bundle
  CSP - default-src res: blob: data: filesystem: ws: http: https: 'unsafe-eval' 'unsafe-inline'
  Windows - Edge
  distDir - dist
  devPath - http://localhost:5000

**Is your feature request related to a problem? Please describe.**
Build for operating systems different from host system

**Describe the solution you'd like**
Rust, Electron all have mature cross compilation systems 

I develop webapp in a separate front-end project, and publish and operate independently.

but also want to build a native app, use native features.

The current configuration file does not allow this configuration.

<!--
Please make sure to read the Pull Request Guidelines:
https://github.com/tauri-apps/tauri/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines
-->

<!-- PULL REQUEST TEMPLATE -->
<!-- (Update "[ ]" to "[x]" to check a box) -->

**What kind of change does this PR introduce?** (check at least one)
<!--
If you are introducing a new binding, you must reference an issue where this binding has been proposed, discussed and approved by the maintainers.
-->

- [ ] Bugfix
- [x] Feature
- [ ] New Binding Issue #___
- [ ] Code style update
- [ ] Refactor
- [ ] Build-related changes
- [ ] Other, please describe:

**Does this PR introduce a breaking change?** (check one)
<!--
If yes, please describe the impact and migration path for existing applications in an attached issue. Filing a PR with breaking changes that has not been discussed and approved by the maintainers in an issue will be immediately closed.
-->

- [ ] Yes. Issue #___
- [x] No


**The PR fulfills these requirements:**

- [x] It's submitted to the `dev` branch and _not_ the `master` branch
- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix: #xxx[,#xxx]`, where "xxx" is the issue number)

If adding a **new feature**, the PR's description includes:
- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)

**Other information:**

OS: Windows

This is a replacement for #190, as after more research the title has become misleading and the issue is becoming clearer.

EdgeHTML is currently bugged: [`webview.eval()`](https://docs.rs/web-view/0.5.4/web_view/struct.WebView.html#method.eval) may fail silently when executed in a closure dispatched during startup. Related [issue](https://github.com/zserge/webview/issues/301) on webview.

<details><summary>Show Case</summary>

```rs
use web_view::*

fn main() {
    let webview = web_view::builder()
        .title("Timer example")
        .content(Content::Html(HTML))
        .size(800, 600)
        .resizable(true)
        .debug(true)
        .user_data(0)
        .invoke_handler(|_webview, _arg| Ok(()))
        .build()
        .unwrap();

    // to showcase the bug, we try to add multiple items to the page.
    // only some will show. If your computer is too performant, maybe none
    // if that happens make the for loop bigger.

    let handle = webview.handle();
    for i in 0..1000 {
        handle.dispatch(move |webview| {
            webview.eval(&format!("document.body.appendChild(document.createElement('p')).appendChild(document.createTextNode('Item {}'))", i))
        }).unwrap();
    }
    webview.run().unwrap();
}

const HTML: &str = r#"
<!doctype html>
<html>
    <body>
        <h1>Hello World!</h1>
    </body>
</html>
"#;
```
</details>

~~MSHTML works, but we must wait for an event loop iteration by using [`webview.step()`](https://docs.rs/web-view/0.5.4/web_view/struct.WebView.html#method.step), or the JS execution will fail and crash the app.~~
**Edit:** Update: this issue is now fixed in webview 0.6

<details><summary>Show Case</summary>

```rs
use web_view::*;

fn main() {
    let webview = web_view::builder()
        .title("Timer example")
        .content(Content::Html(HTML))
        .size(800, 600)
        .resizable(true)
        .debug(true)
        .user_data(0)
        .invoke_handler(|webview, arg| {
            match arg {
                "test" => webview.eval("test()")?,
                _ => unimplemented!()
            };
            Ok(())
        })
        .build()
        .unwrap();
        
    webview.handle().dispatch(|webview| {
        // we must wait one itteration of the even loop before executing js.
        webview.step().unwrap();
        webview.eval("test()")
    }).unwrap();

    webview.run().unwrap();
}

const HTML: &str = r#"
<!doctype html>
<html>
    <body>
        <h1>Hello World!</h1>
        <button onclick="external.invoke('test')">test</button>
    </body>
    <script>
        function test () {
            alert('Hi there!')
        }
    </script>
</html>
"#;
```
</details>

The new webview rewrite adds an [init](https://github.com/zserge/webview/blob/webview-x/webview.h#L87) method that will solve these problems, but there is no ETA.

The relevant code in tauri is [here](https://github.com/tauri-apps/tauri/blob/dev/tauri/src/app/runner.rs#L103)

I've only been able to test this on my machine, so others could have different experiences.

Hi, pretty new here, but as a discussion where ongoing on the project Discord, doing a tracking issue for this seemed like a good idea (Disclaimer : I'm not an accessibility expert at all, let alone a Tauri one, so suggestions are highly encouraged)

Accessibility is something very important, it allows people with vision problems and movement difficulties to use our application.

Electron cover this issue by using Chromium, that since it's a fully featured web browser, already have accessibility feature built-in.

Tauri, on the other side, use many system independent webviews, we must make sure to exploit all their built-in accessibility features, and if possible.

While Tauri can't force everyone into doing accessible application, we must make sure that many point are covered by it :

- Make sure screen readers have access to the website content. Aka being able to read it like a website.
- Make sure others inputs aren't overridden by Tauri, like arrows, tabs, shift + tabs, so navigation on websites can be possible. 