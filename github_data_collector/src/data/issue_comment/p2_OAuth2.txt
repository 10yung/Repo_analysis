re: pod 'p2.OAuth2', '~> 4.2'

The documentation says,

> PKCE support is controlled by the useProofKeyForCodeExchange property, and the use_pkce key in the settings dictionary. It is disabled by default. When enabled, a new code verifier string is generated for every authorization request.

 I have added:

`let oauth2 = OAuth2CodeGrant(settings: [
            "client_id": clientID,
            "client_secret": clientSecret,
            "authorize_uri": "https://api.redacted.com/oauth/authorize",
            "token_uri": "https://api.redacte4d.com/oauth/token",   // code grant only
            "redirect_uris": [redirectURL],
            "scope": scope,
            "secret_in_body": false,
            "keychain": false,
            "use_pkce": true,
        ] as OAuth2JSON)`

I have no idea where I'm supposed to use "useProofKeyForCodeExchange" and when I search the pod's code I can't find either useProofKeyForCodeExchange or use_pkce referenced anywhere.

I'm getting the error below after a successful OAuth login and token exchange. It seems to happen when the token is being written to the keychain. The token never gets persisted. 

It seems like it could be related to code signing/permissions but I'm not sure. Has anyone else experienced this? I'm on macOS 10.15.1 and it's a pretty simple menu bar app. 
```
[Debug] OAuth2: Did exchange code for access [true] and refresh [true] tokens
[Debug] OAuth2: Storing tokens to keychain
2019-11-05 15:48:09.781351-0700 bar for YNAB[13464:509270] [logging-persist] cannot open file at line 43353 of [378230ae7f]
2019-11-05 15:48:09.781437-0700 bar for YNAB[13464:509270] [logging-persist] os_unix.c:43353: (0) open(/var/db/DetachedSignatures) - Undefined error: 0
[Warn!] OAuth2: Failed to store tokens to keychain: Error Domain=swift.keychain.error Code=-25299 "(null)"
```
Since iOS 13, ASWebAuthenticationSession requires that a presentation context is provided in order to present the authentication UI. This context (`ASWebPresentationAnchor`) is typealiased to `UIWindow` on iOS.

This PR implements the necessary provider by returning the `authorizeContext` from `OAuath2Config`.

I also return the `error.asOAuth2Error` in the completion handler, as without it the web authentication session was failing silently on iOS 13.
Added to WatchOS  target using swift PM, but getting "Use of unresolved identifier 'OAuth2Authorizer'/OAuth2CustomAuthorizer" error

/OAuth2/Sources/Flows/OAuth2.swift:80:16: Use of unresolved identifier 'OAuth2Authorizer'
/OAuth2/Sources/Flows/OAuth2PasswordGrant.swift:70:61: Use of unresolved identifier 'OAuth2CustomAuthorizer'
We have just uploaded one of our apps with p2.OAuth2 to AppStoreConnect, and got the following warning from Apple:

> We identified one or more issues with a recent delivery for your app. Your delivery was successful, but you may wish to correct the following issues in your next delivery:
ITMS-90809: Deprecated API Usage - Apple will stop accepting submissions of apps that use UIWebView APIs . See https://developer.apple.com/documentation/uikit/uiwebview for more information.
After youâ€™ve corrected the issues, you can use Xcode or Application Loader to upload a new binary to App Store Connect.

A quick Xcode search found that the only usage of UIWebView in our app was in p2.OAuth2. We currently use version 5.0.0
Is it possible to leverage the new Swift Codeable JSONDecoder() with responseJSON()?

https://developer.apple.com/documentation/foundation/jsondecoder
In the password grant, username and password should not be persisted in memory after using tryCredentials(username:password:). In the case of short lived access/refresh tokens, the grant instance uses the username and password persisted in memory to request a new access token instead of presenting the login controller for the user to re-enter credentials.

The client should not persist these for future use according to RFC 6749 1.3.3.
> Even though this grant type requires direct client access to the
> resource owner credentials, the resource owner credentials are used
> for a single request and are exchanged for an access token.  This
> grant type can eliminate the need for the client to store the
> resource owner credentials for future use, by exchanging the
> credentials with a long-lived access token or refresh token.


[Debug] OAuth2: Forgetting tokens and removing them from keychain

[Warn!] OAuth2: Failed to delete tokens from keychain: Error Domain=swift.keychain.error Code=-25300 "(null)"

still not working for me, if any one have solution please send me..
I tried to add p2/OAuth2 via Xcode 11's new SPM support. That didn't work because SwiftKeychain.

So I created this PR and https://github.com/yankodimitrov/SwiftKeychain/pull/20. Seems to work.
Greetings,

I have a request. With all of the updates with Swift 5 and Alamofire, I was wondering if we might get an updated example of the retrier for Alamofire 5.  

Thanks!

Mark