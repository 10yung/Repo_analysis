## Description of problem

I had an app running and since I've renamed it, it doesn't work anymore. Checking the logs I found some binaries (which were installed on the buildpacks) were missing and then the `dokku buildpacks <new-name>` listed no buildpacks. After adding the needed buildpacks I can't make the app run.


### How reproducible

### Steps to Reproduce

1. Create an app
2. Deploy the app
3. Run `dokku apps:rename <old-name> <new-name>`
4. Run `dokku ps:restart <new-name>`

#### Actual Results

- Buildpacks won't be added automatically to the new app
- App won't deploy (after some attempts of running `ps:resrtart it finally worked)

#### Expected Results

- New app will run as the old one (it's just a rename, afterall)

## Environment Information

### `dokku report APP_NAME` output

```
-----> uname: Linux fazzer 4.19.0-6-amd64 #1 SMP Debian 4.19.67-2+deb10u1 (2019-09-20) x86_64 GNU/Linux
-----> memory: 
                     total        used        free      shared  buff/cache   available
       Mem:           7877        1311         118         164        6447        6113
       Swap:         15998         611       15387
-----> docker version: 
       Client: Docker Engine - Community
        Version:           19.03.5
        API version:       1.40
        Go version:        go1.12.12
        Git commit:        633a0ea838
        Built:             Wed Nov 13 07:25:38 2019
        OS/Arch:           linux/amd64
        Experimental:      false
       
       Server: Docker Engine - Community
        Engine:
         Version:          19.03.5
         API version:      1.40 (minimum version 1.12)
         Go version:       go1.12.12
         Git commit:       633a0ea838
         Built:            Wed Nov 13 07:24:09 2019
         OS/Arch:          linux/amd64
         Experimental:     false
        containerd:
         Version:          1.2.10
         GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
        runc:
         Version:          1.0.0-rc8+dev
         GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
        docker-init:
         Version:          0.18.0
         GitCommit:        fec3683
-----> docker daemon info: 
       Client:
        Debug Mode: true
       
       Server:
        Containers: 23
         Running: 4
         Paused: 0
         Stopped: 19
        Images: 48
        Server Version: 19.03.5
        Storage Driver: overlay2
         Backing Filesystem: extfs
         Supports d_type: true
         Native Overlay Diff: true
        Logging Driver: json-file
        Cgroup Driver: cgroupfs
        Plugins:
         Volume: local
         Network: bridge host ipvlan macvlan null overlay
         Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
        Swarm: inactive
        Runtimes: runc
        Default Runtime: runc
        Init Binary: docker-init
        containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339
        runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657
        init version: fec3683
        Security Options:
         apparmor
         seccomp
          Profile: default
        Kernel Version: 4.19.0-6-amd64
        Operating System: Debian GNU/Linux bullseye/sid
        OSType: linux
        Architecture: x86_64
        CPUs: 4
        Total Memory: 7.693GiB
        Name: fazzer
        ID: DEAK:LH2U:M3MZ:6VEF:BVXZ:5OZC:UOF3:I7G2:KQDS:UGUX:M7AN:S3P2
        Docker Root Dir: /var/lib/docker
        Debug Mode: false
        Registry: https://index.docker.io/v1/
        Labels:
        Experimental: false
        Insecure Registries:
         127.0.0.0/8
        Live Restore Enabled: false
       
-----> sigil version: 0.4.0
-----> herokuish version: 
       herokuish: 0.5.5
       buildpacks:
         heroku-buildpack-multi     v1.0.0
         heroku-buildpack-ruby      v207
         heroku-buildpack-nodejs    v166
         heroku-buildpack-clojure   v84
         heroku-buildpack-python    v162
         heroku-buildpack-java      v66
         heroku-buildpack-gradle    v31
         heroku-buildpack-scala     v86
         heroku-buildpack-play      v26
         heroku-buildpack-php       v166
         heroku-buildpack-go        v136
         buildpack-nginx            v12
-----> dokku version: dokku version 0.19.12
-----> dokku plugins: 
       plugn: 0.3.2
         00_dokku-standard    0.19.12 enabled    dokku core standard plugin
         20_events            0.19.12 enabled    dokku core events logging plugin
         app-json             0.19.12 enabled    dokku core app-json plugin
         apps                 0.19.12 enabled    dokku core apps plugin
         builder-dockerfile   0.19.12 enabled    dokku core builder-dockerfile plugin
         builder-herokuish    0.19.12 enabled    dokku core builder-herokuish plugin
         buildpacks           0.19.12 enabled    dokku core buildpacks plugin
         certs                0.19.12 enabled    dokku core certificate management plugin
         checks               0.19.12 enabled    dokku core checks plugin
         common               0.19.12 enabled    dokku core common plugin
         config               0.19.12 enabled    dokku core config plugin
         docker-options       0.19.12 enabled    dokku core docker-options plugin
         domains              0.19.12 enabled    dokku core domains plugin
         enter                0.19.12 enabled    dokku core enter plugin
         git                  0.19.12 enabled    dokku core git plugin
         letsencrypt          0.9.1 enabled    Automated installation of let's encrypt TLS certificates
         logs                 0.19.12 enabled    dokku core logs plugin
         mongo                1.9.1 enabled    dokku mongo service plugin
         network              0.19.12 enabled    dokku core network plugin
         nginx-vhosts         0.19.12 enabled    dokku core nginx-vhosts plugin
         plugin               0.19.12 enabled    dokku core plugin plugin
         postgres             1.9.1 enabled    dokku postgres service plugin
         proxy                0.19.12 enabled    dokku core proxy plugin
         ps                   0.19.12 enabled    dokku core ps plugin
         repo                 0.19.12 enabled    dokku core repo plugin
         resource             0.19.12 enabled    dokku core resource plugin
         scheduler-docker-local 0.19.12 enabled    dokku core scheduler-docker-local plugin
         shell                0.19.12 enabled    dokku core shell plugin
         ssh-keys             0.19.12 enabled    dokku core ssh-keys plugin
         storage              0.19.12 enabled    dokku core storage plugin
         tags                 0.19.12 enabled    dokku core tags plugin
         tar                  0.19.12 enabled    dokku core tar plugin
         trace                0.19.12 enabled    dokku core trace plugin
=====> metabase-test_xxx app information
       App dir:                       /home/dokku/metabase-test_xxx
       Git sha:                       8474692                  
       Deploy source:                 git                      
       Locked:                        false                    
=====> metabase-test_xxx buildpacks information
       Buildpacks list:               https://github.com/heroku/heroku-buildpack-jvm-common.git,https://github.com/metabase/metabase-buildpack
=====> metabase-test_xxx ssl information
       Ssl dir:                       /home/dokku/metabase-test_xxx/tls
       Ssl enabled:                   true                     
       Ssl hostnames:                 metabase-test_xxx.<my-domain>
       Ssl expires at:                Apr 17 01:18:40 2020 GMT 
       Ssl issuer:                    C = US, O = Lets Encrypt, CN = Lets Encrypt Authority X3
       Ssl starts at:                 Jan 18 01:18:40 2020 GMT 
       Ssl subject:                   subject=CN = metabase-test_xxx.<my-domain>
       Ssl verified:                  self signed              
=====> metabase-test_xxx checks information
       Checks disabled list:          _all_                    
       Checks skipped list:           none                     
=====> metabase-test_xxx docker options information
       Docker options build:          --link dokku.postgres.metabase_fazzer_data:dokku-postgres-metabase-fazzer-data --link dokku.postgres.metabase_fazzer_main:dokku-postgres-metabase-fazzer-main 
       Docker options deploy:         --link dokku.postgres.metabase_fazzer_data:dokku-postgres-metabase-fazzer-data --link dokku.postgres.metabase_fazzer_main:dokku-postgres-metabase-fazzer-main --restart=on-failure:10 
       Docker options run:            --link dokku.postgres.metabase_fazzer_data:dokku-postgres-metabase-fazzer-data --link dokku.postgres.metabase_fazzer_main:dokku-postgres-metabase-fazzer-main 
=====> metabase-test_xxx domains information
       Domains app enabled:           true                     
       Domains app vhosts:            metabase-test_xxx.<my-domain>
       Domains global enabled:        true                     
       Domains global vhosts:         test_xxx.<my-domain>      
=====> metabase-test_xxx git information
       Git deploy branch:             master                   
       Git global deploy branch:      master                   
       Git keep git dir:              false                    
       Git rev env var:               GIT_REV                  
=====> metabase-test_xxx network information
       Network bind all interfaces:   false
       Network listeners:             172.17.0.4:5000 172.17.0.4:5000 172.17.0.8:5000 172.17.0.5:5000
=====> metabase-test_xxx nginx information
       Nginx bind address ipv4:                                
       Nginx bind address ipv6:       ::                       
=====> metabase-test_xxx proxy information
       Proxy enabled:                 true                     
       Proxy type:                    nginx                    
       Proxy port map:                http:80:5000 https:443:5000
=====> metabase-test_xxx ps information
       Processes:                     4                        
       Deployed:                      true                     
       Running:                       false                    
       Restore:                       true                     
       Restart policy:                on-failure:10            
       Ps can scale:                  true                     
       Status web.1:                  exited     (CID: 9e24d923f571)
       Status web.2:                  exited     (CID: 16af1687c39a)
       Status web.3:                  exited     (CID: db7ffd945cec)
       Status web.4:                  exited     (CID: 1f704960690b)
=====> metabase-test_xxx scheduler-docker-local information
       Scheduler docker local disable chown:                          
=====> metabase-test_xxx storage information
       Storage build mounts:                                   
       Storage deploy mounts:                                  
       Storage run mounts:                                     
```

### How (deb/make/rpm) and where (AWS, VirtualBox, physical, etc.) was Dokku installed?:

deb from dokku repo


## Description of problem
Procfile release command throws error that I can't replicate locally (using docker-compose), but running the exact same command using `dokku run` works perfectly fine.

In my case I'm using the following Dockerfile to run a nearly empty django app:

```
FROM python:3.8-buster

RUN pip install --user pipenv
ENV PATH="${PATH}:/root/.local/bin"
ENV PIPENV_VENV_IN_PROJECT=0

COPY . /app

WORKDIR /app

RUN rm -f -r .venv

RUN mkdir .venv

RUN pipenv install

CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application
```

The procfile looks like this:

```
release: pipenv run python manage.py migrate
```

The error looks like this:

```
 !     Postdeploy command declared: 'pipenv run python manage.py migrate'
remote: execution of 'pipenv run python manage.py migrate' failed!
       Traceback (most recent call last):
         File "/root/.local/bin/pipenv", line 5, in <module>
           from pipenv import cli
       ModuleNotFoundError: No module named 'pipenv'
```

The output of running `dokku run <app_name> pipenv run python manage.py migrate` is:

```
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying sessions.0001_initial... OK
```

### How reproducible

Every time I try to deploy https://github.com/raphaeltm/dokku-error it happens.

### Steps to Reproduce

1. Clone https://github.com/raphaeltm/dokku-error
2. Setup Dokku, create app `test` (for example) and create/link a postgres db. App needs config `SECRET_KEY=fjdkslafjdk` and `ENVIRONMENT=dev`
3. Error should occur on deploy
4. Try running `dokku run test pipenv run python manage.py migrate` and everything will run fine.

#### Actual Results

```
 !     Postdeploy command declared: 'pipenv run python manage.py migrate'
remote: execution of 'pipenv run python manage.py migrate' failed!
       Traceback (most recent call last):
         File "/root/.local/bin/pipenv", line 5, in <module>
           from pipenv import cli
       ModuleNotFoundError: No module named 'pipenv'
```

#### Expected Results

```
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying sessions.0001_initial... OK
```

## Environment Information

dokku version 0.17.9 deployed from DigitalOcean Marketplace on a server with 1GB memory and 1 vCPU

### `dokku report APP_NAME` output

```
-----> uname: Linux bcfc-dokku 4.15.0-52-generic #56-Ubuntu SMP Tue Jun 4 22:49:08 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
-----> memory: 
                     total        used        free      shared  buff/cache   available
       Mem:            985         603          65          47         316         195
       Swap:             0           0           0
-----> docker version: 
       Client:
        Version:           18.09.6
        API version:       1.39
        Go version:        go1.10.8
        Git commit:        481bc77
        Built:             Sat May  4 02:35:57 2019
        OS/Arch:           linux/amd64
        Experimental:      false
       
       Server: Docker Engine - Community
        Engine:
         Version:          18.09.6
         API version:      1.39 (minimum version 1.12)
         Go version:       go1.10.8
         Git commit:       481bc77
         Built:            Sat May  4 01:59:36 2019
         OS/Arch:          linux/amd64
         Experimental:     false
-----> docker daemon info: 
       Containers: 15
        Running: 8
        Paused: 0
        Stopped: 7
       Images: 45
       Server Version: 18.09.6
       Storage Driver: overlay2
        Backing Filesystem: extfs
        Supports d_type: true
        Native Overlay Diff: true
       Logging Driver: json-file
       Cgroup Driver: cgroupfs
       Plugins:
        Volume: local
        Network: bridge host macvlan null overlay
        Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
       Swarm: inactive
       Runtimes: runc
       Default Runtime: runc
       Init Binary: docker-init
       containerd version: bb71b10fd8f58240ca47fbb579b9d1028eea7c84
       runc version: 2b18fe1d885ee5083ef9f0838fee39b62d653e30
       init version: fec3683
       Security Options:
        apparmor
        seccomp
         Profile: default
       Kernel Version: 4.15.0-52-generic
       Operating System: Ubuntu 18.04.2 LTS
       OSType: linux
       Architecture: x86_64
       CPUs: 1
       Total Memory: 985.5MiB
       Name: bcfc-dokku
       ID: I3C4:5NNZ:V2UZ:RAJB:TOHF:ZVXW:Q6ML:LNYN:Y5QC:SASQ:TRA3:YR5R
       Docker Root Dir: /var/lib/docker
       Debug Mode (client): true
       Debug Mode (server): false
       Registry: https://index.docker.io/v1/
       Labels:
       Experimental: false
       Insecure Registries:
        127.0.0.0/8
       Live Restore Enabled: false
       Product License: Community Engine
       
-----> sigil version: 0.4.0
-----> herokuish version: 
       herokuish: 0.5.0
       buildpacks:
         heroku-buildpack-multi     v1.0.0
         heroku-buildpack-ruby      v200
         heroku-buildpack-nodejs    v142
         heroku-buildpack-clojure   v83
         heroku-buildpack-python    v149
         heroku-buildpack-java      v63
         heroku-buildpack-gradle    v28
         heroku-buildpack-scala     v84
         heroku-buildpack-play      v26
         heroku-buildpack-php       v151
         heroku-buildpack-go        v104
         buildpack-nginx            v10
-----> dokku version: dokku version 0.17.9
-----> dokku plugins: 
       plugn: 0.3.2
         00_dokku-standard    0.17.9 enabled    dokku core standard plugin
         20_events            0.17.9 enabled    dokku core events logging plugin
         app-json             0.17.9 enabled    dokku core app-json plugin
         apps                 0.17.9 enabled    dokku core apps plugin
         build-env            0.17.9 enabled    dokku core build-env plugin
         buildpacks           0.17.9 enabled    dokku core buildpacks plugin
         certs                0.17.9 enabled    dokku core certificate management plugin
         checks               0.17.9 enabled    dokku core checks plugin
         common               0.17.9 enabled    dokku core common plugin
         config               0.17.9 enabled    dokku core config plugin
         docker-options       0.17.9 enabled    dokku core docker-options plugin
         domains              0.17.9 enabled    dokku core domains plugin
         enter                0.17.9 enabled    dokku core enter plugin
         git                  0.17.9 enabled    dokku core git plugin
         logs                 0.17.9 enabled    dokku core logs plugin
         network              0.17.9 enabled    dokku core network plugin
         nginx-vhosts         0.17.9 enabled    dokku core nginx-vhosts plugin
         plugin               0.17.9 enabled    dokku core plugin plugin
         postgres             1.9.5 enabled    dokku postgres service plugin
         proxy                0.17.9 enabled    dokku core proxy plugin
         ps                   0.17.9 enabled    dokku core ps plugin
         repo                 0.17.9 enabled    dokku core repo plugin
         resource             0.17.9 enabled    dokku core resource plugin
         scheduler-docker-local 0.17.9 enabled    dokku core scheduler-docker-local plugin
         shell                0.17.9 enabled    dokku core shell plugin
         ssh-keys             0.17.9 enabled    dokku core ssh-keys plugin
         storage              0.17.9 enabled    dokku core storage plugin
         tags                 0.17.9 enabled    dokku core tags plugin
         tar                  0.17.9 enabled    dokku core tar plugin
         trace                0.17.9 enabled    dokku core trace plugin
=====> test app information
       App dir:                       /home/dokku/test         
       Git sha:                                                
       Deploy source:                 git                      
       Locked:                        true                     
=====> test buildpacks information
       Buildpacks list:               
=====> test ssl information
       Ssl dir:                       /home/dokku/test/tls     
       Ssl enabled:                   false                    
       Ssl hostnames:                                          
       Ssl expires at:                                         
       Ssl issuer:                                             
       Ssl starts at:                                          
       Ssl subject:                                            
       Ssl verified:                                           
=====> test checks information
       Checks disabled list:          none                     
       Checks skipped list:           none                     
=====> test docker options information
       Docker options build:          --link dokku.postgres.test:dokku-postgres-test 
       Docker options deploy:         --link dokku.postgres.test:dokku-postgres-test --restart=on-failure:10 
       Docker options run:            --link dokku.postgres.test:dokku-postgres-test 
=====> test domains information
       Domains app enabled:           true                     
       Domains app vhosts:            test.bcfc-dokku.fmairapp.com
       Domains global enabled:        true                     
       Domains global vhosts:         bcfc-dokku.fmairapp.com  
=====> test git information
       Git rev env var:               GIT_REV                  
       Git deploy branch:             master                   
       Git global deploy branch:      master                   
=====> test network information
       Network bind all interfaces:   false
       Network listeners:             172.17.0.9:5000
=====> test proxy information
       Proxy enabled:                 true                     
       Proxy type:                    nginx                    
       Proxy port map:                http:80:5000             
=====> test ps information
       Processes:                     1                        
       Deployed:                      true                     
       Running:                       true                     
       Restore:                       true                     
       Restart policy:                on-failure:10            
       Ps can scale:                  true                     
       Status web.1:                  running    (CID: 8dc2b187fbb7)
=====> test scheduler-docker-local information
       Scheduler docker local disable chown:                          
=====> test storage information
       Storage build mounts:                                   
       Storage deploy mounts:                                  
       Storage run mounts:            
```

### How (deb/make/rpm) and where (AWS, VirtualBox, physical, etc.) was Dokku installed?:

Installed from DigitalOcean Marketplace on a server with 1GB memory and 1 vCPU

### Additional information

#### Container Inspect Output

```
[
    {
        "AppArmorProfile": "docker-default", 
        "Args": [
            "-c", 
            "pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application"
        ], 
        "Config": {
            "ArgsEscaped": true, 
            "AttachStderr": false, 
            "AttachStdin": false, 
            "AttachStdout": false, 
            "Cmd": [
                "/bin/sh", 
                "-c", 
                "pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application"
            ], 
            "Domainname": "", 
            "Entrypoint": null, 
            "Env": [
                "GIT_REV=XXXXXX", 
                "SECRET_KEY=XXXXXX", 
                "DYNO=web.1", 
                "PORT=5000", 
                "DATABASE_URL=XXXXXX", 
                "DOKKU_APP_TYPE=dockerfile", 
                "DOKKU_DOCKERFILE_CMD=CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application", 
                "ENVIRONMENT=XXXXXX", 
                "PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.local/bin", 
                "LANG=XXXXXX", 
                "GPG_KEY=XXXXXX", 
                "PYTHON_VERSION=XXXXXX", 
                "PYTHON_PIP_VERSION=XXXXXX", 
                "PYTHON_GET_PIP_URL=XXXXXX", 
                "PYTHON_GET_PIP_SHA256=XXXXXX", 
                "PIPENV_VENV_IN_PROJECT=XXXXXX"
            ], 
            "Hostname": "8dc2b187fbb7", 
            "Image": "dokku/test:latest", 
            "Labels": {
                "dokku": ""
            }, 
            "OnBuild": null, 
            "OpenStdin": false, 
            "StdinOnce": false, 
            "Tty": false, 
            "User": "", 
            "Volumes": null, 
            "WorkingDir": "/app"
        }, 
        "Created": "2020-01-15T04:03:55.900033728Z", 
        "Driver": "overlay2", 
        "ExecIDs": null, 
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/83909ff4cfbd5adcc8d0151e6daacec9e64f690e33bbabbdc25554aa4d6bd486-init/diff:/var/lib/docker/overlay2/cabf64e8cd7fca8394700b3a5268dc041d8434e9fbeb4a239a02a3311c3b9d0b/diff:/var/lib/docker/overlay2/4411b069a0b56fb213508e7b70368aeec0cd6c11a0e283926fd2be7800137b63/diff:/var/lib/docker/overlay2/28b02b568da5cc756fc8f47356f5e8862343fc97b3f114d30759ea2f68ebda77/diff:/var/lib/docker/overlay2/70eb20667d1ced101b1ed39d518ad5758e4fb3227dae33965648989bda7c4449/diff:/var/lib/docker/overlay2/8e8ab07d1d22f0401dfdf72085e1342970b52b4efd3a2a5c16e99bbe02906581/diff:/var/lib/docker/overlay2/31ef6f9a7c61d200caeded4b07b239aade946af8bf79ca13dfeb3c4b5e7b96d0/diff:/var/lib/docker/overlay2/62964ea41c1b50a33af3631afc325ea5dad39de2480b3b52b9a6093c82c739a0/diff:/var/lib/docker/overlay2/f507d82239cc0d85bcf2f8c9eaae94d49aca0eb124d945e38c6f7df17a1654c9/diff:/var/lib/docker/overlay2/20beb6c4023f35503da8bc994f17d1602b805e4114b3638c2dfe8c9c3ae4096c/diff:/var/lib/docker/overlay2/915bf05eb973da19588257679acb3524edab43013c8eaf639fa6e7d80489c3c3/diff:/var/lib/docker/overlay2/35cbf0d22db63f89e34fb690aa99efb8c9a22af5637a1de9432f7d940a8ae305/diff:/var/lib/docker/overlay2/9fb7c376af939bf73ac178c10e2530739946c28f9f00012b6140edde3053d3c5/diff:/var/lib/docker/overlay2/a2a7b18ec6baaa144fa7a6e6608d6c47d5abcf213361c7e1d0071be9fbea3a41/diff", 
                "MergedDir": "/var/lib/docker/overlay2/83909ff4cfbd5adcc8d0151e6daacec9e64f690e33bbabbdc25554aa4d6bd486/merged", 
                "UpperDir": "/var/lib/docker/overlay2/83909ff4cfbd5adcc8d0151e6daacec9e64f690e33bbabbdc25554aa4d6bd486/diff", 
                "WorkDir": "/var/lib/docker/overlay2/83909ff4cfbd5adcc8d0151e6daacec9e64f690e33bbabbdc25554aa4d6bd486/work"
            }, 
            "Name": "overlay2"
        }, 
        "HostConfig": {
            "AutoRemove": false, 
            "Binds": null, 
            "BlkioDeviceReadBps": null, 
            "BlkioDeviceReadIOps": null, 
            "BlkioDeviceWriteBps": null, 
            "BlkioDeviceWriteIOps": null, 
            "BlkioWeight": 0, 
            "BlkioWeightDevice": [], 
            "CapAdd": null, 
            "CapDrop": null, 
            "Cgroup": "", 
            "CgroupParent": "", 
            "ConsoleSize": [
                0, 
                0
            ], 
            "ContainerIDFile": "", 
            "CpuCount": 0, 
            "CpuPercent": 0, 
            "CpuPeriod": 0, 
            "CpuQuota": 0, 
            "CpuRealtimePeriod": 0, 
            "CpuRealtimeRuntime": 0, 
            "CpuShares": 0, 
            "CpusetCpus": "", 
            "CpusetMems": "", 
            "DeviceCgroupRules": null, 
            "Devices": [], 
            "DiskQuota": 0, 
            "Dns": [], 
            "DnsOptions": [], 
            "DnsSearch": [], 
            "ExtraHosts": null, 
            "GroupAdd": null, 
            "IOMaximumBandwidth": 0, 
            "IOMaximumIOps": 0, 
            "IpcMode": "shareable", 
            "Isolation": "", 
            "KernelMemory": 0, 
            "Links": [
                "/dokku.postgres.test:/test.web.1/dokku-postgres-test"
            ], 
            "LogConfig": {
                "Config": {}, 
                "Type": "json-file"
            }, 
            "MaskedPaths": [
                "/proc/asound", 
                "/proc/acpi", 
                "/proc/kcore", 
                "/proc/keys", 
                "/proc/latency_stats", 
                "/proc/timer_list", 
                "/proc/timer_stats", 
                "/proc/sched_debug", 
                "/proc/scsi", 
                "/sys/firmware"
            ], 
            "Memory": 0, 
            "MemoryReservation": 0, 
            "MemorySwap": 0, 
            "MemorySwappiness": null, 
            "NanoCpus": 0, 
            "NetworkMode": "default", 
            "OomKillDisable": false, 
            "OomScoreAdj": 0, 
            "PidMode": "", 
            "PidsLimit": 0, 
            "PortBindings": {}, 
            "Privileged": false, 
            "PublishAllPorts": false, 
            "ReadonlyPaths": [
                "/proc/bus", 
                "/proc/fs", 
                "/proc/irq", 
                "/proc/sys", 
                "/proc/sysrq-trigger"
            ], 
            "ReadonlyRootfs": false, 
            "RestartPolicy": {
                "MaximumRetryCount": 10, 
                "Name": "on-failure"
            }, 
            "Runtime": "runc", 
            "SecurityOpt": null, 
            "ShmSize": 67108864, 
            "UTSMode": "", 
            "Ulimits": null, 
            "UsernsMode": "", 
            "VolumeDriver": "", 
            "VolumesFrom": null
        }, 
        "HostnamePath": "/var/lib/docker/containers/8dc2b187fbb700395481f3bec847cadda3155c9aab14c373e1644386bf55ee57/hostname", 
        "HostsPath": "/var/lib/docker/containers/8dc2b187fbb700395481f3bec847cadda3155c9aab14c373e1644386bf55ee57/hosts", 
        "Id": "8dc2b187fbb700395481f3bec847cadda3155c9aab14c373e1644386bf55ee57", 
        "Image": "sha256:d63940c6f532616619c8f421e200ffc946e1adf26e1165b9580f0d0a0bdcae9d", 
        "LogPath": "/var/lib/docker/containers/8dc2b187fbb700395481f3bec847cadda3155c9aab14c373e1644386bf55ee57/8dc2b187fbb700395481f3bec847cadda3155c9aab14c373e1644386bf55ee57-json.log", 
        "MountLabel": "", 
        "Mounts": [], 
        "Name": "/test.web.1", 
        "NetworkSettings": {
            "Bridge": "", 
            "EndpointID": "3bb7ab7d44863ec1134a53a2c2f419d6c2c588251f2abc06092f984b9ce676c0", 
            "Gateway": "172.17.0.1", 
            "GlobalIPv6Address": "", 
            "GlobalIPv6PrefixLen": 0, 
            "HairpinMode": false, 
            "IPAddress": "172.17.0.9", 
            "IPPrefixLen": 16, 
            "IPv6Gateway": "", 
            "LinkLocalIPv6Address": "", 
            "LinkLocalIPv6PrefixLen": 0, 
            "MacAddress": "02:42:ac:11:00:09", 
            "Networks": {
                "bridge": {
                    "Aliases": null, 
                    "DriverOpts": null, 
                    "EndpointID": "3bb7ab7d44863ec1134a53a2c2f419d6c2c588251f2abc06092f984b9ce676c0", 
                    "Gateway": "172.17.0.1", 
                    "GlobalIPv6Address": "", 
                    "GlobalIPv6PrefixLen": 0, 
                    "IPAMConfig": null, 
                    "IPAddress": "172.17.0.9", 
                    "IPPrefixLen": 16, 
                    "IPv6Gateway": "", 
                    "Links": null, 
                    "MacAddress": "02:42:ac:11:00:09", 
                    "NetworkID": "85e5b6f54919782cd9813b7c4b955fdb864f93b78fb83f48a3b325e048c1484f"
                }
            }, 
            "Ports": {}, 
            "SandboxID": "4d5e70b38278146e966ca5131217b43c99221158cde691002dbb99585f297603", 
            "SandboxKey": "/var/run/docker/netns/4d5e70b38278", 
            "SecondaryIPAddresses": null, 
            "SecondaryIPv6Addresses": null
        }, 
        "Path": "/bin/sh", 
        "Platform": "linux", 
        "ProcessLabel": "", 
        "ResolvConfPath": "/var/lib/docker/containers/8dc2b187fbb700395481f3bec847cadda3155c9aab14c373e1644386bf55ee57/resolv.conf", 
        "RestartCount": 0, 
        "State": {
            "Dead": false, 
            "Error": "", 
            "ExitCode": 0, 
            "FinishedAt": "0001-01-01T00:00:00Z", 
            "OOMKilled": false, 
            "Paused": false, 
            "Pid": 995, 
            "Restarting": false, 
            "Running": true, 
            "StartedAt": "2020-01-15T04:03:57.29540109Z", 
            "Status": "running"
        }
    }
]
```

#### Repo
https://github.com/raphaeltm/dokku-error

#### Other
  - Application name
     _test_
  - The type of application being deployed (node, php, python, ruby, etc.)
     _django app as docker image_
  - If using a `Dockerfile`, the contents of that file
     _see above_
  - If it exists, the contents of your `Procfile`.
     _see above_
  - Output of failing Dokku commands after running `dokku trace:on`
     
```
perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
        LANGUAGE = (unset),
        LC_ALL = (unset),
        LC_CTYPE = "en_CA.UTF-8",
        LANG = "C.UTF-8"
    are supported and installed on your system.
perl: warning: Falling back to a fallback locale ("C.UTF-8").
Enumerating objects: 29, done.
Counting objects: 100% (29/29), done.
Delta compression using up to 8 threads
Compressing objects: 100% (24/24), done.
Writing objects: 100% (29/29), 8.41 KiB | 2.80 MiB/s, done.
Total 29 (delta 2), reused 0 (delta 0)
remote: test currently has a deploy lock in place. Exiting...
To <IP_ADDRESS>:test
 ! [remote rejected] master -> master (pre-receive hook declined)
error: failed to push some refs to 'dokku@<IP_ADDRESS>:test'
raphaeltitsworth-morin@Raphaels-MBP dokku-error % git push dokku master
perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
        LANGUAGE = (unset),
        LC_ALL = (unset),
        LC_CTYPE = "en_CA.UTF-8",
        LANG = "C.UTF-8"
    are supported and installed on your system.
perl: warning: Falling back to a fallback locale ("C.UTF-8").
Enumerating objects: 29, done.
Counting objects: 100% (29/29), done.
Delta compression using up to 8 threads
Compressing objects: 100% (24/24), done.
Writing objects: 100% (29/29), 8.41 KiB | 1.40 MiB/s, done.
Total 29 (delta 2), reused 0 (delta 0)
-----> Cleaning up...
-----> Building test from dockerfile...
-----> Setting config vars
       DOKKU_DOCKERFILE_CMD:  CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application
remote: build context to Docker daemon  37.89kB
Step 1/10 : FROM python:3.8-buster
 ---> 1f88553e8143
Step 2/10 : RUN pip install --user pipenv
 ---> Using cache
 ---> b6c739f4f6ab
Step 3/10 : ENV PATH="${PATH}:/root/.local/bin"
 ---> Using cache
 ---> f067a1be46d1
Step 4/10 : ENV PIPENV_VENV_IN_PROJECT=0
 ---> Using cache
 ---> b43cbc679514
Step 5/10 : COPY . /app
 ---> 5bb3f4514e09
Step 6/10 : WORKDIR /app
 ---> Running in 2b82e35859a0
Removing intermediate container 2b82e35859a0
 ---> 516baf1885b6
Step 7/10 : RUN rm -f -r .venv
 ---> Running in f361323954cb
Removing intermediate container f361323954cb
 ---> baa60ab37042
Step 8/10 : RUN mkdir .venv
 ---> Running in 953ef4f70f53
Removing intermediate container 953ef4f70f53
 ---> 91abc1c2c7a4
Step 9/10 : RUN pipenv install
 ---> Running in 51a6d00dfeda
Creating a virtualenv for this project…
Pipfile: /app/Pipfile
Using /usr/local/bin/python (3.8.1) to create virtualenv…
remote: ⠹ Creating virtual environment...Already using interpreter /usr/local/bin/python
Using base prefix '/usr/local'
New python executable in /app/.venv/bin/python
Installing setuptools, pip, wheel...
done.
                                                                                                                                                                                                    ✔ Successfully created virtual environment!
Virtualenv location: /app/.venv
Installing dependencies from Pipfile.lock (bfdba9)…
An error occurred while installing dj-database-url==0.5.0 --hash=sha256:4aeaeb1f573c74835b0686a2b46b85990571159ffc21aa57ecd4d1e1cb334163 --hash=sha256:851785365761ebe4994a921b433062309eb882fedd318e1b0fcecc607ed02da9! Will try again.
An error occurred while installing django==3.0.2 --hash=sha256:4f2c913303be4f874015993420bf0bd8fd2097a9c88e6b49c6a92f9bdd3fb13a --hash=sha256:8c3575f81e11390893860d97e1e0154c47512f180ea55bd84ce8fa69ba8051ca! Will try again.
An error occurred while installing pytz==2019.3 --hash=sha256:1c557d7d0e871de1f5ccd5833f60fb2550652da6be2693c1e02300743d21500d --hash=sha256:b02c06db6cf09c12dd25137e563b31700d3b80fcc4ad23abb7a315f2789819be! Will try again.
Installing initially failed dependencies…
To activate this project's virtualenv, run pipenv shell.
Alternatively, run a command inside the virtualenv with pipenv run.
Removing intermediate container 51a6d00dfeda
 ---> 6156db1ae36a
Step 10/10 : CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application
 ---> Running in f1f82d519b8d
Removing intermediate container f1f82d519b8d
 ---> 96fa874813a0
Successfully built 96fa874813a0
Successfully tagged dokku/test:latest
-----> Releasing test (dokku/test:latest)...
-----> Deploying test (dokku/test:latest)...
 !     Release command declared: 'pipenv run python manage.py migrate'
remote: execution of 'pipenv run python manage.py migrate' failed!
       Traceback (most recent call last):
         File "/root/.local/bin/pipenv", line 5, in <module>
           from pipenv import cli
       ModuleNotFoundError: No module named 'pipenv'
To <IP_ADDRESS>:test
 ! [remote rejected] master -> master (pre-receive hook declined)
error: failed to push some refs to 'dokku@<IP_ADDRESS>:test'
raphaeltitsworth-morin@Raphaels-MBP dokku-error % git push dokku master
+ export DOKKU_HOST_ROOT=/home/dokku
+ DOKKU_HOST_ROOT=/home/dokku
+ export DOKKU_DISTRO
++ . /etc/os-release
++ echo ubuntu
+ DOKKU_DISTRO=ubuntu
+ export DOCKER_BIN=docker
+ DOCKER_BIN=docker
+ export DOKKU_IMAGE=gliderlabs/herokuish:latest
+ DOKKU_IMAGE=gliderlabs/herokuish:latest
+ export DOKKU_LIB_ROOT=/var/lib/dokku
+ DOKKU_LIB_ROOT=/var/lib/dokku
+ export PLUGIN_PATH=/var/lib/dokku/plugins
+ PLUGIN_PATH=/var/lib/dokku/plugins
+ export PLUGIN_AVAILABLE_PATH=/var/lib/dokku/plugins/available
+ PLUGIN_AVAILABLE_PATH=/var/lib/dokku/plugins/available
+ export PLUGIN_ENABLED_PATH=/var/lib/dokku/plugins/enabled
+ PLUGIN_ENABLED_PATH=/var/lib/dokku/plugins/enabled
+ export PLUGIN_CORE_PATH=/var/lib/dokku/core-plugins
+ PLUGIN_CORE_PATH=/var/lib/dokku/core-plugins
+ export PLUGIN_CORE_AVAILABLE_PATH=/var/lib/dokku/core-plugins/available
+ PLUGIN_CORE_AVAILABLE_PATH=/var/lib/dokku/core-plugins/available
+ export PLUGIN_CORE_ENABLED_PATH=/var/lib/dokku/core-plugins/enabled
+ PLUGIN_CORE_ENABLED_PATH=/var/lib/dokku/core-plugins/enabled
+ export DOKKU_SYSTEM_GROUP=dokku
+ DOKKU_SYSTEM_GROUP=dokku
+ export DOKKU_SYSTEM_USER=dokku
+ DOKKU_SYSTEM_USER=dokku
+ export DOKKU_API_VERSION=1
+ DOKKU_API_VERSION=1
+ export DOKKU_NOT_IMPLEMENTED_EXIT=10
+ DOKKU_NOT_IMPLEMENTED_EXIT=10
+ export DOKKU_VALID_EXIT=0
+ DOKKU_VALID_EXIT=0
+ export DOKKU_LOGS_DIR=/var/log/dokku
+ DOKKU_LOGS_DIR=/var/log/dokku
+ export DOKKU_EVENTS_LOGFILE=/var/log/dokku/events.log
+ DOKKU_EVENTS_LOGFILE=/var/log/dokku/events.log
+ export DOKKU_CONTAINER_LABEL=dokku
+ DOKKU_CONTAINER_LABEL=dokku
+ export DOKKU_GLOBAL_RUN_ARGS=--label=dokku
+ DOKKU_GLOBAL_RUN_ARGS=--label=dokku
+ source /var/lib/dokku/core-plugins/available/common/functions
++ set -eo pipefail
++ [[ -n 1 ]]
++ set -x
+ parse_args git-receive-pack ''\''test'\'''
+ declare 'desc=top-level cli arg parser'
+ local next_index=1
+ local skip=false
+ args=("$@")
+ local args
+ for arg in "$@"
+ [[ false == \t\r\u\e ]]
+ case "$arg" in
+ next_index=2
+ for arg in "$@"
+ [[ false == \t\r\u\e ]]
+ case "$arg" in
+ next_index=3
+ return 0
+ args=("$@")
+ skip_arg=false
+ [[ git-receive-pack =~ ^--.* ]]
+ has_tty
+ declare 'desc=return 0 if we have a tty'
++ /usr/bin/tty
++ true
+ [[ not a tty == \n\o\t\ \a\ \t\t\y ]]
+ return 1
+ DOKKU_QUIET_OUTPUT=1
++ id -un
+ [[ dokku != \d\o\k\k\u ]]
+ [[ git-receive-pack =~ ^plugin:.* ]]
+ [[ git-receive-pack == \s\s\h\-\k\e\y\s\:\a\d\d ]]
+ [[ -n git-receive-pack 'test' ]]
+ export -n SSH_ORIGINAL_COMMAND
+ [[ git-receive-pack =~ config-* ]]
+ [[ git-receive-pack =~ docker-options* ]]
+ set -f
+ /usr/bin/dokku git-receive-pack ''\''test'\'''
+ export DOKKU_HOST_ROOT=/home/dokku
+ DOKKU_HOST_ROOT=/home/dokku
+ export DOKKU_DISTRO
++ . /etc/os-release
++ echo ubuntu
+ DOKKU_DISTRO=ubuntu
+ export DOCKER_BIN=docker
+ DOCKER_BIN=docker
+ export DOKKU_IMAGE=gliderlabs/herokuish:latest
+ DOKKU_IMAGE=gliderlabs/herokuish:latest
+ export DOKKU_LIB_ROOT=/var/lib/dokku
+ DOKKU_LIB_ROOT=/var/lib/dokku
+ export PLUGIN_PATH=/var/lib/dokku/plugins
+ PLUGIN_PATH=/var/lib/dokku/plugins
+ export PLUGIN_AVAILABLE_PATH=/var/lib/dokku/plugins/available
+ PLUGIN_AVAILABLE_PATH=/var/lib/dokku/plugins/available
+ export PLUGIN_ENABLED_PATH=/var/lib/dokku/plugins/enabled
+ PLUGIN_ENABLED_PATH=/var/lib/dokku/plugins/enabled
+ export PLUGIN_CORE_PATH=/var/lib/dokku/core-plugins
+ PLUGIN_CORE_PATH=/var/lib/dokku/core-plugins
+ export PLUGIN_CORE_AVAILABLE_PATH=/var/lib/dokku/core-plugins/available
+ PLUGIN_CORE_AVAILABLE_PATH=/var/lib/dokku/core-plugins/available
+ export PLUGIN_CORE_ENABLED_PATH=/var/lib/dokku/core-plugins/enabled
+ PLUGIN_CORE_ENABLED_PATH=/var/lib/dokku/core-plugins/enabled
+ export DOKKU_SYSTEM_GROUP=dokku
+ DOKKU_SYSTEM_GROUP=dokku
+ export DOKKU_SYSTEM_USER=dokku
+ DOKKU_SYSTEM_USER=dokku
+ export DOKKU_API_VERSION=1
+ DOKKU_API_VERSION=1
+ export DOKKU_NOT_IMPLEMENTED_EXIT=10
+ DOKKU_NOT_IMPLEMENTED_EXIT=10
+ export DOKKU_VALID_EXIT=0
+ DOKKU_VALID_EXIT=0
+ export DOKKU_LOGS_DIR=/var/log/dokku
+ DOKKU_LOGS_DIR=/var/log/dokku
+ export DOKKU_EVENTS_LOGFILE=/var/log/dokku/events.log
+ DOKKU_EVENTS_LOGFILE=/var/log/dokku/events.log
+ export DOKKU_CONTAINER_LABEL=dokku
+ DOKKU_CONTAINER_LABEL=dokku
+ export DOKKU_GLOBAL_RUN_ARGS=--label=dokku
+ DOKKU_GLOBAL_RUN_ARGS=--label=dokku
+ source /var/lib/dokku/core-plugins/available/common/functions
++ set -eo pipefail
++ [[ -n 1 ]]
++ set -x
+ parse_args git-receive-pack ''\''test'\'''
+ declare 'desc=top-level cli arg parser'
+ local next_index=1
+ local skip=false
+ args=("$@")
+ local args
+ for arg in "$@"
+ [[ false == \t\r\u\e ]]
+ case "$arg" in
+ next_index=2
+ for arg in "$@"
+ [[ false == \t\r\u\e ]]
+ case "$arg" in
+ next_index=3
+ return 0
+ args=("$@")
+ skip_arg=false
+ [[ git-receive-pack =~ ^--.* ]]
+ has_tty
+ declare 'desc=return 0 if we have a tty'
++ /usr/bin/tty
++ true
+ [[ not a tty == \n\o\t\ \a\ \t\t\y ]]
+ return 1
+ DOKKU_QUIET_OUTPUT=1
++ id -un
+ [[ dokku != \d\o\k\k\u ]]
+ [[ git-receive-pack =~ ^plugin:.* ]]
+ [[ git-receive-pack == \s\s\h\-\k\e\y\s\:\a\d\d ]]
+ [[ -n '' ]]
+ dokku_auth git-receive-pack ''\''test'\'''
+ declare 'desc=calls user-auth plugin trigger'
+ export SSH_USER=dokku
+ SSH_USER=dokku
+ export SSH_NAME=admin1
+ SSH_NAME=admin1
+ plugn trigger user-auth dokku admin1 git-receive-pack ''\''test'\'''
+ source /var/lib/dokku/core-plugins/available/common/functions
++ set -eo pipefail
++ [[ -n 1 ]]
++ set -x
+ [[ ! -n '' ]]
+ source /var/lib/dokku/core-plugins/available/common/functions
++ set -eo pipefail
++ [[ -n 1 ]]
++ set -x
+ [[ git-receive-pack =~ (ssh-keys:add|ssh-keys:remove) ]]
+ return 0
+ case "$1" in
+ execute_dokku_cmd git-receive-pack ''\''test'\'''
+ declare 'desc=executes dokku sub-commands'
+ local PLUGIN_NAME=git-receive-pack
+ local PLUGIN_CMD=git-receive-pack
+ local implemented=0
+ local script
+ argv=("$@")
+ local argv
+ case "$PLUGIN_NAME" in
++ readlink -f /var/lib/dokku/plugins/enabled/git-receive-pack
+ [[ /var/lib/dokku/plugins/enabled/git-receive-pack == *core-plugins* ]]
+ [[ -x /var/lib/dokku/plugins/enabled/git-receive-pack/subcommands/default ]]
+ [[ -x /var/lib/dokku/plugins/enabled/git-receive-pack/subcommands/git-receive-pack ]]
+ [[ -x /var/lib/dokku/plugins/enabled/git-receive-pack/subcommands/git-receive-pack ]]
+ [[ 0 -eq 0 ]]
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/00_dokku-standard/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/20_events/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/apps/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/buildpacks/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/certs/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/checks/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/config/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/docker-options/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/domains/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/enter/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/git/commands git-receive-pack ''\''test'\'''
+ source /var/lib/dokku/plugins/available/git/functions
++ source /var/lib/dokku/core-plugins/available/common/functions
+++ set -eo pipefail
+++ [[ -n 1 ]]
+++ set -x
++ source /var/lib/dokku/core-plugins/available/common/property-functions
+++ set -eo pipefail
+++ [[ -n 1 ]]
+++ set -x
++ source /var/lib/dokku/plugins/available/apps/functions
+++ set -eo pipefail
+++ [[ -n 1 ]]
+++ set -x
+++ source /var/lib/dokku/core-plugins/available/common/functions
++++ set -eo pipefail
++++ [[ -n 1 ]]
++++ set -x
+++ source /var/lib/dokku/plugins/available/config/functions
++++ set -eo pipefail
++++ [[ -n 1 ]]
++++ set -x
++++ source /var/lib/dokku/core-plugins/available/common/functions
+++++ set -eo pipefail
+++++ [[ -n 1 ]]
+++++ set -x
++ source /var/lib/dokku/plugins/available/config/functions
+++ set -eo pipefail
+++ [[ -n 1 ]]
+++ set -x
+++ source /var/lib/dokku/core-plugins/available/common/functions
++++ set -eo pipefail
++++ [[ -n 1 ]]
++++ set -x
++ set -eo pipefail
++ [[ -n 1 ]]
++ set -x
+ source /var/lib/dokku/plugins/available/git/internal-functions
++ source /var/lib/dokku/core-plugins/available/common/functions
+++ set -eo pipefail
+++ [[ -n 1 ]]
+++ set -x
++ source /var/lib/dokku/core-plugins/available/common/property-functions
+++ set -eo pipefail
+++ [[ -n 1 ]]
+++ set -x
++ set -eo pipefail
++ [[ -n 1 ]]
++ set -x
+ case "$1" in
+ git_glob_cmd git-receive-pack ''\''test'\'''
+ declare 'desc=catch-all for any other git-* commands'
+ local 'cmd=git-*'
++ sed 's/^\///g'
++ sed 's/\\'\''/'\''/g'
++ perl -pe 's/(?<!\\)'\''//g'
++ echo ''\''test'\'''
perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
        LANGUAGE = (unset),
        LC_ALL = (unset),
        LC_CTYPE = "en_CA.UTF-8",
        LANG = "C.UTF-8"
    are supported and installed on your system.
perl: warning: Falling back to a fallback locale ("C.UTF-8").
+ local APP=test
+ local APP_PATH=/home/dokku/test
+ is_valid_app_name test
+ declare 'desc=verify app name format'
+ local APP=test
+ [[ -z test ]]
+ [[ test =~ ^[a-z].* ]]
+ [[ ! test =~ [A-Z] ]]
+ [[ ! test =~ [:] ]]
+ return 0
+ [[ git-receive-pack == \g\i\t\-\r\e\c\e\i\v\e\-\p\a\c\k ]]
+ [[ ! -d /home/dokku/test/refs ]]
+ [[ git-receive-pack == \g\i\t\-\r\e\c\e\i\v\e\-\p\a\c\k ]]
+ local 'args=git-receive-pack '\''/home/dokku/test'\'''
+ git-shell -c 'git-receive-pack '\''/home/dokku/test'\'''
Enumerating objects: 29, done.
Counting objects: 100% (29/29), done.
Delta compression using up to 8 threads
Compressing objects: 100% (24/24), done.
Writing objects: 100% (29/29), 8.41 KiB | 2.10 MiB/s, done.
Total 29 (delta 2), reused 0 (delta 0)
remote: + export DOKKU_HOST_ROOT=/home/dokku
remote: + DOKKU_HOST_ROOT=/home/dokku
remote: + export DOKKU_DISTRO
remote: ++ . /etc/os-release
remote: ++ echo ubuntu
remote: + DOKKU_DISTRO=ubuntu
remote: + export DOCKER_BIN=docker
remote: + DOCKER_BIN=docker
remote: + export DOKKU_IMAGE=gliderlabs/herokuish:latest
remote: + DOKKU_IMAGE=gliderlabs/herokuish:latest
remote: + export DOKKU_LIB_ROOT=/var/lib/dokku
remote: + DOKKU_LIB_ROOT=/var/lib/dokku
remote: + export PLUGIN_PATH=/var/lib/dokku/plugins
remote: + PLUGIN_PATH=/var/lib/dokku/plugins
remote: + export PLUGIN_AVAILABLE_PATH=/var/lib/dokku/plugins/available
remote: + PLUGIN_AVAILABLE_PATH=/var/lib/dokku/plugins/available
remote: + export PLUGIN_ENABLED_PATH=/var/lib/dokku/plugins/enabled
remote: + PLUGIN_ENABLED_PATH=/var/lib/dokku/plugins/enabled
remote: + export PLUGIN_CORE_PATH=/var/lib/dokku/core-plugins
remote: + PLUGIN_CORE_PATH=/var/lib/dokku/core-plugins
remote: + export PLUGIN_CORE_AVAILABLE_PATH=/var/lib/dokku/core-plugins/available
remote: + PLUGIN_CORE_AVAILABLE_PATH=/var/lib/dokku/core-plugins/available
remote: + export PLUGIN_CORE_ENABLED_PATH=/var/lib/dokku/core-plugins/enabled
remote: + PLUGIN_CORE_ENABLED_PATH=/var/lib/dokku/core-plugins/enabled
remote: + export DOKKU_SYSTEM_GROUP=dokku
remote: + DOKKU_SYSTEM_GROUP=dokku
remote: + export DOKKU_SYSTEM_USER=dokku
remote: + DOKKU_SYSTEM_USER=dokku
remote: + export DOKKU_API_VERSION=1
remote: + DOKKU_API_VERSION=1
remote: + export DOKKU_NOT_IMPLEMENTED_EXIT=10
remote: + DOKKU_NOT_IMPLEMENTED_EXIT=10
remote: + export DOKKU_VALID_EXIT=0
remote: + DOKKU_VALID_EXIT=0
remote: + export DOKKU_LOGS_DIR=/var/log/dokku
remote: + DOKKU_LOGS_DIR=/var/log/dokku
remote: + export DOKKU_EVENTS_LOGFILE=/var/log/dokku/events.log
remote: + DOKKU_EVENTS_LOGFILE=/var/log/dokku/events.log
remote: + export DOKKU_CONTAINER_LABEL=dokku
remote: + DOKKU_CONTAINER_LABEL=dokku
remote: + export DOKKU_GLOBAL_RUN_ARGS=--label=dokku
remote: + DOKKU_GLOBAL_RUN_ARGS=--label=dokku
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + parse_args git-hook test
remote: + declare 'desc=top-level cli arg parser'
remote: + local next_index=1
remote: + local skip=false
remote: + args=("$@")
remote: + local args
remote: + for arg in "$@"
remote: + [[ false == \t\r\u\e ]]
remote: + case "$arg" in
remote: + next_index=2
remote: + for arg in "$@"
remote: + [[ false == \t\r\u\e ]]
remote: + case "$arg" in
remote: + next_index=3
remote: + return 0
remote: + args=("$@")
remote: + skip_arg=false
remote: + [[ git-hook =~ ^--.* ]]
remote: + has_tty
remote: + declare 'desc=return 0 if we have a tty'
remote: ++ /usr/bin/tty
remote: ++ true
remote: + [[ not a tty == \n\o\t\ \a\ \t\t\y ]]
remote: + return 1
remote: + DOKKU_QUIET_OUTPUT=1
remote: ++ id -un
remote: + [[ dokku != \d\o\k\k\u ]]
remote: + [[ git-hook =~ ^plugin:.* ]]
remote: + [[ git-hook == \s\s\h\-\k\e\y\s\:\a\d\d ]]
remote: + [[ -n '' ]]
remote: + dokku_auth git-hook test
remote: + declare 'desc=calls user-auth plugin trigger'
remote: + export SSH_USER=dokku
remote: + SSH_USER=dokku
remote: + export SSH_NAME=admin1
remote: + SSH_NAME=admin1
remote: + plugn trigger user-auth dokku admin1 git-hook test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ git-hook =~ (ssh-keys:add|ssh-keys:remove) ]]
remote: + return 0
remote: + case "$1" in
remote: + execute_dokku_cmd git-hook test
remote: + declare 'desc=executes dokku sub-commands'
remote: + local PLUGIN_NAME=git-hook
remote: + local PLUGIN_CMD=git-hook
remote: + local implemented=0
remote: + local script
remote: + argv=("$@")
remote: + local argv
remote: + case "$PLUGIN_NAME" in
remote: ++ readlink -f /var/lib/dokku/plugins/enabled/git-hook
remote: + [[ /var/lib/dokku/plugins/enabled/git-hook == *core-plugins* ]]
remote: + [[ -x /var/lib/dokku/plugins/enabled/git-hook/subcommands/default ]]
remote: + [[ -x /var/lib/dokku/plugins/enabled/git-hook/subcommands/git-hook ]]
remote: + [[ -x /var/lib/dokku/plugins/enabled/git-hook/subcommands/git-hook ]]
remote: + [[ 0 -eq 0 ]]
remote: + for script in $PLUGIN_ENABLED_PATH/*/commands
remote: + set +e
remote: + /var/lib/dokku/plugins/enabled/00_dokku-standard/commands git-hook test
remote: + exit_code=10
remote: + set -e
remote: + [[ 10 -eq 10 ]]
remote: + continue
remote: + for script in $PLUGIN_ENABLED_PATH/*/commands
remote: + set +e
remote: + /var/lib/dokku/plugins/enabled/20_events/commands git-hook test
remote: + exit_code=10
remote: + set -e
remote: + [[ 10 -eq 10 ]]
remote: + continue
remote: + for script in $PLUGIN_ENABLED_PATH/*/commands
remote: + set +e
remote: + /var/lib/dokku/plugins/enabled/apps/commands git-hook test
remote: + exit_code=10
remote: + set -e
remote: + [[ 10 -eq 10 ]]
remote: + continue
remote: + for script in $PLUGIN_ENABLED_PATH/*/commands
remote: + set +e
remote: + /var/lib/dokku/plugins/enabled/buildpacks/commands git-hook test
remote: + exit_code=10
remote: + set -e
remote: + [[ 10 -eq 10 ]]
remote: + continue
remote: + for script in $PLUGIN_ENABLED_PATH/*/commands
remote: + set +e
remote: + /var/lib/dokku/plugins/enabled/certs/commands git-hook test
remote: + exit_code=10
remote: + set -e
remote: + [[ 10 -eq 10 ]]
remote: + continue
remote: + for script in $PLUGIN_ENABLED_PATH/*/commands
remote: + set +e
remote: + /var/lib/dokku/plugins/enabled/checks/commands git-hook test
remote: + exit_code=10
remote: + set -e
remote: + [[ 10 -eq 10 ]]
remote: + continue
remote: + for script in $PLUGIN_ENABLED_PATH/*/commands
remote: + set +e
remote: + /var/lib/dokku/plugins/enabled/config/commands git-hook test
remote: + exit_code=10
remote: + set -e
remote: + [[ 10 -eq 10 ]]
remote: + continue
remote: + for script in $PLUGIN_ENABLED_PATH/*/commands
remote: + set +e
remote: + /var/lib/dokku/plugins/enabled/docker-options/commands git-hook test
remote: + exit_code=10
remote: + set -e
remote: + [[ 10 -eq 10 ]]
remote: + continue
remote: + for script in $PLUGIN_ENABLED_PATH/*/commands
remote: + set +e
remote: + /var/lib/dokku/plugins/enabled/domains/commands git-hook test
remote: + exit_code=10
remote: + set -e
remote: + [[ 10 -eq 10 ]]
remote: + continue
remote: + for script in $PLUGIN_ENABLED_PATH/*/commands
remote: + set +e
remote: + /var/lib/dokku/plugins/enabled/enter/commands git-hook test
remote: + exit_code=10
remote: + set -e
remote: + [[ 10 -eq 10 ]]
remote: + continue
remote: + for script in $PLUGIN_ENABLED_PATH/*/commands
remote: + set +e
remote: + /var/lib/dokku/plugins/enabled/git/commands git-hook test
remote: + source /var/lib/dokku/plugins/available/git/functions
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/property-functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: ++ source /var/lib/dokku/plugins/available/apps/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: +++ source /var/lib/dokku/core-plugins/available/common/functions
remote: ++++ set -eo pipefail
remote: ++++ [[ -n 1 ]]
remote: ++++ set -x
remote: +++ source /var/lib/dokku/plugins/available/config/functions
remote: ++++ set -eo pipefail
remote: ++++ [[ -n 1 ]]
remote: ++++ set -x
remote: ++++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++++ set -eo pipefail
remote: +++++ [[ -n 1 ]]
remote: +++++ set -x
remote: ++ source /var/lib/dokku/plugins/available/config/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: +++ source /var/lib/dokku/core-plugins/available/common/functions
remote: ++++ set -eo pipefail
remote: ++++ [[ -n 1 ]]
remote: ++++ set -x
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + source /var/lib/dokku/plugins/available/git/internal-functions
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/property-functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + case "$1" in
remote: + git_hook_cmd git-hook test
remote: + declare 'desc=kick off receive-app trigger from git prereceive hook'
remote: + local cmd=git-hook
remote: + local APP=test
remote: + local DOKKU_DEPLOY_BRANCH
remote: + is_valid_app_name test
remote: + declare 'desc=verify app name format'
remote: + local APP=test
remote: + [[ -z test ]]
remote: + [[ test =~ ^[a-z].* ]]
remote: + [[ ! test =~ [A-Z] ]]
remote: + [[ ! test =~ [:] ]]
remote: + return 0
remote: ++ git_deploy_branch test
remote: ++ declare 'desc=retrieve the deploy branch for a given application'
remote: ++ local cmd=git-hook
remote: ++ local APP=test
remote: +++ fn-plugin-property-get git test deploy-branch ''
remote: +++ declare 'desc=returns the property store value for an app'
remote: +++ declare PLUGIN=git APP=test KEY=deploy-branch DEFAULT=
remote: +++ local CONFIG_VALUE
remote: +++ [[ -z git ]]
remote: +++ [[ -z test ]]
remote: +++ [[ -z deploy-branch ]]
remote: ++++ fn-plugin-property-read git test deploy-branch
remote: ++++ declare 'desc=read a key from the property store for an app'
remote: ++++ declare PLUGIN=git APP=test KEY=deploy-branch
remote: ++++ [[ -z git ]]
remote: ++++ [[ -z test ]]
remote: ++++ [[ -z deploy-branch ]]
remote: ++++ [[ ! -f /var/lib/dokku/config/git/test/deploy-branch ]]
remote: ++++ return 1
remote: ++++ true
remote: +++ CONFIG_VALUE=
remote: +++ [[ -z '' ]]
remote: +++ CONFIG_VALUE=
remote: +++ echo ''
remote: ++ local DOKKU_DEPLOY_BRANCH=
remote: +++ fn-plugin-property-get git --global deploy-branch ''
remote: +++ declare 'desc=returns the property store value for an app'
remote: +++ declare PLUGIN=git APP=--global KEY=deploy-branch DEFAULT=
remote: +++ local CONFIG_VALUE
remote: +++ [[ -z git ]]
remote: +++ [[ -z --global ]]
remote: +++ [[ -z deploy-branch ]]
remote: ++++ fn-plugin-property-read git --global deploy-branch
remote: ++++ declare 'desc=read a key from the property store for an app'
remote: ++++ declare PLUGIN=git APP=--global KEY=deploy-branch
remote: ++++ [[ -z git ]]
remote: ++++ [[ -z --global ]]
remote: ++++ [[ -z deploy-branch ]]
remote: ++++ [[ ! -f /var/lib/dokku/config/git/--global/deploy-branch ]]
remote: ++++ return 1
remote: ++++ true
remote: +++ CONFIG_VALUE=
remote: +++ [[ -z '' ]]
remote: +++ CONFIG_VALUE=
remote: +++ echo ''
remote: ++ local DOKKU_GLOBAL_DEPLOY_BRANCH=
remote: ++ [[ -n '' ]]
remote: ++ [[ -n '' ]]
remote: ++ echo master
remote: + DOKKU_DEPLOY_BRANCH=master
remote: + git check-ref-format --branch master
remote: + local oldrev newrev refname
remote: + read -r oldrev newrev refname
remote: + [[ refs/heads/master == \r\e\f\s\/\h\e\a\d\s\/\m\a\s\t\e\r ]]
remote: + git_receive_app test 7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + declare 'desc=git receive-app plugin trigger'
remote: + declare APP=test REV=7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + [[ ! -d /home/dokku/test/refs ]]
remote: + acquire_app_deploy_lock test exclusive
remote: + declare 'desc=acquire advisory lock for use in git/tar deploys'
remote: + local APP=test
remote: + verify_app_name test
remote: + declare 'desc=verify app name format and app existence'
remote: + local APP=test
remote: + is_valid_app_name test
remote: + declare 'desc=verify app name format'
remote: + local APP=test
remote: + [[ -z test ]]
remote: + [[ test =~ ^[a-z].* ]]
remote: + [[ ! test =~ [A-Z] ]]
remote: + [[ ! test =~ [:] ]]
remote: + return 0
remote: + [[ ! -d /home/dokku/test ]]
remote: + return 0
remote: + local LOCK_TYPE=exclusive
remote: + local APP_DEPLOY_LOCK_FILE=/home/dokku/test/.deploy.lock
remote: + local 'LOCK_WAITING_MSG=test currently has a deploy lock in place. Waiting...'
remote: + local 'LOCK_FAILED_MSG=test currently has a deploy lock in place. Exiting...'
remote: + acquire_advisory_lock /home/dokku/test/.deploy.lock exclusive 'test currently has a deploy lock in place. Waiting...' 'test currently has a deploy lock in place. Exiting...'
remote: + declare 'desc=acquire advisory lock'
remote: + local LOCK_FILE=/home/dokku/test/.deploy.lock LOCK_TYPE=exclusive 'LOCK_WAITING_MSG=test currently has a deploy lock in place. Waiting...' 'LOCK_FAILED_MSG=test currently has a deploy lock in place. Exiting...'
remote: + local LOCK_FD=200
remote: + local SHOW_MSG=true
remote: + eval 'exec 200>/home/dokku/test/.deploy.lock'
remote: ++ exec
remote: + [[ exclusive == \w\a\i\t\i\n\g ]]
remote: + flock -n 200
remote: + git_build test 7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + declare 'desc=setup and call git_build_app_repo'
remote: + local APP=test REV=7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + local DOKKU_DEPLOY_BRANCH ENV_VAR_NAME REF
remote: + [[ 2 -ge 2 ]]
remote: ++ fn-plugin-property-get git test rev-env-var
remote: ++ declare 'desc=returns the property store value for an app'
remote: ++ declare PLUGIN=git APP=test KEY=rev-env-var DEFAULT=
remote: ++ local CONFIG_VALUE
remote: ++ [[ -z git ]]
remote: ++ [[ -z test ]]
remote: ++ [[ -z rev-env-var ]]
remote: +++ fn-plugin-property-read git test rev-env-var
remote: +++ declare 'desc=read a key from the property store for an app'
remote: +++ declare PLUGIN=git APP=test KEY=rev-env-var
remote: +++ [[ -z git ]]
remote: +++ [[ -z test ]]
remote: +++ [[ -z rev-env-var ]]
remote: +++ [[ ! -f /var/lib/dokku/config/git/test/rev-env-var ]]
remote: +++ return 1
remote: +++ true
remote: ++ CONFIG_VALUE=
remote: ++ [[ -z '' ]]
remote: ++ CONFIG_VALUE=
remote: ++ echo ''
remote: + ENV_VAR_NAME=
remote: + [[ -z '' ]]
remote: + fn-plugin-property-exists git test rev-env-var
remote: + declare 'desc=returns whether the property store has a value for an app'
remote: + declare PLUGIN=git APP=test KEY=rev-env-var DEFAULT=
remote: + local CONFIG_VALUE
remote: + [[ -z git ]]
remote: + [[ -z test ]]
remote: + [[ -z rev-env-var ]]
remote: + [[ ! -f /var/lib/dokku/config/git/test/rev-env-var ]]
remote: + return 1
remote: + ENV_VAR_NAME=GIT_REV
remote: + [[ -n GIT_REV ]]
remote: + DOKKU_QUIET_OUTPUT=1
remote: + config_set --no-restart test GIT_REV=7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + declare 'desc=set value of given config var'
remote: + config_sub set --no-restart test GIT_REV=7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + declare 'desc=executes a config subcommand'
remote: + local name=set
remote: + shift
remote: + /var/lib/dokku/plugins/available/config/subcommands/set config:set --no-restart test GIT_REV=7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + local REF=7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + git_build_app_repo test 7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + declare 'desc=builds local git app repo for app'
remote: + declare APP=test REV=7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + local DOKKU_GLOBAL_DISABLE_AUTOCREATE
remote: + verify_app_name test
remote: + declare 'desc=verify app name format and app existence'
remote: + local APP=test
remote: + is_valid_app_name test
remote: + declare 'desc=verify app name format'
remote: + local APP=test
remote: + [[ -z test ]]
remote: + [[ test =~ ^[a-z].* ]]
remote: + [[ ! test =~ [A-Z] ]]
remote: + [[ ! test =~ [:] ]]
remote: + return 0
remote: + [[ ! -d /home/dokku/test ]]
remote: + return 0
remote: ++ mktemp -d /tmp/dokku-git_build_app_repo.XXXX
remote: + local GIT_BUILD_APP_REPO_TMP_WORK_DIR=/tmp/dokku-git_build_app_repo.uPme
remote: + trap 'rm -rf '\''/tmp/dokku-git_build_app_repo.uPme'\'' >/dev/null' RETURN INT TERM EXIT
remote: + local TMP_TAG=dokku/7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + chmod 755 /tmp/dokku-git_build_app_repo.uPme
remote: + unset GIT_DIR GIT_WORK_TREE
remote: + apps_exists test
remote: + use_git_worktree
remote: + declare 'desc=detects whether to use git worktree'
remote: + local GIT_VERSION MAJOR_VERSION MINOR_VERSION
remote: ++ awk '{split($0,a," "); print a[3]}'
remote: ++ git --version
remote: + GIT_VERSION=2.17.1
remote: ++ awk '{split($0,a,"."); print a[1]}'
remote: ++ echo 2.17.1
remote: + MAJOR_VERSION=2
remote: ++ awk '{split($0,a,"."); print a[2]}'
remote: ++ echo 2.17.1
remote: + MINOR_VERSION=17
remote: + [[ 2 -ge 3 ]]
remote: + [[ 2 -eq 2 ]]
remote: + [[ 17 -ge 11 ]]
remote: + return 0
remote: + pushd /home/dokku/test
remote: + suppress_output env -u GIT_QUARANTINE_PATH git worktree add /tmp/dokku-git_build_app_repo.uPme 7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + declare 'desc=suppress all output from a given command unless there is an error'
remote: + local TMP_COMMAND_OUTPUT
remote: ++ mktemp /tmp/dokku-suppress_output.XXXX
remote: + TMP_COMMAND_OUTPUT=/tmp/dokku-suppress_output.hfju
remote: + trap 'rm -rf '\''/tmp/dokku-suppress_output.hfju'\'' >/dev/null' RETURN
remote: + env -u GIT_QUARANTINE_PATH git worktree add /tmp/dokku-git_build_app_repo.uPme 7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + return 0
remote: ++ rm -rf /tmp/dokku-suppress_output.hfju
remote: + popd
remote: + pushd /tmp/dokku-git_build_app_repo.uPme
remote: + suppress_output env -u GIT_QUARANTINE_PATH git submodule update --init --recursive
remote: + declare 'desc=suppress all output from a given command unless there is an error'
remote: + local TMP_COMMAND_OUTPUT
remote: ++ mktemp /tmp/dokku-suppress_output.XXXX
remote: + TMP_COMMAND_OUTPUT=/tmp/dokku-suppress_output.2Hkx
remote: + trap 'rm -rf '\''/tmp/dokku-suppress_output.2Hkx'\'' >/dev/null' RETURN
remote: + env -u GIT_QUARANTINE_PATH git submodule update --init --recursive
remote: + return 0
remote: ++ rm -rf /tmp/dokku-suppress_output.2Hkx
remote: + find . -name .git -prune -exec rm -rf '{}' ';'
remote: + use_git_worktree
remote: + declare 'desc=detects whether to use git worktree'
remote: + local GIT_VERSION MAJOR_VERSION MINOR_VERSION
remote: ++ awk '{split($0,a," "); print a[3]}'
remote: ++ git --version
remote: + GIT_VERSION=2.17.1
remote: ++ awk '{split($0,a,"."); print a[1]}'
remote: ++ echo 2.17.1
remote: + MAJOR_VERSION=2
remote: ++ awk '{split($0,a,"."); print a[2]}'
remote: ++ echo 2.17.1
remote: + MINOR_VERSION=17
remote: + [[ 2 -ge 3 ]]
remote: + [[ 2 -eq 2 ]]
remote: + [[ 17 -ge 11 ]]
remote: + return 0
remote: + pushd /home/dokku/test
remote: + git worktree prune
remote: + popd
remote: + local DOKKU_APP_DISABLE_ANSI_PREFIX_REMOVAL DOKKU_GLOBAL_DISABLE_ANSI_PREFIX_REMOVAL DOKKU_DISABLE_ANSI_PREFIX_REMOVAL
remote: ++ config_get test DOKKU_DISABLE_ANSI_PREFIX_REMOVAL
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get test DOKKU_DISABLE_ANSI_PREFIX_REMOVAL
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_DISABLE_ANSI_PREFIX_REMOVAL
remote: ++ true
remote: + DOKKU_APP_DISABLE_ANSI_PREFIX_REMOVAL=
remote: ++ config_get --global DOKKU_DISABLE_ANSI_PREFIX_REMOVAL
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get --global DOKKU_DISABLE_ANSI_PREFIX_REMOVAL
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get --global DOKKU_DISABLE_ANSI_PREFIX_REMOVAL
remote: ++ true
remote: + DOKKU_GLOBAL_DISABLE_ANSI_PREFIX_REMOVAL=
remote: + DOKKU_DISABLE_ANSI_PREFIX_REMOVAL=
remote: + [[ '' == \t\r\u\e ]]
/'
remote: + git_trigger_build test /tmp/dokku-git_build_app_repo.uPme 7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + declare 'desc=triggers the actual build process for a given app within a directory at a particular revision'
remote: + declare APP=test TMP_WORK_DIR=/tmp/dokku-git_build_app_repo.uPme REV=7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + plugn trigger post-extract test /tmp/dokku-git_build_app_repo.uPme 7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + [[ -f Dockerfile ]]
remote: ++ [[ -f .env ]]
remote: ++ echo 1
remote: + [[ 1 != \0 ]]
remote: + [[ ! -f .buildpacks ]]
remote: ++ config_get test BUILDPACK_URL
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get test BUILDPACK_URL
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test BUILDPACK_URL
remote: ++ true
remote: + [[ -z '' ]]
remote: + plugn trigger pre-receive-app test dockerfile /tmp/dokku-git_build_app_repo.uPme 7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + dokku_receive test dockerfile /tmp/dokku-git_build_app_repo.uPme
remote: + declare 'desc=receives an app kicks off deploy process'
remote: + source /var/lib/dokku/plugins/available/config/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: + local APP=test
remote: ++ get_app_image_name test
remote: ++ declare 'desc=return image identifier for a given app, tag tuple. validate if tag is presented'
remote: ++ local APP=test
remote: ++ local IMAGE_TAG=
remote: ++ IMAGE_REPO=
remote: ++ is_valid_app_name test
remote: ++ declare 'desc=verify app name format'
remote: ++ local APP=test
remote: ++ [[ -z test ]]
remote: ++ [[ test =~ ^[a-z].* ]]
remote: ++ [[ ! test =~ [A-Z] ]]
remote: ++ [[ ! test =~ [:] ]]
remote: ++ return 0
remote: ++ [[ -z '' ]]
remote: +++ get_app_image_repo test
remote: +++ declare 'desc=central definition of image repo pattern'
remote: +++ local APP=test
remote: +++ local IMAGE_REPO=dokku/test
remote: +++ is_valid_app_name test
remote: +++ declare 'desc=verify app name format'
remote: +++ local APP=test
remote: +++ [[ -z test ]]
remote: +++ [[ test =~ ^[a-z].* ]]
remote: +++ [[ ! test =~ [A-Z] ]]
remote: +++ [[ ! test =~ [:] ]]
remote: +++ return 0
remote: +++ echo dokku/test
remote: ++ IMAGE_REPO=dokku/test
remote: ++ [[ -n '' ]]
remote: ++ local IMAGE=dokku/test:latest
remote: ++ echo dokku/test:latest
remote: + local IMAGE=dokku/test:latest
remote: + local IMAGE_SOURCE_TYPE=dockerfile
remote: + local TMP_WORK_DIR=/tmp/dokku-git_build_app_repo.uPme
remote: ++ config_get test DOKKU_SKIP_CLEANUP
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get test DOKKU_SKIP_CLEANUP
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_SKIP_CLEANUP
remote: ++ true
remote: + local DOKKU_SKIP_CLEANUP=
remote: + docker_cleanup test
remote: + declare 'desc=cleans up all exited/dead containers and removes all dangling images'
remote: + declare APP=test FORCE_CLEANUP=
remote: + local DOKKU_APP_SKIP_CLEANUP
remote: + source /var/lib/dokku/plugins/available/config/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: + [[ '' != \t\r\u\e ]]
remote: + [[ -n test ]]
remote: ++ config_get test DOKKU_SKIP_CLEANUP
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get test DOKKU_SKIP_CLEANUP
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_SKIP_CLEANUP
remote: ++ true
remote: + DOKKU_APP_SKIP_CLEANUP=
remote: + [[ -n '' ]]
remote: + [[ -n '' ]]
remote: + dokku_log_info1 'Cleaning up...'
remote: + declare 'desc=log info1 formatter'
remote: + echo '-----> Cleaning up...'
-----> Cleaning up...
remote: ++ get_app_scheduler test
remote: ++ declare 'desc=fetch the scheduler for a given application'
remote: ++ declare APP=test
remote: ++ local DOKKU_APP_SCHEDULER DOKKU_GLOBAL_SCHEDULER DOKKU_SCHEDULER
remote: ++ source /var/lib/dokku/plugins/available/config/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: +++ source /var/lib/dokku/core-plugins/available/common/functions
remote: ++++ set -eo pipefail
remote: ++++ [[ -n 1 ]]
remote: ++++ set -x
remote: ++ [[ -n test ]]
remote: +++ config_get test DOKKU_SCHEDULER
remote: +++ declare 'desc=get value of given config var'
remote: +++ config_sub get test DOKKU_SCHEDULER
remote: +++ declare 'desc=executes a config subcommand'
remote: +++ local name=get
remote: +++ shift
remote: +++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_SCHEDULER
remote: +++ true
remote: ++ DOKKU_APP_SCHEDULER=
remote: +++ config_get --global DOKKU_SCHEDULER
remote: +++ declare 'desc=get value of given config var'
remote: +++ config_sub get --global DOKKU_SCHEDULER
remote: +++ declare 'desc=executes a config subcommand'
remote: +++ local name=get
remote: +++ shift
remote: +++ /var/lib/dokku/plugins/available/config/subcommands/get config:get --global DOKKU_SCHEDULER
remote: +++ true
remote: ++ DOKKU_GLOBAL_SCHEDULER=
remote: ++ DOKKU_SCHEDULER=
remote: ++ [[ -z '' ]]
remote: ++ DOKKU_SCHEDULER=docker-local
remote: ++ echo docker-local
remote: + local DOKKU_SCHEDULER=docker-local
remote: + plugn trigger scheduler-docker-cleanup docker-local test ''
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + scheduler-docker-local-scheduler-docker-cleanup docker-local test ''
remote: + declare 'desc=scheduler-docker-local scheduler-docker-cleanup plugin trigger'
remote: + declare 'trigger=scheduler-docker-local scheduler-docker-cleanup'
remote: + declare DOKKU_SCHEDULER=docker-local APP=test FORCE_CLEANUP=
remote: + [[ docker-local != \d\o\c\k\e\r\-\l\o\c\a\l ]]
remote: ++ docker ps -a -f status=exited -f label=dokku -q
remote: + docker rm e7007ce45000
remote: ++ docker ps -a -f status=dead -f label=dokku -q
remote: + docker rm
remote: + true
remote: ++ docker images -f dangling=true -q
remote: + docker rmi d63940c6f532 d6fa5d7c783b
remote: ++ docker ps -a -f status=exited -f label=dokku -q
remote: + docker rm
remote: + true
remote: ++ docker ps -a -f status=dead -f label=dokku -q
remote: + docker rm
remote: + true
remote: + dokku_log_info1 'Building test from dockerfile...'
remote: + declare 'desc=log info1 formatter'
remote: + echo '-----> Building test from dockerfile...'
-----> Building test from dockerfile...
remote: + DOKKU_QUIET_OUTPUT=1
remote: + config_set --no-restart test DOKKU_APP_TYPE=dockerfile
remote: + declare 'desc=set value of given config var'
remote: + config_sub set --no-restart test DOKKU_APP_TYPE=dockerfile
remote: + declare 'desc=executes a config subcommand'
remote: + local name=set
remote: + shift
remote: + /var/lib/dokku/plugins/available/config/subcommands/set config:set --no-restart test DOKKU_APP_TYPE=dockerfile
remote: ++ docker images -f dangling=true -q
remote: + docker rmi d63940c6f532 d6fa5d7c783b
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + dokku_build test dockerfile /tmp/dokku-git_build_app_repo.uPme
remote: + declare 'desc=build phase'
remote: + source /var/lib/dokku/plugins/available/config/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: + local APP=test
remote: + local IMAGE_SOURCE_TYPE=dockerfile
remote: + local TMP_WORK_DIR=/tmp/dokku-git_build_app_repo.uPme
remote: ++ get_app_image_name test
remote: ++ declare 'desc=return image identifier for a given app, tag tuple. validate if tag is presented'
remote: ++ local APP=test
remote: ++ local IMAGE_TAG=
remote: ++ IMAGE_REPO=
remote: ++ is_valid_app_name test
remote: ++ declare 'desc=verify app name format'
remote: ++ local APP=test
remote: ++ [[ -z test ]]
remote: ++ [[ test =~ ^[a-z].* ]]
remote: ++ [[ ! test =~ [A-Z] ]]
remote: ++ [[ ! test =~ [:] ]]
remote: ++ return 0
remote: ++ [[ -z '' ]]
remote: +++ get_app_image_repo test
remote: +++ declare 'desc=central definition of image repo pattern'
remote: +++ local APP=test
remote: +++ local IMAGE_REPO=dokku/test
remote: +++ is_valid_app_name test
remote: +++ declare 'desc=verify app name format'
remote: +++ local APP=test
remote: +++ [[ -z test ]]
remote: +++ [[ test =~ ^[a-z].* ]]
remote: +++ [[ ! test =~ [A-Z] ]]
remote: +++ [[ ! test =~ [:] ]]
remote: +++ return 0
remote: +++ echo dokku/test
remote: ++ IMAGE_REPO=dokku/test
remote: ++ [[ -n '' ]]
remote: ++ local IMAGE=dokku/test:latest
remote: ++ echo dokku/test:latest
remote: + local IMAGE=dokku/test:latest
remote: + local cid
remote: + verify_app_name test
remote: + declare 'desc=verify app name format and app existence'
remote: + local APP=test
remote: + is_valid_app_name test
remote: + declare 'desc=verify app name format'
remote: + local APP=test
remote: + [[ -z test ]]
remote: + [[ test =~ ^[a-z].* ]]
remote: + [[ ! test =~ [A-Z] ]]
remote: + [[ ! test =~ [:] ]]
remote: + return 0
remote: + [[ ! -d /home/dokku/test ]]
remote: + return 0
remote: + local DOKKU_APP_CACHE_DIR=/home/dokku/test/cache
remote: + local DOKKU_APP_HOST_CACHE_DIR=/home/dokku/test/cache
remote: ++ config_export app test
remote: ++ declare 'desc=returns export command for config variable of specified type (app/global)'
remote: ++ local CONFIG_TYPE=app
remote: ++ shift
remote: ++ local APP=test
remote: ++ [[ app == \g\l\o\b\a\l ]]
remote: ++ shift
remote: ++ config_sub export test
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=export
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/export config:export test
remote: ++ return 0
remote: + eval 'export DATABASE_URL='\''postgres://postgres:2d8cde18518d15f84aa42dd1b19fae8a@dokku-postgres-test:5432/test'\''
remote: export DOKKU_APP_RESTORE='\''1'\''
remote: export DOKKU_APP_TYPE='\''dockerfile'\''
remote: export DOKKU_DOCKERFILE_CMD='\''CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'\''
remote: export DOKKU_PROXY_PORT='\''80'\''
remote: export DOKKU_PROXY_PORT_MAP='\''http:80:5000  '\''
remote: export ENVIRONMENT='\''dev'\''
remote: export GIT_REV='\''7799216cb1b988ac657abcc3d7dbf92b098e00c3'\''
remote: export SECRET_KEY='\''fjdklsfjeif9wjei9rjewe9wjv'\'''
remote: ++ export DATABASE_URL=postgres://postgres:2d8cde18518d15f84aa42dd1b19fae8a@dokku-postgres-test:5432/test
remote: ++ DATABASE_URL=postgres://postgres:2d8cde18518d15f84aa42dd1b19fae8a@dokku-postgres-test:5432/test
remote: ++ export DOKKU_APP_RESTORE=1
remote: ++ DOKKU_APP_RESTORE=1
remote: ++ export DOKKU_APP_TYPE=dockerfile
remote: ++ DOKKU_APP_TYPE=dockerfile
remote: ++ export 'DOKKU_DOCKERFILE_CMD=CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'
remote: ++ DOKKU_DOCKERFILE_CMD='CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'
remote: ++ export DOKKU_PROXY_PORT=80
remote: ++ DOKKU_PROXY_PORT=80
remote: ++ export 'DOKKU_PROXY_PORT_MAP=http:80:5000  '
remote: ++ DOKKU_PROXY_PORT_MAP='http:80:5000  '
remote: ++ export ENVIRONMENT=dev
remote: ++ ENVIRONMENT=dev
remote: ++ export GIT_REV=7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: ++ GIT_REV=7799216cb1b988ac657abcc3d7dbf92b098e00c3
remote: ++ export SECRET_KEY=fjdklsfjeif9wjei9rjewe9wjv
remote: ++ SECRET_KEY=fjdklsfjeif9wjei9rjewe9wjv
remote: + pushd /tmp/dokku-git_build_app_repo.uPme
remote: + case "$IMAGE_SOURCE_TYPE" in
remote: ++ get_dockerfile_exposed_ports Dockerfile
remote: ++ declare 'desc=return all exposed ports from passed file path'
remote: +++ xargs
remote: +++ awk '{ print $2 }'
remote: +++ egrep '^EXPOSE ' Dockerfile
remote: ++ local DOCKERFILE_PORTS=
remote: ++ echo ''
remote: + local DOCKERFILE_PORTS=
remote: + [[ -n '' ]]
remote: ++ extract_directive_from_dockerfile Dockerfile ENTRYPOINT
remote: ++ declare 'desc=return requested directive from passed file path'
remote: ++ local FILE_PATH=Dockerfile
remote: ++ local SEARCH_STRING=ENTRYPOINT
remote: +++ tail -n1
remote: +++ egrep '^ENTRYPOINT ' Dockerfile
remote: ++ local FOUND_LINE=
remote: ++ echo ''
remote: + local DOCKERFILE_ENTRYPOINT=
remote: + [[ -n '' ]]
remote: ++ extract_directive_from_dockerfile Dockerfile CMD
remote: ++ declare 'desc=return requested directive from passed file path'
remote: ++ local FILE_PATH=Dockerfile
remote: ++ local SEARCH_STRING=CMD
remote: +++ tail -n1
remote: +++ egrep '^CMD ' Dockerfile
remote: ++ local 'FOUND_LINE=CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'
remote: ++ echo 'CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'
remote: + local 'DOCKERFILE_CMD=CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'
remote: + [[ -n CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application ]]
remote: + config_set --no-restart test 'DOKKU_DOCKERFILE_CMD=CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'
remote: + declare 'desc=set value of given config var'
remote: + config_sub set --no-restart test 'DOKKU_DOCKERFILE_CMD=CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'
remote: + declare 'desc=executes a config subcommand'
remote: + local name=set
remote: + shift
remote: + /var/lib/dokku/plugins/available/config/subcommands/set config:set --no-restart test 'DOKKU_DOCKERFILE_CMD=CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'
-----> Setting config vars
       DOKKU_DOCKERFILE_CMD:  CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + plugn trigger pre-build-dockerfile test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + [[ '' == \f\a\l\s\e ]]
remote: ++ plugn trigger docker-args-build test dockerfile
remote: ++ :
remote: + source /var/lib/dokku/plugins/available/config/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: + app_user_docker_args test dockerfile
remote: + local APP=test
remote: + local STDIN
remote: + local DOKKU_APP_TYPE
remote: + local DOKKU_APP_USER
remote: ++ cat
remote: + STDIN=
remote: ++ config_get test DOKKU_APP_TYPE
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get test DOKKU_APP_TYPE
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_APP_TYPE
remote: + DOKKU_APP_TYPE=dockerfile
remote: ++ config_get test DOKKU_APP_USER
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get test DOKKU_APP_USER
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_APP_USER
remote: ++ true
remote: + DOKKU_APP_USER=
remote: + DOKKU_APP_USER=herokuishuser
remote: + [[ dockerfile == \h\e\r\o\k\u\i\s\h ]]
remote: + local docker_args=
remote: + echo -n ''
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + docker_args test dockerfile
remote: + declare 'desc=docker args plugin trigger'
remote: + local trigger=/var/lib/dokku/plugins/enabled/docker-options/docker-args-build
remote: ++ cat
remote: + local STDIN=
remote: + local APP=test
remote: + local IMAGE_SOURCE_TYPE=dockerfile
remote: + case "$0" in
remote: + local PHASE=BUILD
remote: + local FILE_PREFIX=DOCKER_OPTIONS_
remote: + local PHASE_FILE_PATH=/home/dokku/test/DOCKER_OPTIONS_BUILD
remote: + local output=
remote: + [[ -f /home/dokku/test/DOCKER_OPTIONS_BUILD ]]
remote: + local DONE=false
remote: + false
remote: + local line
remote: + read -r line
remote: + [[ -z --link dokku.postgres.test:dokku-postgres-test ]]
remote: + case "$line" in
remote: + case "$IMAGE_SOURCE_TYPE" in
remote: + case "$line" in
remote: + continue
remote: + false
remote: + local line
remote: + read -r line
remote: + local DONE=true
remote: + [[ -z '' ]]
remote: + continue
remote: + true
remote: + echo -n ''
remote: + local DOCKER_ARGS=
remote: + local IMAGE_SOURCE_TYPE=dockerfile
remote: ++ plugn trigger docker-args-process-build test '' dockerfile
remote: ++ :
remote: + DOCKER_ARGS+=
remote: ++ sed -e 's/--volume=[[:graph:]]\+[[:blank:]]\?//g' -e 's/-v[[:blank:]]\?[[:graph:]]\+[[:blank:]]\?//g'
remote: + local DOCKER_ARGS=
remote: + declare -a ARG_ARRAY
remote: + eval 'ARG_ARRAY=()'
remote: ++ ARG_ARRAY=()
remote: + docker build -t dokku/test:latest .
remote: build context to Docker daemon  37.89kB
Step 1/10 : FROM python:3.8-buster
 ---> 1f88553e8143
Step 2/10 : RUN pip install --user pipenv
 ---> Using cache
 ---> b6c739f4f6ab
Step 3/10 : ENV PATH="${PATH}:/root/.local/bin"
 ---> Using cache
 ---> f067a1be46d1
Step 4/10 : ENV PIPENV_VENV_IN_PROJECT=0
 ---> Using cache
 ---> b43cbc679514
Step 5/10 : COPY . /app
 ---> Using cache
 ---> 5bb3f4514e09
Step 6/10 : WORKDIR /app
 ---> Using cache
 ---> 516baf1885b6
Step 7/10 : RUN rm -f -r .venv
 ---> Using cache
 ---> baa60ab37042
Step 8/10 : RUN mkdir .venv
 ---> Using cache
 ---> 91abc1c2c7a4
Step 9/10 : RUN pipenv install
 ---> Using cache
 ---> 6156db1ae36a
Step 10/10 : CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application
 ---> Using cache
 ---> 96fa874813a0
Successfully built 96fa874813a0
Successfully tagged dokku/test:latest
remote: + plugn trigger post-build-dockerfile test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + release_and_deploy test
remote: + declare 'desc=main function for releasing and deploying an app'
remote: + source /var/lib/dokku/plugins/available/config/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: + local APP=test
remote: + local IMAGE_TAG=
remote: ++ get_app_image_name test ''
remote: ++ declare 'desc=return image identifier for a given app, tag tuple. validate if tag is presented'
remote: ++ local APP=test
remote: ++ local IMAGE_TAG=
remote: ++ IMAGE_REPO=
remote: ++ is_valid_app_name test
remote: ++ declare 'desc=verify app name format'
remote: ++ local APP=test
remote: ++ [[ -z test ]]
remote: ++ [[ test =~ ^[a-z].* ]]
remote: ++ [[ ! test =~ [A-Z] ]]
remote: ++ [[ ! test =~ [:] ]]
remote: ++ return 0
remote: ++ [[ -z '' ]]
remote: +++ get_app_image_repo test
remote: +++ declare 'desc=central definition of image repo pattern'
remote: +++ local APP=test
remote: +++ local IMAGE_REPO=dokku/test
remote: +++ is_valid_app_name test
remote: +++ declare 'desc=verify app name format'
remote: +++ local APP=test
remote: +++ [[ -z test ]]
remote: +++ [[ test =~ ^[a-z].* ]]
remote: +++ [[ ! test =~ [A-Z] ]]
remote: +++ [[ ! test =~ [:] ]]
remote: +++ return 0
remote: +++ echo dokku/test
remote: ++ IMAGE_REPO=dokku/test
remote: ++ [[ -n '' ]]
remote: ++ local IMAGE=dokku/test:latest
remote: ++ echo dokku/test:latest
remote: + local IMAGE=dokku/test:latest
remote: + local DOKKU_DOCKERFILE_PORTS
remote: + verify_app_name test
remote: + declare 'desc=verify app name format and app existence'
remote: + local APP=test
remote: + is_valid_app_name test
remote: + declare 'desc=verify app name format'
remote: + local APP=test
remote: + [[ -z test ]]
remote: + [[ test =~ ^[a-z].* ]]
remote: + [[ ! test =~ [A-Z] ]]
remote: + [[ ! test =~ [:] ]]
remote: + return 0
remote: + [[ ! -d /home/dokku/test ]]
remote: + return 0
remote: + verify_image dokku/test:latest
remote: + declare 'desc=verify image existence'
remote: + local IMAGE=dokku/test:latest
remote: + docker inspect dokku/test:latest
remote: + return 0
remote: + is_image_herokuish_based dokku/test:latest
remote: + declare 'desc=returns true if app image is based on herokuish'
remote: + declare IMAGE=dokku/test:latest
remote: + local USER_VALUE
remote: + [[ -z dokku/test:latest ]]
remote: ++ docker inspect -f '{{range .Config.Env}}{{if eq . "USER=herokuishuser" }}{{println .}}{{end}}{{end}}' dokku/test:latest
remote: + USER_VALUE=
remote: + [[ '' == '' ]]
remote: + return 1
remote: + local IMAGE_SOURCE_TYPE=dockerfile
remote: ++ config_get test DOKKU_DOCKERFILE_PORTS
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get test DOKKU_DOCKERFILE_PORTS
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_DOCKERFILE_PORTS
remote: ++ true
remote: + DOKKU_DOCKERFILE_PORTS=
remote: + [[ -z '' ]]
remote: ++ get_exposed_ports_from_image dokku/test:latest
remote: ++ declare 'desc=return all exposed ports from passed image name'
remote: ++ local IMAGE=dokku/test:latest
remote: ++ verify_image dokku/test:latest
remote: ++ declare 'desc=verify image existence'
remote: ++ local IMAGE=dokku/test:latest
remote: ++ docker inspect dokku/test:latest
remote: ++ return 0
remote: +++ docker inspect -f '{{range $key, $value := .Config.ExposedPorts}}{{$key}} {{end}}' dokku/test:latest
remote: ++ local DOCKER_IMAGE_EXPOSED_PORTS=
remote: ++ echo ''
remote: + local DOCKER_IMAGE_PORTS=
remote: + [[ -n '' ]]
remote: ++ config_get test DOKKU_SKIP_DEPLOY
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get test DOKKU_SKIP_DEPLOY
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_SKIP_DEPLOY
remote: ++ true
remote: + local DOKKU_APP_SKIP_DEPLOY=
remote: ++ config_get --global DOKKU_SKIP_DEPLOY
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get --global DOKKU_SKIP_DEPLOY
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get --global DOKKU_SKIP_DEPLOY
remote: ++ true
remote: + local DOKKU_GLOBAL_SKIP_DEPLOY=
remote: + local DOKKU_SKIP_DEPLOY=
remote: + dokku_log_info1 'Releasing test (dokku/test:latest)...'
remote: + declare 'desc=log info1 formatter'
remote: + echo '-----> Releasing test (dokku/test:latest)...'
remote: + dokku_release test dockerfile ''
remote: + declare 'desc=release phase'
remote: + source /var/lib/dokku/plugins/available/config/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
-----> Releasing test (dokku/test:latest)...
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: + local APP=test
remote: + local IMAGE_SOURCE_TYPE=dockerfile
remote: + local IMAGE_TAG=
remote: ++ get_app_image_name test ''
remote: ++ declare 'desc=return image identifier for a given app, tag tuple. validate if tag is presented'
remote: ++ local APP=test
remote: ++ local IMAGE_TAG=
remote: ++ IMAGE_REPO=
remote: ++ is_valid_app_name test
remote: ++ declare 'desc=verify app name format'
remote: ++ local APP=test
remote: ++ [[ -z test ]]
remote: ++ [[ test =~ ^[a-z].* ]]
remote: ++ [[ ! test =~ [A-Z] ]]
remote: ++ [[ ! test =~ [:] ]]
remote: ++ return 0
remote: ++ [[ -z '' ]]
remote: +++ get_app_image_repo test
remote: +++ declare 'desc=central definition of image repo pattern'
remote: +++ local APP=test
remote: +++ local IMAGE_REPO=dokku/test
remote: +++ is_valid_app_name test
remote: +++ declare 'desc=verify app name format'
remote: +++ local APP=test
remote: +++ [[ -z test ]]
remote: +++ [[ test =~ ^[a-z].* ]]
remote: +++ [[ ! test =~ [A-Z] ]]
remote: +++ [[ ! test =~ [:] ]]
remote: +++ return 0
remote: +++ echo dokku/test
remote: ++ IMAGE_REPO=dokku/test
remote: ++ [[ -n '' ]]
remote: ++ local IMAGE=dokku/test:latest
remote: ++ echo dokku/test:latest
remote: + local IMAGE=dokku/test:latest
remote: + local cid
remote: + verify_app_name test
remote: + declare 'desc=verify app name format and app existence'
remote: + local APP=test
remote: + is_valid_app_name test
remote: + declare 'desc=verify app name format'
remote: + local APP=test
remote: + [[ -z test ]]
remote: + [[ test =~ ^[a-z].* ]]
remote: + [[ ! test =~ [A-Z] ]]
remote: + [[ ! test =~ [:] ]]
remote: + return 0
remote: + [[ ! -d /home/dokku/test ]]
remote: + return 0
remote: + case "$IMAGE_SOURCE_TYPE" in
remote: + plugn trigger pre-release-dockerfile test ''
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + plugn trigger post-release-dockerfile test ''
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + [[ '' != \t\r\u\e ]]
remote: + dokku_log_info1 'Deploying test (dokku/test:latest)...'
remote: + declare 'desc=log info1 formatter'
remote: + echo '-----> Deploying test (dokku/test:latest)...'
remote: + dokku_deploy_cmd test ''
remote: + declare 'desc=deploy phase'
remote: + declare APP=test IMAGE_TAG=
remote: + source /var/lib/dokku/plugins/available/config/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
-----> Deploying test (dokku/test:latest)...
remote: ++ get_app_scheduler test
remote: ++ declare 'desc=fetch the scheduler for a given application'
remote: ++ declare APP=test
remote: ++ local DOKKU_APP_SCHEDULER DOKKU_GLOBAL_SCHEDULER DOKKU_SCHEDULER
remote: ++ source /var/lib/dokku/plugins/available/config/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: +++ source /var/lib/dokku/core-plugins/available/common/functions
remote: ++++ set -eo pipefail
remote: ++++ [[ -n 1 ]]
remote: ++++ set -x
remote: ++ [[ -n test ]]
remote: +++ config_get test DOKKU_SCHEDULER
remote: +++ declare 'desc=get value of given config var'
remote: +++ config_sub get test DOKKU_SCHEDULER
remote: +++ declare 'desc=executes a config subcommand'
remote: +++ local name=get
remote: +++ shift
remote: +++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_SCHEDULER
remote: +++ true
remote: ++ DOKKU_APP_SCHEDULER=
remote: +++ config_get --global DOKKU_SCHEDULER
remote: +++ declare 'desc=get value of given config var'
remote: +++ config_sub get --global DOKKU_SCHEDULER
remote: +++ declare 'desc=executes a config subcommand'
remote: +++ local name=get
remote: +++ shift
remote: +++ /var/lib/dokku/plugins/available/config/subcommands/get config:get --global DOKKU_SCHEDULER
remote: +++ true
remote: ++ DOKKU_GLOBAL_SCHEDULER=
remote: ++ DOKKU_SCHEDULER=
remote: ++ [[ -z '' ]]
remote: ++ DOKKU_SCHEDULER=docker-local
remote: ++ echo docker-local
remote: + local DOKKU_SCHEDULER=docker-local
remote: + plugn trigger scheduler-deploy docker-local test ''
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + source /var/lib/dokku/plugins/available/checks/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: ++ source /var/lib/dokku/plugins/available/config/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: +++ source /var/lib/dokku/core-plugins/available/common/functions
remote: ++++ set -eo pipefail
remote: ++++ [[ -n 1 ]]
remote: ++++ set -x
remote: + source /var/lib/dokku/plugins/available/config/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: + source /var/lib/dokku/plugins/available/ps/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: ++ source /var/lib/dokku/plugins/available/config/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: +++ source /var/lib/dokku/core-plugins/available/common/functions
remote: ++++ set -eo pipefail
remote: ++++ [[ -n 1 ]]
remote: ++++ set -x
remote: + source /var/lib/dokku/plugins/available/scheduler-docker-local/internal-functions
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/property-functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: ++ source /var/lib/dokku/plugins/available/config/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: +++ source /var/lib/dokku/core-plugins/available/common/functions
remote: ++++ set -eo pipefail
remote: ++++ [[ -n 1 ]]
remote: ++++ set -x
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + scheduler-docker-local-scheduler-deploy docker-local test ''
remote: + declare 'desc=deploys an image tag for a given application'
remote: + declare 'trigger=scheduler-docker-local scheduler-deploy'
remote: + declare DOKKU_SCHEDULER=docker-local APP=test IMAGE_TAG=
remote: + [[ docker-local != \d\o\c\k\e\r\-\l\o\c\a\l ]]
remote: + rm -f /var/lib/dokku/data/scheduler-docker-local/test/failed-containers
remote: + local DOKKU_DOCKER_STOP_TIMEOUT DOKKU_HEROKUISH DOKKU_NETWORK_BIND_ALL IMAGE
remote: + DOKKU_HEROKUISH=false
remote: ++ get_deploying_app_image_name test ''
remote: ++ declare 'desc=return deploying image identifier for a given app, tag tuple. validate if tag is presented'
remote: ++ local APP=test
remote: ++ local IMAGE_TAG=
remote: ++ IMAGE_REPO=
remote: ++ is_valid_app_name test
remote: ++ declare 'desc=verify app name format'
remote: ++ local APP=test
remote: ++ [[ -z test ]]
remote: ++ [[ test =~ ^[a-z].* ]]
remote: ++ [[ ! test =~ [A-Z] ]]
remote: ++ [[ ! test =~ [:] ]]
remote: ++ return 0
remote: +++ plugn trigger deployed-app-repository test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local IMAGE_REMOTE_REPOSITORY=
remote: +++ plugn trigger deployed-app-image-tag test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local NEW_IMAGE_TAG=
remote: +++ plugn trigger deployed-app-image-repo test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local NEW_IMAGE_REPO=
remote: ++ [[ -n '' ]]
remote: ++ [[ -n '' ]]
remote: ++ [[ -z '' ]]
remote: +++ get_app_image_repo test
remote: +++ declare 'desc=central definition of image repo pattern'
remote: +++ local APP=test
remote: +++ local IMAGE_REPO=dokku/test
remote: +++ is_valid_app_name test
remote: +++ declare 'desc=verify app name format'
remote: +++ local APP=test
remote: +++ [[ -z test ]]
remote: +++ [[ test =~ ^[a-z].* ]]
remote: +++ [[ ! test =~ [A-Z] ]]
remote: +++ [[ ! test =~ [:] ]]
remote: +++ return 0
remote: +++ echo dokku/test
remote: ++ IMAGE_REPO=dokku/test
remote: ++ [[ -z '' ]]
remote: ++ IMAGE_TAG=latest
remote: ++ local IMAGE=dokku/test:latest
remote: ++ verify_image dokku/test:latest
remote: ++ declare 'desc=verify image existence'
remote: ++ local IMAGE=dokku/test:latest
remote: ++ docker inspect dokku/test:latest
remote: ++ return 0
remote: ++ echo dokku/test:latest
remote: + IMAGE=dokku/test:latest
remote: + verify_app_name test
remote: + declare 'desc=verify app name format and app existence'
remote: + local APP=test
remote: + is_valid_app_name test
remote: + declare 'desc=verify app name format'
remote: + local APP=test
remote: + [[ -z test ]]
remote: + [[ test =~ ^[a-z].* ]]
remote: + [[ ! test =~ [A-Z] ]]
remote: + [[ ! test =~ [:] ]]
remote: + return 0
remote: + [[ ! -d /home/dokku/test ]]
remote: + return 0
remote: + plugn trigger pre-deploy test ''
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + source /var/lib/dokku/core-plugins/available/app-json/internal-functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: ++ source /var/lib/dokku/plugins/available/config/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: +++ source /var/lib/dokku/core-plugins/available/common/functions
remote: ++++ set -eo pipefail
remote: ++++ [[ -n 1 ]]
remote: ++++ set -x
remote: ++ source /var/lib/dokku/plugins/available/ps/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: +++ source /var/lib/dokku/core-plugins/available/common/functions
remote: ++++ set -eo pipefail
remote: ++++ [[ -n 1 ]]
remote: ++++ set -x
remote: +++ source /var/lib/dokku/plugins/available/config/functions
remote: ++++ set -eo pipefail
remote: ++++ [[ -n 1 ]]
remote: ++++ set -x
remote: ++++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++++ set -eo pipefail
remote: +++++ [[ -n 1 ]]
remote: +++++ set -x
remote: + app_json_pre_deploy test ''
remote: + declare 'desc=app-json scripts execution'
remote: + local trigger=app_json_pre_deploy
remote: + local APP=test
remote: + local IMAGE_TAG=
remote: + local PHASE_SCRIPT_KEY=predeploy
remote: + execute_script test '' predeploy
remote: + declare 'desc=executes appropriate phase script key from app.json'
remote: + declare APP=test IMAGE_TAG= PHASE_SCRIPT_KEY=predeploy
remote: + local IMAGE id SCRIPT_CMD
remote: ++ get_deploying_app_image_name test ''
remote: ++ declare 'desc=return deploying image identifier for a given app, tag tuple. validate if tag is presented'
remote: ++ local APP=test
remote: ++ local IMAGE_TAG=
remote: ++ IMAGE_REPO=
remote: ++ is_valid_app_name test
remote: ++ declare 'desc=verify app name format'
remote: ++ local APP=test
remote: ++ [[ -z test ]]
remote: ++ [[ test =~ ^[a-z].* ]]
remote: ++ [[ ! test =~ [A-Z] ]]
remote: ++ [[ ! test =~ [:] ]]
remote: ++ return 0
remote: +++ plugn trigger deployed-app-repository test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local IMAGE_REMOTE_REPOSITORY=
remote: +++ plugn trigger deployed-app-image-tag test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local NEW_IMAGE_TAG=
remote: +++ plugn trigger deployed-app-image-repo test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local NEW_IMAGE_REPO=
remote: ++ [[ -n '' ]]
remote: ++ [[ -n '' ]]
remote: ++ [[ -z '' ]]
remote: +++ get_app_image_repo test
remote: +++ declare 'desc=central definition of image repo pattern'
remote: +++ local APP=test
remote: +++ local IMAGE_REPO=dokku/test
remote: +++ is_valid_app_name test
remote: +++ declare 'desc=verify app name format'
remote: +++ local APP=test
remote: +++ [[ -z test ]]
remote: +++ [[ test =~ ^[a-z].* ]]
remote: +++ [[ ! test =~ [A-Z] ]]
remote: +++ [[ ! test =~ [:] ]]
remote: +++ return 0
remote: +++ echo dokku/test
remote: ++ IMAGE_REPO=dokku/test
remote: ++ [[ -z '' ]]
remote: ++ IMAGE_TAG=latest
remote: ++ local IMAGE=dokku/test:latest
remote: ++ verify_image dokku/test:latest
remote: ++ declare 'desc=verify image existence'
remote: ++ local IMAGE=dokku/test:latest
remote: ++ docker inspect dokku/test:latest
remote: ++ return 0
remote: ++ echo dokku/test:latest
remote: + IMAGE=dokku/test:latest
remote: + [[ predeploy == \r\e\l\e\a\s\e ]]
remote: ++ get_phase_script dokku/test:latest predeploy
remote: ++ true
remote: + SCRIPT_CMD=
remote: + [[ -z '' ]]
remote: + return
remote: + execute_script test '' release
remote: + declare 'desc=executes appropriate phase script key from app.json'
remote: + declare APP=test IMAGE_TAG= PHASE_SCRIPT_KEY=release
remote: + local IMAGE id SCRIPT_CMD
remote: ++ get_deploying_app_image_name test ''
remote: ++ declare 'desc=return deploying image identifier for a given app, tag tuple. validate if tag is presented'
remote: ++ local APP=test
remote: ++ local IMAGE_TAG=
remote: ++ IMAGE_REPO=
remote: ++ is_valid_app_name test
remote: ++ declare 'desc=verify app name format'
remote: ++ local APP=test
remote: ++ [[ -z test ]]
remote: ++ [[ test =~ ^[a-z].* ]]
remote: ++ [[ ! test =~ [A-Z] ]]
remote: ++ [[ ! test =~ [:] ]]
remote: ++ return 0
remote: +++ plugn trigger deployed-app-repository test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local IMAGE_REMOTE_REPOSITORY=
remote: +++ plugn trigger deployed-app-image-tag test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local NEW_IMAGE_TAG=
remote: +++ plugn trigger deployed-app-image-repo test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local NEW_IMAGE_REPO=
remote: ++ [[ -n '' ]]
remote: ++ [[ -n '' ]]
remote: ++ [[ -z '' ]]
remote: +++ get_app_image_repo test
remote: +++ declare 'desc=central definition of image repo pattern'
remote: +++ local APP=test
remote: +++ local IMAGE_REPO=dokku/test
remote: +++ is_valid_app_name test
remote: +++ declare 'desc=verify app name format'
remote: +++ local APP=test
remote: +++ [[ -z test ]]
remote: +++ [[ test =~ ^[a-z].* ]]
remote: +++ [[ ! test =~ [A-Z] ]]
remote: +++ [[ ! test =~ [:] ]]
remote: +++ return 0
remote: +++ echo dokku/test
remote: ++ IMAGE_REPO=dokku/test
remote: ++ [[ -z '' ]]
remote: ++ IMAGE_TAG=latest
remote: ++ local IMAGE=dokku/test:latest
remote: ++ verify_image dokku/test:latest
remote: ++ declare 'desc=verify image existence'
remote: ++ local IMAGE=dokku/test:latest
remote: ++ docker inspect dokku/test:latest
remote: ++ return 0
remote: ++ echo dokku/test:latest
remote: + IMAGE=dokku/test:latest
remote: + [[ release == \r\e\l\e\a\s\e ]]
remote: ++ get_release_cmd test ''
remote: ++ remove_procfile test
remote: ++ declare 'desc=removes DOKKU_PROCFILE'
remote: ++ local APP=test
remote: ++ local DOKKU_PROCFILE=/home/dokku/test/DOKKU_PROCFILE
remote: ++ [[ -f /home/dokku/test/DOKKU_PROCFILE ]]
remote: + SCRIPT_CMD='pipenv run python manage.py migrate'
remote: + [[ -z pipenv run python manage.py migrate ]]
remote: + dokku_log_exclaim 'Release command declared: '\''pipenv run python manage.py migrate'\'''
remote: + declare 'desc=log exclaim formatter'
remote: + echo ' !     Release command declared: '\''pipenv run python manage.py migrate'\'''
remote: + local COMMAND
remote: + COMMAND='set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x ; '
remote: + COMMAND+=' if [[ -d '\''/app'\'' ]]; then '
remote: + COMMAND+='   export HOME=/app ; '
remote: + COMMAND+='   cd $HOME ; '
remote: + COMMAND+=' fi ; '
remote: + COMMAND+=' if [[ -d '\''/app/.profile.d'\'' ]]; then '
remote: + COMMAND+='   for file in /app/.profile.d/*; do source $file; done ; '
remote: + COMMAND+=' fi ; '
remote: + COMMAND+=' if [[ -d '\''/cache'\'' ]]; then '
remote: + COMMAND+='   rm -rf /tmp/cache ; '
remote: + COMMAND+='   ln -sf /cache /tmp/cache ; '
remote: + COMMAND+=' fi ; '
remote: + [[ pipenv run python manage.py migrate == /* ]]
remote: + COMMAND+=' pipenv run python manage.py migrate || exit 1;'
remote: + COMMAND+=' if [[ -d '\''/cache'\'' ]]; then '
remote: + COMMAND+='   rm -f /tmp/cache ; '
remote: + COMMAND+=' fi ; '
remote: + local CACHE_DIR=/home/dokku/test/cache
remote: + local CACHE_HOST_DIR=/home/dokku/test/cache
remote: + [[ -d /home/dokku/test/cache ]]
 !     Release command declared: 'pipenv run python manage.py migrate'
remote: ++ plugn trigger docker-args-deploy test ''
remote: ++ :
remote: + source /var/lib/dokku/plugins/available/config/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: + app_user_docker_args test ''
remote: + local APP=test
remote: + local STDIN
remote: + local DOKKU_APP_TYPE
remote: + local DOKKU_APP_USER
remote: ++ cat
remote: + STDIN=
remote: ++ config_get test DOKKU_APP_TYPE
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get test DOKKU_APP_TYPE
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_APP_TYPE
remote: + DOKKU_APP_TYPE=dockerfile
remote: ++ config_get test DOKKU_APP_USER
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get test DOKKU_APP_USER
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_APP_USER
remote: ++ true
remote: + DOKKU_APP_USER=
remote: + DOKKU_APP_USER=herokuishuser
remote: + [[ dockerfile == \h\e\r\o\k\u\i\s\h ]]
remote: + local docker_args=
remote: + echo -n ''
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + source /var/lib/dokku/plugins/available/config/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: ++ source /var/lib/dokku/core-plugins/available/common/functions
remote: +++ set -eo pipefail
remote: +++ [[ -n 1 ]]
remote: +++ set -x
remote: + config_docker_args test ''
remote: + declare 'desc=config docker-args plugin trigger'
remote: + declare APP=test IMAGE_TAG=
remote: + local ENV_ARGS IMAGE STDIN trigger
remote: ++ get_deploying_app_image_name test ''
remote: ++ declare 'desc=return deploying image identifier for a given app, tag tuple. validate if tag is presented'
remote: ++ local APP=test
remote: ++ local IMAGE_TAG=
remote: ++ IMAGE_REPO=
remote: ++ is_valid_app_name test
remote: ++ declare 'desc=verify app name format'
remote: ++ local APP=test
remote: ++ [[ -z test ]]
remote: ++ [[ test =~ ^[a-z].* ]]
remote: ++ [[ ! test =~ [A-Z] ]]
remote: ++ [[ ! test =~ [:] ]]
remote: ++ return 0
remote: +++ plugn trigger deployed-app-repository test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local IMAGE_REMOTE_REPOSITORY=
remote: +++ plugn trigger deployed-app-image-tag test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local NEW_IMAGE_TAG=
remote: +++ plugn trigger deployed-app-image-repo test
remote: + source /var/lib/dokku/core-plugins/available/common/functions
remote: ++ set -eo pipefail
remote: ++ [[ -n 1 ]]
remote: ++ set -x
remote: + [[ ! -n '' ]]
remote: ++ local NEW_IMAGE_REPO=
remote: ++ [[ -n '' ]]
remote: ++ [[ -n '' ]]
remote: ++ [[ -z '' ]]
remote: +++ get_app_image_repo test
remote: +++ declare 'desc=central definition of image repo pattern'
remote: +++ local APP=test
remote: +++ local IMAGE_REPO=dokku/test
remote: +++ is_valid_app_name test
remote: +++ declare 'desc=verify app name format'
remote: +++ local APP=test
remote: +++ [[ -z test ]]
remote: +++ [[ test =~ ^[a-z].* ]]
remote: +++ [[ ! test =~ [A-Z] ]]
remote: +++ [[ ! test =~ [:] ]]
remote: +++ return 0
remote: +++ echo dokku/test
remote: ++ IMAGE_REPO=dokku/test
remote: ++ [[ -z '' ]]
remote: ++ IMAGE_TAG=latest
remote: ++ local IMAGE=dokku/test:latest
remote: ++ verify_image dokku/test:latest
remote: ++ declare 'desc=verify image existence'
remote: ++ local IMAGE=dokku/test:latest
remote: ++ docker inspect dokku/test:latest
remote: ++ return 0
remote: ++ echo dokku/test:latest
remote: + IMAGE=dokku/test:latest
remote: ++ cat
remote: + STDIN=
remote: + trigger='/var/lib/dokku/plugins/enabled/config/docker-args-deploy config_docker_args'
remote: + verify_app_name test
remote: + declare 'desc=verify app name format and app existence'
remote: + local APP=test
remote: + is_valid_app_name test
remote: + declare 'desc=verify app name format'
remote: + local APP=test
remote: + [[ -z test ]]
remote: + [[ test =~ ^[a-z].* ]]
remote: + [[ ! test =~ [A-Z] ]]
remote: + [[ ! test =~ [:] ]]
remote: + return 0
remote: + [[ ! -d /home/dokku/test ]]
remote: + return 0
remote: + is_image_herokuish_based dokku/test:latest
remote: + declare 'desc=returns true if app image is based on herokuish'
remote: + declare IMAGE=dokku/test:latest
remote: + local USER_VALUE
remote: + [[ -z dokku/test:latest ]]
remote: ++ docker inspect -f '{{range .Config.Env}}{{if eq . "USER=herokuishuser" }}{{println .}}{{end}}{{end}}' dokku/test:latest
remote: + USER_VALUE=
remote: + [[ '' == '' ]]
remote: + return 1
remote: ++ config_export app test --format docker-args --merged
remote: ++ declare 'desc=returns export command for config variable of specified type (app/global)'
remote: ++ local CONFIG_TYPE=app
remote: ++ shift
remote: ++ local APP=test
remote: ++ [[ app == \g\l\o\b\a\l ]]
remote: ++ shift
remote: ++ config_sub export --format docker-args --merged test
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=export
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/export config:export --format docker-args --merged test
remote: ++ return 0
remote: + ENV_ARGS='--env=DATABASE_URL='\''postgres://postgres:2d8cde18518d15f84aa42dd1b19fae8a@dokku-postgres-test:5432/test'\'' --env=DOKKU_APP_RESTORE='\''1'\'' --env=DOKKU_APP_TYPE='\''dockerfile'\'' --env=DOKKU_DOCKERFILE_CMD='\''CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'\'' --env=DOKKU_PROXY_PORT='\''80'\'' --env=DOKKU_PROXY_PORT_MAP='\''http:80:5000  '\'' --env=ENVIRONMENT='\''dev'\'' --env=GIT_REV='\''7799216cb1b988ac657abcc3d7dbf92b098e00c3'\'' --env=SECRET_KEY='\''fjdklsfjeif9wjei9rjewe9wjv'\'''
remote: + echo -n ' --env=DATABASE_URL='\''postgres://postgres:2d8cde18518d15f84aa42dd1b19fae8a@dokku-postgres-test:5432/test'\'' --env=DOKKU_APP_RESTORE='\''1'\'' --env=DOKKU_APP_TYPE='\''dockerfile'\'' --env=DOKKU_DOCKERFILE_CMD='\''CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'\'' --env=DOKKU_PROXY_PORT='\''80'\'' --env=DOKKU_PROXY_PORT_MAP='\''http:80:5000  '\'' --env=ENVIRONMENT='\''dev'\'' --env=GIT_REV='\''7799216cb1b988ac657abcc3d7dbf92b098e00c3'\'' --env=SECRET_KEY='\''fjdklsfjeif9wjei9rjewe9wjv'\'''
remote: + docker_args test ''
remote: + declare 'desc=docker args plugin trigger'
remote: + local trigger=/var/lib/dokku/plugins/enabled/docker-options/docker-args-deploy
remote: ++ cat
remote: + local STDIN=
remote: + local APP=test
remote: + local IMAGE_SOURCE_TYPE=
remote: + case "$0" in
remote: + local PHASE=DEPLOY
remote: + local FILE_PREFIX=DOCKER_OPTIONS_
remote: + local PHASE_FILE_PATH=/home/dokku/test/DOCKER_OPTIONS_DEPLOY
remote: + local output=
remote: + [[ -f /home/dokku/test/DOCKER_OPTIONS_DEPLOY ]]
remote: + local DONE=false
remote: + false
remote: + local line
remote: + read -r line
remote: + [[ -z --link dokku.postgres.test:dokku-postgres-test ]]
remote: + case "$line" in
remote: + case "$IMAGE_SOURCE_TYPE" in
remote: + local 'output= --link dokku.postgres.test:dokku-postgres-test'
remote: + false
remote: + local line
remote: + read -r line
remote: + [[ -z --restart=on-failure:10 ]]
remote: + case "$line" in
remote: + case "$IMAGE_SOURCE_TYPE" in
remote: + local 'output= --link dokku.postgres.test:dokku-postgres-test --restart=on-failure:10'
remote: + false
remote: + local line
remote: + read -r line
remote: + local DONE=true
remote: + [[ -z '' ]]
remote: + continue
remote: + true
remote: + echo -n ' --link dokku.postgres.test:dokku-postgres-test --restart=on-failure:10'
remote: + local 'DOCKER_ARGS= --env=DATABASE_URL='\''postgres://postgres:2d8cde18518d15f84aa42dd1b19fae8a@dokku-postgres-test:5432/test'\'' --env=DOKKU_APP_RESTORE='\''1'\'' --env=DOKKU_APP_TYPE='\''dockerfile'\'' --env=DOKKU_DOCKERFILE_CMD='\''CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'\'' --env=DOKKU_PROXY_PORT='\''80'\'' --env=DOKKU_PROXY_PORT_MAP='\''http:80:5000  '\'' --env=ENVIRONMENT='\''dev'\'' --env=GIT_REV='\''7799216cb1b988ac657abcc3d7dbf92b098e00c3'\'' --env=SECRET_KEY='\''fjdklsfjeif9wjei9rjewe9wjv'\'' --link dokku.postgres.test:dokku-postgres-test --restart=on-failure:10'
remote: ++ sed -e 's/--restart=[[:graph:]]\+[[:blank:]]\?//g'
remote: + local 'DOCKER_ARGS= --env=DATABASE_URL='\''postgres://postgres:2d8cde18518d15f84aa42dd1b19fae8a@dokku-postgres-test:5432/test'\'' --env=DOKKU_APP_RESTORE='\''1'\'' --env=DOKKU_APP_TYPE='\''dockerfile'\'' --env=DOKKU_DOCKERFILE_CMD='\''CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'\'' --env=DOKKU_PROXY_PORT='\''80'\'' --env=DOKKU_PROXY_PORT_MAP='\''http:80:5000  '\'' --env=ENVIRONMENT='\''dev'\'' --env=GIT_REV='\''7799216cb1b988ac657abcc3d7dbf92b098e00c3'\'' --env=SECRET_KEY='\''fjdklsfjeif9wjei9rjewe9wjv'\'' --link dokku.postgres.test:dokku-postgres-test '
remote: + local IMAGE_SOURCE_TYPE=dockerfile
remote: + is_image_herokuish_based dokku/test:latest
remote: + declare 'desc=returns true if app image is based on herokuish'
remote: + declare IMAGE=dokku/test:latest
remote: + local USER_VALUE
remote: + [[ -z dokku/test:latest ]]
remote: ++ docker inspect -f '{{range .Config.Env}}{{if eq . "USER=herokuishuser" }}{{println .}}{{end}}{{end}}' dokku/test:latest
remote: + USER_VALUE=
remote: + [[ '' == '' ]]
remote: + return 1
remote: ++ plugn trigger docker-args-process-deploy test '' dockerfile
remote: ++ :
remote: + DOCKER_ARGS+=
remote: + declare -a ARG_ARRAY
remote: + eval 'ARG_ARRAY=( --env=DATABASE_URL='\''postgres://postgres:2d8cde18518d15f84aa42dd1b19fae8a@dokku-postgres-test:5432/test'\'' --env=DOKKU_APP_RESTORE='\''1'\'' --env=DOKKU_APP_TYPE='\''dockerfile'\'' --env=DOKKU_DOCKERFILE_CMD='\''CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application'\'' --env=DOKKU_PROXY_PORT='\''80'\'' --env=DOKKU_PROXY_PORT_MAP='\''http:80:5000  '\'' --env=ENVIRONMENT='\''dev'\'' --env=GIT_REV='\''7799216cb1b988ac657abcc3d7dbf92b098e00c3'\'' --env=SECRET_KEY='\''fjdklsfjeif9wjei9rjewe9wjv'\'' --link dokku.postgres.test:dokku-postgres-test )'
remote: ++ ARG_ARRAY=(--env=DATABASE_URL='postgres://postgres:2d8cde18518d15f84aa42dd1b19fae8a@dokku-postgres-test:5432/test' --env=DOKKU_APP_RESTORE='1' --env=DOKKU_APP_TYPE='dockerfile' --env=DOKKU_DOCKERFILE_CMD='CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application' --env=DOKKU_PROXY_PORT='80' --env=DOKKU_PROXY_PORT_MAP='http:80:5000  ' --env=ENVIRONMENT='dev' --env=GIT_REV='7799216cb1b988ac657abcc3d7dbf92b098e00c3' --env=SECRET_KEY='fjdklsfjeif9wjei9rjewe9wjv' --link dokku.postgres.test:dokku-postgres-test)
remote: + local DOKKU_APP_SHELL=/bin/bash
remote: ++ config_get --global DOKKU_APP_SHELL
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get --global DOKKU_APP_SHELL
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get --global DOKKU_APP_SHELL
remote: ++ echo /bin/bash
remote: + DOKKU_APP_SHELL=/bin/bash
remote: ++ config_get test DOKKU_APP_SHELL
remote: ++ declare 'desc=get value of given config var'
remote: ++ config_sub get test DOKKU_APP_SHELL
remote: ++ declare 'desc=executes a config subcommand'
remote: ++ local name=get
remote: ++ shift
remote: ++ /var/lib/dokku/plugins/available/config/subcommands/get config:get test DOKKU_APP_SHELL
remote: ++ echo /bin/bash
remote: + DOKKU_APP_SHELL=/bin/bash
remote: + [[ -z /bin/bash ]]
remote: ++ docker run --label=dokku -e DOKKU_TRACE=1 --label=dokku_phase_script=release -d -v /home/dokku/test/cache:/cache --env=DATABASE_URL=postgres://postgres:2d8cde18518d15f84aa42dd1b19fae8a@dokku-postgres-test:5432/test --env=DOKKU_APP_RESTORE=1 --env=DOKKU_APP_TYPE=dockerfile '--env=DOKKU_DOCKERFILE_CMD=CMD pipenv run gunicorn -b 0.0.0.0:8000 --workers=3 --threads=5 project.wsgi:application' --env=DOKKU_PROXY_PORT=80 '--env=DOKKU_PROXY_PORT_MAP=http:80:5000  ' --env=ENVIRONMENT=dev --env=GIT_REV=7799216cb1b988ac657abcc3d7dbf92b098e00c3 --env=SECRET_KEY=fjdklsfjeif9wjei9rjewe9wjv --link dokku.postgres.test:dokku-postgres-test dokku/test:latest /bin/bash -c 'set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x ;  if [[ -d '\''/app'\'' ]]; then    export HOME=/app ;    cd $HOME ;  fi ;  if [[ -d '\''/app/.profile.d'\'' ]]; then    for file in /app/.profile.d/*; do source $file; done ;  fi ;  if [[ -d '\''/cache'\'' ]]; then    rm -rf /tmp/cache ;    ln -sf /cache /tmp/cache ;  fi ;  pipenv run python manage.py migrate || exit 1; if [[ -d '\''/cache'\'' ]]; then    rm -f /tmp/cache ;  fi ; '
remote: + id=9015f50793b68ad843fdba0be0d7b4919ace67cec106642772a8e03b10e5729a
remote: ++ docker wait 9015f50793b68ad843fdba0be0d7b4919ace67cec106642772a8e03b10e5729a
remote: + test 1 -ne 0
remote: + dokku_container_log_verbose_quiet 9015f50793b68ad843fdba0be0d7b4919ace67cec106642772a8e03b10e5729a
remote: + declare 'desc=log verbose container output (with quiet option)'
remote: + local CID=9015f50793b68ad843fdba0be0d7b4919ace67cec106642772a8e03b10e5729a
remote: + shift
remote: + OIFS='
remote: '
remote: + IFS='
remote: '
remote: + local line
remote: ++ docker logs 9015f50793b68ad843fdba0be0d7b4919ace67cec106642772a8e03b10e5729a
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '+ [[ -d /app ]]'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       + [[ -d /app ]]'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '+ export HOME=/app'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       + export HOME=/app'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '+ HOME=/app'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       + HOME=/app'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '+ cd /app'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       + cd /app'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '+ [[ -d /app/.profile.d ]]'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       + [[ -d /app/.profile.d ]]'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '+ [[ -d /cache ]]'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       + [[ -d /cache ]]'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '+ rm -rf /tmp/cache'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       + rm -rf /tmp/cache'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '+ ln -sf /cache /tmp/cache'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       + ln -sf /cache /tmp/cache'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '+ pipenv run python manage.py migrate'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       + pipenv run python manage.py migrate'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet 'Traceback (most recent call last):'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       Traceback (most recent call last):'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '  File "/root/.local/bin/pipenv", line 5, in <module>'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '         File "/root/.local/bin/pipenv", line 5, in <module>'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '    from pipenv import cli'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '           from pipenv import cli'
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet 'ModuleNotFoundError: No module named '\''pipenv'\'''
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       ModuleNotFoundError: No module named '\''pipenv'\'''
remote: + for line in $("$DOCKER_BIN" logs "$CID" 2>&1)
remote: + dokku_log_verbose_quiet '+ exit 1'
remote: + declare 'desc=log verbose formatter (with quiet option)'
remote: + [[ -z '' ]]
remote: + echo '       + exit 1'
remote: + IFS='
remote: '
remote: + dokku_log_fail 'execution of '\''pipenv run python manage.py migrate'\'' failed!'
remote: + declare 'desc=log fail formatter'
remote: + echo 'execution of '\''pipenv run python manage.py migrate'\'' failed!'
       + [[ -d /app ]]
       + export HOME=/app
       + HOME=/app
       + cd /app
       + [[ -d /app/.profile.d ]]
       + [[ -d /cache ]]
       + rm -rf /tmp/cache
       + ln -sf /cache /tmp/cache
       + pipenv run python manage.py migrate
       Traceback (most recent call last):
         File "/root/.local/bin/pipenv", line 5, in <module>
           from pipenv import cli
       ModuleNotFoundError: No module named 'pipenv'
       + exit 1
remote: execution of 'pipenv run python manage.py migrate' failed!
remote: + exit 1
remote: + rm -rf /tmp/dokku-git_build_app_repo.uPme
remote: + exit_code=1
remote: + set -e
remote: + [[ 1 -eq 10 ]]
remote: + implemented=1
remote: + [[ 1 -ne 0 ]]
remote: + exit 1
+ exit_code=0
+ set -e
+ [[ 0 -eq 10 ]]
+ implemented=1
+ [[ 0 -ne 0 ]]
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/logs/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/network/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/nginx-vhosts/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/plugin/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/postgres/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/proxy/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/ps/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/repo/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/resource/commands git-receive-pack ''\''test'\'''
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
+ for script in $PLUGIN_ENABLED_PATH/*/commands
+ set +e
+ /var/lib/dokku/plugins/enabled/scheduler-docker-local/commands git-receive-pack ''\''test'\'''
+ source /var/lib/dokku/plugins/available/scheduler-docker-local/internal-functions
++ source /var/lib/dokku/core-plugins/available/common/functions
+++ set -eo pipefail
+++ [[ -n 1 ]]
+++ set -x
++ source /var/lib/dokku/core-plugins/available/common/property-functions
+++ set -eo pipefail
+++ [[ -n 1 ]]
+++ set -x
++ source /var/lib/dokku/plugins/available/config/functions
+++ set -eo pipefail
+++ [[ -n 1 ]]
+++ set -x
+++ source /var/lib/dokku/core-plugins/available/common/functions
++++ set -eo pipefail
++++ [[ -n 1 ]]
++++ set -x
++ set -eo pipefail
++ [[ -n 1 ]]
++ set -x
+ case "$1" in
+ exit 10
+ exit_code=10
+ set -e
+ [[ 10 -eq 10 ]]
+ continue
```
This will make the CoC apply to every project, not just the main project :)
## Description of problem

After changing scale of `worker` process, from Procfile from 40 to 30, for example, instances 31-40 stay running and are left dangling, not being updated even after redeploy. 

### How reproducible

### Steps to Reproduce

1. Deploy application with worker
2. Scale worker to 40
3. Scale worker to 30

#### Actual Results

All 40 containers stay running and on next push only first 30 are updated and other 10 stay the same. 

#### Expected Results

Only new 30 workers remain running

## Environment Information

### `dokku report APP_NAME` output

I can not publish all of the information, but, I will update if required... 

```
-----> uname: Linux dokku 4.15.0-72-generic #81-Ubuntu SMP Tue Nov 26 12:20:02 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
-----> memory: 
                     total        used        free      shared  buff/cache   available
       Mem:          86596       57903        7540        2277       21152       25939
       Swap:          8191          62        8129
-----> docker version: 
       Client: Docker Engine - Community
        Version:           19.03.5
        API version:       1.40
        Go version:        go1.12.12
        Git commit:        633a0ea838
        Built:             Wed Nov 13 07:29:52 2019
        OS/Arch:           linux/amd64
        Experimental:      false
       
       Server: Docker Engine - Community
        Engine:
         Version:          19.03.5
         API version:      1.40 (minimum version 1.12)
         Go version:       go1.12.12
         Git commit:       633a0ea838
         Built:            Wed Nov 13 07:28:22 2019
         OS/Arch:          linux/amd64
         Experimental:     false
        containerd:
         Version:          1.2.10
         GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
        runc:
         Version:          1.0.0-rc8+dev
         GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
        docker-init:
         Version:          0.18.0
         GitCommit:        fec3683
-----> docker daemon info: 
       Client:
        Debug Mode: true
       
       Server:
        Containers: 369
         Running: 202
         Paused: 0
         Stopped: 167
        Images: 272
        Server Version: 19.03.5
        Storage Driver: overlay2
         Backing Filesystem: extfs
         Supports d_type: true
         Native Overlay Diff: true
        Logging Driver: json-file
        Cgroup Driver: cgroupfs
        Plugins:
         Volume: local
         Network: bridge host ipvlan macvlan null overlay
         Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
        Swarm: inactive
        Runtimes: runc
        Default Runtime: runc
        Init Binary: docker-init
        containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339
        runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657
        init version: fec3683
        Security Options:
         apparmor
         seccomp
          Profile: default
        Kernel Version: 4.15.0-72-generic
        Operating System: Ubuntu 18.04.3 LTS
        OSType: linux
        Architecture: x86_64
        CPUs: 24
        Total Memory: 84.57GiB
        Name: dokku
        ID: 7T4H:KJFD:JLSF:PVV4:AN6Y:HXWE:2HSP:FOBJ:25HN:DWR3:27SA:O36O
        Docker Root Dir: /var/lib/docker
        Debug Mode: false
WARNING: No swap limit support
        Registry: https://index.docker.io/v1/
        Labels:
        Experimental: false
        Insecure Registries:
         127.0.0.0/8
        Live Restore Enabled: false
       
-----> sigil version: 0.4.0
-----> herokuish version: 
       herokuish: 0.5.4
       buildpacks:
         heroku-buildpack-multi     v1.0.0
         heroku-buildpack-ruby      v206
         heroku-buildpack-nodejs    v165
         heroku-buildpack-clojure   v84
         heroku-buildpack-python    v161
         heroku-buildpack-java      v65
         heroku-buildpack-gradle    v31
         heroku-buildpack-scala     v86
         heroku-buildpack-play      v26
         heroku-buildpack-php       v164
         heroku-buildpack-go        v135
         buildpack-nginx            v12
-----> dokku version: dokku version 0.19.10
-----> dokku plugins: 
       plugn: 0.3.2
         00_dokku-standard    0.19.10 enabled    dokku core standard plugin
         20_events            0.19.10 enabled    dokku core events logging plugin
         app-json             0.19.10 enabled    dokku core app-json plugin
         apps                 0.19.10 enabled    dokku core apps plugin
         builder-dockerfile   0.19.10 enabled    dokku core builder-dockerfile plugin
         builder-herokuish    0.19.10 enabled    dokku core builder-herokuish plugin
         buildpacks           0.19.10 enabled    dokku core buildpacks plugin
         certs                0.19.10 enabled    dokku core certificate management plugin
         checks               0.19.10 enabled    dokku core checks plugin
         common               0.19.10 enabled    dokku core common plugin
         config               0.19.10 enabled    dokku core config plugin
         docker-options       0.19.10 enabled    dokku core docker-options plugin
         domains              0.19.10 enabled    dokku core domains plugin
         enter                0.19.10 enabled    dokku core enter plugin
         git                  0.19.10 enabled    dokku core git plugin
         graphite-grafana     1.10.0 enabled    dokku statsd & graphite service plugin with grafana dashboard
         letsencrypt          0.9.1 enabled    Automated installation of let's encrypt TLS certificates
         logs                 0.19.10 enabled    dokku core logs plugin
         mongo                1.9.2 enabled    dokku mongo service plugin
         network              0.19.10 enabled    dokku core network plugin
         nginx-vhosts         0.19.10 enabled    dokku core nginx-vhosts plugin
         plugin               0.19.10 enabled    dokku core plugin plugin
         postgres             1.9.2 enabled    dokku postgres service plugin
         proxy                0.19.10 enabled    dokku core proxy plugin
         ps                   0.19.10 enabled    dokku core ps plugin
         redis                1.10.1 enabled    dokku redis service plugin
         repo                 0.19.10 enabled    dokku core repo plugin
         resource             0.19.10 enabled    dokku core resource plugin
         scheduler-docker-local 0.19.10 enabled    dokku core scheduler-docker-local plugin
         shell                0.19.10 enabled    dokku core shell plugin
         ssh-keys             0.19.10 enabled    dokku core ssh-keys plugin
         storage              0.19.10 enabled    dokku core storage plugin
         tags                 0.19.10 enabled    dokku core tags plugin
         tar                  0.19.10 enabled    dokku core tar plugin
         trace                0.19.10 enabled    dokku core trace plugin
```

### How (deb/make/rpm) and where (AWS, VirtualBox, physical, etc.) was Dokku installed?:

I used original script, on Ubuntu, so, I guess deb... 

It is installed on KVM. 

I just had a container not get cleaned up. I had previously cleaned up a bunch of containers with non-dokku names (they had Docker's random_words names), but this container was properly named "myapp-web-1.984197294" and had been around for a month.

I have PMed you the `docker inspect` output.
if dokku is installed on a host where port 80 is already used by some other service,
you have to set `DOKKU_PROXY_PORT` for each app separately.

This change would check the global config `DOKKU_PROXY_PORT` in case its not set, for the app.

If its not set in global scope, than the original default 80 is used.
> From https://github.com/dokku-community/dokku-apt/pull/38

It appears that we call `docker-args-process-build` with an unspecified `IMAGE_TAG` argument. This is not available, and is passed as an empty string.

We should investigate if it was ever available, and likely fix the hook call. I think this will necessitate a minor release due to the breaking api.
Hi

The current cli allows setting docker-options for the build, deploy and run phase.
I use the command to set the env var for a Dockerfile.

```console
$ dokku docker-options:add nodejs-app build "--build-arg NODE_ENV=prod";
```
I don't do that by hand. I have a deployment script that looks more like that.
```console
$ dokku docker-options:add "$DEPLOYMENT_NAME" build "--build-arg NODE_ENV=$INPUT_NODE_ENV";
```

You can see that the `$INPUT_NODE_ENV` is more dynamic. That makes it difficult to change or remove the variable for the next deployment, because I don't know the value from the last deployment.

Something like this would be awesome:
```console
$ dokku docker-options:clear node-js build
```
We should always fail the nginx config build if the network config isn't available, as that means we may potentially be passing incorrect/missing ip and port information to the nginx plugin.
Add provision line to Windows Vagrant box definition so dokku-installer service is running/available by default in dokku-windows box

This is to fix issue #3598
