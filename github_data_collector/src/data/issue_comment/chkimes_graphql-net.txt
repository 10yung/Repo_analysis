Hey,
I'm trying to run GraphQL on .net framework 4.6.1
All examples are with dependency injection in .net core.
I couldn't understand how to inject types, query and schema in .net framework.
I tried to do some things:
Container.RegisterType<IDocumentExecuter, DocumentExecuter>("DocumentExecuter");
Container.RegisterType<ISchema, StoreSchema>(new ContainerControlledLifetimeManager());
Container.RegisterType<ISchema, EasyStoreSchema>(new ContainerControlledLifetimeManager());
Container.RegisterType<StoreQuery>();

But nothing worked.

Do you have any suggestions\ examples how to use graphql in .net framework?
tnx.
I am trying to decided which Graphql library to use to build a graphql api, Can you please confirm if this library / repo is being actively worked on / maintained?
if I have a class such as
```
public class Account {
 public int SYSID {
  get;
  set;
 }
 public int AccountTypeSYSID {
  get;
  set;
 }
 public int ProfileSYSID {
  get;
  set;
 }
 public string AccountName {
  get;
  set;
 }
 public double StartingBalance {
  get;
  set;
 }
 public double CurrentBalance {
  get;
  set;
 }
 public Profile Profile() {
  using(var ops = new ProfileDbOps(DbConnection, true)) {
   returnops.GetBySYSID(ProfileSYSID);
  }
 }
}
```
and try to run the query 
```
{
  account(sysid:12){
    accountTypeSYSID
    accountName
    startingBalance
    currentBalance
    dateCreated
    lastUpdate
    Profile{
      SYSID
      firstName
      middleName
      lastNames
    }
  }
}
```
you get the exception **profile is not a field of type Account** but profile is a field on account?!
I have been using GraphQL.Net and think it's great but have run into a problem I was hoping you could help me with please?

In my GraphQL schema, if I configure field with an argument of type System.Double defined by the following "arguments" class:-

**public class TestArgs
{
        public double Score { get; set; }
}**

and then execute a GraphQL query on the "Tests" list field to get all instances with the matching Score 1.23:-

**{
      Tests(Score: 1.23)
       {
             Id
             Score
       }
}**

I am getting some weird and wonderful floating point conversions when TestArgs is instantiated. The Score property ends up with a value something like 1.28547713E-32

Do you have any advice about this please? What am I missing? 



It does not support .Net Core
Hello,

I stuck with shema setting like this

`var per = schema.AddType<personal>();  //EFDbContext.personals`
`per.AddListField("departments", EFDbContext.departments.Select(o => new { my_custom = o.xxx }));`

when I use postman to call these graphql
I get an error

`Argument types do not match`

I know that when use GraphQLTypeBuilder to add field must be the same type
But if I want this, How I do ?

Thank you
Is there a way to use DateTime as an argument to a query? (For instance in adding a query for things in a given date range.)

It looks like GraphQL itself doesn't even have a built-in Date scalar type, so I don't even know if there is good client support.
Doesn't look like there's support for variables, unless I'm missing someting. Couldn't find any unit tests that use them at least and it fails when I try doing them myself.
In the EF examples (in `EntityFrameworkExecutionTests` for instance), you're using `context.SaveChanges()` inside your `"addMutate"` mutation meaning your mutation parameter in the `schema.AddMutation(...)` signature can just be synchronous. What if you want to use `context.SaveChangesAsync()` though? Or, in my situation with CosmosDB, what if your underlying data storage API only has async methods?

Seems like I can add `async` to the mutation and await the CosmosDB call, but then I have to force blocking for `.Result`.
![image](https://user-images.githubusercontent.com/157336/37161809-f7f5e6c6-22f3-11e8-92f3-d16a287a5e62.png)

The queryableGetter can't be marked as async as `Async lambda expressions cannot be converted into expression trees`.
![image](https://user-images.githubusercontent.com/157336/37161710-b9521bf6-22f3-11e8-9ec9-0df95398d7fd.png)
(Worth noting that using a method body won't fit anyway as it also can't be converted to an expression tree).

I get that the mutation has to happen and be waited on before the retrieval query can fire after, but I'm just wondering whether you can have overloads for `AddMutation` that support async? 
I need an api key for authentication, i can't seem to find the webclient where i can add the headers.

Any thoughts to put me on the right path?