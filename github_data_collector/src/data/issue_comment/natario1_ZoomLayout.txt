Hi,

Currently I'm using the ZoomImageView to crop images. (I add a grid view on top, then when I'm ready to finalize the crop, I'll use `zoomImageView.draw(canvas)` )

My ZoomImageView has a 1 to 1 ratio in terms of width and height and is contained within a ConstraintLayout as so:

`<com.otaliastudios.zoom.ZoomImageView
            android:id="@+id/zoom_image_view"
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:visibility="invisible"
            app:layout_constraintDimensionRatio="1:1"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:transformation="centerCrop"
            app:transformationGravity="auto"
            app:alignment="center"
            app:overScrollHorizontal="true"
            app:overScrollVertical="true"
            app:overPinchable="true"
            app:horizontalPanEnabled="true"
            app:verticalPanEnabled="true"
            app:zoomEnabled="true"
            app:flingEnabled="true"
            app:scrollEnabled="true"
            app:oneFingerScrollEnabled="true"
            app:twoFingersScrollEnabled="true"
            app:threeFingersScrollEnabled="true"
            app:minZoom="1"
            app:minZoomType="zoom"
            app:maxZoom="5"
            app:maxZoomType="zoom"
            app:animationDuration="280"/>`

My flow I currently have is:

1. User takes photo with the camera that is the sensor resolution. (Let's say for example 3036x4048)
2. We put that picture into an ImageView with a scaleType of center crop
3. User goes into crop mode, where we hide the original ImageView and set the image bitmap on the ZoomImageView

For some reason when setting the image on the ZoomImageView, it doesn't pan to the center. It'll pan to the top, or bottom, but never the center regardless of what gravity or alignment I set.

Currently the only way I can get it to center when initially setting the bitmap is to first call `zoomImageView.setImageBitmap(bitmap)` then set the pan to `zoomImageView.panX / 2` and `zoomImageView.panY / 2`.  This seems to work when the width and height of the content are bigger than the container(zoomImageView), however when either the width or height of the content is smaller than the container, the panx and pany both end up being 0, so this solution doesn't work.

Am I doing something wrong here? Any help would be greatly appreciated.

Hello, i want to use ZoomLayout with two [PDFView](https://github.com/barteksc/AndroidPdfViewer)s inside it, to be able to zoom the two PDFs together.

After loading the two PDFs programmatically, they does not even appear in the screen. Zooming at this point isn't working at all. How can i force the zoomview (after loading PDFs) to redraw itself? (I tried invalidate() and invalidate() with a couple of seconds after PDF loadings.)

Here is the code:

    <com.otaliastudios.zoom.ZoomLayout
        android:id="@+id/zoom_layout"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="horizontal">

            <com.github.barteksc.pdfviewer.PDFView
                android:id="@+id/pdf_view_1"
                android:layout_width="match_parent"
                android:layout_height="match_parent" />

            <com.github.barteksc.pdfviewer.PDFView
                android:id="@+id/pdf_view_2"
                android:layout_width="match_parent"
                android:layout_height="match_parent" />
        </LinearLayout>
    </com.otaliastudios.zoom.ZoomLayout>

lib v: 1.7.0
PDF lib v: 2.8.2
Hello,

First thank you for your amazing work.

I'm facing with an issue where apparently the max zoom is less than minimum :

`
Fatal Exception: java.lang.IllegalArgumentException: Cannot coerce value to an empty range: maximum 1.235147 is less than minimum 1.3270956.
    at kotlin.ranges.RangesKt___RangesKt.coerceIn(_Ranges.kt:1052)
    at com.otaliastudios.zoom.internal.movement.ZoomManager.checkBounds$zoomlayout_release(ZoomManager.kt:121)
    at com.otaliastudios.zoom.internal.matrix.MatrixController.applyUpdate$zoomlayout_release(MatrixController.kt:263)
    at com.otaliastudios.zoom.internal.matrix.MatrixController.applyUpdate$zoomlayout_release(MatrixController.kt:238)
    at com.otaliastudios.zoom.ZoomEngine$Callbacks.onMatrixSizeChanged(ZoomEngine.kt:106)
    at com.otaliastudios.zoom.internal.matrix.MatrixController.onSizeChanged(MatrixController.kt:206)
    at com.otaliastudios.zoom.internal.matrix.MatrixController.setContainerSize$zoomlayout_release(MatrixController.kt:188)
    at com.otaliastudios.zoom.ZoomEngine.setContainerSize(ZoomEngine.kt:568)
    at com.otaliastudios.zoom.ZoomImageView.onSizeChanged(ZoomImageView.kt:111)
    at android.view.View.sizeChange(View.java:21007)
    at android.view.View.setFrame(View.java:20968)
    at android.widget.ImageView.setFrame(ImageView.java:1209)
    at android.view.View.layout(View.java:20828)
    at android.widget.FrameLayout.layoutChildren(FrameLayout.java:323)
    at android.widget.FrameLayout.onLayout(FrameLayout.java:261)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at androidx.constraintlayout.widget.ConstraintLayout.onLayout(ConstraintLayout.java:1654)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at android.widget.LinearLayout.setChildFrame(LinearLayout.java:1812)
    at android.widget.LinearLayout.layoutVertical(LinearLayout.java:1656)
    at android.widget.LinearLayout.onLayout(LinearLayout.java:1565)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at android.widget.FrameLayout.layoutChildren(FrameLayout.java:323)
    at android.widget.FrameLayout.onLayout(FrameLayout.java:261)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at android.widget.FrameLayout.layoutChildren(FrameLayout.java:323)
    at android.widget.FrameLayout.onLayout(FrameLayout.java:261)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at androidx.constraintlayout.widget.ConstraintLayout.onLayout(ConstraintLayout.java:1654)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at androidx.coordinatorlayout.widget.CoordinatorLayout.layoutChild(CoordinatorLayout.java:1213)
    at androidx.coordinatorlayout.widget.CoordinatorLayout.onLayoutChild(CoordinatorLayout.java:899)
    at androidx.coordinatorlayout.widget.CoordinatorLayout.onLayout(CoordinatorLayout.java:919)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at android.widget.FrameLayout.layoutChildren(FrameLayout.java:323)
    at android.widget.FrameLayout.onLayout(FrameLayout.java:261)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at android.widget.LinearLayout.setChildFrame(LinearLayout.java:1812)
    at android.widget.LinearLayout.layoutVertical(LinearLayout.java:1656)
    at android.widget.LinearLayout.onLayout(LinearLayout.java:1565)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at android.widget.FrameLayout.layoutChildren(FrameLayout.java:323)
    at android.widget.FrameLayout.onLayout(FrameLayout.java:261)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at android.widget.LinearLayout.setChildFrame(LinearLayout.java:1812)
    at android.widget.LinearLayout.layoutVertical(LinearLayout.java:1656)
    at android.widget.LinearLayout.onLayout(LinearLayout.java:1565)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at android.widget.FrameLayout.layoutChildren(FrameLayout.java:323)
    at android.widget.FrameLayout.onLayout(FrameLayout.java:261)
    at com.android.internal.policy.DecorView.onLayout(DecorView.java:754)
    at android.view.View.layout(View.java:20831)
    at android.view.ViewGroup.layout(ViewGroup.java:6203)
    at android.view.ViewRootImpl.performLayout(ViewRootImpl.java:2991)
    at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:2504)
    at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1635)
    at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:7795)
    at android.view.Choreographer$CallbackRecord.run(Choreographer.java:1172)
    at android.view.Choreographer.doCallbacks(Choreographer.java:984)
    at android.view.Choreographer.doFrame(Choreographer.java:809)
    at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:1158)
    at android.os.Handler.handleCallback(Handler.java:873)
    at android.os.Handler.dispatchMessage(Handler.java:99)
    at android.os.Looper.loop(Looper.java:193)
    at android.app.ActivityThread.main(ActivityThread.java:6863)
    at java.lang.reflect.Method.invoke(Method.java)
    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:537)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)
`

This issue doesn't appear frequently and I don't know why.

Thank you again for your work, and your support,
Have a great day !
    
I'm using the following code to determine the screen position of a ZoomLayout children :
```
Rect viewRect = new Rect();

if (OriginatingView.GetGlobalVisibleRect(viewRect))
{
    var location = new int[2];

    OriginatingView.GetLocationOnScreen(location);
    viewRect.OffsetTo(location[0], location[1]);
                        
    _originatingViewRect = viewRect;
}
```

However `GetGlobalVisibleRect` doesn't return the right screen coordinates if children are not marked as clickable.

P.S. `GetLocationOnScreen` is necessary for when the ZoomLayout is nested within a `DialogFragment` as `GetGlobalVisibleRect` returns the coordinates within the dialog which is not always full screen.
Hi! 👋

I am Mattia, the main developer and maintainer here, and I have enabled the GitHub Sponsor button on this repository which will let you support the library development by sponsoring my open source work through GitHub itself.

In the last years, I have spent countless unpaid hours on this and other projects, designing and developing tools that solve real problems, for everyone to use. I am very happy to know that companies of all sizes benefit from my work everyday.

GitHub is now offering you the opportunity to thank back with a sponsorship. For individuals, it could be a small amount. For companies that are powered by my tools, it could be a fairly small percentage of their revenue. In any case, your support will be greatly appreciated (and for bigger amounts, you get things like private support hours, or something else if you prefer).

https://github.com/sponsors/natario1

I will experiment leaving this as a pinned issue - for a while at least - since it's where people are most likely to see it. Sorry if this bothers you, and thank you all for your help.
I have a zoomlayout in a fragment and everything works fine on a regular device but on tablet the layout is slightly bigger than it should the zoom value is 1.0561 not 1 when i call zoomto on buttonpress it goes to the correct amount but i cant seem to do this as the screen is loading so it always starts out zoomed in slightly.
Using `ZoomLayout` within a [CoordinatorLayout](https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout) (e.g. a disappearing toolbar) gives very strange results: incorrect height, the coordinator doesn't get scroll events passed, somehow the touch events are off by a multitude of dp's.
I am trying to get the x and y points to add a button at those points. 

((event.rawX - scaledPanX) * (1/realZoom)).toInt() 
((event.rawY - scaledPanY) * (1/realZoom)).toInt() 

Is what i am doing to get the coordinates when zoomed in but the x value seems to off. Everytime the button is added slighltly to the right of where I press. The y coordiante is fine. Is this the correct way to get these values
Hey everyone,

first of all.. Thank you for this great API.
But i'm struggling with the layouts by using them in a nested way.
Is there an easy way to solve that problem?

I'm currently using the ZoomLayout within a SwipeRefreshLayout and can't scroll-up within the ZoomLayout without triggering the refresh method..