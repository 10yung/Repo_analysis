That's the first something with README that reads Much Ado, and nothing specific. Needs rewriing.

`ENOTEMPTY, directory not empty` occasionally on some windows machines when removing a directory on `build.clean`.   

Hi,

I'm trying to use a requirejs config (speciically the paths option). I've followed the [guide](http://urequire.org/mappings) and added a _requirejs.config.json_ file at the root of my bundle, however, the built code does not seem to be using the config.

My project structure looks like this:
scripts
--nested
----path
------wibble.js
--main.js
--require.js
--requirejs.config.json

my **urequire config** looks like:

``` javascript
'use strict';
var config = {
    bundle: {
        path: './scripts',
        name: 'urequire testing'
    },
    build: {
        dstPath: './scripts/build',
        template: 'AMD',
        verbose: true,
        debugLevel: 30,
        globalWindow: true
    }
};
module.exports = config;
```

my **main.js** looks like:

``` javascript
require(['wibble'], function (){});
```

my **requirejs.config.json** looks like:

``` json
{
    "paths": {
        "wibble": "nested/path/wibble"
    }
}
```

Do I need to call `require.config()` in _main.js_? If so what do I pass to it? It also doesn't seem like requirejs.config.json is being copied to the build folder. I tried adding it explicitly to the urequireconfig bundle.copy array which did copy it, but it is still not being used. Thanks for any help!

Use / adapt madge (https://github.com/pahen/madge)
http://stackoverflow.com/questions/4881059/how-to-handle-circular-dependencies-with-requirejs-amd



Allow levels and better error handling

Instead of having `bundle.path` and its corresponding `bundle.filez`, we should have `src`: an array of objects with `{path, filez}` or shortcut `[path, filez]`, like

``` coffee
  src: [
    [ '../../other/path/libA', ["this/path/from/libA/**/*" ] ]
    [ 'node_modules/dist/libB', [/./,  (f)-> f isnt 'badfile')] ]

    # or the boring
    {
      path: "some/path"
      filez: ['some/filespecs/*.*']
    }
   ..
  ]
```

that all together define a **virtual files source**.

Notes:
- We should also have some option to allow `'override'` _\- think of overwrite, as we are writting -_, with cases like true/false or 'older', 'newer', 'larger', 'smaller' etc. Order does matter, and the 1st one (left side) has precedence.
- inlining can use urequire / browerify / commonjs-everywhere etc to convert the module and its nested deps, if needed. It can also use the bibrary's source, if available.
- Could we have this : 

``` coffee
  ['bower_components/lodash/dist/', 'lodash.js']
  # or better
  [ 'lodash' ] # that resolves to the above, that effectivelly is inlining lodash in bundle (UMD, or combined) as a 'normal' module of bundle's root.
```

Add UMD around a single file - rather easily possible, if it has only external (global) dependencies, i.e its only a single module (or a result of concatenation).

Harder case for multiple modules: could perhaps use another library that gathers `require()`-only files together (but not something like https://github.com/sstephenson/stitchâ€Ž, cause it has its own overhead)

Allow uRequire configs to share / derive from a single bundle, then uRequire loading that bundle only a single time, but build it against multiple builds. 

Needs some rethinking of which keys are where and what dependends on what, but the main concept is there.
