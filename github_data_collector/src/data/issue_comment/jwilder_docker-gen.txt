Hello,

I have used [jwilder/nginx-proxy](https://github.com/jwilder/nginx-proxy) and [JrCs/docker-letsencrypt-nginx-proxy-companion](https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion) a lot that both rely on docker-gen. 

However, with Fedora 31 (and RHEL 8) my distribution has switched to podman (and docker is only useable if you switch back to vgroups v1). With podman, there is no unix socket `/var/run/docker.sock`. However, there seems an replacement for  `docker events`: `podman events` (see [Podman Usage Transfer](https://github.com/containers/libpod/blob/master/transfer.md)).

So I wonder if there is a way to archive the functionallity of docker-gen on podman? 

Kind regards,

aanno2
When running docker-gen in a container on Github actions the variable `.Docker.CurrentContainerID` is null and thus cannot be used in the template. 

I am not sure if this is only the case when running in the same container as the router.

I found https://github.com/jwilder/nginx-proxy/blob/master/nginx.tmpl and https://github.com/drud/ddev/blob/master/containers/ddev-router/nginx.tmpl being affected by this problem.

I tested with `runs-on: ubuntu-18.04` and an updated docker (`docker-ce amd64 5:19.03.5~3-0~ubuntu-bionic`). 

Do you have an idea what could be the reason?

I find the mounted /var/run/docker.sock inside the containers fully functional.
while studying the code I noticed the referred line. Should it not be the following?:
```
all := false
```
If I understand the code correctly `all` is always `True` and the configuration option `-include-stopped` has no effect.

https://github.com/jwilder/docker-gen/blob/4edc190faa34342313589a80e3a736cafb45919b/cmd/docker-gen/main.go#L159
Signed-off-by: Charles Arehart <charlie@carehart.org>
I am having an issue with getting docker-gen to restart nginx-proxy on changes.
I am running the nginx proxy (linuxserver/nginx:latest) and docker-gen containers seperately on a server running Unraid OS.

If I start the nginx-proxy container everything works as expected.
However, if I change some meta, e.g. set VIRTUAL_HOST on a container, nginx-proxy fails to reload via sighup.

I see the following log for nginx-proxy:
```
[cont-finish.d] executing container finish scripts...
[cont-finish.d] done.
[s6-finish] waiting for services.
s6-svwait: fatal: timed out
[s6-finish] sending all processes the TERM signal.
[s6-finish] sending all processes the KILL signal and exiting.
```
This implementation will allow for the use of a filter to live query the containers before sending the sigup, and is fully backwards compatible with the previous implementation.

Resolves #77


I have been trying to add CORS headers to the nginx proxy. I have a simple test that does not seem to work. Any ideas?

I used the example in the docker-gen docs and did this:

```
docker run -d -p 80:80 --name nginx -v /tmp/nginx:/etc/nginx/conf.d -t nginx
docker run -d --name nginx-gen --volumes-from nginx    -v /var/run/docker.sock:/tmp/docker.sock:ro    -v /tmp/templates:/etc/docker-gen/templates    -t jwilder/docker-gen -notify-sighup nginx -watch -only-exposed /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
```

I copied the nginx.tmpl from the nginx proxy into /tmp/templates and edited it.

Since I am doing a simple test without proxying anything I assume I can add headers to the "server {" - so that when I hit the server it will return the headers and the 503.

The stanza looks like this:

```
server {
        server_name _; # This is just an invalid value which will never trigger on a real hostname.
        listen 80;
        {{ if $enable_ipv6 }}
        listen [::]:80;
        {{ end }}
        access_log /var/log/nginx/access.log vhost;
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        return 503;
}
```

If I docker exec -it id /bin/bash in the running nginx container I can see the /etc/nginx/conf.d/default.conf has the "add_header's" in it.

```
...
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
server {
        server_name _; # This is just an invalid value which will never trigger on a real hostname.
        listen 80;
        access_log /var/log/nginx/access.log vhost;
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        return 503;
}
```


If I point chrome at http://localhost and open the tools, the response headers only contain:

```
HTTP/1.1 503 Service Temporarily Unavailable
Server: nginx/1.15.12
Date: Fri, 10 May 2019 20:45:58 GMT
Content-Type: text/html
Content-Length: 600
Connection: keep-alive
```

Any ideas what I am doing wrong?

This has been very useful in my fork for the following usecase:

I wanted to use docker-gen with TOR. When you create a hidden service, TOR create a file at a specific location with the TOR onion host that represent your service. I needed to use this onion host as input for generating my nginx configuration file. So my nginx.tmpl needed to read a file.
If the destination file does not exists, the permissions become `600` because this is the default permission for temp files.

This is problematic, if the container consuming the destination file does not run as root.

Instead, the default permissions should be used (as per umask).
This PR will make permission `644`, which is generally what we want. And if the container consuming it is not happy with it, it always can override the permissions.
