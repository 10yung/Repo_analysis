…alyzer

Work towards reducing CompilationEnd analyzers in the repo: #2579
…ation analyzer

Fixes #3221
This was reported internally as a slow analyzer for multiple repros. Primary slowdown seems to be coming in GetSymbolInfo invocations for every single object creation node: https://github.com/dotnet/roslyn-analyzers/blob/f15404b312295e7cee16fb40b4c8d3f91f10f087/src/NetAnalyzers/Core/Microsoft.NetCore.Analyzers/Runtime/DoNotRaiseReservedExceptionTypes.cs#L129-L142
#### Analyzer package

[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)

#### Package Version

v2.9.8 (Latest)

#### Diagnostic ID

Example: [CA1062](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1062?view=vs-2019)

#### Repro steps

create a method that accept a non nullable reference like this
```
public void Handle(EventBase theEvent){
   theEvent!.DoAnything();
}
```

`theEvent!.DoAnything()` will complain about 1062 even if the `!` is applied to the expression

#### Expected behavior

CA1062 should be NRT (nullable reference type) aware in order to not trigger when are are confident about never pass a null value from external libraries.

The C#8 nullable feature is nice, but it still requires to write lot of boilerplate code to ensure it's happy about public method arguments that may be null when invoked from external libraries.

When we are confident we'll use NRT in all project using such library, having a way to not write all null checks would be valuable.

Another very common scenario is when using classes in dependency injection scenarios, where a great percentage of classes shouldn't need an explicit null check

probably this behavior should be supported by a language feature, like using `!` on method arguments to suppress this message implicitly (or even let the compiler generate the standard null check)
#### Actual behavior

there is no way to prevent CA1062 to trigger (except of course to nullcheck or disable the rule) even using the notnull `!` operator in the expression

#### Analyzer package

[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)

#### Package Version

v2.9.8 (Latest)

#### Diagnostic ID

[CA2000](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2000)

#### Repro steps

```
var x = new StringReader("abc");
```

#### Expected behavior
`StringReader` is a well-known type that does not need to be disposed, so no warning.

#### Actual behavior
`CA2000` is reported.
#### Analyzer package

[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)

#### Package Version

v2.9.8 (Latest)

#### Diagnostic ID

CA1031

#### Repro steps

Note: this is strict a simple example, not something you might actually write.

```csharp
int TryConvert ( string value )
{
   try
   {
      return Int32.Parse(value);
   } catch (Exception e)
   {   
   };
   return 0;
}
```
1. Compile the above code and you, correctly, get the warning that you shouldn't catch generic exception

#### Expected behavior

The issue with this warning is that there are cases where methods are "safe". Safe methods are methods that are attempting to do something and the expectation is that they can fail but that it isn't an error that should be bubbled up. 

Let's ignore for purposes of this discussion that some exceptions (like `OutOfMemoryException`) cannot be correctly handled by the exception. Because C# doesn't have an easy way to say "handle all exceptions except - other than exception filters) it is difficult to properly build a series of try-catch blocks that would correctly handle all the exceptions you might care about and the few you don't, short of an exception filter. Since the purpose of this warning is to just let you know something might be wrong it makes sense to be able to ignore it when it doesn't make sense. 

The problem is that the existing suppression syntax (outside a global suppression) is either a verbose code analysis attribute or 2 pragmas. It would be nice if certain methods could be considered "safe" out of the box and therefore be ignored by this warning. Off the top of my head I'd argue that `Safe-` and `Try-` methods would qualify but I could easily see other methods that might as well. I'd like to see either these 2 types of methods auto-excluded and/or a special attribute be added (or perhaps there is one already) such that a method can be marked safe for this type of error. Again, the existing analysis attribute just seems too wordy and the pragma clutters up things. I believe this was done for the validating null argument rule so something similar would be nice here.

#### Actual behavior

Currently you have to suppress this warning in "safe" methods even though most of the time such exceptions are silently logged/eaten/etc.
#### Analyzer package

[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)

#### Package Version

v2.9.8 (Latest)

#### Diagnostic ID

[CA1812]

#### Repro steps

Code snippet
```csharp
public class SomeType
{
   public string GetValue ()
   {
      var data = SomeHelperMethodThatReturnsAGenericType<NestedType>();
      return data.Value;
   }

   private class NestedType
   {
      public string Value { get; set; }
   }   
}
```
1. Compile the code with CA1812 enabled.
2. Get a warning that `NestedType` is not used.
3. Clearly the type is used because it is passed as a type parameter. In this particular case it also is the return value so `data` is of that type.

#### Expected behavior

Types used as type parameters should not be considered to be unused by this rule. Additionally it seems odd that the analyzer didn't determine that `data` was that type and so it was also used as a local variable. 

#### Actual behavior

Get a warning of CA1812 with the recommendation of removing the type even though it is used as part of a generic type and a local variable is declared as that type as well.
~#### Analyzer package~

~[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)~

#### Package Version

v2.9.8 (Latest)

#### Diagnostic ID

[CA2000](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca2000)

#### Repro steps

```cs
using System;
using System.IO;

public sealed class Program : IDisposable
{
    public Program(Stream stream)
    {
        if (stream is null)
        {
            throw new ArgumentNullException(nameof(stream));
        }
    }

    public static void Main()
    {
        foreach (object _ in new object[1])
        {
            using FileStream stream = File.OpenRead(string.Empty);
            //                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            using Program pe = new Program(Stream.Null);
        }
    }

    public void Dispose() { }
}
```

#### Expected behavior

CA2000 is not reported.

#### Actual behavior

CA2000 is reported for `File.OpenRead`.

Doing some cleanup in the tests I have noticed that the behavior of `Microsoft.CodeAnalysis.CSharp.Testing.XUnit.CodeFixVerifier` and `Test.Utilities.CSharpCodeFixVerifier` is different. The same is true for the `VisualBasic` pendant.

For example, in the class `DoNotMixAttributesFromDifferentVersionsOfMEFTests`, the test `NoDiagnosticCases_UnresolvedTypes` will return 2 diagnostics with the first verifier and only 1 with the second. In the class `PartsExportedWithMEFv2MustBeMarkedAsSharedTests`, the test `NoDiagnosticCases_UnresolvedTypes` will return 5 diagnostics with the first and none with the second.

These 2 tests are the only failing tests but I suspect that we might have more non-failing tests impacted by this difference.

Tagging @sharwell as you know quite a lot on the test framework.