**Intended outcome:**

When a subscription's initial data is returned by the GraphQL server,
the `useSubscription` hook should:
- Set `loading` to `false`.
- Provide the data in `data`.
- Do this 100% of the time.

**Actual outcome:**

Approximately 30% of the time (in my case) _the initial data is returned by the GraphQL server_ but `loading` remains `true` and `data` remains `undefined`.

**How to reproduce the issue:**

Based on my investigate I believe this issue will occur in any application which uses `useSubscription`. However due to its intermittent / race condition nature it will be highly dependent on the complexity of the React application, and network conditions.

I have posted a screen cast here demonstrating the issue [here](https://youtu.be/nDc4k9oCqFs).

**Root cause:**

As identified in the video, I believe the root cause is a race condition in [`/packages/hooks/src/data/SubscriptionData.ts`](https://github.com/apollographql/react-apollo/blob/8ec8f23cacecc346fbf15048fc4adfb5e433f9a6/packages/hooks/src/data/SubscriptionData.ts) which implicitly requires that `isMounted` will be set to `true` **before** `updateResult` is called, and _this is not always the case_.

I haven't investigated further, but it's possible this is also the root cause for:
#3774 #3488 #3361 #3425 #3090 #2899


**Version**

```
  System:
    OS: macOS Mojave 10.14.6
  Binaries:
    Node: 10.15.3 - ~/.nvm/versions/node/v10.15.3/bin/node
    npm: 6.10.3 - ~/.nvm/versions/node/v10.15.3/bin/npm
  Browsers:
    Chrome: 79.0.3945.117
    Firefox: 72.0.1
    Safari: 13.0.4
  npmPackages:
    @apollo/react-common: 3.1.3 => 3.1.3 
    @apollo/react-hoc: 3.1.3 => 3.1.3 
    @apollo/react-hooks: 3.1.3 => 3.1.3 
    apollo-boost: 0.4.7 => 0.4.7 
    apollo-cache-inmemory: 1.6.5 => 1.6.5 
    apollo-client: 2.6.8 => 2.6.8 
    apollo-link: 1.2.13 => 1.2.13 
    apollo-link-context: 1.0.19 => 1.0.19 
    apollo-link-http: 1.5.16 => 1.5.16 
    apollo-link-ws: 1.0.19 => 1.0.19 
    react-apollo: 3.1.3 => 3.1.3 
```
<!--
  Thanks for filing an issue on React Apollo!

  Please make sure that you include the following information to ensure that your issue is actionable.

  If you don't follow the template, your issue may end up being closed without anyone looking at it carefully, because it is not actionable for us without the information in this template.

  **PLEASE NOTE:** Feature requests and non-bug related discussions are no longer managed in this repo. Feature requests should be opened in https://github.com/apollographql/apollo-feature-requests.
-->

**Intended outcome:**

After an error has occurred once in a query, any subsequent errors triggered by `refetch` or by changing the `variables` passed into a query should be returned by `useQuery` and the correct `networkStatus` should be set.

**Actual outcome:**

After an error has occurred once in a query, any subsequent errors triggered by `refetch` or by changing the `variables` passed into a query are not returned by `useQuery` and the `networkStatus` is either:

- `7` if the error was triggered by refetch
- `2` if the error was triggered by changing variables

<!--
A description of what actually happened, including a screenshot or copy-paste of any related error messages, logs, or other output that might be related. Places to look for information include your browser console, server console, and network logs. Please avoid non-specific phrases like “didn’t work” or “broke”.
-->

**How to reproduce the issue:**

I will try and build a reproduction case soon.


I believe this may be part of the same issue but this isn't solely about refetch: https://github.com/apollographql/react-apollo/issues/3571

I wrote a workaround hook for the above issue but am unable to work around the set variables issue without bypassing `useQuery` entirely.

<!--
If possible, please create a reproduction using https://github.com/apollographql/react-apollo-error-template and link to it here. If you prefer an in-browser way to create reproduction, try: https://codesandbox.io/s/github/apollographql/react-apollo-error-template 

Instructions for how the issue can be reproduced by a maintainer or contributor. Be as specific as possible, and only mention what is necessary to reproduce the bug. If possible, try to isolate the exact circumstances in which the bug occurs and avoid speculation over what the cause might be.
-->

**Version**

  System:
    OS: macOS Mojave 10.14.6
  Binaries:
    Node: 12.4.0 - ~/.nvm/versions/node/v12.4.0/bin/node
    Yarn: 1.19.2 - /usr/local/bin/yarn
    npm: 6.9.0 - ~/.nvm/versions/node/v12.4.0/bin/npm
  Browsers:
    Chrome: 79.0.3945.88

<!--
  Thanks for filing an issue on React Apollo!

  Please make sure that you include the following information to ensure that your issue is actionable.

  If you don't follow the template, your issue may end up being closed without anyone looking at it carefully, because it is not actionable for us without the information in this template.

  **PLEASE NOTE:** Feature requests and non-bug related discussions are no longer managed in this repo. Feature requests should be opened in https://github.com/apollographql/apollo-feature-requests.
-->

**Intended outcome:**

I expect the value of `loading` returned from `useMutation` to stay true while my refetch queries are executing when passing along `awaitRefetchQueries: true`. Also, I expect `onCompleted` to be delayed until my refetch queries are done executing, My code looks as follows:

```
const [createComment, { loading }] = useMutation<
    MutateCreateShopifyOrderComment,
    MutateCreateShopifyOrderCommentVariables
  >(MUTATION_CREATE_SHOPIFY_ORDER_COMMENT, {
    variables: { orderId, comment },
    refetchQueries: () => ['QuerySelectedCampaignInformation'],
    awaitRefetchQueries: true,
    onCompleted: resetState,
  });
```

**Actual outcome:**

<!--
A description of what actually happened, including a screenshot or copy-paste of any related error messages, logs, or other output that might be related. Places to look for information include your browser console, server console, and network logs. Please avoid non-specific phrases like “didn’t work” or “broke”.
-->

When I call the mutation, loading becomes false and onCompleted is called before the `refetchQueries` have finished executing. Here's a video demonstrating the issue:

[![The issue](https://gyazo.com/4a04ea6f03b62f5fd7a9fe9e238c11eb/raw)](https://gyazo.com/4a04ea6f03b62f5fd7a9fe9e238c11eb)

When the circular loading indicator disappears, loading (returned from useMutation) becomes false. When "On complete called" is printed in the console `onCompleted` is called. Finally, when the comment appears in the UI, the `refetchQueries` are done. Here is a video showing the network tab during the issue.

[![The issue with the network tab visible](https://gyazo.com/ef2eb79803bf51113bfe1f50a02547c0/raw)](https://gyazo.com/ef2eb79803bf51113bfe1f50a02547c0)

The first two requests are the `OPTION` and `POST` requests for the mutation while the last two are the `OPTION` and `POST` requests for the refetch query. As you can see, the circular loading indicator (which means loading has become false) disappears from the UI long before the refetch query is finished executing.

**How to reproduce the issue:**

<!--
If possible, please create a reproduction using https://github.com/apollographql/react-apollo-error-template and link to it here. If you prefer an in-browser way to create reproduction, try: https://codesandbox.io/s/github/apollographql/react-apollo-error-template 

Instructions for how the issue can be reproduced by a maintainer or contributor. Be as specific as possible, and only mention what is necessary to reproduce the bug. If possible, try to isolate the exact circumstances in which the bug occurs and avoid speculation over what the cause might be.
-->

Call a mutation with (lengthy) refetch queries and `awaitRefetchQueries: true`. Add a `console.log` to `onCompleted` and a `console.log` printing out the value of `loading` and notice how these are printed before the refetch queries have finished executing

**Version**

<!--
Run the following command in your project directory, and paste its (automatically copied to clipboard) results here:

`npx envinfo@latest --preset apollo --clipboard`
-->
System:
    OS: macOS Mojave 10.14.6
  Binaries:
    Node: 12.6.0 - /usr/local/bin/node
    Yarn: 1.19.1 - ~/Documents/work/webapp-v2/node_modules/.bin/yarn
    npm: 6.4.1 - /usr/local/bin/npm
  Browsers:
    Chrome: 79.0.3945.117
    Firefox: 69.0.3
    Safari: 13.0.4
  npmPackages:
    @apollo/react-hooks: 3.0.1 => 3.0.1
    apollo: 2.18.3 => 2.18.3
    apollo-cache-inmemory: 1.6.2 => 1.6.2
    apollo-client: 2.6.3 => 2.6.3
    apollo-link: 1.2.12 => 1.2.12
    apollo-link-batch-http: 1.2.12 => 1.2.12
    apollo-link-context: 1.0.18 => 1.0.18
    apollo-link-error: 1.1.11 => 1.1.11
    apollo-link-http: 1.5.15 => 1.5.15
    apollo-link-state: 0.4.2 => 0.4.2
    apollo-upload-client: 11.0.0 => 11.0.0
    react-apollo: 3.1.3 => 3.1.3

**Intended outcome:**

Setting up a pollInterval on a component in one page should stop that interval when going to another page (or unmounting that component) and start a pollInterval on that new page (mounted component) for the same query.

**Actual outcome:**
I have a page /a with ComponentA with a useQuery for QUERY. It has a pollInterval 7000. I go to page /b with ComponentB which also has a useQuery for the same QUERY. It has also a pollInterval. I then see in Network Tab that the polling frequency increases. When I navigate even further between the pages the polling frequency can increase even more, firing every second or faster.


**How to reproduce the issue:**


**Version**
I'm using react-apollo 3.1.3 so [https://github.com/apollographql/react-apollo/pull/3485](https://github.com/apollographql/react-apollo/pull/3485) should work

  System:
    OS: Linux 5.0 Ubuntu 18.04.3 LTS (Bionic Beaver)
  Binaries:
    Node: 10.16.3 - ~/.nvm/versions/node/v10.16.3/bin/node
    npm: 6.9.0 - ~/.nvm/versions/node/v10.16.3/bin/npm
  Browsers:
    Chrome: 79.0.3945.117
    Firefox: 72.0.1
  npmPackages:
    apollo-boost: ^0.4.7 => 0.4.7 
    apollo-cache-inmemory: ^1.6.5 => 1.6.5 
    apollo-client: ^2.6.8 => 2.6.8 
    apollo-link: ^1.2.13 => 1.2.13 
    apollo-link-error: ^1.1.12 => 1.1.12 
    apollo-link-http: ^1.5.16 => 1.5.16 
    next-with-apollo: ^4.3.0 => 4.3.0
    react-apollo: ^3.1.3 => 3.1.3 

**Intended outcome:**
When a Query with the same variables is executed a second time against a MockedProvider, NewData() will return new data results. This was the outcome that was happening before doing the apollo hook migration.

**Actual outcome:**
After the Apollo hook migration,
When the first time Query is executed against MockedProvider, it returns the results of newData() instead of the results data first defined in the mocked provider.



**How to reproduce the issue:**

**Invite.tsx**
```
import React, { Component } from 'react';
import gql from 'graphql-tag';
import { Query } from 'react-apollo';


export const GET_INVITE = gql`
  query Invite($inviteToken: String!, $inviteContext: InviteContext!) {
    invite(inviteToken: $inviteToken, inviteContext: $inviteContext) {
      email
      isExpired
      firstName
      lastName
      uuid
      inviteToken
    }
  }
`;

interface Variables {
  inviteToken: string;
  inviteContext: string;
}

interface matchParams {
  token: string;
}

interface inviteProps {
  context: InviteContext;
}

class Invite extends Component<RouteComponentProps<matchParams> & inviteProps> {

     render(): JSX.Element {
return (
 <div className="inviteContainer">

        <Query<Data, Variables>
          query={GET_INVITE}
          variables={{ inviteToken: token, inviteContext: context }}
        >
          {({ loading, error, data, refetch, networkStatus }) => {

               if (data.invite.isExpired)
              return (
                <div
                  data-testid="expiredInvite"
                  className="inviteFormAnimation"
                >
                  <Lottie options={invalidInviteOptions} />
                  <Typography.Title className="animationMessage" level={3}>
                    Oops!...Looks like this Invite expired or was already used
                  </Typography.Title>

                  <Typography.Title className="animationMessage" level={4}>
                    If you think you recieved this in error, Send us an email to
                    request a new one
                  </Typography.Title>
               
                </div>
              );

               return (
                   <div>
              <UserSignUpForm
                firstName={data ? data.invite.firstName : ''}
                lastName={data ? data.invite.lastName : ''}
                email={data ? data.invite.email : ''}
                refetch={refetch}
                submitForm={this.handleSubmit}
                subTitle={this.handleFormSubtitle(this.props.context)}
                countryCode={this.handleCountryCode(this.props.context)}
                data-testid="signupform"
              />
              <Button onClick={() => refetch()}>Create my account</Button>
              </div>
            );


          }
            }
       
        </Query>
      </div>
    );

}
}
export default Invite;

```
**Invite.test.tsx**

```
test('should display expired invite animation when user tries creates account when invite is expired', async () => {
  const validThenExpiredInviteMocks = [
    {
      request: {
        query: GET_INVITE,
        variables: {
          inviteToken: '1234',
          inviteContext: 'DESIGNER_BUSINESS'
        }
      },
      result: {
        data: {
          invite: {
            email: 'jake@jake.com',
            firstName: 'Jake',
            isExpired: false,
            lastName: null,
            uuid: '123ff43',
            inviteToken: '1234'
          }
        }
      },
      newData: () => ({
        data: {
          invite: {
            email: 'jake@jake.com',
            firstName: 'Jake',
            isExpired: true,
            lastName: null,
            uuid: '123ff43',
            inviteToken: '1234'
          }
        }
      })
    }
  ];

  
  const { getByTestId, getByText, getByLabelText, debug } = render(
    <MockedProvider mocks={validThenExpiredInviteMocks} addTypename={false}>
      <Invite
        context={InviteContext.DESIGNER_BUSINESS}
        match={matchMock}
        location={mock}
        history={mock}
      />
    </MockedProvider>
  );

await act(async () => {
    await wait();
  });

  fireEvent.change(getByLabelText('lastname-input'), {
    target: { value: 'mylastname' }
  });
  fireEvent.change(getByLabelText('password-input'), {
    target: { value: 'Som3randompassword' }
  });
  fireEvent.change(getByLabelText('passwordconfirm-input'), {
    target: { value: 'Som3randompassword' }
  });

  fireEvent.change(getByLabelText('phone-input'), {
    target: { value: '1234567890' }
  });

  fireEvent.submit(getByText('Create my account'));

  await act(async () => {
    await wait();
  });
  expect(getByTestId('expiredInvite')).toHaveTextContent(
    'Oops!...Looks like this Invite expired or was already used'
  );
});
```
^^ The test fails because when it is trying to change the lastname input it can't find it because the expired Invite animation is displayed. This tells me that newData() is getting returned in the mockedProvider on the initial first Query instead of the second time the Query is executed when the 'create my 'account' button is clicked.

I also checked to see if the component was getting rendered twice for some reason but via print statements I could see it only being rendered once on the initial render. 
<!--
If possible, please create a reproduction using https://github.com/apollographql/react-apollo-error-template and link to it here. If you prefer an in-browser way to create reproduction, try: https://codesandbox.io/s/github/apollographql/react-apollo-error-template 

Instructions for how the issue can be reproduced by a maintainer or contributor. Be as specific as possible, and only mention what is necessary to reproduce the bug. If possible, try to isolate the exact circumstances in which the bug occurs and avoid speculation over what the cause might be.
-->

**Version**

  "dependencies": {
 "react": "^16.12.0",
    "react-apollo": "^3.1.3",
    "react-dom": "^16.12.0",
    "react-scripts": "^3.2.0",
...
}

"devDependencies": {
    "@apollo/react-testing": "^3.1.3",
    "@testing-library/jest-dom": "^4.2.4",
    "@testing-library/react": "^9.4.0",
...
}


**Intended outcome:**

We want to display the "Loading..." indicator only when we don't actually have data - that is, on first fetch.

When we have cached values, "Loading..." should not display - even if data is being refreshed from the network.

This seems like logical default behavior, since most people will check "loading" and if it's true will not display any data.

NOT displaying data when it's already cached seems to be a corner case, and NetworkStatus can be used to check if we're refetching.

Maybe the intent is to always check if there is data, which we can do but it seems less obvious than just checking `loading` to see whether we're in a pre-data state.

I've read the docs but they don't seem 100% clear on the issue.

**Actual outcome:**

When refetching from the network (to see if cache should be updated), "loading" is true, which seems to indicate we don't have access to data - when we actually do.

**How to reproduce the issue:**

1. Set network policy to cache-and-network for a query
2. Check `loading` on initial load (true)
3. Fire the query again (e.g. visit the page) and check `loading` - it will be true, even though we already have cached data

**Version**

  System:
    OS: macOS Mojave 10.14.6
  Binaries:
    Node: 12.12.0 - /usr/local/bin/node
    Yarn: 1.21.1 - ~/Projects/mobile2mr/node_modules/.bin/yarn
    npm: 6.9.0 - /usr/local/bin/npm
  Browsers:
    Chrome: 79.0.3945.88
    Firefox: 72.0.1
    Safari: 13.0.4
  npmPackages:
    @apollo/react-hooks: ^3.1.2 => 3.1.2
    apollo: ^2.21.2 => 2.21.2
    apollo-cache-inmemory: ^1.5.1 => 1.5.1
    apollo-client: ^2.6.8 => 2.6.8
    apollo-link: ^1.2.11 => 1.2.11
    apollo-link-context: ^1.0.17 => 1.0.17
    apollo-link-error: ^1.1.10 => 1.1.10
    apollo-link-http: ^1.5.14 => 1.5.14
    apollo-link-logger: ^1.2.3 => 1.2.3
    react-apollo: ^3.1.2 => 3.1.2

Fixes #3704 

Looked through all the files for this package and I didn't see any usage of `react-dom` or usage of dom elements so its unnecessary as a peer dep and could cause confusion for folks using react without `react-dom`. I didn't check other packages, so its possible the peer dep is extraneous elsewhere as well.

<!--
  Thanks for filing a pull request on React Apollo!

  A few automated bots may chime in on your PR. They are here to help
  with reviewing and ensuring React Apollo is production ready after each
  pull request merge.

    - meteor-bot will respond asking you to sign the CLA if this is your first PR.
      It may also respond with warnings, messages, or fail the build if something is off.
      Don't worry, it'll help you to fix what is broken!

    - bundlesize is a status check to keep the footprint of React Apollo as small as possible.

    - travis-ci will run tests, checking style of code, and generally make
      sure everything is working as expected

  Please look at the following checklist to ensure that your PR
  can be accepted quickly:
-->

### Checklist:

* [ ] If this PR is a new feature, please reference an issue where a consensus about the design was reached (not necessary for small changes)
* [ ] Make sure all of the significant new logic is covered by tests
* [ ] If this was a change that affects the external API used in GitHunt-React, update GitHunt-React and post a link to the PR in the discussion.


Good morning,

When I define local fields for a given type, and I have multiple queries that return the same entry (but with different fields for different components), the Apollo cache complains if the `@client` fields aren’t present on *all* queries for a given type.

Specifically, the error I get says

```
Unhandled Promise Rejection: Error: Network error: Can't find field exampleLocalField on object {
  "the": "object entry as returned by a query without the local @client fields",
  "etc": "..."
}
```

I would expect that one could have multiple queries for the same entries (same `__typename` and `id`) and decide which local fields to include at will

Further, I have set `defaultOptions: { query: { errorPolicy: 'all', partialRefetch: true } }` on the client instance

Happy holidays!
<!--
  Thanks for filing an issue on React Apollo!

  Please make sure that you include the following information to ensure that your issue is actionable.

  If you don't follow the template, your issue may end up being closed without anyone looking at it carefully, because it is not actionable for us without the information in this template.

  **PLEASE NOTE:** Feature requests and non-bug related discussions are no longer managed in this repo. Feature requests should be opened in https://github.com/apollographql/apollo-feature-requests.
-->

**Intended outcome:**
`onCompleted` passed to mutate function should be called. 

<!--
What you were trying to accomplish when the bug occurred, and as much code as possible related to the source of the problem.
-->

**Actual outcome:**

`onCompleted` passed to mutate function is not called. `onCompleted` must be passed directly to `useMutation` (second arg).

<!--
A description of what actually happened, including a screenshot or copy-paste of any related error messages, logs, or other output that might be related. Places to look for information include your browser console, server console, and network logs. Please avoid non-specific phrases like “didn’t work” or “broke”.
-->

**How to reproduce the issue:**

<!--
If possible, please create a reproduction using https://github.com/apollographql/react-apollo-error-template and link to it here. If you prefer an in-browser way to create reproduction, try: https://codesandbox.io/s/github/apollographql/react-apollo-error-template 

Instructions for how the issue can be reproduced by a maintainer or contributor. Be as specific as possible, and only mention what is necessary to reproduce the bug. If possible, try to isolate the exact circumstances in which the bug occurs and avoid speculation over what the cause might be.
-->

**Version**


  System:
    OS: macOS Mojave 10.14.6
  Binaries:
    Node: 13.4.0 - /usr/local/bin/node
    Yarn: 1.21.1 - /usr/local/bin/yarn
    npm: 6.13.4 - /usr/local/bin/npm
  Browsers:
    Chrome: 79.0.3945.88
    Firefox: 71.0
    Safari: 13.0.3
  npmPackages:
    @apollo/react-hooks: ^3.1.3 => 3.1.3 
    @apollo/react-ssr: ^3.1.3 => 3.1.3 
    apollo-cache-inmemory: ^1.6.5 => 1.6.5 
    apollo-client: ^2.6.8 => 2.6.8 
    apollo-link: ^1.2.13 => 1.2.13 
    apollo-link-context: ^1.0.19 => 1.0.19 
    apollo-link-error: ^1.1.12 => 1.1.12 
    apollo-link-http: ^1.5.16 => 1.5.16 

<!--
Run the following command in your project directory, and paste its (automatically copied to clipboard) results here:

`npx envinfo@latest --preset apollo --clipboard`
-->

This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [@types/node](https://togithub.com/DefinitelyTyped/DefinitelyTyped) | devDependencies | major | [`12.12.24` -> `13.1.8`](https://renovatebot.com/diffs/npm/@types%2fnode/12.12.24/13.1.8) |
| [@types/node](https://togithub.com/DefinitelyTyped/DefinitelyTyped) | dependencies | major | [`12.12.24` -> `13.1.8`](https://renovatebot.com/diffs/npm/@types%2fnode/12.12.24/13.1.8) |

---

### Renovate configuration

:date: **Schedule**: "every weekend" in timezone America/Los_Angeles.

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR is stale, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about these updates again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#apollographql/react-apollo).