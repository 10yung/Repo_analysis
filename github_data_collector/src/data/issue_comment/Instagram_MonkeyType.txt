When I create a venv and install monkeytype like this:

```
python3 -m venv /tmp/venv
/tmp/venv/bin/pip install MonkeyType
```

And then I run monkeytype like this:
```
/tmp/venv/bin/monkeytype run foo.py
/tmp/venv/bin/monkeytype apply example
```

Then it fails with this error:
```
Traceback (most recent call last):
  File "/tmp/venv/bin/monkeytype", line 11, in <module>
    sys.exit(entry_point_main())
  File "/tmp/venv/lib/python3.6/site-packages/monkeytype/cli.py", line 382, in entry_point_main
    sys.exit(main(sys.argv[1:], sys.stdout, sys.stderr))
  File "/tmp/venv/lib/python3.6/site-packages/monkeytype/cli.py", line 367, in main
    handler(args, stdout, stderr)
  File "/tmp/venv/lib/python3.6/site-packages/monkeytype/cli.py", line 165, in apply_stub_handler
    proc = subprocess.run(retype_args, check=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
  File "/usr/lib/python3.6/subprocess.py", line 423, in run
    with Popen(*popenargs, **kwargs) as process:
  File "/usr/lib/python3.6/subprocess.py", line 729, in __init__
    restore_signals, start_new_session)
  File "/usr/lib/python3.6/subprocess.py", line 1364, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'retype': 'retype'
```

As `retype` is not in my path.

It would be very great to run the `retype` execuable from the venv also, as it is installed to the bin directory in the venv.

I can workaround this issue by activating the venv before but it is a bit inconvenient for me.



Given the following code:
```python
def foo(a):
    print(a)

foo([{"a": "b"}])
```
When it gets annotated by monkeytype the following will be the result:
```python
from monkeytype.encoding import DUMMY_NAME
from typing import List
def foo(a: List[DUMMY_NAME]) -> None:
    print(a)

foo([{"a": "b"}])
```

This raises `ImportError` as there's no `DUMMY_NAME` in `monkeytype.encoding`.

I'm using the latest monkeytype which is `MonkeyType==19.11.2`.
Hi @carljm , 
thanks for the hints! ðŸ˜Š
My setup is following:

```shell
(base) C:\projects>conda info

     active environment : base
    active env location : C:\Anaconda3
            shell level : 1
       user config file : C:\Users\tfz\.condarc
 populated config files : C:\Users\tfz\.condarc
          conda version : 4.7.12
    conda-build version : 3.18.11
         python version : 3.7.3.final.0
       virtual packages :
       base environment : C:\Anaconda3  (writable)
           channel URLs : https://conda.anaconda.org/conda-forge/win-64
                          https://conda.anaconda.org/conda-forge/noarch
                          https://repo.anaconda.com/pkgs/main/win-64
                          https://repo.anaconda.com/pkgs/main/noarch
                          https://repo.anaconda.com/pkgs/r/win-64
                          https://repo.anaconda.com/pkgs/r/noarch
                          https://repo.anaconda.com/pkgs/msys2/win-64
                          https://repo.anaconda.com/pkgs/msys2/noarch
                          https://conda.anaconda.org/bioconda/win-64
                          https://conda.anaconda.org/bioconda/noarch
          package cache : C:\Anaconda3\pkgs
                          C:\Users\tfz\.conda\pkgs
                          C:\Users\tfz\AppData\Local\conda\conda\pkgs
       envs directories : C:\Anaconda3\envs
                          C:\Users\tfz\.conda\envs
                          C:\Users\tfz\AppData\Local\conda\conda\envs
               platform : win-64
             user-agent : conda/4.7.12 requests/2.22.0 CPython/3.7.3 Windows/10 Windows/10.0.18362
          administrator : False
             netrc file : None
           offline mode : False

(base) C:\projects>conda list monkeytype
# packages in environment at C:\Anaconda3:
#
# Name                    Version                   Build  Channel
monkeytype                19.11.2            pyh516909a_0    conda-forge
```

The monkeytype.sqlite3 is there, but seems to be empty. Pls see the attachment.
[monkeytype.zip](https://github.com/Instagram/MonkeyType/files/3954963/monkeytype.zip)

I'm very thankful, that there are so guys like you who responds so fast!
Thank you very much in advance! ðŸ˜‰

If you need more information or when you could give some debug hints, I really would like to help.

Best regards!

_Originally posted by @noragen in https://github.com/Instagram/MonkeyType/issues/157#issuecomment-564929257_
Some projects, EdgeDB in particular, avoid importing bare names to avoid
conflicts.  Instead, they rely on importing modules and addressing type names
with a proper module or subpackage prefix.

This change provides a `--import-modules` CLI option that changes the default
behavior from:
```py3
  from package.subpackage import SomeType

  def func(arg: SomeType) -> None: ...
```
into:
```py3
  from package import subpackage

  def func(arg: subpackage.SomeType) -> None: ...
```
This change leaves imports from top-level modules alone, so for example `from
typing import List` stays as it was.  This can be further refined if needed.

[Depends on #145, #146, #148; ignore the first three commits please]
We do a lot of introspection on types from the typing module, and that means we have to shim across Python versions ourselves. We should see how much of that we can replace with https://github.com/ilevkivskyi/typing_inspect
I understand that you've already documented steps to generate stubs for django applications. And that's awesome!

Unfortunately the steps are too complicated and I need to give up using type hints for now. :cry: 


Currently MonkeyType seems to generate stubs sorted alphabetically. I would prefer that it generated stubs sorted in the same order as the source. This would allow one to compare the source and stub side-by-side in an editor, which would make it easier to compare declaration and source and to find missing stubs.
I am attempting to generate stubs for
mahmoud/boltons@874e930bd6dbd92e64412e1bdb46a4053587c86d and am getting failures that are curiously non-deterministic; I can re-run `monkeytype stub <module>` and eventually it will produce stubs rather than errors.

I am running this on Python 3.6.5, built via `pyenv`, on macOS 10.13.6, through `pytest-monkeytype`:
```
pytest-monkeytype==1.0.1
  - MonkeyType [required: >=18.2.0, installed: 18.8.0]
    - retype [required: Any, installed: 17.12.0]
      - click [required: Any, installed: 6.7]
      - typed-ast [required: Any, installed: 1.1.0]
```

Actually, I had to tweak _pytest-monkeytype_ a bit to get it to work, but as this is happening during stub-generation, after trace-logging is collected, I don't think that could be the cause.

```
Traceback (most recent call last):
 File "/my/venv/bin/monkeytype", line 11, in <module>
    sys.exit(entry_point_main())
  File "/my/venv/lib/python3.6/site-packages/monkeytype/cli.py", line 378, in entry_point_main
    sys.exit(main(sys.argv[1:], sys.stdout, sys.stderr))
  File "/my/venv/lib/python3.6/site-packages/monkeytype/cli.py", line 363, in main
    handler(args, stdout, stderr)
  File "/my/venv/lib/python3.6/site-packages/monkeytype/cli.py", line 187, in print_stub_handler
    stub = get_stub(args, stdout, stderr)
  File "/my/venv/lib/python3.6/site-packages/monkeytype/cli.py", line 122, in get_stub
    rewriter=rewriter,
  File "/my/venv/lib/python3.6/site-packages/monkeytype/stubs.py", line 583, in build_module_stubs_from_traces
    defn = get_updated_definition(func, traces, rewriter, ignore_existing_annotations)
  File "/my/venv/lib/python3.6/site-packages/monkeytype/stubs.py", line 256, in get_updated_definition
    return_type = rewriter.rewrite(return_type)
  File "/my/venv/lib/python3.6/site-packages/monkeytype/typing.py", line 236, in rewrite
    typ = rw.rewrite(typ)
  File "/my/venv/lib/python3.6/site-packages/monkeytype/typing.py", line 148, in rewrite
    return rewriter(typ)
  File "/my/venv/lib/python3.6/site-packages/monkeytype/typing.py", line 185, in rewrite_Union
    key_type = key_type or e.__args__[0]
AttributeError: type object 'OrderedMultiDict' has no attribute '__args__'
```
```
[2018-10-19 10:51:08,987]   ERROR [monkeytype.tracing]: Failed collecting trace
Traceback (most recent call last):
  File "/home/maico/IdeaProjects/viaduct/venv/lib/python3.6/site-packages/monkeytype/tracing.py", line 258, in __call__
    self.handle_return(frame, arg)
  File "/home/maico/IdeaProjects/viaduct/venv/lib/python3.6/site-packages/monkeytype/tracing.py", line 234, in handle_return
    last_opcode = frame.f_code.co_code[frame.f_lasti]
IndexError: index out of range
[2018-10-19 10:51:08,987]   ERROR [monkeytype.tracing]: Failed collecting trace
Traceback (most recent call last):
  File "/home/maico/IdeaProjects/viaduct/venv/lib/python3.6/site-packages/monkeytype/tracing.py", line 258, in __call__
    self.handle_return(frame, arg)
  File "/home/maico/IdeaProjects/viaduct/venv/lib/python3.6/site-packages/monkeytype/tracing.py", line 234, in handle_return
    last_opcode = frame.f_code.co_code[frame.f_lasti]
IndexError: index out of range
...
additional 40 same traces
...
[2018-10-19 10:51:08,988]   ERROR [monkeytype.tracing]: Failed collecting trace
Traceback (most recent call last):
  File "/home/maico/IdeaProjects/viaduct/venv/lib/python3.6/site-packages/monkeytype/tracing.py", line 258, in __call__
    self.handle_return(frame, arg)
  File "/home/maico/IdeaProjects/viaduct/venv/lib/python3.6/site-packages/monkeytype/tracing.py", line 234, in handle_return
    last_opcode = frame.f_code.co_code[frame.f_lasti]
IndexError: index out of range
```
We're running a rather large Flask application, which we recently started adding type hints for. I'd like to use monkeytype. I've attempted to bisect our application, however cannot seem to find the root cause of the error. 

I've tried building a sample to reproduce with a sample application:

```python
from flask import Flask, Blueprint
app = Flask(__name__)

blueprint = Blueprint("hello", __name__)

@blueprint.route("/<int:test>/")
def hello(test: int) -> str:
    return "Hello World!"

app.register_blueprint(blueprint)
app.run(host="0.0.0.0", port=5000, debug=True)
```
However that does **not** seem to run into the issue. What would be a good approach to find the root cause of the error in monkeytype?
Reporting a separate issue for the problem discovered in #113 .

The exact files to reproduce this issue are  : 

**forward_ref.py:**
```
class AA:

    def use_aa( self, aa ):
        pass

    def use_bb( self, bb ):
        pass

    def use_cc( self, cc ):
        pass

    def use_dd( self, dd ):
        pass

    class CC:

        def use_aa( self, aa ):
            pass

        def use_bb( self, bb ):
            pass

        def use_cc( self, cc ):
            pass

        def use_dd( self, dd ):
            pass

        class DD:

            def use_aa( self, aa ):
                pass

            def use_bb( self, bb ):
                pass

            def use_cc( self, cc ):
                pass

            def use_dd( self, dd ):
                pass

class BB:
    pass
```

And use_fw_ref.py : 
```
from forward_ref import AA, BB

if __name__ == '__main__':
    aa = AA()
    bb = BB()
    cc = AA.CC()
    dd = AA.CC.DD()

    for inst in (aa, cc, dd):
        inst.use_aa( aa )
        inst.use_bb( bb )
        inst.use_cc( cc )
        inst.use_dd( dd )
```

Then using them : 

```
d:\work\pyann\monkeytype\toto>monkeytype stub forward_ref
class AA:
    def use_aa(self, aa: AA) -> None: ...
    def use_bb(self, bb: BB) -> None: ...
    def use_cc(self, cc: AA.CC) -> None: ...
    def use_dd(self, dd: AA.CC.DD) -> None: ...


class AA.CC:
    def use_aa(self, aa: AA) -> None: ...
    def use_bb(self, bb: BB) -> None: ...
    def use_cc(self, cc: AA.CC) -> None: ...
    def use_dd(self, dd: AA.CC.DD) -> None: ...


class AA.CC.DD:
    def use_aa(self, aa: AA) -> None: ...
    def use_bb(self, bb: BB) -> None: ...
    def use_cc(self, cc: AA.CC) -> None: ...
    def use_dd(self, dd: AA.CC.DD) -> None: ...
```

When calling mypy, I get the following : 
```
d:\work\pyann\monkeytype\toto>mypy forward_ref.py forward_ref.pyi
forward_ref.pyi:7: error: invalid syntax
```

To fix it, I had to change the stub to : 
```
class AA:
    def use_aa(self, aa: AA) -> None: ...
    def use_bb(self, bb: BB) -> None: ...
    def use_cc(self, cc: AA.CC) -> None: ...
    def use_dd(self, dd: AA.CC.DD) -> None: ...

    class CC:
        def use_aa(self, aa: AA) -> None: ...
        def use_bb(self, bb: BB) -> None: ...
        def use_cc(self, cc: AA.CC) -> None: ...
        def use_dd(self, dd: AA.CC.DD) -> None: ...


        class DD:
            def use_aa(self, aa: AA) -> None: ...
            def use_bb(self, bb: BB) -> None: ...
            def use_cc(self, cc: AA.CC) -> None: ...
            def use_dd(self, dd: AA.CC.DD) -> None: ...

class BB:
    ...

```
