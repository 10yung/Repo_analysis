## Description

This PR fixes the circular import between `skimage.measure._regionprops` and `skimage.mormphology.convex_hull` forcing the ugly [import](https://github.com/scikit-image/scikit-image/blob/master/skimage/measure/_regionprops.py#L195) in the `RegionProperties.convex_image` property.

This circular import is also pointed out by @stevendbrown https://github.com/scikit-image/scikit-image/pull/1780#discussion_r44736830.

## For reviewers

<!-- Don't remove the checklist below. -->
- [ ] Check that the PR title is short, concise, and will make sense 1 year
  later.
- [ ] Check that new functions are imported in corresponding `__init__.py`.
- [ ] Check that new features, API changes, and deprecations are mentioned in
      `doc/release/release_dev.rst`.
- [ ] Consider backporting the PR with `@meeseeksdev backport to v0.14.x`

## Description

<!-- If this is a bug-fix or enhancement, state the issue # it closes -->
<!-- If this is a new feature, reference what paper it implements. -->
[Purpose]
1. Propose x300~x1000 speedup when calculating Haar feature.
2. Propose new Pytest procedure for Haar feature.
3. Correct Haar feature bug.

[To be done]
1. Please help review the APIs first. Since there are a lot of changes, once an initial review is done so we finalize the APIs, I will fill create Docstrings accordingly.
2. A  Benchmark is expected to be given before 2020/01/30
3. The initial Benchmark is  given here for checking the effect (to be done later).

## Checklist

<!-- It's fine to submit PRs which are a work in progress! -->
<!-- But before they are merged, all PRs should provide: -->
- [ ] [Docstrings for all functions](https://github.com/numpy/numpy/blob/master/doc/example.py)
- [ ] Gallery example in `./doc/examples` (new features only)
- [ ] Benchmark in `./benchmarks`, if your changes aren't covered by an
  existing benchmark
- [ ] Unit tests
- [ ] Clean style in [the spirit of PEP8](https://www.python.org/dev/peps/pep-0008/)

<!-- For detailed information on these and other aspects see -->
<!-- the scikit-image contribution guidelines. -->
<!-- https://scikit-image.org/docs/dev/contribute.html -->

## For reviewers

<!-- Don't remove the checklist below. -->
- [ ] Check that the PR title is short, concise, and will make sense 1 year
  later.
- [ ] Check that new functions are imported in corresponding `__init__.py`.
- [ ] Check that new features, API changes, and deprecations are mentioned in
      `doc/release/release_dev.rst`.
- [ ] Consider backporting the PR with `@meeseeksdev backport to v0.14.x`

[I](url
![result1](https://user-images.githubusercontent.com/58392288/72462123-30600a80-3785-11ea-8914-476744312e5a.jpg)
![SampleE_#1_26pxfor1mm](https://user-images.githubusercontent.com/58392288/72462283-9187de00-3785-11ea-8267-6cdc8b7eda12.jpg)
![SampleE_#1_26pxfor1mm_out](https://user-images.githubusercontent.com/58392288/72462329-b5e3ba80-3785-11ea-96b2-e64c85565e26.jpg)


) am new to image processing on python and my main project aims to segment the particles of soil grains included within an image after performing edge detection of the image using holistically nested edge detection then applying watershed segmentation on this image to get the contour areas in the image however I face some problems regarding segmenting the intersecting grains as I got two or more grains as one grain and this gives me an error in the results . Could anyone figure out where can I modify the code to get better segmenting the grains in the image .



## Way to reproduce
```python
import cv2
import numpy as np
from skimage.feature import peak_local_max
from skimage.morphology import watershed
from scipy import ndimage
import matplotlib.pyplot as plt

# Load in image, convert to gray scale, and Otsu's threshold
image1 = cv2.imread('SampleH2_#1_69pxfor1cm.jpg')
image = cv2.pyrMeanShiftFiltering(image1,15,30)
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(5,5))
image = cv2.morphologyEx(image,cv2.MORPH_CLOSE,kernel)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]
distance_map = ndimage.distance_transform_edt(thresh)
local_max = peak_local_max(distance_map, indices=False, footprint=np.ones((51, 51)), labels=thresh)

# Perform connected component analysis then apply Watershed
markers = ndimage.label(local_max, structure=np.ones((3, 3)))[0]
labels = watershed(-distance_map, markers, mask=thresh)

# Iterate through unique labels
n = 0
total_area = []
for label in np.unique(labels):
    if label == 0:
        continue

    # Create a mask
    mask = np.zeros(gray.shape, dtype="uint8")
    mask[labels == label] = 255

    # Find contours and determine contour area
    cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cnts = cnts[0] if len(cnts) == 2 else cnts[1]
    c = max(cnts, key=cv2.contourArea)
    area = cv2.contourArea(c)
    total_area.append(area)
    n+=1
    print('Grain number' , ' of number ' , n , ' has area = ', area)
    # total_area += area
    cv2.drawContours(image, [c], -1, (36,255,12), 3)
# cal_area = []
# for a in total_area:
#     b= a/(64*64)
#     cal_area.append(b)


cv2.imwrite('result.jpg' ,image)
# print(total_area)
cv2.imshow('image', image)
cv2.waitKey(0)
# Place the full code we need to recreate your issue here
# upload all necessary images to github too!
```


## Version information
```python
# Paste the output of the following python commands
the code gives the areas of contours detected as shown in the attached images 

> .

```

```python
# your output here

```


## Description

Closes #4394.

- Border condition handling is added to the `meijering`, `sato` and `hessian` filters,
- border artifact in `meijering` are removed using the 'reflect' mode,
- implicit 'constant' mode used in `sato` and `hessian` are deprecated in favor of 'reflect' mode.

This PR comes from a suggestion of @shenker https://github.com/scikit-image/scikit-image/pull/4343#pullrequestreview-337754448.

## For reviewers

<!-- Don't remove the checklist below. -->
- [ ] Check that the PR title is short, concise, and will make sense 1 year
  later.
- [ ] Check that new functions are imported in corresponding `__init__.py`.
- [ ] Check that new features, API changes, and deprecations are mentioned in
      `doc/release/release_dev.rst`.
- [ ] Consider backporting the PR with `@meeseeksdev backport to v0.14.x`

## Description

As proposed in #4349, this PR comes with some refactoring of the `_adpathist` module:

- annex functions are now private,
- unnecessary arrays of indices are replaced by slices,
- some other minor refactoring.

## For reviewers

<!-- Don't remove the checklist below. -->
- [ ] Check that the PR title is short, concise, and will make sense 1 year
  later.
- [ ] Check that new functions are imported in corresponding `__init__.py`.
- [ ] Check that new features, API changes, and deprecations are mentioned in
      `doc/release/release_dev.rst`.
- [ ] Consider backporting the PR with `@meeseeksdev backport to v0.14.x`

## Description

`maijering` filter suffers from the same artifacts as `frangi` described in #4249 .

## Way to reproduce

```python
import pylab as plt
from skimage import color, data
from skimage.filters import meijering
img = color.rgb2gray(data.retina())[300:500, 700:900]
out = meijering(img, sigmas=[1])
plt.imshow(out)
```

![meijerin](https://user-images.githubusercontent.com/3438227/72299913-8d16d480-3662-11ea-9edb-6b95bed769c6.png)

Managing border conditions for the ridges filters as suggested by @shenker https://github.com/scikit-image/scikit-image/pull/4343#pullrequestreview-337754448 may solve the problem.

## Version information
```
3.7.5 (default, Oct 25 2019, 15:51:11) 
[GCC 7.3.0]
Linux-4.4.0-171-generic-x86_64-with-debian-stretch-sid
scikit-image version: 0.17.dev0
numpy version: 1.17.4
```

## Description
I have python code embedded inside c++ code. Its basically, downloading the images from network, and later user them to load for further processing using below code. It crashes on **0.16.0** but works on **0.15.0** version of **skimage** with python 3.7

--- Update ---
It works with python2.7 with skimage version 0.14.5.

```
Python 2.7.12 (default, Nov 12 2018, 14:36:49)
[GCC 5.4.0 20160609] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import skimage
>>> skimage.__version__
'0.14.5'
>>> quit()
mdeore@mdeore-Lenovo:~/clone/cboxer-server-native/server$ python3
Python 3.7.6 (default, Dec 19 2019, 23:49:42)
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import skimage
>>> skimage.__version__
'0.15.0'
>>>
```
---


## Way to reproduce
```
from skimage import io

def prewhiten(img):
    logger.debug('Image path : {0}'.format(img))
    if not os.path.isfile(img):
        logger.error('File does not exists!!!')
        return 0
    try:
        x = io.imread(img)                 <<<<<<<<<<<< crash block
    except:
        logger.error('Image is corrupt!')
        return 0
    mean = np.mean(x)
    std = np.std(x)
    std_adj = np.maximum(std, 1.0/np.sqrt(x.size))
    y = np.multiply(np.subtract(x, mean), 1/std_adj)
    return y
```

Images is proper and not corrupt, because i verified it post crash on python shell. Even if it is corrupt for any other problem, i have `try` block, it should not crash. Works like charm on 0.15.0 version of skimage for python 3.7. 

# Crash log
```
# The log looks something like:

Jan  8 17:04:33 mdeore-Lenovo kernel: [8985055.390229] cboxerserver[8794]: segfault at ffffffffffffffff ip 00007fbffa51d611 sp 00007ffecffd4c80 error 5 in libpython2.7.so.1.0[7fbffa389000+2f2000]

# When i ran it inside GDB, i got to the function which cased this crash. 

(gdb) bt
#0  0x00007ffff210d51a in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#1  0x00007ffff214e7e6 in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#2  0x00007ffff21371e5 in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#3  0x00007ffff210d340 in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#4  0x00007ffff21371e5 in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#5  0x00007ffff210d340 in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#6  0x00007ffff214e8ec in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#7  0x00007ffff209062a in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#8  0x00007ffff209172e in PyEval_EvalCodeEx () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#9  0x00007ffff2151076 in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#10 0x00007ffff217c9a8 in PyObject_Call () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#11 0x00007ffff2096485 in _PyEval_EvalFrameDefault () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#12 0x00007ffff2090c6f in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#13 0x00007ffff209172e in PyEval_EvalCodeEx () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#14 0x00007ffff2151076 in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#15 0x00007ffff217c9a8 in PyObject_Call () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#16 0x00007ffff2096485 in _PyEval_EvalFrameDefault () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#17 0x00007ffff2090c6f in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#18 0x00007ffff209172e in PyEval_EvalCodeEx () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#19 0x00007ffff2151076 in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#20 0x00007ffff217c9a8 in PyObject_Call () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#21 0x00007ffff2096485 in _PyEval_EvalFrameDefault () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#22 0x00007ffff2090c6f in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#23 0x00007ffff209135c in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#24 0x00007ffff2097563 in _PyEval_EvalFrameDefault () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#25 0x00007ffff208fa63 in ?? () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#26 0x00007ffff2091085 in _PyFunction_FastCallDict () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#27 0x00007ffff217c211 in _PyObject_FastCallDict () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#28 0x00007ffff217c348 in PyObject_CallFunctionObjArgs () from /usr/lib/x86_64-linux-gnu/libpython3.6m.so.1.0
#29 0x0000555555563163 in FaceClassifierServer::load_input_images (this=0x555555791ff0, start_index=0, end_index=10, unknown=false) at face_classifier_server_core.cpp:195
#30 0x000055555555baee in cboxer_process (userIds=std::vector of length 8, capacity 8 = {...}) at face_classifier_server_api.cpp:117
#31 0x000055555555c674 in main (argc=1, argv=0x7fffffffe2f8) at face_classifier_server_api.cpp:301
(gdb) f 29
#29 0x0000555555563163 in FaceClassifierServer::load_input_images (this=0x555555791ff0, start_index=0, end_index=10, unknown=false) at face_classifier_server_core.cpp:195
195				pReturn = PyObject_CallFunctionObjArgs(this->pPrewhitenFunc, py_imagePath, NULL);
(gdb) quit

```


## Description
Add Large Deformation Diffeomorphic Metric Mapping (LDDMM) to the registration module.

This implements the algorithm in: 
Computing Large Deformation Metric Mappings via Geodesic Flows of Diffeomorphisms - 
https://doi.org/10.1023/B:VISI.0000043755.93987.aa

Some features which are not enabled by default implement the work in: 
3D Mapping of Serial Histology Sections with Anomalies Using a Novel Robust Deformable Registration Algorithm - 
https://doi.org/10.1007/978-3-030-33226-6_18

<!-- If this is a bug-fix or enhancement, state the issue # it closes -->
<!-- If this is a new feature, reference what paper it implements. -->


## Checklist

<!-- It's fine to submit PRs which are a work in progress! -->
<!-- But before they are merged, all PRs should provide: -->
- [x] [Docstrings for all functions](https://github.com/numpy/numpy/blob/master/doc/example.py)
- [x] Gallery example in `./doc/examples` (new features only)
- [ ] Benchmark in `./benchmarks`, if your changes aren't covered by an
  existing benchmark
- [x] Unit tests
- [x] Clean style in [the spirit of PEP8](https://www.python.org/dev/peps/pep-0008/)

<!-- For detailed information on these and other aspects see -->
<!-- the scikit-image contribution guidelines. -->
<!-- https://scikit-image.org/docs/dev/contribute.html -->

## For reviewers

<!-- Don't remove the checklist below. -->
- [ ] Check that the PR title is short, concise, and will make sense 1 year
  later.
- [ ] Check that new functions are imported in corresponding `__init__.py`.
- [ ] Check that new features, API changes, and deprecations are mentioned in
      `doc/release/release_dev.rst`.
- [ ] Consider backporting the PR with `@meeseeksdev backport to v0.14.x`

It's been discussed several times to create a `scikit-image-contrib` (or a better name) repo and package, for high-quality contributions which are not of broad enough interest for scikit-image. An example is https://github.com/scikit-image/scikit-image/pull/4291.

Creating the repo is easy, but several questions need to be addressed.

- Structure of the package: same as scikit-image, with the same submodule names?
- CI: maybe more lightweight? 
- doc: landing page + gallery of examples? (so that it would still be required to have a gallery example when contributing a new function)
- release cycle/process?
- accepted dependencies? (needs to be pip/conda installable on Linux/Mac/Windows, but maybe we can accept more deps than scikit-image)

Etc. Please comment @skimage/core ! The burden of maintaining this package would probably be on us so we would have to find ways to make this more lightweight than for the main package, or it won't be sustainable.


I'm working on bumping the scikit-image version available for Gentoo Linux to the newest one.

The package install seems to work fine, but the test suite fails with numerous plug-in and attribute errors: Here is the full [build.log](https://github.com/scikit-image/scikit-image/files/4036768/build.log).

## Version information
```python
>>> from __future__ import print_function
>>> import sys; print(sys.version)
3.6.10 (default, Jan  6 2020, 17:06:10) 
[GCC 9.1.0]
>>> import platform; print(platform.platform())
Linux-5.2.3-gentoo-23-mars-x86_64-Intel-R-_Core-TM-_i7-8550U_CPU_@_1.80GHz-with-gentoo-2.6
>>> import skimage; print("scikit-image version: {}".format(skimage.__version__))
scikit-image version: 0.16.2
>>> import numpy; print("numpy version: {}".format(numpy.__version__))
numpy version: 1.16.5
```

