This is not really an issue (in the sense that it's a `drat` bug that needs fixing), but more a report on a problem I ran into (as well as others before me #81, #71, #46) and there even exists a (not-accepted) PR for fixing this (among other things): #73.

Following the [hurricaneexposuredata](https://journal.r-project.org/archive/2017/RJ-2017-026/index.html) idea, I set up a gh-pages based drat repository with the following folder structure:

```
|- src
   |- contrib
      |- datapackage_1.0.0.tar.gz
      |- PACKAGES
      |- PACKAGES.gz
      |- PACKAGES.rds
```

and I use this repository in another package by having the following in it's DESCRIPTION

```
Suggests:
  datapackage
Additional_repositories: https://user.github.io/repo-name
```

As `datapackage` does not require compilation (and being a data package, size is not negligible), it does not make sense to add binary sources to the repo. 

Unfortunately, under Win/Mac OS such a setup can cause issues, as `remotes::install_deps()` will fail because `utils::install.packages()` throws a warning. This can be remedied by doing any of

- set `R_REMOTES_NO_ERRORS_FROM_WARNINGS` to `true` (a bit broad, as will apply to all deps)
- you pass `type = "source"`/specify `contriburl` which `remotes::install_deps()` will forward to `utils::install.packages()` (not ideal in CI environments)
- add some empty `PACKAGES` files in the appropriate places below `bin/` (the solution in #73)

Personally, I feel that this should either be mentioned in the docs or that parts of #73 should be reconsidered as it did take some time for me to the to the bottom of this. I'm happy to look into salvaging this aspect of #73. What do you think @eddelbuettel?
Currently, `insertPackages()` silently overwrites an existing `tar.gz` of the same version. This default seems dangerous. Would you support an `overwrite` argument to `insertPackages()`, defaulting to `FALSE`?
Thank for this super handy package.

Is there any appetite for a function that removes completely a package from a drat repo? It is very possible that I am misunderstanding how drat works and if that is the case I apologize.  Right now from this issue #18 , I learned of `pruneRepo()`. So this is great in that I can generate a vector of the package I'd like to remove like so:
```
pruneRepo(repopath = "C:/_dev/GitHub_repos/drat", pkg = "PACKAGE_NAME")
```
Then as recommend I can use git rm to remove the `PACKAGE_NAME.tar.gz` file. But all other elements of the package are left in PACKAGES, PACKAGES.gz, and PACKAGES.rds. Is there any way to remove those? The `remove=TRUE` args of `pruneRepo` seems set up to remove the `*.tar.gz` file but not the other elements.

Again great package, really fills a need. Any insight on this would be much appreciated.
Thanks for this terrifically useful package.

The branch that drat commits, gh-pages, is hardcoded. This is sensible in general, but for user or organization Github pages (i.e. user.github.io) Github requires those files to be stored in the master branch of a repo named user.github.io. Because of the hardcoding, it isn't possible to use drat to create a drat repo in such a Github repo. 

What do you think of adding a field in insertPackage() for branch name, i.e. insertPackage(branch = "master")? Happy to add a PR.
Similar to setting the working directory back to the `curwd` in https://github.com/eddelbuettel/drat/blob/master/R/insertPackage.R#L82 , could the same be done after maybe commit'ing https://github.com/eddelbuettel/drat/blob/master/R/insertPackage.R#L125 . 

It would really be helpful when supplying relative routes for the `repodir` and trying to prune or archive after commit'ing.

Thank you for the awesome package!
- Barret

A package that I am developing is larger than the 100mb limit of GitHub repositories (it contains OpenCV sources). I therefore opted to use git-lfs with my drat repository in order to allow this package to be pushed to my drat repository. Unfortunately it seems that drat does not download the tar.gz of the package when called from R but rather the text pointer created by git-lfs and pointing toward the actual location of the tar.gz. 

I've created a simple `drat` repository [here](https://github.com/kevinushey/drat), with a call to `drat::initRepo()` and then `drat::insertPackage("sashimi_0.0.1.tar.gz")` for a locally built package `sashimi`. All is well with:

```
install.packages("sashimi", type = "source")
```

However (as is default on non-Linux systems), using `type = "both"`

```
install.packages("sashimi", type = "both")
```

gives a warning:

```
curl: (22) The requested URL returned error: 404 Not Found
Warning in read.dcf(file = tmpf) :
  cannot open compressed file '/var/folders/tm/5dt8p5s50x58br1k6wpqnwx00000gn/T//RtmpyPMPgH/file9d6b4875028d', probable reason 'No such file or directory'
Warning: unable to access index for repository http://kevinushey.github.io/drat/bin/macosx/mavericks/contrib/3.2:
  cannot open the connection
```

Not surprising since `http://kevinushey.github.io/drat/bin/macosx/mavericks/contrib/3.2` does not exist.

It would be useful if `drat` populated the common binary 'arms' of the repository with an empty `PACKAGES` file by default, to avoid this warning.

Packrat has some repository management tools that help do this: 

https://github.com/rstudio/packrat/blob/master/R/cranlike-repositories.R#L31-L44
https://github.com/rstudio/packrat/blob/master/R/cranlike-repositories.R#L58-L71

Would you be willing to accept a PR that created skeletons for these paths?
