If I call an interactor like so:

```ruby
MyInteractor.call(something)
```

rather than the correct:

```ruby
MyInteractor.call(something: "something")
```

Then I get a semi-cryptic error like:

```
NoMethodError:
       undefined method `each_pair' for #<MyInteractor:0x00007fa2fc407350>
```

It's pretty easy to see that I just called the interactor incorrectly, but it seems like it would be easy to check the provided parameters and raise a helpful error.
I want to log when my Interactor fails, is there a way to do it from inside of the class?

Thanks!


### What's the reason for this feature?

Sometimes we may have a situation where our interactors should fail in case there is an exception raised. Currently, we have to rescue exceptions in order to fail the context. consider the following example:
```ruby
class MyInteractor
  include Interactor

  def call
    method_raising_an_exception
  rescue NameError => e
    ExceptionLogger.log(e)
    context.fail!(error: e)
  end
end
```
This example above is simple, but it may get more complex when you have to rescue multiple different exceptions in the same interactor class in different places. However, what you actually want is to fail the context on those exceptions. And perhaps log them, so that they don't halt your program, but don't go unnoticed either.

My proposal: define what kinds of exceptions must be rescued, and provide a proc, if necessary, with custom behaviour for rescued exception(s) handling.
```ruby
class MyInteractor
  include Interactor

  fail_on_exeption NameError, exception_handler: ->(e) { ExceptionLogger.log(e) }

  def call
    method_raising_an_exception
  end
end 
```
`NameError` is silly, I only use it to make my example obvious. In real life, you would probably rescue from some other errors or your own custom error...
Mostly everyone knows ActiveRecord and their [callbacks](https://guides.rubyonrails.org/active_record_callbacks.html#available-callbacks).
Why do you use different order? It creates some misunderstanding
This allows to have more control on how the context works. For example which attributes are required, it's default values or validation.

Here's a short sample for illustration:

```ruby
class MyInteractor
  include Interactor

  self.context_class = Class.new do
    include Context::Mixin

    attr_reader :foo
    attr_accessor :my_export

    def initialize(foo: nil)
      @foo = foo
    end
  end

  def call
    if context.foo
      context.my_export = "Got: " + context.foo.to_s
    else
      context.fail!(my_export: "Error")
    end
  end
end

puts MyInteractor.call(foo: "Hi").my_export # "Got: Hi"
puts MyInteractor.call.my_export # "Error"
MyInteractor.call(unexpected: "information") # ArgumentError (unknown keyword: unexpected)
```

This PR probably lacks quite some documentation etc. I just wanted to get your input if this is something you'd consider. (Obviously I'm happy to put more work into this if you do)
Where would organizers go?
# Context

I've noticed in our code base that we had cases where Interactor was encapsulating more interactors and calling them via `.call!`. One of the interactors was raising `Interactor::Failure` exception, but because parent interactor was invoked via `.call` context `.success?` was still reporting `true`.

I believe that is wrong behavior and since `.call` is not raising exception it at least should return `false` when `.success?` is invoked.

# Steps to reproduce

```ruby
  class ParentInteractor
    include Interactor

    def call
      InteractorWithError.call!
    end
  end

  class InteractorWithError
    include Interactor

    def call
      raise Interactor::Failure.new('test')
    end
  end

  test 'interactor still reports success after it failed' do
    context = ParentInteractor.call
    assert context.failure?
    assert_not context.success?
  end
```
Fixes https://github.com/collectiveidea/interactor/issues/166
Hey,

I saw there're closed issues asking about how to test organizers (https://github.com/collectiveidea/interactor/issues/161) and I also found this: https://stackoverflow.com/questions/43984783/how-do-we-test-interactor-organizers-using-rspec

If you agree that this is the way could you include an example in the readme, or would you accept a pr about it?
Per the documentation:

```
This works because the call class method swallows exceptions.
```

Unless I'm missing something, any errors should be swallowed by `call`, but they're being raised for me unless I manually catch the error inside call and throw it with `fail!`