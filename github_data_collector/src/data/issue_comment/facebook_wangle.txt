Thank you for sharing your work.
I have issue as below.

~
[ 47%] Linking CXX executable bin/FilePollerTest
[ 47%] Built target FilePollerTest
[ 48%] Building CXX object CMakeFiles/SSLContextManagerTest.dir/ssl/test/SSLContextManagerTest.cpp.o
/home/xxx/xxx/xxx/wangle/wangle/ssl/test/SSLContextManagerTest.cpp: In member function ‘virtual void wangle::SSLContextManagerTest_DISABLED_TestSessionContextIfSupplied_Test::TestBody()’:
/home/xxx/xxx/xxx/wangle/wangle/ssl/test/SSLContextManagerTest.cpp:139:19: error: aggregate ‘wangle::SSLCacheOptions cacheOptions’ has incomplete type and cannot be defined
   SSLCacheOptions cacheOptions;
                   ^
/home/xxx/xxx/xxx/wangle/wangle/ssl/test/SSLContextManagerTest.cpp: In member function ‘virtual void wangle::SSLContextManagerTest_DISABLED_TestSessionContextIfSessionCacheAbsent_Test::TestBody()’:
/home/xxx/xxx/xxx/wangle/wangle/ssl/test/SSLContextManagerTest.cpp:171:19: error: aggregate ‘wangle::SSLCacheOptions cacheOptions’ has incomplete type and cannot be defined
   SSLCacheOptions cacheOptions;
                   ^
CMakeFiles/SSLContextManagerTest.dir/build.make:62: recipe for target 'CMakeFiles/SSLContextManagerTest.dir/ssl/test/SSLContextManagerTest.cpp.o' failed
make[2]: *** [CMakeFiles/SSLContextManagerTest.dir/ssl/test/SSLContextManagerTest.cpp.o] Error 1
CMakeFiles/Makefile2:104: recipe for target 'CMakeFiles/SSLContextManagerTest.dir/all' failed
make[1]: *** [CMakeFiles/SSLContextManagerTest.dir/all] Error 2
Makefile:138: recipe for target 'all' failed
make: *** [all] Error 2

Thanks.
==> Starting build()...
-- The CXX compiler identification is GNU 9.2.0
-- The C compiler identification is GNU 9.2.0
-- Check for working CXX compiler: /bin/c++
-- Check for working CXX compiler: /bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /bin/cc
-- Check for working C compiler: /bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Found folly: /usr
-- Found fizz: /usr
-- Found Boost: /lib64/cmake/Boost-1.71.0/BoostConfig.cmake (found version "1.71.0") found components:  system thread filesystem regex context program_options 
-- Found OpenSSL: /usr/lib/libcrypto.so (found version "1.1.1d")  
-- Found glog: /usr/lib/libglog.so  
-- Found gflags from package config
-- gflags_CONFIG=/lib64/cmake/gflags/gflags-config.cmake
-- Found libevent: /usr/lib/libevent.so
-- Found double_conversion: /usr/lib/libdouble-conversion.so  
-- Found Threads: TRUE  
-- Found librt: /usr/lib/librt.so  
-- Performing Test HAVE_CXX_ATOMICS_WITHOUT_LIB
-- Performing Test HAVE_CXX_ATOMICS_WITHOUT_LIB - Success
-- Looking for SSL_SESSION_dup in ssl
-- Looking for SSL_SESSION_dup in ssl - found
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
-- Found gmock via config, defines=, include=/usr/include, libs=GTest::gmock_main;GTest::gmock;GTest::gtest
CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
Please set them or make sure they are set and tested correctly in the CMake files:
/data/aurbuild/yaourt-tmp-root/aur-wangle/src/wangle-2019.10.14.00/wangle/Boost_INCLUDE_DIR
   used as include directory in directory /data/aurbuild/yaourt-tmp-root/aur-wangle/src/wangle-2019.10.14.00/wangle

-- Configuring incomplete, errors occurred!
See also "/data/aurbuild/yaourt-tmp-root/aur-wangle/src/wangle-2019.10.14.00/wangle/build/CMakeFiles/CMakeOutput.log".
See also "/data/aurbuild/yaourt-tmp-root/aur-wangle/src/wangle-2019.10.14.00/wangle/build/CMakeFiles/CMakeError.log".
==> ERROR: A failure occurred in build().
    Aborting...


```
[100%] Linking CXX executable bin/TLSCredProcessorTest
lib/libwangle.a(TLSCredProcessor.cpp.o): In function `std::vector<folly::dynamic, std::allocator<folly::dynamic> >& folly::dynamic::get<std::vector<folly::dynamic, std::allocator<folly::dynamic> > >()':
TLSCredProcessor.cpp:(.text._ZN5folly7dynamic3getISt6vectorIS0_SaIS0_EEEERT_v[_ZN5folly7dynamic3getISt6vectorIS0_SaIS0_EEEERT_v]+0x65): undefined reference to `folly::dynamic::TypeInfo<std::vector<folly::dynamic, std::allocator<folly::dynamic> > >::name'
lib/libwangle.a(TLSCredProcessor.cpp.o): In function `folly::dynamic::ObjectImpl& folly::dynamic::get<folly::dynamic::ObjectImpl>()':
TLSCredProcessor.cpp:(.text._ZN5folly7dynamic3getINS0_10ObjectImplEEERT_v[_ZN5folly7dynamic3getINS0_10ObjectImplEEERT_v]+0x65): undefined reference to `folly::dynamic::TypeInfo<folly::dynamic::ObjectImpl>::name'
lib/libwangle.a(TLSCredProcessor.cpp.o): In function `std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& folly::dynamic::get<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >()':
TLSCredProcessor.cpp:(.text._ZN5folly7dynamic3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_v[_ZN5folly7dynamic3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERT_v]+0x65): undefined reference to `folly::dynamic::TypeInfo<std::__cxx11::basic_string<cha
r, std::char_traits<char>, std::allocator<char> > >::name'
collect2: error: ld returned 1 exit status
CMakeFiles/TLSCredProcessorTest.dir/build.make:154: recipe for target 'bin/TLSCredProcessorTest' failed
make[2]: *** [bin/TLSCredProcessorTest] Error 1
CMakeFiles/Makefile2:622: recipe for target 'CMakeFiles/TLSCredProcessorTest.dir/all' failed
make[1]: *** [CMakeFiles/TLSCredProcessorTest.dir/all] Error 2
Makefile:140: recipe for target 'all' failed
make: *** [all] Error 2
```

I feel this is related the constexpr anem at https://github.com/facebook/folly/blob/master/folly/dynamic.cpp
```
#define FOLLY_DYNAMIC_DEF_TYPEINFO(T)                 \
  constexpr const char* dynamic::TypeInfo<T>::name;   \
  constexpr dynamic::Type dynamic::TypeInfo<T>::type; \
  //
```

If the code is designed in this way, will compiler or linker still expose the definition? I tried to move the definition to folly/dynamic-int.h. The error was gone. However, is this the correct fix? 

Does anyone else have the similar issue?
Reduces compiled size slightly.
This is pull request was created automatically because we noticed your project was missing a Code of Conduct file.

Code of Conduct files facilitate respectful and constructive communities by establishing expected behaviors for project contributors.

This PR was crafted with love by Facebook's Open Source Team.
Hello Wanglers
 If I had to share some common state between filters in the Pipeline what is the recommended way to do this? Say, the first filter unwraps a network packet which contains header with information about the entire connection duration that can be shared between different filters, how do I extract this information/header in one filter and populate a map or something that can be used by other filters.

thanks
/Users/lijun/Downloads/wangle-2019.01.21.00/wangle/util/FilePoller.cpp:149:13: warning: 'stat64' is deprecated: first deprecated
      in macOS 10.6 [-Wdeprecated-declarations]
  int ret = stat64(path.c_str(), &info);
            ^
/usr/include/sys/stat.h:402:5: note: 'stat64' has been explicitly marked deprecated here
int     stat64(const char *, struct stat64 *) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5,__MAC_10_6,__IPHONE_NA,__IPHONE_NA);
        ^
/Users/lijun/Downloads/wangle-2019.01.21.00/wangle/util/FilePoller.cpp:156:37: error: no member named 'st_mtim' in 'stat64'
          std::chrono::seconds(info.st_mtim.tv_sec) +
                               ~~~~ ^
/Users/lijun/Downloads/wangle-2019.01.21.00/wangle/util/FilePoller.cpp:157:41: error: no member named 'st_mtim' in 'stat64'
          std::chrono::nanoseconds(info.st_mtim.tv_nsec))}
I want to implement simple SIP frame decoder, as you know SIP protocol is similar to HTTP protocol.
From the docs I think I should implement `ByteToMessageDecoder`. I also inspects proxygen source but I didn't find similar approach for HTTP messages.

What is the best way to handle SIP(HTTP) messages with wangle? Is implementing `ByteToMessageDecoder` a good approach?
Hi Team,

I used clang 6.0 and ASAN to build wangle and multiple memory leaks was detected in `./wangle/wangle/bin/BootstrapTest` 

This is the ASAN information:
```
==3588==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 264 byte(s) in 11 object(s) allocated from:
    #0 0x7fbabf31a458 in operator new(unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe0458)
    #1 0x555d68e82457 in TestClientPipelineFactory::newPipeline(std::shared_ptr<folly::AsyncTransportWrapper>) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x5af457)
    #2 0x555d68f0fde8 in wangle::BaseClientBootstrap<wangle::Pipeline<folly::IOBufQueue&, std::unique_ptr<folly::IOBuf, std::default_delete<folly::IOBuf> > > >::makePipeline(std::shared_ptr<folly::AsyncTransportWrapper>) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x63cde8)
    #3 0x555d68f0d4eb in wangle::ClientBootstrap<wangle::Pipeline<folly::IOBufQueue&, std::unique_ptr<folly::IOBuf, std::default_delete<folly::IOBuf> > > >::ConnectCallback::connectSuccess() (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x63a4eb)
    #4 0x7fbabeb53b3d in folly::AsyncSocket::invokeConnectSuccess() /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/AsyncSocket.cpp:2769
    #5 0x7fbabeb508f8 in folly::AsyncSocket::handleConnect() /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/AsyncSocket.cpp:2281
    #6 0x7fbabeb4f54b in folly::AsyncSocket::handleWrite() /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/AsyncSocket.cpp:2039
    #7 0x7fbabeb4d7a1 in folly::AsyncSocket::ioReady(unsigned short) /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/AsyncSocket.cpp:1754
    #8 0x7fbabeb54e7c in folly::AsyncSocket::IoHandler::handlerReady(unsigned short) /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/AsyncSocket.h:1028
    #9 0x7fbabeb7d440 in folly::EventHandler::libeventCallback(int, short, void*) /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/EventHandler.cpp:161
    #10 0x7fbaba86fa10  (/usr/lib/x86_64-linux-gnu/libevent-2.1.so.6+0x1ea10)

Direct leak of 64 byte(s) in 1 object(s) allocated from:
    #0 0x7fbabf318b50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x555d68e6a2f8 in folly::checkedMalloc(unsigned long) /usr/local/include/folly/memory/Malloc.h:228
    #2 0x7fbabeb0453d in folly::IOBuf::operator new(unsigned long) /home/input0/Desktop/proxygen/proxygen/folly/folly/io/IOBuf.cpp:135
    #3 0x7fbabeb0890d in std::_MakeUniq<folly::IOBuf>::__single_object std::make_unique<folly::IOBuf, folly::IOBuf::CreateOp, unsigned long&>(folly::IOBuf::CreateOp&&, unsigned long&) /usr/include/c++/7/bits/unique_ptr.h:825
    #4 0x7fbabeb04cca in folly::IOBuf::createSeparate(unsigned long) /home/input0/Desktop/proxygen/proxygen/folly/folly/io/IOBuf.cpp:269
    #5 0x7fbabeb04aec in folly::IOBuf::create(unsigned long) /home/input0/Desktop/proxygen/proxygen/folly/folly/io/IOBuf.cpp:242
    #6 0x7fbabeb0a772 in folly::IOBufQueue::preallocateSlow(unsigned long, unsigned long, unsigned long) /home/input0/Desktop/proxygen/proxygen/folly/folly/io/IOBufQueue.cpp:214
    #7 0x555d68e6eb04 in folly::IOBufQueue::preallocate(unsigned long, unsigned long, unsigned long) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x59bb04)
    #8 0x555d68e78271 in folly::AsyncUDPServerSocket::getReadBuffer(void**, unsigned long*) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x5a5271)
    #9 0x7fbabeb6492e in folly::AsyncUDPSocket::handleRead() /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/AsyncUDPSocket.cpp:551
    #10 0x7fbabeb6422a in folly::AsyncUDPSocket::handlerReady(unsigned short) /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/AsyncUDPSocket.cpp:461
    #11 0x7fbabeb7d440 in folly::EventHandler::libeventCallback(int, short, void*) /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/EventHandler.cpp:161
    #12 0x7fbaba86f8f7  (/usr/lib/x86_64-linux-gnu/libevent-2.1.so.6+0x1e8f7)

Direct leak of 24 byte(s) in 1 object(s) allocated from:
    #0 0x7fbabf31a458 in operator new(unsigned long) (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xe0458)
    #1 0x555d68e82457 in TestClientPipelineFactory::newPipeline(std::shared_ptr<folly::AsyncTransportWrapper>) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x5af457)
    #2 0x555d68f0fde8 in wangle::BaseClientBootstrap<wangle::Pipeline<folly::IOBufQueue&, std::unique_ptr<folly::IOBuf, std::default_delete<folly::IOBuf> > > >::makePipeline(std::shared_ptr<folly::AsyncTransportWrapper>) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x63cde8)
    #3 0x555d68f0d4eb in wangle::ClientBootstrap<wangle::Pipeline<folly::IOBufQueue&, std::unique_ptr<folly::IOBuf, std::default_delete<folly::IOBuf> > > >::ConnectCallback::connectSuccess() (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x63a4eb)
    #4 0x7fbabeb53b3d in folly::AsyncSocket::invokeConnectSuccess() /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/AsyncSocket.cpp:2769
    #5 0x7fbabeb4699e in folly::AsyncSocket::connect(folly::AsyncSocket::ConnectCallback*, folly::SocketAddress const&, int, std::map<folly::AsyncSocket::OptionKey, int, std::less<folly::AsyncSocket::OptionKey>, std::allocator<std::pair<folly::AsyncSocket::OptionKey const, int> > > const&, folly::SocketAddress const&) /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/AsyncSocket.cpp:597
    #6 0x555d68e91ef3 in wangle::ClientBootstrap<wangle::Pipeline<folly::IOBufQueue&, std::unique_ptr<folly::IOBuf, std::default_delete<folly::IOBuf> > > >::connect(folly::SocketAddress const&, std::chrono::duration<long, std::ratio<1l, 1000l> >)::{lambda()#1}::operator()() const (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x5beef3)
    #7 0x555d68ebf1fd in void folly::detail::function::FunctionTraits<void ()>::callSmall<wangle::ClientBootstrap<wangle::Pipeline<folly::IOBufQueue&, std::unique_ptr<folly::IOBuf, std::default_delete<folly::IOBuf> > > >::connect(folly::SocketAddress const&, std::chrono::duration<long, std::ratio<1l, 1000l> >)::{lambda()#1}>(folly::detail::function::Data&) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x5ec1fd)
    #8 0x555d68e8511f in folly::detail::function::FunctionTraits<void ()>::operator()() (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x5b211f)
    #9 0x7fbabeb6b479 in folly::EventBase::runImmediatelyOrRunInEventBaseThreadAndWait(folly::Function<void ()>) /home/input0/Desktop/proxygen/proxygen/folly/folly/io/async/EventBase.cpp:629
    #10 0x555d68e9251f in wangle::ClientBootstrap<wangle::Pipeline<folly::IOBufQueue&, std::unique_ptr<folly::IOBuf, std::default_delete<folly::IOBuf> > > >::connect(folly::SocketAddress const&, std::chrono::duration<long, std::ratio<1l, 1000l> >) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x5bf51f)
    #11 0x555d68e64c2c in Bootstrap_UnixServer_Test::TestBody() /home/input0/Desktop/wangle/wangle/bootstrap/test/BootstrapTest.cpp:395
    #12 0x555d690d36f2 in void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x8006f2)
    #13 0x555d690cdec0 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x7faec0)
    #14 0x555d690b1f0b in testing::Test::Run() (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x7def0b)
    #15 0x555d690b2841 in testing::TestInfo::Run() (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x7df841)
    #16 0x555d690b2ec3 in testing::TestCase::Run() (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x7dfec3)
    #17 0x555d690b9d8f in testing::internal::UnitTestImpl::RunAllTests() (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x7e6d8f)
    #18 0x555d690d4750 in bool testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x801750)
    #19 0x555d690cec36 in bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x7fbc36)
    #20 0x555d690b8953 in testing::UnitTest::Run() (/home/input0/Desktop/wangle/wangle/bin/BootstrapTest+0x7e5953)
    #21 0x555d68f4876c in RUN_ALL_TESTS() /usr/local/include/gtest/gtest.h:2233
    #22 0x555d68f486b2 in main /home/input0/Desktop/wangle/wangle/test/TestMain.cpp:30
    #23 0x7fbabbe22b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
....
SUMMARY: AddressSanitizer: 19284 byte(s) leaked in 172 allocation(s).
```

Please refer to [memoryleak.txt](https://github.com/facebook/wangle/files/2761077/memoryleak.txt) for full ASAN leaks.
