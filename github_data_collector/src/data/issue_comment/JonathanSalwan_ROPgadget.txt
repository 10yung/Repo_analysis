```
$ ROPgadget --binary dbghelp.dll --badbytes "00|08|0d|20" --ropchain
...
...
Unique gadgets found: 12635

[Error] ROPMaker.__handlerArch - Arch not supported yet for the rop chain generation
$ ROPgadget -v
Version:        ROPgadget v5.9
Author:         Jonathan Salwan
Author page:    https://twitter.com/JonathanSalwan
Project page:   http://shell-storm.org/project/ROPgadget/
```
[dbghelp.dll.zip](https://github.com/JonathanSalwan/ROPgadget/files/4013230/dbghelp.dll.zip)


This is an x86 binary. Attached.
Hi,

I added a `--silent` option which disables printing during analysis. The flag is off by default in order to keep the current behaviour.

This is handy when integrating ropgadget into my own scripts in a programmatic manner to not clutter the output.


Hi,

I used `pattern_create` with peda a lot, and I could redirect its output to a file for example, and run the program with that file as input, however, I can't find the same functionality in pwndbg. `cyclic` from pwntools is great, but is there a way to redirect or pipe its output? For now copy/paste works, but I was wondering if there was another way, maybe a way to do `cyclic 200 | run`, or `cyclic 200 > file.txt`?

Best,

Florian
Now `multibr` is off by default, we are missing vital gadgets like `syscall; ret`, `int 0x80;ret`, `call xxxxx;xx;xx; ret`. 
Since the documentation `Enable multiple branch gadgets` is too vague. I didn't understand it before I read the source code.

And I don't quite understand why it is off by default. I think we should provide as many gadgets as possible and let users decide what to use, right? Especially this option affects so much.
i am trying to built ropchain on 64bit pe file,
but its giving 32bit instruction set only?
Excuse me，Can ROPgadget support ELF on RISC-V architectures？ @zachriggle @wuyongzheng 
During recent Hitcon Quals, I've noticed that gadgets ending with `syscall` are not found. It does not work even with version `5.4` which is supposed to support it(#66).

    $ ROPgadget --version
    Version:        ROPgadget v5.4
    Author:         Jonathan Salwan
    Author page:    https://twitter.com/JonathanSalwan
    Project page:   http://shell-storm.org/project/ROPgadget/
    $ ROPgadget --binary vdso.dump | grep syscall
    $ 

Running objump on the binary:

    $ objdump -Mintel -D vdso.dump | grep -B 1 syscall
    b5b:   b8 e4 00 00 00          mov    eax,0xe4
    b60:   0f 05                   syscall 
    --
    edb:   4c 89 df                mov    rdi,r11
    ede:   0f 05                   syscall 
    $ 

It does not work regardless of Elf/raw mode.
Attached is vdso.so (base64 encoded):

[vdso.b64.txt](https://github.com/JonathanSalwan/ROPgadget/files/1464141/vdso.b64.txt)


When buildings ropchains for shared objects, how does aslr is bypassed by your tool ?

Also, what does`[-] Error - Can't find a writable section`means.
By calling `sys.exit` directly from `Args.__parse`, which is called from the constructor you make it difficult for one to programmatically build args.

I would suggest instead having `__parse` raise an exception. This could be explicitly handled in any caller, the only one in your library itself being the CLI.

It would basically be changing 5 exit lines to raise Exceptions instead, and `ropgadget.main` to catch this exception. Instead of printing the error message directly you could of course also pass the message to the Exception's constructor and print it in `main`.
It seems that we should never see the following:


```
0x0000000000409328 : ldp x20, x19, [sp], #0x20 ; ret ; adrp x8, #0x52c000 ; add x8, x8, #0x1c0 ; add x8, x8, #0x10 ; str x8, [x1] ; ldr x8, [x0, #8] ; str x8, [x1, #8] ; ret
```

Note that there are two `ret` gadgets.

The full sequence per `objdump` is:

```
  409328:	f4 4f c2 a8 	ldp	x20, x19, [sp], #32
  40932c:	c0 03 5f d6 	ret
  409330:	08 09 00 f0 	adrp	x8, #1191936
  409334:	08 01 07 91 	add	x8, x8, #448
  409338:	08 41 00 91 	add	x8, x8, #16
  40933c:	28 00 00 f9 	str		x8, [x1]
  409340:	08 04 40 f9 	ldr	x8, [x0, #8]
  409344:	28 04 00 f9 	str	x8, [x1, #8]
  409348:	c0 03 5f d6 	ret
```