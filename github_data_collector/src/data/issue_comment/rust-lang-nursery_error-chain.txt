#280 reformatted things, but without explicit work it'll drift out of line again. This PR checks that.
Hello, the current `rust-lang-nursery` organisation is considered deprecated, and the Rust Programming Language organisation is trying to consolidate managing Rust's GitHub organisations, as such we'd like you to consider moving your repository to the main `rust-lang` organisation instead. 

### How Do I Move To `rust-lang`?
You won't be able to transfer your repository directly, you'll need to transfer your repository to @Mark-Simulacrum, who will then move your repository to the `rust-lang` organisation.

### Deprecating
If you no longer intend to maintain this repository, please let us know and we will take of deprecating the project.
I have a library project where I would like to force documentation (and detect ommissions) using the mechanism of putting this directing in the crate root

`#![deny(missing_docs)]`

However, I get these errors reported, originating in error_chain.

```
error: missing documentation for a variant
  --> src/lib.rs:64:1
   |
64 | / error_chain! {
65 | |     types {
66 | |         Error, ErrorKind, ResultExt, Result;
67 | |     }
...  |
73 | |     }
74 | | }
   | |_^
   |
note: lint level defined here
  --> src/lib.rs:1:9
   |
1  | #![deny(missing_docs)]
   |         ^^^^^^^^^^^^
   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)
```

I have tried adding `#[allow(missing_docs)]` at various places before/within the error_chain blocks, without success.

Anyone know how this can be done?
https://travis-ci.com/rust-lang-nursery/error-chain/jobs/240939148#L279
https://travis-ci.com/rust-lang-nursery/error-chain/jobs/240939141#L293

error: a method with this name may be added to the standard library in the future

   --> src/lib.rs:657:41

    |

657 |         if let Some(backtrace) = self.0.backtrace() {

    |                                         ^^^^^^^^^

    |

    = note: `-D unstable-name-collisions` implied by `-D warnings`

    = warning: once this method is added to the standard library, the ambiguity may cause an error or change in behavior!

    = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>

    = help: call with fully qualified syntax `ChainedError::backtrace(...)` to keep using the current method

    = help: add `#![feature(backtrace)]` to the crate attributes to enable `std::error::Error::backtrace`
For example:
```
errors {
        #[doc = "Response not complete, first is protocol status and second is app status, see fastcgi protocol."]
        EndRequest(protocol_status: ProtocolStatus, app_status: u32) {
            description("End request error."),
            display(match protocol_status {
                ProtocolStatus::CantMpxConn => "This app can't multiplex [CantMpxConn]; AppStatus: {}",
                ProtocolStatus::Overloaded => "New request rejected; too busy [OVERLOADED]; AppStatus: {}",
                ProtocolStatus::UnknownRole => "Role value not known [UnknownRole]; AppStatus: {}",
                _ => unreachable!(),
            }, app_status),
        }

}
```
But now, `display` not support first argument is string literal, so more complex expression of `display` is not work, is there a choice to support it?
Moving them out of bin would help us to reduce number of downstream changes in error-chain packaging in Fedora.

Thanks!
https://travis-ci.com/rust-lang-nursery/error-chain/jobs/205173078
 |
100 |             Symbol::Dladdr(ref s) => return s.addr(),
    |                                             ^^^^^^^^ expected enum `libc::c_void`, found enum `std::os::raw::c_void`
    |
    = note: expected type `core::option::Option<*mut libc::c_void>`
               found type `core::option::Option<*mut std::os::raw::c_void>`
error[E0308]: mismatched types
So `quick_main` was useful before Rust [1.26](https://blog.rust-lang.org/2018/05/10/Rust-1.26.html#main-can-return-a-result), but now is there a use case for it?  Should we deprecate its use in `0.13`?
To avoid mistakes with programmers with little experience. It would be much more efficient to decide what to do with this crate and give alternatives. It forces you to understand something that should not be used, since currently there are much more efficient ways of doing the same work.

So, from experience, I would specify all this in the README or some visible place.