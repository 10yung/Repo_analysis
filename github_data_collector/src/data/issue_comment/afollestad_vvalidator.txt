Resolved issue #17 
I stumbled across your github account recently and I'm currently rocking at least 3 of your libraries (including this one)!

I'd like to request 2 new features though:

**1.** Pure for the sake of completeness, you should add an assertion for phone numbers  
An almost exact duplicate of `isEmail()` this assertion (`isPhone`?) could use the `Patterns.PHONE` regex

**2.** A more serious request

Is it possible to add a native assertion for input & inputLayout to compare two fields?  
For example, when you have a field *Password* and *PasswordConfirm*, the second one could be compared to match.

This one could be `compareTo(view: EditText)` where the param expects the EditText or TextInputLayout to compare to (e.g. the Password field)  
Additionally, it could have an `.ignoreCase()` option

I can create a pull request myself, but I don't have much time right now (as I'm working on a project for school)
Hi, I am currently using your library, I found it really nice to use, but I am missing internalization support.

Currently default messages are hard-coded in English, but to offer some translations, I am seeing a few problems:

1. Without changing internal code, using `Assertion::description` method, I cannot access the assertion state to offer a different description to each constraint, so I cannot replace, for example, `LengthAssertion` descriptions with it;
2. When subclassing `Assertion` itself to provide my own implementation, I cannot access `ValidationContainer::getString` as it is `internal`, that means I cannot provide internalization myself in my own subclasses, at least, not without hacks.

With above in mind, my current proposal is:

- [x] Change `ValidationContainer::getString` visibility from `internal` to `public`;
- [x] Provide a `ValidationContainer::getString` variant that accepts extra arguments to format the string;
- [ ] Migrate current default descriptions to StringRes, so people can submit translations.

I'd like to discuss what you think about it, or if you have another plans, with a more richer solution, but I can submit a PR myself, if you think its good to go.
it would be nice if you can add method to override error message in global function, so i wouldn't use `.description(....)` every time i make a validation. because in my requirement

example 
```
        form {
            inputLayout(R.id.til_email) {
                isNotEmpty().description("Data tidak boleh kosong")
                isEmail().description("Format email salah")
            }

            inputLayout(R.id.til_pasword) {
                isNotEmpty().description("Data tidak boleh kosong")
            }

            submitWith(R.id.btn_submit) {

            }
        }
```
if i have global function to set error message for spesific validation it will help me so much.