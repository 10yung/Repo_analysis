## Why

- The 2.1.0 doesn't work with the new SassC version (Rails 6.0)

- Resolve #233 

- Resolve #234 

## What happened

Using the **Tilt[scss]** as the **scss_template**

## Insight

Currently, the new **sassc-rails** version doesn't rely on Tilt anymore, [it relies on Sprockets::SassProcessor]( https://github.com/sass/sassc-rails/blob/master/lib/sassc/rails/template.rb#L8), it's another dependency so our gem doesn't work anymore.

On the previous **sass-rails** version, the SassTemplate is [inherited from the Tilt::Template](https://github.com/rails/sass-rails/blob/5-0-8/lib/sass/rails/template.rb#L9)

![image](https://user-images.githubusercontent.com/11751745/67505619-d126b880-f6b5-11e9-95e4-cba23eac30b9.png)


## Proof Of Work

**Before**

<img width="1421" alt="Screen Shot 2019-10-24 at 23 07 29" src="https://user-images.githubusercontent.com/11751745/67505131-e6e7ae00-f6b4-11e9-9e16-6e9ba6117221.png">



**After**

<img width="1346" alt="Screen Shot 2019-10-24 at 23 09 50" src="https://user-images.githubusercontent.com/11751745/67505102-d7686500-f6b4-11e9-9e44-1286890ee22a.png">

Getting ActionView::Template::Error (wrong number of arguments (given 2, expected 0..1) after bundle update

I ran bundle update in my project and it updated several gems. once I tried to run 'rails s' and open the site in localhost it gave me this error.

"Showing ../_head.html.erb where line #12 raised:
wrong number of arguments (given 2, expected 0..1)

10. <%= metamagic site: "Title", title: -> { title.include?(site) ? title : "#{title} - #{site}" if title} %>
11. <%= include_gon %>
12. <%= favicon_link_tag 'favicon.ico' %>
13. <%= csrf_meta_tags %>
14. <%= stylesheet_link_tag 'application', media: 'all' %>"

My system configurations are<
rbenv 1.1.2-2-g4e92322
ruby 2.5.1p57
Bundler version 1.17.2
Rails 5.2.2

I have noticed that livingstyleguide is updated to 2.1.0. Once I have build the application without the livingstyleguide gem, all seems fine. And I when I have updated my Gemfile to install 2.0.3 version, again all seems fine. Looks like a issue with using 2.1.0.

Hey there :wave:

#232 made the change from sass to sassc, however it also adds an implicit dependency to sassc-rails here: https://github.com/livingstyleguide/livingstyleguide/blob/fc9564f2c0c7ee93c9b0925c3715bbb3beb79cfc/lib/livingstyleguide/integration/rails.rb#L9

If you update from 2.0.3 to 2.1.0 and don't have sassc-rails installed, your app will break with:

```
NameError:
  uninitialized constant SassC::Rails
```

Since sassc-rails doesn't work out of the box for one of the apps I'm working on, I'll downgrade LSG to 2.0.3 for now until I have time to investigate further :)

Have a great day all around!
Writing CSS with
```css
@scss { ... }
```
in a `.html.lsg` file using `crlf` line endings results in plain text being rendered to the html, and importing a `.lsg` partial that uses that notation results in
```
Sprockets::FileNotFound - couldn't find file '.../app/assets/stylesheets/styleguide/{'
```
This is only really an issue for Windows users and we have Microsoft to thank for that.


Replacing all newlines `\n` in `COMMANDS_REGEXP` with `(\r?\n)` seems to fix it, but there's probably a better solution.
Hello first of all I really enjoy this style guide generator, very well thought out and easy to work. 
I am running into an issue where my style guide is getting rendered twice directly on top of each other. I've posted what I think is the most relevant bits of code, any ideas as to why this would be happening would be very helpful. 

Please note that i'm using `"""` for the triple backtick in my files.

```
styleguide.html.lsg
@sass application.sass
@title Style Guide

@import **/*.lsg


button.lsg
# Buttons
"""
@type slim
a.btn.btn-primary Totez
a.btn.btn-secondary Secondary
a.btn.btn-default Default
a.btn.btn-ghost Ghost
"""

color.lsg
# Colors

===

The top row is our brand colors. Beyond that are a number of colors we have used throughout the app.
Please note that we have a lot of grays

@colors {
  - $brand-primary-color $brand-secondary-color $brand-tertiary-color -
  $deep-cerulean $bondi-blue $mariner $cerulean-blue $cornflower-blue
  $chestnut-rose $red $green $java-green $zero-color
  $silver-sand $jumbo-grey $thunder $mine-shaft $silver
  $gray $silver-chalice $salt-box $gallery-grey $quill-grey
  $dusty-gray $boulder-gray $alto-gray $tundora $tuatara
  $nero $black $dove-gray $wild-sand-gray $shark
  - $rat $product-container-background-color $mercury -
}
```

  
I noticed in the README that you can use views inside of livingstyleguide, but had issues actually getting them to work.

My typical Ruby on Rails code that I am trying to emulate is
```
<%= render "shared/user_box_horizontal", user: User.all.first, free: true %>
```

I attempted to implement this in living style guide by doing:
```
@use views/shared/_user_box_horizontal.html.erb, user: User.all.first, free: true
```

But this no matter what directory or what view I try to point that to, I always get a "No such file or directory" error. This occurs even if I remove the variables at the end, since I'm pretty sure I have to refactor that syntax somewhat. 
The next version of [sprockets](https://github.com/rails/sprockets), v4 currently in beta 5, has removed their dependency on Tilt, which is how `livingstyleguide` integrates in Sprockets 3.

https://github.com/sstephenson/sprockets/issues/643

> 3.x will support both the new API and Tilt to make the transition easy. 4.x will drop the Tilt interface and make source map support possible.

`LivingStyleGuide::Document` inherits from Tilt:
https://github.com/livingstyleguide/livingstyleguide/blob/master/lib/livingstyleguide/document.rb#L8

```ruby
require "tilt"
require "erb"
require "digest"
require "pathname"

class LivingStyleGuide::Document < ::Tilt::Template
  ...
```

Does anyone have any insight into how we can support sprockets v4? Here is documentation on the processor interface that I've started to read: https://github.com/rails/sprockets#processor-interface
I'm trying to use livingstyleguide in a Middleman project, installed as described in the [https://github.com/livingstyleguide/livingstyleguide#middleman-integration](README). But as soon as I use Markdown syntax in a *.lsg file, I get the error

```
NameError at /styleguide.html
uninitialized constant ActiveSupport::VERSION

Ruby 	/home/henning/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/livingstyleguide-2.0.2/lib/livingstyleguide/markdown_extensions.rb: in slug, line 73
Web 	GET localhost/styleguide.html

Traceback (innermost first)

    /home/henning/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/livingstyleguide-2.0.2/lib/livingstyleguide/markdown_extensions.rb: in slug
              if ::ActiveSupport::VERSION::MAJOR >= 5
...
```

I'm using Ruby 2.4.1, Middleman 4.2.1 and livingstyleguide 2.0.2.
Hello, 

Today's my first day using LSG and I must say the quality of work is very impressive! Thank you for creating a great product. One question is if I am able to easily change the url in Rails (from `/assets/styleguide` to simply `/styleguide`). I've looked in both here and Rails syntax in `routes.rb` but haven't found anything. 

Thanks again!
Ruby version: ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin15]
Gem version: 2.5.1

Make a .lsg file with:

```markdown
# This should be a H1
## This should be a H2
### This should be a H3
#### This should be a H4
##### This should be a H5
###### This should be a H6
```

Compile it via the command line.

The outputted HTML is this:

```html
<h2 class="lsg-headline" id="this-should-be-a-h1"><a class="lsg-anchor" href="#this-should-be-a-h1"></a>This should be a H1</h2>
<h3 class="lsg-sub-headline" id="this-should-be-a-h2"><a class="lsg-anchor" href="#this-should-be-a-h2"></a>This should be a H2</h3>
<h4 class="lsg-sub-sub-headline" id="this-should-be-a-h3"><a class="lsg-anchor" href="#this-should-be-a-h3"></a>This should be a H3</h4>
<h5 class="lsg-" id="this-should-be-a-h4"><a class="lsg-anchor" href="#this-should-be-a-h4"></a>This should be a H4</h5>
<h6 class="lsg-" id="this-should-be-a-h5"><a class="lsg-anchor" href="#this-should-be-a-h5"></a>This should be a H5</h6>
<h7 class="lsg-" id="this-should-be-a-h6"><a class="lsg-anchor" href="#this-should-be-a-h6"></a>This should be a H6</h7>
```

As you can see, the class names are identical for H3's through H6's (which are off-by-one and render as H(n+1)).

All Header levels should get unique lsg- selectors, and the Markdown should not render as Hn+1.