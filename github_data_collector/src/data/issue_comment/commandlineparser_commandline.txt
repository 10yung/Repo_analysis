
Beyond parsing the string into lines, how would I modify this to call `Log.Information()` for each line of help generated? It seems the API is capable of this, but I'm obviously struggling to figure it out myself.

```
        static void DisplayHelp<T>(ParserResult<T> result, IEnumerable<Error> errs) {
            var helpText = HelpText.AutoBuild(result, h => {
                h.AutoHelp = true;
                h.AutoVersion = true;
                return HelpText.DefaultParsingErrorsHandler(result, h);
            }, e => e);
            Log.Information(helpText);
        }
```

I added basic support for a default verb (a verb that will be assumed if no verb is specified).
Tests all completed on my end but I'm not too knowledgable about this code, if there is any problem let me know.
I tried using this library in my project today. I'm able to parse the command line from the examples just fine, but found no way to access the parsed options object directly from `ParserResult`.

By my coding style, I prefer not use callbacks here (i.e. `WithParsed` and `WithNotParsed`). I'm already able to use the `Tag` property to check if parsing succeeded. Am I just missing something here or can a property exposing the parsed object be added?
desired ability to have a nullable value that when the switch is provided it will go to the `default(obj)` value, but if the user provides an option it will parse it. 

Reasoning: 
want the ability to have default values when the user turns on the switch, but give them the option to set the value. 

```
[Option('p', "parallel")]
public int? Parallelism { get;  set;}

MyProgram.exe  -p


if (Options.Parallelism != null && Option.Parallelism == default(int)) {
     var parallelism = Environment.ProcessorCount;
}


alternatively:

MyProgram.exe -p 8

```
So the standard separator for IEnumerable options is the space, if another separator is specified, say for example a common (i.e .Separator = ','), space it still treated as a separator, for instance passing:

`app.exe -p key1=value1,key2=value2`

results in two items:

```
[0] key1=value1
[1] key2=value2
```

which is expected, but passing:

`app.exe -p key1 = value1, key2 = value2`

note the spaces... results in five items:

```
[0] key1
[1] =
[2] value1,
[3] key2
[4] =
[5] value2
```

This behavior is a bit undesired, and confusing, everything up until the the next option (i.e. starts with an option prefix - or --) should only be separated by the separator character specified.


I've tried a variety of things, none of which work, but here is what I would expect:

```
[Option('s', "sync", Required = false, Default = "All", HelpText = "Processes the synchronization queue immediately (optionally specifying a repository to sync")]
public String Sync { get; set; }
```

If I run my app with like this myapp -s I would expect it to be assigned a default value of "All", but if I ran it with myapp -s "myrepo" I would expect it to be assigned "myrepo". While the latter works, the former results in:

```
ERROR(S):
  Option 's, sync' has no value.
```

Maybe I am just misunderstanding how it works. What is the proper way to implement an option that can have zero or more strings associated with it. In my case I want -s to sync all my repos, and -s "myrepo" to sync just that individual repo.
I would like to work with dotnet async Main method, having the following signature:

    static async Task Main(string[] args) {
            var parser = new Parser();
            var parserResult = parser.ParseArguments<Options>(args);
            var mainAsync = new MainAsync();
            parserResult.WithParsed<Options>(async options => await mainAsync.Run(options).ConfigureAwait());
    }

Run is defined like:

        public async Task Run(Options options)
        {
            ...
        }

Problem is, my async methods behave strangely. They may work but can also simply terminate my program. It would seem I am doing something wrong, but I can't figure out what it is.

If I do this instead, there doesn't seem to be any problems, but I lose my async main method and some other stuff I have needs to be rewritten.

    static void Main(string[] args) {
            var parser = new Parser();
            var parserResult = parser.ParseArguments<Options>(args);
            var mainAsync = new MainAsync();
            parserResult.WithParsed<Options>(options => mainAsync.Run(options).GetAwaiter().GetResult());
    }

Why does the top-most Main fail in strange way and bottom one just works? Is CommandLineParser not async compatible?
I have a generic method that is used in the ```Program.Main``` for some microservices. I want want to reuse options, but have different defaults.

Is there a way to specify the defaults that aren't compiled (property attributes)?