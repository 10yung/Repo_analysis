Hi developers!

I have found a use case in my project for Quasar framework. Everything works as expected except that I need to extend ```java.io.InputStream.read(byte[],int,int)```. Whatever I have tried doesn't work. The only way to workaround the issue is to override the mentioned method in my extension by copy-pasting the original implementation. This looks a bit ugly. I attach a test project that demonstrate an issue.

I don't know whether the mentioned problem is a lack of functionality or I don't understand how to specify method to instrument in the ```suspendable-supers```/```suspendables```.

Any help would be very appreciated. Thank you.

Quasar: 0.7.10

[Test project FiberTest.zip (it is currently produces an exception. If commented out code is uncommented then there are no exceptions)](https://github.com/puniverse/quasar/files/3660259/FiberTest.zip)

[Execution log with exception.txt](https://github.com/puniverse/quasar/files/3660262/Execution.log.txt)

[Instrumentation debug log.zip](https://github.com/puniverse/quasar/files/3660274/Instrumentation.debug.log.zip)


I am getting the following warning

`WARNING: fiber Fiber@10000001[task: ParkableForkJoinTask@43d3ea9(Fiber@10000001), target: com.pixo.data.FilesRepository$$Lambda$527/0x00000008006f9040@200e4b5e, scheduler: co.paralleluniverse.fibers.FiberForkJoinScheduler@791a7fe] is blocking a thread (Thread[ForkJoinPool-pixo-data-fiber-schedular-worker-3,5,main]).
	at java.base@11.0.4/jdk.internal.misc.Unsafe.park(Native Method)
	at java.base@11.0.4/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:234)
	at java.base@11.0.4/java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:1079)
	at java.base@11.0.4/java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1369)
	at java.base@11.0.4/java.util.concurrent.CountDownLatch.await(CountDownLatch.java:278)
	at net.rubyeye.xmemcached.XMemcachedClient.latchWait(XMemcachedClient.java:2361)
	at net.rubyeye.xmemcached.XMemcachedClient.sendStoreCommand(XMemcachedClient.java:2345)
	at net.rubyeye.xmemcached.XMemcachedClient.set(XMemcachedClient.java:1252)
	at net.rubyeye.xmemcached.XMemcachedClient.set(XMemcachedClient.java:1306)
	at net.rubyeye.xmemcached.XMemcachedClient.set(XMemcachedClient.java:1295)`
The JavaAgent holds strong references to the ClassLoaders of the classes that it instruments. This prevents dynamically created ClassLoaders from being unloaded afterwards, and so creates a severe memory leak.

Add a command-line option to the JavaAgent so that we can exclude ClassLoaders by their class name.
with code like:
```
    public static void main(String[] args) {
	    FiberScheduler s1 = new FiberForkJoinScheduler("s1", 4, MonitorType.METRICS, true);
	    FiberScheduler s2 = new FiberForkJoinScheduler("s2", 4, MonitorType.METRICS, true);
    }
```

I get an exception 
```
Exception in thread "main" java.lang.IllegalArgumentException: A metric named runawayFibers already exists
	at com.codahale.metrics.MetricRegistry.register(MetricRegistry.java:91)
	at co.paralleluniverse.common.monitoring.Metrics.register(Metrics.java:42)
	at co.paralleluniverse.fibers.MetricsFibersMonitor.<init>(MetricsFibersMonitor.java:56)
	at co.paralleluniverse.fibers.FiberScheduler.createFibersMonitor(FiberScheduler.java:50)
	at co.paralleluniverse.fibers.FiberScheduler.<init>(FiberScheduler.java:40)
	at co.paralleluniverse.fibers.FiberForkJoinScheduler.<init>(FiberForkJoinScheduler.java:59)
	at co.paralleluniverse.fibers.FiberForkJoinScheduler.<init>(FiberForkJoinScheduler.java:73)
	at test.FiberTest.main(FiberTest.java:12)
```

It looks like the runawayFibers metrics is not prefixed with the name of the scheduler like the rest of the metrics.
Hi. I was trying Quasar and was wondering why the examples are not working if I use Groovy and FiberAsync. Here is a slightly modified example code taken from `FiberAsyncTest.java` but complied with Groovy in `QuasarFiberAsyncTest.groovy`. The behavior should be identical with the Java compiled version. But it either throws a TimeoutException or never returns from a `fiber.join()`. 

Quasar: 0.8.0
Groovy: 2.5.7
Usage: `-ea -javaagent:${QUASAR_CORE_AGENT_JAR}`

```
/*
 * Quasar: lightweight threads and actors for the JVM.
 * Copyright (c) 2013-2014, Parallel Universe Software Co. All rights reserved.
 *
 * This program and the accompanying materials are dual-licensed under
 * either the terms of the Eclipse Public License v1.0 as published by
 * the Eclipse Foundation
 *
 *   or (per the licensee's choosing)
 *
 * under the terms of the GNU Lesser General Public License version 3.0
 * as published by the Free Software Foundation.
 */
package com.anrisoftware.dwarfhustle.graph.janus.internal;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.junit.jupiter.api.Test;

import co.paralleluniverse.fibers.Fiber;
import co.paralleluniverse.fibers.FiberAsync;
import co.paralleluniverse.fibers.FiberForkJoinScheduler;
import co.paralleluniverse.fibers.SuspendExecution;
import co.paralleluniverse.strands.SuspendableRunnable;

/**
 *
 * @author pron
 */
public class QuasarFiberAsyncTest {

    interface MyCallback {
        void call(String str);

        void fail(RuntimeException e);
    }

    interface Service {
        void registerCallback(MyCallback callback);
    }

    static abstract class MyFiberAsync extends FiberAsync<String, RuntimeException> implements MyCallback {
        private final Fiber fiber;

        public MyFiberAsync() {
            this.fiber = Fiber.currentFiber();
        }

        @Override
        public void call(String str) {
            super.asyncCompleted(str);
        }

        @Override
        public void fail(RuntimeException e) {
            super.asyncFailed(e);
        }
    }

    static String callService(final Service service) throws SuspendExecution, InterruptedException {
        println "callService"
        return new MyFiberAsync() {
                    @Override
                    protected void requestAsync() {
                        println "requestAsync"
                        service.registerCallback(this);
                    }
                }.run();
    }


    @Test
    public void testSyncCallback() throws Exception {
        FiberForkJoinScheduler scheduler = new FiberForkJoinScheduler("test", 4, null, false);
        final Service syncService = new Service() {
                    @Override
                    public void registerCallback(MyCallback callback) {
                        callback.call("sync result!");
                    }
                };
        final Fiber fiber = new Fiber(scheduler) {
                    @Override
                    protected Object run() throws SuspendExecution, InterruptedException {
                        String res = callService(syncService);
                        System.out.println(res);
                        return res;
                    }
                }.start();

        // never returns
        // fiber.join();
        // throws TimeoutException
        fiber.join(1, TimeUnit.SECONDS);
    }
}
```

Console output:

```
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/home/erwin/.m2/repository/org/codehaus/groovy/groovy/2.5.7/groovy-2.5.7.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int)
WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
QUASAR WARNING: Assertions enabled. This may harm performance.
callService
requestAsync
callService
```

As you can see, callService is two times in the output. In the Java version the output is:

```
JRE Oracle Corporation/12.0.1 is not supported, advanced source lookup disabled.
QUASAR WARNING: Assertions enabled. This may harm performance.
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on co.paralleluniverse.concurrent.util.ThreadAccess (file:/home/erwin/.m2/repository/co/paralleluniverse/quasar-core/0.8.0/quasar-core-0.8.0.jar) to class java.lang.Thread
WARNING: Please consider reporting this to the maintainers of co.paralleluniverse.concurrent.util.ThreadAccess
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
callService
requestAsync
sync result!
```
I am trying to integrate quasar fiber with Apache Camel. The way I am trying to achieve this is by doing something like this- 

  Fiber<Exchange> fiberExchange = new Fiber<Exchange>(new SuspendableCallable<Exchange>() { 
      public Exchange run() throws SuspendExecution, InterruptedException { 
          return producerTemplate.send(clientURL, exchange); 
      } 
  }).start(); 

  fiberExchange.get(); 

This internally uses HttpClient which was causing CPU hogging but nonetheless I was able to get responses correctly without error. 
To solve for CPU hogging, I tried to override HttpClient by FiberHttpClient provided by Comsat- 

public class FiberHttpEndpoint extends HttpEndpoint { 
    public FiberHttpEndpoint(final HttpEndpoint httpEndpoint 
            , final HttpComponent httpComponent) throws URISyntaxException { 
        super(httpEndpoint.getEndpointUri() 
                , httpComponent 
                , httpEndpoint.getHttpUri() 
                , httpEndpoint.getClientBuilder() 
                , httpEndpoint.getClientConnectionManager() 
                , httpEndpoint.getHttpClientConfigurer()); 
    } 


    @Override 
    protected HttpClient createHttpClient() { 
            return FiberHttpClientBuilder.create(50). // use 2 io threads 
                    setMaxConnPerRoute(super.getConnectionsPerRoute()). 
                    setMaxConnTotal(super.getMaxTotalConnections()). 
                    build(); 
    } 
} 


public class FiberHttpComponent extends HttpComponent { 
    private static LoggerFacade LOGGER = LoggerFacadeManager.getLogger(HystrixHttpComponent.class); 
    public FiberHttpComponent(){ 
        super(); 
    } 

    @Override 
    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception { 
        final HttpEndpoint defaultEndpoint = (HttpEndpoint) super.createEndpoint(uri, remaining, parameters); 
        return new FiberHttpEndpoint(defaultEndpoint, this); 
    } 
} 

And passing this Component while calling the endpoint. 
But after doing this change, I have started getting SuspendExecution Error due to uninstrumented methods in Fiber.java exec() method. 

I have already enabled “-Dco.paralleluniverse.fibers.verifyInstrumentation=true” but it is now giving any uninstrumented method. VerifyInstrumentation was giving me warning earlier, but it got solved after marking those methods as suspendable. This is resulting in response not getting set correctly set in camel exchange. 

Could you please point me to what am I missing here and how can I check which methods are uninstrumented resulting in this error. 
```
[ant:instrumentation] ERROR: io/vertx/core/buffer/Buffer
java.io.IOException: Class not found
	at co.paralleluniverse.asm.ClassReader.readStream(ClassReader.java:300)
	at co.paralleluniverse.asm.ClassReader.<init>(ClassReader.java:273)
	at co.paralleluniverse.fibers.instrument.MethodDatabase.extractSuperClass(MethodDatabase.java:364)
	at co.paralleluniverse.fibers.instrument.MethodDatabase.getDirectSuperClass(MethodDatabase.java:401)
	at co.paralleluniverse.fibers.instrument.MethodDatabase.getSuperClasses(MethodDatabase.java:382)
	at co.paralleluniverse.fibers.instrument.MethodDatabase.getCommonSuperClass(MethodDatabase.java:273)
	at co.paralleluniverse.fibers.instrument.DBClassWriter.getCommonSuperClass(DBClassWriter.java:50)
	at co.paralleluniverse.asm.SymbolTable.addMergedType(SymbolTable.java:1198)
	at co.paralleluniverse.asm.Frame.merge(Frame.java:1294)
	at co.paralleluniverse.asm.Frame.merge(Frame.java:1175)
	at co.paralleluniverse.asm.MethodWriter.computeAllFrames(MethodWriter.java:1617)
	at co.paralleluniverse.asm.MethodWriter.visitMaxs(MethodWriter.java:1553)
	at co.paralleluniverse.asm.tree.MethodNode.accept(MethodNode.java:810)
	at co.paralleluniverse.asm.util.CheckMethodAdapter$1.visitEnd(CheckMethodAdapter.java:460)
	at co.paralleluniverse.asm.MethodVisitor.visitEnd(MethodVisitor.java:778)
	at co.paralleluniverse.asm.util.CheckMethodAdapter.visitEnd(CheckMethodAdapter.java:1059)
	at co.paralleluniverse.asm.tree.MethodNode.accept(MethodNode.java:813)
	at co.paralleluniverse.asm.commons.JSRInlinerAdapter.visitEnd(JSRInlinerAdapter.java:150)
	at co.paralleluniverse.asm.MethodVisitor.visitEnd(MethodVisitor.java:778)
	at co.paralleluniverse.fibers.instrument.InstrumentClass$1.visitEnd(InstrumentClass.java:190)
	at co.paralleluniverse.asm.ClassReader.readMethod(ClassReader.java:1279)
	at co.paralleluniverse.asm.ClassReader.accept(ClassReader.java:679)
	at co.paralleluniverse.asm.ClassReader.accept(ClassReader.java:391)
	at co.paralleluniverse.fibers.instrument.QuasarInstrumentor.instrumentClass(QuasarInstrumentor.java:137)
	at co.paralleluniverse.fibers.instrument.QuasarInstrumentor.instrumentClass(QuasarInstrumentor.java:102)
	at co.paralleluniverse.fibers.instrument.InstrumentationTask.instrumentClass(InstrumentationTask.java:191)
	at co.paralleluniverse.fibers.instrument.InstrumentationTask.execute(InstrumentationTask.java:178)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:293)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at groovy.util.AntBuilder.performTask(AntBuilder.java:338)
	at groovy.util.AntBuilder.nodeCompleted(AntBuilder.java:283)
	at org.gradle.api.internal.project.ant.BasicAntBuilder.nodeCompleted(BasicAntBuilder.java:78)
	at groovy.util.BuilderSupport.doInvokeMethod(BuilderSupport.java:154)
	at groovy.util.AntBuilder.doInvokeMethod(AntBuilder.java:218)
	at org.gradle.api.internal.project.ant.BasicAntBuilder.doInvokeMethod(BasicAntBuilder.java:103)
	at groovy.util.BuilderSupport.invokeMethod(BuilderSupport.java:67)
	at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.call(PogoMetaClassSite.java:47)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:135)
	at build_4is3o8jehfqas15mu6tptiwit$_run_closure6$_closure10.doCall(/home/ryan/Workspace/gitlab.launchbadge.com/hedera/hedera-saft-portal/build.gradle:68)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:104)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:326)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:264)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
	at groovy.lang.Closure.call(Closure.java:411)
	at groovy.lang.Closure.call(Closure.java:427)
	at org.gradle.api.internal.AbstractTask$ClosureTaskAction.execute(AbstractTask.java:645)
	at org.gradle.api.internal.AbstractTask$ClosureTaskAction.execute(AbstractTask.java:618)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$5.run(ExecuteActionsTaskExecuter.java:404)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:402)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:394)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:92)
	at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:393)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:376)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.access$200(ExecuteActionsTaskExecuter.java:80)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.execute(ExecuteActionsTaskExecuter.java:213)
	at org.gradle.internal.execution.steps.ExecuteStep.lambda$execute$1(ExecuteStep.java:33)
	at java.base/java.util.Optional.orElseGet(Optional.java:369)
	at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:33)
	at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:26)
	at org.gradle.internal.execution.steps.CleanupOutputsStep.execute(CleanupOutputsStep.java:58)
	at org.gradle.internal.execution.steps.CleanupOutputsStep.execute(CleanupOutputsStep.java:35)
	at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:48)
	at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:33)
	at org.gradle.internal.execution.steps.CancelExecutionStep.execute(CancelExecutionStep.java:39)
	at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout(TimeoutStep.java:73)
	at org.gradle.internal.execution.steps.TimeoutStep.execute(TimeoutStep.java:54)
	at org.gradle.internal.execution.steps.CatchExceptionStep.execute(CatchExceptionStep.java:35)
	at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:51)
	at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute(SnapshotOutputsStep.java:45)
	at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute(SnapshotOutputsStep.java:31)
	at org.gradle.internal.execution.steps.CacheStep.executeWithoutCache(CacheStep.java:201)
	at org.gradle.internal.execution.steps.CacheStep.execute(CacheStep.java:70)
	at org.gradle.internal.execution.steps.CacheStep.execute(CacheStep.java:45)
	at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute(BroadcastChangingOutputsStep.java:49)
	at org.gradle.internal.execution.steps.StoreSnapshotsStep.execute(StoreSnapshotsStep.java:43)
	at org.gradle.internal.execution.steps.StoreSnapshotsStep.execute(StoreSnapshotsStep.java:32)
	at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:38)
	at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:24)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause(SkipUpToDateStep.java:96)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda$execute$0(SkipUpToDateStep.java:89)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:54)
	at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:38)
	at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:77)
	at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:37)
	at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:36)
	at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:26)
	at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:90)
	at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:48)
	at org.gradle.internal.execution.impl.DefaultWorkExecutor.execute(DefaultWorkExecutor.java:33)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:120)
	at org.gradle.api.internal.tasks.execution.ResolveBeforeExecutionStateTaskExecuter.execute(ResolveBeforeExecutionStateTaskExecuter.java:75)
	at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:62)
	at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:108)
	at org.gradle.api.internal.tasks.execution.ResolveBeforeExecutionOutputsTaskExecuter.execute(ResolveBeforeExecutionOutputsTaskExecuter.java:67)
	at org.gradle.api.internal.tasks.execution.StartSnapshotTaskInputsBuildOperationTaskExecuter.execute(StartSnapshotTaskInputsBuildOperationTaskExecuter.java:62)
	at org.gradle.api.internal.tasks.execution.ResolveAfterPreviousExecutionStateTaskExecuter.execute(ResolveAfterPreviousExecutionStateTaskExecuter.java:46)
	at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:94)
	at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)
	at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:95)
	at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)
	at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:56)
	at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:73)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:49)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:416)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:406)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
	at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:102)
	at org.gradle.internal.operations.DelegatingBuildOperationExecutor.call(DelegatingBuildOperationExecutor.java:36)
	at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:49)
	at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:43)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:355)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:343)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:336)
	at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:322)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker$1.execute(DefaultPlanExecutor.java:134)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker$1.execute(DefaultPlanExecutor.java:129)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:202)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.executeNextNode(DefaultPlanExecutor.java:193)
	at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:129)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.base/java.lang.Thread.run(Thread.java:834)
[ant:instrumentation] WARNING: Can't determine super class of io/vertx/core/buffer/Buffer
```

---

```
❯ java --version
openjdk 11.0.3 2019-04-16
OpenJDK Runtime Environment (build 11.0.3+7-Ubuntu-1ubuntu1)
OpenJDK 64-Bit Server VM (build 11.0.3+7-Ubuntu-1ubuntu1, mixed mode, sharing)
```

---

Using gradle configuration from #320 

---

See https://github.com/vert-x3/vertx-sync/issues/35
I'm experimenting with one of my projects and got the following NPE:

```
Caused by: org.apache.tools.ant.BuildException
    at co.paralleluniverse.fibers.instrument.InstrumentationTask.execute (InstrumentationTask.java:183)
    at org.apache.tools.ant.UnknownElement.execute (UnknownElement.java:292)
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.apache.tools.ant.dispatch.DispatchUtils.execute (DispatchUtils.java:106)
    at org.apache.tools.ant.Task.perform (Task.java:348)
    at org.apache.tools.ant.Target.execute (Target.java:435)
    at org.apache.tools.ant.Target.performTasks (Target.java:456)
    at org.apache.tools.ant.Project.executeSortedTargets (Project.java:1393)
    at org.apache.tools.ant.Project.executeTarget (Project.java:1364)
    at org.apache.maven.plugin.antrun.AntRunMojo.execute (AntRunMojo.java:313)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356)
Caused by: java.lang.NullPointerException
    at co.paralleluniverse.fibers.instrument.MethodDatabase.isProblematicClass (MethodDatabase.java:450)
    at co.paralleluniverse.fibers.instrument.QuasarInstrumentor.instrumentClass (QuasarInstrumentor.java:141)
    at co.paralleluniverse.fibers.instrument.QuasarInstrumentor.instrumentClass (QuasarInstrumentor.java:99)
    at co.paralleluniverse.fibers.instrument.InstrumentationTask.instrumentClass (InstrumentationTask.java:192)
    at co.paralleluniverse.fibers.instrument.InstrumentationTask.execute (InstrumentationTask.java:179)
    at org.apache.tools.ant.UnknownElement.execute (UnknownElement.java:292)
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.apache.tools.ant.dispatch.DispatchUtils.execute (DispatchUtils.java:106)
    at org.apache.tools.ant.Task.perform (Task.java:348)
    at org.apache.tools.ant.Target.execute (Target.java:435)
    at org.apache.tools.ant.Target.performTasks (Target.java:456)
    at org.apache.tools.ant.Project.executeSortedTargets (Project.java:1393)
    at org.apache.tools.ant.Project.executeTarget (Project.java:1364)
    at org.apache.maven.plugin.antrun.AntRunMojo.execute (AntRunMojo.java:313)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:289)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:229)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:415)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:356)
```

The last line I have one logs goes like this:

```
[quasarAOT] null
```

What other information can I provide about this?

Kotlin team considers to removed change that was made for https://youtrack.jetbrains.com/issue/KT-6930 with annotation generation on default methods ('foo$default', https://github.com/JetBrains/kotlin/commit/fd4946e552517cebf2b1361e641fc718ab1c46b6#diff-c4b3d1cabf0518d85f061842d839bd32R617).

All annotations would be removed from $default methods, it can break quasar instrumentation.

Default companion for function 'foo' with N parameter generated by next template:
```
fun foo(param1: Type1...., paramN: TypeN): ResultType

[static] [synthetic flag] [bridge flag]? fun foo$default(param1: Type1...paramN: typeN, mask0:Int..mask[N-1/32]: Int, object: Object)
```

Sample bytecode
```
public final class Foo {

  public final foo(Ljava/lang/String;Ljava/lang/String;)V
 
  public static synthetic foo$default(LFoo;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)V
}
```
Bridge flag was generated prior Kotlin 1.3