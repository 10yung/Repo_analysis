Hi Claus,

thanks again for your wonderful contribution to the ggplot2-verse! I love this package and use it for almost all plots since then and it works like a charm - most of the time. I know it's a dev version so I just want to report a bug I've found (without expecting you to fix it soon):

``` r
options(warn = -1)

library(tidyverse)
library(ggtext)

theme_update(axis.text.x = element_markdown(size = 15))

labs <- c("**ten**", "<i>twenty</i>", "<span style='color:#0072B2'>thirty<span>")

## axis text modifications are working perfectly...
ggplot(mtcars, aes(mpg, cyl)) +
  geom_point() +
  scale_x_continuous(breaks = c(10, 20, 30),
                     labels = labs)
```

![](https://i.imgur.com/lgv9aqs.png)

``` r

### ... until one changes their position:
ggplot(mtcars, aes(mpg, cyl)) +
  geom_point() +
  scale_x_continuous(position = "top",
                     breaks = c(10, 20, 30),
                     labels = labs)
```

![](https://i.imgur.com/CzMOUv6.png)

<sup>Created on 2019-12-13 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

All the best, CÃ©dric
Hi,

This package is great and will undoubtedly  save lots of people lots of headaches. I am wondering if you would be able to add additional support to be able to inject LaTeX math into the text for plots. I did notice you have shown an example of using HTML tags to do things like superscripts and subscripts, however, I think many users will be more familiar with writing more complex equations using LaTeX.

I really have no idea of the difficulty in adding this feature, but it would be great to use some sort of system like `R Markdown` uses, where it seems to parse the `$$` and renders all text inside as LaTeX math. This would certainly be an amazing feature, in my eyes.

Something like:

```r
iris %>%
  ggplot(aes(Sepal.Length, Sepal.Width)) +
  geom_point() +
  geom_smooth(method = 'lm') +
  labs(title = "The line in this plot represents $\hat{y}=\beta_0+\beta_1x_1$")
```

Thank you for your work.
From the demos which support HTML, it seems like you could support icon fonts like [Font Awesome](https://fontawesome.com/), which would be interesting for annotations. (although I'm not 100% sure if this package would allow font mixing).