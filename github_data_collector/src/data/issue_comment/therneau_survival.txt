The README.md file provides the following line of code for how to install the survival package from github:
```r
library(devtools) 
install_git("therneau/survival")
```
However, this fails with the following error:
```text
Error: Failed to install 'unknown package' from Git:
  Error in 'git2r_remote_ls': unsupported URL protocol
```
I believe this could should either read:
```r
library(devtools) 
install_github("therneau/survival")
```
... or...
```r
library(devtools)
install_git("https://github.com/therneau/survival")
```
I've just tried running the following code:
```r
devtools::install_github("therneau/survival")
```
However, the installation fails The last few lines of output are written displayed below:
```text
installing to /home/benjamin/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-survival/00new/survival/libs
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
Warning: S3 methods ‘[.cox.zph’, ‘print.cox.zph’ were declared in NAMESPACE but not found
Error: package or namespace load failed for ‘survival’ in namespaceExport(ns, exports):
 undefined exports: cox.zph
Error: loading failed
Execution halted
ERROR: loading failed
* removing ‘/home/benjamin/R/x86_64-pc-linux-gnu-library/3.6/survival’
Error: Failed to install 'survival' from GitHub:
  (converted from warning) installation of package ‘/tmp/RtmppsaKUZ/file134224989df7/survival_3.1-9.tar.gz’ had non-zero exit status
```
I'm using R version 3.6.2 on Manjaro Linux Gnome (kernel version 5.4.12-1).
I've recently set up a pipeline fitting coxph to a 75% training partition of my data, testing on the remaining 25%:

```
coxPHmodelFit <- function(dataset){
                 coxph(Surv(eventTime,censored) ~
                 age + gender + race + eGFR_med_0_180 + flag_ifta_preTrans +
                 flag_ifta_AtPostTrans + flag_ifta_other_preTrans +
                 flag_ifta_other_AtPostTrans + flag_glopc_preTrans + 
                 flag_glopc_AtPostTrans + flag_transglome_preTrans +
                 flag_transglome_AtPostTrans + flag_interinflamt_AtPostTrans,
                 data=dataset[dataset$flag_180dfailure==1,], 
                 x=TRUE, y=TRUE)}

# Train ii_iii_iv_bts (i held out) - training on 100 bootstrap resamples of 75% of the data
CPH_eGFR_cohort_0_180_trn_ii_iii_iv_bts <- lapply(eGFR_cohort_0_180_trn_ii_iii_iv_bts, 
                                                  function(df){ 
                                                  coxmodel <- coxPHmodelFit(df)
                                                  coxmodel})

# Test on i_bts bootstrap resamples of 25% of data (trained on ii_iii_iv_bts)
for (i in 1:n_boots) {
  CPH_eGFR_cohort_0_180_Concord_i_bts[[i]] <- 
  concordance(object=CPH_eGFR_cohort_0_180_trn_ii_iii_iv_bts[[i]],
  newdata=eGFR_cohort_0_180_p_i_bts_post6[[i]],
  timewt='n')
}
```

In seeking to calculate the concordance of the predictions made  for the test fold, I get the error:

`Error in (function (y, x, strata, weights, ymin = NULL, ymax = NULL, timewt = c("n",  : 
  x and y are not the same length`

As per [this](https://stats.stackexchange.com/questions/444208/cox-ph-r-rms-package-concordance-train-cv-test) post on CrossValidated, it looks like the function will work correctly if x (train data) and y (test data) have the same dimensions.

Please advise of a solution? Many thanks.

Hello,

I was trying to reproduce the last example of `?coxph`, but encountered an error:

```
x=coxph(surv ~ x2 + tt(x2), data=db, tt=function(x,t,...) pspline(x + t))
print(x)
```

> Call:
> coxph(formula = surv ~ x2 + tt(x2), data = x, tt = function(x, 
>     t, ...) pspline(x + t))
> 
> Error in coxph.wtest(var, coef) : 
>   NA/NaN/Inf in foreign function call (arg 4)

After quite a lot of `debugonce`, I saw that this error is thrown at the `print` time, because the last coefficient of `x` is missing (`x$coefficients[13]`).

It happens that this error will not be thrown with `degree=0`:
`coxph(surv ~ x2 + tt(x2), data=db, tt=function(x,t,...) pspline(x + t, degree=0))`

Here is an input for a reproducible example (sorry for the size of the table).

This might be due to `x2` being an integer in my case, but I think this still deserves a warning or a clear error message at the `pspline` level or at the `survival:::print.coxph.penal` level nevertheless.


```
db=structure(list(surv = structure(c(4.94195597415398, 3.94261307633337, 
0.517467966268755, 2.82280144562479, 0.476399080056949, 0.287482203482642, 
1.68382433468404, 15.5349906910525, 1.41550761143358, 2.14379586025627, 
3.00624247070419, 0.999342897820611, 3.20611105026832, 3.52371043697295, 
5.44299638593801, 5.91391961450005, 0.856970758953017, 0.848756981710656, 
3.23622823349031, 2.17117511773081, 3.12671120359216, 1.51133501259446, 
0.616033293177089, 1.96583068667178, 0.703646917095608, 1.40181798269631, 
1.42098346292849, 4.46008104260212, 1.24028036359654, 1.46479027488775, 
9.42941627423064, 4.08224728945351, 3.57573102617457, 1.10612200197131, 
0.147847990362501, 0.572226481217829, 1.92476180045997, 3.68251013032527, 
10.1768700032855, 0.544847223743292, 0.156061767604863, 0.120468732887964, 
0.123206658635418, 5.99879531267112, 0.164275544847224, 0.416164713612967, 
0.22724783703866, 0.114992881393057, 0.210820282553937, NA, 0.492826634541671, 
1.12802540795094, 1.64823129996714, 0.657102179388895, 0.939108531376629, 
4.00558536852481, 4.69280473113569, 29.5778118497426, 9.60738144781513, 
6.65589749206002, 11.5814259117293, 2.71328441572665, 2.16022341474099, 
3.28277297119702, 1.07600481874932, 2.10272697404446, 27.691381009747, 
6.46424268973825, 3.98641988829263, 3.15682838681415, NA, 0.941846457124083, 
1.23480451210163, 0.700908991348155, 0.78578468951922, 26.8919066914905, 
6.74351111597853, 0.156061767604863, 2.30807140510349, 8.8106450553061, 
0.87339831343774, 3.86321322965721, 0.928156828386814, 3.21980067900559, 
2.43401598948636, 28.403241704085, 9.81820173036907, 1.68930018617895, 
2.78447048516044, 4.20545394808893, 1.91654802321761, 0.810426021246304, 
2.05070638484284, 2.61745701456576, 30.7961888073595, 6.61756653159566, 
3.38955207534772, 1.36896287372686, 9.15562369948527, 0.752929580549775, 
5.79618880735954, 2.73244989595882, 1.03767385828496, 8.5149490745811, 
2.7926842624028, 0.0438068119592597, 0.429854342350235, 8.55875588654036, 
1.44014894316066, 0.060234366443982, 0.0410688862118059, 5.01040411784032, 
6.01248494140839, 5.40466542547366, 2.71054648997919, 4.93100427116417, 
3.42788303581207, 2.50520205892016, 7.02551746796627, 1.93845142919724, 
0.454495674077319, 6.48067024422298, 3.41966925856971, 0.846019055963202, 
1.8700032855109, 0.20534443105903, 4.59971525572226, 1.18552184864746, 
0.733764100317599, 1.23206658635418, 5.19658306866718, 0.993867046325704, 
3.55108969444749, 0.0547585149490746, 0.306647683714818, 1.50585916109955, 
2.88303581206878, 2.98160113897711, 0.80768809549885, 5.75785784689519, 
0.840543204468295, 1.01850837805279, 0.930894754134268, 2.98981491621947, 
2.76256707918081, 5.76059577264265, 2.74340159894864, 0.583178184207644, 
5.71952688643084, 15.091446719965, 0.0958274011608805, 1.43467309166575, 
0.0164275544847224, 0.728288248822692, 2.64209834629285, 1.14992881393057, 
2.06439601358011, 2.63936042054539, 0.123206658635418, 2.86113240608915, 
5.71131310918848, 0.194392728069215, NA, 2.25605081590187, 4.26568831453291, 
1.11707370496112, 1.84262402803636, 0.0793998466761581, 5.84273354506626, 
1.30599058153543, 2.36556784580002, 5.19658306866718, 1.08148067024422, 
0.651626327893987, 5.3197897273026, 0.0438068119592597, 0.583178184207644, 
1.00481874931552, 0.438068119592597, 2.39568502902201, 1.89190669149053, 
1.82893439929909, 1.99320994414631, 0.391523381885883, 1.19647355163728, 
1.94118935494469, 2.23140948417479, 0.34497864417917, 0.884350016427555, 
1.44562479465557, 1.12254955645603, 1.05136348702223, 1.41276968568612, 
1.57704523053335, 1.25396999233381, 1.09517029898149, 0.468185302814588, 
0.796736392509035, 1.04862556127478, 0.342240718431716, 0.0739239951812507, 
0.0465447377067134, 0.941846457124083, 0.339502792684262, 1.6509692257146, 
0.210820282553937, 0.988391194830796, 3.82214434344541, 0.769357135034498, 
2.80911181688753, 0.481874931551856, 0.804950169751396, 1.94392728069215, 
0.588654035702552, 2.14653378600372, 1.12254955645603, 1.79334136458219, 
0.44080604534005, 5.87285072828825, 0.125944584382872, 0.0821377724236119, 
0.900777570912277, 0.0985653269083342, 6.00427116416603, 1.64823129996714, 
1.67287263169423, 3.06100098565327, 0.202606505311576, 0.030117183221991, 
0.492826634541671, 1.45383857189793, 12.3370934180265, 0.328551089694447, 
2.69411893549447, 0.906253422407184, 2.16296134048845, 16.9614500054759, 
2.06439601358011, 4.61888073595444, 4.44091556236995, 4.43543971087504, 
1.0294600810426, 4.87350783046764, 4.34508816120907, 1.08695652173913, 
4.31223305223962, 4.44912933961231, 4.32866060672435, 0.396999233380791, 
4.0357025517468, 3.70715146205235, 3.964516482313, 0.120468732887964, 
1.5031212353521, 3.85499945241485, 4.08772314094842, 3.51549665973059, 
0.443543971087504, 1.33336983900997, 1.21837695761691, 0.818639798488665, 
1.59347278501807, 0.459971525572226, 8.9229000109517, 1.99047201839886, 
3.76738582849633, 3.92618552184865, 1.07052896725441, 2.08082356806483, 
0.0191654802321761, 0.911729273902092, 2.30807140510349, 0.0438068119592597, 
0.481874931551856, 0.884350016427555, 1.91381009747016, 1.72489322089585, 
4.36972949293615, 1.71394151790603, 0.632460847661811, 0.870660387690286, 
13.1228781075457, 9.38287153652393, 0.591391961450005, 5.89201620852042, 
2.19581644945789, 1.97678238966159, 10.6176760486256, 5.87285072828825, 
7.79213667725331, 2.33818858832548, 11.1433577921367, 1.03767385828496, 
2.1656992662359, 13.8456905048735, 12.3973277844705, 0.476399080056949, 
1.07052896725441, 6.61482860584821, 22.8178731792794, 6.09188478808455, 
7.85510896944475, 0.350454495674077, 8.71755557989267, 22.453729054868, 
5.08432811302157, 1.46205234914029, 0.443543971087504, 2.00416164713613, 
4.0767714379586, 1.97678238966159, 13.7498631037126, 0.588654035702552, 
5.16920381119264, 2.41758843500164, 19.6555689409703, 6.37389114007228, 
NA, 0.476399080056949, 0.314861460957179, 5.95772642645931, 1.30872850728288, 
3.23349030774285, 0.336764866936809, 2.36009199430511, 3.5264483627204, 
0.112254955645603, 2.2423611871646, 3.1951593472785, 2.33818858832548, 
0.679005585368525, 15.6746249041726, 3.43335888730698, 2.49151243018289, 
0.752929580549775, 1.03219800679006, 0.336764866936809, 0.840543204468295, 
5.94403679772205, 0.396999233380791, 0.758405432044683, 0.555798926733107, 
4.93921804840653, 0.498302486036579, 0.380571678896068, 0.383309604643522, 
0.479137005804403, 9.52250574964407, 0.580440258460191, 2.38199540028474, 
0.651626327893987, 0.78578468951922, 10.0919943051144, 2.77625670791808, 
0.610557441682182, 1.11981163070858, 2.27521629613405, 3.93987515058592, 
8.19187383638156, 0.900777570912277, 1.41824553718103, 4.23830905705837, 
0.0355930347168985, 0.0848756981710656, 0.698171065600701, 8.0056948855547, 
1.81250684481437, 1.34705946774723, 0.632460847661811, 12.6519548789837, 
2.80911181688753, 1.508597086847, 8.21103931661373, 0.884350016427555, 
2.9405322527653, 1.3607490964845, 7.70726097908225, 2.48329865294053, 
0.202606505311576, 2.04796845909539, 0.202606505311576, 2.16296134048845, 
1.18004599715256, 5.36907239075676, 1.16088051692038, 1.09790822472895, 
5.54977549008871, 7.1596758295915, 5.85094732230862, 6.94885554703756, 
5.96320227795422, 0.566750629722922, 0.262840871755558, 6.88040740335122, 
0.213558208301391, 2.3491402913153, 0.492826634541671, 2.13558208301391, 
0.369619975906253, 0.876136239185193, 3.343007337641, 4.4025846019056, 
6.40127039754682, 6.89135910634104, 6.4970977987077, 5.36907239075676, 
6.60387690285839, 2.20676815244771, 10.0071186069434, 4.12057824991786, 
0.0492826634541671, 1.20194940313219, 8.79969335231628, 5.5087066038769, 
8.24937027707809, 0.865184536195378, 1.7632241813602, 1.68930018617895, 
1.91928594896506, 0.364144124411346, 0.238199540028474, 1.05136348702223, 
0.199868579564122, 0.0684481436863432, 1.19099770014237, 2.11915452852919, 
0.82959150147848, 0.0876136239185193, 0.273792574745373, 3.13492498083452, 
7.16241375533895, 6.82291096265469, 4.26842624028036, 0.347716569926624, 
0.911729273902092, 0.325813163946994, 0.331289015441901, 2.14105793450882, 
0.996604972073157, 3.97546818530281, 0.0547585149490746, 0.106779104150695, 
0.271054648997919, 0.22724783703866, 6.1302157485489, 1.6509692257146, 
5.58810645055306, 4.58054977549009, 3.26086956521739, 0.00821377724236119, 
2.18760267221553, 0.895301719417369, 1.37991457671668, 2.26426459314423, 
0.572226481217829, 2.13284415726645, 0.216296134048845, 0.292958054977549, 
3.34574526338846, 1.47847990362501, 0.520205892016208, 0.109517029898149, 
0.594129887197459, 3.46895192202387, 0.648888402146534, 2.35461614281021, 
0.487350783046764, 0.438068119592597, 2.19034059796298, 2.72697404446391, 
0.930894754134268, 1.40729383419122, 2.45318146971854, 0.172489322089585, 
1.70572774066367, 2.04523053334794, 0.944584382871536, 0.774832986529405, 
0.210820282553937, 0.903515496659731, 0.271054648997919, 0.5503230752382, 
4.65721169641879, 4.39163289891578, 1.20194940313219, 1.9466652064396, 
0.993867046325704, 3.55656554594239, 1.9822582411565, 3.3786003723579, 
2.67221552951484, 5.77976125287482, 0.810426021246304, 5.80166465885445, 
0.339502792684262, 7.60869565217391, 8.24937027707809, 5.11718322199102, 
2.45591939546599, 5.50049282663454, 5.56894097032088, 0.350454495674077, 
1.1718322199102, 2.08629941955974, 3.40871755557989, 5.34716898477713, 
5.04873507830468, 0.895301719417369, 0.0766619209287044, 1.29230095279816, 
0.569488555470376, 1.74405870112803, 2.63936042054539, 0.654364253641441, 
0.503778337531486, 19.852699594787, 1.7276311466433, 1.15266673967802, 
16.4001752272478, 0.109517029898149, 8.13437739568503, 0.783046763771767, 
0.887087942175008, 7.81951593472785, 1.08421859599168, 11.6307085751834, 
16.8245537181032, 7.93998466761581, 1.87821706275326, 2.91862884678567, 
5.89201620852042, 9.9468842404994, 0.684481436863432, 7.72642645931442, 
2.49972620742525, 2.39020917752711, 0.314861460957179, 0.210820282553937, 
0.391523381885883, 11.0803854999452, 5.45668601467528, 0.328551089694447, 
6.15759500602344, 5.01040411784032, 0.210820282553937, 0.405213010623152, 
7.84415726645493, 0.591391961450005, 6.91600043806812, 0.862446610447925, 
5.53882378709889, 6.08914686233709, 4.18081261636184, 9.81820173036907, 
0.511992114773847, 0.287482203482642, 6.00974701566093, 11.7155842733545, 
5.02409374657759, 5.71405103493593, 3.37586244661045, 0.911729273902092, 
2.69138100974702, 1.87821706275326, 2.90220129230095, 9.13098236775819, 
5.3964516482313, 1.25123206658635, 5.03778337531486, 4.35330193845143, 
3.39229000109517, 0.265578797503012, 2.35461614281021, 4.71744606286278, 
5.38002409374658, 0.577702332712737, 8.57244551527763, 0.60234366443982, 
1.40455590844376, 1.30599058153543, 2.8282772971197, 3.74000657102179, 
0.418902639360421, 11.0885992771876, 4.00284744277735, 4.69554265688314, 
0.320337312452086, 0.358668272916438, 3.70715146205235, 5.11444529624357, 
8.79421750082138, 2.47234694995072, 11.3487022231957, 13.6786770342788, 
1.73584492388566, 0.908991348154638, 0.405213010623152, 8.62994195597415, 
2.37378162304238, 5.9467747234695, 4.0411784032417, 3.36491074362063, 
0.728288248822692, 3.17325594129887, 0.643412550651626, 1.53597634432154, 
1.84809987953127, 0.681743511115979, 6.23151900120469, 1.834410250794, 
5.08980396451648, 2.44222976672873, 8.87909319899244, 1.44288686890812, 
1.67561055744168, 10.5766071624138, 1.19099770014237, 0, 0, 0, 
0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 
0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 
0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 
1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 
1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 
1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
0, 1, 0, 0, 1), .Dim = c(617L, 2L), .Dimnames = list(NULL, c("time", 
"status")), type = "right", class = "Surv"), x2 = c(3, 1, 3, 
1, 3, 3, 1, 1, 3, 3, 1, 3, 1, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 
1, 3, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 
3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 
3, 3, 3, 1, 3, 3, 3, 3, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 
2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 3, 3, 2, 1, 1, 3, 2, 2, 1, 1, 3, 
3, 2, 3, 2, 3, 2, 2, 2, 1, 3, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 
1, 2, 1, 2, 2, 2, 3, 1, 2, 1, 3, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 
2, 1, 2, 2, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 3, 2, 2, 
2, 3, 2, 2, 2, 1, 1, 1, 1, 2, 3, 2, 1, 3, 2, 2, 2, 1, 1, 1, 2, 
2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 3, 1, 1, 3, 
2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 
3, 1, 1, 2, 1, 1, 3, 1, 1, 3, 1, 2, 1, 3, 1, 1, 1, 1, 1, 2, 2, 
1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 
2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 
2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 
1, 1, 2, 2, 1, 2, 2, 2, 2, 3, 1, 1, 3, 2, 1, 2, 2, 2, 1, 1, 1, 
1, 2, 1, 1, 2, 3, 1, 2, 3, 2, 3, 1, 2, 3, 1, 3, 1, 1, 2, 3, 3, 
2, 2, 1, 1, 3, 2, 2, 2, 2, 2, 3, 3, 2, 3, 2, 2, 2, 2, 3, 2, 2, 
2, 2, 3, 3, 3, 3, 2, 2, 3, 2, 1, 1, 3, 2, 2, 1, 1, 2, 2, 2, 2, 
3, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 3, 3, 
2, 1, 3, 3, 2, 3, 3, 2, 1, 2, 3, 1, 1, 2, 3, 2, 2, 2, 3, 2, 2, 
2, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 3, 3, 1, 3, 1, 3, 3, 3, 3, 3, 
3, 1, 3, 1, 1, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 
3, 1, 1, 1, 3, 3, 3, 1, 1, 3, 3, 3, 1, 3, 3, 1, 1, 3, 1, 3, 3, 
3, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3, 3, 1, 3, 3, 1, 1, 3, 1, 3, 1, 
1, 1, 3, 3, 1, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 
1, 3, 3, 1, 1)), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, 
-617L))
```
leaving a warning rather than to just print out the message may be more apt
I wonder why the following lines are printed instead of returning a warning/error.

For me this lead to some confusion.

https://github.com/therneau/survival/blob/67f4a4036b03d493de6384dedf9967c6ab079644/R/coxph.wtest.R#L30-L34

Any thoughts? Thank you :sunflower: 
Dear professor Terry M Therneau
   I do analysis by using survival package as follows:
   `library(survival)`
   `logrank=survdiff(Surv(qsec,vs)~mpg,data=mtcars)`
   `logrank`

> Call: 
> survdiff(formula` = Surv(qsec, vs) ~ mpg, data = mtcars)
>                     N Observed Expected (O-E)^2/E (O-E)^2/V
> mpg=10.4 2    0   0.0833   0.08333   0.09091
> mpg=13.3 1        0   0.0000       NaN       NaN
> mpg=14.3 1        0   0.0000       NaN       NaN
> mpg=14.7 1        0   0.0417   0.04167   0.04348
> mpg=15   1        0   0.0000       NaN       NaN
> mpg=15.2 2        0   0.0833   0.08333   0.09091
> mpg=15.5 1        0   0.0000       NaN       NaN
> mpg=15.8 1        0   0.0000       NaN       NaN
> mpg=16.4 1        0   0.0417   0.04167   0.04348
> mpg=17.3 1        0   0.0417   0.04167   0.04348
> mpg=17.8 1        1   0.6151   0.24093   0.27812
> mpg=18.1 1        1   2.2079   0.66083   0.90407
> mpg=18.7 1        0   0.0417   0.04167   0.04348
> mpg=19.2 2        1   0.1603   4.40026   4.78422
> mpg=19.7 1        0   0.0000       NaN       NaN
> mpg=21   2        0   0.0417   0.04167   0.04348
> mpg=21.4 2        2   1.0507   0.85757   1.02454
> mpg=21.5 1        1   1.7079   0.29342   0.36744
> mpg=22.8 2        2   3.6007   0.71163   1.34289
> mpg=24.4 1        1   1.3746   0.10207   0.12290
> mpg=26   1        0   0.0000       NaN       NaN
> mpg=27.3 1        1   0.6151   0.24093   0.27812
> mpg=30.4 2        2   0.2436  12.66464  13.78553
> mpg=32.4 1        1   0.9246   0.00615   0.00716
> mpg=33.9 1        1   1.1246   0.01380   0.01627
>  **Chisq= 25.5  on 17 degrees of freedom, p= 0.08**

We see the p value is **0.08**, degree of freedom is **17**. Because the result has 7 NaN, so the degree is 25 -1 - 7, equaling to 17. 
However! In some other methords for calculating the p value of log-rank test based on survival package, they take different degrees.
**Methord 1 :**
`1 - pchisq(logrank$chisq, length(logrank$n) - 1 )`
This methord is used widely. It takes _**length(logrank$n) - 1**_ as the degree, which is **24 (25-1)**. The p value is **0.38**.
**Methord 2 :**
Package `emil` provides `pvalue` function to extract the p value from survdiff results.  [https://github.com/Molmed/emil](url)
`emil::pvalue(logrank)`
This function takes the same methord with Methord 1. So p value is still **0.38**
**Methord 3 :**
Package `survminer` also provides `ggsurvplot` function to display p value in survival plot.
`library(survminer)`
`fit<- survfit(Surv(qsec,vs)~mpg,data=mtcars)`
`ggsurvplot(fit,data=mtcars,  pval =  TRUE)`
The p value is still **0.38**.

I think these 3 methords take the same degree, 24, to calculate p value by chi-square test. However, the degree in `survival` package is 17, which omit 7 NaNs. 
So my question is: which degree is right?
Best Wishes
Jing Zhang
The following give two different results:

```
survival::coxph(survival::Surv(time,event)~arm+survival::cluster(id),weights=wgt,data=test.dat)
```

Gives:
```
Call:
survival::coxph(formula = survival::Surv(time, event) ~ arm + 
    survival::cluster(id), data = test.dat, weights = wgt)

                        coef exp(coef) se(coef)     z    p
arm                    0.246     1.279    0.663  0.37 0.71
survival::cluster(id) -0.167     0.846    0.128 -1.30 0.19
```

Using:

```
cluster = survival::cluster
survival::coxph(survival::Surv(time,event)~arm+cluster(id),weights=wgt,data=test.dat)
```

Gives:

```
survival::coxph(formula = survival::Surv(time, event) ~ arm + 
    cluster(id), data = test.dat, weights = wgt)

       coef exp(coef) se(coef) robust se     z    p
arm -0.0278    0.9726   0.6330    0.5161 -0.05 0.96

Likelihood ratio test=0  on 1 df, p=1
n= 10, number of events= 10 
```

The namespace should be stripped away automatically at the very least.


This is closely related to #70 and also probably has minimal impact.

In predict.coxph.penal, when there is only a sparse ~/penalty~ term in the model, the newdata argument (if supplied) gets ignored in calculating the predictions (except for the assignment line 45, which gets overwritten).

https://github.com/therneau/survival/blob/a676f5ec6959bc54e32c2dac94c9c336e1f08370/R/predict.coxph.penal.S#L41-L54

Currently, if newdata has been supplied, an error stops execution at line 47 unless "indx" has been defined outside the function (issue #70), but when that is fixed, the resulting predictions ignore newdata.
We noticed that `clogit` is much slower in recent `survival` package releases. The following demonstrates that `clogit` in version 2.42-6 fit a particular model in less than half a second, while the same model in version 2.44-1 took 72 seconds. 

```
library(survival)

sessionInfo()$otherPkgs$survival$Version
## [1] "2.44-1.1"

N  <- 100000
ng <- 50000

exd <-data.frame(
  g=rep(1:ng, each = N/ng),
  out=rep(0L:1L,N/2),
  x=sample(0L:1L, N/2, prob = c(.8, .2),
           replace = TRUE))

system.time({
  mod <- clogit(out ~ x + strata(g),
                method="exact",
                data = exd)
})

##   user  system elapsed 
##  71.769   0.000  71.805 

detach(package:survival)

library(devtools)

dev_mode(on = TRUE)

install_version("survival", "2.42-6")

library(survival)

sessionInfo()$otherPkgs$survival$Version
## [1] "2.42-6"

system.time({
  mod <- clogit(out ~ x + strata(g),
                method="exact",
                data = exd)
})

##   user  system elapsed 
##  0.432   0.023   0.341 
 ```