
This is a proof of concept that makes the setup.py detect the names of the OpenSSL libraries to use, rather than relying on `CRYPTOGRAPHY_WINDOWS_LINK_LEGACY_OPENSSL` being set.

I wanted to get an idea of whether this is something that might be worth finishing off considering that 1.1.x support is going away in 2.9. It might be useful for backporting to 2.8 if that happens?

I don't know whether we need to worry about the fact that this could change behaviour in environments where both the new and legacy libraries exist, but the newer libraries are broken in some way. In this situation, cryptography will either build successfully but now against the legacy libraries, or the build will fail and with errors about the legacy libraries rather than the new libraries.
If this is a concern, then I think an environment variable would need to be set to allow detection of the library to use, in which case this change might not be worthwhile.
This is a Request-For-Comments implementation of verifying X.509 certificate against set of intermediate CA certificates and set of trusted CA certificates.

It provides the following API:

```
certificate.verify(intermediates, trusted_roots, check_callback)
```

If a trusted chain cannot be built, `NoValidTrustChain` exception is raised. Otherwise, the method returns list of **trust chains** (lists of `Certificate` objects), each starting with `self` and ending in one of `trusted_roots`.

The interface is an attempt to get the best of "the new" and "the old" worlds:
* [Go verify](https://golang.org/pkg/crypto/x509/#Certificate.Verify).  
* [OpenSSL verify](https://www.openssl.org/docs/manmaster/man3/X509_verify_cert.html).

The goal is to balance between principles "do not provide unsafe defaults" and "do not make The Right Thing too complicated". Differently from Go, the method:

* Takes no verification options in arguments, as the former can be arbitrarily complex. Any additional checks must be done in the callback.
* Does not by default trust to any "system trust roots", requiring the caller to pass them explicitly
    * Note: does `cryptography` provide an easy way for the user to do so if needed, like OpenSSL's `SSL_CTX_set_default_verify_paths()`?

Differently from OpenSSL, the method:

*  **Requires** to pass the single-certificate verification callback (not just providing **possibility** to call `X509_STORE_CTX_set_verify_cb()`).
* The callback receives the full chain to which the checked certificate belongs and the index of the latter in the chain, not the fat context like `int verify_callback(int ok, X509_STORE_CTX *ctx)`.

Remaining tasks which should be done:

* Understand what more testing is necessary and write corresponding tests.
* Update the documentation.
* Provide example callbacks which would, probably **in addition to** the default callback:
    * check KU/EKU extensions
    * perform CRL/OCSP checks
* Additions are pure Python and do not depend on any `backend`, but quickly looking I have not seen a way to implement the method in `x509.base.Certificate`. So I have put it the quick-and-dirty way into `hazmat.backends.openssl.x509._Certificate`, which is probably not the way it should be done.

Closes #2381 .
I want to have custom extension handler to read and write values for custom OID.
With the current implementation it's a bit hard to do: extension handlers are registered in the `encode_asn1.py` in a constant. So I thought it would be great to have the possibility to subclass a `Backend` class and override handler in the subclass. 
I am not very familiar with the source code of `cryptography` so the solution proposed maybe not the best one. It also introduces two more hash lookups. 
Please tell if the solution does not fit somehow.
Manylinux2014 image got released some time ago. One of things it brings is support for !x86 architectures.

Cryptography is using Travis CI so two things can be joined and used to generate wheel files for aarch64 and ppc64le architectures.

Amount of software installed to be able to run 'pip install cryptography' would be cut. Also install times would be nicer.
https://www.ieee-security.org/TC/SP2017/papers/161.pdf published in 2017 shows this library is a fantastic choice for symmetric crypto tasks, but at the time was a bit confusing for asymmetric crypto. Have the identified issues already been resolved?

Wycheproof just landed a bunch of new vectors! We need to add tests for them.

- [ ] ~~`testvectors/aead_aes_siv_cmac_test.json`~~
- [ ] ~~`testvectors/aegis128L_test.json`~~
- [ ] ~~`testvectors/aegis128_test.json`~~
- [ ] ~~`testvectors/aegis256_test.json`~~
- [ ] ~~`testvectors/dsa_2048_224_sha224_p1363_test.json`~~
- [x] `testvectors/dsa_2048_224_sha224_test.json` (#5098)
- [ ] ~~`testvectors/dsa_2048_224_sha256_p1363_test.json`~~
- [x] `testvectors/dsa_2048_224_sha256_test.json` (#5098)
- [ ] ~~`testvectors/dsa_2048_256_sha256_p1363_test.json`~~
- [x] `testvectors/dsa_2048_256_sha256_test.json` (#5098)
- [ ] ~~`testvectors/dsa_3072_256_sha256_p1363_test.json`~~
- [x] `testvectors/dsa_3072_256_sha256_test.json` (#5098)
- [ ] ~~`testvectors/ecdsa_brainpoolP224r1_sha224_p1363_test.json`~~
- [ ] ~~`testvectors/ecdsa_brainpoolP256r1_sha256_p1363_test.json`~~
- [ ] ~~`testvectors/ecdsa_brainpoolP320r1_sha384_p1363_test.json`~~
- [ ] ~~`testvectors/ecdsa_brainpoolP384r1_sha384_p1363_test.json`~~
- [ ] ~~`testvectors/ecdsa_brainpoolP512r1_sha512_p1363_test.json`~~
- [ ] ~~`testvectors/ecdsa_secp224r1_sha224_p1363_test.json`~~
- [ ] ~~`testvectors/ecdsa_secp224r1_sha256_p1363_test.json`~~
- [x] `testvectors/ecdsa_secp224r1_sha3_224_test.json` (#5099)
- [x] `testvectors/ecdsa_secp224r1_sha3_256_test.json` (#5099)
- [x] `testvectors/ecdsa_secp224r1_sha3_512_test.json` (#5099)
- [ ] ~~`testvectors/ecdsa_secp224r1_sha512_p1363_test.json`~~
- [ ] ~~`testvectors/ecdsa_secp256k1_sha256_p1363_test.json`~~
- [x] `testvectors/ecdsa_secp256k1_sha3_256_test.json` (#5099)
- [x] `testvectors/ecdsa_secp256k1_sha3_512_test.json` (#5099)
- [ ] ~~`testvectors/ecdsa_secp256k1_sha512_p1363_test.json`~~
- [ ] ~~`testvectors/ecdsa_secp256r1_sha256_p1363_test.json`~~
- [x] `testvectors/ecdsa_secp256r1_sha3_256_test.json` (#5099)
- [x] `testvectors/ecdsa_secp256r1_sha3_512_test.json` (#5099)
- [ ] ~~`testvectors/ecdsa_secp256r1_sha512_p1363_test.json`~~
- [ ] ~~`testvectors/ecdsa_secp384r1_sha384_p1363_test.json`~~
- [x] `testvectors/ecdsa_secp384r1_sha3_384_test.json` (#5099)
- [x] `testvectors/ecdsa_secp384r1_sha3_512_test.json` (#5099)
- [ ] ~~`testvectors/ecdsa_secp384r1_sha512_p1363_test.json`~~
- [x] `testvectors/ecdsa_secp521r1_sha3_512_test.json` (#5099)
- [ ] ~~`testvectors/ecdsa_secp521r1_sha512_p1363_test.json`~~
- [ ] `testvectors/ed448_test.json`
- [ ] ~~`testvectors/gmac_test.json`~~
- [ ] `testvectors/hkdf_sha1_test.json`
- [ ] `testvectors/hkdf_sha256_test.json`
- [ ] `testvectors/hkdf_sha384_test.json`
- [ ] `testvectors/hkdf_sha512_test.json`
- [ ] ~~`testvectors/primality_test.json`~~
- [ ] `testvectors/rsa_oaep_2048_sha1_mgf1sha1_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_2048_sha224_mgf1sha1_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_2048_sha224_mgf1sha224_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_2048_sha256_mgf1sha1_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_2048_sha256_mgf1sha256_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_2048_sha384_mgf1sha1_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_2048_sha384_mgf1sha384_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_2048_sha512_mgf1sha1_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_2048_sha512_mgf1sha512_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_3072_sha256_mgf1sha1_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_3072_sha256_mgf1sha256_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_3072_sha512_mgf1sha1_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_3072_sha512_mgf1sha512_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_4096_sha256_mgf1sha1_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_4096_sha256_mgf1sha256_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_4096_sha512_mgf1sha1_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_4096_sha512_mgf1sha512_test.json` (#5100)
- [ ] `testvectors/rsa_oaep_misc_test.json` (#5100)
- [ ] `testvectors/rsa_pkcs1_2048_test.json`
- [ ] `testvectors/rsa_pkcs1_3072_test.json`
- [ ] `testvectors/rsa_pkcs1_4096_test.json`
- [ ] `testvectors/rsa_pss_2048_sha512_256_mgf1_28_test.json`
- [ ] `testvectors/rsa_pss_2048_sha512_256_mgf1_32_test.json`
- [ ] `testvectors/rsa_sig_gen_misc_test.json`
- [x] `testvectors/rsa_signature_2048_sha384_test.json` (#5078)
- [x] `testvectors/rsa_signature_2048_sha3_224_test.json` (#5078)
- [x] `testvectors/rsa_signature_2048_sha3_256_test.json` (#5078)
- [x] `testvectors/rsa_signature_2048_sha3_384_test.json` (#5078)
- [x] `testvectors/rsa_signature_2048_sha3_512_test.json` (#5078)
- [x] `testvectors/rsa_signature_2048_sha512_224_test.json` (#5078)
- [x] `testvectors/rsa_signature_2048_sha512_256_test.json` (#5078)
- [x] `testvectors/rsa_signature_3072_sha3_256_test.json` (#5078)
- [x] `testvectors/rsa_signature_3072_sha3_384_test.json` (#5078)
- [x] `testvectors/rsa_signature_3072_sha3_512_test.json` (#5078)
- [x] `testvectors/rsa_signature_3072_sha512_256_test.json` (#5078)
- [x] `testvectors/rsa_signature_4096_sha512_256_test.json` (#5078)
- [ ] ~~`testvectors/vmac_128_test.json`~~
- [ ] ~~`testvectors/vmac_64_test.json`~~
- [ ] `testvectors/x25519_asn_test.json`
- [ ] `testvectors/x25519_jwk_test.json`
- [ ] `testvectors/x25519_pem_test.json`
- [ ] `testvectors/x448_asn_test.json`
- [ ] `testvectors/x448_jwk_test.json`
- [ ] `testvectors/x448_pem_test.json`
- [x] `testvectors/x448_test.json` (#5077)
- [ ] ~~`testvectors/xchacha20_poly1305_test.json`~~
cryptography fails to build with compiler errors when compiled against an OpenSSL that has Certificate Transparency (CT) disabled.

Build warnings/error summary:
 * Several: `error: use of undeclared identifier  'SCT_*'`
 * Several: `error: use of undeclared identifier 'CT_LOG_*'`
 * Several: `warning: implicit declaration of function 'SCT_*' is invalid in C99`
 * Final error:

```
build/temp.freebsd-13.0-CURRENT-amd64-3.7/_openssl.c:33416:8: error: unknown type name 'ct_log_entry_type_t'
static ct_log_entry_type_t _cffi_d_SCT_get_log_entry_type(SCT const * x0)
       ^
```

Reproduction Environment:

 * Operating System: FreeBSD 13.0-CURRENT #3 r354143 (amd64)
   * FreeBSD clang version 9.0.0 (tags/RELEASE_900/final 372316) (based on LLVM 9.0.0)
 * OpenSSL: 1.1.1d-freebsd 10 Sep 2019 (via ports, with `CT` option **disabled**) 
   * `./configure: --openssldir=/usr/local/openssl  --prefix=/usr/local no-ct `
 * Python 2.7.17 / 3.7.5
 * cryptography: 2.8 (PyPI sdist)

Full build log attached:

[cryptography-2.8-no-CT-build-failure.log](https://github.com/pyca/cryptography/files/3855123/cryptography-2.8-no-CT-build-failure.log)




I'm trying to create a code showing Elliptic Curve Diffie–Hellman key agreement with more than two parties: https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange

I'm stuck after exchanging a key, I get a `shared key` which is a bytes value.
Is it possible to load this `shared_key` as a new public key?

Here is the beginning of my work:
```python
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends import default_backend

alice = ec.generate_private_key(ec.SECP384R1(), default_backend())
bob = ec.generate_private_key(ec.SECP384R1(), default_backend())
carol = ec.generate_private_key(ec.SECP384R1(), default_backend())

# Bob computes (ga)b = gab and sends it to Carol.
ab = bob.exchange(ec.ECDH(), alice.public_key())

# Carol computes (gab)c = gabc and uses it as her secret.
abc = carol.exchange(ec.ECDH(), ab) # will fail as ab is not a public key object

# Carol computes (gb)c = gbc and sends it to Alice.
bc = carol.exchange(ec.ECDH(), bob.public_key())

# Alice computes (gbc)a = gbca = gabc and uses it as her secret.
bca = alice.exchange(ec.ECDH(), bc)

# Alice computes (gc)a = gca and sends it to Bob.
ca = carol.exchange(ec.ECDH(), alice.public_key())

# Bob computes (gca)b = gcab = gabc and uses it as his secret.
cab = bob.exchange(ec.ECDH(), ca)

print(abc == bca)
print(bca == cab)
print(abc == cab)

print(abc)
```

I think I'm missing something very simple.
https://www.pythonsheets.com/notes/python-socket.html

```
$ python3 aes-gcm.py
total cost time: 15.317010641098022. [AF_ALG]
total cost time: 50.256704807281494. [cryptography]
```

Thanks to Python3.6 `socket.sendmsg_afalg()` function.