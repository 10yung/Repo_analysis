#### Describe the bug
As of now, we check the OpenGL version and create an error when we do not meet the requirements:
https://github.com/TheCherno/Hazel/blob/0716731c8e274f2e3d83aefef2222fe189a33728/Hazel/src/Platform/OpenGL/OpenGLContext.cpp#L30-L35

However, depending on the VS install, the default settings might close the debugger when the program exits (after the error), so the user has no way of noticing the error (let alone read it)

#### To Reproduce
Steps to reproduce the behavior:
Start Hazel with an OpenGL version < 4.5 and you won't be able to read the error

#### Expected behavior
Have a way of notifying the user that they do not meet the minimal requirements, in this case we (discord conversation) where thinking of implementing the log file(s) so we can see the errors, even if Hazel closes unexpectedly (or unintended).
#### Describe the bug
A followup on https://github.com/TheCherno/Hazel/pull/185#issuecomment-573086649: There is quite a significant overhead by the cleanup of the function name of the instrumentor as mensioned in https://github.com/TheCherno/Hazel/pull/185#issuecomment-569551143.
https://github.com/TheCherno/Hazel/blob/0716731c8e274f2e3d83aefef2222fe189a33728/Hazel/src/Hazel/Debug/Instrumentor.h#L75-L76

As this is already (partialy) resolved, there is still some cleanup to do, as with the different formats of the pretty printing, the std:replace is in some cases unneeded, and in other cases not enough, for example using the msvc compiler, we could still remove the unneeded __cdecl in every function name.

#### To Reproduce
Steps to reproduce the behavior:
Load a result in [chrome tracing](chrome://tracing/) and check out the function names.

#### Expected behavior
The expected behavior is to have a more uniform function name across (all) compilers.
A possible solution could be to create a static function that returns the correct function name? This function we could differ for each (supported) compiler as we already have the different pretty functions in a macro. This function could even be exposed to other parts of the (future) debugging section of the engine?

I just wanted to ask if there is any reason why Cherno didn't use the chrono header file for measuring time between frames.
Is this just becasue of preference or maybe chrono is inefficient in some way?
#### Describe the issue (if no issue has been made)
This PR doesn't fix any issue.
This PR will improve the existing `OrthographicCameraController` described below.

#### PR impact _(Make sure to add [closing keywords](https://help.github.com/en/articles/closing-issues-using-keywords))_
List of related issues/PRs this will solve:

 Impact                  | Issue/PR
------------------------ | ------
Other PRs this solves    | #171 (which has been closed)<br>resolves #161 

#### Proposed fix _(Make sure you've read [on how to contribute](https://github.com/TheCherno/Hazel/blob/master/.github/CONTRIBUTING.md) to Hazel)_
This PR adds/improves the following:
- OrthographicCameraController:
  - Camera translation speed now scales with the zoom level (implementation is different from #161).
  - Zoom Level and Enable Rotation can now be manually set at any time/any place.
  - There is a min/max zoom level limitation, but manually setting zoom level using `SetZoomLevel()` overrides that limitation.

#### Additional context
None.

#### Describe the issue (if no issue has been made)
This PR doesn't fix any issue.
This PR will improve the existing `Input` and described below.

#### PR impact _(Make sure to add [closing keywords](https://help.github.com/en/articles/closing-issues-using-keywords))_
List of related issues/PRs this will solve:

 Impact                  | Issue/PR
------------------------ | ------
Other PRs this solves    | #171 (which has been closed)

#### Proposed fix _(Make sure you've read [on how to contribute](https://github.com/TheCherno/Hazel/blob/master/.github/CONTRIBUTING.md) to Hazel)_
This PR adds/improves the following:
- Input: 
  - Add `InputKey` struct which represent a single key press or mouse button press.
  - Input checks now checks over the said `InputKey` instead of raw KeyCodes/MouseCodes enum values.
  - Add an enum `InputName` for holding the name of an input to be mapped.
  - Add a map for key mapping: each `InputName` key is assigned with one `InputKey`, and are remappable at any time/any place.
- OrthographicCameraController:
  - Update Controller to take advantage of the new Keymapping system.

#### Additional context
User can also add their own `InputName` value at user-level code.

I noticed that the Indexbuffer is using ```GL_ARRAY_BUFFER``` instead of ```GL_ELEMENT_ARRAY_BUFFER``` at ```glBindBuffer(GL_ARRAY_BUFFER, m_RendererID);```
Implements #182 

#### Is your feature request related to a problem? Please describe
Not really a "feature request", but more of a suggestion.

The result files from profiling (HazelProfile-[Startup|Runtime|Shutdown].json) shouldnt be under version control.

In order to not to have to keep remembering to not-commit these files, it would be better if they were created in a directory outside of the source tree.

#### Describe the solution you'd like
Remove these .json files from version control.
When creating instrumenation session, create the files in temporary directory instead of the current directory (which is likely to be within the hazel source tree)

#### Describe alternatives you've considered
I considered just adding the files to .gitignore.  But this doesn't seem like the right solution
(e.g. what if someone runs Sandboix app from a different working directory.  What if someone adds a new session (you'd then need to remember to update the .gitignore)

###### Describe the issue #######
I just fixed some code in ``OrthographicCamera.h`` and ``OrthographicCamera.cpp``, namely made the camera movement code more compact and readable than it was before. (in my opinion.)

###### Proposed fix #######
That is, why always write ``cos(glm:: radians(...))`` and ``sin(glm:: radians(...))`` if it can be much simplified to just ``dX`` and ``dY``. Theta is simply the name of the angle around which the camera will rotate. ``dTranslationSpeed`` and ``dRotationSpeed`` are speeds only multiplied by ``delta``. Well, ``increase*()`` and ``decrease*()`` methods are just auxiliary. (they can not be used, but it seems to me that the code looks cleaner).
---
name: 'Pull Request'
about: Propose a fix for a (small) issue in Hazel

---

#### Describe the issue (if no issue has been made)
A clear and concise description of what the issue is. Explain the difference between the expected and the current behavior.
A screenshot or copy of the error could be helpful as well.

#### PR impact _(Make sure to add [closing keywords](https://help.github.com/en/articles/closing-issues-using-keywords))_
List of related issues/PRs this will solve:

 Impact                  | Issue/PR
------------------------ | ------
Issues this solves       | None or #number(s)
Other PRs this solves    | None or #number(s)

#### Proposed fix _(Make sure you've read [on how to contribute](https://github.com/TheCherno/Hazel/blob/master/.github/CONTRIBUTING.md) to Hazel)_
A short description of what this fix is and how it fixed the issue you described.

#### Additional context
Add any other context about the solution here. Did you test the solution on all (relevant) platforms?
If not, create a [task list](https://help.github.com/en/articles/about-task-lists) here.
