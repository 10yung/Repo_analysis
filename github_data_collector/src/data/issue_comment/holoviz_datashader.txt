It looks like the tests in `datashader/tests/test_raster.py` have been getting skipped on CI because `rasterio` was not being installed in the test environment.
This PR adds support for aggregating `quadmesh` glyphs using cuda.  The cuda codepath is invoked when the data backing the provided `xarray.DataArray` is a `cupy.ndarray`.

I'm seeing 20-50x speedups in both the rectilinear and curvilinear cases.

Here are some examples: https://anaconda.org/jonmmease/gpu_quadmesh_pr/notebook
### CrossTab (Tabulate Area)
...@brendancol add description here

### Apply

...@brendancol add description here


- [x] add crosstab function
- [x] add crosstab tests
- [x] add apply function
- [ ] add apply tests
- [ ] verify CI
- [ ] add benchmarks
- [ ] add docs

most of the folks I work with in science do not use the Web Mercator, but more standard ones due to WM's known inaccuracies.  (see https://www.esri.com/arcgis-blog/products/arcgis-solutions/defense/what-does-the-nga-web-mercator-advisory-mean-for-esri-defense-and-intelligence-users/ ).  It would be a nice addition to add to the user guide in the "Project Points" section, that there are many different projections possible, and provide a link.  I will try to dig around and see if I can find a good one to use, but here is one of the first examples I pulled up:

https://rpubs.com/josezuniga/359867
Could I please ask how we can save an image with multiple panels?

For example, I can see a nice multi-panel image in the documentation below:

https://datashader.org/getting_started/Pipeline.html

<img width="1174" alt="Pipeline â€” Datashader 0 9 0 documentation - Google Chrome 2019-12-13_11-47-57" src="https://user-images.githubusercontent.com/209714/70817092-cd9edc00-1d9e-11ea-876a-849343b7a003.png">

How can we convert a `tf.Images` object into a PNG or SVG file?
When trying to perform line aggregation on a cuDF and specify an aggregator with a column you get an error:

```python
import cudf
import datashader as ds

nyc_df = cudf.read_parquet('~/Downloads/nyc_taxi_wide.parq')

cvs = ds.Canvas()

cvs.line(nyc_df, ['pickup_x', 'pickup_y'], ['dropoff_x', 'dropoff_y'], axis=1, agg=ds.mean('trip_distance'))
```

```
~/development/datashader/datashader/compiler.py in <genexpr>(.0)
     96 
     97 def make_info(cols):
---> 98     return lambda df: tuple(c.apply(df) for c in cols)
     99 
    100 

~/development/datashader/datashader/reductions.py in apply(self, df)
     36             else:
     37                 nullval = 0
---> 38             return cupy.array(df[self.column].to_gpu_array(fillna=nullval))
     39         else:
     40             return df[self.column].values

~/miniconda3/envs/rapidsai/lib/python3.7/site-packages/cupy/creation/from_data.py in array(obj, dtype, copy, order, subok, ndmin)
     39 
     40     """
---> 41     return core.array(obj, dtype, copy, order, subok, ndmin)
     42 
     43 

cupy/core/core.pyx in cupy.core.core.array()

cupy/core/core.pyx in cupy.core.core.array()

cupy/core/core.pyx in cupy.core.core._convert_object_with_cuda_array_interface()

TypeError: zip argument #2 must support iteration
```

cupy version: '6.3.0'
cudf version: '0.10.0'
It would be nice if it were easy to use Datashader as a [WMS](https://en.wikipedia.org/wiki/Web_Map_Service) server, dynamically running an aggregation and returning the result using the WMS protocol.
The geo functions described at https://datashader.org/user_guide/Geography.html are great, and it would be nice to have a few more tools for hydrology, if anyone knows how to implement them:

- [ ] Flow accumulation
- [ ] Flow direction
- [ ] Watershed

<img width="1116" alt="Screenshot 2019-11-08 18 16 50" src="https://user-images.githubusercontent.com/2786457/68517067-f689f980-0253-11ea-8e72-dfee1931b6ba.png">

## Description

trying to run the examples on a fresh install. running version 3.7 i get the above error which seems to be related to no python 3.8. i get errors when i try to upgrade because of incompatible versions of dependencies. 
