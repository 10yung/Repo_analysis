The test log files are showing the keywords with the library names.
Is there option to remove the library name from front of the keyword?
Can robotfixml be supported for py3. currently it is using beautifulsoup3 , and that is not supported for py3. we are using [robotfixml](https://pypi.org/project/robotfixml/) in our automation, and it broke due to py3 migration.

with bs4 , the fixxml tool is giving issues that needs to be checked.


We use below command for merging tests after re-run -
 `rebot --outputdir results --output merged.xml --nostatusrc --merge --noncritical skipped results/original.xml results/rerun.xml` 
It used to work fine with the Robot Framework version we used previously i.e. 3.0.2

After upgrading Robot Framework to 3.1.2, we face below issue.
In re-run, when test fails with a different reason then, the final report after merging gives two entries in the Robot report as shown in below screenshot.

![Rebot-NotMerged](https://user-images.githubusercontent.com/25796353/72347713-bedd7900-36fe-11ea-914c-4dc78cccae1b.png)


But, when test fails with same reason in re-run then, result is getting merged as shown in below image.

![Rebot-MergedResult](https://user-images.githubusercontent.com/25796353/72347761-d6b4fd00-36fe-11ea-9550-879340e4dc44.png)

Can anyone please address this issue?


When running tests from `stopping_with_signal` suite on Windows, output of robot stops and exit code is not equal to 0 even if all tests pass.

Related to [PR](https://github.com/robotframework/robotframework/pull/3428/files#diff-bc77d9acb76c4b766d6d4aae5552dd22).
Related to [PR](https://github.com/robotframework/robotframework/pull/3428).

The test `Robot.Running.Timeouts With Logging.Timeouts with programmatic logging` fails randomly on any combination of Python and OS. Either this is test case flakiness, or robot misbehaviour.

Logs are there: https://github.com/robotframework/robotframework/pull/3428/checks?check_run_id=365059240

Fixes #3280 
Problem:

Prefer to use a NOSQL database to store test reports. NOSQL databases typically require json format because its a relational database.

Solution:

Provide robotframework with the ability to use json rather than xml in the output file. 

For example:

```
           # flag --output
          robot --output output.json ./tests
```
As discussed in #3420 and with @pekkaklarck on Slack, let's land a super simple (minimal, noncontroversial) GitHub Action to enable further experimentation with Actions such as #3386 and #3390.  This PR is similar to #3276 and #3313 but running on GitHub Actions instead of Travis CI.

@tysonite @hugovk Your reviews please.
Our project hasn't had CI since the Nokia Network days when we had a Jenkins based system that was running tests on Linux and on Windows using Python, Jython and IronPython.

Luckily all our acceptance tests run in less than 10 minutes (at least on my not-so-new-anymore Linux laptop) so it's easy to run them before commits. Differences between OSes and Python interpreters are also relatively small (and we have great utils hiding differences) so typically running tests on a single OS/Python combination is enough. A good CI system would, nevertheless, have lot of benefits:

- Run tests in all/most supported OS/Python combinations to reveal problems on all of them faster. Nowadays issues with, for example, Jython and IronPython are typically noticed closer to releases and fixing them can take some extra time.
- Make it possible to commit "safe" changes without running all tests locally: the CI will soon tell if there are problems. With any larger change running tests locally would be a good idea anyway.
- Allow running tests against pull requests. This would be very nice.

There has been quite a lot of discussion about adding CI support. There are many different possible solutions, but common ideas have been:

- Use Travis or some other freely available CI system. This would be pretty setup and integrate with GitHub. Unfortunately such free solution typically only support Linux and Python, not Windows, Jython and IronPython that are important for us. Adding Windows to the mix might be possible but requires paying and/or using some other service. Having a Linux/Python only solution doesn't give much benefits compared to running tests locally before a commit.

- Build a custom CI using Jenkins, Azure Pipelines, or some other option. Our old Jenkins based CI system worked well, but maintaining it took some effort and there were also costs related to virtual machines. Setting up (and paying for) such a service has been on the [Robot Framework Foundation](https://robotframework.org/foundation/) agenda for a long time, but so far there hasn't been much concrete progress.

- Use [GitHub actions](https://github.com/features/actions). This is a new but very interesting looking solution. It seems to be about as easy to configure as Travis but also supports Windows and even OSX out-of-the-box. And it naturally has built-in GitHub integration. We even have PRs #3386 and #3390 demonstrating how it could be used. At the moment this looks the best solution for me and definitely something we should investigate more. 

One problem with all this is that my personal knowledge about CI systems is somewhat limited. Another problems is that I don't have that much time available and I'd rather use that for Robot Framework development than studying CI systems in detail. Luckily several companies in the Robot Framework Foundation have extensive CI experience and they ought to be able to help. I've already briefly discussed with @IsNoGood, @Tattoo and @Hi-Fi and hope that some of them, or possibly them as a group, could take the main responsibility driving this forward. Can you guys comment what's your current status and do you think you'd have time to look at this in the near future? The GitHub Actions work already done by @tysonite in the aforementioned PRs also looks really good and I assume he'd be willing to continue that work. The first step would thus be studying those PRs.

Let's use this issue for general discussion about CI and save more detailed discussion to the existing or new PRs. We can also use the #devel channel on our [Slack](https://robotframework-slack-invite.herokuapp.com/) for more interactive chatting.