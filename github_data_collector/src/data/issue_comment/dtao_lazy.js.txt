Bumps [lodash](https://github.com/lodash/lodash) from 4.2.1 to 4.17.15.
<details>
<summary>Commits</summary>

- [`ddfd9b1`](https://github.com/lodash/lodash/commit/ddfd9b11a0126db2302cb70ec9973b66baec0975) Bump to v4.17.15.
- [`b185fce`](https://github.com/lodash/lodash/commit/b185fcee26b2133bd071f4aaca14b455c2ed1008) Rebuild lodash and docs.
- [`be87d30`](https://github.com/lodash/lodash/commit/be87d303941222b97c482755afc0f4a77ce46c30) Bump to v4.17.14.
- [`a6fe6b1`](https://github.com/lodash/lodash/commit/a6fe6b1e174fd02b5e60eb2664405f4c1262c300) Rebuild lodash and docs.
- [`e371828`](https://github.com/lodash/lodash/commit/e37182845f16715a0d1c391c8662d83c55609cee) Bump to v4.17.13.
- [`357e899`](https://github.com/lodash/lodash/commit/357e899e685872b4af5403ecc4b2a928f961ae63) Rebuild lodash and docs.
- [`fd9a062`](https://github.com/lodash/lodash/commit/fd9a062d57646450b61f74029315abd4cc834b08) Bump to v4.17.12.
- [`e77d681`](https://github.com/lodash/lodash/commit/e77d68121ff00ba86b53eed5893d35adfe94c9dd) Rebuild lodash and docs.
- [`629d186`](https://github.com/lodash/lodash/commit/629d1865793182cd967196716f4beff223aa4a91) Update OpenJS references.
- [`2406eac`](https://github.com/lodash/lodash/commit/2406eac542b2a1282be8d812a6d8a45433ade80a) Fix minified build.
- Additional commits viewable in [compare view](https://github.com/lodash/lodash/compare/4.2.1...4.17.15)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.2.1&new-version=4.17.15)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/dtao/lazy.js/network/alerts).

</details>

Removed the unstable notice as per the author's comment at https://github.com/dtao/lazy.js/issues/225
Refactor `IndexedConcatenatedSequence` to use an `ArrayLikeSequence` for `other` property. This force `concat(ArrayLikeSequence)` to return an `ArrayLikeSequence` instead of a `Sequence` and indirectly fix #222 
Code to reproduce

```javascript
const Lazy = require('lazy.js');
const als = Lazy([1]);
console.log(als.unshift(3) instanceof Lazy.ArrayLikeSequence);
```

**expected result**: `true`
**actual result**: `false`

This is due to the use of `concat` with an ArrayLikeSequence inside `unshift`. One dirty way to fix it will be to use `toArray()` before concat. Although I think it should be wiser to refactor `IndexedConcatenatedSequence` in order to accept ArrayLikeSequence.
```
async function* iterateDir(dir) {
    let list = await fs.readdir(dir); // fs-promise implementation of readdir
    for (let file of list) {
        yield file;
    }
}

Lazy.generate(iterateDir('./out'))
  .async(1000) // specifies a 1-second interval between each element
  .map(function(x) { return String.fromCharCode(x + 65); })
  .take(26)
  .each(function(char) { console.log(char); });
```
When working with transform streams in Node.js, it's obvious how to push new values onto the stream - you simply just push additional values onto the next stream handler. With Lazy.js, underscore, lodash, etc - it's not as obvious how to introduce new values into the stream. In Lazy.js, several API calls exist to exclude or filter values, but few for introducing new values. One way to do it is to have the map() function return an array and then call flatten() next.

Please consider including a dead simple example in the docs for writing to a Lazy.js stream. The existing example for Lazy.createWrapper() is too complicated. Also, consider renaming Lazy.createWrapper to something else: like Lazy.emitter, Lazy.createEmitter, Lazy.factory, or Lazy.createFactory

The following code is what I was aiming to achieve. However, my data will ultimately come from a WebSocket. I did manage to work out how to simply and dynamically originate a Lazy.js factory.

```javascript
Lazy.emitter = Lazy.createWrapper;
Lazy.emitter(function() {
	var counter = 0;
	setInterval(function() {
		this.emit(++counter);
	}.bind(this), 100);
})()
.take(5)
.each(function(each) {
	console.log('each: ' + each);
});
```
Like lodash/fp but lazy, or https://github.com/ReactiveX/IxJS
The TC39 process seems to be settling on a specification for Observables and AsyncGenerators. It would be great to follow these APIs in Lazy.js

See also https://github.com/ReactiveX/IxJS