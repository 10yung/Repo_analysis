We have tried to minify the actual code, it does, but some part of code still not minified. pls see the attached screenshots.
![Screenshot_1](https://user-images.githubusercontent.com/38184543/71458206-aea14080-27c7-11ea-8d20-733dcd6070ea.png)
![Screenshot_2](https://user-images.githubusercontent.com/38184543/71458207-aea14080-27c7-11ea-90aa-66572863b608.png)


Let make variables inside functoin with minified

For Example i give
```
function logging(log) {
    console.log(log);
}
```
to minified
`function logging(a){console.log(a)}`
or
`const logging=a=>console.log(a);`
Would it be nice to have a function just like minify(), except that it doesn't minify the data?

Example, i can add multiple files into an instance in order to get an aggregated content out of all. Thing is that i want to avoid the minification as the files i am adding are already minified.

Is there a functionality already? I searched the code and i couldn't find a function to just merge all files together and return the content of all.
Fatal error: Cannot declare class MatthiasMullie\Minify\CSS, because the name is already in use in /home4/wajtu60af5oo/public_html/wp-content/plugins/dpc-pwa-for-wp/classes/Libs/minify/src/CSS.php on line 690
Includes @Tabrisrp's "add multiline flag to extractCalcs pattern"
calc() expressions not followed by end of line or semicolon are matched with the rest of the content on that line until the first semicolon. Sometimes this breaks the calc() expression like in the example below:

Original CSS:

`.e-gallery-masonry .e-gallery-item
{
    --percent-height: 0;
    position:absolute;
    width:calc(100% / var(--columns) - (var(--hgap) * (var(--columns) - 1) / var(--columns)));
    left:calc((100% / var(--columns) - (var(--hgap) * (var(--columns) - 1) / var(--columns))) * var(--column) + (var(--hgap) * var(--column)));
    top:calc(var(--percent-height) + (var(--row) * var(--vgap)))
}`

Minified CSS:

`.e-gallery-masonry .e-gallery-item{--percent-height:0;position:absolute;width:calc(100% / var(--columns) - (var(--hgap) * (var(--columns) - 1) / var(--columns)));left:calc((100% / var(--columns) - (var(--hgap) * (var(--columns) - 1) / var(--columns))) * var(--column) + (var(--hgap) * var(--column)));top:calc(var(--percent-height)+(var(--row) * var(--vgap)))}`

The problem is that there are no spaces around the last + (`...height)+(var(--row)...`)
Hi, can it be?
A empty rule like .selector{} has as result that a some classes later following background image will not correctly converted to base64. 

.selector {}
... some other filled classes
.other-selector {background: url(folder/image.png) no-repeat; ... } 

The part of this image in the generated css looks like:
background: url(ꛠ    ꛠ                     ·             0 ·     øꛠ            °ꛠ    <      °ꛠ            :1px solid gray;margin-bottom:4px}

if the empty .selector is commented all is fine.
(PHP7.2, WinSCP, Notepad++)
Related: #137, #217

Consider

```css
:root {
--some-var: 0px;
}
p {
margin-left: calc(20px + var(--some-var));
}
```

`0px` should not be modified to 0.
The addFile method will throw an exception if it fails to read a file.

Resolves [#296](https://github.com/matthiasmullie/minify/issues/296)
When adding several files to be minified either by the constructor or using the `add()` method, the function assumes that the argument is a plain css/js code if it fails to load a file. This results in broken code since the file path is added to the minified code.

This is especially common when working with several dynamic js/css files. When it happens, no error occurs and no exception is thrown. It fails silently and without warning the developer.

I propose a new method `addFile()` that expects only file names in its arguments and fail if a file is unreadable.