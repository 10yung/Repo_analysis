When drawing a part of a surface which is opaque, we can turn off blending.
This happens when the same event is sent repeatedly to the server. Of course, the client shouldn't do this, but the server should still handle it gracefully. See: https://github.com/any1/wayvnc/commit/e2079a7e56a54755b21e809c4f73dfdb67d28f45
When a touch device is disconnected and hence destroyed while it has active touch points in wlr_seat, they are left dangling and never cleared.
- [ ] Should we make the output commit fail if VRR can't be enabled? We don't know when VRR is indeed enabled, but in some cases we know when it fails. We still don't have support for test-only commits, so dealing with failures is going to be annoying for compositors.
- [ ] We need a Wayland protocol for VRR.
- [ ] Sway implementation

Minimal Sway patch blindly enabling VRR: https://sr.ht/N-_6.diff

Fixes: https://github.com/swaywm/wlroots/issues/1406
This series add a new `wlr_output_layer` API, an implementation of this API in the Wayland backend and an example compositor.

My plan is to make [glider](https://github.com/emersion/glider) switch to this API to demonstrate how it can be implemented under DRM.

## Introduce wlr_output_layer

This new API allows compositors to display buffers without needing to
perform rendering operations. This API can be implemented on Wayland
using subsurfaces and on DRM using KMS planes.
    
The goal is to make use of this API in a future scene-graph API.

## backend/wayland: implement the output layer API

The output layer API is implemented using subsurfaces. I chose to
implement this API in the Wayland backend before doing so in the DRM
backend, because it's way easier on Wayland. On DRM, one needs to figure
out how buffers can be mapped to KMS planes (libliftoff can help) and
perform atomic test-only commits (our current DRM backend isn't ready
for this).

## examples: add output-layers example

This new example demonstrates how to use the wlr_output_layer API. It's
a compositor that displays all client surfaces using wlr_output_layer.
To test, one can for instance run:
    
    build/examples/output-layers -s 'weston-simple-dmabuf-egl & weston-simple-egl'
    
Under the Wayland backend (where layers work as long as clients use
DMA-BUFs), thsi should display two surfaces.
A new wlr_scene API has been added, following the design ideas from [1].
The new API contains the minimal set of features required to make the
API useful. The goal is to design a solid fundation and add more
features in the future.

[1]: https://github.com/swaywm/wlroots/issues/1826#issuecomment-564601757
On my desktop (AMD RX 580):
```
└─ env WAYLAND_DEBUG=1 examples/dmabuf-capture 29 vaapi /dev/dri/renderD129 libx264 nv12 12 test.mkv
[4053147.922]  -> wl_display@1.get_registry(new id wl_registry@2)
[4053147.943]  -> wl_display@1.sync(new id wl_callback@3)
[4053147.995] wl_display@1.delete_id(3)
[4053148.003] wl_registry@2.global(1, "wl_shm", 1)
[4053148.011] wl_registry@2.global(2, "zwp_linux_dmabuf_v1", 3)
[4053148.017] wl_registry@2.global(3, "wl_drm", 2)
[4053148.024] wl_registry@2.global(4, "wl_compositor", 4)
[4053148.033] wl_registry@2.global(5, "wl_subcompositor", 1)
[4053148.041] wl_registry@2.global(6, "wl_data_device_manager", 3)
[4053148.053] wl_registry@2.global(7, "zwlr_gamma_control_manager_v1", 1)
[4053148.060] wl_registry@2.global(8, "gtk_primary_selection_device_manager", 1)
[4053148.069] wl_registry@2.global(9, "zxdg_output_manager_v1", 3)
[4053148.076] wl_registry@2.global(10, "org_kde_kwin_idle", 1)
[4053148.083] wl_registry@2.global(11, "zwp_idle_inhibit_manager_v1", 1)
[4053148.091] wl_registry@2.global(12, "zwlr_layer_shell_v1", 2)
[4053148.099] wl_registry@2.global(13, "xdg_wm_base", 2)
[4053148.107] wl_registry@2.global(14, "zwp_tablet_manager_v2", 1)
[4053148.115] wl_registry@2.global(15, "org_kde_kwin_server_decoration_manager", 1)
[4053148.126] wl_registry@2.global(16, "zxdg_decoration_manager_v1", 1)
[4053148.136] wl_registry@2.global(17, "zwp_relative_pointer_manager_v1", 1)
[4053148.145] wl_registry@2.global(18, "zwp_pointer_constraints_v1", 1)
[4053148.154] wl_registry@2.global(19, "wp_presentation", 1)
[4053148.163] wl_registry@2.global(20, "zwlr_output_manager_v1", 1)
[4053148.172] wl_registry@2.global(21, "zwlr_export_dmabuf_manager_v1", 1)
[4053148.183]  -> wl_registry@2.bind(21, "zwlr_export_dmabuf_manager_v1", 1, new id [unknown]@4)
[4053148.196] wl_registry@2.global(22, "zwlr_screencopy_manager_v1", 2)
[4053148.207] wl_registry@2.global(23, "zwlr_data_control_manager_v1", 2)
[4053148.216] wl_registry@2.global(24, "zwp_primary_selection_device_manager_v1", 1)
[4053148.226] wl_registry@2.global(25, "zwp_virtual_keyboard_manager_v1", 1)
[4053148.236] wl_registry@2.global(26, "zwlr_input_inhibit_manager_v1", 1)
[4053148.246] wl_registry@2.global(27, "wl_seat", 7)
[4053148.255] wl_registry@2.global(28, "zwp_pointer_gestures_v1", 1)
[4053148.265] wl_registry@2.global(29, "wl_output", 3)
[4053148.278]  -> wl_registry@2.bind(29, "wl_output", 1, new id [unknown]@5)
[4053148.293] wl_registry@2.global(30, "wl_output", 3)
[4053148.303]  -> wl_registry@2.bind(30, "wl_output", 1, new id [unknown]@6)
[4053148.317] wl_callback@3.done(871)
[4053148.373] wl_output@5.geometry(0, 0, 600, 340, 2, "Dell Inc.", "Dell S2716DG", 0)
[4053148.398] wl_output@5.mode(0, 640, 480, 59940)
[4053148.411] wl_output@5.mode(0, 640, 480, 60000)
[4053148.424] wl_output@5.mode(0, 800, 600, 60317)
[4053148.437] wl_output@5.mode(0, 1024, 768, 60004)
[4053148.450] wl_output@5.mode(0, 1280, 720, 59951)
[4053148.461] wl_output@5.mode(0, 1280, 800, 59951)
[4053148.473] wl_output@5.mode(0, 1440, 900, 59951)
[4053148.485] wl_output@5.mode(0, 1280, 1024, 59951)
[4053148.497] wl_output@5.mode(0, 1680, 1050, 59951)
[4053148.509] wl_output@5.mode(0, 1600, 1200, 59951)
[4053148.521] wl_output@5.mode(0, 1920, 1080, 59951)
[4053148.532] wl_output@5.mode(0, 1920, 1200, 59951)
[4053148.544] wl_output@5.mode(0, 2560, 1440, 23971)
[4053148.556] wl_output@5.mode(0, 2560, 1440, 84983)
[4053148.568] wl_output@5.mode(0, 2560, 1440, 99946)
[4053148.579] wl_output@5.mode(0, 2560, 1440, 119998)
[4053148.590] wl_output@5.mode(1, 2560, 1440, 143998)
[4053148.609] wl_output@5.mode(2, 2560, 1440, 59951)
[4053148.622] wl_output@6.geometry(0, 0, 530, 300, 2, "Unknown", "G-SYNC 241910", 0)
[4053148.641] wl_output@6.mode(0, 640, 480, 60000)
[4053148.653] wl_output@6.mode(0, 800, 600, 60000)
[4053148.664] wl_output@6.mode(0, 1024, 768, 60000)
[4053148.676] wl_output@6.mode(0, 1280, 720, 60000)
[4053148.687] wl_output@6.mode(0, 1280, 800, 60000)
[4053148.698] wl_output@6.mode(0, 1440, 900, 60000)
[4053148.709] wl_output@6.mode(0, 1280, 1024, 60000)
[4053148.719] wl_output@6.mode(0, 1680, 1050, 60000)
[4053148.731] wl_output@6.mode(0, 1920, 1080, 59940)
[4053148.741] wl_output@6.mode(0, 1920, 1080, 84905)
[4053148.752] wl_output@6.mode(0, 1920, 1080, 99930)
[4053148.763] wl_output@6.mode(0, 1920, 1080, 119982)
[4053148.775] wl_output@6.mode(1, 1920, 1080, 144001)
[4053148.786] wl_output@6.mode(2, 1920, 1080, 60000)
Capturable output: Dell Inc. Model: Dell S2716DG: ID: 29
Capturable output: Unknown Model: G-SYNC 241910: ID: 30
[libx264 @ 0x559a43b42ec0] using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2 AVX
[libx264 @ 0x559a43b42ec0] profile High, level 6.2, 4:2:0, 8-bit
[libx264 @ 0x559a43b42ec0] 264 - core 157 r2980 34c06d1 - H.264/MPEG-4 AVC codec - Copyleft 2003-2019 - http://www.videolan.org/x264.html - options: cabac=1 ref=1 deblock=1:0:0 analyse=0x3:0x113 me=hex subme=2 psy=1 psy_rd=1.00:0.00 mixed_ref=0 me_range=16 chroma_me=1 trellis=0 8x8dct=1 cqm=0 deadzone=21,11 fast_pskip=1 chroma_qp_offset=0 threads=12 lookahead_threads=4 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 constrained_intra=0 bframes=3 b_pyramid=2 b_adapt=1 b_bias=0 direct=1 weightb=1 open_gop=0 weightp=1 keyint=250 keyint_min=25 scenecut=40 intra_refresh=0 rc_lookahead=10 rc=abr mbtree=1 bitrate=12000 ratetol=1.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 ip_ratio=1.40 aq=1:1.00
Output #0, matroska, to 'test.mkv':
    Stream #0:0: Video: h264, nv12, 2560x1440, q=2-31, 12000 kb/s, 144 fps, 1k tbn
[4053238.259]  -> zwlr_export_dmabuf_manager_v1@4.capture_output(new id zwlr_export_dmabuf_frame_v1@3, 1, wl_output@5)
[4053238.520] zwlr_export_dmabuf_frame_v1@3.frame(2560, 1440, 0, 0, 0, 1, 875713089, 16777215, 4294967295, 1)
[4053238.572] zwlr_export_dmabuf_frame_v1@3.object(0, fd 9, 15728640, 0, 10240, 0)
[4053245.437] zwlr_export_dmabuf_frame_v1@3.ready(0, 296, 985693242)
[4053245.577]  -> zwlr_export_dmabuf_manager_v1@4.capture_output(new id zwlr_export_dmabuf_frame_v1@7, 1, wl_output@5)
[AVHWFramesContext @ 0x559a43b46b00] Failed to read image from surface 0x2: 1 (operation failed).
[4053245.721]  -> zwlr_export_dmabuf_frame_v1@3.destroy()
[libx264 @ 0x559a43b42ec0] AVFrame.format is not set
[libx264 @ 0x559a43b42ec0] AVFrame.width or height is not set
[4053245.758] zwlr_export_dmabuf_frame_v1@7.frame(2560, 1440, 0, 0, 0, 1, 875713089, 16777215, 4294967295, 1)
[4053245.795] zwlr_export_dmabuf_frame_v1@7.object(0, fd 9, 15728640, 0, 10240, 0)
[libx264 @ 0x559a43b42ec0] Input picture width (2560) is greater than stride (0)
[dmabuf-capture @ 0x7ffc954ef0f0] Error encoding: Generic error in an external library!
[4053252.332] wl_display@1.delete_id(3)
[4053252.367] zwlr_export_dmabuf_frame_v1@7.ready(0, 296, 992605184)
^C[dmabuf-capture @ 0x7ffc954ef0f0] Quitting!
^C
```
On my laptop (Intel Core i5-5200U):
```
└─ env WAYLAND_DEBUG=1 examples/dmabuf-capture 29 vaapi /dev/dri/renderD128 libx264 nv12 12 test.mkv
[4121521.525]  -> wl_display@1.get_registry(new id wl_registry@2)
[4121521.578]  -> wl_display@1.sync(new id wl_callback@3)
[4121521.720] wl_display@1.delete_id(3)
[4121521.755] wl_registry@2.global(1, "wl_shm", 1)
[4121521.792] wl_registry@2.global(2, "zwp_linux_dmabuf_v1", 3)
[4121521.819] wl_registry@2.global(3, "wl_drm", 2)
[4121521.844] wl_registry@2.global(4, "wl_compositor", 4)
[4121521.867] wl_registry@2.global(5, "wl_subcompositor", 1)
[4121521.891] wl_registry@2.global(6, "wl_data_device_manager", 3)
[4121521.918] wl_registry@2.global(7, "zwlr_gamma_control_manager_v1", 1)
[4121521.942] wl_registry@2.global(8, "gtk_primary_selection_device_manager", 1)
[4121521.969] wl_registry@2.global(9, "zxdg_output_manager_v1", 3)
[4121521.993] wl_registry@2.global(10, "org_kde_kwin_idle", 1)
[4121522.021] wl_registry@2.global(11, "zwp_idle_inhibit_manager_v1", 1)
[4121522.051] wl_registry@2.global(12, "zwlr_layer_shell_v1", 2)
[4121522.089] wl_registry@2.global(13, "xdg_wm_base", 2)
[4121522.107] wl_registry@2.global(14, "zwp_tablet_manager_v2", 1)
[4121522.137] wl_registry@2.global(15, "org_kde_kwin_server_decoration_manager", 1)
[4121522.167] wl_registry@2.global(16, "zxdg_decoration_manager_v1", 1)
[4121522.195] wl_registry@2.global(17, "zwp_relative_pointer_manager_v1", 1)
[4121522.225] wl_registry@2.global(18, "zwp_pointer_constraints_v1", 1)
[4121522.266] wl_registry@2.global(19, "wp_presentation", 1)
[4121522.297] wl_registry@2.global(20, "zwlr_output_manager_v1", 1)
[4121522.325] wl_registry@2.global(21, "zwlr_export_dmabuf_manager_v1", 1)
[4121522.352]  -> wl_registry@2.bind(21, "zwlr_export_dmabuf_manager_v1", 1, new id [unknown]@4)
[4121522.395] wl_registry@2.global(22, "zwlr_screencopy_manager_v1", 2)
[4121522.424] wl_registry@2.global(23, "zwlr_data_control_manager_v1", 2)
[4121522.449] wl_registry@2.global(24, "zwp_primary_selection_device_manager_v1", 1)
[4121522.478] wl_registry@2.global(25, "zwp_virtual_keyboard_manager_v1", 1)
[4121522.503] wl_registry@2.global(26, "zwlr_input_inhibit_manager_v1", 1)
[4121522.532] wl_registry@2.global(27, "wl_seat", 7)
[4121522.565] wl_registry@2.global(28, "zwp_pointer_gestures_v1", 1)
[4121522.594] wl_registry@2.global(29, "wl_output", 3)
[4121522.633]  -> wl_registry@2.bind(29, "wl_output", 1, new id [unknown]@5)
[4121522.673] wl_callback@3.done(17814)
[4121522.775] wl_output@5.geometry(0, 0, 290, 170, 2, "Sharp Corporation", "0x1420", 0)
[4121522.855] wl_output@5.mode(3, 1920, 1080, 59934)
Capturable output: Sharp Corporation Model: 0x1420: ID: 29
[AVHWDeviceContext @ 0x559fd4e962c0] Failed to initialise VAAPI connection: -1 (unknown libva error).
[dmabuf-capture @ 0x7ffd67abb7a0] Failed to create a hardware device: Input/output error
[4121523.143]  -> zwlr_export_dmabuf_manager_v1@4.destroy()
```
>I'd prefer to have a dict instead (e.g. protocols_code.get(name) would return the file for the generated code for instance).

That's actually a pretty good idea. Unfortunately meson (0.52.1) can't use a non string literal for a dictionary key:
```python
protocol_code = {}
foreach proto, path : protocols
    # ...
    protocol_code += { proto: code } # This is invalid
endforeach
```
And due to the way dictionaries work (i.e. they're pure) and some dictionary-of-dictionaries type stuff, I can't really think of a way to work around this (e.g. putting it in the protocols dictionary).

But this will be fixed in 0.53.0: https://mesonbuild.com/Syntax.html#dictionaries
It has been left as set_variable/get_variable currently, but changed to use an array of protocol strings in the wayland backend.
I think this should be revisited when the next meson version is out and we eventually target it for whatever reason.

_Originally posted by @ascent12 in https://github.com/swaywm/wlroots/pull/1931_
Add a destroy listener for textures, which destroys the gles2 textures
when the renderer is destroyed.

Fixes #1949

----

I am not entirely sure about the API changes, since the `wlr_renderer` is now passed directly to the texture creation functions. I am all ears for possible improvements.
Upcoming KMS feature

See https://patchwork.freedesktop.org/series/68378/