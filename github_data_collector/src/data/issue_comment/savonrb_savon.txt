**What kind of change is this?**
Feature

**Summary of changes**
Fixes #834 Supports write_timeout option.
Write timeout is supported by HTTPI but not by Savon.

**Other information**
While not having the setting is limiting, it can also cause issues in
adapters. For example, when setting timeouts per operation in HTTP, any
timeouts not supplied will be set to 0.25 seconds which can lead to
unexpected surprises for users
To skip noise in #904 I am opening a separate issue concerning update of information on http://savonrb.com

As stated by @pcai,

> The maintainers no longer have control of the savonrb domain name or website content, so we are unable to update this inaccurate statement.

The `savonrb.com` domain WHOIS details contain following info:

> Updated Date: 2019-10-26T00:00:00Z
> Registrar Registration Expiration Date: 2020-03-31T00:00:00Z

So, seemingly the domain records were updated 1.5 months ago and it will expire in March
Direct contact information is protected by WHOIS privacy guarding, but there's helpful link to contact form

> Registrant Email: https://webform.meshdigital.com

Could somebody from savonrb team give it a shot and attempt establishment of communication via that avenue?

---

/cc @sos4nt @rubiii

<!-- Please don't delete this template or we'll close your issue -->
<!-- Before creating an issue, please ensure you are using the latest version of savon. -->

# Bug report

<!-- Please ask questions on StackOverflow. Questions or support requests will be closed. -->
<!-- https://stackoverflow.com/questions/ask?tags=savon -->

**Current behavior:**

Savon exposes a global option `:unwrap` which should be passed through to Gyoku:

In `Savon::Options`:
```
    # Tell Gyoku to unwrap Array of Hashes
    # Accepts a boolean, default to false
    def unwrap(unwrap)
      @options[:unwrap] = unwrap
    end
```

However, this is not being passed through to Gyoku in the soap header:

```
module Savon
  class Header

    def initialize(globals, locals)
      @gyoku_options  = { :key_converter => globals[:convert_request_keys_to] }
```

so the option is being ignored.  Fixing it is trivial:

```
module Savon
  class Header

    def initialize(globals, locals)
      @gyoku_options  = { :key_converter => globals[:convert_request_keys_to], :unwrap => globals[:unwrap] }
```

**Steps to reproduce current behavior:**

```
Savon::Client.new(
soap_header: {languages: [{language: 'ruby'},{language: 'java'}]},
unwrap: true
)
```

**Expected behavior:**

Expected header is: `<languages><language>ruby</language><language>java</language></languages>`

Actual header is `<languages><language>ruby</language></languages><languages><language>java</language></languages>`

**System information:**

* ruby version:  2.6.2
* savon version: 2.12.0

Happy to make a pull request but as it's a quick fix I'm hoping this isn't necessary?

Types were not properly qualified

**What kind of change is this?**

Bugfix

**Did you add tests for your changes?**

Yes. I've now added a breaking test which ensures the message is properly encoded.

**Summary of changes**

This fixes a bug raised in #916. This means more recent versions of Savon do not work properly in certain specific circumstances when elements are embedded in types.

**Other information**

The test is based on a real-world wsdl file in which messages are being incorrectly "qualified".
<!-- Please don't delete this template or we'll close your issue -->
<!-- Before creating an issue, please ensure you are using the latest version of savon. -->

# Bug report

<!-- Please ask questions on StackOverflow. Questions or support requests will be closed. -->
<!-- https://stackoverflow.com/questions/ask?tags=savon -->

**Current behavior:**

Attributes within a nested type are no longer qualified.

```xml
<?xml version="1.0" encoding="UTF-8"?><soap:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tns="xxx" 
xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"><soap:Body><tns:CreateNewBusinessWithPolicy
xmlns="xxx"><tns:Business><SchemeCode>D</SchemeCode><SchemeBranch>[NO BRANCH]</SchemeBranch><BusinessType>78</BusinessType><NumInstalments>10</NumInstalments></tns:Business></tns:CreateNewBusinessWithPolicy></soap:Body></soap:Envelope>
```

**Steps to reproduce current behavior:**

Create any document with types with attributes and set `elementFormDefault="qualified"` in WSDL.
The attributes in the nested type will not be qualified.

**Expected behavior:**

Create any nested document with attributes and `elementFormDefault="qualified"` and see that attributes are qualified.

```xml
<?xml version="1.0" encoding="UTF-8"?><soap:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tns="xxx"
xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"><soap:Body><tns:CreateNewBusinessWithPolicy
xmlns="xxx"><tns:Business><tns:SchemeCode>D</tns:SchemeCode><tns:SchemeBranch>[NO BRANCH]</tns:SchemeBranch><tns:BusinessType>78</tns:BusinessType><tns:NumInstalments>10</tns:NumInstalments></tns:Business></tns:CreateNewBusinessWithPolicy></soap:Body></soap:Envelope>
```

See also this example of a properly formatted document: https://www.intertech.com/Blog/xml-schema-elementformdefault-and-attributeformdefault/

**System information:**
Mac OS Mojave 10.14.6

* ruby version: 2.6.5
* savon version: 2.12.0

The bug was introduced in this PR: https://github.com/savonrb/savon/pull/676

```ruby
From: gems/2.6.0/gems/savon-2.6.0/lib/savon/qualified_message.rb @ line 27 Savon::QualifiedMessage#to_hash:

    12: def to_hash(hash, path)
    13:   require 'pry'; binding.pry
    14:   return unless hash
    15:   return hash.map { |value| to_hash(value, path) } if hash.kind_of?(Array)
    16:   return hash.to_s unless hash.kind_of? Hash
    17:
    18:   hash.inject({}) do |newhash, (key, value)|
    19:     if key == :order!
    20:       add_namespaces_to_values(value, path)
    21:       newhash.merge(key => value)
    22:     else
    23:       translated_key = Gyoku.xml_tag(key, :key_converter => @key_converter).to_s
    24:       newpath = path + [translated_key]
    25:
    26:       if @used_namespaces[newpath]
    27:         newhash.merge(
    28:           "#{@used_namespaces[newpath]}:#{translated_key}" =>
  =>   29:             to_hash(value, @types[newpath] ? [@types[newpath]] : newpath)
    30:         )
    31:       else
    32:         newhash.merge(translated_key => value)
    33:       end
    34:     end
    35:   end
    36: end
```

There is no apparent test coverage of this area of the code. I looked at adding a breaking test to `spec/savon/builder_spec.rb` however not sure how to create nested types for the test

The following test passes without the fix:

```ruby
    it "uses the global :element_form_default option if it's available " do
      globals[:element_form_default] = :qualified
      locals[:message] = {
        :username => "luke",
        :password => "secret",
        :nested_attributes => {
          :attr1 => "value",
          :attr2 => "value2"
        }
      }

      expect(builder.to_s).to include("<tns:nestedAttributes><tns:attr1>value</tns:attr1><tns:attr2>value2</tns:attr2></tns:nestedAttributes>")
    end
```

I will submit a PR to fix this shortly.
**What kind of change is this?**

Bug fix for Puma not starting in tests

**Did you add tests for your changes?**

No... but this should fix existing test failures.

**Summary of changes**

There appears to be an existing bug here:

https://github.com/savonrb/savon/pull/912
```
  1) Options global: endpoint and namespace sets the SOAP endpoint to use to allow requests without a WSDL document
419     Failure/Error: @server = IntegrationServer.run
420     LoadError:
421       load error: puma/java_io_buffer -- java.lang.reflect.InaccessibleObjectException: Unable to make field protected byte[] java.io.ByteArrayOutputStream.buf accessible: module java.base does not "opens java.io" to module jruby
422     # ./spec/integration/support/server.rb:1:in `(root)'
423     # ./spec/integration/support/server.rb:31:in `block in initialize'
424     # ./spec/integration/support/server.rb:10:in `run'
425     # ./spec/savon/options_spec.rb:11:in `(root)'
```
https://travis-ci.org/savonrb/savon/jobs/580376246

**Other information**

https://github.com/puma/puma/blob/3b706288f01bb09e626be441e0546c188c623986/.travis.yml#L56-L57
What kind of change is this?

Add Ruby 2.6.3 to the TravisCI config so that the build runs the tests against the latest version of Ruby and update README accordingly

Did you add tests for your changes?

No need to add tests.

Summary of changes

Simple addition of Ruby 2.6.3 to the .travis.yml file and corresponding README changes.
**What kind of change is this?**

This PR removes the no-longer-used Travis setting `sudo: false`. See [more at the Travis blog](https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration).


**Did you add tests for your changes?**

No.


Fixes #899 #820 #895 #862
We use Savon in production and I'd like to know whether the project is still actively maintained.

I ask because many recent GitHub issues were closed unanswered and although the website states that _"Savon v3 is currently under development"_, the last commit is from Dec 18, 2018. The last release is even older: January 17, 2018.

This is no offense â€“ I know that maintaining open source isn't easy. I just want to make sure that we don't use an abandoned gem in production.

Would be great to get some insights.