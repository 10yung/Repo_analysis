This replaces the old readme content with the one available at https://docs.openzeppelin.com/contracts, but keeps the contributing and security sections, along with the badges and logo.
Because we have a single unified site for all 2.x versions, we do what I call _content-versioning_: the documentation content itself provides information about different versions. For example, the docs for [`Address.toPayable()`](https://docs.openzeppelin.com/contracts/2.x/api/utils#Address-toPayable-address-) indicate it's only available starting from v2.4.0.

We should add the same notes for all new features in the upcoming v2.5.0 release: see the [changelog](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CHANGELOG.md#250-unreleased) for what these are.
**üßê Motivation**

I'm subclassing ERC777 to build custom tokens.  There is some functionality that would beneficial to use, such as `_burn` and `_callTokensToSend`, but isn't made available to subclasses because their visibility is `private`.

**üìù Details**

My request is that functions that are `private` instead become `internal` to allow for easier extensibility.

I don't want to cut-and-paste anymore!

See https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2048


<!-- Briefly describe the issue you're experiencing. Tell us what you were trying to do and what happened instead. -->
After deploy ERC-721 Contract, when I am trying to use transferFrom or any function it's showing 

Gas estimation errored with the following message (see below). The transaction execution will likely fail. Do you want to force sending?
gas required exceeds allowance (8000000) or always failing transaction

<!-- Remember, this is not a place to ask for help debugging code. For that, we welcome you in the OpenZeppelin Community Forum: https://forum.openzeppelin.com/. -->

**üíª Environment**

<!-- Tell us what version of OpenZeppelin Contracts you're using, and how you're using it: Truffle, Remix, etc. -->

**üìù Details**

<!-- Describe the problem you have been experiencing in more detail. Include as much information as you think is relevant. Keep in mind that transactions can fail for many reasons; context is key here. -->

**üî¢ Code to reproduce bug**

<!-- We will be able to better help if you provide a minimal example that triggers the bug. -->

This pull request corresponds to issue #2036 
This issue has yet to be discussed, but as I had already written the code before opening it, I chose to create the PR for reference while discussing the issue.

Please, do read #2036 and join the discussion.

Fixes #

*Changes for this PR are in the lifecycle and the access folders*

* Added RevokerRole contract in *access*
This is a new role that corresponds to the Revokeble contract described below.

* Added Revokable contract in *lifecycle*
This contract allows any account with the Revoker role to call a revoke method, which permanently revokes the current contract. This adds a whenNotRevoked modifier that reverts if the contract is revoked. Revoking cannot be undone, similarly to Pausing, but permanent. (View #2036)
I would like to start a short discussion about a possible new contract at the lifecycle namespace, next to the pausable one.

The Pausable contract allows developers to pause a contract's functions, and later, if desired, unpause it. This means that in case of emergency, or if a bug is detected, someone can call the pause method on the contract and quickly disable all functions with the appropriate modifier.

I would like to propose we add a **Revokable** contract, with its corresponding RevokerRole (exactly same design as the Pausable feature) that allows developers to permanently disable a contract if needed. This means, should a problem arise, they can simple revoke the contract and rest asured that in not way will that contract ever be unpaused.

In its workings, it consists of a Pausable contract without the *unpause* method.

I have already written the code for the feature described, and later realized I had not opened an issue, so I created the PR so we can view the changes while discussing the feature. You can find the PR [here](https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2037)

A variation of this feature would be to consider the Pauser and Revoker roles as one, this is, a LifecicleController role, or rather some better name. This would mean that a signle contract can implement both Pausable and Revokable, for temporary and definitve disabling of the contract, but instead of having to manage two roles, one for each feaure, they could simply have a single role that is in charge of pausing, unpausing or revoking the contract.
This last part is rather controversial, but I think it's worth a short discussion about whether the role is supposed to enable pausing or managing the whole lifecycle.
**üßê Motivation**
There is no current contract to swap. we have to use Kybernetwork or related stuff for exchange of token . Can you guys figure it out if we can make a contract for this.WOuld love to give my inputs.


Sorry, this is more of the question rather than a feature request or bug report. üôè

Referring to this commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/3a5da758767cfbcf256bdd147c56dbb0a2541569#diff-6202e31fca333ecfb19d878145bc8db5

The `_allowed` method is moved to be after `_transfer`. What is the rationale behind that @nventuro? (The allowance used to be reduced before doing the transfer.)
![image](https://user-images.githubusercontent.com/2575012/71337706-51b34980-257f-11ea-8f1b-88401ea3fd0d.png)

Should possible further actions that depend on allowance be checked by deducting the allowance first before committing to the actions? 
As mentioned in https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2014#issuecomment-565499083 this is a simple implementation of the metadata URI part of ERC1155.

I'm still a bit confused on how to do tests for OpenZeppelin (this is my first PR to the project), so I have not added tests in this PR for now. Help would be appreciated.
**üßê Motivation**
<!-- Is your feature request related to a specific problem? Is it just a crazy idea? Tell us about it! -->
OpenZeppelin Contracts support for Solidity 0.6 has been requested in the forum: https://forum.openzeppelin.com/t/when-solidity-0-6-0-support-for-oz-contracts-library/1948

**üìù Details**
<!-- Please describe your feature request in detail. -->
Create a version of OpenZeppelin Contracts with support for [Solidity 0.6](https://github.com/ethereum/solidity/releases/tag/v0.6.0).

<!-- Make sure that you have reviewed the OpenZeppelin Contributor Guidelines. -->
<!-- https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/CONTRIBUTING.md -->
