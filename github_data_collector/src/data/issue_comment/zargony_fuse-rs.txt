`ioctl(TCGETS)` on a file opened from a filesystem implemented with `fuse-rc` causes filesystem to be unmounted:

```
[2019-12-03T13:26:05Z ERROR fuse::request] Unknown FUSE opcode (39)
[2019-12-03T13:26:05Z INFO  fuse::session] Unmounted /tmp/m
```

Such ioctl is issued e.g. by `git gui` on file `.git/HEAD` for some reason.

Using Linux kernel version 4.19.85.
`libfuse` has `fusexmp.c`, so `fuse-rs` should be `examples/xmp.rs`.

Supposed to just mirror root filesystem using `libstd`'s `std::fs::*` operations.

The example is rather crude and not all operations are supported, but a simple `cargo init ; cargo run` test works on that filesystem.

P.S. Only now stumbled upon https://github.com/wfraser/fuse-mt/tree/master/example.
This patch allows one to provide a different value for setting `max_write` which can be useful for some use cases.

This patch does change the API of `mount` and `spawn_mount`. Given the existing API, I wasn't sure how else to introduce this feature.

Feedback is welcome.
Currently, the value of `max_write is hardcoded in https://github.com/zargony/fuse-rs/blob/master/src/request.rs#L93.  This is a bit problematic for my usecase where I want to be able to create file sytems with different `max_write` parameters.

I have a patch which I will submit as a PR shortly that implements the above.  However, the PR changes the API of `mount` and `spawn_mount`.  Given the existing API, I wasn't sure how else to introduce this feature.  Feedback is welcome.
README:

> Rust-FUSE does not just provide bindings, it is a rewrite of the original FUSE C library to fully take advantage of Rust's architecture.

Changelog:

> Link libosxfuse on macOS, libfuse on all other systems.

Where's the truth? I supposed it only needed `fusermount` suid executable, not the library.

---

Can I cross-compile projects using `rust-fuse` without having C compiler or libraries around? Or how else can I use advantages of it being "not just the bindings"?
I work a lot with `rust-fuse` under Android however there is a lot of adjustment to make it work, several reasons for this:
- Libfuse is mostley unavailable (mountpoint must be mount from the FUSE device using `libc::mount`).
- FUSE filesystem can only be mounted from a root process.
- There is some Android kernel specific FUSE operations that are actually very specific to the `FAT` emulation layer of Android.
- On Android device mountpoint must match the `FAT` emulation layer.

for theses reasons a native rust mount feature must be written, a remove-all of the libfuse depandancy and some OS specific op code to make it work.
Currently all these features are available into my fork although some rewriting is required to maintain code quality so I wonder if it's worth to start a serious PR for the addition of Android support or these too specific changes and low demand make it should stay in a indepandant fork.

Hi,
I have only fuse3 installed and not fuse.
When I build, I have this message
```
error: failed to run custom build command for `fuse v0.3.1`

Caused by:
  process didn't exit successfully: `/code/target/debug/build/fuse-1376467231d8cdf5/build-script-build` (exit code: 101)
--- stderr
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Failure { command: "\"pkg-config\" \"--libs\" \"--cflags\" \"fuse\" \"fuse >= 2.6.0\"", output: Output { status: ExitStatus(ExitStatus(256)), stdout: "", stderr: "Package fuse was not found in the pkg-config search path.\nPerhaps you should add the directory containing `fuse.pc\'\nto the PKG_CONFIG_PATH environment variable\nNo package \'fuse\' found\nPackage fuse was not found in the pkg-config search path.\nPerhaps you should add the directory containing `fuse.pc\'\nto the PKG_CONFIG_PATH environment variable\nNo package \'fuse\' found\n" } }', src/libcore/result.rs:999:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

But I have installed Fuse from [libfuse repository](https://github.com/libfuse/libfuse) and `pkg-config` found it
```bash
root@7e49463b58f3:/usr/local/include/fuse# pkg-config --list-all | grep fuse
fuse3                 fuse3 - Filesystem in Userspace
```

Do I install `libfuse-dev` like in #54 ?
If I build with Fuse2 is this compatible with Fuse3?

This is necessary when an external build system (e.g. Buck) is taking
care of linking in libfuse, and we don't want the Rust compiler to emit
any linking arguments.
Next (second) step towards a more modern architecture and idiomatic interfaces. First step happened in #125.

- Move `FileAttr` and `FileType` to `ll` module and improve docs
- Modernized `Request` and `reply::*` types
- Modernized `Filesystem` trait (use return values)
- Modernized kernel communication (based on `io::Read` and `io::Read` traits)

TODO:
- Modernize session handling (almost done)
- Use futures for filesystem trait return types / use async_trait
- Improve `reply::Directory` and `reply::XAttr`
- Support async session (requires kernel communication to be based on `AsyncRead`/`AsyncWrite`, probably needs I/O reactor(?) and tokio dependency)
