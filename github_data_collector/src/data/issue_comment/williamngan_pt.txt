Is there a way to reproduce this easily in new version ?
http://williamngan.github.io/pt/demo/index.html?name=grid.occupy

I'm looking for a way to look for available space in a grid so Grid.occupy looked at a good way to start. But it's not available anymore.

Many thanks !
This may already be achievable but I'm not quite sure how to do it so pardon if this is the wrong place for this. I am using this for a background effect very similar to the space.add demo. However I have some other dom elements positioned over the canvas which prevents the effect from occurring when the mouse passes over them. 

I would like to make the onMouseAction work with a window even instead of just the canvas elements mouse event.

Hopefully that makes sense and sorry again if this is the wrong place for this. 
Please, help
How to make canvas fluid, or simply reinit when window resizing.
Applying to the demos - I want make something interesting on my website with them.
Compiling pt currently requires a global installation of gulp. I think it can be worth introducing some npm scripts to avoid having to install gulp globally.

Example (`package.json`):

```
{
  name: "ptjs",
  ...
  "scripts": {
    "gulp:watch": "gulp" <-- uses the local gulp dependency
  }
}
```
Let's get this party started ðŸŽŠ 
- I've added a very simple demo.
- I've changed the `demo/index.html` file and the `gulpfile.js` to make this easier to review. Just run `gulp extend` and check out the demo to get started ðŸ˜„ .

Problems:
- In the `ForceDirectedGraph` file, I have multiple classes implemented.
  - Ideally:
    - We'd like `Graph` to maybe extend `PointSet`
    - We'd like `Edge` to maybe extend `Pair`
- No live (force) simulation. I am unsure how to approach this. I initially thought just moving a vertex and running the algorithm again would be an option, but it gets super jittery.
- The current `Edge` implementation is bad and looks like that because I wanted it to be compatible with `Form.lines`.

Let me know your thoughts. Please take a look at this when you have time and sorry for not splitting it into multiple commits ðŸ’¦ ..

Is it possible to create a CanvasSpace with transparent background? 

I'm currently using 
`new CanvasSpace('id').setup({ bgcolor: 'rgba(0,0,0,0.1)' });`
with no luck

Thanks!


For example, when I use Pt with React I should be able to destroy the Canvas Instance when the component leave.

When initializing a CanvasSpace on a container that already contains a canvas, the size attribute of the CanvasSpace instance does not get updated with the canvas element's size, resulting in empty renderings. This case should be supported according to documentation ("an id property which refers to the "id" attribute of the canvas element in DOM. If no canvas element with this id is found, a new canvas element will be created."). I'd also see dropping this use case from the docs as a quicker solution.

I find the documentation for CanvasSpace to be unclear about how to initialize it and call its display() method. The CanvasSpace's id attribute is briefly explained as:
"an id property which refers to the "id" attribute of the canvas element in DOM. If no canvas element with this id is found, a new canvas element will be created."
While the display method's parent_id attribute is described as:
"the DOM element into which the canvas element should be appended".

So right now to select/obtain the canvas element you want to use for pt, you need to write something like CanvasSpace('canvasId').display('#canvasContainer'). I found it very easy to get confused and get it wrong, so I'm just suggesting to add one or two example usages there. And maybe highlight the fact that by default, with no parameters specified, it will simply append a new canvas element to a container with id "pt".
