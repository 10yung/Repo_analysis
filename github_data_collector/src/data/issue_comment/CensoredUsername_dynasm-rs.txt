Is there a plan to make the crate work on stable Rust at some point, i.e. using procedural macros (either via https://github.com/dtolnay/proc-macro-hack or using proper expression macros when they eventually arrive)?

I would like to use dynasm-rs for a JIT for modular sound synthesis, and I don't mind depending on unstable Rust to begin with, but it would be nice to have some assurance that it will work on stable eventually.
I'm building a JIT that runs on bare metal and therefore `std` is not available. Is it possible to make `dynasm-rs` compatible with the `no_std` mode (with `alloc`), as long as OS-dependent things like executable memory management are left to the user?
Each implementer of DynasmLabelApi defines a Relocation type which should be used by the plugin to inform the runtime what kind of relocation is needed. Unfortunately, currently it is not possible to construct the associated type properly in the plugin code generation stage as is it only aware of the name that the assembler struct is bound to, and not the correct associated type. While future additions to rust might make this possible (in a `typeof` or `decltype` like manner), currently this means that the Relocation type is limited to being a simple type like a tuple of primitives, and that invalid values in these will cause an error at runtime.
This bug contains a listing of improvements to be made to the library, sorted by priority. 

General

 - High

    - [x] Modularizing different assembly dialects. Currently the only supported assembly language is x64, both in the plugin and the runtime. For the plugin the assembly language to use should be a setting determined by directives or crate attributes preferably, while for the runtime having each dialect in a separate submodule implementing the same traits would be the way to go. As for internal plugin infrastructure, it seems best to me that different assembly languages have completely separate parsing and compiling implementations (dialects like x86/x64 could share them), but all of them end up producing something that a common serialization module can understand.
    - [x] x86 support
    - [x] x64 support needs to be tested thoroughly.
    - [ ] a comprehensive testing framework that not only allows to test the current implementation, but also future extensions with reference tools.

- Medium

    - [ ] Toolchain improvement: as the project consists out of several different crates in subfolders, building and testing everything is less than ergonomic currently.
    - [ ] Improving the quality of error messages. Mainly the error messages when an instruction isn't found or when an instruction variant doesn't exist are a little bare-bones
    - [ ] Currently, no checking is done on redundant prefixes or impossible prefixes.
    - [x] For several ops (like x64 movsx) default to a certain argument size if the size of an argument isn't correctly specified. This should result in an error.
    - [x] ARM support
    - [x] Assembler::align is hardcoded to align as to what is required by x64.
    - [x] Support in the runtime to keep track of all relocations caused by labels. This is important on the roadmap for x86 support, or x64 code only using a 32-bit address space.
    - [x] Review the x64 operand size determination code and how it deals with immediate sizes.

- Low

    - [x] x64/x86 address displacement size hint
    - [x] automatic size optimization for constant immediate / displacement arguments
    - [ ] AVX-512 support
    - [ ] MIPS support

- Assembly dialect specific

    - x64

      - [x] Jumps with 16-bit relative offsets are illegal in long mode on intel CPUs (they work fine on AMD though.).
Currently there are no real tests except from a general feature checking file.

The instruction encoding data in particular really needs to be checked.
