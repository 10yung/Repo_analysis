### Environment

1. `node -v`: [v10.16.3]
1. `npm -v`: [6.9.0]
1. `npm ls jest` or `npm ls react-scripts` (if you haven’t ejected): [fill]
1. your vscode-jest settings if customized:
    - jest.pathToJest? [fill]
    - jest.pathToConfig? [fill]
    - anything else that you think might be relevant? [fill]

1. Operating system: [windows 10]

### Prerequisite
- are you able to run jest test from command line? [fill]
- how do you run your tests from command line? (for example: `npm run test` or `node_modules/.bin/jest`) [fill]

### Steps to Reproduce

<!-- Please create a repository that reproduces the issue with the minimal amount of code possible. -->

[fill]

### Relevant Debug Info

<!-- If applicable, following self-diagnosis in https://github.com/jest-community/vscode-jest/blob/master/README.md#troubleshooting, and include the relevant debug info here to speed up the issue resolution -->

[fill]

### Expected Behavior

provide content menu option to indirect to test output (console.log etc).We have to rerun failed test to see actual output at present,(may be wrong)

### Actual Behavior

[fill]


--- 

The fastest (and the most fun) way to resolve the issue is to submit a pull-request yourself. If you are interested, feel free to check out the [contribution guide](https://github.com/jest-community/vscode-jest/CONTRIBUTING.md), we look forward to seeing your PR... 

My tests run, they show up in the window, but I can't find anything I can click on to take me to the source in question.  Parts of the UI are clickable, but go to source doesn't seem to be an option.....
### Environment

1. `node -v`: 12.9.1
1. `yarn -v`:  1.21.1
1. `npm ls jest` or `npm ls react-scripts` (if you haven’t ejected): react-scripts@3.3.0
1. your vscode-jest settings if customized:
    - jest.pathToJest? yarn test

1. Operating system: macOS 10.15.2

### Prerequisite
- are you able to run jest test from command line? yes
- how do you run your tests from command line? (for example: `npm run test` or `node_modules/.bin/jest`) yarn test

### Steps to Reproduce

<!-- Please create a repository that reproduces the issue with the minimal amount of code possible. -->

- create a workspace with multiple folders
- add a folder (folder-1) without any test, in package.json add a test script with `--passWithNoTests`, `vscode-jest` will still consider jest failed.
- add another folder (folder-2) without any test, in package.json, add a test script with `"test": echo "no test yet"`

### Relevant Debug Info

<!-- If applicable, following self-diagnosis in https://github.com/jest-community/vscode-jest/blob/master/README.md#troubleshooting, and include the relevant debug info here to speed up the issue resolution -->

from folder-1 output channel:

```
Done in 0.93s.

Starting Jest in Watch mode failed too many times and has been stopped.
Consider add this workspace folder to disabledWorkspaceFolders
 see troubleshooting: https://github.com/jest-community/vscode-jest/blob/master/README.md#troubleshooting

```

from folder-2 output channel:
```
yarn run v1.21.1

$ echo 'test not yet implemented' --testLocationInResults --json --useStderr --outputFile /var/folders/vg/yw9mltwd1mj_29xbvhwywc980000gn/T/jest_runner_core.json --watch --no-coverage --no-color --reporters default --reporters /Users/xxx/.vscode/extensions/orta.vscode-jest-3.1.0/out/reporter.js

test not yet implemented --testLocationInResults --json --useStderr --outputFile /var/folders/vg/yw9mltwd1mj_29xbvhwywc980000gn/T/jest_runner_core.json --watch --no-coverage --no-color --reporters default --reporters /Users/xxx/.vscode/extensions/orta.vscode-jest-3.1.0/out/reporter.js

Done in 0.06s.

Starting Jest in Watch mode failed too many times and has been stopped.
Consider add this workspace folder to disabledWorkspaceFolders
 see troubleshooting: https://github.com/jest-community/vscode-jest/blob/master/README.md#troubleshooting
```

### Expected Behavior

- folder-1 output channel has wiped out the actual command executed
- it should not report jest test failure
- if it must, at least show which folder is failed in the helper popup
- our troubleshooting section should be revamped to provide better self-help instructions...

### Actual Behavior

right now all failures in a workspace env suggest users to "disableWorkspaceFolders", which is not always helpful

--- 

The fastest (and the most fun) way to resolve the issue is to submit a pull-request yourself. If you are interested, feel free to check out the [contribution guide](https://github.com/jest-community/vscode-jest/CONTRIBUTING.md), we look forward to seeing your PR... 

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/jest-community/vscode-jest/network/alerts).

</details>
Is there anything special that needs to be done for the "Debug" code-lens in a typescript project?

I'm able to run tests fine, I have set `"jest.pathToJest": "yarn test"`, which properly bootstraps jest to use my `ts-jest` based config.

However, trying the `Debug` code-lens on a specific test results in the extension running:

```
$ "C:\\Program Files\\nodejs\\node.exe" --inspect-brk=25940 node_modules\\jest\\bin\\jest.js --runInBand some.service.spec.ts --testNamePattern "should ret
urn results for free text search" 
```

Which does not include anything related to my `ts-jest` config, thus jest complains about unexpected tokens related to typescript syntax.

I've searched the issues but can't find anything related to this.
I am new to Jest framework. I have followed the steps for installation from following blog:
https://www.valentinog.com/blog/ui-testing-jest-puppetteer/#UI_testing_with_Jest_and_Puppeteer_setting_up_the_project

when I run the test with command 'npm run test' I get following error:

● Test suite failed to run

    E:\Jest Tutorial\getting-started-with-jest\__tests__\test1.form.spec.js:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,global,jest){import faker from "faker";
                                                                                                    ^^^^^

    SyntaxError: Unexpected identifier

      at ScriptTransformer._transformAndBuildScript (node_modules/@jest/transform/build/ScriptTransformer.js:537:17)


**My package.json looks like this:**

{
  "name": "getting-started-with-jest",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "jest"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "babel-core": "^6.26.3",
    "babel-jest": "^24.9.0",
    "babel-preset-env": "^1.7.0",
    "faker": "^4.1.0",
    "jest": "^24.9.0",
    "puppeteer": "^2.0.0"
  }
}


**and .babelrc looks like below:**
{
    "presets": ["env"]
}  

Can someone let me know what I am missing?
## 🚀 Feature Proposal

This debug button is present when the test fails and this works nice.

Lately I've been writing a lot of tests and some of them were green although they weren't supposed to be. It would be great if the debug button was there when the test was successful.

As a workaround i just add a `fail()` and wait until the test fails, then i can debug it.

## 📷 Screenshots
The debug button is missing but i can understand why.
![image](https://user-images.githubusercontent.com/20490672/71357176-0734cb80-2585-11ea-9369-3b8c5a9fd5df.png)

The debug button that i mean:
![image](https://user-images.githubusercontent.com/20490672/71357198-187dd800-2585-11ea-8d3d-05744f69dd68.png)

Similar to Visual Studio Live Testing feature, where each line of code provides red / green status:
![image](https://user-images.githubusercontent.com/15230040/71114649-e7925180-21d8-11ea-9088-89f95ef78b4d.png)

Green if line is covered by a passing test, and red if a test covering this line currently fails.

Also, when user clicks red mark, they can go to failing test(s).

I would like to champion this feature, but would love some feedback from maintainers: Do you see any problems with this feature that may prevent you from accepting it?

Also, if possible, who can I talk to discuss best approach to enhance coverage data - i.e. which test is covering which line?
### Environment

1. `node -v`: [fill]
1. `npm -v`: [fill]
1. `npm ls jest` or `npm ls react-scripts` (if you haven’t ejected): [fill]
1. your vscode-jest settings if customized:
    - jest.pathToJest? [fill]
    - jest.pathToConfig? [fill]
    - anything else that you think might be relevant? [fill]

1. Operating system: [fill]

### Prerequisite
- are you able to run jest test from command line? [fill]
- how do you run your tests from command line? (for example: `npm run test` or `node_modules/.bin/jest`) [fill]

### Steps to Reproduce

<!-- Please create a repository that reproduces the issue with the minimal amount of code possible. -->

[fill]

### Relevant Debug Info

<!-- If applicable, following self-diagnosis in https://github.com/jest-community/vscode-jest/blob/master/README.md#troubleshooting, and include the relevant debug info here to speed up the issue resolution -->

[fill]

### Expected Behavior

[fill]


### Actual Behavior

[fill]


--- 

The fastest (and the most fun) way to resolve the issue is to submit a pull-request yourself. If you are interested, feel free to check out the [contribution guide](https://github.com/jest-community/vscode-jest/CONTRIBUTING.md), we look forward to seeing your PR... 

No matter my settings I get some version of ENOENT when vscode-jest spawns. The issue is that neither `node` nor `npm` is on the path in whatever context that gets spawned.

Looking at vscode docs it seems that this should be honoured:
`"terminal.integrated.automationShell.osx": "/usr/local/Cellar/fish/3.0.2/bin/fish",`

but it doesn't seem to be. However, I have npm and node binaries in my path for all shells, bash, zsh and fish so probably not the root issue. I remember I had problems with MacOS and env in atom/vscoce a few years back, but I think it has been smooth for quite some time now. 

I also  do start vscode from command line. So it should inherit env, no?

I use nvm and I've tried running with:

`npm test --`
`nvm use 10; npm test --`
`node_modules/.bin/jest`

Nothing works. No binaries are present.

### Environment

1. `node -v`: ❯ v10.17.0
1. `npm -v`: 6.13.1
1. `npm ls jest` or `npm ls react-scripts` (if you haven’t ejected): jest@24.9.0

1. Operating system: MacOS 10.15.1 (19B88)

### Prerequisite
- are you able to run jest test from command line? yes
- `npm run test`

### Expected Behavior
Tests running :)

### Actual Behavior
```

Exception raised: Process failed: spawn npm ENOENT
Finished running all tests. Starting watch mode.

Exception raised: Process failed: spawn npm ENOENT

Exception raised: Process failed: spawn npm ENOENT

Exception raised: Process failed: spawn npm ENOENT

Exception raised: Process failed: spawn npm ENOENT

Exception raised: Process failed: spawn npm ENOENT
Starting Jest in Watch mode failed too many times and has been stopped.
Consider add this workspace folder to disabledWorkspaceFolders
 see troubleshooting: https://github.com/jest-community/vscode-jest/blob/master/README.md#troubleshooting

```

And from devtools:
```
console.ts:137 [Extension Host] spawning process with command=npm, args=test,--,--testLocationInResults,--json,--useStderr,--outputFile,/var/folders/kd/z0qzgl6x20dfwk3n3ny2wz8w0000gn/T/jest_runner.json,--watch,--no-color,--config,/Users/viktor.hedefalk/[my project****]/jest.config.js
notificationsAlerts.ts:40 Starting Jest in Watch mode failed too many times and has been stopped. Consider add this workspace folder to disabledWorkspaceFolders
--- 
```