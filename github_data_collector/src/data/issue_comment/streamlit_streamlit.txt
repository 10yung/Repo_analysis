I want to add modules according to a dynamic number and get error:

'''
    dynamic_number = 10
    for i in range(dynamic_number):
        uploaded_file = st.file_uploader('上传测试图片', type=['png', 'jpg', 'jpeg', 'tif', 'tiff'])
'''

The question is, how to create a dynamic number of st modules?
### Problem

I would like to be able to display a holoviews plot in a streamlit app that was generated from hvplot.pandas.

### Solution

I'd like to propose the following top-level API call:

```python
nice_plot = pd.DataFrame(...).hvplot.plot_function_call()
st.hvplot_chart(nice_plot)
```

To do this, I would like to propose the following simple wrapper that would accomplish this.

```python
def hvplot_chart(plot):
    return st.bokeh_chart(hv.render(plot, backend='bokeh'))
```

### Additional context

This issue originated from [this discussion form post](https://discuss.streamlit.io/t/plotting-holoviews-plot/215/3?u=ericmjl).
### Problem

app.py:
```python
import datetime
import streamlit as st

def bar():
    return datetime.strptime("12", "%H")

@st.cache
def foo():
    return bar()

def main():
    foo()

if __name__ == '__main__':
    main()
```
`streamlit run app.py`

The error message in the browser:
```
Streamlit failed to hash an object of type <class 'function'>.

...

TypeError: object supporting the buffer API required
Traceback:

  File "/home/ole/.miniconda3/envs/streamlit-pg/lib/python3.7/site-packages/streamlit/ScriptRunner.py", line 324, in _run_script
    exec(code, module.__dict__)
  File "/home/ole/src/streamlit_test/app.py", line 15, in <module>
    main()
  File "/home/ole/src/streamlit_test/app.py", line 12, in main
    foo()
  File "/home/ole/.miniconda3/envs/streamlit-pg/lib/python3.7/site-packages/streamlit/caching.py", line 463, in wrapped_func
    return get_or_set_cache()
  File "/home/ole/.miniconda3/envs/streamlit-pg/lib/python3.7/site-packages/streamlit/caching.py", line 432, in get_or_set_cache
    code_hasher.update(func)
  File "/home/ole/.miniconda3/envs/streamlit-pg/lib/python3.7/site-packages/streamlit/hashing.py", line 211, in update
    self._update(self.hasher, obj, context)
  File "/home/ole/.miniconda3/envs/streamlit-pg/lib/python3.7/site-packages/streamlit/hashing.py", line 243, in _update
    hasher.update(b)
```

To me it's hard to guess from the reported error that the cause is a "compile" error inside `bar`

Wrapping the content of `_code_to_bytes` in hashing.py in a try catch reveals the real error - in this case very helpful: 

```AttributeError: module 'datetime' has no attribute 'strptime'```

### Solution

Somehow collect the root-cause exception and display that in the browser. Bonus if more info is collect, like the associated function name (in case of function hashing)
# Summary

Type here a clear and concise description of the bug. Aim for 2-3 sentences.

# Steps to reproduce

What are the steps we should take to reproduce the bug:

Run 'streamlit hello' after installing via pip

Enter blank on the email step (same behaviour if you enter one)

## Expected behavior:

Streamlit hello world applications run on localhost..

## Actual behavior:

Get this error when I try to run it:

[Errno 2] No such file or directory: 'O:\\.streamlit\\credentials.toml'

## Is this a regression?

Has worked for other team members on laptops

# Debug info

- Streamlit version: latest and 0.49.0
- Python version: 3.7
- Using Conda? PipEnv? PyEnv? Pex? Tried Conda and PyEnv
- OS version: Windows
- Browser version:

# Additional information

I am using a VM if that matters. This happens if I try to run a sample streamlit app also. I do not have an 'O:' drive mounted so not sure why its looking for credentials.toml file there.

I used the following Dockerfile to build an image of my streamlit app:
```
FROM continuumio/miniconda3:latest
WORKDIR /app
COPY . /app/
RUN conda config --add channels conda-forge \
    && conda env create -n myapp -f environment.yml \
    && rm -rf /opt/conda/pkgs/*
ENV STREAMLIT_CONFIG_SERVER_PORT=8050
CMD conda run -n myapp streamlit run app.py
```

However, if I try to use port forwarding to access the container, then port 8050 does not work. Conversely, if I use `--server.port=8050` in the last line, it does work.
# Summary

Migrated a deck_gl chart to PyDeck API.  When page is run get a UserWarning that the Mapbox API key is not set.  Old deck_gl_chart() function does not display the warning. 

# Steps to reproduce

1:  Get a personal mapbox token,  Verify it is set using streamlit config show

[mapbox]

```
# Configure Streamlit to use a custom Mapbox token for elements like st.deck_gl_chart and st.map. If you don't do this you'll be using Streamlit's own token, which has limitations and is not guaranteed to always work. To get a token for yourself, create an account at https://mapbox.com. It's free! (for moderate usage levels)
# Default: "pk.eyJ1IjoidGhpYWdvdCIsImEiOiJjamh3bm85NnkwMng4M3dydnNveWwzeWNzIn0.vCBDzNsEF2uFSFk2AM0WZQ"
# The value below was set in C:\Users\...path...\.streamlit\config.toml
token = "pk.eyJ1Ijoia25......................."
```

2. Run a PyDeck chart, any demo should do
3. Inspect the output from streamlit run app.py in the shell

## Expected behavior:

map displays, no message in shell

## Actual behavior:

Map displays, shell displays a UserWarning

```
You can now view your Streamlit app in your browser.

  URL: http://localhost:8501

c:\apps\anaconda3\envs\ccadash\lib\site-packages\pydeck\bindings\deck.py:82: UserWarning: Mapbox API key is not set. This may impact available features of pydeck.
  UserWarning,
```

## Is this a regression?

That is, did this use to work the way you expected in the past?
yes

# Debug info

- Streamlit version:0.53.0
- Python version: 3.7.3
- Using Conda? PipEnv? PyEnv? Pex?   Conda
- OS version:   Windows 10
- Browser version:  Chrome  Version 79.0.3945.117 (Official Build) (64-bit)

# Additional information

If needed, add any other context about the problem here. For exmaple, did this bug come from https://discuss.streamlit.io or another site? Link the original source here!

# Summary

Plotly graphs fail to extend in width and fill the screen in "wide mode" in 0.53. Works in 0.52.2. 

# Steps to reproduce

Minimal streamlit app:
```
import streamlit as st
import cufflinks
fig = cufflinks.datagen.lines().iplot(asFigure=True)
st.write(fig)
```
Check 'wide mode' in settings.

# Debug info

- Streamlit version: 0.53
- Python version: 3.5.4
- Plotly version: 4.4.1
- Cufflinks version: 0.17.2
- OS version: Windows 10 as well as Debian-based docker image

# Summary

I'm trying to let my user easily switch to another location with a `st.selectbox` or change the zoom or pitch via sliders. But it does not work.

![pydeck_initial_view_state_not_working](https://user-images.githubusercontent.com/42288570/72585574-e8f58d80-38ee-11ea-9662-5b517486bc7e.gif)


# Steps to reproduce

What are the steps we should take to reproduce the bug:

1. Run the code below
2. Try changing the initial_view_state settings via the app

# Code

```python
import pathlib

import pandas as pd
import pydeck as pdk
import streamlit as st
import numpy as np

POWER_PLANT_URL = (
    "https://raw.githubusercontent.com/MarcSkovMadsen/awesome-streamlit/master/"
    "gallery/global_power_plant_database/global_power_plant_database.csv"
)

LOCATIONS = {
    "Orsted Copenhagen HQ": {"latitude": 55.676098, "longitude": 12.568337},
    "Orsted Boston": {"latitude": 2.361145, "longitude": -71.057083},
}
ORSTED_CPH_HQ = LOCATIONS["Orsted Copenhagen HQ"]


class ViewStateComponent:
    def __init__(self):
        self.latitude = ORSTED_CPH_HQ["latitude"]
        self.longitude = ORSTED_CPH_HQ["longitude"]
        self.zoom = 3
        self.pitch = 40.0

    def edit_view(self):
        location = st.sidebar.selectbox("Location", options=list(LOCATIONS.keys()), index=0)
        self.latitude = LOCATIONS[location]["latitude"]
        self.longitude = LOCATIONS[location]["longitude"]

        self.zoom = st.sidebar.slider("Zoom", min_value=0, max_value=11, value=self.zoom)
        self.pitch = st.sidebar.slider(
            "Pitch", min_value=0.0, max_value=100.0, value=self.pitch, step=10.0
        )

    @property
    def view_state(self) -> pdk.ViewState:
        return pdk.ViewState(
            longitude=self.longitude,
            latitude=self.latitude,
            zoom=self.zoom,
            min_zoom=1,
            max_zoom=15,
            pitch=self.pitch,
            # bearing=-27.36,
        )


class GlobalPowerPlantDatabaseApp:
    def __init__(self):
        self.view_state_component = ViewStateComponent()
        self.data = self.get_data()

    @staticmethod
    @st.cache
    def get_data():
        data = pd.read_csv(POWER_PLANT_URL)

        return data[["latitude", "longitude"]].dropna()

    def _scatter_plotter_layer(self):
        return pdk.Layer(
            "ScatterplotLayer",
            data=self.data,
            get_position=["longitude", "latitude"],
            extruded=True,
            get_radius=5000,
            pickable=True,
            opacity=0.8,
            stroked=False,
            filled=True,
            wireframe=True,
        )

    def view(self):
        self.view_state_component.edit_view()  # Does not work

        st.pydeck_chart(
            pdk.Deck(
                map_style="mapbox://styles/mapbox/light-v9",
                initial_view_state=self.view_state_component.view_state,
                layers=[self._scatter_plotter_layer()],
            )
        )


app = GlobalPowerPlantDatabaseApp()
app.view()
```

# Debug info

- Streamlit version: 0.53
- Python version: 3.7.4
- `python -m venv .venv`
- OS version: Windows 8.1
- Browser version: Chrome
# Summary

I've upgraded to Streamlit 0.53 and wan't to test out the new `st.pydeck_chart` function.

At some stage in my work I wan't to add tooltips and I cannot make it work. For example the example from the documentation at https://deckgl.readthedocs.io/en/latest/tooltip.html does not work.

In Streamlit the output of the code below does not show the data

![image](https://user-images.githubusercontent.com/42288570/72584291-d0cf3f80-38e9-11ea-93a3-13d05f88ec5d.png)

In HTML the output of the code below shows the data with tooltips

![image](https://user-images.githubusercontent.com/42288570/72584326-e8a6c380-38e9-11ea-9eb8-441aa81c5417.png)

# Steps to reproduce

1. Run the code below
2. Inspect the browser output

# Code

```python
"""Example from https://deckgl.readthedocs.io/en/latest/tooltip.html"""
import streamlit as st
import pydeck as pdk

UK_ACCIDENTS_DATA = (
    "https://raw.githubusercontent.com/uber-common/"
    "deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv"
)

layer = pdk.Layer(
    "HexagonLayer",
    UK_ACCIDENTS_DATA,
    get_position="[lng, lat]",
    auto_highlight=True,
    elevation_scale=50,
    pickable=True,
    elevation_range=[0, 3000],
    extruded=True,
    coverage=1,
)

# Set the viewport location
view_state = pdk.ViewState(
    longitude=-1.415, latitude=52.2323, zoom=6, min_zoom=5, max_zoom=15, pitch=40.5, bearing=-27.36
)

# Combined all of it and render a viewport
r = pdk.Deck(
    map_style="mapbox://styles/mapbox/light-v9",
    layers=[layer],
    initial_view_state=view_state,
    tooltip={"html": "<b>Elevation Value:</b> {elevationValue}", "style": {"color": "white"}},
)
r.to_html("test.html", open_browser=True, notebook_display=False)
st.pydeck_chart(r)
```

- Streamlit version: 0.53
- Python version: 3.7.4
- Using `python -m venv .venv`
- OS version: Windows 8.1
- Browser version: Chrome
I want to be able to show clickable content via st.table() or st.dataframe(). 

Here is the sample codes:
`df = pd.DataFrame(['http://google.com', 'http://duckduckgo.com'])`
`def make_clickable(val):
    return '<a href="{}">{}</a>'.format(val,val)`
`df.style.format(make_clickable)`

refer to [this](https://stackoverflow.com/questions/42263946/how-to-create-a-table-with-clickable-hyperlink-in-pandas-jupyter-notebook) Stack Overflow thread.

This works in Jupyper Notebook:
![image](https://user-images.githubusercontent.com/5623823/72570183-34298500-388a-11ea-8803-8fb83e9791e9.png)

But it does not work in Streamlit:
![image](https://user-images.githubusercontent.com/5623823/72570208-3db2ed00-388a-11ea-8208-7486ed6f5220.png)
