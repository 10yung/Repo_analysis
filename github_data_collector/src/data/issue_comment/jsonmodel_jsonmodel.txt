Hello, I am new to this library and after searching through the issues and through the code I did not find any solution to this question. I am using `[JSONKeyMapper mapperForSnakeCase]` to map dictionary keys to the class properties and was wondering if there is a method where I can convert the class properties back to snake_case dictionary to send the data with the same keys the server sent initially before mapping in snake_case. Thank you!
Weird situation here. I'm using the snake case mapping already, and need to rename one particular field. We want the code we write to be easy to read and consistent, but the API has a legacy spelling error that we need to support:

```
@interface Object : JSONModel

// property_one in JSON
@property (nonatomic) NSString *propertyOne;
// property_two in JSON
@property (nonatomic) NSString *propertyTwo;
// SPELLING ERROR: porperty_three in JSON
@property (nonatomic) NSString *propertyThree;

@end
```

```
@implementation

+ (JSONKeyMapper *)keyMapper
{
    return [JSONKeyMapper mapperForSnakeCase];
}

@end
```

I've added three methods to the implementation, but don't know a way to get JSONModel to call them:

```
- (void)setPorpertyThreeWithNSString:(NSString *)string
{
    _propertyThree = string;
}

- (void)JSONObjectForPropertyThree
{
    // We don't want to return "property_three", we want to return "porperty_three"
    return nil;
}

- (void)JSONObjectForPorpertyThree
{
    return _propertyThree;
}
```

The second method is called when I convert my object to JSON (removing the `property_three` key), but the first and last methods aren't called. I'm looking for something like:

```
- (NSArray<NSString*> *) extraProperties
{
    return @[@"porperty_three"];
}
```
Given a model defined like so:

```
@interface Parent : JSONModel

@property Child child;

@end

@interface Child : JSONModel

@property NSString *requiredField;
@property (nullable) NSString <Optional> *optionalField;

@end
```

if you try to instantiate the following:

```
NSString *json = @"{ \"child\": { \"optionalField\": \"asdf\" } }";
NSError *error;
Parent *test = [Parent initWithString:json];
```

The console will log out a validation error (namely that the field `requiredField` was missing from `Child`) but you'll find that `test` is actually set, but `test.child` is `nil`, and `error` is nil.

This means that only the top level is actually being validated by the `error` we pass in, and I can't use it to tell if a child model had a validation problem.

It seems to me like the default behavior should be if ***any*** model fails to validate, `error` is set.
I'm hitting an API whose return value is a JSON array containing multiple objects with the same properties, like so:

```
[
    { "title": "A", "description": "Item A" },
    { "title": "B", "description": "item B" },
    ...
]
```

Is there any way to read in such a structure using JSONModel? Given a single item I can say `[Item initWithString:singleItem error:&error]`, but I can't exactly say `[NSArray<Item> initWithString:items error:&error]`...

If there is currently no way to handle this, could one be added? For instance, a class could contain only a single property which is an `NSArray`, then some pre-defined method could declare how to handle root collections:

```
@interface ItemList : JSONModel

@property NSArray<Item> items;

@end

@implementation ItemList

- (void) handleJSONRootCollection:(NSArray *)collection
{
    _items = collection;
}

@end
```

Alternatively, along with `initWithString` an `initWithStringCollection` (or similar) could be added which returns an `NSArray` of the parent type:

```
NSArray<Item> *items = [Item initWithStringCollection:string];
```

I'm not sure how easy this would be to implement (or how common of a problem it is), but it's something I ran into
Hi,
I want to map object in which some keys contains a digits like `address_line1`, `address_line2`.
Now using mapperForSnakeCase it return nil.
Any help in this scenario?

Hard to write a unit test for this, but it looks like there was already code that was trying to address this in the unit tests that were running. This just extends that to run always, and to keep moving up the class hierarchy in case there are intermediate classes between the class passed in and `JSONModel`
Problem is I have one main model. I have two sub-models

```
@interface UserModel : JSONModel
@property (nonatomic) NSInteger  Id;
@property (nonatomic) NSInteger  SponsorId;
@end
```


```
@interface FinanceModel : JSONModel
@property (nonatomic) NSInteger  Id;
@property (nonatomic) NSInteger  Money;
@end
```


```
@interface BaseModel : JSONModel
@property KullaniciModel *Result;
@property NSInteger  Status;
@property NSString  *ErrorMessage;
@end
```

```
@interface BaseModel : JSONModel
@property FinanceModel *Result;
@property NSInteger  Status;
@property NSString  *ErrorMessage;
@end

```
How do I get a Single Base Model?
for example
```
@interface BaseModel : JSONModel
@property JsonModel <BaseClass>   *Result;
@property NSInteger  Status;
@property NSString  *ErrorMessage;
@end
```

UserModel Json
```
{
  "Result": {
    "Id": 12312312312,
    "SponsorId": 0,
  },
  "Status": "1",
  "ErrorMessage": ""
}
```
FinanceModel Json
```
{
  "Result": {
    "Id": 12312312312,
    "Money": 110.00,
  },
  "Status": "1",
  "ErrorMessage": ""
}
```
How do I import a User and Finance model in a Base model

These are just examples. I have 50 sub-models and I need to create a Base Model for all of them.
Help  Me?

I noticed there was an inconsistency with how optional/ignored values are determined. 

In one case, we directly inspect the class that the property belongs to to determine if the property conforms to the respective protocol. 

In the other case (which is addressed in this PR), we query a method that may not necessarily belong to the class we're inspecting, which requires subclasses to query their superclasses for properties that don't belong to them.
it's has conflict info display on lldb  when  I use "po object" at swift closures breakpoint。
if i rename the protocol name ”Optional“  to other name， it will be ok。

**po responseJson**

error: <EXPR>:1:11: error: 'Optional' is ambiguous for type lookup in this context
extension Optional where Wrapped: $__lldb_context {
          ^~~~~~~~

Swift.Optional:1:13: note: found this candidate
public enum Optional<Wrapped> : ExpressibleByNilLiteral {
            ^

JSONModel.Optional:1:17: note: found this candidate
public protocol Optional {
                ^

error: <EXPR>:19:5: error: value of type 'Optional<SKHomeViewModel>' has no member '$__lldb_wrapped_expr_17'
    $__lldb_injected_self.$__lldb_wrapped_expr_17(
I'm using JSONModel 1.8.0 and on iPad 9.3.5 there is crash on line 180:
`if (![self __importDictionary:dict withKeyMapper:self.__keyMapper validation:YES error:err])`

Logs show nothing but:
`Uncaught exception: -[__NSCFConstantString charValue]: unrecognized selector sent to instance 0x35f67888`

For some reason dict value is nil and crash does not repeat on other devices I tested: iPad Air or any iPhones.

Have no data to show that. Is there any way you could help me?