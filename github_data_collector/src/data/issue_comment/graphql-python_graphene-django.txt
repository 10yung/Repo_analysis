Hi all 👋🏻,

I've seen #333 but still have a question about how to add a custom argument that'd enable a more complex filter on a `DjangoObjectType`.

Using `graphene-django==2.8.0`.

```python
class ThingNode(DjangoObjectType):
    class Meta:
        model = Thing
        interfaces = (graphene.relay.Node,)

    @classmethod
    def get_queryset(cls, queryset, info):
        # How do I access my_custom_param here to enable a custom filter?
        if my_custom_param:
            # Heavily modify the queryset here with filter + exclude
            queryset.filter().filter().exclude()
        else:
            # Something else
            queryset.filter().filter()
        return queryset


class Query(graphene.ObjectType):

    things = DjangoFilterConnectionField(ThingNode, my_custom_param=graphene.Boolean())
```
```
  .../graphene_django/debug/sql/tracking.py:81: RemovedInDjango40Warning: force_text() is deprecated in favor of force_str().
    return "'%s'" % force_text(element).replace("'", "''")
```
https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.encoding.force_text

Get rid of more deprecated function calls (see #847), which are spamming into my test suite warnings :)
Hi!
I'm struggling to write a mutation that does the following:
- creates/update a model 
- creates/updates related models 

In short, 

- when I send the following mutation:
  ```graphql
  mutation MyMutation {
   createTeam(
     input: {
       name: "Avengers"
       players: [
         { firstName: "Iron", lastName: "Man" }
         { firstName: "Captain", lastName: "America" }
       ]
     }
   ) {
     id
   }
  }

  ```
- I expect to see 1 team and 2 players created,
- Instead, I see 1 team created, 0 players created.
  
I have the following models and DRF serialisers:

```py
# models.py
from django.db import models


class Team(models.Model):
    name = models.CharField(max_length=200)


class Player(models.Model):
    first_name = models.CharField(max_length=200)
    last_name = models.CharField(max_length=200)
    team = models.ForeignKey(Team, related_name='team', on_delete=models.CASCADE)



# serializers.py
from rest_framework import serializers
from .models import Payer, Team


class PlayerSerializer(serializers.ModelSerializer):
    class Meta:
        model = Player
        fields = ['id', 'first_name', 'last_name', 'team']


class TeamSerializer(serializers.ModelSerializer):
    players = PlayerSerializer(many=True, read_only=True)

    class Meta:
        model = Team
        fields = ['id', 'name', 'players']
```


I used the DRF serializers to create my `createTeam` mutation.


```python
# types
class TeamType(DjangoObjectType):
    class Meta:
        model = Team


class PlayerType(DjangoObjectType):
    class Meta:
        model = Player




# mutations
class TeamMutation(SerializerMutation):
    class Meta:
        serializer_class = TeamSerializer
        model_operations = ['create', 'update']
        lookup_field = 'id'


class PlayerMutation(SerializerMutation):
    class Meta:
        serializer_class = PlayerSerializer
        model_operations = ['create', 'update']
        lookup_field = 'id'


class Mutation(graphene.ObjectType):
    create_team = TeamMutation.Field()
    create_player = PlayerMutation.Field()
``` 
What am I not doing right? Sorry for the long post. Thank you.
A workaround for #785 --

Appropriately, `DjangoObjectType` supports a `convert_choices_to_enum` which disables the creation of GraphQL `Enum` types for every `ChoiceField` on a model.

However, `SerializerMutation` (similarly a subclass of `ObjectType` and registered in the GQL schema) does not support such a flag, and forces creating an `Enum` for every `ChoiceField`. This behavior can be undesirable because it can trigger a duplicate type registration error `Found different types with the same name in the schema:`.

For consistency's sake, a flag to disable the `Enum` creation should be added to the `SerializerMutation`; this commit implements such changes.

Sidenote --
In my sandbox, this error actually triggered even when the ChoiceField was only registered one single time, on one single Mutation, and not at all present in the `DjangoObjectType`, which leads me to believe that the `SerializerMutation`'s `Enum` definition is colliding with itself?

There's actually 0% test coverage for the current existing behavior of creating `Enums` for ` SerializerMutation` because [none of these tests](https://github.com/graphql-python/graphene-django/tree/master/graphene_django/rest_framework/tests) actually implement any `Model` with a `ChoicesField`; the test coverage stops at ensuring the automatic type conversion returns a proper value (and I added a second test for my branching logic). I hesitate to suggest it, but it seems that in the current implementation of `Enums` in `SerializerMutations`, simply adding a SerializerMutation with any ChoicesField to a schema might be enough to throw the error?

I might have time to dig deeper into that, but for now, here's an effective and reasonable bandaid.
Related issue: https://github.com/graphql/graphiql/issues/500

GraphiQL by default does not implement a way to pass custom request headers, which are still fairly commonly used for example by authentication middleware. It would be nice if graphene-django's built-in GraphiQL view had support for doing authenticated requests with custom HTTP headers.
Apologies if this is a duplicate.

If you have an abstract model with a foreign key to `'self'`, the type of the resulting graphql field in a subclass is always the type of the first one in the schema. I think this might be because the django fields hash to the same value, so subclasses' fields use the existing graphene field in the registry.

Here is a minimum reproduction of the issue:

```python
class A(Model):
	class Meta:
		abstract = True

	foreign = ForeignKey('self', on_delete=CASCADE)

class B(A): pass
class C(A): pass

class BNode(graphene_django.DjangoObjectType):
	class Meta:
		model = B

class CNode(graphene_django.DjangoObjectType):
	class Meta:
		model = C

class Schema(graphene.ObjectType):
	b = graphene.Field(BNode)
	c = graphene.Field(CNode)
```

And here is an excerpt of the resulting schema (note that `CNode`'s `foreign` field has the type `BNode`):

```json
{
    "fields": [
    {
        "args": [],
        "deprecationReason": null,
        "description": "",
        "isDeprecated": false,
        "name": "foreign",
        "type": {
        "kind": "NON_NULL",
        "name": null,
        "ofType": {
            "kind": "OBJECT",
            "name": "BNode",
            "ofType": null
        }
        }
    }
    ],
    "kind": "OBJECT",
    "name": "CNode",
}
```

The current workaround is something like this:

```python
class CNode(graphene_django.DjangoObjectType):
	class Meta:
		model = C

	foreign = graphene.Field('whateverthismoduleis.CNode')
```
The rest_framework offers the ability to use `SerializerMethodFields` which I also wanted to use in my project together with graphene-django but this field gets the wrong return value.
A detailed description can be found here: #760.

---

This is my copied comment from #760 which explains the change:

---

After further investigation, I found the origin of the underlying problem. Digging to the method
`graphene_django>rest_framework>mutation.py>SerializerMutation>perform_mutate` and applying this modification
```python
    from rest_framework import serializers                             # modified
    ...
    @classmethod
    def perform_mutate(cls, serializer, info):
        obj = serializer.save()

        kwargs = {}
        for f, field in serializer.fields.items():
            if not field.write_only:
                if isinstance(field, serializers.SerializerMethodField): # modified
                    kwargs[f] = field.to_representation(obj)             # modified
                else:                                                    # modified
                    kwargs[f] = field.get_attribute(obj)

        return cls(errors=None, **kwargs)
```
it worked.

---
The issue is at `field.get_attribute(ob)`. Inspecting the `SerializerMethodField` inside of the rest_framework you can see that there is no `get_attribute` function instead it will use the `get_attribute` from the base class `Field` which I think (not really traced it completely) just returns the representation of the `obj`. In my case this is the user object and it will return the users username because `__str__` is overridden to do so.

---
So I was interested in how the django_rest_framework handles the `get_attribute` issue. And I have found out that there is a method called `to_representation` ON the `Serializer` class which indeed returns all field names and also the correct values for each field:
```python
OrderedDict([('password', 'f'), ('username', 'john_doe'), ('email', 'john_doe@f.com'), ('token', 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImdkZGRkZHNzZHNkc3Nkc3Nzc2Rhc3Nkc2RkZGRkcyIsImV4cCI6MTU2NzUxNjc2Miwib3JpZ0lhdCI6MTU2NzUxNjQ2Mn0.fdiAgROOyqlV99S5R2mbV0DImp1YqONNVix6i67sCrs')])
```
And I am curious why the `serializer.to_representation` was not used and instead the loop over each field. Maybe I will get it after I am using this modification.

Using the mentioned method above, the function could be reduced to:
```python
    @classmethod
    def perform_mutate(cls, serializer, info):
        obj = serializer.save()
        kwargs = serializer.to_representation(obj)
        return cls(errors=None, **kwargs)
```
Which I will now use as a workaround.
Any feedback is appreciated.

I upgraded Django and graphene django but when I make a request I get this error 
```
Could not import 'fieldrecords.schema.schema' for Graphene setting 'SCHEMA'. ImportError: cannot import name 'six'.
```
I know this has been submitted a million times, and I know there are several solutions BUT, despite all things it seems there still isn't a way to actually know *where* the duplicates come from, e.g. The error message would read:

    AssertionError: Found different types with the same name in the schema: status, status.

But that doesn't give much information as to where do they come from. This is specially frustrating when plugging in projects. A suggestion would be to print the canonical name of the class the type is based on? something like 'my_module.types.ProblematicType'.

Anyway, this issue arises specifically because I defined a Type based on an Enum on my types module and I'm using that everywhere, but still graphql complains about different types having the same name. I double checked and I don't even use that name anywhere in my project, so it must be a conflicting dependency, but which one? where is that type being defined? The only way to know would be unplugging all dependencies and start plugging them one by one to find the offenders but this would be so inefficient and frankly, very stupid.

(in case you wonder I also searched in my `site-packages` and found nothing, so it must be auto generated somewhere...)

I'm using these packages:
django==2.2.9
graphene-django==2.7.1
graphene==2.1.8

And my types worked just fine with these versions:
django==2.1.5
graphene-django==2.2.0
graphene==2.1.3