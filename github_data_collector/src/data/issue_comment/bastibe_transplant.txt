wondering whether it would be hard to support octave, given that oct2py does not seem to be developed anymore (last release was ~2 years ago)
Hi, 
I am trying to use the transplant module in a remote linux machine. Matlab is already installed there. How can I give the directory to the installed matlab in the remote machine?
I get the floowing error after importing the module.

Best,  

eng = transplant.Matlab()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File ".../anaconda3/lib/python3.6/site-packages/transplant/transplant_master.py", line 487, in __init__
    self.process = Popen(process_arguments, stdin=DEVNULL, stdout=PIPE)
  File ".../anaconda3/lib/python3.6/subprocess.py", line 707, in __init__
    restore_signals, start_new_session)
  File ".../anaconda3/lib/python3.6/subprocess.py", line 1326, in _execute_child
    raise child_exception_type(errno_num, err_msg)
FileNotFoundError: [Errno 2] No such file or directory: 'matlab'

Hello, 
I am trying to use transplant to open a python app that uses matlab runtime 2017a. i have editted the search paths for libzmq to include the locations where libzmq is installed on my computer. These are my edits:

`575             search_dirs = ((os.getenv('LD_LIBRARY_PATH') or '').split(':') +`
`576                            (os.getenv('DYLD_LIBRARY_PATH') or '').split(':') +`
`577                            (os.getenv('DYLD_FALLBACK_PATH') or '').split(':') +`
`578                            [os.getenv('HOME') + '/lib']+`
`579                             '/usr/local/lib'+`
`580                             '/usr/lib'+`
`581                             '/opt/local/lib'+`
`582                             'anaconda/lib')`

I thought to edit the file after reading [https://github.com/bastibe/transplant/issues/40](url) < this post. I do not have access to `dlopen`. I am also quite new to python.

When running my app, I get the error:

`Error loading libzmq: Undefined function or variable 'notfound'.`

Thanks for your attention.
Matlab sometimes need to be run with a modified environment.

This PR adds support for modifying environment variables for the spawned matlab process.

e.g.
`
mat = transplant.Matlab(executable='/opt/matlab/R2017a/bin/matlab', 
                                         env=dict(LD_PRELOAD='/usr/lib64/libstdc++.so.6'))`
Dear Bastian,

First, thank you for providing pysoundfile, the libsoundfile interface is a blessing.  The 0.9 docs appear to be out of synch with the 0.9 pip distribution.  The current 0.9 documentation notes frames() as supporting additional parameters (e.g. start, stop) that are not in the 0.9 distribution but are in the git repository.   

Best regards,
Marie
- added class name check
- changed length() to numel() in as it is faster and more reliable in
MATLAB
08478bbe8ab42777ff0cc7b893cda29ab6f05212: This fails when a class method name is identical to a function on the MATLAB search path. For example calling the method `myclass.plot()`, nargout will return the number of arguments of the MATLAB built-in `plot` function. That's why I added a bit more checking:
```matlab
try
    [~, funType] = which(msg('name'));
    funType = strsplit(funType,' ');
    if numel(funType)==2 && strcmp(funType{2},'method')
        argTemp = msg('args');
        className = funType{1};
        if ~isempty(argTemp) && isa(argTemp{1},className)
            % the function name corresponds to the
            % class of the first argument
            resultsize = nargout(msg('name'));
        end
    end

    if isempty(resultsize)
        resultsize = nargout(fun);
    end
catch
    resultsize = -1;
end
```
As per #46:

calling a chain of functions on large matrices or other objects makes transferring large amount of data multiple times between python and matlab, e.g.

```python
A = mlab.myfun()
B = mlab.myfun2(A)
C = mlab.myfun3(B)
```

If A, B and C are large matrices the above command might be limited by the data transfer. It would be nice to specify per function call to keep the result in the proxy in matlab and send only a pointer to python as you are already doing it for objects. For example:

```python
A = mlab.myfun(inproxy=True)
B = mlab.myfun2(A,inproxy=True)
C = mlab.myfun3(B,inproxy=True)
```
When I run the following command the STDOUT from Matlab is not transferred:
```python
S = {'a':1.0}
mlab.disp(S)
```
Strangely, I get the output later after running a few more commands.
