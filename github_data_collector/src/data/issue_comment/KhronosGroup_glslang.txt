There is a set of tests in VK-GL-CTS that use dynamically uniform indexes when accessing arrays of descriptors of different types, like uniform buffers, storage buffers, storage texel buffers, etc.

These tests check for the corresponding feature to be available and enabled in the device, as you can see here:

https://github.com/KhronosGroup/VK-GL-CTS/blob/d99a765d38d35deeb3f27cf30d9d6fe4f183510e/external/vulkancts/modules/vulkan/binding_model/vktBindingDescriptorSetRandomTests.cpp#L218

If dynamic indexing is supported and the index type is "DEPENDENT", for example, these tests generate code like the following one:

```
#version 450 core
#extension GL_EXT_nonuniform_qualifier : enable
layout(r32i, set = 0, binding = 0) uniform iimage2D simage0_0;
layout(set = 1, binding = 0) uniform ubodef1_0 { int val; } ubo1_0[5];
layout(set = 1, binding = 2) uniform ubodef1_2 { int val; } ubo1_2[3];
layout(set = 3, binding = 6) uniform ubodef3_6 { int val; } ubo3_6[1];
layout(set = 7, binding = 2) uniform ubodef7_2 { int val; } ubo7_2[2];
layout(set = 7, binding = 7) uniform ubodef7_7 { int val; } ubo7_7[1];
layout(local_size_x = 1, local_size_y = 1) in;
void main()
{
  int accum = 0, temp;
  temp = ubo1_0[accum + 0].val; 
  accum = temp - 1;
  temp = ubo1_0[accum + 1].val; 
  accum = temp - 2;
  temp = ubo1_0[accum + 2].val; 
  accum = temp - 3;
  temp = ubo1_0[accum + 4].val; 
  accum = temp - 5;
  temp = ubo1_2[accum + 0].val; 
  accum = temp - 6;
  temp = ubo1_2[accum + 1].val; 
  accum = temp - 7;
  temp = ubo1_2[accum + 2].val; 
  accum = temp - 8;
  temp = ubo3_6[accum + 0].val; 
  accum = temp - 9;
  temp = ubo7_2[accum + 0].val; 
  accum = temp - 10;
  temp = ubo7_2[accum + 1].val; 
  accum = temp - 11;
  temp = ubo7_7[accum + 0].val; 
  accum = temp - 12;
  ivec4 color = (accum != 0) ? ivec4(0,0,0,0) : ivec4(1,0,0,1);
  imageStore(simage0_0, ivec2(gl_GlobalInvocationID.xy), color); 
}
```

However, when this specific GLSL shader is compiled to SPIR-V, the output does not declare the UniformBufferArrayDynamicIndexing capability, which I believe needs to be declared for the generated code to work (NB: vendors are still passing these tests, so it's probably not critical). The same problem is also happening with other DynamicIndexing capabilities.
Desktop GLSL allows initializing unbuffered uniform variables to a constant value directly in shader code.

As far as I can tell (and please let me know if I'm wrong), glslang's reflection interface doesn't expose those values anywhere, but it does internally detect them because it correctly errors when a uniform is initialized to a non-constant value on desktop GLSL and when a uniform is initialized to a constant value in GLSL ES.

I'd really like a way to obtain their values (and whether they've been explicitly initialized), through glslang's APIs. I have an existing tool with desktop GLSL shaders written for it by a large number of people, and I want to use glslang's SPIRV output capabilities combined with SPIRV-Cross to translate those shaders to other graphics APIs, but not every shader will be able to be fully ported without having a way to identify those values, and I wouldn't be able to tell users when their shader wouldn't work either, unless I restrict myself to GLSL ES.
The test spv_bufferhandle6_frag generates a forward reference to an array. This is now caught by the validator.
When creating a graphics pipeline with the shaders below, Vulkan validations layers from 1.1.130.0 SDK display the following error:

```
Vulkan debug message (validation): UNASSIGNED-CoreValidation-Shader-InterfaceTypeMismatch
Number of elements inside builtin block differ between stages (vertex shader 1 vs geometry shader 3).
```

Vertex shader:
```glsl
#version 420 core
void main()
{
    vec4 Pos[2];
    Pos[0] = vec4(-0.5, -0.25, 0.0, 1.0);
    Pos[1] = vec4(+0.5, +0.25, 0.0, 1.0);
    gl_Position = Pos[gl_VertexIndex];
}
```

Geometry shader:
```glsl
#version 420 core

layout (points) in;
layout (triangle_strip, max_vertices = 3) out;

layout(location = 0) out vec3 out_Color;

void main() {
    vec4 Pos[3];
    Pos[0] = vec4(-1.0, -1.0, 0.0, 1.0);
    Pos[1] = vec4( 0.0, +1.0, 0.0, 1.0);
    Pos[2] = vec4(+1.0, -1.0, 0.0, 1.0);

    vec3 Col[3];
    Col[0] = vec3(1.0, 0.0, 0.0);
    Col[1] = vec3(0.0, 1.0, 0.0);
    Col[2] = vec3(0.0, 0.0, 1.0);
     
    for (int i=0; i < 3; ++i)
    {
        gl_Position = vec4(Pos[i].xy * 0.5 + gl_in[0].gl_Position.xy, gl_in[0].gl_Position.zw);
        out_Color = Col[i];
        EmitVertex();
    }
    EndPrimitive();   
}
```

Fragment shader:
```glsl
#version 420 core

layout(location = 0) in  vec3 in_Color;
layout(location = 0) out vec4 out_Color;

void main()
{
    out_Color = vec4(in_Color, 1.0);
}
```

When using hlsl and specifying global constants as uniform float4 const : register(cXXX) those constants are assembled in $Global cb in order they appear in source and not in order specified by corresponding cXXX register. This results in offsets not being sequentially growing in spir-v

```
uniform float4 const1 : register(c0);
uniform float4 const3 : register(c10);
uniform float4 const2 : register(c2);

float4 main() : SV_Position
{
  return float4(const1.x, const2.x, const3.x, 1.0);
}
```

```
OpCapability Shader
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint Vertex %main "main" %_entryPointOutput
OpSource HLSL 500
OpName %main "main"
OpName %_main_ "@main("
OpName %_Global "$Global"
OpMemberName %_Global 0 "const1"
OpMemberName %_Global 1 "const3"
OpMemberName %_Global 2 "const2"
OpName %_ ""
OpName %_entryPointOutput "@entryPointOutput"
OpMemberDecorate %_Global 0 Offset 0
OpMemberDecorate %_Global 1 Offset 160
OpMemberDecorate %_Global 2 Offset 32
OpDecorate %_Global Block
OpDecorate %_ DescriptorSet 4
OpDecorate %_ Binding 0
OpDecorate %_entryPointOutput BuiltIn Position
%void = OpTypeVoid
%3 = OpTypeFunction %void
%float = OpTypeFloat 32
%v4float = OpTypeVector %float 4
%8 = OpTypeFunction %v4float
%_Global = OpTypeStruct %v4float %v4float %v4float
%_ptr_Uniform__Global = OpTypePointer Uniform %_Global
%_ = OpVariable %_ptr_Uniform__Global Uniform
%int = OpTypeInt 32 1
%int_0 = OpConstant %int 0
%uint = OpTypeInt 32 0
%uint_0 = OpConstant %uint 0
%_ptr_Uniform_float = OpTypePointer Uniform %float
%int_2 = OpConstant %int 2
%int_1 = OpConstant %int 1
%float_1 = OpConstant %float 1
%_ptr_Output_v4float = OpTypePointer Output %v4float
%_entryPointOutput = OpVariable %_ptr_Output_v4float Output
%main = OpFunction %void None %3
%5 = OpLabel
%33 = OpFunctionCall %v4float %_main_
OpStore %_entryPointOutput %33
OpReturn
OpFunctionEnd
%_main_ = OpFunction %v4float None %8
%10 = OpLabel
%19 = OpAccessChain %_ptr_Uniform_float %_ %int_0 %uint_0
%20 = OpLoad %float %19
%22 = OpAccessChain %_ptr_Uniform_float %_ %int_2 %uint_0
%23 = OpLoad %float %22
%25 = OpAccessChain %_ptr_Uniform_float %_ %int_1 %uint_0
%26 = OpLoad %float %25
%28 = OpCompositeConstruct %v4float %20 %23 %26 %float_1
OpReturnValue %28
OpFunctionEnd
```

here's a workaround we came up with

```
diff --git a/glslang/MachineIndependent/ParseContextBase.cpp b/glslang/MachineIndependent/ParseContextBase.cpp
index 282ecca0e07..3855856cca1 100644
--- a/glslang/MachineIndependent/ParseContextBase.cpp
+++ b/glslang/MachineIndependent/ParseContextBase.cpp
@@ -605,7 +605,13 @@ void TParseContextBase::growGlobalUniformBlock(const TSourceLoc& loc, TType& mem
     if (typeList)
         type->setStruct(typeList);
     TTypeLoc typeLoc = {type, loc};
-    globalUniformBlock->getType().getWritableStruct()->push_back(typeLoc);
+	auto & struc = * globalUniformBlock->getType().getWritableStruct();
+	struc.push_back(typeLoc);
+
+	std::sort(struc.begin(), struc.end(), [](const auto& a, const auto& b)
+	{
+		return a.type->getQualifier().layoutOffset < b.type->getQualifier().layoutOffset;
+	});
 
     // Insert into the symbol table.
     if (firstNewMember == 0) {
@@ -616,7 +622,7 @@ void TParseContextBase::growGlobalUniformBlock(const TSourceLoc& loc, TType& mem
             error(loc, "failed to insert the global constant buffer", "uniform", "");
     } else {
         // This is a follow-on request; we need to amend the first insert
-        symbolTable.amend(*globalUniformBlock, firstNewMember);
+        symbolTable.amend(*globalUniformBlock, 0);
     }
 
     ++firstNewMember;
diff --git a/glslang/MachineIndependent/SymbolTable.h b/glslang/MachineIndependent/SymbolTable.h
index 40ca3da532c..892e1196a87 100644
--- a/glslang/MachineIndependent/SymbolTable.h
+++ b/glslang/MachineIndependent/SymbolTable.h
@@ -359,6 +359,7 @@ public:
     virtual const TAnonMember* getAsAnonMember() const override { return this; }
     virtual const TVariable& getAnonContainer() const { return anonContainer; }
     virtual unsigned int getMemberNumber() const { return memberNumber; }
+	void setMemberNumber(unsigned int m) { memberNumber = m; }
 
     virtual const TType& getType() const override
     {
@@ -449,10 +450,19 @@ public:
     bool insertAnonymousMembers(TSymbol& symbol, int firstMember)
     {
         const TTypeList& types = *symbol.getAsVariable()->getType().getStruct();
-        for (unsigned int m = firstMember; m < types.size(); ++m) {
-            TAnonMember* member = new TAnonMember(&types[m].type->getFieldName(), m, *symbol.getAsVariable(), symbol.getAsVariable()->getAnonId());
-            if (! level.insert(tLevelPair(member->getMangledName(), member)).second)
-                return false;
+        for (unsigned int m = firstMember; m < types.size(); ++m)
+		{
+			if (level.find(types[m].type->getFieldName()) != level.end())
+			{
+				TAnonMember* member = (TAnonMember*)level[types[m].type->getFieldName()];
+				member->setMemberNumber(m);
+			}
+			else
+			{
+				TAnonMember* member = new TAnonMember(&types[m].type->getFieldName(), m, *symbol.getAsVariable(), symbol.getAsVariable()->getAnonId());
+				if (!level.insert(tLevelPair(member->getMangledName(), member)).second)
+					return false;
+			}
         }
 
         return true;

```



#### 1. Reserve unused std140 uniform block in reflection, and fix the uniform block struct member not affected by block matrix layout and memory layout. (fixed in d21e8c7)

>According to the spec OpenGL spec4.60.7:
>>7.6 Uniform Variables:
>>>All members of a named uniform block declared with a shared or std140 layout qualifier are considered active, even if they are not referenced in any shader in the program. The uniform block itself is also considered active, even if no member of the block is referenced.

We should reserve std140 block and shared block in reflection.

>According to the spec glsl4.60.7:
>>4.4.5. Uniform and Shader Storage Block Layout Qualifiers:
>>>The row_major and column_major qualifiers only affect the layout of matrices, including all
matrices contained in structures and arrays they are applied to, to all depths of nesting. These qualifiers can be applied to other types, but will have no effect.

We need ensure all matrix block member been effect, include the member of a struct in this block.

#### 2. Support EShMsgKeepUncalled in reflection.  (fixed in 9a3adec)

EShMsgKeepUncalled  is a link message for link program. We need only one option to control uncalled function optimization. If we set EShMsgKeepUncalled as false in link time, linker won't be keep the uncall function sequence in AST,  and if we set EShMsgKeepUncalled as true in link time, linker will keep all uncalled function sequence in AST.

#### 2. Recursively layout packing to "block member".  (fixed in 242c7b8)
Layout packing isn't set recursively, it causes TReflection::getOffsets doesn't work correctly.

So, in reflecte time, we just only travers all function sequence. It make EShMsgKeepUncalled  only work at linker, and can effect reflection.


When converting GLSL to SPIR-V, if I have a vertex shader that uses multiple utility files and more than one file uses the same UBO, I have to name the UBO differently in each file it's used. Otherwise, the values in the utility shader(s) are not set. If they are named the same, I get parsing and/or link errors.

Example:
The main shader uses this block.
layout(std140, binding = 1) uniform MatrixBlock
{
    mat4 ModelViewMatrix;
    mat4 ProjectionMatrix;
    mat4 ModelViewProjectionMatrix;
    mat4 NormalMatrix;
} matrixblock;

A utility shader also needs this UBO for lighting or whatever...
The only way this will work is if I rename the block to be MatrixBlock2 (or anything other than the above MatrixBlock) and the instance name to be matrixblock2 (or anything other than the above matrixblock). 

layout(std140, binding = 1) uniform MatrixBlock2
{
    mat4 ModelViewMatrix;
    mat4 ProjectionMatrix;
    mat4 ModelViewProjectionMatrix;
    mat4 NormalMatrix;
} matrixblock2;
