Here's the client code

```javascript
<!doctype html>
<html>
<head>
	<title>Socket.IO chat</title>
	<style>
		* { margin: 0; padding: 0; box-sizing: border-box; }
		body { font: 13px Helvetica, Arial; }
		form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }
		form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }
		form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }
		#messages { list-style-type: none; margin: 0; padding: 0; }
		#messages li { padding: 5px 10px; }
		#messages li:nth-child(odd) { background: #eee; }
	</style>
</head>
<body>
	<div class="chat">
		<ul>
			<li v-for="message in messages">{{ message }}</li>
		</ul>
	</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.js"></script>
</body>
<script>
    var socket = io();

    socket.on('reply', function (d) {
        console.log(d);
    });

	new Vue({
		el: '.chat',
		data: {
		    messages: []
		},
		mounted: function () {
            socket.on('reply', function (d) {
				this.messages.push(d)
            }.bind(this));
        }
	});

	console.log("msg");
</script>
</html>
```

Server code

```go
package main

import (
	"fmt"
	"github.com/googollee/go-socket.io"
	"github.com/labstack/echo/v4"
	"log"
)

func main() {
	server, err := socketio.NewServer(nil)
	if err != nil {
		log.Fatal(err)
	}
	
	app := echo.New()
	
	app.Static("/", ".")
	
	app.Any("/socket.io/", func(c echo.Context) error {
		server.ServeHTTP(c.Response(), c.Request())
		
		return nil
	})
	
	server.OnConnect("/", func(s socketio.Conn) error {
		s.SetContext("")
		fmt.Println("connected:", s.ID())
		
		s.Emit("reply", "Connected")
		return nil
	})
	
	server.OnError("/", func(e error) {
		fmt.Println("meet error:", e)
	})
	
	server.OnDisconnect("/", func(s socketio.Conn, reason string) {
		fmt.Println("closed", reason)
	})
	go server.Serve()
	defer server.Close()
	
	app.Start(":3001")
}
```

But if I create another io on server side, it works fine. Like this one

```javascript
<!doctype html>
<html>
<head>
	<title>Socket.IO chat</title>
	<style>
		* { margin: 0; padding: 0; box-sizing: border-box; }
		body { font: 13px Helvetica, Arial; }
		form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }
		form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }
		form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }
		#messages { list-style-type: none; margin: 0; padding: 0; }
		#messages li { padding: 5px 10px; }
		#messages li:nth-child(odd) { background: #eee; }
	</style>
</head>
<body>
	<div class="chat">
		<ul>
			<li v-for="message in messages">{{ message }}</li>
		</ul>
	</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.js"></script>
</body>
<script>
    var socket = io();

    socket.on('reply', function (d) {
        console.log(d);
    });

	new Vue({
		el: '.chat',
		data: {
		    messages: []
		},
		mounted: function () {
            socket.on('reply', function (d) {
				this.messages.push(d)
            }.bind(this));
        }
	});

	console.log("msg");
    var s2 = io("/chat");
</script>
</html>
```

I've checked using nodeJS socket server version, and it works perfectly. Only the go socket version has this bug
```javascript
var app = require('express')();
var http = require('http').Server(app);
var io = require('socket.io')(http);

app.get('/', function (request, response) {
    response.sendFile(__dirname + '/index.html');
});

io.on('connection', function (socket) {
    console.log("new user");
    socket.emit('reply', 'Connected')
});

http.listen(3001);
```

You can verify this using the example given with this repo, just remove the line that creates another socket: 

```javascript
var s2 = io("/chat");
```

Just remove this line.
When emitting events from client, I got Bad Request 

```POST http://localhost:8500/socket.io/?EIO=3&transport=polling&t=1578039627529-2&sid=4 400 (Bad Request)```

And on the server console, it said 'resume'

Here's my client code:

```javascript
var socket = io();

var mesageForm = document.getElementById('send-container');
var mesageContainer = document.getElementById('message-container');
var mesageInput = document.getElementById('message-input');


const name = prompt('What is your name?');
appendMessage('You' + ' joined');

socket.emit('new-user', name);

socket.on('chat-message', data => {
    appendMessage(data)
});

socket.on('user-connected', name => {
    appendMessage(name + ' joined')
});

mesageForm.addEventListener('submit', function (e) {
    e.preventDefault();

    const message = mesageInput.value;
    socket.emit('send-chat-message', message);
    mesageInput.value = ''
});

function appendMessage(msg) {
    const messageElement = document.createElement('div');

    messageElement.innerText = msg;
    mesageContainer.append(messageElement)
}
```


And here's my server code


```go
package main

import (
	socketio "github.com/googollee/go-socket.io"
	"github.com/labstack/echo"
)

type Sock struct {
	sock socketio.Conn
	Name string
}

var socks = make(map[string]Sock)

func main() {
	io, _ := socketio.NewServer(nil)
	
	app := echo.New()
	
	app.Static("/", ".")
	
	app.Any("/socket.io/", func(s echo.Context) error {
		io.ServeHTTP(s.Response().Writer, s.Request())
		
		return nil
	})
	
	io.OnConnect("/", func(s socketio.Conn) error {
		socks[s.ID()] = Sock{
			sock: s,
		}
		
		s.Emit("chat-message", "Server: Hello World")
		
		return nil
	})
	
	io.OnEvent("/", "new-user", func(s socketio.Conn, name string) {
		sk := socks[s.ID()]
		sk.Name = name
		
		for k, v := range socks {
			if k != s.ID() {
				v.sock.Emit("user-connected", name)
			}
		}
	})
	
	io.OnEvent("/", "send-chat-message", func(s socketio.Conn, msg string) {
		for k, v := range socks {
			if k != s.ID() {
				v.sock.Emit("chat-message", msg)
			}
		}
	})
	
	go io.Serve()
	defer io.Close()
	
	app.Start(":8500")
}
```

It's annoying. What is causing this error?


Travis CI test coverage log:

github.com/googollee/go-socket.io/broadcast.go:24:		NewBroadcast		0.0%
github.com/googollee/go-socket.io/broadcast.go:29:		Join			0.0%
github.com/googollee/go-socket.io/broadcast.go:44:		Leave			0.0%
github.com/googollee/go-socket.io/broadcast.go:62:		LeaveAll		0.0%
github.com/googollee/go-socket.io/broadcast.go:80:		Clear			0.0%
github.com/googollee/go-socket.io/broadcast.go:90:		Send			0.0%
github.com/googollee/go-socket.io/broadcast.go:103:		SendAll			0.0%
github.com/googollee/go-socket.io/broadcast.go:119:		Len			0.0%
github.com/googollee/go-socket.io/broadcast.go:129:		Rooms			0.0%
Travis CI test coverage log:

github.com/googollee/go-socket.io/conn.go:65:			newConn			0.0%
github.com/googollee/go-socket.io/conn.go:84:			Close			0.0%
github.com/googollee/go-socket.io/conn.go:100:			connect			0.0%
github.com/googollee/go-socket.io/conn.go:123:			nextID			0.0%
github.com/googollee/go-socket.io/conn.go:128:			write			0.0%
github.com/googollee/go-socket.io/conn.go:144:			onError			0.0%
github.com/googollee/go-socket.io/conn.go:156:			parseArgs		0.0%
github.com/googollee/go-socket.io/conn.go:160:			serveError		0.0%
github.com/googollee/go-socket.io/conn.go:176:			serveWrite		0.0%
github.com/googollee/go-socket.io/conn.go:190:			serveRead		0.0%
Travis CI test coverage:

github.com/googollee/go-socket.io/namespace.go:100:		newNamespaceConn	0.0%
github.com/googollee/go-socket.io/namespace.go:109:		SetContext		0.0%
github.com/googollee/go-socket.io/namespace.go:113:		Context			0.0%
github.com/googollee/go-socket.io/namespace.go:117:		Namespace		0.0%
github.com/googollee/go-socket.io/namespace.go:121:		Emit			0.0%
github.com/googollee/go-socket.io/namespace.go:149:		Join			0.0%
github.com/googollee/go-socket.io/namespace.go:153:		Leave			0.0%
github.com/googollee/go-socket.io/namespace.go:157:		LeaveAll		0.0%
github.com/googollee/go-socket.io/namespace.go:161:		Rooms			0.0%
github.com/googollee/go-socket.io/namespace.go:165:		dispatch		0.0%
Travis CI test coverage:

github.com/googollee/go-socket.io/parser/decoder.go:35:		Close			50.0%
github.com/googollee/go-socket.io/parser/decoder.go:57:		DecodeHeader		81.0%
github.com/googollee/go-socket.io/parser/decoder.go:89:		DecodeArgs		90.3%
github.com/googollee/go-socket.io/parser/decoder.go:157:	readString		84.6%
github.com/googollee/go-socket.io/parser/decoder.go:178:	readHeader		83.0%
github.com/googollee/go-socket.io/parser/decoder.go:255:	readEvent		66.7%
github.com/googollee/go-socket.io/parser/decoder.go:282:	readBuffer		75.0%
github.com/googollee/go-socket.io/parser/decoder.go:290:	detachBuffer		47.6%
github.com/googollee/go-socket.io/parser/encoder.go:27:		Encode			75.0%
github.com/googollee/go-socket.io/parser/encoder.go:63:		writePacket		72.7%
github.com/googollee/go-socket.io/parser/encoder.go:122:	writeUint64		90.0%
github.com/googollee/go-socket.io/parser/encoder.go:138:	attachBuffer		86.2%

Travis CI test coverage:

github.com/googollee/go-socket.io/server.go:17:			NewServer		0.0%
github.com/googollee/go-socket.io/server.go:30:			Close			0.0%
github.com/googollee/go-socket.io/server.go:34:			ServeHTTP		0.0%
github.com/googollee/go-socket.io/server.go:40:			OnConnect		0.0%
github.com/googollee/go-socket.io/server.go:47:			OnDisconnect		0.0%
github.com/googollee/go-socket.io/server.go:53:			OnError			0.0%
github.com/googollee/go-socket.io/server.go:59:			OnEvent			0.0%
github.com/googollee/go-socket.io/server.go:65:			Serve			0.0%
github.com/googollee/go-socket.io/server.go:76:			JoinRoom		0.0%
github.com/googollee/go-socket.io/server.go:81:			LeaveRoom		0.0%
github.com/googollee/go-socket.io/server.go:86:			LeaveAllRooms		0.0%
github.com/googollee/go-socket.io/server.go:91:			ClearRoom		0.0%
github.com/googollee/go-socket.io/server.go:96:			BroadcastToRoom		0.0%
github.com/googollee/go-socket.io/server.go:101:		RoomLen			0.0%
github.com/googollee/go-socket.io/server.go:106:		Rooms			0.0%
github.com/googollee/go-socket.io/server.go:110:		serveConn		0.0%
github.com/googollee/go-socket.io/server.go:121:		getNamespace		0.0%
Hey
is there a way to get the IDs of all to a specific room connected clients? It is needed to iterate through it and send every client different data. BroadcastToRoom doesn't help me for this project.
**Describe the bug**
Panic when disconnecting with node client

```bash
websocket: close 1006 (abnormal closure): unexpected EOF
panic: runtime error: index out of range [0] with length 0
```

**To Reproduce**
Use node client to connect to master branch
Connect to server -> join new room -> disconnect

**Expected behavior**
No panic and actually it should not even enter this error handler. It should run the disconnect handler.

**Environment (please complete the following information):**

Go 1.13
Node v12.13.1 

github.com/googollee/go-socket.io v1.4.3-0.20191204093753-683f8725b6d0 (master)
github.com/googollee/go-engine.io v1.4.2 // indirect
github.com/gorilla/websocket v1.4.1 // indirect

socket.io 1.4 & 2.3

**Additional context**
```bash
websocket: close 1006 (abnormal closure): unexpected EOF
panic: runtime error: index out of range [0] with length 0

goroutine 30 [running]:
main.wsEvents.func1(0x94b040, 0xc0000ba960, 0x8ab09d, 0x1b)
        /home/gopher/Documents/code/go/src/bitbucket.org/cnx_devs/dispatcher/main.go:89 +0x213
github.com/googollee/go-socket%2eio.(*conn).Close.func1()
        /home/gopher/Documents/code/go/pkg/mod/github.com/googollee/go-socket.io@v1.4.3-0.20191204093753-683f8725b6d0/conn.go:91 +0x162
sync.(*Once).doSlow(0xc00010b4e8, 0xc00019fda8)
        /usr/lib/golang/src/sync/once.go:66 +0xe3
sync.(*Once).Do(...)
        /usr/lib/golang/src/sync/once.go:57
github.com/googollee/go-socket%2eio.(*conn).Close(0xc00010b490, 0x0, 0x0)
        /home/gopher/Documents/code/go/pkg/mod/github.com/googollee/go-socket.io@v1.4.3-0.20191204093753-683f8725b6d0/conn.go:86 +0x95
github.com/googollee/go-socket%2eio.(*conn).serveRead(0xc00010b490)
        /home/gopher/Documents/code/go/pkg/mod/github.com/googollee/go-socket.io@v1.4.3-0.20191204093753-683f8725b6d0/conn.go:197 +0xd1b
created by github.com/googollee/go-socket%2eio.(*conn).connect
        /home/gopher/Documents/code/go/pkg/mod/github.com/googollee/go-socket.io@v1.4.3-0.20191204093753-683f8725b6d0/conn.go:114 +0x24e
exit status 2
```

*, it could be the connection that is passed on the error handler, which has been changed in the master branch* 
As title，
There is no Client.go after V0.9, and the client of v0.9 is wrong。
