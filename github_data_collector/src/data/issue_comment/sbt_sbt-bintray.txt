Looks like 'bintrayChangeCredentials' doesn't work under sbt 1.3.3. It probably has to do with the way new sbt works with console UI. It just hangs and you can't even terminate the process with Ctrl-C.
I'm not normally an SBT user, so please forgive my ignorance and correct me if I'm looking in the wrong place for help here. But I am trying to publish an SBT plugin to Bintray with this plugin, but it doesn't look like it publishes a `pom.xml`. I can use the published plugin from a local Bintray resolver, but when I try to "Add to JCenter" from within the Bintray admin UI, I get the following error:

> Please fix the following before submitting a JCenter inclusion request: - Add a POM file to the latest version of your package.

I want to add the plugin to JCenter so users can use it with just `resolvers += Resolver.jcenterRepo` instead of `resolvers += Resolver.bintrayRepo("javaeden", "sbt-plugins")`. How can I get this POM published so I can get the plugin added to JCenter? [Here's](https://github.com/JavaEden/Orchid/tree/master/buildSrc/orchidSbtPlugin) the plugin I am trying to get published.
Suggestion to add a new `SettingKey` for VCS tag so that the tag name can be set by a CI tool while publishing the project, so that Bintray can automatically link Release Notes to the corresponding GitHub Release.
The default value for `bintrayVcsUrl` introduced in #46 appears to not follow the URL RFC spec:

```
sbt:scodec-bson> show bintrayVcsUrl
[info] Some(git@gitlab.com:lJoublanc/scodec-bson.git)
```

This doesn't prevent publishing. However, when from the bintray web-interface you try to add your project to JCenter and Maven Central, you get an error as a result of this. See [this stackoverflow question](https://stackoverflow.com/questions/52774251/link-public-github-repo-on-bintray-to-jcenter) for more detail. It points out that on the webpage the tooltip says this should be a 'valid URL'.

The value that is set here also appears to be publicly visible on the bintray website, and is an `href` link, which leads me to believe that it should start with `http[s]://` as per the SO question. However, changing this to e.g. `git://git@gitlab.com:lJoublanc/scodec-bson.git` (which is a valid URL according to RFC) appears to work around the 'publishing to maven central' issue in the SO question alone.

The default is currently derived from git [in `resolveVcsUrl`](https://github.com/sbt/sbt-bintray/blob/b2dcc316fa4f8ea701f076516b430292af8c5389/src/main/scala/Bintray.scala#L128-L137).

* Should the default be changed? 
* Should it accept a non-http prefix such as `git://`, as this will be linked on the web UI? 
* Or should we somehow infer `http[s]://` always? Should this work for non-github locations too (e.g. gitlab? what about a local/private repo?)
I am getting Status code: 400 Bad Request when publishing a Debian package.

According to Bintray, 

> It looks like you didnâ€™t send the distribution component and architecture as part of the URL as mentioned https://www.jfrog.com/confluence/display/BT/Bintray+REST+API#BintrayRESTAPI-DebianUpload when artifacts are uploaded to a Debian repository using the Automatic index layout, the Debian distribution information is required and must be specified.

```
[error] (completeProj/*:publishSigned) java.util.concurrent.ExecutionException: java.net.ConnectException: https://api.bintray.com/content/typesafe/ivy-releases/org.scala-sbt/completion_2.11/0.13.18/jars/completion_2.11.jar;publish=0;override=0
```

When also publishing nighly snapshots to bintray (using a version convention such as https://github.com/dwijnand/sbt-dynver), it would be nice to add a task that gets the versions from bintray (https://bintray.com/docs/api/#_get_package) and deletes (https://bintray.com/docs/api/#url_delete_version) all old snapshots except but a configurable number of most-recent ones?

For example if there's `1.2.3-1`, `1.2.3-2`, `1.2.3-3` and `1.2.4-1` and we keep 2, we should keep `1.2.3-3` and `1.2.4-1`
I've had to let each sub-module create and publish to their own Bintray package, because (at least on initial upload), having them set to the same Bintray package would error saying it could not find or update the package.
Even with staging, it would be nice to have an option to delete packages prior to pushing them. If they exist already, you have to manually remove them prior to uploading.
This part of sbt-bintray irks me:
```scala
  override def requires = sbt.plugins.JvmPlugin
  override def trigger = allRequirements
```
Because of this, upgrading from bintray-sbt 0.1.2 to sbt-bintray 0.5.1 ([commit here](https://github.com/sjrd/scala-js/commit/a297c674c6cfc7afb5b44b7abf59cb4b76013641)) broke the publishing of all my artifacts that are *not* supposed to be published to Bintray but to Sonatype. Example:
```scala
> ++2.10.6
[info] Setting version to 2.10.6
[info] Reapplying settings...
[info] Set current project to Scala.js (in build file:/localhome/doeraene/projects/scalajs/)
> show sbtPlugin/publishTo
[info] Some(Raw(Bintray-Sbt-Publish-scala-js-scala-js-releases-sbt-scalajs))
> show compiler/publishTo
[info] Some(snapshots: https://oss.sonatype.org/content/repositories/snapshots)
> compiler/publish
[info] Updating {file:/localhome/doeraene/projects/scalajs/}compiler...
[info] Packaging /localhome/doeraene/projects/scalajs/compiler/target/scala-2.10/scalajs-compiler_2.10.6-0.6.20-SNAPSHOT-sources.jar ...
[info] Wrote /localhome/doeraene/projects/scalajs/compiler/target/scala-2.10/scalajs-compiler_2.10.6-0.6.20-SNAPSHOT.pom
[info] Resolving com.novocode#junit-interface;0.9 ...
[info] Done packaging.
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Done updating.
[info] :: delivering :: org.scala-js#scalajs-compiler_2.10.6;0.6.20-SNAPSHOT :: 0.6.20-SNAPSHOT :: integration :: Mon Aug 28 13:24:42 CEST 2017
[info]  delivering ivy file to /localhome/doeraene/projects/scalajs/compiler/target/scala-2.10/ivy-0.6.20-SNAPSHOT.xml
[info] Compiling 34 Scala sources to /localhome/doeraene/projects/scalajs/compiler/target/scala-2.10/classes...
[info] Main Scala API documentation to /localhome/doeraene/projects/scalajs/compiler/target/scala-2.10/api...
model contains 248 documentable templates
[warn] [...]
[warn] one warning found
[info] Main Scala API documentation successful.
[info] Packaging /localhome/doeraene/projects/scalajs/compiler/target/scala-2.10/scalajs-compiler_2.10.6-0.6.20-SNAPSHOT-javadoc.jar ...
[info] Done packaging.
[warn] two warnings found
[info] Packaging /localhome/doeraene/projects/scalajs/compiler/target/scala-2.10/scalajs-compiler_2.10.6-0.6.20-SNAPSHOT.jar ...
[info] Done packaging.
[info]  published scalajs-compiler_2.10.6 to https://oss.sonatype.org/content/repositories/snapshots/org/scala-js/scalajs-compiler_2.10.6/0.6.20-SNAPSHOT/scalajs-compiler_2.10.6-0.6.20-SNAPSHOT.pom
[info]  published scalajs-compiler_2.10.6 to https://oss.sonatype.org/content/repositories/snapshots/org/scala-js/scalajs-compiler_2.10.6/0.6.20-SNAPSHOT/scalajs-compiler_2.10.6-0.6.20-SNAPSHOT.jar
[info]  published scalajs-compiler_2.10.6 to https://oss.sonatype.org/content/repositories/snapshots/org/scala-js/scalajs-compiler_2.10.6/0.6.20-SNAPSHOT/scalajs-compiler_2.10.6-0.6.20-SNAPSHOT-sources.jar
[info]  published scalajs-compiler_2.10.6 to https://oss.sonatype.org/content/repositories/snapshots/org/scala-js/scalajs-compiler_2.10.6/0.6.20-SNAPSHOT/scalajs-compiler_2.10.6-0.6.20-SNAPSHOT-javadoc.jar
[trace] Stack trace suppressed: run last compiler/*:bintrayRelease for the full output.
[error] (compiler/*:bintrayRelease) failed to release sjrd/scalajs-compiler@0.6.20-SNAPSHOT: {"message":"Version '0.6.20-SNAPSHOT' was not found"}
[error] Total time: 23 s, completed Aug 28, 2017 1:25:03 PM
```
I specifically set `publishTo :=` in non-Bintray artifacts, so `show compiler/publishTo` correctly shows oss.sonatype.org. However, doing `compiler/publish`, after correctly publishing to Sonatype, still insists on doing `bintrayRelease` which fails.

An `AutoPlugin` that alters existing keys must not be automatically triggered. It must be opt-in. It's not because I need sbt-bintray for some artifacts in my build that I want it for *all* of them.

(I guess using `disablePlugins(BintrayPlugin)` on all my other `project`s would be a workaround.)