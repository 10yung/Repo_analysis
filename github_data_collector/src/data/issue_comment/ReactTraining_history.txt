<!--
Thank you for contributing!

Have a usage question?
======================
The issue tracker is meant for bug reports only. This isn't the best place for usage questions. Questions here don't have as much visibility as they do elsewhere. Before you ask a question, here are some resources to get help first:

- Read the docs: https://reacttraining.com/react-router
- Check out the list of frequently asked questions: https://github.com/ReactTraining/react-router/blob/master/FAQ.md
- Explore examples: https://reacttraining.com/react-router/web/example/basic
- Look for/ask questions on Stack Overflow: https://stackoverflow.com/questions/ask?tags=react-router
- Ask in chat: https://discord.gg/0ZcbPKXt5bYaNQ46

Think you found a bug?
======================
The best bug report is a failing test in the repository as a pull request. Otherwise, please use the "BUG REPORT" template below.

Have a feature request?
=======================
Remove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.
-->

<!-- BUG TEMPLATE -->

## Version

v5.1.2

## Test Case

https://stackblitz.com/edit/react-ts-xcfs2u?file=index.tsx

## Steps to reproduce

I have two components in the same tree which are both calling `history.replace` on mount:

```ts
import React, { Component } from "react";
import { render } from "react-dom";
import { RouteComponentProps, BrowserRouter, withRouter } from "react-router-dom";

class Inner extends React.Component<RouteComponentProps> {
  componentDidMount() {
    const { location, history } = this.props;
    history.replace("/bar?foo");
  }

  render() {
    return <div>{this.props.location.pathname}</div>;
  }
}

const InnerEnhanced = withRouter(Inner)

class App extends React.Component<RouteComponentProps> {
  componentDidMount() {
    const { location, history } = this.props;
    history.replace({ ...location, state: { a: 1 } })
  }

  render() {
    return <InnerEnhanced />;
  }
}

const AppEnhanced = withRouter(App)
```

(Note: in my real world use case, these components are far from each other in the tree, and they are completely decoupled from each other. I would like to keep it this way.)

Both of the location updates are completely orthogonal to each other (one updates the path, the other updates the state), so I would expect them to combine. After `App` has finished mounting, the URL path should be `/bar?foo` and `location.state` should be `{ a: 1 }`.

Unfortunately this is not what happens. The actual URL path is `/`, not the expected `/bar?foo`. This is because the `location` spreaded into `history.replace` by `App` is "stale":

```ts
// `location` does not reflect the *current* location according to the URL
// It only reflects the location at the time of the last render (i.e. before `Inner` mounted and called `history.replace`).
history.replace({ ...location, state: { a: 1 } });
// `location.pathname` is `'/'` ❌
// `location.search` is `''`  ❌
// `location.state` is `{ a: 1 }` ✅ 
```

We can't omit the `location` spread because then `location.search` would not be carried across. IIUC, only the `pathname` is carried across from the current location.

```ts
history.replace({ state: { a: 1 } });
// `location.pathname` is `'/bar'` ✅
// `location.search` is `''` ❌ 
```

One workaround is to read from `history.location` instead of `props.location`, but IIUC that is discouraged because it is mutable.

```ts
history.replace({ ...history.location, state: { a: 1 } });
// `location.pathname` is `'/bar'` ✅ 
// `location.search` is `'?foo'`  ✅
// `location.state` is `{ a: 1 }` ✅ 
```

This seems very similar to the [problem commonly seen when using React's `setState`](https://stackoverflow.com/questions/42038590/when-to-use-react-setstate-callback/42038724#42038724). `setState` works around this problem by providing a callback version, to which the latest `state` will always be provided:

```ts
this.setState(latestState => deriveNewState(latestState));
```

This makes me wonder whether a similar API might work for location updates:

```ts
history.replace(latestLocation => deriveNewLocation(latestLocation));
```

This would also provide parity with the `Link` `to` prop, [which does accept a callback](https://github.com/ReactTraining/react-router/pull/5368).

Using my example from above, this would allow us to do something like:

```ts
history.replace(latestLocation => ({ ...latestLocation, state: { a: 1 } }));
// `location.pathname` is `'/bar'` ✅ 
// `location.search` is `'?foo'`  ✅
// `location.state` is `{ a: 1 }` ✅ 
```

What do you think to the idea of adding a callback variant to `history.{push,replace}`? Perhaps there is a better solution I'm not aware of yet? If you like the idea, I would be happy to contribute a PR for it.
Hi, I noticed a change in the history.listen method.

The change is on this line: https://github.com/ReactTraining/history/pull/751/files#diff-c427a522f4ea08a4c045a518ac721ce9R34

`history.listen((location, action) => {})`
is now
`history.listen(({ location, action }) => {})`

If there is no reason to this change except syntax sugar then I would like to suggest to revert this.

**Reason**: If you have an application where the history instances are swappable then it would be great to allow v4 and v5 instances to be interchangeable. That way a developer can elect to use an older version of the package to gain back some removed features (like basename support).

With this change anyone that wants to do that now has to change their code to be compatible.
Issue #638 and PR #639 is a problem, I do not understand why you keep closing and locking PRs without explanations.

I have hybrid/legacy application (with server rendering and react + react-router) and the page is merging things even when using `<BrowserRouter forceRefresh>`.
I'm not sure if this is the behaviour expected but I think it's a bug:

In this line: https://github.com/ReactTraining/history/blob/3f69f9e07b0a739419704cffc3b3563133281548/modules/createBrowserHistory.js#L179

the state is set with a new property state and the final value of globalHistory state is: {state: { state: { whatever : 'whatever' }}}.

I think when you want to set the state in Link of the react-router by example, you expected the final state will be to assign with this new properties and not with a state property that has the values.

What do you think?

Thanks in advance
These options were increasing the build size – since the repo uses Babel for transpilation based on `preset-env` leaving the default options from the closure compiler plugin (language_out=NO_TRANSPILE, etc) will net a smaller output.
I know this issue has come up before: https://github.com/ReactTraining/history/issues/644

The response to that was that:
> The basename should not be considered dynamic; its purpose is to identify an application's "root" on the server.

However history's documentation states that:
> If all the URLs in your app are relative to some other "base" URL, use the basename option. 

A common use case for the html base tag also seems to put the language in the base url: https://stackoverflow.com/a/1889957/6593498

So I think using the basename to hold a language identifier (or any other possible dynamic information) can be a warranted use case, if every other URL is relative to that. 

I also don't see that much of a technical difficulty to implement this.  It would require another public function to change the basename.

Downstream consumers of history (such as react-router) could also then allow to update the basename, but would require to somehow notify usages of `createHref` (e.g. `<Link/>`), to be updated.

Is there any strong opinion against this, would be willing to provide a PR for this, if this is not considered too out of scope.
Just watched the video for the blocking feature in v5. Looked very good. How would it work though when not doing a synchronous window.confirm to prompt the user? I’m currently using a reach modal for it. Would I have to store the transition object somewhere to be available when I then eventually confirm the dialog?
I have try edit message of dialog which using to warning user before leave page.
my code :
import { createBrowserHistory } from 'history';
const history = createBrowserHistory();
const unblock = history.block('Are you sure you want to leave this page?');
But dialog in Chrome, Safari not change, it still use default message. I use version 5.0.0-beta.2.
<img width="531" alt="picture" src="https://user-images.githubusercontent.com/24516706/70523283-46baeb00-1b75-11ea-883d-24372eec40d3.png">



```sh-session
$ node
> require('history').createLocation({ pathname: 'foo' })
{ pathname: 'foo', search: '', hash: '' }
```

Expected: `{ pathname: 'foo', search: '', hash: '', state: undefined }`

Actual: the `state` key is omitted.

I understand that referencing `location.state` will return `undefined` even when the `state` key has been omitted, however it would help to return a consistent type to make the types more predictable. For example:

- `Object.keys(location)` should always include `'state'` in the returned array
- [The TypeScript type says the key will always exist](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/7f9ef75bffd7ea782bfaf98ffd16c1bdcf2fcbb0/types/history/index.d.ts#L32) (it is not an optional property)
This is related to #639 and #638 and continues @reywright and @pshrmn proposed solution. 

__Problem:__ 
When using `createBrowserHistory` with the `forceRefresh` prop, the methods `go`, `goBack` and `goForward` do not behave as expected. The location url will update but the page does not refresh. 

__Proposed Solution:__

Update the `createBrowserHistory` behaviour for `push` and `replace` methods to not call the History api's `pushState` and `replaceState` methods when `forceRefresh` prop is true.

__Why?__ 

As stated in the original feature issue #95
> Some users need a history that:
> - has clean URLs, like browser history
> - uses full page refreshes instead of pushState

Currently `forceRefresh` does not always use full page refreshes and is still calling `pushState`. Making this change will ensure the feature adheres to its original purpose.


