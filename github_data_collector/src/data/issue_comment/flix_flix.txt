Add support for string escapes, e.g. `\n`, and so forth.
Add an ErasedAst after FinalAst where every mono-type has been replaced by a JVM type.

Possibly introduce Box and Unbox operations in the AST?

Allow a form of Datalog query which consists only of a right-hand side, with no left-hand side.

Similar to how an SQL expression is just a rhs.
Including mutable lists, sets, and maps.
Add a collection of benchmarks for sets and maps.
We should split channels into two types: one for sending and one for receiving.
A method can't have a name starting with `true` or `false`, and will result in a crash. Other keywords like `rel` or `def` are allowed in the beginning of a method name. The crash only arise then `true` or `false` appear first in the method name.
As an example, the following code snippet is bad
```
def trueMethod(): Bool =
    true
def main(): Bool =
    trueMethod()
```
and results in a crash with the following message:
```
Exception in thread "main" java.lang.StringIndexOutOfBoundsException: offset 354, count 4, length 357
        at java.base/java.lang.String.checkBoundsOffCount(String.java:3304)
        at java.base/java.lang.String.rangeCheck(String.java:280)
        at java.base/java.lang.String.<init>(String.java:276)
        at org.parboiled2.ParserInput$CharArrayBasedParserInput.sliceString(ParserInput.scala:116)
        at org.parboiled2.ErrorFormatter.formatProblem(ErrorFormatter.scala:80)
        at org.parboiled2.ErrorFormatter.format(ErrorFormatter.scala:58)
        at org.parboiled2.ErrorFormatter.format(ErrorFormatter.scala:51)
        at org.parboiled2.Parser.formatError(Parser.scala:106)
        at ca.uwaterloo.flix.language.phase.Parser$.parseRoot(Parser.scala:68)
        at ca.uwaterloo.flix.language.phase.Parser$.$anonfun$run$2(Parser.scala:45)
        at ca.uwaterloo.flix.util.ParOps$.$anonfun$parMap$2(ParOps.scala:34)
        at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:660)
        at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:430)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at java.base/java.lang.Thread.run(Thread.java:834)
```
Add a collection of Datalog benchmarks.
Rename the Path data type to File.
We should investigate whether we can support some form of JSX-style syntax.

For example, in JSX you can write something reminiscent of HTML:

```
  <div>
    <h1>Hello!</h1>
    <h2>Good to see you here.</h2>
  </div>
```

This would then need to be desugared into appropriate function calls.

More information is available here: https://github.com/facebook/reason/pull/647

An alternative is to look at Kotlin DSL: https://kotlinlang.org/docs/reference/type-safe-builders.html