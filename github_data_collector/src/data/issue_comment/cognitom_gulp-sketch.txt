In the docs it says to run: `npm run install-sketchtool`, and in that script it is looking for `Sketch.app/Contents/Resources/sketchtool/install.sh` which no longer exists in Sketch when you download it, so it doesn't work/do anything.

You can see it's not in there anymore in this screenshot:

![screen shot 2018-06-04 at 1 08 48 pm](https://user-images.githubusercontent.com/410701/40933894-98c39db6-67f8-11e8-85aa-32202d4d519b.png)

What can I do to fix this?
Recently, I've almost switched to Figma. So, it's a bit difficult to maintain this repository actively. If someone has interest to take care about `gulp-sketch`, let me know. Thanks.
The 'clean' option apparently removes fill attributes: 
https://github.com/overblog/clean-sketch/blob/master/index.js

I do not really understand why. At least in my use case, this breaks the appearance of the exported SVG files.

The option 'compact' seems to make no difference at all.

Would be awesome to have a reliable option to export SVG files which are mostly untouched but do simply **not** include stuff like this:
```
    <!-- Generator: sketchtool 48.1 (47250) - http://www.bohemiancoding.com/sketch -->
    <desc>Created with sketchtool.</desc>
```

Thanks!
grunt-sketch apparently makes an option available to include symbols when exporting artboards:
https://www.npmjs.com/package/grunt-sketch#optionsincludesymbols

I couldn't find the option for gulp-sketch. Might be great, though.

Thanks!
Hi @cognitom,

When gulp-sketch exports images, it does not use the original path of the sketch file when deciding where to save the exported versions. This causes problems in a project which has its sketch files in various locations in a project. So, if we had this structure:

- components
  - component1
    - component1.sketch
  - component2
    - component2.sketch
  - component3
    - component3.sketch

Then when the images are created, if we set up gulp-sketch to store exports in `exports`, then they get saved like this:

- exports
  - component1.png
  - component2.png
  - component3.png

when instead we would want this:

- exports
  - component1
    - component1.png
  - component2
    - component2.png
  - component3
    - component3.png

As a workaround, I set up our gulp task like this:

```javascript
const path = require('path');
const tap = require('gulp-tap');
const gulp = require('gulp-help')(require('gulp'));
const sketch = require('gulp-sketch');

/**
 * Export images from a sketch file
 */
gulp.task('sketch', function(){
  let dest;

  return gulp.src('./src/**/*.sketch')
    .pipe(tap((file) => {
      // gulp-sketch strips out destination path
      dest = path.dirname(path.join(file.base, path.relative(file.base, file.path)));

      return file;
    }))
    .pipe(sketch({
      export: 'slices',
      formats: 'png',
    }))
    .pipe(gulp.dest((file) => {
      return `${dest}/sketch-export/`;
    }));
});
```

The above task then requires the `dest` variable, created during the flow, to be able to achieve the same directory structure as our app. I do this so that the exported images live in the same directory as the .sketch file, in a subdirectory called `sketch-export`.

It would be great if there was an option to allow maintaining/recreating the original directory structure in which the sketch files are located.
Hi,
I am trying to run an independent gulp task, which will convert all my sketch files in a folder to pngs in another folder.

I am running the following task as per the given syntax:
```
gulp.task('sketch', function(){
return gulp.src('sketch-files/*.sketch')
.pipe(sketch({
export: 'artboards',
formats: 'png'
})).on('error', gutil.log)
.pipe(gulp.dest('preview'));
});
```

The task starts but never ends and i am thrown out of the gulp task. No pngs generated either...
I am using gulp-sketch 1.0.5 and sketch version 45.2

Folder structure,
---gulpfile.js
---sketch-files
---preview
**_all at the same level_**

Terminal Output:
![untitled-1](https://user-images.githubusercontent.com/30406194/28659707-0776fc74-72ce-11e7-8cc2-0ba92f376234.png)


Using nested artboard / layer / slice names like `somedir/subdir/asset` throws the following error:

```
fs.js:651
  var r = binding.read(fd, buffer, offset, length, position);
                  ^

Error: EISDIR: illegal operation on a directory, read
  at Error (native)
  at Object.fs.readSync (fs.js:651:19)
  at Object.fs.readFileSync (fs.js:472:24)
  at Socket.<anonymous> (/Users/matthewwagerfield/Dropbox/Business/Native/VimpelCom/beacon/prototypes/boilerplate/node_modules/gulp-sketch/index.js:78:20)
  at emitNone (events.js:85:20)
  at Socket.emit (events.js:179:7)
  at endReadableNT (_stream_readable.js:906:12)
  at nextTickCallbackWith2Args (node.js:474:9)
  at process._tickCallback (node.js:388:17)
```

Investigating this it would appear that the issue is with `fs.readFileSync` attempting to read a directoryâ€”in the example above this would be `somedir`.

Posibility to add source filename as additional folder to exported files.

Locally we can pass the tests, but failed on Travis because of the version of Node.js on Travis's `osx` environment.

- [ ] Read buffer instead of direct file access
- [x] Use [temp](https://www.npmjs.org/package/temp) to avoid conflict
- [ ] Divide this module into two, and make a new `node-sketch` module
- [ ] Ask to remove it from the blacklist

~~There is a limitation of [vinyl-fs](https://github.com/wearefractal/vinyl-fs/). The plugin couldn't read a directory. This causes a problem if a plugin works with OSX packages or directories. Some research about [it](https://github.com/wearefractal/vinyl-fs/blob/master/lib/src/getContents/readDir.js) is needed.~~ After ver. 3.1, Sketch file is just a file.
