At the moment --help for `hatch release` says: `-s, --strict          Aborts if a distribution already exists.`.

I expected it to exit with non-zero code if the package already existed.
However, behaviour seems to be the opposite of what I expect:

```
$ hatch release 
Uploading distributions to https://upload.pypi.org/legacy/
  Skipping cachew-0.6-py2.py3-none-any.whl because it appears to already exist
(exit code 0)
$ hatch release --strict 
Uploading cachew-0.6-py2.py3-none-any.whl
100%
(exit code 0)
```

So instead of aborting, --strict have forced uploading.
It seems that the option simply forwards to `--skip-existing` of `twine upload`, which means:

```
--skip-existing       Continue uploading files if one already exists. 
```

Should the `--strict` flag do exactly the opposite? Also `--abort` normally implies non-zero exit code, I think; is hatch meant to implement this logic?

Happy to open a PR fix it, just not sure what was the original intent. Thanks.
After upgrading python via Homebrew on Mac OSX, I get the following error when trying to list virtualenvs with `hatch env -l`:

```
dyld: Library not loaded: @executable_path/../.Python
  Referenced from: /Users/kyle/.virtualenvs/nanowire/bin/python
  Reason: image not found
Traceback (most recent call last):
  File "/Users/kyle/.local/bin/hatch", line 8, in <module>
    sys.exit(hatch())
  File "/Users/kyle/.local/pipx/venvs/hatch/lib/python3.7/site-packages/click/core.py", line 764, in __call__
    return self.main(*args, **kwargs)
  File "/Users/kyle/.local/pipx/venvs/hatch/lib/python3.7/site-packages/click/core.py", line 717, in main
    rv = self.invoke(ctx)
  File "/Users/kyle/.local/pipx/venvs/hatch/lib/python3.7/site-packages/click/core.py", line 1135, in invoke
    sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)
  File "/Users/kyle/.local/pipx/venvs/hatch/lib/python3.7/site-packages/click/core.py", line 641, in make_context
    self.parse_args(ctx, args)
  File "/Users/kyle/.local/pipx/venvs/hatch/lib/python3.7/site-packages/click/core.py", line 940, in parse_args
    value, args = param.handle_parse_result(ctx, opts, args)
  File "/Users/kyle/.local/pipx/venvs/hatch/lib/python3.7/site-packages/click/core.py", line 1477, in handle_parse_result
    self.callback, ctx, self, value)
  File "/Users/kyle/.local/pipx/venvs/hatch/lib/python3.7/site-packages/click/core.py", line 96, in invoke_param_callback
    return callback(ctx, param, value)
  File "/Users/kyle/.local/pipx/venvs/hatch/lib/python3.7/site-packages/hatch/commands/env.py", line 31, in list_envs
    echo_info('  Version: {}'.format(get_python_version()))
  File "/Users/kyle/.local/pipx/venvs/hatch/lib/python3.7/site-packages/hatch/env.py", line 17, in get_python_version
    shell=NEED_SUBPROCESS_SHELL
  File "/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", line 411, in check_output
    **kwargs).stdout
  File "/usr/local/Cellar/python/3.7.5/Frameworks/Python.framework/Versions/3.7/lib/python3.7/subprocess.py", line 512, in run
    output=stdout, stderr=stderr)
subprocess.CalledProcessError: Command '['python', '-c', 'import sys;print(".".join(str(i) for i in sys.version_info[:3]))']' died with <Signals.SIGABRT: 6>.
```

This is because the symlinks are all broken and are pointing to a Python version that no longer exists, because Homebrew has pulled the rug out from under us. 

I would recommend adding a `hatch fix` command, or something to that affect, that scans through all the virtualenvs, locates all the broken symlinks, and relinks to the latest appropriate version (2.x or 3.x, depending on the virtualenv) of python.
Hello devs, 

I was wondering if you would be interested in support for readme files in org-mode? I have half an implementation (badges do not work but are not crucial for my workflow right now). 

If you are interested, I can wrap it up and prepare a PR soon.
https://github.com/theacodes/nox is the new tox ;-)
Does Hatch support the [`src` layout](https://blog.ionelmc.ro/2014/05/25/python-packaging/) (or any other custom name)?

Because a lot of major Python projects have switched to the `src` layout now:

- [Flask](https://github.com/pallets/flask);
- [Sentry](https://github.com/getsentry/sentry);
- [Pillow](https://github.com/python-pillow/Pillow);
- [Pip](https://github.com/pypa/pip);
- [Werkzeug](https://github.com/pallets/werkzeug);
- [GEvent](https://github.com/gevent/gevent);
- [PyTest](https://github.com/pytest-dev/pytest);
- [Marshmallow](https://github.com/marshmallow-code/marshmallow);
- [Twisted](https://github.com/twisted/twisted);
- [Pyramid](https://github.com/Pylons/pyramid);
- [Cryptography](https://github.com/pyca/cryptography).

And a few major Python projects have adopted a non-conventional `lib` layout:
- [Ansible](https://github.com/ansible/ansible);
- [SQLAlchemy](https://github.com/sqlalchemy/sqlalchemy).
Is it possible to change the location of the config file? 

```shell
hatch config                                                                                                                                                                                                        
Settings location: /Users/mbaechtold/Library/Application Support/hatch/settings.json
```
When running `hatch new --cli mypackage` the default `entry_point` can conflict with `import mypackage`

[`'console_scripts': ['{pn} = {pnn}.cli:{pnn}']`](https://github.com/ofek/hatch/blob/master/hatch/files/setup.py#L82)

Any thoughts on changing this to `'console_scripts': ['{pn} = {pnn}.cli:cli']` so `__main__` calls `cli()` instead of `mypackage()`?

If so, I can generate a PR and make the default version of `cli.py` a little more `click`-ish
## Feature request / Notes for potential PR
I'm thinking about automating the process of tagging a release and update git mirrors with something like `hatch tag`
to basically run the following.

```console
$ git tag -s 0.1.1
$ git push gitlab 0.1.1
$ git push mirror 0.1.1
```

As per [SO](https://stackoverflow.com/questions/26737222/pypi-description-markdown-doesnt-work) the following needs to be added to setup() for PyPI to correctly render.
`long_description_content_type='text/markdown'`

*Update:*
This solved my PyPI README markdown rendering issue.
At some point I'll look at putting together a pull request.
## Description
I'm open to implementation feedback on this.

This pull request provides initial [CHANGELOG](https://keepachangelog.com/en/1.0.0/) support and currently defaults to markdown, as per the spec.

I'm not sure if the initial release should default to `{package_url}/compare/{version}...HEAD` as an editable example or just use `{package_url}` and then update it to the diffs once grow is run.
`Project Initialized` could be `Project Initialized with [hatch](https://github.com/ofek/hatch)` or configurable via `settings.json`. Should there be a setting to write the file out as `CHANGELOG` without an extension?

I think there is going to be a merge conflict with `package_data` from my other pull requests, but I'm happy to rebase if needed.
