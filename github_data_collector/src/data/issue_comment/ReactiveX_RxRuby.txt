
`Observable#subscribe_on` incorrectly referred to the latter, but the class was actually called the former. Looking at similar implementation it seems to me to be more in line with a subscription than a disposable, so I updated the class description to match.

Added a simple test that uses `#subscribe_on`, and discovered that the test still failed when using the `CurrentThreadScheduler`, which seemed to be fixed by switching to curly brace syntax for the lambda in `#unsubscribe`.
Fix, what I assume is, a typo. Hope the added test is inline with existing ones, since I haven't had the time to get into the tests.
Fixes ReactiveX/RxRuby#107.
how can I install by gem?
The following code generates this traceback:
```
/var/lib/gems/2.1.0/gems/rx-0.0.3/lib/rx/subjects/behavior_subject.rb:80:in `block in on_next': private method `check_unsubscribed' called for #<Rx::BehaviorSubject:0x129b0d0> (NoMethodError)
	from /var/lib/gems/2.1.0/gems/rx-0.0.3/lib/rx/subjects/behavior_subject.rb:79:in `synchronize'
	from /var/lib/gems/2.1.0/gems/rx-0.0.3/lib/rx/subjects/behavior_subject.rb:79:in `on_next'
	from behavior_example.rb:3:in `<main>
```
```
require 'rx'
subject = Rx::BehaviorSubject.new 0
subject.on_next(0)
subject.as_observable.subscribe { puts "hello" }

```

when run using ruby 2.1.5p273 (2014-11-13) [arm-linux-gnueabihf]  
(on a raspberrypi 3)

Is there a reason the method is marked private?  It seems to work fine if I comment out the `private` keyword
When no block is specified, the `combine_latest` operator should combine its two streams into an array (a pair of elements).

Currently, `combine_latest` errors when no block is specified:

```ruby
require 'rx'
require 'pp'

left = Rx::Subject.new
right = Rx::Subject.new

lo = left.as_observable
ro = right.as_observable

lo.combine_latest(ro).subscribe { |x| pp x }

left.on_next(1);
right.on_next(1);
left.on_next(2);
right.on_next(2);

# Error output (truncated):
# rx-0.0.3/lib/rx/operators/multiple.rb:168:in `block (3 levels) in combine_latest': undefined method `call' for nil:NilClass (NoMethodError)
```

In the RxJS implementation, elements from both streams are combined into an array by default:

```js
let left = new Rx.Subject();
let right = new Rx.Subject();

let lo = left.asObservable();
let ro = right.asObservable();

lo.combineLatest(ro).subscribe(x => console.log(x));

left.onNext(1);
right.onNext(1);
left.onNext(2);
right.onNext(2);

/*
As expected, this prints:
[1, 1]
[2, 1]
[2, 2]
*/
```

In RxRuby, this is also the behavior with the static version of `combine_latest`, i.e. `Rx::Observable.combine_latest(lo, ro).subscribe { |x| pp x }` works as expected ([see implementation here](https://github.com/ReactiveX/RxRuby/blob/master/lib/rx/operators/multiple.rb#L496))

This patch updates the instance version of `combine_latest` to match the static version and makes `lo.combine_latest(ro).subscribe { |x| pp x }` work as expected by combining the elements into an array.

RxRuby should implement the [ReactiveX Sample operator](http://reactivex.io/documentation/operators/sample.html).

I've found Sample in the Rx.NET library useful in my .NET projects and I find myself needing it in my current Ruby project. You can see the [Rx.NET implementation here](https://github.com/Reactive-Extensions/Rx.NET/blob/371c83c621562a2259580a03f0cb5bf8680ea720/Rx.NET/Source/System.Reactive.Linq/Reactive/Linq/Observable/Sample.cs).

I've hacked up something that seems to have the behavior I'm looking for, but it is *very* untested and probably has some leaks and incorrect corner cases:

```ruby
module Rx::Observable
  def sample(sampler)
    sample = sampler.map { |e| [e, true] }
    merged = Rx::Observable.merge(self.map { |e| [e, false] }, sample)
    merged.zip(merged.skip(1)).select { |l, r| r[1] }.map { |l, r| l[0] }
  end
end
```

I looked into implementing Sample myself natively in the library and contributing a pull request, but after looking at the source for some other operators, I think it would take far too much time for me to contribute a correct implementation.
The project has stop developing for a while. Does the develop team keep update this project in the future?
There seems to be a bug in the Ruby implementation of start_with. The two examples below, one written using RxRb, the other using RxPy, construct the same observable, emitting a number every two seconds. To the observable two observers are subscribed, which print the received value in colour. While the Python code prints a series of numbers in both colours, the Ruby code only produces yellow numbers - the blue observer never receives it's input.

## Ruby example

```ruby
require 'colorize'
require 'rx'

observable =
  Rx::Observable
  .interval(2)
  .start_with(-1)

observable.subscribe {|i| puts i.to_s.colorize(:yellow) }
observable.subscribe {|i| puts i.to_s.colorize(:blue) }

while Thread.list.size > 1
  (Thread.list - [Thread.current]).each &:join
end
```

## Python example

```python
import asyncio
import rx
import time
from termcolor import colored

class ColouredObserver:
    def __init__(self, colour):
        self.colour = colour
        
    def on_next(self, x):
        self._print("Got: %s" % x)
        
    def on_error(self, e):
        self._print("Got error: %s" % e)
        
    def on_completed(self):
        self._print("Sequence completed")

    def _print(self, what):
        print(colored(what, self.colour))

observable = rx.Observable.interval(2000).start_with(-1)

observable.subscribe(ColouredObserver('yellow'))
observable.subscribe(ColouredObserver('blue'))

time.sleep(20)
```