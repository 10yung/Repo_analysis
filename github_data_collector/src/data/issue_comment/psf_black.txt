**Is your feature request related to a problem? Please describe.**
When using the vim plugin and the vim setup is insufficient ( `version < 700 || !has('python3')` ) the error message printed to messages in vim does not tell the user which plugin is the problem.

All the vim user sees is:
```
This script requires vim7.0+ with Python 3.6 support.
```

And the user is left with no idea what "this script" is.

**Describe the solution you'd like**
Change the message so it says something like:
```
The black.vim plugin requires vim7.0+ with Python 3.6 support.
```

**Describe alternatives you've considered** A clear and concise description of any
alternative solutions or features you've considered.
None

**Additional context** Add any other context or screenshots about the feature request
here.

There's different code on the second pass. This is with black, version 19.10b0.

my output from `uname -a` (though it's probably not useful here)
Darwin myhost.local 19.2.0 Darwin Kernel Version 19.2.0: Sat Nov  9 03:47:04 PST 2019; root:xnu-6153.61.1~20/RELEASE_X86_64 x86_64


**Does this bug also happen on master?** To answer this, you have two options:

This bug doesn't happen on master, strangely enough.

**Additional context** Add any other context about the problem here.

Here's the diff from /var/folders/wt/xh46t1fx79n2xhxlx74q0t680000gn/T/blk_wbstcmcs.log:
```
--- source
+++ first pass
@@ -101,11 +101,13 @@
 class TypeCheckAction(Action):
     def __init__(self, option_strings: Sequence[Text], dest: Text, *args, **kwargs):
         self.type_alias = kwargs.pop("type_alias")
         super().__init__(option_strings, dest, *args, **kwargs)
 
-    def __call__(self, parser: ArgumentParser, namespace: Namespace, values, option_string=None):
+    def __call__(
+        self, parser: ArgumentParser, namespace: Namespace, values, option_string=None
+    ):
         """Acts like _Store, but does additional type checking."""
         typeguard.check_type(self.dest, values, self.type_alias)
         setattr(namespace, self.dest, values)
 
 
@@ -116,19 +118,19 @@
 
     for name, param in sig.parameters.items():
         add_argument_kwargs = _get_kwargs_from_param(param)
 
         if param.kind is Parameter.POSITIONAL_ONLY:
-            arg_names = (param.name, )
+            arg_names = (param.name,)
         elif param.kind is Parameter.KEYWORD_ONLY:
             arg_names = (f"--{param.name}",)
         elif param.kind is Parameter.VAR_POSITIONAL:
-            arg_names = ('-k', '--kwarg', f"--{param.name}")
+            arg_names = ("-k", "--kwarg", f"--{param.name}")
             add_argument_kwargs["nargs"] = 2
             add_argument_kwargs["action"] = "append"
         elif param.kind is Parameter.VAR_KEYWORD:
-            arg_names = ('-k', '--kwarg', f"--{param.name}")
+            arg_names = ("-k", "--kwarg", f"--{param.name}")
             add_argument_kwargs["nargs"] = 3
             add_argument_kwargs["action"] = "append"
         elif param.kind is Parameter.POSITIONAL_OR_KEYWORD:
             # TODO: Can we make positional args an option as well?
             # parser.add_argument(param.name, **add_argument_kwargs)
@@ -157,11 +159,13 @@
         else:
             kwarg_dict["action"] = "store_true"
     elif param.annotation is list:  # Assume it's a list of strings.
         kwarg_dict["type"] = str
         kwarg_dict["nargs"] = "*"
-    elif base_type := getattr(param.annotation, "__origin__", None) is list:  # It's a typing construct
+    elif (
+        base_type := getattr(param.annotation, "__origin__", None) is list
+    ):  # It's a typing construct
         kwarg_dict["action"] = TypeCheckAction
         kwarg_dict["type"] = param.annotation.__args__[0]
         kwarg_dict["type_alias"] = param.annotation
         kwarg_dict["nargs"] = "*"
     elif base_type is dict:
--- first pass
+++ second pass
@@ -161,11 +161,11 @@
     elif param.annotation is list:  # Assume it's a list of strings.
         kwarg_dict["type"] = str
         kwarg_dict["nargs"] = "*"
     elif (
         base_type := getattr(param.annotation, "__origin__", None) is list
-    ):  # It's a typing construct
+    ) :  # It's a typing construct
         kwarg_dict["action"] = TypeCheckAction
         kwarg_dict["type"] = param.annotation.__args__[0]
         kwarg_dict["type_alias"] = param.annotation
         kwarg_dict["nargs"] = "*"
     elif base_type is dict:
```

When black is called with either the --check or --diff option, files are not actually reformatted.

In the former, --check, case, black checks *whether* any files would change, and if so, correctly uses the conditional case in the terminal output (eg, "3 files WOULD BE reformatted", my capitalization).

In the latter, --diff, case, the output says "3 files reformatted", when instead the conditional case should also be used, since files are not actually reformatted.

PR forthcoming.
**Describe the bug** Black fails to generate grammar files when using it as a library as it has no cache directory.

**To Reproduce**

Run `docker build . --no-cache` with the following Dockerfile:

```Dockerfile
FROM python:alpine
RUN apk add --quiet --no-cache gcc musl-dev
RUN pip install -q black
RUN black --version
RUN python -c "import logging; logging.basicConfig(level='INFO'); import black"
# using black at the CLI will generate the cache directory
RUN black /usr/local/lib/python3.8/site-packages/black.py
# and now the error goes away
RUN python -c "import logging; logging.basicConfig(level='INFO'); import black"
```

Output:

```
Sending build context to Docker daemon  2.048kB
Step 1/7 : FROM python:alpine
 ---> 4c30403e92a1
Step 2/7 : RUN apk add --quiet --no-cache gcc musl-dev
 ---> Running in b2ebc87ca240
Removing intermediate container b2ebc87ca240
 ---> 7eaf16ac33ee
Step 3/7 : RUN pip install -q black
 ---> Running in f35cf5216c32
Removing intermediate container f35cf5216c32
 ---> f5f0566d901a
Step 4/7 : RUN black --version
 ---> Running in 979a9e18c2ba
black, version 19.10b0
Removing intermediate container 979a9e18c2ba
 ---> 921b5110292a
Step 5/7 : RUN python -c "import logging; logging.basicConfig(level='INFO'); import black"
 ---> Running in e397fb8de383
INFO:blib2to3.pgen2.driver:Generating grammar tables from /usr/local/lib/python3.8/site-packages/blib2to3/Grammar.txt
INFO:blib2to3.pgen2.driver:Writing grammar tables to /root/.cache/black/19.10b0/Grammar3.8.1.final.0.pickle
INFO:blib2to3.pgen2.driver:Writing failed: [Errno 2] No such file or directory: '/root/.cache/black/19.10b0/tmpz59smnh9'
INFO:blib2to3.pgen2.driver:Generating grammar tables from /usr/local/lib/python3.8/site-packages/blib2to3/PatternGrammar.txt
INFO:blib2to3.pgen2.driver:Writing grammar tables to /root/.cache/black/19.10b0/PatternGrammar3.8.1.final.0.pickle
INFO:blib2to3.pgen2.driver:Writing failed: [Errno 2] No such file or directory: '/root/.cache/black/19.10b0/tmpo51z98bd'
Removing intermediate container e397fb8de383
 ---> f45b0a891017
Step 6/7 : RUN black /usr/local/lib/python3.8/site-packages/black.py
 ---> Running in cecdca8b1662
All done! ✨ 🍰 ✨
1 file left unchanged.
Removing intermediate container cecdca8b1662
 ---> 018298b3b126
Step 7/7 : RUN python -c "import logging; logging.basicConfig(level='INFO'); import black"
 ---> Running in aed6b657c4d8
INFO:blib2to3.pgen2.driver:Generating grammar tables from /usr/local/lib/python3.8/site-packages/blib2to3/Grammar.txt
INFO:blib2to3.pgen2.driver:Writing grammar tables to /root/.cache/black/19.10b0/Grammar3.8.1.final.0.pickle
INFO:blib2to3.pgen2.driver:Generating grammar tables from /usr/local/lib/python3.8/site-packages/blib2to3/PatternGrammar.txt
INFO:blib2to3.pgen2.driver:Writing grammar tables to /root/.cache/black/19.10b0/PatternGrammar3.8.1.final.0.pickle
Removing intermediate container aed6b657c4d8
 ---> c45a0d607331
Successfully built c45a0d607331
```

**Expected behavior**

I expect using `black` as a library to not fail to generate grammar tables. This affects programs that use black only a a library like `jupyterlab-code-formatter`.

**Does this bug also happen on master?**

Yes

**Additional context** Add any other context about the problem here.

This is the root cause of https://github.com/psf/black/issues/1143
**Describe the style change** 

A line containing a `type: ignore` comment caused a really weird output. It has split an equality operation *on* the operator which looks very unnatural. Even though the line would fir well into the maximal line length making the split unnecessary.

It is probably easiest to see in the example below.

**Examples in the current _Black_ style** Think of some short code snippets that show
how the current _Black_ style is not great:

```
     def __eq__(self, other: Any) -> bool:
         if not isinstance(self, other.__class__):
             return False
 
-        return (self.device_ == other.device_ and  # type: ignore
-                self.scope == other.scope and
-                self.id == other.id)
+        return (
+            self.device_ == other.device_
+            and self.scope  # type: ignore
+            == other.scope
+            and self.id == other.id
+        )
```

**Desired style** How do you think _Black_ should format the above snippets:

```
     def __eq__(self, other: Any) -> bool:
         if not isinstance(self, other.__class__):
             return False
 
-        return (self.device_ == other.device_ and  # type: ignore
-                self.scope == other.scope and
-                self.id == other.id)
+        return (
+            self.device_ == other.device_
+            and self.scope == other.scope  # type: ignore
+            and self.id == other.id
+        )
```






If a type hint ends in a trailing space then `INTERNAL ERROR: Black produced code that is not equivalent to the source. ` is thrown.

Minimal example:

```
class Part:
    def __init__(self, text: str) -> None:
        self.text = text # type: str 
```
(Note trailing space after the final str.)
Output:
```
error: cannot format tmp.py: INTERNAL ERROR: Black produced code that is not equivalent to the source.  Please report a bug on https://github.com/psf/black/issues.  This diff might be helpful: /tmp/blk_kbv5kwij.log
Oh no! 💥 💔 💥
1 file failed to reformat.
```
```
cat /tmp/blk_kbv5kwij.log
--- src
+++ dst
@@ -54,11 +54,11 @@
                       id=
                         'self',  # str
                     )  # /Name
                 )  # /Attribute
               type_comment=
-                'str ',  # str
+                'str',  # str
               value=
                 Name(
                   ctx=
                     Load(
                     )  # /Load
```
Obviously this is trivial to fix in any given case by nixing the trailing space and running black again. But in an automated context it might not be so easy.
**Is your feature request related to a problem? Please describe.** 

There are a number of open issues related to handling blank lines (https://github.com/psf/black/issues/932, https://github.com/psf/black/issues/355, etc.) but I was wondering whether Black should have an opinion about all blank lines to further ensure code consistency and remove unnecessary style nits. 

In addition to existing issues in relation to blank lines around comments, docstrings, etc. I wonder if Black should also be opinionated about whether blank lines should be present either preceding, within, or succeeding: 

- if statements
- loops
- try/except blocks 
- multiline statements
- return statements
- inline functions
- etc.

**Describe the solution you'd like** 

Personally for if statements, loops, try/except blocks, and multiline statements I prefer having a blank line preceding and succeeding the statement if the indentation level is the same, i.e., 

```python
try:
    x = int(input())
    x2 = x ** 2
    
    y = a_multiline_statement(
        x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x, x
    )

    if x % 2 == 0:
        print("even")
    else:
        print("odd")

    for i in range(x):
        for j in range(x):
            if i != j:
                print(i * j)
except ValueError as e:
    print(str(e))

``` 

**Describe alternatives you've considered** 
None.
This patch adds the ability for users to `let g:black_quiet = 1` to
suppress output on `Reformatted in ...` and `Already well formatted ...`
messages.
**Describe the bug**

The :BlackUpgrade process in vim installs 18.9b0.
At the time of writing, the latest version is 19.10b0.
(I have 19.10b0 installed via Homebrew)

**To Reproduce** 

1. Install the latest vim plugin from this repository
2. Remove the black virtualenv directory (at ~/.vim/black by default, or customized via g:black_virtualenv)
3. Open a Python file with vim, causing the plugin to reinstall Black
4. Run :BlackVersion

**Expected behavior** 

I expect the latest version to be installed; this process reliably installs a previous version, however.

**Environment (please complete the following information):**

- Version: master (currently 7af619b8c15f1825ac927f298596d53a8499feac)
- OS and Python version: MacOS Mojave 10.14.6 (18G1012), Python 3.7.5
- Vim version: 8.1 (2018 May 18, compiled Oct 30 2019 23:05:43)

**Does this bug also happen on master?** 

Yes

**Additional context** 

I'm encountering the same problem as https://github.com/psf/black/issues/769
I've come to believe that it is due to this version mismatch between the installed Black and the version the vim plugin expects. None of the remediations suggested in #769 work for me.

**Describe the bug** A comment inside a dict comprehension causes black to raise an internal error. The problem seems reproducable via [black playground](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4AFWANJdAD2IimZxl1N_WlbvK5V8iDHdFLCSAG5pDGDwk_6MDa4u0LdJ-k5L7C5cYVOPQPBynCkXQ2mnYJfRCUXEzutee0lFMyoZllU4_cvw9xnSkoDuA7hIt-V52mO0memBS51Dgbdr7BTO1xwUcrUwoRX3aXjzukkVWsaOE9q6qCsd0NPY4Ib7_nJ4Xlex0UmscXHVB4WJ_gUvHGzm3VHG_QvtIo86OgWoJ9NPu2WC5Dor6GNK3NQ4B63MtnGZfkY8LWHjyro7Rqc3B6GC84HQVPMyr1toIAAAAKda25l2zbTHAAHuAdcCAADR0nxqscRn-wIAAAAABFla).

**Code** 
```python
# converter.py
def convert(collection):

    # replace all variables by integers
    replacement_dict = {
        variable: f"{index}"
        for index, variable
        # 0 is reserved as line terminator
        in enumerate(collection.variables(), start=1)
    }
```
**Error**
```python
def convert(collection):

    # replace all variables by integers
    replacement_dict = {
        variable: f"{index}"
        for index, variable# 0 is reserved as line terminator in enumerate(
            collection.variables(), start=1
        )
    }

```

**Log** 
```
...
error: cannot format D:\path\to\converter.py
: INTERNAL ERROR: Black produced invalid code: invalid syntax (<unknown>, line 55). Please report a bug on https://github.com/psf/blac
k/issues.  This invalid output might be helpful: C:\Users\XXX\AppData\Local\Temp\blk_1_om2a5y.log
...
```

**To Reproduce** Run black with the total defaults _(`black directory/`)_ on a file that contains the code above.

**Expected behavior** Produce valid code when formatting dict comprehensions with comments inside.

**Environment (please complete the following information):**

- Version: `black==19.10b0`
- OS and Python version: `Win7x64/Python 3.7.5 (tags/v3.7.5:5c02a39a0b, Oct 15 2019, 00:11:34) [MSC v.1916 64 bit (AMD64)] on win32`

**Does this bug also happen on master?** [Yes](https://black.now.sh/?version=master&state=_Td6WFoAAATm1rRGAgAhARYAAAB0L-Wj4AFWANJdAD2IimZxl1N_WlbvK5V8iDHdFLCSAG5pDGDwk_6MDa4u0LdJ-k5L7C5cYVOPQPBynCkXQ2mnYJfRCUXEzutee0lFMyoZllU4_cvw9xnSkoDuA7hIt-V52mO0memBS51Dgbdr7BTO1xwUcrUwoRX3aXjzukkVWsaOE9q6qCsd0NPY4Ib7_nJ4Xlex0UmscXHVB4WJ_gUvHGzm3VHG_QvtIo86OgWoJ9NPu2WC5Dor6GNK3NQ4B63MtnGZfkY8LWHjyro7Rqc3B6GC84HQVPMyr1toIAAAAKda25l2zbTHAAHuAdcCAADR0nxqscRn-wIAAAAABFla)
