Env:Centos 8
Version:xdotool-3.20150503.1-9.el8.x86_64.rpm

Question:
I have successfully installed Xdotool 3.2 on Centos 8.
But when I use Xdotool command in terminal, it doesn't work,and there is no error log.


There are two related issues that I noticed today.

# windowsize doesn't work when window is fullscreen
## Reproduction:
- Environment: GNOME Shell 3.28.4, Ubuntu 18.04
- Open a window (I used a Chrome window)
- Double click on the top, to make it the full size of the desktop, and focused
- Run xdotool windowsize --sync `/usr/bin/xdotool getwindowfocus` 1920 1080
- The window will not change size

# windowsize has a delayed effect on window sizes, even with --sync
## Reproduction
- Environment: GNOME Shell 3.28.4, Ubuntu 18.04
- Open a window (I used a Chrome window)
- Double click on the top, to make it the full size of the desktop, and focused
- Run the following shell script:
```
set -ex

wmctrl -i -r `/usr/bin/xdotool getwindowfocus` -b remove,fullscreen
wmctrl -i -r `/usr/bin/xdotool getwindowfocus` -b remove,maximized_vert
wmctrl -i -r `/usr/bin/xdotool getwindowfocus` -b remove,maximized_horz
# wmctrl -i -r `/usr/bin/xdotool getwindowfocus` -e 0,-1,-1,1920,1080
xdotool windowsize --sync `/usr/bin/xdotool getwindowfocus` 1920 1080
xwininfo -id `/usr/bin/xdotool getwindowfocus`
sleep 1
xwininfo -id `/usr/bin/xdotool getwindowfocus`
```

Notice that only the second xwininfo shows the correct window resolution. I would expect the `--sync` flag would wait until the window is resized, and then return.

xdotool needs to subtract decorations when reporting window position.   Using these fixed values with `windowmove` will result placing window correctly at the current position.

Current users get value which is outright wrong (absolute position as reported by `xwininfo` plus decorations).  Possible useful values to user are absolute position (drawable part of window) or window position (sans decorations) which is what this patch provides.

Either fix will slightly break existing users unless both are provided as option or new command.
Hello,

thanks for making xdotool, it really is quite an useful little helper!

Is there a way to focus a window without also bringing it to the front? The idea is to interact with the window under the mouse cursor, the same way you would with an actual mouse, i.e. the window doesn't have to be raised, or even focused.

But many windows ignore XSendEvent as mentioned in the manpage. A semi-workaround could be to focus a window, then use regular XTEST events. However, windowfocus also raises a window when used on it, which is not desirable for this use case. Is there a way to prevent this, or is this up to the WM?

Thanks!
On the man page,
>  Type a given keystroke. Examples being "alt+r", "Control_L+J", "ctrl+alt+n", "BackSpace".

>  Generally, any valid X Keysym string will work. Multiple keys are separated by '+'. Aliases exist for "alt", "ctrl", "shift", "super", and "meta" which all map to Foo_L, such as Alt_L and Control_L, etc.

  Please be sure to document the names of all the keys.
E.g., one has to search the web to [finally find how to specify the PageUp key](https://stackoverflow.com/a/31993637/1118719).
many thanks in advance && cheers!
Hi,
not sure if the issue in mainly due to xdotool, LibreOffice or Debian, but I can't test at present different combinations of OS, LO and Debian distribution.
On a Raspberry Pi 3B+ running Raspbian Buster, while I can move a window running a LO 6 Impress presentation, all the xdotool commands aimed at changing slides, like key and click, issued either from another terminal window, or from a python program (by the os.system(cmd) call) do nothing, issuing no error.
The same commands and programs run flawlessly on the same HW platform, under Raspbian Stretch (featuring LibreOffice 5).
Please, let me know if I can try anything or provide any other info to help understanding and possibly fixing this strange behavior.
Best regards.
I tried to kill a certain process when I lose focus of a window by this command
  
    xdotool behave $window_id blur exec kill $pid

But this keeps xdotool to exec kill command even after the first command.
I want a feature like 

    xdotool behave --once $window_id blur exec kill $pid

can run the command once and then stop running command afterwards.
Implement pid searching without additional `search` argument to allow commands like:
```bash
$ xdotool search --pid 123 set_window --urgency 1
```

I don't think it made much sense to search by name *and* pid, previously you had to do something like this:
```bash
$ ./xdotool search --pid 123  name_that_does_not_exist set_window --urgency 1
Defaulting to search window name, class, and classname
```

Fixes #14 
valgrind reports:

> ==5564== 716,184 bytes in 1,176 blocks are definitely lost in loss record 108 of 108
> ==5564==    at 0x483874F: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
> ==5564==    by 0x48DB064: XGetWindowProperty (in /usr/lib/x86_64-linux-gnu/libX11.so.6.3.0)
> ==5564==    by 0x49F5E89: xdo_get_window_property_by_atom (in /usr/lib/x86_64-linux-gnu/libxdo.so.3)
> ==5564==    by 0x49F5FC2: ??? (in /usr/lib/x86_64-linux-gnu/libxdo.so.3)
> ==5564==    by 0x49F668C: xdo_get_desktop_for_window (in /usr/lib/x86_64-linux-gnu/libxdo.so.3)
> ==5564==    by 0x49F8BEC: ??? (in /usr/lib/x86_64-linux-gnu/libxdo.so.3)
> ==5564==    by 0x49F8FD4: ??? (in /usr/lib/x86_64-linux-gnu/libxdo.so.3)
> ==5564==    by 0x49F907F: ??? (in /usr/lib/x86_64-linux-gnu/libxdo.so.3)
> ==5564==    by 0x49F91A1: xdo_search_windows (in /usr/lib/x86_64-linux-gnu/libxdo.so.3)
> ==5564==    by 0x11019F: open_player (player.c:168)
> ==5564==    by 0x10C1B8: main (main.c:260)

Running valgrind on xdotool search, I get more lost memory from allocated by XQueryTree.

There are probably more places where memory is allocated and not being freed afterwards. I haven't done an extensive check.