I was wondering, whether that is an option, or how you'd think about that.
I would imagine,  using the same storage model, or at least have a bridge (importer & exporter) from one format to the other would be cool.

Distributed bug trackers are not a simple concept, and are not widely in peoples scope for tools to actually use in practice. Widening market-share by combining efforts, or at least combining the potential user-base should benefit both(/all) projects. Not to mention the sharing of brilliant minds focused on the same topics.

[this issue](https://github.com/MichaelMure/git-bug/issues/212) might be a good point for initiating contact, if it does not exist yet.

... or do you see fundamental incompatibilities in the ideas behind the two projects?
I am checking out different  in-git issue trackers right now, and browsing yours, I missed (in the README directly):
* the data model (found it later in a linked-to document)
* why you chose not to store issues in files
* if there is a TUI and/or a GUI for submitting issues

I am happy that you still use github issues!
one of the other projects (sit) does not, and it is basically impossible to get in contact with them except though sending emails (adress extracted from git history) to the devs.
... or understanding, compiling, installing, reading docs, creating an issue, submitting .. hopefully all wihtout problems (practically very unlikely).

.. ride on! :-)
This is merely a note for myself.

Maybe it is possible and maybe even a nice way to do it: sending issues (or rather new messages) using git-format-patch and applying using git-am.

I should try this, and if it is possible and nice/niceish, we could provide simple convenience wrappers for these.
I am currently in the process of writing an app with `libgitdit` and I found that it is _way_ to hard to use.

For example, for checking whether an issue is "open", this code has to be written:

```rust
pub fn issue_is_open<'a>(i: &Issue<'a>) -> Result<bool> {
    use libgitdit::trailer::accumulation;
    use libgitdit::trailer::accumulation::Accumulator;
    use libgitdit::trailer::TrailerValue;
    use libgitdit::Message;

    let policy  = accumulation::AccumulationPolicy::Latest;
    let mut acc = accumulation::SingleAccumulator::new("Dit-status".to_owned(), policy);

    let mut messages = vec![];
    for message in i.messages()? {
        let mut trailers = message?.trailers().collect();
        messages.append(&mut trailers);
    }

    acc.process_all(messages.into_iter());

    if let Some((_, val)) = acc.into_iter().next() {
        match val {
            TrailerValue::String(s) => s == "OPEN" || s == "open" || s == "Open",
            _ => false,
        };
    }

    return Ok(false);
}
```

(The actual check for "open", "OPEN" and "Open" is trivial, but the aggregating of trailers is _way_ too complex).

Of course, this functionality should be part of `libgitdit` as in `Issue.get_latest_trailer("Dit-status")? == "Open"` for example, but that's another problem.

The boilerplate for writing this code is _way_ to much. This is only one example, there are other places where this library is too complex to use.
Simple proposal for colored output.

No flags for disabling or changing of color yet. Might be an idea to add, though I guess this first proposal might suffice.
IMO `git dit list` should show author date rather than committer date.
At least not with `push`.
When listing a huge thread/tree with `show -g`, it would be awesome to have colors to quickly see where what is located.

Other commands might benefit as well from a bit of color.

Not that important in 0.y.z development, though necessary for a nice 1.0.0!
Right now we lack a way to `git dit show -t` all issues, am I right?

Or even list all issues with `-g` (one might want that...)
Discussion issue for binary attachements.

Two options which I currently see here:

* [git-annex](https://git-annex.branchable.com/), which is an awesome tool and fits perfectly well for the job, but has the one disadvantage that it uses symlinks (so in-tree "files") for referencing content
* [ipfs](https://ipfs.io), which is wonderful and works great, but then binary content is not tied to the repository. This means that binary blobs can be dropped (and would be lost then) without modifying the repository at all. I'm not sure whether we want such a thing. With IPLD, though, we could still refer from the content to the issue (more accurately: To a hash) it belongs to. So that's not a problem.

---

Of course this is not a thing which might be solved tomorrow, but I'd like to open this anyways to keep track of ideas.