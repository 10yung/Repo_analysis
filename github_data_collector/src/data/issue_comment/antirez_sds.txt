I know that sds is a library solely intended for C but I happened to include the header "sds.h" in a C++ application, I don't want to go into details why I needed to do this. However, when compiling the C++ application I get some of these errors:

```
sds.h:83:49: error: invalid conversion from ‘void*’ to ‘sdshdr8*’ [-fpermissive]
 #define SDS_HDR_VAR(T,s) struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)));                 
                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
```
A minor change in the header would fix this issue. I don't think that it breaks anything, but I think you @antirez know best if it causes side-effects or not.

I've tested this change with in my Application and it works fine in C and C++ so far.


SDS_NOINIT is currently declared in sds.h without extern, resulting in
multiple definitions across sds.h consumers.
With GCC 10, the default of -fcommon option will change to -fno-common,
resulting in an error.
As I've read in the reference and source when you pass an `sds` string to these two functions, you always have to assign the pointer back.

Is there any workaround to make these functions work in-place? That is: pass them an `sds` and have it modified? (without changing the object's pointer)
Example:
```c
sds str;

str = sdsnew("Hi ");
str = sdscat(str, str);
printf("%s\n", str); // not "Hi Hi "
```
It might be worth considering only allocating strings of a capacity that is a power of two (including header) to reduce memory fragmentations:

A simple code snippet to round up to the next power of two:

```
unsigned int v; // compute the next highest power of 2 of 32-bit v

--v;
v |= v >> 1;
v |= v >> 2;
v |= v >> 4;
v |= v >> 8;
v |= v >> 16;
++v;
```

I can make the code contribution if you'd like.


Optimized the use of vsnprintf
The tokens will contain empty sds element when the separator is at the beginning or the end of the unsplit string
the code have passed the sds-test
I did some investigation on Redis source code 4.0 while I was doing my job. Something about sdshdr5 and sdshdr8 storage had raised my curiosity and something really confused me popped up. Here are the steps to reproduce the scenario:
1. Open redis cli
2. Type SET key value
3. So here from my perspective and observation, THE value has been stored with sdshdr8 and THE key has been stored with sdshdr5(through dbAdd->sdsdup)
5. I was guessing with the help of MEMORY USAGE, THE key should be analysed as sdshdr5, while THE key was passed via c->argv[2]->ptr, it will be first encapsulated with method createdEmbeddeStringObject which adopt sdshdr8 as the struct type. So it will be analysed as sdshdr8 rather than sdshdr5.
So, could anyone explain what is the actual reason for this and will this affect the accuracy of MEMORY USAGE command? Appreciated