Some minor improvements to the plugin loosely related to #1364. The original bug discussed in #1364 is already fixed by e1d8f2477c8a41a74e21896d02cd9a850970d1bc.

Is there a reason you implemented IDisposable explicitly? If yes I'll revert this change of course.
Hello,

It semana that certificate is not valid. How to ideal with Fake LE intermediate X1. Tested with Chrome.

Best regards

After validation the records `_acme-challenge...` don't get deleted and remain in the dns. Is this the correct behavior? @georg-jung 

[Let's Encrypt](https://letsencrypt.org/docs/challenge-types/) says:
> However, you should make sure to clean up old TXT records, because if the response size gets too big Letâ€™s Encrypt will start rejecting it.
**Proposal**

A "Null" store plugin that doesn't actually store anything. It basically makes the store step a no-op.

**Rationale**

Would allow renewals as a user that does not have access to the Certificate Store (ie non-admin) with the install step handled by a Script that does an application specific import and enable workflow.

**Current Workaround**

Use a "Central Store" location that the non-admin user does have access to in order to allow the renewal to run. This is completely unused however as the application does not utilise the IIS central store functionality.

**Background (Longer Version)**

We currently use win-acme for Exchange certificate renewals, so we use a PowerShell script based installation process to ensure the new certificate is assigned/enabled for the correct Exchange services.

As part of this process, to avoid running as an admin account, we have the scheduled task set up to run as an unprivileged user that has some minimal Exchange admin roles assigned so as part of the install script we can do the "Import-ExchangeCertificate" and "Enable-ExchangeCertificate" steps as this unprivilged user.

The by-product of this is that during testing we found the initial runs failed as only Administrators can write to the Windows Certficate Store, so wacs would not work at all as our unprivileged user.  To work around this, we have this renewal set up to use the "Central Certificate Store", which is a location the user can write to, however this leaves PFX files with no password (or a static one) on disk which is something our auditors are a little twitchy about.

We do work around this by ensuring ACLs on this "dummy" central store are set appropriately and have a scripted delete of these unused PFX files, however it would be great if there was an option for a "Null Store" that is simply a no-op.

This would then allow an install script to use `{CacheFile}` and `{CachePassword}` as we do to import and enable the certificate for use.

For security reasons, Let's Encrypt is making changes to it's ACMEv2 endpoint, requiring clients to use something it calls `POST-as-GET`. Read the full announcement [here](https://community.letsencrypt.org/t/end-of-life-plan-for-acmev1/88430), but in summary it means that clients that don't implement this feature will stop working with Let's Encrypt. 

- [x] December 2019 - disabled for the staging endpoint (`--test`)
- [ ] November 2020 - disabled for the production endpoint

win-acme implemented the `POST-as-GET` feature in version `2.1.0`, which was released in November 2019. The upcoming `2.0.11` release will also support it as a stop gap measure for Windows 2008 users.

## Call to action

If you are running Windows Server 2012 or above, plan to [upgrade](https://pkisharp.github.io/win-acme/manual/upgrading/to-v2.1.0) to the [latest version](https://github.com/PKISharp/win-acme/releases) of the software this year. There are some breaking changes between versions `2.0.x` and `2.1.x`, but they are actually easily mitigated.

Due to a limitation of the underlying  .NET Core 3.1 framework, the latest version of win-acme does **not** support Windows Server 2008. The `2.0.x` branch is **not** actively maintained or supported, except by special request for people with a gold sponsorship on Patreon. There will however be a `2.0.11` release which supports `POST-as-GET` but doesn't contain any other improvements.
This is an important announcement for users of software version `1.9.x` or earlier. Let's Encrypt is phasing out support for the ACMEv1 protocol that these versions rely upon. The full plan is available [here](https://community.letsencrypt.org/t/end-of-life-plan-for-acmev1/88430), but in summary it looks like this:
 
- [x] November 2019: new registrations become impossible
- [ ] June 2020: it becomes impossible to validate new domains (i.e. to get certificates for domains that you haven't previously gotten a certificate for already)
- [ ] January 2021: the service will be disabled intermittenty, causing occasional renewal failures
- [ ] June 2021: the service will be permanently disabled

win-acme implemented the ACMEv2 protocol in version `2.0.0`, which was released in February 2019.

## Call to action

If you are running Windows Server 2012 or above, plan to [upgrade](https://pkisharp.github.io/win-acme/manual/upgrading/to-v2.1.0) to the [latest version](https://github.com/PKISharp/win-acme/releases) of the software. It's easy to import renewals from the old version to the new version and you will enjoy a more user-friendly, stable and full-featured version of the software.

Due to a limitation of the underlying .NET Core 3.1 framework, the latest version of win-acme unfortunately does **not** support Windows Server 2008. You may install version [2.0.10](https://github.com/PKISharp/win-acme/releases/tag/v2.0.10) as a stop-gap measure, but that version also has limited useful time remaining (see: https://github.com/PKISharp/win-acme/issues/1358). The `2.0.x` branch is **not** actively maintained or supported, except by special request for people with a gold sponsorship on Patreon. 
Hi there

We installed letsencrypt.exe back in 2016 and have been using it with great success on many servers. LetsEncrypt.exe has a timestamp of 11/8/2016. 

We've just received a notification that we need to start using ACMEv2 to validate from LetsEncrypt by June 2020.

From the manual, it appears there's quite a few upgrade steps and not sure we can even complete those as previous versions aren't available for download.

Would it be better to complete uninstall LetsEncrypt.exe and start again?

Dave
If you try to run the TOS - PDF file and you missed to install an PDF reader or you are running windows core you get this error:

```
 Terms of service:   C:\ProgramData\win-acme\acme-v02.api.letsencrypt.org\LE-SA-v1.2-November-15-2017.pdf

 Open in default application? (y/n*)  - yes

 [EROR] Unable to start application
System.ComponentModel.Win32Exception (0x80040154): Class not registered
   at System.Diagnostics.Process.StartWithShellExecuteEx(ProcessStartInfo startInfo)
   at System.Diagnostics.Process.Start()
   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)
   at PKISharp.WACS.Acme.AcmeClient.AcceptTos(String filename, Byte[] content)

 Do you agree with the terms? (y*/n)  - no

```

I know that is stupid that I'm trying to open the PDF without an reader, but I think there should be error handling implemented...
Running on Windows Server 2019 with IIS, creating a new certificate fails to store the certificate so automatic renewals do not happen.

**To Reproduce**
1. File Explorer to C:\Program Files\WinAcme
2. Right click on wacs.exe, "Run as administrator"
3. n (new certificate simple for IIS)
4. 1422078766 (the site ID)
5. Enter (select all bindings)
6. 2 (select second binding as common name)
7. y (continue with selection)
8. See error

**Expected behavior**
Expected it to authorize, request a new certificate, apply it to all appropriate bindings, and schedule it for renewal

**Log**
 [INFO] Target generated using plugin IIS: swupd2019.hq.gci.org and 1 alternatives
 [INFO] Authorize identifier: swupd.hq.gci.org
 [INFO] Cached authorization result: valid
 [INFO] Authorize identifier: swupd2019.hq.gci.org
 [INFO] Cached authorization result: valid
 [INFO] Requesting certificate [IIS] site 1422078766 (any host)
 [INFO] Store with CertificateStore...
 [INFO] Installing certificate in the certificate store
 [INFO] Adding certificate [IIS] site 1422078766 (any host) 2020/1/15 9:09:47 to store WebHosting
 [EROR] Error saving certificate to intermediate store
 [EROR] (WindowsCryptographicException) Unable to store certificate: Access is denied.
 [EROR] Create certificate failed: Store failed: Access is denied.


**Platform:**
 - OS: Windows Server 2019 Standard, English
 - Version: 2.1.2.641 (RELEASE, UNPLUGGABLE)

I'm having trouble with a renewal using WinAcme v 2.1.2.641 on Server 2012 R2 Standard (fully patched). The error thrown is "Authentication failed because the remote party has closed
 the transport stream".

 Here is the verbose output from the request:

 [VERB] Sending e-mails False
 [DBUG] Scanning IIS site bindings for hosts
 [VERB] 9 named bindings found in IIS
 [DBUG] Filtering by site(s) [1]
 [VERB] 1 bindings remaining after site filter
 [DBUG] Filtering by host: ^(www\.example\.com)$
 [VERB] 1 bindings remaining after host filter
 [VERB] 1 matching bindings found
 [INFO] Force renewing certificate for www.example.com
 [VERB] Loading ACME account signer...
 [DBUG] Loading signer from C:\ProgramData\win-acme\acme-v02.api.letsencrypt.org\Signer_v2
 [VERB] Constructing ACME protocol client...
 [DBUG] Send GET request to https://acme-v02.api.letsencrypt.org/directory
 [EROR] (IOException): Authentication failed because the remote party has closed
 the transport stream.
 [DBUG] Exception details: IOException {TargetSite=Void StartReadFrame(Byte[], I
nt32, System.Net.AsyncProtocolRequest), StackTrace="   at System.Net.Security.Ss
lStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyn
cRequest)\r\n   at System.Net.Security.SslStream.PartialFrameCallback(AsyncProto
colRequest asyncRequest)\r\n--- End of stack trace from previous location where
exception was thrown ---\r\n   at System.Net.Security.SslStream.ThrowIfException
al()\r\n   at System.Net.Security.SslStream.InternalEndProcessAuthentication(Laz
yAsyncResult lazyResult)\r\n   at System.Net.Security.SslStream.EndProcessAuthen
tication(IAsyncResult result)\r\n   at System.Net.Security.SslStream.EndAuthenti
cateAsClient(IAsyncResult asyncResult)\r\n   at System.Net.Security.SslStream.<>
c.<AuthenticateAsClientAsync>b__65_1(IAsyncResult iar)\r\n   at System.Threading
.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Ac
tion`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n--- End of
 stack trace from previous location where exception was thrown ---\r\n   at Syst
em.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClie
ntAuthenticationOptions sslOptions, CancellationToken cancellationToken)", Messa
ge="Authentication failed because the remote party has closed the transport stre
am.", Data=[], InnerException=null, HelpLink=null, Source="System.Net.Security",
 HResult=-2146232800}
 [EROR] Wrapped in HttpRequestException: The SSL connection could not be establi
shed, see inner exception.
 [EROR] Renewal for www.example.com failed, will retry on next run