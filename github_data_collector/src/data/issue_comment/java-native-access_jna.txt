JNA comes as a dependency in a project of ours, which is bundled and packaged with a JVM (using jlink and jpackage), so the code is enclosed as a module.

We are running into the following problem now:

The code needs to load the native dispatch library from the classpath using ithe method 'loadNativeDispatchLibraryFromClasspath' of 'Native.java'.o
Inside this method the library is loaded using a 'URLClassLoader'
To make the this work in packaged code (i.E. on OSX), our module needs to make this code avaliable from 'outside' the module via this line in the 'module-info.java':

`opens com.sun.jna.darwin;`

This works fine for OSX, but fails for other plattforms, if they contain a dash '-' in the package name of the native dispatch library.
A line like this results in an compile error, cause the dash is not allowed in package names:

`opens com.sun.jna.win32-x86;`

Question now is: Are there plans to move the code of JNA towards modularization? Then maybe this issue could be solved using the 'getResourceAsStream' method of the 'Module' class.
Or another (more hacky) way would be to rename the packages, so they do not contain any more dashes.

Any feedback regarding this issue yould be great. TIA!

Version of JNA: 5.5
OS: MacOS Catalina 
CPU/VM: 64bit 

Apple decided to increase their requirements for the MacOS AppStore. Now their validation process complains if you have 32bit libs. I tried to compile JNA on my MacOS Catalina but failed to compile so far :-/ Can you please help me with this? I would need a 64bit only version that i can sign along with the App (-Dnounpack & -Djna.boot.library.path works well enough for this). But the currently packed libjnidispatch.jnilib is not 'pure 64 bit' it seems. This is what Apple says about this: 

1 package(s) were not uploaded because they had problems:
	/var/folders/xg/kf0ywq0n047_6n6_tz6v2_r80000gn/T/67E702C2-6C79-4B16-966E-E8A06A19D9A2/1135308344.itmsp - Error Messages:
		ERROR ITMS-90240: "Unsupported Architectures. Your executable contained the following disallowed architectures: '[i386 (in com.plaiiin.jenkinsstatus.pkg/Payload/Plaiiin Jenkins Status.app/Contents/app/natives/libjnidispatch.jnilib)]'. 

New apps submitted to the Mac App Store must support 64-bit starting January 2018, and Mac app updates and existing apps must support 64-bit starting June 2018."
2019-12-28 07:11:32.592 altool[46752:921224] *** Error: Errors uploading '/Users/martinschwaller/Code/Plaiiin/Products/JenkinsStatus/productbuild-Plaiiin-Jenkins-Status.pkg': (
    "Error Domain=ITunesTransporterErrorDomain Code=-18000 \"ERROR ITMS-90240: \"Unsupported Architectures. Your executable contained the following disallowed architectures: '[i386 (in com.plaiiin.jenkinsstatus.pkg/Payload/Plaiiin Jenkins Status.app/Contents/app/natives/libjnidispatch.jnilib)]'. New apps submitted to the Mac App Store must support 64-bit starting January 2018, and Mac app updates and existing apps must support 64-bit starting June 2018.\"\" UserInfo={NSLocalizedRecoverySuggestion=ERROR ITMS-90240: \"Unsupported Architectures. Your executable contained the following disallowed architectures: '[i386 (in com.plaiiin.jenkinsstatus.pkg/Payload/Plaiiin Jenkins Status.app/Contents/app/natives/libjnidispatch.jnilib)]'. New apps submitted to the Mac App Store must support 64-bit starting January 2018, and Mac app updates and existing apps must support 64-bit starting June 2018.\", NSLocalizedDescription=ERROR ITMS-90240: \"Unsupported Architectures. Your executable contained the following disallowed architectures: '[i386 (in com.plaiiin.jenkinsstatus.pkg/Payload/Plaiiin Jenkins Status.app/Contents/app/natives/libjnidispatch.jnilib)]'. New apps submitted to the Mac App Store must support 64-bit starting January 2018, and Mac app updates and existing apps must support 64-bit starting June 2018.\", NSLocalizedFailureReason=ERROR ITMS-90240: \"Unsupported Architectures. Your executable contained the following disallowed architectures: '[i386 (in com.plaiiin.jenkinsstatus.pkg/Payload/Plaiiin Jenkins Status.app/Contents/app/natives/libjnidispatch.jnilib)]'. New apps submitted to the Mac App Store must support 64-bit starting January 2018, and Mac app updates and existing apps must support 64-bit starting June 2018.\"}"
)


The Java VM crashes on a 2018 Touchbar Macbook pro. Other platforms (and macs without touchbar) work great. When using a standard AWT/Swing build of the same code, there is no crash.

```
> Task :runJvmFirstThread FAILED
-XstartOnFirstThread not supported via Jogl, switching to an experimental native jna-based implementation
pixelFormat: 140203200597728
openGLContext: 140203226417888
contentView: 140203200489312
NSDefaultRunLoopMode: native@0x7fff849d1540
[timerWithTimeInterval:invocation:repeats:, timerWithFireDate:target:selector:userInfo:, scheduledTimerWithTimeInterval:repeats:block:, timerWithTimeInterval:repeats:block:, allocWithZone:, timerWithTimeInterval:target:selector:userInfo:repeats:, scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:, scheduledTimerWithTimeInterval:invocation:repeats:]
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fff61e56415, pid=919, tid=775
#
# JRE version: OpenJDK Runtime Environment (11.0.4+10) (build 11.0.4+10-b304.77)
# Java VM: OpenJDK 64-Bit Server VM (11.0.4+10-b304.77, mixed mode, tiered, compressed oops, g1 gc, bsd-amd64)
# Problematic frame:
# C  [libobjc.A.dylib+0xb415]  class_conformsToProtocol+0x138
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# /Users/nicolaiemig/dev/engineEmi/hs_err_pid919.log
#
# If you would like to submit a bug report, please visit:
#   https://youtrack.jetbrains.com
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
```
JVM crashlog is on [pastebin](https://pastebin.com/3ALcJctd), because its huge


1. Version of JNA and related jars
gluegen: 2.3.2
jna: 5.5.0
joal: 2.3.2
jog: 2.3.2
2. Version and vendor of the java virtual machine 
 13.0.1 (Oracle Corporation 13.0.1+9) (other VMs give this error woo
3. Operating system / System architecture
Mac OS X 10.15.1 x86_64
6. Steps to reproduce
A) Download Sample project  [here](https://github.com/emign/jvmcrashtest). Its a gradle project:
B) Import build.gradle file
C) Run gradle task "runJvmFirstThread for JNA implementation (crashes) or gradle task runJvm for AWT/Swing implementation (does not crash). The tasks are unter gradle -> korge-run group
<img width="493" alt="Bildschirmfoto 2019-12-03 um 18 37 48" src="https://user-images.githubusercontent.com/5278352/70075055-48783200-15fc-11ea-8df6-5965ae7601ec.png">

X11 key codes are missing in the current maven release:

https://github.com/java-native-access/jna/blob/master/contrib/x11/src/jnacontrib/x11/api/X11KeySymDef.java

Please include them.

TY!
I've seen #285 and #191, [this](https://groups.google.com/forum/#!searchin/jna-users/size_t%7Csort:date/jna-users/hV8gK2i6iho/jzMbzDIr-0QJ) Google group post and [another](https://groups.google.com/forum/#!searchin/jna-users/size_t|sort:date/jna-users/CpTwMpvkImM/mNRhPXgbAgAJ) Google group post. `size_t` and `ssize_t` are very common types especially when making system calls in Linux. 

However, I don't see any direct support for those types _still_ in JNA. There looks to be a couple of implementations buried as nested classes, but they are not accessible since they aren't in the public scope. Why don't classes exist for these types?
Hello,
I'm using the X11 bindings included in JNA, and noticed the function `XLowerWindow` to be missing. I checked the sources, and it's not there. I can trivially add it myself, but it would be nice if it were present in an official build.

https://tronche.com/gui/x/xlib/window/XLowerWindow.html


https://github.com/java-native-access/jna/blob/dabdcd7c27e2b4d7f672fca1c55b6da5c74badb5/native/dispatch.c#L3461

I think I traced a segfault to this line.  The return type stored in closure can be NULL on allocation failure.  ffi_prep_closure_loc assumes that the value is valid, so passing NULL will produce a seg fault.

This happens on locked down systems with restricted execution and write permissions.  The libffi closure API requires either trivially executable heap allocations or a location to mmap with both read-write and exec permissions. If it doesn't have this (e.g. selinux with no rw, exec mounts), it will fail to allocate the closure structure.

Perhaps this could fail more gracefully?
1. Version of JNA and related jars
JNA 5.3.1

2. Version and vendor of the java virtual machine
Oracle Corporation Java HotSpot(TM) 64-Bit Server VM 1.8.0_181

3. Operating system
Ubuntu 16.04.6

4. System architecture (CPU type, bitness of the JVM)
Intel x64, x64 JVM

5. Complete description of the problem
I cannot pass `String` objects to a JNI method for invocation, (even using JniEnv.CURRENT and setting OPTION_ALLOW_OBJECTS), since a `String` is always converted to `NativeString`.

    When trying to call JNI methods, JNA invokes `convertArgument()` just before C method invocation, and `String` is converted to `NativeString` before `allowObjects` is checked. This means that it is impossible to pass the Java `String` (jstring) object to C (which accepts `jstring` as a parameter type). For example, [JVM_FindLoadedClass(JNIEnv *env, jobject loader, jstring name);](https://github.com/frohoff/jdk8u-jdk/blob/master/src/share/javavm/export/jvm.h#L419)

6. Steps to reproduce

```
    public
    interface JVM extends com.sun.jna.Library {
         Class JVM_FindLoadedClass(JNIEnv env, Object classLoader, String name);
    }


    Map options = new HashMap();
    options.put(Library.OPTION_ALLOW_OBJECTS, Boolean.TRUE);

    JVM libjvm = Native.load("jvm", JVM.class, options);
    jvm.JVM_FindLoadedClass(JNIEnv.CURRENT, classLoader, className);
```


It is entirely likely that I don't know what I'm doing, after reading through the documentation and studying the source -- I do not know how to pass a `String` as a `jstring` object (not a `char*` object) to native code. I've tried type converters, but those didn't get me anywhere, since `String` is always converted to `NativeString` as an argument... 

Because the `Function` constructor is package scope, as is `invoke`, I cannot overload `invoke` to *not* convert arguments, so I am unable to modify the method invocation (outside of rewriting the class definition at runtime via javassist or something similar)

One solution I thought of, while trying to figure this out, is modify the `convertArgument()` method so that the check for `allowObjects` occurs sooner, allowing **all** Java objects to passed without conversion -- so the check for `allowObjects` is after JNA specific object types (struct, etc), but before the Java object type conversion (mostly string),  instead of where currently is (which is last)....

NOTE: Loading the JVM library for Windows 32 bit, or MACOS is slightly different. The above only loads it on Linux, specifically Ubuntu 16.04.6 x64 with an Oracle JVM (from my testing, this is currently true for all released Oracle JVM's on Linux, but I haven't tested every combination....)
* Documentation for [shm_open](http://man7.org/linux/man-pages/man3/shm_open.3p.html).
* Documentation for [shm_unlink](http://man7.org/linux/man-pages/man3/shm_unlink.3p.html).
* Documentation for [mmap](http://man7.org/linux/man-pages/man2/mmap.2.html).


`Kernel32::CreateFileMapping` exists, but `Kernel32::OpenFileMapping` does not. This is more confusing because `Kernel32::MapViewOfFile` mentions `OpenFileMapping` in its Javadocs here: https://github.com/java-native-access/jna/blob/b8bdacbd6b3971c2da384d4738133408ac330221/contrib/platform/src/com/sun/jna/platform/win32/Kernel32.java#L1052-L1054

I believe the signature should be this:
```java
HANDLE OpenFileMapping(WinBase.SECURITY_ATTRIBUTES lpAttributes,
        boolean bInheritHandle, String lpName);
```
derived from the specs [here](https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-openfilemappinga).