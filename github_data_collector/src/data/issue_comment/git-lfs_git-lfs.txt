There's a bug with Actions right now that causes the path to be set incorrectly, and as a result, this causes Windows binaries to be executed in some cases instead of the binaries that come with Git Bash. This shows up in our test suite as a hang during the execution of t-credentials.sh.

Since we can't build or release software while the Actions workflows aren't working, let's adjust the path temporarily so that things work as expected.

This is an in-progress look at the next release of Git LFS, v2.9.1, which is scheduled for Tuesday, January 21, 2020.

We're publishing these changes early so that folks on @git-lfs/implementers can check that things work with their various platforms.

I've attached some builds below for people to use for testing:

[git-lfs-darwin-386-v2.10.0-pre.tar.gz](https://github.com/git-lfs/git-lfs/files/4074030/git-lfs-darwin-386-v2.10.0-pre.tar.gz)
[git-lfs-darwin-amd64-v2.10.0-pre.tar.gz](https://github.com/git-lfs/git-lfs/files/4074031/git-lfs-darwin-amd64-v2.10.0-pre.tar.gz)
[git-lfs-freebsd-386-v2.10.0-pre.tar.gz](https://github.com/git-lfs/git-lfs/files/4074032/git-lfs-freebsd-386-v2.10.0-pre.tar.gz)
[git-lfs-freebsd-amd64-v2.10.0-pre.tar.gz](https://github.com/git-lfs/git-lfs/files/4074033/git-lfs-freebsd-amd64-v2.10.0-pre.tar.gz)
[git-lfs-linux-386-v2.10.0-pre.tar.gz](https://github.com/git-lfs/git-lfs/files/4074034/git-lfs-linux-386-v2.10.0-pre.tar.gz)
[git-lfs-linux-amd64-v2.10.0-pre.tar.gz](https://github.com/git-lfs/git-lfs/files/4074035/git-lfs-linux-amd64-v2.10.0-pre.tar.gz)
[git-lfs-linux-arm64-v2.10.0-pre.tar.gz](https://github.com/git-lfs/git-lfs/files/4074036/git-lfs-linux-arm64-v2.10.0-pre.tar.gz)
[git-lfs-linux-ppc64le-v2.10.0-pre.tar.gz](https://github.com/git-lfs/git-lfs/files/4074037/git-lfs-linux-ppc64le-v2.10.0-pre.tar.gz)
[git-lfs-linux-s390x-v2.10.0-pre.tar.gz](https://github.com/git-lfs/git-lfs/files/4074038/git-lfs-linux-s390x-v2.10.0-pre.tar.gz)
[git-lfs-v2.10.0-pre.tar.gz](https://github.com/git-lfs/git-lfs/files/4074039/git-lfs-v2.10.0-pre.tar.gz)
[git-lfs-windows-386-v2.10.0-pre.zip](https://github.com/git-lfs/git-lfs/files/4074040/git-lfs-windows-386-v2.10.0-pre.zip)
[git-lfs-windows-amd64-v2.10.0-pre.zip](https://github.com/git-lfs/git-lfs/files/4074041/git-lfs-windows-amd64-v2.10.0-pre.zip)

In addition, the CI system will produce artifacts for Windows, Linux, and macOS if you prefer to use those; they should be equivalent.

/cc @git-lfs/core
/cc @git-lfs/implementers
/cc @git-lfs/releases
**Describe the issue**
If you delete or rename a file in the repository that's lockable, it's a good practice to lock that file so that no one else does work on the file. At the moment you can't obtain a lock for a file that's not in the working tree so if you rename or delete the file, then decide to obtain the lock, you can't.

`git lfs lock <file that doesn't exist>`
results in the error
`CreateFile <full path to file>: The system cannot find the file specified.`

Browsing the LFS source code, the error may be the result of `tools.SetFileWriteFlag` failing in which case perhaps that should only be called if the file exists.

Propose that `git lfs lock <filepath>` allows locking files which don't exist, perhaps with an option to allow this behavior to prevent obtaining locks for junk. Rejecting paths which don't pass `filepath.Clean` may also be appropriate.

There's a similar problem with unlocking. Once you've pushed changes and want to release the locks, if the file was deleted then `git lfs unlock` complains with the same `CreateFile:` error if the file isn't in the working tree.

In this instance, propose that `git lfs unlock -i <id>` does not perform the check for the local file.

**System environment**
`$ git config -l` (with personal information redacted)
```diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
credential.helper=manager
winupdater.recentlyseenversion=2.25.0.windows.1
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
```

**Output of `git lfs env`**
`git lfs env` (with personal information redacted)
```git-lfs/2.9.2 (GitHub; windows amd64; go 1.12.7; git 0274d856)
git version 2.25.0.windows.1

LocalReferenceDirs=
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic,lfs-standalone-file
UploadTransfers=basic,lfs-standalone-file
GIT_EXEC_PATH=C:/Program Files/Git/mingw64/libexec/git-core
git config filter.lfs.process = "git-lfs filter-process"
git config filter.lfs.smudge = "git-lfs smudge -- %f"
git config filter.lfs.clean = "git-lfs clean -- %f"
```

**Additional context**
None
**Describe the issue**
@bk2204 Currently only `arm64`, `amd64` and `i386` are being put on the releases for git-lfs. This creates an issue when going to use other architectures like `s390x` and `ppc64le`, since we have to build from source.

It would be great to have `s390x` and `ppc64le` binaries added to releases for convenience.
 
Building `s390x` binary using the build from source directions work fine, see below for confirmation. 

I could not tell how you are producing your builds. I saw multiple CI/CD, travis and circle. You be amazing if releases could get up in Package Cloud but I am not familiar with them to know if they support `s390x` and `ppc64le`. 

If you need access to `s390x` and `ppc64le` please let me know. There are multiple ways to give you access. 


**System environment**
```
root@eda37e058ace:/go/bin# ./git-lfs
git-lfs/2.9.0 (GitHub; linux s390x; go 1.13.6)
Sorry, no usage text found for "git-lfs"
root@eda37e058ace:/go/bin# ./git-lfs install
Git LFS initialized.
root@eda37e058ace:/go/bin# uname -m
s390x
```

**Describe the bug**
When force-pushing a ref to a remote, if the object the remote side's ref points to is not in the local copy, we'll abort with a message like the following:

```
ref temp:: Error in git rev-list --stdin --objects --not --remotes=origin --: exit status 128 fatal: bad object ae86523521e10b0e8aa3c50dda910064ec2ff155
```

**Expected behavior**
We don't abort in this case and simply skip using that object.

**System environment**
Debian sid, Git LFS `master`
Hey there,

I was looking at the git lfs dedup command which sounds really useful, thanks for working on that. I am running macOS 10.14.6 on an APFS volume (encrypted). 
git lfs dedup --test reports : "This system does not support deduplication. unsupported platform"

Running cp -c in terminal reports no error so I am assuming clonefile is working correctly (I could not figure out how to determine clonefile actually working on macOS)

I am running: 
git-lfs/2.9.2 (GitHub; darwin amd64; go 1.12.7; git 0274d856)

Any suggestions? Am I missing something?
Thanks a lot!
Hi, I found the rule of filepathfilter.go has being changed.
git lfs checkout path/to/file.lib will being treated as
"\*\*/path/to/file.lib/\*\*"
and cause pattern not matching, thus specified lfs object will be rejected.

Ex: 
$GIT_TRACE=1 git lfs checkout  'path/to/file.lib'
16:57:41.048285 git.c:654               trace: exec: git-lfs checkout path/to/file.lib
16:57:41.048324 run-command.c:637       trace: run_command: git-lfs checkout path/to/file.lib
16:57:41.053878 trace git-lfs: exec: git 'version'
16:57:41.056726 trace git-lfs: exec: git '-c' 'filter.lfs.smudge=' '-c' 'filter.lfs.clean=' '-c' 'filter.lfs.process=' '-c' 'filter.lfs.required=false' 'rev-parse' 'HEAD' '--symbolic-full-name' 'HEAD'
16:57:41.058475 trace git-lfs: exec: git 'config' '-l'
16:57:41.060745 trace git-lfs: filepathfilter: rewrite "path/to/file.lib" as "\*\*/path/to/file.lib/\*\*"
....
....
16:57:41.077417 trace git-lfs: filepathfilter: rejecting "path/to/file.lib" via [path/to/file.lib]


Same thing also happen to:
git lfs pull --include=path/to/file.lib
**Describe the bug**

Following up with #3927, I'm accessing in-house private git, which used to be MS TFS, but now as git. With such Windows TFS-git, the `git config --global http.emptyAuth true` setting has no effect on `git lfs`.


**To Reproduce**
Steps to reproduce the behavior:
1. `git config --global http.emptyAuth true`
2. `git pull` -- AOK
3. Change Windows' password
4. `git pull` again. 

**Expected behavior**

 `git pull` again after changing Windows' password will still work. 
However, the current situation is that, after changing Windows' password,  `git pull` works for normal files, but lfs files will not be working. 

```
Error downloading object: ... Smudge error: Error downloading ...
smudge filter lfs failed
...
error: external filter 'git-lfs filter-process' failed
fatal: ...: smudge filter lfs failed
could not detach HEAD
```

**System environment**

GitBash under Windows (v11, but I believe it's true for all Window versions).

**Details**

Without `git config --global http.emptyAuth true`:

```
$ git pull
fatal: Authentication failed for 'http://td...:8080/tfs/.../_git/.../'
```

After `git config --global http.emptyAuth true` (without cached username/password), as reported above:

```
Error downloading object: ... Smudge error: Error downloading ...
smudge filter lfs failed
...
error: external filter 'git-lfs filter-process' failed
fatal: ...: smudge filter lfs failed
could not detach HEAD
```

Using `GIT_TRACE=1 GIT_TRANSFER_TRACE=1 GIT_CURL_VERBOSE=1 git pull` I can see 

`Authorization: Negotiate TlRMT...` and zero hit for keyword `credential`. 
Full log at https://pastebin.com/raw/YthyYjtA. NB, this is the case log when all git lfs files are failing, even though git is showing different errors at the end.


After adding the manager helper (`git config --global credential.helper manager`)

> Ref https://stackoverflow.com/a/15382950/2125837 -- This stores your credentials in the Windows credential store which has a Control Panel interface where you can delete or edit your stored credentials. With this store, your details are secured by your Windows login and can persist over multiple sessions. 

This is what I got (as I don't know what's the simplest git lfs operation that will trigger doing the lfs downloading):

```
$ rm .../Dependencies/Selenium/Drivers/chromedriver.exe

$ GIT_TRACE=1 GIT_TRANSFER_TRACE=1 GIT_CURL_VERBOSE=1 git reset --hard origin/master
14:13:39.078203 exec-cmd.c:236          trace: resolved executable dir: C:/Programs/Git/mingw64/bin
14:13:39.086183 git.c:415               trace: built-in: git reset --hard origin/master
14:13:42.174478 run-command.c:637       trace: run_command: 'git-lfs filter-process'
14:13:42.315389 trace git-lfs: exec: git 'version'
14:13:42.477477 trace git-lfs: exec: git 'config' '-l'
14:13:42.500450 trace git-lfs: Install hook: pre-push, force=false, path=\Path\to\.git\hooks\pre-push, upgrading...
14:13:42.500450 trace git-lfs: Install hook: post-checkout, force=false, path=\Path\to\.git\hooks\post-checkout, upgrading...
14:13:42.501432 trace git-lfs: Install hook: post-commit, force=false, path=\Path\to\.git\hooks\post-commit, upgrading...
14:13:42.501432 trace git-lfs: Install hook: post-merge, force=false, path=\Path\to\.git\hooks\post-merge, upgrading...
14:13:42.501432 trace git-lfs: Initialize filter-process
14:13:42.501432 trace git-lfs: exec: git '-c' 'filter.lfs.smudge=' '-c' 'filter.lfs.clean=' '-c' 'filter.lfs.process=' '-c' 'filter.lfs.required=false' 'rev-parse' 'HEAD' '--symbolic-full-name' 'HEAD'
14:13:42.531417 trace git-lfs: WARNING: "matching" push mode not supported
14:13:42.531417 trace git-lfs: tq: running as batched queue, batch size of 100
14:13:42.531417 trace git-lfs: filepathfilter: rejecting ".../Dependencies/Selenium/Drivers/chromedriver.exe" via []
14:13:42.531417 trace git-lfs: filepathfilter: accepting ".../Dependencies/Selenium/Drivers/chromedriver.exe"
14:13:43.118088 run-command.c:46        trace: run_command: running exit handler for pid 22916
14:13:43.119091 trace git-lfs: filepathfilter: rewrite ".git" as "**/.git/**"
14:13:43.119091 trace git-lfs: filepathfilter: rewrite "**/.git" as "**/.git"
14:13:43.119091 trace git-lfs: filepathfilter: rejecting "tmp" via []
14:13:43.119091 trace git-lfs: filepathfilter: accepting "tmp"
HEAD is now at fda3a5be2cc Update configure button ...
```

Relates to https://github.com/Homebrew/homebrew-core/pull/45467

On Mojave:

```
==> gem install ronn
Successfully installed mustache-1.1.1
Building native extensions.  This could take a while...
ERROR:  Error installing ronn:
	ERROR: Failed to build gem native extension.

    current directory: /private/tmp/git-lfs-20191228-50033-1a6g4ls/git-lfs-2.9.2/src/github.com/git-lfs/git-lfs/.gem_home/gems/rdiscount-2.2.0.1/ext
/System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/bin/ruby -r ./siteconf20191228-50047-x6c9kn.rb extconf.rb
mkmf.rb can't find header files for ruby at /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/include/ruby.h

extconf failed, exit code 1

Gem files will remain installed in /private/tmp/git-lfs-20191228-50033-1a6g4ls/git-lfs-2.9.2/src/github.com/git-lfs/git-lfs/.gem_home/gems/rdiscount-2.2.0.1 for inspection.
Results logged to /private/tmp/git-lfs-20191228-50033-1a6g4ls/git-lfs-2.9.2/src/github.com/git-lfs/git-lfs/.gem_home/extensions/universal-darwin-18/2.3.0/rdiscount-2.2.0.1/gem_make.out
```

Please take a look and help with the upgrade, Thanks!
**Describe the bug**
Been having random git push errors with lfs missing objects - tried repacks and various other actions in several other issues. Eventually got things back happy after an explicit 'git lfs push --all origin master' from top level dir.

Then I got user report that it was failing. Only thing different was the other user tried to run it from a subdir. I can now reproduce the failure from the subdir.

**To Reproduce**
Steps to reproduce the behavior:

No idea how to create a reproduction of it, but right now on my working copy I have:

Main Project Dir/Clone (network mgmt)
   --> a couple dirs down
      --> Secondary Project Dir/Clone (network mgmt firmware - in separate repo)
           (this dir is ~/tftp/fw)

If I run 'git lfs push --all origin master' from that dir - it works just fine. I get no errors at all.

If I cd two levels down to ~/tftp/fw/repository/cisco - I start getting missing object error.

**Expected behavior**
No failure to push.

**System environment**

```
netconf@netstat:~/tftp/fw/repository/cisco$ git --version
git version 2.7.4
netconf@netstat:~/tftp/fw/repository/cisco$ git-lfs --version
git-lfs/2.7.2 (GitHub; linux amd64; go 1.12.4)
````

Running on ubuntu 16.04

**Output of `git lfs env`**

```
netconf@netstat:~/tftp/fw/repository/cisco$ git lfs env
git-lfs/2.7.2 (GitHub; linux amd64; go 1.12.4)
git version 2.7.4

Endpoint=https://git.mst.edu/netconf/netconf-fw.git/info/lfs (auth=basic)
  SSH=git@git.mst.edu:netconf/netconf-fw
Endpoint (ssh)=https://git.mst.edu/netconf/netconf-fw.git/info/lfs (auth=basic)
  SSH=git@git.mst.edu:netconf/netconf-fw
LocalWorkingDir=/local/netconf/tftp/fw
LocalGitDir=/local/netconf/tftp/fw/.git
LocalGitStorageDir=/local/netconf/tftp/fw/.git
LocalMediaDir=/local/netconf/tftp/fw/.git/lfs/objects
LocalReferenceDirs=
TempDir=/local/netconf/tftp/fw/.git/lfs/tmp
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=/local/netconf/tftp/fw/.git/lfs
AccessDownload=basic
AccessUpload=basic
DownloadTransfers=basic
UploadTransfers=basic
GIT_AUTHOR_EMAIL=nneul@umad.umsystem.edu
GIT_COMMITTER_EMAIL=nneul@umad.umsystem.edu
GIT_AUTHOR_NAME=nneul at umad.umsystem.edu
GIT_COMMITTER_NAME=nneul at umad.umsystem.edu
git config filter.lfs.process = "git-lfs filter-process"
git config filter.lfs.smudge = "git-lfs smudge -- %f"
git config filter.lfs.clean = "git-lfs clean -- %f"
```

**Additional context**

Running against a local gitlab-ce environment. 