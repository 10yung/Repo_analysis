Dear 
when i use swiftGen for String and localizing. when string has one latin character like   "√ß", "~", "¬¥" or "^"  
the return value is wrone and has accent of the world you can see the result of swiftgen when do localized
can you help me

![error](https://user-images.githubusercontent.com/10689405/72445304-6ca56200-37a9-11ea-9ca3-0aff63136649.png)


I have a proposition to add an option to `Assets` generation to create static constants as extensions of `UIColor`/`NSColor`/`SwiftUI.Color` instead of / aside a new `Color` struct.

## Advantage:
Can easily be used with system functions and provides more compact code:
```swift
view.backgroundColor = .myCustomColor
button.setTitleColor(.myCustomColor, for: .normal)
Text("Your content").background(.myCustomColor)
```
instead of 
```swift
view.backgroundColor = Asset.Color.myCustomColor.color
button.setTitleColor(Asset.Color.myCustomColor.color, for: .normal)
Text("Your content").background(Asset.Color.myCustomColor.color) //not sure
```

## Disadvantage:
Named colors like `.white` or `.black` can be confused with system ones, although the compiler doesn't create an ambiguity warning (probably because system ones are `class var`)

----
Example `.stencil` snippet for iOS:
```
extension UIColor {
{% for asset in assets %}
    {% if asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
        {% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
        {% call allcolorsBlock asset.items "color" prefix2 %}
    {% elif asset.items %}
        {% call allcolorsBlock asset.items "color" prefix %}
    {% endif %}
{% endfor %}
}

{% macro allcolorsBlock assets filter prefix %}
    {% for asset in assets %}
        {% if asset.type == filter %}
  {{accessModifier}} static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = UIColor(named: "{{asset.value}}")!
        {% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
            {% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
            {% call allcolorsBlock asset.items filter prefix2 %}
        {% elif asset.items %}
            {% call allcolorsBlock asset.items filter prefix %}
        {% endif %}
    {% endfor %}
{% endmacro %}
```

Example Generated code:
```swift
extension UIColor {
  internal static let almostBlack = UIColor(named: "almostBlack")!
  internal static let black = UIColor(named: "black")!
  internal static let bombay = UIColor(named: "bombay")!
  internal static let coolGrey = UIColor(named: "coolGrey")!
  internal static let darkGreenBlue = UIColor(named: "darkGreenBlue")!
  internal static let darkKhaki = UIColor(named: "darkKhaki")!
  ...
}
```
* [x] I've started my branch from the `develop` branch (gitflow)
  * [x] And I've selected `develop` as the "base" branch for this Pull Request I'm about to create
* [x] I've added an entry in the `CHANGELOG.md` file to explain my changes and credit myself  
      _(or added `#trivial` to the PR title if I think it doesn't warrant a mention in the CHANGELOG)_
  * [x] Add the entry in the appropriate section (Bug Fix / New Feature / Breaking Change / Internal Change)
  * [x] Add a period and 2 spaces at the end of your short entry description
  * [x] Add links to your GitHub profile to credit yourself and to the related PR and issue after your description

---

During migration my team and myself moved some files which used `L10n` structure to other frameworks, after moving `.strings` file there as well we are not be able to use the same `L10n.<FileName>` structure as there is only a single `.strings` file there.

As a solution I've introduced a new file template, but the change is simple, so to keep consistency in those kind of situations I'd like to suggest an option to force add file name `enum`s.

* [x] Documentation updated
* [x] Not a breaking change, option not being provided defaults to old behaviour
* [x] Updated tests
* [x] Not added support for swift3

Cheers! ‚òÆÔ∏è 
I'm about to start a project with SceneKit and would love strongly typed references to the contents of `.scnassets` folders (which is SceneKit's preferred way of bundling assets with an application). 

Is this something that would be suitable to add to Swiftgen? I foresee I'll have the time to create a PR in 2020Q1. If so, I'll probably base `SCNAssetsCatalog` off of `AssetsCatalog` in SwiftGenKit, and add logic to support `.scn`, `.dae`, `.mp3`/`.wav` and `.png`/`.jpg` files. If you have any additional remarks/pointers that would be great.
Hey,

Is there a plan to add SwiftUI templates? Right now, all the templates rely on `UIKit` right now.

If not, I can help with implementing this üôÇ  

Probably something like `swiftUI-5` to distinguish between `UIKit` and `SwiftUI` while still being able to differentiate between the Swift versions? Would love to know what you think, thanks.
I'd like to work towards adding support for parsing other file resources that need to be accessed from the bundle, usually with `Bundle.main.url(forResource:withExtension:)` and the like.

Looking through the issues it seems this is a desired functionality, but not much work has been towards achieving it
#109, #146, #284, #496, #637 

My thoughts on the implementation:
- A good name for the subcommand might be `resources`
- Correct me if I'm wrong, but it looks like `inputs` and `filter` are the best way to specify files or file types to include
- It seems I can probably implement the generator pretty quickly duplicating functionality from the yaml and plist generators
- Possible params:
  - enumName (default `Resource`)
  - publicAccess (default `false`)

Thoughts on template:
- Containing enum: `Resource`
- Each resource as a struct `ResourceFile`
- Each resource should have a name including the extension for uniqueness and clarity
- `ResourceFile` can expose two computed properties
  - `url` for `url(forResource:withPath:)
  - `path` for `path(forResource:ofType:)

Need input on:
- Arrays of resources
- Handling subdirectories implicitly/explicitly/disregarding

Thoughts? Ideas? Did I miss anything?
Hello,
I'm trying to use the template `plists/inline-swift4.stencil` template to generate the content of a plist.

So far the content of the plist is:

```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Names</key>
	<array>
		<string>Jhon</string>
		<string>Peter</string>
		<string>Nick</string>
	</array>
	<key>Surnames</key>
	<array>
		<string>Smith</string>
		<string>Jhonson</string>
		<string>Williams</string>
	</array>
</dict>
</plist>
```

And visually it looks:

![Screenshot 2019-10-30 at 12 53 11](https://user-images.githubusercontent.com/10010409/67856520-021f4700-fb15-11e9-8ff0-5e502c606726.png)

Then in the `.swiftgen.yml` I just have somethings as:

```yml
.........
plist:
    inputs: Precompile/OriginPlists/
    outputs:
        templateName: inline-swift4
        output: Generated/Plist.swift
.....
```

When I execute it, it generates wrong data:
```swift
internal static let names: [String] = [Jhon, Peter, Nick]
internal static let surnames: [String] = [Smith, Jhonson, Williams]
```

If you see it misses the `quotes` in every single element in the array, and in the plist, they are declared as `String`

Digging into the template I found where the issue "could be", I have created a solution, I tried locally and is working fine, but I don't know if this is breaking something else. Besides I see that the same logic is applied in several templates, so not sure if in these templates is broken as well.

The solution that I applied in the `plists/inline-swift4.stencil` was:

```diff
@@ -55,9 +55,9 @@ import Foundation
     Date(timeIntervalSinceReferenceDate: {{ value.timeIntervalSinceReferenceDate }})
   {% elif metadata.type == "Optional" %}
     nil
-  {% elif metadata.type == "Array" and metadata.element.items %}
-    [{% for itemMetadata in metadata.element.items %}
-      {% call valueBlock value[forloop.counter0] itemMetadata %}
+  {% elif metadata.type == "Array" and value %}
+    [{% for currentValue in value %}
+      {% call valueBlock currentValue metadata.element %}
       {% if not forloop.last %}, {% endif %}
     {% endfor %}]
   {% elif metadata.type == "Dictionary" %}
```

The new output is:

```swift
internal static let names: [String] = ["Jhon", "Peter", "Nick"]
internal static let surnames: [String] = ["Smith", "Jhonson", "Williams"]
```

üéâ üéâ üéâ üéâ üéâ üéâ üéâ 
 
I didn't create the PR, because I'm not sure if this will break something else or if I need to apply the same logic in more files.


Thanks!
The most recent commit to `master` is from January 2019.
Getting error "Invalid redeclaration of 'MySub'"

Using SwiftGen v6.1.0 (Stencil v0.13.1, StencilSwiftKit v2.7.2, SwiftGenKit v6.1.0)
Generating String with template  [structured-swift4.stencil](https://github.com/SwiftGen/SwiftGen/blob/master/templates/strings/structured-swift4.stencil)

String keys will look like:
```
"main.mySub.value" = "value";
"main.my-sub.key" = "key";
"main.my_sub.key" = "key";
"main.mySub.key" = "key";
```
Output:
```Swift
internal enum L10n {
    internal enum MySub {
      /// key
      internal static let key = L10n.tr("Localizable", "main.my-sub.key")
    }
    internal enum MySub {
      /// key
      internal static let key = L10n.tr("Localizable", "main.mySub.key")
      /// value
      internal static let value = L10n.tr("Localizable", "main.mySub.value")
    }
    internal enum MySub {
      /// key
      internal static let key = L10n.tr("Localizable", "main.my_sub.key")
    }
  }
```

Is there possible to convert them all to one enum?
I guess that these will create each separate child under tables.first.levels.children. 
Any solution suggestions? I can't just rename keys, because they come from API if an error occurs. 
I'm using SwiftGen in my project. I can run app on simulator as well as on device. But not able to archive code  to upload.

Getting : SwiftGen not installed, download it from https://github.com/AliSoftware/SwiftGen
Command PhaseScriptExecution failed with a nonzero exit code.

![Screenshot 2019-09-24 at 6 41 55 PM](https://user-images.githubusercontent.com/37499786/65601105-11afeb00-dfbf-11e9-9fca-88360cc53190.png)