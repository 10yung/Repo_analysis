With Moq 4.10.1 we used to be able to do the following to capture a NaturalIdentifier NHibernate criterion added to an NHibernate criteria:
```cs
Mock<ICriteria> criteriaMock
var naturalIds = new List<NaturalIdentifier>();
criteriaMock.Verify(x => x.Add(Capture.In(naturalIds)));
var naturalId = naturalIds.Single();
```

After upgarding to 4.13.1, the `naturalIds` list is empty after passing the `Verify` call, resuting in an exception from the `Single` call.

As a workaround we've had to change our test to instead work on the `Invocations` collection:
```cs
var addInvocation = criteriaMock.Invocations
    .Single(x => x.Method.Name == nameof(ICriteria.Add));
var naturalId = (NaturalIdentifier)addInvocation.Arguments[0];
```

The workaround work, but feels less type safe since we have to match the method cal by name rather than by the expression tree (or do our own expression three handling to get the `MethodInfo` from an expression.)

Hi moq4 contributors,

This is to let you know that I will be on vacation until mid-March.

As I am currently the only active collaborator on this repository, any currently open issues and pull requests will likely remain open until I get back.

My apologies for the delay... besides travel preparations and regular daytime work, there unfortunately wasn't enough time to get everything resolved before my departure.

Have a happy new year everyone, and see you in 2020!

/cc @kzu 
hi,

I have an issue with Moq & NUnit.

below is the issue:
```
System.NullReferenceException : Object reference not set to an instance of an object.
   at Castle.DynamicProxy.AbstractInvocation.ThrowOnNoTarget()
   at Castle.DynamicProxy.Internal.CompositionInvocation.EnsureValidTarget()
   at Castle.Proxies.Invocations.IInterceptor_get_Name.InvokeMethodOnTarget()
   at Castle.Proxies.IInterceptorProxy.get_Name()
   at Bwin.PosAPI.Modules.UnitTests.Authentication.Interceptors.GenericInterceptorFixture.<>c.<MapLoginSubStates_CheckSubErrorCodeIsMapped_Success>b__2_3(IInterceptor x) in D:\Projects\Platform PosAPI\Test\Modules\UnitTests\Authentication\Interceptors\GenericInterceptorFixture.cs:line 42
   at System.Linq.Enumerable.WhereArrayIterator`1.MoveNext()
   at Bwin.PosAPI.Modules.UnitTests.Authentication.Interceptors.GenericInterceptorFixture.MapLoginSubStates_CheckSubErrorCodeIsMapped_Success() in D:\Projects\Platform PosAPI\Test\Modules\UnitTests\Authentication\Interceptors\GenericInterceptorFixture.cs:line 42
```

I have an interface defined like this:

```
public interface IInterceptor
{
        string Name { get; }
}
```

I want to get all implementations of this and test that none of them contains an empty or null name and some other stuff.

In my setup I have:

```
            var serviceCollection = new ServiceCollection();
            serviceCollection.TryAddSingleton(p => _staticDataServiceMock.Object);
            serviceCollection.TryAddSingleton(p => _cacheFactoryMock.Object);
            serviceCollection.AddAllImplementationsOf<IInterceptor>();
            var sv = serviceCollection.BuildServiceProvider();
            var interceptors = sv.GetServices<IInterceptor>();
```

AddAllImplementations method is just a simple one:

```
        public static IServiceCollection AddAllImplementationsOf<TInterface>(
            this IServiceCollection serviceCollection, ServiceLifetime lifetime = ServiceLifetime.Singleton)
            where TInterface : class
        {
            var types = GetAllImplementations<TInterface>();

            foreach (var type in types)
            {
                serviceCollection.Add(new ServiceDescriptor(type, type, lifetime));
                serviceCollection.Add(new ServiceDescriptor(typeof(TInterface), p => p.GetRequiredService(type), lifetime));
            }

            return serviceCollection;
        }

        private static IEnumerable<Type> GetAllImplementations<TInterface>() where TInterface : class
        { 
            return AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(x => x.GetTypes())
                .Where(x => typeof(TInterface).IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract)
                .Select(x => x);
        }
```
basically I am adding some dependencies and at the end i get all interceptors from the ServiceProvider, store them in a variable and do a foreach on all of them like below.

```
foreach (var interceptor in interceptors.Where(x => !x.Name.Equals("FAKE")))
{
   //Do testing here
}
```

I tried to remove the Where condition for a moment but still I get

```

System.NullReferenceException : Object reference not set to an instance of an object.
   at Castle.DynamicProxy.AbstractInvocation.ThrowOnNoTarget()
   at Castle.DynamicProxy.Internal.CompositionInvocation.EnsureValidTarget()
   at Castle.Proxies.Invocations.IInterceptor_get_Name.InvokeMethodOnTarget()
   at Castle.Proxies.IInterceptorProxy.get_Name()
   at Bwin.PosAPI.Modules.UnitTests.Authentication.Interceptors.GenericInterceptorFixture.MapLoginSubStates_CheckSubErrorCodeIsMapped_Success() in D:\Projects\Platform PosAPI\Test\Modules\UnitTests\Authentication\Interceptors\GenericInterceptorFixture.cs:line 45
```

Any idea why this might happen ?
Do u think that my interface name `IInterceptor` might cause issues with dynamicproxy or something ?

Funny fact: - this method fails only if I run the whole project. If i run only this one it does not fail. Also, I tried in Visual Studio 2017 & 2019 and both behave the same way.
The Moq version was 4.12.0 and then i updated to 4.13.1 but still no luck.


This closes #963 
At the moment, new Mock<T> and Mock.Of<T> are similar but if you need use non generic constructor you must use new Mock<T>. If you are using the  Mock.Of<T> syntax in the project, change all for this will be a problem.
Add support for this is a very little change and give more functionality to the Mock.Of<T> syntax.
It is possible to use Verifiable() on a conditional setup (I mean a setup with When preceding the setup method), but the Verify() method doesn't actually verify it.

Example:
```
var mock = new Mock<ICloneable>();
mock.When(() => true)
	.Setup(o => o.Clone())
	.Verifiable();
mock.Verify(); // No exception
	
mock.Setup(o => o.Clone())
	.Verifiable();
mock.Verify(); // MockException, setup was not matched.
```
As I have seen in the source code, it looks like the method SetupCollection.ToArrayLive ignores all setups with a condition.

For me, it would be convenient that the Verify method verifies also the setup if the condition is valid during the verification.
```
 public class UnitTest1
    {
        [Fact]
        public void TestMethod1()
        {
            // Arrange
            Guid itemId = Guid.NewGuid();
            var session = new Mock<NHibernate.ISession>();
            var repo = new Repository();
            session.Setup(x => x.QueryOver<Item>().Where(b => b.Id == itemId).List()).Returns(new List<Item>());

            // Act
            var res = repo.GetById(itemId, session.Object);

            // Verify
            //...
        }
    }
  class Repository
    {
        public IList<Item> GetById(Guid id, ISession session)
        {
            var items = session.QueryOver<Item>()
                .Where(b => b.Id == id)
                .List();

            return items;
        }
    }
    public class Item
    {
        public Guid Id { get; set; }
    }
```
4.11 and above:
getting: System.NullReferenceException: 'Object reference not set to an instance of an object.'

![image](https://user-images.githubusercontent.com/8763689/67504757-af680a00-f692-11e9-9f5b-47e357a7db8a.png)

4.10.1 and beyond:
works.

Attached is a sample solution. See exception when running the test. Downgrade to 4.10.1 and see error is gone.
[UnitTestProject2.zip](https://github.com/moq/moq4/files/3768511/UnitTestProject2.zip)

### Example:

```csharp
mock.Setup(m => m.Method(It.IsAny<string>(), It.IsAny<It.IsAnyType>(), It.IsAny<int>())
    .Callback((string arg1, object arg2, int arg3) => ...);
```

which is arguably more user-friendly than having the following (which we have today):

```csharp
mock.Setup(m => m.Method(It.IsAny<string>(), It.IsAny<It.IsAnyType>(), It.IsAny<int>())
    .Callback(IInvocation invocation => ...);
```
My goal is similar to #747, so I am using `VerifyAll()` to detect unused setups. However there are a few very common setups done in common helpers that I don't want to detect.

It would be great to have some way to opt-out of `VerifyAll` in specific cases, e.g. by using `Verifiable(false)`.