+ `Server` is rewritten to use a fiber per connection.  This makes handling stateful stuff like iterating over an enumerator easier.
+ `Server` also uses `_nonblock` methods to hopefully speed up IO
+ `each_key` is implemented on the Server/Client
+ `Client` now buffers reads if it doesn't manage to read the whole server response at once.
This issue crops up intermittently on Travis. The `#read` method of `Moneta::Adapters::Client` raises this error when a call to `socket#recv` returns less than the expected number of bytes from the server.
This is to add a feature that when supported by a store allows atomic swapping of a value, as suggested in #156.  This method signature would be something like: 

~~~
swap(key, old, new) => Boolean
~~~

returning true iff the swap happened. The most obvious name for the feature would be `:swap`.
I have a use case where I'm taking an exclusive lock in one process but releasing it in another. It's a bit odd, I know...

Some other libraries, like Suo, have a notion of a "lock token" that is returned when successfully locked which can be used to unlock from anywhere.

It's harder to see how this would work with the Semaphore as it is solely backed by a counter, but at least for the `Mutex` this could look something like:

1. When locking, set the value to something random (e.g. `SecureRandom.uuid`)
2. Return the random value on successful lock
3. Allow the lock token to be passed to `unlock`/`leave` in place of the check against `@locked` to allow the unlock to proceed if its a match for the lock value.

I'm not 100% sure this can be done atomically with the existing interface, without being able to conditionally update/delete when the value is a known value (compare-and-set), but I don't know the interface semantics and guarantees well enough.

Perhaps, a feature that could be added is "swap"? E.g. `#swap(key, old_val, new_val) #=> true|false / old_val|new_val` for compare-and-swap. If this isn't possible today, I can add a feature request for it...
As per #144, the Pool wrapper had some race condition issues that were not caught be existing specs.
Is it somehow possible to fetch the current expiry time in seconds from the key/value stores such as Redis?
Redis provides a method called TTL to get such information.
Would it be possible to simply add an expires column to the table definition? 
Instead of marshalling and adding it somehow into the k/v, just use that col to check if the entry has expired.

Is there some reason why it was not done this way?

Hello,

I've added Moneta gem to my project that uses MySQL database with ActiveRecord adapter to be used as session storage. The database default encoding is utf8mb4. On the first run after the gem has been added it creates a new `moneta` table, but adding an index to it fails:

> active_record/connection_adapters/abstract_mysql_adapter.rb:305:in `query': Mysql2::Error: Specified key was too long; max key length is 767 bytes: CREATE UNIQUE INDEX `index_moneta_on_k`  ON `moneta` (`k`)  (ActiveRecord::StatementInvalid)

I can restart the server and it works fine next time, but the table is missing an index on `k` column.

So I guess VARCHAR(255) for key column doesn't always work on MySQL. :-)

As proxy or as transformer

**This is a list of currently missing key/value stores. Please comment if you know another one that you might want to use. Implementations are also greatly appreciated!**

Some implementations are not yet finished but are already in the [staging branch](https://github.com/minad/moneta/tree/staging/lib/moneta/adapters). They need testing and fixes!
- Google App Engine for JRuby (gem appengine-apis, http://code.google.com/p/appengine-jruby/source/browse/appengine-apis/lib/appengine-apis/memcache.rb)
- SFTP (gem net-sftp)
- Mysql (gem mysql2)
- Git (gem multi_git)
- Couchbase (gem couchbase, http://www.couchbase.com/)
- CQL (gem cql-rb, cassandra cql interface)
- Rom-Rb (Datamapper 2, http://rom-rb.org/)

---

Gems available:
- Ehcache (gem ehcache, only jruby)
- LevelDB (gem leveldb, gem leveldb-ruby should both be supported. They have nearly the same API)
- RethinkDB (gem rethinkdb)
- Voldemort (gem voldemort-rb)
- Handlersocket (gem handlersocket, gem key_value, http://www.igvita.com/2011/01/14/handlersocket-the-nosql-mysql-ruby/, https://github.com/grosser/key_value)
- Keyspace (https://github.com/livingsocial/keyspace, https://github.com/scalien/keyspace)
- KyotoTycoon (gem kyototycoon)
- SSDB (gem ssdb, https://github.com/bsm/ssdb-rb, https://github.com/ideawu/ssdb)
- DynamoDB (gem dynamodb, https://github.com/groupme/dynamodb)
- Skydb (gem skydb, https://github.com/skydb/sky.rb)
- FoundationDB (gem fdb)

Relatively unknown:
- Rocksdb (https://github.com/facebook/rocksdb)
- Tarantool (gem tarantool, http://tarantool.org, https://github.com/mailru/tarantool-ruby/)
- Hibari (https://github.com/hibari/hibari)
- ARDB (Redis protocol, https://github.com/yinqiwen/ardb)
- Arakoon (http://arakoon.org/)
- Unqlite (http://unqlite.org/)
- Hibari (https://github.com/hibari/hibari)
- Mapkeeper (https://github.com/m1ch1/mapkeeper)
- Openkeyval (https://github.com/shinypb/openkeyval)
- Diskv (https://github.com/peterbourgon/diskv)
- TokutekKV (https://github.com/Tokutek/ft-index)
- NanoStore (https://github.com/tciuro/NanoStore, https://github.com/siuying/NanoStoreInMotion)
- Hyperdex (http://hyperdex.org/)
- Coreos etcd (https://github.com/coreos/etcd)
- ArangoDB (http://www.arangodb.org/, see https://github.com/triAGENS/ashikawa-core/issues/5)
- Scalaris (http://code.google.com/p/scalaris/source/browse/trunk/ruby-api/scalaris.rb)
- Dynomite (very old at https://github.com/skeptomai/ruby-dynomite)
- ThruDB (Haven't found much http://www.pauldix.net/2008/01/thrudb-orm-for.html)
- Hypertable (Only found https://github.com/tylerkovacs/hyper_record, which is for ActiveRecord)
- Ringo (https://github.com/tuulos/ringo)
- RavenDB (gem ravendb, but based on .NET/mono)
- OrientDB (http://www.orientdb.org/)
- LightCloud (http://opensource.plurk.com/LightCloud/, https://github.com/mitchellh/lightcloud)
- LuxIO (http://luxio.sourceforge.net/, https://github.com/kajidai/rluxio)
- Oracle NoSQL Database (Community Edition), JRuby Interface https://github.com/yeysus/14a. 
- FineDB (http://www.finedb.org/)

Interesting databases which currently lack a ruby binding, but claim to be very fast:
- BangDB http://www.iqlect.com/
- NessDB https://github.com/shuttler/nessDB
- LSM http://www.sqlite.org/src4/doc/trunk/www/lsmusr.wiki

Relational:
- RDBI (gem rdbi)
- DBI (gem dbi)
- DataObjects (gem data_objects)
- JDBC

Special:
- AWS adapter using the amazon library instead of Fog
- FTP (stdlib net/ftp)
- RCS (Git, Mercurial, SVN, ...)
- IMAP
- LDAP
- TOML (https://github.com/mojombo/toml)
- Configuration files (e.g. gem configtoolkit, ...)

For inspiration: http://nosql-database.org/, https://github.com/datamapper/dm-core/wiki/Adapters
