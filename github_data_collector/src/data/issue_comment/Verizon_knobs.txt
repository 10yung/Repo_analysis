
Should be `unsafeRunSync`, not `unsafePerformSync`.

Now that cats-effect 1.0 is out it'd be nice if this used it. I am receiving errors like this:

```
Exception in thread "main" java.lang.NoSuchMethodError: cats.effect.Async.shift(Lscala/concurrent/ExecutionContext;)Ljava/lang/Object;
	at knobs.Resource$.watchStream(Resource.scala:155)
	at knobs.Resource$.$anonfun$watchEvent$4(Resource.scala:222)
	at knobs.Resource$.$anonfun$watchEvent$4$adapted(Resource.scala:221)
	at cats.effect.IO$Map.apply(IO.scala:1407)
	at cats.effect.IO$Map.apply(IO.scala:1403)
	at cats.effect.internals.IORunLoop$.liftedTree3$1(IORunLoop.scala:216)
	at cats.effect.internals.IORunLoop$.step(IORunLoop.scala:216)
	at cats.effect.IO.unsafeRunTimed(IO.scala:321)
	at cats.effect.IO.unsafeRunSync(IO.scala:240)
```

I assume this is because the cats-effect version is a bit older?
Custom watching implementation in knobs can be replaced with `WatchService` [wrapper](https://github.com/functional-streams-for-scala/fs2/blob/fb74ea0bd6438fb63092a3dad6db6b4fdb9ce752/io/src/main/scala/fs2/io/file/Watcher.scala)  from fs2.
Are there any plans to add defaults for environment variables?
It looks like the latest version of this project now supports Cats.  It would be great to have some documentation/examples of how to use this with Cats.
We've done something like this to support decoding dates form our config files

``` scala
implicit val configuredLocalDate: Configured[LocalDate] = new Configured[LocalDate] {
  def apply(a: CfgValue) = Some(LocalDate.parse(a.pretty.replace("\"", ""), ofPattern("dd MMM yyyy")))
}
```

Is that something that could/should go into the `CfgValue` trait? We'd do a pull request but aren't sure how you'd prefer it to slot in.

The `BaseConfig` class keeps its internal mutable state as `IORef`s, and we should change this to `scalaz.stream.async.mutable.Signal` to make it easier to subscribe to changes. Users should be able to get a `Process[Task,Config]` from (or even instead of) a `MutableConfig`.
