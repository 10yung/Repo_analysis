Its in here, maybe this could be adopted
https://github.com/h2o/picohttpparser
Hello, I have fixed the cmake build system of your wonderful library, so it is not dependent on your old scripts and can be easier integrated into other projects(without using Externalproject_add function) and also added fix to compile for Windows using MinGW.
Maybe this is related to #129 or possibly #108? I setup a new machine and started fresh, but now I get this error:

```
Added route /
Address: 0.0.0.0
Port: 3000
Threads: 0
Balancer: ipc
Parser: http_parser
TCP No Delay: on
Listen backlog: 128
Maximum request size: 1048576
Listening...
malloc: *** error for object 0x7fff5cb22318: pointer being freed was not allocated
*** set a breakpoint in malloc_error_break to debug
Program received and didn't handle signal IOT (6)
```

This only happens when a client connects to the server. Booting it works fine.
Maybe this is related to #120 ? 

When I build and then run the server, it stays running until a client tries to connect. Then I get this error:

```
Added route /
Address: 0.0.0.0
Port: 3000
Threads: 0
Balancer: ipc
Parser: http_parser
TCP No Delay: on
Listen backlog: 128
Maximum request size: 1048576
Listening...
Assertion failed: ((stream->type == UV_TCP || stream->type == UV_NAMED_PIPE || stream->type == UV_TTY) && "uv_write (unix) does not yet support other types of streams"), function uv_write2, file src/unix/stream.c, line 1391.
Program received and didn't handle signal IOT (6)
```

Running on macOS 10.12.4. No clue what version of haywire I'm using other than `HEAD` as of this morning. 
Just a minor fix
This will fix the windows build (Tested with VS2015 and VS2017 x64 cmd window)
This PR adds the ability to disable http routing in Haywire and route all requests to a single callback (root_request_callback). The common usage scenario I envision for this feature is operating other http frameworks that include their own routing, on top of Haywire. One example would be ASP.NET Core MVC, the root_request_callback would start ASP.NET Coreâ€™s middleware pipeline, and MVC would handle the routing.

Currently to support using libuv across multiple threads we create an event loop per thread. We load balance connections across these event loops by passing connections in 2 supported ways. 

1. TCP connection is passed from the primary event loop with the socket listening to the worker event loop over IPC. 
2. Create an event loop per thread that each opens a listening socket using SO_REUSEPORT so the kernel distributes across sockets in kernel space. 

Separating this out of `http_server` would clean things up significantly. 

I would also consider even making this it's own library (`libuv_dispatcher`?) outside of Haywire since this could be useful to any TCP server using libuv that wants to use multiple CPU cores. 

Where this is used is here.
https://github.com/haywire/haywire/blob/master/src/haywire/http_server.c#L199
Investigate whether using `mlock` and `munlock` would be beneficial to keep the request buffer pages in memory and avoid swapping.