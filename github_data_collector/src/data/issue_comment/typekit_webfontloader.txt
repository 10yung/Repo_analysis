I would consider this a bug, otherwise, please consider this a feature request :slightly_smiling_face: 

**Scenario**
Say I make a call to request a specific font at 3 different times during runtime.
```javascript
WebFont.load({
 google: {
   families: ['Montserrat']
 }
});
```
**Desired behavior**
After the first load, the two subsequent calls to WebFont.load gets ignored.
```html
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat" media="all">
```
**Actual behavior**
3 identical HTML tags and 2 reduntant requests.
```html
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat" media="all">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat" media="all">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat" media="all">
```
If you work with webfontloader in a context where fonts are loaded conditionally during runtime, it becomes rather inconvenient to make all the checking before requesting a font.
I hope this will be fixed sometimes soon :blush: 
I have locally defined fonts, which I'm loading as `custom` fonts. These are actually Google fonts, however I have them local. The primary reason for this is because this will be a Cordova app, so I don't want to have to hit the external network if I can avoid it.

I declare these custom fonts with `font-face`.  

```
        @font-face {
            font-family: "Bowlby One SC";
            src: url("assets/BowlbyOneSC-Regular.ttf") format('truetype');
        }
        @font-face {
            font-family: "Roboto", sans-serif;
            src: url("assets/Roboto-Regular.ttf") format('truetype');
        }
```

Code-wise, I load it via:

```
WebFont.load({
    google: {
        families: ['Pacifico' ]
    },
    custom: {
        families: [ 'Roboto', 'Bowlby One SC']
    },
    active: function() {
        app.webFontsLoaded = true;
        if (app.coreAssetsLoaded) {
            app.initialStartGame();
        }
    },
    fontloading: function(name: string){ console.log("L " + name)},
    fontactive: function(name: string){ console.log(name)}
});
```

You can see I have some debug on when loading occurs and when a font is active. I did have some debug logging in active, but I've removed it from this code snippet.

What I find is that when `custom` is not used, it loads quickly. However, when `custom` is used, it's very slow to load even though I see the loading message and active message for the font. There is a clear 1-2+ second delay before the actual active is being called.

Visually I see a white screen for 1-2+ seconds. Then the game starts.

I'm using your suggested configuration like so:

```
import WebFont from 'webfontloader'

WebFont.load({
	monotype: {
		projectId: 'xxxxxx-xxxx-xxxxxx-xxxx-xxxxxxxxxxx',
		loadAllFonts: true,
	}
})
```

And the browser is making a request to `https://fast.fonts.net/jsapi/xxxxxx-xxxx-xxxxxx-xxxx-xxxxxxxxxxx.js` that always gives a 404.

The sample code for the project which I download from fonts.com (which is not using webfontloader) works like a charm so the fonts.com project-id itself seems to work.

Is there something additional configurations to fonts.com I need to do in order to use webfontloader that is not documented here?
(Adding domains etc. seems to have been a thing in the past because fonts.com marks those guides as legacy now.)
I understand this isn't the projects typical use case and references a number of third party libraries. However, I'm just looking to get some insight into the underlying problem. Maybe someone else ran into the same issue and possibly found a solution. Unfortunately, StackOverflow comes up very bare on solutions. Hopefully, someone can provide me with some information.

### Basic info:

- **Node.js version:** 12.7.0
- **jsdom version:** 15.1.1
-  **webfontloader:** 1.6.28

### Minimal reproduction case
```
const html = `<html><head><style type="text/css">
    @font-face {
        font-family: "MontserratBold";
        src: url('https://storage.googleapis.com/lumen5-site-css/Montserrat-Bold.ttf');
    }
</style><body></body></html>`;

require('jsdom-global')(html, {resources: 'usable'});

const WebFont = require('webfontloader');
const WebFontConfig = {
    custom: {
        families: ['MontserratBold'],
    },
    active: function() { console.log('active'); },
    inactive: function() { console.log('inactive'); },
    fontinactive: function(familyName) { console.log(`fontInactive ${familyName}`); },
};
WebFont.load(WebFontConfig);
```

The above example always returns `fontInactive MontserratBold` and `inactive`.

### How does similar code behave in browsers?
Returns 'active'


I have an issue using Typekit fonts on banner animations.
The licensing pages say this it totally allowed: https://helpx.adobe.com/fonts/using/font-licensing.html#web-banner, however, my ads are being blocked by the Ad Platform (in this case Google Ads) because of the calls to `use.typekit.net`

It is worth noting that Adobe Advertising Cloud is already a certified ATP vendor and already has several URLs whitelisted including `use.edgefonts.net` and `p.typekit.net`, just not `use.typekit.net`.

Would it be possible to add an implementation where you can use a typekit project id with the edge fonts api url?

e.g.:
```
    WebFont.load({
        typekit: {
            id: '123xyz',
            api: '//use.edgefonts.net' // or p.typekit.net
        }
    });
```


Open similar here: https://github.com/escaladesports/gatsby-plugin-web-font-loader/issues/8

As per best practices: https://developers.google.com/web/fundamentals/performance/resource-prioritization?utm_source=lighthouse&utm_medium=devtools#preconnect

Would it be possible to add the `rel` prop in the generated `link` with the different options? Sometimes is required for performance optimization.
google font api started supporting display param as of may 2019 (announced at [google io]( https://www.zachleat.com/web/google-fonts-display/)).

I have prepared a change to allow the use of this functionality through webfontloader, changes added also to README and tests.

There's hasn't been a single commit on master in over a year and a half; I wanted to check whether or not it's worth my team or I using or contributing to this project if it's no longer maintained. There are many open issues and PR's with no recent activity, from what I can tell.

No worries if not, of course. Just wanted to make sure.