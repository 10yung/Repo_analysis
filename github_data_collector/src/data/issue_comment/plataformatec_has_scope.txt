As far as I know it is not possible to set default options to be used by all scopes in a specific controller. 

The use case that I have is that there are a bunch of scopes in my controller, but all of them should only apply to the index action. Currently I would have to add `only: :index` to each of those. 

```
has_scope :for_project, as: 'project_id', only: :index
has_scope :for_section, as: 'section_id', only: :index
has_scope :starred, type: :boolean, as: 'focused', only: :card_index: 
...
```

It would be nice to be able to set a bunch of defaults to be used by has_scopes in the controller. I can imagine that this might not only be useful for `only` and `except` but possibly also with `if`. 

A trivial solution could be something like this: 

```
scope_default_options = { only: :index } 

has_scope :for_project, as: 'project_id'
has_scope :for_section, as: 'section_id'
has_scope :starred, type: :boolean, as: 'focused'

```

This can be accomplished simply enough by adding a new class field and merging these contents in `has_scope`, like so: 

```
def has_scope(*scopes, &block)
   options = scopes.extract_options!
   options.symbolize_keys!
   options.assert_valid_keys(:type, :only, :except, :if, :unless, :default, :as, :using, :allow_blank, :in)

   options.merge!(self.scope_default_options)
...
```

However, there might be a more robust solution, not sure what troubles this 'dumb' solution might cause. 

Besides: Do you consider this a valid feature request and would consider merging something like that if I create a PR? 

`has_scope` validates the keys using `assert_valid_keys`, thus it's impossible to extend functionality adding new keys to the configuration.

What I was going to achieve. I have scopes and I would like to display how many items per scope. I have this functionality, and I was going to make use of `has_scope` configuration like so `has_scope :filter, show_count: true` and read `show_count` in my code via `scopes_configuration`.

Regards,
Alexander
When I tried setting up a scope like this:
```
has_scope :status, in: :report_options, default: 'any'
```

and hitting the controller action without any params, I noticed it was generating `status = NULL` in the where conditions.

I was expecting it to generate `status = 'any'` by default since no `params[:report_options][:status]` is present.

When I dug deeper with a debugger, it's sending nil to the scope is because it `value.values_at(*options[:using])` is indeed nil.

```
[159, 168] in gems/has_scope-0.7.2/lib/has_scope.rb
   159:     block = options[:block]
   160: 
   161:     if type == :boolean && !options[:allow_blank]
   162:       block ? block.call(self, target) : target.send(scope)
   163:     elsif value && options.key?(:using)
=> 164:       value = value.values_at(*options[:using])
   165:       block ? block.call(self, target, value) : target.send(scope, *value)
   166:     else
   167:       block ? block.call(self, target, value) : target.send(scope, value)
   168:     end

(byebug) value.values_at(*options[:using])
[nil]
```

I haven't dug any deeper yet to see how it's supposed to get the default value, but just wanted to report what I've found so far and suggest that it should probably be expected behavior for `default` to work with `using` too.

My workaround was to not use `in:` to tell `has_scope` to dig into the hash, but to use `type: :hash` and handle the digging into the hash and applying defaults manually myself in the block:
```
  has_scope :report_options, type: :hash do |controller, relation, hash|
    if value = hash[:active] || 'any'
      relation = relation.active(value)
    end
    ...
    relation
  end
```

I am in a category_controller.
And a category has many category_content_refs
I have a category_content_ref scope in the category_content_ref model which is 

```
scope :tag, -> {...}
```

 I would like to do this thing
When I get a request on `/category/some-category?tag=tag-name`
```
 apply_scopes(@category.category_content_refs)
```
I want to apply the scope `tag` on the category_content_refs, is that possible?
Hi,

I have scope like below:

```
has_scope :by_distance, using: %i[lat lon], type: :hash do |controller, scope, value|
    scope.by_distance(value[0], value[1], controller.current_user)
end
```

And i want to access value like `lat` or `lon`, how can i do that? 
I was able to apply a scope for a has_many associations, but can't figure out belongs_to association. 

This is what i used for `league has_many :champions, through: :league_champions`
`scope :by_champion, -> champion {League.joins(:league_champions).where(league_champions: {id: LeagueChampion.where(champion: Champion.where(id: champion))})}`


I wanna now be able to do the same but for `League belongs_to user` association. And filter by `user.price`. 

Any idea?
Third attempt.

Allows you to use has_scope even if the name of the controller breaks the Rails naming convention.

We have an AR model named FooBar, but the controller is named FooAdmin::BarsController. This arises because the AR model is in a Gem that was developed separately. with_scope_model was created as a way to work around these issues without having to restructure apps.

The [boolean usage documentation](https://github.com/plataformatec/has_scope#boolean-usage) shows an example of setting a default value on a scope

```
has_scope :visible, type: :boolean
has_scope :active, type: :boolean, allow_blank: true

# and models with
scope :visible, -> { where(visible: true) }
scope :active, ->(value = true) { where(active: value) }
```

This leads me to believe that I should be able to implement the code above and be able to call `/resource?active` and receive have the scope processed with `true` as the value. However, the scope receives the value `false`.