<!-- Fill in the relevant information below to help triage your pull request. -->

|      Q       |   A
|------------- | -----------
| Type         | improvement
| BC Break     | yes
| Fixed issues | none

#### Summary

Continuing the work started in #3830, this time with a `From` object.
<!-- Fill in the relevant information below to help triage your pull request. -->

|      Q       |   A
|------------- | -----------
| Type         | improvement
| BC Break     | no
| Fixed issues | none

#### Summary

This fixes the bug raised in #3829 and #3830, where a JOIN with an empty condition would yield a syntax error in the resulting query: https://github.com/doctrine/dbal/pull/3830#discussion_r368217791
|      Q       |   A
|------------- | -----------
| Type         | improvement
| BC Break     | yes

Fixes #3825

In addition to the method signature changes, the following changes have been made:

1. The implementations of `where()`, `having()` and their `and*` and `or*` counterparts have been refactored to reduce code duplication.
2. The `QueryBuilder` tests that call `$qb->expr()` but don't use the return value have been cleaned up.
<!-- Fill in the relevant information below to help triage your pull request. -->

|      Q       |   A
|------------- | -----------
| Type         | improvement
| BC Break     | yes
| Fixed issues | none

#### Summary

As suggested by @morozov in https://github.com/doctrine/dbal/pull/3824#issuecomment-575706664:

> To get rid of the remaining PHPStan issue, we may replace the associative array representing a join in the Query Builder with an object similar to DependencyOrderNode used in #3762. This way, we will not only help static analyzers understand which properties and of what types a join has but also may help PHP manage memory more efficiently.

This PR introduces 3 classes, which replace the `$sqlParts` nested associative array:

- `QueryParts`
- `QueryPartFrom`
- `QueryPartJoin`

This is a first draft with both phpunit & phpstan happy.
A few pain points are to be discussed, though.
### Bug Report

|    Q        |   A
|------------ | ------
| BC Break   | no 
| Version     | 2.7.0

#### Summary

Doctrine diff fail on some configuration


#### Current behaviour

When I make a doctrine:diff Doctrine tryes to create index for 2 different Entity mapped with a OneToOne association
I have an error

  An index with name 'uniq_19653dbdbf396750' was already defined on table 'societe'.  

#### How to reproduce

```
class Societe
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer", nullable=false, options={"unsigned"=true})
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id;
    /**
     * @var VueContrat
     * @ORM\OneToOne(targetEntity="VueContrat")
     * @ORM\JoinColumn(name="id", referencedColumnName="idsociete")
     */
    private $statut;

    /**
     * @var VueCo|null
     * @ORM\OneToOne(targetEntity="VueCo")
     * @ORM\JoinColumn(name="id", referencedColumnName="id",nullable=true)
     */
    private $statutco;
}
```

You need to have 2 Entity named VueContrat and VueCo.
That 2 entity are Mysql View.

#### Expected behaviour

I expect to disable the creation for that 2 views.
We can reduce the problem using doctrine event listener but I didn't find the right event.
We can also have a solution if we can set the index name explicitely.

|    Q        |   A
|------------ | ------
| Type | improvement
| BC Break    | yes

Similarly to https://github.com/doctrine/dbal/issues/3826, some of the schema-scoped methods of the `AbstractSchemaManager` class accept an optional database (schema) name but some don't:

1. This is the intended API. A user can list the columns of a table in a specific database (schema) or explicitly specify one: https://github.com/doctrine/dbal/blob/8b373f4a5ba339be6c0740256dfa271fca34f8d6/lib/Doctrine/DBAL/Schema/AbstractSchemaManager.php#L156
2. But here they cannot: https://github.com/doctrine/dbal/blob/8b373f4a5ba339be6c0740256dfa271fca34f8d6/lib/Doctrine/DBAL/Schema/AbstractSchemaManager.php#L177
3. And here as well: https://github.com/doctrine/dbal/blob/8b373f4a5ba339be6c0740256dfa271fca34f8d6/lib/Doctrine/DBAL/Schema/AbstractSchemaManager.php#L191
|    Q        |   A
|------------ | ------
| Type    | improvement
| BC Break    | yes

The reasons are:

1. Currently, some platform supports the `$database` argument and others don't so there's even no clear meaning of the argument at the DBAL level.
2. Methods like `getListViewsSQL()` already require the `$database` argument which means that it's always available at the Schema Manager level.
3. The MySQL platform defaults the database name to the return value of the `DATABASE()` function which makes it inconsistent with the behavior of schema managers: instead of defaulting to the database from the configuration, it defaults to the database being currently used.
4. The `$database` argument name is confusing since some platforms support databases and schemas and the actual meaning of the argument is a schema.

Making the argument required will help unify the behavior of different platforms and make it more deterministic.
|    Q        |   A
|------------ | ------
| Type | improvement
| BC Break    | yes

#### Summary

Classes like `QueryBuilder`, `ExpressionBuilder` and `AbstractSchemaManager` use `func_get_args()` in their implementations for dealing with variadic method arguments. Those arguments should be defined as such in the method signatures.
|      Q       |   A
|------------- | -----------
| Type         | bug
| BC Break     | no

#### Summary

I got problem with doctrine migrations with postresql database: 
```There is no column with name 'version' on table 'migration_versions'.```

after research i found that error happiness if `search_path` contains escaped schema name (eg ``` set search_path = '123', public;```)

this patch fix my problem, also simplifies the code and use native processing of search_path from postgres (no need to handle "$user" anymore))
The following classes could not be finalized as is in #3590:

- [ ] `MysqliConnection` because of its `getWrappedResourceHandle()` which is not used anywhere and is not part of any API convention (see #3534 for a similar feature request).
- [x] `OCI8Connection` because of its `getExecuteMode()` which is used by `OCI8Statement::execute()`. It indicates a violation of the ISP principle (the statement should be given an object that represents the execution mode, not the entire connection). Fixed in https://github.com/doctrine/dbal/pull/3808.
- [x] `OCI8Statement` because of its _static_ `convertPositionalToNamedPlaceholders()` which is `public` only because it's tested directly which indicates a violation of the SRP. It could be extracted to a utility class: https://github.com/doctrine/dbal/blob/f37a88ed99a342080650b969a4dbebea21ca6ab8/lib/Doctrine/DBAL/Driver/OCI8/OCI8Statement.php#L130
   Fixed in https://github.com/doctrine/dbal/pull/3820.
- [ ] `PDOConnection` because it has child classes and the `createStatement()` method.
- [ ] `PDOSqlsrv\Connection` because of its `createStatement()`.
- [ ] `PDOStatement` because it has child classes.
