**Prerequisites**
Package version: 0.1.1
Shiny version: 1.3.2
System: Windows 7, google chrome Version 75.0.3770.100

**Description**

When I return to a previous page either by clicking on the browserÂ´s back button or with the `change_page()` function and then move again to the current page, observeEvent and eventReactive functions are triggered an additional time.  

I include a minimal example, which consists of an example from the shiny.router tutorial page, that I extended to include a `selectInput` control. If you go back to the first page and then to the side page again and select an element from the selectInput control, the observeEvent function gets triggered an additional time. If you do this again, the function get triggered three times, and so on.

```
library(shiny)
library(shiny.router)

# This generates menu in user interface with links.
menu <- (
    tags$ul(
        tags$li(a(class = "item", href = route_link("home"), "Home page")),
        tags$li(a(class = "item", href = route_link("side"), "Side page"))
    )
)

# This creates UI for each page.
page <- function(title, content) {
    div(
        menu,
        titlePanel(title),
        p(content),
        actionButton("switch_page", "Click to switch page!")
    )
}

my_page<-function(){
    div(
        uiOutput("my_dropdown_list")
    )}

# Both sample pages.
home_page <- page("Home page", uiOutput("current_page"))
side_page <- my_page()

my_page_server <- function(input, output, session) {

    observeEvent(input$my_dropdown_list,{
        
        cat(paste0("selected element ", input$my_dropdown_list, "\n"))
        
    }, ignoreInit=TRUE, ignoreNULL=TRUE)
    
    output$my_dropdown_list <- renderUI({
        selectInput("my_dropdown_list","Choices:", 
                    choices= c("A","B", "C"),
                    multiple=FALSE,
                    selectize=TRUE
        )
        
    })
}

# Creates router. We provide routing path, a UI as
# well as a server-side callback for each page.
router <- make_router(
    route("home", home_page, NA),
    route("side", side_page, my_page_server)
)

# Create output for our router in main UI of Shiny app.
ui <- shinyUI(fluidPage(
    router_ui()
))

# Plug router into Shiny server.
server <- shinyServer(function(input, output, session) {
    router(input, output, session)
    
    output$current_page <- renderText({
        page <- get_page(session)
        sprintf("Welcome on %s page!", page)
    })
    
    observeEvent(input$switch_page, {
        if (is_page("home")) {
            change_page("side")
        } else if (is_page("side")) {
            change_page("home")
        }
        
    })
})

# Run server in a standard way.
shinyApp(ui, server)
```
Looks like the problem is present with shiny.semantic slider_input as well as standard shiny sliderInput.

`server <- shinyServer(function(input, output) {`<br>`router(input, output)
  slider_ui <- sliderInput("slider", "slider_label", 0 , 10 , 3, 1, 3)`<br>`
  output$slider <- renderUI(slider_ui)`<br>`
}
` 
Above makes whole ui refresh on routing ( even elements outside `router_ui()` )


I've checked some additional components (numericInput, semantic date_input, actionButton) and it is working fine with them.
### Prerequisites

**Package version:** latest github version (0.1.1) with shiny 1.3.1
**System Details:** Windows 10
**Running platform:** clean R session, testing app in Google chrome

### Description
Modifying query params ends Shiny session.

Our use case is that user authentication is done with reactiveValues in Shiny session and all the info is lost when we use links with query params.

**Expected behavior:**
Going from **app_url/?foo=bar/#!/route** to **app_url/?foo=baz/#!/route** should not end Shiny session.

**Actual behavior:**
When changing query strings, e.g. going from **app_url/?foo=bar/#!/route** to **app_url/?foo=baz/#!/route** the Shiny session ends (see MWE below).

**Possible fix:**
We worked around this by modifying parse_url_path in R/pages.R to support query strings of the form **app_url/#!/route?foo=bar** and the session apperas to be maintained between router calls.

### Minimal example - steps to reproduce
MWE to reproduce hosted here: https://github.com/piotrbajger/query.mwe.

Run the app with RScript runapp.R, click on the links and inspect the console output to see that the session ends.
Is it possible to disable routing when the shiny app is launched in an iframe? In this case, the window.location variables are wrong (I guess).

The fix in https://github.com/Appsilon/shiny.router/pull/57 does not fix my use case, which is running shiny.router in combination with shinyproxy.

The reason for continuing to use shiny.router (even though the differentiated http links cannot be seen from an embedded iframe) is because shiny.router is excellent for managing apps with a complicated navigation setup.
When passing `<path>` for main page other than "/" I expect that default url after app run is:
`<app-url>/#!/<path>`. Currently `<path>` displayed on url is always `<app-url>/#!/`.