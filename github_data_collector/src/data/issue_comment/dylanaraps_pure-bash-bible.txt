What's **the purpose** of these instructions ``` : "${chapter[$i]/$'\n'*}"; : "${_/\# }"; : "${_,,}" ```in build.sh? I run `bash build.sh` without them in **ubuntu18.04.2 TLS x86_64**, it get the same result.
```sh
#!/usr/bin/env bash
#
# Turn the single document bible into a book separated by chapters.

main() {
    rm -rf manuscript
    mkdir -p manuscript

    # Split the README.md into chapters based on markers.
    while IFS=$'\n' read -r line; do
        [[ "$chap" ]] && chapter[$i]+="$line"$'\n'
        [[ "$line" == "<!-- CHAPTER START -->" ]] && chap=1
        [[ "$line" == "<!-- CHAPTER END -->" ]]   && { chap=; ((i++)); }
    done < README.md

    # Write the chapters to separate files.
    for i in "${!chapter[@]}"; do
        : "${chapter[$i]/$'\n'*}"; : "${_/\# }"; : "${_,,}"
        printf '%s\n' "${chapter[$i]}" > "manuscript/chapter${i}.txt"
        printf '%s\n' "chapter${i}.txt" >> "manuscript/Book.txt"
    done
}

main
```
None
Would be neat to have a file that could be included from a `.bashrc` (e.g. `source ~/.bashrc-bash-bible`). This could also be useful to reproducibility with `test.sh`
Many thanks for this great bible. I have translated it in Turkish. I am not sure about how you manage and list translations of this document, so I created this PR. 

The Turkish translation is in [README.tr.md](README.tr.md) file. If this structure is not ok for you, Turkish translation will be kept in my fork.
This is very likely **not** perfect but it seems to pass any RGB color I throw at it.

```sh
# rgb2hsl - usage: rgb2hsl r g b

rgb_to_hsl() {
    local r g b
    local h s l
    local min max

    # Ensure input is greater than 0.
    ((r=r < 0 ? 0 : ${1:-0}))
    ((g=g < 0 ? 0 : ${2:-0}))
    ((b=b < 0 ? 0 : ${3:-0}))

    # Ensure input is lesser than 255.
    ((r=r > 255 ? 255 : r))
    ((g=g > 255 ? 255 : g))
    ((b=b > 255 ? 255 : b))

    # Convert RGB value to a 0-100 range.
    #
    # This is usually a 0-1 range but we
    # multiply by 100 to "fake" floating
    # point.
    ((r=r * 100 / 255))
    ((g=g * 100 / 255))
    ((b=b * 100 / 255))

    # Give the min variable the maximum
    # possible value. We must set it to
    # something.
    ((min=255))

    # Find the minimum and maximum RGB
    # values for use below.
    ((min=r < min ? r : min))
    ((max=r > max ? r : max))
    ((min=g < min ? g : min))
    ((max=g > max ? g : max))
    ((min=b < min ? b : min))
    ((max=b > max ? b : max))

    # Calculate the luminace using the
    # above values.
    ((l=(min + max) / 2))

    # Calculate the saturation using a
    # different formula based on its
    # value.
    #
    # Again, we multiply the values by
    # 100 to "fake" floating points.
    ((s=min == max
        ? 0
        : l < 50
            ? (max - min) * 100 / (max + min)
            : (max - min) * 100 / (200 - max - min)
    ))

    # Calculate the hue based on which
    # RGB value is the maximum.
    ((h=s == 0 ? 0
        : r == max
            ? (g - b) * 100 / (max - min)
        : g == max
            ? 200 + (b - r) * 100 / (max - min)
        : b == max
            ? 400 + (r - g) * 100 / (max - min)
        : 0
    ))

    # Convert the calculation result into
    # degrees. Divide by 100 to reverse the
    # floating point hacks.
    ((h=h * 60 / 100))

    printf '%s\n' "$h $s $l"
}

rgb_to_hsl 18 233 45
```

Include `prepend` function as described [here](https://gist.github.com/helpermethod/ce1be4205960f074f6f5f2a77669f31f).

```sh
prepend() {
  printf '%s%s' "$1" "$(< "$2")" > "$2"
}
``` 
Use exec to redirect all shell output thereafter.
Hey @dylanaraps, I think is super useful, thanks for making it! I was wondering if you could add a bit on your rationale for using `#!/usr/l/bin/env bash` instead. This is generally my thoughts: https://stackoverflow.com/a/55927235, but I'm not a bash expert.
Add a method to turn off text effects