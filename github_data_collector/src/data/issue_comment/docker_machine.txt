I'm trying to run docker quickstart terminal on a windows 10 home machine, but I get this err;r

```
Starting "default"...
(default) Check network to re-create if needed...
(default) Windows might ask for the permission to create a network adapter. Sometimes, such confirmation window is minimized in the taskbar.
(default) Creating a new host-only adapter produced an error: C:\Program Files\Oracle\VirtualBox\VBoxManage.exe hostonlyif create failed:
(default) 0%...
(default) Progress state: E_FAIL
(default) VBoxManage.exe: error: Failed to create the host-only adapter
(default) VBoxManage.exe: error: Querying NetCfgInstanceId failed (0x00000002)
(default) VBoxManage.exe: error: Details: code E_FAIL (0x80004005), component HostNetworkInterfaceWrap, interface IHostNetworkInterface
(default) VBoxManage.exe: error: Context: "enum RTEXITCODE __cdecl handleCreate(struct HandlerArg *)" at line 94 of file VBoxManageHostonly.cpp
(default)
(default) This is a known VirtualBox bug. Let's try to recover anyway...
Error setting up host only network on machine start: The host-only adapter we just created is not visible. This is a well known VirtualBox bug. You might want to uninstall it and reinstall at least version 5.0.12 that is is supposed to fix this issue
Looks like something went wrong in step ´Checking status on default´... Press any key to continue...
```
Error with pre-create check: "VBoxManage not found. Make sure VirtualBox is installed and VBoxManage is in the path"

i am tired to search and solve the problem, but i can't solve it.


Can anyone help me to solve the problem 
It'd be nice if there was an additional Machine driver, similar to `generic`, that could provision the local machine invoking the `docker-machine create` command.
Now that there is a `docker run` [option](https://github.com/docker/cli/pull/1714) to give containers access to GPUs if the Docker host has the correct configuration and install prerequisites it'd be quite nice to have an additional `docker-machine create` option for the `generic` driver to automatically install the NVIDIA Container Toolkit on the target machine being provisioned. It could just follow something like [this](https://github.com/NVIDIA/nvidia-docker#user-content-ubuntu-16041804-debian-jessiestretchbuster) installation procedure.
<!--

Thank you for your interest in contributing to Docker Machine!
Please note that the project is now in MAINTENANCE MODE, meaning we will
no longer review or merge PRs that introduce new features, drivers or
provisioners. We will continue to consider and review proposed bug fixes
and dependency upgrades when appropriate.

Thank you for your understanding.

-->

## Description

I want to support tls client authentication for openstack.
it is a general implementation, so I'd be happy if you could merge it.


## Related issue(s)

<!-- Include any issue from the tracker that this PR addresses or otherwise relates to -->

Dear all,

I'm currently doing some investigations with docker machine (via rancher, to be precise) but I'm looking at creating my machines in a given subnet.

From what I see in the documentation, there is no way to do such a thing... could you guy's tell me if it's intentional or if I missed something ?

thank you 
Version 0.16.2 running on Windows 10 64-bit build 18363 (newest build at the time of writing) and VirtualBox 6.1.0 (ditto):
```text
λ docker-machine --version
docker-machine version 0.16.2, build bd45ab13
```

Without `MACHINE_STORAGE_PATH` set:

```text
λ set MACHINE_STORAGE_PATH=

λ docker-machine create test-machine --virtualbox-no-vtx-check --virtualbox-memory 3072
Running pre-create checks...
Creating machine...
(test-machine) Copying C:\Users\A\.docker\machine\cache\boot2docker.iso to C:\Users\A\.docker\machine\machines\test-machine\boot2docker.iso...
(test-machine) Creating VirtualBox VM...
(test-machine) Creating SSH key...
(test-machine) Starting the VM...
(test-machine) Check network to re-create if needed...
(test-machine) Windows might ask for the permission to configure a dhcp server. Sometimes, such confirmation window is minimized in the taskbar.
(test-machine) Waiting for an IP...
Waiting for machine to be running, this may take a few minutes...
Detecting operating system of created instance...
Waiting for SSH to be available...
Detecting the provisioner...
Provisioning with boot2docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env test-machine
```

With `MACHINE_STORAGE_PATH` set:

```text
λ set MACHINE_STORAGE_PATH=C:\TemporaryDockerMachinePath

λ docker-machine create test-machine --virtualbox-no-vtx-check --virtualbox-memory 3072
Creating CA: C:\TemporaryDockerMachinePath\certs\ca.pem
Creating client certificate: C:\TemporaryDockerMachinePath\certs\cert.pem
Running pre-create checks...
(test-machine) Image cache directory does not exist, creating it at C:\TemporaryDockerMachinePath\cache...
(test-machine) No default Boot2Docker ISO found locally, downloading the latest release...
(test-machine) Latest release for github.com/boot2docker/boot2docker is v19.03.5
(test-machine) Downloading C:\TemporaryDockerMachinePath\cache\boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v19.03.5/boot2docker.iso...
(test-machine) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%
Creating machine...
(test-machine) Copying C:\TemporaryDockerMachinePath\cache\boot2docker.iso to C:\TemporaryDockerMachinePath\machines\test-machine\boot2docker.iso...
(test-machine) Creating VirtualBox VM...
(test-machine) Creating SSH key...
(test-machine) Starting the VM...
(test-machine) Check network to re-create if needed...
(test-machine) Windows might ask for the permission to configure a dhcp server. Sometimes, such confirmation window is minimized in the taskbar.
(test-machine) Waiting for an IP...
Error creating machine: Error in driver during machine creation: Too many retries waiting for SSH to be available.  Last error: Maximum number of retries (60) exceeded

λ docker-machine rm -f test-machine
About to remove test-machine
WARNING: This action will delete both local reference and remote instance.
Successfully removed test-machine
```
**Create a machine:**
```
$ export GOOGLE_APPLICATION_CREDENTIALS=/Users/user/docker/credential.json

$ docker-machine create --driver google \
  --google-project my-project-001 \
  --google-zone us-central1-a \
  --google-machine-type f1-micro \
  vm01
```
Response OK:
```
Running pre-create checks...
(vm06) Check that the project exists
(vm06) Check if the instance already exists
Creating machine...
(vm06) Generating SSH Key
(vm06) Creating host...
(vm06) Opening firewall ports
(vm06) Creating instance
(vm06) Waiting for Instance
(vm06) Uploading SSH Key
Waiting for machine to be running, this may take a few minutes...
Detecting operating system of created instance...
Waiting for SSH to be available...
Detecting the provisioner...
Provisioning with ubuntu(systemd)...
Installing Docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env vm06
```

**Connect to the Docker Engine:**
```
$ docker-machine env vm01
```
Response:
```
Error checking TLS connection: Get https://www.googleapis.com/compute/v1/projects/my-project-001/zones/us-central1-a/instances/vm01?alt=json: oauth2: cannot fetch token: 400 Bad Request
Response: {
  "error": "invalid_grant",
  "error_description": "Bad Request"
}
```
When using a OpenStack Cloud that only supports the /v3 keystone identity endpoint, docker-machine will fail with
```
Dec 10 09:26:14 gitlab-runner gitlab-runner[950]: #033[31;1mERROR: {"error": {"message": "(https://keystone.cloud.XXX.net:5000//v2.0/tenants): The resource could not be found.", "code": 404, "title": "Not Found"}}#033[0;m  #033[31;1mdri
ver#033[0;m=openstack #033[31;1mname#033[0;m=runner-57c2b40c-gitlabci-cbk-multi-1575966368-1427eff2 #033[31;1moperation#033[0;m=create
```

[client.go](https://github.com/docker/machine/blob/master/drivers/openstack/client.go#L286) uses https://github.com/gophercloud/gophercloud/tree/master/openstack/identity/v2/tenants, but 
https://github.com/gophercloud/gophercloud/tree/master/openstack/identity/v3/projects should be used to get the project id.

See also https://specs.openstack.org/openstack/neutron-specs/specs/newton/moving-to-keystone-v3.html.

This happens even though I've set `openstack-auth-url` to the /v3 url, but this just isn't used for the code above.

As a workaround, you can pass `--openstack-tenant-id` instead of `--openstack-tenant-name` to docker-machine.
This Merge Request aim to add support for having the docker-machine operate on a project that is using a shared VPC.

Part of the support is already baked in, like accepting full resource urls for the network and subnetwork parameters of the docker-machine; but is lacking support when checking the presence of the firewall rule to connect to the docker port.  
Until now the firewall rule will always searched, created and updated using the project set for the VMs, but this will break if the project is using a shared VPC hosted on another project and so can’t contain firewall rules.

The smaller fix that this merge contains is to extract the project value from the network project link if contains the `projects` part and fallback to the project variable if not found, and then using this new parameter for all the firewall requests (and to construct the subnetwork link if is not a self link for the same reasons).