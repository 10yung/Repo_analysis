Changed introduced due to multiply combined properties firing twice with the same value (see tests). Also makes `.queue` have single semantics regardless of sequencer state.
Updates [org.webjars:font-awesome](http://github.com/webjars/font-awesome) from 5.10.1 to 5.12.0.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.webjars", artifactId = "font-awesome" } ]
```
</details>

labels: semver-minor
This was patched for `.transform` in `0.8.x` series https://github.com/UdashFramework/udash-core/pull/474. We can ensure that uniformly by e.g. adding internal `listen` method which would propagate the flag to "derived" properties. 

See `PropertyTest`: commented case for `force` in `streamTo` for starting example.
Follow-up to #445 


SeqProperties based on immutable models usually return immutable collections:
```scala
model.subProp(_.vector).get //Vector[Int]
```
but direct usage is not quite as good:
```scala
SeqProperty(2,1,3).get //scala.collection.Seq[Int]
```
The choice of base `Seq` type was beneficial in terms of perfomance (as we sometimes avoid copying the collection), but proves to problematic, especially in Scala 2.13, where `Seq` aliases `immutable.Seq`. This introduces compatibility issues e.g. with Scalatags, which only accept immutable collections. Therefore, after 1:1 migration of our codebase for 2.13 (https://github.com/UdashFramework/udash-core/pull/434), we had to introduce `.toSeq` calls in some usages:
```scala
produce(p)(s => s.toSeq.render)
```
This particular issue was patched by explicit copying, but it's not a comprehensive solution, as `ReadableSeqProperty[A] <: ReadableProperty[scala.collection.Seq[A]`, which introduces base `Seq` type to multiple API methods.

Proposed acceptance criteria:
- only allow immutable sequences in SeqProperties (remove `io.udash.properties.PropertyCreator#materializeBSeq`)
- ensure public API of `SeqProperty` is `ISeq`-based (especially `.get`, `.listen` etc.)
- ensure consistency with above for `.subSeq`, `.roSubSeq`
- use a thin wrapper / copy-on-write to avoid copying in all cases. This will also benefit the performance for past cases where an immutable collection was used as a model subsequence.
- performance should be on-par with `0.8.x`
Making a factory reuse the view and presenter often requires e.g. adding an empty parameter list to the class. We often see an issue with this being refactored away or simply forgotten.

We should add more explicit controls over when the views and presenters are reused.

