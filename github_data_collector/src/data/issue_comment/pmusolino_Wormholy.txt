is it possible to make the dev panel more readable in dark mode? Turn off the dark mode for the Wormholy dev panel it is also a good solution
for now, it looks like this 
![image](https://user-images.githubusercontent.com/54838534/72243999-560ed780-35fe-11ea-9ad7-35c912c177b7.png)

Currently, I'm experiencing a spike of memory leaks on my graph every time I use the pod. Thoughts about it?

![Group](https://user-images.githubusercontent.com/2727120/68652398-09d9e500-0532-11ea-831e-55f4517e4ef7.png)

If I call the `Wormholy.enable(_:sessionConfiguration:)` to disable logging of network traffic on either the `URLSessionConfiguration.default` or `URLSessionConfiguration.ephemeral`, the next time either of those configurations are referenced, Wormholy will re-enable logging for those configurations as the swizzled accessors in `NSURLSessionConfiguration+Wormholy` automatically enable logging.

As of now, I'm not really sure how to completely disable logging without completely removing the framework.
Wormholy overriding certificate pinning options while using with Alamofire.
I'm using the example code block to pin certificates. While Wormholy enabled, it is not working correctly. 

```
var serverTrustPolicies: [String: ServerTrustPolicy] = [:] 
let trustPolicy = ServerTrustPolicy.pinCertificates(
    certificates: ServerTrustPolicy.certificates(),
    validateCertificateChain: true,
    validateHost: true)

serverTrustPolicies["xxxxx.com"] = trustPolicy

let configuration = URLSessionConfiguration.default

let serverTrustPolicyManager = ServerTrustPolicyManager(policies: serverTrustPolicies)

let sessionManager = SessionManager(
    configuration: configuration,
    serverTrustPolicyManager: serverTrustPolicyManager
)

return sessionManager
while using CocoaPods version > 1.7.0, the below code in PodFile to support swift version will not work and get error when pod install.
```
post_install do |installer|
    installer.pods_project.targets.each do |target|
        target.build_configurations.each do |config|
            config.build_settings['SWIFT_VERSION'] = '4.2'
        end
    end
end
```

The CocoaPods blog says that CocoaPods 1.7.0 deprecated the `.swift-version` file, the  `swift_version` should be moved to .podspec file,

> Deprecating .swift-version File

> Up until now, most pod authors have been relying on specifying a .swift-version file at the root of their repo in order to successfully publish their pod with the Swift version they officially support. However, this information is never transcribed within the published podspec and therefore during integration none of it is taken into consideration when choosing which Swift version to use.
> 
> This can cause numerous issues especially when a new version of Swift is released. This is because a consumer will automatically pick the latest version of Swift to use without the pod author officially claiming that it is supported.
> 
> We strongly recommend pod authors to migrate over to use the officially supported swift_version DSL within their podspec instead.
> 
> We also recommend deleting the .swift-version file in your repo unless you use it for other tools such as swiftenv. The swift_version DSL will always take precedence over the .swift-version file.
> 
> Finally, a warning will be displayed during lint that encourages pod authors to migrate away from using the .swift-version file and in a future major release of CocoaPods we plan to completely remove support for it.

http://blog.cocoapods.org/CocoaPods-1.7.0-beta/

maybe adding this line in .podspec will helps:

`s.swift_version = '4.2'`

that's my code 
```
NSMutableURLRequest *request = [requestSerializer requestWithMethod:[obj methodString] URLString:[NSString stringWithFormat:@"%@%@", [obj apiUrl]] parameters:params error:nil];
    
    NSURLSessionDataTask *dataTask = [self.manager dataTaskWithRequest:request uploadProgress:^(NSProgress * _Nonnull uploadProgress) {
        
    } downloadProgress:^(NSProgress * _Nonnull downloadProgress) {
        
    } completionHandler:^(NSURLResponse * _Nonnull response, id  _Nullable responseObject,
```

breakpoint not run here in wormholy

```
override init(request: URLRequest, cachedResponse: CachedURLResponse?, client: URLProtocolClient?) {
        super.init(request: request, cachedResponse: cachedResponse, client: client)
        
        if session == nil {
            session = URLSession(configuration: .default, delegate: self, delegateQueue: nil)
        }
    }
```
When using Wormholy, a UIWebView that receives a 302 Redirect response issues 2 requests for the redirect URL. You can see it happening by monitoring the web requests in Charles. This does not happen with WKWebView but there is a bug with that implementation which means I have to use UIWebView for now.

I've attached a sample project which demonstrates the failing behaviour, and also screenshots illustrating the duplicate request.

Without Wormholy installed:
<img width="812" alt="screen shot 2018-08-30 at 15 07 10" src="https://user-images.githubusercontent.com/221241/44857507-de8a1380-ac67-11e8-9c78-22329257c251.png">

With Wormholy installed
<img width="817" alt="screen shot 2018-08-30 at 15 10 33" src="https://user-images.githubusercontent.com/221241/44857509-de8a1380-ac67-11e8-9bc1-2395004406d0.png">

[Wormholy-WebView-Duplicate-Request-Example.zip](https://github.com/pmusolino/Wormholy/files/2336526/Wormholy-WebView-Duplicate-Request-Example.zip)


Found an issue with library.

After making an api call which is a POST request with multi-part content. Every next API call results into timeout.

Please suggest a resolution for this?
