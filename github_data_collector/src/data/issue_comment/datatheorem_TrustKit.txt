May be more of a timing thing rather than an issue, but the latest tags do not include a package manifest (Package.swift) in them.  To use with Swift Package Manager you have to specify the master branch instead of version.
Hey, 

I rarely run on production into an unknown key algorithm issue regarding the crash logs. Cannot reproduce the issue, so can't tell which domain and which public key algorithm. 

```@throw([NSException exceptionWithName:@"Unsupported public key algorithm" reason:@"Tried to generate the SPKI hash for an unsupported key algorithm" userInfo:nil]);```

I don't get why this goes into a crash at all. Whats the best way to handle this issue? 

Trustkit 1.6.1 / iOS 13.1, iOS 12.4.1 / iPhone 7

```Last Exception Backtrace:
0   CoreFoundation                	0x234dae98c __exceptionPreprocess + 228 (NSException.m:172)
1   libobjc.A.dylib               	0x233f879f8 objc_exception_throw + 56 (objc-exception.mm:557)
2   TrustKit                      	0x103d97e3c -[TSKSPKIHashCache hashSubjectPublicKeyInfoFromCertificate:] + 1572 (TSKSPKIHashCache.m:67)
3   TrustKit                      	0x103d9758c verifyPublicKeyPin + 388 (ssl_pin_verifier.m:71)
4   TrustKit                      	0x103d9ece0 -[TSKPinningValidator evaluateTrust:forHostname:] + 540 (TSKPinningValidator.m:126)
5   TrustKit                      	0x103d9f0b8 -[TSKPinningValidator handleChallenge:completionHandler:] + 288 (TSKPinningValidator.m:202)
Hi,

A few of my users are getting NSRangeException.
TrustKit 1.6.1

```
Fatal Exception: NSRangeException
*** -[__NSCFString substringToIndex:]: Index 18446744073709551615 out of bounds; string length 16

Fatal Exception: NSRangeException
0  CoreFoundation                 0x20ea1927c __exceptionPreprocess
1  libobjc.A.dylib                0x20dbf39f8 objc_exception_throw
2  CoreFoundation                 0x20e9234b0 -[NSCache init]
3  Foundation                     0x20f3733a4 -[NSString substringToIndex:]
4  TrustKit                       0x108af3628 getPinningConfigurationKeyForDomain + 39 (configuration_utils.m:39)
5  TrustKit                       0x108afa144 -[TSKPinningValidator evaluateTrust:forHostname:] + 99 (TSKPinningValidator.m:99)
6  TrustKit                       0x108afa6a8 -[TSKPinningValidator handleChallenge:completionHandler:] + 203 (TSKPinningValidator.m:203)
```
Would appreciate if someone can let me know if they have successfully tested and have an iOS app IN RELEASE using Trustkit with HTTPS WEBSOCKET?



Since Xcode 9.4 and version 0.30.0 of Carthage static frameworks are [supported](https://github.com/Carthage/Carthage#build-static-frameworks-to-speed-up-your-apps-launch-times). It would be great if TrustKit could provide a scheme which builds a static framework instead of a dynamic one. I'm not sure if there will be compatibility issues if TrustKit would completely switched over to static framework, if not, that would also be an option.



Hello! First and foremost, thank you very much for making this excellent library.

In this PR, we propose a new feature: custom pin failure reporting.

# Use Case

Our reporting server is strict about the JSON format it will receive. It cannot be updated by us because it's a 3rd-party service (i.e. Airbrake). Using this PR, we are able to customize the format that will be sent to our reporting URI, thus conforming to what our 3rd-party service expects.

# Implementation

- Define new configuration key: `kTSKPinFailureReportClassName`.
- When custom reporting class is used, throw an exception _unless_ it inherits from `TSKPinFailureReport`.
- When no custom reporting class is used, default to using original `TSKPinFailureReport`.
- Write a test confirming the intended usage behavior for `kTSKPinFailureReportClassName`.
- Add "Custom Pin Failure Reporting" section in `docs/getting-started.md`.

God speed ðŸ––
In version 1.5.0, the `+ [TrustKit setLoggerBlock:]` method does not really make sense anymore now that TrustKit can be used in non-singleton mode. 

The logger block will always be applied to all TrustKit instances, although the way the API is designed (as a class method) makes it look like it only applies to the singleton instance. This is confusing and inconsistent.