Applied your latest script, with settings below, Spotlight stopped working, does not refresh image on lockscreen anymore.  I can't figure out which of these settings might have affected it. Any input will be much appreciated. 



```
> # Version: v3.8, 2019-09-11
> 
> RequireAdmin
> 
> 
> DisableTelemetry                # EnableTelemetry
> DisableWiFiSense                # EnableWiFiSense
> # DisableSmartScreen            # EnableSmartScreen
> DisableWebSearch              # EnableWebSearch
> DisableAppSuggestions           # EnableAppSuggestions
> DisableActivityHistory          # EnableActivityHistory
> DisableBackgroundApps           # EnableBackgroundApps
> # DisableSensors                # EnableSensors
> # DisableLocation                 # EnableLocation
> # DisableMapUpdates               # EnableMapUpdates
> DisableFeedback                 # EnableFeedback
> DisableTailoredExperiences      # EnableTailoredExperiences
> #DisableAdvertisingID            # EnableAdvertisingID
> #DisableWebLangList              # EnableWebLangList
> DisableCortana                  # EnableCortana
> # DisableBiometrics             # EnableBiometrics
> # DisableCamera                 # EnableCamera
> # DisableMicrophone             # EnableMicrophone
> DisableErrorReporting           # EnableErrorReporting
> # SetP2PUpdateLocal             # SetP2PUpdateInternet          # SetP2PUpdateDisable
> DisableDiagTrack                # EnableDiagTrack
> DisableWAPPush                  # EnableWAPPush
> # EnableClearRecentFiles        # DisableClearRecentFiles
> # DisableRecentFiles            # EnableRecentFiles
> 
> 
> # SetUACLow                     # SetUACHigh
> # EnableSharingMappedDrives     # DisableSharingMappedDrives
> #DisableAdminShares              # EnableAdminShares
> DisableFirewall               # EnableFirewall
> # HideDefenderTrayIcon          # ShowDefenderTrayIcon
> DisableDefender               # EnableDefender
> DisableDefenderCloud          # EnableDefenderCloud
> # EnableCtrldFolderAccess       # DisableCtrldFolderAccess
> # EnableCIMemoryIntegrity       # DisableCIMemoryIntegrity
> # EnableDefenderAppGuard        # DisableDefenderAppGuard
> HideAccountProtectionWarn       # ShowAccountProtectionWarn
> DisableDownloadBlocking       # EnableDownloadBlocking
> #DisableScriptHost               # EnableScriptHost
> #EnableDotNetStrongCrypto        # DisableDotNetStrongCrypto
> EnableMeltdownCompatFlag      # DisableMeltdownCompatFlag
> # me: mouse issues EnableF8BootMenu
> #EnableF8BootMenu                # DisableF8BootMenu
> # DisableBootRecovery           # EnableBootRecovery
> # DisableRecoveryAndReset       # EnableRecoveryAndReset
> SetDEPOptOut                    # SetDEPOptIn
> 
> 
> #SetCurrentNetworkPrivate        # SetCurrentNetworkPublic
> # SetUnknownNetworksPrivate     # SetUnknownNetworksPublic
> # DisableNetDevicesAutoInst     # EnableNetDevicesAutoInst
> # DisableHomeGroups             # EnableHomeGroups
> # DisableSMB1                   # EnableSMB1
> # DisableSMBServer              # EnableSMBServer
> # DisableNetBIOS                # EnableNetBIOS
> # DisableLLMNR                  # EnableLLMNR
> # DisableLLDP                   # EnableLLDP
> # DisableLLTD                   # EnableLLTD
> # DisableMSNetClient            # EnableMSNetClient
> # DisableQoS                    # EnableQoS
> # DisableIPv4                   # EnableIPv4
> # DisableIPv6                   # EnableIPv6
> # DisableNCSIProbe              # EnableNCSIProbe
> # DisableConnectionSharing      # EnableConnectionSharing
> DisableRemoteAssistance         # EnableRemoteAssistance
> # EnableRemoteDesktop           # DisableRemoteDesktop
> 
> DisableUpdateMSRT             # EnableUpdateMSRT
> # DisableUpdateDriver           # EnableUpdateDriver
> EnableUpdateMSProducts          # DisableUpdateMSProducts
> # DisableUpdateAutoDownload     # EnableUpdateAutoDownload
> # DisableUpdateRestart            # EnableUpdateRestart
> DisableMaintenanceWakeUp        # EnableMaintenanceWakeUp
> #DisableSharedExperiences        # EnableSharedExperiences
> EnableClipboardHistory        # DisableClipboardHistory
> DisableAutoplay                 # EnableAutoplay
> DisableAutorun                  # EnableAutorun
> # DisableRestorePoints          # EnableRestorePoints
> # EnableStorageSense            # DisableStorageSense
> DisableDefragmentation        # EnableDefragmentation
> # DisableSuperfetch             # EnableSuperfetch
> # DisableIndexing               # EnableIndexing
> # DisableSwapFile               # EnableSwapFile
> # DisableRecycleBin             # EnableRecycleBin
> EnableNTFSLongPaths             # DisableNTFSLongPaths
> # DisableNTFSLastAccess         # EnableNTFSLastAccess
> # SetBIOSTimeUTC                # SetBIOSTimeLocal
> # EnableHibernation             # DisableHibernation
> # DisableSleepButton            # EnableSleepButton
> # DisableSleepTimeout           # EnableSleepTimeout
> # DisableFastStartup            # EnableFastStartup
> # DisableAutoRebootOnCrash      # EnableAutoRebootOnCrash
> 
> ### UI Tweaks ###
> #DisableActionCenter             # EnableActionCenter
> #DisableLockScreen               # EnableLockScreen
> # DisableLockScreenRS1          # EnableLockScreenRS1
> #HideNetworkFromLockScreen       # ShowNetworkOnLockScreen
> #HideShutdownFromLockScreen      # ShowShutdownOnLockScreen
> #DisableLockScreenBlur           # EnableLockScreenBlur
> # DisableAeroShake              # EnableAeroShake
> DisableAccessibilityKeys        # EnableAccessibilityKeys
> ShowTaskManagerDetails          # HideTaskManagerDetails
> ShowFileOperationsDetails       # HideFileOperationsDetails
> # EnableFileDeleteConfirm       # DisableFileDeleteConfirm
> HideTaskbarSearch               # ShowTaskbarSearchIcon         # ShowTaskbarSearchBox
> #HideTaskView                    # ShowTaskView
> #ShowSmallTaskbarIcons           # ShowLargeTaskbarIcons
> SetTaskbarCombineWhenFull       # SetTaskbarCombineNever        # SetTaskbarCombineAlways
> HideTaskbarPeopleIcon           # ShowTaskbarPeopleIcon
> #ShowTrayIcons                   # HideTrayIcons
> # ShowSecondsInTaskbar          # HideSecondsFromTaskbar
> # DisableSearchAppInStore         # EnableSearchAppInStore
> #DisableNewAppPrompt             # EnableNewAppPrompt
> # HideRecentlyAddedApps         # ShowRecentlyAddedApps
> # HideMostUsedApps              # ShowMostUsedApps
> # SetControlPanelSmallIcons     # SetControlPanelLargeIcons     # SetControlPanelCategories
> # DisableShortcutInName           # EnableShortcutInName
> # HideShortcutArrow             # ShowShortcutArrow
> # SetVisualFXPerformance          # SetVisualFXAppearance
> # EnableTitleBarColor           # DisableTitleBarColor
> # EnableDarkTheme               # DisableDarkTheme
> # AddENKeyboard                 # RemoveENKeyboard
> # EnableNumlock                 # DisableNumlock
> # DisableEnhPointerPrecision    # EnableEnhPointerPrecision
> # SetSoundSchemeNone            # SetSoundSchemeDefault
> # DisableStartupSound           # EnableStartupSound
> # DisableChangingSoundScheme    # EnableChangingSoundScheme
> # EnableVerboseStatus           # DisableVerboseStatus
> DisableF1HelpKey                # EnableF1HelpKey
> 
> # ShowExplorerTitleFullPath     # HideExplorerTitleFullPath
> ShowKnownExtensions             # HideKnownExtensions
> ShowHiddenFiles                 # HideHiddenFiles
> # ShowSuperHiddenFiles          # HideSuperHiddenFiles
> # ShowEmptyDrives               # HideEmptyDrives
> # ShowFolderMergeConflicts      # HideFolderMergeConflicts
> EnableNavPaneExpand             # DisableNavPaneExpand
> # ShowNavPaneAllFolders         # HideNavPaneAllFolders
> # EnableFldrSeparateProcess     # DisableFldrSeparateProcess
> # EnableRestoreFldrWindows      # DisableRestoreFldrWindows
> # ShowEncCompFilesColor         # HideEncCompFilesColor
> # DisableSharingWizard          # EnableSharingWizard
> # HideSelectCheckboxes          # ShowSelectCheckboxes
> # HideSyncNotifications           # ShowSyncNotifications
> # HideRecentShortcuts             # ShowRecentShortcuts
> SetExplorerThisPC               # SetExplorerQuickAccess
> # HideQuickAccess                 # ShowQuickAccess
> # HideRecycleBinFromDesktop     # ShowRecycleBinOnDesktop
> ShowThisPCOnDesktop             # HideThisPCFromDesktop
> # ShowUserFolderOnDesktop       # HideUserFolderFromDesktop
> # ShowControlPanelOnDesktop     # HideControlPanelFromDesktop
> # ShowNetworkOnDesktop          # HideNetworkFromDesktop
> # ShowBuildNumberOnDesktop      # HideBuildNumberFromDesktop
> # HideDesktopFromThisPC           # ShowDesktopInThisPC
> # HideDesktopFromExplorer       # ShowDesktopInExplorer
> # HideDocumentsFromThisPC         # ShowDocumentsInThisPC
> # HideDocumentsFromExplorer     # ShowDocumentsInExplorer
> # HideDownloadsFromThisPC         # ShowDownloadsInThisPC
> # HideDownloadsFromExplorer     # ShowDownloadsInExplorer
> # HideMusicFromThisPC             # ShowMusicInThisPC
> # HideMusicFromExplorer         # ShowMusicInExplorer
> # HidePicturesFromThisPC          # ShowPicturesInThisPC
> # HidePicturesFromExplorer      # ShowPicturesInExplorer
> # HideVideosFromThisPC            # ShowVideosInThisPC
> # HideVideosFromExplorer        # ShowVideosInExplorer
> # Hide3DObjectsFromThisPC         # Show3DObjectsInThisPC
> # Hide3DObjectsFromExplorer     # Show3DObjectsInExplorer
> # HideIncludeInLibraryMenu      # ShowIncludeInLibraryMenu
> # HideGiveAccessToMenu          # ShowGiveAccessToMenu
> # HideShareMenu                 # ShowShareMenu
> # DisableThumbnails             # EnableThumbnails
> DisableThumbnailCache           # EnableThumbnailCache
> DisableThumbsDBOnNetwork        # EnableThumbsDBOnNetwork
> 
> # DisableOneDrive                 # EnableOneDrive
> # UninstallOneDrive               # InstallOneDrive
> # UninstallMsftBloat              # InstallMsftBloat
> # UninstallThirdPartyBloat        # InstallThirdPartyBloat
> # UninstallWindowsStore         # InstallWindowsStore
> # DisableXboxFeatures             # EnableXboxFeatures
> # DisableFullscreenOptims       # EnableFullscreenOptims
> # DisableAdobeFlash               # EnableAdobeFlash
> DisableEdgePreload              # EnableEdgePreload
> #DisableEdgeShortcutCreation     # EnableEdgeShortcutCreation
> DisableIEFirstRun               # EnableIEFirstRun
> DisableFirstLogonAnimation      # EnableFirstLogonAnimation
> DisableMediaSharing             # EnableMediaSharing
> # UninstallMediaPlayer          # InstallMediaPlayer
> # UninstallInternetExplorer     # InstallInternetExplorer
> # UninstallWorkFolders          # InstallWorkFolders
> # UninstallPowerShellV2         # InstallPowerShellV2
> # InstallLinuxSubsystem         # UninstallLinuxSubsystem
> # InstallHyperV                 # UninstallHyperV
> # InstallNET23                  # UninstallNET23
> #SetPhotoViewerAssociation       # UnsetPhotoViewerAssociation
> #AddPhotoViewerOpenWith          # RemovePhotoViewerOpenWith
> # UninstallPDFPrinter           # InstallPDFPrinter
> UninstallXPSPrinter             # InstallXPSPrinter
> RemoveFaxPrinter                # AddFaxPrinter
> # UninstallFaxAndScan           # InstallFaxAndScan
> 
> # HideServerManagerOnLogin      # ShowServerManagerOnLogin
> # DisableShutdownTracker        # EnableShutdownTracker
> # DisablePasswordPolicy         # EnablePasswordPolicy
> # DisableCtrlAltDelLogin        # EnableCtrlAltDelLogin
> # DisableIEEnhancedSecurity     # EnableIEEnhancedSecurity
> # EnableAudio                   # DisableAudio
> 
> 
> # UnpinStartMenuTiles
> # UnpinTaskbarIcons
> 
```
Disable the following scheduled tasks responsible for scanning and uploading
user data to Microsoft.

Office ClickToRun Service Monitor: This task monitors the state of your
Microsoft Office ClickToRunSvc and sends crash and error logs to Microsoft.

OfficeTelemetryAgentLogOn2016: This task initiates Office Telemetry Agent,
which scans and uploads usage and error information for Office solutions when
a user logs on to the computer.

OfficeTelemetryAgentFallBack2016: This task initiates the background task for
Office Telemetry Agent, which scans and uploads usage and error information
for Office solutions.

Signed-off-by: Tomasz Wilczyński <twilczynski@naver.com>
Can be useful to add functions for to handle Phone-PC linking.
These can be the functions:

```ps
function EnablePhonePcLinking {
    Write-Output "Enabling Phone PC linking..."

    # 1) Enable MMX
    $regKeyPath = "HKLM:\Software\Policies\Microsoft\Windows\System"
    if (!(Test-Path -Path $regKeyPath)) { New-Item -Path $regKeyPath -Force | Out-Null }
    Set-ItemProperty $regKeyPath -Name "EnableMmx" -Type DWord -Value 1

    # 2) Enable shared experience
    $regKeyPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\CDP"
    if (!(Test-Path -Path $regKeyPath)) { New-Item -Path $regKeyPath -Force | Out-Null }
    Set-ItemProperty -Path $regKeyPath -Name "RomeSdkChannelUserAuthzPolicy" -Type DWord -Value 1

    # 3) Enable Consumer features
    $regKeyPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent"
    if (! (Test-Path -Path $regKeyPath)) { New-Item -Path $regKeyPath -Force | Out-Null }
    Set-ItemProperty $regKeyPath -Name "DisableWindowsConsumerFeatures" -Type DWord -Value 0
}

function DisablePhonePcLinking {
    Write-Output "Disabling Phone PC linking..."

    # 1) Disable MMX
    $regKeyPath = "HKLM:\Software\Policies\Microsoft\Windows\System"
    if (!(Test-Path -Path $regKeyPath)) { New-Item -Path $regKeyPath -Force | Out-Null }
    Set-ItemProperty $regKeyPath -Name "EnableMmx" -Type DWord -Value 0
}
```

Some doubts and open questions :
1. This feature requires enabling **Consumer Features**: this feature is instead disabled by the function `DisableAppSuggestions`. This can be a side effect.
2. This feature requires enabling **Shared Experiences**: this feature can be instead explicitly disabled by the function `DisableSharedExperiences`. Also this can be a side effect.
3. The proposed DisablePhonePcLinking  function, from the other hand, disable only the one feature that allows the Phone-PC linking: this means that  **Consumer Features** and **Shared Experiences** keep enabled: also this can be a side effect.

These points cause an execution affected by the order of the calls: the user must be aware of this and must decide how to act.

What do you think about it? @Disassembler0 
Hi,

I've tried to use the latest version of your script on a clean install of Windows 1909. Almost everything works, but when I try to disable Windows Defender (Cloud), the following errors come up.

Here are the relevant errors:

```
Disabling Windows Defender...
Set-ItemProperty : Attempted to perform an unauthorized operation.
At C:\Users\anon\Desktop\Win10-Initial-Setup-Script\Win10.psm1:660
char:2
+     Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows ...
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : PermissionDenied: (DisableAntiSpyware:String) [Set-ItemProperty], UnauthorizedAccessException
    + FullyQualifiedErrorId : System.UnauthorizedAccessException,Microsoft.PowerShell.Commands.SetItemPropertyCommand

Disabling Windows Defender Cloud...
Set-ItemProperty : Attempted to perform an unauthorized operation.
At C:\Users\anon\Desktop\Win10-Initial-Setup-Script\Win10.psm1:687
char:2
+     Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows ...
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : PermissionDenied: (SpynetReporting:String) [Set-ItemProperty], UnauthorizedAccessException
    + FullyQualifiedErrorId : System.UnauthorizedAccessException,Microsoft.PowerShell.Commands.SetItemPropertyCommand
```
Hello all,

I think it would be handy to have this feature with this tool. I'm locally running a Pi-Hole server to block ads and trafficking. However every time a new computer is joined to the network manual adjustments required to be completed so all of the traffic goes through the local DNS server. I think it should be a nice feature to have where by default it is disabled but whoever finds it helpful may enable it and set the DNS address through the presets file.
This could possibly look something like this:
#IPv4PreferredDNSserver = 192.168.1.3
#IPv4AlternateDNSserver = 
#IPv6PreferredDNSserver = 2a00:23c1:7c10:1c01:7515:9612:720:816b
#IPv6AlternateDNSserver = 

[Here is a further read](https://pureinfotech.com/change-dns-windows-10/) how to do such thing through power shell.

![image](https://user-images.githubusercontent.com/17711314/64405042-c6688380-d075-11e9-92c9-5d889abeccd0.png)
![image](https://user-images.githubusercontent.com/17711314/64405058-d718f980-d075-11e9-98cf-ace5e30d7ce1.png)


For quite some time, I have an idea for PowerShell-based WindowsForms GUI which would help people to create their own presets. The interface itself would be generated automatically based on the tweaks in supplied tweak libraries. For this purpose, every tweak would need some metadata, such as group. There were already some mentions in #229 and possibly earlier.

With the *classic* approach where every tweak is selfcontained in a single function and for every function, there is a counterpart which reverts the behavior, the GUI could be constructed pretty easily. If #241 gets implemented, it would be much harder. The structure of parameters would have to be homogenous and predictable, so the GUI-building logic could place appropriate blocks.

The GUI-generator code doesn't have to be as simple as the tweaks, so there may be even some introspection used and no metadata would be needed as we have most of the information somewhere anyway (group, function name, parameter names, allowed types or values etc.).

The idea is that it would look as follows:
![form](https://user-images.githubusercontent.com/5568046/58736599-af731f00-83fe-11e9-864e-0a11fc94ce14.png)
- Tabs are individual groups (privacy, security, etc.)
- The checkboxes determine if the tweak is present in the preset
- First column is the tweak name
- Second columens are params
- Dropdowns are the respective values of params (empty value means that the param is not given)
- (Not pictured) Somewhere down, aside from the tabview would be controls to load/save the preset.

Another approach would be to create the GUI as web-based application, completely outside of scope of this project.
This feature was often requested from the beginning (#5, #29 etc.), so it might be worth to look into it.

The basic idea would be to have a parameter (#241) to switch between single user and multiuser application. There are bunch of problems associated with that:

- Some tweaks target registry keys which don't exist in default account registry hive, and even if they are created, they will be ignored, deleted or rewritten on first login
- Multiuser application would require iterating over HKU subkeys where **all** the accounts are. There may be accounts for third party services, auxiliary accounts (e.g. nvidia drivers have one), domain accounts, roaming profiles etc. It's generally users' problem when something goes awry, but the script should be made safe enough not to cause total mayhem.
- If a single registry modification is to be applied several places (once for each user), then there needs to be some logic which makes it that way and will work only for `HKCU:\`. To make this work, the registry hive can be spoofed by remapping the *PSDrive* root to keep the tweak code clean, but there still needs to be some common/shared part which will do the looping.
Since the conception of the script, the tweaks were divided into 4 main categories (*privacy*, *services*, *UI* and *applications*). Later, *security* was split from privacy and services, and *Explorer UI* tweaks were split from the rest of UI. Nowadays, we have much more tweaks than in the beginning and this categorization is not sufficient anymore.

Once the tweaks are grouped (#241), there will be less of them, but there still may be need to redo the structure to make the navigation and relations between the tweaks clear. E.g. to split Libraries icons on Desktop and in This PC from the Explorer UI tweaks, split Defender tweaks from the rest of security, put networking to a separate group etc.
### The idea

Currently the tweaks are as individual unparametrized idempotent functions. This was generally OK in the beginning of the project as all the tweaks were just enable/disable. Then we got things like #45, #55 or #78 where there were more than two possibilities how to customize one particular control or item.

E.g. in case of
```
HideTaskbarSearch / ShowTaskbarSearchIcon / ShowTaskbarSearchBox
```
we could have something like
```
TaskbarSearch -Hide
TaskbarSearch -Icon
TaskbarSearch -Box
```
or more PowerShell-y
```
TaskbarSearch -Type Hide
TaskbarSearch -Type Icon
TaskbarSearch -Type Box
```

Furthermore, we have tweaks like
```
HideDesktopFromThisPC / ShowDesktopInThisPC
HideDocumentsFromThisPC / ShowDocumentsInThisPC
HideDownloadsFromThisPC / ShowDownloadsInThisPC
HideMusicFromThisPC / ShowMusicInThisPC
HidePicturesFromThisPC / ShowPicturesInThisPC
HideVideosFromThisPC / ShowVideosInThisPC
Hide3DObjectsFromThisPC / Show3DObjectsInThisPC
```

which could also benefit from grouping and parametrization, so we'd have something like
```
HideFromThisPC -Desktop -Documents
ShowInThisPC -Downloads -Music
```
or
```
ThisPCLibraries -HideDesktop -HideDocuments -ShowDownloads -ShowMusic
```
or
```
ThisPCLibraries -Desktop Hide -Documents Hide -Downloads Show -Music Show
```
or
```
ThisPCLibraries -Hide "Desktop", "Documents" -Show "Downloads", "Music"
```

This has been also proposed (by @r3incarnat0r in #165 and possibly by others elsewhere) for bloatware removal functions where this would enable use of `-AllUsers` and exclusion lists.

Lastly, proposals like #199 couldn't be even done by any other way as the complexity and repetition needed for such a tweak if it would be done in the *classical way* would be way too large.

### Upsides:

Much lower number of individual tweak functions, as the tweaks would be grouped thematically.

Better possibilities for customization.

Hopefully more comprehensive tweaking as the user would see what options can one particular tweak have and wouldn't need to look up another tweaks just to get the overview. Also tab-completion would work in case of interactive scripting.

### Downsides:

Absolutely all tweaks need to be renamed and rewritten. Basically the project would restart from scratch and it may be extremely confusing for occasional and non tech-savvy users.

Parametrization makes the tweaks more difficult to use as the user needs to know appropriate PowerShell syntax for appropriate data types.

It would be less obvious to determine what was the default value before modification and what would be the appropriate parameter to pass in order to restore the defaults. For this, Wiki proposed in #225 would help.

One of the core rules of the project would be broken, as the tweak function body couldn't be simply copy-pasted and run without any context anymore. Though this might be downside only for me. :)

Most importantly, the tweaks couldn't be passed directly from command line anymore as it would be no longer possible to properly parse all the options, not to mention correctly pass them to elevated command in case of `RequireAdmin`. Only preset files could be used.
These functions de-provision apps, which prevents them from being installed automatically for new user accounts.

Commented out apps are provisioned but should probably be left untouched. They are also not removed in UninstallMsftBloat by default, but I wanted them to be included for reference and easy enabling in case someone wants to remove them.