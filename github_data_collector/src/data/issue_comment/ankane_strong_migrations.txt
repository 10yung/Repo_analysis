I think helper methods can be very powerful for Strong Migrations (shout-out to @fatkodima for lots of work on this and [GitLab](https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib%2Fgitlab%2Fdatabase%2Fmigration_helpers.rb) for popularizing the concept), but it's a fundamental change from the approach Strong Migrations has taken in the past, so I wanted to discuss it here and get feedback from the community.

#### Trade-offs

Currently, Strong Migrations is focused on keeping the migration experience consistent with vanilla Rails and educating users on what's not safe. The advantages are:

1. Users don't need to learn new methods
2. Users get to learn a bit about databases

Helper methods change this by introducing new methods that make it less obvious about what's going on behind-the-scenes. The advantages are:

1. Simpler code - the new methods don't require users to jump through hoops to make migrations safe
2. Less to think about - many users may not care about what's going on behind-the-scenes

#### Choice

The good news is we can give teams a choice.

```ruby
StrongMigrations.enable_helpers
```

This will:

1. Add the helper methods to migrations
2. Change the messages users see about how to make migrations safe

If one is overwhelmingly preferred, we can consider removing the other in the future.

The drawbacks of a choice are:

1. Increased maintenance
2. Increased complexity / possible confusion with docs, issues, etc

#### Implementation

Two options that come to mind are:

Prefix or suffix methods

```ruby
add_foreign_key_safely # safe method
add_foreign_key        # unsafe method with safety checks
```

Override existing methods (eliminates need for `safety_assured`)

```ruby
add_foreign_key  # safe method
add_foreign_key! # original method, no safety checks
```

This doesn't require users to learn new methods, but it's more invasive, as it changes the behavior of existing Rails methods.

Would love to hear everyone's thoughts.
Related #95 
```ruby
StrongMigrations.enable_check(:reversible_migrations)
```
[Real changes](https://github.com/ankane/strong_migrations/commit/efc1985621014d5a3205178e65ea17b928947016) of this pr.
This pr depends on (and consists of) changes from previous 2 prs, so should be merged after them.
- [x] Tests

This depends on (and partially consists of) #105 changes, so that should be merged first.

Ideas

- [ ] helper methods for more complex operations - #111
  - [x] `add_foreign_key_safely`
  - [x] `add_null_constraint_safely` and `remove_null_constraint_safely` 
  - [ ] `backfill_column_safely`
  - [ ] `add_column_safely` - add column, change default, backfill column (for PG 11+ or no default, just call `add_column` method)
  - [ ] `change_column_null_safely` for Postgres 12+ (adds null constraint, changes column attribute which can then [skip table scan](https://www.postgresql.org/docs/12/sql-altertable.html), then drops null constraint)
  - [ ] `rename_column_safely`
  - [ ] `change_column_safely`
  - [ ] `rename_table_safely`
  - [ ] probably not needed (`add_index_safely`, `add_reference_safely` - simple enough already)
  - [ ] others
- [ ] catch unsafe migrations during rollback - for instance, `remove_index` non-concurrently runs `add_index` non-concurrently
- [ ] include null constraints in schema.rb - `dump_null_constraints` branch
- [x] disable specific checks - `StrongMigrations.disable_check(:add_index)`
- [ ] optional checks - `StrongMigrations.enable_check(:remove_index)`
    - [x] drop index concurrently
    - [ ] enforce timestamptz
    - [ ] reversible migrations
- [ ] add functionality similar to other gems
    - [ ] generate index - `rails g index`
    - [x] set default lock timeout (better if set on DB user instead) - see #99 for discussion

Decided against

- [ ] don't require `safety_assured` for `remove_column` if `ignored_columns` detected (`ignored_columns` will likely be removed after it runs in production, so this would cause errors for other devs)

I'm still on the fence about many of them. If anyone would like to discuss any of the ideas above, please create a new issue.