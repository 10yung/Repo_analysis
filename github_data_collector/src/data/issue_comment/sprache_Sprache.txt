Hi there 

I want to use Sprache referenced from an strong named assembly.

No I get an error because the assembly has not a strong name signature.
Is it possible to get the assembly in a short time with a strong name?

thanks a lot !!
Exponentiation is right associative so InnerTerm should be declared with ChainRightOperator instead of ChainOperator.
Iâ€™m handling some nested IOption results. Unfortunately `OptionExtensions` does not offer `Select`, so I wanted to write that extension myself.

Unfortunately since `Some`/`None` are internal I would have to implement my own classes. This seems like unnecessary overhead to overcome the .IsDefined and .Get cascades.

Can we make at least Some and None public? Then I can do

```cs
public static IOption<U> Select<T>(this IOption<T> o, Func<T, U> f) => o.IsDefined ? (IOption<U>) new Some<U>(f(o.Get())) : new None<U>();
```

Many thanks
It often happens that a parser needs to advance the input by more than just 1 position. A good example of such built-in parser is `Parse.Regex`, but I also have some of my own could make use of it.

Calling `Advance()` multiple times in a loop causes a lot of completely unnecessary allocations that can be easily avoided.

I implemented this in the least obtrusive way, in my opinion. There are also options to use an optional parameter instead of an overload (not backwards compatible) or make an extension method that uses the `internal` constructor of `Input` (dirty hack).

SAMPLE PROJECT: https://github.com/jonathanvdc/Loyc/
What's the reason of this line?
`
throw new ParseException(i.Memos[p].ToString());
`

It broke my parser. When I changed it to 
`
return (IResult<T>)i.Memos[p];
`
everything started work as expected.

What if I dont have delimiter but only flat-file style fixed-length string.  Imagine getting data from a Tcp stream like this for example

`"\0\0\0j\0\0\0\vT3A1111        2999BOSH                          2100021        399APV                           2100022  "`

I cannot reliably rely on a delimiter here.  The string above, represents a message received from a server with following meaning:

```
4  byte long message length      ("\0\0\0j") . THIS IS HEX value
4  byte long message id          ("\0\0\0\v"). THIS IS HEX value, the rest of values below are ASCII
1  byte long message type        ("T")
1  byte long message sequence    ("3")
8  byte long car Id              ("A1111   ")  
9  byte long part-1 price        ("     2999")
30 byte long part-1 manufacturer ("BOSH                          ")
9  byte long part#               ("2100021  ")
9  byte long part-2 price        ("      399")
30 byte long part-2 manufacturer ("APV                           ")
9  byte long part#               ("2100022  ")
```

How to parse message like this?
When do we have to use `Parse.Ref`?
I looked at the exmples but could not understand the use case of `Parse.Ref`.
Does it make the parsing faster or slower?
Does it save space?
Implemented DelimitedBy with optional minimum and maximum count parameters.
Also refactored Repeat method a bit.

Tests are done.