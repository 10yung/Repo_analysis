any chance for rhel, centos, and fedora support?

if not, any chance on build instructions
When I try to clone repo it blows up saying "user not found"

It looks like the code first checks to see if the user exists and if not found it blows up.

It should be able to clone a repo for a user that doesn't exist and then simply create the user afterwards
Currently to achieve nested aliases we have to embed entire case switch statement inside the .aliases file that pick up the aliasing parts. Might be awesome to be able to create nested aliases? Would allow us to create very advanced aliases.
If you run `aliases rehash` and a new alias isn't created it's hard to see why.

Maybe we could add a `--debug` or `--trace` or something so you can see exactly what's happening.
# Proposal: smart/dynamic auto-completion of aliases

## Problem

If I have an alias `g` that completes to 'git' I don't see the git bash completion

## Solution

Dynamically work out the command being entered and direct the bash completion to the right command
# Proposal: enable parent aliases

## Problem

If the working dir is `~/code/my-cool-app` and I have a `.aliases` file there but I'm in the `./test` dir I want to be able to use the aliases in the parent dir.

## Solution

Similar to git, if the current dir isn't git initialized it will go up the dir tree until it finds one
# Proposal: man pages to enhance the documenation

## Problem

The cli command descriptions only allow 1 line of text

## Solution

Using man pages will allow us to describe the commands in more detail and provide clear examples of how you can use the commands in different situations.
# Proposal: Increased cli for `aliases remove`

Currently `aliases remove` only takes an alias name.

## User story

As a user
I want to be able to remove user aliases or directory specific aliases via the cli
So I don't have to manually edit the .aliases file

## Suggested cli enhancements

```
# remove for a user
aliases remove --user superman fly

# remove for a directory, this does not allow a --local option
aliases remove --directory ~/code/superman fly

# remove for local directory, this does not allow a --directory option
aliases remove --local fly

# remove for directory and user, this does not allow a --local option
aliases remove --directory ~/code/superman --user superman fly

# remove for local dir and user, this does not allow a --directory option
aliases remove --local --user superman fly
```
# Proposal: Interactive mode when executing an alias

## Problem

Depending on how you use aliases things can get quite abstracted.

You can nest aliases, use positional parameters, pass through arguments etc.

An interactive mode would help to break down aliases into each of their steps, with confirmation at each step.

E.g.

Imagine I have an alias:

```
console
```

console maps to:

```
build-container && run-container bundle exec rails console
```

build-container maps to:

```
docker build -t my-image .
```

run-container maps to:

```
docker run -ti -v ${PWD}:/code my-image
```

If I want to understand the magic behind the `console` curtain a user could set:

```
export ALIASES_INTERACTIVE=true
```

and then when they run `console` at each step, before execution the user sees the current stdout and stderr and the proposed command and gets to choose whether they want to continue or not.

This proposed command will include any positional params or arguments included, so basically if the user copied it and run it in another shell it would work.

# Proposal: aliases search

So this is just documenting mu thought process around this.

Given you can  clone a user and it automatically looks for user's in `github.com/username/dot-aliases`

Example command/usage"

```
aliases search git commit introduced string
```

This under the covers makes an external request to an aliases search server which caches all known external aliases and returns results that match the query string.

### How does the cache get built?

When a user `aliases clone` successfully a ping is sent to the aliases search server to index that user.

### What does the search search use as search data?

It uses all the current data about an alias but we also add a `description` field to allow for free text.

### What can a user do once they have found an alias they want to use?

- Copy it locally
   - straight copy of the alias to a local user/directory
- Clone it
   - clone the user's alias and there can a further update process that can keep it in sync, with prompts to confirm as this could be dangerous.
- Use it once
   - maybe copy it to clipboard or something

