I got a expensive calculation and i want to kill all childs once one of them delivers a result:

``` ruby
results = Parallel.find(1..32, in_processes: 32) do
  this_could_take_long(1, 2)
end
p results #=> ["solution"]
```

Use case is solving a proof of work. One of the 16 processes will be the fastest and only one solution is needed. There seams to be no way to this or is ?
Thanks in advance for making this Gem ðŸ˜„. Our team has been enjoying it for a long time.~

However, as we also use Rspec in our automation systems, I found that sometimes our test would fail with a DeadWorker. This DeadWorker makes our investigation a little bit difficult. By digging into your library code more, I found that the fact that our tests would fail with DeadWorker is a consequence of:

1. When something like `expect{a}.to be b` fail, Rspec will raise a RSpec::Expectations::ExpectationNotMetError, which isn't a StandardError
2. We are using Parallel with `in_processes` so many of our code will be executed on a forked process.
3. The rescue in https://github.com/grosser/parallel/blob/master/lib/parallel.rb#L472 doesn't seem to catch the RSpec::Expectations::ExpectationNotMetError as it isn't a StandardError.
4. The process died out, and the worker failed to read the file. When this happened, DeadWorker from (https://github.com/grosser/parallel/blob/master/lib/parallel.rb#L74) will be the final thing recorded.

I have a small example so you could also have a try:

```ruby
require 'rspec/expectations'
require 'parallel'

# This line will fail and the last thing in the rspec report is a Parallel::DeadWorker
Parallel.each(1..1, in_processes:1) {|x| raise RSpec::Expectations::ExpectationNotMetError}

# This line will leave the correct exception as the exception happens in the main process and 'kills' the process
Parallel.each(1..1, in_threads:1) {|x| raise RSpec::Expectations::ExpectationNotMetError}

```

I tried to make a small change that lets the rescue (https://github.com/grosser/parallel/blob/master/lib/parallel.rb#L472) to catch `Exception` and after the changes, our annoying DeadWorker was resolved.

As I don't really know the designing details of process_incoming_jobs, this Issue is mainly for asking:

1. Are there any concerns so that you guys didn't choose to rescue all the exceptions in process_incoming_jobs?
2. We could patch what we need in our own system. But do you think it is worthy to modify the process_incoming_jobs so it could catch `Exception`? Or is there any other thing that might be better? We benefit from the open source community a lot so I would like to submit a PR for this. Feels like this could be something that everyone could run into, especially when using libraries such as Rspec that raises non-StandardError.
I am trying to execute two rake tasks in parallel in next way:
`task :run_parallel_regression do
  Parallel.map(%i[thread1 thread2]) do |task|
    Rake::Task[task].invoke
    raise Parallel::Break
  end
end`

If thread1 will be finished first and the result will fail but thread2 will succeed Parallel.map exit code will be 0. What I should change in my code to make Parallel.map exit with code 1 if one of the sub-processes failed?
Cucumber unfortunately utilizes the at_exit method as hook. The Parallel gem by default uses the Kernel#fork method which means that when the forked process exits, it will call the parent's at_exit handler. I am not sure if this is intended behaviour for the Parallel gem, but it does cause some unexpected bugs to occur in cucumber, or any other program that uses at_exit in a similiar way. Capybara, minitest, are some others I think use at_exit like this.

Here is the issue I opened with cucumber: cucumber/cucumber-ruby#1327

I was wondering if there was any interest in making Thread the default, or perhaps changing how the #fork workers exit. I think calling exit! will make it not call the parents at_exit handlers, but calling that from inside the Parallel block (in user code) ended up with Deadworker exception which makes sense after perusing the code.

PS: I love how this gem is essentially 1 file, very nice concise code
Hi,

When building the package for Debian, the test suite is run. From time to time, a test fails because of the presence of a debug trace, which causes the output to not match the expected result:

Here are two examples of such failures:
```
Failures:

  1) Parallel.each does not call the finish hook when a start hook fails with threads
     Failure/Error: `METHOD=each WORKER_TYPE=#{type} ruby spec/cases/with_exception_in_start_before_finish.rb 2>&1`.should == '3 called'
     
       expected: "3 called"
            got: "/home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.r... `public_send'\n\tfrom spec/cases/with_exception_in_start_before_finish.rb:21:in `<main>'\n3 called" (using ==)
       Diff:
       @@ -1,2 +1,28 @@
       +/home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `value': No live threads left. Deadlock? (fatal)
       +2 threads, 2 sleeps current:0x000055e6f85ce7c0 main thread:0x000055e6f8243ff0
       +* #<Thread:0x000055e6f8278b68 sleep_forever>
       +   rb_thread_t:0x000055e6f8243ff0 native:0x00007f2e54e99740 int:0
       +   /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `value'
       +   /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `map!'
       +   /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `in_threads'
       +   /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:335:in `work_in_threads'
       +   /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:262:in `map'
       +   /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:217:in `each'
       +   spec/cases/with_exception_in_start_before_finish.rb:21:in `public_send'
       +   spec/cases/with_exception_in_start_before_finish.rb:21:in `<main>'
       +* #<Thread:0x000055e6f8550610@/home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:206 sleep_forever>
       +   rb_thread_t:0x000055e6f85ce7c0 native:0x00007f2e54572700 int:0
       +    depended by: tb_thread_id:0x000055e6f8243ff0
       +   /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:110:in `synchronize'
       +   /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:110:in `next'
       +   /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:338:in `block in work_in_threads'
       +   /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:206:in `block (2 levels) in in_threads'
       +        from /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `map!'
       +        from /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `in_threads'
       +        from /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:335:in `work_in_threads'
       +        from /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:262:in `map'
       +        from /home/boutil/debian/ruby-team/ruby-parallel/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:217:in `each'
       +        from spec/cases/with_exception_in_start_before_finish.rb:21:in `public_send'
       +        from spec/cases/with_exception_in_start_before_finish.rb:21:in `<main>'
        3 called
       
     # ./spec/parallel_spec.rb:524:in `block (4 levels) in <top (required)>'
     # ./spec/spec_helper.rb:8:in `block (2 levels) in <top (required)>'

Finished in 55.06 seconds (files took 0.21319 seconds to load)
120 examples, 1 failure, 9 pending

Failed examples:

rspec ./spec/parallel_spec.rb[1:9:23] # Parallel.each does not call the finish hook when a start hook fails with threads
```

or


```
Failures:

  1) Parallel lambdas runs in threads
     Failure/Error: `ruby spec/cases/with_#{thing}.rb THREADS 2>&1`.should == result

       expected: "ITEM-1\nITEM-2\nITEM-3\n"
            got: "/<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/paral...usr/lib/ruby/vendor_ruby/parallel.rb:262:in `map'\n\tfrom spec/cases/with_queue.rb:18:in `<main>'\n" (using ==)
       Diff:
       @@ -1,4 +1,23 @@
       -ITEM-1
       -ITEM-2
       -ITEM-3
       +/<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `value': No live threads left. Deadlock? (fatal)
       +2 threads, 2 sleeps current:0x000056125940cf40 main thread:0x0000561258fd10d0
       +* #<Thread:0x0000561259004b70 sleep_forever>
       +   rb_thread_t:0x0000561258fd10d0 native:0x00007efd2c062740 int:1
       +   /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `value'
       +   /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `map!'
       +   /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `in_threads'
       +   /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:335:in `work_in_threads'
       +   /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:262:in `map'
       +   spec/cases/with_queue.rb:18:in `<main>'
       +* #<Thread:0x00005612592e8508@/<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:206 sleep_forever>
       +   rb_thread_t:0x000056125940cf40 native:0x00007efd2bb39700 int:0
       +    depended by: tb_thread_id:0x0000561258fd10d0
       +   /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:102:in `synchronize'
       +   /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:102:in `next'
       +   /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:338:in `block in work_in_threads'
       +   /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:206:in `block (2 levels) in in_threads'
       +	from /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `map!'
       +	from /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:207:in `in_threads'
       +	from /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:335:in `work_in_threads'
       +	from /<<PKGBUILDDIR>>/debian/ruby-parallel/usr/lib/ruby/vendor_ruby/parallel.rb:262:in `map'
       +	from spec/cases/with_queue.rb:18:in `<main>'
     # ./spec/parallel_spec.rb:574:in `block (4 levels) in <top (required)>'
     # ./spec/spec_helper.rb:8:in `block (2 levels) in <top (required)>'

Finished in 47.46 seconds (files took 0.16615 seconds to load)
120 examples, 1 failure, 9 pending

Failed examples:

rspec './spec/parallel_spec.rb[1:13:1]' # Parallel lambdas runs in threads
```

These traces are certainly not wanted, but maybe the tests should use regexp matches instead of strict equality of strings. What do you think?
Anytime I try to run a parallel_test using  Ruby (v. ruby-2.5.1.), our test fail with error "parallel_cucumber: command not found'. However, running it with ruby-2.4.1 works as expected. 

Has anyone else experienced this issue? 

Thanks! 
https://github.com/grosser/parallel/blob/4fe838144d1fbf65bb3aa85c3474b538255817a9/lib/parallel.rb#L92

Parallel provides `each` and `map` methods, implying it works well with Enumerables, but it fails with the following [contrived] use case:

```ruby
require 'parallel'
require 'prime'

primes = Prime.to_enum
private_key = 12344567899

Parallel.each(primes, in_threads: 16) do |prime|
  if private_key % prime == 0
    puts "Found factor: #{prime}"
    raise Parallel::Break
  end
end
```

...because if the first argument to `Parallel.each` is not a lambda, `.to_a` is called and it tries to expand the infinite series.
Ox is an object serializer which is faster than Marshal. I wonder if you'd be interested in a pull request that uses Ox in parallel?

Question is whether it's ok to add a dependency which requires compilation or rather use Ox if available and Marshal otherwise?

https://github.com/ohler55/ox
http://www.ohler.com/dev/ruby_object_xml_serialization/ruby_object_xml_serialization.html
Hey @grosser here's the changes I made to allow parallel to kill all child processes. Let me know what you think. Thanks!
Cloning directly from https://github.com/browserstack/rspec-browserstack and updating only to use correct BrowserStack credentials, running these tests results in expected behaviour and all tests pass. However if I intentionally make the tests fails eg change 
`expect(@driver.title).to eql("BrowserStack - Google Search")` 
to something else like
`expect(@driver.title).to eql("NOTBrowserStack - Google Search")`
 the test fails as expected but then returns the error

rake aborted!
Parallel::DeadWorker: Parallel::DeadWorker
 preventing the processes from running any more tests. 
