I noticed that the TCP server connects by calling `Socket.pack_sockaddr_in` with the user-supplied host name.
https://github.com/petergoldstein/dalli/blob/96da6efdfc3ec634583976351909e9a63bb456c2/lib/dalli/socket.rb#L60
`pack_sockaddr_in` only returns a single packed address, so if the name has more than one address (i.e. it's a round-robin address or dual-stack IPv4/IPv6), the user might be surprised if the address they expected wasn't used.

I think Dalli should notice when the user passed an ambiguous hostname and warn about it. It would be nice if Dalli expanded hostnames to addresses and created a server connection for each & added them to the ring, or if it used `Socket.getaddrinfo` and let the user pass which address family they'd prefer in the config.

I believe this is the cause of #324, where Dalli tried to connect to the first entry returned for `localhost` (either `127.0.0.1` or `::1`), but `memcached` was listening only on the other one.



A gemfile for Rails 3 doesn't exist in `gemfiles/` so I presume that Rails 3 appraisal isn't needed anymore.
- Add a new appraisal for Rails 6.
- Run `appraisal generate` to generate new gemfiles.
- Set Rails 6 as a dev dependency.
- Test Rails 6 on Travis.
I found these while I was browsing the code and I've noticed that they are not used anymore.
Hi,

Caching using a single item array as the key doesn't properly uses the cache_key method, but calls to_param only.

Eg:

- `[ model1, model2 ]` is properly expanded to `[model1.cache_key, model2.cache_key].to_param`.
- `model1` is properly expanded to `model1.cache_key`.
- `[ model1 ]` is expanded to `model1.to_param` (instead of `model1.cache_key`).

See:
https://github.com/petergoldstein/dalli/blob/8b19276d27d29b7b3abb6e3aab48ce054d165619/lib/active_support/cache/dalli_store.rb#L357-L372

(line 364 vs 366)
*Problem*:
It is not possible to properly instrument `ValueOverMaxSize` errors

*Reason*: 
In according to https://github.com/petergoldstein/dalli/blob/96da6efdfc3ec634583976351909e9a63bb456c2/lib/active_support/cache/dalli_store.rb#L241 Only subclasses of `DalliError` are instrumented, but (`ValueOverMaxSize` is a subclass of [RuntimeError](https://github.com/petergoldstein/dalli/blob/17344b625676bd1aa45f87757e0b718a3e1ae282/lib/dalli.rb#L23)

*Solution*:
Change parent of `ValueOverMaxSize` from `RuntimeError` to `DalliError`
Hi,

I'm running a rails app on Heroku. Under heavy load, I've seen this error a few times. The ruby vm is locked and the only thing that works is restarting the server. The code that triggers the error is similar to:

```ruby
Rails.cache.fetch("some_cache_#{key}", expires_in: 0) { get_cache_value(key) }
```

The full error is the following:

```
deadlock; recursive locking
/app/vendor/ruby-2.6.3/lib/ruby/2.6.0/monitor.rb:189:in `lock'
/app/vendor/ruby-2.6.3/lib/ruby/2.6.0/monitor.rb:189:in `mon_enter'
/app/vendor/ruby-2.6.3/lib/ruby/2.6.0/monitor.rb:228:in `mon_synchronize'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/dalli/options.rb:24:in `alive?'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/dalli/ring.rb:43:in `server_for_key'
/app/vendor/bundle/ruby/2.6.0/gems/newrelic_rpm-6.5.0.357/lib/new_relic/agent/instrumentation/memcache/dalli.rb:41:in `server_for_key'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/dalli/client.rb:367:in `perform'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/dalli/client.rb:59:in `get'
/app/vendor/bundle/ruby/2.6.0/gems/newrelic_rpm-6.5.0.357/lib/new_relic/agent/instrumentation/memcache.rb:49:in `block (3 levels) in instrument_methods'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/active_support/cache/dalli_store.rb:306:in `block in read_entry'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/dalli/client.rb:266:in `with'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/active_support/cache/dalli_store.rb:87:in `with'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/active_support/cache/dalli_store.rb:306:in `read_entry'
/app/vendor/bundle/ruby/2.6.0/gems/activesupport-5.2.3/lib/active_support/cache/strategy/local_cache.rb:124:in `block in read_entry'
/app/vendor/bundle/ruby/2.6.0/gems/activesupport-5.2.3/lib/active_support/cache/strategy/local_cache.rb:78:in `block in fetch_entry'
/app/vendor/bundle/ruby/2.6.0/gems/activesupport-5.2.3/lib/active_support/cache/strategy/local_cache.rb:78:in `fetch'
/app/vendor/bundle/ruby/2.6.0/gems/activesupport-5.2.3/lib/active_support/cache/strategy/local_cache.rb:78:in `fetch_entry'
/app/vendor/bundle/ruby/2.6.0/gems/activesupport-5.2.3/lib/active_support/cache/strategy/local_cache.rb:124:in `read_entry'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/active_support/cache/dalli_store.rb:420:in `read_entry'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/active_support/cache/dalli_store.rb:107:in `block in fetch'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/active_support/cache/dalli_store.rb:389:in `block in instrument_with_log'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/active_support/cache/dalli_store.rb:398:in `block in instrument'
/app/vendor/bundle/ruby/2.6.0/gems/activesupport-5.2.3/lib/active_support/notifications.rb:168:in `block in instrument'
/app/vendor/bundle/ruby/2.6.0/gems/activesupport-5.2.3/lib/active_support/notifications/instrumenter.rb:23:in `instrument'
/app/vendor/bundle/ruby/2.6.0/gems/activesupport-5.2.3/lib/active_support/notifications.rb:168:in `instrument'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/active_support/cache/dalli_store.rb:397:in `instrument'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/active_support/cache/dalli_store.rb:389:in `instrument_with_log'
/app/vendor/bundle/ruby/2.6.0/gems/dalli-2.7.10/lib/active_support/cache/dalli_store.rb:106:in `fetch'
```

Seems related to petergoldstein/dalli#193 but in that case there seems to be no exception like this one.

Is this a Dalli bug?