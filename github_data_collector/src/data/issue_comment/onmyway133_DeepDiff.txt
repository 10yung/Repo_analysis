I gets crash:
`Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'attempt to delete item 20 from section 0 which only contains 20 items before the update'`

My changes:
First Changes
`insert(0), insert(1), insert(2), insert(3), insert(4), insert(5), insert(6), insert(7), insert(8), insert(9), insert(10), insert(11), insert(12), insert(13), insert(14), insert(15), insert(16), insert(17), insert(18), insert(19)`
Second Changes
`insert(0), insert(1), insert(2), insert(3), insert(4), insert(5), insert(6), insert(7), insert(8), insert(9), insert(10), insert(11), insert(12), insert(13), insert(14), insert(15), insert(16), insert(17), insert(18), insert(19), update(20(was 0))`
Crash!

I think changes update(20) should be update(0). Maybe collection view sees the changed items before inserted
I would love to use this library, but I can't build it for Mojave!  It seems like a fairly simple pure-swift library, is there any reason it couldn't support older versions of macOS?
Hi! It would be honest to add Swift's CollectionDifference to the Performance project and to the `Among different frameworks` section in Readme. Of course, it's iOS 13+ only but why not.
 
What do you think?
In your list of examples, you have this piece of code:

```swift
let old = Array("abcd")
let new = Array("adbc")
let changes = diff(old: old, new: new)

// Move "d" from index 3 to index 1
```

Is this indeed correct or was this before introducing the Heckel algorithm?

Haven't verified this, but doesn't Heckel produce all three moves in this case? I.e.:

```swift
// Move "d" from index 3 to index 1
// Move "b" from index 1 to index 2
// Move "c" from index 2 to index 3
```

For example, in my code i have a very common case:

```
protocol BaseClassProtocol { }
class ConcreteClass1: BaseClassProtocol { } 
class ConcreteClass2: BaseClassProtocol { }
```

Anywere in my codebase, there is only `BaseClassProtocol` being used. For example:

`let array:[BaseClassProtocol] = ...`

this array contains various classes/structs with the same protocol.
How can I apply DeepDiff library and DiffAware protocol to compare various arrays of `BaseClassProtocol` objects?
Initial state:
3 sections, the first one contains one row, other contain 2 rows

Destination state:
all the sections except of the first one are removed

Error:
`attempt to delete row 2 from section 0 which only contains 1 rows before the update`

Additionally: how `diff(old:new:)` works if it tries to delete and reinsert the first section - extra action?!
Could you explain why we need to use DiffAware protocol when Hashable do the same thing and there is a lot of helper functional out-of-the-box like Hasher etc.

For example, we have a simple struct:

```
struct SomeStruct<T: DiffAware, U: DiffAware> {
  var value: T
  var valuesArray: [U]
}
```

And if we want to conform DiffAware protocol, we need to calculate  diffId something like this:

```
 var diffId: Int {
    let valueIds = self.values.map({ $0.diffId })
    
    var hasher = Hasher()
    hasher.combine(self.value.diffId)
    hasher.combine(valueIds)
    
    return hasher.finalize()
}
```

And if all the objects conformed Hashable protocol, I will not need to use map in this case and it will affect the performance. 

As I remember map complexity is O(n).

I made a PR to this end.  It can be useful when looking at changes while hiding private implementation.  See https://github.com/onmyway133/DeepDiff/pull/33 .
Mapping changes can be useful when inspecting and acting on changes without revealing private types to internal or public interfaces.  
Wondering what the impact is of replicating the reload logic from the UICollectionView+Extensions with the corresponding section-updating methods (reloadSections, deleteSections, insertSections, moveSections).  I could submit a PR for this if this change hasn't been scoped out or hasn't been intentionally omitted.