I've got `clang` to compile this to WASM:

```c
// Filename: add.c
int add(int a, int b) {
  return a + b;
}
```

When trying to compile to JVM with asmble, it fails:

```
Caused by: java.util.NoSuchElementException: List is empty.
        at kotlin.collections.CollectionsKt___CollectionsKt.last(_Collections.kt:360)
        at asmble.io.BinaryToAst.toModule(BinaryToAst.kt:216)
        at asmble.cli.Translate.inToAst(Translate.kt:70)
        at asmble.cli.Compile.run(Compile.kt:54)
```

This was working with version 0.3.0 but broke in 0.4.0.

This is the code that fails, where you call `customSections.last()`:

```
if (sectionId != 0) customSections else {
    // If the last section was custom, use the last custom section's after-ID,
    // otherwise just use the last section ID
    val afterSectionId = if (index == 0) 0 else sections[index - 1].let { (prevSectionId, _) ->
    if (prevSectionId == 0) customSections.last().afterSectionId else prevSectionId
}
```

This code is hard to follow, but looks like `customSection` starts off empty, so it's likely the `last()` call is going to be called on the empty list, as is happening to me. Not sure what `afterSectionId` should be assigned to in that case though, hope you can help find a solution.
Hi @cretz hope you don't mind I'm creating an issue just to let you know I've created a Gradle Plugin to compile WASM to JVM class files based on your project.

https://github.com/renatoathaydes/wasm-on-jvm

It makes it much easier to compile and play with WASM.

Thanks for making this possible.
Bump dependencies, update `ByteBuffer` APIs to Java 9's, suppress warning properly

This issue fixes #28, but may drop support for JRE 8. I'm using JRE 11.
I have stumbled with NPD during compilation of this [example](https://yadi.sk/d/B5czrMnCg3Thkg). It seems that this exception caused by generation of stack locals after `GOTO` operation: the field `locals` sets to null by `asm` after `GOTO` and then processing of `iconst_1` operation tries to invoke get on null object here
```java
localsRead.put(var, locals.get(var));
```

The stack trace is 
```
visitVarInsn:334, Splitter$StackAndLocalTrackingAdapter (asmble.compile.jvm.msplit)
accept:74, VarInsnNode (org.objectweb.asm.tree)
splitPointFromInfo:267, Splitter$Iter (asmble.compile.jvm.msplit)
longestForCurrIndex:152, Splitter$Iter (asmble.compile.jvm.msplit)
nextOrNull:129, Splitter$Iter (asmble.compile.jvm.msplit)
hasNext:107, Splitter$Iter (asmble.compile.jvm.msplit)
split:52, SplitMethod (asmble.compile.jvm.msplit)
split:31, SplitMethod (asmble.compile.jvm.msplit)
fromClassNode:32, AsmToBinary (asmble.compile.jvm)
fromClassNode$default:16, AsmToBinary (asmble.compile.jvm)
run:72, Compile (asmble.cli)
run:10, Compile (asmble.cli)
runWithArgs:17, Command (asmble.cli)
main:35, MainKt (asmble.cli)
```

Also tested with the latest `asm` - the same result.

gradle  :examples:rust-simple:run  
succeed, while 
gradle run --args="compile ./examples/rust-simple/target/wasm32-unknown-unknown/release/rust_simple.wasm RustSimple"
failed, why?
[ERROR] Error in command 'compile': Invalid section ID of 19
asmble.io.IoErr$InvalidSectionId: Invalid section ID of 19
        at asmble.io.BinaryToAst.toModule(BinaryToAst.kt:184)
        at asmble.cli.Translate.inToAst(Translate.kt:70)
        at asmble.cli.Compile.run(Compile.kt:54)
        at asmble.cli.Compile.run(Compile.kt:10)
        at asmble.cli.Command.runWithArgs(Command.kt:17)
        at asmble.cli.MainKt.main(Main.kt:31)
I download 0.4.0 release ,and extract to my computer .
when I run :  MacBook-Pro:asmble wudream$ ./asmble/bin/asmble compile main.wasm hello  
Exception in thread "main" kotlin.reflect.jvm.internal.KotlinReflectionInternalError: Function 'limit' (JVM signature: limit(I)Ljava/nio/Buffer;) not resolved in class java.nio.ByteBuffer:
public open fun limit(arg0: kotlin.Int): (java.nio.ByteBuffer..java.nio.ByteBuffer?) defined in java.nio.ByteBuffer | kotlin.reflect.jvm.internal.JvmFunctionSignature$JavaMethod@f19c9d2
public final fun limit(): kotlin.Int defined in java.nio.ByteBuffer | kotlin.reflect.jvm.internal.JvmFunctionSignature$JavaMethod@7807ac2c
	at kotlin.reflect.jvm.internal.KDeclarationContainerImpl.findFunctionDescriptor(KDeclarationContainerImpl.kt:159)
	at kotlin.reflect.jvm.internal.KFunctionImpl$descriptor$2.invoke(KFunctionImpl.kt:54)
	at kotlin.reflect.jvm.internal.KFunctionImpl$descriptor$2.invoke(KFunctionImpl.kt:34)
	at kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal.invoke(ReflectProperties.java:92)
	at kotlin.reflect.jvm.internal.ReflectProperties$Val.getValue(ReflectProperties.java:31)
	at kotlin.reflect.jvm.internal.KFunctionImpl.getDescriptor(KFunctionImpl.kt)
	at kotlin.reflect.jvm.internal.KFunctionImpl$caller$2.invoke(KFunctionImpl.kt:60)
	at kotlin.reflect.jvm.internal.KFunctionImpl$caller$2.invoke(KFunctionImpl.kt:34)
	at kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal.invoke(ReflectProperties.java:92)
	at kotlin.reflect.jvm.internal.ReflectProperties$Val.getValue(ReflectProperties.java:31)
	at kotlin.reflect.jvm.internal.KFunctionImpl.getCaller(KFunctionImpl.kt)
	at kotlin.reflect.jvm.ReflectJvmMapping.getJavaMethod(ReflectJvmMapping.kt:62)
	at asmble.compile.jvm.AsmExtKt.getDeclarer(AsmExt.kt:22)
	at asmble.compile.jvm.AsmExtKt.invokeVirtual(AsmExt.kt:28)
	at asmble.compile.jvm.ByteBufferMem.init(ByteBufferMem.kt:27)
	at asmble.compile.jvm.AstToAsm.addMemClassConstructor(AstToAsm.kt:146)
	at asmble.compile.jvm.AstToAsm.addConstructors(AstToAsm.kt:79)
	at asmble.compile.jvm.AstToAsm.fromModule(AstToAsm.kt:26)
	at asmble.cli.Compile.run(Compile.kt:71)
	at asmble.cli.Compile.run(Compile.kt:10)
	at asmble.cli.Command.runWithArgs(Command.kt:17)
	at asmble.cli.MainKt.main(Main.kt:31)

I do quick glance at google search , it seems to be java.nio.ByteBuffer incompatibility with JDK9+ . https://github.com/eclipse/jetty.project/issues/3244
 pls. have a look !
Well, now that [V8 has it](https://developers.google.com/web/updates/2018/10/wasm-threads) I might as well do it. I was hoping the spec would get standardized and the wait/wake stuff would get test cases and interpreter support in the repo. I put an overview of [my expected impl approach on HN](https://news.ycombinator.com/item?id=18284798) the other day. I have more details in personal notes, but should be doable without too much effort.
Once #23 is done, we need to:

* Update README to give more details to programmatic users
* Add KDoc to more of the lib
* Publish a dokka javadoc jar to maven central w/ next release
* Update README to remove some of the less-called CLI stuff
If my program uses `memcpy`, in java (byte)code I see this implementation:
```java
    private int memcpy(int var1, int var2, int var3) {
        if (var3 != 0) {
            int var4 = var1;

            do {
                this.memory.put(var4, (byte)Byte.toUnsignedInt(this.memory.get(var2)));
                ++var2;
                ++var4;
            } while((var3 += -1) != 0);
        }

        return var1;
    }
```

But it can be implemented in much more efficient way by using ByteBuffer API:
```java
    private int memcpy(int src, int dst, int len) {
        if (len != 0) {
            ByteBuffer srcBuf = memory.duplicate();
            srcBuf.position(src);
            srcBuf.limit(src + len);

            ByteBuffer dstBuf = memory.duplicate();
            dstBuf.position(dst);
            dstBuf.put(srcBuf);
        }

        return src;
    }
```
With this implementation the real native `memcpy` will be used (if `memory` is `DirectByteBuffer`).


We can detect functions like `memcpy` by their names, signatures and bodies, and then replace them with more efficient implementation.
It's common practice to store gradle wrapper inside git repository. It make initial setup much easier for new contributors. For example, we store gradle wrapper in our repository in [intellij-rust](https://github.com/intellij-rust/intellij-rust).