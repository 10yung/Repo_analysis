This PR enables Pantry to read its legacy storage format (plist). This is necessary when upgrading from a pre-swift-3 version of the framework a current version, otherwise the storage contents will always be tried to read as JSON (which will fail) and the `unpack` method will ultimately return `nil` although all the data was still there.

What this PR does is basically first trying to read the old format for downwards compatibility and only if that fails, read the storage contents as JSON.

You don't NEED to merge the PR if you don't want to as I can see this being a rare edge case but I wanted to offer it anyways. And I can totally see that 'reading the legacy format first' is a overhead that might be too big for the edge case it solves.

Also, I'm open for better approaches to fix this scenario if you have any. This is just a quick fix and honestly the first idea I had. But it works.
I needed to explicitly store a 64-bit Int on 32-bit devices, but Pantry doesn't support Int64 by default. Including this line seems to work:

`extension Int64: StorableDefaultType {}`

(Hopefully there's no reason not to do that, it seems to work without error.)

Presumably Int32 also needs to be added, but I didn't explicitly test for that.
How to prevent iOS from cleaning saved data on low memory?
Hi, 

Would you please help to let me know if this is plan for macOS platform? Or the guide how to make it be work for macOS. 

Thanks
I have the following nested model:

```struct Checklist: Unboxable {
    let id: String
    let agencyId: String
    let name: String
    var checklistItems: [ChecklistItem]

    init (id: String, agencyId: String, name: String, checklistItems: [ChecklistItem]) {
        self.id = id
        self.agencyId = agencyId
        self.name = name
        self.checklistItems = checklistItems
    }

    init(unboxer: Unboxer) throws {
        id = unboxer.unbox(key: "id") ?? ""
        agencyId = unboxer.unbox(key: "agencyId") ?? ""
        name = unboxer.unbox(key: "name") ?? ""
        checklistItems = unboxer.unbox(key: "checklistItems") ?? []
    }
}

extension Checklist: Storable {
    init(warehouse: Warehouseable) {
        self.id = warehouse.get("id") ?? ""
        self.agencyId = warehouse.get("agencyId") ?? ""
        self.name = warehouse.get("name") ?? ""
        self.checklistItems = warehouse.get("checklistItems") ?? [ChecklistItem]()
    }

    func toDictionary() -> [String : Any] {
        return [ "id": self.id, "agencyId": self.agencyId, "name": self.name, "checklistItems": self.checklistItems ]
    }
}

struct ChecklistItem: Unboxable {
    let id: String
    let checklistId: String
    let title: String
    var checked: Bool = false

    init(id: String, checklistId: String, title: String, checked: Bool) {
        self.id = id
        self.checklistId = checklistId
        self.title = title
        self.checked = checked
    }

    init(unboxer: Unboxer) throws {
        id = unboxer.unbox(key: "id") ?? ""
        checklistId = unboxer.unbox(key: "checklistId") ?? ""
        title = unboxer.unbox(key: "title") ?? ""
    }
}

extension ChecklistItem: Storable {
    init(warehouse: Warehouseable) {
        self.id = warehouse.get("id") ?? ""
        self.checklistId = warehouse.get("checklistId") ?? ""
        self.title = warehouse.get("title") ?? ""
        checked = warehouse.get("checked") ?? false
    }

    func toDictionary() -> [String : Any] {
        return [ "id": self.id, "checklistId": self.checklistId, "title": self.title, "checked": self.checked ]
    }
}
```

checklist.toDictionary() produces the following:

```checklist.00000000-0000-0000-0001-000000000001.00000000-0000-0000-0000-000000000001
["agencyId": "00000000-0000-0000-0000-000000000001", "id": "00000000-0000-0000-0000-000000000001", "checklistItems": [vacatuner.ChecklistItem(id: "00000000-0000-0000-0000-000000000006", checklistId: "00000000-0000-0000-0000-000000000001", title: "Opaľovací krém", checked: false), vacatuner.ChecklistItem(id: "00000000-0000-0000-0000-000000000005", checklistId: "00000000-0000-0000-0000-000000000001", title: "Slnečné okuliare", checked: false), vacatuner.ChecklistItem(id: "00000000-0000-0000-0000-000000000004", checklistId: "00000000-0000-0000-0000-000000000001", title: "Plavky", checked: false), vacatuner.ChecklistItem(id: "00000000-0000-0000-0000-000000000003", checklistId: "00000000-0000-0000-0000-000000000001", title: "Teplé oblečenie na večer", checked: false), vacatuner.ChecklistItem(id: "00000000-0000-0000-0000-000000000002", checklistId: "00000000-0000-0000-0000-000000000001", title: "Lieky", checked: false), vacatuner.ChecklistItem(id: "00000000-0000-0000-0000-000000000001", checklistId: "00000000-0000-0000-0000-000000000001", title: "Pas", checked: true)], "name": "Europa"]
```

when I call Pantry.pack() on the checklist instance, I stumble upon a crash in JSONWarehouse.swift:
```
let data = try JSONSerialization.data(withJSONObject: storableDictionary, options: .prettyPrinted)
```

```
*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'Invalid type in JSON write (_SwiftValue)'
```
Hello guys, I'm having a serious problem with Pantry. I didn't change anything from what I had before the update (it's a project that could wait). After this update, Pantry crashes at every `pack` call. I pack arrays (of every type, even custom structs that conforms to the `Storable` protocol) and other kind of stuff. Before the update everything was working good, not now.

One of the call is simple as : 

`Pantry.pack(self, key: pantryKeyCurrentUser)`

Here crashes pointing me to this line (number 118 of file JSONWarehouse): 

`let data = try JSONSerialization.data(withJSONObject: storableDictionary, options: .prettyPrinted)`

The error is `EXC_BAD_INSTRUCTION (code = EXC_I386_INVOP, subcode = 0x0)`

Hey!
Good job on Pantry! 
I've built a new extension that inherits from `Storable`. Added extensions for default implementations (It uses Reflection to generate property-value pairs that's then typecasted to a dictionary. Now, if you want to add caching behaviour to a Struct, simply add `Pantryable` in an extension.
Here's a [Gist](https://gist.github.com/codeOfRobin/5de993100210abb22715a959a570585b)

``` Swift
//Extensions for Pantry using reflection. Default implementation


public protocol Pantryable: Storable {
    func allProperties() throws -> [String: Any]
    func toDictionary() -> [String : AnyObject]
}


extension Pantryable {
 public func allProperties() throws -> [String: Any] {
        var result: [String: Any] = [:]

        let mirror = Mirror(reflecting: self)

        guard let style = mirror.displayStyle where style == .Struct || style == .Class else {
            //throw some error
            throw NSError(domain: "com.kayako.kayako", code: 666, userInfo: nil)
        }

        for (labelMaybe, valueMaybe) in mirror.children {
            guard let label = labelMaybe else {
                continue
            }
            result[label] = valueMaybe
        }
        return result
    }

    public func toDictionary() -> [String : AnyObject] {
        do {
            let properties = try self.allProperties()
            var result:[String: AnyObject] = [:]
            for (key,value) in properties {
                if let v = value as? AnyObject {
                    result[key] = v
                }
            }
            return result

        } catch {
            fatalError("properties can't be retrieved")
        }

    }

}
```

It would be nice to have a way to get all the keys or directly keys/objects stored in the warehouses. I made an extension of Pantry using the following code

``` swift
 extension JSONWarehouse{
    static func getAllKeysInCache() -> [String]?{

        var keys : Array<String> = []

        let cacheDirectory = JSONWarehouse.cacheDirectory
        do {
            let urls = try NSFileManager.defaultManager().contentsOfDirectoryAtURL(cacheDirectory, includingPropertiesForKeys: [], options: NSDirectoryEnumerationOptions(rawValue: 0))
            for url in urls{
                keys.append(url.lastPathComponent!)
            }            
            return keys
        }
        catch {
            return nil
        }

    }
}

extension MemoryWarehouse{
    static func getAllKeysInCache() -> [String]?{
        return Array(MemoryWarehouse.globalCache.keys)
    }
}

extension Pantry{

    static func getAllKeysInCache() -> [String]?{

        if Pantry.enableInMemoryModeWithIdentifier != nil{
            return MemoryWarehouse.getAllKeysInCache()
        }else{
            return JSONWarehouse.getAllKeysInCache()
        }

    }

}
```

I think it could be useful.

I am seeing several memory leaks from Pantry. Please see the attached screenshots. 
![screen shot 2016-07-26 at 2 58 43 pm](https://cloud.githubusercontent.com/assets/1332828/17132965/b18093e0-5341-11e6-8ef6-70bcc19ab43d.png)

![screen shot 2016-07-26 at 3 01 49 pm](https://cloud.githubusercontent.com/assets/1332828/17133311/2fe6377a-5343-11e6-9dc3-3cb635c60dc6.png)

My code with Pantry leaks -
![screen shot 2016-07-26 at 3 05 44 pm](https://cloud.githubusercontent.com/assets/1332828/17133334/385648c8-5343-11e6-8414-f01c41877904.png)

There are already a lot of objects that can be persisted using `NSCoding`. I think being able to persist them out of the box makes a lot of sense.

I had to remove `StorableDefaultType` from `NSDate` because it conforms to `NSCoding` and the compiler wouldn't know which `pack`/`unpack` to use.
