

I was using 0.9.11 and with scanners it was working fine.  but by just changing the version to 0.9.12 , stared getting the exception for "org.reflections.RflectionException: Scanner SubTypeScanner was not configured".

```java
Reflections reflections = new Reflections(new ConfigurationBuilder()
     .setUrls(ClasspathHelper.forPackage("my.project.prefix"))
     .setScanners(new SubTypesScanner(), new TypeAnnotationsScanner()),
     .filterInputsBy(new FilterBuilder().includePackage("my.project.prefix"))
     );

reflections.getSubTypesOf(someClass);  // here it throws exception 

```

I noticed that, when I add a class which extend some class to the package, this error goes. 
Same with FieldAnnotationScanner , or any other scanner. 

To try , please provide an invalid package for reflection creation, you will see all these errors coming even after configuring all scanners with reflection
I am using version 0.9.11 of reflections together with kotlin 1.3.31 in unit tests.
The reflections api is not handling the "internal" keyword of kotlin correctly.
This keyword appends the module in which the code resides to the method name:
com.github.janphkre.reflectionstest.ReflectiveKotlinTest$TestItem.getTime$uitests_debug()
This results in a ReflectionsException because every $ is treated as class delimiter:
```
org.reflections.ReflectionsException: Can't resolve member named com.github.janphkre.reflectionstest.ReflectiveKotlinTest$TestItem.getTime$uitests_debug() #15

	at org.reflections.util.Utils.getMembersFromDescriptors(Utils.java:125)
	at org.reflections.Reflections.getMethodUsage(Reflections.java:613)
	at com.github.janphkre.reflectionstest.ReflectiveKotlinTest.reflective_timeUsage_forbidden(ReflectiveKotlinTest.kt:28)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
Caused by: org.reflections.ReflectionsException: Can't resolve member named uitests_debug for class com.github.janphkre.reflectionstest.ReflectiveKotlinTest$TestItem.getTime
	at org.reflections.util.Utils.getMemberFromDescriptor(Utils.java:94)
	at org.reflections.util.Utils.getMembersFromDescriptors(Utils.java:123)
	... 24 more
```

This example comes from this short example I build this down to:
```
package com.github.janphkre.reflectionstest

import org.junit.Assert
import org.junit.Test
import org.reflections.Reflections
import org.reflections.scanners.MemberUsageScanner
import org.reflections.util.ClasspathHelper
import org.reflections.util.ConfigurationBuilder
import org.reflections.util.FilterBuilder

class ReflectiveKotlinTest {

    class TestItem {
        internal fun getTime(): Long {
            return System.currentTimeMillis()
        }
    }

    @Test
    fun reflective_timeUsage_forbidden() {
        val packageName = this::class.java.`package`.name
        val reflections = Reflections(ConfigurationBuilder()
            .setUrls(ClasspathHelper.forPackage(packageName))
            .setScanners(MemberUsageScanner())
            .filterInputsBy(FilterBuilder().includePackage(packageName)))

        val systemTimeMethod = System::class.java.getMethod("currentTimeMillis")
        val methodUsages = reflections.getMethodUsage(systemTimeMethod)
        if(methodUsages.isNotEmpty()) {
            Assert.fail()
        }
    }
}
```
My suggestion would be to split off the string at the last dot and use the remaining part as the method name before looking at the class part of the string.
`getMethodsAnnotatedWith()` does not return methods with meta-annotations like `getTypesAnnotatedWith`

Example:
```
@Target({METHOD, ANNOTATION_TYPE})
@Retention(RUNTIME)
@interface MetaMethod { }

@MetaMethod
@Target(METHOD)
@Retention(RUNTIME)
@interface AM {}

@MetaMethod
@Target(METHOD)
@Retention(RUNTIME)
@interface BM {}

class A1 {
    @AM public void inA1() {}
}
class B1 {
    @BM public void inB1() {}
}
class A2 {
    @AM public void inA2() {}
}

public class Annotations {

    public static void main(String[] args) {
        Reflections reflections = new Reflections(
                new ConfigurationBuilder()
                        .forPackages("org.jsondoc.springmvc.scanner")
                        .addScanners(new MethodAnnotationsScanner()));
        System.out.println("MetaMethods:");
        for (Method type: reflections.getMethodsAnnotatedWith(MetaMethod.class)) {
            System.out.println(type.getName());
        }
        System.out.println("AnnotatedMethdos");
        for (Method type: reflections.getMethodsAnnotatedWith(AM.class)) {
            System.out.println(type.getName());
        }
    }
}
```

prints
```
MetaMethods:
AnnotatedMethdos
inA2
inA1
```

expected:
```
MetaMethods:
inA1
inA2
inB1
AnnotatedMethdos
inA2
inA1
```

i have some code that works perfectly fine against java classes...
` reflections = new Reflections(new ConfigurationBuilder()
                .setUrls(urls)
                .addClassLoader(ClassLoader.getSystemClassLoader())
                .addClassLoader(ClassLoader.getClassLoader())
                .addScanners(new MemberUsageScanner(), new MethodAnnotationsScanner(), new MethodParameterScanner()))`

> 

`     Set<Method> getTestMethods() {
         return reflections.getMethodsAnnotatedWith(Issue)
    }`

....but when i run it against a project with groovy classes i run into the "ClassNotFoundException"

This exception is thrown because there is a "." (dot) that is left behind in the class name. so instead of "com.somepackage.className" i have "com.somepackage.className."
i have narrowed this issue down to the "getMemberFromDescriptor" method within the "/org/reflections/util/Utils.class", lines 66/67.
for some reason the groovy class descriptor has "com.somepackage.className.**_$spock_feature_0_7()_**" .  The memberKey.lastIndexOf("$") leaves the . behind.

This PR makes finding classes work for Java 11.
If none of the ClassLoaders are `URLClassLoader`, use the property `java.class.path` to find all classes.

This might also fix #202 
Hello, first of all thank you for providing this great library as Open-Source software!

I tried using `getMethodParamNames` today, but the returned list contains not only the names of the method parameters, but also the names of the local variables of that method.

I wrote up a quick demonstration to show this:

```
    public void test(String testParam) {
        String testLocal = "local";
    }

    public static void main(String[] args) throws Exception {
        final Method method = Demo.class.getMethod("test", String.class);

        Reflections reflections = new Reflections("de.nikos410", new MethodParameterNamesScanner());
        List<String> paramNames = reflections.getMethodParamNames(method);

        System.out.println(paramNames);
    }
```

The output I get is `[testParam, testLocal]`

Is this a known issue or is it maybe caused by some configuÅ•ation issue?
Given the inclusion of WTFPL, I assume the listing of two licenses in the pom is an either or, not a combination. If that assumption is true, this commit adds that clarity using language similar to another dual licensed repo: https://github.com/qos-ch/logback/blob/master/LICENSE.txt
Reference Issue #250 
https://github.com/ronmamo/reflections/blob/94f9d5a3de9b1e268280fe974a60147f575929d7/src/main/java/org/reflections/util/Utils.java#L69

> Can't resolve member named 0 for class

Because there is an extra value in the memberkey
```
ClassName.lambda$methodName$0
```

I tried to replicate in tests but it is not java 8

I tried to upgrade javassist it didnt work