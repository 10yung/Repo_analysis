Hi! I noticed two minor bugs with how failure to open serialtube() is handled:
1. The exception thrown is `serial.serialutil.SerialException` rather than `PwnlibException` (which is the one thrown by all other tubes when opening fails)
2. After the program exits, another error is thrown in automatically called close() which is caused by earlier unsuccessful initialization

Here is a small test case (make sure the port is actually busy before running this):
```
pi@raspberrypi:~ $ cat a.py 
#!/usr/bin/python
from pwn import *
import serial
import traceback

log.info("Trying to open a serial port")
try:
    s = serialtube("/dev/serial0", 115200)
except serial.serialutil.SerialException as e:  # <- note wrong exception type here
    log.warn("Failed to open a serial port!")
    log.warn(traceback.format_exc(e))
log.info("After opening serial port")

pi@raspberrypi:~ $ PWNLIB_DEBUG=1 python a.py 
[!] Pwntools does not support 32-bit Python.  Use a 64-bit release.
[*] Trying to open a serial port
[!] Failed to open a serial port!
[!] Traceback (most recent call last):
      File "a.py", line 8, in <module>
        s = serialtube("/dev/serial0", 115200)
      File "/home/pi/.local/lib/python2.7/site-packages/pwnlib/tubes/serialtube.py", line 41, in __init__
        interCharTimeout = 0
      File "/home/pi/.local/lib/python2.7/site-packages/serial/serialutil.py", line 240, in __init__
        self.open()
      File "/home/pi/.local/lib/python2.7/site-packages/serial/serialposix.py", line 268, in open
        raise SerialException(msg.errno, "could not open port {}: {}".format(self._port, msg))
    SerialException: [Errno 16] could not open port /dev/serial0: [Errno 16] Device or resource busy: '/dev/serial0'
[*] After opening serial port
Traceback (most recent call last):
  File "/home/pi/.local/lib/python2.7/site-packages/pwnlib/tubes/serialtube.py", line 87, in close
    if self.conn:
AttributeError: 'serialtube' object has no attribute 'conn'
```

Additionally, documentation for the serialtube module is quite lacking (as in, there is basically no documentation and you have to look at the source code to see e.g. how `convert_newlines` is handled)
This is closely related to subprocessed tests of `pwnlib.ui`, and processes dying randomly (but only on py 2). Any ideas of how to solve this are greatly welcome.
Tiniest of edits to the readme.
I've been playing around with VS Code and the Windows Subsystem for Linux trying to get some of my projects working with that environment. 

I'm having an issue that I think might be related to the VS Code output terminal. Here's an example that breaks when I try to run tests from from inside the IDE's built in testing framework but not when I run from the IDE command line. I imagine it has something to do with the way VS code imports the module into it's own testing framework. 

## Code That Breaks 
```python
import unittest
from pwn import *

class TestExercise(unittest.TestCase):
    def test_remote(self):
        conn = remote('ftp.ubuntu.com',21)
        resp = conn.recvline().decode()
        print(resp)
        self.assertIn("220", resp)
    
if __name__ == '__main__':
    unittest.main()
```

## Thrown Exception

```
ImportError: Failed to import test module: runtests
Traceback (most recent call last):
  File "/usr/lib/python3.6/unittest/loader.py", line 428, in _find_test_path
    module = self._get_module_from_name(name)
  File "/usr/lib/python3.6/unittest/loader.py", line 369, in _get_module_from_name
    __import__(name)
  File "*****/projects/random_pwntools_test/runtests.py", line 2, in <module>
    from pwn import *
  File "*****/.local/lib/python3.6/site-packages/pwn/__init__.py", line 6, in <module>
    pwnlib.args.initialize()
  File "*****/.local/lib/python3.6/site-packages/pwnlib/args.py", line 209, in initialize
    term.init()
  File "*****/.local/lib/python3.6/site-packages/pwnlib/term/__init__.py", line 75, in init
    term.init()
  File "*****/.local/lib/python3.6/site-packages/pwnlib/term/term.py", line 102, in init
    setupterm()
  File "*****/.local/lib/python3.6/site-packages/pwnlib/term/term.py", line 74, in setupterm
    update_geometry()
  File "*****/.local/lib/python3.6/site-packages/pwnlib/term/term.py", line 46, in update_geometry
    hw = fcntl.ioctl(fd.fileno(), termios.TIOCGWINSZ, '1234')
OSError: [Errno 25] Inappropriate ioctl for device
```

### Hacky Fixes
Just shimming out the initialize function works for my specific use case. But that probably kills other terminal functionality I might want in the future? (and it makes command line output way less pretty)
```python
import pwnlib.args
pwnlib.args.initialize = lambda: None
```

### Resources
https://code.visualstudio.com/docs/python/testing#_test-discovery
When using Pwntools 4.0.0 with Python3, there appear to be multiple issues when stepping with `pdb`.  In particular, the below issue arises.  I think this is related to terminal handling, since `NOTERM` resolves the issue.


### `pdb-broken.py`
```python3
#!/usr/bin/env python3 -m pdb
import time
from pwn import *
x=1
x=2
x=3
x=4
```

## Without Pwntools, the `q` command works

```
~ ❯❯❯ ./pdb-broken.py
> /Users/zachriggle/pdb-broken.py(2)<module>()
-> import time
(Pdb) n
> /Users/zachriggle/pdb-broken.py(3)<module>()
-> from pwn import *
(Pdb) q
```

## With pwntools, the `n` command works but `q` throws an exception

```
~ ❯❯❯ ./pdb-broken.py
> /Users/zachriggle/pdb-broken.py(2)<module>()
-> import time
(Pdb) n
> /Users/zachriggle/pdb-broken.py(3)<module>()
-> from pwn import *
(Pdb)
> /Users/zachriggle/pdb-broken.py(4)<module>()
-> x=1
(Pdb) q
Traceback (most recent call last):
  File "/Users/zachriggle/.pyenv/versions/3.7.4/lib/python3.7/pdb.py", line 1701, in main
    pdb._runscript(mainpyfile)
  File "/Users/zachriggle/.pyenv/versions/3.7.4/lib/python3.7/pdb.py", line 1570, in _runscript
    self.run(statement)
  File "/Users/zachriggle/.pyenv/versions/3.7.4/lib/python3.7/bdb.py", line 585, in run
    exec(cmd, globals, locals)
  File "<string>", line 1, in <module>
  File "/Users/zachriggle/pdb-broken.py", line 4, in <module>
    x=1
  File "/Users/zachriggle/pdb-broken.py", line 4, in <module>
    x=1
  File "/Users/zachriggle/.pyenv/versions/3.7.4/lib/python3.7/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/Users/zachriggle/.pyenv/versions/3.7.4/lib/python3.7/bdb.py", line 112, in dispatch_line
    self.user_line(frame)
  File "/Users/zachriggle/.pyenv/versions/3.7.4/lib/python3.7/pdb.py", line 261, in user_line
    self.interaction(frame, None)
  File "/Users/zachriggle/.pyenv/versions/3.7.4/lib/python3.7/pdb.py", line 352, in interaction
    self._cmdloop()
  File "/Users/zachriggle/.pyenv/versions/3.7.4/lib/python3.7/pdb.py", line 321, in _cmdloop
    self.cmdloop()
  File "/Users/zachriggle/.pyenv/versions/3.7.4/lib/python3.7/cmd.py", line 137, in cmdloop
    line = self.precmd(line)
  File "/Users/zachriggle/.pyenv/versions/3.7.4/lib/python3.7/pdb.py", line 402, in precmd
    marker = line.find(';;')
TypeError: argument should be integer or bytes-like object, not 'str'
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
> /Users/zachriggle/.pyenv/versions/3.7.4/lib/python3.7/pdb.py(402)precmd()
-> marker = line.find(';;')
(Pdb)
```
The installation instructions still links to the dev3 branch.
I am the packager of pwntools for Fedora. We had to drop the package for Fedora 31 due to the lack of Python 3 support. With Python 3 now supported, I am reviving the pwntools package. Rpmlint, a tool related to Fedora packaging identified some possible problems in pwntools.

First, it appears that Python 2 shebangs remain in some of the source files:

```
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/__init__.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/asm.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/checksec.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/constgrep.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/cyclic.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/debug.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/disablenx.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/disasm.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/elfdiff.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/elfpatch.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/hex.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/phd.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/shellcraft.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/template.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/unhex.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/commandline/update.py 644 /usr/bin/env python
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/context/__init__.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/term/readline.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/timeout.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/tubes/buffer.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/util/sh_string.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/elf/datatypes.py 644 /usr/bin/env python
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/encoders/i386/xor.py 644 /usr/bin/env python2
python3-pwntools.noarch: E: non-executable-script /usr/lib/python3.8/site-packages/pwnlib/encoders/mips/xor.py 644 /usr/bin/env python2
```

These should be removed or replaced with /usr/bin/python3, I think.

Second, there appear to be a number of zero-length files:

```
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/encoders/arm/alphanumeric/alphanumeric.py
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/aarch64/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/aarch64/android/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/aarch64/android/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/aarch64/freebsd/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/aarch64/linux/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/aarch64/linux/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/amd64/android/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/amd64/linux/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/arm/android/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/arm/linux/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/common/freebsd/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/common/linux/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/common/linux/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/i386/android/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/i386/cgc/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/i386/linux/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/mips/android/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/mips/linux/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/powerpc/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/powerpc/android/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/powerpc/android/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/powerpc/linux/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/powerpc/linux/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/thumb/android/syscalls/__doc__
python3-pwntools.noarch: E: zero-length /usr/lib/python3.8/site-packages/pwnlib/shellcraft/templates/thumb/linux/syscalls/__doc__
```
Writing a script and having p.send('data') be the last thing, without some sort of hanging command like pause() or p.interactive(), while being debugged with gdb will kill the process, but not say it. This ends up making gdb say the process died somehow without pwntools telling you that it killed it. I don't know if this is something to do with how Linux handles it or if gdb is keeping something alive after the kill which makes it impossible, but if pwntools kills the process, I believe it should say it. 
Added a method `maps` in class `process`, which returns the list of memory maps of the process with all the details in `/proc/<pid>/maps`. In order to parse and store the information of `/proc/<pid>/maps`, 2 new classes were included in `pwnlib.util.proc`: `MemoryMap` and `MemoryMapFlags`.

The functionality of `ELF.maps` was not changed to avoid breaking compatibility, however it could be modified to add the full information of the maps.

An example of the use of this new method:
```
>>> from pwn import *
>>> p = process('/bin/sh')
[x] Starting local process '/bin/sh'
[+] Starting local process '/bin/sh': pid 6676
>>> for map in p.maps():
...     print(map)
... 
55662876c000-556628770000 r--p 00000000 fe:01 9832286           /usr/bin/dash
556628770000-556628782000 r-xp 00004000 fe:01 9832286           /usr/bin/dash
556628782000-556628788000 r--p 00016000 fe:01 9832286           /usr/bin/dash
556628788000-55662878a000 r--p 0001b000 fe:01 9832286           /usr/bin/dash
55662878a000-55662878b000 rw-p 0001d000 fe:01 9832286           /usr/bin/dash
55662878b000-55662878d000 rw-p 00000000 00:00 0
55662968f000-5566296b0000 rw-p 00000000 00:00 0         [heap]
7f33ab50d000-7f33ab52f000 r--p 00000000 fe:01 9831037           /usr/lib/x86_64-linux-gnu/libc-2.28.so
7f33ab52f000-7f33ab677000 r-xp 00022000 fe:01 9831037           /usr/lib/x86_64-linux-gnu/libc-2.28.so
7f33ab677000-7f33ab6c3000 r--p 0016a000 fe:01 9831037           /usr/lib/x86_64-linux-gnu/libc-2.28.so
7f33ab6c3000-7f33ab6c4000 ---p 001b6000 fe:01 9831037           /usr/lib/x86_64-linux-gnu/libc-2.28.so
7f33ab6c4000-7f33ab6c8000 r--p 001b6000 fe:01 9831037           /usr/lib/x86_64-linux-gnu/libc-2.28.so
7f33ab6c8000-7f33ab6ca000 rw-p 001ba000 fe:01 9831037           /usr/lib/x86_64-linux-gnu/libc-2.28.so
7f33ab6ca000-7f33ab6d0000 rw-p 00000000 00:00 0
7f33ab6ea000-7f33ab6eb000 r--p 00000000 fe:01 9830423           /usr/lib/x86_64-linux-gnu/ld-2.28.so
7f33ab6eb000-7f33ab709000 r-xp 00001000 fe:01 9830423           /usr/lib/x86_64-linux-gnu/ld-2.28.so
7f33ab709000-7f33ab711000 r--p 0001f000 fe:01 9830423           /usr/lib/x86_64-linux-gnu/ld-2.28.so
7f33ab711000-7f33ab712000 r--p 00026000 fe:01 9830423           /usr/lib/x86_64-linux-gnu/ld-2.28.so
7f33ab712000-7f33ab713000 rw-p 00027000 fe:01 9830423           /usr/lib/x86_64-linux-gnu/ld-2.28.so
7f33ab713000-7f33ab714000 rw-p 00000000 00:00 0
7ffe65a69000-7ffe65a8a000 rw-p 00000000 00:00 0         [stack]
7ffe65be0000-7ffe65be3000 r--p 00000000 00:00 0         [vvar]
7ffe65be3000-7ffe65be5000 r-xp 00000000 00:00 0         [vdso]
```
We should try out the actions button some day, as Travis CI sometimes behaves ridiculous. It also suffers from checkpoint-less builds, so the caching is not as effective as it could be.