Add it in both `container$run` and in the `network$connect` methods
Several bad cases here:

```
  ports: An object mapping ports to an empty object in the
        form:

        {"<port>/<tcp|udp|sctp>": {}}
```

```
  env: A list of environment variables to set inside the
        container in the form ["VAR=value", ...]. A variable without
        = is removed from the environment, rather than to have an
        empty value.
```

enable the endpoint in docker_container with

```r
  self$resize <- docker_client_method(
    "container_resize", self,
    fix = fix_id)
```

and then test with

```r
test_that("resize", {
  d <- test_docker_client()
  nm <- rand_str(10, "stevedore_")
  x <- d$container$create("nginx", tty = TRUE, stdin = TRUE)

  on.exit({
    x$remove(force = TRUE)
  })

  x$start()
  i1 <- x$inspect()
  x$exec(c("tput", "-T", "xterm", "cols"), stream = FALSE)$output
  
  x$resize(h = 20, w = 40) # junk return value!
  i2 <- x$inspect()
  x$exec(c("tput", "-T", "xterm", "cols"), stream = FALSE)$output

  x$restart(t = 0)
  i3 <- x$inspect()
  x$exec(c("tput", "-T", "xterm", "cols"), stream = FALSE)$output
})
```

but nothing happens.

There's a lot more added to the package since they were last expanded
Would require reconfiguring the docker daemon to accept TLS connections but that's just a case of setting up daemon.json and restarting
harder than #12 but needs doing
https://github.com/shin-/dockerpy-creds
Getting windows support working probably requires implementing the contents of `R/http.R` to work with named pipes (likely this file will split into a transport layer - simple in the tcp case, fairly simple for unix socket and possibly complex for named pipes?).  It's possible that the `?fifo` function can do most of what we need