Running `fonttools varLib.interpolatable` tool on the set of master TTFs generated from NotoRashiHebrew-MM.glyphs source (from noto-source repo) does not detect this interpolation issue, where the starting point on a contour is different across master but the contours have the correct order and the same number and type of segments, leading to this rendering issue:

![ezgif-6-3a4fd6acd4c0](https://user-images.githubusercontent.com/6939968/72394789-41107200-36ec-11ea-9238-33d453fed4a8.gif)

Here are the files to repro:
[NotoRashiHebrew-interpolatable-issue.zip](https://github.com/fonttools/fonttools/files/4062492/NotoRashiHebrew-interpolatable-issue.zip)

Question (mainly for @behdad): was the interpolatable.py intentended to spot these sort of issues? If not, can/should it be extended to detect these?
I am trying to figure out how to correctly map my 2 axis, width and weight variable font. 

I assumed that the wght and wdth axes should be mapped to correspond with the css width and weight values, i.e. from and up to 100–900 for weight and 50–200 for width.

Now I'm not sure how to proceed here: the instances' weight values at the Condensed end differ to the Expanded end, just for example:

Condensed (100):
Light: 120
Regular: 450
Bold: 800

Normal (500):
Light: 100
Regular: 400
Bold: 900

Expanded (1000):
Light: 90
Regular: 350
Bold: 900

I wonder what the correct practise is for mapping it? Should I just take an axis that intersects with the default master and run it along there, even though it will be incorrect as you move across one of the axes.
The vhea table has a version 1.1 that changes the name and definition of the following fields:
- ascender becomes vertTypoAscender
- descender becomes vertTypoDescender
- lineGap becomes vertTypoLineGap

https://docs.microsoft.com/en-us/typography/opentype/spec/vhea

The new names are not available in Lib/fontTools/ttLib/tables/_v_h_e_a.py yet.
The method getName in Lib/fontTools/ttLib/tables/_n_a_m_e.py currently requires callers to pass in a platform-dependent language code. It would be nice if instead a BCP 47 language tag could be passed in. The module already has the dictionaries to map BCP 47 language tags to the language codes used for Windows and Mac. For the Unicode platform I’d suggest mapping language tag "und" to the language codes 0 and 0xFFFF (the latter is only mentioned in Apple documentation), and supporting other language tags only if an ltag table is present.
The dictionary _WINDOWS_LANGUAGES in Lib/fontTools/ttLib/tables/_n_a_m_e.py maps the Windows language code 0x1C3B to BCP 47 language tag 'sms'. According to
https://docs.microsoft.com/en-us/windows/win32/intl/language-identifier-constants-and-strings
0x1C3B stands for Southern Sami, which has language tag 'sma'.
Apparently the macOS bug has been fixed. I'm not sure when, but in 10.14.6 the workaround introduced in #1381 is not needed anymore. Can anybody confirm?
When exporting a DesignSpace + 1 OTF into a VF OTF, I get a `UnboundLocalError: local variable 'model' referenced before assignment` error. It’s not a good use scenario, but still, a corresponding TTF-based VF exports. 

### Files

[fsType02.~VF.zip](https://github.com/fonttools/fonttools/files/3976986/fsType02.VF.zip)


### Error log

```
INFO:fontTools.varLib:Axes:
[{'default': 400.0,
  'hidden': False,
  'labelNames': {'en': 'Weight'},
  'map': [(1.0, 1.0), (400.0, 400.0), (1000.0, 1000.0)],
  'maximum': 1000.0,
  'minimum': 1.0,
  'name': 'weight',
  'tag': 'wght'}]
INFO:fontTools.varLib:Internal master locations:
[{'weight': 400.0}]
INFO:fontTools.varLib:Internal axis supports:
{'weight': [1.0, 400.0, 1000.0]}
INFO:fontTools.varLib:Normalized master locations:
[{'weight': 0.0}]
INFO:fontTools.varLib:Index of base master: 0
INFO:fontTools.varLib:Building variable font
INFO:fontTools.varLib:Loading master fonts
INFO:fontTools.varLib:Generating fvar
INFO:fontTools.varLib:Generating avar
INFO:fontTools.varLib:No need for avar
INFO:fontTools.varLib:Building variations tables
INFO:fontTools.varLib:Generating MVAR
INFO:fontTools.varLib:Generating HVAR
INFO:fontTools.varLib:Merging OpenType Layout tables
Traceback (most recent call last):
  File "/Users/adam/bin/buildflvivf.command", line 30, in <module>
    build_variable_font(designspace_path)
  File "/Users/adam/bin/buildflvivf.command", line 23, in build_variable_font
    font, model, master_ttfs = varLib.build(designspace_path, finder)
  File "/Users/adam/Library/Python/3.7/lib/python/site-packages/fontTools/varLib/__init__.py", line 888, in build
    _add_CFF2(vf, model, master_fonts)
  File "/Users/adam/Library/Python/3.7/lib/python/site-packages/fontTools/varLib/__init__.py", line 691, in _add_CFF2
    merge_region_fonts(varFont, model, ordered_fonts_list, glyphOrder)
  File "/Users/adam/Library/Python/3.7/lib/python/site-packages/fontTools/varLib/cff.py", line 320, in merge_region_fonts
    cvData = merge_charstrings(glyphOrder, num_masters, top_dicts, model)
  File "/Users/adam/Library/Python/3.7/lib/python/site-packages/fontTools/varLib/cff.py", line 409, in merge_charstrings
    _add_new_vsindex(model, key, masterSupports, vsindex_dict,
UnboundLocalError: local variable 'model' referenced before assignment
```

### My code

```python
#!/usr/bin/env python3
#-*- coding: utf-8 -*-

from __future__ import unicode_literals, print_function
import os, os.path, sys
import logging
from fontTools import varLib, designspaceLib
logging.basicConfig(level=logging.INFO)
def build_variable_font(designspace_path):
    basedir = os.path.dirname(designspace_path)
    ds = designspaceLib.DesignSpaceDocument()
    ds.read(designspace_path)
    #print(help(ds))
    ufo_paths = [os.path.join(basedir, m.filename) for m in ds.sources]
    ufodir = os.path.dirname(ufo_paths[0])
    vfdir = os.path.join(basedir, 'master_ttf_interpolatable')
    vfext = 'ttf'
    if not os.path.exists(vfdir):
        vfdir = os.path.join(basedir, 'master_otf_interpolatable')
        vfext = 'otf'
    vfpath = os.path.splitext(designspace_path)[0] + '-VF.' + vfext
    finder = lambda s: s.replace(ufodir, vfdir).replace('.ufo', '.' + vfext)
    font, model, master_ttfs = varLib.build(designspace_path, finder)
    font.save(vfpath)

if len(sys.argv) > 1:
    designspace_path = sys.argv[1]
else: 
    designspace_path = raw_input("Please enter the path to the .designspace file or drag-drop it from Finder and press Enter:").lstrip().rstrip().replace("\\ ", " ").replace("\\~", "~")
build_variable_font(designspace_path)
```
As discussed in https://github.com/unified-font-object/ufo-spec/issues/78, this PR adds support for reading/writing a new `formatVersionMinor` element in `metainfo.plist` as well as a `formatMinor` attribute to the `glyph` element of the GLIF data structure.
The idea is to be able to add new data to the UFO spec without breaking existing implementations, (which should be able to ignore this new data).

I marked this as WIP as I still need to add tests, but I'd like to gather initial comments.
When reading axis designspaces (in axis or in location in sources and instances), the designspace always returns the name of the axis, but libraries sometimes ask the axis tag (like for extracting a static instance), so you always had to store tag and name in a dict and read the dict to run function. Sometimes it's confusing. Also when you give {"weight":15.0} instead of {"wght":15.0} to the extractInstance function it doesn't warn you the "weight" is not a existing tag, or that you gave a name and not a tag.
See https://github.com/fonttools/fonttools/pull/1767

The requirements for duplicate substitutions could be relaxed a little to be more compatible with `makeotf` and existing font source data.