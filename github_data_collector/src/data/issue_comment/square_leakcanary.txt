### **[reproduce bug]**
- Disable ContentProvider `leakcanary.internal.AppWatcherInstaller$MainProcess`

- Use `fun manualInstall` in `AppWatcher `

 Leakcanary will not work by manualInstall in this situation.

### **[bug reason]**

In [AppWacther.kt](https://github.com/square/leakcanary/blob/master/leakcanary-object-watcher-android/src/main/java/leakcanary/AppWatcher.kt)
```@Volatile
  var config: Config = if (isInstalled) Config() else Config(enabled = false)
    set(newConfig) {
      SharkLog.d { "AppWatcher setConfig" }
      val previousConfig = field
      field = newConfig
      logConfigChange(previousConfig, newConfig)
    }
```

Decompiled it to AppWatcher.java

```
   static {
      AppWatcher var0 = new AppWatcher();
      INSTANCE = var0;
      config = var0.isInstalled() ? new AppWatcher.Config(false, false, false, false, 0L, 31, (DefaultConstructorMarker)null) : new AppWatcher.Config(false, false, false, false, 0L, 30, (DefaultConstructorMarker)null);
   }
```

More source code,`isInstalled` related source code:

```
/** @see [manualInstall] */
  val isInstalled
    get() = InternalAppWatcher.isInstalled
```

```
internal object InternalAppWatcher {

  val isInstalled
    get() = ::application.isInitialized
```

We can see the fact that `config` is in the static block code in the class which runs before static method, and it's related `isInstalled` need to be correct. 

So the reason is when calling` AppWatcher.munalInstall`,  the static block code is excuted, but application is not set to InternalAppWatcher already, so `isInstalled` is not ready and config is not enabled.

### **[Solution]**
Add another [`AppWactherManualInstaller`](https://github.com/square/leakcanary/pull/1726/commits/ec63aa514e68863b8a0db3c574dff6f653a19e5d#diff-8fa07fcdf653e2efeabdefd69f12830f) to meet manual install need.

When need to manual install leakcanary in runtime, call `manualInstall` in this manual installer, application is already correctly set to the `InternalAppWatcher`, and then AppWatcher config will work correctly.
See: https://github.com/gradle/wrapper-validation-action
### Description

We have an automation tests that run monkey tests on our debuggable app. The app crashed with this stack trace:

```
Short Msg: java.lang.IllegalStateException
Long Msg: java.lang.IllegalStateException: Hprof file missing due to: [Hprof directory cleared] /.....[_our app path_]/files/leakcanary/2020-01-11_17-08-58_093.hprof
Build Label: Android/sdk_google_phone_x86/generic_x86:6.0/MASTER/5525988:userdebug/test-keys
Build Changelist: 5525988
Build Time: 1556821263000
java.lang.IllegalStateException: Hprof file missing due to: [Hprof directory cleared] /.....[_our app path_]/files/leakcanary/2020-01-11_17-08-58_093.hprof
	at leakcanary.internal.HeapAnalyzerService.onHandleIntentInForeground(HeapAnalyzerService.kt:50)
	at leakcanary.internal.ForegroundService.onHandleIntent(ForegroundService.kt:55)
	at android.app.IntentService$ServiceHandler.handleMessage(IntentService.java:66)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:148)
	at android.os.HandlerThread.run(HandlerThread.java:61)
```

### Steps to Reproduce

it's not reproducible since monkey tests are random.

**Expected behavior:** app not to crash even if there is a memory leak

### Version Information

* LeakCanary version: com.squareup.leakcanary:leakcanary-android:2.0
* Android OS version: Android 6
* Gradle version: 3.2.1

### Additional Information

Any additional information, configuration or data that might be necessary to reproduce the issue.

### Description

Not working in my project, for resource not found in dex?

### Steps to Reproduce


1. open some actitivity
2.  dump the heap
3. crash

### Version Information

* LeakCanary version: 2.0, 2.1
* Android OS version: Android 10
* Gradle version: gradle-5.6.2,  android build plugin 3.4.2


### leakcannery log 
D/LeakCanary: Already scheduled retained check, ignoring (found new object retained)
D/LeakCanary: Already scheduled retained check, ignoring (found new object retained)
D/LeakCanary: Checking retained object because app became invisible
D/LeakCanary: Found 5 retained references, dumping the heap
D/LeakCanary: Analysis in progress, working on: PARSING_HEAP_DUMP
D/LeakCanary: Analysis in progress, working on: EXTRACTING_METADATA
D/LeakCanary: Analysis in progress, working on: FINDING_RETAINED_OBJECTS
D/LeakCanary: Analysis in progress, working on: FINDING_PATHS_TO_RETAINED_OBJECTS


it seems to be work but do not have  R field in dex?
### Description

Shark-CLI 2.0 does not work on Windows 8.1

### Steps to Reproduce

Download Shark-CLI zip file and run shark-cli.bat 

Run command: shark-cli.bat analyze-process <package_name>

Exception error:
Exception in thread "main" java.lang.IllegalThreadStateException: process has not exited
        at java.lang.ProcessImpl.exitValue(Unknown Source)
        at shark.MainKt.runCommand(Main.kt:221)
        at shark.MainKt.dumpHeap(Main.kt:153)
        at shark.MainKt.main(Main.kt:32)

**Expected behavior:** I would like run shark-cli on Windows systems.

### Version Information

* LeakCanary version: 2.0
* Android OS version: Android 10
* Gradle version:

### Additional Information
NA
This is a prototype, not meant to be merged as is.

This prototype uses Calcite and is largely inspired from https://github.com/vlsi/mat-calcite-plugin . I couldn't find much documentation on how to build a new custom adapter for Calcite so it's a lot of poking at random. The result set is rendered with https://github.com/JakeWharton/picnic .

```
Enter command [help]:
sql SELECT this, mDestroyed FROM "com.example.leakcanary.MainActivity"

┌─────────────────────────────────┬────────────┐
│ this                            │ mDestroyed │
├─────────────────────────────────┼────────────┤
│ instance MainActivity@316148848 │ true       │
├─────────────────────────────────┼────────────┤
│ instance MainActivity@316149568 │ true       │
├─────────────────────────────────┼────────────┤
│ instance MainActivity@316672544 │ false      │
├─────────────────────────────────┼────────────┤
│ instance MainActivity@316763800 │ true       │
├─────────────────────────────────┼────────────┤
│ instance MainActivity@316808744 │ true       │
└─────────────────────────────────┴────────────┘
```

See #1708
Build something similar to Mat OQL in SharkCLI

Calcite was recommended. Protype ideas based on https://github.com/vlsi/mat-calcite-plugin
* Requires downloading the APK and unzipping it to extract mapping.txt
* Should be an option, off by default
The command will take an obfuscated heap dump and an obfuscation file as input and output a new heap dump where class names have been deobfuscated. Command name should probably be `deobfuscate-hprof`
Still need to iterate a bit on this, but this idea started from the work required for Android TV, where notifications cannot be used, and we had to come up with alternate ways to notify the user.

This brings up the general idea of a new callback API to be notified of various events happening, with a default implementation that is the current behavior.

Events (WIP):

* RetainedObjects, with count of retained objects
* DumpingHeap (used to display the toast)
* HeapAnalysisProgress (should it provide an enum value for each step? one subclass per step?)
* HeapAnalyzed (maybe separate success and failure?). Needs to provide extra information that is currently used to display notifications (count of new vs existing leaks)

We would also have to deprecate `onHeapAnalyzedListener` (but keep its API and keep it working correctly). We'll move this field to the end of Config (that breaks binary compatibility which is generally not an issue for LeakCanary, apps are expected to recompile on update).
