I noticed that on_call method was in the code but it didn't come in the bundled version.  By bumping the version I want to make rubygems.org look for the newest stuff.
Does anyone know what parts of this gem will stop working (if any) when Twitter changes the stream API in August? The details are [here](https://techcrunch.com/2018/04/06/twitter-delays-api-change-that-could-break-tweetbot-twitterific-etc/) and [here](http://apps-of-a-feather.com/). Thanks!
Hi,

I imagine this is because of the new 280 limit. Result looks like:
`Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam et sem dignissim, vestibulum mauris et, viverra maurâ€¦ https://t.co/0ov59XuDDD`

Is that a twitter api issue?

UPD:
Tweets need to be fetched in extended mode to fix this. See https://github.com/sferik/twitter/issues/880

When I call the `stop_stream` function on a user stream after receiving an `on_reconnect`, it fails to stop the stream, and I continue to receive the `on_connect` messages. It somehow fails to stop the stream.

    class TwitterUserStream
      def initialize(user_id, access_token, access_token_secret)
        @user_id = user_id
        @access_token = access_token
        @access_token_secret = access_token_secret
      end

      def begin_stream
        credentials = {
          consumer_key: ConsumerKey,
          consumer_secret: ConsumerSecret,
          oauth_token: @access_token,
          oauth_token_secret: @access_token_secret
        }

        @client = TweetStream::Client.new(credentials)
        @client.on_reconnect do |timeout, retries|
          @client.stop_stream
        end

        @client.userstream
      end
    end
For now rubocop dependency was set to 'at least `0.32.1` but as rubocop is getting stricter it will just fail if you will bundle and execute rubocop (although nothing changed).

However, I fixed some complains of rubocop and set it to `0.46`.

I tried to update the twitter gem as well to fix #202 but somehow travis can't build rubinious at the moment?

PS: your rubocop rules are pretty weird. Hashrocket style in 2016? ðŸ˜‰ 
First of all: tweetstream is awesome!
I love it.

However, currently [it depends on an old version of the twitter gem](https://github.com/tweetstream/tweetstream/blob/master/tweetstream.gemspec#L20). The old twitter gem version [depends on json 1.8](https://github.com/sferik/twitter/blob/v5.12.0/twitter.gemspec#L12). And [json 1.8 isn't compatible to ruby 2.4](https://github.com/flori/json/issues/303).

However, newer versions of the twitter gem have [no dependency to the json gem anymore](https://github.com/sferik/twitter/blob/master/twitter.gemspec) so increasing the twitter gem version may help.
By using Twitter User Streams on iOS, I'm aware that sometimes it passes a block of data which isn't the full data of a message. Thus I had to implement a system whereby if the data wasn't complete, it'd hold onto it until the next block came, and then append it, only reading it as full JSON once it detected the end of the data and a complete JSON structure.

I'm not too familiar with Ruby - I was wondering if TweetStream implements this same logic, or if perhaps this isn't a problem when not using an iOS streaming technology?
@client  = TweetStream::Client.new

puts "[STARTING] bot..."
@client.userstream() do |status| 
  # Cada status recebido pelo User Stream serÃ¡ manipulado dentro desse bloco
  puts status.text  # print do texto do tweet
end

I've setup a simple test app which has this code. It starts 2 user streams for separate users, and when the second user receives a message, it stops their userstream. Stopping an individual userstream while keeping the others alive is a critical part of my app:

``` Ruby
Thread.new do
    first_credentials = {
        consumer_key: 'ABC',
        consumer_secret: 'DEF',
        oauth_token: 'GHI',
        oauth_token_secret: 'JKL'
    }

    first_client = TweetStream::Client.new(first_credentials)

    first_client.on_direct_message do |direct_message|
        puts 'direct message: ' + direct_message.text
    end

    first_client.userstream
end

Thread.new do
    second_credentials = {
        consumer_key: 'ABC',
        consumer_secret: 'DEF',
        oauth_token: 'MNO',
        oauth_token_secret: 'PQR'
    }

    second_client = TweetStream::Client.new(second_credentials)

    second_client.on_direct_message do |direct_message|
        puts 'another direct message: ' + direct_message.text
        second_client.stop
    end

    second_client.userstream
end
```

I test this by sending a few messages to the first client, which all work. Then a message to the second client, which works, and then it calls `stop` to stop the connection. Another message to the second client doesn't get printed, as expected, but nor do any messages to the first client, as it's userstream has also been stopped.
