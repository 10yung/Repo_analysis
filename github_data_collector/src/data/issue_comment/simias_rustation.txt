Hi,

Here is the work in progress to port the full emulator from rustc_serialize to serde. It is still very rough on the edges!
I had to duplicate the "big array" trick for the `Box<[T; XXX]>` type. I'm not sure if there is a cleaner and more general solution.

This does not compile yet, what I did is mostly search and replace.

Don't be in a hurry to check this ;-)

Remaining:
```
cdrom::AsyncResponse
gpu::Callback
gpu::Gp0Handler
mdec::CommandHandler
```


At the time the savestate architecture was first implemented [Serde](https://serde.rs/) was not yet stable. Since then it's become the de-facto serialization library for Rust, superseeding the hacky RustcEncodable/RustcEncodable.

While there's no emergency it'd be nice to move to Serde now that it's stabilized. It shouldn't be too difficult but it's quite a big change which impacts both rustation and rustation-libretro. In particular the current binary serializer would have to be ported (or rewritten). I'm not sure how straightforward that would be.
Apparently the current GTE flag mask is bogus: https://github.com/simias/rustation/blob/master/src/cpu/gte/mod.rs#L440

It should be `0x7ffff000`. I need to write a test to trigger the inaccuracy and fix it.
I have the Psyq PSX(PS1) SDK installed would those C / C++ headers be useful to help implementing some things in Rust from the actual Playstation?

I even found the headers that contains information about things like loading / saving to / from memory cards. It could be helpful.

Also I wonder how quicksaves was done in emulators like ePSXe. I always wanted an Open source PSX emulator though.

(funny how the games on the PSX was created using C and/or C++ (Although not modern ones))

`C:\psyq\include\KERNEL.H`

```c
#ifndef _KERNEL_H
#define _KERNEL_H

/*
 * File:kernel.h 	Rev. 3
*/
/*
 * $PSLibId: Run-time Library Release 4.6$
 */
#ifndef _R3000_H
#include <r3000.h>
#endif

#ifndef _ASM_H
#include <asm.h>
#endif

/* don't change these macros and structures which is refereced in kernel code */ 

#define DescMask 	0xff000000
#define DescTH 		DescMask
#define DescHW   	0xf0000000
#define DescEV   	0xf1000000
#define DescRC   	0xf2000000
#define DescUEV   	0xf3000000	/* User event */
#define DescSW   	0xf4000000	/* BIOS */

#define HwVBLANK	(DescHW|0x01)	/* VBLANK */
#define HwGPU		(DescHW|0x02)	/* GPU */
#define HwCdRom		(DescHW|0x03)	/* CDROM Decorder */
#define HwDMAC		(DescHW|0x04)	/* DMA controller */
#define HwRTC0		(DescHW|0x05)	/* RTC0 */
#define HwRTC1		(DescHW|0x06)	/* RTC1 */
#define HwRTC2		(DescHW|0x07)	/* RTC2 */
#define HwCNTL		(DescHW|0x08)	/* Controller */
#define HwSPU		(DescHW|0x09)	/* SPU */
#define HwPIO		(DescHW|0x0a)	/* PIO */
#define HwSIO		(DescHW|0x0b)	/* SIO */

#define HwCPU		(DescHW|0x10)	/* Exception */
#define HwCARD		(DescHW|0x11)	/* memory card */
#define HwCARD_0	(DescHW|0x12)	/* memory card */
#define HwCARD_1	(DescHW|0x13)	/* memory card */
#define SwCARD		(DescSW|0x01)	/* memory card */
#define SwMATH          (DescSW|0x02)	/* libmath */

#define RCntCNT0     	(DescRC|0x00)  	/* display pixel */
#define RCntCNT1  	(DescRC|0x01)  	/* horizontal sync */
#define RCntCNT2  	(DescRC|0x02)  	/* one-eighth of system clock */
#define RCntCNT3  	(DescRC|0x03)  	/* vertical sync target value fixed to 1 */

#define RCntMdINTR	0x1000
#define RCntMdNOINTR	0x2000
#define RCntMdSC	0x0001
#define RCntMdSP	0x0000
#define RCntMdFR	0x0000
#define RCntMdGATE	0x0010

#define EvSpCZ		0x0001		/* counter becomes zero */
#define EvSpINT		0x0002		/* interrupted */
#define EvSpIOE		0x0004		/* end of i/o */
#define EvSpCLOSE	0x0008		/* file was closed */
#define EvSpACK		0x0010		/* command acknowledged */
#define EvSpCOMP	0x0020		/* command completed */
#define EvSpDR		0x0040		/* data ready */
#define EvSpDE		0x0080		/* data end */
#define EvSpTIMOUT      0x0100          /* time out */
#define EvSpUNKNOWN     0x0200          /* unknown command */
#define EvSpIOER	0x0400		/* end of read buffer */
#define EvSpIOEW	0x0800		/* end of write buffer */
#define EvSpTRAP       	0x1000          /* general interrupt */
#define EvSpNEW		0x2000		/* new device */
#define EvSpSYSCALL	0x4000		/* system call instruction */
#define EvSpERROR	0x8000		/* error happned */
#define EvSpPERROR	0x8001		/* previous write error happned */
#define EvSpEDOM        0x0301		/* domain error in libmath */
#define EvSpERANGE      0x0302		/* range error in libmath */

#define EvMdINTR	0x1000
#define EvMdNOINTR	0x2000

#define EvStUNUSED    	0x0000
#define EvStWAIT    	0x1000
#define EvStACTIVE    	0x2000
#define EvStALREADY   	0x4000

#define TcbMdRT		0x1000		/* reserved by system */
#define TcbMdPRI	0x2000		/* reserved by system */

#define TcbStUNUSED	0x1000
#define	TcbStACTIVE	0x4000

#if defined(_LANGUAGE_C)||defined(LANGUAGE_C)||defined(_LANGUAGE_C_PLUS_PLUS)||defined(__cplusplus)||defined(c_plusplus)
struct ToT {
	unsigned long *head;
	long size;
};

struct TCBH {
	struct TCB *entry;	/* NULL */
	long flag;
};

struct TCB {
	long status;
	long mode;
	unsigned long reg[NREGS];	/* never change the offset of this */
	long system[6];			/* reserved by system */
};

struct EvCB {
	unsigned long desc;	
	long status;
	long spec;
	long mode;
	long (*FHandler)();
	long system[2];			/* reserved by system */
};


struct EXEC {                   
        unsigned long pc0;      
        unsigned long gp0;      
        unsigned long t_addr;   
        unsigned long t_size;   
        unsigned long d_addr;   
        unsigned long d_size;   
        unsigned long b_addr;   
        unsigned long b_size;   
	unsigned long s_addr;
	unsigned long s_size;
	unsigned long sp,fp,gp,ret,base;
};


struct XF_HDR {
	char key[8];
	unsigned long text;
	unsigned long data;
	struct EXEC exec;
	char title[60];		/* "PlayStation(tm) Executable A1" */
};


struct DIRENTRY {
	char name[20];
	long attr;
	long size;
	struct DIRENTRY *next;
	long head;
	char system[4];
};


extern struct ToT SysToT[32];

extern long SysClearRCnt[];

#ifndef NULL
#define NULL (0)
#endif

#if defined(_LANGUAGE_C)||defined(LANGUAGE_C)
#define delete  erase
#endif /* LANGUAGE_C */

#endif /* LANGUAGE_C||_LANGUAGE_C_PLUS_PLUS||__cplusplus||c_plusplus */

#endif /* _KERNEL_H */


```

But yeah maybe the psyq can actually help finish the emulator up to become as good as the original Playstation.

```
  Compiling gl v0.5.2
   Compiling rustation-retro v0.1.0 (file:///tmp/buildd/libretro-rustation-0.0.0+git20161116.562d367~1)
src/libretro.rs:785:33: 785:56 error: unresolved name `panic::AssertUnwindSafe` [E0425]
src/libretro.rs:785     let r = panic::catch_unwind(panic::AssertUnwindSafe(|| {
                                                    ^~~~~~~~~~~~~~~~~~~~~~~
src/libretro.rs:785:33: 785:56 help: run `rustc --explain E0425` to see a detailed explanation
src/libretro.rs:785:13: 785:32 error: unresolved name `panic::catch_unwind` [E0425]
src/libretro.rs:785     let r = panic::catch_unwind(panic::AssertUnwindSafe(|| {
                                ^~~~~~~~~~~~~~~~~~~
src/libretro.rs:785:13: 785:32 help: run `rustc --explain E0425` to see a detailed explanation
src/libretro.rs:795:8: 795:18 error: the type of this value must be known in this context
src/libretro.rs:795     if r.is_err() {
                           ^~~~~~~~~~
error: aborting due to previous error
Could not compile `rustation-retro`.

To learn more, run the command again with --verbose.
debian/rules:14: recipe for target 'override_dh_auto_build' failed
```

* [build log](http://sprunge.us/ONVA)
* [debian files](https://github.com/ProfessorKaos64/LibreGeek-Packaging/blob/brewmaster/retroarch/libretro-rustation/debian)
This a project I've been thinking about for a while but I have so much stuff on my todo list at the moment that I can't imagine tackling it anytime soon. I would like an external tool that could take PlayStation GPU command logs and lets me see what individual commands draw. I'd also like to be able to navigate the commands, go back in time etc... That would be a huge time saver when tracking down certain graphical bugs.

I'm posting this here in case somebody else wants to give it a try, it's a relatively simple, well bounded and, in my opinion, fun project for somebody who likes making user interfaces and wants to try their hands at emulation. It's not super performance-critical either so you can really use the language and environment of your choice (although portability is strongly encouraged...).

This tool would be useful in the development of Rustation but it need not be tied to it and could be used for other emulators or even a real console as long as you're able to dump incoming GPU command words.
# Context

From a high level perspective the PlayStation GPU is fairly simple. It has 1Megabyte of VRAM laid out as a 1024x512 16bits-per-pixel video buffer. The GPU draws lines, triangles and quadrilaterals to this buffer and then sends a portion of it to the video output.

In order to control it the GPU has two 32bit registers called `GP0` and `GP1`. The CPU and/or DMA sends command words through those registers and the GPU executes them.

Here's the `GP0` decoding function in rustation https://github.com/simias/rustation/blob/master/src/gpu/mod.rs#L592-L659

And here's `GP1`'s: https://github.com/simias/rustation/blob/master/src/gpu/mod.rs#L1220-L1252

No$ is also a good source for understanding the GPU and its commands: http://problemkaputt.de/psx-spx.htm#graphicsprocessingunitgpu

You can see that `GP0` commands are mainly draw commands like "draw a triangle at these coordinates", "draw a line at these coordinates", "fill this rectangle in VRAM with this color" etc... It's relatively straightforward.

`GP1` on the other hand is more for configuration, things like turning the video output on or off or configuring which part of the VRAM is displayed on the screen.
# The problem

My current problem is that linking a visual glitch on the output with an actual individual GPU command in the emulator can be very tedious and time consuming without any kind of tool to assist me.

For instance [here's the complete log of GP0 and GP1 commands during the first few seconds after boot](https://svkt.org/~simias/rustation/gpu-log.txt).

That's 19162 individual command words making up 2756 GP0 and 2282 GP1 commands. And all it does is draw [the little animation of the "Sony Computer Entertainment" logo on boot](https://www.youtube.com/watch?v=zIA0kaGFIhQ).

For instance if you dig into the log you'll find the following sequence:

```
GP0 0x300000b2
GP0 0x00f101bd
GP0 0xca008cb2
GP0 0x00740140
GP0 0xca008cb2
GP0 0x016e0140
```

This draws one of the shaded triangles. Took me a little while to extract it out. The general form of this command is:

```
GP0 0x30BBGGRR <- 0x30 is the command opcode, followed by the 24bit RGB color of the 1st vertex
GP0 0xYYYYXXXX <- 1st vertex X and Y coordinates
GP0 0xXXBBGGRR <- 2nd vertex 24bit RGB color (high byte is ignored)
GP0 0xYYYYXXXX <- 1st vertex X and Y coordinates
GP0 0xXXBBGGRR <- 3rd vertex 24bit RGB color (high byte is ignored)
GP0 0xYYYYXXXX <- 3rd vertex X and Y coordinates
```

Now you can go back to the previous command and manually decode it if you want. As you can see this is pretty time consuming.

Now here's an actual bug I'm trying to fix right now:

![retroarch-0524-013225](https://cloud.githubusercontent.com/assets/7925386/15487664/9024e1de-214f-11e6-8e0a-949c0b2d7dfe.png)

Crash's shadow on the ground is made up of two triangles, and you can see that one of them has the wrong transparency applied.

In order to fix this I'd like to be able to track the individual draw command responsible for this particular triangle and figure out why I don't interpreted it correctly. Isolating a single command from the thousands of calls making up each Crash Bandicoot frame is very tedious. Parsing [the log I posted above](https://svkt.org/~simias/rustation/gpu-log.txt) is already non-trivial and it's only drawing a dozen triangles in a simple animation.

What I'd like is a visual tool that would take this command stream and show me what they do directly on the screen. [No$](http://problemkaputt.de/psx.htm) seems to have something like that already:

![psxdebug](https://cloud.githubusercontent.com/assets/7925386/15521840/57e1d9e8-220e-11e6-9304-e913b826a9c7.gif)

You can see that the "Vram Viewer" window has a list of commands at the upper right and seems to highlight the selected quadrilateral in the main view. Using a tool like this I could track down the bogus command in my Crash Bandicoot screenshot in seconds. This looks like a great tool but unfortunately it's closed source as far as I know.

So if somebody wants to give this a try or wants more precisions don't hesitate to ask for my help.

As far as I know nobody has attempted to LLE the PlayStation CD controller. It would be quite performance intensive and an HLE implementation is probably good enough 99.9% of the time but if somebody wants to give it a try it could be interesting for accuracy's sake.

No$ managed to dump some of the ROMs of the 8bit controller: http://www.psxdev.net/forum/viewtopic.php?f=70&t=557

He also has many details about how this controller works in his spec. That could be a starting point.

I'm developing a prototype in the [subpixel](https://github.com/simias/rustation/tree/subpixel) branch. More details to come...

Vulkan has been released. Vulkan would be great because it has the same compatibility between desktop and mobile.

https://www.khronos.org/registry/vulkan/specs/1.0-wsi_extensions/xhtml/vkspec.html#introduction
https://www.khronos.org/registry/vulkan/specs/1.0/apispec.html
https://github.com/KhronosGroup
https://www.khronos.org/news/press/khronos-releases-vulkan-1-0-specification
https://www.khronos.org/registry/vulkan/
https://github.com/SaschaWillems/Vulkan
https://github.com/vlj/rpcs3/tree/vulkan
https://github.com/benvanik/xenia/commit/77a321135ed1b3761aac2834a74d89020c91626c
https://developer.nvidia.com/vulkan-android#samples
https://developer.nvidia.com/opengl-vulkan

http://developer.download.nvidia.com/assets/gameworks/downloads/secure/Vulkan_Beta_Drivers/GL_NV_draw_vulkan_image.txt?autho=1455930702_6e20c053df9f561ee2dfe9118e4d0421&file=GL_NV_draw_vulkan_image.txt

http://developer.download.nvidia.com/assets/gameworks/downloads/secure/Vulkan_Beta_Drivers/VK_NV_glsl_shader.txt?autho=1455930728_9ec8a4f1844d5e3e7d7600905fbd07cb&file=VK_NV_glsl_shader.txt

https://github.com/nvpro-samples
https://github.com/McNopper/Vulkan
https://github.com/nvpro-pipeline/vkcpp
https://github.com/john-chapman/VulkanTest
https://github.com/mlaveaux/VulkanRenderer
https://github.com/pld-linux/vulkan-loader
https://github.com/FaultyRAM/vulkan-sys
https://github.com/kainino0x/rust-vulkan
https://github.com/LunarG/VulkanSamples
https://github.com/KhronosGroup/Khronosdotorg/blob/master/api/vulkan/resources.md
https://github.com/tomaka/vulkano

PS2 IOP is PS1 CPU with GTE and MDEC. Right now pcsx2 devs are fixing IOP emulation in PCSX2 based on hardware tests and planning to add a recompiler. Perhaps you could copy that recompiler from PCSX2 to rustation  in the future? Also check hardware tests.

https://github.com/PCSX2/pcsx2/commit/135cdfca469862d9495492a54964db0a6cd991fa
