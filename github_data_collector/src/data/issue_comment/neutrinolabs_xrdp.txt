This PR addresses the warnings generated by cppcheck for `xrdp_pcsc.c` mentioned in #1473

The first of these relates to this code following line 1067:-
```
    // TODO figure out why recv pci does not work
    if (1 || (pioRecvPci == 0) || (pioRecvPci->cbPciLength < 8))
    {
        got_recv_pci = 0;
        .  . .
    }
    else
    {
        got_recv_pci = 1;
        .  .  .
        /* pioRecvPci dereferenced */
    }
    . . .
    if (got_recv_pci == 0)
    {
        . . .
    }
    else
    {
        /* pioRecvPci dereferenced again */
    }
 ```

The `1 ||` in the if statement was added in commit 9f8d3697472ce8dc6353172e9a471568d1aec45e for XRDP 0.8.0 and has the effect of disabling the recv pci functionality. As a result, pioRecvPci is never dereferenced. However cppcheck is not clever enough to pick up that `got_recv_pci` is being used as a discriminant for the second block, and so generates the warning.

I've restructured the code so that `got_recv_pci` is used as a discriminant for both blocks:-
```
    got_recv_pci = (pioRecvPci != NULL) && (pioRecvPci->cbPciLength >= 8);
    // TODO figure out why recv pci does not work
    got_recv_pci = 0;
    if (got_recv_pci == 0)
    {
        .  . .
    }
    else
    {
        .  .  .
        /* pioRecvPci dereferenced */
    }
    . . .
    if (got_recv_pci == 0)
    {
        . . .
    }
    else
    {
        /* pioRecvPci dereferenced again */
    }
 ```

And this time cppcheck can figure out the traceability. The TODO still applies, but can be removed when addressed by removing the TODO command and following line.

The second seems more straightforward. `memcpy` can be invoked with a NULL source pointer, but in this case the copy length is zero. This is fine, but cppcheck can't see it. The code change has an explicit codepath for a NULL source pointer which doesn't invoke `memcpy`.

So despite the cppcheck warnings, no actual bugs have been found here.

On a 1920x1080x32bpp display shared over a ~300mbit 802.11ac wifi network, the performance of `xrdp` is kind of lackluster with the default TCP send buffer size of 32768 bytes.

The defaults set in `xrdp.ini` are as follows:
```
[Globals]
#tcp_send_buffer_bytes=32768
#tcp_recv_buffer_bytes=32768
tcp_nodelay=true
tcp_keepalive=true
```

When uncommented, `xrdp` uses these values to set the send and recieve buffer sizes.

This results in send/recieve buffers of 65536 bytes each, respectively, since the (Linux) kernel doubles the value requested ([tcp man page](http://man7.org/linux/man-pages/man7/tcp.7.html)). Besides being printed in the log output, this can be independently confirmed by
```
$ ss -lnm sport 3389
Netid                State                 Recv-Q                Send-Q                                 Local Address:Port                                 Peer Address:Port                Process                
tcp                  LISTEN                0                     2                                            0.0.0.0:3389                                      0.0.0.0:*                   
	 skmem:(r0,rb65536,t0,tb65536,f0,w0,o0,bl0,d0)
```

I noticed that `xrdp` wasn't even close to saturating the link speed, which is what prompted this investigation.

By setting `tcp_send_buffer_bytes` to something a little more generous (e.g., `4194304`):
```
[Globals]
tcp_send_buffer_bytes=4194304
```

And increase the corresponding `sysctl` limit to 2x the requested buffer size:
```
$ sudo sysctl -w net.core.wmem_max=8388608
```

We get much improved performance (seamless window dragging, smooth scrolling, full screen FHD video playback).

I think this should be written somewhere - maybe in the wiki, in the man pages, or briefly mentioned as a comment in the stock `xrdp.ini`.

Hope this helps someone.
Running XRDP 0.9.11 on CentOS 7 I am having issues with pam_namespace.so. Basically, as soon as I enable pam_namespace.so in /etc/pam.d/xrdp-sesman XRDP sessions (both Xorg and XVNC) fail with a black screen. After about 5 minutes or so this is what I see in /var/log/xrdp.log:

> [20200116-22:34:10] [DEBUG] xrdp_wm_log_msg: connection problem, giving up
> [20200116-22:34:10] [DEBUG] Closed socket 19 (AF_UNIX)
> [20200116-22:34:10] [DEBUG] xrdp_wm_log_msg: some problem
> [20200116-22:34:10] [DEBUG] xrdp_mm_module_cleanup
> [20200116-22:34:10] [DEBUG] Closed socket 18 (AF_INET 127.0.0.1:44860)

Uncommenting the pam_namespace.so line in my xrdp-sesman pam.d configfile and restarting XRDP immediately restores full XRDP functionality save for polyinstantiation, which is required on this multi-user Linux terminal server. It is working great when users log in via our thin clients using XDMCP and XDM and it's also working great for SSH logins, so I know for sure it's not a PAM issue per se but must be XRDP-related somehow.

I know that it is at least partly working because I can see the proper .X11-unix and .X10-lock files created in _/tmp-inst/system_u:object_r:tmp_t:s0_martin/_ instead of _/tmp_ with pam_namespace.so enabled. However, when logging in from a thin client via XDM or via SSH from a remote machine the polyinstantiated tmp-directory is a different one: _/tmp/system_u:object_r:tmp_t:s0-s0:c0.c1023_martin_. Not sure if that makes a difference or not but I thought I'd mention it either way.

My configuration:

```
[ root @ ebdlsa001 ] ~ > cat /etc/pam.d/xrdp-sesman 
#%PAM-1.0
# Generic Fedora config
auth       include      password-auth
auth	   required		pam_env.so
account    include      password-auth
password   include      password-auth
session    required     pam_selinux.so close
session    required     pam_selinux.so open
session    required     pam_loginuid.so
session    required     pam_namespace.so
session    include       password-auth
```

```
[ root @ ebdlsa001 ] ~ > ls -Z /usr/sbin/xrdp*
-rwxr-xr-x. root root system_u:object_r:bin_t:s0       /usr/sbin/xrdp
-rwxr-xr-x. root root system_u:object_r:bin_t:s0       /usr/sbin/xrdp-chansrv
-rwxr-xr-x. root root system_u:object_r:bin_t:s0       /usr/sbin/xrdp-sesman
```

```
[ root @ ebdlsa001 ] ~ > cat /etc/security/namespace.conf 
# /etc/security/namespace.conf
#
# See /usr/share/doc/pam-*/txts/README.pam_namespace for more information.
/tmp     /tmp-inst/       	level      root,adm
/var/tmp /var/tmp/tmp-inst/   	level      root,adm
```

```
[ root @ ebdlsa001 ] ~ > cat /etc/sysconfig/selinux 
# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
SELINUX=permissive
# SELINUXTYPE= can take one of three two values:
#     targeted - Targeted processes are protected,
#     minimum - Modification of targeted policy. Only selected processes are protected. 
#     mls - Multi Level Security protection.
SELINUXTYPE=targeted
```

Any hints?
This PR addresses the cppcheck warning generated by cppcheck for `xrdp/xrdp_{xfs,fuse}.c` and `devredir.c` mentioned in #1473

The warning in `chansrv_fuse.c` generated by cppcheck 1.90 (but not 1.89 or 1.82) appears to be a regression in cppcheck which has already been reported - see cppcheck TRAC [9292](https://trac.cppcheck.net/ticket/9292) and [9437](https://trac.cppcheck.net/ticket/9437). Following a `realloc()` failure, a `free()` of the original region results in a false positive.

cppcheck allows for false positives to be flagged with specially formed comments. The `--inline-suppr` command-line flag is needed to enable these. This approach has been taken for this file.

The warning in `chansrv_xfs.c` generated by cppcheck 1.82 (but not 1.89 or 1.90) appears to be caused by a null pointer test followed by '&&' followed by a dereference of the pointer in another test:-

```
    if (xfs != NULL && xfs->inode_table != NULL)
    . . .
```
This is perfectly valid C, so this may well be an older bug in cppcheck. I've consulted TRAC but been unable to find one. I've restructured the code to separate the two tests into separate if statements and this seems to stop any version of cppcheck grumbling.

The warning in `devredir.c` appears to be valid code used to generate a random number if `/dev/urandom` is unavailable. I've simply replaced the code with a call to `g_random()` in this case.

So despite the warnings, no actual bugs have been found here.

Hello, how can I set the resolution of the remote server to a fixed value and open it in full screen on the local client?
For example, the local screen resolution is 1080p, and the remote server resolution is fixed to 1366x768 and the RDP client is full screen. Achieve the purpose of enlarging the font.
This PR addresses the cppcheck warning generated by cppcheck for `xrdp/xrdp_cache.c` mentioned in #1473 

The `COMPARE_WITH_CRC32()` macro checks both its pointer arguments against NULL. cppcheck takes this as an indicator that either of the pointers could be NULL, and generates the warning accordingly against the 'bitmap' local variable

This variable cannot actually be NULL, and so the check performed by the macro is not needed.

In this case, the warning does not indicate an actual bug.
It has been a while since my last exercise in Linux: I installed 1/11/2020 download 18.04.3, then found no ssh access, installed ssh then found no xrdp access, installed but when I tried to login I would get a black screen and hang. Google fu the PEM issue, added xrdp to ssh group to fix, Still black screen, more Google fu and the 'NEW' screen sharing feature, enabled it and restarted, when I try to connect I get logged in through X but X passes me to a black screen then I'm disconnected. The current log:
[20200112-09:36:57] [INFO ] Socket 12: AF_INET6 connection received from ::ffff:192.168.1.28 port 49255
[20200112-09:36:57] [DEBUG] Closed socket 12 (AF_INET6 ::ffff:192.168.10.100 port 3389)
[20200112-09:36:57] [DEBUG] Closed socket 11 (AF_INET6 :: port 3389)
[20200112-09:36:57] [INFO ] Using default X.509 certificate: /etc/xrdp/cert.pem
[20200112-09:36:57] [INFO ] Using default X.509 key file: /etc/xrdp/key.pem
[20200112-09:36:57] [DEBUG] TLSv1.2 enabled
[20200112-09:36:57] [DEBUG] TLSv1.1 enabled
[20200112-09:36:57] [DEBUG] TLSv1 enabled
[20200112-09:36:57] [DEBUG] Security layer: requested 11, selected 1
[20200112-09:36:57] [DEBUG] Closed socket 12 (AF_INET6 ::ffff:192.168.10.100 port 3389)
[20200112-09:36:57] [INFO ] Socket 12: AF_INET6 connection received from ::ffff:192.168.1.28 port 49256
[20200112-09:36:57] [DEBUG] Closed socket 12 (AF_INET6 ::ffff:192.168.10.100 port 3389)
[20200112-09:36:57] [DEBUG] Closed socket 11 (AF_INET6 :: port 3389)
[20200112-09:36:57] [INFO ] Using default X.509 certificate: /etc/xrdp/cert.pem
[20200112-09:36:57] [INFO ] Using default X.509 key file: /etc/xrdp/key.pem
[20200112-09:36:57] [DEBUG] TLSv1.2 enabled
[20200112-09:36:57] [DEBUG] TLSv1.1 enabled
[20200112-09:36:57] [DEBUG] TLSv1 enabled
[20200112-09:36:57] [DEBUG] Security layer: requested 11, selected 1
[20200112-09:36:57] [INFO ] connected client computer name: AORUS
[20200112-09:36:57] [INFO ] TLS connection established from ::ffff:192.168.1.28 port 49256: TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384
[20200112-09:36:58] [DEBUG] xrdp_000039bb_wm_login_mode_event_00000001
[20200112-09:36:58] [INFO ] Loading keymap file /etc/xrdp/km-00000409.ini
[20200112-09:36:58] [WARN ] local keymap file for 0x00000409 found and doesn't match built in keymap, using local keymap file
[20200112-09:37:19] [DEBUG] xrdp_wm_log_msg: connecting to sesman ip 127.0.0.1 port 3350
[20200112-09:37:20] [INFO ] xrdp_wm_log_msg: sesman connect ok
[20200112-09:37:20] [DEBUG] xrdp_wm_log_msg: sending login info to session manager, please wait...
[20200112-09:37:20] [DEBUG] return value from xrdp_mm_connect 0
[20200112-09:37:20] [INFO ] xrdp_wm_log_msg: login successful for display 10
[20200112-09:37:20] [DEBUG] xrdp_wm_log_msg: started connecting
[20200112-09:37:21] [INFO ] lib_mod_log_peer: xrdp_pid=14779 connected to X11rdp_pid=14782 X11rdp_uid=1000 X11rdp_gid=1000 client_ip=::ffff:19                                       2.168.1.28 client_port=49256
[20200112-09:37:21] [DEBUG] xrdp_wm_log_msg: connected ok
[20200112-09:37:21] [DEBUG] xrdp_mm_connect_chansrv: chansrv connect successful
[20200112-09:37:21] [DEBUG] Closed socket 20 (AF_INET6 ::1 port 36112)
[20200112-09:37:21] [DEBUG] Closed socket 22 (AF_UNIX)
[20200112-09:37:21] [DEBUG] Closed socket 12 (AF_INET6 ::ffff:192.168.10.100 port 3389)
[20200112-09:37:21] [DEBUG] xrdp_mm_module_cleanup
[20200112-09:37:21] [DEBUG] Closed socket 21 (AF_UNIX)
kevin@gate:/var/log$


I don't see any X session stuff.
Hi, I find Xrdp the most satisfying solution, when accessing a Linux system remotely from anywhere!
But I have some minor and yet disturbing issues:

- corporate users can't login (login successful display 11, but VNC error connecting to 127.0.0.1:5911)
- local users can log in once, a XVnc session will live forever and you cannot login from another computer before not killing that specific Xvnc session

      -        ssh: kill and wait until the zombie is killed (could last some minutes)
      -        eventually restart xrdp.service and xrdp-sesman.service

- local user first logs in and password is requested for 5-9 times like for
        -                - color profile (4x)
        -                - keyring (2x)
        -                - PC/SC (3x)
        -                - .....
- It is not possible to have access to USB for example for virtmanager or qemu
- Session is not killed after closing the remote desktop connection

**I was not able to test it with Xorg! Does anybody has experiences how to do this with Fedora?**
I was installing xorgxrdp and edited xrdp.ini to enable it. But when I try to log in I only get a blank screen.

Best regards
Peter
```
sesman/chansrv/pcsc/xrdp_pcsc.c:1123:9: warning: Either the condition 'pioRecvPci==0' is redundant or there is possible null pointer dereference: pioRecvPci. [nullPointerRedundantCheck]
sesman/chansrv/pcsc/xrdp_pcsc.c:1125:9: warning: Either the condition 'pioRecvPci==0' is redundant or there is possible null pointer dereference: pioRecvPci. [nullPointerRedundantCheck]
sesman/chansrv/pcsc/xrdp_pcsc.c:1198:26: warning: Either the condition 'mszGroups==NULL' is redundant or there is possible null pointer dereference: mszGroups. [nullPointerRedundantCheck]
xrdp/xrdp_cache.c:366:13: warning: Either the condition 'bitmap!=0' is redundant or there is possible null pointer dereference: bitmap. [nullPointerRedundantCheck]
```
