* ranlib is a thing of the past, and all major ar implementations have -s to do it while it makes the archive. the extra invocation takes plenty of time on my Cygwin.
* -pipe tells gcc to use memory instead of temp files. less IO means faster build.
* the warnings are there just there to make things safer. -Wreorder seems to complain a lot, but since most member initializers are pure it feels okay to turn it off.

Try:
```
println("`a` b c")
```
You will get a commnad-not-found for `a`, because it actually tried to run it.

* * *

I tried to work this around by implementing the magical POSIX quote:
```C++
void CodeGen_Bash::output_escaped_string(const std::string &s) {
    stream << "'";
    std::ptrdiff_t current, previous = 0;
    current = s.find("'");
    while (current != std::string::npos) {
        stream << s.substr(previous, current - previous) << "'\''";
        previous = current + 1;
        current = s.find("'", previous);
    }
    stream << s.substr(previous, current - previous);
    stream << "'";
}
```

...combined with disabling the `\` keeping behavior in Parser for quoted strings to handle cases like `\$` -> literal `$`, and not enabling the escape for the ExternCall code path. The problem is it also kills legit backslashes like `\n`.

I tried changing the backslash handling for the lexer as well, but it is too late in midnight for my brain to come up with a sensible solution. Basically I want the new scan_until to:
1. discard all backslashes that do escape some token
2. have backslashes self-escape; that is n backslashes turn into n/2 in the actual string
3. have the boolean parameter decide how to handle the lone odd slash

1 requires rewriting the lookahead part to resemble something like:
```
find token match
if found_preliminary
  if escape
    emit n / 2 [result += std::string(backslashes / 2, '\\');]
    n %= 2
  else
    break away from while
```

But I am just too tired to try it.
src/Tokenizer.cpp in line 260

never used variable 'c'
I've been thinking of something like this for a while, but I always focused on the idea of automating the autocompletion scripts. It would be really cool to come up with a declarative syntax for defining function arguments that could be compiled into [programmable completion](http://www.tldp.org/LDP/abs/html/tabexpansion.html) in bash. 

Here is a contrived example of how a function in bish could be annotated:

```python
def ls(file=None, **kwargs) {
    """
    @file: File= - the name of the file to ls
    @-l - enable long output
    @-a - include hidden files
    @--longopt - longer option for example
    """
    return /bin/ls file? **kwargs
}
```

This would enable the following behavior:

```bash
> ls <Tab>
file - the name of the file to ls
-l  - enable long output
-a  - include hidden files
--longopt - longer option for example

> ls -<Tab>
-l  - enable long output
-a  - include hidden files
--longopt - longer option for example

> ls --long<Tab>
> ls --longopt
> ls --longopt<Tab>
--longopt - longer option for example
```

You can see a real world example of this type of autocompletion with tmux. Start some sessions and type `tmux attach-session -<Tab>`. I'm not sure if it would work to this degree in bash as I've only seen it in zsh, but it does offer some level of programmable autocompletion.
The following snippet complains that newval is not defined, however it is.

```
def slice_lines(val, start) {
    nlines = numlines(val)
    if (nlines < 2) {
        println("Error1.")
        quit(0)
    }
    newval = ""
    for (curr in 1 .. nlines) {
        line = getline(val, curr)
#        if (curr >= start) {
            println("Got line: $line")
#            if (curr != start) {
#                newval = printf("$newval\n$chompline")
#            }
        }
    }
    return newval
}
```

Error:

```
Bish error: Undefined variable "newval"
Abort
```

Here is a snippet that works correctly when run as a standalone bash script but fails in bash -r:

```
def readline() {                                                                                                                                   
    y = @(exec head -n 1 -)                                                                                                                        
    return "$y"                                                                                                                                    
}

val = readline()
println("Got $val")
```

This seems to me to be because of `run_on` in `bish.cpp`.

I propose we create a temporary file somewhere and run it using `system` rather than trying to mimic the semantics of this.

Thoughts?

I'd be willing to fix this issue.

This adds information on how to get bish through Homebrew. :sparkles: 

As discussed here: http://ubuntuforums.org/showthread.php?t=2274570

File globbing is considered one of the main benefits of shell scripts versus other scripting languages. Bish should support globbing as a first-class feature.

Example of how this might look:

```
for (f in *.txt) {
    println("Text file: $f")
}
```

Bash supports lots of string manipulation:

http://tldp.org/LDP/abs/html/string-manipulation.html

Bish should unify the functionality covered in that page and provide a saner syntax.
