I know the advantage of this repo, such as dynamic & process isolation, but how about the benchmark? any test data?
I Implemented a plugin for a service. This service runs as multiple replicas. How can I ship my plugin into this multiple replicas? They run containers.
It is simpler to use `strconv.Atoi(s)` than `strconv.ParseInt(s, 10, 0)`
https://golang.org/pkg/strconv/#Atoi
## What is the change?
When the `Cmd` struct already has `stdin` already configured, use that instead of `os.Stdin` when starting a plugin.

## Why?
I wanted to pass data to my plugins to assist with initialization, passing one-time configuration data that isn't part of the interface used to communicate with the plugin. I was having trouble getting this sent properly via `os.Stdin` honestly... ðŸ˜Š 

This seems like an improvement because it doesn't require remembering the original `os.Stdin` and swapping it back, and makes it easier for the host to pass a different stdin to a plugin, or mock it out for a test.
To support protobuf v3:
* protobuf lib version upgraded to 1.3.0
* grpc lib version upgraded to 1.18.0

There are some auto cleanup by `go mod` as the result.

I'm using `go 1.11.12`

```bash
â€º go test ./...
ok  	github.com/hashicorp/go-plugin	8.439s
?   	github.com/hashicorp/go-plugin/examples/basic	[no test files]
?   	github.com/hashicorp/go-plugin/examples/basic/commons	[no test files]
?   	github.com/hashicorp/go-plugin/examples/basic/plugin	[no test files]
?   	github.com/hashicorp/go-plugin/examples/bidirectional	[no test files]
?   	github.com/hashicorp/go-plugin/examples/bidirectional/plugin-go-grpc	[no test files]
?   	github.com/hashicorp/go-plugin/examples/bidirectional/proto	[no test files]
?   	github.com/hashicorp/go-plugin/examples/bidirectional/shared	[no test files]
?   	github.com/hashicorp/go-plugin/examples/grpc	[no test files]
?   	github.com/hashicorp/go-plugin/examples/grpc/plugin-go-grpc	[no test files]
?   	github.com/hashicorp/go-plugin/examples/grpc/plugin-go-netrpc	[no test files]
?   	github.com/hashicorp/go-plugin/examples/grpc/proto	[no test files]
?   	github.com/hashicorp/go-plugin/examples/grpc/shared	[no test files]
?   	github.com/hashicorp/go-plugin/examples/negotiated	[no test files]
?   	github.com/hashicorp/go-plugin/examples/negotiated/plugin-go	[no test files]
?   	github.com/hashicorp/go-plugin/internal/plugin	[no test files]
?   	github.com/hashicorp/go-plugin/test/grpc	[no test files]
```
Is it possible to create a net/rpc only implementation (both host and plugin) without bloated by gRPC dependencies? 
WIll the binaries always have all modules listed _go.sum_ file?
OS: linux

The plugins is abnormally closed, such as SIGKILL, the unix socket file will be left behind, and causing a leak in some case.

why not plugin support "Abstract sockets" to resolve this case.

http://man7.org/linux/man-pages/man7/unix.7.html

> Abstract sockets
       Socket permissions have no meaning for abstract sockets: the process
       umask(2) has no effect when binding an abstract socket, and changing
       the ownership and permissions of the object (via fchown(2) and
       fchmod(2)) has no effect on the accessibility of the socket.
       Abstract sockets automatically disappear when all open references to
      the socket are closed.
       The abstract socket namespace is a nonportable Linux extension.


Nomad uses go-plugin to spin up various plugins and auxiliary processes, and saw surprising (to us) behavior when host process dies in https://github.com/hashicorp/nomad/pull/5598 .

Nomad uses go-plugin to spin up long-running plugins with lifecycle independent from host, to ease in-place upgrades and reconfiguration, and use the reattachment patterns `ReattachConfig` supported by this.

However, we observe the following problems after host process is restarted:
1. The plugin gets a SIGPIPE signal upon the next log/Stdout/Stderr write operation.  When the host (e.g. go-plugin client) process dies, Stdout/Stderr pipe closes and any write from plugin fails with `io.ErrClosedPipe` error, and the plugin receive SIGPIPE, typically killing it.
    * note that if plugin explicitly ignores `SIGPIPE`, hclog may panics on log write failure in https://github.com/hashicorp/go-hclog/blob/6907afbebd2eef854f0be9194eb79b0ba75d7b29/intlogger.go#L370-L373

2. On successful reattachment by a restarted host process, stdout/stderr syncing is lost, and any plugin log lines to Stdout/Stderr are lost.

Nomad works around this by having a dedicated log file for the plugin and not writing to the plugin Stderr in https://github.com/hashicorp/nomad/pull/5598 .

Ideally, `go-plugin` can makes handling host process restarting and re-attaching better.  One possibility might be using fifo files such that plugin can always write to it with some buffer, but this may require clever use of non-blocking flags (to ensure plugin can proceed when fifo buffer is full).

With `AutoMTLS=true`, brokered connections dialed from the plugin back to the host fail with `transport: authentication handshake failed: x509: certificate is valid for localhost, not unused`.

Additionally, brokering with AutoMTLS requires the use of broker.AcceptAndServe since the autogenerated TLS configuration is not exported and therefore cannot be used to set up a gRPC server to use with the listener returned from `broker.Accept`.