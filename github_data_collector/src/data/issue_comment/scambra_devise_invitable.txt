Everything is working in both development and production, but when I run

heroku run rake db:migrate

I get this error:

PG::DuplicateColumn: ERROR:  column "invitation_token" of relation "users" already exists

There's no prior installation. The column only appears once; the devise_to_users migration is identical to the one provided in Github.

Any help would be most appreciated. I can't find a duplication of the error .

In my app, I invite people solely by their email addresses. I don't have other information on them, like First Name and Last Name, which are required on my resource. Now, when they accept the invitation the normal way, with setting up a password, no problem.  I merely added first name and last name to the invitation edit form and added those parameters to the devise sanitized parameters. Problem solved.

Except when it comes to Social Media registrations. See, I also allow you to accept the invite by logging in from Facebook or Google. In the omniauth callbacks I simply look up the user record that invite! created by the invitation token and do a user.accept_invitation! on it. Normally works great. EXCEPT, Facebook doesn't send me first name and last name. I need the user to finish filling out their profile AFTER they accept the invitation and login. But alas, Devise does not have a way to accept an invitation on an invalid resource. It's right in models.rb in the accept_invitation! method. There's a save with no option to say validate: false. 

I'll work around it for now by putting some garbage in the first name and last name fields before accepting if they're blank, and then resetting them afterwards. Or in the profile setup I'll check if the user is still "invited" and then complete the invitation at that point. But I really do think there is a use case for accepting invitations on invalid resources. Just my opinion, I could be, and usually am, wrong.
I am using sidekiq to deliver e-mails later. When I use this gem the raw_invitation_token is not set anymore and left empty. How can I receive the tolken manually?
I am using Mailgun and sometimes some emails won't get delivered depending on ISPs.

**Example**:
An admin invites a user, but the email cannot be delivered.

**Question:**
Is it possible for the admin to get the invite URL, so he can send it to the user on Messenger / Slack etc?

What kind of backup strategy do you use for this scenario?

**Sidenote**:
Getting a [new token](http://blog.staub-stefan.ch/rails/coding/devise/2017/09/21/get-invitation-token-manually.html) manually
Devise inevitable asks one user to invite another (invitee). Given the invitee hasn't consented to giving their email (or name) I wounded if you or anyone else has an opinion on if storing the users email is in breach of General Data Protection Regulation (GDPR) use of [Personal Data](https://gdpr-info.eu/issues/personal-data/).  If yes (or even maybe) then it might make sense to add something to the Readme warning others about this.
The following warning is coming up when I run my tests in Rspec

rvm/gems/ruby-2.5.1/gems/devise_invitable-1.7.4/lib/devise_invitable/models.rb:116: warning: instance variable @accepting_invitation not initialized
/users/invitation/accept?invitation_token=mNTJW_yyeyQpx6Ncs-17?invitation_token=mNTJW_yyeyQpx6Ncs-17
Hi, I have two different types of user groups for my app. 'Customer' and 'Staff'. When the admin is sending an invite, I am trying to create different forms for both groups to ensure appropriate inputs for each are filled up. 

Please let me know how to go about doing this?
When accepting an invitation, `edit` method in Invitations Controller has code to sign out a user/resource if one is already signed in.
See:
https://github.com/scambra/devise_invitable/blob/master/app/controllers/devise/invitations_controller.rb#L40

This is something I needed in my project and tried to add myself overriding the `edit` method in the Invitations Controller. But I noticed my method wasn't even being called. It was because of the before filter `require_no_authentication`. Then I noticed the original `edit` code already had the code I needed, but it was just not being executed.

I ended up overriding the controller with only this line:

`prepend_before_action :require_no_authentication, :only => [:update, :destroy]`
This would be helpful for mobile apps and web apps. I can overwrite the method, but what are the implications of removing the authenticity token support? If we can rely on the invite token being semi-private because it's only accessible by the person receiving the email then removing the authenticity token should be fine, but I want a sanity check.