Prepare for release: 
 
* [ ] Check that description is informative 
* [ ] Check licensing of included files 
* [ ] `usethis::use_cran_comments()` 
* [ ] `devtools::check()` 
* [ ] `devtools::check_win_devel()` 
* [ ] `rhub::check_for_cran()` 
* [ ] Polish pkgdown reference index 
* [ ] Draft blog post 
 
Submit to CRAN: 
 
* [ ] `usethis::use_version('minor')` 
* [ ] Update `cran-comments.md` 
* [ ] `devtools::submit_cran()` 
* [ ] Approve email 
 
Wait for CRAN... 
 
* [ ] Accepted :tada: 
* [ ] `usethis::use_github_release()` 
* [ ] `usethis::use_dev_version()` 
* [ ] Update install instructions in README 
* [ ] Finish blog post 
* [ ] Tweet 
* [ ] Add link to blog post in pkgdown news menu 

Help page

> A list of additional fonts to import, each list element can be either a URL as a character string or a call to google_font()

However, other font arguments such as "text_font_google" and friends accept a single font only (which makes sense).
Though if one specifies a single font only for "extra_fonts", not

```
@import url(https://fonts.googleapis.com/css?family=Crimson+Text);
```

is parsed into the resulting CSS but only 

```
@import url(Crimson Text);
```

The latter results in the font not being available.

Suggestion: Either support only a list for `extra_fonts` or also support single `google_font()` calls.

(I know these are the ugly details of a package that comes with functions that have so many args... :smile: )


Can you please clarify in (write_xaringan_theme.rd)[man/write_xaringan_theme.rd] how to specify argument __background_position__?  background-position in theme.css can take two values (%) per argument to specify vertical and horizontal position. 

However, when I specify:
`r  write_xaringan_theme(background-position = c(0,100))`
xaringan_themer.css returns with
`r background-position: 0;`

I am not sure what the solution is, otherwise I would submit a PR.  
Currently `code_inline_background_color` applies `background-color` to the `.remark-inline-code` class.

But this class is added to any `<code>` elements that are not children of `<pre>`, so changing all background colors seems like too much.

Personally, I would rather the default is applied only to children of `<p>`, or in other words only to inline code inside regular text. I'm on the fence about list elements.

```css
p .remark-inline-code {
  background-color: {{code_inline_background_color}};
}
```
Currently, xaringanthemer writes a complete version of the default xaringan theme, but it occurred to me that, now that there are more user-contributed themes available, users may want to modify or tweak a small portion of another theme. For example, a user may want to use the metropolis theme but change font sizes or colors.

I could provide a function, e.g. `modify_theme()`, that writes inline CSS into the slide deck to modify small aspects of the remark theme. For example, changing the header font size might be done with

````
```{r echo=FALSE}
xaringanthemer::modify_theme(header_h1_font_size = "24px")
```

<style>
.remark-slide-content h1 {
  font-size: 24px;
}
</style>
````

Technically speaking this may be easier to do now that I rewrote the template in mustache.

If you're interesting in this feature, an thumbs up on this issue will be very motivating! :wink: 
I want to qualify that I am very new and am only now finding the time to start to wrap my head around xaringan and the ability to write my lecture slide decks in R Markdown.  Also, I have very little experience editing CSS. ðŸ˜„ 

That said, I love where you are going with this package and have more of a feature request really.  One of the things that I like about the [metropolis theme](https://github.com/pat-s/xaringan-metropolis) is the shaded title area.  This would let me stay on brand for my institution.  

Is it possible to add that as a modifiable attribute in your theme functions and customization?  From the theme (and color modified by me), it appears that this is the area of the CSS that drives that.

```
.remark-slide-content {
  background-color: #FAFAFA;
  border-top: 80px solid #CC0000;
  font-size: 20px;
  font-weight: 300;
  line-height: 1.5;
  padding: 1em 2em 1em 2em
}
```

I dont know if it would be possible to have two additional arguments for the theme; `border-top` and `border-color`, something like that?

Thanks again for this awesome package.  It appears that there is much to be excited about in future releases! 
Let theme functions take a `ggplot2` theme object, applies theme colors to key plot elements and sets default theme with `theme_set()`. Also updates geom defaults.

Secondarily, the theme prep function can be exported as well so that users can separately construct the theme in case they don't want to set the global ggplot2 theme.
Add [colourpicker](https://github.com/daattali/colourpicker)-style addin for setting up xaringan theme.