Thank you for this great little project.

I am trying to run the `ssl.rs` example. Everything compiles normally, I have added a self-signed certificate, I see the output of the println! within the response handler, but not the actual response. The browser is stuck in loading state. Any ideas?

With `TCPListener` it's possible to [`listenfd`](https://github.com/mitsuhiko/rust-listenfd) and socket activation from systemd.

This allows to hide services into network namespaces and disallow them to do `bind` and `listen`, which is very handy security-wise. Not only can one disallow these, it's also probably possible to use `RestrictAddressFamilies` and disable even `AF_INET` and `AF_INET6` for even more through lockdown.

I'm not really sure how to make this work without breaking backward compatibility or introducing something like `_with_listener` variants for methods that require `ToSocketAddrs` today.
```
error: failed to select a version for the requirement `ascii = "^0.8"`
  candidate versions found which didn't match: 1.0.0, 0.9.3, 0.6.0, ...
  location searched: crates.io index
required by package `tiny_http v0.6.0`
```

It seems that versions 0.7.0-0.9.2 of the `ascii` package are [yanked from crates.io](https://crates.io/crates/ascii/versions) (wtf?), making tiny-http uninstallable at this moment.
Responding to a secure (HTTPS) request fails, after the server has been running for a few seconds. Responding to a HTTP request always works.

Responding to a request is handled as follows:
`match response {
     Some(resp) => if let Err(e) = request.respond(resp) { error!("Error responding: {:?}", e); },
     None => error!("Error creating response to request."),
}`

It seems ` request.respond(resp)` somehow gets stuck, occasionally (very rarely) I get error messages about a "Broken Pipe".

The Response code looks as follows, with `contents` being a long string containing HTML stuff.
`Response::from_data(contents.as_bytes()).with_header(Header::from_bytes(&b"Content-Type"[..], &b"text/html; charset=utf8"[..]).unwrap()).boxed()`


On `master` branch, commit `b5b44bccfc0472e3c9003e5614a0df9339277fa8`, running `cargo bench` results in the following error:

```rust
Compiling tiny_http v0.6.2 (/home/cgm/devel/rust/tiny-http)
error[E0463]: can't find crate for `time`
 --> benches/bench.rs:5:1
  |
5 | extern crate time;
  | ^^^^^^^^^^^^^^^^^^ can't find crate

error: aborting due to previous error

For more information about this error, try `rustc --explain E0463`.
error: Could not compile `tiny_http`.

To learn more, run the command again with --verbose.
```
This pull request replaces the use of a `Box<dyn Error>` in `Server::new` and related methods with a plain old error enum instead.

This is easier to work with as a consumer of tiny_http and makes it possible to handle errors exhaustively.

The first commit in this PR simply replaces the string error message about SSL requiring the `ssl` feature with a `NewServerError::SslFeatureRequired` enum case.

The second commit builds on this by making the `ServerConfig::ssl` field conditional on the `ssl` feature, making any attempt to start an SSL server without the `ssl` feature a compile time error. This change allowed me to then remove `NewServerError::SslFeatureRequired` again.
I hit the following problem and saw it in the issues too (#146) : how do you gracefully shutdown the server ? There is effectively no way of breaking out of incoming_requests() other than receiving a client request.

Rust favors message passing. We can't kill threads or send them signals Unix style. We can only pass messages between threads via channels to tell them to shut down on their own (or with synchronization primitives such as condvar, or with shared memory under lock). After some research, it turns out the standard library does blocking IO (ie the accept method on TcpListener used by tiny-http). There really is no way to break out of it except with a client request (or on error). This is already dealt with by a previous commit by @moises-silva (cde7981) : on object destruction we briefly connect to the server to unblock the thread stuck on accept. (side note : for async IO look for mio)

But a for loop on incoming_requests it still blocking. It's not stuck on accept but inside the message queue waiting on condvar for new client requests. This commit adds a special request variant that says to unblock the loop and return no client request (since there is none we just want to shutdown). I slightly modified the message_queue API (ie the pop method now returns an Option), which is internal. There are no changes on the public side, ie on server, except the addition of the unblock method that effectively unblocks one thread stuck in incoming_requests (or recv).

Since there is no breaking change to the public API, all existing code work as previously. The addition of unblock() allows to implement graceful server shutdown by calling it from another thread. Hopefully the two tests added make its usage clear. Let me know what you think.
This add the possibility to use `rustls` instead of `openssl`.

Note that the certificate/key in the `examples/` directory doesn't work with the `rustls` implementation because the certificate was generated with a key length of 1024-bit. `rustls` doesn't accept such keys because it's considered poorly secured as of today.