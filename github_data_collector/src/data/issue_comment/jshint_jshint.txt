
This functionality was introduced by "Add codes to errors generated by
quit()" [1], but no tests were included. Add a test in order to prevent
regressions.

[1] 537dcbd4be49f5b52ede08e98b23e49bbc5e4bbc
I come from the linter-jshint github issues repository where they redirected me here to refile (https://github.com/AtomLinter/linter-jshint/issues/789).
Given the [Symbol.toPrimitive] method in a ES6 class put inside a ".js" file, such as the one in the following class:

```
/*jshint esversion: 6 */
class TruncableDate
{
  constructor(originalDate = null)
  {
      if(originalDate == null)
      {
        this.innerDate = new Date();
      }
      else
      {
        this.innerDate = new Date(originalDate);
      }
  }

  static from(originalDate)
  {
    return new TruncableDate(originalDate);
  }

  valueOf()
  {
    return this.innerDate.valueOf();
  }

  toString()
  {
    return this.innerDate.toString();
  }

  [Symbol.toPrimitive](hint)
  {
    return this.innerDate[Symbol.toPrimitive](hint);
  }
}
```
JSHint may or may not alert there are errors in the current source after the [Symbol.toPrimitive](hint) part -depending on the file I had different results -, but does always throws errors on the Atom javascript console such as the following:

> [Linter] Error running JSHint TypeError: Cannot convert undefined or null to object
>     at Function.keys (<anonymous>)
>     at Object.<anonymous> (/Users/Jacopo/.atom/packages/linter-jshint/lib/main.js:168)
>     at Generator.next (<anonymous>)
>     at step (/Users/Jacopo/.atom/packages/linter-jshint/lib/main.js:3)

The errors keep being thrown, so that it is impossible to program without disabling JSHint.
I am currently using the latest available version of linter-jshint, version 3.1.17, which as far as I know is using jshint version 2.10.2.
Let me know if I can share any further data to help pinpointing the problem.
Thank you in advance for your support!
Warmest Regards
I have been notification to either install jsint globally or locally. However, I install globally but after then, life has not been easy with me as all the import I made in my project including const were marked as error. I just couldn't continue with what I was doing. I thus, resorted to uninstalling vscode, unintall eslint, jslint and reinstalled vscode still there issue persited. Please I need help


Using the following contents in e.g. `main-entry,js`
````javascript
import { JSHINT } from 'jshint';

JSHINT(`console.log("JSHint this!")`);
console.log(JSHINT.data());
````
followed by `webpack -p main-entry.js` results in a ~2.6MiB output file. Where the expected production bundle is around the ~1.2MiB. What am I missing?
As #433 noticed, can you add an option to allow (no warnings) `if (typeof abc == 'string')` when `eqeqeq` is `true`?
Hello,
When do you guys are planning to  update JShint dependencies?. Currently 3 of its dependencies are out of date.

`htmlparser2`
`shelljs`
`strip-json-comments`
Lower version of shelljs is also vulnerable to attack and it is being detected in github as a security vulnerability.
 [Outdated dependencies](https://david-dm.org/jshint/jshint).
aneObj.prototype.init = function() {
    for (var i = 0; i < this.num; i++) {
        this.x[i] = i * 16 + Math.random() * 20;
        this.len[i] = 200 + Math.random() * 50;

    }
    console.log('a');

}//这报错，报缺失分号，但是这样写，没问题啊
If you have a file `test.js` with the following contents:
```js
class Foo {
  static() {
    return true;
  }
}
```

And the following .jshintrc:
```json
{
  "esversion": 6
}
```

Then `jshint test.js` will fail with the following output:
```
test.js: line 2, col 9, Unexpected '('.
test.js: line 2, col 10, Unexpected ')'.
test.js: line 2, col 12, Unexpected '{'.
test.js: line 3, col 12, Class properties must be methods. Expected '(' but instead saw 'true'.
test.js: line 6, col 1, Unrecoverable syntax error. (100% scanned).
```
To support async/await I have upgraded to jshint version 2.10.1
Also I updated my .jshintrc to use -  `"esversion": 9`.

Now when i run jshint it give me below error -
`'arrow function syntax (=>)' is only available in ES6 (use 'esversion: 6').`

And if keep `"esversion": 6` in .jshintrc, it fails with below error -
`'async' is not defined.`