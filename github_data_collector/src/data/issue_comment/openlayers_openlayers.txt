**Describe the bug**

![image](https://user-images.githubusercontent.com/49240900/72671980-e3ad5580-3a4a-11ea-9e2e-a86c3929158a.png)

Although the name is **Andy&amp;apos;s** in the data it should be decoded in the label.

This is from a KML example but I presume it could happen in any XML based format.  Would it be acceptable if either `ol/style/Text` or the renderer routinely called `decodeURIComponent()` on the supplied text or should it be the responsibility of the parser?


Fixes #10540
Fixes #10546

Fixes images or labels not visible (flickering is a general issue with any decluttering).

Return a single style object for image and text for point features as concatenating two styles in an array is not compatible with decluttering

Update expected result of test to single style object to reflect this change
Remove a duplicated test

Also convert any html character codes in labels and include example in test
This adds a 'experimental' notice to the api documentation similar to the one that is shown for examples using experimental features.
It is shown for module pages when the module is tagged with `@experimental` and also for class pages belonging to such a module.

Add the `ol/layer/WebGLPoints`, `ol/style/LiteralStyle.js` and `ol/style/expressions.js` as experimental api and thus fixes one dead link from the `WebGLPoints` module as seen in #10460
To disallow any value for a tag the correct config is `mustNotHaveValue: true`.
https://jsdoc.app/about-plugins.html#the-dictionary

To check just add some text after one of these tags and run the 'apidoc' task.
It should generate a warning that text is not allowed after that tag:
```
WARNING: The @api tag does not permit a value; the value will be ignored. File: VectorTileLayer.js, line: 51
WARNING: The @api tag does not permit a value; the value will be ignored. File: VectorTileLayer.js, line: 56
```
Another example which wasn't caught in #10315

**Is your feature request related to a problem? Please describe.**
Now OL6 uses multiple `<canvas>` elements it has lost the very useful ability to export the current view using the `'rendercomplete' + event.context.canvas` technique.

The example
https://openlayers.org/en/latest/examples/export-map.html
has now been changed for OL6 to use 'html-to-image' but that can only support Chrome / FF which is a severe limitation.

**Describe the solution you'd like**
While testing the idea that I could go through each `<canvas>` element in the DOM in order and write it to a new master canvas using successive calls to `drawImage()` I encountered the issue that CSS `opacity:` and ` transform: matrix()` are applied to the container `<div class="ol-layer">` element and affects how the canvas has to be drawn onto the master.

If OL internally knows how each source canvas in the DOM could be written to a master destination canvas could it:

- do this itself and expose some kind of `ol/Map.toCanvas()`?
- expose enough details (`canvas element`, `sx`, `sy`, `sWidth`, `sHeight`, `dx`, `dy`, `dWidth`, `dHeight`, `opacity`) that this could be done in userland code for an export?

**Describe the bug**
KML features and labels flicker when decluttering is enabled and are not always visible. 

**To Reproduce**
Steps to reproduce the behavior:
1. Add KML layer to the map (Use attached KML sample)
2. Zoom into the layer area 
3. KML features flicker and are not always visible

**Expected behavior**
KML features do not flicker and are visible

Here is a sample:
`import 'ol/ol.css';
import {Map, View} from 'ol';
import {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer.js';
import {OSM, Vector as VectorSource} from 'ol/source.js';
import KML from 'ol/format/KML.js';

let vectorLayer = new VectorLayer({
    source: new VectorSource({
        url: 'sample.kml',
        format: new KML()
    }),
    declutter: true
});

const map = new Map({
    target: 'map',
    layers: [
        new TileLayer({
            source: new OSM()
        }),
        vectorLayer
    ],
    view: new View({
        center: [0, 0],
        zoom: 0
    })
});`


[sample.zip](https://github.com/openlayers/openlayers/files/4076957/sample.zip)

The tile source has been unresponsive every time I have tried this in recent weeks

[example.txt](https://github.com/openlayers/openlayers/files/4076654/example.txt)

In the attached simplified code, the PolyStyle setting <outline>0</outline> is causing the linestring not to render in OpenLayers. It will however render in Google Earth. 

This seems to be an ongoing issue and was mentioned historically in the following
https://github.com/openlayers/openlayers/issues/4466 
https://github.com/openlayers/openlayers/issues/6028 

can be tested in https://openlayers.org/en/latest/examples/drag-and-drop.html (alter attached file extension to .kml)

Altering the KML is not necessarily convenient as out KMLs are uploaded to product directly by our customers. 

Any help on this would be appreciated

Fixes #10529

Correct the resolution used for scale. Add `dpi `option for output devices such as printers.
Also add `setDpi` and `setMinWidth` methods

Add a Print to scale example
