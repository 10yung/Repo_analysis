Add an algorithm for traversal methods i.e preOrder, inOrder and postOrder. And also a method for get the level of a node that searched.
Adds generic CombSort and corresponding tests for Development branch.

List of changes in this PR:
1- Chain of responsibility design pattern with a remarkably clear demonstration is added.
2- Some tests are refactored.
3- A test class for decorator pattern is moved to its own specific package.
the file **java/DataStructures/Trees/BinaryTree.java** maybe **wrong** about in **remove** function .
```
 //If the successor has a right child, the child's grandparent is it's new parent
            if (successor.right != null && successor.parent != temp) {
                successor.right.parent = successor.parent;
                successor.parent.left = successor.right;
                successor.right = temp.right;
                successor.right.parent = successor;
            }
```

l think the right code is:

```
//If the successor has a right child, the child's grandparent is it's new parent
            if(successor.parent!=temp){
                if(successor.right!=null){
                    successor.right.parent = successor.parent;
                    successor.parent.left = successor.right;
                    successor.right = temp.right;
                    successor.right.parent = successor;
                }else{
                    successor.parent.left=null;
                    successor.right=temp.right;
                    successor.right.parent=successor;
                }
            }

```
Am I thinking rightï¼Ÿ

Can object pooling(Algorithm) be added to the code? If it is already there can anybody point to it.
Thanks


Find Fibonacci sequence quickly by divide and conquer