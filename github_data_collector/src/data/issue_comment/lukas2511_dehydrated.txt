Using debian10 vm and zsh shell. Have created domains.txt and config.sh. Added the bind9 nameserver ip address. Get the following error.
# dehydrated -c                                                                      
# INFO: Using main config file /etc/dehydrated/config
# INFO: Using additional config file /etc/dehydrated/conf.d/config.sh
# INFO: Using additional config file /etc/dehydrated/conf.d/letsencrypt_acme_dns-01_challenge_hook.sh
/etc/dehydrated/conf.d/letsencrypt_acme_dns-01_challenge_hook.sh: line 101: $1: unbound variable

Write an error message if the Hook-Script is broken. If you use "dns-01" you got a fallback to "http-01" which will create stupid problems to debug and finde the problem.

See also  #702 
It would be very good, if it were possible to set the CA on a per-certificate level.

Example: for production domains, I'd like to use the "real" Let's Encrypt CA https://acme-v02.api.letsencrypt.org/directory
For test domains, I'd like to use the staging environment https://acme-staging-v02.api.letsencrypt.org/directory

According to https://github.com/lukas2511/dehydrated/blob/master/docs/per-certificate-config.md, the confguration variable `CA` cannot be changed in `certs/example.org/config` or `DOMAINS_D/example.org`.
I tried to create a let's encrypt certificate in my openwert router using the following tuto http://blog.shahada.abubakar.net/post/getting-free-ssl-certificates-from-letsencrypt-org-on-openwrt-using-dehydrated-
however when I execute the command : ./dehydrated -c
I get this error : ERROR: WELLKNOWN directory doesn't exist, please create /etc/www/dehydrated and set appropriate permissions.
I have already created /etc/www/dehydrated and I can access to it  and permissions are set @ drwxrwxrwx for /etc/www/dehydrated   and -rwxrwxrwx for etc/dehydrated/config.
When running dehydrated with the -v parameter, I noticed that the operating system name is broken:

```
$ ./dehydrated  -v
# INFO: Using main config file /root/dehydrated/config
Dehydrated by Lukas Schauer
https://dehydrated.io

Dehydrated version: 0.6.5
GIT-Revision: unknown

OS: \S
Used software:
 bash: 4.4.19(1)-release
 curl: curl 7.61.1
 awk: GNU Awk 4.2.1, API: 2.0 (GNU MPFR 3.1.6-p2, GNU MP 6.1.2)
 sed: sed (GNU sed) 4.5
 mktemp: mktemp (GNU coreutils) 8.30
 grep: grep (GNU grep) 3.1
 diff: diff (GNU diffutils) 3.6
 openssl: OpenSSL 1.1.1 FIPS  11 Sep 2018
```

The problem appears in the command_version() function, in the following line:

```bash
echo "OS: $(cat /etc/issue | grep -v ^$ | head -n1 | _sed 's/\\(r|n|l) .*//g')"
```

Apparently, it reads the /etc/issue file, which in RHEL/CentOS/Fedora systems looks like this:

```
\S
Kernel \r on an \m (\l)

```

Since dehydrated does not expand "\S", it appears as-is.

Maybe, on Linux distros using systemd, it would be better to parse the requred _/etc/os-release_ file?

references:
https://www.freedesktop.org/software/systemd/man/os-release.html
https://unix.stackexchange.com/questions/351557/on-what-linux-distributions-can-i-rely-on-the-presence-of-etc-os-release

Hello,

Currently, when we want to reload services that are dependent on certificates, we may use the hook script deploy_cert() function. Unfortunately, this means that if the script is renewing multiple certificates, the deploy_cert() function will be called once per domain and thus reload the services multiple times.

```
deploy_cert() {
    local DOMAIN="${1}" KEYFILE="${2}" CERTFILE="${3}" FULLCHAINFILE="${4}" CHAINFILE="${5}" TIMESTAMP="${6}"

    echo "Reloading services..."
    systemctl reload httpd postfix haproxy dovecot

}

Reloading services...
Reloading services...
Reloading services...
```

Would it be possible to change the exit_hook() function, so that its passed a status parameter that tells if there was at least one certificate that was created/updated, so that the reload of the services only happens once?

```
exit_hook() {
    local STATUS="${1:-}"

    if [ ${STATUS} ... ] ...
          # at least one domain was created/changed, reload only once
          systemctl reload httpd postfix haproxy dovecot
    fi

}
```

Thank you.

`systemctl` is specific to systemd, whereas `service` is a init system
agnostic command, that can run in all OSes I know about.

I've been asked to do it [in this Debian bug](https://bugs.debian.org/945908)
[Page](https://github.com/lukas2511/dehydrated/blob/master/docs/dns-verification.md) contains wrong link 
> Here are some examples: [Examples for DNS-01 hooks](https://github.com/lukas2511/dehydrated/wiki/Examples-for-DNS-01-hooks)
# dehydrated --config config-step -x -g  --signcsr some.csr 
# INFO: Using main config file config-step
 + Requesting new certificate order from CA...
  + ERROR: An error occurred while sending post-request to https://ca.int.cybersprint.nl/acme/acme/new-order (Status 400)

Details:
HTTP/2 400 
cache-control: no-store
content-type: application/problem+json
link: <https://my-internal-acme/acme/acme/directory>;rel="index"
replay-nonce: YVY5Z3VoVXZNWVhTRTVIYnVZQW9uR2N3Yk1RZk03Ylg
content-length: 246
date: Mon, 04 Nov 2019 12:31:09 GMT

{"type":"urn:ietf:params:acme:error:malformed","detail":"kid does not have required prefix; expected https://my-internal-acme/acme/acme/account/, but got https://my-internal-acme/acme/acme/new-account/TJtti927Rt3fyv5LRLRhaBgfs8oppRKI"}


The server I'm talking to does with with the acme.sh client and smallstep's own acme client.
Hi,

Trying to run dehydrated in cron, yields the following error;

```
Wed Oct 23 02:19:01 CEST 2019: running dehydrated...
# INFO: Using main config file /srv/letsencrypt/scripts/dehydrated.conf
13348 > Wed Oct 23 02:19:02 CEST 2019: Hook: this_hookscript_is_broken__dehydrated_is_working_fine__please_ignore_unknown_hooks_in_your_script
13351 > Wed Oct 23 02:19:02 CEST 2019: Hook: startup_hook
Processing foobar.com with alternative names: www.foobar.com kek.foobar.com lol.foobar.com
13375 > Wed Oct 23 02:19:02 CEST 2019: Hook: this_hookscript_is_broken__dehydrated_is_working_fine__please_ignore_unknown_hooks_in_your_script
 + Checking domain name(s) of existing cert... unchanged.
 + Checking expire date of existing cert...
 + Valid till Nov 14 23:21:29 2019 GMT Certificate will expire
(Less than 30 days). Renewing!
 + Signing domains...
 + Generating private key...
 + Generating signing request...
 + Requesting new certificate order from CA...
 + Received 4 authorizations URLs from the CA
  + ERROR: An error occurred while sending post-request to https://acme-v02.api.letsencrypt.org/acme/authz-v3/<snip> (Status 404)

Details:
HTTP/1.1 200 Connection established

HTTP/2 404
server: nginx
date: Wed, 23 Oct 2019 00:19:04 GMT
content-type: application/problem+json
content-length: 106
boulder-requester: 2680473
cache-control: public, max-age=0, no-cache
link: <https://acme-v02.api.letsencrypt.org/directory>;rel="index"
replay-nonce: <snip>

{
  "type": "urn:ietf:params:acme:error:malformed",
  "detail": "Expired authorization",
  "status": 404
}

...skipping...
```

Running the same command manually, works just fine;

```
[…]
 + Requesting new certificate order from CA...
 + Received 4 authorizations URLs from the CA
 + Handling authorization for foobar.com
 + Handling authorization for www.foobar.com
 + Handling authorization for lol.foobar.com
 + Handling authorization for kek.foobar.com
 + 4 pending challenge(s)
 + Deploying challenge tokens...
[…]
```

The "error" it receives in cron, happens every time (since I have it once per 24h, and the certificates are almost 10 days past the "30 day renewal" that I've set).

Some of these domains where signed by v1 of the LE API, while I'm now using v2. Could this be the culprit? If so, it's strange that it works when I ran the crontab-command manually.

Any pointers?