<!--
name: "Bug fix or new feature"
about: Fixing a problem with Redux
-->

## PR Type

### Does this PR add a new _feature_, or fix a _bug_?

Fixes a bug.

### Why should this PR be included?

It fixes a typing issue I and some other folks have with the `combineReducers` function: https://github.com/reduxjs/redux/issues/2709

## Checklist

- [x] Have you added an explanation of what your changes do and why you'd like us to include them?
- [x] Is there an existing issue for this PR?
  - https://github.com/reduxjs/redux/issues/2709 (it is closed, but many people are still affected)
- [x] Have the files been linted and formatted?
- [x] Have the docs been updated to match the changes in the PR?
- [ ] Have the tests been updated to match the changes in the PR?
- [x] Have you run the tests locally to confirm they pass?

## Bug Fixes

### What is the current behavior, and the steps to reproduce the issue?

Unfortunately, I failed to create a simple reproduction example. Still, it happens that TypeScript would fail to infer the proper generic type to `combineReducers` function. In my case, I'm doing something like this:

```ts
interface FooState {…}
interface AppAction extends Redux.Action<string> {}
interface FooAction0 extends AppAction {…}
interface FooAction1 extends AppAction {…}
type FooActions = FooAction0 | FooAction1;

function fooReducer(state: FooState, action: FooActions): FooState {
  return state;
}

// Type error:
// Argument of type 'Reducer<CombinedState<{ fooReducer: FooState; }>, FooActions>' is not assignable to parameter of type 'Reducer<CombinedState<{ fooReducer: FooState; }>, AnyAction>'.
combineReducers({ fooReducer: fooReducer });

// works
combineReducers<{fooReducer: FooState}>({ fooReducer: fooReducer });
```

### What is the expected behavior?

I would expect TypeScript to infer a generic type automatically.

### How does this PR fix the problem?

It removes explicit `any`s which appears to help TypeScript to infer a type. I'm not sure why though :man_shrugging: . Could this be a bug in TypeScript?

More specifically, the first generic type of `ReducersMapObject` is a state which is already `any` by default, and the second generic type is `A extends Action` which is `Action` by default and not `any`. So the fact that the second generic type is `any` confuses TS for some reason.
## PR Type

**Does this PR add a _new_ page, or update an _existing_ page?**

Adds the new "Quick Start" page

## Checklist

- [x] Is there an existing issue for this PR?
  - #3674 
- [ ] Have the files been linted and formatted?

## What docs page is being added or updated?

- **Section**: Introduction
- **Page**: Quick Start

## For Adding New Content

### What kind of content category is this page (tutorial, how-to, explanation, reference)?

The "Quick Start" page is a form of tutorial, but intended to demonstrate the "fastest" / "easiest" / "correct" way to use Redux without explaining _why_ things work this way.  

### Who is the intended target audience?

Beginners who know nothing about Redux, yet.

#### What knowledge are we assuming they have?

- JS syntax: ES6, `async/await`, object spreads
- React: components, hooks
- Other: HTTP / AJAX, `fetch`

### What are the intended results or takeaways from reading this page?

Readers should be able to mimic the demonstrated patterns to create a basic React+Redux app that does some CRUD work.

### What is the most critical info they should learn?

- Redux is a tool for managing state outside of your React components
- The Redux Toolkit package is the simplest and recommended way to use Redux
- Key React+Redux APIs (`configureStore`, `createSlice`, `useSelector` / `useDispatch`)
- Immutability is vital, but either requires hand-written updates or use of RTK+Immer "magic"



## Status

Hacked together this initial skeleton of a page.  So far I've done:

- Figured out how to use MDX with Docusaurus
- Added reusable components for `<Note>` (including multiple styles based on the Cypress.io docs) and `<DetailedExplanation>`
- Created an empty "Quick Start" page
- Added some initial "what is this and why would I use it?" content
- Added instructions on creating a project

I got stuck with some yak shaving when I realized that using the `diff` highlighting format leaves the `+-` diff signs as copyable characters, and ideally I'd like them _not_ copied or selectable.  I tried playing with `user-select: none` and the `:first-letter` selector, but it's not quite doing what I want.

Putting this up for ongoing feedback as we work through this.

/cc @taniarascia , @bpas247


## What docs page is being added or updated?

- **Section**: Introduction
- **Page**: Quick Start

## For Adding New Content

### What kind of content category is this page (tutorial, how-to, explanation, reference)?

The "Quick Start" page is a form of tutorial, but intended to demonstrate the "fastest" / "easiest" / "correct" way to use Redux without explaining _why_ things work this way.  

### Who is the intended target audience?

Beginners who know nothing about Redux, yet.

#### What knowledge are we assuming they have?

- JS syntax: ES6, `async/await`, object spreads
- React: components, hooks
- Other: HTTP / AJAX, `fetch`

### What are the intended results or takeaways from reading this page?

Readers should be able to mimic the demonstrated patterns to create a basic React+Redux app that does some CRUD work.

### What is the most critical info they should learn?

- Redux is a tool for managing state outside of your React components
- The Redux Toolkit package is the simplest and recommended way to use Redux
- Key React+Redux APIs (`configureStore`, `createSlice`, `useSelector` / `useDispatch`)
- Immutability is vital, but either requires hand-written updates or use of RTK+Immer "magic"


## Notes and Suggestions

- Need to make it as "hands-on" and interactive as possible
- Use https://jsonplaceholder.typicode.com/ as a fake but working backend.  (Note: `PUT / POST / DELETE` don't actually change anything.)
- Add "Prerequisites" section at the start of the page.  Don't waste time explaining other things here.
- Key references / examples:
    - https://www.apollographql.com/docs/react/get-started/#apollo-boost
    - https://www.taniarascia.com/getting-started-with-react/
    - https://www.taniarascia.com/getting-started-with-vue/
    - https://vuejs.org/v2/guide/
    - https://nextjs.org/learn/basics/getting-started
- Styling: https://taniarascia.github.io/primitive/
https://github.com/facebook/react/tree/master/scripts/error-codes

Right now, every production website that uses redux is shipping lengthy error messages that are better suited to development.

Example:

> 'Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+n.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.'

My rough guestimate is that you could reduce the [minified version of redux](https://unpkg.com/redux@4.0.4/dist/redux.min.js) from 6660 characters to more like 4200 characters by replacing these long messages with terse, generated error codes like `throw code(1)`. Seems worth it for potential savings of more than 35%.
## PR Type

**Does this PR add a _new_ page, or update an _existing_ page?**

- Adds the "Quick Start" page, 

## Checklist

- [x] Is there an existing issue for this PR?
  - #3594
- [x] Have the files been linted and formatted?

## What docs page is being added or updated?

- **Section**: Introduction
- **Page**: QuickStart

## For Adding New Content

### What kind of content category is this page (tutorial, how-to, explanation, reference)?

tutorial.

### Who is the intended target audience?

Redux users who want to quickly bootstrap their next project with the latest technologies.

#### What knowledge are we assuming they have?

Very minimal Redux knowledge, no prior Redux Toolkit experience needed. Basic JS and/or React knowledge.

### What are the intended results or takeaways from reading this page?

To be able to gain *just enough* Redux and Redux Toolkit knowledge to be able to start their next project. They can learn Redux more in-depth in later tutorials.

### What is the most critical info they should learn?

Learning the basics of Redux and Redux Toolkit, and how to tie those basics in to building vanilla or React based apps. 

## TODOs

- [ ] Add CodeSandboxes to ensure the code runs properly
- [ ] Add more links throughout the tutorial
- [ ] Add links for external resources at the end of the page

CRA 3.3.0 introduced project templates:

- https://github.com/facebook/create-react-app/releases/tag/v3.3.0
- https://create-react-app.dev/docs/custom-templates/

Based on that information, we should be able to define a `cra-template-redux` package that sets up Redux Toolkit and React-Redux automatically, in the same way that CRA's default template sets up React automatically.

This would make it even easier to get started with Redux.
## PR Type

**Does this PR add a _new_ page, or update an _existing_ page?**

- moves around the "Ecosystem", "Core Concepts", "Three Principles", and "Prior Art" page.
- Updates the "Getting Started" page

## Checklist

- [x] Is there an existing issue for this PR?
  - #3594
- [x] Have the files been linted and formatted?

## TODOs

- [x] Add entries to the Netlify `website/_redirects` file
- [x] Ensure that there aren't any more broken links throughout the website due to the pages being moved around
# Barebones tutorial (part of #3595 )

## PR Type

* Adds a new category, '**Tutorials**'
* Adds a new page under that category, '**Barebones Tutorial**'

## Checklist

- [x] Is there an existing issue for this PR?
  - [[Docs Rewrite] Meta-Issue: Tutorials](#3595 )
- [x] Have the files been linted and formatted?

## For new content

### What kind of content category is this page (tutorial, how-to, explanation, reference)?
Tutorial

### Who is the intended target audience?
Newcomers to Redux (who might also be relatively new to Javascript)

#### What knowledge are we assuming they have?
Basic Javascript

### What are the intended results or takeaways from reading this page?
They should know:
* What an action is
* What a reducer is, in the context of Redux
* How they could use an action payload
* What an action creator is
* How to create a Redux store
* How to use `store.getState()` and `store.dispatch`

### What is the most critical info they should learn?
* Actions are plain Javascript objects that have a `type` property
* Reducers have the signature `(state, action) => newState` and should cause no mutations or side-effects
* An action can be given a `payload` to provide additional information beyond `type` to a reducer
* An action creator is a function that returns an action
* `createStore` takes a reducer function as an argument and returns a store which uses that reducer
* `store.getState()` retrieves the current state held by the store
* `store.dispatch(action)` updates the store's state by passing its current state and `action` to the store's reducer

## Other notes

This page is quite long. I think that, if used, it would be more suited to having 'Barebones Tutorial' as a subcategory under 'Tutorials', with a single page then dedicated each to Actions, Reducers, Payloads, Action creators, and the Store, but wanted to check what thoughts were on that before I made that change.

It also might not be the style of thing that you want on the docs - I think the material is probably more naturally suited to a video-ish thing. No offence taken if that's the decision, as I can reuse this elsewhere.
## What docs page needs to be fixed?

- **Section**: _Structure Files as Feature Folders or Ducks_
- **Page**: https://redux.js.org/style-guide/style-guide

## What is the problem?

The Style Guide 'strongly recommends' _Structure Files as Feature Folders or Ducks_; this might not be desired in some projects, and may discourage sticking to other recommendations.

### Action creators and reducers colocated

While Ducks does provide colocation of action creators and reducers, if my understanding is correct, this works against the 1:N nature of actions to the reducers that handle them. The style guide 'strongly recommends' _Allow Many Reducers to Respond to the Same Action_ - by structuring action creators and reducers together using Ducks, this seems to be impeded.

As stated in https://redux.js.org/faq/actions:

> Some users do choose to bind them more tightly together, such as the “ducks” file structure, but there is definitely no one-to-one mapping by default, and you should break out of such a paradigm any time you feel you want to handle an action in many reducers.

I'd argue that a codebase that sometimes uses Ducks and sometimes doesn't is less maintainable and less understandable than a codebase that uses a single structure consistently. Using Ducks, for a new reducer to start responding to an existing action, this would require a "break out of the paradigm" refactor. My fear here would be that those who don't realise they need to go to the effort of making the refactor just dispatch another action to target its corresponding reducer, going against _Avoid Dispatching Many Actions Sequentially_.

### Components colocated with actions creators and reducers

In addition to structuring action creators and reducers together, the Style Guide also shows components (`Todos.tsx`) structured alongside the action creators and reducers (`todosSlice.ts`). I've always thought of the 'tree of Redux state' as independent to the 'tree of React components' - being able to use a single version of truth piece of state from Redux across many components in the application is where I've extracted lots of value from Redux.

If many different components want to use a single version of truth piece of state then the tendency would be for more and more code to migrate to `common`. This feels like abuse of `common`, and perhaps a smell that Ducks is not the optimal structure for some projects.

## What should be changed to fix the problem?

If my reasoning is not flawed, state at least that a deliberate choice must be made between Ducks style or rails-style (see https://redux.js.org/faq/code-structure), and outline pros/cons of each. My own opinion (at present) would be to advise that if unsure, prefer the rails-style.

I'd be happy to create a pull request with proposed edits if this is deemed a valid direction.
There's a lot of great docs sites and teaching content out there, both for Redux and for things completely unrelated.  I'd like to see what **specific** things we can learn from these other sites and how we can apply those to improve the Redux docs.

## Suggested Sites for Comparison

This is not an exclusive list - if there's other good sites or tutorials we should learn from, please comment with the site and what ideas we should take inspiration from.

### Docs Sites

- React: https://reactjs.org
- Vue: https://vuejs.org/
- Angular: https://angular.io/docs
- Ember: https://guides.emberjs.com/release/ , https://api.emberjs.com/ember/release
- NgRx: https://ngrx.io/docs
- Django: https://docs.djangoproject.com/en/2.2/

### Tutorials

- [Dave Ceddia: A Complete React-Redux Tutorial for Beginners](https://daveceddia.com/redux-tutorial/)
- [Valentino Gagliardi: Complete React-Redux Tutorial for Beginners - The Definitive Guide](https://www.valentinog.com/blog/redux/) 
- [Mark Erikson: Redux Fundamentals Workshop slides](https://blog.isquaredsoftware.com/2018/06/redux-fundamentals-workshop-slides/)

### User Survey

I put up a survey over a year ago [asking for feedback on improving the docs](https://docs.google.com/forms/d/e/1FAIpQLSfzIkY3fXZ8PrQKScYMK0YoEgALfAK2qQ0mOj1_ibKv2qDTuQ/viewform).

[The survey results are browsable here](https://docs.google.com/forms/d/105xxZTBZysqol846loJ6czTY9CS0uA3zC0G62iv0sR4/viewanalytics).


### Dan's Thoughts

Dan specifically commented a while back on Twitter (https://twitter.com/dan_abramov/status/1039570011986321408):

> My biggest regret with Redux is explaining it in terms of API instead of how to “think in it”. I underestimated the temptation to twist it into a familiar conceptual model — and that it’s flexible enough to allow these contortions.
> When 10 people say “I dislike Redux” they might mean 10 completely different things. And they often have nothing to do with Redux itself, but with how the code they worked with is structured, or with the examples they learned from.
> If you copy paste some action creators and reducers handling FETCH actions over and over and over again, you’re probably using Redux in a different way than I imagined people would do. I’m sorry for all the repetitive code you felt you needed to write. That’s my fault.
> Same goes for having 20 actions with types like SET_A, SET_B, SET_C, and dispatching them from a long-ass async action creator. Also not how I imagined people would do it. Again, sorry I didn’t explain this clearly.