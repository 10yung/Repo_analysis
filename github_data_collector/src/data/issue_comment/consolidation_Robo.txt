### Overview
This pull request:

- [X] Fixes a bug
- [ ] Adds a feature
- [ ] Breaks backwards compatibility
- [ ] Has tests that cover changes
- [ ] Adds or fixes documentation

### Summary
Hide error output when printing has been disabled

### Description
Nothing should be printed if printing is disabled.
Before, successful messages were being hidden, but error exit codes were being printed out, even if `$task->silent(true);`
The function io() from Symfony is marked as deprecated:

```
    /**
     * Provide access to SymfonyStyle object.
     *
     * @deprecated Use a style injector instead
     *
     * @return \Symfony\Component\Console\Style\SymfonyStyle
     *
     * @see http://symfony.com/blog/new-in-symfony-2-8-console-style-guide
     */
    protected function io()
```

Should https://robo.li/getting-started/#io be removed or somehow amended for this new situation?

The documentation of Symony is not very verbose about those `style injectors`...

https://symfony.com/doc/current/console/style.html


### Steps to reproduce
I am using an `Ssh` task with a global `stopOnFail`, with Robo 1.4.11 called in a non-interactive terminal.

Here is a basic example that reproduces the issue:
```php
  public function test() {
    $this->stopOnFail();

    $sshTask = $this->taskSshExec();
    $sshTask
      ->interactive(FALSE)
      ->exec('echo "hello"')
      ->exec('invalid_cmd')
      ->run();
  }
```

### Expected behavior
The "hello" output should only be printed once.

### Actual behavior
The output is printed three times:
```
 echo "hello" &&
 invalid_cmd'
hello
bash: invalid_cmd: command not found
 [Remote\Ssh]  hello
  Time 0.367s
 [Remote\Ssh]  Exit code 127  Time 0.367s
 [notice] Stopping on fail. Exiting....
 [error]  Exit Code: 127 
 [error]    in task Robo\Task\Remote\Ssh 

  hello
```

I think one duplicate is caused by the global `stopOnFail` and another one is caused by the SSH class.

This does not happen in interactive mode.

### System Configuration
PHP 7.2.24 on Linux Mint 19.3.

### Steps to reproduce

Installation instructions point to `https://robo.li/robo.phar` for download.

### Expected behavior

Download of latest stable version 2.0

### Actual behavior

Download of version 1.4.10
### Steps to reproduce
Add a Symfony 5 package to your `composer.json` file:

```json
{
  "require": {
    "symfony/process": "^5.0.0"
  }
}
```

### Expected behavior
The installation of the Symfony 5 package succeeds.

### Actual behavior

```shell
$ composer update
Loading composer repositories with package information
Updating dependencies (including require-dev)
Your requirements could not be resolved to an installable set of packages.

  Problem 1
    - consolidation/robo 2.0.0 requires symfony/process ^4 -> satisfiable by symfony/process[4.0.x-dev, 4.1.x-dev, 4.2.x-dev, 4.3.x-dev, 4.4.x-dev, v4.0.0, v4.0.0-BETA1, v4.0.0-BETA2, v4.0.0-BETA3, v4.0.0-BETA4, v4.0.0-RC1, v4.0.0-RC2, v4.0.1, v4.0.10, v4.0.11, v4.0.12, v4.0.13, v4.0.14, v4.0.15, v4.0.2, v4.0.3, v4.0.4, v4.0.5, v4.0.6, v4.0.7, v4.0.8, v4.0.9, v4.1.0, v4.1.0-BETA1, v4.1.0-BETA2, v4.1.0-BETA3, v4.1.1, v4.1.10, v4.1.11, v4.1.12, v4.1.2, v4.1.3, v4.1.4, v4.1.5, v4.1.6, v4.1.7, v4.1.8, v4.1.9, v4.2.0, v4.2.0-BETA1, v4.2.0-BETA2, v4.2.0-RC1, v4.2.1, v4.2.10, v4.2.11, v4.2.12, v4.2.2, v4.2.3, v4.2.4, v4.2.5, v4.2.6, v4.2.7, v4.2.8, v4.2.9, v4.3.0, v4.3.0-BETA1, v4.3.0-BETA2, v4.3.0-RC1, v4.3.1, v4.3.2, v4.3.3, v4.3.4, v4.3.5, v4.3.6, v4.3.7, v4.3.8, v4.4.0, v4.4.0-BETA1, v4.4.0-BETA2, v4.4.0-RC1] but these conflict with your requirements or minimum-stability.
    - Installation request for consolidation/robo ^2.0.0 -> satisfiable by consolidation/robo[2.0.0].
```

It would be cool if the version constraint of Symfony packages was relaxed. Something like:

```json
{
  "require": {
    "symfony/console": "^4.3.5 || ^5",
    "symfony/event-dispatcher": "^4 || ^5",
    "symfony/filesystem": "^4 || ^5",
    "symfony/finder": "^4 || ^5",
    "symfony/process": "^4 || ^5"
  }
}
```

See the Symfony policy about backward compatibility:
https://symfony.com/doc/current/contributing/community/releases.html#backward-compatibility

Fixes #909
```bash
composer require --dev phpstan/phpstan:^0.9.0
vendor/bin/phpstan analyze --level=0 -c phpstan.neon src/
```

then raise Level one by one

`phpstan.neon`

```yaml
parameters:
    level: max
    ignoreErrors:
        # Uses func_get_args()
        - '#^Method Robo\\Tasks::task\(\) invoked with [12345] parameters?, 0 required\.$#'
```

Thank you for considering!
See my [recent PR-s](https://github.com/consolidation/Robo/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+author%3Aszepeviktor).

Please make master the default branch as PR-s should go into it.

### Overview
This pull request:

- [x] Fixes a bug
- [ ] Adds a feature
- [ ] Breaks backwards compatibility
- [ ] Has tests that cover changes
- [ ] Adds or fixes documentation

### Summary
`Robo\Contract\IOAwareInterface`

### Description

not done by a human, props. @phpstan
### Overview
This pull request:

- [x] Fixes a bug
- [ ] Adds a feature
- [ ] Breaks backwards compatibility
- [ ] Has tests that cover changes
- [ ] Adds or fixes documentation

### Summary
Class ZipArchive does not have a constructor and must be instantiated without any parameters.

### Description
https://www.php.net/manual/en/class.ziparchive.php

props. @phpstan
