This library is incompatible with browserify-rails, because dependency modifications do not invalidate the cache.

I'm able to get turbo-sprockets-rails3 to ignore browserify-rails by dropping this line in an initializer, but this has the drawback of removing all benefit from using turbo-sprockets-rails3.

```
Rails.application.assets.register_preprocessor('application/javascript', BrowserifyRails::BrowserifyProcessor)
```

It looks like this was encountered with Sass/Less in the past, judging by the comments in `lib/sprockets/unprocessed_asset.rb`. I think the root problem is that turbo-sprockets-rails3 doesn't cache the list of dependencies, so it can't know when they change.

When I use this Gem, assets:precompile fails with Stack level too deep error.

Without this Gem there are no errors. What could be wrong? 
We have 1000+ themes with 50000+ files total assets ... tried increasing the ulimit size to the unlimited. but still an issue.

How to get rid of "stack level too deep" error?

rake aborted!
SystemStackError: stack level too deep
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/task.rb:183
Tasks: TOP => assets:precompile:all
rake aborted!
Command failed with status (1): [/Users/pussuser/.rvm/rubies/ruby-1.9.3-p5...]
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/file_utils.rb:67:in `block in create_shell_runner'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/file_utils.rb:57:in`call'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/file_utils.rb:57:in `sh'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/file_utils_ext.rb:37:in`sh'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/file_utils.rb:94:in `ruby'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/file_utils_ext.rb:37:in`ruby'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/actionpack-3.2.11/lib/sprockets/assets.rake:12:in `ruby_rake_task'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/actionpack-3.2.11/lib/sprockets/assets.rake:21:in`invoke_or_reboot_rake_task'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/actionpack-3.2.11/lib/sprockets/assets.rake:29:in `block (2 levels) in <top (required)>'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/task.rb:240:in`call'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/task.rb:240:in `block in execute'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/task.rb:235:in`each'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/task.rb:235:in `execute'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/task.rb:179:in`block in invoke_with_call_chain'
/Users/pussuser/.rvm/rubies/ruby-1.9.3-p551/lib/ruby/1.9.1/monitor.rb:211:in `mon_synchronize'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/task.rb:172:in`invoke_with_call_chain'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/task.rb:165:in `invoke'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/application.rb:150:in`invoke_task'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/application.rb:106:in `block (2 levels) in top_level'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/application.rb:106:in`each'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/application.rb:106:in `block in top_level'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/application.rb:115:in`run_with_threads'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/application.rb:100:in `top_level'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/application.rb:78:in`block in run'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/application.rb:176:in `standard_exception_handling'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/lib/rake/application.rb:75:in`run'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/gems/rake-10.4.2/bin/rake:33:in `<top (required)>'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/bin/rake:23:in`load'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/bin/rake:23:in `<main>'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/bin/ruby_executable_hooks:15:in`eval'
/Users/pussuser/.rvm/gems/ruby-1.9.3-p551@BertyApp/bin/ruby_executable_hooks:15:in `<main>'
Tasks: TOP => assets:precompile

real    23m29.210s
user    30m56.259s
sys 4m25.699s

Hey guys, thanks for this awesome gem. Is there a way to tell turbo-sprockets to always precompile certain assets, regardless of if the source file has changed?

When I run rake assets:precompiles, it gives me an error indicating

/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/shared_helpers.rb:78: warning: Insecure world writable dir /u01/app/oracle/product/11.2.0/dbhome_1/bin in PATH, mode 040777
rake aborted!
LoadError: cannot load such file -- sprockets/processed_asset
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets/sprockets_overrides/processed_asset.rb:1:in `require'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets/sprockets_overrides/processed_asset.rb:1:in`<top (required)>'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets-rails3.rb:2:in `require'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets-rails3.rb:2:in`block in <top (required)>'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets-rails3.rb:1:in `each'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets-rails3.rb:1:in`<top (required)>'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:76:in `require'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:76:in`block (2 levels) in require'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:72:in `each'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:72:in`block in require'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:61:in `each'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:61:in`require'
/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler.rb:134:in `require'
/home/developer/blog/config/application.rb:7:in`<top (required)>'
/home/developer/blog/Rakefile:5:in `<top (required)>'

& when i start rails server, it says

/usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets/sprockets_overrides/processed_asset.rb:1:in `require': cannot load such file -- sprockets/processed_asset (LoadError)
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets/sprockets_overrides/processed_asset.rb:1:in`<top (required)>'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets-rails3.rb:2:in `require'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets-rails3.rb:2:in`block in <top (required)>'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets-rails3.rb:1:in `each'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/turbo-sprockets-rails3-0.1.7/lib/turbo-sprockets-rails3.rb:1:in`<top (required)>'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:76:in `require'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:76:in`block (2 levels) in require'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:72:in `each'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:72:in`block in require'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:61:in `each'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler/runtime.rb:61:in`require'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/bundler-1.9.9/lib/bundler.rb:134:in `require'
    from /home/allerin/blog/config/application.rb:7:in`<top (required)>'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/railties-3.1.6/lib/rails/commands.rb:52:in `require'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/railties-3.1.6/lib/rails/commands.rb:52:in`block in <top (required)>'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/railties-3.1.6/lib/rails/commands.rb:49:in `tap'
    from /usr/share/ruby-rvm/gems/ruby-1.9.3-p0/gems/railties-3.1.6/lib/rails/commands.rb:49:in`<top (required)>'
    from script/rails:6:in `require'
    from script/rails:6:in`<main>'

I am using Rails 3.1.6 & in my gemfile, i have included
group :assets do
  gem 'turbo-sprockets-rails3', '0.1.7'
end

Please look into this issue & guide me if I am going incorrect.

Thanks
- Tejas

We are on Heroku with rails 3.2.X and i started trying to use redis as an asset cache.

``` ruby
config.assets.cache_store = :redis_store, { url:  ENV['REDIS_ASSET_CACHE_URL'],
  namespace: 'assets'
}
```

Sometimes it uses the cached assets within redis on deployment and sometimes it seems to recompile everything.  I had removed turbo-sprokets-rails3 thinking that i do not need it with the above configuration but now i am doubting myself.  Is turbo-sprockets-rails3 needed in addition to asset.cache_store?

thx!

-karl

Trying this out and I get the following error:

```
NoMethodError: private method `actions' called for <Rake::Task assets:precompile:primary => [assets:cache:clean]>:Rake::Task
/home/me/.rvm/gems/ruby-1.9.3-p547@gemset/gems/turbo-sprockets-rails3-0.3.14/lib/turbo-sprockets/tasks/assets.rake:116:in `block (3 levels) in <top (required)>
```

Line of code here:
https://github.com/ndbroadbent/turbo-sprockets-rails3/blob/98179a67745a0f3cccc671498d16c69939cf4312/lib/turbo-sprockets/tasks/assets.rake#L116

@ndbroadbent, Turbo sprockets seems to fail for the following case:
1. Make some changes in existing css file in a branch.
2. Run assets:precompile rake task.
3. The css file will be compiled by this gem.
4. Now go to old commit after which css file was modified.
5. The css file will not be compiled and it still contains the changes done to the css file in the later commit.

Expected Result: The css file should be compiled again as it has been restored to previous state.


We ran into an interesting issue in production.  With the exact same set of source app/assets, turbo sprockets on two machines produced two different files in public/assets, and thus different hashes and file names.  So an html file on one of our machines referred to a js file that didn't exist on another. Because of our load balancer we were getting badly rendered pages at random.

Interestingly they are only, very, very subtly different.  In 0.3.10 jquery becomes J, like "J.type(t)" and in 0.3.14 it becomes K, like "K.type(t)".  I don't think I see any other differences.

We traced this back to an upgrade and rollback of a release on some of the machines (others were left alone).  The upgrade went from turbo sprockets 0.3.10 -> 0.3.14.  When that happened on the release machines we got an incompatible set of files.  But when we downgraded it didn't regenerate the public/assets (this is kind of turbo sprockets job).  So with the same release on two machines we had incompatible assets between them.

I think I have traced this to one commit:
https://github.com/ndbroadbent/turbo-sprockets-rails3/commit/2979f05cb1700091736e8a485856cc3c56f1efe3

Before that release I believe Sprockets::SafetyColons is in the set of processors, but after that it isn't.  So I am guessing that is the incompatibility.

So....  
1) Are different versions of turbosprockets guaranteed to produce the same assets with the same files?  I am guessing not :)
2) What is the best practice in upgrading turbosprockets?  Always clean after upgrading?
3) If one downgrades one should also clean?
4) You can't really have multiple versions of turbosprockets on one set of load balanced machines can you?

The code was taken off @tdwalton's issue #90.  Adding a unit test for the error.  I left the version number the same. 
