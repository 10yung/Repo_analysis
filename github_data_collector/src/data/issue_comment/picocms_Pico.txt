It would be nice for the landing page for the project to be served using https on https://picocms.org/
<!--

Developer Certificate of Origin
===============================

By contributing to Pico, you accept and agree to the following terms and conditions (the *Developer Certificate of Origin*) for your present and future contributions submitted to Pico. Please refer to the *Developer Certificate of Origin* section in Pico's [`CONTRIBUTING.md`](https://github.com/picocms/Pico/blob/master/CONTRIBUTING.md#developer-certificate-of-origin) for details.

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

-->
Hi, this is a Polish translation of readme, sample contents and config comments :)
here's the first draft for the Italian translation of the file

<!--

Developer Certificate of Origin
===============================

By contributing to Pico, you accept and agree to the following terms and conditions (the *Developer Certificate of Origin*) for your present and future contributions submitted to Pico. Please refer to the *Developer Certificate of Origin* section in Pico's [`CONTRIBUTING.md`](https://github.com/picocms/Pico/blob/master/CONTRIBUTING.md#developer-certificate-of-origin) for details.

```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

-->

README_es.md and content-sample_es

It was exactly one year ago that we released Pico 1.0. Unfortunately Pico 2.0 isn't ready yet, but I think that it might get a nice tradition to release at least *something* on Christmas Eve. Thus I'm happy to announce the first, just-a-preview pre-alpha release of Pico's **brand new admin plugin**!

Click here to download the preview: [`pico-admin-preview.tar.gz`](https://github.com/picocms/Pico/files/671863/pico-admin-preview.tar.gz)

This archive contains a full installation of the current development build of Pico 2.0 (see #334) with all necessary dependencies. Navigate to http://example.com/pico/admin and follow the on-screen instructions to use Pico Admin.

You can find `pico-admin`'s source code at https://github.com/PhrozenByte/pico-admin

Merry Christmas and a Happy New Year 2017! ðŸŽ… ðŸŽ‰

![bildschirmfoto am 2017-01-08 um 22 59 22-fullpage](https://cloud.githubusercontent.com/assets/920356/21753905/839e55a6-d5f6-11e6-81bf-1ac7be1ce5a3.png)

@picocms @smcdougall @theshka 
This issue is intended to collect and discuss ideas about Pico ~~2.0~~ 3.0 *(renamed 2016-12-12)*, especially on how we can make Pico's plugin system more flexible than ever. The changes are very substantial and far reaching, therefore they can't make it into the soon-to-be-released Pico 2.0. ~~The changes break BC, therefore they [can't make it into Pico 1.1, but Pico 2.0](http://semver.org/).~~ Features planned for Pico 2.0 can be found in #270. **Feedback is appreciated!** :smiley:

### General

- Move Pico to the `\picocms\Pico` namespace and use a PSR-4 autoloader. Use `PicoDeprecated` to also provide all classes in the root namespace (using [`class_alias()`](https://secure.php.net/manual/en/function.class-alias.php)), otherwise this would break all existing plugins.
- Implement lazy loading using page objects (i.e. use simple objects instead of `$page` arrays)
  - Performance, Performance, Performance!
  - Implement `ArrayAccess`. Not only to maintain BC, but also to make the object's data easier to use (especially for non-experienced developers).
  - Pico initially loads just a list of all content files. `page.id` and `page.url` are available immediately. As soon as something else is accessed, the file's contents are read. Depending on what has been accessed, Pico processes either the YAML frontmatter or the Markdown contents (i.e. `$page['content']` won't be deprecated anymore).
  - Plugin developers should be able to implement dynamic values with callbacks (e.g. `PicoPage::addDynamicValue(string $key, callable $callback)`). This also allows plugin developers to implement lazy loading for custom values.
  - Open question: Should we still allow regular page arrays in `$pages` array? Probably not - plugin developers will have to differentiate both cases otherwise, what makes the whole feature a pain in the ass for them. Thus we need a conversion method, otherwise we would break all existing plugins.
    - Use `ArrayObject` or `ArrayIterator` instead of a regular `$pages` array. This allows us to convert page arrays to objects as soon as they are added.
    - However, PHP's built-in array functions (e.g. `array_keys()`) won't work anymore... According to that we must pass a regular array to the `onPagesLoaded` event for older plugins, otherwise we would pretty likely break many of them. `PicoDeprecated` could then iterate through the `$pages` array and convert them appropriately.
    - Use event system versioning?
- Implement a lazy page tree as better performing alternative to the regular pages array
    - Performance, Performance, Performance!
    -  Rather than always loading the whole page tree (a `Traversable`, `ArrayAccess` object like the pages array, see above), nothing is loaded by default.
    - When accessing the page tree for the first time, Pico discovers only pages directly inside `content/` (with the second level of lazy loading as elucidated above). Pages in sub-directories are accessible through a `children` key. However, the contents of directories aren't discovered until they are explicitly requested by accessing said `children` key.
    - Most themes build their page menu by iterating over pages on the first level anyway. This allows Pico to discover only the pages it needs to know, i.e. just the pages directly inside the `content/` dir and without any sub directory. This should heavily improve performance when a Pico instance is supposed to serve hundreds or thousands of pages.
    - Even the regular pages array is actually empty in the beginning. However, by accessing the variable (i.e. by iterating over it or by accessing a key) the whole page tree is being loaded (what shatters our efforts). We should encourage plugin/theme developers to use the page tree instead.
- Add [Unit Tests](https://phpunit.de/).
- Split `Pico::run()` into multiple public methods ("phases"), but still call them through `Pico::run()` (init, request URL, loading contents, evaluating contents (YAML + Markdown), page discovery, page rendering (Twig)).
- Use `PicoMarkdownParser`, `PicoYamlParser` and `PicoTemplateEngine` instead of `\Parsedown`, `\Symfony\Component\Yaml\Parser` and `\Twig_Environment` as type hints and add appropriate wrapper classes for Parsedown, Symfony YAML and Twig, allowing one to extend/replace them completely.
  - Also see cancelled "replace YAML/Parsedown/Twig" ToDo below.
- Drop all remaining pre-v1.0 behavior from `PicoDeprecated`, also remove v1.0 behavior with a notable performance impact
- Upgrade to Symfony YAML 3.x (Symfony YAML 2.8 reaches end-of-life 11/2019); this will force us to drop support of PHP 5.3 and PHP 5.4
- Think about how users can easily install plugins with dependencies when they aren't using `composer`, but a pre-bundled release
- Allow theme developers to register meta headers and change Twig's default config (maybe using a `config.yml` in the theme's dir?)

### Plugin event system

- Don't trigger all events on all plugins. Let plugins register the events they want to use instead. This heavily increases performance with a large number of plugins, because `method_exists` calls are comparatively expensive compared to a simple `foreach` per event.
  - Open question: Either introduce a new `onSinglePluginLoaded` event or a new `PicoPluginInterface::getEvents()` method.
    - The latter breaks BC, but with this new approach, we must refactor `AbstractPicoPlugin::handleEvent()` anyway, therefore we probably can't implement it without breaking BC one way or the other.
    - We can circumvent this by letting `\AbstractPicoPlugin` and `\picocms\Pico\AbstractPlugin` differ in functionality (i.e. the first mentioned implements the `getEvents()` method in a BC way by examining a `ReflectionClass` of the plugin, or by letting `\PicoPluginInterface` lack the `getEvents()` method entirely).
- Allow plugins to return `false` on preliminary events (e.g. `onContentLoading`) to prevent Pico from performing a specific processing step (`Pico::run()` skips `Pico::loadFileContent()`). Returning `true` or `null` works as with Pico 1.0 and changes nothing. The subsequent event is still triggered (`onContentLoaded`), but the payload variable (`$rawContent`) is empty. The event is triggered with special priority on this plugin (regardless of the regular processing order), so it can set the variable before any other plugin receives the event.
  - Example:
    - A markdown cache plugin returns `false` during `onMetaParsing` and `onContentParsing` to load both meta data and the parsed contents from its cache.
  - Affected Events:
    - `onContentLoading` (completely skips `on404Contentâ€¦` events) and `onContentLoaded`
    - `on404ContentLoading` and `on404ContentLoaded`
    - `onMetaParsing` and `onMetaParsed`
    - `onContentParsing` (simulates `onContentPrepared`), `onContentPrepared` and `onContentParsed`
    - `onPagesLoading` (`onSinglePageâ€¦` events will be simulated) and `onPagesLoaded`
    - `onSinglePageLoading` (new event) and `onSinglePageLoaded`
    - `onPageRendering` and `onPageRendered`
- Allow plugins to return `false` on the `onRequestUrl` or `onRequestFile` events to completely skip Pico's processing. The only remaining event to trigger is `onOutput` (new event that is only triggered when Pico's processing is skipped) right before Pico returns `$output`.
  - Example:
    - A static HTML cache plugin returns `false` during `onRequestFile`, bypasses Pico's processing completely and returns the cached contents during `onOutput`.

### New official plugins

- Markdown cache
- Static HTML cache
  - Save rendered output of pages to static HTML files
  - Rely on OS to detect file changes (last modification time of `.md` files)
  - Add `Cache: No` meta header to prevent pages from being cached
  - Add a event to let plugins "register" non-content pages for caching (should be triggered right after `onConfigLoaded` to allow plugins to change their behavior when caching is requested)
  - Explicitly allow combining statically cached and dynamic pages
  - Open questions
    - What happens when a page is added (i.e. page navigation changes)?
    - What happens when a plugin or theme is added/updated/removed?
    - How to determine all URLs that need to be parsed? Markdown files don't necessarily have a 1:1 relation to pages, just think of collections or hidden meta files
      - Ignore files and directories starting with a `_`
      - Allow users to explicitly specify the URL of a page
  - Use this feature to allow Pico to act as a static website generator (allow plugins to distinct between "static HTML cache" and "static website generator" mode)
    - Use Pico (with Travis, ~~PHP's development server and `wget -r`~~) for our website rather than Jekyll
  - Plugin plugins (:smile:):
    - Add a `URLs` sequence meta header to support alternative URLs (like [Jekyll's Redirect From plugin](https://help.github.com/articles/redirects-on-github-pages/)
- Search (using [Lucene](https://en.wikipedia.org/wiki/Lucene)?)
  - Problem: How to determine the URL of a found Markdown file? Markdown files don't necessarily have a 1:1 relation to pages, just think of collections or hidden meta files
  - Possible solution: Use a static HTML cache and search in the HTML files
  - Possible solution: Do the exact same things as the static HTML cache (see above)
- Multilanguage (`i18n`)
  - Contents: use language-specific content directories or file extensions?
  - Themes: use [PHP `intl`](https://secure.php.net/manual/de/book.intl.php) and [`Twig_Extensions_Extension_Intl`](http://twig.sensiolabs.org/doc/extensions/intl.html)
  - References: #335
- Performance statistics: See https://github.com/picocms/Pico/issues/317#issuecomment-226940379
- Import plugins to import contents of other CMS (e.g. WordPress, see https://github.com/gilbitron/WordPress-to-Pico-Exporter)
  - Use a HTML to Markdown converter?
- Data Files
  - Support independent (meta) data files (e.g. `content/catalog.yml`)
  - The files are accessed similar to pages (e.g. `{{ data.catalog }}`).
  - A data file named after a markdown file (e.g. both `content/catalog.yml` and `content/catalog.md` exist) is non-recursively merged into the page's meta data (i.e. into `{{ pages.catalog.meta }}`). However, the YAML frontmatter takes preference and the data file can still be accessed via `{{ data.catalog }}`.
  - ~~The same happens for all pages (non-recursive) in a directory if there's a data file with the same name as the directory (e.g. `_collection.yml` and `_collection/` directory). You can enforce recursion for e.g. `_collection/subdir/` by creating `_collection/subdir.yml`.~~
- Redirect pages (like [Jekyll's Redirect From plugin](https://help.github.com/articles/redirects-on-github-pages/))

### Not planned anymore

- ~~Allow a _single_ plugin to hook into Pico to basically replace YAML/Parsedown/Twig with something different. Rather than hooking into the instantiation of `\Symfony\Component\Yaml\Parser` in `Pico::parseFileMeta()`, `Pico::registerParsedown()` and/or `Pico::registerTwig()`, it should be possible to replace the `Pico::parseFileMeta()` method, the `Pico::prepareFileContent()`/`Pico::parseFileContent()` methods (+ the `markdown` Twig filter in `PicoTwigExtension`) and/or the call of `Pico::$twig->render()`. Otherwise the plugin needs to re-implement the internal structures and workings of the YAML parser/Parsedown/Twig, what isn't desirable. I'm currently not sure about how this interacts with the `$twig` parameter of the `onPageRendering` event (maybe drop the parameter and add a new `onTwigRegistered` event?). The plugin needs to be registered explicitly in `config/config.php` to work.~~
  - ~~Example (quite a stretch):~~
    - ~~Instead of parsing Markdown, parse MediaWiki syntax.~~