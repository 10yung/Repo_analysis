https://github.com/twitter/secure_headers/blob/master/README.md#license says:

> Licensed under the Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0

`LICENSE` contains the text of the MIT license.

GitHub picks up the MIT license, but I ran into an issue with license detection because of the `README.md` license. Presumably the exact licensing situation should be fully spelled out and consistent?
Allow the following header to be parsed without throwing an exception:

  `Set-Cookie: name=value; Max-Age=315360000; domain=example.com; path=/; SameSite=Strict;; secure`

It's not valid - https://tools.ietf.org/html/rfc6265#section-4.1.1 - but it
shouldn't result in a nil exception.

## Background

We ran into an issue with a trusted client sending Set-Cookie headers
which were invalid and which we were proxying to the end user.

The headers were in the form:

```Set-Cookie: name=value; Max-Age=315360000; domain=example.com; path=/; SameSite=Strict;; secure```

When SecureHeaders::Cookie#parse encounters the ";;" it blows up because

```ruby
      cookie.split(/[;,]\s?/).each do |pairs| # pairs == ""
        name, values = pairs.split("=", 2)    # pairs.split() => []
                                              # ie. name == values == nil
        name = CGI.unescape(name)             # raises exception
```

ie.
```bash
$ for rb in 2.0 2.1 2.2 2.3 2.4 2.5 2.6; do chruby-exec $rb -- ruby -r cgi -e 'p [RUBY_VERSION, "".split(/=/,2)]; p CGI.unescape(nil)'; done

["2.0.0", []]
/opt/rubies/2.0.0-p648/lib/ruby/2.0.0/cgi/util.rb:17:in `unescape': undefined method `tr' for nil:NilClass (NoMethodError)
        from -e:1:in `<main>'
["2.1.10", []]
/opt/rubies/ruby-2.1.10/lib/ruby/2.1.0/cgi/util.rb:18:in `unescape': undefined method `tr' for nil:NilClass (NoMethodError)
        from -e:1:in `<main>'
["2.2.6", []]
/opt/rubies/ruby-2.2.6/lib/ruby/2.2.0/cgi/util.rb:18:in `unescape': undefined method `tr' for nil:NilClass (NoMethodError)
        from -e:1:in `<main>'
["2.3.6", []]
/opt/rubies/ruby-2.3.6/lib/ruby/2.3.0/cgi/util.rb:19:in `unescape': undefined method `tr' for nil:NilClass (NoMethodError)
        from -e:1:in `<main>'
["2.4.0", []]
-e:1:in `unescape': no implicit conversion of nil into String (TypeError)
        from -e:1:in `<main>'
["2.5.0", []]
Traceback (most recent call last):
        1: from -e:1:in `<main>'
-e:1:in `unescape': no implicit conversion of nil into String (TypeError)
["2.6.5", []]
Traceback (most recent call last):
        1: from -e:1:in `<main>'
-e:1:in `unescape': no implicit conversion of nil into String (TypeError)
```

* [X] Has tests
* [ ] Documentation updated

# Feature Requests

Currently, the view_helpers don't include a `nonced_javascript_packs_with_chunks_tag`. This would be a handy addition for those folks using `webpacker` with split chunks enabled.

See: https://github.com/rails/webpacker/blob/master/lib/webpacker/helper.rb#L83-L85
I'm looking to archive this and encourage forks but I have extracted the cookie functionality into a separate gem (https://github.com/oreoshake/cookies_and_cream) and it would be nice to have `secure_headers` wrap this gem so the code isn't maintained in two places.

My goal is to eventually upstream `cookies_and_cream` functionality into rails but it's going to need to go heavy on the railsisms and right now it's pretty much just an extract. 

I hope this is as simple as having `secure_headers` include the gem but the tests will probably need to be reworked to reflect the different API.

I just upgraded to 6.1, which removed support for HPKP (in commit b208b8a). This change wasn't captured in the changelog, and it broke my build.

I'm not sure whether you'd want to just amend the changlog to reflect this, or pull 6.1 and cut a 7.0.
Hi! üëã

We started using SameSite configuration on a few of our cookies, I misread the docs, goofed, and did this:

```ruby
samesite: {
  strict: ['butter_cookie']
}
```

This does not cause a startup error, it just doesn't work, silently.

In other cases when I have made mistakes, secure_headers told me I was doing something wrong, e.g. `Unknown config directive: dogs=["better"]`. This caused a bit of head scratching because I have come to expect nice errors from here when I make a mistake (thanks for that!)

Is there a use where `samesite.strict` can be set to an array and do something useful? If not, does it make sense to validate that the `strict` key can only be assigned to a `TrueClass`, `FalseClass`, or a `Hash` via `is_a?`?

Along the same lines, if it _is_ a hash, it can also silently fail like so

```ruby
samesite: {
  strict: {
    rly: ['biscotti_cookie']
  }
}
```

So that leads me to a question of what is the philosophy around validation for configuration? I'm happy to take a stab at a PR to improve validation around cookie configuration, but I wanted to get my head around what should be done, first.
A discussion in https://github.com/twitter/secure_headers/issues/275 was about ensuring that rails gets support for feature policy and how it would require an API similar to the CSP API. It made me think we should evaluate current features and open issues to see what we'd also like to see in rails. 

* [ ] Compile a list
* [ ] Review it
* [ ] open PRs/issues
* [ ] üç®  

I'd like to deprecate and/or transfer ownership of this library eventually :smile:
One of the features of secure_headers is that it will do a lot to shrink the size of a complicated policy:

* Using child-src/frame-src based on bug from 2 years ago
* Removing protocols
* Deduping hosts
* Discard trailing entries (excluding unsafe-*) since * accomplishes the same.
* Discard any 'none' values if more directives are supplied since none may override values.
* Removes duplicates and sources that already match an existing wild card.
* Removes unsupported directives

But most of all, it leads to confusing output that sometimes actually prevents you from using CSP correctly.

What are the motivations for policy minifying?
* So humans can grok it?
* To save a few bytes?

I know Scott Helme recently published a blog post about twitter's monstrous CSP and how it could be minified. I think it's the place of this library to *suggest* improvements but not magically manipulate them with a few hundred lines of ruby code (no matter how well commented :smile).

So, how about modifying policies we can turn on some sort of dynamic linting, maybe that logs or raises exceptions in dev/test but is turned off in prod? 
One thing about CSP that I've always found extremely dangerous is it's ability to generate an enormous amount of traffic for a reporting endpoint if you hit browser bugs or use a misconfigured policy. This was a very real issue for us and something we've mitigated using a patch to only send a percentage of the reports to the reporting endpoint. We tune this number up and down based on the risk when we roll out an updated policy.

My question to the other users of `secureheaders` is whether or not this configuration option would be valuable to you? If so, I'm happy to open a PR with our base implementation and we can expand on it from there. To give you a bit of an idea around the implementation:

```rb
# initializer
config.csp_report_only = {
  # .. snip
  report_uri: %w(https://report-uri.io/example-csp-report-only)
  sample_rate: 0.3 # only send 30% of violations
}
```

The above configuration would then result in the `report-uri` directive for the policy only being appended 30% of the time and the remaining 70% would not have the `report-uri` directive at all. 
When I have the following as part of my csp header config:

```ruby
  config.csp = {
    frame_ancestors: %w[*.foo.com http://www.foo.com],
    preserve_schemes: true,
    ...
  }
```

and I'm serving my frame over https to be embedded on `http://www.foo.com`, the `http://www.foo.com` is required but is being removed by [minify_source_list](https://github.com/twitter/secureheaders/blob/2bb810a/lib/secure_headers/headers/content_security_policy.rb#L149-L162)

### Expected outcome

I expect to have `frame-ancestors *.foo.com http://www.foo.com` in my CSP header

### Actual outcome

The CSP header had only `frame-ancestors *.foo.com`

### Config

```ruby
SecureHeaders::Configuration.default do |config|
  config.csp = {
    default_src: %w['self'],
    script_src: %w['self'],
    frame_ancestors: %w[*.foo.com http://www.foo.com],
    preserve_schemes: true
  }
end
```

### Generated headers

`Content-Security-Policy: default-src 'self'; frame-ancestors *.foo.com; script-src 'self'`
