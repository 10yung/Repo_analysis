Recently, built-in shell commands stopped working for my with scm_breeze. Debugging my way around, I found the culprit to be the following line in my ".git.scmbrc" file:

https://github.com/scmbreeze/scm_breeze/blob/8f5693f3452dbfa181da073bf3090c9b92614a61/git.scmbrc.example#L127

What started happening for me (and sadly I cannot say why) is that instead of wrapping each of the commands in `scmb_wrapped_shell_commands` my shell treated the entire string as a single command to try and wrap, which unsurprisingly didn't work.

When I changed that line to:
```
scmb_wrapped_shell_commands=(vim emacs gedit cat rm cp mv ln cd ls less subl code)
```
Everything started working again.

I'd submit a pull request but this is the sort of thing that I suspect might only work for a specific set of environments and not others. If anyone has sufficient shell-fu to handle this that would be great, however.
Add a remark that ruby is more than just recommended (quick fix for https://github.com/scmbreeze/scm_breeze/issues/279)

I've run into this situation multiple times with fresh systems, so this PR contains a quick fix/reminder for the time until the ruby dependency is refactored out (if that's still a plan for the future).
So we've got new commands:
https://www.infoq.com/news/2019/08/git-2-23-switch-restore/

Being old, I think I'll struggle to pick them up :p  BUT!  It'd be great to get awesome scm_breeze aliases

Is support on the roadmap?

see #293 for the discovery of this bug.
Hi,

Firstly, thank you for these useful scripts! I have added SCM Breeze to the AUR (Arch Linux user package repository). The new package is available [here](https://aur.archlinux.org/packages/scm_breeze-git/).

The scripts and libraries are available system-wide in `/usr/share/scm_breeze` and `/usr/lib/scm_breeze`, but each user who wishes to use scm_breeze has to run `install-scm-breeze` (which corresponds to `install.sh`) to create `~/.git.scmbrc`. If #235 is fixed, running the installation script will become optional.

Let me know if you have suggestions, questions or comments.

Hello, I'm now having to use Ruby and I noticed my previous ticket #242 solution was to uninstall Ruby.  I am re-opening this issue for the ruby 2.6.3p62 version compatibility.

I also read the comment in #242 at the end, so I will try it now as well in hopes that it might be as simple as it looks.

**The following is the current issue:**

Whenever I attempt to run `gs` in bash, I always receive the following message, even though the amount of files changed is far less than 150 changed files.  I have tested this on multiple repos.  The first repo has 17 file changes.  The second repo has 10 file changes.

"There were more than 150 changed files. SCM Breeze has fallen back to standard `git status` for performance reasons."
This simply adds the linting.

Relates to #287

It may be best to also add the exceptions (or adjustments) to make this pass testing as-is, since the repo is in a usable state as-is.
Dear fellow maintainers,

You may remember me as the guy who dropped a significant PR a few months ago.

After fixing many quoting issues, I saw someone (I believe it was the original author, but could be wrong) making some commits with introduced another one or two of the same class of bug that I'd just spend a long time fixing.

(Please **always** quote `$@` unless you have an explicit reason not to, *including*  the non-usage  of arrays.)

I was thoroughly discouraged, and haven't contributed since (saving issues directly related to the code that I contributed.)

So, I'd like to raise an observation, and make a proposal.

My observation (right or wrong, please correct me) is that this project seems to have started as a convenience script, and the original author adds things without a code review process.

This code base seems to have new features added to do nifty timesaving tricks, but lacks an emphasis on correctness and robustness, prioritises features over quality, and lacks edge- and corner-case tests.

`sh` and its derivatives are arguably poorly designed languages and edge case foot-shooting is common.

I propose:

1. To catch bugs, that this project be [`shellcheck`](https://www.shellcheck.net) clean.

    Yes, sometimes `shellcheck` is annoying and gets it wrong. But it forces coders (via an ignore directive) to explicitly say "yes, I've read the cautions and really do know what I'm doing".... or (more commonly) to say: "damn, that's an edge case" and fix what will likely result in unexpected behaviour down the track.

1. That there be a review process for contributed code.
Commit a6eeebfa91e51ec7aae21f65e0df49e461a4ca68 breaks `scmb_wrapped_shell_commands` in ZSH. It makes the loop make only one iteration with `cmd` being equal to `scmb_wrapped_shell_commands`.
The workaround is to write `scmb_wrapped_shell_commands` in the config not as a string but as an array.
A change made in a6eeebf broke parsing of scmb_wrapped_shell_commands.
Rather than iterating over each command in the space-separated list, the
entire block of commands was treated as a single command.