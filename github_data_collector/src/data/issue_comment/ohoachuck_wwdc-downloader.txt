I downloaded every WWDC 2019 videos to an external HDD before abandoning unlimited, high speed internet. I've only checked the keynote while downloading and it looked perfect. However, now that I'm trying to watch any other video I'm noticing that there is no audio at all. (Not even in the mp4.part files.) Do you happen to have any idea why that is?

Environment:
```sh
xcode-select -v
xcode-select version 2354.

swiftc --version
Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
Target: x86_64-apple-darwin18.7.0
```

I've had the same crash(if I remember correctly) as #87 so I first compiled the script with `swiftc`.

```sh
swiftc -o wwdcDownloader wwdcDownloader.swift
```

After that this was the command I used while the `pwd` was my external HDD.
```sh
/path/to/compiled/script/wwdcDownloader --hd1080 --pdf --sample
```

Any help is greatly appreciated!
Can we use it to download subtitles
OK so for some reason when I run the downloader script `./wwdcDownloader.swift` it tries to download the WWDC 2019 Keynote video, which then fails, presumably because it isn't available. But I can't figure out why it's trying to do this. 

For extra strange points I popped the code into an Xcode command line project and it works fine (downloads them to whatever DerivedData directory the thing outputs to). I notice when it fails from the command line it's trying to download a 1080p keynote video but in Xcode it's just downloading 720p everything. 

In Xcode, where it succeeds

    Downloading HD videos in current directory 
    Let me ask Apple about currently available sessions. This can take some times (15 to 20 sec.) ...
    
    [Session 101] : Keynote
    Video : Video is not yet available !!!
    ...

On the command line, where it fails

    Downloading 1080p videos in current directory
    Let me ask Apple about currently available sessions. This can take some times (15 to 20 sec.) ...

    [Session 101] : Keynote
    Video : 101_1080p_keynote.mp4
    [Session 101] Getting 101_1080p_keynote.mp4:
    Stack dump:
    0.    Program arguments: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -interpret ./wwdcDownloader.swift -enable-objc-interop -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk -color-diagnostics -module-name wwdcDownloader 
    0  swift                    0x00000001062cbee3 PrintStackTraceSignalHandler(void*) + 51
    1  swift                    0x00000001062cb6bc SignalHandler(int) + 348
    2  libsystem_platform.dylib 0x00007fff5e42eb5d _sigtramp + 29
    3  libsystem_platform.dylib 0x00007f9c59f3c410 _sigtramp + 4222671056
    4  libswiftCore.dylib       0x00007fff5dc66c09 _swift_updateClassMetadataImpl(swift::TargetClassMetadata<swift::InProcess>*, swift::ClassLayoutFlags, unsigned long, swift::TypeLayout const* const*, unsigned long*, bool) + 265
    5  libswiftCore.dylib       0x00007fff5dc66c4b swift_updateClassMetadata2 + 27
    6  libswiftCore.dylib       0x000000010b26212b swift_updateClassMetadata2 + 2908730619
    7  libswiftCore.dylib       0x00007fff5dc6eb77 swift::MetadataCacheEntryBase<(anonymous namespace)::SingletonMetadataCacheEntry, int>::doInitialization(swift::ConcurrencyControl&, swift::MetadataCompletionQueueEntry*, swift::MetadataRequest) + 215
    8  libswiftCore.dylib       0x00007fff5dc643f3 swift_getSingletonMetadata + 579
    9  libswiftCore.dylib       0x000000010b26200f swift_getSingletonMetadata + 2908741215
    10 libswiftCore.dylib       0x000000010b25746d swift_getSingletonMetadata + 2908697277
    11 libswiftCore.dylib       0x000000010b25e90d swift_getSingletonMetadata + 2908727133
    12 libswiftCore.dylib       0x000000010b25f599 swift_getSingletonMetadata + 2908730345
    13 libswiftCore.dylib       0x000000010b25f5f8 swift_getSingletonMetadata + 2908730440
    14 libswiftCore.dylib       0x00007fff5dae5004 $sSTsE7forEachyyy7ElementQzKXEKF + 452
    15 libswiftCore.dylib       0x000000010b249b0f $sSTsE7forEachyyy7ElementQzKXEKF + 2910211279
    16 swift                    0x0000000102b6338d llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 365
    17 swift                    0x0000000102b69762 llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const* const*) + 1090
    18 swift                    0x0000000102132831 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef<char const*>, int&, swift::FrontendObserver*, swift::UnifiedStatsReporter*) + 58929
    19 swift                    0x000000010212092e swift::performFrontend(llvm::ArrayRef<char const*>, char const*, void*, swift::FrontendObserver*) + 6862
    20 swift                    0x00000001020be9ce main + 1246
    21 libdyld.dylib            0x00007fff5e2433d5 start + 1
    22 libdyld.dylib            0x000000000000000a start + 2715536438
    Bus error: 10

This is with source I fetched just now with the PRs that just got merged for video streams and ffmpeg and so forth. Presumably this script works for folks so I'm not sure what I'm doing wrong. 
Consider to add HomeBrew integration in order to make it easy to install?
Add ability to get URL of content only.
Fix narrative when non-video content is downloaded as it bugged me.

I'm trying to compile and run wwdc2016.swift on OSX 10.12.4 

Apple Swift version 3.1 (swiftlang-802.0.48 clang-802.0.38)
Target: x86_64-apple-macosx10.9

The code fails to compile.

[errors.txt](https://github.com/ohoachuck/wwdc-downloader/files/892212/errors.txt)

I think there's been some changes to the session pages, I had to adjust the regex for it to detect any sessions:

from 
`let pat = "\\b.*\\/videos\\/play\\/wwdc2016\\/([0-9]*)\\/\"><h5\\b"`
to 
`let pat = "\\b.*\\/videos\\/play\\/wwdc2016\\/([0-9]*)\\/\">.*"`

Not sure if the regex could be better.
First, thanks for the years of providing this tool. It's been very handy!

I commend you diving in to use Swift and Cocoa for this year's iteration. An unfortunate consuquence, I guess of the way that NSURLSession works, is when you run the tool on an external volume, the process is slowed down by the fact that NSURLSession downloads the file first to a temporary folder on the boot volume, and then the script copies the download to the destination folder. With each video comprising multiple GB of data, this causes a several minute delay on my Mac between the download of a video, and the beginning of downloading the next one.

It sure seems like an oversight that NSURLSession doesn't support specifying a volume on which the temporary download file should be saved.

I don't really expect a fix, just wanted to share my observation here in case somebody thinks of a clever/easy solution. I think that the "right" fix might unfortunately be moving away from NSURLSession's default downloader task

Now that Xcode 8 & Swift 3 have been released, I want to download all the WWDC 2016 Content but the wwdc2016.swift script doesn't work with Swift 3 and the Grand Renaming. I know all the serious developers downloaded this content a long time ago but I'm a NOOB with Swift so it would really help to have access to all the WWDC 2016 content. Thanks - Russell

Examples of errors output when I run the script:

./wwdc2016.swift:53:42: error: 'NSURLSessionDownloadDelegate' has been renamed to 'URLSessionDownloadDelegate'
class DownloadSessionManager : NSObject, NSURLSessionDownloadDelegate {
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                         URLSessionDownloadDelegate
./wwdc2016.swift:60:21: error: 'dispatch_semaphore_create' has been replaced by 'DispatchSemaphore.init(value:)'
    let semaphore = dispatch_semaphore_create(0)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~
