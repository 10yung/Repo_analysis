Is it only to me that updating the given nuget package to versions 16.3.0 or 16.4.0, I get the following error?

// Launch: 1 / 1
// Execute: dotnet "508ebb57-d066-4ffa-940a-c5b3428adb4e.dll" --benchmarkName "xxx.Createxxx(quantity: 100)" --job "InvocationCount=1, IterationCount=1, LaunchCount=1, UnrollFactor=1, WarmupCount=0" --benchmarkId 0 in <path>
Unhandled exception. System.BadImageFormatException: Could not load file or assembly '<path>\bin\Release\netcoreapp3.1\508ebb57-d066-4ffa-940a-c5b3428adb4e\bin\Release\netcoreapp3.1\508ebb57-d066-4ffa-940a-c5b3428adb4e.dll'. An attempt was made to load a program with an incorrect format.
File name: '<path>\bin\Release\netcoreapp3.1\508ebb57-d066-4ffa-940a-c5b3428adb4e\bin\Release\netcoreapp3.1\508ebb57-d066-4ffa-940a-c5b3428adb4e.dll'

(I just changed file names and paths).

Reverting back to version 16.2.0 (I think it's the default when creating new projects, at the moment), everything works again.

I'm at the airport, now. Later on I will create a minimal working example to show the problem.

I'm just curious if someone else saw it, or I have some other strange problem (but it's strange, because reverting the version, everything works again...).
I've got benchmarks which are taking an array as parameter, see below for a simplified example. I've added grouping via an attribute to my test class `GroupBenchmarksBy(BenchmarkLogicalGroupRule.ByCategory, BenchmarkLogicalGroupRule.ByParams)]` the problem is that the benchmark result is showing me the parameter type only without array size which makes the information useless.

### Benchmark code (simplified)
```
public IEnumerable<object[]> Arrays() 
{ 
 yield return new object[] { new int[200] };
 yield return new object[] { new int[400] };
 }

[ArgumentsSource(nameof(Arrays))]
public int Test(int[] data) { ... }
```
### Result currently (simplified)
|        Method |           data | 
|-------------- |----------- |
|     Test | System.Int32[] |

### Result expected
|        Method |           data | 
|-------------- |----------- |
|     Test | System.Int32[200] |

Can also be `int[200]` or `System.Int32[] { Length = 200}`
According to the docs https://benchmarkdotnet.org/articles/configs/exporters.html the default exporters are CSV, HTML and Markdown. I only want html but the docs don't say how to disable the rest.

I've tried adding the `[HtmlExporter]` attribute to my test class only but it did not helped. I'm running my tests with fluent style this way:

`var summary = BenchmarkRunner.Run<MyTest>(DefaultConfig.Instance.With(ConfigOptions.DisableLogFile));`
Similar to #994 

This sample benchmark does not increase the op/invocation on warmup when a method is marked with the [IterationCleanup] attribute:
```
public class TestBenchmark
    {
        [Benchmark]
        [ArgumentsSource(nameof(GetValues))]
        public int Case1(string value)
        {
            return value.Length;
        }

        [Benchmark]
        [ArgumentsSource(nameof(GetValues))]
        public int Case2(string value)
        {
            return value.Length;
        }

        [IterationCleanup]
        public void Clear()
        {
        }

        public IEnumerable<string> GetValues()
        {
            yield return "Value 1";
            yield return "Value 2";
        }
    }
```
The workload stall at 1. 

When removing the [IterationCleanup] attribute, the workload increase as usual.
Few users has reported to me that it's not obvious that in order to make `BenchmarkSwitcher` handle console line arguments, they must be passed to the `Run` method.

We should detect a situation where args were not passed to BDN, but are present via [Environment.GetCommandLineArgs](https://docs.microsoft.com/en-us/dotnet/api/system.environment.getcommandlineargs)

It should be just a few lines of code but should definitely improve the first user experience 
Fixes #1348.

It would be better to unify display text generation across all parameters, but cannot find a good place for a common method. Maybe a base class?
There is a difference of array representation in summaries depending on a value source. In case when `ArgumentsAttribute` is used an array is displayed as `Array[{array.Length}]`, but in case of `ArgumentsSourceAttribute` - the type name is used.

The bug can be simply reproduced using the `IntroArrayParam` sample:

https://github.com/dotnet/BenchmarkDotNet/blob/a3f76beebeaab9a7ff32f3af6a16d79094fea3f6/samples/BenchmarkDotNet.Samples/IntroArrayParam.cs#L10-L31

|                 Method |          array | value |       Mean |     Error |    StdDev |
|----------------------- |--------------- |------ |-----------:|----------:|----------:|
|           ArrayIndexOf | System.Int32[] |     4 |  5.7462 ns | 0.1177 ns | 0.1101 ns |
|           ArrayIndexOf | System.Int32[] |     4 |  3.9955 ns | 0.0771 ns | 0.0602 ns |
|          ManualIndexOf | System.Int32[] |     4 |  0.8766 ns | 0.0274 ns | 0.0243 ns |
|          ManualIndexOf | System.Int32[] |     4 |  2.9022 ns | 0.0588 ns | 0.0550 ns |
|           ArrayIndexOf | System.Int32[] |   101 | 25.7760 ns | 0.5521 ns | 1.4350 ns |
|          ManualIndexOf | System.Int32[] |   101 | 41.9487 ns | 0.3473 ns | 0.3079 ns |

The expected behavior is the same as `ArgumentsAttribute` has:

```csharp
[Benchmark]
[Arguments(new int[] { 1, 2, 3 }, 4)]
public int ArrayIndexOf(int[] array, int value)
    => Array.IndexOf(array, value);
```

|        Method |          array | value |      Mean |     Error |    StdDev |
|-------------- |--------------- |------ |----------:|----------:|----------:|
|  ArrayIndexOf |       Array[3] |     4 |  4.794 ns | 0.1270 ns | 0.2225 ns |

The same issue happens with parameters.
On Mac OS 10.14.6.
dotnet version 3.1.100

Using dotnet tool to create a BenchmarkDotNet templates project and run it in console (dotnet new benchmark --console-app). The generated project cann't built and print the error:
_error NU1201: Project XXXX is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0)._

I think the BenchmarkDotNet **version** referenced by the project **is not the right one**. Because I find the BenchmarkDotNet referenced in the .csproj file is **0.11.5**, and I change the version to **0.12.0**. The error is gone. 
I've setup my environment before in .NET Framework and my benchmarks worked really great in the past! Kudos for this great lib!

My current issue now is that I'm trying to run benchmarks in a new project, this time, in .NET Core 3.0. After writing my last benchmark and executing them, I stumbled upon this error: 

```
C:\Program Files\dotnet\sdk\3.0.100\Microsoft.Common.CurrentVersion.targets(4563,5): error MSB3030: Could not copy the file "C:\Users\Kevin.Avignon\Documents\Dev\GitHub\R.RC\Robotmaster.CollectionRecommendation\Robotmaster.CollectionRecommendation.Benchmarks\bin\Release\netcoreapp3.0\f66f5594-78e5-4bd4-a083-3d1539baf8a9\obj\Release\netcoreapp3.0\f66f5594-78e5-4bd4-a083-3d1539baf8a9.exe" because it was not found. [C:\Users\Kevin.Avignon\Documents\Dev\GitHub\R.RC\Robotmaster.CollectionRecommendation\Robotmaster.CollectionRecommendation.Benchmarks\bin\Release\netcoreapp3.0\f66f5594-78e5-4bd4-a083-3d1539baf8a9\BenchmarkDotNet.Autogenerated.csproj]
C:\Program Files\dotnet\sdk\3.0.100\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3101: Could not write state file "obj\Release\netcoreapp3.0\BenchmarkDotNet.Autogenerated.csprojAssemblyReference.cache". The file 'C:\Users\KavignonUserDir\Documents\Dev\GitHub\R.RC\Project\Project.Benchmarks\bin\Release\netcoreapp3.0\f66f5594-78e5-4bd4-a083-3d1539baf8a9\obj\Release\netcoreapp3.0\BenchmarkDotNet.Autogenerated.csprojAssemblyReference.cache' already exists. [C:\Users\KavignonUserDir\Documents\Dev\GitHub\R.RC\Project\Project.Benchmarks\bin\Release\netcoreapp3.0\f66f5594-78e5-4bd4-a083-3d1539baf8a9\BenchmarkDotNet.Autogenerated.csproj]
```

I made sure of the following before running my benchmarks: 
- Release mode
- Passing some arguments to the library: -m --allStats -f *
- Unchecked the option "Prefer 32 bit."
- My benchmarks functions are public

What's the catch here?
I'm benchmarking the backend of a web application with PostgreSQL as the db. We use dotConnect but it requires a dll to be signed with a licence key otherwise it fails connecting to the db. I can sign any dll using a set of cmd commands. But the problem here is that BenchmarkDotNet generates a new exe for every run.
So far I'm using the InProcess toolchain and have the benchmark project signed. But InProcess seems to have limits on the benchmark time. Thus, I'm looking for a way to intersect into the toolchain lifecycle, get the target exe name/path, and sign it.
Is it attainable somehow?