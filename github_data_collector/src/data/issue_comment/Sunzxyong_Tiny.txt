
Tiny.getInstance().source(bitmapDraw).asBitmap().withOptions(options).compress((isSuccess, bitmap, t) -> {
                        if (isSuccess) {
                           
                        } else {
                            
                        }
                    });
压缩代码如下：
Tiny.FileCompressOptions options = new Tiny.FileCompressOptions();
options.size = 100;
options.isKeepSampling = false;
FileWithBitmapResult result = Tiny.getInstance().source(filePath).asFile().withOptions(options).compressWithReturnBitmapSync();
return result.bitmap;

原图地址为：https://chaoxingqiu2.oss-cn-hangzhou.aliyuncs.com/images/qqimg.jpg
我是个小白，谁能给个使用的demo？
谢谢各位gei友
 public static Bitmap shouldKeepSampling(Uri uri, final Tiny.FileCompressOptions options) throws Exception {
        if (uri == null)
            return null;

        final Bitmap[] result = {null};
        if (UriUtil.isNetworkUri(uri)) {
            HttpUrlConnectionFetcher.fetch(uri, new HttpUrlConnectionFetcher.ResponseCallback() {
                @Override
                public void callback(InputStream is) {
                    byte[] decodeBytes = CompressKit.transformToByteArray(is);
                    if (options.isKeepSampling) {
                        BitmapFactory.Options decodeOptions = CompressKit.getDefaultDecodeOptions();
                        decodeOptions.inPreferredConfig = options.config;
                        result[0] = BitmapFactory.decodeByteArray(decodeBytes, 0, decodeBytes.length, decodeOptions);
                    } else {
                        result[0] = BitmapCompressor.compress(decodeBytes, options, true);
                    }
                }
            });

        } else if (UriUtil.isLocalContentUri(uri) || UriUtil.isLocalFileUri(uri)) {
            String filePath = UriUtil.getRealPathFromUri(uri);
            if (TextUtils.isEmpty(filePath))
                return null;
            if (Conditions.fileIsExist(filePath) && Conditions.fileCanRead(filePath)) {
                FileInputStream fis = null;
                File file = new File(filePath);
                try {
                    fis = new FileInputStream(file);
                    byte[] decodeBytes = CompressKit.transformToByteArray(fis);
                    if (options.isKeepSampling) {
                        BitmapFactory.Options decodeOptions = CompressKit.getDefaultDecodeOptions();
                        decodeOptions.inPreferredConfig = options.config;
                        result[0] = BitmapFactory.decodeByteArray(decodeBytes, 0, decodeBytes.length, decodeOptions);
                    } else {
                        result[0] = BitmapCompressor.compress(decodeBytes, options, true);
                    }
                } finally {
                    try {
                        if (fis != null)
                            fis.close();
                    } catch (IOException e) {
                        //ignore...
                    }
                }
            }
        }
        return result[0];
    }

在Android Q上直接new File()在去判断是否存在会失败

    private static Application getApplication() {
        Application application = null;
        Method method;
        try {
            method = Class.forName("android.app.AppGlobals").getDeclaredMethod("getInitialApplication");
            method.setAccessible(true);
            application = (Application) method.invoke(null);
        } catch (Exception e) {
            try {
                method = Class.forName("android.app.ActivityThread").getDeclaredMethod("currentApplication");
                method.setAccessible(true);
                application = (Application) method.invoke(null);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        return application;
    }

这段代码在android Q P上存在适配问题
libtiny.so: unused DT entry: type 0x6ffffffe arg 0x2f78
libtiny.so: unused DT entry: type 0x6fffffff arg 0x1
eglMakeCurrent: 0xa544afa0: ver 2 0
Bitmap format : RGBA_8888, width:1280, height:960 
Fatal signal 4 (SIGILL), code 1, fault addr 0xa3e3f918 in tid 7116 (pool-1-thread-1)

val options = Tiny.FileCompressOptions() 
val result = Tiny.getInstance()
            .source(photo)
            .asFile()
            .withOptions(options)
            .compressSync()
if (result.success) {
            File(result.outfile)
} else {
            photo
}
您好，我正在使用这个很好的压缩框架，但是又到一个问题，就是有个图片为12M，压缩的时候报OOM，我的设置为保持原图比例，但如果把这个保持原图比例改为false，就不会报OOM了，但是图片会模糊，上面字就看不清了，不符合业务需求，所以有什么方法解决？

## **Update for this version：**
* **Open source c compression code.**
* **Add synchronous compression.**
* **Add compressed directory Settings.**