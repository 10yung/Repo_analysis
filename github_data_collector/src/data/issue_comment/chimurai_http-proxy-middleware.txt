I have a server running at localhost:5000, and I'm using then http-proxy-middleware to connect my development client like so:

```
const proxy = require('http-proxy-middleware');
module.exports = function(app) {
    app.use(proxy('/auth/google', 
        { target: 'http://localhost:5000/' }
		 ));
    app.use(proxy('/api/*', 
        { target: 'http://localhost:5000/' }
    ));
}
```

But the proxy isn't working. I get the following:
```
Error: Unable to resolve module `./debugger-ui/debuggerWorker.d9da4ed7` from ``: 

None of these files exist:
  * debugger-ui/debuggerWorker.d9da4ed7(.native|.native.expo.ts|.expo.ts|.native.expo.tsx|.expo.tsx|.native.expo.js|.expo.js|.native.expo.jsx|.expo.jsx|.native.ts|.ts|.native.tsx|.tsx|.native.js|.js|.native.jsx|.jsx|.native.json|.json|.native.wasm|.wasm)
  * debugger-ui/debuggerWorker.d9da4ed7/index(.native|.native.expo.ts|.expo.ts|.native.expo.tsx|.expo.tsx|.native.expo.js|.expo.js|.native.expo.jsx|.expo.jsx|.native.ts|.ts|.native.tsx|.tsx|.native.js|.js|.native.jsx|.jsx|.native.json|.json|.native.wasm|.wasm)
    at ModuleResolver.resolveDependency (/Users/prikshetsharma/Documents/vendo/client/native/node_modules/metro/src/node-haste/DependencyGraph/ModuleResolution.js:163:15)
    at ResolutionRequest.resolveDependency (/Users/prikshetsharma/Documents/vendo/client/native/node_modules/metro/src/node-haste/DependencyGraph/ResolutionRequest.js:52:18)
    at DependencyGraph.resolveDependency (/Users/prikshetsharma/Documents/vendo/client/native/node_modules/metro/src/node-haste/DependencyGraph.js:282:16)
    at /Users/prikshetsharma/Documents/vendo/client/native/node_modules/metro/src/lib/transformHelpers.js:267:42
    at /Users/prikshetsharma/Documents/vendo/client/native/node_modules/metro/src/Server.js:1305:37
    at Generator.next (<anonymous>)
    at asyncGeneratorStep (/Users/prikshetsharma/Documents/vendo/client/native/node_modules/metro/src/Server.js:99:24)
    at _next (/Users/prikshetsharma/Documents/vendo/client/native/node_modules/metro/src/Server.js:119:9)
    at processTicksAndRejections (internal/process/task_queues.js:97:5)

[Unhandled promise rejection: Error: Network Error]
* http://127.0.0.1:19003/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&minify=false&hot=false:154704:26 in createError
* http://127.0.0.1:19003/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&minify=false&hot=false:154606:27 in handleError
* http://127.0.0.1:19003/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&minify=false&hot=false:32436:31 in dispatchEvent
* http://127.0.0.1:19003/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&minify=false&hot=false:31520:33 in setReadyState
* http://127.0.0.1:19003/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&minify=false&hot=false:31347:29 in __didCompleteResponse
* http://127.0.0.1:19003/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&minify=false&hot=false:7023:42 in emit
* http://127.0.0.1:19003/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&minify=false&hot=false:2774:49 in __callFunction
* http://127.0.0.1:19003/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&minify=false&hot=false:2487:31 in <unknown>
* http://127.0.0.1:19003/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&minify=false&hot=false:2728:15 in __guard
* http://127.0.0.1:19003/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&minify=false&hot=false:2486:21 in callFunctionReturnFlushedQueue
* [native code]:null in callFunctionReturnFlushedQueue
* http://localhost:19003/debugger-ui/debuggerWorker.d9da4ed7.js:4:907 in <unknown>
```

Why might this be?
<!--
  PLEASE READ THE FIRST SECTION :-)
-->

### Is this a question?

Yes!

I made [a StackOverflow post](https://stackoverflow.com/questions/59428358/setting-up-http-proxy-middleware-on-a-dynamic-route) for this question but it's been over 2 weeks now with no response, so I'm hoping I can get some help here.

I have some dynamic route namespaces defined by a config file. A config entry looks like this:

```yaml
  catalog:
    name: catalog
    address: https://catalog.foo.co
    type: page
    version: v1
```

When the browser makes a request to `/catalog/assets/styles.css`, the proxy should send that request to `https://catalog.foo.co/v1/assets/styles.css`. I've tried multiple ways to configure the proxy, as shown in the SO post, but none of them work. I see no evidence that the requests are even reaching the proxy code, since I've added hooks like the one below without observing any console output:

```js
      onProxyReq: (proxyReq, req, res) => {
        console.log("Hello I'm being proxied now! ", proxyReq, req, res);
      },
```

The server just responds with a 302. The proxy works fine for other routes I've defined, but I can't figure this one out.

I do have this proxy working using the `request` library with this code:

```js
  const assets = express.Router();
  app.use(`/${p.name}/assets`, assets);
  assets.get('*', async (req, res) => {
    return request(`${p.address}/${p.version}/assets${req.path}`).pipe(res);
  });
```

I'm just not sure how to correctly adapt it to use the http-proxy-middleware. Help is appreciated, thanks!

<!--
  If you answered "Yes":

    If this is a question on troubleshooting your setup; Stack Overflow would be a better place to ask for help.

    Please check if your question hasn't been already asked/answered on:
    - Stack Overflow: http://stackoverflow.com
    - Issue archive: https://github.com/chimurai/http-proxy-middleware/issues
    - Examples: https://github.com/chimurai/http-proxy-middleware/tree/master/examples
    - Recipes https://github.com/chimurai/http-proxy-middleware/tree/master/recipes

    Nodejitsu's `http-proxy` is providing the actual proxy functionality; You might find your answer in their:
    - documentation: https://github.com/nodejitsu/node-http-proxy
    - issue archive: https://github.com/nodejitsu/node-http-proxy/issues
    - examples: https://github.com/nodejitsu/node-http-proxy/tree/master/examples

    If this is a discussion, you may delete this template and write in a free form.

  If you answered "No":

    You may delete this part of template.
-->


I would like to use proxy with https://www.npmjs.com/package/http-server.

So if path does not match simply open http-server url and do not proxy it.

Example:

http://abc.com/ -> no proxy needed
http://abc.com/foo -> no proxy needed
http://abc.com/xyz-> proxy to xyz.abc.com

is this possible to do with this middleware?
The example code does not work as intended.

### Steps to reproduce

Use the example code:

```
var express = require('express');
var proxy = require('http-proxy-middleware');

var app = express();

app.use(
  '/api',
  proxy({ target: 'http://www.example.org', changeOrigin: true })
);
app.listen(3000);
```

### Expected behavior

This should create a proxy for `/api` to `http://www.example.org/api`. The debug output should look like this:

`[HPM] Proxy created: /api  -> http://www.example.org`

### Actual behavior

It creates a proxy for `/` to `http://www.example.org`. The debug output looks like this:

`[HPM] Proxy created: /  -> http://www.example.org`

### Workaround

As provided in the core concept in the README.md, move the `/api` from `app.use()` to `proxy()`. Like this:

```
app.use(
  proxy('/api', { target: 'http://www.example.org', changeOrigin: true })
);
```
This example works as intended, the debug output looks like this:

`[HPM] Proxy created: /api  -> http://www.example.org`

### Setup

This happens in 

express@4.14.0
http-proxy-middleware@0.20.0
node v10.15.3
Windows 10 1903 (Build 18362.418). 

I did not test this with other combinations yet. I hope i did not misunderstood anything. If so, feel free to tell me and close the issue :-). Thank you for this project!
Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/chimurai/http-proxy-middleware/network/alerts).

</details>
### Question
I want to dynamically change target for proxy, `router options`  as a function seems to be a good choice, but it's a sync function returns a target string.

Is there a way to do the async router function, something like this
```javascript
async function asyncRouterFunc(req) {
    const target = await getNewTargetBasedOnReq(req);
    return target;
}
```
### Is this a bug report?
Yes

### Steps to reproduce

I have poller in shared worker with header `If-Modified-Since`

1. run `webpack-dev-server` with proxy
2. Poller starts

### Expected behavior
`http-proxy-middleware` send 304 status, not 502

### Actual behavior

i have errors in console
```
[HPM] Error occurred while trying to proxy request /api/[API_METHOD] from localhost:3000 to http://[SERVER_IP]/ (HPE_INVALID_CONSTANT) (https://nodejs.org/api/errors.html#errors_common_system_errors)
```
and errors in `Network` in chrome devtools:
General:
```
Request URL: http://localhost:3000/api/[API_METHOD]
Request Method: GET
Status Code: 502 Not Modified
Remote Address: [::1]:3000
Referrer Policy: no-referrer-when-downgrade
```

Request Headers:
```
Accept: application/json, text/plain, */*
If-Modified-Since: Fri, 20 Dec 2019 12:41:54 GMT
Referer: http://localhost:3000/assets/worker.60f6a122912284b508fb.js
User-Agent: Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36
X-Requested-With: XMLHttpRequest
```

Response:
```
Error occured while trying to proxy to: localhost:3000/api/[API_METHOD]
```

But on server nginx log have:

```
"GET /api/[API_METHOD] HTTP/1.1" 304 20 "http://94.125.123.16/assets/worker.18dcf756e7fd7ec3befb.js" "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36"
```

304 - status, but proxy send me 502 status with `Not Modified` message

### Setup
webpack-dev-server configuration:
```
proxy: {
    '/api/**': {
      target: "http://[SERVER_IP]/",
      changeOrigin: true
    }
}
```

- http-proxy-middleware: 0.19.1(as webpack-dev-server@^3.1.3 dependencies)
- server: "webpack-dev-server": "3.1.3"

#### client info

Fedora 31 (5.3.16-300.fc31.x86_64)
node version: v12.13.1


The answer from my API that is calling with the proxy is really very big and the proxy does not support it. Have you ever encountered this problem, and do you have a solution, option for big data?


```
api.use(\'/funnel\', middle(), proxy({
  logLevel: "debug",
  target: config.bigDataFunnelUrl,
  pathRewrite: {
    '^/funnel/upload-csv': 'funnel/smatch/csv/collect_api',
    '^/funnel/update-funnel-analysis': 'funnel/command/update_funnel_analysis',
    '^/funnel/update-funnel': 'funnel/command/update_funnel_csv',
  },
}));
 ### Steps to reproduce

1) Goto https://github.com/chimurai/http-proxy-middleware/blob/master/recipes/https.md
2) Grab the basic proxy server example, save to file
3) npm install http-proxy-middleware --save
4) run the example

### Expected behavior

Script runs or something

### Actual behavior

SyntaxError: Unexpected token ...
    at createScript (vm.js:56:10)
    at Object.runInThisContext (vm.js:97:10)
    at Module._compile (module.js:549:28)
    at Object.Module._extensions..js (module.js:586:10)
    at Module.load (module.js:494:32)
    at tryModuleLoad (module.js:453:12)
    at Function.Module._load (module.js:445:3)
    at Module.require (module.js:504:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> (/root/node/node_modules/http-proxy-middleware/dist/context-matcher.js:5:20)
