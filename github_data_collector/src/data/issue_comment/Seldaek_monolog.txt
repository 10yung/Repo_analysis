just applied `php-cs-fixer fix` by the latest version of php-cs-fixer.
We actively use such formatter in production for a long time, so I decided to propose making it available for the community.

The formatter is useful with the following setup:

- Application is containerized and orchestrated using Google Kubernetes Engine (GKE);
- Application writes logs to stderr/stdout;
- Log entries are collected from stdout/stderr by GKE, then [forwarded to Stackdriver](https://cloud.google.com/monitoring/kubernetes-engine/).

The problem:
Stackdriver uses JSON-structured logs, but does not understand "level" field, therefore it cannot understand the level of log entry. On the other hand, level names match Monolog level names, the difference is just a field name ("severity" instead of "level" or "level_name").

Other references:
People use similar approach for other technical stack as well, for example Python article: https://medium.com/retailmenot-engineering/formatting-python-logs-for-stackdriver-5a5ddd80761c


Monolog version 1

As stated in https://github.com/Seldaek/monolog/issues/962, the `\MongoClient` is deprecated in php 7 and should no longer be used.

Unfortunately when using Symfony 4, we are still bound to monolog 1 (because of the monolog-bridge requiring monolog 1.x). And the hard dependence (without any `class_exists` checking) is causing a hard crash when attempting to use the MonologDBHandler.

I propose a simple `class_exists` solution, so the 1.x branch (and Symfony 4) can use the MongoDBHandler without needing to install a deprecated and outdated mongo client.

So for example:

```
if ((class_exists('\MongoClient') && $mongo instanceof \MongoClient) || $mongo instanceof \Mongo || $mongo instanceof \MongoDB\Client) {
    throw new \InvalidArgumentException('MongoClient, Mongo or MongoDB\Client instance required');
}
```

Hi, kdyby/monolog package is no longer maintained.
Hi!

Today we spent severe time debugging a processor :)

Intuitively we implement `ProcessorInterface` for its contract value, and being a core library type.

Turns out the Symfony bundle auto configures these as such, [tagging them](https://github.com/symfony/monolog-bundle/blob/72e798ccdcfd277a6bc88e934b43f618732e3561/DependencyInjection/MonologExtension.php#L124-L125) with `monolog.processor`

This effectively breaks https://symfony.com/doc/current/logging/processors.html#registering-processors-per-channel as it's tagged twice, thus the auto configured one has no channel causing it to be pushed to all loggers, instead of a channel specific one.

Perhaps we should have read

https://github.com/Seldaek/monolog/blob/f2d431523774cb675409669f0eec1e6cf127cc5c/src/Monolog/Processor/ProcessorInterface.php#L15

AFAIK the general purpose is type based autoconfiguration for DI, but maybe it's worth to create an additional `ChannelAwareProcessorInterface` for the same general purpose.

```php
interface ChannelAwareProcessorInterface extends ProcessorInterface {
    public static function getChannels(): string[];
}
```

Or add it to ProcessorInterface directly even :/

Thoughts?
`\Monolog\Formatter\GelfMessageFormatter`:

```php
    /**
     * Translates Monolog log levels to Graylog2 log priorities.
     */
    private $logLevels = array(
        Logger::DEBUG     => 7,
        Logger::INFO      => 6,
        Logger::NOTICE    => 5,
        Logger::WARNING   => 4,
        Logger::ERROR     => 3,
        Logger::CRITICAL  => 2,
        Logger::ALERT     => 1,
        Logger::EMERGENCY => 0,
    );
```

I needed to change this mapping a bit, and I wanted to do it by extending the base class, but of course it won't work because this field is private. I would also have to overwrite the format method, which is huge. Lots of code to copy. If the author followed the KISS design pattern, it would be great. I would suggest adding a method to obtain the GELF level. Or divided the format method into smaller fragments. Or did it protected field.
Hi,

Just a PR that remap new html colors on bootstrap ones, that IMO a lot of developers are visually used to :)
cf https://github.com/twbs/bootstrap/blob/master/site/data/colors.yml
(exepts for the `alert` where  i took the `critical` but darker)

before:
<img width="754" alt="before" src="https://user-images.githubusercontent.com/13205768/71901110-7e5e8800-315f-11ea-9f93-4e561fc092f0.png">

after:
<img width="759" alt="HtmlFormatter_ logLevels_color" src="https://user-images.githubusercontent.com/13205768/71900078-5837e880-315d-11ea-9a40-28a139964b72.png">

Monolog version 2

ElasticsearchFormatter should force all records to be strings, since ElasticSearch will fail on field types mixing in an index.

It would also make sense to not allow deep arrays, basically flatten arrays and make them scalar.
Like #1383 , we have some use case to proxy only for Slack.
Monolog version 1.12

Write your bug report here.
When I run composer update I get a list of warnings as Ambiguous class resolution.
When I check vendor folder there are 2 files of each class as Classname 2.php

`AbstractHandler 2.php			FilterHandler.php			LogglyHandler 2.php			RollbarHandler 2.php
AbstractHandler.php			FingersCrossed				LogglyHandler.php			RollbarHandler.php
AbstractProcessingHandler 2.php		FingersCrossedHandler 2.php		MailHandler 2.php			RotatingFileHandler 2.php
AbstractProcessingHandler.php		FingersCrossedHandler.php		MailHandler.php				RotatingFileHandler.php
AbstractSyslogHandler 2.php		FirePHPHandler 2.php			MandrillHandler 2.php			SamplingHandler 2.php
AbstractSyslogHandler.php		FirePHPHandler.php			MandrillHandler.php			SamplingHandler.php
AmqpHandler 2.php			FleepHookHandler 2.php			MissingExtensionException 2.php		Slack
AmqpHandler.php				FleepHookHandler.php			MissingExtensionException.php		SlackHandler 2.php
BrowserConsoleHandler 2.php		FlowdockHandler 2.php			MongoDBHandler 2.php			SlackHandler.php`

My Composer file is ;

> {
    "name": "laravel/laravel",
    "type": "project",
    "description": "The Laravel Framework.",
    "keywords": [
        "framework",
        "laravel"
    ],
    "license": "MIT",
    "require": {
        "php": "^7.1.3",
        "fideloper/proxy": "^4.0",
        "guzzlehttp/guzzle": "^6.4",
        "laravel/framework": "5.8.*",
        "laravel/tinker": "^1.0",
        "predis/predis": "^1.1"
    },
    "require-dev": {
        "barryvdh/laravel-debugbar": "^3.2",
        "facade/ignition": "^1.4",
        "fzaninotto/faker": "^1.4",
        "mockery/mockery": "^1.0",
        "nunomaduro/collision": "^3.0",
        "phpunit/phpunit": "^7.5"
    },

Any idea why this is happening? 