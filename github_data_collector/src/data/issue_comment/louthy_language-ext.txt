Fixes #699 

I arrived a this change (in the [second commit](https://github.com/louthy/language-ext/commit/4eda0278dd57a955d146db4c6d6c1e853bd5645c)) by trial-and-error with good guessing.  Or, said another way, I didn't really know what I was doing, but I found this solution that seems to work.

In particular, the parsing error message for the test case @Jmaharman gave in #699 (when trying to parse 4 digits but only given "12") is
> error at (line 1, column 3): unexpected end of stream, expecting digit

I think that is the correct error message.

The code I deleted allowed the `manyn` parser to return after processing fewer than `n` things.  I think this bug is partially due to copying and pasting the nearly identical code for the `many` and `manyn0` parsers, which do not have a minimum number of items they need to parse in order to return success.

The thing I understood the least was what error message to return.  I knew I wanted to return a parser error created from the function `EmptyError`, but I am totally guessing that the parser error to pass into that call should be `mergeError(error, t.Reply.Error)`.  It does seem like a good guess though, because the example error message that I shared above looks good to me.
I've found that manyn isn't failing if the input string isn't long enough to reach n by more than 1 away.

I added this test to ParsecTests and it fails:

```
[Fact]
public void ParseNTimesFailIfMoreThan1Away()
{
    var p = asString(manyn(digit, 4));

    var r = parse(p, "12").ToEither();
    Assert.True(r.IsLeft);
}
```

I believe it's all down to this line, although I can't understand why it's doing what it's doing to give any more pointers.

```
// eerr
return count == n
  ? ConsumedError<Seq<T>>(mergeError(error, t.Reply.Error))
  : EmptyOK(Seq(results), current, mergeError(error, t.Reply.Error));
```

P.S. Great library, thank you
I am heavily using `Validation<,>` right now to do some encoding and decoding (of binary data), and I am running into some missing functions.  I can explain via the existing validation test code.

-------------------

Consider this part of the validation test code.
https://github.com/louthy/language-ext/blob/2cc42b424ac44417d8b09fa61b270426d9ee95b0/LanguageExt.Tests/ValidationTests.cs#L267-L270

This code is not ideal because it only returns a validation error for `expMonth` when it is invalid even when `expYear` is also invalid.

My first instinct is to refactor this code to...
```C#
var monthYear =
    (ToInt(expMonth).Bind(ValidMonth),
     ToInt(expYear).Bind(PositiveNumber)
    ).Apply((m, y) => validToday(m, y))
     .Flatten(); // not defined
```
...but `Flatten()` isn't defined for `Validation<,>`.

My second instinct is to refactor this code to...
```C#
var monthYear =
    (ToInt(expMonth).Bind(ValidMonth),
     ToInt(expYear).Bind(PositiveNumber)
    ).Sequence()
     .Bind(t =>
     {
         var (m, y) = t;
         return validToday(m, y);
     });
```
...which works in this case because `Validation<,(,)>.Sequence()` is defined in ValueTuple2.Extensions.cs:
https://github.com/louthy/language-ext/blob/2cc42b424ac44417d8b09fa61b270426d9ee95b0/LanguageExt.Core/DataTypes/ValueTuple/Tuple2/ValueTuple2.Extensions.cs#L677-L678

However, in my case at work, I have a `ValueTuple` of arity seven.  There happens to be a file called [ValueTuple7.Extensions.cs](https://github.com/louthy/language-ext/blob/master/LanguageExt.Core/DataTypes/ValueTuple/Tuple7/ValueTuple7.Extensions.cs), but it doesn't contain the corresponding `Sequence()` extension method.

My third instinct is to refactor this code to...
```C#
var monthYear =
    (ToInt(expMonth).Bind(ValidMonth),
     ToInt(expYear).Bind(PositiveNumber)
    ).Apply(VTuple<int, int>)
     .Bind(t =>
     {
         var (m, y) = t;
         return validToday(m, y);
     });
```
...which works in my case because the function [`VTuple<,,,,,,>` (of arity seven) exists](https://github.com/louthy/language-ext/blob/2cc42b424ac44417d8b09fa61b270426d9ee95b0/LanguageExt.Core/DataTypes/ValueTuple/ValueTuple.Prelude.cs#L61-L62).  In fact, this form is how the arity-two `Sequence()` is implemented (after replacing the lambda expression `(a, b) => (a, b)` with the predefined function `VTuple<A, B>` (which [I only recently learned exists](https://github.com/louthy/language-ext/issues/694)!).

-----------

Can we add the missing `Flatten()` and `Sequence()` methods?
There has been such a vast number of significant improvements lately that I have been unable to keep up! :)

I am interested in using the new `Union` attribute, but I am a bit confused.  I was expecting there to be a way to exhaustively handle cases, especially by a method named `Match`.  There isn't a method by that name, and I don't see any other method that fits that description?

Is there a way to exhaustively handle all the cases in a `Union` type? 
I have a chain of functions which have the same signature 
```

Option<object> getNext(){
.. // some code
  return getInnernext();
}

Option<object> getInnerNext(){
// some code
}
```

so whatever is returned from getInnerNext is returned by getNext() as Some(Some(x))) or Some(None). Even the Map() functions aren't really helping and for each function we have to do Match(). how do we avoid an Option becoming another Option when returned in chain,
Hi,

I'm having some difficulties with customizing the equality logic that is generated with the `[Record]` attribute. Is it possible to easily customize the logic to perform a structural comparison of any `IEnumerable` fields?

I tried to include a custom `Ord<ImmutableList<MyType>>` in my project (which delegates all calls to `OrdEnumerable`) so that it would be used by `EqDefault`. After some trial and error, I actually got that to work, but unfortunately only while my application is running. The same code running in an NUnit test does not use the custom `Ord`, either because I'm doing something wrong, or because there's a bug in `ClassInstancesAssembly`, or both. From what I can figure, the `ClassInstancesAssembly` does not properly detect my referenced assemblies and so they are not scanned when running from NUnit.

Was I on the right track to begin with? Is there an easier way? The `EqAttribute `in `Attributes.cs` seemed very promising, but I'm either missing something or that attribute is no longer used. 

Any help would be vastly appreciated. Thanks!
There is no parseEnum wrapper for `Enum.TryParse(string value, bool ignoreCase, out TEnum result)`.

I'll submit a PR shortly
Just checking https://github.com/louthy/language-ext/releases/tag/3.3.34.

Question 1: Should/could generated classes be `partial` or otherwise be more customizable? I read that you decided against this but sometimes could be nice to add e.g. attributes to generated classes or overwrite `ToString()` etc. I see that opening the classes might create new problems but maybe there are other ways to reduce problem surface like letting the code-generator check for existing properties (of possible) or require that the custom class has some [IKnowWhatImDoingHere] attribute.

Question 2: Could two union types be compatible like this?
```
    [Union]
    public interface ShapeWithCorners
    {
        ShapeWithCorners Rectangle(float width, float length);
        ShapeWithCorners Prism(float width, float height);
    }

    [Union]
    public interface EasyShape
    {
        EasyShape Rectangle(float width, float length);
        EasyShape Circle(float radius);
    }
```
At the moment this will result in conflicting code. But technically it should be possible for the generated classes to implement both interfaces.
see https://github.com/louthy/language-ext/issues/550

I personally would avoid this style but I see no point in having `IfSome(Action)` without having `IfNone(Action)`. 

https://louthy.github.io/language-ext/LanguageExt.Core/LanguageExt/EitherAsync_L_R.htm

^ leads to a 404 not found page.