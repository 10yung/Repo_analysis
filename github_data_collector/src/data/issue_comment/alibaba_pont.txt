生成的类型定义文件能否用于做运行时数据校验？
比如使用 JSON schema 或者 Magic Type 校验后台接口返回的数据类型，
求相关的最佳实践吗
## Background(背景)
项目中的 prettierrc 可能来自团队的自定义配置，该配置在npm 包内

## Proposal(建议)
建议类似 .pretterrc.js .eslintrc.js 一样可以多支持一些配置

## Additional context(附加上下文)

## What kind of change does this PR introduce(这个 PR 引入了什么样的变化)?

- [ ] Bugfix(修正错误)
- [x] Feature(新功能)
- [ ] Refactor(重构)
- [ ] Build-related changes(与构建相关的更改)
- [ ] Other, please describe(其他，请描述):

## Does this PR introduce a breaking change(这次 PR 引入了一个重大变化吗)?

- [x] Yes(是)
- [ ] No(否)

If yes, please describe the impact and migration path for existing applications(如果是，请描述现有应用程序的影响和迁移路径):

## The PR fulfills these requirements(PR 符合以下要求)

- [x] All tests are passing(所有测试都通过)

## Other information(其他信息)

合并之前的 mocks 分支

## What happens(发生了什么)?
使用README中的transform生成api.d.ts报TS2694: Namespace 'defs.xxx' has no exported member 'yyyyy'.

## A clear and concise description of what the bug is(对错误的清晰而简明的描述).
当遇到
```
{
    "type":"object",
    "properties":{
        "id":{
            "type":"integer",
            "format":"int64"
        },
        "user":{
            "originalRef":"UserDto",
            "$ref":"#/definitions/UserDto"
        },
    },
    "title":"Apply"
}
```
这种类型嵌套的情况 api.d.ts 会报 error TS2304: Cannot find name 'UserDto'.

改成
```
  // 获取所有typeName
  let typeNames = JSON.stringify(mods).match(/"typeName":".+?"/g);

  typeNames = Array.from(new Set(typeNames))
    .map(item => item.split(':')[1].replace(/\"/g, '')) // 去重

  // 从 baseClasses 中取typeName的值----增加的部分
  data.baseClasses.forEach(cls => {
    let types = JSON.stringify(cls).match(/"typeName":".+?"/g);
    types = Array.from(new Set(types)) // 去重
      .map(item => item.split(':')[1].replace(/\"/g, ''));
    const nameSet = new Set([...typeNames, ...types]);
    typeNames = Array.from(nameSet);
  });
```
之后再过滤baseClasses可以解决上面的问题。
## Background(背景)

集团内有大量应用使用 `mtop` 作为请求工具，亟需 `pont` 支持！
## Background(背景)

A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
对问题的清晰而简明的描述。我总是很遗憾当…

## Proposal(建议)

Describe the solution you'd like, better to provide some pseudo code.
描述您想要的解决方案，最好提供一些伪代码。

## Additional context(附加上下文)

Add any other context or screenshots about the feature request here.
在此处添加有关功能请求的任何其他上下文或屏幕截图。

## What happens(发生了什么)?
pont updateMod、pont updateBo无效

## How To Reproduce(如何重现)

**Steps to reproduce the behavior(重现行为的步骤):**
1. 修改swagger.json，pont diff检查更新
2. 运行pont updateMod modName或者pont updateBo boName
3. 或者运行pont updateMod modName && pont generate或者pont updateBo boName && pont generate

**Expected behavior(预期行为)**
预期更新指定的模块或者基类代码，实际什么都没有发生

**Thinking&Try(思考及尝试)**
1. pont update运行后未持久化更新lock文件，也没有regenerate files
2. 在源码cmd.ts的updateBo和updateMod的action里调用manager.regenerateFiles即可解决update不生效问题(见图片)

![671428C5-1F04-4DD9-AA35-3417C26560DD](https://user-images.githubusercontent.com/10591960/68189388-203de900-ffe6-11e9-8f38-aeba9076a58e.png)


## Context(上下文)
- **pont Version**: pont-engine 0.3.4
- **Node Version**: v10.16.3
- **Platform(操作系统平台)**: OSX 10.13.1

## What happens(发生了什么)?

自动生成的Params，Response会报错

```ts
// pontTemplate.ts
import { CodeGenerator, Interface } from 'pont-engine';

export default class MyGenerator extends CodeGenerator {
  getInterfaceContent(inter: Interface) {
    const paramsCode = inter.getParamsCode();
    const bodyParams = inter.getBodyParamsCode();
    const method = inter.method.toUpperCase();
    const requestParams = bodyParams ? `params:Params,  bodyParams: ${bodyParams}` : `params:Params`;
    const urlReg = new RegExp('(\{([0-9a-zA-Z_]*)\})', 'g')

    return `
        /**
        * @description ${inter.description}
        */

      import * as defs from '../../baseClass';
      import MRequest from '../../../utils/request';

      export ${paramsCode}
      export type Response = ${inter.responseType};

      export async function request(${requestParams}): Promise<Response>{
        return MRequest(
          \`${inter.path.replace(urlReg, "$${params.$2}")}/\${params}\`,
          ${
      method !== 'GET'
        ? `{
                method:"${method}",
                ${bodyParams ? `data:bodyParams` : ''}
               }`
        : ''}
        );
      }
     `;
  }
}
````

## 生成的代码截图
问题1:
没有初始化表达式，且未在构造函数中明确赋值
![image](https://user-images.githubusercontent.com/30042334/68110892-d04d1c80-ff28-11e9-85c9-a0758176adb5.png)
![image](https://user-images.githubusercontent.com/30042334/68110904-d6db9400-ff28-11e9-9cd5-aae6b6947ad4.png)

问题2:
2.类型“XX”不是泛型类型
![image](https://user-images.githubusercontent.com/30042334/68111004-14402180-ff29-11e9-87d6-973e38742354.png)
![image](https://user-images.githubusercontent.com/30042334/68111013-199d6c00-ff29-11e9-833e-36eecf25d0dd.png)
**Detail**
![image](https://user-images.githubusercontent.com/30042334/68111028-24f09780-ff29-11e9-8106-6f32a38db4d8.png)

## 想要解决的问题
1. 问题1的这种报错能不能通过设置来避免，还是只能通用禁用tslint 规则
2. 问题2 要怎么解决，是swagger 的问题，还是哪里需要配置


## Background(背景)

最近一直在关注pont项目，今天发现pont-engine发布了新的release，想找release log看看变化，结果没找到😅

## Proposal(建议)

建议维护release log，标注本次release包含哪些bug fixes及其对应的issue，有哪些new feature，是否有breaking changes等等


## What happens(发生了什么)?
后端的某个方法名称为js关键字，导致生成结果出现问题
# Mini Showcase Repository(迷你展示库)

> Provide a mini GitHub repository which can reproduce the issue(提供一个可以重现问题的小型 Github 存储库).

<!-- https://github.com/YOUR_REPOSITORY_URL -->

## How To Reproduce(如何重现)

**Steps to reproduce the behavior(重现行为的步骤):** 1. 2.

**Expected behavior(预期行为)** 期望过滤掉关键字，当出现关键字时，用非关键字替换掉

## Context(上下文)

- **pont Version**:0.2.5
- **Node Version**:v10.15.3
- **Platform(操作系统平台)**:macOS Mojave 10.14.2
