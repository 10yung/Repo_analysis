cargo-make is deficient in the following areas:

1. **Config variables**: Ideally, the end user can customize compile-time constants such as the baudrate. Something like, but not necessarily, kconfig is desired.
2. **Duplication**: Each mainboard has a Makefile.toml which is nearly identical. Ideally, some of the logic here can be shared across mainboards.
3. **Incremental builds**: Changes to some files do not trigger a rebuild. A few times, I have accidentally used an older build.
In Tock on OpenTitan, we discovered that Tock was broken by https://github.com/lowRISC/opentitan/commit/4425b287f8d2c6de6f10410192ee7ef761c71189, as described in https://github.com/tock/tock/pull/1460#issuecomment-573380139.  It appears that oreboot has the same problem:  its layout will need to be updated to reflect the flash header that the OpenTitan boot ROM is looking for.  To get oreboot working after https://github.com/lowRISC/opentitan/commit/4425b287f8d2c6de6f10410192ee7ef761c71189, the flash header will need to be at 0x20000000; this fix gets oreboot working again:

```diff
diff --git a/src/mainboard/opentitan/crb/link.ld b/src/mainboard/opentitan/crb/link.ld
index 712cec6cc3..691e922eef 100644
--- a/src/mainboard/opentitan/crb/link.ld
+++ b/src/mainboard/opentitan/crb/link.ld
@@ -28,6 +28,10 @@ SECTIONS
 {
 
     . = 0x20000000;
+    .flash_header :
+    {
+        LONG(_boot);
+    }
     .bootblock :
     {
         KEEP(*(.bootblock.boot));
```

Happy to open a pull request on this, if desired.  Though do note that integrating this fix will mean that oreboot will now fail to function on any OpenTitan that pre-dates https://github.com/lowRISC/opentitan/commit/4425b287f8d2c6de6f10410192ee7ef761c71189.  That there is no versioning in the flash header makes it too easy for OpenTitan payloads to break; an OpenTitan issue will be raised on that.
Signed-off-by: Gan Shun Lim <ganshun@gmail.com>
None of this builds. This represents what I think is the
bare minimum set of files from coreboot we need to work with.
There are some things the Go tool could do better - eg. finding available values
None
Signed-off-by: pallaud <plaud@google.com>
* "No such file or directory"  error message should also print the file which could not be found.
* If a file is too big to fit into the flash area, an error message should be printed. Currently, the tool silently does something bizarre.
* If two or more areas overlap, print an appropriate error message.
* Automatically calculate the offset of the area based on the sizes of the previous areas.
Some large binaries (like a kernel and initramfs) were checked into the repo early on for testing. They should be removed from the history.
The checksum would check the integrity of the payload and print an error if it doesn't match. This isn't for security.