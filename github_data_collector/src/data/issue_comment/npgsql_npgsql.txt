Fixes #2795
This reverts #2703 which was erroneous.
This may be intentional, I wasn't sure, so I thought I would file in case it's a bug.

```
NpgsqlConnection connection = .... // make a connection
connection.TypeMapper.UseNodaTime();
connection.ReloadTypes();
```

`ReloadTypes` will revert back to pre-`UseNodaTime` call.
### Steps to reproduce

```
using System;
using Dapper;
using Npgsql;
using Npgsql.Logging;

namespace NpgsqlQueryLogBug
{
    class Program
    {
        static void Main()
        {
            NpgsqlLogManager.IsParameterLoggingEnabled = true;
            NpgsqlLogManager.Provider = new ConsoleLoggingProvider(NpgsqlLogLevel.Debug);

            using var connection = new NpgsqlConnection("DATABASE=test;PORT=8001;USER ID=postgres;HOST=localhost;");
            connection.Query("select @array", new { array = new[] { 1, 2, 3 } });

            Console.ReadLine();
        }
    }
}

```

### The issue
**Actual** log:
> Connection opened
Executing statement(s):
        select $1
        Parameters:     $1: **System.Int32[]**

**Expected** to see array values in log




Currently numbers,string, number array or string array parameters cover ~99% of my queries. I'm planning to write some regex to log queries with all parameters replaced in query. 

I understand that it's almost impossible to do for all parameter types, but for me this would be very helpful. Maybe it would be possible to pass custom function to create log entry ?

### Further technical details

Npgsql version:4.1.2
Dapper: 2.0.30


Hi '
With below version NPGSQL, why it doesn't report exception when we create Return Type of "setof refcursor" procedures by NpgsqlCommand.ExecuteNonSqlquery()?

```using (DBAccess db = new DBAccess())
            {
                string sql = "create or replace function \"WorkloadBalancing\".return_cursor_test()\n" +
                        "returns setof refcursor as $$\n" +
                        "declare\n" +
                            "_cur refcursor;\n" +
                        "begin\n" +
                            "open _cur for select id, uuid, name, hv_type, max_cpu_rating, is_licensed from hv_pool " +
                            "where id = 1; return next _cur;" +
                        "return;\n" +
                        "end; $$ language plpgsql";
                db.ExecuteSql(sql);
            }
```

This will be executed successfully without exception, it is same with the "NpgsqlCommand.UseTransaction is True and False", is this normal behavior? My old codes shows that NPGSQL doesn't allow to do this when the UseTransaction is False, right? Could anyone please post the correct behavior for this please?

- NPGSQL v.4.1.2
- PostgresDB 9.2 
- Mono 6.x on CentOS 7

Thanks
@roji As I just mentioned, working towards: https://github.com/npgsql/npgsql/issues/732

The core functionality I'm aiming for here is:

- [x] Application should be able to give a Host=a,b,c connection string and the driver will connect to each of them in-turn and use the first server that works
- [x] Application should be able to set ServerType=Primary to guarantee that a connection to a writable server will be handed out if one is available and error otherwise
- [x] Application should be able to set ServerType=Secondary to guarantee (as close as possible) that a connection to a readonly server will be handed out (whether this is a actually a guarantee, or a preferSecondary concept, I'm not sure yet)
- [x] Application with connectionstring of `Host=PG1,PG2;ServerType=master` in the event of PG1 going down, and PG2 becoming primary should be able to continue working without requiring a hard recycle/restart.
- [x] ConnectionPool (min, max, pruning etc) should be as close to the current behaviour as possible

I've given this a test in a few simple failover scenarios and it seems to reconnect etc, however I've not done any "to destruction" testing yet.

I've ripped out the global state cache ideal that we were discussing in favour of each `NpgsqlConnector` knowing what type of server it's connected to. When `NpgsqConnection` pulls the connector out of the pool, it checks it against whether it's what it "wants" and reconnects if it isn't which is much simpler. 

I do have an unsolved problem with this however, if a user has connectionpool enabled, but not keepalives; there will be no point for each connector to have its connected state updated if the server changes from secondary to primary (for example) and I can't see any mechanism for it to ever be updated unless the connection itself gets reset at some point. I guess https://www.postgresql.org/message-id/flat/1700970.cRWpxnom9y@hammer.magicstack.net might fix that?

* We only turn on C# 8.0 nullable reference types for newer TFMs where the BCL is annotated, otherwise there are issues (e.g. Debug.Assert(x != null) doesn't work).
* Ignore warnings of NRT use for older TFMs
* Target netstandard2.1 in plugins to have at least one TFM where NRTs are enabled.


### Before submitting

This repo is for Npgsql ADO.NET issues only. Entity Framework issues belong in Npgsql.EntityFrameworkCore.PostgreSQL for EF Core, or EntityFramework6.Npgsql for EF 6.x.

### Steps to reproduce

[npgsql-dapper-sequential-datareader.zip](https://github.com/npgsql/npgsql/files/4013430/npgsql-dapper-sequential-datareader.zip)

Ideally include a complete code listing that we can run to reproduce the issue.
Alternatively, you can provide a project/solution that we can run.

### The issue
Describe what is not working as expected.

I am using using Dapper with Npgsql, and there is a piece of code that breaks going from Npgsql 4.0.10 to 4.1.0. It may be caused by the DataReader refactoring, but I am not sure

https://github.com/npgsql/npgsql/issues/1853

The attached zip file has two test projects that illustrate the behavior in both versions of Npgsql.

At any rate, I would like to know if this should be considered a bug in Npgsql, a bug in Dapper, or wrong usage by myself, and that I need to find a different way to use Dapper/Npgsql in this particular case.

If you are seeing an exception, include the full exceptions details (message and stack trace).

```
TestDataReader.TestDataReader.TestDapperQueryAddOutputParameter

Test method TestDataReader.TestDataReader.TestDapperQueryAddOutputParameter threw exception: 
System.Data.DataException: Error parsing column 0 (p_refcur=<null>) ---> System.InvalidOperationException: Invalid attempt to read from column ordinal '0'. With CommandBehavior.SequentialAccess, you may only read from column ordinal '1' or greater.
    at Npgsql.NpgsqlDataReader.SeekToColumnSequential(Int32 column, Boolean async) in C:\projects\npgsql\src\Npgsql\NpgsqlDataReader.cs:line 1767
   at Npgsql.NpgsqlDataReader.GetValue(Int32 ordinal) in C:\projects\npgsql\src\Npgsql\NpgsqlDataReader.cs:line 1407
   at Deserializec64438b5-d06a-4954-82fa-2dda4b00366f(IDataReader )
--- End of inner exception stack trace ---
    at Dapper.SqlMapper.ThrowDataException(Exception ex, Int32 index, IDataReader reader, Object value) in C:\projects\dapper\Dapper\SqlMapper.cs:line 3633
   at Deserializec64438b5-d06a-4954-82fa-2dda4b00366f(IDataReader )
   at Dapper.SqlMapper.QueryImpl[T](IDbConnection cnn, CommandDefinition command, Type effectiveType)+MoveNext()
   at System.Collections.Generic.List`1.AddEnumerable(IEnumerable`1 enumerable)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at Dapper.SqlMapper.Query[T](IDbConnection cnn, String sql, Object param, IDbTransaction transaction, Boolean buffered, Nullable`1 commandTimeout, Nullable`1 commandType)
   at TestDataReader.TestDataReader.TestDapperQueryAddOutputParameter()
```


### Further technical details

Npgsql version: 4.1.0
PostgreSQL version: 11.4
Operating system: Windows desktop, PostgreSQL docker container

Other details about my project setup:


I'm developing WebAPI using Visual Studio 2015. When using an async method to connect to the database it throws 'Could not load file or assembly 'System.Net.Sockets, Version=4.2.0.0' on production (IIS 8.5 with .NET 4.6.1). On my dev environment everything works fine. [Link to SO question](https://stackoverflow.com/questions/59409054/could-not-load-file-or-assembly-system-net-sockets-version-4-2-0-0-on-iis). 

### Steps to reproduce

1. Create a new WebAPI project trageting .NET 4.6.1.
2. Add Npgsql NuGet package.
3. Connect to PostgreSQL using async methods in GET endpoint:
        
       public class ValuesController : ApiController
       {
            // GET api/values
            public object Get()
            {
                using (var conn = new NpgsqlConnection("<connectionString>"))
                {
                    var query = "<query>";
                    using (var comm = new NpgsqlCommand(query, conn))
                    {
                        await conn.OpenAsync();
                        return await comm.ExecuteScalarAsync();
                    }
                }
            }
        }

4. Publish project to IIS with NET 4.6.1 installed.
5. Call the API endpoint.

### The issue
Any connection to PostgreSQL throws an exception when using async methods.

```
Exception message: Could not load file or assembly 'System.Net.Sockets, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. File name: 'System.Net.Sockets, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
Stack trace:
Npgsql.NpgsqlConnector.d__154.MoveNext() at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine) at Npgsql.NpgsqlConnector.ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken) at Npgsql.NpgsqlConnector.d__152.MoveNext()
```

### Further technical details

Npgsql version: 4.1.2
PostgreSQL version: 9.6.15
Operating system DEV: Windows 10.0.18363 (.NET 4.7.2)
Operating system PROD: Windows Server 2012 R2 (.NET 4.6.1)
When reading a bit type value, I encountered a bug that caused an infinite loop under certain conditions.

### Steps to reproduce

```cs
using (var conn = new NpgsqlConnection(connnectionString))
{
    conn.Open();

    using (var cmd = conn.CreateCommand())
    {
        cmd.CommandText = @"SELECT 1::bit(100000);";

        using (var reader = cmd.ExecuteReader(CommandBehavior.SequentialAccess))
        {
            reader.Read();
            reader.GetValue(0); // infinite loop!!
        }
    }
}
```

### The issue

`BitStringHandler` has the cause. In case a bit value cuts across a buffer boundary, the last byte will never read and result in an infinite loop. The `buf.ReadBytesLeft` property remains at 1 and the loop cannot be escaped.

https://github.com/npgsql/npgsql/blob/b1fd3f2add28dbcff554eb117c83189d91f8c183/src/Npgsql/TypeHandlers/BitStringHandler.cs#L58-L74

Above example is terrible, but our application is facing same problem. It reads 16-bit column values, and cuts across a buffer boundary depending on the data state.

If I set `CommandBehavior` to default, it works. but we use Dapper, and Dapper's Query method internally sets `CommandBehavior.SequentialAccess` [link](https://github.com/StackExchange/Dapper/blob/1922ef4a8d1fa7e87e9d3fa72daaf18e2ae327cd/Dapper/SqlMapper.cs#L1079
).

### Further technical details

Npgsql version: 4.1.2
PostgreSQL version: 9.6
Operating system: Windows 10