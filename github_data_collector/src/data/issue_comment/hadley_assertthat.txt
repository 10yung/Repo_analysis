A new function, `assert_packages()`, can be used in place of code suggested by [R Packages](http://r-pkgs.had.co.nz/description.html#dependencies).

Instead of this: 

```r
if (!requireNamespace("pkg", quietly = TRUE)) {
  stop("Package \"pkg\" needed for this function to work. Please install it.", call. = FALSE)
}
```

You can use this:

```r
assertthat::assert_packages("pkg")
```

---

This PR fixes #49:

- adds `assert_packages()` to new file `R/assert-packages.R`
- adds tests in new file `tests/testthat/test-packages/R`
- updates Roxygen to 6.1.1, roxygenizes package
- adds item to NEWS
Quite often I find myself needing to check a vector of conditions for example 

```
library(assertthat)
x <- c(1,2,3,4)
assert_that( x >= 1)
```

which fails because x is not of length 1

To get around this I often define the following utility functions

```
assert_that_any <- function(...){
    x <- list(...)
    for( i in x){
        assert_that(any(i))
    }
}

assert_that_all <- function(...){
    x <- list(...)
    for( i in x){
        assert_that(all(i))
    }
}

assert_that_any(
    c(1,2,3,4,5) <= 5, 
    c(1,1,1,2,2) == 1
)

assert_that_all(
    c(1,2,3,4,5) <= 5, 
    c(1,1,1,2,2) == 1
)
```

It would be awesome if this could be included into the library (happy to attempt a PR if you agree)
Hi,
the test for scalar evaluates also complex data types to true. For example
```
assertthat::is.scalar(list("foo"))
[1] TRUE
```
This was quite unexpected to me, because it is also documented together with the test for atomic data types.

Is there a rationale not to test for the given value to be atomic? Otherwise I would propose to test:
```
assertthat::is.scalar <- function (x) {
    is.atomic(x) && length(x) == 1L
}
```
Thanks for your help,
Manuel
I would like to propose the addition of `is.file()`, `is.files()`, `is.folder()`, and `is.folders()` with optional checking for read/write access.

It is quite often that functions takes files and folders as input and checking the veracity of these is needed - putting this in the assertthat framework would benefit a lot.
This idea follows from the ["Suggests" section](http://r-pkgs.had.co.nz/description.html#dependencies) of the R-pkgs book, where you provide the code:

```R
if (!requireNamespace("pkg", quietly = TRUE)) {
  stop("Package \"pkg\" needed for this function to work. Please install it.",
    call. = FALSE)
}
```

Could this be useful as a new assertion,`has_package()`?

```R
assertthat::has_package("dplyr")
```

I'd be happy to make the PR if you think this might be useful. If so, some questions:

1. Name: `has_package()`, `has_packages()`, other?
1. Should the argument be `...` as unnamed, or `packages` which would be a character-vector of package names, or other?

Often when troubleshooting a "long" `%>%` pipe, if I need to test assertions on the data, I need to interrupt the pipe (if no grouping present) or use a `do()` block (both with/without grouping).

```r
library(dplyr)
cyls <- 6
mtcars %>%
  filter(cyl == cyls) %>%
  group_by(vs) %>%
  summarize(z = max(density(mpg)$y))
```

works as one might expect. If you run this with `cyls <- 4`, though, you'll see that `vs=0` only contains one row, and errors out.

```r
cyls <- 4
mtcars %>%
  filter(cyl == cyls) %>%
  group_by(vs) %>%
  mutate(z = max(density(mpg)$y))
# Error in mutate_impl(.data, dots) : 
#   need at least 2 points to select a bandwidth automatically
```

In order to assert that sufficient data is present, you either need to use a `do()` block or break up the pipe:

```r
library(assertthat)
cyls <- 4
mtcars %>%
  filter(cyl == cyls) %>%
  group_by(vs) %>%
  do({
    assert_that(
      length(na.omit(.$mpg)) > 1,
      msg = "I cannot grok the data"
    )
    .
  }) %>%
  summarize(z = max(density(mpg)$y))
# Error: I cannot grok the data
```

It would be nice to be able to test the assertion mid-pipe:

```r
cyls <- 4
mtcars %>%
  filter(cyl == cyls) %>%
  group_by(vs) %>%
  assert_pipe_stop(
    length(na.omit(mpg)) > 1,
    .msg = "I cannot grok the data"
  ) %>%
  summarize(z = max(density(mpg)$y))
```

Granted, in this contrived example, the error should be sufficient, but it's not hard to consider longer pipelines where calculation should not continue without verified conditions.

I think assertion-companion functions such as `assert_pipe_stop` and perhaps `assert_pipe_warning` might be useful. I think it makes more sense to extend `assertthat` to be pipe-aware vice adding assertions to `dplyr` or another of the `tidyverse` packages.

Thoughts?

I'm willing to work on a PR, though admittedly I'm not as proficient at NSE, where these functions would heavily reside.
Hi,
I think it would be useful to have also an assertion for binary variables (0/1 indicators), since they quite often appear in statistics and data analysis.

Possible solution:

```
is.binary <- function(x, na.rm = TRUE) {
    if (na.rm) x <- x[!is.na(x)]
    is.numeric(x) && all(unique(x) %in% c(0, 1))
}
on_failure(is.binary) <- function(call, env) {
    type <- eval(call$type, env)
    paste0(deparse(call$x), " is not a binary vector (a numeric vector consisting only of 0's and 1's)."
}
```
Thanks for this awesome resource -- I use it all the time. 

Could we have a warn_if that provides a warning, not an error, when false?

for testthat compatibility:

```
as.expectation.assertError <- function(x, ...) {
  testthat::expectation("failure", x$message)
}
```

it would be nice if there were a built-in assertion to test whether some object is %in% another one (say, a list or vector etc).
This might be common when there are several available options, to test whether the passed argument is permissible.

Currently, say `assert_that(factor %in% colnames(results$loa))` is possible, but on error, gives the slightly uninformative

```
#$ Error: `%in%`(x = factor, table = colnames(results$loa)) is not TRUE
```
