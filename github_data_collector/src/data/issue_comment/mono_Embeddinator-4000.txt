### Steps to Reproduce

1.My code
```
public class MyUIView : UITextView
{
    public string testValue;
    public MyUIView()
    {
        Text = "Hello from C# 15:05";
    }
    public void test() {
        Text = "test run";
    }
    public string getTestValue(){
        return testValue;
    }
}
```

2.objcgen /Users/wushenglei/Projects/hello-from-csharp/hello-from-csharp/bin/Debug/hello_from_csharp.dll --target=framework --platform=iOS --outdir=output -c --debug
### Expected Behavior
Can use MyUIView member objects and methods in ViewController.m file in Xcode
### Actual Behavior
TestValue and test functions not found
### Environment
OSX 10.14.6
embeddinator-4000 0.40
Visual Studio for Mac 8.4 build 2653

```
```

### Build Logs

<!--
1. Place cursor below this comment block.

2. Attach build log or link to gist (https://gist.github.com/) of the log.
-->

### Example Project (If Possible)

<!--
1. Place cursor below this comment block.

2. Drag and drop the compressed project or files needed to reproduce.
-->

<!--
Switch to the "Preview" tab to ensure your issue renders correctly.
-->


### Steps to Reproduce

1. Compile a SpreadsheetGear.dll file named SpreadsheetGear library with an error

### Expected Behavior
Expect to compile this SpreadsheetGear's .net library into a .framework file for use in xcode.
### Actual Behavior
Using the objcgen command to directly compile this dll file and using nuget in a Xamarin.iOS Class Library project to reference this SpreadsheetGear library for related operations and then compiling this Class Library project dll file using objcgen will report errors.

### Environment

my embeddinator-4000
/Users/wushenglei/.nuget/packages/embeddinator-4000/0.4.0/tools/objcgen
1.
objcgen /Users/wushenglei/.nuget/packages/spreadsheetgear/8.3.25/lib/netstandard1.3/SpreadsheetGear.dll --target=framework --platform=iOS --outdir=output -c --debug

2.objcgen /Users/wushenglei/Projects/hello-from-csharp/hello-from-csharp/bin/Debug/hello_from_csharp.dll --target=framework --platform=iOS --outdir=output -c --debug

### Build Logs

https://gist.github.com/chamons/1d0becbbab9a9dde583c2af062cf48a9
I made an error using Embeddinator-4000 to convert the DLL of C# into a Java library. The details are as follows:
C:\Windows\System32>Embeddinator-4000.exe --gen=java -out=D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK D:\others\HUS5.1SDKDemo(19.7.4)\lib\HUS.Client.Lib.dll -p=Windows -c
Parsing assemblies...
    Parsed 'HUS.Client.Lib.dll'
Processing assemblies...
Generating binding code...
    Generated: HUS.Client.Lib.h
    Generated: HUS.Client.Lib.c
    Generated: System.Windows.Forms.h
    Generated: System.Windows.Forms.c
    Generated: System.h
    Generated: System.c
    Generated: mscorlib.h
    Generated: mscorlib.c
    Generated: System.Design.h
    Generated: System.Design.c
    Generated: AdaptorFactory.h
    Generated: AdaptorFactory.c
    Generated: HUS.Controls.h
    Generated: HUS.Controls.c
    Generated: System.Data.h
    Generated: System.Data.c
    Generated: SynchronizeClient.h
    Generated: SynchronizeClient.c
    Generated: HUS.EC.Contract.h
    Generated: HUS.EC.Contract.c
    Generated: System.Drawing.h
    Generated: System.Drawing.c
    Generated: System.Data.DataSetExtensions.h
    Generated: System.Data.DataSetExtensions.c
    Generated: System.Xml.h
    Generated: System.Xml.c
    Generated: c-support.c
    Generated: c-support.h
    Generated: embeddinator.h
    Generated: glib.c
    Generated: glib.h
    Generated: mono-support.c
    Generated: mono-support.h
    Generated: mono_embeddinator.c
    Generated: mono_embeddinator.h
Compiling binding code...
        HUS.Client.Lib.c
D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\HUS.Client.Lib.c(10843): warning C4047: “return”:“const char **”与“char *”的间接级别不同
D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\HUS.Client.Lib.c(10855): warning C4047: “函数”:“const char *”与“const char **”的间接级别不同
D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\HUS.Client.Lib.c(10855): warning C4024: “mono_string_new”: 形参和实参 2 的类型不同
System.Windows.Forms.c
D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\System.Windows.Forms.c(6482): warning C4047: “=”:“void *”与“int64_t”的间接级别不同
D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\System.Windows.Forms.c(24738): warning C4047: “return”:“const char **”与“char *”的间接级别不同
D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\System.Windows.Forms.c(24754): warning C4047: “函数”:“const char *”与“const char **”的间接级别不同
D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\System.Windows.Forms.c(24754): warning C4024: “mono_string_new”: 形参和实参 2 的类型不同
System.c
mscorlib.c
System.Design.c
AdaptorFactory.c
HUS.Controls.c
System.Data.c
D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\System.Data.c(2285): warning C4047: “函数”:“const char *”与“const char **”的间接级别不同
D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\System.Data.c(2285): warning C4024: “mono_string_new”: 形参和实参 2 的类型不同
SynchronizeClient.c
HUS.EC.Contract.c
System.Drawing.c
System.Data.DataSetExtensions.c
System.Xml.c
c-support.c
glib.c
mono-support.c
mono_embeddinator.c
正在生成代码...
  正在创建库 D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\HUS.Client.lib 和对象 D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\HUS.Client.exp
LINK : fatal error LNK1104: 无法打开文件“D:\software\Embeddinator-4000.0.4.0\out\HUS_SDK\HUS.Client.lib”

Failed to compile generated code.
![image](https://user-images.githubusercontent.com/16237143/70039551-1fa06e80-15f5-11ea-9133-bb0d5686d7e1.png)

We found that the file size of hus.client.lib was 0KB in Windows explorer. I don't know whether it was due to a compile-time warning that the library was not generated or some other reason.
![image](https://user-images.githubusercontent.com/16237143/70038938-0a771000-15f4-11ea-8ec8-7316dee1003a.png)

What caused the conversion to fail ?
Who can help me ?
More urgent !!!
https://github.com/mono/Embeddinator-4000/blob/9cd5d13e8cb8e74b940228284c211ca7e135305c/binder/Compilation.cs#L811

it should've pass boolean whether its 64 or not cause the path is different for each
### Steps to Reproduce

1. Follow along with weather example (https://github.com/jamesmontemagno/embeddinator-weather) until I realize I can't use delegates in obj-c (https://github.com/mono/Embeddinator-4000/issues/217)
2. Attempt to look for a swift example in the embedding docs here (https://docs.microsoft.com/en-us/xamarin/tools/dotnet-embedding/get-started/objective-c/)

### Expected Behavior
Expect to find an example or a walkthrough on how to build for swift

### Actual Behavior
No walkthrough and attempting to reverse engineer the embeddinator code has gotten me so far to a 

> System.IO.FileNotFoundException: Xamarin.iOS, Version=0.0.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065

error.  Having a super simple swift example (and hopefully a "you can use delegates" confirmation) would be greatly appreciated!

(You can take the attached project, add back in the embeddinator project and do a build in Visual Studio for Mac to reproduce issues run into from my naive attempts)

### Environment

1.
mono '${SolutionDir}/packages/Embeddinator-4000.0.4.0/tools/Embeddinator-4000.exe' 'bin/Debug/test5.dll' --target=static --platform=iOS --outdir='${SolutionDir}/iosoutput' -c --debug --gen=swift

### Build Logs

Parsing assemblies...
    Parsed 'test5.dll'
Processing assemblies...

Unhandled Exception:
System.IO.FileNotFoundException: Xamarin.iOS, Version=0.0.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065
  at IKVM.Reflection.Universe.Load (System.String refname, IKVM.Reflection.Module requestingModule, System.Boolean throwOnError) [0x000ec] in <90104beb381b4b808b5b21c02f12857c>:0 
  at IKVM.Reflection.Reader.ModuleReader.ResolveAssemblyRefImpl (IKVM.Reflection.Metadata.AssemblyRefTable+Record& rec) [0x00084] in <90104beb381b4b808b5b21c02f12857c>:0 
  at IKVM.Reflection.Reader.ModuleReader.ResolveAssemblyRef (System.Int32 index) [0x00036] in <90104beb381b4b808b5b21c02f12857c>:0 
  at IKVM.Reflection.Reader.ModuleReader.ResolveType (System.Int32 metadataToken, IKVM.Reflection.IGenericContext context) [0x000ff] in <90104beb381b4b808b5b21c02f12857c>:0 
  at IKVM.Reflection.Reader.TypeDefImpl.get_BaseType () [0x00035] in <90104beb381b4b808b5b21c02f12857c>:0 
  at IKVM.Reflection.Type.get_IsEnum () [0x00001] in <90104beb381b4b808b5b21c02f12857c>:0 
  at Embeddinator.Generators.ASTGenerator.Visit (IKVM.Reflection.TypeInfo typeInfo) [0x00068] in <27f4a5e1850e4beb9b867456b4a97cab>:0 
  at Embeddinator.Generators.ASTGenerator.Visit (IKVM.Reflection.Assembly assembly) [0x00043] in <27f4a5e1850e4beb9b867456b4a97cab>:0 
  at Embeddinator.Driver.Process () [0x00039] in <27f4a5e1850e4beb9b867456b4a97cab>:0 
  at Embeddinator.Driver.Run () [0x0004e] in <27f4a5e1850e4beb9b867456b4a97cab>:0 
  at Embeddinator.CLI.Main (System.String[] args) [0x00092] in <27f4a5e1850e4beb9b867456b4a97cab>:0 
[ERROR] FATAL UNHANDLED EXCEPTION: System.IO.FileNotFoundException: Xamarin.iOS, Version=0.0.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065
  at IKVM.Reflection.Universe.Load (System.String refname, IKVM.Reflection.Module requestingModule, System.Boolean throwOnError) [0x000ec] in <90104beb381b4b808b5b21c02f12857c>:0 
  at IKVM.Reflection.Reader.ModuleReader.ResolveAssemblyRefImpl (IKVM.Reflection.Metadata.AssemblyRefTable+Record& rec) [0x00084] in <90104beb381b4b808b5b21c02f12857c>:0 
  at IKVM.Reflection.Reader.ModuleReader.ResolveAssemblyRef (System.Int32 index) [0x00036] in <90104beb381b4b808b5b21c02f12857c>:0 
  at IKVM.Reflection.Reader.ModuleReader.ResolveType (System.Int32 metadataToken, IKVM.Reflection.IGenericContext context) [0x000ff] in <90104beb381b4b808b5b21c02f12857c>:0 
  at IKVM.Reflection.Reader.TypeDefImpl.get_BaseType () [0x00035] in <90104beb381b4b808b5b21c02f12857c>:0 
  at IKVM.Reflection.Type.get_IsEnum () [0x00001] in <90104beb381b4b808b5b21c02f12857c>:0 
  at Embeddinator.Generators.ASTGenerator.Visit (IKVM.Reflection.TypeInfo typeInfo) [0x00068] in <27f4a5e1850e4beb9b867456b4a97cab>:0 
  at Embeddinator.Generators.ASTGenerator.Visit (IKVM.Reflection.Assembly assembly) [0x00043] in <27f4a5e1850e4beb9b867456b4a97cab>:0 
  at Embeddinator.Driver.Process () [0x00039] in <27f4a5e1850e4beb9b867456b4a97cab>:0 
  at Embeddinator.Driver.Run () [0x0004e] in <27f4a5e1850e4beb9b867456b4a97cab>:0 
  at Embeddinator.CLI.Main (System.String[] args) [0x00092] in <27f4a5e1850e4beb9b867456b4a97cab>:0 
logout
Saving session...
...copying shared history...
...saving history...truncating history files...
...completed.


### Example Project (If Possible)

Attached is example project (minus embeddinator package because it makes the upload too big (0.4.0 version pulled in via Visual Studio for Mac))
[test5.zip](https://github.com/mono/Embeddinator-4000/files/3639627/test5.zip)


I am trying to use the C++ library (**.dll**) created for a .NET library using Embeddinator-4000.exe in Windows C++ console app. However, when I am using executing the windows C++ console app, application shows following error dialog

![image](https://user-images.githubusercontent.com/17066438/64379318-a6e14480-cffc-11e9-8bba-361ce6e00285.png)

### Steps to Reproduce

1. Create a '_**Class Library (.NET Standard)**_' project in VS2017 with name '**MonoTestDLL**'
2. Add following code to the class which is default created template

.

    public class Class1
    {

        public Class1()
        {
            System.Console.WriteLine("Class1 .NET Initialzed Successfully");
        }

        public void PrintMessage()
        {
            System.Console.WriteLine("Class1 .NET In PrintMessage");
        }

        public void PrintMessage(string strStringToPrint)
        {
            System.Console.WriteLine(strStringToPrint);
        }

        public int Add(int iNum1, int iNum2)
        {
            return iNum1 + iNum2;
        }

        static void Main(string[] args)
        {
            System.Console.WriteLine("Class1 .NET In main");
        }
    }

3. Build the library. (_The .dll file will be created with **MonoTestDLL.dll**)_
4. Now, build the C++ libraries for this .NET dll using **Embeddinator-4000** using following command,

_Embeddinator-4000.exe --gen=c --platform=Windows --compile --target=shared --outdir="C:\Temp\MonoLibs" "${SolutionDir}\bin\Debug\netstandard2.0\MonoTestDLL.dll"_


**Note**: You can replace the path of dll per solution location

5. _Embeddinator_ will generate following files along with the Mono's library files,
     MonoTestDLL.h
     MonoTestDLL.c
     MonoTestDLL.lib
     MonoTestDLL.dll
    MonoTestDLL.exp

6. Now create a new 'Windows Console Application' in Visual C++ using Visual Studio 2017 with name 'TestCLIApp'.

7. Add following code in 'TestCLIApp.cpp' file which is created by default in the template.


```
#include "../TP/MonoTestDLL.h"
#include <iostream>
#include <conio.h>

using namespace std;

int main()
{
	MonoTestDLL_Class1* object = new MonoTestDLL_Class1();

	if (object != nullptr)
	{
		int result = MonoTestDLL_Class1_Add(object, 10, 20);

		cout << result;
	}
	else
	{
		cout << "Failed to initialize the library";
	}

	getchar();
}
```
8. Add following path in **'Include Directories**' option by selecting the **Project Properties**,
_C:\Program Files (x86)\Mono\include\mono-2.0_;

9. Add '**MonoTestDLL.lib**' in Linker>>Input. _(make sure you add proper library path in 'Library Directories' option)_

10.  Copy the '**MonoTestDLL.dll**' at the path where '**TestCLIApp.exe**' resides

11. Build and execute the C++ console application.


### Expected Behavior
Command execution shall work fine and I am expecting '**MonoTestDLL.lib**' and wrapper files to be generated by the _Embeddinator_ tool which I can further use in my C++ executable or library.

### Actual Behavior
Application fails to load with above mentioned error dialog

### Environment
Windows
Installed _Mono_ and _Embeddinator_  using VS2017 NuGet package.

**_Set paths of Mono and Embeddinator executable folder in environment variables using %PATH% on command prompt to avoid errors._**
I wanted to create a C++ library for a .NET library using Embeddinator-4000.exe. However, when I am setting '**--gen=c++**', I am getting following exception (_Tried with both 32 Bit and 64 Bit Mono versions_).

**Unhandled Exception: System.NotImplementedException: The method or operation is not implemented.
   at Embeddinator.Driver.CreateGenerator()
   at Embeddinator.Driver.Process()
   at Embeddinator.Driver.Run()
   at Embeddinator.CLI.Main(String[] args)**

As I got stuck for C++ so thought of doing the same by setting '**--gen=c**'. However, I am getting '**LINK : fatal error LNK1561: entry point must be defined**' error.

### Steps to Reproduce

1. Create a '_**Class Library (.NET Standard)**_' project in VS2017 with name '**MonoTestDLL**'
2. Add following code to the class which is default created template

.

    public class Class1
    {

        public Class1()
        {
            System.Console.WriteLine("Class1 .NET Initialzed Successfully");
        }

        public void PrintMessage()
        {
            System.Console.WriteLine("Class1 .NET In PrintMessage");
        }

        public void PrintMessage(string strStringToPrint)
        {
            System.Console.WriteLine(strStringToPrint);
        }

        public int Add(int iNum1, int iNum2)
        {
            return iNum1 + iNum2;
        }

        static void Main(string[] args)
        {
            System.Console.WriteLine("Class1 .NET In main");
        }
    }

3. Build the library. (_The .dll file will be created with **MonoTestDLL.dll**)_
4. Now, build the C++ libraries for this .NET dll using **Embeddinator-4000** using following command,

_Embeddinator-4000.exe --gen=c --platform=Windows --compile --target=static --outdir="C:\Temp\MonoLibs" "${SolutionDir}\bin\Debug\netstandard2.0\MonoTestDLL.dll"_


**Note**: You can replace the path of dll per solution location

5. Observe following error,

**LINK : fatal error LNK1561: entry point must be defined
Failed to compile generated code.**

6. I tried by manually adding the main function to C# class, but no luck.

### Expected Behavior
Command execution shall work fine and I am expecting '**MonoTestDLL.lib**' and wrapper files to be generated by the _Embeddinator_ tool which I can further use in my C++ executable or library.

### Actual Behavior
Fails with exception

### Environment
Windows
Installed _Mono_ and _Embeddinator_  using VS2017 NuGet package.

**_Set paths of Mono and Embeddinator executable folder in environment variables using %PATH% on command prompt to avoid errors._**
Hi, I have a requirement of turning an exiting xamarin based code into Java and Objective C so that it can be integrated into android studio and xcode. 

The present Android app in Xamarin targets the api level 28, I have made following changes in the Embeddinator source code locally to support the newest api level 28.

1.  Changed the variable TargetSdkVersion to 28 in "static class XamarinAndroid".
2. Disabled or removed the ABI armeabi "public partial class Driver". 
3. Targeted to the newest ndk-bundle in visual studio for mac.

After doing the above changes and tried running the the command "./build.sh -t Generate-Android -v diagnostic" on mac I was getting the below error.


[error.txt](https://github.com/mono/Embeddinator-4000/files/3427086/error.txt)


Can anyone tell me if there is any plan for supporting the newest api's for Android or Help me in right direction for making it to work ?. 
### Steps to Reproduce

1. Followed the instructions on the [getting started](https://docs.microsoft.com/en-us/xamarin/tools/dotnet-embedding/get-started/objective-c/ios) section. That means creating an iOS library with VisualStudio for mac.
2. Removed `Class1.cs`
3. Add a new class called `MyTextView`
4. Added `embeddinator` as a nuget package to be able to use it later on.
5. Compiled the project.
6. Opened a terminal and accessed my project library, type in `sh framework-gen.sh` to call the `objcgen` command. This will generate the MT0000 error.

### Expected Behavior

To generate a framework that can be imported in xcode, without any crashes.

### Actual Behavior

It crashes, it does generate a framework in the `iPhoneOS` folder but it crashes with the error described above.

### Environment
```
$ ./packages/Embeddinator-4000.0.4.0/tools/objcgen -version

Symbol file /Users/rod/Projects/TestLib/packages/Embeddinator-4000.0.4.0/tools/IKVM.Reflection.pdb doesn't match image /Users/rod/Projects/TestLib/packages/Embeddinator-4000.0.4.0/tools/IKVM.Reflection.dll
Embeddinator-4000 v0.1 (0.4: 7664197)

===
Visual Studio Professional 2019 for Mac
Version 8.1.4 (build 5)
Installation UUID: ef554bcc-72d5-4d1f-80aa-0b8d41df01f8
	GTK+ 2.24.23 (Raleigh theme)
	Xamarin.Mac 5.6.0.25 (d16-0 / 50f75273)

	Package version: 518010028

Mono Framework MDK
Runtime:
	Mono 5.18.1.28 (2018-08/223ea7ef92e) (64-bit)
	Package version: 518010028

NuGet
Version: 5.0.2.5988

.NET Core
Runtime: /usr/local/share/dotnet/dotnet
Runtime Versions:
	2.1.11
	2.1.9
SDK: /usr/local/share/dotnet/sdk/2.1.700/Sdks
SDK Versions:
	2.1.700
	2.1.505
MSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.18.1/lib/mono/msbuild/Current/bin/Sdks

Xamarin.Profiler
Version: 1.6.10
Location: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler

Updater
Version: 11

Apple Developer Tools
Xcode 10.2.1 (14490.122)
Build 10E1001

Xamarin.Mac
Version: 5.10.0.157 (Visual Studio Professional)
Hash: 6bd94753
Branch: d16-1
Build date: 2019-06-12 17:28:48-0400

Xamarin.iOS
Version: 12.10.0.157 (Visual Studio Professional)
Hash: 6bd94753
Branch: d16-1
Build date: 2019-06-12 17:28:47-0400

Xamarin.Android
Version: 9.3.0.23 (Visual Studio Professional)
Commit: HEAD/d0b48056f
Android SDK: /Users/rod/Library/Developer/Xamarin/android-sdk-macosx
	Supported Android versions:
		6.0 (API level 23)
		7.0 (API level 24)
		7.1 (API level 25)
		8.0 (API level 26)
		8.1 (API level 27)

SDK Tools Version: 26.1.1
SDK Platform Tools Version: 28.0.1
SDK Build Tools Version: 28.0.3

Build Information: 
Mono: mono/mono/2018-08@3a07bd426d3
Java.Interop: xamarin/java.interop/d16-1@5ddc3e3
LibZipSharp: grendello/LibZipSharp/d16-1@44de300
LibZip: nih-at/libzip/rel-1-5-1@b95cf3f
ProGuard: xamarin/proguard/master@905836d
SQLite: xamarin/sqlite/3.27.1@8212a2d
Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-1@acabd26

Microsoft Mobile OpenJDK
Java SDK: /Users/rod/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.25
1.8.0-25
Android Designer EPL code available here:
https://github.com/xamarin/AndroidDesigner.EPL

Android Device Manager
Version: 1.2.0.44
Hash: aac645b
Branch: remotes/origin/d16-1
Build date: 2019-05-29 19:55:24 UTC

Xamarin Inspector
Version: 1.4.3
Hash: db27525
Branch: 1.4-release
Build date: Mon, 09 Jul 2018 21:20:18 GMT
Client compatibility: 1

Xamarin Designer
Version: 16.1.0.467
Hash: f1657e133
Branch: remotes/origin/d16-1-new-document-model
Build date: 2019-06-18 21:57:42 UTC

Build Information
Release ID: 801040005
Git revision: 9c98f365cacfac65fbbaf0a77b2ea7864abef759
Build date: 2019-06-28 21:07:05+00
Build branch: release-8.1
Xamarin extensions: 8cc25b5cb090e6c23b62a7901000c299977eb08d

Operating System
Mac OS X 10.14.5
Darwin 18.6.0 Darwin Kernel Version 18.6.0
    Thu Apr 25 23:16:27 PDT 2019
    root:xnu-4903.261.4~2/RELEASE_X86_64 x86_64

```

### Build Logs

[Build logs](https://gist.github.com/rodrigoelp/67de7fbff24cfbee6fc845db5d2b7b64)

### Example Project (If Possible)

[Github project](https://github.com/rodrigoelp/dotnetLibEmbedding)

### Comments

This ticket might be related to #730, but checking the build log it seems to be crashing at a different step of the compilation process.
If it is a true duplicate, I am happy for this one to be closed (and attached to #730 as steps to reproduce)

_From @rafaelsrocha on Mon, 24 Jun 2019 18:52:19 GMT_

### Steps to Reproduce

1. Go to `packages/Embeddinator-4000.0.4.0/tools` 
2. run `./objcgen PCLTest/PCLTest/bin/Debug/PCLTest.dll --target=framework --platform=iOS --outdir=PCLTest/output -c -debug --verbose`

### Expected Behavior
Should build with no error.

### Actual Behavior
Getting 
```
error MT0000: Unexpected error - Please file a bug report at https://github.com/xamarin/xamarin-macios/issues/new
System.ArgumentNullException: Value cannot be null.
Parameter name: collection
  at System.Collections.Generic.List`1[T].InsertRange (System.Int32 index, System.Collections.Generic.IEnumerable`1[T] collection) [0x00003] in <a2bfeec6715c4fdfa8972c2780c54eba>:0 
  at System.Collections.Generic.List`1[T].AddRange (System.Collections.Generic.IEnumerable`1[T] collection) [0x00000] in <a2bfeec6715c4fdfa8972c2780c54eba>:0 
  at Xamarin.Bundler.Application.BuildApp () [0x00040] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/tools/mtouch/Application.cs:1526 
  at Xamarin.Bundler.Application.BuildNative () [0x0001f] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/tools/mtouch/Application.cs:900 
  at Xamarin.Bundler.Application+<>c.<BuildAll>b__146_2 (Xamarin.Bundler.Application v) [0x00000] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/tools/mtouch/Application.cs:837 
  at System.Collections.Generic.List`1[T].ForEach (System.Action`1[T] action) [0x0001e] in <a2bfeec6715c4fdfa8972c2780c54eba>:0 
  at Xamarin.Bundler.Application.BuildAll () [0x00076] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/tools/mtouch/Application.cs:837 
  at Xamarin.Bundler.Driver.Main2 (System.String[] args) [0x00442] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/tools/mtouch/mtouch.cs:1344 
  at Xamarin.Bundler.Driver.Main (System.String[] args) [0x00015] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/tools/mtouch/mtouch.cs:864 
```

### Environment

```
=== Visual Studio Community 2019 for Mac ===

Version 8.1.1 (build 27)
Installation UUID: 3b5f0d07-587c-45ba-b234-67dc0787e1de
	GTK+ 2.24.23 (Raleigh theme)
	Xamarin.Mac 5.6.0.25 (d16-0 / 50f75273)

	Package version: 518010028

=== Mono Framework MDK ===

Runtime:
	Mono 5.18.1.28 (2018-08/223ea7ef92e) (64-bit)
	Package version: 518010028

=== NuGet ===

Version: 5.0.2.5988

=== .NET Core ===

Runtime: /usr/local/share/dotnet/dotnet
Runtime Versions:
	2.2.5
	2.2.4
SDK: /usr/local/share/dotnet/sdk/2.2.300/Sdks
SDK Versions:
	2.2.300
	2.2.106
MSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.18.1/lib/mono/msbuild/Current/bin/Sdks

=== Xamarin.Profiler ===

Version: 1.6.10
Location: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler

=== Updater ===

Version: 11

=== Xamarin.Android ===

Version: 9.3.0.23 (Visual Studio Community)
Commit: HEAD/d0b48056f
Android SDK: /Users/rafael/Library/Android/sdk
	Supported Android versions:
		None installed

SDK Tools Version: 26.1.1
SDK Platform Tools Version: 28.0.2
SDK Build Tools Version: 28.0.3

Build Information: 
Mono: mono/mono/2018-08@3a07bd426d3
Java.Interop: xamarin/java.interop/d16-1@5ddc3e3
LibZipSharp: grendello/LibZipSharp/d16-1@44de300
LibZip: nih-at/libzip/rel-1-5-1@b95cf3f
ProGuard: xamarin/proguard/master@905836d
SQLite: xamarin/sqlite/3.27.1@8212a2d
Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-1@acabd26

=== Microsoft Mobile OpenJDK ===

Java SDK: /Users/rafael/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.25
1.8.0-25
Android Designer EPL code available here:
https://github.com/xamarin/AndroidDesigner.EPL

=== Android Device Manager ===

Version: 1.2.0.44
Hash: aac645b
Branch: remotes/origin/d16-1
Build date: 2019-05-29 19:55:24 UTC

=== Xamarin Inspector ===

Version: 1.4.3
Hash: db27525
Branch: 1.4-release
Build date: Mon, 09 Jul 2018 21:20:18 GMT
Client compatibility: 1

=== Apple Developer Tools ===

Xcode 10.2.1 (14490.122)
Build 10E1001

=== Xamarin.Mac ===

Version: 5.10.0.157 (Visual Studio Community)
Hash: 6bd94753
Branch: d16-1
Build date: 2019-06-12 17:28:48-0400

=== Xamarin.iOS ===

Version: 12.10.0.157 (Visual Studio Community)
Hash: 6bd94753
Branch: d16-1
Build date: 2019-06-12 17:28:47-0400

=== Xamarin Designer ===

Version: 16.1.0.467
Hash: f1657e133
Branch: remotes/origin/d16-1-new-document-model
Build date: 2019-06-18 21:57:42 UTC

=== Build Information ===

Release ID: 801010027
Git revision: ce34f6838e6457d0e7d5991a1a693415e6fcae07
Build date: 2019-06-19 19:52:58+00
Build branch: release-8.1
Xamarin extensions: 5104b76623e0df8e5f763f87d170279c0b788e89

=== Operating System ===

Mac OS X 10.14.4
Darwin 18.5.0 Darwin Kernel Version 18.5.0
    Mon Mar 11 20:40:32 PDT 2019
    root:xnu-4903.251.3~3/RELEASE_X86_64 x86_64


```

### Build Logs

https://gist.github.com/rafaelsrocha/3d65f420ad8a9dc5892cf784b301586b

### Example Project (If Possible)

https://github.com/rafaelsrocha/test-pcl


_Copied from original issue xamarin/xamarin-macios#6414_