#386 OpenApi 3.0 `Security Requirement` support added
The following channges are done,
* Moved common configurations, properties, builder and models to **swagger2Markup-core** module
* Extended **swagger2Markup-core** module in **swagger2Markup-v2** and **swagger2Markup-v3** modules
* Provided MarkupComponent to create re-usable components for swagger2Markup-v3 (Like in previous version)

**swagger2Markup-core module**
* This module will be free of any swagger dependency.
* The entry point for any new swagger version will be writing a class extending **AbstractSchema2MarkupConverter**
* Write swagger version specific classes by extending **Schema2MarkupConfigBuilder**, **Labels**, **Schema2MarkupExtensionRegistry**, **Schema2MarkupProperties** if required. 
Note: Its better to extend these classes as it becomes future proof and any version specific changes can be done in the new class

**swagger2Markup-v2 module**

Code has been refactored to use the **swagger2Markup-core**. Existing test cases are verified and running properly (except instagram testcase which is failing even before my patch - in windows)
**Note:**
There are few breaking changes but are very trivial to fix like,
* Labels has been renamed to SwaggerLabels
* MarkupLanguage package has been modified
* Extensions uses io.github.swagger2markup.Swagger2MarkupConverter.SwaggerContext instead of io.github.swagger2markup.Swagger2MarkupConverter.Context

**swagger2Markup-v3 module**
* OpenAPI specific converter is created **io.github.swagger2markup.OpenAPI2MarkupConverter.**
* Extensions support similar to **swagger2Markup-v2** the only difference is instead of a markUpBuilder in v3 it accepts Document object.
* Refractored applyOverviewDocument to support the use of extensions and position

**Todo**

* Refractor openAPI-3 static classes similar to OverviewDocument with placeholders for calling extenstion points
* Move labels from OpenAPIHelpers to OpenAPILabels class
* Create re-usage MarkupComponent for all static methods under OpenAPIHelpers
* Current code doesn't provide a generic extension mechanism, it provides a marker interface **Schema2MarkupExtensionRegistry**. This should be changed and core should be able to give a proper extension mechanism



#388 OpenApi 3.0 example object support

Add support for `content` object for request and responses
OpenApi 3.0 #340 descriptions are valid [CommonMark syntax](http://spec.commonmark.org/), currently they are as is to target asciidoc file. However, description content should be converted to asciidoc format from md
OpenApi 3.0 #340 conversion should provide Markdown output support. To produce md files an asciidoc convert for markdown is required, similar to `io.github.swagger2markup.adoc.AsciidocConverter`
The current implementation, Swagger v2 support, is used
```
Swagger2MarkupConverter.from(localSwaggerFile)
        .build()
        .toFile(outputFile);
```

Ideally, OpenApi 3.0 support #340 should have similar way to consume it as well, for example
```
Swagger2MarkupConfig config = new Swagger2MarkupConfigBuilder() 
        .withParseOptions(new ParseOptions()) 
        .build(); 
Swagger2MarkupConverter converter = Swagger2MarkupConverter.from(localSwaggerFile)
        .withConfig(config) 
        .build();
```
This would allow less documentation and seamless transition for any consumer/user.

The current implementation has an extension mechanism where users can inject AsciiDoc/Markdown at certain positions.
Ideally, OpenApi 3.0 support #340 should be allow extension too.
The current implementation, Swagger v2 support, allows to configure the order of the parameters, operations and definitions. Also, allows to group paths by tags.

Ideally, OpenApi 3.0 support #340  should be allow above customization too.
Strings used in OpenApi 3.0 support #340  should be internationalized, similar to v2 support,
add support for OpenAPI 3.0 Callback Object to asciidoc conversion
