My XML request looks like this:
```
    <ns1: MyRequest ns1="http://abc.com/api/2.0">:
        <reference>A request to my endpoint</reference>
   </ns1:MyRequest>
```

I believe it should be modeled in Swagger/OpenAPI 3 spec as follows:

```
    MyRequest:
      type: object
      properties:
        reference:
          type: string
          xml:
            name: reference
      xml:
        prefix: cs
        namespace: https://abc.com/api/2.0
```

Is it possible to annotate my MyRequest.java class appropriately using JAXB or Swagger annotations to get the prefix and namespace entries in the generated OpenAPI spec?

I tried this, but the namespace is not appearing in the generated OpenAPI spec. Further, I can't use that the XmlRootElement annotation to specify the prefix.

```
@XmlRootElement(namespace = "https://abc.com/api/2.0")
public class MyRequest{
  //omitted
}

```


Home:
      type: object
      properties:
        home_address:
		  description: "its the home address"
                 $ref: '#/components/schemas/Address'
Office:
      type: object
      properties:
        office_address:
		  description: "its the office address"
                   $ref: '#/components/schemas/Address'

This is a kind of swagger I want to generate with annotations, where I can have specific descriptions for home and office addresses.  
Is there anyway swagger-ui will read this description for $ref?

https://github.com/swagger-api/swagger-editor/issues/1184#issuecomment-422044132

This is one of the solution I found but there is no way to generate it with annotations.
Thanks
Hi there, I am working with the annotations https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations 

How to create operations that refers to an implementation of some class like @Schema(implementation=....) offering the ID field in case of a PUT and **hiding the ID field in case of a POST**? 

Since ID generation in POST should be up to the server. A PUT should result in 1:1 representation with GET so ID management is up to the client (processing a create or update at server side) 

* https://tools.ietf.org/html/rfc7231#section-4.3.4 “A successful PUT of a given representation would suggest that a subsequent GET on that same target resource will result in an equivalent representation being sent in a 200 (OK) response.” 

For POST I like to have something like: @Schema(implementation=MyClass.class, hidden="id") 
for PUT the full @Schema(implementation=MyClass.class) is ok 

I know that I can set @Hidden in MyClass.java, but this will disable the field in both **PUT** and POST.
I can't set it to ReadOnly on MyClass level as well, since PUT needs to write the field.

I've two JsonNode in each endpoint. Each of those two can be anyof two other DTOs, being all four DTOs different from each other.
My problem is that the JsonNode in all class is mapped for the first DTO pair it reads. So all other endpoints have a reference to this two DTOs, and the others are disregarded.
How can I correct this?
Hello.

 

Is there any method to hide extended parameters of a superclass? I can't change superclass because it is third party dependency. So I can change only my class.

My class:

```
public class AA extends BB  {

    private String feald1;

    public String getFeald1() {
        return feald1;
    }

    public void setFeald1(String feald1) {
        this.feald1 = feald1;
    }
}
```
Third party class:

```
public class BB {

    private String feald2;

    private CC cc;

    public CC getCc() {
        return cc;
    }

    public void setCc(CC cc) {
        this.cc = cc;
    }

    public String getFeald2() {
        return feald2;
    }

    public void setFeald2(String feald2) {
        this.feald2 = feald2;
    }
}
```
 

I want to ignore parameter cc. Could you help me pls?
Seems that some classes are duplicated from `swagger-jaxrs2` to `swagger-jaxrs2-servlet-initializer`:

```
io.swagger.v3.jaxrs2.integration.JaxrsAnnotationScanner
io.swagger.v3.jaxrs2.integration.JaxrsApplicationAndAnnotationScanner
io.swagger.v3.jaxrs2.integration.JaxrsApplicationAndResourcePackagesAnnotationScanner
io.swagger.v3.jaxrs2.integration.JaxrsApplicationScanner
io.swagger.v3.jaxrs2.integration.JaxrsOpenApiContext
io.swagger.v3.jaxrs2.integration.JaxrsOpenApiContextBuilder
io.swagger.v3.jaxrs2.integration.OpenApiServlet
io.swagger.v3.jaxrs2.integration.ServletConfigContextUtils
io.swagger.v3.jaxrs2.integration.ServletOpenApiConfigurationLoader
io.swagger.v3.jaxrs2.integration.ServletOpenApiContextBuilder
io.swagger.v3.jaxrs2.integration.ServletPathConfigurationLoader
io.swagger.v3.jaxrs2.integration.SwaggerLoader
io.swagger.v3.jaxrs2.integration.XmlWebOpenApiContext
```

I don't see any configuration of shading or jarjar-ing in [/modules/swagger-jaxrs2-servlet-initializer/pom.xml](https://github.com/swagger-api/swagger-core/blob/d964eba5a0c6695bd5b4623de2b68d40b2c02450/modules/swagger-jaxrs2-servlet-initializer/pom.xml) and there the sources for this are missing in the `swagger-jaxrs2-servlet-initializer-2.1.1-sources.jar` so that makes me thing this was done manually.

Any explanation as to why was this done and what purpose does it serve?
To generate the appropriate mapping for a discriminator of a parent class, we are required to add the discriminatorMapping property to @Schema, which is almost always redundant if the class already has a @JsonSubTypes annotation.
As the discriminatorProperty is read from the @JsonTypeInfo.property can the discriminatorMappings also be read from the JsonSubTypes if available?

As a workaround, I have registered a CustomModelResolver and extended the method resolveDiscriminator as follows,

```java
@Override
protected Discriminator resolveDiscriminator(JavaType type, ModelConverterContext context) {
	Discriminator discriminator = super.resolveDiscriminator(type, context);
	if (discriminator != null && discriminator.getPropertyName() != null &&
			(discriminator.getMapping() == null || discriminator.getMapping().isEmpty())) {
		JsonSubTypes jsonSubTypes = type.getRawClass().getDeclaredAnnotation(JsonSubTypes.class);
		if (jsonSubTypes != null) {
			Arrays.stream(jsonSubTypes.value()).forEach(subtype -> {
				discriminator.mapping(subtype.name(), RefUtils.constructRef(
						context.resolve(new AnnotatedType().type(subtype.value())).getName()));
			});
		}
	}
	return discriminator;
}
```

**Additional Info**: Using the swagger-maven-plugin v2.1.1 for generating the OAS files during the compile phase.
The @JsonIgnoreProperties hides the variables from appearing in the swagger document, which is expected. But in cases where the variable has allowGetters = true property set, shouldn't the variable be displayed in response example values ?
NOTE: @JsonIgnoreProperties was added not for swagger purposes in my code , but for functional use (to avoid deserialization) , therefore I cant use @JSONVIEW instead of @JsonIgnoreProperties..

Can this feature be supported ?
Given an object like this:
```java
public class PlanetName {

    @JsonValue
    private final String value;

    @JsonCreator
    private PlanetName(String value) {
        this.value = value;
    }

    public static PlanetName valueOf(String value) {
        return new PlanetName(value);
    }

    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return value;
    }
}
```

Using it as a parameter of another object:
```java
public class Planet {
    
    private PlanetName name;

    public PlanetName getName() {
        return name;
    }

    public void setName(PlanetName name) {
        this.name = name;
    }
}
```

I expect a schema like this:
```yaml
components:
  schemas:
    Planet:
      type: object
      properties:
        name:
          type: string
```

Instead, I get a schema like this:
```yaml
components:
  schemas:
    Planet:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/PlanetName'
    PlanetName:
      type: object
      properties:
        value:
          type: string
```

The resulting schema is incorrect and misleading.
I am running my APIs with servlet path /restapis, and Swagger UI with servlet path /. My auto-generated /restapis/openapi.json renders in Swagger UI, but the paths are wrong.

- Rendered URL => http://localhost:8443/resource1
- Expected URL => http://localhost:8443/restapis/resource1

How to fix it so my APIs are rendered as /restapis/resource1 instead of /resource1?
- Should I somehow override Swagger Core to auto-generate /restapis/openapi.json with full paths containing /restapis prefix?
- Should I somehow override Swagger UI to auto-render /restapis/openapi.json with full paths containing /restapis prefix?
- Some other solution?


I am launching Jetty 9.4.22.v20191022 from a POJO. Context path is /, and there are two servlets.
1. /restapis => Jersey 2.29.1 Servlet with init parameter (jersey.config.server.provider.classnames=io.swagger.v3.jaxrs2.integration.resources.OpenApiResource,com.example.rest.Resource1)
2. / => Jetty Default Servlet with welcome files = {index.html}, and context base = unpacked Swagger UI 3.24.3 directory.

The unpacked index.html is modified to replace the default URL, similar to how https://github.com/swagger-api/swagger-ui/blob/master/docker/run.sh#L35 is substituting it.
- Original => url: "https://petstore.swagger.io/v2/swagger.json"
- Replacement => url: "http://localhost:8443/restapi/openapi.json"

In Swagger UI, I expect to see /restapis/resource1, but it shows /resource1 instead. If I use Swagger UI to try to execute that API, Swagger UI displays HTTP 404 response from the API.