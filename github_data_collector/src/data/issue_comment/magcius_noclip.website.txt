If the camera is tilted towards the ground, it is possible to continuously tilt the camera downwards until it is upside down. I am not sure if this behaviour is helpful when exploring maps, as it can easily happen by accident and quickly gets confusing and disorienting.

[This also happens with many early implementations of first person cameras within Unity](https://forum.unity.com/threads/solved-how-to-clamp-camera-rotation-on-the-x-axis-fps-controller.526871/). [Most implementations solve this issue by clamping one of the axes](https://github.com/Unity-Technologies/FPSSample/blob/master/Packages/com.unity.render-pipelines.high-definition/Runtime/Core/Camera/FreeCamera.cs#L81-L86). I believe a similar solution would also work here.

If this is an intended feature, I suggest adding a checkbox which toggles camera clamping.
When I slide the camera speed slider all the way to the left, then switch stages, the camera speed slider remains at its new position, but the actual camera speed resets to the default value until I move the camera speed slider.

This is an issue on SSBB where the camera moves too quickly by default.
Shine Sprites remain upright during the spawning animation and while animating, and only end up off-axis when Mario collects them. Footage at https://www.youtube.com/watch?v=DO7FcmH50eM

However, https://noclip.website/#sms/dolpic0;ZNCA8bREwOauqLuV%7di8%7bVQV_oNW,XVIfH0k=9mLaL9Sbxi%28UAZ3Aq@$r=fD@f96=C3kV4m= the shine sprites are rotating or tumbling off-axis.
It would be incredible to see some of these levels in VR, especially without worrying about issues like frustum culling or getting real emulators to support VR.
This branch gives user the ability to navigate maps using a controller. It's primarily setup to work with XBox One and Playstation 4 controllers, so other kinds of controllers may not be fully supported. This could definitely be improved in the future with more controller functionality, and better control, but this is more of a starting point/proof of concept.

If a controller is not immediately recognized, it may need to be disconnected and reconnected before it is picked up.

Current Xbox One Controls:
Left Stick - Move
Right Stick - Rotate Camera
Left Trigger and Right Trigger - Sprint/Speed increase
A and B - Rise and Fall
Start - Pause
The FPS meter code is here:
https://github.com/magcius/noclip.website/blob/84fbfe7b852f9605530e5e479395debcc3c1623d/src/RenderStatistics.ts#L33

This code seems to assume that as soon as the script to produce the frame has finished running that the frame has been produced but there is a lot of work in the browser after javascript completes to draw the frame to the screen. On my laptop for example the site claims 300-500fps but chrome's FPS meter shows that I am only actually getting 30fps. This should be using the requestAnimationFrame timestamps to determine the effective framerate.
Maybe I'm missing something obvious but there doesn't seem to be a way to navigate around the world model when using a touch-screen device.

The models load fine on my Pixel 2 (latest Android and stable Chrome) but there's no keyboard or mouse so... no movement - the camera can't be moved. Swiping/tapping does nothing. Is it possible to implement drag-to-move or similar?

Thanks!
WebGLReport says "This browser supports WebGL 2"

```
Platform: | MacIntel
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15
webgl2
WebGL 2.0 (4.1 INTEL-12.4.7)
WebGL GLSL ES 1.0 (4.10)
WebKit
WebKit WebGL
Intel Inc.
Intel(R) Iris(TM) Plus Graphics 655
Not available
No
No

Supported Extensions:
  WEBKIT_EXT_texture_filter_anisotropic
  WEBGL_compressed_texture_s3tc
  WEBGL_lose_context
  WEBGL_debug_renderer_info
Â 
WebGL 2 Functions Implementation Status:
  88 of 88 new functions implemented.
```

EDIT: This is with WebGL 2 supported enabled through the developer menu.