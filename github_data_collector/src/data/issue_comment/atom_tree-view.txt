This might prevent unintended deletion of files if picked by `ctrl-rightclick`.
The prefs contain the following two settings:

<img width="443" alt="Screen Shot 2019-11-20 at 13 12 04" src="https://user-images.githubusercontent.com/7255/69238080-6161fb80-0b97-11ea-9c17-d98556d13f4f.png">

The latter is available as command `tree-view:toggle-vcs-ignored-files`. Would it be very complicated to make the first one available as command as well, e.g. `tree-view:toggle-ignored-names`?

Background: I'd like to add a button to my flexbar which toggles the two settings thus showing/hiding those ignored files in the tree view.

Thanks for considering this addition!
Bumps [lodash](https://github.com/lodash/lodash) from 4.17.11 to 4.17.15.
<details>
<summary>Commits</summary>

- [`ddfd9b1`](https://github.com/lodash/lodash/commit/ddfd9b11a0126db2302cb70ec9973b66baec0975) Bump to v4.17.15.
- [`b185fce`](https://github.com/lodash/lodash/commit/b185fcee26b2133bd071f4aaca14b455c2ed1008) Rebuild lodash and docs.
- [`be87d30`](https://github.com/lodash/lodash/commit/be87d303941222b97c482755afc0f4a77ce46c30) Bump to v4.17.14.
- [`a6fe6b1`](https://github.com/lodash/lodash/commit/a6fe6b1e174fd02b5e60eb2664405f4c1262c300) Rebuild lodash and docs.
- [`e371828`](https://github.com/lodash/lodash/commit/e37182845f16715a0d1c391c8662d83c55609cee) Bump to v4.17.13.
- [`357e899`](https://github.com/lodash/lodash/commit/357e899e685872b4af5403ecc4b2a928f961ae63) Rebuild lodash and docs.
- [`fd9a062`](https://github.com/lodash/lodash/commit/fd9a062d57646450b61f74029315abd4cc834b08) Bump to v4.17.12.
- [`e77d681`](https://github.com/lodash/lodash/commit/e77d68121ff00ba86b53eed5893d35adfe94c9dd) Rebuild lodash and docs.
- [`629d186`](https://github.com/lodash/lodash/commit/629d1865793182cd967196716f4beff223aa4a91) Update OpenJS references.
- [`2406eac`](https://github.com/lodash/lodash/commit/2406eac542b2a1282be8d812a6d8a45433ade80a) Fix minified build.
- Additional commits viewable in [compare view](https://github.com/lodash/lodash/compare/4.17.11...4.17.15)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.11&new-version=4.17.15)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/atom/tree-view/network/alerts).

</details>
### Prerequisites

* [ x ] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

If I use `!FileName` to exclude certain files that would have been ignored otherwise, Atoms function to show and hide ignored files from VCS does not work

### Steps to Reproduce

Use `!FileName` in your gitignore

**Expected behavior:**

with `i` I should be able to toggle ignored files from VCS (git)

**Actual behavior:**

see above

**Reproduces how often:**

all the time

### Versions

```
Atom    : 1.41.0
Electron: 4.2.7
Chrome  : 69.0.3497.128
Node    : 10.11.0
```

### Additional Information

Probably introduced with atom 1.41 on my machine. I've only tested it with Python repositories, running on windows
### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

I wrote a package which replaces the default TextEditor, by a graphical view in angularjs.
To update the file, I have 2 ways of doing it:
- directly from the package, using fs.writeFileSync to save it
- by executing a subprocess (spawn/exec) which will overwrite the file we are viewing

The problem is that when the file is updated by these 2 ways, it is not refreshed in the treeview (no git status).

If I use alt-tab or change the current ubuntu workspace and return to my atom window, then the treeview git status of the file is correctly changed. 

### Steps to Reproduce

1. have a custom package
2. In which the file URI is overwriten either by `var fs = require('fs'); fs.writeFileSync(uri, data);`, either by a subprocess called with spawn/exec functions.


**Expected behavior:**

I expect the file git status to be updated

**Actual behavior:** 

The git status of the file isn't updated

**Reproduces how often:** 

100% 

### Versions

Ubuntu 16.04

`atom --version`

> Atom    : 1.35.1
> Electron: 2.0.18
> Chrome  : 61.0.3163.100
> Node    : 8.9.3

`apm --version`

> apm  2.1.3
> npm  6.2.0
> node 8.9.3 x64
> atom 1.35.1
> python 2.7.12
> git 2.7.4

### Additional Information


### Description

Tree view is not working since the last update. Expected behavior is to see the project tree view of the file opened.

### Steps to Reproduce

1. With either a closed Atom OR opened Atom editor. Open top-level file in project folder.

**Expected behavior:** 
Expected behavior is to see the project tree view with files in the project folder of the file opened.

**Actual behavior:**
1. Open top-level file in project folder
2. No Project Tree view visible for current editable file

**Reproduces how often:** 
100% of the time since last update

### Versions

1.36.0 x64

### Prerequisites

* [X] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

The Edit -> Copy menu select doesn't add files from the Tree View to the clipboard.

### Steps to Reproduce

1. Highlight a file in Tree View.
2. Open the Edit menu on the system bar and select Copy.
3. Attempt to paste the file into another directory in Tree View.

**Expected behavior:** [What you expect to happen]

The file should be added to the clipboard and pasted.

**Actual behavior:** [What actually happens]

The last object from the clipboard is pasted.  If it was code, nothing happens.  If it was another file, that file is erroneously pasted instead.

**Reproduces how often:** [What percentage of the time does it reproduce?]

Always.

### Versions

Atom 1.34.0 x64
apm 2.1.3
macOS High Sierra

### Additional Information

The expected behavior occurs if I use the context menu within tree view or cmd+c/v.  I have no idea what possessed me to attempt to manually use the Edit menu, but there you have it.

I'm not entirely sure what repo this belongs in; however, if I attempt to manually use the Edit menu C+P with content from the core, it works as expected.  The bug only affects the tree view.
This tries to make specs easier to follow, and hopefully a little quicker as well.
This is an issue that is meant to spark some discussion and (hopefully) come to a conclusion regarding the expected behavior when copy/pasting or drag/dropping squashed directories.

## Currently
* Copy/pasting a squashed directory only copy/pastes the final directory in the chain (given a squashed directory path `dir1/dir2/dir3`, only `dir3` will be copy/pasted when selecting the squashed path).
* Drag/dropping a squashed directory moves only the final directory in the chain but does not update the visual appearance of the squashed directory (it continues to appear as `dir1/dir2/dir3`). Attempting to drag-and-drop this squashed directory again results in an error being logged to console (ENOENT about the directory path not being found, as the last directory has been moved). Collapsing and re-expanding the parent directory updates the visual appearance.

## Proposals
1. When manipulating squashed directories, copy/move only the last directory.
    * Benefits:
      * Each directory can be individually manipulated, albeit with some Tower-of-Hanoi-ing (from @lee-dohm).
      * Directory manipulation is consistent in the sense that the last folder is always moved.
    * Downsides:
      * The operation does not line up visually with what is selected.
1. When manipulating squashed directories, copy/move the entire squashed directory structure.
    * Benefits:
      * Directory manipulation is consistent in the sense that the operation will line up visually with what is selected.
    * Downsides:
      * There is no way to manipulate any of the intermediate directories.
1. When selecting squashed directories, unsquash them.
    * Benefits:
      * Each directory can be individually manipulated and it is always clear what directory is being targeted.
    * Downsides:
      * Changes the visual appearance of the Tree View when a squashed directory is selected.
### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: http://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode
    * Followed all applicable steps in the debugging guide: http://flight-manual.atom.io/hacking-atom/sections/debugging/
    * Checked the FAQs on the message board for common solutions: https://discuss.atom.io/c/faq
    * Checked that your issue isn't already filed: https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom
    * Checked that there is not already an Atom package that provides the described functionality: https://atom.io/packages

### Description

Tree-view startup and deserialization takes a fair chunk of time. It's possible we're triggering a synchronous directory walk of the project structure.

### Steps to Reproduce

_N/A_

### Versions

_N/A_

### Additional Information

_N/A_
