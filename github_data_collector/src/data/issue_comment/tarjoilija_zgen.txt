I'd like to set `:prezto:load:pmodule-dirs` however `module` is prepended to the `zstyle` command.

**Example**

If have the following in `~/.zshrc`

```
zgen prezto 'load' pmodule-dirs "$HOME/.zprezto-modules"
```

The following is generated  (in `~/.zgen/init.zsh`)

```
zstyle ':prezto:module:load' 'pmodule-dirs' '/Users/tekumara/.zprezto-modules'
```

I would like zgen to generate this:

```
zstyle ':prezto:load' 'pmodule-dirs' '/Users/tekumara/.zprezto-modules'
```
- Personal forks will remain the old default "oh-my-zsh" instead of the new dashless "ohmyzsh" if ZGEN_OH_MY_ZSH_REPO is set to just a user.
- Using a fully qualified omz repo name (ie: user/ohmyzsh) can use the new dashless naming.
I thought that I'll implement some of the paragraphs of the [plugin standard](http://zdharma.org/Zsh-100-Commits-Club/Zsh-Plugin-Standard.html). The PR implements paragraph `1` and `5`:

1. Provide the `$ZERO` parameter ‚Äì a sister parameter to the `$0`.
2. Provide the `$zsh_loaded_plugins` array.

The details are on the link. The PR doesn't cover Prezto modules, however they don't rely on `$ZERO` and `$zsh_loaded_plugins` parameters. The standard has some adoption now, e.g.:
[GitHub search](https://github.com/search?p=2&q=zsh+plugin+standard+ZERO+ZSH_ARGZERO&type=Code). Most of the plugins are mine, however c.a. 50% are other authors.

Example `init.zsh` generated:

```zsh
# {{{
# Generated by zgen.
# This file will be overwritten the next time you run zgen save!

ZSH=/root/.zgen/robbyrussell/oh-my-zsh-master

# ### General modules
typeset -ga zsh_loaded_plugins

# zdharma/zconvey
zsh_loaded_plugins+=( "zdharma/zconvey" )
ZERO="/root/.zgen/zdharma/zconvey-master/zconvey.plugin.zsh"
source "/root/.zgen/zdharma/zconvey-master/zconvey.plugin.zsh"

# fast-syntax-highlighting
zsh_loaded_plugins+=( "/fast-syntax-highlighting" )
ZERO="/root/my-plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh"
source "/root/my-plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh"

# robbyrussell/oh-my-zsh/oh-my-zsh.sh
zsh_loaded_plugins+=( "robbyrussell/oh-my-zsh/oh-my-zsh.sh" )
ZERO="/root/.zgen/robbyrussell/oh-my-zsh-master/oh-my-zsh.sh"
source "/root/.zgen/robbyrussell/oh-my-zsh-master/oh-my-zsh.sh"

# robbyrussell/oh-my-zsh/lib/git.zsh
zsh_loaded_plugins+=( "robbyrussell/oh-my-zsh/lib/git.zsh" )
ZERO="/root/.zgen/robbyrussell/oh-my-zsh-master/lib/git.zsh"
source "/root/.zgen/robbyrussell/oh-my-zsh-master/lib/git.zsh"

# robbyrussell/oh-my-zsh/plugins/git
zsh_loaded_plugins+=( "robbyrussell/oh-my-zsh/plugins/git" )
ZERO="/root/.zgen/robbyrussell/oh-my-zsh-master/plugins/git/git.plugin.zsh"
source "/root/.zgen/robbyrussell/oh-my-zsh-master/plugins/git/git.plugin.zsh"
unset ZERO

# ### Plugins & Completions
fpath=(/root/my-plugins/fast-syntax-highlighting /root/.zgen/zdharma/zconvey-master /root/.zgen/robbyrussell/oh-my-zsh-master/plugins/git /root/.zgen/robbyrussell/oh-my-zsh-master/lib ${fpath})

# }}}
```

Hi @tarjoilija,

Is there a roadmap for zgen and features being developed?  Or has support for this project been dropped?
If you cannot maintain this anymore, should we move over to zplug?

Asking because I see no commits in 7 months and no answers in the issues.
How can I write the follow using zgen:
`zplug "mrowa44/emojify", as:command`

I want to add the follow binary to the path:
https://github.com/mrowa44/emojify/blob/master/emojify
I'm aiming to improve zsh startup time, I'm using oh-my-zsh at the moment and use a lot of plugins from it.

I saw https://github.com/tarjoilija/zgen#oh-my-zsh the guide on using oh-my-zsh plugins with this, but also saw that I should `zgen oh-my-zsh` before loading plugins,

won't this incur the whole startup time of oh-my-zsh then?
Basically as the title says I would like to add the ability to run a Makefile in a plugin directory when installing and updating a plugin.
```
~: zgen selfupdate
-- zgen: Not running from a git repository; cannot automatically update.
```

The problem is that `zgen-selfupdate()` uses `${ZGEN_SOURCE}`, but doesn't have access to that variable because `ZGEN_SOURCE` is defined as `local` (line 3).
The `ZGEN_PREZTO_LOAD_DEFAULT` is pretty nice, still, it took me a while to figure out that the reason why prezto wasn't coloring output had to do with zgen loading modules by default. Prezto looks for `dircolors` which on macOS is `gdircolors`, prezto warns you about, and suggests you use the `gnu-utility` module with the option: `zstyle ':prezto:module:gnu-utility' 'prefix' 'g'`, and load the module before the utility module. Even though I did, after some debugging I found out utility was still loading before gnu-utility. The reason? zgen adds default modules which include utility and prezto skips utilities that are already loaded.

Since I imagine most macOS users would like `ls` coloring, and most macOS users don't force brew to replace core utils with GNUs versions for potential system instability problem, I think zgen's default behavior is problematic here.

How about we make default modules off by default? That would solve this issue entirely I imagine.

Related to #112

Thanks for an awesome utility üôè !
I want to disable the annoying oh-my-zsh update prompt. I also want to use an oh-my-zsh theme. You can disable the prompt when setting `DISABLE_AUTO_UPDATE="true"`. Unfortunately that environment variable is as you can see not namespaced to oh-my-zsh, so I'm skittish about enabling it globally, lest I disable some other auto updating feature that I do actually want. Is there a way to disable it just for oh-my-zsh?