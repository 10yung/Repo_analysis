Updates [com.47deg:sbt-microsites](https://github.com/47deg/sbt-microsites) [from 0.9.7 to 1.0.2](https://github.com/47deg/sbt-microsites/compare/v0.9.7...v1.0.2).
[Release Notes/Changelog](https://github.com/47deg/sbt-microsites/blob/master/CHANGELOG.md)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.47deg", artifactId = "sbt-microsites" } ]
```
</details>

labels: semver-major
I might to be blind to find it but I don't see any progress or discussion towards adding Scala 2.13 (and sbt 1.3 ?) to the build. As I am currently upgrading my services, this is the first library that doesn't have a 2.13 release. The upgrade itself should not be hard to do.

That being said I would also like to see cats effect 2.0 being used. Should I put this to a separate issue?

We have Fetch#runCache and Fetch#runLog, but not something that can return both.

 Actual version: 0.2.4
 Patch: -
 Minor: 0.3.0
 Major: -
         
From the gitter channel:

>I like the deduplication feature, but when I run a fetch I'd like to be able to get the data as it becomes available. (Imagine I have a websocket and I want to push data through it as it becomes available.) My issue is that if I use:
(fetchA,fetchB).tupled even if the two fetches ultimately execute in parallel, I have to wait until they both complete to get the full tuple.



 Actual version: 0.9.7
 Patch: 0.9.10
 Minor: -
 Major: -
         
Currently the methods that fetch data in `DataSource` require an effect type `F` with `Par[F]` and `ConcurrentEffect[F]`.

`Par` is required due to the `DataSource#batch` implementation defaulting to running individual fetches in parallel. If we move away from it, Data sources that don't implement batching will run their fetches sequentially. `Par[F]` will still be required when creating or running a fetch to `F`, since is used when running multiple batches in parallel.

`ConcurrentEffect` is perhaps too restrictive, since we may not need the cancellation semantics that `Concurrent` provides. We could use `Effect` here, thoughts?

![cats-effect-typeclasses](https://typelevel.org/cats-effect/img/cats-effect-typeclasses.svg)
Cacheing resource request is a great feature. However, I was wondering if it would be nice to support cache backends such as Redis or MemCached.
Spotted in the gitter channel

> The big thing for me was that it wasn't clear that the cache could be reused. It talks about the state monad and the cache being immutable which caused me to make some bad assumptions, even after diving into the code. 

This should be more explicit and clear to not confuse people.