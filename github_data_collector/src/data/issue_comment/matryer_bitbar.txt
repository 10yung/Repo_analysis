I have a script running every second by the bitbar app and the Bitbar is leaking a port per execution. 
Then bitbar crashes once it cannot get a port any more. 

Following lines are crash log from console app:

Process:               BitBar [1149]
Path:                  /Applications/BitBar.app/Contents/MacOS/BitBar
Identifier:            com.matryer.BitBar
Version:               1.9.2 (1.9.2)
Code Type:             X86-64 (Native)
Parent Process:        ??? [1]
Responsible:           BitBar [1149]
User ID:               501

Date/Time:             2020-01-10 13:03:31.874 -0800
OS Version:            Mac OS X 10.15.2 (19C57)
Report Version:        12
Anonymous UUID:        C6EA9A39-F85A-48C6-4820-6E0ABF22203C


Time Awake Since Boot: 320000 seconds

System Integrity Protection: enabled

Crashed Thread:        6  Dispatch queue: com.apple.root.default-qos

Exception Type:        EXC_CRASH (SIGABRT)
Exception Codes:       0x0000000000000000, 0x0000000000000000
Exception Note:        EXC_CORPSE_NOTIFY

Application Specific Information:
*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '*** -[NSRunLoop addPort:forMode:]: port argument cannot be nil'
abort() called
terminating with uncaught exception of type NSException

Application Specific Backtrace 1:
0   CoreFoundation                      0x00007fff309648ab __exceptionPreprocess + 250
1   libobjc.A.dylib                     0x00007fff66bd5805 objc_exception_throw + 48
2   Foundation                          0x00007fff32f79fce -[NSRunLoop(NSRunLoop) _addPort:forMode:] + 0
3   Foundation                          0x00007fff3303f7ed -[NSConcreteTask waitUntilExit] + 162
4   BitBar                              0x00000001065ec875 -[ExecutablePlugin refreshContentByExecutingCommand] + 546
5   BitBar                              0x00000001065ecca1 __27-[ExecutablePlugin refresh]_block_invoke + 45
6   libdispatch.dylib                   0x00007fff67ee9583 _dispatch_call_block_and_release + 12
7   libdispatch.dylib                   0x00007fff67eea50e _dispatch_client_callout + 8
8   libdispatch.dylib                   0x00007fff67eec358 _dispatch_queue_override_invoke + 763
9   libdispatch.dylib                   0x00007fff67ef87e2 _dispatch_root_queue_drain + 326
10  libdispatch.dylib                   0x00007fff67ef8f22 _dispatch_worker_thread2 + 92
11  libsystem_pthread.dylib             0x00007fff681446b6 _pthread_wqthread + 220
12  libsystem_pthread.dylib             0x00007fff68143827 start_wqthread + 15


I thought I'd try writing a plugin in JXA rather than Node.js, since it's built for dealing more closely with the OS and saves me writing a bash plugin that also contains JXA.

It seems to work (although it's a little funky in the way it outputs), my main problem with it however is that it displays this little ⚠️ icon ahead of the item, and I'm not sure if I can do anything to remove this.

Presumably it's down to the way the output works, all the plugin logs display in the dropdown and the overall return value is what appears in the menu bar (worth also noting, this is the opposite to how it displays when run in terminal).

I'm not sure how to remedy this (and whether it's possible to easily remedy), but I'd be interested to hear what you all think.

Here's the example plugin code:
```
#!/usr/bin/env osascript -l JavaScript

function run(argv) {
  console.log('hello from jxa')
  return 'jxa test'
}
```

And the plugin in action:
![Screenshot 2020-01-08 at 10 36 48 am](https://user-images.githubusercontent.com/5731838/71971602-d4d0d280-3202-11ea-9a23-62c1edcdc439.png)

When you set the alternate specifically to 'false', the line is not shown. 

I understand, that normally you wouldn’t add alternate to a line, that isn’t in fact an alternate. But this bug occurred to me when reading my entries from a json file and setting the parameters automatically. 

But I guess it should be fixed anyway, because developers will wonder why items are not shown, if it is set to false.
Say my plugin gives the output

```
Foo
---
Bar
```

The default seems to be for "Bar" to have grey text. I think that's a bit hard to read for my purposes, so I want to do "Bar|color=black". But then if I switch to dark mode, it's unreadable.

Here are some mutually exclusive ideas for how to improve the situation:
* Change the default to be black in light mode, and white in dark mode, instead of this light grey.
* Allow plugins to specify you want high contrast, e.g. "Bar|color=high_contrast", which would make the text black or white depending on the mode.
* Allow plugins to specify different values for light and dark mode, e.g. "Bar|light_mode_color=black dark_mode_color=white".
Docs says I need to have direct path to node.js executable in shebang but for node.js installed with nvm the path is similar to `/Users/[username]/.nvm/versions/node/v11.15.0/bin/node` which is unique for every user. I tried to create bash script 
```bash
#!/usr/bin/env bash

n=$(which node)

"$n" runner.js
```

But `which` does not return the result. Any idea how to run node.js scripts in that case? Is it possible to somehow run scripts with user environment?
Dear community and maintainers of this project,

Similar to any other user of BitBar I really like this application and use it daily for many things. What I am wondering about though is its continued development and if it's still actively maintained.

There is a lot of open PR's and there seem to be some forks floating around which have advanced further than the current repository. 

Does anyone have a good overview of or knowledge about which forks to use when, which are active in their development, or perhaps even are official successors to the current project?

kind regards,


I have a line in my plugin:
`Refresh | bash="python3 /Users/zeev/iCloud/bitbar/mint/mint-getData.py" terminal=false refresh=true`
which does NOT run when clicked.
It only runs if I set `terminal=true`

I've written a plugin in python3 that uses [MintAPI](https://github.com/mrooney/mintapi) – which calls `chromedriver`.
The script works fine from shell, but from bitbar it throws an error "Permission denied: /chromedriver"

Anyone know why?
Hi All,
I'd like to start a watcher process (fswatch) from a Bitbar shell script. However, because the process doesn't exit, Bitbar can't handle the remainder of the script properly. I've tried forking a variety of forking tricks (using &, I'm not an expert), but  this doesn't seem to help, Bitbar always waits for the process to finish. Any ideas?

Here is the script. The initial echo commands don't render properly, as long as the fswatch process is running. I'm omitting some variables, for brevity's sake. Thanks!

```
echo "♺" 
echo "---"
echo "Stop Processing| size=14 bash='$script' param1=pause terminal=false"

export PATH=$HOME/bin:/usr/local/bin:/Library/TeX/texbin:$PATH
WATCH_DIR="/Users/xxx/Temp/LaTex_Compile"
LATEXCMD="/Users/xxx/Library/Scripts/synctexmk.sh"

#Kill any existing watch process, or bitbar will continue spawning them whenever the script loads.
ps aux | grep "fswatch" | grep "tex" | awk '{print $2}' | xargs kill

CMD="fswatch -0 --event Updated $WATCH_DIR/*.tex | xargs -0 -n 1 -I {} $LATEXCMD {}" 

eval $CMD
```
Does the bold ANSI escape sequence not work in dropdowns in BitBar?

I'm using `\u001b[1m` and it correctly bolds the text when printed to the console, but not when it appears in the BitBar dropdown.