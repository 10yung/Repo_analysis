## Motivation

- Refactored Acquires to handling just names of resources, not types
- Acquiring a resources acquires all possible instantiations/instances

## Test Plan

cargo test

## Related PRs

#2228 

Consider a scenario, in which a state sync request retrieved all the required chunks but failed in the `process_commit()` function.
The state sync request is going to remain pending. All the future invocations of `check_progress()` are not going to send new chunk requests because the DB is already updated. The system is thus stuck because consensus is waiting for a state sync request that is never going to get terminated.

One solution is to make sure that `check_progress()` can release the pending requests that are already satisfied.
Whitespace is generally not significant in Move but the exception is that space is required between an identifier and a '<' less-than operator. When parsing fails possibly due to a missing space, add a message to suggest adding a space.

## Motivation

Improve usability for a potentially common user error.

### Have you read the [Contributing Guidelines on pull requests](https://github.com/libra/libra/blob/master/CONTRIBUTING.md#pull-requests)?

Yes

## Test Plan

Added a test and updated existing tests.
## Summary

* This adds a buildspec which will be used to define the build for `cluster-test` on AWS Codebuild
* This also adds a script which can be invoked to trigger the build
* The `validator-dynamic/build-aws.sh` and `cluster-test/build-aws.sh` share a common base script `docker/build-aws-base.sh`
cc @metajack  @bmwill 

This is for tracking effort to make libra core library wasm safe, which means all crypto functions and LCS stuff could be compiled into wasm and used by JS. 

so, currently,  various core library depends on following non-wasm safe rust crates,  memsec and clear_on_drop just require feature changes , and get_if_addrs and errno  dependency can be get rid of. 

[patch.crates-io]
errno = { path = "./empty/errno"}
get_if_addrs = {path = "./empty/get_if_addrs"}
memsec = {path = "./empty/memsec"}
clear_on_drop = {path="./empty/clear_on_drop"}

So I created this 
This allows for publishing of generic resources.
It's not as clean of a solution as we would like but we are going to change things significantly with the binary format changes and the loader work.

## Motivation

Making 0x0 a reserved address for VM by:
1. Disallow creating account on 0x0
2. Reject transactions with sender 0x0.

### Have you read the [Contributing Guidelines on pull requests](https://github.com/libra/libra/blob/master/CONTRIBUTING.md#pull-requests)?

Yes

## Test Plan

Add test cases for each operation.


Under a specific configuration, an invalid instantiation could be generated (for both `Pack` and `Call` instructions). 

Particularly, if the type on the stack was a nested generic with no other instantiations of the type variable(s) contained within the inner struct, we would fail to create a substitution for that type variable. For example if we had the following two structs:
```
struct Inner<A, B> {
  x: A,
  y: B
}

struct Outer<X, Y> {
  f: Y,
  g: Self.Inner<X, u64>,
}
```

Now if the stack contains an `Outer<T, G>` (where `T` and `G` are generic type parameters to the surrounding function context):
```
TypedStack1 = [...; Outer<T, G>]
```
Now we apply an unpack to this to get type stack 2:
```
TypedStack2 = [...; G; Self.Inner<T, u64>]
```
Now we generate a `Pack(Outer)` instruction, when we try to generate an instantiation we succeed in the unification of `G` with the `Y`:
```
TypeStack2 = [...; G; Self.Inner<T, u64>]
{}; G == Y ~~~~> {Y |-> G}
```
**But** we would fail to even _try_ to unify the `Self.Inner<T, u64>` type on the stack with the `Self.Inner<X, u64>` from the struct field, and we would fail to add the substitution of `X |-> T`. We would then fall back to thinking that `X`  was an unused type parameter, and fill it in with a `u64`, and this would fail to typecheck in the verifier.

This all stemmed from line 377 in `transitions.rs`; we only looked for a type parameter, and did not look any deeper to see if it was a generic type. Updating this solved the issues.


This is stacked on other commits, so only review/look at the top commit of this PR.

Converting storage client to tonic seem to reduce cluster test reported performance from 650 to 550 TPS
Add ability for test generation to log to a file (or terminal if no log file is specified).

Also record the error along with the module that failed.