if you run in create(),input arg   '1'
```
select * from table id =  \'1\'
```
if you run in prepare(),input arg   '1'
```
select * from table id =  \'\'1\'\'        //here Added an extra backslash,It shouldn't have happened
```
I expect the following code to work
```rust
fn prepare_statements(conn: &mut mysql::Conn) -> (mysql::Stmt, mysql::Stmt) {
    let a = conn.prepare("foo").unwrap();
    let b = conn.prepare("bar").unwrap();
    
    (a, b)
}
```

but this leads to the following error message:

```
error[E0499]: cannot borrow `*conn` as mutable more than once at a time
  --> src/main.rs:16:13
   |
14 | fn prepare_statements(conn: &mut mysql::Conn) -> (mysql::Stmt, mysql::Stmt) {
   |                             - let's call the lifetime of this reference `'1`
15 |     let a = conn.prepare("SELECT id, name FROM users").unwrap();
   |             ---- first mutable borrow occurs here
16 |     let b = conn.prepare("SELECT id, name FROM posts").unwrap();
   |             ^^^^ second mutable borrow occurs here
17 | 
18 |     (a, b)
   |     ------ returning this value requires that `*conn` is borrowed for `'1`
```

(Yes I'm aware of the statement caching in `Conn::prep_exec`, but this requires to have a SQL query string. This implies that one need to actual build that string in a dynamic environment, but sometimes the mapping from parameters to statement could be done without building the query. In such cases it would be helpful to have a way that would allow to build our own statement cache on top of this crate)
Hi! I ran the example on the https://docs.rs/mysql/17.0.0/mysql/. The temporary table can be created, and values can be inserted. However, the 'select' query will pop the error `MySqlError { ERROR 1146 (42S02): Table 'mysql.payment' doesn't exist }', src/libcore/result.rs:1189:5`. 

If I change the `Temporary table` to just `table`, everything works fine. I am not sure whether this has to do with the connection pool? The `Temporary table` has to live in a session and all the execution with the table has to go through a single connection?
As a new rust users cargo clippy is useful for looking at idiomatic code. Cargo clippy crashes on latest version. 
Hio!
During testing of my application I noticed that I was getting the following error message:

> thread 'account::tests::create::tests::password_empty' panicked at 'called `Result::unwrap()` on an `Err` value: DriverError { Packet out of sync }', src/libcore/result.rs:1165:5

The reason for it, during testing my applications opens as many mysql connections as there are threads and I assume that these connections are not properly closed after the test has finished.

So after executing my tests a few times I get this error message for some random tests.

Taking a look at my DB log files, I get this message:

> 2019-10-31 11:38:45 0 [Warning] Aborted connection 0 to db: 'unconnected' user: 'unauthenticated' host: 'connecting host' (Too many connections)

When increasing the maximum connections using:
`SET GLOBAL max_connections = 999999;`

The error is gone.

So your error message should read something along these lines.

Cheers!
Hi, thank you for your work!

is it possible to derive Stmt struct from Clone?
i was thinking about preparing all my sql statements at program start and then just keeping/using them for all future database interaction. as soon as i start working with threads (for example for a web-api server) it gets needed to do a clone ( i did clone with pool, and there it works ).
could you add this or am i completely wrong in trying to do this?

thanks again
I have a query with 2000 rows, iterating result takes ~10ms when compiled with `--release` and ~30ms when not optimized

```rust
let result = conn.query(sql)?;
let db_start_time = Instant::now();
for mut row_res in result {
  // nothing
}
println!("DB aggregate complete: {} ms", db_start_time.elapsed().as_millis());
```

Row look like this:
```
Ok(
    Row {
        id: Bytes(
            "15671236..",
        ),
        txn_ref: Bytes(
            "a32c8457..",
        ),
        status: Bytes(
            "VERIFIED",
        ),
        amount: Bytes(
            "24000.00",
        ),
        already_verified: Null,
    },
)
```

Is it expected?
`login_time` is datetime in mysql.

# 1
```rust
let login_time: ???? = row.take("login_time").unwrap();
```
Where ????  What type should I fill in?

# 2
```rust

    let result = pool.prep_exec(&sql, ()).unwrap();
    let query_date: Vec<Password> = result
        .map(|row| {
            let (userid, lock_time)= mysql::from_row(row.unwrap());
            let pwd = Password {
                userid: userid,
                lock_time: lock_time,
            };
            return pwd;
        })
        .collect();
```
When I run, I will report an error. 
```
thread 'actix-rt:worker:0' panicked at 'Couldn't convert Row { userid: Bytes("100000"), lock_time: Date("\'2019-09-07 18:12:16\'") } to type (T1, T2). (see FromRow documentation)', /root/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/mysql_common-0.18.0/src/row/convert.rs:179:39
note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```
How can I get this Datetime data?


Hi,

I'm using this plugin: https://mariadb.com/kb/en/library/authentication-plugin-unix-socket/

And I can access MySQL from command line. However using this code:

```rust
mysql::Pool::new("mysql://user@localhost/db").unwrap();
```

will raise this error:

```shell
MySqlError { ERROR 1698 (28000): Access denied for user 'user'@'localhost' }
```

**Edited**

It seems the library doesn't support this use case yet. So I applied another plugin `mysql_native_password` for that user, and it worked.

It would be great if you consider adding support for `unix_socket` plugin.

Thank you,
