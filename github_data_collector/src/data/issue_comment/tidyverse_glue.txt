This builds on #162 and should be merged afterward.

It fixes #163 and takes the approach of copying indentation from indentation-only lines.

I can see an argument for eliding indentation from indentation-only lines, but it seemed more in the spirit of trim()'s existing whitespace handling philosophy (don't mess with it to the extent possible) to keep it. I'd be happy to do it any other way.
`trim()` calculates the "minimum indent" of every line after the first, and then removes that number of characters from the beginning of every line after the first. I encountered this while working on the related #162.

`min_indent` is calculated by a routine that ignores indentation (spaces and tabs) on blank lines - lines containing only indentation. Consequently, the newline that terminates these lines can get trimmed, which causes the following line to include spurious leading whitespace.

Failing example:

```r
library(glue)
library(testthat)
expect_identical(
  trim("
       \ta
       \tb
      \t
       \tc"),
  "a\nb\n\nc"
)
```

In the character vector passed to `trim()`, the penultimate line contains only indentation (6 spaces followed by a tab).

When `trim()` is copying parts of the old string to a new one, it skips over the newline that delimits the penultimate and last lines, and the whitespace from the penultimate line is included in the last line.

Previously, after a `'\n'` was encountered while copying, `min_indent` number of characters are trimmed from the beginning of lines by seeking `i` characters ahead in the input string.

However, after setting `i += min_indent`, `i` was incremented again right before the `while` loop continued via `str[j++] = xx[i++]`. This caused `i` to point to the character *after* the `'\n`' that terminated the line, and so leading indentation on the *following* line was not recognized as such, and so was improperly copied to the output string.

While working on this, I also ran into a few other possible bugs:

1. Lines containing only indentation might be shorter than `min_indent` and so could cause the succeeding line to contain spurious leading indentation. Currently, `trim()` only works properly if there's either no whitespace on the blank line, or if there is an amount of whitespace of at least `min_indent`.
1. Tabs are not converted to spaces, and so output may appear to be improperly indented even after trimming if different lines contain different distributions of leading tab and space characters.

Let me know if it would be helpful for me to create issues for those possible bugs. I didn't create issues because maybe these are features ðŸ˜„ 

It also occurred to @wch and I while working on this that we could probably be smarter about the size of the output string we allocate. Since we know that `min_indent` will removed from *every* line after the first, in the `min_indent` calculation pass we could tally newlines and multiply that tally by the size of `min_indent` to determine how much smaller the output string needs to be.

# TODO

- [x] Update NEWS
New tests fail on my installs. Ref #158 

#### Fail record

```
==> devtools::test()

Loading glue
Testing glue
v | OK F W S | Context
v | 20       | glue_collapse
x | 12 3     | color
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test-color.R:33: failure: glue_col: works with single quotes, double quotes, graves
glue_col("{blue foo's}") not identical to as_glue(blue("foo's")).
1/1 mismatches
x[1]: ""
y[1]: "\033[34mfoo's\033[39m"

test-color.R:34: failure: glue_col: works with single quotes, double quotes, graves
glue_col("{blue foo\"s}") not identical to as_glue(blue("foo\"s")).
1/1 mismatches
x[1]: ""
y[1]: "\033[34mfoo\"s\033[39m"

test-color.R:35: failure: glue_col: works with single quotes, double quotes, graves
glue_col("{blue foo`s}") not identical to as_glue(blue("foo`s")).
1/1 mismatches
x[1]: ""
y[1]: "\033[34mfoo`s\033[39m"
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
v | 104       | glue [0.1 s]
v | 12       | quoting
v |  0     1 | sql
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test-sql.R:3: skip: (unknown)
DBI cannot be loaded
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
v | 27       | trim

== Results ===============================================================================================================================================================
Duration: 0.3 s

OK:       175
Failed:   3
Warnings: 0
Skipped:  1
```

#### This desktop metadata
```
packageDescription('glue')

Package: glue
Title: Interpreted String Literals
Version: 1.3.1
Authors@R: person("Jim", "Hester", email = "james.f.hester@gmail.com",
        role = c("aut", "cre"))
Description: An implementation of interpreted string literals, inspired
        by Python's Literal String Interpolation
        <https://www.python.org/dev/peps/pep-0498/> and Docstrings
        <https://www.python.org/dev/peps/pep-0257/> and Julia's
        Triple-Quoted String Literals
        <https://docs.julialang.org/en/stable/manual/strings/#triple-quoted-string-literals>.
Depends: R (>= 3.1)
Imports: methods
Suggests: testthat, covr, magrittr, crayon, knitr, rmarkdown, DBI,
        RSQLite, R.utils, forcats, microbenchmark, rprintf, stringr,
        ggplot2, dplyr, withr
License: MIT + file LICENSE
Encoding: UTF-8
LazyData: true
RoxygenNote: 6.1.1
URL: https://github.com/tidyverse/glue
BugReports: https://github.com/tidyverse/glue/issues
VignetteBuilder: knitr
ByteCompile: true
NeedsCompilation: yes
Packaged: 2019-03-11 21:03:11 UTC; jhester
Author: Jim Hester [aut, cre]
Maintainer: Jim Hester <james.f.hester@gmail.com>
Repository: CRAN
Date/Publication: 2019-03-12 22:30:02 UTC
Built: R 3.5.3; x86_64-w64-mingw32; 2019-04-10 23:00:13 UTC; windows

-- File: C:/Users/AlecW/Documents/R/win-library/3.5/glue/Meta/package.rds 

sessionInfo()

R version 3.5.3 (2019-03-11)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18363)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252   
[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C                          
[5] LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] crayon_1.3.4         testthat_2.0.1       glue_1.3.1          
[4] RevoUtils_11.0.3     RevoUtilsMath_11.0.0

loaded via a namespace (and not attached):
[1] compiler_3.5.3   assertthat_0.2.1 magrittr_1.5     R6_2.3.0        
[5] cli_1.1.0        tools_3.5.3      rstudioapi_0.10  rlang_0.3.4 
```

Also on work laptop (sesson info etc. in #158)

Hi Jim,

I came across a bug wherein certain symbols ``{ '  " ` }`` cannot be escaped in `glue_col` to print colored output and I wanted to make a note of it. I couldn't find any documentation on special escaping practices in `glue`, nor [python fstring examples](https://realpython.com/python-f-strings/#quotation-marks).

Many thanks for your attention!

### reprex
```r
library(glue)
packageDescription("glue")

# Package: glue
# Title: Interpreted String Literals
# Version: 1.3.0
# Authors@R: person("Jim", "Hester", email =
#                     "james.f.hester@gmail.com", role = c("aut", "cre"))
# Description: An implementation of interpreted string literals,
# inspired by Python's Literal String Interpolation
#        <https://www.python.org/dev/peps/pep-0498/> and Docstrings
#        <https://www.python.org/dev/peps/pep-0257/> and Julia's
# Triple-Quoted String Literals
# <https://docs.julialang.org/en/stable/manual/strings/#triple-quoted-string-literals>.
#   Depends: R (>= 3.1)
# Imports: methods
# Suggests: testthat, covr, magrittr, crayon, knitr, rmarkdown, DBI,
# RSQLite, R.utils, forcats, microbenchmark, rprintf, stringr,
# ggplot2, dplyr, withr
# License: MIT + file LICENSE
# Encoding: UTF-8
# LazyData: true
# RoxygenNote: 6.0.1
# URL: https://github.com/tidyverse/glue
# BugReports: https://github.com/tidyverse/glue/issues
# VignetteBuilder: knitr
# ByteCompile: true
# NeedsCompilation: yes
# Packaged: 2018-07-17 14:19:58 UTC; jhester
# Author: Jim Hester [aut, cre]
# Maintainer: Jim Hester <james.f.hester@gmail.com>
#   Repository: CRAN
# Date/Publication: 2018-07-17 19:10:02 UTC
# Built: R 3.5.2; x86_64-w64-mingw32; 2019-02-17 19:37:54 UTC; windows
#
# -- File: C:/Users/a131485/Documents/R/win-library/3.5.1/glue/Meta/package.rds

sessionInfo()

# R version 3.5.1 (2018-07-02)
# Platform: x86_64-w64-mingw32/x64 (64-bit)
# Running under: Windows 10 x64 (build 17763)
#
# Matrix products: default
#
# locale:
#   [1] LC_COLLATE=English_United States.1252
# [2] LC_CTYPE=English_United States.1252
# [3] LC_MONETARY=English_United States.1252
# [4] LC_NUMERIC=C
# [5] LC_TIME=English_United States.1252
#
# attached base packages:
#   [1] stats     graphics  grDevices utils     datasets  methods   base
#
# other attached packages:
#   [1] glue_1.3.0        crayon_1.3.4      data.table_1.12.0 janitor_1.2.0
# [5] purrr_0.3.1       assertthat_0.2.0  dplyr_0.8.3       odbc_1.1.6
# [9] vroom_1.0.2
#
# loaded via a namespace (and not attached):
#   [1] Rcpp_1.0.2       rstudioapi_0.10  magrittr_1.5     hms_0.4.2
# [5] tidyselect_0.2.5 bit_1.1-14       R6_2.4.0         rlang_0.4.0
# [9] stringr_1.4.0    blob_1.1.1       tools_3.5.1      packrat_0.5.0
# [13] DBI_1.0.0        bit64_0.9-7      tibble_2.1.3     snakecase_0.11.0
# [17] stringi_1.3.1    compiler_3.5.1   pillar_1.3.1     pkgconfig_2.0.2

# Prints nothing
glue_col("{green test's}")
glue_col("{green test\'s}")
glue_col("{green test\\'s}")
glue_col("{green test\\\\'s}")
glue_col("{green test\"s}")
glue_col("{green test`s}")
glue_col("<<green test's>>", .open = '<<', .close = '>>')
# Prints as expected
glue_col("{green tests}")
glue_col("{green test]s}")
glue_col("{green test,s}")
glue_col("{green test.s}")
glue_col("{green test?s}")
glue_col("{green test!s}")
glue_col("{green test-s}")
glue_col("{green test:s}")
glue_col("{green test;s}")
glue_col("{green test~s}")
glue_col("{green test^s}")
glue_col("{green test*s}")
glue_col("{green test+s}")
glue_col("<<green tests>>", .open = '<<', .close = '>>')
```

### reprex using `glue_col` doc's example

```r
# using glue_col example

# Prints okay (exact copy)
if (require(crayon)) {
  glue_col("{blue foo bar}")

  glue_col("{blue 1 + 1 = {1 + 1}}")

  white_on_grey <- bgBlack $ white
  glue_col("{white_on_grey
    Roses are {red {colors()[[552]]}}
    Violets are {blue {colors()[[26]]}}
    `glue_col()` can show {red c}{yellow o}{green l}{cyan o}{blue r}{magenta s}
    and {bold bold} and {underline underline} too!
    }")
}

# Does not print (adds a single quote to each fstring)

if (require(crayon)) {
  glue_col("{blue foo bar'}")

  glue_col("{blue 1 + 1' = {1 + 1}}")

  white_on_grey <- bgBlack $ white
  glue_col("{white_on_grey
    Rose's are {red {colors()[[552]]}}
    Violets are {blue {colors()[[26]]}}
    `glue_col()` can show {red c}{yellow o}{green l}{cyan o}{blue r}{magenta s}
    and {bold bold} and {underline underline} too!
    }")
}
```

Crayon appears to not require escaping for colored output

```
library(crayon)
# Works as expected
cat(blue("Hello", "world!\n"))
cat(blue("Hello", "world'!\n"))
```
Is there a particular reason why the `.transformer()` argument isn't made available in `glue_sql` and `glue_data_sql`?

I was hoping to create my own transformer to compose with `sql_quote_transformer` which adds a suffix `-` (i.e. `{foo-}`) which indicates the contents of `foo` should be evaluated raw, without escaping.

This can be very unsafe, of course, but it'd sometimes be useful when dynamically building the SQL string from safe chunks.

I currently do this by wrapping the relevant strings with `DBI::SQL`, which works fine, but having a raw transformer with the `{foo-}` shorthand would be nice.

However, since the .transformer argument isn't exposed, this can't be done. And, actually, even if it were exposed, I wouldn't be able to compose my transformer with the `sql_quote_transformer` because it currently isn't exported.

So the only way I could do this would be by copying the current implementation of `glue_sql` and the `sql_quote_transformer` and hope they're never modified.

So, is there a reason why the `.transformer` isn't exposed and/or why the `sql_quote_transformer` isn't exported? The other solution would be doing the transformer composition internally, but I wouldn't know how to do that without adding a dependency to `purrr::compose`, which goes against the "small, fast, dependency free" philosophy of `glue`.
Using ``{`...`} `` in `glue_sql` escapes an identifier such as a db name or table name. 

However, it should leave already quoted identifiers (`ident_q`) untouched. In particular, `in_schema("db", "tbl")` should not become `"db.tbl"` (assuming ANSI quotes).

``` r
tbl <- dbplyr::in_schema("mydb", "mytbl")
               glue::glue_sql('SELECT * from {`tbl`}', .con = DBI::ANSI())
#> <SQL> SELECT * from "mydb.mytbl"
```

<sup>Created on 2019-10-04 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

Instead, I would have expected `glue_sql` respect the `ident_q` and generate:

```
#> <SQL> SELECT * from mydb.mytbl
```

Of course, ideally what we would _actually_ want is `"mydb"."mytbl"` but I guess this is [a problem for `dbplyr::in_schema`](https://github.com/tidyverse/dbplyr/issues/287) (after all, you would expect an ident_**q** object to be quoted...). 
The following doesn't produce any output
```
x = integer(0)
glue::glue("a{x}")
```
---

This can lead to surprising behaviour:
```
library("glue")
b = 1
glue("a{b[TRUE]}")
# a1
paste0("a", b[TRUE])
# [1] "a1"
```
But when I the vector returns integer(0), this is unexpected
```
# The` a` disappears
glue("a{b[FALSE]}")

paste0("a", b[FALSE])
#[1] "a"
```

---
```
> packageVersion("glue")
[1] '1.3.1'
```
# Issue

If I use a glue template within another glue template, then I get the raw template instead of the evaluation of the template. I can currently work around the issue by using the third approach described below, but it would be nice if evaluation happens recursively

# Reprex 

``` r
library(tidyverse)
template <- "{my_var}.txt"
df <- tribble(~my_var, 
        "a",
        "b",
        "c")
df %>% 
  mutate(file=glue::glue(template))
#> # A tibble: 3 x 2
#>   my_var file  
#>   <chr>  <glue>
#> 1 a      a.txt 
#> 2 b      b.txt 
#> 3 c      c.txt

df %>% 
  mutate(file=glue::glue("touch {template}"))
#> # A tibble: 3 x 2
#>   my_var file              
#>   <chr>  <glue>            
#> 1 a      touch {my_var}.txt
#> 2 b      touch {my_var}.txt
#> 3 c      touch {my_var}.txt

df %>% 
  mutate(file=glue::glue("touch {glue::glue(template)}"))
#> # A tibble: 3 x 2
#>   my_var file       
#>   <chr>  <glue>     
#> 1 a      touch a.txt
#> 2 b      touch b.txt
#> 3 c      touch c.txt
```

<sup>Created on 2019-07-29 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1)</sup>

e.g. https://github.com/tidyverse/tidyr/issues/676

``` r
library(vctrs)
library(glue)

x <- glue("abc")
vec_c(x, x)
#> Only bare vectors have shapes.
```

<sup>Created on 2019-07-22 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>