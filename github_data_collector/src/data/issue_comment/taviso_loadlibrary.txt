Does this project support loading custom DLLs to linux?
Hello, can this project be Porting to Windows win32 System?

I would like to run the mpclient application on a windows system consol.
(Without Windows Defender Installed) Without MsMpEng service on Windows 8, 8.1, 10

Can I build the mpclient together in Visual Studio? if yes how?

thx
When I try to compile it via make, I get this error:

> /usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-linux-gnu/7/libgcc.a when searching for -lgcc
/usr/bin/ld: cannot find -lgcc

GPL-licensed libs are unsuitable for any use in software under other licenses.
I am trying to load one commercial DLL:

`pe_load_library(): successfully mapped Import/res1033.dll@0xf748b000
pelinker (import:272): unknown symbol: KERNEL32.dll:LoadLibraryA
pelinker (import:272): unknown symbol: KERNEL32.dll:Sleep
pelinker (import:272): unknown symbol: KERNEL32.dll:ExitProcess
pelinker (import:272): unknown symbol: KERNEL32.dll:TerminateProcess
pelinker (import:272): unknown symbol: KERNEL32.dll:UnhandledExceptionFilter
pelinker (import:272): unknown symbol: KERNEL32.dll:SetUnhandledExceptionFilter
pelinker (import:272): unknown symbol: KERNEL32.dll:IsDebuggerPresent
pelinker (import:272): unknown symbol: KERNEL32.dll:HeapDestroy
pelinker (import:272): unknown symbol: KERNEL32.dll:FreeEnvironmentStringsA
pelinker (import:272): unknown symbol: KERNEL32.dll:GetEnvironmentStrings
pelinker (import:272): unknown symbol: KERNEL32.dll:GetOEMCP
pelinker (import:272): unknown symbol: KERNEL32.dll:GetLocaleInfoA
pelinker (import:272): unknown symbol: KERNEL32.dll:GetConsoleCP
pelinker (import:272): unknown symbol: KERNEL32.dll:GetConsoleMode
pelinker (import:272): unknown symbol: KERNEL32.dll:FlushFileBuffers
pelinker (import:272): unknown symbol: KERNEL32.dll:LCMapStringA
pelinker (import:272): unknown symbol: KERNEL32.dll:WriteConsoleA
pelinker (import:272): unknown symbol: KERNEL32.dll:GetConsoleOutputCP
pelinker (import:272): unknown symbol: KERNEL32.dll:WriteConsoleW
pelinker (import:272): unknown symbol: KERNEL32.dll:SetStdHandle
DllMain()
HeapCreate(): 0, 4096, 0
GetModuleHandleW(): 0xf74643dc [KERNEL32.DLL]
GetProcAddress(): FIXME: FlsAlloc unresolved
GetProcAddress(): FIXME: FlsGetValue unresolved
GetProcAddress(): FIXME: FlsSetValue unresolved
GetProcAddress(): FIXME: FlsFree unresolved
TlsSetValue(): TlsSetValue(0, 0x56617b50)
GetModuleHandleW(): 0xf74643dc [KERNEL32.DLL]
EncodePointer(): (nil)
GetModuleHandleW(): 0xf74643dc [KERNEL32.DLL]
EncodePointer(): 0xf74359e5
GetModuleHandleW(): 0xf74643dc [KERNEL32.DLL]
EncodePointer(): 0xf7432c6f
GetModuleHandleW(): 0xf74643dc [KERNEL32.DLL]
EncodePointer(): 0xf7435090
GetModuleHandleW(): 0xf74643dc [KERNEL32.DLL]
EncodePointer(): 0x56617b50
GetModuleHandleW(): 0xf74643dc [KERNEL32.DLL]
EncodePointer(): 0x56617c10
GetModuleHandleW(): 0xf74643dc [KERNEL32.DLL]
EncodePointer(): 0x56617b80
GetModuleHandleW(): 0xf74643dc [KERNEL32.DLL]
DecodePointer(): 0x8bcaf6f
GetModuleHandleW(): 0xf74643dc [KERNEL32.DLL]
DecodePointer(): 0xa99e83ef
TlsSetValue(): TlsSetValue(1, 0x576884c8)
GetModuleHandleW(): 0xf74643dc [KERNEL32.DLL]
InterlockedIncrement(): 0xf746c1c8
InterlockedIncrement(): 0xf746c6f8
InterlockedIncrement(): 0xf746c8b4
GetProcAddress(): --- 0xf74351c6 (null)
test: winapi/LoadLibrary.c:43: GetProcAddress: Assertion `hModule == (HANDLE) NULL || hModule == (HANDLE) 'LOAD' || hModule == (HANDLE) 'MPEN' || hModule == (HANDLE) 'VERS' || hModule == (HANDLE) 'KERN'' failed.
Aborted`

I added following code to check why I got assertion:
`static PVOID WINAPI GetProcAddress(HANDLE hModule, PCHAR lpProcName)
{
    ENTRY key = { lpProcName }, *item;

    if (lpProcName == NULL)
      DebugLog("--- %p %s", hModule, lpProcName);`

Do you have any idea why hModule points to somewhere allocated inside the process? 
In order to learn how to use the loadlbrary library with the goal of accessing a commercial win32 library from linux, I started off with a simple hello world example.

Here are my files:

* say-hello.h
```
#ifndef SAY_HELLO_H
#define SAY_HELLO_H
void say_hello();
#endif /* SAY-HELLO */

```
* say-hello.c
```
#include <stdio.h>

void say_hello()
{
  printf("Say Hello!\n");
}
```
* hello-main.c - For testing the dll with wine
```
#include "say-hello.h"

int main(int argc, char*argv[])
{
  say_hello();
}
```
* The build command of the dll:
```
i686-w64-mingw32-gcc -o hello-main.obj -c -O2 -mms-bitfields hello-main.c
i686-w64-mingw32-gcc -o say-hello.obj -c -fPIC -O2 -mms-bitfields say-hello.c
i686-w64-mingw32-gcc -o say-hello.dll -shared say-hello.obj
i686-w64-mingw32-gcc -o hello-main.exe hello-main.obj say-hello.dll
```
* Testing the dll works:
```
wine hello-main.exe
000b:fixme:winediag:start_process Wine Staging 4.0-rc2 is a testing version containing experimental patches.
000b:fixme:winediag:start_process Please mention your exact version when filing bug reports on winehq.org.
Say Hello!
```

Now I wanted to load this dll into load library and I started at mpclient.c sources and removed as much as I could and then tried to call my say_hello() function. This is what I got:

```
#ifndef _GNU_SOURCE
# define _GNU_SOURCE
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>

#include "winnt_types.h"
#include "pe_linker.h"
#include "ntoskernel.h"

int main(int argc, char **argv, char **envp)
{
    PIMAGE_DOS_HEADER DosHeader;
    PIMAGE_NT_HEADERS PeHeader;
    struct pe_image image = {
        .entry  = NULL,
        .name   = "say-hello.dll",
    };

    // Load the mpengine module.
    if (pe_load_library(image.name, &image.image, &image.size) == false) {
        printf("You must add the dll and vdm files to the engine directory");
        return 1;
    }

    // Handle relocations, imports, etc.
    link_pe_images(&image, 1);

    // Fetch the headers to get base offsets.
    DosHeader   = (PIMAGE_DOS_HEADER) image.image;
    PeHeader    = (PIMAGE_NT_HEADERS)(image.image + DosHeader->e_lfanew);

    // Try calling into the library.
    void (*SayHelloPtr)();
    if (get_export("say_hello", &SayHelloPtr) != -1) {
        (*SayHelloPtr)();
    }
    else
        printf("Failed getting pointer to say_hello()!\n");
    
    return 0;
}
```

It coompiles, the dll loads, the `say_hello` symbol is found, but it then crashes at `(*SayHelloPtr)()`. What did I miss?

Thanks!

Hi, Amazing work there mate thanks a lot!

I was just trying to reproduce the code coverage tool but its not working and im not getting any output from anywhere

![screenshot_44](https://user-images.githubusercontent.com/8427469/46542366-1c83e400-c873-11e8-88a7-694912192f99.png)

its been there more than 10 minutes , any ideas why could that be? thanks
Hello taviso.
You have a great app, unfortunately this app does not have a logo yet, may I donate a logo for your app?
I have a Windows 64 bit DLL:

PE32+ executable (DLL) (GUI) x86-64, for MS Windows

Will loadlibrary allow me to load this into a 64 bit app built with gcc?

Or does loadlibrary only work for a 32bit runtime?
In winnt_types.h, both BOOL and BOOLEAN are typedefed as uint8_t. However, in actual windows headers, BOOL is typedefed as an int (and BOOLEAN is an unsigned char, so that definition is correct).