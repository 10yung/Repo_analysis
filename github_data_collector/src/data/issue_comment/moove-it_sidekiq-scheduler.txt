Same as https://github.com/moove-it/sidekiq-scheduler/pull/297, just locking in mock_redis lib, build should go green.
From https://www.ruby-lang.org/en/news/2019/12/25/ruby-2-7-0-released/

```
The following libraries are no longer bundled gems. Install corresponding gems to use these features.
CMath (cmath gem)
Scanf (scanf gem)
Shell (shell gem)
Synchronizer (sync gem)
ThreadsWait (thwait gem) 
E2MM (e2mmap gem)
```

`thwait` is required [here](https://github.com/moove-it/sidekiq-scheduler/blob/40171c14b398d639aee550466a7e927970275c34/lib/sidekiq-scheduler/scheduler.rb#L2)
and looks like it wants `e2mmap` to function

when gem load, the warning as follows: 

```ruby
lib/sidekiq-scheduler/manager.rb:6: warning: loading in progress, circular require considered harmful - lib/sidekiq-scheduler/scheduler.rb
```
and in the source code file: lib/sidekiq-scheduler/scheduler.rb, line 5,

```ruby
require 'sidekiq-scheduler/manager'
```

is not necessary
I want to schedule by job every 3s. But when 1 job is performing more than 3s I don't want the other job to be run.

After a deploy and restart, the "Recurring Jobs" tab appears correctly. Over time, though, the entries begin to drop off and the page ends up blank -- but the schedule is still correct and the jobs are going out correctly.

```
rails 6.0.1
ruby 2.6.5
sidekiq 6.0.3
sidekiq-scheduler 3.0.0
```

Running `sidekiq` managed by `systemctl`.

![Screenshot 2019-12-12 at 12 13 00](https://user-images.githubusercontent.com/14017/70711176-c614ff80-1cd8-11ea-9864-79945030a77a.png)

Fixes #154 (sort of)

This adds important information about job not being enqueued when sidekiq worker is down for any reason at job's scheduled time.
display "at" and "in" in dashboard
I set up my jobs for a regular schedule, but sometimes this schedule has to change.
It would be nice if we could change the schedule via the front end sidekiq UI in the recurring jobs tab.

So if I needed to change this job:

0 2 * * * America/New_York

I could edit it inline and "Save" it without having to redeploy the application.

I thought this is what the docs meant by dynamic schedules but I couldn't get this to work by adding the :dynamic: to the sidekiq.yml.

Any thoughts on this?