Diesels test suits fail since the release of url 2.1.1. I've narrowed down the failure to the following minimal test case:
```rust
let pg_url = "postgres://postgres@localhost/";
let mut db_url = url::Url::parse(pg_url).unwrap();
db_url.set_path("diesel_foo");
println!("{}", db_url);
```

With url 2.1.0 this results in `postgres://postgres@localhost/diesel_foo` being printed, while 2.1.1 outputs `postgres://postgres@localhostdiesel_foo`.

(Sounds similar to #577, but I cannot see how this is related.)
Currently the API only allow writing or parsing rust strings which means enforced UTF-8. However the standard does not enforce this. 

Some protocols (For e.g. Bittorrent) rely of sending bytes in a GET request. These bytes may or may not make a valid UTF-8 string.

Is it possible to provide methods to URL encode/decode name/value bytes pair?
Cargo's internal test suite is unfortunately failing after the update to `url` 2.1.1, and one thing we've narrowed down so far is that the behavior of this changed between 2.1.0 and 2.1.1:

```rust
use url::Url;

fn main() {
    let mut url = Url::parse("git://github.com/foo/bar").unwrap();
    println!("{:?}", url.set_scheme("https"));
}
```

On 2.1.0 this succeeded but on 2.1.1 this is now failing.

Is this an intended change or perhaps an accidental bug? If it's intended, is there a way we can get this working?
`Error::description` has been documented as soft-deprecated since 1.27.0 (17 months ago). It is going to be hard-deprecated soon.

This PR:
- Moves an implementation of `Error::description` into internal `ParseError` type implementation similar to `SyntaxViolation`

Related PR: https://github.com/rust-lang/rust/pull/66919
Enables using `?` postfix operator and `try!` macro with `ParseError` when the enclosing scope expects an `io::Error`.
Closes https://github.com/servo/rust-url/issues/568. Implements `TryFrom<'a str> for Url` gated behind the `try_from` feature. This should make it possible to use this conversion without issuing a breaking change. Thanks!
Having `impl TryFrom<&str> for Url` would be fantastic because it would allow passing both `Url` and `&str` to the same API through an `impl TryInto<Url>` bound.

## Example

```rust
fn make_request(impl TryInto<Url>) -> Result<(), ParseError>;
```

```rust
// Pass a literal directly.
let mut req = make_request("https://example.com")?;

// Create a url, manipulate it, then pass it.
let url = Url::parse("https://example.com")?;
validate_url(&url)?;
let mut req = make_request(url)?;
```

## Caveats

The only caveat here is that `TryFrom` and `TryInto` were stabilized in Rust 1.34, and the minimum guaranteed Rust version for `url` is 1.33, which means this would likely would require a major version bump.

---

Thanks!
data-url has a Mime class distinct from the one in https://crates.io/crates/mime and it's looking like using data-url in servo as a replacement for https://crates.io/crates/base64 might mean redundantly parsing the mime type into both classes.

Could data-url:
1. migrate to that mime class, or
2. offer a codepath that just skips the mime-type parsing entirely, for use by client code that is already parsing its own mime type?
Just wanted this when i looked at the documentation.
This makes the library no_std-compatible in a pretty straightforward manner by disabling methods that can't possibly work in a no_std environment (like Cow and dynamic string allocation)

As a second step, this could be made alloc-enabled but that is not needed for my use-case.