Now the latest version is not compatible with ie8, please tell me which version to download if I want to use it on ie8
`;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory();
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define([], factory);
	}
	else {
		// Global (browser)
		root.CryptoJS = factory();
	}
}(this, function () {

	return CryptoJS;

}));`
## this is my php code, it can work.  i want to use nodejs .
```
function stripPKSC7Padding($source){
	$char = substr($source, -1);
	$num = ord($char);
	if($num==62)return $source;
	$source = substr($source,0,-$num);
	return $source;
}
function decrypt($str,$screct_key){
	$str = base64_decode($str);
	$screct_key = base64_decode($screct_key);
         $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128,MCRYPT_MODE_CBC);
        $iv = str_repeat("\0", $iv_size);
	$decrypt_str = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $screct_key, $str, MCRYPT_MODE_CBC, $iv);
	$decrypt_str = stripPKSC7Padding($decrypt_str);
	return $decrypt_str;
}
```

## this is nodejs code.

```var CryptoJS = require("crypto-js");
var data = "4m4HcVZR14pvTtmNbqgkH3qtmLhJpCZx6oi6u2stmGUo2Z3OmKhtHF/VaiFQ023pKJvhXwSRVjC3IBaotOduxO/zIrIqfg+xnvBWY2zYC/UDLPbsm66yz8omvQLRBGsP8MHYLaOFEgFUgREOCa8AKH7u9v6YlnTIdp1XZGGZnKydissMwTiU4xrM5quZnFwqgTSXmCzSEfeHfjr4qTO+pLGRfY/0J/U932FCq012udkj0pA1UspfCnUU4LY8z3AiPr63TKS4ZEj5Pxz5x7beTf5pGQDrrFHaB87/dbbo8V/143RalmWsyNTiKlAA6S8OO4uXtL6tkYXCddyYQnk6waYqrZOgJLnVS5o9PLzzChU="
var aes = 'Lj59Ubk1ZyzlUZGTKgTl6A==';
// Base64  Utf8
var response =  CryptoJS.enc.Base64.parse(data).toString();
var aes1 =  CryptoJS.enc.Base64.parse(aes).toString();
var bytes  = CryptoJS.AES.decrypt(response, aes1, {
  iv: '',
  mode: CryptoJS.mode.CBC,
  padding: CryptoJS.pad.Pkcs7
});

var plaintext = bytes.toString(CryptoJS.enc.Utf8);
```

my code can not work.please help me ,thanks.
I'm using CryptoJS for EvaporateJS and have this bit of code when initialising evaporate (it's working fine):

```
		cryptoHexEncodedHash256(data) {
			return crypto.SHA256(data);
		},
```

This shouldn't work for two reasons:

1. `data` here is an ArrayBuffer (and typescript tells me that `crypto.SHA256` doesn't take that Type as an argument)
2. The returned wordArray is not a string (so it shouldn't work) - but this may be a question for evaporateJS instead

Modification that should improve this and make this 'right' but instead break things and stop them from working:
1. From this comment: https://github.com/brix/crypto-js/issues/91#issuecomment-297171323 - converting the 'data' into a wordArray first, does not work: 

```
                 cryptoHexEncodedHash256(data) {
			const wordArray = crypto.lib.WordArray.create(data);
			// return crypto.SHA256(wa); // Doesn't work
			return crypto.SHA256(wa).toString(); // Also doesn't work
		},
```

2. Returning the original working wordArray as a string via `.toString()` does not work either

---

This isn't a complain (things are working, minus Typescript screaming at me) - I'm just trying to gain a deeper understanding of what is going on. 

Any guidance/helping comments much appreciated!

Thanks


I tried to implement the key based on encryption angular, i checked your api docs in npmjs.org. I didn't find public key based encryption in your module. if not exist kindly implement it
```
const key = Crypto.enc.Base64.parse('my-key-cipher');
const iv = Crypto.enc.Base64.parse('my-iv-cipher');

const encrypted = CryptoJS.AES.encrypt(password,key,{iv:iv});
const c_text = encrypted.ciphertext.toString(CryptoJS.enc.Base64);
```
my-key-cipher look like:5b8e151628dea2a6abf7158809cf4f3c
my-iv-cipher  look like:3ad77bb40d7a3660a89face32466ef79
**It's hexdex not base64 ,but there are work fine ,make me confusion**
I review docs  find API that:
```
var words = CryptoJS.enc.Base64.parse("SGVsbG8sIFdvcmxkIQ==");
```
I want to make the same cipher text by another side

issues :[encrypt](https://github.com/leocavalcante/encrypt/issues/98)
How can the crypto Library of nodejs decrypt the AES encryption of crypto JS?
Some issues asked for TypeScript and ES6 module support.
This is an repo the same as crypto-js in ES6, wich may solve these problems:
https://www.npmjs.com/package/crypto-es
I have a Rijndael based c# code. I try to encrypt in c# Rijndael and decrpt in javascript(CryptoJS). But i cant match the encrypted values. I try lots of things but nothing worked. 


Here is my c# code:

     public string GenerateKey () {
            string EncodeAes (string key, string input) {
                var aes = GetCryptoParams (key);
                var plainBytes = Encoding.UTF8.GetBytes (input);
                //Key will be Base64 String -- oo
                return Convert.ToBase64String (AesEncrypt (plainBytes, aes));
            }
            RijndaelManaged GetCryptoParams (string key) {
                // random key bytes 16bit
                var keyBytes = new byte[16];
                var secretKeyBytes = Encoding.UTF8.GetBytes (key);
                Array.Copy (secretKeyBytes, keyBytes, Math.Min (keyBytes.Length, secretKeyBytes.Length));
                var aes = new RijndaelManaged {
                    Mode = CipherMode.CBC,
                    Padding = PaddingMode.PKCS7,
                    KeySize = 128,
                    BlockSize = 128,
                    Key = keyBytes,
                    IV = keyBytes
                };

                return aes;
            }
            byte[] AesEncrypt (byte[] plainBytes, RijndaelManaged rijndaelManaged) {
                return rijndaelManaged.CreateEncryptor ()
                    .TransformFinalBlock (plainBytes, 0, plainBytes.Length);
            }
            return EncodeAes ("qwertasdfgzxcvbn", RandomPassword.Generate (16));
        }

        // POST api/values
        [HttpPost]
        public HttpResponseMessage GetEncDecText ([FromBody] encRequest req) {
            string EncodeAes (string key, string input) {
                var aes = GetCryptoParams (key);
                var plainBytes = Encoding.UTF8.GetBytes (input);
                return Convert.ToBase64String (AesEncrypt (plainBytes, aes));
            }
            string DecodeAes (string key, string thisDecode) {
                var aes = GetCryptoParams (key);
                try {
                    var encryptedBytes = Convert.FromBase64String (thisDecode);
                    return Encoding.UTF8.GetString (AesDecrypt (encryptedBytes, aes));
                } catch {
                    return null;

                }

            }
            RijndaelManaged GetCryptoParams (string key) {
                var keyBytes = new byte[16];
                var secretKeyBytes = Encoding.UTF8.GetBytes (key);
                Array.Copy (secretKeyBytes, keyBytes, Math.Min (keyBytes.Length, secretKeyBytes.Length));
                var aes = new RijndaelManaged {
                    Mode = CipherMode.CBC,
                    Padding = PaddingMode.PKCS7,
                    KeySize = 128,
                    BlockSize = 128,
                    Key = keyBytes,
                    IV = keyBytes
                };

                return aes;
            }
            byte[] AesEncrypt (byte[] plainBytes, RijndaelManaged rijndaelManaged) {
                return rijndaelManaged.CreateEncryptor ()
                    .TransformFinalBlock (plainBytes, 0, plainBytes.Length);
            }
            byte[] AesDecrypt (byte[] encryptedData, RijndaelManaged rijndaelManaged) {
                return rijndaelManaged.CreateDecryptor ()
                    .TransformFinalBlock (encryptedData, 0, encryptedData.Length);
            }

        }



And here is my javascript code:

    var serverEncText = "P+KvsN/m3qOc8egIkqyi4w==";
    var secretKey = "7YIOB9NooY225lP6CRSqKQ0KiluAF/6cYn3kFXvJkS0=";
    
    var decryptData2 = function(encryptedData) {
      var Key = CryptoJS.enc.Base64.parse(secretKey);
      var IV = CryptoJS.enc.Utf8.parse(new Buffer.from("0123456789ABCDEF"));
      var decryptedText = CryptoJS.AES.decrypt(encryptedData, Key, {
          keySize: 128 / 8,
          BlockSize: 128,
          iv: IV,
          mode: CryptoJS.mode.CBC,
          padding: CryptoJS.pad.Pkcs7
      });
    
      return decryptedText.toString(CryptoJS.enc.Utf8)
    }
    
    var result = decryptData2(encryptedData);
    console.log(result, "result");


backend works awesome: secretKey is my generated key and serverEncText is my c# encoded text. When when i try this in javascript it's always returns empty string.

How to resolve it ? 


This package hasn't been published in 3 years, and the version on npm currently is missing the important bug fix: https://github.com/brix/crypto-js/commit/7e4cf2f308a3eb3b848d6b9d0dd7b23736eb4aca

Can we please re-publish this to npm so that we can pull it into our projects? Thank you!