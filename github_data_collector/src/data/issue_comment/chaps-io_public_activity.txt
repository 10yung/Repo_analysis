## Repro

```
$ wget -q https://rubygems.org/downloads/public_activity-1.6.4.gem
$ gem unpack public_activity-1.6.4.gem
Unpacked gem: '/tmp/extract_gem2/public_activity-1.6.4'
$ file public_activity-1.6.4/test/migrations/001_create_activities.rb
public_activity-1.6.4/test/migrations/001_create_activities.rb: broken symbolic link to `test/migrations/../../lib/generators/public_activity/migration/templates/migration.rb'
```

## Cause
I guess this is the cause.

Fix broken symlink that points to ../*
https://github.com/rubygems/rubygems/pull/2516


## To Maintainers

Could you try to rebuild `public_activity` gem with a `gem` version 3.0.0 or higher?

## Related issues

https://github.com/chaps-io/public_activity/issues/319
https://github.com/chaps-io/public_activity/issues/344


Hey guys. First: great work! This is exactly the gem I was searching for.

On my dev+production machine sometimes activities get created with parameters being nil.

Then this code fails

```ruby
    def prepare_parameters(params)
      @prepared_params ||= self.parameters.with_indifferent_access.merge(params)
    end
```

with_indifferent_access called on `nil` object.

I'm fixing it in the view with this:

```
<% @activities.each do |activity| %>
  <% activity.parameters ||= {} %>
  <%= render_activities(activity) %>
<% end %>
```

But it's weird that it's necessary. Maybe because I changed my migration to `t.json "parameters"` ? Default was text, but that crashed on my production machine (a vanilla dokku install... I did not check why text did not work, but json worked. If it's relevant I can investigate).

Wouldn't it make sense to just put in the default? Or change that method to always hand out at least empty hash? `{}`


I got an error after adding public_activity to Gemfile and deploy to production:

`ENOENT: no such file or directory, stat '/Users/h/layer/ruby/gems/2.5.0/gems/public_activity-1.6.4/test/migrations/001_create_activities.rb`

Everything is ok if removed public_activity. So I've checked migration file and found the file is a link instead of actual file. 

Any idea how to fix this issue? Thanks
Hi there,

we're using your gem to track creation and modifications of DNS objects in a database. We just implemented a feature to allow a user to import a lot of records at the same time. When creating a record by hand, we call the `create_activity` method by hand on the newly created object and it works fine. Now we'd like to have the same behavior when a user imports a batch of records (let's say 500), except looping over the 500 new objects and calling `create_activity` on each of them isn't really optimized (meaning 500 inserts for 500 activities).

Do you think implementing a new method, let's say `build_activity` or `prepare_activity` to have the activity object just in-memory would be doable ? This way we could just prepare a bunch of activities and mass-imports them in one call into the database.

Thank you : )
I'm considering to change parameters type to jsonb. Here's what I did:

1. Added new column `parameters_json` with type jsonb, convert all parameters to that column and set AR callback to copy `parameters` to `parameters_json` before saving the record.
2. Dropped `parameters` column & rename `parameters_json` to `parameters`.

I don't see any issues after deploying the first step. However, on the 2nd step, the performance gets slower by 6 times. For example, on the following simple query:

```sql
SELECT	"activities".*
FROM	"activities"
WHERE	"activities"."owner_id" IS NOT NULL
ORDER BY "activities"."created_at" DESC
LIMIT 12 OFFSET 24
```

running it on a PostgreSQL client, normally it takes 0.22s, after dropping & renaming the column, it takes 1.45s.

Currently I have 18M records in the table. Appreciate any suggestion, help or thoughts.

This help me tracking issue a lot.
I have:
class ApplicationController < ActionController::Base
  protect_from_forgery with: :exception
  include PublicActivity::StoreController

class Documentation < ApplicationRecord
  include PublicActivity::Model
  tracked owner: Proc.new{ |controller, model| controller.current_user }

and i get:
unknown attribute 'owner' for PublicActivity::Activity.
Not working in Rails6?
Thanks for help.

Using version 1.6.2
I cannot understand why it's happening now. I don't now if was happen because I recently upgrade to Rails 5. But suddenly I don't get access to object.parameters of activity 

```ruby
       tracked :owner      =>  proc {|controller, model| User.current.userable},
          :recipient  =>  proc {|controller, model| model.unit},
          :params => {:comment => "test" },
          :on => {
                   :update => proc {|model, controller| !model.comment.blank? }
                 }
```
```
>> activity.parameters[:comment]
!! #<TypeError: no implicit conversion of Symbol into Integer>
>> activity.parameters
=> "---\n:comment: test\n"
```


It is possible to set custom fields using #tracked method, however, when I create an activity using #create_activity method, custom fields are just ignored

```
def track_activity(model, activity_name, params={})
    model.create_activity activity_name,
                owner: current_user,
                enterprise_id: current_user.enterprise.id,
                params: params
end

```
I have this method in Application controller and I have added enterprise_id field to database.