- [x] Fixes #2483
- [ ] Documentation as to when to use `toNumber` and deprecate `toInt`
- [ ] Write a validator/check to produce a parse error in case `2147483648` is used without an unary expression
I have a simple class where I want to resolve MethodCallExpr.

```java
public class MyClass {
    private Ibaz m_something;

    public interface Ibaz {
    }
    
    public void foo(Class<? extends Ibaz> clazz) {
    }
    
    protected void bar() {
        foo(null); // this works
        foo(m_something.getClass()); // this doesn't work
    }
}
```

In `MethodResolutionLogic.findMostApplicable(..)` the methods with matching name seems to be correct, nevertheless it fails to find a matching method:

`List<ResolvedMethodDeclaration> methodsWithMatchingName =
[JavaParserMethodDeclaration{wrappedNode=public void foo(Class<? extends Ibaz> clazz) {
}, typeSolver=com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver@74d1dc36}]`

In my above example, the first call on `foo(null)` with a null parameter works, whereas the second call, passing the class of `m_something` does not.


We have been running into an issue while parsing the expression `-2147483648`.  According to the Java Spec (https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.1), the largest number a decimal literal can be is `2147483648`, but only in combination with the unary expression, since it then represents the lowest number in Java `-2147483648` (-2^31). Larger numbers or the use of it without the unary expression is considered a compile error.

JavaParser will (correctly) deduce that `-2147483648` is a unary expression containing a literal. However, by calling `asInt` on the `IntegerLiteralExpr` it will (correctly) produce a `NumberFormatExpression` since it cannot represent the value of the literal `2147483648` in a Java `int`. However, the combination itself is a valid Java construct which we cannot correctly parse without an exception.

Quick fix would probably be to return the literal as a `long`, not sure if this would introduce other problems.



It seems that in the statement bellow the comment is not setted to the correct node

    // a comment before parent
    if (file != null) {}

is parsed to 

    if (// a comment before parent
      file != null) {
    }

It seems that CommentsInserter.insertComments(..) postprocessor run on child nodes but in this case it should take into account the node itself.

What do you think about this?


Resolving a `TypeParameter` from `ClassOrInterfaceType` fails with `java.lang.UnsupportedOperationException`.

**How to reproduce**
```
TypeSolver solver = new ReflectionTypeSolver();
ParserConfiguration parserConfiguration = new ParserConfiguration();
parserConfiguration.setSymbolResolver(new JavaSymbolSolver(solver));
JavaParser parser = new JavaParser(parserConfiguration);
ParseResult<CompilationUnit> cu = parser.parse("class A<T> { T t; }");
cu.ifSuccessful( c -> {
    c.accept(new VoidVisitorAdapter<Void>() {
        @Override
	public void visit(ClassOrInterfaceType n, Void arg) {
	    super.visit(n, arg);
	    n.resolve();
	}
}, null);
```
**Expected**
`n.resolve()` returns with `ResolvedTypeVariable`

**Result**
`n.resolve()` throws an exception.
**Steps to reproduce:**
```java
CompilationUnit u = StaticJavaParser.parse("/*Comment*/ package a; class A {}");
System.out.println(u.getComments());
```

**Expected result:**
A singleton list containing the comment that reads `/*Comment*/`

**Observed result:**
An empty list

I can get the comment with `u.getComment()`. I don't know if this is intended, but I think it's kind of ugly to have to call both `getComment` and `getComments` if I want to get ALL the comments in the compilation unit.
When parsing a Java source code, the parser reports an error as follows:

Lexical error at line 71, column 21.  Encountered: "\u017d" (381) ...

Preprocessing of Unicode escapes does not help. The file is attached.
[649201.java.txt](https://github.com/javaparser/javaparser/files/4017437/649201.java.txt)

Type resolution of the scope expression in a method call expression fails when the variable used as the scope of the method call is declared outside of the block where the method call is contained in. 
The following code works with a simple `JavaParserFacade.get(new ReflectionTypeSolver(true)).getType(scope);` when trying to resolve the type of the `a` scope of the `a.cross(b, v)` method call expression for the following code:
```java
import javax.vecmath.Vector3f;
class X {
    void foo(Vector3f a, Vector3f b) {
        Vector3f v = new Vector3f();
        v.cross(a, b);
    }
}
```
However, the actual code I am trying to do this on (much more complex) has an additional block around the method call, like so:
```java
import javax.vecmath.Vector3f;
class X {
    void foo(Vector3f a, Vector3f b) {
        Vector3f v = new Vector3f();
        {
           v.cross(a, b);
        }
    }
}
```
In this case, type resolution of the `v` variable in the method call expression scope fails with:
```
Exception in thread "main" UnsolvedSymbolException{context='v', name='Solving v', cause='null'}
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:300)
	at com.github.javaparser.symbolsolver.javaparsermodel.TypeExtractor.visit(TypeExtractor.java:65)
	at com.github.javaparser.ast.expr.NameExpr.accept(NameExpr.java:79)
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(JavaParserFacade.java:467)
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:329)
	at com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(JavaParserFacade.java:311)
	at Test.lambda$1(Test.java:24)
	at java.base/java.util.Optional.ifPresent(Optional.java:176)
	at Test.lambda$0(Test.java:23)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1510)
	at Test.main(Test.java:17)
```
I have some information about Node position. But I can't find any API to support this feature. 
