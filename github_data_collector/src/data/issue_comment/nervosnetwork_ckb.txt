For compatibility reasons, there're certain bugs that we have to leave
to the next hardfork to fix. However those bugs, especially VM bugs
might lead to surprising unexpected behaviors. This change adds a new
checker that checks against newly created cells for scripts with bugs,
and reject those transaction when we can. This way we can alert users
about the bugs as early as we can.
Ease developing a node directly integrated into CKB P2P network.

See the requirement from https://github.com/nervosnetwork/p2p/issues/205

This RPC requires user to create the index first.
None

Learned from HTTP Response, use `StatusCode` to indicate the result of sync-operation, try to replace original `Result<T, future::Error>`.
More detail: https://github.com/keroro520/ckb/blob/a66ab9a7d5eec69211a9a5073ca32691113a0c2e/sync/src/status.rs#L31-L53
Mostly changes are generated by `moleculec`.

The core idea is to introduce a `HeaderContext` used in the `POWVerifier` context, to allow us to put a signature.

The `HeaderContextType` has two kinds:
* `NoneContext` - the `HeaderContext` only contains header itself
* `Cellbase` - the `HeaderContext` need cellbase tx as it's context

The core logic of poa https://github.com/nervosnetwork/ckb/pull/1855/files#diff-411cac0ad5e86ba40dbe50576538c9d7R1

TODO:
- [ ] more test(sync, relay poa blocks)
- [ ] miner support mine POA block.

### Purpose

Replace the JSON-RPC method [`get_cellbase_output_capacity_details`].

### Reasons

#### Remove the Ambiguity

##### Secondary Issuance

According to [CKB RFC-0015](https://github.com/nervosnetwork/rfcs/blob/dda4478/rfcs/0015-ckb-cryptoeconomics/0015-ckb-cryptoeconomics.md#collecting-state-rent-with-secondary-issuance-and-the-nervosdao):
> Then 60% of the secondary issuance goes to the miners, 35% of the issuance goes to the NervosDAO to be distributed to the locked tokens proportionally.

Only 60% of the secondary issuance goes to the miners.
But we can't see it from the response of [`get_cellbase_output_capacity_details`].

##### Transaction Fees

According to [CKB v0.25.2 Code](https://github.com/nervosnetwork/ckb/blob/dda4ed9/util/reward-calculator/src/lib.rs#L87-L215):

```rust
    /// Miner get (tx_fee - 40% of tx fee) for tx commitment.
    /// Be careful of the rounding, tx_fee - 40% of tx fee is different from 60% of tx fee.
    pub fn txs_fees(&self, target: &HeaderView) -> Result<Capacity, Error> {
        /* ... omitted ... */
    }

    /// Earliest proposer get 40% of tx fee as reward when tx committed
    ///  ... omitted ...
    pub fn proposal_reward(&self, parent: &HeaderView, target: &HeaderView) -> Result<Capacity, Error> {
        /* ... omitted ... */
    }
```

The transaction fees which paid to miner is not same as the total transaction fee of all transactions in the mined block.
The `tx_fee` in [`get_cellbase_output_capacity_details`] is only about 60% of total transaction fee in the mined block.
And transaction fees in miner reward have two part: committed fee/reward and proposal fee/reward.

#### Help for Doing Statistics

- Currently, there is no interface can query total issuance of a block.
- Currently, there is no interface can query total transaction fee of a block.

#### Simplify the Usage

Currently, if we want to know which miner mined block-N and how many rewards he received for block-N, **we have to use a magic number 11 (it's a bit obscure, and reading the source code is the only way to get it)** and call JSON-RPC 4 times:
```rust
/* pseudo-code */
let miner =  rpc
    .get_block_hash(N)
    .map(|hash| rpc.get_block(hash).cellbase().witness().parse_miner())
    .unwrap();
let reward = rpc
    .get_block_hash(N+11)
    .map(|hash| rpc.get_cellbase_output_capacity_details(hash))
    .unwrap();
```

The new JSON-RPC method will hide the magic number and return the block hash which finalized the miner reward:
```rust
/* pseudo-code */
let hash =  rpc.get_block_hash(N).unwrap();
let miner = rpc.get_block(hash).cellbase().witness().parse_miner()).unwrap();
let reward = rpc.get_block_economic_state(hash).unwrap();
```

### Further

Currently, the `Transaction Fee` on the ckb explorer is the sum of committed reward and proposal reward in miner reward of a block, not the total transaction fee of all transactions in that block.
**It's really hard to understand the `Transaction Fee` for newbies.**

For example:
- [block-14 on mainnet](https://explorer.nervos.org/block/0x5b78979ee71a7a32868e6256874571b2b59a9e40e38e6923e653db4ae5fd3d1d) has no proposal transaction, and total transaction fee of it is `66.00000000 CKB`, but the `Transaction Fee` on the ckb explorer is `39.60000000 CKB`.
- [block-334 on mainnet](https://explorer.nervos.org/block/0xbaf6c624282a7a9c5bc673ea79d6b612de822f68cb8e3f8004bf887dd11583de) has no transaction expect cellbase, but the `Transaction Fee` on the ckb explorer is `0.40522815 CKB`.

**I think we should unify the names.**
And, I didn't find any description about how to partition the total transaction fee of all transactions in a block into committed fee/reward and proposal fee/reward in [CKB RFCs](https://github.com/nervosnetwork/rfcs/tree/dda4478/rfcs).
Did I miss it?

[`get_cellbase_output_capacity_details`]: https://github.com/nervosnetwork/ckb/tree/dda4ed9/rpc#get_cellbase_output_capacity_details
For example, client may want to know `min_fee_rate`.

These infos can be added to the method `tx_pool_info`.