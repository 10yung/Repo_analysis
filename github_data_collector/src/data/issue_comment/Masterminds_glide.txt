This PR adds error checks for err variables which were assigned but never checked.

These issues were found using CodeLingo - [codelingo.io](url)
I am trying to install [`github.com/elastic/go-elasticsearch`](https://github.com/elastic/go-elasticsearch), which uses go modules. In their `go.mod` file, they name their package [`github.com/elastic/go-elasticsearch/v7`](https://github.com/elastic/go-elasticsearch/blob/7.x/go.mod#L1) (note the added `v7` for namespacing). 

However, this does not work with glide.

When I try to get glide to install `github.com/elastic/go-elasticsearch` to `vendor/github.com/elastic/go-elasticsearch/v7` (note the `v7` in the install path), with the following in `glide.yaml`:

```yaml
- package: github.com/elastic/go-elasticsearch/v7
  repo: git@github.com:elastic/go-elasticsearch
  version: v7.4.1
```

This _magically_ is changed to the following in the `glide.lock`:

```yaml
- name: github.com/elastic/go-elasticsearch
  version: d8acaa5faade05290d8b500b8f3892a378f2d2e7
  repo: git@github.com:elastic/go-elasticsearch
  subpackages:
  - v7
```

However, I do not want the `name` to change. I want it to stay as `github.com/elastic/go-elasticsearch/v7`. Ie, I want the following in my `glide.lock`:
```yaml
- name: github.com/elastic/go-elasticsearch/v7
  version: d8acaa5faade05290d8b500b8f3892a378f2d2e7
  repo: git@github.com:elastic/go-elasticsearch
```

**Suggestion**: please allow us to disable the automatic path-to-subpackage behavior. Ie, maybe the following `glide.yaml` should keep the `name` field the same in the lock file:

```yaml
- package: github.com/elastic/go-elasticsearch/v7
  repo: git@github.com:elastic/go-elasticsearch
  version: v7.4.1
  subpackages: []
```

or

```yaml
- package: github.com/elastic/go-elasticsearch/v7
  repo: git@github.com:elastic/go-elasticsearch
  version: v7.4.1
  auto_subpackage_resolution: false
```

Hi, I'm Yevgeny Pats Founder of [Fuzzit](https://fuzzit.dev) - Continuous fuzzing as a service platform.

We have a free plan for OSS and I would be happy to contribute a PR if that's interesting.
The PR will include the following
- [go-fuzz](https://github.com/dvyukov/go-fuzz) fuzzers (This is generic step not-connected to fuzzit)
- Continuous Fuzzing of master branch which will generate new corpus and look for new crashes
- Regression on every PR that will run the fuzzers through all the generated corpus and fixed crashes from previous step. This will prevent new or old bugs from crippling into master.

You can see our basic example [fuzzitdev/example-go](https://github.com/fuzzitdev/example-go) and you can see an example of "in the wild" integration [google/syzkaller](https://github.com/google/syzkaller).

Let me know if this is something worth working on.

Cheers,
Yevgeny

Package golang.org/x/crypto/ed25519 was moved to stdlib in go 1.13
Glide is failing on resolution regardless there is a conditional build tag in the imported library.

I am importing
golang.org/x/crypto/ed25519
but glide import is failing on 
```
[DEBUG]	Trying to open golang.org/x/crypto/ed25519 (/Users/martin.kunc/.glide/cache/src/https-golang.org-x-crypto/ed25519)
[DEBUG]	Package golang.org/x/crypto/ed25519 imports crypto/ed25519
[DEBUG]	Missing crypto/ed25519. Trying to resolve.
[0;32m[INFO]	[m--> Fetching crypto/ed25519
[0;33m[WARN]	[mUnable to checkout crypto/ed25519
[0;31m[ERROR]	[mError looking for crypto/ed25519: Cannot detect VCS
```


Maybe similar to #935

Hi Gliders!   First off, many thanks for a lovely package manager for Go and making life WAY easier.  Hats off!

Kind request for Cygwin!

```
$ curl https://glide.sh/get | sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  4833  100  4833    0     0  22068      0 --:--:-- --:--:-- --:--:-- 21968
ARCH=amd64
OS=cygwin_nt-10.0
Using curl as download tool
Getting https://glide.sh/version
TAG=v0.13.2
GLIDE_DIST=glide-v0.13.2-cygwin_nt-10.0-amd64.tar.gz
Downloading https://github.com/Masterminds/glide/releases/download/v0.13.2/glide-v0.13.2-cygwin_nt-10.0-amd64.tar.gz
Did not find a release for your system: cygwin_nt-10.0 amd64
Trying to find a release on the github api.
LATEST_RELEASE_URL=https://api.github.com/repos/Masterminds/glide/releases/tags/v0.13.2
Getting https://api.github.com/repos/Masterminds/glide/releases/tags/v0.13.2
Sorry, we dont have a dist for your system: cygwin_nt-10.0 amd64
```
Glide did not work when a repository have more levels, like `https://gitlab.com/vendor/project/repository`, the error like the message bellow is printed:

```
[ERROR] Error scanning gitlab.com/jaswdr/project/repo/package: cannot find package "." in:
        /home/jaswdr/.glide/cache/src/git-gitlab.com-jaswdr-project-repo.git/package
```
When updating vendor for flannel repo,  https://github.com/coreos/flannel/blob/master/glide.yaml , glide outputs `Update failed for : Cannot detect VCS`. It took me a while to figure out what is wrong.

```
ramichen:flannel (ipopt) $ make update-glide
# go get -d -u github.com/Masterminds/glide
glide --debug update --strip-vendor
[DEBUG]	No mirrors.yaml file exists
[INFO]	Downloading dependencies. Please wait...
[DEBUG]	Locking https-golang.org-x-net
[DEBUG]	Locking https-github.com-Microsoft-go-winio
[DEBUG]	Locking https-golang.org-x-oauth2
[DEBUG]	Locking https-github.com-joho-godotenv
[DEBUG]	Locking https-k8s.io-apimachinery
[DEBUG]	Locking https-google.golang.org-api
[DEBUG]	Locking https-github.com-bronze1man-goStrongswanVici
[DEBUG]	Locking https-k8s.io-client-go
[DEBUG]	Locking https-github.com-coreos-go-systemd
[DEBUG]	Locking https-github.com-aws-aws-sdk-go
[DEBUG]	Locking https-
[DEBUG]	Locking https-github.com-coreos-etcd
[DEBUG]	Locking https-github.com-coreos-go-iptables
[DEBUG]	Locking https-github.com-gorilla-mux
[DEBUG]	Locking https-github.com-buger-jsonparser
[DEBUG]	Setting up the cache directory
[DEBUG]	Locking https-github.com-coreos-pkg
[DEBUG]	Locking https-github.com-jonboulle-clockwork
[DEBUG]	Locking https-github.com-Microsoft-hcsshim
[DEBUG]	Locking https-github.com-vishvananda-netlink
[INFO]	--> Fetching updates for golang.org/x/net
[INFO]	--> Fetching updates for github.com/Microsoft/go-winio
[DEBUG]	Locking https-github.com-golang-glog
[INFO]	--> Fetching updates for github.com/golang/glog
[INFO]	--> Fetching updates for github.com/vishvananda/netlink
[INFO]	--> Fetching updates for golang.org/x/oauth2
[INFO]	--> Fetching updates for github.com/joho/godotenv
[INFO]	--> Fetching updates for google.golang.org/api
[INFO]	--> Fetching updates for k8s.io/apimachinery
[INFO]	--> Fetching updates for github.com/bronze1man/goStrongswanVici
[INFO]	--> Fetching updates for github.com/coreos/go-systemd
[INFO]	--> Fetching updates for k8s.io/client-go
[INFO]	--> Fetching 
[WARN]	Unable to checkout 
[ERROR]	Update failed for : Cannot detect VCS
[DEBUG]	Unlocking https-
```
It turns out to be a `pacakge` typo in line `- pacakge: github.com/sirupsen/logrus` resulting in the error. I find this by printing the whole dep object and the version `v1.0.6` is the clue.

```
ramichen:glide (master) $ git diff
diff --git a/repo/installer.go b/repo/installer.go
index 9be777c..1046ef6 100644
--- a/repo/installer.go
+++ b/repo/installer.go
@@ -526,7 +526,7 @@ func ConcurrentUpdate(deps []*cfg.Dependency, i *Installer, c *cfg.Config) error
                                        }
                                        cache.Lock(key)
                                        if err := VcsUpdate(dep, i.Force, i.Updated); err != nil {
-                                               msg.Err("Update failed for %s: %s\n", dep.Name, err)
+                                               msg.Err("Update failed for %s %#v: %s\n", dep.Name, dep, err)
                                                // Capture the error while making sure the concurrent
                                                // operations don't step on each other.
                                                lock.Lock()

[WARN]	Unable to checkout 
[ERROR]	Update failed for  &cfg.Dependency{Name:"", Reference:"v1.0.6", Pin:"", Repository:"", VcsType:"", Subpackages:[]string(nil), Arch:[]string(nil), Os:[]string(nil)}: Cannot detect VCS
```
Hi,

I tried using release v.1.5.1 and latest, with below SQS config 

`var sqsClient = sqs.New(session.Must(session.NewSession(&aws.Config{
  Region:         aws.String("YOUR_AWS_REGION"),
  Credentials:    credentials.NewStaticCredentials("YOUR_AWS_ACCESS_KEY", "YOUR_AWS_ACCESS_SECRET", ""),
  HTTPClient: &http.Client{
    Timeout: time.Second * 120,
  },
})))

var visibilityTimeout = 20

&machineryCfg.SQSConfig{
  Client:            sqsClient,
  VisibilityTimeout: &visibilityTimeout,
  WaitTimeSeconds:   10,
}`

The consumer just hang If a task took more than 20 seconds to complete, and need to restart the consumer manually.

**The SQS error**
`ERROR: 2019/03/17 04:14:27 sqs.go:232 error when deleting the delivery. the delivery is {
  Messages: [{
      Attributes: {
        SentTimestamp: "1552751115642"
      },
      Body: "{}",
      MD5OfBody: "",
      MessageId: "",
      ReceiptHandle: "
    }]
}`

The solution for now is to increase **visibilityTimeout** to prevent the consumer from hang.
This will enable glide mulit-arch builds