When a service.proto have more then one services, the protoc-gen-swagger tool can not find right other(not the first one) service's method comments.
I changed protoComments's argument, then the service.swagger.json's summary field was right. 
But I'm not sure is the right way to fix it.
Please checkout, thanks.
Bumps [rubyzip](https://github.com/rubyzip/rubyzip) from 1.2.3 to 2.0.0.
<details>
<summary>Release notes</summary>

*Sourced from [rubyzip's releases](https://github.com/rubyzip/rubyzip/releases).*

> ## v2.0.0
> Security
> 
> - Default the `validate_entry_sizes` option to `true`, so that callers can trust an entry's reported size when using `extract` [#403](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/403)
>    - This option defaulted to `false` in 1.3.0 for backward compatibility, but it now defaults to `true`. If you are using an older version of ruby and can't yet upgrade to 2.x, you can still use 1.3.0 and set the option to `true`.
> 
> Tooling / Documentation
> 
> - Remove test files from the gem to avoid problems with antivirus detections on the test files [#405](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/405) / [#384](https://github-redirect.dependabot.com/rubyzip/rubyzip/issues/384)
> - Drop support for unsupported ruby versions [#406](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/406)
> 
> ## v1.3.0
> Security
> 
> - Add `validate_entry_sizes` option so that callers can trust an entry's reported size when using `extract` [#403](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/403)
>    - This option defaults to `false` for backward compatibility in this release, but you are strongly encouraged to set it to `true`. It will default to `true` in rubyzip 2.0.
> 
> New Feature
> 
> - Add `add_stored` method to simplify adding entries without compression [#366](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/366)
> 
> Tooling / Documentation
> 
> - Add more gem metadata links [#402](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/402)
> 
> ## v1.2.4
> - Do not rewrite zip files opened with `open_buffer` that have not changed [#360](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/360)
> 
> Tooling / Documentation
> 
> - Update `example_recursive.rb` in README [#397](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/397)
> - Hold CI at `trusty` for now, automatically pick the latest ruby patch version, use rbx-4 and hold jruby at 9.1 [#399](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/399)
</details>
<details>
<summary>Changelog</summary>

*Sourced from [rubyzip's changelog](https://github.com/rubyzip/rubyzip/blob/master/Changelog.md).*

> # 2.0.0 (2019-09-25)
> 
> Security
> 
> - Default the `validate_entry_sizes` option to `true`, so that callers can trust an entry's reported size when using `extract` [#403](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/403)
>    - This option defaulted to `false` in 1.3.0 for backward compatibility, but it now defaults to `true`. If you are using an older version of ruby and can't yet upgrade to 2.x, you can still use 1.3.0 and set the option to `true`.
> 
> Tooling / Documentation
> 
> - Remove test files from the gem to avoid problems with antivirus detections on the test files [#405](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/405) / [#384](https://github-redirect.dependabot.com/rubyzip/rubyzip/issues/384)
> - Drop support for unsupported ruby versions [#406](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/406)
> 
> # 1.3.0 (2019-09-25)
> 
> Security
> 
> - Add `validate_entry_sizes` option so that callers can trust an entry's reported size when using `extract` [#403](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/403)
>    - This option defaults to `false` for backward compatibility in this release, but you are strongly encouraged to set it to `true`. It will default to `true` in rubyzip 2.0.
> 
> New Feature
> 
> - Add `add_stored` method to simplify adding entries without compression [#366](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/366)
> 
> Tooling / Documentation
> 
> - Add more gem metadata links [#402](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/402)
> 
> # 1.2.4 (2019-09-06)
> 
> - Do not rewrite zip files opened with `open_buffer` that have not changed [#360](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/360)
> 
> Tooling / Documentation
> 
> - Update `example_recursive.rb` in README [#397](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/397)
> - Hold CI at `trusty` for now, automatically pick the latest ruby patch version, use rbx-4 and hold jruby at 9.1 [#399](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/399)
</details>
<details>
<summary>Commits</summary>

- [`2825898`](https://github.com/rubyzip/rubyzip/commit/2825898f69fbf1efe4e43452adae6ac5d074ec1c) Merge pull request [#408](https://github-redirect.dependabot.com/rubyzip/rubyzip/issues/408) from rubyzip/v2-0-0
- [`cb407b1`](https://github.com/rubyzip/rubyzip/commit/cb407b106541c345329a017d6eb34026cb372872) Bump version to 2.0.0
- [`e1d9af6`](https://github.com/rubyzip/rubyzip/commit/e1d9af6e46f7eb0d0b728958a57f7e28d60301a4) Merge pull request [#406](https://github-redirect.dependabot.com/rubyzip/rubyzip/issues/406) from rubyzip/bump-supported-ruby
- [`3641a96`](https://github.com/rubyzip/rubyzip/commit/3641a963ea0c34275562250d7e67380c85fc2570) Merge pull request [#405](https://github-redirect.dependabot.com/rubyzip/rubyzip/issues/405) from rubyzip/remove-test-files
- [`e79d9ea`](https://github.com/rubyzip/rubyzip/commit/e79d9ea2922be12db121c20f5dc55bba8a35418a) Merge pull request [#407](https://github-redirect.dependabot.com/rubyzip/rubyzip/issues/407) from rubyzip/v1-3-0
- [`7c65e1e`](https://github.com/rubyzip/rubyzip/commit/7c65e1e3595031392f1050b81fb2b95b0f2ee764) Bump version to 1.3.0
- [`d65fe7b`](https://github.com/rubyzip/rubyzip/commit/d65fe7bd283ec94f9d6dc7605f61a6b0dd00f55e) Merge pull request [#403](https://github-redirect.dependabot.com/rubyzip/rubyzip/issues/403) from rubyzip/check-size
- [`35446f4`](https://github.com/rubyzip/rubyzip/commit/35446f467b739d05790356ab86915de76f0120f1) Drop old ruby and JDK versions from CI
- [`74d4bec`](https://github.com/rubyzip/rubyzip/commit/74d4bec371158c4c2a9fe965302dc9649c941a73) Remove test files from gem
- [`97cb6ae`](https://github.com/rubyzip/rubyzip/commit/97cb6aefe6d12bd2429d7a2e119ccb26f259d71d) Warn when an entry size is invalid
- Additional commits viewable in [compare view](https://github.com/rubyzip/rubyzip/compare/v1.2.3...v2.0.0)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rubyzip&package-manager=bundler&previous-version=1.2.3&new-version=2.0.0)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/grpc-ecosystem/grpc-gateway/network/alerts).

</details>
Not ready for merge yet, start of work towards solving #1108.

I was able to get proto internals to not fail by generating the proto files as part of the tests--not sure if this is the approach that y'all want to take.
grpc-gateway has an [odd restriction](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/runtime/query.go#L142) on query parameters with map types. Specifically, it refuses to unmarshal a map type whether the value type is a string slice, such as `map[string][]string`.

grpc-gateway makes the assumption that the underlying Go type is authoritative for it's representation in query parameters.

I would expect ```?q[foobar]=hello&q[foobar]=world``` to successfully unmarshal to both a map[string][]string if using GoGo protobuf's custom type mappings as well as the following type raw protobuf type:
```proto
message MapStringSlice {
  string key = 1;
  string value = 2;
}

message RPC {
   repeated MapStringSlice q = 1;
}
```

The wire representation of this type is identical to proto's `map<string, string>` and is recommended [for backwards compatibility by the documentation for implementations that may not support map](https://developers.google.com/protocol-buffers/docs/proto3#backwards-compatibility): 

I'm happy to write a patch for this functionality if it's welcomed by the maintainers.
Makes it possible to omit the package comment from generated code. This is useful if the generated code is added to an existing package that already has package documentation (the generated package comment might be misleading in that case).

For an example of a package where this would be useful, see https://pkg.go.dev/github.com/google/trillian?tab=doc.
Add an empty package to `grpc-gateway/third_party/googleapis` to allow vendoring the folder. For example, a `tools.go` file may look like the followings:

```go
package your_package

import (
     _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis"
)
```

And you vendor this package by running `go mod vendor`. To generate grpc gateway code, you can run with the followings:

```
protoc -I. \
   -I./vendor/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
   --plugin=protoc-gen-grpc=grpc_ruby_plugin \
   --grpc-gateway_out=logtostderr=true:. \
   path/to/your_service.proto
```
Our team makes heave use of https://github.com/envoyproxy/protoc-gen-validate and would like a way for those validations to end up in the swagger spec so we don't need to define them twice.
This is not a bug reports. But I find it little bit awkward to implement more Swagger features by digging into the Swagger proto files included with protoc-gen-swagger, as I could not find documentation on how to use more advanced features of swagger with grpc-gateway.

Anyway, after digging, much, I could not find any way to setup route level "Bearer" security.

Here's an example swagger.json file that has route level security setup.
```js
   "/order/{order_id}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
    ...
```
With this, I can define which routes are public (JWT Bearer Token not required) or protected (JWT Bearer Token required).

How can I define this in proto so that protoc-gen-swagger can generate the swagger.json with the security option?

Thanks.
@theRealWardo provide a solution to support stream google.api.HttpBody for grpc-gateway (https://github.com/grpc-ecosystem/grpc-gateway/issues/958#issuecomment-557616206)

I modify his codes to adapt current master branch. The main change is:
1. Unpack stream google.apiHttpBody to get the real data.
2. Properly set the Content-Type of HTTP header when stream google.api.HttpBody response is received.
 The doc of [replace-a-response-forwarder-per-method](https://github.com/grpc-ecosystem/grpc-gateway/blob/ee3ef70b7777cde4e61e4e224cb11e92beecee6a/docs/_docs/customizingyourgateway.md#replace-a-response-forwarder-per-method) is not very clear. 

We cannot directly access the `forward_MyService_Checkout_0` variable outside the generated gw file. If we modify the gw file directly, it will break the automatic generation mechanism.

So what's the recommended way to overwrite the default forwarder?