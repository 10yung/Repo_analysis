Increase the size passed to strncat(3) by 1 to silence gcc warning.
The increased value is accounted for the NULL terminator.

This change won't change anything at runtime since strncat(3) will
append that '\0' if size of dst is reached but '\0' is not found.
It appears that this functionality was not fully implemented. Thus, code generation always failed when trying to use QRinput_setFNC1First().

Signed-off-by: Rüdiger Ihle <r.ihle@s-t.de>
In split.c, there is such a function

`static int Split_splitString(const char *string, QRinput *input,QRencodeMode hint)
{
	int length;
	QRencodeMode mode;

	if(*string == '\0') return 0;

	mode = Split_identifyMode(string, hint);
	if(mode == QR_MODE_NUM)
		length = Split_eatNum(string, input, hint);
	else if(mode == QR_MODE_AN)
		length = Split_eatAn(string, input, hint);
	else if(mode == QR_MODE_KANJI && hint == QR_MODE_KANJI)
		length = Split_eatKanji(string, input, hint);
	else																				
		length = Split_eat8(string, input, hint);
	
	if(length == 0) return 0;
	if(length < 0) return -1;
	return Split_splitString(&string[length], input, hint);//Repeated caller
}
`
There is a problem here:
When I transplanted the code onto MCU, I caused a stack overflow.
Many people make the code run by modifying the stack size at the expense of SRAM space.
However, I later found that it would be no problem to modify this function to the following

`static int Split_splitString(const char *string, QRinput *input,QRencodeMode hint)
{
	int length;
	QRencodeMode mode;

	while(*string != '\0') 
	{
		mode = Split_identifyMode(string, hint);
		if(mode == QR_MODE_NUM)
			length = Split_eatNum(string, input, hint);
		else if(mode == QR_MODE_AN)
			length = Split_eatAn(string, input, hint);
		else if(mode == QR_MODE_KANJI && hint == QR_MODE_KANJI)
			length = Split_eatKanji(string, input, hint);
		else																				
			length = Split_eat8(string, input, hint);
		
		if(length == 0) return 0;
		if(length < 0) return -1;
	
		string = &string[length];
		length=0;
	}
	return 0;
}
`
In this way, even if the stack size does not need to be increased, it can run normally.
This may be better.

Coverity complains of the follow line
https://github.com/fukuchi/libqrencode/blob/master/qrinput.c Line 449
       } else if(entry->size - words * 3 == 2) {
		val  = (unsigned int)(entry->data[words*3  ] - '0') * 10;
		val += (unsigned int)(entry->data[words*3+1] - '0');
		BitStream_appendNum(bstream, 7, val);
		if(ret < 0) return -1; //here
	}
"
Medium:Unchecked return value(CHECKED_RETURN)
CWE252: Value returned from a function is not checked for errors before being used
Calling "BitStream_appendNum" without checking return value (as is done elsewhere 31 out of 34 times).
"
I'm curious whether we should check this BitStream_appendNum() result or not.
Thanks.
I love the fact that I can make a qr code, with the `qrencode` command line utility, with `-t UTF8`, that I can save as a text file, and open in e.g. Notepad in Windows, which displays the code. The only problem is that the default color scheme of Notepad is black text on a white background.  That means in order for the code to scan, I have to select the text.  Please add an option so the code will be generated to use dark text on a light background.

thanks.
we successfully encoded a qrcode using the given c code but how can i decode a qrcode using the same
I was trying to install and compile libqrencode by following  the instructions in [ FUKUCHI Kentaro's web with **CygWin**.  pages](https://fukuchi.org/works/qrencode/) . When I proceeded to the step:

> Now you are ready to compile the library and tool. Type the following commands:

```
./configure
make
sudo make install
sudo ldconfig
```
I typed `./configure` in the command line, but got remarks as following 

> $ ./configure
checking build system type... x86_64-unknown-cygwin
checking host system type... x86_64-unknown-cygwin
checking target system type... x86_64-unknown-cygwin
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... no
checking whether make supports nested variables... no
checking for style of include used by make... none
checking for gcc... no
checking for cc... no
checking for cl.exe... cl.exe
checking whether the C compiler works... yes
checking for C compiler default output file name... conftest.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... obj
checking whether we are using the GNU C compiler... no
checking whether cl.exe accepts -g... yes
checking for cl.exe option to accept ISO C89... none needed
checking whether cl.exe understands -c and -o together... no
checking dependency style of /cygdrive/c/Users/Administrator/Desktop/libqrencode-master/use/compile cl.exe... none
checking for an ANSI C-conforming const... yes
checking for inline... __inline
checking how to run the C preprocessor... /cygdrive/c/Users/Administrator/Desktop/libqrencode-master/use/compile cl.exe -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for fgrep... /usr/bin/grep -F
checking for non-GNU ld... no
configure: error: no acceptable ld found in $PATH

How could I fix this problem? Thanks. 
I originally was going to implement these, but turns out they already exist... So this simply documents them.
XPM is supposed to be a valid C syntax[1], but the output of
qrencode doesn't parse:

    $ qrencode -M -v1 -t XPM 12345 > x.c
    $ cc -c x.c
    x.c:51:1: error: expected identifier or ‘(’ before string constant
     "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"};
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    x.c:52:1: error: expected identifier or ‘(’ before string constant
     "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"};
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    x.c:53:1: error: expected identifier or ‘(’ before string constant
     "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"};
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Looking at the bottom of the output, we can see that the trailing brace
and semicolon are repeated:

    /* XPM */
    static const char *const qrcode_xpm[] = {
    /* width height ncolors chars_per_pixel */
    "45 45 2 1",
    /* colors */
    "F c #000000",
    "B c #ffffff",
    /* pixels */
    "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
                // snipped 35 lines //
    "BBBBBBFFFFFFFFFBBBFFFBBBFFFFFFFFFFFFFFFBBBBBB",
    "BBBBBBFFFFFFFFFBBBFFFBBBFFFFFFFFFFFFFFFBBBBBB",
    "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"};
    "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"};
    "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"};
    "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"};

[1] https://www.x.org/docs/XPM/xpm.pdf
# proposal
Fix to not search `getopt.h` or` sys / time.h` when building only static libraries. Now you can build with MSVC.

# changes
- `check_include_file(getopt.h   HAVE_GETOPT_H  )` is invoked when WITH_TOOLS option is ON.
- `check_include_file(sys/time.h HAVE_SYS_TIME_H)` is invoked when WITH_TEST option is ON.