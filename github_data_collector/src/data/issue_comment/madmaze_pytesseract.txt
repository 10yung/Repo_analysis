Please update whenever you have time.
**Problem**

Sometimes it's difficult to analyse, compare and evaluate the results of Tesseract.

- How good is the recognition?
  - Which page segmentation mode is the best?
  - Which OCR engine is the best?
- How is the confidence of each segmentation?
- Where in the image are the bounding boxes?

**Solution**

I would like to gather the results of the method `image_to_data(output_type=Output.DICT)` and generate a standalone HTML site where the results are shown in a canvas element.

**Limitations**

- Tesseract 3.05+ (because of the use of method `image_to_data`)
- Image data type: JPEG, GIF, PNG (because of the limited browser support ([source](https://en.wikipedia.org/wiki/Comparison_of_web_browsers#Image_format_support)))
- Testing is limited

---

What do you think about a visual representation? And is `pytesseract` the right place for this requirement or is it out of scope, because I'm not sure. For me `pytesseract` is low level API which is a good design. What do you think?
It would be useful to be able to gather the deskew information for a page from `--psm 2`.
Hi,
I am wondering why you don't use [stdin](https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc#inout-arguments) argument to send the image to tesseract instead of saving it on the disk?
https://github.com/madmaze/pytesseract/blob/25a9d38649f6d9f907f9c6750cab03d699d0b340/src/pytesseract.py#L208

Hi,
 
**Tesseract feature**
Tesseract allows to make a single call and have multiple output format for example:
 
```
tesseract yourimage.tif out pdf tsv
```
 
This will generate an out.pdf and an out.tsv; hence at the same time retrieve OCR results in a readable format by python and a searchable pdf.
 
Doing both formats at the same time is interesting because according to my experiences it is **twice faster**. I believe that it is due to avoiding redoing the OCR computation.
 
**Not possible with pytesseract**
But using this feature is not possible with pytesseract since you expose only specific functions (one for each task)
 
 
**Potential solutions**
 
1. Edit function `image_to_pdf_or_hocr` to make it accept extension such as `pdf tsv`
Meaning modifying 
```
 if extension not in ['pdf', 'hocr']:
     extension = 'txt'
```
2. Expose function `run_tesseract` and (with some precaution on `extension`) `run_and_get_output`
3. Create a new specific function which handle list of formats

## Look mama, no config files!

I was wrestling with config files for some of the settings when I ran across [this](https://groups.google.com/forum/#!topic/tesseract-ocr/Hr79AmtApeA) google group discussion about tesseract using **java** and it made my mouth water. Here's a code snippet from their discussion:

    tesseract = new Tesseract();                      
    tesseract.setOcrEngineMode(TessAPI.TessOcrEngineMode.OEM_TESSERACT_ONLY);
    tesseract.setPageSegMode(7);
    tesseract.setTessVariable("load_system_dawg", "0");
    tesseract.setTessVariable("load_freq_dawg", "0");
    tesseract.setTessVariable("load_punc_dawg", "0");
    tesseract.setTessVariable("load_number_dawg", "0");
    
At first you may think, well that's cool I guess but you can really do the same thing by just defining a long string of configs and calling it whenever you need it. For example, `'--psm 10 --oem 3 -c load_system_dawg=0 load_freq_dawg=0 load_punc_dawg=0 . . .'`

In the tesseract documentation, it mentions that [you can't change 'init only' parameters with tesseract executable option `-c`](https://github.com/tesseract-ocr/tesseract/wiki/ControlParams#init-only). And those 'init only' parameters would include some of the ones I've been messing with. I think that most people would say that it would be nice to be able to set your variables for your config file directly in python using a `set_config_variable` method instead of having to go make a config file. Since some of the variables that are being set in the code above are in fact 'init only', the Java guys must be creating a config file (I did not sniff through their code to verify this, however) from java code.

I haven't done it yet because I'm not too familiar with the code inside `pytesseract`, but right now making a temporary config file and letting it be loadable via a `set_config_variable` method doesn't seem very hard from my perspective. Here's the high level logic I'm thinking about:
  - When pytesseract is imported, check the config folder to see if a temp.txt file exists. If so, wipe it clean. If not, create one. 
  - When someone calls the `tsr.set_config_variable` method, just write the variable, a space, and the value on a new line in the temp.txt file. 
  - You could also have a method to delete the variable from the file and thus return tesseract to the default.
  - When any of the OCR functions are called, if the user does not manually supply another config file, use the temp.txt as the config file unless it's empty.
  
Why this would be a good feature:
  - For me and others like me who wrote their first line of code 8 months ago, even little trips to the back-end of config files or source code can be confusing and take lot's of time.
  - There's a lot of super ridiculously lazy people out there just like me who would rather not know anything about how the programs and libraries work which they're using, but just want to use them to make other interesting applications.  
  
But maybe it's actually not very easy to implement. Is this actually possible? 