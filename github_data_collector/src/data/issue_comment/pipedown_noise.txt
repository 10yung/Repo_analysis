Hi,

We built a search benchmark for tantivy. It proved to be  very helpful to get a breakdown
of our performance compared to that of Lucene. It helped me identify the need for a skip info 
for instance.
https://github.com/tantivy-search/search-benchmark-game


Would you guys want to add your engine to the bench?

(I tried to integrate noise with it. The noise API is hands off the easiest I have seen so far. I might want to copy it at one point :) . Kudos for that. However I failed indexing as little as 10K docs...)


Following discussion from https://github.com/pipedown/noise/issues/30

The wrapper around the snowball stemmer is hard-coded to english. Quite some 
flexibility could be gained by offering the ability to specify a different language 
supported natively by the snowball-project. Obviously english should be the default. 

From the top of my head: 
Something along the lines of:

`let index = noise.open("myindex", true, { "lang": "german" });`

Most use cases should operate on a single language, so multi-language support 
shouldn't be an issue. 

There's still a lot of work to do, e.g. proper error propagation.
cc @ingenieroariel

Add support for integration downstream Python applications.
I'm not sure if it's a good idea or not, or if there are perhaps better ways of solving this.

When I prepared a blog post, I came across data with this shape:

```json
{
    "fy2012": {
        "amount": 0.5,
        "netOrGross": "Gross"
    },
    "fy2013": {
        "amount": 0.2,
        "netOrGross": "Gross"
    },
    "fy2014": {
        "amount": 0.3,
        "netOrGross": "Net"
    }
}
```

I'd now like to sum up the amount of all years where `netOrGross` is `Gross`.

I don't see a way to do this is a single query currently.

What if I could use a Bind Variable:

    find {isGross::(fy2012: {netOrGross: == "Gross"} ||
                    fy2013: {netOrGross: == "Gross"} ||
                    fy2014: {netOrGross: == "Gross"})}
    return sum(isGross.amount)
When there's a default value specified on the order clause on a
Keypath that is also part of the return value with a different
default value, then the returned results were wrong. It was sorted
by the return value default, not by the order clause default.

This fixes #53.
Prior to this change, default values for aggregates were specified
as:

    max(.foo) default=5

The new syntax is putting the default value within the aggregate
function:

    max(.foo default=5)

This makes more sense as the default value is not a single value
for the `max()` function, but it is applied to every Keypath
*within* the `max()` function.

It is also more symmetrical to the default values for returns.
There it's also <Keypath> <space> <default>, e.g.:

    return .foo default=5

This is part of #51.
According to the query language reference, it's possible to have a default value for the ordering, if the field it is ordered on isn't defined.

Here's an example:

```
drop target/tests/querytestorder;
create target/tests/querytestorder;

add {"_id":"9", "bar": true};
"9"
add {"_id":"10", "bar": false};
"10"
add {"_id":"15", "foo":"coll", "bar": "string"};
"15"
add {"_id":"18"};
"18"

# This one is OK
find {}
order .bar asc
return .bar;
[
null,
false,
true,
"string"
]

# This one is also OK
find {}
order .bar default=1 asc
return .bar default=1;
[
false,
true,
1,
"string"
]

# This one fails. It returns `null` as first element.
# If it would take the `default=1` into account,
# it would have the order shown below.
find {}
order .bar default=1 asc
return .bar;
[
false,
true,
null,
"string"
]
```
I'd like to propose changing the language a bit to make it a bit more regular/consistent.

### Order clause

Currently it is is:

    order .baz asc default=1

I'd like to change it to:

    order .baz default=1 asc

Reason: In return values it's:

    return {baz: .baz default=0, hammer: .hammer default=1}

So it's <path> <default> (kind of like a tuple). Use this pattern for the order as well.


### Grouping

Currently `group()` is:

    group(.baz order=asc) default="a"

I'd like to change it to:

    group(.baz default="a" asc)

Reason: It now has the same shape as the order clause.

What do others think about making this change?
Currently it's not possible to use a field name as key in the output. Example:

    find {name: ~= "seinfeld"}
    return {.name: score()}

Expected output:

    [{"Seinfeld": 1}]

Currently you get:

    {"error": "Error: Expected '}' at character 43, found .."}
