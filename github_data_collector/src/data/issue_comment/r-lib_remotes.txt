I have an `.RProfile` in a directory that has some specific settings that I use for the project I'm work on in that directory. As `.RProfile` files which are not in your user home directory are usually only run if you start R in the directory that the `.RProfile` file is in I've put some code in there that depends on `getwd()` returning the directory that the `.RProfile` file is in.

However, this code breaks when I run `remotes::install_local` because as part of the installation process `remotes::install_local` reruns my `.RProfile`, but from a different temporary directory.

To reproduce this error you can interactive run the code below:
```R
# Create directory for testing
tmp_dir <- "remotes_install_local_test"
dir.create(tmp_dir)
setwd(tmp_dir)

# Create dummy package
install.packages("usethis")
usethis::create_package("fake.pkg", open = FALSE)
write(
  'MyFun <- function() print("hey")',
  "fake.pkg/R/my_fun.R"
)
# and check that installing it works
install.packages("remotes")
remotes::install_local("fake.pkg")
library("fake.pkg")
MyFun()
detach("package:fake.pkg", unload = TRUE)
remove.packages("fake.pkg")

# Create .RProfile that should throw an error when not run from the testing
# directory
set_test_wd_path <- paste0(
 'test_wd <- "', getwd(), '"'
)
check_wd <- deparse(quote(
  if (getwd() == test_wd) {
    cat("\n\n====> all is well\n\n")
  } else {
    stop(paste0(
      "\n\n====> where are you running this from?! ", getwd(), "\n\n"
    ))
  }
))
write(
  c(set_test_wd_path, check_wd),
  ".RProfile"
)

# Check that .RProfile works as intended
source(".RProfile")
setwd("..")
source(paste0(tmp_dir, "/.RProfile"))
setwd(tmp_dir)

# Try re-installing package from CRAN
install.packages("usethis")

# Try re-installing package and see error
remotes::install_local("fake.pkg")

# Clean up disk
setwd("..")
unlink(tmp_dir, TRUE, TRUE)
```
```
> remotes::install_version("abc", "2.0", dependencies=FALSE, repos="https://cloud.r-project.org", type="source")
Downloading package from url: https://cloud.r-project.org/src/contrib/Archive/abc/abc_2.0.tar.gz
* installing *source* package ‘abc’ ...
** package ‘abc’ successfully unpacked and MD5 sums checked
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded
* DONE (abc)
> remotes::install_version("abc", "2.1", dependencies=FALSE, repos="https://cloud.r-project.org", type="source")
Downloading package from url: https://cloud.r-project.org/src/contrib/abc_2.1.tar.gz
ERROR: dependency ‘abc.data’ is not available for package ‘abc’
* removing ‘/Library/Frameworks/R.framework/Versions/3.5/Resources/library/abc’
Error: Failed to install 'unknown package' from URL:
  (converted from warning) installation of package ‘/var/folders/zn/sgdmpcbj2dl_tvpj_dc8dqg1yq5xpk/T//RtmpvOwVM0/remotes4f952aae48ba/abc’ had non-zero exit status
```

as of writing, abc 2.1 is the latest on https://cloud.r-project.org. Strangely enough, not only it ignores dependencies=FALSE and tries to download dependencies anyway, it also cannot find the dependency (there's an abc.data on https://cloud.r-project.org)
On my local machine running Ubuntu 18.04, `install_version()` is able to install a package from various CRAN mirrors. All of the below work:

```
remotes::install_version("rstudioapi", "0.1", repos = "https://cloud.r-project.org")
remotes::install_version("rstudioapi", "0.1", repos = "https://cran.rstudio.com")
remotes::install_version("rstudioapi", "0.1", repos = "https://cran.case.edu")
```

<details>

<summary>
Session information for local machine
</summary>

```
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3
LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.6.1 tools_3.6.1    remotes_2.1.0  packrat_0.5.0
```

</details>


In contrast, in the Docker image [rocker/r-base](https://hub.docker.com/r/rocker/r-base), `install_version()` only works for some CRAN mirrors:

```
remotes::install_version("rstudioapi", "0.1", repos = "https://cloud.r-project.org")
## Error in package_find_repo(package, repos) : 
##   couldn't find package 'rstudioapi'
remotes::install_version("rstudioapi", "0.1", repos = "https://cran.rstudio.com")
## Error in package_find_repo(package, repos) : 
##   couldn't find package 'rstudioapi'
remotes::install_version("rstudioapi", "0.1", repos = "https://cran.case.edu")
## Downloading package from url: https://cran.case.edu/src/contrib/Archive/rstudioapi/rstudioapi_0.1.tar.gz
## <installation output ommitted>
```

<details>

<summary>
Session information for rocker/r-base
</summary>

```
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Debian GNU/Linux bullseye/sid

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.6.1 tools_3.6.1    remotes_2.1.0 
```

</details>
When using custom library location, normally provided to `install.packages(lib="./tmptmp")` I am not able to install a package, because it is checked against another library, and found to be installed there. Function should check in provided `lib` location instead.
```sh
Rscript -e 'remotes::install_cran("dplyr", lib="./tmptmp")'
#Skipping install of 'dplyr' from a cran remote, the SHA1 (0.8.3) has not changed since last install. Use `force = TRUE` to force installation
Rscript -e 'list.files("./tmptmp")'
#character(0)
```
Using remotes 2.1.0
As discussed on slack, we want to formalize declaring several types of development dependencies in the description file. These are packages that are _not_ needed to pass check, but used  for development. E.g:

 - pkgdown: packages used by pkgdown articles
 - document: packages such as roxygen2 needed to generate manuals

By declaring these, we can automate rendering docs without having to do custom stuff in the travis file, or making these packages a requirement for running CMD check (as Suggests does).

The proposal is to prefix the fields with `Config/Depends/` such that they do not trigger a NOTE.

```txt
Imports: foo, bar
Suggest: baz
Config/Depends/pkgdown: tidyverse, bench
Config/Depends/coverage: covr
Config/Depends/document: roxygen2
```

Fields may contain remotes syntax like `cran::dplyr@0.8.2, r-lib/roxygen@branch`.

We generalize the `dependencies` parameter from the `remotes::install_...()` functions to support these custom dependencies such as `"pkgdown"`.

One open question is the dependency relationship between the dependency types :) For example:

```r
remotes::install_github("dplyr", dependencies = "pkgdown")
```

This should probably dependencies in `Config/Depends/pkgdown` plus hard dependencies (Depends, Imports, LinkingTo), but not maybe Suggests (which are mostly required to run tests)? 


To allow pkgdown to recognize that paragraph despite its not being the first paragraph. :-)
I'm trying to install a local package in Windows 10 and I keep getting the following error:

cp: unknown option -- )
Try '/usr/bin/cp --help' for more information.
ERROR: installing binary package failed

When I use `install.packages("xxxx.zip", repos = NULL)`, the package installs just fine, but, I need the dependencies to also install, so I'm going with `remotes::install_local("xxxx.zip")`.

I think this may be an issue with the cp.exe chosen during installation: it doesn't use the Rtools cp.exe, which would be in C:/Users/xxx/Rtools, but is instead trying to use /usr/bin/cp, which doesn't exist, I think, on my computer.  

But, in console, when I run:

```
where cp
```
I get back:

C:\Users\xxx\Rtools\bin\cp.exe

So, I don't see why it would be choosing to look for it in /usr/bin/cp...

<hr />

```
sessionInfo()
```
R version 3.6.0 (2019-04-26)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17134)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252    LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C                           LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] AppliedPredictiveModeling_1.1-7

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3       CORElearn_1.53.1 lattice_0.20-38  packrat_0.5.0    MASS_7.3-51.4    grid_3.6.0       plyr_1.8.4      
 [8] magrittr_1.5     ellipse_0.4.1    stringi_1.4.3    reshape2_1.4.3   remotes_2.1.0    rpart_4.1-15     tools_3.6.0     
[15] stringr_1.4.0    compiler_3.6.0   cluster_2.0.9    nnet_7.3-12  
We tried to install a package using `remotes::install_github()` on Windows where the username contains a space like `John Doe`. The function is not able to open the repository downloaded as a tar.gz.

As can be read in the error message below (in French), the package tar.gz is correctly downloaded and saved in `C:/Users/Yves
Bas/AppData/Local/Temp/RtmpEHVgpt/file34b84fa768ea/tic_0.2.13.9021.tar.gz`, however, when trying to install from this archive, R says ` 'C:\Users\Yves' : No such file or directory`, which let's suppose the space causes problems. 

```
**** arch - i386Erreur fatale : impossible d'ouvrir le fichier
'C:\Users\Yves' : No such file or directory*** arch - x64Erreur fatale :
impossible d'ouvrir le fichier 'C:\Users\Yves' : No such file or
directoryERROR: loading failed for 'i386', 'x64'* removing 'C:/Users/Yves
Bas/Documents/R/win-library/3.5/tic'In R CMD INSTALLError in i.p(...) :
(converted from warning) installation of package ‘C:/Users/Yves
Bas/AppData/Local/Temp/RtmpEHVgpt/file34b84fa768ea/tic_0.2.13.9021.tar.gz’
had non-zero exit status*
```

Also, shouldn't `destdir` be used to download and unzip the tar.gz instead of a temp dir that is not changeable by the user?

`remotes::install_github("ropenscilabs/tic", lib = "C:/packages_github",
destdir = "C:/packages_temporary")`
When a file download fails, sometimes the only fix required is to wait a little while and try again.  

This can be annoying in a CI context:
https://ci.appveyor.com/project/talgalili/installr/builds/28815256#L201

Would it be reasonable to add a feature allowing for retries of failed downloads?  Perhaps controlled by environment variables specifying the maximum number of retries, and delay between retries?
On a Windows 10 machine, with git installed in C:\Program Files\Git\bin, running the command
`remotes::install_git(
  "repo url",
  git = "external"
)`

Creates an unescaped loop of creating "git for windows" processes. This continues until the computer runs out of Ram (24GB machine) and has to be closed. There were over 1000 processes. 

Same command works on colleagues machines. 