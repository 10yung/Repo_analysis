How do we download the android fingerprinting application. The link to download it doesn't exist.

Hi,

I’m maybe planning to install this project. I would like to know what’s the precision range with a good configuration and training (with or without app, with or without Pi cluster). Is it about 1-3-5-10 meters?

Thank you,
I'm trying to send using curl but it always returns the same error:

{"message":"Could not bind JSON","success":false}

syntax:
curl  -v -H "Content-Type:application/json" -H "Accept: application/json" -X POST  -d '{"group":"tuxap","username":"andre","location":"tracking","time":1519175332,"wifi-fingerprint":[{"mac":"9a:de:d0:f6:b7:54","rssi":-49},{"mac":"9e:de:d0:f6:b7:54","rssi":-45},{"mac":"e4:18:6b:3b:b1:64","rssi":-65}]}' http://ml2.internalpositioning.com/track

> POST /track HTTP/1.1
> Host: ml2.internalpositioning.com
> User-Agent: curl/7.58.0
> Content-Type:application/json
> Accept: application/json
> Content-Length: 294
> 
< HTTP/1.1 400 Bad Request
< Access-Control-Allow-Credentials: true
< Access-Control-Allow-Headers: Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, X-Max
< Access-Control-Allow-Methods: GET
< Access-Control-Allow-Origin: *
< Access-Control-Max-Age: 86400
< Content-Length: 49
< Content-Type: application/json
< Date: Wed, 21 Feb 2018 00:59:57 GMT
< Server: Caddy

Thank you 

The MQTT topic was being published right before grabbing the RF data, I moved the code down a bit and added RF to the topic structure.

I've never written in go before, but my simple testing seems to indicate that this works fine.
Awesome tool! I have multiple APs in the house and it works well to work out where I am.

Is there a way I can make it predict where I am heading towards?
Conceptually, it would be the one which is increasing in accuracy.


I downloaded the dockerfile and supervisor conf and built the docker image and Find randomForest doesn't work. I believe it is because rf.py has "data/" hardcoded, but find gets passed in -data /data

https://github.com/schollz/find/blob/ebe2a554ca8ddee26ba7c90fff20decbdcfdac97/rf.py#L52
After a lot of swearing and trying things I have finally managed to succesfully install go, MQTT and find (server) on the raspberry pi 3. I can also succesfully send the command to make a group (curl -X PUT "192.168.19.103:8003/mqtt?group=groupnanne". I get the response that the group has been created, I get the password for the group and if I try to make the exact same group again it tells me your password exists and it relists the password.

However, I cannot access the group from my phone, other raspberry pi (with ARM client), from my laptop or indeed even login to the group on the browser at 192.168.19.103:8003. The phone gives an error: undefined, the windows client also spews out errors and my arm client on raspi keeps sending the fingerprint to the ml.internalposition.com  , as changing the URL apparently is not possible on ARM?
I've been running find for quite a while without issues but recently it has started crashing like this:

(version  build devdevde) is up and running on http://192.168.128.128:8003
-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----
DEBUG: 2018/01/31 18:15:12 mqtt.go:183: Got valid MQTT request for group stillskink, user motox
panic: page 42046 already freed

goroutine 22 [running]:
panic(0x8f8e80, 0xc8202ca040)
	/usr/lib/go-1.6/src/runtime/panic.go:481 +0x3e6
github.com/boltdb/bolt.(*freelist).free(0xc82046a210, 0x49a8b, 0x7f7e3a43e000)
	/share/lib/go/src/github.com/boltdb/bolt/freelist.go:121 +0x37b
github.com/boltdb/bolt.(*node).spill(0xc82013a2a0, 0x0, 0x0)
	/share/lib/go/src/github.com/boltdb/bolt/node.go:363 +0x2ca
github.com/boltdb/bolt.(*node).spill(0xc82013a150, 0x0, 0x0)
	/share/lib/go/src/github.com/boltdb/bolt/node.go:350 +0x12c
github.com/boltdb/bolt.(*node).spill(0xc82013a0e0, 0x0, 0x0)
	/share/lib/go/src/github.com/boltdb/bolt/node.go:350 +0x12c
github.com/boltdb/bolt.(*node).spill(0xc82013a070, 0x0, 0x0)
	/share/lib/go/src/github.com/boltdb/bolt/node.go:350 +0x12c
github.com/boltdb/bolt.(*node).spill(0xc82013a000, 0x0, 0x0)
	/share/lib/go/src/github.com/boltdb/bolt/node.go:350 +0x12c
github.com/boltdb/bolt.(*Bucket).spill(0xc820456c80, 0x0, 0x0)
	/share/lib/go/src/github.com/boltdb/bolt/bucket.go:570 +0x1cf
github.com/boltdb/bolt.(*Bucket).spill(0xc820254398, 0x0, 0x0)
	/share/lib/go/src/github.com/boltdb/bolt/bucket.go:537 +0xbc2
github.com/boltdb/bolt.(*Tx).Commit(0xc820254380, 0x0, 0x0)
	/share/lib/go/src/github.com/boltdb/bolt/tx.go:163 +0x1d4
github.com/boltdb/bolt.(*DB).Update(0xc8202d03c0, 0xc82010efc0, 0x0, 0x0)
	/share/lib/go/src/github.com/boltdb/bolt/db.go:605 +0x11d
main.putFingerprintIntoDatabase(0xc820201780, 0xa, 0xc820201791, 0x5, 0x0, 0x0, 0x150ed3b846d72503, 0xc8202cc600, 0x2, 0x2, ...)
	/share/src/find/fingerprint.go:130 +0x2b4
main.trackFingerprint(0xc820201780, 0xa, 0xc820201791, 0x5, 0xc8202ca7a0, 0x6, 0x0, 0xc8202cc600, 0x2, 0x2, ...)
	/share/src/find/fingerprint.go:227 +0xbd0
main.messageReceived(0xc8201f2000, 0x7f7e517bf5a0, 0xc8201c77c0)
	/share/src/find/mqtt.go:185 +0x2d7
github.com/schollz/org%2eeclipse%2epaho%2emqtt%2egolang.(*router).matchAndDispatch.func1(0xc82021a300, 0xc82013fd00, 0x8e4601, 0xc8201f2000)
	/share/lib/go/src/github.com/schollz/org.eclipse.paho.mqtt.golang/router.go:140 +0x2ac
created by github.com/schollz/org%2eeclipse%2epaho%2emqtt%2egolang.(*router).matchAndDispatch
	/share/lib/go/src/github.com/schollz/org.eclipse.paho.mqtt.golang/router.go:162 +0x52

The `learnFingerprint` method in `fingerprint.go` file is just adding the fingerprint to database. You can find the line [here](https://github.com/schollz/find/blob/master/fingerprint.go#L185). Where is the learning actually happening?

Also, is it online learning? Most of the implementations I have seen uses a dataset in which each row contains all the Access Points (APs) which will be encountered, with some standard RSSI value for missing APs. How is this repository doing the learning in realtime? 
Hi, 
there a way to implements new machine learning algorithms(bagging, k-near neighbor, adaboost) from *.py file or I need to do it directly in go files