原生安卓提供的api中，overridePendingTransition方法传（0，0）时是无动画，直接显示下一个Activity，但是发现用Arouter发现传0却是默认效果，于是看了下ARouter中的原码，如下：
```
   if ((0 != postcard.getEnterAnim() || 0 != postcard.getExitAnim()) && currentContext instanceof Activity) {    // Old version.
                            ((Activity) currentContext).overridePendingTransition(postcard.getEnterAnim(), postcard.getExitAnim());
                        }
```
Postcard中的exitAnim、enterAnim默认是0，当是0时直接在上面代码中过滤了，于是乎变成了默认动画。这个在使用上和原生sdk还是有点出入的，不看下源码就不知道ARouter不支持传（0，0）,还需要再写个空的动画文件。建议与原生api统一。
## Look at here

- → Did you read the doc carefully
- → Did you add annotation above target activity
- → Did you add annotation processor dependence
- → **Receive only bugs and suggestions**

## 提 issue 前请看

- → 你是否已经熟读 [README](https://github.com/alibaba/ARouter/blob/master/README.md) ？
- → 你是否在每一个包含页面 or 服务的模块中依赖了 compiler sdk
- → **这里不是答疑的地方，仅接受 bug 和建议，答疑请去答疑群**
我的业务是这样的 在A页面点击继续跳转A页面，当前页面是带参数的，并且启动模式是默认的，神奇的一幕出现了，无法跳转，我debug到源码发现一路下去已经执行到了最后的跳转逻辑，没有头绪，于是我听从同事建议加了NavigationCallback,发现又可以跳转了。。去掉callback又无法跳转。。很神奇，我看了下源码 并未发现callback有额外的处理。请教一下是什么原因~~
使用ARouter.getInstance().build("/***/***").navigation()时概率出现部分无法跳转情况，
测试过程中发现如果navigation不传递context参数的时候经常会出现各种奇怪的点击无响应状况，调试后发现是ARouter跳转导致的，我把项目中用到的地方都添加了context参数，不知道其他的人有没有遇到过这个现象
w: [kapt] Incremental annotation processing requested, but support is disabled because the following processors are not incremental: com.alibaba.android.arouter.compiler.processor.AutowiredProcessor (NON_INCREMENTAL), com.alibaba.android.arouter.compiler.processor.InterceptorProcessor (NON_INCREMENTAL), com.alibaba.android.arouter.compiler.processor.RouteProcessor (NON_INCREMENTAL), com.airbnb.epoxy.EpoxyProcessor (NON_INCREMENTAL), com.smile.gifshow.annotation.invoker.processing.InvokerProcessor (NON_INCREMENTAL), com.google.auto.service.processor.AutoServiceProcessor (NON_INCREMENTAL).

## Look at here

- → Did you read the doc carefully
- → Did you add annotation above target activity
- → Did you add annotation processor dependence
- → **Receive only bugs and suggestions**

## 提 issue 前请看

- → 你是否已经熟读 [README](https://github.com/alibaba/ARouter/blob/master/README.md) ？
- → 你是否在每一个包含页面 or 服务的模块中依赖了 compiler sdk
- → **这里不是答疑的地方，仅接受 bug 和建议，答疑请去答疑群**
## Look at here

- → Did you read the doc carefully
- → Did you add annotation above target activity
- → Did you add annotation processor dependence
- → **Receive only bugs and suggestions**

## 提 issue 前请看

- → 你是否已经熟读 [README](https://github.com/alibaba/ARouter/blob/master/README.md) ？
- → 你是否在每一个包含页面 or 服务的模块中依赖了 compiler sdk
- → **这里不是答疑的地方，仅接受 bug 和建议，答疑请去答疑群**

ARouter在整合各个module编译期间生成的RouterMap的时候，是在ARouter.init()的时候去dex文件中查找具体的class，虽然这块有通过sp存储来做优化，但对于第一次使用，还是会存在通过dex中查找RouterrMap class的过程。
所以：是否可以通过Transfrom，在编译期间就查找到所有的RouterMap，然后注入到Arouter.init()方法中，免去自爱运行时从dex查找class的过程呢？
这是我实现的一个小demo：https://github.com/dndxxiangyu/accumulate/blob/master/Android%E5%9F%BA%E4%BA%8EGradle%E6%8F%92%E4%BB%B6%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96map%E6%95%B4%E5%90%88.md
好处：可以避免查找dex
*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
Tombstone maker: 'xCrash 2.4.8'
Crash type: 'native'
Start time: '2019-12-25T08:46:59.283+0800'
Crash time: '2019-12-25T08:47:01.343+0800'
App ID: 'com.orange.note'
App version: '5.54'
Rooted: 'No'
API level: '29'
OS version: '10'
Kernel version: 'Linux version 4.14.116 #1 SMP PREEMPT Thu Nov 28 20:52:01 CST 2019 (armv8l)'
ABI list: 'arm64-v8a,armeabi-v7a,armeabi'
Manufacturer: 'HUAWEI'
Brand: 'HUAWEI'
Model: 'EML-AL00'
Build fingerprint: 'HUAWEI/EML-AL00/HWEML:10/HUAWEIEML-AL00/10.0.0.143C00:user/release-keys'
ABI: 'arm'
pid: 26406, tid: 26412, name: Jit thread pool  >>> com.orange.note <<<
signal 6 (SIGABRT), code 0 (SI_USER), fault addr --------
Abort message: 'Inlined method resolution crossed dex file boundary: from void com.alibaba.android.arouter.routes.ARouter$$Group$$mine.loadInto(java.util.Map) in /data/app/com.orange.note-kBpyhNTWLE5kaJQM7fyXSg==/base.apk/0xe1946690 to void com.alibaba.android.arouter.rou'
    r0  f553e868  r1  00000080  r2  0000000e  r3  00000000
    r4  00000000  r5  00000000  r6  00000002  r7  000000f0
    r8  00000043  r9  e18054f0  r10 f1eee17c  r11 00000001
    ip  e18054a0  sp  e1805490  lr  f0837695  pc  f1e91ef0

backtrace:
    #00 pc 0004eef0  /apex/com.android.runtime/lib/bionic/libc.so (syscall+28)
    #01 pc 000ee691  /apex/com.android.runtime/lib/libart.so (_ZN3art17ConditionVariable16WaitHoldingLocksEPNS_6ThreadE+88)
    #02 pc 00125b7b  /apex/com.android.runtime/lib/libart-compiler.so (_ZNK3art10HLoadClass21InstructionDataEqualsEPKNS_12HInstructionE+594)
    #03 pc 0009391b  /apex/com.android.runtime/lib/libart-compiler.so (_ZN3art19GlobalValueNumberer15VisitBasicBlockEPNS_11HBasicBlockE+1030)
    #04 pc 000934af  /apex/com.android.runtime/lib/libart-compiler.so (_ZN3art15GVNOptimization3RunEv+270)
    #05 pc 000ab195  /apex/com.android.runtime/lib/libart-compiler.so (_ZNK3art18OptimizingCompiler16RunOptimizationsEPNS_6HGraphEPNS_13CodeGeneratorERKNS_18DexCompilationUnitEPNS_12PassObserverEPNS_24VariableSizedHandleScopeEPKNS_15OptimizationDefEj+128)
    #06 pc 000aadc7  /apex/com.android.runtime/lib/libart-compiler.so (_ZNK3art18OptimizingCompiler16RunOptimizationsEPNS_6HGraphEPNS_13CodeGeneratorERKNS_18DexCompilationUnitEPNS_12PassObserverEPNS_24VariableSizedHandleScopeE+666)
    #07 pc 000aa3fb  /apex/com.android.runtime/lib/libart-compiler.so (_ZNK3art18OptimizingCompiler10TryCompileEPNS_14ArenaAllocatorEPNS_10ArenaStackEPNS_19CodeVectorAllocatorERKNS_18DexCompilationUnitEPNS_9ArtMethodEbbPNS_24VariableSizedHandleScopeE+3886)
    #08 pc 001dd0f9  /apex/com.android.runtime/lib/libart-compiler.so (_ZN3art18OptimizingCompiler10JitCompileEPNS_6ThreadEPNS_3jit12JitCodeCacheEPNS_9ArtMethodEbbPNS3_9JitLoggerE+1272)
    #09 pc 001b292d  /apex/com.android.runtime/lib/libart-compiler.so (_ZN3art3jit11JitCompiler13CompileMethodEPNS_6ThreadEPNS_9ArtMethodEbb+140)
    #10 pc 001b2897  /apex/com.android.runtime/lib/libart-compiler.so (jit_compile_method+14)
    #11 pc 00262877  /apex/com.android.runtime/lib/libart.so (_ZN3art3jit3Jit13CompileMethodEPNS_9ArtMethodEPNS_6ThreadEbb+438)
    #12 pc 00264eff  /apex/com.android.runtime/lib/libart.so (_ZN3art3jit14JitCompileTask3RunEPNS_6ThreadE+438)
    #13 pc 003d6387  /apex/com.android.runtime/lib/libart.so (_ZN3art16ThreadPoolWorker3RunEv+54)
    #14 pc 003d5fff  /apex/com.android.runtime/lib/libart.so (_ZN3art16ThreadPoolWorker8CallbackEPv+90)
    #15 pc 0009c1a7  /apex/com.android.runtime/lib/bionic/libc.so (_ZL15__pthread_startPv+20)
    #16 pc 00055657  /apex/com.android.runtime/lib/bionic/libc.so (__start_thread+30)

build id:
    /apex/com.android.runtime/lib/bionic/libc.so (BuildId: f2470da1a22265f8104ce6bb9bcaf63e. FileSize: 921952. LastModified: 1970-01-01T08:00:00.000+0800. MD5: b469c0d7633deabfb0a537c1503ecaf6)
    /apex/com.android.runtime/lib/libart.so (BuildId: 2414152b7788a9b8520d543b931388a5. FileSize: 6210072. LastModified: 1970-01-01T08:00:00.000+0800. MD5: b981131029d54e53f8a5c82f54ff0659)
    /apex/com.android.runtime/lib/libart-compiler.so (BuildId: 96879bd11c4b065c7bc8730da3ed8d3f. FileSize: 2478244. LastModified: 1970-01-01T08:00:00.000+0800. MD5: 5632ca5dff20dc5bf90203887642ba38)

应用没有接入热修复、插件化，有使用腾讯乐固加固了，用户反馈多次卸载重装都不行。