This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [rollup-plugin-copy](https://togithub.com/vladshcherbin/rollup-plugin-copy) | devDependencies | patch | [`3.2.0` -> `3.2.1`](https://renovatebot.com/diffs/npm/rollup-plugin-copy/3.2.0/3.2.1) |

---

### Release Notes

<details>
<summary>vladshcherbin/rollup-plugin-copy</summary>

### [`v3.2.1`](https://togithub.com/vladshcherbin/rollup-plugin-copy/releases/3.2.1)

[Compare Source](https://togithub.com/vladshcherbin/rollup-plugin-copy/compare/3.2.0...3.2.1)

-   Update typescript types

</details>

---

### Renovate configuration

:date: **Schedule**: At any time (no schedule defined).

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#ampproject/worker-dom).
Enables enforcement user gesture constraints in use cases like `amp-script`.

Context: https://github.com/ampproject/amphtml/issues/26375
Following up on https://github.com/ampproject/worker-dom/issues/111, I had legitimate use cases for the following unsupported selectors in a [recent PR](https://github.com/ampproject/amphtml/pull/26371):
* `.class1.class2` and `selector1, selector2` [workaround](https://github.com/danielrozenberg/amphtml/blob/bf947479bc680415f2a76f1c932a88b584735191/contributing/release-schedule-visual.amp.html#L420-L421)
* `.class[data=value]` (and `.class[data1=value1][data2=value2]` [workaround](https://github.com/danielrozenberg/amphtml/blob/bf947479bc680415f2a76f1c932a88b584735191/contributing/release-schedule-visual.amp.html#L431-L435)

(I also initially tried to use `.class element` but changes to code removed the need for it)

None of these are un-workaround-able of course :)
This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [jsdom](https://togithub.com/jsdom/jsdom) | devDependencies | major | [`15.2.1` -> `16.0.0`](https://renovatebot.com/diffs/npm/jsdom/15.2.1/16.0.0) |

---

### Release Notes

<details>
<summary>jsdom/jsdom</summary>

### [`v16.0.0`](https://togithub.com/jsdom/jsdom/blob/master/Changelog.md#&#8203;1600)

[Compare Source](https://togithub.com/jsdom/jsdom/compare/15.2.1...16.0.0)

For this release we'd like to welcome [@&#8203;pmdartus](https://togithub.com/jsdom/jsdom/commits?author=pmdartus) to the core team. Among other work, he's driven the heroic effort of constructor prototype and reform in jsdom and its dependencies over the last few months, to allow us to move away from shared constructors and prototypes, and set the groundwork for custom elements support ([coming soon](https://togithub.com/jsdom/jsdom/pull/2548)!).

Breaking changes:

-   Node v10 is now the minimum supported version.
-   The `dom.runVMScript()` API has been replaced with the more general `dom.getInternalVMContext()` API.
-   Each jsdom `Window` now creates new instances of all the web platform globals. That is, our old [shared constructor and prototypes](https://togithub.com/jsdom/jsdom/blob/35894a6703ed1f4de98942780bd99244ac27f600/README.md#shared-constructors-and-prototypes) caveat is no longer in play.
-   Each jsdom `Window` now exposes all JavaScript-spec-defined globals uniformly. When `runScripts` is disabled, it exposes them as aliases of the ones from the outer Node.js environment. Whereas when `runScripts` is enabled, it exposes fresh copies of each global from the new scripting environment. (Previously, a few typed array classes would always be aliased, and with `runScripts` disabled, the other classes would not be exposed at all.)

Other changes:

-   Added the `AbstractRange`, `Range`, `StaticRange`, `Selection`, and `window.getSelection()` APIs.
-   Added working constructors for `Comment`, `Text`, and `DocumentFragment`.
-   Added `valueAsDate`, `valueAsNumber`, `stepUp()` and `stepDown()` to `<input>` elements. (kraynel)
-   Added `window.origin`.
-   Removed `document.origin`.
-   Fixed `<template>` to work correctly inside XML documents.
-   Fixed some bugs which would cause jsdom to choose the wrong character encoding because it was failing to detect `<meta charset>` or `<meta http-equiv="charset">` elements.
-   Fixed `input.type` to default to `"text"`. (connormeredith)
-   Fixed incorrect validation errors for `<input>` with fractional values for their `step=""` attribute. (kontomondo)
-   Fixed incorrect validation errors on readonly `<input>` elements.
-   Fixed `<input type="email" multiple pattern="...">` validation.
-   Fixed `fileReader.readAsDataURL()` to always base64-encode the result. (ytetsuro)
-   Fixed inserting `<img>` elements into documents without a browsing context to no longer crash when the `canvas` package is installed.
-   Fixed a memory leak when using `window.setTimeout()` or `window.setInterval()`.
-   Improved the performance of `getComputedStyle()`. (eps1lon)

</details>

---

### Renovate configuration

:date: **Schedule**: At any time (no schedule defined).

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#ampproject/worker-dom).
How to do element full screen like on chrome `elem.webkitRequestFullscreen()` ?
[demo](https://lily-toque.glitch.me/)

[Setting `.checked` to true or false should update the element](https://html.spec.whatwg.org/dev/input.html#checkbox-state-(type=checkbox)) - this is not happening in worker-dom

edit: turns out, it isn't reflected in either direction - inspecting the `:checked` val won't tell you if the DOM element is checked or not. 
`classList.toggle()` should throw an error when you include a space token you pass to it. 

i.e.
```js
el.classList.toggle('one two') //throws
```

worker-dom accepts the value, it also treats it as one token, so given 

```html
<div class="one"/>
```

if you try

```js
document.quertySelector('div').classList.toggle('one two')
```

you get

```html
<div class="one one two"/>
```
Hi
I am trying to listen to events from my iframe, but it just doesn't work. Even though `addEventListener` is supported, when I try to listen for `message` events, I don't get the event from my iframe. I am not sure if it's because it is running inside a worker and it has its own virtual DOM, but I don't receive the `message` sent by my iframe.

```
        window.addEventListener('message', function(e) {
          console.log("catching event: "+e.origin); //logs "catching event:  undefined"
        }, false);
```

The whole code from what I am trying to achieve is this:

```
      <amp-script script="navi_impressions" height="24.4rem" width="">
      <amp-ad
        height="24.4rem"
        data-multi-size="fluid"
        type="doubleclick"
        data-slot="my-ad-unit">
      </amp-ad>
      </amp-script>
      <script type="text/plain" target="amp-script" id="navi_impressions">
        window.addEventListener('message', function(e) {
          console.log("catching event: "+e.origin);
        }, false);
      </script>
```
I have an amp-ad that generates the iframe of my ad from google ad manager. From the creative, I sent a postMessage event; however, the same code works if I run in the parent document.
1. Go to https://attack.shhnjk.com/ampToken.html
2. Wait for 2 seconds
3. Right-click the link and click on open in new tab

Tested in Chrome ðŸ˜Š

According to https://github.com/ampproject/worker-dom/blob/master/web_compat_table.md

Element.scrollTop is not yet supported.

Would be great to add support for that, this way we could do things like:

```
window.addEventListener('scroll', e => {
	const parts = document.querySelector('#globalFooter');
	if (window.innerHeight < document.documentElement.scrollTop) {
		parts.style.display ="block";
	} else {
		parts.style.display ="none";
	}
});
```
