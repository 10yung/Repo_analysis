Is it possible to change this methods to borrow and return a mut reference to self. To borrow self instead of moving it? Would this change things a lot?
```rust
pub fn child(mut self, child: Node<'a>) -> Self {
        self.children.push(child);
        self
    }
```
Is there keyed implementation? I can not find it from source code.
Bumps [bumpalo](https://github.com/fitzgen/bumpalo) from 2.6.0 to 3.1.2.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href="https://github.com/fitzgen/bumpalo/blob/master/CHANGELOG.md">bumpalo's changelog</a>.</em></p>
<blockquote>
<h2>3.1.2</h2>
<p>Released 2020-01-07.</p>
<h3>Fixed</h3>
<ul>
<li>The <code>bumpalo::collections::format!</code> macro did not used to accept a trailing
comma like <code>format!(in bump; &quot;{}&quot;, 1,)</code>, but it does now.</li>
</ul>
<hr />
<h2>3.1.1</h2>
<p>Released 2020-01-03.</p>
<h3>Fixed</h3>
<ul>
<li>The <code>bumpalo::collections::vec!</code> macro did not used to accept a trailing
comma like <code>vec![in bump; 1, 2,]</code>, but it does now.</li>
</ul>
<hr />
<h2>3.1.0</h2>
<p>Released 2019-12-27.</p>
<h3>Added</h3>
<ul>
<li>Added the <code>Bump::allocated_bytes</code> diagnostic method for counting the total
number of bytes a <code>Bump</code> has allocated.</li>
</ul>
<hr />
<h1>3.0.0</h1>
<p>Released 2019-12-20.</p>
<h2>Added</h2>
<ul>
<li>
<p>Added <code>Bump::alloc_str</code> for copying string slices into a <code>Bump</code>.</p>
</li>
<li>
<p>Added <code>Bump::alloc_slice_copy</code> and <code>Bump::alloc_slice_clone</code> for copying or
cloning slices into a <code>Bump</code>.</p>
</li>
<li>
<p>Added <code>Bump::alloc_slice_fill_iter</code> for allocating a slice in the <code>Bump</code> from
an iterator.</p>
</li>
<li>
<p>Added <code>Bump::alloc_slice_fill_copy</code> and <code>Bump::alloc_slice_fill_clone</code> for
creating slices of length <code>n</code> that are filled with copies or clones of an
inital element.</p>
</li>
</ul>
</tr></table> ... (truncated)
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/fitzgen/bumpalo/commit/980e9224b9a3ba85d70d3d207616eacc096845f9"><code>980e922</code></a> Update quickcheck dependency to 0.9.0</li>
<li><a href="https://github.com/fitzgen/bumpalo/commit/77693503f022f901dd297bba36719a5193522211"><code>7769350</code></a> Bump to version 3.1.2</li>
<li><a href="https://github.com/fitzgen/bumpalo/commit/13107103532590cc2cbf5c34017258e24a5e1be0"><code>1310710</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/fitzgen/bumpalo/issues/62">#62</a> from derekdreery/format_trailing_comma</li>
<li><a href="https://github.com/fitzgen/bumpalo/commit/1e6a51139fc8d8e47937607a4265f24051630724"><code>1e6a511</code></a> Allow trailing comma in <code>format</code> macro + fix tests.</li>
<li><a href="https://github.com/fitzgen/bumpalo/commit/782435218344f6a8296c3d4b90873a722b4fe2f9"><code>7824352</code></a> Bump to version 3.1.1</li>
<li><a href="https://github.com/fitzgen/bumpalo/commit/24d2fdd941e2ed8c0f1c20be3a4947dc084a9cda"><code>24d2fdd</code></a> Add test for <code>vec!</code> with trailing commas</li>
<li><a href="https://github.com/fitzgen/bumpalo/commit/cd20a764eb7e7cbff69585954ab3232218c235ce"><code>cd20a76</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/fitzgen/bumpalo/issues/60">#60</a> from derekdreery/vec_macro</li>
<li><a href="https://github.com/fitzgen/bumpalo/commit/402b749b548dc358d5a7a57a533383ab4835908a"><code>402b749</code></a> Fix <code>vec!</code> macro requiring extra comma.</li>
<li><a href="https://github.com/fitzgen/bumpalo/commit/02fa8e05b22fb082261d04f3b99f347f90c01b32"><code>02fa8e0</code></a> Bump to version 3.1.0</li>
<li><a href="https://github.com/fitzgen/bumpalo/commit/c2281d333beb22fdb7807c99677405de7d4566e3"><code>c2281d3</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/fitzgen/bumpalo/issues/58">#58</a> from novacrazy/master</li>
<li>Additional commits viewable in <a href="https://github.com/fitzgen/bumpalo/compare/2.6.0...3.1.2">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=bumpalo&package-manager=cargo&previous-version=2.6.0&new-version=3.1.2)](https://dependabot.com/compatibility-score.html?dependency-name=bumpalo&package-manager=cargo&previous-version=2.6.0&new-version=3.1.2)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
If all status checks pass Dependabot will automatically merge this pull request.

[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
When I'm using this library, sometimes I have problems flattening all my data into a `bumpalo::*::Vec` to use as the children for a node. `react` solves this problem with [*fragments*](https://reactjs.org/docs/fragments.html), a special node type that, rather than rendering an element in the dom, transparently inserts its children into the parent element at the right point.

It might make the library faster as well, since there will be less accidental re-allocations from use of `bumpalo::*::Vec::push`.
When you want to respond to a user event, you use the following builder method

```rust
pub fn on<F>(self, event: &'a str, callback: F) -> Self where
    F: 'static + Fn(&mut dyn RootRender, VdomWeak, Event), 
```

The problem comes if you want to then pass the `&mut dyn RootRender` to a future, for example if you want to update state based on some asynchronous event like an api call. Because futures must be 'static, there's no way to do it.

A potential solution would be for that field to give you something like `Rc<Box<dyn RootRender>>`, thereby giving you ownership, so you can use it at any point in the future.

What do you think about this?

**EDIT** I guess it would need to be `Rc<RefCell<dyn RootRender>>` so you could mutate the state.
If you run the todomvc example, when you change the filter from say "all" to "complete", the "complete" animation will run based on position. It should only run when an action is marked complete.
[#82](https://github.com/fitzgen/dodrio/issues/82)
Would it be possible to serialize a tree as an html string or some mechanism to create a dodrio dom in server side and serve it via http?
I really like Dodrios design but one thing is holding me back a bit.
There should be a way to get DOM refs.
In some situations you NEED to have the actual DOM nodes that have been derived from the virtual one.
One quite easy example is the HTMLCanvasElement.

From what I've seen this could probably be done quite elegantly within the change-list interpreter.
One could just tag specific vdom nodes and let the interpreter maintain the dom refs globally.
That would result in something similar to the [ref](https://reactjs.org/docs/refs-and-the-dom.html) of React.

I'm just leaving this here now to start the discussion.
Right now, I'm compensating the lack of DOM refs with a hacky pseudo CSS animation.
I could add that if my pet project stays alive and if this is in your interest. 
Looks like the current list of builders is hand-curated. It's great that I can create a <g> tag manually via `ElementBuilder`, but it's more verbose.

I'm imagine automatically generating the all of builders in the svg namespace by pulling from sort of metadata depot, similar to how web_sys uses WebIDL. Ideally, typed-html could use the same - I found their `dodrio!()` macro similarly limiting as it whitelists the elements.