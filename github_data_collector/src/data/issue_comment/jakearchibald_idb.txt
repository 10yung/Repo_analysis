For object stores with auto incrementing primary keys, we know the primary key will be available on all objects read from the database, but not necessarily on all objects written to the database. Currently idb does not supply TypeScript with that information, though. Seems to me that it could be improved to do so, if DBSchemaValue also included the `keyPath` and `autoIncrement` values passed to `createObjectStore`.

Example:

```
type Foo = {
    id?: number;
    bar: string;
}

export interface FooDB extends DBSchema {
	foos: {
		key: number;
		value: Foo;
	};
}

const db = await openDB<FooDB>("foo", 1, {
    upgrade(db, oldVersion) {
        if (oldVersion === 0) {
            upgradeDB.createObjectStore("leagues", {
                keyPath: "id",
                autoIncrement: true,
            });
        }
    },
});

// This works, only because we defined Foo with an optional id property
const foo: Foo = {
    bar: "baz",
};
await db.add("foo", foo);

// foo2 is guaranteed to have a numeric id property, but TypeScript doens't know this because it has type Foo
const foo2 = await db.get("foo", 1);

// Ideally, foo2's type would instead be:
type Foo2 = Foo & { id: number }

// ...but that would require encoding in FooDB that id is an autoincrementing primary key.
```

I guess a caveat would be that if `keyPath` is nested like `a.b.c` I'm not sure if TypeScript will be able to handle that. But based on pure conjecture and absolutely no data, I'm going to say that it's very rare to use a key path that is both nested and auto incrementing, but it's pretty common to use a non-nested key path that is autoincrementing.
Consider the following code:

```ts
declare let x: IDBPTransaction<MyDB, ['table1' | 'table2']>
declare let y: IDBPTransaction<MyDB, ['table1']>
x = y // Incompatiable type. That's right.
y = x // Incompatible type too, that's not right.
```

A transaction with access to `table1` and `table2` can be a subtype of a transaction with only access to `table1` (y = x). 
But it seems to be invariant on the IDBPTransaction.

And the mutatable of the transaction `readonly` / `readwrite` is not reflected in the type IDBPTransaction, so it is possible to pass a `readonly` transaction to a function that requires a `readwrite` transaction then cause a runtime error.
My app works as a PWA but is not “installed” as one (no manifest). However I don't think it's relevant to this particular problem.
This is how it goes : the user access the page, the indexedDB is created. User uses the app.
Then the user decides to no longer authorize ccokies. (Go to settings and disable cookie)
Now the app is no longer working, so said user goes back to allow cookies again.

This is when the problem arise: openDB is stuck in ‘blocked‘ state forever.
You can close all the windows you want. Close Safari. Nothing will do unless the user goes to setting and ask for ‘delete the site data’. Which means the DB is deleted.

Tested with Safari iOS 13.
Is there a way to get unstuck without resorting to drastic erase of the DB ?
Thanks for any insight

BTW, thanks for this awesome library :)

When adding a duplicate key the tx.error was null but `tx.srcElement.error` wasn't

This PR reads it from there if it fails there instead

A long-term solution would be to check for srcElement/target .onerror as well as tx.onerror
I'm considering adopting IDB (or another promise-based IndexedDB wrapper) for my project, but am concerned about the danger of encouraging/allowing `await`ing of arbitrary promises that break transactions.

To mitigate the risk, an IndexedDB wrapper library could return a special branded `Promise` type (say, `TransactionalOperationPromise`), and also provide an eslint-typescript rule that forbids code within an IndexedDB transaction context from `await`ing any type other than `TransactionalOperationPromise`. An "IndexedDB transaction context" could be defined as a lexical scope that references a value that is only valid for the duration of a transaction, for instance an ObjectStore. Or it could be any lexical scope that calls a function that returns a TransactionalOperationPromise -- I haven't though through the specifics of this part.

 To allow for async function declarations, the wrapper would export an "enhancer" no-op function `transactional<I extends any[], O>(unwrapped: fn(args: ...I): Promise<O>): fn(args: ...I): IDBTransactionalOperationPromise<O>` recognized by the linter rule as putting the `unwrapped` function argument in "transaction" context. The linter rule would only allow a function literal to be passed to `transactional(...)`.

I don't think it's possible to enforce soundness with this tactic, but perhaps eslint-typescript rule that makes some soundness tradeoffs could be both reasonable to implement, and catch a fair amount of bugs. See the [await-thenable rule](https://github.com/typescript-eslint/typescript-eslint/blob/39e41b56ca26047cc1a1fdf7330e0bee928dc720/packages/eslint-plugin/src/rules/await-thenable.ts#L31) for an example of an eslint-typescript rule that leverages type information.

Does this sound like a promising (no pun intended) track of work to you all? Would you accept a PR implementing this concept in IDB?
Just as `.iterate()` is a convenience for `.openCursor()`
(avoids the need for an `if (cursor) ...` check for when the cursor returns no results),

...should there also be an equivalent `.iterateKeys()` as a similar convenience for `.openKeyCursor()`?

Currently to async-iterate over the _keys_ of a store or index, it seems like the only option is:

```javascript
let cursor = await store.openKeyCursor();
if (cursor) for await (const cursor of cursor) {
  // use cursor.key here...
}
```

For symmetry, it would seem like this may also be useful:

```javascript
for await (const cursor of store.iterateKeys()) {
  // use cursor.key here...
}
```
Trying to use this package with Angular universal but facing this issue.

`ReferenceError: IDBIndex is not defined`

Probably this is not working on server, Can someone provide a possible workaround for this? Do I need to 

`import { openDb, deleteDb } from 'idb';`

conditionally? or something else. 
This is something that any IndexedDB user will have to sooner or later consider: 

https://hacks.mozilla.org/2014/06/breaking-the-borders-of-indexeddb/
Hi,
i'm trying to use idb in a javascript project without modules, so i'm using the build/idb.js artifact.
Inside my .ts file i'm trying to use the library but the typescript project system does not find the types.

I've tryied imorting the definition by this statement in my .ts file
/// <reference path="../../../node_modules/idb/lib/idb.d.ts" />
and by adding the name of the library in the compilerOptions section of the tsconfig.json file.
"types": [
      "idb"
    ],

I'm only able to use the type definitions by using the import syntaxt import { openDb } from "../../../node_modules/idb/lib/idb"; but it can't be used with the compile option "module":"none";

Thanks
When using idb.js in a worker context on Safari, you get 

```TransactionInactiveError: Failed to execute 'get' on 'IDBObjectStore': The transaction is inactive or finished. ```

However, when running the same code in the main context, or on chrome or firefox in the main or in a worker context, it works as expected.

```js
const DB_NAME = "db-123";
const STORE_NAME = "store-name";

const dbPromise = idb.open(DB_NAME, 1, upgradeDB => {
  upgradeDB.createObjectStore(STORE_NAME);
});

const init = async () => {
  const db = await dbPromise;

  const txWrite = db.transaction(STORE_NAME, "readwrite");
  await txWrite.objectStore(STORE_NAME).put("hello", "foo");

  const txRead = db.transaction(STORE_NAME);

  console.log(type, "got transaction");

  const a = await txRead.objectStore(STORE_NAME).get("foo");

  console.log(type, "got a", a);

  const b = await txRead.objectStore(STORE_NAME).get("foo");

  console.log(type, "got b", b);
};

init().catch(e => console.error(e));
```

In Safari, this code will output 

```
[Log] MAIN – "got transaction"
[Log] MAIN – "got a" – "hello"
[Log] MAIN – "got b" – "hello"

[Log] WORKER – "got transaction" 
[Log] WORKER – "got a" – "hello"
TransactionInactiveError: Failed to execute 'get' on 'IDBObjectStore': The transaction is inactive or finished.
```

Whereas in Chrome or Firefox you don't get the `TransactionInactiveError`.

There is a sandbox here https://codesandbox.io/s/rj4wnn5lzn