Version 0.9.4.

I use Karate all the time and love it. One thing I think would make it better is the error output. Here is some output I get commonly when there is a key mismatch:

```
[ERROR]   UserTest.testUserInvites user-invite.feature:69 - path: $, actual: {hits=1, page=1, pageSize=10, lastDoc=4, data=[{"id":"471c74d2-8ecd-4323-ab2b-84e9a5ebd917","email":"newuser1@example.com","phone1":"123-456-7890","phone2":"","name":"Bob Sagatan","address":"1234 One Way, Baltimore MD 75022","sex":"M","role":1,"state":0,"orgId":"471c74d2-8ecd-4323-ab2b-84e9a5ebd917","profileId":"02ba7c46-62ef-46fe-8212-1027fb1a8d84","disabled":false,"orgAdmin":false,"superUser":true,"nameAddr":"Bob Sagatan <newuser1@example.com>","orgMember":false}], request={query=Sagatan, page=0, pageSize=10, afterDoc=null, offset=0}, pages=1}, expected: {hits=#number, page=1, pages=1, pageSize=10, data=#array, request={query=Sagatan, page=1, pageSize=10, offset=0}}, reason: actual value has 1 more key(s) than expected: {lastDoc=4}
```

The info it has is great: `actual value has 1 more key(s) than expected: {lastDoc=4}`, but it's really hard to read, especially when the changes are not trivial like the example above.

Some proposals:
1) Could we pretty print it? Like the `logPrettyResponse`, and `logPrettyRequest` have a new `logPrettyError`. I see how that could get complicated.
2) Even more advanced would be somehow show the expected JSON format and inside it show that I need to add a key?

currently `configure headers` is processed separately and does not update the `HttpRequestBuilder`

this means routines (e.g. hooks. gatling name-resolver) that look for specific header values will miss these headers.

When running UI testing in parallel with -T 2, I sometimes experience the following error:

04:58:01.736 [main] INFO  com.intuit.karate.Main - Karate version: 0.9.5.RC5
04:58:02.109 [main] INFO  com.intuit.karate.Main - deleted directory: target
04:58:03.456 [ForkJoinPool-1-worker-1] INFO  com.intuit.karate - karate.env=acc 
04:58:03.463 [ForkJoinPool-1-worker-0] INFO  com.intuit.karate - karate.env=acc 
04:58:03.484 [main] INFO  com.intuit.karate.Runner - waiting for parallel features to complete ...
04:58:03.672 [ForkJoinPool-1-worker-1] DEBUG com.intuit.karate.shell.Command - found / verified free local port: 4444
04:58:03.674 [ForkJoinPool-1-worker-0] DEBUG com.intuit.karate.shell.Command - found / verified free local port: 4444
04:58:03.675 [geckodriver_1579147083667] DEBUG com.intuit.karate.driver.geckodriver_1579147083667 - command: [geckodriver, --port=4444]
04:58:03.679 [ForkJoinPool-1-worker-1] DEBUG com.intuit.karate.driver.geckodriver_1579147083667 - poll attempt #0 for port to be ready - localhost:4444
04:58:03.679 [ForkJoinPool-1-worker-0] DEBUG com.intuit.karate.driver.geckodriver_1579147083667 - poll attempt #0 for port to be ready - localhost:4444
04:58:03.687 [geckodriver_1579147083667] DEBUG com.intuit.karate.driver.geckodriver_1579147083667 - command: [geckodriver, --port=4444]
04:58:03.743 [geckodriver_1579147083667] DEBUG com.intuit.karate.driver.geckodriver_1579147083667 - geckodriver: error: Only one usage of each socket address (protocol/network address/port) is normally permitted. (os error 10048)
04:58:03.745 [geckodriver_1579147083667] DEBUG com.intuit.karate.driver.geckodriver_1579147083667 - geckodriver 0.26.0 (e9783a644016 2019-10-10 13:38 +0000) 
...

As you can see both threads detect that port 4444 is free.

This will fail one of the two scenarios with a somewhat hard to diagnose error:

common.feature:7 - driver config / start failed: java.net.URISyntaxException: Illegal character in path at index 30: http://localhost:4444/session/[], options: {type=geckodriver, target=null} 

My guess is that: https://github.com/intuit/karate/blob/ded55bbe9d59fc4dcef6f3386ae7bdcecdbdb88a/karate-core/src/main/java/com/intuit/karate/shell/Command.java#L89 needs to synchronized.
According to the documentation there is no support "yet" for firefox headless mode.

Currently our UI regression test set runs headless, so it can also run inside a headless Linux VM.
I would very much like to switch from our own framework to just Karate for these tests, but the headless feature is currently missing.

You can enable this mode via the command line parameter -headless to firefox.exe. However, you cannot set these arguments directly in the configure driver step; only arguments to geckodriver.exe.

The argument has to be specified via the capabilities object as follows (including the "alwaysMatch" segment):

{"capabilities":{"alwaysMatch":{"browserName":"firefox","moz:firefoxOptions":{"args":["-headless"]}}}}

See also https://developer.mozilla.org/en-US/docs/Web/WebDriver/Capabilities/firefoxOptions and
https://w3c.github.io/webdriver/#example-5

Are you willing to accept a PR for this feature?

Currently when there is a failure in a `containers only` assert, the expected value displays using a non-JSON format that doesn't parse with applications like Notepad++, and omits double quotes around string values.  As Karate is very strict on type matching, missing the strings can especially look confusing if the reason for the failure is not immediately evident.

Example:
```
get_payments.feature:58 - path: $.data[*],actual: [
	{
		"paymentDate": "2018-08-15",
		"paymentMethod": "Check",
		"amountPaid": 645.27,
		"bankAccount": "111",
		"amountApplied": 645.27,
		"amountUnapplied": 0.0,
		"transactionType": "Invoice",
		"invoiceDate": "2018-07-20",
		"applicationDate": "2018-08-16",
		"totalAmount": 645.27,
		"toleranceAmount": 0.0,
		"anticipatedAmount": 0.0,
		"discountAmount": 0.0,
		"writeOffAmount": 0.0,
		"chargebackAmount": 0.0,
		"debitOrCreditMemoApplied": 0.0,
		"openAmount": 0.0
	}
], expected: {amountApplied=645.27, discountAmount=0.00, toleranceAmount=0.00, invoiceDate=2018-07-20, openAmount=0.00, chargebackAmount=0.00, transactionType=Invoice, totalAmount=645.27, anticipatedAmount=0.00, writeOffAmount=0.00, amountPaid=645.27, paymentMethod=Check, paymentDate=2018-08-15, amountUnapplied=0.00, applicationDate=2018-08-16}, reason: actual value does not contain expected

This issue was taken from: https://stackoverflow.com/questions/59489470/karate-dsl-how-to-read-token-string-from-arg-and-send-this-string-in-json-re

The following Scenario:
```
    Scenario: Test to read/write within karate..
        * def fileContent = 'xyz12345'
        * eval  karate.write(karate.get('fileContent'), 'aFile.text'); 
        * def fromFile = read('file:target/aFile.text')

        # This works:
        * match fileContent == fromFile

        * def fromFileEmbeddedInJs = fromFile + ""
        # This fails with error message:  path: $, actual: 'xyz12345', expected: 'java.io.FileInputStream@3114dcf3', reason: not equal
        * match fileContent == fromFileEmbeddedInJs
```

Results in this error message:
```
fKarate version: 0.9.5.RC4
======================================================
elapsed:   0.92 | threads:    1 | thread time: 0.03 
features:     1 | ignored:    0 | efficiency: 0.03
scenarios:    1 | passed:     0 | failed: 1
======================================================
failed features:
src.test.groovy.com.github.peterquiel.karate.experiment.karate-syntax-collection: karate-syntax-collection.feature:222 - path: $, actual: 'xyz12345', expected: 'java.io.FileInputStream@3114dcf3', reason: not equal
```

Same result with `0.9.5.RC5`. 
Tested with latest adopt jdk 12 and 8 version. (log is is from jdk12)

Executed with vs-code karate runner + karate standalone and intellij idea - just mentioned, because there are some groovy type casting issues.
When Feature file run with 500+ iterations, from 501th iteration onwards the doc string in cucumber report  will not apprear. But when the same feature file is run with all the iterations in feature file the report will have all the doc string required.

The feature file is as below, also alttached all the required files .

**Feature File** 
Feature: Missing Doc String in report with iterations over 500

@test
Scenario Outline: Data	
	* print Text
    Examples:    
    |read('TextData.csv')|

This Zip file has Test Runner, POM, TextData.csv, Sample Report in which doc string is missing @501 iteration, rest all iterations has doc string.
[bug.zip](https://github.com/intuit/karate/files/3982423/bug.zip)

Kindly look into this issue and let me know if you need any further informations.



### What's occurred?
- `Content-Length` is different among HTTP requests in `retry`. (please refer logs below)
- From SUT side, seems multipart-file is not sent correctly when retrying.

1st request:
```
11:21:07.475 [main] DEBUG com.intuit.karate - request:
1 > POST http://127.0.0.1:8080/files
1 > Accept-Encoding: gzip,deflate
1 > Connection: Keep-Alive
1 > Content-Length: 6900
1 > Content-Type: multipart/form-data; boundary=qLIkMvpp9P5si91hYrhG_r4bYyzz8k
1 > Host: 127.0.0.1:8080
1 > User-Agent: Apache-HttpClient/4.5.3 (Java/1.8.0_192)
```

2nd request:
```
11:21:07.512 [main] DEBUG com.intuit.karate - retry condition not satisfied: responseStatus == 201
11:21:07.512 [main] DEBUG com.intuit.karate - sleeping before retry #1
11:21:10.518 [main] DEBUG com.intuit.karate - request:
2 > POST http://127.0.0.1:8080/files
2 > Accept-Encoding: gzip,deflate
2 > Connection: Keep-Alive
2 > Content-Length: 392
2 > Content-Type: multipart/form-data; boundary=2l1ScrvdtQMXwwCL6iQXevXGG233th6x
2 > Host: 127.0.0.1:8080
2 > User-Agent: Apache-HttpClient/4.5.3 (Java/1.8.0_192)
```

3rd request:
```
11:21:10.527 [main] DEBUG com.intuit.karate - retry condition not satisfied: responseStatus == 201
11:21:10.527 [main] DEBUG com.intuit.karate - sleeping before retry #2
11:21:13.532 [main] DEBUG com.intuit.karate - request:
3 > POST http://127.0.0.1:8080/files
3 > Accept-Encoding: gzip,deflate
3 > Connection: Keep-Alive
3 > Content-Length: 407
3 > Content-Type: multipart/form-data; boundary=H3_2pZDfJxEINPqdQyByhNbSkd3WHhiQumRbj
3 > Host: 127.0.0.1:8080
3 > User-Agent: Apache-HttpClient/4.5.3 (Java/1.8.0_192)
```

### How to reproduce
We can test with modifying `upload.feature` in karate-demo.
r.f. [my example](https://github.com/IsaoTakahashi/karate/commit/1a3ab7ebec4ed6100870104a33fe2ba833156a0b)

### Expectation
`retry` sends same HTTP request with multipart-file.

### Investigation and Hypothesis
(Sorry I couldn't confirm actually because don't know how to set up Karate development environment)
- `multipart-file` data is received and set to `HttpEntity` as `InputStream` for building HTTP Request.
- Once data in the stream was read, cannot be read again when retrying.
- Thus, 2nd and further retried requests cannot send file data and `Content-Length` is shorter than 1st.
For some reason it is in the docs but was taken out of the current code.

Refer: https://stackoverflow.com/q/59314890/143475

And current doc screenshot: 
<img width="927" alt="image" src="https://user-images.githubusercontent.com/915480/70766174-f2855600-1d82-11ea-9c53-d5ad91d44758.png">

I dare say this is useful and should be available.
When using a wildcard locator for UI Test Automation that contains an index, like ``{^button:2}Item`` to select the second <button> node with "Item" in its text Karate generates an incorrect xpath and fails to select any node.

I've verified this with both Firefox 68.3.0esr and Chrome via the karate-chrome Docker image.

Please see the attached example.

[karate-bug-wildcard.zip](https://github.com/intuit/karate/files/3954418/karate-bug-wildcard.zip)
