### System information

Compiled at commit 16c5fa6889202f2059b52c4a89599910541dd1a0

Operating system: Debian testing, amd64

### Expected behavior

What should have happened?

I had a lathe operation, plus 2 extra extrusions (one with 3x time rotating symmetry) acting as a difference.

At the end I wanted to see a crossection, so I did another sketch, extruded it, and used as a difference.

I expected to have a solid model, not hollow one, with some red marks on the edges. There are some other red marks, that I don't know what they are, and some edges (45 deg ones) do not have the red edges.

No idea what is going on.


### Actual behavior

![adapter-plate-section-4](https://user-images.githubusercontent.com/110322/72269274-33d78280-361b-11ea-85a8-8dd28d79a909.png)

![adpate-plate-section-iso](https://user-images.githubusercontent.com/110322/72269435-7b5e0e80-361b-11ea-967b-aacc9b09af9e.png)



Project file:  [adapter-plate.tar.gz](https://github.com/solvespace/solvespace/files/4054379/adapter-plate.tar.gz)

Just a UI nitpick. If I get the chance I'll look into doing this myself.

### System information

SolveSpace version: 3.0~64c0f62b

Operating system: Debian Buster

### Expected behavior

I have a solvespace file. I go to export it to trimesh (to get an STL to 3d print). The dialog probably should open to the location of the slvs file and defaulting to the same stem but with the appropriate extension (`.stl`)

### Actual behavior

It defaults to "untitled" (`untitled.stl`) in some other directory - think it's the last directory I used that export option in.

### System information

SolveSpace version: 3.0~64c0f62b

Operating system: Debian Buster

### Expected behavior

I have essentially a rectangular prism that I wanted to cut two triangular grooves in, one "vertically" and one "horizontally" (same height, and intersecting - making vise jaws).  So, one 2d sketch + extrude for positive solid, one 2d sketch and extrude as difference for one groove, then perpindicular 2d sketch and extrude as difference for other groove. It should look normal.

### Actual behavior

Several of the faces are red, indicating they are back-faces. (The solver didn't fail - it thinks it succeeded.) It actually looks like I'm seeing thru missing faces, when I went and redrew it...

![difference-fail](https://user-images.githubusercontent.com/61129/71367578-1eff5600-256b-11ea-851a-f47a20415834.png)

![image](https://user-images.githubusercontent.com/61129/71367605-2fafcc00-256b-11ea-836c-3e6c5fb52a69.png)

![image](https://user-images.githubusercontent.com/61129/71367630-422a0580-256b-11ea-85db-68145c867543.png)

Forcing to trimesh does fix it (despite the lack of a solver fail message), but I would have guessed that this was a fairly easy geometry to handle - nothing curved :) 

![image](https://user-images.githubusercontent.com/61129/71367687-684fa580-256b-11ea-9b5f-14b477eaa698.png)

### Additional information

open `jaw-covers.slvs` - the other is my reference linked in. (I'm not sure how to, or if I can, "re-seat" the origin of sketches to be able to simplify this one without redrawing) 

[jaw-.zip](https://github.com/solvespace/solvespace/files/3995496/jaw-.zip)

OK, decided to not be lazy and re-draw a simpler test case.

![Peek 2019-12-23 10-06](https://user-images.githubusercontent.com/61129/71367882-f1ff7300-256b-11ea-9e7e-5a43b29150be.gif)

and with workaround:

![image](https://user-images.githubusercontent.com/61129/71367963-2d9a3d00-256c-11ea-88b0-df53825bd88f.png)

[example2.zip](https://github.com/solvespace/solvespace/files/3995520/example2.zip)


Update: exporting to STL or "show naked edges" without doing the workaround pops up this nice and half-scary message:

![image](https://user-images.githubusercontent.com/61129/71368224-f6785b80-256c-11ea-9d12-02efe582f376.png)

and the exported STL is missing the same faces that are missing in the app. As loaded into PrusaSlicer with (left) and without (right) the workaround:

![image](https://user-images.githubusercontent.com/61129/71368345-55d66b80-256d-11ea-9525-af2a8fa332fc.png)


### System information

SolveSpace version: 3.0~64c0f62b

Operating system: Debian Buster

### Expected behavior

I turned on "Edit newly added dimensions" because it's a great workflow improvement.

When adding a distance constraint on an already fully-constrained sketch, I'd expect it to not let me edit it, since solvespace will automatically mark such a constraint as "REF"

### Actual behavior

It lets you "edit" it, though the edits have no effect.

### Additional information

![Peek 2019-12-20 11-02](https://user-images.githubusercontent.com/61129/71366465-9fbc5300-2567-11ea-8256-b620161c111a.gif)

![Peek 2019-12-23 09-42](https://user-images.githubusercontent.com/61129/71366763-9b446a00-2568-11ea-8c26-68b28c05a354.gif)

Here's the model for the second one, 
[example.zip](https://github.com/solvespace/solvespace/files/3995464/example.zip)


### System information

SolveSpace version: 3.0~dcdfdec5

Operating system: Gentoo 17.0

### Expected behaviour

I can zoom into fine details in my model

### Actual behaviour

In this case, I am trying to insert the Huawei plug into the left plug socket. I very quickly find that zooming in far enough causes artefacts to start appearing, and the 'compass' disappears.

![issue](https://user-images.githubusercontent.com/11457027/71328791-acfc2200-2514-11ea-9a0c-404396167777.png)


I assume this could be due to the wall being in the way however there seems to be no true way to hide a group, so unless I can find a hidden gem in terms of patches I may need to break up the model more than I really need to just to avoid the camera bug. this problem was also present in 2.3, hence I tried building a later version to see if the issue was fixed in the upcoming release.

### Additional information

[room-plan.zip](https://github.com/solvespace/solvespace/files/3993117/room-plan.zip)

### System information

SolveSpace version: 3.0~dcdfdec5

Operating system: Gentoo 17.0

### Expected behavior

Performance is the same as, or better than version 2.3

### Actual behavior

most changes seem to take a lot longer, although changing the camera is still snappy.

### Additional information

[room-plan.zip](https://github.com/solvespace/solvespace/files/3993117/room-plan.zip)

See:
https://github.com/solvespace/solvespace/issues/92#issuecomment-567831112

The problem was first introduced here:
https://github.com/solvespace/solvespace/commit/dabd57847edf142f145491175fb203455023d9d7

and later "fixed" here:
https://github.com/solvespace/solvespace/commit/f324477dd06c15022670a4486bf83be3abbf48b5
by setting the stack size to /STACK:33554432

Solvespace now starts up even with /STACK:554432

According to this:
https://en.cppreference.com/w/cpp/language/value_initialization
```
"2) if T is a class type with a default constructor that is neither user-provided nor deleted (that is, it may be a class with an implicitly-defined or defaulted default constructor), the object is zero-initialized and then it is default-initialized if it has a non-trivial default constructor; "
```
So removing the `{}` should leave both the `System` and `TextWindow` class instances properly initialized.
Found with /W4 by MSVC 2019 (Microsoft (R) C/C++ Optimizing Compiler Version 19.24.28314)

A bunch of implicit casts 'double' to 'float' and one 'int64_t' to 'unsigned'.

.\src\platform\guiwin.cpp(1237): warning C4701: potentially uninitialized local variable 'cursorName' used
.\src\platform\guiwin.cpp(1237): warning C4703: potentially uninitialized local pointer variable 'cursorName' used

.\src\solvespace.cpp(805,30): warning C4456: declaration of 'gs' hides previous local declaration
.\src\solvespace.cpp(715,17): message : see declaration of 'gs'

.\src\solvespace.cpp(849,47): warning C4456: declaration of 'e' hides previous local declaration
.\src\solvespace.cpp(847,29): message : see declaration of 'e'

.\src\render\render.h(288,51): warning C4458: declaration of 'camera' hides class member
.\src\render\render.h(271,17): message : see declaration of 'SolveSpace::SurfaceRenderer::camera'

.\src\render\render.h(289,57): warning C4458: declaration of 'lighting' hides class member
.\src\render\render.h(272,17): message : see declaration of 'SolveSpace::SurfaceRenderer::lighting'

 Fix a potential bug with 3Dconnexion: SpaceMouse

**Another warning is an actual bug. How does the SpaceMouse (I do not have one) work at all?**

.\src\platform\guiwin.cpp(1392,34): warning C4459: declaration of 'hSpaceWareDriverClass' hides global declaration
.\src\platform\guiwin.cpp(1389,13): message : see declaration of 'SolveSpace::Platform::hSpaceWareDriverClass'

Found no use of constraint signs on printouts sometimes - added dimension only view mode for constraints