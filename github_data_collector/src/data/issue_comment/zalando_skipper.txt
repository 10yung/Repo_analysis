**Is your feature request related to a problem? Please describe.**

We would like to transition to issuing ServiceAccount tokens that expire, aka [BoundServiceAccountTokenVolumes](https://github.com/kubernetes/kubernetes/issues/70679).

Skipper's Kubernetes data client is currently not aware that ServiceAccount tokens can expire and therefore only reads the token once when the client is initialized. (e.g. [here](https://github.com/zalando/skipper/blob/v0.11.26/dataclients/kubernetes/kube.go#L250) and [here](https://github.com/zalando/skipper/blob/v0.11.26/swarm/kubernetes.go#L108))

We would like for skipper to refresh the token from the mounted volume so that it always has a valid token.

**Describe the solution you would like**

The token should be re-read from the mounted volume while skipper is running. The path to the token within the container doesn't change. This can either be done in fixed intervals or by taking the expiry time within the token into account.

Looking at Kubernetes' TokenManager itself [it refreshes tokens](https://github.com/kubernetes/kubernetes/blob/v1.18.0-alpha.1/pkg/kubelet/token/token_manager.go#L167-L184) once they are past 80% of their lifetime or at least once per day. The default validity of ServiceAccount tokens is 1h so in practice they will be rotated once per hour.

**Describe alternatives you've considered (optional)**

We could use [client-go](https://github.com/kubernetes/client-go) for talking to the Kubernetes API (or a suitable subpackage). Token refresh is handled within the client automatically and it might have other benefits (or drawbacks).

**Would you like to work on it?**

Yes


Skipper version: v0.11.1

2 node EKS cluster, running skipper ingress as daemonset.

We experienced unrelated application(s) starting to return 404s after deploying a new application containing 2 ingress resources.
Initially it was 'fixed' after uninstalling the new application (scoreboardapi) and re-installing. However after manually editing an ingress object, we now have a situation where one ingress pod behaves correctly, and another returns unexpected 404s, so it seams triggered by a route update.

Some questions/thoughts:
* What could be the origin of errors like 'catch-all name in * doesn't match *'. Could this be related to the described issue?
* Could us in some way incorrectly configuring ingress objects cause these kind of effects?

Of course I can try to provide more information if needed. I'm going to try if upgrading skipper to latest version might solve this. If needed, running this version and trying to reproduce is an option.

Timeline:
* 14:10:47Z - Deployed new application, containing 2 new ingress resources
* 14:10:48Z - Skipper pods log updating routes
* 14:11:06Z - 404s returned for grafana, an already existing application also using the restricted skipper ingress class
* 14:11:15Z - Skipper route updates, unclear what caused those
* 14:11:31Z - Skipper route updates, unclear what caused those
* 15:11:54Z - "Client request: context error" appear after I killed grafana pod (suspecting it just being dashboard configuration being borked in some way)
* ....      - 404s persist
* 15:26:54Z - Skipper route updates, resulting from manually changing ingress path from `/*` into `/`, reacting to catch-all name errors.
* ....      - 404s persist
* 15:31:41Z - Skipper route deletions, resulting from uninstalling scoreboard application
* ....      - No more 404s
* 15:42:48Z - Skipper route updates, resulting from re-install scoreboard application (no config changes whatsoever compared to first installation)
* ....      - No more 404s


Log excerpt from around 14:10:48 skipper route updates:
```
| 2020-01-16 14:11:06.425 | {"log":"158.127.160.129 - - [16/Jan/2020:14:11:06 +0000] \"GET /api/datasources/proxy/1/api/v1/query?query=sum(node_namespace_pod_container%3Acontainer_cpu_usage_seconds_total%3Asum_rate%7Bcluster%3D%22%22%2C%20namespace%3D%22monitoring%22%7D)%20by%20(pod)%20%2F%20sum(kube_pod_container_resource_requests_cpu_cores%7Bcluster%3D%22%22%2C%20namespace%3D%22monitoring%22%7D)%20by%20(pod)&time=1579183867 HTTP/1.1\" 404 10 \"https://grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com/d/85a562078cdf77779eaa1add43ccec1e/kubernetes-compute-resources-namespace-pods?orgId=1&refresh=10s&var-datasource=default&var-cluster=&var-namespace=monitoring&var-interval=4h\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:72.0) Gecko/20100101 Firefox/72.0\" 0 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -\n","stream":"stderr","docker":{"container_id":"59f6323bee97e821f4e1065a10295192ff5eed1f1c5dea350b135f223c7a3f1f"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-7b5bl","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5470434-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-138-17.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}} |
| 2020-01-16 14:10:48.346 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"route settings applied\"\n","stream":"stderr","docker":{"container_id":"59f6323bee97e821f4e1065a10295192ff5eed1f1c5dea350b135f223c7a3f1f"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-7b5bl","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5470434-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-138-17.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.345 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"diff taken, inserts/updates: 2, deletes: 0\"\n","stream":"stderr","docker":{"container_id":"59f6323bee97e821f4e1065a10295192ff5eed1f1c5dea350b135f223c7a3f1f"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-7b5bl","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5470434-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-138-17.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.345 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"route settings, update, route: kube_test_scoreboardapi__scoreboardapi_cache_ingress__scoreboardapi_test_nusport_nl______scoreboardapi_cache_service: Host(/^scoreboardapi[.]test[.]nusport[.]nl$/) && PathSubtree(\\\"/*\\\") -> \\\"http://172.20.87.83:80\\\"\"\n","stream":"stderr","docker":{"container_id":"59f6323bee97e821f4e1065a10295192ff5eed1f1c5dea350b135f223c7a3f1f"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-7b5bl","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5470434-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-138-17.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.345 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"route settings, update, route: kube_test_scoreboardapi__scoreboardapi_comet_ingress__comet_test_nusport_nl______scoreboardapi_comet_service: Host(/^comet[.]test[.]nusport[.]nl$/) && PathSubtree(\\\"/*\\\") -> \\\"http://172.20.189.254:80\\\"\"\n","stream":"stderr","docker":{"container_id":"59f6323bee97e821f4e1065a10295192ff5eed1f1c5dea350b135f223c7a3f1f"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-7b5bl","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5470434-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-138-17.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.345 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"route settings received\"\n","stream":"stderr","docker":{"container_id":"59f6323bee97e821f4e1065a10295192ff5eed1f1c5dea350b135f223c7a3f1f"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-7b5bl","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5470434-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-138-17.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.345 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"filterRoutes incoming=9 outgoing=9\"\n","stream":"stderr","docker":{"container_id":"59f6323bee97e821f4e1065a10295192ff5eed1f1c5dea350b135f223c7a3f1f"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-7b5bl","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5470434-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-138-17.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| 2020-01-16 14:10:48.345 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=error msg=\"catch-all name in */ doesn't match \"\n","stream":"stderr","docker":{"container_id":"59f6323bee97e821f4e1065a10295192ff5eed1f1c5dea350b135f223c7a3f1f"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-7b5bl","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5470434-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-138-17.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.345 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=error msg=\"catch-all name in ** doesn't match \"\n","stream":"stderr","docker":{"container_id":"59f6323bee97e821f4e1065a10295192ff5eed1f1c5dea350b135f223c7a3f1f"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-7b5bl","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5470434-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-138-17.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.253 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"diff taken, inserts/updates: 2, deletes: 0\"\n","stream":"stderr","docker":{"container_id":"f8419ff98dd61d4e5d90b6ffc4fe3624b37f74eb6b6efcaffd7718e11d342d03"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-9d4hr","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5489d27-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-109-181.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.253 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"route settings, update, route: kube_test_scoreboardapi__scoreboardapi_cache_ingress__scoreboardapi_test_nusport_nl______scoreboardapi_cache_service: Host(/^scoreboardapi[.]test[.]nusport[.]nl$/) && PathSubtree(\\\"/*\\\") -> \\\"http://172.20.87.83:80\\\"\"\n","stream":"stderr","docker":{"container_id":"f8419ff98dd61d4e5d90b6ffc4fe3624b37f74eb6b6efcaffd7718e11d342d03"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-9d4hr","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5489d27-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-109-181.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.253 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"route settings, update, route: kube_test_scoreboardapi__scoreboardapi_comet_ingress__comet_test_nusport_nl______scoreboardapi_comet_service: Host(/^comet[.]test[.]nusport[.]nl$/) && PathSubtree(\\\"/*\\\") -> \\\"http://172.20.189.254:80\\\"\"\n","stream":"stderr","docker":{"container_id":"f8419ff98dd61d4e5d90b6ffc4fe3624b37f74eb6b6efcaffd7718e11d342d03"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-9d4hr","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5489d27-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-109-181.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.253 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"route settings received\"\n","stream":"stderr","docker":{"container_id":"f8419ff98dd61d4e5d90b6ffc4fe3624b37f74eb6b6efcaffd7718e11d342d03"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-9d4hr","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5489d27-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-109-181.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.253 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"filterRoutes incoming=9 outgoing=9\"\n","stream":"stderr","docker":{"container_id":"f8419ff98dd61d4e5d90b6ffc4fe3624b37f74eb6b6efcaffd7718e11d342d03"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-9d4hr","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5489d27-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-109-181.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.253 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=error msg=\"catch-all name in * doesn't match *\"\n","stream":"stderr","docker":{"container_id":"f8419ff98dd61d4e5d90b6ffc4fe3624b37f74eb6b6efcaffd7718e11d342d03"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-9d4hr","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5489d27-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-109-181.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:10:48.253 | {"log":"[APP]time=\"2020-01-16T14:10:48Z\" level=info msg=\"route settings applied\"\n","stream":"stderr","docker":{"container_id":"f8419ff98dd61d4e5d90b6ffc4fe3624b37f74eb6b6efcaffd7718e11d342d03"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-9d4hr","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5489d27-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-109-181.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}|
| 2020-01-16 14:07:00.016 | {"log":"[APP]time=\"2020-01-16T14:07:00Z\" level=info msg=\"Client request: context canceled\"\n","stream":"stderr","docker":{"container_id":"59f6323bee97e821f4e1065a10295192ff5eed1f1c5dea350b135f223c7a3f1f"},"kubernetes":{"container_name":"skipper-ingress","namespace_name":"kube-system","pod_name":"ingress-restricted-skipper-ingress-skipper-7b5bl","container_image":"registry.opensource.zalan.do/pathfinder/skipper:v0.11.1","container_image_id":"docker-pullable://registry.opensource.zalan.do/pathfinder/skipper@sha256:7a0ab57ea4927bb8e04fd849aaaa96c7bad620d66a1fb7d6e8ca5259c92aa490","pod_id":"c5470434-1cdb-11ea-a011-0a24c1d73c4e","host":"ip-10-12-138-17.eu-west-1.compute.internal","labels":{"controller-revision-hash":"744c45c957","pod-template-generation":"1","app_kubernetes_io/instance":"ingress-restricted","app_kubernetes_io/name":"skipper-ingress-skipper"},"master_url":"https://172.20.0.1:443/api","namespace_id":"37aa06fa-1c00-11ea-a011-0a24c1d73c4e"}}                                                                                                                                                
```

---

### Update: Another occurence

After manually editing one of the scoreboard ingress objects (changing path `/*` into `/` and vice versa), we got in a state where one skipper pod was behaving correctly, while another consistently returns 404s for some services.

Running 2 repeated curl requests:
```
curl https://grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com/login -I
curl https://hello.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com/ -I
```

* ingress-restricted-skipper-ingress-skipper-7b5bl: grafana always 404, hello world always 200
* ingress-restricted-skipper-ingress-skipper-9d4hr: both always 200

```
# kubectl -n monitoring get ep prometheus-grafana -o wide
NAME                 ENDPOINTS           AGE
prometheus-grafana   10.12.123.60:3000   35d

# kubectl -n examples get ep hello-world-restricted -o wide
NAME                     ENDPOINTS                          AGE
hello-world-restricted   10.12.103.235:80,10.12.186.56:80   35d
```

The misbehaving pod `ingress-restricted-skipper-ingress-skipper-7b5bl`:
```
# ingress-restricted-skipper-ingress-skipper-7b5bl
# wget -O/dev/stdout http://localhost:9910/routes
Connecting to localhost:9910 (127.0.0.1:9910)
kube__healthz: Path("/kube-system/healthz") && SourceFromLast("10.0.0.0/8", "192.168.0.0/16", "172.16.0.0/12", "127.0.0.1/8", "fd00::/8", "::1/128")
  -> status(200)
  -> <shunt>;

kube__redirect: PathRegexp(/.*/) && PathRegexp(/.*/) && Header("X-Forwarded-Proto", "http")
  -> redirectTo(308, "https:")
  -> <shunt>;

kube_examples__hello_world_restricted__hello_restricted_apps_1_osc_nu_test_k8s_cloud_sanoma_com_____hello_world_restricted: Host(/^hello[.]restricted[.]apps-1[.]osc-nu-test[.]k8s[.]cloud[.]sanoma[.]com$/) && PathSubtree("/")
  -> "http://172.20.221.228:80";

kube_examples__hello_world_undetermined__hello_undetermined_apps_1_osc_nu_test_k8s_cloud_sanoma_com_____hello_world_undetermined: Host(/^hello[.]undetermined[.]apps-1[.]osc-nu-test[.]k8s[.]cloud[.]sanoma[.]com$/) && PathSubtree("/")
  -> "http://172.20.254.217:80";

kube_monitoring__prometheus_grafana__grafana_restricted_apps_1_osc_nu_test_k8s_cloud_sanoma_com_____prometheus_grafana: Host(/^grafana[.]restricted[.]apps-1[.]osc-nu-test[.]k8s[.]cloud[.]sanoma[.]com$/) && PathSubtree("/")
  -> "http://10.12.123.60:3000";

kube_monitoring__prometheus_prometheus_oper_alertmanager__alertmanager_restricted_apps_1_osc_nu_test_k8s_cloud_sanoma_com_____prometheus_prometheus_oper_alertmanager: Host(/^alertmanager[.]restricted[.]apps-1[.]osc-nu-test[.]k8s[.]cloud[.]sanoma[.]com$/) && PathSubtree("/")
  -> "http://10.12.147.83:9093";

kube_monitoring__prometheus_prometheus_oper_prometheus__prometheus_restricted_apps_1_osc_nu_test_k8s_cloud_sanoma_com_____prometheus_prometheus_oper_prometheus: Host(/^prometheus[.]restricted[.]apps-1[.]osc-nu-test[.]k8s[.]cloud[.]sanoma[.]com$/) && PathSubtree("/")
  -> "http://10.12.70.89:9090";

kube_test_scoreboardapi__scoreboardapi_cache_ingress__scoreboardapi_test_nusport_nl_____scoreboardapi_cache_service: Host(/^scoreboardapi[.]test[.]nusport[.]nl$/) && PathSubtree("/")
  -> "http://10.12.77.72:80";

kube_test_scoreboardapi__scoreboardapi_comet_ingress__comet_test_nusport_nl______scoreboardapi_comet_service: Host(/^comet[.]test[.]nusport[.]nl$/) && PathSubtree("/*")
```

```
# kubectl -n kube-system log pod/ingress-restricted-skipper-ingress-skipper-7b5bl --tail=10 -f |grep -E "(hello|grafana)"
158.127.152.129 - - [17/Jan/2020:07:14:21 +0000] "HEAD /login HTTP/1.1" 404 10 "-" "curl/7.54.0" 0 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:14:22 +0000] "HEAD /login HTTP/1.1" 404 10 "-" "curl/7.54.0" 0 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:14:24 +0000] "HEAD / HTTP/1.1" 200 0 "-" "curl/7.54.0" 3 hello.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:14:25 +0000] "HEAD /login HTTP/1.1" 404 10 "-" "curl/7.54.0" 0 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:14:26 +0000] "HEAD /login HTTP/1.1" 404 10 "-" "curl/7.54.0" 0 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:14:28 +0000] "HEAD /login HTTP/1.1" 404 10 "-" "curl/7.54.0" 0 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:14:30 +0000] "HEAD / HTTP/1.1" 200 0 "-" "curl/7.54.0" 2 hello.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:14:31 +0000] "HEAD /login HTTP/1.1" 404 10 "-" "curl/7.54.0" 0 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
```

The correctly behaving pod `ingress-restricted-skipper-ingress-skipper-9d4hr`:
```
# ingress-restricted-skipper-ingress-skipper-9d4hr
# wget -O/dev/stdout http://localhost:9910/routes
Connecting to localhost:9910 (127.0.0.1:9910)
kube__healthz: Path("/kube-system/healthz") && SourceFromLast("10.0.0.0/8", "192.168.0.0/16", "172.16.0.0/12", "127.0.0.1/8", "fd00::/8", "::1/128")
  -> status(200)
  -> <shunt>;

kube__redirect: PathRegexp(/.*/) && PathRegexp(/.*/) && Header("X-Forwarded-Proto", "http")
  -> redirectTo(308, "https:")
  -> <shunt>;

kube_examples__hello_world_restricted__hello_restricted_apps_1_osc_nu_test_k8s_cloud_sanoma_com_____hello_world_restricted: Host(/^hello[.]restricted[.]apps-1[.]osc-nu-test[.]k8s[.]cloud[.]sanoma[.]com$/) && PathSubtree("/")
  -> "http://172.20.221.228:80";

kube_examples__hello_world_undetermined__hello_undetermined_apps_1_osc_nu_test_k8s_cloud_sanoma_com_____hello_world_undetermined: Host(/^hello[.]undetermined[.]apps-1[.]osc-nu-test[.]k8s[.]cloud[.]sanoma[.]com$/) && PathSubtree("/")
  -> "http://172.20.254.217:80";

kube_monitoring__prometheus_grafana__grafana_restricted_apps_1_osc_nu_test_k8s_cloud_sanoma_com_____prometheus_grafana: Host(/^grafana[.]restricted[.]apps-1[.]osc-nu-test[.]k8s[.]cloud[.]sanoma[.]com$/) && PathSubtree("/")
  -> "http://10.12.123.60:3000";

kube_monitoring__prometheus_prometheus_oper_alertmanager__alertmanager_restricted_apps_1_osc_nu_test_k8s_cloud_sanoma_com_____prometheus_prometheus_oper_alertmanager: Host(/^alertmanager[.]restricted[.]apps-1[.]osc-nu-test[.]k8s[.]cloud[.]sanoma[.]com$/) && PathSubtree("/")
  -> "http://10.12.147.83:9093";

kube_monitoring__prometheus_prometheus_oper_prometheus__prometheus_restricted_apps_1_osc_nu_test_k8s_cloud_sanoma_com_____prometheus_prometheus_oper_prometheus: Host(/^prometheus[.]restricted[.]apps-1[.]osc-nu-test[.]k8s[.]cloud[.]sanoma[.]com$/) && PathSubtree("/")
  -> "http://10.12.70.89:9090";

kube_test_scoreboardapi__scoreboardapi_cache_ingress__scoreboardapi_test_nusport_nl_____scoreboardapi_cache_service: Host(/^scoreboardapi[.]test[.]nusport[.]nl$/) && PathSubtree("/")
  -> "http://10.12.77.72:80";

kube_test_scoreboardapi__scoreboardapi_comet_ingress__comet_test_nusport_nl______scoreboardapi_comet_service: Host(/^comet[.]test[.]nusport[.]nl$/) && PathSubtree("/*")
```

```
# kubectl -n kube-system log pod/ingress-restricted-skipper-ingress-skipper-9d4hr --tail=10 -f |grep -E "(hello|grafana)"
158.127.152.129 - - [17/Jan/2020:07:21:37 +0000] "HEAD /login HTTP/1.1" 200 0 "-" "curl/7.54.0" 107 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:21:38 +0000] "HEAD /login HTTP/1.1" 200 0 "-" "curl/7.54.0" 110 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:21:39 +0000] "HEAD / HTTP/1.1" 200 0 "-" "curl/7.54.0" 1 hello.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:21:40 +0000] "HEAD / HTTP/1.1" 200 0 "-" "curl/7.54.0" 1 hello.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:21:42 +0000] "HEAD / HTTP/1.1" 200 0 "-" "curl/7.54.0" 1 hello.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:21:44 +0000] "HEAD /login HTTP/1.1" 200 0 "-" "curl/7.54.0" 109 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:21:45 +0000] "HEAD /login HTTP/1.1" 200 0 "-" "curl/7.54.0" 112 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:21:47 +0000] "HEAD /login HTTP/1.1" 200 0 "-" "curl/7.54.0" 108 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:21:47 +0000] "HEAD / HTTP/1.1" 200 0 "-" "curl/7.54.0" 2 hello.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:21:49 +0000] "HEAD /login HTTP/1.1" 200 0 "-" "curl/7.54.0" 100 grafana.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
158.127.152.129 - - [17/Jan/2020:07:21:50 +0000] "HEAD / HTTP/1.1" 200 0 "-" "curl/7.54.0" 8 hello.restricted.apps-1.osc-nu-test.k8s.cloud.sanoma.com - -
```



**Is your feature request related to a problem? Please describe.**
The documentation of setPath states that applying template operations in the value
is experimental. The feature has been there  for 3 years now (https://github.com/zalando/skipper/blame/fadf7fe361a05d5c4823b948360c176737cf8f87/filters/builtin/path.go#L33),
and probably tested enough in production to be non-experimental.

**Describe the solution you would like**
Remove the mention of experimental status from the comments.

**Would you like to work on it?**
Yes
**Is your feature request related to a problem? Please describe.**
I need to use separate filters for separate HTTP Methods but same path. E.G. I need to modify body of the request only for PUT,POST and PATCH. This will cause configuration duplication as only single method is allowed for predicate.

Example:
```
put_operations: Path("...") && Method("PUT")
 -> modPath("/some-path/", "/another-path")
 -> modifyBody()
 -> "https://google.com";

post_operations: Path("...") && Method("POST")
 -> modPath("/some-path/", "/another-path")
 -> modifyBody()
 -> "https://google.com";

operations: Path("...")
 -> modPath("/some-path/", "/another-path")
 -> "https://google.com";
```

Would become:
```
put_operations: Path("...") && Method("PUT", "POST", "PATCH")
 -> modPath("/some-path/", "/another-path")
 -> modifyBody()
 -> "https://google.com";

operations: Path("...")
 -> modPath("/some-path/", "/another-path")
 -> "https://google.com";
```

There also might be other use cases for that.


**Describe the solution you would like**
Allow `Method` predicate accept an array instead of single value.

**Would you like to work on it?**
Yes, but I might be missing some details, on why it's not already done.

**Is your feature request related to a problem? Please describe.**
I’d like to have different rate limits for different users on the same route, where a user would be identified by a header, and the user defines the rate limit count and period, which themselves could be headers.

**Describe the solution you would like**
Something along the lines of the `clusterClientRatelimit` filter, but without the static rate. 
Instead of `clusterClientRatelimit("group", 2000, "1h", "X-ID")` maybe something like `filter("group", 2000, "1h", "X-Ratelimit-Count", "X-Ratelimit-Period", "X-ID")`, where you'd be able to define headers to check what the ratelimit count and period is for the given request, and defaults otherwise.

**Describe alternatives you've considered (optional)**
Creating multiple routes, such as:
```
auth: Path("/foo")
      -> webhook("url", "X-ID,X-Ratelimit-Count,X-Ratelimit-Period")
      -> <loopback>;
user2000: Path("/foo")
          && HeaderRegexp("X-ID", "^.*$")
          && Header("X-Ratelimit-Count", "2000")
          && Header("X-Ratelimit-Period", "1h")
          -> dropResonseHeader("X-ID")
          -> dropResonseHeader("X-Ratelimit-Count")
          -> dropResonseHeader("X-Ratelimit-Period")
          -> clusterClientRatelimit("group", 2000, "1h", "X-ID")
          -> "backend";
user1000: Path("/foo")
          && HeaderRegexp("X-ID", "^.*$")
          && Header("X-Ratelimit-Count", "1000")
          && Header("X-Ratelimit-Period", "1h")
          -> dropResonseHeader("X-ID")
          -> dropResonseHeader("X-Ratelimit-Count")
          -> dropResonseHeader("X-Ratelimit-Period")
          -> clusterClientRatelimit("group", 1000, "1h", "X-ID")
          -> "backend";
default: Path("/foo")
         && HeaderRegexp("X-ID", "^.*$")
         && HeaderRegexp("X-Ratelimit-Count", "^.*$")
         && HeaderRegexp("X-Ratelimit-Period", "^.*$")
         -> dropResonseHeader("X-ID")
         -> dropResonseHeader("X-Ratelimit-Count")
         -> dropResonseHeader("X-Ratelimit-Period")
         -> clusterClientRatelimit("group", 500, "1h", "X-ID")
         -> "backend";
```

**Additional context (optional)**

I want to make sure that you couldn't get to `/foo`, as described above, without passing through `webhook` successfully, and due to the above workaround, this could, possibly, be bypassed. This is also a lot of predicates/filters due to the requirement of `<loopback>`, which could become unmaintainable for lots of routes.

**Would you like to work on it?**
Yes, but would like some direction first. There could also be a solution to write a customer filter if this is not something that is wanted in the main codebase.
- refactor registry and add interface to make it testable
- test the full roundtrip of an OpenIDConnect request

Signed-off-by: Sandor Szücs <sandor.szuecs@zalando.de>
## Problem

There is no effective way of collecting aggregated metrics for arbitrary sets of routes.

Skipper supports collecting metrics for individual routes, which then can be used to create any aggregates, but this has two problems:

- when the set of routes belonging together changes the configuration of the metric collector needs to be updated (potentiall, or the route IDs have to follow a pattern)
- when working with a large number of routes (>10k), the metrics keyspace may become too large

## Example

When generating routes by the [StackSet Controller](https://github.com/zalando-incubator/stackset-controller), it is important to measure current traffic and error rate of the different versions (stacks) during traffic switching.

## Proposed Solution

Create a filter whose only purpose is to mark a route which metrics group it belongs to. Using the above example, it would work as follows:

- the StackSet "foo" has two active stacks: "v1" and "v2"
- the ingress objects generated by the StackSet Controller would be annotated to include the version
- the routes generated from the ingress, would include a filter: either `metricsGroup("foo-v1")` or `metricsGroup("foo-v2")`

## Note

This approach may require some kind of garbage collection mechanism of the metrics keys, to avoid keeping obsolete metrics objects for too long.

## Implementation

- this feature can rely on the existing [filters.FilterContext.Metrics](https://godoc.org/github.com/zalando/skipper/filters#Metrics) feature, that allows to define custom metrics from filters programmatically

## Related

- https://github.com/zalando/skipper/issues/489
oidc* filters use open-id configuration URL `/.well-known/openid-configuration` to fetch endpoint configrations. If this URL is not responding (request get an error) it will try only after the regular interval to fetch the data again. This can lead to downtime. 
I would suggest, that we do a retry with exponential backoff in the config requests on errors.
**Is your feature request related to a problem? Please describe.**

For example in Kubernetes, people want to use server push, etc. features from h2.

**Describe the solution you would like**

The proxy should be able to connect with H2C.

**Describe alternatives you've considered (optional)**

Create mTLS infrastructure, which can be a huge change without providing too much value

**Would you like to work on it?**
Yes

Skipper supports now graceful shutdown and TCP queue when run with HTTP without TLS. We should enables these features for HTTPS, as well.