# IF YOU DON'T ANSWER THIS TEMPLATE - THE BOT WILL AUTOMATICALLY CLOSE YOUR ISSUE!

## Please check all of the platforms you are having the issue on (if platform is not listed, it is not supported)

 - [x] iOS
 - [ ] Android
 - [ ] UWP
 - [ ] .NET Standard

## Version of Library
7.0.1

## Version of OS(s) listed above with issue
iOS 13.1.3


## Steps to Reproduce
1. Lock landscape orientation to Landscape in iOS ViewController
2. Present dialog "ActionSheet" 
3. Turn device to portrait and it auto rotates

## Expected Behavior
Device stays locked in Landscape mode

## Actual Behavior
Orientation rotates when it should be locked

# IF YOU DON'T ANSWER THIS TEMPLATE - THE BOT WILL AUTOMATICALLY CLOSE YOUR ISSUE!

## Please check all of the platforms you are having the issue on (if platform is not listed, it is not supported)

 - [ ] iOS
 - [x ] Android
 - [ ] UWP
 - [ ] .NET Standard

## Version of Library
7.0.30
## Version of OS(s) listed above with issue
Android version 9


## Steps to Reproduce
1.Create a page that uses multiple PromptAsync functions
2.assign different input type to the prompts
3.

## Expected Behavior
When each prompt is opened the proper keyboard for its input type is displayed.

## Actual Behavior
If a prompt has been previously opened the prompt displays the keyboard from the previous prompt

```private async Task ExecuteEditMachineNameCommand()
        {
            var result = await UserDialogs.Instance.PromptAsync(new PromptConfig()

                            .SetTitle("Machine Name")
                            .SetText(MachineName)
                            .SetInputMode(InputType.Name)
                            .SetMaxLength(20)
                            .SetCancellable(false));
            var msg1 = "";
            if ((result.Value != null) && (result.Value.Length > 0))
            {
                if (result.Value.Contains(","))
                {
                    msg1 += "Commas are not allowed in Machine Names";
                }
            }
            else
            {
                if (MachineName != null && MachineName.Length > 0)
                {
                    return;
                }
                msg1 += "Machine Name is a Required field";
            }
            var data = await App.Database.GetMachinesAsync();
            var data1 = data.Where(a => a.MachineName == result.Value);
            Debug.Write(data1.Count());
            if (data1.Count() > 0)
            {
                if (data1.First().ID != Machine.ID)
                {
                    msg1 += "That Name is Already in Use";
                }
            }

            if (msg1.Length > 0)
            {
                await Application.Current.MainPage.DisplayAlert("Invalid Entry", msg1, "OK");
                await ExecuteEditMachineNameCommand();
                return;
            }
            MachineName = result.Value;
        }
        private async Task ExecuteEditSerialNumberCommand()
        {
            var result = await UserDialogs.Instance.PromptAsync(new PromptConfig()

                            .SetTitle("Carrier Serial Number")
                            .SetText(SerialNumber)
                            .SetInputMode(InputType.Name)
                            .SetMaxLength(10)
                            .SetCancellable(false));
            var msg1 = "";
            if (result.Value != null && result.Value.Length > 0)
            {
                if (result.Value.Contains(","))
                {
                    msg1 += "Commas are not allowed in Machine Names";
                }
            }
            if (msg1.Length > 0)
            {
                await Application.Current.MainPage.DisplayAlert("Invalid Entry", msg1, "OK");
                await ExecuteEditSerialNumberCommand();
                return;
            }
            SerialNumber = result.Value;
        }
        private async Task ExecuteEditLoadedStrokeCommand()
        {
            var config = new PromptConfig()
            {

                Title = $"Loaded Stroke ({LengthUnits})",
                Text = StrokeLoaded,
                InputType = InputType.DecimalNumber,
                IsCancellable = false
            };
            var result = await UserDialogs.Instance.PromptAsync(config);
            try
            {
                float data = Convert.ToSingle(result.Text);
            }
            catch
            {
                await Application.Current.MainPage.DisplayAlert("Invalid Entry", "Please Enter a positive decimal Value", "OK");
                return;
            }
            StrokeLoaded = result.Text;

        }
        private async Task ExecuteEditEmptyStrokeCommand()
        {
            var config = new PromptConfig()
            {

                Title = $"Empty Stroke ({LengthUnits})",
                Text = StrokeEmpty,
                InputType = InputType.DecimalNumber,
                IsCancellable = false
            };
            config.SetInputMode(InputType.DecimalNumber);
            var result = await UserDialogs.Instance.PromptAsync(config);
            try
            {
                float data = Convert.ToSingle(result.Text);
            }
            catch
            {
                await Application.Current.MainPage.DisplayAlert("Invalid Entry", "Please Enter a positive decimal Value", "OK");
                return;
            }
            StrokeEmpty = result.Text;
        }
        private async Task ExecuteEditSpeedCommand()
        {
            var config = new PromptConfig()
            {
                Title = "Design Speed(RPM)",
                Text = Speed,
                InputType = InputType.Number,
                IsCancellable = false
            };
            config.SetInputMode(InputType.Number);

            var result = await UserDialogs.Instance.PromptAsync(config);
            try
            {
                float data = Convert.ToInt32(result.Text);
            }
            catch
            {
                await Application.Current.MainPage.DisplayAlert("Invalid Entry", "Please Enter a positive integer Value", "OK");
                return;
            }
            Speed = result.Text;
        }
```
For issue #428 

Thanks
## Please check all of the platforms you are having the issue on (if platform is not listed, it is not supported)

 - [X] Android

## Version of OS(s) listed above with issue
Android 7.0, 6.0.1
## Version of Xamarin Forms 
2.3.4.267

## Version of ACR UserDialogs Library
6.5.1

## Expected Behaviour
When using PromptAsync like this:
`var input = await UserDialogs.Instance.PromptAsync("", null, "Rechercher", "Annuler", "numero de boucle (4 chiffres min)", InputType.Number);`
**I'm expecting the keyboard to show up in the same time as the dialog shows up.** 

## Actual Behavior

Only dialog shows up, but not the keyboard unless the user Tap the text input
                


## Code of Conduct
* No Library Update Requests
* No Timeline Requests
* Please read through the documentation and FAQs
* Please be respectful of my time. I put a lot of effort into my libraries.  I try to support the issue requests within a day.  I'm not psychic, so please take the time to fill out the above form as complete as possible

## GOOD JOB ALLAN RITCHIE
The DateTimePicker will now display the title (and keep displaying the title, also after picking a date).

Previously the behaviour was to display the title when showing the picker, and after picking a date, it would display the date as the title. This is unnecessary since the date is shown directly below already, also in string representation. Additionally, when setting MinimumDate or MaximumDate in the DatePromptConfig, it would override the title and never show it, not even when the picker is shown.
## Please check all of the platforms you are having the issue on (if platform is not listed, it is not supported)

 - [] iOS
 - [x] Android
 - [] UWP
 - [] NET Standard 1.1

## Version of OS(s) listed above with issue

Android 7.0

## Version of ACR UserDialogs Library

6.5.1

## Expected Behaviour

Being able to write numbers or erase mistakes.

## Actual Behavior
_If applicable, please include entire exception - type, message, stacktrace_

Numbers and backspace seemingly do nothing. This issue was reported before and fixed, so I double-checked I had installed all the updates before reporting it again.

## Code of Conduct
* No Library Update Requests
* No Timeline Requests
* Please read through the documentation and FAQs
* Please be respectful of my time. I put a lot of effort into my libraries.  I try to support the issue requests within a day.  I'm not psychic, so please take the time to fill out the above form as complete as possible

When using this code:

```
return Mvx.Resolve<IUserDialogs>().DatePromptAsync(
	new DatePromptConfig()
	{
		Title = translator.GetTranslation(titleKey),
		OkText = translator.GetTranslation("button_ok"),
		CancelText = translator.GetTranslation("button_cancel"),
		IsCancellable = true,
		MaximumDate = DateTime.Today
	}
);
```

The correct title isn't being shown. When I use the other constructor, without DatePromptConfig() object, the title is working as expected:

`return Mvx.Resolve<IUserDialogs>().DatePromptAsync("Test");`

## Please check all of the platforms you are having the issue on (if platform is not listed, it is not supported)

 - [] iOS
 - [x] Android
 - [] UWP
 - [] NET Standard 1.1

## Version of OS(s) listed above with issue
Android 6.0

## Version of ACR UserDialogs Library
6.5.1

## Expected Behaviour
The title in a DatePrompt should show the correct string that was passed. 

## Actual Behavior
The string representation of the currently selected Date appears (updates as you change the date).