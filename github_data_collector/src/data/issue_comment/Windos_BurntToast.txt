Even without any parameter, the notification title still has { } around it.
This is a fantastic package, thanks for doing it.
Is there any chance the HTTP Listener could have a variation where it converts the connections to websocket? It's not particularly difficult, just my powershell skill is at the level I can read it OK but not really write anything advanced.
I want to use clients with a connection to a message router via websockets and they received the toast packet from there. 
It'll be used by an app to send messages with a url to users who are not using the app with a link to the page they need to open. Imagine a workflow scenario where the workflow is handed off to someone who may not be in the app itself but logged and reachable. 
It is not obvious what values are acceptable for the `-Sound` argument; I expect there will be some list of sound identifiers defined by the OS as it does not appear to be a path. It would be nice if the documentation listed those identifiers or linked to a webpage that provides this list.
It's not clear to me how to use `Remove-BTNotification `:

```
C:\Users\SkyLined>POWERSHELL New-BurntToastNotification -UniqueIdentifier 'ab' -Text 'test', 'bla'

C:\Users\SkyLined>POWERSHELL Remove-BTNotification -Tag 'ab'
Exception calling "Remove" with "2" argument(s): "Element not found. (Exception from HRESULT: 0x80070490)"
At C:\Program Files\WindowsPowerShell\Modules\BurntToast\0.7.0\BurntToast.psm1:2061 char:9
+         [Windows.UI.Notifications.ToastNotificationManager]::History. ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : Exception
```
This also does not work:
```
C:\Users\SkyLined>POWERSHELL Remove-BTNotification (New-BurntToastNotification -UniqueIdentifier 'ab' -Text 'test', 'bla2')
Exception calling "Clear" with "1" argument(s): "The parameter is incorrect.
applicationId"
At C:\Program Files\WindowsPowerShell\Modules\BurntToast\0.7.0\BurntToast.psm1:2065 char:9
+         [Windows.UI.Notifications.ToastNotificationManager]::History. ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : ArgumentException
```

Also: the source refers to a help file does not exist.
First off, I think this tool is great. Keep up the great work! As for my problem, I've been experimenting with version 0.7.0 of this tool on two Win10 machines: one physical, the other virtual. When I try running New-BurntToastNotification on my physical machine, the toast is created but the title text is encapsulated in curly braces and I get the error below. It works fine on my VM, however.

<img width="182" alt="Capture" src="https://user-images.githubusercontent.com/57235172/67982138-55f66280-fbdf-11e9-80ef-4c2d72573b7d.PNG">

```
Unable to find type [Windows.UI.Notifications.NotificationData].
At C:\Program Files\WindowsPowerShell\Modules\BurntToast\0.7.0\BurntToast.psm1:2193 char:19
+     $Toast.Data = [Windows.UI.Notifications.NotificationData]::new($D ...
+                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (Windows.UI.Noti...otificationData:TypeName) [], RuntimeException
    + FullyQualifiedErrorId : TypeNotFound
```

Here are the PS and OS build differences between the two machines:

**Physical**
- PSVersion: 5.1.14393.3053
- BuildVersion: 10.0.14393.3053 (Version 1607)

**VM**
- PSVersion: 5.1.17763.771
- BuildVersion: 10.0.17763.771 (Version 1809)

As you can see, my physical machine is running a much older version of Windows 10. I assume it has something to do with that. On the physical machine, I first tried importing the module in a PS session (without installing it, as I don't like installing modules I'm just playing around with). For the sake of troubleshooting, I then tried installing the module from the PowerShell Gallery. Both ways resulted in the error above. On my VM, I can do a temporary import of the module and it works fine.

I'd really like to be able to use 0.7.0 on Win10 1607. Is it possible?
Hi,
did you considered adding handling Hero image into New-BurntToastNotification?
Like in no time I've manged to do this. 
`function New-BurntToastNotification {
    <#
        .SYNOPSIS
        Creates and displays a Toast Notification.

        .DESCRIPTION
        The New-BurntToastNotification function creates and displays a Toast Notification on Microsoft Windows 10.

        You can specify the text and/or image displayed as well as selecting the sound that is played when the Toast Notification is displayed.

        You can optionally call the New-BurntToastNotification function with the Toast alias.

        .INPUTS
        None
            You cannot pipe input to this function.

        .OUTPUTS
        None
            New-BurntToastNotification displays the Toast Notification that is created.

        .EXAMPLE
        New-BurntToastNotification

        This command creates and displays a Toast Notification with all default values.

        .EXAMPLE
        New-BurntToastNotification -Text 'Example Script', 'The example script has run successfully.'

        This command creates and displays a Toast Notification with customized title and display text.

        .EXAMPLE
        New-BurntToastNotification -Text 'WAKE UP!' -Sound 'Alarm2'

        This command creates and displays a Toast Notification which plays a looping alarm sound and lasts longer than a default Toast.

        .EXAMPLE
        $BlogButton = New-BTButton -Content 'Open Blog' -Arguments 'https://king.geek.nz'
        New-BurntToastNotification -Text 'New Blog Post!' -Button $BlogButton

        This exmaple creates a Toast Notification with a button which will open a link to "https://king.geek.nz" when clicked.

        .EXAMPLE
        $ToastHeader = New-BTHeader -Id '001' -Title 'Stack Overflow Questions'
        New-BurntToastNotification -Text 'New Stack Overflow Question!', 'More details!' -Header $ToastHeader

        This example creates a Toast Notification which will be displayed under the header 'Stack Overflow Questions.'

        .EXAMPLE
        $Progress = New-BTProgressBar -Status 'Copying files' -Value 0.2
        New-BurntToastNotification -Text 'File copy script running', 'More details!' -ProgressBar $Progress

        This example creates a Toast Notification which will include a progress bar.

        .EXAMPLE
        New-BurntToastNotification -Text 'Professional Content', 'And gr8 spelling' -UniqueIdentifier 'Toast001'
        New-BurntToastNotification -Text 'Professional Content', 'And great spelling' -UniqueIdentifier 'Toast001'

        This example will show a toast with a spelling error, which is replaced by a second toast because they both shared a unique identifier.

        .NOTES
        I'm *really* sorry about the number of Parameter Sets. The best explanation is:

        * You cannot specify a sound and mark the toast as silent at the same time.
        * You cannot specify SnoozeAndDismiss and custom buttons at the same time.

        .LINK
        https://github.com/Windos/BurntToast/blob/master/Help/New-BurntToastNotification.md
    #>

    [alias('Toast')]
    [CmdletBinding(DefaultParameterSetName = 'Sound',
                   SupportsShouldProcess   = $true)]
    param (
        # Specifies the text to show on the Toast Notification. Up to three strings can be displayed, the first of which will be embolden as a title.
        [ValidateCount(0, 3)]
        [String[]] $Text = 'Default Notification',

        #TODO: [ValidateScript({ Test-ToastImage -Path $_ })]

        # Specifies the path to an image that will override the default image displayed with a Toast Notification.
        [String] $AppLogo,
		
        # Specifies the path to an image that will be displayed with a Toast Notification in Hero section.
        [String] $Hero,

        # Selects the sound to acompany the Toast Notification. Any 'Alarm' or 'Call' tones will automatically loop and extent the amount of time that a Toast is displayed on screen.
        #
        # Cannot be used in conjunction with the 'Silent' switch.
        [Parameter(ParameterSetName = 'Sound')]
        [Parameter(Mandatory = $true,
                   ParameterSetName = 'Sound-SnD')]
        [Parameter(Mandatory = $true,
                   ParameterSetName = 'Sound-Button')]
        [ValidateSet('Default',
                     'IM',
                     'Mail',
                     'Reminder',
                     'SMS',
                     'Alarm',
                     'Alarm2',
                     'Alarm3',
                     'Alarm4',
                     'Alarm5',
                     'Alarm6',
                     'Alarm7',
                     'Alarm8',
                     'Alarm9',
                     'Alarm10',
                     'Call',
                     'Call2',
                     'Call3',
                     'Call4',
                     'Call5',
                     'Call6',
                     'Call7',
                     'Call8',
                     'Call9',
                     'Call10')]
        [String] $Sound = 'Default',

        # Indicates that the Toast Notification will be displayed on screen without an accompanying sound.
        #
        # Cannot be used in conjunction with the 'Sound' parameter.
        [Parameter(Mandatory = $true,
                   ParameterSetName = 'Silent')]
        [Parameter(Mandatory = $true,
                   ParameterSetName = 'Silent-SnD')]
        [Parameter(Mandatory = $true,
                   ParameterSetName = 'Silent-Button')]
        [Switch] $Silent,

        # Adds a default selection box and snooze/dismiss buttons to the bottom of the Toast Notification.
        [Parameter(Mandatory = $true,
                   ParameterSetName = 'SnD')]
        [Parameter(Mandatory = $true,
                   ParameterSetName = 'Silent-SnD')]
        [Parameter(Mandatory = $true,
                   ParameterSetName = 'Sound-SnD')]
        [Switch] $SnoozeAndDismiss,

        # Allows up to five buttons to be added to the bottom of the Toast Notification. These buttons should be created using the New-BTButton function.
        [Parameter(Mandatory = $true,
                   ParameterSetName = 'Button')]
        [Parameter(Mandatory = $true,
                   ParameterSetName = 'Silent-Button')]
        [Parameter(Mandatory = $true,
                   ParameterSetName = 'Sound-Button')]
        [Microsoft.Toolkit.Uwp.Notifications.IToastButton[]] $Button,

        # Specify the Toast Header object created using the New-BTHeader function, for seperation/categorization of toasts from the same AppId.
        [Microsoft.Toolkit.Uwp.Notifications.ToastHeader] $Header,

        # Specify one or more Progress Bar object created using the New-BTProgressBar function.
        [Microsoft.Toolkit.Uwp.Notifications.AdaptiveProgressBar[]] $ProgressBar,

        # A string that uniquely identifies a toast notification. Submitting a new toast with the same identifier as a previous toast will replace the previous toast.
        #
        # This is useful when updating the progress of a process, using a progress bar, or otherwise correcting/updating the information on a toast.
        [string] $UniqueIdentifier,

        # A hashtable that binds strings to keys in a toast notification. In order to update a toast, the original toast needs to include a databinding hashtable.
        [hashtable] $DataBinding,

        # The time after which the notification is no longer relevant and should be removed from the Action Center.
        [datetime] $ExpirationTime,

        # Bypasses display to the screen and sends the notification directly to the Action Center.
        [switch] $SuppressPopup,

        # Sets the time at which Windows should consider the notification to have been created. If not specified the time at which the notification was recieved will be used.
        #
        # The time stamp affects sorting of notifications in the Action Center.
        [datetime] $CustomTimestamp
    )

    $ChildObjects = @()

    foreach ($Txt in $Text) {
        $ChildObjects += New-BTText -Text $Txt -WhatIf:$false
    }

    if ($ProgressBar) {
        foreach ($Bar in $ProgressBar) {
            $ChildObjects += $Bar
        }
    }

    if ($AppLogo) {
        $AppLogoImage = New-BTImage -Source $AppLogo -AppLogoOverride -Crop Circle -WhatIf:$false
    } else {
        $AppLogoImage = New-BTImage -AppLogoOverride -Crop Circle -WhatIf:$false
    }
	
	if ($Hero) {
        $HeroImage = New-BTImage -Source $Hero -HeroImage -WhatIf:$false
    }

    if ($Silent) {
        $Audio = New-BTAudio -Silent -WhatIf:$false
    } else {
        if ($Sound -ne 'Default') {
            if ($Sound -like 'Alarm*' -or $Sound -like 'Call*') {
                $Audio = New-BTAudio -Source "ms-winsoundevent:Notification.Looping.$Sound" -Loop -WhatIf:$false
                $Long = $True
            } else {
                $Audio = New-BTAudio -Source "ms-winsoundevent:Notification.$Sound" -WhatIf:$false
            }
        }
    }

    $Binding = New-BTBinding -Children $ChildObjects -AppLogoOverride $AppLogoImage -HeroImage $HeroImage -WhatIf:$false
    $Visual = New-BTVisual -BindingGeneric $Binding -WhatIf:$false

    $ContentSplat = @{'Audio' = $Audio
        'Visual' = $Visual
    }

    if ($Long) {
        $ContentSplat.Add('Duration', [Microsoft.Toolkit.Uwp.Notifications.ToastDuration]::Long)
    }

    if ($SnoozeAndDismiss) {
        $ContentSplat.Add('Actions', (New-BTAction -SnoozeAndDismiss -WhatIf:$false))
    } elseif ($Button) {
        $ContentSplat.Add('Actions', (New-BTAction -Buttons $Button -WhatIf:$false))
    }

    if ($Header) {
        $ContentSplat.Add('Header', $Header)
    }

    if ($CustomTimestamp) {
        $ContentSplat.Add('CustomTimestamp', $CustomTimestamp)
    }

    $Content = New-BTContent @ContentSplat -WhatIf:$false

    $ToastSplat = @{
        Content = $Content
        AppId = $Script:Config.AppId
    }

    if ($UniqueIdentifier) {
        $ToastSplat.Add('UniqueIdentifier', $UniqueIdentifier)
    }

    if ($ExpirationTime) {
        $ToastSplat.Add('ExpirationTime', $ExpirationTime)
    }

    if ($SuppressPopup.IsPresent) {
        $ToastSplat.Add('SuppressPopup', $true)
    }

    if ($DataBinding) {
        $ToastSplat.Add('DataBinding', $DataBinding)
    }

    if($PSCmdlet.ShouldProcess( "submitting: $($Content.GetContent())" )) {
        Submit-BTNotification @ToastSplat
    }
}`

Cheers
The documentation on many functions in this module, especially around the examples, is lacking.

If you've got the documentation bug, please help!
I have been successful in using all of the built-in windows options via "New-BTAudio -Source" but no custom audio is working using "New-BTAudio -Path". I have tried mp3 and wav files. I don't get an error of any sort, the notification simply appears but the default notification sound is played instead of the custome file specified.
Hey there, 

I'm digging into this awesome tool at the moment and I came around a bug.

I'm triggering a reminder, that the device hasn't rebooted for a specifc time with a Snooze Button.
The first time I fire up the Notification I have a good presentation of my toast:

![image](https://user-images.githubusercontent.com/34126314/61295240-e008ef80-a7d7-11e9-90d5-41d14a0ae903.png)


Then I press the Snooze Button and wait for it to appear again. This time the text has curly braces around the text:

![image](https://user-images.githubusercontent.com/34126314/61295758-1135ef80-a7d9-11e9-8754-9f2e8bf4508f.png)

I am using Windows 10 1903 for my tests but it also happens on 1809. 

Here is my code:

[int]$Uptime_hours = ((get-date) - (gcim Win32_OperatingSystem).LastBootUpTime).TotalHours

    if ($Uptime_hours -gt 95)
    {

    $Text1 = New-BTText -Content "It's time for a reboot" -Style Header
    $Text2 = New-BTText -Content "Your device is running for: $Uptime_Hours hours" -Style Body
    $Image1 = New-BTImage -Source 'C:\Temp\Images\BurntToast.png' -AppLogoOverride -Crop Circle

    $Binding = New-BTBinding -Children $Text1, $Text2 -AppLogoOverride $Image1
    $Visual = New-BTVisual -BindingGeneric $Binding


    $Button1 = New-BTButton -Snooze -Content "Snooze" -Id 'Toast_Uptime_Snooze'
    $Action1 = New-BTAction -Buttons $Button1
    $Content = New-BTContent -Visual $Visual -Actions $Action1


    Submit-BTNotification -Content $Content -UniqueIdentifier "Toast_Uptime"
    }
I am having trouble figuring this one out.  I see this is supposed to be able to be bound but with a lack of example I have been unable to figure out just how to do that.  I have a dropdown with 4 time options, and want to bind the output to the snooze option.

Cheers!