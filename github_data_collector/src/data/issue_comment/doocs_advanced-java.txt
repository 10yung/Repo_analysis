...or please make it easy to use with Google Translate:

![Screenshot_2019-05-14 Google Translate(1)](https://user-images.githubusercontent.com/2405157/57704863-4c3d6a80-7652-11e9-948c-fbcabc0eb458.png)

# 英雄招募

## 成为 [Doocs](https://github.com/doocs) 项目维护者

本项目 [advanced-java](https://github.com/doocs/advanced-java)，包括 [Doocs](https://github.com/doocs) 开源组织下的所有项目，都欢迎各位朋友参与完善。

如果你提交的内容有价值，且具备规范性，将有机会提升为项目的维护者，直接参与项目的 review、merge 等维护工作，提交内容时也可以**直接** `push` 到 [doocs/advanced-java](https://github.com/doocs/advanced-java)  主分支 master 下，无须提交 PR 等待 review。

目前 advanced-java 只有 [yanglbme](https://github.com/doocs/advanced-java) 一人维护，很欢迎你们加入，与 yanglbme 一起并肩作战。当然，Doocs 下其它所有项目，如 leetcode、technical-books 等同样欢迎。

![image](https://user-images.githubusercontent.com/21008209/56127063-f1f7ae00-5fae-11e9-9918-b940b2948d7c.png)

## 我要怎么做才能成为 Doocs 项目的维护者？
- 提交的内容必须有价值，且有规范性。规范性包括：文件命名、Git 提交信息、文件存放位置等等，具体要求可以参考[提交注意事项](https://github.com/doocs/advanced-java/blob/master/docs/from-readers/doocs-advanced-java-attention.md)。当然这里提到的注意事项也普遍适用于 Doocs 其它项目。
- 保持一定的活跃度。Doocs 不能因为你的一次提交就直接把你加入到开源项目维护者中，希望你对开源项目有更多的参与。这样后面 Doocs 才能放心把项目交予你维护。
- 细心，注重审美，有代码或文档洁癖。

## 只限定目前 Doocs 的那几个项目吗？
**绝不限于 Doocs 当前的项目**。只要你有好的 idea，想创建新的项目，并作为项目的主维护者，都是可以的。你甚至可以把你个人名义下的项目 transfer 到 Doocs 开源组织下进行维护。前提是，你的项目符合 Doocs 的定位，确实能在一定程度上帮到其它朋友，并且项目规范、有较好的文档结构和说明。

...

Doocs 期待你们的加入 :)

## 贡献者列表
感谢以下所有为开源组织 [Doocs](https://github.com/doocs) 做出贡献的朋友，没有你们的参与，开源组织不可能做好。

![contributors](https://opencollective.com/doocs/contributors.svg?width=890&button=false)

诚如文章所说 为避免数据不一致 给出的思路是:先删除缓存，再更新数据库
那么如果现在有两个线程 一个A更新 一个B读取,当A线程在更新的时候先把缓存给删掉了然后去做更新数据库的时候,B线程来读取数据的时候发现缓存没有数据(被A给删掉了)然后去读取数据库把数据读取出来放到了缓存中,这个时候A线程再去做更新数据库的操作...那么好戏来了...数据库和缓存真的不一致了. 请问要如何解决呢?
可以增加一个落地项目介绍思考环节，可以把遇到的相关组件的使用心得做分享
为什么这么少内容会 这么多赞 怎么做到的
Please add the images with English labels. Like for this [https://github.com/doocs/advanced-java/blob/master/images/mq-1.png](url). 
# 未来之路
> 来自 @mercyblitz (小马哥)

## 懂得取舍
- [ ] 挑选书籍
- [ ] 学习源码
- [ ] 职业规划

## 学会判断
- [ ] 使用场景判断
- [ ] 发展趋势判断
- [ ] 可行性判断

## 学习方法
- [ ] 多看（代码、规范、论文）
- [ ] 多写（模仿、比较、超越）
- [ ] 多思考（正向、逆向、跳跃）
- [ ] 少废话（吹牛、装逼、叫大哥）
我个人平时会负责一些技术面试。面试过程中，经常碰到那些针对面试精心准备的人，比如，消息队列方面，候选人差不多都能答上这些标准答案。但是，这些答案不是我想听到的，我甚至曾经告诉面试者：

我不想听你看来的这些东西，我想听你思考的东西，你们具体在什么场景下用的MQ，如果不用MQ，你的项目又怎么设计？你思考一下你的XX项目，中间还有没有哪一块功能可以用上MQ？为什么？如果用了，你猜一下生产上可能出现什么故障？怎么解决？既然你知道他的作用是“解耦、消峰、异步”，那么在你简历中提到的XXX技术中（比如nginx，或者任何知识点），分别可以通过什么手段去做这三个目的？你在Java/Android/IOS中还见过类似的组件或者机制吗？他们怎么做的？为什么？你怎么看如何解决MQ中消息重复的问题？有必要对所有的消费者都做幂等吗？为什么？幂等在你们xx项目中，具体怎么实现。还有哪些情况你碰到过“消息重复”类似的问题？BASE理论里，如果涉及到MQ的场景，怎么设计？除了你说的这种设计，还有哪种设计？在你的xxx项目中应该怎么设计？为什么？

前面说了一大段，其实我想说的是，最好加上一个章节，告诉这些来取面经的人：哪怕你看完了这上面的内容，你仍然需要在工作中时时刻刻去思考和印证。

这些面经可以是你学习的目录，但是不是你学习的终点，对于优秀的公司和面试官来说，仅限于这些内容，收效甚微。
## 在线阅读
为了大家有一个更好的阅读体验，此项目已发布在 [GitHub Page](https://doocs.github.io/advanced-java) 上。使用国内网络的朋友也可以访问 [Gitee Page](https://doocs.gitee.io/advanced-java)，加载速度更快。
![image](https://user-images.githubusercontent.com/21008209/56121133-1600c280-5fa2-11e9-851c-204b59dad8b9.png)

![image](https://user-images.githubusercontent.com/21008209/56121091-01bcc580-5fa2-11e9-99a2-e7047e329e71.png)


## 项目动态
欢迎 **star** 关注本项目，你的关注会激励我一直坚持抽空补充、完善、修正项目内容；也欢迎在 [Issues](https://github.com/doocs/advanced-java/issues/) 讨论区交流，交流互动可以让这个项目变得更好。

## 转载说明
目前网上出现很多直接拷贝他人文章而不注明出处的，其实是完全无视他人劳动成果。如果你有转载本仓库文章的需求，请微信联系 YLB0109 授权转载，禁止私自转载。