I've checked Stackoverflow and blogs etc but havent been able to find an answer so wanted to ask for your assistance here in terms of whether the Exoplayer API can handle this use case:

Users of our app (~ 1M active) will be listening to podcasts. We need to play ads at designated intervals during playback. These intervals, will vary by user. But for example it could be the following scenario:

"ad markers" in milliseconds - [30000, 60000, 115000] 
(These ad marker "play the ad now" time points are stored in an array which we embed directly into the ID3 metadata in each MP3 file the user selects to play).

1. user starts playing "audio track 1" (MP3).
2. at 30000ms, we will pause "audio track 1", play an audio ad (MP3) for the user via a URL
3. when the ad finishes, we need to resume playback of audio from (1)
4. at 60000ms,  we will pause "audio track 1", play an audio ad, then resume playback of audio
etc...

How can we monitor the playback of "audio track 1" to know that 30000ms have elapsed, and so now its time to play the "ad" MP3. Do we need to maintain our own separate Timer in the Android app to manage this ? Or is there an API of some sort in the Exoplayer 2 API to help this use case ? 

Also, can we "insert" this ad MP3 (at runtime) into the currently playing "audio track 1" ? Or do we need to instantiate 2 x instances of Exoplayer ? (ie. one for the "audio track 1" playback and a second for the "ad" playback). Or can we / should we use AdsMediaSource  ? 

this might be what we are after, however the code snippets are minimal and without context to understand how to properly implement - https://stackoverflow.com/a/49951225/2409057

Really appreciate your assistance with this.

### Issue description
In case of specific DRM-protected live DASH streams, after some seconds playback aborts with below Crypto exception.

```
com.google.android.exoplayer2.ExoPlaybackException: android.media.MediaCodec$CryptoException: Unknown Error
        at com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.feedInputBuffer(MediaCodecRenderer.java:1025)
        at com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.render(MediaCodecRenderer.java:664)
```

### Reproduction steps
The exception only occurs on low-end FireTV models right after loading the stream.

### Link to test content
### A full bug report captured from the device
<sent via email>

### Version of ExoPlayer being used:  2.9.6
(not Amazon's fork)

### Device(s) and version(s) of Android being used
FireTV Stick Generation 2 - FireOS 5.2.6.2 (Android 5.1)

Thanks for your help in advance!

I am trying to loop small videos that are 15 seconds to 1:00 min long. The player is set to repeat the video that is selected. The video itself loop works fine, but the audio drops for a split second at the beginning of the loop. For example a video of waves crashing across the beach, the video loops perfectly but the audio stops and you witness a pause in the sound then it goes back fine alone with the video. Videos are in 1080p Mp4, I have been trying to find the issue here but all the posts seem to be a little different than what I am looking for, if a fix or issue has been addressed already, just point me in the right direction to read over the fix. 

I'm using a SimpleExoPlayer instance to play videos with audio.
I'm playing video files from local storage.
Basic stuff, just like the Hello World setup (https://exoplayer.dev/hello-world.html)
The issue I have is that the first frame of the video is rendered before I call exoPlayer.setPlayWhenReady(true).
This, combined with audio latency, creates a small freeze on the first frame of each video when playing back to back videos.
I was able to modify MediaCodecVideoRenderer to avoid this, but my question is if there is a setting to avoid the first frame being rendered before exoPlayer.setPlayWhenReady(true) without modifying the code?
If there is no way I think this should be improved.
I'm using ExoPlayer `2.10.8`. When I set a bad subtitle, playback fails. Is there a way to make subtitles not do that? Exception below. 

Also, is it possible to set subtitles on the fly without restarting the player?

Thanks.

```
E/ExoPlayerImplInternal: Playback error.
    com.google.android.exoplayer2.ExoPlaybackException: com.google.android.exoplayer2.text.SubtitleDecoderException: com.google.android.exoplayer2.ParserException: Expected WEBVTT. Got   <!DOCTYPE html>
        at com.google.android.exoplayer2.text.TextRenderer.render(TextRenderer.java:171)
        at com.google.android.exoplayer2.ExoPlayerImplInternal.doSomeWork(ExoPlayerImplInternal.java:575)
        at com.google.android.exoplayer2.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:326)
        at android.os.Handler.dispatchMessage(Handler.java:98)
        at android.os.Looper.loop(Looper.java:154)
        at android.os.HandlerThread.run(HandlerThread.java:61)
     Caused by: com.google.android.exoplayer2.text.SubtitleDecoderException: com.google.android.exoplayer2.ParserException: Expected WEBVTT. Got   <!DOCTYPE html>
        at com.google.android.exoplayer2.text.webvtt.WebvttDecoder.decode(WebvttDecoder.java:69)
        at com.google.android.exoplayer2.text.webvtt.WebvttDecoder.decode(WebvttDecoder.java:31)
        at com.google.android.exoplayer2.text.SimpleSubtitleDecoder.decode(SimpleSubtitleDecoder.java:78)
        at com.google.android.exoplayer2.text.SimpleSubtitleDecoder.decode(SimpleSubtitleDecoder.java:26)
        at com.google.android.exoplayer2.decoder.SimpleDecoder.decode(SimpleDecoder.java:224)
        at com.google.android.exoplayer2.decoder.SimpleDecoder.run(SimpleDecoder.java:189)
        at com.google.android.exoplayer2.decoder.SimpleDecoder.access$000(SimpleDecoder.java:25)
        at com.google.android.exoplayer2.decoder.SimpleDecoder$1.run(SimpleDecoder.java:67)
     Caused by: com.google.android.exoplayer2.ParserException: Expected WEBVTT. Got   <!DOCTYPE html>
        at com.google.android.exoplayer2.text.webvtt.WebvttParserUtil.validateWebvttHeaderLine(WebvttParserUtil.java:44)
        at com.google.android.exoplayer2.text.webvtt.WebvttDecoder.decode(WebvttDecoder.java:67)
        at com.google.android.exoplayer2.text.webvtt.WebvttDecoder.decode(WebvttDecoder.java:31) 
        at com.google.android.exoplayer2.text.SimpleSubtitleDecoder.decode(SimpleSubtitleDecoder.java:78) 
        at com.google.android.exoplayer2.text.SimpleSubtitleDecoder.decode(SimpleSubtitleDecoder.java:26) 
        at com.google.android.exoplayer2.decoder.SimpleDecoder.decode(SimpleDecoder.java:224) 
        at com.google.android.exoplayer2.decoder.SimpleDecoder.run(SimpleDecoder.java:189) 
        at com.google.android.exoplayer2.decoder.SimpleDecoder.access$000(SimpleDecoder.java:25) 
        at com.google.android.exoplayer2.decoder.SimpleDecoder$1.run(SimpleDecoder.java:67) 
```
### [REQUIRED] Issue description
We experience occasional exceptions with the stack trace provided below: 
Caused by: java.lang.IndexOutOfBoundsException: index = -1; start = 0; limit = 5
at com.google.android.exoplayer2.util.Assertions.checkIndex(SourceFile:1)
at com.google.android.exoplayer2.source.dash.DashMediaSource$DashTimeline.getPeriod(SourceFile:1)
at com.google.android.exoplayer2.Timeline.getPeriodByUid(SourceFile:1)
at com.google.android.exoplayer2.MediaPeriodQueue.getMediaPeriodInfo(SourceFile:1)
at com.google.android.exoplayer2.MediaPeriodQueue.getFirstMediaPeriodInfo(SourceFile:1)
at com.google.android.exoplayer2.MediaPeriodQueue.getNextMediaPeriodInfo(SourceFile:2)
at com.google.android.exoplayer2.ExoPlayerImplInternal.maybeUpdateLoadingPeriod(SourceFile:3)
at com.google.android.exoplayer2.ExoPlayerImplInternal.updatePeriods(SourceFile:4)
at com.google.android.exoplayer2.ExoPlayerImplInternal.doSomeWork(SourceFile:2)

### [REQUIRED] Reproduction steps
The issue is reproducible in production and we failed to reproduce in development so far.
What seems to be common to all the cases where it happened is that it happens during "player restart" sequence.
More specifically the player is playing DASH content and at some point ExoPlayer.stop() is called and then ExoPlayer.prepare() with the MediaSource created with the same MPD URI as was used before.


### [REQUIRED] Link to test content
The content which we are using is not playable in the demo app as it requires proprietary DRM mechanism.

### [REQUIRED] A full bug report captured from the device
As this happens only in production we have no way to provide this.

### [REQUIRED] Version of ExoPlayer being used
2.9.4

### [REQUIRED] Device(s) and version(s) of Android being used
Proprietary Android device. Android v8.0.0
### [REQUIRED] Issue description
I have a crash when I am trying to cast a HLS video from my app to a chromecast. I use the ExoPlayer cast extension.

The code is called from a dynamic module (`apply plugin: com.android.dynamic-feature` can be found in the module's build.gradle).

Here is the [stackoverflow question](https://stackoverflow.com/questions/59755839/how-to-cast-a-video-using-exoplayer-cast-extension-from-a-dynamic-feature-module)

### [REQUIRED] Reproduction steps
When the user click on the cast button in my app and then on the device they want to cast on in the dialog, the app crash systematically. 
I am only able to reproduce the crash on my app but not on the demo app...

### [REQUIRED] Link to test content
When trying to cast this video : https://www.brut.media/fr/news/bataclan-les-peres-d-un-terroriste-et-d-une-victime-racontent-a097d1d0-8357-4360-af8d-64051219b8a8

### [REQUIRED] A full bug report captured from the device
[bugreport-sargo-QQ1A.191205.011-2020-01-16-10-56-15.zip](https://github.com/google/ExoPlayer/files/4070475/bugreport-sargo-QQ1A.191205.011-2020-01-16-10-56-15.zip)


### [REQUIRED] Version of ExoPlayer being used
Version 2.11.1

### [REQUIRED] Device(s) and version(s) of Android being used
Pixel 3 - Android 10
Pixel 3a - Android 10
Crash doesn't happen on Samsung S9 - Android 9

Might be a dumb question: Why `DummySurface` is created on a separate thread?

I am asking this because we've been using `Codec#setOutputSurface` and the producation failure rate is really high (around 1%). And the only difference between our project and `Exoplayer` regarding how we use `Codec#setOutputSurface` is as follows.

- `Exoplayer` uses a `DummySurface` created on a separate thread.
- We use a general `Surface` created on the same thread.

Is there any theory behind this? Thank you!
### **Description**

Hi
I have 1 video (.mp4), 2 audio files (.aac/.mp3) and 3 subtitle files (.vtt).

**What do i want ?**
**_for example, the default language of the video is English. When I change the sound the video should resume and the sound of the video dubbing should be in French. As in netflix application._**

I am trying to do this with the following code.

```
Format format_audio_en = Format.createAudioSampleFormat("en", MimeTypes.AUDIO_AAC, null, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE, 44100, null, null, C.SELECTION_FLAG_DEFAULT, "en");
Format format_audio_de = Format.createAudioSampleFormat("de", MimeTypes.AUDIO_AAC, null, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE, 44100, null, null, 0, "de");

SingleSampleMediaSource audio_source_de = new SingleSampleMediaSource.Factory(dataSourceFactory).createMediaSource(Uri.parse("http://*******/sound_de.aac"), format_audio_de, C.TIME_UNSET);
SingleSampleMediaSource audio_source_en = new SingleSampleMediaSource.Factory(dataSourceFactory).createMediaSource(Uri.parse("http://*******/sound_en.aac"), format_audio_en, C.TIME_UNSET);

MediaSource videoSource = buildMediaSource(uri, dataSourceFactory);

MediaSource[] mediaSourceList = new MediaSource[3];
mediaSourceList[0] = videoSource;
mediaSourceList[1] = audio_source_en ;
mediaSourceList[2] = audio_source_de ;
    

MergingMediaSource mergingMediaSource = new MergingMediaSource(mediaSourceList);

player.setPlayWhenReady(playWhenReady);
player.seekTo(playbackPosition);
player.prepare(mergingMediaSource, false, false);


```

But when I use it this way, I get an error.

```
E/ExoPlayerImplInternal: Internal runtime error.
    java.lang.IllegalStateException: Buffer too small (524288 < 2241155)
        at com.google.android.exoplayer2.decoder.DecoderInputBuffer.createReplacementByteBuffer(DecoderInputBuffer.java:167)
        at com.google.android.exoplayer2.decoder.DecoderInputBuffer.ensureSpaceForWrite(DecoderInputBuffer.java:117)
        at com.google.android.exoplayer2.source.SingleSampleMediaPeriod$SampleStreamImpl.readData(SingleSampleMediaPeriod.java:334)
        at com.google.android.exoplayer2.BaseRenderer.readSource(BaseRenderer.java:308)
        at com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.feedInputBuffer(MediaCodecRenderer.java:1028)
        at com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.render(MediaCodecRenderer.java:658)
        at com.google.android.exoplayer2.ExoPlayerImplInternal.doSomeWork(ExoPlayerImplInternal.java:575)
        at com.google.android.exoplayer2.ExoPlayerImplInternal.handleMessage(ExoPlayerImplInternal.java:326)
        at android.os.Handler.dispatchMessage(Handler.java:98)
        at android.os.Looper.loop(Looper.java:146)
        at android.os.HandlerThread.run(HandlerThread.java:61)
```

I do this with HLS. [Elephants Dream Hls Video](https://wowzaec2demo.streamlock.net/vod-multitrack/_definst_/smil:ElephantsDream/ElephantsDream.smil/playlist.m3u8) have two sound (english and spanish)
I can easily change the dubbing sound when I use the following code.
However, I have mp4 (video) and mp3 / aac (audio) files.
```
 trackSelector.setParameters(trackSelector.getParameters().buildUpon().setMaxVideoSizeSd()
.setPreferredTextLanguage(subTextLanguage)
.setPreferredAudioLanguage("<en or es>").build());
```
### **I looked at these**

#4600 #4698

### **How can I do what I want using mp4 (video) and mp3 (audio) files?**

I hope you can help, thanks







