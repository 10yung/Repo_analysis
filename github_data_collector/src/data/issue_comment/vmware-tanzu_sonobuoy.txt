**What this PR does / why we need it**:
If we are to support Windows nodes, we want to avoid using bash scripts
so that we don't have to duplicate the logic and translate it into a
powershell script.

Changes include:
 - remove the run_master.sh script and instead rely on the Dockerfile
to have the proper aggregator invocation. This way, regardless of the
underlying OS, the image knows the right command to use.
 - remove the script for running the worker in single-node mode. This
only served to run Sonobuoy and then sleep for some amount of time to
avoid restarting the container. Instead, a flag was added to the
single-node command and golang handles the sleep functionality now. By
default, it sleeps 0 seconds, consistent with the existing logic.
 - Slight modifications to command structure so that the subcommands
can use the cobra RunE method and logging can be done at the top level
only. This helps avoid using `os.Exit` which hinders testability.

**Which issue(s) this PR fixes**
xref #732

**Special notes for your reviewer**:
We need to pause before merging this to make sure we recognize the compatibility issues this may cause (if any).

The CLI will not be specifying the command in the YAML anymore so:
 - new CLI targeting an old Sonobuoy version will not specify it in the YAML so it will rely on the Dockerfile which will call the script. Since it is an old image, it will have the script and things should be fine (assuming that script is OK). The aggregator will generate the YAML for the workers so its logic should be consistent.
 - old CLI with new Sonobuoy version will just have the command specified in the YAML so things should be fine for the aggregator. The new aggregator will the create the workers appropriately.

Am I missing a compatibility case of concern?

**Release note**:
```
N/A
```

**What this PR does / why we need it**:
First draft + tinkering of building Sonobuoy to run on Windows nodes.

**Which issue(s) this PR fixes**
- Fixes #732 

**Special notes for your reviewer**:
I'll be just using this as a reference as I put up smaller PRs that fix misc issues I ran into.

This will add anew "Plugins" page on the Sonobuoy landing page.

Signed-off-by: jonasrosland <jrosland@vmware.com>
**What this PR does / why we need it**:

TODO

**Which issue(s) this PR fixes**
- Fixes #1064

**Special notes for your reviewer**:

Draft PR, as I want this to go out for initial review, as I have little idea how to fix that "properly". Will improve the description etc tomorrow. Feel free to push additional fixes if needed.

**Release note**:
```
Prevent CPU drain when streaming logs from pods, when connection to API server breaks
```

Follow up from: https://github.com/vmware-tanzu/sonobuoy/pull/1066#pullrequestreview-339985717

The `--systemd-logs-flag` flag was deprecated in favour of `--systemd-logs-image`. The deprecated flag needs to be removed.
**What steps did you take and what happened:**
After running even single test, e.g.: 
```
sonobuoy run --e2e-focus 'Aggregator Should be able to support the 1.10 Sample API Server using the current Aggregator'
```

And then leaving `sonobuoy logs -f` running for (in my case 2h), the process starts consuming 100% CPU of a single core.


**What did you expect to happen:**
`sonobuoy` to not trigger fans in my laptop :)

**Anything else you would like to add:**
`strace` doesn't say much, didn't try `gdb` or anything:
```
$ sudo strace -p 2554549
strace: Process 2554549 attached
futex(0x555c4acd9468, FUTEX_WAIT_PRIVATE, 0, NULL) = 0
futex(0x555c4acd9468, FUTEX_WAIT_PRIVATE, 0, NULL) = 0
futex(0x555c4acd9468, FUTEX_WAIT_PRIVATE, 0, NULL
```

If you have some suggestions for debugging, please let me know.

**Environment:**

- Sonobuoy version: 
```
$ sonobuoy version --kubeconfig local-testing/kubeconfig 
Sonobuoy Version: v0.17.0
MinimumKubeVersion: 1.15.0
MaximumKubeVersion: 1.17.99
GitSHA: 
API Version:  v1.17.0
```
- Kubernetes version: (use `kubectl version`):
```
Client Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.0", GitCommit:"70132b0f130acc0bed193d9ba59dd186f0e634cf", GitTreeState:"clean", BuildDate:"2019-12-07T21:20:10Z", GoVersion:"go1.13.4", Compiler:"gc", Platform:"linux/amd64"}
Server Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.0", GitCommit:"70132b0f130acc0bed193d9ba59dd186f0e634cf", GitTreeState:"clean", BuildDate:"2019-12-07T21:12:17Z", GoVersion:"go1.13.4", Compiler:"gc", Platform:"linux/amd64"}
```
- Kubernetes installer & version: https://github.com/flexkube/libflexkube
- Cloud provider or hardware configuration: VirtualBox with Vagrant
- OS (e.g. from `/etc/os-release`): 
Kubernetes nodes:
```
core@controller01 ~ $ cat /etc/os-release 
NAME="Flatcar Container Linux by Kinvolk"
ID=flatcar
ID_LIKE=coreos
VERSION=2345.99.1
VERSION_ID=2345.99.1
BUILD_ID=2019-12-19-0008
PRETTY_NAME="Flatcar Container Linux by Kinvolk 2345.99.1 (Rhyolite)"
ANSI_COLOR="38;5;75"
HOME_URL="https://flatcar-linux.org/"
BUG_REPORT_URL="https://issues.flatcar-linux.org"
FLATCAR_BOARD="amd64-usr"
```
Host (where `sonobuoy` runs):
```
$ cat /etc/os-release 
NAME="Arch Linux"
PRETTY_NAME="Arch Linux"
ID=arch
BUILD_ID=rolling
ANSI_COLOR="0;36"
HOME_URL="https://www.archlinux.org/"
DOCUMENTATION_URL="https://wiki.archlinux.org/"
SUPPORT_URL="https://bbs.archlinux.org/"
BUG_REPORT_URL="https://bugs.archlinux.org/"
LOGO=archlinux
```
- Sonobuoy tarball (which contains * below)

There is a `download` subcommand under `images`. The purpose of this command is to download the images for the E2E plugin into a tarball. However, this won't work for our recent releases as a number of the images included in the E2E images list are unreachable. They either don't exist or require authentication. These images have been kept in the list to maintain consistency with upstream however Sonobuoy can't do anything with them. They also cause the `download` command to always fail as we can't exclude them.

Given that we have had no feedback from users regarding this, should we remove the `download` command? Or should we update our images list to exclude images that can't be accessed by Sonobuoy?
Global `genflags` variable got reused on this branch and caused the problem referenced here.

We shouldnt need the globals and may need to just clean up a bit of the code.

----
Thanks to @zubron I found the tests were failing because of some issue with the sonobuoy gen logic; still to be fixed but `cd tests/integration && sonobuoy gen -p testImage/yaml/job-junit-passing-singlefile.yaml` will output the default plugins _and_ the specified plugin. This means that it is trying to run a full conformance run which causes the tests to time out.

_Originally posted by @johnSchnake in https://github.com/vmware-tanzu/sonobuoy/pull/1051#issuecomment-566209250_
**Describe the solution you'd like**
Enable Sonobuoy to meaningfully post-process output from `go test ./... --json` so that the test results are viewable with `sonobuoy results $tarfile`

**Anything else you would like to add:**
JSON is already easy to parse, Go is a pretty normal default language for users in the k8s world. Seems like an intuitive thing to support that wouldn't take much effort.

**Describe the solution you'd like**
Ticket is for the evaluation (and resolution if simple enough) of the output flags for the sonobuoy results command.

For now we support a few modes; `sonobuoy results` defaults to `report` mode but detailed and dump are also allowed.

Report and dump are pretty straightforward since they generate a human readable report or dump the raw results file respectively.

The `detailed` mode is the one in question for me. When we have tests we end up outputting a stream of `json` objects. When we have a file (like for the systemd logs plugin) we print the filename and the file contents.

We should probably just split this up into more predictable behavior:
 `--mode json` which will print a stream of json objects; if they are files then we probably wouldn't print the raw files in that mode.
  `--mode files` which would print the filenames/contents
  and maybe `--mode file-contents` which would be a shorthand for `--mode files --skip-prefix`

**Anything else you would like to add:**
Open to other ideas/discussion on this ticket before implementing. But right now the `--mode=detailed` is not very descriptive and to have to use `--mode=detailed --skip-prefix` to get just the file contents seems unintuitive and clunky.


**Environment:**

- Sonobuoy version: 
- Kubernetes version: (use `kubectl version`):
- Kubernetes installer & version:
- Cloud provider or hardware configuration:
- OS (e.g. from `/etc/os-release`): 

