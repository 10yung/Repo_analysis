This requires some explanation. IIUC you can specify which runners to run with `-r`, but pronto will actually use this to `require` a certain runner.

I wrote a `ruby-standardrb` runner https://github.com/julianrubisch/pronto-standardrb (see respective PR #364) basically only by subclassing `pronto-rubocop` (because that's what `standard` is, an opinionated wrapper around rubocop).

Now of course in that implementation I need to `require` the rubocop runner: https://github.com/julianrubisch/pronto-standardrb/blob/c5669db79609f4fba40ba04362fe37130ea0f930/lib/pronto/standardrb.rb#L3

which will also load (and thus, run) it and lead to conflicting outputs since the base rubocop configuration is quite different from `standard`. 

so I could basically copy-paste everything from `pronto-rubocop` and not require it at all, but being all tuned to DRY implementations this really makes me want to tear my hair out...

---

TL;DR: Runners cannot be easily subclassed.
Bitbucket paginates api response in v2 and gets only 10 comments if there are more than 10 comments than a duplicate comment gets posted. 
Hi!

We have a project which have a lot (~10k) of data files. Those files are updated from time to time but they are not supposed to be evaluated by pronto. We've added a `.pronto.yml` and added the directory to be excluded, however pronto still gets stuck because it seems to be trying to process all diffs coming from this directory before evaluating the exclude. This makes it so that the only way to commit and push new files is to temporarily disable pronto. Is there a way to make pronto ignore these files during the diff phase?
```
$ pronto run -c develop
Traceback (most recent call last):
	21: from /.../.rbenv/versions/2.5.3/bin/pronto:23:in `<main>'
	20: from /.../.rbenv/versions/2.5.3/bin/pronto:23:in `load'
	19: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/bin/pronto:6:in `<top (required)>'
	18: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/thor-0.20.3/lib/thor/base.rb:466:in `start'
	17: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/thor-0.20.3/lib/thor.rb:387:in `dispatch'
	16: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/thor-0.20.3/lib/thor/invocation.rb:126:in `invoke_command'
	15: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/thor-0.20.3/lib/thor/command.rb:27:in `run'
	14: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/cli.rb:64:in `run'
	13: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/cli.rb:64:in `chdir'
	12: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/cli.rb:66:in `block in run'
	11: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto.rb:64:in `run'
	10: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/runners.rb:13:in `run'
	 9: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/runners.rb:13:in `each'
	 8: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/runners.rb:20:in `block in run'
	 7: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-brakeman-0.10.0/lib/pronto/brakeman.rb:7:in `run'
	 6: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/runner.rb:27:in `ruby_patches'
	 5: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/runner.rb:27:in `select'
	 4: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/runner.rb:27:in `block in ruby_patches'
	 3: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/runner.rb:31:in `ruby_file?'
	 2: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/runner.rb:50:in `ruby_executable?'
	 1: from /.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/runner.rb:50:in `open'
/.../.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/pronto-0.10.0/lib/pronto/runner.rb:50:in `initialize': No such file or directory @ rb_sysopen - /.../work/test-proj/.git/worktrees/Gemfile (Errno::ENOENT)
```

I guess that `Pronto::Git::Patch#new_file_full_path` may return unexpected value for `Pronto::Runner`.

```
$ cd /tmp
$ git clone https://github.com/prontolabs/pronto.git
$ cd pronto
$ bundle
$ git worktree add ../t
$ echo '# test' >> Gemfile
$ echo '# test' >> ../t/Gemfile
$ bundle exec ruby -Ilib -rpronto -e 'Pronto::Git::Repository.new(".").diff(:unstaged).each {|p| p p.new_file_full_path }'
#<Pathname:/tmp/pronto/Gemfile>
$ bundle exec ruby -Ilib -rpronto -e 'Dir.chdir("../t"); Pronto::Git::Repository.new(".").diff(:unstaged).each {|p| p p.new_file_full_path }'
#<Pathname:/tmp/pronto/.git/worktrees/Gemfile>
```

When I apply the following patch, `new_file_full_path` returns `#<Pathname:/tmp/t/Gemfile>`.

```diff
--- a/lib/pronto/git/repository.rb
+++ b/lib/pronto/git/repository.rb
@@ -46,7 +46,7 @@ def commits_until(sha)
       end

       def path
-        Pathname.new(@repo.path).parent
+        Pathname.new(@repo.workdir)
       end

       def blame(path, lineno)
```


Is it possible to run pronto with its runner without path by only being inside a git repository? For only the third and last (out of three) commands works.

```
root@27dc4bb0fd5d:/# ls
app  bin  boot	dev  etc  home	lib  lib64  media  mnt	opt  proc  root  run  sbin  srv  sys  tmp  usr	var
root@27dc4bb0fd5d:/# pronto run app
root@27dc4bb0fd5d:/# cd app
root@27dc4bb0fd5d:/app# ls
Capfile		  README.md	   cat.diff	  docker			    docker-compose.xxx.yml			  lib			postcss.config.js    spec
Dockerfile	  Rakefile	   config	  docker-compose-ci.yml		    docker-compose.override-asset-production.yml  local_categories.txt	prod_categories.txt  tmp
Dockerfile-MySQL  app		   config.ru	  docker-compose.xxx-test.yml  docker-compose.override.yml			  log			public		     vendor
Gemfile		  babel.config.js  config_volume  docker-compose.xxx.yml	    docker-compose.production.yml		  node_modules		schema.graphql	     yarn.lock
Gemfile.lock	  bin		   db		  docker-compose.xxx-test.yml  docker-compose.yml				  package.json		script
root@27dc4bb0fd5d:/app# pronto run
root@27dc4bb0fd5d:/app# pronto run app
app/helpers/core/controller_helpers.rb:6 W: Metrics/MethodLength: Method has too many lines. [11/10]
app/helpers/core/controller_helpers.rb:26 W: Layout/EmptyLineBetweenDefs: Use empty lines between method definitions.
app/helpers/core/controller_helpers.rb:31 W: Style/GuardClause: Use a guard clause (`return unless try_spree_current_user && @order`) instead of wrapping the code inside a conditional expression.
app/helpers/core/controller_helpers.rb:31 W: Rails/HelperInstanceVariable: Do not use instance variables in helpers.
app/helpers/core/controller_helpers.rb:32 W: Rails/HelperInstanceVariable: Do not use instance variables in helpers.
app/helpers/core/controller_helpers.rb:32 W: Rails/HelperInstanceVariable: Do not use instance variables in helpers.
app/helpers/core/controller_helpers.rb:33 W: Rails/HelperInstanceVariable: Do not use instance variables in helpers.
app/helpers/core/controller_helpers.rb:51 W: Metrics/CyclomaticComplexity: Cyclomatic complexity for set_current_order is too high. [7/6]
app/helpers/core/controller_helpers.rb:51 W: Metrics/PerceivedComplexity: Perceived complexity for set_current_order is too high. [8/7]
app/helpers/core/controller_helpers.rb:63 W: Rails/HelperInstanceVariable: Do not use instance variables in helpers.
```
I would like to `cd` into the root of my project directory and execute `pronto run` without providing a path.

Further informations:
```
root@27dc4bb0fd5d:/app# pronto -v
0.10.0
root@27dc4bb0fd5d:/app# rubocop -v
0.74.0
```

Thanks for feedback,
best regards,
Lukas
Synopsis:

A `Message` with a `commit_sha=nil` generate an invalid Gitlab URL, resulting in Pronto failing.

Description:

We have a CI set up at Gitlab public cloud, running Pronto and Rubocop at each push. Everything worked fine until a month ago.

We had the following error:

```
$ bundle exec pronto run -f gitlab -c remotes/origin/staging
bundler: failed to load command: pronto (/builds/good-terms/coton/vendor/bundle/ruby/2.6.0/bin/pronto)
Gitlab::Error::NotFound: Server responded with code 404, message: 404 Commit Not Found. Request URI: https://gitlab.com:443https://gitlab.com/api/v4/projects/good%2Dterms%2Fcoton/repository/commits/comments?per_page=500
  /builds/good-terms/coton/vendor/bundle/ruby/2.6.0/gems/gitlab-4.11.0/lib/gitlab/request.rb:67:in `validate'
  /builds/good-terms/coton/vendor/bundle/ruby/2.6.0/gems/gitlab-4.11.0/lib/gitlab/request.rb:46:in `block (2 levels) in <class:Request>'
  /builds/good-terms/coton/vendor/bundle/ruby/2.6.0/gems/gitlab-4.11.0/lib/gitlab/client/commits.rb:76:in `commit_comments'
  /builds/good-terms/coton/vendor/bundle/ruby/2.6.0/gems/pronto-0.10.0/lib/pronto/gitlab.rb:5:in `commit_comments'
  /builds/good-terms/coton/vendor/bundle/ruby/2.6.0/gems/pronto-0.10.0/lib/pronto/formatter/commit_formatter.rb:6:in `block in existing_comments'
  /builds/good-terms/coton/vendor/bundle/ruby/2.6.0/gems/pronto-0.10.0/lib/pronto/formatter/commit_formatter.rb:6:in `each'
  /builds/good-terms/coton/vendor/bundle/ruby/2.6.0/gems/pronto-0.10.0/lib/pronto/formatter/commit_formatter.rb:6:in `flat_map'
  /builds/good-terms/coton/vendor/bundle/ruby/2.6.0/gems/pronto-0.10.0/lib/pronto/formatter/commit_formatter.rb:6:in `existing_comments'
  /builds/good-terms/coton/vendor/bundle/ruby/2.6.0/gems/pronto-0.10.0/lib/pronto/formatter/git_formatter.rb:6:in `format'
  /builds/good-terms/coton/vendor/bundle/ruby/2.6.0/gems/pronto-0.10.0/lib/pronto.rb:67:in `block in run'
...
```

We were thinking of a configuration issue, having two protocols and two domains in the reported URL. Then we were looking for something with the project slug or Gitlab changing their APIs.

And then we noticed a missing commit number in the problematic URL.

Digging through Pronto, we discovered that one of the messages had a `nil` `commit_sha`:

```
#<Pronto::Message:0x00007fbedb092d50 
  @path="Gemfile.lock", 
  @line=#<struct Pronto::Git::Line 
    line=#<Pronto::BundlerAudit::GemfileLock::Scanner::Line:0x00007fbedb092df0 
      @line_number=33>,
    patch=#<Pronto::BundlerAudit::GemfileLock::Scanner::Patch:0x00007fbedb092dc8>,
    hunk=nil>, 
  @level=:error,
  @msg="Name: nokogiri\nVersion: 1.10.3\nAdvisory: CVE-2019-5477\nCriticality: Unknown\nURL: https://github.com/sparklemotion/nokogiri/issues/1915\nTitle: Nokogiri Command Injection Vulnerability via Nokogiri::CSS::Tokenizer#load_file\nSolution: Upgrade to >= 1.10.4.",
  @runner=Pronto::BundlerAudit,
  @commit_sha=nil
>
```

We are still digging to see how among all the gems involved (see below) is responsible for not being able to find a valid commit sha to report, and why. At least, we think Pronto should render a different, more specific error message when this happens.

We are willing to work on a fix; please advise on the expected Pronto behavior.

Using:
```
    pronto (0.10.0)
    pronto-bundler_audit (0.4.0)
    pronto-flay (0.10.0)
    pronto-rubocop (0.10.0)
    rubocop (0.72.0)
    rubocop-performance (1.4.0)
    rubocop-rails (2.2.0)
```
Apparently pronto still uses bitbucket v1.0 API for reading and posting comments. This API has just been removed (it now returns http error code 410).

We need to update to v2.0 API to keep this behaviour.
Add support for generating HTML report
### Issue background:
Using Gitlab CI to build a docker image, where the`PRONTO_GITLAB_API_PRIVATE_TOKEN=${TOKEN} bundle exec pronto run -f gitlab -c origin/master --exit-code` command is run in the container that is spun up.

When the image is built, several files are ignored, including the `README.md`.

`README.md` has been added to the `.pronto.yml` exclude but is not returned by `Dir['README.md']` in `pronto/config.rb#excluded_files`, as the file does not exist. However, the runner tries to run against the file as it was changed and is raising `/<working_dir>/cache/ruby/2.5.0/gems/pronto-0.10.0/lib/pronto/runner.rb:50:in 'initialize': No such file or directory @ rb_sysopen - /<working_dir>/README.md (Errno::ENOENT)`.

### Contents of `.pronto.yml`
```
all:
  exclude:
  - 'spec/**/*'
  - 'README.md'
  - '.gitlab-ci.yml'
```
Have also tried `'**/*.md'`, `'**/README.md'`, and other wildcard combinations.  `'.gitlab-ci.yml'` also doesn't work as it is also ignored. 

### Some contents of .dockerignore
```
log/
.dockerignore
.gitignore
README.md
gitlab-ci.yml
```

### These work but seem hacky
- touched empty `README.md` and `gitlab-ci.yml` into the docker container
- stop ignoring those files in `.dockerignore`


**_Other suggestions and workarounds welcome!_**
I would like to check the difference with the upstream branch using something like  `pipenv run pronto run -f gitlab --commit=upstream/develop --exit-code`  but without creating an upstream in the gitlab docker. So there are a method to check the difference with an external branch?