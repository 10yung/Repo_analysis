When I create a module, compile my Gleam code, and then rename or delete that module, its generated Erlang code sticks around in the `gen/` directory, even after recompiling again. I would have assumed that upon recompilation, the `gen/` directory would reflect only the Gleam code in my project at that time.

This very rarely has caused any issues, but is a somewhat opaque problem to debug when it does!
Currently we are like Elm, Haskell, and OCaml in that type annotations are not required, but they can be given.

```rust
pub fn main(name) { ... }

// or

pub fn main(name: String) { ... }

// or

pub fn main(name: String) -> Int { ... }
```

In real-world code written in these languages type annotations are almost always given for top level functions, and in Elm the compiler will complain if you do not supply them.

Other popular languages with static type systems always require type annotations for top level functions. i.e. Rust, Scala, Kotlin, Go.

With annotated function arguments we can provide easier to understand messages when there is a type error.
It would also make it trivial to introduce mutual recusion, remove the need for functions to be defined in the order they are used, and enable some fancier type features in addition.

Lastly I think having more certainty in the types when being inferred would open the door to some overloading or implicit typing features that would otherwise introduce ambiguity.

The cost of requiring these annotations is that there is more boilerplate for the programmer, though not an unusual amount for a statically typed language.

I'm interested in hearing what other people think about this question.
https://elixirforum.com/t/gleam-a-statically-typed-language-for-the-erlang-vm/20349/165
Original issue: https://github.com/lpil/gleam/issues/104
We could enable case expressions to match against some already defined value:

```rust
case exec(a) {
  [b] if b == c -> 1
  [] -> 2
  _ -> 0
}
```

```rust
pub fn make(name)(age, is_cool) {
  Person(
    name: name,
    age: age,
    is_cool: is_cool,
  )
}
```

```rust
let make_tim = make("Tim")
let old_tim = make_tim(99, True)

let sara = make("Sara")(34, True)
```
To enable IDE like features in all editors

May be good to investigate Salsa for this.
The compiler should be able to render markdown or html documentation from modules compiled. For now we can include the names and type of functions and data structures exported, and later add support for additional textual documentation from comments etc. 