As the title suggests, I wanted to open the project on newer version of unity compared to what was stated in the "prerequisite section" of this repo, which demands us to use Unity 2018.3.8f1. I already opened up the project using Unity2019.3, but I am getting numerous errors with the packages. So is it possible to open the FPS sample with newer versions of unity?
Hi,
I read the readme and I see that the original aim of this project is to help others learn but the Companion licence is hard to understand for me. 

So my question is: Can I use the assets from this project in my own game and can I make money by selling that game on any platform (PC, XBox, PS..)? 

If the answer is yes am I required to mention something in the credits or somewhere else about these assets? If yes what should I write and where in the game (credits, readme.txt etc.)?

Thanks a lot!
In [NetworkWriterL29](https://github.com/Unity-Technologies/FPSSample/blob/147f4719b61c2857d342bc0722c88d165bab3378/Assets/Scripts/Networking/NetworkWriter.cs#L29) it appears that the position checking is incorrect if using a byte array.

While the NetworkWriter never uses WriteBytes in the code, if you do attempt to use it, you could potentially run into false positives on this assert.

The reason is that the WriteBytes takes a parameter of "maxCount". That's the maximum number of **bytes** that can appear in the array. When being passed to NetworkWriter as an `arraySize` parameter, it is being added to `m_Position` which is the index of a **uint** array and comparing it also against `m_Size` which is also in **uint** count.
Many of these errors occur during LFS downloads


> git -c diff.mnemonicprefix=false -c core.quotepath=false lfs pull
LFS: Get https://github-cloud.s3.amazonaws.com/alambic/media/190530567/5c/35/5c351e1d758c0daa8d59f1803673827e0f6bce7de0a612d7e30bf1660e630a5b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIMWPLRQEC4XCWWPA%2F20191205%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20191205T090950Z&X-Amz-Expires=3600&X-Amz-Signature=fe4d1dbc9f05c7dbf20069fb77e778d42b4ab7555c23719cac2d1a047b8de145&X-Amz-SignedHeaders=host&actor_id=0&token=1: dial tcp: lookup github-cloud.s3.amazonaws.com: getaddrinfow: The requested name is valid, but no data of the requested type was found.

> LFS: Get https://github-cloud.s3.amazonaws.com/alambic/media/190530567/d4/08/d408c892dde748de3841725c7eb427cffbd1e971cc0fddd80213c2e4bddb83b5?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIMWPLRQEC4XCWWPA%2F20191205%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20191205T090950Z&X-Amz-Expires=3600&X-Amz-Signature=037f009f9cadad1cb0419f09ebb9e8df3745d9ad52cd4a044fc90db6d09527c2&X-Amz-SignedHeaders=host&actor_id=0&token=1: dial tcp: lookup github-cloud.s3.amazonaws.com: getaddrinfow: The requested name is valid, but no data of the requested type was found.

How to resolve this error???


```
0: Build type: release
0: BuildID: AutoBuild
0: Cwd: C:\Users\shpark\src\FPSSample\AutoBuild
0: SimpleBundleManager initialized
0: LevelManager initialized
0: InputSystem initialized
0: Loaded game config
ProcessCommandLineArguments: C:\Users\shpark\src\FPSSample\AutoBuild\AutoBuild.exe +serve Level_01 -batchmode -nographics
0: cmd: serve Level_01
>exec -s user.cfg
>exec -s boot.cfg
>serve Level_01
1: Game loop ServerGameLoop requested
2: Switching state: null -> Idle
2: Listening on 147.46.174.203 on port 7913
2: SQP Initialized. Listening on port 7923
2: GameWorld ServerWorld initializing
2: Network server initialized
Cannot add command load twice
2: loading:AssetBundles/Level_01
2: [ERR] Unable to open archive file: AssetBundles/Level_01
2: ERROR : Cannot load level : Level_01
2: Server initialized
2: EXCEPTION Object reference not set to an instance of an object
  at ServerGameLoop.UpdateNetwork () [0x000be] in <a7cc5756c5d340c4af4274779856bd24>:0
  at ServerGameLoop.Update () [0x000d1] in <a7cc5756c5d340c4af4274779856bd24>:0
  at Game.Update () [0x0021e] in <a7cc5756c5d340c4af4274779856bd24>:0
2: NullReferenceException: Object reference not set to an instance of an object
```

After building game using `FPSSample` > `Windows` > `Project Tools` > `Build game` `> Start`, I got an `NullReferenceException`.

Could you give me some idea for troubleshooting?
From Unite LA 2018 talk, the developers of FPSSample claim that they tried to remove hacks.

Could you elaborate more on this?

I want to know whether there are some references that describes your design choices for cheat prevention. 
[This](https://github.com/Unity-Technologies/FPSSample/blob/147f4719b61c2857d342bc0722c88d165bab3378/Assets/Scripts/Networking/NetworkUtils.cs#L79) function is technically incorrect. However, it is correct in the context of the only place it's being used.

If you use this overload of MemCmp with uint arrays like below, it is correct:
`NetworkUtils.MemCmp(....) != 0`

However, if you're looking for an actual return value then you need to cast the result back to a (uint). The problem lies with overflow:

    var diff = b[bIndex++] - a[aIndex++];
            if (diff != 0)
                return (int)diff;

Notice that it's casting diff to int and returning it, claiming that's the difference. It's not used this way anywhere in code, but it's misleading and I'm not sure why it doesnt just return a uint straight. You could also just rename the function to IsEquals and return a bool if the two values are not the same, and skip the diff.
 [NetworkClient.cs#L873](https://github.com/Unity-Technologies/FPSSample/blob/147f4719b61c2857d342bc0722c88d165bab3378/Assets/Scripts/Networking/NetworkClient.cs#L873) and [#L892](https://github.com/Unity-Technologies/FPSSample/blob/147f4719b61c2857d342bc0722c88d165bab3378/Assets/Scripts/Networking/NetworkClient.cs#L892) both have bugs regarding the variable `schemaSize`.

schemaSize is in **bytes**
info.prediction is an array of 512 **uints**
`NetworkUtils.MemCmp` will iterate over the array up to 512, but if the `schemaSize` is larger than 512 then it will crash despite a larger size being valid.
Same with `NetworkUtils.SimpleHash` a few lines later.

Since a uint is 4 bytes (a word), then `schemaSize` needs to be divided by 4. The resolution is just like the loops are doing right below it. 

Just to say many thanks and how great it is to see a project of this complexity and how you guys have gone about tackling it.

"As more and more features of Unity become available in ECS-aware versions, we will migrate to them"
With the current tag being v0.00 this is going to be great as Git based as not just a network and ECS demo but a really good example of how to migrate firstly to hybrid and then full blown.
It will be awesome to have the version tags to step through and be able to have such a strong and complex example.

Many thanks for all the effort you guys have put in and after that import! Yes I did celebrate a bit.
