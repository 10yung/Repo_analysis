I tried the following with the example, it doesn't work.

```
extern crate log;
extern crate log4rs;

use log::LevelFilter;
use log4rs::append::console::ConsoleAppender;
use log4rs::append::file::FileAppender;
use log4rs::encode::pattern::PatternEncoder;
use log4rs::config::{Appender, Config, Logger, Root};

fn main() {
    let not_service = true;

    let requests = FileAppender::builder()
        .encoder(Box::new(PatternEncoder::new("{d} - {m}{n}")))
        .build("log/requests.log")
        .unwrap();

    let mut config_builder = Config::builder()
        .appender(Appender::builder().build("requests", Box::new(requests)));

    if not_service {
        let stdout = ConsoleAppender::builder().build();
        config_builder
            .appender(Appender::builder().build("stdout", Box::new(stdout)));
    }

    config_builder
        .logger(Logger::builder().build("app::backend::db", LevelFilter::Info))
        .logger(Logger::builder()
            .appender("requests")
            .additive(false)
            .build("app::requests", LevelFilter::Info));
            
    let config = config_builder
        .build(Root::builder().appender("stdout").build(LevelFilter::Warn))
        .unwrap();

    let handle = log4rs::init_config(config).unwrap();

    // use handle to change logger configuration at runtime
}

```

It always complains about the move, even if I use borrow_mut().  Hopefully there is a way to do this?

```
Compiling playground v0.0.1 (/playground)
warning: unused variable: `handle`
  --> src/main.rs:38:9
   |
38 |     let handle = log4rs::init_config(config).unwrap();
   |         ^^^^^^ help: consider prefixing with an underscore: `_handle`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
  --> src/main.rs:18:9
   |
18 |     let mut config_builder = Config::builder()
   |         ----^^^^^^^^^^^^^^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

error[E0382]: use of moved value: `config_builder`
  --> src/main.rs:27:5
   |
18 |     let mut config_builder = Config::builder()
   |         ------------------ move occurs because `config_builder` has type `log4rs::config::ConfigBuilder`, which does not implement the `Copy` trait
...
23 |         config_builder
   |         -------------- value moved here
...
27 |     config_builder
   |     ^^^^^^^^^^^^^^ value used here after move

error[E0382]: use of moved value: `config_builder`
  --> src/main.rs:34:18
   |
18 |     let mut config_builder = Config::builder()
   |         ------------------ move occurs because `config_builder` has type `log4rs::config::ConfigBuilder`, which does not implement the `Copy` trait
...
27 |     config_builder
   |     -------------- value moved here
...
34 |     let config = config_builder
   |                  ^^^^^^^^^^^^^^ value used here after move

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0382`.
error: could not compile `playground`.

To learn more, run the command again with --verbose.

```


Compression of large files during log rotation may take several seconds. At this time, all threads writing logs are blocked, which can lead to undesirable delays.
The problem is resolved when the rotation is executed in a separate thread. Library users can enable new behavior using feature `async_rotation`.
Latest master as of writing this issue.
Please add CI for Windows. Thanks.
```
> cargo build
    Updating crates.io index
  Downloaded serde v1.0.104
  Downloaded serde-value v0.6.0
  Downloaded serde_json v1.0.44
  Downloaded serde_derive v1.0.104
  Downloaded serde_yaml v0.8.11
  Downloaded syn v1.0.11
   Compiling proc-macro2 v1.0.6
   Compiling autocfg v0.1.7
   Compiling winapi v0.3.8
   Compiling libc v0.2.66
   Compiling unicode-xid v0.2.0
   Compiling syn v1.0.11
   Compiling serde v1.0.104
   Compiling crc32fast v1.2.0
   Compiling ryu v1.0.2
   Compiling log v0.4.8
   Compiling adler32 v1.0.4
   Compiling traitobject v0.1.0
   Compiling cfg-if v0.1.10
   Compiling linked-hash-map v0.5.2
   Compiling quick-error v1.2.2
   Compiling dtoa v0.4.4
   Compiling itoa v0.4.4
   Compiling fnv v1.0.6
   Compiling antidote v1.0.0
   Compiling arc-swap v0.4.4
   Compiling log-mdc v0.1.0
   Compiling humantime v1.3.0
   Compiling unsafe-any v0.4.2
   Compiling miniz_oxide v0.3.5
   Compiling yaml-rust v0.4.3
   Compiling typemap v0.3.3
   Compiling num-traits v0.2.10
   Compiling num-integer v0.1.41
   Compiling flate2 v1.0.13
   Compiling quote v1.0.2
   Compiling ordered-float v1.0.2
   Compiling time v0.1.42
   Compiling thread-id v3.3.0
   Compiling chrono v0.4.10
   Compiling serde_derive v1.0.104
   Compiling serde-value v0.6.0
   Compiling serde_json v1.0.44
   Compiling serde_yaml v0.8.11
   Compiling log4rs v0.9.0 (E:\Code\log4rs)
error[E0432]: unresolved import `encode`
   --> src\encode\writer\console.rs:180:18
    |
180 |     use encode::{self, Color, Style};
    |                  ^^^^ no `encode` external crate

error[E0432]: unresolved import `priv_io`
   --> src\encode\writer\console.rs:181:9
    |
181 |     use priv_io::{StdWriter, StdWriterLock};
    |         ^^^^^^^ help: a similar path exists: `crate::priv_io`
    |
    = note: `use` statements changed in Rust 2018; read more at <https://doc.rust-lang.org/edition-guide/rust-2018/module-system/path-clarity.html>

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:200:21
    |
200 |                     Color::Black => 0,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:201:21
    |
201 |                     Color::Red => wincon::FOREGROUND_RED,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:202:21
    |
202 |                     Color::Green => wincon::FOREGROUND_GREEN,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:203:21
    |
203 |                     Color::Yellow => wincon::FOREGROUND_RED | wincon::FOREGROUND_GREEN,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:204:21
    |
204 |                     Color::Blue => wincon::FOREGROUND_BLUE,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:205:21
    |
205 |                     Color::Magenta => wincon::FOREGROUND_RED | wincon::FOREGROUND_BLUE,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:206:21
    |
206 |                     Color::Cyan => wincon::FOREGROUND_GREEN | wincon::FOREGROUND_BLUE,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:207:21
    |
207 |                     Color::White => {
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:218:21
    |
218 |                     Color::Black => 0,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:219:21
    |
219 |                     Color::Red => wincon::BACKGROUND_RED,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:220:21
    |
220 |                     Color::Green => wincon::BACKGROUND_GREEN,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:221:21
    |
221 |                     Color::Yellow => wincon::BACKGROUND_RED | wincon::BACKGROUND_GREEN,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:222:21
    |
222 |                     Color::Blue => wincon::BACKGROUND_BLUE,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:223:21
    |
223 |                     Color::Magenta => wincon::BACKGROUND_RED | wincon::BACKGROUND_BLUE,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:224:21
    |
224 |                     Color::Cyan => wincon::BACKGROUND_GREEN | wincon::BACKGROUND_BLUE,
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0433]: failed to resolve: use of undeclared type or module `Color`
   --> src\encode\writer\console.rs:225:21
    |
225 |                     Color::White => {
    |                     ^^^^^ use of undeclared type or module `Color`

error[E0412]: cannot find type `Style` in this scope
   --> src\encode\writer\console.rs:192:37
    |
192 |         fn set_style(&self, style: &Style) -> io::Result<()> {
    |                                     ^^^^^ not found in this scope
help: possible candidate is found in another module, you can import it into scope
    |
174 |     use crate::encode::Style;
    |

error[E0412]: cannot find type `Style` in this scope
   --> src\encode\writer\console.rs:324:41
    |
324 |         fn set_style(&mut self, style: &Style) -> io::Result<()> {
    |                                         ^^^^^ not found in this scope
help: possible candidate is found in another module, you can import it into scope
    |
174 |     use crate::encode::Style;
    |

error[E0412]: cannot find type `Style` in this scope
   --> src\encode\writer\console.rs:354:41
    |
354 |         fn set_style(&mut self, style: &Style) -> io::Result<()> {
    |                                         ^^^^^ not found in this scope
help: possible candidate is found in another module, you can import it into scope
    |
174 |     use crate::encode::Style;
    |

warning: unused imports: `Color`, `Style`
   --> src\encode\writer\console.rs:180:24
    |
180 |     use encode::{self, Color, Style};
    |                        ^^^^^  ^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

error: aborting due to 21 previous errors

Some errors have detailed explanations: E0412, E0432, E0433.
For more information about an error, try `rustc --explain E0412`.
error: Could not compile `log4rs`.

To learn more, run the command again with --verbose.
```
It would be good to be able to use a packages log level as a switch for certain more expensive code.

If there is a method already to do this it could do with documentation or an example in the src/examples/ section or md docs.
Currently, I don't believe if you use the JSON encoder, you can format it, it would be awesome if this was the case.
I'm ok with this being closed as "wontfix" if I'm misreading something, but the documentation should probably mention that the pattern for a fixed-window rolling file is a path

I recently ran into an issue where our log file was `/var/log/myservice.log`, but our rolled logs were in `/app/myservice.0.log` because we thought `pattern: myservice.{}.log` was a pattern against the log file, not a path relative to the working directory

To be clear, the only thing that needs changing is the docs for `log4rs::append::rolling_file::policy::compound::roll::fixed_window::FixedWindowRollerDeserializer`
I would like to be able to log the name of the function name from where the logging request was issued (similar to log4j). For example, if the pattern were {F} where F is the function name, the following log call would produce "main":
```
fn main() {
    info!("");
}
```

It would also be nice if associative and static functions could log the data name for which they are implemented. For example, the following would log something like "Point::new":
```
struct Point {
    x: i32,
    y: i32
}

impl Point {
    pub fn new() -> Self {
        info!("");
        //...
    }
}
```


```
warning: the trait `typemap::CloneAny` cannot be made into an object
  |
  = note: `#[warn(where_clauses_object_safety)]` on by default
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
  = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>
  = note: method `clone_any_send` references the `Self` type in where clauses
```
This requires to 
1) Choose traits of log4rs which're needed downcasting.
I suggest implement downcasting, at least, for these traits which can be accessed through [`log4rs::config::Config`](https://docs.rs/log4rs/0.8.3/log4rs/config/struct.Config.html): `Append` and `Filter`.
2) Add [`Any`](https://doc.rust-lang.org/stable/std/any/trait.Any.html) as constraint of chosen traits and extend them with methods upcasting to `&dyn Any`.
    ```rust
    use std::any::Any;
    pub trait Append: Any + fmt::Debug + Send + Sync + 'static { 
      fn as_any(&self) -> Box<&dyn Any>;
      ...
    }
    ```
3) Update all implementations of chosen traits in log4rs according to preceding changes.
4) Document this feature. 
  Following information will be likely desired:
    1) How to upgrade old code to new major release of `log4rs`
    2) How and in which cases this feature can be used 

UPD: no foreign crates required for this feature, more about required docs
My log looks like this:
```
2019-05-02T17:09:01.808249+01:00 DEBUG
2019-05-02T17:09:01.867+01:00 DEBUG 
2019-05-02T17:09:01.976255+01:00 DEBUG 
2019-05-02T17:09:01.976324+01:00 DEBUG 
```

Every time the microseconds ends in 000 (e.g. the second log line there), they are truncated to nearest millisecond, which messes up the readability of the log.

While it is possible to tweak the formatting, the default settings should give a fixed width.