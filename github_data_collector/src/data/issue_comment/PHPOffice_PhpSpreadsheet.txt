Summarizing:
MATCH with a static array should return the position of the found value based on the values submitted.
Returns #N/A, unless the element searched for is at the end of the array.

The problem is in Calculation.php line 4231:
                    if (!is_array($functionCall)) {
                        foreach ($args as &$arg) {
                            $arg = Functions::flattenSingleValue($arg);
                        }
                        unset($arg);
                    }

I believe this code is intended to handle functions where PhpSpreadsheet just passes
the call on to PHP without implementing the code on its own, e.g. for atan or acos.
In the bug report, the following code fails:
  $flat_rate = "=MATCH(6,{4,5,6,2}, 0)";
  $sheet->getCell('A1')->setValue($flat_rate);
The expected value is 3, but the actual result is "#N/A".
The reason for this result is that the parser replaces the braces with calls
to the MKMATRIX internal function, whose value for functioncall was:
'self::MKMATRIX'. Since this isn't an array, the flattening code is executed,
and the unintended result occurs. The fix is to change the definition for
functioncall in that case to [__CLASS__, 'mkMatrix'], avoiding the flattening.

However, there is also another part to this bug. The flattening should be
returning the first entry in the array, but is in fact returning the last.
This explains why the bug report specified "unless ... end of the array".
I confirmed that Excel does use the first item in the array rather than the last,
e.g. =atan({1,2,3}) entered into a cell will return atan(1), not atan(3).
The problem here is that flattenSingleValue, which says in its comments that
it is supposed to be returning the first item, uses array_pop rather than array_shift.
I have changed that as well. The same mistake was also present in
Cell.php function getCalculatedValue. The correct behavior can be verified
by entering =minverse({-2.5,1.5;2,-1}) into an Excel cell'
Excel flattens the result ({2,3;4,5}) to 2, and so should PhpSpreadsheet.

This is:

```
- [x] a bugfix
- [ ] a new feature
```

Checklist:

- [x] Changes are covered by unit tests
- [x] Code style is respected
- [x] Commit message explains **why** the change is made (see https://github.com/erlang/otp/wiki/Writing-good-commit-messages)
- [ ] CHANGELOG.md contains a short summary of the change
- [ ] Documentation is updated as necessary

### Why this change is needed?
Bugfix, as described.

This is:

```
- [x ] a bug report
- [ ] a feature request
- [ ] **not** a usage question (ask them on https://stackoverflow.com/questions/tagged/phpspreadsheet or https://gitter.im/PHPOffice/PhpSpreadsheet)
```

### What is the expected behavior?
Get the calculated value ( "2" in the provided test.xlsx )


### What is the current behavior?
error : PhpOffice\PhpSpreadsheet\Calculation\Exception: b!A1 -> Invalid cell coordinate A1+1


### What are the steps to reproduce?

```php
<?php

require __DIR__ . '/vendor/autoload.php';

$xlsx = \PhpOffice\PhpSpreadsheet\IOFactory::load($testxlsx);
$xlsx->getSheetByName('b')->getCell('A1')->getCalculatedValue();
```
[test.xlsx](https://github.com/PHPOffice/PhpSpreadsheet/files/4079001/test.xlsx)

I did not find online how to add entry in the "Name Manager" with PhpSpreadsheet but the provided file is just :

- sheet "a" : A1 => "1"
- sheet "b" : A1 => "=vartest"

and in "Formulas > Name Manager" I created entry with :
- Name : vartest
- Refers to : =a!$A$1+1



### Which versions of PhpSpreadsheet and PHP are affected?
PHP : 7.2
PhpSpreadsheet : 1.10.1


This is:

```
- [ ] a bug report
- [x] a feature request
- [ ] **not** a usage question (ask them on https://stackoverflow.com/questions/tagged/phpspreadsheet or https://gitter.im/PHPOffice/PhpSpreadsheet)
```

### What is the expected behavior?
When a row is manually resized in an Excel file, an attribute customHeight="1" is added to the row. This attribute should be available when reading an Excel file.

### What is the current behavior?
Said attribute is not considered during read operation. However, writer code has the attribute set, when applicable.

### What are the steps to reproduce?
File with 2 rows, 1st row has automatic height, 2nd was manually resized.
[customHeight.xlsx](https://github.com/PHPOffice/PhpSpreadsheet/files/4075002/customHeight.xlsx)
NOTE: This file was created using LibreOffice (I'm Linux only, right now) and hence attribute shows up as `customHeight="true"`. MS Excel generated files have `customHeight="1"`


### Which versions of PhpSpreadsheet and PHP are affected?
Latest


phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/ColumnAndRowAttributes.php
`readRowAttributes()`? 
This is:

```
- [X ] a bug report
- [ ] a feature request
- [ ] **not** a usage question (ask them on https://stackoverflow.com/questions/tagged/phpspreadsheet or https://gitter.im/PHPOffice/PhpSpreadsheet)
```

### What is the expected behavior?
Write decimal numbers like "1201,23" on a table.

### What is the current behavior?
The number is writen like "1201.23.0" and was formated as string

### What are the steps to reproduce?
This error occurs only on countries that use "," (comma) as a decimal separator (onlu to wtite a .xlsx file).
When the version 1.10.1 was writen, a decimal problem with a "." (dot) as a separator was solved (at PhpSpreadsheet/Writer/Xlsx/Worksheet.php - line 1146) but at countries that use a "," (comma - like Brazil or some european countries), the decimal number comes with a wrong formatation.
To solve, I had to use the 1.10.0 version on my composer file.

To replicate the bug, set "," (comma) as a decimal separator and "." (dot) as thousand separator on your OS

Please provide a [Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve) of code that exhibits the issue without relying on an external Excel file or a web server:

```php
<?php

require __DIR__ . '/vendor/autoload.php';

// Create new Spreadsheet object
$spreadsheet = new \PhpOffice\PhpSpreadsheet\Spreadsheet();

// add code that show the issue here...
$spreadsheet ->setCellValue('1201,2300'); //formated as number

```
Other error like this:
https://stackoverflow.com/questions/59393839/number-formatting-phpspreadsheet-with-decimals-not-seen-as-numbers-by-the-export

### Which versions of PhpSpreadsheet and PHP are affected?
PhpSpreadsheet: 1.10.1

This is: 

```
- [x] a bugfix (#1161)
- [ ] a new feature
```

Checklist:

- [ ] Changes are covered by unit tests — No. Removed code that was never covered in tests and shouldn't have been there in the first place. Nothing to test.
- [x] Code style is respected
- [x] Commit message explains **why** the change is made (see https://github.com/erlang/otp/wiki/Writing-good-commit-messages)
- [x] CHANGELOG.md contains a short summary of the change
- [x] Documentation is updated as necessary — no not necessary

### Why this change is needed?
As noted in [#1161](https://github.com/PHPOffice/PhpSpreadsheet/issues/1161) there was some test code left in the calculation.php file. This would only show up on larger files, so it hasn't been prevalent, but it should be removed. There are no references to the constants being set. Even if they were, it's bad practice to set constants in code. Here it's in a loop and also in a simple if/else block.
This is:

```
- [*] a bug report
- [ ] a feature request
- [ ] **not** a usage question (ask them on https://stackoverflow.com/questions/tagged/phpspreadsheet or https://gitter.im/PHPOffice/PhpSpreadsheet)
```

### What is the expected behavior?
I have an Excel file and insert data to it with phpspreadsheet.
after inserting and writing the excel file, I hope cell width is same between original file and generated file.

### What is the current behavior?
after inserting and writing the excel file, cell width is different with original file.

this is original file

[syanaikensa_check_sheet.xlsx](https://github.com/PHPOffice/PhpSpreadsheet/files/4069620/syanaikensa_check_sheet.xlsx)

this file cell width is 10(65px)

<img width="933" alt="Screen Shot 2020-01-16 at 15 21 56" src="https://user-images.githubusercontent.com/42969906/72499040-26690500-3874-11ea-87a2-7d8a3c6dd3fc.png">

this excel file is saved via phpspreadsheet

[syanaikensa_check_sheet_send.xlsx](https://github.com/PHPOffice/PhpSpreadsheet/files/4069633/syanaikensa_check_sheet_send.xlsx)

and this file cell width is 8(53px)

<img width="933" alt="Screen Shot 2020-01-16 at 15 22 17" src="https://user-images.githubusercontent.com/42969906/72499165-68924680-3874-11ea-8356-e7d192ab01af.png">

I don't understand why it became smaller.

### source

this is my part of source code.

```php
// load file
$type = IOFactory::identify($file);
$reader = IOFactory::createReader($type);
$sheet = $reader->load($file);
...
// set value
$activeSheet->setCellValue($cell, $data);
...
// write file
$tmp = storage_path('tmp/' . uniqid() . '_put_' . $bot->excel_file_name);
$writer = new XlsxWriter($sheet);
$writer->save($tmp);
```

### Which versions of PhpSpreadsheet and PHP are affected?

1.10
See https://github.com/PHPOffice/PhpSpreadsheet/issues/1325


This is:

```
- [x] a bug report
- [ ] a feature request
- [ ] **not** a usage question (ask them on https://stackoverflow.com/questions/tagged/phpspreadsheet or https://gitter.im/PHPOffice/PhpSpreadsheet)
```

### What is the expected behavior?
The "$" character should be removed from the filter range.

### What is the current behavior?
The `setRange` method of the `Xlsx/AutoFilter` class expects a filter range format like "A1:E10".
The returned value from `$this->worksheetXml->autoFilter['ref']` could contain "$" and returning a value like "$A$1:$E$10".

### Which versions of PhpSpreadsheet and PHP are affected?
1.10.1
This is:

```
- [x] a bug report
- [ ] a feature request
- [ ] **not** a usage question (ask them on https://stackoverflow.com/questions/tagged/phpspreadsheet or https://gitter.im/PHPOffice/PhpSpreadsheet)
```

### What is the expected behavior?
The "$" character should be removed from the filter range.

### What is the current behavior?
The `setRange` method of the `Xlsx/AutoFilter` class expects a filter range format like "A1:E10".
The returned value from `$this->worksheetXml->autoFilter['ref']` could contain "$" and returning a value like "$A$1:$E$10".

### Which versions of PhpSpreadsheet and PHP are affected?
1.10.1
This is:

```
- [x] a bug report
- [ ] a feature request
- [ ] **not** a usage question (ask them on https://stackoverflow.com/questions/tagged/phpspreadsheet or https://gitter.im/PHPOffice/PhpSpreadsheet)
```

### What is the expected behavior?
A reader should read the data as it is. All data should be converted correctly without loss of precision. 

### What is the current behavior?
Numbers are converted losing precision. The number '753,149999999999' for example gets changed to '753.15'. 

### What are the steps to reproduce?

Please provide a [Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve) of code that exhibits the issue without relying on an external Excel file or a web server:

```php
<?php

require __DIR__ . '/vendor/autoload.php';

// Create new Spreadsheet object
$spreadsheet = new \PhpOffice\PhpSpreadsheet\Spreadsheet();

// add code that show the issue here...
$spreadsheet = reader->load('yourexcel.xlsx');
$spreadsheet = $this->spreadSheetPreparationForWrite($spreadsheet, 1);
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Csv($spreadsheet);
$writer->setSheetIndex(1);
$writer->save('savedas.csv');
### Which versions of PhpSpreadsheet and PHP are affected?

When freeze pane is in use on a worksheet, PhpSpreadsheet saves to Xlsx in such
a way that the active cell is always set to the top left cell below the freeze
pane. I find it difficult to understand why:
  1. You have given users the setSelectedCells function, but then choose to
     ignore it.
  2. Excel itself does not act in this manner.
  3. PHPExcel did not act in this manner.
  4. PhpSpreadsheet when writing to Xls does not act in this manner.
     This is especially emphasized because the one test in FreezePaneTest which
     would expose the difference is the only test in that member which is
     not made for both Xls and Xlsx.
  5. It is *really* useful to be able to open a spreadsheet anywhere, even when
     it has header rows.

Rather than create regression problems by changing this behavior all the time,
I instead introduce a new method, setActiveCellAnywhere, to
Writer/Xlsx/Worksheet to control it via a private variable, with the default
(false) being the current behavior. When it is set to true, the active cell
is left as the user intended.

The documentation is updated to describe the new method.
New tests are added, and the Xlsx-only test is changed to test
both Xls and Xlsx.

This is:

```
- [ ] a bugfix
- [x] a new feature
```

Checklist:

- [x] Changes are covered by unit tests
- [x] Code style is respected
- [x] Commit message explains **why** the change is made (see https://github.com/erlang/otp/wiki/Writing-good-commit-messages)
- [ ] CHANGELOG.md contains a short summary of the change
- [x] Documentation is updated as necessary

### Why this change is needed?
As described above, add the ability to open a worksheet anywhere even when freeze pane is used.
