Since the context package is part of standard library, I think we should support it.

And web.go had a struct called Context and is used to passing values to handler, I think we can reuse it as a `context.Context` interface. The easist way to do it is embed the `context.Context` from `http.Request.Context()` to web.go's Context.
Since go module is the official package management tool, it's better to support it.
Fix the format error and let latest go compile can compile it. 

Bumped the go version in `.travis` file also, dropped old version go support, because some dependency package is not supported and can't compiled on this versions.
Every exported function in a program should have a doc comment. The first sentence should be a summary that starts with the name being declared.
From [effective go](https://golang.org/doc/effective_go.html#commentary).


PR generated by [CodeLingo](https://codelingo.io). [Install here](https://github.com/apps/codelingo) to drive Continuous Higher Standards.


Windows 10 x64, go version go1.11 windows/amd64
```
go get github.com/hoisie/web
```
results in
```
..\github.com\hoisie\web\ttycolors.go:25:24: cannot use syscall.Stdout (type syscall.Handle) as type int in argument to terminal.IsTerminal
```
Hi!

Firstly, thank you for your great work!

Since HTTPClient in Angular >4.3 forces a cors preflight request, it would be great if web.go would handle this natively :)
See: https://github.com/rs/cors

Thanks :)
66666666
THX a lot
```
diff --git a/ttycolors.go b/ttycolors.go
index fe63c1a..a5228b5 100644
--- a/ttycolors.go
+++ b/ttycolors.go
@@ -2,7 +2,7 @@ package web

 import (
        "golang.org/x/crypto/ssh/terminal"
-       "syscall"
+       "os"
 )

 var ttyCodes struct {
@@ -22,7 +22,7 @@ func ttyBold(code string) string {
 }

 func ttyEscape(code string) string {
-       if terminal.IsTerminal(syscall.Stdout) {
+       if terminal.IsTerminal(int(os.Stdout.Fd())) {
                return "\x1b[" + code + "m"
        } else {
                return ""

```