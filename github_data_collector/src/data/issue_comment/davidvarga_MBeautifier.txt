Hi, as i'm using MBeautify.createShortcut('editorpage') in my script i don't have a new shortcut created in my preference > keyboard > shortcut.

Could someone explain me what did i miss ? Or maybe it doesn't work ?
As there are thoughts about rewriting the whole project, I would like to add some feature requests. This way they can be already discussed and -- if desired -- they can be integrated from the very beginning of the new project. (Alternatively, of course, they can be implemented in the existing version).

Given a folder structure with many MATLAB files in it, it would be nice to have a function that applies the format in-place for each file. I think it would help the developers a lot to have such a batch formatting tool. The main application here, however, is continuous integration. In such a scenario, all files can be formatted and differences can be easily detected. This feature should include a way to exclude certain files or directories from formatting. I have some first code lying around, if desired I can make it available.

Related, but maybe a different issue: It would be nice if the script considered a given settings file in the project root (for project specific settings). Maybe the settings can be overwritten by another settings file in a subdirectory. In summary, the recursive formatting function mentioned above scans for a settings file in the current directory, in a top-level directory, and finally in the MBeautifier settings directory.

First of all, thank you for this project! Until yesterday I was not aware that such a formatter exists and spent some time formatting things manually. This project really makes things easier!

**Problem:** The issues #51 and #74 already mention that it would be very nice to run the script without the MATLAB editor dependence. For automated tasks (pre-commit hooks, CI, ...) this is crucial as there might not be the possibility to run a GUI. For a large number of files this may be beneficial for the performance. Apparently, the only dependency is the smart indentation function which must be replaced. The replacement could also deal with indentation issues such as #52 .

**Approach 1:** Write a MATLAB function that can replace MATLAB's smart indent function. As announced in #74, I played around and ended up with a simple indentation code which I would like to share (for what it is worth).

**Approach 2:** Implement the same thing in Java, as the project is about to be rewritten. May I ask what the status of the Java version is?




I use this as part of a pre-commit git hook and also sometimes in large batches of files, so it would be nice to have the option of passing in a filename and have the formatter run without opening the editor for performance reasons. A couple of possibilities for the calling syntax:

An optional parameter:
`MBeautify.formatFile('someFile.m', 'someFile.m', 'UseEditor', false);`

An optional positional argument:
`MBeautify.formatFile('someFile.m', 'someFile.m', '--no-editor');`

A new method:
`MBeautify.formatFileSilently('someFile.m', 'someFile.m');`



You can write keyword blocks with or without parentheses:

```
if (true)
end
```
vs.
```
if true
end
```

A nice feature would be to control whether or not to add parentheses to these expressions and also independently set this for each possible keyword that supports this (`if`, `elseif`, `switch`, `case`, `while`, `for`, etc.)

Hi,
thanks for addressing my last issue. Since this is so actively maintained, I thought you may be interested in another issue that is, however, not as critical.
I'll explain it on MWEs.
`if 0 == 0, a = 1 + 1, end`
is kept as it is by the tool. However,
`if 0 == 0, a = 1 + 1; end`
is turned into
`if 0 == 0, a = 1 + 1;`
`end`

I think these cases should behave identically. I personally prefer the former behavior because it does allow one liners. However, I can also understand if one liners are eliminated - in this case, however, the `a = 1 + 1;` expression should also put in a separate line.

Anyways, thanks again. And it's not an important issue because it does not break the code after all.
I assume that in the case of a condition, it is better to align to condition on previous line.
I think this code:
```
if a + b > 0 && ...
   a * b > 0
    a = b;
end   
```
better than generated by MBeautifier:
```
if a + b > 0 && ...
        a * b > 0
    a = b;
end
```

So, this is true for `while` too.
I have a hundred files and I want beautify each of them without opening window in editor files on each file.
If possible, it would be great if the method formatFiles could work silently.
This feature will be implemented when the full backend implementation is moved to Java.