In the typescript config, I [would like to have](https://github.com/standard/eslint-config-standard-with-typescript/issues/211) a public usage test as well, similar to the one standard has:
https://github.com/standard/standard/blob/v14.3.1/test/clone.js

I would like to extract this test into its own repo, `standard/public-usage-test`. Would that be cool, @feross ? And would it be alright if it's TypeScript, pretty please :cat2: ?

## The dependency [eslint-plugin-node](https://github.com/mysticatea/eslint-plugin-node) was updated from `10.0.0` to `11.0.0`.
This version is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

---

**Publisher:** [mysticatea](https://www.npmjs.com/~mysticatea)
**License:** MIT

[Find out more about this release](https://github.com/mysticatea/eslint-plugin-node).

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:


I've written up the [use cases for the `void` operator][yes-void], but, in short, the main use case is for making non-value-returning arrow functions explicit while keeping them in a single line, so the `no-void` rule should be removed from the base config as an oversight.

[yes-void]: https://gist.github.com/slikts/dee3702357765dda3d484d8888d3029e

## The dependency [eslint-plugin-import](https://github.com/benmosher/eslint-plugin-import) was updated from `2.18.2` to `2.19.0`.
This version is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

---

**Publisher:** [ljharb](https://www.npmjs.com/~ljharb)
**License:** MIT

[Find out more about this release](https://github.com/benmosher/eslint-plugin-import).

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:


I've updated Japanese documents to to apply changes of original documents. (from e514626 to ecda198)
No review by other Japanese speakers is required.

## All original committ list
1. e514626
1. 4bc1671
1. ecda198 (no changes for Japanese document)

**What is the purpose of this pull request? (put an "X" next to item)**

[X] Documentation update
[ ] Bug fix
[ ] New feature
[ ] Other, please explain:

**What changes did you make? (Give an overview)**
Remove `bundle.js` from the list of of default ignored files, because it is no longer ignored.

**Which issue (if any) does this pull request address?**
#743

**Is there anything you'd like reviewers to focus on?**

**What version of this package are you using?**
14.3.1

**What problem do you want to solve?**
Allow writing more readable code in cases when a variable is checking against a range e.g.
```javascript
if (0 < x && x < 10) {
   ...
}
```
or
```javascript
if (x < 5 || 10 < x) {
  ...
}
```

**What do you think is the correct solution to this problem?**
define more **yoda** precisely and allow this edge case with **exceptRange** option

**Are you willing to submit a pull request to implement this change?**
Yes
**What version of this package are you using?**

eslint-config-standard-jsx@8.1.0

**What operating system, Node.js, and npm version?**
MacOS Catalina, node 13.2.0, npm 6.13.1
**What happened?**
Weird formatting, in prettier-standard package it's done more "correctly"
**What did you expect to happen?**
Another formatting like it's done in prettier-standard
**Are you willing to submit a pull request to fix this bug?**
Nope :(

I came across some conflict between `prettier-standard` and eslint with `standard` and `standard-jsx` presets included. 

Example:

```
const A: React.FC = ({ children }) => <div>{children}</div>
const B: React.FC<{ onDelete: () => void }> = ({ children }) => (
  <div>{children}</div>
)

const MyComponent: FunctionComponent = () => {
  const someLongMethodHandlerName = (obj: {
    parameter1: string
    parameter2: string
  }) => {}

  return (
    <A>
      <B
        onDelete={() =>
          someLongMethodHandlerName({
            parameter1: 'parameter1',
            parameter2: 'parameter2'
          })
        }
      >
        B
      </B>
    </A>
  )
}
```

^^ this is how prettier-standard formats the code,

but eslint with `standard` and `standard-jsx` presets expects the next version

```diff
const A: React.FC = ({ children }) => <div>{children}</div>
const B: React.FC<{ onDelete: () => void }> = ({ children }) => (
  <div>{children}</div>
)

const MyComponent: FunctionComponent = () => {
  const someLongMethodHandlerName = (obj: {
    parameter1: string
    parameter2: string
  }) => {}

  return (
    <A>
      <B
        onDelete={() =>
          someLongMethodHandlerName({
            parameter1: 'parameter1',
            parameter2: 'parameter2'
-         })
-       }
+ .       })}
      >
        B
      </B>
    </A>
  )
}
```

To me first variant is more correct /cc @sheerun
https://github.com/standard/eslint-config-standard/blob/eb187deec36e72bfea4034db1a81b0d7414f814a/package.json#L51-L55

Shouldn't they use the caret (`^`) operator? How could we claim to support a newer major version that might rename/remove a rule, change some rule's options, etc.?

@LinusU 

https://semver.npmjs.com/
From this pr, #1455, where CI is failing, it's not clear what is failing exactly.

I suggest what could help is making all the errors thrown in the test suite a little more descriptive, as a start.