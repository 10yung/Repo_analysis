See image

I think you forget to release `GC_malloc_heap_l` global object.

![image](https://user-images.githubusercontent.com/30760636/71986783-fdd77e80-3267-11ea-8167-91e9e57d0e7e.png)

I got error when i compile guile-2.2.6 for riscv64. More logs can be found here https://abf.openmandriva.org/build_lists/659746

```
./guile-snarf-docs -o regex-posix.doc regex-posix.c -- -DHAVE_CONFIG_H -DBUILDING_LIBGUILE=1 -I.. -I.. -I../lib -I../lib  -I/builddir/build/BUILD/guile-2.2.6  -Os -fomit-frame-pointer -gdwarf-4 -Wstrict-aliasing=2 -pipe -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -fstack-protector-strong --param=ssp-buffer-size=4  -march=rv64imafdc -mabi=lp64d -flto
cat alist.doc array-handle.doc array-map.doc arrays.doc async.doc atomic.doc backtrace.doc boolean.doc bitvectors.doc bytevectors.doc chars.doc control.doc continuations.doc debug.doc deprecated.doc deprecation.doc dynl.doc dynwind.doc eq.doc error.doc eval.doc evalext.doc expand.doc extensions.doc fdes-finalizers.doc feature.doc filesys.doc fluids.doc foreign.doc fports.doc gc-malloc.doc gc.doc gettext.doc generalized-arrays.doc generalized-vectors.doc goops.doc gsubr.doc guardians.doc hash.doc hashtab.doc hooks.doc i18n.doc init.doc ioext.doc keywords.doc list.doc load.doc macros.doc mallocs.doc memoize.doc modules.doc numbers.doc objprop.doc options.doc pairs.doc ports.doc print.doc procprop.doc procs.doc promises.doc r6rs-ports.doc random.doc rdelim.doc read.doc rw.doc scmsigs.doc script.doc simpos.doc smob.doc sort.doc srcprop.doc srfi-1.doc srfi-4.doc srfi-13.doc srfi-14.doc srfi-60.doc stackchk.doc stacks.doc stime.doc strings.doc strorder.doc strports.doc struct.doc symbols.doc syntax.doc threads.doc throw.doc trees.doc unicode.doc uniform.doc values.doc variable.doc vectors.doc version.doc vports.doc weak-set.doc weak-table.doc weak-vector.doc dynl.doc posix.doc net_db.doc socket.doc regex-posix.doc | GUILE_AUTO_COMPILE=0 ../meta/build-env guild snarf-check-and-output-texi          > guile-procedures.texi || { rm guile-procedures.texi; false; }
BUILDSTDERR: Insufficient memory for main local_mark_stack
BUILDSTDERR: /bin/sh: line 1:  6166 Broken pipe             cat alist.doc array-handle.doc array-map.doc arrays.doc async.doc atomic.doc backtrace.doc boolean.doc bitvectors.doc bytevectors.doc chars.doc control.doc continuations.doc debug.doc deprecated.doc deprecation.doc dynl.doc dynwind.doc eq.doc error.doc eval.doc evalext.doc expand.doc extensions.doc fdes-finalizers.doc feature.doc filesys.doc fluids.doc foreign.doc fports.doc gc-malloc.doc gc.doc gettext.doc generalized-arrays.doc generalized-vectors.doc goops.doc gsubr.doc guardians.doc hash.doc hashtab.doc hooks.doc i18n.doc init.doc ioext.doc keywords.doc list.doc load.doc macros.doc mallocs.doc memoize.doc modules.doc numbers.doc objprop.doc options.doc pairs.doc ports.doc print.doc procprop.doc procs.doc promises.doc r6rs-ports.doc random.doc rdelim.doc read.doc rw.doc scmsigs.doc script.doc simpos.doc smob.doc sort.doc srcprop.doc srfi-1.doc srfi-4.doc srfi-13.doc srfi-14.doc srfi-60.doc stackchk.doc stacks.doc stime.doc strings.doc strorder.doc strports.doc struct.doc symbols.doc syntax.doc threads.doc throw.doc trees.doc unicode.doc uniform.doc values.doc variable.doc vectors.doc version.doc vports.doc weak-set.doc weak-table.doc weak-vector.doc dynl.doc posix.doc net_db.doc socket.doc regex-posix.doc
BUILDSTDERR:       6168 Aborted                 (core dumped) | GUILE_AUTO_COMPILE=0 ../meta/build-env guild snarf-check-and-output-texi > guile-procedures.texi
BUILDSTDERR: make[3]: *** [Makefile:4281: guile-procedures.texi] Error 1
```
I noticed that when I start `guile` inside `gdb`, I see a bunch of threads.  When I break on `pthread_create`, I see they come from the GC:

```
(gdb) bt
#0  0x00007ffff77307a0 in pthread_create@@GLIBC_2.2.5 ()
   from /lib64/libpthread.so.0
#1  0x00007ffff7afee49 in GC_start_mark_threads_inner ()
    at pthread_support.c:471
```

However, the threads show up in gdb like:

```
(gdb) info thread
  Id   Target Id                                 Frame 
...
  2    Thread 0x7ffff76fd700 (LWP 21133) "guile" 0x00007ffff77363d5 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
  3    Thread 0x7ffff6efc700 (LWP 21134) "guile" 0x00007ffff77363d5 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
...
```

I think it would be nice if the GC set the names of these threads to something like '"GC"'.  On Linux and macOS this can be done with `pthread_setname_np` (though be warned that the function takes different arguments on these platforms).
As reported on https://stackoverflow.com/questions/58429255/private-api-call-not-allowed-in-ios-file-os-dep-c-function-exc-server, iOS app could be rejected in the AppStore because of exc_server() non-public symbol use.
This symbol is used in the incremental GC mode, so the quick workaround is to build the collector with GC_DISABLE_INCREMENTAL macro defined.
In the long term, it would be good to investigate and propose the change to the Darwin incremental GC mode support which is free of use of iOS undocumented API.
On RISCV64 we got this error when compiling with gcc and ld.bfd while on other arches ld.bfd did the trick
full logs https://abf.openmandriva.org/openmandriva/gc/build_lists#?page=1&per_page=25&ownership=everything

```

/bin/sh ./libtool  --tag=CC   --mode=link /usr/bin/gcc   -fexceptions -Wall -Wextra -Wpedantic -Wno-long-long -Os -fomit-frame-pointer -gdwarf-4 -Wstrict-aliasing=2 -pipe -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -fstack-protector-strong --param=ssp-buffer-size=4  -march=rv64imafdc -mabi=lp64d -fuse-ld=bfd -fno-strict-aliasing   -version-info 5:3:4 -no-undefined -Os -fomit-frame-pointer -gdwarf-4 -Wstrict-aliasing=2 -pipe -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -fstack-protector-strong --param=ssp-buffer-size=4  -march=rv64imafdc -mabi=lp64d -fuse-ld=bfd -Wl,-O2  -Wl,--no-undefined  -o libgc.la -rpath /usr/lib64 allchblk.lo alloc.lo blacklst.lo dbg_mlc.lo dyn_load.lo finalize.lo gc_dlopen.lo gcj_mlc.lo headers.lo mach_dep.lo malloc.lo mallocx.lo mark.lo mark_rts.lo misc.lo new_hblk.lo obj_map.lo os_dep.lo ptr_chck.lo reclaim.lo specific.lo typd_mlc.lo  pthread_start.lo pthread_support.lo  pthread_stop_world.lo thread_local_alloc.lo   fnlz_mlc.lo  -lpthread -ldl  -latomic_ops 
libtool: link: /usr/bin/gcc -shared  -fPIC -DPIC  .libs/allchblk.o .libs/alloc.o .libs/blacklst.o .libs/dbg_mlc.o .libs/dyn_load.o .libs/finalize.o .libs/gc_dlopen.o .libs/gcj_mlc.o .libs/headers.o .libs/mach_dep.o .libs/malloc.o .libs/mallocx.o .libs/mark.o .libs/mark_rts.o .libs/misc.o .libs/new_hblk.o .libs/obj_map.o .libs/os_dep.o .libs/ptr_chck.o .libs/reclaim.o .libs/specific.o .libs/typd_mlc.o .libs/pthread_start.o .libs/pthread_support.o .libs/pthread_stop_world.o .libs/thread_local_alloc.o .libs/fnlz_mlc.o   -lpthread -ldl -latomic_ops  -fexceptions -Os -fomit-frame-pointer -gdwarf-4 -pipe -fstack-protector-strong --param=ssp-buffer-size=4 -march=rv64imafdc -mabi=lp64d -fuse-ld=bfd -fno-strict-aliasing -Os -fomit-frame-pointer -gdwarf-4 -pipe -fstack-protector-strong --param=ssp-buffer-size=4 -march=rv64imafdc -mabi=lp64d -fuse-ld=bfd -Wl,-O2 -Wl,--no-undefined   -Wl,-soname -Wl,libgc.so.1 -o .libs/libgc.so.1.4.3
make[1]: Leaving directory '/builddir/build/BUILD/gc-8.0.4'
BUILDSTDERR: /usr/lib64/gcc/riscv64-openmandriva-linux-gnu/9.2.1/../../../../riscv64-openmandriva-linux-gnu/bin/ld.bfd: .libs/dyn_load.o: in function `GC_register_dynamic_libraries_dl_iterate_phdr':
BUILDSTDERR: /builddir/build/BUILD/gc-8.0.4/dyn_load.c:606: undefined reference to `__data_start'
BUILDSTDERR: /usr/lib64/gcc/riscv64-openmandriva-linux-gnu/9.2.1/../../../../riscv64-openmandriva-linux-gnu/bin/ld.bfd: /builddir/build/BUILD/gc-8.0.4/dyn_load.c:646: undefined reference to `__data_start'
BUILDSTDERR: /usr/lib64/gcc/riscv64-openmandriva-linux-gnu/9.2.1/../../../../riscv64-openmandriva-linux-gnu/bin/ld.bfd: .libs/os_dep.o: in function `GC_get_stack_base':
BUILDSTDERR: /builddir/build/BUILD/gc-8.0.4/os_dep.c:1309: undefined reference to `__data_start'
BUILDSTDERR: collect2: error: ld returned 1 exit status
BUILDSTDERR: make[1]: *** [Makefile:1398: libgc.la] Error 1
BUILDSTDERR: make: *** [Makefile:1871: all-recursive] Error 1
BUILDSTDERR: error: Bad exit status from /var/tmp/rpm-tmp.HaSj76 (%build)
```
Build: https://ci.appveyor.com/project/ivmai/bdwgc/builds/27839035/job/dsku7xaf7qrkuj92
Target: Windows/x86
How to build: cmake -Dbuild_tests=ON -Denable_cplusplus=ON -Denable_large_config=ON -DCFLAGS_EXTRA=-DNO_MSGBOX_ON_ERROR . && cmake --build . --config Release && ctest --build-config Release
I have some doubts regarding how to make custom mark algorithms.

My goal is to have an array structure that has

1. a pointer to the buffer: `void * ptr`
2. the number of elements stored in the buffer: `int size`

Elements will be stored from `ptr[0]` to `ptr[size-1]`. Although the capacity of the buffer is stored somewhere, that has no role in the marking algorithm.

I was able to register a custom type and function to be used by the algorithm. But I am having problems writing a good algorithm inside of it.

I've based some of my work in https://rev.ng/gitlab/or1k/gcc/blob/fdcfb10d15004124c997452560fe5fe30c85618d/libjava/boehm.cc#L199

As far I as understand I need to:

1. Call `GC_set_mark_bit` for the pointer to the buffer `ptr`. This call MUST happen around via a `GC_call_with_alloc_lock`.
2. For each `ptr[i]` `0 <= i < size` use the `GC_MARK_AND_PUSH` macro and keep the returned value as the updated `mark_stack_ptr`. Calls to `GC_MARK_AND_PUSH` does not need to be around the `GC_call_with_alloc_lock` of (1).
3. Return the updated `mark_stack_ptr` from the mark algorithm.

Questions:

1. Are these assumptions and description accurate?
2. I've found so far lots of contingency/slow down while trying to get the alloc lock via `GC_call_with_alloc_lock`.
3. I would've expected to be able to use `GC_push_all` for the whole `ptr[0..size-1]` range at once, instead of manually iterating the array, but since I've found no example doing that I wonder if that is correct/doable.
4. Regarding (3). If calling `GC_push_all` is correct, I am not sure how to guarantee the precondition mentioned in the docs.

  > Should only be used if there is no possibility of mark stack overflow.

Since this is to implement a base structure heavily used I want to make it as fast as possible.

Any recommendation and guidance are appreciated.

Thanks!

Build link: https://travis-ci.org/ivmai/bdwgc/jobs/551952193
Host: Linux/x64
Source: https://github.com/ivmai/bdwgc/commit/d7e2c143c740a93cea9acb397c2e3452327eb0ec
How to reproduce: configure --enable-redirect-malloc --enable-gc-debug --enable-cplusplus --enable-gc-assertions && make check
When I do not define GC_DEBUG before #include <gc.h>, my program runs as expected. But I want to debug and print backtraces, so I define GC_DEBUG. In gdb I put a breakpoint at GC_finish_collection(), when it breaks, I print info about a certain object. The debugger shows me that it is reachable by printing a trace when I do print GC_print_backtrace(object address) and shows me that it is marked as 1 when I do GC_is_marked(object address).

(gdb) p GC_print_backtrace(0x7ffff7e2a2b0)
0x7ffff7e2a2b0 (../examples/resnet152-imagenet.c:72, sz=16, NORMAL)
	Call chain at allocation:
		/home/ahmed90/bdwgc/.libs/libgc.so.1(+0x17fae) [0x7fffeb1ebfae]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x95255) [0x5555555e9255]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0xa0ca8) [0x5555555f4ca8]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x8adaf) [0x5555555dedaf]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x83be5) [0x5555555d7be5]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
Reachable via 0 levels of pointers from offset 32 in object:
0x7ffff7ec3a70 (../examples/resnet152-imagenet.c:72, sz=40, NORMAL)
	Call chain at allocation:
		/home/ahmed90/bdwgc/.libs/libgc.so.1(+0x17fae) [0x7fffeb1ebfae]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x156da8) [0x5555556aada8]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x83be5) [0x5555555d7be5]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
Reachable via 1 levels of pointers from offset 24 in object:
0x7ffff7ec3930 (../examples/resnet152-imagenet.c:72, sz=32, NORMAL)
	Call chain at allocation:
		/home/ahmed90/bdwgc/.libs/libgc.so.1(+0x17fae) [0x7fffeb1ebfae]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x203abc) [0x555555757abc]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x83be5) [0x5555555d7be5]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
Reachable via 2 levels of pointers from offset 32 in object:
0x7ffff7ec36b0 (../examples/resnet152-imagenet.c:72, sz=40, NORMAL)
	Call chain at allocation:
		/home/ahmed90/bdwgc/.libs/libgc.so.1(+0x17fae) [0x7fffeb1ebfae]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0xee358) [0x555555642358]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x83be5) [0x5555555d7be5]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
Reachable via 3 levels of pointers from offset 24 in object:
0x7ffff7ec34d0 (../examples/resnet152-imagenet.c:72, sz=32, NORMAL)
	Call chain at allocation:
		/home/ahmed90/bdwgc/.libs/libgc.so.1(+0x17fae) [0x7fffeb1ebfae]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x1ce07c) [0x55555572207c]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x83be5) [0x5555555d7be5]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
		/home/ahmed90/checkpoint-vlad/examples/resnet152-imagenet(+0x9b680) [0x5555555ef680]
Reachable via 4 levels of pointers from root at 0x7fffffffc800

(gdb) p GC_is_marked(GC_base(0x7ffff7e2a2b0))
$3 = 1

But when then I do

(gdb) p GC_dump_finalization()
Disappearing (short) links:
Disappearing long links:
Finalizers:
Finalizable object: 0x7ffff7e2a2b0
Finalizable object: 0x7ffff7e79e80
$8 = void

It shows that the object is finalizable. And I hit continue and that object gets collected instantly. Although there is references to it as shown by the print backtrace.
Host: Cygwin64 (Windows 10 x64)
Source: master (3a2602242)
Occurence: always
How to reproduce: gcc -I include -I libatomic_ops/src -O0 -D GC_ASSERTIONS -D GC_THREADS -D NO_EXECUTE_PERMISSION -D THREAD_LOCAL_ALLOC -g tests/test.c extra/gc.c && GC_ENABLE_INCREMENTAL=1 ./a.exe
Output:
Switched to incremental mode
Emulating dirty bits with mprotect/signals
<nothing else>

::exit() is called from pthread::exit() (which is invoked thread_init_wrapper (newlib-cygwin/winsup/cygwin/thread.cc):
  if (InterlockedDecrement (&MT_INTERFACE->threadcount) == 0)
    ::exit (0);

Not observed if no incremental mode or if no thread-local-alloc.