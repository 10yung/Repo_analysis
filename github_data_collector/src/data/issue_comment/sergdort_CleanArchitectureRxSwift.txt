`PostsViewModel` is exposing to the view the Post mode as output: `let selectedPost: Driver<Post>`

My question is:
`PostsViewController` knows `Post` data model which means that the view knows the model.
As far as I understand MVVM architecture the UI (view) doesn't need to know the model
(Post). 

What do you think?  is there a place to change the `selectedPost` parameter to be:
`let selectedPost: Driver<PostViewModel>` ?

Hey, I have added the test cases for CreatePostViewModel.
Hope it is useful.
Thanks.
I tried Xcode 10, it works fine, but crashes on Xcode 11 whenever you click Realm Tab.

RunLoopThreadScheduler:

private final class ThreadTarget: NSObject {
    @objc fileprivate func threadEntryPoint() {
        let runLoop = RunLoop.current
***CRASH: com.CleanArchitectureRxSwift.RealmPlatform.Repository (8): signal SIGABRT
        runLoop.add(NSMachPort(), forMode: RunLoop.Mode.default)
        runLoop.run()
    }
}

2019-09-24 22:40:34.205345+1200 CleanArchitectureRxSwift[95204:325374] *** Terminating app due to uncaught exception 'RLMException', reason: 'Primary key property 'uid' does not exist on object 'RMPhoto''


Your domain has entities... but they have absolutely no logic or critical business rules associated to them... it only defines entities and a use case provider protocol...

You have 3 redundant use cases provider implementations that are fully aware of everything and can't talk to each other.

Use cases implementation should have no knowledge about core data, realm, etc... you just write platform agnostic code... using protocols and inject adapters as dependencies.
Builds upon the solution in PR #63 to fix bug #61.

- Changes confirm dialog from Void to Bool observable
- True represents Yes, False represents No
- Dismisses the dialog if disposed.

- Remove Core Data Platform due to Query Kit outdated
- Remove Cocoapods related files
- Fix compiler warning 

- Instructions
```
brew install carthage
carthage update
open *.xcodeproj
```

Tested with: 

Carthage 0.32.0
XCode 10.2
Swift 5 

Hello, 

I can't wrap my head around how to communicate with a child view controller.

I have one trigger from the `ParentViewController` that is needed in the `ChildViewModel` and a second one from the `ChildViewModel` that should trigger some UI changes in the `ParentViewController`:

```
trigger1: ParentViewController (input)> ... (no idea)> ChildViewModel
trigger2: ChildViewModel (output)> ... (no idea)> ParentViewController
```

My code currently looks something like this:
```
final class ParentViewController: UIViewController {
    var viewModel: ParentViewModel?
    private let disposeBag = DisposeBag()

    override func viewDidLoad() {
        super.viewDidLoad()
        bindViewModel()
    }

    private func bindViewModel() {
        guard let viewModel = self.viewModel else {
            fatalError("View Model not set!")
        }
        
        let triggerToChild = rx.someTrigger

        let input = ParentViewModel.Input(triggerToChild: triggerToChild)

        let output = viewModel.transform(input: input)

        output.triggerFromChild
            .drive(rx.someProperty)
            .disposed(by: disposeBag)
    }
}

final class ParentViewModel: ViewModelType {
    struct Input {
       let triggerToChild: Driver<Void>
    }
    struct Output {
       let triggerFromChild: Driver<Void>
    }

    func transform(input: Input) -> Output {
        let triggerFromChild = ??? <===================
        
        return Output(triggerFromChild: triggerFromChild)
    }
}

final class ChildViewController: UIViewController {
    var viewModel: ChildViewModel?
    private let disposeBag = DisposeBag()

    override func viewDidLoad() {
        super.viewDidLoad()
        bindViewModel()
    }

    private func bindViewModel() {
        guard let viewModel = self.viewModel else {
            fatalError("View Model not set!")
        }

        let triggerFromParent = ??? <===================

        let input = ChildViewModel.Input(triggerFromParent: triggerFromParent)

        let output = viewModel.transform(input: input)

        output.triggerFromParent
            .drive(rx.someProperty)
            .disposed(by: disposeBag)
    }
}

final class ChildViewModel: ViewModelType {
    struct Input {
        let triggerFromParent: Driver<Void>
    }
    struct Output {
        let triggerToParent: Driver<Void>
    }

    func transform(input: Input) -> Output {
        let triggerToParent = rx.someTrigger
        return Output(triggerToParent: triggerToParent)
    }
}
```

Maybe someone could point me in the right direction? Thank You!
Hello,

is it possible to make the Post Type in the PostUseCase as associatedtype so I write the required method only once:
I started to write the Code, but  It dont't work.

Here is the General UseCase in Domain:
```
public protocol UseCase {
    associatedtype E
    func many() -> Observable<[E]>
    func save(entry: E) -> Observable<Void>
    func delete(entry: E) -> Observable<Void>
}
```

Here is the General UseCaseProvider in Domain:
```
public protocol UseCaseProvider {        
    associatedtype U: UseCase
    func makeUseCase() -> U
}
```

Here is the UserCaseProvider in CoreDataPlatform:
```
public final class PostUseCaseProvider: Domain.UseCaseProvider {
     private let coreDataStack = CoreDataStack()
    private let postRepository: Repository<Post>

    public init() {
        postRepository = Repository<Post>(context: coreDataStack.context)
    }

    public func makeUseCase() -> Domain.UseCase {
        return PostsUseCase(repository: postRepository)
    }
}
```

Here get the error Type 'UserCaseProvider' does not conform to protocol 'UseCaseProvider' and Protocol 'UseCase' can only be used as a generic constraint because it has Self or associated type requirements'

Any idea?
Now in app, when showing alert with "Are you sure you want to delete this post?", when select "No" Post deleted :-( How to fix this problem? @sergdort 

```
let deleteTrigger = deleteButton.rx.tap.flatMap {
            return Observable<Void>.create { observer in

                let alert = UIAlertController(title: "Delete Post",
                    message: "Are you sure you want to delete this post?",
                    preferredStyle: .alert
                )
                let yesAction = UIAlertAction(title: "Yes", style: .destructive, handler: { _ -> () in observer.onNext(()) })
                let noAction = UIAlertAction(title: "No", style: .cancel, handler: { _ -> () in observer.onNext(()) })
                alert.addAction(yesAction)
                alert.addAction(noAction)

                self.present(alert, animated: true, completion: nil)

                return Disposables.create()
            }
        }

let input = EditPostViewModel.Input(
            editTrigger: editButton.rx.tap.asDriver(),
            deleteTrigger: deleteTrigger.asDriverOnErrorJustComplete(),
            title: titleTextField.rx.text.orEmpty.asDriver(),
            details: detailsTextView.rx.text.orEmpty.asDriver()
        )
```