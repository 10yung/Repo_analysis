Resolves #165 

This PR improves the error messaging in `Unbox` to show the full path through the JSON being parsed so that it's obvious where the error is happening. 

This implementation differs slightly from the one proposed in that issue, in that it uses plain dot syntax for array indices instead of subscripting (`thing.2.property` instead of `thing[2].property`). It shouldn't be hard to change this if subscripting is desired, but I used dot syntax to stay in sync with unbox's keypath syntax for querying into arrays, which looks like it uses dot syntax.

I've also added type information to some of the errors, so that if there's a type unboxing error, you can know exactly what types are being used and add the appropriate protocol conformances to make them work if the JSON data is correct.

Tests have also been added for all the cases I could think of that exercise these new error enhancements.

I hope this helps! Let me know if there's any issues. I'd love to get this integrated quickly :)
I needed support for Int16 and noticed you already had built-in support for 32 and 64 bit ints so I thought a couple of extensions for 16 bit ints would fit right in!
`Unbox` lacks support for enums that have custom `RawRepresentable` that is expressible by literals. 

I needed that in my library [EnumList](https://github.com/polac24/EnumList/), but maybe we could integrate it to `Unbox` library?
This pull request solve the issue #200 üòÅ
Hi, I've recently updated Unbox after migrating a project to Swift 3. There's a regression with JSON where last two components of key path are same.

```json
{
	"message": {
		"message": "value"
	}
}
```

I ran performance tests after making changes and performance is pretty much the same.
Hey! We wanted to share a little feature we included in our project that you guys might also like.

### Motivation
We have a feature in our app that is a list of trips. Some users were reporting that some trips were missing from it. We started researching and found out that the problem was in unboxing an entity of that list.

When unboxing of an entity fails, we always log an error into our non-fatal log and send it to our API. In this case, we didn't have any error about this.

Upon further research, we found that the issue was that the array was using `allowInvalidElements` property so that one item doesn't break the unbox of that collection. In this case, one trip was broken and thus it was not listed.

We use `allowInvalidElements` in multiple places in our app. We want to ensure that whenever an element in a list fails, we're informed about it and that's why we implemented this feature.

### How it works
There's a global logger for all warnings in `Unboxer.warningLogger`. Devs who are using `Unbox` in their project can optionally set a logger in this property to start listening to these notifications.

Internally we added a few calls to this static property from inside the collection mapping methods.

### Further improvement
We identified other types of warnings that we are interested in logging. Imagine you have the following model:

```swift
struct User: Unboxable {
    let name: String
    let profession: Profession? 
}

struct Profession: Unboxable {
   let name: String
}
```

Now, imagine the API sends you the following:

```
{ 
"name": "Nicolas",
"profession": "Engineer"
}
```

When unboxing that JSON, you'll get the following:

```swift
let data = /*json data*/
let user: User = try unbox(data: data)
print(user.name) // "Nicolas"
print(user.profession) // nil
```

So in this example the API is sending a `profession` attribute but we're not correctly parsing it. As it is an optional value, unbox process succeeds correctly but something is wrong.

This could be also logged as a warning to indicate that **the key was present but unboxing failed**.
`allowInvalidElements` wouldn't work when you had mixed types in an array or dictionary, so unboxing something like `[1, 2, null, 3, 4]` as `[Int]` would fail even with `allowInvalidElements`, this fixes that.