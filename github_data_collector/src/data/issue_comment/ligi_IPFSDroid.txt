Hi,

F-Droid maintainer here. We can't update IPFSDroid to 0.12 because it contains prebuilt binaries in `app/src/main/assets` (named `arm` and `x86`). My guess is that it's free software and comes from https://github.com/ipfs/go-ipfs, but our policy requires it to be built from source to make sure it does not contain any proprietary bits. Could you provide some build instructions for go-ipfs binaries or even better integrate go-ipfs into IPFSDroid build system?
Hi.

What would be the best way to start the translation?

Thanks.
It could be possible for people to share IPFS hashes using QR code through phones.  
The downside is that people will be skeptical of such a code, not knowing whether it is URL or IPFS.  
A solution is to implement [COBRA](https://github.com/quake0day/CobraKing) as custom IPFs barcode, since it is unique in color and shape.  
But since COBRA is not in development since 2012, it needs updating and standardisation.
There needs to be client support for such a barcode, and I would recommend adding it to [ORION](https://github.com/Siderus/Orion)  

#### Expected behavior

I expected a prompt of failed download, describing that the download had failed due to lack of usable network connection.

#### Actual behavior

Clicking the download button on IPFSDroid when network connection is put off, leads to a crash.

#### How to reproduce

* Download and Install IPFSDroid from Fdroid.org

* Put off data connection on your device and launch IPFSdroid

* On the homepage, locate a button that reads "DOWNLOAD + INIT FULL NODE"

* Click on the button and notice the out come


##### App version: V0.10

Operating system: Android v4.2.2 jellybean

I was also able to replicate this issue on Android v6.0



#### Proof of work

05-11 20:14:20.780 19952-19952/org.ligi.ipfsdroid E/WindowManager: android.view.WindowLeaked: Activity org.ligi.ipfsdroid.MainActivity has leaked window DecorView@5af496f[] that was originally added here at android.view.ViewRootImpl.<init>(ViewRootImpl.java:417) at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:331) at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:93) at android.app.Dialog.show(Dialog.java:316) at org.ligi.ipfsdroid.IPFSDaemon.download(IPFSDaemon.kt:31) at org.ligi.ipfsdroid.MainActivity$onCreate$1.onClick(MainActivity.kt:31) at android.view.View.performClick(View.java:5610) at android.view.View$PerformClick.run(View.java:22265) at android.os.Handler.handleCallback(Handler.java:751) at android.os.Handler.dispatchMessage(Handler.java:95) at android.os.Looper.loop(Looper.java:154) at android.app.ActivityThread.main(ActivityThread.java:6077) at java.lang.reflect.Method.invoke(Native Method) at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:866) at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:756)


It seems we have the ability to utilize the local IPFS node for adding content to IPFS, and doing an "IPFS cat" to read out a file from IPFS. However, in order to access an image file from IPFS, this app and its browser UI utilizes the ipfs.io IPFS gateway in order to get content. 

**Is it possible to execute an IPFS get command the same way an IPFS cat command is now possible? (perhaps it returns byte data or a File object?).** 

It would be nice to be able to fetch files without depending on a remote IPFS gateway. 

Let me know if this questions should be in the IPFS Kotlin api repo.
Hello, 

it would be good to support `dweb:/ipfs/..`, as it replaced `fs:` some time ago

Reference:  
- https://github.com/ipfs/specs/pull/152#issuecomment-284628862 defines standardized URLs: `ipfs://` and `ipns://`  and URI `dweb:`
- https://github.com/ipfs/ipfs-companion/pull/283#issuecomment-330005791
I think it would be cool if IPFSDroid would also have an exported service (or export the existing service) that allows starting and stopping of the daemon by other processes via Intents.

My use case for this would be controlling the daemon based on the wifi I am connected to, or other variables, via the Automate/Tasker apps.

@ligi I would prepare a PR if that sounds okay to you.
Two recommendations to make things faster.

1. Gzip the bins and then unzip during download.  The `downloadFile` function in the IPFSDaemon would look like:
```
    val zipped = responseBody.source()
    val source = GzipSource(zipped)

    val buffer = Okio.buffer(Okio.sink(getBinaryFile()))

    var total = 0L
    var cnt = 0L

    do {
        cnt = source.read(buffer.buffer(), 1024)
        total += cnt

        val size = cnt / 1024
        progressDialog.setMessage("$size kB")
    } while (cnt > 0)
```
https://github.com/ligi/IPFSDroid/blob/master/app/src/main/java/org/ligi/ipfsdroid/IPFSDaemon.kt#L74-L88

2. Compile the bins with target android-21: `xgo -go 1.8.3 --targets=android-21/* ./cmd/ipfs`, so you get the additional `arm64` bin, which is way faster when applicable (most newer devices):

The node should all by itself not cause that much drain. One way to fix this, would be to shut down the node automatically when the node is not used currently and it is running on battery power.
I just tried accessing localhost:8080 and was pleased to see it working with /ipfs/Qmfoo, but sadly it doesn't work with /ipns/ipfs.io for example. 