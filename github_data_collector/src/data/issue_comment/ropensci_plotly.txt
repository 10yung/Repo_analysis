Plotly uses `snapshotPreprocessOutput` to remove any output values that are randomly generated. This is great.

However, if the render function outputs an error, the result is not a valid JSON. Because of this, the snapshotPreprocessOutput function errors out and frameworks like `shinytest` error out as well.

Example code:
```
library(plotly)
ui <- fluidPage(
  checkboxInput("go", label="Render plot"),
  plotlyOutput("plot")
)
server <- function(input, output, session) {
  output$plot_plotly <- renderPlotly({
    shiny::req(input$go) #induce a silent.error if input$go is FALSE
    ggplot(data.frame(x=rnorm(1000))) + 
      geom_histogram(aes(x=x))
  })
}
shinyApp(ui=ui, server=server)
```

Test code:
```
library(shinytest)
app <- ShinyDriver$new(path="tmp/")
app$getAllValues()
```

`app$getAllValues()` reports an error, because fetching the snapshot URL reports an error 500.

The issue can be easily solved in
https://github.com/ropensci/plotly/blob/bcae42bbeea8d8368fb3ca881243e6acd0c661b4/R/shiny.R#L58
I suggest you check if `value` is a character string before parsing as JSON.
I am trying to do the correlation plot from the package `corrr`. When I tested `ggplotly` it said to request `geom_GeomCurve()` and `geom_GeomTextRepel()` to be implemented

```r
mydata <- mtcars[, c('mpg', 'cyl', 'disp', 'hp', 'carb')]
library(corrr)
p = mydata %>% correlate() %>% network_plot(min_cor=0.6)
ggplotly(p)
```

gives a blank canvas with invisible dots and the warnings:

> Warning messages:
> 1: In geom2trace.default(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]) :
>   geom_GeomCurve() has yet to be implemented in plotly.
>   If you'd like to see this geom implemented,
>   Please open an issue with your example code at
>   https://github.com/ropensci/plotly/issues
> 2: In geom2trace.default(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]) :
>   geom_GeomTextRepel() has yet to be implemented in plotly.
>   If you'd like to see this geom implemented,
>   Please open an issue with your example code at
>   https://github.com/ropensci/plotly/issues
I want to grid 2 different pie charts horizontally, and I used subplot() function:

```
## CODE FOR DATASET BUILDING:

pieplot<- data.frame("phylum" = c("Non-classified genera", "Genera with RA < 1%", "Firmicutes", "Fibrobacteres", "Bacteroidetes", "Bacteroidetes"),
                     "genus" = c("Unclassified", "RA < 1%", "Clostridium", "Fibrobacter", "Bacteroides", "Prevotella"),
                     "sunra" = c(51.123358, 24.086378, 1.798356, 2.405086, 1.115162, 19.471660),
                     "col" = c("#F8766D", "#A3A500", "#00BF7D", "#00B0F6", "#E76BF3", "#E76BF3"))

pieplot2 <- data.frame("phylum" = c('Tenericutes', 'Spirotrichea (no phylum in NCBI)', 'Spirotrichea (no phylum in NCBI)', 'Spirochaetes', 'Proteobacteria', 'Proteobacteria', 'Oligohymenophorea (no phylum in NCBI)', 'Oligohymenophorea (no phylum in NCBI)', 'Oligohymenophorea (no phylum in NCBI)', 'Oligohymenophorea (no phylum in NCBI)', 'Litostomatea (no phylum in NCBI)', 'Heterotrichea (no phylum in NCBI)', 'Genera with RA < 0.1%', 'Firmicutes', 'Firmicutes', 'Firmicutes', 'Firmicutes', 'Firmicutes', 'Firmicutes', 'Firmicutes', 'Firmicutes', 'Firmicutes', 'Fibrobacteres', 'Chytridiomycota', 'Chytridiomycota', 'Chlamydiae', 'Bacteroidetes', 'Bacteroidetes', 'Bacteroidetes', 'Bacteroidetes'),
                     "genus" = c('Anaeroplasma', 'Oxytricha', 'Stylonychia', 'Treponema', 'Succinimonas', 'Succinivibrio', 'Ichthyophthirius', 'Paramecium', 'Pseudocohnilembus', 'Tetrahymena', 'Entodinium', 'Stentor', 'RA < 0.1%', 'Butyrivibrio', 'Clostridium', 'Eubacterium', 'Oribacterium', 'Roseburia', 'Ruminococcus', 'Selenomonas', 'Staphylococcus', 'Succiniclasticum', 'Fibrobacter', 'Neocallimastix', 'Piromyces', 'Chlamydia', 'Alistipes', 'Bacteroides', 'Parabacteroides', 'Prevotella'),
                     "sunra" = c(0.1195849, 0.480911, 0.4329021, 0.966438, 0.1781748, 0.200233, 0.3201339, 0.7458276, 0.2506363, 0.3823471, 0.5071386, 0.8505159, 7.984912, 0.437082, 1.798356, 0.2953472, 0.1759951, 0.1009962, 0.9983227, 0.3406099, 0.3132616, 0.5890616, 2.405086, 0.2516502, 0.1383018, 0.1045194, 0.3005155, 1.115162, 0.1027988, 19.47166),
                     "sunra100" = c(0.2823162, 1.135336, 1.021996, 2.281569, 0.4206354, 0.4727106, 0.7557729, 1.760752, 0.5917027, 0.902646, 1.197254, 2.0079, 18.8508, 1.031864, 4.245563, 0.6972564, 0.4154896, 0.2384321, 2.356843, 0.8041126, 0.7395488, 1.390658, 5.677933, 0.5940965, 0.3265032, 0.2467497, 0.7094578, 2.632676, 0.2426876, 45.96874),
                     "col" = c('#F8766D', '#E18A00', '#E18A00', '#BE9C00', '#8CAB00', '#8CAB00', '#24B700', '#24B700', '#24B700', '#24B700', '#00BE70', '#00C1AB', '#00BBDA', '#00ACFC', '#00ACFC', '#00ACFC', '#00ACFC', '#00ACFC', '#00ACFC', '#00ACFC', '#00ACFC', '#00ACFC', '#8B93FF', '#D575FE', '#D575FE', '#F962DD', '#FF65AC', '#FF65AC', '#FF65AC', '#FF65AC'))

```

```
## CODE FOR PIE CHARTS:
ppie <- plot_ly() %>%
  add_pie(data = pieplot, labels = ~genus, values = ~sunra, name = "Genus", textposition = 'auto', sort = F, 
          textinfo = 'label+percent', textfont = list(size = 14), marker = list(line = list(width = 1)),
          domain = list(x = c(0.01, 0.49))) %>%
  layout(autosize = T, showlegend = F, colorway = pieplot$col,
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

ppie2 <- plot_ly() %>%
  add_pie(data = pieplot2, labels = ~genus, values = ~sunra100, name = "Genus", textposition = 'auto', sort = F, 
          textinfo = 'label', textfont = list(size = 10), marker = list(line = list(width = 1)),
          domain = list(x = c(0.51, 0.99))) %>%
  layout(autosize = T, showlegend = F, colorway = pieplot2$col,
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

## GRID OF BOTH CHARTS:
subplot(list(ppie, ppie2), titleX=FALSE, titleY=FALSE)
```
The problem is that the layouts from each pie plot are being partially ignored, since I suppose they are being merged by which_layout argument from subplot(). 

When printing the charts separately:
![Pie1 (ppie)](https://user-images.githubusercontent.com/43778995/72449335-c6f9ef00-37b8-11ea-803d-5bc72ce61358.png)
![Pie2 (ppie2)](https://user-images.githubusercontent.com/43778995/72449488-0de7e480-37b9-11ea-91e3-24995bfdf481.png)

When using subplot:
![image](https://user-images.githubusercontent.com/43778995/72449604-3ec81980-37b9-11ea-8ea1-cd33604f4dc2.png)

Note that sector colors in second chart are being overrided by the ones in chart 1 (Clostridium and Ruminococcus sectors, for example, should be the same color as Butyrivibrio in chart 2).

Is there a way to do what I want? I assume subplot() does not have an option to take each layout separately, so I need an alternative way to grid both charts without changing their params.
The following ggplot2 command fails when executed in ggplotly:

```r
ggplot()+geom_line(aes(x = c(1,2,3,4), y = c(1,2,3,4), group = c(1,1,2,2))) #works

ggplotly(ggplot()+geom_line(aes(x = c(1,2,3,4), y = c(1,2,3,4), group = c(1,1,2,2)))) #fails

#>Error in UseMethod("group_by_") : 
#> no applicable method for 'group_by_' applied to an object of class "waiver"
```

This error can be addressed by assigning the data to a data frame and explicitly mapping the variables to the data frame within the ggplot call:

```r
 df <- data.frame(x = c(1,2,3,4), y = c(1,2,3,4), group = c(1,1,2,2))

ggplotly(ggplot()+geom_line(data = df, aes(x = x, y = y, group = group))) #works 

ggplotly(ggplot()+geom_line(aes(x = df$x, y = df$y, group = df$group))) #fails

#>Error in UseMethod("group_by_") : 
#> no applicable method for 'group_by_' applied to an object of class "waiver"
```

```r
library(ggplot2)
library(plotly)

df <- data.frame(
  a = "A very long label that needs to be wrapped",
  b = 10,
  c = "A very long label<br>that needs<br>to be wrapped"
)
wrap <- function(x) stringr::str_wrap(x, 10)

ggplotly({
  ggplot(df, aes(a, b)) +
    geom_col() +
    coord_flip() +
    scale_x_discrete(labels = wrap)
})
```
![newplot (6)](https://user-images.githubusercontent.com/11788080/71972792-b6240900-320d-11ea-8a12-0cd5acdb6f10.png)
```
ggplotly({
  ggplot(df, aes(c, b)) +
    geom_col() +
    coord_flip() +
    scale_x_discrete(labels = wrap)
})
```
![newplot (7)](https://user-images.githubusercontent.com/11788080/71972857-cfc55080-320d-11ea-9607-fe702b6b4003.png)

When passing a function to the `labels` argument of `scale_fill_discrete()`, `ggplotly()` does not apply this function to the labels. This works fine, however, when passing the same function to `scale_x_discrete()`.
```r
df <- data.frame(a = c("A", "B"), b = c(7, 9))

p <- ggplot(df, aes(a, b, fill = a)) +
  geom_col() +
  scale_x_discrete(labels = tolower) +
  scale_fill_discrete(labels = tolower)
p
```
![Rplot](https://user-images.githubusercontent.com/11788080/71971976-0c904800-320c-11ea-94da-7be067c0e0e1.png)

```r
plotly::ggplotly(p)
```
![newplot (5)](https://user-images.githubusercontent.com/11788080/71971881-d652c880-320b-11ea-9405-32f88d336e2b.png)

When plotting multiple scatterpolars together in a `subplot`, is there a way to tell it not to plot all the points in the same plot, but having their own facet instead?

```r
library(plotly)
p1 <- plot_ly(
  type = 'scatterpolar',
  r = c(0,1,2,2),
  theta = c(0,45,90,0),
  mode = 'markers'
)

p2 <- plot_ly(
  type = 'scatterpolar',
  r = c(0,1,2,3),
  theta = c(0,45,90,0),
  mode = 'markers'
)

subplot(p1, p2)
```

I want to be able to use the drag and zoom capability of plotly whenever I use the nice rangeslider. 

Here's my toy example code:

`make_trend <- function(n=1000){`
`    x <- seq(n)`
`    y <- c(0, cumsum(rnorm(n = length(x) - 1, sd = sqrt(0.01))))`
`    data.frame(x=x,y=y)`
`}`
`make_trend() %>% `
`    plotly::plot_ly(x=~x,y=~y,mode='lines') %>%`
`    plotly::layout(xaxis=list(rangeslider = list(type = "date")))`



Hi, 

I came across an error while use ggplotly:
The code:
```
library(ggplot2)
library(plotly)

df <- data.frame(x = rep(c('A','B','C'),3), y = 1:9, group = rep(c('x','y','z'),each = 3))
p <- ggplot(df, aes(x = x, y = y, group = group)) + geom_line()

ggplotly(p)

```

errors:

```
loading：‘plotly’

The following object is masked from ‘package:ggplot2’:

    last_plot

The following object is masked from ‘package:stats’:

    filter

The following object is masked from ‘package:graphics’:

    layout


 *** caught segfault ***
address 0xb7, cause 'memory not mapped'

Traceback:
 1: .External("cairo_create_new_device", as.character(ctype), file,     width, height, pointsize, bg, canvas, umpl, dpi, ..., PACKAGE = "Cairo")
 2: dev_fun(file = tempfile(), width = width %||% 640, height = height %||%     480)
 3: gg2list(p, width = width, height = height, tooltip = tooltip,     dynamicTicks = dynamicTicks, layerData = layerData, originalData = originalData,     source = source, ...)
 4: ggplotly.ggplot(p)
 5: ggplotly(p)
An irrecoverable exception occurred. R is aborting now ...
Segment error (core dumped)

```

sessionInfos:
```
R version 3.4.4 (2018-03-15)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.5 LTS

Matrix products: default
BLAS: /usr/lib/libblas/libblas.so.3.6.0
LAPACK: /usr/lib/lapack/liblapack.so.3.6.0

locale:
 [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=zh_CN.UTF-8        LC_COLLATE=zh_CN.UTF-8
 [5] LC_MONETARY=zh_CN.UTF-8    LC_MESSAGES=zh_CN.UTF-8
 [7] LC_PAPER=zh_CN.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] plotly_4.9.1  ggplot2_3.1.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3        magrittr_1.5      tidyselect_0.2.5  munsell_0.4.3
 [5] viridisLite_0.2.0 colorspace_1.3-1  R6_2.2.2          rlang_0.4.2
 [9] httr_1.2.1        plyr_1.8.4        dplyr_0.8.3       tools_3.4.4
[13] grid_3.4.4        data.table_1.10.0 gtable_0.2.0      withr_2.1.2
[17] htmltools_0.4.0   lazyeval_0.2.0    assertthat_0.2.0  digest_0.6.12
[21] tibble_2.1.3      crayon_1.3.4      purrr_0.2.5       tidyr_0.8.2
[25] htmlwidgets_1.5.1 glue_1.3.0        compiler_3.4.4    pillar_1.4.3
[29] scales_0.5.0      jsonlite_1.6      pkgconfig_2.0.2
```

Any problem about my code?

Best,
Gerde
See #1673