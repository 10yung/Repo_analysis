Should probably add an empty `geom_sf()` layer like `layer_spatial.Raster()` and family to ensure the plot behaves as expected


Prepare for release: 
 
* [ ] `devtools::check()` 
* [ ] `devtools::check_win_devel()` 
* [ ] `rhub::check_for_cran()` 
* [ ] `revdepcheck::revdep_check(num_workers = 4)` 
* [ ] [Polish NEWS](https://style.tidyverse.org/news.html#news-release) 
* [ ] Polish pkgdown reference index 
* [ ] Draft blog post 
 
Submit to CRAN: 
 
* [ ] `usethis::use_version('major')` 
* [ ] Update `cran-comments.md` 
* [ ] `devtools::submit_cran()` 
* [ ] Approve email 
 
Wait for CRAN... 
 
* [ ] Accepted :tada: 
* [ ] `usethis::use_github_release()` 
* [ ] `usethis::use_dev_version()` 
* [ ] Finish blog post 
* [ ] Tweet 
* [ ] Add link to blog post in pkgdown news menu 

For putting multiple maps on one page with `gridExtra::arrangeGrob()` I had to fiddle with all units and the text sizes.

The parameter controlling the size of the text is named differently and has different effects at least across `annotation_scale(..., text_cex=0.5)` and `annotation_north_arrow(..., style=north_arrow_orienteering(text_size=4)`.

Would it be possible to harmonize the way the text size works?
Would it be possible to have a parameter similar to `tmap`'s `tm_scale_bar(breaks=c(0, 100), ...)` to tell `annotation_scale()` to draw only one section instead of the black-white pattern?

A nice side effect could be to provide control over the size for the scale bar in map units. Although, that is probably a separate feature wish.
need to plot with `hjust = 1, vjust = 1` for alignment
Not strictly a code issue, but it would be good if this was registered here:

https://www.ggplot2-exts.org/
I just found out of the existence of `ggspatial` thanks to the new `r-spatial` [blogs](https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html), and it looks interesting.

In the last few months I found myself increasingly resorting to use `stars` rather than `raster`. It's still a young project, but it's evolving very fast. It interfaces well with `sf`, the author is the same so you can expect the same level of quality there. You could consider integrating `stars` in a similar way to the `raster` integration.

`stars` does not yet have a natural bridge to `ggplot` as `sf` does, so currently I usually transform data to `sf` polygons prior to plotting: this is slow, but allows to change projections without regridding. Do you do the same with `raster`, or do you use `geom_tile` (or `_raster`)? IIRC the latter two did not really play well with coordinate transformations.
Just extending discussion from #9 to be its own issue.

The idea is to delay any action involving the original raster object until there is a known height, width, and target resolution, so that large rasters can be passed to `annotation_spatial.Raster()` without fear of taking forever to render.

Question for @mdsumner: What is the series of events that usually takes place during this operation? I had been thinking something like: 

```r
target_res <- calculate_target_res(bounds, height, width, dpi)

st_make_grid(plot_bounds, cellsize = target_res) %>% 
  st_transform(raster_crs) %>% 
  raster::extract(raster, .) %>%
  make_a_raster_grob()
```

...but maybe it's a bad idea to reverse project a grid from the `coord_sf()` CRS to the raster CRS and resample that way? The other option would be to `raster::projectRaster() %>% raster::resample()`? Or maybe you've solved this in the hypertidy/lazyraster package?

Would also be nice to apply this to a `rasterGrob()` somehow, since these also take forever to render? 