It looks like `validate_on_write` has been removed with this commit (back in 2014) but it still is in readme. https://github.com/minimagick/minimagick/commit/b2aa5e300b46fb888729251318fda1f3f90fa341#diff-da493690b64035c0e30726e3e29b5b93
I am getting the warning using this gem with ruby 2.7:

```bash
/usr/local/rvm/gems/ruby-2.7.0@myapp/gems/mini_magick-4.9.5/lib/mini_magick/image.rb:105: warning: Using the last argument as keyword parameters is deprecated
```
Continuing from #59 and #173 .

It is surprising to me that a library intended to be a complete wrapper for ImageMagick has no functionality to create a new image to draw on without an outside library.

As of at least 2015, the current stance is that "this is actually out of scope of MiniMagick" which is completely ridiculous. The following (or something similar) should be possible:

```
image = MiniMagick::Image.create()
image.size(800,600)
image.write("test.png")
```
I'm not sure if this is a bug here that is just now manifesting, or a bug in IM (or both?). According to their changelog, it looks like they somewhat recently revised the PDF reader. 

Given a PDF exported by Adobe Illustrator, the identify command now outputs
`Mt Moon.pdf AI 810x1242 810x1242+0+0 16-bit ColorSeparation CMYK 3.83776MiB 0.010u 0:00.010`

What it used to output is
`Mt Moon.pdf PDF 810x1242 810x1242+0+0 16-bit ColorSeparation CMYK 3.83776MiB 0.400u 0:00.389`

With -verbose added on, they both give the correct mime-type:
`Image: Mt Moon.pdf
  Format: AI (Adobe Illustrator CS2)
  Mime type: application/pdf`

`Image: Mt Moon.pdf
  Format: PDF (Portable Document Format)
  Mime type: application/pdf`

The `mime_type` method in MiniMagick doesn't actually use that value, it takes the format (AI or PDF) and just adds it onto image/.

```ruby
def mime_type
  "image/#{self["format"].downcase}"
end
```
So what we now get is `image/ai` instead of `image/pdf`. Even `image/pdf` isn't technically right, it should be `application/pdf`

An easy way to get the proper value
```ruby
def mime_type
  self["data"]["mimeType"]
end
```

This would of course be breaking to everyone expecting the old behavior of outputting image/pdf.
I'd like to ensure that an attacker cannot execute arbitrary code on my server by (for example) uploading a carefully crafted Postscript with a JPEG file extension.  Is there a way to take advantage of the ImageMagick feature that forces an input file format by specifying a module prefix on the filename, such as "jpg:some-file.jpg"?  This is suggested as a security precaution for both [ImageMagick](https://imagemagick.org/script/security-policy.php) (see "Other Security Considerations") and [GraphicsMagick](http://www.graphicsmagick.org/security.html) (see "Safe Use Of The Software", item 6).
Hello.

By raising the version of ghostscript, it is no longer possible to create a PDF file that we were able to create.

## Software version

- ubuntu 16.04
- minimagick 4.9.2
- ghostscript 9.25
- ImageMagick 6.8.9-9

## Target file

[ng.pdf](https://github.com/minimagick/minimagick/files/2485539/ng.pdf)

## procedure

```ruby
irb(main):001:0> path = 'ng.pdf'
=> "ng.pdf"
irb(main):002:0> MiniMagick::Image.new(path).dimensions
Traceback (most recent call last):
       12: from bin/rails:9:in `<main>'
       11: from bin/rails:9:in `require'
       10: from /var/www/crevo/shared/bundle/ruby/2.5.0/gems/railties-5.0.7/lib/rails/commands.rb:18:in `<top (required)>'
        9: from /var/www/crevo/shared/bundle/ruby/2.5.0/gems/railties-5.0.7/lib/rails/commands/commands_tasks.rb:49:in `run_command!'
        8: from /var/www/crevo/shared/bundle/ruby/2.5.0/gems/railties-5.0.7/lib/rails/commands/commands_tasks.rb:78:in `console'
        7: from /var/www/crevo/shared/bundle/ruby/2.5.0/gems/railties-5.0.7/lib/rails/commands/console_helper.rb:9:in `start'
        6: from /var/www/crevo/shared/bundle/ruby/2.5.0/gems/railties-5.0.7/lib/rails/commands/console.rb:65:in `start'
        5: from (irb):2
        4: from /var/www/crevo/shared/bundle/ruby/2.5.0/gems/mini_magick-4.8.0/lib/mini_magick/image.rb:132:in `block in attribute'
        3: from /var/www/crevo/shared/bundle/ruby/2.5.0/gems/mini_magick-4.8.0/lib/mini_magick/image/info.rb:17:in `[]'
        2: from /var/www/crevo/shared/bundle/ruby/2.5.0/gems/mini_magick-4.8.0/lib/mini_magick/image/info.rb:43:in `cheap_info'
        1: from /var/www/crevo/shared/bundle/ruby/2.5.0/gems/mini_magick-4.8.0/lib/mini_magick/image/info.rb:62:in `rescue in cheap_info'
MiniMagick::Invalid (image data can't be read)
irb(main):003:0> image = MiniMagick::Image.new(path)
=> #<MiniMagick::Image:0x00005576795d4630 @path="tmp/ng.pdf", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795d4608 @path="tmp/ng.pdf", @info={}>>
irb(main):004:0> image.pages
=> [#<MiniMagick::Image:0x00005576795dabe8 @path="tmp/ng.pdf[0]", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795dabc0 @path="tmp/ng.pdf[0]", @info={}>>, #<MiniMagick::Image:0x00005576795dab20 @path="tmp/ng.pdf[1]", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795daaf8 @path="tmp/ng.pdf[1]", @info={}>>, #<MiniMagick::Image:0x00005576795daa58 @path="tmp/ng.pdf[2]", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795daa30 @path="tmp/ng.pdf[2]", @info={}>>, #<MiniMagick::Image:0x00005576795da990 @path="tmp/ng.pdf[3]", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795da968 @path="tmp/ng.pdf[3]", @info={}>>, #<MiniMagick::Image:0x00005576795da8c8 @path="tmp/ng.pdf[4]", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795da8a0 @path="tmp/ng.pdf[4]", @info={}>>, #<MiniMagick::Image:0x00005576795da800 @path="tmp/ng.pdf[5]", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795da7d8 @path="tmp/ng.pdf[5]", @info={}>>, #<MiniMagick::Image:0x00005576795da738 @path="tmp/ng.pdf[6]", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795da710 @path="tmp/ng.pdf[6]", @info={}>>, #<MiniMagick::Image:0x00005576795da670 @path="tmp/ng.pdf[7]", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795da648 @path="tmp/ng.pdf[7]", @info={}>>, #<MiniMagick::Image:0x00005576795da5a8 @path="tmp/ng.pdf[8]", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795da580 @path="tmp/ng.pdf[8]", @info={}>>, #<MiniMagick::Image:0x00005576795da4e0 @path="tmp/ng.pdf[9]", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795da4b8 @path="tmp/ng.pdf[9]", @info={}>>, #<MiniMagick::Image:0x00005576795da418 @path="tmp/ng.pdf[10]", @tempfile=nil, @info=#<MiniMagick::Image::Info:0x00005576795da3f0 @path="tmp/ng.pdf[10]", @info={}>>]
irb(main):006:0> image.identify
=> "   **** Error reading a content stream. The page may be incomplete.\n               Output may be incorrect.\n   **** Error: Form stream has unbalanced q/Q operators (too many q's)\n               Output may be incorrect.\nError: Ignoring invalid annotation, output may be incorrect.\n   **** Error reading a content stream. The page may be incomplete.\n               Output may be incorrect.\n   **** Error: Form stream has unbalanced q/Q operators (too many q's)\n               Output may be incorrect.\nError: Ignoring invalid annotation, output may be incorrect.\ntmp/ng.pdf PBM 595x841 595x841+0+0 16-bit Bilevel Gray 63.1KB 0.000u 0:00.000"

```

## Description

It is a cause.

By raising the version of ghostscript, the contents outputted in the error log will be returned as the result of standard output.

https://github.com/minimagick/minimagick/blob/master/lib/mini_magick/shell.rb#L14

|  |stdout  |stderr  | status|
|---|---|---|---|
|ghostscript(9.18)  |"PBM 595 841 63139B"  |"   **** Error reading a content stream. The page may be incomplete.\n   **** Warning: Form stream has unbalanced q/Q operators (too many q's)\n   **** Error reading a content stream. The page may be incomplete.\n   **** Warning: Form stream has unbalanced q/Q operators (too many q's)\n\n   **** This file had errors that were repaired or ignored.\n   **** The file was produced by: \n   **** >>>> Adobe PDF library 7.77 <<<<\n   **** Please notify the author of the software that produced this\n   **** file that it does not conform to Adobe's published PDF\n   **** specification.\n\n"  |0|
|ghostscript(9.25)  |   **** Error reading a content stream. The page may be incomplete.\n               Output may be incorrect.\n   **** Error: Form stream has unbalanced q/Q operators (too many q's)\n               Output may be incorrect.\nError: Ignoring invalid annotation, output may be incorrect.\n   **** Error reading a content stream. The page may be incomplete.\n               Output may be incorrect.\n   **** Error: Form stream has unbalanced q/Q operators (too many q's)\n               Output may be incorrect.\nError: Ignoring invalid annotation, output may be incorrect.\nPBM 595 841 63139B"  |""  |0|

As a result, parsing on minimagick side fails and it is an error.

https://github.com/minimagick/minimagick/blob/master/lib/mini_magick/image/info.rb#L45

```ruby
[3] pry(#<MiniMagick::Image::Info>)> self["%m %w %h %b"].split(" ")
=> ["****",
 "Error",
 "reading",
 "a",
 "content",
 "stream.",
 "The",
 "page",
 "may",
 "be",
...
```

## Approach

approach

- Look at the version of ghostscript and change parse processing
→ Originally it is a problem of ghostscript
- Expect ghostscript to be modified
→ It will be a problem that software can not be used until then

I think whether the former is good.

To be honest, since the output of ghostscript has been changed, it is not easy to deal with it here
hi, thanks for helping take a look at this. 

The closest I found so far is "Getting MiniMagick::Invalid due to improper image header " 

Minimgack started failing out of the blue and I can't seem to find the cause of it. Most importantly it doesn't return a description as to why it has failed. 

`identify /tmp/mini_magick20181016-3982-1mu58uf` failed with error:

In my error logs it only shows a 500 

MiniMagick::Image.new file.path
MiniMagick::Image.open(node['xlink:href'])
MiniMagick::Tool::Convert.new 

Thanks! 


I use Minimagick and my folder /tmp don't stop growing with file like  mini_magick20180220-95997-y59ae0.jpg.

I use minimagick like this : 

```
begin
  image = MiniMagick::Image.open("#{absolute_path}/#{file}")
  image.thumbnail(THUMBNAILS_DIMENSION)
  image.write "#{thumbnails_absolute_path}/#{file}"
rescue StandardError

end
```

I miss something ? 
Using minimagick with imagemagick 7 cause an error on some images since the result of convert json may contain values like:
```
... 
 "image": {
    "name": null, !!!!!!!!!!!!!!!!!!!
...
```
and
```
...
 "skewness": -5.44371,
        "entropy": nan         !!!!!!!!!!!!!!!!!!!!
      }
...
I fixed this with a hack in info.rb
```
      def data
        raise Error, "MiniMagick::Image#data isn't supported on GraphicsMagick. Use MiniMagick::Image#details instead." if MiniMagick.graphicsmagick?

        @info["data"] ||= (
          json = MiniMagick::Tool::Convert.new do |convert|
            convert << path
            convert << "json:-"  #### added -
          end
          ### nan -> NaN, accept NaN when parsing JSON
          data = JSON.parse(json.gsub(': nan', ': NaN'), allow_nan: true)
          data = data.fetch(0) if data.is_a?(Array)
          data.fetch("image")
        )
      end
```
The code avoids "name": null and replace ': nan' with ': Nan'. By enabling the proper option to accept NaN the result can now be parsed.
I can provide an example image when necessary.

The gem is linking to Rubyforge.