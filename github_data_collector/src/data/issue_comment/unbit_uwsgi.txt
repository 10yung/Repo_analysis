
During installation, the gem attempts to download install.sh from `uwsgi.it/install`, but the response body says the file has been moved permanently. 
Redirecting extconf.rb to pull the file from github allows the install to complete as normal.
So this just started happening. I rebuilt a virtual environment for a new deployment and installed uWSGI 2.0.15. It now segfaults at startup. 

The strange thing is, if I go to the old virtualenv, the same version of uWSGI is installed here, it runs fine. Also this seems to happen on just 1 of our servers. The others are running uWSGI fine and are also FreeBSD 12.1.

Here is the traceback:

```
(env) grinch:ah-web01 ~/envs/grinch/releases/20200110223312/grinch $ uwsgi --ini deploy/uwsgi.ini
[uWSGI] getting INI configuration from deploy/uwsgi.ini
*** Starting uWSGI 2.0.15 (64bit) on [Mon Jan 13 09:20:11 2020] ***
compiled with version: 4.2.1 Compatible FreeBSD Clang 8.0.1 (tags/RELEAS
E_801/final 366581) on 11 January 2020 06:51:20
os: FreeBSD-12.1-RELEASE-p1 FreeBSD 12.1-RELEASE-p1 GENERIC
nodename: ah-web01
machine: amd64
clock source: unix
pcre jit disabled
detected number of CPU cores: 2
current working directory: /usr/home/grinch/envs/grinch/releases/20200110223312/grinch
writing pidfile to /tmp/uwsgi_grinch2.pid
detected binary path: /usr/home/grinch/envs/grinch/releases/20200110223312/grinch/env/bin/uwsgi
chdir() to /home/grinch/envs/grinch/releases/20200110223312/grinch
your processes number limit is 6656
your memory page size is 4096 bytes
 *** WARNING: you have enabled harakiri without post buffering. Slow upload could be rejected on post-unbuffered webservers ***
detected max file descriptor number: 57753
lock engine: POSIX semaphores
thunder lock: disabled (you can enable it with --thunder-lock)
uwsgi socket 0 bound to UNIX address /tmp/uwsgi_grinch2.sock fd 3
Python version: 3.7.6 (default, Jan  2 2020, 01:19:56)  [Clang 6.0.1 (tags/RELEASE_601/final 335540)]
PEP 405 virtualenv detected: /home/grinch/envs/grinch/releases/20200110223312/grinch/env
Set PythonHome to /home/grinch/envs/grinch/releases/20200110223312/grinch/env
*** Python threads support is disabled. You can enable it with --enable-threads ***
Python main interpreter initialized at 0x800fb9a00
your server socket listen backlog is limited to 100 connections
your mercy for graceful operations on workers is 60 seconds
mapped 218280 bytes (213 KB) for 2 cores
*** Operational MODE: preforking ***
added /home/grinch/envs/grinch/releases/20200110223312/grinch/ to python
path.
!!! uWSGI process 1349 got Segmentation Fault !!!
*** backtrace of 1349 ***
0x2c531c <uwsgi_backtrace+0x2c> at /usr/home/grinch/envs/grinch/releases/20200110223312/grinch/env/bin/uwsgi
0x2c57d6 <uwsgi_segfault+0x26> at /usr/home/grinch/envs/grinch/releases/20200110223312/grinch/env/bin/uwsgi
0x8003633c0 <_pthread_sigmask+0x530> at /lib/libthr.so.3
*** end of backtrace ***
VACUUM: pidfile removed.
VACUUM: unix socket /tmp/uwsgi_grinch2.sock removed.
(env) grinch:ah-web01 ~/envs/grinch/releases/20200110223312/grinch $
```

Here is the contents of uwsgi.ini

```
[uwsgi]
chdir=/home/grinch/envs/grinch/releases/20200110223312/grinch
module=web.wsgi:application
env=DJANGO_SETTINGS_MODULE=web.settings
pp=/home/grinch/envs/grinch/releases/20200110223312/grinch
home=/home/grinch/envs/grinch/releases/20200110223312/grinch/env
master=true
pidfile=/tmp/uwsgi_grinch2.pid
vacuum=true
enable-proxy-protocol=true
max-requests=5000
uid=grinch
gid=grinch
processes=2
harakiri=60
socket=/tmp/uwsgi_grinch2.sock
chmod-socket=777
touch-reload=/home/grinch/envs/grinch/releases/20200110223312/grinch/deploy/touch_to_reload.wsgi
```

I've tried with 2.0.18 and it's the same thing.

Any ideas why uwsgi would be crashing?
Hi, I was unable to find anything related to python 3.8 support. Is python 3.8 support is already in the pipeline or can it already be used in some official capacity? Thanks!
Hi. I'm facing a problem with Flask + uWSGI and Zuul Gateway.

The very first response is OK but when I reload the page, Zuul Gateway says 
```
Caused by: java.lang.RuntimeException: org.apache.http.NoHttpResponseException: 192.168.1.76:5000 failed to respond
```

When I put Nginx on top of uWSGI, it works without any problem.

My config:
```
[uwsgi]
wsgi-file = run.py
callable = app
http = :5000
processes = 4
threads = 2
master = true
vacuum = true
die-on-term = true
```

I'm using `uWSGI==2.0.18`.
uwsgi version 2.0.18.
the count of core files been dumped equals the count of workers.
it looks like something cause lock wrong when workers are starting. Here is the gdb screen shot.

```
$gdb /home/admin/app/virtualenv/bin/uwsgi core-510-uwsgi-2368-1576807475
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.1.alios7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/admin/app/virtualenv/bin/uwsgi...done.
[New LWP 2368]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".Missing separate debuginfo for /home/admin/appvirtualenv/lib/python2.7/lib-dynload/../../libncursesw.so.6
Missing separate debuginfo for /home/admin/app/virtualenv/lib/python2.7/lib-dynload/../.././libtinfow.so.6
Missing separate debuginfo for /home/admin/app/virtualenv/lib/python2.7/lib-dynload/../../libffi.so.6
Core was generated by `uwsgi --ini /home/admin/app/uwsg'.
Program terminated with signal 3, Quit.
#0  0x00007efe1dad5b91 in __pthread_mutex_lock_full () from /lib64/libpthread.so.0
Missing separate debuginfos, use: debuginfo-install cyrus-sasl-lib-2.1.26-19.2.1.alios7.x86_64 g-python-2.7.15-3.x86_64 glibc-2.17-222.alios7.1.x86_64 keyutils-libs-1.5.8-3.1.alios7.x86_64 libcom_err-1.43.5-8.alios7.x86_64 libidn-1.28-4.1.alios7.x86_64 libselinux-2.5-12.1.alios7.x86_64 libssh2-1.4.3-10.1.alios7.x86_64 libuuid-2.23.2-43.alios7.2.x86_64 openldap-2.4.44-5.alios7.x86_64 pcre-8.32-15.1.alios7.x86_64
(gdb) bt
#0  0x00007efe1dad5b91 in __pthread_mutex_lock_full () from /lib64/libpthread.so.0
#1  0x000000000045612d in uwsgi_lock_fast ()
#2  0x000000000041f7dd in wsgi_req_accept ()
#3  0x0000000000466dd6 in simple_loop_run ()
#4  0x0000000000466c0e in simple_loop ()
#5  0x000000000046b124 in uwsgi_ignition ()
#6  0x000000000046f9ed in uwsgi_worker_run ()
#7  0x000000000046ffdf in uwsgi_run ()
#8  0x000000000041ea9e in main ()
(gdb)
```
after upgrade to mac 10.15.2 (19C57). uwsgi fails. I reinstall using pip, but still no luck.  There is no error  msg, just do not work any more. 

I wonder if uwsgi works on catalina or not. Thanks.


Ah the joys of variadic arguments in C...

So, when using `zend_parse_parameters()`, PHP internally loops through the type specifiers and accordingly uses `va_arg()` to get the corresponding argument.

Since the arguments are expected to be pointers to the corresponding values, the size of them *does* matter, because PHP simply writes to the corresponding address with a size of `size_t`.

If we for example pass a pointer to a 32bit integer and PHP writes 64 bits, we have an overflow of 4 bytes.

From [`README.PARAMETER_PARSING_API`](https://github.com/php/php-src/blob/fdf45debdf49e636d007ca43270cac57061304cd/docs/parameter-parsing-api.md#note-on-64bit-compatibility) in the PHP source tree:

> Please note that since version 7 PHP uses zend_long as integer type
> and zend_string with size_t as length, so make sure you pass
> zend_longs to "l" and size_t to strings length (i.e. for "s" you need
> to pass char * and size_t), not the other way round!
>
> Both mistakes might cause memory corruptions and segfaults:
>
> 1.  char *str;
>      long str_len; /* XXX THIS IS WRONG!! Use size_t instead. */
>      zend_parse_parameters(ZEND_NUM_ARGS(), "s", &str, &str_len)
>
> 2.  int num; /* XXX THIS IS WRONG!! Use zend_long instead. */
>      zend_parse_parameters(ZEND_NUM_ARGS(), "l", &num)

To fix this, I changed the types accordingly to use `size_t` and `zend_long` if the PHP major version is >= 7.
https://github.com/unbit/uwsgi/blob/cff962041975e8d7bf540bd121cb2268395cabde/core/utils.c#L3666

Thinking that when opening an pidfile for writing the pid, have to print out error if the pidfile does not exist, instead of creating the pidfile? if it exists, then pass and keep going.
Commit f2e0142 set the default for `uwsgi.need_app` to `1`. This results
in the termination of uWSGI when using the PHP plugin only as this plugin
does not register any app.

This feels a bit like a workaround.

I ran into this while attempting to test current master-tree (uwsgi-2.0 is not affected as f2e0142 isn't there) with the following PHP config file (and it was reported in #1987 as well).
```
[uwsgi]
master = true
workers = 16

plugins = http,php

http-modifier1 = 14
http = :8080

php-docroot = ./t/php/
php-index = test.php
```