First time using jeweler.

When running any rake command I get the error:

```
NoMethodError: undefined method `dependencies_for' for #<Bundler::Runtime:0x007fa38389e1c0>
Did you mean?  dependencies
/Users/Dee/.rvm/gems/ruby-2.3.1/gems/jeweler-2.0.1/lib/jeweler/specification.rb:73:in `block in set_jeweler_defaults'
/Users/Dee/.rvm/gems/ruby-2.3.1/gems/jeweler-2.0.1/lib/jeweler/specification.rb:41:in `chdir'
/Users/Dee/.rvm/gems/ruby-2.3.1/gems/jeweler-2.0.1/lib/jeweler/specification.rb:41:in `set_jeweler_defaults'
/Users/Dee/.rvm/gems/ruby-2.3.1/gems/jeweler-2.0.1/lib/jeweler.rb:37:in `initialize'
/Users/Dee/.rvm/gems/ruby-2.3.1/gems/jeweler-2.0.1/lib/jeweler/tasks.rb:52:in `new'
/Users/Dee/.rvm/gems/ruby-2.3.1/gems/jeweler-2.0.1/lib/jeweler/tasks.rb:52:in `jeweler'
/Users/Dee/.rvm/gems/ruby-2.3.1/gems/jeweler-2.0.1/lib/jeweler/tasks.rb:154:in `block (2 levels) in define'
/Users/Dee/.rvm/gems/ruby-2.3.1/gems/rake-12.3.1/exe/rake:27:in `<top (required)>'
/Users/Dee/.rvm/gems/ruby-2.3.1/bin/ruby_executable_hooks:15:in `eval'
/Users/Dee/.rvm/gems/ruby-2.3.1/bin/ruby_executable_hooks:15:in `<main>'
Tasks: TOP => version:write
(See full trace by running task with --trace)
```
I tried updating bundler to the latest version (1.16.6) and am still encountering the error.
While the basic setup in the Rakefile is done,
no (failing) example tests a generated.

The documentation (at least for --shoulda) states it would generate a failing test.
The version reported by juwelier is different from the gems version (see bash extract below).
It is simply the version which is hardcoded in version.rb.
Is this intended?

```
MM ~/git$ gem install juwelier
Fetching: juwelier-2.2.3.gem (100%)
Successfully installed juwelier-2.2.3
Parsing documentation for juwelier-2.2.3
Installing ri documentation for juwelier-2.2.3
Done installing documentation for juwelier after 1 seconds
1 gem installed
MM ~/git$ juwelier -v
Version: 2.1.0
```
Currently, I am putting a lot of new features into Juwelier, but maintaining 2 code bases can be a bit cumbersome, so eventually I want to merge both. However, the name space issue looms large, and I may have to do some nasty tricks to make it work, because I do NOT want to abandon those using Juwelier, and many are still using Jeweler.

So what I might wind up doing is, after the merge, I will simply do simultaneous releases to both places. I am open to suggestions on better approaches. RubyGem does not appear to have a "transitional package" option like apt-get does. 

Any thoughts and criticisms are welcome. I won't begin on this until I clear out the outstanding issues with both code bases.
Hello,

When I try to start a new gem project with `jeweler hello-world`, I'm greeted with the following message:

```
Encountered an error while adding origin remote. Maybe you have some weird settings in ~/.gitconfig?
/home/tim/.rvm/gems/ruby-2.2.3/gems/git-1.3.0/lib/git/lib.rb:937:in `command': git '--git-dir=/tmp/hello-world/.git' '--work-tree=/tmp/hello-world' remote 'add' '--' 'origin' 'git@github.com:pixelastic/hello-world.git'  2>&1:fatal: remote origin already exists. (Git::GitExecuteError)
        from /home/tim/.rvm/gems/ruby-2.2.3/gems/git-1.3.0/lib/git/lib.rb:688:in `remote_add'
        from /home/tim/.rvm/gems/ruby-2.2.3/gems/git-1.3.0/lib/git/base.rb:371:in `add_remote'
        from /home/tim/.rvm/gems/ruby-2.2.3/gems/jeweler-2.0.1/lib/jeweler/generator.rb:279:in `block in create_version_control'
        from /home/tim/.rvm/gems/ruby-2.2.3/gems/jeweler-2.0.1/lib/jeweler/generator.rb:258:in `chdir'
        from /home/tim/.rvm/gems/ruby-2.2.3/gems/jeweler-2.0.1/lib/jeweler/generator.rb:258:in `create_version_control'
        from /home/tim/.rvm/gems/ruby-2.2.3/gems/jeweler-2.0.1/lib/jeweler/generator.rb:129:in `run'
        from /home/tim/.rvm/gems/ruby-2.2.3/gems/jeweler-2.0.1/lib/jeweler/generator/application.rb:34:in `run!'
        from /home/tim/.rvm/gems/ruby-2.2.3/gems/jeweler-2.0.1/bin/jeweler:9:in `<top (required)>'
        from /home/tim/.rvm/gems/ruby-2.2.3/bin/jeweler:23:in `load'
        from /home/tim/.rvm/gems/ruby-2.2.3/bin/jeweler:23:in `<main>'
        from /home/tim/.rvm/gems/ruby-2.2.3/bin/ruby_executable_hooks:15:in `eval'
        from /home/tim/.rvm/gems/ruby-2.2.3/bin/ruby_executable_hooks:15:in `<main>'

```

I do have something related to the `origin` remote in my `~/.gitconfig`:

```
[remote "origin"]
  prune = true
```

(This allow [auto pruning of deleted remote branches when doing a pull](http://stackoverflow.com/questions/18308535/automatic-prune-with-git-fetch-or-pull))

Still, `jeweler` seems to be choking on it because it is trying to create a remote that already exists. Removing the config from my `.gitconfig` lets me use the gem correctly.

I'm using git v2.8.0.rc1

When I'm developing a new gem and forget to set the initial version and then I run `rake install`, the gem installs into a rubygem dir under `gem_name-` which prevents rubygems from working correctly. I end up reinstalling ruby completely.

There should be a check not allowing to perform `rake install` unless the version is set.

With the following options (in 2.0.1) :

```
jeweler --rspec --shoulda  --user-name dgmora --user-email david@somewhere.com --github-username dgmora --git-remote heythere --create-repo --yard heythere
```

rspec folder is not created, TestUnit is used instead:

```
create  .gitignore
create  Rakefile
create  Gemfile
create  LICENSE.txt
create  README.rdoc
create  .document
create  lib
create  lib/heythere.rb
create  test
create  test/helper.rb
create  test/test_heythere.rb
```

If I **swap** `--rspec` and `--shoulda` options, the rspec folder is generated as expected.

I just tried to find the right workflow using Jeweler in combination with [git-flow](https://danielkummer.github.io/git-flow-cheatsheet/) for my [db_clustering](https://github.com/Dschee/db_clustering) project. In git-flow I'm used to start a release branch (e.g. `release/1.1.2`), do my release there so run `rake version:bump:patch` and `rake release` and merge the release branch with the git-flow scripts (which will merge it to master and develop and checkout the develop branch).

The problem is that `rake release` automatically creates a `.gemspec` file and uses the `master` branch (instead of the current branch) to do the release â€“ which is not what I was expecting since I was in a different branch. This leads to the re-release of the old `master` branch code under the new version tag. Also simply doing the `gem version:bump:patch` in the release branch and running `rake release` after merging it to the master branch didn't seem right since this will prevent the `.gemspec` file from being updated within the `develop` branch and I have to manually prevent the merging to the master branch in git-flow from creating a `1.1.2` flag.

For now I have stopped using git-flow within that library until I'm sure how to do it the right way. Are there any thoughts on how to use git-flow alongside jeweler?

Thanks in advance for any help.

We've done this on a bunch of gems lately, it would be cool to see it supported in jeweler as an alternative approach to the exclude/includes configuration:

https://gist.github.com/l8nite/18e1aa073d4c758bf440

The advantage with this approach is that the syntax/etc utilizes .gitignore syntax while applying the results to which files are included in your gem.

```
[nbdev@davidhuie-8 reactorc (01f294b)]$ rake gemspec
rake aborted!
NameError: uninitialized constant Jeweler::Git
/Users/nbdev/.rvm/gems/ruby-2.1.2@reactorc/gems/jeweler-2.0.1/lib/jeweler.rb:40:in `initialize'
/Users/nbdev/.rvm/gems/ruby-2.1.2@reactorc/gems/jeweler-2.0.1/lib/jeweler/tasks.rb:52:in `new'
/Users/nbdev/.rvm/gems/ruby-2.1.2@reactorc/gems/jeweler-2.0.1/lib/jeweler/tasks.rb:52:in `jeweler'
/Users/nbdev/.rvm/gems/ruby-2.1.2@reactorc/gems/jeweler-2.0.1/lib/jeweler/tasks.rb:82:in `block in define'
/Users/nbdev/.rvm/gems/ruby-2.1.2@reactorc/bin/ruby_executable_hooks:15:in `eval'
/Users/nbdev/.rvm/gems/ruby-2.1.2@reactorc/bin/ruby_executable_hooks:15:in `<main>'
Tasks: TOP => gemspec => gemspec:generate => version_required
(See full trace by running task with --trace)
```
