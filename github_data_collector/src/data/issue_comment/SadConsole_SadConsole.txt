Hello,

I'm not sure if this as issue or just me..

When using 'SadConsole.Settings.ToggleFullScreen();' with a desktop set as  3840x2160 the screen goes blank for a few seconds and then the window will be minimized onto the taskbar.

After that there is nothing you can do to get the screen back up.

If I alter the desktop resolution to a smaller resolution (1920x1200) full screen toggle works fine.
Using the window maximize button works fine also at the high resolution.

Kind regards,

Twoshrubs

The scrollbar doesn't behave correctly when there is less content to scroll than height of the scrollbar.
In my case it takes around 50% of the height of the scrollbar to scroll from my second last content line to the last content line.

I'm not sure if this has something to do with SadConsole, MonoGame or XNA, but my console does not use the keyboard layout that my OS uses, which is definitely the behavior I would expect. It seems to be either hard coded to American layout or determine the layout from my OS display language. I user Windows 10 with Danish keyboard layout and American UI language.
Not sure if it's already possible but it would be great to be able to overlay/place, and if possible with z-index, an image such as a PNG, JPG, GIF, etc. on a console or on a cell.
I find `Window.Message` and `Window.Prompt` very useful, especially as placeholders during the early stages of my projects. But they cannot handle a very common use case: string input. So here's my idea, but take it as you will since I'm not extremely familiar with the library yet. 

I would suggest adding a new dialog that contains a `TextBox` control and lets the user type in a simple string. It can be confirmed either by pressing enter after typing or by clicking on the confirmation button; and canceled by clicking on the cancel button. It has two callbacks: one for validation, and one for handling the result. As long as validation fails, the dialog cannot be confirmed, but it can be canceled.

The validation callback could return a `ValidationResult `object, basically a `(bool, string) Tuple`, indicating whether the input string was valid, and if not, why. Upon failed validation, the "why" would be displayed above the textbox control.
The result handling callback would get the result string upon confirmation, and `null` upon cancellation.

I'd imagine the declaration to look something like this:
```c#
public static void Ask(ColoredString message, string confirmBtn, string cancelBtn, Action<string> resultCallback, StringValidation.Validator validationCallback = StringValidation.None, Themes.Library library = null);
```
And here's a mockup of the `StringValidation` class:
```c#
public static class StringValidation 
{
    public struct ValidationResult
    {
        public bool Value { get; }
        public string ErrorMessage { get; }
        public ValidationResult(bool value, string errorMsg=null) 
        {
            Value = value;
            ErrorMessage = errorMsg ?? "";
        }
    }

    public delegate ValidationResult Validator(string input);

    public static ValidationResult None(string input) => new ValidationResult(true);
    public static Validator Integer(string errorMessage)
    {
        return (input) => new ValidationResult(Int64.TryParse(input, out long _), errorMessage);
    }
    public static Validator Decimal(string errorMessage)
    {
        return (input) => new ValidationResult(Double.TryParse(input, out double _), errorMessage);
    }
    public static Validator Letters(string errorMessage)
    {
        return (input) => new ValidationResult(new Regex("[a-zA-Z]").IsMatch(input), errorMessage);
    }
    public static Validator LengthRange(int min, int max, string errorMessage)
    {
        return (input) => new ValidationResult(input.Length >= min && input.Length <= max, errorMessage);
    }
    public static Validator All(params Validator[] validators)
    {
        return (input) => {
            foreach(Validator v in validators)
            {
                 var result = v(input);
                 if(!result.Value) return result;
            }
            return new ValidationResult(true);
        }
    }
}
```
I would like to add some icons and logos to the game, the question is should I use the ascii converter and use small font size? Or is there a utility to add pictures into a console.

Also is there a documentation how to use the ascii renderer ? A code sample which adds a ascii rendered picture to a console?

thx for your help and the great product.
Is there any built-in way to create a multi-line InputBox (a.k.a. InputArea)? Supposedly it would have a maximum height and automatically add a scroll-bar when there's too much text to display at once.

Also, thank you for creating SadConsole.
From my understanding the SDL2 package for mac needs to be installed, but while the console lib is compiling fine, the example just will not run.

Is it possible to get a quick write up about how to build / run on MacOS?
I tried setting the `SadConsole.Settings.UnlimitedFPS` flag to true right before the `SadConsole.Game.Create` line in the SadConsole starter project, however the `FPSCounterComponent` I added is still showing the FPS as locked at 60 (see code below).  It's been quite a while since I've used that flag, but I believe this used to work?

```C#
class Program
    {
        public const int Width = 80;
        public const int Height = 25;

        static void Main(string[] args)
        {
            SadConsole.Settings.UnlimitedFPS = true;

            // Setup the engine and creat the main window.
            SadConsole.Game.Create("IBM.font", Width, Height);


            // Hook the start event so we can add consoles to the system.
            SadConsole.Game.OnInitialize = Init;

            // Hook the update event that happens each frame so we can trap keys and respond.
            SadConsole.Game.OnUpdate = Update;

            // Start the game.
            SadConsole.Game.Instance.Run();

            //
            // Code here will not run until the game window closes.
            //

            SadConsole.Game.Instance.Dispose();
        }

        private static void Update(GameTime time)
        {
            // Called each logic update.

            // As an example, we'll use the F5 key to make the game full screen
            if (SadConsole.Global.KeyboardState.IsKeyReleased(Microsoft.Xna.Framework.Input.Keys.F5))
            {
                SadConsole.Settings.ToggleFullScreen();
            }
        }

        private static void Init()
        {
            var fpsComponent = new SadConsole.Game.FPSCounterComponent(SadConsole.Game.Instance);
            SadConsole.Game.Instance.Components.Add(fpsComponent);

            // Any custom loading and prep. We will use a sample console for now

            Console startingConsole = new Console(Width, Height);
            startingConsole.FillWithRandomGarbage();
            startingConsole.Fill(new Rectangle(3, 3, 27, 5), null, Color.Black, 0);
            startingConsole.Print(6, 5, "Hello from SadConsole", ColorAnsi.CyanBright);

            // Set our new console as the thing to render and process
            SadConsole.Global.CurrentScreen = startingConsole;
        }
```
