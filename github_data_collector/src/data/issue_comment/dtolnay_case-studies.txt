I'm in the process of moving overflower to autoref specialization. I have found that it works as you described in the unary operation case (e.g. specializing `std::ops::Neg` vs. `overflower::OverflowerNeg`).

However, there is a small niggle when the trait is generic over some other type as for example `std::ops::Add<RHS = Self>` is over `RHS`. In this case, if I try to implement the kind for `T: std::ops::Add`, this only works for the default RHS type (which is `Self`, but e.g. `String` implements `Add` for various other types (e.g. `&'_ str` and `Cow<'_, str>`).

Thus we must allow our kind to be implemented for arbitrary `RHS`. So let's try that:

```
pub struct OverflowerAddTag;
pub trait OverflowerAddKind<R> {
    fn overflower_add_tag() -> OverflowerAddTag {
        OverflowerAddTag
    }
}

impl<R, T> OverflowerAddKind<R> for T where &T: std::ops::Add<R> {}
impl<R, T> OverflowerAddKind<R> for T where T: OverflowerAdd<R> {}
```

Now the compiler tells us that we need to give a lifetime to `&T`, so we do that, which gives us:

```
impl<'a, R, T: 'a> OverflowerAddKind<R> for T where &'a T: std::ops::Add<R> {}
```

This works. Just wanted to let you know.
```rust
// Before
fn f(&self, a: Arg1, b: Arg2) -> Ret {
    /* original function body */
}

// After
fn f(&self, a: Arg1, b: Arg2) -> Ret {
    struct Guard; //Need to complicate this type name until Macro 2.0
                          //The function body might use the same name
    impl Drop for Guard {
        fn drop(&mut self) {
            /* do the thing */
        }
    }
    let guard = Guard; //No need to change variable name
                                   //Even when the function body uses the same name

    let original_f = move || -> Ret {
        /*
         * original function body
         * Let the compiler capture self, args etc
         */
    };

    let value = original_f();

    mem::forget(guard);
    value
}
```