This utility has worked great for us so far, but we had an incident in which panicparse not only failed to format and color the error, it also completely swallowed it.

i.e, with panicparse, we saw this error:
```
2019/04/15 17:39:51 http: panic serving [::1]:50141: string length out of range: -58
```

We had to reproduce without panicparse to see the actual stack trace:
```
2019/04/15 17:44:16 http: panic serving [::1]:50622: string length out of range: -58
goroutine 52 [running]:
net/http.(*conn).serve.func1(0xc000198000)
        /usr/local/Cellar/go/1.12.1/libexec/src/net/http/server.go:1769 +0x139
panic(0x4750f80, 0xc000246260)
        /usr/local/Cellar/go/1.12.1/libexec/src/runtime/panic.go:522 +0x1b5
apollo/micro/internal/tradeconv.ConvAction(0xc0002f40a0, 0x99, 0x99, 0xc00039e640)
        /Users/tshabtay/git/fleet/src/apollo/micro/internal/tradeconv/tradeconv.go:24 +0x21d
apollo/micro/svc/recon/internal/dates.(*API).DatesGet(0xc0002d48d0, 0x495b820, 0xc0005c2150, 0xc000318400, 0x13414cf, 0x4713720, 0x495b820)
        /Users/tshabtay/git/fleet/src/apollo/micro/svc/recon/internal/dates/api.go:50 +0xc29
apollo/micro/svc/recon/internal/restapi.HandlerAPI.func2(0xc000318400, 0x13414cf, 0x457a301, 0xc0001320a0)
        /Users/tshabtay/git/fleet/src/apollo/micro/svc/recon/internal/restapi/configure_recon.go:80 +0x65
apollo/micro/svc/recon/internal/restapi/operations/dates.DatesGetHandlerFunc.Handle(0xc000075540, 0xc000318400, 0x13414cf, 0x4948f00, 0xc0001320a0)
        /Users/tshabtay/git/fleet/src/apollo/micro/svc/recon/internal/restapi/operations/dates/dates_get.go:19 +0x3a
apollo/micro/svc/recon/internal/restapi/operations/dates.(*DatesGet).ServeHTTP(0xc0002a20c0, 0x49594e0, 0xc00039c1c0, 0xc000318400)
        /Users/tshabtay/git/fleet/src/apollo/micro/svc/recon/internal/restapi/operations/dates/dates_get.go:54 +0x16e
apollo/vendor/github.com/go-openapi/runtime/middleware.NewOperationExecutor.func1(0x49594e0, 0xc00039c1c0, 0xc000318400)
        /Users/tshabtay/git/fleet/src/apollo/vendor/github.com/go-openapi/runtime/middleware/operation.go:28 +0x75
net/http.HandlerFunc.ServeHTTP(0xc0002d4150, 0x49594e0, 0xc00039c1c0, 0xc000318400)
        /usr/local/Cellar/go/1.12.1/libexec/src/net/http/server.go:1995 +0x44
apollo/vendor/github.com/go-openapi/runtime/middleware.NewRouter.func1(0x49594e0, 0xc00039c1c0, 0xc000318200)
        /Users/tshabtay/git/fleet/src/apollo/vendor/github.com/go-openapi/runtime/middleware/router.go:76 +0x358
net/http.HandlerFunc.ServeHTTP(0xc0002a31e0, 0x49594e0, 0xc00039c1c0, 0xc000318200)
        /usr/local/Cellar/go/1.12.1/libexec/src/net/http/server.go:1995 +0x44
apollo/vendor/github.com/go-openapi/runtime/middleware.Redoc.func1(0x49594e0, 0xc00039c1c0, 0xc000318200)
        /Users/tshabtay/git/fleet/src/apollo/vendor/github.com/go-openapi/runtime/middleware/redoc.go:72 +0x2a5
net/http.HandlerFunc.ServeHTTP(0xc000576a00, 0x49594e0, 0xc00039c1c0, 0xc000318200)
        /usr/local/Cellar/go/1.12.1/libexec/src/net/http/server.go:1995 +0x44
apollo/vendor/github.com/go-openapi/runtime/middleware.Spec.func1(0x49594e0, 0xc00039c1c0, 0xc000318200)
        /Users/tshabtay/git/fleet/src/apollo/vendor/github.com/go-openapi/runtime/middleware/spec.go:46 +0x1ad
net/http.HandlerFunc.ServeHTTP(0xc000576a40, 0x49594e0, 0xc00039c1c0, 0xc000318200)
        /usr/local/Cellar/go/1.12.1/libexec/src/net/http/server.go:1995 +0x44
apollo/vendor/github.com/rs/cors.(*Cors).Handler.func1(0x49594e0, 0xc00039c1c0, 0xc000318200)
        /Users/tshabtay/git/fleet/src/apollo/vendor/github.com/rs/cors/cors.go:207 +0x1af
net/http.HandlerFunc.ServeHTTP(0xc0002a3a00, 0x49594e0, 0xc00039c1c0, 0xc000318200)
        /usr/local/Cellar/go/1.12.1/libexec/src/net/http/server.go:1995 +0x44
net/http.serverHandler.ServeHTTP(0xc000345380, 0x49594e0, 0xc00039c1c0, 0xc000318200)
        /usr/local/Cellar/go/1.12.1/libexec/src/net/http/server.go:2774 +0xa8
net/http.(*conn).serve(0xc000198000, 0x495b760, 0xc0002381c0)
        /usr/local/Cellar/go/1.12.1/libexec/src/net/http/server.go:1878 +0x851
created by net/http.(*Server).Serve
        /usr/local/Cellar/go/1.12.1/libexec/src/net/http/server.go:2884 +0x2f4
```
Heya! Thank's for good tool!
It would be nice to write panic in a windows system journal like this:
```
app 2>&1 | pp --eventlog="app name" --html="panic.html"
```
Any plans for subj? I would create a pull request if it makes sense

how to solve unfortunately myapp has stopped?
Hey there !

I know It's not in the name but.
It would be nice also for panicparse to do the same for any `-race` hit.
Could the stdlib entries be marked visually in some way that would make it easy to clearly separate them from "my code" from the first glance? there's usually kinda... notable difference in quality/trust level between those groups :) I think either different color, or some marker chars at start of a line? personally, I'm also not quite sure if I see value in marking private vs. public identifiers using different color; but I assume you had a need for that.

Hm; truth said, it could also be nice if 3rd-party libs were marked with a distinct color/marker, too... but then detection can be difficult here: one has them in .../vendor/..., other in ../Godeps/..., other in "everything except $GOPATH/mycompany.com/... and $GOROOT/src/...". So maybe some kinda _$HOME/.config/panicparse/colors.ini_ with regexp->color patterns?... [with some option to specify complex matches like "everything except _this_ and _that_"?]

Poorly defined idea, I know, sorry...

It would be cool if the tool supported an output format similar to "typical compilers", so that it could be easily fetched into vim's "quickfix" window, for easy jumping through the lines shown in the trace. For example:

```
1: running...
/foo/bar/baz/tool.go:123: (*whatever) FlavorText()
/foo/bar/baz/tool.go:55: (*whatever) Something()
/foo/bar/baz/main.go:22: CREATED BY: main()
5: ...
  ...
7: ...
  ...
```

When imported to vim with `:cex system('panicparse -format=vim -only < foobar.log') | copen`, this should make it trivial to jump between tool.go l.123, main.go l.22, etc., using `:cn` and `:cp` commands. (With properly configured `:set errorformat=...` in vim, the lines like `1: running...` would still get displayed in the quickfix window, clearly separating the goroutines.)

_edit:_ the Go `oracle` tool has it as: `-format=plain`

\+ short flag `-o`, like in grep?

after #3, it would be nice if goroutines with only 1 occurrence were ranked higher than merged (>1) ones. I think there's slightly higher probability that they may contain something "distinct" than the merged ones. Even if not, keeping some order in the traces could help grasp their nature. (Unless there's already some important ordering I didn't notice?)

Also, it would be nice if the "sections" in output could be somewhat "marked" then. I didn't realize the sorting is done with some meaningful order (i.e. #3) until I browsed through the issues. What I mean is for example something like:

```
---- SOURCE ---- [or: CULPRIT?]
1: running ...
  ...
---- USER, UNIQUE ----
1: ...
  ...
1: ...
  ...
---- USER, REPEATING ----
5: ...
  ...
22: ...
  ...
434: ...
  ...
---- STDLIB ----
1: ...
  ...
23: ...
 ...
```
