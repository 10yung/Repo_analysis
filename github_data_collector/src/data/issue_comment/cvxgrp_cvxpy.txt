The main motivation for this PR is to resolve #885. The basics of that change can be confined to ``cvxpy/expressions/expression.py:Expression``. However, once the deprecation warning was introduced, I thought it best to bring the rest of cvxpy code into compliance the the warning's recommendation. There were two ways to do this:
1. find offending instances of ``a * b``, and replace them with ``matmul(a, b)``, or
2. find offending instances of ``a * b``, and replace them with ``a @ b``.

I opted for the second of these. The most important thing to note about this decision is that it means cvxpy can't support python 3.4. At first I thought that was a big jump (we had previously only discussed dropping python 2.7), but the more I thought about it, it seemed like a better idea. Here are some key reasons that come to mind:

1. The Python Foundation dropped support for [python 3.4](https://www.python.org/downloads/release/python-3410/) in March of last year. Note: this happened 9 months *before* the Python Foundation dropped support for [python 2.7](https://www.python.org/doc/sunset-python-2/).
2. We don't run continuous integration tests with python 3.4, so we haven't been testing against it for a long time.
3. I don't think we've ever built a python 3.4 wheel or a conda distribution for cvxpy 1.x. The only way python 3.4 users get a hold of cvxpy 1.x is by installing from a source distribution.
4. Several unittests already used the ``@``operator. So we were already on a course to *effectively* drop support for python 3.4. This just makes it explicit.
5. Perhaps most importantly: I think it would be best to mark a big change like this as we shift from cvxpy 1.0 to cvxpy 1.1.

To help with this, I've done a pretty thorough job of changing not only cvxpy code, but also key documentation, and build files. Merging this PR (perhaps with minor modifications) would go a long way in setting us up for a clean release of version 1.1.
"Our goal is to minimize the function"

should be

Our goal is to maximize the function
The XPRESS interface has been minimally maintained since migrating to cvxpy 1.0. I don't think anyone has tested changes from cvxpy's 1.0 -> 1.1 upgrade.

Per a comment on #382 , a community license (suitable for running unittests with cvxpy) can be installed with ``pip install xpress``. I installed XPRESS in this way, and ran the full suite of unittests. Upon doing this, all tests fail.

The **initial** cause of this failure is that the function ``XPRESS.apply`` in ``xpress_conif.py`` doesn't return anything. A correct implementation of ``XPRESS.apply`` would return the tuple ``(data, inv_data)`` already defined in that function.

Pinging @merraksh , since you mentioned volunteering to get this working again.
@SteveDiamond recently informed me that a trial version of CPLEX is available from pip. I ran the current suite of tests against that version of CPLEX, and some of the dual variable tests failed. Most of the failures were fixed by changing precision of the tests, however one test failed by a huge margin. Specifically,
```
StandardTestSOCPs.test_socp_1(solver='CPLEX', places=0)
```
fails (follow [this link](https://github.com/cvxgrp/cvxpy/blob/f35960c65ee9dd5687929f0c95104f901d920db8/cvxpy/tests/solver_test_helpers.py#L222) for the problem definition).

The cause of the failure is that the dual variable to the final constraint (``y <= 5``) is reported as zero, when it should be about ``2.86560``. I checked to see if the test was over-restrictive (i.e. maybe some dual-optimal solution has zero dual variable to ``y <= 5``), but this is not the case. The current CPLEX solution fails a stationary Lagrangian check, and so it is not dual-feasible.

The "standard portfolio optimization with data from factor model" example fails because the OSQP solver reaches the maximum number of iterations. The error message also suggests "solve with verbose=True for more information" even though the call to prob.solve is setting verbose to True.

The colab notebook can be used to reproduce the error: https://colab.research.google.com/github/cvxgrp/cvx_short_course/blob/master/applications/portfolio_optimization.ipynb


**Output**

```
-----------------------------------------------------------------
           OSQP v0.6.0  -  Operator Splitting QP Solver
              (c) Bartolomeo Stellato,  Goran Banjac
        University of Oxford  -  Stanford University 2019
-----------------------------------------------------------------
problem:  variables n = 6000, constraints m = 6002
          nnz(P) + nnz(A) = 4519500
settings: linear system solver = qdldl,
          eps_abs = 1.0e-05, eps_rel = 1.0e-05,
          eps_prim_inf = 1.0e-04, eps_dual_inf = 1.0e-04,
          rho = 1.00e-01 (adaptive),
          sigma = 1.00e-06, alpha = 1.60, max_iter = 10000
          check_termination: on (interval 25),
          scaling: on, scaled_termination: off
          warm start: on, polish: on, time_limit: off

iter   objective    pri res    dua res    rho        time
   1  -1.1774e+04   2.65e+02   1.51e+04   1.00e-01   7.03e+00s
 200  -4.1080e+02   2.42e-01   8.86e-04   1.00e-01   1.01e+01s
 400  -1.9413e+02   1.13e-01   2.51e-04   1.00e-01   1.31e+01s
 600  -1.2345e+02   6.40e-02   1.09e-04   1.00e-01   1.61e+01s
 800  -8.7560e+01   4.67e-02   5.29e-05   1.00e-01   1.91e+01s
1000  -6.5202e+01   3.49e-02   2.99e-05   1.00e-01   2.22e+01s
1200  -5.0118e+01   2.68e-02   1.91e-05   1.00e-01   2.52e+01s
1400  -3.9737e+01   2.09e-02   1.41e-05   1.00e-01   2.82e+01s
1600  -3.2445e+01   1.72e-02   1.06e-05   1.00e-01   3.13e+01s
1800  -2.6947e+01   1.42e-02   8.27e-06   1.00e-01   3.43e+01s
2000  -2.2700e+01   1.17e-02   6.57e-06   1.00e-01   3.74e+01s
2200  -1.9294e+01   9.74e-03   5.29e-06   1.00e-01   4.04e+01s
2400  -1.6616e+01   8.26e-03   4.32e-06   1.00e-01   4.35e+01s
2600  -1.4460e+01   7.01e-03   3.56e-06   1.00e-01   4.65e+01s
2800  -1.2704e+01   5.95e-03   2.93e-06   1.00e-01   4.96e+01s
3000  -1.1267e+01   5.06e-03   2.43e-06   1.00e-01   5.26e+01s
3200  -1.0092e+01   4.25e-03   2.00e-06   1.00e-01   5.57e+01s
3400  -9.1244e+00   3.58e-03   1.66e-06   1.00e-01   5.87e+01s
3600  -8.3286e+00   3.04e-03   1.38e-06   1.00e-01   6.17e+01s
3800  -7.6760e+00   2.60e-03   1.14e-06   1.00e-01   6.48e+01s
4000  -7.1409e+00   2.26e-03   9.40e-07   1.00e-01   6.78e+01s
4200  -6.7000e+00   2.04e-03   7.81e-07   1.00e-01   7.09e+01s
4400  -6.3366e+00   1.85e-03   6.50e-07   1.00e-01   7.39e+01s
4600  -6.0382e+00   1.69e-03   5.41e-07   1.00e-01   7.69e+01s
4800  -5.7969e+00   1.58e-03   4.54e-07   1.00e-01   7.99e+01s
5000  -5.5953e+00   1.46e-03   3.83e-07   1.00e-01   8.30e+01s
5200  -5.4277e+00   1.37e-03   3.24e-07   1.00e-01   8.60e+01s
5400  -5.2885e+00   1.28e-03   2.73e-07   1.00e-01   8.90e+01s
5600  -5.1729e+00   1.20e-03   2.30e-07   1.00e-01   9.21e+01s
5800  -5.0768e+00   1.13e-03   1.94e-07   1.00e-01   9.51e+01s
6000  -4.9968e+00   1.08e-03   1.63e-07   1.00e-01   9.82e+01s
6200  -4.9301e+00   1.02e-03   1.37e-07   1.00e-01   1.01e+02s
6400  -4.8746e+00   9.80e-04   1.18e-07   1.00e-01   1.04e+02s
6600  -4.8281e+00   9.40e-04   1.09e-07   1.00e-01   1.07e+02s
6800  -4.7893e+00   9.04e-04   1.01e-07   1.00e-01   1.10e+02s
7000  -4.7568e+00   8.72e-04   9.40e-08   1.00e-01   1.13e+02s
7200  -4.7295e+00   8.44e-04   8.75e-08   1.00e-01   1.16e+02s
7400  -4.7372e+00   8.63e-04   2.54e-07   1.00e-01   1.20e+02s
7600  -4.7339e+00   8.57e-04   1.41e-07   1.00e-01   1.23e+02s
7800  -4.7278e+00   8.25e-04   8.93e-08   1.00e-01   1.26e+02s
8000  -4.7195e+00   7.99e-04   5.47e-08   1.00e-01   1.29e+02s
8200  -4.7100e+00   7.75e-04   4.25e-08   1.00e-01   1.32e+02s
8400  -4.7002e+00   7.59e-04   3.67e-08   1.00e-01   1.35e+02s
8600  -4.6909e+00   7.51e-04   3.23e-08   1.00e-01   1.38e+02s
8800  -4.6824e+00   7.42e-04   3.05e-08   1.00e-01   1.41e+02s
9000  -4.6749e+00   7.35e-04   2.86e-08   1.00e-01   1.44e+02s
9200  -4.6684e+00   7.27e-04   2.66e-08   1.00e-01   1.47e+02s
9400  -4.6627e+00   7.21e-04   2.47e-08   1.00e-01   1.50e+02s
9600  -4.6577e+00   7.17e-04   2.29e-08   1.00e-01   1.53e+02s
9800  -4.6534e+00   7.13e-04   2.15e-08   1.00e-01   1.56e+02s
10000  -4.6496e+00   7.10e-04   2.03e-08   1.00e-01   1.59e+02s

status:               maximum iterations reached
number of iterations: 10000
run time:             1.59e+02s
optimal rho estimate: 4.78e-01

---------------------------------------------------------------------------
SolverError                               Traceback (most recent call last)
<ipython-input-16-e9928c02de24> in <module>()
      6 # Uncomment to solve the problem.
      7 # WARNING: this will take many minutes to run.
----> 8 prob.solve(verbose=True)

2 frames
/usr/local/lib/python3.6/dist-packages/cvxpy/problems/problem.py in solve(self, *args, **kwargs)
    287         else:
    288             solve_func = Problem._solve
--> 289         return solve_func(self, *args, **kwargs)
    290 
    291     @classmethod

/usr/local/lib/python3.6/dist-packages/cvxpy/problems/problem.py in _solve(self, solver, warm_start, verbose, parallel, gp, qcp, **kwargs)
    572         full_chain = self._solving_chain.prepend(self._intermediate_chain)
    573         inverse_data = self._intermediate_inverse_data + solving_inverse_data
--> 574         self.unpack_results(solution, full_chain, inverse_data)
    575         return self.value
    576 

/usr/local/lib/python3.6/dist-packages/cvxpy/problems/problem.py in unpack_results(self, solution, chain, inverse_data)
    715             raise error.SolverError(
    716                     "Solver '%s' failed. " % chain.solver.name() +
--> 717                     "Try another solver, or solve with verbose=True for more "
    718                     "information.")
    719         self.unpack(solution)

SolverError: Solver 'OSQP' failed. Try another solver, or solve with verbose=True for more information.
```



This is a tracking issue for making 1.1.0 stable. We'll have at least one more prerelease, 1.1.0a2, before we get there.

Below is an incomplete outline of the release notes we might publish alongside the stable release.

New features
- Disciplined parametrized programming (for cone programs)
- Differentiation through cone programs (specifically, those solved by SCS)

Enhancements
- Allow use of the Python builtin `sum` function in DGP
- Allow use of cp.max, cp.min in DQCP (in addition to cp.maximum, cp.minimum)
- New atoms: support function

Bug fixes
- Dual variable recovery
- Detection of monotone functions for DQCP

Breaking changes
- Incompatible with Python 2
- Removed solvers: SuperSCS

Known issues
- Problems with many parameters can take a long time to compile
It is difficult to tell whether it's CyLP issue or cvxpy issue but i'm using CyLP with cvxpy. I got these verbose output:
(I tried the pypi version of cylp as well latest compiled trunk version as of Nov 10, 2019)
```
Welcome to the CBC MILP Solver 
Version: Trunk (unstable) 
Build Date: Mar 24 2019 
Revision Number: 2539 
command line - ICbcModel -solve -quit (default strategy 1)
Continuous objective value is 4.84888 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 151 rows, 91 columns (28 integer (28 of which binary)) and 1384 elements
Cbc0031I 18 added rows had average density of 55.055556
Cbc0013I At root node, 18 cuts changed objective from 4.8488812 to 4.8493148 in 43 passes
Cbc0014I Cut generator 0 (Probing) - 5 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 218 row cuts average 75.8 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1 row cuts average 21.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 23 row cuts average 61.1 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 1e+50 best solution, best possible 4.8493148 (0.15 seconds)
Cbc0001I Search completed - best objective 1e+50, took 442 iterations and 24 nodes (0.27 seconds)
Cbc0032I Strong branching done 358 times (1257 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 11, 0 variables fixed on reduced cost
Cuts at root node changed objective from 4.84888 to 4.84931
Probing was tried 43 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.016 seconds)
Gomory was tried 43 times and created 218 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
Knapsack was tried 43 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Clique was tried 43 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 43 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
FlowCover was tried 43 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
TwoMirCuts was tried 43 times and created 23 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Result - Problem proven infeasible
No feasible solution found
Enumerated nodes:               24
Total iterations:               442
```

However, cvxpy's problem object didn't capture this infeasible, `prob_.status` is still **optimal**.
```
        prob_ = cvx.Problem(objfuncm, conslist)
        prob_.solve(verbose=True, solver=cvx.CBC, maximumSeconds=20) 
```

I post this issue here to see if someone happen to understand this **Result - Problem proven infeasible** message and make sure cvxpy correctly captures cylp's exit code, etc

Thank you very much.

my OS is Win 7 64bit, Python 3.6 64b, cvxpy 1.1.0a1, cylp==0.9.0b (from Pypi)
**Describe the bug**
The underlying issue is with OSQP rather than cvxpy. I will post a report there as well.

**To Reproduce**
```
import cvxpy as cp
import numpy as np
## Change 58 to 57 below and all will be well.
## Data is here: https://github.com/cvxgrp/cvxpy/files/3929533/qreg_xy.txt
xy = np.genfromtxt("qreg_xy.txt", delimiter=",")[range(58), :]
x = xy[: , range(2)]
y = xy[: , 2]
beta = cp.Variable(2)
obj = 0.5 * cp.norm(y - x * beta, 1)
prob = cp.Problem(cp.Minimize(obj))
prob = cp.Problem(cp.Minimize(obj))
prob.solve(verbose = True) ## Fails with OSQP
prob.solve(verbose = True, solver = cp.ECOS) ## Works!
```

**Expected behavior**
Solution expected.

**Output**
```
-----------------------------------------------------------------
           OSQP v0.5.0  -  Operator Splitting QP Solver
              (c) Bartolomeo Stellato,  Goran Banjac
        University of Oxford  -  Stanford University 2018
-----------------------------------------------------------------
problem:  variables n = 60, constraints m = 116
          nnz(P) + nnz(A) = 348
settings: linear system solver = qdldl,
          eps_abs = 1.0e-05, eps_rel = 1.0e-05,
          eps_prim_inf = 1.0e-04, eps_dual_inf = 1.0e-04,
          rho = 1.00e-01 (adaptive),
          sigma = 1.00e-06, alpha = 1.60, max_iter = 10000
          check_termination: on (interval 25),
          scaling: on, scaled_termination: off
          warm start: on, polish: on

iter   objective    pri res    dua res    rho        time
   1  -2.0478e+03   1.43e+03   1.94e+05   1.00e-01   9.82e-05s
 200   1.3417e+03   2.65e+00   2.47e+00   1.03e-02   4.38e-04s
 400   1.3422e+03   4.60e-01   3.89e+00   1.03e-02   9.03e-04s
 600   1.3427e+03   2.37e+00   1.52e-01   7.23e-04   2.38e-04s
 800   1.3420e+03   1.20e+00   1.36e+00   1.68e-03   2.75e-04s
1000   1.3421e+03   8.88e-01   1.26e-01   1.68e-03   5.85e-04s
1200   1.3419e+03   1.49e+00   1.31e+00   2.20e-03   2.75e-04s
1400   1.3423e+03   8.59e-02   4.58e+00   1.38e-02   1.22e-04s
1600   1.3425e+03   1.43e+00   3.71e-01   1.89e-03   3.89e-04s
1800   1.3419e+03   1.72e+00   4.02e-01   7.45e-04   2.36e-04s
2000   1.3422e+03   6.03e-02   2.63e-01   7.45e-04   1.79e-02s
2200   1.3423e+03   2.40e-01   6.93e-01   6.89e-03   3.54e-04s
2400   1.3425e+03   1.18e+00   3.96e-02   7.95e-04   1.22e-04s
2600   1.3423e+03   2.92e-01   6.35e-01   4.32e-03   3.90e-04s
2800   1.3422e+03   1.98e-01   2.18e+00   3.39e-03   1.22e-04s
3000   1.3421e+03   5.31e-01   4.71e-01   3.39e-03   4.32e-04s
3200   1.3419e+03   1.71e+00   5.53e-01   3.36e-03   1.60e-04s
3400   1.3422e+03   3.12e-01   8.47e-01   3.36e-03   4.70e-04s
3600   1.3424e+03   6.40e-01   2.31e+00   3.18e-03   1.99e-04s
3800   1.3424e+03   7.06e-01   3.37e-01   3.18e-03   5.09e-04s
4000   1.3426e+03   1.58e+00   8.27e-01   2.56e-03   2.36e-04s
4200   1.3423e+03   1.61e-01   7.09e-01   2.56e-03   5.46e-04s
4400   1.3420e+03   1.15e+00   1.05e+00   1.69e-03   2.74e-04s
4600   1.3421e+03   7.59e-01   2.56e-02   1.69e-03   6.76e-04s
4800   1.3421e+03   9.12e-01   6.97e-01   1.50e-03   4.50e-04s
5000   1.3423e+03   3.51e-01   1.94e+00   1.88e-03   1.22e-04s
5200   1.3424e+03   8.51e-01   4.08e-01   1.88e-03   4.32e-04s
5400   1.3427e+03   2.44e+00   4.88e-01   1.89e-03   1.60e-04s
5600   1.3423e+03   4.28e-01   6.86e-01   1.89e-03   4.71e-04s
5800   1.3419e+03   1.62e+00   1.35e-01   2.10e-04   2.36e-04s
6000   1.3421e+03   7.76e-01   1.45e-01   1.19e-03   2.37e-04s
6200   1.3422e+03   1.07e-01   1.50e-01   1.19e-03   6.87e-04s
6400   1.3424e+03   5.65e-01   1.30e+00   2.72e-03   2.37e-04s
6600   1.3424e+03   5.00e-01   1.41e-01   2.72e-03   5.47e-04s
6800   1.3425e+03   1.29e+00   6.23e-01   1.91e-03   2.75e-04s
7000   1.3423e+03   8.41e-02   4.60e-01   1.91e-03   5.85e-04s
7200   1.3420e+03   9.89e-01   8.87e-01   1.78e-03   3.65e-04s
7400   1.3421e+03   6.25e-01   1.04e-02   1.78e-03   1.06e-03s
7600   1.3421e+03   9.21e-01   8.66e-01   1.90e-03   5.27e-04s
7800   1.3423e+03   1.06e-01   4.36e-01   1.90e-03   8.47e-04s
8000   1.3423e+03   1.98e-01   8.63e-02   1.90e-03   1.16e-03s
8200   1.3423e+03   4.40e-01   1.21e-01   2.85e-03   1.60e-04s
8400   1.3423e+03   8.02e-02   1.85e-01   2.85e-03   4.72e-04s
8600   1.3422e+03   1.51e-01   5.58e-01   3.25e-03   1.98e-04s
8800   1.3422e+03   1.67e-01   8.16e-02   3.25e-03   5.40e-04s
9000   1.3422e+03   4.26e-01   2.82e-01   3.36e-03   2.71e-04s
9200   1.3422e+03   4.57e-02   2.48e-01   3.36e-03   7.82e-04s
9400   1.3423e+03   2.74e-01   5.95e-01   3.37e-03   4.07e-04s
9600   1.3423e+03   2.02e-01   3.80e-02   3.37e-03   7.18e-04s
9800   1.3423e+03   4.39e-01   4.75e-01   3.37e-03   3.13e-04s
10000   1.3422e+03   6.20e-03   3.02e-01   3.37e-03   6.24e-04s

status:               maximum iterations reached
number of iterations: 10000
run time:             8.70e-05s
optimal rho estimate: 6.88e-05

---------------------------------------------------------------------------
SolverError                               Traceback (most recent call last)
<ipython-input-180-3d126a3b820d> in <module>
      6 prob = cp.Problem(cp.Minimize(obj))
      7 prob = cp.Problem(cp.Minimize(obj))
----> 8 prob.solve(verbose = True) ## Fails with OSQP
      9 prob.solve(verbose = True, solver = cp.ECOS) ## Works!

~/anaconda3/lib/python3.6/site-packages/cvxpy/problems/problem.py in solve(self, *args, **kwargs)
    287         else:
    288             solve_func = Problem._solve
--> 289         return solve_func(self, *args, **kwargs)
    290 
    291     @classmethod

~/anaconda3/lib/python3.6/site-packages/cvxpy/problems/problem.py in _solve(self, solver, warm_start, verbose, parallel, gp, qcp, **kwargs)
    572         full_chain = self._solving_chain.prepend(self._intermediate_chain)
    573         inverse_data = self._intermediate_inverse_data + solving_inverse_data
--> 574         self.unpack_results(solution, full_chain, inverse_data)
    575         return self.value
    576 

~/anaconda3/lib/python3.6/site-packages/cvxpy/problems/problem.py in unpack_results(self, solution, chain, inverse_data)
    715             raise error.SolverError(
    716                     "Solver '%s' failed. " % chain.solver.name() +
--> 717                     "Try another solver, or solve with verbose=True for more "
    718                     "information.")
    719         self.unpack(solution)

SolverError: Solver 'OSQP' failed. Try another solver, or solve with verbose=True for more information.
If applicable, include program output. If reporting a program crash, please include the entire stack trace.
```

**Version**
 - OS: macOS  10.15.1
 - CVXPY Version: 1.0.25



**Additional context**
None

I'm calling

    sol=prob.solve(solver=solver,verbose=True)

and getting

> cvxpy.error.SolverError: Solver 'CVXOPT' failed. Try another solver, or solve with verbose=True for more information.

This is not a very helpful message!
Github user spenrich reported the following issue in the cvxpylayers repository. It's actually an issue with CVXPY, so I'm copying it here. I've quoted the issue (https://github.com/cvxgrp/cvxpylayers/issues/33) verbatim:

I have the example code below, which just constructs an unconstrained quadratic program that is DPP. I time both the CVXPY problem and the CVXPYlayer initializations, while manually changing the problem dimensionality n.

On my dual-core MacBook, when I run the code with n = 10, it is done quickly (about 26 ms). With n = 100, constructing the CVXPY problem takes less than 1 ms, but the CVXPYlayer initialization takes around 42 seconds. For n = 1000, it is even longer (although I haven't yet let it finish running).

Any idea why this takes so long? I am not sure if this is a bug per se or expected behavior.

Versions: CVXPY 1.1.0a1, CVXPYlayers 0.1.2, macOS Catalina (10.15.1)

```
import cvxpy as cvx
from cvxpylayers.torch import CvxpyLayer
import time

n = 10
Q_sqrt = cvx.Parameter([n, n])
x = cvx.Variable(n)
objective = 0.5 * cvx.sum_squares(Q_sqrt @ x)

print('Constructing CVXPY problem ... ', end='')
start = time.time()
prob = cvx.Problem(cvx.Minimize(objective), [])
assert prob.is_dcp()
assert prob.is_dpp()
end = time.time()
print('done! (%.3f s)' % (end - start))

print('Constructing differentiable CVXPY layer ... ', end='')
start = time.time()
layer = CvxpyLayer(prob, parameters=[Q_sqrt], variables=[x])
end = time.time()
print('done! (%.3f s)' % (end - start))
```