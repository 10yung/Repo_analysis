Many times for debugging we need to the sequence of settings or reassignments of properties. We get this in diagnostic mode for build in Visual studio IDE. Can this be displayed in a time-sequences manner for each of the properties, the task and the source .props that set
I often need to understand the calling patterns between msbuild projects (which targets, between which projects, with which global properties). The current viewer is not adequate because it contains way more information than needed, and it's not a DAG, making multiple references to the same project hard to see, so the calling patterns are not obvious at all and a lot of scrolling and pen and paper are needed to tease the graph out.

It would be nice to have a separate pane showing a graph with the following definition:
```
Node: (project path, global properties)
Directed Edge: [<called targets>]
```

The graph would explode in complexity with more than a few nodes, but for simple examples (2-5 projects) it would be pretty illuminating on what's going on. Some filtering capabilities would also help with the information overload.

The graph can be generated with some graph layouting library, like [graphvis](https://github.com/graphp/graphviz).
I'm attempting to read a binlog file from an asp.net core application. After my requests reads a given file it attempts to delete it but I get sporadic lOExceptions stating the file is locked after using the 
`BinLogReader.ReadRecords` method. 
Currently the log is showing a single entry for all Exec tasks in "Top 10 most expensive tasks", but that's not that helpful if there are multiple different tools being invoked in the build. It would be nice to treat Exec tasks that invoke different tools as separate entities for the purpose of perf reporting.
Add an analyzer that looks at RAR's resolved extensions and if .winmd and/or .exe wasn't used, recommend adjusting AllowedReferenceAssemblyFileExtensions.

See https://github.com/microsoft/msbuild/issues/5018
Given a WPF project such as:

```xml
<Project Sdk="Microsoft.NET.Sdk.WindowsDesktop">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>netcoreapp5.0</TargetFramework>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Nerdbank.GitVersioning" Version="3.1.13-beta">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

</Project>
```

Where `MainWindow.xaml.cs` includes the line:

```cs
Title = ThisAssembly.AssemblyFileVersion;
```

A build error follows. This is because of https://github.com/NuGet/Home/issues/5894, which is beside the point. The point is, in investigating the failure, I use the `/bl` switch and load the file into msbuild structured log viewer. I then find the wpftmp.csproj and click the Preprocess command on it, which shows me this:

![image](https://user-images.githubusercontent.com/3548/68915481-77973400-071f-11ea-8771-887f07fd403f.png)


From this screenshot you'll see that nerdbank.gitversioning.targets have been imported. But in fact, I don't believe they have, since it it was imported there would not be a build failure. Also the side effects of having imported it such as influence on project properties would be visible in the evaluation model which the Properties tree within the structured log viewer does not show are present.
Finally, when I run `msbuild WpfApp3_meucdeke_wpftmp.csproj /p:_TargetAssemblyProjectName=WpfApp3,IntermediateOutputPath=obj\Debug\netcoreapp5.0\,AssemblyName=WpfApp3 /pp:out.xml` myself and inspect the `out.xml` file, there's no trace of the nerdbank.gitversioning.targets file having been imported.
When a property is reassigned, the log shows which file and line caused it, but for the first assignment of a property we just see the value it has, but not who assigned it, and why. This would really help in debugging into why a certain property has the wrong value 'from the start'.

`VCRuntimeDLL = d:\depot\master2\packages\VisualCppTools.14.13.26131.1\lib\native\redist\debug_nonredist\x64\Microsoft.VC141.DebugCRT\vcruntime140d.dll`
`Property reassignment: $(VCRuntimeDLL)="d:\depot\master2\packages\VisualCppTools.14.13.26131.1\lib\native\redist\debug_nonredist\x64\Microsoft.VC141.DebugCRT\vcruntime140d.dll" (previous value: "d:\depot\master2\packages\VisualCppTools.14.13.26131.1\lib\native\redist\debug_nonredist\x64\Microsoft.VC141.DebugCRT\vcruntime141d.dll") at d:\depot\master2\MTBuild\MTBuild.ReferencedBits (126,5)
`
It has very nice features, look into opportunities for synergy and cross-pollination
Hello,

Let me start by thanking you for this wonderful tool that helped me many times already.
I'm not sure if this is is the right repository to ask this question, so feel free to redirect me to the right place..

I tried to use the "Project System Tools" extension (1.0.1.1927902) to analyze a build triggered by Visual Studio 2019 (16.1.5), as advised on the homepage here: http://msbuildlog.com/. (My build works as expected outside of Visual Studio, and does not consistently succeed when run inside VS)

However, when I tried to compare the build from Visual Studio with one started from MSBuild Structured Log Viewer, I noticed that the one from VS lacked a lot of details. Notably, All details regarding tasks that were executed by MSBuild were absent from the log. (e.g. Parameters, OutputProperties)

From an empty project I created to reproduce the issue, the result looks like this: (binlog vs structured log)
![msbuild-bin-log](https://user-images.githubusercontent.com/8518235/61362418-742f9100-a882-11e9-8b9d-cb7b20af1972.png)
![msbuild-structured-log](https://user-images.githubusercontent.com/8518235/61362423-75f95480-a882-11e9-95ee-67dd3d5469a3.png)

After reading the homepage of the project, I was under the impression that MSBuild binlog was up to par with the StructuredLogger used by MSBuild Structured Log Viewer, but my experience seems to indicate otherwise.

Do you know, if there is a way to increase the level of detail of the log produced by the "Project System Tools" extension, or possibly use the external StructuredLogger inside Visual Studio ?

Thanks

It will be awesome to have this tool available in [scoop](https://github.com/lukesampson/scoop), which is an awesome alternative to chocolatery