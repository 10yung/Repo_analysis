# Describe the bug

Warnings when using heatmaply.

# To Reproduce

I ran:
```
library(heatmaply)
heatmaply(mtcars)
```

I got:

```
> heatmaply(mtcars)
Warning messages:
1: In doTryCatch(return(expr), name, parentenv, handler) :
  unable to load shared object '/Library/Frameworks/R.framework/Resources/modules//R_X11.so':
  dlopen(/Library/Frameworks/R.framework/Resources/modules//R_X11.so, 6): Library not loaded: /opt/X11/lib/libfontconfig.1.dylib
  Referenced from: /Library/Frameworks/R.framework/Resources/modules//R_X11.so
  Reason: Incompatible library version: R_X11.so requires version 11.0.0 or later, but libfontconfig.1.dylib provides version 10.0.0
2: 'heatmap' objects don't have these attributes: 'showlegend'
Valid attributes include:
'type', 'visible', 'opacity', 'name', 'uid', 'ids', 'customdata', 'meta', 'hoverinfo', 'hoverlabel', 'stream', 'transforms', 'uirevision', 'z', 'x', 'x0', 'dx', 'y', 'y0', 'dy', 'text', 'hovertext', 'transpose', 'xtype', 'ytype', 'zsmooth', 'connectgaps', 'xgap', 'ygap', 'zhoverformat', 'hovertemplate', 'zauto', 'zmin', 'zmax', 'zmid', 'colorscale', 'autocolorscale', 'reversescale', 'showscale', 'colorbar', 'coloraxis', 'xcalendar', 'ycalendar', 'xaxis', 'yaxis', 'idssrc', 'customdatasrc', 'metasrc', 'hoverinfosrc', 'zsrc', 'xsrc', 'ysrc', 'textsrc', 'hovertextsrc', 'hovertemplatesrc', 'key', 'set', 'frame', 'transforms', '_isNestedKey', '_isSimpleKey', '_isGraticule', '_bbox'
 
```

# Additional context


```
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Mojave 10.14.4

Matrix products: default
BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] heatmaply_1.0.0   viridis_0.5.1     viridisLite_0.3.0 plotly_4.9.1      ggplot2_3.2.0    

loaded via a namespace (and not attached):
 [1] gtools_3.8.1       tidyselect_0.2.5   purrr_0.3.3        reshape2_1.4.3    
 [5] colorspace_1.4-1   vctrs_0.2.0        htmltools_0.4.0    yaml_2.2.0        
 [9] rlang_0.4.1        later_1.0.0        pillar_1.4.2       glue_1.3.1        
[13] withr_2.1.2        RColorBrewer_1.1-2 registry_0.5-1     foreach_1.4.7     
[17] lifecycle_0.1.0    plyr_1.8.4         stringr_1.4.0      munsell_0.5.0     
[21] gtable_0.3.0       htmlwidgets_1.5.1  caTools_1.17.1.2   codetools_0.2-16  
[25] labeling_0.3       fastmap_1.0.1      httpuv_1.5.2       crosstalk_1.0.0   
[29] Cairo_1.5-10       seriation_1.2-8    Rcpp_1.0.2         xtable_1.8-4      
[33] KernSmooth_2.23-15 promises_1.1.0     backports_1.1.4    scales_1.0.0      
[37] gdata_2.18.0       webshot_0.5.2      jsonlite_1.6       mime_0.7          
[41] gplots_3.0.1.1     gridExtra_2.3      digest_0.6.20      stringi_1.4.3     
[45] gclus_1.3.2        shiny_1.4.0        dplyr_0.8.3        grid_3.6.1        
[49] tools_3.6.1        bitops_1.0-6       magrittr_1.5       lazyeval_0.2.2    
[53] tibble_2.1.3       cluster_2.1.0      crayon_1.3.4       tidyr_1.0.0       
[57] pkgconfig_2.0.2    zeallot_0.1.0      dendextend_1.13.0  MASS_7.3-51.4     
[61] data.table_1.12.6  assertthat_0.2.1   httr_1.4.0         rstudioapi_0.10   
[65] iterators_1.0.12   R6_2.4.0           TSP_1.1-7          compiler_3.6.1    

```

I'd like to save an interactive html file of my heatmaply() plot remotely; saving any html support files on the web. In Plotly this is accomplished with an argument to the save file function that is something like remote=true. Does an argument like this exist for heatmaply?

My goal is to send the html file to others to open on other servers without access to the helper files on my own computer.


Hi @talgalili, 

Is it possible to combine heatmaply with plotly animations (https://plot.ly/r/animations/)? I.e., could we supply a series of same-size matrices and transition between them using the animation functionality?

I expect this feature is not yet implemented and I'm willing to put in the elbow grease to implement it myself, but I'd appreciate any comments on how feasible this would be. 

For background, I am one of the developers of an R package which implements convex bi-clustering (https://github.com/DataSlingers/clustRviz). Convex bi-clustering is a penalized method, so as the penalty parameter is varied, a series of increasingly smooth estimated heatmaps are created. (See slides 19-24 of http://www.stat.rice.edu/~gallen/cobra_talk_ibright.pdf) 

While we can compute these solutions relatively quickly, our visualizations are a bit more limited. We currently have i) heatmaply output for a single lambda value; and ii) a shiny app showing the output of `gtools::heatmap.2` as lambda as varied. I'm interested in doing something a bit more "web-native" and combining these two. 
Related: #184
In ggplot2, the alpha values of each cell in a heatmap can be set individually, using the aes() function.  Can the same be done in heatmaply?  
Currently, data plotted as side colors all share the same color scale. This becomes problematic when data on very different scales are plotted side-by-side, e.g. age and gender. In this case, the contrast between binary or logical variables becomes very poor.

A couple possible solutions would be to either:

1. Allow the user to provide alternative color scales (one per variable plotted), or,
2. Use a separate color scale for binary/logical variables

The first approach is the most flexible, but would require a little more manual effort on the user's end.

The second one has the potential benefit of improving some plots of this nature automatically, but is much less flexible and would not resolve scale issues for numeric variables on different scales.
https://stackoverflow.com/questions/48244816/controlling-the-shared-legend-when-adding-a-ggplot-dendrogram-plot-to-a-plotly-h/48254107#48254107
Need to ensure that ordering remains consistent using the different plot functions somehow
For example:

```
T<-c("Pla", "Ond","Gra", "Dol","Tro", "Ond+Dex", "Pal","Ram", "Ond+Drop",  "Ond+Met", "Gra+Dex",  "Pal+Dex", "Dol+Dex", "Dol+Drop", "Gran+Drop")
S1<- c(42.8, 54.6, 40.7, 81.5, 54.6, 83.3, NA, 35.3, NA, NA, 2.9, NA, NA, 54.2, NA)
S2<-c(51.9, 64.9, 93.5, 27.7, 35.3, NA, NA, NA, NA, NA, NA, NA, 26.6, NA, NA)
S3<-c(0.8, 25.4, 44.8, 13.3, 23.2, 71.9, 54.9, 51.3, 65.4, 52.8, 81.2, 43.7, 72.8, 76.8, 71.7)
S4<-c(4.6, 29.4, 54.3, 22, 42.2, 76, 30.1, 48.4, 84.6, 78.8, 84.3, 7.8, 73.9, 68.8, 44.8)
S5<-c(0.1, 20.1, 42.5, 37.7, 16.3, 63, 72.3, 34.9, 76.9, NA, 86.3, 67, NA, 71.9, 61.1)
mydata<-data.frame(T, S4, S3, S5, S2, S1)
rownames(mydata) <- mydata[,1]
mydata <- mydata[,-1]
library(heatmaply)
heatmaply(mydata, na.value = "grey50")
heatmaply(mydata, na.value = "green")

```


This seems to be a bug in plotly, for example:
```r
p <- heatmaply:::ggplot_heatmap(as.matrix(airquality[80:100,1:2]),
                           scale_fill_gradient_fun = scale_fill_gradientn(
                             colors = viridis(256),
                             na.value = "red"))
p
ggplotly(p)

```

This seems to stem from a bug in plotly: https://github.com/ropensci/plotly/issues/1149

Basically, retain the data values so that clustering is the same, but colour scale can be more compact and thus the heatmap more colorful