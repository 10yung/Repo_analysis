Summary:
could not write command to device, but could read from device

Actual Result:
2020-01-13 09:43:25.884 [Bluejay] [main] > Started write to Characteristic: 0000FFB2-0000-1000-8000-00805F9B34FB, Service: 0000FFB0-0000-1000-8000-00805F9B34FB on 845E44D2-42EE-7B03-CC5D-10675DF5DB09.
2020-01-13 09:43:25.885 [Bluejay] [main] > Failed writing to Characteristic: 0000FFB2-0000-1000-8000-00805F9B34FB, Service: 0000FFB0-0000-1000-8000-00805F9B34FB on 845E44D2-42EE-7B03-CC5D-10675DF5DB09 with error: Writing is not permitted.
**"Failed to write to sensor location with error: Writing is not permitted."**
2020-01-13 09:43:25.886 [Bluejay] [main] > Queue has removed Bluejay.WriteCharacteristic<Swift.String> because it has finished.
2020-01-13 09:43:25.886 [Bluejay] [main] > Queue is empty, nothing to update.
"data: Optional(\"ReturnTemp:+23\\n\")"
"return temp: 23"
"data: Optional(\"ReturnTemp:+23\\n\")"
"return temp: 23"
"data: Optional(\"ReturnTemp:+23\\n\")"
"return temp: 23"
"data: Optional(\"ReturnTemp:+23\\n\")"
"return temp: 23"
"data: Optional(\"ReturnTemp:+23\\n\")"
"return temp: 23"
"data: Optional(\"ReturnTemp:+23\\n\")"
"return temp: 23"



Device, Build, OS:
bt 4.0, Xcode 11.3 , iOS 13.3
### Fixes: #225

### Summary of Problem:
We'd like to be able to add and manage services created with Dittojay through JSON instead of having to add them in code.

### Proposed Solution:
Created a simple JSON schema that can be parsed to create services from.

A couple questions:
- I noticed that the `CBMutableService` constructor calls the UUID param `type`, is there a reason we should do this as well, or is it clearer to just stick with `uuid`?
- Is it helpful to have some sort of user-defined name attribute for keeping track of services once they're loaded?
- Do we need to require UUIDs be set ahead of the time, or can they be optional and generated at runtime by Dittojay?
- Does it make sense to have `value` passed in as a String that we can then convert into `Data?`?
### Fixes #119 
Fixed bug in start with mode .use (added missing restoration  centralManager delegate) and then added queue.start()
### Summary of Problem:
There is a missing delegation restoration when using start with mode .use 
(we were forced to use start with mode .use because in iOS 13 bluejay.start() and connect() no longer work after another cbCentralManager has completed a scan (prior to iOS13, another scan with another cbCentralManager was not required )
For further info about this issue, feel free to contact me.
### Proposed Solution:
When recycling a cbCentralManager we need to restore its delegation to bluejay.
Also it is necessary to add queue.start() to solve the issue in #119 "Queue is paused because CBCentralManager is not ready yet" as @JeremyChiang proposed.

### Testing Completed and Required:

### Screenshots:





Currently i don't see any API to disable logging permanently to the file, although there is exposed function to clear logs. Am i missing something or there is no such functionality?

In case of not having such option could i propose PR with Bluejay `Configuration` structure to toggle it?


This issue is related about how iOS caches peripherals and how it updates its cached data one the device is connected.
Once you do scan iOS caches all the peripherals names in advertising packets along with a the assigned UUIDs.
Once you connect to a peripheral the name property is updated with the name in the GAP (sometime advertising name and GAP name could differ due to size reason).
Cached names and peripheral identifiers persist until a full erase on the iOS devices.
If another device changes the name of peripheral some inconsistency could arise.

The connection mechanism on Bluejay works on peripheral identifier, once we pass the peripheral identifier extracts the UUID, call the method `retrievePeripherals` and obtain the related `CBPeripheral`. This peripheral is passed to a Connection operation, that also set the `connectingPeripheral` property.

Once the device is connected in the `didConnect` delegate method of `CBCentralManager` the `connectingPeripheral` is passed to the `connectedPeripheral`, basically avoiding any possibility to the name to be updated also on the bluejay side, since the `connectingPeripheral` represent the old state.


Summary:

I found this doing the same testing that I mention in https://github.com/steamclock/bluejay/issues/213.

Steps to Reproduce:

1. Press the connect/disconnect button very quickly, causing fast sequences of connecting and disconnecting.

Actual Result:

Crashes on:
![image](https://user-images.githubusercontent.com/47845/60039717-5f961980-9685-11e9-8e29-46b698309dd7.png)

2019-06-24 13:36:00.309 [Bluejay] [main] > Bluejay.Connection added to queue with UUID: 71FD0814-5022-4F54-893F-73D18B5099D1.
2019-06-24 13:36:00.310 [Bluejay] [main] > Init Peripheral: <Bluejay.Peripheral: 0x1187ad410>, Optional(<CBPeripheral: 0x10e317dc0, identifier = BC21C4F8-8545-A51A-873F-25A51D8EB13D, name = Peripheral, state = disconnected>)
2019-06-24 13:36:00.311 [Bluejay] [main] > Queue will start Bluejay.Connection...
2019-06-24 13:36:00.312 [Bluejay] [main] > Started connecting to Peripheral.
2019-06-24 13:36:00.825 [Bluejay] [main] > Explicit disconnect called.
2019-06-24 13:36:00.830 [Bluejay] [main] > Cancel everything called with error: Explicit disconnect, shouldDisconnect: true
2019-06-24 13:36:00.830 [Bluejay] [main] > Cancel everything called while still connecting...
2019-06-24 13:36:00.831 [Bluejay] [main] > Should auto-reconnect: false
2019-06-24 13:36:00.831 [Bluejay] [main] > Queue will now cancel all operations with error: Explicit disconnect
2019-06-24 13:36:00.831 [Bluejay] [main] > Cancelling a pending connection to Peripheral
2019-06-24 13:36:00.832 [Bluejay] [main] > Interrupting cancel all to terminate a pending connection...
2019-06-24 13:36:00.836 [Bluejay] [main] > Central manager did connect to: Peripheral
2019-06-24 13:36:00.836 [Bluejay] [main] > Should auto-reconnect: true
2019-06-24 13:36:00.837 [Bluejay] [main] > Connected to: Peripheral
2019-06-24 13:36:00.837 [Bluejay] [main] > Queue has removed Bluejay.Connection because it has finished.
2019-06-24 13:36:00.837 [Bluejay] [main] > Queue is empty, nothing to update.
2019-06-24 13:36:00.837 [Bluejay] [main] > Connection deinitialized.
2019-06-24 13:36:00.838 [Bluejay] [main] > Requesting read on Characteristic: D1E6D07D-6C31-40D1-850A-03FCFE75B84B, Service: 9D8E58B2-1D2D-4DC4-B324-EDDF69746AD4...
2019-06-24 13:36:00.839 [Bluejay] [main] > Queue will start Bluejay.DiscoverService...
2019-06-24 13:36:00.840 [Bluejay] [main] > Central manager did disconnect from Peripheral without errors.
2019-06-24 13:36:00.840 [Bluejay] [main] > Peripheral was connected before centralManager(_:didDisconnectPeripheral:error:).
2019-06-24 13:36:00.840 [Bluejay] [main] > Cleared all restoration peripheral references.
2019-06-24 13:36:00.840 [Bluejay] [main] > Cleared all non restoration peripheral references.
2019-06-24 13:36:00.841 [Bluejay] [main] > The disconnect is expected.
2019-06-24 13:36:00.841 [Bluejay] [main] > Should auto-reconnect: false
2019-06-24 13:36:00.841 [Bluejay] [main] > Deinit Peripheral: <Bluejay.Peripheral: 0x118759c90>, Optional(<CBPeripheral: 0x10e317dc0, identifier = BC21C4F8-8545-A51A-873F-25A51D8EB13D, name = Peripheral, state = disconnected>))
2019-06-24 13:36:00.841 [Bluejay] [main] > Starting disconnect clean up...
< Crash occurs here >

Expected Result: 

The connects/disconnects happen as expected.

Device, Build, OS:

iPhone Xs, Bluejay 0.8.5, iOS 12.3.1