Linker gives error: linking with `link.exe` failed: exit code: 1120 with the following details:
|
  = note: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\bin\\HostX64\\x86\\link.exe" "/NOLOGO" "/NXCOMPAT" "/LARGEADDRESSAWARE" "/SAFESEH" ...

  = note: libdeno_core-bdc8737d05bc28a0.rlib(deno_core-bdc8737d05bc28a0.3vq8sopdlcddeykw.rcgu.o) : error LNK2019: unresolved external symbol _v8__Local__New referenced in function __ZN8rusty_v86global15Global$LT$T$GT$3get28_$u7b$$u7b$closure$u7d$$u7d$17h05d8f060dc1b5cb7E


## Motivation

As described in #3694, it's necessary to end the program even when certain types of async ops are remaining in `pending_ops` list. The example of such op is `op_poll_signal` in #3610 (which not yet landed)

## Solution

This PR enhances `deno_core::Op::Async` type. Now `Op::Async` has the flag `blocks_exit` along with its main `future`. The flag is used when checking the result of `poll` method of deno_core::Isolate and if the flag is false (= the op is *optional*), those ops are filtered out in calculation of `Poll` result, which means the program can exit with those optional ops still remaining.

---
closes #3694
Uses `Path` instead of `String` for read/write permission APIs. `resolve_from_cwd()` as used in fs ops can just return a `Path` instead of a tuple.

The whitelists still store paths as `String`s because of some memory issue.
Deno's `request.respond()` handles [`Reader`](https://deno.land/typedoc/interfaces/deno.reader.html) instances automatically, which makes streaming a file to the browser very convenient. This is awesome! However, the program below leaks resources because `file.close()` is never called.

```js
import { serve } from "https://deno.land/std@v0.30.0/http/server.ts";
const server = serve({ port: 3000 });
const handleRequest = async (request) => {
    const file = await Deno.open('./cat.jpg');
    request.respond({ body : file });
};
for await (const request of server) {
    handleRequest(request);
}
```

I propose that If the [`Reader`](https://deno.land/typedoc/interfaces/deno.reader.html) is also a [`Closer`](https://deno.land/typedoc/interfaces/deno.closer.html) (as is the case for [`File`](https://deno.land/typedoc/classes/deno.file.html)), then its `.close()` method should be called.
The error comes from here:
https://github.com/denoland/deno/blob/v0.30.0/deno_typescript/lib.rs#L271

No idea why. Here's the log

```
[...]
cargo:rerun-if-changed=/Users/rld/src/deno/target/package/deno-0.30.0/js/streams/readable-stream-byob-reader.ts
cargo:rerun-if-changed=/Users/rld/src/deno/target/package/deno-0.30.0/js/repl.ts
cargo:rerun-if-changed=/Users/rld/src/deno/target/package/deno-0.30.0/js/format_error.ts
cargo:rerun-if-changed=/Users/rld/src/deno/target/package/deno-0.30.0/js/location.ts

--- stderr
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/libcore/result.rs:1165:5
stack backtrace:
   0: backtrace::backtrace::libunwind::trace
             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized
             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:77
   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt
             at src/libstd/sys_common/backtrace.rs:61
   4: core::fmt::write
             at src/libcore/fmt/mod.rs:1028
   5: std::io::Write::write_fmt
             at src/libstd/io/mod.rs:1412
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:65
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:50
   8: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:188
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:205
  10: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:464
  11: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:373
  12: rust_begin_unwind
             at src/libstd/panicking.rs:302
  13: core::panicking::panic_fmt
             at src/libcore/panicking.rs:139
  14: core::result::unwrap_failed
             at src/libcore/result.rs:1165
  15: core::result::Result<T,E>::unwrap
             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/result.rs:933
  16: deno_typescript::read_file
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_typescript-0.30.0/lib.rs:256
  17: deno_typescript::get_asset
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_typescript-0.30.0/lib.rs:271
  18: deno_typescript::get_asset2
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_typescript-0.30.0/lib.rs:246
  19: deno_typescript::ops::read_file
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_typescript-0.30.0/ops.rs:48
  20: deno_typescript::ops::json_op::{{closure}}::{{closure}}
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_typescript-0.30.0/ops.rs:23
  21: core::result::Result<T,E>::and_then
             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/result.rs:691
  22: deno_typescript::ops::json_op::{{closure}}
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_typescript-0.30.0/ops.rs:21
  23: deno_typescript::compiler_op::{{closure}}
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_typescript-0.30.0/lib.rs:62
  24: <alloc::boxed::Box<F> as core::ops::function::Fn<A>>::call
             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/liballoc/boxed.rs:956
  25: deno_core::ops::OpRegistry::call
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_core-0.30.0/ops.rs:95
  26: deno_core::isolate::Isolate::dispatch_op
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_core-0.30.0/isolate.rs:496
  27: deno_core::bindings::send
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_core-0.30.0/bindings.rs:440
  28: core::ops::function::Fn::call
             at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14/src/libcore/ops/function.rs:69
  29: rusty_v8::function::<impl rusty_v8::support::MapFnFrom<F> for extern "C" fn(*const rusty_v8::function::FunctionCallbackInfo)>::mapping::{{closure}}
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/rusty_v8-0.1.0/src/function.rs:240
  30: <extern "C" fn(A0) .> R as rusty_v8::support::CFnFrom<F>>::mapping::c_fn
             at /Users/rld/.cargo/registry/src/github.com-1ecc6299db9ec823/rusty_v8-0.1.0/src/support.rs:398
  31: Call
             at ../../../../../../../../.cargo/registry/src/github.com-1ecc6299db9ec823/rusty_v8-0.1.0/v8/src/api/api-arguments-inl.h:158
  32: HandleApiCallHelper<false>
             at ../../../../../../../../.cargo/registry/src/github.com-1ecc6299db9ec823/rusty_v8-0.1.0/v8/src/builtins/builtins-api.cc:111
  33: Builtin_Impl_HandleApiCall
             at ../../../../../../../../.cargo/registry/src/github.com-1ecc6299db9ec823/rusty_v8-0.1.0/v8/src/builtins/builtins-api.cc:141
  34: Builtin_HandleApiCall
             at ../../../../../../../../.cargo/registry/src/github.com-1ecc6299db9ec823/rusty_v8-0.1.0/v8/src/builtins/builtins-api.cc:129
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
fatal runtime error: failed to initiate panic, error 5
```
Previously I was able to use `--target x86_64-unknown-linux-musl` on rusty_v8 and deno (excluding the plugin). https://github.com/denoland/rusty_v8/issues/49


> It's unclear to me if it's best to _only_ target x86_64-unknown-linux-musl or to additionally support it. e.g. sccache seems to [_only_ provide binaries for that target](https://github.com/mozilla/sccache/releases/tag/0.2.12).

The one concern is that glibc is required for plugins (but I don't know if that means glibc cannot be used on a binary created with musl 🤷‍♂ ).

This is useful for platforms without glibc, examples alpine linux and amazon linux (which is occasionally a pain building, so would be helpful if a compatible binaries was in deno's CI).

xlink: #3243 #1658 #1495 #3356
```
> await Deno.permissions.query({ name: "read" })
error: Uncaught SyntaxError: await is only valid in async function
► <unknown>:1:1
    at evaluate ($deno$/repl.ts:84:34)
    at replLoop ($deno$/repl.ts:175:13)
```
It would be nice to be able to type:

    $ deno eval -p 42
    42

Instead of:

    $ deno eval 'console.log(42)'
    42

I looked at implementing `-p` but:

1. the code is evaluated asynchronously and off-thread as a module, and
2. the result of `module.evaluate()` is a promise that evaluates to `undefined`, not the value of the expression

So this might be harder than I imagined.
Deno now doesn't exit when it has unfinished async ops. However I think that's inconvenient (or inappropriate) for certain types of ops.

For example, in #3610, I want the program to exit even when the user is still listening to the signals, but that's impossible to implement with the current core structure because when the user is listening to signals, there're async ops remaining and that blocks the program to exit.

I suggest we should enhance deno_core::Op::Async struct to have the additional flag for expressing whether it blocks the program to exit or not, and make it possbile to choose to block or not for each op.
Depends on #3690