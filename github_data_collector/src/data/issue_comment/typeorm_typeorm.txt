**Issue type:**

[X] question
[ ] bug report
[ ] feature request
[ ] documentation issue

**Database system/driver:**

[ ] `cordova`
[ ] `mongodb`
[ ] `mssql`
[ ] `mysql` / `mariadb`
[ ] `oracle`
[X] `postgres`
[ ] `cockroachdb`
[ ] `sqlite`
[ ] `sqljs`
[ ] `react-native`
[ ] `expo`

**TypeORM version:**

[X] `latest`
[ ] `@next`
[ ] `0.x.x` (or put your version here)

**Steps to reproduce or a small repository showing the problem:**

I have a query that operates on 6 tables and returns some attributes from each of them, for a total of over 100 attributes selected. I have noticed that if I only return 1 attribute per table (i.e. just the "id") on my machine the code is 2.5 seconds faster than if I select all the 100+ attributes.

If my query is a getMany() which joins as N:M another table, the number of records in the table M doesn't affect the time that the code takes to return me the data but if I remove the selection of attributes (~50 of them) from such table M, then the code runs much faster (even if the table itself has 0 records in it!).

Please note that this is not a query optimisation question but it's related to how TypeORM reconstructs the final object returned from a getOne() or getMany() function.

Any help will be greatly appreciated, thanks!
**Issue type:**

[X ] question
[ ] bug report
[ ] feature request
[ ] documentation issue

**Database system/driver:**

[ ] `cordova`
[ ] `mongodb`
[ ] `mssql`
[ ] `mysql` / `mariadb`
[ ] `oracle`
[ ] `postgres`
[ ] `cockroachdb`
[ ] `sqlite`
[ ] `sqljs`
[ ] `react-native`
[ ] `expo`

**TypeORM version:**

[ ] `latest`
[ ] `@next`
[ ] `0.x.x` (or put your version here)

**Steps to reproduce or a small repository showing the problem:**

Trying to find a way to do this, I can't seem to find any search results either. I am just looking for a way to get all colum names and types from my entities after they have been created! is this possible?
**Issue type:**

[ ] question
[x] bug report
[ ] feature request
[ ] documentation issue

**Database system/driver:**

[ ] `cordova`
[ ] `mongodb`
[ ] `mssql`
[ ] `mysql` / `mariadb`
[ ] `oracle`
[X] `postgres`
[ ] `cockroachdb`
[ ] `sqlite`
[ ] `sqljs`
[ ] `react-native`
[ ] `expo`

**TypeORM version:**

[X] `latest`
[ ] `@next`
[X] `0.2.22`

**Steps to reproduce or a small repository showing the problem:**
All my tables defined in Postgres database have the auditing columns "created_at" , "updated_at" and "version". The created_at and version are by default, set as "NOT NULL".

For some reason, the ORM by default is not setting a new date when inserting a new record, even with the @CreateDateColumn() decorator declared. However, everything works fine regards to the version property with the @VersionColumn() decorator. Both are not null in the Database.

I am using a workaround with @BeforeInsert() to set a new Date. However, it is not elegant at all.

My column declaration:
```
  @CreateDateColumn()
  @Column({ name: 'created_at' })
  createdAt!: Date;

  @UpdateDateColumn()
  @Column({ name: 'updated_at' })
  updatedAt!: Date;

  @VersionColumn()
  @Column()
  private version!: number;
```
Down below, the log the shows evidence that the ORM is not setting the date automatically:
```
query: START TRANSACTION
query: INSERT INTO "contacts"("type", "name", "email", "website", "phone1", "phone1_ext", "phone2", "phone2_ext", "address", "address_compl", "city", "province", "postal_code", "country", "created_at", "updated_at", "version") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, DEFAULT, DEFAULT, DEFAULT) RETURNING "id" -- PARAMETERS: ["P","Leonardo","","","6479154312","","34535435345","a","80, Industry St.","Suite 100","Toronto","ON","M9V5E3","CA"]
query failed: INSERT INTO "contacts"("type", "name", "email", "website", "phone1", "phone1_ext", "phone2", "phone2_ext", "address", "address_compl", "city", "province", "postal_code", "country", "created_at", "updated_at", "version") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, DEFAULT, DEFAULT, DEFAULT) RETURNING "id" -- PARAMETERS: ["P","Leonardo","","","6479154312","","34535435345","a","80, Industry St.","Suite 100","Toronto","ON","M9V5E3","CA"]
error: error: null value in column "created_at" violates not-null constraint
    at Connection.parseE (/home/wallup1/dev/wallupcms/node_modules/pg/lib/connection.js:604:13)
    at Connection.parseMessage (/home/wallup1/dev/wallupcms/node_modules/pg/lib/connection.js:403:19)
    at Socket.<anonymous> (/home/wallup1/dev/wallupcms/node_modules/pg/lib/connection.js:123:22)
    at Socket.emit (events.js:210:5)
    at Socket.EventEmitter.emit (domain.js:476:20)
    at addChunk (_stream_readable.js:308:12)
    at readableAddChunk (_stream_readable.js:289:11)
    at Socket.Readable.push (_stream_readable.js:223:10)
    at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
  name: 'error',
  length: 301,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (1, P, Leonardo, , , 6479154312, , 34535435345, a, 80, Industry St., Suite 100, Toronto, ON, M9V5E3, CA, null, null, null).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'contacts',
  column: 'created_at',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '2042',
  routine: 'ExecConstraints'
}
```
More details:
```
[2020-01-17T19:11:00.802] [DEBUG] ContactModel.ts QueryFailedError: null value in column "created_at" violates not-null constraint
    at new QueryFailedError (/home/wallup1/dev/wallupcms/src/error/QueryFailedError.ts:9:9)
    at Query.<anonymous> (/home/wallup1/dev/wallupcms/src/driver/postgres/PostgresQueryRunner.ts:178:30)
    at Query.handleError (/home/wallup1/dev/wallupcms/node_modules/pg/lib/query.js:145:17)
    at Connection.connectedErrorMessageHandler (/home/wallup1/dev/wallupcms/node_modules/pg/lib/client.js:214:17)
    at Connection.emit (events.js:210:5)
    at Connection.EventEmitter.emit (domain.js:476:20)
    at Socket.<anonymous> (/home/wallup1/dev/wallupcms/node_modules/pg/lib/connection.js:128:12)
    at Socket.emit (events.js:210:5)
    at Socket.EventEmitter.emit (domain.js:476:20)
    at addChunk (_stream_readable.js:308:12) {
  message: 'null value in column "created_at" violates not-null constraint',
  name: 'QueryFailedError',
  length: 300,
  severity: 'ERROR',
  code: '23502',
  detail: 'Failing row contains (2, P, Leonardo, , , 6479154312, , 34535435345, a, 876, Maine St., Suite 1456, Toronto, ON, M8T7Y9, CA, null, null, null).',
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: 'public',
  table: 'contacts',
  column: 'created_at',
  dataType: undefined,
  constraint: undefined,
  file: 'execMain.c',
  line: '2042',
  routine: 'ExecConstraints',
  query: 'INSERT INTO "contacts"("type", "name", "email", "website", "phone1", "phone1_ext", "phone2", "phone2_ext", "address", "address_compl", "city", "province", "postal_code", "country", "created_at", "updated_at", "version") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, DEFAULT, DEFAULT, DEFAULT) RETURNING "id"',
  parameters: [
    'P',              'Leonardo',
    '',               '',
    '6479154312',     '',
    '34535435345',    'a',
    '876, Maine St.', 'Suite 1456',
    'Toronto',        'ON',
    'M8T7Y9',         'CA'
  ]
}
```

**Issue type:**

[ ] question
[ X ] bug report
[ ] feature request
[ ] documentation issue

**Database system/driver:**

[ ] `cordova`
[ ] `mongodb`
[ ] `mssql`
[ X ] `mysql` / `mariadb`
[ ] `oracle`
[ ] `postgres`
[ ] `cockroachdb`
[ ] `sqlite`
[ ] `sqljs`
[ ] `react-native`
[ ] `expo`

**TypeORM version:**

[ X ] `latest`
[ ] `@next`
[ ] `0.x.x` (or put your version here)

**Steps to reproduce or a small repository showing the problem:**

I created a select statement according to the documentation. This code is pretty old and i think it worked some while ago. 
But suddenly i get an Error:
'ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \' `_value` = \'%s%\', `_useParameter` = true, `_multipleParameters` = false, `usePa\' at line 1',

I also tried with the other FindOperators.

`
return this.categoryRepository.find({
            where: { name: Like('%' + searchString + '%') },
        });
`

The Problem is in the QueryBuilder:
`
parameterValue instanceof FindOperator
`

He always returns false, even if in debug mode, it shows that is a FindOperator.
if i create a FindOperator object in my service and make the instanceof check, it returns correctly true.
Anyone an idea how this could happen? I tried to downgrade typeorm to 2.2.0, but it didnt change. 
I use typescript 3.7.5.
Any other ideas what i can try?

**Issue type:**

[ ] question
[ X] bug report
[ ] feature request
[ ] documentation issue

**Database system/driver:**

[ ] `cordova`
[ ] `mongodb`
[ ] `mssql`
[ X] `mysql` / `mariadb`
[ ] `oracle`
[ ] `postgres`
[ ] `cockroachdb`
[ ] `sqlite`
[ ] `sqljs`
[ ] `react-native`
[ ] `expo`

**TypeORM version:**

[ ] `latest`
[ ] `@next`
[ X] `0.2.17` (or put your version here)

**Steps to reproduce or a small repository showing the problem:**

1) Create a database connection.
2) Try to use the findOne option where you query on a field that doesn't exist in the database. In our case I queried for domainName instead of name.

TypeOrm will now return the first record from the database even tho is a completely different record than it should be. 

**Issue type:**

[x] bug report

**Database system/driver:**

[x] `mysql` / `mariadb`

**TypeORM version:**

[x] `latest`
[x] `@next`

**Steps to reproduce or a small repository showing the problem:**
Create an enum column with default value null
```ts
enum MyEnum {
  valueA = 'valueA',
  valueB = 'valueB',
}

@Entity()
export class Entity extends BaseEntity {
  @Column({
    type: 'enum',
    enum: MyEnum,
    nullable: true,
    default: null,
  })
  field?: MyEnum;
}
```

result 
```js
{
  message: "Invalid default value for 'field'",
  code: 'ER_INVALID_DEFAULT',
  errno: 1067,
  sqlState: '42000',
  sqlMessage: "Invalid default value for 'field'",
  name: 'QueryFailedError',
  query: "ALTER TABLE `entity` CHANGE `field` `field` enum ('valueA', 'valueB') NULL DEFAULT 'null'",
  parameters: []
}
```

It should've generated  `query: "ALTER TABLE ``entity`` CHANGE ``field`` ``field`` enum ('valueA', 'valueB') NULL DEFAULT null"`,

Adding `&& defaultValue !== null` seems to work
https://github.com/typeorm/typeorm/blob/e8eb98b0bd3c551d82c3f6fd0899259ea868c685/src/driver/mysql/MysqlDriver.ts#L572
**Issue type:**

[ ] question
[x] bug report
[ ] feature request
[ ] documentation issue

**Database system/driver:**

[ ] `cordova`
[ ] `mongodb`
[ ] `mssql`
[ ] `mysql` / `mariadb`
[ ] `oracle`
[x] `postgres`
[ ] `cockroachdb`
[ ] `sqlite`
[ ] `sqljs`
[ ] `react-native`
[ ] `expo`

**TypeORM version:**

[x] `latest`
[ ] `@next`
[ ] `0.x.x` (or put your version here)

**Steps to reproduce or a small repository showing the problem:**

When I am creating a new entity with the function .create() and in the entity there are relationships. All the relationships of that relation are being queried what is causing big performance issues in my application.

I created a repository to reproduce this issue: https://github.com/openbook-io/typeorm-issue

My entities are here: https://github.com/openbook-io/typeorm-issue/blob/master/src/entity/entities.ts

As you see User has a lazy Asset relationship and the Organization has a relationship to the User.

Now if i'm creating a new organization and adding the user entity. The assets are being queried. 

I reproduced this here: 
https://github.com/openbook-io/typeorm-issue/blob/master/src/index.ts

I hope I explained the problem well. If there is something unclear please let me know or if this is known behaviour.

Thanks in advance

<!--
    To answer those questions you need to put "x" inside the square brackets, for example:
    [x] `mysql`
    [ ] `postgres`

    Also, please format your code properly (by taking code blocks into ```ts .... ```)
!>

**Issue type:**

[ ] question
[ ] bug report
[x] feature request
[ ] documentation issue

**Database system/driver:**

[ ] `cordova`
[ ] `mongodb`
[ ] `mssql`
[ ] `mysql` / `mariadb`
[ ] `oracle`
[x] `postgres`
[ ] `cockroachdb`
[ ] `sqlite`
[ ] `sqljs`
[ ] `react-native`
[ ] `expo`

**TypeORM version:**

[ ] `latest`
[ ] `@next`
[x] `0.2.5` 

**Steps to reproduce or a small repository showing the problem:**

Hi guys, awesome work. 

I'm currently working on a multiple tenancy application (SaaS) where each tenanct would have their own DB connection (and same models) which is determined by the imcoming request (subdomain). I used continuation-local-storage to initialize tenant's connection in express  middleware and refer to them in services and get repositories from them. 

Just wondering if the Reponsitory class could be rewritten to support dynamically generated manager and metadata and etc. So that I can extend it and override those functions to get the current manager, metadata and queryRunner etc. So that I can use it more elegently - inject repository instances to services.


```
/** middleware to initialize tenant's connection */
import { createNamespace } from 'continuation-local-storage';
import * as express from 'express';
import { ExpressMiddlewareInterface, Middleware } from 'routing-controllers';
import { Connection, createConnection, getConnection, Repository } from 'typeorm';

import { SnakeNamingStrategy } from '../../database/snake-naming.strategy';
import { Constants } from '../common/constants';
import { TenantEntity } from '../modules/tenant/TenantEntityCatalog';
import { TenantNotFoundError } from '../modules/tenant/TenantErrors';

@Middleware({ type: 'before' })
export class CreateContextMiddleware implements ExpressMiddlewareInterface {

    public use(req: express.Request, res: express.Response, next: express.NextFunction): any {
        ns.bindEmitter(req);
        ns.bindEmitter(res);

        ns.run(async () => {
            ns.set(Constants.TENANT_SLUG_KEY, req.headers.host.split('.')[0]);
            await getOrCreateTenantConnection();
            next();
        });
    }

}

export function getCurrentTenantSlug(): string {
    return ns.get(Constants.TENANT_SLUG_KEY);
}

export function getTenantConnection(): Connection {
    const currentSlug = getCurrentTenantSlug();
    return getConnection(currentSlug);
}

async function getOrCreateTenantConnection(): Promise<Connection> {
    const currentSlug = getCurrentTenantSlug();
    const tenantRepository: Repository<TenantEntity> = getConnection().getRepository<TenantEntity>(TenantEntity);
    const tenant: TenantEntity = await tenantRepository.findOne({
        slug: currentSlug,
    });

    return getOrCreateConnection(tenant);

}

async function getOrCreateConnection(tenant: TenantEntity): Promise<Connection> {
    try {
        return getConnection(tenant.slug);
    } catch (e) {
        try {
            return createConnection({
                type: 'postgres',
                host: tenant.databaseHost,
                port: tenant.databasePort,
                username: tenant.databaseUser,
                password: tenant.databasePassword,
                database: tenant.databaseName,
                name: tenant.slug,
                synchronize: false,
                migrationsRun: true,
                namingStrategy: new SnakeNamingStrategy(),
                entities: [
                    __dirname + '/../**/*Entity{.ts,.js}',
                    // __dirname + '/../../models/**/*Entity{.ts,.js}',
                ],
                migrations: [
                    __dirname + '/../../database/migrations/tenant/*{.ts,.js}',
                ],
            });
        } catch (e) {
            throw new TenantNotFoundError();
        }
    }
}

/** requested feature in Ropository.ts */
 /**
     * Checks if entity has an id.
     * If entity composite compose ids, it will check them all.
     */
    hasId(entity: any): boolean {
        return this.manager().hasId(this.metadata().target, entity);
    }
    public manager(){
        return this.manager;
    }
    public metadata(){
        return this.metadata;
    }
```
I don't know if this makes any sense. I'm fairly new to TypeScript and Nodejs. Any suggestion would be appreciated. 

Keep up the awesome work. Thanks. 

Regards,
Jasper
**Issue type:**

[X] question
[X] feature request

**Database system/driver:**

[X] `postgres`

**TypeORM version:**

[X] `latest`

---

Hello!

Is it possible to make TypeORM to return `undefined` instead of `null` for columns with `NULL` values in them?

This will really help to make values consistent, because missing values will be represented by a single `undefined` value not two different values (`undefined` and `null`).

The other way would be to initialize all empty values in my new entities with `null`s, but it would be cumbersome and will make code more complex.

---

```typescript

class MyEntity {
  @Column()
  const value?: string;
}

const myEntity = new MyEntity();

expect(myEntity.value).to.be.undefined; // OK

myEntity = await entityManager.save(myEntity);

expect(myEntity.value).to.be.undefined; // Not OK, its null now

```
**Issue type:**

[X] question
[ ] bug report
[ ] feature request
[ ] documentation issue

**Database system/driver:**

[ ] `cordova`
[ ] `mongodb`
[ ] `mssql`
[ ] `mysql` / `mariadb`
[ ] `oracle`
[ ] `postgres`
[ ] `cockroachdb`
[ ] `sqlite`
[ ] `sqljs`
[X] `react-native`
[ ] `expo`

**TypeORM version:**

[x] `latest`
[ ] `@next`
[ ] `0.x.x` (or put your version here)

In an app I'm building, I have cases where I need to load fully populated objects.T That includes the all layers of relations as wel. I can do this manually, but that seems really messy and I can't imagine there isn't a way to accomplish this with query builder.

How can one load ALL layers of relations of an entity?