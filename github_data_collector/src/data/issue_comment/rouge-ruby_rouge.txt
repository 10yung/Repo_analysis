Hi,

I would like to submit some updates and improvements to the PHP lexer:

* fix case insensitivity of (accordingly to the language they are case insensitive but currently are not):
  + `<?php`
  + keywords (when checked in `@keywords`)
  + function/method names (when checked in `@builtins`)
* fix heredoc: the syntax with `"` around the starting label was not recognized as is
* updates from the language:
  + support `_` in (binary, decimal, hexadecimal, ...) numbers (7.4.0)
  + support for binary numbers (`0b...`) (5.4.0)
  + Unicode codepoints escape syntax (`\u{...}`) (7.0.0)
  + add some missing keywords:
    * 7.4.0: `fn`
    * type declarations (PHP 7, including `void` and nullable types from PHP 7.1)
    * 7.0.0: `class` (anonymous classes), `yield from`
    * 5.4.0: `callable`, `insteadof`, `trait`, `__TRAIT__`
    * 5.3.0: `goto`, `__NAMESPACE__`, `__DIR__`
    * others: `instanceof`, `__CLASS__`, `__FUNCTION__`, `__METHOD__`, `__halt_compiler`
    * `self` even if it's not really a reserved word

I haven't deleted them but I am in favor of the removal of the current builtin/predefined constants (E_\* and PHP_\*) and class `stdClass` from `@keywords`: they are not keywords and are case sensitive (which is not the case of the keywords in PHP as said above). Let me know if you agree and if I missed or forgot something.

Also, is there a reason for `TRUE`/`FALSE`/`NULL` to be in `@keywords`? I mean shouldn't `rule %r/(true|false|null)\b/, Keyword::Constant` be made case insensitive instead?


Thanks.
Adding a lexer for ECL. ECL is the "Enterprise Control Language" for the open source HPCC-System (High Performance Computing Cluster) from LexisNexis.
TypeScript allows a user to mark a property as an optional when defining an interface but appending a question mark to the property name. Rouge's TypeScript lexer doesn't currently support this because the lexer merely uses the states defined in the JavaScript lexer.

This PR prepends a rule to the `statement` state that will match a property name ending with a `?`. This will allow matches outside of the interface definition but as syntax checking is a non-goal of Rouge this is not considered to be a problem.

The TypeScript visual sample is updated to include an example.

This fixes #1391.
**Is your enhancement request related to a problem? Please describe.**
No particular problem.

**Describe the solution you'd like**
I'd like to be able to define my own custom lexer locally to be used by my specific use case.

**Additional context**
My online documentation contains code snippets in a custom homemade language. I'm not sure if it's appropriate or worth the effort to get it reviewed by your team and to make it natively supported in Rouge. Do you think if I can define a lexer, I should just get it reviewed and merged? Or would it make more sense to support custom local lexers?

**Name of the lexer**
Typescript

**Code sample**
```ts
interface GreetingSettings {
  greeting: string;
  duration?: number;
  color?: string;
}
```

**Screenshots**
![image](https://user-images.githubusercontent.com/1505561/72380019-8def4b00-36e2-11ea-9b05-4ee8352fe9ec.png)

Notice how Rouge correctly highlights required property name `greeting`, but does not highlight optional property names `duration` and `color` due to the trailing `?`.

**Additional context**
This is an official example from [the TypeScript docs](https://www.typescriptlang.org/docs/handbook/declaration-files/by-example.html#reusable-types-interfaces). Optional properties are very common in interface declarations (`.d.ts` files).
This is a lexer for _C minus minus_, which is a dialect of _C--_. It's used as intermediate and hand-written language in the Glasgow Haskell Compiler.

More details:
- https://en.wikipedia.org/wiki/C--
- https://gitlab.haskell.org/ghc/ghc/wikis/commentary/rts/cmm


it's an acronym for "Advanced Business Application Programming" and therefore 'ABAP' should be valid
**Is your enhancement request related to a problem? Please describe.**
Currently, there is no way to specify rich lexers with options. For example, ERB in a configuration file, with escaped content - we would need to pass `?lang=erb` to the `escape` lexer, and `?parent=conf` to the erb lexer.

**Describe the solution you'd like**
I would propose the syntax `?lang=erb&lang.parent=conf` - there may be a CGI parser out there that can handle it.

**Additional context**
A potential issue is that we may need to specify some keys be inherited (or inherit all keys? that's the default behaviour right now). A good example of this is `debug` - if `?debug=1` is passed to the main lexer, then *all* lexers involved should have debugging turned on.
Fixes #1374
**Name of the lexer**
python.rb

**Code sample**
A sample of the code that produces the bug.

```python
import datetime.datetime

some_object.Method()
some_object.attribute

floats = (19.0, 19.)
```

**Additional context**
In rouge (and Pygments) `.` is treated as an operator

https://github.com/rouge-ruby/rouge/blob/7e04388a1222bf26ddb660778744eab82a6ea847/lib/rouge/lexers/python.rb#L86

resulting in e.g. pink dots in Monokai

![image](https://user-images.githubusercontent.com/10361305/70579093-77465900-1b64-11ea-87d7-25d703e8d414.png)

The python [formal grammar](https://docs.python.org/3/reference/grammar.html) doesn't list `.` as an operator. Also other highlighters treat `.` as unhighlighted text, including sublime:

![image](https://user-images.githubusercontent.com/10361305/70579333-1a976e00-1b65-11ea-9e53-0e4a9bd12cc9.png)

prism:
![image](https://user-images.githubusercontent.com/10361305/70579952-f9d01800-1b66-11ea-8b8b-63382e7726d1.png)

and github's highlighter:

![image](https://user-images.githubusercontent.com/10361305/70579729-54b53f80-1b66-11ea-8d59-f1784d0648df.png)


