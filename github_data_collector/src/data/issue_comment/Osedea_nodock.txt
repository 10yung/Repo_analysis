Some confusing behavior. After docker-compose up -d command all files and folders became with owner `999` and group `nobody`.
How can we run the project with nodemon so we do not have to restart the containers for small changes or fixes in files? 

I want to run the node app with PM2 Advanced, production process manager for Node.js for production use, can we have some optional entry point for this type of situation. Or is there any method I can add to use PM2?
It will be better to add phpmyadmin contatiner to this setup. 
When, I ran the instruction **docker-compose up -d mongo node nginx**, nginx and node are working properly but mongodb container is automatically shutting down. I tried disabling the firewall of my digital ocean droplet, when I tried to inspect inside **/root/nodock/data/logs/nginx/error.log** all I can see on the error logs is as below

2019/01/09 12:25:18 [error] 7#7: *1 connect() failed (113: No route to host) while connecting to upstream, client: **my computer's ip**, server: , request: "GET / HTTP/1.1", upstream: "http://172.18.0.3:8000/", host: "**my digital ocean server's/droplet's ip**"
2019/01/09 12:25:21 [error] 7#7: *1 connect() failed (113: No route to host) while connecting to upstream, client: **my computer's ip**, server: , request: "GET /favicon.ico HTTP/1.1", upstream: "http://172.18.0.3:8000/favicon.ico", host: "**my digital ocean server's/droplet ip**", referrer: "**my digital ocean server's/droplet ip**/"


```
PS F:\Code\nodock> docker-compose up -d nginx
Building nginx
Step 1/16 : FROM nginx
 ---> 5699ececb21c
Step 2/16 : RUN mkdir /etc/nginx/sites-available && rm /etc/nginx/conf.d/default.conf
 ---> Running in 05c19a8c8395
Removing intermediate container 05c19a8c8395
 ---> 53615299ba83
Step 3/16 : ADD nginx.conf /etc/nginx/
 ---> 4a2991bb05ed
Step 4/16 : COPY scripts /root/scripts/
 ---> 8a8e3f3a2497
Step 5/16 : COPY certs /etc/ssl/
 ---> fdbbd4bbc04e
Step 6/16 : COPY sites /etc/nginx/templates
 ---> 0920fd03b516
Step 7/16 : ARG WEB_REVERSE_PROXY_PORT=8000
 ---> Running in 69ae203cbda8
Removing intermediate container 69ae203cbda8
 ---> fe6c54e0abc5
Step 8/16 : ARG WEB_SSL=false
 ---> Running in 5decb625eda8
Removing intermediate container 5decb625eda8
 ---> c14f6eb191ba
Step 9/16 : ARG SELF_SIGNED=false
 ---> Running in 4a4eb1069fc5
Removing intermediate container 4a4eb1069fc5
 ---> d57093e65e15
Step 10/16 : ARG NO_DEFAULT=false
 ---> Running in b2d189c568d0
Removing intermediate container b2d189c568d0
 ---> 0f064b5a56f3
Step 11/16 : ENV WEB_REVERSE_PROXY_PORT=$WEB_REVERSE_PROXY_PORT
 ---> Running in e32965edeebe
Removing intermediate container e32965edeebe
 ---> d47654c41b28
Step 12/16 : ENV WEB_SSL=$WEB_SSL
 ---> Running in c2fbbb6a5777
Removing intermediate container c2fbbb6a5777
 ---> 1fe5abeeea87
Step 13/16 : ENV SELF_SIGNED=$SELF_SIGNED
 ---> Running in 563dbf23caf5
Removing intermediate container 563dbf23caf5
 ---> a76503b24b5d
Step 14/16 : ENV NO_DEFAULT=$NO_DEFAULT
 ---> Running in b7299fbeaaf9
Removing intermediate container b7299fbeaaf9
 ---> 31e87361e83f
Step 15/16 : RUN /bin/bash /root/scripts/build-nginx.sh
 ---> Running in 5e39752dc129
/root/scripts/build-nginx.sh: line 2: $'\r': command not found
/root/scripts/build-nginx.sh: line 3: syntax error near unexpected token `$'do\r''
'root/scripts/build-nginx.sh: line 3: `for conf in /etc/nginx/templates/*.conf; do
ERROR: Service 'nginx' failed to build: The command '/bin/sh -c /bin/bash /root/scripts/build-nginx.sh' returned a non-z
ero code: 2
```
The node templates show a location root `root /var/www/letsencrypt/; `

How do I modify this to remove letsencypt?  In fact I need to remove letsencrypt completely.
Hello!
I'm currently trying to setup node postgres redis nginx and certbot and it gives me unauthorized when running the certbot container.


Here's my docker-compose.yml file:

>      nginx:
>        build:
>            context: ./nginx
>            args:
>                - WEB_REVERSE_PROXY_PORT=8000
>                - WEB_SSL=true
>                - SELF_SIGNED=false
>                - NO_DEFAULT=false
>        volumes:
>            - ./data/logs/nginx/:/var/log/nginx
>            - ./certbot/certs/:/var/certs
>        ports:
>            - "80:80"
>            - "443:443"
>        tty: true

>     certbot:
>        build:
>            context: ./certbot
>        links:
>            - nginx
>        volumes:
>          - ./certbot/letsencrypt/:/var/www/letsencrypt
>          - ./certbot/certs/:/var/certs

and here is the error shown on terminal when running docker-compose up --build certbot after all the other containers are already running:

> certbot_1     | Failed authorization procedure. www.{site_here}.com (http-01): urn:acme:error:unauthorized :: The client lacks sufficient authorization :: Invalid response from www.{site_here}.com/.well-known/acme-challenge/ml7LgtVd-K0DUG99xFYH5NOz_0gZyNd2SQVdJL1c9JM: "<html>
> certbot_1     | <head><titl.e>404 Not Found</titl.e></head>
> certbot_1     | <body bgcolor="white">
> certbot_1     | <center><h.1>404 Not Found</h.1></center>
> certbot_1     | <hr><center>"
> certbot_1     | IMPORTANT NOTES:
> certbot_1     |  - The following errors were reported by the server:
> certbot_1     | 
> certbot_1     |    Domain: www.{site_here}.com
> certbot_1     |    Type:   unauthorized
> certbot_1     |    Detail: Invalid response from http://www.{site_here}.com/.well-known
> certbot_1     |    /acme-challenge/ml7LgtVd-K0DUG99xFYH5NOz_0gZyNd2SQVdJL1c9JM:
> certbot_1     |    "<html>
> certbot_1     |    <head><t.itle>404 Not Found</tit.le></head>
> certbot_1     |    <body bgcolor="white">
> certbot_1     |    <center><h.1>404 Not Found</h.1></center>
> certbot_1     |    <hr><center>"
> certbot_1     | 
> certbot_1     |    To fix these errors, please make sure that your domain name was
> certbot_1     |    entered correctly and the DNS A record(s) for that domain
> certbot_1     |    contain(s) the right IP address.
> certbot_1     | cp: cannot stat '/etc/letsencrypt/archive/www.{site_here}.com/cert1.pem': No such file or directory
> certbot_1     | cp: cannot stat '/etc/letsencrypt/archive/www.{site_here}.com/privkey1.pem': No such file or directory

I've ommited the domain, but it's a valid one. 

Also with this failing, Nginx will fail because it can't find the .pem files on nodock/nginx/sites/node-https.template

>  \# environment variables
>  \# WEB_REVERSE_PROXY_PORT ${WEB_REVERSE_PROXY_PORT}
> server {
>     listen 443 default_server http2;
> 
>     ssl on;
>     ssl_certificate /etc/ssl/cert1.pem;
>     ssl_certificate_key /etc/ssl/privkey1.pem;
> 
>     location / {
>         proxy_pass http://node:${WEB_REVERSE_PROXY_PORT};
>     }
> }

Would it be possible to add a working example and configuration of certbot container running with node?

Thanks a lot!

As #103 showed, we should have clear instructions as to how to add a frontend application inside our NoDock environment.
This should make it easier to customize nodock without editing the docker-compose.yml file.