Hi,

Thanks for this amazing program.

I'm trying to determine whether to save an outgoing email by the "From" address.

For example, I can send emails with both `a@gmail.com` and `a@example.com`. Since Gmail automatically saves outgoing mail, I only want to save a copy if the mail is sent from `a@example.com`.

What is the best way to do this? I have tried the following configuration but it doesn't work - the outgoing mail is not saved:
```
# IMAP configuration of a@gmail.com omitted

alias gmail User <a@gmail.com>
alias -group example User <a@example.com>
unset record
fcc-hook "%f example" "+[Gmail]/Sent Mail"
```

Thanks in advance.
Add a (de-)compression layer to the IMAP connection.
This feature uses zlib to compress data to/from an IMAP server.

When logging is enabled at level 5, it logs statistics on close.

> **zstrm_close() read 4055362 -\> 35314609 (8.7x) wrote 215993 \<- 18071 (12.0x)**

Enable with:
- `./configure --zlib`
- `set imap_deflate = yes` (default)
Here's the call graph:

<img width="600" src="https://flatcap.org/mutt/2083.svg">

`imap_check_mailbox()` can return `MUTT_NEW_MAIL` or `MUTT_REOPENED`.
Despite what the function comments say, these functions can also return the values above:
- `mx_mbox_close()`
- `mx_mbox_sync()`
- `imap_sync_mailbox()`

Unfortunately, a couple of problems prevent the values being propagated back to the index.

### `mx_mbox_close()`

A recent refactoring meant that return values weren't being propagated.
Commit: 941e39acc fixes that (in this PR).

### `imap_sync_mailbox()`

This function **used** to return the result of `imap_check_mailbox()`.
That was changed by commit: 60270c9fa8

> imap: fixing race when syncing mailbox
> imap_check_mailbox returns a detailed state not only 0/-1.
> imap_sync_mailbox assumes that the function was returning only 0/-1.
> This change fixes that.

```diff
diff --git a/imap/imap.c b/imap/imap.c
@@ -1652,7 +1652,7 @@ int imap_sync_mailbox(struct Mailbox *m, bool expunge, bool close)
   imap_allow_reopen(m);
 
   rc = imap_check_mailbox(m, false);
-  if (rc != 0)
+  if (rc < 0)
     return rc;
 
   /* if we are expunging anyway, we can do deleted messages very quickly... */
```

I need to find out what this was fixing before I can change it back.

Issue: #2083


Found a condition that can never be true.

https://github.com/neomutt/neomutt/blob/12d1180dc98019c5a4e040e3f53071b86e5af7ab/index.c#L741-L749

`mx_mbox_close()` only returns -1 or 0, so `check` gets assigned -1 or 0.

This condition can never be met as `MUTT_NEW_MAIL` has a value of 1 and `MUTT_REOPENED` has a value of 3.
Are we missing a `check = mx_mbox_check()` perhaps?

Similar situations here:

https://github.com/neomutt/neomutt/blob/12d1180dc98019c5a4e040e3f53071b86e5af7ab/index.c#L1836-L1841

https://github.com/neomutt/neomutt/blob/12d1180dc98019c5a4e040e3f53071b86e5af7ab/index.c#L1985-L1989

https://github.com/neomutt/neomutt/blob/12d1180dc98019c5a4e040e3f53071b86e5af7ab/index.c#L2030-L2048

Hi,

Since a few releases (sorry I can say exactly when it stopped to work), mails moved by imapfilter in other folders are still visible in inbox index, though not here anymore, and also can't be opened.

They move from the index only when navigating in other folders

Thanks
The new nested Windows allows us to start being creative.
This is one possible use.

---

When set to an empty string, disable the index/pager bar completely.

  set status_format = ""
  set pager_format = ""

When combined with these settings, you can have a big view mode:

  set help = no
  set sidebar_visible = no
  set pager_index_lines = 0
My mailboxes is setup like this

```
mailboxes "+Work/INBOX" \
  "+Work/Starred" \
  "+Work/Sent" \
  "+Work/Drafts" \
  "+Work/Trash" \
  "+Work/Spam" \
  `tree ~/.mail/Work -d -I "Archive|cur|new|tmp|certs|.notmuch|INBOX|[Gmail]" -afin --noreport | awk '{if(NR>1)print}' | tr '\n' ' '`
```

But the output on both machines are different

Broken behaviour (notice the duplication & also the path expansion `~/.mail/Work/*` instead of `=Work/*`
<img width="1133" alt="broken2" src="https://user-images.githubusercontent.com/63876/72247465-39ba6d00-35f5-11ea-976d-9adce6dbac31.png">

and the sidebar (no hierarchy)
```
 INBOX (1)                   │                                                                                                                      
 Starred (18)                │                                                                                                                     
 Sent (3)                    │
 Drafts                      │
 Trash (29)                  │
 Spam (2)                    │
Drafts                       │
aaaaaaaaaa                   │
bbbbbbbb                     │
Sent (3)                     │
Spam (2)                     │
Starred (18)                 │
Trash (29)                   │
cccccc                       │
company (329)                │
dd                           │
eeee                         │
fffff                        │
ggg                          │
CI (2151)                    │
hhh                          │
iiiiiii (53833)              │
jjjjjjjjjjjjjj               │
github (13343)               │
kkkkkkkkkkkkkk (3)           │
llllll (3299)                │
mmmmmmmm (2494)              │
nnnnnnnnnnnnnn (31103)       │
oooooooo (219)               │
pppp (300)                   │
qqqqqqqqqqqqq                │
jjj (8)                      │
sssssssssssss                │
```

Correct behavior
<img width="569" alt="correct2" src="https://user-images.githubusercontent.com/63876/72247518-548ce180-35f5-11ea-84a9-e957c1fab66a.png">

and the sidebar
```
INBOX (1)                   │
Starred (18)                │
Sent (3)                    │
Drafts                      │
Trash (36)                  │
Spam (2)                    │
aaaaaaaaaa                  │
bbbbbbbb                    │
cccccc                      │
company (329)               │
 dd                         │
 eeee                       │
 fffff                      │
ggg                         │
 CI (446)                   │
 hhh                        │
 iiiiiii (2865)             │
 jjjjjjjjjjjjjj             │
 github (13343)             │
   kkkkkkkkkkkkkk (3)       │
   llllll (149)             │
   mmmmmmmm (146)           │
   nnnnnnnnnnnnnn (3813)    │
   oooooooo (11)            │
  pppppppppppppp (3)        │
  qqqqqq (3694)             │
  rrrrrrrr (3374)           │
  ssssssssssssss (34768)    │
  tttttttt (236)            │
 uuuu (300)                 │
 vvvvvvvvvvvvv              │
 www (8)                    │
xxxxxxxxxxxxx               │
```


Running this 
```
tree ~/.mail/Work -d -I "Archive|cur|new|tmp|certs|.notmuch|INBOX|[Gmail]" -afin --noreport | awk '{if(NR>1)print}' | tr '\n' ' '
``` 
on the command line yields the same exact results on both machines and also both are using the same exact `neomutt` version

```
NeoMutt 20191207
Copyright (C) 1996-2016 Michael R. Elkins and others.
NeoMutt comes with ABSOLUTELY NO WARRANTY; for details type 'neomutt -vv'.
NeoMutt is free software, and you are welcome to redistribute it
under certain conditions; type 'neomutt -vv' for details.

System: Darwin 19.2.0 (x86_64)
ncurses: ncurses 5.7.20081102 (compiled with 5.7.20081102)
libiconv: 1.11
libidn: 1.35 (compiled with 1.35)
GPGme: 1.13.1
libnotmuch: 5.2.0
hcache backends: tokyocabinet, lmdb

Configure options: --prefix=/usr/local/Cellar/neomutt/20191207 --enable-gpgme --with-gpgme=/usr/local/opt/gpgme --gss --lmdb --notmuch --sasl --tokyocabinet --with-ssl=/usr/local/opt/openssl@1.1 --with-ui=ncurses

Compilation CFLAGS: -g -O2 -std=c99 -D_ALL_SOURCE=1 -D_GNU_SOURCE=1 -D__EXTENSIONS__ -I/usr/local/opt/gpgme/include -I/usr/local/opt/libassuan/include -I/usr/local/opt/libgpg-error/include -I/usr/local/Cellar/neomutt/20191207/include -DNCURSES_WIDECHAR -I/usr/local/opt/openssl@1.1/include

Default options:
  +attach_headers_color +compose_to_sender +compress +cond_date +debug 
  +encrypt_to_self +forgotten_attachments +forwref +ifdef +imap +index_color 
  +initials +limit_current_thread +multiple_fcc +nested_if +new_mail +nntp +pop 
  +progress +quasi_delete +regcomp +reply_with_xorig +sensible_browser +sidebar 
  +skip_quoted +smtp +status_color +timeout +tls_sni +trash 

Compile options:
  -autocrypt +bkgdset +color +curs_set +fcntl -flock -fmemopen +futimens 
  +getaddrinfo -gnutls +gpgme +gss +hcache -homespool +idn -inotify 
  -locales_hack -lua +meta -mixmaster +nls +notmuch +openssl +pgp +sasl +smime 
  -sqlite +start_color +sun_attachment +typeahead 
MAILPATH="/var/mail"
PKGDATADIR="/usr/local/Cellar/neomutt/20191207/share/neomutt"
SENDMAIL="/usr/sbin/sendmail"
SYSCONFDIR="/usr/local/Cellar/neomutt/20191207/etc"

To learn more about NeoMutt, visit: https://neomutt.org
If you find a bug in NeoMutt, please raise an issue at:
    https://github.com/neomutt/neomutt/issues
or send an email to: <neomutt-devel@neomutt.org>
```
**Update**: Hold off on reviewing this.  Something's not quite right.

---

<details>
<summary>Object Diagram</summary>
<img src="https://flatcap.org/mutt/ca1.svg" width="400">
</details>

Each backend Account holds a Connection, which in turn holds a ConnAccount.
- `struct Connection` manages the socket handling
- `struct ConnAccount` is a cache of login credentials

The cached credentials allow NeoMutt to poll all the Accounts without having to fire `account-hook`s every time.

For each credential (User, Password, etc), there is some backend-specific code that looks up which config variable to use.
- `$imap_user`, `$pop_user`, ...
- `$imap_pass`, `$pop_pass`, ...

---

This brings SMTP into line with IMAP and POP.

- cd8bb0e6c config: add missing `$smtp_user` variable

Minor tidying to make the code easier to read:

- 2a439d873 rename: unify ConnAccount variables
- d4d295b84 initialise all ConnAccount variables
- dee5b7a0b drop unused param in mutt_conn_find()

Ages ago, I put a `ConnAccount` into the POP and IMAP Mailbox data.  I can't remember why.
This _may_ have been causing connection problems as some code updated the wrong credentials cache.

- 14c1fb343 imap: drop ConnAccount
- db200311a pop: drop ConnAccount

Add a callback function to the `ConnAccount`, so that it can ask the backends for credentials.

- c1db14f87 refactor connection service
- c5f18d437 refactor: add get_field() to Connection

Finally, move some dependency-free functions to the connection library.

- 7acfbcecf conn: move ConnAccount functions to libconn
  - `mutt_account_getlogin()`
  - `mutt_account_getoauthbearer()`
  - `mutt_account_getpass()`
  - `mutt_account_getuser()`
  - `mutt_account_unsetpass()`


<!--
Sometimes NeoMutt can be quite confusing.
We're working on making it easier to understand.
-->

I am new to Neomutt and was wondering if one can we use [Ueberzug](https://github.com/seebye/ueberzug) instead of w3m to view image attachments. It seems to be more robust and to be compatible with more terminal emulators, yet I failed to find information on how to combine it with Neomutt or Mutt.
## Expected Behaviour

I ran `<entire-thread>` on a message.

## Actual Behaviour

I sometimes get a SIGSEGV. It is not always.

Here is the backtrace:

```
                  Thread 1 "neomutt" received signal SIGSEGV, Segmentation fault.
                                                                                 0x000055555562eca4 in email_get_id (e=0x5555558856a0) at notmuch/mutt_notmuch.c:325
325       return (e && e->edata) ? ((struct NmEmailData *) e->edata)->virtual_id : NULL;
(gdb) bt
#0  0x000055555562eca4 in email_get_id (e=0x5555558856a0) at notmuch/mutt_notmuch.c:325
#1  0x0000555555630bf4 in get_nm_message (db=0x55555587d560, e=0x5555558856a0) at notmuch/mutt_notmuch.c:1218
#2  0x000055555563203e in nm_read_entire_thread (m=0x5555558945c0, e=0x5555558856a0) at notmuch/mutt_notmuch.c:1669
#3  0x00005555555a760f in mutt_index_menu (dlg=0x5555558393e0) at index.c:2144
#4  0x00005555555b8d4e in main (argc=1, argv=0x7fffffffdaa8, envp=0x7fffffffdac8) at main.c:1188
(gdb) 
```

## Steps to Reproduce

I just ran `entire-thread` on a message, but it is not always reproducible.

## How often does this happen?

- Sometimes (even with the same message it is not always).

## When did it start to happen?

Not sure since it happens randomly.

## NeoMutt Version

```
$ mutt -v
NeoMutt 20191207-76-0b9198
Copyright (C) 1996-2016 Michael R. Elkins and others.
NeoMutt comes with ABSOLUTELY NO WARRANTY; for details type 'neomutt -vv'.
NeoMutt is free software, and you are welcome to redistribute it
under certain conditions; type 'neomutt -vv' for details.

System: Linux 5.3.0-26-generic (x86_64)
ncurses: ncurses 6.1.20190803 (compiled with 6.1.20190803)
libidn: 1.33 (compiled with 1.33)
libnotmuch: 5.2.0
hcache backends: tokyocabinet

Configure options: --ssl --sasl --enable-notmuch --enable-debug --tokyocabinet --prefix=/usr/local

Compilation CFLAGS: -g -O2 -std=c99 -D_ALL_SOURCE=1 -D_GNU_SOURCE=1 -D__EXTENSIONS__ -I/usr/local/include -DNCURSES_WIDECHAR

Default options:
  +attach_headers_color +compose_to_sender +compress +cond_date +debug 
  +encrypt_to_self +forgotten_attachments +forwref +ifdef +imap +index_color 
  +initials +limit_current_thread +multiple_fcc +nested_if +new_mail +nntp +pop 
  +progress +quasi_delete +regcomp +reply_with_xorig +sensible_browser +sidebar 
  +skip_quoted +smtp +status_color +timeout +tls_sni +trash 

Compile options:
  -autocrypt +bkgdset +color +curs_set +fcntl -flock -fmemopen +futimens 
  +getaddrinfo -gnutls -gpgme -gss +hcache -homespool +idn +inotify 
  -locales_hack -lua +meta -mixmaster +nls +notmuch +openssl +pgp +sasl +smime 
  -sqlite +start_color +sun_attachment +typeahead 
MAILPATH="/var/mail"
PKGDATADIR="/usr/local/share/neomutt"
SENDMAIL="/usr/sbin/sendmail"
SYSCONFDIR="/usr/local/etc"

To learn more about NeoMutt, visit: https://neomutt.org
If you find a bug in NeoMutt, please raise an issue at:
    https://github.com/neomutt/neomutt/issues
or send an email to: <neomutt-devel@neomutt.org>
$ 
```

## Extra Info

Using maildir.
