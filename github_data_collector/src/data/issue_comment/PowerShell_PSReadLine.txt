Some completion result types can be reliably assumed to be the end
of an input chunk and followed by a space, so insert that space
automatically when appropriate.

eg a ProviderItem is unlikely to have anything except a space
following it, as it is the end of a path, so insert the space with
the path.

Implements #740, which has more details on the idea.

Currently, there are no tests written for this, but all existing ones pass. I'm also not sure if it should be behind an option?
Allow filtering of results by keys used in binding.

Closes #879 

Environment data
----------------

```
PS version: 7.0.0-rc.1
PSReadline version: 2.0.0-rc1
os: 10.0.18362.1 (WinBuild.160101.0800)
PS file version: 7.0.0.0
HostName: ConsoleHost
BufferWidth: 145
BufferHeight: 9001
```

Steps to reproduce or exception report
--------------------------------------

1. run `Set-PSReadLineOption -EditMode Vi`
2. type `abc`
3. type <kbd>Esc</kbd>
4. type `cffcc`, exception will be thrown

### Exception
```
System.InvalidOperationException: Operation is not valid due to the current state of the object.
   at Microsoft.PowerShell.PSConsoleReadLine.StartEditGroup()
   at Microsoft.PowerShell.PSConsoleReadLine.GroupUndoHelper.StartGroup(Action`2 instigator, Object instigatorArg)
   at Microsoft.PowerShell.PSConsoleReadLine.ViReplaceLine(Nullable`1 key, Object arg)
   at Microsoft.PowerShell.PSConsoleReadLine.ProcessOneKey(PSKeyInfo key, Dictionary`2 dispatchTable, Boolean ignoreIfNoAction, Object arg)
   at Microsoft.PowerShell.PSConsoleReadLine.ViChord(Nullable`1 key, Object arg)
   at Microsoft.PowerShell.PSConsoleReadLine.ProcessOneKey(PSKeyInfo key, Dictionary`2 dispatchTable, Boolean ignoreIfNoAction, Object arg)
   at Microsoft.PowerShell.PSConsoleReadLine.InputLoop()
   at Microsoft.PowerShell.PSConsoleReadLine.ReadLine(Runspace runspace, EngineIntrinsics engineIntrinsics, CancellationToken cancellationToken)
```
光标会不定期跳到缓冲区内，这是经常发生的事情。估计因为改变窗口大小触发的故障，看起来与psreadline有关。因为禁用psreadline时，没有发生过此问题。
我使用的[Termux for android](https://wiki.termux.com/wiki/Main_Page)控制台.安装了[Aarch](https://wiki.termux.com/wiki/Aarch), [Fedora](https://wiki.termux.com/wiki/Fedora)。故障相同。

> The cursor can be often misplaced, which could be caused by the resizing of the window when the input-pad becomes active/inactive.
It's very possible related to `PSReadLine` as it works fine when `PSReadLine` is unloaded.
>
> This happens in [Termux](https://wiki.termux.com/wiki/Main_Page), an Android terminal emulator and Linux environment application.
[Aarch](https://wiki.termux.com/wiki/Aarch), [Fedora](https://wiki.termux.com/wiki/Fedora) are installed.

https://github.com/SDRausty/TermuxArch/issues/201
Related issue: #1164



![Screenshot_20191231_161537](https://user-images.githubusercontent.com/26913892/71614838-fde0da00-2be8-11ea-8781-c9da76f1ef9b.jpg)

![Screenshot_20191231_164529](https://user-images.githubusercontent.com/26913892/71615624-1226d600-2bed-11ea-92b1-f925dcd7b058.jpg)


Given that the decision has been made to _require_ and integrate an external module PSReadLine for command handling, it's confusing ( PowerShell/PowerShell#5711 PowerShell/PSReadLine#1074 ) and redundant to have two copies of the history, and the commands which modify history should be made to (optionally?) modify both.

Right now, the PowerShell History is numbered, and supports re-invoking via `Invoke-History` (or `r`) and also via tab-completion like `#1{Tab}`, but PSReadLine owns the hotkeys and search!

The PSReadLine history is persistent, but only the PowerShell History has commands to import/export/clear it -- which allow one to modify what's stored in the history in the case one accidentally types something one doesn't want logged.

Obviously there's a substantial difference between them, architecturally -- since PSReadLine's history only contains the actual command-lines, but the actual history retrieved by Get-History includes the status, as well as the start and end time...

However, this dichotomy, combined with the use of bash-similar aliases (`history` and `r` etc) and hotkeys which sometimes return different (or no) results is confusing and should be resolved -- ideally, by having the history commands work on (or appear to work on) the same (size) persistent history buffer as PSReadLine.
Perhaps a blend of `menu complete` and history searching, seems to be a common ask
Using `Set-PSReadLineOption -EditMode vi -viModeIndicator Cursor` on Windows Terminal does not display any differences based on the mode you are in. It's likely due to Windows Terminal accepting the [DECSCUSR](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Functions-using-CSI-_-ordered-by-the-final-character_s_) escape sequence as opposed to whatever Windows Console supported.
Just raising a potential issue.

When `LengthInBufferCells()` is used to estimate the buffer cells that an entire line will consume, it can be inaccurate when a double-wide character lands with only 1 cell remaining at the edge of the buffer.  Functions such as `ConvertOffsetToPoint()` and `ConvertLineAndColumnToOffset()` do account for this.

The most likely places this will cause a problem is in trying to calculate where on the screen needs to be cleared after rendering an edited line.
Environment data
----------------
PSReadLine 2.0.0-beta6, Windows 10, Windows PowerShell or PowerShell Core

Steps to reproduce
--------------------------------------

1. Produce a command line who's last character is a CJK doublewidth character, and the command line is just one character from wrapping.  
2. Then edit the command line to include one more character before the CJK, and the CJK will roll to the next line, but the newly inserted character is not added.  
3. Furthermore, when the extra character is removed, and the CJK character rolls back on to the first line, its not completely removed from where it was shown on the second line.

I think this might all have to do with some blanking assumptions, and the wrong spots are being blanked at the wrong time.

Demonstrating 1 and 3: (Cursor position does not correlate to the steps)
![image](https://user-images.githubusercontent.com/26179051/69911144-96aeea80-13dc-11ea-830f-6227efbcd794.png)

After step 2, there should be only 1 blank at the end of the first line (I added another 'f'):
![image](https://user-images.githubusercontent.com/26179051/69911147-b9d99a00-13dc-11ea-9b2a-2a4d6e255431.png)

Note, I have no idea what CJK character I copied and pasted when testing another issue.
The following documentation item would seem to imply that `SaveIncrementally` would allow the history to be used between sessions immediately.

> -- SaveIncrementally: save history after each command is executed - and share across multiple instances of PowerShell

Environment data
----------------

PSReadLine 2.0.0-beta6
PowerShell 6.2.3 & 7.0.0-preview6
Windows 10 Insiders 19030.1

Steps to reproduce
--------------------------------------
Start multiple sessions simultaneously, enter commands in each, and afterwards use <kbd>UpArrow</kbd> to attempt to find each others commands in different sessions

---

The only result I get is that a new session created after all the commands in the different sessions, will see all the history, in the order they were entered.