I am trying to streaming add streaming feature in android phone, so used nanohttpd library.

I used this library for streaming the video and audio files which are placed in my SMB server.
the video and audio are streaming but the buffering whole file in one shot, so its take so much time if video/audio are large in size.

I google it accordingly I got new thing that is setting the headers "Content-Range" which are by default provided by the method server. But the thing is I am not getting the "range" in headers.

Please help to buffer the video/audio as the buffer I provide in serve. 
Help ASAP. I put the snippet below.


    @Override
    @SuppressWarnings("deprecation")
    public Response serve(String uri, Method method, Map<String, String> headers, Map<String, String> params, Map<String, String> files) {
        SmbFile smbFile = null ;
        try {
            smbFile = new SmbFile(filePath, auth);
            smbFile.connect();
            smbFile.setConnectTimeout(15000);
            smbFile.setReadTimeout(1500);
        } catch (IOException e) {
            e.printStackTrace();
        }
        //range=bytes=619814-
        long range ;
        if (headers.containsKey("range")) {
            String contentRange = headers.get("range");
            Log.e("RANGE",""+contentRange);
            range = Integer.parseInt(contentRange.substring(contentRange.indexOf("=") + 1, contentRange.indexOf("-")));
        }else
            range = 0 ;

        byte[] buffer;
        long constantLength = 0;
        try {
            constantLength = smbFile.length();
        } catch (SmbException e) {
            e.printStackTrace();
        }
        long bufLength = 0;
        boolean isLastPart = false;
        try {
            SmbRandomAccessFile ff = new SmbRandomAccessFile (smbFile ,"rw" );
            long remainingChunk = ff.length() - range; //remaining
            if (remainingChunk < constantLength){
                bufLength = remainingChunk; //means last part
                isLastPart = true;
            }else
                bufLength = constantLength;

            if (range !=0)
                ff.seek(range);
            buffer = new byte[(int)bufLength];
            ff.read(buffer);
        } catch (IOException e) {
            e.printStackTrace();
            buffer = new byte[0];
        }
        Response response;
        response = new Response(Response.Status.PARTIAL_CONTENT,mimeType, new ByteArrayInputStream(buffer));
        response.addHeader("Content-Length", String.valueOf(constantLength));
        response.addHeader("Content-Range", String.format("bytes %s-%s/%s", range, ( range + bufLength ), String.valueOf(constantLength)));
        Log.e("SERVER","Inside server sent " + String.format("bytes %s-%s/%s", range,( range + bufLength ), String.valueOf(constantLength)));
        return response;
    }
Hi,

I noticed that there is a behavior change in the NanoWSD server while upgrading the Android target SDK from **25** to **26**.
I received a **java.net.SocketException: Socket closed** even when I sent a message to the server every 30s ({"request":"hb","nonce":1576514028626}) and I sent a broadcast message to all my clients every 5s ("test").
I ran my application in device with Android 8.1.0.

Thanks in advanced for your help.

**PS:** I would like to post my Java code but there is some error in rendering.

Log messages:

```
2019-12-16 17:33:18.616 15305-15349/com.test.test I/Server: WS opened
2019-12-16 17:33:19.026 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:33:24.043 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:33:29.105 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:33:34.167 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:33:39.231 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:33:44.293 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:33:48.629 15305-15349/com.test.test D/Server: onMessage: WS[Text, fin, masked, [38b] {"request":"hb","nonce":1576514028626}]
2019-12-16 17:33:49.352 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:33:54.411 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:33:59.474 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:34:04.533 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:34:09.590 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:34:14.648 15305-15305/com.test.test E/Server: WebsocketServer.broadcastMessage: "test"
2019-12-16 17:34:17.841 15305-15349/com.test.test E/Server: onException
    java.net.SocketException: Socket closed
        at java.net.SocketInputStream.read(SocketInputStream.java:203)
        at java.net.SocketInputStream.read(SocketInputStream.java:139)
        at java.io.BufferedInputStream.fill(BufferedInputStream.java:248)
        at java.io.BufferedInputStream.read(BufferedInputStream.java:267)
        at fi.iki.elonen.NanoWSD$WebSocketFrame.read(NanoWSD.java:435)
        at fi.iki.elonen.NanoWSD$WebSocket.readWebsocket(NanoWSD.java:248)
        at fi.iki.elonen.NanoWSD$WebSocket.access$200(NanoWSD.java:65)
        at fi.iki.elonen.NanoWSD$WebSocket$1.send(NanoWSD.java:88)
        at fi.iki.elonen.NanoHTTPD$HTTPSession.execute(NanoHTTPD.java:957)
        at fi.iki.elonen.NanoHTTPD$ClientHandler.run(NanoHTTPD.java:192)
        at java.lang.Thread.run(Thread.java:764)
2019-12-16 17:34:17.845 15305-15349/com.test.test I/Server: WS closedInternalServerErrorHandler terminated without closing the connection.
```
I run nanohttpd on android 9.0, but show some exception.

Exception:

`
Exception in thread "NanoHttpd Main Listener" java.lang.InternalError: Thread starting during runtime shutdown
        at java.lang.Thread.nativeCreate(Native Method)
        at java.lang.Thread.start(Thread.java:753)
        at fi.iki.elonen.NanoHTTPD$DefaultAsyncRunner.exec(NanoHTTPD.java:376)
        at fi.iki.elonen.NanoHTTPD$ServerRunnable.run(NanoHTTPD.java:1774)
        at java.lang.Thread.run(Thread.java:784)
`

Code:
`
import fi.iki.elonen.NanoHTTPD;

import java.io.IOException;

public class TestServer extends NanoHTTPD {

    private TestServer(String host, int port)  {
        super(host, port);
        try {
            start();
        } catch (IOException e) {
            System.out.println("Server Stop: " + e.getMessage());
        }
        System.out.println("Server Running! Point your browsers to http://localhost:8888/ \n");
    }

    private TestServer(int port){
        super(port);
        try {
            start(NanoHTTPD.SOCKET_READ_TIMEOUT, false);
        } catch (IOException e) {
            System.out.println("Server Stop: " + e.getMessage());
        }
        System.out.println("Server Running! Point your browsers to http://localhost:8888/ \n");
    }

    @Override
    public Response serve(IHTTPSession session) {
        System.out.println(session.getUri());
        String msg =
                "<html>" +
                    "<body>" +
                        "<h1>Nanohttpd</h1>" +
                    "</body>" +
                "</html>";
        return newFixedLengthResponse(msg);
    }

    public static void main(String[] args) {
        try {
            new TestServer(8888);
        } catch (Throwable e) {
            System.out.println("Error:" +  e.getMessage());
        }
    }
}
`
Bumps commons-fileupload from 1.3.1 to 1.3.3.

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=commons-fileupload:commons-fileupload&package-manager=maven&previous-version=1.3.1&new-version=1.3.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/NanoHttpd/nanohttpd/network/alerts).

</details>
 java.net.SocketException: Broken pipe
        at java.net.SocketOutputStream.socketWrite0(Native Method)
        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:112)
        at java.net.SocketOutputStream.write(SocketOutputStream.java:157)
        at fi.iki.elonen.NanoHTTPD$Response.sendBody(NanoHTTPD.java:1694)
        at fi.iki.elonen.NanoHTTPD$Response.sendBodyWithCorrectEncoding(NanoHTTPD.java:1667)
        at fi.iki.elonen.NanoHTTPD$Response.sendBodyWithCorrectTransferAndEncoding(NanoHTTPD.java:1657)
        at fi.iki.elonen.NanoHTTPD$Response.send(NanoHTTPD.java:1624)
        at fi.iki.elonen.NanoHTTPD$HTTPSession.execute(NanoHTTPD.java:957)
        at fi.iki.elonen.NanoHTTPD$ClientHandler.run(NanoHTTPD.java:192)
        at java.lang.Thread.run(Thread.java:761)
I try to handle request POST
```
try {
            request = fillRequestMap(session, requestId);
        } catch (IOException ioe) {
            return newFixedLengthResponse(Response.Status.INTERNAL_ERROR, MIME_PLAINTEXT, "SERVER INTERNAL ERROR: IOException: " + ioe.getMessage());
        } catch (ResponseException re) {
            return newFixedLengthResponse(re.getStatus(), MIME_PLAINTEXT, re.getMessage());
        } catch (Exception ex) {
            return newFixedLengthResponse(Response.Status.INTERNAL_ERROR, MIME_HTML, "<html><body><h1>Error</h1>" + ex.toString() + "</body></html>");
        }

```
Method get request data
```
private WritableMap fillRequestMap(IHTTPSession session, String requestId) throws Exception {
        Method method = session.getMethod();
        WritableMap request = Arguments.createMap();
        Log.d("QVIProtocol", "Method " + method);
        Map<String, String> headers = session.getHeaders();
        Map<String, String> params = session.getParms();
        Map<String, String> files = new HashMap<String, String>();

        request.putString("headers", new JSONObject(headers).toString());
        request.putString("params", new JSONObject(params).toString());

        request.putString("url", session.getUri());
        request.putString("method", method.name());
        request.putString("uid", requestId);
        
        try {
            session.parseBody(files);
            // request.putString("body", new JSONObject(files).toString());
            // session.parseBody(new HashMap<String, String>());
            // get the POST body
            String postBody = session.getQueryParameterString();
            // or you can access the POST request's parameters
            Log.d("QVIProtocol", " 1 " + postBody);
            Log.d("QVIProtocol", " 2 " + files.get("postData"));
            request.putString("body", postBody);
            request.putString("data", files.get("postData"));
        } catch (Exception e) {
            Log.d("QVIProtocol", e.toString());
            request.putString("body", "{}");
        }

        return request;
    }
```
But when i try to fetch to API using below code
```
const aPromise = await fetch('http://127.0.0.1:5561/ping', {
        method: 'POST',
        headers: {
          token: 'hello-token'
        },
        body: JSON.stringify({ data: '1', hello: '2' })
      })
```
The response is
```
body {"body": null, "data": null, "headers": "{\"accept\":\"*\\/*\",\"sec-fetch-site\":\"cross-site\",\"host\":\"127.0.0.1:5561\",\"accept-language\":\"en-US,en;q=0.9\",\"access-control-request-method\":\"POST\",\"origin\":\"https:\\/\\/zrg-team.github.io\",\"sec-fetch-mode\":\"cors\",\"user-agent\":\"Mozilla\\/5.0 (Linux; Android 7.0; small) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/77.0.3865.116 Mobile Safari\\/537.36\",\"connection\":\"keep-alive\",\"accept-encoding\":\"gzip, deflate, br\",\"http-client-ip\":\"127.0.0.1\",\"access-control-request-headers\":\"token\",\"remote-addr\":\"127.0.0.1\"}", "method": "OPTIONS", "params": "{}", "uid": "1570893737712.75003", "url": "/ping"}
```
A small tweak to keep the readme using the most up-to-date function for parameters.
There was unneeded error handling in the decodePercent method. This change uses an overloaded method that does not throw an UnsupportedEncodingException, and utilizes jdk7's StandardCharsets.UTF_8.
I am using nanolets to add a few API endpoints to an existing app. **I can't find a way to pass an object to my various handlers.**

I created handlers that extends `DefaultStreamHandler` but there is no way to have an object of mine in there.

I tried to use the session object to set something in it for use in the handlers but there is no extensibility!

    @Override
    public Response serve(IHTTPSession session) {
        session.setData("DataSource", this.dataSource); // I would like this to exist
        session.setData("UserContext", this.userContext); // I would like this to exist
        return super.serve(session);
    }

Mapping don't allow giving a live instance of handler so I cannot set something in there.

    this.httpServer.addRoute("/api/DoSomething", new SomethingHandler(dataSource, userContext)); // can't do that

How do you do anything within the handlers if you can't have references to important objects?
How to deploy an Angular 8 application on nanohttpd?
There is a rewrite rule config file like .htaccess for apache?
How to implement this to redirect all route to index.html
Thanks
Angelo radici