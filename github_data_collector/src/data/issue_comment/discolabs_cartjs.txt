Recently Shopify updated the AJAX API to accept an array of items when posting to /cart/add.js. This allows for the same functionality of adding one single item by variant ID or now adding multiple items with one single post.
https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#add-to-cart

```js
  CartJS.addItems({
    items: [
      {
        id: 12345678,
        quantity: 1
      },
      {
        id: 98765432,
        quanity: 1
      }
    ]
  });
```

Reference #171 
Recently Shopify updated the AJAX API to accept an array of items when posting to `/cart/add.js`.  This allows for the same functionality of adding one single item by variant ID or now adding multiple items with one single post.
https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#add-to-cart

### Add Single Item: POST data
```
items: [
  {
    quantity: 2,
    id: 794864229
  }
]
```

### Add Multiple Items: POST data
```
items: [
  {
    quantity: 2,
    id: 794864229
  },
  {
    quantity: 1,
    id: 478298497
  },
]
```

I just published a very crude rough implementation as a fork that adds `CartJS.addItems` that accepts an object of items to pass along as data.  It's a "good enough" solution that I'll be rolling out as an upcoming feature on www.kosas.com so a customer can add all of the makeup used to create a specific look.

I'll open a PR to get this started, but more thought would need to go into how it might integrate with the data api.
How can I link the products added to cart to the customer account if the user is already login in the browser?
We used cart.js to build our dynamic cart qty updates!
I'm using the Data API to add an item to the cart using a submit form on my product page.
Like this:

`<form action="/cart/add" method="post" data-cart-submit>`

It works, and I'm using a requestComplete event listener to update the cart count. But, I also want to display success or error messages after clicking "Add to Cart" button.

Is this possible using the 'data-cart-submit' or do I need to use the Core API?

When I use the Core API like below, I am always redirected to the Cart page, but I want to stay on the Product page (like when I use the Data API) and see the messages there:

`<script type="text/javascript">
    $('#button').click(function() {

        // Call the addItem() method.
        // Note the empty object as the third argument, representing no line item properties.  
        CartJS.addItem(12345678, 1, {}, {

            // Define a success callback to display a success message.
            "success": function(data, textStatus, jqXHR) {
                $('#message').addClass('message-success');
                $('#message').html('Successfully added to cart.');
            },

            // Define an error callback to display an error message.
            "error": function(jqXHR, textStatus, errorThrown) {
                $('#message').addClass('message-error');
                $('#message').html('There was a problem adding to the cart!');
            }

        });
    });
</script> `

Everything else is working great and I want to add CartJS to my live site, but I need to get the messages to appear.
Any help would be appreciated.
Thanks
Alan

When i send my order with an ajax request, sometime send order without items. I think its because cartJS is empty before sending order. Some variable on my order depend to cartJS properties like cartJS.cart.item and cartJS.cart.attribute. 

voici le code

`<form class="order-form" id="clientOrderForm">
<input type="submit" class="btn full big-submit" value="{{ 'cart.checkout' | t }}" />
</form>

<div id="log"></div>
  <script>


    function buildOrder() {
        /* Customer datas */
      {% if customer.addresses_count > 0 %}
          var selector = $('#delivery_place_customer option:selected'),
              company = selector.attr('data-company'),
              phone = selector.attr('data-phone'),
              address1 = selector.attr('data-address1'),
              address2 = selector.attr('data-address2'),
              zip = selector.attr('data-zip'),
              city = selector.attr('data-city'),
              country = 'France';
      {% else %}
          var company = '',
              phone = '',
              address1 = $('#address #street_number').val() + ' ' + $('#address #route').val(),
              address2 = '',
              zip = $('#address #postal_code').val(),
              city = $('#address #locality').val(),
              country = 'France';
              console.log("no customer");
      {% endif %}

         /* Cart datas */
        var cartTotalPrice = parseInt($('#cartTotal').attr('data-value')) / 100 ,
            cartSubTotalPrice = parseInt($('#cartSubTotal').attr('data-value')) / 100 ,
            cartTotalTax = parseInt($('#cartVAT').attr('data-value')) / 100,
            selectClass = $('.delivery_item'),
            deliveryId = parseInt(selectClass.attr('data-id')),
            deliveryTitle = selectClass.attr('data-prod'),
            deliveryPrice = selectClass.attr('data-price'),
            deliveryType = selectClass.attr('data-type'),
            deliveryProdId = selectClass.attr('data-pro-id'),
            deliverySku = selectClass.attr('data-sku'),
            deliveryBarcode = selectClass.attr('data-barcode'),
            deliveryVendor = selectClass.attr('data-vendor'),
            deliveryTaxPrice = selectClass.attr('data-tax-price'),
            deliveryRate = selectClass.attr('data-rate');

            //CartJS.clearAttributes();

            var cartAttributes = CartJS.cart.attributes;


        console.time(cartAttributes);
        console.log(cartAttributes);
        console.timeEnd(cartAttributes);

        /* Livraison */
        var orderItems = [

          {
            "variant_id": deliveryId,
            "title": deliveryTitle,
            "quantity": 1,
            "price": parseInt(deliveryPrice)/100,
            "sku": deliverySku,
            "barcode": deliveryBarcode,
            "variant_title": deliveryTitle,
            "vendor": deliveryVendor,
            "type": deliveryType,
            "product_id": deliveryProdId,
            "properties": [],
            "tax_lines":[{"title":"TVA","price":deliveryTaxPrice,"rate":deliveryRate}]
          }

        ];

        /* Cart Items */
          $.each(CartJS.cart.items, function (i, item) {
          var selector = $('#cartOrderDetails div[data-id="' + item.id + '"]'),
              tva_price = selector.attr('data-vat-price'),
              tva_rate = selector.attr('data-vat-rate'),
              barcode = selector.attr('data-barcode');

          var itemsProperties = [];
          itemsProperties.push(
            {
              "product_name": item.properties._Plat1,
              "product_sku": item.properties._component_sku_1,
              "product_variant_id" : item.properties._component_id_1
            },
            {
              "product_name": item.properties._Plat2,
              "product_sku": item.properties._component_sku_2,
              "product_variant_id" : item.properties._component_id_2
            },
            {
              "product_name": item.properties._Plat3,
              "product_sku": item.properties._component_sku_3,
              "product_variant_id" : item.properties._component_id_3
            },
            {
              "product_service_pour": item.properties.pour
            }
          );

          /*var itemsComponents = [];*/
          /*$('#cartOrderDetails div[data-id="' + item.id + '"] .component').each(function(index) {
                    var name = $(this).attr('data-name'),
                        sku = $(this).attr('data-sku'),
                        varID = $(this).attr('data-comp-id');
                    itemsComponents.push(
                      {
                        "product_name": name,
                        "product_sku": sku,
                        "product_quantity":item.quantity,
                        "product_variant_id" : varID
                      }
                    );
                  });*/


          orderItems.push(
            {
              "variant_id": item.id,
              "title": item.product_title,
              "quantity": item.quantity,
              "price": parseInt(item.price)/100,
              "sku": item.sku,
              "barcode":barcode,
              "variant_title": item.title,
              "vendor": item.vendor,
              "type": item.product_type,
              "product_id": item.product_id,
              "properties": itemsProperties,
              "tax_lines":[{"title":"TVA","price":tva_price,"rate":tva_rate}] /*,
                 "bundle_components":
                   itemsComponents */
            }

          );
          console.time();
          console.log(orderItems);
          console.timeEnd();
        });
		/* Order Object */
        var order = [];

        order.push(
          {
              "email":{{ customer.email | json }},
              "total_price":cartTotalPrice,
              "subtotal_price":cartSubTotalPrice,
              "total_tax":cartTotalTax,
              "financial_status":"pending",
              "source": "Proxy",
            "note_attributes":[
                  cartAttributes
              ],
              "line_items":
                  orderItems
              ,
              "customer":{"id":{{ customer.id | json }}},
              "shipping_address":{
                  "address1":address1,
                  "phone":phone,
                  "city":city,
                  "zip":zip,
                  "country":country,
                  "address2":address2,
                  "company":company,
                  "name":{{ customer.name | json }}
              }
          }
        );

        var orderJSON = 'orderJSON='+JSON.stringify(order);
        //$("#log").append(orderJSON);
        // console.log(order);
        console.time(orderJSON);
        console.log(orderJSON);
        console.timeEnd(orderJSON);

        var startTime = new Date().getTime();
        var elapsedTime = 0;

        $.ajax({
          url: "/apps/new-order",
          data: orderJSON,
          type: "GET",
          crossDomain:true,
          contentType: "application/json;charset=UTF-8",
          dataType: 'json',
          beforeSend: function(){
            //$('#overlay').empty().append('<div id="feedback"><h2 class="text-center neutral"><img src="{{ 'ajax-loader.gif' | asset_url }}"></h2></div>').fadeIn();
            console.time("succes");
            console.time("done");
            console.time("alwayz");
          }
        })
        .done(function(data) {
			console.timeEnd("done");
        })
        .success(function(data) {
            var message = '\{{ 'cart.order_success' | t }}';
            //$('#overlay').empty().append('<div id="feedback"><h2 class="text-center neutral">' + message + '</h2></div>');
            feedback(message);
            console.timeEnd("succes");
            CartJS.clear();
            $('#cart_display').fadeOut(600);
        })
        .fail(function( xhr, status, errorThrown ) {
            var message = '\{{ 'cart.order_fail_manual_way' | t }}';
            feedback(message);
            console.log( "Error: " + errorThrown );
          	console.log(order);
            console.log( "Status: " + status );
            console.dir( xhr );
            $('#manual_order_form').find('#manualStatus').val('La commande n\'a pu être transmise pour la raison suivante: "' + status + ' : ' + errorThrown + '". Un traitement manuel de celle-ci est requis.');
            setTimeout(function(){
                $('#manual_order_form').submit();
            }, 2500);
            $('#cart_display').fadeOut(600);
        })
        // Code to run regardless of success or failure;
        .always(function( xhr, status ) {
          $('#overlayCart').fadeOut(400);
          $('body').css('overflow','');
          CartJS.setAttribute('Mes informations complémentaires', '');
          console.log(55);
          //setTimeout(function(){CartJS.setAttribute('Mes informations complémentaires', '')}, 2500);
          //$(".content").html(orderJSON);
          //alert( "The request is complete!" );
        });
        elapsedTime = new Date().getTime() - startTime;
        console.log(elapsedTime + "alwayz");
        console.timeEnd("alwayz");
      //console.log(order);
    }


    //execution de la fonction
    $('#clientOrderForm').submit(function(event) {

     	event.preventDefault();
      /* Check if extra infos added by client */
          var extra = $('#mes-informations-complementaires').val()//.replace(/[^ \w]/gi, '.') //information complémentaires
          /* If customer added extra infos to his order, then wait for process to be done before sending */
            CartJS.setAttribute('Mes informations complémentaires', extra, {
                    "success": function(data, textStatus, jqXHR) {

                                           /* Compensate bug due to framework by double attr update to be sure to get last infos */
                      CartJS.setAttribute('Mes informations complémentaires', extra, {
                              "success": function(data, textStatus, jqXHR) {
                                //alert(extra);
                                var startTime = new Date().getTime();
                                var elapsedTime = 0;
                                console.time("afterAjax")
                                buildOrder();
                                console.timeEnd("afterAjax");
                                elapsedTime = new Date().getTime() - startTime;
          						          console.log(elapsedTime + "fin");
                              }

                      		});

              }
          });


    });

  </script>

{% include 'cart_manual_form' %}
`

Hi, I have seen this issue closed in the past. But seems that it is not fixed yet or found an alternate method.

The problem I see with all Stores using CartJS I know, tested on:

https://tattly.com/
https://www.blacklimba.com/
https://www.pompeiibrand.com/
https://www.buttonwatch.com/

Is that whenever you add an item to the cart and press the back button. As the page is in Browser Cache it does not refresh and it appeared as the product just disappeared. Only after you refresh this information is available.

As nothing is reloaded, it relies on browser memory. Nothing appears. As no Ajax call is made in order to check if there is something on Cart.

We are studying how to fix this behavior in one of our Stores but having no luck. We thought it was isolated but every shop we try it behaves the same.

Someone has had this issue before??

Thanks in advance
This only happens on **Safari** (Version 12.0.2) **on the first product you add to cart**, if you click add to cart, the cart object it gives you through the event 'cart.requestComplete', is empty. Refreshing the page will show your item in the cart. Any way to fix this? My code relies on the cart object giving the right info.

My code:

```
var cartCount = {{ cart.item_count }};

$(document).on('cart.requestComplete', function(event, cart) {
    console.log('Cart count before adding anything is: ' + cartCount);
    console.log('Cart count of the Cart is: ' + cart.item_count);
    console.log('This is the cart object:');
    console.log(cart);
    console.log('This is the event object:');
    console.log(event);
});
```

Could anyone please help me?