**Describe the solution you'd like**
Display Response time by link checked. (Average 5min / 1h / 1d / 7d)

**Describe alternatives you've considered**
Only showed in prometheus metrics

**Additional context**
Add any other context or screenshots about the feature request here.

Hi, ^_^
I'm using docker-compose, and here is my yml file
````
version: "3"
services:
  ciao:
    image: brotandgames/ciao
    container_name: ciao
    ports:
      - '8300:3000'
    environment:
      [...]
      - CIAO_WEBHOOK_PAYLOAD_MONITOR={ "status_before":"__status_before__", "status_after":"__status_after__"}
      - CIAO_WEBHOOK_ENDPOINT_MONITOR=http://host.com/xxx
````

my webhook will parse request payload to json object, but [__status_before__] and [__status_after__]  will contains quotes when my web-proxy is shutting down , for example: "Failed to open TCP connection to 200.1.3.19:8200 (Connection refused - connect(2) for "200.1.3.19" port 8200)", and this causes parsing failed.


**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

We plan to use ciao in our project and its metrics in prometheus, to create alerts. There is a number of unhealthy services in metrics, but it's impossible to understand which service is faulty.

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

Add a metric which would return the status code per each service, like this:

```
ciao_checks_statuses{label="service1"} 200
ciao_checks_statuses{label="service2"} 503
```

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

I don't know about such ones

**Additional context**
Add any other context or screenshots about the feature request here.

As this is my feature request I can implement it myself (I have relevant RoR experience), this issue is mostly for the discussion.
Hey :) 

Thanks for ciao, it's really simple and i love to use it ! :D 
The only thing is I can't identify quickly ciao in a browser since there's no favicon :/ So i propose this favicon :) (I can send you the svg version if you'd like ;) )
![favicon-32x32](https://user-images.githubusercontent.com/7846095/66479433-c7d60300-ea9c-11e9-95f0-0f7d2a919672.png)

cheerz :) 

**Describe the bug**
When I try to run ciao on a raspberry pi using docker, I see a linux error. I did not encounter the same problem on OSX

**To Reproduce**
After installing docker on a raspberry pi and then running ciao with
`
docker run --name ciao -p 8090:3000 brotandgames/ciao
`
I see the following error:
`standard_init_linuz.go:211 eexec user process caused "exec format error"
`

**Expected behavior**
When I ran the same command on OSX, ciao started as requested, and I found it so useful, that I want to run it 24/7 on a rapsberry pi.

**Desktop (please complete the following information):**
The operating system is Raspbian GNU/Linux, version 10 (buster).
It is running on a raspberry pi 3 model B


Yaml file for Openshift
It is a yaml file for RedHat Openshift which you can add to your repository to be used.


```

apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ciao
    name: ciao
  spec:
    ports:
    - name: 3000-tcp
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      deploymentconfig: ciao
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 10
    labels:
      app: ciao
    name: ciao
  spec:
    replicas: 1
    selector:
      app: ciao
      deploymentconfig: ciao
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        creationTimestamp: null
        labels:
          app: ciao
          deploymentconfig: ciao
      spec:
        containers:
        - env:
          - name: PORT
            value: "3000"
          - name: SMTP_ADDRES
            value: smtp.blabla.com
          - name: SMTP_EMAIL_FROM
            value: dasda@dasda.com.ar
          - name: SMTP_EMAIL_TO
            value: dasda@dasda.com.ar
          - name: CIAO_WEBHOOK_ENDPOINT_OFFICE_365
            value: https://outlook.office.com/webhook/changehere
          - name: CIAO_WEBHOOK_PAYLOAD_OFFICE_365
            value: 'payload'
          image: brotandgames/ciao
          imagePullPolicy: Always
          name: ciao
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/db/sqlite
            name: ciao-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ciao-1
          persistentVolumeClaim:
            claimName: ciao
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ciao
        from:
          kind: ImageStreamTag
          name: ciao:latest
          namespace: CURRENT_NAMESPACE
        lastTriggeredImage: brotandgames/ciao
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/image.dockerRepositoryCheck: 2019-09-05T14:51:40Z
    creationTimestamp: null
    generation: 2
    labels:
      app: ciao
    name: ciao
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/generated-by: OpenShiftWebConsole
        openshift.io/imported-from: brotandgames/ciao
      from:
        kind: DockerImage
        name: docker-registry.default.svc:5000/CURRENT_NAMESPACE/ciao:latest
      generation: 2
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
  status:
    dockerImageRepository: ""

```
# Creating a 'Deploy to Heroku' Button

Cf. https://devcenter.heroku.com/articles/heroku-button

To facilitate deployments.
Please, add new feature to notify about new release version
@brotandgames This should release a new docker image when you create a tagged release. Released Docker images will be:

- `brotandgames/ciao:latest`
- `brotandgames/ciao:$TRAVIS_TAG`

You will need to add the following ENV vars to your pipeline at Travis: `$DOCKER_USERNAME` & `$DOCKER_PASSWORD`
If you define `CIAO_CHECKS_LOAD_FROM_FILE` ENV variable by setting it to a valid file path like

* `$file_path.[json|yaml|yml]` eg. `CIAO_CHECKS_LOAD_FROM_FILE="/data/ciao/checks_input.json"` *(file must be available in filesystem or docker/kubernetes volume)*, 

you can load checks from this file by 

* visiting `/checks/admin`in the Web UI and using the *Load from file* button **or**
* calling the JSON endpoint like `curl -X GET -H "Content-type: application/json" /checks/load-from-file.json`.

Example files

`checks_input.json`

````json
[
    {
        "active": true,
        "name": "brotandgames.com",
        "cron": "* * * * *",
        "url": "https://brotandgames.com"
    },
    {
        "active": true,
        "name": "kubernete.sh",
        "cron": "*/15 * * * *",
        "url": "https://kubernete.sh"
    }
]
````

`checks_input.yaml`

````yaml
---
- active: true
  name: brotandgames.com
  cron: "* * * * *"
  url: https://brotandgames.com
- active: true
  name: kubernete.sh
  cron: "*/15 * * * *"
  url: https://kubernete.sh
````