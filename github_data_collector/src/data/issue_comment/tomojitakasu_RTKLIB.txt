Hello,
I use RKTlib ver.demo5 b33a and I want to receive input data on the Serial and transmit it over TCP client.



The input data is of RXM - RAWX format and my device is u-blox EVK-6PPP (u-blox 6).
The transmission from my serial to a TCP client is fine. I get the data there but it is not converted even though I have selected Conversion from u-blox format to RTCM 3. 
The data I get is still encoded. What am I doing wrong, how can I fix this problem ? 
It looks like this
![Screenshot_1](https://user-images.githubusercontent.com/12518915/72203705-59278d80-346f-11ea-8dcb-ce32d600aca4.jpg)
I do not use any startup or shutdown commands or messages. The configuration of the u-blox is saved and the data I get is the data I need.
Would it be too much to ask if there would be a small change in the strsvr so that it could be set to pass over also the in rtklib unsupported RTCM message types like 1230 in a RTCM3 to RTCM3 type streaming? Just pass them over without any conversion.

And also for your interest: The MSM message type 1087 (GLONASS) conversion to 1012 does not seem to work right in rtklib  STRSVR ver.2.4.3 b33. Some work to fix this issue has been done by rtkexplorer: this beta ver.demo5 b33b2 will show GLONASS observation data for both L1 and L2 in rtknavi but feeding this correction stream to my Trimble ag receiver/display will put the receiver to a boot loopâ€¦

I am trying to get rtkrcv working on Linux 16.04 system , I am able to see the solution on my terminal window but I am not able to save it into a file. Whenever I set the outstr1 type as file, it throws segmentation fault. 
Any suggestions on how I can save the solution file and log file would be great . 
It seems that the overwrite process when closing the file is not appropriate.
Hello, 
*.ubx files from u-center cannot be converted.

It seems that files are just not written to disc, and it's known problem but on other version of rtklib.
I was using version from b33 commit a558afc from repo with binaries.

![image](https://user-images.githubusercontent.com/31712401/68999407-fc20b880-08bf-11ea-9a6b-9630fd2dcfdf.png)


I see that there a classic Hatch filter in RTKLIB common functions  [  extern void csmooth(obs_t *obs, int ns) ] but see no example how to use it, and it never seems to be called at all.  Look like it comes right of of the classic text books to smooth X past values.   If there any 'best practices' example of how to call this method?  Of how to bring it more than that one prior observation set to operate on? 
If I call it on the observables set right before calling rtkpos() it does not appear the the smoothed values (Ps Ls) are being passed back or set in obs_t, but I have not investigated much further  (no immediate visual effect on the navigation output).
Found this while searching on line, https://www.deere.com/assets/pdfs/navcom/Featured%20Articles/inside_gnss_janfeb08_humaneng_ron_hatch.pdf , quite a guy. 
Hi everyone,
I'm using GNSS SDRLIB with a Nooelec SMARTee and active L1 GPS antenna outdoor with clear sky view. This is set up as a Rover via a TCP connection.

I can get in a few seconds a SINGLE fix in RTKLIB 2.4.2 but then the RTK correction is giving me errors and can't be resolved to a solution.

As the base, I am using an [Italian NTRIP Server](https://www.spingnss.it/spiderweb/frmIndex.aspx)

Here is my RINEX file generate straight from GNSS_SDRLIB.
[RINEX.zip](https://github.com/tomojitakasu/RTKLIB/files/3793315/RINEX.zip)

Here a screenshot of my setup with the Error/warning page
![Cattura](https://user-images.githubusercontent.com/10298494/67939945-e1b5c200-fbd2-11e9-8a51-61589c0236f4.JPG)



Hi, 

steps to reproduce:
- rtkpost 2.4.2
- run rtklibpost in Kinematic mode with ECEF output and GPST timestamp with observations from 2019
- run rtklibpost on the same input data with output time stamp set to UTC

In the output .pos logs I find that the first position solution record of each file differ by 16 seconds:

%  UTC                   latitude(deg) longitude(deg)  height(m)   Q  ns   sdn(m)   sde(m)   sdu(m)  sdne(m)  sdeu(m)  sdun(m) age(s)  ratio
2019/10/11 11:16:50.000   48.748075732    2.102047402   205.8760   2   9   0.3702   0.3061   0.6852   0.1856   0.1226   0.2725   0.00    1.2

versus

%  GPST                  latitude(deg) longitude(deg)  height(m)   Q  ns   sdn(m)   sde(m)   sdu(m)  sdne(m)  sdeu(m)  sdun(m) age(s)  ratio
2019/10/11 11:17:06.000   48.748075732    2.102047402   205.8760   2   9   0.3702   0.3061   0.6852   0.1856   0.1226   0.2725   0.00    1.2

 In 2019, GPS time and UTC differ by 18 seconds (see http://www.leapsecond.com/java/gpsclock.htm). I checked the unit tests in RTKLIB/test/utest/t_time.c  and find the following test:

Line 171    double ep6[]={2038, 1, 1, 0, 0, 0.000000};
Line 186 t=gpst2utc(epoch2time(ep6)); time2epoch(t,ep);
        assert(ep[0]==2037&&ep[1]==12&&ep[2]==31&&ep[3]==23&&ep[4]==59&&ep[5]==44.0);
which corresponds to 16 leap seconds for 2038 as well.

Is it possible that the Rtklib leap seconds need to be updated?

cheers, 
Jan

Tested on Ublox NEO-7M. Quality indicator > 7 (and wrong time) in some observations. Convbin generates many empty rows in observation file.
C++ x11 <mutex> uses lock function.
pound defining a definition of lock causes compile to fail.

See
https://en.cppreference.com/w/cpp/thread/mutex