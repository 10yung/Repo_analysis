# 页码与行数

- 第69页

---
代码清单3-34
# 代码错误

```rust
fn sum<T>(a: T, b: T) {
    a + b
}
```
似乎缺少返回类型？
另外代码后面文本解释说「a和b都是整数，加法行为是合法的」。但是我用1.37.0版本的编译器编译已经不能通过，所以现在是不是可以认为这种写法已经「不合法」了？
# 页码与行数

- 第366页
- 第17行

---

# 文本或排版错误

> 线程A会继续执行第3步操作，此时就从寄存器中读取了错误的值

切换回线程A之后，寄存器中的值应该会恢复成线程A上次暂停时的值，也就是1， 怎么会继续使用线程B的寄存器的值呢？

---



# 页码与行数

- 第298页
- 倒数第1行

---

# 文本或排版错误

> 标准库中还提供了unwarp系列方法

拼写错误，应该是unwrap
# 第11章

11.3示例和下面描述 不太匹配，需要重新修正示例。



9.4 恐慌(Panic) 

315页的最后4行

示例 代码清单 9-33 运行后的输出行在排版中顺序有误，应该是
先输出正常的println! 的结果 (hello)，然后，是panic回滚的消息，最后是 接下来的正常输出。

正确的应该是：

hello.
thread 'main' panicked at 'oh, no!', panic.rs:10:38
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
3

而非：
thread 'main' panicked at 'oh, no!', panic.rs:10:38
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
hello.
3

在写完前面这些内容的时候，再去较对书内容的时候，发现里面有一句 
“-------- standard output  ”
但在看书的时候，就会不注意到，一直以为是正常的输出。
那么问题来了，为什么中间阶段输出的东西会在前面呢？是不是系统会自动的重定向到哪里，
然后，收集后，先输出“错误级别高”的东西，这个很没有道理。

总之，容易引起误解。
最后一个 
**{:010.2}** 
应该为 
**{:e}** 或者 **{:11e}**
# 2.10.2 trait 节

代码清单 2.53 trait
# 代码错误

 - 第16行定义错误
 - 第24、26行调用错误
 - 第19行定义方法被丢用

```rust
fn fly_static<T: Fly>(s: T) -> bool {  // 此处应为 (s: &T)
    s.fly()
}

fn fly_dyna(s: &Fly) -> bool {  // 此处应为 &dyn Fly，原特性被弃用。
    s.fly()
}

    assert_eq!(fly_static(pig), false);    // 此处及下一行，应该为 &pig, &duck
    assert_eq!(fly_static(duck), true);

```
### Rust版本

```
$ rustc -V
rustc 1.41.0-nightly (1bd30ce2a 2019-11-15)
```


### 页码与行数:

- 第92-93页

### 代码清单 3-78:(随书源码)

```rust
#![feature(specialization)]
struct Diver<T> {
    inner:T
}
trait Swimmer {
    fn swim(&self){
        println!("swimming")
    }
}
impl<T> Swimmer for Diver<T>{}
impl Swimmer for Diver<&'static str> {
    fn swim(&self){
        println!("drowning, help!")
    }
}
fn main(){
    let x = Diver::<&'static str> { inner: "Bob" };
    x.swim();    //drowning, help!
    let y = Diver::<String> { inner: String::from("Alice") };
    y.swim();    // swimming
}
```
### 错误信息:

```rust
   Compiling playground v0.0.1 (/playground)
error[E0520]: `swim` specializes an item from a parent `impl`, but that item is not marked `default`
  --> src/main.rs:12:5
   |
10 |   impl<T> Swimmer for Diver<T>{}
   |   ------------------------------ parent `impl` is here
11 |   impl Swimmer for Diver<&'static str> {
12 | /     fn swim(&self){
13 | |         println!("drowning, help!")
14 | |     }
   | |_____^ cannot specialize default item `swim`
   |
   = note: to specialize, `swim` in the parent `impl` must be marked `default`

error: aborting due to previous error

For more information about this error, try `rustc --explain E0520`.
error: could not compile `playground`.

To learn more, run the command again with --verbose.
```

---

### 修改为如下:

```rust
#![feature(specialization)]
struct Diver<T> {
    inner:T
}
trait Swimmer {
    //如果是impl 特化, 此方法始终不会运行
    //fn swim(&self){
    //    println!("swimming")
    //}
    
    fn swim(&self);
}
impl<T> Swimmer for Diver<T>{
    //必须存在此default fn
    default fn swim(&self){
        println!("swimming")
    }
}
impl Swimmer for Diver<&'static str> {
    fn swim(&self){
        println!("drowning, help!")
    }
}
fn main(){
    let x = Diver::<&'static str> { inner: "Bob" };
    x.swim();    //drowning, help!
    let y = Diver::<String> { inner: String::from("Alice") };
    y.swim();    // swimming
}
```

---

[在线测试](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=dd73b9711ce463b8f5123dfdcf3869af)


# 代码清单11-62 Rust生成器用法变更
以前的代码无法编译
新的代码如下
```Rust
#![feature(generators, generator_trait)]
use std::ops::Generator;
use std::pin::Pin;

fn main() {
    let mut gen = || {
        yield 1;
        yield 2;
        yield 3;
        return 4;
    };
    for _ in 0..4 {
        let c = Pin::new(&mut gen).resume();
        println!("{:?}", c);
    }
}
```
运行结果如下
```
Yielded(1)
Yielded(2)
Yielded(3)
Complete(4)
```
# 页码与行数

- 实体书第521页
- 第15行

---

# 文本或排版错误
### 原文 :
> 该类型会产生一个以“\n”字符数组的引用
### 建议修改为 :
>  该类型会产生一个以“\0”结尾的字符数组的引用

---

# 代码错误
> 暂无

--------

# 页码与行数

- 微信读书，电子书，无法确认书页
- 错误有两处，一处与上述实体书错误相同，一处从此错误向前数4段

# 文本或排版错误
### 原文 :
> 该函数会在C代码中被调用，但是C语言中的字符串是一个以“\n”结
> 尾的字符数组，实际上由一个char*str指针来定义

### 建议修改为
> 该函数会在C代码中被调用，但是C语言中的字符串是一个以“\0”结
> 尾的字符数组，实际上由一个char *str指针来定义

# 代码错误
> 暂无