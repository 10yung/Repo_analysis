Updates [com.github.gseitz:sbt-release](https://github.com/sbt/sbt-release) [from 1.0.12 to 1.0.13](https://github.com/sbt/sbt-release/compare/v1.0.12...v1.0.13).
[Release Notes/Changelog](https://github.com/sbt/sbt-release/releases/tag/v1.0.13)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.github.gseitz", artifactId = "sbt-release" } ]
```
</details>

labels: sbt-plugin-update, semver-patch
Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
Updates [com.google.apis:google-api-services-bigquery](http://svn.sonatype.org/spice/tags/oss-parent-7) from v2-rev20181104-1.27.0 to v2-rev20191211-1.30.3.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.google.apis", artifactId = "google-api-services-bigquery" } ]
```
</details>

labels: library-update
If a record has nested repeated fields of different lengths, BigDiffy incorrectly reports the differences. There are two problems

* It directly sorts, zips and compares, so sorted elements can get offset and compared incorrectly
* It doesn't report that an item on the LHS or RHS was missing because of how the `.zip` call functions
Over time we've had some things leak into the diff methods that make it more cumbersome to use BigDiffy via code instead of CLI.

For example `diffAvro` here https://github.com/spotify/ratatool/blob/master/ratatool-diffy/src/main/scala/com/spotify/ratatool/diffy/BigDiffy.scala#L284

User has to manually pass in schema otherwise we they receive a non-informative error regarding null schema, additionally user has to construct MultiKey manually even if still using a single key. We should probably automatically retrieve the schema and pass in a keys string instead which will better match other parameters such as those passed into `AvroDiffy`.

Trying to run the diff also has an unclear two step process (First create the diff, then call saveStats). We should document this properly or simplify the process.

Also, passing in some SpecificRecord `T` results in a strange casting error, and instead the user needs to pass a GenericRecord.
I just started using ratatool today and am using it for CaseClass and Avro generation. I believe there's an issue in the way it handles, or fails to handle, logical types in avro.

I'm using java/scala type `BigDecimal`, which in schema looks like this (newlines added by me for easier reading):
```json
{
  "name":"cost",
  "type": {
    "type":"bytes",
    "logicalType":"decimal",
    "precision":10,
    "scale":2
  }
}
```
Decimal logical type is documented here: https://avro.apache.org/docs/current/spec.html#Logical+Types 

What's happening when attempting to use `avroOf[MyGenericRecord]` is the `type` pattern match (found [in AvroGenerator.scala](https://github.com/spotify/ratatool/blob/master/ratatool-scalacheck/src/main/scala/com/spotify/ratatool/scalacheck/AvroGenerator.scala#L163)) hits `Schema.Type.BYTES` and can generate `byte[0]`. 

Later, the AvroCodec, which *does* honor the BigDecimal logical type, attempts to convert `byte[0]` into a `BigInteger` (see https://github.com/apache/avro/blob/master/lang/java/avro/src/main/java/org/apache/avro/Conversions.java#L84), which fails with:

>  NumberFormatException("Zero length BigInteger")

I feel there's a few options which could be done independently here (I'll PR as I'm able):
1. document the current limitation
1. add support for common, documented logical types to ratatool. likely these can be done in independent PRs
https://github.com/spotify/scio/blob/master/build.sbt#L110

Scio master (since `0.8.0-beta1`) has switched to latest magnolia (`0.12.0`) for Scala 2.13 while pinging my fork `0.10.1-jto` for Scala 2.11 which is no longer supported. Mixing different magnolia versions has caused problem in the past.

I ported/cleaned up some common type classes into this new lib: https://github.com/spotify/magnolify

It'd be nice to consolidate various magnolia derivation code there.

- case class generators
- port shapeless based diffy -> magnolia-based (TBD)

WDYT?
A library should not contain application wide configuration. In this particular case, `log4j.properties` should not be part of `ratatool-common` project.
Hackday project in need of feedback. 

Working with data you're interested in:
* Shape of data, which could be your schema
* General case, which is addressed by bigSampler
* Edge cases, which this PR tries to tackle

It's inspired by `summary` from R.

Todo:
- [ ] Property and unit tests
- [ ] Support booleans
- [ ] Support floating point numbers
- [ ] Support for different formats (protobuf)?
Need to benchmark the multi key support changes introduced in #138 to make sure the value class optimization is actually kicking in and there's no overhead of boxing.