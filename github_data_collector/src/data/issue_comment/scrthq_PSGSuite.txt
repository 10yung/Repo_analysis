Since we already run "foreach" on the $User, thought we can allow this to be an Array String input.
I have also tested it, and it works as expected, I got the multiple user output for my search.
Hello, I have troubles with module version  2.35.1:

**Summary:**
PSGSuite (version 2.35.1) stop working on Microsoft Windows Server 2019 Standard. 
To resolve the issue need to upgrade Google.Apis.Urlshortener.v1.dll to Version=1.42.0.0 (but I don't see one at https://www.nuget.org). Probably need rollback *.dlls to version 1.41.1.0

**Debugging info:**
When I run the command: Import-Module PSGSuite (2.35.1) the errors occurred:

Message: Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information.
StackTrace:    at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)
   at System.Reflection.Assembly.GetTypes()
   at Microsoft.PowerShell.Commands.AddTypeCommand.LoadAssemblyFromPathOrName(List`1 generatedTypes)
   at Microsoft.PowerShell.Commands.AddTypeCommand.EndProcessing()
   at System.Management.Automation.CommandProcessorBase.Complete()
LoaderExceptions: System.IO.FileNotFoundException: Could not load file or assembly 'Google.Apis, Version=1.41.1.0, Culture=neutral, PublicKeyToken=4b01fa6e34db77ab' or one of i
ts dependencies. The system cannot find the file specified.
File name: 'Google.Apis, Version=1.41.1.0, Culture=neutral, PublicKeyToken=4b01fa6e34db77ab'

WRN: Assembly binding logging is turned OFF.
To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1.
Note: There is some performance penalty associated with assembly bind failure logging.
To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog].
 System.IO.FileNotFoundException: Could not load file or assembly 'Google.Apis, Version=1.41.1.0, Culture=neutral, PublicKeyToken=4b01fa6e34db77ab' or one of its dependencies. 
The system cannot find the file specified.
File name: 'Google.Apis, Version=1.41.1.0, Culture=neutral, PublicKeyToken=4b01fa6e34db77ab'
.....

Digging further I have found that it can't load net45/Google.Apis.Urlshortener.v1.dll due to it requires Google.Apis Version=1.41.1.138, but version  Google.Apis, Version=1.42.0.0 was installed:
See Fusion logs (https://port135.com/2018/05/17/how-to-enable-assembly-binding-logging-debugging-net-applications/) for more details:

=== Pre-bind state information ===
LOG: DisplayName = Google.Apis, Version=1.41.1.0, Culture=neutral, PublicKeyToken=4b01fa6e34db77ab
 (Fully-specified)
LOG: Appbase = file:///C:/Windows/System32/WindowsPowerShell/v1.0/
LOG: Initial PrivatePath = NULL
LOG: Dynamic Base = NULL
LOG: Cache Base = NULL
LOG: AppName = powershell.exe
Calling assembly : Google.Apis.Urlshortener.v1, Version=1.41.1.138, Culture=neutral, PublicKeyToken=4b01fa6e34db77ab.
===
LOG: This bind starts in LoadFrom load context.
WRN: Native image will not be probed in LoadFrom context. Native image will only be probed in default load context, like with Assembly.Load().
LOG: Using application configuration file: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe.Config
LOG: Using host configuration file: 
LOG: Using machine configuration file from C:\Windows\Microsoft.NET\Framework64\v4.0.30319\config\machine.config.
LOG: Post-policy reference: Google.Apis, Version=1.41.1.0, Culture=neutral, PublicKeyToken=4b01fa6e34db77ab
LOG: GAC Lookup was unsuccessful.
LOG: Attempting download of new URL file:///C:/Windows/System32/WindowsPowerShell/v1.0/Google.Apis.DLL.
LOG: Attempting download of new URL file:///C:/Windows/System32/WindowsPowerShell/v1.0/Google.Apis/Google.Apis.DLL.
LOG: Attempting download of new URL file:///C:/Windows/System32/WindowsPowerShell/v1.0/Google.Apis.EXE.
LOG: Attempting download of new URL file:///C:/Windows/System32/WindowsPowerShell/v1.0/Google.Apis/Google.Apis.EXE.
LOG: Attempting download of new URL file:///C:/Program Files/WindowsPowerShell/Modules/PSGSuite/2.35.1/lib/net45/Google.Apis.DLL.
LOG: Assembly download was successful. Attempting setup of file: C:\Program Files\WindowsPowerShell\Modules\PSGSuite\2.35.1\lib\net45\Google.Apis.dll
LOG: Entering run-from-source setup phase.
LOG: Assembly Name is: Google.Apis, Version=1.42.0.0, Culture=neutral, PublicKeyToken=4b01fa6e34db77ab
WRN: Comparing the assembly name resulted in the mismatch: Minor Version
ERR: The assembly reference did not match the assembly definition found.
ERR: Run-from-source setup phase failed with hr = 0x80131040.
LOG: Attempting download of new URL file:///C:/Program Files/WindowsPowerShell/Modules/PSGSuite/2.35.1/lib/net45/Google.Apis/Google.Apis.DLL.
LOG: Attempting download of new URL file:///C:/Program Files/WindowsPowerShell/Modules/PSGSuite/2.35.1/lib/net45/Google.Apis.EXE.
LOG: Attempting download of new URL file:///C:/Program Files/WindowsPowerShell/Modules/PSGSuite/2.35.1/lib/net45/Google.Apis/Google.Apis.EXE.
LOG: All probing URLs attempted and failed.


Is it possible that you can add gdrive/team drive changes as cmdlet . I would like to have a script that would run every 5 minutes, look for changes ( uploads to Gdrive or team drive) and export  selected information ( file id/ folder I'd/ name of file / folder it's in etc )

I will use the selected information both to export to CSV and create files (strm files) which will link to the hosted media file.

I think seeing the changes to a drive would be useful information to have.

From Disqus on the docs page @ https://psgsuite.io/Function%20Help/Chat/Send-GSChatMessage/#__comments

***

Skylar Ragan • 40 minutes ago
Get-GSChatWebhook appears to no longer be a valid function in this module. It seems the key for the webhook value can now be named directly with the webhook parameter.

•Reply•Share ›
Avatar
Nate @ SCRT HQ Mod  Skylar Ragan • 36 minutes ago
Hey Skylar Ragan - Any examples or links that show the change in usage? Definitely want to get those cleaned up if I can, but I'm not sure exactly what the alternative you are suggesting is so I have no way to validate that claim.

•Edit•Reply•Share ›
Avatar
Skylar Ragan  • a minute ago
So both Example 1 as well as the description for the -Webhook parameter itself suggest getting the webhook URL via the Get-GSChatWebhook command; ie. -webhook (Get-GSChatWebhook RoomName). But when attempting to call Get-GSChatWebhook an error is thrown stating it's not recognized as the name of a cmdlet, function, script file, or operable program. Instead, both Example 2 and Example 3 seem to suggest calling the room name directly; ie. -Webhook RoomName, which I've been able to verify works in the most recent version of the module.

•Reply•Share ›
−
Avatar
Nate @ SCRT HQ Mod  Skylar Ragan • a few seconds ago
Got it, that makes sense! I appreciate the details, I may have switched that up to make it easier to use a while back and never updated the documentation to reflect. I'll get that sorted asap!

•Edit•Reply•Share ›
This isn't fully ready to be merged, but I wanted to open this PR to see how you feel about these changes.

I'm trying to migrate from a Google API module my team has written, [UMN-Google](https://github.com/umn-microsoft-automation/UMN-Google), to this module.  Our primary use case is running from within Azure Automation.  Additionally, We're currently using a service account with a .p12 cert to do all our authentication, though our .p12 isn't a super admin, it's just a "regular" user in our domain.  Additionally, when we first created our .p12 cert we re-exported it with a new more secure password, instead of `notasecret`.

So the first change I've made here is to create a `P12KeyPassword` config item.  It can be specified with `Set-PSGSuiteConfig`.  If it exists, `New-GoogleService` will use it instead of the default password.  I've constructed it in the way I have such that, if someone doesn't use this parameter, they'll never see it in their config.  This also makes it backwards compatible with existing configs, and doesn't require anything like setting the `notasecret` password in every config file.

The rest of the changes are because of our primary use case, Azure Automation. First I'll note that I wrote the rest of this before I saw the `Import` and `Export` Config commands.  So it's entirely possible I could be using those, but at a first glance I don't think they'd fully work in my scenario.

Azure Automation has its own secrets management. It can store/retrieve strings.  It can also store/retreive a few object types, like `PSCredential` and `X509Certificate2`.  Because we do all our secrets management in Azure Automation directly, I don't want to have to do any work to store my configuration on the actual machine, and make the deployment of new HybridRunbookWorkers as simple and automated as possible.

So first, I've modified the `Get-PSGsuiteConfig` function, specifically the internal `Decrypt` function.  Now it will "decrypt" one additional datatype, a `ScriptBlock`.  It does this by actually executing the ScriptBlock, which makes the configuration incredibly versatile.  I haven't modified the corresponding `Set` command for this, because I think it may be advanced enough that someone should have to edit their Configuration by hand if they want to do it.

In Azure Automation if I want to retrieve a string value, I would use the command `Get-AutomationVariable -Name <name>`.  For example if I stored my App Email in a variable called `gcert-email` then `Get-AutomationVariable -Name 'gcert-email'` in a runbook would return the App Email.  Then I can do something like this in my Configuration, making it fully portable:
```powershell
AppEmail = (ScriptBlock "Get-AutomationVariable -Name 'gcert-email'")
```
The ScriptBlock construction here is a feature of the Configuration module, when it deseralizes this, the `AppEmail` property will be an actual ScriptBlock

To Decrypt this I added another case, if the `$String` being decrypted is of type `[ScriptBlock]` it will execute it and return whatever it returns.  In my case it will return an actual string, so the end result is the `AppEmail` config item is being set and defined by my Azure Automation Variable.

Azure Automation can also produce exportable passwordless certificates, in the same format as your certificate construction code currently takes.  So I've added another config that can be retreived with `Get-PSGsuiteConfig`, `P12KeyObject`.  If `P12KeyObject` is defined, `New-GoogleService` will skip trying to write the bytes of the password protected cert, and skip creating the certificate object, and just use the value of `P12KeyObject` directly.

The end result of all this is I can write a config file that looks like this:
```powershell
@{
  aaservice = @{
    ConfigPath = 'C:\ProgramData\powershell\SCRT HQ\PSGSuite\Configuration.psd1'
    AppEmail = (ScriptBlock "Get-AutomationVariable -Name 'gcert-email'")
    AdminEmail = (ScriptBlock "Get-AutomationVariable -Name 'gcert-email'")
    P12KeyObject = (ScriptBlock "Get-AutomationCertificate -Name 'gcert'")
  }
  DefaultConfig = 'aaservice'
}
```

I've been able to test this in my environment, but that's the extent of testing I've done.  I'm opening this to see what you think about this, to determine if I'll put more work into making it merge ready.
I'm trying to migrate off of a custom brewed Powershell Module that goes against the REST API directly to using PSGsuite and there's a few specific bits of functionality around Spredhseets that it's currently missing that I've already implemented:

- Manipulating Data Validation in cells
- Resizing columns
- Removing specific columns or rows

I'll volunteer to take this on.  I'm not sure exactly how I'll implement this, I'll have to examine the current functions, how, they're currently interacting with the API, and how specific or general new functionality will be.  I also see some spreadsheet requests in #125, I may contribute to whatever work has happened there as well.

Just opening this issue to "claim" the work and start a place for discussion about proposals I'll have once I actually start coding something
**Is your feature request related to a problem? Please describe.**
We would like to Get/Remove/Set/Update the 'G Suite Business - Archived User' license.

**Describe the solution you'd like**
We would like to use this feature in PSGSuite

**Describe alternatives you've considered**
I have seen that [GAM](https://github.com/jay0lee/GAM/blob/f0ca2e26019b16496dc14bcea080b54d43148142/src/var.py#L73) supports this license.

**Additional context**
ProductId       : 101034
ProductName : G Suite Archived User
SkuId              : 1010340002
SkuName        : G Suite Business - Archived User
**Is your feature request related to a problem? Please describe.**
Get-GSDriveFileList periodically returns zero data

**Describe the solution you'd like**
Method returns status code about request



**Describe the bug**
When using the start-psdrivefileupload function with the recurse switch, it will create the folder structure of the directory to be uploaded, but then it places all of the files in the root directory.

**To Reproduce**
Steps to reproduce the behavior:
1. Use start-gsdrivefileUpload
2. Use recurse switch


**Expected behavior**
In the documentation it states that it should place the files in the same directory pattern in Google as the original directory



**Environment (please complete the following information):**
 - OS:  Windows 10 1803
 - PowerShell Version:  Powershell  5.1.17763.592
 - PSGSuite Version:  2.32.3



**Is your feature request related to a problem? Please describe.**

I would like to have the ability of exporting google docs users to files as described:
* Google Sheets -> .xlsx
* Google Docs -> .docx
* Google Presentations -> .pptx
* and so on...

**Describe the solution you'd like**

Do a recursive search in a specific drive location (personal, shared drives or both) for all user or specific one and then export all the files found on its source location.

**Describe alternatives you've considered**

**Additional context**
