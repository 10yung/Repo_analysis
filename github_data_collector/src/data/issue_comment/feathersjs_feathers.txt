If you have an existing JWT, when an initial reAuthenticate call happens, if the referenced entity does not exist any more (e.g. deleted from users) then the feathers client does not handle this as a failure and no response is delivered to the caller.

We hit this in some tests, but it's easy enough if you either remove the test user from the users collection or supply a JWT with an invalid user ID/sub reference.

I can make this succeed if I change jwt.ts to:

```
-    const result = await entityService.get(id, omit(params, 'provider'));
+    try {
+      const result = await entityService.get(id, omit(params, 'provider'));
+    } catch(err) {
+      throw new NotAuthenticated(`Could not find entity`);
+    }
```

but I'm not advocating this as a specific approach.  The client is clearly not looking for a 404 to come back, but that's what gets delivered back to the feathers authentication client.

Node 12.14
Feathers 4.4.3 (server and client)


Hi, I'm new to Feathersjs and I'm trying to implement authentication with strategies like (local / jwt) in middleware  and here is my codes in `src/middleware/index.js`: 
```js
const { authenticate } = require('@feathersjs/express');

module.exports = app => {
	app.use('/login', (req, res) => {
		res.render('login', {title: "Login"});
	});	
	app.use('/panel',authenticate('local'), (req, res) => {
		res.render('panel', {title: "panel"});
	});
};
```
### Actual behavior
I get HTTP 401 error code, Is there something that I'm missing here ? :sweat_smile: 

### System configuration
**NodeJS version**: v10.16.0

**Operating System**: windows 7 (64bit)

**Browser Version**: Chrome V79
### mongodb document like this:
<img width="370" alt="截屏2019-12-30下午2 02 51" src="https://user-images.githubusercontent.com/24524783/71569885-12e83b00-2b0d-11ea-9ea2-e7e76f160565.png">

### i use http request :
```
 http://localhost:3030/api/pets?owner._id=5e0992c07caedc672aa4e897
 ```
### then i got :
```javascript
{
    "total": 0,
    "limit": 10,
    "skip": 0,
    "data": []
}
```
### however i use :
```
 http://localhost:3030/api/pets?owner.nickname=18855559357
 ```
### then i got correct response:
```javascript
{
    "total": 1,
    "limit": 10,
    "skip": 0,
    "data": [
        {
            "_id": "5e05d8954005d8d1b11ca53e",
            "sicks": [],
            "images": [
                "******"
            ],
            .................
            "price": "",
            "owner": {
                "nickname": "18855559357",
                "_id": "5e0992c07caedc672aa4e897",
                "unionid": "testunionid"
            },
            "createdAt": "2019-12-27T10:10:29.229Z",
            "updatedAt": "2019-12-27T10:10:29.229Z",
            "__v": 0
        }
    ]
}
```
# why can't use owner._id to query? i use mongoose
### The problem / idea

I am working on front-end a lot and what I find really convenient is that they're component-based structures. This is common in Angular, React and Vue.

E.g. a component 'user' has the following structure
```
user/
   user.component.html
   user.component.scss
   user.component.test.ts
   user.component.ts
   user.translations.ts
```

What is so convenient about this? Well If I want to reuse this in another project, i can just move the 'user' component because it has everything it needs inside that folder

### How does feathers v4 currently look
Example:
```
src/
   hooks/
     isAdmin.ts
   models/
     user.model.ts
   services/
      user/
         user.hooks.ts
         user.service.ts
test/
   services/
     user.test.js
```

My proposed solution

```
src/
   services/
      user/
         hooks/
            isAdmin.ts
         user.hooks.ts
         user.service.ts
         user.test.ts
         user.model.ts

```

### Why / potential use cases

- Well if a new developer asks, where do I find x for user?
Currently you can answer it depending on what 'x' is, if it's test it's a different place, if it's hooks it's a different place.
With the new proposed architecture, it does not matter what 'x' is, you can always point to the user service to find everything regarding the user
- If a developer checks out your project, and find a really cool service named 'somecoolservice'. With the new proposed architecture you can say, yeah sure go ahead and just copy 'somecoolservice' into your project


### Potential downfalls

- Where would you place a hook that is useful for multiple services ? Do you keep 'isAdmin' in user service and require it from there in other services, or create a shared / lib folder? This can be hard to answer
- Where would integration tests and tests that not only apply to one service be placed? This can be hard to answer

Currently in feathers if an endpoint is presented with bad data that results in an unhandled exception, the console will show the error, but the endpoint will 'hang'. Is there a way to respond to the endpoint with a general error default instead of hanging, and without creating an individual error response for every situation?

Edit: 
@daffl 
You mentioned in a normal application setup this will be handled, can you elaborate what you mean "normal"? My feathers 3.3.1 application has been built entirely from the command line generation tools. 

You asked for a code representation but any code will recreate this issue...just create an unhandled error and feathers will "hang". 

For example, the following will result in just hanging if presented with an id that does not exist in the database (ignore any minor errors, i have stripped site code for this example that otherwise works if the rejection is handled)

get-database-by-id.js
```
const errors = require('@feathersjs/errors');

module.exports = function (options = {}) {
  return async context => {
  	let promise = new Promise((resolve,reject) => { 
  					context.app.service('database').find({
				query: {"id":context.data.id}
				}).then(result => {
					  
					  resolve(result.data[0].data)
                                           // console: error: Unhandled Rejection at: Promise 
                                           //browser:  hangs

			});
  	});
  	let result = await promise;
  	if (result) {
  		return context;
  	}
    
  };
};
```


database.service.js

```
// Initializes the `database` service on path `/database`
const createService = require('feathers-mongodb');
const hooks = require('./database.hooks');

module.exports = function (app) {
  const paginate = app.get('paginate');
  const mongoClient = app.get('mongoClient');
  const options = { 
    paginate,
    id: '_id' 
  };

  // Initialize our service with any options it requires
  app.use('/database', createService(options), function(req, res, next) {
    var resData = res.data
    res.data = {
      data:resData,
      status:200
    }
    next();
  });

  // Get our initialized service so that we can register hooks and filters
  const service = app.service('database');

  mongoClient.then(db => {
    service.Model = db.collection('database');
  });

  service.hooks(hooks);
};

```

database.hooks.js

```
const { authenticate } = require('@feathersjs/authentication').hooks;

const getDatabaseById = require('../../hooks/get-database-by-id');

const errors = require('@feathersjs/errors');

const errorHandler = ctx => {
  if (ctx.error) {
    const error = ctx.error;
    if (!error.code) {
      const newError = new errors.GeneralError("server error");
      ctx.error = newError;
      return ctx;
    }
    if (error.code === 404 || process.env.NODE_ENV === "production") {
      error.stack = null;
    }
    return ctx;
  }
};


module.exports = {
  before: {
    all: [ authenticate('jwt')],
    find: [],
    get: [],
    create: [
      getDatabaseById(),
    ],
    update: [],
    patch: [],
    remove: []
  },

  after: {
    all: [],
    find: [],
    get: [],
    create: [],
    update: [],
    patch: [],
    remove: []
  },

  error: {
    all: [errorHandler],
    find: [],
    get: [],
    create: [],
    update: [],
    patch: [],
    remove: []
  }
};
```
### Steps to reproduce

I've created an reproducible repo here:
https://github.com/Thammachart/feathersjs-204-issue

- Created the feathersjs Project using `feathers g app`, with `@feathersjs/cli` version 4.2.4
  - Choices were Javascript, Yarn, REST API only, Mocha + Assert, No Authentication
- Created Service, in the example repo, `svc1`
  - Choices were A custom service, `svc1`, `/svc1`
- Created service's methods for multiple cases, see the [link](https://github.com/Thammachart/feathersjs-204-issue/blob/3d0d5b15b34bd50024994d358de3ae34972734db/src/services/svc1/svc1.class.js#L2)
- Run `yarn start`
- Using `curl localhost:3030/svc1` with multiple flags like `-XGET`, `-XPOST`, `-XPATCH`, `-XDELETE` to test each case in each service's method

### Expected behavior
- Any methods that return `undefined` or `null` should response with 204 No Content HTTP Status Code

### Actual behavior
- methods returning `undefined` implicitly or explicitly, response with the 404 Not Found HTTP Status Code, even though the method exists and got to run properly (`console.log` in methods run properly)
- methods returning `null` work as expected
- *Interesting Note 1*: methods returning boolean `false` response with 204 No Content HTTP Status Code
- *Interesting Note 2*: methods returning boolean `true` response with 2xx HTTP Status Code with content of literal `true`

I don't know if there is underlying convention behind this. I've checked the Docs, FAQ to no avail.


### System configuration

**Module versions** (especially the part that's not working): 
- `@feathersjs/feathers` ^4.3.11
- `@feathersjs/express` ^4.3.11
- The rest can be seen at this [link](https://github.com/Thammachart/feathersjs-204-issue/blob/3d0d5b15b34bd50024994d358de3ae34972734db/package.json#L32)

**NodeJS version**: 12.13.1 from `nvm`

**Operating System**: Arch Linux, Kernel 5.4.3-arch1-1

**Browser Version**: `curl` 7.67.0
Hi,

I would like to use `feathers-rest-client` and send data through rest with attachments (FormData), together with the rest of the body. The application is setup and configure with both `rest` and `socket` client. If there are data with attachments, it will use `rest` client to communicate with server, otherwise, use `socket` client.

I have configured `feathers-rest-client` to pass data to server. 
`feathers-rest-client` is configured something like this.

```
const app = feathers();
const restClient = rest('http://localhost:3030')
app.configure(restClient.fetch(window.fetch));
```

There's a form for user to fill up some fields, and add some attachment. After which I hope to call the `test` endpoint using `feathers-rest-client` as such..

```
fData = {
 field1: 'test',
 field2: 'test2',
 file: [attachments] // this is a FormData
}

// Also tried
FormData fData = new FormData();
fData('field1', 'test');
fData('field2', 'test2');
fData('file', attachments);
```
```
restClient.service('test').create(fData);
```

Server has something like this.

```
app.use('/test', multer.array('file'), setReqFileToFeatherFile(), createService());
```

However, no matter how I change it, I am not able to get and extract the data at the server side. Meaning to say, I think the data is set wrongly, and hence, multer does not know how to extract/decode from the correct `field` to get the `attachments` and so on.

But If I were to use `POSTMAN` to send a request to my endpoint, server is able to extract/decode the data correctly. Meaning to say, the file are passed through `multer` to extract the attachments (available in `feathers.params.files`), and the body are able to retrieve from `context.data`.

![image](https://user-images.githubusercontent.com/37484538/70923836-86953d00-2063-11ea-9889-82d4da1a85c1.png)

Any idea what am I doing wrong?

Thanks.
I am running a feathers v4 app converted from v3 and am trying to make everything typed.

This is perfectly typed
![copyshot](https://user-images.githubusercontent.com/48755937/70871429-7caa0600-1f9f-11ea-9f31-223bd03b15a2.png)

But when I do it this way, it's not typed at all.

![copyshot](https://user-images.githubusercontent.com/48755937/70871443-98ada780-1f9f-11ea-84fc-747e3b84c9fc.png)

I did my research, could not find it in the docs, nor in known examples

Two questions:
- How can I make it typed?
- Is there an example that is fully typed?


 
I'm sorry if I make too many issues on all the V4 stuff, but i stumble upon many things I think other users might also stumble upon.

### The problem

So I want my hooks to be typed. But I do not know how. 
First thing I do is ask:
How does the documentation or examples do it?
I looked into:
- the docs example: https://docs.feathersjs.com/guides/basics/hooks.html#quick-example
- Feathersjs v4 chat example: https://github.com/feathersjs/feathers-chat-ts

Both of them don't have.

So I digged deeper and I looked into the source code, finding an example. But unfortunately it was using `any` so I could not really find a good example on what these things should be.
![copyshot](https://user-images.githubusercontent.com/48755937/70870072-6300c280-1f8f-11ea-98a8-ee3c666f9a2d.png)

### Possible solution
One thing I could do is creating an interface in the `models/serviceName.model.ts` file in the `models` folder. Like the screenshot below
![copyshot](https://user-images.githubusercontent.com/48755937/70870200-85471000-1f90-11ea-9b60-1674bf2afd51.png)
And use it like this
![copyshot](https://user-images.githubusercontent.com/48755937/70870243-15855500-1f91-11ea-8a6c-b51ca9b6a772.png)

### Request
But I do not know what the best practice is for this. I like feathers to provide me with an example and best practices so we all have a standard to follow.

### The problem

The feathers v4 does not come with support for typescript sourcemaps or anything to refer to the original files. So by mistake I have edited a file in `lib/` because the error logs refer to the transpiled versions of the code. As seen in the screenshot below

![image](https://user-images.githubusercontent.com/48755937/70866893-7439d700-1f6f-11ea-8842-949cd2bc260c.png)

### Why a problem

My normal workflow is to click on the file of the error log, edit the line, and run it again. However this makes me by mistake edit a transpiled file which will be overwritten by re-transpiling the code.

The actual error is in the typescript file:
![copyshot](https://user-images.githubusercontent.com/48755937/70866901-874ca700-1f6f-11ea-8559-7a34ab364bc4.png)

### The solution

There is a solution to sourcemaps for nodejs.

which can be found here and works in my case:
https://stackoverflow.com/questions/42088007/is-there-source-map-support-for-typescript-in-node-nodemon
![copyshot](https://user-images.githubusercontent.com/48755937/70867020-db0bc000-1f70-11ea-8d91-b0cad876ac64.png)


Though this is fixed for me, I would like to share my knowledge so other people having the same problems will have a fix