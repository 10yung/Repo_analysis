Hello,

   1, Created a build directory
   2, Set CMake SOURCE code path - /flann-master
   3, Set CMake Build binaries path - /flann-master/build
   4, Cmake .. is run error following 

ERROR:
1,Could NOT find HDF5 (missing: HDF5_LIBRARIES HDF5_INCLUDE_DIRS) (found version "")
2.Could NOT find GTest (missing: GTEST_LIBRARY GTEST_INCLUDE_DIR
GTEST_MAIN_LIBRARY)
3,CMake Error at src/matlab/CMakeLists.txt:71 (message):
  Cannot find MATLAB or Octave instalation.  Make sure that the 'bin'
  directory from the MATLAB instalation or that mkoctfile is in PATH

hdf5 library not found, not compiling flann_example.cpp
-- Could NOT find LATEX (missing: LATEX_COMPILER) 

while running the make command to compile point cloud program, this error shows `CMakeFiles/pcd_read.dir/pcd_read.cpp.o: In function `flann::serialization::SaveArchive::initBlock()':
pcd_read.cpp:(.text._ZN5flann13serialization11SaveArchive9initBlockEv[_ZN5flann13serialization11SaveArchive9initBlockEv]+0xc2): undefined reference to `LZ4_resetStreamHC'
CMakeFiles/pcd_read.dir/pcd_read.cpp.o: In function `flann::serialization::SaveArchive::flushBlock()':
pcd_read.cpp:(.text._ZN5flann13serialization11SaveArchive10flushBlockEv[_ZN5flann13serialization11SaveArchive10flushBlockEv]+0xcb): undefined reference to `LZ4_compress_HC_continue'
pcd_read.cpp:(.text._ZN5flann13serialization11SaveArchive10flushBlockEv[_ZN5flann13serialization11SaveArchive10flushBlockEv]+0x19e): undefined reference to `LZ4_compress_HC_continue'
CMakeFiles/pcd_read.dir/pcd_read.cpp.o: In function `flann::serialization::LoadArchive::decompressAndLoadV10(_IO_FILE*)':
pcd_read.cpp:(.text._ZN5flann13serialization11LoadArchive20decompressAndLoadV10EP8_IO_FILE[_ZN5flann13serialization11LoadArchive20decompressAndLoadV10EP8_IO_FILE]+0x255): undefined reference to `LZ4_decompress_safe'
CMakeFiles/pcd_read.dir/pcd_read.cpp.o: In function `flann::serialization::LoadArchive::initBlock(_IO_FILE*)':
pcd_read.cpp:(.text._ZN5flann13serialization11LoadArchive9initBlockEP8_IO_FILE[_ZN5flann13serialization11LoadArchive9initBlockEP8_IO_FILE]+0x21b): undefined reference to `LZ4_setStreamDecode'
CMakeFiles/pcd_read.dir/pcd_read.cpp.o: In function `flann::serialization::LoadArchive::loadBlock(char*, unsigned long, _IO_FILE*)':
pcd_read.cpp:(.text._ZN5flann13serialization11LoadArchive9loadBlockEPcmP8_IO_FILE[_ZN5flann13serialization11LoadArchive9loadBlockEPcmP8_IO_FILE]+0xe4): undefined reference to `LZ4_decompress_safe_continue'
CMakeFiles/pcd_read.dir/pcd_read.cpp.o: In function `pcl::VFHEstimation<pcl::PointXYZ, pcl::Normal, pcl::VFHSignature308>::computePointSPFHSignature(Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, pcl::PointCloud<pcl::PointXYZ> const&, pcl::PointCloud<pcl::Normal> const&, std::vector<int, std::allocator<int> > const&)':
pcd_read.cpp:(.text._ZN3pcl13VFHEstimationINS_8PointXYZENS_6NormalENS_15VFHSignature308EE25computePointSPFHSignatureERKN5Eigen6MatrixIfLi4ELi1ELi0ELi4ELi1EEES9_RKNS_10PointCloudIS1_EERKNSA_IS2_EERKSt6vectorIiSaIiEE[_ZN3pcl13VFHEstimationINS_8PointXYZENS_6NormalENS_15VFHSignature308EE25computePointSPFHSignatureERKN5Eigen6MatrixIfLi4ELi1ELi0ELi4ELi1EEES9_RKNS_10PointCloudIS1_EERKNSA_IS2_EERKSt6vectorIiSaIiEE]+0x385): undefined reference to `pcl::computePairFeatures(Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, Eigen::Matrix<float, 4, 1, 0, 4, 1> const&, float&, float&, float&, float&)'
collect2: error: ld returned 1 exit status
CMakeFiles/pcd_read.dir/build.make:329: recipe for target 'pcd_read' failed
make[2]: *** [pcd_read] Error 1
CMakeFiles/Makefile2:67: recipe for target 'CMakeFiles/pcd_read.dir/all' failed
make[1]: *** [CMakeFiles/pcd_read.dir/all] Error 2
Makefile:83: recipe for target 'all' failed
make: *** [all] Error 2`

OS: Ubuntu 18.04
PCL: latest
Flann: latest
I fixed #218.
Hi. The webpage with the dataset cloud.h5 is down. Please, could you provide a link to download the test datasets?
 I am actually setting up the Point Cloud Library (PCL). However, it requires a few other dependency libraries, and one among them was FLANN.

So, I wanted to build the FLANN from sources:

0. Downloaded the souces from the Git link.
1. Created a build directory
2. Set CMake SOURCE code path - C:/PCL/flann-master
3. Set CMake Build binaries path - C:/PCL/flann-master/build
4. Checked the Grouped and Advanced options
5. Configure

```
CMake Warning (dev) at CMakeLists.txt:17 (if):
  Policy CMP0054 is not set: Only interpret if() arguments as variables or
  keywords when unquoted.  Run "cmake --help-policy CMP0054" for policy
  details.  Use the cmake_policy command to set the policy and suppress this
  warning.

  Quoted variables like "MSVC" will no longer be dereferenced when the policy
  is set to NEW.  Since the policy is not set the OLD behavior will be used.
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at CMakeLists.txt:21 (if):
  Policy CMP0054 is not set: Only interpret if() arguments as variables or
  keywords when unquoted.  Run "cmake --help-policy CMP0054" for policy
  details.  Use the cmake_policy command to set the policy and suppress this
  warning.

  Quoted variables like "MSVC" will no longer be dereferenced when the policy
  is set to NEW.  Since the policy is not set the OLD behavior will be used.
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Error at C:/Program Files/CMake/share/cmake-3.13/Modules/FindPackageHandleStandardArgs.cmake:137 (message):
  Could NOT find PkgConfig (missing: PKG_CONFIG_EXECUTABLE)
Call Stack (most recent call first):
  C:/Program Files/CMake/share/cmake-3.13/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE)
  C:/Program Files/CMake/share/cmake-3.13/Modules/FindPkgConfig.cmake:39 (find_package_handle_standard_args)
  CMakeLists.txt:149 (find_package)


```

The import takeaway is ` Could NOT find PkgConfig (missing: PKG_CONFIG_EXECUTABLE)`
Using PkgConfig with CMake is not a truly cross-platform solution, as Windows does not come with the pkg-config utility installed.

So any solution for this issue ? 


In checking the type of the distribution of q, the exception message should call qpts.type instead of pts.dtype
This is a reorganized version of #425. 

The goal is to build the FLANN library and Python bindings with scikit-build. This will make it easier for FLANN to be installed and deployed in Python environments. The current version of `pyflann` on pypi and in opencv is old, and it could use an update. Moving to scikit-build will help make this process easier. 

Because this is a fairly major code restructure, I've bumped the version from `1.9.0` to `1.10.0`. 

The main changes are: 

* Move pyflann from `./src/python/pyflann` to `.`. 
* Add a `setup.py` that calls CMake (via skbuild) instead of generating a setup.py dynamically
* Remove `BUILD_PYTHON_BINDINGS` from CMake, as scikit-build now handles the Python bindings. 

I also made a minor change to `examples/flann_example.c` to fix a compiler warning.

These change mean that someone can now simply clone flann and run `python setup.py install` and it will work. Workflows that use CMake to build the C++ libs or the matlab / ruby bindings should not be affected. 

----

EDIT:

This also includes a fix for #427
Hi
my flann verson is 1.8.4.Dynamic libraries can be normal compilation.But, to create a new project, you will be prompted to find hed file "flann/flann.h" No such file or directory.Vs 2015 configuration files and library directory contains are normal,Who can help me? Thanks
![image](https://user-images.githubusercontent.com/10733653/66268260-397c3a00-e86e-11e9-9b9f-9dc9cf6e52b3.png)

The misleading indented statement can be executed regardless of the if condition
FLANN is available as a port in [vcpkg](https://github.com/Microsoft/vcpkg), a C++ library manager that simplifies installation for FLANN and other project dependencies. Documenting the install process here will help users get started by providing a single set of commands to build FLANN, ready to be included in their projects. 

We also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.

I'm a maintainer for vcpkg, and [here is what the port script looks like](https://github.com/microsoft/vcpkg/blob/master/ports/flann/portfile.cmake). We try to keep the library maintained as close as possible to the original library.