Changes build configurations across the range to use Swift 4.1
Here's a fix for the `.missingKeyBecomesNil` Option catching errors from decode calls below.

For instance:

```Swift
     struct A: JSONDecodable {
            let b: B?
            
            init(json: JSON) throws {
                b = try json.decode(at: "b", alongPath: [.missingKeyBecomesNil])
            }
            
        }
        
        struct B: JSONDecodable {
            let string: String
            
            init(json: JSON) throws {
                string = try json.decode(at: "string")
            }
        }
```

If I were to call decode with the following invalid json: 

```json
{
    "b": {
    
    }
}
```

The previous implementation wouldn't throw an error but return `A(b: nil)`

If you still want the previous functionality you can use the parameter `applyRecursively`.

```Swift
 b = try json.decode(at: "b", alongPath: [.missingKeyBecomesNil]) // Will throw an error
 b = try json.decode(at: "b", alongPath: [.missingKeyBecomesNil], applyRecursively: true) // nil
```
I've made some changes, so that Freddy will build and work on Linux.
Tests can be run with `swift test` in the Freddy directory.

**What appears to work:**
Freddy (disclaimer: for my use) and 107 of its tests.

**What doesn't work:**
Tests that rely on [Bundle(for:)](https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSBundle.swift#L56), because it has yet to be implemented in Foundation. These include some of the JSONSubscriptingTests, JSONTests and all of the JSONSerializingTests. Note that the tests are (not necessarily) failing. They just won't run at the moment. For now, I've commented out these tests and added some conditional compilation statements to prevent the code from being reached on Linux. Of the 107 tests that run properly, only a single fails: 

`/project/Tests/FreddyTests/JSONParserTests.swift:333: error: JSONParserTests.testOverflowingIntResultsInStringWithNSJSONSerializationParser : XCTAssertEqual failed: ("nil") is not equal to ("Optional(1.8446744073709552e+19)") - as double`

I have yet to look for the culprit.