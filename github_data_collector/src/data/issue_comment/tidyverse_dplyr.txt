Hi, 

I was trying out some of the `rowwise` stuff in the the dev version when I hit the following error message, parts of which I thought could be a bit a bit clearer. 

``` r
library(dplyr, warn.conflicts = FALSE)

parameters <- tibble::tribble(
  ~mu, ~sd,
    1,   2,
   10,  20,
)

parameters %>%
  rowwise() %>%
  mutate(data = rnorm(10, mu, sd))
#> Error: `mutate()` argument `data` must be recyclable.
#> ℹ `data` is rnorm(10, mu, sd)
#> x `x` can't be recycled to size 1.
#> x It must be size 1 or 1, not 10.
```

<sup>Created on 2020-01-19 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

When I was reading the error message: 

- I was very confused about what `x` is as there is no `x` anywhere in the call.
- I found the 1 or 1 clause quite odd and had to reread it a couple of times to firstly make sure that I had not misread and then work out why it was like that. 

All the best!


We need a vignette that broadly explains how grouping works, and shows how grouping and the various verbs interact.

* `use_vignette("grouping.Rmd")`
* Copy in existing content from https://dplyr.tidyverse.org/articles/dplyr.html#grouped-operations (which scheduled for removal)
* Ensure each one table verb has a section with a small example that demonstrates how grouping interacts with its operation
    * un-`select()` grouping vars
    * `arrange()` not [grouped by default](https://github.com/tidyverse/dplyr/issues/3782)
    * show example of filter to remove entire groups, e.g. `filter(df, n() == 1)`
* Should try and work with one dataset (`starwars`?) as much as possible.
* How to access data about the "current" group with `cur_group()` and friends
* Briefly show the underlying data structure accessed with `group_data()`

This is a lot to do in a day, so if you don't get it all done, please submit a PR anyway, as your work will make it much easier for us to finish off.


* Fix any small mistakes directly

* For any larger sections that don't make sense or leave you with questions, add a comment like `<-- {INITIALS} {description of problem} -->`
The introduction to dplyr is getting a little long in the tooth and needs a substantial refresh to make sure it covers the verbs included in dplyr 1.0.0.

* [ ] Replace `sample_n()`/`sample_frac()` with `slice()` and related helpers
* [ ] Add `relocate()`
* [ ] Provide over arching organisation around row ops, column ops, and `summarise()`
* [ ] Remove the "Grouped operations" section
* [ ] Introduce the pipe much earlier
* [ ] Remove data sources section (will be bulleted list in README)
* [ ] Remove comparisons section
Should go in its own subheading for scanability, and link to dbplyr, dtplyr (and data.table), and cubelyr
Maybe there's nothing to be done here, but I think `slice()` shouldn't actually provide data masking, since it's about selecting rows based on their positions. (It still needs to provide `n()` though)
Proof of concept implementation — I don't think we can make this much simpler without introducing a new dplyr generic that allows you to modify columns and change their order at the same time. I think that's ok though, since `group_by()` (which sometime called `mutate()`) has something of the same flavour.

Will need some refactoring (probably pull out and export `relocate_cols()`) to make this easier for other backends to use.

Fixes #2047.
This is an extremely quick and hacky implementation of `morph()`, as described in #3721.
* New `cur_data()` and `cur_group_rows()
* Connect contextual functions to data.table pronouns
* Access `cur_group_id()` and `n()` through mask instead of context

Fixes #4764
Since `across()` doesn't help with this problem. 

Maybe `select()` and `rename()` could gain a `.transform` argument that would be applied to the variable names?