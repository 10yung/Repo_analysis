When compiling ncspot from git, I have this linker error at the end:

```
...
pe" "-lxcb-xfixes" "-lncursesw" "-ltinfo" "-lutil" "-lutil" "-ldl" "-lrt" "-lpthread" "-lgcc_s" "-lc" "-lm" "-lrt" "-lpthread" "-lutil" "-lutil"
  = note: /usr/lib64/gcc/x86_64-suse-linux/9/../../../../x86_64-suse-linux/bin/ld: /home/aplanas/ncspot/target/release/deps/libncurses-9568030c4c279be4.rlib(ncurses-9568030c4c279be4.ncurses.6tisobd3-cgu.4.rcgu.o): in function `ncurses::constants::COLORS':
          ncurses.6tisobd3-cgu.4:(.text._ZN7ncurses9constants6COLORS17h28f96c61a3832871E+0x3): undefined reference to `COLORS'
          collect2: error: ld returned 1 exit status
```

I have openSUSE Tumbleweed:

```
> rpm -qa | grep ncurses
ncurses-devel-6.1-24.1.x86_64
ncurses-utils-6.1-24.1.x86_64
libncurses6-6.1-24.1.x86_64

> rpm -qa | grep terminfo
terminfo-screen-6.1-24.1.x86_64
terminfo-6.1-24.1.x86_64
terminfo-base-6.1-24.1.x86_64
```


Hi, I'm masahiko-ofgp. 

I tried using the example of ncurses-rs. However, since printw was displayed as being deprecated, I changed printw to addstr. I'm sorry if it was unnecessary.

my environment:
-  Manjaro Linux
-   Rust edition 2018
Using the FFI is `unsafe`, but simply putting `unsafe { }` around the call is not enough to get rid of the problem. It's unsafe for a reason. It's unsafe because it can do horrible things and cause UB.

You need to adjust the library so that only functions that _cannot possibly_ cause UB, no matter what, are wrapped in an `unsafe` block and marked as safe. All other functions must be left as `unsafe` functions, hopefully with explanations in the docs of what to do to avoid problems.

example:
I have run [ex_4.rs](https://github.com/jeaye/ncurses-rs/blob/master/examples/ex_4.rs) sample with valgrind tool

==27342== LEAK SUMMARY:
==27342==    definitely lost: 0 bytes in 0 blocks
==27342==    indirectly lost: 0 bytes in 0 blocks
==27342==      possibly lost: 0 bytes in 0 blocks
==27342==    still reachable: 499,249 bytes in 238 blocks
==27342==         suppressed: 0 bytes in 0 blocks
==27342== 
==27342== For counts of detected and suppressed errors, rerun with: -v
==27342== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Cannot crosscompile  ncurses-rs, because it compiles test program for armv7 and tries to execute it on x86_64. How to disable that?

```
[vlisivka@vlisivka ncurses-rs]$ TARGET_CC=/opt/scel/17.2/sysroots/x86_64-scelsdk-linux/usr/bin/arm-scel-linux-gnueabi/arm-scel-linux-gnueabi-gcc TARGET_CFLAGS='--sysroot=/opt/scel/17.2/sysroots/armv7ahf-neon-scel-linux-gnueabi -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=hard -marm' RUST_BACKTRACE=1 cargo build --example ex_1 --target armv7-unknown-linux-gnueabihf 
   Compiling ncurses v5.99.0 (/home/vlisivka/tmp/rust-ui/ncurses-rs)
error: failed to run custom build command for `ncurses v5.99.0 (/home/vlisivka/tmp/rust-ui/ncurses-rs)`
process didn't exit successfully: `/home/vlisivka/tmp/rust-ui/ncurses-rs/target/debug/build/ncurses-b8678d1a3a7c29b3/build-script-build` (exit code: 101)
--- stdout
cargo:rerun-if-env-changed=PKG_CONFIG_PATH
cargo:rustc-link-lib=ncurses
OPT_LEVEL = Some("0")
TARGET = Some("armv7-unknown-linux-gnueabihf")
HOST = Some("x86_64-unknown-linux-gnu")
CC_armv7-unknown-linux-gnueabihf = None
CC_armv7_unknown_linux_gnueabihf = None
TARGET_CC = Some("/opt/scel/17.2/sysroots/x86_64-scelsdk-linux/usr/bin/arm-scel-linux-gnueabi/arm-scel-linux-gnueabi-gcc")
CFLAGS_armv7-unknown-linux-gnueabihf = None
CFLAGS_armv7_unknown_linux_gnueabihf = None
TARGET_CFLAGS = Some("--sysroot=/opt/scel/17.2/sysroots/armv7ahf-neon-scel-linux-gnueabi -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=hard -marm")
CRATE_CC_NO_DEFAULTS = None
DEBUG = Some("true")
CARGO_CFG_TARGET_FEATURE = None

--- stderr
thread 'main' panicked at '/home/vlisivka/tmp/rust-ui/ncurses-rs/target/armv7-unknown-linux-gnueabihf/debug/build/ncurses-3eeeed0374790b74/out/chtype_size failed: Os { code: 8, kind: Other, message: "Exec format error" }', src/libcore/result.rs:997:5
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39
   1: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:70
   2: std::panicking::default_hook::{{closure}}
             at src/libstd/sys_common/backtrace.rs:58
             at src/libstd/panicking.rs:200
   3: std::panicking::default_hook
             at src/libstd/panicking.rs:215
   4: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:478
   5: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:385
   6: rust_begin_unwind
             at src/libstd/panicking.rs:312
   7: core::panicking::panic_fmt
             at src/libcore/panicking.rs:85
   8: core::result::unwrap_failed
             at /rustc/fc50f328b0353b285421b8ff5d4100966387a997/src/libcore/macros.rs:17
   9: <core::result::Result<T, E>>::expect
             at /rustc/fc50f328b0353b285421b8ff5d4100966387a997/src/libcore/result.rs:825
  10: build_script_build::check_chtype_size
             at ./build.rs:106
  11: build_script_build::main
             at ./build.rs:59
  12: std::rt::lang_start::{{closure}}
             at /rustc/fc50f328b0353b285421b8ff5d4100966387a997/src/libstd/rt.rs:64
  13: std::panicking::try::do_call
             at src/libstd/rt.rs:49
             at src/libstd/panicking.rs:297
  14: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:87
  15: std::rt::lang_start_internal
             at src/libstd/panicking.rs:276
             at src/libstd/panic.rs:388
             at src/libstd/rt.rs:48
  16: std::rt::lang_start
             at /rustc/fc50f328b0353b285421b8ff5d4100966387a997/src/libstd/rt.rs:64
  17: main
  18: __libc_start_main
             at ../csu/libc-start.c:308
  19: _start
```

> I tried to get it to work with Rust stable for days and had to find out that it's unfortunately not possible right now.
> 
> All menu library functions are behind a feature gate meaning that ncurses-rs as it is right now still compiles with Rust stable and won't break for anyone. It's like an opt-in extra feature for those using rust nightly.
> 
> But if you really don't want any unstable code in ncurses-rs you may also wait until the CString reform lands in Rust stable.

_Originally posted by @tsurai in https://github.com/jeaye/ncurses-rs/pull/87#issuecomment-114729666_

Being new to Rust, I can't be sure, but it looks like CString is stable now. Can we remove the nightly requirement?
Problems I encountered so far with this lib.
Msys2 ncurses is a bit different.
It needs ```#include<ncurses/ncurses.h>```, or ```#include<ncursesw/ncurses.h>```
And the deltion of the test binary doesn't work, because ```.exe``` is missing.
```rust
let bin = format!("{}", Path::new(&out_dir).join("chtype_size").display());
```
needs to be:
```rust
let bin = format!("{}", Path::new(&out_dir).join("chtype_size.exe").display());
```
Currently on macOS HighSierra Version 10.13.6.

Trying to get example 7 to run properly, but I'm receiving this message when I try:
```
This example requires wide character support.
```

Which tells me that I probably haven't set up `ncursesw` properly.

Here's what I've done (as per the readme):
1. `brew install ncurses`
2. `brew link --force ncurses`
3. `cargo run --example ex_7`

What am I missing here? Are there additional steps I should be taking to get this to work?
Trying to install following these instructions [https://stackoverflow.com/a/27335584/3067688](https://stackoverflow.com/a/27335584/3067688)

Receiving the following build error:

   ```
> cargo build
   Compiling pkg-config v0.3.11
   Compiling rand_core v0.2.1
   Compiling libc v0.2.42
   Compiling gcc v0.3.54
   Compiling rand v0.5.4
   Compiling ncurses v5.93.0
   error[E0308]: mismatched types
      --> /home/samuel/.cargo/registry/src/github.com-1ecc6299db9ec823/ncurses-5.93.0/build.rs:80:12
         |
      80 |     if let Some(lib) = ncurses_lib {
         |            ^^^^^^ expected reference, found enum `std::option::Option`
         |
        = note: expected type `&std::option::Option<pkg_config::Library>` found type `std::option::Option<_>`

    error: aborting due to previous error
    error: Could not compile `ncurses`.
    warning: build failed, waiting for other jobs to finish...
    error: build failed
```

Any ideas?
Hi Jeaye

I recently ran into a segmentation fault when displaying text from a file with ncurses.
After playing around a bit I found out that percentage signs in the strings to be displayed caused this behaviour.
Now I'm wondering if this is a feature of which I haven't heard before, or if it is a bug.
If it's a feature, the could you please point me to some doc I can study?

I found the following funny output:
- When my string contains %p, then something that looks like an address is printed
- When my string contains %s, the whole string seems to be repeated where the %s is
- When my string contains twice a %s, I get the segmentation fault (maybe some recursion?)

Here's an example to reproduce (uncommenting the 'killer' line leads to segmenation fault):

    extern crate ncurses;

    fn main() {
        ncurses::initscr();
        ncurses::keypad(ncurses::stdscr(), true);
        ncurses::clear();

        let texts = vec![
            "Hello, World!",
            "A line with a %p percentage sign.",
            "Another funny %s example.",
            //"The killer %s %s maybe a recursion?",
            "Bye bye"
        ];

        let mut y = 0;
        for t in texts {
            ncurses::mvprintw(y, 0, &t);
            y += 1;
        }
    
        ncurses::getch();
        ncurses::endwin();
    }

This produces the following output:
```
    Hello, World!
    A line with a 0x60b13d5ae080 percentage sign.
    Another funny Another funny %s example. example.
    Bye bye
```
(I run all that on Fedora Linux)

Kind regards
Peter