Are there any plans to release a SC2 Linux version for 4.11?

The DisplayType for units shooting from highground / fog of war return `DisplayType.Visible` instead of `DisplayType.Snapshot`, when you have no high ground vision to the enemy unit.

It does however seem to work property for invisible units (returning `DisplayType.Hidden` instead of `DisplayType.Visible`).

I'm not sure how long this has been broken, but it is currently broken on the latest SC2 Windows client v4.10.4 and Linux client v4.10.

References:
https://github.com/Blizzard/s2client-proto/blob/1c715e75c953e8819546c994269cb4b0976415bd/s2clientprotocol/raw.proto#L101

https://github.com/Blizzard/s2client-proto/blob/1c715e75c953e8819546c994269cb4b0976415bd/s2clientprotocol/raw.proto#L61-L63
Dear Blizzard,

Would you be willing to open up COD:MW back-end with a client for ML research?

Respectfully,
mono
Hi,
would be cool if the ai-arena project would get some love too ;)
HI, we see in the nature paper that there are 971k replays for DeepMind to do surprised training. Can these replays be downloaded now? If not, when can these be ready? Thanks.

Replays collected from game core 4.8.2-4.8.6 are used in the DeepMind nature paper, while the game cores have not been released so far.
I want to disable the debug text messages (eg "KillUnitBtTag 46") when replaying SC2. Is it possible?
![Screenshot_2019-10-09_23-24-58](https://user-images.githubusercontent.com/40682795/66495587-0f37b000-eaec-11e9-86d7-d1ce9cffd3aa.png)

The difference of IDs between sequentially created units, regardless of which player created them, is 262144 (for probes) plus/minus 2. This can be used to determine how many units your opponent has created since you last created a unit, which can be used to detect ling rushes and among other things.

Proposed fix: have the protocol make a mapping between real unit id and a random tag, then interchange them where appropriate.

See discussion on the discord regarding this.
Hi. I have been unable to get a successful response when using download_replays.py. I set up a developer account with Blizzard and have triple-checked that I am using the correct key, secret, and version. I have not changed the code in the .py file at all. I was wondering if there is anything obvious I might be missing? Here is the entire trace:

```
Searching replay packs with client version: 4.9.1
Traceback (most recent call last):
  File "C:\Users\lbianculli\s2client-proto-master\samples\replay-api\download_replays.py", line 193, in <module>
    main()
  File "C:\Users\lbianculli\s2client-proto-master\samples\replay-api\download_replays.py", line 189, in main
    download(**args_dict)
  File "C:\Users\lbianculli\s2client-proto-master\samples\replay-api\download_replays.py", line 102, in download
    meta_file_urls = api.search_by_client_version(version)
  File "C:\Users\lbianculli\s2client-proto-master\samples\replay-api\download_replays.py", line 85, in search_by_client_version
    response = self.get(self.url("/data/sc2/search/archive"), params)
  File "C:\Users\lbianculli\s2client-proto-master\samples\replay-api\download_replays.py", line 64, in get
    raise RequestError("Request to '{}' failed. response={}".format(url, response))
__main__.RequestError: Request to 'https://us.api.blizzard.com/data/sc2/search/archive' failed. response=<Response [403]>
```