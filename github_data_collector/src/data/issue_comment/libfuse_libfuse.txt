Add meson option 'initscriptsdir' to explicitly define location of
system initialization scripts. 'initscriptsdir' is '/etc/init.d' by
default.
Option usage:
meson --prefix=/usr/local -Dinitscriptsdir=/custom/init.d libfuse-src-dir build-dir
DESTDIR="${PWD}/install-dir" ninja -C build-dir

As a result, init script will be installed into
"${PWD}/install-dir/custom/init.d" location.

Fixes #489
fuse3 init script was always installing to /etc directory even if prefix
variable is defined. Now it is installing to sysconfdir directory.
Also update-rc.d was running even if using root permissins was
explicitly disabled via useroot definition.

Fixes #489
# How to reproduce
```
git clone https://github.com/libfuse/libfuse.git
meson --prefix="${PWD}/prefix" -Duseroot=false -Dudevrulesdir="${PWD}/prefix/lib/udev/rules.d" libfuse build
ninja -C build install
```
```
Installing /home/ubuntu/libfuse/doc/mount.fuse3.8 to /home/ubuntu/prefix/share/man/man8
Installing /home/ubuntu/build/meson-private/fuse3.pc to /home/ubuntu/prefix/lib/x86_64-linux-gnu/pkgconfig
Running custom install script '/home/ubuntu/libfuse/util/install_helper.sh /home/ubuntu/prefix/etc /home/ubuntu/prefix/bin /home/ubuntu/prefix/lib/udev/rules.d false'
install: cannot create regular file '/etc/init.d/fuse3': Permission denied
Failed to run install script '/home/ubuntu/libfuse/util/install_helper.sh /home/ubuntu/prefix/etc /home/ubuntu/prefix/bin /home/ubuntu/prefix/lib/udev/rules.d false'
FAILED: meson-install 
```
# Problem
install_helper.sh is trying to install `util/init_script` into `/etc/init.d/fuse3` even if prefix is specified. It is possible to solve problem by adding DESTDIR environment variable but the installation of `init.d/fuse3` becomes inconsitent with the installation of other configuration files. All other configuration files are installing into sysconfdir directory and according to [GNU coding standarts](https://www.gnu.org/prep/standards/html_node/Directory-Variables.html) I assume that `init.d/fuse3` is also should do this.
In a bunch of comments we say 'under the terms of the GNU GPL', make
it clear this is GPLv2 (as LICENSE says).

Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
I am encountering a failed test. It seems to occur in the test_passthrough_hp function

```
(venv) algrebe@node-0:~/downloads/libfuse/build$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 18.04.1 LTS
Release:        18.04
Codename:       bionic

# I'm using the 5.3.2 linux kernel (no modifications), built from source.
(venv) algrebe@node-0:~/downloads/libfuse/build$ uname -r
5.3.2

(venv) algrebe@node-0:~/downloads/libfuse/build$ python -m pytest test/test_examples.py::test_passthrough_hp
=========================================================================================== test session starts ============================================================================================
platform linux -- Python 3.8.0, pytest-5.3.0, py-1.8.0, pluggy-0.13.1 -- /users/algrebe/downloads/miniconda3/envs/venv/bin/python
cachedir: .pytest_cache
rootdir: /users/algrebe/downloads/libfuse/build/test, inifile: pytest.ini
collected 2 items

test/test_examples.py::test_passthrough_hp[False] PASSED                                                                                                                                             [ 50%]
test/test_examples.py::test_passthrough_hp[True] FAILED                                                                                                                                              [100%]

================================================================================================= FAILURES =================================================================================================
________________________________________________________________________________________ test_passthrough_hp[True] _________________________________________________________________________________________
Traceback (most recent call last):
  File "/users/algrebe/downloads/libfuse/build/test/test_examples.py", line 204, in test_passthrough_hp
    tst_rmdir(src_dir, mnt_dir)
  File "/users/algrebe/downloads/libfuse/build/test/test_examples.py", line 422, in tst_rmdir
    assert name in os.listdir(mnt_dir)
AssertionError: assert 'testfile_31' in ['testfile_27', 'testfile_25', 'testfile_30', 'testfile_28', 'testfile_26', 'testfile_29']
 +  where ['testfile_27', 'testfile_25', 'testfile_30', 'testfile_28', 'testfile_26', 'testfile_29'] = <built-in function listdir>('/tmp/tmpftk8924d/mnt')
 +    where <built-in function listdir> = os.listdir
------------------------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------------------------
============================================================================================= warnings summary =============================================================================================
/users/algrebe/downloads/miniconda3/envs/venv/lib/python3.8/site-packages/_pytest/mark/structures.py:318
  /users/algrebe/downloads/miniconda3/envs/venv/lib/python3.8/site-packages/_pytest/mark/structures.py:318: PytestUnknownMarkWarning: Unknown pytest.mark.uses_fuse - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    warnings.warn(

-- Docs: https://docs.pytest.org/en/latest/warnings.html
========================================================================================= short test summary info ==========================================================================================
FAILED test/test_examples.py::test_passthrough_hp[True] - AssertionError: assert 'testfile_31' in ['testfile_27', 'testfile_25', 'testfile_30', 'testfile_28', 'testfile_26', 'testfile_29']
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
================================================================================== 1 failed, 1 passed, 1 warning in 1.81s ==================================================================================
(venv) algrebe@node-0:~/downloads/libfuse/build$

```

`tst_rmdir` succeeds for

```
passthrough_hp /tmp/tmprtpqz7tt/src /tmp/tmprtpqz7tt/mnt --nocache
```

but not for

```
passthrough_hp /tmp/tmpr5vz9sy1/src /tmp/tmpr5vz9sy1/mnt
```

Looking at `passthrough_hp.cc`, [the comment says](https://github.com/libfuse/libfuse/blob/ada08d50a647adb37c77f2106e7adc0db6ab93d5/example/passthrough_hp.cc#L25) we shouldn't be modifying the src directory and expect changes in the mnt directory immediately. However, the `tst_rmdir` function does exactly that - It makes a directory from the src and lists the directory from the mnt immediately after. The cache returns the older value and the assert fails.

This isn't just limited to `tst_rmdir` though. I modified the cache timeout from 86400 ( a day) to 5 seconds and slept for 10 seconds in the function. It then failed in `tst_unlink`. 

Changing [the parameters](https://github.com/libfuse/libfuse/blob/master/test/test_examples.py#L174) to just `False` also works, but I'm assuming we want to test the cached mode too.

I'd like to start working on a fix for this but would like some guidance.

Would making modifications (file creation / deletion) through the mnt rather than src be a viable solution? However, we would need this only for the cached mode when testing `test_passthrough_hp`.
Starting from 2008 it became possible to implement FUSE filesystems
with pipe/socket-like files. For this a filesystem server should set
file_info->nonseekable and the kernel will correspondingly use
FMODE_NONSEEKABLE for opened file handle. See commit cafdcb253e4c "If
open sets fi->nonseekable, libfuse will tell the kernel that the file is
not seekable" which added nonseekable support to libfuse.

Unfortunately in 2014 a kernel regression was introduced(*): all file IO
switched to be done under lock (file->f_pos_lock) with the idea that
file position changes should be atomic. However for stream-like
files that were using nonseekable open it created possibility of
deadlock in between read and write:

	- file read could be waiting for data from filesystem server
	- filesystem server is generating data in reply to client write to that file
	- write to that file is waiting for f_pos_lock taken by read
	-> deadlock

Unfortunately now the regression is not possible to fix on just kernel
side because a) it is already 5 years after 2014, and b) there are
existing FUSE filesystems that use nonseekable open _and_ position for
corresponding file(+). In other words because of backward compatibility
today we cannot change the kernel to avoid taking f_pos_lock and not to
pass file position for filesystem server for nonseekable FUSE file
handles.

The solution to the deadlock problem, that is already merged to Linux
kernel, is to introduce new FUSE open flag (FOPEN_STREAM) that is
explicitly marking file handle as not having position at all, and thus
for such file handle the kernel will avoid taking f_pos_lock.

	git.kernel.org/linus/10dce8af3422
	git.kernel.org/linus/bbd84f33652f

When implementing stream-like files filesystem servers should be using
both FOPEN_NONSEEKABLE and FOPEN_STREAM:

	- on kernels released before 2014, since in-kernel FUSE client
	  ignores unknown FOPEN flags, this will continue to work ok as before.
	- on kernels with FOPEN_STREAM support, this will avoid
	  read/write deadlock.
	- on kernels released after 2014 but without FOPEN_STREAM
	  support, the deadlock will be there but using FOPEN_STREAM
	  does not make the situation worse.

	- FOPEN_STREAM was merged into Linux 5.2 (see commits ^^^) and
	  was backported to all long-term stable Linux kernel versions
	  that are taking their roots after kernel regression point:

	  Linux 5.1  git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=v5.1.4-110-g5bb2a758f2ed
	  Linux 4.19 git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=v4.19.45-82-gfea685000caf
	  Linux 4.14 git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=v4.14.124-35-g585724f83b0c
	  Linux 4.9  git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=v4.9.180-83-gcfd8d2e79524
	  Linux 4.4  git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=v4.4.180-241-gc9696a8f3e64
	  Linux 3.18 https://android.googlesource.com/kernel/common/+/9225b2f9d042
	  Linux 3.16 git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=v3.16.69-123-g6d654f9d5d1f

Note: we cannot change libfuse to use use both FOPEN_NONSEEKABLE and
FOPEN_STREAM on just file->info_nonseekable=1 for the same backward
compatibility reason why we cannot change the kernel to avoid using file
position for nonseekable opens (see "+" again). Thus let's introduce
new flag file_info->stream and let filesystems that implement
stream-like files set both file_info->stream and
file_info->nonseekable_open.

Even though example/poll.c implements only read, I've changed that
example to use file_info->stream=1 too, because file implemented there
does not use file position at all and because that example is kind of
canonical on how to implement "pipe-like" files with libfuse.

Since this patch is trying to fix regression introduced in 2014, it
should be applied to all libfuse branches covering time after that
moment:

	- master (current 3.x development)
	- fuse_3_0_bugfix
	- fuse-2_9_bugfix
	- fuse_2_8_bugfix

/cc @Nikratio, @szmi

(*) git.kernel.org/linus/9c225f2655e3
(+) e.g. gvfs, see

	https://codesearch.debian.net/search?q=-%3Enonseekable+%3D
	https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1080
	https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1247-1346
	https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1399-1481
passthrough_ll's `FUSE_READDIR` implementation saves the last offset of a DIR* object when it returns.  Subsequent calls check the provided offset, and `seekdir(3)` to if it's different than the saved offset.  However, that's not a valid use of `seekdir`.  `seekdir`'s argument must be something that was previously returned by `telldir(3)`.  The offset provided in the `FUSE_READDIR` command is a file offset, something that should be used with `lseek(2)`.

The impact of this bug is that `readdir(3)` operations can skip entries.  Here's the general order of events
* user program calls `readdir`.
* libc calls `getdirentries(2)` on FreeBSD or `getdents64(2)` on Linux, using a buffer of size X
* Kernel calls `FUSE_OPENDIR` and `FUSE_READDIR`.
* passthrough_ll calls `readdir` on the underlying file system
* libc calls `getdirentries` or `getdents64` with a buffer of size Y on the underlying file system.
* passthrough_ll returns to the kernel
* kernel fills up the user program's buffer but runs out of space before it adds all entries
* libc saves the actual offset of the last dirent structure.
* user progam calls `readdir` again.
* libc calls `getdirentries` or `getdents64` using the saved offset
* Kernel calls `FUSE_READDIR` using the saved offset
* passthrough_ll sees that the provided offset is different than the saved one, and calls `seekdir`
* `seekdir` does nothing at all, since the offset was not previously returned by `telldir`.
* passthrough_ll calls `readdir` on the underlying filesystem, resuming where it left off previously.  The directory entries that didn't fit within the user's first buffer are therefore lost.

At first glance it seems that there shouldn't be a problem because `X == Y`.  However, the problem arises because the structure used by `getdirentries` is different than the structure used by the FUSE protocol.  FUSE's fuse_dirent is _not_ nul-terminated, but `getdirentries`'s `struct dirent` and `getdents64`'s `struct linux_dirent` _are_.  Still, the problem doesn't arise on Linux because `struct linux_dirent` is smaller than `struct fuse_dirent`.  Here's a chart summarizing the structure sizes, for a name of length `n`:

| OS           | struct               | size|
| ------------ | -------------------|------|
| FreeBSD | dirent |              24 + n + 1 |
| Linux |       linux_dirent64 | 20 + n + 1 |
| FUSE |      fuse_dirent |      24 + n |

The solution is for passthrough_ll to use `getdirentries` and `lseek` directly instead of `readdir` and `seekdir`.
From #354:

I found that when building libfuse as a static library (`meson configure --default-library static`), I invariably hit errors like this when trying to use it:

```
libtool: link:  gcc -shared  -fPIC -DPIC  .libs/projfs.o .libs/projfs_vfsapi.o   -lfuse3 -ldl -lpthread  -g -O2   -Wl,-soname -Wl,libprojfs.so.0 -Wl,-version-script -Wl,.libs/libprojfs.ver -o .libs/libprojfs.so.0.0.0
/usr/bin/ld: .libs/libprojfs.so.0.0.0: version node not found for symbol fuse_loop_mt@@FUSE_3.2
/usr/bin/ld: failed to set dynamic section sizes: Bad value
collect2: error: ld returned 1 exit status
```

This is without adjusting the calling code at all. Indeed, even if I drop all calls to `fuse_loop_mt` in the calling code, this still happens, so I guess some versioning weirdness left inside `libfuse.a` is producing this when linking.
https://github.com/libfuse/libfuse/blob/master/include/fuse.h#L662

The `void *arg` argument is not mentioned in the function description.
test_examples.py::test_passthrough relies upon "magic" number parameter '-52' to skip (or possibly select by omit the minus, e.g.  '52' ) a particular test which happens to be the 52nd test in a long list of tests, and relies upon a counter found in test/test_syscalls.c

test_examples.py::test_passthrough:
```
       if writeback:
            # When writeback caching is enabled, kernel has to open files for
            # reading even when userspace opens with O_WDONLY. This fails if the
            # filesystem process doesn't have special permission.
            syscall_test_cmd.append('-52')
```

A Macro helper in test_syscalls.c  is used to "skip" or select the test like this:
```
#define start_test(msg, args...) { \
	if ((select_test && testnum != select_test) || \
	    (testnum == skip_test)) { \
		testnum++; \
		return 0; \
	} \
	__start_test(msg, ##args);		\
}
```

Logic is fatally flawed due to pre-processor defines possibly changing the number of tests performed 
test_syscalls.c
```
#ifndef __FreeBSD__	
	err += test_mknod();
	err += test_mkfifo();
#endif
```

or if user is root

test_syscalls.c
```
if(!is_root) {
		err += test_open_acc(O_RDONLY | O_TRUNC, 0400, EACCES);
		err += test_open_acc(O_WRONLY, 0400, EACCES);
		err += test_open_acc(O_RDWR,   0400, EACCES);
		err += test_open_acc(O_RDONLY, 0200, EACCES);
		err += test_open_acc(O_RDWR,   0200, EACCES);
		err += test_open_acc(O_RDONLY, 0000, EACCES);
		err += test_open_acc(O_WRONLY, 0000, EACCES);
		err += test_open_acc(O_RDWR,   0000, EACCES);
	}
```
both of which occur in the middle of the list of tests.  This implies that the test script "know" compile options used in order to determine which test should be skipped.

Magic number should be removed from test_examples.py.   Test skipping/selecting logic should be removed, and test script should be re-written to identify which tests may be called depending upon platform, or user -  or rewritten to skip tests by name instead of number. 