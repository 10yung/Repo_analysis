
this is the example code:

```
package main

import (
	"log"

	"github.com/gin-gonic/gin"
	"github.com/micro/go-micro/web"
)

type Say struct{}


func (s *Say) Anything(c *gin.Context) {
	log.Print("Received Say.Anything API request")
	c.JSON(200, map[string]string{
		"message": "Hi, this is the Greeter API",
	})
}

func (s *Say) Hello(c *gin.Context) {
	log.Print("Received Say.Hello API request")
	c.JSON(200, gin.H{
		"hello":"world",
	})
}

func main() {
	// Create service
	service := web.NewService(
		web.Name("go.micro.api.greeter"),
	)

	service.Init()

	// Create RESTful handler (using Gin)
	say := new(Say)
	router := gin.Default()
	router.GET("/greeter", say.Anything)
	router.GET("/greeter/:name", say.Hello)

	// Register Handler
	service.Handle("/", router)

	// Run server
	if err := service.Run(); err != nil {
		log.Fatal(err)
	}
}

```

1. start service

```
go run main.go
[GIN-debug] GET    /greeter                  --> main.(*Say).Anything-fm (3 handlers)
[GIN-debug] GET    /greeter/:name            --> main.(*Say).Hello-fm (3 handlers)
2020-01-14 23:01:16.358966 I | Listening on [::]:58594
2020-01-14 23:01:19.510976 I | Received Say.Anything API request

```

2. start micro 

```

micro --local

```

3. visit 

```

curl http://localhost:8080/greeter
{"id":"go.micro.client.transport","code":500,"detail":"404 Not Found: 404 page not found","status":"Internal Server Error"}

output from console:
[GIN] 2020/01/14 - 23:01:28 | 404 |            0s |       10.0.75.1 | POST     /
[GIN] 2020/01/14 - 23:01:28 | 404 |            0s |       10.0.75.1 | POST     /

```


4. stop micro and start micro handler

```

 micro api --handler=http

```

5.
visit:

```

http://localhost:8080/greeter
{"message":"Hi, this is the Greeter API"}

output from console:
[GIN] 2020/01/14 - 23:05:36 | 200 |            0s |             ::1 | GET      /greeter
2020-01-14 23:05:36.353363 I | Received Say.Anything API request

```



* Question:
When I start `micro --local` and visit the url, server get request but the method is `POST`
and start by `micro api --handler=http` , server get the correct request.
Why  I get this behavior?



















how can I post  data  when  Content-type=application/x-www-form-urlencoded  

	if r.Body != nil {
		switch ct {
		case "application/x-www-form-urlencoded":
			// expect form vals in Post data
		default:

			data, _ := ioutil.ReadAll(r.Body)
			req.Body = string(data)
		}
	}
Hi, I'm wondering if there is a simpler way to initialise a service while using plugins:

```
package main

import (
    "context"
    "log"

    "github.com/micro/go-micro"
    "github.com/micro/go-micro/server"
    _ "github.com/micro/go-plugins/server/grpc"
    _ "github.com/micro/go-plugins/transport/grpc"
)

func HandlerWrapper(handlerFunction server.HandlerFunc) server.HandlerFunc {
    return func(ctx context.Context, req server.Request, rsp interface{}) (err error) { 
        log.Println("Handling requet...")
        return
    }
}

func main() {
    service := micro.NewService(
        micro.Name("test_service"),
        micro.WrapHandler(HandlerWrapper),
    )

    log.Println("service name before parsing env vars:", service.Options().Server.Options().Name)

    service.Init(
        micro.Name("test_service"),
    )

    log.Println("service name after parsing env vars:", service.Options().Server.Options().Name)

    service.Server().Init(
        server.Name("test_service"),
        server.WrapHandler(HandlerWrapper),
    )

    log.Println("after re-setting service name:", service.Options().Server.Options().Name)

    // Run the server
    if err := service.Run(); err != nil {
        log.Fatalln(err)
    }
}
```

The code above is an example of how I'm initialising my service. Here I'm only passing args to micro.NewService and service.Init() just to make my point clearer.

I'm running this code with
`MICRO_SERVER=grpc go run main.go`

And the output is
```
2020/01/11 12:05:39 service name before parsing env vars: test_service
2020/01/11 12:05:39 service name after parsing env vars: go.micro.server
2020/01/11 12:05:39 after re-setting service name: test_service
2020/01/11 12:05:39 Server [grpc] Listening on [::]:60423
2020/01/11 12:05:39 Broker [http] Connected to [::]:60424
...
```

As expected, service.Init() replaces the server, forcing me to call service.Server().Init() after it.
So basically I have to call micro.NewService, service.Init and service.Server().Init, plus service.Client().Init because in the actual service I'm also using some wrappers for the client, and I'm also loading the client plugin.

I'm wondering is there is a way to initialise the service in fewer steps?
Also, looking to the code it doesn't seem necessary to import ` _ "github.com/micro/go-plugins/server/grpc"` and  `_ "github.com/micro/go-plugins/client/grpc"`. Are they really necessary when using these plugins?

I'm currently using go-micro v1.9.1


Thanks in advance.



I want to know micro api gateway cpu and memory stats .
so use `micro api ` command to start default API Gateway.
micro docs said this:
`--profile value                 Debug profiler for cpu and memory stats [%MICRO_DEBUG_PROFILE%]`

so, please tell me :
1. set goenv MICRO_DEBUG_PROFILE value is?
2. command `--profile` how can i use?

Thank u very much...
**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
Some times we may use one `micro api` gateway for `rpc` and `http` at the same time.
Can we add a `endpoints ...*api.Endpoint` option for `go-micro/web/Service` interface `Handle()` and `HandleFunc()` func. 
[My implement](https://github.com/hb-chen/go-micro/commit/02b746d726728826dfa15525feef84097c5702cc)

So that user can use `web/Service` start a `http` service for `micro api` gateway. Otherwise users need to implement it themselves.
Just an idea to see if it's necessary to add to the `go-micro/web`

**e.g.**
```go
package main

import (
	"fmt"
	"net/http"

	"github.com/hb-go/micro-plugins/web"
	"github.com/micro/go-micro/api"
	"github.com/micro/go-micro/util/log"
)

func main() {
	// create new web service
	service := web.NewService(
		web.Name("go.micro.api.console.web"),
		web.Version("latest"),
	)

	// initialise service
	if err := service.Init(); err != nil {
		log.Fatal(err)
	}

	service.Handle("/console/", &handler{}, &api.Endpoint{
		Name:    "console",
		Host:    []string{"localhost:8080"},
		Path:    []string{"^/console"},
		Method:  []string{"POST", "GET", "DELETE"},
		Handler: "proxy",
	})

	// run service
	if err := service.Run(); err != nil {
		log.Fatal(err)
	}
}

type handler struct {
}

func (*handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte(fmt.Sprintf("request success, path: %v", r.URL.Path)))
}

```

**Additional context**
Add any other context or screenshots about the feature request here.

I use "github.com/micro/go-micro/transport/quic"
a server work some time report this error
i need help 

**Is your feature request related to a problem? Please describe.**
Add the possibility to use your own logger or another logger like [logrus](https://github.com/sirupsen/logrus).

Logrus is very good for micro-services, in particular, to add fields.

It's very annoying to have two different log lines like this:
```
INFO[2020-01-07T21:20:13.754] start service      status=test
2020-01-07 21:20:13.763897 I | Listening on [::]:41921
^C2020-01-07 21:20:17.654143 I | Received signal interrupt
2020-01-07 21:20:17.655124 I | Stopping
```

**Describe the solution you'd like**
An option `Logger` that can be set when defining the microservice, or another better solution ?.

Like:
```go
service := micro.NewService(
    micro.Name("service"),
    micro.Logger(DEFINE_LOGGER_HERE),
)
```

Hello,

I have deployed my micro service on cloud machine A (8500 port is enabled) and started consul:

```
consul agent -dev -client=0.0.0.0 
```


with following config:

```
curl http://machineA_public_ip:8500/v1/catalog/services

{
    "cmn": [
        "t-789caa562a294acc2b2ec82f2a51b252ca28292950aa05040000ffff4f930768",
        "t-789caa564a2acacf4e2d52b252ca28292950aa05040000ffff364d0600",
        "t-789caa562a4e2d2a4b2d52b252ca2d4d2e50aa05040000ffff37200607",
        "t-789caa562a4a4dcf2c2e29aa54b2524acecf2b2ecd51aa05040000ffff560f07c8",
        "t-789caa562a28ca2fc94fcecf51b252ca2d4d2e50aa05040000ffff46a906e2",
        "e-789c9492b16ac4300c86df4573e8543a642b9dba762da508470d065b762d39100ebffb610849b8844bb2eaff3f3e19eb068c9ea0850fcf2fef89101a48f49f4914da39fc8c35fa9ae60de818f7c603ba4c02edf70cdab8b44593e57e55e3ec5cf929552831b0d08e710a36ca79be759a9059d3f86b424747f6e6913a0f6022bce888290c96cd95adac5e58a9b3b561f43c61e5f08396b20bdc5bcdeb17ffb980faf6fa84413d87d43bf0a4d8a162bd03d144e86b1f9d1094720f0000ffffdaaee7f9",
        "v-789cca492c492d2e01040000ffff08cc028e"
    ],
    "consul": []
}


curl http://machineA_public_ip:8500/v1/health/service/cmn?stale=
[
    {
        "Node": {
            "ID": "e977ad1b-c8b8-5963-08db-4e806e1b7f64",
            "Node": "PROD",
            "Address": "127.0.0.1",
            "Datacenter": "dc1",
            "TaggedAddresses": {
                "lan": "127.0.0.1",
                "wan": "127.0.0.1"
            },
            "Meta": {
                "consul-network-segment": ""
            },
            "CreateIndex": 9,
            "ModifyIndex": 10
        },
        "Service": {
            "ID": "cmn-1a7910ca-b8e4-4e57-afae-dd6a6280c317",
            "Service": "cmn",
            "Tags": [
                "t-789caa562a294acc2b2ec82f2a51b252ca28292950aa05040000ffff4f930768",
                "t-789caa564a2acacf4e2d52b252ca28292950aa05040000ffff364d0600",
                "t-789caa562a4e2d2a4b2d52b252ca2d4d2e50aa05040000ffff37200607",
                "t-789caa562a4a4dcf2c2e29aa54b2524acecf2b2ecd51aa05040000ffff560f07c8",
                "t-789caa562a28ca2fc94fcecf51b252ca2d4d2e50aa05040000ffff46a906e2",
                "e-789c9492b16ac4300c86df4573e8543a642b9dba762da508470d065b762d39100ebffb610849b8844bb2eaff3f3e19eb068c9ea0850fcf2fef89101a48f49f4914da39fc8c35fa9ae60de818f7c603ba4c02edf70cdab8b44593e57e55e3ec5cf929552831b0d08e710a36ca79be759a9059d3f86b424747f6e6913a0f6022bce888290c96cd95adac5e58a9b3b561f43c61e5f08396b20bdc5bcdeb17ffb980faf6fa84413d87d43bf0a4d8a162bd03d144e86b1f9d1094720f0000ffffdaaee7f9",
                "v-789cca492c492d2e01040000ffff08cc028e"
            ],
            "Address": "172.16.0.4",
            "Meta": null,
            "Port": 34009,
            "Weights": {
                "Passing": 1,
                "Warning": 1
            },
            "EnableTagOverride": false,
            "Proxy": {
                "MeshGateway": {},
                "Expose": {}
            },
            "Connect": {},
            "CreateIndex": 21,
            "ModifyIndex": 21
        },
        "Checks": [
            {
                "Node": "PROD",
                "CheckID": "serfHealth",
                "Name": "Serf Health Status",
                "Status": "passing",
                "Notes": "",
                "Output": "Agent alive and reachable",
                "ServiceID": "",
                "ServiceName": "",
                "ServiceTags": [],
                "Type": "",
                "Definition": {},
                "CreateIndex": 9,
                "ModifyIndex": 9
            }
        ]
    }
]
```

But if I try to call micro service from another server (not in the same LAN), then I get:

```
2020-01-07 11:11:51.083 ERROR:21041:micro/rpc.go:140: {"id":"go.micro.client","code":408,"detail":"call timeout: context deadline exceeded","status":"Request Timeout"}
2020-01-07 11:11:51.083 ERROR:21041:micro/rpc.go:133: execution_time 5.062993361s
2020-01-07 11:11:51.083 ERROR:21041:apid/apid.go:18: 

```

if I run the test on machine A with its local ip (172.16.0.4) as consul registry, then it works.
what should I do to make the service available for remote machines?

http1.1->micro api ->srv (grpc)

```
	header := make(map[string]string)
	if md, ok := metadata.FromContext(ctx); ok {
		for k, v := range md {
			header[k] = v
		}
	}
```

frontend request http1.1 header (key: Content-Length)  was put in backend request metadata directly，but  the content-length was changed
when I use micro with istio , the envoy (nghttp2 will verify content-length，then cause ErrCodeProtocol )

```
//here is nghttp2  integration-tests
func TestH2H1BadRequestCL(t *testing.T) {
	st := newServerTester(nil, t, noopHandler)
	defer st.Close()

	// we set content-length: 1024, but the actual request body is
	// 3 bytes.
	res, err := st.http2(requestParam{
		name:   "TestH2H1BadRequestCL",
		method: "POST",
		header: []hpack.HeaderField{
			pair("content-length", "1024"),
		},
		body: []byte("foo"),
	})
	if err != nil {
		t.Fatalf("Error st.http2() = %v", err)
	}

	want := http2.ErrCodeProtocol
	if res.errCode != want {
		t.Errorf("res.errCode = %v; want %v", res.errCode, want)
	}
}
```

