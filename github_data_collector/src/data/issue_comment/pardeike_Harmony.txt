**Describe the bug**
When a method is resolved inside the GlobalType (this is only possible via `Module.ResolveMethod(int MDToken)`) its `DeclaringType` property is `null` and when an attempt is made to patch the method, a NRE will get thrown in this function: [GeneralExtensions.FullDescription(this MethodBase method)](https://github.com/pardeike/Harmony/blob/master/Harmony/Tools/Extensions.cs#L66)


**To Reproduce**
1. Resolve a method via its metadata token that is inside `<Module>` (or also known as the globaltype)
2. Try to apply any patch to it

**Expected behavior**
The patch gets applied

**Screenshot**
![Image](https://cdn.discordapp.com/attachments/361891646742462467/662319438799962132/unknown.png)

**Runtime environment:**
 - OS: Windows 10, 64bit
 - .NET version 4.8
 - Harmony version 1.2.0.1
 
**Describe the bug**
If the method returns a generic type, an error will occur during the patch.

**To Reproduce**
Steps to reproduce the behavior:
1. The original method and its signature and class:
```csharp
typeof(List<Int32>).GetMethod("GetEnumerator");
```
2. The prefix method:
```csharp
static void ConsoleWriteLine() => Console.WriteLine(Environment.StackTrace);
```
3. The patch code:
```csharp
var original = typeof(List<Int32>).GetMethod("GetEnumerator");
var patch = typeof(Program).GetMethod(nameof(ConsoleWriteLine));
instance.Patch(original, prefix: new HarmonyMethod(patch));
```

4. The output of the Harmony debug log:
```
### Harmony id=test, version=2.0.0.0, location=T:\ConsoleApp44\bin\Debug\0Harmony.dll
### Started from System.Void ConsoleApp44.Program.Main(System.String[]), location T:\ConsoleApp44\bin\Debug\ConsoleApp44.exe
### At 2019-12-23 08.17.01
Self-patching started (v2.0.0.0)
Potential methods to upgrade:
Self-patched 0 out of 0 methods (0 skipped) in 17ms
### Patch System.Collections.Generic.Enumerator<System.Int32> System.Collections.Generic.List`1<System.Int32>.GetEnumerator()
```

5. The stacktrace or other errors
```
System.ArgumentException: The specified Type must not be a generic type definition.
Parameter name: t
   at System.Runtime.InteropServices.Marshal.SizeOf(Type t)
```

**Expected behavior**
The patch is correctly applied.

**Screenshots / Code**
![image](https://user-images.githubusercontent.com/26382228/71337730-ec029580-255d-11ea-9895-b5d586b12422.png)

**Runtime environment (please complete the following information):**
- OS: Windows 10, 64bit
- .NET Framework 4.7.2
- Harmony version: sources of 14 nov 2019

**Additional context**
It isn't enough just to fix this place. If you do it, errors will occur later.

**Describe the bug**
If the __originalMethod is declared in the prefix, an error will occur when the method is called:
```System.ArgumentException: 'Cannot resolve method Void Add(Int32) because the declaring type of the method handle System.Collections.Generic.List`1[T] is generic. Explicitly provide the declaring type to GetMethodFromHandle. '```


**To Reproduce**
Steps to reproduce the behavior:
1. The original method:
`typeof(List<Int32>).GetMethod("Add")`

2. The prefix method:
`static void InvalidPrefix(MethodInfo __originalMethod, Int32 item) => Console.WriteLine(item);`

3. The patch code: 
```
var original = typeof(List<Int32>).GetMethod(nameof(List<Int32>.Add));
var prefix = typeof(Program).GetMethod(nameof(InvalidPrefix));
instance.Patch(original, prefix: new HarmonyMethod(patchMethod));
```

4. The output of the Harmony debug log:
```### Harmony id=test, version=2.0.0.0, location=T:\ConsoleApp44\bin\Debug\0Harmony.dll
### Started from System.Void ConsoleApp44.Program.Main(System.String[]), location T:\ConsoleApp44\bin\Debug\ConsoleApp44.exe
### At 2019-12-23 07.30.15
Self-patching started (v2.0.0.0)
Potential methods to upgrade:
Self-patched 0 out of 0 methods (0 skipped) in 19ms
### Patch System.Void System.Collections.Generic.List`1<System.Int32>.Add(System.Int32)
L_0000: ldtoken System.Void System.Collections.Generic.List`1<System.Int32>.Add(System.Int32)
L_0005: call System.Reflection.MethodBase System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
L_000a: ldarg 1
L_0010: call System.Void ConsoleApp44.Program.InvalidPrefix(System.Reflection.MethodInfo, System.Int32)
L_0015: // start original
L_0015: ldarg.0
L_0016: ldfld Int32 _size
L_001b: ldarg.0
L_001c: ldfld Int32[] _items
L_0021: ldlen
L_0022: conv.i4
L_0023: bne.un Label1
L_0028: ldarg.0
L_0029: ldarg.0
L_002a: ldfld Int32 _size
L_002f: ldc.i4.1
L_0030: add
L_0031: call System.Void System.Collections.Generic.List`1<System.Int32>.EnsureCapacity(System.Int32)
L_0036: Label1
L_0036: ldarg.0
L_0037: ldfld Int32[] _items
L_003c: ldarg.0
L_003d: ldarg.0
L_003e: ldfld Int32 _size
L_0043: stloc.0
L_0044: ldloc.0
L_0045: ldc.i4.1
L_0046: add
L_0047: stfld Int32 _size
L_004c: ldloc.0
L_004d: ldarg.1
L_004e: stelem System.Int32
L_0053: ldarg.0
L_0054: ldarg.0
L_0055: ldfld Int32 _version
L_005a: ldc.i4.1
L_005b: add
L_005c: stfld Int32 _version
L_0061: // end original
L_0061: ret
DONE
```

4. The stacktrace or other errors:
```
System.ArgumentException: Cannot resolve method Void Add(Int32) because the declaring type of the method handle System.Collections.Generic.List`1[T] is generic. Explicitly provide the declaring type to GetMethodFromHandle. 
   at System.Reflection.MethodBase.GetMethodFromHandle(RuntimeMethodHandle handle)
```

**Expected behavior**
The method works correctly, information about the calling method (not Generic) is passed to the __originalMethod argument.

**Runtime environment (please complete the following information):**
 - OS: Windows 10, 64bit
 - .NET Framework 4.7.2
 - Harmony version: sources of 14 nov 2019

Made traverse detect static and non-declared properties, as well as non-declared fields (static fields were already detected). This makes `Traverse.Field` and `Traverse.Property` work the same way as `Traverse.Method`.

Fixes issues #215 and #213.
I'm trying to patch GetOrderedRanges() method in this class:
https://github.com/StockSharp/StockSharp/blob/911c9a070420e1960a23aa93fc606f4d00b4ec02/Algo/Storages/CachedBasketMarketDataStorage.cs

This is an internal class of StockSharp library and it has a bug which I want to patch. Thre are no exception on patching itself. But AccessViolationExcpetion is raised from the patched class during application run.

Stack trace of the exception:

```
System.AccessViolationException:
   in StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1.<>c__DisplayClass45_0.<Start>b__1()
   in Ecng.Common.Converter.<>c__DisplayClass22_0.<DoInCulture>b__0()
   in Ecng.Common.Converter.DoInCulture[T](CultureInfo cultureInfo, Func`1 func)
   in System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   in System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   in System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   in System.Threading.ThreadHelper.ThreadStart()
```
Unfortunately it is hard to provide any project to reproduce this because I can't show the real application due to NDA and the class being patched is very internal and can't be used without all the infrastructure.

I tried to call the patched method directly from my code after patching and the patched method works perfectly without exceptions. I suppose this may be related somehow to other code in the StockSharp library, specifically to the way how the method is called (see CachedBasketMarketDataStorage.Start() method).

Can I do something to debug or narrow this down to understand what is going wrong?

**Runtime environment:**
 - OS: WIndows 8.1 64bit, Windows 10 64bit
 - .NET version: 4.6
 - Harmony version: 1.2, 2.0

**Harmony log**
```
### Harmony id=StockSharp, version=2.0.0.0
### Started from System.Void StockSharpExtensions.CachedBasketMarketDataStoragePatcher..cctor(), ### At 2019-11-26 04.02.03
### Patch System.Collections.Generic.IEnumerable`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>> StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1<StockSharp.Messages.Message>.GetOrderedRanges(System.DateTimeOffset)
L_0000: ldnull
L_0001: stloc 3 (System.Collections.Generic.IEnumerable`1[System.Tuple`2[StockSharp.BusinessEntities.ExchangeBoard,Ecng.ComponentModel.Range`1[System.TimeSpan]]])
L_0002: ldarg.0
L_0003: ldarg 1
L_0009: ldloca 3 (System.Collections.Generic.IEnumerable`1[System.Tuple`2[StockSharp.BusinessEntities.ExchangeBoard,Ecng.ComponentModel.Range`1[System.TimeSpan]]])
L_000b: call System.Boolean StockSharpExtensions.CachedBasketMarketDataStoragePatcher.GetOrderedRangesPrefix(StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1<StockSharp.Messages.Message>, System.DateTimeOffset, System.Collections.Generic.IEnumerable`1&)
L_0010: brfalse Label0
L_0015: // start original
L_0015: newobj Void .ctor()
L_001a: stloc.0
L_001b: ldloc.0
L_001c: ldarg.1
L_001d: stfld System.DateTimeOffset date
L_0022: ldarg.0
L_0023: call System.Collections.Generic.IEnumerable`1<StockSharp.BusinessEntities.ExchangeBoard> StockSharp.Algo.Storages.CachedBasketMarketDataStorage`1<StockSharp.Messages.Message>.get_Boards()
L_0028: ldloc.0
L_0029: ldftn System.Boolean StockSharp.Algo.Storages.<>c__DisplayClass49_0<StockSharp.Messages.Message>.<GetOrderedRanges>b__0(StockSharp.BusinessEntities.ExchangeBoard)
L_002f: newobj Void .ctor(System.Object, IntPtr)
L_0034: call System.Collections.Generic.IEnumerable`1<StockSharp.BusinessEntities.ExchangeBoard> System.Linq.Enumerable.Where(System.Collections.Generic.IEnumerable`1<StockSharp.BusinessEntities.ExchangeBoard>, System.Func`2<StockSharp.BusinessEntities.ExchangeBoard, System.Boolean>)
L_0039: ldloc.0
L_003a: ldftn System.Collections.Generic.IEnumerable`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>> StockSharp.Algo.Storages.<>c__DisplayClass49_0<StockSharp.Messages.Message>.<GetOrderedRanges>b__1(StockSharp.BusinessEntities.ExchangeBoard)
L_0040: newobj Void .ctor(System.Object, IntPtr)
L_0045: call System.Collections.Generic.IEnumerable`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>> System.Linq.Enumerable.SelectMany(System.Collections.Generic.IEnumerable`1<StockSharp.BusinessEntities.ExchangeBoard>, System.Func`2<StockSharp.BusinessEntities.ExchangeBoard, System.Collections.Generic.IEnumerable`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>>)
L_004a: ldsfld System.Func`2[System.Tuple`2[StockSharp.BusinessEntities.ExchangeBoard,Ecng.ComponentModel.Range`1[System.TimeSpan]],System.TimeSpan] <>9__49_2
L_004f: dup
L_0050: brtrue Label1
L_0055: pop
L_0056: ldsfld <>c <>9
L_005b: ldftn System.TimeSpan StockSharp.Algo.Storages.<>c<StockSharp.Messages.Message>.<GetOrderedRanges>b__49_2(System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>)
L_0061: newobj Void .ctor(System.Object, IntPtr)
L_0066: dup
L_0067: stsfld System.Func`2[System.Tuple`2[StockSharp.BusinessEntities.ExchangeBoard,Ecng.ComponentModel.Range`1[System.TimeSpan]],System.TimeSpan] <>9__49_2
L_006c: Label1
L_006c: call System.Linq.IOrderedEnumerable`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>> System.Linq.Enumerable.OrderBy(System.Collections.Generic.IEnumerable`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>, System.Func`2<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>, System.TimeSpan>)
L_0071: call System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>> System.Linq.Enumerable.ToList(System.Collections.Generic.IEnumerable`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>)
L_0076: stloc.1
L_0077: ldc.i4.0
L_0078: stloc.2
L_0079: br Label2
L_007e: Label9
L_007e: ldloc.1
L_007f: ldloc.2
L_0080: callvirt System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>> System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.get_Item(System.Int32)
L_0085: callvirt Ecng.ComponentModel.Range`1<System.TimeSpan> System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>.get_Item2()
L_008a: ldloc.1
L_008b: ldloc.2
L_008c: ldc.i4.1
L_008d: add
L_008e: callvirt System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>> System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.get_Item(System.Int32)
L_0093: callvirt Ecng.ComponentModel.Range`1<System.TimeSpan> System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>.get_Item2()
L_0098: callvirt System.Boolean Ecng.ComponentModel.Range`1<System.TimeSpan>.Contains(Ecng.ComponentModel.Range`1<System.TimeSpan>)
L_009d: brfalse Label3
L_00a2: ldloc.1
L_00a3: ldloc.2
L_00a4: ldc.i4.1
L_00a5: add
L_00a6: callvirt System.Void System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.RemoveAt(System.Int32)
L_00ab: br Label4
L_00b0: Label3
L_00b0: ldloc.1
L_00b1: ldloc.2
L_00b2: ldc.i4.1
L_00b3: add
L_00b4: callvirt System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>> System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.get_Item(System.Int32)
L_00b9: callvirt Ecng.ComponentModel.Range`1<System.TimeSpan> System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>.get_Item2()
L_00be: ldloc.1
L_00bf: ldloc.2
L_00c0: callvirt System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>> System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.get_Item(System.Int32)
L_00c5: callvirt Ecng.ComponentModel.Range`1<System.TimeSpan> System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>.get_Item2()
L_00ca: callvirt System.Boolean Ecng.ComponentModel.Range`1<System.TimeSpan>.Contains(Ecng.ComponentModel.Range`1<System.TimeSpan>)
L_00cf: brfalse Label5
L_00d4: ldloc.1
L_00d5: ldloc.2
L_00d6: callvirt System.Void System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.RemoveAt(System.Int32)
L_00db: br Label6
L_00e0: Label5
L_00e0: ldloc.1
L_00e1: ldloc.2
L_00e2: callvirt System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>> System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.get_Item(System.Int32)
L_00e7: callvirt Ecng.ComponentModel.Range`1<System.TimeSpan> System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>.get_Item2()
L_00ec: ldloc.1
L_00ed: ldloc.2
L_00ee: ldc.i4.1
L_00ef: add
L_00f0: callvirt System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>> System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.get_Item(System.Int32)
L_00f5: callvirt Ecng.ComponentModel.Range`1<System.TimeSpan> System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>.get_Item2()
L_00fa: callvirt Ecng.ComponentModel.Range`1<System.TimeSpan> Ecng.ComponentModel.Range`1<System.TimeSpan>.Intersect(Ecng.ComponentModel.Range`1<System.TimeSpan>)
L_00ff: ldnull
L_0100: call System.Boolean Ecng.Common.Equatable`1<Ecng.ComponentModel.Range`1<System.TimeSpan>>.op_Inequality(Ecng.Common.Equatable`1<Ecng.ComponentModel.Range`1<System.TimeSpan>>, Ecng.ComponentModel.Range`1<System.TimeSpan>)
L_0105: brfalse Label7
L_010a: ldloc.1
L_010b: ldloc.2
L_010c: ldloc.1
L_010d: ldloc.2
L_010e: callvirt System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>> System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.get_Item(System.Int32)
L_0113: callvirt StockSharp.BusinessEntities.ExchangeBoard System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>.get_Item1()
L_0118: ldloc.1
L_0119: ldloc.2
L_011a: callvirt System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>> System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.get_Item(System.Int32)
L_011f: callvirt Ecng.ComponentModel.Range`1<System.TimeSpan> System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>.get_Item2()
L_0124: callvirt System.TimeSpan Ecng.ComponentModel.Range`1<System.TimeSpan>.get_Min()
L_0129: ldloc.1
L_012a: ldloc.2
L_012b: ldc.i4.1
L_012c: add
L_012d: callvirt System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>> System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.get_Item(System.Int32)
L_0132: callvirt Ecng.ComponentModel.Range`1<System.TimeSpan> System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>.get_Item2()
L_0137: callvirt System.TimeSpan Ecng.ComponentModel.Range`1<System.TimeSpan>.get_Max()
L_013c: newobj Void .ctor(System.TimeSpan, System.TimeSpan)
L_0141: call System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>> System.Tuple.Create(StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>)
L_0146: callvirt System.Void System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.set_Item(System.Int32, System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>)
L_014b: ldloc.1
L_014c: ldloc.2
L_014d: ldc.i4.1
L_014e: add
L_014f: callvirt System.Void System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.RemoveAt(System.Int32)
L_0154: br Label8
L_0159: Label7
L_0159: ldloc.2
L_015a: ldc.i4.1
L_015b: add
L_015c: stloc.2
L_015d: Label2
L_015d: Label4
L_015d: Label6
L_015d: Label8
L_015d: ldloc.2
L_015e: ldloc.1
L_015f: callvirt System.Int32 System.Collections.Generic.List`1<System.Tuple`2<StockSharp.BusinessEntities.ExchangeBoard, Ecng.ComponentModel.Range`1<System.TimeSpan>>>.get_Count()
L_0164: ldc.i4.1
L_0165: sub
L_0166: blt Label9
L_016b: ldloc.1
L_016c: // end original
L_016c: stloc 3 (System.Collections.Generic.IEnumerable`1[System.Tuple`2[StockSharp.BusinessEntities.ExchangeBoard,Ecng.ComponentModel.Range`1[System.TimeSpan]]])
L_016d: Label0
L_016d: ldloc 3 (System.Collections.Generic.IEnumerable`1[System.Tuple`2[StockSharp.BusinessEntities.ExchangeBoard,Ecng.ComponentModel.Range`1[System.TimeSpan]]])
L_016e: ret
DONE
```
Hey, 

I've been working on porting Harmony to .NET Core 3.
The main issue was that MethodInfo objects are not longer serializable in .NET Core

To bypass that, i've created a MethodInfoWrapper that traverses the RuntimeMethodInfo object and performs a shallow copy.
gg
I find myself almost always converting the IEnumerable<CodeInstruction> into a List<CodeInstruction> for access to the List methods like FindIndex, and from what I can tell of the harmony code, it's internally such a List anyway.

I generalized it to all the generic interfaces the List<T> implements.

Aside: I'm not sure how you get unit tests running yourself, but in order to run them via Visual Studio Test Explorer on all target frameworks (except for netcoreapp3.0), I had to locally remove the Microsoft.NET.Test.Sdk and NUnit3TestAdapter nugets, and install the NUnit 3 Test Adapter extension. Microsoft.NET.Test.Sdk requires netcoreapp2.1+ or net45+, while NUnit3TestAdapter requires netcoreapp1.0+, so they don't work for the .NET Framework versions like net35.
**Describe the bug**

Using AccessTools.Constructor and AccessTools.DeclaredConstructor on a class constructor that has a static constructor throws AmbiguousMatchException like:
```csharp
public class Test
{
    static Test() { }
    public Test() { }
}
```

**Expected behavior**

AccessTools.Constructor and AccessTools.DeclaredConstructor internally uses AccessTools.allDeclared which has the BindingFlags.Static which will get the static constructor and throw the AmbiguousMatchException

**Describe the bug**
Traverse.Property does not find properties from base types of the object instance passed in to Traverse.Create.

**To Reproduce**
```cs
class A : B { }
class B { public bool Test {get;} = true; }

Traverse tr = Traverse.Create(new A());
var prop = tr.Property("Test");
prop.GetValue<bool>() // Fails silently
```

**Expected behavior**
Traverse.Property should find properties from base classes. When passing in an instance it's not possible (or desirable) to specify the correct type to get the property.

**Runtime environment (please complete the following information):**
 - Windows 10, 64bit
 - .NET 4.5 in Unity 2018
 - Harmony version 2.0.0.0

**Describe the bug**
Traverse.PropertyExists does not exist, while Traverse.FieldExists and other similar methods exist.

**Expected behavior**
Traverse.PropertyExists should exist like Traverse.FieldExists does.