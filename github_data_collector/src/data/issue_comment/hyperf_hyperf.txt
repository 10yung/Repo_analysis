https://github.com/hyperf/rpc-client/blob/97f7b4169570280b61bedcd09b3dc7f89b1b829e/src/Proxy/Ast.php#L55

如果$className是派生自其他接口的话，此处只能生成$className当前的method的code，而无法生成$className父接口method的code

BarInterface.php:
```
interface BarInterface {
    public function BarMethod();
}
```

FooInterface.php:
```
interface FooInterface extends BarInterface {
    public function FooMethod();
}
```

而自动创建代理消费者类只有FooInterface的FooMethod，而没有BarInterface的BarMethod
```
class FooInterface_xxxxxx extends \Hyperf\RpcClient\Proxy\AbstractProxyService implements FooInterface
{
    public function FooMethod()
    {
        return $this->client->__call(__FUNCTION__, func_get_args());
    }
}
```
fix https://github.com/hyperf/hyperf/issues/1282

1. 移除 rpc-server 的Router::addRoute第一参数 $httpMethod，因为RPC仅默认支持POST

Add a shell to generate or update the license list of main repository and all components 
### belongsToMany关系中不能使用using(MiddleModel::class)吗?
我的代码
#### 在`User`模型中
```php
    /**
     * 用户加入的圈子
     * @return \Hyperf\Database\Model\Relations\BelongsToMany
     * @author Wayne<qiaobinloverabbi@gmail.com>
     */
    public function joinedGroups()
    {
        return $this->belongsToMany(Group::class)
            ->using(GroupUser::class)
            ->withPivot(['role', 'member_at', 'level', 'status'])
            ->wherePivotIn('role', [GroupMemberRole::MEMBER, GroupMemberRole::GUEST])
            ->whereNull('group_user.deleted_at')
            ->withTimestamps();
    }
 /**
     * 用户圈子，用于排序的部分
     * @return \Hyperf\Database\Model\Relations\BelongsToMany
     * @author Wayne<qiaobinloverabbi@gmail.com>
     */
    public function visitedGroups()
    {
        return $this->belongsToMany(Group::class)
           ->using(GroupVisited::class)
            ->withTimestamps();
    }
```
这是针对两个关系建立的关系，
`GroupUser`的表是 `group_user`, 
`GroupVisited`的表是`group_visited`,
但是我使用 visitedGroups关系的时候，
比如
```php
$user->visitedGroups()->detach();
$user->visitedGroups()->attach($group_id);
```
的时候，确是使用的 `joinedGroups()`关系的数据表 `group_user`
，但是如果不使用`using()`的时候是正常的，但是会有一些字段需要转换类型，比如 snowflake生成的id，在小程序，网页中会出现长度问题引起的错误，需要通过模型的$casts属性来进行类型转换

### 如果是不支持 using()的话，希望能够支持一下
**示例代码**
```php
public function demo()
 {
     $container = ApplicationContext::getContainer();
     $accountProjectDao = $container->get(AccountProjectDao::class);
     return $accountProjectDao->getAccountInfoWithCache('73474998135767040');
 }
```
AccountProjectDao 中的方法
``` php
  /**
     * 带缓存获取账号信息
     * @Cacheable(prefix="account", ttl=9000, listener="token-update")
     */
    public function getAccountInfoWithCache($accountId)
    {
        $where = [];
        $where[] = ['account_id', '=', $accountId];
        $where[] = ['project_id', '=', 1];
        $field = ['item_id'];
        return AccountProject::query()->where($where)->first($field);
    }
```
**问题描述**
getAccountInfoWithCache方法原本没有上面的缓存注解，后面加上缓存注解之后重启服务缓存就是不生效。

**解决**
仔细研究之后发现在runtime/container/proxy下面有一个名为:App_Dao_AccountProjectDao.proxy.php的文件，点进去之后里面getAccountInfoWithCache方法并不是最新的代码，删除该文件重启服务之后就好了，重新生成App_Dao_AccountProjectDao.proxy.php文件中的方法也与最新的代码对应。

**开发环境**
win10 + homestead（虚拟机系统是ubuntu），hyperf版本是最新的1.1

据我同事反馈在mac上开发，重启服务之后 runtime/container/proxy 下面的文件会被清除掉，也就不存在上面的问题。


json-rpc 组件如果不引入 rpc-server 组件，则会抛出错误。
https://github.com/hyperf/rpc-client/blob/97f7b4169570280b61bedcd09b3dc7f89b1b829e/src/ServiceClient.php#L70


JSON-RPC 返回的数据格式如下：

```
array (
  'jsonrpc' => '2.0',
  'id' => '5e218116d6b42',
  'error' => 
  array (
    'code' => -32000,
    'message' => 'test',
    'data' => 
    array (
      'class' => 'RuntimeException',
      'code' => 123456,
      'message' => 'test',
    ),
  ),
  'context' => 
  array (
  ),
)
```

data 中根本没有 attributes 的内容。导致 exception 无法反序列化
## Before you submit this issue, you has been search all existed issues and search the [documentation](https://doc.hyperf.io)
- [] I've been search all existed issues
- [] I've been read all documentation

### Describe your question
在使用view视图时, RenderInterface接口只提供了一个render方法, 简单可以渲染页面. 但是我需要使用更多的一些方法时, 我这里以ThinkTemplate为例, 我想调用Template里的其他方法, 但是在Engine目录下ThinkEngine类, 提供的render方法:
public function render($template, $data, $config): string
{
        $engine = new Template($config);

        $engine->assign($data);

        return $engine->fetch($template);
}
实际上我需要获取到这个方法里的Template对象. 但是render方法这样设计的话. 我就没办法获取到Template对象, 从而无法调用Template对象里的方法了. 请问有什么好的设计方案吗


