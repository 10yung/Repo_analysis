With `#[derive(NetworkBehaviour)]` only, no errors. 
```rust                                                                                                                                
#[derive(NetworkBehaviour)]                                                                                                                                                                                                                                                                      
pub struct Behaviour<TSubstream> {                                                                                                                                            
    pub floodsub: Floodsub<TSubstream>,                                                                                                                                       
    pub kad: Kademlia<TSubstream, MemoryStore>,                                                                                                                               
    pub rpc: RPC<TSubstream>,                                                                                                                                                                                                                                                                                
}
```

When `#[behaviour(out_event = "Event", poll_method = "poll")]` is added, then the error occurs.

```rust                                                                                                                                
#[derive(NetworkBehaviour)]                                                                                                                                                   
#[behaviour(out_event = "Event", poll_method = "poll")]                                                                                                                       
pub struct Behaviour<TSubstream> {                                                                                                                                            
    pub floodsub: Floodsub<TSubstream>,                                                                                                                                       
    pub kad: Kademlia<TSubstream, MemoryStore>,                                                                                                                               
    pub rpc: RPC<TSubstream>,                                                                                                                                                                                                                                                                                
}
```

```
error[E0061]: this function takes 2 parameters but 1 parameter was supplied
  --> lp2p/src/behaviour.rs:51:10
   |
51 | #[derive(NetworkBehaviour)]
   |          ^^^^^^^^^^^^^^^^ expected 2 parameters
```

Not sure what's going on, I also tried the example exmaples/chat.rs, there is also a similar error.

```diff
 fn main() -> Result<(), Box<dyn Error>> {
     env_logger::init();
@@ -82,6 +82,7 @@ fn main() -> Result<(), Box<dyn Error>> {
     // Use the derive to generate delegating NetworkBehaviour impl and require the
     // NetworkBehaviourEventProcess implementations below.
     #[derive(NetworkBehaviour)]
+    #[behaviour(poll_method = "poll")]
     struct MyBehaviour<TSubstream: AsyncRead + AsyncWrite> {
         floodsub: Floodsub<TSubstream>,
         mdns: Mdns<TSubstream>,
@@ -92,29 +93,39 @@ fn main() -> Result<(), Box<dyn Error>> {
         ignored_member: bool,
     }
```

```
xlc@xlc-pc:~/.../libp2p/rust-libp2p ❯❯❯ cargo build --example chat
   Compiling libp2p v0.14.0-alpha.1 (/home/xlc/data/src/github.com/libp2p/rust-libp2p)
error[E0061]: this function takes 3 parameters but 2 parameters were supplied
  --> examples/chat.rs:84:14
   |
84 |     #[derive(NetworkBehaviour)]
   |              ^^^^^^^^^^^^^^^^ expected 3 parameters

error: aborting due to previous error

For more information about this error, try `rustc --explain E0061`.
error: could not compile `libp2p`.
```

Any clue?
Hello,
I'd like to suggest the removal of `ring` as a dependency all-together. That also includes rustls and webpki. (rustls is used by the websocket transport)

Why:
- Because I don't see a point in using that one vs others when it mostly is a wrapper to Assembly code: 
![Screenshot Capture - 2020-01-19 - 04-09-14](https://user-images.githubusercontent.com/44934014/72673965-85e03400-3a71-11ea-948d-822fe38721d7.png)
- The maintainer is problematic: https://github.com/briansmith/ring/issues/774 and doesnt work in the spirit of Free Software.
- There is no portable fallback for crypto primitives, which means it wont compile on less common platforms, at the mercy of the problematic maintainer.
- The build system of `ring` is really a mess.

I suggest using the `openssl` crate instead. That supports both OpenSSL and LibreSSL and any other library that offers an openssl-compatible interface. Or individual crates that implement the primitives needed by `libp2p` such as: https://github.com/RustCrypto -- but I don't think they're that mature yet.

I started porting `libp2p` crates to `openssl` but it seems that `ring` types are exposed in public interfaces, so that would be a breaking change. Also, usage of `ring` really doesnt seem contained, so it's not so trivial to do so either.
… through whatever the application provides as a topic identifier, leaving hashing (or not hashing) up to the application.

This is https://github.com/libp2p/rust-libp2p/pull/1279, just rebased and adapted to latest master.
It seems that polling from TCP sockets too often might cause issues.
We could tweak `transport::upgrade::Builder` to optionally do some intermediary buffering.

Every single time something happens on a connection, we `mem::replace` the state with `Undefined`, then put the state back afterwards.
This is a lot of copies, and 5% of Substrate's CPU use is here.

In the past it's been tedious to fix because of non-lexical lifetime issues in Rust. But Rust has gotten some improvements since then.

Makes it possible to configure the executor for the background tasks that libp2p spawns.

Related to #1318, as it makes it possible to use the tokio executor.

The public-facing API is that `SwarmBuilder` gains an `executor` method.

After #1384, there are still a lot of things to do:

- [ ] #1329
- [ ] Maybe part of #1329, but pass `Pin<&mut Self>`  to `NetworkBehaviour::poll`/`ProtocolsHandler::poll`/`NodeHandler::poll`.
- [ ] Change all the methods of `StreamMuxer` to require `Pin<&mut Self>`. In practice, the muxer itself is already pinned as it is within an `Arc`.
- [ ] Maybe remove all the `Unpin` trait requirements that remain everywhere? There is one major problematic area: when we pass a substream from multistream-select to the actual handler, we move it. I'm not really sure what to do here.

Signed-off-by: koushiro <koushiro.cqx@gmail.com>

Add `Blake2b256` and `Blake2s128` hash types for `multihash`.
Implements private networks ( #476 )

This is meant to be interoperable with go-ipfs private swarms. For reference: the specification from PL is at https://github.com/libp2p/specs/blob/master/pnet/Private-Networks-PSK-V1.md , the implementation in go-ipfs is at https://github.com/libp2p/go-libp2p-pnet/ .

Tested by checking that two rust-ipfs nodes (pnet example) can chat with each other, and in addition checking that the pubsub traffic is visible in go-ipfs.
For UDP-based transports, there is no way to ensure that outstanding data is delivered in the event a transport is dropped.