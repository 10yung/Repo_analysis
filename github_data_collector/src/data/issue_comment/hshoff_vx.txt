Fixes https://github.com/hshoff/vx/issues/591

#### :rocket: Enhancements

- Migrate `vx-demo/src/components/charts/SimpleBar.js` to typescript

#### :memo: Documentation

- Update references to `vx-demo/src/components/charts/SimpleBar.js`

This seems possibly related to an old issue (#157) or the recent TypeScript rewrite, but I'm finding that with LegendThreshold, the last box isn't rendered. I have a scale with 5 breaks and thus (AFAIU) 6 colors. I built a base example with 2 workaround attempts [here](https://codesandbox.io/s/busy-smoke-iupm4?fontsize=14&hidenavigation=1&theme=dark). As a rundown:

* First version, just passing the 5-break, 6-color scale to LegendThreshold gives a legend with "Less than..." on the first box but no corresponding "More than..." on the last one. I checked that the scale is valid though by calling the scale function on a high value (see console log)
* Second version, explicitly adding 1.0 to the end of the scale domain. This works, but hardcoding an upper limit means there's no "more than..." which would be more appropriate for this type of scale
* Third version, based on the component's source code (at least the gist of it, I don't know TypeScript) was to add `null` to the end of the domain, but now the last box says "0.62More than" instead of "More than 0.62"

I should also mention that as another workaround, setting `labelUpper=' or higher'` works fine to get "0.62 or higher". Just wanted to bring up the fact that the default "More than 0.62" was broken.

Let me know if I'm misunderstanding something, or if I can help on it. Thanks in advance!
d3 supports a [square-root scale](https://github.com/d3/d3-scale#scaleSqrt), and it would be nice for VX to have something reflecting that.

d3's square-root scale is a convenience method that is a shortcut for a power scale with specific parameters, so achieving the desired effect may already be possible with the power scale in VX. But it would be nice to have that same shortcut for a common use case.
I have been following the move to TypeScript and saw that the Brush component has finally gotten some examples. Using `"0.0.193-alpha.2"` I tried out some of the demo code. Some of it worked, but `Brush` did not. Using it leads to:

```
JSX element type 'Brush' is not a constructor function for JSX elements.
  Type 'Brush' is missing the following properties from type 'ElementClass': context, setState, forceUpdate, props, and 2 more.ts(2605)
JSX element class does not support attributes because it does not have a 'props' property.ts(2607)
```

The issue here is the import of `React` inside `Brush.d.ts`: 
`import React from 'react';`

React apparently has no default export and TypeScript does not like or understand this, unless you set `"allowSyntheticDefaultImports": true`

`import * as React from 'react';` would be the correct import here that works and without setting this. Other typings import React the same way but didn't cause me any trouble. Still, maybe all imports of React should be adjusted.

Since I suck at TypeScript I could be wrong about the typings.

This Stackoverflow thread explains some of it:
https://stackoverflow.com/questions/55285737/import-as-react-from-react-vs-import-react-from-react
There is a `@vx/event` package but it has no description or examples. It might be helpful to add some documentation for it.
Need to make the changes in #588 for all packages
The constrain prop initially took a reference to the prop function constrain on mount, but then the function never updated when the prop function did.

This way the this.props.constrain function will always be the most recent reference. This is important when working with hooks and useCallback.

#### :boom: Breaking Changes

- Im not sure if this was intentional, after all it very well could be

#### :bug: Bug Fix

- I was going to make one, but decided to do a PR instead.

I have a use case for a brush that can be initialized with some state, more like a controlled component rather than an uncontrolled component (as it currently maintains it's own state).

For example on initial render there would already be a brushed area that the user can then drag to resize, rather than always starting from an un-brushed state.

I think this could be achieved by optionally passing in brush state rather than the brush managing it's own state. Is there appetite to support this use-case? I'm happy to submit a PR if so.
https://vx-demo.now.sh/areas
I'm having problems getting the bisector to work, so I have been following the Areas demo example code and stumbled across this. The following would error, right? Or is there yet another thing I'm missing?
```
const xStock = d => new Date(d.date);  // line 21
```
...then
```
d = x0 - xStock(d0.date) > xStock(d1.date) - x0 ? d1 : d0; // line 39
```
xStock(d0.date) // d.date is undefined
xStock(d1.date) // d.date is undefined

#### :bug: Bug Fix

Debounce calls can still fire after unmount, so we need to cancel them.
