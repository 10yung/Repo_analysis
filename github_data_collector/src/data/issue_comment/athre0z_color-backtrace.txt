I'm using color-backtrace along with rayon.

The trouble is that rayon produces absurdly long stack traces. I'm looking at one with 150 frames right now.

These long stack traces push my interesting stack traces way way up my scroll buffer.

I'd like to filter out the rayon stack frames. Its probably too much to task for color-backtrace to do it for me, but it'd be nice if I had the option to provide custom filtering logic.
`std::error::Error` has an experimental support for [providing a backtrace](https://doc.rust-lang.org/std/error/trait.Error.html#method.backtrace) of type `std::backtrace::Backtrace`. However color-backtrace accepts only types `backtrace::Backtrace` and `failure::Backtrace` in its printing functions.

Would it be possible to add support for the `std` variant as well? I'm not sure how hard it would be, because it doesn't expose its inner frames.
Using color-backtrace in a test gives the following output

![Screenshot from 2019-09-02 17-41-28](https://user-images.githubusercontent.com/1993852/64136776-eadc0b80-cda8-11e9-8a51-b761eb461b1e.png)

The last 5 lines are all pretty much useless in this context and, if possible, should be added to the list of ignored patterns in https://github.com/athre0z/color-backtrace/blob/master/src/lib.rs#L205 I believe.
~~I'm currently in the process of porting a project from `failure` to `SNAFU` to try it out and I'd like to be able to use color-backtrace with SNAFU backtraces. They also use an opaque wrapper type same as failure, though theirs is a much simpler wrapper, just a NewType, so doing the hacky failure style integration should be trivial.~~

~~I would however like to communicate with the SNAFU devs and the failure devs and the guy who works on std that I talked to last time who had plans for getting backtraces into the `std::error::Error` API and make sure everyone is on the same page so all the integration eventually gets done the right way.~~

Since it seems that SNAFU already has a way to extract the inner `backtrace::Backtrace`, I propose that `color-backtrace`'s README should be updated to document this fact, along side the existing notes on how to integrate with `failure`.

I'm planning on getting to this **soonish**
Currently panic handler colors std module into green and other modules into red, but in my opinion If add possibility to set user color for that match some pattern it will be very useful for fast detect where is the panic occured.