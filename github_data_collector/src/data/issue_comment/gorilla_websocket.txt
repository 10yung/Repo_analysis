
Fixes #

**Summary of Changes**

1. Fixed duration order consistency when multiplying number by time unit in conn.go

**Description :** 
When web socket client disconnect  due to network off, server not able to notify immediately. Server getting read time out error after specific amount of time(approx. 2 minutes).

**Versions:**
go version go1.13.4
socket connection : Gorilla web-socket

**My Code block for writing message to client.**

```
err := c.Conn.WriteJSON(message)
			if err != nil {
				log.Println("offline test: before adding offline msg to db ", message)
				database.StoreOfflineMessages(message)
				c.Conn.Close()
                     }
```

When writing message to client if any error come, those messages will be store in database.So when there is network off at client side and if any other client send message to client which has no network, server will still assuming that client is alive and sending messages.Because of that some data loss is happening.
Is there any solution to handle this in gorilla web-socket ?



Fixes a couple of small typo's in the example test docs.

**Summary of Changes**
Use empty struct instead of boolean for write protection
on connection.

*Motivation*
1. Using empty struct for signaling is more idiomatic
compared to booleans because users might wonder
what happens on false or true. Empty struct removes
this problem.

2. There is also a side benefit of occupying less memory
but it should be negligible in this case.





**Summary of Changes**

1. input autofocus

i'm too lazy to move my mouse
The `print` function adds text as `innerHTML`, but  the text is not HTML.  Use `textContent` instead.
![Xnip2019-12-17_14-32-54](https://user-images.githubusercontent.com/43042929/70970858-78cece80-20da-11ea-9939-cffce770e0a9.jpg)

**Describe the problem you're having**
> According to #188 - you have answered:
"The error indicates that the client did not set the frame-masked header bit to 1 as required by the protocol".
According to  the protocol: "All frames sent from client to server have this bit set to 1. "  
The RFC6455 protocol does not mention the following situation: 
sending frames from client to server over TLS. Sending and handling mask on top of those frames is unnecessary.
Also, Sending frames from client to server without mask can be done for example in node js that do not enforce this.
Do you have any suggestion to this missing implementation?
…

**Versions**
> Go version: `go version`

> package version: run `git rev-parse HEAD` inside the repo

…

**"Show me the code!"**
> A minimal code snippet can be useful, otherwise we're left guessing!
```
// 4. Handle frame masking.

	if mask != c.isServer {
		return noFrame, c.handleProtocolError("incorrect mask flag")
	}
```
> Hint: wrap it with backticks to format it

…
