### Proposal
When the `CURLOPT_COOKIEJAR` option is set, the following changes should be made:  
  
1. After each request is made, the `CookieContainer`'s contents should be serialized using the `CreateCookieArray()` format, and saved to the disk with file path declared in `CURLOPT_COOKIEJAR`  
  
2. Before each request is made, the contents of `CURLOPT_COOKIEJAR` file should be read and parsed, and put into the `CookieContainer`.
### Description
This issue causes an invalid header to be sent when using the `CURLOPT_ENCODING` option.  
(**Expected:** `Accept-Encoding`, **Actual:** `Accept` )

### Example code
```php
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, "http://httpbin.org/get");
curl_setopt($ch, CURLOPT_ENCODING, "gzip, deflate"); // ← here
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
$ret = curl_exec($ch);
var_dump($ret);
```

### php.exe
The request header set will be:
```
Accept-Encoding: gzip, deflate
```
which is correct.

### Peach Pie
The request header set will be:
```
Accept: gzip, deflate
```
which is not correct, and may cause the request to fail.

### Remarks
- e.g. IIS servers return HTTP 406 if the received `Accept` header from the client does not match the expected MIME
- This also causes the original `Accept` header to be reset from the default `*/*` value.

I was not able to find the cause of this in either [CURLFunctions.cs](https://github.com/peachpiecompiler/peachpie/blob/master/src/Peachpie.Library.Network/CURLFunctions.cs) or [CURLFunctions.cs](https://github.com/peachpiecompiler/peachpie/blob/master/src/Peachpie.Library.Network/CURLFunctions.cs).
The main contribution are the following semantic transformations:

- Removal of unnecessary copying:
  - Passing values of routine parameters
  - Copying local variables assigned between each other
  - Copying return values
- ```ord($s[$i])``` to ```(int)s[i]``` (not creating an intermediate one-byte string)
- ```isset($a[$i]) ? $a[$i] : fallback``` to ```TryGetItemValue($a, $i, out val) ? val : fallback```
- ```-1 * X```, ```X * -1``` to ```-X```
- ```empty($x)``` to false if ```$x``` is not initialized
- ```define("X", VALUE)``` to ```const X = VALUE```
- ```(IPhpCallable)[$this, "method"]```, ```(IPhpCallable)["SomeClass", "method"]```, ```(IPhpCallable)"someFunction"``` is now resolved in compiled time and cached in runtime

Related fixes and enhancements:

- The analysis reducing numbers to ```int``` works now for reverse loops as well (e.g. ```for ($i = 10; $i > 0; $i--) { ... }```).
- Added ```FixpointAnalysis<TContext, TState>``` for lightweight intraprocedural analyses (separated from the global analysis performed in the analysis phase), currently used to remove unnecessary copying.
- Introduced ```SingleBlockWalker<T>``` as a step between ```GraphVisitor<T>``` and ```GraphWalker<T>```.
- Updated ```BuilderVisitor``` to produce CFG with continuous block ordinals (some of the "allocated" ordinals weren't originally used by being overwritten).
- Other smaler updates.
Hi, developers.

Thank you for such an amazing `peachpie`. I have resolved many `Type name could not be resolved.` issue in my peachpie project and it all most works.

But finally the remaning issues are all `error PHP4042: Yielding from an exception handling construct (try, catch, finally) is currently not
supported by PeachPie.`. Such as

>/root/projects/PeachPie.Test/Website/3rdparty/symfony/cache/Adapter/FilesystemTagAwareAdapter.php(161,21): error PHP4042: Yielding from an exception handling construct (try, catch, finally) is currently not
supported by PeachPie. [/root/projects/PeachPie.Test/Website/Website.msbuildproj]
···

It seems like these php packages use the grammar unsupported by peachpie. Do you have any plan to do this? Or, is there anything I could do to help you. (I write .Net)


While invert and days seems to be correct now, other values seem to be always 0. As an example d should be in the range of 0 to 30, but not 56 as shown below. Taking the example from below m should be set to 1 and d to something between 25 and 28 (depending on input parameters).

see https://www.php.net/manual/en/class.dateinterval.php

  | Name | Wert | Typ
-- | -- | -- | --
◢ | diff | DateInterval | object
  | ▶ _span | {56.00:00:00} | System.TimeSpan
  | d | 56 | int
  | days | 56 | int
  | f | 0 | double
  | h | 0 | int
  | i | 0 | int
  | invert | 0 | int
  | m | 0 | int
  | s | 0 | int
  | y | 0 | int

_Originally posted by @jan-ai in https://github.com/peachpiecompiler/peachpie/issues/577#issuecomment-572320071_
Currently, Peachpie only supports [Mssql — Microsoft SQL Server](https://www.php.net/manual/en/book.mssql.php). This extension is removed in PHP 7 (https://www.php.net/manual/en/intro.mssql.php).
Can you add support for [SQLSRV — Microsoft SQL Server Driver for PHP](https://www.php.net/manual/en/book.sqlsrv.php)?
Currently compiler (CodeAnalysis) provides it's own ErrorCode and also error code from underlaying parser, runtime has it's PhpException and libraries own error messages.

Suggesting to merge all the errors/warnings/notices into a single assembly (Peachpie.Errors?) since analysis provides the same errors as used in runtime, and for sake of a better overview. Also it might help for future localizations.
Sample:
```
$datetime = DateTime::createFromFormat("Y-m-d", "00-01-01");

echo var_dump($datetime) . "\r\n";
```

PeachPie output:
```
Unhandled Exception: System.ArgumentOutOfRangeException: Year must be between 1 and 9999.
Parameter name: year
   at System.DateTime.IsLeapYear(Int32 year)
   at System.DateTime.DaysInMonth(Int32 year, Int32 month)
   at Pchp.Library.DateTime.DateInfo.CheckOverflows(Int32 y, Int32 m, Int32& d, Int32& h, Int32& days_overflow)
   at Pchp.Library.DateTime.DateInfo.GetDateTime(Context ctx, DateTime utcStart)
   at Pchp.Library.DateTime.DateTime.createFromFormat(Context ctx, String format, String time, DateTimeZone timezone)
   at <Root>.main_php.<Main>(Context <ctx>, PhpArray <locals>, Object this, RuntimeTypeHandle <self>) in /mnt/c/Development/laravel-peachpie-sample/Laravel.Tests/main.php:line 32
   at <Script>.Main(String[] args)
```

PHP output:
```
object(DateTime)#1 (3) {
  ["date"]=>
  string(26) "0000-01-01 13:35:46.000000"
  ["timezone_type"]=>
  int(3)
  ["timezone"]=>
  string(13) "Europe/Berlin"
}
```
chown(...) is not supported
Changing the target of a PeachPie project from .NET Core to .NET Framework causes the following problems

1 - The exe won't run due to 'SixLabors.Core' not meeting the Strong Name requirements (other PeachPie libraries use a strong name)

Workaround for 1:
```
snremove.exe -r *.dll
```

2 - The exe still won't run: `System.BadImageFormatException: The module was expected to contain an assembly manifest.` on PeachPie.Runtime.dll

UPDATE:
I got it working by taking the PeachPie snk, https://github.com/brutaldev/StrongNameSigner
and resigning the following assemblies

- PeachPie.Library.Graphics.dll
- SixLabors.Core.dll
- SixLabors.ImageSharp.dll

So the issue is about SixLabors not being signed, and PeachPie.Library.Graphics requiring it

PeachPie version: 0.9.46
.NET Framework version targeted: 4.7.2