https://issues.redhat.com/browse/UNDERTOW-1638
â€¦lash

Issue: https://issues.redhat.com/browse/UNDERTOW-1637

@fl4via could you please review? Alternatively the redirect could be handled in https://github.com/undertow-io/undertow/blob/master/servlet/src/main/java/io/undertow/servlet/handlers/ServletInitialHandler.java#L140, but doing that would undo https://issues.redhat.com/browse/UNDERTOW-1578 for requests to root context
Implemented a new BlockingTimeoutHandler which can be configured
with I/O timeouts for blocking read and write operations.

This approach limits the time that may be spent in awaitReadable
or awaitWritable to apply to only blocking operations without requiring
invasive code change.

When build benchmarks module without `jmh-generator-annprocess` dependency I got
```
Exception in thread "main" java.lang.RuntimeException: ERROR: Unable to find the resource: /META-INF/BenchmarkList
        at org.openjdk.jmh.runner.AbstractResourceReader.getReaders(AbstractResourceReader.java:98)
        at org.openjdk.jmh.runner.BenchmarkList.find(BenchmarkList.java:122)
        at org.openjdk.jmh.runner.Runner.internalRun(Runner.java:263)
        at org.openjdk.jmh.runner.Runner.run(Runner.java:209)
        at org.openjdk.jmh.Main.main(Main.java:71)
```
This is fix request.

Hi @stuartwdouglas, @fl4via,

Please review and provide feedback on my first stab at resolving the [UNDERTOW-1464](https://issues.redhat.com/browse/UNDERTOW-1464)! Some notes on the code
* The PR puts all matrix parameters in the path parameter collection and makes no difference between the two `p1` matrix parameters in the following example
  ```
  /some;p1=v1/path;p1=v2
  ```
  An alternative implementation could take into account the fact that these are really two separate parameters, perhaps by using the canonical path as a namespace which would give the following two variable names:
  ```
  /some;p1
  /some/path;p1
  ```
* The current PR does not include support for comma separated values, I will add that shortly if you think this PR is going anywhere.
  ```
  /some;p1=v1,v2
  ```
* The `result.getRequestPath()` returns the canonical path without the matrix parameters and the `result.getRequestURI()` returns the URI including the matrix parameters. Maybe the path should include the parameters as well? Not sure what's best, thoughts?

References:
* [Matrix URLs](https://www.w3.org/DesignIssues/MatrixURIs.html) as first discussed by Tim Berners Lee...
Added two new UndertowOptions:
- `BLOCKING_READ_TIMEOUT`: The amount of time in milliseconds a single
  blocking read operation may take before a timeout IOException is thrown.
  Unlike Options.READ_TIMEOUT this only applies to blocking operations
  which can be helpful to prevent the worker pool from becoming saturated
  when clients stop responding.
- `BLOCKING_WRITE_TIMEOUT`: The amount of time in milliseconds a single
  blocking write operation may take before a timeout IOException is
  thrown. Unlike Options.WRITE_TIMEOUT this only applies to blocking
  operations which can be helpful to prevent the worker pool from becoming
  saturated when clients stop responding.

A version of `xnio-api` containing the fix for [XNIO-356](https://issues.redhat.com/browse/XNIO-356) is required
for these options to work correctly, otherwise erronious timeouts
may be reported when channel.await{Readable,Writable} returns
spuriously.

This commit does not apply the write timeout to Channels.flushBlocking
invocations because that will require either a local utility class
to support flushBlocking with a timeout, or a backport of [XNIO-357](https://issues.redhat.com/browse/XNIO-357).
https://issues.jboss.org/browse/UNDERTOW-1600
Hi
I added a little more security to the Forwarded and ProxyPeerAddress handlers, to allow only specific proxies by IP.

I hope this feature also will be useful for others.

Moved peer matching logic from IPAddressAccessControlHandler to PeerMatcher.
Added support for filtering Forwarded headers source peers.


