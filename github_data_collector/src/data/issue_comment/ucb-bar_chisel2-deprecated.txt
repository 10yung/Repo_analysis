Links to documentation repo is dead :(
Attached is [verilator_bug.zip](https://github.com/ucb-bar/chisel/files/798543/verilator_bug.zip), a tiny example that produces the error message below when you run "sbt run". 

There's not much that can be removed or changed before the problem disappears.

Error from "sbt run":

`doohickey-harness.cpp:115:62: error: ‘class Vdoohickey’ has no member named ‘doohickey__DOT__thingamabob_15_1__DOT___T_23’
         sim_data.signals.push_back(new VerilatorCData(&(dut->doohickey__DOT__thingamabob_15_1__DOT___T_23[i])));
`


Hi, 

I am using Synopsys tool to synthesize a verilog netlist generated from Chisel implementation. 
Tool is not able to map any library cells to reg_files of Queue creating sequential generated structures (named SEQGEN in synthesized netlist)

PS:I have checked completeness of library used.  

Has anybody seen similar issue?

Thanks & Regards,
Preyas

With the following verilog, the always @(*) is interpreted as trigger on all input changes. However as there are no inputs, this never triggers. Hence it has the value xxx. This pr is a bit hacky but gets round it by changing the declaration to set the reg to an initial value.

``` verilog
reg [3:0] T0;
 always @(*) case (2'h2)
    0: T0 = 4'h3;
    1: T0 = 4'h1;
    2: T0 = 4'h5;
    3: T0 = 4'h8;
    default: begin
      T0 = 4'bx;
`ifndef SYNTHESIS
// synthesis translate_off
      T0 = {1{$random}};
// synthesis translate_on
`endif
    end
  endcase
```

instead have

``` verilog
reg [3:0] T0 = 4'h5;
```

Added arguments to blackbox which are passed through to the module so the clock can be specified in essentially the same way.

Running into warnings:

```
[info] Compiling 66 Scala sources to /home/drom/work/github/usb-bar/chisel/target/scala-2.11/classes...
[info] 'compiler-interface' not yet compiled for Scala 2.11.7. Compiling...
[info]   Compilation completed in 14.46 s
[warn] /home/drom/work/github/usb-bar/chisel/src/main/scala/Parameters.scala:455: abstract type T in type pattern Chisel.Ex[T] is unchecked since it is eliminated by erasure
[warn]           case e:Ex[T] => e
[warn]                  ^
[warn] /home/drom/work/github/usb-bar/chisel/src/main/scala/Parameters.scala:270: abstract type T in type pattern Chisel.Knob[T] is unchecked since it is eliminated by erasure
[warn]           case k:Knob[T] => ExVar[T](_VarKnob[T](k.name))
[warn]                  ^
[warn] /home/drom/work/github/usb-bar/chisel/src/main/scala/Parameters.scala:271: abstract type T in type pattern Chisel.Ex[T] is unchecked since it is eliminated by erasure
[warn]           case ex:Ex[T] => _bindLet[T](pname,ex)
[warn]                   ^
[warn] three warnings found
```

Not sure how critical, or important.

Fresh git clone. Running `sbt run` getting this error:

```
drom@drom:~/work/github/usb-bar/chisel> ~/programs/sbt/bin/sbt run
[info] Loading project definition from /home/drom/work/github/usb-bar/chisel/project
[info] Set current project to chisel (in build file:/home/drom/work/github/usb-bar/chisel/)
[info] Running Chisel.SCWrapper 
Error writing file generated/generated.cpp

Exception: sbt.TrapExitSecurityException thrown from the UncaughtExceptionHandler in thread "run-main-0"
java.lang.RuntimeException: Nonzero exit code: -1
        at scala.sys.package$.error(package.scala:27)
[trace] Stack trace suppressed: run last compile:run for the full output.
[error] (compile:run) Nonzero exit code: -1
[error] Total time: 1 s, completed Sep 12, 2016 12:05:25 PM
```

Any guidance how to fix?

**Feature request:** It would be nice to mux Bundles in when statements, e.g.,

```
when (somesignal) {
  bundle <> otherBundle
}
.otherwise {
  bundle <> defaultBundle
}
```

The idea would be to generate a bunch of 

```
bundle.x := Mux(somesignal, otherBundle.x, defaultBundle.x)
...
```

statements. This would save a lot of typing, e.g., in arbiting xbars with large protocols (AXI, Wishbone, ...).

I guess that won't be as easy as it sounds since there's a lot of special cases to be caught, but I think it would be very useful. In case you can't support it, it would also be helpful to generate a **compiler error** for the code above.

``` scala
class UserMod( bw : Int ) extends Module {
     val io = new Bundle {
       val in = UInt( INPUT, bw )
       val out = UInt( OUTPUT )
     }
     val r = RegNext( UInt( width = io.in.getWidth() ).fromBits(io.in) )
     println( r.getWidth() )
     io.out := r
}
```

This gives:
Chisel.GetWidthException: getWidth was called on a Register or on an object connected in some way to a Register that has a statically uninferrable width
This is fine however:

``` scala
class UserMod( bw : Int ) extends Module {
     val io = new Bundle {
       val in = UInt( INPUT, bw )
       val out = UInt( OUTPUT )
     }
     val r = RegNext( io.in )
     println( r.getWidth() )
     io.out := r
}
```
