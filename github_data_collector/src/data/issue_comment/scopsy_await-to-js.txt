Using 

- node v12.13.1
- yarn 1.19.2
- Windows 10

The following code should return `[undefined, [Object object]]`

```javascript
const Promise = require("bluebird");
const WebTorrent = require('webtorrent');

// Create the torrent client
const client = new WebTorrent();

// Make promises
client.addAsync = Promise.promisify(client.add);

const [err, data] = await to(client.addAsync(magnet, { path: pathToSave }));
```

In this example, err is the data i want, and data is undefined......
Currently, we use copy errorExt to the err object if we have an errorExt.
This is cleaner, more functional and more understandable with an early return
based on await-to-js, I wrote a [wait-to-decorater](https://www.npmjs.com/package/await-to-decorater) to help you better handle asynchronous logic~, maybe you can try
Issue - https://github.com/scopsy/await-to-js/issues/36
Hello everybody! I have a problem with your cool library. Â When i wrap my Promise in the function, i need to get only response, without error. Like that:
`
const [_, res] = await to(
		this.rootStore.apiStore.request({
			url: URLS.SIGN_IN,
		}),
);
if (!res) return false;
`

But my ESLint prints a warning:
`
'_' is assigned a value but never used
`

I expect this error but I didn't understand how to properly handle it.
To improve this library, I'm ready to suggest you use Object as returned value instead of Array.
And I mean this should work like that:
`
const {
  error,
  data: response,
} = await to(fetch('some-api'));
` 

In this case, it will be possible to use one of the returned values without problems and also to save the ability to custom name variables.

I created PR about this issues - https://github.com/scopsy/await-to-js/pull/37
Also in this PR:
1. Dependency update
2. Change tslint to eslint as it seems to work better now
3. Add nvmrc file to 'kind of' lock the node version and sugest using one

Added almost exact clone of `to` method that doesn't have a second argument + an extra if condition.
I almost love this library. I hate the second argument.

Every catch will result in running an if condition. Just too costly for my blood.

I looked at [await-of](https://www.npmjs.com/package/await-of) and it has no IF but it returns with the value first and the error second. Hate that more but it has no inner IF logic.

I looked at [await-on](https://www.npmjs.com/package/await-on) and thats just a no no no no.

Would you accept a pull request if I added another function that does all the same EXCEPT for no second argument and no catch IF condition?
Hello, I wanted to reference a previously closed issue:  https://github.com/scopsy/await-to-js/issues/14

I just tested the following code and was still getting type errors:

```
const waiter = (): Promise<boolean> => Promise.resolve(true);

const test = async (): Promise<boolean> => {
  const [err, res] = await to<boolean>(waiter());
  if (err) {
    return false;
  }

  return res;
};
```
Typescript complains that `res` may be `undefined`. But since we have handled the error case we know that `res` is defined.

Thank you

Hi, I tried your repo in my little crypto project

I use ccxt:
```
const ccxt = require('ccxt')
let log = require('electron-log')
let to = require('await-to-js')

async withdraw(currency, amount, address, tag = null) {
      let exchange = new ccxt.bitstamp(myApiKey)
      let error, response
      [error, response] = await to(exchange.withdraw(currency, amount, address, tag))
      log.info(error)
      log.info(response)
      return response || error
}
```

When I call my withdraw function and I try to withdraw 5 ripple (and I know it should generate an error), I still get:

(node:18252) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): TypeError: to is not a function
(node:18252) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
(node:18252) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 3): Error: bitstamp {"status":"error","reason":{"amount":["Ensure this value is greater than or equal to 20."]}}

Ideally I'd like to return either the response or the error.

Ideas why this doesn't work? Looking at your documentation I was expecting this repo to handle the errors. Thanks for any help.