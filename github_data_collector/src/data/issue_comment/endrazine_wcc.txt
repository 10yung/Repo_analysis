Thanks for your work on `wcc`. I'd been looking for an excuse to try it out and had the opportunity to use it recently.

Hit a couple of issues along the way so thought I'd mention them.

The app[*] I was investigating was C++ based but I discovered that the `wsh` C++ symbol demangling functionality appears to have been disabled at some point.

My current understanding is:

 * Symbols *are* actually demangled here: https://github.com/endrazine/wcc/blame/083662b2c80d568c84740cf8972db55287ed887f/src/wsh/wsh.c#L2544-L2547

 * But the code that does anything with the demangled symbol has been commented out [here](https://github.com/endrazine/wcc/blame/083662b2c80d568c84740cf8972db55287ed887f/src/wsh/wsh.c#L2595-L2609) which was added (already commented out) in https://github.com/endrazine/wcc/commit/ef6e1b097efc788837a9da312e637f440bede69a#diff-3acd3456f9c5a5226fb32e4c93be467cR2578.

 * In addition, the code that prints out the demangled symbol seems to have always been commented out: [here](https://github.com/endrazine/wcc/blame/083662b2c80d568c84740cf8972db55287ed887f/src/wsh/wsh.c#L1068) & [here]( https://github.com/endrazine/wcc/blame/083662b2c80d568c84740cf8972db55287ed887f/src/wsh/wsh.c#L1211)

Unsure if this is in any way related to #24.

It would be useful to have access/visibility into the demangled symbols so hopefully this information will give someone (maybe me? :D ) a starting point to enabling this.

----

[*] Funny story: So, the app I was poking around in was KiCad--the FLOSS electronic design software--which is implemented via the `wxWidgets` framework. Currently there's no way to automate the schematic-related functionality so I wondered if `wcc` might help provide a way to do so. Only to *eventually* discover that KiCad currently implements its core functionality as a (somewhat non-standard) shared library already! :D (Although, given how it's implemented, *using* the functionality still seems like a non-trivial task...)
Running wsh on binaries with non-alphanumeric symbols (e.g. the mangled ones produced by rustc) results in output like
```
ERROR: Wsh internal lua initialization (Synthax Error): Wsh internal lua buffer:2070: '(' expected near '$'
```
 which refers to this line in the generated lua:
```
function _ZN4core3num68_$LT$impl$u20$core..convert..TryFrom$LT$i16$GT$$u20$for$u20$u128$GT$8try_from17h890e52784dfa2181E (a, b, c, d, e, f, g, h) j,k = libcall(reflect__ZN4core3num68_$LT$impl$u20$core..convert..TryFrom$LT$i16$GT$$u20$for$u20$u128$GT$8try_from17h890e52784dfa2181E, a, b, c, d, e, f, g, h); return j, k; end
```

It might be nice to support demangling, though that may complicate parsing (angle brackets, parentheses, and colons would be valid in symbol names); in any event it would be nice for these symbols to not prevent wsh from running.
I did cleaned it up and ended up with these 2 commits only.