Looking at the specs of 'windows-latest' image, it contains the following Selenium Web Drivers.

- Chrome
- Gecko
- IE
https://github.com/actions/virtual-environments/blob/master/images/win/Windows2019-Readme.md

Would it be possible to support Edge since that is the standard for windows?  I have a Driver test that relies on Edge using CI Azure Pipeline.  Thanks!

Here is the error I get in my CI:
```
ERROR: The process "MicrosoftEdge.exe" not found.
```
Software Updates Week 3

- curl 7.68.0 (x86_64-apple-darwin17.7.0) libcurl/7.68.0 SecureTransport zlib/1.2.11
- Bundler version 2.1.4
- fastlane 2.140.0
- azure-cli 2.0.79
- Go 1.13.6
- NVM - Installed node versions:
- v10.18.1
- v12.14.1
- v13.6.0
- macOS toolcache Python 2.7.17 3.5.9 3.6.10 3.7.6 3.8.1
- macOS toolcache Ruby 2.4.9 2.5.7 2.6.5
- Google Chrome 79.0.3945.117
- Android Emulator 29.3.4
My team would like to use Azure Devops to build our iOS project. We have a custom configuration script (written in ruby) which generates some config files, build 3rd party dependencies, download translate files, etc.
When we execute it in local, everything is fine, but if we use Azure Devops Agent for build we got strange errors. For example empty generated file, but no error message on console or random build error when building one of the dependencies (we use carthage for dependency management). First we used Microsoft hosted agents, than we created a self hosted agent, but no success. I tried to execute the config script on that computer which holds the self hosted agent and I got a success build, just like in every other teammate's computer.
The agent version is 2.163.1, and as far as I know this is the latest version at that moment.
We started to debug our configuration script, but we can't find any related issue.

After that I looked what is inside the agent :)
If I understand correctly the tasks are written in js and there is a node module, shelljs which "translates" the tasks to bash script. The version of this module is 0.3.0, which is very old. This module is a dependency of vso-task-lib, which version is 0.5.5, which is deprecated. I'm afraid this version contains bugs and maybe this cause that strange errors.

Can someone give me some information about this?
<!--- PLEASE USE THIS REPO FOR REQUESTS RELATED TO THE WINDOWS CONTAINER IMAGE -->
<!--- The other images have moved to https://github.com/actions/virtual-environments -->

**Tool information**
- Tool name: Windows Server 2019
- Add or update? Update
- Desired version: 1909
- If this is an add request:
  - Brief description of tool: <!--- description -->
  - URL for tool's homepage: <!--- url -->

**Areas and ecosystems**
<!--- This helps us route to the right owner: check one or two, don't worry about getting it perfect -->

- [ ] Android
- [ ] C / C++
- [X] Container tools
- [ ] Database servers or clients
- [ ] General purpose tools
- [ ] Go
- [ ] Java
- [ ] Javascript, Node.js, and TypeScript
- [ ] iOS, macOS, and Apple-specific tools
- [ ] .NET Core or .NET Desktop
- [ ] PHP
- [ ] Python
- [ ] Ruby
- [ ] Rust
- [ ] Scala
- [ ] Testing and code coverage
- [ ] Xamarin
- [ ] Other

**Image impacted**
WINCON
<!--- PLEASE USE THIS REPO FOR REQUESTS RELATED TO THE WINDOWS CONTAINER IMAGE -->
<!--- The other images have moved to https://github.com/actions/virtual-environments -->

**Workaround**
<!--- Are there any workarounds (e.g. install during the build even though it adds time to the build)? -->
No

**Are you willing to submit a PR?**
<!--- We accept contributions! -->
Yes.
<!--- PLEASE USE THIS REPO FOR REQUESTS RELATED TO THE WINDOWS CONTAINER IMAGE -->
<!--- The other images have moved to https://github.com/actions/virtual-environments -->

**Tool information**
- Tool name: Python
- Add or update? update
- Desired version: [3.8.1](https://www.python.org/downloads/release/python-381/)

**Areas and ecosystems**

- [ ] Android
- [ ] C / C++
- [ ] Container tools
- [ ] Database servers or clients
- [ ] General purpose tools
- [ ] Go
- [ ] Java
- [ ] Javascript, Node.js, and TypeScript
- [ ] iOS, macOS, and Apple-specific tools
- [ ] .NET Core or .NET Desktop
- [ ] PHP
- [X] Python
- [ ] Ruby
- [ ] Rust
- [ ] Scala
- [ ] Testing and code coverage
- [ ] Xamarin
- [ ] Other

**Image impacted**
WINCON

**Add. information**
It seems like Python `3.8.1` fixes some issues with libraries like `PySide2`, which successfully run under `3.8.1` but [fail under `3.8`](https://stackoverflow.com/a/59346517/2889970). This may potentially enable some CIs to pass again.
I am unable to use the Az.ManagedServiceIdentity with PowerShell because it requires Az.Accounts 1.6.5. This has recently stopped working, so I imagine there's a new version of Az.ManagedServiceIdentity which requires version 1.6.5 of Az,Accounts. The latest version available in hosted agents seem to be 1.6.2.

The same seems to have happened in the past with version 1.6.2. #1258 

Here's the error message I get upon issuing the following commands: 
Install-Module Az.ManagedServiceIdentity -Force
Import-Module Az.ManagedServiceIdentity

"This module requires Az.Accounts version 1.6.5. An earlier version of Az.Accounts is imported in the current PowerShell session. Please open a new session before importing this module. This error could indicate that multiple incompatible versions of the Azure PowerShell cmdlets are installed on your system. Please see https://aka.ms/azps-version-error for troubleshooting information."
Visual Studio 16.4 has some nasty bugs related to codegen, causing our environment to completely break.

https://developercommunity.visualstudio.com/content/problem/843918/wrong-code-generation-in-1640.html

https://developercommunity.visualstudio.com/content/problem/844870/bad-codegen-after-update-to-vc-2019-1640.html

https://developercommunity.visualstudio.com/content/problem/842917/error-c3538-when-using-scoped-lock-in-derived-temp.html

The last one we can work around, but the first 2 are completely broken with no workarounds. There should be an option to revert to prior VS versions if major bugs like this occur.

**Tool information**
- Tool name: cmake
- Add or update? update
- Desired version: minimum 3.13 but newer is better

**Areas and ecosystems**
My project requires target_link_directories, which was introduced in cmake 3.13. Current cmake version on ubuntu-latest hosted agent is 3.12.4

- [ ] Android
- [x] C / C++
- [ ] Container tools
- [ ] Database servers or clients
- [ ] General purpose tools
- [ ] Go
- [ ] Java
- [ ] Javascript, Node.js, and TypeScript
- [ ] iOS, macOS, and Apple-specific tools
- [ ] .NET Core or .NET Desktop
- [ ] PHP
- [ ] Python
- [ ] Ruby
- [ ] Rust
- [ ] Scala
- [ ] Testing and code coverage
- [ ] Xamarin
- [ ] Other

**Image impacted**
ubuntu-latest

**Are you willing to submit a PR?**
Yes if I get a pointer where to start

**Describe the bug**
The bug is that our project is based on .Net Core 3.0. I tried running the same command for testing i.e. 
```
"C:\Program Files\dotnet\dotnet.exe" test D:\a\1\s\proj\50\Business.Tests\Business.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/coverage
```
The above command runs fine on Windows 2019 with VS 2019 agent but fails to run on the Ubuntu 18.04 agent which also has .Net Core 3.0 available. Do note that the `dotnet publish` task for another project based on .Net Core 3.0 works fine on both agents.

We are using the `dotnet` task in the pipeline v2.

**Expected behavior**
It should run fine on both agents (Linux/Windows) since both have .Net Core 3.0.

**Actual behavior**
A description with steps to reproduce the issue.

1. Create a testing project targeting .Net Core 3.0 with some sample unit tests.
2. Try running the CI pipeline with the above task and paramters.
3. The task fails on Ubuntu 18.04 but works fine on Windows 2019 with VS 2019.

The task output I get is as below -
```
Starting: Dotnet Run Code Coverage Analysis
==============================================================================
Task         : .NET Core
Description  : Build, test, package, or publish a dotnet application, or run a custom dotnet command
Version      : 2.158.1
Author       : Microsoft Corporation
Help         : https://docs.microsoft.com/azure/devops/pipelines/tasks/build/dotnet-core-cli
==============================================================================
/usr/bin/dotnet test /home/vsts/work/1/s/proj/50/Business.Tests/Business.Tests.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/coverage
/home/vsts/work/1/s/proj/50/Business.Tests/Business.Tests.csproj : error MSB4236: The SDK 'Microsoft.Net.Sdk' specified could not be found.
##[error]Error: The process '/usr/bin/dotnet' failed with exit code 1
##[error]Dotnet command failed with non-zero exit code on the following projects : /home/vsts/work/1/s/proj/50/Business.Tests/Business.Tests.csproj
Finishing: Dotnet Run Code Coverage Analysis
```

**Image impacted**
Ubuntu 18.04

**Describe the bug**
Tasks are failing on the windows-2019 image while executing the PowerShell script that throws a warning message. The same script is running successfully on the windows-2016 image.

It seems like the issue is with Powershell version 5.1.17763 installed in windows-2019. The warning messages are written to the error stream return 1 as exit code instead of 0 resulting in the task to fail. 

**Expected behavior**
Powershell scripts should not fail on the warning messages.

**Actual behavior**
Powershell scripts fail on the warning messages.

**Image impacted**
windows-2019

This issue was reported in multiple channels
[Azure pipeline task repo](https://github.com/microsoft/azure-pipelines-tasks/issues/11543)
[Developer Community](https://developercommunity.visualstudio.com/content/problem/752118/az-cli-reports-warnings-that-breaks-releases.html)