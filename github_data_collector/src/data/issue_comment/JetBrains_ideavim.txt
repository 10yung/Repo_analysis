This PR extracts all of the key handler state from `KeyHandler` and moves it to per-editor. Some state was already per-editor, and some was global, which lead to weird bugs like typing `3d` in one editor, switching to another and typing `2w` and deleting a load of text.

This PR also fixes:
* [VIM-1284](https://youtrack.jetbrains.com/issue/VIM-1284) by allowing numbers to be mapped, while still handling `0`, which can't be mapped, as per Vim (see [:help :map-modes](https://vimhelp.org/map.txt.html#%3Amap-modes))
* A bug with counts, e.g. `3d2w` would delete 32 words instead of 6.
* The way digraphs and literals key strokes are handled, meaning `<C-K>` and `<C-V>`/`<C-Q>` can be remapped
I implemented CTRL-N and CTRL-P in the command mode.
Fixes https://youtrack.jetbrains.com/issue/VIM-1008
It passes all tests but implementation is rather inefficient
Implementation for `:normal` command.
https://youtrack.jetbrains.com/issue/VIM-830

---
Currently, the `<Esc>`, `<C-A>`, etc. commands could be entered as they are (e.g. `:norm iHelloWorld<Esc>`). Entering such commands in the vim-way will be possible after the implementation of  `i_CTRL-V` command.
This is my attempt to fix [VIM-987](https://youtrack.jetbrains.com/issue/VIM-987).

The IDE itself does something slightly different at the moment (see [here](https://github.com/JetBrains/intellij-community/blob/master/platform/platform-impl/src/com/intellij/ui/KeyStrokeAdapter.java#L85-L126)) while `JComponent#processKeyBindings(KeyEvent, boolean)` falls back on the "normal" key code when it finds no matching binding (I'd like to link the source here, but it seems to be only available as scrs.zip).

Because I don't know if I break something else with this change and I want to see if I get a response on  [IDEA-197762](https://youtrack.jetbrains.com/issue/IDEA-197762), I prefaced this with WIP.
I the meantime I am testing this change on my system.

Any feedback would be appreciated.
This is a "port" of VIMs [argtextobj.vim](https://vim.sourceforge.io/scripts/script.php?script_id=2699) script. It adds two new text objects `ia` and `aa` that represent an function argument. This implementation also supports angle brackets and curly braces which is handy for C++ templates and Java generics and C++ brace initialization lists.