Examples:
- `apple apple`:
  - Score: 3/4
- `apple apple `: (note the trailing space)
  - Score: 1/4
- `apple apple apple`
  - Score: 2/4

Especially the first example seems way off.
Hi, in the script `build_keyboard_adjacency_graphs.py`, `\|` was put at the end of the second line of the qwerty keyboard ; however, this key is actually at the bottom left of such a keyboard… Why was it done this way ?? And we can’t just change its location to the bottom left without also changing the code since it uses a shift of 1 position for every new line (`slant = y - 1 if slanted`), so this doesn’t work because the last line starts further to the left than the second-to-last line.
For example, `assboommoosemargaret` seems to work fine, showing 4 dictionary matches. However, if I add another dictionary word, it fails on the first word. For example, `assboommoosemargaretlook` does not recognize the first word and lumps the first two words into one brute force pattern. What's going on here?
The dictionary oddly leaves out common words like "cow" (tho "cows" seems to be in the dictionary). I recommend including a much broader dictionary step. I would imagine that actual password cracking techniques will go through words in order of assumed commonality. This vastly overestimates the security of passwords that contain words this dictionary set doesn't happen to contain. It would be best to contain a more realistic set of dictionary words.
Fast hash threat model assumes 2^58.13 hashes per year ([math](https://www.wolframalpha.com/input/?i=log2%28%2810+billion+per+second+in+years%29+*+year%29)). In [Towards Reliable Storage of 56-bit secrets in human memory](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/SecretsInHumanMemory_Extended.pdf) the researchers estimate an attacker could hit 2^70 SHA256 hashes per year at a cost of US$1M in 2013 (pg 2) based off of bitcoin hash rates, which seems a very reasonable metric.

To match that alone, the 10 billion / second would need to upgrade to 40 trillion / second [(math)](https://www.wolframalpha.com/input/?i=log2%28%2840+trillion+per+second+in+years%29+*+year%29) (US style affixes).

I've not analyzed the slow hash times to see if I'd agree with them, but I'd gather they can be safely derived from the fast hash times, assuming bcrypt et al - per the above paper, adding 14-16 bits might be safe. Actually, using the original 2^58 per year, we have over 100k / second with 16 bits added ([math](https://www.wolframalpha.com/input/?i=2%5E%2858-16%29+per+year+in+seconds)) or (rounding up for pessimism) about 1B / second for the 2013 2^70 / year figures ([math](https://www.wolframalpha.com/input/?i=2%5E%2870-16%29+per+year+in+seconds)).

On the other hand, your estimates might be entirely reasonable depending on the attacker. What are the attacker's presumed capabilities?

In an unrelated note, I think 100 / second might be equally feasible for an unthrottled online attack, given my experiences with negligent server administrators and poor password storage. It seems feasible with increasing bandwidth and server speeds that the unthrottled online attack also might change, though perhaps more slowly than offline attacks.

Contrariwise, the throttled online attack might well be much reduced from 100/hour - in the case of a debit card PIN for example, the limit is traditionally just 3 attempts before non-temporal lockout. Often systems have a much lower lockout throttle than 100/hour (though, being pessimistic is better than optimistic).

Current bitcoin hashrates appear to have peaked at time of this bug report at around 110,000,000 TH/s - or over 100 million trillion hashes, 1.10 * 10^20. That was on the 23nd of October ([one source](https://bitinfocharts.com/comparison/bitcoin-hashrate.html)). [Same site ](https://bitinfocharts.com/comparison/bitcoin-mining_profitability.html) estimates an income of 0.149 per TH for the same date, for an approximate cost in late 2019 of $54.38 USD per TH/s ([math](https://www.wolframalpha.com/input/?i=%28110%2C000%2C000+terahash+per+second%29+*+%28%240.149+USD+per+day+per+%28terahash+per+second%29%29+in+years+%2F+110000000)).

If an attacker has $1,000,000 to spend in 2019 for a year of cracking, they can crack approximately 5.8 * 10^23 hashes that year ([math](https://www.wolframalpha.com/input/?i=%241000000+%2F+%28%28%240.149+USD+per+day+per+%28terahash+per+second%29%29+in+years%29)) which is about (wolfram alpha finally gave up on my odd equations)   79 bits ([math](https://www.wolframalpha.com/input/?i=log2%285.799+*+10%5E23%29)) of entropy in a year.

Possibly the attacker wants to spread the cracking around to multiple accounts, or has less than $1,000,000 (or more than $1,000,000) to spend. If we give the attacker 100 times more money to attack 10,000 accounts (both somewhat reasonable pessimistic assumptions) the numbers thankfully cancel out reasonably leaving about 72.3 bits of true entropy cracked for each of 10,000 accounts in a year with a USD $100,000,000 system. (Can add the log2 of the ratio between money multiplies and accounts multiplier - ie, log2(100 / 10000) for $100M USD and 10,000 accounts to play with money/spread easily - ie, a $10k rig targeting one account for 1 year would also hit 72.3 bits of entropy as the ratio is the same).

Anyway - all that to say that I think 58 bits cracked per year per account is too optimistic. Around 40TH/s seems more reasonable to me, or if really needing a strict 10, 10 TH/s results in about 68 bits in a year, or about $500 per user per 2019 year.


I just found out that 90% of the library size is represented by the frequency lists.

I wonder if it would be useful to create a version of the library that do not implement checks on the frequency list (that is anyhow based on english words).

This would make it possible to reuce the sice of the library from ~900kb to ~100kb
We added the example passwords that show on our password form to the user-inputs for zxcvbn in an attempt to have these passwords (and derivatives of them) heavily penalised. We observed that if our users copy the password as it appears on the page they will actually get a passing score from zxcvbn.

This appears to be a result of the example passwords having upper case characters and the user inputs array being converted to lower cased within zxcvbn. The benefits zxcvbn applies for using mixed case mitigates a significant chunk of the penalty applied from a match against user inputs.

Here is an example, using the popular XKCD password, effectively the same style of password we encourage our users to use.

Mixed case in user_inputs is clearly ignored:
```
zxcvbn("correct-horse-battery-staple", user_inputs=["correct-horse-battery-staple"]).guesses_log10
0.30102999566398114
zxcvbn("correct-horse-battery-staple", user_inputs=["correct-HORSE-battery-STAPLE"]).guesses_log10
0.30102999566398114
```

There is a significant "bonus" applied for mixing case in a password. As shown earlier, case is ignored in the user inputs so the guesses are unintuitively high for what appears to be an exact match:
```
zxcvbn("correct-HORSE-battery-STAPLE", user_inputs=["correct-horse-battery-staple"]).guesses_log10
7.063592882140602`
zxcvbn("correct-HORSE-battery-STAPLE", user_inputs=["correct-HORSE-battery-STAPLE"]).guesses_log10
7.063592882140602
```

It is worth being clear that there is still a significant penalty being applied here. The guesses where a match has been made are still considerably lower than without a match.
```
zxcvbn("correct-HORSE-battery-STAPLE", user_inputs=[]).guesses_log10
20.63105185242108
```

We think that case should be considered in user inputs, but it is clear that zxcvbn has been written assuming case from dictionaries and user inputs doesn't matter. We welcome any speculation about how we could penalise matches against user inputs more or otherwise prevent our example passwords being seen as stronger passwords than they should be.
The npm commands to build and watch doesn't seem to work properly on Windows. They can't find the coffee scripts to compile.

If I run "npm run build", I get: "File not found: FULLPATH\zxcvbn\src\\*.coffee".

If I run ".\node_modules\\.bin\coffee ...", with the same arguments as in the build scripts, it works. Note that for one of my coworker, even this doesn't work and he have to change the *.coffee to a single file.

Was it ever working properly on Windows?
