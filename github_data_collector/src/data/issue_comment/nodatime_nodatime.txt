(We may well want to update to .NET Core 3.1, but that can come later.)
See https://stackoverflow.com/questions/58288463 for details.

Something like `Period.DaysBetween(LocalDate, LocalDate)` etc.
According to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) (at least the Wikipedia article on it), there are two allowed format for calendar dates:

- Basic, `YYYYMMDD`
- Extended, `YYYY-MM-DD`

It seems that `LocalDatePattern.Iso` uses the extended format.

This seems perfectly reasonable to me as it is the most widely used as far as I can tell. My question is whether it should be named `ExtendedIso` to make it clear (you could also add `BasicIso`).

This would make it consistent with `InstantPattern.ExtendedIso` too.
As requested in #1441, it could be useful to expose CalendarOrdinal and then CalendarSystem.ForOrdinal.

That enum is currently internal though, and we'd want to be pretty certain before exposing it - we'd also need to remove the "Size" value.
We are using version 1.4.7 as it is PCL and we are facing outdated time zones.
Is it possible to update the time zones in that PCL version?
The current `Period` supports both years, months, weeks, days, hours, minutes, seconds, milliseconds, and ticks. To me, this seems a bit like only having a `DateTime`; you must have a time even though you might only want a date. I often find myself requiring that only date **or** time is set in a `Period`, and currently I'm forced to use `HasDateComponent` and `HasTimeComponent`, which are runtime, instead of having something at compile time. I see this as one of Noda Time's biggest strengths, and somehow it's missing here.

Wouldn't it make sense to introduce two new types of periods by splitting `Period`s into two: a `DatePeriod` and a `TimePeriod`. The `DatePeriod` would only allow you to specify years, months, weeks, and days and could only be added to a `LocalDate`, whereas a `TimePeriod` only had hours, minutes, seconds, milliseconds, and ticks and could only be added to a `LocalTime`. Adding a `DatePeriod` and a `TimePeriod` would result in a regular `Period`.

`TimePeriod` could also easily be converted to a `Duration` and vice versa.
Now that .NET Core 3.0 has gone GA, we should get rid of all the prerelease-ness.
(Hopefully this will speed up CI as well - no need to fetch and install; that may take a little while though.)
I'm trying to find/make a `LocalTime` pattern that parses all of [the extended ISO-8601 formats for time](https://en.wikipedia.org/wiki/ISO_8601#Times), but only formats them as the full extended ISO pattern with hours, minutes, seconds and optional fractional seconds. The pattern should be used for public APIs that allow a wide range of ISO-defined inputs, while only returning a single format.

I'm having problems finding support for it. All the ISO-8601 time formats look something like this:

1. HH':'mm':'ss;FFFFFFFFF
2. HH':'mm
3. HH
4. HH':'mm;FFFFFFFFF
5. HH;FFFFFFFFF
6. 24':'00':'00;000000000 (9 or fewer decimal zeroes)
7. 24':'00;000000000 (9 or fewer decimal zeroes)
8. 24;000000000 (9 or fewer decimal zeroes)

There doesn't seem to be any default pattern supporting them all, but some of it can be supported using a `CompositePatternBuilder`.

The first pattern is just `LocalTimePattern.ExtendedIso`. The second and third can easily be implemented with `LocalTimePattern.CreateWithInvariantCulture()`.

However, the fourth and fifth pattern don't seem to be supported at all. Having fractional hours or minutes just results in the `LocalTime` having zeroes for anything below hours/minutes.

The last three are just variations on the above, but for the special case of the late midnight, aka. 24:00:00, which should simply translate to `LocalTime.Midnight`. As long as the hours is 24 it should be possible to use all the other patterns with pure zeroes in any combination. It is possible to use `LocalTimePattern.CreateWithInvariantCulture()` here as well, it just requires you to define all the patterns individually (and that doesn't even support the fractional hours/minutes:

- 24
- 24':'00
- 24':'00':'00
- 24':'00':'00;0
- 24':'00':'00;00
- 24':'00':'00;000
- 24':'00':'00;0000
- 24':'00':'00;00000
- 24':'00':'00;000000
- 24':'00':'00;0000000
- 24':'00':'00;00000000
- 24':'00':'00;000000000

So the first three are easy, the fourth and fifth are currently not possible, and the last 24-hour cases are cumbersome.
Hi all,

We recently started building a new mobile app using Noda Time and one of the first things we're working of requires us to format a date and time into a string. Now, part of this string should have a format including day (non-padded) and month name. As such, this is exactly what the [standard month/day](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#MonthDay) `DateTime` formatting [pattern "M"](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings) does.

Obviously, this format can only be used by itself, as otherwise it would cause confusion with the month number format specifier. And, true, I could exit Noda Time to revert to an unspecified `DateTime` to apply this formatting. But to me this seems like a missing feature that would be a great addition to Noda Time.

All the best,
Alexander.
While we've got type converters for most types, we don't have one for ZonedDateTime.
In order to create one, we'd need to know which provider to use, which is tricky.

There are hacky ways round this in terms of having a static property somewhere, but it's far from ideal.