The [atom-brackets package](https://github.com/atom/bracket-matcher/blob/master/lib/bracket-matcher.coffee#L194) is configured to expand "#" into "#{$1}" in `comment.documentation.heredoc.elixir` contexts. To avoid this and close #83, this changes literal heredoc contexts (`~S`) to have a more specific tag, `comment.documentation.heredoc.literal.elixir`.

Tested by `apm link`ing the modified `language-elixir` locally and confirmed that "#" no longer expanded in literal heredocs.  Also modified existing tests to expect the new name where appropriate.
Currently using "monokai-shade" theme and the styles on typespec keywords are nearly white which is quite "loud", visually distracts from the function definition itself, and unfortunately discourages me from writing typespecs. ðŸ˜ž 

I'd love to be able to target and adjust the styles on typespec keywords, e.g.:
- `@type type_name :: type`
- `@typep type_name :: type`
- `@opaque type_name :: type`
- `@spec function_name(type1, type2) :: return_type`
- `@callback function_name(type1, type2) :: return_type`
- `@macrocallback macro_name(type1, type2) :: Macro.t`

I'm thinking similarly to the `syntax--documentation` class added to `@doc` moduledocs, tacking on an extra class like `syntax--typespec` or something.

Any thoughts?

```
@attr "value" # ok
@attr? "value" # ? is not colored
@attr! "value" # ! is not colored
@Ä…ttr "value" # nothing is clored
```

language-elixir version: 0.20.2
If i try to indent a multiline map the plugin will indent the map incorrectly. For example, the auto-indented map will look like this.
```
%{foo: "bar",
baz: "buzz"}
```
Where it should be
```
%{foo: "bar",
  baz: "buzz"}
```
of note, if you try to make a map with newlines (i.e. javascript style), it auto-indents fine.
```
%{
  foo: "bar",
  baz: "buzz
}
```
however, this is not usually how elixir code is formatted. The same is true for keyword lists as well as structs.
When I type '#' inside ' """ ' documentation block I get it replaced by '#{}'.
I understand it should be interpreted as a markdown code.
I get:
```
@moduledoc """
Blah blah blah

#{#{ Examples}}
"""
```
instead of
```
@moduledoc """
Blah blah blah

## Examples
"""
```

Am I doing something wrong?
For example, the following code is the result of auto indent with the plugin:

``` eex
<%= form_for @changeset, @action, fn f -> %>
<%= if @changeset.action do %>
<div class="alert alert-danger">
  <p>Oops, something went wrong! Please check the errors below.</p>
</div>
<% end %>

<div class="form-group">
  <%= label f, :name, class: "control-label" %>
  <%= text_input f, :name, class: "form-control" %>
  <%= error_tag f, :name %>
</div>

<div class="form-group">
  <%= submit "Submit", class: "btn btn-primary" %>
</div>
<% end %>
```

but it should be formatted like so:

``` eex
<%= form_for @changeset, @action, fn f -> %>
  <%= if @changeset.action do %>
    <div class="alert alert-danger">
      <p>Oops, something went wrong! Please check the errors below.</p>
    </div>
  <% end %>

  <div class="form-group">
    <%= label f, :name, class: "control-label" %>
    <%= text_input f, :name, class: "form-control" %>
    <%= error_tag f, :name %>
  </div>

  <div class="form-group">
    <%= submit "Submit", class: "btn btn-primary" %>
  </div>
<% end %>
```

`<%= .... %>` with a corresponding <% end %> should be indented.

atom: ver `1.6.0-beta6-8bd4c99`
language-elixir: ver `0.11.1`

It seems auto-indent does not properly unindent branches of `case`.

Instead of

``` elixir
defmodule Demo do
  def demo(value) do
    case value do
      :one ->
        do_one
      :two ->
        do_two
      :three ->
        do_three
    end
  end
end
```

you get

``` elixir
defmodule Demo do
  def demo(value) do
    case value do
      :one ->
        do_one
        :two ->
          do_two
          :three ->
            do_three
          end
        end
      end
```
