I've been using slotmap to develop a disk management library for Linux with an ECS architecture with great success; at least with a `HopSlotMap<Entity, ()>` with many associated `SparseSecondaryMap<Entity, T>` storages.

Some secondary maps provide associations to zero or more other entities, such as a device with many children, or with many parents. Disks with partition tables, and LVM volume groups, would be an example of device entities that many contain many partitionable child device entities. LVM volume groups may themselves be a conglomeration of multiple parent devices.

This means that I have two secondary maps that are defined like so:

```rust
    // Devices that contain children will associate their children here.
    pub children: SparseSecondaryMap<Entity, Vec<Entity>>,
    // If the device has a parent, it will be associated here.
    pub parents: SparseSecondaryMap<Entity, Vec<Entity>>,
```

It would be ideal if I could fetch a key and insert a default value if it is vacant, or add value onto the map if it is not. Currently I have to `.get_mut()` and push on `Some(T)`, else `insert(vec![T])` on `None`.

```rust
match parents.get_mut(entity) {
    Some(associations) => associations.push(other_entity),
    None => drop(parents.insert(entity, vec![other_entity])),
}
```
Can a flag be added to make this crate `no_std` and have it only depend on `alloc`?
According to [this issue](https://github.com/orlp/slotmap/issues/11) by @orlp, FIFO version of freelist is a desired enhancement.
I simply implement FIFO by adding a "tail" pointer.
Some unit test and benchmark might be needed, but I'm not sure what we want, so I just leave it here.
`get_distinct_mut` allows one to get two mutable references to distinct values stored in a `SecondaryMap`, making various access patterns easier when the values are not `Copy` (this is a feature that is requested for the stdlib's `HashMap` over and over again).

Questions:
* Not 100% sure about the name. Maybe `get_pair_mut` or similar would be better?
* For "symmetry reasons" we should probably also implement this for the other maps as well? I did not do this because: 1) `SlotMap` requires its values to be `Copy` and so this wouldn't be really useful there, 2) `SparseSecondaryMap` is backed by a `HashMap` and hence implementation would require unsafe code, 3) I just haven't used `HopSlotMap` yet, so no idea there :)
Messing with the imports for 2015 edition is more annoying for no_std and my attempts failed. Sure it can be done, but it isn't worth it as there is no reason against using the 2018 edition.

Blocking on #16.
Currently the freelist is LIFO as it simplified the logic on deletion for speed. I need to investigate the performance impact of using FIFO instead to prevent the same slot being used over and over again.

This could then also be coupled with some system that guarantees at least `n` free elements, which would ensure that an overflow takes at least `n` times longer to occur.