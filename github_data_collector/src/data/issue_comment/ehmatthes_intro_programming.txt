Since **.py** files had **incorrect folder path** - when executing _build-html_pages.sh_ - after fixing this issue - another issue **codec - charmap error** was identified _reading file.readlines()_ - which was solved specifying encoding parameter with _file.open()_

## Rendering Before Fix
![image](https://user-images.githubusercontent.com/41846481/44236723-d52a8280-a162-11e8-9f6d-21f9460d3cb0.png)

## Rendering After Fix
![image](https://user-images.githubusercontent.com/41846481/44236731-d9ef3680-a162-11e8-963d-74c0864565c1.png)

If there end up being different sections, consider a selector at the top that people can select their OS, or the OS they're focusing on, and only show those sections.

Don't just detect the OS and use that, because someone might be reading on one OS to learn about another.
People should be able to fork the project, run the script, and start working on a similar project for a different language. It should also help someone write their own introtopython site with a different set of introductory notebooks.
This script and some others should be refactored, and tests will help that process. There are also some new features that could be added, and again tests would be really helpful. Testing is good.
The script can certainly be cleaned up. Some improvements would be in-script refactoring work, some would involve modifying notebooks and templates.

- Instead of manually specifying which notebooks get show/hide all output buttons, either set a notebook metadata property and check for that in the template, or examine the notebook and look for any output blocks. If no output blocks, don't include the show/hide all output buttons. (See #148)
- Approach to deleting and rebuilding html_site/ has five levels of nesting. That can be simplified or refactored into functions.
- The script currently calls nbconvert from the command line from within a python script. I did this because I first learned to use nbconvert from the command line. Since we're using a python script, it would be better to use nbconvert as a library. See [here](http://nbconvert.readthedocs.io/en/latest/nbconvert_library.html). This might reduce the need for separate files like scripts/my_config.py, and would eliminate the use of environment variables.
Right now this is done manually, in build_html_site.py. But this could be automated, either in build_html_site.py or in a template, by checking whether the template has any output blocks. Or, this could be a setting in the notebook metadata.

from build_html.py:

    # This is manually determining which notebooks get show/hide all output buttons.
    #  Might be better to scrape the files, look for output cells, and only place
    #  show/hide all buttons on notebooks with output cells. Can this be done
    #  in the template?

In introductory materials, remove references to Python 2. This project is about helping people learn new skills, not deal with legacy codebases. Maybe include a single notebook about Python 2.7, but references sprinkled throughout the notebooks, especially the introductory sections, just clutter the site.
The documentation will be much cleaner after this overall update.

- Separate sections for contributing notebooks, and helping with overall site/ project features. Contributing notebooks is much simpler than developing features.
- Issue tag project_proposal.
- Note not to write anything into html_site directly, as it's destroyed and rebuilt on every conversion.
Right now build_html.py is going to delete the folder html_site, and rebuild it. Is this done safely?

I'm wondering if the script might ever be run from a context where the cwd is not the project root. It will look for a folder called html_site, and delete it and rebuild it. That would be terrible if the user had a different directory of that name, and lost it by running this script.

Would it be better to build an absolute path to this project's html_site, and use that path? Maybe get the absolute path to build_html.py, and use that to build the absolute path to html_site? Here are the relevant lines from build_html.py:

```python
print("\nDeleting current html_site directory...")
try:
    rmtree('html_site')
    print("  Deleted html_site.")
except FileNotFoundError:
    print("  No html_site directory found.")
```

Moving a comment from build_html.py to here:

```python
# This could be made more efficient with a cli argument to only process
#  new or modified notebooks. For now it usually needs to process all,
#  because the conversion script itself is changing often. But once the
#  conversion process is stable, that kind of flag might be useful.
#  (move this to an issue)
```

This is not a particularly high priority. For my development work, I just limit build_html.py to convert a few notebooks, and then set it to run all notebooks again.
