
## The devDependency [mustache](https://github.com/janl/mustache.js) was updated from `3.2.1` to `4.0.0`.
This version is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

---

**Publisher:** [flipp](https://www.npmjs.com/~flipp)
**License:** MIT

[Find out more about this release](https://github.com/janl/mustache.js).

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:


Hi, is there an option to incorporate this on a PHP application?

thank you
Python version of _css-beautify_ can be installed with `pip`

```sh
$  pip install cssbeautifier
```

_jsbeautifier_ is installed as dependency
# Input
The code looked like this before beautification:
```handlebars
<SomeComponent as |sc|>
    ...some content...
</SomeComponent>
```

# Expected Output
The code should have looked like this after beautification:
```handlebars
<SomeComponent as |sc|>
    ...some content...
</SomeComponent>
```

# Actual Output
The  code actually looked like this after beautification:
```handlebars
  <SomeComponent
    as
    |sc|
  >
    ...some content...
  </SomeComponent>
```

# Steps to Reproduce


## Environment
OS: MacOS
# Description
If an `if` statement contains a single `try..catch` statement, only the `try` block will get indented correctly. The `catch` block will be indented as if it were outside the `if` statement.

# Input
The code looked like this before beautification:
```
if (a)
  try
  {
    a = 2;
  }
  catch (e)
  {
    // ignore
  }
```

# Expected Output
The code should have looked like this after beautification:
```
if (a)
  try
  {
    a = 2;
  }
  catch (e)
  {
    // ignore
  }
```

# Actual Output
The  code actually looked like this after beautification:
```
if (a)
  try
  {
    a = 2;
  }
catch (e)
{
  // ignore
}
```

## Environment
Reproduced on https://beautifier.io/ as well as locally.

## Settings
```json
{
  "indent_size": "2",
  "indent_char": " ",
  "max_preserve_newlines": "5",
  "preserve_newlines": true,
  "keep_array_indentation": false,
  "break_chained_methods": false,
  "indent_scripts": "normal",
  "brace_style": "expand",
  "space_before_conditional": true,
  "unescape_strings": false,
  "jslint_happy": false,
  "end_with_newline": false,
  "wrap_line_length": "0",
  "indent_inner_html": false,
  "comma_first": false,
  "e4x": false,
  "indent_empty_lines": false
}
```

# Description
> Spaces are not format properly in media features

# Input
The code looked like this before beautification:
```
@media only screen and (max-width        :      1024px) {
```

# Expected Output
The code should have looked like this after beautification:
```
@media only screen and (max-width: 1024px) {
```

# Actual Output
The  code actually looked like this after beautification:
```
@media only screen and (max-width : 1024px) {
```

# Steps to Reproduce
Just try beautify sample code.

## Environment
OS: Windows 10
IDE: Visual Studio Code 1.40.2
Wrapper: [code-beautifier](https://github.com/mike7515/code-beautifier) 2.3.3 on js-beautify 1.10.2


## Settings
Example:
```json
{
  "end_with_newline": true,
  "max_preserve_newlines": 2,
  "indent_size": 2,
  "indent_char": " ",
  "indent_with_tabs": false,

  "css": {
    "newline_between_rules": true
  },

  "js": {
    "jslint_happy": true
  }
}
```

Hi, @bitwiseman . This ticket is just a suggestion to try to be helpful. Feel free to use it or not. It doesn't make a real difference to me, but someone might appreciate it.

You'll remember that we had a big discussion years ago on Issue #841 about rules of an ideal formatting engine. And I want to reaffirm that I am very grateful for your help and that of @madman-bob for finally fixing the core formatting rules in Issue #1033. I can't say "thank you" enough.

Many, many years ago I had written my own XML/HTML serializer in Java, but I had never got around to implementing a comprehensive set of whitespace formatting rules. I'm now overhauling the formatting engine (you can track it on Jira in [JAVA-158](https://globalmentor.atlassian.net/browse/JAVA-158)), and I'm almost done.

Once I'm completely finished I can try to summarize the rules I came up with if you're interested. One of the interesting outcomes is that we don't actually need all the [categories I proposed](https://github.com/beautify-web/js-beautify/issues/841#issuecomment-171753389) when I was outlining a formatting algorithm off the top of my head. It turns out we only need categories of "block" and "inline", although of course some elements (e.g. `<pre>`) will have formatting disabled.

Additionally since browsers normally format unrecognized elements as `display: inline`, we would want to merely specify the block elements and let everything else default to inline.

I'm writing this ticket because I was looking for an official list of "block" elements. This is not a semantic category, but rather a list of elements that the HTML specification recommends the browser should by default format as `display: block`. (See [Browsers' default CSS for HTML elements](https://stackoverflow.com/q/6867254/421049) on stack overflow.) You can find these elements in the most recent W3C HTML5 specification at [HTML 5.2 § 10. Rendering](https://www.w3.org/TR/html52/rendering.html#rendering). Lastly it turns out you need to include, not just those elements that default to `display: block`, but also those that default to `display: list-item` in order to include `<li>`.

I'm using a js-beautify formatted HTML file in unit tests for my Java code to see how much the output of my algorithm differs. The resulting formatted documents is almost the same. The one difference I noted is that js-beautify formats:

```html
<figure><figcaption>A "Hello World" Java Program</figcaption>
  <pre class="line-numbers"><code class="language-java">package com.example;
…
```

While my Java implementation formats this as 

```html
<figure>
  <figcaption>A "Hello World" Java Program</figcaption>
  <pre class="line-numbers"><code class="language-java">package com.example;
…
```

This is because I'm going off the official list of recommended browser default `display: block` elements as explained above, and `<figcaption>` by default should be a block element as per the W3C / WHATWG.

Anyway this is less a request than a suggestion that you may find helpful. It would probably be nice to have js-beautify follow a more official list, but it's not causing me great problems at the moment.

All the best!
Null coalescing is currently at stage 3 and already shipped with TypeScript 3.7. Currently, with the following input:

```js
const obj = {};
const a = obj.prop ?? 'hola';
```
We get the following output:

```
const obj = {};
const a = obj.prop ? ? 'hola';
```

Notice the extra spaces around `?`. The *expected output* is the same as the input.

Configuration:

{
  "indent_size": "4",
  "indent_char": " ",
  "max_preserve_newlines": "5",
  "preserve_newlines": true,
  "keep_array_indentation": false,
  "break_chained_methods": false,
  "indent_scripts": "normal",
  "brace_style": "collapse",
  "space_before_conditional": true,
  "unescape_strings": false,
  "jslint_happy": false,
  "end_with_newline": false,
  "wrap_line_length": "0",
  "indent_inner_html": false,
  "comma_first": false,
  "e4x": false,
  "indent_empty_lines": false
}
Optional chaining is currently at stage 3 and already shipped with TypeScript 3.7. Currently, with the following input:

```js
const obj = {};
obj?.prop?.subprop;
```
We get the following output:

```
const obj = {};
obj ? .prop ? .subprop;
```

Notice the extra spaces around `?`. The *expected output* is the same as the input.

Configuration:

{
  "indent_size": "4",
  "indent_char": " ",
  "max_preserve_newlines": "5",
  "preserve_newlines": true,
  "keep_array_indentation": false,
  "break_chained_methods": false,
  "indent_scripts": "normal",
  "brace_style": "collapse",
  "space_before_conditional": true,
  "unescape_strings": false,
  "jslint_happy": false,
  "end_with_newline": false,
  "wrap_line_length": "0",
  "indent_inner_html": false,
  "comma_first": false,
  "e4x": false,
  "indent_empty_lines": false
}
# Description
Referencing [VSCode Issue 84386](https://github.com/microsoft/vscode/issues/84386). VSCode uses js-beautify for formatting, and defaults wrap_line_length to 120.

Issue: Multiple runs of js-beautify on HTML with wrap_line_length set results in text with numerous unnecessary line breaks.

Solution: Because HTML (outside of the "pre" tag) doesn't render line breaks in plain text, either change the default to remove line breaks within plain text or add a setting called something like preserveNewTextLines that works like preserveNewLines but within a tag.

## Environment
https://beautifier.io/ Beautify HTML

# Input
`<p>See Spot. This is a perfectly normal and simple English sentence used to show how the language can expand over time.</p>`

# Output
This looks fine.
```
<p>See Spot. This is a perfectly normal and simple English sentence used to show how the language can expand over time.
</p>
```

# Modified Input
Add "very far" to the simple sentence.
```
<p>See Spot very far. This is a perfectly normal and simple English sentence used to show how the language can expand over time.
</p>
```

# Output
I mean, why does the "p" have its own line? But otherwise fine.
```
<p>See Spot very far. This is a perfectly normal and simple English sentence used to show how the language can expand
    over time.
</p>
```

# Modified Input
Oops! Forgot the verb. Add "run".
```
<p>See Spot run very far. This is a perfectly normal and simple English sentence used to show how the language can expand
    over time.
</p>
```

# Output
Multiple this by millions and suddenly my code looks atrocious! (Seriously)
```
<p>See Spot run very far. This is a perfectly normal and simple English sentence used to show how the language can
    expand
    over time.
</p>
```

# Expected Output
I'd like to see this output:
```
<p>See Spot run very far. This is a perfectly normal and simple English sentence used to show how the language can
    expand over time.</p>
```