I refactored some code
I added IsPostalCode function, but it uses [geonames library](https://github.com/mkrou/geonames) .
I added IsIMEI validation function that is mentioned in CONTRIBUTING file. It has been tested.
ParamTagMap already has `minstringlength` and `maxstringlength` but they are not included in the readme.
Seeing how all other possible tags with params are included, these should probably be included too.
Hi, is it possible that arguments in example
```
govalidator.ValidateMap(mapTemplate, inputMap)
```
are actually reversed, shouldn't the first one be the inputMap ? It took me some time to find out..

I have a simple struct, like:

```go
type SpannerSlugger struct {
	Slug string `spanner:"slug" valid:"required"`
	Name string `spanner:"name" valid:"required"`
}
```

and a test like

```ok
func TestValidation_Slugs(t *testing.T) {
	ok, err := govalidator.ValidateStruct(&db.SpannerSlugger{})
	assert.OK(t, err)
	assert.True(t, ok, "expected ok")
}
```

On SHA `f61b66f89f4a`, this works as expected (the empty string values result in the test failing)

```
% cat go.mod | grep govalidator
	github.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a
```

On SHA `475eaeb16496`, it fails silently (the test passes without the expected error)

```
cat go.mod | grep govalidator
	github.com/asaskevich/govalidator v0.0.0-20200108200545-475eaeb16496
```

This seems like a pretty significant regression / change, as validation that I expect to be performed is no longer being performed.
<!-- Love govalidator? Please consider supporting our collective:
ðŸ‘‰  https://opencollective.com/govalidator/donate -->

is duckduckgo.com correct URL.
I ask because there so no defined protocol and I think this is a bug.
when use `ValidateStruct()` function, output error inside array is not valid

output message:
```
panic: Items.1.items: non zero value required
```

expected:
```
Items.1.ImpactedTo: non zero value required
```

here code: https://play.golang.org/p/G7-RAZ7tt_K
The result of the structure verification is returned and a single error message is returned,Validation stops at one error and returns an error instead of validating all
The errors generated by the package include a field name and a path to the field that has failed validating, but they are inconsistent with what the contents of those fields are.

The path always contains the Go struct field names, where-as the field will contain the json tag name if a json tag was defined on that field.

For this reason it's hard to use the path when also using json tags, since they aren't both in the same format.

### Example

```go
type Details struct {
	Email string `json:"email" valid:"email"`
}

type Person struct {
	Details   Details   `json:"details"`
}
```

If the email is set as `"gogopher@example-com"`, the following error will be outputted:
```go
(govalidator.Errors) (len=1) {
  (govalidator.Errors) (len=1) {
    (govalidator.Error) {
      Name: (string) (len=5) "email",
      Err: (*errors.errorString)({
        s: (string) (len=47) "gogopher@example-com does not validate as email"
      }),
      CustomErrorMessageExists: (bool) false,
      Validator: (string) (len=5) "email",
      Path: ([]string) (len=1) {
        (string) (len=7) "Details"
      }
    }
  }
}
```

https://play.golang.org/p/M3ZpBZwwNTy

The `Path` is `Details` which is the Go struct field name, not the json tag name, and the `Name` is `email` which is the json tag name. 