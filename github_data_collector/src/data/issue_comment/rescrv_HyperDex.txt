Hi,

I was wondering if anyone is actively using Hyperdex? Love the project and everything about it, very sad that it's no longer maintained :(

Dave

I'm interested in evaluating HyperDex for a new project, but if possible I'd like to avoid that effort if this project is no longer being actively maintained. Looking at the release and commit history, it seems this is primarily a one person effort by a CS Ph.D. student. By all appearances that's an impressive achievement!  

However, I've been burned by "grad-ware" in the past, where a talented graduate student builds cool open source things, but then gets a job and moves on. There's no shame in that, but I want to know upfront if that is the situation. Here, it's hard to tell because there appears to be (or have been) a business behind this. But the inactivity and lack of roadmap are red flags, and point to this project being near the end of its life. 

Is this a fair characterization, or am I missing something?

- add new function sum, sum the number of objects that match the specified checks. This will return the number of objects counted by the search. If an error occurs during the sum, the sum may reflect a partial sum. The real sum will be higher than the returned value;
- modify interface using latest of po6;
- fixed memory leak of value_to_attributes in util.cc;
- better free for hyperdex_client_destroy_attrs
- add java and python interface

i was doing hyperdex re-evaluation for our environment after a year again, however it seems that stability/robustness regressed rather than progressed. sources is not possible to build from repos as tags/releases are missing. i've therefore used ones in download section in http://hyperdex.org/download/

during initial space creation:

**\* Error in `python3.5': free(): invalid next size (fast): 0x0000000001712440 ***
======= Backtrace: =========
/usr/lib/libc.so.6(+0x72055)[0x7ff5e6b8e055]
/usr/lib/libc.so.6(+0x779a6)[0x7ff5e6b939a6]
/usr/lib/libc.so.6(+0x7818e)[0x7ff5e6b9418e]
/usr/lib/libhyperdex-admin.so.1(+0x1de34)[0x7ff5df0dee34]
/usr/lib/libhyperdex-admin.so.1(+0x12f07)[0x7ff5df0d3f07]
/usr/lib/libhyperdex-admin.so.1(+0x2905b)[0x7ff5df0ea05b]
/usr/lib/libhyperdex-admin.so.1(+0x2c714)[0x7ff5df0ed714]
/usr/lib/libhyperdex-admin.so.1(hyperdex_admin_add_space+0x69)[0x7ff5df0f51f9]
/home/web_dev_teahub/src/teahub/steel/app/vendor/leila/vendor/hyperdex/admin.so(+0xf594)[0x7ff5df322594]
/usr/lib/libpython3.5m.so.1.0(+0xc3233)[0x7ff5e71a0233]
/home/web_dev_teahub/src/teahub/steel/app/vendor/leila/vendor/hyperdex/admin.so(+0xbe2d)[0x7ff5df31ee2d]
/usr/lib/libpython3.5m.so.1.0(PyCFunction_Call+0x94)[0x7ff5e718ca54]
/home/web_dev_teahub/src/teahub/steel/app/vendor/leila/vendor/hyperdex/admin.so(+0xda43)[0x7ff5df320a43]
/usr/lib/libpython3.5m.so.1.0(PyEval_EvalFrameEx+0x7e11)[0x7ff5e72049a1]
/usr/lib/libpython3.5m.so.1.0(PyEval_EvalFrameEx+0x81c2)[0x7ff5e7204d52]
/usr/lib/libpython3.5m.so.1.0(+0x128df2)[0x7ff5e7205df2]
/usr/lib/libpython3.5m.so.1.0(PyEval_EvalFrameEx+0x5f60)[0x7ff5e7202af0]
/usr/lib/libpython3.5m.so.1.0(+0x128df2)[0x7ff5e7205df2]
/usr/lib/libpython3.5m.so.1.0(PyEval_EvalCodeEx+0x23)[0x7ff5e7205ed3]
/usr/lib/libpython3.5m.so.1.0(PyEval_EvalCode+0x1b)[0x7ff5e7205efb]
/usr/lib/libpython3.5m.so.1.0(+0x148074)[0x7ff5e7225074]
/usr/lib/libpython3.5m.so.1.0(PyRun_FileExFlags+0x95)[0x7ff5e7227585]
/usr/lib/libpython3.5m.so.1.0(PyRun_SimpleFileExFlags+0xf6)[0x7ff5e72276f6]
/usr/lib/libpython3.5m.so.1.0(Py_Main+0xec4)[0x7ff5e723e504]
python3.5(main+0x167)[0x400af7]
/usr/lib/libc.so.6(__libc_start_main+0xf0)[0x7ff5e6b3c610]
python3.5(_start+0x29)[0x400b99]

regards,

I installed hyperdex with python using home-brew on OS X 10.11.1.

In python 2.7 installed with home-brew running

> > > from hyperdex.admin import Admin

SegFaults

It would be really nice to get the java client via maven central and not have to compile it from source. Also, having the ability to define the native bindings by something like a `HYPERDEX_NATIVE_JAVA_LIBRARY` variable to point to the native binary.

Reported on list by Tadeusz KopeÄ‡ tadeusz.b.kopec@gmail.com

Testing by checking out `releases/1.5`, `releases/1.6`, `releases/1.7` and running `go build` from `rescrv/HyperDex/bindings/go`, I always get some error. For 1.5:

```
# github.com/rescrv/HyperDex/bindings/go/client
could not determine kind of name for C.hyperdex_client_document_atomic_add
```

```
# github.com/rescrv/HyperDex/bindings/go
./hypergo.go:95: undefined: req in req.status
./hypergo.go:97: undefined: req in req.success
./hypergo.go:98: undefined: req in req.success
./hypergo.go:101: undefined: req in req.failure
./hypergo.go:102: undefined: req in req.failure
./hypergo.go:102: undefined: req in req.status
./hypergo.go:106: undefined: req in req.failure
./hypergo.go:107: undefined: req in req.failure
./hypergo.go:110: undefined: i
./hypergo.go:110: too many errors
```

Is there some flaw in how I'm building it? Didn't inspect 1.5 too well, but for 1.6 and 1.7 it looks like there's some form of for or while loop missing. I'll try to write a pull request to fix this

Does hyperdex have any Jepsen, Hermitage test results that are available ? It would really help in making a strong case for using Hyperdex in a production environment.

Hi I wanted to understand how well HyperDex scales with very large datasets much bigger than RAM. I'm also interested in knowing how HyperDex would compare with FoundationDB and CockroachDB in terms of raw performance as well as scalability when you consider a Multi Data Center scenario. Have there been any tests done for the same ?
