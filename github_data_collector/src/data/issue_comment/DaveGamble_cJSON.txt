I suppose the function `compare_double` was simply used to compare whether the two double value is equal or not, but it actually also do the check for NaN implicitly which may not a good practise.

```
/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
    return (fabs(a - b) <= CJSON_DOUBLE_PRECISION);
}

...
/* This checks for NaN and Infinity */
if (!compare_double(d * 0, 0))
{    
    length = sprintf((char*)number_buffer, "null");
}
...
```
The reason why the above code works fine is becasue:
- 1. a-b return NaN, (no matter `d` is NaN or INF, the result of `d * 0` is NAN)
- 2. fabs(NaN) return NaN
- 3. NaN with all comparisons with the operators ==, <=, >=, <, >  return false, thus NaN <= CJSON_DOUBLE_PRECISION return false


Compare to current implementation , I'm much prefer the original one, it's simple and directly and faster:
```
/* This checks for NaN and Infinity */
if ((d * 0) != 0)
{
    length = sprintf((char*)number_buffer, "null");

}
```

but since #368 added the compile option `-Werror=float-equal`,  this statement `d * 0 != 0` would like to trigger an error :
```
error: comparing floating point with == or != is unsafe
``` 

Why we should add `-Werror=float-equal`, this option is too picky , comparing floating point with == or !=  sometimes useful. This option will shouting everytime even when you know it's safe.
Hi there,

Would you mind if using the macro `DBL_EPSILON` to perform the comparisons for double value?

I think it's more portable since it was defined in `float.h`. 

After bring in `DBL_EPSILON` , we could update the comparisons a more canonical way:
```
return fabs(a - b) < DBL_EPSILON;
```

If we dont want include the `float.h`, there's a simple way to get the value for different platform:
```
double get_DBL_EPSILON (void)
{
        double d = 1.0;

        while (1.0 + d/2 != 1.0)  d = d/2;

        return d;
}
```

have test for the code above, it'll get the right value 
```
value | round
0.5000000000000000000000000000000000000000000000000000000000000000 1
0.2500000000000000000000000000000000000000000000000000000000000000 2
0.1250000000000000000000000000000000000000000000000000000000000000 3
0.0625000000000000000000000000000000000000000000000000000000000000 4
0.0312500000000000000000000000000000000000000000000000000000000000 5
0.0156250000000000000000000000000000000000000000000000000000000000 6
0.0078125000000000000000000000000000000000000000000000000000000000 7
0.0039062500000000000000000000000000000000000000000000000000000000 8
0.0019531250000000000000000000000000000000000000000000000000000000 9
0.0009765625000000000000000000000000000000000000000000000000000000 10
0.0004882812500000000000000000000000000000000000000000000000000000 11
0.0002441406250000000000000000000000000000000000000000000000000000 12
0.0001220703125000000000000000000000000000000000000000000000000000 13
0.0000610351562500000000000000000000000000000000000000000000000000 14
0.0000305175781250000000000000000000000000000000000000000000000000 15
0.0000152587890625000000000000000000000000000000000000000000000000 16
0.0000076293945312500000000000000000000000000000000000000000000000 17
0.0000038146972656250000000000000000000000000000000000000000000000 18
0.0000019073486328125000000000000000000000000000000000000000000000 19
0.0000009536743164062500000000000000000000000000000000000000000000 20
0.0000004768371582031250000000000000000000000000000000000000000000 21
0.0000002384185791015625000000000000000000000000000000000000000000 22
0.0000001192092895507812500000000000000000000000000000000000000000 23
0.0000000596046447753906250000000000000000000000000000000000000000 24
0.0000000298023223876953125000000000000000000000000000000000000000 25
0.0000000149011611938476562500000000000000000000000000000000000000 26
0.0000000074505805969238281250000000000000000000000000000000000000 27
0.0000000037252902984619140625000000000000000000000000000000000000 28
0.0000000018626451492309570312500000000000000000000000000000000000 29
0.0000000009313225746154785156250000000000000000000000000000000000 30
0.0000000004656612873077392578125000000000000000000000000000000000 31
0.0000000002328306436538696289062500000000000000000000000000000000 32
0.0000000001164153218269348144531250000000000000000000000000000000 33
0.0000000000582076609134674072265625000000000000000000000000000000 34
0.0000000000291038304567337036132812500000000000000000000000000000 35
0.0000000000145519152283668518066406250000000000000000000000000000 36
0.0000000000072759576141834259033203125000000000000000000000000000 37
0.0000000000036379788070917129516601562500000000000000000000000000 38
0.0000000000018189894035458564758300781250000000000000000000000000 39
0.0000000000009094947017729282379150390625000000000000000000000000 40
0.0000000000004547473508864641189575195312500000000000000000000000 41
0.0000000000002273736754432320594787597656250000000000000000000000 42
0.0000000000001136868377216160297393798828125000000000000000000000 43
0.0000000000000568434188608080148696899414062500000000000000000000 44
0.0000000000000284217094304040074348449707031250000000000000000000 45
0.0000000000000142108547152020037174224853515625000000000000000000 46
0.0000000000000071054273576010018587112426757812500000000000000000 47
0.0000000000000035527136788005009293556213378906250000000000000000 48
0.0000000000000017763568394002504646778106689453125000000000000000 49
0.0000000000000008881784197001252323389053344726562500000000000000 50
0.0000000000000004440892098500626161694526672363281250000000000000 51
0.0000000000000002220446049250313080847263336181640625000000000000 52

get_DBL_EPSILON is :0.0000000000000002220446049250313080847263336181640625
get_DBL_EPSILON is :2.220446049250313080847263336181640625e-16
Macro DBL_EPSILON is :0.0000000000000002220446049250313080847263336181640625
Macro DBL_EPSILON is :2.220446049250313080847263336181640625e-16

```
During working with Telegram Bot API with cJSON library for parsing values, I've faced an issue. The issue is this: I was unable to get identifier value from response - -1001182111522 - obviously, according to cJSON parse_number function, such value was never going to be stored in item->valueint. Sure, let it go - but why not try to store the value anyways, but as long?
Related to #245 and #367，I divided cJSON into several relatively independent code blocks according to the function below：
* cJSON_Minify
* cJSON_Duplicate
* cJSON_Compare
* Parsing
* Printing
* Create item

In CMakeLists.txt, I add six options to control whether enable related features or not(all options are on by default):
* ENABLE_CJSON_MINIFY 
* ENABLE_CJSON_DUPLICATE 
* ENABLE_CJSON_COMPARE
* ENABLE_CJSON_PARSING
* ENABLE_CJSON_PRINTING 
* ENABLE_CREATE_ITEM 

You can disable any features by:
```
cmake -D{$OPTION}=OFF ..
```

Only all the above options are on, the tests could build.  

My cJSON fork: <https://github.com/Alanscut/cJSON/tree/compile_time_optional>
Any suggestions are welcome :).
Hi!

I started using cJSON for an ESP32 project I'm working on, because it is included by default in Espressif's v3.3 of the ESP-IDF. Unfortunately, the version they have is a bit (3 months) out of date (version 1.7.12).

I used C/C++ much earlier in my career, but switched to C# when it came out. So my C/C++ is rusty, which is why I'm asking questions rather than submitting PRs.

I used the [readme](https://github.com/DaveGamble/cJSON/blob/master/README.md) examples at first to figure out how to use the API. I'm confused by a few things that I think might be wrong in the sample, but if I'm wrong hopefully someone can help clear it up for me.

## cJSON_CreateString example

`name = cJSON_CreateString("Awesome 4K");`

The parameter here is a constant string. This function is going to duplicate the string and allocate memory. Would it be better to use `cJSON_CreateStringReference` so memory is not allocated, and this string literal is not going away,

It might be that, because I'm developing for a constrained embedded device running RTOS, which is known to get memory fragmentation and a best practice is to avoid memory allocations if you can avoid them, that I'm more sensitive to this.

So my questions are, 1) is cJSON_CreateStringReference appropriate to use in this scenario, and 2) would it be good to employ it in the readme sample especially since the parameter is a constant?

## cJSON_AddItemToObject example

` cJSON_AddItemToObject(monitor, "name", name);`

This also uses a string literal as a parameter. Based on the documentation, would it be better to use `cJSON_AddItemToObjectCS`?

## cJSON_PrintUnformatted

In my own code, I chose to use the `cJSON_CreateStringReference` and `cJSON_AddItemToObjectDS` in conjunction with `cJSON_PrintUnformatted`. The documentation for print says I am responsible for freeing the memory allocated by it. However, the call to delete would throw with something about memory reference in the heap that wasn't in the heap.

I've temporarily avoided this by using `cJSON_PrintPreallocated`, but I don't know what I'm doing wrong with my creation calls that is producing cJSON objects that have invalid memory references.

> Note: it would be better use PrintPreallocated anyway with a stack buffer to avoid the memory allocation, but the json created will vary in size which will eventually result in an error if I've guessed the wrong max buffer size.

> Note: This bit of code parses some input with cJSON, and creates a new document based on some of the source material. This meant taking strings from the parsed json and using them as parameters for the new json object, and I figured I wanted to use the *Reference and *DS functions to tell cJSON not to try to free that memory when deleting.  In all I had 3 cJSON objects to delete: 1) the original parsed json, 2) the response cJSON object, and 3) the printed json. The failure was happening when deleting \#3, which was being deleted first.

Thanks!
David
Hello, I have work with cjson library. I create a json using cJSON_AddNumberToObject(root, "name", temp) with json number and I convert that to char * for transmit, but I can not convert, have error.
when convert double to char array as bellow figure:
![image](https://user-images.githubusercontent.com/37219354/69347629-6a41f280-0ca7-11ea-88a3-0d28bd4b4679.png)
But when I create json string and convert to char array, it work fine.

I use to gcc for arm cortex to compile. could you help me resolve it? Thank you?
Hello :) I use cJSON very well, but i found cJSON don't have getNumberValue.
So I add it. If cJSON object is not number type. I return Nan(not a number).

And i also follow Coding style which is in CONTRIBUTING.md.
At last i Add Unit Test to misc_tests.c, and test is successful.

Check and merge plz. thank u :)
Hi,
 
I would like to keep code size as small as possible for my project.
Analyzed my project size with different versions of cJSON build by IAR. Here is some data:
Existing project with some old cJSON: 107126 bytes
cJSON updated to 1.1.0: 106570 bytes
cJSON updated to 1.2.0: 106542 bytes
cJSON updated to 1.3.2: 104902 bytes
cJSON updated to 1.4.0: 106346 bytes
cJSON updated to 1.5.0: failed to build
cJSON updated to 1.6.0: 110946 bytes
cJSON updated to 1.7.0: 111010 bytes
cJSON updated to 1.7.12(latest): 111002 bytes  

So the optimal by size for me is v1.3.2. 
I would like to take the latest, but ~6kb increase is huge.

Could you please optimize the code size of latest release to the minimum possible?

For example by removing sscanf call from print_number optimizes ~4500bytes because of large sscanf library size. I believe there is better method how to check number of  nonzero digits before converting it to string instead of scanning string and rework printf.

by casting results of `add_item_to_object` to `(void)` where the public API has no return value (yet).

In any case this PR may *not* be merged but the API changed to return something (if that is reasonable) in these places.
In case you want to deal with integer numbers, cJSON_CreateNumber seems to be wasteful. 

There's an int to double cast that just shouldn't be there; not to mention potential problems with floating point numbers.

More specifically to my case, I'm running the lib on a 32 bits micro-controller with no 64 bit FPU; and that seems to be even more wasteful. 

Is there any reason there is no way to natively set an integer directly? Would a PR to add it be accepted?