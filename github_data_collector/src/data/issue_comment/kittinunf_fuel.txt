# Feature Request

## Description
Hello, I like to integrate proxies in my programs: sometimes I use more than 1 proxy, and I use `java.net.ProxySelector` to easily use my proxies, in multi-threaded programs expecially.
A `com.github.kittinunf.fuel.core.FuelManager` can only use 1 proxy.

## Proposed Solution
Replace the `proxy` field by a `proxySelector` field

## Alternatives I've considered
I do not have alternative solutions.

## Additional context
I do not have an additional context
Any one can help?
<!-- Thank you for submitting your Pull Request. Please make sure you have
familiarised yourself with the [Contributing Guidelines](https://github.com/kittinunf/Fuel/CONTRIBUTING.md)
before continuing. -->

<!-- Remove anything that doesn't apply -->

## Description

This commit enhances the incremental task "test".
Notable, this task uses the files included in the directory `src/test/assets/`.
Some tests depend on them (i.e., there are assertions that depend on the state of these files). So, any update to any of those files should re-trigger the task "test".

This pull request adds those files as input to this task.

## Type of change

- [X] Bug fix (a non-breaking change which fixes an issue)

## How Has This Been Tested?

## Checklist:

- [X] I have performed a self-review of my own code
- [X] New and existing unit tests pass locally with my changes

# Feature Request

## Description
Currently, it is impossible to add an async authentication like firebase auth token function is async.

## Proposed Solution
`FoldableRequestInterceptor` should support a `Task`

## Alternatives I've considered
Validation and renewing (if necessary) token every `onResume` instead of every request

## Additional context
```
class AuthRequestInterceptor(c: Context) : FoldableRequestInterceptor {
        private var context: Context = c

        override fun invoke(next: RequestTransformer): RequestTransformer {
            return { request ->
                FirebaseAuth.getInstance().currentUser?.let { firebaseUser ->
                    firebaseUser.getIdToken(false).addOnSuccessListener {
                        it.token?.let { token ->
                            request.appendHeader("Authorization", String.format("Bearer ${token}"))
                        }
                        next(request)
                    }
                    // ERROR BECAUSE NEEDS TO RETURN HERE
                } ?: next(request)
            }
        }
    }
```
# Bug Report

## Description
Not pass `StrictMode.VmPolicy.Builder.detectUntaggedSockets()`

## To Reproduce

``` Kotlin
StrictMode.VmPolicy.Builder().detectUntaggedSockets()

...

url.httpDownload()
   .fileDestination { _, _ -> savedLldJsonFile }
   .awaitByteArrayResult()
   .fold(success, failure)
```

## Expected behavior
No warings/errors.

## Environment

### Development Machine
 - OS: Windows 10
 - IDE: Android Studio 3.5.3
 - Fuel version: 2.2.1

## Additional context
```
2019-12-21 17:58:43.892 10436-10485/net.imknown.android.forefrontinfo D/NetworkSecurityConfig: No Network Security Config specified, using platform default
2019-12-21 17:58:44.375 10436-10485/net.imknown.android.forefrontinfo D/StrictMode: StrictMode policy violation: android.os.strictmode.UntaggedSocketViolation: Untagged socket detected; use TrafficStats.setThreadSocketTag() to track all network usage
        at android.os.StrictMode.onUntaggedSocket(StrictMode.java:2124)
        at com.android.server.NetworkManagementSocketTagger.tag(NetworkManagementSocketTagger.java:82)
        at libcore.io.BlockGuardOs.tagSocket(BlockGuardOs.java:52)
        at libcore.io.BlockGuardOs.socket(BlockGuardOs.java:372)
        at libcore.io.ForwardingOs.socket(ForwardingOs.java:217)
        at libcore.io.IoBridge.socket(IoBridge.java:658)
        at java.net.PlainSocketImpl.socketCreate(PlainSocketImpl.java:128)
        at java.net.AbstractPlainSocketImpl.create(AbstractPlainSocketImpl.java:128)
        at java.net.Socket.createImpl(Socket.java:489)
        at java.net.Socket.getImpl(Socket.java:552)
        at java.net.Socket.setSoTimeout(Socket.java:1180)
        at com.android.okhttp.internal.io.RealConnection.connectSocket(RealConnection.java:143)
        at com.android.okhttp.internal.io.RealConnection.connect(RealConnection.java:116)
        at com.android.okhttp.internal.http.StreamAllocation.findConnection(StreamAllocation.java:186)
        at com.android.okhttp.internal.http.StreamAllocation.findHealthyConnection(StreamAllocation.java:128)
        at com.android.okhttp.internal.http.StreamAllocation.newStream(StreamAllocation.java:97)
        at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:289)
        at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:232)
        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:465)
        at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:131)
        at com.android.okhttp.internal.huc.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:90)
        at com.android.okhttp.internal.huc.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:30)
        at com.github.kittinunf.fuel.toolbox.HttpClient.sendRequest(HttpClient.kt:135)
        at com.github.kittinunf.fuel.toolbox.HttpClient.doRequest(HttpClient.kt:78)
        at com.github.kittinunf.fuel.toolbox.HttpClient.access$doRequest(HttpClient.kt:28)
        at com.github.kittinunf.fuel.toolbox.HttpClient.awaitRequest(HttpClient.kt:66)
        at com.github.kittinunf.fuel.core.requests.SuspendableRequest.executeRequest(SuspendableRequest.kt:21)
        at com.github.kittinunf.fuel.core.requests.SuspendableRequest.awaitResult(SuspendableRequest.kt:40)
        at com.github.kittinunf.fuel.core.DeserializableKt.awaitResult(Deserializable.kt:240)
        at net.imknown.android.forefrontinfo.GatewayApi$Companion$downloadLldJsonFile$$inlined$awaitByteArrayResult$1.invokeSuspend(Coroutines.kt:43)
        at net.imknown.android.forefrontinfo.GatewayApi$Companion$downloadLldJsonFile$$inlined$awaitByteArrayResult$1.invoke(Unknown Source:10)
        at kotlinx.coroutines.intrinsics.UndispatchedKt.startUndispatchedOrReturn(Undispatched.kt:91)
        at kotlinx.coroutines.BuildersKt__Builders_commonKt.withContext(Builders.common.kt:154)
        at kotlinx.coroutines.BuildersKt.withContext(Unknown Source:1)
        at net.imknown.android.forefrontinfo.GatewayApi$Companion.downloadLldJsonFile(GatewayApi.kt:90)
        at net.imknown.android.forefrontinfo.ui.home.HomeFragment.collectionDataset(HomeFragment.kt:143)
        at net.imknown.android.forefrontinfo.base.BaseListFragment.collectionDatasetCaller(BaseListFragment.kt:115)
        at net.imknown.android.forefrontinfo.base.BaseListFragment.collectionDatasetCaller$default(BaseListFragment.kt:110)
        at net.imknown.android.forefrontinfo.base.BaseListFragment$onActivityCreated$1.invokeSuspend(BaseListFragment.kt:52)
        at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
        at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:56)
        at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:561)
        at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:727)
        at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:667)
    	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(C
2019-12-21 17:58:44.421 10436-10485/net.imknown.android.forefrontinfo W/System.err: StrictMode VmPolicy violation with POLICY_DEATH; shutting down.
2019-12-21 17:58:44.421 10436-10485/net.imknown.android.forefrontinfo I/Process: Sending signal. PID: 10436 SIG: 9
```

# Feature Request

Any pointers how I would go about handling some custom methods, such as PROPFIND, MOVE etc? Is the framework extensible ? (Hint: Trying todo some Webdav browsing with Fuel) I guess I would need to extend somehow `com.github.kittinunf.fuel.core`'s `RequestFactory` ? 


## Alternatives I've considered
I've looked about with older issues such as https://github.com/kittinunf/fuel/issues/225 but I'm still "in the woods"

# Bug Report

## Description
Download crash. 

## To Reproduce
This crash will occur when network quality is **bad**.
The connecting timeout is very long.

``` kotlin
fun downloadApk(
            url: String,
            fileName: String,
            progressCallback: ProgressCallback,
            success: (ByteArray) -> Unit,
            failure: (FuelError) -> Unit
        ) {
            url.httpDownload()
                .fileDestination { _, _ ->
                    clearFolder(MyApplication.getApkDir())
                    MyApplication.getApkDir().mkdirs()
                    File(MyApplication.getApkDir(), fileName)
                }
                .responseProgress(progressCallback)
                .awaitByteArrayResult().fold(success, failure)
        }
```

## Environment

### Development Machine
 - OS: [Windows 10]
 - IDE: [Android Studio 3.5.2]
 - Fuel version: [2.2.1]
 - Kotlin version: [1.3.61]

### Smartphone or Emulator
 - Device: [Yeshen Emulator]
 - OS: [Android 5.1]

## Additional context
``` txt
11-29 20:38:48.469 3028-3039/net.imknown.android.forefrontinfo E/StrictMode: A resource was acquired at attached stack trace but never released. See java.io.Closeable for information on avoiding resource leaks.
    java.lang.Throwable: Explicit termination method 'close' not called
        at dalvik.system.CloseGuard.open(CloseGuard.java:184)
        at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:287)
        at com.android.okhttp.Connection.upgradeToTls(Connection.java:201)
        at com.android.okhttp.Connection.connect(Connection.java:155)
        at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:276)
        at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:211)
        at com.android.okhttp.internal.http.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:382)
        at com.android.okhttp.internal.http.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:106)
        at com.android.okhttp.internal.http.DelegatingHttpsURLConnection.connect(DelegatingHttpsURLConnection.java:89)
        at com.android.okhttp.internal.http.HttpsURLConnectionImpl.connect(HttpsURLConnectionImpl.java:25)
        at com.github.kittinunf.fuel.toolbox.HttpClient.sendRequest(HttpClient.kt:135)
        at com.github.kittinunf.fuel.toolbox.HttpClient.doRequest(HttpClient.kt:78)
        at com.github.kittinunf.fuel.toolbox.HttpClient.access$doRequest(HttpClient.kt:28)
        at com.github.kittinunf.fuel.toolbox.HttpClient.awaitRequest(HttpClient.kt:66)
        at com.github.kittinunf.fuel.core.requests.SuspendableRequest.executeRequest(SuspendableRequest.kt:21)
        at com.github.kittinunf.fuel.core.requests.SuspendableRequest.awaitResult(SuspendableRequest.kt:40)
        at com.github.kittinunf.fuel.core.DeserializableKt.awaitResult(Deserializable.kt:240)
        at net.imknown.android.forefrontinfo.GatewayApi$Companion$downloadApk$$inlined$awaitByteArrayResult$1.invokeSuspend(Coroutines.kt:43)
        at net.imknown.android.forefrontinfo.GatewayApi$Companion$downloadApk$$inlined$awaitByteArrayResult$1.invoke(Coroutines.kt)
        at kotlinx.coroutines.intrinsics.UndispatchedKt.startUndispatchedOrReturn(Undispatched.kt:91)
        at kotlinx.coroutines.BuildersKt__Builders_commonKt.withContext(Builders.common.kt:156)
        at kotlinx.coroutines.BuildersKt.withContext(Unknown Source)
        at net.imknown.android.forefrontinfo.GatewayApi$Companion.downloadApk$app_debug(GatewayApi.kt:99)
        at net.imknown.android.forefrontinfo.ui.settings.SettingsFragment.downloadApk(SettingsFragment.kt:296)
        at net.imknown.android.forefrontinfo.ui.settings.SettingsFragment$showDownloadConfirmDialog$1$1$1.invokeSuspend(SettingsFragment.kt:258)
        at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
        at kotlinx.coroutines.DispatchedTask.run(Dispatched.kt:241)
        at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:594)
        at kotlinx.coroutines.scheduling.CoroutineScheduler.access$runSafely(CoroutineScheduler.kt:60)
        at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:740)
11-29 20:38:48.469 3028-3039/? W/System.err: StrictMode VmPolicy violation with POLICY_DEATH; shutting down.
11-29 20:38:48.469 3028-3039/? I/Process: Sending signal. PID: 3028 SIG: 9
```

# Make use of x-form-urlenoded parameters more explicit

## Description
If have to send requests to an API that I do not control, where some parameters are sent inside the URL and others are sent as `x-form-urlencoded` body. I don't see an easy way to do this with fuel. In my opinion this is caused by the rather implicit handling of parameters. 

## Proposed Solution
Add a new function `urlEncodedBody` that sets a body explicitly with the correct headers, like `jsobBody`. 

Example:
```kotlin
FuelManager.post("path/", listOf("param" to 1))
    .urlencodedBody(listOf("foo" to "foo", "bar" to "bar"))
```
would set the Header `Content-Type : application/x-www-form-urlencoded` and set a body `Body: "foo=foo&bar=bar".

## Additional change
Remove automatic encoding in the `x-form-urlencoded` body. In my opinion, this is bad design anyway. The `parameters` argument should not be used for two independent features. To a developer, those three lines look very similar, yet the parameters behave "arbitrarily".

```kotlin
FuelManager.get("path/", listOf("param" to 1))
FuelManager.post("path/", listOf("param" to 1))
FuelManager.post("path/", listOf("param" to 1))
    .jsonBody("{}")
```

## Additional context
I find it hard to understand when Fuel puts parameters in the URL or encode them as `x-form-urlencoded` body in general. I have used Fuel for almost a year know on a daily basis and always have difficulties to remember how those parameters are encoded in POST request. 

## Description

setFixedLengthStreamingMode(Long) requires at least Android API 19. If that method is not found, call the old setFixedLengthStreamingMode(Int).

## Type of change

Check all that apply

- [X] Bug fix (a non-breaking change which fixes an issue)
- [ ] New feature (a non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Refactoring (a change which changes the current internal or external interface)
- [ ] This change requires a documentation update

## How Has This Been Tested?

Tested this with my app and API 15.

## Checklist:

- [X] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation, if necessary
- [X] My changes generate no new compiler warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [X] New and existing unit tests pass locally with my changes
- [ ] Inspect the bytecode viewer, including reasoning why

I want to store certificates in my application to support HTTPS, to configure certificates on each HTTPS request. What should I do? I have searched for relevant problems and have not found a solution