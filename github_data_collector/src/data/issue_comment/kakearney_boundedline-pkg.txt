If the first argument (X) is of type datetime, it breaks because isnan doesn't work on datetime (isnat works instead).
If bounds are defined in such a way that the bounds cross over each other, the resulting patch is not rendered correctly.  This can occur if, for example, the bounds are applied to the independent rather than the dependent variable in a line plot:

```matlab
x = 1:1000; 
y = sind(x); 
e = 70; 

boundedline(x,y,e,'orientation','horiz');
```

![blcrisscross1](https://cloud.githubusercontent.com/assets/5015092/24569389/b48fc050-161a-11e7-9a74-7df4d33d3e8b.png)

(Issue raised by Chad Greene via email)

There has been several discussions of handling NaNs [on the Matlab toolbox page](http://www.mathworks.com/matlabcentral/fileexchange/27485-boundedline-m). While there are several options for handling NaNs in all cases, e.g. in x, or y, or in the patch, etc. The simplest and most typical case is to handle NaNs in y in the same manner as 'plot' command so that non-contiguous lines are supported. 

Consider this plot: 

```
x = 1:10;
y = x + rand(1, 10);
boundary = 2 * ones(1, 10);
boundedline(x, y, boundary);  % requires boundedline function to be on path
```

![bounded](https://cloud.githubusercontent.com/assets/4990236/13055252/4c3c70d8-d3dc-11e5-8695-fe0d2db7523f.jpg)

Now when we add a NaN in y, this is not supported: 

```
y(5) = NaN;
boundedline(x, y, boundary);  % error
```

This is the desired behavior: 

![bounded-nan](https://cloud.githubusercontent.com/assets/4990236/13055273/70345f64-d3dc-11e5-9c45-076ae0d13ce3.jpg)

This is akin to the way the 'plot' command would handle this case: 

```
plot(x, y);  % with y(5) = NaN
```

![plot-nan2](https://cloud.githubusercontent.com/assets/4990236/13055347/d8a95fae-d3dc-11e5-8c0d-e88b32d52f16.png)
