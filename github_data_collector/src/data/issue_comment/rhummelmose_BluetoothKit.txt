Is this library suitable for modbus protocol communication with iOS devices and some meter devices? thanks
it is very nice
bug it do not for swift 4.2
can you adapt it
- It's now also possible to simply pause a BKPeripheral instance, keeping the info about all the connected BKCentrals.

- It's now possible to look for multiple BKCharacteristic associated with a BKService. Delegate methods have been updated accordingly.
I have installed the latest update of the code but I am facing a serious problem when I try to connect on iOS 11.0+ devices.

Every time I receive a message that says: 'Please turn on Bluetooth to connect to the device'. I have traced the code and it seems that the CBCentralManager state is always poweredOff. 

I tested BLE connection on the same iOS 11 device with other apps and it works fine. Sometimes it just needed to turn off then turn on the Bluetooth from settings to be able to connect. Other apps works after turning off then on the Airplane mode. But neither works with my app and its Bluetooth kit code. 

Any solution please ?

The code in BKPeer.swift, `sendData` is as follows after a task is added to the sendDataTasks array
```
if sendDataTasks.count == 1 {
            processSendDataTasks()
        }
```

This processes the tasks if there's exactly 1 task in that array. Unfortunately, when you have multiple peers and/or you're sending a several data tasks, the array will grow past 1 and the `processSendDataTasks()` is never called.

The code should be:
```
if sendDataTasks.count >= 1 {
            processSendDataTasks()
        }
```

I'll follow this with a PR to address it.

Thanks,

Eric.


I just came across this typo (or what seems to be a typo).  Just FYI.

You're passing the `oldCause` as the `newCause` and vise versa.

https://github.com/rhummelmose/BluetoothKit/blob/bfd0fc1a0adfbc594bd5142cb94b0952bdc69534/Source/BKPeripheral.swift#L210
Hi,
I tested BluetoothKit background scanning and I could not make it work. The issue I have encountered is that `scanContinuouslyWithChangeHandler` actually scans for <default> 3 seconds, pauses for `inBetweenDelay` of 3 seconds and starts again. Scanning and pause interval are implemented using timers that do not work in background with phone locked.
Info.plist has correct keys since after changes I have made it worked as expected.
In BKScanner.swift I have cloned `scanWithDuration` function with different name and did not initialised `durationTimer`. Then I used new function when/where needed (several other changes had to be made to original code).
However I appreciate all help since  BluetoothKit is very good library and I didn't had to write all the code myself (-:
I am using the BLE CC2541 module to interact with my arduino device. 

For testing, I connected the TxD pin and RxD pin directly for that I can get the same data when I send data in iOS App.

Like this:
![](http://nladuo.github.io/issue_imgs/BluetoothKit_69/ble.png)

First, I used the Example of this repository. After I modified the UUID of service and characteristic, I successfully scanned my BLE device. But when I send multiple data, it only received one.
![](http://nladuo.github.io/issue_imgs/BluetoothKit_69/log.png)

And then I created a simple project, It has a button for sending data, a textfield for what to send and a textview for displaying the received data. 

The code is like this:
``` swift
    @IBAction func onSendBtnClicked(_ sender: Any) {
        
        let data: Data = (inputTextField.text?.data(using: String.Encoding.utf8))!
        
        
        central.sendData(data, toRemotePeer: remotePeripheral) { data, remotePeripheral, error in
            guard error == nil else {
                print("Failed sending to \(remotePeripheral)")
                return
            }
            print("Sent to \(remotePeripheral)")
        }
    }

    func remotePeer(_ remotePeer: BKRemotePeer, didSendArbitraryData data: Data) {
        print("Recieved: \(String(data: data, encoding: String.Encoding.utf8) ?? "error")")
        
        receivedTextView.text = receivedTextView.text + String(data: data, encoding: String.Encoding.utf8)!
    }
```
I filled the TextField with "gghh", after multiple clicking on sendBtn, what it returned like this:
![](http://nladuo.github.io/issue_imgs/BluetoothKit_69/log2.png)

Previously, I used a objective-c library: [SerialGATT.h](https://github.com/nladuo/ElectronicDIY/blob/master/03-PM2.5%E6%A3%80%E6%B5%8B%E4%BB%AA/BlePM2.5_iOS/BleCom/SerialGATT.h), [SerialGATT.m](https://github.com/nladuo/ElectronicDIY/blob/master/03-PM2.5%E6%A3%80%E6%B5%8B%E4%BB%AA/BlePM2.5_iOS/BleCom/SerialGATT.m)
 which can receive the data at real time when I tap the button.
I am using `pod 'BluetoothKit', '~> 0.4.0'`. 
I'm getting a CoreBluetooth warning:

`[CoreBluetooth] WARNING: The delegate for <CBPeripheral: 0x1740ede00, identifier = 11897F77-4927-47DC-BDE6-B4F9707530C5, name = iPhone, state = connected> does not implement -[peripheral:didModifyServices:]`

Looks like it just needs an implementation in the `BKCBPeripheralDelegateProxy `

