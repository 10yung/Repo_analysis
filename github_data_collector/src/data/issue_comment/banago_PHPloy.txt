On a local pre-deploy command, if the exit code is
greater than 0, stop the deploy process
Hello, 

I have a project with large binary files managed by git lfs.
When deploying a commit with a large file it crashes silently :

```
SERVER: demo

 ^  1 of 23 index.html
 ^  2 of 23 fr.js

# Back to prompt instead of file 3 etc ...
```

I managed to find that the issue comes from the `memory_limit ` in PHP that is below the size of the file to upload.

A test or a specific message would be nice to help users facing this issue in the future.

Thanks a lot,




Thank you for you hard work on this project. 
I've been having a minor issue in that the order of a `include[]` seems to make a difference for condition includes. For example, an `.ini` file with:

```
include[] = 'path_a:composer.lock'
include[] = 'path_b'
```

will not include `path_b` in the deployment.  However the reverse does work: 

```
include[] = 'path_b'
include[] = 'path_a:composer.lock'
```

I'm not certain what the exact issue is, but it appears that a conditional `include` must be listed after the non-conditional `include`

thank you
This issue was originally raised in #306 and seems to have been addressed in #313. However, as of today, it appears that the contents of included directories are always deployed in their entirety, even if no changes have been made to their contents.

This is obviously a big problem with composer's vendor directory that may include thousands of files.

To reproduce:
1. Create an ignore rule in .gitignore for a directory called "temporary"
1. Add this line to your phploy.ini: `include[] = 'temporary'`
1. Commit the .gitignore changes
1. Create a new directory called "temporary"
1. Create a file inside it
1. Deploy
1. Deploy again. You'll see that the file is re-uploaded despite there having been no changes made
I am trialing using phploy for our deployment process and everything's a dream so far (thank you for your hard work!). The only trouble I'm having is with the 'base' option which appears to be ignored during deploy.

My company keeps their applications in large mono-repos, and in the particular test example I'm using, a WordPress install is included inside of a folder (cleverly named, 'wordpress/'). I set `base = 'wordpress/'` in the config, yet it begins uploading from the parent working directory (where the composer files are located).

I'll include the config file below which I generated using the `phploy --init` command.

Any thoughts on where I should be looking for the solution?

```yaml
[staging]
    scheme = ftp
    host = HOST
    path = public_html/some-folder
    user = 'USERNAME'
    pass = 'PASSWORD'
    base = 'wordpress/'
```
Hi. I'm not understanding setting purge-before [].
My repo contains:
```
/dir1
/dir1/file_in_dir_1
/dir2
/dir2/file_in_dir_2
file1
file2
```
phploy.ini:
```
[production]
    scheme = 'sftp'
    user = '#'
    pass = '#'
    host = #
    path = /var/www/#/htdocs/
    port = #
    branch = master
    permissions = 0700
    directoryPerm = 0775
    exclude[] = '*.bak'
    exclude[] = '*.log'
    exclude[] = '.vscode'
    purge-before[] = "dir2/"
```
I do phploy --fresh and see in log:
```
SERVER: production
Purging directory dir2/
....
```
And in the dir2 directory there were files only from the repo, everything is OK.
Next, I run phploy and dir2 is cleared up. That is the same as if I used purge []
Is this normal behavior?


I created a .revision file on server  - with a previous commit hash but when running phploy it simply states:

```
Your branch is up to date with 'origin/master'.

SERVER: production

No files to upload or delete.
```

- When clearing the .revision file it wants to upload all files.
- When running `phploy --sync` it updates revision to the latest hash

Can any one assist? 
Running with debug option gives me remote revision hash but still no files uploaded.
Is there already an opportunity to support a connection with WebDav protocol?
When testing what is going to change with `--list`, nothing is shown for sub modules, this makes the deployment a little more risky.

Can we look at adding this.
When using `base = 'www/'` and the server does not contain any directories, wrong directories will be created.

On the server the directory _path_/www/... wil be created. But the files are put in _path_/.../ without the _base_ directory.

Looking into **phploy.php** I noticed that directory creation does not take _base_ into account. First remote directories are created (with _base_ in the filename). Then _base_ is stripped and the file is transfered.

```
                // Make sure the folder exists in the FTP server.
                $dir = explode('/', dirname($file));
                $path = '';
                $ret = true;

                // Skip mkdir if dir is basedir
                if ($dir[0] !== '.') {
                    // Loop through each folder in the path /a/b/c/d.txt to ensure that it exists
                    // @TODO Can be improved by using: $filesystem->write('path/to/file.txt', 'contents');
                    for ($i = 0, $count = count($dir); $i < $count; ++$i) {
                        $path .= $dir[$i].'/';
                        if (!isset($pathsThatExist[$path])) {
                            if (!$this->connection->has($path)) {
                                $this->connection->createDir($path);
                                $this->cli->out(" + Created directory '$path'.");
                                $pathsThatExist[$path] = true;
                            } else {
                                $pathsThatExist[$path] = true;
                            }
                        }
                    }
                }

                $filePath = $this->repo.'/'.($this->currentSubmoduleName ? str_replace($this->currentSubmoduleName.'/', '', $file) : $file);
                $data = @file_get_contents($filePath);

                // It can happen the path is wrong, especially with included files.
                if ($data === false) {
                    $this->cli->error(' ! File not found - please check path: '.$filePath);
                    continue;
                }

                // If base is set, remove it from filename
                $remoteFile = $this->base ? preg_replace('/^'.preg_quote($this->base, '/').'/', '', $file) : $file;

```