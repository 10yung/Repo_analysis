	u := entities.User{
		Name:  "Bill",
		email: "bill@email.com",
	}

email but Emailï¼Œit error

Hi, I don't understand what does this syntax mean in the struct on chapter 7, 'runner' example: 

```
// Runner runs a set of tasks within a given timeout and can be
// shut down on an operating system interrupt.
type Runner struct {
	// interrupt channel reports a signal from the
	// operating system.
	interrupt chan os.Signal

	// complete channel reports that processing is done.
	complete chan error

	// timeout reports that time has run out.
	timeout <-chan time.Time

	// tasks holds a set of functions that are executed
	// synchronously in index order.
	tasks []func(int)
}

```

Why this is the only channel that gets the syntax -<chan time.Time ? 

Thanks ! 
In this file:

https://github.com/goinaction/code/blob/master/chapter2/sample/search/feed.go

We have this code:

    var feeds []*Feed
    err = json.NewDecoder(file).Decode(&feeds)

    // We don't need to check for errors, the caller can do this.
    return feeds, err

However in this file:

https://raw.githubusercontent.com/goinaction/code/master/chapter2/sample/matchers/rss.go

    // Decode the rss feed document into our struct type.
    // We don't need to check for errors, the caller can do this.
    var document rssDocument
    err = xml.NewDecoder(resp.Body).Decode(&document)
    return &document, err

I don't understand why they are handled the way they are handled. Can you explain?
First , take a look at [my version ](https://github.com/sword2ya/code/blob/master/chapter7/patterns/runner/runner.go)

it solved two problems
1.  when timeout , the task will continue until all finished.  but in most cases, we want tasks stop immediately after timeout
2. the interrupt signal won't stop when timeout or all task finished.
 


If I've understood the code correctly, line 54: p.factory() is not limited to the number of resources available (2). Suggest moving resource allocation to New() and removing the select in Acquire() so that the channel blocks.
line 45 should be:`fmt.Printf("Runner %d To The Line\n", runner)`

otherwise, the result will be:

> Runner 1 Running With Baton
> Runner 2 To The Line
> Runner 1 Exchange With Runner 2
> Runner 2 Running With Baton
> Runner 3 To The Line
> Runner 2 Exchange With Runner 3
> Runner 3 Running With Baton
> Runner 4 To The Line
> Runner 3 Exchange With Runner 4
> Runner 4 Running With Baton
> Runner 4 Finished, Race Over

Cannot resolve in main.go the 'log' and ' os' the others file contains the absolute path with github. But the remains two ( log and os ) is not present.. 