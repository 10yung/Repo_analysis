In preparation for the 5.x update, `esprima` is updating its dev dependencies.  As such, `lodash` needs to be updated.

### Steps to reproduce

* View package.json and package-lock.json
* Currently on 3.10.x

### Expected output

* `lodash` 4.17.5 is current

### Relevant references

* https://www.npmjs.com/package/lodash
I think following line is not a valid TypeScript:

https://github.com/jquery/esprima/blob/a971d877fe7af52d5518d25a758835dc51cd7dbe/src/nodes.ts#L632

I think a semicolon should be used instead:

```readonly regex: { pattern: string; flags: string }; ```

See [Object Types](https://github.com/microsoft/TypeScript/blob/master/doc/spec.md#1.3).

 The TS compiler seems to accept the code without any warnings. Perhaps I am wrong and this is not an object type, but I cannot see what else it could be.

Issue: #2005

The documentation only specifies Expression as the value for the left property of ForInStatement and ForOfStatement. This adds the VariableDeclaration type to the left property in the documentation.
The `ForInStatement` and `ForOfStatement` interfaces can also have `VariableDeclaration` as the value for the `left` property, as specified by the spec at https://www.ecma-international.org/ecma-262/10.0/index.html#sec-for-in-and-for-of-statements and demonstrated by running the following code:

```javascript
esprima.parseScript('for (const a in b) {}');
esprima.parseScript('for (const a of b) {}');
```

The code itself works fine, it's simply missing in the documentation, which says it can only have a value of type `Expression`.
**Steps to reproduce:**

1. Use Esprima demo page: https://esprima.org/demo/parse.html
2. Copy paste this code inside the editor
```javascript
function a() {
   var b = 5;
   /* Comment1 */
}
/* Comment2 */
{
   /* Comment 3 */
}
```
3. Check option (checkbox) "Attach comments"

**Expected output:**
All comments are trailing or leading with exception of the inner comment for "Comment 3"

**Actual output:**

```json
{
    "type": "Program",
    "body": [
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "a"
            },
            "params": [],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "b"
                                },
                                "init": {
                                    "type": "Literal",
                                    "value": 5,
                                    "raw": "5"
                                }
                            }
                        ],
                        "kind": "var",
                        "trailingComments": [
                            {
                                "type": "Block",
                                "value": " Comment1 ",
                                "range": [
                                    32,
                                    46
                                ]
                            }
                        ]
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false,
            "trailingComments": [
                {
                    "type": "Block",
                    "value": " Comment2 ",
                    "range": [
                        49,
                        63
                    ]
                }
            ]
        },
        {
            "type": "BlockStatement",
            "body": [],
            "innerComments": [
                {
                    "type": "Block",
                    "value": " Comment1 ",
                    "range": [
                        32,
                        46
                    ]
                },
                {
                    "type": "Block",
                    "value": " Comment2 ",
                    "range": [
                        49,
                        63
                    ]
                },
                {
                    "type": "Block",
                    "value": " Comment 3 ",
                    "range": [
                        69,
                        84
                    ]
                }
            ]
        }
    ],
    "sourceType": "script"
}
```

Multiple different Javascript snippets can result in a LineComment node:
```javascript
// type1
<!-- type2
--> type3
```

From current Esprima's output there's no way to know which one of these 'styles' was used as a comment.

Since this is specific to LineComment nodes, it's possible to split the type of node from 'LineComment' into 3 node types (one for each style). But I assume that would completely break the API. I offer the solution of adding 'style' attribute to Comment nodes (both Block and Line). The values can be: ['//', '<!--', '-->', '/*'].

I believe this API change is relatively minor since we're only adding an attribute without replacing any existing ones. We will have to change the [Comment section in the Esprima API documentation](https://esprima.readthedocs.io/en/latest/syntactic-analysis.html#comment-collection). There shouldn't be any performance degradation since the comment style is known while parsing, it just wasn't exposed to the AST.
<!--- Provide a summary in the title above. Be concise and specific!  -->
AST generation works fine but tokenization fails.
<!--
If you are here for reasons other than reporting a defect or suggesting an improvement,
please post to the mailing-list instead: http://groups.google.com/group/esprima.
Do not forget to explore the extensive documentation: http://esprima.org/doc/.

Please report one problem at a time! Refrain from filing a bulk report at once since
it will make it difficult to follow-up and we may have to close the issue.
-->

### Steps to reproduce
<!--- When reporting a defect, specify the scenario that reproduces the problem -->

```js
 esprima.tokenize('var m = a++/ b;')
```

### Expected output
Error should not be thrown

### Actual output
'Invalid regular expression: missing /'

<!--- Provide a summary in the title above. Be concise and specific!  -->
super() in non derived class constructors should throw a syntax error

<!--
If you are here for reasons other than reporting a defect or suggesting an improvement,
please post to the mailing-list instead: http://groups.google.com/group/esprima.
Do not forget to explore the extensive documentation: http://esprima.org/doc/.

Please report one problem at a time! Refrain from filing a bulk report at once since
it will make it difficult to follow-up and we may have to close the issue.
-->

### Steps to reproduce
<!--- When reporting a defect, specify the scenario that reproduces the problem -->

```js
esprima.parse('class A{
 constructor(){
  super(); 
 }
}')
```
### Expected output
<!--- When reporting a defect, write what should happen, e.g. a particular AST output -->
<!--- When suggesting an improvement, describe how it should work -->
throw an syntax error.
in firefox
```js
 SyntaxError: super() is only valid in derived class constructors
```
in chrome
```js
Uncaught SyntaxError: 'super' keyword unexpected here
```

### Actual output
<!--- When reporting a defect, write what actually happens instead of the expected behavior -->
<!--- When suggesting an improvement, explain the difference from current behavior -->

### Relevant references
<!--- Optionally, include as many relevant references, e.g. the ECMAScript specification. -->

Support preserving the single-line comment used in parsed Javascript code, so that escodegen can use the right style ('//', '<!--', '-->', '/*') to rebuild the tree.
I would have preferred to replace "type" in comment to be this prefix, but that would obviously break the API.

This solves issue #2003 
On the [parsing demo](https://esprima.org/demo/parse.html), the [tree view script](http://yui.yahooapis.com/combo?gallery-2013.01.09-23-24/build/gallery-sm-treeview/gallery-sm-treeview-min.js) gets blocked as it is loaded over HTTP instead of HTTPS.

### Steps to reproduce
* Go to https://esprima.org/demo/parse.html.
* Click on the "Tree" tab.

### Expected output
The tree view would be shown, like what occurs when unsafe scripts are loaded in Chrome.

### Actual output
The following messages get shown below the editor and in the "Syntax" tab.
Chrome:
> TypeError: Y.TreeView is not a constructor

Safari:
> TypeError: undefined is not a constructor (evaluating 'new Y.TreeView({ lazyRender: false, container: '#treeview' })')

The following messages get logged to the console.
Chrome:
> Mixed Content: The page at 'https://esprima.org/demo/parse.html#' was loaded over HTTPS, but requested an insecure script 'http://yui.yahooapis.com/combo?gallery-2013.01.09-23-24/build/gallery-sm-treeview/gallery-sm-treeview-min.js'. This request has been blocked; the content must be served over HTTPS.
_insert @ yui-min.js:6

Safari:
> [blocked] The page at https://esprima.org/demo/parse was not allowed to run insecure content from http://yui.yahooapis.com/combo?gallery-2013.01.09-23-24/build/gallery-sm-treeview/gallery-sm-treeview-min.js.
