#### What would you like to discuss?

Is there a way to send a request body in a DELETE request?

Similar to #966 but specific to a DELETE request.

This was possible in got 9 like so:

```js
got(url, {
  method: 'DELETE',
  json: true,
  body: { version: 0 }
})
```

But attempting this in got 10 does not transmit a request body:

```js
got(url, {
  method: 'DELETE',
  responseType: 'json',
  json: { version: 0 }
})
```

I attempted to use `json` and `body` (via `JSON.stringify()`), with and without specifying a `Content-Type: application/json` header.

Am I doing it wrong?

I don't see any mention of this change in the [v10 release notes](https://github.com/sindresorhus/got/releases/tag/v10.0.0).

This best I can find about this in any RFC is [here](https://tools.ietf.org/html/rfc7231#section-4.3.5):

> A payload within a DELETE request message has no defined semantics; sending a payload body on a DELETE request might cause some existing implementations to reject the request.

which does not seem to expressly forbid it.

#### Checklist

- [x] I have read the documentation.

Export the ReadError to:
* align the library interface with the documentation 
* allow library consumers to do `instanceof` checks on that kind of errors

Not sure if you want to cover this with some extra test. Just let me know.

#### Checklist

- [x] I have read the documentation.
- [x] I have included a pull request description of my changes.
- [ ] ~I have included some tests.~
- [ ] ~If it's a new feature, I have included documentation updates.~

#### Describe the bug

 - Node.js version: v13.5.0
 - OS & version: Linux pc 5.3.18-1-MANJARO #1 SMP PREEMPT Wed Dec 18 18:34:35 UTC 2019 x86_64 GNU/Linux

`got.stream()` stream emits `finish` before `error` in case of `ECONNREFUSED`. The `finish` event should be used to signal that all data has been written/sent once stream.end() has been called (https://nodejs.org/api/stream.html#stream_event_finish).

#### Actual behavior

`stream.pipeline()` promise is resolved.

#### Expected behavior

`stream.pipeline()` should be rejected with `ECONNREFUSED`;

#### Code to reproduce
This code
```js
const fs = require('fs');
const util = require('util');
const stream = require('stream');

const pipeline = util.promisify(stream.pipeline);
const got = require('got');


async function run() {
    await pipeline(
        // Read small file
        fs.createReadStream('/proc/version'),
        // Generates ECONNREFUSED
        got.stream.put('http://localhost:7777')
    )
}

run().then(() => {
    console.log('done');
}).catch((err) => {
    console.log('err', err);
})
```
Prints:
```
done
```
It seems that this is because `stream.pipeline()` considers the data handled if the finish event is received. To isolate the issue I wrote another small test:
```js
const got = require('got');

const u = got.stream.put('http://localhost:7777')
u.on('error', (err) => {
    console.log('err', new Date(), err);
});
u.on('end', () => {
    console.log('end', new Date());
});
u.on('close', () => {
    console.log('close', new Date());
});
u.on('finish', () => {
    console.log('finish', new Date());
});

const writeSomeMore = u.write('test');
console.log('writeSomeMore', writeSomeMore);
u.end();
```
Which prints:
```
writeSomeMore true
finish 2020-01-17T13:50:48.061Z
err 2020-01-17T13:50:48.071Z GotError: connect ECONNREFUSED 127.0.0.1:7777
    at onError (.../node_modules/got/dist/source/request-as-event-emitter.js:137:29)
    at handleRequest (.../node_modules/got/dist/source/request-as-event-emitter.js:170:17)
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1136:16) {
  name: 'RequestError',
  code: 'ECONNREFUSED'
}
```
Note that if I read `/dev/urandom` instead of `/proc/version` the stream.pipeline() promise is rejected.

#### Checklist

- [ x] I have read the documentation.
- [ x] I have tried my code with the latest version of Node.js and Got.

#### Describe the bug

 - Node.js version: 12.4.0
 - OS & version: Arch Linux Linux 5.4.11-arch1-1

When a url given to the got.post / got.get functions is incorrect AND the function is followed with a .json(), this error is thrown:

```
    TypeError: got.post(...).json is not a function
```

#### Actual behavior

Error is thrown (see above)

#### Expected behavior

Throw HTTP Error 404, Not found

#### Code to reproduce

```js
function test(){
  return got.get('undefined/https://jsonplaceholder.typicode.com/todos/1').json();
};

test();
```

#### Checklist

- [x] I have read the documentation.
- [x] I have tried my code with the latest version of Node.js and Got.

#### Describe the bug

 - Node.js version: 10.x and 12.x
 - OS & version: AWS Lambda, Got 10

This might not be caused by Got, but occurs when using Got 10 in combination with AWS XRay on AWS Lambda. **Note**: Got 9 works fine with the provided snippet. 

I also opened an issue on the [`aws-xray-sdk-node`](https://github.com/aws/aws-xray-sdk-node/issues/240) repository.

#### Actual behavior

Whenever XRay capture is enabled, the lambda doesn't return any response, and the actual request is made against `https://localhost`. Subsequent executions take longer and longer (even up to 2 minutes) until finally one execution will show a bunch of LAMBDA_RUNTIME_ERROR.

#### Expected behavior

Get contents of `google.com` and return the specified response (`body: 'ok'`)

#### Code to reproduce

```js
require('aws-xray-sdk-core').captureHTTPsGlobal(require('https'))
const got = require('got')

export async function handler() {
    await got.get(`https://google.com`)

    return {
        statusCode: 200,
        body: 'ok',
    }
}
```

#### Checklist

- [x] I have read the documentation.
- [x] I have tried my code with the latest version of Node.js and Got. (Lambda only supports up to Node.js 12)

#### Describe the bug

Using `got.post` with both `body` and `cache` options causes an exception.

 - Node.js version: 13.6.0
 - OS & version: Fedora 30
 - got version: 10.2.2

#### Actual behavior

```
GotError: Cannot read property 'on' of undefined
    at onError (/usr/src/npm/failures/got-test/node_modules/got/dist/source/request-as-event-emitter.js:137:29)
    at EventEmitter.handleRequest (/usr/src/npm/failures/got-test/node_modules/got/dist/source/request-as-event-emitter.js:170:17)
    at destroyer (internal/streams/pipeline.js:27:10)
    at internal/streams/pipeline.js:79:12
    at Array.map (<anonymous>)
    at pipeline (internal/streams/pipeline.js:76:28)
    at internal/util.js:297:30
    at new Promise (<anonymous>)
    at pipeline (internal/util.js:296:12)
    at EventEmitter.handleRequest (/usr/src/npm/failures/got-test/node_modules/got/dist/source/request-as-event-emitter.js:162:23)
    at Object.onceWrapper (events.js:428:26)
    at EventEmitter.emit (events.js:321:20) {
  name: 'RequestError'
}
```

#### Expected behavior

No exception.  Unsure if `options.cache` should do anything in this case or be ignored.  For my own use that does not matter as the server I'm really working with never provides cachable responses to POST requests.  Really the goal for me is to be able to use a shared "base options" object and not have to censor the `cache` option when performing posts.

#### Code to reproduce

```js
#!/usr/bin/env node
'use strict';
const got = require('got');

async function main() {
	await got.post('https://httpbin.org/post', {
		body: '',
		cache: new Map()
	});
}

main().catch(error => {
	console.error(error);
	process.exit(1);
});

```

#### Checklist

- [X] I have read the documentation.
- [X] I have tried my code with the latest version of Node.js and Got.

At this moment to be able to correctly define `got` methods as dependencies we need to import the module into type declaration files
```typescript
import got from 'got'

interface Dependencies {
  readonly get: typeof got.get
}
```

with introduced changes we can simply do as so:
```typescript
import { GotFunctions } from 'got'

interface Dependencies {
  readonly get: GotFunctions
}
```

#### Checklist

- [x] I have read the documentation.
- [x] I have included a pull request description of my changes.


#### What would you like to discuss?

Hi, we are using got heavily in my company to send several thousand requests/s so I'm doing some profiling to see in which places our app spends its time the most.

I've recently upgraded to Got 10 and I've seen that the library spends a significant (though, not alarming) percentage of the time in the normalize arguments phase, which at the same time calls the aforementioned merge function.

<img width="723" alt="Captura de pantalla 2020-01-08 a las 15 50 59" src="https://user-images.githubusercontent.com/10957618/71987541-b41e7200-322e-11ea-8226-80f130c2c9a5.png">

It looks like this single `slice` call to clone the array seems to spend quite a lot of time. So, my question is, do we really need to clone the array or could it be just referenced? If we need a copy, is `slice()` the fastest method? 

I tried https://jsperf.com/cloning-arrays/3 in Chrome 79 and it seems that there're faster (not so much tbh) alternatives.

#### Checklist

- [x] I have read the documentation.

If you do `got.stream(url, {body: stream, ...options})`, it may throw

```
Got\'s stream is not writable when the `body`, `json` or `form` option is used
```

even though you don't do `.write()` on it.
#### Describe the bug

 - Node.js version: -
 - OS & version: -

`got.mergeOptions` isn't merging instances of `URLSearchParams`. According to the README is should merge them.

#### Actual behavior
It looks like later instances of `URLSearchParams` just overwrite earlier values. (see code sample)

#### Expected behavior
It should merge the two URLSearchParams instances.

#### Code to reproduce

```js
const got = require('got');
got.mergeOptions({ searchParams: new URLSearchParams({ foo: 1 }) }, { searchParams: new URLSearchParams({ bar: 2 }) });
// => { ... searchParams: URLSearchParams { 'bar' => '2' } }
```

#### Checklist

- [x] I have read the documentation.
- [x] I have tried my code with the latest version of Node.js and Got.

I think some code got deleted in https://github.com/sindresorhus/got/pull/921. 

`merge.ts` got moved https://github.com/sindresorhus/got/pull/921/files#diff-5e2f9cb0db248d822e1b167d5ccf8e07. Before the move it had code to deal with instances of `URLSearchParams`:
https://github.com/sindresorhus/got/blob/9f4fe33585bf89de37f61ff5614435105be28f64/source/merge.ts#L13-L21

After the move it's missing the code to handle `URLSearchParams`: https://github.com/szmarczak/got/blob/a7e73f2fe89b1eca00d2f8fff71dffb2caf68c16/source/utils/merge.ts