I’ve been trying to install a profile onto iPhone but not exactly sure which api to use. I’m using the iMobileDevice variant of libimobiledevice but most functionality is same. I’ve tried Installation_proxy, misagent and now trying to figure out services to do it but no luck, any ideas?
I'm using Ubuntu 18.04, I was able to install ios-webkit-debug-proxy and libimobiledevice without issues. When running `idevice_id -l`  I get an error:
```
idevice_id: symbol lookup error: idevice_id: undefined symbol: idevice_device_list_extended_free
```

I'll the share the logs of the steps I took.

1. [sudo apt-get install autoconf automake libusb-dev libusb-1.0-0-dev libplist-dev libplist++-dev usbmuxd libtool libimobiledevice-dev libssl-dev](https://docs.google.com/document/d/1HaCQ1IL1p3kzVVmAZJ1dEX3MxvWiHkjWGkJEFiVv_R0/edit?usp=sharing)

2. [ios-webkit-debug-proxy](https://docs.google.com/document/d/1x6Hz2MZGRi0zyn4_7vt16ZCbO_daBzyB2oqmkVjXpLU/edit?usp=sharing)

3. [libplist](https://docs.google.com/document/d/1uxoo5X3ZMH_4h76N7djVdvtpWq3HbJo5hL1PhNTrj3E/edit?usp=sharing)

4. [libusbmuxd](https://docs.google.com/document/d/10WuUbUyu8X8AVjm42uFQOv7n1JJMLDpvnlRKT9LKlSs/edit?usp=sharing)

5. [libimobiledevice](https://docs.google.com/document/d/1WQnpK7EQuJE03dP7BqHYDYhUx6lfEdpSLf5uT7gk5vs/edit?usp=sharing)

6. [sudo apt-get install libimobiledevice-utils](https://docs.google.com/document/d/1HSl0QVZgn8yRJausp7ZBNsOSihxjNl0PO6VyXPHEt1g/edit?usp=sharing)
https://github.com/gh2o/rvi_capture/issues/4

I'm encountering this bug where a packet capture utility says it has "Not Enough Data" which seems to occur in this library. Any ideas?

On Ubuntu with a device running iOS 13.3.

```
Traceback (most recent call last):
  File "./rvi_capture.py", line 364, in <module>
    main()
  File "./rvi_capture.py", line 354, in main
    packet_dumper.run(packet_callback)
  File "./rvi_capture.py", line 295, in run
    for pkt in self.pkt_iter:
  File "./rvi_capture.py", line 183, in __iter__
    [chunk_len] = UB32.unpack(read_fully(4))
  File "./rvi_capture.py", line 178, in read_fully
    b += conn.recv(n - l)
  File "./rvi_capture.py", line 123, in recv
    self.handle, out, num_bytes, ctypes.byref(out_bytes), ctypes.c_uint(500)))
  File "./rvi_capture.py", line 59, in check
    raise cls(err)
__main__.IDeviceError: Error in libimobiledevice: Not Enough Data
```
Trying to do a full backup of my iPad Mini 4 via Linux Mint 19.3. I used this command: idevicebackup2 backup /media/kenny/X230-MINT-BACKUP/iPad-Backup 

It moves through the file list fairly quickly and I can see the file system and assets built on my target side, but it doesn't seem to finish. I let it run the first time for 12 hours, and the behavior is consistent.

Not sure if it matters, but the target device is an SD card mounted on my laptop.

![Selection_279](https://user-images.githubusercontent.com/2447420/71781025-e06c9100-2f97-11ea-8b50-8f7657d7603f.png)

New to GitHub, so be gentle. :)

Pretty simple situation.  I downloaded the zip of this project and as per the instructions ran autogen.sh.  The output (included following) seems to indicate that things go as expected until the end - at which point it dies because openssl can't be found.  Seeing as openssl is a pretty important component, the install ends up being unusable.

I know that Apple has been monkeying around with ssl-related components of late - which means that my first suspicion is that something changed in Catalina that causes autogen to fail.

Thoughts?  Suggestions?  Commiseration?

Thanks!
Aaron

glibtoolize: putting auxiliary files in '.'.
glibtoolize: linking file './ltmain.sh'
glibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.
glibtoolize: linking file 'm4/libtool.m4'
glibtoolize: linking file 'm4/ltoptions.m4'
glibtoolize: linking file 'm4/ltsugar.m4'
glibtoolize: linking file 'm4/ltversion.m4'
glibtoolize: linking file 'm4/lt~obsolete.m4'
configure.ac:31: installing './compile'
configure.ac:34: installing './config.guess'
configure.ac:34: installing './config.sub'
configure.ac:6: installing './install-sh'
configure.ac:6: installing './missing'
common/Makefile.am: installing './depcomp'
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... ./install-sh -c -d
checking for gawk... no
checking for mawk... no
checking for nawk... no
checking for awk... awk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether make supports nested variables... (cached) yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking for g++... g++
checking whether we are using the GNU C++ compiler... yes
checking whether g++ accepts -g... yes
checking dependency style of g++... gcc3
checking build system type... x86_64-apple-darwin19.2.0
checking host system type... x86_64-apple-darwin19.2.0
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /Library/Developer/CommandLineTools/usr/bin/ld
checking if the linker (/Library/Developer/CommandLineTools/usr/bin/ld) is GNU ld... no
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking whether ln -s works... yes
checking the maximum length of command line arguments... 196608
checking how to convert x86_64-apple-darwin19.2.0 file names to x86_64-apple-darwin19.2.0 format... func_convert_file_noop
checking how to convert x86_64-apple-darwin19.2.0 file names to toolchain format... func_convert_file_noop
checking for /Library/Developer/CommandLineTools/usr/bin/ld option to reload object files... -r
checking for objdump... objdump
checking how to recognize dependent libraries... pass_all
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for ar... ar
checking for archiver @FILE support... no
checking for strip... strip
checking for ranlib... ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /bin/dd
checking how to truncate binary pipes... /bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking for dsymutil... dsymutil
checking for nmedit... nmedit
checking for lipo... lipo
checking for otool... otool
checking for otool64... no
checking for -single_module linker flag... yes
checking for -exported_symbols_list linker flag... yes
checking for -force_load linker flag... yes
checking how to run the C preprocessor... gcc -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... yes
checking for gcc option to produce PIC... -fno-common -DPIC
checking if gcc PIC flag -fno-common -DPIC works... yes
checking if gcc static flag -static works... no
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/Library/Developer/CommandLineTools/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin19.2.0 dyld
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking how to run the C++ preprocessor... g++ -E
checking for ld used by g++... /Library/Developer/CommandLineTools/usr/bin/ld
checking if the linker (/Library/Developer/CommandLineTools/usr/bin/ld) is GNU ld... no
checking whether the g++ linker (/Library/Developer/CommandLineTools/usr/bin/ld) supports shared libraries... yes
checking for g++ option to produce PIC... -fno-common -DPIC
checking if g++ PIC flag -fno-common -DPIC works... yes
checking if g++ static flag -static works... no
checking if g++ supports -c -o file.o... yes
checking if g++ supports -c -o file.o... (cached) yes
checking whether the g++ linker (/Library/Developer/CommandLineTools/usr/bin/ld) supports shared libraries... yes
checking dynamic linker characteristics... darwin19.2.0 dyld
checking how to hardcode library paths into programs... immediate
checking for pkg-config... /usr/local/bin/pkg-config
checking pkg-config is at least version 0.9.0... yes
checking for libusbmuxd >= 1.1.0... yes
checking for libplist >= 1.11... yes
checking for libplist++ >= 1.11... yes
checking for ANSI C header files... (cached) yes
checking for stdint.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for string.h... (cached) yes
checking gcrypt.h usability... no
checking gcrypt.h presence... no
checking for gcrypt.h... no
checking for an ANSI C-conforming const... yes
checking for size_t... yes
checking for ssize_t... yes
checking for uint16_t... yes
checking for uint32_t... yes
checking for uint8_t... yes
checking for asprintf... yes
checking for strcasecmp... yes
checking for strdup... yes
checking for strerror... yes
checking for strndup... yes
checking for stpcpy... yes
checking for vasprintf... yes
checking endian.h usability... no
checking endian.h presence... no
checking for endian.h... no
checking whether byte ordering is bigendian... no
checking for platform-specific build settings... darwin19.2.0
checking for struct dirent.d_type... yes
checking for a Python interpreter with version >= 2.3... python
checking for python... /usr/bin/python
checking for python version... 2.7
checking for python platform... darwin
checking for python script directory... ${prefix}/lib/python2.7/site-packages
checking for python extension module directory... ${exec_prefix}/lib/python2.7/site-packages
checking for cython... no
configure: WARNING: cannot find 'cython' program. You should look at http://www.cython.org or install your distribution specific cython package.
checking for python2.7... (cached) /usr/bin/python
checking for a version of Python >= '2.1.0'... yes
checking for the distutils Python package... yes
checking for Python include path... -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7
checking for Python library path... -L/System/Library/Frameworks/Python.framework/Versions/2.7/lib -lpython2.7
checking for Python site-packages path... /Library/Python/2.7/site-packages
checking python extra libraries... -ldl  -framework CoreFoundation 
checking python extra linking flags... -u _PyMac_Error /System/Library/Frameworks/Python.framework/Versions/2.7/Python
checking consistency of all components of python development environment... yes
checking for openssl >= 0.9.8... no
configure: error: OpenSSL support explicitly requested but OpenSSL could not be found

Hi, I've been trying to compile libimobiledevice and run into this when running make:

idevice.c:1076:36: error: conversion to incomplete type
  if (usbmuxd_set_socket_type((enum usbmuxd_socket_type)value) != 0) {
                                    ^~~~~~~~~~~~~~~~~~~
idevice.c: In function ‘idevice_get_socket_type’:


If I change it to the idevice_socket_type function, I get another error saying I have undefined references for the following functions:

usbmuxd_get_socket_type
usbmuxd_set_socket_type
usbmuxd_get_tcp_endpoint
usbmuxd_set_tcp_endpoint


I built usbmuxd and it's installed so I'm not sure why it can't find the references. 
Add `--password-from-env` option to idevicebackup2 so that the backup password can be obtained from an environment variable and not from a command-line parameter.

This should be slightly more secure in that the password won't end up in the shell's command history.
okay, so it started with error code -21,
i have an macbook pro 2017, and am using an adaptor from USB C to USB A/B, so i figured this may give me the error code -21 #721 

i opened the Activity Monitor and searched for '' usbd '',  and Force Quit it, then i went back to the Terminal and did '' ideviceinfo'' again and now i am on Error Code -17

haven't seen any other articles on this Error Codes, i am not a programmer or anything myself, so i have no clue what to do now. 
Help? 
Gnome file manager complained "Invalid Apple File Control Received" when copying files to apps.  There seems to be a patch can address this issue, is it possible to merge it into upstream?  

**IOS:** 13.3
**Device:** iPhone 8 plus  
**Software Version**: 1:1.2.0.r154.gd04f8ff-1 (latest git build)  
**Patch:** https://bodhi.fedoraproject.org/updates/FEDORA-2019-7f37be9865
Only works ~33 % of the time. When it doesn't It prints a single question mark character:

    $ idevicedebug -d run com.yadda.yadda
    �
Ran it several times:
5 successes
9 failures

But the app does not launch. When it works, it works without printing anything. It does not matter if the screen is off or on. Also does not matter if the app was already launched.

When it fails to launch, it will wake the device.
