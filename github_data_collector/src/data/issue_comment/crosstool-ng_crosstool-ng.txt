Replace legacy bzero with memset
memset is more supported that bzero, this can help with msys2 support
[config.log](https://github.com/crosstool-ng/crosstool-ng/files/4026993/config.log)

System: Linux Mint 18.2
crosstool-NG version: latest from git clone (2020)

When i execute the configure command, it throws an error later at the end:

se@Obelix:~/rpi/develop/Downloads/crosstool-ng$ **./configure --prefix=/home/se/rpi/develop/toolchains/crosstool-ng**

checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking how to create a pax tar archive... gnutar
checking whether to enable maintainer-specific portions of Makefiles... yes
checking build system type... x86_64-pc-linux-gnu
checking host system type... x86_64-pc-linux-gnu
checking whether ln -s works... yes
checking whether install takes --strip-program option... yes
checking for ggrep... no
checking for grep... grep
checking for absolute path to grep... /bin/grep
checking for gegrep... no
checking for egrep... egrep
checking for absolute path to egrep... /bin/egrep
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for sed... /bin/sed
checking for GNU sed >= 4.0... yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables... 
checking whether we are cross compiling... configure: error: in /home/se/rpi/develop/Downloads/crosstool-ng':
configure: error: cannot run C compiled programs.
If you meant to cross compile, use --host'.
See `config.log' for more details

config.log is attached. A lot of strange errors inside.....

Someone with an idea?


I have the same issue like the guy from #819. A crosstool-ng based GCC does not search in these paths for headers:
- $SYSROOT/usr/local/include
- $SYSROOT/usr/local/include/arm-linux-gnueabihf

Although the GCC documentation states:

```
Cross compilers do not search either '/usr/local/include' or its replacement.
```

I can confirm that the Linaro toolchains actually do this (e.g. [arm-linux-gnueabihf](https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/)):

```
'/home/x/Desktop/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-g++' --sysroot=/tmp/tmp.llJIY0iWyQ/rpi-rootfs main.cpp -v
[...]
#include <...> search starts here:
 /home/x/Desktop/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/../lib/gcc/arm-linux-gnueabihf/7.5.0/../../../../arm-linux-gnueabihf/include/c++/7.5.0
 /home/x/Desktop/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/../lib/gcc/arm-linux-gnueabihf/7.5.0/../../../../arm-linux-gnueabihf/include/c++/7.5.0/arm-linux-gnueabihf/.
 /home/x/Desktop/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/../lib/gcc/arm-linux-gnueabihf/7.5.0/../../../../arm-linux-gnueabihf/include/c++/7.5.0/backward
 /home/x/Desktop/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/../lib/gcc/arm-linux-gnueabihf/7.5.0/include
 /home/x/Desktop/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/../lib/gcc/arm-linux-gnueabihf/7.5.0/include-fixed
 /home/x/Desktop/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/../lib/gcc/arm-linux-gnueabihf/7.5.0/../../../../arm-linux-gnueabihf/include
 /tmp/tmp.llJIY0iWyQ/rpi-rootfs/usr/local/include
 /tmp/tmp.llJIY0iWyQ/rpi-rootfs/usr/include/arm-linux-gnueabihf
 /tmp/tmp.llJIY0iWyQ/rpi-rootfs/usr/include
```
I'm pretty sure that this can be achieved without manually patching GCC. Linaro use their own tool named [ABE](https://git.linaro.org/toolchain/abe.git) for building toolchains. ABE allowed me to create a script for building my own "Linaro style" toolchain by copying all of its build steps. In this build script no patching is done and nevertheless $SYSROOT/usr/local/include is searched for headers.
I used an x86-64 workstation to build an ARM64v8 GCC 9.2.0 toolchain that's intended to run on a Raspberry Pi and produce binaries for the same RPi. (**Cross-native**, build != host == target, using a Canadian build)  
The toolchain seems to work fine (that is, it produces a _hello world_ binary that runs and prints "hello world").

The **problem** is that **it links to the old `libstdc++` that comes with the Ubuntu installation instead of the newer version that crosstool-NG built**.

Could you point me to the right documentation **how to install the toolchain to the host system?**  
I tried manually copying the contents of some `lib` folders to `/usr/local/lib`, and running `ldconfig` but there are many different folders with a `bin`+`lib`+`include` structure, and I couldn't get it to work.  
Why are there so many different folders? Why does a cross-native toolchain have a `sysroot` folder?

I've scanned through the documentation and searched through the issues, but I didn't find this mentioned anywhere.

For the current installation, I just copied the entire `x-tools` folder to the `/opt` folder of the host and added the `HOST-aarch64-rpi3-linux-gnu/aarch64-rpi3-linux-gnu/bin` folder to my path. But this uses the wrong shared libraries, as mentioned earlier.

```sh
$ aarch64-rpi3-linux-gnu-g++ --version
  aarch64-rpi3-linux-gnu-g++ (crosstool-NG UNKNOWN) 9.2.0
  Copyright (C) 2019 Free Software Foundation, Inc.
  This is free software; see the source for copying conditions.  There is NO
  warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

$ aarch64-rpi3-linux-gnu-g++ hello.cpp 
$ ldd a.out
        libstdc++.so.6 => /usr/lib/aarch64-linux-gnu/libstdc++.so.6 (0x0000004000832000)
        libm.so.6 => /lib/aarch64-linux-gnu/libm.so.6 (0x00000040009c7000)
        libgcc_s.so.1 => /lib/aarch64-linux-gnu/libgcc_s.so.1 (0x0000004000a81000)
        libc.so.6 => /lib/aarch64-linux-gnu/libc.so.6 (0x0000004000aa5000)
        /lib/ld-linux-aarch64.so.1 (0x0000004000000000)
$ readlink /usr/lib/aarch64-linux-gnu/libstdc++.so.6
  libstdc++.so.6.0.25
$ ls /opt/aarch64-rpi3-linux-gnu/aarch64-rpi3-linux-gnu/lib64/libstdc++.so.*
  /opt/aarch64-rpi3-linux-gnu/aarch64-rpi3-linux-gnu/lib64/libstdc++.so.6
  /opt/aarch64-rpi3-linux-gnu/aarch64-rpi3-linux-gnu/lib64/libstdc++.so.6.0.27
  /opt/aarch64-rpi3-linux-gnu/aarch64-rpi3-linux-gnu/lib64/libstdc++.so.6.0.27-gdb.py
```

- crosstool-NG version: 7bd6bb002fe52edcefdb3c02111548237551ac37
- Build OS: CentOS 7 (Docker)
- Host OS: Ubuntu ARM64v8 (Docker)
- Target OS: Ubuntu ARM64v8
- [config-cross.txt](https://github.com/crosstool-ng/crosstool-ng/files/4006445/config-cross.txt)
- [config-cross-native.txt](https://github.com/crosstool-ng/crosstool-ng/files/4006446/config-cross-native.txt)

Thanks!

Hello,

I am trying to build this toolchain on a Raspberry Pi 4 running Ubuntu 19.10.

I encounter this error (build.log) will be attached.
```
muman@ubuntu-rpi4:~/esp/crosstool-NG-esp-2019r2$ ./ct-ng build
[INFO ]  Performing some trivial sanity checks
[INFO ]  Build started 20191227.003019
[INFO ]  Building environment variables
[EXTRA]  Preparing working directories
[EXTRA]  Installing user-supplied crosstool-NG configuration
[EXTRA]  =================================================================
[EXTRA]  Dumping internal crosstool-NG configuration
[EXTRA]    Building a toolchain for:
[EXTRA]      build  = aarch64-unknown-linux-gnu
[EXTRA]      host   = aarch64-unknown-linux-gnu
[EXTRA]      target = xtensa-esp32-elf
[EXTRA]  Dumping internal crosstool-NG configuration: done in 0.27s (at 00:06)
[INFO ]  =================================================================
[INFO ]  Retrieving needed toolchain components' tarballs
[INFO ]  Retrieving needed toolchain components' tarballs: done in 0.31s (at 00:06)
[INFO ]  =================================================================
[INFO ]  Extracting and patching toolchain components
[ERROR]   
[ERROR]  >>
[ERROR]  >>  Build failed in step 'Extracting and patching toolchain components'
[ERROR]  >>        called in step '(top-level)'
[ERROR]  >>
[ERROR]  >>  Error happened in: CT_DoExtractPatch[scripts/functions@2074]
[ERROR]  >>        called from: CT_PackageRun[scripts/functions@1924]
[ERROR]  >>        called from: CT_ExtractPatch[scripts/functions@2230]
[ERROR]  >>        called from: do_companion_tools_autoconf_extract[scripts/build/companion_tools/200-autoconf.sh@8]
[ERROR]  >>        called from: do_companion_tools_extract[scripts/build/companion_tools.sh@28]
[ERROR]  >>        called from: main[scripts/crosstool-NG.sh@645]
[ERROR]  >>
[ERROR]  >>  For more info on this error, look at the file: 'build.log'
[ERROR]  >>  There is a list of known issues, some with workarounds, in:
[ERROR]  >>      https://crosstool-ng.github.io/docs/known-issues/
[ERROR]  >>
[ERROR]  >>  If you feel this is a bug in crosstool-NG, report it at:
[ERROR]  >>      https://github.com/crosstool-ng/crosstool-ng/issues/
[ERROR]  >>
[ERROR]  >>  Make sure your report includes all the information pertinent to this issue.
[ERROR]  >>  Read the bug reporting guidelines here:
[ERROR]  >>      http://crosstool-ng.github.io/support/
[ERROR]   
[ERROR]  (elapsed: 0:04.22)
```

Version info:
```
muman@ubuntu-rpi4:~/esp/crosstool-NG-esp-2019r2$ lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 19.10
Release:	19.10
Codename:	eoan
muman@ubuntu-rpi4:~/esp/crosstool-NG-esp-2019r2$ uname -a
Linux ubuntu-rpi4 5.3.0-1014-raspi2 #16-Ubuntu SMP Tue Nov 26 11:18:23 UTC 2019 aarch64 aarch64 aarch64 GNU/Linux
```

I downloaded the latest release package (tarball).

[build.log](https://github.com/crosstool-ng/crosstool-ng/files/4004788/build.log)


### Issue submission guidelines
See [detaled guidelines](http://crosstool-ng.github.io/support/). In short:
- Report crosstool-NG version
- Report host OS and its version
- Attach `.config` (unless the issue is not related to any configuration)
- Attach `build.log` (unless crosstool-NG fails before the build starts)

I am attempting to install the crosstool-ng as part of an esp32 tool chain. 
OS - ubuntu 18.04 LTS
Processor - AMD Athlon

This is a native install. I will note that this version of ubuntu does not have ncurses installed. You may want to add the install as part of the prerequisites.
sudo apt-get install libncurses-dev

./ct-ng xtensa-esp32-elf  < - puts in experimental stuff.... I didn't do it!
Fails at step:
./ct-ng build
[build.log](https://github.com/crosstool-ng/crosstool-ng/files/3995846/build.log)
[config.log](https://github.com/crosstool-ng/crosstool-ng/files/3995847/config.log)

[dot_config.txt](https://github.com/crosstool-ng/crosstool-ng/files/3995858/dot_config.txt)






### Issue submission guidelines
See [detaled guidelines](http://crosstool-ng.github.io/support/). In short:
- Report crosstool-NG version
- Report host OS and its version
- Attach `.config` (unless the issue is not related to any configuration)
- Attach `build.log` (unless crosstool-NG fails before the build starts)

Following the linux instructions for building at https://docs.espressif.com/projects/esp-idf/en/latest/get-started/linux-setup-scratch.html

did this clone on 12/21/19, and am doing a checkout of the esp-2019r2 branch, which should tell you the version correctly. Not sure how to get a version otherwise, since the configure 

git clone https://github.com/espressif/crosstool-NG.git
cd crosstool-NG
git checkout esp-2019r2
git submodule update --init
./bootstrap && ./configure --enable-local && make

Bootstrap succeeded, ./configure --enable-local did not.
Error is ....
checking for curl... curl                                                                             checking for stat... stat                                                                             checking whether stat takes GNU or BSD format... unknown                                              configure: error: cannot determine stat(1) format option      

Since configure did not succeed, so I am including config.log
[config.log](https://github.com/crosstool-ng/crosstool-ng/files/3991682/config.log)


Host OS: WSL ( windows services for Linux ) , running Debian Buster ( 18.06 ) apt . This is running on a very recent version of Windows 10 ( slow ring )

Stat version:
crosstool-NG$ stat --version
stat (GNU coreutils) 8.28
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Michael Meskes.

This PR includes a series of commits required to support building the 'nano' variant of C/C++ runtime libraries (using newlib; other libc support can be added in the future using a similar method).

The 'nano' runtime libraries are specified by the `nano.specs` file and are often included in embedded toolchains (e.g. GNU ARM Embedded) for memory-constrained target devices.

The following is a brief summary of the changes introduced by this PR:

1. Add nano variant-specific newlib configurations in `config/libc/newlib.in`.

    - Keep all `LIBC_NEWLIB_...` configs as is. These configurations will be used to build the normal variant (`lib{c,g}.a`).
    - Mirror all `LIBC_NEWLIB_...` configs to `LIBC_NANO_NEWLIB_...` configs. These configurations will be used to build the nano variant (`lib{c,g}_nano.a`).

2. Modify newlib build script to build `LIBC` and `LIBC_NANO` variants separately.

3. Build an additional libstdc++ with `-Os` (optimise for size) and place it as `lib{std,sup}c++_nano.a` (the default libstdc++ is built with `-O2`).

4. Strip debug information from the built libraries.

Refer to the following issues for the rationale of supporting both normal (non-nano) and nano variants: https://github.com/zephyrproject-rtos/sdk-ng/issues/151

This PR supersedes #1225, which only renames the default runtime libraries to comply with `nano.specs` without actually building a separate nano variant.
Hello

I'm getting build errors when I try to build the cross compiler with glibc-2.17 and binutils 2.32. I am getting `/tmp/ccaxN8sT.s: Error: '_obstack@GLIBC_2.2.5' can't be versioned to common symbol '_obstack_compat'` error. I did a quick google and it turns out that because of this [commit](https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;h=a3aea05a66ec325ddd19b0c8dbe504958a295cd3) which was merged in binutils 2.29 is causing the problem. I couldn't found any information if it has been fixed or not. But maybe my search is wrong. 
I also found out this issue #1237 and it made me think if a patch is already being  provided and I'm doing something worng.

Following are the build config and attached logfile.

- crosstool-NG version: 1.24
- host OS and its version: Debian Bullseye 5.2.17-1
- [.config](https://www.dropbox.com/s/vpxtc9km99eoozy/.config?dl=0)
- [build.log](https://www.dropbox.com/s/33bqsijjr7t95t8/build.log?dl=0)

Thanks :)

crosstool-NG version 1.24.0 release source code (git clone from github)
host OS:  windows 10  + cygwin64
configure files after excute ./configure 
[config.log](https://github.com/crosstool-ng/crosstool-ng/files/3873740/config.log)

[configure.txt](https://github.com/crosstool-ng/crosstool-ng/files/3873764/configure.txt)

What I have done:
I follow crosstool-ng build tutorial step by step.
1 cd crosstool-ng source dir
2 ./bootstrap
3./configure
4 make:
Failed during making 

what I copied from terminal log is below

zhaominjie@DESKTOP-5FO5LJR ~/crosstoolmaker/crosstool
$ make
/usr/bin/make  all-recursive
make[1]: 进入目录“/home/zhaominjie/crosstoolmaker/crosstool”
Making all in kconfig
make[2]: 进入目录“/home/zhaominjie/crosstoolmaker/crosstool/kconfig”
/usr/bin/make  all-am
make[3]: 进入目录“/home/zhaominjie/crosstoolmaker/crosstool/kconfig”
depbase=`echo conf.o | sed 's|[^/]*$|.deps/&|;s|\.o$||'`;\
gcc -DHAVE_CONFIG_H -I. -I..  -include config.h -DCONFIG_=\"CT_\"   -g -O2 -MT conf.o -MD -MP -MF $depbase.Tpo -c -o conf.o conf.c &&\
mv -f $depbase.Tpo $depbase.Po
In file included from conf.c:19:0:                                                                                      lkc.h:12:11: 致命错误：libintl.h：No such file or directory                                                              # include <libintl.h>                                                                                                             ^~~~~~~~~~~                                                                                                  编译中断。
make[3]: *** [Makefile:580：conf.o] 错误 1
make[3]: 离开目录“/home/zhaominjie/crosstoolmaker/crosstool/kconfig”
make[2]: *** [Makefile:440：all] 错误 2
make[2]: 离开目录“/home/zhaominjie/crosstoolmaker/crosstool/kconfig”
make[1]: *** [Makefile:2817：all-recursive] 错误 1
make[1]: 离开目录“/home/zhaominjie/crosstoolmaker/crosstool”
make: *** [Makefile:2564：all] 错误 2

zhaominjie@DESKTOP-5FO5LJR ~/crosstoolmaker/crosstool
  
The header  libintl.h   seem  to be needed .
I googled it is from gettext  library which can be install via cygwin graphical installer， 
and the header does exist  in the path $(cygwin install dir)\usr\x86_64-w64-mingw32\sys-root\mingw\include after I installed gettext lib.
yet I still receive the same error showed above
and the libintl.h  can not be finded.
Help please 