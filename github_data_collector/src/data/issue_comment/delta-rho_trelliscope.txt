The following code crashes `R 3.4.1` on my Windows machine:

```
library(datadr)
library(trelliscope)

# set up viz database

conn <- vdbConn("vdb", name = "Example")
data(iris)
div <- divide(iris, by = "Species")

# create panel function

exPanel <- function(data) {
    hist(data$Sepal.Length)
    return(NULL)
}

# make display

makeDisplay(div,
            name = "foo",
            desc = "bar",
            panelFn = exPanel)
```

Debugging with Visual Studio, the error I get is

> Unhandled exception at 0x0000000300000002 in rsession.exe: 0xC0000005: Access violation at location 0x0000000300000002.

It looks like it happens right after a call to `grDevices.dll!000000006fc827ef()`; stepping through `makeDisplay()`, it appears that the issue arises from the following call:

```
suppressMessages(makePNG(datadr::kvExample(data), panelFn = panelFn, 
    file = file.path(tempPrefix, "thumb.png"), width = width, 
    height = height, lims = lims))
```
And specifically, the following call within `makePNG()`

```
 tmp <- datadr::kvApply(dat, panelFn)$value
```
I changed my `.Renviron` file to point my temp path to the same drive/partition as where the `vdb` is located, but to no avail. Any help would be appreciated.

Session info:
```
R version 3.4.1 (2017-06-30)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 7 x64 (build 7601) Service Pack 1

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252    LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C                           LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] trelliscope_0.9.8 datadr_0.8.6     

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.12            bindr_0.1               magrittr_1.5            munsell_0.4.3           xtable_1.8-2           
 [6] colorspace_1.3-2        lattice_0.20-35         R6_2.2.2                jpeg_0.1-8              rlang_0.1.2            
[11] plyr_1.8.4              dplyr_0.7.2             tools_3.4.1             parallel_3.4.1          grid_3.4.1             
[16] data.table_1.10.4       gtable_0.2.0            png_0.1-7               htmltools_0.3.6         lazyeval_0.2.0         
[21] assertthat_0.2.0        digest_0.6.12           tibble_1.3.4            bindrcpp_0.2            shiny_1.0.5            
[26] ggplot2_2.2.1           htmlwidgets_0.9         DistributionUtils_0.5-1 base64enc_0.1-3         codetools_0.2-15       
[31] rsconnect_0.8.5         curl_2.8.1              mime_0.5                glue_1.1.1              compiler_3.4.1         
[36] scales_0.5.0            jsonlite_1.5            httpuv_1.3.5            hexbin_1.27.1           pkgconfig_2.0.1 
```

With the latest ggplot updates, the ggplot_build function returns a different list. To make "same" and "sliced" work again with ggplot, it is necessary to change the accessed elements' names.
Hi Ryan, 

I believe I'm having compatibility issues between trelliscope and foreach/dopar. 

Goal: Fit univariate regressions using each of N predictors over a number of data subsets. Make plots of the data and fits, with cognostics, using trelliscope.
  
Approach: Foreach / dopar over the list of covariate names. Specify the plotting and the cognostic functions, and call makeDisplay, within the  parallel loop.

Issue: all of the required files and folders are created within /displays/common, but displays/_displayList.Rdata is not complete: the number of rows within the displayListDF variable of _displayList.Rdata is smaller than the number of folders created within  /displays/common. Opening the viewer via view() only gives access to the displays listed in displayListDF.

The missingness in displayListDF seems to be random: rerunning the same code does not always lead to the same missing values with respect to the folders in /displays/common. There is no error when running the loop in serial. 

Any thoughts?
Thanks - 
MPTingley 
```
kv = lapply(1:10, function(i) list(k = i, v= i))
ddo0 = ddo(kv)
cogFn = function(i) list(cog1 = 1, cog2 = NA)
t = tempfile()
vdb_conn = vdbConn(t, autoYes=TRUE)
makeDisplay(ddo0, panelFn=function(v) plot(1,1), cogFn=cogFn, conn= vdb_conn, name="break things")
```

```
Error in data.frame(name = nms[i], tmp, stringsAsFactors = FALSE) : 
  arguments imply differing number of rows: 1, 0
```

If you are like me you are like what?

The bug bites here:
https://github.com/tesseradata/trelliscope/blob/1a651ad231546b592236cb7251fa31d1f7f1adc6/R/cognostics.R#L413

The issue is that when the column of cog is NA  this line is empty:
tmp <- attr(x[[i]], "cogAttrs")

when it is empty the row count is mismatched on the next line:
data.frame(name = nms[i], tmp, stringsAsFactors = FALSE)

Two ideas present themselves:
1) Catch and give a stop with a decent error message. Difficultly: easy.  
`if(all(is.na(...))) stop("At least one cognostic of _name_ must not be NA")`
2) Make it work.  Technically not broken? Maybe it is.  Difficulty: little harder.  Involves checking tmp and also making sure everything down streams of it still works with all NA.  Maybe not worth it. An NA column has no decision-able information it is just taking up space.

I think it is worth fixing because you really need to back up and think "what did I do last?" to figure this one out.  In my case I added a bunch of cognostics and one was always NA.
#1 sounds safest to me.  Just catch it and give it a decent message.  Want a pull request?

When viewing the `byCounty` summary the results are slightly different than shown in the tutorial. The actual summary is:

```
Distributed data frame backed by 'kvMemory' connection

 attribute      | value
----------------+-----------------------------------------------------------------------------------
 names          | fips(cha), time(Dat), nSold(num), medListPriceSqft(num), medSoldPriceSqft(num)
 nrow           | 224369
 size (stored)  | 16.45 MB
 size (object)  | 16.45 MB
 # subsets      | 2883

* Other attributes: getKeys()
* Missing attributes: splitSizeDistn, splitRowDistn, summary
* Conditioning variables: county, state
```

Note esp. the "missing attributes," which didn't show up before. 

When viewing the `byCounty` summary the results are slightly different than shown in the tutorial. The actual summary is:

```
Distributed data frame backed by 'kvMemory' connection

 attribute      | value
----------------+-----------------------------------------------------------------------------------
 names          | fips(cha), time(Dat), nSold(num), medListPriceSqft(num), medSoldPriceSqft(num)
 nrow           | 224369
 size (stored)  | 16.45 MB
 size (object)  | 16.45 MB
 # subsets      | 2883

* Other attributes: getKeys()
* Missing attributes: splitSizeDistn, splitRowDistn, summary
* Conditioning variables: county, state
```

Note esp. the "missing attributes," which didn't show up before. 

For instance, url link to other trelliscopes

or at least allow bold. They get harder to read once as the number of plots increases

Hi Ryan,

makeDisplay with  a Hadoop back-end starts a MapReduce job.  I have been wondering about if that is always needed and if there is anyway around that.

I concluded certainly for cogFn a MapReduce needs to be run-once, but most of the time I just want to update a panelFn.  Is there anyway to just change out the panelFn render code in an existing display or do that in such a way that another MapReduce is not needed?

Thanks,
Jeremiah

Hi, 

My hobbies include staying up late finding bugs because my other hobby is writing code that hits corner cases...  I was quite excited to see the potential of rbokeh mixed with trelliscope unfortunately nothing happened for me when I went to do it!  I eventually figured this out, but sorry no quick fix from me tonight =)  Though I think the work around is simply to always plot something.

When the _leading_ panelFn call for a ddo returns NULL and all the rest return rbokeh objects _no_ panels display.  However, if the leading panelFn returns an rbokeh object and a subsequent panelFn returns NULL _only_ the NULL panel fails to display as it should be.  There is however a squawk from trelliscope while displaying the NULL of: 
"Error in system.file(config, package = package) : 
  'package' must be of length 1"

R code to recreate this issue is this and it shows both the bad behavior and the good behavior:

``` R
data(iris)
idata = divide(iris,by="Species")
i = 1
idata = lapply(idata, function(kv){
    new.value = list()
    new.value$data = kv$value
    new.value$i = i
    i <<- i + 1
    kv$value = new.value
    return(kv)
})
idata = ddo(idata)
badPanelFn = function(v) {
    if(v$i == 1)
        return(NULL)
    p = figure() %>% ly_points(Sepal.Length, Sepal.Width, data=v$data, hover=list(Sepal.Length))
    return(p)
}
panelFn(idata[[1]]$value)
bad = vdbConn("/tmp/bad", autoYes=TRUE)
makeDisplay(idata, panelFn=badPanelFn, conn=bad, name="name")
view(conn=bad)

goodPanelFn = function(v){
    if(v$i == 2)
        return(NULL)
    p = figure() %>% ly_points(Sepal.Length, Sepal.Width, data=v$data, hover=list(Sepal.Length))
    return(p)
}

good = vdbConn("/tmp/good", autoYes=TRUE)
makeDisplay(idata, panelFn=goodPanelFn, conn=good, name="name")
view(conn=good)
```
