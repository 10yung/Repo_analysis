Replaces #604 .

I want alpine-based docker images for sops, as it's small and easy to use:

* The current image uses 2 GB+:
    ```
    $ docker images mozilla/sops
    REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
    mozilla/sops        latest              6a8e325d2d11        5 weeks ago         2.3GB
    ```
* The alpine-based image uses only 65MB:
    ```
    $ docker build -t sops -f Dockerfile.alpine .
    ...
    $ docker images sops
    REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
    sops                latest              c4f6175388ce        About a minute ago   64.4MB
    ```

And this pull request also changes `.circleci/config.yml` to deploy alpine based images as `mozilla/sops:3.5.0-alpine` and `mozilla/sops:alpine`.
I believe we don't need alpine images for every commits and only images for tags are enough useful.

I know that this won't get merged but I wanted to record the changes so if anyone comes across the bug report, they can see what changes are needed.  I'll try and keep my fork up-to-date, but no guarantees.  It works for me at least.

Note: The AWS SDK will not allow this to be done outside of sops, and because it uses https connections you can't use host file overrides or any other trick that I can think of (even `LD_PRELOAD` would not be trivial because the certificate verification is going to fail).
This change accesses the environment variable CIRCLE_TAG to address #542 

Changes:

1. Break docker push into its own job, runs only on tag creation
2. Use machine executor for docker push job (a little faster since it avoids shipping docker context around)
3. use the CIRCLE_TAG variable provided on tag builds


Options:

1. We can merge jobs back AND/OR
2. We can still publish SHA on master and just AMJOR/MINOR/PATCH, etc on tags


I ran in my own circle spae to test tagging.  I obviously dont have your docker creds, so the push fails, but the tagging works.


Run:
``` bash
#!/bin/bash -eo pipefail
docker tag mozilla/sops "mozilla/sops:$CIRCLE_SHA1"
# Update all semvers affected
echo "Tag mozilla/sops:$MAJOR"
docker tag mozilla/sops "mozilla/sops:$MAJOR"
echo "Tag mozilla/sops:$MAJOR.$MINOR"
docker tag mozilla/sops "mozilla/sops:$MAJOR.$MINOR"
echo "Tag mozilla/sops:$MAJOR.$MINOR.$PATCH"
docker tag mozilla/sops "mozilla/sops:$MAJOR.$MINOR.$PATCH"
docker images
```

Output
```
Tag mozilla/sops:0
Tag mozilla/sops:0.0
Tag mozilla/sops:0.0.5
REPOSITORY          TAG                                        IMAGE ID            CREATED                  SIZE
mozilla/sops        0                                          c533f52a658b        Less than a second ago   2.3GB
mozilla/sops        0.0                                        c533f52a658b        Less than a second ago   2.3GB
mozilla/sops        0.0.5                                      c533f52a658b        Less than a second ago   2.3GB
mozilla/sops        57f8a1fef66eb850dff6e43f06b1def877cff6af   c533f52a658b        Less than a second ago   2.3GB
mozilla/sops        latest                                     c533f52a658b        Less than a second ago   2.3GB
golang              1.12                                       8639ad3fc384        6 days ago               810MB
```
Is it possible to make sops load data key from a local file? Similar to Ansible vault architecture.

Thanks
Any thoughts on including [age](https://age-encryption.org/) as an alternative for PGP encryption?
It took me a while to figure this out, but should argument order matter here? ðŸ¤” 

```
$ sops -d secrets.yaml
envSecrets:
    deploy-key: 12345

$ sops -d secrets.yaml --extract '["envSecrets"]["deploy-key"]'
envSecrets:
    deploy-key: 12345

$ sops -d --extract '["envSecrets"]["deploy-key"]' secrets.yaml
12345
```
Sops (latest version) panics, when decrypting yaml file with explicit type specification. Same file with .yaml extension is decrypted successfully.

```
[anton@vm ]$ diff auth.yaml.enc2 auth.enc.yaml

[anton@vm ]$ sops --version
sops 3.5.0 (latest)

[anton@vm ]$ sops -d auth.enc.yaml >/dev/null ; echo $?
0

[anton@vm ]$ sops --input-type yaml auth.yaml.enc2
panic: interface conversion: interface {} is sops.TreeBranch, not string

goroutine 1 [running]:
go.mozilla.org/sops/v3/stores/json.BinaryStore.EmitPlainFile(0xc00036b100, 0x1, 0x1, 0x242, 0x1b6, 0xc000010030, 0x0, 0x0)
	/home/ajvb/gocode/src/go.mozilla.org/sops/stores/json/store.go:50 +0x156
main.editTree(0x1211f80, 0xc000370ba0, 0x1226bc0, 0x190eba8, 0x1226b00, 0x190eba8, 0xc00010e640, 0x41, 0x0, 0xc00036c120, ...)
	/home/ajvb/gocode/src/go.mozilla.org/sops/cmd/sops/edit.go:126 +0xbbe
main.edit(0x1211f80, 0xc000370ba0, 0x1226bc0, 0x190eba8, 0x1226b00, 0x190eba8, 0xc00010e640, 0x41, 0x0, 0xc00036c120, ...)
	/home/ajvb/gocode/src/go.mozilla.org/sops/cmd/sops/edit.go:105 +0x2c5
main.main.func8(0xc000128dc0, 0x0, 0x0)
	/home/ajvb/gocode/src/go.mozilla.org/sops/cmd/sops/main.go:767 +0x23c7
gopkg.in/urfave/cli%2ev1.HandleAction(0xe62ca0, 0x10603e0, 0xc000128dc0, 0x0, 0x0)
	/home/ajvb/gocode/pkg/mod/gopkg.in/urfave/cli.v1@v1.20.0/app.go:490 +0xc8
gopkg.in/urfave/cli%2ev1.(*App).Run(0xc0002db860, 0xc0000d4000, 0x4, 0x4, 0x0, 0x0)
	/home/ajvb/gocode/pkg/mod/gopkg.in/urfave/cli.v1@v1.20.0/app.go:264 +0x58c
main.main()
	/home/ajvb/gocode/src/go.mozilla.org/sops/cmd/sops/main.go:823 +0x2de4

```

```
cat auth.enc.yaml 
apiVersion: ENC[AES256_GCM,data:igo=,iv:2TZajuaEplwhxOLoc2wo/T9CbPip1cVh1J/uw5mcUR8=,tag:6Np390u1MMouj4n3TyhCww==,type:str]
data:
    auth: ENC[AES256_GCM,data:Ghp/DXmLL98ujqDJ1rJMyOlVdGL9KtUPigpfOzzpRBxBiF0lGv3aCZQOyLAfZGdi9UwZAUJomo4=,iv:OdglsUCjRmW9nZ7BK+DIj0tgipD+UwFLzeeUo6TtWqg=,tag:jpdAL3JCTPSMpZCtg8/Qww==,type:str]
kind: ENC[AES256_GCM,data:H16uOwEp,iv:WYnXYG0/AheXt7mWB33idNl1VAy7VF3pmpRPaiZd634=,tag:ThEFBFmTYZylv27QokOhKw==,type:str]
metadata:
    creationTimestamp: null
    name: ENC[AES256_GCM,data:uitF6Yx0lSs=,iv:4wZfhMtOdvET4q8hcWXpVfil2piv6UX4kK2OOlj/ekY=,tag:QHWcgibKq2sgMjPXFqV/RA==,type:str]
sops:
    kms: []
    gcp_kms:
    -   resource_id: xxx
        created_at: '2019-12-18T21:17:49Z'
        enc: CiQA8Xd3G6oq6KSE0uLyRP2trk24LeMP7GhcINOf3oYcffYGggUSTBJKCgwV1Dc3s3RQrBnikj0SKD35HZm0UxNj/ubXrA7HipNIabReUTRHFm19ghVNuEhEJzwCkVWxvSkaEP1kDwpX7TBPoejP4VW2Eso=
    azure_kv: []
    lastmodified: '2019-12-18T21:17:49Z'
    mac: ENC[AES256_GCM,data:w1BLQbnPT0tHDElqsrCMC5NICG/rbkxVGxZgDFmjgFbFkWFOg6A3UoqhXMHTiiAmyBEDXLHk4pPtzRX7O/67+GRR3DwaM5Lt8AaYB0AkT7O60TCWx23IzCu/jdnrj9K7rCrqNh+Fbdmihv6g2U6wjG0GuTx2dsDTRdxPB15juvE=,iv:ushcpUzLozcklWBQYPNtHq1ZltPzr994nch5yQ0FmMY=,tag:nF85o6scy4krdQiNIjzmGQ==,type:str]
    pgp: []
    unencrypted_suffix: _unencrypted
    version: 3.4.0
```
It would be cool to provide support for arm and arm64 binaries on the releases page.
given a project with following structure:
```
.
â”œâ”€â”€ .sops.yaml
â””â”€â”€ secrets
    â””â”€â”€ test.json
```

with  `.sops.yaml` content:
```ymal
creation_rules:
  - path_regex: secrets/.*
    gcp_kms: projects/YOUR_POJECT/locations/global/keyRings/YOUR_RING/cryptoKeys/YOUR_KEY
``` 

I am not able to encrypt data from stdin into the `secrets` directory, for example
```
cat secrets/test.json | sops --input-type json --output-type json --output secrets/test.encrypted.json -e /dev/stdin
```

gives me:
```
error loading config: no matching creation rules found
```

I am guessing that `sops` is trying to match `/dev/stdin` against the `creation_rules` from the config file (changing `path_regex: secrets/.*`  `to path_regex: .*` makes it work, but that is obviously not a solution).

Here's a sample repo which can be used to reproduce the error:
https://github.com/adrian-gierakowski/sops-encrypt-from-stdin


### Possible solutions
1. match against value of --output (converted to absolute path, or path relative to config file) if present
2. add a new flag which would take a path that could be used to match against creation rules

The latter would be more universal as it would allow use cases where --output is not specified

As a side note: I stumbled upon this issue while trying to write a script to re-encrypt all files in a directory after changing the `creation_rules`, and wanted to avoid temporarily storing unencrypted data to disk while doing it.  
Go 1.14 will support freebsd/arm64, golang.org/x/net@83d349e8ac1a and golang.org/x/sys@33540a1f6037 are earliest commits that bring in necessary arm64 bits.