If your issue is a general question, starts similar to "How do I..", or is related to 3rd party development kits/libs, please discuss this on our community forum at bbs.espressif.com instead.

## Environment

- Development Kit: - esp8266 chip
- IDF version  - 
- Development Env:      Make
- Operating System:    Ubuntu
- Power Supply:         external 3.3V

## Problem Description

I need to disable the wifi logs I am getting.

I (3323) wifi: state: 0 -> 2 (b0)
I (3334) wifi: state: 2 -> 3 (0)
I (3343) wifi: state: 3 -> 5 (10)
I (3347) wifi: pm start, type: 2


Is there any way to remove these logs
之前使用2.0.0版本，程序调好没有问题，后面升级为2.1.1，发现调用新版的smartconfig库(2.5.5)smartconfig_start()函数之后再调用vTaskDelay()函数出现时间错误，延时时间变为原来的1/2。
SDK采用2.1.1，将2.5.5版本的smartconfig库更换为2.5.4版本后没有出现错误，这里推断2.5.5的库有问题

## Environment

- Development Kit:
- IDF version (``git rev-parse --short HEAD`` to get the commit id.): 
    da769106
- Development Env: [vscode]
- Operating System: [Windows]
- Power Supply: [Battery]
## Problem Description

The drive wake up from lightsleep,even if I call esp_wifi_connect(),can't connnect wifi anymore!
I ping IP of the drive,can't find drive .

### Expected Behavior
      the device to go into lightsleep periodically,and can canconnect wifi .
### Actual Behavior
       the device can't connect wifi anymore 

### Code to reproduce this issue

```cpp

//#include "driver/rtc_io.h"
//#include "driver/uart.h"
#include "driver/gpio.h"
#include "esp_event_loop.h"
#include "esp_log.h"
#include "esp_sleep.h"
#include "esp_timer.h"
#include "esp_wifi.h"
#include "freertos/FreeRTOS.h"
#include "freertos/event_groups.h"
#include "freertos/task.h"
#include "nvs_flash.h"
#include "rom/ets_sys.h"
#include <string.h>
// #include <stdio.h>
// #include <stdlib.h>
// #include <string.h>
// #include <sys/time.h>
// #include <time.h>
/*set the ssid and password via "idf.py menuconfig"*/
#define EXAMPLE_ESP_WIFI_SSID "***********"
#define EXAMPLE_ESP_WIFI_PASS "************"
/* FreeRTOS event group to signal when we are connected*/
static EventGroupHandle_t wifi_event_group;
static const char *TAG = "sleep_wifi";
/* Most development boards have "boot" button attached to GPIO0.
 * You can also change this to another pin.
 */
#define BUTTON_GPIO_NUM_DEFAULT 5

/* "Boot" button on GPIO0 is active low */
#define BUTTON_WAKEUP_LEVEL_DEFAULT 0
//extern uint32_t esp_sleep_get_wakeup_cause(void);
static esp_err_t event_handler(void *ctx, system_event_t *event)
{
    /* For accessing reason codes in case of disconnection */
    system_event_info_t *info = &event->event_info;

    switch (event->event_id)
    {
    case SYSTEM_EVENT_STA_START:
        esp_wifi_connect();
        break;
    case SYSTEM_EVENT_STA_GOT_IP:
        ESP_LOGI(TAG, "got ip:%s",
                 ip4addr_ntoa(&event->event_info.got_ip.ip_info.ip));
        break;
    case SYSTEM_EVENT_AP_STACONNECTED:
        ESP_LOGI(TAG, "station:" MACSTR " join, AID=%d",
                 MAC2STR(event->event_info.sta_connected.mac),
                 event->event_info.sta_connected.aid);
        break;
    case SYSTEM_EVENT_AP_STADISCONNECTED:
        ESP_LOGI(TAG, "station:" MACSTR "leave, AID=%d",
                 MAC2STR(event->event_info.sta_disconnected.mac),
                 event->event_info.sta_disconnected.aid);
        break;
    case SYSTEM_EVENT_STA_DISCONNECTED:
        ESP_LOGE(TAG, "Disconnect reason : %d", info->disconnected.reason);
        if (info->disconnected.reason == WIFI_REASON_BASIC_RATE_NOT_SUPPORT)
        {
            /*Switch to 802.11 bgn mode */
            esp_wifi_set_protocol(ESP_IF_WIFI_STA, WIFI_PROTOCAL_11B | WIFI_PROTOCAL_11G | WIFI_PROTOCAL_11N);
        }
        esp_wifi_connect();
        break;
    default:
        break;
    }
    return ESP_OK;
}
void app_main(void)
{
    int sleep_time = 0;
    wifi_event_group = xEventGroupCreate();

    tcpip_adapter_init();
    ESP_ERROR_CHECK(esp_event_loop_init(event_handler, NULL));

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));
    wifi_config_t wifi_config = {
        .sta = {
            .ssid = EXAMPLE_ESP_WIFI_SSID,
            .password = EXAMPLE_ESP_WIFI_PASS},
    };

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config));
    ESP_ERROR_CHECK(esp_wifi_start());
    /* Configure the button GPIO as input, enable wakeup */
    const int button_gpio_num = BUTTON_GPIO_NUM_DEFAULT;
    const int wakeup_level = BUTTON_WAKEUP_LEVEL_DEFAULT;
    gpio_config_t config = {
        .pin_bit_mask = (1ULL << button_gpio_num),
        .mode = GPIO_MODE_INPUT};
    ESP_ERROR_CHECK(gpio_config(&config));
    gpio_wakeup_enable(button_gpio_num,
                       wakeup_level == 0 ? GPIO_INTR_LOW_LEVEL : GPIO_INTR_HIGH_LEVEL);
    config.pin_bit_mask = (1ULL << 0);
    config.mode = GPIO_MODE_OUTPUT;
    ESP_ERROR_CHECK(gpio_config(&config));
    gpio_set_level((1ULL << 0), 0);
    vTaskDelay(pdMS_TO_TICKS(5000));
    while (true)
    {
        /* Wake up in 2 seconds, or when button is pressed */
        //esp_wifi_fpm_do_sleep(10000000);
        //esp_wifi_fpm_set_sleep_type(WIFI_LIGHT_SLEEP_T);
        esp_sleep_enable_timer_wakeup(1*1000000);
        esp_sleep_disable_wakeup_source(ESP_SLEEP_WAKEUP_GPIO);
        //esp_sleep_enable_gpio_wakeup();

        /* Wait until GPIO goes high */
        if (gpio_get_level(button_gpio_num) == wakeup_level)
        {
            printf("Waiting for GPIO%d to go high...\n", button_gpio_num);
            do
            {
                vTaskDelay(pdMS_TO_TICKS(10));
            } while (gpio_get_level(button_gpio_num) == wakeup_level);
        }

        printf("Entering light sleep\r\n");
        /* To make sure the complete line is printed before entering sleep mode,
         * need to wait until UART TX FIFO is empty:
         */

        //uart_wait_tx_idle_polling(CONFIG_ESP_CONSOLE_UART_NUM);

        /* Get timestamp before entering sleep */
        
        int64_t t_before_us = esp_timer_get_time();

        /* Enter sleep mode */
        //printf("will esp_light_sleep_start\r\n");
        fflush(stdout);
        sleep_time++;
        printf("will SLEEP=%d\r\n", sleep_time);
        esp_light_sleep_start();
        printf("wake up=%d\r\n", sleep_time);
        esp_wifi_set_mode(WIFI_MODE_STA); //	set	station	mode
        esp_wifi_connect();               //	connect	to	AP
        //printf("t_before_us=%lld ms\r\n", t_before_us);
        /* Execution continues here after wakeup */
        vTaskDelay(pdMS_TO_TICKS(10000));
        /* Get timestamp after waking up from sleep */
        int64_t t_after_us = esp_timer_get_time();

        /* Determine wake up reason */
        const char *wakeup_reason;
        wakeup_reason = "timer";
        // switch (esp_sleep_get_wakeup_cause())
        // {
        // case ESP_SLEEP_WAKEUP_TIMER:
        //     wakeup_reason = "timer";
        //     break;
        // case ESP_SLEEP_WAKEUP_GPIO:
        //     wakeup_reason = "pin";
        //     break;
        // default:
        //     wakeup_reason = "other";
        //     break;
        // }

        // printf("Returned from light sleep, reason: %s, t=%lld ms, slept for %lld ms\r\n",
        //        wakeup_reason, t_after_us / 1000, (t_after_us - t_before_us) / 1000);
    }
}
## Debug Logs

```
```

thank your for help



1.esp8266 mqtt工程 间隔10s左右上报一条消息，工作一晚后第二天WiFi连接不上了，一直在连接断开。剩余堆内存10k不到点，我又给它换了个ssid，一会儿后堆内存耗尽了，WiFi没有日志打出来了，只剩下堆内存打印日志。具体请看日志。
2.以前用esp8266_rtos_sdk 3.2 运行也出现过类似问题，目前刚刚移植到3.3
3.工程用esp-mqtt/tcp为demo修改，接收串口命令上报mqtt server。
4.运行着HEAP_TRACE_LEAKS检测，10s间隔打印1次残留内存

wifi无法连接时打印情况：
I (55823913) wifi: state: 0 -> 2 (b0)
D (55824913) esp_alink_data_transport: total free heap size: 9808
I (55824915) wifi: state: 2 -> 0 (200)
E (55824916) MQTT_EXAMPLE: Disconnect reason : 2
D (55824921) esp_alink_data_transport: post_handle free heap size: 1024B
D (55824933) esp_alink_data_transport: read_handle free heap size: 852B

堆内存中出现许多未释放的：
I (56323340) heap_trace: mem @0x3fffd7d0 size 92 caller file esf_buf.c line 433
I (56323352) heap_trace: mem @0x3fffd82c size 84 caller file esf_buf.c line 400
I (56323364) heap_trace: mem @0x3fffd880 size 44 caller file esf_buf.c line 417

出现问题后配置新的ssid，内存逐渐消耗完：
        Line 2474: D (55932103) esp_alink_data_transport: total free heap size: 9748
	Line 2505: D (55933124) esp_alink_data_transport: total free heap size: 8728
	Line 2510: D (55935076) esp_alink_data_transport: total free heap size: 8728
	Line 2516: D (55936097) esp_alink_data_transport: total free heap size: 8728
	Line 2521: D (55937118) esp_alink_data_transport: total free heap size: 8224
	Line 2527: D (55938138) esp_alink_data_transport: total free heap size: 8224
	Line 2532: D (55939151) esp_alink_data_transport: total free heap size: 7224
	Line 2538: D (55940172) esp_alink_data_transport: total free heap size: 6976
	Line 2543: D (55941184) esp_alink_data_transport: total free heap size: 6480
	Line 2550: D (55942205) esp_alink_data_transport: total free heap size: 6232
	Line 2790: D (55946071) esp_alink_data_transport: total free heap size: 6168
	Line 2795: D (55947091) esp_alink_data_transport: total free heap size: 5668
	Line 2801: D (55948119) esp_alink_data_transport: total free heap size: 4924
	Line 2805: D (55949151) esp_alink_data_transport: total free heap size: 3188
	Line 2809: D (55950162) esp_alink_data_transport: total free heap size: 2940
	Line 2814: D (55951172) esp_alink_data_transport: total free heap size: 2940
	Line 2822: D (55952197) esp_alink_data_transport: total free heap size: 1948
	Line 2828: D (55953218) esp_alink_data_transport: total free heap size: 1948
	Line 2833: D (55954239) esp_alink_data_transport: total free heap size: 1452
	Line 2839: D (55955260) esp_alink_data_transport: total free heap size: 1204
	Line 3172: D (55960263) esp_alink_data_transport: total free heap size: 460

配置wifi  ssid 相关代码：
        ESP_LOGD(TAG, "get Bluefi confirm ");
        ESP_ERROR_CHECK( esp_wifi_get_config(ESP_IF_WIFI_STA, &wifi_config) );
        rw_len = sizeof(wifi_config.sta.ssid);
        ESP_ERROR_CHECK(get_nvs_str("ssid", (char*)(wifi_config.sta.ssid), &rw_len));
        rw_len = sizeof(wifi_config.sta.password);
        ESP_ERROR_CHECK(get_nvs_str("passwd", (char*)(wifi_config.sta.password), &rw_len));
        ESP_ERROR_CHECK( esp_wifi_disconnect() );
        ESP_ERROR_CHECK( esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config) );
        ESP_ERROR_CHECK( esp_wifi_connect() );

[Serial-COM10 serial-com10 2020 01 16 09-35-47.log](https://github.com/espressif/ESP8266_RTOS_SDK/files/4068980/Serial-COM10.serial-com10.2020.01.16.09-35-47.log)







Using the latest version of the SDK, I wanted to ask why Secure Boot and other Security Options are missing when the target platform is selected as ESP8266? Is there a way to manually perform these operations? Or do I have to enable something in `make menuconfig` to be able to see these options?
In case CMAKE_C_COMPILER and CMAKE_CXX_COMPILER variables are set,
we should not override them by default but rather check if they
point to a valid compiler. In case they do, leave them be.

Is is the use case of CLion IDE, when user defines a toolchain,
selects it in build configuration, that in turn generates
CMAKE_C_COMPILER and CMAKE_CXX_COMPILER variables basing on that,
but IDF scripts are overriding it by a hardcoded value.
Hi! 
In SDK v3.2 (and 3.3 I think) we can't use flash space after 0x200000 (~2Mb) for program. The bootloader at boot loader_utility.c:858 throws error in case if you image is stored after 0x200000. However I found that we can use 2nd parameter of Cache_Read_Enable to access space after 0x200000, I've adde following code:

```
...

#define ESP_CACHE3_ADDR_MAX 0x300000

...

 else if ( image_data->start_addr >= ESP_CACHE2_ADDR_MAX // Map 2m-3m space
               && image_data->start_addr + image_data->image_len < ESP_CACHE3_ADDR_MAX ) {
        map = 0;
        bank = 1;
        bank = 0;
    } 

... 

Cache_Read_Enable(map, bank, SOC_CACHE_SIZE);  
```

I need to use more flash for my OTA update scenario. Modified code seems to be working good. Does this modification makes sense? May I have some issue with it? Why it was not designed in this way from the very begging? Do you want me to create a pool request?


## Environment

- Development Kit:
- IDF version (``git rev-parse --short HEAD`` to get the commit id.): 
          IDF version: v3.2-344-g08d469ab
- Development Env:      [VSC]
- Operating System:     [Windows| WSL Ubuntu|]
- Power Supply:         [|external 3.3V]

## Problem Description

Exception when using   onewire_search_next() because of the gpio_pulldown_dis() function.
The onewire_search_next() function calls first the gpio_set_pull_mode() to set pull-up for the onewire-pin, which then calls first the gpio_pullup() and then gpio_pulldown() for the pin.

### Expected Behavior
  gpio_set_pull_mode( pin= 13, GPIO_PULLUP_ONLY);  should just run without error

### Actual Behavior

gpio_set_pull_mode( pin= 13, GPIO_PULLUP_ONLY);
returns error 
 E (439) gpio: gpio_pulldown_dis(125): The GPIO of esp8266 can not be pulled down except RTC GPIO.


### Steps to repropduce

just call the function:
  gpio_set_pull_mode( 13, GPIO_PULLUP_ONLY);

### Code to reproduce this issue

 gpio_set_pull_mode( 13, GPIO_PULLUP_ONLY);


## Debug Logs

## Other items if possible

relevant code snippet from SDK:

esp_err_t gpio_set_pull_mode(gpio_num_t gpio_num, gpio_pull_mode_t pull)
{
    ......

    switch (pull) {
        case GPIO_PULLUP_ONLY:
            **gpio_pulldown_dis(gpio_num);**
            gpio_pullup_en(gpio_num);
            break;
            

esp_err_t gpio_pulldown_dis(gpio_num_t gpio_num)
{
    GPIO_CHECK(GPIO_IS_VALID_GPIO(gpio_num), "GPIO number error", ESP_ERR_INVALID_ARG);
    GPIO_CHECK(**RTC_GPIO_IS_VALID_GPIO(gpio_num)**, "The GPIO of esp8266 can not be pulled down except RTC GPIO.", ESP_ERR_INVALID_ARG);


hi, in **SDKrelease/3.2**, i find a bug about title.

I dont init uart0, but I send a data to uart0,  and then, when I init uart1, it can't work until wdt.

and I find 
```c
esp_err_t uart_isr_register(uart_port_t uart_num, void (*fn)(void *), void *arg)
{
    UART_CHECK((uart_num < UART_NUM_MAX), "uart_num error", ESP_ERR_INVALID_ARG);

    UART_ENTER_CRITICAL();
    _xt_isr_mask(1 << ETS_UART_INUM);
    _xt_isr_attach(ETS_UART_INUM, uart_intr_service, NULL); //all uart interrupt will be able here
    uart_isr_func[uart_num].fn = fn;
    uart_isr_func[uart_num].args = arg;
    _xt_isr_unmask(1 << ETS_UART_INUM);
    UART_EXIT_CRITICAL();
    return ESP_OK;
}
```
so,I dont init uart0, but I send a data to uart0, The uart0 status is set to 1 until I'm done with the data,and trigger the interrupt all the time
我在使用阿里云提供的mqtt接入demo时，使用了FreeRTOS 的tcp接口.现在我想把代码移植到8266上面,应该如何添加components