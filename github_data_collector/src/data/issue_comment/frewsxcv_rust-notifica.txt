hi,
i have windows 10 pro 64bit v19303 (build 18362.418)
it's my program : [do0ir-cli](https://github.com/geeksesi/do0ir-cli)
in windows just 1 time i get the notification. another try to send notify did not show 
after restart windows all of the failed notify are here : 
![image](https://user-images.githubusercontent.com/28778964/69497052-ff362d00-0eed-11ea-9d47-64d6b6f9cca3.png)

what happend to this ?
is it windows problem ?

also i tested [aa](https://github.com/frewsxcv/alert-after) sleep 3 but i can't watch any notify... ( after restart all of did not show notify are here... why ? )

Hi there,
I'm curious why you opted to use both `mac-notification-sys` and `notify-rust` as the later one encapsulates `mac-notification-sys` completely. If you found any issues regarding usability or API I'd be curious to know.
MacOS panics with the error below when trying to send multiple notifications.
```
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: ErrorMessage { msg: AlreadySet }
```


Example
```rust
fn main() {
    let app = "testapp";
    notifica::notify(app, "test1"); // succeeds
    notifica::notify(app, "test2"); // errors 
}
```

The underlying notification library used for MacOS tracks if the application name has been set, and will error (https://github.com/h4llow3En/mac-notification-sys/blob/master/src/lib.rs#L146) when trying to set the application name again. `::notify()` should handle this error gracefully.

PR (https://github.com/frewsxcv/rust-notifica/pull/10) is refactoring calls to `unwrap()` and return the library errors for `notifica`,  although this issue would still be present (it wouldn't panic, but the early return would not trigger additional notifications). If https://github.com/frewsxcv/rust-notifica/pull/10 is the direction for error handling, I can catch the `ApplicationError::AlreadySet` locally and continue execution, otherwise return all other errors to the caller. 

Nonetheless I can fix this, just need to know what branch to branch from.
The winrt doc for uninit states

> Unitializes the Windows Runtime. This must not be called as long as any Windows Runtime object is still alive.

(https://docs.rs/winrt/*/x86_64-pc-windows-msvc/winrt/struct.RuntimeContext.html#method.uninit)

From my understanding, this might cause issues, if multiple threads try to send notifications. Once the first thread is finished, `uninit` is called, while other threads might still require the runtime. I cannot test if there are any actual implications.
(From my comment on reddit and as a reminder for myself)
You might want to change the notify method to return a `Result<(), SomeErrorType>` and don't call `unwrap()` in your code. It is considered bad practice for a library to panic.
Could a list of supported operation systems and notification backends be specified in the README?
That would clarify support questions some might be having, like: what backends are supported on Linux (it seems to be using `dbus`), and is FreeBSD supported?
Browsers have a [Web Notification API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API) available from JavaScript, that would be great if this crate could use it when compiled to webassembly.
I'm not sure what a cross platform API could look like for this.

 it could be an enum rather than arbitrary images...