<!-- Please search existing issues to avoid creating duplicates. -->
<!-- FYI issues: https://github.com/formulahendry/vscode-code-runner/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afyi -->

- VS Code Version:
- OS Version:
- Code Runner Version:0.9.15

**Describe the bug**
code runner output is different from terminal output

**To Reproduce**
Steps to reproduce the behavior:
First, in terminal: g++ hm5.8.cpp -o hm5.8 -Wall && "/Users/huangrt01/Desktop/OSTEP/ostep-code/cpu-api/"hm5.8
Second, use the code runner to run the same program.
 
**Actual behavior**
the terminal outputs 5 lines(expected), but code runner outputs 6 lines.

**Expected behavior**
the output of code runner should have 5 lines.

**Screenshots**

![截屏2020-01-1116 09 48](https://user-images.githubusercontent.com/14976749/72201231-cdbcf500-348c-11ea-9e1c-e79f98954ec5.jpg)

![截屏2020-01-1116 09 12](https://user-images.githubusercontent.com/14976749/72201222-bbdb5200-348c-11ea-9b1c-5705686c0e82.jpg)


code:
`#include <cstdlib>
//#include<cstdio>
#include <unistd.h>
#include <cstring>
#include <fcntl.h>
#include <cassert>
#include <sys/wait.h>
#include <iostream>
#include <fstream>
using namespace std;
int main(int argc,char*argv[]){
    int fd[2];
    if(pipe(fd)<0){
        cerr<<"pipe failed\n";
        exit(1);
    }
    char *p;
    p = (char *)malloc(12 * (sizeof(char *)));

    int rc1=fork();
    if(rc1<0)
    {
        // fork failed; exit
        cerr << "fork failed\n";
        exit(1);
    }
    else if(rc1==0){
        printf("hello, I am child (pid:%d)\n", (int)getpid());
        close(fd[0]);
        write(fd[1], "hello world\n", 12);
        return 0; //否则会继续fork一个进程
    }
    else if(rc1>0){
        printf("hello, I am parent of %d  (pid:%d)\n",
               rc1, (int)getpid());
    }
    wait(NULL);
    int rc2 = fork();
    if (rc2 < 0)
    {
        // fork failed; exit
        cerr << "fork failed\n";
        exit(1);
    }
    else if (rc2 == 0)
    {
        close(fd[1]);
        read(fd[0],p,12);
        printf("%s",p);
        printf("hello, I am child (pid:%d)\n", (int)getpid());
        return 0;
    }
    else if (rc2 > 0)
    {
        printf("hello, I am parent of %d  (pid:%d)\n",
               rc2, (int)getpid());
    }
    return 0;
}`





<!-- Please search existing issues to avoid creating duplicates. -->
<!-- FYI issues: https://github.com/formulahendry/vscode-code-runner/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afyi -->

- VS Code Version:
- OS Version: Windows 

- Code Runner Version: 0.9.15
**Describe the bug**
Description of what the bug is.
The shortcut ctrl + alt + m to stop the code doesn't work. I tried running infinite loop and see if I can the stop the code but it doesn't stop. I am forced to closed the entire thing and re open it again. 
**To Reproduce**
Steps to reproduce the behavior:

1. Run infinite loop
2. Try the shortcut to see it if you can stop the code

**Actual behavior**
The shortcut doesn't work and gives me an error.


**Expected behavior**
I expected the code to stop running with the shortcut.


**Screenshots**
If applicable, add screenshots to help explain your problem.
![Screenshot (1)](https://user-images.githubusercontent.com/56459089/71933803-9a1a5c00-3168-11ea-8022-9c7034fd945a.png)



v.0.9.15 

While not a bug, it seems that the default key binding for the runCustomCommand is Ctrl + Alt + K this conflicts with the default VS Code command bookmarks.toggle. Personally, I don't think any extension should select key bindings the conflict with the editor's default bindings.
Error occurs upon `import numpy as np`; command works fine when typed directly in terminal, but fails when ran via Code Runner. My steps to reproduce below.

Output of `import sys; print(sys.version)` is `3.7.5 (default, Oct 31 2019, 15:18:51) [MSC v.1916 64 bit (AMD64)]`. VSCode shows it's running the expected Python interpreter: `Python 3.7.5 64-bit ('vsc': conda)` at bottom-left pane (see clip). -- Brief [video demo](https://www.dropbox.com/s/cu4vzyp8ybdq6qo/np_demo.mp4?dl=0). 

<hr>

**Note**: both per related [Git](https://github.com/numpy/numpy/issues/15183)  and [SO](https://stackoverflow.com/questions/59519338/dll-load-failed-the-specific-module-could-not-be-found-vscode-numpy), Code Runner was named as a culprit - hence my post here.


<hr>

**Env info**: Windows 10 x64, Anaconda 10/19 (virtual env), VSCode 1.41.1

<hr>

**Steps to reproduce:**

```
conda create --name vsc
conda activate vsc
conda install python==3.7.5
conda install numpy
# in VSCode: import numpy as np, etc
```

<hr>

**Full traceback**:

```python
Traceback (most recent call last):
  File "D:\Anaconda\envs\vsc\lib\site-packages\numpy\core\__init__.py", line 17, in <module>
    from . import multiarray
  File "D:\Anaconda\envs\vsc\lib\site-packages\numpy\core\multiarray.py", line 14, in <module>
    from . import overrides
  File "D:\Anaconda\envs\vsc\lib\site-packages\numpy\core\overrides.py", line 7, in <module>
    from numpy.core._multiarray_umath import (
ImportError: DLL load failed: The specified module could not be found.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Desktop\School\Python\vscode\HelloWorld\app.py", line 1, in <module>
    import numpy as np
  File "D:\Anaconda\envs\vsc\lib\site-packages\numpy\__init__.py", line 142, in <module>
    from . import core
  File "D:\Anaconda\envs\vsc\lib\site-packages\numpy\core\__init__.py", line 47, in <module>
    raise ImportError(msg)
ImportError: 
```
<hr>

**All enabled extensions**, sorted alphabetically:

  - Anaconda Extension Pack (1.0.1)
  - AREPL for python (1.0.20)
  - Blade Runner - Run task When Open (1.0.0)
  - Bootstrap 4, Font awesome 4, Font Awesome 5 Free & Pro snippets for Visual studio code (6.1.0)
  - Bracket Light Pro (0.4.3)
  - C/C++ (0.26.3-insiders2)
  - C++ Algorithm Mnemonics (1.0.3)
  - Code Runner (0.9.15)
  - Django (0.19.0)
  - Font Switcher (3.1.0)
  - Glasslt-VSC (0.1.6)
  - HTML CSS Support (0.2.3)
  - kite (0.102.0)
  - MagicPython (1.1.0)
  - One Dark Pro (3.2.1)
  - Python (2019.11.50794)
  - Python Extension Pack (1.6.0)
  - Theme by language (1.1.1)
  - Visual Studio IntelliCode (1.2.2)
  - YAML (0.6.1)

<hr>

**settings.json**:

```json
{
    "terminal.integrated.shell.windows": "C:\\Windows\\System32\\cmd.exe",
    "glassit.alpha": 250,
    "editor.autoClosingBrackets": "never",
    "editor.autoClosingQuotes": "never",
    "editor.multiCursorModifier": "alt",
    "workbench.colorTheme": "One Dark Pro",
    "font-switcher.enableLivePreview": true,
    "theme-by-language.themes": {
        "c": "One Dark Pro",
        "*": "One Dark Pro",
        "python": "One Dark Pro"
    },
    "editor.suggestSelection": "first",
    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
    "python.jediEnabled": false,
    "window.zoomLevel": 0,
    "editor.minimap.enabled": false,
    "python.formatting.provider": "autopep8",
    "[python]": {
        "editor.defaultFormatter": "ms-python.python"
    },
    "C_Cpp.updateChannel": "Insiders",
    "kite.showWelcomeNotificationOnStartup": false,
    
    "code-runner.executorMap": {
        "python":"$pythonPath $fullFileName",
      },
    "code-runner.showExecutionMessage": false,
    "code-runner.saveFileBeforeRun": true,

    "terminal.integrated.shellArgs.windows": ["/K", "D:\\Anaconda\\Scripts\\activate.bat D:\\Anaconda"],
    "python.condaPath": "D:\\Anaconda\\Scripts\\conda.exe"
}
```

<!-- Please search existing issues to avoid creating duplicates. -->
<!-- FYI issues: https://github.com/formulahendry/vscode-code-runner/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afyi -->

- VS Code Version: any version
- OS Version: win7
- Code Runner Version: 0.9.15

**Describe the bug**
Description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:

1. select python version under vscode status bar.(on left corner)
2. run code runner,


**Actual behavior**
Description of what happened actually.
it couldn't swap to current python version to run the code correctly.it seems that the python version doesn't support change with line "code-runner.executorMap".
**Expected behavior**
Description of what you expected to happen.
code runner support run code with choosed python version.
**Screenshots**
If applicable, add screenshots to help explain your problem.

Hi,
Excuse me for asking this question here, instead of stack overflow. Since, English is not my first language, i can't draft a good question as per stack overflow's standards. After all, i cannot add any code, because this is not related to any programming language question. 
I am using Nim programming language. I have 10 files in my project and i want only one file to run all the time. Rest of the 9 files are include files. Now, VS Code is running the active file. So each time, when i want to run, i need to activate the main file.Say, i have a file named "test.nim" and i want to run that file always. How can i do it ?
<!-- Please search existing issues to avoid creating duplicates. -->
<!-- FYI issues: https://github.com/formulahendry/vscode-code-runner/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afyi -->

- VS Code Version:1.41.1
- OS Version:linux x64 5.0.0-13-generic
- Code Runner Version:0.9.15

**Describe the bug**
it shows SyntaxError: invalid syntax when i click Run Code but not when debugging
or other ways to run code
**To Reproduce**
Steps to reproduce the behavior:
1. python3  print(k, end=" "),when i click Run Code,it will show  
print(k, end=' ')
                ^
SyntaxError: invalid syntax
2. but it go succsessfully when i debug or run the code without using Code Runner,
and it also succeed in pycharm.

**Actual behavior**
SyntaxError: invalid syntax

**Expected behavior**
run successfully
**Screenshots**
If applicable, add screenshots to help explain your problem.

当我使用setting.json配置了terminal
`"terminal.integrated.shell.windows": "C:\\WINDOWS\\System32\\cmd.exe",`
和
`"code-runner.fileDirectoryAsCwd": true,`
它就会使用如下命令跳转目录
`cd xxx/xxx`
然而cmd.exe的命令"cd"，缺少参数"/d"，将无法进入到相应目录。
**它似乎是和`"code-runner.cwd"`配合使用的，不知道这是一个bug还是原意如此？**
目前我是在`"code-runner.executorMap"`里面自行配置相应语言的配置，在开头加入`cd /d $dir`
——————————————————————————————
When I configured the terminal using setting.json
`" terminal.integrated.shell.windows ":" C: \\ WINDOWS \\ System32 \\ cmd.exe ",`
with
`"code-runner.fileDirectoryAsCwd": true,`
it will use the following command to jump to the directory
`cd xxx / xxx`
However, the cmd.exe command "cd", without the parameter "/ d", will not be able to enter the corresponding directory.
**It seems to be used in conjunction with `" code-runner.cwd "`. I don't know if this is a bug or the original intention?**
At present, I configure the configuration of the corresponding language in `"code-runner.executorMap"`, and add `cd / d $ dir`at the beginning.
<!-- Please search existing issues to avoid creating duplicates. -->
<!-- FYI issues: https://github.com/formulahendry/vscode-code-runner/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afyi -->

- VS Code Version: 1.41.0
- OS Version: Windows 10 LTSB 2016
- Code Runner Version: v0.9.15

**Describe the bug**
For feature "Run Selected Text" this command lines:
```
"code-runner.saveFileBeforeRun": true,
"code-runner.saveAllFilesBeforeRun": true,
```
doesn't work.

**Actual behavior**
 Not saving the file!
<!-- Please search existing issues to avoid creating duplicates. -->
<!-- FYI issues: https://github.com/formulahendry/vscode-code-runner/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Afyi -->

**Is your feature request related to a problem? Please describe.**

My feature request is specific to the needs of people learning the Ada programming language for the first time (And yes, this is a group of programmers that exists still!). There is currently a drought of software able to properly support Ada. Among the software that *can* do so, are outdated, buggy implementations of IDEs (GNAT/GPS), or methods that take too much hassle to work (Eclipse). Visual Studio Code is the closest to a seamless experience for the language I've experienced, only to find that some programming-related setup was required (A turn-off for many users!).
I was successfully able to compile and run the closed source gnatmake in your extension by loading it in the package.json file and setting the string for .adb files to: ```"cd $dir && gnatmake $fileName && $dir$fileNameWithoutExt"```.
However, this isn't sufficient, as the output terminal is frozen as read-only, and terminal input is required for some applications.

**Describe the solution you'd like**

As the title suggests, I'd like to see full Ada support in this compiler/runner, since there's no real cross-platform means of compiling and running Ada code. If nothing else, a way that someone can point me to set up compiling and running Ada code the way I (and others) use the language. I've searched in the forums, and I saw nothing in regards to the Ada language. Therefore I feel this request is appropriate.

Thanks!
