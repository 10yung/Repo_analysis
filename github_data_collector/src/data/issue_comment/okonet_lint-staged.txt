Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/okonet/lint-staged/network/alerts).

</details>
The README.md contains a lot of advanced config examples for functional tasks. We should probably add some basic ones as well:

1. `'*.js': ['eslint']` <- fail when eslint finds issues issues
1. `'*.js': ['eslint --fix', 'git add']` <- automatically fix eslint issues, and add to commit
1. `'*.js': ['prettier --list-different']` <- fail when prettier finds issues
1. `'*.js': ['prettier --write', 'git add']` <- automatically fix style issues using prettier, and add to commit

Fixes https://github.com/okonet/lint-staged/issues/755
### Description

I'm trying to change the behaviour of one of our postinstall scripts when the commit is done through a merge rather than a typical standalone commit. This doesn't seem possible at the moment, because lint-staged (10.0.0-beta.8) removes the MERGE_HEAD file and doesn't seem to restore it.

### Steps to reproduce

```
git merge
(abort during the commit)
git merge --continue
```

### Environment

- **`lint-staged`:** 10.0.0-beta.8

I've been testing `beta-6` and noticed that if there is a watcher process that modifies files is being used, lint-staged will fail ungracefully:

```
 M src/components/primitives/Text/Text.js
MM src/exercises/3-Primitives/Text.js
 M src/exercises/3-Primitives/final/Text.js
MM src/exercises/3-Primitives/templates/Text.js

component-driven-development on î‚  rerere2 [â‡¡$!+] is ðŸ“¦ v0.1.0 via â¬¢ v10.15.3 
âžœ gc  
husky > pre-commit (node v10.15.3)
  âœ” Preparing...
  âœ” Running tasks...
  âœ– Applying modifications...
    â†’ Unstaged changes could not be restored due to a merge conflict!
    Cleaning up...
Unstaged changes could not be restored due to a merge conflict!
husky > pre-commit hook failed (add --no-verify to bypass)

component-driven-development on î‚  rerere2 [â‡¡=$+] is ðŸ“¦ v0.1.0 via â¬¢ v10.15.3 took 2s 
âžœ g st
## rerere2...origin/rerere2 [ahead 2]
M  src/components/primitives/Text/Text.js
M  src/exercises/3-Primitives/Text.js
UU src/exercises/3-Primitives/final/Text.js
M  src/exercises/3-Primitives/templates/Text.js
```

Notice how after the fail my index looks very differently having staged files that weren't staged before the commit attempt. Ultimately, the new index is exactly the changes I didn't want to commit in the first attempt. 

Also the error message isn't helpful in resolving the situation. 

Steps to repro:

1. Checkout https://github.com/component-driven/component-driven-development
1. Run `npm run generate:watch`
1. Edit `src/exercises/3-Primitives/templates/Text.js` and see how `src/exercises/3-Primitives/final/Text.js` and being updated.
1. Add those changes to the index by `git add .`
1. Try to commit

I realize this is might look like a rare scenario at first, but I believe most of issues with lint-staged staging algorithm came from webpack (or other tools) users running it in watch mode in parallel.
### Description

<!--
If this is a feature request, explain why it should be added. Specific
use-cases are best.

If this is a bug, please check that it can be reproduced in the latest version
of `lint-staged`. Furthermore, please provide as much *relevant* info as
possible. Including what is the expected and actual behavior.
-->
 Tslint detection fails by throwing error log, when I commit code, The error log is messy and unrecognizable
### Steps to reproduce
git commit
<!-- Tell us how to reproduce this issue. -->

### Debug Logs

<!--
Run `lint-staged` in debug mode using the command line flag `--debug`. You can
either modify your pre-commit script/command to include the flag or invoke
`lint-staged` manually(`./node_modules/.bin/lint-staged --debug`). Read more
about debug mode here -
https://github.com/okonet/lint-staged#command-line-flags.

NOTE: This requires `lint-staged` version >= `6.0.0`.
-->
<details>

<summary>expand to view</summary>

```
COPY THE DEBUG LOGS HERE
husky > pre-commit (node v10.13.0)
Stashing changes... [started]
Stashing changes... [skipped]
â†’ No partially staged files found...
Running tasks... [started]
Running tasks for *.ts [started]
Running tasks for {*.json,.{babelrc,eslintrc,prettierrc,stylelintrc}} [started]
Running tasks for *.{css,less} [started]
Running tasks for *.{yml,md} [started]
Running tasks for {*.json,.{babelrc,eslintrc,prettierrc,stylelintrc}} [skipped]
â†’ No staged files match {*.json,.{babelrc,eslintrc,prettierrc,stylelintrc}}
Running tasks for *.{css,less} [skipped]
â†’ No staged files match *.{css,less}
Running tasks for *.{yml,md} [skipped]
â†’ No staged files match *.{yml,md}
tslint [started]
tslint [failed]
â†’ 
Running tasks for *.ts [failed]
â†’
Running tasks... [failed]



Ã— tslint found some errors. Please fix them and try committing again.

'tslint' ï¿½ï¿½ï¿½ï¿½ï¿½Ú²ï¿½ï¿½ï¿½ï¿½â²¿ï¿½ï¿½ï¿½î£¬Ò²ï¿½ï¿½ï¿½Ç¿ï¿½ï¿½ï¿½ï¿½ÐµÄ³ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½
husky > pre-commit hook failed (add --no-verify to bypass)
```

</details>

### Environment

<!-- Tell us about your development environment -->
- **OS:** <!-- ex: Windows 10, Ubuntu 16.04, macOS High Sierra -->
- **Node.js:** <!-- ex: v8.9.1 --> 10.13.0
- **`lint-staged`:** <!-- ex: v6.0.0 --> 9.50
package.json
`  "lint-staged": {
    "*.ts": ["tslint", "prettier --single-quote --write", "git add"],
    "{*.json,.{babelrc,eslintrc,prettierrc,stylelintrc}}": [
      "prettier --parser json --write",
      "git add"
    ],
    "*.{css,less}": [
      "stylelint --syntax less --fix",
      "prettier --single-quote --write",
      "git add"
    ],
    "*.{yml,md}": ["prettier --single-quote --write", "git add"]
  },`

This PR adds a `--bail` option that makes lint-staged exit with status 1 when tasks modify any files. In this case, the modifications are ~staged~ left as unstaged, and instead of restoring the original state lint-staged simply leaves modifications as-is, and also keeps the original backup stash instead of dropping it.

This is useful in situation where manual review of tasks' modifications is needed. The backup stash can be used to easily return to the original state before committing.

Fixes https://github.com/okonet/lint-staged/issues/730
### Description

We're trying to use 10.0.0-beta.3 in our project. This version have some fixes which I was looking for Tha's why we are using this version.

 But we have concern about the further stable releases. 
1. Could you please let us know what is the release cycle?
2. After further stable release, will this version be unavailable from npm repository?
3. When is the nearest stable release coming? 


Thanks

After advanced options got deprecated, how to properly implement `"concurrent": false` in 9.x version?

This closes #503 (replaces)

Since GitHub Actions is now out of beta, I've redone my branch, squashed my commits, and this is ready for further discussion. I figured a pull request would be appropriate so that changes can be reviewed.

For the moment windows builds are not passing. With node 8.x this appears to be a dependency version issue (although it is odd that this does not affect macos or ubuntu using node 8.x). With newer versions of node (10.x and 12.x) there seem to be other issues that may need actual fixes to the code.

CodeCov is setup in `.github/workflows/nodejs.yml` however to run correctly it will need `CODECOV_TOKEN` per the documentation https://github.com/marketplace/actions/codecov

`.github/workflows/npmpublish.yml` is setup to only run when a release is tagged in GitHub. The idea is tagging a release in GitHub would trigger this workflow to publish the package to npm. I do not know the specifics of `yarn` and the `semantic-release` package being used, but I imagine this may need to be changed to something else.
In some cases, which I haven't figured out yet, when running hooks, it creates a .rej file.
And I'm sure it's something with the library because before implementing it, never created these files.

package:
```
"husky": {
        "hooks": {
            "pre-commit": "ng lint --fix && lint-staged"
        }
    }
```

my config
```
{
    "**/*.{ts,js,json,css,scss}": [
        "./node_modules/.bin/prettier '**/*.{ts,js,json,css,scss}' '.prettierignore*/{__name__,__directory__}/**' --write",
        "git add"
    ]
}
```