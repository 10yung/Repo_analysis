I am using FusionAuth as my OICD provider.  I have 3 Angular Apps along with  3 separate APIs (call them Tools, Accounts, and CRM).

All 3 angular apps need to actually query all 3 APIs.  If I visit the Tools Angular app, use OICD against FusionAuth to get my JWT, the JWT that comes back is for Tools only.  It has the Tools app ID, it has the "roles" in relation to the Tools app.  When angular hits the Tools API, the API sees the proper Tools roles from the JWT, all good.  But when the Angular app hits the Accounts API the JWT that is passed in of course is the Tools JWT with the Tools roles.

There are ways to handle this on the backend (API code).  For example the Accounts API would recognize the Tools app just tried to hit it therefore go back to FusionAuth to get the roles related to the Accounts app NOT the Tools apps.  In other words ignore the roles found in the JWT and query FusionAuth for the right roles.  But there are other issues with this, like logging to 3rd party APIs that are out of my control.  Those 3rd party APIs would be passed a JWT with roles for the Tools app, not their app.

How do people handle this?  Accessing multiple APIs from a single Angular app seems very common.  What if angular-oauth2-oidc could handle this.  When the Tools angular app is first loaded couldn't it login to all 3 FusionAuth apps via OICD and store each access token separately in session storage.  Then Angular would simply inject the proper token stored in session storage based on the endpoint it was calling.  Now each of the 3 tokens in session storage are for the right endpoint with the right roles for that endpoint.

Am I way off here?  I must be missing something.
I'm not sure if this is a bug or a wrong configuration in AuthConfig.
I have an Angular application that authenticate towards **Windows ADFS 2016** using Open Id Connect. The application retrieves access token and id token via **implicit flow** and it works fine. Problem comes when I try to refresh the token using **silentRefresh()** as described in the documentation: https://manfredsteyer.github.io/angular-oauth2-oidc/docs/additional-documentation/refreshing-a-token.html 

This is the configuration:

```typescript
const authConfig: AuthConfig = {
issuer: <address to adfs>,
redirectUri: window.location.origin+'/index.html',
silentRefreshRedirectUri: window.location.origin + '/silent-refresh.html',
clientId: '<client-id>',
scope: 'openid email profile',
logoutUrl: window.location.origin+'/logout',
tokenEndpoint: '<adfs address>/adfs/oauth2/token',
loginUrl: '<adfs address>/adfs/oauth2/authorize',
strictDiscoveryDocumentValidation: false,
skipIssuerCheck: true,
oidc: true
};
```

OAuthService configuration

```typescript
  private configureOauth(){
  this.oauthService.configure(authConfig);
  this.oauthService.tokenValidationHandler = new JwksValidationHandler();
  this.oauthService.setStorage(sessionStorage);
  this.oauthService.setupAutomaticSilentRefresh({});
  this.oauthService.tryLogin({onTokenReceived: context => {
    // tslint:disable-next-line:no-console
    console.debug('logged in');
    // tslint:disable-next-line:no-console
    console.info( this.oauthService.getAccessToken() );
    // tslint:disable-next-line:no-console
    console.info( this.oauthService.getIdToken() );
  }});
}
```
Then to refresh the token I call
```typescript
public triggerSilentRefresh(){
   this
      .oauthService
      .silentRefresh()
      .then(info => console.debug('refresh ok', info))
      .catch(err => console.error('refresh error', err));
}
```
But I get the following error:
```javascript
core.js:6014 ERROR Error: Uncaught (in promise): TypeError: Cannot read property 'responseType' of null
 TypeError: Cannot read property 'responseType' of null
  at OAuthService.<anonymous> (angular-oauth2-oidc.js:1826)
  at Generator.next (<anonymou
```

This is thrown by createLoginUrl because AuthConfig is null. 
Snippet from chrome debugger
```javascript
createLoginUrl(state = '', loginHint = '', customRedirectUri = '', noPrompt = false, params = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        /** @type {?} */
        const that = this;
        /** @type {?} */
        let redirectUri;
        if (customRedirectUri) {
            redirectUri = customRedirectUri;
        }
        else {
            redirectUri = this.redirectUri;
        }
        /** @type {?} */
        const nonce = yield this.createAndSaveNonce();
        if (state) {
            state = nonce + this.config.nonceStateSeparator + state;
        }
        else {
            state = nonce;
        }
        if (!this.requestAccessToken && !this.oidc) {
            throw new Error('Either requestAccessToken or oidc or both must be true');
        }
        if (this.config.responseType) { //HERE config is null
            this.responseType = this.config.responseType;
....
```

I do not understand how can be null if it has been initialized and I successfully retrieved my access token. Is it something I'm doing wrong or I have missed in the configuration?

OS: Windows 10
Browser: Chrome/Firefox
"version": "8.0.4"

Hi, I have trouble with login by `initImplicitFlow()` call


**config:**

```typescript
export const authConfig: AuthConfig = {
  issuer: 'https://localhost:44303',
  redirectUri: 'http://localhost:4200/private',
  responseType: 'id_token token',
  clientId: 'client_id_js',
  scope: 'ApiOne',
  silentRefreshRedirectUri: 'http://localhost:4200/silent-refresh.html',
  postLogoutRedirectUri: "http://localhost:4200/login",
}
```

**app.component.ts:**

```typescript
constructor(private oauthService: OAuthService) {
    this.oauthService.configure(authConfig);
    this.oauthService.tokenValidationHandler = new JwksValidationHandler();
    this.oauthService.loadDiscoveryDocumentAndTryLogin();
}
```

Also `OAuthModule` connected in app.module.ts.

**login.component.ts:**

```typescript
// initImplicitFlow call:
onSubmit(): void {
    this.oauthService.initImplicitFlow();
  }
```

**VS logs**:

```
[18:39:32 Debug] IdentityServer4.Hosting.CorsPolicyProvider
CORS request made for path: /.well-known/openid-configuration from origin: http://localhost:4200
[18:39:32 Debug] IdentityServer4.EntityFramework.Services.CorsPolicyService
Origin http://localhost:4200 is allowed: True
[18:39:32 Debug] IdentityServer4.Hosting.CorsPolicyProvider
CorsPolicyService allowed origin: http://localhost:4200
[18:39:32 Debug] IdentityServer4.Hosting.EndpointRouter
Request path /.well-known/openid-configuration matched to endpoint type Discovery
[18:39:32 Debug] IdentityServer4.Hosting.EndpointRouter
Endpoint enabled: Discovery, successfully created handler: IdentityServer4.Endpoints.DiscoveryEndpoint
[18:39:32 Information] IdentityServer4.Hosting.IdentityServerMiddleware
Invoking IdentityServer endpoint: IdentityServer4.Endpoints.DiscoveryEndpoint for /.well-known/openid-configuration
[18:39:32 Debug] IdentityServer4.Endpoints.DiscoveryEndpoint
Start discovery request
[18:39:32 Debug] IdentityServer4.EntityFramework.Stores.ResourceStore
Found ["openid", "ApiOne"] as all scopes in database
[18:39:37 Debug] IdentityServer4.AccessTokenValidation.IdentityServerAuthenticationHandler
AuthenticationScheme: Bearer was not authenticated.
[18:39:37 Debug] IdentityServer4.Hosting.CorsPolicyProvider
CORS request made for path: /account/login from origin: http://localhost:4200 but was ignored because path was not for an allowed IdentityServer CORS endpoint
[18:39:37 Information] Identity_auth.Controllers.AccountController
User with email: evgenij.merchansky@gmail.com try to login.
[18:39:37 Debug] IdentityServer4.Hosting.IdentityServerAuthenticationService
Augmenting SignInContext
[18:39:37 Debug] IdentityServer4.Hosting.IdentityServerAuthenticationService
Adding idp claim with value: local
[18:39:37 Debug] IdentityServer4.Hosting.IdentityServerAuthenticationService
Adding auth_time claim with value: 1579106377
[18:39:37 Information] Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler
AuthenticationScheme: Identity.Application signed in.
[18:39:37 Debug] IdentityServer4.Hosting.EndpointRouter
Request path /connect/authorize matched to endpoint type Authorize
[18:39:37 Debug] IdentityServer4.Hosting.EndpointRouter
Endpoint enabled: Authorize, successfully created handler: IdentityServer4.Endpoints.AuthorizeEndpoint
[18:39:37 Information] IdentityServer4.Hosting.IdentityServerMiddleware
Invoking IdentityServer endpoint: IdentityServer4.Endpoints.AuthorizeEndpoint for /connect/authorize
[18:39:37 Debug] IdentityServer4.Endpoints.AuthorizeEndpoint
Start authorize request
[18:39:37 Debug] IdentityServer4.Endpoints.AuthorizeEndpoint
No user present in authorize request
[18:39:37 Debug] IdentityServer4.Validation.AuthorizeRequestValidator
Start authorize request protocol validation
[18:39:39 Information] IdentityServer4.EntityFramework.TokenCleanupService
Removing 0 grants
[18:39:39 Information] IdentityServer4.EntityFramework.TokenCleanupService
Removing 0 device flow codes
[18:39:47 Debug] IdentityServer4.EntityFramework.Stores.ClientStore
client_id_js found in database: True
[18:39:47 Debug] IdentityServer4.Stores.ValidatingClientStore
client configuration validation for client client_id_js succeeded.
[18:39:47 Debug] IdentityServer4.EntityFramework.Stores.ResourceStore
Found ["openid"] identity scopes in database
[18:39:47 Debug] IdentityServer4.EntityFramework.Stores.ResourceStore
Found ["ApiOne"] API scopes in database
[18:39:47 Debug] IdentityServer4.EntityFramework.Stores.ResourceStore
Found ["openid"] identity scopes in database
[18:39:47 Debug] IdentityServer4.EntityFramework.Stores.ResourceStore
Found ["ApiOne"] API scopes in database
[18:39:47 Debug] IdentityServer4.Validation.AuthorizeRequestValidator
Calling into custom validator: IdentityServer4.Validation.DefaultCustomAuthorizeRequestValidator
[18:39:47 Debug] IdentityServer4.Endpoints.AuthorizeEndpoint
ValidatedAuthorizeRequest
{"ClientId": "client_id_js", "ClientName": null, "RedirectUri": "http://localhost:4200/private", "AllowedRedirectUris": ["http://localhost:4200", "http://localhost:4200/private", "http://localhost:4200/login", "http://localhost:4200/silent-refresh.html"], "SubjectId": "anonymous", "ResponseType": "id_token token", "ResponseMode": "fragment", "GrantType": "implicit", "RequestedScopes": "openid ApiOne", "State": "ILV9RG2iM0u416xqojQ7rn06NLFk8LumkeJohqZtizjhd", "UiLocales": null, "Nonce": "ILV9RG2iM0u416xqojQ7rn06NLFk8LumkeJohqZtizjhd", "AuthenticationContextReferenceClasses": null, "DisplayMode": null, "PromptMode": null, "MaxAge": null, "LoginHint": null, "SessionId": null, "Raw": {"response_type": "id_token token", "client_id": "client_id_js", "state": "ILV9RG2iM0u416xqojQ7rn06NLFk8LumkeJohqZtizjhd", "redirect_uri": "http://localhost:4200/private", "scope": "openid ApiOne", "nonce": "ILV9RG2iM0u416xqojQ7rn06NLFk8LumkeJohqZtizjhd"}, "$type": "AuthorizeRequestValidationLog"}
[18:39:47 Information] IdentityServer4.ResponseHandling.AuthorizeInteractionResponseGenerator
**Showing login: User is not authenticated**`
```

Please, can help me? 
**Describe the bug**
Protractor hangs for 20 seconds when using `oauthService.silentRefresh()` because delay is run inside angular zone.
It should run outside angular zone.
 Here is the culprit: https://github.com/manfredsteyer/angular-oauth2-oidc/blob/01b4f20fe72a246f13e239b05126f9bee9c0982f/projects/lib/src/oauth-service.ts#L902

### Problem description
Every now and then we get 401 errors in our backend when using this library. We handle the errors correctly and redirect the user to login page. That said, the request doesn't make sense in the first place as the token must be expired or not present. 
I think this can happen when the cookie to identity server expires. The silent refresh then doesn't work and then we send expired token (or no token at all, haven't verified, but doesn't matter). 

### Proposed solution
Don't send the request to backend when the token is not present. 
Ideally, this should come with some way on reacting to this (i.e. redirect to login), but I'm not sure how this should look like. It could be just an error throw inside the interceptor with some specific type (so I can create my own interceptor that would catch it and trigger the redirect). Or provide a way to inject a function to be executed when this happens (in the module config).

I can look into creating a PR for this if the general idea sounds good. 

### Workaround for now
I'm considering to support this now on my own, by providing custom session storage.

**Describe the bug**
We want to use this lib in angular7 better in APP_INITIALIZER process, is there any guide or sample for this, many thanks.

Our idea is when in app initializing process 
1. call tryLogin 
2. see if there hasValidAccessToken, 
2.1 no valid token -- call the initImplicitFlow   
3. call tryLogin  again

**Stackblitz example**
Provide a minimal [stackblitz](https://stackblitz.com/) based example that shows the issue. For this, you can use the example application of this repo and the identity providers used here.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.


**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/manfredsteyer/angular-oauth2-oidc/network/alerts).

</details>
**Describe the bug**

Hi,

I'm implementing code flow on angular and is trying to get the check session to work.
I have set **sessionChecksEnabled** to true and I get a warning message in the console saying **sessionChecksEnabled is activated but there is no session_state**.

I've scanned through **initCodeFlow** function and found out that storeSessionState were never called, does that mean session check is only for implicit flow?
**This is not a bug or an issue on this client side library itself**, but will still have high impact for many people using the silent token refresh.

Please read this: 
https://www.thinktecture.com/identity/samesite/prepare-your-identityserver/

Chrome will soon (February 2020) change its default behavior of handling cookies. In the future it will require the SameSite flag to be set explicitly to None and the Secure flag to be set too, to allow the cookie to be added to certain cross-site requests. If you do that, common versions of Safari will barf about that.

To make sure all browsers are happy, you set all of the affected cookies to Secure and SameSite=None, and then you add a cookie policy (code shown above) that can override these settings and remove the SameSite flag again for browsers that don't interpret the None value correctly.

There will be two options:

1. Authentication server vendor will fix this.
2. Or the projects have to fix this - depending on the used solution.

**This issue serves as an announcement for the period around the changes in Chrome**, so we can direct any possible duplicate issues here.
When useHttpBasicAuth is set to true, refreshToken() doesn't consider this flag and it always appends client-id and client-secret to params instead of headers in BasicAuth.

Thanks