It's been reported that every time an `Http` is constructed, we get 2*$numCpus threads created by AHC because we create an AHC client on each invocation. Some things to look at:

* One option that's been suggested is to share an AHC client instance under the hood, which is thread-safe "with qualification" - specifically so long as you don't do anything not-thread-safe in your callbacks. The with qualification bit is what scares me about that.
* Perhaps a more targeted approach is to expose or better document a knob for the number of threads that we should allocate when we build the client.
(It's not strictly a bug, more of an API issue :-) )

Let's take the example code from the homepage and modify it slightly to get a 404 response from housetop.info.

``` scala
import dispatch._, Defaults._
val svc = url("http://api.hostip.info/country.php-NOT-FOUND")
val country = Http(svc OK as.String)
country.recover { case e => println(e.getClass.getCanonicalName) } 
```

The last line will eventually print `java.util.concurrent.ExecutionException`. To get to the actual error (`StatusCode`) I first need to unwrap it.
It would seem intuitive that for a common use case like a non-OK status code returned from the HTTP server the future would fail with `StatusCode` straight away, which is not the case.

I'm using dispatch 0.11.2.
