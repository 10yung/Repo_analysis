Host is MacOS 10.14.6.

I've tried TinyCoreLinux and Ubuntu (16.04.6-server-amd64).  Guest unable to get DHCP response.  Tried manually configuring network with IP in 192.168.64.x subnet (i.e., 192.168.64.5) but unable to ping host and host also unable to ping guest.

Tried both virtio-net and e1000.

Using brew xhyve (HEAD-1f46a3d).

Here's ifconfig with Linux guest booted:
```
lo0: flags=8049<UP,LOOPBACK,RUNNING,MULTICAST> mtu 16384
	options=1203<RXCSUM,TXCSUM,TXSTATUS,SW_TIMESTAMP>
	inet 127.0.0.1 netmask 0xff000000 
	inet6 ::1 prefixlen 128 
	inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1 
	nd6 options=201<PERFORMNUD,DAD>
gif0: flags=8010<POINTOPOINT,MULTICAST> mtu 1280
stf0: flags=0<> mtu 1280
XHC0: flags=0<> mtu 0
XHC20: flags=0<> mtu 0
en0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
	ether 8c:85:90:41:b9:de 
	inet 192.168.1.44 netmask 0xffffff00 broadcast 192.168.1.255
	media: autoselect
	status: active
p2p0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 2304
	ether 0e:85:90:41:b9:de 
	media: autoselect
	status: inactive
awdl0: flags=8943<UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST> mtu 1484
	ether ce:28:12:46:df:6a 
	inet6 fe80::cc28:12ff:fe46:df6a%awdl0 prefixlen 64 scopeid 0x8 
	nd6 options=201<PERFORMNUD,DAD>
	media: autoselect
	status: active
en2: flags=8963<UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST> mtu 1500
	options=60<TSO4,TSO6>
	ether 1a:00:00:d1:86:01 
	media: autoselect <full-duplex>
	status: inactive
en1: flags=8963<UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST> mtu 1500
	options=60<TSO4,TSO6>
	ether 1a:00:00:d1:86:00 
	media: autoselect <full-duplex>
	status: inactive
bridge0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
	options=63<RXCSUM,TXCSUM,TSO4,TSO6>
	ether 1a:00:00:d1:86:00 
	Configuration:
		id 0:0:0:0:0:0 priority 0 hellotime 0 fwddelay 0
		maxage 0 holdcnt 0 proto stp maxaddr 100 timeout 1200
		root id 0:0:0:0:0:0 priority 0 ifcost 0 port 0
		ipfilter disabled flags 0x2
	member: en1 flags=3<LEARNING,DISCOVER>
	        ifmaxaddr 0 port 10 priority 0 path cost 0
	member: en2 flags=3<LEARNING,DISCOVER>
	        ifmaxaddr 0 port 9 priority 0 path cost 0
	media: <unknown type>
	status: inactive
utun0: flags=8051<UP,POINTOPOINT,RUNNING,MULTICAST> mtu 2000
	inet6 fe80::fb0f:de05:5f1b:1b16%utun0 prefixlen 64 scopeid 0xc 
	nd6 options=201<PERFORMNUD,DAD>
en10: flags=8963<UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST> mtu 1500
	ether 62:01:2e:77:e7:61 
	media: autoselect
	status: active
bridge100: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
	options=3<RXCSUM,TXCSUM>
	ether 8e:85:90:14:45:64 
	inet 192.168.64.1 netmask 0xffffff00 broadcast 192.168.64.255
	Configuration:
		id 0:0:0:0:0:0 priority 0 hellotime 0 fwddelay 0
		maxage 0 holdcnt 0 proto stp maxaddr 100 timeout 1200
		root id 0:0:0:0:0:0 priority 0 ifcost 0 port 0
		ipfilter disabled flags 0x2
	member: en10 flags=3<LEARNING,DISCOVER>
	        ifmaxaddr 0 port 13 priority 0 path cost 0
	nd6 options=201<PERFORMNUD,DAD>
	media: autoselect
	status: active
```
FreeBSD bhyve commit: https://svnweb.freebsd.org/base?view=revision&revision=311702
From that commit message:
> This prevented the device from attaching with a Windows guest (most other guests use the device type for matching).

The corrected ID also matches the [PCI ID Repository](https://pci-ids.ucw.cz/read/PC/1af4).

I haven't tested Windows, but Linux and OpenBSD guests do load the driver correctly, albeit with the PCI device identified incorrectly as the memory ballooning device.  I'm using `-s 5,virtio-rnd` for these VMs.

Before - Linux **lspci:**
```
00:05.0 Network and computing encryption device: Red Hat, Inc. Virtio memory balloon
```
Before - OpenBSD **dmesg** and **pcidump:**
```
virtio1 at pci0 dev 5 function 0 "Qumranet Virtio Memory Balloon" rev 0x00
viornd0 at virtio1
# pcidump
 0:5:0: Qumranet Virtio Memory Balloon
```

With the fix, everything is correctly identified and virtio-rnd still works (at least my Linux VM gets new random data each time I run `dd if=/dev/hwrng count=1 | hexdump -C`).

After:
```
# Linux lspci
00:05.0 Network and computing encryption device: Red Hat, Inc. Virtio RNG
# OpenBSD dmesg
virtio1 at pci0 dev 5 function 0 "Qumranet Virtio RNG" rev 0x00
viornd0 at virtio1
# OpenBSD pcidump
 0:5:0: Qumranet Virtio RNG
```
Fixes errors from `-Werror,-Wextra-semi-stmt` in clang 9
OpenBSD since 6.1 reads this register and attempts to disable the debug interface if enabled.  Ref: https://github.com/openbsd/src/commit/61bf105

Returning 0 will satifsy OpenBSD guests that this feature is disabled and allow running xhyve without `-w`.

This might also need to be upstreamed to bhyve, as I found a similar report for it (and workaround with `-w`): https://marc.info/?t=149136054700003&r=1&w=2  
A reply to that thread indicated the hardenedbsd fork fixed it via returning a "locked and disabled" value in that MSR, but that doesn't seem to have made it into FreeBSD bhyve.  Also, in my testing simply returning 0 (disabled) is sufficient.

This only affects certain host CPUs (those with the SDBG CPU ID bit, which bhyve/xhyve pass through), but they're apparently common among recent-ish Macs.  An alternative solution would be to mask off that CPU ID bit, but this seemed like a simpler solution.
In inline assembly of xhyve/src/mevent_test.c:68, an unused inline
assembly `__asm__ __volatile__ ("cpuid")` is written here. `cpuid` is an
instruction which overrides register eax, ebx, ecx and edx by the
information of cpu, (details can be found in x86_64 specification).
This inline assembly is not only unuseful, under some context, it may
corrupt the normal C data flow, and cause errors in C world. For example:
```
static __inline uint64_t rdtsc(void)
{
	unsigned a, d;
	__asm__ __volatile__ ("cpuid");
	__asm__ __volatile__ ("rdtsc" : "=a" (a), "=d" (d));

	return (((uint64_t) a) | (((uint64_t) d) << 32));
}

int __attribute__((noinline)) set_val(int v) { return v; }

int main() {
  int a = set_val(0);
  int b = set_val(1);
  int c = set_val(2);
  a = a + b; b = b + c; c = c + a;
  uint64_t d = rdtsc();
  printf("%d, %d, %d, %lx\n", a, b, c, d);
  return 0;
}
```
The above code on my pc (gcc-8 -O2) will output 1, 2, 3, 7bcbf4733e902,
(assume rdtsc now is 7bcbf4733e902), but the actual output should be 1, 3,
3, 7bcbf4733e902, the reason is that cpuid override some registers
unexpectedly.
How to reproduce:
1) Build xhyve from git (I built from 1f46a3d0bbeb6c90883f302425844fcc3800a776)
2) Grab OpenBSD miniroot66.fs and bhyve UEFI from FreeBSD
3) Use [this script to boot xhyve](https://gist.github.com/mikroskeem/3b5b929a2788b4a4781befaa6632eb51)
4) Connect to VNC
5) See that VNC is dark and won't display anything
6) See xhyve spit out output to stdout:
```
probing: pc0 com0 com1 mem[640K 1513M 16M 4M 64K]
disk: hd0 hd1*
>> OpenBSD/amd64 BOOTX64 3.46
boot>
cannot open hd0a:/etc/random.seed: No such file or directory
booting hd0a:/bsd: 3732171+1537024+3885432+0+598016=0x94f360
entry point at 0x1001000
rdmsr to register 0xc80 on vcpu 0
                                 XHYVE: vlapic callout at 0x2522.0x4652049175f684e9, expected at 0x2522.#4670e59cbdadf577
```
7) xhyve exits

Am I doing something wrong?
This fixes a crash on windows and its based on the same upstream fix.

Windows uses at least 67 and qemu alsosupports 128 hence why we need to raise this.

```
Assertion failed: (v.vm_pkt_size >= vms->max_packet_size), function vmn_read, file src/pci_virtio_net_vmnet.c, line 337.
 ./xhyverun-windows.sh: line 19:  2066 Abort trap: 6   
```

Fix on bhyve:
https://reviews.freebsd.org/D10581
Signed-off-by: mike-pt <mike-pt@users.noreply.github.com>
### Scenario

I'm trying to follow the directions to create an xhyve VM running Windows 10. I've gone through the preparation steps, but when I run the build script, I get an error about the `e1000` device being unknown.

### Error Message

```
pci slot 5:0: unknown device "e1000"
```

### My Xhyve Folder

```
~/xhyve> ls -lGa
total 51887528
drwxr-xr-x   6 trevor  staff          192 Sep 23 13:33 .
drwxr-xr-x+ 60 trevor  staff         1920 Sep 23 13:29 ..
-rwxr-xr-x   1 trevor  staff      2097152 Sep 23 12:53 BHYVE_UEFI.fd
-rwx------   1 trevor  staff   5075539968 Dec 23  2018 Win10_1809Oct_English_x64.iso
-rw-------   1 trevor  staff  21474836480 Sep 23 13:32 Windows.dmg
-rwxr-xr-x   1 trevor  staff          377 Sep 23 13:50 build.sh
```

#### build.sh
```
#!/bin/sh

BOOTVOLUME="Win10_1809Oct_English_x64.iso"
IMG="Windows.dmg"
FIRMWARE="BHYVE_UEFI.fd"

PATH="build/Release:build:$PATH"

xhyve \
    -w \
    -m 4G \
    -c 2 \
    -s 0:0,hostbridge \
    -s 3,ahci-cd,$BOOTVOLUME \
    -s 4,ahci-hd,$IMG \
    -s 5,e1000 \
    -s 29,fbuf,tcp=127.0.0.1:29000,w=1024,h=768,wait \
    -s 31,lpc -l com1,stdio \
    -l bootrom,$FIRMWARE
```

### Xhyve Version
```
~/xhyve> xhyve -v
xhyve: 0.2.0

xhyve is a port of FreeBSD's bhyve hypervisor to OS X that
works entirely in userspace and has no other dependencies.

Homepage: https://github.com/mist64/xhyve
License: BSD
```

### MacOS Version

```
~/xhyve> uname -mprsv
Darwin 18.7.0 Darwin Kernel Version 18.7.0: Tue Aug 20 16:57:14 PDT 2019; root:xnu-4903.271.2~2/RELEASE_X86_64 x86_64 i386
```
Hi,
Just found windows 10 has a [new Hypervisor API](https://docs.microsoft.com/en-us/virtualization/api/hypervisor-platform/hypervisor-platform) just like macOS does. So I'm wondering is it possible to make a xbyve version of it? 
```

xhyve \
    -w \
    -m 4G \
    -c 2 \
    -s 0:0,hostbridge \
    -s 3,ahci-cd,$BOOTVOLUME \
    -s 4,ahci-hd,$IMG \
    -s 5,virtio-net \
    -s 29,fbuf,tcp=127.0.0.1:29000,w=1024,h=768,wait \
    -s 31,lpc -l com1,stdio \
    -l bootrom,$FIRMWARE
```

Using this which is prety much like the sample except I'm not using e1000 (which fails)

According to this and xhyve guide that last line should work, the file is places in the same dir