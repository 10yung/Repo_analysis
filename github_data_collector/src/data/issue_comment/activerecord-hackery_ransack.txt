It seems that the Rails 5.0 and 5.1 specific code removal has been shipped with 2.3.1. Is this correct? If so, was this intentional or a mistake?

Ideally - even if Rails 5.0 and 5.1 are EOL - such removal would have been released as a 3.0 instead.

**Disclaimer**: I read this from the [changelog](https://github.com/activerecord-hackery/ransack/blob/master/CHANGELOG.md#231---2020-01-11) and did not tested this with code. Maybe I am wrong here, but the changelog tells it that way

Previously Polyamorous was a [separate gem](https://github.com/activerecord-hackery/polyamorous). It has been moved into the Ransack repo, which is a great step forward. 

However, it is still a gem **_inside_** the Ransack repo. What needs to be done is to convert this code purely into a module. A later refactoring can more closely merge the code, but for now the work needed is:

- Remove the Polyamorous gem-specific code
   - https://github.com/activerecord-hackery/ransack/blob/master/polyamorous/polyamorous.gemspec
  - https://github.com/activerecord-hackery/ransack/blob/master/polyamorous/lib/polyamorous/version.rb
- Add any dependencies needed into the Ransack gemspec
- Move everything under the main `/lib/polyamorous` folder
- Remove the Polyamorous dependency from Ransack
  - https://github.com/activerecord-hackery/ransack/blob/master/ransack.gemspec#L20
- Add the [Polyamorous tests](https://github.com/activerecord-hackery/polyamorous/tree/master/spec) into the Ransack repo and get them to pass
A job has been posted on Upwork to fix the 2 urgent Ransack issues.

https://www.upwork.com/ab/applicants/1215911323418488832/job-details
Update Travis configuration with support under `sqlite3`, `postgres` and `mysql` for :

- 6-0-stable
- 5-2-stable
- 6-0-2
- 6-0-1
- 6-0-0
- 5-2-4
- 5-2-3

Remove [allowed to fail for 6-0-0 stable](https://github.com/activerecord-hackery/ransack/blob/master/.travis.yml#L27-L30) from CI configuration.

Having the following models

```ruby
class Post
  ...
  def self.my_scope(args)
    where(foo: args)
  end
end

class User
  ...
  has_many :posts  
end
```

It is possible to use ransack with `my_scope` directly on the `Post` model:
```ruby
Post.ransack(my_scope: 'foo').result
#=> works
```

But it doesn't work if I try to use the same scope from the `User` model:
```ruby
User.ransack(posts_my_scope: 'foo')
#=> ArgumentError: Invalid search term posts_my_scope
```

Are scopes limited only to be usable with the same model? Or am I missing something?
This is an attempt at redoing the functionality added in [this PR](https://github.com/activerecord-hackery/ransack/pull/766), but adding tests, to the feature will be accepted.

I would love some help understanding where the best place to add tests for this would be. Thanks 👍 
CI is broken against 6-0-stable since https://github.com/rails/rails/commit/dd46d18e2108f2e953e9811c6eabf5b18fe77ab1.

Needs to be investigated and fixed.
Hi, there:

I have a three tables named: audit_logs, users, admin_users, whose corresponding ActiveRecord classes are: AuditLog, User, AdminUser.

Table users's id is **integer** type, and table admin_users's id is **string** type, AND **BOTH** admin_users and users has **username** field

The table audit_logs has :user_id(string) and :user_type two columns, and AuditLog has a belongs_to relationship: `belongs_to :user, polymorphic: true`  

AND when I use ransack to search: `AuditLog.ransack("user_of_User_type_username_eq => 'test')`

I got the following error:  `ActiveRecord::StatementInvalid: PG::UndefinedFunction: ERROR:  operator does not exist: integer = character varying`,  it **occurred** when ```LEFT OUTER JOIN "users" ON "users"."id" = "audit_log.id"```.

I don't know if it is a correct behavior to raise error OR it is more reasonable to do a type cast in background in this case.

Thank you!
Fixes https://github.com/activerecord-hackery/ransack/issues/1039, inspired on @PhilCoggins's investigation in https://github.com/activerecord-hackery/ransack/issues/1039#issue-463944173, but being initially more aggressive.