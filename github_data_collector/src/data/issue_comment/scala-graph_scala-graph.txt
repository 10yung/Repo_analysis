There is one obstacle for me in this otherwise fantastic library. The type system is misconfigured, which forces me to use hacks such as `.asInstanceOf` to integrate it with my application.

`Graph[A, _]` should be a subtype of `Graph[B, _]` if `A` is a subtype of `B`. 
This is the same principle that applies to other collections, such as lists.

To illustrate: A graph of `dog`-nodes is a particular graph of `animal`-nodes. It satisfies the requirement that each node is an `animal`. Hence it should be possible to provide/assign a graph of `dogs` where a graph of `animal` nodes is requested. Just like how a list of dogs is also a list of animals.

The problem is the type definition of the main trait `Graph`.

```scala
trait Graph[N, E[+X] <: EdgeLikeIn[X]] extends ...
```

The parameter `N` is defined as invariant, but it should be covariant, like so:

```scala
trait Graph[+N, E[+X] <: EdgeLikeIn[X]] extends ...
```
(Note the `+` before `N`)


The following code fails to compile:

```scala
object Bug extends App {
  trait Animal
  trait Dog extends Animal

  val dogGraph = Graph[Dog, EdgeLike]()
  val animalGraph: Graph[Animal, EdgeLike] = dogGraph // fails to compile
}
```

Error:
```
type arguments [....Dog,scalax.collection.GraphEdge.EdgeLike] do not conform to method apply's type parameter bounds [N,E[+X] <: scalax.collection.GraphPredef.EdgeLikeIn[X]]
```


The procedure syntax was deprecated in scala/scala#3076

The new scalac options trigger now warnings when using the procedure syntax.

All changes, aside sbt files, were made by scalafix and scalafmt.

This is an updated supset of #132. 
Hi there!
Firstly, thanks for this awesome lib!

By reading the doc (and trying some lines of code) I couldn't find any clues about a way to find all cycles in a graph. Something like [this function](https://networkx.github.io/documentation/stable/reference/algorithms/generated/networkx.algorithms.cycles.simple_cycles.html#networkx.algorithms.cycles.simple_cycles) from the python library `networkX`.

By any chance, do you have any idea about how this can be done? 

Thanks for your help !
It looks like the NetBeans repository no longer services requests. Building from master I get connection reset by that repository, resulting in a broken build.

It seems like there is some discussion out there that the [NetBeans repository seems decomissioned](https://stackoverflow.com/questions/36396687/cant-access-netbeans-nexus-maven-repository-connection-reset).

I'll open a PR that introduces another repo that mirrors the required NetBeans platform dependencies
From the [documentation](http://www.scala-graph.org/guides/core-traversing.html) it seems that one can generate all valid topological orders by altering the order of nodes in the layers:

> Among others, layers are usefull to compute several valid topological orders by altering the order of nodes within layers.

However, the documentation does not explain this any further.
So for a given graph, e.g. the graph below:

![afbeelding](https://user-images.githubusercontent.com/17384006/56427353-d399f700-62bb-11e9-9fd0-a692adc595a3.png)

i would like to generate all valid topological orders, which are:

- 2 4 7 5
- 2 7 4 5
- 2 4 5 7

At the moment I'm only able to generate one:

```
import scalax.collection.Graph
import scalax.collection.GraphPredef._
import scalax.collection.GraphEdge._

val graph: Graph[Int, DiEdge] = Graph(2 ~> 4, 2 ~> 7, 4 ~> 5)
graph.topologicalSort match {
      case Right(topOrder) => println(topOrder)
      case Left(cycleNode) => throw new Error(s"Graph contains a cycle at node: ${cycleNode}.")
}
```

I've tried using custom node traversers and element traversers but i was not able to make them work. _How can i generate all valid topological orders?_
Something like

```
val g = Graph("a" ~> "b" % 3, "a" ~> "c" % 2, "b" ~> "c" % -2)
println(g.get("a").shortestPathTo(g.get("c")).get.weight)
```

will print 2, which is wrong(should be 1)
