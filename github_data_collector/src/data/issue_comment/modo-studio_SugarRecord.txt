A pull request from a fork that does work on Swift 5 and Xcode 11.x.

Anyone can use it with `pod 'SugarRecord', :git => 'https://github.com/aporat/SugarRecord.git'`.
## What
Well I want to update an record which is already inserted.

## Context
I'm saving records in the database. For example I saved data in db at 1:50 PM and now I sync app at 2:50 PM and want to update the same records , but It do Insert of new record. I tried finding the update function but no success
## What
Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'An instance of NSFetchedResultsController requires a fetch request with sort descriptors'



## Context
```swift
let request : FetchRequest<DataObject> = FetchRequest<DataObject>()
    
                self.observable = db.observable(request: request)
                
                pedometerDataObservable.observe { (changes) in
                    switch changes {

                    case .initial(let objects):
                        print("\(objects.count) objects in the database")
                    case .update(let deletions, let insertions, let modifications):
                        print("\(deletions.count) deleted | \(insertions.count) inserted | \(modifications.count) modified")
                    case .error(let error):
                        print("Something went wrong", error.localizedDescription)
                    }
                }
```


Hello guys!

## What
According to best practices, it is better to do Coredata related operations in the background, not to cause any possible performance drops, or UI blocks

I feel like you are doing some database access in the main thread:

## Context

Class: CoreDataObservable,  function:observe, and
Class:CoreDataDefaultStorageTests  function:spec, both calling fetch which is doing database operations


## Proposal
Don't you think it would be better to take these operations off the main thread?

## What
> Describe here your issue, a bug you found, an idea that you had, something that  you think can be improved...

## Context
> Provide information that helps with understanding your issue. For example your use case that the project doesn't cover, what you were doing when you found the bug... You can also provide the version of the library that you were using, how you integrated it with your project, the platform version...


## Proposal
> Attach your own proposal *(if you have it)*. We'll discuss in on the issue to find the best one that fits into the library.
## What
After updating to Xcode 9.3 (9E145) and Swift 4.1, an iOS project that depends on SugarRecord 3.1.3 fails to build. Carthage reports a compile error in `CoreDataObservable.swift`: 
```
<unknown>:0: error: unable to execute command: Segmentation fault: 11
```
```
	/usr/bin/xcrun xcodebuild -workspace /Users/goleinik/Workspaces/***/iOS/Carthage/Checkouts/SugarRecord/SugarRecord.xcworkspace -scheme iOSCoreData -configuration Debug -derivedDataPath /Users/goleinik/Workspaces/***/iOS/Carthage/Build/DerivedData/9.3_9E145/SugarRecord/db21b8b2a568193600ce011d682c3bb6031864fc -sdk iphonesimulator -destination platform=iOS\ Simulator,id=7AFE625D-6C2C-4A03-BD51-706FDB1F0A16 -destination-timeout 3 ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES build (launched in /Users/goleinik/Workspaces/***/iOS/Carthage/Checkouts/SugarRecord)
```

## Context
Sugar Record Release 3.1.3
Carthage Version: 0.29.0
OSX 10.13.4
Xcode  9.3 (9E145)
Swift 4.1
Base SDK iOS 11.3


## What
Support for third part frameworks, like Core functionalities, etc

## Context
`CoreDataGenerated` entity files is not visible for apps working with frameworks using SugarRecord as dependency. 


## What
Running `pod install` on the Example project fails

## Context
I downloaded the SugarRecord project as a zip and tried to run `pod install` in the Example project. It fails with the following error.

> Could not find proper version of cocoapods (1.1.0.rc.2) in any of the sources

My installed CocoaPods version is v1.2.1. 

### Short description

Adds a method `Context.count<T>` and implement it in the `NSManagedObjectContext` extension.

### Solution

Counting number of results without getting the objects is a useful functionality, specially when the objects are heavy-weight to fetch simply to be counted and then discarded.

### Implementation

- [√] Add new protocol method `Context.count<T: Entity>(_:) throws -> Int`;
- [√] Implement this protocol on existing extension of `NSManagedObjectContext` with other protocol requirements.

### GIF

CoreData with brand new `count` method:

![200](https://cloud.githubusercontent.com/assets/6502879/26764220/5f7c8b1e-4939-11e7-9e34-884009e07b50.gif)

_...that gives 02 (two) `UserEntity` instances._
## What
when I update  the entity first it works , but it failed when I update it again with different data;

## Context
>  Here is my code:
// I called flowed function first , and it worked when I restart my app.
```
static func storeAuth(
        grantType:String,
        clientId:Int16,
        clientSecret:String
        ) -> Bool{
        let auth = self.getUserAuth();
        if auth == nil{
            do{
                try AppUser.db.operation({ (context, save) throws in
                    let auth:UserAuth = try context.new();
                    auth.grantType = grantType;
                    auth.clientId = clientId;
                    auth.clientSecret = clientSecret
                    try context.insert(auth)
                    save()
                })
                return true
            }catch{
                debugPrint(error.localizedDescription)
                return false;
            }
        }else{
            do{
                try AppUser.db.operation({ (context, save) throws in
                    auth?.grantType = grantType;
                    auth?.clientId = clientId;
                    auth?.clientSecret = clientSecret
                    save()
                })
                return true;
            }catch{
                debugPrint(error.localizedDescription)
                return false;
            }
        }
    }

```
// and I call this function to update it again, but when I restart my app, the updated data was not stored. the data was that updated before;

```
static func updateAuthToken(expiresIn:Int,
                                refreshToken:String,
                                tokenType:String,
                                accessToken:String){
        let auth = self.getUserAuth();
        if auth != nil{
            do{
                try AppUser.db.operation({ (context, save) throws in
                    auth?.tokenExpiredAt = NSDate().addingSeconds(expiresIn) as NSDate?
                    auth?.refreshToken = refreshToken
                    auth?.tokenType = tokenType
                    auth?.accessToken = accessToken
                    save()
                })
            }catch{
                debugPrint(error.localizedDescription)
            }
        }
    }
```
