This is an implementation issue, not specific to any OS, Compiler or version of SFML.
The issue about font advancing as originally reported was my error.  The later discussion about blurring bolded bitmap fonts still applies.
This patch changes the DirectInput device initialization process to only attempt setting the device's axis mode if the device reports having axes and its axis mode is not already set to absolute. This should help when dealing with broken device drivers that report being game controllers and not fully supporting game controller functionality such as was reported [here](https://en.sfml-dev.org/forums/index.php?topic=25361.0).

In order to test whether the negative case handling is improved, find someone with such a broken device driver. üòÅ

## Subject of the issue

FT_LOAD_FORCE_AUTOHINT causes shift of dots in letters `i` and `j` on the X axis

## Your environment

* Windows 10
* Latest master
* MXE cross compiling

## Steps to reproduce

Use fonts that have dots in letters `i` and `j` wider that the base of the letter
example: Barlow Condensed SemiBold

## Expected behavior

The dot should be aligned with the base of letter

## Actual behavior

The mentioned flag causes hinting to be done separately on the base and the dot of the letters
Additionally this flag causes too wide spacing between glyphs at small font sizes.

I'm aware this has been requested to make small fonts look crisper, but it has it's own disadvantages. 

![image](https://user-images.githubusercontent.com/2974860/71449119-7f92bc80-273e-11ea-84f3-242b8c61a06e.png)


![image](https://user-images.githubusercontent.com/2974860/71449319-e1085a80-2741-11ea-853b-96f207d5cdf5.png)

## Subject of the issue

Combining _GLIBCXX_DEBUG and sf::Text does not work.

Allocating a sf::Text causes the program to segfault in sf::Text's destruction.

My environment is pretty old. If this cannot be reproduced using a newer setup, then please close the issue and sorry for the noise. :)

## Your environment

* Linux / Ubuntu 14.04.6 LTS / Xfce
* Installed via apt. apt says 
  2.1+dfsg-4ubuntu2
  My SFML/Config.h says 
  define SFML_VERSION_MAJOR 2 
  define SFML_VERSION_MINOR 1
* g++ (Ubuntu 4.8.4-2ubuntu1~14.04.4) 4.8.4
* Problem only occurs with -D_GLIBCXX_DEBUG

## Steps to reproduce

Compile and run the code using:
```bash
g++ -D_GLIBCXX_DEBUG bug.cpp -o bug -lsfml-graphics && ./bug
```

The C++ code is
```cpp
#include <SFML/Graphics.hpp>
int main()
{
  sf::Text bug;
}
```

By compiling and running
```bash
g++ -D_GLIBCXX_DEBUG bug.cpp -ggdb -O0 -o bug -lsfml-graphics && gdb --args ./bug
```
I obtained the following stack trace:
```
#0  0x00007ffff7950b73 in __gnu_debug::_Safe_sequence_base::_M_detach_all() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#1  0x0000000000400f40 in __gnu_debug::_Safe_sequence_base::~_Safe_sequence_base (this=0x7fffffffded8, __in_chrg=<optimized out>) at /usr/include/c++/4.8/debug/safe_base.h:198
#2  0x00000000004011f4 in __gnu_debug::_Safe_sequence<std::__debug::vector<sf::Vertex, std::allocator<sf::Vertex> > >::~_Safe_sequence (this=0x7fffffffded8, __in_chrg=<optimized out>)
    at /usr/include/c++/4.8/debug/safe_sequence.h:111
#3  0x0000000000401213 in std::__debug::vector<sf::Vertex, std::allocator<sf::Vertex> >::~vector (this=0x7fffffffdec0, __in_chrg=<optimized out>) at /usr/include/c++/4.8/debug/vector:144
#4  0x0000000000400fd8 in sf::VertexArray::~VertexArray (this=0x7fffffffdeb8, __in_chrg=<optimized out>) at /usr/include/SFML/Graphics/VertexArray.hpp:45
#5  0x0000000000401078 in sf::Text::~Text (this=0x7fffffffdde0, __in_chrg=<optimized out>) at /usr/include/SFML/Graphics/Text.hpp:48
#6  0x0000000000400f21 in main () at bug.cpp:4
```

Running the code
```cpp
#include <SFML/Graphics.hpp>
#include <iostream>
using namespace std;
int main()
{
  {
    sf::Text bug;
    cout << "I am reached" << endl;
  }
  cout << "I am not reached" << endl;
}
```
shows that the seg fault happens in the destruction of sf::Text as the first string is printed but not the second.


## Expected behavior

Executing the program should do nothing.

## Actual behavior

The program segfaults.

From fedora spec files:
```
# This is https://www.sfml-dev.org/files/SFML-2.5.1-sources.zip
# with the non free contents removed - See rhbz#1310387 and rhbz#1003569
# List of deleted files
#
# examples/sound/resources/canary.wav
# examples/iOS/resources/canary.wav
# examples/android/app/src/main/assets/canary.wav
# examples/sound/resources/orchestral.ogg
# examples/iOS/resources/orchestral.ogg
# examples/android/app/src/main/assets/orchestral.ogg
# tools/xcode/templates/SFML/SFML CLT.xctemplate/sansation.ttf
# tools/xcode/templates/SFML/SFML App.xctemplate/sansation.ttf
# examples/shader/resources/sansation.ttf
# examples/pong/resources/sansation.ttf
# examples/opengl/resources/sansation.ttf
# examples/joystick/resources/sansation.ttf
# examples/island/resources/sansation.ttf
# examples/iOS/resources/sansation.ttf
# examples/cocoa/resources/sansation.ttf
# examples/android/app/src/main/assets/sansation.ttf
# examples/shader/resources/background.jpg
# examples/opengl/resources/background.jpg
# examples/opengl/resources/texture.jpg
# examples/pong/resources/ball.wav
# examples/shader/resources/devices.png
# examples/win32/resources/image1.jpg
# examples/win32/resources/image2.jpg
```
Could you please consider create dist tar ball without that stuff to allow directly grab dist tar ball immediately after new release?


## Subject of the issue
Please add the ability to store, loop through and get sockets directly into a socketselector.
right now we have to store our sockets into a vectors or list which shouldn't be necessary since socket selector already holds onto sockets in some sort of way.

I propose that..
1. a indexer be made available.
2. a getCount() or getLength() method be made available .
3. allow the user to set a max amount of sockets of a socketSelector

## Your environment
Windows 7 Ultimate 64 bit
SFML 2.5.0
Visual Studio 2019 Community
*No compiler flags I know of*

## Window larger than desktop size gets truncated on Linux/KDE

My desktop size is 1920x1080.
While trying to create window larger than this, it gets truncated.
E.g.
```
window.create(sf::VideoMode(3534, 550), "My window");
```
Height is ok, since it's smaller that desktop, but width is only 1920. Even if i resize the window afterwards (by hand, or by code) it's initial size stays truncated, so coordinate conversion doesn't work and image i'm drawing as background (which is 3534x550) stays truncated on right.
This seems to be Linux (or KDE)-only issue, because i can't reproduce it on windows.

## Environment

* Linux Fedora 30, KDE Plasma
* SFML 2.5.1
* gcc version 9.2.1 20190827 (Red Hat 9.2.1-1) (GCC)

## Steps to reproduce

```cpp
#include <SFML/Graphics.hpp>

int main()
{
    sf::RenderWindow window(sf::VideoMode(3534, 550), "Minimal, complete and verifiable example");
    window.setFramerateLimit(60);

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        window.clear();
        window.display();
    }
}
```

## Expected behavior

Window is created with size 3534x550

## Actual behavior

Window is created with size 1920x550

## Description

This pull request adds the feature described in #1615

## How to test this PR?

Unfortunately, I do not have any ready code that can prove this PR does the thing it should do. However, I have used a fork with the exact modification in my [game](https://github.com/JoaoBaptMG/ReboundTheGame), using an adapted text drawable that uses HarfBuzz and needs to load the glyphs by using their index instead of the code point.
## Subject of the issue

When using Fullscreen modes on a Mac with a high-dpi display in "Scaled" mode, we observe a large black margin around the drawable area.

## Your environment

* macOS 10.14.6
* SFML 2.5.1
* Xcode 10.3
* Special compiler flags used: none

## Steps to reproduce

- Change Mac Display Resolution Settings to `Scaled` and `More Space` - this selects the highest DPI
<img width="662" alt="image" src="https://user-images.githubusercontent.com/4473104/65473700-dee2e700-de46-11e9-968e-e80ea9cee6e2.png">

- Load default SFML Xcode app template and change to use highest fullscreen mode, and render any sprite which covers the entire screen
```
std::vector<sf::VideoMode> modes = sf::VideoMode::getFullscreenModes();
sf::RenderWindow window(sf::VideoMode(modes[0].width, modes[0].height), "SFML window", sf::Style::Fullscreen);
```

## Expected behavior

Drawable area should encompass the full screen.


## Actual behavior

We end up with a large black border around the outside of the image:
<img width="1919" alt="image" src="https://user-images.githubusercontent.com/4473104/65473841-75afa380-de47-11e9-9575-c24329cd1415.png">

If we change the display to use the "Default" scaling, it looks proper:
<img width="665" alt="image" src="https://user-images.githubusercontent.com/4473104/65473856-8d872780-de47-11e9-818e-f7e672f89aa6.png">
<img width="1679" alt="image" src="https://user-images.githubusercontent.com/4473104/65473886-aee81380-de47-11e9-89c3-2fcebbf931e7.png">


## Subject of the issue

Fullscreen is running on multiple monitors, spanning. On Linux, many people including me have this issue, maybe 100% guaranteed. But only one player has this issue in Windows

## Your environment

* Windows & Linux
* 2.5.0
* MinGW64 latest
* Nvidia GTX 1070 from Windows user, any other Nvidia card for Linux

## Steps to reproduce

Have multiple monitors and run the program in fullscreen.

```cpp
#include <SFML/Graphics.hpp>

int main() {
    sf::RenderWindow window(sf::VideoMode(1920, 1080), "Fullscreen issue", sf::Style::Fullscreen);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if(event.type == sf::Event::Closed) window.close();
        }

        window.clear();
        window.display();
    }
}
```

## Expected behavior

Work on main monitor only.

## Actual behavior

Fullscreen spans over all monitors, resolution does not matter, like even if it's 1920x1080. 