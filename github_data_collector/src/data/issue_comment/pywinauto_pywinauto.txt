- Use the `pywinauto.base_application` as the main source for Application module
- Fix methods links in the Applicaiton documentation
- Mention Windows/Linux specific implementations of Application
I am not sure how deep into the Windows API pywinauto dives or where the line is drawn until something is not considered "GUI" 

Here are some things I wrote for accessing different portions of the Windows API, they might be useful and they might not... I wanted to share. dealing with ctypes and the Windows API does truly suck. So if there is anything in here that can make things a bit easier. or maybe something that you have not gotten around to adding I have already done.

Windows core audio interface. Just about all of the control available from the sound control panel available in python.. plus some extras. like detecting audio output and what program is outputting it..audio detection is done one of 2 ways the first way is able to capture the program name the audio is coming from. This is not always available. This mechanism does not really know if there is sound being heard. only if there is something playing. The second way detects audio output and audio input. This is a true reading. if audio can be heard this is going to let you know.. There is an adjustable tolerance that can be supplied to filter out any "hiss" or noise.
Needs some work to support python 3.x
https://github.com/kdschlosser/pyWinCoreAudio

This project I am going to split into 2 projects. One will be a decoder and the other will handle the nitty gritty of getting the IR signals from the receiver. On the latter I am going to add one decoder to it the ability to decode MCE codes. The decoding portion if going to take a while longer for me to finish up as there is a seemingly endless number of ir protocols.
https: // github.com / kdschlosser / pyWinMCERemote  still a work in progress.

Windows 10 virtual desktop management. no need to say more.
https://github.com/kdschlosser/WindowsVirtualDesktop

Fixes the problems that occur with Windows 10 "virtual locals" and Python.
Supports all languages that  are supported by Windows. I also threw in native text for the language name and country name.. and for the hell of it you can also get an icon of the flag for the country..
I did those things because I never understood why a language selection the available languages and countries would always be the same language.. I thought it would be better to have the text for a selection be in that languages alphabet.
https://github.com/kdschlosser/pyWinLocale

Windows API errors rolled into a single file
https://github.com/kdschlosser/pyWinErrors

The data types that are" missing" from ctypes
https://github.com/kdschlosser/pyWinDataTypes

Windows processes, process management esentially
https://github.com/kdschlosser/pyWinProcess

Windows named pipes. pure python named pipes.
https://github.com/kdschlosser/pyWinNamedPipe

750,000+ lines of the Windows SDK ported to python.
does not run, python would probably see this thing  getting loaded and try to run away
to be used as a reference. or maybe you would rather copy and paste what is needed to save a bunch of time
It is not perfect. there may be some errors. one is there is no consideration for packing. so be sure to check the windows API docs.
The file structure is identical to the Windows SDK
https://github.com/kdschlosser/pyWinAPI

If there is a specific file of the API that is wanted and I do not already have it converted. let me know. takes me a few hours to port a 50,000 line file.





Feature request.

## Expected Behavior

Somewhat human-like/natural mouse movement. PyAutoGUI and others have this functionality (see [doco](https://pyautogui.readthedocs.io/en/latest/mouse.html#tween-easing-functions)).

## Actual Behavior

Mouse simply disappears from one place and appears in another.

## Steps to Reproduce the Problem

Any code  to move the mouse.

## Short Example of Code to Demonstrate the Problem
```python
import pywinauto, time
pywinauto.mouse.move(coords=(1,1))
time.sleep(2)
pywinauto.mouse.move(coords=(500,500))
```
Reported here in the comment: https://stackoverflow.com/a/57218300/3648361
## Expected Behavior
An item in the combobox is selected.

## Actual Behavior
After correct behavior, an unrelated combobox is changed and expanded.

## Short Example of Code to Demonstrate the Problem
I tried the following source by the NewControls in [VCSamples](https://github.com/microsoft/VCSamples).
`VCSamples/VC2010Samples/MFC/Visual C++ 2008 Feature Pack/NewControls/`

![newcontrol](https://user-images.githubusercontent.com/21115080/71759035-9679a180-2eea-11ea-9cef-59a92a65270b.PNG)

### source
~~~py
# launch the app
app = Application("uia").start(r"..\newcontrols.exe")
dlg = app.window(title_re = "NewControls")
# get combobox with resource ID
combobox = dlg.child_window(auto_id = '1002')
# select a combobox item
combobox.select('Image on right')
~~~

In this example, I try to change only the 'Image Location" combobox, but the "Appearance" combobox is operated and expanded without collapsing..

### note
* I used `backend='uia'`, because I want to use resource ID of MFC.
* When changing the source to select with number (ex.`combobox.select(2)`), the source cannot work.
* After removing source under `# do health check and apply workaround for Qt5 combo box if necessary` in `select()` method of `ComboBoxWrapper` class, the program worked fine.

## Specifications
  - Pywinauto version: 0.6.8
  - Python version and bitness: Python3.7(64bit)
  - Platform and OS: Windows 10


This is the first time I have written to the github.
So, if there is a problem in my writing, I would be glad if you could point out.

## Expected Behavior
Do the code with a 0.01 seconds delay between clicks

## Actual Behavior
It waits 0.5 seconds between clicks

## Steps to Reproduce the Problem

  1. Open notepad
  2. Run code
  3. Check print log

## Short Example of Code to Demonstrate the Problem
```
from pywinauto import application, timings
import time

app2 = application.Application()
app2.connect(title_re = '.*Notas*') #In portuguese, Notepad is translated to 'Bloco de Notas', so change to your system name
app2 = app2.window(title_re = '.*Notas*') #same here
app2 = app2.wrapper_object()
timings.Timings.after_clickinput_wait = 0.001
timings.Timings.after_setcursorpos_wait = 0.001
starttime = time.perf_counter()
for i in range(100):
    app2.click_input(button='left', coords=(100,100))
    print('Between clicks took ', str(time.perf_counter()-starttime), ' seconds')
    starttime = time.perf_counter()

```

## Specifications

  - Pywinauto version: 0.6.8
  - Python version and bitness: 3.7.0 32bit
  - Platform and OS: Windows 10

Extra info: If you move the mouse physically, it forces a faster response time, doing the expected result

at the root folder and in the OS specific implementations.
It's broken in branch `atspi` (PR #848).

Unit tests must be written to make sure it will not be broken in the future.
I tried to screenshot a window without border and I followed this code: https://stackoverflow.com/questions/54767813/pywinauto-capture-as-image-adds-unwanted-borders
## Expected Behavior
The screenshot was supposed to have no border, like the image shown in the link.

## Actual Behavior
But I got an error from python saying that AttributeError: 'RECT' object has no attribute 'width'. It seems like the error is from inside the base_wrapper.py in capture_as_image(self, rect) where the attribute 'width()' was used

## Specifications

  - Pywinauto version: 0.6.8
  - Python version and bitness: 3.6
  - Platform and OS: Windows 10 

I don't have to stick to this method, so any way of taking a borderless screenshot of a window is welcomed. I just think it might be worthy to mention this issue here. 
## Expected Behavior


## Actual Behavior


## Steps to Reproduce the Problem

  1.
  2.
  3.

## Short Example of Code to Demonstrate the Problem


## Specifications

  - Pywinauto version:
  - Python version and bitness:
  - Platform and OS:
