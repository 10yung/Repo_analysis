https://saveenr.gitbooks.io/usql-tutorial/content/set-operations/outer-union.html
Examples:
```
$ textql -header -sql '*' -pkey 'Company name'
```
Composite primary key can be specified with comma-separated string:
```
$ textql -header -sql '*' -pkey 'name,birth day'
```
Go modules is built-in, so we can simplify the build process.
Hi,
first of all thank you for this tools.

In sqlite, via .load, it's possible to load extensions https://www.sqlite.org/loadext.html

Is it possible to do it via textql?

Thank you
Is it possible to get the instructions in text form instead of a video?

1. Videos aren't usable by screen readers and not good for disabled users
2. This video is really long, much longer than if we just had the usage instructions in text.
Hi, I'm Yevgeny Pats Founder of [Fuzzit](https://fuzzit.dev) - Continuous fuzzing as a service platform.

We have a free plan for OSS and I would be happy to contribute a PR if that's interesting.
The PR will include the following
- [go-fuzz](https://github.com/dvyukov/go-fuzz) fuzzers (This is generic step not-connected to fuzzit)
- Continuous Fuzzing of master branch which will generate new corpus and look for new crashes
- Regression on every PR that will run the fuzzers through all the generated corpus and fixed crashes from previous step. This will prevent new or old bugs from crippling into master.

You can see our basic example [fuzzitdev/example-go](https://github.com/fuzzitdev/example-go) and you can see an example of "in the wild" integration [google/syzkaller](https://github.com/google/syzkaller).

Let me know if this is something worth working on.

Cheers,
Yevgeny

Not urgent, but I was writing a query to check a CSV for duplicate rows and realized it might be nice to have a flag for returning an exit status. In my specific case an option to return a status for an empty result set would be fine.

A more-flexible implementation might be an option to create the table with a pre-supplied schema before trying to load the rows. In that case, I could add a schema that prohibits the duplicate rows, and (I imagine) the integrity errors would trigger to return an exit status as it already does for malformed queries.
I would like to donate to you or your favorite charity to help encourage a new feature: Unicode separated values (USV) which uses Unicode unit separator U+241F and Unicode record separator U+241E.

Unicode separated values (USV) are much like comma separated values (CSV), tab separated values (TSV) a.k.a. tab delimited format (TDF), and ASCII separated values (ASV) a.k.a. DEL (Delimited ASCII) a.k.a. ASCII 30-31.

The advantages of USV for me are that USV handles text that happens to contain commas and/or tabs and/or newlines, and also having a visual character representation.

For example USV is great for me within typical source code, such as Unix scripts, because the characters show up, and also easy to copy/paste, and also easy to use within various kinds of editor search boxes.

When data are solely for machines, then for me the choice of characters doesn't matter. When data are potentially for reading or editing, such as by a programmer, then I prefer typically-visible characters (U+241F & U+241F) over typically-invisible zero-width characters (ASCII 30 & 31).

For example I can write code samples such as:

    $ echo 'a␟b␟c␞d␟e␟f␞g␟h␟i' | tr ␟␞ '\t\n'
    a      b      c
    d      e      f
    g      h      i

In addition, Unicode U+241F & U+241E are semantically meaningful, and use an international standard, and are able to work well in any typical Unicode language and any typical Unicode font.

USV is akin to TSV in that the delimiter characters cannot not appear in the content. 

For comparison I am using the TSV standard by IANA here:
https://www.iana.org/assignments/media-types/text/tab-separated-values

I'm offering similar donations to similar projects. If you know of ones that could be interested, I'm happy to connect with them.

Thank you for your consideration.
Any chance you could actualy release it as a binary on github ?

Releasing a binary, just makes your tool available for someone who just wants to check it out quickly.

Not everyone has the entire go distribution installed or as a simple user is familiar with compiling.Besides that releasing a binary, would make it easier for others to create a package for a Linux distro, based on the binary (ex. Archlinux AUR).i

Do you know this tool, https://github.com/goreleaser/goreleaser ?

https://help.github.com/en/articles/creating-releases
you can also use:
- travis, https://blog.questionable.services/article/build-go-binaries-travis-ci-github/
- circleci, https://circleci.com/blog/publishing-to-github-releases-via-circleci/

https://github.com/dinedal/textql/issues/102
https://github.com/dinedal/textql/issues/65
https://github.com/dinedal/textql/issues/87
The advice of creating such an alias in the README is really good and works well:
```
alias textql='docker run --rm -it -v $(pwd):/tmp textql '
```
but the problem with it is that it runs `textql` as root and so the output files are created with that user.

Ideally, the solution would be to use this command instead:
```
alias textql='docker run --rm --user $(id -u):$(id -g) -it -v $(pwd):/tmp textql '
```
which works fine when called like this
```
textql
(...usage shown...)
```
but not when an actual SQL processing is requested:
```
textql -sql 'SELECT * FROM groups LIMIT 2' groups.csv
2019/02/12 07:26:44 user: unknown userid 1000
```

Is there a way to fix that?