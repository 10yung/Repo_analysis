Not doing anything fancy. I insert a list of rows:

```
var bulkConfig = new BulkConfig { PreserveInsertOrder = true, SetOutputIdentity = true };
await context.BulkInsertAsync(newRows, bulkConfig);
```

At this point, the Ids of newRows are filled, but in reverse order from how they are filled in the database. If there's more than 100 rows it works fine (tested with ~150, ~200, ~1400), if there's less than 100 rows, the Ids are reversed (tested with about 10 different sizes).

For clarity, if I insert rows: 
```
[
  { Id = 0, Content = A},
  { Id = 0, Content = B},
  { Id = 0, Content = C},
]

```
They are updated to:
```
[
  { Id = 1, Content = A},
  { Id = 2, Content = B},
  { Id = 3, Content = C},
]

```
But the rows in the database end up being:
```
[
  { Id = 3, Content = A},
  { Id = 2, Content = B},
  { Id = 1, Content = C},
]
```
Hi,

My idea is to use BulkUpdate to update only the modified fields. If i am passing only modified fields then its updating 'null' for remaining fields in the rows. Also PropertiesToExclude is excluding the column from all the rows.

Is there a way to update only the modified fields?

Note: each row data will have different modified fields/columns. 

Can someone please guide on this issue?

Regards,
Yaju
Solution is inspired by

https://github.com/dotnet/efcore/blob/master/src/EFCore.Relational/Query/Internal/QueryingEnumerable.cs#L107

https://github.com/dotnet/efcore/blob/master/src/EFCore.Relational/Query/Internal/RelationalCommandCache.cs#L44
I'm finding that when:

* an entity has a nullable property, e.g. bool?
* the property has a converter, e.g. BoolToStringConverter
* the entity's value for that property is null
* Sqlite is being used

Then an exception is thrown when BulkInsert saves that entity:

```
  Message: 
    System.InvalidCastException : Object cannot be cast from DBNull to other types.
  Stack Trace: 
    IConvertible.ToBoolean(IFormatProvider provider)
    Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)
    Convert.ChangeType(Object value, Type conversionType)
    ValueConverter`2.Sanitize[T](Object value)
    <>c__DisplayClass3_0`2.<SanitizeConverter>b__0(Object v)
    SqlBulkOperation.LoadSqliteValues[T](TableInfo tableInfo, TypeAccessor typeAccessor, T entity, SqliteCommand command)
    SqlBulkOperation.InsertAsync[T](DbContext context, IList`1 entities, TableInfo tableInfo, Action`1 progress, CancellationToken cancellationToken)
```

I believe a null should never be passed to a value converter (see https://docs.microsoft.com/en-us/ef/core/modeling/value-conversions), so I guess that call just needs null protection?
Thanks for your good BatchUpdate(Async) and BatchDelete(Async) functions, it helped a lot.

What about adding new extension method `IQueryable<T1>.BatchInsertTo(DbSet<T2>, Expression<T1, T2>)` to support queries like `INSERT INTO [MyDb1] ([AAA], [BBB]) SELECT [a].[CCC] AS [AAA], [b].[DDD] AS [BBB] FROM [ASet] AS [a], [BSet] AS [b]` or so on?
I have been trying to get my data process to work when deploying to a Linux container in Cloud Foundry.  I am using the "dotnet_core_buildpack" buildpack and "cflinuxfs3" stack.  It's running DotNetCore 3.1 and targeting "linux-x64" self contained.  I have tried many things to get this to work, but the process would always hang when calling BulkInsertOrUpdateAsync().  Sorry, I don't know how to provide any specific details.  I'm not getting an exception or anything.  All I have to go on is logging and that stops giving any messages when it hangs.  Please let me know if there is a way to debug this further.
I was able to get it to work by changing over to the "binary_buildpack" buildpack and targeting "win10-x64" self contained.
Again, sorry I don't know how to provide more details, but I at least wanted to report the issue.
This allows to insert/update from derived entity colums even an enumerable from the abstract base type is passed into the function
Hello,

I came accross an issue when inserting a list of entities with an abstract base type (TPH pattern) and the enumerable passed into the function is of the base type.

The problem here is that none of the derived properties are filled only the ones from the base type.

I've created a repo to reproduce the error: 
https://github.com/NQuirmbach/BulkTest

Is this an inteded behaviour?

Fix ArgumentOutOfRangeException when involving a field of type "timestamp" 

#276 
Hi,

First of all, thank you for the hard work you did with this library :) In our project, we need to insert a large amount of data into database periodically (Daily, Weekly, Monthly, Yearly) and this tool perfectly fit the needs :D 

Here's the context : we have objects that have children, and each of them also have children. So I used the same kind of code that I found here on the following link to bulkinsert entities and then subEntities and again subSubEntities : https://github.com/borisdj/EFCore.BulkExtensions/issues/53#issuecomment-398647278

=> I defined a BulkConfig to set both PreserveInsertOrder and SetOutputIdentity to true, but I'm meeting an ArgumentOutOfRangeException : "Specified argument was out of the range of valid values. (Parameter 'name')"

I don't understand what does 'name' refers but here's the stacktrace in case you can help me (and others who may encounter the same problem) : 

   at FastMember_dynamic.RoundInstanciated_2.get_Item(Object , String )
   at EFCore.BulkExtensions.TableInfo.UpdateEntitiesIdentity[T](IList`1 entities, IList`1 entitiesWithOutputIdentity)
   at EFCore.BulkExtensions.TableInfo.<LoadOutputDataAsync>d__112`1.MoveNext()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at EFCore.BulkExtensions.SqlBulkOperation.<MergeAsync>d__5`1.MoveNext()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at EFCore.BulkExtensions.SqlBulkOperation.<MergeAsync>d__5`1.MoveNext()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at LB.TriggerAPI.Controllers.InstanciationController.<BulkInsert>d__2.MoveNext() in C:\Users\skype007\source\repos\LB.TriggerAPI\LB.TriggerAPI\Controllers\InstanciationController.cs:line 124

Thanks in advance guys !

Technical environment:
- EFCore.BulkExtensions : 3.1.0 (but this issue also occured with 2.6.4 version)
- Entity Framework Core 3.1.0