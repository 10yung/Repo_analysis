Hi, do you know of any Python equivalents for this project? 
I presume the CasADi interpolant can already be used in OpenOCL? If yes, would it be possible to introduce an example where lookup tables are used in the definition of the dynamic system (dae or ode) and path constraints?



First draft of the language is presented here:
https://www.syscop.de/event/introduction-ocml-optimal-control-modeling-language

We might also want a parser in a standalone language like C++, python or javascript

.ocml github project (not up to date):
https://github.com/OpenOCL/ocml

https://github.com/stack-of-tasks/pinocchio
```
r = solver.checkConstraints(ig);
r = solver.checkOde(ig);
r = solver.check
```

```
function pathcosts(ch,x,z,u,p)
  ch.add('costtermname1', x)
  ch.costtermname2 = x;
end
```


```
gridpoints = linspace(0,1,10)
x0 = linspace(50,1,10)
solver.ig.x.set(gridpoints, x0)
```

```
function pointcosts(ch, gridpoint, x)
  if gridpoint == 0.5
    sh.add(x'*x);
  end
end
```
- [x]  Basic `feasibility` study for code generation of RT models using Matlab symbolics, code generation using CasADi 

- [x] ~Implement functions in OpenOCL to create, export, use RTB models~

- [ ] testing

- [ ] documentation
- [ ] CostHandler: as a struct; ch.name = var; e.g. ch.regularization=u.'*u;
- [ ] OCML
for feedback control