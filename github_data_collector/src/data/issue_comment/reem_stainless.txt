Adds a badge showing the number of people helping this repo on CodeTriage.

[![Open Source Helpers](https://www.codetriage.com/reem/stainless/badges/users.svg)](https://www.codetriage.com/reem/stainless)


## What is CodeTriage?

CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed

[Read more about the CodeTriage project](https://www.codetriage.com/what).

## Why am I getting this PR?

Your project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to [CodeTriage](https://www.codetriage.com/what)? Roughly almost 3 years ago, [olivecoder](https://github.com/olivecoder) added this project to CodeTriage in order to start contributing. Since then, 6 people have subscribed to help this repo.

## What does adding a badge accomplish?

Adding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.

You can see an example of a CodeTriage badge on these popular OSS READMEs:

- [![Email clients like GMAIL do not render SVG images](https://www.codetriage.com/rails/rails/badges/users.svg)](https://www.codetriage.com/rails/rails) https://github.com/rails/rails
- [![Email clients like GMAIL do not render SVG images](https://www.codetriage.com/crystal-lang/crystal/badges/users.svg)](https://www.codetriage.com/crystal-lang/crystal) https://github.com/crystal-lang/crystal

## Have a question or comment?

While I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.

If you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.

Thanks for making your project Open Source! Any feedback is greatly appreciated.

I currently get this on git master and nightly of 2018-02-28: 

```
error[E0599]: no associated item named `Inherited` found for type `syntax::codemap::Spanned<syntax::ast::VisibilityKind>` in the current scope
   --> /home/svenstaro/.cargo/git/checkouts/stainless-0b08235192b57707/f89f435/src/generate.rs:135:18
    |
135 |             vis: ast::Visibility::Inherited,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ associated item not found in `syntax::codemap::Spanned<syntax::ast::VisibilityKind>`

error[E0599]: no associated item named `Inherited` found for type `syntax::codemap::Spanned<syntax::ast::VisibilityKind>` in the current scope
   --> /home/svenstaro/.cargo/git/checkouts/stainless-0b08235192b57707/f89f435/src/generate.rs:179:18
    |
179 |             vis: ast::Visibility::Inherited,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ associated item not found in `syntax::codemap::Spanned<syntax::ast::VisibilityKind>`

error[E0599]: no associated item named `Public` found for type `syntax::codemap::Spanned<syntax::ast::VisibilityKind>` in the current scope
   --> /home/svenstaro/.cargo/git/checkouts/stainless-0b08235192b57707/f89f435/src/generate.rs:228:47
    |
228 |         let super_glob = cx.item_use_glob(sp, ast::Visibility::Public, vec![cx.ident_of("super")]);
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^ associated item not found in `syntax::codemap::Spanned<syntax::ast::VisibilityKind>`
```
Currently using a string with describe (`describe! "stainless"`) either results in an error or a panic (see #88). 
I have the following _src/main.rs_:

```
#![feature(plugin)]
#![cfg_attr(test, plugin(stainless))]

describe! stainless {
    describe! "add" {
        it "works" {}
    }
}
```

When I run `cargo test`, I get:

```
error: internal compiler error: unexpected panic

note: the compiler unexpectedly panicked. this is a bug.

note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports

note: rustc 1.24.0-nightly (4a7c072fa 2017-12-25) running on x86_64-pc-windows-msvc

note: run with `RUST_BACKTRACE=1` for a backtrace

thread 'rustc' panicked at 'Diagnostic { level: Fatal, message: [("Failed to parse the name of the describe block, got err: Diagnostic { level: Fatal, message: [(\"expected identifier, found `\\\"add\\\"`\", NoStyle)], code: None, span: MultiSpan { primary_spans: [Span { lo: BytePos(95), hi: BytePos(100), ctxt: #0 }], span_labels: [] }, children: [], suggestions: [] }", NoStyle)], code: None, span: MultiSpan { primary_spans: [Span { lo: BytePos(95), hi: BytePos(100), ctxt: #0 }], span_labels: [] }, children: [], suggestions: [] }', C:\Users\Per\.cargo\registry\src\github.com-1ecc6299db9ec823\stainless-0.1.12\src\parse.rs:109:24
stack backtrace:
   0: std::sync::mpsc::sync::Queue::dequeue
   1: std::panicking::Location::column
   2: std::panicking::Location::column
   3: std::panicking::rust_panic_with_hook
   4: std::panicking::begin_panic_fmt
   5: std::panicking::begin_panic_fmt
   6: stainless::parse::{{impl}}::parse
             at C:\Users\Per\.cargo\registry\src\github.com-1ecc6299db9ec823\stainless-0.1.12\src\parse.rs:109
   7: stainless::parse::{{impl}}::parse
             at C:\Users\Per\.cargo\registry\src\github.com-1ecc6299db9ec823\stainless-0.1.12\src\parse.rs:180
   8: stainless::describe::describe
             at C:\Users\Per\.cargo\registry\src\github.com-1ecc6299db9ec823\stainless-0.1.12\src\describe.rs:66
   9: core::ops::function::Fn::call<fn(mut syntax::ext::base::ExtCtxt*, syntax_pos::span_encoding::Span, syntax_pos::symbol::Ident, alloc::vec::Vec<syntax::tokenstream::TokenTree>) -> alloc::boxed::Box<MacResult>,(mut syntax::ext::base::ExtCtxt*, syntax_pos::span_encoding::Span, syntax_pos::symbol::Ident, alloc::vec::Vec<syntax::tokenstream::TokenTree>)>
             at C:\projects\rust\src\libcore\ops\function.rs:73
  10: syntax::ext::base::{{impl}}::expand<fn(mut syntax::ext::base::ExtCtxt*, syntax_pos::span_encoding::Span, syntax_pos::symbol::Ident, alloc::vec::Vec<syntax::tokenstream::TokenTree>) -> alloc::boxed::Box<MacResult>>
             at C:\projects\rust\src\libsyntax\ext\base.rs:261
  11: syntax::ext::expand::MacroExpander::expand_crate
  12: syntax::ext::expand::MacroExpander::expand_crate
  13: syntax::ext::expand::MacroExpander::expand_crate
  14: rustc_driver::driver::count_nodes
  15: rustc_driver::driver::count_nodes
  16: rustc_driver::driver::compile_input
  17: rustc_driver::run_compiler
  18: <rustc_driver::pretty::UserIdentifiedItem as core::fmt::Debug>::fmt
  19: _rust_maybe_catch_panic
  20: rustc_driver::profile::dump
  21: std::sync::mpsc::sync::Queue::dequeue
  22: std::sys::windows::thread::Thread::new
  23: BaseThreadInitThunk

```

Note that this only happens for a nested `describe!`. If I change the code to `describe! "stainless" {`, I get a proper error message:

```
error: expected open delimiter
 --> src\main.rs:4:11
  |
4 | describe! "stainless" {
  |           ^^^^^^^^^^^

```
Stainless version: 0.1.11
rustc version: `1.19.0-nightly (75b056812 2017-05-15)`

A minimal test case follows. I put the code in `src/test.rs` and `src/main.rs` only contains configuration needed for stainless, and a `mod test;` declaration.
```rust
describe! my_module {
    before_each {
        let a = (0..2).map(|x| error_token)
    }
}
```
(Note the missing semicolon; without it, everything works fine.)

After running `cargo test`, I'm getting the following output:
```
error: internal compiler error: Error constructed but not emitted

error: internal compiler error: unexpected panic

note: the compiler unexpectedly panicked. this is a bug.

note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports

note: run with `RUST_BACKTRACE=1` for a backtrace

thread 'rustc' panicked at 'explicit panic', /checkout/src/librustc_errors/diagnostic_builder.rs:204
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
stack backtrace:
   0: std::sys::imp::backtrace::tracing::imp::unwind_backtrace
             at /checkout/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:49
   1: std::sys_common::backtrace::_print
             at /checkout/src/libstd/sys_common/backtrace.rs:71
   2: std::panicking::default_hook::{{closure}}
             at /checkout/src/libstd/sys_common/backtrace.rs:60
             at /checkout/src/libstd/panicking.rs:355
   3: std::panicking::default_hook
             at /checkout/src/libstd/panicking.rs:365
   4: std::panicking::rust_panic_with_hook
             at /checkout/src/libstd/panicking.rs:549
   5: std::panicking::begin_panic
   6: <rustc_errors::diagnostic_builder::DiagnosticBuilder<'a> as core::ops::Drop>::drop
   7: core::ptr::drop_in_place
             at /checkout/src/libcore/ptr.rs:60
   8: core::ptr::drop_in_place
             at /checkout/src/libcore/ptr.rs:60
   9: <core::result::Result<T, E>>::ok
             at /checkout/src/libcore/result.rs:341
  10: <stainless::describe::DescribeState as stainless::parse::Parse<(syntax_pos::Span, &'a mut syntax::ext::base::ExtCtxt<'b>, core::option::Option<syntax_pos::symbol::Ident>)>>::parse
             at /home/geomaster/.cargo/registry/src/github.com-1ecc6299db9ec823/stainless-0.1.11/src/parse.rs:143
  11: stainless::describe::describe
             at /home/geomaster/.cargo/registry/src/github.com-1ecc6299db9ec823/stainless-0.1.11/src/describe.rs:68
  12: core::ops::Fn::call
             at /checkout/src/libcore/ops.rs:2567
  13: <F as syntax::ext::base::IdentMacroExpander>::expand
             at /checkout/src/libsyntax/ext/base.rs:260
  14: syntax::ext::expand::MacroExpander::expand_invoc
  15: syntax::ext::expand::MacroExpander::expand
  16: syntax::ext::expand::MacroExpander::expand_crate
  17: rustc_driver::driver::phase_2_configure_and_expand::{{closure}}
  18: rustc_driver::driver::phase_2_configure_and_expand
  19: rustc_driver::driver::compile_input
  20: rustc_driver::run_compiler
```
I'll be happy to provide any further information, if needed.

eliminate: cannot infer type for `K`
So I learned a bit playing with this crate seeing if I could fix issue #49.

Here's what I got <img width="935" alt="screen shot 2017-02-18 at 1 00 16 am" src="https://cloud.githubusercontent.com/assets/4073509/23091942/b2d45ffc-f575-11e6-9b51-e2c379afee88.png">

This PR right now just demonstrates a nicer way to surface the error in one place. I can apply this same way of surfacing the error across the rest of the crate where we currently have panics.

The reason it is still panicing is because `Parse::parse()` still requires a return value of self, and since parse_block failed to return an `syntax::ast::Block`, I don't have a value to use for `Test::block`.

@reem I was hoping to get your opinion on what your preferred way to apply this change would be. This is my first time working with syntax extensions and I don't have much experience writing syntax parsers in general.

Options I see (but there certainly could be some I'm overlooking):

* Make `Test::block` an option type, make it none when `parse_block()` fails. Although I'm not sure how Generate::generate should behave when block is `None`
* Still panic anytime a parse fails, but add this friendlier way of displaying the error beforehand. This is really ugly and hacky but easiest to implement and still gives the user the info they need to locate the issue.
* Make Parse::parse return an Option<Self>. Not really sure about the implications of this one. Again, parsing and syntax extensions is really not my area of expertise.

I think I can implement any of the 3 myself, but would definitely appreciate a bit of insight beforehand.
Benchmarks don't currently support `before_each` and `after_each`. That's somewhat surprising to users of the crate. My issue with just adding it like for tests is that `bench` takes an argument (the benchmarker that you call `iter` on). So with the current setup you could then refer to this argument in the before and after blocks as they're essentially just copied into the `bench` scope!

That to me is even weirder and could potentially produce even more surprises than just not having before and after at all. What I'm thinking of doing instead is the following:

``` rust
describe! a_benchmark {

  setup {
    // some setup code
  }

  bench "my benchmark" {
    // The code you want to run in the actual benchmark
  }

  teardown {
    // Some cleanup code
  }
}
```

This would then transform into the following code:

``` rust
#[bench]
fn my_benchmark(b: &mut Bencher) {
  // some setup code
  b.iter(|| {
    // The code you want to run in the actual benchmark
  })
  // Some cleanup code
}
```

This would then mean that we could get rid of the argument to `bench` and do all the plumbing for you. I'm not convinced if this is really the right way to do it though as it would require you to have the `setup` there always even if you just write one benchmark.

I'll mull it over some more and maybe try implementing it.

When using stainless to write tests for a library it seems to be necessary to run the tests via `cargo test --lib` (see #61). This is now documented but it would be nice to figure out why this is happening and if it is possible to "fix" it.
