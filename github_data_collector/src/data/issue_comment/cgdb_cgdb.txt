This branch adds a Travis CI file (`.travis.yml`) to automatically verify the build status of cgdb.
I love cgdb, I have previously used it with android gdb etc. I was wondering if I can use cgdb with `-d 'python -m ipdb'`.
By default cgdb embeds the build date which makes it impossible to
reproduce cgdb. Use SOURCE_DATE_EPOCH when available to make cgdb
reproducible

Motivation: https://reproducible-builds.org
This patch fixes issue #211. I just ran into it when I updated to gdb  8.3 

GDB 8.3 (maybe older ones too, but I just noticed it),
has a problem with the code that produces annotations.

Inside gdb, the following code produces prompt annotation:

handle_line_of_input
  if (from_tty && annotation_level > 1)
    {
      printf_unfiltered (("\n\032\032post-"));
      puts_unfiltered (annotation_suffix);
      printf_unfiltered (("\n"));
    }

If gdb is launched without "set pagination off", the code
above produces out of order output which looks like this:

\r\nprompt\032\032post-\r\n

instead of

032\032post-prompt\r\n

this causes cgdb's parser to barf, and garbled text to appear
on cgdb's terminal:

(gdb)

prompt^Z^Zpost-
(gdb)

The fix is to launch gdb with "set pagination off" flag.

This patch implements this.

Hello!

When I use cgdb, it always creates a `~/.cgdb` directory directly under my home directory. 
There is no way to configure *where* cgdb puts this folder; it's hardcoded in to the application. 

Many applications follow XDG guidelines, putting their config/data directories in locations specified by the `XDG_CONFIG_HOME` and `XDG_DATA_HOME` environment variables (defaulting to `~/.config` and `~/.local/share`, respectively). Other applications use their own environment variables: GPG uses `GNUPGHOME`, etc.

I thought it would be nice if cgdb could do something similar, perhaps using the contents of envvar `CGDB_DIR`, then defaulting to '~/.cgdb' in order to not break existing behavior. I'm working on implementing this myself, and found myself wondering if there was any interest to get this feature into cgdb proper. Do you have any thoughts?

Apologies if this is the wrong place to discuss an issue; this is my first time trying to push code upstream. `CONTRIBUTING.md` indicated I should discuss the issues with the active maintainers, so I thought I might do that here. 
It seems modern GDBs use color by default.  CGDB doesn't seem to be interpreting the escape codes, and they pollute anything in the debug window.  This is an annoyance, but it really breaks down when trying to open a new file.  Since the filenames themselves also have escape codes embedded in them, cgdb cannot open a file once it has been navigated to.  I tried:

`:set debugwincolor`

But that didn't seem to change the outcome for me.

I worked around this by just telling GDB to not use color.  I put the following in my .gdbinit file:

`set style enabled off`

Is there a more proper way to work with newer GDB?  Is there a way maybe cgdb can turn off color when invoking gdb, rather than globally turn it off (I usually only use GDB through CGDB but maybe not all users do, and wish to have color when running GDB plain).

Is there a plan to have CGDB interpret GDBs escape codes?
Hi, 

Do you have any plan to add the tty window back? Imperfect feature is better than nothing.  

This feature is very useful for me, and is the only reason I stick to 0.6.8

I often open two panes in tmux, and run cgdb in both panes to compare different behaviour of two revisions. The debug info is printed to tty.  Then I can compare the output in tty window side by side.

I could open two more tmux panes in the same window and attach cgdb to running program. The problem is that I often need to restart program to reach next checkpoint.  
Without tty window, I need to 
  - Close two debuggees
  - Launch two debuggees
  - Attach to two debuggees
  - Restore previous breakpoints and run

With the tty window, I only need to type "run" in both tty window (With tmux synchronized-panes turned on, I only need to type 'run' once). 

![cgdb_tty_tmux](https://user-images.githubusercontent.com/5145579/63151704-adebe700-c03c-11e9-8fb5-cfdc3fcb0933.png)

Thanks,
Yao
I was trying to package from latest git:

    2019-01-13 0b92e3a honggyu.kp build: Fix a build error by adding -std=c++11

    $ gcc --version
    gcc (GCC) 7.4.0

The compilation fails. This related to -std=c++11, see

https://stackoverflow.com/questions/15944051/error-fdopen-was-not-declared-found-with-g-4-that-compiled-with-g3

I got somewhere by sprinkling:

    #ifdef __STRICT_ANSI__
    #undef __STRICT_ANSI__
    #include <stdio.h>
    #endif

But ultimately it failed on:

     adalexer.cpp

Errors like:

    rline.cpp:94:20: error: 'fdopen' was not declared in this scope
	 rline->input = fdopen(slavefd, "r");
			^~~~~~


Consider this program:
```
#include <stdio.h>
#include <unistd.h>

int main(void) {
    int pid = fork();

    if (pid == -1) {
        puts("Oops, failed");
    } else if (pid == 0) {
        puts("Hello from child");
    } else {
        puts("Hello from parent");
    }

    return 0;
}
```
if I open it in cgdb with:
```
break 10
set follow-fork-mode child
run
```
The first time I get:
```
Hello from parent
Thread 2.1 "main" received signal SIGHUP, Hangup.
```
If I rerun it, it works perfectly and the breakpoint gets hit. 

Can anyone reproduce this?