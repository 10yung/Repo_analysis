Updates the requirements on [glutin](https://github.com/rust-windowing/glutin) to permit the latest version.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href="https://github.com/rust-windowing/glutin/blob/master/CHANGELOG.md">glutin's changelog</a>.</em></p>
<blockquote>
<h1>Version 0.22.0 (2020-1-07)</h1>
<ul>
<li>Updated winit dependency to 0.20.0. See <a href="https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#0200-2020-01-05">winit's CHANGELOG</a> for more info.</li>
</ul>
<h1>Version 0.22.0-alpha6 (2020-1-05)</h1>
<ul>
<li>Fixed dependencies so wrong winit version is not used.</li>
<li>On X11, got rid of mistaken <code>XRenderFindVisualFormat</code> call so that glutin doesn't ignore configs that lack a <code>XRenderPictFormat</code>.</li>
<li>On iOS, fixed not linking against OpenGLES.framework.</li>
<li>On X11, fixed VSync not being disabled when requested.</li>
</ul>
<h1>Version 0.22.0-alpha5 (2019-11-14)</h1>
<ul>
<li>Fixed build issue.</li>
</ul>
<h1>Version 0.22.0-alpha4 (2019-11-10)</h1>
<ul>
<li>Update winit dependency to 0.20.0-alpha4. See <a href="https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#0200-alpha-4">winit's CHANGELOG</a> for more info.</li>
<li>Added an xcode example for building for iOS.</li>
<li>Made using sRGB the default.</li>
<li>MacOSX's raw_handle trait method  now returns the CGLContext object.</li>
</ul>
<h1>Version 0.22.0-alpha3 (2019-8-15)</h1>
<ul>
<li>Switched from needing a <code>EventLoop</code> to a <code>EventLoopWindowTarget</code></li>
</ul>
<h1>Version 0.22.0-alpha2 (2019-08-15)</h1>
<ul>
<li>Fixed attribute handling for sRGB in WGL.</li>
<li>Fixed VSync being always enabled on EGL.</li>
</ul>
<h1>Version 0.20.1 (2019-08-08)</h1>
<ul>
<li><strong>Backport:</strong> We now load <code>libGL.so</code> instead of <code>libGLX.so</code>.</li>
</ul>
<h1>Version 0.22.0-alpha1 (2019-06-21)</h1>
<ul>
<li>Update winit dependency to 0.20.0-alpha1. See <a href="https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#0200-alpha-1">winit's CHANGELOG</a> for more info.</li>
</ul>
<h1>Version 0.21.0 (2019-04-20)</h1>
<ul>
<li>Bumped dependencies, fixed docs.</li>
</ul>
<h1>Version 0.21.0-rc3 (2019-04-13)</h1>
<ul>
<li>Bumped dependencies.</li>
</ul>
<h1>Version 0.21.0-rc2 (2019-04-08)</h1>
<ul>
<li><strong>Breaking</strong>: Removed <code>DisplayLost</code> variant to <code>ContextError</code>.</li>
</ul>
</tr></table> ... (truncated)
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href="https://github.com/rust-windowing/glutin/commits">compare view</a></li>
</ul>
</details>
<br />


Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
Dependabot will **not** automatically merge this PR because this dependency is pre-1.0.0.

[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
Some old versions of `gl_generator` have dependencies specified with `"*"` version requirement (`rust-xml = "*", xml-rs = "*", khronos_api = "*", gl_common = "*"`, etc.).

Crates with such vague dependency versions became unusable, because `*` allows picking too-new semver-incompatible dependencies.
It also breaks Cargo's `minimal-versions` feature, because `*` requirement allows picking very very old dependencies
that aren't compatible with Rust 1.0.

Because these old versions of `gl_generator` are unusable and cause problems for Cargo, I suggest yanking them:

```bash
cargo yank --vers 0.0.1
cargo yank --vers 0.0.2
cargo yank --vers 0.0.3
```
First of all, thanks for the effort to maintain `gl-rs`!

I've already used `gl-rs` with `stdweb` and it works great. But now I am developing a project using `wasm-bindgen` and `web-sys`. I can directly access `WebGL` bindings through `web-sys`, but I want to use an `OpenGL` abstraction make the project portable to other platforms.

With that said, I would like to know: What is the state of `gl-rs` with `wasm-bindgen` + `web-sys`? I couldn't find any resource on it.
I've removed the changelogs from the READMEs, as they were outdated and incomplete. I'm open to creating CHANGELOG.md files for the crates if required, but I haven't had the motivation to go trawling through all the commit history... Other than this, commit https://github.com/brendanzab/gl-rs/commit/0c2ff1cfad8cfc5fd5f750c15d29ed40a922771a fixes #489.

Commit https://github.com/brendanzab/gl-rs/commit/f54736bbca87c048093721b95c0d9044941c50a0 should fix #488. 

Some of the fixed warnings are only shown in beta and nightly. Fixing them increases the MSRV, but as Travis only tests the stable, beta and nightly channels, I assume that this isn't a problem?
I'm seeing this warning on rust nightly:

```
warning: variable does not need to be mutable
 --> out/gl_bindings.rs:9:23
  |
9 |         fn metaloadfn(mut loadfn: &mut FnMut(&str) -> *const __gl_imports::raw::c_void,
  |                       ----^^^^^^
  |                       |
  |                       help: remove this `mut`
  |
  = note: #[warn(unused_mut)] on by default
```

Is this necessary or am I doing something wrong? Is there a way I can configure it to not have this warning in my `build.rs`?
The world is a ball of sadness, and `glXGetProcAddress` never returns null. See point 3 in this page: https://dri.freedesktop.org/wiki/glXGetProcAddressNeverReturnsNULL/

As far as I can tell, `gl::__::is_loaded()` checks if the loading function returned null or not. As the X11 impl never returns null... `is_loaded` doesn't work as intended :'(

To be honest, I don't really care if this is somehow fixed or not (who actually uses `is_loaded` anyway), I'd be okay with a note on the readme or docs.rs front page saying "be careful with X11 and `is_loaded`, it probably doesn't do what you want".

---

Loading every function with the string `"wow, this isn't the right string"` returns some valid pointers :rainbow:

```rust
extern crate gl;
extern crate sdl2;

fn main() {
    let sdl = sdl2::init().expect("SDL failed to init");
    let video = sdl.video().expect("SDL does not have video");

    let window = video.window("test", 500, 500).opengl().build().expect("SDL window didn't build");
    let _gl_context = window
        .gl_create_context()
        .expect("Failed to create OpenGL context");

    gl::load_with(|_| video.gl_get_proc_address("wow, this isn't the right string") as *const _);

    if gl::GetError::is_loaded() {
        // Prints "Loaded." :sparkles:
        println!("Loaded.");
    } else {
        println!("Not loaded.");
    }

    unsafe {
        // Prints some random hecking number that I assume is uninitialized memory.
        println!("{}", gl::GetError());
    }
}
```

---

Non-minimized context that this bug report is from: https://twitter.com/khyperia/status/1133584256834215937
Currently readmes state to use versions 0.5 and 0.6. Crate readmes are also missing up-to-date changelog.
Updates the requirements on [webidl](https://github.com/sgodwincs/webidl-rs) to permit the latest version.
<details>
<summary>Changelog</summary>

*Sourced from [webidl's changelog](https://github.com/sgodwincs/webidl-rs/blob/master/RELEASES.md).*

> # 0.9.0
> 
> - Update `lalrpop` to `0.17.0`
> - Fix some new clippy warnings by removing useless `Box`ing
> 
> # 0.8.0
> 
>  - Update `lalrpop` to `0.16.0` to reduce package size.
> 
> # 0.7.0
> 
>  - Fixed bug where integer literals outside the range of `i64` could not be represented ([#15](https://github-redirect.dependabot.com/sgodwincs/webidl-rs/pull/15) 
> 
> # 0.6.0
> 
>  - Fixed bug where the generated parser would still be in the source directory ([#13](https://github-redirect.dependabot.com/sgodwincs/webidl-rs/pull/13))
>  - Add back support for parsing `implements` statement for backwards compatibility with older WebIDLs
>  - Add back support for parsing `legacycaller` in special operations for backwards compatibility with older WebIDLs
>  - Update `lalrpop` to `0.15.1`. Version `0.15.0` cannot be used as it breaks with usage of `include!`
>  - Remove unnecessary `Parser` struct, since it does not do anything. Instead of doing
> 
>  ```
>  let parser = Parser::new();
>  let result = parser.parse_string(...);
>  ```
> 
>  You can now simply do
> 
>  ```
>  let result = parse_string(...);
>  ```
> 
> # 0.5.0
> 
>  - Reduced package size by excluding `mozilla_webidls.zip` and upgrading `lalrpop` to `0.14.0` ([#12](https://github-redirect.dependabot.com/sgodwincs/webidl-rs/pull/12))
</details>
<details>
<summary>Commits</summary>

- See full diff in [compare view](https://github.com/sgodwincs/webidl-rs/commits)
</details>
<br />

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
Dependabot will **not** automatically merge this PR because this dependency is pre-1.0.0.

[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Pull request limits (per update run and/or open at any time)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)

Finally, you can contact us by mentioning @dependabot.

</details>
At least for me, using `gl::UniformMatrix4dv` supplies the shader with a matrix filled with zeros, whereas `gl::UniformMatrix4fv` works as expected. I ran the exact same code to test both functions, the only difference was that I replaced the former with the latter, and I cast each element of my matrix buffer to an `f32`. Has anyone else had this happen to them, or would anyone like to test on their own box? If needed, I could possibly come up with an example to illustrate.
Hi,

These bindings seem to be missing the two constants `gl::LUMINANCE` and `gl::LUMINANCE_ALPHA`.
I'm finding no reference to them on [the docs.rs page](https://docs.rs/gl/latest/gl/) and they don't seem to be working in my project.
From what I can tell, these constants have been in OpenGL since at least OpenGL 1.1, so I doubt it's a version problem.

Have a nice day !