I just noticed that the [MIT template](https://opensource.org/licenses/MIT)  starts with:

> Copyright  `<YEAR> <COPYRIGHT HOLDER>`
> 
> Permission is hereby granted, free of charge, to any person 
> [...]
> so, subject to the following conditions:
> 
> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

Now i understand why our legal team pointed out that a copyright notice is missing. I assume that the values for `<YEAR>` and `<COPYRIGHT HOLDER>` must be filled - see [102](https://github.com/desandro/imagesloaded/issues/102#issuecomment-555594795)
I came across the need to load images from an object tag. After not finding a good enough solution elsewhere, I thought it would be a nice addition to the plugin. For this to work there are two requirements:
1) There has to be an option `objects: true` set in the imagesLoaded call,
2) The object tags need to have `type="image/***"` attribute specified (to avoid unnecessary loading of objects).

There might be more issues that need to be covered if this is to be merged, however I thought I'd share in case anyone else needs that functionality. Any thoughts welcome.

Hi, great plugin, been using it for ages, but on a specific use case right now, I need to know certain behaviours to solve a specific problem, but reading your documentation, you don't say much about the internal mechanisms.

I've just experienced an issue, I've built a lazy-loading image Vue component for a specific use case, and I used imagesLoaded to detect when the image has loaded so that dimensions can be retrieved and manipulations can take place. I, when the load is triggered, pass the `<img>` element directly to `imagesLoaded(el, callback)`. However, in a strange twist, the specific listeners on each `<img>` element fire when an image that's inside the Image Library pop-up component within the app is loaded, even after the specific `<img>` passed to the `imagesLoaded` function has loaded. The images loaded inside the Image library popup are different variations of the same images with a different resolution (and different URLs). Perhaps it's some odd Vue quirk, where it re-renders the components on the page when ImageLibrary component is shown and loads it's own images. But it's certain that the components are not destroyed and re-created when this happens, the `imagesLoaded` event simply fires again for the already loaded image, when a different image is loaded in a specific context.

It isn't mentioned in the docs that you can pass the image element, the examples you give are all container elements, not individual `<img>` elements. 

You did say, in the `imagesLoaded` function definition in your docs:
> `elem` Element, NodeList, Array, or Selector String

But, it doesn't say HTMLImageElement (even though it derives from Element).

I'm thinking about changing the implementation so that I have an external system notifying the `<lazy-load>` components when an image has loaded, and the `<lazy-load>` component can ask the external image manager to be told when the given image is loaded. 

But, you don't say if it knows new `<img>` elements are added, or if I'd have to remove and re-attach the event in the instance of new images being inserted, in order to detect them.

And on events, if I just do `imagesLoaded(img, callback)`, does the event listener remove itself after load? In can infer that it doesn't from the problem posed above, but the point is I had to infer it from observations.

It'd be really great of there was a nice, full explanation of the library's behaviours and the specifics of how it works. I understand this takes a little bit of time, but it's the point that most documentation falls over on. All of the examples are well and good, but examples (and much more) can be derived from a good explanation of behaviour, removing the need for all except the most rudimentary surface examples (for those who quickly Googled a solution and copied-and-pasted it).
Hi there, have been using this for ages, thanks so much! For a current project, I need to detect when images inside an SVG are loaded:

```html
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <g>
    <image class="lazyload" xlink:href="./images/image-1.jpg" x="0" y="0" width="100%" height="100%" preserveAspectRatio="xMidYMid slice"></image>
  </g>
  <g clip-path="url(#ic__mask)">
    <image class="lazyload" xlink:href="./images/image-1.jpg" x="0" y="0" width="100%" height="100%" preserveAspectRatio="xMidYMid slice"></image>
  </g>
</svg>
```
...would be a very nice thing if you would add support for images with `xlink:href` in imagesloaded :)
I hope my question was clear...by default it detects background images along with <img>.
Is it possible to detect only when bg images are loaded?
Is it possible check this?
Hello,

thanks for the great piece of the code of yours :100: 

Though I found `imagesloaded`, while in the background mode does not detect if the image is loaded. Either it is or it is not, or even when the element does not have any background, the callback function signals in all the cases that the bg is loaded.

[Here](https://codepen.io/Val-12345/pen/mpVwNg) is the reduced test case on CodePen based on your recommended example.

Can you please kindly check and fix this or tell if I do something wrong?

Thanks again,
Val
jQuery, prior to v1.5, didn’t support deferred objects but some very old
CMS templates (although a minority) still rely on that version.

We recently ran into such a case where one of the Shopify’s templates used jQuery 1.4.2. When we added our custom gallery script which uses imagesloaded library and doesn’t depend on jQuery at all (vanilla JS), it resulted in an error when imagesloaded tried to create a Deferred object.

This pull request fixes this issue.
It appears that images loaded through input type="image" elements are not considered by this library.