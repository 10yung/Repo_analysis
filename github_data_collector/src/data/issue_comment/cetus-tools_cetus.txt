存在问题列表：
1、fast stream问题 ××××××××××××××××
已经解决

2、主从延迟检测 ××××××××××
写频繁的场合，可能写不进去，导致cetus主从延迟检测出问题，而实际MySQL主从延迟并没有问题
原因是用户应用的存储过程都路由给主库，cpu 100%，导致主从检测失败

3、MySQL 8客户端无法访问cetus，报：client charset is not supported
需要支持所有字符集

4、cetus还不能采用MySQL新的认证方式访问MySQL 8

5、cetus在centos 7.6，内核3.10，gcc为4.8.5版本，第一次没有问题，而第二次出现
      No rule to make target ‘/usr/local/lib/libgnutls.a',needed by 'src/libmysql-chassis.so'
      不确定是否跟安装目录和环境变量有关系

6、prepare语句可能还有问题

7、从库如果关闭，可以重新连接其它后端，从而对用户屏蔽后端错误

8、一对多连接，大量结果集数据合并，来不及写导致内存暴增

9、支持用户选择访问某一个从库

10、如果conf默认配置用户名在user.conf不存在，则cetus不会自动退出，导致了启动烦恼

11、去除读写分离版本中的proxy_c_read_query_result部分代码：
case INJ_ID_CHANGE_DB下面的设置default db已经没有存在的意义，早就在前面设置了

12、sum/count不支持（哪怕是不同的字段），需要在文档中说明一下

13、集成多个独立的主从

14、同一个vdb id情况下，不同属性作为分片键是不支持的，这方面文档可能没有说清楚

15、如果主库设置readonly，会导致主从检测的语句写不进去？

16、远程配置库，更改字符集成utf8mb4，查看是否生效？
       是因为cetus返回给客户端的greet数据包里面字符集为utf8，应该改成配置文件中的默认字符集
一般可以在github 的release 页面中， 提供 generic 版本， rpm版本，deb版本等等
我们的cetus，慢日志非常庞大，没有自动切割
![image](https://user-images.githubusercontent.com/29979847/58617113-e4458000-82f1-11e9-8142-f1f0704d3070.png)


然后，使用pt_query进行日志分析，发现大量报错
![image](https://user-images.githubusercontent.com/29979847/58617067-c0823a00-82f1-11e9-8a07-e1ee6773fe7b.png)

结果集超大时，且分库数量较多时，可能导致cetus处理速度跟不上网络速度，即使采用fast stream和tcp stream，消耗内存都占很大
按照文档cetus+mha搭建好了，相关都替换了，故障测试，当主库连接不上是，mha会自动切换主库。cetus默认也会自动切换主库吗？还是需要自己写一个脚本把脚本放在mha的master_ip_failover_script上执行在cetus-admin中修改backends来实现对主库的切换的脚本？
我默认是cetus会自动切换主库，不需要自己写脚本，但是实际测试过程中，把主库停止后，backends表显示主库状态是up，倒是从库全部down了。
停止主库前，如下图：
![image](https://user-images.githubusercontent.com/12652827/58367007-5beb6780-7f0c-11e9-9013-92ab9089a764.png)
停止主库后，如下图：
![image](https://user-images.githubusercontent.com/12652827/58367015-702f6480-7f0c-11e9-9d0b-ecb8e7e361c5.png)
cetus里日志里也没有看到任何切换主库的日志记录。一直就是报连接不上原主库：
![image](https://user-images.githubusercontent.com/12652827/58367043-c2708580-7f0c-11e9-9665-2a8446c3550a.png)
请问，这问题出在哪里？是cetus不会自动切换主库，还是我哪里的配置出问题了，还是我上面说的这个切换需要自己写脚本，在cetus-admin中修改backends来实现对主库的切换？
请问docker镜像方式除了root用户启动注意点，还有其他的么，发现几个mysql没启动成功

这方面需要找到原因，并解决。
cetus已经不需要libevent了
要点：binlog里面的xid如果有@符号，则截取前面的xid为同一个分布式事务的xid，以兼容分表情况下的分布式事务。

同时配置文件在配置库的场景下，目前还没有实现

btw，xa恢复工具由于没有去分析cetus的xa log，会遇到无法决策回滚还是提交的问题
我们推荐在线上环境部署一个新的cetus,利用负载均衡器的流量分配,分配极小一部分流量到这个新的cetus,用以内存泄漏检测

具体这个cetus如何操作,请看下面四个步骤:
1、在源代码主目录下的CMakeLists.txt文件，注释掉tcmalloc，然后重新编译(rm CMakeCache.txt, make clean, 根据条件configure,make,make install)
![default](https://user-images.githubusercontent.com/1127759/52633092-4ffc0c80-2efe-11e9-92b8-6ff76abe5941.png)

2、设置运行环境变量
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/xxx/cetus安装目录/lib/


3、修改配置文件
![default](https://user-images.githubusercontent.com/1127759/52618299-6643a180-2ed9-11e9-8e51-3dab3af6c494.png)

设置daemon为false

![default](https://user-images.githubusercontent.com/1127759/52617856-1fa17780-2ed8-11e9-9270-0d6994a547db.png)

max-open-files修改成1024及其以下就可以，valgrind不支持1024以上设置

4、具体运行

![default](https://user-images.githubusercontent.com/1127759/52618058-b40bda00-2ed8-11e9-9e4e-1cb2cc36485a.png)

持续运行一段时间,如果看到内存飚升明显,则终止运行就可以,valgrind会把内存检测结果输出到图中的memcheck.txt文件中去，发送到wangbin5790#163.com (#用@代替）
