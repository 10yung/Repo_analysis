Hey ðŸ‘‹ 

This repo seems not maintained anymore, are you aware of an updated fork?
Fixed a couple compilation warnings that occurred under Xcode 9 (default warning settings) & Swift >= 3.2

I believe those were the issues referenced at https://github.com/slazyk/Observable-Swift/issues/36

- Redefined `public ValueType` as to not use `internal` types
- Redefined `value` as to use `ValueType`
- Removed conformance of `O1` `O2` and `O3` to `AnyObservable` as this was redundant with `ObservableChainingProxy` type requirements 

@slazyk Please take a look and submit your feedback

Currently when copying values (let's say between models), we always need to access them.

Example:
```swift
model.name.value = diffModel.name.value
model.name <- diffModel.name.value

// or shorthand
model.name <- diffModel.name^
```

The improvement allow use to do this:
```swift
model.name <- diffModel.name
```

There is no need to access the value of the Observable and since we use `<-` operator this action seems to be also pretty clear (unlike `=`).
get warning when use with xcode 8.3.1
A tiny change to allow others just to copy-paste the pod definition.

Issue #20.

Hi there, I ran into unsurmountable issues getting the framework running where a name clash happens with any class within the module when importing as a framework (ie: Cocoapods). For example, we have an Event class (since our domain models everyday events) and Swift gets tripped up on being able to specify that an event is an Observable.Event as opposed to your own Event.

The reason for this is that both the module is called Observable as well as a framework class exists called Observable. This is apparently an anti-practice in Swift to have the module use the same name as any of its existing classes. Event typealiasing gets tripped up by this (ie: ""typealias ObservableEvent = Observables.Event"")

PROPOSAL: Rename the framework to "Observables" (or something similar). Unfortunately I think this is the only way out of this (without renaming the Observable class itself)

I have made all the changes required on the fork here: https://github.com/slazyk/Observable-Swift/pull/21. Would appreciate you accepting this and renaming the project (Cocoapod will likely require a new pod, GitHub has a rename option at the top of the project Settings page). I know it's not the nicest thing to rename the project but you really want people to be able to integrate your project seamlessly using Cocoapods etc and not just copying the files in, and it'll solve any problems like this going forward. So hopefully someone else doesn't waste a full day chasing this down as I did.   :)

Cheers!

Renamed module to "Observables" to get around unsurmountable issues with making the module work when there is a name clash with any class within the module when importing it as a framework (ie: Cocoapods). For example, if you have an Event class in your own project (ie: your domain models everyday events) Swift gets tripped up on being able to specify that an event is an Observable.Event as opposed to your own Event.

The reason for this is that both the framework module is called Observable as well contains a class called Observable. It's apparently an anti-practice in Swift to have the module use the same name as any of its existing classes. Event type aliasing gets tripped up by this (ie: "typealias ObservableEvent = Observables.Event" --> compiler can't distinguish between Observable the class and Observable the module, despite the "import Observable" declaration)

Thus, the solution was to rename the framework to "Observables" (or something similar). Unfortunately this is the only reliable way out of this (without renaming the Observable class itself). Alternatives would have been to rename the Observable class (not worth it) or giving up framework integration and copying files directly (not using Cocoapods).

What do you think about adding a method like `Event.remove(owner owner:AnyObject)`? It would eliminate the need to store subscriptions in an instance var in the common case. I can't implement it in an extension, because the list of subscriptions is marked `internal`.

It would be useful to somehow getting the first value of an Observable immediately after adding a handler. Say I have a View that updates a textLabel based on the corresponding ViewModel's name property. 

``` swift

class MyViewModel {
  var name = Observable("test")
}

class MyView: UIView {
  @IBOutlet var nameLabel: UILabel!

  func configureWithViewModel(viewModel: MyViewModel) {
    nameLabel.text = viewModel.name.value

    viewModel.name.afterChange += { [unowned self] in self.nameLabel.text = $1 }
  }
}
```

It's a bit cumbersome having to repeat myself about how the value of a viewModel affects changes in the view. Is there another way to do this or is it something that could be implemented?
