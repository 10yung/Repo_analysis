It would be nice to be able to create PropertySpecs that do not have types declared and are auto-inferred by Kotlin, e.g. `val someProperty = initialiser` over `val someProperty: <type> = initialiser`.

Right now, PropertySpec.Builder requires a Type of some sort and PropertySpec.emit() also always emits the type info. 
We track a number of issues that stem from the fact that introspecting Kotlin code through mirrors or reflection is unreliable (#86, #236, #828). Now that there's proper support for processing `@Metadata`, existing API that has been ported from JavaPoet needs to be deprecated and eventually removed in 2.0. We might need to look into providing more documentation or migration recipes.
`A$B` is a valid Java identifier, but not a valid Kotlin type name.

`escapeIfNotJavaIdentifier().escapeIfKeyword().failIfEscapeInvalid()`
none of these method respond to '$'.

`TypeSpec.classBuilder("A\$B").build()` build an invalid type name!
``TypeSpec.classBuilder("`A\$B`").build()`` also build an invalid type name!

We handle this for functions and can handle them for properties in a similar way.
I want to add a nullable property to an enum. This doesn't currently work using the format function becuase the arg elements are not declared as nullable.

```kotlin
TypeSpec.enumBuilder("Sample")
  .primaryConstructor(
    FunSpec.constructorBuilder()
      .addParameter(
        ParameterSpec.builder(
          "myNullableString",
          String::class.asTypeName().copy(nullable = true)
        ).build()
      )
      .build()
  )
  .addEnumConstant(
    name = "Rock",
    typeSpec = TypeSpec.anonymousClassBuilder()
      .addSuperclassConstructorParameter("%S", "Hello")
      .build()
  )
  .addEnumConstant(
    name = "Paper",
    typeSpec = TypeSpec.anonymousClassBuilder()
      .addSuperclassConstructorParameter("%S", null) // <-- this doesn't compile
      .addSuperclassConstructorParameter(CodeBlock.of("%S", null)) // <-- workaround
      .build()
  )
  .build()
```


Resolves #484

Unclear if KotlinPoet should ship with some pre-builts, but this is a good starting point at least
When defining a `Map<String,String>` with Kotlin Poet, some of the string values are very long and there isn't a default or way to wrap them at 80 characters in to multiple strings concatenated with `+` on different lines as an IDE does.

Current functionality
```kotlin
val myMap = mapOf(
  "key1" to "super long text that doesn't wrap, it keeps going and going and going and going and going and going and going and going..."
)
```

Desired functionality
```kotlin
val myMap = mapOf(
  "key1" to "super long text that doesn't wrap, it keeps going " +
      "and going and going and going and going and going and" +
      " going and going..."
)
```
This is kotlin's equivalent of a `Type` and can also just be a regular class. The current `KType.asTypeName()` is in ParameterizedTypeName.kt though, and should probably be generified and moved to TypeName.kt
The method `jvmModifiers` in `FunSpec` breaks the chaining by not returning the `Builder`. There is a similar method in `ParameterSpec` which does return the `Builder`. 

This will be a breaking change so it will have to wait till 2.x. 