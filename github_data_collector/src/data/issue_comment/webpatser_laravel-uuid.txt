add default method register() fixed laravel 5.8
Validate-function returns true with parameter value "20191015_100_051". The result is the same with any given parameter of length 16. Tested with version 3 on Laravel 5.5.
Hi all.

I have encountered error after adding ```UuidServiceProvider::class``` in providers and ```Uuid::class``` in alias of ```config/app.php```,
 and running config cache with ```php artisan config:cache```.

The error is as below:
```
[Symfony\Component\Debug\Exception\FatalErrorException]                      
  Class Webpatser\Uuid\UuidServiceProvider contains 1 abstract method and mus  
  t therefore be declared abstract or implement the remaining methods (Illumi  
  nate\Support\ServiceProvider::register)
```

As I look into the UuidServiceProvider class, looks like the register method is missing which is required in Laravel 5.2 ```ServiceProvider```.
It seems counter-intuitive that it is not possible to generate a specific version of a UUID using the `Uuid::VERSION_*` constants e.g. `Uuid::generate(Uuid::VERSION_4);`. As this library currently supports PHP >= 7.0.0 the use of private visibility constants isn't possible without a major version bump.

One solution is making these constants private (possibly static) properties. This would remove them from the public scope and avoid any confusion around their use.

The other possible solution is to add them as cases in the switch statement that determines which type of UUID to generate:

```php
switch ((int)$ver) {
    // [...]
    case 4:
    case self::VERSION_4:
        return new static(static::mintRand());
    // [...]
```

Thoughts?
I get strange results when using `Uuid::import` on a uuid returned from an SQL Server `uniqueidentifier` filled by the SQL default `newsequentialid()` like this:

```
>>> $uid = Webpatser\Uuid\Uuid::import(App\Deployment::first()->id)
=> Webpatser\Uuid\Uuid {#742}

>>> dd($uid)
Webpatser\Uuid\Uuid {#742
  #bytes: b"""
    k\x07[‚ìD\x11å€Ü\x00\x15]\n
    ¼T
    """
  #hex: null
  #string: "6b075b82-ec44-11e5-80dc-00155d0abc54"
  #urn: null
  #version: null
  #variant: null
  #node: null
  #time: null
}

>>> App\Deployment::find($uid->string)
=> null

```

The last bit should have returned the model, from which I previously got the uuid.
The actual uuid as I see it in SQL Server Management Studio looks like this though:

`SQL: 825B076B-44EC-E511-80DC-00155D0ABC54`
`PHP: 6B075B82-EC44-11E5-80DC-00155D0ABC54`

The first two blocks seem to be in reversed order.

When using the first uuid I can find the model as expected:

```
>>> App\Deployment::find('825B076B-44EC-E511-80DC-00155D0ABC54')
=> App\Deployment {#734}
```

Am I missing something here?
