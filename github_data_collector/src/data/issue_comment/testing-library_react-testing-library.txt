<!--

* Please fill out this template with all the relevant information so we can
  understand what's going on and fix the issue. We appreciate bugs filed and PRs
  submitted!

* If your issue is regarding one of the query APIs (`getByText`,
  `getByLabelText`, etc), then please file it on the `dom-testing-library`
  repository instead. If you file it here it will be closed. Thanks :)

* Please make sure that you are familiar with and follow the Code of Conduct for
  this project (found in the CODE_OF_CONDUCT.md file).

We'll probably ask you to submit the fix (after giving some direction). If
you've never done that before, that's great! Check this free short video
tutorial to learn how: http://kcd.im/pull-request

-->
Not sure if this is a bug or by design but thought i'd post here to make sure either way.  I was asked if its possible to ensure that preventDefault was called using a mock.

- `react-testing-library` version: latest
- `react` version: latest
- `node` version: 12
- `npm` (or `yarn`) version: 6

### Relevant code or config:

```jsx
import React from "react";
import { render, fireEvent } from "@testing-library/react";

it("should prevent default on mousedown", () => {
  const { getByText } = render(
    <button
      onClick={e => {
        console.log("called");
        e.preventDefault();
      }}
    >
      click me
    </button>
  );

  const mockEvent = { preventDefault: jest.fn() };
  fireEvent.click(getByText("click me"), mockEvent);
  expect(mockEvent.preventDefault).toBeCalled();
});

```

<!--
If this is an issue with documentation, please file an issue on the docs repo:
https://github.com/alexkrolick/testing-library-docs
-->

### What you did:
tried to mock the preventDefault function (see above)
<!-- What you were doing -->

### What happened:
mock is not called
<!-- Please provide the full error message/screenshots/anything -->

### Reproduction:

<!--
If possible, please create a repository that reproduces the issue with the
minimal amount of code possible.

Template repo: https://github.com/alexkrolick/dom-testing-library-template

Or if you can, try to reproduce the issue in a Codesandbox. You can fork the one
here: https://codesandbox.io/s/5z6x4r7n0p
-->
https://codesandbox.io/s/laughing-kilby-6thj3
### Problem description:
not sure if it's a problem or by design, but is it possible to ensure that a button event calls preventDefault?
<!-- Please describe why the current behavior is a problem -->

### Suggested solution:

<!--
It's ok if you don't have a suggested solution, but it really helps if you could
do a little digging to come up with some suggestion of how to improve things.
-->

<!--

* Please fill out this template with all the relevant information so we can
  understand what's going on and fix the issue. We appreciate bugs filed and PRs
  submitted!

* If your issue is regarding one of the query APIs (`getByText`,
  `getByLabelText`, etc), then please file it on the `dom-testing-library`
  repository instead. If you file it here it will be closed. Thanks :)

* Please make sure that you are familiar with and follow the Code of Conduct for
  this project (found in the CODE_OF_CONDUCT.md file).

We'll probably ask you to submit the fix (after giving some direction). If
you've never done that before, that's great! Check this free short video
tutorial to learn how: http://kcd.im/pull-request

-->

- `react-testing-library` version:
- `react` version: 9.4.0
- `node` version: 12.9.1
- `npm` (or `yarn`) version: 1.19.1 (yarn)

### Relevant code or config:

This is how the MouseEvent is set up:
```tsx
const cell = document.createElement('td')
const tdClass = document.createAttribute('class')
tdClass.value = 'jexcel_selectall'
cell.setAttributeNode(tdClass)


const proxyHandler = {
  get: (obj, prop) => {
    if (prop === 'x') {
      return 95
    }
    if (prop === 'y') {
      return 278
    }
    // any other properties that need to be added
    if (prop === 'target') {
      return cell
    }
    return obj[prop]
  },
}

export const getMouseEvent = () => {
  const mouseClick = new MouseEvent('mousedown', { button: 0 })
  return new Proxy(mouseClick, proxyHandler)
}

```

And this is how I'm calling the event. I've also added an event listener to console.log `e` and `window.event`:

```tsx
function mouseTest(e) {
  console.log(e)
  console.log(window.event)
}
window.addEventListener('mousedown', mouseTest, false)
const mouseClick = getMouseEvent()
fireEvent(document.body.ownerDocument.defaultView, mouseClick)
```

### What you did:

I'm currently working on testing an application that uses Jexcel with React testing library. Jexcel essentially uses a HTML table with Javascript to set up an Excel-like interface -- for example, the styling for a selected cell is set up via a global `mousedown` event handler.

To set up a click on a specific cell, I've created a MouseEvent that mocks all the information that is used by the `mousedown` event handler in JExcel -- but when using this MouseEvent with `fireEvent()` on `document.body.ownerDocument.defaultView` (based on a comment I saw [here](https://github.com/testing-library/dom-testing-library/issues/159), I've noticed discrepancies in what `e` and `window.event` return.

### What happened:

Within a regular browser, both return the mousedown event with the appropriate div/element being the target (so if I click on a cell, the `<td>` cell is the target). However, because I have to specify the window using `document.body.ownerDocument.defaultView`, the mock MouseEvent I set up loses its information. `e` returns a basic MouseEvent, and `window.event` is `undefined`.

Is there a way to fire the MouseEvent without specifying a target s.t. the target within my mock MouseEvent does not change?
<!--

* Please fill out this template with all the relevant information so we can
  understand what's going on and fix the issue. We appreciate bugs filed and PRs
  submitted!

* If your issue is regarding one of the query APIs (`getByText`,
  `getByLabelText`, etc), then please file it on the `dom-testing-library`
  repository instead. If you file it here it will be closed. Thanks :)

* Please make sure that you are familiar with and follow the Code of Conduct for
  this project (found in the CODE_OF_CONDUCT.md file).

We'll probably ask you to submit the fix (after giving some direction). If
you've never done that before, that's great! Check this free short video
tutorial to learn how: http://kcd.im/pull-request

-->

- `react-testing-library` version: latest
- `react` version: latest
- `node` version: latest
- `npm` (or `yarn`) version: latest

### Relevant code or config:

```js
const { debug } = render(<div style={{ '--test': size }}>hello worlds</div>)
debug();
```

<!--
If this is an issue with documentation, please file an issue on the docs repo:
https://github.com/alexkrolick/testing-library-docs
-->

### What you did:

Test the above

### What happened:

CSS variables don't appear on the element (look in console from debug)

### Reproduction:

<!--
If possible, please create a repository that reproduces the issue with the
minimal amount of code possible.

Template repo: https://github.com/alexkrolick/dom-testing-library-template

Or if you can, try to reproduce the issue in a Codesandbox. You can fork the one
here: https://codesandbox.io/s/5z6x4r7n0p
-->

Run code above.

### Problem description:

<!-- Please describe why the current behavior is a problem -->

I expected the styles to be available like they would be in the browser - they aren't currently.

### Suggested solution:

<!--
It's ok if you don't have a suggested solution, but it really helps if you could
do a little digging to come up with some suggestion of how to improve things.
-->

ü§∑‚Äç‚ôÇ make them resolve? i'll have to dig into the code to see why they aren't there.

its more than likely related to https://github.com/jsdom/jsdom/issues/1895 - maybe theres nothing we can do right now :/ 
I'm trying to test a component in my project that uses [material-ui](http://material-ui.com/) [popover](https://material-ui.com/components/popover/#api), even kept the same code provided by the [documentation](https://material-ui.com/components/popover/#MouseOverPopover.js), the test should be very simple, and passes 100% coverage of the functions (`handlePopoverOpen` and `handlePopoverClose`) provided by lib:

![image](https://user-images.githubusercontent.com/13435355/71675894-a3b55580-2d5d-11ea-8f56-62acfe42cf27.png)

But the test that should detect if the popover content is missing from the component failed, I found that in the system, the behavior works as it should, follows a gif:

![in the browser](https://user-images.githubusercontent.com/13435355/71676381-e297db00-2d5e-11ea-99bd-e3066028e9f4.gif)

In the testing library debug, after mouseLeave the content still exists, as if popover did not behave as expected, follows a gif:

![debug](https://user-images.githubusercontent.com/13435355/71676062-fbec5780-2d5d-11ea-9c99-61c4772ef9f9.gif)

I don't know if this is a bug from the material-ui lib, testing-library lib, or my test error, I created an [issue in the repo of material-ui](https://github.com/mui-org/material-ui/issues/19059) with the same question/bug, [put the code in stackBlitz](https://stackblitz.com/edit/popover-github-issue), I think it is easier for anyone willing to judge downloading or checking the code.
<!--

Vote on feature requests by adding a üëç. This helps maintainers prioritize what
to work on.

* Please fill out this template with all the relevant information so we can
  understand what's going on and fix the issue. We appreciate bugs filed and PRs
  submitted!

* If you're issue is regarding one of the query APIs (`getByText`
  `getByLabelText`, etc), then please file it on the `dom-testing-library`
  repository instead. If you file it here it will be closed. Thanks :)

* Please make sure that you are familiar with and follow the Code of Conduct for
  this project (found in the CODE_OF_CONDUCT.md file).

It'd be great if after the discussion you're the one who submits the PR that
implements this feature. If you've never done that before, that's great! Check
this free short video tutorial to learn how: http://kcd.im/pull-request

-->

### Describe the feature you'd like:
Currently there is no documentation, recommendations or API's that I could find regarding testing components that are rendered in a server side context.
<!--
A clear and concise description of what you want to happen. Add any considered
drawbacks.
-->

### Suggested implementation:
<!-- Helpful but optional üòÄ -->

### Describe alternatives you've considered:
currently, I use the hack
```
/**
 * @jest-environment node
 */
import React from 'react'
import { renderToString } from 'react-dom/server'

const foo = () => <img src="bar.png"/>
describe('Server-side rendering', () => {
  it('renders on a server without crashing', () => {
    const foo = () => <img src="bar.png"/> 
    const renderOnServer = () =>
      renderToString(
        <main>
              <foo/>
        </main>,
      )
    expect(renderOnServer).not.toThrow()
  })

  it('renders with the src attribute', () => {
    const foo = () => <img src="bar.png"/>
    const ElementImageHtml = renderToString(<foo/>)
    expect(ElementImageHtml).toContain('src="bar.png"')
  })
})

```
<!--
A clear and concise description of any alternative solutions or features you've
considered.
-->

<!--
If you can, explain how users will be able to use this and possibly write out a
version of the docs.
-->

<!--
Thanks for your interest in the project. Bugs filed and PRs submitted are appreciated!

Please make sure that you are familiar with and follow the Code of Conduct for
this project (found in the CODE_OF_CONDUCT.md file).

Also, please make sure you're familiar with and follow the instructions in the
contributing guidelines (found in the CONTRIBUTING.md file).

If you're new to contributing to open source projects, you might find this free
video course helpful: http://kcd.im/pull-request

Please fill out the information below to expedite the review and (hopefully)
merge of your pull request!
-->

<!-- What changes are being made? (What feature/bug is being fixed here?) -->

**What**: Fixing an error on readme

<!-- Why are these changes necessary? -->

**Why**: In the complex example catch already sets error to ```error.message```. So in render, it should just show ```state.error```.

<!-- How were these changes implemented? -->

**How**: Render function updated to just show ```state.error``` instead of ```state.error.message```.

<!-- Have you done all of these things?  -->

**Checklist**:

<!-- add "N/A" to the end of each line that's irrelevant to your changes -->

<!-- to check an item, place an "x" in the box like so: "- [x] Documentation" -->

- [x] Documentation added to the
      [docs site](https://github.com/alexkrolick/testing-library-docs)
- [ ] Tests N/A
- [ ] Typescript definitions updated N/A
- [x] Ready to be merged
      <!-- In your opinion, is this ready to be merged as soon as it's reviewed? -->
Yes. Either that or catch shoud update error on the state as ```error: error``` instead of ```error: error.message```
<!-- feel free to add additional comments -->

<!--

Vote on feature requests by adding a üëç. This helps maintainers prioritize what
to work on.

* Please fill out this template with all the relevant information so we can
  understand what's going on and fix the issue. We appreciate bugs filed and PRs
  submitted!

* If you're issue is regarding one of the query APIs (`getByText`
  `getByLabelText`, etc), then please file it on the `dom-testing-library`
  repository instead. If you file it here it will be closed. Thanks :)

* Please make sure that you are familiar with and follow the Code of Conduct for
  this project (found in the CODE_OF_CONDUCT.md file).

It'd be great if after the discussion you're the one who submits the PR that
implements this feature. If you've never done that before, that's great! Check
this free short video tutorial to learn how: http://kcd.im/pull-request

-->

### Describe the feature you'd like:

I'd like to add a simple utility function (`createWrapper`) to create wrapper components easily. See example below:

Instead of this:
```js
function Wrapper({ children }) {
  return <Router history={...}>
     <Provider store={...}>
       {children}
     </Provider>
  </Router>
}

const utils = render(<MyComponent />, { wrapper: Wrapper });
```
`createWrapper` function could replace the code above:
```js
const utils = render(<MyComponent />, { 
  wrapper: createWrapper(<Router history={...} />, <Provider store={...} />)
});
```
```
import React from 'react';
import { Provider } from 'react-redux';
import { RouteComponentProps, withRouter } from 'react-router-dom';
import { store } from './store';
import Routes from './router/router';

const App: React.FC<RouteComponentProps> = () => {
  return (
    <Provider store={store}>
      <Routes />
    </Provider>
  );
};

export default withRouter(App);
```


```
function renderWithRouterAndStore(
  ui,
  { route = '/', history = createMemoryHistory({ initialEntries: [route] }) } = {}
) {
  const Wrapper = ({ children }) => {
    return (
      <Provider store={store}>
        <IntlProvider locale="en">
          <MemoryRouter initialEntries={[route]}>
            <Route path="/login">{children}</Route>
          </MemoryRouter>
        </IntlProvider>
      </Provider>
    );
  };

  return {
    ...render(ui, { wrapper: Wrapper }),
    history,
  };
}
```
I have Login Component, when i submit the form and  if the login is successfully, it navigates to '/'.

I am using this.props.history.push('/').

But my test case fail, Cannot read property 'push' of undefined

How to test a React component with RouteComponentProps?
### Describe the feature you'd like:

Examples using the `getAll` queries.

As all the matchers work on a singular element, not arrays, i don't really know how to use the `getAll` queries, and in my current case i'd really love to use something like:

```javascript
       expect(getAllByRole("figure")).some(tag =>
                expect(tag).toHaveTextContent(data.current_balance)
            )

```
But i'm not sure how, or even if it's possible, to do this.
<!--

* Please fill out this template with all the relevant information so we can
  understand what's going on and fix the issue. We appreciate bugs filed and PRs
  submitted!

* If your issue is regarding one of the query APIs (`getByText`,
  `getByLabelText`, etc), then please file it on the `dom-testing-library`
  repository instead. If you file it here it will be closed. Thanks :)

* Please make sure that you are familiar with and follow the Code of Conduct for
  this project (found in the CODE_OF_CONDUCT.md file).

We'll probably ask you to submit the fix (after giving some direction). If
you've never done that before, that's great! Check this free short video
tutorial to learn how: http://kcd.im/pull-request

-->

- `react-router-dom` version: 5.1.2
- `history` version: 4.10.1
- `jest` version: 24.9.0
- `react-testing-library/jest-dom` version: 4.2.4
- `react-testing-library` version: 9.4.0
- `react` version: 16.12.0
- `node` version: 12.13.0
- `yarn` version: 1.19.1

### Relevant code or config:

```js
// app.test.js
import React from 'react'
import { Router } from 'react-router-dom'
import { createMemoryHistory } from 'history'
import { render, fireEvent } from '@testing-library/react'
import { App, LocationDisplay } from '../app'
import '@testing-library/jest-dom/extend-expect'

test('full app rendering/navigating', () => {
	const history = createMemoryHistory()
	const { container, getByText } = render(
		<Router history={history}>
			<App />
		</Router>,
	)
	// verify page content for expected route
	// often you'd use a data-testid or role query, but this is also possible
	expect(container.innerHTML).toMatch('You are home')

	fireEvent.click(getByText(/about/i))

	// check that the content changed to the new page
	expect(container.innerHTML).toMatch('You are on the about page')
})

test('landing on a bad page shows 404 page', () => {
	const history = createMemoryHistory()
	history.push('/some/bad/route')
	const { getByRole } = render(
		<Router history={history}>
			<App />
		</Router>,
	)
	expect(getByRole('heading')).toHaveTextContent('404 Not Found')
})

test('rendering a component that uses withRouter', () => {
	const history = createMemoryHistory()
	const route = '/some-route'
	history.push(route)
	const { getByTestId } = render(
		<Router history={history}>
			<LocationDisplay />
		</Router>,
	)
	expect(getByTestId('location-display')).toHaveTextContent(route)
})
```

```js
// app.js
import React from 'react'
import { withRouter } from 'react-router'
import { Link, Route, Router, Switch } from 'react-router-dom'

const About = () => <h1>You are on the about page</h1>
const Home = () => <h1>You are home</h1>
const NoMatch = () => <h1>404 Not Found</h1>

export const LocationDisplay = withRouter(({ location }) => (
	<div data-testid="location-display">{location.pathname}</div>
))

export const App = () => {
	return (
		<div>
			<Link to="/">Home</Link>
			<Link to="/about">About</Link>
			<Switch>
				<Route exact path="/" component={Home} />
				<Route path="/about" component={About} />
				<Route component={NoMatch} />
			</Switch>
			<LocationDisplay />
		</div>
	)
}
```

### What you did:

Copied example tests from https://testing-library.com/docs/example-react-router and ran it with jest via `npx jest <path/to/file>` and it failed with an error message

### What happened:

I did not expect errors but this returned. 

General Error Message:
<img width="710" alt="Screen Shot 2019-12-15 at 9 39 31 AM" src="https://user-images.githubusercontent.com/14270200/70866566-3497ce80-1f20-11ea-8897-8df53ecbadec.png">

In Depth Stacktrace:
```bash
   Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.

      39 | 	const route = '/some-route'
      40 | 	history.push(route)
    > 41 | 	const { getByTestId } = render(
         | 	        ^
      42 | 		<Router history={history}>
      43 | 			<LocationDisplay />
      44 | 		</Router>,

at createFiberFromTypeAndProps (node_modules/react-dom/cjs/react-dom.development.js:26629:21)
      at createFiberFromElement (node_modules/react-dom/cjs/react-dom.development.js:26652:15)
      at reconcileSingleElement (node_modules/react-dom/cjs/react-dom.development.js:15526:23)
      at reconcileChildFibers (node_modules/react-dom/cjs/react-dom.development.js:15586:35)
      at reconcileChildren (node_modules/react-dom/cjs/react-dom.development.js:18096:28)
      at updateHostRoot (node_modules/react-dom/cjs/react-dom.development.js:18567:5)
      at beginWork$1 (node_modules/react-dom/cjs/react-dom.development.js:20190:14)
      at HTMLUnknownElement.callCallback (node_modules/react-dom/cjs/react-dom.development.js:336:14)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)
      at HTMLUnknownElementImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)
      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)
      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)
      at HTMLUnknownElement.dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)
      at Object.invokeGuardedCallbackDev (node_modules/react-dom/cjs/react-dom.development.js:385:16)
      at invokeGuardedCallback (node_modules/react-dom/cjs/react-dom.development.js:440:31)
      at beginWork$$1 (node_modules/react-dom/cjs/react-dom.development.js:25780:7)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:24698:12)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:24671:22)
      at performSyncWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:24270:11)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom.development.js:23698:7)
      at updateContainer (node_modules/react-dom/cjs/react-dom.development.js:27103:3)
      at node_modules/react-dom/cjs/react-dom.development.js:27528:7
      at unbatchedUpdates (node_modules/react-dom/cjs/react-dom.development.js:24433:12)
      at legacyRenderSubtreeIntoContainer (node_modules/react-dom/cjs/react-dom.development.js:27527:5)
      at Object.render (node_modules/react-dom/cjs/react-dom.development.js:27608:10)
      at node_modules/@testing-library/react/dist/pure.js:86:25
      at batchedUpdates$1 (node_modules/react-dom/cjs/react-dom.development.js:24386:12)
      at act (node_modules/react-dom/cjs/react-dom-test-utils.development.js:1092:14)
      at Object.render (node_modules/@testing-library/react/dist/pure.js:82:26)
```

### Reproduction:

https://github.com/jermainezhimin/react-router-repro 
Oddly enough the same repro doesn't error out! Is this because of my babel config ü§î 
<!--
If possible, please create a repository that reproduces the issue with the
minimal amount of code possible.

Template repo: https://github.com/alexkrolick/dom-testing-library-template

Or if you can, try to reproduce the issue in a Codesandbox. You can fork the one
here: https://codesandbox.io/s/5z6x4r7n0p
-->

### Problem description:

We can't test react router's behavior.

### Suggested solution:

We can switch out `react-router` with `reach-router`. It's boilerplate worked fine.
