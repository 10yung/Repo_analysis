It seems like FastttCamera is using background thread to access UI API. Enabled Main Thread Checker using Xcode 9 [Apple Doc](https://developer.apple.com/documentation/code_diagnostics/main_thread_checker). 

Happens in `FastttCamera.m` line number `610` 

Here's the backtrace after pausing execution. 
```
=================================================================
Main Thread Checker: UI API called on a background thread: -[UIView bounds]
PID: 2754, TID: 1011164, Thread name: (none), Queue name: com.apple.root.default-qos, QoS: 21
Backtrace:
4   FastttCamera                        0x00000001026d7d98 __107-[FastttCamera _processImage:withCropRect:maxDimension:fromCamera:needsPreviewRotation:previewOrientation:]_block_invoke + 708
5   libdispatch.dylib                   0x0000000109cc12cc _dispatch_call_block_and_release + 24
6   libdispatch.dylib                   0x0000000109cc128c _dispatch_client_callout + 16
7   libdispatch.dylib                   0x0000000109ccd3dc _dispatch_queue_override_invoke + 984
8   libdispatch.dylib                   0x0000000109cd29d0 _dispatch_root_queue_drain + 624
9   libdispatch.dylib                   0x0000000109cd26f4 _dispatch_worker_thread3 + 136
10  libsystem_pthread.dylib             0x0000000185beb06c _pthread_wqthread + 1268
11  libsystem_pthread.dylib             0x0000000185beab6c start_wqthread + 4
2017-12-05 20:12:47.092293+0530 App-Dev[2754:1011164] [reports] Main Thread Checker: UI API called on a background thread: -[UIView bounds]
PID: 2754, TID: 1011164, Thread name: (none), Queue name: com.apple.root.default-qos, QoS: 21
Backtrace:
4   FastttCamera                        0x00000001026d7d98 __107-[FastttCamera _processImage:withCropRect:maxDimension:fromCamera:needsPreviewRotation:previewOrientation:]_block_invoke + 708
5   libdispatch.dylib                   0x0000000109cc12cc _dispatch_call_block_and_release + 24
6   libdispatch.dylib                   0x0000000109cc128c _dispatch_client_callout + 16
7   libdispatch.dylib                   0x0000000109ccd3dc _dispatch_queue_override_invoke + 984
8   libdispatch.dylib                   0x0000000109cd29d0 _dispatch_root_queue_drain + 624
9   libdispatch.dylib                   0x0000000109cd26f4 _dispatch_worker_thread3 + 136
10  libsystem_pthread.dylib             0x0000000185beb06c _pthread_wqthread + 1268
11  libsystem_pthread.dylib             0x0000000185beab6c start_wqthread + 4
```
I merged KhanFu fork which add video support to latest master.

So as the title suggests, my App is portrait only, however there are instances where i would like to tell the library it is about to take landscape pictures, for example for business cards. In this case i make the camera fullscreen and encourage them to take a landscape picture. Then i would like the picture that is returned to be rotated to be portrait. Reading some of the variables names it looks as if this is possible but i cant seem to get it to work

Any help is appreciated.

Hi, 
How to reduce the time delay between capturing the series of pictures.I want to reduce the time in between the picture to picture.
Thank you
Just a small improvement - `drawInRect` performance is very slow, and this method is faster.

https://developer.apple.com/library/content/qa/qa1708/_index.html


There are no checks for errors when `AVCaptureDeviceInput *deviceInput = [AVCaptureDeviceInput deviceInputWithDevice:device error:nil]`  so if an error occurs, deviceInput will be nil and the following call to `[_session addInput:deviceInput]`  will crash. 

We cannot reproduce it on development, but we see several crashes on our production app on crashlytics:

```
Fatal Exception: NSInvalidArgumentException
0  CoreFoundation                 0x184aa51b8 __exceptionPreprocess
1  libobjc.A.dylib                0x1834dc55c objc_exception_throw
2  AVFoundation                   0x18c287c70 -[AVCaptureSession addInput:]
3  FastttCamera                   0x100f42170 __36-[FastttCamera _setupCaptureSession]_block_invoke.150 (FastttCamera.m:436)
4  libdispatch.dylib              0x18392e1fc _dispatch_call_block_and_release
5  libdispatch.dylib              0x18392e1bc _dispatch_client_callout
6  libdispatch.dylib              0x183932d68 _dispatch_main_queue_callback_4CF
7  CoreFoundation                 0x184a52810 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__
8  CoreFoundation                 0x184a503fc __CFRunLoopRun
9  CoreFoundation                 0x18497e2b8 CFRunLoopRunSpecific
10 GraphicsServices               0x186432198 GSEventRunModal
11 UIKit                          0x18a9c57fc -[UIApplication _run]
12 UIKit                          0x18a9c0534 UIApplicationMain
```

Is there any reason why there are no such checks? 

Thanks in advance
 CGBitmapInfo bitmapInfo = CGImageGetBitmapInfo(imageRef) & kCGBitmapAlphaInfoMask;
    
    //Since iOS8 it's not allowed anymore to create contexts with unmultiplied Alpha info
    if (bitmapInfo == kCGImageAlphaLast) {
        bitmapInfo = kCGImageAlphaPremultipliedLast;
    }
    if (bitmapInfo == kCGImageAlphaFirst) {
        bitmapInfo = kCGImageAlphaPremultipliedFirst;
    }
Hi!

I'm using FastttCamera to work around [nasty iOS SDK crash](https://openradar.appspot.com/28108858). However I've found a little issue with FastttCamera itself. STR is similar to one from the radar:

1. Present camera with `cameraFlashMode` set to `FastttCameraFlashModeOn`.
2. Take picture.
3. Immediately (before or during the flash), either hit the iPhone's power button to lock it or go to home screen.

In such case taking picture fails and `imageDataSampleBuffer` is empty. Error's description:

```
error Error Domain=AVFoundationErrorDomain Code=-11800 "The operation could not be completed" 
UserInfo={NSUnderlyingError=0x17405ad60 {Error Domain=NSOSStatusErrorDomain Code=-16802 "(null)"},
NSLocalizedFailureReason=An unknown error occurred (-16802), NSLocalizedDescription=The operation could not be completed}
```

On such errors FastttCamera gets stuck in capturing image state. This fix allows to take another picture after a failure.