The imageName method in TUIImage  could not accept the image name without ext.
The NSImage or UIImage could auto complete the image name with png and @2x according  to the environment.

I suggest the following change.  It works well for me.

``` objective-c
+ (TUIImage *)imageNamed:(NSString *)name cache:(BOOL)shouldCache
{
    if(!name)
        return nil;

    static NSMutableDictionary *cache = nil;
    if(!cache) {
        cache = [[NSMutableDictionary alloc] init];
    }

    TUIImage *image = [cache objectForKey:name];
    if(image)
        return image;

    NSImage* nsImage = [NSImage imageNamed:name];
    if(!nsImage)
        return nil;

    NSData* data = [nsImage TIFFRepresentation];
    if(data) {
        image = [self imageWithData:data];
        if(image) {
            if(shouldCache) {
                [cache setObject:image forKey:name];
            }
        }
    }

    return image;
}
```

Suppresses warnings from mis-matched string formatters.

When using a touch/trackpad the scroll indicators are not visible while dragging.

The only way to make them appear is to flick the scrollview.  They become visible as soon as you stop touching the touch/trackpad.

Otherwise we get strange artifacts when re-drawing TUILabels on Retina displays.

Hi,

These changes adds a subclass to TUIImage that is backed by an NSImage instance (not CGImageRef). The benefits are:
- Supports PDF-based images.
- Brings in NSImage's support for multi-resolution image resource files (e.g. retina display @2x files).

Thanks.

I'm trying to track down a crash that occurs when a window is closed (and released) that contains a TwUI view hierarchy. From what I can tell, while a `NSWindow` is being dealloc'd, the `TUINSView` tries to clean up the hierarchy, which ends up accessing the window and causing the crash.

I'm not familiar enough with the TUIView internals to know the proper fix, but if I set the `rootView` of my `TUINSView` to `nil` before the window is released, it doesn't crash and every thing seems to work correctly. Here's a sample project that reproduces the crash - [http://cl.ly/3R0J1k3d2f37](http://cl.ly/3R0J1k3d2f37), but you can also reproduce it in the example project by commenting out the `setReleasedWhenClosed:` calls in `ExampleAppDelegate.m`.

In the past I could draw a text inside a table view cell with a different color, depending on the cell state (selected or not) by using a text renderer object.

With the current master branch, this is not possible anymore, since the table view cell drawing is not updated correctly.

**Example**
I've updated the Example project to reproduce the problem [here](https://github.com/brutella/twui/commit/d2595826092d2284d089b893628143d0dba2ba41). The text renderer should draw the text in white color if the cell is selected, otherwise the title should be black. The problem is that the title color gets not updated correctly - after deselecting a cell, the title is still white and after selecting the title is still black.

I believe that you would do a great favor to potential users of your framework if you wrote a short _getting started_ guide.

Currently one has to dig into the source code and be quite familiar with Cocoa to understand how things work.

Looks like a lot of new commits entered... time to spin a 0.3.0 release?

