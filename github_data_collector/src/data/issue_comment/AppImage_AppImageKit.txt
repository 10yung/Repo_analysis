I was wanting to ask about the icon names of Appimages.

I was wondering why would there be a `appimagekit-` prefix on the icon names instead of using the upstream icon name on the desktop files installed via AppImage or hardcoding the icon names found on the desktop files? 

 I was looking through an issue of the Numix icon theme: https://github.com/numixproject/numix-core/issues/3702#issuecomment-310211829
We could ship a static patchelf:
https://github.com/NixOS/patchelf/issues/185#issuecomment-575366692
Hi
Few users of Tutanota are having difficulties with running the app because their `TMPDIR` is `noexec`. Running with `TMPDIR=XDG_RUNTIME_DIR` helps but we have no way of configuring that.

https://github.com/tutao/tutanota/issues/1618

What is the preferred way of solving this? It seems like there's no big difference between `TMPDIR` and `XDG_RUNTIME_DIR` security-wise but people still do this.
Thanks.
https://github.com/AppImage/AppImageKit/blame/64321b72bc35fc886772ab7d95f3924b67207b32/README.md#L193
this PR depens on https://github.com/AppImage/libappimage/pull/145
Alpine has `libc6-compat` which provides ld-linux, so _in theory_ it should run there, but _in practice_ we are getting:

```
/patchelf-0.10 # apk add libc6-compat
(1/1) Installing libc6-compat (1.1.22-r3)
OK
/patchelf-0.10 # ./appimagetool-390-x86_64.AppImage 
Error relocating ./appimagetool-390-x86_64.AppImage: gnu_dev_makedev: symbol not found
```
When using `--appimage-extract-and-run`, getting

```
Failed to remove directory /tmp/appimage_extracted_0c37ecedd63b11620912b4f9422b098e/usr/share/man/man1: Directory not empty
Failed to remove directory /tmp/appimage_extracted_0c37ecedd63b11620912b4f9422b098e/usr/share/man: Directory not empty
Failed to remove directory /tmp/appimage_extracted_0c37ecedd63b11620912b4f9422b098e/usr/share/doc/patchelf: Directory not empty
Failed to remove directory /tmp/appimage_extracted_0c37ecedd63b11620912b4f9422b098e/usr/share/doc: Directory not empty
Failed to remove directory /tmp/appimage_extracted_0c37ecedd63b11620912b4f9422b098e/usr/share: Directory not empty
Failed to remove directory /tmp/appimage_extracted_0c37ecedd63b11620912b4f9422b098e/usr/bin: Directory not empty
Failed to remove directory /tmp/appimage_extracted_0c37ecedd63b11620912b4f9422b098e/usr: Directory not empty
Failed to remove directory /tmp/appimage_extracted_0c37ecedd63b11620912b4f9422b098e: Directory not empty
```

https://travis-ci.org/probonopd/appstream/builds/619036585#L5638-L5645

@TheAssassin 
It works but only when I remove metadata xml file. Otherwise it fails as below:

Found appimagetool: /tmp/.mount_linuxdCqqmwp/usr/bin/appimagetool
Running command: /tmp/.mount_linuxdCqqmwp/usr/bin/appimagetool "AppDir" "-g"


```
appimagetool, continuous build (commit fef038a), build 2093 built on 2019-07-07 12:07:34 UTC
WARNING: appstreamcli command is missing, please install it if you want to use AppStream metadata
Using architecture x86_64
/dev/shm/rclone-browser-1.6.0-d9e3ebe.AppImage/AppDir should be packaged as Rclone_Browser-1.6.0-d9e3ebe-x86_64.AppImage
Deleting pre-existing .DirIcon
Creating .DirIcon symlink based on information from desktop file
AppStream upstream metadata found in usr/share/metainfo/rclone-browser.appdata.xml
Trying to validate AppStream information with the appstream-util tool
In case of issues, please refer to https://github.com/hughsie/appstream-glib
/dev/shm/rclone-browser-1.6.0-d9e3ebe.AppImage/AppDir/usr/share/metainfo/rclone-browser.appdata.xml: FAILED:
• url-not-found         : <screenshot> failed to connect: SSL handshake failed [https://github.com/kapitainsky/RcloneBrowser/wiki/images/IMGdefault.png]
• url-not-found         : <screenshot> failed to connect: SSL handshake failed [https://github.com/kapitainsky/RcloneBrowser/wiki/images/IMGtransfer.png]
Validation of files failed
Failed to validate AppStream information with appstream-util
rename: Rclone_Browser*: rename to rclone-browser* failed: No such file or directory
cp: cannot stat ‘*AppImage’: No such file or directory

```
the same metadata xml file works perfectly on Ubuntu 16.04.

Both urls it complains about are valid.


The issue is in reference to linuxdeploy/linuxdeploy-plugin-appimage#8
Trying to sign AppImage with my pgp keys:

```
Embedding MD5 digest
gpg2 and sha256sum are installed and user requested to sign, hence signing
Error: cannot embed key in AppImage: size exceeds reserved ELF section size
```

Could not find any information about what keys are permitted, obviously mine is too long (4096 bits). Any details on this somewhere?

The issue is in reference to linuxdeploy/linuxdeploy-plugin-appimage#9
 
@knarfS reports:

> When building AppImageKit the `install-build-deps.sh` only checks for Ubuntu 14.04 to install a newer version of `cmake`, but shouldn't check it also for 16.04, because 14.04 LTS has expired in April 2019. I guess more and more people will use 16.04 instead? And what's about Ubuntu 32bit (you have to compile a newer `cmake` yourself)? 

To be honest, I never build locally, we have a quite involved setup using Docker and CentOS 6 for this repository to ensure increased binary compatibility with older systems. So yes, `install-build-deps.sh` should probably be updated.

> Shouldn't the build process work with the `cmake` version that is supplied by Ubuntu 14.04/16.04?

This is a question for @TheAssassin: Is the  `cmake` version that is supplied by Ubuntu 16.04 sufficient to build AppImageKit?

> AppImageKit needs cmake version 3.6, 16.04 comes with 3.5.1

Can we make it so that 3.5.1 is sufficient? If not, why not?