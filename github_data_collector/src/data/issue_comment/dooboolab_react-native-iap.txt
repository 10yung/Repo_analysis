### Version of react-native-iap
4.3.4

### Version of react-native
0.61.2

### Platforms you faced the error (IOS or Android or both?)
Android

### Expected behavior

### Actual behavior


Ive collected this from an app crash reported in production. Ive seen it happen some times now. Sorry for not having real line numbers to report, but the error is real..

(NB- line numbers are not correct)
java.lang.NullPointerException: 
  at com.dooboolab.RNIap.RNIapModule$11.run (RNIapModule.java:20)
  at com.dooboolab.RNIap.RNIapModule.ensureConnection (RNIapModule.java:10)
  at com.dooboolab.RNIap.RNIapModule.sendUnconsumedPurchases (RNIapModule.java:5)
  at com.dooboolab.RNIap.RNIapModule.startListening (RNIapModule.java)
  at java.lang.reflect.Method.invoke (Method.java)
  at com.facebook.react.bridge.JavaMethodWrapper.invoke (JavaMethodWrapper.java:149)
  at com.facebook.react.bridge.JavaModuleWrapper.invoke (JavaModuleWrapper.java:21)
  at com.facebook.react.bridge.queue.NativeRunnable.run (NativeRunnable.java)
  at android.os.Handler.handleCallback (Handler.java:790)
  at android.os.Handler.dispatchMessage (Handler.java:99)
  at com.facebook.react.bridge.queue.MessageQueueThreadHandler.dispatchMessage (MessageQueueThreadHandler.java)
  at android.os.Looper.loop (Looper.java:164)
  at com.facebook.react.bridge.queue.MessageQueueThreadImpl$4.run (MessageQueueThreadImpl.java:37)
  at java.lang.Thread.run (Thread.java:764)

### Tested environment (Emulator? Real Device?)
Real Device: Motorola Moto G (5) Plus (potter_n), Android 8.1

### Steps to reproduce the behavior
Not identified..
### Version of react-native-iap
4.4.0

### Version of react-native
0.61.2

### Platforms you faced the error 
iOS

### Expected behavior

Accordingly to [Apple's documentation](https://developer.apple.com/documentation/storekit/in-app_purchase/implementing_introductory_offers_in_your_app) (check Determine Eligibility section) lapsed subscribed aren't eligible to take an introductory offer unless they haven't previously used an introductory offer for the given product.
So, when purchasing a subscription for the 2nd+ time the introductory offer shouldn't be taken in account in the *confirmation modal* neither in the purchase (this last part is right).


### Actual behavior

In my case, I have an introductory offer of one week free, when subscribing for the first time, the confirmation alert says it will start billing one week after, which is right. But if I unsubscribe and try to subscribe again, this message is presented in the alert and it shouldn't.
When doing the receipt validation the purchase data doesn't include the introductory offer.

### Tested environment
Real device with Sandbox account.


### Steps to reproduce the behavior
Code based on [IapExample](https://github.com/dooboolab/react-native-iap/tree/master/IapExample) and [Example backend](https://github.com/mifi/in-app-subscription-example).

1. Set an auto-renewal subscription with an introductory offer of one week
1. Purchase it with Sandbox
1. Wait for it to stop renewing (about 1 hour)
1. Purchase another subscription (this is the one that has the wrong confirmation wording)

I am working on an app which has our own user database and cross platforms subscription. and my questions are:

1- What happens if they uninstall the app?  Does the subscription automatically get cancelled?
2- What happens if they have the app installed on two devices, do both of them get notified?
3- What happens if they have the app installed on two devices and Login with different App Account and both of them have login with same Apple ID or Google Account will both of them get notified?
4. If user cancel the subscription from settings, how do we know which user canceled the services? I would like to inform my server that this user canceled subscription.
5-How do we know a user did auto-renew or canceled the subscription without opening app. Is there any unique id in apple's receipt which we can get to validate the user id.

Thanks.


### Version of react-native-iap
react-native-iap -> 3.4.4

### Version of react-native
react-native -> 0.60.5

### Platforms you faced the error (IOS or Android or both?)
Android

### Expected behavior
Should show payment option

### Actual behavior
Does not happen anything

### Tested environment (Emulator? Real Device?)
Real Device


Hi,

I have membership screen with 3 subscription plans
Silver, Gold, Platinum

User can select plan and click on buy button to susbcribe to that plan
It works for the first time shows payment option and user successfully subscribes to the plan.
It does not work after that if user tries to subscribe to another plan by
Clicking on buy button which triggers RNIap.requestSubscription does not show anything.
Below is the code

```
try{
	const purchases = await RNIap.requestSubscription(this.state.current_selected_plan);
} catch (err) {

	this.setState({
		err_msg: 'Error: ' + err.code +' '+err.message
	});
	return;
}
```
It works when user selects the same plan but does not work when another plan is selected.
is this something related to downgrade upgrade?
### Version of react-native-iap
4.3.0

### Version of react-native
0.61.3

### Platforms you faced the error (IOS or Android or both?)
Android

### Expected behavior
Aall purchases are acknowledged

### Actual behavior
I'm having an issue where roughly half of all subscription charges get stuck in "Payment Pending" mode for multiple days. However, the other half of them charge successfully, so I know that my logic is acknowledging the purchase -or at least attempting to- each time. How could this happen?

### Tested environment (Emulator? Real Device?)
Real Devices

### Steps to reproduce the behavior
This has only been happening to the users of my app, I can't seem to reproduce it myself - it's successful every time I test it.

For more context, this is for a 7 day free trial of a subscription. The initial "purchase" works okay with no "payment pending" issues, it's the automatic renewal at the end of the 7 day trial where the payment pending issue happens. Does the second "real" charge after the free trial need to be somehow acknowledged as well even if a user doesn't necessarily open the app around that time?

Perhaps this is nothing to do with acknowledging, but it's the only thing I can think of

I'm basically using the example in the readme for purchase flow, this is my code:

<pre>
this.purchaseUpdateSubscription = purchaseUpdatedListener((purchase: InAppPurchase | SubscriptionPurchase | ProductPurchase ) => {

      const receipt = purchase.transactionReceipt;

      if (receipt) {

        this.activePurchaseSku = null;

        // Enable the purchase
        this.enablePurchaseBySku(purchase.productId, false);
        
        // Aknowledge the transaction
        RNIap.finishTransaction(purchase);

      }

});
</pre>
### Version of react-native-iap
^3.5.2
### Version of react-native
0.60.3
### Platforms you faced the error (IOS or Android or both?)
IOS
### Expected behavior
RNIap.getSubscriptions([skus]) should resolve
### Actual behavior
On some devices it hangs forever and never resolves
### Tested environment (Emulator? Real Device?)
Real Device's, live on store
### Steps to reproduce the behavior
Call RNIap.getSubscriptions([skus]) after launching the app.
It has been difficult to reproduce internally, we have only reproduced it once and restarting the device fixed it. For most live users however, restarting their devices does nothing.
### Version of react-native-iap
4.3.0
### Version of react-native 
0.61.5
### Platforms you faced the error (IOS or Android or both?)
iOS 13 and later
### Expected behavior
It should go for purchase or restore the product but it is getting error.
Code:
try{
const purchases = await RNIap.getAvailablePurchases();
 if (purchases && purchases.length > 0) {
      this.setState({isLoading: false});
      Alert.alert('Restore Successful');
    }else{
     this.requestPurchase(itemSku);
    }
}catch(err){
 Alert.alert(err.message);
}
After this it's going to catch with error "E_UNKNOWN Cannot connect to iTunes Store" while user did not clicked any option.

### Tested environment (Emulator? Real Device?)
I tested on both and behavior is same.

### AppStore Review
We found that your in-app purchase products exhibited one or more bugs when reviewed on iPad running iOS 13.2.3 on Wi-Fi.

Specifically, an error message was displayed when we attempted to purchase. 


Next Steps

When validating receipts on your server, your server needs to be able to handle a production-signed app getting its receipts from Appleâ€™s test environment. The recommended approach is for your production server to always validate receipts against the production App Store first. If validation fails with the error code "Sandbox receipt used in production," you should validate against the test environment instead.

Resources

You can learn more about testing in-app purchase products in your development sandbox environment in App Store Connect Developer Help.

For more information on receipt validation, please see What url should I use to verify my receipt? in the In-App Purchase FAQ.

Learn how to generate a receipt validation code in App Store Connect Developer Help.



Please see attached screenshot for details.
<img width="205" alt="Screen Shot 2019-12-13 at 2 27 06 AM" src="https://user-images.githubusercontent.com/12509364/70750339-11b6c000-1d50-11ea-9e94-5016ec4127ea.png">

When working with auto-renewable subscriptions, it is a common situation that a developer is using their device with their Apple iTunes account with multiple user logins.

I.e. Registering and account on the platform you are building, signing up to an auto-renewable subscription, paying with your iTunes account. Then logging out, registering a new account.

At this point, I think it is possible for `await RNIap.getAvailablePurchases();` to return active purchases for the new second user despite them not having signed up to the auto-renewable subscription yet?

Is this correct? 
At some point, I do intend to do (or contribute to) a PR with a clearer example and slightly reformatted README. However, in the meantime, I thought it might be helpful to put these here for anyone who is struggling to understand the expected flow.

The first thing to remember is that:

**The IAP UI is different in sandbox (development and TestFlight) vs. production, misleading developers about the final user experience**

It is incredibly frustrating that you can't test the final flow until the app is live!

According to [this source](https://developer.apple.com/documentation/storekit/in-app_purchase) and also my experience, there are some weird gotchas when testing IAP mainly around which account details to input when you see a pop-up.

> If you log in to the App Store app with your sandbox credentials, it will ruin your sandbox account.

Therefore it's important to know which details you need to enter in which pop-up!

Before you start:

1. You must ensure that all of your Agreement, Tax and Banking are "Active" in ItunesConnect, [please see](https://developer.apple.com/library/archive/technotes/tn2259/_index.html)
2. You have created a FRESH Sandbox Tester in Users & Access in iTunesConnect
3. In my opinion, when testing, it's best to sign out from iTunes on the device (both your account AND your Sandbox Tester account) in order to make it clearer when you are required to enter information and what this information is for. (Settings > iTunes & App Store > Sign Out).

## Testing locally (on a simulator)

Apple has stated multiple times that IAP must be tested on a device not on the simulator.  There have been versions of iOS and MacOS that have allowed you to test IAP in the simulator - but that is the rare gift rather than something to be expected.

I __wish__ this was more obvious...

## Testing locally (on a device)

First you will see a pop-up that will ask you to sign into your sandbox account:

If you are not logged into your Sandbox iTunes account it will ask you to login to your Sandbox Apple Id. 

**Note: Even though it doesn't say [Environment: Sandbox] on this pop-up this is your Sandbox Account and not your normal Apple Account:**

<img src="https://user-images.githubusercontent.com/40461/69760085-82a88600-115b-11ea-8c01-1d76b9ea4108.jpg" alt="sign-in-local" width="200" />

(The reason why I know it is the sandbox account.. if you login and then go to Settings > iTunes & App Store you will see that you have been logged in to your Sandbox Account and NOT your main Apple Id).

If you were already logged into your Sandbox iTunes account the pop-up will look like this:

<img src="https://user-images.githubusercontent.com/40461/69760101-889e6700-115b-11ea-8f93-38c07ba5ffe7.jpg" alt="sign-in-local-previously-logged-in" width="200" />

Sometimes, you may get this pop-up... (Exactly when this happens requires more research).

<img src="https://user-images.githubusercontent.com/40461/69760355-3f9ae280-115c-11ea-90ac-ee0f5683dcbf.jpg" alt="your-account-is-temporarily-unavailable-local" width="200" />

I have also got these two pop-up at this point too... (Any information on these edge cases would be helpful)

<img src="https://user-images.githubusercontent.com/40461/69760408-66f1af80-115c-11ea-9ec9-9123d07fb034.jpg" alt="enter-the-password-sandbox-local" width="200" />

<img src="https://user-images.githubusercontent.com/40461/69760630-ef705000-115c-11ea-88e9-15efcd7a86ec.jpg" alt="if-you-have-used-the-iTunes-Store-local" width="200" />

After selecting a purchase to buy, you will see a pop-up where you will need to enter the password again for your Sandbox Account in order to purchase (this happens instead of the conventional purchase screen):

<img src="https://user-images.githubusercontent.com/40461/69753904-8b459000-114c-11ea-91b6-6ff001266fea.jpg" alt="confirm-purchase-local" width="200" />

Then you will see a pop-up asking you to confirm the purchase:

<img src="https://user-images.githubusercontent.com/40461/69754001-bcbe5b80-114c-11ea-9123-8b7f2c0298f7.jpg" alt="confirm-subscription-local" width="200" />

If the subscription was a success, you will see:

<img src="https://user-images.githubusercontent.com/40461/69761404-36f7db80-115f-11ea-8603-74628878d097.jpg" alt="your-all-set-local" width="200" />

If the subscription fails, you will see:

<img src="https://user-images.githubusercontent.com/40461/69754057-e081a180-114c-11ea-952c-cb3264314d12.jpg" alt="not-authorised-local" width="200" />

**UPDATE from @jordangrant ** After successfully subscribing, if you try to subscribe again, you will see:

<img src="https://user-images.githubusercontent.com/40461/69766934-0bcab780-1172-11ea-9f7f-604cd2d4d5f4.png" alt="already-subscribed" width="200">

## Testing on TestFlight

> TestFlight users don't require a sandbox account, but they will test against an automatically created sandbox account. This means it's no longer necessary to create test accounts in iTunes Connect. Your TestFlight user is a legitimate App Store user, but doing in-app purchases made with beta builds are free within the context of the beta version.

If you are already logged into your iTunes account and you try to make a purchase, you should see this:

<img src="https://user-images.githubusercontent.com/40461/69767230-32d5b900-1173-11ea-99d9-41daad23c976.jpg" alt="confirm-purchase-testflight" width="200" />

However, if you are logged out, you will see this:

<img src="https://user-images.githubusercontent.com/40461/69767258-4b45d380-1173-11ea-9e7a-e6c7f9c4f4d2.jpg" alt="confirm=purchase-testflight-logged-out" width="200" />

When you see these, you must enter your iTunes credentials rather than a Sandbox account.

## Validating Receipts

In my experience, the main problem is when you are validating receipts with:

```
const decodedReceipt = await RNIap.validateReceiptIos({
    'receipt-data': latestAvailableReceipt,
    password: C.ITUNES_CONNECT_SHARED_SECRET,
  },
  isTestEnvironment,
);             
```

The variable `isTestEnvironment` will toggle between validating using:

- https://buy.itunes.apple.com/verifyReceipt
- https://sandbox.itunes.apple.com/verifyReceipt

And will cause a pop-up to be displayed dependent on which environment you are in.

If you use `__DEV__` for the environment variable, this will be `false` in TestFlight and therefore will try to validate the receipt purchased with the production endpoint. 

Therefore my solution is similar to [this advice](https://github.com/react-native-community/react-native-device-info/issues/228) from @agates4 and create a way to check if the app is running on TestFlight:

In your Xcode workspace, create a file TestFlightChecker.h

```C
#ifndef TestFlightChecker_h
#define TestFlightChecker_h

#if __has_include("RCTBridgeModule.h")
#import "RCTBridgeModule.h"
#else
#import <React/RCTBridgeModule.h>
#endif

@interface TestFlightChecker : NSObject <RCTBridgeModule>
@end 

#endif /* TestFlightChecker_h */
```

In your Xcode workspace, create a file TestFlightChecker.m

```C#
#import "TestFlightChecker.h"

@implementation TestFlightChecker

- (dispatch_queue_t)methodQueue
{
    return dispatch_get_main_queue();
}

+ (BOOL)requiresMainQueueSetup
{
    return YES;
}

RCT_EXPORT_MODULE()

- (NSDictionary *)constantsToExport
{
    NSURL *receiptURL = [[NSBundle mainBundle] appStoreReceiptURL];
    NSString *receiptURLString = [receiptURL path];
    BOOL isRunningTestFlightBeta =  ([receiptURLString rangeOfString:@"sandboxReceipt"].location != NSNotFound);

    return @{ @"isTestFlight" : @(isRunningTestFlightBeta) };
};

@end
```

Those are the files needed to call the objective-c functions from react native. The function above will determine if the app is on the App Store or on TestFlight.

And now the react-native implementation

```js
import { NativeModules } from 'react-native';
const { TestFlightChecker } = NativeModules;
export default TestFlightChecker;
```

This way, you'll be able to do:

```js
import TestFlightChecker from './testflight';
.
.
.
const isTestEnvironment = __DEV__ || TestFlightChecker.isTestFlight;

const decodedReceipt = await RNIap.validateReceiptIos({
    'receipt-data': latestAvailableReceipt,
    password: C.ITUNES_CONNECT_SHARED_SECRET,
  },
   isTestEnvironment,
);
```
Followed by #855, I'd like to charge $300 for developing our `example` project with full-featured set ðŸ¥‡.

Agreeing with the [reply provided](https://github.com/dooboolab/react-native-iap/issues/275#issuecomment-534694383), I'd like to give `react-native-iap` users an easier solution to reduce their times of headache.

I hope many people give interest in working on this. If some of you already have worked on this in your company, it'd be easier. 

.
.
.

Funded: $300 from [open collectives](https://opencollective.com/react-native-iap)

P.S. Everyone who's interested in this can participate as a reviewer too.