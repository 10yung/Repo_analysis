There is already a deferred file.Close()
### My Environment

- [X] Windows 10

This is just an enhancement request. I've noticed that NVM4W distinguishes between 32 and 64 bits but not between ia32, amd64 and arm64. If using NVM4W on a Windows on ARM machine. An arm64 machine will be identified as 64 bits but it can't run x64 executables, it can run x86 though. So it would be good to have a clause on `install.cmd` to handle it.

Make sure you have reviewed the [common issues](https://github.com/coreybutler/nvm-windows/wiki/Common-Issues) and existing issues before submitting a new issue.

If this is a question about how to use NVM4W, please use [stackoverflow](http://stackoverflow.com/questions/tagged/nvm-windows) instead.

If this is an issue regarding antivirus, make sure you search the existing issues first.

### My Environment

- [ ] Windows 7 or below (not truly supported due to EOL - see wiki for details)
- [ ] Windows 8
- [ ] Windows 8.1
- [x] Windows 10
- [ ] Windows 10 IoT Core
- [ ] Windows Server 2012
- [ ] Windows Server 2012 R2
- [ ] Windows Server 2016

- [ ] My Windows installation is non-English.

### I'm using NVM4W version:

Run `nvm version` if you don't know.

### 1.1.7.


### My issue is related to (check only those which apply):

- [ ] settings.txt
- [ ] proxy support (Have you tried version 1.1.0+?)
- [ ] 32 or 64 bit support (Have you tried version 1.1.3+?)
- [ ] Character escaping (Have you tried version 1.1.6+?)
- [ x] A standard shell environment (terminal/powershell)
- [ ] A non-standard shell environment (Cmder, Hyper, Cygwin, git)

### Expected Behavior
I expect npm-version-windows
### Actual Behavior

PS C:\WINDOWS\system32> npm install npm-windows-upgrade -g
C:\Program Files\nodejs\npm-windows-upgrade -> C:\Program Files\nodejs\node_modules\npm-windows-upgrade\bin\npm-windows-upgrade.js
+ npm-windows-upgrade@6.0.1
added 72 packages from 51 contributors in 8.124s
PS C:\WINDOWS\system32> npm-windows-upgrade -p -v latest
npm-windows-upgrade v6.0.1
Checked system for npm installation:
According to PowerShell: C:\Program Files\nodejs
According to npm:        C:\Program Files\nodejs
Decided that npm is installed in C:\Program Files\nodejs
Upgrading npm...


Upgrading npm (fallback method)...


You wanted to install npm 6.13.4, but the installed version is 6.9.0.

A common reason is an attempted "npm install npm" or "npm upgrade npm". As of today, the only solution is to completely uninstall and then reinstall Node.js. For a small tutorial, please see https://github.com/felixrieseberg/npm-windows-upgrade#usage.

Please consider reporting your trouble to https://aka.ms/npm-issues.

Debug Information:

node: 12.6.0 | v8: 7.5.288.22-node.14 | uv: 1.30.1 | zlib: 1.2.11 | brotli: 1.0.7 | ares: 1.15.0 | modules: 72 | nghttp2: 1.38.0 | napi: 4 | llhttp: 1.1.4 | http_parser: 2.8.0 | openssl: 1.1.1c | cldr: 35.1 | icu: 64.2 | tz: 2019a | unicode: 12.1 | os: win32 x64 | OS Name: Microsoft Windows 10 Enterprise
OS Version: 10.0.17134 N/A Build 17134
### Steps to reproduce the problem:
I would like to get the latest npm package 6.13.4 [no security issues] with node version 12.13.1

Some form of checksum verification and/or network connection verification needs to be performed for downloads. When the Node or npm downloads are inaccessible, users receive error messages. The process should crash gracefully.
Due to the confusion (ex #472, #474), the app should compare the node.exe path to NVM's. If it doesn't match, _display a warning_ that a conflicting installation of Node needs to be removed.
### My Environment

- [ ] Windows 7 or below (not truly supported due to EOL - see wiki for details)
- [ ] Windows 8
- [ ] Windows 8.1
- [X] Windows 10
- [ ] Windows 10 IoT Core
- [ ] Windows Server 2012
- [ ] Windows Server 2012 R2
- [ ] Windows Server 2016

- [X] My Windows installation is non-English.

### I'm using NVM4W version:

1.1.7

### I have already...

- [X] read the README to be aware of npm gotchas & antivirus issues.
- [X] reviewed the [wiki](https://github.com/coreybutler/nvm-windows/wiki) to make sure my issue hasn't already been resolved.
- [X] verified I'm using an account with administrative privileges.
- [X] searched the issues (open and closed) to make sure this isn't a duplicate.
- [X] made sure this isn't a question about how to use NVM for Windows, since [gitter](https://gitter.im/coreybutler/nvm-windows?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) is used for questions and comments.

### My issue is related to (check only those which apply):

- [ ] settings.txt
- [ ] proxy support (Have you tried version 1.1.0+?)
- [ ] 32 or 64 bit support (Have you tried version 1.1.3+?)
- [ ] Character escaping (Have you tried version 1.1.6+?)
- [ ] A standard shell environment (terminal/powershell)
- [ ] A non-standard shell environment (Cmder, Hyper, Cygwin, git)

### Expected Behavior

It would be cool to add a `-use` switch to the install command, in order to allow one line install and use.

ex:

    nvm install 13.2.0 -use

to be the equivalent of :

    nvm install 13.2.0
    nvm use 13.2.0


Or, maybe, an alternative could be to add a `-install` switch to the use command, to allow installing the new version if not yet installed.

    nvm use 13.2.0 -install




### Actual Behavior



### Steps to reproduce the problem:





### My Environment

- [ ] Windows 7 or below (not truly supported due to EOL - see wiki for details)
- [ ] Windows 8
- [ ] Windows 8.1
- [x] Windows 10
- [ ] Windows 10 IoT Core
- [ ] Windows Server 2012
- [ ] Windows Server 2012 R2
- [ ] Windows Server 2016

- [ ] My Windows installation is non-English.

### I'm using NVM4W version:

- [x] 1.1.7
- [ ] 1.1.6
- [ ] 1.1.5
- [ ] 1.1.4
- [ ] 1.1.3
- [ ] 1.1.2
- [ ] 1.1.1
- [ ] Older
- [ ] OTHER (Please Specify)

### I have already...

- [x] read the README to be aware of npm gotchas & antivirus issues.
- [x] reviewed the [wiki](https://github.com/coreybutler/nvm-windows/wiki) to make sure my issue hasn't already been resolved.
- [x] verified I'm using an account with administrative privileges.
- [x] searched the issues (open and closed) to make sure this isn't a duplicate.
- [x] made sure this isn't a question about how to use NVM for Windows, since [gitter](https://gitter.im/coreybutler/nvm-windows?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) is used for questions and comments.

### My issue is related to (check only those which apply):

- [ ] settings.txt
- [ ] proxy support (Have you tried version 1.1.0+?)
- [ ] 32 or 64 bit support (Have you tried version 1.1.3+?)
- [ ] Character escaping (Have you tried version 1.1.6+?)
- [x] A standard shell environment (terminal/powershell)
- [ ] A non-standard shell environment (Cmder, Hyper, Cygwin, git)

### Expected Behavior

When changing the active NodeJS installation between versions, `nvm` should display a UAC elevation prompt at most _once_.

### Actual Behavior

`nvm` displays a UAC elevation prompt _twice_:

https://github.com/coreybutler/nvm-windows/blob/15c5743f9c3ccba7f32acb1f9153ac6f966d76b3/src/nvm.go#L400-L415

- Once to remove the existing symlink: https://github.com/coreybutler/nvm-windows/blob/15c5743f9c3ccba7f32acb1f9153ac6f966d76b3/src/nvm.go#L402
- Once to add the new symlink: https://github.com/coreybutler/nvm-windows/blob/15c5743f9c3ccba7f32acb1f9153ac6f966d76b3/src/nvm.go#L410

### Steps to reproduce the problem:

1. With `nvm` disabled (i.e. no symlinks exist) and two different installed versions of NodeJS (`X` and `Y`):
    1. `nvm use X` for an installed version `X`. UAC prompt appears _once_.
    1. `nvm use Y` for an installed version `Y`. UAC prompt appears _twice_.

It seems that there are a lot of PR's still open or not reviewed. Not a motivation to get contributions.
The latest release is from more than a year ago. 

Do you need any help?

ps.: sorry if I reached out via this way but I hope you are looking at this.
If this is a question about how to use NVM4W, please use [stackoverflow](http://stackoverflow.com/questions/tagged/nvm-windows) instead.

If this is an issue regarding antivirus, make sure you search the existing issues first.

### My Environment

- [ ] Windows 7 or below (not truly supported due to EOL - see wiki for details)
- [ ] Windows 8
- [ ] Windows 8.1
- [x] Windows 10
- [ ] Windows 10 IoT Core
- [ ] Windows Server 2012
- [ ] Windows Server 2012 R2
- [ ] Windows Server 2016

- [ ] My Windows installation is non-English.

### I'm using NVM4W version:

- [x] 1.1.7
- [ ] 1.1.6
- [ ] 1.1.5
- [ ] 1.1.4
- [ ] 1.1.3
- [ ] 1.1.2
- [ ] 1.1.1
- [ ] Older
- [ ] OTHER (Please Specify)

### I have already...

- [x] read the README to be aware of npm gotchas & antivirus issues.
- [x] reviewed the [wiki](https://github.com/coreybutler/nvm-windows/wiki) to make sure my issue hasn't already been resolved.
- [x] verified I'm using an account with administrative privileges.
- [x] searched the issues (open and closed) to make sure this isn't a duplicate.
- [x] made sure this isn't a question about how to use NVM for Windows, since [gitter](https://gitter.im/coreybutler/nvm-windows?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) is used for questions and comments.

### My issue is related to (check only those which apply):

- [ ] settings.txt
- [ ] proxy support (Have you tried version 1.1.0+?)
- [ ] 32 or 64 bit support (Have you tried version 1.1.3+?)
- [ ] Character escaping (Have you tried version 1.1.6+?)
- [ ] A standard shell environment (terminal/powershell)
- [ ] A non-standard shell environment (Cmder, Hyper, Cygwin, git)
- [x] A feature request

### Expected Behavior

It would be a great feature to let the users name their node versions.
It wouldn't require changing any existing behaviour, it would be just 2 extra commands maybe:
- One is for assigning a custom name to a version
- And another one for setting the version based on the custom name

So you don't have to remember which version are you using in which project.
I think it's a minimal effort change which brings a really good feature on the table.