**Describe the bug**
Lambda triggers generated code with boilerplates has a long startup time (4 seconds).

**Amplify CLI Version**
4.12.0

**To Reproduce**
Generating any cognito triggers boilerplates as per: https://aws-amplify.github.io/docs/cli-toolchain/cognito-triggers

It generate an index.js like this:
```
exports.handler = (event, context, callback) => {
  const modules = process.env.MODULES.split(',');
  for (let i = 0; i < modules.length; i += 1) {
    const { handler } = require(`./${modules[i]}`);
    handler(event, context, callback);
  }
};
```

**Expected behavior**
Lambda to finish execution without a timeout.

**Screenshots**
![image](https://user-images.githubusercontent.com/58069/72656711-44fdf780-396b-11ea-8a3e-199f778fc368.png)

Second call to the function is faster and doesn't timeout.

**Desktop (please complete the following information):**
 - OS: Mac
 - Node Version: AWS Nodejs 10.x
 - Region: us-east-2

**Additional context**
If you overwrite the content of index.js with the code of the generated boilerplate (for example, boilerplate-create-challenge.js for createAuthChallenge trigger), then execution time is back to normal (250ms - 500 ms). Even for a cold start (first execution).


**Describe the bug**
DataStore code generation fails when following documentation for multiple frontends. The Amplify CLI seems to expect that the `amplify` directory exists; however, it does *not* exist in cases after an `amplify pull` in which the developer opts to not manage the backend from the project.

**Amplify CLI Version**
4.12.0

**To Reproduce**

1. Create frontend 1 (e.g. React)
2. Initialize new Amplify project and add API. Generate model code.
3. Create frontend 2 (e.g. iOS app) that will use same backend.
4. Use `amplify pull` to retrieve the backend project. Select the desired project. When prompted with the question "Do you plan on modifying your backend (Y/n)?", select "No" per [documentation](https://aws-amplify.github.io/docs/cli-toolchain/quickstart). Two files will be created in project: (1) `amplifyconfiguration.json` and (2) `awsconfiguration.json`. (NOTE: the amplify directory will be briefly created and then destroyed when selecting No).
5. Attempt to generate model classes for DataStore using `amplify codegen models`.

Error:

```
You are not working inside a valid amplify project.
Use 'amplify init' in the root of your app directory to initialize your project with Amplify
Error: You are not working inside a valid amplify project.
```

**Expected behavior**
Code generation should complete successfully, creating model classes, etc.


** Which Category is your question related to? **
Auth, API, Function
** What AWS Services are you utilizing? **
Cognito

What am I supposed to do, use ```amplify publish``` after every git push and get a cloudfront domain? Is it possible to use the amplify CI/CD pipeline with hosting? Or do I ```amplify push``` my backend, and create a front end connection within the amplify GUI to take advantage of CICD on git push? If I hook up my Backend composed of Auth, API with cognito authentication and an add user to group Function - I get ```update failed authProjectXXXXX     Parameters: [hostedUIProviderCreds] must have values.``` when the Amplify console build starts,  but on initial ```amplify push``` Successfully completes with zero failures.
*Issue #, if available:*
N/A

*Description of changes:*

tsconfig.json file for amplify-cli contained a property `compilerOptions.mapRoot` = “lib”
that would cause `tsc` (version 3.7.5, latest) command to produce

{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings”:”…”}

Sources *should* read: “../src/index.ts”.

I’m not exactly sure how/why its set up this way, but all other tsconfig files in this project do not specify
a mapRoot, so this change brings this in line with all the other packages, and now I can debug the cli
package again :)


By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.
**Which Category is your question related to?**
Storage

**Amplify CLI Version** 
4.6.0

**What AWS Services are you utilizing?**
DynamoDB, Lambda, S3, Cloudfront

**Provide additional details e.g. code snippets**
I'm wondering if it's possible to add storage without requiring the use of cognito?
** Which Category is your question related to? **
deployment

** What AWS Services are you utilizing? **
S3

** Provide additional details e.g. code snippets **
* I accidentally removed S3 deployment bucket which amplify uses to deploy resources.

Same as here: https://github.com/aws-amplify/amplify-cli/issues/1441

What I did:

* Open `amplify\backend\amplify-meta.json` and look for the value of "DeploymentBucketName"
* Create a bucket in S3 with the value of "DeploymentBucketName"
```
aws s3api create-bucket --bucket mycoolapp-xxxxx-deployment --region eu-central-1 --create-bucket-configuration LocationConstraint=eu-central-1
```

* My API Key was outdated then I created a new in AWS Appsync and added it to the `aws-export` file. Also added it to `amplify-meta.json`

* amplify-meta.json
```
"GraphQLAPIKeyOutput": "NEW API KEY"
```

* parameters.json
```
I set   `"APIKeyExpirationEpoch": "-1"` 
```

```
amplify update api
# -> GraphQL
# -> no im done
```

```
amplify push
```

## Error

```
Fetching updates to backend environment: prod from the cloud.(node:80295) UnhandledPromiseRejectionWarning: NoSuchKey: The specified key does not exist.
```
*Issue #, if available:*
N/A

*Description of changes:*
As a developer, I would like an accurate link to the page that describes how to write a custom transformer.

By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.
**Describe the bug**
`amplify mock` returns the full `data` object passed as 3rd argument for `$util.error(String, String, Object)`. However according to the documentation (https://docs.aws.amazon.com/appsync/latest/devguide/resolver-util-reference.html) it should only return the selected fields: _"data will be filtered based on the query selection set."_. This is also how it works within AppSync.

**Amplify CLI Version**
3.9.0

**To Reproduce**
Handle an error in the response mapping template using `$util.error(String, String, Object)`. And test this with `amplify mock`.

**Expected behavior**
The `data` property of the error should only return the selected fields


**Desktop (please complete the following information):**
 - OS: Windows
 - Node Version. v12.13.1

GraphQL expects a "String" scalar however modelgen with the Amplify CLI 4.12.0 creates a “string" type in `models/schema.js` with React. Which means the field doesn't show up in IndexedDB locally when using the Amplify DataStore. Manually editing the `models/schema.js` and changing to "String" solves the problem

Sample schema I was testing with:

`type Note @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  note: String
}`

*Issue #, if available:*
This PR fixes the Amplify Console issue [#355](https://github.com/aws-amplify/amplify-console/issues/355); 

*Description of changes:*
Add check on if a project is fully setup for the amplify service migration logic.

By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.