### Preflight Checklist

* [ x] I have read the [contribution documentation](https://github.com/electron-userland/electron-forge/blob/master/CONTRIBUTING.md) for this project.
* [ x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [x ] I have searched the issue tracker for a feature request that matches the one I want to file, without success.




### Problem Description

I have a very specific use case and I couldn't see if it was possible to do. In which case, this is a feature request. If it is possible (because I overlooked something in docs), can you please give guidance on the best approach to achieve my aims.


A. After the `app.asar` and `electron.asar` files are generated I need to be able to write a script or something to intercept the electron-forge build process to calculate the **MD5 hash of both files.**

B. After [A] but before completion of electron-forge process, I need to run my own command to generate my own file (an executable file) which is built based on the md5 hash from step [A]

C. I need to copy my executable file so that it sits beside the `electron` executable file (for Win and Mac)

D. **For Mac only**: I need to modify the `plist` file so that the `.app` "bundle" launches my executable file instead of the standard electron application.

E. Electron-forge should continue it's standard process.


**Can this be achieved somehow? If not, what would I need to modify in electron-forge to achieve it. Is it difficult?**

### Issue Details

Electron Forge Version: 6.0.0-beta.47
Electron Version: v7.1.9
Operating System: macOS 10.14.6
Last Known Working Electron Forge version: Unknown

### Expected Behavior

App should start without error.

### Actual Behavior

Attempting to use zeroMQ (https://github.com/zeromq/zeromq.js/) with electron-forge webpack template.

App fails to start reporting:

`Error: No native build was found for platform=darwin arch=x64 runtime=electron abi=75 uv=1 libc=glibc`


### To Reproduce

(1) Instantiate new electron app with webpack template 
`yarn create electron-app my-new-app --template=webpack`

(2) Install zeroMQ 
`yarn add zeromq`

(3) Import zeroMQ in main.js
`const zmq = require('zeromq')`

(4) Start app
`yarn start`

### Additional Information

If the same steps are followed as above but without `--template=webpack`, no issues are encountered. As such, problem appears to be with the webpack template.
### Preflight Checklist
<!-- Please ensure you've completed the following steps by replacing [ ] with [x]-->

* [x] I have read the [contribution documentation](https://github.com/electron-userland/electron-forge/blob/master/CONTRIBUTING.md) for this project.
* [x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [x] I have searched the issue tracker for a bug that matches the one I want to file, without success.

### Issue Details

* **Electron Forge Version:**
  * 6.0.0-beta.47 
* **Electron Version:**
  * v7.1.8 
* **Operating System:**
  * Windows 10<!-- (Platform and Version) e.g. macOS 10.13.6 / Windows 10 (1803) / Ubuntu 18.04 x64 -->
* **Last Known Working Electron Forge version:**:
  * <!-- (if applicable) e.g. 6.0.0-beta.44 -->

### Expected Behavior

When I run

```
electron-forge make --platform win32
```

the files `out\make\squirrel.windows\x64\*Setup.exe`,  `out\make\squirrel.windows\x64\*full.nupkg` and  `out\make\squirrel.windows\x64\RELEASES` are created. If I run the command again after a version bump, the old files stay, new files are created, an additional  `out\make\squirrel.windows\x64Â´*delta.nupkg` is created and the RELEASES files is updated with the new version.

### Actual Behavior
<!-- A clear and concise description of what actually happened. -->
The folder `out\make\squirrel.windows\x64` gets wiped out on every make. https://github.com/electron-userland/electron-forge/blob/a2de8ea5ec7d66725cd20ef8dabbd727843b52a3/packages/maker/squirrel/src/MakerSquirrel.ts#L26-L27 and https://github.com/electron-userland/electron-forge/blob/d4e402d35fe6a69175129dccdc9d9931115474e0/packages/maker/base/src/Maker.ts#L126-L131

### To Reproduce
<!--
Your best chance of getting this bug looked at quickly is to provide a MINIMAL REPOSITORY that can be cloned and run. Also include:
* if you are using the `electron-packager` CLI: the command line arguments you are passing
* if you are using the API the parameters are you passing to the `packager()` function
-->
Run

```
electron-forge make --platform win32
```

in a project that has squirrel configured as target. Make some change to the project and rerun the command.

### Additional Information
To create delta updates, squirrel needs the old build files. My current workaround is to add following hook in forge.config.js :

```js
  "hooks": {
    "preMake": async function() {
      // rescue squirrel output files from being deleted so that diff can be created by squirrel
      const tmpDir = path.resolve('./out/tmp');
      try { await fs.rmdir(tmpDir) }
      catch(e) { if (e.code != 'ENOENT') throw e }
      await fs.mkdir(tmpDir)
      const outPath = path.resolve('./out/make/squirrel.windows/x64');
      await Promise.all(
        (await fs.readdir(outPath)).map(
          file => fs.rename(path.join(outPath, file), path.join(tmpDir, file))
        )
      )
      // schedule copy back after some seconds; the build lasts more than 1 minute
      setTimeout(
        async () => (await fs.readdir(tmpDir)).map(
          file => fs.rename(path.join(tmpDir, file), path.join(outPath, file))
        ),
        5000
      );
    }
  }
```
<!--
Add any other context about the problem here.

For example:
* Console output when you run your `electron-forge` command with the environment variable
  `DEBUG=electron-forge:*`. (Instructions on how to do so
  [here](https://www.npmjs.com/package/debug#usage)). Please include the stack trace if
  one exists.
* Command line arguments you are passing to `electron-forge` (e.g.,
  `electron-forge make --not-a-real-flag`)
* The `config.forge` data in `package.json` or `forge.config.js` in use
* A failing minimal testcase (with a link to the code) or detailed steps to reproduce the problem.
  Using `electron-forge init` is a good starting point, if that is not the source of your problem.
-->

I'd rather like MakerSquirrel to not delete the outPath in the first place.
### Preflight Checklist
* [x] I have read the [contribution documentation](https://github.com/electron-userland/electron-forge/blob/master/CONTRIBUTING.md) for this project.
* [x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [x] I have searched the issue tracker for a bug that matches the one I want to file, without success.

### Issue Details

* **Electron Forge Version:** 6.0.0-beta.47
* **Electron Version:**: v6.1.7
* **Operating System:** macOS 10.15.2

### Expected Behavior

Load the native module.

### Actual Behavior

The native module is in the correct path:
 
`/Users/antoniomgatto/projects/electron-printer-test/.webpack/main/native_modules//lib/node_printer.node`

but the app crash with this output.

`
App threw an error during load
Error: Cannot find module '/Users/antoniomgatto/projects/electron-printer-test/.webpack/main/native_modules//lib/node_printer.node'
    at webpackEmptyContext (/Users/antoniomgatto/projects/electron-printer-test/.webpack/main/index.js:8956:10)
    at Object../node_modules/printer/lib/printer.js (/Users/antoniomgatto/projects/electron-printer-test/.webpack/main/index.js:9002:86)
    at __webpack_require__ (/Users/antoniomgatto/projects/electron-printer-test/.webpack/main/index.js:21:30)
    at Module../src/main.js (/Users/antoniomgatto/projects/electron-printer-test/.webpack/main/index.js:10138:65)
    at __webpack_require__ (/Users/antoniomgatto/projects/electron-printer-test/.webpack/main/index.js:21:30)
    at /Users/antoniomgatto/projects/electron-printer-test/.webpack/main/index.js:85:18
    at Object.<anonymous> (/Users/antoniomgatto/projects/electron-printer-test/.webpack/main/index.js:88:10)
    at Module._compile (internal/modules/cjs/loader.js:786:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:798:10)
    at Module.load (internal/modules/cjs/loader.js:645:32)
webpack built b17b24ad1f3cf056d7d3 in 1107ms
`

### To Reproduce

https://github.com/antoniomgatto/electron-forge-test

Steps to reproduce the error:
```
yarn
yarn start
```

### Additional Information

I created this project with the command below:

N/A


### Preflight Checklist

* [x] I have read the [contribution documentation](https://github.com/electron-userland/electron-forge/blob/master/CONTRIBUTING.md) for this project.
* [x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [x] I have searched the issue tracker for a bug that matches the one I want to file, without success.

### Issue Details

* **Electron Forge Version:**
  * 6.0.0-beta.47
* **Electron Version:**
  * 7.1.8
* **Operating System:**
  * Windows 10 (1909)
* **Last Known Working Electron Forge version:**:
  * None

### Expected Behavior
I was making a preload script, and then connecting by following this scheme (https://js.electronforge.io/plugin/webpack/interfaces/webpackpreloadentrypoint) in package.json

### Actual Behavior
<!-- A clear and concise description of what actually happened. -->

### To Reproduce
1. Create new app using 'npx create-electron-app my-new-app --template=typescript-webpack'
2. Add any preload.ts file
3. Add MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY to main.ts file
4. Add to preload config to package.json

You can clone my [repository](https://github.com/Andreybest/electron-forge-ts-webpack-preload-bug) to see the issue.

### Additional Information

Just using 'electron-forge start' to start the project, and then it stucks.
![Picture](https://user-images.githubusercontent.com/20759487/72073853-75092300-32f9-11ea-9495-15bbcf24ed95.png)

### Preflight Checklist
<!-- Please ensure you've completed the following steps by replacing [ ] with [x]-->

* [x ] I have read the [contribution documentation](https://github.com/electron-userland/electron-forge/blob/master/CONTRIBUTING.md) for this project.
* [ x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [ x] I have searched the issue tracker for a bug that matches the one I want to file, without success.

### Issue Details

* **Electron Forge Version:**
  * 6.0.0-beta.47
* **Electron Version:**
  * 7.1.7
* **Operating System:**
  * Windows 7 Pro SP1

### Expected Behavior
Building for ia32 the icon defined in makers.config.setupIcon should be used for the setup icon

### Actual Behavior
A two color windows icon with a bow on top is used as the setup icon.  Guessing this is a default?  Note, the loading image and application icon are set properly and the setup icon is working as expected if I build for x64 it's only the ia32 build that the setup icon isn't set properly.

### To Reproduce
Command:
electron-forge make --arch ia32 @electron-forge/maker-squirrel

Note, building for x64 everything works as expected.

### Additional Information
Forge.config.js
```
const path = require('path');
module.exports = {
    packagerConfig: {
      appCopyright: "...",
      icon: path.resolve(__dirname,"src/assets/icons/appicon/icon"),
    },
    makers: [
        {
            name: '@electron-forge/maker-squirrel',
            config: {
                authors: '...',
                copyright: "...",
                description: "...",
                iconUrl: "https://.../img/win/icon.ico",
		setupIcon: "src/assets/icons/appicon/icon.ico",
                loadingGif: "Loader600w.gif"
            }
        }
    ]
}
```
Iam using the electron-settings module.
It is remote required in the renderer process. While developing everything works fine. After making and packaging the project i run into this issue:

Project is based of the webpack template

error-utils.ts:14 Uncaught Error: Cannot find module 'electron-settings'
Require stack:
- C:\Users\ruohk\AppData\Local\lunchpad\app-0.0.1\resources\app\.webpack\main\index.js
- 
    at Module._resolveFilename (internal/modules/cjs/loader.js:717)
    at Function../lib/common/reset-search-paths.ts.Module._resolveFilename (electron/js2c/browser_init.js:7615)
    at Module._load (internal/modules/cjs/loader.js:622)
    at Module._load (electron/js2c/asar.js:717)
    at Function.Module._load (electron/js2c/asar.js:717)
    at Module.require (internal/modules/cjs/loader.js:775)
    at electron/js2c/browser_init.js:6515
    at EventEmitter.<anonymous> (electron/js2c/browser_init.js:6479)
    at EventEmitter.emit (events.js:203)
    at WebContents.<anonymous> (electron/js2c/browser_init.js:3850)

Iam running the latest version of electron-forge
### Preflight Checklist
<!-- Please ensure you've completed the following steps by replacing [ ] with [x]-->

* [X] I have read the [contribution documentation](https://github.com/electron-userland/electron-forge/blob/master/CONTRIBUTING.md) for this project.
* [X] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [X] I have searched the issue tracker for a bug that matches the one I want to file, without success.

### Issue Details

* **Electron Forge Version:**
  * 6.0.0-beta.47
* **Electron Version:**
  * v7.1.7
* **Operating System:**
  * macOS 10.14.6 (18G95)
* **Last Known Working Electron Forge version:**:
  * none

### Expected Behavior
No error

### Actual Behavior

![CleanShot 2020-01-01 at 02 31 01](https://user-images.githubusercontent.com/14089557/71632022-c6048180-2c3e-11ea-844b-cd1e1a75b583.png)

### To Reproduce
<!--
Your best chance of getting this bug looked at quickly is to provide a MINIMAL REPOSITORY that can be cloned and run. Also include:
* if you are using the `electron-packager` CLI: the command line arguments you are passing
* if you are using the API the parameters are you passing to the `packager()` function
-->

- This is the error repository: https://github.com/kamontat/KingKnight/tree/issues/yarn-workspace
- In order to run the project:
    - run `yarn install:all`
    - run `yarn compile`
    - run `yarn start`

### Additional Information

Error log:

```
@kk/app: $ electron-forge start
@kk/app: WARNING: DEBUG environment variable detected.  Progress indicators will be sent over electron-forge:lifecycle
@kk/app: 2019-12-31T19:33:52.010Z electron-forge:async-ora Process Started: Checking your system
@kk/app: 2019-12-31T19:33:52.011Z electron-forge:check-system checking system, create ~/.skip-forge-system-check to stop doing this
@kk/app: 2019-12-31T19:33:52.269Z electron-forge:async-ora Process Succeeded: Checking your system -- after 259ms
@kk/app: WARNING: DEBUG environment variable detected.  Progress indicators will be sent over electron-forge:lifecycle
@kk/app: 2019-12-31T19:33:52.601Z electron-forge:async-ora Process Started: Locating Application
@kk/app: 2019-12-31T19:33:52.602Z electron-forge:project-resolver searching for project in: /Users/kchantrachir/Desktop/Personal/KingKnight/packages/app
@kk/app: 2019-12-31T19:33:52.603Z electron-forge:project-resolver electron-forge compatible package.json found in /Users/kchantrachir/Desktop/Personal/KingKnight/packages/app/package.json
@kk/app: 2019-12-31T19:33:52.603Z electron-forge:async-ora Process Succeeded: Locating Application -- after 2ms
@kk/app: 2019-12-31T19:33:52.606Z electron-forge:require-search searching [
@kk/app:   '@electron-forge/plugin-webpack',
@kk/app:   '/Users/kchantrachir/Desktop/Personal/KingKnight/packages/app/@electron-forge/plugin-webpack',
@kk/app:   '/Users/kchantrachir/Desktop/Personal/KingKnight/packages/app/node_modules/@electron-forge/plugin-webpack'
@kk/app: ] relative to /Users/kchantrachir/Desktop/Personal/KingKnight/packages/app
@kk/app: 2019-12-31T19:33:52.607Z electron-forge:require-search testing @electron-forge/plugin-webpack
@kk/app: 2019-12-31T19:33:52.848Z electron-forge:plugin:webpack hooking process events
@kk/app: 2019-12-31T19:33:52.850Z electron-forge:async-ora Process Started: Preparing native dependencies
@kk/app: 2019-12-31T19:33:52.856Z electron-forge:async-ora Process Succeeded: Preparing native dependencies -- after 6ms
@kk/app: 2019-12-31T19:33:52.856Z electron-forge:plugins plugin: "webpack" has taken control of the start command
@kk/app: 2019-12-31T19:33:52.861Z electron-forge:async-ora Process Started: Compiling Main Process Code
@kk/app: Starting type checking service...
@kk/app: Using 1 worker with 2048MB memory limit
@kk/app: 2019-12-31T19:33:56.618Z electron-forge:async-ora Process Succeeded: Compiling Main Process Code -- after 3.8s
@kk/app: 2019-12-31T19:33:56.618Z electron-forge:async-ora Process Started: Launch Dev Servers
@kk/app: 2019-12-31T19:33:56.635Z electron-forge:async-ora Process Succeeded: Launch Dev Servers -- after 17ms
@kk/app: 2019-12-31T19:33:56.635Z electron-forge:async-ora Process Started: Compiling Preload Scripts
@kk/app: 2019-12-31T19:33:56.635Z electron-forge:async-ora Process Succeeded: Compiling Preload Scripts -- after 0ms
@kk/app:
@kk/app: An unhandled rejection has occurred inside Forge:
@kk/app: Error: Cannot find module '/Users/kchantrachir/Desktop/Personal/KingKnight/packages/app/node_modules/electron'
@kk/app: Require stack:
@kk/app: - /Users/kchantrachir/Desktop/Personal/KingKnight/node_modules/@electron-forge/core/dist/api/start.js
@kk/app: - /Users/kchantrachir/Desktop/Personal/KingKnight/node_modules/@electron-forge/core/dist/api/index.js
@kk/app: - /Users/kchantrachir/Desktop/Personal/KingKnight/node_modules/@electron-forge/cli/dist/electron-forge-start.js
@kk/app:     at Function.Module._resolveFilename (internal/modules/cjs/loader.js:797:15)
@kk/app:     at Function.Module._load (internal/modules/cjs/loader.js:690:27)
@kk/app:     at Module.require (internal/modules/cjs/loader.js:852:19)
@kk/app:     at require (internal/modules/cjs/helpers.js:74:18)
@kk/app:     at forgeSpawn (/Users/kchantrachir/Desktop/Personal/KingKnight/node_modules/@electron-forge/core/src/api/start.ts:81:26)
@kk/app:     at processTicksAndRejections (internal/process/task_queues.js:93:5)
@kk/app:     at forgeSpawnWrapper (/Users/kchantrachir/Desktop/Personal/KingKnight/node_modules/@electron-forge/core/src/api/start.ts:121:21)
@kk/app:     at /Users/kchantrachir/Desktop/Personal/KingKnight/node_modules/@electron-forge/cli/src/electron-forge-start.ts:59:19 {
@kk/app:   code: 'MODULE_NOT_FOUND',
@kk/app:   requireStack: [
@kk/app:     '/Users/kchantrachir/Desktop/Personal/KingKnight/node_modules/@electron-forge/core/dist/api/start.js',
@kk/app:     '/Users/kchantrachir/Desktop/Personal/KingKnight/node_modules/@electron-forge/core/dist/api/index.js',
@kk/app:     '/Users/kchantrachir/Desktop/Personal/KingKnight/node_modules/@electron-forge/cli/dist/electron-forge-start.js'
@kk/app:   ]
@kk/app: }
@kk/app:
@kk/app: Electron Forge was terminated. Location:
@kk/app: {}
@kk/app: 2019-12-31T19:33:56.644Z electron-forge:plugin:webpack handling process exit with: { cleanup: true }
@kk/app: 2019-12-31T19:33:56.644Z electron-forge:plugin:webpack cleaning webpack watcher
@kk/app: 2019-12-31T19:33:56.645Z electron-forge:plugin:webpack cleaning http server
@kk/app: 2019-12-31T19:33:56.645Z electron-forge:plugin:webpack stopping logger
```

This is a code that might relate to this issue

https://github.com/electron-userland/electron-forge/blob/9b8a2a6acbccf280472b0a378451d6520322a542/packages/api/core/src/api/start.ts#L81

<!--
Add any other context about the problem here.

For example:
* Console output when you run your `electron-forge` command with the environment variable
  `DEBUG=electron-forge:*`. (Instructions on how to do so
  [here](https://www.npmjs.com/package/debug#usage)). Please include the stack trace if
  one exists.
* Command line arguments you are passing to `electron-forge` (e.g.,
  `electron-forge make --not-a-real-flag`)
* The `config.forge` data in `package.json` or `forge.config.js` in use
* A failing minimal testcase (with a link to the code) or detailed steps to reproduce the problem.
  Using `electron-forge init` is a good starting point, if that is not the source of your problem.

### Preflight Checklist
<!-- Please ensure you've completed the following steps by replacing [ ] with [x]-->

* [x] I have read the [contribution documentation](https://github.com/electron-userland/electron-forge/blob/master/CONTRIBUTING.md) for this project.
* [x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [x] I have searched the issue tracker for a feature request that matches the one I want to file, without success.

### Problem Description
I'd like to have an option to disable interactive mode. There are certain cases where it's impossible to properly recover from an error, and `interactive: true` mode cripples the terminal if not terminated properly.

### Proposed Solution
Introduce an env var (preferable) or cli argument to disable the interactive mode.

### Alternatives Considered
<!-- A clear and concise description of any alternative solutions or features you've considered. -->

- Proper handling of all the crashes.
  This is an ongoing process, however, it's impossible to cover all the edge cases (i.e. catch
  segfaults properly). While we improve the crash recovery logic, it's good to provide users an option
  to work around the issue. This is a very simple solution to a serious problem. Waiting until we to fix
  all the issues is waiting for a neverending thing - realistically, there will always be something that 
  casues the process to crash.

- Removing interactive mode altogether.
  This is a good thing in general, it is only when iterating under a certain condition ine would disable 
  the interactive mode.

- Ignore it and just do an external terminal reset.
  Not everyone is aware this is even possible, and it is very inconvenient. Simply disabling the 
  the interactive mode would completely solve the issue though, and it would work for everyone.

### Additional Information
<!-- Add any other context about the problem here. This may include the use case for the feature. -->

Relevant code locations:

https://github.com/electron-userland/electron-forge/blob/6bd2bfcfe6d65d31bb08f2fcc244e65985964c45/packages/api/cli/src/electron-forge-lint.ts#L20

https://github.com/electron-userland/electron-forge/blob/6bd2bfcfe6d65d31bb08f2fcc244e65985964c45/packages/api/cli/src/electron-forge-import.ts#L20

https://github.com/electron-userland/electron-forge/blob/dcdc2a1cd70f16620c5f6cc5473baf0c0ea4aba7/packages/api/cli/src/electron-forge-init.ts#L23

https://github.com/electron-userland/electron-forge/blob/4c4e3d68aa21e33a9546395ed3d55afcd5b3f8c1/packages/api/cli/src/electron-forge-install.ts#L38

https://github.com/electron-userland/electron-forge/blob/4c4e3d68aa21e33a9546395ed3d55afcd5b3f8c1/packages/api/cli/src/electron-forge-install.ts#L38

https://github.com/electron-userland/electron-forge/blob/d65f33e73f5afe14597135755aa795edf6a818f2/packages/api/cli/src/electron-forge-publish.ts#L28

https://github.com/electron-userland/electron-forge/blob/d65f33e73f5afe14597135755aa795edf6a818f2/packages/api/cli/src/electron-forge-make.ts#L27

https://github.com/electron-userland/electron-forge/blob/abbf0311a4b615c2c3219256b3825eb638fc0f44/packages/api/cli/src/electron-forge-start.ts#L43
Fix the debugger script to fix #1369, while still supporting the fix for #535.

<!--
Thanks for filing a pull request!
Please check off all of the steps as they are completed by replacing [ ] with [x].
-->

* [x] I have read the [contribution documentation](https://github.com/electron-userland/electron-forge/blob/master/CONTRIBUTING.md) for this project.
* [x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [ ] The changes are appropriately documented (if applicable).
* [ ] The changes have sufficient test coverage (if applicable).
* [ ] The testsuite passes successfully on my local machine (if applicable).

**Summarize your changes:**

Given the environment in #1369, this change supports running the debugger script, without breaking changes for users relying on the previous path structure. (Assuming it worked previously?)