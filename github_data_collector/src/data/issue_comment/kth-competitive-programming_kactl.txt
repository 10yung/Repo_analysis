Pretty neat implementation.

Integrates this: https://codeforces.com/blog/entry/53170

Will write fuzz test in morning - have tested on small examples only.
Still remaining: something about queries on trees (comment or code, not sure).
Doesn't add too many lines, nor does it affect perf at all. Also adds a supporting DSU with rollback. The most controversial part of this is removing the standard DSU from the pdf.

Closes #120.
We're mixing snake_case, camelCase and UpperCamelCase. I think we should go with camelCase except where consistency with STL is desired (like defining a `lower_bound` method)
Init function https://github.com/ecnerwala/icpc-book/blob/master/content/numerical/fft.cpp
init_fft in https://github.com/Ashishgup1/Competitive-Coding/blob/master/FFT%20(Recursive).cpp  

Precomputing powers of roots similar to above FFT's should reduce constant factor. Right now NTT computes them in every convolution.  

Constant factor did reduce by 3-4 times when this optimisation on https://www.codechef.com/viewsolution/26468080
It's seldom useful, easy to add manually and costs lines.
https://codeforces.com/blog/entry/53925
No tests - sanity checked it.
I'd like to cram as much geometry as possible into KACTL. Perhaps not necessarily included by default, but some of these things would be nice to have. Taking lots of these from https://github.com/spaghetti-source/algorithm/tree/master/geometry

- [ ] O(N^2 log N) circle union ([xyz](https://github.com/ecnerwala/icpc-book/blob/master/xyz/codes/old_template/geometry_circle_union.cpp))
- [x] Area of circle intersection ([xyz](https://github.com/ecnerwala/icpc-book/blob/master/xyz/codes/old_template/geometry_all.cpp#L290), [viet](https://github.com/ngthanhtrung23/ACM_Notebook_new/blob/master/Geometry_v2/2d_obj.h#L269), [spaghetti](https://github.com/spaghetti-source/algorithm/blob/master/geometry/_geom.cc#L729))
- [x] Manhattan MST (issue exists here: https://github.com/kth-competitive-programming/kactl/issues/10), implementation here: https://github.com/spaghetti-source/algorithm/blob/master/geometry/rectilinear_mst.cc#L105
- [ ] Polygon triangulation
- [ ] Tangent circles (given 2 lines find the circles of radius r that touch those lines)
- [ ] Maximum circle cover (find circle of radius r that covers as many points as possible)
- [x] number of lattice points below a line.
- [ ] construct visibility graph in O(points^2 * obstacles)
- [ ] Maximum area of empty convex k-gon (given a set of points)
- [x] test whether two polygons are congruent/similar (easy enough if you know the idea).
- [ ] tangent from point to convex polygon (apparently at WF ICPC 2016?)
- [ ] Minkowski Sum

Fuzz tested.

There exists a `n log n + k` algorithm, where k is the number of intersections, but I think it's significantly more complicated.