**Is your feature request related to a problem? Please describe.**
No, it's a feature

**Describe the solution you'd like**
Add EAP authentication to the list of fake access point authentication types.


**Describe the bug**
After installing dependencies and running eaphammer, the script hangs on 'Saving Current IP Configuration' with no error messages. I've also tried running the above with a second wifi adapter identified by wlan1 with no success.

**To Reproduce**

Steps to reproduce the behavior:

1. ./kali-setup
2. ./eaphammer --cert-wizard
3. ./eaphammer -i wlan0 --channel 4 --auth wpa-eap --essid ECorp --creds

**Preview**

root@kali:~/eaphammer/eaphammer# ./eaphammer -i wlan1 --channel 4 --auth wpa-eap --essid CorpWifi --creds


[ ? ] Am I root?
[ * ] Checking for rootness...
[ * ] I AM ROOOOOOOOOOOOT
[ * ] Root privs confirmed! 8D
[ * ] Saving current iptables configuration...

**Command string(s) used**

./eaphammer -i wlan1 --channel 4 --auth wpa-eap --essid 

**EAPHammer verbose output (using the --debug flag)**

    "email": null,
    "essid": "CorpWifi",
    "fragm_threshold": null,
    "greenfield": false,
    "hostile_portal": false,
    "ht40": null,
    "ht_delayed_block_ack": false,
    "hw_mode": null,
    "interface": "wlan0",
    "interface_pool": null,
    "karma": false,
    "key_length": 2048,
    "known_beacons": false,
    "known_ssids": null,
    "known_ssids_file": null,
    "ldpc": false,
    "locale": null,
    "loud": false,
    "lsig_txop_prot": false,
    "mac_blacklist": null,
    "mac_whitelist": null,
    "manual_config": null,
    "max_num_stations": null,
    "max_spatial_streams": null,
    "negotiate": "balanced",
    "not_after": 94608000,
    "not_before": 0,
    "obss_interval": null,
    "org": null,
    "org_unit": null,
    "owe_transition_bssid": null,
    "owe_transition_ssid": null,
    "password": null,
    "peap_version": null,
    "pivot": false,
    "pmf": null,
    "pmkid": false,
    "private_key": null,
    "private_key_passwd": null,
    "psk_capture_file": null,
    "reap_creds": true,
    "remote_rig": null,
    "require_ht": false,
    "rts_threshold": null,
    "save_config": null,
    "save_config_only": null,
    "self_signed": false,
    "server_cert": null,
    "short_gi": false,
    "smps": null,
    "ssid_blacklist": null,
    "ssid_whitelist": null,
    "state": null,
    "troll_defender": false,
    "use_max_a_msdu_length": false,
    "user_list": null,
    "wmm": false,
    "wordlist": "/root/eaphammer/eaphammer/wordlists/rockyou.txt",
    "wpa_passphrase": null,
    "wpa_version": null
}
[ * ] Saving current iptables configuration...


**EAPHammer Version (./eaphammer --version)**

Paste output here.

**OS (the OS from which you are running EAPHammer)**

Kali Linux ARM for the Raspberry Pi 3: kali-linux-2019.1-rpi3-nexmon

**Configuration of Target Access Point (if known / applicable)**

ESSID: CorpWifi
Channel: 4
Authentication: WPA-EAP



During an assessment I had problems within a PEAP communication, but as the TLS tunnel was created using DH to share keys I wasn't able to decrypt the tunnel.
Anyway, I finally discovered that if in hostapd-wpe you comment the line where the DH file is indicated (the `dh_file=/path/to/dh_params` line) the TLS tunnel is created sharing keys via RSA and you can easily decrypt that tunnel with Wireshark using the servers private key.

**Describe the solution you'd like**
I would like that eaphammer implement this behaviour by default (if the author considers that this won't suppose any security issue).

**Describe alternatives you've considered**
- Create an eaphammer parameter to indicate when you want this behaviour
- Add this behaviour to `--debug`

**Additional context**
I suppose that this would also be useful to decrypt EAP-TTLS tunnels, but I haven't tried it yet.

Thank you very much for the tool and for your time.
Hola, the hostapd output only shows that a mac connected to mana-ap but is there a way to see the ssid the client used to connect?
It seems that airodump does not sniff reliably.
The goal is just to enumerate all items in the PNL.

How does the "beaconing" work anyway? Client hops fastly through all the channels and the AP beacons n times per second?
So, eaphammer's hostapd has a predefined channel??


Hi Gabriel,

during my latest usage of EAP password spray I encountered the following:

```
./eaphammer --eap-spray --interface-pool wlan0 --essid 'someESSID' --password Password123 --user-list /root/users.txt 
[.. snip ..]
[*] Root privs confirmed! 8D
[wlan0] Trying credentials: test:Password123@someESSID
Exception in thread Thread-2:
Traceback (most recent call last):
  File "/usr/lib/python3.7/threading.py", line 926, in _bootstrap_inner
    self.run()
  File "/usr/lib/python3.7/threading.py", line 870, in run
    self._target(*self._args, **self._kwargs)
  File "/root/Downloads/eaphammer/core/eap_spray/worker.py", line 34, in _start
    if wpa_supplicant.test_creds():
  File "/root/Downloads/eaphammer/core/wpa_supplicant.py", line 18, in test_creds
    print(line.replace('%s:' % self.interface, '[%s]' % self.interface), end=' ')
TypeError: a bytes-like object is required, not 'str'
```

Small fix is attached. Thank you for building and maintaining this tool!

**Describe the bug**
Import error

**To Reproduce**
Normal install

1. ...Install
2. ...enerate certificates
3. ...ImportError: No module named 'pem'
4. ... unprofit :dagger: 

**Expected behavior**
Install

**Screenshots**
**Command string(s) used**

```
> ./eaphammer --cert-wizard
> ./eaphammer
```

**EAPHammer verbose output (using the --debug flag)**

```
./eaphammer --cert-wizard
Traceback (most recent call last):
  File "./eaphammer", line 4, in <module>
    import cert_wizard
  File "/home/user/eaphammer/cert_wizard/__init__.py", line 1, in <module>
    from cert_wizard.core import import_cert
  File "/home/user/eaphammer/cert_wizard/core.py", line 1, in <module>
    import cert_wizard.cert_utils as cert_utils
  File "/home/user/eaphammer/cert_wizard/cert_utils.py", line 3, in <module>
    import pem
ImportError: No module named 'pem'
```


**EAPHammer Version (./eaphammer --version)**
```
./eaphammer --version
Traceback (most recent call last):
  File "./eaphammer", line 4, in <module>
    import cert_wizard
  File "/home/user/eaphammer/cert_wizard/__init__.py", line 1, in <module>
    from cert_wizard.core import import_cert
  File "/home/user/eaphammer/cert_wizard/core.py", line 1, in <module>
    import cert_wizard.cert_utils as cert_utils
  File "/home/user/eaphammer/cert_wizard/cert_utils.py", line 3, in <module>
    import pem
ImportError: No module named 'pem'

```

**OS (the OS from which you are running EAPHammer)**
Parrot OS/Kali 

**Configuration of Target Access Point (if known / applicable)**
**Configuration of Target Client Device (if known / applicable)**
**Additional context**

Tried using` python3 -m install pem` same issue...
Tried using `sudo python3.7 -m pip install pem` same issue...
Tried using `sudo python3 -m pip install pem` Same issue...
**Is your feature request related to a problem?**
No, it's more of a "nice to have" sort of thing.

**Describe the solution you'd like**
It would be helpful if hashes and/or plaintext passwords captured by eaphammer were able to be saved to their own unique files in the loot folder or a directory of the user's choice. It's not like it's super inconvenient or anything for me to do some grep-magic to yank user hashes out of the hostapd output log, and drop them into a file, but it would be really nice if eaphammer did it for you. It would also pave the way to be able to send hashes to a hash-cracking server via the autocrack feature down the road.

**Describe alternatives you've considered**
You could always just tell me to "shut up and grep it." :man_shrugging: 
Tool relies on 2.3.3.9 of responder. Responder went through massive changes in the update and eaphammer will no longer work with the changes.
Tested under Ubuntu 18.04.10.
**Is your feature request related to a problem? Please describe.**
This is an all-too-common problem we face with wifi hacking, where we are in a target-rich environment with APs that broadcast across multiple channels. Launching a deauth attack against a single AP or a handful of stations on one channel is easy, but when APs broadcast on multiple a-band channels, deauths are less reliable.

**Describe the solution you'd like**
It would be useful to designate deauth interfaces and target APs/Stations so that you could launch more aggressive deauth attacks against a span of bssids & channels. The hope would be that these stations would eventually attempt to associate to the rogue AP before the timeout occurred and it would attempt to reassociate with the legitimate AP. 

**Describe alternatives you've considered**
Bettercap appears to have implemented this according to its wifi modules, and it does appear capable of deauthing multiple clients even during channel hopping.
https://www.bettercap.org/modules/wifi/ 

This is a good workaround, but would be awesome if implemented directly within eaphammer.
