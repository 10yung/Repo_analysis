As of Scala version `2.12.9`, the `-Youtline` and `-Ypickle-write` options have been added. This adds outlining capabilities to `scalac` itself! It would be good to support loading the `.sig` file format which is output by `scalac`'s `-Ypickle-write`. 

To fix add META-INF/services/scalafix.v1.Rule with the rule name
Also fixes #353 

This will prevent unreadable existential types from being ascribed, as well as circumventing a bug where an existential type might be qualified: `Box[MyScope._1] forSome { type _1 ... }`. 
Expected:
```scala
def foo = (x: (String, Int)) => x._2
```

Obtained:
```scala
def foo: (String, Int) => Int = (x: (String, Int)) => x._2
```

Expected:
```scala
def foo: ((String, Int)) => Int = (x: (String, Int)) => x._2
```
Given:
```scala
  trait AC {
    def foo: Int
  }
  def ac = new AC {
    override val foo: Int = 0
  }
```

Obtained:
```scala
  def ac: AC { val foo: Int } = new AC {
    override val foo: Int = 0
  }
```

Expected:
```scala
  def ac: AC = new AC {
    override val foo: Int = 0
  }
```

This happens when overriding a `def` with `val`. Should figure out how this works in the context of `lazy val`s as well.
Given:
```scala
val a = Tuple1(1)
```
Obtained:
```scala
val a: (Int) = Tuple1(1)
```
Expected:
```scala
val a: (Int,) = Tuple1(1) // or maybe a: Tuple1[Int]
```
Given:
```scala
class Box[A]
trait T
class A extends T
class B extends T
val foo = Seq(new Box[A], new Box[B])
```
Obtained:
```scala
val foo: Seq[Box[_1] forSome {  type _1 >: B with A <: T }] = Seq(new Box[A], new Box[B])
```

This will occur because `Box` is invariant.

Expected?:
```scala
val foo: Seq[Box[_ <: T]] = Seq(new Box[A], new Box[B])
```
i.e. we perhaps should expect something like `_ <: LeastCommonAncestor`. If that is `AnyRef`, maybe we should only ascribe `Box[_]`.
i.e. an automated version of https://github.com/twitter/rsc/pull/326 

Results to #100
A.scala:
```scala
final object A
```
```diff
   name: "A"
   source: "A.scala"
   symbols {
     tag: MODULEsym
     id: <empty>.#A.
-    flags: FINAL | MODULE
+    flags: MODULE
     info {
       tag: TYPEREFtpe
       pre {
         tag: THIStpe
         sym: <empty>.#
@@ -15,11 +15,11 @@
     }
   }
   symbols {
     tag: CLASSsym
     id: <empty>.#A.#
-    flags: FINAL | MODULE
+    flags: MODULE
     info {
       tag: CLASSINFOtpe
       sym: <empty>.#A.#
       parents {
         tag: TYPEREFtpe
```

Bytecode differences will happen when this final object is in another object, regardless of the outer object's finality. There may be other cases too...

X.scala:
```scala
object X {
  final object A
}
```
Y.scala:
```
class Y {
  def foo = X.A
}
```

```diff
diff --git a/Y.class.asm b/Y.class.asm
index 87af470..7210c82 100644
--- a/Y.class.asm
+++ b/Y.class.asm
@@ -2,8 +2,8 @@
 // access flags 0x21
 public class Y {
 
-  // access flags 0x19
-  public final static INNERCLASS X$A$ X A$
+  // access flags 0x9
+  public static INNERCLASS X$A$ X A$
 
   // access flags 0x1
   public <init>()V
```