Restricting the formats available in "image" upstream dependency to get images loading in WASM builds. This is a **PARTIAL FIX TO 0.3.22 - APPEARS TO WORK FOR PNG BUT NOT JPEG**

Changed the following line in Cargo.toml:

`
image = { version = "0.21", default-features = false, features = ["png_codec", "jpeg"] }
`

## Motivation and Context
Images displayed on different native platforms. Image display crashes out WASM on Chrome and Firefox (Mac and Windows)

I attempted bumping image->0.22 but without happiness. This is a backport fix so not putting more effort as we look forward to 0.4.

This way gamepad support via gilrs doesn't get included unless
Quicksilver's gamepad features is actually enabled.

## Checks
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read `CONTRIBUTING.md`.
- [ ] I have updated `CHANGES.md`, with [BREAKING] next to all breaking changes
Features that have yet to be (re-)implemented, and are planned:
- [x] Render-to-texture / Surface (#537, #561)
- [ ] Text rendering
- [ ] Resize handling
- [ ] A Lyon helper
- [x] Blending support (#562)
- [ ] Audio support
- [ ] Helpers for planning when to update / draw
- [ ] Texture filtering and tiling
- [ ] https://github.com/ryanisaacg/blinds/issues/5
- [ ] https://github.com/ryanisaacg/blinds/issues/14

Features that are yet to be (re-)implemented, and are a *maybe*:
- [ ] Input state caches (like `Keyboard`, `Mouse`, `Modifiers`)
- [ ] Direct access to the `golem` graphics API

Documentation:
- [ ] Migration guide
- [ ] Examples for each feature / how to integrate the features
- [ ] Note how to use `mint` to convert Quicksilver types into other geometry library types
- [ ] Create a small, playable game to demonstrate an end-to-end usage of the API
- [x] Overhaul the workflow docs (like the issue templates, PR template, CONTRIBUTING, etc.)
- [ ] Update the website
- [ ] Document the async workflow for loading assets / using other event sources during the event loop

Feedback required:
- [x] Should the Scalar API be kept? (e.g. keep paying the compile-time process for generics to be able to write terse things like `Rectangle::new((x, y), (width, height))` or require explicitness)
- [x] Should geometry be split into a separate crate to allow use outside Quicksilver?
- [x] Should image formats other than PNG be supported out-of-the-box? They're not widely used, can cause issues (#508), and cause binary bloat.
- [x] How should key repeats be handled? (See #523)
What is the best way to read the window size and offset when using ResizeStrategy::Fill?

I use ResizeStrategy::Fill with a square world size so that my game fills the screen in portrait or landscape aspect ratios.  This works great for the gameplay elements because the focus is the center of the screen so trimming off the edges doesn't hurt anything.  However, this does not work well for UI elements at the edges of the screen.

I'd like read the screen size so I can position ui elements to stay at the edges in any aspect ratio and reposition the elements if the screen size changes (window resize or a phone rotating from portrait to landscape).

I found Window::screen_size() which returns the width and height of the full virtual area which can be scaled to screen units using the projection matrix but I don't see a way to get the screen offset which would also be needed to compute the actual screen size and the location of the edges of the screen.  There is a Window.screen_offset function but the access is set to pub(crate).
**Describe the bug**
The documentation for `ButtonState::Pressed` states that it *only* gets triggered, if they key was pressed in this frame. However, after a slight delay with the button still being held, this events gets spammed. (like in a text field when pressing a button long enough)

So this is either an implementation bug, or a documentation mistake (in which case it would make sense to provide a way to disable key repetition).

**To Reproduce**
```rust
use quicksilver::{geom::Vector, input::ButtonState, lifecycle::{Event, State, Window, run}, Result};

struct App;

impl State for App {
    fn new() -> Result<Self> {
        Ok(App)
    }

    fn event(&mut self, event: &Event, _: &mut Window) -> Result<()> {
        match event {
            Event::Key(_, ButtonState::Pressed) => println!("pressed"),
            _ => (),
        }

        Ok(())
    }
}

fn main() {
    run::<App>("Test", Vector::new(640, 480), Default::default());
}
```

**Environment and versions (please complete the following information):**
- Environment: Arch Linux under i3
- Rust compiler version: `1.37.0-nightly (991c719a1 2019-06-08)`
- Quicksilver verison: 0.3.18


**Describe the problem you want to solve**
<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
Currently there's no way at all to have custom shaders, which means that operations that should be fairly simple (e.g. applying a negative filter to the entire screen for an effect) are basically impossible.

**Describe the solution you'd like**
<!-- What do you think should be changed? -->
Once #236 is completed, a unified graphics API can be presented to consumers across all platforms, which is the best way to expose shaders.

Without custom shader support or at least runtime-editable shaders techniques like FXAA aren't possible, so that's an important consideration.


It would be nice to give quicksilver some sort of flag to have assets as part of the compiled binary.

- [x] Images
- [x] Fonts
- [ ] Sounds
Currently there's no way in quicksilver to do things like left / right balancing, largely because I personally neglect sound in my own projects. The sound API is in sore need of some touchups.

- [ ] Load sounds from a binary chunk
- [ ] Play a sound
- [ ] Loop a sound
- [ ] Left / right balancing
- [ ] Hold a handle to a playing sound
    - [ ] Pause/Resume the sound
    - [ ] Stop the sound
    - [ ] Query if that sound is playing
