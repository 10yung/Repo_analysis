Hey guys, great work. Really appreciate this package.

Is it a feature or a bug that the variable name of the actual values in the output from `sweep()` are sometimes the name from the data and sometimes another name? 

``` r


library(tidyverse)
library(forecast)
#> 
#> Attaching package: 'forecast'
#> The following object is masked from 'package:ggplot2':
#> 
#>     autolayer
library(tidyquant)
#> Loading required package: lubridate
#> 
#> Attaching package: 'lubridate'
#> The following object is masked from 'package:base':
#> 
#>     date
#> Loading required package: PerformanceAnalytics
#> Loading required package: xts
#> Loading required package: zoo
#> 
#> Attaching package: 'zoo'
#> The following objects are masked from 'package:base':
#> 
#>     as.Date, as.Date.numeric
#> 
#> Attaching package: 'xts'
#> The following objects are masked from 'package:dplyr':
#> 
#>     first, last
#> 
#> Attaching package: 'PerformanceAnalytics'
#> The following object is masked from 'package:graphics':
#> 
#>     legend
#> Loading required package: quantmod
#> Loading required package: TTR
#> Version 0.4-0 included new data defaults. See ?getSymbols.
library(timetk)
library(sweep)

# monthly
monthly_qty_by_cat2 <- bike_sales %>%
  mutate(order.month = as_date(as.yearmon(order.date))) %>%
  group_by(category.secondary, order.month) %>%
  summarise(total.qty = sum(quantity))

# grouping
monthly_qty_by_cat2_nest <- monthly_qty_by_cat2 %>%
  group_by(category.secondary) %>%
  nest(.key = "data.tbl")

# to ts
monthly_qty_by_cat2_ts <- monthly_qty_by_cat2_nest %>%
  mutate(data.ts = map(.x       = data.tbl,
                       .f       = tk_ts,
                       select   = -order.month,
                       start    = 2011,
                       freq     = 12))


# tbats
monthly_qty_by_cat2_fit <- monthly_qty_by_cat2_ts %>%
  mutate(fit.tbats = map(data.ts, tbats))


monthly_qty_by_cat2_fcast <- monthly_qty_by_cat2_fit %>%
  mutate(fcast.tbats = map(fit.tbats, forecast, h = 12))


monthly_qty_by_cat2_fcast_tidy <- monthly_qty_by_cat2_fcast %>%
  mutate(sweep = map(fcast.tbats, sw_sweep, fitted = FALSE, timetk_idx = TRUE)) %>%
  unnest(sweep)

colnames(monthly_qty_by_cat2_fcast_tidy)
#> [1] "category.secondary" "index"              "key"               
#> [4] "total.qty"          "lo.80"              "lo.95"             
#> [7] "hi.80"              "hi.95"

monthly_qty_by_cat2_fcast_tidy %>%
  ggplot(aes(x = index, y = total.qty, color = key, group = category.secondary)) +
  geom_ribbon(aes(ymin = lo.95, ymax = hi.95), 
              fill = "#D5DBFF", color = NA, size = 0) +
  geom_ribbon(aes(ymin = lo.80, ymax = hi.80, fill = key), 
              fill = "#596DD5", color = NA, size = 0, alpha = 0.8) +
  geom_line() +
  labs(title = "Bike Quantity Sold By Secondary Category",
       subtitle = "ETS Model Forecasts",
       x = "", y = "Units") +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  scale_color_tq() +
  scale_fill_tq() +
  facet_wrap(~ category.secondary, scales = "free_y", ncol = 3) +
  theme_tq() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

![](https://i.imgur.com/Yf1iktu.png)

``` r



# tbats
monthly_qty_by_cat2_fit <- monthly_qty_by_cat2_ts %>%
  mutate(fit.StructTS = map(data.ts, StructTS))


monthly_qty_by_cat2_fcast <- monthly_qty_by_cat2_fit %>%
  mutate(fcast.StructTS = map(fit.StructTS, forecast, h = 12))


monthly_qty_by_cat2_fcast_tidy <- monthly_qty_by_cat2_fcast %>%
  mutate(sweep = map(fcast.StructTS, sw_sweep, fitted = FALSE, timetk_idx = TRUE)) %>%
  unnest(sweep)

colnames(monthly_qty_by_cat2_fcast_tidy)
#> [1] "category.secondary" "index"              "key"               
#> [4] "value"              "lo.80"              "lo.95"             
#> [7] "hi.80"              "hi.95"

monthly_qty_by_cat2_fcast_tidy %>%
  ggplot(aes(x = index, y = total.qty, color = key, group = category.secondary)) +
  geom_ribbon(aes(ymin = lo.95, ymax = hi.95), 
              fill = "#D5DBFF", color = NA, size = 0) +
  geom_ribbon(aes(ymin = lo.80, ymax = hi.80, fill = key), 
              fill = "#596DD5", color = NA, size = 0, alpha = 0.8) +
  geom_line() +
  labs(title = "Bike Quantity Sold By Secondary Category",
       subtitle = "ETS Model Forecasts",
       x = "", y = "Units") +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
  scale_color_tq() +
  scale_fill_tq() +
  facet_wrap(~ category.secondary, scales = "free_y", ncol = 3) +
  theme_tq() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
#> Error in FUN(X[[i]], ...): object 'total.qty' not found
```

![](https://i.imgur.com/mj7MrKZ.png)

Created on 2018-05-30 by the [reprex package](http://reprex.tidyverse.org) (v0.2.0).
Any thoughts adding [`prophet`](https://facebook.github.io/prophet/) or is this a better question to ask/propose in the `forecast` package repo? 
`> browseVignettes(package = "sweep")
No vignettes found by browseVignettes(package = "sweep")`
Hello,

I have been reproducing the examples that you have in Business Science and this `warning ` is shown and therefore the dates doesn't appear like those you have in the blog post. I have seen that it's something related with dplyr...

This problem appears with the function `sw_sweep`

```
Warning messages:
1: In bind_rows_(x, .id) :
  Vectorizing 'yearmon' elements may not preserve their attributes
2: In bind_rows_(x, .id) :
  Vectorizing 'yearmon' elements may not preserve their attributes 
```
A reproducible example exist in this [vignette ](https://github.com/business-science/sweep/blob/master/vignettes/SW02_Forecasting_Multiple_Models.Rmd)

Cheers
Hi,

I'm playing with sweep and I'm struggling in how to forecast multiple models for each time series in the tibble. I have read the vignettes and this topic it's treated separately and I haven't been able to merge both ideas.

Here is a reproducible example:


```
library(forecast)
library(tidyquant)
library(timetk)
library(sweep)

monthly_qty_by_cat2_ts <- bike_sales %>%
  mutate(order.month = as_date(as.yearmon(order.date))) %>%
  group_by(category.secondary, order.month) %>%
  summarise(total.qty = sum(quantity)) %>% 
  group_by(category.secondary) %>%
  nest(.key = "data.tbl") %>% 
  mutate(data.ts = map(.x       = data.tbl, 
                       .f       = tk_ts, 
                       select   = -order.month, 
                       start    = 2011,
                       freq     = 12))

# Time Series forecasting
monthly_qty_by_cat2_fit <- monthly_qty_by_cat2_ts %>%
  mutate(fit.ets = map(data.ts, ets))
monthly_qty_by_cat2_fit

# Output
# A tibble: 9 x 4
  category.secondary          data.tbl  data.ts   fit.ets
               <chr>            <list>   <list>    <list>
1 Cross Country Race <tibble [60 x 2]> <S3: ts> <S3: ets>
2         Cyclocross <tibble [60 x 2]> <S3: ts> <S3: ets>
3         Elite Road <tibble [60 x 2]> <S3: ts> <S3: ets>
4     Endurance Road <tibble [60 x 2]> <S3: ts> <S3: ets>
5           Fat Bike <tibble [58 x 2]> <S3: ts> <S3: ets>
6      Over Mountain <tibble [60 x 2]> <S3: ts> <S3: ets>
7              Sport <tibble [60 x 2]> <S3: ts> <S3: ets>
8              Trail <tibble [60 x 2]> <S3: ts> <S3: ets>
9         Triathalon <tibble [60 x 2]> <S3: ts> <S3: ets>

```

One solutions would be the following one but I belive that there exist a better way to do that

```
monthly_qty_by_cat2_fit <- monthly_qty_by_cat2_ts %>%
  mutate(fit.ets = map(data.ts, ets),
         fit.arima = map(data.ts, auto.arima),
         ...)
```

What I'm trying to do is forecast different models as it's done in the vignette [SW02_Forecasting_Multiple_Models](SW02_Forecasting_Multiple_Models.Rmd) but here the list of models has the data "hardcoded" and then it's just executed with `invoke_map`.

How it could be modified to be able to forecast multiple models?