https://github.com/lifeblood/fire-cli.git
Fire now try to parse flat args and kwargs, but often this not convenient
Example:

```
import fire


def test(*args, **kwargs):
    print(kwargs)
    print(args)


fire.Fire(test)

```

`python main.py arg1 arg2  --kwarg1 1 --kwarg2 2`

`
{'kwarg1': 1, 'kwarg2': 2}
('arg1', 'arg2')
`

In some cases will be much more simple have opportunity to set *args **kwargs like this :
`
python main.py --args arg1 --args arg2 --kwargs kwarg1=1 --kwargs kwarg2=2
`
* Fix #149 
* Use `dir()` instead of `inspect.getmembers()` to get available methods of given object.
* Refer #149 for explanation.
Is it sensible to define a default command, if dose not lead to any conflict?

```python
# in script foo.py
def foo():
    print('foo')
def bar():
    print('bar')
def main():
    print('main')
```
It the rule is running a command with the same name to the script, then
command `$ foo.py` will run `foo` function by default. If the rule is running command `main` that was defined, then run it.

Based on my understanding of the [`_PrintResult`](https://github.com/google/python-fire/blob/master/fire/core.py#L241) function, it seems like the help page with possible methods will pop up if returning an object, even if `-- --help` isn't passed. It seems like the help page should only pop up if explicitly added.

Here is an example I came across:
I set up a fire script to connect to a sql database and run a sql file or code and return the connections cursor. Sometimes I want want to run a file creating a table or insert data without calling another method. Other times I may want to call `- fetchone` to see one row of results from a query. I don't want man pages to pop up the times where I don't call another method on the cursor, but that is what happens.
I know that whether I am using a class or a function, fire will internally handle the exception and show the help if there is an issue.

So considering `fire_obj = fire.Fire(SomeClass)`, how can I access that exception from fire_obj? I know that fire_obj points to a new instance of SomeClass, but I am trying to capture and handle the exceptions that fire is handling internally when it shows the help or exceptions.

When I wrap it in a try except, I can see that the exception is `FireExit`, but I dont want the python-fire help message to print (which is printing from the code in the library). I want to instead raise my own exception, but even better, access the exception that happened inside `SomeClass` which is trigger the error. 

@dbieber 
Hi, i have a foo.py file compiled to foo.pyd by cython,
then use `fire.Fire()` to make it a cli like below,
instead output `1 2 3` i get `2 3 3`,
seems because cython treat functions as `PyObject` with first argument `self` after i checked the generated .c file.
any idea to make this work except wrap it one by one by another normal python function ? (not want to wrap because maybe many functions in foo.py later and bar.py will be compiled to bar.pyd called by another main.py, then the wrapper become cython function too...)

```python 
# bar.py
from foo import *  # import from foo.pyd not foo.py
fire.Fire()
```

```python 
# foo.py
def test_fn(a=1, b=2, c=3):
    print(a, b, c)
```

```c
// foo.c for foo.pyd
`static PyObject *__pyx_pw_19test_fn_3foo_1foo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) { ...}`
```
I am having an issue with `python-fire` when a method has arguments with default values. Consider the following code:

```
import fire

class SomeClass(object):
    def __init__(self):
        self.a = ''
        self.b = ''

    def methoda(self):
        self.a = 'A'
        return self

    def methodb(self, x='B123'):
        self.b = self.a + x
        return self

    def __str__(self):
        return self.b

if __name__ == '__main__':
    s = SomeClass()
    s.methodb().methoda()
    print(s.b) # this prints B123 correctly

    fire.Fire(SomeClass)
```

As seen in the comments, in the `print(s.b), it is printing `B123` correctly. But when i change the order of the methods being called in fire from the command line, I am getting the odd behavior. 

Example:

```
> python x.py
B123 # correct

> python x.py methoda methodb
Here: B123
AB123 # both correct

> python x.py methodb --x B123 methoda
Here: B123
B123 # again both correct

> python x.py methodb methoda
Here: B123
methoda # this is not correct. It should print B123 here also
```

As you can see with the last example, if i call `methodb` (which has an argument with a default value), it prints `methoda` instead of `B123` as expected.

My question is, How can I use a method that has a default argument value first in this type of scenario without passing in `--x=something`? 

In short, how can i make `> python x.py methodb methoda` properly print `B123`?
Second question is, how can I show the method args in the help? Currently it shows nothing when there is a default value assigned. When I do `methoda methodb`, I do not have to pass `--x=B123`, but if I move the method with the default argument value up, it doesnt work as seen in the example. 
Traceback (most recent call last):
  File "multilabel/runners/resnet_runner.py", line 26, in <module>
    main()
  File "multilabel/runners/resnet_runner.py", line 22, in main
    fire.Fire(resnet50)
  File "/usr/local/lib/python3.6/dist-packages/fire/core.py", line 138, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/usr/local/lib/python3.6/dist-packages/fire/core.py", line 560, in _Fire
    treatment='callable')
  File "/usr/local/lib/python3.6/dist-packages/fire/core.py", line 675, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
TypeError: forward() missing 1 required positional argument: 'x'

When I rewrite pytorch nn.Module, I use x as params to override forward function. This bugs appear.
I have test. If I do not use Fire, it works well.
I suppose that because fire did not support this kind of override? Or someone can tell me how to fix it.
Thanks.
When running a script with no arguments the user is presented with a man-style page listing the available commands. The natural way to dismiss this message is to either hit "q" or "control-c". The former works fine, but the latter triggers a KeyboardInterrupt which, when returning to the shell has lost the cursor and typed text no longer appears.

I've tested this on both MacOS and Linux, the same error occurs in both terminal and iterm2.

Take the following example:

```python
import fire

def myfunc():
    return True

if __name__ == '__main__':
    fire.Fire()
```

Run it with:

```shell
python test.py
```

Then hit control-c and try to type something in the returned shell. You'll see what I mean.

