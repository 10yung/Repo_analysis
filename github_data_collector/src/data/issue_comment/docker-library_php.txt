I'm running into a problem, and I can't get some containers up.

(_I was referred here from this thread, so all the details so far are there, rather than re-typing it all_):

https://github.com/phpmyadmin/docker/issues/267
This allow use NGINX Unit with minimal extended this variant image.

There have already been such requests https://github.com/docker-library/php/issues/510, and they will be more often, or developers will write their own variations.
Otherwise busybox's `adduser` uses `Linux User,,,`

```console
$ docker run -it --rm php:7.3-fpm-alpine grep www-data /etc/passwd
www-data:x:82:82:Linux User,,,:/home/www-data:/sbin/nologin
$ docker run -it --rm php:7.3-fpm-stretch grep www-data /etc/passwd
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin

$ # new image
$ docker run -it --rm php:7.3-alpine-test grep www-data /etc/passwd
www-data:x:82:82:www-data:/home/www-data:/sbin/nologin
```

Since this is non-critical and will break most of the Docker build cache, we should wait to merge until the next version bump or Debian rebuild to minimize rebuilds (or at least delay the PR to official-images)
I have used official alpine php-image for different versions with `pdo_mysql` extension. 

Set **PDO::ATTR_EMULATE_PREPARES = false** to get native db value.

It's return **float(11.1)** instead of **float(11.11)** and problem with only `Alpine` while working proper for `buster` php-image

Issue reported on alpine too : https://gitlab.alpinelinux.org/alpine/aports/issues/11072

```
RUN apk update --no-cache \
    && apk add --no-cache $PHPIZE_DEPS \
    && docker-php-ext-install pdo pdo_mysql
```

Docker up & Run php test file not returning proper native value for float datatype in Mysql

```php
<?php 

// DB configuration
$host =  'localhost';
$user = 'test';
$dbPass = 'test';
$dbname = 'test';
$dsn = 'mysql:host='. $host .';dbname='. $dbname;

// PDO connection and settings
$pdo = new PDO($dsn, $user, $dbPass);

// It's required otherwise return value in string instead of float
$pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);

// Here amount is float(5,2) & Value = 11.11
$sql = 'SELECT id, amount FROM account WHERE id=1236';
$stmt = $pdo->prepare($sql);
$stmt->execute();
$row = $stmt->fetch(PDO::FETCH_ASSOC);

echo '<pre>';
var_dump($row['amount']); // It's return float(11.1) instead of float(11.11)
echo "\n";
echo '</pre>';
exit;

```


Partly a duplicate of #412 and related to #769.

The adminer image has alpine based variants, because it is a mostly batteries included image for development purposes. What it doesn't include is the database drivers that require installation of a pecl extension.

While checking on the request issue / support request TimWolla/docker-adminer#68 I realized that there is no easy way to install pecl extensions in the Alpine variants. phpize + dependencies are not readily available and the automated management lives within the `docker-php-ext-*` helper scripts.

Thus I'd like to request either a pecl wrapper or helper scripts for the phpize management that does not require me copying over bits and pieces from various scripts that might break when future changes are made.
It will be useful when investigating PHP segmentation. For now, we have to build a custom image for this purpose. What do you think about it?
I have php-fpm running on docker with the following php.ini:

```
memory_limit = 512M
error_reporting =  E_ALL & ~E_DEPRECATED & ~E_STRICT
display_errors = Off
display_startup_errors = Off
log_errors = On
ignore_repeated_errors = On
html_errors = Off
upload_max_filesize = 5M
post_max_size = 50M
max_input_vars = 5000
max_execution_time = 60
error_log = /var/log/php/error.log
log_level = error
catch_workers_output = yes
```

Everything worked and nginx was proxying perfectly. The problem with this is logs are never shown in the container's stdout, so I changed it to:

error_log = /proc/self/fd/2

which meant that I could see the logs with docker logs -f, but I started seeing these errors on nginx:

```
2019/08/26 17:29:35 [error] 22#0: *6 FastCGI sent in stderr: "PHP message: PHP Deprecated:  Function create_function() is deprecated in 
```

So some plugin in my wordpress (and I know which one it is), is using a deprecated function, but this error is non critical, its actually a notice. The problem is that with this setup, I keep getting 502 Bad Gateway errors when a client requests a page. I actually also see that php-fpm is returning them via the fast cgi protocol, when I connect do it directly.

It all starts working when I set log_errors = Off. So I read a bit and realized the fast-cgi protocol can return a FCGI_STDERR packet to its client, which includes error logs, so I decided not to go down that rabbit hole and try to cheat by doing this:

`ln -sf /dev/stderr /var/log/php/error.log` to make php-fpm think it was logging to a file and still have the logs show up in docker logs. No such luch, 502 only disappear is I log to /var/log/php/error.log without any connection to stdout/stderr or if I disable logging altogether.

I don't know if its my poor understanding or if this is a bug, but there should be a way to log to stdout/stderr without returning errors to nginx.

Can anyone help?
`i386/php:7.3-apache` crashes on startup. When starting a shell and trying to start from there, I get the following:
```
# apache2-foreground 
Segmentation fault (core dumped)
```
I'm considering is there any reason why dtrace was disabled by default?
Don't let the shell do glob expansion, because it would not find deleted files. `git` can.

(Discovered when I did https://github.com/coopTilleuls/docker-varnish/pull/39, and fixed in https://github.com/coopTilleuls/docker-varnish/pull/40)

/cc @tianon

References:
https://github.com/koalaman/shellcheck/wiki/SC2207
https://github.com/koalaman/shellcheck/wiki/SC2068