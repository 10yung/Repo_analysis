Would be nice to just look at.
Even in 2018 alot of people are using 32 bit. The low end laptops for example. So 32 bit should be supported. 
I'm Trying to upload Level editor but it doesn't load up and it says level editor is not responding.
Here is the code I keep getting.
[Code i keep getting.txt](https://github.com/SonyWWS/LevelEditor/files/826287/Code.i.keep.getting.txt)

I was having some difficulty marshalling [a native wide string property into a managed string](https://msdn.microsoft.com/en-us/library/ewyktcaa%28v=vs.100%29.aspx) when I realised the code CodeGenDom was giving me was wrong.

The patch is somewhat self-explanatory - when it's a string, we want to:
1. C-style cast the char\* or wchar_t\* string pointer (not the address of the pointer), to a void pointer, and
2. Use the appropriate string-length function (strlen / wcslen) instead of sizeof

Seeing as the repository includes the binaries, I thought about providing rebuilt binaries, but it might be easier to merge without them.

As per topic - I noticed that the setters on LvEdEngine::Transform weren't setting the dirty flag, so whenever you'd [ask for the matrix later](https://github.com/SonyWWS/LevelEditor/blob/fa5cd95726a9971fd3b0383c21a3c162e8b95f09/LevelEditorNativeRendering/LvEdRenderingEngine/VectorMath/V3dMath.cpp#L727) you'd get the identity matrix set at init time.

This is a tiny, tiny change - all it does is use [auto-implemented properties](https://msdn.microsoft.com/en-us/library/bb384054.aspx) instead of manually implementing private backing fields in CodeGenDom. Some minor comment fixups have been done as well but I've provided those as a separate commit if you'd rather we not touch those lines.

Hello! As per topic - I find myself in need of a resource-loaded listener in managed land, and for the life of me I can't seem to find one. The use case is, loading a game object definition file that contains game object component definitions, and then resolving and instantiating components for those definitions once the file has been loaded.

If the functionality doesn't exist yet I'll take a swing at it, but I figured I'd ask just in case.

Is it possible to add arbitrary key value pairs to game objects in the property editor? That would be rather useful to hook into game specific logic.

- The renderer doesn't load properly when using the VS2010 project.
- When using the VS2013 project, you need to upgrade to use the VS2015 compiler.
- `hash_set` and `hash_map` are deprecated (we should be using `unordered_set` and `unordered_map` instead. 

Do you accept PRs to include a VS2015 solution and use the non deprecated classes?

The docs seem very sparse, especially with:

> Work with a variety of file formats

What do these include?
