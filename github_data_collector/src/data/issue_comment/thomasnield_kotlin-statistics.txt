Would be great to see some smoothing algorithms implemented in `common` module and deployed as a multi-platform library.

We are working on a multi-platform plotting library and are very interested in the following smoothing algorithms: `loess`, `glm` and `gam`.

Our library: https://github.com/JetBrains/lets-plot
What do we need these smoothing algorithms for: https://ggplot2.tidyverse.org/reference/geom_smooth.html
Noticed that I have not done a good job with documenting code. I will improve this on the next coming release.
It would be nice to support ExperimentalUnsignedTypes like UByte - very helpful for dealing with images.
PCA is principal component analysis, a linear method of reducing the dimensionality of data.  other forms of dimensionality reduction could also be considered if PCA is acceptable.  PCA calculations are dependent upon a matrix library so that might impact cross-platform goals for 2.0.
It would be nice if the `valueSelector` were in the last parameter position in the `binBy` methods. This would allow the lambda to be created outside of the parentheses.

This is a breaking change though as changing the existing methods to place this in the last position is a breaks things for obvious reasons. However, even providing an override with the parameters reordered is a breaking change when named arguments are used.

fixes #30 
As Kotlin-Statistics continues to grow, it might be necessary to start a dedicated Wiki to keep topics organized. 
Much like you can do a "sortBy" `someCollectionOfStuff.sortedBy { it.lum }` could the fun functions like `medianBy` also support that?  I have a large number of pixels, and I'm looking for the median pixel value by luminance, and this would be perfect... if I could get xBy.
As Kotlin-Statistics continues to grow in functionality, less of it is depending on Apache Commons Math. 

It would be great if we got rid of Apache Commons Math as a dependency altogether, and help Kotlin-Statistics go multi-platform and behave more as a standard library. I think this should be the goal of Kotlin-Statistics 2.0. 

This will primarily require descriptive statistics and distributions to be implemented from scratch. There will also be an emphasis on discrete and continuous probability functionality, and integrating it intuitively with the Kotlin language and stdlib. 

Timeline-wise, I think it would be best to time with a major release of Kotlin and [have some much-needed features implemented](https://github.com/thomasnield/KEEP/blob/master/proposals/stdlib/exclusive-ranges.md). 

Any other thoughts or ideas until then can be discussed here. 

Here is the scope of features I will update here: 

- Grouping operators
- Binning operators
- Random operators 
- Random distributions (Normal, Poisson, Exponential, etc, [ojAlgo](https://github.com/optimatika/ojAlgo) could provide some implementations to port)
- Statistical operators (standard deviation, variance, sum of squares, etc)
- Light machine learning
  * Linear Regression
  * Naive Bayes
  * Logistic Regression
  * K-means clustering (later)
  * Random forests/decision trees/boosting (later)
  * Neural Networks (later) 


* ~~`randomFirst()` - Selects a random element from a Sequence or Collection~~
* ~~`randomFirstOrNull()` - Selects a random element from a Sequence or Collection, or null if there are none~~
* ~~`random(n: int)` - Selects `n` random elements from a Sequence or Collection~~
* ~~`randomDistinct(n: int)` - Selects `n` distinct random elements from a Sequence or Collection~~

* ~~`WeightedCoinFlip` - A true/false random generator with an assigned probability to `true` and `false`, rather than 50/50.~~
* ~~`WeightedDice` - A random generator of discrete `T` values based on their assigned probabilities.~~ 

* `Map<T,Number>.sample()` - Samples a `T` value from this map assuming a discrete frequency distribution. 
* `Map<T,Number>.sample(n: Int)` - Samples `n` `T` values from this map assuming a discrete frequency distribution. 


