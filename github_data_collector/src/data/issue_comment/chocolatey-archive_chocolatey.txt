I had a client that needed to test multiple versions of chocolatey for validation of their software packages.  In the process, it made sense to push this back to the team as it's a pretty basic change.  I updated the URL such that it optionally adds a version number to the URI in accordance with the v2 chocolatey.org API.  This has the consequence of downloading the latest when the powershell script is run as-is and additionally accepts a parameter of -chocolateyVersion to specify the full version # as specified here: https://chocolatey.org/packages/chocolatey/#versionhistory

Would it be possible to get the timestamp of installation the packages installed by chocolatey - e.g. when using choco list -lo? Want to reverse engineer all the packages installed locally, however I need the timestamp to accurately reproduce the correct install script.

E.g. see https://gist.github.com/jnus/65bc949d1da385f7056c

This feature has been implemented in my fork of Chocolatey here:
https://github.com/andulv/chocolatey/tree/run-package

I suggest this as a feature in the new upcoming C# rewrite of Chocolatey.
## Feature description

_'run Packages'_ are packages that are not "installed", effectively turning them into script-packages. The packages are not installed to lib\ folder, but in every other aspects they are identical to ordinary packages.

**When a package has the extension '.run' this happens upon install:**

The package is downloaded to lib-run
tools\chocolateyinstall.ps1 script is executed
Package is removed from lib-run

This is useful for scripts that do not install anything, where the concept of uninstalling does not make sense and the script should therefore not appear in Chocolateys list of installed packages.

This also allows for running a script multiple times, without uninstalling and reinstalling the package.
## Our use case

We develop and support a POS application for a chain of independent retail stores. The application consists of a server part and a local installation at each store's POS computers.  (POS=Point Of Sale).

In addition to supporting our own application we also have a contract for maintenance, support, etc. of the POS computers.

We are in the process of setting up our own Chocolatey repository. The intendended usage is:
- Hosting setup packages for our own software (which is quite frequently updated)
- Hosting setup packages for a small selection of other software that we support and keep updated for the clients (Acrobat Reader, TeamViewer, Microsoft Office, Java runtime, etc.)
- Hosting scripts that we want to be able to run at client computers.

We are also in the process of setting up a client / server solution that gives us a permanent two-way connection between the central server and the clients (using SignalR). An important feature in this solution is the ability to have a "command console" from the server to the clients. This allows for server operators to issue commands which are executed silently at client computer(s) and the commands output is sent back to the server.

A bonus effect of using this in combination with Chcolatey is that we get an easy way to do software inventory. By issuing 'Choco list -lo' from the central server we will get a list of all applications installed at a specific client computer (or all computers or a subset of them).

We also have various scripts / utilities that we occasionally need to run at client computers:
- Defrag local database(s), Clean up temp folders, Shrink/archive log files, etc.
- Various maintenance/upgrades (change computer name, prepare computer for change of storeowner, run SQL to patch error in database, etc.). These might be run 0..n times in the liftetime of a client computer.
- System info type scripts: List available diskspace, List scheduled tasks, Collect SMART info, etc.
- Temporary workarounds for known bugs / problems in applications we support. (e.g. sometimes a customer-display will hang. A permanent fix for this will be part of our next application release. But in the meantime we have made a simple script that we can run at customers POS computer when the display hangs).
- One time installation/upgrades. (e.g. change config file of POS application to work with a new server).

Chocolatey /NuGet Server is a near perfect fit for this.
- A central repository where we can publish scripts and applications. 
- Client (Chocolatey install) that allows for downloading and automatically execution of script packages.
## Use case vs. existing Chocolatey features

By having our scripts as ordinary Chocolatey packages we can see the following issues:
- Script can only be run once. To run again it has to be installed and uninstalled.
- All scripts that have been run will appear in Chocolateys list of installed packages.
- Some scripts might contain a large payload. Our clients usually have small SSD drives. No reason to fill up the disk with scripts that maybe will never be used again.
- When a new script is published, all installed scripts (read: scripts that have been run atleast once) will be automatically rerun when we do cup all. (And if e.g. we publish a defrag script, it will be quite weird behaviour to have your disk defragged when you update your applications).

We have considered a manual workaround for this:
- Naming convention for  packages that are not meant to be installed. We settled for .run as extension.
- When someone install a .run package they are supposed to immediately uninstall it.
- If .run packages show up in 'choco list -lo' they are supposed to be ignored.

But we realised that the workaround could be easily implemented in code. Which led to this issue / pull request.

Hey, new to chocolatey and after getting an issue file against me to add a chocolatey package for https://github.com/davkean/audio-switcher I went to the the wiki to understand what that meant.

After just reading the wiki (in particular, https://github.com/chocolatey/chocolatey/wiki/CreatePackages), it's unclear to me what exactly I put in the package - all the examples show using chocolateyInstall.ps1 to download from the web and run the installer. This makes sense because most of top packages seem to be wrappers around existing applications (Chrome, Notepad2, etc).

But I don't have a installer, or a web site with the binaries. Is there a way to just put the executable in the package and call it a day? If there is, the wiki doesn't call this out. 

It would be great if you had a flow chat, ie "if  you have a traditional MSI on a web, do this", "if you just have raw binary do this other thing", etc.

Thanks

MySql.Workbench needs vcredist2013 x86. Is there a way to make a dependency to be x86?

I used chocolatey to install node. I then went to install some packaged with npm (using -g global option). Most packages are installed under c:\ProgramData\chocolatey\bin and are available immediately. Examples of packages that are working correctly are grunt-cli, gulp, & yo. When i install bower it gets installed in C:\ProgramData\chocolatey\lib\nodejs.commandline.0.10.33\tools. There was nothing put in c:\ProgramData\chocolatey\bin. Of course it doesn't work because that directory isn't in my path. While i could easily add that to my path i'm thinking that might be a bad idea because as node gets updated there will most likely be a new directory created under _\lib\_ with the new version. Is this a chocolatey issue or is this a node/npm issue?

I am wondering why you aren't simply using shortcuts, soft or hard links instead of the generation of shim executables. This seems to be a much simpler way with less complications.

Why did you decide against it?

Helpers such as `Install-ChocolateyEnvironmentVariable` are able to perform their work in per-user or per-machine (all users) scope. The latter is generally preferred (so that the installed package is correctly registered for all users), but requires administrative privileges.

If a package wants to support both per-machine (when running with administrative privileges) and per-user installations, it currently needs to explicitly handle both cases in code, e.g.:

```
if (Test-ProcessAdminRights) {
    Install-ChocolateyPath -pathType Machine ...
} else {
    Install-ChocolateyPath -pathType User ...
}
```

If a package does not specify the scope, User is assumed, which is inconvenient now that per-machine, administrative installation is the secure and recommended approach.

Let's add an "Auto" scope parameter value, which would be interpreted as Machine if user has administrative privileges and as User otherwise. This should also be the default scope, so that the amount of code required in typical packages is minimized.

There are several popular environment variables that are PATH-like in nature, i.e. their values consist of segments separated by delimiters.

Examples include: PSModulePath, PATHEXT, INCLUDE, LIB, CMAKE_PREFIX_PATH, CLASSPATH

I envision an Install-ChocolateyEnvironmentVariableSegment helper that would take the variable name, the delimiter character and the segment to add. It would, in essence, be a generalization of Install-ChocolateyPath.

**NOTE: This has been brought up in the [Chocolatey google group here](https://groups.google.com/d/topic/chocolatey/YyEStOwTjA8/discussion). I hope it's okay I've put it in here as a feature request.**

I've got a package I'm working on that has a deeply nested file structure. I've found this error when trying to install the package. 

``` powershell
get-childitem : The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.
At C:\ProgramData\chocolatey\chocolateyinstall\functions\Get-ChocolateyBins.ps1:17 char:16
+       $files = get-childitem $packageFolder -include *.exe -recurse
+                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : ReadError: (C:\ProgramData\...odules\argparse:String) [Get-ChildItem], PathTooLongException
+ FullyQualifiedErrorId : DirIOError,Microsoft.PowerShell.Commands.GetChildItemCommand
```

Digging a little deeper, it looks like [this is the line of code](https://github.com/chocolatey/chocolatey/blob/master/src/functions/Get-ChocolateyBins.ps1#L17) it doesn't like. 

I don't really need this "search for .exe's" feature and would like to explicitly tell Chocolatey where my .exe files are because the ones I really need are at a MUCH higher level than the rest of the project. 

Feature request is to create a way of **silently ignoring the error, skipping the file(s), or explicitly defining my .exe's**.

As far as I know, this is a limitation on windows and isn't something you can easily get around.

Thanks!
