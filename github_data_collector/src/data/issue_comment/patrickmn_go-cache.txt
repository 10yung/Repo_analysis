Hi. I am having a doubt. What happens when cache memory gets full and we try to set new values in it?
Actually I am using this library in a project. But somehow I suspect there is some issue in setting data into the cache. Somehow empty value gets set in the cache. Can this be due to memory issues?
Please help.
This is convenient when you need to lazily compute a function. There's one problem, If the compute function takes a lot of time to process, it will lock the whole map until it finish.
recommended to add a parameter on callback function. like func (c Cache) OnEvicted(f func(action int, key string,value  interface{}))
I found that there is no method can get multiple value in go-cache. I think this method is a useful for users. If it's possible, I can make a PR for it.
It could be nice to be able to retrieve Items that are in cache but already expired.
I have an expiration time set at 5min and a cleanup time set at 24h.

I'm querying a remote API and I want to be able to use my expired Item if the remote API is not answering to keep my service running.

I've been playing with something like this (the last arg is the one defining if the object is expired):

```go
func (c *cache) GetEvenIfExpired(k string) (interface{}, time.Time, bool) {
    c.mu.RLock()
    // "Inlining" of get and Expired
    item, found := c.items[k]
    if !found {
        c.mu.RUnlock()
        return nil, time.Time{}, true
    }

    if item.Expiration > 0 {
        if time.Now().UnixNano() > item.Expiration {
            c.mu.RUnlock()
            return item.Object, time.Unix(0, item.Expiration), true
        }

        // Return the item and the expiration time
        c.mu.RUnlock()
        return item.Object, time.Unix(0, item.Expiration), false
    }

    // If expiration <= 0 (i.e. no expiration time set) then return the item
    // and a zeroed time.Time
    c.mu.RUnlock()
    return item.Object, time.Time{}, false
}
```

This allow me to renew my cache if the object is expired and the remote API is answering, or use my cache if anything wrong is happening.
Not sure if this is of interest for many others or the project in general, but it was useful for me and thought I'd share.

My use case is pretty simple and I wanted to keep it simple by adding this so I can use it as a self-filling cache.  The many different ways that Cache looks for values is duplicated all over so I didn't bother refactoring that all to use this callback unless this idea is of use to others in which case I can do that too.  I presume there are performance implications to doing that though.
https://github.com/patrickmn/go-cache/blob/5633e0862627c011927fa39556acae8b1f1df58a/sharded.go#L40

can you benchmark this? 

```go
func djb33(seed uint32, k string) uint32 {
	var (
		l = uint32(len(k))
		d = 5381 + seed + l
	)
	if l > 0 {
		d = djb33_loop(d, k)
	}
	return d ^ (d >> 16)
}

func djb33_loop(d uint32, k string) uint32 {
	var (
		l = uint32(len(k))
		i = uint32(0)
	)
loop:
	if i >= l-1 {
		goto exit
	}
	d = (d * 33) ^ uint32(k[i])
	i++
	goto loop
exit:
	return d
}

```
Some business caching logic depends on the exact values used for expiration and cleanup of the cache. Rather than store these twice, what if the cache provided read-only methods for obtaining these values?
Can you support gomod
