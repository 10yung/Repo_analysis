- Laravel Version: 6.11.0
- PHP Version: 7.2.26
- Database Driver & Version: None

### Description:

One of my class use storage_path(), so I've discovered this class can't be tested because of this bug.

### Steps To Reproduce:

`$ laravel new app
$ cd app
$ php artisan make:test --unit HelpersTest
$ sed -i 's/assertTrue(true)/assertEquals(storage_path(),"whatever")/' tests/Unit/HelpersTest.php
$ vendor/bin/phpunit
`
### Output:
`
PHPUnit 8.5.2 by Sebastian Bergmann and contributors.

.E.                                                                 3 / 3 (100%)

Time: 141 ms, Memory: 16.00 MB

There was 1 error:

1) Tests\Unit\HelpersTest::testExample
Illuminate\Contracts\Container\BindingResolutionException: Target class [path.storage] does not exist.

/demo/app/vendor/laravel/framework/src/Illuminate/Container/Container.php:805
/demo/app/vendor/laravel/framework/src/Illuminate/Container/Container.php:681
/demo/app/vendor/laravel/framework/src/Illuminate/Container/Container.php:629
/demo/app/vendor/laravel/framework/src/Illuminate/Foundation/helpers.php:121
/demo/app/vendor/laravel/framework/src/Illuminate/Foundation/helpers.php:846
/demo/app/tests/Unit/HelpersTest.php:16

Caused by
ReflectionException: Class path.storage does not exist

/demo/app/vendor/laravel/framework/src/Illuminate/Container/Container.php:803
/demo/app/vendor/laravel/framework/src/Illuminate/Container/Container.php:681
/demo/app/vendor/laravel/framework/src/Illuminate/Container/Container.php:629
/demo/app/vendor/laravel/framework/src/Illuminate/Foundation/helpers.php:121
/demo/app/vendor/laravel/framework/src/Illuminate/Foundation/helpers.php:846
/demo/app/tests/Unit/HelpersTest.php:16`


- Laravel Version: 6.0.0
- PHP Version: 7.4.0
- Database Driver & Version:Redis 5
### Description:
now logic to acquire a redis lock need 2 steps.
setnx and set expire .
I meet a bug that setnx is sucessed  but  set expire not. this may cause by network or other weird reasons, but I think this can fix by atomic operation
I fount a pr but it have't be accept,  #29076 

### Steps To Reproduce:
1.breakpoint in https://github.com/laravel/framework/blob/dca45985ab1b2353615cef14d9d4d70ba7b1cd15/src/Illuminate/Cache/RedisLock.php#L40
2. try to acquire a redislock
3. wait the breakpoint fire, stop the redis server
4.resume the breakpoint and return
5. restore the  redis server



then you will get a never  expires lock...
Although the probability of its occurrence is very low, once it occurs, it will cause very serious consequences. In a real business scenario, I have been experiencing this problem recently. Just now I finally discovered the source of the problem.
I hope to be able to fix it.
Thank you.
<!--
Please only send a pull request to branches which are currently supported: https://laravel.com/docs/releases#support-policy 

If you are unsure which branch your pull request should be sent to, please read: https://laravel.com/docs/contributions#which-branch

Pull requests without a descriptive title, thorough description, or tests will be closed.

In addition, please describe the benefit to end users; the reasons it does not break any existing features; how it makes building web applications easier, etc.
-->

Enables: [https://github.com/laravel/ideas/issues/2018](https://github.com/laravel/ideas/issues/2018)

Improves multilanguage-support for people who do not want to use **visible** language prefixes in their routes.

Example, defining routes like this:
```PHP
Route::name('en.')->group(function () {
    Route::get('/', 'HomeController@index')->name('home');
    Route::get('about', 'AboutController@index')->name('about');
    Route::get('register', 'AuthController@register')->name('register');
});
Route::name('nl.')->group(function () {
    Route::get('/', 'HomeController@index')->name('home');
    Route::get('over', 'AboutController@index')->name('about');
    Route::get('registreren', 'AuthController@register')->name('register');
});
```

Enables us to use the following middleware:
```PHP
namespace App\Http\Middleware;

use Closure;
use Illuminate\Support\Facades\URL;

class SetDefaultLocaleForUrls
{
    public function handle($request, Closure $next)
    {
        URL::defaultNamePrefix($request->user()->locale.".");

        return $next($request);
    }
}
```
Fixes issue #31159
- Laravel Version: 6.5.2
- PHP Version: 7.4.0

### Description:
This bug manifested itself when I pointed Laravel Nova's `File` field to a file of 1,04 GB. Nova is unable to download those files. The log shows an out-of-memory error.

I investigated the problem and I think it lies with `Illuminate\Filesystem\FilesystemAdapter`, which uses a `fpasstru()` of the stream. 
https://github.com/laravel/framework/blob/f3c1f4898552ef7cfd7f422a164c3ed791ff8d29/src/Illuminate/Filesystem/FilesystemAdapter.php#L163-L167

This loads the whole file in memory. The following would work:


```php
        $response->setCallback(function () use ($path) {
            $stream = $this->readStream($path);
            while (! feof($stream)) {
                echo fread($stream, 2048);
            }
            fclose($stream);
        });

```

### Steps To Reproduce:

Get yourself a large file and point a tinker session to it:

`>>> Storage::download('large-file.csv')->send()`

With `fpassthru()`, you get a "Allowed memory size of 134217728 bytes exhausted (tried to allocate 1041674240 bytes)".
With the `while` loop it just streams data.

Happy to PR.

---

Credits: https://www.php.net/manual/en/function.fpassthru.php#29162
More examples on that page too.
- Laravel Version: 6.2
- PHP Version: 7.2
- Database Driver & Version: MySQL 5.7.26

### Description:
below is a code snippet that updates account balance for an account when a saving in updated.
if the transaction fails for any reason the $saving update() is rolled back but changes are persisted in the  AccountBalance Model



### Steps To Reproduce:
**NOTE: $saving Model was passed to the method**
```
DB::beginTransaction(); // begin transation

            try {
                // update Account balance
                // deduct current saved amount
                AccountBalance::where('account_id', $validatedInputs['account_id'])
                    ->decrement('available', $saving->amount);
                AccountBalance::where('account_id', $validatedInputs['account_id'])
                    ->decrement('ledger', $saving->amount);

                // add new loan amount
                AccountBalance::where('account_id', $validatedInputs['account_id'])
                    ->increment('available', $validatedInputs['amount']);
                AccountBalance::where('account_id', $validatedInputs['account_id'])
                    ->increment('ledger', $validatedInputs['amount']);

                // perform saving
                $saving = tap($saving)->update($validatedInputs);

                // commit transaction
                DB::commit();

            } catch( \Exception $e) {

                DB::rollBack();
                throw $e;

                return response()->json([
                    'savings_updated' => false
                ]);
            }
```

This PR tries to implement the full support of soft-deletes in many-to-many-relationships.

Related Issues: #725, #2733, #28407, and some questions about that feature on SO or laracasts.
Some background information was already gatered in https://github.com/laravel/ideas/issues/1908

**Additions** 
- New interface SoftDeleteable
Used to detect if the pivot model is soft deletable even if the SoftDeletes trait was not used (custom implementations)
- Ability to apply scopes and call additional methods on the pivot-query
This allows for calls like `$group->members()->pivotWithTrashed()->get()` or really any other method-call regarding the pivot query

**Breaking changes**

Since soft deletes were not supported in belongsToMany and morphToMany relationships, nothing should be breaking. But there is the possibility that some users have models which use the SoftDeletes trait or implemented something for themselves. 
Since this is my first contribution i thought pointing to 7.x would be on the safer side.

**Todo**
- [x] Tests - All existing and new database tests are passing. 
- [ ] Documentation - Remove the warning about soft deletes when using pivots and mention the SoftDeletable-Interface
- Laravel Version: 6.10.0
- PHP Version: 7.2.14
- Database Driver & Version: mysql 5.7.24

### Description:
After I upgraded my Laravel from v6.9.0 to v6.10.0 third party translation library stopped working.
In Laravel v6.9.0  firstly are registering Laravel native 'translator' singleton and after that it registering third party libraries singletons, but in Laravel v6.10.0 firstly are registered third party libraries singleton named 'translator' and after that it will be overridden by Laravel native 'translator' singleton.

It could be caused by this changes: https://github.com/laravel/framework/pull/31009 @GrahamCampbell  please check it. Thanks.

### Steps To Reproduce:
Use one of the package which extends translations functionality and register translator singleton
I'm using this https://github.com/joedixon/laravel-translation library which takes translations from database

- Laravel Version: 6.9.0
- PHP Version: 7.3.13
- Database Driver & Version: Redis 

### Description:

Since Laravel persists the entire session data array at the end _every request_, in the case of concurrent requests, any changed session data is very likely to be lost.

https://github.com/laravel/framework/blob/50e43a5728cc65a0697187bdc8e8e39520707ec4/src/Illuminate/Session/Middleware/StartSession.php#L62-L65

#### Related issues:
- https://github.com/laravel/framework/issues/7549
- https://github.com/laravel/framework/issues/28147
- https://github.com/laravel/framework/issues/14385
- https://github.com/laravel/framework/issues/14162

#### Proposed fixes:
- Don't save the session in the `terminate()` method. https://github.com/laravel/ideas/issues/1161. This was changed in 5.8 with this PR: https://github.com/laravel/framework/pull/26410. But that change doesn't fix this issue.
- Only save data to session that is actually changed. https://github.com/laravel/framework/issues/18187
- Use session locking. https://github.com/rairlie/laravel-locking-session
- Check whether session data has changed before saving it. https://github.com/laravel/framework/pull/29410

### Steps To Reproduce:

In the below example of concurrent requests, the change in Request A will be lost, overridden when `StartSession::saveSession($request)` is called at the end of Request B's lifecycle:

```
    |--------  Request A (changes session variable) --------|
|------------ Request B (no changes to session data) ------------|
```

### Recommendation:

The only complete solution to this problem is to use session locking. A package like this one will work: https://github.com/rairlie/laravel-locking-session. However, that basically makes all your AJAX requests synchronous, which isn't a great solution for modern SPA's.

@taylorotwell has mentioned some form of locking  as a solution to the problem in  https://github.com/laravel/framework/issues/7549#issuecomment-233631351.

However, I do think we can make other improvements. The fact is, most AJAX requests in a modern SPA aren't modifying session data. Nevertheless, they persist the session data at the end of their lifecycle. This means that **a single long-running request makes the session data unable to be changed reliably**.

After looking at all these related issues and proposed fixes, I think something like this PR https://github.com/laravel/framework/pull/29410 is the most tenable. It basically only persists the session data if it is dirty. It probably could be altered to be enabled/disable through a config option. It doesn't solve the problem if concurrent requests all want to alter the session data, but it does solve the 90% use case where most requests are just reading session data. The one issue I foresee with this approach is session timeout.


- Laravel Version: 6.9.0
- PHP Version: 7.4.0
- Database Driver & Version: Postgres 11

### Description:

When I forcefully create an associated model, the identifier is set to `null`. I expected to be able to force create associations this way.

### Steps To Reproduce:

```php
$post->comments()->forceCreate(['body' => 'Lipsum...']);
```

Will throw the error;

```
ERROR: SQLSTATE[23502]: Not null violation: 7 ERROR:  null value in column "post_id" violates not-null constraint
```