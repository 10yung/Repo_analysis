1. Added allure test report plugin to build.gradle files
2. Added @Epic annotation to categorise the tests

draft PR - have this code tested


**Corda Open Source 4.3**

I connect to my node using the standalone shell:

![01](https://user-images.githubusercontent.com/37046080/72472058-75963380-37a9-11ea-852a-90624ac3bb4e.PNG)

The config file looks like this:

![04](https://user-images.githubusercontent.com/37046080/72472079-7f1f9b80-37a9-11ea-968b-8c0ee19aa6b4.PNG)

My RPC user, which I used to log in the standalone shell, doesn't have the permission to run `CreateEvolvableShokenType` flow:

![05](https://user-images.githubusercontent.com/37046080/72472262-db82bb00-37a9-11ea-849c-d605bfb35ea3.PNG)

Running `flow list`, shows that flow:

![02](https://user-images.githubusercontent.com/37046080/72472282-e50c2300-37a9-11ea-85da-ab15d5052cad.PNG)

And the user is able to start the flow:

![03](https://user-images.githubusercontent.com/37046080/72472296-ea696d80-37a9-11ea-9d02-b759f7509eac.PNG)

- batch addTransactions method introduced to allow the optimization for multiple inserts
- prefetching added to DBTransactionStorage two avoid many round trips to database for multiple inserts. There is room for improvement, current implementation attempts to minimize number of necessary changes.
- optimized combining of vault updates to avoid quadratic runtime
Just a check that ensures the notary is in the whitelist before starting up.
Documentation change only: Gradle version 5.4.1 is used in all samples and cordapp templates. Additionally, the link in the docs for 4.10 is actually pointing to gradle 6.0.1

👮🏻👮🏻👮🏻 !!!! DESCRIBE YOUR CHANGES HERE !!!! DO NOT FORGET !!!! 👮🏻👮🏻👮🏻


# PR Checklist:

- [x] Have you run the unit, integration and smoke tests as described [here](https://docs.corda.net/head/testing.html)?
- [x] If you added public APIs, did you write the JavaDocs?
- [x] If the changes are of interest to application developers, have you added them to the [changelog](https://docs.corda.net/head/changelog.html) (`/docs/source/changelog.rst`), and potentially the [release notes](https://docs.corda.net/head/release-notes.html) (`/docs/source/release-notes.rst`)?
- [x] If you are contributing for the first time, please read the [contributor agreement](https://docs.corda.net/head/contributing.html) now and add a comment to this pull request stating that your PR is in accordance with the [Developer's Certificate of Origin](https://docs.corda.net/head/contributing.html#merging-the-changes-back-into-corda).

Thanks for your code, it's appreciated! :)

Notary cannot be excluded from the list of signers for non-notarized transactions because notary cannot sign during the later finality phase.

**Corda CE = 4.3**
**Tokens = 1.1-RC01**

* I have a REST API that queries my Mint node and returns its balance (all the tokens on my Mint node are held by the Mint).
* This API returns different results when ran multiple times consequently (I use Postman; several times within 10 minutes or so and it randomly returns a different balance) . 
* I don't run any code between those calls (i.e. no issue, transfer, or redeem commands).

Below is my code:
```
public Map<String, BigDecimal> getNodeBalance(@NotBlank String myTokenTypeId) {
	// Latest version of my EvolvablableTokenType.
	EvolvableMyTokenType myTokenType = MyTokenUtils.getLatestMyTokenType(proxy, myTokenTypeId);
	// Only tokens held by the Mint.
	QueryCriteria queryCriteria = QueryUtilitiesKt.heldTokenAmountCriteria(
			myTokenType.toPointer(myTokenType.getClass()),
			proxy.nodeInfo().getLegalIdentities().get(0));

	// Based off the code from Corda documentation (API: Vault Query).
	int pageNumber = DEFAULT_PAGE_NUM;
	final int pageSize = 200;
	long totalResults;
	long totalBalance = 0;
	do {
		PageSpecification pageSpec = new PageSpecification(pageNumber, pageSize);
		Vault.Page<FungibleToken> results = proxy.vaultQueryByWithPagingSpec(FungibleToken.class,
				queryCriteria, pageSpec);
		totalResults = results.getTotalStatesAvailable();
		if (totalResults == 0)
			return Collections.singletonMap("Node Balance", BigDecimal.valueOf(0));
		List<StateAndRef<FungibleToken>> pageMyTokens = results.getStates();
		// Is it possible the below line is behaving randomly?
		long pageBalance = pageMyTokens.stream()
				.mapToLong(t -> t.getState().getData().getAmount().getQuantity()).sum();
		totalBalance += pageBalance;
		pageNumber++;
	}
	while ((pageSize * (pageNumber - 1) <= totalResults));

	BigDecimal bigTotalBalance = BigDecimal.valueOf(totalBalance);
	// MyToken has 6 fraction digits; meaning 1000,000 = one MyToken.
	BigDecimal fractions = BigDecimal.valueOf(Math.pow(10, myTokenType.getFractionDigits()));
	BigDecimal nodeBalance = bigTotalBalance.divide(fractions);
	return Collections.singletonMap("Node Balance", nodeBalance);
}
```
I ran the webserver with remote debug and monitored the values of `pageBalance` and `totalBalance`. I'm not using "order by" in my query, but notice how for the first 4 pages the results are identical in the 2 API calls, but the numbers in the 5th page are different; even though the records are the same!!!
I didn't issue, transfer, or redeem any tokens between API calls, in fact I didn't call any code other than pressing the "send" button inside Postman to call the API.
 
```
		Calling API		Calling same API again
Page balance: 	197727787		197727787
Total so far:	197727787		197727787

Page balance:	200000000		200000000
Total so far:	397727787		397727787

Page balance:	200000000		200000000
Total so far:	597727787		597727787

Page balance:	200000000		200000000
Total so far:	797727787		797727787

Page balance:	62727787		65000000
Total so far:	860455574		862727787
```

Btw, the correct balance is the second API call (862727787); I use the below query in my pgAdmin:
```
select sum(amount)
from fungible_token 
-- Holder is Mint node
where holder = 'OU=XXX, O=XXX, L=London, C=GB'
and (transaction_id, output_index) 
in (
select transaction_id, output_index 
	from vault_states 
	-- Only tokens
	where contract_state_class_name = 'com.r3.corda.lib.tokens.contracts.states.FungibleToken' 
	-- Only unconsumed
	and state_status = 0
);
```

Regardless of which returned number is the correct balance; how is it that the same code is returning different results? Looks like `vaultQueryByWithPagingSpec` has a problem.

I created the following repository with an example that has the exact same code that I used to calculate the balance, but sadly I wasn't able to reproduce the error; but I hope that it's still a good starting point for your investigation: https://github.com/adelRestom/tokens-sdk-issue-172

I'm also attaching a video (as a zip file) that shows you the odd behavior in my real code on Google Cloud (unfortunately I cannot share that code, but the example repo has the same code that the API uses). In the video I query the database to show the correct balance, and I keep calling the API; initially it shows the wrong number and then suddenly the returned number changes and shows the correct balance!

[Demo.zip](https://github.com/corda/corda/files/4048491/Demo.zip)

Initially I opened this issue in the Tokens SDK repo (https://github.com/corda/token-sdk/issues/172), but Roger Willis did his own tests and couldn't reproduce it either, and he also suggested opening the issue in Corda repo since it's related to querying the vault with pagination.

Any hints on what could be the cause? I wasn't able to reproduce with the provided example repo or the real code locally (the problem only happens in DEV on GCP - Google Cloud).
