
#### Do you want to request a *feature* or report a *bug*?

bug

#### What is the current behavior?

Assume we have the following controller:
``` ruby
bash-5.0# cat app/controllers/test.rb
Test::App.controllers :test do

  get :foo, with: [:one, :two] do
    "world"
  end

  get :foo, with: :one do
    "hello"
  end

end
```

`Test::App.url(:test, :foo, one: "one")` shall match the second route `with: :one`, not the first `with: [:one, :two]`. However, the first one is actually taken and thus raises an error like below:

``` ruby
bash-5.0# bundle exec padrino c
=> Loading development console (Padrino v.0.14.4)
=> Loading Application Test::App
irb(main):001:0> Test::App.url(:test, :foo, one: "one")
Traceback (most recent call last):
       16: from /usr/local/bundle/gems/thor-0.20.3/lib/thor/invocation.rb:126:in `invoke_command'
       15: from /usr/local/bundle/gems/thor-0.20.3/lib/thor/command.rb:27:in `run'
       14: from /usr/local/bundle/gems/padrino-core-0.14.4/lib/padrino-core/cli/base.rb:43:in `console'
       13: from (irb):1
       12: from /usr/local/bundle/gems/padrino-core-0.14.4/lib/padrino-core/application/routing.rb:343:in `url'
       11: from /usr/local/bundle/gems/padrino-core-0.14.4/lib/padrino-core/application/routing.rb:432:in `make_path_with_params'
       10: from /usr/local/bundle/gems/padrino-core-0.14.4/lib/padrino-core/path_router.rb:70:in `path'
        9: from /usr/local/bundle/gems/padrino-core-0.14.4/lib/padrino-core/path_router/matcher.rb:44:in `expand'
        8: from /usr/local/bundle/gems/mustermann-1.1.0/lib/mustermann/ast/pattern.rb:108:in `expand'
        7: from /usr/local/bundle/gems/mustermann-1.1.0/lib/mustermann/expander.rb:152:in `expand'
        6: from /usr/local/bundle/gems/mustermann-1.1.0/lib/mustermann/expander.rb:182:in `with_rest'
        5: from /usr/local/bundle/gems/mustermann-1.1.0/lib/mustermann/expander.rb:150:in `expand'
        4: from /usr/local/bundle/gems/mustermann-1.1.0/lib/mustermann/ast/expander.rb:97:in `expand'
        3: from /usr/local/bundle/gems/mustermann-1.1.0/lib/mustermann/ast/expander.rb:97:in `fetch'
        2: from /usr/local/bundle/gems/mustermann-1.1.0/lib/mustermann/ast/expander.rb:97:in `block in expand'
        1: from /usr/local/bundle/gems/mustermann-1.1.0/lib/mustermann/ast/expander.rb:120:in `error_for'
Mustermann::ExpandError (cannot expand with keys [:one], possible expansions: [:one, :two])
```

The following patch seems to solve the problem, although I'm not sure it is a perfect solution.
``` diff
bash-5.0# diff -u padrino-core-0.14.4/lib/padrino-core/path_router.rb.org padrino-core-0.14.4/lib/padrino-core/path_router.rb
--- padrino-core-0.14.4/lib/padrino-core/path_router.rb.org
+++ padrino-core-0.14.4/lib/padrino-core/path_router.rb
@@ -56,7 +56,7 @@
       #
       def path(name, *args)
         params = args.last.is_a?(Hash) ? args.pop : {}
-        candidates = @routes.select { |route| route.name == name }
+        candidates = @routes.select { |route| route.name == name && (route.matcher.names - params.keys.map(&:to_s)).length == 0 }
         fail InvalidRouteException if candidates.empty?
         route = candidates.sort_by! { |candidate|
           (params.keys.map(&:to_s) - candidate.matcher.names).length }.shift
```

#### What is the expected behavior?

```
irb(main):001:0> Test::App.url(:test, :foo, one: "one")
=> "/test/foo/one"
```

#### Which versions of Ruby, Padrino, Sinatra, Rack, OS are you using? Did this work in previous versions?

Ruby on Docker image `ruby:2.6-alpine` with Padrino 0.14.4

Update bundler", "~> 2.0.2"
Hello.

I want to inherit Padrino::Logger and use it. However, the current Padrino::Logger implementation cannot be used smartly.
Because, an instance of Padrino::Logger is created even in the inherited class.

```ruby:boot.rb
class CustomLogger < Padrino::Logger
end

...

Padrino.before_load do
  ...
  replace_logger = CustomLogger.logger # replace_logger is the instance of Padrino::Logger
  Padrino.logger = replace_logger
  ...
end
```

If possible, I would like you to change the implementation of Padrino::Logger#setup!.

#### Current implementation
```ruby
module Padrino
  class Logger
    def self.setup!
      ...
      new_logger = Padrino::Logger.new(config.merge(:stream => stream))
      new_logger.extend(Padrino::Logger::Extensions)
      self.logger = new_logger
    end
  end
end
```

#### Alternative implementation
```ruby
module Padrino
  class Logger
    def self.setup!
      ...
      # Create self-instance
      new_logger = self.new(config.merge(:stream => stream))
      new_logger.extend(self::Extensions)
      self.logger = new_logger
    end
  end
end
```

Thank you for reading.



i18n changes: https://github.com/ruby-i18n/i18n/releases
#### Do you want to request a *feature* or report a *bug*?
bug
#### What is the current behavior?
I am running padrino at a relative url. the page loads, but the assets do not, even though the proper path is defined. I corrected this (as a workaround) by creating a symlink in public of the relative_url prefix pointing back to public
#### Please provide the steps to reproduce
1. mount your base app at a relative_url (e.g. "/myapp")
2. use stylesheet_link_tag :site (specifying the site.css file) in your layout.erb file.
3. get a 404 error for the asset.
#### What is the expected behavior?
Assets load from https://(relative_url)/path/to/asset.
#### Which versions of Ruby, Padrino, Sinatra, Rack, OS are you using? Did this work in previous versions?
Padrino 14.0.4 with Webrick under JRuby 9.2.8.0

Can I turn off executing describe statements? At least only in development e.g.? The whole boot process is over 3 minutes and it's just impossible to maintain the project. 
Hello.

I am currently learning sinatra and am slowly progressing.

Oddly enough I had most progress so far thanks to various videos (I'll not link in
these videos so as to avoid "advertising" for any, but you can definitely find
sinatra videos when you are looking for them).

There is another "logical" step that will come past sinatra - which is to use padrino.
At the least to me this is logical.

I had a look at the guide section:

http://padrinorb.com/guides/

And, don't get me wrong, they look great, detailed, useful - but I am already barely
reading the text documentation for sinatra, so I don't think I have enough energy,
time and motivation to want to read them for padrino. I am more the type of 
person to learn in smaller baby steps, then do something else, so videos that
are in the length range of say, 4-20 minutes are ideal for me.

There are a few videos for padrino but they seem to be a bit random, or just
given as a presentation at a conference, so I am not sure if this covers my 
suggestion or plea.

I would like to see a few "intro" video tutorials for padrino, and ideally these
would be listed at http://padrinorb.com/guides/  (the URLs used do not matter
so much to me, e. g. where it is hosted; I would think it more important that
they are linked in from the official guides section, since that would mean that
the padrino team may consider these tutorials to be useful; could also be
inofficial recommendation, just anything to get folks started with padrino).

I am not sure if this issue request is useful; evidently lack of time and resources
may make this impossible but in this case, feel free to close this issue. But 
perhaps someone out there may have time making one or two short tutorials
(and with short I really mean the range of ~4-10 minutes or so; I noticed that
my attention span drops sharply at about ~10 minutes or so, give or take)
#### Do you want to request a *feature* or report a *bug*?
A Bug.

#### What is the current behavior?
If you have mongoid models residing in a directory other than /models or /app/models, invoking `padrino rake mi:create_indexes` will be a silent no-op.

Invoking ::Mongoid::Tasks::Database.create_indexes (as seen in $MONGOID_GEM_ROOT/lib/mongoid/tasks/database.rake) in a padrino console however does find and deal with all models. 

#### What is the expected behavior?
Invoking 'padrino rake mi:create_indexes` will create any missing indexes of any mongoid model in memory, regardless of where the model resides in the directory tree.

#### Which versions of Ruby, Padrino, Sinatra, Rack, OS are you using? Did this work in previous versions?
MRI 2.6.1, Padrino 0.14.4, Sinatra 2.0.5, Rack 2.0.6, Linux 5.0.0

#### What is the current behavior?
Currently, padrino-helpers depends on i18n ~>0.6, >= 0.6.7. We're encountering more and more gems that depend on activesupport 5.x, which in turn depends on i18n >= 0.7, < 2, causing a the dependency to not being able to be resolved.

#### What is the expected behavior?
The padrino-helpers gem can be used concurrently with other gems requiring an up-to-date version of activesupport.

#### Which versions of Ruby, Padrino, Sinatra, Rack, OS are you using? Did this work in previous versions?
MRI 2.6.1, Padrino 0.14.4, Sinatra 2.0.5, Rack 2.0.6.