Hello,

Wanted to bring to your attention that the simulation isn't working as intended on Safari in MacOS. For some reason, the fluids are just draws as "lines", and not actual fluid. You can look at it on the demo as well. 

Live test link: https://helloshivam-2020.netlify.com

Any fix for it would be great! 
WebGL Fluid Simulation on Mouse Over
i think it would be pretty cool to let people see how this code works (and edit / preview the program) right in their browser, without any manual downloads or installation. i'm thinking we can add a 'run on repl.it' button, which redirects to something like [this](https://repl.it/@eankeen/run-WebGL-Fluid-Simulation):

![image](https://i.imgur.com/xxXt0kR.png)

Amazing work!

Would someone already being working in an option where we have a mock mouse moving? so we don't need keep clicking on it and could leave this running in a TV?
Would it be possible to add a background image that's warped by the shader? To simulate waves through an image instead of just over top of it?

I've started by modifying it as mentioned in #14 but obviously that just applies a static background-image.
Is there a way to listen to the whole document instead of just canvas? I want the effect to continue over other elements as well, while maintaining their mouse events. Changing `canvas` to `document` or `window` creates a duplicate effect on the canvas.

    document.addEventListener('mousedown', e => {
    let posX = scaleByPixelRatio(e.offsetX);
    let posY = scaleByPixelRatio(e.offsetY);
    let pointer = pointers.find(p => p.id == -1);
    if (pointer == null)
        pointer = new pointerPrototype();
    updatePointerDownData(pointer, -1, posX, posY);
    });

    document.addEventListener('mousemove', e => {
    let pointer = pointers[0];
    if (pointer.down) return;
    let posX = scaleByPixelRatio(e.offsetX);
    let posY = scaleByPixelRatio(e.offsetY);
    updatePointerMoveData(pointer, posX, posY);
    });
Your experiment is amazing, congratulations !!

I am using as a background of my personal page, the source code is available at https://github.com/nidorx/alexrodin.info.

<p align="center">
        <a href="http://alexrodin.info">
            <img src="https://raw.githubusercontent.com/nidorx/alexrodin.info/master/docs/screen.gif" width="500" />
        </a>
    </p>

Thanks for sharing.
Improve hash performance
I am in the video encoding industry and I use a Raspberry Pi as a make-shift video test signal.

I usually like to use pre-encoded test videos, and just loop them out the HDMI. However, when I use it to re-encode, I don't get large enough bitrates because the video feed was already encoded (even though the HDMI signal is raw RGB).

I'd like to look for a scene that I could use that doesn't involve encoding at all so that I can test encoding for large bitrates. I would like to use a scene like your project here.

However, the performance of a Raspberry Pi won't let me use a browser. I'd need something lower level, meaning OpenGL.

Maybe you could help me? Maybe you know of another scene that I could use that uses OpenGL?
