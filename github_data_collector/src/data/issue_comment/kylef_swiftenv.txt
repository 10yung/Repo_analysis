So I installed VirtualBox and Ubuntu 18.04.3 LTS on it with the minimal settings.
Installed git and curl with apt-get then I ran the `eval "$(curl -sL https://swiftenv.fuller.li/install.sh)"` command which then I had compilation errors about missing libatomic1 and then some headers were not found, so I also had to apt-get clang

This was with swift 5.1.2

Here is the documentation on how to create an action: https://developer.github.com/actions/creating-github-actions/creating-a-new-action/
Add build instruction for swift-5.1-branch in share/swiftenv-build/5.1-dev
Here is my config:
```
os:
  - linux
  - osx
language: generic
sudo: required
dist: trusty
osx_image: xcode10.2
install:
  - eval "$(curl -sL https://swiftenv.fuller.li/install.sh)"
script:
  - swift build
```
And [here](https://travis-ci.org/artemnovichkov/Carting/jobs/524090956) is my failed job log:
```
The program 'swift' is currently not installed. To run 'swift' please ask your administrator to install the package 'python-swiftclient'
```
Linux Mint - as just a very popular variant of Ubuntu - can also be included, just to get rid off:

```bash
vision8@pluto:~$ swiftenv install 4.1
Usage: lsb_release [options]

lsb_release: error: no such option: -u
/home/vision8/.swiftenv/libexec/../libexec/swiftenv-install: line 54: [: =: unary operator expected
Usage: lsb_release [options]

lsb_release: error: no such option: -u
/home/vision8/.swiftenv/libexec/../libexec/swiftenv-install: line 54: [: =: unary operator expected
Usage: lsb_release [options]

lsb_release: error: no such option: -u
/home/vision8/.swiftenv/libexec/../libexec/swiftenv-install: line 54: [: =: unary operator expected
Downloading swift (swift-4.1-RELEASE)

....... (content omitted) .......

```
At least on Linux Mint 19, `lsb_release -is` returns `LinuxMint`.


And thank you for this great tool! :+1: 

Currently there's [SR-7039](https://bugs.swift.org/browse/SR-7039) open which prevents me from installing the amazing [Mint](https://github.com/yonaskolb/Mint) package manager on my Ubuntu 16.04 CI running with Swift 4.1.3 (I also tried 4.0.3 and Snapshot-2018-08-02 without success). [Here](https://github.com/yonaskolb/Mint/issues/94)'s the related issue on that on the Mint project.

In the discussion of SR-7039 Joel Saltzman explains a workaround in [a comment](https://bugs.swift.org/browse/SR-7039?focusedCommentId=36961&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-36961) which basically means I have to pass a different parameter when [installing swift-corelibs-libdispatch
](https://github.com/apple/swift-corelibs-libdispatch/blob/master/INSTALL.md) during the Swift installation. So I was thinking of just doing that manually by running the following additional commands after installing Swift via `swiftenv install 4.1.3` like so:

```
# Workaround for issue [SR-7039]
sudo apt-get install cmake ninja-build clang systemtap-sdt-dev libbsd-dev linux-libc-dev
cmake -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DBUILD_SHARED_LIBS=NO <path-to-source>
ninja
ninja install
```

But I actually have no idea what to specify to `<path-to-source>` or if this approach could even work after having already installed Swift. Is there a way I can pass the parameter `-DBUILD_SHARED_LIBS=NO` when installing Swift with `swiftenv`?

Thanks for any help!
Yes, some of us still use it. GET OFF MY LAWN

```shell
$ echo 'setenv SWIFTENV_ROOT "$HOME/.swiftenv"' >> ~/.tcshrc
$ echo 'setenv PATH "$SWIFTENV_ROOT/bin:$PATH"' >> ~/.tcshrc
$ echo 'eval "`swiftenv init - | sed -e \'s/export PATH=/setenv PATH /\'`"' >> ~/.tcshrc
```
Hi, I'm pretty new at Swift and installed swiftenv to start playing around with it. I followed the instructions on the website to install 3.1.1, however every time I try `swift -v`, I get the follow issue.

```
$ swift -v
Apple Swift version 3.1 (swift-3.1.1-RELEASE)
Target: x86_64-apple-macosx10.9
/Library/Developer/Toolchains/swift-3.1.1-RELEASE.xctoolchain/usr/bin/lldb "--repl=-enable-objc-interop -sdk /Library/Developer/CommandLineTools/SDKs/MacOSX10.13.sdk -color-diagnostics"
error: failed to launch REPL process: process launch failed: unable to locate debugserver
```
I'm on Elementary OS, an Ubuntu-based Linux. The Swift binaries compiled for Ubuntu 16.04 are fully compatible with it. But if using **swiftenv**, I get two results depending on how I install Swift:

### `swiftenv install N`: 

It first downloads the repos:
    
* swift
* swift-llvm
* swift-clang
* swift-lldb
* swift-cmark
* swift-llbuild 
* swift-package-manager
* swift-compiler-rt
* swift-corelibs-xctest
* swift-corelibs-foundation
* swift-corelibs-dispatch

Then proceeds to compile Swift:
```console
Building Swift
This may take a very long time...
```
And after that when I run `swift` (to invoke the REPL), I get this error:
```console
<unknown>:0: error: unable to load standard library for target 'x86_64-unknown-linux-gnu'
swift: /home/felix/.swiftenv/tmp/swiftenv-build-4.1/swift/include/swift/AST/Module.h:1193: swift::SourceFile &swift::ModuleDecl::getMainSourceFile(swift::SourceFileKind) const: Assertion `!Files.empty() && "No files added yet"' failed.
/home/felix/.swiftenv/versions/4.1/usr/bin/swift[0x3f259a4]
/home/felix/.swiftenv/versions/4.1/usr/bin/swift[0x3f25ce6]
/lib/x86_64-linux-gnu/libpthread.so.0(+0x11390)[0x7f0a50ae4390]
/lib/x86_64-linux-gnu/libc.so.6(gsignal+0x38)[0x7f0a4f009428]
/lib/x86_64-linux-gnu/libc.so.6(abort+0x16a)[0x7f0a4f00b02a]
/lib/x86_64-linux-gnu/libc.so.6(+0x2dbd7)[0x7f0a4f001bd7]
/lib/x86_64-linux-gnu/libc.so.6(+0x2dc82)[0x7f0a4f001c82]
/home/felix/.swiftenv/versions/4.1/usr/bin/swift[0x4dd35b]
/home/felix/.swiftenv/versions/4.1/usr/bin/swift[0x4dacb8]
/home/felix/.swiftenv/versions/4.1/usr/bin/swift[0x4c146c]
/home/felix/.swiftenv/versions/4.1/usr/bin/swift[0x4bf96c]
/home/felix/.swiftenv/versions/4.1/usr/bin/swift[0x478364]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f0a4eff4830]
/home/felix/.swiftenv/versions/4.1/usr/bin/swift[0x475c19]
Stack dump:
0.	Program arguments: /home/felix/.swiftenv/versions/4.1/usr/bin/swift -frontend -repl -disable-objc-interop -color-diagnostics -module-name REPL 
fish: “swift” terminated by signal SIGABRT (Abort)
```

### `swiftenv install SWIFT_BINARIES_URL`

After this happened, I decided to try again with a directed binary installation:

```console
swiftenv install https://swift.org/builds/swift-4.1-release/ubuntu1604/swift-4.1-RELEASE/swift-4.1-RELEASE-ubuntu16.04.tar.gz
Downloading https://swift.org/builds/swift-4.1-release/ubuntu1604/swift-4.1-RELEASE/swift-4.1-RELEASE-ubuntu16.04.tar.gz
/tmp/swiftenv-4.1-RELEASE-felix ~
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  171M  100  171M    0     0  3648k      0  0:00:48  0:00:48 --:--:-- 5053k
~
4.1-RELEASE has been installed.
felix@felix-X550LD ~> swift
Welcome to Swift version 4.1 (swift-4.1-RELEASE). Type :help for assistance.
  1>  
```

Which works no problem :+1: 

### What can be done

I think the best alternative is to build under non-ubuntu-based distros and figure out what's wrong with the build process that doesn't let it build or configure properly the Stdlib, s.t. they can actually use `swiftenv`.

And under ubuntu-based distros, having a way to tell what ubuntu are they based on. Then, proceeding to just install the binaries as if they were _that_ particular ubuntu.

### What I don't know

Does building work properly under vanilla Ubuntu? Maybe the stdlib gets properly built or configured iff that's the OS `swiftenv` is under.

### Extras

I tested this both under Swift 4.0 and 4.1, to make sure it wasn't my 4.1 PR that made `swiftenv` fail.