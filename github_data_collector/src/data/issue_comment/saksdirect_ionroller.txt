I've read over the documentation for ION Roller, including the API documentation to lists the various supported EB Config sections.  I've already read through the source code a bit too and found a generated `01custom.config`.

It appears that the ION Roller configuration file supports `.ebextensions` via a single file.  Meaning if I read typical documentation for setting up logging to Cloudwatch and stuff all the relevant sections into my ION Roller configuration it'll apply them as 1 `.ebextensions/01custom.config`.  

The problem is that I'm trying to use http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.cloudwatchlogs.html and more specificly the node/nginx logging section as a base example for building out the cloudwatch configuration.  However if the http://www.apidoc.me/gilt/ionroller-api/latest is accurate I'm unlike able to using sections like "Mapping, Output".

That's not to mention that in this case I'd rather it be the same across all services deployed so for DRY purposes would rather store this information external to the individual configuration file.  

I guess what I'm asking is if there's another way to type in cloud formation / EB configurations that ION Roller will use as a base or is the config file it?


I'm following the documentation on Setting up ION Roller using ION Roller CLI.  

https://github.com/gilt/ionroller/blob/master/docs/serviceSetup.md

The default Solution Stack threw an error, because it no longer exists.  This was compounded by the fact that the template referenced on the above page does not include a `eb.stack` property.  Fortunately the next step on deploying your own service has it listed and I was able to update to current AWS solution stack.

Here's the error when running:
`ionroller release ionroller 1.0.2 --emergency_deploy`

```
Exception in thread "main" com.amazonaws.AmazonServiceException: No Solution Stack named '64bit Amazon Linux 2015.03 v2.0.0 running Docker 1.6.2' found. (Service: AWSElasticBeanstalk; Status Code: 400; Error Code: InvalidParameterValue; Request ID: 7e9ff8b4-05a3-11e6-912e-51d5d54221f9)
    at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1182)
    at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:770)
    at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:489)
    at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:310)
    at com.amazonaws.services.elasticbeanstalk.AWSElasticBeanstalkClient.invoke(AWSElasticBeanstalkClient.java:1928)
    at com.amazonaws.services.elasticbeanstalk.AWSElasticBeanstalkClient.createEnvironment(AWSElasticBeanstalkClient.java:579)
    at ionroller.deployment.eb.EBSDeployer$$anonfun$createEnvironment$1$$anonfun$apply$10.apply(EBSDeployer.scala:57)
    at ionroller.deployment.eb.EBSDeployer$$anonfun$createEnvironment$1$$anonfun$apply$10.apply(EBSDeployer.scala:57)
    at scalaz.concurrent.Task$$anonfun$delay$1.apply(Task.scala:271)
    at scalaz.concurrent.Task$$anonfun$delay$1.apply(Task.scala:271)
    at scalaz.concurrent.Task$$anonfun$suspend$1$$anonfun$4.apply(Task.scala:279)
    at scalaz.concurrent.Task$$anonfun$suspend$1$$anonfun$4.apply(Task.scala:279)
    at scalaz.concurrent.Task$.Try(Task.scala:386)
    at scalaz.concurrent.Task$$anonfun$suspend$1.apply(Task.scala:279)
    at scalaz.concurrent.Task$$anonfun$suspend$1.apply(Task.scala:279)
    at scalaz.concurrent.Future.step(Future.scala:110)
    at scalaz.concurrent.Future.listen(Future.scala:75)
    at scalaz.concurrent.Future$$anonfun$listen$1$$anonfun$apply$4.apply(Future.scala:79)
    at scalaz.concurrent.Future$$anonfun$listen$1$$anonfun$apply$4.apply(Future.scala:79)
    at scalaz.Free$$anonfun$map$1.apply(Free.scala:52)
    at scalaz.Free$$anonfun$map$1.apply(Free.scala:52)
    at scalaz.Free.resume(Free.scala:73)
    at scalaz.Free.go2$1(Free.scala:118)
    at scalaz.Free.go(Free.scala:122)
    at scalaz.Free.run(Free.scala:172)
    at scalaz.concurrent.Future$$anonfun$apply$15$$anon$4.call(Future.scala:380)
    at scalaz.concurrent.Future$$anonfun$apply$15$$anon$4.call(Future.scala:380)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
```

So I think we need to either update the solution stack to `64bit Amazon Linux 2016.03 v2.1.0 running Docker 1.9.1` as listed here:
http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html#concepts.platforms.docker

Or add the `eb.stack` property to the template in the documentation.

how can i configure the region a service is deployed to?

i want ionroller itself not deployed in virginia, how is this possible?

It's not obvious to me how to see the events for a service other than to go into the event stream page and filter by its name. I think it would be helpful to have a link to from the service page directly to the events page with that filter already filled out.

Initially, this could be a longer delay after first instance is replaced with the new version.


If current release is red, try releasing the same again with a new configuration - system still waits for old release to become healthy. You need to explicitly drop the previous release.

Needs thought about how to make this clearer, or change workflow.

When setting up a service for the first time, it may take a few iterations before one gets a working configuration. Currently, the user has to add "--force" to remove each failed environment, it would be easier if this was not required.

We should keep track of the number of environments created, and limit the rate, in case of bugs/etc.
