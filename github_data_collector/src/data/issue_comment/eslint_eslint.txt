<!--
    Thank you for contributing!

    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).
-->

#### Prerequisites checklist

- [x] I have read the [contributing guidelines](https://github.com/eslint/eslint/blob/master/CONTRIBUTING.md).
- [x] The team has reached consensus on the changes proposed in this pull request. If not, I understand that the evaluation process will begin with this pull request and won't be merged until the team has reached consensus.

#### What is the purpose of this pull request? (put an "X" next to item)

[ ] Documentation update
[x] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))
[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))
[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

<!--
    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)
-->

<!--
    Please ensure your pull request is ready:

    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)
    - Include tests for this change
    - Update documentation for this change (if appropriate)
-->

<!--
    The following is required for all pull requests:
-->

#### What changes did you make? (Give an overview)

For checking template literal, also, I change the checking logic to use `getStaticPropertyName()` in `ast-utils`.

#### Is there anything you'd like reviewers to focus on?
It needs a consensus of ESlint members. - #12801 

<!--
    Thank you for contributing!

    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).
-->

#### Prerequisites checklist

- [X] I have read the [contributing guidelines](https://github.com/eslint/eslint/blob/master/CONTRIBUTING.md).
- [X] The team has reached consensus on the changes proposed in this pull request. If not, I understand that the evaluation process will begin with this pull request and won't be merged until the team has reached consensus.

#### What is the purpose of this pull request? (put an "X" next to item)

[X] Bug fix

This bug fix produces **more** warnings by default.

<!--
    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)
-->

**Tell us about your environment**

* **ESLint Version:** v6.8.0
* **Node Version:** v12.14.0
* **npm Version:** v6.13.4

**What parser (default, Babel-ESLint, etc.) are you using?**

default

**Please show your full configuration:**

<details>
<summary>Configuration</summary>

<!-- Paste your configuration below: -->
```js
module.exports = {
    parserOptions: {
        ecmaVersion: 2015,
    },
};
```

</details>

**What did you do? Please include the actual source code causing the issue.**

[Online Demo Link](https://eslint.org/demo#eyJ0ZXh0IjoiLyplc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogW1wiZXJyb3JcIiwgeyBcImlnbm9yZUFycmF5SW5kZXhlc1wiOiB0cnVlIH1dKi9cblxuMTAwIC50b1N0cmluZygpOyIsIm9wdGlvbnMiOnsicGFyc2VyT3B0aW9ucyI6eyJlY21hVmVyc2lvbiI6Niwic291cmNlVHlwZSI6Im1vZHVsZSIsImVjbWFGZWF0dXJlcyI6e319LCJydWxlcyI6e30sImVudiI6e319fQ==)

```js
/*eslint no-magic-numbers: ["error", { "ignoreArrayIndexes": true }]*/

100 .toString();
```

**What did you expect to happen?**

1 error, since this isn't an array index.

**What actually happened? Please include the actual, raw output from ESLint.**

No errors.

<!--
    Please ensure your pull request is ready:

    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)
    - Include tests for this change
    - Update documentation for this change (if appropriate)
-->

<!--
    The following is required for all pull requests:
-->

#### What changes did you make? (Give an overview)

Added check that the number is `property`, not just any child of `MemberExpression`.

#### Is there anything you'd like reviewers to focus on?

Also added regression tests to make sure that this change doesn't affect behavior when the number is really the `property`, though some of these cases might be another bug. I'll open an issue for these.

The scheduled release on Friday, January 31st, 2020 is assigned to:

* (needs volunteers)
* (needs volunteers)

Please use this issue to document how the release went, any problems during the release, and anything the team might want to know about the release process. This issue should be closed after all patch releases have been completed (or there was no patch release needed).

Resources:

* [Release guidelines](https://eslint.org/docs/maintainer-guide/releases)
<!--
    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).

    This template is for requesting a change that is not a bug fix, rule change, or new rule. If you are here for another reason, please see below:

    1. To report a bug: https://eslint.org/docs/developer-guide/contributing/reporting-bugs
    2. To request a rule change: https://eslint.org/docs/developer-guide/contributing/rule-changes
    3. To propose a new rule: https://eslint.org/docs/developer-guide/contributing/new-rules
    4. If you have any questions, please stop by our chatroom: https://gitter.im/eslint/eslint

    Note that leaving sections blank will make it difficult for us to troubleshoot and we may have to close the issue.
-->

**The version of ESLint you are using.**
latest

**The problem you want to solve.**
Enable cache by default

**Your take on the correct solution to problem.**
we should enable cache by default in cli so lint in a monorepo would be a lot faster. I know we could do so with --cache but it is a pain to add that to every single project in a monorepo. 

**Are you willing to submit a pull request to implement this change?**
yes
<!--
    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).

    This template is for bug reports. If you are here for another reason, please see below:

    1. To propose a new rule: https://eslint.org/docs/developer-guide/contributing/new-rules
    2. To request a rule change: https://eslint.org/docs/developer-guide/contributing/rule-changes
    3. To request a change that is not a bug fix, rule change, or new rule: https://eslint.org/docs/developer-guide/contributing/changes
    4. If you have any questions, please stop by our chatroom: https://gitter.im/eslint/eslint

    Note that leaving sections blank will make it difficult for us to troubleshoot and we may have to close the issue.
-->

**Tell us about your environment**

<!--
    If you are using ESLint v6.5.0 or later, you can run ESLint with the `--env-info` flag and paste the output here.
-->

* **ESLint Version:** v6.8.0
* **Node Version:** v12.13.0
* **npm Version:** v6.12.0

**What parser (default, Babel-ESLint, etc.) are you using?**

default

**Please show your full configuration:**

<details>
<summary>Configuration</summary>

<!-- Paste your configuration below: -->
```js
```

</details>

**What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.**

<!-- Paste the source code below: -->
[Demo - no-proto](https://eslint.org/demo#eyJ0ZXh0IjoiLyplc2xpbnQgbm8tcHJvdG86IFwiZXJyb3JcIiovXG5cbnZhciBhID0gb2JqW1wiX19wcm90b19fXCJdO1xudmFyIGEgPSBvYmpbYF9fcHJvdG9fX2BdOyIsIm9wdGlvbnMiOnsicGFyc2VyT3B0aW9ucyI6eyJlY21hVmVyc2lvbiI6MTEsInNvdXJjZVR5cGUiOiJtb2R1bGUiLCJlY21hRmVhdHVyZXMiOnsianN4Ijp0cnVlfX0sInJ1bGVzIjp7fSwiZW52Ijp7ImJyb3dzZXIiOmZhbHNlfX19)
```js
/*eslint no-proto: "error"*/
var a = obj["__proto__"];
var a = obj[`__proto__`];
```

[Demo - no-iterator](https://eslint.org/demo#eyJ0ZXh0IjoiLyplc2xpbnQgbm8taXRlcmF0b3I6IFwiZXJyb3JcIiovXG5mb29bXCJfX2l0ZXJhdG9yX19cIl0gPSBmdW5jdGlvbiAoKSB7fTtcbmZvb1tgX19pdGVyYXRvcl9fYF0gPSBmdW5jdGlvbiAoKSB7fTsiLCJvcHRpb25zIjp7InBhcnNlck9wdGlvbnMiOnsiZWNtYVZlcnNpb24iOjExLCJzb3VyY2VUeXBlIjoibW9kdWxlIiwiZWNtYUZlYXR1cmVzIjp7ImpzeCI6dHJ1ZX19LCJydWxlcyI6e30sImVudiI6eyJicm93c2VyIjpmYWxzZX19fQ==)
```js
/*eslint no-iterator: "error"*/
foo["__iterator__"] = function () {};
foo[`__iterator__`] = function () {};
```


**What did you expect to happen?**

Both cases are expected two errors each.


**What actually happened? Please include the actual, raw output from ESLint.**

Both rules(no-proto, no-iterator) don't consider template literals.

* no-proto
```js
/*eslint no-proto: "error"*/
var a = obj["__proto__"]; // Error - The '__proto__' property is deprecated
var a = obj[`__proto__`]; // no error.
```

* no-iterator
```js
/*eslint no-iterator: "error"*/
foo["__iterator__"] = function () {}; // Error - Reserved name '__iterator__'/
foo[`__iterator__`] = function () {}; // no error
```
**Are you willing to submit a pull request to fix this bug?**

Yes (it's prepared)
<!--
    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).
-->

**What is the purpose of this pull request? (put an "X" next to item)**

[ ] Documentation update
[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))
[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))
[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))
[X] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

<!--
    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)
-->

<!--
    Please ensure your pull request is ready:

    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)
    - Include tests for this change
    - Update documentation for this change (if appropriate)
-->

<!--
    The following is required for all pull requests:
-->

**What changes did you make? (Give an overview)**
Made the `camelcase` rule fixable by creating a fix function that modifies snake-cased names. 

**Is there anything you'd like reviewers to focus on?**
Please verify that my replacing logic is correct. I tried to make sure (added tests) that it ignores any number of leading and trailing underscores, and removes any number of underscores inside the name. 


Rules from plugins need to be namespaced using plugin name, which is missing.

<!--
    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).
-->

**What is the purpose of this pull request? (put an "X" next to item)**

[x] Documentation update
[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))
[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))
[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))
[ ] Add autofixing to a rule
[ ] Add a CLI option
[ ] Add something to the core
[ ] Other, please explain:

<!--
    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)
-->

<!--
    Please ensure your pull request is ready:

    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)
    - Include tests for this change
    - Update documentation for this change (if appropriate)
-->

<!--
    The following is required for all pull requests:
-->

**What changes did you make? (Give an overview)**
Add missing plugin reference

**Is there anything you'd like reviewers to focus on?**
no


<!--
    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).

    This template is for requesting a rule change. If you are here for another reason, please see below:

    1. To report a bug: https://eslint.org/docs/developer-guide/contributing/reporting-bugs
    2. To propose a new rule: https://eslint.org/docs/developer-guide/contributing/new-rules
    3. To request a change that is not a bug fix, rule change, or new rule: https://eslint.org/docs/developer-guide/contributing/changes
    4. If you have any questions, please stop by our chatroom: https://gitter.im/eslint/eslint

    Note that leaving sections blank will make it difficult for us to troubleshoot and we may have to close the issue.
-->

**What rule do you want to change?**
function-call-argument-newline

**Does this change cause the rule to produce more or fewer warnings?**
more

**How will the change be implemented? (New option, new default behavior, etc.)?**
new option

**Please provide some example code that this change will affect:**

<!-- Put your code examples here -->
```js

foo("one", "two", "three");
// or
foo(
   "one", 
   "two",
   "three"
);
// not
foo("one", "two",
  "three");

bar("one", "two", { one: 1, two: 2 });
// or
bar(
  "one",
  "two",
  {
     one: 1,
     two: 2
  }
);
// not
bar("one", "two", {
    one: 1,
    two: 2
});

baz(
  "one",
  "two",
   (x) => {
      console.log(x);
   }
);
// not
baz("one", "two", (x) => {
    console.log(x);
});
```

**What does the rule currently do for this code?**
Currently this rule will require a newline for arguments "always", "never", or "consistent" which means either all args are on a newline or all are on the same line.

**What will the rule do after it's changed?**
With a multi line rule, it should look if the parentheses are on different lines. Currently this is valid:
``` js
baz("one", "two", (x) => {
    console.log(x);
});
``` 
because it sees it as all being on one line (i suspect) but there should be a way to say that "no, these should each have their own line"

**Are you willing to submit a pull request to implement this change?**
I dont really understand how eslint works and I dont have a lot of time. Maybe if I get time.


**Tell us about your environment**

Environment Info:

Node version: v10.15.3
npm version: v6.13.1
Local ESLint version: v6.8.0 (Currently used)
Global ESLint version: Not found

**What parser (default, Babel-ESLint, etc.) are you using?**

default, cli

**Please show your full configuration:**

<details>
<summary>A portion of interest, json format</summary>

        "no-multi-spaces": [
            "error",
            {
                "exceptions": {
                    "Property": true,
                    "VariableDeclarator": true,
                    "ImportDeclaration": true,
                    "AssignmentExpression": true
                }
            }
        ],
        "key-spacing": [
            "error",
            {
                "align": "value"
            }
        ],

</details>


This is decorator for component for stenciljs web component

<!-- Paste the source code below: -->
```ts

@Component({
    tag:      'test-input-search',
    styleUrl: 'input-search.scss',
    shadow:   true,
})
export class InputSearch implements ComponentInterface {
   ...
}
```

<!-- Paste the command you used to run ESLint: -->
```bash
node_modules/.bin/eslint 'src/**/*.{js,ts,tsx}'
```

**What did you expect to happen?**

Nothing, lint pass

**What actually happened? Please include the actual, raw output from ESLint.**

  16:9   error  Multiple spaces found before ''test-input-search''                    no-multi-spaces
  18:12  error  Multiple spaces found before 'true'                                   no-multi-spaces

**Are you willing to submit a pull request to fix this bug?**

No, sorry, I am not that into this project in order to be able to contribute.
<!--
    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).

    This template is for bug reports. If you are here for another reason, please see below:

    1. To propose a new rule: https://eslint.org/docs/developer-guide/contributing/new-rules
    2. To request a rule change: https://eslint.org/docs/developer-guide/contributing/rule-changes
    3. To request a change that is not a bug fix, rule change, or new rule: https://eslint.org/docs/developer-guide/contributing/changes
    4. If you have any questions, please stop by our chatroom: https://gitter.im/eslint/eslint

    Note that leaving sections blank will make it difficult for us to troubleshoot and we may have to close the issue.
-->

**Tell us about your environment**

<!--
    If you are using ESLint v6.5.0 or later, you can run ESLint with the `--env-info` flag and paste the output here.
-->

* **ESLint Version:** 6.7.2
* **Node Version:** 12.14.1
* **npm Version:** 6.13.4

**What parser (default, Babel-ESLint, etc.) are you using?**
babel-eslint@10.0.3

**Please show your full configuration:**

<details>
<summary>Configuration</summary>

<!-- Paste your configuration below: -->
```js

```

</details>

**What did you do? Please include the actual source code causing the issue, as well as the command that you used to run ESLint.**
When autofixing the following code it resulted in non-parseable js code. This is a minimal reproducible example.

<!-- Paste the source code below: -->
```js
/* eslint-enable multiline-comment-style */
/*
  // a line comment
  some.code();
*/
```

**What did you expect to happen?**
I expect it to not yield non-parseable code.

**What actually happened? Please include the actual, raw output from ESLint.**
It yielded non-parseable code