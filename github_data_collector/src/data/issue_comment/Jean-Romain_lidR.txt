The following two files are incompatible because of difference scale factors, different CRS but yet `readLAS` can read them at once without even a warning> it should **at least** warn.

``` r
library(lidR)
#> Le chargement a nécessité le package : raster
#> Le chargement a nécessité le package : sp

LASfile1 <- system.file("extdata", "Megaplot.laz", package="lidR")
LASfile2 <- system.file("extdata", "Topography.laz", package="lidR")

readLASheader(LASfile1)
#> File signature:           LASF 
#> File source ID:           0 
#> Global encoding:
#>  - GPS Time Type: GPS Week Time 
#>  - Synthetic Return Numbers: no 
#>  - Well Know Text: CRS is GeoTIFF 
#>  - Aggregate Model: false 
#> Project ID - GUID:        00000000-0000-0000-0000-000000000000 
#> Version:                  1.2
#> System identifier:        LAStools (c) by rapidlasso GmbH 
#> Generating software:      las2las (version 171231) 
#> File creation d/y:        0/0
#> header size:              227 
#> Offset to point data:     321 
#> Num. var. length record:  1 
#> Point data format:        1 
#> Point data record length: 28 
#> Num. of point records:    81590 
#> Num. of points by return: 55756 21493 3999 342 0 
#> Scale factor X Y Z:       0.01 0.01 0.01 
#> Offset X Y Z:             0 0 0 
#> min X Y Z:                684766.4 5017773 0 
#> max X Y Z:                684993.3 5018007 29.97 
#> Variable length records: 
#>    Variable length record 1 of 1 
#>        Description: by LAStools of rapidlasso GmbH 
#>        Tags:
#>           Key 1024 value 1 
#>           Key 3072 value 26917 
#>           Key 3076 value 9001 
#>           Key 4099 value 9001
readLASheader(LASfile2)
#> File signature:           LASF 
#> File source ID:           0 
#> Global encoding:
#>  - GPS Time Type: Standard GPS Time 
#>  - Synthetic Return Numbers: no 
#>  - Well Know Text: CRS is GeoTIFF 
#>  - Aggregate Model: false 
#> Project ID - GUID:        00000000-0000-0000-0000-000000000000 
#> Version:                  1.2
#> System identifier:         
#> Generating software:      rlas R package 
#> File creation d/y:        0/2018
#> header size:              227 
#> Offset to point data:     297 
#> Num. var. length record:  1 
#> Point data format:        1 
#> Point data record length: 28 
#> Num. of point records:    73403 
#> Num. of points by return: 53538 15828 3569 451 16 
#> Scale factor X Y Z:       0.00025 0.00025 0.00025 
#> Offset X Y Z:             270000 5270000 0 
#> min X Y Z:                273357.1 5274357 788.9932 
#> max X Y Z:                273642.9 5274643 829.7582 
#> Variable length records: 
#>    Variable length record 1 of 1 
#>        Description: by LAStools of rapidlasso GmbH 
#>        Tags:
#>           Key 3072 value 2949

las = readLAS(c(LASfile1, LASfile2))
```

<sup>Created on 2020-01-17 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
Ciao JR,
playing around with 2.2.0/.1 (as a result of #313 ) I'm not able anymore to process a catalog without getting the following:
`Error: i[1] is 1 which is out of range [1,nrow=0]`
Might it be related to wrong handling of empty chunks?
The `is.overlapping` flag seems too sensitive. In the following case, the total area of overlap in the catalog is less than 1 square mm. It might be better to set a threshold greater than 0, only over which the `is.overlapping()` function would return `TRUE`. I'm not sure what that threshold should be (.01% of total area, or 1 square unit of area), but the current threshold seems too sensitive. 
 
Example:
```r
is.overlapping(ctg)
#> [1] TRUE
spdf <- as.spatial(ctg)
contour <- rgeos::gUnaryUnion(spdf)
actual_area <- contour@polygons[[1]]@area
measured_area <- area(ctg)
actual_area < measured_area
#> [1] TRUE
actual_area
#> [1] 54000000
sprintf("%.10f",actual_area)
#> [1] "54000000.0000000000"
measured_area
#> [1] 54000000
sprintf("%.10f",measured_area)
#> [1] "54000000.0000712425"
measured_area - actual_area
#> [1] 0.0001000017
ctg
#> class       : LAScatalog
#> extent      : 366000 , 372000 , 4717500 , 4726500 (xmin, xmax, ymin, ymax)
#> coord. ref. : +proj=utm +zone=18 +ellps=GRS80 +units=m +vunits=m +no_defs 
#> area        : 54 km²
#> points      : 311.79 million points
#> density     : 5.8 points/m²
#> num. files  : 24 
```
Is it possible to do set operations (given some distance threshold) between two point cloud datasets?  This would be a filter such as intersections, unions, differences, etc.  Related: is there a point-to-point distance tool between two lidar datasets?
Ciao JR,
I have a bunch of files to convert from EPSG 3035 to 32632. When reading them I get a warning:
```
Warning messages:
1: Invalid header: X scale factors should be factor ten of 0.1 or 0.5 or 0.25 not 1e-07 
2: Invalid header: Y scale factors should be factor ten of 0.1 or 0.5 or 0.25 not 1e-07
```
and indeed `las@header` shows:
`Scale factor X Y Z:       1e-07 1e-07 0.001 `

The transformation seems to work fine (coords are ok) but then when I try to write the las I get the related error:
`Errore: Invalid header: X scale factors should be factor ten of 0.1 or 0.5 or 0.25 not 1e-07`

Is it something that the user should fix manually or what? I don't know if might be similar to #270 .
Thanks in advance!
`lasmergespatial` supports only `SpatialPolygonsDataFrame` object and `SpatialPolygons` object but this is not documented. It should also support `sf` `POLYGON` and `MULTIPOLYGONS`.
There seem to be a problem with functions adding a variable to data without copying it first, e.g. `laspulse`. The new variable is under a new reference while the rest of the table has the same reference as the old table. Thus this last part of the table reacts at the reordering of the old table while the new variable does not.

Here is an example applied to `laspulse` (tested on R 3.4.4, lidR2.0.3, data.table 1.12.2):

```r
library(lidR)
library(data.table)
LASfile <- system.file("extdata", "Megaplot.laz", package="lidR")

las  <- readLAS(LASfile)
las1 <- laspulse(las)
las2 <- LAS(copy(las@data), las@header, las@proj4string)
las2 <- laspulse(las2)

setorder(las@data, ReturnNumber)

# the order has also moved in las1@data but only for the variables in las@data, i.e. not for pulseID
all(las1@data$Intensity == las@data$Intensity)
las1@data[,.(pulseID)] # still starting by 1 and ending by 56979

setorder(las2@data, ReturnNumber)
all(las2@data$Intensity == las1@data$Intensity) # TRUE
all(las2@data$pulseID == las1@data$pulseID) # but FALSE...
```
I see several solutions to that:
- copy the `las@data` at the beginning of these functions
- come back to reference processing inside function
- specify it in the documentation, so that people make there own affectation by reference `las <- laspulse(las)` or there own copy before processing

Maybe you see a better solution?