The Lambert and Phong shaders calculate lighting per-vertex. This results in poor lighting for meshes with low vertex density. There really is no need for this on modern hardware.
Trying to use point lights with the PBR material results in incorrect lighting. Looking at the shader, it only makes use of the light direction, which is only valid for directional lights.
As an exercise in evaluating the functionality of this library, I tried adding a simple "Z-Key toggles Wireframe/Shaded" draw mode for the anim.rs example. Cue two days of frustration banging into various "why is this glitching" followed by "compiler says no" problems.

Here are a bunch of things that could make this experience easier the next time someone new to this library tries to do this stuff:

**1) There needs to be something like "Input.keypress_event(keycode)**
Currently, to handle a one-off "tap the key, an action happens, then don't repeat again until you hit the key again" (i.e. a toggle action doesn't randomly flicker, as keypress + keyrelease events are fired repeatedly), you need to do something like:
```
while win.update() && !win.input.hit(three::KEY_ESCAPE) {
    // Handle z-key toggles material
    if win.input.hit(three::controls::Key::Z) && 
       win.input.keys_hit().contains(&three::controls::Key::Z) 
    {
        // Toggle material now
        mesh.set_material(...)
    }
}
```

Instead of having to call both, perhaps just having a single method that does both steps would suffice?


**2) The standard Rust traits - Copy, PartialEq, Debug, ... - need to be implemented on most types in this library**
If trying to create a demo app that depends on this library (as an extern/separate crate), it's currently impossible to store any of the types defined by this crate in a struct (e.g. to wrap together all the viewport handling in a "ViewportState" object, that has a single ".update()" method that's exposed/called from the  "while window.update() {...}" main event loop.

For example, the following code fails to compile, as rustc complains about PartialEq not being implemented for Orbit, but you cannot implement PartialEq for that as it's in a different crate (!):
```
struct ViewportState {
    orbit : three::controls::Orbit,    <--- fails with error about PartialEq
    ...  other state variables you've defined - e.g. wireframe vs solid state ...
}

impl ViewportState {
    fn update(&self, input: &three::Input) {
        self.orbit.update(input);

        // Do other hotkey handling here (e.g. zkey handler)...
    }
}
```

**3) Add an Event Handling Example**
There needs to be an example in the examples folder showing how you'd combine single-keypress events (e.g. for toggling/triggering particular one-off actions, not repeating stepping motions), viewport controls (e.g. Orbit, FirstPerson), and/or the axis (two separate keys for repeating actions along some scale).
Apologies if this is covered by an existing issue (perhaps #129 or #161?) but is there any plan to support `raw-window-handle`? Or otherwise easily initialize three to render to an existing window?
I tried to run `cargo fmt`, but that didn't seem to work at all.
I think that's why almost every file was changed. I saw your .rustfmt, so I figured it was configured the way you guys wanted it.
The files you should be looking at, then, are src/window.rs, src/gui.rs, and examples/gui.rs.
I broke backwards compatibility because of the Window struct, right now for all of the other examples you'd have to do `Window<gui::NoBackend>::new()` to make a new window.
I'm not sure how you'd want me to fix that, whether you'd want me to `cfg` out everything GUI related, or maybe make what is now the window into `GuiWindow`, and then typedef `Window` as `GuiWindow<NoBackend>`. Either of these and several other things could preserve backwards compatibility, but it's up to you guys.

<!-- Reviewable:start -->
---
This change isâ€‚[<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/three-rs/three/227)
<!-- Reviewable:end -->

Thanks for all the hard work on this library! Right now I'm working on a small game and want to use custom shaders for post effects. Because of #58 and the documentation I got very basic one running (basically a reimplementation of the basic material). The only thing I'm struggling with right now is defining my own uniforms and passing them to the custom shaders.

Is there a way to do this with `basic_pipeline` and `material::basic::Custom` currently or would it be less of a hassle to fork three and modify `renderer/mod.rs`? 

(I'm not entirely sure but this might be a duplicate of #174 if that is the case I'll close this issue and would love to chat over there ðŸ˜„)
Strange things happening. Love three so far btw <3

![image](https://user-images.githubusercontent.com/3472731/54052758-80755480-41e5-11e9-9b4a-2067a29d3ebb.png)

![image](https://user-images.githubusercontent.com/3472731/54052791-a4d13100-41e5-11e9-9ed1-0fd9e5e73563.png)

![image](https://user-images.githubusercontent.com/3472731/54052821-bfa3a580-41e5-11e9-8d5b-3ef6957d6248.png)

This is a conflicting proposal with #175

Pros:
  - dog-fooding `wgpu`, while still relying on gfx-hal
  - all the platforms for free
  - run on the Web

Cons: NONE
Really excited to get to use this crate on some projects! 

Do you think it would be possible to add the ability to export the rendered image as a PNG file (with transparency)? This would involve rendering to an image rather than the screen. 

This is useful for debugging, screenshots, and many other use cases. I tried looking around in the documentation and in the issue tracker but couldn't see anywhere that indicated if this was possible or not. 

If it needs to be implemented and you provide some instructions to help get this started, I or someone else interested may be able to help out. :)
Thanks for such an excellent library! 

Since three provides a way to load gltf files (among other formats), could it also be possible to save/export objects/scenes to those formats as well? I want to use three to make a program that can load models, make specific types of edits, and then save the entire scene as a gltf file.