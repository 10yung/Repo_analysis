is it possible to have a coroutines_ts example of an async TCP client that uses the function asio::async_connect?
It is to see what is the best practice for using this lib on the client side.
The following causes a compiler error when `ASIO_DISABLE_DECLTYPE` is defined (or when `decltype` is unavailable):

	valid_mutable_a x;
	buffer_sequence_begin(x);

Here `valid_mutable_a` is a type defined in the unit test and approved by `is_const_buffer_sequence` and `is_mutable_buffer_sequence` templates.
`asio::ip::tcp::resolver::async_resolve` resolves names in-order on Windows, I.E. multiple name resolutions do not take place at a given time. As I suspected, `getaddrinfo` is used in a worker thread in the implementation. I believe this can be improved two ways:

The lesser preferable of the two is spawning a thread for every resolution, which is not feasible for obvious reasons, or using a thread pool, which would only improve the situation and would not solve it.

The latter of the two is by using `GetAddrInfoExA` with a completion callback, or `getaddrinfo_a` on Linux (I haven't tested on Linux outside of WSL which may still use `getaddrinfo` internally so I don't know if the limitation exists on Linux). This would not work on Windows 7 or Server 2008 R2 or before, as per MSDN, `[lpOverlapped] is currently reserved and must be set to NULL since asynchronous operations are not supported.` However, it would still improve *most* Windows use cases that do large amounts of name resolution.
ASIO is header-only, so building and installing it could be very fast, however currently the build system always builds tests and examples.

In CI or production environments, examples almost never need to be built. Tests are not necessary in many cases.

This patch makes it easier to integrate Asio in a CI or production build environment by allowing to disable building tests and examples.
I have a device that is connected using a serial interface to the computer. This device is an [old one](https://en.wikipedia.org/wiki/Dial_box) and from several old drivers I have developed a new one using boost:asio, threads, etc.

I use the function [async_read_some](https://www.boost.org/doc/libs/1_67_0/doc/html/boost_asio/reference/serial_port/async_read_some.html) from the serial_port class and it has been working without any problem using the serial interface. However, attaching a serial-usb converter the device didn't work.

After some hours investigating I have found that the asio implementation of serial port works different if you are using the serial interface or the usb converter. With the serial interface the function returns after have read 3 bytes. However, with the usb converted return every byte.

The boost documentation is clear: "The function call always returns immediately." but it's surprising to me why this difference with the same driver, device but using a converter. Could you explain it?

The tag for asio-1-14-1 seems to be missing. Please kindly add it. Thanks.
Useful for when using ASIO in a Windows Subsystem on Linux use case, where the same source files are used by both Linux and Windows.
Currently, the `asio/ip/address.hpp` header pulls in rather a lot of code:

    $ echo "#include <asio/ip/address.hpp>" | g++ -std=c++17 -x c++ -I . - -E | wc -l
    41669

This is so excessive that it makes it difficult to see `asio::ip::address` as a vocabulary type. For example, if we have an application header `apikey.hpp` that defines:

    struct ApiKey
    {
      int64_t keynr;
      // ... stuff
      std::optional<asio::ip::adress> ip;
    };

then all TUs that include `apikey.hpp` will pull in at least 41669 LOC, even if they never touch the `ip` field of the `ApiKey` struct. This bloat somewhat discourages one from using `asio::ip::address` in places like these, which is a shame because I think `asio::ip::address` does have the _potential_ to be a true vocabulary type! :)
I was able to workaround with this changes:

```
diff --git a/asio/include/asio/detail/string_view.hpp b/asio/include/asio/detail/string_view.hpp
index f09cebc2..d94f65a2 100644
--- a/asio/include/asio/detail/string_view.hpp
+++ b/asio/include/asio/detail/string_view.hpp
@@ -22,7 +22,7 @@
 #if defined(ASIO_HAS_STD_STRING_VIEW)
 # include <string_view>
 #elif defined(ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW)
-# include <experimental/string_view>
+# include <string_view>
 #else // defined(ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW)
 # error ASIO_HAS_STRING_VIEW is set but no string_view is available
 #endif // defined(ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW)
@@ -33,8 +33,8 @@ namespace asio {
 using std::basic_string_view;
 using std::string_view;
 #elif defined(ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW)
-using std::experimental::basic_string_view;
-using std::experimental::string_view;
+using std::basic_string_view;
+using std::string_view;
 #endif // defined(ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW)

 } // namespace asio
(END)
```
TCP port number is of range [0, 65535], however, resolver still succeed on port number that is larger than the max port number 65535. It will cast the large number to unsigned short and silence the error.

```c++
auto endpoints = resolver.resolve({ "0.0.0.0", "300800" });
auto endpoint = endpoints.begin()->endpoint();
assert(endponit.port() == 300800); // failed
// endpoint.port() equals to 38656, which is static_cast<unsigned short>(300800)
```