this is due to github.com/google/dagger/issues/1449

```
> Task :debug-updater:compileDebugJavaWithJavac FAILED
/home/gabor/Letöltések/SdkSearch/debug-updater/build/generated/source/kapt/debug/com/jakewharton/sdksearch/debug/updater/UpdateActivityModule_ContributeUpdateActivity.java:9: error: package javax.annotation does not exist
import javax.annotation.Generated;
                       ^
/home/gabor/Letöltések/SdkSearch/debug-updater/build/generated/source/kapt/debug/com/jakewharton/sdksearch/debug/updater/UpdateActivityModule_ContributeUpdateActivity.java:14: error: cannot find symbol
@Generated("dagger.android.processor.AndroidProcessor")
 ^
  symbol: class Generated
/home/gabor/Letöltések/SdkSearch/debug-updater/build/generated/source/kapt/debug/com/jakewharton/sdksearch/debug/updater/UpdateActivity_MembersInjector.java:4: error: package javax.annotation does not exist
import javax.annotation.Generated;
                       ^
/home/gabor/Letöltések/SdkSearch/debug-updater/build/generated/source/kapt/debug/com/jakewharton/sdksearch/debug/updater/UpdateActivity_MembersInjector.java:7: error: cannot find symbol
@Generated(
 ^
  symbol: class Generated
4 errors

```

I have switched to Firefox. Let's make a Firefox extension.

Broken:
 * [ ] Default suggestion does not support `%s`.
 * [ ] Suggestions do not support `<match>`.
 * [ ] Per-storage `onChanged` does not exist.
https://play.google.com/store/apps/details?id=com.theah64.askwharton

How it works!! : https://github.com/theapache64/ask-wharton/blob/master/app/src/main/java/com/theah64/askwharton/ui/main/MainActivity.kt

@JakeWharton 

"I didn't find any other solution to get your attention other than creating an issue in your project :-| "
We have more than just gitweb now, folks...
I would suggest making the inputClear invisible instead of gone:

![20181026_132008 2018-10-26 13_52_12](https://user-images.githubusercontent.com/351125/47580852-5a31d500-d926-11e8-93a2-2a4ec2792ce0.gif)
I'm not sure how SDK Search is going to be in the future, but right now, I think it makes sense to kill the app when user press back, the keyboard is opened and the search field is empty. 
If the back is pressed, the user probably wants to exit the app, since there is no addional functionality.

There are apps like Chrome that already do this to some extent, for example, by automatically closing the omnibox fragment when user press back and the keyboard is opened. 

Updating the Chrome extension and Android app when the source mapping changes is a pain. If this were hosted and synchronized we could eliminate the need to do this.
* [ ] Use `mode = 'none'` for webpack
* [ ] Source maps
* [x] Visually distinguish content script DOM elements (`<blink>`?!?)
* [x] Debug 48px and 128px icons like Android
Right now we just send the raw exception as an info level crash which causes about 20 issues to be tracked based on how it fails. There's two problems here:

 * All transport-related problems are a single failure. The use of Timber in multiplatform code is a convenient but lazy way of tracking these. We should probably use something other than Timber for reporting crashes but that requires a multiplatform abstraction.
 * Using a crash reporting tool for this is dumb. These aren't crashes, but they're still useful to track. A better metric would be to correlate successful fetches with failed fetches as a percentage and track that over time to ensure the number doesn't jump to 100%.