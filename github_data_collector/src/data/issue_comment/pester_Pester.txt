## 1. General summary of the issue

<!--

Please provide a descriptive title of the issue in the field 'Title' too.

Please be aware that Pester version 3.4.0 - which is shipped with Windows 10 and Windows Server 2016 - is not supported anymore.

Please update Pester - before submitting a bug report - and retest your code under the newest version of Pester.

[Full installation and update guide](https://github.com/pester/Pester/wiki/Installation-and-Update).

-->

![image](https://user-images.githubusercontent.com/15063294/72660591-25e58100-39d0-11ea-9d91-94015c11e065.png)

The first file that is run:


```powershell
$PSVersionTable.PSVersion

$ModuleName = (Get-ChildItem $PSScriptRoot\*.psd1).BaseName

if ($null -eq (Get-Module -ListAvailable pester)) {
    Write-Warning "$ModuleName - Downloading Pester from PSGallery"
    Install-Module -Name Pester -Repository PSGallery -Force -SkipPublisherCheck
}
if ($null -eq (Get-Module -ListAvailable PSSharedGoods)) {
    Write-Warning "$ModuleName - Downloading PSSharedGoods from PSGallery"
    Install-Module -Name PSSharedGoods -Repository PSGallery -Force
}

Import-Module PSSharedGoods -Force
Import-Module $PSScriptRoot\PSWriteWord.psd1 -Force

$result = Invoke-Pester -Script $PSScriptRoot\Tests -Verbose -EnableExit

if ($result.FailedCount -gt 0) {
    throw "$($result.FailedCount) tests failed."
}
```



And this is the file it crashes on. 

```powershell
Describe 'Add-WordLine' {
    It 'Given 4 new lines document should hold proper amount of paragraphs' {
        $WordDocument = New-WordDocument
        Add-WordLine -WordDocument $WordDocument -LineColor Red -LineType double -Supress $True
        Add-WordLine -WordDocument $WordDocument -LineColor Blue -LineType single -LineSize 10 -Supress $True
        Add-WordLine -WordDocument $WordDocument -LineColor Red -LineType triple -Supress $True
        Add-WordLine -WordDocument $WordDocument -HorizontalBorderPosition top -LineColor Blue -LineType single -LineSize 10 -Supress $True
        $WordDocument.Paragraphs.Count | Should -Be 4
    }
}
```

Full error

```
Executing script /home/vsts/work/1/s/Tests/Add-WordLine.Tests.ps1

  Describing Add-WordLine
WARNING: New-WordDocument - Document:  Error: Unable to find type [Xceed.Words.NET.DocX].
Exception calling "LeaveTestGroup" with "2" argument(s): "TestGroups stack corrupted:  Expected name/hint of '/home/vsts/work/1/s/Tests/Add-WordLine.Tests.ps1','Script'.  Found 'Add-WordLine', 'Describe'."
At /home/vsts/.local/share/powershell/Modules/Pester/4.9.0/Pester.psm1:1142 char:21
+ ...                    $pester.LeaveTestGroup($testDescription, 'Script')
+                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
+ FullyQualifiedErrorId : ScriptMethodRuntimeException
```

## 2. Describe Your Environment

Not relevant but it's Azure DevOps (Linux/MacOs). Probably behaves the same on Windows if type would be missing.

<!--

If you would like to submit a bug report, please provide the output of a code provided below.

If you would like to write about anything else - like a feature request - feel free to remove a provided template text.

Operating System, Pester version, and PowerShell version:

```powershell
$bugReport = &{
    $p = Get-Module -Name Pester -ListAvailable | Select-Object -First 1
    "Pester version     : " + $p.Version + " " + $p.Path
    "PowerShell version : " + $PSVersionTable.PSVersion
    "OS version         : " + [System.Environment]::OSVersion.VersionString
}
$bugReport
$bugReport | clip
```

If you use Pester from a folder not included in the Env:PSModulePath please change a provided code accordingly.

-->

## 3. Expected Behavior

<!--

If you're describing a bug, tell us what should happen.

If you're suggesting a change/improvement, tell us how it should work. Mainly what the proposed feature is, why it is useful, and what dependencies (if any) it has. It would also be great if you added one or two examples of real-world usage if you have any.

-->

I should get an error that's caught and count as Test Failed.

## 4.Current Behavior

<!--

If describing a bug, tell us what happens instead of the expected behavior.

If suggesting a change/improvement, explain the difference between the current behavior and the suggested behavior.

Please remember that you can limit Pester output behavior using the `-Show` parameter.

-->

Pester doesn't catch that error with Tests Failed, therefore, AzureDevOps reports Success. 

## 5. Possible Solution

<!--

Have a solution in mind? Bug fix pull requests are always welcome.

https://github.com/pester/Pester/wiki/Contributing-to-Pester has detailed instructions on how to contribute.

If you are proposing a feature, let's discuss it here first.

-->

## 6. Context

I'm trying to test my code against Windows / Linux and MacOs on AzureDevOps. Due to library issues it's only going to work on Windows for now, but I would like it to report failure when thing go wrong anyways.

<!--

How has this issue affected you? What are you trying to accomplish?

-->


â€¦which may occur with PowerShell 7

<!--

Thank you for contributing to Pester! Please provide a descriptive title of the pull request in the field 'Title'.

-->

## 1. General summary of the pull request

If the failure message contains an escape sequence (which can happen with PowerShell 7, and the results are going to be serialized to an Nunit file, you may see something like this:
```
MethodInvocationException: /Users/jimtru/src/github/forks/JamesWTruher/Pester/Functions/TestResults.ps1
Line |
 591 |             $xmlWriter.WriteElementString('message', $TestResult.FailureMessage)
     |             ^ Exception calling "WriteElementString" with "2" argument(s): "', hexadecimal value 0x1B, is an invalid character."

```

and the xml file created is partial. The escape in the message is not valid for serialization
<!--

Please describe what your pull request fixes, or how it improves Pester.

If your pull request resolves a reported issue, please mention it by using  `Fix #<issue_number>` on a new line, this will close the linked issue automatically when this PR is merged. For more info see: [Closing issues using keywords](https://help.github.com/articles/closing-issues-using-keywords/).

If your pull request integrates Pester with another system, please tell us how the change can be tested.

Please remember to update [the Pester wiki](https://github.com/pester/Pester/wiki) if needed.

Before you continue, please review [Contributing to Pester](https://github.com/pester/Pester/wiki/Contributing-to-Pester) and [Development rules - technical](https://github.com/pester/Pester/wiki/Developement-rules---technical).

Our continuous integration system doesn't send any notifications about failed tests. Please return to the opened pull request (after ~60 minutes) to check if is everything OK.

-->

This escapes the escape character ([char]27) to `&27;`
As the title says, I think I want an enhancement but I'm not totally sure of the form it should take, and I'm prepared for people to shoot me down for doing things the wrong way. So here goes.. 

## 1. General summary of the issue
I'm doing some work with the selenium web testing tools. (You can clich through my name to see it. )
The selenium web driver can get a page, find an element on the page, find things about/within the element.   It can also type into input boxes and click on elements.  I have a bunch of commands which make for quite a nice DSL, all begining "Se" so I can write
```
SeOpen 'https://www.google.com/ncr' -In FireFox
Find-SeElement -by Name" q"  | SeType  'Powershell-Selenium{{Enter}}' 
```
I have built a command SeShouldHave so I get a consistent behaviour 
I might write    
`SeShouldHave $linkXpath -With href match selenium`   
or   
`SeShouldHave -By Name "cars" -With choice contains "volvo"`   
or   
`SeShouldHave -URL -eq $alertTestPage` -TimeOut 20

`SeShouldhave` throws an error if the page doesn't have what is meant to but in some places it needs to retry - so the last example can't be written as 
`$webDriver.URL | should -be $alertTestPage`  It also takes a `-passthru` switch so the first example would be written 
```
it 'Found the search box and did a search' {
  seShouldHave -by Name" q" -passThru  | SeType  'Powershell-Selenium{{Enter}}' 
}
```
having "type if found, throw if not found" would need to be 3 lines using should
```
$elem = Find-SeElement -by Name" q" 
$elem | should -not -benullOrEmpty 
SeType -element $elem -keys   'Powershell-Selenium{{Enter}}' 
```
so 
So **question 1.** What's the view on not using `should `inside the IT block but using something else which throws an error if the test fails or runs to completion if the test passes. I've got something which works but I don't want to promote a way of using pester which is outside what it is designed to support. 

I have reverse engineered the pester format for delivering an error record, so what the ` IT` command sees is very similar when `SeShouldHave `reports a failure as when `| should ` does. The only difference is that with should the output process filters out a lot of the script stack trace which, with a custom version I get extra lines of stack trace which I'd like to eliminate. 
so **question 2** Is it possible / practical / desirable to have either a "NoStackTrace" option for error output or to customize what gets filtered out ?  In other places I have found that the code being tested throws an error which wasn't anticipated which fails the test (as we want it to) but in some cases we get a lot off detailed red ink - appart from feeling there should be less of it I'm not certain what I want here, but was wondering if other people had ideas on that subject ? 



I am using a command where I am calling one ps1(dummy.ps1) file to another ps1 file, command I am using is :

start-process powershell{.\dummy.ps1}

I need to write the pester unit test to cover this line and I have to mock it but it not happening , so please help me to sort this out.

when I am checking the coverage its showing .\dummy.ps1 line is not covered.
I have mocked the command like this : Mock start-process{}
where I am doing wrong?
Should assertions have multiple quirks and pain points, here is a not-complete list:
- `-Be` does too much, so it is hard to understand what is happening
- Enumeration via pipeline complicates a lot of things and `-Be` has special logic to revert this, which does not always work
- It is difficult to apply seperate special behavior for different types of data (e.g. `Should -BeFalse -AllowNull -AllowTypeCast -FalseStringAsFalse`, `Should -BeString -CaseSensitive`, `Should -BeCollection -All { $_ -like "*file.ps1" }`) because parameter sets limited to 32 parameter sets per function

I researched the various limitations of Should by writing a separate module [Assert](https://github.com/nohwnd/Assert) which has nice functionality but is not used often because people are not aware of it. I think it would be wort it to merge the functionality into Pester and fix some of the quirks finally. But I am wondering what ways forward I actually have. 

There are few more limitations: 

- How to export the Should-* functions without triggering Verb warning? (Pester is getting around this by using single word functions at the moment). 
- How to ensure backward compatibility? (probably Should -Be has to remain in place while Should-Be is added)
- Should this change be done in v5? (if it is parallel then we can do it as non-breaking change).
- [ ] Add a summary of the changes, how to start and show some examples of the new behavior. 
- [ ] Add possible painpoints during migration.

## 1. General summary of the issue

Mock scope appears to be not intuitive.

If you define a Mock in an It, and think that when the It is gone that the Mock is gone, it does not appear to be so.  Since there doesn't appear to be a way to dispose of the Mock, the Mock may be available in every It and its parent Context.

The Work around is to put non mocked tests in a separate Context or Describe


## 2. Describe Your Environment
Happens in both Win 10 and Server 2016
Pester 4.9.0


Operating System, Pester version, and PowerShell version:

```powershell
Pester version     : 4.9.0 C:\Program Files\WindowsPowerShell\Modules\Pester\4.9.0\Pester.psd1
PowerShell version : 5.1.14393.3053
OS version         : Microsoft Windows NT 10.0.14393.0
```

If you use Pester from a folder not included in the Env:PSModulePath please change a provided code accordingly.



## 3. Expected Behavior
I expected one of two things:

Either 1. Mocks are no longer available when defined in an it and the it is done.
2, A method to dispose of the Mock when done with it.

## 4.Current Behavior
Right now Mocks defined in an It, override the mocked call in all other its within the same context. 
 To test you have to create a second context.  Not clear from documentation.


## 5. Possible Solution

Add a section on scoping to docs on wiki for Mocking, barring that add feature so that mocks can be disposed of

## 6. Context

The article published in 2014 here has a blurb about this issue: https://www.powershellmagazine.com/2014/09/30/pester-mock-and-testdrive/
 Kudos to Jakub JareÅ¡ for this quote:

"Mock scoping
The last set of rules you should keep in mind are the scoping rules that apply to mocks and mock call assertions. They complicated our lives already when we tried to assert on a mock call count in the first example, and they may produce all kinds of unexpected results if you are not aware of them:

Mock defined in Describe is available in the whole Describe.
Mock defined in Context is available in the whole Context.

Mock defined in It is available in its parent scope. That is in whole Context if the It is placed in a Context, and in whole describe if the It is placed in a Describe."

THere is a section about 'Invoke-Pester' but it would be smart to add a section called Scoping that points to it to make the docs better.
When running in the context of Mock we should collect errors and fail the MockWith or ParameterFilter, instead of writing the errors to the parent It block. 


Throw on Legacy Should syntax so the user gets a nice message instead of "cannot resolve parameter set". 

Fix #1376
- [ ] Get rid of Total* properties in favor of other more obvious names, like Count. 
- [ ] Make Duration the aggregate duration, and rename the rest
- [ ] Review container object and it's properties (when generated from ScriptBlock), it looks like the filtered out properties are not filtered out
- [ ] Add new line after summary