**Describe the bug**
Getting this warning when building prod webpack config and running it 

```
You are currently using minified code outside of NODE_ENV === 'production'. This means that you are
running a slower development build of Redux. You can use loose-envify
(https://github.com/zertosh/loose-envify) for browserify or DefinePlugin for webpack
(http://stackoverflow.com/questions/30030031) to ensure you have the correct code for your production build.
```

https://github.com/rematch/rematch/issues/534
I think this was already mentioned and resolved but is still happening 

**To Reproduce**
Steps to reproduce the behavior:

clone https://github.com/raven619claw/starter-kit/tree/develop
run `yarn`
`yarn build:prod` and then start with `yarn start:prod` and you would see the warning

**Expected behavior**
Warning should not be there as NODE_ENV is correctly set
hello everyone.
![image](https://user-images.githubusercontent.com/8280832/72494470-ea777500-385e-11ea-8383-48a7c02fe352.png)
![image](https://user-images.githubusercontent.com/8280832/72494479-f19e8300-385e-11ea-8500-6d3941aaa896.png)
![image](https://user-images.githubusercontent.com/8280832/72494524-172b8c80-385f-11ea-8e1e-354a98f50546.png)

**Describe the bug**
I've tried to reset the store by following [this](https://github.com/rematch/rematch/issues/663). And, I found that the value types from rematch loading plugin have been changed from boolean to integer.

I have an [example](https://github.com/phanduy12214/test-rematch) based on an [nextjs-with-rematch example](https://github.com/zeit/next.js/tree/canary/examples/with-rematch), using this snippet below to reset the store:

`const store = init({
  models,
  redux: {
    devtoolOptions: {},
    rootReducers: { RESET_APP: () => undefined }
  }
});`

**To Reproduce**
Steps to reproduce the behavior:

1. Clone my [custom code](https://github.com/phanduy12214/test-rematch)
2. Run `yarn`
3. Run `yarn dev`
4. Access to: http://localhost:3000
5. Click on the `incrementAsync` button
6. Click on the `Reset App` button
7. Observe the [Redux devtools](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en)

**Expected behavior**
The value of `loading.effects.counter.incrementAsync` changes from `false` to `0`. It should keep that boolean value.

**Screenshots**

![image](https://user-images.githubusercontent.com/13731780/72201742-c0523b80-3489-11ea-86e4-9095982d6983.png)


**Desktop:**

- OS: macOS Mojave
- Browser: Chrome
- Version: 79


# No references to Redux Toolkit?

[Redux Toolkit](https://redux-toolkit.js.org/)(rtk) seems to have many parallels to this project. It is an official redux project.

The documented rationale of this project seems to target conceptual and pain-points with 'classic' redux that are equally addressed by the Redux Toolkit.

So the question is: How this project differs from Redux Toolkit? I think this should be added to the docs.

# On a more critical note

For sure, there are some api differences between *rematch* and *rtk*; *rtk* is also more opinionated (eg, immer, thunks by default). But given it brand pitch is:

> The Redux Toolkit package is intended to be the standard way to write Redux logic

and given that it should get quite some traction, one may ask is it really worth maintaining this project in light of *rtk*?
**Describe the bug**
I've tried some examples from docs:
```ts
import { createModel, Models, init, RematchRootState, RematchDispatch } from '@rematch/core';

const model = createModel({
    state: 0,
    reducers: {
        increment: (state: number, payload: number) => (state + payload),
    },
    effects: (dispatch: Dispatch) => ({
        incrementAsync: async () => {
            await new Promise((resolve) => setTimeout(() => resolve(), 500));

            dispatch.model.increment(1);
        },
    })
});

interface RootModel extends Models {
    model: typeof model,
}

const rootModel: RootModel = {
    model: typeof model,
}

const store = init({
    models: rootModel,
});

type Dispatch = RematchDispatch<typeof rootModel>;
type State = RematchRootState<typeof rootModel>;
```

And this code gives me an error in effects field of my model:

```
No overload matches this call.
  Overload 1 of 2, '(model: ModelConfig<number, number>): ModelConfig<number, number>', gave the following error.
    Type '(dispatch: RematchDispatch<RootModel>) => { incrementAsync: () => Promise<void>; }' is not assignable to type 'ModelEffects<any> | ((dispatch: RematchDispatch<void>) => ModelEffects<any>) | undefined'.
      Type '(dispatch: RematchDispatch<RootModel>) => { incrementAsync: () => Promise<void>; }' is not assignable to type '(dispatch: RematchDispatch<void>) => ModelEffects<any>'.
        Types of parameters 'dispatch' and 'dispatch' are incompatible.
          Type 'RematchDispatch<void>' is not assignable to type 'RematchDispatch<RootModel>'.
            Type '{ [key: string]: { [key: string]: RematchDispatcher<void, void> | RematchDispatcherAsync<void, void>; }; } & ((...args: any[]) => Action<any, any>) & ((action: Action<void, void>) => Dispatch<Action<void, void>>) & ((action: Action<...>) => Dispatch<...>) & Dispatch<...>' is not assignable to type 'RematchDispatch<RootModel>'.
              Type '{ [key: string]: { [key: string]: RematchDispatcher<void, void> | RematchDispatcherAsync<void, void>; }; } & ((...args: any[]) => Action<any, any>) & ((action: Action<void, void>) => Dispatch<Action<void, void>>) & ((action: Action<...>) => Dispatch<...>) & Dispatch<...>' is not assignable to type 'ExtractRematchDispatchersFromModels<RootModel> & ((...args: any[]) => Action<any, any>) & ((action: Action<void, void>) => Dispatch<Action<void, void>>) & ((action: Action<void, void>) => Dispatch<...>) & Dispatch<...>'.
                Property 'model' is missing in type '{ [key: string]: { [key: string]: RematchDispatcher<void, void> | RematchDispatcherAsync<void, void>; }; } & ((...args: any[]) => Action<any, any>) & ((action: Action<void, void>) => Dispatch<Action<void, void>>) & ((action: Action<...>) => Dispatch<...>) & Dispatch<...>' but required in type 'ExtractRematchDispatchersFromModels<RootModel>'.
  Overload 2 of 2, '(model: ModelConfig<any, any>): ModelConfig<any, any>', gave the following error.
    Type '(dispatch: RematchDispatch<RootModel>) => { incrementAsync: () => Promise<void>; }' is not assignable to type 'ModelEffects<any> | ((dispatch: RematchDispatch<void>) => ModelEffects<any>) | undefined'.
      Type '(dispatch: RematchDispatch<RootModel>) => { incrementAsync: () => Promise<void>; }' is not assignable to type '(dispatch: RematchDispatch<void>) => ModelEffects<any>'.
```
I assume this might be because of RematchDispatch<void> type. It is incompatible with RematchDispatch<RootModel>.


**Expected behavior**
Work without any errors.

**Desktop (please complete the following information):**

- OS: Window 8.1
- Browser: Chrome 78

**Additional context**
TypeScript version 3.7.2

**Describe the bug**
When using store.model to add a model to an existing store, the store types don't include the new model

**Expected behavior**
After using store.model() and add a new model, the store.dispatch didn't recognize the new model in the store. Is expected that types are working properly and the new model can be recognized

This is a big one, sorry about that (and still work in progress, a couple of things left - those are listed at the bottom)

It includes:
- Moving the packages to lerna.
- Unifying the building and testing process by using tsdx.
- Moving tests to TypeScript. All the tests were updated and should be passing.
- Moving from TSLint to ESLint as the former will be deprecated - now there is one eslint config for all the repository.
- Improving (and probably breaking a little bit) typescript definitions - primarily for the core package. I'm not using TypeScript much, therefore, this was a challenge. I tried to see in the issues what problems are with TS but this definitely still requires work to make it perfect. I also tried to improve types that are used only internally, in plugins or the core package, to make the life of people maintaining the repo easier.
- To make the code a little bit easier to understand and extend, I tried to limit the usage of `this` binding and instead replace it with passing an instance of Rematch class to functions. Besides that I did some code cleanup. It's still not perfect, though, so I'm open to suggestions [*].
- Adding new plugins hooks - onReducer and onRootReducer.
- Changing middleware hook to createMiddleware - it is a function that returns the same thing as before but now accepts Rematch instance as the input.
- Improving the plugins - it is now possible to use both persist and immer plugins. Persist was updated to v6 and it is also now possible to use nested persisted reducers. Immer plugin has now additional config, it's possible to whitelist/blacklist reducers.
- Removing deprecated things - there are some breaking changes, therefore, I believe it's safe to remove stuff that makes the code dirty.


[*] For example, I'm not sure we need the 'exposed' property in plugins. The dispatch and effects plugins could actually not be plugins (even though it makes perfect sense) but just the integral part of the Rematch class (since they are always there anyway). This way the properties like `dispatch` or `createDispacher` are part of Rematch class. Other plugins, whenever they want to expose something, they can just assign property in Rematch class using plugin's onInit hook or add stuff to store in onStoreCreated. This would make the plugin's api easier and more typesafe I believe.

Todos:
- Update the documentation / readme / changelogs.
- Check/fix the examples.
- Update travis configuration - I'm not sure exactly how to change it - would appreciate some help with it.

I'm open to any critique and suggestions!
Hi! I love rematch and typescript, and currently I'm using the persist, immer, and navigation plugins. The navigation plugin doesn't have a `index.d.ts` file when importing it. I manually added it in my `node_modules` and was going to make a pull request to add it to the plugin but wasn't sure how to approach it. It's probably a quick fix and is more of a convenience than an issue. 

One important purpose for loading handling is to avoid calling one effect the second time when there is already another call undergoing for same effect. Before using rematch, this logic is done like below with redux-thunk:
```
{
  if(!state.someReducer.loading){ // check 'loading' flag
    dispatch(someActionStart()); // set 'loading' flag to 'true'
    //api fetch
    dispatch(someActionComplete()); //set 'loading' flag to 'false'
  }
}
```
By using rematch loading plugin, the code looks like:
```
{
  const loading = state.loading.effects.someModel.someEffect;
  if(!loading) //api fetch
}
```
Now the problem is that I found when the effect is been called. Loading flag for that effect is directly changed to 'true'. So the api is not called even once.

I found that this loading is correct if the check is put directly in component. But I insist this logic should be in the effect because the only job for component is to call the effect. Whether effect will trigger a new fetch or wait for the data of current fetch to return, they are all about api handing. The api effect should be responsible to handle it.

I would like to know if there are any good ways to use loading plugin in effect. Thank you very much
All the examples I see show the following type exported from the `./store` file:

```js
export type Dispatch = typeof store.dispatch
```
My issue is I'm creating my store in a function like the below:
```js
export function createStore(initialState: unknown): RematchStore {
  return init({
    models,
    redux: {
      initialState,
    },
  });
}
```
The reason for this is so it can be created fresh each time when server rendered (as seen in the [Next example](https://github.com/zeit/next.js/tree/canary/examples/with-rematch))

Is there a way for me to achieve the same typing without accessing the return value from `init`? I've studied the typings but not found an obvious answer. 

This same issue also seems to  apply to accessing `getState`:

> Breaking changes with v1.0.0. Global imports of dispatch and getState have been removed. Instead, you can export and import your store, capturing store.dispatch, store.getState.

Again, I'm struggling with not having `store` as a singleton I can export

Any help appreciated!

Edit:
I've had some success with the following when using Hooks, but not connect:

```js
const models = {
  channel,
  cms,
};

export type Dispatch = RematchDispatch<typeof models>;
```

Does this seem correct?