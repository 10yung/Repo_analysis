See #1189 and #1311. Even if bulk memory is enabled, it can be
convenient to omit the DataCount section for MVP compatibility.

This change only includes the DataCount section when an instruction
requires it; either `data.drop` or `memory.init`. It is also omitted if
there are no data segments.

Rather than doing a second pass on the instructions, this implementation
unconditionally writes the DataCount section, but removes it when it is
not needed. This required adding a function to truncate a stream
(Stream::Truncate).
With release 1.0.13 the tool wat2wasm.exe with the command line parameter "--enable-reference-types" produce ever a DataCount section with zero entries.

Is this expected? I would expected that an empty section is not written never to reduce size and prevent such problems.

Are there any workarounds with wat2wasm to prevent this? I know I can switch back to version 1.0.12.
Fixes #1042, thanks @rathann!
This is a fun way to give somewhat meaningful names to sections
containing strings. In the case of pure binary sections this likely
generates random characters, but that's not any worse than the
current generated names.
We currently have it as the `gh-pages` branch, but it will be easier to update if it was on `master`.  See https://github.com/WebAssembly/wabt/pull/1295#discussion_r366575581
i'm compiling rust project to wasm with `wasm-pack`, then converting resulting wasm to wat and trying to read it.

currently I can find functions by their original names, but function params and variables lack original names.

so for this rust function

```rust
pub fn add_two(my_param: i32) -> i32 {
    let my_arg = 2;
    my_param + my_arg
}
```

i have this wat
```wat
...
  (func $wasm_debug_symbols::add_two::h8849f07edd700d60 (type $t3) (param $p0 i32) (result i32)
...
```

there's only auto generated names for params/vars like `$p0`, `$p1`, `$l1`, `$l2`, etc.  

but this is strange because I've configured rust project to include DWARF debug symbols to wasm
```toml
[package.metadata.wasm-pack.profile.dev.wasm-bindgen]
dwarf-debug-info = true
```

i can even see those `my_param` and `my_arg` strings in target wasm file

```bash
$ hexdump -C wasm_debug_symbols_bg.wasm | grep -A 1 -B 1 my

001174a0  73 63 72 69 62 65 5f 61  64 64 5f 74 77 6f 00 6d  |scribe_add_two.m|
001174b0  79 5f 70 61 72 61 6d 00  6d 79 5f 61 72 67 00 61  |y_param.my_arg.a|
001174c0  72 67 30 00 5f 72 65 74  00 63 6c 61 6e 67 20 4c  |rg0._ret.clang L|
```

apparently original names for params/vars are included in wasm, but `wasm2wat` cannot find them.  

also i've checked that wasm file in dev tools of chrome and firefox, and i don't see original params/vars there either (i assume those browsers have their own wasm to wat converters)

also i've tried to write simple function in wat, feed it to `wat2wasm`, and then feed resulting wasm to `wasm2wat` back again. and i see that custom names for params are preserved. it means `wasm2wat` can extract param names from wasm ok.

<details>
<summary>simple function in wat</summary>

```wat
(module
  (type $t0 (func (param i32 i32) (result i32)))
  (func $addTwo (export "add_two") (type $t0) (param $my_param i32) (param $p1 i32) (result i32)
    (i32.add
      (local.get $my_param)
      (local.get $my_param))))
```

</details>

so i assume that problem is
- either in `wasm-pack`, which generates invalid debug symbols, so `wasm2wat` cannot extract them
- or in `wasm2wat` , which cannot read valid debug symbols from wasm

any thoughts?

i've created [minimum rust project](https://github.com/art-in/wasm-debug-symbols) for testing.  

[wasm_debug_symbols_bg.wasm](https://github.com/art-in/wasm-debug-symbols/raw/master/pkg/wasm_debug_symbols_bg.wasm) (from `wasm-pack`)  
[wasm_debug_symbols_bg.wat](https://raw.githubusercontent.com/art-in/wasm-debug-symbols/master/pkg/wasm_debug_symbols_bg.wat) (from `wasm2wat`)
Ran into this issue when reviewing some recent additions.

Currently the only documentation I could find was that we specify `BasedOnStyle: Chromium` in `.clang-format`.   This implicitly locks down a lot of things which good, more explicit docs would be good.

The specific issue we ran into was the wabt uses a style that requires curly braces around conditional blocks, but chromium, which inherits from google style allows from single line conditional, and conditional without curlys:
https://google.github.io/styleguide/cppguide.html#Conditionals
`In general, curly braces are not required for single-line statements`

We should be specific if we want to enforce this style.
I wasn't able to find much documentation about libwabt.js, but I was able to piece this together from various sources. Corrections/elaborations are invited.

### Usage ###

Call either `parseWat(filename:string, watSource:string, features: object)` or `readWasm(buffer: Uint8Array, {readDebugNames:true})`.

The `features` object can contain any of the following boolean keys: `mutable_globals`, `exceptions`, `multi_value`, `sign_extension`, `sat_float_to_int`, `simd`, `threads`, `tail_call`, `bulk_memory`, `reference_types`.

The calls to `parseWat` and `readWasm` will return an object `wasm` that supports the following methods:

* `wasm.destroy()`
* `wasm.resolveNames()`
* `wasm.validate(features)`
* `wasm.toBinary({log: boolean, write_debug_names: boolean}): { log: string, buffer: Uint8Array}`
* `wasm.generateNames()`
* `wasm.applyNames()`
* `wasm.toText({foldExprs: boolean, inlineExport: boolean}): string`

### Updating/Building ###

The file `demo/libwabt.js` in the wabt git repository is periodically updated. It's not clear how to do this manually oneself, to incorporate recent changes to the repo. Issue #536 says that this can be done by running `make emscripten-release`, which uses a target from the repo's top-level Makefile.

However, I just now tried going into my `emsdk` folder, updating it following the instructions [here](https://emscripten.org/docs/getting_started/downloads.html#updating-the-sdk) (including the `source ./emsdk_env.sh` command), then cd-ing into my wabt repo and trying `make emscripten-release`. This fails with:

```
mkdir -p out/emscripten/Release/
cd out/emscripten/Release/ && cmake -G "Unix Makefiles" /Users/jim/Documents/CLOUD/dev/wasm/wabt/ -DCMAKE_TOOLCHAIN_FILE=/Users/jim/Documents/CLOUD/dev/wasm/emsdk/upstream/emscripten//cmake/Modules/Platform/Emscripten.cmake -DCMAKE_BUILD_TYPE=Release 
CMake Error at /Users/jim/_dev/wasm/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake:100 (message):
  Failed to fetch compiler version information with command
  "'/Users/jim/_dev/wasm/emsdk/upstream/emscripten/emcc' -v"! Process
  returned with error code 1.
Call Stack (most recent call first):
  /opt/local/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake:93 (include)
  CMakeLists.txt:18 (project)


CMake Error: CMake was unable to find a build program corresponding to "Unix Makefiles".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.
-- Configuring incomplete, errors occurred!
make: *** [out/emscripten/Release/Makefile] Error 1
```

Is there a roadmap of typed function references and GC proposal support?

Tools like **wasm-interp** or **wasm2c** would be useful to test compilers while waiting for browser support.
