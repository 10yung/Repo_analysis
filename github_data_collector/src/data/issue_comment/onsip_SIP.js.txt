This is a work in progress branch for version 0.16.0.

It's being rebased on `dev-master` as work continues there.

Includes...
- remove old api
- remove old tests
- update documentation
- new `README.md` (TODO)

**Describe the bug**
The SDP in latest chrome have changed from **Plan B** to **Unified plan**. 
[“Unified Plan” Transition Guide (JavaScript)](https://docs.google.com/document/d/1-ZfikoUtoJa9k-GZG1daN0BU3IjIanQ_JSscHxQesvU/edit)

This causes to have many audios when switch from a device to another when do a **reinvite** or a **unhold** as described in issue #664.

Yes we can use the **sender.replaceTrack** API for that purpose (what I use now as a workaround) but this does not change the fact that the **reinvite** is now broken if the constraints options have changed when do **reinvite** or **unhold** And even if **replaceTrack** work, I have to acquire the user media by myself, If I use **sessionDecriptionHandler.acquire** it broke the sender because it try to remove the previous track and then there is no chance to replace it, adding the track without **reinvite** it simply does not work. Also after acquire the user media I have to manually trigger the **trackAdded** and **userMedia** event. If I don't do that sipjs don't understand that the user media has changed and don't stop it correctly when terminate.

Here is my workaround code:

``` js
session.sessionDescriptionHandler.WebRTC.getUserMedia(constraints).then(streams => {
  streams.getTracks().forEach(track => {
    session.sessionDescriptionHandler.peerConnection.getSenders().forEach(sender => {
      sender.track && sender.track.kind === track.kind && sender.replaceTrack(track)
    })
    session.sessionDescriptionHandler.observer.trackAdded()
    session.sessionDescriptionHandler.emit('userMedia', streams)
   })
})
```

**Logs**
```
v=0
o=- 1025239875102185327 3 IN IP4 127.0.0.1
s=-
t=0 0
a=group:BUNDLE 0 1
a=msid-semantic: WMS 7D2NrImu3kLms1dLkhRwl10RsyVV1xF0TCdL
m=audio 62611 UDP/TLS/RTP/SAVPF 111 103 104 9 0 8 106 105 13 110 112 113 126
c=IN IP4 172.16.39.93
a=rtcp:9 IN IP4 0.0.0.0
a=candidate:299851297 1 udp 2122260223 172.16.39.93 62611 typ host generation 0 network-id 1
a=ice-ufrag:Lb7r
a=ice-pwd:JvCyppp+emtwF01gDfLX9NJx
a=ice-options:trickle
a=fingerprint:sha-256 65:3C:9E:35:63:86:41:47:32:14:CA:B8:8B:86:FD:B6:87:D2:7F:DD:37:97:91:1E:39:39:57:73:9D:FE:35:22
a=setup:actpass
a=mid:0
a=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level
a=extmap:2 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01
a=extmap:3 urn:ietf:params:rtp-hdrext:sdes:mid
a=extmap:4 urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id
a=extmap:5 urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id
a=recvonly
a=msid:7D2NrImu3kLms1dLkhRwl10RsyVV1xF0TCdL 86a884a8-915b-43e6-b9b2-eef848ec9d70
a=rtcp-mux
a=rtpmap:111 opus/48000/2
a=rtcp-fb:111 transport-cc
a=fmtp:111 minptime=10;useinbandfec=1
a=rtpmap:103 ISAC/16000
a=rtpmap:104 ISAC/32000
a=rtpmap:9 G722/8000
a=rtpmap:0 PCMU/8000
a=rtpmap:8 PCMA/8000
a=rtpmap:106 CN/32000
a=rtpmap:105 CN/16000
a=rtpmap:13 CN/8000
a=rtpmap:110 telephone-event/48000
a=rtpmap:112 telephone-event/32000
a=rtpmap:113 telephone-event/16000
a=rtpmap:126 telephone-event/8000
a=ssrc:4009328187 cname:tEKkzyFtv2z9vxcA
a=ssrc:4009328187 msid:7D2NrImu3kLms1dLkhRwl10RsyVV1xF0TCdL 86a884a8-915b-43e6-b9b2-eef848ec9d70
a=ssrc:4009328187 mslabel:7D2NrImu3kLms1dLkhRwl10RsyVV1xF0TCdL
a=ssrc:4009328187 label:86a884a8-915b-43e6-b9b2-eef848ec9d70
m=audio 9 UDP/TLS/RTP/SAVPF 111 103 104 9 0 8 106 105 13 110 112 113 126
c=IN IP4 0.0.0.0
a=rtcp:9 IN IP4 0.0.0.0
a=ice-ufrag:Lb7r
a=ice-pwd:JvCyppp+emtwF01gDfLX9NJx
a=ice-options:trickle
a=fingerprint:sha-256 65:3C:9E:35:63:86:41:47:32:14:CA:B8:8B:86:FD:B6:87:D2:7F:DD:37:97:91:1E:39:39:57:73:9D:FE:35:22
a=setup:actpass
a=mid:1
a=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level
a=extmap:2 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01
a=extmap:3 urn:ietf:params:rtp-hdrext:sdes:mid
a=extmap:4 urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id
a=extmap:5 urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id
a=sendrecv
a=msid:jnxyznbOkzjOBETtQ9w1sqxQgfXR5KgmVU7s f7254bfb-a34e-465a-9b15-ad431c5c679d
a=rtcp-mux
a=rtpmap:111 opus/48000/2
a=rtcp-fb:111 transport-cc
a=fmtp:111 minptime=10;useinbandfec=1
a=rtpmap:103 ISAC/16000
a=rtpmap:104 ISAC/32000
a=rtpmap:9 G722/8000
a=rtpmap:0 PCMU/8000
a=rtpmap:8 PCMA/8000
a=rtpmap:106 CN/32000
a=rtpmap:105 CN/16000
a=rtpmap:13 CN/8000
a=rtpmap:110 telephone-event/48000
a=rtpmap:112 telephone-event/32000
a=rtpmap:113 telephone-event/16000
a=rtpmap:126 telephone-event/8000
a=ssrc:3155171097 cname:tEKkzyFtv2z9vxcA
a=ssrc:3155171097 msid:jnxyznbOkzjOBETtQ9w1sqxQgfXR5KgmVU7s f7254bfb-a34e-465a-9b15-ad431c5c679d
a=ssrc:3155171097 mslabel:jnxyznbOkzjOBETtQ9w1sqxQgfXR5KgmVU7s
a=ssrc:3155171097 label:f7254bfb-a34e-465a-9b15-ad431c5c679d
```

**To Reproduce (if possible)**
Steps to reproduce the behavior:
1. Invite with a constraint.
2. Change constraint.
3. Do a reinvite or an unhold.
4. There is no more outgoing audio.

**Expected behavior**
When do a **reinvite** or and **unhold** with another constraint, **sipjs** automatically acquire  the new media and trigger the track added event.

**Observed behavior**
The outgoing audio is lost.

**Environment Information**
 - Asterisk 13
 - Chrome 76

**Additional context**
Also, in latest Chrome unified plan, there is no candidates on new audios when do a **reinvite**. I have tried to create a modifier to correct this but I had not good results for now. This is may related to this #711

**Describe the bug**
A clear and concise description of what the bug is.
https://github.com/onsip/SIP.js/issues/484
https://github.com/onsip/SIP.js/issues/531
https://groups.google.com/forum/#!searchin/sip_js/iceCheckingTimeout|sort:date/sip_js/EuddDib0Q2A/aTG3Lt2rCgAJ

All indicate that setting peerConnectionOptions will overwrite them and cause audio to stop. Sure enough, this is the case.
Can I get a response on how you expect iceCheckingTimeout to be lowered? We can post logs but it seems pretty logical what's going on. If I set peerConnectionOptions the code will use them directly
https://github.com/onsip/SIP.js/blob/ed5a6ce738379eb9c79aa9c41b1b1cf716b893d4/src/Web/SessionDescriptionHandler.ts#L102
and is missing whatever defaults are supposed to be in there. 

Something isn't right after touching peerConnectionOptions since setting an ice timeout of 5000 or higher should be the same as default behavior. iceCheckingTimeout is the only parameter being tweaked. 

**Logs**
Please include a [gist](https://gist.github.com/) or attached file with full logs. If this is not included, the first response will likely be requesting them.

**To Reproduce (if possible)**
Steps to reproduce the behavior:
1. We are using invite, accept sessionDescriptionHandlerOptions to have per-session ice timeouts. 
2. Set a sessionDescriptionHandlerOptions.peerConnectionOptions.iceCheckingTimeout to 5000, the default
3. No audio 

**Expected behavior**
How do we change iceCheckingTimeout? 

**Observed behavior**
No audio over RTP 

**Environment Information**
Asterisk 16.3.0
Sipjs 0.11.6


**Additional context**
Add any other context about the problem here.

**Is your feature request related to a problem? Please describe.**
Maintainers of SIP.js have made clear in several instances (#588, #602, #696) that using a custom `MediaStream` as a source instead of `getUserMedia()` should be done through the implementation of a custom SessionDescriptionHandler. I'm fine with that.

In 0.14 however, the library has been rewritten in typescript, and most of the methods of `Web.SessionDescriptionHandler` are now private. This means that, to implement the rather small change from #588, one is required to reimplement the whole `getDescription()` method, while previously overwriting `acquire()` was enough.

Duplicating everything adds to the maintenance burden, as it forces to track every change to the upstream class. Bugs can easily slip through. It also means duplicating the whole class including modifier handling, ICE, etc., which are already solved problems.


**Describe the solution you'd like**
Because of that, would it be possible to devise a way to only override the acquisition part of `Web.SessionDescriptionHandler` (ideally, only the actual stream creation part)?

I can imagine two ways this could be implemented, depending on what fits the library style best, while not adding much maintenance burden to SIP.js itself:

* through inheritance, using a protected `getMediaStreams(constraints: any): Promise<MediaStream[]>` method,
* through inheritance, by splitting `getDescription()` into individually overridable parts,
* though some sort of callback in the `SessionDescriptionHandlerOptions` interface or in events.

Also, due to the way the library uses different options in different contexts (in this case, `UA sessionDescriptionHandlerFactoryOptions` at creation time but constructor options at `INVITE` time) it might be useful to pass the options along to whatever solution is chosen.

**Describe alternatives you've considered**
I tried implementing a modifier that would add mediastream tracks and call `createOffer()` again, but this fails due to Firefox complaining that you cannot call `createOffer()` twice.

I could not find any other hook or overridable methods that could make this feature available easily.

**Additional context**
I need to create a session without requesting user device access.

**Describe the bug**
The WebSocket transport connection timeout does not trigger a reconnection attempt.
The reconnection attempt is only triggered when the WebSocket itself times out (which can take a very long time, upwards of 1 minute).

**Logs**
https://gist.github.com/yren-ITH/1f39bc32e0d115e30791366cff6ec17e

**To Reproduce (if possible)**
Steps to reproduce the behavior:
1. Create a UserAgent with a list of dummy wsServers and logging enabled
```
const userAgent = new UA({
  transportOptions: {
    wsServers: {
      `wss:example.com:11111`,
      `wss:example.net:11111`,
      `wss:example.org:11111`
    },
    connectionTimeout: 3,
    maxReconnectionAttempts: 1,
    reconnectionTimeout: 1,
  },
  uri: 'foo@bar.com',
  password: 'foobar',
  log: {
    level: 3,
  },
})
```

**Expected behavior**
* Each connection attempt times out after three seconds.
* One second after the connection times out, a new connection attempt is made with the next WS server in the list.

**Observed behavior**
* Each connection attempt times out after three seconds.
* One minute later, a new connection attempt is made with the next WS server in the list.

**Environment Information**
SIP.js Version 0.14.6
Chrome Version 74.0.3729.169 (Official Build) (64-bit)

**Additional context**
N/A

**Describe the bug**

SIP over Webscoket (https://tools.ietf.org/html/rfc7118#section-4.2) specification clearly states:

>    WebSocket messages can be transported in either UTF-8 text frames or
>    binary frames.  SIP [RFC3261] allows both text and binary bodies in
>    SIP requests and responses.  Therefore, SIP WebSocket Clients and SIP
>    WebSocket Servers MUST accept both text and binary frames.

But binary messages cause parse error:

> no CRLF found, not a SIP message, discarded

**Logs**

> no CRLF found, not a SIP message, discarded

**To Reproduce (if possible)**

n/a.

**Expected behavior**

Binary websocket frames (Buffer) are accepted.

**Observed behavior**

Binary websocket frames are ignored

**Environment Information**
 - Backend Server and version: cannot share - proprietary backend
 - Browser and version: Google Chrome 72.0.3626.109 (Official Build) (64-bit)

**Additional context**

I suppose tha parsing function parseMessage:
https://github.com/onsip/SIP.js/blob/f6be37b28a6cc6cc26de3b5e3437bdbc1b54e290/src/Parser.ts#L194
should also accept ArrayBuffer.

**Describe the bug**
When instantiating a new SIP.UA and websocket connetion fails with `failed: Error in connection establishment: net::ERR_CONNECTION_CLOSED`, `registrationFailed` event never fires.

**Logs**
[sip-log.txt](https://github.com/onsip/SIP.js/files/2873395/sip-log.txt)

**To Reproduce (some values obscured with `foo` and `bar`)**
```javascript
const config = {
  transportOptions: {
    wsServers: [
      'wss://foo.net:5065'
    ],
    traceSip: true
  },
  uri: 'foo@bar.com',
  password: 'foo',
  rel100: SIP.C.supported.SUPPORTED,
  userAgentString: 'foo',
  register: true,
  hackViaTcp: true,
  log: {
    level: 'debug'
  },
  sessionDescriptionHandlerFactoryOptions: {
    peerConnectionOptions: {
      rtcConfiguration: {
        iceServers: [
          { urls: 'stun:stun.1.google.com:19302' },
          {
            urls: 'turn:foo:443?transport=tcp',
            username: 'websip',
            credential: 'websip'
          }
        ]
      }
    }
  }
};

const ua = new SIP.UA(config);
ua.on('registrationFailed', handleRegistrationFailed);

function handleRegistrationFailed() {
  console.error('REGISTRATION FAILED'); // never called
}
```

**Expected behavior**
`registrationFailed` event should be fired after websocket connection retries have been exhausted.

**Observed behavior**
`registrationFailed` event never fires after websocket connection fails consistently.

**Environment Information**
This is an Electron 3 (Chrome 66) app using sip.js v0.11.6. Same behavior observed with sip.js v0.13.5.

**Describe the bug**
There is no ICE candidates when I try to escalate audio only call to video call.
```
            session.reinvite({
                sessionDescriptionHandlerOptions: {
                    RTCOfferOptions: {
                        iceRestart: true
                    },
                    constraints: {
                        audio: true,
                        video: { aspectRatio: 1.77 }
                    }
                }
            });

```
Looks like this happens because waitForIceGatheringComplete() does not wait because isIceGatheringComplete() is true because it's re-INVITE and ICE was completed for the first/initial INVITE.
```
 createOfferOrAnswer: {writable: true, value: function createOfferOrAnswer (RTCOfferOptions, modifiers) {
............
      .then(function onSetLocalDescriptionSuccess() {
        return self.waitForIceGatheringComplete();
      })
```

**Logs**
[1.txt](https://github.com/onsip/SIP.js/files/2604491/1.txt)

**To Reproduce (if possible)**
Steps to reproduce the behavior:
1. Make audio only call
2. Escalate to video call

**Expected behavior**
SDP should contains ICE candidates.

**Observed behavior**
New stream does not have ICE candidates.

**Environment Information**
"sip.js": "0.11.3"
Chrome 70 and FireFox 63 on windows.

I suspect I'm not alone in having options which I commonly pass to methods such as ``.accept()`` and ``invite()``.  For example, I have some code that looks like this:

```javascript
var CALL_OPTIONS = {
    sessionDescriptionHandlerOptions: {
        constraints: {
            audio: true,
            video: false
        }
    }
};

...

var placeCall = function (userAgent, target) {
    var session = userAgent.invite(target, CALL_OPTIONS);
    ...
};

var answerCall = function (session) {
    session.accept(CALL_OPTIONS);
    ...
};
```

This all worked great at first.  But then I found that having multiple different SIP sessions active for different extensions led to weird problems, like hanging up a call remotely not actually disconnecting the call in the browser.

I eventually realized that what was happening is that I was passing the same object in, and the different methods were mutating it, e.g. we set ``option.extraHeaders`` at
https://github.com/onsip/SIP.js/blob/26a4b4c55e3845b823e419607652ab6e63843f57/src/Session.js#L1363

My local solution was to replace ``CALL_OPTIONS`` with a ``makeCallOptions()`` function which just returns that object so as to not end up having e.g. two different sessions sharing the same ``extraHeaders`` array.

However, it took me several hours of sustained debugging to figure out that was what I needed, and I doubt I'm the only person who this will happen to.  I think we could avoid this by cloning the ``options`` object when it's passed in so that where we now say

```javascript
options = options || {};
```

we would instead say something like

```javascript
options = SIP.Utils.clone(options || {});
```

then people won't get tripped up.  Obviously that would require us to define a new ``SIP.Utils.clone`` method, for which I normally use something like jQuery or lodash, but which we could probably just draw from https://stackoverflow.com/a/728694/1694

If this seems like a worthwhile idea, I would be happy to file a pull request.
I have problem with example [example code](https://sipjs.com/guides/attach-media/) of attaching media. The `trackAdded` callback is always called twice - in both inbound and outbound calls. In the second call Chrome throws:

> The play() request was interrupted by a new load request

My code works anyway, I hear interlocutor and he hears me.

I "fixed" this console error by running `play()` only in the second call:

```js
var trackAdded = 0

session.on('trackAdded', function() {
  var pc = session.sessionDescriptionHandler.peerConnection

  if (trackAdded == 1) {
    var remoteStream = new MediaStream()
    pc.getReceivers().forEach(function(receiver) {
      remoteStream.addTrack(receiver.track)
    });
    remoteAudio.srcObject = remoteStream
    remoteAudio.play()
  }

  trackAdded++
})
```

How this callback should look?

It may be related with #349, but it was `0.7.5` while `trackAdded` was introduced in `0.10.0`. 

I tested it on `0.10.0` and `0.11.0`, I'm migrating from `0.7.3`.

EDIT: With my fix I can't hear interlocutor on FF.