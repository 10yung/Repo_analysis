Not for merging.
This PR fix the navigator decencies that were remove a bit too eagerly in f33e79c7879e5abc18866b0f177e01af08c623b4 (#3938)

Before this PR the command 
```
bazel run //navigator:navigator-binary server
```
failed with the error message
```
   _  __          _           __
  / |/ /__ __  __(_)__ ____ _/ /____  ____
 /    / _ `/ |/ / / _ `/ _ `/ __/ _ \/ __/
/_/|_/\_,_/|___/_/\_, /\_,_/\__/\___/_/
                 /___/
Version 100.13.44
Exception in thread "main" java.lang.ClassNotFoundException: akka.event.slf4j.Slf4jLoggingFilter
	at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
...
```



### Pull Request Checklist

- [ ] Read and understand the [contribution guidelines](https://github.com/digital-asset/daml/blob/master/CONTRIBUTING.md)
- [ ] Include appropriate tests
- [X] Set a descriptive title and thorough description
- [ ] Add a reference to the [issue this PR will solve](https://github.com/digital-asset/daml/issues), if appropriate
- [X] Include changelog additions in one or more commit message bodies between the `CHANGELOG_BEGIN` and `CHANGELOG_END` tags
- [ ] Normal production system change, include purpose of change in description

NOTE: CI is not automatically run on non-members pull-requests for security
reasons. The reviewer will have to comment with `/AzurePipelines run` to
trigger the build.

This PR fixes a minor issue where we were including more references
than we need which causes problems on older SDKs where GHC.Prim is not
a stable module since GHC.Prim cannot be imported (itâ€™s builtin GHC
magic).

More importantly, this PR adds a test for cross-SDK data-dependencies
against the DAVL DAR which is built with SDK 0.13.32 before we started
making all the changes. The test also includes a slightly hacky but
mostly reasonable way of actually using the templates instead of just
the data types from the DAVL DAR which and a scenario to test this.

changelog_begin
changelog_end

### Pull Request Checklist

- [ ] Read and understand the [contribution guidelines](https://github.com/digital-asset/daml/blob/master/CONTRIBUTING.md)
- [ ] Include appropriate tests
- [ ] Set a descriptive title and thorough description
- [ ] Add a reference to the [issue this PR will solve](https://github.com/digital-asset/daml/issues), if appropriate
- [ ] Include changelog additions in one or more commit message bodies between the `CHANGELOG_BEGIN` and `CHANGELOG_END` tags
- [ ] Normal production system change, include purpose of change in description

NOTE: CI is not automatically run on non-members pull-requests for security
reasons. The reviewer will have to comment with `/AzurePipelines run` to
trigger the build.

This PR extends `Optional<T>` so as to support nested optionals.
<!--

This issue tracker is only for technical issues related to the DAML SDK.

If you suspect that your issue has a security impact, do not use this issue tracker. In that case, please contact security@digitalasset.com and follow our responsible disclosure policy: https://digitalasset.com/security/ .

For general questions about DAML and/or support request you should use Stack Overflow: https://stackoverflow.com/questions/tagged/daml .

-->

Here is the scenario describes the issue:

When `partyA` and `partyB` both can exercise a nonconsuming choice on contractC to create multiple contracts (e.g. spamming contractC.A1, contractC.A2...contractC.B1, contractC.B2), if `partyA` and `partyB` queries `/contracts/search` immediately right after their choice exercise interchangeably/concurrently, the query store gets confused on which cached query result to serve to which party. 

As a result, from `partyA` 's perspective, the query result of `/contracts/search POST` for specific `templateId` has less data, compared to the result of a post-filter of `/contracts/search GET` by using that `templateId `. 

After run `truncate table template_id cascade;` directly on the query store database. and do a `/contracts/search POST` again as `partyA`, the result for that specific `templateId` matches the result of `/contracts/search GET` however, if partyB exercise&query again, the result becomes indeterministic again

Please see the below model with scenario/steps for reproducing. and reach out to @lima-da if you cannot reproduce.

```
-- Copyright (c) 2020 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Main where

import DA.List


template Chat
  with
    operator : Party
    creator : Party
    members : [Party]
    name : Text
  where
    signatory operator
    observer members

    choice Chat_AddMembers : ContractId Chat
      with
        member : Party
        newMembers : [Party]
      controller member
      do
        create this with members = dedup $ newMembers ++ members

    nonconsuming choice Chat_PostMessage : ContractId Message
      with
        poster : Party
        message : Text
      controller poster
      do
        create Message with sender = poster, recipients = members, ..


template Message
  with
    sender : Party
    message : Text
    recipients : [Party]
  where
    signatory sender
    observer recipients


setup = scenario do
  operator <- getParty "Operator"
  alice <- getParty "Alice"
  bob <- getParty "Bob"

  -- operator creates a chat on behalf of Alice
  chatCid <- operator `submit` create Chat with creator = alice, members = [alice], name = "sleek-cheek", ..

  -- alice sends a message
  helloCid <- alice `submit` exercise chatCid Chat_PostMessage with poster = alice, message = "first message without invite Bob, and query as Alice after"

  -- do a /contracts/search POST with Alice's party token
  -- {"%templates":[{"moduleName":"Main","entityName":"Chat"},{"moduleName":"Main","entityName":"Message"}]}
  -- everything from Alice match /contracts/search GET

  -- operator(alice) adds bob(as a member) to chat. Chat gets recreated
  chatCid <- operator `submit` exercise chatCid Chat_AddMembers with member = operator, newMembers = [bob]

  -- act as Bob, and bob sends a message
  goodbyeCid <- bob `submit` exercise chatCid Chat_PostMessage with poster = bob, message = "Bob enters, and post first message, query as Bob after"

  -- repeat /contracts/search POST but with Bob's party token
  -- then /contracts/search POST with Alice's party token, and you can see there are missing results compared with /contracts/search GET
  -- results matches after you run "truncate table template_id cascade;"

  return ()
```
This fixes the ZIP modification times in all DARs to a specific
value (1980-01-01) whereas they used the current time before. This
both gives us the nice property that not only our DALF builds but also
DAR builds should be deterministic (and there is a test for this). I
have a suspicion that this could help significantly with build times
and avoid rerunning half of the Scala tests on a change to damlc that
should not change the DALFs.

changelog_begin

- [DAML Compiler] The modification times in a DAR are now fixed to a
  given value which makes the output of ``daml build`` deterministic
  in single-threaded mode (which is the default).

changelog_end

### Pull Request Checklist

- [ ] Read and understand the [contribution guidelines](https://github.com/digital-asset/daml/blob/master/CONTRIBUTING.md)
- [ ] Include appropriate tests
- [ ] Set a descriptive title and thorough description
- [ ] Add a reference to the [issue this PR will solve](https://github.com/digital-asset/daml/issues), if appropriate
- [ ] Include changelog additions in one or more commit message bodies between the `CHANGELOG_BEGIN` and `CHANGELOG_END` tags
- [ ] Normal production system change, include purpose of change in description

NOTE: CI is not automatically run on non-members pull-requests for security
reasons. The reviewer will have to comment with `/AzurePipelines run` to
trigger the build.

<!--

This issue tracker is only for technical issues related to the DAML SDK.

If you suspect that your issue has a security impact, do not use this issue tracker. In that case, please contact security@digitalasset.com and follow our responsible disclosure policy: https://digitalasset.com/security/ .

For general questions about DAML and/or support request you should use Stack Overflow: https://stackoverflow.com/questions/tagged/daml .

-->

`/contracts/search` GET / POST shouldn't work when specified ledger_id is different from the sandbox's ledger_id

however, `command/create` works as expected, erroring out ledger_id mismatch. Please investigate.

Looking through the logs of the docs cron for release 0.13.44 ([1](https://dev.azure.com/digitalasset/daml/_build/results?buildId=28679&view=logs&j=7e620c85-24a8-5ffa-8b1f-642bc9b1fc36&t=62c738a8-f3d0-5b21-b2dc-a7e81adb62c0), [2](https://dev.azure.com/digitalasset/daml/_build/results?buildId=28681&view=logs&j=7e620c85-24a8-5ffa-8b1f-642bc9b1fc36&t=62c738a8-f3d0-5b21-b2dc-a7e81adb62c0)), I have discovered a few minor issues. This is the first in a series of corresponding fixes, attempting to address the fact that the 0.13.44 builds have not managed to successfully verify any of the checksums.

--

The docs build is currently not reproducible as it include to-the-minute time-of-build information. It also includes some Sphinx binary caches which I suppose will also not be reproducible (though I have not checked the details there).

This commit attempts to remove all sources of non-reproducibility from the docs build, though this is hard to test without having a stable, older release to compare with.
Support DAML-LF type synonyms in scala code base.
- AST
- decode
- type check
- (tiny fix to Haskell pretty printer for Type Synonyms)

Currently, the `daml` compiler doesn't create any type synonyms, so, to test this code I made a temporary mod to `LFConversion.hs` which introduces a synonym for every field of every record type, and ran the integration tests.

Few things still TODO, marked in code.


### Pull Request Checklist

- [ ] Read and understand the [contribution guidelines](https://github.com/digital-asset/daml/blob/master/CONTRIBUTING.md)
- [ ] Include appropriate tests
- [ ] Set a descriptive title and thorough description
- [ ] Add a reference to the [issue this PR will solve](https://github.com/digital-asset/daml/issues), if appropriate
- [ ] Include changelog additions in one or more commit message bodies between the `CHANGELOG_BEGIN` and `CHANGELOG_END` tags
- [ ] Normal production system change, include purpose of change in description

NOTE: CI is not automatically run on non-members pull-requests for security
reasons. The reviewer will have to comment with `/AzurePipelines run` to
trigger the build.

Because of the way the DAML standard library docs are recombined across packages, and make frequent use of MOVE, the stdlib ends up with a lot of "orphan instance docs" that aren't really orphan instances. Well ... they really are orphan instances, but they shouldn't be considered orphan instances as far as the standard library docs are concerned, because users don't need to worry about how these are implemented. Pruning these is expensive and complicated, but a simple approach that gets us 99.9% of the way there is to just drop all orphan instance docs from the stdlib docs.

This PR refactors `DA.Daml.Doc.Transform` into separate modules, adds a `--drop-orphan-instances` flag, and uses this flag to improve the stdlib docs.

```
CHANGELOG_BEGIN

- [DAML SDK] Added a ``--drop-orphan-instances`` flag in ``daml damlc
docs``.

CHANGELOG_END
```

### Pull Request Checklist

- [ ] Read and understand the [contribution guidelines](https://github.com/digital-asset/daml/blob/master/CONTRIBUTING.md)
- [ ] Include appropriate tests
- [ ] Set a descriptive title and thorough description
- [ ] Add a reference to the [issue this PR will solve](https://github.com/digital-asset/daml/issues), if appropriate
- [ ] Include changelog additions in one or more commit message bodies between the `CHANGELOG_BEGIN` and `CHANGELOG_END` tags
- [ ] Normal production system change, include purpose of change in description

NOTE: CI is not automatically run on non-members pull-requests for security
reasons. The reviewer will have to comment with `/AzurePipelines run` to
trigger the build.
