Hello,
     Dose higher-level example implement Zero-copy upgrade? Or I need to use low level API?
Hi there,

I'm thinking to use gobwas/ws for **client side** to improve performance.

Can I still get the following benefits by using gobwas/ws as a websocket client instead of gorilla/websocket ?

* Zero-copy upgrade
* No intermediate allocations during I/O
* Low-level API which allows to build your own logic of packet handling and buffers reuse
* High-level wrappers and helpers around API in wsutil package, which allow to start fast without digging the protocol internals

Thank you.
as go mod  use more and more ?  can we support it ?
As defined in the protocol (please correct me if I'm wrong)
close frame may come with status code and a reason

The current situation is that 

(wsutil/handler.go)
```go
func (c ControlHandler) HandleClose(h ws.Header) error
``` 

will only send the status code without the reason string (and it's ok, since it's part of the protocol)

however, close frame may also contain reason string, which is already defined here:

(check.go)

```go
ErrProtocolOpCodeReserved             = ProtocolError("use of reserved op code")
ErrProtocolControlPayloadOverflow     = ProtocolError("control frame payload limit exceeded")
ErrProtocolControlNotFinal            = ProtocolError("control frame is not final")
ErrProtocolNonZeroRsv                 = ProtocolError("non-zero rsv bits with no extension negotiated")
ErrProtocolMaskRequired               = ProtocolError("frames from client to server must be masked")
ErrProtocolMaskUnexpected             = ProtocolError("frames from server to client must be not masked")
ErrProtocolContinuationExpected       = ProtocolError("unexpected non-continuation data frame")
ErrProtocolContinuationUnexpected     = ProtocolError("unexpected continuation data frame")
ErrProtocolStatusCodeNotInUse         = ProtocolError("status code is not in use")
ErrProtocolStatusCodeApplicationLevel = ProtocolError("status code is only application level")
ErrProtocolStatusCodeNoMeaning        = ProtocolError("status code has no meaning yet")
ErrProtocolStatusCodeUnknown          = ProtocolError("status code is not defined in spec")
ErrProtocolInvalidUTF8                = ProtocolError("invalid utf8 sequence in close reason")
```

I encountered  a problem that there's a WS client (Poco) that might be have issue if it doesn't receive reason string with the close frame, even that it is valid by the protocol

Is it possible to add it? 
I can help with a PR if you need, just want to make sure I'm not missing something with the protocol, or missing that there's already existing options to do that


Running a program with the Go 1.14 pointer checks enabled through `-race` leads to the detection of an invalid pointer conversion:

```
$ go test -race gioui.org/cmd/gogio
--- FAIL: TestJS (5.43s)
panic: runtime error: unsafe pointer conversion [recovered]
    panic: runtime error: unsafe pointer conversiongoroutine 35 [running]:
testing.tRunner.func1(0xc00017e200)
    /Users/elias/go-tip/src/testing/testing.go:888 +0xaeb
panic(0x1a11860, 0xc0001bc040)
    /Users/elias/go-tip/src/runtime/panic.go:915 +0x370
github.com/gobwas/ws.btsEqualFold(0xc0001fc034, 0x9, 0xfcc, 0x2058b08, 0x9, 0x9, 0xc0001fc034)
    /Users/elias/go/pkg/mod/github.com/gobwas/ws@v1.0.2/util.go:233 +0x184
github.com/gobwas/ws.Dialer.Upgrade(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)
    /Users/elias/go/pkg/mod/github.com/gobwas/ws@v1.0.2/dialer.go:374 +0xe72
github.com/gobwas/ws.Dialer.Dial(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)
    /Users/elias/go/pkg/mod/github.com/gobwas/ws@v1.0.2/dialer.go:190 +0x444
github.com/gobwas/ws.Dial(...)
    /Users/elias/go/pkg/mod/github.com/gobwas/ws@v1.0.2/dialer.go:47
github.com/chromedp/chromedp.DialContext(0x1b85740, 0xc0000903c0, 0xc00003eaf0, 0x4a, 0xc000105750, 0x1, 0x1, 0x18fb783, 0xc0000102d0, 0x0)
    /Users/elias/go/pkg/mod/github.com/chromedp/chromedp@v0.5.1/conn.go:59 +0xff
github.com/chromedp/chromedp.NewBrowser(0x1b85780, 0xc000033ce0, 0xc00003eaf0, 0x4a, 0xc000010040, 0x1, 0x1, 0x0, 0x0, 0x0)
    /Users/elias/go/pkg/mod/github.com/chromedp/chromedp@v0.5.1/browser.go:99 +0x3bb
github.com/chromedp/chromedp.(*ExecAllocator).Allocate(0xc0001dc000, 0x1b85780, 0xc000033ce0, 0xc000010040, 0x1, 0x1, 0x0, 0x0, 0x0)
    /Users/elias/go/pkg/mod/github.com/chromedp/chromedp@v0.5.1/allocate.go:220 +0xfec
github.com/chromedp/chromedp.Run(0x1b85780, 0xc000033ce0, 0x0, 0x0, 0x0, 0xc00000e300, 0x2)
    /Users/elias/go/pkg/mod/github.com/chromedp/chromedp@v0.5.1/chromedp.go:210 +0x311
gioui.org/cmd/gogio_test.(*JSTestDriver).Start(0xc00000e060, 0xc00017e200, 0x1a643b5, 0xf, 0x320, 0x258, 0x2d00008, 0x0, 0xc00000e060)
    /Users/elias/proj/gio/cmd/gogio/js_test.go:81 +0x928
gioui.org/cmd/gogio_test.runEndToEndTest(0xc00017e200, 0x1b836c0, 0xc00000e060)
    /Users/elias/proj/gio/cmd/gogio/e2e_test.go:42 +0xa8
gioui.org/cmd/gogio_test.TestJS(0xc00017e200)
    /Users/elias/proj/gio/cmd/gogio/js_test.go:155 +0xad
testing.tRunner(0xc00017e200, 0x1a87048)
    /Users/elias/go-tip/src/testing/testing.go:925 +0x1a9
created by testing.(*T).Run
    /Users/elias/go-tip/src/testing/testing.go:976 +0x652
FAIL    gioui.org/cmd/gogio    5.458s
FAIL
```
We can easily make them const to protect them from unexpected override. https://github.com/gobwas/ws/blob/master/check.go#L56

Other errors might be also converted to the consts. Also we might define a new type `WsError` and use new functionality from errors package.

(milestone v2)
DO NOT REVIEW
Hi,

We are using gobwas/ws in our production server. We have a pool of go routines which will be called on Desc events. The problem is that the only way to detect idle connections is to have a separate routine check connections and close them if needed. 

I was wondering if it is the  correct way to handle this problem or is there any better solution on this?
Simple reader and writer that support deflate compression.
Can be used as the wrapper around the wsutil.Writer and wsutil.Reader structs.

Code highly inspired by Gorilla's WebSocket approach, but I not properly sure about pools for flate.Reader/flate.Writer.
Is there a support for compression in ws?