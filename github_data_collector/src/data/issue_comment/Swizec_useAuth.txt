Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/Swizec/useAuth/network/alerts).

</details>
The main change suggested in this PR is to start in the `isAuthenticating` state. I have updated the create-react-app example to show a use-case for this change. In the example I've added a PrivateRoute component to handle routes which should only be visible to logged in users. As you may see the logic will fail if both `isAuthenticating` and `isAuthenticated()` is false in the first render.

The second change is to return an error object form useAuth if present. Typically we want to send the user to a login page if they are not authenticated, but this may result in a redirect loop if an error occurs. By exposing the error object we can prevent this.

üëã

useAuth is doing great as an opensource project, we're at 1.1k stars üòç
So I recently bought useAuth.dev and put the gatsby example page up. This is an okay start, but we need something better.

Unfortunately I don't have bandwidth to make the site myself. And I suck as a designer too.

Therefore I want to open this up as a request for help for webdev newbies who want to flex their skills. You can use this as a learning opportunity for Gatsby (or maybe Next?), React, design, frontend, whatever you like. Use it in your portfolio, to land paying gigs (I might have some in the pipeline), have a project to show at interviews, etc. Up to you :)

**First**,  I'm thinking of this as a volunteer/opensource/forexperience/exposure project. useAuth itself is pure opensource without a business model and I want to keep it that way. That's why I'm looking for newbies to do this as a learning opportunity :)

If that works for you üëá

1. I'd be excited if something happens by mid December
2. Going live in january would be kickass
3. I can help with guidance and reviewing PRs, I don't have bandwidth to get hands-on involved
4. If you start by sketching some designs, that would be wonderful
5. **The site needs to do these jobs:**
  - explain why useAuth exists
  - explain who it's for
  - explain what it does
  - provide documentation on how to use it
  - link to live examples
  - preferably be a live example itself
  - needs to link to GitHub and explain useAuth is opensource
  - the site itself needs to be opensource
  - site should work on mobile and web
  - needs to be easily hostable on Zeit (because I bought the domain there and I'm too lazy to move)
5.1 I can write copy for all of this
6. Anything else is not important as long as the site passes the "looks cool" test and doesn't get in the way of doing its jobs from 5
7. I really like https://rebassjs.org/, https://www.gatsbyjs.org/, https://preactjs.com/, and https://nextjs.org/ as inspiration
8. _you_ are the ideal user for this site. Anyone who wants to add authentication to their React app and doesn't know how

Interested? Leave a comment, ask questions, ping me on twitter, or just get started. :)
I thought there was some confusing wording in the readme about using cookies and localstorage.

> cookie in local storage with your user's information

https://github.com/Swizec/useAuth/blame/master/README.md#L126

1. I didn't think it was possible to store a "cookie in localstorage". You either store info in a cookie or store info in local storage but not a cookie in local storage. 

2. It says "user information". If this is non-secret stuff from the ID token like name I suppose that's ok but as I understood Auth0 was following all the best practices and not storage sensitive / secrete info in `localStorage` since it could be compromised by 3rd party scripts. Maybe clarify what this user information is so users don't get worried and think this library is risky.


`useAuth` works pretty great for web, but what about React Native or Ionic? Is there any plan to add the support? üòÅ
Hi,

my question might be specific to the general way of testing Context API in React that acts as a singleton.

I believe it's a great help to showcase how is this `useAuth` library is going to be tested since it's (seems like) a singleton. Thanks!
Hi there. Does this support the pkce flow / Chrome extension flow?