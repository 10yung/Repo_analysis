I am having an issue with what seems to be an inconsistent event feed when fetching using the #organization_events and #user_events APIs. Apparently, some events are missing from the feed returned by the Octokit::Client#organization_events. Here's a small snippet to demonstrate:

```ruby
require 'octokit'

client = Octokit::Client.new(access_token: 'VALID TOKEN HERE')
client.auto_paginate = true

# user_events = client.user_events('orocos').map(&:to_hash)
user_events = client.organization_events('orocos').map(&:to_hash)

pull_request_events = user_events.select { |e| e[:type] == 'PullRequestEvent' }
repo_events = pull_request_events.select { |e| e[:payload][:pull_request][:base][:repo][:name] == 'orocos_kinematics_dynamics'}
bogus_pr_events = repo_events.select { |e| e[:payload][:pull_request][:number] == 193 }

bogus_pr_events.each do |e|
    puts "#{e[:created_at]} "\
         "#{e[:payload][:pull_request][:base][:user][:login]}/"\
         "#{e[:payload][:pull_request][:base][:repo][:name]}#"\
         "#{e[:payload][:pull_request][:number]} "\
         "(branch: #{e[:payload][:pull_request][:base][:ref]}, action: #{e[:payload][:action]})"
end
```

Running the snippet, the output I get is:

```console
2019-10-01 21:36:06 UTC orocos/orocos_kinematics_dynamics#193 (branch: master, action: opened)
```

Uncommenting line 6 and commenting out 7 in the above snippet (a.k.a fetching events with user_events rather than organization_events) I get instead:

```console
2020-01-09 09:50:26 UTC orocos/orocos_kinematics_dynamics#193 (branch: master, action: closed)
2019-10-01 21:36:06 UTC orocos/orocos_kinematics_dynamics#193 (branch: master, action: opened)
```

Which is consistent with the state the PR currently is in (closed). Right now I am looking for any insights/reasonable explanations for this other than a bug in github's event feed api.

Any comments are appreciated..
Part of #1157. Generalizes the `openapi_generator` to work with the projects and gists clients. Realized some of the method names I accepted for the previous clients like `issues` aren't specific enough and so there are some retroactive breaking changes, although some are reverting to the original method names. Here's the current breakdown:

### projects.rb
`projects` => `repository_projects`
`create_projects` => `create_repository_projects`
`create_project` => `create_repository_project`
`column_cards` => `project_cards`

new methods for collaborators and helper methods
`project_collaborators`
`add_project_collaborator`
`remove_project_collaborator`
`user_permission_level`
`open_project`
`close_project`

the same
`project`, `projects`, `update_project`, `delete_project`, `org_projects` [but no alias for `organization_projects`], `create_org_projects` [but no alias for `create_organization_projects`], `project_columns`, `create_project_column`,  `project_column`, `update_project_column`, `delete_project_column`, `create_project_card`, `project_card`, `update_project_card`, `move_project_card`, `delete_project_card`

### gists.rb
`public_gists` => `gist_public` **
`gists` => split into `user_public_gists` and `gists`, no alias for `list_gists`
`gist` => split into `gist` and `gist_revision`
`create_gist` has files as a specific parameter
`edit_gist` => `update_gist`
`gist_starred?` => `is_starred?`

the same
`fork_gist`, `gist_forks`,  `gist_commits`, `gist_comment`, `star_gist`, `unstar_gist`, `starred_gists`,  `delete_gists`, `create_gist_comment`, `update_gist_comment`, `delete_gist_comment`, `gist_comments`

### retroactive changes
`release_by_tag` => `tag_release`

`create_comment` => `create_issue_comment`
`update_comment` => `update_issue_comment`
`delete_comment` => `delete_issue_comment`
`add_assignee` => `add_issue_assignee`
`remove_assignee` => `remove_issue_assignee`
`comment` => `issue_comment`
`comments` => `issue_comments`
`add_labels` => `add_issue_labels`
`remove_label` => `remove_issue_label`
`remove_labels` => `remove_issue_labels`
`replace_labels` => `replace_issue_labels`

`label` => `issue_label`
`create_label` => `create_issue_label`
`update_label` => `update_issue_label`
`delete_label` => `delete_issue_label`

`milestone` => `issue_milestone`
`create_milestone` => `create_issue_milestone`
`update_milestone` => `update_issue_milestone`
`delete_milestone` => `delete_issue_milestone`

Also, sorry for rerecording all of the cassettes and having 152 files changed ðŸ˜¬ 

TODO:
- [x] clean up methods in generator
- [x] fix preview header generation: read in from previews.rb
- [x] add new project collaborator tests
- [x] double check the tests clean up after themselves
double colon
Github has announced some deprecations here
https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api/#deprecating-and-adding-endpoints-for-the-oauth-authorizations-and-oauth-applications-apis

But octokit.rb seems to still be using the deprecated methods.
For example, https://github.com/octokit/octokit.rb/blob/a0ecb99860238cb3c3e79d851440f991f02116eb/lib/octokit/client/authorizations.rb#L154-L161

Should be replaced by `POST /applications/:client_id/token`
refs.rb already contains helper methods made specifically for updating
and deleting branches. This adds a helper method for creating a branch
as well.
Opening this to track the progress of generating the client code from the OpenAPI spec in the shared [routes](https://github.com/octokit/routes) directory.

:eyes: https://github.com/octokit/octokit.rb/pull/1010 for proof of concept
:eyes: https://github.com/octokit/routes/pull/168 for more context


Currently, the only options for pagination are [manual](http://octokit.github.io/octokit.rb/#Pagination) and [`auto`](http://octokit.github.io/octokit.rb/#Auto_Pagination), the latter of which will "fetch and concatenate the results from every page into a single array" up front. This means that users may be fetching a lot more results than they need to much faster than they may need to, and may hit their rate limit as a result. Could Octokit offer an [`Enumerable::Lazy`](https://ruby-doc.org/core-2.6.3/Enumerator/Lazy.html) interface for pagination, akin to [Octokit REST.js's iterator support](https://octokit.github.io/rest.js/#pagination)?
In GitHub API, headers contain additional information about the error so they are needed for diagnostics.

See e.g. https://travis-ci.community/t/github-returns-404-when-trying-to-deploy-using-github-releases/4770 where the cause is unclear from just the error code.

Hi,

I am trying to assign labels onto cards in the same column for a project. I have tried the this tool by querying from project to column to cards. 

Unfortunately, I couldn't continue anymore because:
1. The cards response from the tool doesn't return the `content_url`. Refering to github api
https://developer.github.com/v3/projects/cards/

Here is the result of my query using Octokit

```
{  
   "url":"https://api.github.com/projects/columns/cards/xx",
   "id":xx,
   "node_id":"xx",
   "note":null,
   "archived":false,
   "creator":{  
      "login":"xxx",
      "id":xx,
      "node_id":"xx",
      "avatar_url":"https://avatars2.githubusercontent.com/u/xx?v=4",
      "gravatar_id":"",
      "url":"https://api.github.com/users/xx",
      "html_url":"https://github.com/xx",
      "followers_url":"https://api.github.com/users/xx/followers",
      "following_url":"https://api.github.com/users/xx/following{/other_user}",
      "gists_url":"https://api.github.com/users/xx/gists{/gist_id}",
      "starred_url":"https://api.github.com/users/xx/starred{/owner}{/repo}",
      "subscriptions_url":"https://api.github.com/users/xx/subscriptions",
      "organizations_url":"https://api.github.com/users/xx/orgs",
      "repos_url":"https://api.github.com/users/xx/repos",
      "events_url":"https://api.github.com/users/xx/events{/privacy}",
      "received_events_url":"https://api.github.com/users/xxx/received_events",
      "type":"User",
      "site_admin":false
   },
   "created_at":"2019-07-21 23:14:29 UTC",
   "updated_at":"2019-08-05 01:20:38 UTC"
}

```

2. The tool only supports assigning labels to issues but not pull request.

Is there any way to solve this ? 

thank you.
Hello,

I'm wondering about a behaviour that seems a bit inconsistent.

If I pass a `ref` parameter with a 'refs/' prefix to [`Client.create_ref`](https://github.com/octokit/octokit.rb/blob/master/lib/octokit/client/refs.rb#L48), such as `refs/my-ref/a-thing`, create_ref will use that exact ref in the post body; a ref at `refs/my-ref/a-thing`.

As the ref method signatures are very similar, I'd expect the behaviours for other ref methods like [update_ref](https://github.com/octokit/octokit.rb/blob/master/lib/octokit/client/refs.rb#L68) to be similar; for operations to occur on or to the ref `refs/my-ref/a-thing`.

However, if I call update_ref with the same 'ref' input, it will add a prefix, causing undesired behaviour as it tries to PATCH to `refs/refs/my-ref/a-thing`.

I think it would make sense for update_ref to have similar behaviour to create_ref, by conditionally including (or not) `refs/` in the request url, such that callers can treat the methods similarly.

Or it could make sense to have update_ref's parameter named differently from create_ref, to differentiate it further.