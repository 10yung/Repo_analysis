In https://github.com/mustache/mustache/blob/master/README.md

The link for 'et' (first line) is broken at the moment.

http://ivan.fomichev.name/2008/05/erlang-template-engine-prototype.html
```
$ uname -srio
Linux 4.18.0-25-generic x86_64 GNU/Linux
$ ruby -v
ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux-gnu]
$ apt show ruby-mustache
Package: ruby-mustache
Version: 1.0.2-1
(...)
$ mustache -v
Mustache v1.0.2
$ cat name.yaml
---
name: 1
---
name: 2
---
name: 3
---
$ cat name.template
Hello {{name}}!
$ mustache -t name.yaml name.template  
[:multi,
 [:static,
  "---\n" +
  "name: 1\n" +
  "---\n" +
  "name: 2\n" +
  "---\n" +
  "name: 3\n" +
  "---\n"]]
$ mustache name.yaml name.template
Hello 3!
```
Expected output:
```
Hello 1!
Hello 2!
Hello 3!
```

ps. `Mustache v1.1.0` behaves in the same way.

(Might be unrelated:)
```
$ cat name.yaml name.template |mustache
Traceback (most recent call last):
        4: from /usr/bin/mustache:97:in `<main>'
        3: from /usr/bin/mustache:84:in `process_files'
        2: from /usr/bin/mustache:84:in `reduce'
        1: from /usr/bin/mustache:84:in `each'
/usr/bin/mustache:84:in `merge': no implicit conversion of String into Hash (TypeError)
```
or
```
$ cat name.yaml name.template |mustache
Traceback (most recent call last):
        6: from /usr/local/bin/mustache:23:in `<main>'
        5: from /usr/local/bin/mustache:23:in `load'
        4: from /var/lib/gems/2.5.0/gems/mustache-1.1.0/bin/mustache:102:in `<top (required)>'
        3: from /var/lib/gems/2.5.0/gems/mustache-1.1.0/bin/mustache:89:in `process_files'
        2: from /var/lib/gems/2.5.0/gems/mustache-1.1.0/bin/mustache:89:in `reduce'
        1: from /var/lib/gems/2.5.0/gems/mustache-1.1.0/bin/mustache:89:in `each'
/var/lib/gems/2.5.0/gems/mustache-1.1.0/bin/mustache:89:in `merge': no implicit conversion of String into Hash (TypeError)
```

I may have found an issue in the handling of partials, enshrined in the testsuite for it.

I am looking at commit `83b0721610a4e11832e83df19c73ace3289972b9` of https://github.com/mustache/spec

The issue looks to be in the handling of standalone partials.
Partials look to differ from the handling for other standalones, like comments. (Checked that I could have used sections for my example as well).

Here is the baseline test case in `comments.yml`:
```
  - name: Standalone Without Previous Line
    desc: Standalone tags should not require a newline to precede them.
    data: { }
    template: "  {{! I'm Still Standalone }}\n!"
    expected: "!"
```
The leading two spaces before the tag are eliminated, as is the trailing "\n".

And the equivalent test case in `partials.yml`:
```
  - name: Standalone Without Previous Line
    desc: Standalone tags should not require a newline to precede them.
    data: { }
    template: "  {{>partial}}\n>"
    partials: { partial: ">\n>"}
    expected: "  >\n  >>"
```
Contrary to expectations the leading 2 spaces are __not__ eliminated.
Actually it seems __that a second copy of these spaces is injected__ into the output, inside the text of the partial, even. I.e. the partial's text is `>\n>`, and in the output we get `>\n  >`, the spaces inserted after the `\n`.

I would have expected `>\n>>` as output, i.e. leading spaces eliminated, and no spaces injected.

May I have some clarification ?
GitHub does not honour strikethrough when split over multiple lines. This commit adds an extra closing and opening tag to give the desired effect.
I am trying the following template:

```
Mustache.render('{{ user[first_name] }} from {{ country }}', JSON.parse('{"user[first_name]" : "Michael"}'))
```

But am getting an exception about using the [] in my key.

When I try it on http://tryhandlebarsjs.com/ with the mustache engine I see no issues
![image](https://user-images.githubusercontent.com/360222/55257582-9216ae80-521d-11e9-9a3f-02bdc55f5d09.png)

Thanks for the help

The template_path can be a colon-delimited list

This is a resurrection of PR #238 
https://github.com/mustache/mustache.github.com/issues/116

I posted this on the main Mustache github page, but I've tried the same thing using the Bash version "mo" and it doesn't have the same effect. Therefore I think this is a bug in the ruby gem. 

I posted this question on stack exchange...

https://stackoverflow.com/questions/53829832/multi-line-yaml-input-to-mustache-template-outputs-as-json

However, it looks like a bug to me after reading the manual and trawling google searches all morning.

I stripped the code down even further, since I posted that example to really try to minimise.

```
auth_annotations="
    foo: bar baz
    sam: jam man"
echo "namespace: qa" > $inputs
echo "auth_annotations: ${auth_annotations}" >> $inputs

echo "----- Ingress inputs (${inputs}) -----"
cat $inputs

echo '---
metadata:
  annotations:
    nginx/thing:
      another_thing:
      {{{auth_annotations}}}
spec:
  rules:
    - host: bla-bla-bla.{{{ namespace }}}.example.com' >ingress.mustache

echo "----- Raw Ingress (ingress.mustache): -----"
cat ingress.mustache

mustache $inputs ingress.mustache > ingress-1.0.yaml

echo "----- Will apply the following ingress: -----"
cat ingress-1.0.yaml
```

Here's the output I get from the above...

```
namespace: qa
auth_annotations:
    foo: bar baz
    sam: jam man
----- Raw Ingress (ingress.mustache): -----
---
metadata:
  annotations:
    nginx/thing:
      another_thing:
      {{{auth_annotations}}}
spec:
  rules:
    - host: bla-bla-bla.{{{ namespace }}}.example.com
----- Will apply the following ingress: -----
---
metadata:
  annotations:
    nginx/thing:
      another_thing:
      {"foo"=>"bar baz", "sam"=>"jam man"}
spec:
  rules:
    - host: bla-bla-bla.qa.example.com
```
and I really don't understand why the line after "another_thing" is rendered as JSON instead of YAML.

I'm using mustashe v1.1.0 on Ubuntu 18.04.

Thanks!
`Mustache.render("{{as_json}}", {})` causes stack overflow error.
`SystemStackError: stack level too deep`
For some reason, options are not parsed (including the -r option) when stdin is not a tty. This is likely due to line 99 in `bin/mustache`:
`Mustache::CLI.parse_options(ARGV) if $stdin.tty?`

This inhibits loading of Ruby libraries (or in my case, my own gem to add some processing options to the templates) when mustache is being called from CMake. This is because CMake provides mustache with a stdin that is not a tty.

Tried to fix this by simply removing the if-statement at the end, this works. So line 99 would become:
`Mustache::CLI.parse_options(ARGV)`
I wanted to customize just the layout template in Gollum, but since the template directory you can pass in must contain all templates, I wound up having to copy all the templates from the Gollum gem into my own template directory. In order to make this DRYer I changed Gollum to prepend the custom directory to the gem directory with a colon delimiter, then updated Mustache to accept a template_path containing colons and do a search for templates. This fixes issue #154 

Note that I bumped the version to 1.0.6 to ease in testing my Gollum setup.