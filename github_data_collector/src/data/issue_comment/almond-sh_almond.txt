From the docs https://almond.sh/docs/api-jupyter, there is this example:

final class Password(value: String) {
    override def toString = "...."
}
val user = kernel.stdin("user: ") // clear text input
val password = kernel.stdin(prompt = "password: ", password = true).map(new Password(_))

However, when I try to run it, I get this:
```
cmd11.sc:5: type mismatch;
 found   : Char
 required: String
val password = kernel.stdin(prompt = "password: ", password = true).map(new Password(_))
                                                                                     ^Compilation Failed
Compilation Failed
```

If I remove the '.map(new Password(_))', I get:
user:  user
password:  ········
defined class Password
user: String = "user"
password: String = "password"

I am using the SCALA_VERSION=2.12.8 ALMOND_VERSION=0.9.0 version of the kernel and using Jupyter Lab.

Indicate Scala versions supported in recent Almond versions.

Add link to Almond releases page, where the release notes provide
missing information when this documentation page gets outdated.

Fixes #417.

On the [install page](https://almond.sh/docs/quick-start-install) the instructions for Windows have an error - the following step has an extra `--install` right at the end that stops it working:

Equivalent Windows command
```
> bitsadmin /transfer downloadCoursierCli https://git.io/coursier-cli "%cd%\coursier"
> bitsadmin /transfer downloadCoursierBat https://git.io/coursier-bat "%cd%\coursier.bat"
> .\coursier bootstrap ^
-r jitpack ^
-i user -I user:sh.almond:scala-kernel-api_%SCALA_VERSION%:%ALMOND_VERSION% ^
sh.almond:scala-kernel_%SCALA_VERSION%:%ALMOND_VERSION% ^ -o almond > .\almond --install 
```

Removing this allows the process to work (providing JAVA_HOME is set correctly - for some reason mine pointed to the `\bin` folder rather than the parent folder, which caused the generated `almond` file to just contain an error. It might be worth noting that it is worth checking `JAVA_HOME` as well?
In our daily use we found out that when executing some spark jobs, the almond kernel could be stuck and makes no progress in the front-end, while the spark job completes in cluster.

With a profiling session, it seems the kernel is blocked by `scala-kernel-zeromq-Publish-1` thread. 
```
scala-kernel-zeromq-Publish-1  Runnable CPU usage on sample: 994ms
  sun.nio.ch.FileDispatcherImpl.read0(FileDescriptor, long, int) FileDispatcherImpl.java (native)
  sun.nio.ch.FileDispatcherImpl.read(FileDescriptor, long, int) FileDispatcherImpl.java:46
  sun.nio.ch.IOUtil.readIntoNativeBuffer(FileDescriptor, ByteBuffer, long, NativeDispatcher) IOUtil.java:223
  sun.nio.ch.IOUtil.read(FileDescriptor, ByteBuffer, long, NativeDispatcher) IOUtil.java:197
  sun.nio.ch.SourceChannelImpl.read(ByteBuffer) SourceChannelImpl.java:167
  zmq.Signaler.recv() Signaler.java:165
  zmq.Mailbox.recv(long) Mailbox.java:97
  zmq.SocketBase.processCommands(int, boolean) SocketBase.java:937
  zmq.SocketBase.send(Msg, int) SocketBase.java:702
  org.zeromq.ZMQ$Socket.send(byte[], int) ZMQ.java:3192
  almond.channels.zeromq.ZeromqSocketImpl.$anonfun$send$3(ZeromqSocketImpl, Seq) ZeromqSocketImpl.scala:110
  almond.channels.zeromq.ZeromqSocketImpl.$anonfun$send$3$adapted(ZeromqSocketImpl, Seq) ZeromqSocketImpl.scala:109
  almond.channels.zeromq.ZeromqSocketImpl$$Lambda$912.apply(Object)
  scala.collection.immutable.List.foreach(Function1) List.scala:392
  almond.channels.zeromq.ZeromqSocketImpl.$anonfun$send$2(ZeromqSocketImpl, Message) ZeromqSocketImpl.scala:109
  almond.channels.zeromq.ZeromqSocketImpl$$Lambda$911.apply$mcV$sp()
  scala.runtime.java8.JFunction0$mcV$sp.apply() JFunction0$mcV$sp.java:23
  cats.effect.internals.IORunLoop$.cats$effect$internals$IORunLoop$$loop(IO, IOConnection, Function1, IORunLoop$RestartCallback, Function1, ArrayStack) IORunLoop.scala:87
  cats.effect.internals.IORunLoop$RestartCallback.signal(Either) IORunLoop.scala:355
  cats.effect.internals.IORunLoop$RestartCallback.apply(Either) IORunLoop.scala:376
  cats.effect.internals.IORunLoop$RestartCallback.apply(Object) IORunLoop.scala:316
  cats.effect.internals.IOShift$Tick.run() IOShift.scala:36
  java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) ThreadPoolExecutor.java:1149
  java.util.concurrent.ThreadPoolExecutor$Worker.run() ThreadPoolExecutor.java:624
  java.lang.Thread.run() Thread.java:748
```
I can provide a Yourkit session snapshot if necessary.

IMO it may be some race-condition in the messaging part with jupyter, due to the frequent updates for the progress bar. With the progress bar disabled this problem seems to go away, or at least at lot less likely to happen.
We've setup an almond stack and during daily use we found out that the kernel become stuck when TAB is pressed for auto-completion. The kernel is stuck and no other progress can be made during several minutes and finally the auto-completion pop-up is showed and the kernel backs to normal.

To better understand I tried a profilling session, it seems that after pressing TAB, `scala-kernel-dummy-stuff-1` is active for some seconds
```
scala-kernel-dummy-stuff-1  Runnable CPU usage on sample: 3ms
  java.io.UnixFileSystem.getBooleanAttributes0(File) UnixFileSystem.java (native)
  java.io.UnixFileSystem.getBooleanAttributes(File) UnixFileSystem.java:242
  java.io.File.isDirectory() File.java:849
  scala.reflect.io.Path$.isDirectory$1(File) Path.scala:69
  scala.reflect.io.Path$.apply(File) Path.scala:73
  scala.reflect.io.Path$.apply(String) Path.scala:60
  scala.reflect.io.Path.toAbsolute() Path.scala:95
  scala.reflect.io.PlainFile.<init>(Path) PlainFile.scala:37
  scala.reflect.io.PlainFile.lookupNameUnchecked(String, boolean) PlainFile.scala:101
  scala.reflect.io.AbstractFile.$anonfun$lookupPathUnchecked$1(AbstractFile, String, boolean) AbstractFile.scala:215
  scala.reflect.io.AbstractFile.lookupPathUnchecked(String, boolean) AbstractFile.scala:215
  scala.tools.nsc.settings.MutableSettings$OutputDirs.srcFilesFor(AbstractFile, String) MutableSettings.scala:354
  scala.tools.nsc.symtab.classfile.ClassfileParser.parseAttribute$1(Symbols$Symbol, Types$Type, boolean, ObjectRef) ClassfileParser.scala:931
  scala.tools.nsc.symtab.classfile.ClassfileParser.$anonfun$parseAttributes$20(ClassfileParser, Symbols$Symbol, Types$Type, boolean, ObjectRef, int) ClassfileParser.scala:1119
  scala.tools.nsc.symtab.classfile.ClassfileParser.parseAttributes(Symbols$Symbol, Types$Type, boolean) ClassfileParser.scala:1119
  scala.tools.nsc.symtab.classfile.ClassfileParser.parseClass() ClassfileParser.scala:525
  scala.tools.nsc.symtab.classfile.ClassfileParser.$anonfun$parse$1(ClassfileParser, AbstractFile, Symbols$ClassSymbol, Symbols$ModuleSymbol) ClassfileParser.scala:162
  scala.tools.nsc.symtab.classfile.ClassfileParser.parse(AbstractFile, Symbols$ClassSymbol, Symbols$ModuleSymbol) ClassfileParser.scala:133
  scala.tools.nsc.symtab.SymbolLoaders$ClassfileLoader.doComplete(Symbols$Symbol) SymbolLoaders.scala:332
  scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.complete(Symbols$Symbol) SymbolLoaders.scala:231
  scala.reflect.internal.Symbols$Symbol.info() Symbols.scala:1542
  scala.reflect.internal.SymbolTable.openPackageModule(Symbols$Symbol, Symbols$Symbol) SymbolTable.scala:354
  scala.reflect.internal.SymbolTable.openPackageModule(Symbols$Symbol) SymbolTable.scala:409
  scala.tools.nsc.symtab.SymbolLoaders$PackageLoader.doComplete(Symbols$Symbol) SymbolLoaders.scala:300
  scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.complete(Symbols$Symbol) SymbolLoaders.scala:231
  scala.reflect.internal.Symbols$Symbol.info() Symbols.scala:1542
  scala.reflect.internal.pickling.UnPickler$Scan.fromName$1(Names$Name, Symbols$Symbol, int) UnPickler.scala:228
  scala.reflect.internal.pickling.UnPickler$Scan.$anonfun$readSymbol$3(UnPickler$Scan, Names$Name, Symbols$Symbol, int) UnPickler.scala:253
  scala.reflect.internal.pickling.UnPickler$Scan.readExtSymbol$1(int, int) UnPickler.scala:253
  scala.reflect.internal.pickling.UnPickler$Scan.readSymbol() UnPickler.scala:280
  scala.reflect.internal.pickling.UnPickler$Scan.readSymbolRef() UnPickler.scala:644
  scala.reflect.internal.pickling.UnPickler$Scan.readType(boolean) UnPickler.scala:412
  scala.reflect.internal.pickling.UnPickler$Scan.$anonfun$readTypeRef$1(UnPickler$Scan) UnPickler.scala:653
  scala.reflect.internal.pickling.UnPickler$Scan$$Lambda$1155.apply()
  scala.reflect.internal.pickling.UnPickler$Scan.at(int, Function0) UnPickler.scala:190
  scala.reflect.internal.pickling.UnPickler$Scan.readTypeRef() UnPickler.scala:653
  scala.reflect.internal.pickling.UnPickler$Scan.$anonfun$readType$1(UnPickler$Scan) UnPickler.scala:374
  scala.reflect.internal.pickling.UnPickler$Scan$$Lambda$1158.apply()
  scala.reflect.internal.pickling.PickleBuffer.until(int, Function0) PickleBuffer.scala:161  <4 recursive calls>
  scala.reflect.internal.pickling.UnPickler$Scan.readTypes$1(int) UnPickler.scala:372
  scala.reflect.internal.pickling.UnPickler$Scan.readType(boolean) UnPickler.scala:414
  scala.reflect.internal.pickling.UnPickler$Scan.$anonfun$readTypeRef$1(UnPickler$Scan) UnPickler.scala:653
  scala.reflect.internal.pickling.UnPickler$Scan$$Lambda$1155.apply()
  scala.reflect.internal.pickling.UnPickler$Scan.at(int, Function0) UnPickler.scala:190
  scala.reflect.internal.pickling.UnPickler$Scan.readTypeRef() UnPickler.scala:653
  scala.reflect.internal.pickling.UnPickler$Scan.readType(boolean) UnPickler.scala:416
  scala.reflect.internal.pickling.UnPickler$Scan$LazyTypeRef.$anonfun$completeInternal$1(UnPickler$Scan$LazyTypeRef, Symbols$Symbol) UnPickler.scala:721
  scala.reflect.internal.pickling.UnPickler$Scan$LazyTypeRef$$Lambda$1173.apply()
  scala.reflect.internal.pickling.UnPickler$Scan.at(int, Function0) UnPickler.scala:190
  scala.reflect.internal.pickling.UnPickler$Scan$LazyTypeRef.completeInternal(Symbols$Symbol) UnPickler.scala:721
  scala.reflect.internal.pickling.UnPickler$Scan$LazyTypeRef.complete(Symbols$Symbol) UnPickler.scala:748
  scala.reflect.internal.pickling.UnPickler$Scan$LazyTypeRef.load(Symbols$Symbol) UnPickler.scala:751
  scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.initRoot(Symbols$Symbol) SymbolLoaders.scala:262
  scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.complete(Symbols$Symbol) SymbolLoaders.scala:243
  scala.reflect.internal.Symbols$Symbol.info() Symbols.scala:1542
  scala.reflect.internal.Symbols$Symbol.initialize() Symbols.scala:1690
  scala.tools.nsc.interactive.Global.$anonfun$forceSymbolsUsedByParser$1(Symbols$Symbol) Global.scala:1373
  scala.tools.nsc.interactive.Global$$Lambda$2458.apply(Object)
  scala.collection.immutable.HashSet$HashSet1.foreach(Function1) HashSet.scala:321
  scala.collection.immutable.HashSet$HashTrieSet.foreach(Function1) HashSet.scala:977  <2 recursive calls>
  scala.tools.nsc.interactive.Global.forceSymbolsUsedByParser() Global.scala:1373
  scala.tools.nsc.interactive.Global.<init>(Settings, Reporter, String) Global.scala:1376
  ammonite.interp.Pressy$$anon$3$$anon$4.<init>(Pressy$$anon$3, Settings, Reporter, AggregateClassPath, ClassLoader) Pressy.scala:282
  ammonite.interp.Pressy$$anon$3.initInteractiveGlobal(Settings, Reporter, AggregateClassPath, ClassLoader) Pressy.scala:282
  ammonite.interp.Pressy$$anon$3.initPressy() Pressy.scala:309
  ammonite.interp.Pressy$$anon$3.compiler() Pressy.scala:275
  ammonite.interp.Pressy$$anon$3.complete(int, String, String) Pressy.scala:318
  ammonite.interp.CompilerLifecycleManager.complete(int, String, String) CompilerLifecycleManager.scala:121
  almond.ScalaInterpreter.complete(String, int) ScalaInterpreter.scala:144
  almond.interpreter.util.AsyncInterpreterOps.asyncComplete(String, int) AsyncInterpreterOps.scala:19
  almond.interpreter.util.AsyncInterpreterOps.asyncComplete$(AsyncInterpreterOps, String, int) AsyncInterpreterOps.scala:18
  almond.ScalaInterpreter.asyncComplete(String, int) ScalaInterpreter.scala:21
  almond.ScalaInterpreter.asyncComplete(String, int) ScalaInterpreter.scala:21
  almond.interpreter.InterpreterToIOInterpreter.$anonfun$completionCancellable$4(InterpreterToIOInterpreter, Tuple2) InterpreterToIOInterpreter.scala:123
  almond.interpreter.InterpreterToIOInterpreter$$Lambda$389.apply(Object)
  almond.interpreter.util.Cancellable.run(Object) Cancellable.scala:32
  almond.interpreter.InterpreterToIOInterpreter.complete(String, int) InterpreterToIOInterpreter.scala:147
  almond.interpreter.messagehandlers.InterpreterMessageHandlers.$anonfun$completeHandler$1(InterpreterMessageHandlers, Message, Queue) InterpreterMessageHandlers.scala:115
  almond.interpreter.messagehandlers.InterpreterMessageHandlers$$Lambda$766.apply(Object, Object)
  almond.interpreter.messagehandlers.MessageHandler$.$anonfun$blocking$2(Function2, Message, Queue) MessageHandler.scala:128
  almond.interpreter.messagehandlers.MessageHandler$$$Lambda$1091.apply(Object)
  almond.interpreter.messagehandlers.MessageHandler$.$anonfun$blockingTaskStream$1(Function1, Queue) MessageHandler.scala:158
  almond.interpreter.messagehandlers.MessageHandler$$$Lambda$1092.apply(Object)
  scala.Function1.$anonfun$andThen$1(Function1, Function1, Object) Function1.scala:57
  scala.Function1$$Lambda$381.apply(Object)
  cats.effect.IO$Map.apply(Object) IO.scala:1464
  cats.effect.IO$Map.apply(Object) IO.scala:1460
  cats.effect.internals.IORunLoop$.cats$effect$internals$IORunLoop$$loop(IO, IOConnection, Function1, IORunLoop$RestartCallback, Function1, ArrayStack) IORunLoop.scala:139
  cats.effect.internals.IORunLoop$RestartCallback.signal(Either) IORunLoop.scala:355
  cats.effect.internals.IORunLoop$RestartCallback.apply(Either) IORunLoop.scala:376
  cats.effect.internals.IORunLoop$RestartCallback.apply(Object) IORunLoop.scala:316
  cats.effect.internals.IOShift$Tick.run() IOShift.scala:36
  java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) ThreadPoolExecutor.java:1149
  java.util.concurrent.ThreadPoolExecutor$Worker.run() ThreadPoolExecutor.java:624
  java.lang.Thread.run() Thread.java:748
```

And then another thread `Scala Presentation Compiler` becomes active, with something like this 
```
Scala Presentation Compiler []  Runnable CPU usage on sample: 0ms
  java.io.UnixFileSystem.getBooleanAttributes0(File) UnixFileSystem.java (native)
  java.io.UnixFileSystem.getBooleanAttributes(File) UnixFileSystem.java:242
  java.io.File.isDirectory() File.java:849
  scala.reflect.io.Path$.isDirectory$1(File) Path.scala:69
  scala.reflect.io.Path$.apply(File) Path.scala:73
  scala.reflect.io.Path$.apply(String) Path.scala:60
  scala.reflect.io.Path.toAbsolute() Path.scala:95
  scala.reflect.io.PlainFile.<init>(Path) PlainFile.scala:37
  scala.reflect.io.PlainFile.lookupNameUnchecked(String, boolean) PlainFile.scala:101
  scala.reflect.io.AbstractFile.$anonfun$lookupPathUnchecked$1(AbstractFile, String, boolean) AbstractFile.scala:215
  scala.reflect.io.AbstractFile.lookupPathUnchecked(String, boolean) AbstractFile.scala:215
  scala.tools.nsc.settings.MutableSettings$OutputDirs.srcFilesFor(AbstractFile, String) MutableSettings.scala:354
  scala.tools.nsc.symtab.classfile.ClassfileParser.parseAttribute$1(Symbols$Symbol, Types$Type, boolean, ObjectRef) ClassfileParser.scala:931
  scala.tools.nsc.symtab.classfile.ClassfileParser.$anonfun$parseAttributes$20(ClassfileParser, Symbols$Symbol, Types$Type, boolean, ObjectRef, int) ClassfileParser.scala:1119
  scala.tools.nsc.symtab.classfile.ClassfileParser.parseAttributes(Symbols$Symbol, Types$Type, boolean) ClassfileParser.scala:1119
  scala.tools.nsc.symtab.classfile.ClassfileParser.parseClass() ClassfileParser.scala:525
  scala.tools.nsc.symtab.classfile.ClassfileParser.$anonfun$parse$1(ClassfileParser, AbstractFile, Symbols$ClassSymbol, Symbols$ModuleSymbol) ClassfileParser.scala:162
  scala.tools.nsc.symtab.classfile.ClassfileParser.parse(AbstractFile, Symbols$ClassSymbol, Symbols$ModuleSymbol) ClassfileParser.scala:133
  scala.tools.nsc.symtab.SymbolLoaders$ClassfileLoader.doComplete(Symbols$Symbol) SymbolLoaders.scala:332
  scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.complete(Symbols$Symbol) SymbolLoaders.scala:231
  scala.reflect.internal.Symbols$Symbol.info() Symbols.scala:1542
  scala.reflect.internal.Types$TypeRef.baseTypeSeqImpl() Types.scala:2315
  scala.reflect.internal.Types.defineBaseTypeSeqOfTypeRef(Types$TypeRef) Types.scala:2481
  scala.reflect.internal.Types.defineBaseTypeSeqOfTypeRef$(Types, Types$TypeRef) Types.scala:2472
  scala.reflect.internal.SymbolTable.defineBaseTypeSeqOfTypeRef(Types$TypeRef) SymbolTable.scala:27
  scala.reflect.internal.Types$TypeRef.baseTypeSeq() Types.scala:2328
  scala.reflect.internal.BaseTypeSeqs.$anonfun$compoundBaseTypeSeq$1(BaseTypeSeqs, BaseTypeSeqs$BaseTypeSeq[], IntRef, int[], Types$Type) BaseTypeSeqs.scala:202
  scala.reflect.internal.BaseTypeSeqs.compoundBaseTypeSeq(Types$Type) BaseTypeSeqs.scala:201
  scala.reflect.internal.BaseTypeSeqs.compoundBaseTypeSeq$(BaseTypeSeqs, Types$Type) BaseTypeSeqs.scala:189
  scala.reflect.internal.SymbolTable.compoundBaseTypeSeq(Types$Type) SymbolTable.scala:27
  scala.reflect.internal.Types.defineBaseTypeSeqOfCompoundType(Types$CompoundType) Types.scala:1513
  scala.reflect.internal.Types.defineBaseTypeSeqOfCompoundType$(Types, Types$CompoundType) Types.scala:1472
  scala.reflect.internal.SymbolTable.defineBaseTypeSeqOfCompoundType(Types$CompoundType) SymbolTable.scala:27
  scala.reflect.internal.Types$CompoundType.baseTypeSeq() Types.scala:1380
  scala.reflect.internal.Types$PolyType.baseTypeSeq() Types.scala:2661
  scala.reflect.internal.Types$TypeRef.baseTypeSeqImpl() Types.scala:2315
  scala.reflect.internal.Types.defineBaseTypeSeqOfTypeRef(Types$TypeRef) Types.scala:2481
  scala.reflect.internal.Types.defineBaseTypeSeqOfTypeRef$(Types, Types$TypeRef) Types.scala:2472
  scala.reflect.internal.SymbolTable.defineBaseTypeSeqOfTypeRef(Types$TypeRef) SymbolTable.scala:27
  scala.reflect.internal.Types$TypeRef.baseTypeSeq() Types.scala:2328
  scala.reflect.internal.BaseTypeSeqs.$anonfun$compoundBaseTypeSeq$1(BaseTypeSeqs, BaseTypeSeqs$BaseTypeSeq[], IntRef, int[], Types$Type) BaseTypeSeqs.scala:202
  scala.reflect.internal.BaseTypeSeqs.compoundBaseTypeSeq(Types$Type) BaseTypeSeqs.scala:201
  scala.reflect.internal.BaseTypeSeqs.compoundBaseTypeSeq$(BaseTypeSeqs, Types$Type) BaseTypeSeqs.scala:189
  scala.reflect.internal.SymbolTable.compoundBaseTypeSeq(Types$Type) SymbolTable.scala:27
  scala.reflect.internal.Types.defineBaseTypeSeqOfCompoundType(Types$CompoundType) Types.scala:1513
  scala.reflect.internal.Types.defineBaseTypeSeqOfCompoundType$(Types, Types$CompoundType) Types.scala:1472
  scala.reflect.internal.SymbolTable.defineBaseTypeSeqOfCompoundType(Types$CompoundType) SymbolTable.scala:27
  scala.reflect.internal.Types$CompoundType.baseTypeSeq() Types.scala:1380
  scala.reflect.internal.Types$PolyType.baseTypeSeq() Types.scala:2661
  scala.reflect.internal.Types$TypeRef.baseTypeSeqImpl() Types.scala:2315
  scala.reflect.internal.Types.defineBaseTypeSeqOfTypeRef(Types$TypeRef) Types.scala:2481
  scala.reflect.internal.Types.defineBaseTypeSeqOfTypeRef$(Types, Types$TypeRef) Types.scala:2472
  scala.reflect.internal.SymbolTable.defineBaseTypeSeqOfTypeRef(Types$TypeRef) SymbolTable.scala:27
  scala.reflect.internal.Types$TypeRef.baseTypeSeq() Types.scala:2328
  scala.reflect.internal.BaseTypeSeqs.$anonfun$compoundBaseTypeSeq$1(BaseTypeSeqs, BaseTypeSeqs$BaseTypeSeq[], IntRef, int[], Types$Type) BaseTypeSeqs.scala:202
  scala.reflect.internal.BaseTypeSeqs.compoundBaseTypeSeq(Types$Type) BaseTypeSeqs.scala:201
  scala.reflect.internal.BaseTypeSeqs.compoundBaseTypeSeq$(BaseTypeSeqs, Types$Type) BaseTypeSeqs.scala:189
  scala.reflect.internal.SymbolTable.compoundBaseTypeSeq(Types$Type) SymbolTable.scala:27
  scala.reflect.internal.Types.defineBaseTypeSeqOfCompoundType(Types$CompoundType) Types.scala:1513
  scala.reflect.internal.Types.defineBaseTypeSeqOfCompoundType$(Types, Types$CompoundType) Types.scala:1472
  scala.reflect.internal.SymbolTable.defineBaseTypeSeqOfCompoundType(Types$CompoundType) SymbolTable.scala:27
  scala.reflect.internal.Types$CompoundType.baseTypeSeq() Types.scala:1380
  scala.reflect.internal.Types$PolyType.baseTypeSeq() Types.scala:2661
  scala.reflect.internal.Types$Type.baseTypeIndex(Symbols$Symbol) Types.scala:920
  scala.reflect.internal.Symbols$TypeSymbol.isNonBottomSubClass(Symbols$Symbol) Symbols.scala:3201
  scala.reflect.internal.Symbols$Symbol.isSubClass(Symbols$Symbol) Symbols.scala:1961
  scala.reflect.internal.Symbols$Symbol.isWeakSubClass(Symbols$Symbol) Symbols.scala:1967
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.isPlausiblySubType(Types$Type, Types$Type) Implicits.scala:683
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.loop$1(Types$Type, Types$Type, boolean) Implicits.scala:660
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.checkCompatibility(boolean, Types$Type, Types$Type) Implicits.scala:662
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.isPlausiblyCompatible(Types$Type, Types$Type) Implicits.scala:444
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch$ImplicitComputation.survives(Implicits$ImplicitInfo) Implicits.scala:932
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch$ImplicitComputation.$anonfun$eligible$2(Implicits$ImplicitSearch$ImplicitComputation, Implicits$ImplicitInfo) Implicits.scala:988
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch$ImplicitComputation.$anonfun$eligible$2$adapted(Implicits$ImplicitSearch$ImplicitComputation, Implicits$ImplicitInfo) Implicits.scala:988
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch$ImplicitComputation$$Lambda$2068.apply(Object)
  scala.collection.TraversableLike.partialFill$1(List, List, Function1, boolean) TraversableLike.scala:315
  scala.collection.TraversableLike.allIn$1(List, List, Function1, boolean) TraversableLike.scala:288
  scala.collection.TraversableLike.noneIn$1(List, Function1, boolean) TraversableLike.scala:272
  scala.collection.TraversableLike.filterImpl(Function1, boolean) TraversableLike.scala:337
  scala.collection.TraversableLike.filterImpl$(TraversableLike, Function1, boolean) TraversableLike.scala:249
  scala.collection.AbstractTraversable.filterImpl(Function1, boolean) Traversable.scala:108
  scala.collection.TraversableLike.filter(Function1) TraversableLike.scala:347
  scala.collection.TraversableLike.filter$(TraversableLike, Function1) TraversableLike.scala:347
  scala.collection.AbstractTraversable.filter(Function1) Traversable.scala:108
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch$ImplicitComputation.$anonfun$eligible$1(Implicits$ImplicitSearch$ImplicitComputation, List) Implicits.scala:988
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch$ImplicitComputation.<init>(Implicits$ImplicitSearch, List, boolean) Implicits.scala:987
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.searchImplicit(List, boolean) Implicits.scala:1116
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.bestImplicit() Implicits.scala:1486
  scala.tools.nsc.typechecker.Implicits.inferImplicit1(Trees$Tree, Types$Type, boolean, boolean, Contexts$Context, boolean, Position) Implicits.scala:111
  scala.tools.nsc.typechecker.Implicits.inferImplicit(Trees$Tree, Types$Type, boolean, boolean, Contexts$Context, boolean, Position) Implicits.scala:92
  scala.tools.nsc.typechecker.Implicits.inferImplicit$(Implicits, Trees$Tree, Types$Type, boolean, boolean, Contexts$Context, boolean, Position) Implicits.scala:89
  ammonite.interp.CompilerCompatibility$$anon$2.inferImplicit(Trees$Tree, Types$Type, boolean, boolean, Contexts$Context, boolean, Position) CompilerCompatibility.scala:24
  scala.tools.nsc.typechecker.Implicits.inferImplicitFor(Types$Type, Trees$Tree, Contexts$Context, boolean) Implicits.scala:47
  scala.tools.nsc.typechecker.Implicits.inferImplicitFor$(Implicits, Types$Type, Trees$Tree, Contexts$Context, boolean) Implicits.scala:46
  ammonite.interp.CompilerCompatibility$$anon$2.inferImplicitFor(Types$Type, Trees$Tree, Contexts$Context, boolean) CompilerCompatibility.scala:24
  scala.tools.nsc.typechecker.Typers$Typer.$anonfun$applyImplicitArgs$2(Typers$Typer, ListBuffer, BooleanRef, Trees$Tree, ListBuffer, ObjectRef, Symbols$Symbol) Typers.scala:263
  scala.tools.nsc.typechecker.Typers$Typer.applyImplicitArgs(Trees$Tree) Typers.scala:256
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.typedImplicit1(Implicits$ImplicitInfo, boolean) Implicits.scala:753
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.typedImplicit0(Implicits$ImplicitInfo, boolean, boolean) Implicits.scala:705
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.scala$tools$nsc$typechecker$Implicits$ImplicitSearch$$typedImplicit(Implicits$ImplicitInfo, boolean, boolean) Implicits.scala:529
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch$ImplicitComputation.$anonfun$findAll$1(Implicits$ImplicitSearch$ImplicitComputation, Implicits$ImplicitInfo) Implicits.scala:1051
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch$ImplicitComputation$$Lambda$2557.apply(Object)
  scala.reflect.internal.util.Collections.$anonfun$linkedMapFrom$1(Function1, Object) Collections.scala:205
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch$ImplicitComputation.findAll() Implicits.scala:1051
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.applicableInfos(List, boolean) Implicits.scala:1099
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.search$1(List, boolean) Implicits.scala:1562
  scala.tools.nsc.typechecker.Implicits$ImplicitSearch.allImplicits() Implicits.scala:1565
  scala.tools.nsc.interactive.Global.$anonfun$typeMembers$6(Global, Types$Type, Trees$Tree, Contexts$Context, Global$Members, boolean) Global.scala:1141
  scala.tools.nsc.interactive.Global$$Lambda$2556.apply()
  scala.collection.immutable.Stream$Cons.tail() Stream.scala:1171
  scala.collection.immutable.Stream$Cons.tail() Stream.scala:1161
  scala.tools.nsc.interactive.Global.respondGradually(Response, Function0) Global.scala:706
  scala.tools.nsc.interactive.Global.getTypeCompletion(Position, Response) Global.scala:1070
  scala.tools.nsc.interactive.CompilerControl$AskTypeCompletionItem.apply$mcV$sp() CompilerControl.scala:357
  scala.tools.nsc.interactive.Global.$anonfun$pollForWork$1(Global, BooleanRef, Object, Position) Global.scala:501
  scala.tools.nsc.interactive.Global.pollForWork(Position) Global.scala:426
  scala.tools.nsc.interactive.Global.checkForMoreWork(Position) Global.scala:515
  scala.tools.nsc.interactive.Global.signalDone(Contexts$Context, Trees$Tree, Trees$Tree) Global.scala:356
  scala.tools.nsc.typechecker.Typers$Typer.typed(Trees$Tree, int, Types$Type) Typers.scala:5750
  scala.tools.nsc.typechecker.Typers$Typer.typedTypeConstructor(Trees$Tree, int) Typers.scala:5867
  scala.tools.nsc.typechecker.Typers$Typer.typedTypeConstructor(Trees$Tree) Typers.scala:5884
  scala.tools.nsc.typechecker.Typers$Typer.typedParentType(Trees$Tree, Trees$Template, boolean) Typers.scala:1546
  scala.tools.nsc.typechecker.Typers$Typer.typedParentTypes(Trees$Template) Typers.scala:1709
  scala.tools.nsc.typechecker.Typers$Typer.typedModuleDef(Trees$ModuleDef) Typers.scala:1896
  scala.tools.nsc.typechecker.Typers$Typer.typed1(Trees$Tree, int, Types$Type) Typers.scala:5647
  scala.tools.nsc.typechecker.Typers$Typer.typed(Trees$Tree, int, Types$Type) Typers.scala:5726
  scala.tools.nsc.typechecker.Typers$Typer.typedStat$1(Trees$Tree, boolean, boolean, Symbols$Symbol, boolean, List) Typers.scala:5790
  scala.tools.nsc.typechecker.Typers$Typer.$anonfun$typedStats$10(Typers$Typer, boolean, boolean, Symbols$Symbol, boolean, List, Trees$Tree) Typers.scala:3373
  scala.tools.nsc.typechecker.Typers$Typer.typedStats(List, Symbols$Symbol, boolean) Typers.scala:3373
  scala.tools.nsc.typechecker.Typers$Typer.typedPackageDef$1(Trees$PackageDef, Symbols$Symbol, Trees$Tree) Typers.scala:5356
  scala.tools.nsc.typechecker.Typers$Typer.typed1(Trees$Tree, int, Types$Type) Typers.scala:5649
  scala.tools.nsc.typechecker.Typers$Typer.typed(Trees$Tree, int, Types$Type) Typers.scala:5726
  scala.tools.nsc.typechecker.Analyzer$typerFactory$TyperPhase.apply(CompilationUnits$CompilationUnit) Analyzer.scala:114
  scala.tools.nsc.Global$GlobalPhase.applyPhase(CompilationUnits$CompilationUnit) Global.scala:448
  scala.tools.nsc.interactive.Global$TyperRun.$anonfun$applyPhase$1(Phase, CompilationUnits$CompilationUnit) Global.scala:1340
  scala.tools.nsc.interactive.Global$TyperRun.applyPhase(Phase, CompilationUnits$CompilationUnit) Global.scala:1340
  scala.tools.nsc.interactive.Global$TyperRun.typeCheck(CompilationUnits$CompilationUnit) Global.scala:1333
  scala.tools.nsc.interactive.Global.typeCheck(RichCompilationUnits$RichCompilationUnit) Global.scala:665
  scala.tools.nsc.interactive.Global.$anonfun$backgroundCompile$7(Global, RichCompilationUnits$RichCompilationUnit) Global.scala:580
  scala.tools.nsc.interactive.Global.$anonfun$backgroundCompile$6(Global, SourceFile) Global.scala:576
  scala.tools.nsc.interactive.Global.$anonfun$backgroundCompile$6$adapted(Global, SourceFile) Global.scala:576
  scala.tools.nsc.interactive.Global$$Lambda$2536.apply(Object)
  scala.collection.TraversableLike$WithFilter.$anonfun$foreach$1(TraversableLike$WithFilter, Function1, Object) TraversableLike.scala:877
  scala.collection.TraversableLike$WithFilter$$Lambda$112.apply(Object)
  scala.collection.immutable.List.foreach(Function1) List.scala:392
  scala.collection.TraversableLike$WithFilter.foreach(Function1) TraversableLike.scala:876
  scala.tools.nsc.interactive.Global.backgroundCompile() Global.scala:576
  scala.tools.nsc.interactive.PresentationCompilerThread.run() PresentationCompilerThread.scala:32
```
It lasts for about 2 minutes and half and eventually completes. 

Tested on both `0.6.0` and `0.8.2`.  
Any ideas? 
Thanks.
Since we've switched to sbt 1.3.2, I'm getting this error. Might be related to https://github.com/sbt/sbt/issues/5040

```
sbt:almond> compile
[error] stack trace is suppressed; run last protocol / coursierResolutions for the full output
[error] stack trace is suppressed; run last channels / coursierResolutions for the full output
[error] stack trace is suppressed; run last logger / coursierResolutions for the full output
[error] stack trace is suppressed; run last interpreter-api / coursierResolutions for the full output
[error] stack trace is suppressed; run last scala-interpreter / coursierResolutions for the full output
[error] stack trace is suppressed; run last kernel / coursierResolutions for the full output
[error] stack trace is suppressed; run last interpreter / coursierResolutions for the full output
[error] stack trace is suppressed; run last almond-rx / coursierResolutions for the full output
[error] stack trace is suppressed; run last scala-kernel-api / coursierResolutions for the full output
[error] stack trace is suppressed; run last jupyter-api / coursierResolutions for the full output
[error] stack trace is suppressed; run last almond-spark / coursierResolutions for the full output
[error] stack trace is suppressed; run last test / coursierResolutions for the full output
[error] stack trace is suppressed; run last echo / coursierResolutions for the full output
[error] stack trace is suppressed; run last scala-kernel / coursierResolutions for the full output
[error] stack trace is suppressed; run last coursierResolutions for the full output
[error] (protocol / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (channels / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (logger / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (interpreter-api / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (scala-interpreter / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (kernel / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (interpreter / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (almond-rx / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (scala-kernel-api / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (jupyter-api / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (almond-spark / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (test / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (echo / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (scala-kernel / coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
[error] (coursierResolutions) java.lang.NoSuchMethodError: lmcoursier.definitions.ToCoursier$.project(Llmcoursier/definitions/Project;)Lcoursier/core/Project;
```
How to activate metabrowse in notebook?
Is there specific key combination?

I have kernel installed using:
./almond --install --metabrowse true

====================
Server Information:

You are using Jupyter notebook.

The version of the notebook server is: 6.0.0
The server is running on this version of Python:

Python 3.7.3 (default, Mar 27 2019, 22:11:17) 
[GCC 7.3.0]

Current Kernel Information:

Almond 0.6.0
Ammonite 1.6.7
Scala library version 2.11.12 -- Copyright 2002-2017, LAMP/EPFL
Java 1.8.0_222
Initializing Spark with

```scala
val spark = {
    NotebookSparkSession.builder()
      .master("local[*]")
      .getOrCreate()
  }
```

using the following function to measure execution time

```scala
def time[R](block: => R): R = {
    val t0 = System.nanoTime()
    val result = block    // call-by-name
    val t1 = System.nanoTime()
    println("Elapsed time: " + (t1 - t0)/1000000.0 + "ms")
    result
}
```

and defining the following variables

```scala

val persons = List((1, "John", 34, 36), (2, "Mary", 23, 12), (3, "Joe", 90, 45), (4, "Linda", 74, 25),
                   (5, "Joe", 34, 36), (6, "Maria", 23, 12), (7, "Jack", 90, 45), (8, "Lindsay", 74, 25))

val personsDF = persons.toDF("id", "name", "work", "leisure")

val df = personsDF.select($"work", $"leisure", when($"work" > 50, "High").otherwise("Low").as("Level"),
                when($"leisure" > 30, "much").otherwise("notmuch").as("Fun"))
```

the following code takes twice as long in Almond than in Spark shell:

```scala
time{df.groupBy($"Level", $"Fun").agg(round(avg($"work"),1).as("work"), 
                                 round(avg($"leisure"),1).as("leisure")).sort($"Level", $"Fun").show}
```

Almond (1st time): 15s
Ammonite (1st time): 10s
Spark shell (1st time): 7s

Almond (subsequent runs): 5s
Ammonite (subsequent runs): 3s
Spark shell (subsequent runs): 2s

Therefore, the convenience of using Jupyter is greatly reduced by the sluggishness of the kernel. Also, why is Almond much slower than Ammonite?

EDIT: Based on the above benchmark Apache Toree has a performance similar to Ammonite.
EDIT: Based on the above benchmark Apache Zeppelin has a performance similar to Spark shell.
There's a new project for [LSP integration in JupyterLab](https://github.com/krassowski/jupyterlab-lsp). It would be interesting to investigate if/how we could get this working with Metals and which features we could use.

There's already an [issue](https://github.com/krassowski/jupyterlab-lsp/issues/17) by @mardukbp in jupyterlab-lsp about trying it with Metals.