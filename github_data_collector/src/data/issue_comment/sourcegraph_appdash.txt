Hi all. Couldn't ask on slack as the link on the README is dead. When I used the in-app example code, I got traces to a local running appdash instance. I'm now trying to connect to a already running appdash instance and not getting traces. I think I'm setting up the tracer wrong. Any help?
```
// my app.go
tracer := appdashtracer.NewTracer(appdash.NewRemoteCollector("appdash.service.consul:8700"))
```

***edit***
Saw an example using chunked collector. Tried that, it did not work either. Still not seeing traces (appDashAddr is the same as above, `appdash.service.consul:8700`).
```
// my app.go
collector := appdash.NewRemoteCollector(appDashAddr)
chunkedCollector := appdash.NewChunkedCollector(collector)
tracer := appdashtracer.NewTracer(chunkedCollector)
```

*2nd edit*
updated to the following. Still no traces. No logs either.
```
logger := log.New(os.Stdout, "appdash", log.Lshortfile|log.Ltime)
collector := appdash.NewRemoteCollector(appDashAddr)
chunkedCollector := appdash.NewChunkedCollector(collector)
tracer := appdashtracer.NewTracerWithOptions(chunkedCollector, appdashtracer.Options{
	Verbose: true,
	Logger:  logger,
})
```
*** end edits ***

I can hit `appdash.service.consul:8700` and it comes up. But no traces to be found.

The separately running appdash instance looks like:
```
// separate server running appdash
func main() {
	var minEvictAge time.Duration
	var port int

	flag.DurationVar(&minEvictAge, "min-evict-age", 5*time.Minute, "set the amount of time the tracer will hold onto traces")
	flag.IntVar(&port, "port", 8700, "the port on which the for app dash tracer will run")
	flag.Parse()

	memStore := appdash.NewMemoryStore()
	store := &appdash.RecentStore{
		MinEvictAge: minEvictAge,
		DeleteStore: memStore,
	}

	appDashURLString := fmt.Sprintf("http://localhost:%d", port)
	appDashURL, err := url.Parse(appDashURLString)
	if err != nil {
		log.Fatal(err)
	}
	tapp, err := traceapp.New(nil, appDashURL)
	if err != nil {
		log.Fatal(err)
	}
	tapp.Store = store
	tapp.Queryer = memStore

	log.Printf("starting on :%d", port)
	log.Fatal(http.ListenAndServe(fmt.Sprintf(":%d", port), tapp))
}
```
The go link to install does not appear to work: 

sourcegraph.com/sourcegraph/appdash/..

Error
repo sourcegraph/appdash not found

The slack channel link also appears to be dead. 
http://slackin.srclib.org/


Appdash support opentracing API, so I can use opentracing client work with appdash? like Go, JavaScript, Java, Python, Objective-C, C++ opentracing client
The traceapp.New() function seems to indicate it supports being mounted to a subpath, but I haven't been able to make it work.  I've tried passing in a gorilla mux subrouter, and tried wrapping the App in http.StripPrefix, but in both cases, images and links on the home page are absolute (see root.html), so they don't work.

Also, I'm curious why the other templates use the {{.BaseURL}} template var to construct absolute URLs for everything, instead of just using relative URLs.

When used with HTTPS, Appdash currently appears to be insecure because it does subrequests to HTTP static resources.

The issue seems to come from a single resource: `http://fonts.googleapis.com/css?family=Open+Sans` that should probably be renamed into `//fonts.googleapis.com/css?family=Open+Sans` like other used static resources.

If a span takes microseconds instead of milliseconds to complete, the UI is simply unable to render them and the profile view shows all values as 0.
![screen shot 2016-05-20 at 3 08 30 pm](https://cloud.githubusercontent.com/assets/1350653/15443391/bc56cf98-1e9c-11e6-8673-607462f3edbd.png)

When looking at a trace (`/traces/<id>`), the graph only shows two spans (the root, and one child). Clicking on the child loads a new page that shows the child and its child. There is no way to view the entire trace's graph at once. Screenshot with example attached:

![2016-05-08-131156_1380x802_scrot](https://cloud.githubusercontent.com/assets/39825/15097537/7bbbf12a-151e-11e6-8cc8-ce44aa441260.png)

Anywhere where key/value pairs of spans are displayed, they're being ordered randomly.

When the slider reads "X-Y hours ago", the query that is sent to the server is really "(72-X)-(72-Y)" hours ago. So for example, when the slider is set to "0-2 hours ago" the data that is reported is from 72 to 70 hours ago.
