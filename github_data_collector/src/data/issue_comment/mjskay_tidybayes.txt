Hi,

I am trying to create a tibble of posterior predictions with the function _add_predicted_draws()_ and keep running into this error:

Error in b %*% data$Zt : 
  Cholmod error 'problem too large' at file ../Core/cholmod_dense.c, line 105

I'm not sure how best to add a brief reprex here but can send you my code and data if it helps.




Once https://github.com/jimhester/completeme is released
It is not clear from the documentation what the intended usage is for outputs from `stan_lm` or `stan_lm` where you do not have hierarchies to pass to `gather_draws()` or `spread_draws()`.

For example,  fitting a very simple model with `stan_lm()`:

```
library(tidyverse)
library(rstan)
library(rstanarm)
library(tidybayes)

test_stanlm <- stan_lm(mpg ~ cyl + disp + hp + drat + wt + vs + am + gear,
                       data  = mtcars,
                       prior = R2(location = 0.7),
                       seed  = 42)
```

Using the standard functions in this case throws errors, as I am not sure how to pass the keys in here, should I just use `tidy_draws()` here? These seems like the obvious answer (and it works) but the documentation for the function does talk about how it is mainly used by the other routines, so I am curious what is the most user-friendly or intended way to proceed with a model like this in tidybayes?


Great work on the package - hugely useful!

Hi there,

great package. I was wondering whether you might be interested in adding a new `ggplot2` stat and geom.

I recently wanted to plot a two-dimensional HPD region for the posterior predictions of my model. Because of my bounded outcome variable, I was unhappy with the normal approximation created with `stat_ellipse()`. Merging `emdbook::HPDregionplot()` and `StatContour()`, I came up with the following solution based on `MASS::kde2d()`:

~~~r
#' Contours of a HDP region estimate
#'
#' @param prob Numeric. Probability level of the HDP region.
#' @inheritParams ggplot2::stat_density_2d
#' @inheritParams MASS::kde2d
#' @param ...
#'
#' @return
#' @export

stat_hpd_2d <- function(mapping = NULL, data = NULL, geom = "polygon",
                        position = "identity", na.rm = FALSE, show.legend = NA,
                        inherit.aes = TRUE, n = 100, prob = 0.95, ...) {
  ggplot2::layer(
    stat = StatHPDContour, data = data, mapping = mapping, geom = geom,
    position = position, show.legend = show.legend, inherit.aes = inherit.aes,
    params = list(na.rm = na.rm, n = n, prob = prob, ...)
  )
}

StatHPDContour <- ggplot2::ggproto(
  "hpd_2d"
  , Stat
  , compute_group = function (data, scales, na.rm = FALSE, h = NULL,
                              n = 100, prob = 0.95)
  {
    if (is.null(h)) {
      h <- c(MASS::bandwidth.nrd(data$x), MASS::bandwidth.nrd(data$y))
    }
    dens <- MASS::kde2d(data$x, data$y, h = h, n = n,
                        lims = c(scales$x$dimension(), scales$y$dimension()))
    df <- data.frame(expand.grid(x = dens$x, y = dens$y), z = as.vector(dens$z))
    df$group <- data$group[1]

    dx <- diff(dens$x[1:2])
    dy <- diff(dens$y[1:2])
    sz <- sort(dens$z)
    c1 <- cumsum(sz) * dx * dy

    breaks <- sapply(prob, function(x) {
      withCallingHandlers(
        stats::approx(c1, sz, xout = 1 - x)$y
        , warning = function(w) {
          if (grepl("collapsing to unique 'x' values", w$message))
            invokeRestart("muffleWarning")
        }
      )
    })

    ggplot2::StatContour$compute_panel(df, scales, breaks = breaks)
  }
  , required_aes = c("x", "y")
)
~~~

Here's an example:

~~~r
library("ggplot2")
ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
    stat_hpd_2d(aes(fill = Species), prob = 0.8, alpha = 0.1, linetype = "22", size = 0.3) +
    geom_point(size = 3, alpha = 0.6)
~~~

![stat_hpd](https://user-images.githubusercontent.com/2195485/70143627-7a40d580-169c-11ea-81ee-b3814291a690.png)

If this is something you'd be interested in, I'd be happy to expand this into a PR (add a geom, create aliases such as `stat_hpd2d()`, etc.). What do you think?
Today I was working with a brms model containing a gaussian proccess term.
predicted_draws (with default settings) didn't return results in the time I was patient to wait, so I set n=10, and then it worked. Playing with "n" I found out that for this model, prediction is very slow.
I then tried fitted_draws, and had the same problem there, but unlike with predicted_draws specifying "n=10" didn't solve the problem.
Looking through the source code via the debugger I found that the line causing the problem is where fitted_predicted_draws_brmsfit is called, which in turn calls brms::fitted.brmsfit.

Indeed, calling brms::fitted.brmsfit by hand with the same arguments from the global environment gave me the same problem.
It was because "n" was not passed on. In the global environment, I could add "nsamples=10" to the call of brms::fitted.brmsfit, which solved the problem.

Now, two things:
1. I wasn't able to test whether changing fitted_draws.brmsfit accordingly actually solved the problem, because my R-Wizardry didn't suffice to be able to execute the "patched" function in the correct environment.
2. There might be good reasons why "n" isn't passed on, which I don't know about. So, while at first sight this appears like an oversight, I suspect it could actually be intentional. I didn't try to read all the sourcecode to see if there is any reason not to pass "n" on.


Edit: I'm aware that a sample size of 10 is very little That's not my point here. I only used that number for testing purposes.
Currently it is not as fast as it could be (see #211 and #144).
With new optimizations (spurred on by #144) `spread_draws` and `gather_draws` should be fast in most cases even with large numbers of parameters. However `tidy_draws` can still be somewhat slow when there are lots of parameters.

One way to deal with this is call `tidy_draws()` once ahead of time and only use pre-tidied draws with `spread_draws()` and `gather_draws()`. Could be useful to document this pattern.
And add_[fitted/predicted]_draws as well.

The nested format worked very well at speeding up `spread_draws` by nesting draws and then leaving off chain information until the end. This vastly improves the performance of some reshaping operations that are currently expensive.
(split off from #201)

When non-core (say, non-core tidyverse / rstan) packages are used, explicitly mention this before those code chunks and/or inside them using `::` to help folks see where less familiar functions are coming from.

In the current README.Rmd, some stan code is executed directly and so is not clear from a replication standpoint in the README.md

Under the stan model, may I suggest adding that it can be stored as a string in (ABC_stancode) and then that something like `ABC_stan <- rstan::stan_model(model_code = ABC_stancode)` or such. That way those hoping to run the `sampling()` lines are aware of how to produce the stan model.

Also, making the imports visible would help (me at least) as I don't inherently know all of the functions so have to hunt for them if the imports aren't shown.