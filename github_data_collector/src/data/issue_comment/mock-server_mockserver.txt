**Describe the issue**
mockserver-netty doesn't stop correctly

**What you are trying to do**
Setting up a mock server during unit tests and exercising unit tests

**MockServer version**
5.8.0

**To Reproduce**
Steps to reproduce the issue:

1. How you are running MockServer (i.e maven plugin, docker, etc)
```
setup:
server = startClientAndServer(port)

teardown:
server.stop()
```

2. Starting with mockserver-netty-5.7.0, the mock server stops asynchronously even though we explicitly run server.stop() leading to subsequent requests hitting the mockserver when they shouldn't

When run through sbt, we see this clearly
```
[warn] Thread[MockServer-ClientAndServer-eventLoop2,5,main] loading io.netty.channel.AbstractChannel$AbstractUnsafe$5 after test or run has completed. This is a likely resource leak
```

**Expected behaviour**
when server.stop() is called, it shouldn't return back to the caller until the event loop is closed correctly


**MockServer Log**
```
[info] Waiting for measurement data to sync...
[warn] Thread[MockServer-ClientAndServer-eventLoop2,5,main] loading io.netty.channel.AbstractChannel$AbstractUnsafe$5 after test or run has completed. This is a likely resource leak
[info] Reading scoverage instrumentation 
[info] Reading scoverage measurements...
2019-12-12 23:00:23.827 - [DEBUG] - from io.netty.buffer.PoolThreadCache-249 Freed 3 thread-local buffer(s) from thread: MockServer-ClientAndServer-eventLoop6
2019-12-12 23:00:23.827 - [DEBUG] - from io.netty.buffer.PoolThreadCache-249 Freed 4 thread-local buffer(s) from thread: MockServer-ClientAndServer-eventLoop8
2019-12-12 23:00:23.827 - [DEBUG] - from io.netty.buffer.PoolThreadCache-249 Freed 3 thread-local buffer(s) from thread: MockServer-ClientAndServer-eventLoop10
[info] Generating scoverage reports...
```

**Describe the issue**
Is it possible to override expectations?

**What you are trying to do**
 Override expectations

**MockServer version**
-

**To Reproduce**
Steps to reproduce the issue:

1. MockServer  run with docker
2. Execute node mock.js
3. Change any mock in mock.js
4. Execute node mock.js again

**Expected behaviour**
Mocked change is reflected

**MockServer Log**
---

Similar to issue #685 but with version 5.7.2

We noticed some random requests are logged multiple times. I found one logged 6 times.

Env of execution:
- Docker version with version 5.7.2
- cmd line: java -Xms4G -Xmx7G -Dmockserver.initializationJsonPath='/etc/mockserver/mockserver-expectations.json' -Dmockserver.maxLogEntries='2000' -Dfile.encoding=UTF-8 -jar /opt/mockserver/mockserver-netty-jar-with-dependencies.jar  -serverPort 1080 -logLevel WARN

I was not able to reproduce it locally

example of a request:
```
{
  "method" : "POST",
  "path" : "/object/I0007",
  "headers" : {
    "Api-Version" : [ "1.0" ],
    "Correlation-Id" : [ "000000000187" ],
    "Generation-Time" : [ "2019-11-22T15:59:08.549Z" ],
    "Transmission-Time" : [ "2019-11-22T15:59:08.540Z" ],
    "Host" : [ "localhost" ],
    "Accept-Encoding" : [ "gzip, deflate" ],
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Content-Length" : [ "324" ]
  },
  "keepAlive" : false,
  "secure" : false,
  "body" : {
    "type" : "STRING",
    "string" : "{\"generationTime\": \"2019-11-22T15:59:08.547Z\", \"key1\": \"value1\"}",
    "contentType" : "application/json"
  }
}
```
Regards

Hi,

I have recently updated some system to debian buster that now uses openssl 1.1.1. and the mockserver ssl certificat is no more valid.

rsa key must be 2048bit long.

While the mockserver CA SSL certificat looks good. The certificate built on the fly for custom domain looks have only 1024bit. 

```
$ curl --cacert mockserver-ca.pem https://www.example.com
curl: (60) SSL certificate problem: EE certificate key too weak
More details here: https://curl.haxx.se/docs/sslcerts.html

curl failed to verify the legitimacy of the server and therefore could not
establish a secure connection to it. To learn more about this situation and
how to fix it, please visit the web page mentioned above.

$ openssl s_client -CAfile mockserver-ca.pem -connect www.example.com:443
CONNECTED(00000003)
depth=0 CN = www.example.com, O = MockServer, L = London, ST = England, C = UK
verify error:num=66:EE certificate key too weak
verify return:1
depth=1 CN = www.mockserver.com, O = MockServer, L = London, ST = England, C = UK
verify return:1
depth=0 CN = www.example.com, O = MockServer, L = London, ST = England, C = UK
verify return:1

...

---
SSL handshake has read 2105 bytes and written 436 bytes
Verification error: EE certificate key too weak
---
New, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256
Server public key is 1024 bit
```


Regards,
I've found the docker container a little bit unstable running in ECS and wanted a way to check it has started up successfully. I've created a little Maven project that simply contains an initialisation class and the mock server plugin. When I execute `mvn mockserver:run` I get a ClassNotFoundException on the InititalizationClass

Here is my initialisation class:


```
public class InitializationClass implements ExpectationInitializer{

    public static MockServerClient mockServerClient;

    public void initializeExpectations(MockServerClient mockServerClient) {
        mockServerClient.when(
                request()
                        .withMethod("GET")
                        .withPath("/healthcheck")
        )
                .respond(
                        response()
                                .withStatusCode(200)
                                .withBody("Mock-Server is running")
                );
        InitializationClass.mockServerClient = mockServerClient;
    }

}

```

And this is my POM:

```
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com</groupId>
    <artifactId>testmock</artifactId>
    <version>1.0-SNAPSHOT</version>
    <dependencies>
        <dependency>
            <groupId>org.mock-server</groupId>
            <artifactId>mockserver-client</artifactId>
            <version>3.2</version>
        </dependency>
    </dependencies>
    <build>
    <plugins>
        <plugin>
            <groupId>org.mock-server</groupId>
            <artifactId>mockserver-maven-plugin</artifactId>
            <version>5.3.0</version>
            <configuration>
                <serverPort>1080</serverPort>
                <proxyPort>1090</proxyPort>
                <logLevel>DEBUG</logLevel>
                <timeout>0</timeout>
                <initializationClass>${project.basedir}/src/main/java/InitializationClass</initializationClass>
            </configuration>
            <executions>
                <execution>
                    <id>process-test-classes</id>
                    <phase>process-test-classes</phase>
                    <goals>
                        <goal>run</goal>
                    </goals>
                </execution>
                <execution>
                    <id>verify</id>
                    <phase>verify</phase>
                    <goals>
                        <goal>stop</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
    </build>
</project>
```

I'm trying to use the maven integration to start a mock server instance before running integration test. My project uses a multi module structure  and surefire to run integration tests. The initialization code is executed correctly ( i see in the log the expectations being set) but when the test runs mockserver throws  a `ClassNotFoundException`:

```
[ERROR] ClassNotFoundException - while trying to instantiate ExceptionCallback class "eu.foo.bar.FooCallback"
java.lang.ClassNotFoundException: eu.foo.bar.FooCallback
    at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)
    at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)
    at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)
    at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:260)
    at org.mockserver.mock.action.HttpCallbackActionHandler.instantiateCallback(HttpCallbackActionHandler.java:27)
    at org.mockserver.mock.action.HttpCallbackActionHandler.sendRequest(HttpCallbackActionHandler.java:48)
    at org.mockserver.mock.action.HttpCallbackActionHandler.handle(HttpCallbackActionHandler.java:22)
    at org.mockserver.mock.action.ActionHandler.processAction(ActionHandler.java:34)
    at org.mockserver.mockserver.MockServerHandler.channelRead0(MockServerHandler.java:169)
    at org.mockserver.mockserver.MockServerHandler.channelRead0(MockServerHandler.java:39)
    at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
    at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
    at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
    at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
    at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
    at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:244)
    at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:147)
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
    at org.mockserver.server.unification.PortUnificationHandler.switchToHttp(PortUnificationHandler.java:109)
    at org.mockserver.server.unification.PortUnificationHandler.channelRead0(PortUnificationHandler.java:48)
    at org.mockserver.server.unification.PortUnificationHandler.channelRead0(PortUnificationHandler.java:28)
    at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
    at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:846)
    at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
    at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
    at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
    at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
    at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:112)
    at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:137)
    at java.lang.Thread.run(Thread.java:745)
```

Here is the [sample project](https://github.com/cosu/mstest) and the  [travis build log ](https://travis-ci.org/cosu/mstest/builds/92703531). 
Am I doing something completely wrong ? 

I wrote:

```
public class MockWorkerInitializer implements ExpectationInitializer {
    public static class SentencesCallback implements ExpectationCallback {
    // ...
    }
    ...
}
```

And then used SentencesCallback.class.getName() as the callback class name.

And I got ...

[ERROR] ClassNotFoundException - while trying to instantiate ExceptionCallback class "com.basistech.ws.itest.MockWorkerInitializer$SentencesCallback"
java.lang.ClassNotFoundException: com.basistech.ws.itest.MockWorkerInitializer$SentencesCallback

If the initializer is in the classpath, how can the callback inside of it not be?
