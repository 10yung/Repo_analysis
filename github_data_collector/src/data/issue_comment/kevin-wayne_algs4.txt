The comment in Average.java for how to run it says:

 \*  % java Average

However, it's in a package and should be:

\* java edu.princeton.cs.algs4.Average
https://github.com/kevin-wayne/algs4/blob/97bddfb06195bf76c3fe05f08ad122f4b6d8068d/src/main/java/edu/princeton/cs/algs4/DigraphGenerator.java#L141-L143

Thanks!
MichaÃ«l
A hopefully obvious fix for a bug that bothered me when trying to use listeners.
I've analysed your codebase and noticed that `edu.princeton.cs.algs4.StdStats` is not fully tested.
I've written some tests for the methods in this class with the help of [Diffblue Cover](https://www.diffblue.com/opensource).

Hopefully, these tests will help you detect any regressions caused by future code changes. If you would find it useful to have additional tests written for this repository, I would be more than happy to look at other classes that you consider important.
The exception is not caught by try-block
Fixes typo in Javadoc for method dot()
This fixes the URL leading to 5.5: Data Compression. Before this the URL was incorrect and linked to a non-existent page. 
I run this java file in win10 windows console , but I can't stop input;  
so I add this code ` if(key.equals("q")) break; `  that can stop input and output result;  
Currently, in assignments and source code, tests are made via calling methods in the main method, this require the user to check input, output manually and is not that efficient.

I highly recommend that those unit tests can be written in JUnit or TestNG, which is more close to the meaning of unit tests, while providing convenience to students who are doing programming assignments.

PS: I just enrolled `algorithms-part1` at coursera and it's awesome. Thank you for providing such a great online free course.

For example, for the percolation I just finished, suppose we prepare test cases like this(you can use them freely and correct if I made some mistake. It spent me some time man):
```
greeting57.txt,2522,false
heart25.txt,352,false
input1-no.txt,0,false
input1.txt,1,true
input10-no.txt,55,false
input10.txt,56,true
input2-no.txt,2,false
input2.txt,3,true
input20.txt,250,true
input3.txt,6,true
input4.txt,8,true
input5.txt,25,true
input50.txt,1412,true
input6.txt,18,true
input7.txt,16,true
input8-dups.txt,34,true
input8-no.txt,33,false
input8.txt,34,true
java60.txt,578,true
jerry47.txt,1476,true
sedgewick60.txt,2408,true
snake101.txt,5101,true
snake13.txt,85,true
wayne98.txt,5079,true
```

And I wrote unit test like this, which is helpful while I improve my coding to meet the grade requirement:

```java
    @Test
    public void runAll() {
        In in = new In(this.getClass().getResource("/percolation-test-cases.txt"));
        int failed = 0;
        while (!in.isEmpty()) {
            String line = in.readLine();
            String[] array = line.split(",");
            Percolation perc = this.from(array[0]);

            try {
                assertEquals(perc.numberOfOpenSites(), Integer.parseInt(array[1]));
                assertEquals(perc.percolates(), Boolean.parseBoolean(array[2]));
            } catch (AssertionError e) {
                System.err.println(line + " -> " + perc.numberOfOpenSites() + "," + perc.percolates());
                failed++;
            }
        }

        if (failed > 0) {
            throw new AssertionError(failed + " test cases failed!");
        }
    }

    @Test
    public void isFull() {
        Percolation perc = new Percolation(3);
        perc.open(1, 1);
        perc.open(3, 1);
        assertFalse(perc.isFull(3, 1));

        perc.open(1, 3);
        perc.open(3, 3);
        assertFalse(perc.isFull(3, 3));

        perc.open(2, 3);
        assertTrue(perc.isFull(3, 3));
        assertFalse(perc.isFull(3, 1));
    }
```
Hi,

I think I have found a few problems with the BTree implementation.

1. Not sure if this is really a problem, but the same key can be inserted multiple times; 

2. If the same key is inserted more than M-1 times, there will be a split, and only the M/2 keys of the new node will be accessible, while the other ones will be forever inaccessible;

3. When a slipt occurs, the old node keeps the keys that were sent to the new node, even though they now inaccessible in that node; again, this may not be a problem;

4. When a key is removed, the method still increments the size counter, instead of decreasing it;

Since I am using the this BTree implementation, I have fixed these problems on my side.