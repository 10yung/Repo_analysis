I am having trouble with text being slightly shifted vertically in the PPT output compared to what I see onscreen (e.g. the X axis labels touch the X axis tickmarks in the PPT when they don't touch onscreen). Also, the width & height argument appears to be ignored, as my graph is always stretched across the slide, which I don't want here (sorry if that's a silly issue). 
Reproducible example:

```
library(ggplot2)
library(devtools)
devtools::install_github("davidgohel/rvg")
devtools::install_github("davidgohel/officer")
devtools::install_github("davidgohel/gdtools")
library(rvg)
library(gdtools)

plot_data <- data.frame (a = runif (1:20), b = seq (1:20))

x11 (width =  3, height = 3)

z <- ggplot(data = plot_data, mapping = aes (x = a, y = b)) +
  geom_point() +
  labs(x = "my x-label", y = "my y-label") +
  theme(panel.background = element_blank(),
        panel.border = element_rect (fill = NA, size = 0.5),
        axis.ticks = element_line (color = "black", lineend = "round", size=0.5),
        axis.ticks.length = unit (2, "mm"),
        axis.text = element_text (color = "black"),
        plot.margin = unit(rep (0, 4), "cm"),
        text = element_text (size=18,  
                             family="sans", 
                             color = "black")
  )
z

library(officer)
doc <- read_pptx()
doc <- add_slide(doc, "Title and Content", "Office Theme")
doc <- ph_with(doc, dml(ggobj = z, width = 3, height = 3), # I get the same output with extra argument fonts = list(sans = "TT Arial")), 
               location = ph_location_type(type = "body"))
fileout <- "test.pptx"
print(doc, target = fileout)
```
![onscreen_result](https://user-images.githubusercontent.com/12063422/67940704-7b31a380-fbd4-11e9-9aa0-1126d749b3b9.png)
[test.pptx](https://github.com/davidgohel/rvg/files/3793384/test.pptx)
![PPT_result](https://user-images.githubusercontent.com/12063422/67940752-93092780-fbd4-11e9-99d2-7618d2b6a862.png)
```

sessionInfo()
# R version 3.5.3 (2019-03-11)
# Platform: x86_64-w64-mingw32/x64 (64-bit)
# Running under: Windows 10 x64 (build 18362)
# 
# Matrix products: default
# 
# locale:
#   [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252    LC_MONETARY=English_United States.1252
# [4] LC_NUMERIC=C                           LC_TIME=English_United States.1252    
# 
# attached base packages:
#   [1] stats     graphics  grDevices utils     datasets  methods   base     
# 
# other attached packages:
#   [1] officer_0.3.6.015    gdtools_0.2.1        rvg_0.2.2.001        usethis_1.5.1        devtools_2.0.2       ggplot2_3.2.1       
# [7] RevoUtils_11.0.3     RevoUtilsMath_11.0.0
# 
# loaded via a namespace (and not attached):
#   [1] zip_2.0.4         Rcpp_1.0.2        pillar_1.4.2      compiler_3.5.3    base64enc_0.1-3   prettyunits_1.0.2 remotes_2.0.4    
# [8] tools_3.5.3       uuid_0.1-2        testthat_2.2.1    digest_0.6.20     pkgbuild_1.0.5    pkgload_1.0.2     memoise_1.1.0    
# [15] tibble_2.1.3      gtable_0.3.0      pkgconfig_2.0.2   rlang_0.4.0       cli_1.1.0         rstudioapi_0.10   curl_3.3         
# [22] xml2_1.2.2        withr_2.1.2       dplyr_0.8.3       systemfonts_0.1.1 fs_1.3.1          desc_1.2.0        rprojroot_1.3-2  
# [29] grid_3.5.3        tidyselect_0.2.5  glue_1.3.1        R6_2.4.0          processx_3.4.1    sessioninfo_1.1.1 purrr_0.3.2      
# [36] callr_3.3.1       magrittr_1.5      htmltools_0.3.6   scales_1.0.0      backports_1.1.4   ps_1.3.0          assertthat_0.2.1 
# [43] colorspace_1.4-1  labeling_0.3      lazyeval_0.2.2    munsell_0.5.0     crayon_1.3.4 

```
I'm trying to plot 6 scatter plots on one PowerPoint slide using officer with rvg's ph_with_vg_at() function. The 6 plots are achieved by using `par(mfrow = c(2, 3))` within the code expression.
Each plot has 122 lines in it so it is quite complex.

If I only plot 5 of the graphs, there's no problem, but if I do all 6 I always get this error:

```
Error in xpath_search(x$node, x$doc, xpath = xpath, nsMap = ns, num_results = 1) : 
  Memory allocation failed : growing nodeset hit limit
 [2]
```

This is my first crack at addresssing #26.  Not sure it's ready to merge but it works.  Still requires some more robust testing.   I'm also unsure whether `dml()` is the best function name, but it is short!

This requires development pandoc (>=2.4), as well as development **rmarkdown**, due to a [PR](https://github.com/rstudio/rmarkdown/pull/1468) I sent there making it possible to lookup the template pptx from within the Rmd file.   

The method will look up placeholder locations and use these for the dimensions of the printed graph, but the user can override them to place the graph anywhere on the slide. Some internal functions are memoised so as to avoid creating/opening the reference pptx every time dimensions are needed.

Raster plots are not supported, and I don't think it's possible to do so without a `post_processor` approach.  It would be useful to do this, in an `officer_pptx` rmarkdown type or maybe as a PR to `rmarkdown::powerpoint_document()`  It would allow users to use the mechanism here to place static images anywhere on the slide they would like, as well.  I think the best way to implement would be to put the post-processing requirements in the `knit_print` metadata, as htmlwidgets do.
The development version of pandoc now allows passing of raw openxml into powerpoint: https://github.com/jgm/pandoc/commit/5547cd6000a061a74aee22ec41b238b9a6c0f920

Using this, I've been able to make a quick proof-of-concept of creating editable powerpoints through R Markdown:

```
---
output:
  powerpoint_presentation:
    keep_md: true
    md_extensions: "+raw_attribute"
---

    ```{r setup, include=FALSE}
    library(rvg)
    library(knitr)
    opts_chunk$set(echo = FALSE)
    local({
      hook_plot = knit_hooks$get('plot')
      knit_hooks$set(plot = function(x, options) {
        x = paste(x, collapse = '.')
        if (!grepl('\\.dml', x)) return(hook_plot(x, options))
        xx <- xml2::read_xml(x)
        # read the content of the rvg image and write it out without <?xml ... ?>
        paste(c("```{=openxml}",
                strsplit(as.character(xx), "\n")[[1]][-1],
                "```"),
              collapse = '\n')
      })
    })
    ```

# Slide 1

    ```{r, echo=FALSE, dev="dml_pptx", fig.ext="dml", dev.args=list(standalone=FALSE)}
    plot(pressure)
    ```
```
(code blocks indented here to keep formatting)

I can probably put in a bit of work to try to make this a smooth workflow.  There are several ways to approach this: PR into **knitr** an option for an `rvg` device, make a new rmarkdown format like `rvg_powerpoint`, or create an object type like `rvg_plot` that has `knit_print` methods to print raw `openxml` blocks.  I figure the latter is the most flexible and will require the least of the user.  The actual rendering can delayed until `knit_print` is called so that the method can choose dml_docx/dvg_pptx as appropriate, and fall back to a different graphics device for older pandoc/other output formats.  I think one could use **officer** to read the PPTX template to set the plot properties correctly.

Any thoughts on the best approach? Would you take a PR to **rvg** for `knit_print()` methods? 
A boxplot with constrained y-axis fills the box only partially.
![half_box](https://user-images.githubusercontent.com/11060560/45740502-b69e2800-bbf5-11e8-8cd5-16255ea2be23.png)


```
do_plot = function() #do a boxplot with constrained y-axis
{
  boxplot(testdata, ylim=c(0.4, 2), col="grey")
}

#create test data
set.seed(seed = 1)
testdata = runif(n = 10)

do_plot() #this is how it should look

library(export) 

do_plot() #this is how it should look
graph2ppt(file="plot.pptx", aspectr=1.3, append=T) #this creates a box which is only filled with grey above and right of the diagonal
```

> sessionInfo()
R version 3.5.0 (2018-04-23)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 7 x64 (build 7601) Service Pack 1

Matrix products: default

locale:
[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   
[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   
[5] LC_TIME=German_Germany.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] rvg_0.1.9     magrittr_1.5  officer_0.3.2 export_0.2.1  gdtools_0.1.7
[6] glmulti_1.0.7 rJava_0.9-9  

loaded via a namespace (and not attached):
 [1] zip_1.0.0               Rcpp_0.12.16            compiler_3.5.0         
 [4] later_0.7.5             base64enc_0.1-3         tools_3.5.0            
 [7] digest_0.6.15           uuid_0.1-2              jsonlite_1.5           
[10] evaluate_0.11           shiny_1.1.0             crosstalk_1.0.0        
[13] yaml_2.2.0              stargazer_5.2.2         stringr_1.3.1          
[16] xml2_1.2.0              knitr_1.20              htmlwidgets_1.2        
[19] webshot_0.5.0           manipulateWidget_0.10.0 rprojroot_1.3-2        
[22] R6_2.2.2                rgl_0.99.16             rmarkdown_1.10         
[25] backports_1.1.2         promises_1.0.1          htmltools_0.3.6        
[28] flextable_0.4.5         mime_0.5                xtable_1.8-2           
[31] httpuv_1.4.5            miniUI_0.1.1.1          stringi_1.2.3    
Hi David, 

Not sure that one is a rvg or a officer issue. Apprently the shapes generated by `ph_with_vg` are counted while computing the id of each shape in a particular slide. The consequence for that is that when generating multiple reports, the id_chr argument is unpredictable from one version to another. 

The reproducible example below describes the problem. 

```
library(tidyverse)
library(officer)
library(rvg)

graph_generating_function = function(i){


gg <- mtcars %>% filter(cyl == i) %>% 
  ggplot(aes(x = disp, y = drat)) + 
  geom_point()+
  theme_bw()

pptx <- read_pptx() %>% 
  add_slide(layout = "Two Content", master = "Office Theme") %>% 
  ph_with_vg(ggobj = gg, type = "body", index = 1) %>% 
  ph_with_text("Some text", type = "body", index = 2) %>% 
  ph_add_text(" some following text", type = "body", id_chr = "56")

pptx %>% print(target = paste0("cyl_", i, ".pptx"))
}


c(8,4,6) %>% map(graph_generating_function)
```

Here the loop works for  i = 8 but for the other values it will throw the error "Error: selection does not match any row in slide_summary. Use function slide_summary.". 

A workaround here is to rewrite the slide generating part but this limits the possibility to control perfectly which placeholder must be at the top and which one must be a the bottom. 
```
pptx <- read_pptx() %>% 
  add_slide(layout = "Two Content", master = "Office Theme") %>% 
  ph_with_text("Some text", type = "body", index = 2) %>% 
  ph_add_text(" some following text", type = "body", id_chr = "1") %>% 
  ph_with_vg(ggobj = gg, type = "body", index = 1)  
```

Here are my session info :
```
> sessionInfo()
R version 3.4.2 (2017-09-28)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows >= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=French_France.1252  LC_CTYPE=French_France.1252    LC_MONETARY=French_France.1252 LC_NUMERIC=C                  
[5] LC_TIME=French_France.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] gdtools_0.1.6     bindrcpp_0.2      rvg_0.1.7         officer_0.2.2.002 forcats_0.2.0     stringr_1.2.0     dplyr_0.7.4      
 [8] purrr_0.2.4       readr_1.1.1       tidyr_0.8.0       tibble_1.4.2      ggplot2_2.2.1     tidyverse_1.2.1  

loaded via a namespace (and not attached):
 [1] reshape2_1.4.3    haven_1.1.1       lattice_0.20-35   colorspace_1.3-2  htmltools_0.3.6   yaml_2.1.16       base64enc_0.1-3  
 [8] rlang_0.1.6       R.oo_1.21.0       pillar_1.1.0      foreign_0.8-69    glue_1.2.0        R.utils_2.6.0     modelr_0.1.1     
[15] readxl_1.0.0      uuid_0.1-2        bindr_0.1         plyr_1.8.4        munsell_0.4.3     gtable_0.2.0      cellranger_1.1.0 
[22] rvest_0.3.2       R.methodsS3_1.7.1 zip_1.0.0         psych_1.7.8       labeling_0.3      parallel_3.4.2    broom_0.4.3      
[29] Rcpp_0.12.15      scales_0.5.0      jsonlite_1.5      mnormt_1.5-5      hms_0.4.1         digest_0.6.15     stringi_1.1.6    
[36] grid_3.4.2        cli_1.0.0         tools_3.4.2       magrittr_1.5      lazyeval_0.2.1    crayon_1.3.4      pkgconfig_2.0.1  
[43] xml2_1.2.0        lubridate_1.7.1   assertthat_0.2.0  httr_1.3.1        rstudioapi_0.7    R6_2.2.2          nlme_3.1-131     
[50] compiler_3.4.2   
``` 
@Lukas-1 commented on [Fri Mar 24 2017](https://github.com/davidgohel/ReporteRs/issues/184)

I saw some issues when using plotmath expressions in powerpoint files. Specifically, if an expression() is composed of multiple elements joined using "*" or "~", separate textboxes are created in PowerPoint, which leads faulty vertical alignment. It would be better if the whole expression were contained in one textbox.

For example, the following code displays buggy vertical alignment of the text:

plot(1:10)
title(expression("foo" * "-" * "oo"))

Also, using an en dash in plotmath expressions causes a bug where each element of the expression is individually centered and overlaps.

P.S. thank you for developing this great package!

---

@davidgohel commented on [Tue Apr 04 2017](https://github.com/davidgohel/ReporteRs/issues/184#issuecomment-291479760)

Hi

Sorry, it's a known issue but I don't know exactly what is wrong. 

I'll have a *coding session* probably next month and will invest on this case.

David


This is probably not fixable, but since text is rendered in <text> elements, the text width reported by e.g. grid::stringWidth may not be exactly what you get when the SVG is rendered. There is an interaction with justification since it seems R graphics calculates the justification rather than passing this to the device.

This isn't a big problem for left-justified or even center-justified text, but right-justified text can go quite wrong. In my case, I'm trying to combine a chart label with a line callout connecting it to the data, and the label can overlap the callout as a result, e.g. (where the rectangle is the calculated bounding box)

<img width="53" alt="screenshot 2017-04-11 18 45 57" src="https://cloud.githubusercontent.com/assets/4820448/24934084/8a037ffe-1ee7-11e7-9144-2818b14a8ded.png">

And correctly in PNG:

<img width="51" alt="screenshot 2017-04-11 18 46 33" src="https://cloud.githubusercontent.com/assets/4820448/24934086/8f574094-1ee7-11e7-85dd-8c212ebab958.png">


This seems to be a limitation on the amount of fine control SVG gives over text rendering. One solution would be to use SVG's own text-anchor attribute - then widths would still be calculated incorrectly but at least justification would be correct. But from scanning the source it seems like the justification is already dealt with before it reaches this package - although if there is some way around this, that would be great!

In the meantime I guess the workaround, in my case, is use callouts from the left-hand side of text labels, which is calculated reliably.
I added "`_raw`" functions in `dsvg.cpp` and a `use_jquery` parameter (defaulting to `TRUE`) to `send_tooltip`, `send_click` and `send_data_id` to enable setting of data attributes and other attributes without jQuery. I also added _"without jQuery"_ equivalent tests to the test harness and made initial changes to a local copy of `ggiraph` to see how well it works (and it works well :-)

This lays the groundwork for making a jQuery-independent widget in `ggiraph`. 
