[`xml-rs`][xml_rs] has noot been maintained in around 2 years. A new alternative, with `serde` support has arised in that time: [`quick-xml`][quick_xml].

This crate brings improvements in speed (it claims it's around 50 times faster than `xml-rs`, and 10 times faster than `serde-xml-rs`. It's actively maintained, and should also help with #35.


[xml_rs]: https://crates.io/crates/xml-rs
[quick_xml]: https://crates.io/crates/quick-xml
Async/await syntax is now on [stable][async_await] Rust. We should take advantage of this API to make the analysis faster. We can use the [async-std][async_std] crate for I/O access and the [tokio][tokio] runtime to manage the thread pool in its 0.2 version (currently in alpha).

[async_await]: https://blog.rust-lang.org/2019/11/07/Async-await-stable.html
[async_std]: https://crates.io/crates/async-std
[tokio]: https://crates.io/crates/tokio
what features might be missing etc.
We should run nightly, or at least weekly builds against Rust nightly. We can use Travis-CI [cronjobs][cronjobs] and only build for nightly by checking the `TRAVIS_EVENT_TYPE` environment variable in the build script.

This should prevent unexpected API breakage.

[cronjobs]: https://docs.travis-ci.com/user/cron-jobs/
Running cargo-deb will show the following error when trying to strip shell completions. This is the error being shown:

```
strip:/home/razican/workspace/super/super/target/release/super.bash: File format not recognized
cargo-deb: Command strip failed to launch
  because: exit code: 1
```

It happens with the following files:
 - `super.bash`
 - `super.fish`
 - `_super`

This seems to be an issue with `cargo-deb`. Here is the reported issue: [cargo-deb#67][cargo_deb_issue].

[cargo_deb_issue]: https://github.com/mmstick/cargo-deb/issues/67
It seems that non-valid UTF-8 files prevent the creation of the `src/index.html` file (and probably other files as well). This is the error output for the LinkedIn apk:

```
WARN: Seems that the package in the AndroidManifest.xml is not the same as the application ID provided. Provided application id: com.linkedin.android-4.1.95@APK4Fun.com, manifest package: com.linkedin.android
Manifest analyzed.
WARN: could not analyze `dist/com.linkedin.android-4.1.95@APK4Fun.com/res/xml/home_tab_messaging.xml`. The analysis will continue, though. Error: stream did not contain valid UTF-8
WARN: could not analyze `dist/com.linkedin.android-4.1.95@APK4Fun.com/res/xml/home_tab_relationships.xml`. The analysis will continue, though. Error: stream did not contain valid UTF-8
WARN: could not analyze `dist/com.linkedin.android-4.1.95@APK4Fun.com/res/xml/home_tab_feed.xml`. The analysis will continue, though. Error: stream did not contain valid UTF-8
WARN: could not analyze `dist/com.linkedin.android-4.1.95@APK4Fun.com/res/xml/home_tab_jobs.xml`. The analysis will continue, though. Error: stream did not contain valid UTF-8
WARN: could not analyze `dist/com.linkedin.android-4.1.95@APK4Fun.com/res/xml/home_tab_notifications.xml`. The analysis will continue, though. Error: stream did not contain valid UTF-8
Source code analyzed.

WARN: There was en error generating HTML report: stream did not contain valid UTF-8
HTML report generated.
```
Hi,
I've read the documentation about your tool and I have a question:
If I have an APK that has some of its code obfuscated by ProGuard, can your tool still make reverse engineering on it? And if it does what can I expect from its performance?

Thanks
We are detecting false positives in SQL injections where the parameter is an integer (for example #150). We should improve the regular expression so that it specifically finds a `paramString` as a parameter, shouldn't be too difficult.
Seems that InnoSetup is included by default in AppVeyor to create the Windows installer. We should use it and automatically add it to our release. Some links:

 - https://www.appveyor.com/docs/build-environment/
 - http://help.appveyor.com/discussions/problems/4482-chocolatey-package-install-failure
As you can see [here][file_coverage], in both `static_analysis` and `results` modules we have some files missing.

In the first, we are missing the `mod.rs` file and the `certificate.rs` file, I guess that this last one is because we are not running the coverage with the `unstable` features.

On the `results` module, seems that the `mod.rs` file and the `handlebars_helpers.rs` files are not being tracked. The `mod.rs` file seems to be the same issue as in the `static_analysis` module, and the `handlebars_helpers.rs` file could be related to us not testing those helpers (and thus, no code gets compiled into tests).

On the `results` module, the whole `report` submodule is missing from the test coverage reports. There are three files in this submodule, the `handlebars.rs` file, that generates the context for our HTML report, the `json.rs` file, that generates the context for our JSON report, and the `mod.rs` file, that contains the trait used by both reports for easier use. This trait also enables in the future to have more submodules that can generate reports.

I think that since we are not trying to generate HTML/JSON reports in tests, they are not being tracked by the coverage report. Also, since we have no comments, no documentation tests get generated. In the case of the `main.rs` file, for example, the only reported line is the module-level comment.

This also brings into the table the fact that some files do not have reported lines apart from the comments, as it happens with the `main.rs` file. We need to add tests for all files so that they all get properly reported. Each function should have a test and a comment.

[file_coverage]: https://codecov.io/gh/SUPERAndroidAnalyzer/super/tree/6c50c85834d9fad94eedccb32766651515496a92/src