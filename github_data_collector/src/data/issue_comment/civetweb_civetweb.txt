Want to know how to implement language translation on this framework,Dynamic language
function `set_option` in main.c (civetweb version 1.11),  code snippet is as follows:

```bash
	/* Not an option of main.c, so check if it is a CivetWeb server option */
	type = MG_CONFIG_TYPE_UNKNOWN;
	for (i = 0; default_options[i].name != NULL; i++) {
		if (!strcmp(default_options[i].name, name)) {
			type = default_options[i].type;
		}
	}
```

I think  that if `name` is found in `default_option`,  need to  add `break` to exit loop 

I am not sure how to construct the unit test for it to make it independent of the testing machine.

I think I'd either need to mock the getaddrinfo() response, have some control of /etc/hosts (or equivalent on WIN), or something completely different.

I'd appreciate any advice in this regard.
I believe the commit https://github.com/civetweb/civetweb/commit/c9e47bf75b173c48f1af4e2199ee9904b9256057 breaks hostname resolution.

The last branch of the ``parse_port_string()`` function (around https://github.com/civetweb/civetweb/blob/master/src/civetweb.c#L14603) seems to be incorrect.

In the current state, a hostname string without the ":port" part is created (the ``hostname`` variable), but never used - the original ``vec->ptr`` is used instead.
This causes the whole string (including the ":port" part) to be passed to ``mg_inet_pton()`` resulting in ``getaddrinfo()`` not being able to resolve the address correctly.

IPv4 and IPv6 branches are both affected.

Possible solution is to just use the already prepared ``hostname`` variable.
We do not have a clear definition what should happen when a handler (request handler, websocket handler) is unregistered. Some connection (some thread) could still execute a handler, while another thread unregister this handler function. This could be a long lasting connection (long pull, websocket, lengthy script, ...) or a short one.

There have been several fixes/modification in one direction or the other in the recent years. But there are still open issues, partially asking to go in a different direction as previous fixes.
Currently open issues: #800, #667, #643

Fixes should only be done once there is an agreement on what is the desired behavior.

e.g.: 
- block execution of handler registration/unregistration (add handler) functions, until all handlers are left
- do not block add handler functions. Mark handler as "to be removed", but keep all current connections open ... and eventually unregister the handler some time later without giving any feedback when the last connection has left the handler function.
- stop execution of handler functions (to check: is this even technically possible?)
- do something completely different, including a big API change (e.g. asynchronously inform on handler removal)

Note: This does not only affect removing a handler registration completely, but also replacing a registered handler (changing the handler function, user parameter, ...). 

I use "mg_set_request_handler" to hook the specified URI to my handler.

for example,
"curl https://127.0.0.1/%2e/SECURE_API/neverseen.txt"
and
"curl https://127.0.0.1/./SECURE_API/./neverseen.txt"

If I use "." in my url, it looks like curl will remove "." from request url.
If I use "%2e", it will send to civetweb directly and the conn->request_uri will be
"/./SECURE_API/./neverseen.txt".

For the case, my request handler is never be matched.
The worse is that my URI filter will be bypass using "%2e".

I see function "remove_double_dots_and_double_slashes" will try to remove "..".
Maybe we should remove ".", too.

Is it possible to disable tray menu via a config or by adding such flag to the config?
The project triggers an error when cloning on Windows when using Git 2.24 or higher:
`filename in tree entry contains backslash: '\'`

- Potential offending commit in civetweb: https://github.com/civetweb/civetweb/commit/4ac467e3e07a2abb02b894c0b508e9885ee4d7d8
- Offending commit in Git 2.24: https://github.com/git/git/commit/e1d911dd4c7b76a5a8cec0f5c8de15981e34da83
- Git for Windows issue: https://github.com/git-for-windows/git/issues/2435

**Workaround**

Disable [core.protectNTFS](https://git-scm.com/docs/git-config#Documentation/git-config.txt-coreprotectNTFS):
`git config --global core.protectNTFS false`

Additional details can be found here:
https://github.com/zephyrproject-rtos/zephyr/issues/21426

If an exception it thrown in handlePost, or any of the virtual handlers, the locking mechanisms will not get unlocked.  The locks should be handled by something like std::lock_guard which will unlock the locks as the stack gets unwound.  In general, exceptions seem to be not handled at all within CivetServer.

I'd be willing to make a PR for this; I just want to make sure this isn't a work in progress.