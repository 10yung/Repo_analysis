


Yes, we have a new way to work with JSON in swift-4, but project which use Genome could really make use of an update. Do you plan to update it? 
Seems easy: https://www.dropbox.com/s/l2gmoepbxvhfku7/Screenshot%202017-09-21%2019.51.12.png?dl=0
P.S: I see the updates brunch, but it seems like it's abandoned :) 

Also allows "submapping":

```
let testNode: Node = [
    "bar": 123,
    "foo": [
        "baz": 456,
        "baq": 789
    ]
]

struct Model: BasicMappable {
    var bar: Int?
    var baz: Int?
    var baq: Int?
    
    mutating func sequence(_ map: Map) throws {
        try bar <~> map["bar"]
        
        let foo = map["foo"]
        
        try baz <~> foo["baz"]
        try baq <~> foo["baq"]
    }
}

let model = try Model(node: testNode)

print(model.bar == 123) // => true
print(model.baz == 456) // => true
print(model.baq == 789) // => true

let node = try model.makeNode()

print(node == testNode) // => true
```
Replaces a lot of force unwraps by optional unwraps and throwing errors. Also replaces most instances of `XCTAssert` by more specific assertion functions.
I would like to have a sub-map when mapping so I don't have to type the path repeatedly
e.x. json is
```
[
    "test": "abc",
    "sub": [
        "int": 9,
        "string": "8"
    ]
]
```
and my mapping function is
```
try mainString <~> map["test"]
let subMap = map["sub"]
try subInt <~> subMap["int"]
try subString <~> subMap["string"]
```
but when I do `let subMap = map["sub"]`
the subMap.node is still original node since subscript only change result
```
// file Map.swift line 102
public subscript(keys: [PathIndex]) -> Map {
    lastPath = keys
    result = node[keys]
    return self
}
```
should it also change `node` to `node[keys]`?

Hi,
Could you please add a copyright statement to the license?
Thank you!