```
 interface ObjINF1 {
    [key: string]: string | number | undefined;
}
interface ObjINF2 {
    id: number;
    title: string;
}
function a1(objArr: ObjINF1[]) {
    
}
function a2(objArr: ObjINF2[]) {
// Argument of type 'ObjINF2[]' is not assignable to parameter of type 'ObjINF1[]'.Type 'ObjINF2' is not assignable to type 'ObjINF1'. Index signature is missing in type 'ObjINF2'.
    a1(objArr) 
}

function a3(objArr: {
    id: number;
    title: string;
}[]) {
    a1(objArr) 
}
```
为什么a2报错了 a3 反而正确
正常情况下：
```ts
interface Square {
    kind: 'square';
    size: number;
}

interface Rectangle {
    kind: 'rectangle';
    width: number;
    height: number;
}

type Shape = Square | Rectangle;

function size(s: Shape) {
    // 基于 联合类型 和 kind 特殊字面量
    // 如果我们用了判断语句，ts会自动帮我们缩小类型范围
    if (s.kind === 'square') {
        return s.size * s.size
    }
    // 这里ts推断出 s 是 Rectangle
    return s.width * s.height
}
```

不符合预期的一种情况：
```ts
interface Square {
    kind: 'square';
    size: number;
}

interface Rectangle {
    kind: 'rectangle';
    width: number;
    height: number;
}

type Graph = {
    [key: string]: Square | Rectangle
}

function size(s: Graph, key: string) {
    if (s[key].kind === 'square') {
        return s[key].size * s[key].size // Error
    }
    return s[key].width * s[key].height // Error
}
```


对于不符合逾期的情况有点不解，为什么ts对于这种情况推断不出来呢？
只能用第一种方式 -> 只能用下边这种方式
函数重载应该是用 LongHandAllowsOverloadDeclarations 这个类型定义, 原文的说法容易让人觉得是上边的类型定义
如： `/tips/barrel`等
有个疑问请教各位：
在[这篇文章](https://jkchao.github.io/typescript-book-chinese/tips/metadata.html#%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5)此处有段代码：
```javascript
type Constructor<T = any> = new (...args: any[]) => T;

const Injectable = (): ClassDecorator => target => {};

class OtherService {
  a = 1;
}

@Injectable()
class TestService {
  constructor(public readonly otherService: OtherService) {}

  testMethod() {
    console.log(this.otherService.a);
  }
}

const Factory = <T>(target: Constructor<T>): T => {
  // 获取所有注入的服务
  const providers = Reflect.getMetadata('design:paramtypes', target); // [OtherService]
  const args = providers.map((provider: Constructor) => new provider());
  return new target(...args);
};

Factory(TestService).testMethod(); // 1

```
其中 Injectable 装饰器实质上并没有对 TestService 类进行修改，那为什么这边还要加上这个类装饰器呢？
实验证明，如果不加上的话，`Reflect.getMetadata('design:paramtypes', target)` 将无效，这是为什么呢？

谢谢解答！
使用 react: 15.4.2
架构基于这个版本 封装了一个lib
```jsx
import {
  LuPage,
} from 'lubase';
```
lubase并没有以typescript实现

我们现在业务线每个页面继承这个LuPage （它会继承React.Component）

现在我们业务上要接入typescript， 遇到一个问题就是

在继承这个LuPage要设置 props state 类型

```js
interface IProps {
  color: string,
  size?: string,
}

interface IState {
  count: number,
}

class Test extends LuPage<IProps, IProps> {
}

```
这样设置是无效的，请问下有美誉办法解决这个问题呢

index.d.ts
```js
 declare module 'lubase';
```

非常感谢！





hi! i maintain https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/

we used to have a [chinese version](https://github.com/fi3ework/blog/tree/master/react-typescript-cheatsheet-cn) but it fell out of date :)

anyone want to collaborate or maintain chinese version?

How you write TypeScript modules is also a bit of a mess. Again here is how not to do it today:
import foo = require('foo'). i.e. import/require. Use ES module syntax instead.

翻译成了：

怎么书写 TypeScript 模块，这也是一件让人困惑的事。在今天我们应该这么做：
import foo = require('foo') 例如： import/require 使用 ES 模块语法。

各位看看有没有问题
个人感觉改成"接口定义函数类型" 更合适.  直接翻译不利于理解. 如果不是懂一点函数类型定义, 我估计我怎么也看不懂这一章. 
概览中的内联类型注释的代码示例用错了代码，当前用的是接口的示例代码，应该是内联类型注解的代码