
Hi,
for my purposes I find useful having a standard way to package and install subs.
With the change in the pull request, after issuing the command:

prepare.sh xyz

you would have available the autoconf options; i.e.:

./configure --prefix=/opt/whatever

and you will be able to  install the subs by simply issuing the command:

make install

A further step could be to add *.deb, *.rpm creation on top of the standard autoconf tooling

 
My primary motivation with this was to add documentation for the init command. After I did that, I thought the installation instructions in README.md were a little bit redundant, so I changed them to just reference to the output of the init command. This seems cleaner as well as clearer from a UX viewpoint to me.

While trying to provide a tool built with sub as a gem, I learned that symlinks aren't maintained while building gems. This meant that `bin/sub` would be flattened into a copy of `libexec/sub` rather than remaining a symlink. This was problematic because [the bin file within a gem must be a ruby script](http://guides.rubygems.org/specification-reference/#executables).

This change execs `libexec/sub` instead of symlinking, which removes a roadblock when gemifying sub projects.

Fixes #26

Let me know if there is anything I can do, add, remove, etc.. 

It's solid, give it a test drive, it rocks

Fixes #7
Fixes #12
Fixes #16
Fixes #22
Fixes #27

Example Multi-level autocompletion for --complete: Fixes #7

```
[ /sub ] $ sub example advanced fix-7
bar  foo
[ /sub ] $ sub example advanced fix-7 foo b
baz  bla
```

Nested "sub-sub-commands": Fixes #22

```
.
├── bin                               # contains the main executable for your program
├── completions                       # (optional) bash/zsh completions
├── libexec                           # where the subcommand executables are
├───> sub-command                     # sub command (Displays summary for b & c)
|  ├────∎ sub-command-b               # sub command command-b <args>
|  └────∎ sub-command-c               # sub command command-c <args>
└── share 
```

Example Directory and File Structure: Fixes #22

```
.
├── bin                               # Real Life Example
├── completions                       # Directories return help for children
├── libexec                           # 
├───> sub-example                     # sub example (Returns summary)
|  ├────> sub-basic                   # sub example basic (Returns summary)
|  |   ├────∎ sub-foreach             # sub example basic foreach (Script)
|  |   └────∎ sub-files               # sub example basic files (Script)
|  └────> sub-advanced                # sub example advanced (Returns summary)
|      └────> sub-expert              # sub example advanced expert (Returns summary)
|          └────∎ sub-case-select     # sub example advanced expert case-select (Script)
└── share 
```

Example For Directory Help Helper File: Fixes #22

```
├── libexec                           # 
├───> sub-example                     # sub example (Returns help for example)
|  └───∎ sub-example                  # Provides area for usage, summary, and help
```

Example Help Helper File: Fixes #22

```
#!/usr/bin/env bash
# Usage: sub example
# Summary: Collection of BASH Sub Example Scripts
# Help: These commands are mostly used as examples and for testing sub modifications

set -e

sub help example
exit
```

Example Help Display With sub-sub-commands: Fixes #22

```
[ /sub ] $ sub help
Usage: sub <command> [<args>]

Some useful sub commands are:
   commands     List all sub commands
   -> example   Collection of BASH Sub Example Scripts

See 'sub help <command>' for information on a specific command.
```

Example Multiple Command w/ Completion: Fixes #22  & Fixes #12

```
[ /sub ] $ sub example advanced expert case-select --
--break  --name
```

Example Multiple Commands and Flags: Fixes #22

```
[ /sub ] $ sub example advanced expert case-select --break 3 --name Jeff
-=> Executing Case Select Example
----> Breaking on 3
----> Counter is called Jeff
------> The Jeff is 0
------> The Jeff is 1
------> The Jeff is 2
- Finished...
```

Example File Completion:  Fixes #16 & Fixes #27

```
[ /sub ] $ sub example basic files
.git/        .gitmodules  README.md    completions/ plugins/     share/
.gitignore   LICENSE      bin/         libexec/     prepare.sh
```

Not quite sure how to tap in to the auto documentation when creating a node based command. Hash bangs are illegal characters and js comments aren't picked up by `sub`.

Tried:

``` js
#!/usr/bin/env node
// # Usage: diy notify
// # Summary: Send a notification to any maker.
// # Help: Be careful!
```

and 

``` js
#!/usr/bin/env node
// Usage: diy notify
// Summary: Send a notification to any maker.
// Help: Be careful!
```

Fixes #7
(if using bash)

When bash-completion is invoked, all arguments are now
forwarded to the command, e.g.

sub command arg1 arg2 <tab>

now triggers:

sub --complete command arg1 arg2

instead of just:

sub --complete command

The completion for ZSH is upgraded to the new ZSH completion
system. To work, the file should be placed somewhere in ZSH fpath to
be autoloaded when needed and named `_sub`.

There are other embedded misc changes:
- `$CURRENT` indicate which word is being autocompleted.
- In ZSH, automatic word splitting is disabled in completion. There
  is no need to quote words.

The completion also handles plugins that are able to complete
args. However, most plugins don't and will complete with a subcommand
instead. I don't think there is an universal solution for this.

I am no ZSH wizard. Take this commit with care (works for me).

When there are no completions for a command, fall through to default bash completion. Fixes #16.

It's still necessary to add this in your command if it produces output:

``` bash
# Provide sub completions
if [ "$1" = "--complete" ]; then
  exit 0
fi
```

I also added the patch from #12.
