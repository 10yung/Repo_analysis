Bumps [wasmparser](https://github.com/yurydelendik/wasmparser.rs) from 0.35.3 to 0.47.0.
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href="https://github.com/yurydelendik/wasmparser.rs/commits">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=wasmparser&package-manager=cargo&previous-version=0.35.3&new-version=0.47.0)](https://dependabot.com/compatibility-score.html?dependency-name=wasmparser&package-manager=cargo&previous-version=0.35.3&new-version=0.47.0)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
If all status checks pass Dependabot will automatically merge this pull request.

[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
We can get better info about the type parameters that were monomorphized, which should make it much easier to debug this stuff.

Therefore, we should suggest building with `RUSTFLAGS=-Zsymbol-mangling-version=v0` in the `twiggy monos` section and also probably the "concepts > monomorphizations" section.
## üêõ Bug Description

Rust symbols have hashes in them. Both the old symbol mangling format and the new one.

* old format, demangled: `wee_alloc::alloc_first_fit::h6af2b7fe0cb0a62f`
* new format, demangled: `core[369c8b9e1df8da3a]::slice::sort::recurse::<Foo, <[Foo]>::sort_unstable::{closure#0}>`

(Note, you can enable the new symbol format with `RUSTFLAGS=-Zsymbol-mangling-version=v0` when building with `cargo`)

In the old format, the hash is the only thing differentiating between different monomorphizations of the same generic function. Therefore, it might make sense to keep the hash for the old symbol format.

The new format has the type parameters mangled into the symbol's name (eg `Foo` in the symbol above). In this case, it should be fine to strip the hash all the time (but perhaps with an option to disable the stripping?)

twiggy version: master

#### üåç Test Case

```rust
fn my_generic<T: Default>() -> T { T::default() }

#[no_mangle]
pub extern fn foo() -> *mut u8 {
    my_generic::<usize> as fn() -> usize as *mut _
}

#[no_mangle]
pub extern fn bar() -> *mut u8 {
    my_generic::<i8> as fn() -> i8 as *mut _
}
```

#### üëü Steps to Reproduce

Precise steps describing how to reproduce the issue, including commands and
flags run. For example:


* `rustc  --target wasm32-unknown-unknown --crate-type cdylib -C opt-level=3 -C lto=fat test_case.rs -o test_case_old_symbols.wasm`
* `rustc -Zsymbol-mangling-version=v0 --target wasm32-unknown-unknown --crate-type cdylib -C opt-level=3 -C lto=fat test_case.rs -o test_case_new_symbols.wasm`
* `twiggy top test_case_old_symbols.wasm`
* `twiggy top test_case_new_symbols.wasm`

#### üò≤ Actual Behavior

Function names have hashes

#### ü§î Expected Behavior

New symbols have hashes removed

(TBD exactly what to do with old symbols' hashes)
[#326](https://github.com/rustwasm/twiggy/issues/326)
The `add_item` function is called two times with the same id. 
In one iteration we call successively   `DataCountSection(section).parse_items(items, idx)?;` and 
` items.add_root(ir::Item::new(id, name, size - added, ir::Misc::new()));` with the same idx value.
That why we have a panic in the `add_item` function.
I'm suppose that id is the same because section's code is also the same ? I didn't understand further
I ran into an assertion when running `twiggy top` on a multithreaded wasm module (attached here)

```
$ twiggy top raytrace_parallel_bg.wasm
thread 'main' panicked at 'should not parse the same key into multiple items', /home/alex/.cargo/registry/src/github.com-1ecc6299db9ec823/twiggy-ir-0.6.0/./ir.rs:53:9
note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

[raytrace_parallel_bg.wasm.gz](https://github.com/rustwasm/twiggy/files/3411808/raytrace_parallel_bg.wasm.gz)


## üí° Feature Description

Maybe there is something I am missing, but I try running various `twiggy` commands on a WASM that I know has dozens of imports and I know the code calls them (when I check the wasm) and I do not see textual representation of those imported function calls in the graph... Maybe it's because you do not map the function to it's imported name ?


#### üôå Are you interested in implementing this feature?

Add an "X" to one of the following:

* [ ] Yes
* [ ] Yes if I had a mentor to help me
* [ ] No

## üí° Feature Description

It would be nice if there was an interactive REPL that would allow you to quickly run a number of analyses on a program. Currently, the workflow for analyzing a wasm binary in depth is running a series of somewhat verbose commands, i.e. `twiggy dominators -n [..] -d [..] /path/to/my/binary`.

I'd love the ability to enter some sort of very basic REPL, potentially offering shorter aliases to commands, so that I can do something like:

This could potentially function as a stepping stone to #9?

#### üíª Example Usage

Something like this would be great

```
$ twiggy --interactive /path/to/my/binary
> top -n 5
[Output here]
> dominators -d 2
[and so on]
```

The ability to load a different program without leaving the REPL might be a nice feature, as would writing the output of a command to a file with one of our CSV, JSON, etc. emission modes.

#### üôå Are you interested in implementing this feature?

Add an "X" to one of the following:

* [x] Yes
* [ ] Yes if I had a mentor to help me
* [ ] No

## Other Notes:

A part of me is slightly concerned that this should be implemented in another crate altogether. I can already imagine that some of the tools in `wabt` would be great into incorporate into a REPL of this sort, which makes me wonder if this is out-of-scope for `twiggy`. On some level, I think there might be a very similar question when eventually tackling #9.

Feedback would be greatly appreciated, and this might be worth breaking apart into separate issues depending on what we believe makes sense. :+1: 
We shouldn't require `cargo install` to get twiggy -- we should have pre-built binaries that we distribute for releases. This requires some CI configuring and all that.
Hi,
It seems to me that this tool is not capable of producing the output when the .wasm file size is bigger(even 5 MB ). However, it works well when I use a small size .wasm file.
Do you have any plan to fix this issue and release a new version of twiggy.exe.

Currently, we have a fairly thorough test bench. It would be nice however, if we also had some benchmarks for the different sub-commands, so that we could reason about how certain changes affect performance.