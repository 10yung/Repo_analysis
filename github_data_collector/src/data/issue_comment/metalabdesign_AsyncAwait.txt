Hi,

I was just wondering how hard is to implement/expose some sort of mechanism to be able to create idling resources that wait for the coroutines to finish. 

I can try sending you a PR if you point me in the right direction on what you think is the best way to do it. I think it'd be a great addition to the library.
Given a situation where UI elements depend on the AsyncController (like progress bars) while having to cancel tasks, it's necessary to know when a task was cancelled in order to hide progress and such
I'd like to suggest having the ability to cancel AsyncControllers individually
Currently we need to cancel all the async on destroying `Activity`. 

`override fun onDestroy() {
      super.onDestroy()
      async.cancelAll()
}`

With the new component called `Lifecycle` (Reference link below)  we can skip it and the library can itself take care of it by understanding the lifecycle. 

Refer:
[Lifecycle Architecture Component](https://developer.android.com/topic/libraries/architecture/lifecycle.html)
When I try to execute several tasks in parallel my code looks ugly.

 ```
async {
            await {
                async {
                    await {
                        async {
                            await {
                                val it = System.currentTimeMillis()
                                while (System.currentTimeMillis() - it < 5000);
                                Log.w("Executing coroutine", "Task1")
                            }
                        }
                        val it = System.currentTimeMillis()
                        while (System.currentTimeMillis() - it < 5000);
                        Log.w("Executing coroutine", "Task2")
                    }
                }
                val it = System.currentTimeMillis()
                while(System.currentTimeMillis() - it < 5000 );
                Log.w("Executing coroutine", "Task3")
            }

            Log.w("Executing coroutine", "All tasks completed")
        }
```

Is any way to make parallel execution looks more elegant? 
Something like this
```
 async {
            awaitParallel  {
                val it = System.currentTimeMillis()
                while (System.currentTimeMillis() - it < 5000);
                Log.w("Executing coroutine", "Task1")
            }
            awaitParallel  {
                val it = System.currentTimeMillis()
                while (System.currentTimeMillis() - it < 5000);
                Log.w("Executing coroutine", "Task2")
            }
            awaitParallel  {
                val it = System.currentTimeMillis()
                while (System.currentTimeMillis() - it < 5000);
                Log.w("Executing coroutine", "Task3")
            }
            Log.w("Executing coroutine", "All tasks completed")
        }
```
Fragments from the support-v4 library are recommended for usage over native Fragments, given they are always up-to-date on bug fixes and when new features are added. Plus, it is more likely that someone will be using Support Fragments in their app rather than native Fragments.
Warning:co.metalab.asyncawait.RetrofitExtensionsKt: can't find referenced class retrofit2.Call
Warning:co.metalab.asyncawait.RetrofitExtensionsKt$awaitSuccessful$1: can't find referenced class retrofit2.Call
Warning:co.metalab.asyncawait.RetrofitExtensionsKt$awaitSuccessful$1: can't find referenced class retrofit2.Response
Warning:co.metalab.asyncawait.RetrofitExtensionsKt$awaitSuccessful$1: can't find referenced class retrofit2.Call
Warning:co.metalab.asyncawait.RetrofitExtensionsKt$awaitSuccessful$1: can't find referenced class retrofit2.Response
Warning:co.metalab.asyncawait.RetrofitExtensionsKt$awaitSuccessful$1: can't find referenced class retrofit2.Call
Warning:co.metalab.asyncawait.RetrofitHttpError: can't find referenced class retrofit2.Response
Warning:co.metalab.asyncawait.RxExtensionsKt: can't find referenced class rx.Observable
Warning:co.metalab.asyncawait.RxExtensionsKt$await$1: can't find referenced class rx.Observable
Warning:co.metalab.asyncawait.RxExtensionsKt$await$1: can't find referenced class rx.observables.BlockingObservable
Warning:co.metalab.asyncawait.RxExtensionsKt$await$1: can't find referenced class rx.Observable
Warning:there were 29 unresolved references to classes or interfaces.
Warning:Exception while processing task java.io.IOException: Please correct the above warnings first.
Error:Execution failed for task ':app:transformClassesAndResourcesWithProguardForRelease'.
> Job failed, see logs for details
There is a conflict when you include an AndroidManifest.xml in your library release.

```
Error:Execution failed for task ':app:processDebugManifest'.
> Manifest merger failed : Attribute application@allowBackup value=(false) from AndroidManifest.xml:20:9-36
  	is also present at [co.metalab.asyncawait:asyncawait:1.0.0] AndroidManifest.xml:12:9-35 value=(true).
  	Suggestion: add 'tools:replace="android:allowBackup"' to <application> element at AndroidManifest.xml:18:5-280:19 to override.
```

It would be nice if there was an easy builtin way to await on another async coroutine.
As is possible in C# with Task and Task<T>.