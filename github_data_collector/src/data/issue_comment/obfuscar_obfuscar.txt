I am obfuscating a .net framework application that targets framework 4.6.1. A referenced assembly that I am also trying to obfuscate doesn't seem to get obfuscated when its TargetFrameworkVersion is set to 4.5. Change its TargetFrameworkVersion to 4.6.1 and obfuscation works as expected. Does obfuscar support TargetFrameworkVersion 4.5?
The reproduced issue is available here: https://github.com/gunsh/obfuscar-property-attributes

Please note that the unobfuscated Debug build produces the expected Derived + Base output while the obfuscated Release outputs Base + Base. Let me know if you need more details.
I tried to configure obfuscar on a desktop .net core 3.0 DLL , but I get an error:

```Loading assemblies...Extra framework folders: Done.
Hiding strings...
Renaming:  fields...Parameters...Properties...Events...Methods...Types...Done.
Saving assemblies...
Unhandled Exception: Mono.Cecil.ResolutionException: Failed to resolve System.Reflection.BindingFlags
   at Mono.Cecil.Mixin.CheckedResolve(TypeReference self)
   at Mono.Cecil.MetadataBuilder.GetConstantType(TypeReference constant_type, Object constant)
   at Mono.Cecil.MetadataBuilder.AddConstant(IConstantProvider owner, TypeReference type)
   at Mono.Cecil.MetadataBuilder.AddParameter(UInt16 sequence, ParameterDefinition parameter, ParamTable table)
   at Mono.Cecil.MetadataBuilder.AddParameters(MethodDefinition method)
   at Mono.Cecil.MetadataBuilder.AddMethod(MethodDefinition method)
   at Mono.Cecil.MetadataBuilder.AddMethods(TypeDefinition type)
   at Mono.Cecil.MetadataBuilder.AddType(TypeDefinition type)
   at Mono.Cecil.MetadataBuilder.AddTypes()
   at Mono.Cecil.MetadataBuilder.BuildTypes()
   at Mono.Cecil.MetadataBuilder.BuildModule()
   at Mono.Cecil.MetadataBuilder.BuildMetadata()
   at Mono.Cecil.ModuleWriter.<>c.<BuildMetadata>b__2_0(MetadataBuilder builder, MetadataReader _)
   at Mono.Cecil.ModuleDefinition.Read[TItem,TRet](TItem item, Func`3 read)
   at Mono.Cecil.ModuleWriter.Write(ModuleDefinition module, Disposable`1 stream, WriterParameters parameters)
   at Mono.Cecil.ModuleWriter.WriteModule(ModuleDefinition module, Disposable`1 stream, WriterParameters parameters)
   at Obfuscar.Obfuscator.SaveAssemblies(Boolean throwException)
   at Obfuscar.Obfuscator.RunRules()
   at Obfuscar.Program.Main(String[] args)
```
Been trying to configure obfuscar on a .net core 3 exe and DLL, and it looks like since 3.0.100 obfuscar is broken. Is this a matter of updating Cecil?

``
Loading project obfuscar.xml...Processing assembly: MLRecognizers, Version=0.0.1.0, Culture=neutral, PublicKeyToken=null
2>
2>Unhandled Exception: System.BadImageFormatException: Format of the executable (.exe) or library (.dll) is invalid.
2>   at Mono.Cecil.PE.ImageReader.ReadOptionalHeaders(UInt16& subsystem, UInt16& dll_characteristics)
2>   at Mono.Cecil.PE.ImageReader.ReadImage()
2>   at Mono.Cecil.PE.ImageReader.ReadImage(Disposable`1 stream, String file_name)
2>   at Mono.Cecil.ModuleDefinition.ReadModule(String fileName, ReaderParameters parameters)
2>   at Obfuscar.AssemblyInfo.LoadAssembly(String filename)
2>   at Obfuscar.AssemblyInfo.FromXml(Project project, XElement reader, Variables vars)
2>   at Obfuscar.Project.FromXmlReadNode(XElement reader, Project project)
2>   at Obfuscar.Project.FromXml(XDocument reader, String projectFileDirectory)
2>   at Obfuscar.Obfuscator.LoadFromReader(XDocument reader, String projectFileDirectory)
2>   at Obfuscar.Obfuscator..ctor(String projfile)
2>   at Obfuscar.Program.Main(String[] args)
``
![111](https://user-images.githubusercontent.com/19945852/67373576-79535900-f5b2-11e9-8d20-be7f04db3324.jpg)

系统类型IEumerable<T>也被处理了怎么办？
I am testing Obfuscar with a large solution containing many projects (mix of VB and C# projects, total of 1 million lines of code). I am getting an error 

The error is:
```
Obfuscar.ObfuscarException: Failed to get type definitions for WizInterfaces, Version=8.13.0.0, Culture=neutral, PublicKeyToken=bce3f989f4a9ff0b ---> System.ArgumentException: An item with the same key has already been added.
   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)
   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)
   at Obfuscar.AssemblyInfo.Graph..ctor(IEnumerable`1 items)
   at Obfuscar.AssemblyInfo.GetAllTypeDefinitions()
   --- End of inner exception stack trace ---
   at Obfuscar.AssemblyInfo.GetAllTypeDefinitions()
```

My understanding is that [this line](https://github.com/obfuscar/obfuscar/blob/93e772d02d2017de30afb1e3d333194c2c2e53fe/Obfuscar/Helpers/TypeReferenceExtensions.cs#L74) creates names that are conflicting with other names generated for types in `Obfuscar.RenameTypes`. I am not clear yet as of how to create a simple reproduction scenario. I don't know neither how setting a value for `Mono.Cecil.TypeReference.Name` impacts the values set to `Mono.Cecil.TypeDefinition.Name`. As apparently it can be conflicting, the fix seems to be to apply the smae logic defined [here](https://github.com/obfuscar/obfuscar/blob/93e772d02d2017de30afb1e3d333194c2c2e53fe/Obfuscar/Obfuscator.cs#L583) within `TypeReferenceExtensions.cs`.

If I comment out [this line](https://github.com/obfuscar/obfuscar/blob/93e772d02d2017de30afb1e3d333194c2c2e53fe/Obfuscar/Helpers/TypeReferenceExtensions.cs#L74) the error is fixed.

What do you think?
I've been testing Obfuscar on a large project with 70+ assemblies, lots of XAML with styling and lots of generics, and in order to make the obfuscation pass without crashing and get a working application afterwards I've fixed a number of bugs. Also, the process now runs in about half the time, from ~2mins to ~1min on my app. All tests pass, including a few new ones I added.
We are using coverage tools that builds a mapping between covered code and executed tests. The benefit is that for a particular code change, we can then decide which tests need to be executed. Thanks to the mapping, only the tests that executed the modified code (during previous runs) will be executed.

To do so, we need the obfuscation to remain stable over time: for inst. we need the obfuscation of method `Foo` to remain the same over time, otherwise the mapping we are relying on becomes useless. The best way would be that the coverage tool should support the mapping file... but it doesn't.

We used Crypto Obfuscator and its  _Cryptographic Renaming_ scheme for this. Incremental obfuscation ensures that existing classes, methods, etc are given the same obfuscated name every time assemblies are obfuscated. Any new classes, methods, etc are given obfuscated names different from already taken obfuscated names. Problem is that Crypto doesn't seem to be maintained any longer and is not compatible with .Net Core/Standard.

I checked Obfuscar code and also did some experiments, looks like supporting a _Cryptographic Renaming_-like behavior seems simple to implement: by adding an `object key` parameter (that would receive the `methodKey`, `propertyKey`... values from the callers) to the UniqueName methods, we could do an MD5 checksum of this object as the name. That would be returned instead of the `A`, `B`... naming generation (which changes as soon as you insert members over time. I checked using `MD5(xxxKey.ToString())` and it does the job.

Is this something you already had in mind? What do you think?
Here is my code

```
// before
public delegate void Action();
public class ClassA
{
    protected Action callback;
    public ClassA()
    {
        callback += AAA;
        callback.Invoke();
    }
    protected virtual void AAA()
    {
        Log.Info("This Class A");
    }
}

public class ClassB : ClassA
{
    public void BBB()
    {
        Log.Info("This Class B");
    }
}
```

```
//after
public delegate void bC();
public class f
{
    protected bC A;
    public f()
    {
        this.A = (bC)Delegate.Combine(this.A, new bC(A));
        this.A();
    }

    protected virtual void A()
    {
        Log.Info("This Class A");
    }
}

public class bq : f
{
    public new void A()
    {
        Log.Info("This Class B");
    }
}
```

```
//Execute
var b = new ClassB();
b.BBB();

//Expected
=>"This is Class A"
=>"This is Class B"

//Result
=>"This is Class B"				//error!! bug?
=>"This is Class B"
```



1、ClassA.AAA   ->   f.A
2、ClassB.BBB    ->   bq.A
3、Delegate Action   ->  bC
4、Field callback   ->  A

What does "A" point to?
Similar to #231 there is a crash when the main assembly references the other assembly's enum as a method parameter with a default value. Version 2.2.24 is affected. Have a look at: https://github.com/gunsh/obfuscar-default-parameter-enum-value

Please note that once the default value is removed from `Program.Method` -OR- if `[Obfuscation]` attribute is applied to `Mode` enum, the issue goes away.

> Unhandled Exception: Mono.Cecil.ResolutionException: Failed to resolve A.A
2>     at Mono.Cecil.Mixin.CheckedResolve(TypeReference self)
2>     at Mono.Cecil.MetadataBuilder.GetConstantType(TypeReference constant_type, Object constant)
2>     at Mono.Cecil.MetadataBuilder.AddConstant(IConstantProvider owner, TypeReference type)
2>     at Mono.Cecil.MetadataBuilder.AddParameter(UInt16 sequence, ParameterDefinition parameter, ParamTable table)
2>     at Mono.Cecil.MetadataBuilder.AddParameters(MethodDefinition method)
2>     at Mono.Cecil.MetadataBuilder.AddMethod(MethodDefinition method)
2>     at Mono.Cecil.MetadataBuilder.AddMethods(TypeDefinition type)
2>     at Mono.Cecil.MetadataBuilder.AddType(TypeDefinition type)
2>     at Mono.Cecil.MetadataBuilder.AddTypes()
2>     at Mono.Cecil.MetadataBuilder.BuildTypes()
2>     at Mono.Cecil.MetadataBuilder.BuildModule()
2>     at Mono.Cecil.MetadataBuilder.BuildMetadata()
2>     at Mono.Cecil.ModuleWriter.<>c.<BuildMetadata>b__2_0(MetadataBuilder builder, MetadataReader _)
2>     at Mono.Cecil.ModuleDefinition.Read[TItem,TRet](TItem item, Func`3 read)
2>     at Mono.Cecil.ModuleWriter.Write(ModuleDefinition module, Disposable`1 stream, WriterParameters parameters)
2>     at Mono.Cecil.ModuleWriter.WriteModule(ModuleDefinition module, Disposable`1 stream, WriterParameters parameters)
2>     at Obfuscar.Obfuscator.SaveAssemblies(Boolean throwException)
2>     at Obfuscar.Obfuscator.RunRules()
2>     at Obfuscar.Program.Main(String[] args)