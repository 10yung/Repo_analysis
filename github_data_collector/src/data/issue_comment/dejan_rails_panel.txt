Chrome: Version 78.0.3904.108 (Official Build) (64-bit)

Getting this error whenever the extension loads in Chrome. You can see it in the Errors section of the Extension:

TypeError: Cannot read property 'replace' of null

assets/javascripts/filters.js:42 (a.<anonymous>)

 filter('sanitize', function() {
    return function(input) {
      return input.
        replace(/&/g, '&amp;').   <- this is the line
        replace(/</g, '&lt;').
        replace(/>/g, '&gt;');
    }
  }).
Active record location is referencing Gem files instead of project code in the chrome debugger

![image](https://user-images.githubusercontent.com/2956762/68732669-556eba80-0628-11ea-8e17-d08831a6d309.png)



On my companies app, we have some js calls to the rails server to check for new notifications or whatever. (It may not be the best way to receive notifications, but it is legacy from before browser notifications were possible.) As a result, when I am using rails panel, whenever the notifications on the site are checked, the active request is set to be that newest request. This is not very useful when I am currently looking at a prior request's parameters and suddenly the new request's info is brought up. 

It looks like the culprit is [here](https://github.com/dejan/rails_panel/blob/master/rails_panel/assets/javascripts/transactions.js#L132). at that line, we set the active request to be the newest incoming request. I don't think we should do this unless there is not a current active request, or rather, when the user has not *clicked* on a request yet.

I'd like to know other's opinions on either removing that line or changing it to meet my suggested conditions.
Update styling to match new Chrome/devtools flat design.
## Summary

- Don't change $scope.activeKey when it's already set
- Update mock data every 5 seconds to simulate what's going on in many applications these days
- Bump version to 0.3.4

## Many words

When debugging an application where transactions keep coming in, RailsPanel would keep selecting the newest transaction. 

This is a bit annoying (understatement) when you're looking at a specific transaction to see what's going on. I fixed that by only automatically selecting a transaction when there is no transaction selected. I also added some code to the mock data function to simulate new transactions coming in every couple of seconds.

To test, open panel.html in Chrome and see the mock requests coming in, and the new requests not being selected (as they previously were).
Resolves https://github.com/dejan/rails_panel/issues/139

![image](https://user-images.githubusercontent.com/344698/47248242-4a3b6200-d409-11e8-8c0a-da5306355e98.png)

Styling is far from perfect, any design help welcome.

TODO:
* [ ] move button to top bar, see https://github.com/dejan/rails_panel/pull/154#issuecomment-508343051
Using ruby '2.5.1', 'rails', '~> 5.2.0' I'm getting the following stack trace, multiple times (Rails Panel works, but server get's plagued with this exceptions):

```
Errno::ENOENT (No such file or directory @ rb_sysopen - {RAILS_PATH}/tmp/data/meta_request/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.json):
  
meta_request (0.6.0) lib/meta_request/storage.rb:16:in `read'
meta_request (0.6.0) lib/meta_request/storage.rb:16:in `read'
meta_request (0.6.0) lib/meta_request/middlewares/meta_request_handler.rb:20:in `events_json'
meta_request (0.6.0) lib/meta_request/middlewares/meta_request_handler.rb:11:in `call'
scout_apm (2.4.14) lib/scout_apm/instant/middleware.rb:53:in `call'
scout_apm (2.4.14) lib/scout_apm/middleware.rb:20:in `call'
rack-attack (5.4.0) lib/rack/attack.rb:174:in `call'
warden (1.2.7) lib/warden/manager.rb:36:in `block in call'
warden (1.2.7) lib/warden/manager.rb:35:in `catch'
warden (1.2.7) lib/warden/manager.rb:35:in `call'
rack (2.0.5) lib/rack/tempfile_reaper.rb:15:in `call'
rack (2.0.5) lib/rack/etag.rb:25:in `call'
rack (2.0.5) lib/rack/conditional_get.rb:25:in `call'
rack (2.0.5) lib/rack/head.rb:12:in `call'
actionpack (5.2.0) lib/action_dispatch/http/content_security_policy.rb:18:in `call'
rack (2.0.5) lib/rack/session/abstract/id.rb:232:in `context'
rack (2.0.5) lib/rack/session/abstract/id.rb:226:in `call'
actionpack (5.2.0) lib/action_dispatch/middleware/cookies.rb:670:in `call'
activerecord (5.2.0) lib/active_record/migration.rb:559:in `call'
actionpack (5.2.0) lib/action_dispatch/middleware/callbacks.rb:28:in `block in call'
activesupport (5.2.0) lib/active_support/callbacks.rb:98:in `run_callbacks'
actionpack (5.2.0) lib/action_dispatch/middleware/callbacks.rb:26:in `call'
actionpack (5.2.0) lib/action_dispatch/middleware/executor.rb:14:in `call'
airbrake (7.3.4) lib/airbrake/rack/middleware.rb:48:in `call'
actionpack (5.2.0) lib/action_dispatch/middleware/debug_exceptions.rb:61:in `call'
rack-contrib (2.0.1) lib/rack/contrib/response_headers.rb:17:in `call'
meta_request (0.6.0) lib/meta_request/middlewares/headers.rb:16:in `call'
web-console (3.6.2) lib/web_console/middleware.rb:135:in `call_app'
web-console (3.6.2) lib/web_console/middleware.rb:30:in `block in call'
web-console (3.6.2) lib/web_console/middleware.rb:20:in `catch'
web-console (3.6.2) lib/web_console/middleware.rb:20:in `call'
actionpack (5.2.0) lib/action_dispatch/middleware/show_exceptions.rb:33:in `call'
railties (5.2.0) lib/rails/rack/logger.rb:38:in `call_app'
railties (5.2.0) lib/rails/rack/logger.rb:26:in `block in call'
activesupport (5.2.0) lib/active_support/tagged_logging.rb:71:in `block in tagged'
activesupport (5.2.0) lib/active_support/tagged_logging.rb:28:in `tagged'
activesupport (5.2.0) lib/active_support/tagged_logging.rb:71:in `tagged'
railties (5.2.0) lib/rails/rack/logger.rb:26:in `call'
sprockets-rails (3.2.1) lib/sprockets/rails/quiet_assets.rb:13:in `call'
actionpack (5.2.0) lib/action_dispatch/middleware/remote_ip.rb:81:in `call'
request_store (1.4.1) lib/request_store/middleware.rb:19:in `call'
actionpack (5.2.0) lib/action_dispatch/middleware/request_id.rb:27:in `call'
rack (2.0.5) lib/rack/method_override.rb:22:in `call'
rack (2.0.5) lib/rack/runtime.rb:22:in `call'
activesupport (5.2.0) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
rack-rewrite (1.5.1) lib/rack/rewrite.rb:24:in `call'
actionpack (5.2.0) lib/action_dispatch/middleware/executor.rb:14:in `call'
actionpack (5.2.0) lib/action_dispatch/middleware/static.rb:127:in `call'
rack (2.0.5) lib/rack/sendfile.rb:111:in `call'
railties (5.2.0) lib/rails/engine.rb:524:in `call'
puma (3.12.0) lib/puma/configuration.rb:225:in `call'
puma (3.12.0) lib/puma/server.rb:658:in `handle_request'
puma (3.12.0) lib/puma/server.rb:472:in `process_client'
puma (3.12.0) lib/puma/server.rb:332:in `block in run'
puma (3.12.0) lib/puma/thread_pool.rb:133:in `block in spawn_thread'
```
As you can see from stack we use other middleware like:
- scout_apm
- rack-attack
- rack-rewrite
- rack-timeout
- web-console
- airbrake

But nothing unusual about those. Any help to remove this noise appreciated.
https://github.com/dejan/rails_panel/issues/30

I remember using this before and finding it useful, and I could have sworn it used to exist!  What happened to it, any way to get it back?
Some of our report pages have a lot of partials (that cache). On the initial uncached page render, there are so many partials that the RailsPanel popup scrolls off the bottom of the screen, and we can't see it without `Cmd+-` to shrink the page size. Even then, some pages overflow off the bottom.

Our solution has been to set some css on `.profiler-popup` using the Stylebot Chrome extension, but I thought perhaps the panel could support this natively rather easily.

```
.profiler-popup {
  height: 100vh;
  overflow: scroll;
}
```
Would be cool to have a button for cleaning the controller actions list, in a similar way as the clear button in Chrome Developer Tools in Network tab