Looks like support for CSS's "@support" is broken after v3.0.4, any ideas? change-log doesn't seem to have anything about it

<img width="884" alt="Screen Shot 2020-01-17 at 5 38 24 PM" src="https://user-images.githubusercontent.com/9402326/72656553-f7749100-3950-11ea-9fdd-db0fb1bf1e0e.png">


Hi,
i think the following behaviour might be wrong:
this less...

```less
@colors: {
    enabled: #00b4c6;
    selected: #4d4d4d;
    hovered: #dbdbdb;
}

.testClass {
  background-color: @colors[enabled];
    &.active {
       background-color: @colors[selected] !important;
       }
   &.hovered {
       background-color: @colors[hovered];
   }
}
```


...compiles to this css

```css
.testClass {
  background-color: #00b4c6;
}
.testClass.active {
  background-color: #4d4d4d;
}
.testClass.hovered {
  background-color: #dbdbdb;
}

```

notice how the "!important" keyword is omitted in the resulting css. 
```
border-width: max(.01rem, 1px);
```
This code will break compile process.
Better error reporting in case of variable definition outside selector blocks.
-L
When a visitor hook returns an array of nodes for replacement, the accept calls are not made.
Returning an array of node when the plugin implementation `isReplacing` is set seems to be correctly supported in the `visitArray` function implementation.
-L
Let's say now I have 2 pages A and B, both import a long common css "common.less". 
Is it possible to use the native @import to import the external common module, instead of inlining it into both A.css and B.css?
Hi, I follow up https://github.com/ant-design/ant-design/pull/13242 PR of @matthew-dean to replace inline-js with plugin. It works well with dev mode but OOM when dist.

Is that any club for this that I can dig into?

ref: https://github.com/ant-design/ant-design/pull/20470
I know this topic has come up a lot, but the answers provided for these questions don't work well for my needs or several cases I don't think have been properly discussed.

I strongly disagree with this being a feature that's not required, there are definitely cases that can not be addressed as easily with just defining a variable ahead of time. Any case in which you are not the one in charge of defining the values you're working with for example. In my case I'm creating utility mixins, such as the one below:
```
#util() {
    .border(@path) when (~'@{@{path}-type}' = individual) {
        border-top: ~'@{@{path}-top-definition}';
        border-bottom: ~'@{@{path}-bottom-definition}';
        border-left: ~'@{@{path}-left-definition}';
        border-right: ~'@{@{path}-right-definition}';
    }
    .border(@path) when not (~'@{@{path}-type}' = individual) {
        border: ~'@{@{path}-definition}';
    }
}
```
And the And an example usage:
In variables.less
```
@main-header-border-type: individual;
@main-header-border-definition: none;
@main-header-border-top-definition: 1px solid #e1e1e1;
@main-header-border-bottom-definition: none;
@main-header-border-left-definition: none;
@main-header-border-right-definition: none;
```
in main stylesheet
```
.page .header {
    #util.border(main-header-border);
}
```
Now I'm working with a site that shows all variables in a variables.less file in a web interface, so I'm defining all the potential variables for the end user to configure.

That mixin works fine and I have no problems with it. However another mixin I have is the two following:
```
.font(@path) {
        font-family: ~'@{@{@{path}-font}}';
        color: ~'@{@{@{path}-color}}';
        font-size: ~'@{@{path}-size}';
    }
    .fontHover(@path) {
        font-family: ~'@{@{@{path}-font}}';
        color: ~'@{@{@{path}-color}}';
        font-size: ~'@{@{path}-size}';
        &:hover {
            color: ~'@{@{@{path}-hover-color}}'
        }
    }
```
I have two mixins here for dealing with text properties, one for text that should have a hover color and one for when it shouldn't. I'd love to combine these two into the same mixin, and put a guard on the `&:hover` testing for whether the hover-color subproperty exists to determine whether it should be used.

I feel the other suggestions on this topic were closed with too little consideration to the possibility of people making libraries for other users, or multiple people working on different files with reusable code.
Hi - the CHANGELOG is out of date with the current version - it says that 3.10.0 is in beta, but the releases page shows that 3.10.3 is the latest version - can the changelog be updated to reflect what changed?
Hi, I'm making updates for Open Collective. Either you or another core contributor signed this repository up for Open Collective. This pull request adds financial contributors from your Open Collective https://opencollective.com/less. ‚ù§Ô∏è

  What it does:
  - adds a badge to show the latest number of financial contributors
  - adds a banner displaying contributors to the project on GitHub
  - adds a banner displaying all individuals contributing financially on Open Collective
  - adds a section displaying all organizations contributing financially on Open Collective, with their logo and a link to their website

P.S: As with any pull request, feel free to comment or suggest changes.

  Thank you for your great contribution to the Open Source community. You are awesome! üôå
  And welcome to the Open Collective community! üòä

  Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other Open Source sustainers!
  