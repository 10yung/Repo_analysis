![2019-05-18_19-44](https://user-images.githubusercontent.com/18725968/57973215-b5e8ac00-79a5-11e9-9c3d-fac293b80302.png)

I'm on linux and I also had the problem described in #274, but after loading from the game directory I got it to work. But now only a fraction of the screen is used.
abas@abas-ThinkPad-R61:~/Downloads/hematite-master$ cargo run --release "./<New_World>"
    Finished release [optimized] target(s) in 1.33s                             
     Running `target/release/hematite './<New_World>'`
Opening "/home/abas/.minecraft/versions/1.8.8/1.8.8.jar"...
File "/home/abas/.minecraft/versions/1.8.8/1.8.8.jar" contains 5597 files.
Extracted 3085 files.
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: "No such file or directory" }', libcore/result.rs:1009:5
note: Run with `RUST_BACKTRACE=1` for a backtrace.

Idea is to support https://minecraft.gamepedia.com/Advancements#JSON_Format for custom advancements (MC 1.12+)
I am familiar with game engines in C++, however, I ahve not released any game yet. I would like to develop `hematite` if it is possible, however, I don't know anything about the game, the world file structure. If you publish some documentation for developers about how everything works here in the `hematite`, it would be very nice, everyone would be able to continue working on it.
Hi,  

I wanted to try hematite just for fun, but I am unable to start any world with it. I installed version 1.8.8 for Linux, because the program seams to look for it.

*The error is the following:*
```
Opening "/home/*USER*/.minecraft/versions/1.8.8/1.8.8.jar"...
File "/home/*USER*/.minecraft/versions/1.8.8/1.8.8.jar" contains 5597 files.
Extracted 3085 files.
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: "No such file or directory" } }', ../src/libcore/result.rs:837
note: Run with `RUST_BACKTRACE=1` for a backtrace.
```

I placed a copy of the world in the hematite folder but that doesn't do anything. 

*The content with RUST_BACKTRACE=1 is:*
```
    Finished release [optimized] target(s) in 0.0 secs
     Running `target/release/hematite ./New\\\ World/`
Opening "/home/*USER*/.minecraft/versions/1.8.8/1.8.8.jar"...
File "/home/*USER*/.minecraft/versions/1.8.8/1.8.8.jar" contains 5597 files.
Extracted 3085 files.
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: "No such file or directory" } }', ../src/libcore/result.rs:837
stack backtrace:
   1:     0x5604bd82464a - std::sys::imp::backtrace::tracing::imp::write::h917062bce4ff48c3
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42
   2:     0x5604bd82931f - std::panicking::default_hook::{{closure}}::h0bacac31b5ed1870
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:247
   3:     0x5604bd827586 - std::panicking::default_hook::h5897799da33ece67
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:263
   4:     0x5604bd827c37 - std::panicking::rust_panic_with_hook::h109e116a3a861224
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:451
   5:     0x5604bd827ac4 - std::panicking::begin_panic::hbb38be1379e09df0
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:413
   6:     0x5604bd8279e9 - std::panicking::begin_panic_fmt::h26713cea9bce3ab0
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:397
   7:     0x5604bd827977 - rust_begin_unwind
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:373
   8:     0x5604bd864d9d - core::panicking::panic_fmt::hcfbb59eeb7f27f75
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libcore/panicking.rs:69
   9:     0x5604bd623dc4 - core::result::unwrap_failed::h15a0fc826f4081f4
  10:     0x5604bd66d80a - hematite::main::h57298bcaf003982c
  11:     0x5604bd830dfa - __rust_maybe_catch_panic
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libpanic_unwind/lib.rs:97
  12:     0x5604bd828655 - std::rt::lang_start::hd661476ce2fc2931
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libstd/panicking.rs:332
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libstd/panic.rs:351
                        at /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/obj/../src/libstd/rt.rs:57
  13:     0x7f178ebe2290 - __libc_start_main
  14:     0x5604bd6200a9 - _start
  15:                0x0 - <unknown>
```

*Notes*
I am on Arch-Linux and I use Rustup with the nightly-build.
If you need more information I'll try to provide them.

-siebencorgie
I noticed a performance regression with the new glutin code while running on Linux. I'm getting numbers that look like this:

New Windows: ~750 fps
New Linux: ~50 fps
Old Linux: ~250 fps

Same hardware for all of them. Windows 10 x64. Ubuntu 16.04 x64 with Nvidia 361.42 drivers.

Could be an issue with glutin maybe?

It would be nice to have automated and repeatable benchmarks in hematite. I see two ways of accomplishing this, and it might be nice to have both:
1. Abstract the render loop into functions and then call these functions inside some standard `#[bench]` tests. This method is limited by the simplicity of the Bencher API, but it can still be useful.
2. Have a benchmark mode similar to many games that records statistics while the camera goes through a predefined path.

This issue was automatically generated. Feel free to close without ceremony if
you do not agree with re-licensing or if it is not possible for other reasons.
Respond to @cmr with any questions or concerns, or pop over to
`#rust-offtopic` on IRC to discuss.

You're receiving this because someone (perhaps the project maintainer)
published a crates.io package with the license as "MIT" xor "Apache-2.0" and
the repository field pointing here.

TL;DR the Rust ecosystem is largely Apache-2.0. Being available under that
license is good for interoperation. The MIT license as an add-on can be nice
for GPLv2 projects to use your code.
# Why?

The MIT license requires reproducing countless copies of the same copyright
header with different names in the copyright field, for every MIT library in
use. The Apache license does not have this drawback. However, this is not the
primary motivation for me creating these issues. The Apache license also has
protections from patent trolls and an explicit contribution licensing clause.
However, the Apache license is incompatible with GPLv2. This is why Rust is
dual-licensed as MIT/Apache (the "primary" license being Apache, MIT only for
GPLv2 compat), and doing so would be wise for this project. This also makes
this crate suitable for inclusion and unrestricted sharing in the Rust
standard distribution and other projects using dual MIT/Apache, such as my
personal ulterior motive, [the Robigalia project](https://robigalia.org).

Some ask, "Does this really apply to binary redistributions? Does MIT really
require reproducing the whole thing?" I'm not a lawyer, and I can't give legal
advice, but some Google Android apps include open source attributions using
this interpretation. [Others also agree with
it](https://www.quora.com/Does-the-MIT-license-require-attribution-in-a-binary-only-distribution).
But, again, the copyright notice redistribution is not the primary motivation
for the dual-licensing. It's stronger protections to licensees and better
interoperation with the wider Rust ecosystem.
# How?

To do this, get explicit approval from each contributor of copyrightable work
(as not all contributions qualify for copyright, due to not being a "creative
work", e.g. a typo fix) and then add the following to your README:

```
## License

Licensed under either of

 * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)
 * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)

at your option.

### Contribution

Unless you explicitly state otherwise, any contribution intentionally submitted
for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any
additional terms or conditions.
```

and in your license headers, if you have them, use the following boilerplate
(based on that used in Rust):

```
// Copyright 2016 hematite Developers
//
// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or
// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or
// http://opensource.org/licenses/MIT>, at your option. This file may not be
// copied, modified, or distributed except according to those terms.
```

It's commonly asked whether license headers are required. I'm not comfortable
making an official recommendation either way, but the Apache license
recommends it in their appendix on how to use the license.

Be sure to add the relevant `LICENSE-{MIT,APACHE}` files. You can copy these
from the [Rust](https://github.com/rust-lang/rust) repo for a plain-text
version.

And don't forget to update the `license` metadata in your `Cargo.toml` to:

```
license = "MIT OR Apache-2.0"
```

I'll be going through projects which agree to be relicensed and have approval
by the necessary contributors and doing this changes, so feel free to leave
the heavy lifting to me!
# Contributor checkoff

To agree to relicensing, comment with :

```
I license past and future contributions under the dual MIT/Apache-2.0 license, allowing licensees to chose either at their option.
```

Or, if you're a contributor, you can check the box in this repo next to your
name. My scripts will pick this exact phrase up and check your checkbox, but
I'll come through and manually review this issue later as well.
- [x] @AerialX
- [x] @DaemonLee
- [ ] @Potpourri
- [x] @RichardlL
- [x] @ahtn
- [x] @bvssvni
- [x] @carlosmn
- [x] @cmr
- [x] @drhaynes
- [x] @eddyb
- [x] @fenhl
- [x] @homeworkprod
- [x] @indiv0
- [x] @kvark
- [x] @leonkunert
- [x] @limeburst
- [x] @lucidd
- [x] @mattico
- [x] @meatcompute
- [x] @mitsuhiko
- [x] @saml
- [x] @steveklabnik
- [x] @stjahns
- [x] @toqueteos

(I know in a previous issue said how the map file reading is unnecessary for the client, but while it is still in testing, its obviously still needed.)

What I mean is when launched it with 

```
hematite $World_name
```

hematite would copy and load/manipulate your world from 

```
$(minecraftdir)/saves/$World_name
```

automatically, as it does with the 1.8.3 jar.

It would also be convenient if when called with no arguments, It would list your save files.

Currently, it is not possible to start Hematite without having a copy of Minecraft around. What about shipping freely licensed replacement assets that can be used?

I can find or make some if needed. Additionally, we might take some from [Minetest](http://minetest.net) but it doesn't look that Minecraft-y.
