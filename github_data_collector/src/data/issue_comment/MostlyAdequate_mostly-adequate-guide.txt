Hi,
`slice` and `splice` have different purposes and functionality. I definitely agree that `splice` should be avoided due to its destructive nature. Anyway the only case when they (forgetting for a second about destruction) have the same output is when the first parameter is exactly 0 and optionally both pass the same second integer. Actually they even give the same output also if the first parameter is greater than 0, but only if the second one is not passed. Not sure how to summarize that in a few words, but to avoid confusion I would at least shortly mention it.
Is the next function is really pure? Every time it will produce new function
```
const signUp = (Db, Email, attrs) => () => {
  const user = saveUser(Db, attrs);
  welcomeUser(Email, user);
};
```
When I open any chapter, say ch01:
https://mostly-adequate.gitbooks.io/mostly-adequate-guide/content/ch01.html

Right chevron links to the current chapter header. I'd expect it to link to the next one.

Env:

```
MacOS
Desktop Chrome v79 (latest)
```

_I haven't used Gitbook, but it might be solvable via GitBook update, also mentioned in #542_
The readme refers to [https://mostly-adequate.gitbooks.io/mostly-adequate-guide/](https://mostly-adequate.gitbooks.io/mostly-adequate-guide/), but this link is offline. (ipadress not found)
The "subscribe" button won't let me create accounts on the "legacy" gitbooks site.

```
401
Unauthorized
New accounts should be created on the new version of GitBook. Head to https://www.gitbook.com
```

I'm keen to be notified when new chapters are published.

Migrating the book from the legacy to the new gitbooks might solve this problem.

Are there any other workarounds?
Declarative coding section; i quote
> For those of you who are thinking "Yes, but it's much faster to do the imperative loop", I suggest you educate yourself on how the JIT optimizes your code. 

Here authors tells "map" or "for" doesn't matter performance wise. map is more readable and JIT optimizes that. 
This is not true. He forget to mention the time and effort spent while JIT do its thing. 
I am sure JIT does cool staff and i am sure it is not free. 
Also jsperf doesn't look as he said. I know jsperf is not the best tool but it gives an idea.
https://jsperf.com/map-vs-for-loop-performance/6

![Screenshot_3](https://user-images.githubusercontent.com/1254613/71724653-139d0c00-2e42-11ea-85f9-bbaf39f3e50d.png)

Please add a "how to cite" section to the README, ideally with a supporting .bib entry.
In  Chapter 11
`// arrayToList :: [a] -> List a   `
`const arrayToList = List.of;`

I execute in the ternimal `console.log(arrayToList([1,2,3,4]))`, got  nested array  `List([[1, 2, 3, 4]])`
Is this expected behavior ?
Hi, I'm recently learning category-theory and functional programming.
The image in the [chapter 5 category-theory](https://github.com/MostlyAdequate/mostly-adequate-guide/blob/master/ch05.md#category-theory) is different as I imagined.

Base on my understanding...
- In category theory, there are only object(dot) and morphism(arrow) with some rules( identity, composition associative).
- In the category of set, dot represent set and arrow represent mathematical function(mapping between sets). 
- In the programmers point of view, the dot represent type(String, Boolean ...) and the arrow represent pure function.

My imagination is like the image showing below.
The group of black arrows are a functions mapping values between types. 
But In the category point of view, we can't open the dot to see what elements inside because it's a dot. I know it's more intuitive to show the elements inside to make it easy to understand. And i agree with that. But I think the types in the each of the circles should be the same.
If I'm wrong, please just let me know.
Have a good day.

![](https://i.imgur.com/u7n2z8X.png)
So I was looking at how the Chapter 13 is going and at the section [Not quite a monoid](https://github.com/MostlyAdequate/mostly-adequate-guide/blob/ch13.md/ch13.md#not-quite-a-monoid) is said that the First monoid can't really be one since it doesn't implement an Identity, but it just so happens that it can implement a Nothing() from Maybe as an empty for itself and be 'concat'ed around. 
This is kind of a workaround for the laws of Monoids if I understood it correctly, so it might be the reason you authors decided to leave First itself as "not quite a monoid" since it needs a little help to be "lifted" from Semigroup into this category.
Sorry if this issue is wrong, I'm doing my best to understand the concepts and laws, had to overclock my brain to understand a few :crying_cat_face: 

Inspired from the [Crocks' docs](https://evilsoft.github.io/crocks/docs/monoids/First.html)