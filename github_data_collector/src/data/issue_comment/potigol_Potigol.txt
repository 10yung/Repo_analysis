O desempenho das fun√ß√µes leia_inteiros e reis_reais √© ruim. Eu testei o problema 2422 do URI usando `leia_inteiros(n)`, onde n pode ser 10‚Åµ. A execu√ß√£o estourou o tempo (5 s). Depois eu alterei o c√≥digo para 

````
c = Lista.mut√°vel(n, 0)
para i de 1 at√© n fa√ßa c[i] := leia_inteiro fim
````
Sugest√£o para alterar as fun√ß√µes leia_inteiros e leia_reais para algo como

````
def leia_inteiros(n: Inteiro): Lista[Inteiro] = {
  val c = Lista.mut√°vel(n, 0)
  for (i <- 1 to n) c(i) = leia_inteiro
  return c
}
Esse modelo de c√≥digo possibilita uma quantidade din√¢mica de n√∫meros a serem trabalhados, atribuindo a quantidade de n√∫meros inseridos em tempo de execu√ß√£o.
A linha comentada gera a sa√≠da de 2 aspas duplas no final do arquivo.
Convertendo com o comando `potigol -d problema-1001.poti` o c√≥digo Potigol para Scala gera `""` no final do arquivo.

Ao usar o URI Online Judge ele n√£o aceita as submiss√µes.

Exemplo abaixo:

```scala
import br.edu.ifrn.potigol.Potigolutil._ ;
import br.edu.ifrn.potigol.Matematica._ ;
$cor=false;



/*Codigo: 1 */
val a,b = leia_inteiro ;
 ;
/*Codigo: 2 */
escreva(p"X = ${{a + b}}") ;
""
```

Ol√° pessoal, 

existe algum documento que explique como criar um novo pacote (_package_) para a linguagem?
Me refiro a possibilidade de adicionar novos m√≥dulos a linguagem assim como foi feito com o [Jerimum](https://github.com/potigol/Jerimum).

Avaliei o `Compilador` que voc√™s criaram e tamb√©m a classe `Eval` (do pacote do Twitter) e pelo que entendi o operador "use" da linguagem Potigol suporta arquivos .poti, .scala e .java, correto?

Como voc√™s j√° criaram algo parecido com o Jerimum, qual deveriam ser os passos necess√°rios para que algu√©m adicione um novo m√≥dulo ao Potigol?

A prop√≥sito, meu objetivo √© adicionar um m√≥dulo "internet" capaz de suportar requisi√ß√µes HTTP üòâ    
Translate documentation to English.
https://potigol.github.io
Revisar a documenta√ß√£o da linguaegm Potigol https://github.com/potigol/potigol.github.io
Atualmente para definir listas mut√°veis podemos usar
``` 
lista = [1,2,3,4,5].mut√°vel
lista[2] := 8
```
ou
```
var lista := [1,2,3,4,5]
lista := lista.altere(2,8)
``` 

O objetivo √© simplificar e unificar em √∫nica op√ß√£o.
```
var lista = [1,2,3,4,5]
lista[2] := 8                  # [1,8,3,4,5]
```

A solu√ß√£o √© usar a√ß√∫car sint√°tico para que uma linha como: 
```
lista[2] := 8
```

Seja reescrita como:
```
lista := lista.altere(2,8)
```

Isto permitir√° criar listas da seguinte forma:
```
var lista := Lista(5, 0)  # [0,0,0,0,0]
para i de 1 at√© 5 fa√ßa
  escreva "Digite o {i}¬∫ n√∫mero"
  lista[i]:= leia_inteiro
fim
escreva lista
```
Para melhorar a facilidade de acesso, seria interessante ter um executor on-line direto no site, junto a um editor simples.
Criar tipos abstratos como uma forma de implementar heran√ßa. Exemplo:

````
tipo abstrato Pessoa
  nome: Texto
  sexo: Caractere
  var email: Texto
fim

tipo Homem: Pessoa
  sexo = "M"
fim

h1 = Homem("Joao", "Joao@gmail.com")
escreva h1.sexo
````