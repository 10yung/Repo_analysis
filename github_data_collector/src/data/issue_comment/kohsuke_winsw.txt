See the last commit.

If CI succeeds, please close #305 as non-reproducible.
Based on #356 

This PR closes unrelated issues that are fixed, invalid or stale.

Closes #46
Closes #148
Closes #211
Closes #250

Fixes #237 
Based on #356 

I'll see if I can eliminate the duplication another day.
Based on #356 

This PR made large changes to two "public" classes. I'm assuming this is used as a console program so API changes are OK?
Closes #88 
Based on #354 

It's unclear to me how to annotate those properties. See suppressed warnings in https://github.com/kohsuke/winsw/commit/31d1d134264e6e2bedfc1659dd8773cfdc82d726, https://github.com/kohsuke/winsw/commit/6d57da2c92fce41cc917c8881dd8391a1b3d8c00.
I have a java program to get the windows logon username.
I have tried this:
System.getProperty("user.name"); 

I have also tried using JNA:
        char[] name = new char[200];
        Secur32.INSTANCE.GetUserNameEx(
                Secur32.EXTENDED_NAME_FORMAT.NameDisplay,
                name,
                new IntByReference(name.length)
        );
        String fullName = new String(name).trim();

Both of these approaches work fine when running as a independent java program, but when I run it as a service, the values are not correct.
Is it because the java program environment is not set correctly?

Thanks

As in title, I would like to be able to send both stdout and stderr to one log file.
Hi, 

I am using winsw to start a spring boot java application in this way  :

<?xml version="1.0" encoding="UTF-8"?>
<service>
    <id>MyApp</id>
    <name>MyApp</name>
    <description>MyApp Windows Service</description>
    <executable>%BASE%\..\jre1.8.0_161\bin\java</executable>
    <arguments>-jar "MyApp.jar" --spring.config.location=%BASE%\..\conf\application.properties</arguments>
    <logmode>rotate</logmode>
</service>

For some reasons, when running Java, winsw is picking up the JAVA_TOOL_OPTIONS env variable. 

Why is that happening ? 
If I add <env name="JAVA_TOOL_OPTIONS" value="" />, and it worked. But is there a more elegant way of preventing winsw from picking up the env variables ? 

Thanks in advance for your help

Sylvain

Regards, 

Sylvain
```
Rotate by time mode
Works like the rotate mode, except that instead of using the size as a threshold, use the time period as the threshold.

This configuration must accompany a nested <pattern> element, which specifies the timestamp pattern used as the log file name.

    <log mode="roll-by-time">
      <pattern>yyyyMMdd</pattern>
    </log>
The syntax of the pattern string is specified by DateTime.ToString(). For example, in the above example, the log of Jan 1, 2013 gets written to myapp.20130101.out.log and myapp.20130101.err.log.
```
setting roll by time , it can not remove old log auto.

```
> ls *.log


    Dir: D:\soft\saml


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----       2019/11/21     21:35          64296 winsw.wrapper.log
-a----        2019/11/5      9:24              0 winsw_20191105.err.log
-a----        2019/11/5      9:24          14185 winsw_20191105.out.log
-a----        2019/11/7     23:18              0 winsw_20191107.err.log
-a----        2019/11/7     23:52         718997 winsw_20191107.out.log
-a----        2019/11/8      4:18              0 winsw_20191108.err.log
-a----        2019/11/8     22:27        1028733 winsw_20191108.out.log
-a----        2019/11/9      8:17              0 winsw_20191109.err.log
-a----        2019/11/9     21:13        1156641 winsw_20191109.out.log
-a----       2019/11/10      5:40              0 winsw_20191110.err.log
-a----       2019/11/10     23:53        1261334 winsw_20191110.out.log
-a----       2019/11/11     21:59              0 winsw_20191111.err.log
-a----       2019/11/11     22:52         175079 winsw_20191111.out.log
-a----       2019/11/12     22:08              0 winsw_20191112.err.log
-a----       2019/11/12     22:48         142602 winsw_20191112.out.log
-a----       2019/11/13     15:19              0 winsw_20191113.err.log
-a----       2019/11/13     22:17         187504 winsw_20191113.out.log
-a----       2019/11/14     20:40              0 winsw_20191114.err.log
-a----       2019/11/14     23:09         898690 winsw_20191114.out.log
-a----       2019/11/15     20:54              0 winsw_20191115.err.log
-a----       2019/11/15     21:59          69008 winsw_20191115.out.log
-a----       2019/11/16      1:31              0 winsw_20191116.err.log
-a----       2019/11/16     21:23         720922 winsw_20191116.out.log
-a----       2019/11/17      8:51              0 winsw_20191117.err.log
-a----       2019/11/18      0:00        1164760 winsw_20191117.out.log
-a----       2019/11/18     21:35              0 winsw_20191118.err.log
-a----       2019/11/18     23:10         933898 winsw_20191118.out.log
-a----       2019/11/19     20:54              0 winsw_20191119.err.log
-a----       2019/11/19     23:12         529236 winsw_20191119.out.log
-a----       2019/11/20     20:23              0 winsw_20191120.err.log
-a----       2019/11/20     22:47         917793 winsw_20191120.out.log
-a----       2019/11/21     21:35              0 winsw_20191121.err.log
-a----       2019/11/21     21:35         566851 winsw_20191121.out.log
```

```
This seems to happen only when calling the "test" command
Instead of using the stopargument exclusively with the stopexecutable it tries to call stopexecutable +  stopargument + stopargument, arguments are suddenly quoted.

config:
```xml
  <executable>java.exe</executable>
  <arguments> -jar agent.jar</arguments>
  <stopargument>-NonInteractive -NoProfile -File C:\temp\stop.ps1</stopargument>
  <stopexecutable>powershell.exe</stopexecutable>
```

on test it tries to run:
`powershell.exe "-NonInteractive -NoProfile -File C:\temp\stop.ps1  -jar agent.jar"`

on normal service stop it seems to work fine:
`powershell.exe -NonInteractive -NoProfile -File C:\temp\stop.ps1`
