Hello,

I am finding that the credentials database is overwritten with the default global values whenever  reload the R studio console, deleting my updates to any users. Is this a common problem and a solution?

Many Thanks,

Kirsten
Excellent package, thank you. Within my Shiny app I'm using the [googleAuthR](https://code.markedmondson.me/googleAuthR/articles/google-authentication-types.html#googleauth-module-example) package to authenticate to Google for API pulls. When I wrap the app with shinymanager I am brought back to the shinymanager login page after authenticating with Google. Then, the Google auth does not transfer back into the session. Any help here would be appreciated.
Great package. I would just like to recommend one more option admin page: export table. This can be handy if I want ot deploy a new version of shiny app on shinyapp.io. If I don't export table I will lose all users.

Additionally, it would be probably better to save data on separate MySQL database, so that user info is separated from app container...
Logout button UI is automatically generated when using `secure_app()`. However, when using `auth_ui()`, it seems like we need to add logout UI manually. Though we can create logout UI using `fab_button()`, it seems like the logging-out logic is not automatically added and we need to write our own server code for logging out.

```
  observeEvent(session$input$logout,{
    session$reload()
  })
```
Is there a built-in or better way to to log out when using `auth_ui()`? 

Thanks.


Custom logout example(adapted from example in `auth_ui()`):
```r
library(shiny)
library(shinymanager)

# data.frame with credentials info
credentials <- data.frame(
  user = c("fanny", "victor"),
  password = c("azerty", "12345"),
  stringsAsFactors = FALSE
)

# app
ui <- fluidPage(
  # authentication module
  auth_ui(id = "auth"),
  fab_button(
    actionButton(
      inputId = "logout",
      label = NULL,
      tooltip = "Logout",
      icon = icon("sign-out")
    )
  )
  
)

server <- function(input, output, session) {
  
  # authentication module
  auth <- callModule(
    module = auth_server,
    id = "auth",
    check_credentials = check_credentials(credentials)
  )
  
  output$res_auth <- renderPrint({
    reactiveValuesToList(auth)
  })
  
  observeEvent(session$input$logout,{
    session$reload()
  })
  
}

shinyApp(ui, server)
```
First, thanks for this fantastic package -- it's almost magical!

I have a small documentation-related suggestion. The README on the front page demonstrates *creating* an encrypted sqlite credential store, but it stops short of demonstrating how `shinymanager` expects the app developer to incorporate the encrypted database into the app. I think I've pieced it together from the help documentation in `?db-crypted`, but that documentation also doesn't feature a full app. It would be great for the documentation to recommend an easy path and demo the full use case.
Great package!

Do you have plans to add user signup capability as well?
Would be great if users could sign up and are allowed to sign in once they verify their email or an admin flags them as approved.