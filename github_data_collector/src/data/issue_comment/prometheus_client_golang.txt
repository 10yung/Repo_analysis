I have recently realized while working on a [small testing tool](https://github.com/observatorium/up/blob/89757a581729932725d5ca72106cc77657b403e9/main.go#L296-L343), one cannot specify full endpoint URLs for the API. I had to use other available APIs and copy over encoding flow as a workaround. (I hope I haven't missed any other existing way to do this)

Endpoints are defined as constants,
https://github.com/prometheus/client_golang/blob/803ef2a759d7caaaa0de58e3815f1be4c8b5a42a/api/prometheus/v1/api.go#L119-L139

and exposed public APIs use those
https://github.com/prometheus/client_golang/blob/803ef2a759d7caaaa0de58e3815f1be4c8b5a42a/api/prometheus/v1/api.go#L661-L662

Since now we have other projects such as [Thanos](https://thanos.io/), [Context](https://cortexmetrics.io/)(or one can put a proxy in front of these APIs) that implements the same API, I'd like to have the ability to configure endpoints to use client library against compatible APIs.

I'm happy to contribute to the project to make this happen.

@beorn7 

cc @squat 
OpenMetrics makes the `..._info` metric pattern explicit as its own type. In v1, we can add the type and emulate it for the existing Prometheus format by creating the usual info metrics with value 1.

OpenMetrics has the option of marking creation times of metrics. As this doesn't happen as part of some 1st class metadata but as an additional time series with a magic suffix `_created`, we cannot just transparently support it, but have to make it configurable: Either don't use them at all or (opt in) use them but error out if a name collision happens.
OpenMetrics offers units as part of the metadata. We can easily add them in the various `...Opts` next to `Help`. They would only be used if OpenMetrics is negotiated as the output format (but they will also implicitly show up in protobuf, cf. https://github.com/prometheus/common/issues/214 ).
OpenMetrics names counters without the `_total` but adds the suffix in the metricname.

We need to come up with certain compatibility modes, configurable somewhere.

TODO: Copy the thoughts from me head into this issue.
Since v1 is using metrics.proto as its internal data model, we have to update it to include exemplars. See https://github.com/prometheus/common/issues/214 for details.

This issue is more about the interface part. Histograms and Counters need a good way of adding an exemplar connected to an `Observe`, `Inc`, or `Add`, without adding much cruft to the interfaces.
**TL;DR**: Prometheus counters use atomic primitives, which is slow. If I didn't do something stupid, the buffered counter implementation gives potenial speedup of 200x in hot loops across multiple goroutines, and up to 6x speedup for "local" use. The buffered version approaches "you can't do it faster" version.

Also may apply to other things like gauges. 

Full version plus benchmarks: https://github.com/ppanyukov/go-bench/tree/master/counter

 


{"duration":9708394250,"level":"info","msg":"Metrics updated","time":"2019-10-30T11:57:42+08:00"}
2019/10/30 11:57:42 http: superfluous response.WriteHeader call from github.com/prometheus/client_golang/prometheus/promhttp.httpError (http.go:306)



 

https://github.com/prometheus/prometheus/issues/5085 demonstrated problems if the compression middleware from the echo framework was used, see https://github.com/labstack/echo/blob/master/middleware/compress.go .

The `promhttp.Handler` his its own gzip handling. Perhaps it's inevitable to then not work with other middlewares handling compression (which then should be clearly documented). But perhaps there is also something middleware-unfriendly that could be fixed in `promhttp.Handler`.

Purpose of this issue is to investigate how `promhttp.Handler` interacts with certain middlewares (echo framework, but also others, e.g. the NYTimes gzip handler, and also find out if problems happen with other, non-compressing middlewares). In v1, we might be able to fix problems, if there are any in the handler. For v2, we might consider separating out compression if there are established middlewares handling compression nicely. (On the other hand, the result could as well be that it is impossible to handle compression as a middleware without problems in certain situations, and thus handling it in the current way might be just right.)
The [series call](https://prometheus.io/docs/prometheus/latest/querying/api/#finding-series-by-label-matchers) doesn't *require* a time, it would be nice if we had some mechanism in the go API to *not* set a time. I had opened https://github.com/prometheus/client_golang/pull/615 towards this, but I'm not sure this is a great approach, maybe we instead make the `time.Time` pointers?