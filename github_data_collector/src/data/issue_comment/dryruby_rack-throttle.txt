Bumps [rack](https://github.com/rack/rack) from 2.0.7 to 2.0.8.
<details>
<summary>Changelog</summary>

*Sourced from [rack's changelog](https://github.com/rack/rack/blob/master/CHANGELOG.md).*

> # Changelog
> 
> All notable changes to this project will be documented in this file. For info on how to format all future additions to this file please reference [Keep A Changelog](https://keepachangelog.com/en/1.0.0/).
> 
> ## Unreleased
> 
> _Note: There are many unreleased changes in Rack (`master` is around 300 commits ahead of `2-0-stable`), and below is not an exhaustive list. If you would like to help out and document some of the unreleased changes, PRs are welcome._ 
> 
> ### Added
> 
> ### Changed
> 
> - Use `Time#httpdate` format for Expires, as proposed by RFC 7231. ([@&#8203;nanaya](https://github.com/nanaya))
> - Make `Utils.status_code` raise an error when the status symbol is invalid instead of `500`.
> - Rename `Request::SCHEME_WHITELIST` to `Request::ALLOWED_SCHEMES`.
> - Make `Multipart::Parser.get_filename` accept files with `+` in their name.
> - Add Falcon to the default handler fallbacks. ([@&#8203;ioquatix](https://github.com/ioquatix))
> - Update codebase to avoid string mutations in preparation for `frozen_string_literals`. ([@&#8203;pat](https://github.com/pat))
> - Change `MockRequest#env_for` to rely on the input optionally responding to `#size` instead of `#length`. ([@&#8203;janko](https://github.com/janko))
> - Rename `Rack::File` -> `Rack::Files` and add deprecation notice. ([@&#8203;postmodern](https://github.com/postmodern)).
> 
> ### Removed
> 
> ### Documentation
> 
> - Update broken example in `Session::Abstract::ID` documentation. ([tonytonyjan](https://github.com/tonytonyjan))
> - Add Padrino to the list of frameworks implmenting Rack. ([@&#8203;wikimatze](https://github.com/wikimatze))
> - Remove Mongrel from the suggested server options in the help output. ([@&#8203;tricknotes](https://github.com/tricknotes))
> - Replace `HISTORY.md` and `NEWS.md` with `CHANGELOG.md`. ([@&#8203;twitnithegirl](https://github.com/twitnithegirl))
> - Backfill `CHANGELOG.md` from 2.0.1 to 2.0.7 releases. ([@&#8203;drenmi](https://github.com/Drenmi))
</details>
<details>
<summary>Commits</summary>

- [`e7ee459`](https://github.com/rack/rack/commit/e7ee459546d217f32afc83e0b168c5eb9f95d784) Bumping version
- [`f1a79b2`](https://github.com/rack/rack/commit/f1a79b208c4ea877420beee62646e0b146402bd0) Introduce a new base class to avoid breaking when upgrading
- [`5b1cab6`](https://github.com/rack/rack/commit/5b1cab667270d7ad1a4d2088adf5ff4eb9845496) Add a version prefix to the private id to make easier to migrate old values
- [`1e96e0f`](https://github.com/rack/rack/commit/1e96e0f197777458216bb3dfdbcce57a0bbba0c5) Fallback to the public id when reading the session in the pool adapter
- [`3ba123d`](https://github.com/rack/rack/commit/3ba123d278f1085ba78fc000df954e507af2d622) Also drop the session with the public id when destroying sessions
- [`6a04bbf`](https://github.com/rack/rack/commit/6a04bbf6b742c305d3a56f9bd6242e6c943cc2ad) Fallback to the legacy id when the new id is not found
- [`dc45a06`](https://github.com/rack/rack/commit/dc45a06b339c707c1f658c123ec7216151878f7a) Add the private id
- [`73a5f79`](https://github.com/rack/rack/commit/73a5f79f6854eed81ecc3e5fb9f8154e967ccc49) revert conditionals to master
- [`4e32262`](https://github.com/rack/rack/commit/4e322629e0c6698c75a3fb541a42571f8543c34c) remove NullSession
- [`1c7e3b2`](https://github.com/rack/rack/commit/1c7e3b259f0741c869dcfbabeb3e0670c4d3f848) remove || raise and get closer to master
- Additional commits viewable in [compare view](https://github.com/rack/rack/compare/2.0.7...2.0.8)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rack&package-manager=bundler&previous-version=2.0.7&new-version=2.0.8)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/dryruby/rack-throttle/network/alerts).

</details>
This is a really large conceptual PR so I'm going to let this sit for a while to gather feedback!

RackAttack has much more active maintenance & is more mature. I believe we should nudge those looking to do rate limiting in rack apps that way to be the most helpful we can be!
Hello All!

I wanted to open discussion to see if RackAttack could serve the wonderful people using this lovely gem a bit better. https://github.com/kickstarter/rack-attack

It seems to hame more features/functionality/community than here at rack-throttle & I'm thinking we may want to give up the throne to help peoples looking for this functionality & have come here :)

@bendiken @brandonhilkert + any others, thoughts?
gem 'rack-throttle', '~> 0.4.2'

when i run i am getting this error, can you please provide solution for this


/data/project/vendor/bundle/ruby/2.2.0/gems/rack-throttle-0.4.2/lib/rack/throttle/time_window.rb:3:in `<module:Throttle>': uninitialized constant Rack::Throttle::Limiter (NameError)
from /data/project/vendor/bundle/ruby/2.2.0/gems/rack-throttle-0.4.2/lib/rack/throttle/time_window.rb:1:in `<module:Rack>'
from /data/project/vendor/bundle/ruby/2.2.0/gems/rack-throttle-0.4.2/lib/rack/throttle/time_window.rb:1:in `<top (required)>'
from /data/project/vendor/bundle/ruby/2.2.0/gems/backports-3.6.8/lib/backports/std_lib.rb:9:in `require'
from /data/project/vendor/bundle/ruby/2.2.0/gems/backports-3.6.8/lib/backports/std_lib.rb:9:in `require_with_backports'
from /data/project/lib/app/rate_limiter/request_throttle.rb:1:in `<top (required)>'
from /data/project/vendor/bundle/ruby/2.2.0/gems/backports-3.6.8/lib/backports/std_lib.rb:9:in `require'
from /data/project/vendor/bundle/ruby/2.2.0/gems/backports-3.6.8/lib/backports/std_lib.rb:9:in `require_with_backports'
from config.ru:11:in `block in <main>'
from /data/project/vendor/bundle/ruby/2.2.0/gems/rack-1.5.5/lib/rack/builder.rb:55:in `instance_eval'
from /data/project/vendor/bundle/ruby/2.2.0/gems/rack-1.5.5/lib/rack/builder.rb:55:in `initialize'
from config.ru:1:in `new'
from config.ru:1:in `<main>'
from /data/project/vendor/bundle/ruby/2.2.0/gems/unicorn-4.6.3/lib/unicorn.rb:48:in `eval'
from /data/project/vendor/bundle/ruby/2.2.0/gems/unicorn-4.6.3/lib/unicorn.rb:48:in `block in builder'
from /data/project/vendor/bundle/ruby/2.2.0/gems/unicorn-4.6.3/lib/unicorn/http_server.rb:722:in `call'
from /data/project/vendor/bundle/ruby/2.2.0/gems/unicorn-4.6.3/lib/unicorn/http_server.rb:722:in `build_app!'
from /data/project/vendor/bundle/ruby/2.2.0/gems/unicorn-4.6.3/lib/unicorn/http_server.rb:140:in `start'
from /data/project/vendor/bundle/ruby/2.2.0/gems/unicorn-4.6.3/bin/unicorn:126:in `<top (required)>'
from /data/project/vendor/bundle/ruby/2.2.0/bin/unicorn:23:in `load'
from /data/project/vendor/bundle/ruby/2.2.0/bin/unicorn:23:in `<main>'
It seems like the per-second / per-minute / etc. keys that `rack-throttle` creates in Redis are permanent. We run a high traffic site, which means that we're going to end up with a lot of pollution and wasted space in Redis. Ideally, there should be some way for these keys to expire.

When throttling, it might be more accurate to return the following status code:

> **429** Too Many Requests
> 
> The user has sent too many requests in a given amount of time.

This is [apparently](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429) intended for use with rate limiting schemes.

I realise that defaulting to this error code would be a backwards incompatible, but I think this should be documented. I can provide a PR updating the README.

Related: #5 (which changed the default status code, rather than simply documenting it)

Is it possible to change the response to be totally custom (JSON, for example) like it is in [redis-throttle](https://github.com/andreareginato/redis-throttle#http-response-codes-and-headers)?

I'm seeing what looks like a concurrency issue in a custom Limiter based on rack-throttle.

But I'm not 100% sure, so thought I'd ask issue here.

Specifically, the retrieval and storage of count values in time_window (for example) is not atomic, so it is possible for two simultaneous increments to occur but one of the increments will not be recorded.

This is what I'm seeing in my logs:
I, [2014-08-14T16:49:04.491000 #5547]  INFO -- : Rate limiting: 6061dcae08b043d9889169bd9f153fdc-d10de8798db7ced7b5850c6d7000f339:2014-08-14T16 count = 11/15 => allowed? true
I, [2014-08-14T16:49:05.201000 #5547]  INFO -- : Rate limiting: 6061dcae08b043d9889169bd9f153fdc-d10de8798db7ced7b5850c6d7000f339:2014-08-14T16 count = 12/15 => allowed? true
I, [2014-08-14T16:49:05.799000 #5547]  INFO -- : Rate limiting: 6061dcae08b043d9889169bd9f153fdc-d10de8798db7ced7b5850c6d7000f339:2014-08-14T16 count = 13/15 => allowed? true
I, [2014-08-14T16:49:05.806000 #5547]  INFO -- : Rate limiting: 6061dcae08b043d9889169bd9f153fdc-d10de8798db7ced7b5850c6d7000f339:2014-08-14T16 count = 13/15 => allowed? true
I, [2014-08-14T16:49:07.001000 #5547]  INFO -- : Rate limiting: 6061dcae08b043d9889169bd9f153fdc-d10de8798db7ced7b5850c6d7000f339:2014-08-14T16 count = 14/15 => allowed? true
I, [2014-08-14T16:49:08.630000 #5547]  INFO -- : Rate limiting: 6061dcae08b043d9889169bd9f153fdc-d10de8798db7ced7b5850c6d7000f339:2014-08-14T16 count = 15/15 => allowed? true
I, [2014-08-14T16:49:10.463000 #5547]  INFO -- : Rate limiting: 6061dcae08b043d9889169bd9f153fdc-d10de8798db7ced7b5850c6d7000f339:2014-08-14T16 count = 16/15 => allowed? false

The cache is a remote redis, being accessed via Ohm. Less than optimal, but I'm picking up someone else's code.

Also this is running in JRuby, and there are both hourly and daily limits in play.

The ruby threading model is not my forte, so I might be missing something obvious.

I may be missing something but it seems strange that 

```
 def allowed?(request)
      t1 = request_start_time(request)
      t0 = cache_get(key = cache_key(request)) rescue nil
      allowed = !t0 || (dt = t1 - t0.to_f) >= minimum_interval
      begin
        cache_set(key, t1)
        allowed
      rescue => e
        # If an error occurred while trying to update the timestamp stored
        # in the cache, we will fall back to allowing the request through.
        # This prevents the Rack application blowing up merely due to a
        # backend cache server (Memcached, Redis, etc.) being offline.
        allowed = true
      end
    end
```

in interval.rb doesn't call the super implementation in limiter.rb

```
def allowed?(request)
  case
    when whitelisted?(request) then true
    when blacklisted?(request) then false
    else true # override in subclasses
  end
end
```
