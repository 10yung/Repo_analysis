Can u pls add a Win32 version or post the source code so I can compile it to Win32 manually?
It renders as a black window and my mouse cursor is centered. I installed glew AS WELL as adding the files to the same directory. Please help.
Hi, the following code allows building and running this cute little engine under Linux (using SDL2 as backend). Some features are not yet there (fullscreen switching, cursor confining), I plan to add them asap. Please merge if you wish! :-)
I am using pre-built exe. 
The more I use it the more it takes ram. The ram usage is increasing rapidly. First level it's just takes ~50 mb per thing, The next levels starts to take hundreds (100+) ram. After few changes I got ~1GB. Last ram usage was ~1.8 GB and my laptop was frozen. I had to "hard shutdown" it (hold power button for some time).
My laptop:
64x bit Win 8.1 4gb ram.
Hello folks. I'm an expert in cellular automatons i.e. conway game of life and the similar. http://www.conwaylife.com/wiki/Michael_Simkin - Some background about me.

Anyway I wonder how complex would it be to also fit inside your reality some cellular automaton? but where the longer part would actually have more squares. How would it influence the automaton? Is there even a point in doing that? 

And another question how hard would it be to implement inside Roblox? https://www.roblox.com/home. 








Hi, 

I am new to this so apologies if I'm just missing something simple. I keep getting the warning and error messages below no matter what I try. Do you know what I need to change? Thanks

warning LNK4098: defaultlib 'LIBCMT' conflicts with use of other libs; use /NODEFAULTLIB:library
fatal error LNK1158: cannot run 'rc.exe'
So when i load the Engine it seems to have a rendering problem i don't know whats causing it My computers sepces are:

Win10(64 bit)
Amd A8-741 APU with AMD radeon R5
8GB of ram
(its a laptop)

i've also included an image of what it looks like

![1-nee](https://user-images.githubusercontent.com/46512055/51081263-80f7e000-16b9-11e9-93fc-d3c1382e9c74.PNG)


Hey
I spent a few hours trying to come up with a quick WebGL port using emscripten
I managed to get it working fine without the occlusion queries by setting engine.occlusionCullingSupported to 0
Here: take a look:
https://shooshx.github.io/NonEuclidean/emscripten/page.html

That worked fine but of course the rendering was extremely slow.
Trying to turn on occlusion queries didn't produce the desire result. the portals would simply render nothing.
I was able to determine that the problem was the the occlusion queries simple never return "1"
That's because a difference between WebGL and OpenGL which is summed in this paragraph from the WebGL2 standard:

> In order to ensure consistent behavior across platforms, queries' results must only be made available when the user agent's event loop is not executing a task. In other words:
> A query's result must not be made available until control has returned to the user agent's main loop.
> Repeatedly fetching a query's QUERY_RESULT_AVAILABLE parameter in a loop, without returning control to the user agent, must always return the same value.

In your recursive code you assume that getting GL_QUERY_RESULT will flush the rendering pipeline and get the result, as OpenGL does. WebGL however does not do that until the frame code call returns control to the browser.

So what's the chance you'll want to try to restructure your code so that Render is not explicitly recursive so it would be possible to return control between queries?

Another option I was thinking about is to try to simulate occlusion queries using glReadPixels which is synchronous. I don't expect this to be very fast though.
Since it is already written using OpenGL, would it be possible to have a build for linux and Mac?