IE Edge doesn't support the `File` constructor, so I'm having immense difficulty in being able to set the name of my blob for upload.

First I used the third parameter of the `FormData`:

```javascript
const a = new FormData();
a.append('photo', photoBlob, 'photo.png');
```

However it turns out that Edge ignores the third parameter as that simply attempts to convert the `Blob` into a `File` like so:

```javascript
const b = new File([photoBlob], 'photo.png');
```

I've tried all sorts of dubious approaches &ndash; such as assigning `name` to the `Blob` object, but no approaches change the `name` unless the object is **literally** a `File` object.

How have other people tackled this issue? 
I've seen many people complaining about issues when uploading files with React Native. The best solution today is to use `fetch()` which supports the blob generated in React Native, but it lacks progress. Libs such as `rn-fetch-blob` can't be used in Expo since you'd need to eject.

Many libraries for React Native such as Firebase have upload method that has support for the React Native blob and it would be a great addition to Axios as well.

What I'd like to do is basically:

`await Axios.post(url, reactNativeBlob, ...)`

I've tried different methods with Axios, e.g. by creating FormData with the file details, such as uri, name and type, but then Axios tries to convert the file to base64 and upload it that way, which isn't what I want.

I don't know how React Native blobs are different from web blobs, but I'm really hoping that this could be supported in Axios.
**Describe the bug**
set axios.default.retry = 4 is not valid

```js
axios.defaults.retry = 4
axios.defaults.retryDelay = 2000
```

**Expected behavior**
axios.defaults.retry =4; axios.defaults.retryDelay = 2000   is in config object.

**Environment:**
 - Axios Version [0.19.0]

**Additional context/Screenshots**
Add any other context about the problem here. If applicable, add screenshots to help explain.

I keep getting this response when using Axios to get an access token from Instagram.

My Code:
`async function mintAuthToken(req: any): Promise<string> {
    const base = 'https://api.instagram.com/oauth/access_token';

    const queryParams = { 
      client_id: app_id,
      client_secret: app_secret,
      grant_type: 'authorization_code',
      redirect_uri: redirect_uri,
      code: req.query.code
  }

  const endpoint = base + qs.stringify( queryParams )

    const login = await axios.post(endpoint, {},{headers: {'content-type': 'application/json'}}
    );
    console.log(login);
    const accessToken = login.data.access_token;
    const instagramUserID = login.data.user.id;
    const profilePic = login.data.user.profile_picture;
    const userName = login.data.user.full_name;
    console.log(userName);
    const firebaseToken = await createFirebaseAccount(instagramUserID, userName, profilePic, accessToken);

    return firebaseToken;

};`

The full error:
`{ status: 400,
  statusText: 'Bad Request',
  headers: 
   { 'content-type': 'text/html; charset=utf-8',
     vary: 'Accept-Language',
     'content-language': 'en',
     date: 'Fri, 17 Jan 2020 22:16:38 GMT, Fri, 17 Jan 2020 22:16:38 GMT',
     'strict-transport-security': 'max-age=31536000',
     'cache-control': 'private, no-cache, no-store, must-revalidate',
     pragma: 'no-cache',
     expires: 'Sat, 01 Jan 2000 00:00:00 GMT',
     'x-frame-options': 'SAMEORIGIN',
     'content-security-policy': 'report-uri https://www.instagram.com/security/csp_report/; default-src \'self\' https://www.instagram.com; img-src https: data: blob:; font-src https: data:; media-src \'self\' blob: https://www.instagram.com https://*.cdninstagram.com https://*.fbcdn.net; manifest-src \'self\' https://www.instagram.com; script-src \'self\' https://instagram.com https://www.instagram.com https://*.www.instagram.com https://*.cdninstagram.com wss://www.instagram.com https://*.facebook.com https://*.fbcdn.net https://*.facebook.net \'unsafe-inline\' \'unsafe-eval\' blob:; style-src \'self\' https://*.www.instagram.com https://www.instagram.com \'unsafe-inline\'; connect-src \'self\' https://instagram.com https://www.instagram.com https://*.www.instagram.com https://graph.instagram.com https://*.graph.instagram.com https://*.cdninstagram.com https://api.instagram.com wss://www.instagram.com wss://edge-chat.instagram.com https://*.facebook.com https://*.fbcdn.net https://*.facebook.net chrome-extension://boadgeojelhgndaghljhdicfkmllpafd blob:; worker-src \'self\' blob: https://www.instagram.com; frame-src \'self\' https://instagram.com https://www.instagram.com https://staticxx.facebook.com https://www.facebook.com https://web.facebook.com https://connect.facebook.net https://m.facebook.com; object-src \'none\'; upgrade-insecure-requests',
     'x-content-type-options': 'nosniff',
     'x-xss-protection': '0',
     'x-aed': '15',
     'access-control-expose-headers': 'X-IG-Set-WWW-Claim',
     'set-cookie': 
      [ 'ig_did=D9E1610B-B50C-4A35-9B7B-6BF0C06AE976; Domain=.instagram.com; expires=Mon, 14-Jan-2030 22:16:38 GMT; HttpOnly; Max-Age=315360000; Path=/; Secure',
        'rur=FTW; Domain=.instagram.com; HttpOnly; Path=/; Secure' ],
     'x-fb-trip-id': '917726464',
     connection: 'close',
     'content-length': '11' },
  config: 
   { url: 'https://api.instagram.com/oauth/access_tokenclient_id=client id&client_secret=secret&grant_type=authorization_code&redirect_uri=redirect&code=somecode',
     method: 'post',
     data: '{}',
     headers: 
      { Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'axios/0.19.0',
        'Content-Length': 2 },
     transformRequest: [ [Function: transformRequest] ],
     transformResponse: [ [Function: transformResponse] ],
     timeout: 0,
     adapter: [Function: httpAdapter],
     xsrfCookieName: 'XSRF-TOKEN',
     xsrfHeaderName: 'X-XSRF-TOKEN',
     maxContentLength: -1,
     validateStatus: [Function: validateStatus] },
  request: 
   ClientRequest {
     domain: 
      Domain {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        members: [Array] },
     _events: 
      { socket: [Function],
        abort: [Function],
        aborted: [Function],
        error: [Function],
        timeout: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 6,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'api.instagram.com',
        npnProtocol: undefined,
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 9,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: 'api.instagram.com',
        _readableState: [Object],
        readable: true,
        domain: [Object],}`

**Is your feature request related to a problem? Please describe.**
In our node app, we find out it has a similar issue with #1200. we set the timeout of axios to 200 ms. some timeout error was found in our log while the server endpoint response time was within 200ms

**Describe the solution you'd like**
expect timeout error not happen. after looked the code.  
```
// Handle request timeout
    if (config.timeout) {
      timer = setTimeout(function handleRequestTimeout() {
        req.abort();
        reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', req));
      }, config.timeout);
    }
   ....
    // Send the request
    if (utils.isStream(data)) {
      data.on('error', function handleStreamError(err) {
        reject(enhanceError(err, config, null, req));
      }).pipe(req);
    } else {
      req.end(data);
    }
```

I suspect that requests and timers are not activated in sync manner. maybe we can trigger 
timeout in the `req.end` callback or pipe finish callback.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

introduction ï¼š https://github.com/axios/axios/issues/2509#issue-515990883
The error is not catched and not run debugger... But when register debugger interceptor.request first, and then register other interceptor.request to throw new Error, the debugger is triggered. Can you tell me why? what wrong things with i trying?

```javascript
// demo
axios.interceptors.request.use(
  () => {
    // throw new Error('My error')
  },
  () => {
  	debugger
  }
)
axios.interceptors.request.use(function (config) {
    // Do something before request is sent
    throw new Error('My error')
    return config;
  }, function (error) {
    // Do something with request error
    return Promise.reject(error);
  });

// axios code
// Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }
```
thanks for your answer!
i use headless (e.g. puppeteer-core) or python 's requests could get the result (result code 200)


with axios, 

`
let cookieJar = new tough.CookieJar();
let instance = await axios.create({
	jar:cookieJar,
	withCredentials: true,
	httpsAgent: new https.Agent({ rejectUnauthorized: false, requestCert: true, keepAlive: true }),
	headers: {
		"user-agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36",
	}
});

let res = await instance.get(baseUri);

instance.defaults.headers['referer'] = 
.........//set the headers
instance.defaults.headers.Cookie = res.headers['set-cookie'];

res = await instance.post(`${baseUri}/${postUrl}`, ....

`

the result always get 404

after compare the results that i successed with python code, different session has a different token value. 

so i question is: is instance simulate to http 's session?

if not, the token must be change when i invoke instance.post()

thanks
Fix for #2670 
following [XSS Cheatsheet](https://owasp.org/www-community/xss-filter-evasion-cheatsheet)
also fixed JavaScript string problem in #2646 #2663 only preventing "javascript:"

It's impossible for current simple regex to prevent all kind of XSS attacks. But I tried to prevent most frequent & famous events for attacking, without saying no to "only=true"'.

My opinion is, although it is good to prevent XSS by checking URL, normal users should not suffer from this function. Current regex is still too loose.


**Describe the bug**
Function [`isValidXss`](https://github.com/axios/axios/blob/master/lib/helpers/isValidXss.js) works incorrectly.

**To Reproduce**
```js
// I just copy & paste the function declaration
function isValidXss(requestURL) {
  var xssRegex = /(\b)(on\w+)=|javascript|(<\s*)(\/*)script/gi;
  return xssRegex.test(requestURL);
};

// Calling this will result in `true`
isValidXss('https://www.somedomain.com?only=true')
```

**Expected behavior**
I expect the previous function call to result in false. I see no XSS attack in there.

**Environment:**
 - Axios Version 0.19.1


Allow baseURL to contain query parameters (ie don't add / in this case)
#2668 