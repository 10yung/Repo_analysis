I tracked down the reason why Excel was not loading my XlsxWriter spreadsheet. Excel was reporting a table error or simply hanging. Once I unzipped the .xlsx file and looked at the XML, I could see that the table had zero rows and was named. I changed the Python program to not output tables of zero rows. That fixed the issue. I believe I also saw this behavior in C# some years back.

My expectations are that XlsxWriter will not emit incompatible Excel XML. I suppose the issue is a missing error check for zero rows in XlsxWriter.
I need to produce a spreadsheet where cells contain long numerical strings, representing object IDs.

If a value is added to the cell as an `int`, precision is lost and the value is shown with scientific notation.  Eg `12345678901234567890` is stored as `12345678901234500000` and is rendered as `1.23457E+19`.

If a value is added to the cell as a `str`, then we avoid the precision problems, but Excel displays a warning about a number being stored as text.

![image](https://user-images.githubusercontent.com/28734/71676729-e0427a80-2d78-11ea-86e1-1d33895637e8.png)

My current workaround is to hack `Worksheet._assemble_xml_file` so that it adds XML like the following:

```
  <ignoredErrors>
    <ignoredError sqref="A:A" numberStoredAsText="1"/>
    <ignoredError sqref="D:D" numberStoredAsText="1"/>
  </ignoredErrors>
```

I've found a difference in how XlsxWriter behaves when inserting charts into hidden columns. In XlsxWriter version 1.1.5, the chart x_offsets are honoured, but starting in version 1.1.6 they aren't and the charts are drawn on top of each other if the column the charts is being inserted into is hidden.

I am using Python 2.7.11

Here is some code that demonstrates the problem:

```python

import xlsxwriter

workbook = xlsxwriter.Workbook('chart.xlsx')
worksheet = workbook.add_worksheet()

# Write some data to add to plot on the chart.
data = [
    [1, 2, 3, 4, 5],
    [2, 4, 6, 8, 10],
    [3, 6, 9, 12, 15],
]

worksheet.write_column('A1', data[0])
worksheet.write_column('B1', data[1])
worksheet.write_column('C1', data[2])

# Hide column A
worksheet.set_column(0, 0, 10, options={'hidden': True})

# Add a chart
chart = workbook.add_chart({'type': 'bar'})
chart.add_series({'values': '=Sheet1!$B$1:$B$5',
        'categories': '=Sheet1!$A1$1:$A:$5',
        'data_labels': {'value': True},
        'gap': 10})
chart.set_title({'name': 'Chart 1'})
chart.set_size({'width': 300})

# Insert the chart into the worksheet.
worksheet.insert_chart('A7', chart, {'x_offset': 20, 'y_offset': 5})

chart = workbook.add_chart({'type': 'bar'})
chart.add_series({'values': '=Sheet1!$C$1:$C$5',
        'categories': '=Sheet1!$A1$1:$A:$5',
        'data_labels': {'value': True},
        'gap': 10})
chart.set_title({'name': 'Chart 2'})
chart.set_size({'width': 300})
worksheet.insert_chart('A7', chart, {'x_offset': 400, 'y_offset': 5})

workbook.close()
```

Attached are the output files generated with XlsxWriter 1.1.5 and 1.1.6. The behaviour of 1.2.6 is the same as 1.1.6.
[chart-1.1.5.xlsx](https://github.com/jmcnamara/XlsxWriter/files/3879635/chart-1.1.5.xlsx)
[chart-1.1.6.xlsx](https://github.com/jmcnamara/XlsxWriter/files/3879637/chart-1.1.6.xlsx)


I wrote and maintain 3 libraries for writing Xlsx files in 3 different programming languages with more or less the same APIs: [Excel::Writer::XLSX][1] in Perl, [XlsxWriter][2] in Python and [Libxlsxwriter][3] in C. (Note 1)

New features get added to the Perl version first, then the Python version and then the C version. As such a feature request has to be implemented 3 times, with tests and documentation. The Perl and Python versions are almost completely feature compatible. The C version is somewhat behind the others.

This document gives a broad overview of features that are planned to be implemented, in order.

1. Bugs. These have the highest priority. (Note 2)
2. ~~Add user defined types to the write() method in XlsxWriter. #631~~ **Done**.
3. ~~Add hyperlinks to images in Excel::Writer::XLSX [Issue 161][4],  fix it in the Python version, and add it to the C version.~~ **Done**
4. Learn the phrygian dominant mode in all keys.
5. ~~Fix the issue where duplicate images aren't removed/merged. #615 In Python, Perl and C versions.~~ **Done**
6. ~~Add support for comments to the C version https://github.com/jmcnamara/libxlsxwriter/issues/38.~~ **Done** 
7. Add support for object positioning to the C version.
8. Add support for user defined chart data labels. #343 This is the most frequently requested feature across all the libraries.
9. Learn the altered scale in all keys.
10. Implement missing features in the C library.
11. Other frequently requested, and feasible, features, in all 3 versions.

Notes:

1. I also wrote a version in Lua, and two other Perl versions (for older Excel file formats) that I no longer actively maintain. I wrote, and open sourced, the first version in January 2000.
2. Some avoidable bugs have lower priority.


[1]: https://github.com/jmcnamara/excel-writer-xlsx
[2]: https://github.com/jmcnamara/XlsxWriter
[3]: https://github.com/jmcnamara/libxlsxwriter
[4]: https://github.com/jmcnamara/excel-writer-xlsx/issues/161

While adding text to chart title, natively in Excel, some string elements could be formatted differently, despite 'general' format of the chart title, eg. while having regular font, some letters can be italic/bold, etc. Is this feature somewhere hidden in existing module or taken into consideration for development?
Please add support for richt text formatting as in [`write_rich_string`](https://xlsxwriter.readthedocs.io/worksheet.html#write_rich_string) for cell comments ([`write_comment`](https://xlsxwriter.readthedocs.io/working_with_cell_comments.html)). This is not covered in the current implementation, where you can set some basic formatting properties (like font size and background color) for the entire comment, but not for parts of it.

Use case: I would like to highlight certain portions of a long comment by changing formatting properties like bold, italic and font color.
Hi,  
I am trying to put a svg file into the excel file but it seems svgs are not supported.  

I haven't found any workaround. Excel does support svg so it would be cool to get this feature.  

```
  File "C:\Users\800xAAdmin\AppData\Local\Programs\Python\Python37\lib\site-packages\xlsxwriter\workbook.py", line 1204, in _get_image_properties
    "%s: Unknown or unsupported image file format." % filename)
xlsxwriter.exceptions.UnsupportedImageFormat: data/svg/Drive.svg: Unknown or unsupported image file format.
```


This commit adds the optional argument `view` to `Worksheet.set_page_view(self, view="pageLayout")` to enable the user to select other page views such as `"pageBreakPreview"`.

This commit does not change the API in any way. Two test functions have been added and the documentation was updated.

Fixes #575 
The function `Worksheet._write_sheet_view(self)` is used to create `sheetView` elements together with the specified attributes. One of these attributes is `view=...`, which can be set to `view="pageLayout"` with the function `Worksheet.set_page_view(self)`. This would result in something like:

```xml
<sheetViews>
    <sheetView view="pageLayout" workbookViewId="0"/>
</sheetViews>
```

However, there is another view type supported by Microsoft Excel and its competitors which is called `pageBreakPreview`. It would be desirable to be able to choose between `view="pageLayout"`  and `view="pageBreakLayout"` by telling  `Worksheet.set_page_view(self)` which one to use.

Therefore, an optional argument defaulting to `view="pageLayout"` should be added to replace the simple on / off mechanism that is currently implemented.


# The Problem
I was tracing a bizarre failure distant from the true cause when I discovered at `utility.py:15`

    def xl_rowcol_to_cell(row, col, row_abs=False, col_abs=False):
        if row < 0:
            warn("Row number %d must be >= 0" % row)
            return None
        # ... etc ...
        return col_str + row_abs + str(row)

which seems innocent enough -- don't return anything if nothing can be made of the inputs -- but later on, at `worksheet.py:5809`, we see the following:

    def _write_merge_cell(self, merged_range):
        # Write the <mergeCell> element.
        (row_min, col_min, row_max, col_max) = merged_range

        # Convert the merge dimensions to a cell range.
        cell_1 = xl_rowcol_to_cell(row_min, col_min)
        cell_2 = xl_rowcol_to_cell(row_max, col_max)
        ref = cell_1 + ':' + cell_2

It's my fault I passed a bad range into `worksheet.merge_range(...)` somehow, but now there are two additional problems. The first is that the following exception message:

    File "...\lib\site-packages\xlsxwriter\worksheet.py", line 3740, in _assemble_xml_file
      self._write_merge_cells()
    File "...\lib\site-packages\xlsxwriter\worksheet.py", line 5805, in _write_merge_cells
      self._write_merge_cell(merged_range)
    File "...\lib\site-packages\xlsxwriter\worksheet.py", line 5816, in _write_merge_cell
      ref = cell_1 + ':' + cell_2
    TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'

highlights an incorrect assumption that `xl_rowcol_to_cell` necessarily returns a string (it doesn't always), and also, by the time the workbook is closing I have zero idea how the offending `worksheet.merge_range(...)` call happened. Poking around, I find the relevant data structure is the list worksheet.merge, which is written at `worksheet.py:1584` in the definition of `.merge_range(...)`. Scanning upward, I see that we check the column number of the lower-right corner of the merge range on line 1580 before appending to the list, but:
- if that check fails, no word is passed to client code (I expected an exception), and
- the check neglects to test the upper-left corner of the merge range.

# Proposed Solution
Let us "fail early and often", as follows:

A great many of the API calls are decorated with `@convert_..._args`, collectively defined at the top of `worksheet.py`. Suppose the wrappers were augmented with code to assert non-negative row/column numbers before delegating to the wrapped method, like this at line 97:

        assert all(args[i] >= 0 for i in range(4)), 'All coordinates must be non-negative; got '+repr(list(args[0:4]))
        return method(self, *args, **kwargs)

As a result, I get an exception pointing me to exactly the place where the actual problem is. (I'm going to live with this patch until the next upgrade.)

This one tiny change would protect virtually the whole API from the scourge of invalid input parameters. If you felt like it, you could also take care of swapped top-bottom/left-right once-and-only-once in the wrappers within `convert_range_args` and `convert_column_args`, thus probably saving a metric boatload of repetitious code. 
