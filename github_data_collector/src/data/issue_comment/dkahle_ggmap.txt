Hi dear developers,

It may be a very easy question but I couldn't find a perfect answer so far: is it possible to get a purely clean google map, which has the basic terrain color but no continental or country label on it? It seems to not work with google.....


best,
Cui

I am trying to use naver map in the R shiny, I have the Key and client ID from the naver cloud interactive map but when I use the get_navermap command from ggmap it throws an error of 
Error: 'get_navermap' is defunct.
Use 'Naver is at least temporarily not supported, as its API has changed.' instead.
See help("Defunct")
I wd appreciate your help 

https://github.com/dkahle/ggmap/blob/37a86724bcf651ec0ef4be72db46d3ac2a03963a/R/get_map.R#L164

This line is not commented out in the CRAN package version, so user's get the "terrain" maptype regardless of what they asked for.
I couldn't quite figure out how to customize the map extent from a Google map:

I'd like the map extent to just surround the color overlay in the middle. in get_googlemaps this is scale 8, and scale 9 is zoomed in too far.

My code is:
ggmap( map ) +
  geom_sf( data=nr , fill=NA , color="Darkred" , cex=1.5 , lty=2 , inherit.aes = F) +
  geom_tile( data=pred , aes( Longitude , Latitude , fill=Estimate ) , color="NA" , inherit.aes = F) +
  scale_fill_viridis( option="A" )

![image](https://user-images.githubusercontent.com/32649719/67309539-0a9ad080-f4ca-11e9-993a-0b2238beab5f.png)


Thanks!
## Reproducible Example

It appears that a hash (`#`) in the query of `ggmap::geocode()` will prevent returning a result. Perhaps queries should be cleaned? Below I use the same address but switch the `#` with "Suite" and it works fine. 

```
> ggmap::geocode("110 Channel St #1 94158")
Source : https://maps.googleapis.com/maps/api/geocode/json?address=110+Channel+St+#1+94158&key=xxx
Warning: Geocoding "110 Channel St #1..." failed with error:
You must use an API key to authenticate each request to Google Maps Platform APIs. For additional information, please refer to http://g.co/dev/maps-no-account

# A tibble: 1 x 2
    lon   lat
  <dbl> <dbl>
1    NA    NA
> ggmap::geocode("110 Channel St Suite 1 94158")
Source : https://maps.googleapis.com/maps/api/geocode/json?address=110+Channel+St+Suite+1+94158&key=xxx
# A tibble: 1 x 2
    lon   lat
  <dbl> <dbl>
1 -122.  37.8
```

For now a simple `gsub()` appears to be the easiest workaround. For example: 
`gsub("\\s#", " Suite ", "110 Channel St #1 94158)`

Adding functions to get maps from Carto (ony get_carto, did not add the option to the generic get_maps).

## Before you open your PR

- [y] Did you run R CMD CHECK?
- [y] Did you run `roxygen2::roxygenise(".")`?

Thanks for contributing!


I can get get_map to return a satellite map when specifying the maps location by a centroid i.e. location = c(Longitude, Latitude) , however, when I specify the location as a bounding box (i.e. location = c(left, bottom, right,top), it returns a terrain image not a satellite. In both examples I have specified maptype = "satellite". Is someone able to please shed some light on this issue?

## Reproducible Example

The following code uses the OSM source, but in the back it still uses Google Maps to generate the bounding box. I think it is cleaner to just throw an error that this isn't supported.

``` r
ggmap::get_map(location = c(lon=5, lat=3), source='osm')
#> Source : https://maps.googleapis.com/maps/api/staticmap?#center=3,5&zoom=10&size=640x640&scale=2&maptype=terrain&key=xxx
#Error in aperm.default(map, c(2, 1, 3)) : 
#  invalid first argument, must be an array
#In addition: Warning message:
#In get_googlemap(center = location, zoom = zoom, filename = filename) :
#  HTTP 400 Bad Request
```
https://developers.google.com/maps/documentation/geocoding/intro

> `partial_match` indicates that the geocoder did not return an exact match for the original request, though it was able to match part of the requested address. You may wish to examine the original request for misspellings and/or an incomplete address.

> Partial matches most often occur for street addresses that do not exist within the locality you pass in the request. Partial matches may also be returned when a request matches two or more locations in the same locality. For example, "21 Henr St, Bristol, UK" will return a partial match for both Henry Street and Henrietta Street. Note that if a request includes a misspelled address component, the geocoding service may suggest an alternative address. Suggestions triggered in this way will also be marked as a partial match.

We should label output with a `partial_match` attribute that can be extracted programmatically. It shouldn't change existing workflows, hence the use of `attr` instead of something like an additional field in the output.

cc: @j-d-miller 
ESRI has a nice (and free) basemap service, a leaflet example is found here: http://leaflet-extras.github.io/leaflet-providers/preview/#filter=Esri.WorldImagery

Would it be possible to include this as a basemap option in ggmap?


