Missing the following data files:
```
2016-01-30 01:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-20 15:00:00 +0000 UTC: Error (no data yet, ioutil readall):
unexpected EOF
2016-08-21 06:00:00 +0000 UTC: Error (no data yet, ioutil readall):
unexpected EOF
2016-08-21 21:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-21 22:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-22 08:00:00 +0000 UTC: Error (no data yet, ioutil readall):
unexpected EOF
2016-08-22 20:00:00 +0000 UTC: Error (no data yet, ioutil readall):
unexpected EOF
2016-08-23 07:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-23 08:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-23 12:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-23 19:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-23 22:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-23 21:00:00 +0000 UTC: Error (no data yet, ioutil readall):
unexpected EOF
2016-08-24 00:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-24 05:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-24 07:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-24 08:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-24 16:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-25 02:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-25 01:00:00 +0000 UTC: Error (no data yet, ioutil readall):
unexpected EOF
2016-08-25 07:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-25 06:00:00 +0000 UTC: Error (no data yet, ioutil readall):
unexpected EOF
2016-08-25 08:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-25 10:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-25 11:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-25 13:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-25 15:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-25 18:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-25 19:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-25 23:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-26 01:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-26 02:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-26 19:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-26 20:00:00 +0000 UTC: Error (no data yet, ioutil readall):
unexpected EOF
2016-08-27 15:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-27 17:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-08-28 22:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2016-10-21 18:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2018-10-21 23:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2018-10-22 00:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2018-10-22 01:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-05-08 12:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-05-08 13:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 08:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 09:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 10:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 11:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 12:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 13:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 14:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 15:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 16:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 17:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 18:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 19:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 21:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 22:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 20:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-12 23:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-13 01:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-13 00:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-13 02:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-13 04:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-13 03:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
2019-09-13 05:00:00 +0000 UTC: No data yet, gzip reader:
gzip: invalid header
```

cc @igrigorik 
api documentation: https://developer.github.com/v3/activity/events/types/#starevent
but I can't find any StarEvent in the json file
Adds DevStats project that uses GH archives as the main data source.
Hi, I have a question:
Should all commits stored in `git` repository be present on the GitHub archives?
I have a local clone of `torvalds/linux` repository.
I'm counting all distinct commit's SHA's: `git log --pretty=format:"%H" --since="2018-04-01" --until="2019-04-01" | uniq | wc -l`. It gives 75141 commits for one year period 2018-04-01 - 2019-04-01.
When analyzing all `torvalds/linux` commits stored in GitHub archives I can only get 10542 distinct SHAs. Maybe the problem is that Linux GitHub repository is only a mirror and most commits are not stored in GitHub API then?
Hello,

Thanks for this awesome project first! üëè 

I've noticed that some extracted JSON files only have a single line for 1 hour of log. Here are the files for 2015 for examples:

- 2015-01-05-20
- 2015-01-06-4
- 2015-01-07-13
- 2015-01-08-2
- 2015-01-09-11
- 2015-01-09-9
- 2015-02-03-16

This seems like a bug to me
Ever thought about adding GitLab support to the project?  Maybe forking the project/creating gitlabarchive.org?
Good day!

I have an issue, linked to your open data, which is available through Google BigQuery. Why is there so huge recession of new GitHub new repositories since November of 2017. What's the reason of it? I guess, it's the new methodology of gathering repositories or not support of new appearing repositories.

There is the query, which gathering all repositories by years:

(WITH t1 AS (SELECT repo_name
FROM bigquery-public-data.github_repos.commits, UNNEST(difference) as diff, UNNEST(repo_name) as repo_name
WHERE DATE(author.date) < DATE("2018-01-01")
GROUP BY repo_name),
t2 AS (SELECT repo_name
FROM bigquery-public-data.github_repos.commits, UNNEST(difference) as diff, UNNEST(repo_name) as repo_name
WHERE DATE(author.date) <= DATE("2018-10-01")
GROUP BY repo_name)

SELECT "ALL 2018", count(repo_name) FROM
(SELECT repo_name FROM t2 WHERE repo_name NOT IN (SELECT repo_name FROM t1)))

UNION ALL

(WITH t1 AS (SELECT repo_name
FROM bigquery-public-data.github_repos.commits, UNNEST(difference) as diff, UNNEST(repo_name) as repo_name
WHERE DATE(author.date) < DATE("2017-01-01")
GROUP BY repo_name),
t2 AS (SELECT repo_name
FROM bigquery-public-data.github_repos.commits, UNNEST(difference) as diff, UNNEST(repo_name) as repo_name
WHERE DATE(author.date) < DATE("2018-01-01")
GROUP BY repo_name)

SELECT "ALL 2017", count(repo_name) FROM
(SELECT repo_name FROM t2 WHERE repo_name NOT IN (SELECT repo_name FROM t1)))

UNION ALL

(WITH t1 AS (SELECT repo_name
FROM bigquery-public-data.github_repos.commits, UNNEST(difference) as diff, UNNEST(repo_name) as repo_name
WHERE DATE(author.date) < DATE("2016-01-01")
GROUP BY repo_name),
t2 AS (SELECT repo_name
FROM bigquery-public-data.github_repos.commits, UNNEST(difference) as diff, UNNEST(repo_name) as repo_name
WHERE DATE(author.date) < DATE("2017-01-01")
GROUP BY repo_name)

SELECT "ALL 2016", count(repo_name) FROM
(SELECT repo_name FROM t2 WHERE repo_name NOT IN (SELECT repo_name FROM t1)))

Appreciate for your help!
Hi,

Can very well be that the event is simply not reported from where gharchive takes the events, but I noticed that `PullRequestReviewCommentEvents` are collected but not [PullRequestReviewEvent](https://developer.github.com/v3/activity/events/types/#pullrequestreviewevent). As a consequence reviews without extra comments are absolutely invisible in the archive and reviews with comments leave only implicit traces because of the logged comment creation.

Is there a way to improve the situation?
Since I found another issue (#180) regarding fork events duplicates, I decided to open this non-specific issue on "Duplicate Events". Then, we can report any duplicate we face here for the record.

Hello!
I'm attempting to understand why some issues show up with an 'open' state whereas they are closed on GitHub. For example, in the image below.
![Like this](https://user-images.githubusercontent.com/15096417/40815863-549b0eaa-64fe-11e8-8250-faf8c673df78.png)
As far as I understand, it seems that when certain issues are closed by a PullRequest merge using the keywords in the body, the issue is closed on the GitHub side, but no 'close' IssueEvent is created so to GH Archive that issue remains in its open state. However, there does seem to be a close record for some issues that were closed by a PullRequest, as shown below,
![like this](https://user-images.githubusercontent.com/15096417/40815892-853b162c-64fe-11e8-83d2-c9fdd9757efe.png) so that wouldn't entirely make sense. Would you be able to shed any light on this as I'm quite confused? Thank You!