The current 3D support has three main problems:

1. Re-tiling every frame on CPU is too slow for most applications.

2. Clipping Bezier curves to a 3D space is slow and has precision problems.

3. Only flat planes are supported.

Similar to what we did in WebRender, we can have a separate layer on top that provides tiled 3D support. That project now exists in its early stages: https://github.com/pcwalton/virtex/tree/advanced. After doing this, we can remove the 3D support from Pathfinder and move it over to the virtex project. To avoid regressing any functionality, this should not be done until virtex is as easy to use and well-supported as Pathfinder is.
The relevant function is `PFCanvasFontContextCreateWithFonts()`, which takes a pointer to an array of `FKHandleRef`s, but there is no way to create an `FKHandleRef`.
Not sure what could be causing this but I'm getting the following error on `cargo build`. It seems to have been introduced in 29713c5cd9b1b47392e716ff6f18be388d9d46ae
```
error[E0282]: type annotations needed
   --> /Users/javednissar/.cargo/registry/src/github.com-1ecc6299db9ec823/metal-0.14.0/src/lib.rs:128:13
    |
128 |             msg_send![self.0, release];
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |             |
    |             cannot infer type
    |             consider giving `result` a type
    |
    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)
```
This implements GLOW (GL on Whatever) implementation of the device
abstraction. It is a very close copy of the GL implementation.

This abstraction can be used in multiple environments (Open GL, OpenGL
ES, and WebGL) and avoids target-specific code. The abstraction can be
used with wasm32-unknown-unknown + web-sys, stdweb, and natively.
I wrote this to enable limited WebGL 2 + wasm32-unknown-unknown support.

This also makes minor changes to shaders so that they work in WebGL 2
and implements an example that works both in web browsers and natively,
via SDL.
The attached SVG file causes a panic when loaded in the native demo app. Tested on commit 5d5d303

[stress.svg.zip](https://github.com/servo/pathfinder/files/3800613/stress.svg.zip) - zipped so that github would accept the upload.

Backtrace:

```
Oh noez! Panic! 💥
Message:  index out of bounds: the len is 1 but the index is 1
Location: renderer/src/tiles.rs:264

Run with RUST_BACKTRACE=full to include source snippets.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ BACKTRACE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                          (7 post panic frames hidden)                          
 7: core::panicking::panic_bounds_check::hf0c95c4cc84d34ca
    at src/libcore/panicking.rs:61
 8: pathfinder_renderer::tiles::Tiler::generate_tiles::hfc169b80f1641916
    at <unknown source file>
 9: pathfinder_renderer::builder::SceneBuilder::build_path::hce897e2e946b5d4c
    at <unknown source file>
10: rayon::iter::plumbing::Producer::fold_with::h50fa76b5f0b3163a
    at <unknown source file>
11: rayon::iter::plumbing::bridge_producer_consumer::helper::h69dbadf04bd92d21
    at <unknown source file>
12: std::panicking::try::do_call::h6c4c1ab0f10124be
    at <unknown source file>
13: __rust_maybe_catch_panic
    at src/libpanic_unwind/lib.rs:80
14: <rayon_core::job::StackJob<L,F,R> as rayon_core::job::Job>::execute::h9adf8b7ae0ef7bc2
    at <unknown source file>
15: rayon_core::registry::WorkerThread::wait_until_cold::h217a69f524408fb0
    at <unknown source file>
16: rayon_core::registry::main_loop::h170a63d799a69fb7
    at <unknown source file>
17: std::panicking::try::do_call::hdc23013fbb359370
    at <unknown source file>
18: __rust_maybe_catch_panic
    at src/libpanic_unwind/lib.rs:80
19: core::ops::function::FnOnce::call_once{{vtable.shim}}::h1e9e799cd2b2c8fd
    at <unknown source file>
20: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once::h2877b2aefb0fd627
    at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/liballoc/boxed.rs:787
21: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once::h13f473dbcdaa0fef
    at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/liballoc/boxed.rs:787
22: std::sys_common::thread::start_thread::h562a7c4953cb1d31
    at src/libstd/sys_common/thread.rs:13
23: std::sys::unix::thread::Thread::new::thread_start::h382c6ae14181d163
    at src/libstd/sys/unix/thread.rs:79
24: start_thread
    at <unknown source file>
25: __clone
    at <unknown source file>
26: <unknown>
    at <unknown source file>
Oh noez! Panic! 💥
Message:  called `Result::unwrap()` on an `Err` value: RecvError
Location: src/libcore/result.rs:1084

Run with RUST_BACKTRACE=full to include source snippets.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ BACKTRACE ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                          (8 post panic frames hidden)                          
 8: demo::main::h0b665984c7ae2ba3
    at <unknown source file>
 9: std::rt::lang_start::{{closure}}::hc8bed131044e1138
    at <unknown source file>
10: std::rt::lang_start_internal::{{closure}}::h4e93c1949c7a1955
    at src/libstd/rt.rs:49
11: std::panicking::try::do_call::h9440ccd4dc467eaa
    at src/libstd/panicking.rs:296
12: __rust_maybe_catch_panic
    at src/libpanic_unwind/lib.rs:80
13: std::panicking::try::hc046e7ee42ee744f
    at src/libstd/panicking.rs:275
14: std::panic::catch_unwind::h27dfc457c200aee0
    at src/libstd/panic.rs:394
15: std::rt::lang_start_internal::hea1b49a567afe309
    at src/libstd/rt.rs:48
16: main
    at <unknown source file>
17: __libc_start_main
    at <unknown source file>
18: _start
    at <unknown source file>
19: <unknown>
    at <unknown source file>
```
When opening the following file in the demo app it consumes 30+ Gb RAM. I had to kill it because it has exhausted both my RAM and swap, so I don't know if it will render successfully if given enough memory.

https://inkscape.org/~inkscape/%E2%98%85about-screen-inkscape-092

Rendering the same file with resvg and cairo backend takes only 25Mb RAM.

Tested on commit 5d5d30346bf4703ba49244e85bcb8c6ed7df48e9 
I ran:
>sudo apt install libgtk-3-dev libsdl2-dev
>cd demo/native
>RUSTFLAGS="-C target-cpu=native" cargo run --release --bin demo

I found that libgtk-3-dev was necessary. Also, I added "--bin demo" because the instructions from README.md result in "error: `cargo run` could not determine which binary to run. Use the `--bin` option to specify a binary, or the `default-run` manifest key."

The program started, then crashed. GDB output:

>Starting program: /home/ad/Downloads/pathfinder-master/target/release/demo
...
>Thread 2 "demo" received signal SIGILL, Illegal instruction.
(gdb) bt
#0  0x00005555557db434 in core::core_arch::x86::avx2::_mm_srlv_epi32 ()
#1  0x00005555557db56c in _ZN19pathfinder_renderer7builder60_$LT$impl$u20$pathfinder_renderer..gpu_data..BuiltObject$GT$8add_fill17hb5cc38b7672cae62E.llvm.14562274008100250132 ()
#2  0x00005555557db7e6 in pathfinder_renderer::builder::<impl pathfinder_renderer::gpu_data::BuiltObject>::generate_fill_primitives_for_line ()
#3  0x00005555557daef0 in pathfinder_renderer::tiles::ActiveEdge::process ()
#4  0x00005555557da7f0 in pathfinder_renderer::tiles::process_active_segment ()
#5  0x00005555557da1c2 in pathfinder_renderer::tiles::Tiler::generate_tiles ()
#6  0x00005555557d6dab in pathfinder_renderer::builder::SceneBuilder::build_path ()
#7  0x00005555555afa58 in rayon::iter::plumbing::Producer::fold_with ()
#8  0x00005555555d6c28 in rayon::iter::plumbing::bridge_producer_consumer::helper ()

My system doesn't support AVX2. It's an Ivy Bridge mobile CPU. If detection is not yet implemented, then don't worry about it. If detection is already implemented, it may be the VM interfering.
I have a [minimal test put together](https://github.com/anp/moxie/pull/28/commits/895428cb90fe3764ff17d65bb031e201c136ad77#diff-4c94817ca8587c0d8aa21be03de88e7fR36). When creating the `FilesystemResourceLoader`, this panic occurs:

```
thread 'main' panicked at 'No suitable `resources/` directory found!', C:\Users\adamn\.cargo\git\checkouts\pathfinder-f0bd20e7aa700f92\f89ed90\gpu\src\resources.rs:54:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

Based on the [code for `locate`](https://github.com/servo/pathfinder/blob/master/gpu/src/resources.rs#L31), this looks  in the current directory and all of its parents for a resources directory from which to load shaders, textures, etc. This clearly works well in-tree, but it will be problematic to run all of my tests from within a vendored pathfinder directory as I'd prefer to use upstream git revisions in Cargo.toml instead of a local checkout. I suspect that this search strategy will present an obstacle to publishing to crates.io. Not trying to throw stones, y'all are definitely [aware](https://github.com/servo/pathfinder/blob/master/gpu/src/resources.rs#L31) of limitations here 😸 .

Do you have a plan for handling this in the future, especially w.r.t. packaging apps which use pathfinder? If the resources are small and used by most pathfinder dependents, I'd perhaps be interested in an option to `include_bytes` the resources. Not sure whether that's feasible.

EDIT: On a re-read, it occurs to me that I forgot to phrase the follow-up question: or should I just implement the trait myself?
<pre>ubuntu 19.04 with nvidia 8500 GT

RUST_BACKTRACE=1 RUSTFLAGS=&quot;-C target-cpu=native&quot; cargo run --bin canvas_minimal
<font color="#4E9A06"><b>    Finished</b></font> dev [unoptimized + debuginfo] target(s) in 2.69s
<font color="#4E9A06"><b>     Running</b></font> `target/debug/canvas_minimal`
thread &apos;main&apos; panicked at &apos;called `Result::unwrap()` on an `Err` value: Io(Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; })&apos;, src/libcore/result.rs:999:5
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
             at src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:39
   1: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:71
   2: std::panicking::default_hook::{{closure}}
             at src/libstd/sys_common/backtrace.rs:59
             at src/libstd/panicking.rs:197
   3: std::panicking::default_hook
             at src/libstd/panicking.rs:211
   4: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:474
   5: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:381
   6: rust_begin_unwind
             at src/libstd/panicking.rs:308
   7: core::panicking::panic_fmt
             at src/libcore/panicking.rs:85
   8: core::result::unwrap_failed
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c/src/libcore/macros.rs:18
   9: core::result::Result&lt;T,E&gt;::unwrap
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c/src/libcore/result.rs:800
  10: font_kit::source::Source::select_descriptions_in_family
             at /home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/font-kit-0.2.0/src/source.rs:142
  11: font_kit::source::Source::select_best_match
             at /home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/font-kit-0.2.0/src/source.rs:126
  12: pathfinder_canvas::text::CanvasFontContext::new
             at canvas/src/text.rs:147
  13: pathfinder_canvas::text::CanvasFontContext::from_system_source
             at canvas/src/text.rs:163
  14: canvas_minimal::main
             at examples/canvas_minimal/src/main.rs:55
  15: std::rt::lang_start::{{closure}}
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c/src/libstd/rt.rs:64
  16: std::panicking::try::do_call
             at src/libstd/rt.rs:49
             at src/libstd/panicking.rs:293
  17: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:85
  18: std::rt::lang_start_internal
             at src/libstd/panicking.rs:272
             at src/libstd/panic.rs:394
             at src/libstd/rt.rs:48
  19: std::rt::lang_start
             at /rustc/a53f9df32fbb0b5f4382caaad8f1a46f36ea887c/src/libstd/rt.rs:64
  20: main
  21: __libc_start_main
  22: _start</pre>
I was just auditing where we fallback on drawing text in webrender, and I found this extremely obscure feature that I disabled years ago and forgot about: 

https://searchfox.org/mozilla-central/source/layout/painting/nsDisplayList.cpp#9474-9511

Basically [text-combine-upright](https://developer.mozilla.org/en-US/docs/Web/CSS/text-combine-upright) is used to draw arabic numbers horizontally in vertical text, with the specifically interesting property of: if the text would overflow the column *squish it to fit*. 

Simple HTML page demonstrating this:

```
data:text/html,<html><head><meta charset="utf8"></head><body style="font-family: sans-serif; width: 100%"><div><div style="writing-mode:vertical-rl;">%E4%BD%A0%E5%A5%BD<span style="text-combine-upright:all">1</span><span style="text-combine-upright:all">12</span><span style="text-combine-upright:all">123</span><span style="text-combine-upright:all">1234</span><span style="text-combine-upright:all">12345</span>%E4%BD%A0%E5%A5%BD</div></div></body></html>
```

```
<html>
<head>
  <meta charset="utf8">
</head>

<body style="font-family: sans-serif; width: 100%">
  <div>
    <div style="writing-mode:vertical-rl;">你好<span style="text-combine-upright:all">1</span><span style="text-combine-upright:all">12</span><span style="text-combine-upright:all">123</span><span style="text-combine-upright:all">1234</span><span style="text-combine-upright:all">12345</span>你好
    </div>
  </div>
</body>

</html>
```

![text-combine-upright](https://user-images.githubusercontent.com/1136864/62717125-54970e80-b9d1-11e9-8c9f-8dbcc7934cfc.PNG)

It's possible we could implement this natively in WR now in a similar way to gecko: wrap everything in a context/frame with a horizontal scale transform to just squish everything. Haven't tried it since this is a truly niche thing and it's not a big deal to fallback on. Just thought this would be interesting to toss your way as an interesting text rendering usecase.

