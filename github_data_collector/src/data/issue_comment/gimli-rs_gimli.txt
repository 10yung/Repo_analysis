This would likely make it possible for LLVM to optimize a division away which accounts for ~30% of the time in `generate_row`. I don't see much use for it anyway.

https://github.com/gimli-rs/gimli/blob/1e49ffc9af4ec64a1b7316924d73c933dd7157c5/src/write/line.rs#L471

and

https://github.com/gimli-rs/gimli/blob/1e49ffc9af4ec64a1b7316924d73c933dd7157c5/src/write/line.rs#L475
Now that the `Error` trait has deprecated `description` (see #462), we shouldn't bother with `read::Error::description` at all, and it should be moved into the `impl Display`.

Since this also means we no longer need to return `&str`, we should improve the displayed error messages to include any additional information they contain.
A base location entry is only existing since DWARF3. For DWARF2 it has to be expanded.
WIP implementation for #431.

Annoyingly due to how these form descriptors work it means that all files need to have the same format. I wonder if it makes sense to just write an empty string in such cases. Effectively something similar happens with md5 hashes already.

Second issue is that this change required to remove a `Copy` bound :(
I'm playing around with various ways at the moment to make it easier to address file contents and DWARF 5 is helping with `DW_LCNT_MD5` here already. It lets you address a source file by MD5 hash which is pretty helpful but it still requires a separate system to actually resolve the sources.

I came across an LLVM extension recently (`DW_LNCT_LLVM_source`) which LLVM added to support debugging of generated GPU programs. I feel like this would be also solving my issue quite well. However I'm not sure how gimli thinks about LLVM extensions.

The reason I'm asking is because I wanted to use gimli's write interface for this but currently the logic that emits these `DW_LNCT_` attributes is internal to the structs so it requires a patch to gimli to emit new ones at the moment.
I have a 16 bit dos exe (mz format) that I'd like to extract line number information from. It seems to maybe be dwarf, as it has all of those .debug_info .debug_abbrev etc sections, and it was compiled with watcom which uses dwarf. However, I got lost in the examples, and I cant figure out exactly what is needed by gimli: I know the address where .debug_info starts and I know the header info and relocation table etc etc, is that enough? If so, whats a minimal example that I can get started with? Thanks.

PS: here's what the file looks like:
```
00000000: 4d5a 5b00 0100 0100 0300 4100 ffff 0300  MZ[.......A.....
00000010: 0004 0000 0000 0000 2000 0000 0000 0000  ........ .......
00000020: 0100 0000 0000 0000 0000 0000 0000 0000  ................
00000030: b801 008e d8b4 098d 160e 00cd 21b2 0db4  ............!...
00000040: 02cd 21b2 0ab4 02cd 21b4 4ccd 2100 4865  ..!.....!.L.!.He
00000050: 6c6c 6f20 776f 726c 6421 247f 454c 4601  llo world!$.ELF.
00000060: 0101 0000 0000 0000 0000 0002 0003 0001  ................
00000070: 0000 0000 0000 0000 0000 0034 0000 0000  ...........4....
00000080: 0000 0034 0020 0000 0028 0006 0005 0000  ...4. ...(......
00000090: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000b0: 0000 0000 0000 0001 0000 0001 0000 0000  ................
000000c0: 0000 0000 0000 0024 0100 002c 0000 0000  .......$...,....
000000d0: 0000 0000 0000 0000 0000 0000 0000 000d  ................
000000e0: 0000 0001 0000 0000 0000 0000 0000 0050  ...............P
000000f0: 0100 002e 0000 0000 0000 0000 0000 0000  ................
00000100: 0000 0000 0000 001b 0000 0001 0000 0000  ................
00000110: 0000 0000 0000 007e 0100 004c 0000 0000  .......~...L....
00000120: 0000 0000 0000 0000 0000 0000 0000 0027  ...............'
00000130: 0000 0001 0000 0000 0000 0000 0000 00ca  ................
00000140: 0100 0034 0000 0000 0000 0000 0000 0000  ...4............
00000150: 0000 0000 0000 0036 0000 0003 0000 0000  .......6........
00000160: 0000 0000 0000 00fe 0100 0040 0000 0000  ...........@....
00000170: 0000 0000 0000 0000 0000 0000 0000 0028  ...............(
00000180: 0000 0002 0000 0000 0004 0168 656c 6c6f  ...........hello
00000190: 776f 726c 642e 6173 6d00 5631 2e30 2057  world.asm.V1.0 W
000001a0: 4154 434f 4d00 0000 0000 0001 1101 0308  ATCOM...........
000001b0: 2508 1010 0000 0211 0103 0825 0800 0003  %..........%....
000001c0: 0a00 1101 3f0c 460a 0308 0000 0434 0011  ....?.F......4..
000001d0: 013f 0c46 0a03 0800 0048 0000 0002 0022  .?.F.....H....."
000001e0: 0000 0001 01ff 040a 0001 0101 0100 0000  ................
000001f0: 0000 6865 6c6c 6f77 6f72 6c64 2e61 736d  ..helloworld.asm
00000200: 0000 0000 0000 0302 0000 0003 0400 0003  ................
00000210: 0501 1814 141c 0305 1314 1414 1414 0303  ................
00000220: 1314 0001 0130 0000 0002 0000 0000 0004  .....0..........
00000230: 0200 0000 0000 001d 0000 000e 0000 0001  ................
00000240: 000d 0000 0000 0000 0003 0000 0400 0000  ................
00000250: 0000 0000 0000 0000 0000 2e64 6562 7567  ...........debug
00000260: 5f69 6e66 6f00 2e64 6562 7567 5f61 6262  _info..debug_abb
00000270: 7265 7600 2e64 6562 7567 5f6c 696e 6500  rev..debug_line.
00000280: 2e64 6562 7567 5f61 7261 6e67 6573 002e  .debug_aranges..
00000290: 7368 7374 7274 6162 0054 4953 0000 0000  shstrtab.TIS....
000002a0: 0000 0000 004e 0200 00                   .....N...       
```

PPS: object is incapable of loading this kind of file
Eg `DW_TAG_base_type` instead of `DwTag(...)`
You can see this when using `dwarfdump --eh-frame` on an object file.
This should support the following uses:
- better support for relocated addresses (eg when using function sections, which have every function symbol at address 0)
- reuse of the same address type for conversion when both reading and writing
- optional support for segmented addresses (#357)
- using the native address size
- better type checking of our address handling

I wanted this when doing the relocated address support, but didn't do it because of how ugly the `Reader::Offset` support had been. However, I don't think that's so bad now after the default offset was changed in #392.

Any thoughts on this @fitzgen ?
Sections:
- [ ] expressions/locations in .debug_info and .debug_loc/.debug_loclists
- [ ] .debug_str_offsets
- [x] .debug_frame/.eh_frame
- [ ] .eh_frame_hdr (lower priority)
- [ ] .debug_aranges
- [ ] .debug_pubnames/.debug_pubtypes/.debug_names
- [ ] .debug_macinfo/.debug_macro
- [ ] .apple_names/.apple_types/.apple_namespaces

Also need general improvements:
- [ ] more mutability (#373, #374)
- [ ] indexed addresses/range lists/location lists
