Thanks for the great tool.

I'm trying to use gocui to display image as https://github.com/eliukblau/pixterm/blob/master/cmd/pixterm/pixterm.go. But seems like display is not good as true color terminal. So is there any setting for gocui to enable true color? 

BTW, I'm using iterm2, which pixterm can display image perfectly.


How can I set the cursor at end of the content when clicking a view? Thanks!
Now will put the cursor at the position that clicked, which is weird.
No need to convert here, it's already a string.
Hi everyone,

I figured you would be interested, I published a go package I wrote to help me handle complex text formatting in a gocui interface. In particular, this package contains string manipulation functions that handle properly wide characters (chinese, japanese ...) and ANSI escape sequences.

The package is here: https://github.com/MichaelMure/go-term-text
**Describe the bug**
Weird look on iTerm2 vs Terminal

I'm still tweaking my configuration but i always have that kind of behaviour.
I'm running oh my zsh on both iterm and terminal.

**Screenshots**
__macOS Built in terminal__
![Terminal](https://imgshare.io/images/2019/07/02/terminal.png)

__iTerm2__
![iTerm2](https://imgshare.io/images/2019/07/02/iterm.png)

**Desktop :**
 - OS: macOS High Sierra 

__I have this problem with multiple application created with GoCUI__ 
I think an `edition` refers to a version of some published material. If I understood the intent of the documentation correctly, perhaps it should be `editing mode` or simply `edit mode`.
How can I update the UI (I am outputting logs to the UI) properly so that it updates automatically, rather than updating when I manually press the up/down arrows?

I am using the io.Writer interface:

```
func (cGui *clientGui) Write(p []byte) (n int, err error) {
	cGui.gui.Update(func(g *gocui.Gui) error {
		logCounter = logCounter + 1
		fmt.Fprintf(cGui.views["logging"], strconv.Itoa(logCounter)+" - "+string(p))
		return nil
	})
	return len(p), nil
}
```

The above works however if multiple things write to it at once, then the logs get jumbled on the console. The image below is the output, as you can see, lines 11,12,13 have been jumbled with the lines 10 and 14 (the number on the left is the logCounter variable from above, and should be consecutive.
![image](https://user-images.githubusercontent.com/2920180/60258436-0b7d7600-98cd-11e9-927b-71b60df3c6a7.png)

If I do

```
func (cGui *clientGui) Write(p []byte) (n int, err error) {
	fmt.Fprintf(cGui.views["logging"], strconv.Itoa(logCounter)+" - "+string(p))
	return len(p), nil
}
```
It works, but I have to manually "do something" like press a key to get the log output to appear. 

Thanks
I don't know if you want this change or if you'd rather handle this differently...  I'm using gocui to "handle" the errors "thrown" at different points in the lifecycle (on keybind, etc) and I needed a common place to put them.  Since gocui has its own lifecycle, I felt it was appropriate to handle the errors by returning them to their appropriate handlers.  This posed a problem when I wanted to display an error in an "alert" (using gocui) instead of returning.  My thought is that as my error handling gets better, some would exit (like now) and others would be gracefully recovered from.  

Calling `gui.MainLoop()` after it exits doesn't work because the goroutine for `termbox.PollEvent()` is initialized more than once (causing multiple keypresses -- among other things).  So, this PR separates that "initialization" from the actual main loop so that I can re-call the main loop after gracefully recovering after an error.

Ex:

```go
    gui.MainLoopInit()

	for {
		err := gui.MainLoopEventHandler()
		if err == nil || err == gocui.ErrQuit {
			return
		} else if err != nil {
			gui.Update(func(gui *gocui.Gui) error {
                return views.AlertWithTitle(gui, "Error", err.Error()+"\n\n"+string(debug.Stack()))
            })
		}
	}
```