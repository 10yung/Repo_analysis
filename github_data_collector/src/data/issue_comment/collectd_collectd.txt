I have this problem by run make-j 32
someone has a solution please

examples/mnist/convert_mnist_data.cpp: In function ‘void convert_dataset(const char*, const char*, const char*)’:
examples/mnist/convert_mnist_data.cpp:25:6: warning: ‘__builtin___snprintf_chk’ output may be truncated before the last format character [-Wformat-truncation=]
void convert_dataset(const char* image_filename, const char* label_filename,
^~~~~~~~~~~~~~~
In file included from /usr/include/stdio.h:862:0,
from /usr/include/c++/7/cstdio:42,
from /usr/include/c++/7/ext/string_conversions.h:43,
from /usr/include/c++/7/bits/basic_string.h:6361,
from /usr/include/c++/7/string:52,
from /usr/include/c++/7/stdexcept:39,
from /usr/include/c++/7/array:39,
from /usr/include/c++/7/tuple:39,
from /usr/include/c++/7/bits/stl_map.h:63,
from /usr/include/c++/7/map:61,
from /usr/include/google/protobuf/text_format.h:41,
from examples/mnist/convert_mnist_data.cpp:10:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:65:44: note: ‘__builtin___snprintf_chk’ output between 9 and 11 bytes into a destination of size 10
__bos (__s), __fmt, __va_arg_pack ());
ChangeLog: exec plugin: replace select with poll

Replace select with poll to allow big File Descriptors values on systems which allow more than 1024 open FDs. Other than that there is no any change in functionality.
This fixes issue #3322.
This change allows users to properly define and use wildcard based interface naming when using the ethstat plugin. You can also specify explicit interfaces, if this is desired.

Example:
```
<Plugin ethstat>
    Interface "/^ens[0-9]?$/"
    Interface "eth0"
    [...]
</Plugin>
```
ChangeLog: ethstat plugin: Add support for Interface regexps in ethstat plugin.
*   Version of collectd:
Stable 5.7.2
*   Operating system / distribution:
Linux Vi805 4.15.0-72-generic #81-Ubuntu SMP Tue Nov 26 12:20:02 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
*   Kernel version (if applicable):
Linux Vi805 4.15.0-72-generic 
## Expected behavior

Collect cpu once in 200 Milliseconds and write it to custom graphite format with timestamp in milliseconds.

## Actual behavior

All collectd write plugin's show 1 seconds dimension between metrics/

## Steps to reproduce

I patch default cpu plugin like this for accepting interval:
```c
 plugin_register_complex_read (
          /* group    = */ "cpu",
          /* name     = */ "cpu",
          /* callback = */ cpu_read,
      // watch https://collectd.org/wiki/index.php/High_resolution_time_format
          /* interval = */ MS_TO_CDTIME_T(interval_ms),
          /* userdata = */ NULL);
 } /* void module_register */
```
 and then patch format_graphite for showing timestamp in milliseconds:
 ```c
 if ((flags & GRAPHITE_TIMESTAMP_IN_MILLIS))
     {
       message_len =
         (size_t)ssnprintf(message, sizeof(message), "%s %s %lu\r\n", key, values,
                           CDTIME_T_TO_MS(vl->time));
     }
     else
     {
       message_len =
         (size_t)ssnprintf(message, sizeof(message), "%s %s %u\r\n", key, values,
                           (unsigned int)CDTIME_T_TO_TIME_T(vl->time));
     }
```
 Then i'll get metrics:
```
kovi.cpu-0.percent-user 5.10204081632653 1576854524969
...48 lines here...
kovi.cpu-5.percent-idle 94 1576854524969
kovi.cpu-0.percent-user 5.10204081632653 1576854525969
...48 lines here...
kovi.cpu-5.percent-interrupt 0 1576854525969
```
where you can see, that time interva between sends `1576854525969-1576854524969 == 1000millis == 1 second`.
I keep Varnish 4 because Varnish Software keep support for Varnish Plus 4. Deleted Varnish 2, 3 and 5 because does't maintened: https://varnish-cache.org/releases/

ChangeLog: varnish plugin: Support for Varnish 6, deprecated 2, 3 and 5. Added counters for vmod-goto
This reverts commit e95e850a1688e6bee4ee87b27f92f2a4ffaf7a91.

This reverts https://github.com/collectd/collectd/pull/3353 which was done in attempt to fix https://travis-ci.org/collectd/collectd/jobs/625893485 seen in https://github.com/collectd/collectd/pull/3350
ChangeLog: Check_presence plugin: Add new plugin to detect new and missing hosts.

This PR adds a new plugin that keeps track of hosts that have been seen by collectd, and sends notifications when a new host is seen, or an existing is no longer seen for a period of time, respectively.

It depends on liblmdb to provide the underlying index, chosen for low cost.

Example notification when a host is seen:

`Notification: severity = OKAY, host = little-net.local, plugin = host, type = host, type_instance = found, message = Host is found: little-net.local`

Example notification when a host goes missing:

`Notification: severity = FAILURE, host = little-net.local, plugin = host, type = host, type_instance = lost, message = Host not seen for 45 seconds: little-net.local`
*   Version of collectd: 5.8.0
*   Operating system / distribution: Docker jfloff/alpine-python:2.7
*   Kernel version (if applicable): 4.4.0-154-generic

## Background
This happens inside a Docker image I made that pulls and installs https://github.com/wiedehopf/graphs1090 and makes some adjustments. Before making the story overcomplicated, let's focus on the collectd.conf.

## Actual behavior

Collectd hangs at random intervals at high CPU usage, nothing happens anymore.
It happens from once per 2 weeks to 3 times a day. No clue at all. Logging to file at level `info` gives no hints.

## Config

```
/ # cat /etc/collectd/collectd.conf
# Config file for collectd(1).

##############################################################################
# Global                                                                     #
##############################################################################
Hostname "localhost"

#----------------------------------------------------------------------------#
# Interval at which to query values. This may be overwritten on a per-plugin #
# base by using the 'Interval' option of the LoadPlugin block:               #
#   <LoadPlugin foo>                                                         #
#       Interval 60                                                          #
#   </LoadPlugin>                                                            #
#----------------------------------------------------------------------------#
Interval 60
Timeout 2
ReadThreads 5
WriteThreads 1

LoadPlugin "logfile"
<Plugin "logfile">
  LogLevel "info"
  File "/var/log/collectd.log"
  Timestamp true
</Plugin>


#----------------------------------------------------------------------------#
# Added types for dump1090.                                                  #
# Make sure the path to dump1090.db is correct.                              #
#----------------------------------------------------------------------------#
TypesDB "/usr/share/graphs1090/dump1090.db" "/usr/share/collectd/types.db"

##############################################################################
# Logging                                                                    #
##############################################################################
#LoadPlugin syslog
#
#<Plugin syslog>
#       LogLevel info
#</Plugin>

##############################################################################
# LoadPlugin section                                                         #
#----------------------------------------------------------------------------#
# Specify what features to activate.                                         #
##############################################################################
LoadPlugin rrdtool
#LoadPlugin table
#LoadPlugin interface
#LoadPlugin memory
#LoadPlugin cpu
LoadPlugin aggregation
LoadPlugin match_regex
#LoadPlugin df
#LoadPlugin disk
<LoadPlugin python>
        Globals true
</LoadPlugin>

##############################################################################
# Plugin configuration                                                       #
##############################################################################
<Plugin rrdtool>
        DataDir "/var/lib/collectd/rrd"
        RRARows 3000
        RRATimespan 174000
        RRATimespan 696000
        RRATimespan 2784000
        RRATimespan 16008000
        RRATimespan 96048000
        XFF 0.3
</Plugin>

#<Plugin "aggregation">
#       <Aggregation>
#               Plugin "cpu"
#               Type "cpu"
#               GroupBy "Host"
#               GroupBy "TypeInstance"
#               CalculateAverage true
#       </Aggregation>
#</Plugin>

#<Plugin "df">
#       MountPoint "/"
#       IgnoreSelected false
#</Plugin>

#<Plugin "interface">
#       Interface "eth0"
#       Interface "wlan0"
#       Interface "enp0s25"
#       Interface "wlp3s0"
#</Plugin>

#<Plugin table>
#       <Table "/sys/class/thermal/thermal_zone0/temp">
#               Instance localhost
#               Separator " "
#               <Result>
#                       Type gauge
#                       InstancePrefix "cpu_temp"
#                       ValuesFrom 0
#               </Result>
#       </Table>
#</Plugin>

#<Plugin "disk">
#       Disk "mmcblk0"
#       Disk "mmcblk1"
#       Disk "sda"
#       Disk "hda"
#       IgnoreSelected false
#</Plugin>

#----------------------------------------------------------------------------#
# Configure the dump1090 python module.                                      #
#                                                                            #
# Each Instance block collects statistics from a separate named dump1090.    #
# The URL should be the base URL of the webmap, i.e. in the examples below,  #
# statistics will be loaded from http://localhost/dump1090/data/stats.json   #
#----------------------------------------------------------------------------#
<Plugin python>
        ModulePath "/usr/share/graphs1090"
        LogTraces true

        Import "dump1090"
        <Module dump1090>
                <Instance localhost>
#                       URL "http://172.2.0.21"
                        URL "file:///usr/local/share/dump1090-data"
#                       URL_978 "http://localhost/skyview978"
                </Instance>
        </Module>

#       Import "system_stats"
#       <Module system_stats>
#               placeholder "true"
#       </Module>
</Plugin>

#<Chain "PostCache">
#       <Rule>
#               <Match regex>
#                       Plugin "^cpu$"
#                       PluginInstance "^[0-9]+$"
#               </Match>
#               <Target write>
#                       Plugin "aggregation"
#               </Target>
#               Target stop
#       </Rule>
#       Target "write"
#</Chain>
```
Lots of plugins disabled as I do not need them, plus they do not work (as expected) inside a Docker container.




List of changes:

* ganglia-devel is not available in el8 yet
* gpsd-devel is not available in el8 yet
* libmodbus-devel is not available in el8 yet
* liboping-devel is not available in el8 yet
* mosquitto-devel is not available in el8 yet
* fix python dep in el8
* disable liblvm
* dependency problem while configuring smart
* add check_uptime

Changelog: update specfile for EL8

Change-Id: I55323d7d8723a3030219a463314ec44c32d8df60
For Redis plugin - collect replication offsets
ChangeLog: redis plugin: add collect master_repl_offset and slave_repl_offset