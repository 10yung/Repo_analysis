Hello, 

I'm trying to install QKD for developing in C# and command line. So I installed the .NET Core SDK version 3.1.100 x64, then I tried to install templates with command line : 
dotnet new -i Microsoft.Quantum.ProjectTemplates

But this command line give me an error : 
C:\Users\Julien\.templateengine\dotnetcli\v3.1.100\scratch\restore.csproj : error NU1101: Package Microsoft.Quantum.ProjectTemplates not found. no package associated to this ID exists in ressources : C:\Program Files\dotnet\sdk\NuGetFallbackFolder
  Restoration failed 195,48 ms for C:\Users\Julien\.templateengine\dotnetcli\v3.1.100\scratch\restore.csproj.

(I have translated it from french).

My computer is Windows 10 x64.

I made exactly same steps on an other computer (Windows 10 x64 also with same .NET SDK version) and it works well and I'm able to run the "hello world" Q# sample.

I suspect the reason is because I have Visual Studio 2013 installed on the computer, do you think it could be the reason ? Any help to solve my problem ? 

Thank you very much !

Best regards.

Julien.
Another great hire inbound for Team Quantum!

This PR parallels microsoft/quantumlibraries#200 by updating the existing half-moons sample to use the new API features in that PR, and by adding a new sample based on the wine dataset that demonstrates constructing classifier structures in Q#. This PR also prepares both samples for eventual onboarding into the samples browser by adding appropriate README.md files.
1) Installed a fresh Visual Studio 2019.
2) Added latest Q# from under "extensions"
3) Created Q# application "project, new, q# console app"
4) Compile -- or just sit there long enough and IDE will give the error
    "error activating the remote language server. Q# Language Extension" on every compile.

This was reported by someone else on (now closed) issue #116 back in 2018 for VS 2017. In that case it was fixed with an update. Maybe this is a regression?

ActivityLog.xml has this:

  <entry>
    <record>697</record>
    <time>2020/01/04 04:24:38.261</time>
    <type>Error</type>
    <source>Q# Language Extension</source>
    <description>System.OperationCanceledException: The operation was canceled.&#x000D;&#x000A;   at System.Threading.CancellationToken.ThrowOperationCanceledException()&#x000D;&#x000A;   at System.IO.Pipes.NamedPipeServerStream.EndWaitForConnection(IAsyncResult asyncResult)&#x000D;&#x000A;   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)&#x000D;&#x000A;--- End of stack trace from previous location where exception was thrown ---&#x000D;&#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&#x000D;&#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&#x000D;&#x000A;   at Microsoft.Quantum.QsLanguageExtensionVS.QsLanguageClient.&lt;ActivateAsync&gt;d__24.MoveNext()&#x000D;&#x000A;--- End of stack trace from previous location where exception was thrown ---&#x000D;&#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&#x000D;&#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&#x000D;&#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)&#x000D;&#x000A;   at Microsoft.VisualStudio.LanguageServer.Client.RemoteLanguageClientInstance.&lt;InitializeAsync&gt;d__65.MoveNext()&#x000D;&#x000A;--- End of stack trace from previous location where exception was thrown ---&#x000D;&#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&#x000D;&#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&#x000D;&#x000A;   at Microsoft.VisualStudio.Threading.ThreadingTools.&lt;WithCancellationSlow&gt;d__12.MoveNext()&#x000D;&#x000A;--- End of stack trace from previous location where exception was thrown ---&#x000D;&#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)&#x000D;&#x000A;   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)&#x000D;&#x000A;   at Microsoft.VisualStudio.LanguageServer.Client.RemoteLanguageClientInstance.&lt;ActivateLanguageClientAsync&gt;d__63.MoveNext()&#x000D;&#x000A;--- End of stack trace from previous location where exception was thrown ---&#x000D;&#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)</description>
  </entry>







It seems like most all of the LaTeX math rendering for these pages is broken, see on this page \ket in the first line.

---
#### Document Details

⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*

* ID: 139b4939-525f-d0b4-40e4-c912f5fcff48
* Version Independent ID: b00ec85c-4a1f-9706-3ea6-921e4f463d6c
* Content: [R1 operation (Microsoft.Quantum.Intrinsic) - Q# reference - Microsoft Quantum](https://docs.microsoft.com/en-us/qsharp/api/qsharp/microsoft.quantum.intrinsic.r1?view=qsharp-preview#feedback)
* Content Source: [api/qsharp/microsoft.quantum.intrinsic.r1.yml](https://github.com/MicrosoftDocs/quantum-docs-pr/blob/live/api/qsharp/microsoft.quantum.intrinsic.r1.yml)
* Product: **quantum**
* GitHub Login: @anpaz-msft
This is the notebook I used to introduce students to Q#. It goes a lot deeper on the language and its features.
Currently, most samples only have a C# host program. It would be nice if more or even most samples demonstrated how to use Python to call into Q#.

## Samples with Python Hosts ##

- algorithms
  - [x] chsh-game
  - [x] database-search
  - [x] integer-factorization
  - [x] oracle-synthesis
  - [x] order-finding
  - [x] reversible-logic-synthesis
  - [x] simple-grover
- arithmetic
  - adder-example (n/a: no host program for this sample)
- characterization
  - [x] phase-estimation
- chemistry
  - [ ] AnalyzeHamiltonian
  - [ ] CreateHubbardHamiltonian
  - [ ] GetGateCount
  - [ ] <s>IntegralData</s> (n/a: static sample data)
  - [ ] <s>LithiumHydrideGUI</s> (n/a: demonstrates C# ↔ Electron interaction)
  - [ ] MolecularHydrogen 
  - [ ] <s>MolecularHydrogenGUI</s> (n/a: demonstrates C# ↔ Electron interaction)
  - [x] PythonIntegration
  - [ ] RunSimulation
  - [ ] SimulateHubbardHamiltonian
- diagnostics
  - [ ] <s>unit-testing</s> (n/a: demonstrates xunit integration)
- error-correction
  - [x] bit-flip-code
- getting-started
  - [ ] <s>intro-to-iqsharp</s> (n/a: specific to IQ#)
  - [x] measurement
  - [x] simple-algorithms
  - [x] teleportation
- interoperability
  - [ ] <s>fsharp</s> (n/a)
  - [x] python
-  numerics
  - [x] CustomModAdd
  - [x] EvaluatingFunctions
  - [x] ResourceCounting
- runtime
  - [ ] <s>oracle-emulation</s> (n/a: specific to extending runtime with C#)
  - [ ] <s>state-visualizer</s> (n/a: demonstrates using Q# with ASP.NET Core)
- simulation
  - h2
    - [x] command-line
    - [ ] <s>gui</s> (n/a: demonstrates C# ↔ Electron interaction)
  - [x] hubbard 
Is there any sample for a k-means algorithm available?