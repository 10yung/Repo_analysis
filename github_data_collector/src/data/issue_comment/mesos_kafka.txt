When mesos agent start with --isolation=cgroups/devices,filesystem/linux,gpu/nvidia
For example:
sudo ./bin/mesos-agent.sh --ip=192.168.0.251 --no-hostname_lookup --master=192.168.0.215:5050 --work_dir=/work/data/mesos-slavels2 --no-switch_user --isolation=cgroups/devices,filesystem/linux,gpu/nvidia

then the broker start will failed with timeout.
$ ./kafka-mesos.sh broker start 1
Error: broker start timeout

we found the gpu/nvidia isolation is the real cause.  Without gpu/nvidia, everything works fine.
Added support for rest api's with json requests.
Modified test cases for testing the jsonr requests.
Here is the reference: 
https://travis-ci.org/mesos/kafka/jobs/264639772

Error Message : 
```
Error resolving plugin [id: 'de.undercouch.download', version: '2.1.0']
> Could not GET 'https://plugins.gradle.org/api/gradle/2.8/plugin/use/de.undercouch.download/2.1.0'.
   > peer not authenticated
```

Resolution: 
* Updating to gradle 4.1 and de.undercouch.download to 3.2.0 fixed to issue. 

I updated build.gradle and gradle-wrapper.properties in this [PR](https://github.com/mesos/kafka/pull/313)
Since [commit ed0ff0732990c2fc4a7f3ef192b15a34ca2f12b3](https://github.com/mesos/kafka/commit/ed0ff0732990c2fc4a7f3ef192b15a34ca2f12b3#diff-f62e82d4caa4d616bbb8e8489b2ac8e0)
The listeners config is forced to only PLAINTEXT when bind-address is defined which effectively disable the ability to use more than one listeners.
This will be useful in dynamic reservations.
#### Modifications
* Added a disk param to the Broker Model & disk size defaults to 1024.
* Added Test cases for Disk params.
Hi, I used mesos-kafka in mesos version 1.3.0.
However, it was not started up because it was built mesos version 0.28.0.
So, I update mesos version to 1.3.0. 

I checked running in mesos version 1.3.0.

Please this pull request.
Thanks
We have hit this issues multiple times where the framework is restarted when brokers are starting up, during reconciliation the framework fails to register an endpoint on that broker as it does not recognise _TASK_STARTING_ as a valid state.

This eventually leaves the broker state as follows when running:

```js
{
    "id": "0",
    ...
    "task": {
        "id": "kafka-0-20a281db-069a-4885-96c2-53a6cc3db252",
        "slaveId": "c30ad8fa-8a52-45fb-bcf0-29e22140c8a3-S24",
        "executorId": "kafka-0-02690702-ae31-415e-8a0d-44d85d9636d1",
        "hostname": "localhost",
        "attributes": {},
        "state": "running"
    },
    ...
}
```

As the framework knows the hostname and port (from the mesos offer it receives) that the broker will start up on, wouldn't it make sense to add the endpoint initially when launching the task rather than appending to it after the task has started.
System Status
Operating System: CentOS 7
Kernal Version: 3.10.0-514.el7.x86_64
Zookeeper: 3.4.9
Mesos: 1.3.0
mesoskafka: master or 0.10 (both occurred same error)

I kept receiving error when I start broker. It is ok to show broker list and add broker.

    $ ./kafka-mesos.sh broker list
    brokers:
      id: 0
      active: true
      state: starting
      resources: cpus:1.00, mem:2048, heap:1024, port:auto
      jvm-options: 
      failover: delay:1m, max-delay:10m
      stickiness: period:10m
      metrics: 
        collected: 1970-01-01 09:00:00+09
        under-replicated-partitions: 0
        offline-partitions-count: 0
        is-active-controller: 0

    $ ./kafka-mesos.sh broker start 0
    "Error: java.io.IOException: 400 - java.lang.NullPointerException"

This is my kafka-mesos.properties
mesos1, 2, 3 and master is hostname.
it is saved in /etc/hosts
  
    debug=true
    user=vagrant
    storage=zk:/kafka-mesos 
    master=zk://master:2181/mesos 
    zk=mesos1:2181,mesos2:2181,mesos3:2181
    api=http://master:7000

It is difficult to figure out that I did setup wrongly.
Could you help me?
We had several occasions where the mesos slave with running broker got restarted, the framework tries to reconcile the broker task, then the framework got restarted while the broker state is "reconciling" (saved in zk), after that the framework will be stuck due to the reconciling broker state which wasn't reconciling at all. It will not start any brokers even though the broker is no longer running, the only way I found to fix this is to manually go into zk `/kafka-mesos` node and delete all the "task" broker attributes that contains "reconciling" state from the brokers json. 

The code causing this problem: 
https://github.com/mesos/kafka/blob/master/src/scala/main/ly/stealth/mesos/kafka/scheduler/mesos/TaskReconciler.scala#L124

Maybe it should resume the reconciliation or remove the check all together, rather than do nothing if the state is reconciling. 
I’m doing a POC to deploy Kafka as an application on Mesos Cluster. I came across these 2 codebases on github. One developed by apache-mesos ([github page](https://github.com/mesos/kafka)) & other developed by mesosphere and can run only on DCOS ([github page](https://github.com/mesosphere/dcos-kafka-service/)).

Question: Would like to know if there are any differences between DCOS-Kafka & mesos-Kafka in terms of features and extended functionality.

Regarding Mesos-Kafka:
I don’t see active participation on github (and some open issues) for mesos-kafka in the past months. Can I assume that the service is robust enough that I can use in production environment? Any Inputs on this would be helpful.

// Not sure if this is the correct place to ask or not. 