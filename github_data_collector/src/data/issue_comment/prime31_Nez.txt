The Image scales accordingly if "SetScale" is used. Before a image bigger than the "Image" Element was drawn.
Changes the initial speed of  `ScrollPane` from `0.005f` (too slow) to `0.05f` (reasonable).
Not sure if this is intended, but function SpritesFromAtlas on Sprite.cs isn't exiting once MaxCellsToInclude number has been reached, as the break function isn't affecting the outer "for(;;)", a simple solution for that would be to add the following line before the break function to exit both loops:

rows = -1;
They were offset.
This PR also contains a small piece of another PR (tileset.Image.Texture -> obj.Tile.TilesetTile.Image.Texture).
Shouldn't break anything.
I might be misunderstanding something here, but it would appear that the package on NuGet for v0.10.0 is missing some of the changes that were made to Sprites/Animations. Namely it still contains Sprite instead of SpriteRenderer and SpriteAnimation instead of SpriteAnimator.

There could be more it's missing, I'm not sure.

When building to target Android against 0.9.4, I receive error message 

Can not resolve reference: `System.Drawing`, referenced by `Nez`. Please add a NuGet package or assembly reference for `System.Drawing`, or remove the reference to `Nez`.	

Adding a nuget reference to System.Drawing.Common isn't any help. I'm able to build successfully against Windows OpenGL, however. Issue is fixed when downgrading to Nez 0.9.2
It seems that there is no inspector for `byte` and attempting to open an inspector of an entity with a component containing a public `byte` will crash the application.

Is this the intent?

**Edit:**
I was able to add support pretty easily following suit with how you handle integers. It looks like you convert all integer types to Int32 and then use that value in the slider. I just did the same and made sure to pass a range of 0-255 if none and trim the range attribute to 0-255 if its out of range.
![image](https://user-images.githubusercontent.com/8792184/64026493-8ec67c80-cb47-11e9-9e00-d13a97f2636b.png)

For some reason when aligning a label (maybe anything) inside a container it does the above.
Is this just me?

Wrapping the label inside a stack doesn't cause this issue, however stack has no background support.
**Use case**
Deserializing an object whilst using a JsonObjectFactory.
In this specific case I'm trying to Deserialize an entity. Since Transform doesn't have a parameterless constructor a JsonObjectFactory has to be used to create the Transform during deserialization. 

```{
		"@id": "1",
		"@type": "Nez.Entity",
		"name": "referenced_entity",
		"transform": {
			"@id": "2",
			"@type": "Nez.Transform",
			"position": {
				"@id": "3",
				"@type": "Microsoft.Xna.Framework.Vector2",
				"X": 240,
				"Y": 345
			},
			"scale": {
				"@id": "4",
				"@type": "Microsoft.Xna.Framework.Vector2",
				"X": 1,
				"Y": 1
			},
			"rotation": 0,
			"entity": {
				"@ref": "1"
			}
		},
		"components": {
			"@id": "5",
			"@type": "Nez.ComponentList",
			"_components": {
				"@id": "6",
				"@type": "Nez.FastList`1[[Nez.Component, Nez, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]",
				"buffer": [
					{
						"@id": "7",
						"@type": "NezHoorn.Components.Editor.EditorEntity",
						"entity": {
							"@ref": "1"
						}
						"scale": {
							"@ref": "4"
						},
					},
					{
						"@id": "8",
						"@type": "NezHoorn.Components.IDComponent",
						"ID": -1306410247,
						"entity": {
							"@ref": "1"
						}
					},
					null,
					null,
					null
				],
				"length": 2
			},
			"_componentsToAdd": [
			]
		}
```

A JsonTypeConverter is used while serializing to serialize some of the fields as well.

```    
public class TransformTypeConverter : JsonTypeConverter<Transform>
    {
        public override void OnFoundCustomData(Transform instance, string key, object value)
        {
            throw new NotImplementedException();
        }

        public override void WriteJson(IJsonEncoder encoder, Transform value)
        {
            if (value.parent != null)
            {
                encoder.EncodeKeyValuePair("parent", value.parent);
                encoder.EncodeKeyValuePair("localScale", value.localPosition);
                encoder.EncodeKeyValuePair("localPosition", value.localPosition);
                encoder.EncodeKeyValuePair("localRotation", value.localRotation);
            }
            encoder.EncodeKeyValuePair("position", value.position);
            encoder.EncodeKeyValuePair("scale", value.scale);
            encoder.EncodeKeyValuePair("rotation", value.rotation);
        }
    }

    public class TransformJsonFactory : JsonObjectFactory<Transform>
    {
        public override Transform Create(Type objectType, IDictionary objectData)
        {
            Entity entity = objectData["entity"] as Entity;
            return new Transform(entity);
        }

        public override bool WantsExclusiveWrite => false;
    }
```

**Problem**
Because the Transform is created through the Factory, the "position" and  "scale" ids are never added to the reference tracker. 

When the "EditorEntity" object is deserialized, the "@ref":"4" cannot be resolved, since it was skipped over by the Factory.

**Proposed Solution**
The only solution I can think of is to pass reference to the JsonDecoder (and referenceTracker ) in the JsonObjectFactory's Create Method, or give the JsonObjectFactory access a way to add a reference to the referenceTracker in a different way.

This same situation exists in the "OnFoundCustomData" in the JsonTypeConverter, there are times that you want to decode the data and put it into the referenceTracker.