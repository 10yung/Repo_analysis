## Proposed changes

Added a link to MacDriver caps like other drivers

## Types of changes

What types of changes does your code introduce to Appium?
_Put an `x` in the boxes that apply_

- [ ] Bugfix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] Documentation Update (if none of the other choices apply)

## Checklist

_Put an `x` in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code._

- [x] I have read the [CONTRIBUTING](https://github.com/appium/appium/blob/master/CONTRIBUTING.md) doc
- [x] I have signed the [CLA](https://cla.js.foundation/appium/appium)
- [ ] Lint and unit tests pass locally with my changes
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] I have added necessary documentation (if appropriate)
- [ ] Any dependent changes have been merged and published in downstream modules

## Further comments

If this is a relatively large or complex change, kick off the discussion by explaining why you chose the solution you did and what alternatives you considered, etc...

## The problem
Appium forces ListView to create view for all items. This can hang up the app when the ListView contains a lot of items. 

## Environment

* Appium version (or git revision) that exhibits the issue: 1.15.1
* Last Appium version that did not exhibit the issue (if applicable): -
* Desktop OS/version used to run Appium:  macOS Catalina 10.15.2
* Node.js version (unless using Appium.app|exe): -
* Mobile platform/version under test: iOS 13.3
* Real device or emulator/simulator: simulator
* Appium CLI or Appium.app|exe: Appium.app
* Xcode 11.3
* Visual Studio 2019

## Details
![AppiumDesktop](https://user-images.githubusercontent.com/59954746/72532224-0f321380-3884-11ea-9d53-bfc5f4198460.png)

For comparison, the hierarchy receiving from appium and the real hierarchy of visible elements:
[pageSource_appium.txt](https://github.com/appium/appium/files/4071803/pageSource_appium.txt)
[UIHierarchy.txt](https://github.com/appium/appium/files/4071804/UIHierarchy.txt)

## Link to Appium logs
[appium-server-logs.txt](https://github.com/appium/appium/files/4071740/appium-server-logs.txt)

## Code To Reproduce Issue
[App1.zip](https://github.com/appium/appium/files/4071745/App1.zip)

### Expected behavior
   Appium creates a hierarchy for visible items only

## Proposed changes

document for JS the image detection based on forums discussion.
Duplicated PR to try the CLA signing again.

## Types of changes

- [ ] Bugfix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x ] Documentation Update (if none of the other choices apply)

## Checklist

_Put an `x` in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code._

- [ x] I have read the [CONTRIBUTING](https://github.com/appium/appium/blob/master/CONTRIBUTING.md) doc
- [x ] I have signed the [CLA](https://cla.js.foundation/appium/appium)
- [x ] Lint and unit tests pass locally with my changes
- [x ] I have added tests that prove my fix is effective or that my feature works
- [x ] I have added necessary documentation (if appropriate)
- [x ] Any dependent changes have been merged and published in downstream modules

## Further comments

If this is a relatively large or complex change, kick off the discussion by explaining why you chose the solution you did and what alternatives you considered, etc...

## The problem
WebDriverAgentRunner: [Xcode] testRunner encountered an error (Encountered a problem with the test runner after launch. (Underlying error: Lost connection to DTServiceHub))

Difficult to upgrade to latest version. Is there any workaround or solution to avoid these issue with same configuration.

## Environment

* Appium version (or git revision) that exhibits the issue: v1.12.1
* Last Appium version that did not exhibit the issue (if applicable): 
* Desktop OS/version used to run Appium: Mac Mojave
* Node.js version (unless using Appium.app|exe): 10.*
* Npm or Yarn package manager: npm
* Mobile platform/version under test: iOS 12.0.1
* Real device or emulator/simulator: Real Device
* Appium CLI or Appium.app|exe: Appium CLI
* Xcode: 10.3

## Details
Getting WebDriverAgentRunner: [Xcode] testRunner encountered an error (Encountered a problem with the test runner after launch. (Underlying error: Lost connection to DTServiceHub))
after few minutes of run

## Link to Appium logs
https://gist.github.com/shibupanda/a268b50ff0fe0518785d95fc3ae82bc8

## Code To Reproduce Issue [ Good To Have ]


## The problem

The app crashes whenever the automation framework opens a specific app activity. This issue cannot be reproduced by manually accessing the screen in question. 

## Environment

* Appium version: 1.15.1
* Last Appium version that did not exhibit the issue (if applicable): 1.15.1
* Desktop OS/version used to run Appium: Mac OS Catalina 10.15.2
* Node.js version: v10.5.0
* Mobile platform/version under test: iOS13.3 
* Simulator
* Appium CLI
* Xcode 11.3

## Details

This issue occurred as a result of compiling the app under test with Xcode 11.3. 
Appium, the Appium Java bindings, Selenium or anything else were not changed between tests and did not exhibit this issue while the app was compiled with Xcode 10.2.1. 

The only reference i found to this issue is https://forums.developer.apple.com/thread/122972 . 

I was wondering if anyone else encountered any similar issues with native apps after switching to Xcode 11.3 .

## Link to Appium logs
Link to the error message i managed to catch that had any meaningful info on the cause of the crash:
https://gist.github.com/Markaleth/d4ece56461f187b31f5a14edc13e1413

EDIT: Reproduced with Xcode 11.3.1 as well. :( 
## The problem

TouchActions such as swipe, scroll or drag and drop do not work on CoordinatorLayout

## Environment

* Appium 1.16.0
* Windows/iOS
* Node.js v12.13.1
* Npm 6.13.1
* Android 9/ iOS 13
* Samsung A70, iPhone X, Emulators

## Details

The app I am trying to test has a part of screen that needs to be pulled upwards so you can enter data. The problem is appium sees the pull action as done but in reality no action is taken.

I have made a simple method for pulling the CoordinatorLayout up

```
public void drag(WebElement el1, String direction) {

    TouchAction drag = new TouchAction(d);
        int startX = el1.getLocation().getX();
        int startY = el1.getLocation().getY();
        int endY = startY - 500;
        drag.longPress(PointOption.point(startX,startY)).waitAction(waitOptions(ofMillis(2000))).moveTo(PointOption.point(startX, endY)).perform().release();
```

Now this works everywhere, and I mean everywhere in the app except on that one place with CoordinatorLayout. Just nothing happens and it continues to next steps. 

Is there a way to switch focus on that layout? Or frame? I have seen these kinda issues around on internet but no one answered them yet

Pls help, tyvm

## The problem
Hello! i try to start my test in jenkins ci. In my application i wanna test facebook login. 

## Environment
* Appium v1.16.0
* Operating System: Ubuntu 16.04.6 LTS
            Kernel: Linux 4.15.0-74-generic
      Architecture: x86-64
* Mobile platform/version under test: Android api 29
* Real device or emulator/simulator: emulator

## Details

I read about context and my test code look like this.

```        
        checkoutToWebContext();
        driver.findElement(By.id("m_login_email")).sendKeys(login);
        driver.findElement(By.id("m_login_password")).sendKeys(password);
        driver.findElement(By.id("u_0_4")).click();

        wait.until(ExpectedConditions.elementToBeClickable(
            By.name("__CONFIRM__"))).click();

        checkoutToNativeContext();

....
 private void checkoutToWebContext() {
        for (final String s : driver.getContextHandles()) {
            System.out.println("Context " + s);
            if (s.contains("WEBVIEW")) {

                driver.context(s);
            }
        }
    }

    private void checkoutToNativeContext() {
        for (final String s : driver.getContextHandles()) {
            if (s.contains("NATIVE_APP")) {
                System.out.println("Context2 " + s);
                driver.context(s);
            }
        }
    }

```

When i run test in my mac all it's ok. I see 2 contexts (Native and Web)  in log, but when i run test in ci i see only one context ( Native ). 

My shell script:
```
set -e
set -v

adb kill-server || true
adb start-server

# start AVD
$ANDROID_HOME/emulator/emulator @AppiumDevice -ports 5554,5555 -no-audio -no-window -no-snapshot > ~/emulator.log 2>&1 &
sleep 1
adb -s emulator-5554 wait-for-device shell getprop dev.bootcomplete

# start Appium
appium > ~/appium.log 2>&1 &
sleep 1

adb -s emulator-5554 uninstall com.test.test || true
adb -s emulator-5554 install openplay/build/outputs/apk/app/release/app.apk

./gradlew appiumtests:testReleaseUnitTest

# stop AVD
adb -s emulator-5554 emu kill
```

Is it possible that appium can't find web context because my emulator run without display? I don't shore because when i run seem configuration in my laptop it's fine (with out display too)

How can i run appium test in ci? What can affect the application server after which it starts to process only 1 context?

I read about chromedriver but it's not help... Please help me :) 
iOS app is built using Xamarin library. When we use Appium XCUITest inspector to identify the elements, it identifies pickercontrol elements in app. But when I print the pagesource, those pickerelements are not being shown. These controls are shown with class as XCUIElementTypeOther
instead of XCUIElementTypeTextField(as found in inspector)

Environment
Appium version (or git revision) that exhibits the issue: 1.15.1
Last Appium version that did not exhibit the issue (if applicable): NA
Desktop OS/version used to run Appium: Mac OS 10.15
Node.js version (unless using Appium.app|exe): 10.5
Npm or Yarn package manager:NPM
Mobile platform/version under test: iOS 12, iOS 13
Real device or emulator/simulator: Simulator
Appium CLI or Appium.app|exe: Both
Details
Xamarin Nuget Package version - 4.8

## Proposed changes

Update caps for https://github.com/appium/appium-espresso-driver/pull/526

## Types of changes

What types of changes does your code introduce to Appium?
_Put an `x` in the boxes that apply_

- [ ] Bugfix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] Documentation Update (if none of the other choices apply)

## Checklist

_Put an `x` in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code._

- [x] I have read the [CONTRIBUTING](https://github.com/appium/appium/blob/master/CONTRIBUTING.md) doc
- [x] I have signed the [CLA](https://cla.js.foundation/appium/appium)
- [ ] Lint and unit tests pass locally with my changes
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] I have added necessary documentation (if appropriate)
- [ ] Any dependent changes have been merged and published in downstream modules

## Further comments

If this is a relatively large or complex change, kick off the discussion by explaining why you chose the solution you did and what alternatives you considered, etc...

## The problem

While running testNG tests on a real device, I noticed that basic actions of login and sign up are taking up to 25 mins on OS 13 iPhone XS Max when the same flows run on OS 12 iPhone take only 3 mins. Accessibility IDs and code is exactly the same. iOS app code is in Swift and we write tests in Java (run via testng.xml)

## Environment

* Appium version (or git revision) that exhibits the issue: Appium version 1.15.1
* Last Appium version that did not exhibit the issue (if applicable): N/A
* Desktop OS/version used to run Appium: MacOS v10.14.4
* Node.js version (unless using Appium.app|exe): N/A (using Appium.app)
* Npm or Yarn package manager: NPM v6.12.0
* Mobile platform/version under test: iPhone OS 12 and OS 13 comparison
* Real device or emulator/simulator: Real device
* Appium CLI or Appium.app|exe: Appium.app

There are no error logs since tests don't fail. Just that they take exponentially longer. 
Any known solutions I can try out?
