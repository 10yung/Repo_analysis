

I am trying to run in Centos 7 environment. 
connect-distributed.properties:

plugin.path=/opt/connectors/kafka-connect-jdbc/

name=source-sqlserver-user
connector.class=io.confluent.connect.jdbc.JdbcSourceConnector
tasks.max=1
topic.prefix=my-timestamp
connection.url=jdbc:sqlserver://127.0.0.1:1433;database=databasenam
e;username=username;password=password


version: '2'
services:
  kafka-cluster:
    image: landoop/fast-data-dev:cp3.3.0
    environment:
      ADV_HOST: 127.0.0.1     
      RUNTESTS: 0            
      volumes:
      - /mssql-jdbc-7.4.1.jre12.jar:/opt/confluent-3.3.0/share/java/kafka-connect-jdbc/mssql-jdbc-7.4.1.jre12.jar     
    ports:
      - 2181:2181                            # Zookeeper
      - 3030:3030                           # Landoop UI
      - 8081-8083:8081-8083       # REST Proxy, Schema Registry, Kafka Connect ports
      - 9581-9585:9581-9585       # JMX Ports
      - 9092:9092                         # Kafka Broker
The goal of that feature is to add possibility for user of image to define Kafka topics that will be created on startup. It's inspired by wurstmeister/kafka-docker.
https://github.com/wurstmeister/kafka-docker/blob/master/create-topics.sh
A feedback given that people ignore the message in the docker run logs
and when they open localhost:3030 page they see a 502 bad gateway which
makes them to understand that Lenses failed to run.

Custom error page with autorefresh every 5s for 502. May later we need
to have a status dashboard to show that all services are up and running.

Issue: FEED-68
Hi, when enabling SSL, and stopping and starting the docker-compose machine, the listeners config gets duplicated at https://github.com/Landoop/fast-data-dev/blob/9e83aa4152fa2b592aa23d50e6ebb9a158f6fb65/setup-and-run.sh#L423

This results in Kafka not starting as the SSL binding is more than one in the properties.

To reproduce, just enable SSL in docker-compose, start, stop and start again and Kafka will crash repeatedly with:

`
     [2019-09-05 18:50:28,828] ERROR Exiting Kafka due to fatal exception (kafka.Kafka$)
     java.lang.IllegalArgumentException: requirement failed: Each listener must have a different port,          listeners: PLAINTEXT://127.0.0.1:9092,SSL://127.0.0.1:9093,SSL://127.0.0.1:9093
	at scala.Predef$.require(Predef.scala:277)
	at kafka.utils.CoreUtils$.validate$1(CoreUtils.scala:303)
	at kafka.utils.CoreUtils$.listenerListToEndPoints(CoreUtils.scala:314)
	at kafka.server.KafkaConfig.advertisedListeners(KafkaConfig.scala:1298)
	at kafka.server.KafkaConfig.validateValues(KafkaConfig.scala:1360)
	at kafka.server.KafkaConfig.<init>(KafkaConfig.scala:1338)
	at kafka.server.KafkaConfig.<init>(KafkaConfig.scala:1028)
	at kafka.server.KafkaConfig$.fromProps(KafkaConfig.scala:1008)
	at kafka.server.KafkaServerStartable$.fromProps(KafkaServerStartable.scala:28)
	at kafka.Kafka$.main(Kafka.scala:59)
	at kafka.Kafka.main(Kafka.scala)
`
When I enter a running Lenses Box container `zookeeper-server-stop` and `kafka-server-stop` don't seem to work.

```bash
docker exec -it lenses-box bash
zookeeper-server-stop #=> No zookeeper server to stop
kafka-server-stop #=> No kafka server to stop
```

Is this expected behavior? What is the proper way to restart Zookeeper and Kafka in Lenses Box?

Thank you.
Getting error while creating a new connector (its replicable even online in the demo)
![image](https://user-images.githubusercontent.com/10949663/59570650-d06f7d00-9058-11e9-81ee-8270eff583a1.png)
the logs as seen here https://fast-data-dev.demo.landoop.com/logs/connect-distributed.log
```
2019-06-16 19:13:02,780] INFO 127.0.0.1 - - [16/Jun/2019:19:13:02 +0000] "GET /connector-plugins/ HTTP/1.1" 200 5468  3 (org.apache.kafka.connect.runtime.rest.RestServer:60)
[2019-06-16 19:13:02,783] INFO 127.0.0.1 - - [16/Jun/2019:19:13:02 +0000] "GET /connectors HTTP/1.1" 200 15  1 (org.apache.kafka.connect.runtime.rest.RestServer:60)
[2019-06-16 19:13:03,063] ERROR Uncaught exception in REST call to /connector-plugins/com.eneco.trading.kafka.connect.twitter.TwitterSourceConnector/config/validate (org.apache.kafka.connect.runtime.rest.errors.ConnectExceptionMapper:61)
org.apache.kafka.common.config.ConfigException: Must configure one of topics or topics.regex
	at org.apache.kafka.connect.runtime.SinkConnectorConfig.validate(SinkConnectorConfig.java:96)
	at org.apache.kafka.connect.runtime.AbstractHerder.validateConnectorConfig(AbstractHerder.java:269)
	at org.apache.kafka.connect.runtime.rest.resources.ConnectorPluginsResource.validateConfigs(ConnectorPluginsResource.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory.lambda$static$0(ResourceMethodInvocationHandlerFactory.java:76)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:148)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:191)
	at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$TypeOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:243)
	at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:103)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:493)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:415)
	at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:104)
	at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:277)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:272)
	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:268)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:316)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:298)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:268)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:289)
	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:256)
	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:703)
	at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:416)
	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:370)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:389)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:342)
	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:229)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:865)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1655)
	at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:311)
	at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:265)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1595)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1317)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1564)
	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1219)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:126)
	at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
	at org.eclipse.jetty.server.Server.handle(Server.java:531)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:762)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:680)
	at java.lang.Thread.run(Thread.java:748)
[2019-06-16 19:13:03,067] INFO 127.0.0.1 - - [16/Jun/2019:19:13:03 +0000] "PUT /connector-plugins/com.eneco.trading.kafka.connect.twitter.TwitterSourceConnector/config/validate HTTP/1.1" 500 75  10 (org.apache.kafka.connect.runtime.rest.RestServer:60)
[2019-06-16 19:13:03,06
```
Hello,

I was running the docker container on CentOS and saw the following error messages in the browsers network connections while accessing the UI on 3030: 
Status Code: 504 Gateway Timeout
Response: Unknown Host Description: Unable to locate the server named "<em>0.0.0.0</em>" --- the server does not have a DNS entry.  Perhaps there is a misspelling in the server name, or the server no longer exists.  Double-check the name and try again.

When checking /var/run/caddy/Caddyfile, the proxy entries are like:
```
proxy /api/schema-registry 0.0.0.0:8081 {
    without /api/schema-registry
}
```

Changing `0.0.0.0` to `127.0.0.1` solved the issue for me.


I can not create twitter connector 
[https://drive.google.com/file/d/1lX1dhQom_tnzgV-ahyrpVnfcH3IaUpf5/view?usp=sharing](url)
