
**Proposal**: rename one of the `extern` symbols in `scalanative.unsafe`, or provide an alias for the `def extern`.

**Motivation**: I'm currently working on a compatibility layer for JVM using JNA, using an annotation macro for `@extern` to transform external bindings into the proper JNA calls.

While the conflicting symbols for `extern` work fine as long as the annotation class has no body, this seems to break when needs to be materialized as a class when it holds a member (in this case the `macroTransform`).
From #1653 - the current implementation of `BufferedInputStream` relies on allocating an array the size of mark limit directly. Combined with the standard usage pattern of setting marklimit to `MAX_INT` this will cause a failure with, at least, the boehm GC: The allocator will attempt to allocate a `MAX_INT + overhead` buffer directly and fail.

The solution is to handle `mark` much the same as harmony: Allocate a conservatively sized buffer and resize as necessary. 
llvm4 has been removed from homebrew in https://github.com/Homebrew/homebrew-core/commit/5b9c4d074255b279151636b20dc5e14fa1b0317c
Yeah, it's probably installed on most systems.
Yeah, my system didn't have it.
Yeah, I spent an hour trying to debug this.
The API call to GitHub fails due to a change. The author is always `null` so the Lightbend CLA call in turn fails.

Ready for review.
I have done an upgrade and tried to minimize changes via lots of trial and error.

Here is a list of changes that I couldn't avoid but it is upgrading from `1.5.1` to`2.2.1`.

1. Added `// format: off` in niocharset to avoid some changes.
2. Trailing comments are now aligned.
3. Wrapped return types are now are 4 spaces instead of 2. This is using the default but trying to alter these settings makes more of a diff.
4. Curly brace expansion when they are inlined, `if`, `try` and inside `if({})`. The first 2 are ok but I really dislike the last.
Note: `scalanative.unsafe.Tag` and generated files have the most changes.

If anyone wants to see if they can improve on this, just grab the `.scalafmt.conf` file and give it a try with a current branch.
Under certain circumstances the use of regular expressions seems to leak memory. Here is a code fragment which illustrates the problem: https://pastebin.com/8MR4AXjS

Symptom: on my system (Ubuntu 18.04.1 LTS) I observe a memory leak with the "immix" GC. The process memory increases up to 800 MB before it finishes without error.
With the "boehm" GC I don't observe this leak. The process maximum memory use is around 20 MB.
I don't have tested with "commix" since I'm not working with the latest snapshot but with 0.4.0-M2.

Here is an issue that may be related to this: #817


The goal here is to simplify things for `0.4.x`. So much time has elapsed we are getting behind and missing improvements. In my opinion, `0.13.x` is obsolete and dropping it will not affect users moving forward. This will also reduce our CI load and making working on the project much easier.
Compilation fails when .so files are copied in the "lib" folder (SBT's unmanaged dependencies folder, see https://www.scala-sbt.org/1.x/docs/Library-Dependencies.html).

The error is similar to the one described in this previous issue: https://github.com/scala-native/scala-native/issues/911

```java.lang.UnsupportedOperationException: Neither a jar, nor a directory```

The solution can consist in using a different directory or to change the SBT's "unmanaged dependencies folder". For instance this additional settings will allow to use the "lib" folder to contain .so files:
```unmanagedBase := baseDirectory.value / "jars"```

This behavior should be described in the SN FAQ or in a new troubleshooting section.