Looks like it's missing from the package?
Link https://codesandbox.io/s/7ywk4o0xmj
I have a list of posts, and I have the post.
The list item is visually very similar to the post header and I'm trying to morph it.

But I have two problems here: I need to create morph 'instances' dynamically, somethink like id based, "on demand", and I need to share this instance to different files/components.

Something like this:

listing page:
```jsx
const PostTeaser = ({ ...post }) => {
  const useMorphId(`post-${post.id}`)
  return <div {...morph}>...</div>
}

const PostList = ({ posts }) => (
  <div>{posts.map(post => <PostTeaser {...post} key={post.id} />)}</div>
)
```
---
post page:
```jsx
const PostHeader = ({ ...post }) => {
  const useMorphId(`post-${post.id}`)
  return <div {...morph}>...</div>
}

const PostPage = ({ post }) => (
  <div>
    <PostHeader {...post} />
    <div>...</div>
  </div>
)
```

After many attempts and tested workarounds, I was able to do it using a Context that saves the instances by id in its state, and a hook that ask for a instance by id: if it doesn't exist, it creates, if it exists, it uses the existing one.

Code: https://codesandbox.io/s/nervous-mendeleev-ynrbq
(the magic is in morpher.js, and morphs are in pages/posts.js and pages/post.js)

But... questions:
1) Is there an easier way to satisfy this use case?
2) Is there a more trivial way to share instances without prop drilling or context?
I wanted to animate an image to resize but this only seems to work when I use the player example and have it animate between routes.

Using it like this makes the images disappear and appear at the end of the animation, the div container animates correctly though, it only seems to be an issue with images. Also the image type makes no impact whatsoever, png, svg, jpg, etc... none animate correctly.

App.js
```javascript
import React, { Component, useState, useEffect } from "react";
import { createGlobalStyle } from "styled-components";
import { useMorph, useMorphKeys, presets } from "react-morph";
import { BrowserRouter as Router, Route } from "react-router-dom";

import "mapbox-gl/dist/mapbox-gl.css";
import { Container } from "./App.style";
import Header from "./components/Header";
import Map from "./components/Map";
import LoadingScreen from "./views/LoadingScreen";
const GlobalStyle = createGlobalStyle`
  html {
    height: 100%;
    width: 100%;
  }
  body {
    height: 100%;
    margin: 0;
    width: 100%;
    & #root {
      height: 100%;
      width: 100%;
    }
  }
`;

function App() {
  const [loaded, setLoaded] = useState(false);
  const morph = useMorph();
  const morphs = useMorphKeys(["logo", "container"]);

   return (
    <Container onClick={() => setLoaded(!loaded)}>
        <GlobalStyle />
        {!loaded ? <LoadingScreen morphs={morphs} /> : <Header morphs={morphs} />}
    </Container>
  );
}

export default App;
```

Loadingscreen:
```javascript
import React from "react";
import logo from "../../assets/logo.png";
import { Container, Logo } from "./loadingScreen.style";

const LoadingScreen = ({ morphs }) => (
  <Container {...morphs.container}>
    <img {...morphs.logo} src={logo} />
  </Container>
);

export default LoadingScreen;
```

Header:
```javascript
import React from "react";
import logo from "../../assets/logo.png";
import { HeaderContainer, Logo, Menu, Icon, MobileMenu } from "./header.style";
import doIcon from "../../assets/icons/do.svg";
import drinkIcon from "../../assets/icons/drink.svg";
import eatIcon from "../../assets/icons/eat.svg";
import seeIcon from "../../assets/icons/see.svg";

const Header = ({ morphs }) => (
  <HeaderContainer {...morphs.container}>
    <img {...morphs.logo} src={logo} />
    <Menu>
      <Icon icon={drinkIcon} />
      <Icon icon={eatIcon} />
      <Icon icon={seeIcon} />
      <Icon icon={doIcon} />
    </Menu>
    <MobileMenu>
      <Icon icon={drinkIcon} />
    </MobileMenu>
  </HeaderContainer>
);

export default Header;
```
Toggling the same element shouldn't trigger the clone/animation.
I do not know if it is already possible but it would be interesting for create modals for example.

Idea of ​​how to allow this behavior: Only pick the styles (dimension, position, ...) when go to the second state and the portal is already mounted in the DOM.
 