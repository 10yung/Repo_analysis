Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
I took a TypedDataset of case class A, grouped it, mixing the order of two columns of the same type, resulting in a tupled dataset. I had to do this way, don't ask. To get stuff right again, I selected the columns in the right order again, and finally used `.as[A]` again to get me back a nice TypedDataset of my type `A`.

**Expected Behaviour:** Everything just as it has been, right columns ending up in the right place.

**Actual behaviour:** The mixed up columns weren't put in the right order by the select I issued at the end.

I suspect the quirk is somewhere within `.as[A]` but i cannot pinpoint it tbh.

Here a small reproducer:

```scala
  import frameless._
  import frameless.syntax._
  import frameless.functions.aggregate.{first, min}

  // create spark session ...

  implicit val sparkSession: SparkSession = session
  case class ConfusingColumns(name: String, company: String, created: Long)
  val data = ConfusingColumns("Joe", "snakeoil Inc.", 123L) ::
    ConfusingColumns("Barb", "ACME", 42L) ::
    ConfusingColumns("Joe", "snakeoil Inc.", 0L) :: Nil
  val ds: TypedDataset[ConfusingColumns] = TypedDataset.create(data)
  val grouped = ds
    .groupBy(
      ds('company)
    )
    .agg(
      first(ds('name)),
      min(ds('created))
    )
  val confused = grouped
    .select(
      grouped('_2),
      grouped('_1),
      grouped('_3)
    )
    .as[ConfusingColumns]
  confused.dataset.show()
```

Output (compare the case classes in `data` above):

```
+-------------+-------+-------+
|         name|company|created|
+-------------+-------+-------+
|snakeoil Inc.|    Joe|      0|
|         ACME|   Barb|     42|
+-------------+-------+-------+
```
Continuing on the upgrade changes and once that scala-steward eased the way, we could complete the migration to scalatest 3.1.0.

This can help on automatic migrations by scala-steward for next releases.
Updates [org.scalatest:scalatest](https://github.com/scalatest/scalatest) [from 3.0.8 to 3.1.0](https://github.com/scalatest/scalatest/compare/release-3.0.8...release-3.1.0).
[Release Notes/Changelog](https://github.com/scalatest/scalatest/releases/tag/release-3.1.0)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scalatest", artifactId = "scalatest" } ]
```
</details>
<details>
<summary>Applied Migrations</summary>

* https://raw.githubusercontent.com/scalatest/autofix/e4de53fa40fac423bd64d165ff36bde38ce52388/3.0.x/rules/src/main/scala/org/scalatest/autofix/v3_0_x/RenameDeprecatedPackage.scala
* https://raw.githubusercontent.com/scalatest/autofix/e4de53fa40fac423bd64d165ff36bde38ce52388/3.1.x/rules/src/main/scala/org/scalatest/autofix/v3_1_x/RewriteDeprecatedNames.scala
</details>

labels: test-library-update, semver-minor, scalafix-migrations
It seems like frameless isn't aware of the TypedDataset schema when it contains only primitive types. Simple example to generate one would be:
```scala
    val ds1: TypedDataset[Int] = TypedDataset.create(List(1, 2, 3))
    val col = ds1.col('_1)
```
Leads to
```
[E]      No column Symbol with shapeless.tag.Tagged[String("_1")] of type A in Int
[E]      L28:     ds2.col('_1)
```
Eventhough `printSchema` shows:
```
root
 |-- _1: integer (nullable = false)
```
Adding an `.as[Tuple1[Int]]` creates an other error: 
`could not find implicit value for parameter as: frameless.ops.As[Int,(Int,)]`

After some operations on TypedDataset one can easily end-up with dataset of primitive types and be blocked. 

I feel there should be at least some implicits in framless to provide an `As` for primitive types


**frameless**: 0.8.0

Symbol literal deprecated since Scala 2.13

https://github.com/scala/scala/commit/f46fc7e49058352ff2ac5e843c343e24d0ee6e3c
Currently there is no way to call several joins in chain. (ON condition fails to work with types)
It makes code much less readable because of hard-to-read variables names.


Currently, it looks like that explode on Maps won't work. Kindly add support
Hi,

I have recently started exploring frameless and trying to figure out joins. Especially left and right joins. Would it be possible to add additional examples in the documentation? It would really make it helpful. I can currently only find examples for inner joins.

Thanks

Vic
This pull request provides capability to derive `Injection` instances for enum types. Frameless currently allows custom encoders to be defined for unsupported types. For example, see  below -
```
implicit val genderToInt: Injection[Gender, Int] = Injection(
  {
    case Male   => 1
    case Female => 2
    case Other  => 3
  },
  {
    case 1 => Male
    case 2 => Female
    case 3 => Other
  })
```

This definition is rather mechanical and makes a good candidate for generic programming. Considering how widely "enum types" are used in big data (usually just defined using strings), I hope this PR brings something useful to the table.