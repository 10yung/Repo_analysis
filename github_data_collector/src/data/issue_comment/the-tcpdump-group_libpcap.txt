The DEVICE descriptor alone is not enough for full fledged USB class
(eg. Communications, Audio) dissection. Read CONFIGURATION descriptor
twice. First time just with the mandatory 9 bytes, and then using the
wTotalLength to get full CONFIGURATION. Do not attempt requesting full
65535 bytes as many devices do not return the descriptor in such case.

While the DEVICE and CONFIGURATION descriptors are not allowing full
dissection for all cases (eg. HID devices need also report descriptors)
knowing the CONFIGURATION descriptor makes the dissection possible in
many cases.
Hi,
pcap_inject doesn't provide any way to retrieve hardware timestamps for transmitted packets. Hence as a work-around, we are currently opening another instance of pcap and listening to own packets to get the timestamp and it happens to be software timestamps.

On debugging the code on our platform pcap was using tpcaket_v2. 
And as described by kernel documentation packet_mmap.txt we got to know that tp_status field will be updated to determine timestamp type being reported.
In line-no 5035 of pcap_linux.c after the check of  tp_status field. We are checking the tp_status field for TP_STATUS_TS_RAW_HARDWARE and TP_STATUS_TS_SOFTWARE and it happens to be TP_STATUS_TS_SOFTWARE always for transmitted packets.

Any info on how to get tx timestamp with libpcap would be of great help.



There is an issue with xcode11.x.
Seems to compile to 32 bits and generate a lot of misalignment issues.

BR 
HAVE_LIBNL is the result of check_function_exists();
check_function_exists() stores its results in cache. As such, setting
BUILD_WITH_LIBNL to FALSE after the initial CMake run didn't work. This
patch fixes that.

Set CMAKE_C_LIBRARY_ARCHITECTURE for newer versions of CMake. The
CMAKE_LIBRARY_ARCHITECTURE is a meta-variable that is set from the
value of CMAKE_\<LANG\>_LIBRARY_ARCHITECTURE in at least 3.15 onward.

Ref #844 (Committed change to a separate branch to avoid merge commits.)
I need the to filter for only outgoing packages of a specific port. Apparently Apple removed it in its own version of Tcpdump/libpcap.

```
tcpdump -Qout -nnSX -c 10 -w packet.pcap port XXXX
tcpdump: cannot parse term at: 
tcpdump: invalid expression "out"
```

I successfully compiled Tcpdump 4.9.3 on macOS but im getting another error:

```
tcpdump --version
tcpdump version 4.9.3
libpcap version 1.8.1 -- Apple version 79.250.1
tcpdump --direction=out -nnSX -c 10 -w packet.pcap port XXXX
tcpdump: en0: pcap_setdirection() failed: Setting direction to PCAP_D_OUT is not supported on BPF
```

When trying to build libpcap 1.9.0 im getting this:

```
clang: error: linker command failed with exit code 1 (use -v to see     
invocation)
make: *** [libpcap.dylib] Error 1
```

libpcap version: `1.8.1 -- Apple version 89.11.2`
OS name/version: macOS 15.0.1
Configure flags: unknown (macOS defaults?)

I'm running into an issue attempting to read a pcap file using `kqueue`, where it gets a certain number of packets into the file and then gets "stuck". `kevent` doesn't ever return that the file descriptor (from `pcap_get_selectable_fd`) is ready for reading, and my test code just sits waiting forever.

A simple gist with the test code in it: https://gist.github.com/timwoj/1efbd376c27cfd217751ccc6f2cbc58f
The sample file I've been testing with: https://github.com/zeek/zeek/blob/master/testing/btest/Traces/http/get.trace

If this would be a better question for the mailing list, let me know and I can repost it over there.
This work is based on PR #674 while taking into consideration the review
comments which caused the PR to be closed by the original author,
@xpahos.
I use pcap-filter(7) to capture TLS ClientHellos and ServerHellos. It works for both IPv4 and IPv6, but for IPv6 I cannot be as specific as I would like to be.

IPV4_TLS_CLIENTHELLOS
(tcp[((tcp[12:1] & 0xf0) >> 2)+5:1] = 0x01) and (tcp[((tcp[12:1] & 0xf0) >> 2):1] = 0x16) and (dst port 443)

IPV4_TLS_SERVERHELLOS
tcp and src port 443 and (tcp[tcpflags] & tcp-ack = 16) and (tcp[tcpflags] & tcp-syn != 2) and 
        (tcp[tcpflags] & tcp-fin != 1) and (tcp[tcpflags] & tcp-rst != 1)
        
IPV6_TLS_CLIENTHELLOS
ip6 and tcp and dst port 443

IPV6_TLS_SERVERHELLOS
ip6 and tcp and src port 443

I would like to be more specific with my IPv6 filters so that I don't have to deal with so many extraenous packets in user space. In order to do this I believe we would need better support in pcap-filter for IPv6 higher level protocols.

I note that the man page for pcap-filter(7) has the following to say about it.
"Note that tcp, udp and other upper-layer protocol types only apply to IPv4, not IPv6 (this will be fixed in the future)."

https://www.tcpdump.org/manpages/pcap-filter.7.html

Thanks!