Importing the settings into the preview version of visual studio 2019 doesn't seem to have any effect.
The (light) theme, as generated by the template in this repo, makes heavy use of bold fonts, and very few colors.

I have enhanced the syntax highlighting in my fork, at least for C# so far. See my branch @ https://github.com/mario-d-s/visualstudio-colors-solarized/tree/syntax-coloring

I whipped up an example file containing all significant elements and took screenshots for comparison.

Default coloring
-----
![Solarized-Light-Default](https://user-images.githubusercontent.com/4290238/38812108-a2d53398-418b-11e8-88d5-db70cdad13d4.png)

- Most elements use the color yellow
- String literals and integer literals have the same color
- Error and warning squiggles are hard to distinguish
- Bold font usage is distracting and makes code "expand" visually as the parser matches tokens

My version
-----
![Solarized-Light-Altered](https://user-images.githubusercontent.com/4290238/38812256-19a282aa-418c-11e8-9525-6c457b53d545.png)

- Reduced usage of bold fonts, reserved to distinguish between different elements with the same color, e.g. string literal vs. verbatim string literal.
- As string literals should be used judiciously, they have been made orange to make them stand out more.
- Classes, interfaces, value-types (structs), enums and delegates all have different colors. This makes me a lot more productive as I don't have to use intellisense or mouse-hover tooltips to determine what stuff is what.
- Changed error/warning squiggles from red/orange to red/yellow

I *would* like to open a PR, but I realize this may well be an entirely personal preference and not everyone may want their C# to look like a coloring book. Hence, I open this issue to have a discussion first.

@leddt Is enhancing the syntax highlighting something you want to integrate in your repo? If so, do you agree with my choices for colors or do you want some changes?

If this is something you'd like, I'll also point out there is more work to be done here to enhance other languages and contexts (F#, XML, ASPX, XAML, ....)
When [exporting Fonts and Colors settings from Visual Studio Professional 2017, version 15.6.5](https://gist.github.com/mario-d-s/a58e3e5f4bace2aefcd0f55f49423fe0), I get the following Category GUIDs in the `.vssettings` file:

- F9D6BCE6-C669-41DB-8EE7-DD953828685B
- E0187991-B458-4F7E-8CA9-42C9A573B56C
- 58E96763-1D3B-4E05-B6BA-FF7115FD0B7B
- FF349800-EA43-46C1-8C98-878E78F46501
- 75A05685-00A8-4DED-BAE5-E7A50BFA929A
- FA937F7B-C0D2-46B8-9F10-A7A92642B384
- B36B0228-DBAD-4DB0-B9C7-2AD3E572010F

In [SettingsTemplate.xml](https://github.com/leddt/visualstudio-colors-solarized/blob/master/vs2017/generator/SettingsTemplate.xml) are the following:

- A27B4E24-A735-4D1D-B8E7-9716E1E3D8E0
- 75A05685-00A8-4DED-BAE5-E7A50BFA929A
- F9D6BCE6-C669-41DB-8EE7-DD953828685B

I'm trying to derive their meanings from the properties within, but I've already spotted clear discrepancies between the template and my own export.

@leddt Can you please share what you have found out about them so far?

GUID | In SettingsTemplate | In [generated export](https://gist.github.com/mario-d-s/a58e3e5f4bace2aefcd0f55f49423fe0)
---- | -------------------- | -----------------
F9D6BCE6-C669-41DB-8EE7-DD953828685B | NuGet Package Manager Console | NuGet Package Manager Console
E0187991-B458-4F7E-8CA9-42C9A573B56C | _missing_ | **???**
58E96763-1D3B-4E05-B6BA-FF7115FD0B7B | _missing_ | **???**
FF349800-EA43-46C1-8C98-878E78F46501 | _missing_ | **???**
75A05685-00A8-4DED-BAE5-E7A50BFA929A | **???** | Text Editor (**is different**)
FA937F7B-C0D2-46B8-9F10-A7A92642B384 | _missing_ | "Artboard Background" ???
B36B0228-DBAD-4DB0-B9C7-2AD3E572010F | _missing_ | **???**
F9D6BCE6-C669-41DB-8EE7-DD953828685B | Text Editor (**is different**) | _missing_
I noticed my Visual Studio 2017 was listing _User Types - Structures_ and _User Types - Type Parameters_ without custom colors, so I checked with the template and it didn't have those in the list next to the other user types.

According to the ReSharper settings also (needlessly in 2017?) having those, Structures should use foreground $Yellow and Type Parameters should use $Magenta. Or in .settings XML:

```XML
<Item Name="type parameter name" Foreground="0x008236D3" Background="0x02000000" BoldFont="No" />
<Item Name="struct name" Foreground="0x000089B5" Background="0x02000000" BoldFont="No" />
```

I also note how my Visual Studio 2017 writes out its .settings using different item names. I'm not sure what's up with that. Maybe Visual Studio 2017 is backwards compatible with different 2015 names or something? For example, upon exporting, I don't see _"User Types - Classes"_ as in the template used here and what I have successfully imported, but I do get _"class name"_.