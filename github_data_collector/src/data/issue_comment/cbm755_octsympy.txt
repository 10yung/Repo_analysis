The `vpasolve` function only returns one numerical solution out of _N_ possible solutions to a polynomial equation. The SMT `vpasolve` function says that it returns all possible numerical solutions when the input is a polynomial

> For polynomial equations, `vpasolve` returns all solutions.

(from https://www.mathworks.com/help/symbolic/vpasolve.html)

An example given on the Matlab page is

    S = vpasolve(2*x^4 + 3*x^3 - 4*x^2 - 3*x + 2 == 0, x)

and the solution should be a column vector of 4 solutions. Ours only returns one solution, which is arrived at by `nsolve` based on an initial guess of 0.
Someone wrote to me saying that the examples to get started are in a screen-shot and thus not copy-pastable.

1.  Should we rename the "How to install" section to "Getting starting"?
2.  Should we have just one screenshot so its not so far to scroll to the text?
3.  We could make the step-by-step look more like an example, e.g., showing the output.
4.  People often have trouble getting Python/SymPy working: maybe we should point people at `sympref diagnose` in the README file.

Other ideas?
Its currently being deprecated (#986) and will continue to work with a warning in 2.9.0.

In 3.0.0 we will drop it (note there could be 2.10.0, 2.11.0 etc for before 3.0.0)
I'm not sure how to report this properly, since I  just tried to install this a few moments ago. 

Trying to follow the examples, it seem to sort-of  work. However, when the last UTF-8 (?) character is printed, it just prints a garbage symbol and then the CLI prompt become useless. I.e. doesn't react to any further commands. 

This is the output I get, using Octave 5.1.0 (for Win64 on Win-8.1).

![octave-gui_2019-05-10_18-43-19](https://user-images.githubusercontent.com/194392/57539896-03786f80-733b-11e9-8cf3-de53d1cca977.png)


BTW. How can I check which Python interpreter is used by the SymPy ?  
(I have 4 installed, with SymPy in all of them, but haven't set any `PYTHON` var.)

```
a = sym(10)
a(1) = []
```
a should be empty but instead we get an error
This picks up the excellent work of @genuinelucifer and @latot in #590.  There is a lot of background and discussion at #590.

I merged master into that work.  Many changes were no longer needed which simplified things.  I also did not indent the ctor code which means it should be easier to keep this up-to-date with master than it was before.

- [x] merge master periodically.
- [ ] not now, but before merging: re-indent the `sym` and `symfun` ctor.
- [ ] there seem to be some new issues: report upstream after checking if they are present in @590.
- [ ] make a list of upstream bugs that need to be fixed before we could merge this
   - [x] superiorto: https://savannah.gnu.org/bugs/?42735
   - [ ] superior/precedence with classdef: TODO file bug
   - [ ] cannot save: https://savannah.gnu.org/bugs/?45833
   - [ ] some indexing stuff: "grow from nothing" xtest: TODO
   - [ ] `if (logical(obj))` seems broken again: TODO:
   - [ ] num2cell is broken (TODO?)
- [ ] doctesting broken on 6.0.0?
Once upstream Octave supports `help sym/assume` and `help sym.assume` we might consider switching all of `@seealso{}` documentation to use that form.

upstream: https://savannah.gnu.org/bugs/index.php?55890
[updated to fix url]
Maybe not now, but soon should merge this.  Originally I thought I'd keep it around until pytave matures...
New upstream sympy allows bold matrix symbols using bold unicode characters.  Example:
```octave
>> syms a n 
>> A = sym('A', [n n])
A = (sym) ùêÄ  (n√ón matrix expression)

>> 2*a*A
ans = (sym) 2‚ãÖa‚ãÖùêÄ
```

This is off by default upstream.  I'm not sure how well this is supported by fonts.  But here's a possible patch if we wanted this:
```diff
--- a/inst/private/python_header.py
+++ b/inst/private/python_header.py
@@ -157,7 +157,7 @@ try:
             except:
                 # e.g., SymPy issue #10414
                 pretty_ascii = str(x)
-            pretty_unicode = sp.pretty(x, use_unicode=True)
+            pretty_unicode = sp.pretty(x, use_unicode=True, mat_symbol_style="bold")
             a = ET.SubElement(et, "item")
             f = ET.SubElement(a, "f")
             f.text = str(OCTCODE_SYM)
```

The following snippet

```
A = sym([1 1 1 0; -2 -1 0 -1; 0 0 -1 -1; 0 0 2 1]);
[V, D] = jordan(A);
```

causes Octave to hang, and after a few minutes outputs the following:

Waiting.........................................
error: Python exception: TypeError: Cannot multiply <class 'sympy.matrices.dense.MutableDenseMatrix'> and <type 'NoneType'>
    occurred at line 7 of the Python code block:
    return A.jordan_form(calctrans)
error: called from
    python_cmd at line 179 column 7
    jordan at line 136 column 10
    problem3 at line 3 column 6

It is working correctly for other matrices. Running Ubuntu 18 LTS, Octave 4.2.2 and Symbolic 2.7.1