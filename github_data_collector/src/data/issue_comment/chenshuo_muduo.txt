i note  that in folder muduo/base, there are two classes : Thread( in file thread.h) and ThreadPool( in file ThreadPool.h)，
i also note that in folder muduo/net, there are two classes : EventLoopThread( in file EventLoopThread.h) and EventLoopThreadPool( in file EventLoopThreadPool.h)

After i see muduo frame , i think EventLoopThread and EventLoopThreadPoll are used in multiThread TcpServer model . but what is the use of ThreadPool and Thread in folder muduo/base , i don't know what do they do ... can you tell me which module use class Thread and ThreadPool ......

thanks
你好
问题1：
我看muduo得example里TcpServer和EventLoop都是在主线程里创建并执行，但是在我实际得业务里，有自己得业务循环，所以我将TcpServer和EventLoop放在子线程里去创建和loop，但是程序退出时，会提升和创建得线程不一致导致crash。

问题2：
是否TcpServer得对象需要先于EventLoop对象析构，不然TcpServer里得EventLoop对象就失效了

期待您得回复！！

创建子线程
int Gate::Init(const std::string& conf)
{
    net_thread_ = std::thread(&Gate::StartNetLoop, this);

    signal(SIGTERM, SignalProcess);
}

在子线程：
void Gate::StartNetLoop()
{
    muduo::net::InetAddress serverAddr(tcp_port_);
    event_loop_ = std::make_shared<muduo::net::EventLoop>();
    im_net_server_ = std::make_shared<ImNetServer>(event_loop_.get(), serverAddr, channel_);
    im_net_server_->setThreadNum(net_thread_count_);
    im_net_server_->start();
    event_loop_->loop();
}

在收到kill消息时退出loop
int Gate::Finish()
{   
    event_loop_->runInLoop(std::bind(&muduo::net::EventLoop::quit, event_loop_.get()));
    net_thread_.join();
    return 0;
}

An error occurred while compiling muduo:

/home/shiliangw/code/muduo/examples/ace/ttcp/ttcp_asio_async.cc:147:76: error: ‘boost::asio::ip::tcp::acceptor’ {aka ‘class boost::asio::basic_socket_acceptor<boost::asio::ip::tcp>’} has no member named ‘get_io_service’
  147 |   TtcpServerConnectionPtr new_connection(new TtcpServerConnection(acceptor.get_io_service()));

i thought it is because of the version of boost is wrong,but i don't which version can fit muduo.

the environment in my os:
gcc 9.2.0
cmake 3.15.4
boost 1.71

i want to know which version suits muduo
thanks
ERROR: /home/wangsu/.cache/bazel/_bazel_wangsu/fed691259f92afcde51abaed59869647/external/muduo/muduo/base/BUILD.bazel:1:1: C++ compilation of rule '@muduo//muduo/base:base' failed (Exit 1) clang failed: error executing command external/llvm_toolchain/bin/clang -U_FORTIFY_SOURCE -fstack-protector -fno-omit-frame-pointer -fcolor-diagnostics -Wall -Wthread-safety -Wself-assign '-std=c++17' '-stdlib=libc++' -MD -MF ... (remaining 20 argument(s) skipped)

Use --sandbox_debug to see verbose messages from the sandbox
external/muduo/muduo/base/Date.cc:57:10: error: member access into incomplete type 'const struct tm'
        t.tm_year+1900,
         ^
/usr/include/wchar.h:83:8: note: forward declaration of 'tm'
struct tm;
       ^
external/muduo/muduo/base/Date.cc:58:10: error: member access into incomplete type 'const struct tm'
        t.tm_mon+1,
         ^
/usr/include/wchar.h:83:8: note: forward declaration of 'tm'
struct tm;
       ^
external/muduo/muduo/base/Date.cc:59:10: error: member access into incomplete type 'const struct tm'
        t.tm_mday))
         ^
/usr/include/wchar.h:83:8: note: forward declaration of 'tm'
struct tm;
       ^
3 errors generated.
Target //ds:main-ds failed to build
Use --verbose_failures to see the command lines of failed build steps.
INFO: Elapsed time: 1.090s, Critical Path: 0.76s
INFO: 0 processes.
FAILED: Build did NOT complete successfully



#Linux distro and version? x86 or ARM? 32-bit or 64-bit?
  x86 ubuntu18.04 64bit
## Branch (cpp98/cpp11/cpp17) and version of muduo?
  cpp11
## Version of cmake, gcc and boost? (If not from distro.)
  cmake version 3.10.2
  Boost version: 1.65.1
  gcc 7.4.0
  protoc 3.8.0

Building CXX object muduo/net/protorpc/CMakeFiles/muduo_protorpc_wire.dir/rpc.pb.cc.o
In file included from /home/leo/workspace/source/build/release-cpp11/muduo/net/protorpc/rpc.pb.cc:4:0:
/home/leo/workspace/source/build/release-cpp11/muduo/net/protorpc/rpc.pb.h:10:10: fatal error: google/protobuf/port_def.inc: No such file or directory
 #include <google/protobuf/port_def.inc>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
muduo/net/protorpc/CMakeFiles/muduo_protorpc_wire.dir/build.make:69: recipe for target 'muduo/net/protorpc/CMakeFiles/muduo_protorpc_wire.dir/rpc.pb.cc.o' failed
make[2]: *** [muduo/net/protorpc/CMakeFiles/muduo_protorpc_wire.dir/rpc.pb.cc.o] Error 1
CMakeFiles/Makefile2:1875: recipe for target 'muduo/net/protorpc/CMakeFiles/muduo_protorpc_wire.dir/all' failed
make[1]: *** [muduo/net/protorpc/CMakeFiles/muduo_protorpc_wire.dir/all] Error 2
Makefile:140: recipe for target 'all' failed
make: *** [all] Error 2

请问编译muduo库需要哪个版本的protobuf?

拜读了代码后，想在windows下对muduo库进行功能移植。移植中对于eventfd和timerfd这两个功能遇到了障碍，在windows下没有相应的实现。目前我采取的措施是通过一个udp socket来模拟eventfd的唤醒功能。想请教下有没有更好的实现方式？
下面的代码：在不使用宏 `NDEBUG` , 即 `assert()` 生效的情况下
```cpp
void f(const TcpConnectionPtr& conn)
{
    if (conn->connected())
    {
        conn->forceClose();
    }
    else
    {
        loop.quit();
    }
}

int main()
{
    client.setConnectionCallback(f);
    client.connect();
    loop.loop();
}
```
会异常退出
`Condition: /home/kirito/workspace/muduo/muduo/net/Channel.cc:47: muduo::net::Channel::~Channel(): Assertion !addedToLoop_' failed.`

原因是
`conn->forceClose()`中执行↓
`loop_->queueInLoop(std::bind(&TcpConnection::forceCloseInLoop, shared_from_this()))`执行↓
`handleClose()`   这条语句是在`loop`的 `doPendingFunctors`中执行，然后调用↓
`closeCallback_(guardThis);` 也就是client的`TcpClient::removeConnection`
而这个函数将`connectDestroyed`又放在了pendingfunction的数组中
`loop_->queueInLoop(std::bind(&TcpConnection::connectDestroyed, conn));`
但这个时候，`loop.quit()`已经执行了
所以`connectDestroyed`不会再被调用，没有执行`channel::remove`
然后channel再析构的时候，assert报错


如果在 loop循环打破后，再执行一次 `doPendingFunctors`的话，就能正常析构
或者是把`loop_->queueInLoop(std::bind(&TcpConnection::connectDestroyed, conn));`
这里的`queueInLoop`换成`runInLoop`，因为上面的语句就是在loop的线程执行的，所以可以立即被调用。
这两种方式都能正常退出。

这算是一个问题吗？
或者那个assert是多余的呢？


```cpp
void write(const StringPiece& message)
  {
    MutexLockGuard lock(mutex_);
    if (connection_)
    {
      codec_.send(get_pointer(connection_), message);
    }
  }
```


if the connection is not established, when we invoke the ```write```. the message will not be sended, this is true when the user type the message as soon as possible at the first time.
在muduo当前的设计中，多个TcpServer是否可以共享EventLoopThreadPool?
今天我在安装的时候报出如下错误
请问这个是我缺少了什么库么？还是有库没有链接进去？
谢谢各位指点！

[ 30%] Building CXX object examples/ace/ttcp/CMakeFiles/ttcp_asio_async.dir/ttcp_asio_async.cc.o
[ 30%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/InetAddress.cc.o
[ 30%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/Poller.cc.o
[ 31%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/poller/DefaultPoller.cc.o
/home/admin/tool/muduo/examples/ace/ttcp/ttcp_asio_async.cc: 在函数‘void doAccept(boost::asio::ip::tcp::acceptor&)’中:
/home/admin/tool/muduo/examples/ace/ttcp/ttcp_asio_async.cc:147:76: 错误：‘boost::asio::ip::tcp::acceptor’没有名为‘get_io_service’的成员
   TtcpServerConnectionPtr new_connection(new TtcpServerConnection(acceptor.get_io_service()));
                                                                            ^
[ 31%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/poller/EPollPoller.cc.o
make[2]: *** [examples/ace/ttcp/CMakeFiles/ttcp_asio_async.dir/ttcp_asio_async.cc.o] 错误 1
make[1]: *** [examples/ace/ttcp/CMakeFiles/ttcp_asio_async.dir/all] 错误 2
make[1]: *** 正在等待未完成的任务....
[ 31%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/poller/PollPoller.cc.o
[ 31%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/Socket.cc.o
[ 32%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/SocketsOps.cc.o
[ 32%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/TcpClient.cc.o
[ 32%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/TcpConnection.cc.o
[ 32%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/TcpServer.cc.o
[ 33%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/Timer.cc.o
[ 33%] Building CXX object muduo/net/CMakeFiles/muduo_net.dir/TimerQueue.cc.o
[ 33%] Linking CXX static library ../../lib/libmuduo_net.a
[ 33%] Built target muduo_net
make: *** [all] 错误 2

