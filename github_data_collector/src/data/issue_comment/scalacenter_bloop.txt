# Summary

Ammonite allows the creation of a predef file located in `~/.ammonite/predef.sc`. This file is often times customizing the Ammonite experience heavily and as such contains library dependencies.

I would therefore argue that when using `bloop console some-project` the predef file should not be part of the Ammonite start up as this can (and did in my case) interfere with the projects setup and even lead to Ammonite crashing (e.g. when a dependency in the predef is only available for versions of Scala that are different from the projects).

Additionally it simply seems more correct to me to not include any predefined code when using `bloop console some-project`.

This pull request passes the `--no-home-predef` flag to Ammonite at startup.

# Further Notes

- The startup flags for Ammonite can be found by issuing `amm --help`
- The code changes have been tested locally with `sbt frontend/testOnly *ConsoleSpec`
- It may make sense to allow the caller of `bloop console some-project` to pass all available Ammonite flags (as a future improvement)
When Project B depends on Project A, then Project A's resources are added to the classpath of Project B.
E.g. when compiling Project B using --verbose, the classpath contains...
```
E:\dev\src\A\src\main\resources;E:\dev\.bloop\A\build\bloop-internal-classes\bloop-cli-9S6VGcWuSWqcjKqO-lWtxg==
```

If Project A doesn't have any classes, i.e. it purely holds resources then these resources are missing from Project B's classpath.  The path instead contains...
```
E:\dev\.bloop\A\build\classes
```

Notice the reference to Project A's classes dir has changed as well. I'm guessing Bloop matches on these classes directories to decide whether to include resources in the classpath and is failing to match?
Project A's resources directory should still be included in B's classpath.

Here's a sample file for Project A...
```
{
    "version": "1.1.2",
    "project": {
        "name": "Config",
        "directory": "E:\\dev\\src\\A",
        "workspaceDir": "E:\\dev",
        "sources": [
        ],
        "dependencies": [
        ],
        "classpath": [
        ],
        "out": "E:\\dev\\.bloop\\A\\build",
        "classesDir": "E:\\dev\\.bloop\\A\\build\\classes",
        "resources": [
            "E:\\dev\\src\\A\\src\\main\\resources"
        ],
        "java": {
            "options": [
                "-source",
                "1.8",
                "-target",
                "1.8",
                "-g",
                "-sourcepath",
                "-proc:none",
                "-XDuseUnsharedTable=true",
                "-Xlint:unchecked",
                "-Xlint:deprecation"
            ]
        },
        "platform": {
            "name": "jvm",
            "config": {
                "home": "C:\\Program Files\\Java\\jdk1.8.0_191",
                "options": [
                    
                ]
            },
            "mainClass": [
                
            ]
        },
        "resolution": {
            "modules": [
                
            ]
        }
    }
}
```

I have a required application.conf setting ($KAFKA_BOOTSTRAP_SERVERS) in `main/resources/application.conf` which I override in `test/resources/application.conf`. When I run `sbt clean test` the build passes, but with bloop it fails to read the application.conf in the test resources folder and I get:

```
com.rewardsnetwork.decisionator.persistence.DataAccessSpec *** ABORTED ***
  pureconfig.error.ConfigReaderException: Cannot convert configuration to a com.rewardsnetwork.decisionator.config.DecisionatorConfig. Failures are:
  - (file:/Users/kbreidenbach/Development/scala/dff-decisionator/src/main/resources/application.conf:18) Unable to parse the configuration: Could not resolve substitution to a value: ${KAFKA_BOOTSTRAP_SERVERS}.
  at pureconfig.module.catseffect.package$.$anonfun$loadF$2(package.scala:23)
  at cats.syntax.EitherOps$.leftMap$extension(either.scala:151)
  at pureconfig.module.catseffect.package$.$anonfun$loadF$1(package.scala:23)
  at cats.effect.internals.IORunLoop$.step(IORunLoop.scala:185)
  at cats.effect.IO.unsafeRunTimed(IO.scala:320)
  at cats.effect.IO.unsafeRunSync(IO.scala:239)
  at com.rewardsnetwork.decisionator.persistence.DataAccessSpec.<init>(DataAccessSpec.scala:34)
  at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
  at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
  at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
```

This may be a reintroduction of the bug from this issue: https://github.com/scalacenter/bloop/issues/102

`bloop about`:
```
bloop v1.4.0-RC1

Using Scala v2.12.8 and Zinc v1.3.0-M4+32-b1accb96
Running on Java JDK v12.0.1 (/Library/Java/JavaVirtualMachines/adoptopenjdk-12.0.1.jdk/Contents/Home)
  -> Supports debugging user code, Java Debug Interface (JDI) is available.
Maintained by the Scala Center (Jorge Vicente Cantero, Martin Duhem)
```


When trying to run `bloop test` on an SBT-built mostly-java project ([ts-reaktive](https://github.com/Tradeshift/ts-reaktive/)):
- `git clone git@github.com:Tradeshift/ts-reaktive.git`
- `sbt bloopInstall`
```
$ bloop test ts-reaktive-actors
java.lang.NullPointerException
	at bloop.ScalaInstance.supportsHydra(ScalaInstance.scala:78)
	at bloop.data.Project$.$anonfun$fromBytesAndOrigin$1(Project.scala:137)
	at bloop.data.Project$.$anonfun$fromBytesAndOrigin$1$adapted(Project.scala:137)
	at scala.Option.map(Option.scala:230)
	at bloop.data.Project$.fromBytesAndOrigin(Project.scala:137)
	at bloop.engine.BuildLoader$.loadProject(BuildLoader.scala:237)
[...]
```
Apparently the [`compilerJar`](https://github.com/scalacenter/bloop/blob/master/backend/src/main/scala/bloop/ScalaInstance.scala#L24) field is null in `ScalaInstance`. The error message could potentially be improved ("couldn't find scala compiler?"), by replacing `.orNull` in the expression for that field.

However I'm unsure what's really going on, since I do recall having used bloop on Java/SBT projects with previous versions, even having ran JUnit tests...

This is with bloop 1.4.0-RC1.
It seems I am getting more issues recently with deduplicating hanging in my workspace.
```
INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /home/tgodzik/.cache/metals/bsp.trace.json
INFO  Connected to Build server v1.4.0-RC1
INFO  time: indexed workspace in 0.61s
INFO  Deduplicating compilation of input-test from bsp client 'Metals 0.7.6+707-c2394b32-SNAPSHOT' (since 4h 57m 57.571s)
INFO  Deduplicating compilation of interfaces-test from bsp client 'Metals 0.7.6+707-c2394b32-SNAPSHOT' (since 4h 57m 57.575s)
INFO  Deduplicating compilation of metals from bsp client 'Metals 0.7.6+707-c2394b32-SNAPSHOT' (since 4h 57m 57.601s)
INFO  compiling mtest (12 scala sources)
INFO  time: compiled mtest in 0.16s
```

@jvican Any idea what is going on or where to look?

Killing the server usually works.
Set up the project with: `git clone --recursive https://github.com/chipsalliance/rocket-chip`. `sbt` compiles fine, but with "bloop compile rocketchip", got this error:

```
Compiling rocketchip (313 Scala sources)
Compiled rocketchip (3590ms)
java.lang.AssertionError: assertion failed: 
  Context(Decode.scala) {
   owner       = method apply
   tree        = DefDef:def <apply: error>(<addr: error>: UInt, default: Seq[BitPat], <mapping
   scope       = 3 decls
   contextMode = AmbiguousErrors MacrosEnabled TypeConstructorAllowed
   outer.owner = method apply
}
```
This is part of an issue in https://github.com/scalameta/metals/issues/1062 and can be reproduced in https://github.com/Spielekreis-Darmstadt/lending

```
[ERROR] /home/tgodzik/Documents/workspaces/lending/target/test-classes
java.nio.file.NoSuchFileException: /home/tgodzik/Documents/workspaces/lending/target/test-classes
    at sun.nio.fs.UnixException.translateToIOException (UnixException.java:92)
    at sun.nio.fs.UnixException.rethrowAsIOException (UnixException.java:111)
    at sun.nio.fs.UnixException.rethrowAsIOException (UnixException.java:116)
    at sun.nio.fs.UnixPath.toRealPath (UnixPath.java:860)
    at bloop.integrations.maven.MojoImplementation$.bloop$integrations$maven$MojoImplementation$$abs$1 (MojoImplementation.scala:51)
```

We need to check if the file exist before doing:

```
file.toPath().toRealPath().toAbsolutePath()
```

I will try to look at this soon unless someone wants to contribute?
Fixes #1134 
See https://github.com/scalameta/metals/issues/1220 for reference.

The `code` property of `Diagnostic` seems to be intended for "error code", rather than "source code"
After upgrading to v1.4.0-RC1, Bsp debug messages started being sent to stderr even without the `--verbose` parameter.

I added some [logic](https://github.com/tindzk/seed/pull/64/commits/660051bc1784285fb72ebdb990f5387483d32fff) to detect the log level of messages. This does not always work since there are lines that do not have the `[D]` or `[E]` prefix.

See also the [CI log](http://ci.sparse.tech/tindzk/seed/480/1/3).