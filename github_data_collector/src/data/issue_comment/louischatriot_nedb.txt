The first find function takes time.

time0: 134.566ms  ...... Why?
time1: 2.650ms

Is _id slow because it's indexing?
However, the description was written as follows.
ã€€> 35 ms for a collection containing 10,000 documents

```
let datastore = Datastore.create('db.db');

  // let arry=[];
  // for(let i = 0; i < 3500; i++){
  //   if(i % 2 === 1) arry.push({color: 'blue'});
  //   else arry.push({color: 'red'});
  // }
  // datastore.insert(arry);

  console.time('time0');
  let data1 = await datastore.find({ color: "red" });
  console.timeEnd('time0');

  console.time('time1');
  let data2 = await datastore.find({ color: "red" });
  console.timeEnd('time1');
```
I use Nedb for loading and saving notes. However, after I packaged my Electron App. 
<img width="400" alt="Screenshot 2019-12-23 at 00 23 39" src="https://user-images.githubusercontent.com/32620429/71328623-7aedbe80-251a-11ea-921b-716237dac8db.png">

Code in index.js

var userData = app.getAppPath('userData');
let db_graphs =  new Datastore({ filename: userData+'/graphs.db', autoload: true});
db_graphs.loadDatabase();


We just found an issue where altering an already updated document changes that document in the database.

**Steps to reproduce**

* insert a document
* update the document with an object using `$set`
* edit the original object
* find the object, now the object is the altered object not the one that is persisted in the db

I created a repo that illustrates the issue
https://github.com/bbosiljcic/nedb-set-issue

**A snipped from that repo**

``` 
const originalDoc = { _id: 1, object: { a: 1, b: 2}};
db.insert(originalDoc, () => {});

db.update({ _id: 1 }, { $set: originalDoc }, {}, () => {
  db.find({}, (err, docs) => {
    console.log('find before edit', docs);
    // find before edit [ { _id: 1, object: { a: 1, b: 2 } } ]
    originalDoc.object.c = 3;
    db.find({}, (err, docs) => {
      console.log('find after edit', docs);
      // find after edit [ { _id: 1, object: { a: 1, b: 2, c: 3 } } ]
    });
  });
});
```

You can see that `originalDoc.object` has the `c` key that was added **after** the update in the second `console.log`.

The issue only occurs if `$set` is used and only nested objects are affected. 

This only happens inMemory, when restarted the results are correced.

We currently fixed the issue by `JSON.parse(JSON.stringify(originalDoc))`
Database file repeats the following over 200 times in my file, ever increasing.
```json
{"$$indexCreated":{"fieldName":"username","unique":true}}
{"$$indexCreated":{"fieldName":"id","unique":true}}
```

```js
let database = Datastore.create("/app/data/users.db");
database.ensureIndex({ fieldName: "username", unique: true });
database.ensureIndex({ fieldName: "id", unique: true });
```

using https://www.npmjs.com/package/nedb-promises as a wrapper for Promises.
In file persistence.js after this.beforeDeserialization = options.beforeDeserialization || function (s) { return s; }; there is a huge loop check, it would be nice to make this check optional.
I succesfully deploy my backend nodejs express code to GCP and it works except for the nedb part.

Is because GCP filesystem is readonly. Hence the data folder that normally work in my localhost testing environment does not work in GCP.

Anyone have tips or experience on how to make this works?

Thanks!
demo:
```js
var Datastore = require('nedb')
, db = new Datastore();

db.insert({
    user:{
        user1:{name:'James',goodAt:"basketball"},
        user2:{name:'Curry',goodAt:"basketball"},
    }
})
db.insert({project:['basketball','football']})

db.find({'user.user1.name':'James'},(err,docs)=>{
    console.log(docs)
})
db.find({'user.user1':{name:'James',goodAt:"basketball"}},(err,docs)=>{
    console.log(docs)
})
```

I just want to get data:`{name:'James',goodAt:"basketball"}`, but these two method all print `[{"user":{"user1":{"name":"James","goodAt":"basketball"},"user2":{"name":"Curry","goodAt":"basketball"}},"_id":"xxx"}]`. 

If it is a big database,I just want to get one user,not return me all user,how can I do?

I feel afraid when I try `db.find` function, it always return me the outer big data(layer 1), if it's multi layer design, it will be disaster.



Hi,

I noticed the both test cases failed sometimes (see below). After some investigation, I noticed that the function ensureIndex is not sync (as stated in the comment) and some operations may races with the assertions. The changes seemed to solve the race as I ran the test cases several times with no error.

```
1) Database
       Using indexes
         ensureIndex and index initialization in database loading
           ensureIndex can be called before a loadDatabase and still be initialized and filled correctly:

      Uncaught AssertionError: expected 0 to equal 3
      + expected - actual

      -0
      +3
```

```
  1 failing

  1) Database
       Using indexes
         ensureIndex and index initialization in database loading
           If a unique constraint is not respected, database loading will not work and no data will be inserted:
     Uncaught TypeError: Cannot read property 'should' of undefined

```

I posted a issue #609 to update the documentation of the function. 
Hi, 

Function Datastore.prototype.ensureIndex() has a comment (lines 113-115 of datastore.js) that claims that the function is synchronous. 

This seems not completely right once the cb parameter is passed to Persistence.prototype.persistNewState() that then calls the cb from within the appendfile callback. 

My suggestion is to update the documentation of ensureIndex(); I'm not sure in other parts, but at least the comment is inconsistent. 
On **Windows**:
- Datastore configured with corruptAlertThreshold=0
- replace any db file content with one line without enter (e.g. "a")
- start the app
- notice that "a" is removed and file index is recreated

**Expected**: DB corruption alert to be reported, since threshold is set to 0% and file content is in a bad format.

**Problem source**:
There is an assumption that a new line always is present:
https://github.com/louischatriot/nedb/blob/aa3302e5dcefa471431901a8f3fe63e532a5a7b2/lib/persistence.js#L216

Also when `data.length > 0` while `$$indexCreated` entry is missing, this can be another sign of a corrupted DB file for a 0% threshold.