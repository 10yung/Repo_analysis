I'm using parseback in my project, but parsing is very slow due to many whitespaces.
In practice, there is no DSL does not have whitespace.
I have introduced a lexing phase before the PWD, the parsing speed became very fast.
Here are 3 patterns of benchmark results in my box.

no optimize
```
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,173775.851188,2312.746723,"ops/s",2
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,18241.987633,984.304636,"ops/s",4
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,5678.154039,71.475780,"ops/s",8
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,2642.946283,89.420557,"ops/s",16
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,1169.474335,37.347710,"ops/s",32
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,371.850145,6.763177,"ops/s",64
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,141.861952,4.194896,"ops/s",128
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,22432.031980,982.794937,"ops/s",2
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,3065.175752,40.800879,"ops/s",4
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,628.646364,7.093002,"ops/s",8
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,127.711043,3.572157,"ops/s",16
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,30.057644,0.463080,"ops/s",32
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,5.685695,0.246421,"ops/s",64
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,1.579336,0.116543,"ops/s",128
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,150796.908074,1527.348563,"ops/s",2
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,60145.657071,2153.397558,"ops/s",4
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,25767.637041,1330.493737,"ops/s",8
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,13851.684348,216.750698,"ops/s",16
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,6592.322566,303.507154,"ops/s",32
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,2455.269600,38.373447,"ops/s",64
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,1492.020733,21.215706,"ops/s",128
```

no optimize(add whitespace)
```
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,132619.563099,2747.014005,"ops/s",2
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,16931.974282,640.734251,"ops/s",4
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,5802.609738,154.647659,"ops/s",8
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,2323.263571,49.327300,"ops/s",16
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,890.420544,48.637698,"ops/s",32
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,369.755234,27.868797,"ops/s",64
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,92.007267,5.009416,"ops/s",128
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,6264.225232,227.800277,"ops/s",2
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,905.146495,31.420769,"ops/s",4
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,183.503893,3.275698,"ops/s",8
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,36.405825,0.545524,"ops/s",16
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,8.060280,0.205061,"ops/s",32
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,1.801275,0.128898,"ops/s",64
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,0.356215,0.046763,"ops/s",128
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,119033.918128,7822.590611,"ops/s",2
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,52391.733969,1120.222661,"ops/s",4
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,23464.677710,638.255485,"ops/s",8
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,10799.153141,652.494521,"ops/s",16
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,4477.935194,276.564212,"ops/s",32
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,2788.747861,57.186063,"ops/s",64
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,1382.957582,31.359118,"ops/s",128
```

lexing optimize(add whitespace)
```
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,169928.693894,4828.383320,"ops/s",2
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,17080.524603,1153.686539,"ops/s",4
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,5467.070697,490.304521,"ops/s",8
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,2167.957922,174.578779,"ops/s",16
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,904.012384,24.496258,"ops/s",32
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,394.103533,6.246434,"ops/s",64
+"parseback.benchmarks.ArithmeticBenchmarks.gllRun","thrpt",1,20,110.933693,4.439783,"ops/s",128
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,22831.346090,309.065844,"ops/s",2
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,2764.269407,130.351963,"ops/s",4
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,531.611580,49.118742,"ops/s",8
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,123.734994,10.489502,"ops/s",16
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,34.538655,2.236450,"ops/s",32
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,7.693930,0.275773,"ops/s",64
+"parseback.benchmarks.ArithmeticBenchmarks.parsebackRun","thrpt",1,20,1.557181,0.021734,"ops/s",128
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,123540.595553,1857.826577,"ops/s",2
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,54996.680269,1056.356606,"ops/s",4
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,20867.465192,2223.796593,"ops/s",8
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,10111.816131,1135.447739,"ops/s",16
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,5587.119579,253.280717,"ops/s",32
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,2658.565723,56.281985,"ops/s",64
+"parseback.benchmarks.ArithmeticBenchmarks.spcRun","thrpt",1,20,1477.770367,132.052776,"ops/s",128
```

Lexing before PWD is as fast as non-whitespace input even if the input has whitespaces.
I suggest you introduce a lexing phase before parse.
Hi,

I am  new to parseback and this could be completly me running against a wall, but I am having trouble getting your example of the arithmetic expression grammar to work. This line here,

`val result: Eval[Either[List[ParseError], List[Int]]] = expr(input)`

gives me the following Error message:

> Error:(28, 63) type mismatch;
> found   : cats.Eval[List[parseback.ParseError] \/ parseback.util.Catenable[Int]]
>    (which expands to)  cats.Eval[scala.util.Either[List[parseback.ParseError],parseback.util.Catenable[Int]]]
> required: cats.Eval[Either[List[parseback.ParseError],List[Int]]]
>  val result: Eval[Either[List[ParseError], List[Int]]] = expr(input)

However, the example executes when omitting the explicit type declaration of variable result. But it will fail to parse and throw the following error message: 

> Left(List(UnexpectedCharacter(Line(1 + 2,0,0),Set(\s+))))

Moreover when inserting a whitespace before the 1 in the LineStream like this `" 1 + 2"` the example parses correctly. Am i doing anything wrong?

And also, is there a forum for questions like this? I wasn't able to find any, so i posted it here. Please let me know.

Cheers

Besides, here is my SBT File : 

 version := "0.1"
scalaVersion := "2.12.7"
resolvers += "bintray-djspiewak-maven" at "https://dl.bintray.com/djspiewak/maven"
val ParsebackVersion = "0.3"
libraryDependencies += "com.codecommit" %% "parseback-core" % ParsebackVersion
libraryDependencies += "com.codecommit" %% "parseback-cats" % ParsebackVersion 


Hi guys, 

It would be nice to see this available on Central. It shouldn't be too hard to support publishing to sonatype on travis. 
Executing the Direct Grammar on a worksheet
```scala import parseback._
import parseback.compat.cats._
import cats.Eval

implicit val W = Whitespace("""\s+"""r)

lazy val expr: Parser[Int] = (
  expr ~ "+" ~ term ^^ { (_, e, _, t) => e + t }
    | expr ~ "-" ~ term ^^ { (_, e, _, t) => e - t }
    | term
  )

lazy val term: Parser[Int] = (
  term ~ "*" ~ factor ^^ { (_, e, _, f) => e * f }
    | term ~ "/" ~ factor ^^ { (_, e, _, f) => e / f }
    | factor
  )

lazy val factor: Parser[Int] = (
  "(" ~> expr <~ ")"
    | "-" ~ expr  ^^ { (_, _, e) => -e }
    | """\d+""".r ^^ { (_, str) => str.toInt }
  )
```


among others, one input of the README 
```scala
expr(LineStream[Eval]("1 + 2")).value
```

does not parse and generates
```scala
res0: parseback.util.EitherSyntax.\/[List[parseback.ParseError],parseback.util.Catenable[Int]] = Left(List(UnexpectedCharacter(Line(1 + 2,0,0),Set(\s+))))
```
instead. The expression producing the expected output requires whitespaces at the beginning and the end.
```scala
expr(LineStream[Eval](" 1 + 2 ")).value
res1: parseback.util.EitherSyntax.\/[List[parseback.ParseError],parseback.util.Catenable[Int]] = Right(Single(3))
```

(I suspect this may be due to
```Note that parseback's whitespace handling is currently extremely naive. The only whitespace regular expressions which will behave appropriately are of the form .+, where . is "any single character class". Thus, \s+ is valid, as is [ \t]+, but //[^\n]*|\s+ is not. We hope to lift this restriction soon, but it requires some work on the algorithm.```
isn't it?)



Given the following test case
```Scala
import cats.Eval
import parseback._
import parseback.ast._
import parseback.compat.cats._

object Testcase extends App {

  sealed trait Expr extends Node
  case class Identifier(name: String) extends Expr with LeafNode
  case class Application(left: Expr, right: Expr) extends Expr with BinaryNode {
    override def assocLeft: Boolean = true
    override def sym: Symbol = 'app
  }

  lazy val expr: Parser[Expr] = (
    """[a-zA-Z0-9]+""".r ^^ { (_, name) => Identifier(name) }
      | expr ~ " " ~ expr ^^ { (_, fun, _, arg) => Application(fun, arg) }
      | "(" ~> expr <~ ")"
    ) filter prec(Application)

  // Test 1, correct: gives the left assoc. AST
  println(expr(LineStream[Eval]("function1 function2 argument")).value.map(_.toList))

  // Test 2, bug? gives no error but an empty list of ASTs
  println(expr(LineStream[Eval]("function1 (function2 argument)")).value.map(_.toList))
}
```

where we define a simple grammar with just `Identifier`s and function `Application`. I intend application to be left-associative and thus write `filter prec(Application)` with `BinaryNode` and `def assocLeft: Boolean = true`.

The first example works fine, only the left-associative AST is returned. However, in the second example where we use parentheses, an empty list is returned (where we would expect the right-associative AST).

Am I using `filter` and/or `BinaryNode` wrong? Or is this a bug?
The original Might, Darias and Spiewak paper reported a 90x speed-up when implementing compaction.  Adams, Hollenbeck and Might validated this, as well as providing some improvements to the grammar traversals introduced by repeated compaction.
One of the benchmarks that I think would be particularly interesting is to use the [C YACC grammar](https://www.lysator.liu.se/c/ANSI-C-grammar-y.html) (the Lex specification is [here](https://www.lysator.liu.se/c/ANSI-C-grammar-l.html)) to parse the full stdlib.  This is the very definition of a real-world test.  Critically, the C grammar makes heavy use of LALR(1) features, while simultaneously being entirely unambiguous.  I would not want to produce any ASTs (every parser should be `Parser[Unit]`).

Benchmarking this between parseback, gll-combinators and (ideally!) Scala Parser Combinators would be very instructive.

Straight out of the ASF+SDF playbook.  Identifiers are usually ambiguous with keywords.  It's important to be able to address this with negation disambiguation.  It's technically possible to implement this by hand *now* on top of the `filter` construct, but there may be a nicer algorithmic way.  At the very least, the syntax can be made a lot better.
[This](https://github.com/djspiewak/parseback/blob/master/core/src/main/scala/parseback/package.scala#L68-L136) is the current state of the `^^` syntax in parseback.  It is done in this way to achieve two goals:

- The parameter to `^^` should be an arity-*n* function, where *n* is the number of chained type parameters within the target `Parser` of the form `A ~ B ~ ... ~ N`
- The parameter to `^^`should be fully type inferred, allowing for the use of lambdas without explicit type parameters

The reason there is a quadratic number of cases stems from the fact that we need to provide a separate, *specific* syntax class for each possible reassociation of the `~` type constructor.  Obviously it would be much nicer to just write a linear number of cases (one for each arity, presumably) and then build some implicit machinery which would convince implicit search to generate the quadratic portion, but my efforts in that direction have thus far been unsuccessful.

Paging @milessabin and @travisbrown for thoughts and assistance if they feel so inclined!