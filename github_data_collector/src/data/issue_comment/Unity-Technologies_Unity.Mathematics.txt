

Orginally tracked internally at Unity by @xoofx:

> Unity.Mathematics is designed to work well with burst, but is not efficient with regular C#, mostly because all vector types are passed back and forth to/from the stack.
> C# 7.2 is now providing the in modifier that allows to pass implicitly by ref a readonly argument.
> Usage of in could mitigate the performance degradation of using Unity.Mathematics in plain C#.

Will need to ensure that the Burst codegen is not affected by this too.
Why are halfX.Min/MaxValue "constants" defined as floats instead of halfs?

It breaks the very common pattern of `var initializedHalf2 = half2.MaxValue;`, which is a bit weird. I can see it making sense when used in logic code, but I'm not convinced that offsets the confusion from implicit initialization.

https://github.com/Unity-Technologies/Unity.Mathematics/blob/d34adde4dc163fed544334b513cbccce2ceb839a/src/Unity.Mathematics/half.cs#L13
Hi! I understand the naming convention of all-lowercase provides the [benefits as described here](https://github.com/Unity-Technologies/Unity.Mathematics#naming-convention). As a counter-balancing point, I just wanted to provide my impression that usability is lowered though when it comes to Unity usage like this

```
var jobHandle = Entities
    .WithName("RotationSpeedSystem_ForEach")
    .ForEach((ref Rotation rotation, in RotationSpeed_ForEach rotationSpeed) =>
        {
            rotation.Value = math.mul
            (
                math.normalize(rotation.Value),
                quaternion.AxisAngle(
                math.up(),
                rotationSpeed.RadiansPerSecond * deltaTime
            )
        );
        })
    .Schedule(inputDependencies);
```

... where now suddenly, functions are using different case rules. Generally, it's also harder to "parse" in your mind multiple words if they don't use camel-case, e.g. lengthsq contains both the plural "lengths" as well as the intended "length sq". Another stumbling block is generally to have some functions start with a lower-case (this flavor), and others with upper-case (classic Unity), as it makes it harder on the eye to understand what is a function during broad scanning.

Of course, those are just split-seconds reading stumbling blocks, but I'm having flashbacks to how the PHP language grew over time to make different functions use different underscore, case, or haystack-needle parameter ordering rules, increasing usability.

Again, I understand there are benefits to all-lower-case, so please just take it as it is, an impression from a developer, so you can better gauge the costs. The way you chose to do it may still be better in sum.
Currently only the float3 function is implemented.
It would be great to have something like this please:

```
public static double3 mul(quaternion q, double3 v)
{
    double3 t = 2 * cross(q.value.xyz, v);
    return v + q.value.w * t + cross(q.value.xyz, t);
}
```
It doesn't appear that we have a convenience function to extract the upper left float3x3 from a float4x4.  Currently you must extract manually:

`return new float3x3(m.c0.xyz, m.c1.xyz, m.c2.xyz);`

Add this as a convenience function.
I know that Burst is promising cross-platform floating point determinism in the future, but that's not only a high bar to cross (it's a problem almost nobody has solved before), it also limits the usability of deterministic computation to Burst compiled jobs.

Having general access to fixed point computations, be it 32 (Q16) or 64 (Q32) bit, could make it much easier to have universally available deterministic decimal computations. 
Hello.
I think some may agree that support for byte vector types would come in handy. For example when working on textures, since Color32 already uses four bytes underneath. If there is no reason against it, i will look forward to it.
The greetings.

I have forked this master-branch and from this master-branch I have edited math.cs of which you can see here:

https://github.com/quakeulf/Unity.Mathematics/blob/master/src/Unity.Mathematics/math.cs

Specificially from line 98 to line 111 are my additions. I am also including them below this text so you can see in this field of text what I have proposed to add, but cannot, since I cannot seem to figure out how to do a request for pull:
        
```
        /// <summary>Returns the angle in degrees from 0 to 180 between two float3s.</summary>
        public static float angle(float3 from, float3 to)
        {
            return math.degrees(math.acos(math.dot(math.normalize(from), math.normalize(to))));
        }
        
        /// <summary>Returns the signed angle in degrees from 180 to -180 between two float3s.</summary>
        public static float anglesigned(float3 from, float3 to)
        {
            float angle = math.acos(math.dot(math.normalize(from), math.normalize(to)));
            float3 cross = math.cross(from, to);
            angle *= math.sign(math.dot(math.up(), cross));
            return math.degrees(angle);
        }
```
If they are already in there, let me know where. Preferably through documentation on your webcite.