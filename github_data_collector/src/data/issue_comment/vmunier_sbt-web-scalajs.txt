The fix for #27 is a step in the right direction I suppose, but it still misses one case.

If I do `~myproject/reStart` everything is fine because it will split on `'/'` and get `"reStart"`. However if I do `project myproject; ~reStart` it doesn't do the right thing because it returns `"~reStart"` which doesn't match.

With sbt 1.1.1 I was running a Play project using the task `server / run`. The `executedCommandKey` task will stop parsing the task when it encounters whitespace and so in this case `executedCommandKey` is `"server"` and not `"run"`. The consequence is that `isDevMode` will be `false` instead of `true`.
Quoting from @jroper from https://github.com/sbt/sbt/issues/3578#issuecomment-332077784

> I've just had a look at sbt-web-scalajs, and I see what the underlying problem is here. It's looking at what command has been run on the CLI to establish whether to run the fast or full JS command. Doing this is really working against the tool, sbt tasks should be idempotent, invoke it once, invoke it 100 times, doesn't matter the context, it should always return the same result if the files its processing haven't changed. This is a fundamental assumption of sbt, and when you break that assumption, such as the way sbt-web-scalajs does, then things start to break in ways that are really difficult to fix.

> Fixing this would probably be quite involved, I'm not that experienced with scala.js to know exactly how it works, but what you'd probably need to do is have it configured to run the fast process initially as a source generator, then produce a directory that all assets are copied to correctly prefixed that can be added to your development classpath (this is something that sbt-web could provide, but I don't think it currently does provide, however, Play framework provides exactly this in its development mode, and that directory is isolated and not included in the final production artifact). Then, you'd add a pipeline stage that does the full build, possibly dropping the dev compiled assets from the pipeline if they are no longer applicable. This would be the idiomatic sbt way of doing things that would work well with other tooling.
Currently, _IntelliJ_ supports debugging of _Scala.js_ project, which emits source map files with absolute path:
 * https://youtrack.jetbrains.com/issue/SCL-9936

Because _sbt-web-scalajs_ ignores `relativeSourceMaps` setting, projects based on the plugin cannot be debugged using IntelliJ's Scala plugin.
Hi,

I think it is currently not possible to use sbt-web-scalajs with single-project build. What I mean, is to have scalajs sources in our sbt-web project. Currently we need to have at least two projects: "sbt-web one" and "scalajs one". 

If I'm wrong or there is a good reason for such behaviour please tell me!

Thanks
