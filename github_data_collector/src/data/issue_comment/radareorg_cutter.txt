**Is your feature request related to a problem? Please describe.**
Widgets like StringWidget and FlagsWidget currently have poor performance when there are many items ~100000.

**TODO:**
*  prepare a test executable
* prepare a measuring method
* Investigate what is causing unnecessary slowdown

Some candidates for investigation:
* qhelpers::adjustColumns - can cause a few second freeze on long lists, long lists should use better column width calculation strategy. For short lists might be replaced with qt builtin functiuonality
* Other qt features that cause it to touch all elements in list instead of just currently visible ones
* slow r2 operations due to inappropriate datastructures
**Environment information**
* Operating System:
Ubuntu 19.10 GNOME
* Cutter version:
c5c9d52
* Obtained from:
  - [x] Built from source
  - [ ] Downloaded from release
  - [ ] Distribution repository
* File format:
executable

**Describe the bug**
When executing `./build/Cutter`, an error occurs: ./build/Cutter: error while loading shared libraries: libr_socket.so.4.2.0-git: cannot open shared object file: No such file or directory.
<!-- A clear and concise description of what the bug is. -->

**To Reproduce**

Steps to reproduce the behavior:
Follow all building instructions.

**Expected behavior**

<!-- A clear and concise description of what you expected to happen. -->
Successfully open cutter window.

**Screenshots**

<!-- If applicable, add screenshots to help explain your problem. -->


**Additional context**

<!-- Add any other context about the problem here. -->
```
$ ldd build/Cutter
	linux-vdso.so.1 (0x00007ffe0b0e3000)
	libQt5Svg.so.5 => /usr/lib/x86_64-linux-gnu/libQt5Svg.so.5 (0x00007fb05afbe000)
	libQt5Network.so.5 => /usr/lib/x86_64-linux-gnu/libQt5Network.so.5 (0x00007fb05adfd000)
	libQt5Widgets.so.5 => /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5 (0x00007fb05a764000)
	libQt5Gui.so.5 => /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5 (0x00007fb05a17e000)
	libQt5Core.so.5 => /usr/lib/x86_64-linux-gnu/libQt5Core.so.5 (0x00007fb059c37000)
	libr_core.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_core.so.4.2.0-git (0x00007fb05997b000)
	libr_config.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_config.so.4.2.0-git (0x00007fb059970000)
	libr_cons.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_cons.so.4.2.0-git (0x00007fb059940000)
	libr_io.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_io.so.4.2.0-git (0x00007fb0598b7000)
	libr_util.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_util.so.4.2.0-git (0x00007fb0597a0000)
	libr_flag.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_flag.so.4.2.0-git (0x00007fb059794000)
	libr_asm.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_asm.so.4.2.0-git (0x00007fb058bc1000)
	libr_debug.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_debug.so.4.2.0-git (0x00007fb058b67000)
	libr_hash.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_hash.so.4.2.0-git (0x00007fb058b58000)
	libr_bin.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_bin.so.4.2.0-git (0x00007fb058998000)
	libr_anal.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_anal.so.4.2.0-git (0x00007fb058696000)
	libr_parse.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_parse.so.4.2.0-git (0x00007fb058627000)
	libr_bp.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_bp.so.4.2.0-git (0x00007fb05861f000)
	libr_egg.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_egg.so.4.2.0-git (0x00007fb058607000)
	libr_reg.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_reg.so.4.2.0-git (0x00007fb0585f9000)
	libr_search.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_search.so.4.2.0-git (0x00007fb0585f0000)
	libr_syscall.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_syscall.so.4.2.0-git (0x00007fb0585e7000)
	libr_fs.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_fs.so.4.2.0-git (0x00007fb0585a1000)
	libr_magic.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_magic.so.4.2.0-git (0x00007fb05858b000)
	libr_crypto.so.4.2.0-git => /mnt/wdb/github/cutter/src/build/Radare2-prefix/lib/libr_crypto.so.4.2.0-git (0x00007fb05855b000)
	libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fb05836d000)
	libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fb05821e000)
	libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fb058204000)
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb058013000)
	libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007fb057ff7000)
	libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fb057fd2000)
	libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fb057fcc000)
	libGL.so.1 => /usr/lib/x86_64-linux-gnu/libGL.so.1 (0x00007fb057f38000)
	libpng16.so.16 => /usr/lib/x86_64-linux-gnu/libpng16.so.16 (0x00007fb057f00000)
	libharfbuzz.so.0 => /usr/lib/x86_64-linux-gnu/libharfbuzz.so.0 (0x00007fb057e09000)
	libicui18n.so.63 => /usr/lib/x86_64-linux-gnu/libicui18n.so.63 (0x00007fb057b2e000)
	libicuuc.so.63 => /usr/lib/x86_64-linux-gnu/libicuuc.so.63 (0x00007fb05795c000)
	libpcre2-16.so.0 => /usr/lib/x86_64-linux-gnu/libpcre2-16.so.0 (0x00007fb0578e1000)
	libdouble-conversion.so.3 => /usr/lib/x86_64-linux-gnu/libdouble-conversion.so.3 (0x00007fb0578cb000)
	libglib-2.0.so.0 => /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0 (0x00007fb0577a3000)
	/lib64/ld-linux-x86-64.so.2 (0x00007fb05b5d4000)
	libr_socket.so.4.2.0-git => not found
	libr_lang.so.4.2.0-git => not found
	libr_socket.so.4.2.0-git => not found
	libr_socket.so.4.2.0-git => not found
	libGLX.so.0 => /usr/lib/x86_64-linux-gnu/libGLX.so.0 (0x00007fb05776d000)
	libGLdispatch.so.0 => /usr/lib/x86_64-linux-gnu/libGLdispatch.so.0 (0x00007fb0576b0000)
	libfreetype.so.6 => /usr/lib/x86_64-linux-gnu/libfreetype.so.6 (0x00007fb0575f3000)
	libgraphite2.so.3 => /usr/lib/x86_64-linux-gnu/libgraphite2.so.3 (0x00007fb0575c6000)
	libicudata.so.63 => /usr/lib/x86_64-linux-gnu/libicudata.so.63 (0x00007fb055bd5000)
	libpcre.so.3 => /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007fb055b61000)
	libX11.so.6 => /usr/lib/x86_64-linux-gnu/libX11.so.6 (0x00007fb055a23000)
	libxcb.so.1 => /usr/lib/x86_64-linux-gnu/libxcb.so.1 (0x00007fb0559f8000)
	libXau.so.6 => /usr/lib/x86_64-linux-gnu/libXau.so.6 (0x00007fb0559f2000)
	libXdmcp.so.6 => /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 (0x00007fb0559ea000)
	libbsd.so.0 => /usr/lib/x86_64-linux-gnu/libbsd.so.0 (0x00007fb0559d0000)
```
I see libr_socket.so.4.2.0-git and libr_lang.so.4.2.0-git pointing to nothing, however there exist those 2 libs in build/Radare2-prefix/lib. So I excute `../radare2/env.sh build/Radare2-prefix`, or simply `export LD_LIBRARY_PATH=build/Radare2-prefix/lib`, then Cutter can be successfully opened.
**Environment information**
* Operating System: ubuntu 19.10
* Cutter version: 1.10.0
* File format: elf64
 * Arch: x86
 * Type: EXEC (Executable file)

**Describe the bug**
when editing several instructions (ex:pop) using new registers (r8 to r15) give incorrect bytes

**To Reproduce**
1. open an elf64 file in write mode
2. go to disassembly tab
3. right click an address/instruction
4. click edit > instruction
5. type pop r14
6. window gives "5f" actual instruction is "415e" 
7. if ok is pressed the incorrect bytes are persisted
8. on console type rasm2 -a x86 -b 64 "pop r14" for correct bytes

**Expected behavior**
bytes on edit window mach bytes given by rasm2

**Screenshots**
![Screenshot from 2020-01-13 17-25-23](https://user-images.githubusercontent.com/42013194/72290105-41950400-362b-11ea-97aa-9bc74f03c31a.png)
![Screenshot from 2020-01-13 17-36-21](https://user-images.githubusercontent.com/42013194/72290113-43f75e00-362b-11ea-8805-a3523d589779.png)


**Additional context**
perhaps 32 interpretation is taking precedence over 64 ?
as a workaround you can use rasm2 on console and use edit bytes
 affected instructions(will add as i see) :
sub 
pop
test

**Detailed description**
This Pull Request does the following things:

1. Update radare2 submodule to introduce the improved flag realnames
2. Add `asm.flags.real` to the preferences widget and enable it by default
3. Improve the preferences widget and include scrollbars for small screens


**After the change:**
![image](https://user-images.githubusercontent.com/20182642/72283569-b24a1980-3647-11ea-9233-ee6e713634af.png)

**Before the change:**
![image](https://user-images.githubusercontent.com/20182642/72283737-0d7c0c00-3648-11ea-8bc3-b43861fe1d2f.png)


**Scrollbars:**

![image](https://user-images.githubusercontent.com/20182642/72283863-5b910f80-3648-11ea-8517-74bf94a004a9.png)


**Closing issues**

closes #2013, closes #1958

**Is your feature request related to a problem? Please describe.**

A [recent PR in radare2](https://github.com/radareorg/radare2/pull/15702) improved massively the support for real names in r2 flags.

This will make lines like this
```
call  dword   [sym.imp.user32.dll_CreateWindowExA]
```

To look like this:
```
call  dword  [CreateWindowExA]
```


**Describe the solution you'd like**

Add it to the preferences window and enable it by default
Right click options:
* [ ] [R?] Allocate/free memory
* [ ] [C-/R?] Set memory page permissions
* [ ] [C-] Dump memory
* [ ] [R?] Add virtual module
* [ ] [R?] Set HW breakpoint of custom size on the selected map
* [ ] [R*] Rebase map to a different address
    * Should also let you to patch all the references to that section
* [ ]  [C-] Analyze loaded maps
* [ ]  [C-] Download pdb for the selected lib

Enhancements:
* [ ]  [C-] Double clicking on heap/stack should jump to heap(isn't available yet)/stack widget
* [ ]  [C-] Add section info for each loaded lib using `dmS`

**Detailed description**

This simple PR will set r2ghidra the default decompiler, if available. It takes advantage of the `setCurrentText` function.


**Test plan (required)**

1. Install r2dec and r2ghidra
2. Open Cutter, and see that r2ghidra decompiler is the default
3. Remove r2ghidra and see that r2dec is selected
4. Remove both and see that nothing has changed and no regression introduced

**Additional info**
While this solution works, in the future it would be better to have priority management and each plugin will assign a desired priority to itself. 

**Closing issues**

closes https://github.com/radareorg/cutter/issues/1761


**Environment information**

* Operating System:
windows 10
* Cutter version:
the newest release
* Obtained from:
  - [*] Downloaded from release
* File format:
pdb and dll
**Describe the bug**
chrome_child 73 with pdb can not finish analysis
<!-- A clear and concise description of what the bug is. -->

**To Reproduce**

Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**

<!-- A clear and concise description of what you expected to happen. -->


**Screenshots**

<!-- If applicable, add screenshots to help explain your problem. -->
![image](https://user-images.githubusercontent.com/5463104/72202258-33fb4500-3498-11ea-86a6-ca138b97374e.png)


**Additional context**

<!-- Add any other context about the problem here. -->

**Is your feature request related to a problem? Please describe.**

By now Cutter is supporting:
1. Ghidra decompiler
2. Jump to line of code in decompiler widget when user clicks on graph / disasm widget.
So i am seeing the problem:
1. Decompiler is messy for long code
2. Graph is easier to track and read the code  and Cutter totally can generate graph blocks for decompiler

**Describe the solution you'd like**

Create  a  graph widget for  decompiler like this
![Screenshot at 2020-01-08 00-13-50](https://user-images.githubusercontent.com/29118926/71916268-2d2ab480-31b0-11ea-85c0-bfc863249514.png)


**Describe alternatives you've considered**

The widget can be an extra plugin / command and user can select  soemthing like (menu) -> File -> generate graph decompiler or something like that.

**Additional context**

<!-- Add any other context or screenshots about the feature request here. -->

* [ ] ^Z not working when changing colors
* [ ] items sorted alphabetically, which is kind of useless/anoying
* [ ] unable to change color of highlight/selected in imports/symbols list widgets
* [ ] clicking in the disasm preview frame results in crash
* [ ] add the navigation bar preview 
* [ ] reduce line-height in the list of themable things
* [ ] allow to drag&drop the color into other items

Maybe a faster way to edit themes would be to have a list of 3 columns:

* color box
* name of the thing
* hex value of the color (editable)

this way we can just copypaste colors by reducing the workflow in 3 clicks