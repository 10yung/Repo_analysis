Apologies! In my #723 PR I forgot to add code to actually remember the last valid container when the flag is setâ€¦
[[UIApplication sharedApplication] openURL:] has been deprecated by Apple since iOS 10 and it is completely removed in iOS 13. 
All instances of this method will cause a crash at runtime. The methods need to be updated to [[UIApplication sharedApplication] openURL:options:completionHandler:]


For example, assume text is "abcd" and proper truncation after resizing is "abc...". NIAttributedLabel shows "a..."
Recently I was reading up on better (correct) way of swizzling a method and found it's better to use method_setImplementation() instead of method_exchangeImplementations(). More details on this can be found [here.](https://blog.newrelic.com/2014/04/16/right-way-to-swizzle/)

It is getting used at following 2 places:

- [NIRuntimeClassModifications.m](https://github.com/jverkoey/nimbus/blob/3fcdee276edb126193c2c8ebcf529cbd5bed3b31/src/core/src/NIRuntimeClassModifications.m#L30)
- [NIRuntimeClassModifications.m](https://github.com/jverkoey/nimbus/blob/3fcdee276edb126193c2c8ebcf529cbd5bed3b31/src/core/src/NIRuntimeClassModifications.m#L36)
This behavior (assuming that this change is all that's required) would more closely match the behavior described in Apple's [UILabel documentation](https://developer.apple.com/documentation/uikit/uilabel/1620540-highlightedtextcolor):

> In order for the highlight to be drawn, the highlightedTextColor property must contain a non-nil value.
NSUnderlineStyle is defined as an NSInteger. The code was using kCFNumberSInt64Type in CFNumberGetValue which worked fine on 64 bit devices, but on 32 bit devices would be trying to put 64 bits into a 32 bit integer. On the iPhone 5 simulator this causes a crash. On a device, I believe this would silently overwrite the next 32 bits in memory.
Why `NISwitchFormElement` `id didChangeTarget` have `assign` property attribute instead of `weak`?
https://github.com/jverkoey/nimbus/blob/3fcdee276edb126193c2c8ebcf529cbd5bed3b31/src/models/src/NIFormCellCatalog.h#L84
This was already done for NIOperations, and with good reason.

The way to test this change is by using large images in a table view with lots of rows, and scroll up and down to force two equivalent requests to run in the same cell (for the same image URL).

Expected: Things load.
Actual: Occasionally a cell will remain blank, and the reason is AFNetworking cancels the duplicate request, but instead of ignoring that cancelation (like we do for NIOperations), we wipe our operation var. Which eventually leads to ignoring the successful completion of the surviving image request, when we should in fact proceed and load the image as normal.