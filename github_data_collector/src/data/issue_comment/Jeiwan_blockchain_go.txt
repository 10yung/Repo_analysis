Merkle tree's length should be 2^n, not 2*n.
For example, when there are 5 leaf nodes, it should be append to a length of eight not six.
Indexes of TXOutput is different in TXOutputs and Transaction, use index in utxo to initialize inputs of transaction then put it into block is wrong.


When I send transaction without -mine flag, so when I wait for the miner node to mine, I get an error on FindTransaction() method.

```panic: transaction does not exist

goroutine 24 [running]:
log.Panic(0xc000125750, 0x1, 0x1)
	/usr/local/go/src/log/log.go:326 +0xc0
blockchain/main/blockchain.Handle(0x9f4900, 0xc005512af0)
	/home/melianor/go/src/blockchain/main/blockchain/block.go:70 +0x64
blockchain/main/blockchain.(*BlockChain).VerifyTransaction(0xc00016c520, 0xc0054f8280, 0xc005528140)
	/home/melianor/go/src/blockchain/main/blockchain/blockchain.go:371 +0x39e
blockchain/main/network.MineTx(0xc00016c520)
	/home/melianor/go/src/blockchain/main/network/network.go:361 +0x197
blockchain/main/network.HandleTx(0xc00550e600, 0x24a, 0x600, 0xc00016c520)
	/home/melianor/go/src/blockchain/main/network/network.go:350 +0x606
blockchain/main/network.HandleConnection(0x9fa600, 0xc00000e670, 0xc00016c520)
	/home/melianor/go/src/blockchain/main/network/network.go:448 +0x2d1
created by blockchain/main/network.StartServer
	/home/melianor/go/src/blockchain/main/network/network.go:493 +0x2e3
exit status 2
```
If a user has a balance of 2, and now he initiates a transaction with a payment of 2, and then a transaction with a payment of 2 when no block is generated, is there a dual consumption problem?
This bug may lead to spend the UTXO which isn't owned by TXInput.PubKey
In line 157 blockchain.go, it seems that TXOutputs has never been declared, is it TXOutput[] or I miss something?
In branch part_5, blockchain.go#L109:
https://github.com/Jeiwan/blockchain_go/blob/201e7a165214ca4d7287c83a23d65e1c05578e48/blockchain.go#L109

The second judgment condition `accumulated < amount` is not necessary. It only works when `amount <= 0`, In this case, we should check the value of `amount` at the beginning of the function.

```
func (bc *Blockchain) FindSpendableOutputs(pubKeyHash []byte, amount int) (int, map[string][]int) {
	unspentOutputs := make(map[string][]int)
	accumulated := 0
        // Maybe we should check “amount” at the beginning of the function.
	if (amount <= 0){ 
		return accumulated,unspentOutputs
	}
	unspentTXs := bc.FindUnspentTransactions(pubKeyHash)
	
Work:
	for _, tx := range unspentTXs {
		txID := hex.EncodeToString(tx.ID)

		for outIdx, out := range tx.Vout {
			if out.IsLockedWithKey(pubKeyHash)  { // Delete “&& accumulated < amount”
				accumulated += out.Value
				unspentOutputs[txID] = append(unspentOutputs[txID], outIdx)

				if accumulated >= amount {
					break Work 
				}
			}
		}
	}
	return accumulated, unspentOutputs
}
```
```

acc, validOutputs := UTXOSet.FindSpendableOutputs(pubKeyHash, amount)

	if acc < amount {
		log.Panic("ERROR: Not enough funds")
	}

	// Build a list of inputs
	for txid, outs := range validOutputs {
		txID, err := hex.DecodeString(txid)
		if err != nil {
			log.Panic(err)
		}

		for _, out := range outs {
			input := TXInput{txID, out, nil, wallet.PublicKey}
			inputs = append(inputs, input)
		}
	}

```
used UTXO_set index directly  to set TxInput.Vout  was a bug. 
because exist TxOutput has been used,  the TxOutput index is different from UTXO_set index
 