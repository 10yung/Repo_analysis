![State and module declaration](https://user-images.githubusercontent.com/33184837/72555903-67e8b880-3852-11ea-9369-94c83b2a8219.png)
everything works fine except for when accessing "this" inside of a MutationAction. When checking "this" inside of an action I get the following. 
![image](https://user-images.githubusercontent.com/33184837/72556003-9d8da180-3852-11ea-8afb-6902d53db5b7.png)
Which populates all properties as expected. However logging the context of "this" inside of a mutationAction yields state, getters, commit, dispatch, rootGetters and rootState instead of all of the properties of the class.
![image](https://user-images.githubusercontent.com/33184837/72556141-dfb6e300-3852-11ea-83c1-8a8abd723e33.png)
I am unable to access the state from a mutationAction and get undefined when trying to do so.

```
export default class User extends VuexModule  {
@Action
  public async USER_GETAUTHORIZATIONLIST_ACTION() {
    const res = await getRoutesApi(); // Cannot read property 'getters' of undefined  What?
    if (res.code === 1000) {
      const list = res.data.list;
      this.USER_GETAUTHORIZATIONLIST_MUTATE(list);
      return res;
    }
    return res;
  }
}
```
Why Cannot read property 'getters' of undefined when i use await
I create Module in index.ts
```
import { Store, ActionTree } from 'vuex';
import { getModule } from 'vuex-module-decorators';
import cartModule from '~/store/cart/index';

let cartStore: cartModule;

const initializer = (store: Store<any>): void => {
    cartStore = getModule(cartModule, store);
};

export const plugins = [initializer];

export {
    cartStore,
}
```

but when I try call to action in Component
```
import { cartStore } from '~/store';
@Component
...
onClick(): void {
        cartStore.add_item({}).then(() => {});
}
```

I have error
> Uncaught (in promise) Error: ERR_STORE_NOT_PROVIDED: To use getModule(), either the module should be decorated with store in decorator, i.e. @Module({store: store}) or store should be passed when calling getModule(), i.e. getModule(MyModule, this.$store)

but if I add in the component
```
import { cartStore } from '~/store';
import { getModule } from 'vuex-module-decorators';
import cartModule from '~/store/cart/index';
@Component
...
onClick(): void {
        cartStore.add_item({}).then(() => {});
}
protected created() {
        getModule(cartModule, this.$store);
}
```
It's work... why, why it's happened? 
Hi, I use nuxt auth module for Authorization.
Start using this moudule, it is not working.
When I use axios, create a plugin accesor for axios module.
https://typescript.nuxtjs.org/ja/cookbook/store.html#%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%99%E3%83%BC%E3%82%B9
How I create an accessor for auth module ?
looking through the issues and having myself various problem during setting this up with nuxtjs and typescript, is this ready for production ? Or is it just safer to just go with typed vanilla vuex modules ? 
When updating the 'vuex-module-decorators' version in my application to "^0.11.0" , I encountered an error in browser console `RangeError: Maximum call stack size exceeded`

I searched for a reason a long time, but it turned out that the cause of the error in the class property name.

I prepared an example to demonstrate the situation
https://github.com/rendrom/vuex-module-decoration-extends-error-example

I am no longer used in code 'store' as name of the property, but the information may be useful to someone.
I think having different values for root (value=10) and namespaced (value=15) modules, instead of setting both to value=10, helps being confident that namespaced module is used in this case (maybe it's obvious, but well, I think it's clearer this way).
I have the requirement to pass my module objects to a plugin which dynamically registers it for me.

Therefor I require to be able to save the module in a variable after its compiled. And I need to add some extra props to that object as well (on the root level of the module).

Is this possible?
Hi there,

I try to unit test a module (with name). Because the framework itself is tested, I tried to modify the test case to have a 2nd one with reset state:

https://github.com/marcelcremer/vuex-module-decorators/pull/1/commits/c059b8240587356b60118a794e6445e600c190e4

However, the exact same test fails if it's executed twice (I copied the whole test,because I wasn't sure, if random execution order was enabled):
The 2nd time the test runs, the initial state has the count set to 15 and not reset:

![image](https://user-images.githubusercontent.com/6123724/70637281-3ff4ac80-1c37-11ea-9cb4-ed99b7de4487.png)

Is this intended? If so, how's it possible to reset the module to a clean state?

I tried several options to test my personal module, but didn't have any luck either.

Thanks for your time, effort and the great decorators :)

Regards
Marcel
Could there be a section added to the README explaining how to unregister and register decorated modules dynamically, rather than them always being part of the main store?