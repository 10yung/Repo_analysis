# Bugs and Questions

### Checklist

- [x] This is not a `victory-native` specific issue. (Issues that only appear in `victory-native` should be opened [here](https://github.com/FormidableLabs/victory-native/issues/new))

- [x] I have read through the [FAQ](https://formidable.com/open-source/victory/docs/faq) and [Guides](https://formidable.com/open-source/victory/guides/) before asking a question

- [ ] I am using the latest version of Victory
No: 33.1.2 - but it doesn't seem different in latest

- [x] I've searched open issues to make sure I'm not opening a duplicate issue

### The Problem

I am using events to target both labels and data. As such: ` target: ['data', 'labels'] `. This event object is then being passed to the `VictoryChart` component. And ... it works as intended. The event being triggered both on data and labels.

However the documentation, as well as the Proptypes definition, says the events target should be String and not Array. I'm getting console error because of that.

So, does it work just coincidentally, and I should *not* be doing this? (because for instance it could be broken in a future release - or maybe there's other bad side effects I'm not aware of?)

Or is it intended, in which case I guess the doc & proptypes ( https://github.com/FormidableLabs/victory/blob/master/packages/victory-shared-events/src/victory-shared-events.js#L31 ) should be updated to allow arrays?
The array notation is more convenient than having to duplicate event registration per target, so it's quite nice that it works.
Hi!
I have many bar charts with outliers that have really large values compared to other items in the bar chart.
![barchart](https://user-images.githubusercontent.com/17936265/72008026-d05ae880-3207-11ea-9204-d3253a916644.png)


I would like to crop the long bars, so that the chart takes less space. Something like this: (ignore the orientation). Does your bar chart handle scale breaks?
![barchart_scaleBreak](https://user-images.githubusercontent.com/17936265/72008036-d3ee6f80-3207-11ea-9adb-39d1faafb9e4.png)



# Bugs and Questions

### Checklist

- [✅] This is not a `victory-native` specific issue. (Issues that only appear in `victory-native` should be opened [here](https://github.com/FormidableLabs/victory-native/issues/new))

- [✅] I have read through the [FAQ](https://formidable.com/open-source/victory/docs/faq) and [Guides](https://formidable.com/open-source/victory/guides/) before asking a question

- [✅] I am using the latest version of Victory

- [✅] I've searched open issues to make sure I'm not opening a duplicate issue

### The Problem

When using VictorySelectionContainer, while also implementing selection of individual bars (and other plot types) on click, not all selected items are deselected as expected.

### Reproduction

Here's a sandbox that will demonstrate it better than I can explain:

https://codesandbox.io/s/sad-mccarthy-omwfn

- Click the last bar
- Select the first three (and not the one you just clicked)
- Clear the selection by clicking away
- Last bar will still be highlighted and can't be cleared

The use-case for this is a time-series bar chart that acts as a date range filter, where clicking or highlighting bars will update the date range. Digging into the source a bit, I came across this line in `selection-helpers.js`:

https://github.com/FormidableLabs/victory/blob/master/packages/victory-selection-container/src/selection-helpers.js#L105

While it's probably not the most elegant solution, I've worked around the issue by creating my own selection helper and passing `eventKey: "all"`, forcing deselection of all bars. I'm curious as to whether there's a better solution (maybe passing all selected bars in props if possible) and if it might be worth adding this to the library, as I think the use-case is valid. Thanks :)

# Bugs and Questions

### Checklist

- [x] This is not a `victory-native` specific issue. (Issues that only appear in `victory-native` should be opened [here](https://github.com/FormidableLabs/victory-native/issues/new))

- [x] I have read through the [FAQ](https://formidable.com/open-source/victory/docs/faq) and [Guides](https://formidable.com/open-source/victory/guides/) before asking a question

- [x] I am using the latest version of Victory

- [x] I've searched open issues to make sure I'm not opening a duplicate issue

### The Problem

I have created a chart that changes aspect ratio on browser resize, so that the width changes but the height remains the same. However, there is a problem when using a VictoryBrushContainer where the container seems to not be updated with the new width after resize.

### Reproduction

To reproduce the bug, please refer to the [repository](https://github.com/StraightOuttaCrompton/victory-zoom-resize-example). It contains instructions in the README as well as a video outlining the problem.

# Bugs and Questions

### Checklist

- [x] This is not a `victory-native` specific issue. (Issues that only appear in `victory-native` should be opened [here](https://github.com/FormidableLabs/victory-native/issues/new))

- [x] I have read through the [FAQ](https://formidable.com/open-source/victory/docs/faq) and [Guides](https://formidable.com/open-source/victory/guides/) before asking a question

- [x] I am using the latest version of Victory

- [x] I've searched open issues to make sure I'm not opening a duplicate issue

### The Problem

I'm creating a demanding live updating chart with multiple layers that (hopefully) will be able to run smoothly on mobile. View a demo here (click play - no login required): http://beta.electrifygame.com/

The problem is that the axis are eating up a lot of CPU whenever the data changes, even though the data's domain + range aren't changing every frame. You can see from this performance screenshot that the two axis are taking far more CPU time than the actual graphs, which seems.... undesirable:

![Capture](https://user-images.githubusercontent.com/775657/70877007-c38d0100-1f89-11ea-8279-ef08b61f5f14.PNG)

Running Victory 33.1.4, the source code for my chart is available here: https://github.com/toddmedema/electrify/blob/master/services/app/src/components/base/Chart.tsx

# Feature Requests

My request is to be able to pass the domain and range into the axis (in the same way you pass data to area and line charts) - I'm already computing these values for other pre-rendering calculations, and if the axis just received their domain / range, they'd know that it's not changing even though the rest of the data is.

^^ That being said, ideally I shouldn't even have to do this for the axis to not re-render, the charts should be able to figure it out on their own :)

NOTE: I noticed that there's `minDomain` and `maxDomain` in the docs for axis, but when I tried to use it like so:
```
<VictoryAxis minDomain={rangeMin} maxDomain={rangeMax} />
```

I received the following TypeScript error: 

```
Property 'minDomain' does not exist on type 'IntrinsicAttributes & IntrinsicClassAttributes<VictoryAxis> & Readonly<VictoryAxisProps> & Readonly<...>'.
```

### Checklist

- [x] I've read through the [Docs](https://formidable.com/open-source/victory/docs) and [Guides](https://formidable.com/open-source/victory/guides) to make sure this functionality doesn't already exist

- [x] I've searched open issues to make sure I'm not opening a duplicate issue

# Bugs and Questions

### Checklist

- [x] This is not a `victory-native` specific issue. (Issues that only appear in `victory-native` should be opened [here](https://github.com/FormidableLabs/victory-native/issues/new))

- [x] I have read through the [FAQ](https://formidable.com/open-source/victory/docs/faq) and [Guides](https://formidable.com/open-source/victory/guides/) before asking a question

- [x] I am using the latest version of Victory

- [x] I've searched open issues to make sure I'm not opening a duplicate issue

### The Problem

Data label opacity for scatter chart works in chrome but not firefox.

### Reproduction

Clone [repository](https://github.com/StraightOuttaCrompton/victory-scatter-chart-label-opacity) and start by executing the command

```
npm install && npm start
```

Go to ```http://localhost:3000``` in Chrome and Firefox. Notice that in Firefox, the labels are opaque whilst in Chrome they are not.

To illustrate the point further, if you hover on a data point, the opacity of the label is set to 1. In Chrome you can clearly see a change in opacity on hovering on a data point whereas in Firefox you cannot.
# Bugs and Questions

### Checklist

- [x] This is not a `victory-native` specific issue. (Issues that only appear in `victory-native` should be opened [here](https://github.com/FormidableLabs/victory-native/issues/new))

- [x] I have read through the [FAQ](https://formidable.com/open-source/victory/docs/faq) and [Guides](https://formidable.com/open-source/victory/guides/) before asking a question

- [x] I am using the latest version of Victory

- [x] I've searched open issues to make sure I'm not opening a duplicate issue

### The Problem

Cursor "crosshair" is not aligned with cursor when using createContainer("zoom", "cursor")

### Reproduction

Clone [repository](https://github.com/StraightOuttaCrompton/victory-zoom-cursor-container-example/tree/c748ba6b85d987698030c9ac6d1d1f52feb47375) and run the command
```
npm install && npm start
```
Notice that after zooming, the crosshair is not aligned with the cursor.
# Bugs and Questions

### Checklist

- [x] This is not a `victory-native` specific issue. (Issues that only appear in `victory-native` should be opened [here](https://github.com/FormidableLabs/victory-native/issues/new))

- [x] I have read through the [FAQ](https://formidable.com/open-source/victory/docs/faq) and [Guides](https://formidable.com/open-source/victory/guides/) before asking a question

- [x] I am using the latest version of Victory

- [x] I've searched open issues to make sure I'm not opening a duplicate issue

### The Problem
When using [createContainer](https://formidable.com/open-source/victory/docs/create-container/) like so,

```js
const VictoryZoomVoronoiContainer = createContainer("zoom", "voronoi");
```

Being used in a brush and zoom chart implemented from the [example](https://formidable.com/open-source/victory/guides/brush-and-zoom)
```js
<VictoryChart
    containerComponent={
        <VictoryZoomVoronoiContainer
            zoomDimension="x"
            zoomDomain={zoomDomain}
            onZoomDomainChange={handleZoom}
        />
    }
>
```

I receive the following typescript error 

```js
Type '{ zoomDimension: string; zoomDomain: DomainPropType; onZoomDomainChange: (domain: DomainPropType) => void; }' is not assignable to type 'IntrinsicAttributes & { children?: ReactNode; }'.
  Property 'zoomDimension' does not exist on type 'IntrinsicAttributes & { children?: ReactNode; }'.
```

### Reproduction

https://codesandbox.io/s/basic-victory-example-fzf8i?fontsize=14&hidenavigation=1&theme=dark

# Bugs and Questions

### Checklist

- [x] This is not a `victory-native` specific issue. (Issues that only appear in `victory-native` should be opened [here](https://github.com/FormidableLabs/victory-native/issues/new))

- [x] I have read through the [FAQ](https://formidable.com/open-source/victory/docs/faq) and [Guides](https://formidable.com/open-source/victory/guides/) before asking a question

- [x] I am using the latest version of Victory

- [x] I've searched open issues to make sure I'm not opening a duplicate issue

### The Problem
In a stacked bar chart, I'm trying to add labels to each bar segment on top of the bar.
Sort of like this:
<img width="390" alt="Screenshot 2019-11-14 at 13 16 12" src="https://user-images.githubusercontent.com/1152888/68860294-29fbd680-06e1-11ea-8c5f-adb6971ee3e1.png">

When adding labels to a stacked bar chart, the label for each chart segment seems to render "after" the segment, on top of the beginning of the next segment like this instead:

<img width="389" alt="Screenshot 2019-11-14 at 13 34 51" src="https://user-images.githubusercontent.com/1152888/68861488-8eb83080-06e3-11ea-9b19-733d0a82ee36.png">

I'm really struggling to figure out how to center the labels over each segment. As the labels are their own elements and not children to the bar segments they belong to. 

I played around with all combinations of `textAnchor` and `verticalAnchor` and ended up at a bit of a hacky solution where I calculate the offset based on domain range and chart width. But it's still a bit off...

Any ideas on how to center the labels? Maybe I just missed something simple?

### Reproduction

Sandbox based on the [100% column stacked bar example](https://formidable.com/open-source/victory/gallery/100-column-chart/) here:

https://codesandbox.io/s/basic-victory-example-yx95d

The main part being:
```
labelComponent={
  <VictoryLabel
    dx={data => {
      // (graphWidth / (maxDomain-minDomain)) * (datum.y / 2)
      // ^scale factor percent to pixels  * half the width of segment in %
      return (-(400 - 2*30) / (100 - 0)) * data.datum.y/2;
    }}
  />
}
```

Is there any less hacky way to achieve the same?

Thanks!