<!--
🚨HOLD UP PLEASE, BEFORE DELETING THIS TEMPLATE!🚨😁
Thank you for contributing and please follow this guide before creating an issue! 🙌

1. Do you have a usage question?
=============================
- Look for prior or closed issues (but please avoid replying to them if they're old)
- Check the docs: https://www.styled-components.com/docs
- Look for/ask questions on stack overflow: https://stackoverflow.com/questions/ask?tags=styled-components
- Start a thread on our Spectrum help channel: https://spectrum.chat/styled-components/help
- Is this about Typescript? TS types are provided by DefinitelyTyped, all issues opened about TS will be closed and referred there.

2. Think you found a bug?
=============================
- Consider submitting a PR with a failing test instead
- Use the "BUG TEMPLATE" below to report a test
- Don't forget to 👉PROVIDE A REPRODUCTION PLEASE 😉 (Codesandbox links are provided and most useful, repositories are ok)
- If you can't provide a reproduction, snippets of code can help, but are incomplete reports

3. Do you have a feature request?
=============================
- Look for old & closed issues (replying might be ok if they're not too old or have no conclusion)
- Otherwise: Remove the template below and provide thoughtful commentary *and code samples* on what this feature means for your product

What will it allow you to do that you can't do today?
How will it make current work-arounds straightforward?
What potential bugs and edge cases does it help to avoid?
Please keep it product-centric.
-->

<!-- BUG TEMPLATE -->

## Environment

<!-- Please run this command inside your project and paste its contents here (it automatically copies to your clipboard) -->

`npx envinfo --system --binaries --npmPackages styled-components,babel-plugin-styled-components --markdown --clipboard`

### System:

 - OS: macOS 10.15.2
 - CPU: (8) x64 Intel(R) Core(TM) i7-8559U CPU @ 2.70GHz
 - Memory: 385.48 MB / 16.00 GB
 - Shell: 5.7.1 - /bin/zsh

### Binaries:

 - Node: 12.14.1 - /usr/local/bin/node
 - Yarn: 1.21.1 - /usr/local/bin/yarn
 - npm: 6.13.6 - /usr/local/bin/npm

## Reproduction

<!-- If you can't reproduce your bug, make sure to add details on how you've set up your project -->

`styled-components v4.3.2`: https://primer.style/doctocat/components/do-dont
`styled-components v5.0.0`: https://doctocat-ajl99nptm.now.sh/doctocat/components/do-dont

Changes made between both deployments: https://github.com/primer/doctocat/pull/108
Source code where `StylesheetManager` is used: https://github.com/dcastil/doctocat/blob/styled-components-v5/theme/src/components/frame.js#L17

## Steps to reproduce

1. Clone https://github.com/dcastil/doctocat
2. Switch to branch `styled-components-v5`
3. Run `yarn && yarn start` in repo root
4. Navigate to `http://localhost:8000/components/do-dont` in browser

## Expected Behavior

CSS is rendered into head of each iframe.

## Actual Behavior

Some CSS is rendered and some not. I couldn't find a pattern in which CSS is rendered and which isn't unfortunately. Also if I delete the first iframe in https://github.com/dcastil/doctocat/blob/styled-components-v5/docs/content/components/do-dont.mdx, other CSS is being rendered in the second one. So the `StylesheetManager` instances seem to interfere with each other.
<!-- BUG TEMPLATE -->
## Environment

### System:
 - OS: macOS 10.15.2
 - CPU: (16) x64 Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz
 - Memory: 1.98 GB / 32.00 GB
 - Shell: 3.2.57 - /bin/bash
### Binaries:
 - Node: 10.16.0 - ~/.nvm/versions/node/v10.16.0/bin/node
 - Yarn: 1.21.1 - ~/.yarn/bin/yarn
 - npm: 6.9.0 - ~/.nvm/versions/node/v10.16.0/bin/npm

## Reproduction

https://github.com/donaldpipowitch/styled-components-v5-bug

## Steps to reproduce

Inside the given repo run:

```
$ yarn add styled-components@^5.0.0
$ yarn start
# visit http://localhost:4200 - BROWSER FREEZES
```

## Expected Behavior

Works like v4. Everything is rendered correctly. You see _"If you see this, everything is working."_ in your app.

## Actual Behavior

Browser freezes. You see the loading state forever.
<!--
3. Do you have a feature request?
=============================
- Look for old & closed issues (replying might be ok if they're not too old or have no conclusion)
- Otherwise: Remove the template below and provide thoughtful commentary *and code samples* on what this feature means for your product

What will it allow you to do that you can't do today?
How will it make current work-arounds straightforward?
What potential bugs and edge cases does it help to avoid?
Please keep it product-centric.
-->
This is a feature request.

I have just discovered a code base that abuses global class names all over the place, like this:

```tsx

const StyledDiv = styled.div`
  display: flex;

  .customer-name {
    margin-top: 1em;
  }
`

<StyledDiv>
  <div className="customer-name">
    {name}
  </div>
</StyledDiv>

```

I propose that `styled-components` makes it impossible to do this **by default**. It could offer a configuration flag to turn this behavior *on* for legacy code bases already relying on it.

For the case where one truly needs to use global class names, `styled-components` could follow the [css-modules approach](https://github.com/css-modules/css-modules#exceptions) and introduce a `:global` pseudo-class:

```tsx
const StyledDiv = styled.div`
  display: flex;

  :global(.btn .btn-primary) {
    margin-top: 1em;
  }
`
```

<!-- BUG TEMPLATE -->
## Environment
## System:
 - OS: macOS 10.15.2
 - CPU: (8) x64 Intel(R) Core(TM) i7-8559U CPU @ 2.70GHz
 - Memory: 95.38 MB / 16.00 GB
 - Shell: 5.7.1 - /bin/zsh
## Binaries:
 - Node: 10.17.0 - ~/.nvm/versions/node/v10.17.0/bin/node
 - Yarn: 1.21.1 - /usr/local/bin/yarn
 - npm: 6.11.3 - ~/.nvm/versions/node/v10.17.0/bin/npm
 - Watchman: 4.9.0 - /usr/local/bin/watchman
## npmPackages:
 - babel-plugin-styled-components: ^1.10.0 => 1.10.6 
 - styled-components: ^3.2.3 => 3.4.10 
`

## Reproduction

When importing a compiled react app into a seperate div on the page, the development versionn of styled-components is going crazy. I do not get an error or warning but some rollover styles are broken.

This doesn't seem to happen when building production builds. 
 
I have looked through other issues but since this is a compiled app being imported it is not quite the same. 

Is this safe to do in production builds? 
Will this PR fix? https://github.com/styled-components/styled-components/pull/2954




I'm making a library of components that uses `styled-components`. I have styled components installed as a dependency in the app, but I'm using externals in `rollup` to make sure they don't get packaged up.

When I `npm link` a local version of the library so I can work on it, and install it in an example app, I get the warnings about "multiple versions of styled-components". This makes a proper dev workflow for making a React component npm package very difficult.

It works fine when I `npm install` normally, so I imagine this is something to do with how `npm link` works.

I would just remove `styled-components` from my library and list it as a peer dependency only, but I need it to make my library's storybook work.

I thought this was a Storybook issue for a while, until I saw that **the problem doesn't occur in some older versions of `styled-components`, such as 4.1.3.** Here's an issue I opened there: https://github.com/storybookjs/storybook/issues/9466

## Steps to reproduce

Make some styled components in one place, package it up and `npm link` it.

In an example app, install and import that package with `npm link [packagename]` and you should find the error. 

## Expected Behavior

I don't see any errors because `styled-components` is correctly removed from the built module like I'm specifying in my `rollup` config.

## Actual Behavior

Somehow `styled-components` is leaking out of my library anyway and getting mixed up with the version running in the main example app?
by mirroring attribute key in value. This fixes xhtml support as xml doesn't support attribute minimization (excluding the attribute value).

More specifically from [xhtml spec](https://www.w3.org/TR/xhtml1/) 4.5. Attribute Minimization
"XML does not support attribute minimization. Attribute-value pairs must be written in full. Attribute names such as compact and checked cannot occur in elements without their value being specified."

Without this, xhtml is not supported rendering the hbbtv tv platform outside the scope of styled-components. This worked in v4 as we are currently running it and are very pleased so thanks for all the good work!

## Environment
ssr of any page with xhtml doctype

## Steps to reproduce
[Borked v5 with xhtml doctype on codesandbox.io](https://codesandbox.io/s/flamboyant-golick-8fbqe)

## Expected Behavior
styled-components ssr renders xhtml compatible markup
[Working v4 with xhtml doctype](https://h6ffw.sse.codesandbox.io/)
[code](https://codesandbox.io/s/floral-thunder-h6ffw)


## Actual Behavior
styled-components ssr renders xhtml incompatible markup
[Borked v5 with xhtml doctype](https://8fbqe.sse.codesandbox.io/)
[code](https://codesandbox.io/s/flamboyant-golick-8fbqe)






This update breaks attrs being overwritten for input types.

I have this input component

```
export const Input = styled.input.attrs({
  type: "text"
})`
  ${formControl}
`;
```

which then gets overwritten in other instances with `type=number`.

This update doesn't respect the overwrite.

This is shown in this snapshot change where the only difference is moving from v4.3.2 to v5

```
          id="financeValue"
          name="financeValue"
          placeholder="eg. 1938"
        - type="number"
        + type="text"
```

## Environment
## System:
 - OS: macOS Mojave 10.14.6
 - CPU: (12) x64 Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz
 - Memory: 20.82 MB / 16.00 GB
 - Shell: 5.3 - /bin/zsh
## Binaries:
 - Node: 12.13.0 - /usr/local/bin/node
 - npm: 6.12.0 - /usr/local/bin/npm
 - Watchman: 4.9.0 - /usr/local/bin/watchman
## npmPackages:
 - babel-plugin-styled-components: 1.10.6 => 1.10.6
 - styled-components: 5.0.0 => 5.0.0



I searched old issues commits etc. but couldn't find any reason this was omitted, so I propose adding it.


-------


This avoid `TypeError: Cannot read property 'withConfig' of undefined` when doing

```js
const RedCenteredText = styled.center`
  color: red;
`;

export default () => <RedCenteredText>Red Centered Text</RedCenteredText>;
```

or with the babel plugin

```js
export default () => <center css="color: red;">Red Centered Text</center>
```
Dark Mode with SSR is broken in styled-components. Browsers have a way of picking the right styles based on user preference using media queries. Either with `media` attribute on `<link>` elements or using media queries in CSS files. As far as I know styled-component has no way of extracting CSS files so the only choice is to repeat our CSS once in default theme and once in dark theme but wrapped with a `@media` directive in generated `<style>` element. 

Currently it is suggested that we have a dark theme and decide if user prefers dark or light theme and then pass a proper theme to `<ThemeProvider>`. This breaks in the server where we don't know what user preference is. 

I'm suggesting that we extend the `<ThemeProvider />` in a way that it can accept multiple themes and each theme is associated with a media query. The resulting CSS will be sum of all generated CSS, each theme's generated CSS wrapped in its associated media query. 

### The `themes` prop on `<ThemeProvider />`

Instead of a single theme object, let there be a themes prop that accepts a map of media query to theme objects. The default theme property key can be a Symbol exported from styled-components module:


Example:

```ts
import { ThemeProvider, DEFAULT_KEY_SYMBOL } from 'styled-components'

<ThemeProvider themes={{
  [DEFAULT_KEY_SYMBOL]: {
    theme: {
      colors: { color: 'black', background : 'white' },
    },
  },
  dark: {
    theme: {
      colors: { color: 'white', background : 'black' },
    },
    media: "(prefers-color-scheme: dark)",
  }
}}>

</ThemeProvider>

```

* With this when calling `sheet.getStyleElement()` we will get both themes's CSS. 
* In client this will be unnecessary because we can use JavaScript `window.matchMedia` API to pick the right theme.
* In future if browsers send [User-Agent Client Hint](https://wicg.github.io/ua-client-hints/) to indicate dark mode preference (or any other media query) we can use that to pick a theme.
* Ideally styled-componetns should allow extracting CSS files and sending CSS with `<link>` elements which would avoid shipping unnecessary CSS 


Related https://github.com/styled-components/styled-components/issues/2880
<!-- BUG TEMPLATE -->
## Environment
## System:
 - OS: macOS 10.15.2
 - CPU: (4) x64 Intel(R) Core(TM) i7-7567U CPU @ 3.50GHz
 - Memory: 5.82 GB / 16.00 GB
 - Shell: 3.2.57 - /bin/bash
## Binaries:
 - Node: 12.14.0 - /usr/local/bin/node
 - Yarn: 1.21.1 - /usr/local/bin/yarn
 - npm: 6.13.4 - /usr/local/bin/npm
 - Watchman: 4.9.0 - /usr/local/bin/watchman

## Reproduction
Upgrade to v5.0.0, start app. 

## Steps to reproduce
Upgrade to v5.0.0, start app. 

## Expected Behavior
Styles should be collected on server

## Actual Behavior
The genereated style tag was empty. 


We are using next@9.1.7, and I upgraded today to styled-components@5.0.0, seeing that there were no breaking changes, I expected everything to work as before, however collecting styles on the server no longer works. Only this is created: 

![Screenshot 2020-01-14 at 16 02 00](https://user-images.githubusercontent.com/7705041/72355187-40c1a800-36e7-11ea-9f55-5003b64846ba.png)



