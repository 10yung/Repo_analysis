I use the Lingver library to change the language in my application, but sometimes the text in my application changes to the default language text and this happens in some places in the application. When after opening WebView my application always in some places again changes to text in the default language. In addition, I tried using Plugin-Locale-Kotlin to change the language, but the result is the same.

My previous question on this topic:
https://github.com/bluelinelabs/Conductor/issues/579
I use the Lingver library in my project to change the language. But on some phones in some places sometimes the text does not change.

This is how I change the language in my application.
```
@Override
public void changeLanguage(@NotNull String lang) {
    Lingver.getInstance().setLocale(binding.getRoot().getContext(), lang);
    getActivity().recreate();
}
```
Here is the code in places where the text does not change

```
@PerController
public class TabOffersViewModel extends BaseViewModel<TabOffersCallback> {
    @Inject
    TabOffersViewModel() {
    }

    @Override
    protected void init(Bundle args) {
        RouterPagerAdapter pagerAdapter = new RouterPagerAdapter((Controller) mCallback) {
            @Override
            public void configureRouter(@NonNull Router router, int position) {
                if (!router.hasRootController()) {
                    Controller page;
                    switch (position) {
                        case 0:
                            page = new PriceplansController();
                            break;
                        case 1:
                            page = new ServicesController();
                            break;
                        case 2:
                            page = new TabNewsController(TabNewsController.TAB_ACTIONS);
                            break;
                        case 3:
                            page = new TabNewsController(TabNewsController.TAB_NEWS);
                            break;
                        default:
                            page = new PriceplansController();
                            break;

                    }
                    router.setRoot(RouterTransaction.with(page));
                }
            }

            @Override
            public int getCount() {
                return 4;
            }

            @Override
            public CharSequence getPageTitle(int position) {
                switch (position) {
                    case 0:
                        return mContext.getString(R.string.priceplans_title);
                    case 1:
                        return mContext.getString(R.string.services_title);
                    case 2:
                        return mContext.getString(R.string.title_actions);
                    case 3:
                        return mContext.getString(R.string.title_news);
                    default:
                        return mContext.getString(R.string.priceplans_title);
                }
            }
        };

        mCallback.bindPager(pagerAdapter);
    }
}
```

There is still a code fragment of the layout file. I include this layout to other layouts.
```
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:background="@color/black"
    android:orientation="horizontal"
    android:padding="@dimen/_12sdp">

    <TextView
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:text="@string/det_alert_text"
        android:textColor="@color/white"
        android:textSize="@dimen/_12ssp" />

    <ImageView
        android:id="@+id/close_notif"
        android:layout_width="@dimen/_16sdp"
        android:layout_height="@dimen/_16sdp"
        android:layout_marginStart="@dimen/_12sdp"
        android:contentDescription="close notification"
        app:srcCompat="@drawable/ic_close_yellow_24dp" />

</LinearLayout>
```

This is how I pass context
```
@Module
public class ControllerModule {

    protected final Activity activity;

    public ControllerModule(Activity activity) {
        this.activity = activity;
    }

    @Provides
    @PerController
    public Activity provideActivityContext() {
        return this.activity;
    }
}
```

This is my question from the Lingver repository
https://github.com/YarikSOffice/lingver/issues/11
I'd like to bump this library to java 8 and make use of default implementations.
For example a candidate where I most of the time only need one method to be overwritten is `ControllerChangeListener`.

@EricKuck Would you accept such a PR?

Or should we directly migrate to kotlin?
Now that ViewPager2 is final, we need a `ControllerStateAdapter`
(en pair with `androidx.viewpager2.adapter.FragmentStateAdapter`)
Hi! 

I have encountered a problem related to the change handler when you try to update view between onAttach and changeEnded. In this case, the transition animation is not smooth.

For example. There are controllers: A and B. Controller A goes to B using HorizontalChangeHandler.  I subscribe to a database on non-UI thread in onAttach() method of controller B  and update view once the data came. Accordingly, the data can come before the transition animation finishes or onChangeEnded method calls. And because of that, the view can be touched during animation and this leads to the problem with smoothness.

```
class B : Controller() {

   fun onAttach() {
      database
           .subscribeOn(ui()) 
           .observeOn(mainThread())
           .subscribe({ updateUi(it) }, { showError(it) })
   } 

   // this method can be called befor onChangeEnded will be called
   fun updateUi(list: List<Data>) {
      adapter.submitList(list)
   }
   ...
}

```
Does Conductor have some option to delay animation until target controller says: "I'm ready, animate me"?
Quite often I don't want my apps to restore their last controller hierarchy after being killed on process death. Usually because I think the user wants to start fresh anyways and doesn't know where he left hours before.

I do this by calling `Conductor.attachRouter(this, rootContainer, **null**)` whenever I detect process death. Of course, instance state is saved anyways but I just ignore it on next start. So far so good.

Unfortunately, Conductor is not aware of this and still forces my controllers to have a default and a bundle constructor which I don't need/want in my case because my controllers do not need to be restored. The first enforcement is done by conductor-lint which I can luckily circumvent by having the two required constructors as protected in my BaseController. Okay.

The second and only thing left is that on creation of each controller `ensureRequiredConstructor()` is called at runtime and checks my controllers for these two constructors. If this method would be protected instead of private I could also override it in my BaseController which is aware of how I "configured" conductor and therefore can prevent these checks.

**Is there any chance that ensureRequiredConstructor() can be changed to "protected"?**
Or do you even plan to provide other options to configure conductor the way I want?
Came across a bug when we have a parent controller with RETAIN_DETACH and its child controller with RELEASE_DETACH. If we push another RELEASE_DETACH controller to the parent router and then pop back, the child controller won't be attached and it will have a null view property but the view itself will be still in its parent and therefore visible... Here I've fixed the bug and added a correspond test.

The current workaround for this bug is setting RETAIN_DETACH for the child controller.
According my comment in https://github.com/bluelinelabs/Conductor/issues/287 here I've fixed locking all changes to a router because of having constantly non empty pendingControllerChanges after rotation on launching.

That can be reproduced after adding this lines in the demo activity and launching app in a rotated simulator: https://github.com/soniccat/Conductor/commit/a86d0c6428e6bed412dc46b2e7d720d7d7d204e9
When I call popController for a controller in the middle of a backstack the Controller.performDestroy isn't called but the view of the controller is removed and the controller is removed from the backstask.

As popController has the flow for false poppingTopController I suppose everything should have worked correctly.

The original issue is here: https://github.com/bluelinelabs/Conductor/issues/563
I am using the 3.0.0-rc2 version of conductor and seeing this crash occasionally when popping a current controller:

```
java.lang.NullPointerException: Attempt to invoke virtual method 'void com.bluelinelabs.conductor.internal.LifecycleHandler.unregisterForActivityResults(java.lang.String)' on a null object reference
at com.bluelinelabs.conductor.ActivityHostedRouter.unregisterForActivityResults(ActivityHostedRouter.java:105)
at com.bluelinelabs.conductor.Controller.destroy(Controller.java:1114)
at com.bluelinelabs.conductor.Controller.destroy(Controller.java:1107)
at com.bluelinelabs.conductor.Backstack.pop(Backstack.java:61)
at com.bluelinelabs.conductor.Router.popController(Router.java:137)
at com.bluelinelabs.conductor.Router.popCurrentController(Router.java:120)
```

I've reviewed a few of the previous issues and they are marked as closed from the 2.x version.

Any suggestions or direction here? 