
楼主，有个疑问，在预留资源后为什么没有把预留结果上报到事务协调器
请问在下单生成预订单时是如何实现t_product_stock_tcc表添加并移除数据的
account/product等模块从config-server动态获取配置无效。
参考启动warning
```
2019-01-22 14:20:02.102  WARN [tcc,,,] 16988 --- [           main] o.s.c.a.ConfigurationClassPostProcessor  : Cannot enhance @Configuration bean definition 'refreshScope' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
```

一堆环境，一堆依赖，不能开箱即用。作为学习TCC的话，链路追踪、config-server、docker这些都不需要的。

参与者是如何实现幂等性的？
CoordinateService 是如何防参与者宕机或网络抖动的？
 真正的消费业务逻辑在IncreasePointsEventHandler中，如果try中自己的业务抛出了异常，改如何处理？ 

 @Override
    public void handle(EventSubscriber subscriber) {
        Preconditions.checkNotNull(subscriber);
        Preconditions.checkNotNull(subscriber.getId());
        try {
            if (Objects.equal(BUSINESS_TYPE, subscriber.getBusinessType())) {
                // 这里取巧，将生产者的报文特地写成PointFlow的格式
                final PointFlow request = Jacksons.getMapper().readValue(subscriber.getPayload(), PointFlow.class);
                // 简单地增加流水，为了简便就没有模拟任何业务上的校验
                pointService.persistFlow(request);
                // 增加总数
                pointService.increasePoint(request.getPoint(), request.getUserId());
                getMapper().updateEventStatusByPrimaryKeyInCasMode(subscriber.getId(), EventStatus.NEW, EventStatus.DONE);
            } else {
                if (successor != null) {
                    successor.handle(subscriber);
                }
            }

        } catch (IOException e) {
            throw new IllegalArgumentException("读取JSON报文至实体时发生异常. payload: " + subscriber.getPayload() + ", entity: PointFlow.class");
        }
    }