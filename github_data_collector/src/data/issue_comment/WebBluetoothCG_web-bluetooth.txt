The spec currently does not specify how Bluetooth device permissions should be stored. There is a [note](https://webbluetoothcg.github.io/web-bluetooth/#bluetooth) that mentions that an origin can access any service whose UUID was listed in the request device filters and optional services.

The WebUSB spec has a [explicit algorithm](https://wicg.github.io/webusb/#add-device-to-storage) for storing granted device permissions, so we should probably do the same for Web Bluetooth.
We have User Activation v2 model [in the HTML spec](https://html.spec.whatwg.org/multipage/interaction.html#tracking-user-activation) now.  "Triggered by user activation" should now be changed accordingly.  See the HTML issue mentioned below.
The current `getAvailability()` is an async API and the given example looks like this:

```js
navigator.bluetooth.getAvailability().then(isAvailable => {
  // get BLE availability by the promise value
});
navigator.bluetooth.addEventListener('availabilitychanged', e => {
  // get BLE availability by `e.value`
});
```
This looks inconsistent a bit though it's working absolutely, and a little bit weird with the `async` attribute, take a look at the type of example:

```js
navigator.bluetooth.on('availabilitychanged', e => {
  navigator.bluetooth.getAvailability().then((isAvailable) => {
    assert.equal(e.value, isAvailable); // possible to be failed unfortunately
  });
});
```

Within this inconsistent but correct behavior, that's easier to produce a buggy application. See the ["Overall Bluetooth availability"](https://webbluetoothcg.github.io/web-bluetooth/#availability) section, at 2nd algorithm block, it shows up the **UA** SHOULD hold the status in memory, and fires event when it gets changed, so the case to get it still be async might be the first-time fetch? But IMO, blocking this method is another solution to us util the user type ACCEPT or REJECT.


An equivalent to `watchAdvertisements()` which fires an event in a Service Worker when an advertisement is received.

**Use case:** Allow the user agent to detect in the background when a device supported by a previously visited site has come back into range and offer the opportunity for the user to reopen the page to connect to the device. This is similar in concept to the Background Sync API.

This is a subset of/related to the request in #6.
Would be nice if we could specify which procedures exactly we should do here e.g.:
```
If the Write bit is set in characteristic’s properties, use the Write Characteristic Value procedure, otherwise use the Write without Response procedure.
```
I think currently we just let each platform decide, which creates differences across platforms and could result in differences across implementations.

_Originally posted by @g-ortuno in https://github.com/WebBluetoothCG/web-bluetooth/pull/433_
A reliable write is distinct from write-with-response in that it allows writing multiple characteristics as part of a single transaction. This will require additional API work to specify how these transactions are begun, committed or aborted.

OS APIs:
* Android: [BluetoothGatt.beginReliableWrite()](https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#beginReliableWrite())
* Windows: [GattReliableWriteTransaction](https://docs.microsoft.com/en-us/uwp/api/windows.devices.bluetooth.genericattributeprofile.gattreliablewritetransaction)
* macOS: Appears not supported
* BlueZ: Appears not supported
It would be great if it does or there's a plan on it.





First, the source code for the BLE Peripheral Simulator is a tremendous resource for anyone investigating Web Bluetooth.
https://github.com/WebBluetoothCG/ble-test-peripheral-android

There is a an approved list of GATT Services.
https://www.bluetooth.com/specifications/gatt/services/

When I modified the Android source code to use a custom defined GATT service (easy to do by simply specifying your own UUID in the Android code) pairing from the web page to the Android app running the GATT sever fails.

The Web Bluetooth documentation does state, "If device’s advertised Service UUIDs have a non-empty intersection with the set of Service UUIDs, add device to result and abort these sub-steps [for pairing]."

Does this mean only services in the approved GATT list are supported? If so, what is the rational? It seems that such a restriction would limit innovation. 

CC @reillyeon @domenic
The default values of BluetoothLEScanOptions should be as if you didn't specify a filter to RequestLEScan().