Here's a codesandbox: https://codesandbox.io/s/scene-issue-nhqmn

You can see there are two objects that should flash on and off screen, one is a scene created manually by `new THREE.Scene()`, and the other is native r3f

```jsx
      {visible && <primitive object={sceneState} />}
      {visible && (
        <mesh position={[2, 2, 0]}>
          <boxBufferGeometry attach="geometry" args={[1, 1, 1]} />
          <meshStandardMaterial attach="material" />
        </mesh>
      )}
```

You can see that after the first flash, only the box reappears. The scene does not.

I suspect this may be a Threejs "issue" (not even sure if bug), but wanted to file for visibility in case anyone else hits it.

Where this is affecting me is during hot reloading. I lose my mounted hand-created scene during hot reloading. The scene comes loading an external 3d model, which is turned into a Scene at runtime
https://evilmartians.com/chronicles/faster-webgl-three-js-3d-graphics-with-offscreencanvas-and-web-workers
Did you manage to implement it in your projects?
Just bumped up to 4.0.5, and I'm not sure if this is new or existing, but doing something like `<group position={undefined} />` causes this error:

<img width="921" alt="Screen Shot 2020-01-14 at 10 40 12 PM" src="https://user-images.githubusercontent.com/79215/72499569-13f4ba00-37e7-11ea-9e2d-664a725cb998.png">

That may seem silly, bit I had something like this

```jsx
const MyMeshGroup = ({ position }) => {
    return (<group position={position}>
      ...
    </group>);
}

const Scene = () => {
    return (<>
       ...
        <MyMeshGroup />
    </>);
}
```

The error is "cannot read property 'constructor' of undefined", because it's trying to read the target prop position.

The error required pausing on uncaught exceptions and combing through the react tree to figure out where it was actually caused.

I'm not sure if this should be an error case, my first thought is setting prop to undefined should be a no-op. But then I wonder what it would mean to "unset" a prop like position.
Seems the latest v4.0.0/v4.0.1 has an issue in the TypeScript definitions. I'm importing `Canvas` as follows:
```ts
import { Canvas, CanvasContext } from "react-three-fiber";
```

However, since the update this gives me a TS error:
> TypeScript error in [...]/node_modules/react-three-fiber"' has no exported member 'Canvas'.  TS2305

Importing a specific renderer directly such as `"react-three-fiber/svg"` or `"react-three-fiber/web"` gives an error that no declaration files could be found:
> Could not find a declaration file for module 'react-three-fiber/web'. '[...]/node_modules/react-three-fiber/web.js' implicitly has an 'any' type.


Otherwise I'm very excited testing the update. Amazing work!
seems mobile version needs expo-gl and unimodules, installation is very hard
any examples? 
ðŸ‘‹ hi 

I want to use `react-three-fiber` to draw something like this:

`elements.map(element =>`
   `<mesh material={elementMaterial}>`
      `<shapeBufferGeometry>`
   `</mesh>`
`)`

when count of elements update,  there will generate all new element again and can't dispose old geometry, I try to use `useEffect` to solve this problem but not work like this:

`const map = () => {
   useEffect(() => {
      return function 
      ref.current.geometry.dispose()
   }, []);
}`
Hi, ðŸ‘‹

I wanted to create a simple "store" for my app with `createContext`. Unexpectedly, I found out that I can't access my context within the Canvas element.

```javascript
const StateContext = createContext(null);

const store = {
        testData: 3,
 };

    return (
<StateContext.Provider value={store}>
    <Controls />
    <Canvas>
        <ThreeElement />
        <Another3DElement />
    </Canvas>
</StateContext.Provider>
```

When I want to access my context within the components (which are wrapped in Canvas) with `useContext(StateContext)` I do not get any data. I tried to write the context provider **as a child** of the Canvas element, which suddenly let me gain access to my context inside the elements.

I do not want to wrap my App with two single context providers (one on the top level, and one inside Canvas), as I want to wrap my whole App into just one context provider. Is there any possibility to access the context in the elements wrapped in the canvas, without making a separate provider? And what is causing the current behaviour?
What do you think about [CodeSandbox CI](https://codesandbox.io/docs/ci)?

The code using react-three-fiber is pretty _visual_, so a possibility to play with PR changes and see what happens would help the process. And well, deploying reproduction/example projects is pretty boring.
I specifically noticed this issue when using react-spring to animate a property of a react-three-fiber component.

If the useThree hook is used anywhere in the tree, scrolling will cause the size value to recalculate in order to update the bottom and top values. If a spring going to a chained value (an array of values) is used that spring chain will occur again every time the size is recalculated. 

Here is an example of what I am referring to https://codesandbox.io/s/stoic-wozniak-z58lm.
- [ ] switching on concurrent mode in the reconciler. this will enable time slicing and faster rendering overall. react will be able to schedule and defer updates if it detects that a 60fps framerate is threatened somehow.

- [ ] optional import components https://github.com/react-spring/react-three-fiber/pull/233 this is more interesting for typescript users.

```jsx
import { Mesh } from 'react-three-fiber/components'

<Mesh />
```

- [ ] extras/helpers?

Things that usually need some boilerplate could be abstracted and collected. For instance controls, [level-of-detail](https://codesandbox.io/s/react-three-fiber-gltf-loader-animations-e9vpx?from-embed), etc

```jsx
import { OrbitControls } from 'react-three-fiber/extras'

<OrbitControls enableDamping />
```

- [ ] useCenter?

```jsx
import { useCenter } from 'react-three-fiber/extras'

function useCenter(ref)
  const [center, setCenter] = useState([0, 0, 0])
  const ref = useRef()
  useEffect(() => {
    const box = new Box3().setFromObject(ref.current)
    const sphere = new Sphere()
    box.getBoundingSphere(sphere)
    setCenter([-sphere.center.x, -sphere.center.y, -sphere.center.z])
  }, [])
  return [ref, center]
}
```

- [ ] something to help with simple animations other than react-spring/three?

https://twitter.com/0xca0a/status/1193148722638737408

- [ ] new object={...} ?

currently `primitive` can project an object into the scene that is already there. if you have a class prototype outside of the THREE namespace you must use extent before you can use it in jsx. what about:

```jsx
<new object={Xyz} args={[1,2,3]} {...props} />
// const temp = new Xyz(1,2,3)
// applyProps(temp, props)
```