Refactor of the module with several feature additions

#### Added
* Searching/installing/managing multiple Chocolatey sources (#5)
* DSC Compatibility, including additional package arguments
* 'Upgrade' packages using the 'latest' required version keyword (#14)
  * Thanks to @matthewprenger for help with this

#### Changed
* To facilitate readability, broke up main module file into several function files
  * Grouped by 'public' functions used by PackageManagement vs 'private' functions that contains much of the shared logic for interacting with choco.exe
  * Common logic, such as building commands, sending them to choco.exe, and parsing results, are consolidated across multiple PackageManagement cmdlets into a single set of helper functions

#### Fixed
* Get-Package no longer lists 'chocolatey' twice (#12)
* Improved performance when downloading large packages with embedded installers

#### Removed
* With Chocolatey-managed upgrades via the provider now available, the package provider no longer unilaterally upgrades Chocolatey on invocation if already installed
* No longer displays progress bars in order to simplify passing data between functions via the pipeline in a way that's idiomatic to PowerShell
Since PackageManagement and corresponding DSC resource don't natively support the concept of an 'Upgrade-Package' cmdlet, we could expose the concept of an upgrade with the use of a special keyword passed to Get-Package's RequiredVersion parameter that triggers Find-Package's logic to check for the latest version available before checking to see if that version is already installed. The DSC LCM could, in effect, keep the package continually up to date. 

```powershell
# CLI example
Get-Package python -ProviderName chocolateyget -RequiredVersion latest
```
 
```powershell
# DSC Example
PackageManagement PythonChoco {
	Name = 'python'
	RequiredVersion = 'latest'
	ProviderName = 'chocolateyget'
}
```

Probably could only work if one (and only one) source is available to the provider / configured in chocolatey (Chocolatey.org by default). Example enhancement based on my multi-source branch: ethanbergstrom@399bfa0a9baa8ceb6a86bde31e1aa73455c02fe2 with help from @matthewprenger

~~Will hold on PR until after the multi-source PR is resolved.~~ Fixed in #15 
**when I installed chocolateyget , it showed me some "error". I want to know whether it will be a critical issue or not . any advise ?**

> Hash for package 'ChocolateyGet' does not match hash provided from the server.


bellow is the full output.


[xx.xx.xx.xx]: PS C:\> Install-PackageProvider ChocolateyGet -verbose
VERBOSE: Using the provider 'Bootstrap' for searching packages.
VERBOSE: Finding the package 'Bootstrap::FindPackage' 'ChocolateyGet','','','''.
VERBOSE: Using the provider 'PowerShellGet' for searching packages.
VERBOSE: The -Repository parameter was not specified.  PowerShellGet will use all of the registered repositories.
VERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.
VERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2' and PackageManagementProvider is 'NuGet'.
VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='ChocolateyGet'' for ''.
VERBOSE: Total package yield:'1' for the specified package 'ChocolateyGet'.
VERBOSE: Performing the operation "Install Package" on target "Package 'ChocolateyGet' version '1.0.0.1' from 'PSGallery'.".
VERBOSE: The specified module will be installed in 'C:\Program Files\WindowsPowerShell\Modules'.
VERBOSE: The specified Location is 'NuGet' and PackageManagementProvider is 'NuGet'.
VERBOSE: Downloading module 'ChocolateyGet' with version '1.0.0.1' from the repository 'https://www.powershellgallery.com/api/v2'.
VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='ChocolateyGet'' for ''.
VERBOSE: InstallPackage' - name='ChocolateyGet', version='1.0.0.1',destination='C:\Users\tlsadmin\AppData\Local\Temp\2015507138'
VERBOSE: DownloadPackage' - name='ChocolateyGet', version='1.0.0.1',destination='C:\Users\tlsadmin\AppData\Local\Temp\2015507138\ChocolateyGet\C
hocolateyGet.nupkg', uri='https://www.powershellgallery.com/api/v2/package/ChocolateyGet/1.0.0.1'
VERBOSE: Downloading 'https://www.powershellgallery.com/api/v2/package/ChocolateyGet/1.0.0.1'.
VERBOSE: Completed downloading 'https://www.powershellgallery.com/api/v2/package/ChocolateyGet/1.0.0.1'.
VERBOSE: Completed downloading 'ChocolateyGet'.
VERBOSE: Hash for package 'ChocolateyGet' does not match hash provided from the server.
VERBOSE: InstallPackageLocal' - name='ChocolateyGet', version='1.0.0.1',destination='C:\Users\tlsadmin\AppData\Local\Temp\2015507138'
VERBOSE: Catalog file 'ChocolateyGet.cat' is not found in the contents of the module 'ChocolateyGet' being installed.
VERBOSE: Module 'ChocolateyGet' was installed successfully to path 'C:\Program Files\WindowsPowerShell\Modules\ChocolateyGet\1.0.0.1'.
```powershell
PS C:\> get-package -ProviderName chocolateyget

Name                           Version          Source                           ProviderName
----                           -------          ------                           ------------
Chocolatey                     v0.10.8          https://www.chocolatey.org       ChocolateyGet
chocolatey                     0.10.8           https://www.chocolatey.org       ChocolateyGet
chocolatey-core.extension      1.3.3            https://www.chocolatey.org       ChocolateyGet
pip                            1.2.0            https://www.chocolatey.org       ChocolateyGet
python                         3.6.4.20180116   https://www.chocolatey.org       ChocolateyGet
python3                        3.6.4.20180116   https://www.chocolatey.org       ChocolateyGet
```

Should be able to fix by passing the -r flag to choco in Get-InstalledPackages and changing the regex. Example fix based on current version of package: ethanbergstrom@c7a490e4449e62c3be0aad94506e92c6683bc713 

```powershell
PS C:\> get-package -ProviderName chocolateyget

Name                           Version          Source                           ProviderName
----                           -------          ------                           ------------
chocolatey                     0.10.8           https://www.chocolatey.org       ChocolateyGet
chocolatey-core.extension      1.3.3            https://www.chocolatey.org       ChocolateyGet
pip                            1.2.0            https://www.chocolatey.org       ChocolateyGet
python                         3.6.4.20180116   https://www.chocolatey.org       ChocolateyGet
python3                        3.6.4.20180116   https://www.chocolatey.org       ChocolateyGet
```

~~Will hold on PR until after after the multi-source PR is resolved.~~ Fixed in #15 

It looks like some packages are not being found in the repo. For example Vivaldi. If I run `choco search vivaldi` I see that the package is available and can install it. If I run `packagemanager -providername chocolateyget -name vivaldi` it tells me no match was found. This is only the case for some packages though. I was able to find and install kdevelop just fine.
When using ChocolateyGet behind a proxy server, in some situations its not working. 
While choco.exe can be easily configured to use a proxy [https://github.com/chocolatey/choco/wiki/Proxy-Settings-for-Chocolatey#explicit-proxy-settings](url), the ChocolateyGet Module can't. 

**Function Install-ChocoBinaries** uses Invoke-WebRequest at some point, which doesn't work behind a proxy server per default. While this is not a big deal when using ChocolateyGet in normal PS1 Scripts, as we can set the proxy using **[system.net.webrequest]::defaultwebproxy** globally, this is not possible when using ChocolateyGet within a PowerShell DSC Configuration as LCM has no option to set a proxy, as far as I know. 

That means, there is no way to make it work within a DSC Configuration behind a proxy. 

**Recommendation**: Allow the ChocolateyGet Module to receive AdditionalParameters, so it can be set using the same approach as other package providers, e.g. NuGet [https://github.com/PowerShell/PackageManagementProviderResource/blob/master/Examples/Sample_Install_Package_Using_NuGet.ps1](url) > Note the AdditionalParameters Dictionary, that can be passed. 

thanks




Try this:

```
Install-Package -name 'gifcam' -providername 'chocolateyget' -force
```

Vs

```
choco install gifcam
```

It appears that there's another prompt asking whether to proceed if there's no checksum. In this case gifcam is not installed if attempted to be installed via Install-Package.
Using `Get-PackageSource` doesn't show chocolateyget's source. Every time I install a package it asks about the fact that `https://www.chocolatey.org` is untrusted.
Basically in the title.

Is this provider better?

After testing it for a bit, I found that it worked in 2 cases where the original prototype chocolatey provider didn't work. One that involved 7zip archiving, and the other that had a `-` in its package name.

Can we know where binaries and command line executables are stored?
