```
private class TestTask extends AsyncTask<Object, String, Boolean> {
        @Override
        protected Boolean doInBackground(Object... objects) {
            //....
            return true;
        }

        @Override
        protected void onPostExecute(Boolean aBoolean) {
            //....
            Crouton.makeText(??, "Some text", Style.ALERT).show();
    }
```

Crouton Not work when app come background nearly after 2 mins. 
When remove from memory and start again it's work perfect. 

if user come background in 20 seconds it is not problem again work perfect. 

Do you have any idea how can i solve that ?
Hi guys, 

I'm looking for a way to have a text that is mid bold mid italic. It seems impossible at the moment, because there is not method to do that and I can't touch the textview of crouton properly. 

Should I made a PR ?
When the animations get run there is a Handler that gets set on the Animation (Animation.mListenerHandler). This Handler holds a reference to the Activity. So caching the animations in a static field causes the Activity to be leaked. The fix was to remove the static fields that were caching the animation. Now the animations are created new each time.

final class DefaultAnimationsBuilder {
    private static final long DURATION = 400L;
    private static Animation slideInDownAnimation; // memory leak, hold on activity
    private static Animation slideOutUpAnimation; // memory leak, hold on activity
    ...
}

If you use leakcanary (https://github.com/square/leakcanary), you can detect this memory leak.

Please check it. Thanks. 

Fix wrong group exclusion in readme as in issue #190

This is one of the severe issues keeping me from quickly adapting new features and accepting new features.
It has no tests whatsoever. This issue keeps me from adding new features without fearing that the functionality will break.

So far I have not found a sufficient and elegant way to test the libraries behavior from the Unit or Integration side.

I offer a case of beer / Mate for pickup in Berlin to the person(s) creating a sufficient and maintainable testing solution for Crouton.
