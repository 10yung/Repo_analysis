I have tried to run example but ended up with issues like

`Uncaught ReferenceError: angular is not defined`

It looks like a lot of packages were deprecated and made `generator-angular` outdated/not working state.

Any updates on getting it fixed/updated?
There is app folder that has the application content.

1. If I register service-worker in app folder, I cannot cache bower components and then app does not work offline.

2. If I register service worker outside of app folder, index.html which is in app folder, is never able to find path of servie-worker.js which is outside of app folder, in the root directory.

I have tried this in index.html:

```
if( 'serviceWorker' in navigator ) {
    navigator.serviceWorker
      .register( '../service-worker.js' , { scope : ' ' } )
      .then( function( ) {
        console.log('Congratulations!!Service Worker Registered');
      })
      .catch( function( err) {
        console.log(`Aagh! Some kind of Error :- ${err}`);
      });
  } else {
    console.log("SW NOT SUPPORTED");
    //still not supported
  }
```
But I only get 404.

I have also tried using absolute path i.e

  .register( '/service-worker.js' , { scope : ' ' } )
I am getting an error while refreshing the current page. And the error is 404 page not found.

<img width="173" alt="capture1" src="https://user-images.githubusercontent.com/28437563/34164090-a0288a76-e4fe-11e7-89c2-04472dd27152.PNG">

Anyone please refer my issue.Thank You.
GET http://127.0.0.1:35729/livereload.js?snipver=1 net::ERR_CONNECTION_REFUSED

I only get this error while `grunt serve:dist` but `grunt serve` work fine. Any ideas why this might be happening ?
I am not sure if the issue is caused specifically by generator-angular but given the userbase of it I think it is fair to post an issue here.

The produced source maps are invalid according to https://sourcemaps.io and to support team at Sentry.

Sources property in the source map is incorrect: 
`"sources":["../../.tmp/concat/scripts/vendor.js"]`.

After manual fix https://sourcemaps.io reports another problem:
SourceMap thinks that line 16 of scripts.c1767f72.js is a thing, but it's not.
Your sourcemap is referencing a line that does not exist.

In order to reproduce just pass an option to create source maps to uglify:
uglify: {
            generated: {
                options: {
                    sourceMap: true
                }
            }
}
I would like to know if anyone has already stopped using Bower for using just NPM. If yes, have you updated Gruntfile for minified, etc? 

Thanks
'use strict';

// # Globbing
// for performance reasons we're only matching one level down:
// 'test/spec/{,*/}*.js'
// use this if you want to recursively match all subfolders:
// 'test/spec/**/*.js'

module.exports = function(grunt) {

    // Time how long tasks take. Can help when optimizing build times
    require('time-grunt')(grunt);

    // Automatically load required Grunt tasks
    require('jit-grunt')(grunt, {
        useminPrepare: 'grunt-usemin',
        ngtemplates: 'grunt-angular-templates',
        cdnify: 'grunt-google-cdn'
    });

    var modRewrite = require('connect-modrewrite');

    // Load watch
    grunt.loadNpmTasks('grunt-contrib-watch');

    // Configurable paths for the application
    var appConfig = {
        app: require('./bower.json').appPath || 'app',
        dist: '../'
    };

    // Define the configuration for all the tasks
    grunt.initConfig({

        // Project settings
        yeoman: appConfig,

        // Watches files for changes and runs tasks based on the changed files
        watch: {
            bower: {
                files: ['bower.json'],
                tasks: [
                    //  'wiredep'
                ]
            },
            js: {
                files: ['<%= yeoman.app %>/scripts/{,*/}*.js'],
                tasks: [
                    //  'newer:jshint:all',
                    //  'newer:jscs:all'
                ],
                options: {
                    livereload: '<%= connect.options.livereload %>'
                }
            },
            html: {
                files: [
                    '<%= yeoman.app %>/{,*/}*.html',
                    '.tmp/styles/{,*/}*.css',
                    '<%= yeoman.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'
                ],
                tasks: ['build']
            },
            jsTest: {
                files: ['test/spec/{,*/}*.js'],
                tasks: ['newer:jshint:test', 'newer:jscs:test', 'karma']
            },
            gruntfile: {
                files: ['Gruntfile.js']
            },
            livereload: {
                options: {
                    livereload: '<%= connect.options.livereload %>'
                },
                files: [
                    '<%= yeoman.app %>/{,*/}*.html',
                    '.tmp/styles/{,*/}*.css',
                    '<%= yeoman.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'
                ]
            },
            recess: {
                files: ['<%= yeoman.app %>/{,*/}*.less'],
                tasks: ['recess:dist']
            }
        },

        // The actual grunt server settings
        connect: {
            options: {
                port: 9500,
                // Change this to '0.0.0.0' to access the server from outside.
               hostname: '192.168.1.53',
                livereload: 33333
            },
            livereload: {
                options: {
                  open: true,
                  middleware: function (connect) {
                    return [
                      modRewrite(['^[^\\.]*$ /index.html [L]']),
                      connect.static('.tmp'),
                      connect().use(
                        '/bower_components',
                        connect.static('./bower_components')
                      ),
                      connect().use(
                        '/app/styles',
                        connect.static('./app/styles')
                      ),
                      connect.static(appConfig.app)
                    ];
                  }
                }
              },
            // livereload: {
            //     options: {
            //         open: true,
            //         middleware: function(connect) {
            //             return [
            //                 connect.static('.tmp'),
            //                 connect().use(
            //                     '/bower_components',
            //                     connect.static('./bower_components')
            //                 ),
            //                 connect().use(
            //                     '/app/styles',
            //                     connect.static('./app/styles')
            //                 ),
            //                 connect.static(appConfig.app)
            //             ];
            //         }
            //     }
            // },
            test: {
                options: {
                    port: 9001,
                    middleware: function(connect) {
                        return [
                            connect.static('.tmp'),
                            connect.static('test'),
                            connect().use(
                                '/bower_components',
                                connect.static('./bower_components')
                            ),
                            connect.static(appConfig.app)
                        ];
                    }
                }
            },
            dist: {
                options: {
                    open: true,
                    base: '<%= yeoman.dist %>'
                }
            }
        },

        // Make sure there are no obvious mistakes
        jshint: {
            options: {
                jshintrc: '.jshintrc',
                reporter: require('jshint-stylish')
            },
            all: {
                src: [
                    'Gruntfile.js',
                    '<%= yeoman.app %>/scripts/{,*/}*.js'
                ]
            },
            test: {
                options: {
                    jshintrc: 'test/.jshintrc'
                },
                src: ['test/spec/{,*/}*.js']
            }
        },

        // Make sure code styles are up to par
        jscs: {
            options: {
                config: '.jscsrc',
                verbose: true
            },
            all: {
                src: [
                    'Gruntfile.js',
                    '<%= yeoman.app %>/scripts/{,*/}*.js'
                ]
            },
            test: {
                src: ['test/spec/{,*/}*.js']
            }
        },

        // Empties folders to start fresh
        clean: {
            dist: {
                options:{
                    force: true
                },
                files: [{
                    dot: true,
                    src: [
                        '.tmp',
                        '<%= yeoman.dist %>/fonts/*',
                        '<%= yeoman.dist %>/images/*',
                        '<%= yeoman.dist %>/scripts/*',
                        '<%= yeoman.dist %>/styles/*',
                        '<%= yeoman.dist %>/index.html'
                    ]
                }]
            },
            server: '.tmp'
        },

        // Add vendor prefixed styles
        postcss: {
            options: {
                processors: [
                    require('autoprefixer-core')({ browsers: ['last 1 version'] })
                ]
            },
            server: {
                options: {
                    map: true
                },
                files: [{
                    expand: true,
                    cwd: '.tmp/styles/',
                    src: '{,*/}*.css',
                    dest: '.tmp/styles/'
                }]
            },
            dist: {
                files: [{
                    expand: true,
                    cwd: '.tmp/styles/',
                    src: '{,*/}*.css',
                    dest: '.tmp/styles/'
                }]
            }
        },

        // Renames files for browser caching purposes
        filerev: {
            dist: {
                src: [
                   
                    '<%= yeoman.dist %>/styles/{,*/}*.css',
                    '<%= yeoman.dist %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}',
                    '<%= yeoman.dist %>/fonts/*'
                ]
            }
        },

        // Reads HTML for usemin blocks to enable smart builds that automatically
        // concat, minify and revision files. Creates configurations in memory so
        // additional tasks can operate on them
        useminPrepare: {
            html: '<%= yeoman.app %>/index.html',
            options: {
                dest: '<%= yeoman.dist %>',
                flow: {
                    html: {
                        steps: {
                            js: ['concat', 'uglifyjs'],
                            css: ['cssmin']
                        },
                        post: {}
                    }
                }
            }
        },

        // Performs rewrites based on filerev and the useminPrepare configuration
        usemin: {
            html: ['<%= yeoman.dist %>/{,*/}*.html'],
            css: ['<%= yeoman.dist %>/styles/{,*/}*.css'],
            js: ['<%= yeoman.dist %>/scripts/{,*/}*.js'],
            options: {
                assetsDirs: [
                    '<%= yeoman.dist %>',
                    '<%= yeoman.dist %>/images',
                    '<%= yeoman.dist %>/styles'
                ],
                patterns: {
                    js: [
                        [/(images\/[^''""]*\.(png|jpg|jpeg|gif|webp|svg))/g, 'Replacing references to images']
                    ]
                }
            }
        },

        // The following *-min tasks will produce minified files in the dist folder
        // By default, your `index.html`'s <!-- Usemin block --> will take care of
        // minification. These next options are pre-configured if you do not wish
        // to use the Usemin blocks.
        // cssmin: {
        //   dist: {
        //     files: {
        //       '<%= yeoman.dist %>/styles/main.css': [
        //         '.tmp/styles/{,*/}*.css'
        //       ]
        //     }
        //   }
        // },
        // uglify: {
        //   dist: {
        //     files: {
        //       '<%= yeoman.dist %>/scripts/scripts.js': [
        //         '<%= yeoman.dist %>/scripts/scripts.js'
        //       ]
        //     }
        //   }
        // },
        // concat: {
        //   dist: {}
        // },

        imagemin: {
            dist: {
                files: [{
                    expand: true,
                    cwd: '<%= yeoman.app %>/images',
                    src: '[*/*.{png,jpg,jpeg,gif,svg}]',
                    dest: '<%= yeoman.dist %>/images'
                }]
            }
        },

        svgmin: {
            dist: {
                files: [{
                    expand: true,
                    cwd: '<%= yeoman.app %>/images',
                    src: '{,*/}*.svg',
                    dest: '<%= yeoman.dist %>/images'
                }]
            }
        },

        htmlmin: {
            dist: {
                options: {
                    collapseWhitespace: true,
                    conservativeCollapse: true,
                    collapseBooleanAttributes: true,
                    removeCommentsFromCDATA: true
                },
                files: [{
                    expand: true,
                    cwd: '<%= yeoman.dist %>',
                    src: ['*.html'],
                    dest: '<%= yeoman.dist %>'
                }]
            }
        },

        ngtemplates: {
            dist: {
                options: {
                    module: 'fixurApp',
                    htmlmin: '<%= htmlmin.dist.options %>',
                    usemin: 'scripts/scripts.js'
                },
                cwd: '<%= yeoman.app %>',
                src: 'views/{,*/}*.html',
                dest: '.tmp/templateCache.js'
            }
        },

        // ng-annotate tries to make the code safe for minification automatically
        // by using the Angular long form for dependency injection.
        ngAnnotate: {
            dist: {
                files: [{
                    expand: true,
                    cwd: '.tmp/concat/scripts',
                    src: '*.js',
                    dest: '.tmp/concat/scripts'
                }]
            }
        },

        // Replace Google CDN references
        cdnify: {
            dist: {
                html: ['<%= yeoman.dist %>/*.html']
            }
        },

        // Copies remaining files to places other tasks can use
        copy: {
            dist: {
                files: [{
                    expand: true,
                    dot: true,
                    cwd: '<%= yeoman.app %>',
                    dest: '<%= yeoman.dist %>',
                    src: [
                        '*.{ico,png,txt}',
                        '*.html',
                        'images/{,*/}*.{webp}',
                        'fonts/{,*/}*.*',
                        'scripts/{,*/}*.*',
                        'scripts/controllers/{,*/}*.*',
                        'scripts/services/{,*/}*.*'
                    ]
                }, {
                    expand: true,
                    cwd: '.tmp/images',
                    dest: '<%= yeoman.dist %>/images',
                    src: ['generated/*']
                }, {
                    expand: true,
                    cwd: 'bower_components/bootstrap/dist',
                    src: 'fonts/*',
                    dest: '<%= yeoman.dist %>'
                }, {
                    expand: true,
                    cwd: 'bower_components/font-awesome',
                    src: 'fonts/*',
                    dest: '<%= yeoman.dist %>'
                }, {
                    expand: true,
                    cwd: 'bower_components/simple-line-icons',
                    src: 'fonts/*',
                    dest: '<%= yeoman.dist %>'
                }, {
                    expand: true,
                    cwd: 'bower_components/datatables/media',
                    src: 'images/*',
                    dest: '<%= yeoman.dist %>'
                }, {
                    expand: true,
                    cwd: 'bower_components/select2',
                    src: '*.png',
                    dest: '<%= yeoman.dist %>/styles'
                }, {
                    expand: true,
                    cwd: 'bower_components',
                    src: 'braintree-web/{,*/}*.*',
                    dest: '<%= yeoman.dist %>/bower_components'
                }, {
                    expand: true,
                    cwd: 'bower_components',
                    src: 'filesaver/{,*/}*.*',
                    dest: '<%= yeoman.dist %>/bower_components'
                }, {
                    expand: true,
                    cwd: 'bower_components',
                    src: 'creditcard.js/{,*/}*.*',
                    dest: '<%= yeoman.dist %>/bower_components'
                }]
            },
            styles: {
                expand: true,
                cwd: '<%= yeoman.app %>/app/css',
                dest: '.tmp/styles/',
                src: '{,*/}*.css'
            },
            public: {
                    //expand: true,
                    cwd: '<%= yeoman.dist %>',
                    src: '{,*/}*.*',
                    dest: '<%= yeoman.app %>/../../api/public/'
            }
        },

        // Run some tasks in parallel to speed up the build process
        concurrent: {
            server: [
                'recess'
            ],
            test: [
                'copy:styles'
            ],
            dist: [
                'recess',
                'imagemin',
                'svgmin'
            ]
        },

        recess: {
            options: {
                compile: true
            },
            dist: {
                files: {
                    'app/styles/app.css': [
                        'app/styles/app.css'
                    ],
                    'app/styles/md.css': [
                        'app/styles/md.css'
                    ],
                    'app/styles/app.rtl.css': [
                        'app/styles/app.rtl.css'
                    ],
                    'app/styles/custom.css': [
                        'app/styles/custom.css'
                    ]
                },
                options: {
                    compile: true
                }
            }
        },

        // Test settings
        karma: {
            unit: {
                configFile: 'test/karma.conf.js',
                singleRun: true
            }
        }

    });


    grunt.registerTask('serve', 'Compile then start a connect web server', function(target) {
        if (target === 'dist') {
            return grunt.task.run(['build', 'connect:dist:keepalive']);
        }

        grunt.task.run([
            'clean:server',
            'concurrent:server',
            'postcss:server',
            'connect:livereload',
            'watch'
        ]);
    });

    grunt.registerTask('server', 'DEPRECATED TASK. Use the "serve" task instead', function(target) {
        grunt.log.warn('The `server` task has been deprecated. Use `grunt serve` to start a server.');
        grunt.task.run(['serve:' + target]);
    });

    grunt.registerTask('test', [
        'clean:server',
        'concurrent:test',
        'postcss',
        'connect:test',
        'karma'
    ]);

    grunt.registerTask('build', [
        'clean:dist',
        'useminPrepare',
        'concurrent:dist',
        'postcss',
        'ngtemplates',
        'concat',
        'ngAnnotate',
        'copy:dist',
        'cdnify',
        'cssmin',
        'uglify',
        //'filerev',
        'usemin'
        //'copy:public'

    ]);

    grunt.registerTask('default', [
        //'newer:jshint',
        //'newer:jscs',
        //'test',
        'build'
    ]);

};

**Before**:

- All the packages installed via bower were not automatically inserted into `index.html`.  The reason is `wiredep` is not properly configured with the proper path to `bower_components`. 

- In addition, the server middleware was also not configured to use `bower_components` so even if users add the script tags to packages in `bower_components` manually, the server would return `404 not found` to the browser requests.
 
- A final problem addressed in this pull request is  that the `watch` task was not monitoring `index.html` so the browser was not refreshing when that was changed.

The consequence of these problems is when running `gulp serve`, the user is met with a page that has no `css` and no `js` libraries. 


**After**: 
•	Fixed `wiredep` directory to proper location (outside of the app folder)
•	Started watching `index.html` (via paths.views.main)
•	Added bower_component as a resource for the server middleware


Hi everyone! I am new to AngularJS and I love coding with it, but I got some issue regarding on angular routes when it is being refresh, it gives me an 404 error. I am using apache! Heres my code: \

     var app = angular.module("CVSRRC", ['ngMaterial','ngRoute']);

      app.controller('CVSRRC-CTRL', function($scope, $http, ...){
        // some codes here...
    });

    app.config(function($routeProvider, $locationProvider){
    $locationProvider.html5Mode(true).hashPrefix('!');

    $routeProvider
    .when('/', {
        templateUrl: '_pages/home',
        controller: 'homeCTRL',
        resolve: {
           delay: function($q, $timeout){
                var delay = $q.defer();
                $timeout(delay.resolve, 1000);
                return delay.promise;
           }
        }  
    })
       //etc
    .otherwise({
         redirectTo: '/'
        });
    });

And my PHP FILE

       <html>
       <head>
       <base href="/cvsrrc/" />
       </head>
       <body ng-app="CVSRRC" ng-controller="CVSRRC-CTRL">

        <div class="row" id="main">
           <div ng-view ng-show="statechange"></div>
            <div ng-show="!statechange" cvsrrc-resolve>
                 <div id="_loader_"></div>
            </div>
        </div>

            <a href="about-us">About</a>
            <a href="login">login</a>
   
        </body>
    </html>
Here's my .htaccess look like:


    RewriteEngine On
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^([^\.]+)$ $1.php [NC,L]
    ErrorDocument 404 http://localhost/cvsrrc/page-not-found
Well, right out of installation, I run `yo angular` choose angular-route and angular-resource, everything installs fine. I run `grunt` and it also installs just fine. I then run `grunt serve`, the web server is started normally but the routing doesn't work. 
I click on 'about' and nothing happens, but the controller and the view are there. I get to the index.html and notice that the links are wrong. It is just `<li><a ng-href="#/about">About</a></li>`. When I click nothing happens. Adding a '!' after the '#' it works just fine.
I'm not the biggest expert in angularjs around, in fact testing this generator for study purposes, so, there is indeed this issue or am I missing something?