By filing an issue to this repo, I promise that

- [x] I have fully read the issue guide at https://yihui.name/issue/.
- [x] I have provided the necessary information about my issue.
    - If I'm asking a question, I have already asked it on Stack Overflow or RStudio Community, waited for at least 24 hours, and included a link to my question there.
    - If I'm filing a bug report, I have included a minimal, self-contained, and reproducible example, and have also included `xfun::session_info('knitr')`. I have upgraded all my packages to their latest versions (e.g., R, RStudio, and R packages), and also tried the development version: `remotes::install_github('yihui/knitr')`.
    - If I have posted the same issue elsewhere, I have also mentioned it in this issue.
- [x] I have learned the Github Markdown syntax, and formatted my issue correctly.

I understand that my issue may be closed if I don't fulfill my promises.

---

Hi,

Starting with knitr 1.27 we started to see new vignette errors in several Bioconductor packages in release (BioC 3.10, based on R 3.6) and devel (BioC 3.11, based on R 4.0).

Here is how to reproduce:
 
1. Create a minimalist Rmd vignette that uses `knitr::include_graphics`:
    ```
    jpeg(file="myplot.jpeg")
    plot(1:10)
    rect(1, 5, 3, 7, col = "white")
    dev.off()

    Test_vignette.Rmd <- c(
        "---",
        "title: \"Test vignette\"",
        "---",
        "```{r chunk1}",
        "knitr::include_graphics(\"myplot.jpeg\")",
        "```")
    cat(Test_vignette.Rmd, sep="\n", file="Test_vignette.Rmd")
    ```

2. Rendering the vignette with `rmarkdown::html_document` works fine:
    ```
    library(rmarkdown)
    rmarkdown::render("Test_vignette.Rmd", rmarkdown::html_document())
    ```

3. Rendering the vignette with `rmarkdown::pdf_document` triggers a **non-fatal** error:
    ```
    rmarkdown::render("Test_vignette.Rmd", rmarkdown::pdf_document())
    ```
    Output:
    ```
    processing file: Test_vignette.Rmd
      |...................................                                   |  50%
      ordinary text without R code

      |......................................................................| 100%
    label: chunk1
    !!! Error: Input file `Test_vignette_files/figure-latex/chunk1-1.pdf' not found!

    output file: Test_vignette.knit.md

    /usr/bin/pandoc +RTS -K512m -RTS Test_vignette.utf8.md --to latex --from markdown+autolink_bare_uris+tex_math_single_backslash --output Test_vignette.tex --self-contained --highlight-style tango --pdf-engine pdflatex --variable graphics --lua-filter /home/biocbuild/bbs-3.10-bioc/R/library/rmarkdown/rmd/lua/pagebreak.lua --lua-filter /home/biocbuild/bbs-3.10-bioc/R/library/rmarkdown/rmd/lua/latex-div.lua --variable 'geometry:margin=1in' 

    Output created: Test_vignette.pdf
    ```

4. Trying to render the vignette again with `rmarkdown::html_document` after enabling cropping now produces a **fatal** error:
    ```
    html_document_crop <- rmarkdown::html_document()
    html_document_crop$knitr$knit_hooks <- list(crop=knitr::hook_pdfcrop)
    html_document_crop$knitr$opts_chunk$crop <- TRUE
    rmarkdown::render("Test_vignette.Rmd", html_document_crop)
    ```
    Output:
    ```
    processing file: Test_vignette.Rmd
      |...................................                                   |  50%
      ordinary text without R code
    
      |......................................................................| 100%
    label: chunk1
    Quitting from lines 5-6 (Test_vignette.Rmd) 
    Error in magick_image_readpath(enc2native(path), density, depth, strip) : 
      Magick: unable to open image `Test_vignette_files/figure-html/chunk1-1.png': No such file or directory @ error/blob.c/OpenBlob/2701
    ```
**magick** is installed (see `sessionInfo()` below) so this is not the same as issue #1796

Note that the issue was originally [reported](https://github.com/Bioconductor/BiocStyle/issues/71) as a **BiocStyle** issue but the self-contained example above seems to exonerate BiocStyle.

Thanks,
H.

**sessionInfo:**
```
R version 3.6.2 (2019-12-12)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:   /home/biocbuild/bbs-3.10-bioc/R/lib/libRblas.so
LAPACK: /home/biocbuild/bbs-3.10-bioc/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] rmarkdown_2.0

loaded via a namespace (and not attached):
 [1] compiler_3.6.2  magrittr_1.5    magick_2.2      tools_3.6.2    
 [5] htmltools_0.4.0 yaml_2.2.0      Rcpp_1.0.3      stringi_1.4.5  
 [9] jpeg_0.1-8.1    knitr_1.27      stringr_1.4.0   xfun_0.12      
[13] digest_0.6.23   rlang_0.4.2     evaluate_0.14  
```
`kable` fails to align right if `format = "pandoc"` and wide characters exist.

````
---
output: html_document
---

```{r}
minerals <- tibble::tribble(
  ~ 酸化物,    ~ 石英,
  "SiO2",        100,
  "Al2O3",         0,
)

# Automatically becomes `format = "pandoc"`
knitr::kable(minerals, align = "r")
```
````

Please refer https://github.com/jgm/pandoc/issues/6021 for the cause.
This issue will be fixed Pandoc's issue is solved.
Meanwhile, I think we have two choices: 

- wait for RStudio to bundle the future Pandoc
- use pipe tables rather than simple tables

## xfun::session_info('knitr')

```
R version 3.6.1 (2019-07-05)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17763), RStudio 1.2.1335

Locale:
  LC_COLLATE=Japanese_Japan.932 
  LC_CTYPE=Japanese_Japan.932   
  LC_MONETARY=Japanese_Japan.932
  LC_NUMERIC=C                  
  LC_TIME=Japanese_Japan.932    

Package version:
  evaluate_0.14   glue_1.3.1     
  graphics_3.6.1  grDevices_3.6.1
  highr_0.8       knitr_1.26.1   
  magrittr_1.5    markdown_1.1   
  methods_3.6.1   mime_0.8       
  stats_3.6.1     stringi_1.4.3  
  stringr_1.4.0   tools_3.6.1    
  utils_3.6.1     xfun_0.11      
  yaml_2.2.0 
```
<!--
Please keep the below portion in your issue. Your issue will be closed if any of the boxes is not checked (i.e., replace `[ ]` by `[x]`). In certain (rare) cases, you may be exempted if you give a brief explanation (e.g., you are only making a suggestion for improvement). Thanks!
-->

---

By filing an issue to this repo, I promise that

- [x] I have fully read the issue guide at https://yihui.name/issue/.
- [x] I have provided the necessary information about my issue.
    - If I'm asking a question, I have already asked it on Stack Overflow or RStudio Community, waited for at least 24 hours, and included a link to my question there.
    - If I'm filing a bug report, I have included a minimal, self-contained, and reproducible example, and have also included `xfun::session_info('knitr')`. I have upgraded all my packages to their latest versions (e.g., R, RStudio, and R packages), and also tried the development version: `remotes::install_github('yihui/knitr')`.
    - If I have posted the same issue elsewhere, I have also mentioned it in this issue.
- [x] I have learned the Github Markdown syntax, and formatted my issue correctly.

I understand that my issue may be closed if I don't fulfill my promises.

A proposed solution to #1773:

A test with Python is:

(spinpythontest.py)
```

# Using python directly
python <- "C:/ProgramData/Anaconda3/python.exe"

#+ engine = "python", engine.path = python
import os
os.getenv("RSTUDIO_PANDOC")

```

I recognize that this is not a valid python script, but it serves to test spin().  On your computer, the Python path may/will need to be adjusted!
@yihui I have a use case for the `sql` engine where I want to assign the output of the sql query to a variable, but do it __lazily__ without collecting it. This will enable me to use dplyr SQL later down the line to combine these lazy queries.

I am able to get this working with a custom engine (it does NOT handle all the cases handled by `eng_sql` and is a barebones implementation) that uses dplyr to return an object of class `tbl_lazy`.

```r
eng_sql_lazy <- function(options){
  print(options)
  code <- paste(options$code, collapse = "\n")
  conn <- get(options$connection)
  varname <- options$output.lazy
  print(varname)
  data <- tbl(conn, dplyr::sql(code))
  if (!is.null(varname)){
    assign(varname, data, envir = knitr::knit_global())
  }
  out <- capture.output(data)
  knitr::engine_output(options, code, out)
}
knitr::knit_engines$set(sql_lazy = eng_sql_lazy)
```

However, I want to get this working with the `sql` engine so I can get syntax highlighting as well as the full set of uses cases handled by the engine. Accordingly, I tried to mess with this line of code https://github.com/yihui/knitr/blob/master/R/engine.R#L610, and added a case where it is possible to specify a custom chunk option `output.fun`.

```r
if (!is.null(varname) && is.null(options$output.fun)) {
  assign(varname, data, envir = knit_global()) 
} else {
  data_out <- options$output.fun(conn, query)
  assign(varname, data_out, envir = knit_global()) 
}
```

This does NOT seem to work. In fact, anything I try to do within `eng_sql` does NOT seem to be working.

I would appreciate any pointers on how I could get this feature working. I would be happy to contribute a PR, since I believe this feature would be beneficial to the broader community looking to wrangle SQL in Rmd.

<!--
Please keep the below portion in your issue. Your issue will be closed if any of the boxes is not checked (i.e., replace `[ ]` by `[x]`). In certain (rare) cases, you may be exempted if you give a brief explanation (e.g., you are only making a suggestion for improvement). Thanks!
-->

---

By filing an issue to this repo, I promise that

- [x] I have fully read the issue guide at https://yihui.name/issue/.
- [x] I have provided the necessary information about my issue.
    - If I'm asking a question, I have already asked it on Stack Overflow or RStudio Community, waited for at least 24 hours, and included a link to my question there.
    - If I'm filing a bug report, I have included a minimal, self-contained, and reproducible example, and have also included `xfun::session_info('knitr')`. I have upgraded all my packages to their latest versions (e.g., R, RStudio, and R packages), and also tried the development version: `remotes::install_github('yihui/knitr')`.
    - If I have posted the same issue elsewhere, I have also mentioned it in this issue.
- [x] I have learned the Github Markdown syntax, and formatted my issue correctly.

I understand that my issue may be closed if I don't fulfill my promises.

I know about and regularly use `knit_exit()`. And I often find myself wanting a feature like `knit_pause()` to pause knitting between given spots in the document (especially when running `xaringan::inf_mr()` on a long presentation with lots of R code.

One option is to use HTML comment fences around such text, but I'd love a knitr R based solution that would work regardless of the output format.

---

By filing an issue to this repo, I promise that

- [x] I have fully read the issue guide at https://yihui.name/issue/.
- [x] I have provided the necessary information about my issue.
    - If I'm asking a question, I have already asked it on Stack Overflow or RStudio Community, waited for at least 24 hours, and included a link to my question there.
    - If I'm filing a bug report, I have included a minimal, self-contained, and reproducible example, and have also included `xfun::session_info('knitr')`. I have upgraded all my packages to their latest versions (e.g., R, RStudio, and R packages), and also tried the development version: `remotes::install_github('yihui/knitr')`.
    - If I have posted the same issue elsewhere, I have also mentioned it in this issue.
- [x] I have learned the Github Markdown syntax, and formatted my issue correctly.

I understand that my issue may be closed if I don't fulfill my promises.

Question directly copied from [StackOverflow](https://stackoverflow.com/questions/58839450/r-knitr-use-spin-with-r-and-python-code/58880761#58880761):

With the advent of **reticulate**, combining R and Python in a single .Rmd document has become increasingly popular among the R community (myself included). Now, my personal workflow usually starts with an R script and, at some point, I create a shareable report using `knitr::spin()` with the plain .R document as input in order to avoid code duplication (see also [Knitr's best hidden gem: spin](https://deanattali.com/2015/03/24/knitrs-best-hidden-gem-spin/) for more on the topic). 

However, as soon as Python code is involved in my analysis, I am currently forced to break this workflow and manually convert (ie. copy and paste) my initial .R script into .Rmd before compiling the report. I wonder, does anybody know whether it is &ndash; or for that matter, will ever be &ndash; possible to make `knitr::spin()` work with both R and Python code chunks in a single .R file without taking this detour? I mean, just like it works when mixing the two languages, and exchanging objects between them, in a .Rmd file. There is, at least to the best of my knowledge,  no possibility to add something like `engine = 'python'` to spin documents at the moment.

---

By filing an issue to this repo, I promise that

- [x] I have fully read the issue guide at https://yihui.name/issue/.
- [x] I have provided the necessary information about my issue.
    - If I'm asking a question, I have already asked it on Stack Overflow or RStudio Community, waited for at least 24 hours, and included a link to my question there.
    - If I'm filing a bug report, I have included a minimal, self-contained, and reproducible example, and have also included `xfun::session_info('knitr')`. I have upgraded all my packages to their latest versions (e.g., R, RStudio, and R packages), and also tried the development version: `remotes::install_github('yihui/knitr')`.
    - If I have posted the same issue elsewhere, I have also mentioned it in this issue.
- [x] I have learned the Github Markdown syntax, and formatted my issue correctly.

I understand that my issue may be closed if I don't fulfill my promises.

When calling cable with `format = latex` the actual latex output is preceded by a newline. I can write a wrapper that strips it but was curious: Is this intentional?

```
library(knitr)
a <- c(1, 2, 3) 
b <- kable(a, format = "latex")

b[1]
#> [1] "\n\\begin{tabular}{r}\n\\hline\nx\\\\\n\\hline\n1\\\\\n\\hline\n2\\\\\n\\hline\n3\\\\\n\\hline\n\\end{tabular}"
```
---

By filing an issue to this repo, I promise that

- [x] I have fully read the issue guide at https://yihui.name/issue/.
- [x] I have provided the necessary information about my issue.
    - If I'm asking a question, I have already asked it on Stack Overflow or RStudio Community, waited for at least 24 hours, and included a link to my question there.
    - If I'm filing a bug report, I have included a minimal, self-contained, and reproducible example, and have also included `xfun::session_info('knitr')`. I have upgraded all my packages to their latest versions (e.g., R, RStudio, and R packages), and also tried the development version: `remotes::install_github('yihui/knitr')`.
    - If I have posted the same issue elsewhere, I have also mentioned it in this issue.
- [x] I have learned the Github Markdown syntax, and formatted my issue correctly.

I understand that my issue may be closed if I don't fulfill my promises.

If I make a tex file of a table with the `kable` function, it adds a prefix `tab:` to the label by default.

I find this a bit awkward, because I have accustomed to use a different label myself: `TAB:`. It is confusing to have tables from two different sources with the labeling either being upper or lower case depending on its source. Easiest would be if the `kable` argument `label` would include the whole user defined label, including the prefix that suits the user best.

This is just a small suggestion for improvement, and I would be surprised if noone had thought about it before.

<!--
Please keep the below portion in your issue. Your issue will be closed if any of the boxes is not checked (i.e., replace `[ ]` by `[x]`). In certain (rare) cases, you may be exempted if you give a brief explanation (e.g., you are only making a suggestion for improvement). Thanks!
-->

---

By filing an issue to this repo, I promise that

- [x] I have fully read the issue guide at https://yihui.name/issue/.
- [x] I have provided the necessary information about my issue.
    - If I'm asking a question, I have already asked it on Stack Overflow or RStudio Community, waited for at least 24 hours, and included a link to my question there.
    - If I'm filing a bug report, I have included a minimal, self-contained, and reproducible example, and have also included `xfun::session_info('knitr')`. I have upgraded all my packages to their latest versions (e.g., R, RStudio, and R packages), and also tried the development version: `remotes::install_github('yihui/knitr')`.
    - If I have posted the same issue elsewhere, I have also mentioned it in this issue.
- [x] I have learned the Github Markdown syntax, and formatted my issue correctly.

I understand that my issue may be closed if I don't fulfill my promises.

Hi,

1. For cached chunks with intricate dependencies, it is sometimes unclear why a chunk gets re-evaluated.
2. For chunks that run fast, it is also hard to discern whether the cache was hit or a re-evaluation is taking place.

I thought it would be nice to introduce something akin to the `make --debug` option, which would enable displaying the relevant information. `knit(..., debug_cache = TRUE)`, for instance.

---

By filing an issue to this repo, I promise that

- [x] I have fully read the issue guide at https://yihui.name/issue/.
- [x] I have provided the necessary information about my issue.
    - If I'm asking a question, I have already asked it on Stack Overflow or RStudio Community, waited for at least 24 hours, and included a link to my question there.
    - If I'm filing a bug report, I have included a minimal, self-contained, and reproducible example, and have also included `xfun::session_info('knitr')`. I have upgraded all my packages to their latest versions (e.g., R, RStudio, and R packages), and also tried the development version: `remotes::install_github('yihui/knitr')`.
    - If I have posted the same issue elsewhere, I have also mentioned it in this issue.
- [x] I have learned the Github Markdown syntax, and formatted my issue correctly.

I understand that my issue may be closed if I don't fulfill my promises.

I am trying to use some aliases within a bash chunk in my R notebook. These aliases are defined in my ~/.bashrc or ~/.bash_profile file. Using the standard {bash} engine it throws an error. It means that ~/.bashrc or ~/.bash_profile is not sourced at bash startup. I have then written an hook to force the sourcing in my setup chunk as follow:

```
knitr::knit_hooks$set(engine.opts = function (options) {
  options$engine.opts <- list(bash="--init-file ~/.bash_profile -i")
  return(options)
})
```
I tested the resulting bash invocation in bash terminal: `bash --init-file ~/.bash_profile -i -c "alias ll"` and generates the expected output. I have then inspected the source code for the engine function and I suspect there is a [typo](https://github.com/yihui/knitr/blob/c25df11230b880a7cf1c6584500e7a961b7040bd/R/engine.R#L173) messing with engine.opts setting.

In my opinion the hook is not necessary, because the bash invocation sources the ~/.bashrc or ~/.bash_profile automatically. Is it that rstudio/knitr runs the bash chunk as different user? I tried to run `whoami` inside a chunk and my username is returned. So, why the ~/.bashrc or ~/.bash_profile file is not sourced? 

EDIT: setting `knitr::opts_chunk$set(engine.opts = list(bash="--init-file ~/.bash_profile -i"))` in setup chunks does not work either.