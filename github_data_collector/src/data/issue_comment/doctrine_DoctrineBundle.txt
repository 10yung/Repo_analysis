Hello,

When migrating from `1.12.2` to `1.12.6`, my PHPUnit fails when I have a `$em->refresh($entity)` inside a test.

I have a skeleton app to reproduce the issue : https://github.com/adrienfr/sf-skeleton

Here is the error :

> There was 1 error:
> 
> 1) App\Tests\Controller\AdminFlatControllerTest::testEditFlat
> Doctrine\ORM\ORMInvalidArgumentException: Entity App\Entity\Flat@00000000017029ce00000000242b0986 is not managed. An entity is managed if its fetched from the database or registered as new through EntityManager#persist
> 
> /Users/adrienwilmet/Sites/sf-skeleton/vendor/doctrine/orm/lib/Doctrine/ORM/ORMInvalidArgumentException.php:143
> /Users/adrienwilmet/Sites/sf-skeleton/vendor/doctrine/orm/lib/Doctrine/ORM/UnitOfWork.php:2165
> /Users/adrienwilmet/Sites/sf-skeleton/vendor/doctrine/orm/lib/Doctrine/ORM/UnitOfWork.php:2139
> /Users/adrienwilmet/Sites/sf-skeleton/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php:653
> /Users/adrienwilmet/Sites/sf-skeleton/tests/Controller/AdminFlatControllerTest.php:23

Here is my test :

```
/**
 * @internal
 */
class AdminFlatControllerTest extends CreateEntityWebTestCase
{
    public function testEditFlat()
    {
        $flat = $this->em->getRepository(Flat::class)->findOneByNote('test');
        $crawler = $this->client->request('GET', sprintf('/admin/flat/%d/edit', $flat->getId()));
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode());
        $buttonNode = $crawler->selectButton('admin_edit_flat_submit');
        $form = $buttonNode->form();
        $form['admin_edit_flat[guests]'] = 2;
        $crawler = $this->client->submit($form);    
        $this->assertEquals(302, $this->client->getResponse()->getStatusCode());
        $this->em->refresh($flat);
        $this->assertEquals(2, $flat->getGuests());
    }
}
```

And CreateEntityWebTestCase :

```
<?php

namespace App\Tests;

use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Client;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\PropertyAccess\PropertyAccess;
use Symfony\Component\PropertyAccess\PropertyAccessor;

/**
 * @internal
 */
class CreateEntityWebTestCase extends WebTestCase
{
    /** @var Client */
    protected $client;

    /** @var EntityManagerInterface */
    protected $em;

    /** @var PropertyAccessor */
    protected $propertyAccessor;

    protected function setUp(): void
    {
        parent::setUp();

        if (null !== static::$kernel) {
            static::$kernel->shutdown();
        }

        $this->client = self::createClient();
        $this->client->disableReboot();
        $this->em = self::$container->get('doctrine.orm.entity_manager');
        $this->em->beginTransaction();
        $this->em->getConnection()->setAutoCommit(false);
    }

    protected function tearDown(): void
    {
        $this->em->rollback();
        $this->em->close();
        $this->em = null;
        $this->client = null;

        parent::tearDown();
    }
}

```

Am I missing a configuration change somewhere ?
Fixes https://github.com/doctrine/DoctrineBundle/issues/949.

Btw I was trying to find how other people deprecated this and found that nobody actually did, not even Symfony. Not even with readme entry, like we are doing here.
Hi everyone ðŸ‘‹ 

Small question about `DropDatabaseDoctrineCommand`, is there any historical reasons to not define a shortcut when it comes to `force`, `shard`, `connection` and `if-exists` ? ðŸ¤” 

Thanks a lot for the answer and have a great day ðŸ™‚ 
This PR adds a "copy" button on runnable queries.

I also took the opportunity to copy paste all the specific CSS for the Doctrine panel from Symfony core inside this bundle so we can remove it from Symfony core (in 5.0). Let me know if you prefer to have the two things splitted for clarity.

Screenshot:
<img width="825" alt="Screenshot 2019-11-18 at 18 11 31" src="https://user-images.githubusercontent.com/3658119/69074578-f0540400-0a2f-11ea-8d9b-556b3607bd7e.png">

This just reflects the command from upstream in the same way the other commands are.

See doctrine/dbal#3697
This feature will allow you to register `EntityMessageCollector` as an event listener. This class will be merged into Symfony 4.4.

https://github.com/symfony/symfony/pull/28850

When injecting an entity manager into a service, auto wiring the service by using the `EntityManagerInterface` type will always wire the default entity manager. This makes it complicated to inject a custom entity manager for users that have more than one manager configured.

To select a correct entity manager, users would have to create a specific entity manager for each entity that decorates the entity manager service created. This could be done automatically in a compiler pass by using a service tag which specifies which entity manager to use.

The syntax would be simple:
```xml
<tag name="doctrine.entity_manager" entity="App\Entity\MyEntity" />
```

Same goes for repositories. Currently, users have to create an empty repository class if they want to use service repositories that they can inject into other services. To avoid this boilerplate code, we can leverage the same technique:

```xml
<tag name="doctrine.repository" entity="App\Entity\MyEntity" />
```

This is similar to what the MonologBundle does when configuring a channel using the `monolog.logger` tag.
**Description**  
I would like to create an alternative to fallback of this command if the database is not created. For example by putting the command to create it or directly ask if you want to create it. This avoids wasting time. 

What do you think of that? 

**Example**  
![image](https://user-images.githubusercontent.com/10236869/63837396-b36df900-c97b-11e9-97c0-f6db46a9c265.png)
Replace By 
Unknown database `symfony`
Do you want to run "doctrine:database:create" instead?  (yes/no) [no]:
OR 
You need use this command `php bin/console doctrine:database:create` or create your database in a different way.

i have a case where i don't execute commands in production environment, so i don't need 'symfony/console' and registration of the commands in the production code.
I was wondering if priority support could be added to entity listeners tags in the compiler pass as it's supported for doctrine `event_subscriber` and `event_listener` tags in doctrine symfony bridge.

https://github.com/doctrine/DoctrineBundle/blob/ead3f067e82b4f5ff91642cd86112401c6e5c6a8/DependencyInjection/Compiler/EntityListenerPass.php#L24