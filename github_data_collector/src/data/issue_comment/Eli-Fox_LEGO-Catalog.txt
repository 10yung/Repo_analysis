Hi! 

Is it possible to substitute livedata on room Dao to use flow and suspend fun? 
If yes, can you do it in a separate branch or update this example? 
Thanks a lot and nice job
with this pattern, it is really easy to use, but i have a problem to retry call API when got error, because we already have livedata in repository and calling api in datasource, how we can get retry request with this pattern?
Reproduce steps:

1. Open app and browse themes are loaded
2. Data is loaded from network
3. Press back button
4. Open app again

Actual:
Data is presented without loading it from network

Expected:
Data should be loaded from network
Please can you more sample 
Great project, thanks for sharing! 

I have some minor improve suggestion - Result class is currently implemented in Java style and not getting benefits of the Kotlin compiler.

Having Result class implemented as 
```
sealed class Result<out T> {
    class loading<T> : Result<T>()
    data class error<T>(val message: String) : Result<T>()
    data class success<T>(val data: T) : Result<T>()
}
```
you can avoid excess nullability checks(!!) and possible exceptions in places like 
```

            if (responseStatus.status == SUCCESS) {
                saveCallResult(responseStatus.data!!)
            } else if (responseStatus.status == ERROR) {
                emit(Result.error<T>(responseStatus.message!!))
                emitSource(source)
            }
```
and have it in more Kotlin way 
```
            if (responseStatus is Result.success) {
                saveCallResult(responseStatus.data)
            } else if (responseStatus is Result.error) {
                emit(Result.error<T>(responseStatus.message))
                emitSource(source)
            }
```
Hope you find it useful :)
