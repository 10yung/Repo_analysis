Google Chrome when I use localforage.setItem("text","aa") error DOMException 
It looks like this occurs when a key is already set, and is then set again. A similar error message is described [in this StackOverflow answer](https://stackoverflow.com/a/33114646).

I believe in my instance localForage is using IndexedDB. I've simplified my actual code down to this example, but if you're not able to reproduce, then let me know and I'll come up with a full reproducible example. As I'm not familiar with the localForage codebase, I'm not sure where inside the `setItem()` call the problem occurs, but I'm willing to look into it if nobody knows.

```js
const storage = localForage.createInstance({
  name: 'my_database'
});
await storage.setItem('k', 'v');
await storage.setItem('k', 'v');
```
Localforage returns no available storage method found on safari 12 and localforage@1.7.3 .
Actually, Indexeddb driver is must for me, so localStorage its not my option

```
   this.filesQueueStore = localforage.createInstance({
            name: "Uploads",
            storeName: "filesQueue",
            driver: [localforage.INDEXEDDB],
        });
```
Since, PhantomJS is an outdated project and no longer maintained. This patch replace PhantomJS with puppeteer.

I am using IDB Driver in LocalForage and IndexedDb gets blocked when I try to perform operations in my application when it is opened in multiple tabs.
This issue gets resolved once I refresh the tab and try to perform the same operation. I am also unable to see the issue if I use WebSQL driver.
![capture](https://user-images.githubusercontent.com/10134824/66741959-41526480-ee94-11e9-9630-fd80f81d1687.JPG)


I am unable to find any of the pending operations. Is there a way to kill pending operations or view them?
Could someone please help me understand the root cause?

Hi guys, thanks for the great library. 

Currently, we're storing our data with event_id as the key and the event object as the value. However, as our data is growing, we want to start pulling data between two dates. I think in IndexDB you could create indexes on entry and then pull data based on that index. Essentially creating another key to pull events from. The new table would look something like key: event_id, index: date, value: event_details and we would be able to pull data through indexKeyRange. Is there a way to do that through LocalForage? Both to store the data with an index as well as being able to pull it through the index. Thanks in advance for the help.
Hello,

How to properly control the size of the storage?

I have few instances of localforage,
when ~ 3mb of data (166 keys) stored I try call `setItem` for new key I have in developer console error.

`InvalidStateError: Failed to read the 'error' property from 'IDBRequest': The request has not finished.`

after this error other instance is available (exactly for reading, not sure for saving), but this instance (with error) not answer more (incl getItem), but before setItem I can request any data (getItem, keys, etc).

if I call like
`localforage.setItem(..).then(console.log).catch(console.error) `
catch -- never called

How do I write it right?
```
localforage.setItem(..).catch(
    function () {
        localforage.clean().then(function () {
            localforage.setItem(..)
        })
    }
)
```


* Safari 13.0.1
It would be great if this package will support react native asyncstorage. Thank you
- Chrome: 77.0.3865.90 (64-bit)
- macOS: 10.14.6
- localforage: ^1.7.3

when i cache a object like this: 
```ts
interface EcgDao {
  id: number;
  ecg: ArrayBuffer;
  ht: ArrayBuffer;
  af: [number, number][];
  sampling: number;
  voltage: number;
  time: number;
}
```
and the data size exceeds 133169152 bytes, I got an error message.
> "The serialized keys and/or value are too large (size=171908106 bytes, max=133169152 bytes)."

But it works fine on `Firefox` and `Safari`
Whoops, this was meant to be a WIP/draft PR, but I forgot VSCode won't let me make those easily.

At any rate, this removes callbacks and ES6-i-fies test and src code.