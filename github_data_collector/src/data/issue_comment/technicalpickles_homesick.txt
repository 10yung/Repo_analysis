I ran `homesick destroy dotfiles -p` and it unlinked all directories. 

Funny enough, that's what I wanted.   maybe this is a positional parameter thing where I should have done 
`homesick destroy -p dotfiles` 

Anyways,  best of luck with homesick ! 
I've been using homesick for a few years.   I don't commit to my castle often which is probably my problem.  I am very proficient with git, and think homesick works the same way but I find it gets in my way more than helps because of some unique things about it. 

As I'm pretty comfortable with git I'll probably ditch homesick for just a bare git repo and a global alias.   I don't use many of the other features of homesick like multiple castles etc. 

Thought I'd share some feedback - as I did enjoy homesick for a while. 

(some omitted)
```

 9971  homesick status
 9972  homesick add -u
 9973  homesick diff --staged -- home/.aws/config
 9974  homesick diff dotfiles  --staged -- home/.aws/config
 9975  homesick diff dotfiles
 9979  ./.config
 9980  ./nvim
 9982  homesick add *
 9983  homesick track *
 9986  homesick track .
 9987  homesick status
```
That is what my brain did on a Monday morning.  It tripped me up though.   I wanted to add the entire `~/.config/nvim` directory but just running `homesick add` . or track rather, the pathing was weird. (`/home/.config` I think?) 

Anyways, the end result was that `homesick track *` added the nvim directory at the root of my castle.    For a while I thought it deleted all my files until I did a `homesick cd ` and went looking for them. 
I was able to recover them, but in my opinion any add should work whether I'm relative or not, as git does. 

It's also confusing to have the `track` command ..  and all the `--staged` commands I couldn't send to git.   I think the way to do it would be to go into the castle directory and run those commands with git natively.   

Maybe I'm doing it wrong..    or not using homesick correctly.   But if it helps to hear one guys experience then great!  Thanks for all the fish! 
I keep my castle repos on a private server, so every time I use `homesick generate` I have to go in and use `git remote set-url origin` to point the checkout to the correct URI.

This should be overridable by envariable, or, better yet, a config file -- such as `~/.homesick/config` or `$XDG_CONFIG_HOME/homesick/config`.  The latter approach would allow setting defaults for other commands, similar to `.gitconfig`.
Hi,

I think it would be quite  convenient to have a feature which automatically commits and/or also pushes new changes after you e.g. tracked a new file. I know this feature from the password manager "pass" which automatically generates a new commit with the message "Add generated password for $foo".

When making changes to a file, having is expressive commit message is very helpful I guess. But when starting to use homesick most of the times you just track new files which could be auto-commited with a fairly generic commit message.

Best,
Felix
Autotests in spec do some tests and analyze result (output) of git command.
But on some locales there are localized messages from git and those tests fail.

One example (looks like this is French locale):
https://reproducible.debian.net/logs/unstable/amd64/homesick_1.1.3-1.build2.log.gz

As workaround you could set locale to C during the test or use machine-parsable git commands like "git status --porcelain".

Sample patch is attached.
[03-fix-locale-spec-tests.patch.txt](https://github.com/technicalpickles/homesick/files/79232/03-fix-locale-spec-tests.patch.txt)

See https://coveralls.io/r/technicalpickles/homesick

Libraries like Rugged open the possibility of using git features implemented in Ruby instead of shelling out to git. But should homesick still depend on having git installed at runtime? The alternative would be to keep depending on git and to show warning/error messages when a command fails because git could not be found.
## Related issues
- #25
- #61
- #74 (especially related)
- #85
- #91
- #97 (with the new exec command, users could use commands like `homesick exec git push` instead of `homesick push`)

CC @technicalpickles @christianbundy @JCook21 

I have started work on some of this on ~~[my refactor branch](https://github.com/thenickperson/homesick/tree/refactor)~~ several of my branches. If you would like to work on the branch with me, let me know and I can accept PRs / add you as a collaborator.
## Ideas
- Make rubocop happy with our source code.
- Separate implementation and specs into more files.
- Reduce duplication.
- Make things more modular
- Use more libraries to avoid "reinventing the wheel".
- Move each group of commands into their own/class file. For example, symlink/unsymlink could be together. We could also have spec files separated into these command groups.

Thanks to @trobrock for some of these refactoring ideas.
## Related issues
- #62
- #74
- #75

Here's an example of running `grep say_status lib/homesick/actions.rb` on homesick's source.

``` ruby
say_status 'git clone', "#{repo} to #{destination.expand_path}", :green unless options[:quiet]
say_status :exist, destination.expand_path, :blue unless options[:quiet]
say_status 'git init', '' unless options[:quiet]
say_status 'git init', 'already initialized', :blue unless options[:quiet]
say_status 'git remote', "add #{name} #{url}" unless options[:quiet]
# about 20 lines removed for brevity
```

The `quiet` and `pretend` options are often checked manually, which leads to fairly complex looking code.

Instead, I think it would be cleaner to use methods that handle quiet/pretend invocation for us. I vaguely remember seeing something in Thor's source code about a `quiet?` getter method that is used in `say_status`, but I couldn't figure out how to set this yet. It would be nice to use features built into Thor if there are any for this, but worst case we can add our own wrapper methods.

## Advantages
- Shelling out takes a while, and you can get major performance and stability boosts with the right libraries.
- We could save time writing ruby wrappers around command line functionality by using an existing library.
- The code would be a bit less bloated with generalized file/git/etc. code placed somewhere else.
- Many Ruby libraries give comfortable object-oriented interfaces to existing command line functionality.
## File stuff

Ruby has a lot of awesome command-line-inspired libraries built in, including [FileUtils](http://ruby-doc.org/stdlib-2.1.0/libdoc/fileutils/rdoc/FileUtils.html), which could easily replace many calls to commands like `mv`, `cp`, `rm`, and `ln`.
## Git stuff

~~[Grit](https://github.com/mojombo/grit) looks pretty awesome, as it's what GitHub uses internally. See [Supercharged Ruby-Git](https://github.com/blog/107-supercharged-ruby-git).~~
Grit is deprecated, and its readme recommends switching to [Rugged](https://github.com/libgit2/rugged).
