The issue is described in detail on this SO question - https://stackoverflow.com/questions/59807108/azure-devops-server-is-unable-to-create-an-azure-resource-using-a-service-princi

Basically, I have a situation where the release pipeline cannot create some resources, but the Service Principal is good and the terraform configuration is good as well - tested in the Azure Cloud Shell using the same principal and the same terraform files.
Setting AWS service connection as optional allows the use of environment variables to authenticate AWS CLI commands against. Reference https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html for further details.
Currently TerraformTaskV1 requires a mandatory AWS Service Connection parameter.

![image](https://user-images.githubusercontent.com/40874726/72546141-dbd59180-384f-11ea-9535-dcd232bca4a1.png)

Making the service connection mandatory is a major roadblock for using AWS credentials set as environment variables. AWS CLI tasks support this as a [native authentication option](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html), and Amazon-managed Azure DevOps tasks leave the AWS Service Connection parameter as optional.

I need to be able to set parameters such as AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY,  AWS_SESSION_TOKEN in the environment and run scripts using these for temporary authentication instead of creating a service connection. Please set the AWS Service Connection as optional for TerraformTaskV1 to allow this.
Is hard to review the generated plan 
Example:

![image](https://user-images.githubusercontent.com/28111142/72396786-72e10300-3703-11ea-9dc3-e56f4d883144.png)

Here is an output plan from another Terraform extension:

![image](https://user-images.githubusercontent.com/28111142/72396989-0e727380-3704-11ea-8633-35dddf0211b2.png)

Please clean up the output


When you configur plan or validte task to one provider (for instance AWS) and then change to other (Azure) the reference for service connection is not removed and if you try to import and export the pipeline you get errors.

![image](https://user-images.githubusercontent.com/415105/72386774-4d172680-3722-11ea-8da0-ba3c205b7c07.png)

I have a self-hosted DevOps agent running on a server with an installation of Visual Studio Build Tools 2019 that includes the "Microsoft.VisualStudio.Component.SQL.SSDTBuildSku" component. Despite the fact that SqlPackage is listed as a capability on the agent, whenever a job with the SqlDacpacDeploymentOnMachineGroupV0 task (link to task repo: https://github.com/microsoft/azure-pipelines-tasks/tree/master/Tasks/SqlDacpacDeploymentOnMachineGroupV0) is run on this agent, the task fails with the error "Unable to find the location of Dac Framework (SqlPackage.exe) from registry on machine <Machine Name>".

I traced this issue to the vswhere command changed in this PR. Since VS Build Tools doesn't show up in the list of VS Installations by default when using vswhere, the SqlPacakge.exe included in the "Microsoft.VisualStudio.Component.SQL.SSDTBuildSku" component installed on Visual Studio Build Tools 2019 is never found. The addition of the "-products *" argument will list all installed Visual Studio products including installations of VS Build Tools.

This issue appears to be related, they're using SSDT as well although it's not clear if it's through a VS Build Tools installation: https://github.com/microsoft/azure-pipelines-extensions/issues/534
Hi all,

I tried to install IIS Web App Deployment Using WinRM but I kept getting the error "task.json file was not found in contribution". I found out that the version of TFS (TFS 2017 RTM / TFS Version 15.105.25910.0) that I am isn't compatible with the marketplace version. I also tried manually downloading the latest version here and it is different (looks buggy) from the version that I have on my preproduction environment. 

Aside from upgrading my environment, does anyone know of any alternatives or a lower version of this vNext custom task that I can install?

Thanks,
Randy
In a fresh environment, running this script:

https://github.com/microsoft/azure-pipelines-extensions/blob/master/TaskModules/powershell/Azure/SPNCreation.ps1

Does not work with [Az PowerShell Module v3.2.0](https://github.com/Azure/azure-powershell/releases/tag/v3.2.0-December2019) installed.

The following error occurs:

> Script requires AzureRM modules to be present. Obtain AzureRM from https://github.com/Azure/azure-powershell/releases. Please refer https://github.com/Microsoft/azure-pipelines-tasks/blob/mas
ter/Tasks/AzureResourceGroupDeploymentV2/README.md for recommended AzureRM versions.

**This is an enhancement request to support the latest version (3.2.0) of the Az PowerShell module.** Users should not have to install an older Azure PowerShell module to run this script.

## Reproduce

1. Clean environment (i.e. Windows Sandbox)
2. Install Az module: `Install-Module -Name Az -Repository PSGallery -Force`
3. Answer "Yes" to NuGet prompt
4. Restart PS environment / ISE
5. Open (or copy and paste) SPNCreation.ps1 and execute

## Environment

Windows 10 v1909 (18363.535)
PowerShell v5.1.18362.145 (Edition: Desktop, Build: 10.0.18362.145)
Azure Retail (PAYG) Subscription
In Azure DevOps for the Terraform extension for the azurerm provider, it seems that the `validate` and `validate & apply` stages throw an error as per below if using an Azure Subscription service connector that is created by a Service Principle.

Error: `Error building ARM Config: Azure CLI Authorization Profile was not found. Please ensure the Azure CLI is installed and then log-in with `az login`.`

it seems it doesn't pass extra vars / or pass through the Service connection ID's for the Azure subscription.

As a result, the extension should be able to extract this info from the Azure DevOps service connection and build the Environment Variables. This works for Terraform `Plan` so looks like a bug in the validate / validate & apply which is now a blocker for our deployments.

Full error below.

```
2019-12-19T14:29:58.4107445Z ##[section]Starting: Terraform : azurerm
2019-12-19T14:29:58.4212579Z ==============================================================================
2019-12-19T14:29:58.4212709Z Task         : Terraform
2019-12-19T14:29:58.4212841Z Description  : Execute terraform commands to manage resources on AzureRM, Amazon Web Services(AWS) and Google Cloud Platform(GCP)
2019-12-19T14:29:58.4212966Z Version      : 0.0.142
2019-12-19T14:29:58.4213063Z Author       : Microsoft Corporation
2019-12-19T14:29:58.4213180Z Help         : [Learn more about this task](https://aka.ms/AA5j5pf)
2019-12-19T14:29:58.4213306Z ==============================================================================
2019-12-19T14:29:58.6578954Z [command]C:\hostedtoolcache\windows\terraform\0.12.12\x64\terraform.exe validate
2019-12-19T14:30:03.5757118Z [31m
2019-12-19T14:30:03.5757371Z [1m[31mError: [0m[0m[1mError building ARM Config: Azure CLI Authorization Profile was not found. Please ensure the Azure CLI is installed and then log-in with `az login`.[0m
2019-12-19T14:30:03.5757517Z 
2019-12-19T14:30:03.5757603Z [0m[0m[0m
2019-12-19T14:30:03.6204272Z ##[error]Error: The process 'C:\hostedtoolcache\windows\terraform\0.12.12\x64\terraform.exe' failed with exit code 1
2019-12-19T14:30:03.6214024Z ##[section]Finishing: Terraform : azurerm
```

I'm not sure if this code is supposed to address this in azure-terraform-command-handler.ts ... 
```
public handleProvider(command: TerraformAuthorizationCommandInitializer) {
        if (command.serviceProvidername) {
            process.env['ARM_SUBSCRIPTION_ID']  = tasks.getEndpointDataParameter(command.serviceProvidername, "subscriptionid", false);
            process.env['ARM_TENANT_ID']        = tasks.getEndpointAuthorizationParameter(command.serviceProvidername, "tenantid", false);
            process.env['ARM_CLIENT_ID']        = tasks.getEndpointAuthorizationParameter(command.serviceProvidername, "serviceprincipalid", false);
            process.env['ARM_CLIENT_SECRET']    = tasks.getEndpointAuthorizationParameter(command.serviceProvidername, "serviceprincipalkey", false);
        }
    }
```

If so, its not working on the validate, plan and apply stages.
When I am running validate and apply step it is failing on terraform validate as it is not passing additional command arguments.

Is there a way to run apply only without validation in the same step?