<!--
Thanks for contributing a pull request! Please ensure you have taken a look at
the contribution guidelines: https://github.com/librosa/librosa/blob/master/CONTRIBUTING.md#how-to-contribute
-->
#### Reference Issue
Fixes #783 527 

#### What does this implement/fix? Explain your changes.
This pull request implements the YIN and pYIN algorithms for pitch tracking. The YIN function is based on @lostanlen's PR #974 (with a few modifications) while the pYIN function is based on this [paper](https://ieeexplore.ieee.org/document/6853678).

#### Any other comments?
Both functions work well but some refactoring is definately needed. I compared the outputs of pYIN to the official [vamp plugin](https://code.soundsoftware.ac.uk/projects/pyin) and the results are comparable. I haven't added any special treatment of low amplitude frames yet so silent frames with periodic noice occasionally give wrong results.

Also, note that I haven't used the `librosa.core.autocorrelate` function. The `librosa.core.autocorrelate` computes equation (2) in the [YIN paper](https://asa.scitation.org/doi/10.1121/1.1458024) which seems to perform worse than the one used here (which computes equation (1)). I tried scaling by the window size (as suggested in the paper) but it didn't improve things much.   

I haven't implemented any tests yet so it would be good to get some guidance there.
#### What does this implement/fix? Explain your changes.

This PR removes all deprecated features slated for removal at 0.8.  (It also increments the version number.)

I want to get this out of the way before any subsequent development gets underway, especially because a large portion of the 0.8 series centers on maintenance and testing.  It'll be easier to do those jobs if we're not trying to maintain code that will be removed anyway.

<!--
If your issue is a usage question, submit it our Google Group instead: 
https://groups.google.com/forum/#!forum/librosa
-->

<!-- Instructions For Filing a Bug: https://github.com/librosa/librosa/blob/master/CONTRIBUTING.md#filing-bugs -->

#### Description
<!-- Example: Error when computing spectral_contrast on a single frame-->
Error when using `librosa.feature.stack_memory ` function, the returned array contains some values that doesn't exists in the input array, and the wrong result is random, the probability of failure increases with bigger `n_steps` parameter

#### Steps/Code to Reproduce
<!--
Example:
```
import librosa

# Generate one frame of random STFT-like energy
S = np.random.randn(1025, 1)**2

contrast = librosa.feature.spectral_contrast(S=S)
```
If the code is too long, feel free to put it in a public gist and link
it in the issue: https://gist.github.com
-->
```python
import librosa
import numpy as np

# generate random array in range [0, 24)
x = np.remainder((np.random.random(10000)*100).astype(int), 24)
assert (x < 24).all(), f'this should not alarm'
stackedX = librosa.feature.stack_memory(
    x, n_steps=500, mode='constant')  # same error with mode type edge and reflect
print(f'{stackedX[stackedX >= 24]}')  # will print very big integers
assert (stackedX < 24).all(), f'this will alarm'

```

#### Expected Results
<!-- Example: contrast should have shape (1, 1)-->
```
$ python test
(nothing happens)
```

#### Actual Results
<!-- Please paste or specifically describe the actual output or traceback. -->
```
$ python test
[2097163]
Traceback (most recent call last):
  File "testST.py", line 10, in <module>
    assert (stackedX < 24).all(), f'this will alarm'
AssertionError: this will alarm
```

#### Versions
<!--
Please run the following snippet and paste the output below.
import platform; print(platform.platform())
import sys; print("Python", sys.version)
import numpy; print("NumPy", numpy.__version__)
import scipy; print("SciPy", scipy.__version__)
import librosa; print("librosa", librosa.__version__)
-->
```python
>>> import platform; print(platform.platform())
Linux-5.0.0-37-generic-x86_64-with-debian-buster-sid
>>> import sys; print("Python", sys.version)
Python 3.7.4 (default, Aug 13 2019, 20:35:49) 
[GCC 7.3.0]
>>> import numpy; print("NumPy", numpy.__version__)
NumPy 1.16.4
>>> import scipy; print("SciPy", scipy.__version__)
SciPy 1.3.0
>>> import librosa; print("librosa", librosa.__version__)
librosa 0.7.2
>>> 
```

<!-- Thanks for contributing! -->

#### Reference Issue
Fixes #1047 


#### What does this implement/fix? Explain your changes.

This PR re-introduces support for libsamplerate as a sample-rate conversion backend.  New `res_type` values are supported to map onto libsamplerate's modes.

Functionally, I don't think there's anything to do here.  We should perhaps have a conversation about packaging, dependencies, and possible deprecation of resampy though.


I was noticing that the beats detected using the beat module (both `plp` and `beat_track`) were a fraction of a second delayed compared to where I'd expect them to be.

Graphing librosa's onset strength envelope against [madmom](https://github.com/CPJKU/madmom)'s beat module outputs, I saw that the beats typically occur just before the onsets:
![image](https://user-images.githubusercontent.com/5400947/71947754-d61ae480-319b-11ea-9280-dfa89b31e235.png)

Thus by using onset peaks as the primary method of beat detection, we end up reporting late beats.

Indeed, by playing clicks at the beat positions, the madmom beats feel more correct than the librosa ones. Obviously, madmom uses entirely different techniques compared to the onset-based ones that librosa uses, but I found it interesting that I found a consistent bias (late by 0.02-0.06s) amongst several songs I tested. The bias persisted with both 22050 and 44100 sampling rates.

Since I couldn't find anything in the literature about this, wanted to check if anyone had come across this before or had any hypotheses for why it could be happening. Perhaps beats typically occur at the beginning of the offsets rather than the peak?
Repro:
```
import subprocess
import librosa

sp = subprocess.Popen(
    ['ffmpeg', '-i', 'test.mp3', '-f', 'wav', '-'],
    stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

stream = librosa.stream(sp.stdout.fileno(), block_length=16, frame_length=4096, hop_length=2048)
next(stream)
```

Stacktrace:
```
  File "/usr/local/lib/python3.7/site-packages/librosa/core/audio.py", line 361, in stream
    sr = sf.info(path).samplerate
  File "/usr/local/lib/python3.7/site-packages/soundfile.py", line 436, in info
    return _SoundFileInfo(file, verbose)
  File "/usr/local/lib/python3.7/site-packages/soundfile.py", line 383, in __init__
    with SoundFile(file) as f:
  File "/usr/local/lib/python3.7/site-packages/soundfile.py", line 627, in __init__
    self._file = self._open(file, mode_int, closefd)
  File "/usr/local/lib/python3.7/site-packages/soundfile.py", line 1182, in _open
    "Error opening {0!r}: ".format(self.name))
  File "/usr/local/lib/python3.7/site-packages/soundfile.py", line 1355, in _error_check
    raise RuntimeError(prefix + _ffi.string(err_str).decode('utf-8', 'replace'))
RuntimeError: Error opening 4: File contains data in an unknown format.
```

One fix would be to optionally take `sr` as input from the user

Related issue: https://github.com/bastibe/SoundFile/issues/141
#### Description

Now that the resample interface is fully flexible, we could easily introduce [`python-samplerate`](https://python-samplerate.readthedocs.io/en/latest/?badge=latest#) as an optional dependency, and add its implemented modes to our `res_type` dispatch:

- linear 
- src_best (sinc_best)
- src_fastest (sinc_fastest)
- src_medium (sinc_medium)
- zero_order_hold

Down the line, since libsamplerate is now BSD-licensed (and the python bindings are MIT-licensed), we could also put it back in the main dependency line and possibly deprecate resampy.  This is more a question of packaging and maintenance than of functionality, but it's something to consider.
<!--
If your issue is a usage question, submit it our Google Group instead: 
https://groups.google.com/forum/#!forum/librosa
-->

<!-- Instructions For Filing a Bug: https://github.com/librosa/librosa/blob/master/CONTRIBUTING.md#filing-bugs -->

#### Description
<!-- Example: Error when computing spectral_contrast on a single frame-->

Hi librosa seems to have a bug, I'm using Windows 10 and after I've installed librosa 0.7.1 I can't import librosa, basically the my program enter an infinite loop while importing librosa, here's a screeshot, does anyone have this problem before?

![image](https://user-images.githubusercontent.com/16644771/71536356-db02ad00-28ec-11ea-9b78-3357bd5f7e3c.png)

#### Steps/Code to Reproduce
<!--
Example:
```
import librosa

# Generate one frame of random STFT-like energy
S = np.random.randn(1025, 1)**2

contrast = librosa.feature.spectral_contrast(S=S)
```
If the code is too long, feel free to put it in a public gist and link
it in the issue: https://gist.github.com
-->

#### Expected Results
<!-- Example: contrast should have shape (1, 1)-->

#### Actual Results
<!-- Please paste or specifically describe the actual output or traceback. -->

#### Versions
<!--
Please run the following snippet and paste the output below.
import platform; print(platform.platform())
import sys; print("Python", sys.version)
import numpy; print("NumPy", numpy.__version__)
import scipy; print("SciPy", scipy.__version__)
import librosa; print("librosa", librosa.__version__)
-->


<!-- Thanks for contributing! -->

<!--
Thanks for contributing a pull request! Please ensure you have taken a look at
the contribution guidelines: https://github.com/librosa/librosa/blob/master/CONTRIBUTING.md#how-to-contribute
-->
#### Reference Issue
<!-- Example: Fixes #123 -->
N/A

#### What does this implement/fix? Explain your changes.
This defaults gamma such that filter bandwidths are proportional to ERB.

#### Any other comments?
N/A

<!--
If your issue is a usage question, submit it our Google Group instead: 
https://groups.google.com/forum/#!forum/librosa
-->

<!-- Instructions For Filing a Bug: https://github.com/librosa/librosa/blob/master/CONTRIBUTING.md#filing-bugs -->

#### Description
<!-- Example: Error when computing spectral_contrast on a single frame-->
Python segfaults when importing librosa before pytorch, but works fine if import statements are switched.

#### Steps/Code to Reproduce
```bash
parallels@anselm:GANNt-do-without-you$ python3
Python 3.6.9 (default, Nov  7 2019, 10:44:02) 
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import librosa
>>> import torch
Segmentation fault (core dumped)
parallels@anselm:GANNt-do-without-you$ python3
Python 3.6.9 (default, Nov  7 2019, 10:44:02) 
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import torch
>>> import librosa
>>> 
```

#### Expected Results
<!-- Example: contrast should have shape (1, 1)-->
No seg fault regardless of import order


#### Actual Results
<!-- Please paste or specifically describe the actual output or traceback. -->
Segmentation fault when librosa is imported before torch, no seg fault when order is switched


#### Versions
<!--
Please run the following snippet and paste the output below.
import platform; print(platform.platform())
import sys; print("Python", sys.version)
import numpy; print("NumPy", numpy.__version__)
import scipy; print("SciPy", scipy.__version__)
import librosa; print("librosa", librosa.__version__)
-->

```bash
Linux-4.15.0-72-generic-x86_64-with-Ubuntu-18.04-bionic
Python 3.6.9 (default, Nov  7 2019, 10:44:02) 
[GCC 8.3.0]
NumPy 1.17.4
SciPy 1.4.0
librosa 0.7.1
pytorch 1.3.0
```
<!-- Thanks for contributing! -->
