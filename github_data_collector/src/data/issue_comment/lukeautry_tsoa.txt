### All Submissions:

* [x] Have you followed the guidelines in our [Contributing](https://github.com/lukeautry/tsoa/tree/master/docs/CONTRIBUTING.md) document?
* [x] Have you checked to ensure there aren't other open [Pull Requests](https://github.com/lukeautry/tsoa/pulls) for the same update/change?
* [ ] Have you written unit tests?
* [ ] Have you written unit tests that cover the negative cases (i.e.: if bad data is submitted, does the library respond properly)?
* [ ] This PR is associated with an existing issue?

OpenAPI 3 uses the equivalent of `collectionFormat: 'multi'` for arrays in querystrings by default (`{style: 'form', explode: true }`).
However, the key `collectionFormat` is no longer allowed and should therefore not be set.

Allowed fields: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#style-values
Defaults: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#fixed-fields-10
<!--- Provide a general summary of the issue in the Title above -->

## Sorting

* **I'm submitting a ...**
  - [X] bug report
  - [ ] feature request
  - [ ] support request

* I confirm that I
  - [X] used the [search](https://github.com/lukeautry/tsoa/search?type=Issues) to make sure that a similar issue hasn't already been submit

## Expected Behavior

```ts
/**
 * @format email 
 * @pattern ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$ 
 */
email: string
``` 
It should create a validator containing the full pattern :

```ts
"email": { 
  "dataType": "string", 
  "required": true, 
  "validators": { 
    "pattern": { 
      "value": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
    } 
  }
},
```

## Current Behavior

The pattern is split at @ and only the first part of the regex is used

```ts
"email": { 
  "dataType": "string", 
  "required": true, 
  "validators": { 
    "pattern": { 
      "value": "^[a-zA-Z0-9_.+-]+" 
    } 
  } 
},
```

## Context (Environment)
Version of the library: 2.5.12
Version of NodeJS: v10.15.3
* Confirm you were using yarn not npm: [X]

<!--- Provide a general summary of the issue in the Title above -->


## Sorting

* **I'm submitting a ...**
  - [x] bug report
  - [x] feature request
  - [ ] support request

* I confirm that I
  - [ ] used the [search](https://github.com/lukeautry/tsoa/search?type=Issues) to make sure that a similar issue hasn't already been submit

## Expected Behavior
<!--- Tell us what should happen -->

When I enable the tsconfig option noUnusedParameters and try to compile the app after routes have been generated, I get the following errors:

```

src/routes.ts:14:32 - error TS6133: 'app' is declared but its value is never read.

14 export function RegisterRoutes(app: express.Express) {
                                  ~~~

src/routes.ts:28:12 - error TS6133: 'promiseHandler' is declared but its value is never read.

28   function promiseHandler(controllerObj: any, promise: any, response: any, next: any) {
              ~~~~~~~~~~~~~~

src/routes.ts:57:12 - error TS6133: 'getValidatedArgs' is declared but its value is never read.

57   function getValidatedArgs(args: any, request: any): any[] {
              ~~~~~~~~~~~~~~~~

[11:53:57 AM] Found 3 errors. Watching for file changes.
```

<!--- If this is related to swagger/OpenAPI files, then please include swagger.yaml that you wish tsoa had generated  -->
```yaml
//@ts-nocheck
```

## Current Behavior
<!--- Tell us what happens instead of the expected behavior -->
I receive multiple compilation errors from typescript and cannot build the application.

## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->

Adding `//@ts-nocheck` to the top of the file suppresses this issue.

## Steps to Reproduce


## Context (Environment)
Version of the library: "tsoa": "^2.5.12"
Version of NodeJS: <!-- insert that here -->
* Confirm you were using yarn not npm: [x]

Previously in v2.5.x tsoa was able to support string literal type arrays in the query parameter. However v3 is showing breaking changes on this behavior.

## Sorting

* **I'm submitting a ...**
  - [x] bug report
  - [ ] feature request
  - [ ] support request

* I confirm that I
  - [x] used the [search](https://github.com/lukeautry/tsoa/search?type=Issues) to make sure that a similar issue hasn't already been submit

## Expected Behavior
<!--- Tell us what should happen -->
<!--- If this is related to a TypeScript issue, then include the way that you expected to be able to write the code  -->
```yml
"/route":
  post:
    parameters:
    - in: query
      name: mode
      required: false
      schema:
        default:
        - 1
        - 2
        - 3
        type: array
        items:
          type: string
          enum:
          - 1
          - 2
          - 3
      collectionFormat: multi
```

## Current Behavior
<!--- Tell us what happens instead of the expected behavior -->
Error: @Query('mode') Can't support array 'refAlias' type.

## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->

## Steps to Reproduce
<!--- Provide a link to a live example, or an unambiguous set of steps to -->
<!--- reproduce this bug. Include code to reproduce, if relevant -->

```ts
type Mode = '1' | '2' | '3';
@Query() mode: Mode[] = ['1', '2', '3'];
```

## Context (Environment)
Version of the library: v3.0.0
Version of NodeJS: v10.16.3

## Breaking change?
v3 breaking changes
<!--- Provide a general summary of the issue in the Title above -->

## Sorting

* **I'm submitting a ...**
  - [x] bug report
  - [ ] feature request
  - [ ] support request

* I confirm that I
  - [x] used the [search](https://github.com/lukeautry/tsoa/search?type=Issues) to make sure that a similar issue hasn't already been submit

## Expected Behavior
```json
"OptionalNotNullable": {
  "properties": {
      "optional": {
        "type": "string"
      },
    },
    "required": [],
    "type": "object",
    "additionalProperties": false
},
```

<!--- If this is related to a TypeScript issue, then include the way that you expected to be able to write the code  -->
```ts
interface OptionalNotNullable {
  optional?: string
}
```

## Current Behavior
```json
"OptionalNotNullable": {
  "properties": {
      "optional": {
        "type": "string",
        "nullable": true
      },
    },
    "required": [],
    "type": "object",
    "additionalProperties": false
}
```

## Possible Solution
Don't mark [optional properties](https://github.com/lukeautry/tsoa/blob/master/src/swagger/specGenerator3.ts#L338) as `nullable: true`.

## Context (Environment)
Version of the library: 2.x
Version of NodeJS: any

- [x] Confirm you were using yarn not npm

## Detailed Description
If we have a representation of the concept (see propsal here: https://github.com/lukeautry/tsoa/issues/479#issuecomment-571134853) of `null` in OpenAPI spec, we should not mark any optional properties as `nullable: true` and instead use the explicit TS `null`.

## Breaking change?
Yes, should be 3.x
<!--- Provide a general summary of the issue in the Title above -->
This is the v3 version for the compromise we made in https://github.com/lukeautry/tsoa/pull/547

## Sorting

* **I'm submitting a ...**
  - [ ] bug report
  - [X] feature request
  - [ ] support request

* I confirm that I
  - [X] used the [search](https://github.com/lukeautry/tsoa/search?type=Issues) to make sure that a similar issue hasn't already been submit

## Expected Behavior
<!--- Tell us what should happen -->
<!--- If this is related to swagger/OpenAPI files, then please include swagger.yaml that you wish tsoa had generated  -->
Assuming that the `host` property was not provided and the `basePath` is "v1" (correct me on this if I'm wrong @Eoksni / @jreusch-barco) but the desired output would be:
```yaml
"servers": [
		{
			"url": "/v1"
		}
	]
```
I'd like to be able to specify relative host, which is allowed by specification https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#fixed-fields-4.

## Current Behavior
Currently if I omit host field in the swagger config or use empty "host": "", it gets replaced with http://localhost:3000. Using "host": "/" also doesn't work.

## Possible Solution
The solutions were discussed in the v2 version of this change: https://github.com/lukeautry/tsoa/issues/540

## Detailed Description
<!--- Provide a detailed description of the change or addition you are proposing -->
We will accept that if someone doesn't specify a host, then it should not default (since tsoa couldn't possibly know which host to default to). It should be relative.

## Breaking change?
<!--- if this is a breaking change, then please describe how it breaks the existing libraries inputs/outputs -->
<!--- if this is a breaking change, then discuss how we can mitigate that -->
Yes, this should be part of the v3 branch.
Can one specify a return type of binary or file on a model property?
## Sorting

* **I'm submitting a ...**
  - [ ] bug report
  - [x] feature request
  - [ ] support request

* I confirm that I
  - [x] used the [search](https://github.com/lukeautry/tsoa/search?type=Issues) to make sure that a similar issue hasn't already been submit
    * There was #304 but without any real solution...

## Expected Behavior

Adding TSOA should not drastically increase the size of my deployed application (and it should not add unused dependencies to it).

## Current Behavior

Adding TSOA to a(n empty) project causes 65 npm packages to be added with a size of over 60MB (with 50MB for typescript alone). Especially having to include `typescript` in my deployed productive code is really bad in my opinion.

## Possible Solution

I think it would make much sense to split tsoa into 2 package, one for the CLI (`tsoa-cli`) and one Runtime package (`tsoa-runtime`).
This way `tsoa-cli` could be used as a global or dev dependency and only the needed code is deployed, with the productive runtime dependency. 
Runtime would probably just include: 
* controller base class
* decorators 
* and maybe a few other small things

## Breaking change?

Depending on the chosen package naming, the change might break existing builds and/or deployments (if they would be updated).

Possible options are: 

1. `tsoa`(CLI) --> `tsoa-runtime`
    * would probably not break anything
    * silent update might lead cause possible improvements to be wasted (as long as the CLI package stays in the productive dependencies)
2. `tsoa`(empty) --> `tsoa-cli` --> `tsoa-runtime`
    * basically the same as above, with nicer package name for CLI
3. `tsoa-cli` --> `tsoa` (Runtime)
   * would break the build, but not the runtime (as long as you don't try to actually use CLI features at runtime, but this should usually not be the case)
    * naming schema would be in line what many other (big) packages to (e.g. angular, babel, vue, gulp, grunt, karma, aurelia)
    * instant win for the runtime
    * fixing the build (by adding CLI package to the dev dependencies should be easy
4. `tsoa-cli` --> `tsoa-runtime`; deprecate `tsoa`
    * clear naming
    * would not break anything
    * forces explicit migration

I would prefer option 3 or 4 (event if they are slightly less comfortable), as 1 and 2 feel somewhat dirty to me.

cc: @ryo-nbx
<!--- Provide a general summary of the issue in the Title above -->

## Sorting

* **I'm submitting a ...**
  - [x] bug report
  - [ ] feature request
  - [ ] support request

* I confirm that I
  - [x] used the [search](https://github.com/lukeautry/tsoa/search?type=Issues) to make sure that a similar issue hasn't already been submit

## Explanation

Accompanying issue for the issue raised in this [PR](https://github.com/lukeautry/tsoa/pull/535). It just modifies the tests to demonstrate the desired output
<!--- Provide a general summary of the issue in the Title above -->

## Sorting

* **I'm submitting a ...**
  - [ ] bug report
  - [x] feature request
  - [ ] support request

* I confirm that I
  - [x] used the [search](https://github.com/lukeautry/tsoa/search?type=Issues) to make sure that a similar issue hasn't already been submit

There are closed issues, none that offer a potential solution afaik.

## Expected Behavior

```ts
@Route('')
export class TestController {
  @Get('test')
  public async test(
    @Header('tokens') tokens: string[]
  ): Promise<string> {
    return 'Hello, World';
  }
}
```

could automatically generate:

2.0:
```yaml
name: tokens
in: header
required: true
type: array
items:
  type: string
collectionFormat: csv
```

3.0:
```yaml
name: tokens
in: header
required: true
schema:
  type: array
  items:
    type: string
style: simple
```

## Current Behavior
It throws:

```
Error: @Header('inUid') Can't support 'array' type. 
in 'TestControllerController.test'

```

## Possible Solution
According to the OpenAPI 3 Spec, it's possible to pass complex data types [array and object] as a standardized format.

Some examples (from the Spec):
Assume a parameter named `color` has one of the following values:

```
   string -> "blue"
   array -> ["blue","black","brown"]
   object -> { "R": 100, "G": 200, "B": 150 }
```

The following table shows 2 examples of rendering different formats that would give support for query, path, (cookie) and header. Explode is `false` (default setting) for both:

[`style`](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#dataTypeFormat) | `empty` | `string` | `array` | `object` | `usable in`
----------- | ------ | -------- | -------- | --------|-------
form | color= | color=blue | color=blue,black,brown | color=R,100,G,200,B,150 | `query`,`cookie`
simple | n/a | blue | blue,black,brown | R,100,G,200,B,150 | `path`,` header`

Swagger 2 afaik only supports schema objects in body.
Arrays should be fine, objects without references might work, but I'm not sure.

`form` should be `collectionFormat: csv` in OpenAPI 2.0.
`simple` should be `collectionFormat:  csv` in 2.0

## Context
[OpenAPI 3.0.2 Parameter Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#parameter-object)

[Swagger 2.0 Parameter Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#parameterObject)

[RFC6570](https://tools.ietf.org/html/rfc6570#section-3.2.2)

## Detailed Description

Ideally, we would document and eventually extract arrays and objects from header, query and path strings before passing the param to the ValidationService.

I have not fully fleshed out this idea, but I'd say it's ok to discuss this at least in theory for now.

## Breaking change?
Not sure, I'd say since we would not support validating these, this is probably safer to do in the context of a major release.