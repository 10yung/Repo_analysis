Some of the [event types](https://gabdube.github.io/native-windows-gui/api/native_windows_gui/enum.Event.html) are not clear at all:

* `Char`
* `Paint`
* `Raw`
* `ValueChanged`
* `LimitReached`
* `Tick`
* `Triggered`

I'm currently trying to run some code when the main window is first created, and the answer is probably in here somewhere but I can't tell because it's undocumented. Some form of documentation about when these events fire would be helpful.
I added the following piece in the events section of the showcase example to test the events of checkbox and radiobutton. Only Event::Raw was triggered while other events, such as Click, DoubleClick, etc. did not work. Do I miss anything here? 

(PS. The buttons, menu items and textbox are working well with all other event types in addition to Raw.)

events: [
... ...

       ("CatRadio", "SelectCat", Event::Click, |_,_,_,_| {
            nwg::simple_message("Cat", "Hello Cat!");
        }),

        ("HappyCheckBox", "CheckHappy", Event::DoubleClick, |_,_,_,_| {
            nwg::simple_message("Happy", "Hello check happy!");
        }),

        ("TriCheckBox", "CheckTribox", Event::Focus, |_,_,_,_| {
            nwg::simple_message("TriState", "Hello tristate box!");
        }),

        ("YesRadio", "SelectYes", Event::Click, |_,_,_,_| {
            nwg::simple_message("Yes", "Selected Yes!");
        }),

... ...
];
I can't seem to figure out how to dispatch an event from a separate thread. I'm attempting to update a progress bar as a separate thread does some heavy work.

Any hints?
[https://msdn.microsoft.com/en-us/library/windows/desktop/ff468808(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/windows/desktop/ff468808(v=vs.85).aspx)
Using `nwg_combobox` with `data=...` will cause two compiler errors, E0243 and E0308.  E0243 appears to be caused by the macro giving `ComboBoxT` one type parameter (data) when it needs three, and E0308 appears to be caused by the macro assigning `[]` to the `collection` field of `ComboBoxT`.  On a side note, thanks for making this crate, it's really useful!



I have found something may help:
https://crates.io/crates/embed-resource
WinAPI: LoadIcon
WinAPI: LoadCursor
WinAPI: LoadString
WinAPI: LoadMenu
Simple example:

```
#[macro_use] extern crate native_windows_gui as nwg;

use nwg::{Ui, simple_message, fatal_message, dispatch_events};
use nwg::events as nwge;
use nwg::constants::{FONT_WEIGHT_BLACK, FONT_DECO_ITALIC, CheckState, FileDialogAction, HTextAlign, PickerDate, ImageType};

nwg_template!(
    head: setup_ui<&'static str>,
    controls: [
        ("MainWindow", nwg_window!( title="Template Example"; size=(800, 600) )),
        ("YesNoGroup", nwg_groupbox!(parent="MainWindow"; text="Choose one"; position=(360, 40); size=(130, 80);  align=HTextAlign::Center; font=Some("TextFont") )),
        ("YesRadio", nwg_radiobutton!(parent="YesNoGroup"; text="Yes"; position=(10, 20); size=(110, 30); font=Some("TextFont"))),
        ("NoRadio", nwg_radiobutton!(parent="YesNoGroup"; text="No"; position=(10, 45); size=(110, 30); font=Some("TextFont")))
        
    ];
    events: [
    ];
    resources: [
        ("TextFont", nwg_font!(family="Arial"; size=17))
    ];
    values: []
);

fn main() {
    let app: Ui<&'static str>;

    match Ui::new() {
        Ok(_app) => { app = _app; },
        Err(e) => { fatal_message("Fatal Error", &format!("{:?}", e) ); }
    }

    if let Err(e) = setup_ui(&app) {
        fatal_message("Fatal Error", &format!("{:?}", e));
    }

    dispatch_events();
}
```

show this:

![image](https://user-images.githubusercontent.com/4469745/28235959-1e9bb65a-694c-11e7-8040-13610a72d905.png)



Another way to reduce it,  double click "showcase" title bar:

![image](https://user-images.githubusercontent.com/4469745/28235974-817e5cd2-694c-11e7-8a9b-cffc9ab5b9fd.png)


Enable double buffering by rendering to a offscreen DC when painting a window.

This will be added as an option `double_buffer` to the `WindowT` template.
This will make error much more user friendly. Ie: "Key `AppId::MainWindow` was not found" is much more descriptive than `The key was not found in the ui`. 