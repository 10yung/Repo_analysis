I ran into the documented Boolean issue, and tried the workaround, which didn't help - I discovered I was able to make it work by using Virtus::Attribute::Boolean rather than Axiom::Types::Boolean.
Setting the default value to a hash (or empty array, or any other mutable object) can cause mutability/side-effect problems to be introduced. These are very hard and time-consuming to track down.

For example:

    u1 = User.new
    u1.info[:something] = 1

    u2 = User.new
    u2.info[:something] # => 1

In the above example, one would expect `u2.info[:something]` to return `nil`, however because the default value Hash is shared between all users, `u2.info[:something]` returns `1`.

Using the lambda means that a new Hash will be created each time a new user is created, avoiding the above side-effect issue:

    u1 = User.new
    u1.info[:something] = 1

    u2 = User.new
    u2.info[:something] # => nil
```ruby
require 'virtus'

class SomeRandomClass
end

class User
  include Virtus.model(strict: true)

  attribute :some_ran_class, SomeRandomClass
end

User.new(some_ran_class: 5) # no error

User.new() # no error

User.new(some_ran_class: SomeRandomClass.new) # should be the only one that doesn't cause an error
```



Hi,
I can't find if the format for parsing dates can be configured somewhere.
Is it possible to force a given format when parsing dates?
It would be nice to have a coercion like `FiexdWith`that you could inform parameters like : 

* width: Integer 
* alignment: {left, right}
* padding : String

Example : 

```ruby
class Register
  include Virtua.model

  attribute :some_field, FixedWidth, width: 6, alignment: :right, padding: " "
end

my_register = Register:new()
my_register.some_field = "abc"

puts my_register.some_field
"   abc"
```

I tried to navigate through the classes to find where to make this via Custom Coercion, but couldn't come up with an simple implementation.

You someone could point me the direction, I can try to put some effort and code into this.
I'm running into an error specifically with this line of code:
https://github.com/solnic/virtus/blob/4db9ffd380b5e42baa56b9f96b8daebf12fad48f/lib/virtus/attribute_set.rb#L196

In Rails 4 and below calling `to_hash` on parameters was easy and returned the expected hash as follows:

```ruby
> ::Hash.try_convert(ActionController::Parameters.new({foo: "bar"}))
 => {"foo"=>"bar"}
```

However this behavior changed in Rails 5 and started to raise an error:

```ruby
> ::Hash.try_convert(ActionController::Parameters.new({foo: "bar"}))
 => ActionController::UnfilteredParameters (unable to convert unpermitted parameters to hash)
```

Therefore I think Virtus needs to be slightly more intelligent about how it coerces to a hash.
I have gone ahead and implemented a PR that should fix the issue I am seeing as well as a test to replicate the issue and verify it's fix in #388
Since parameters in Rails 5 no longer sub class from Hash and blow up
when you try to call to_hash on them when they are not permitted the
coerce method in Virtus was no longer working. Since the hash here is
not mass assigned but instead only permits known attributes it is safe
to call `.to_unsafe_hash` if it is defined on the attributes. If not we
fall back to the previous behavior.

This also adds specs to capture the bahavior I was seeing on Rails 5.


I have a Child class of `Virtus::Attribute` called `SortedComponents`

Which looks like this:

```
class SortedComponents < Virtus::Attribute
  def coerce(components)
    components = (components).sort! { |a, b|  a["description"] <=> b["description"] }
    components = nest_components(components)
  end

  def self.nest_components(components)
    components.delete_if do |c|
      /[0-9]+[A-Z]+/ =~ c["description"] ? true : false
    end
  end

end
```

However, I'm not able to call "nest_components" in "coerce" and get the error:
```
app/models/SortedComponents.rb:4:in `coerce': undefined method `nest_components' for #<SortedComponents:0x007fcd132ea300> (NoMethodError)
```

How can I call methods from coerce in my Virtus::Attribute because not being able to break up some of the steps in coerce into seperate methods will make coerce huge?