build failed on master branch

```
sed: can't read rejoiner-schema/pom.xml: No such file or directory
The command "sed -i 's#/usr/local/bin/protoc#/tmp/protobuf/bin/protoc#g' rejoiner-schema/pom.xml" failed and exited with 2 during .
```

https://travis-ci.org/google/rejoiner/builds/638037210#L207-L208
Bumps [jetty-server](https://github.com/eclipse/jetty.project) from 9.4.8.v20171121 to 9.4.17.v20190418.
<details>
<summary>Commits</summary>

- [`aa1c656`](https://github.com/eclipse/jetty.project/commit/aa1c656c315c011c01e7b21aabb04066635b9f67) Updating to version 9.4.17.v20190418
- [`926a842`](https://github.com/eclipse/jetty.project/commit/926a8428a8a61d4d150916b75c4dd293c3949716) Updating maven-javadoc-plugin config for JDK-8212233 bug
- [`038c7ee`](https://github.com/eclipse/jetty.project/commit/038c7ee6d7b6300ac04e7f27cf35651c2cd15175) Merged branch 'jetty-9.3.x' into 'jetty-9.4.x'.
- [`1f31f52`](https://github.com/eclipse/jetty.project/commit/1f31f52a5af545ee320daf1130ffa05b63c13b97) Merged branch 'jetty-9.2.x' into 'jetty-9.3.x'.
- [`03243eb`](https://github.com/eclipse/jetty.project/commit/03243ebfbdbeb649cc67bcdcecaf9a4b96d5fe1a) Updated ALPN version for JDK 8u211 and 8u212.
- [`1c00de3`](https://github.com/eclipse/jetty.project/commit/1c00de3d1d65b3a7cc59aa28df340a6bfe17ae8a) Fixing bad merge
- [`c75136f`](https://github.com/eclipse/jetty.project/commit/c75136fe63a729611351ce3da0522ab63bbf5e55) Merge branch 'release-9.4.16' into jetty-9.4.x
- [`b6809f5`](https://github.com/eclipse/jetty.project/commit/b6809f555538344b4cccb2043048046269754102) Jetty 9.4.x 2140 infinispan expired sessions ([#3457](https://github-redirect.dependabot.com/eclipse/jetty.project/issues/3457))
- [`3639805`](https://github.com/eclipse/jetty.project/commit/36398051dec1b909956c297a910f49837c8ea7eb) fix header
- [`2995029`](https://github.com/eclipse/jetty.project/commit/2995029c982211e8a71646e0d52c39ff43a56b7a) Merge branch `jetty-9.3.x` into `jetty-9.4.x`
- Additional commits viewable in [compare view](https://github.com/eclipse/jetty.project/compare/jetty-9.4.8.v20171121...jetty-9.4.17.v20190418)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.eclipse.jetty:jetty-server&package-manager=maven&previous-version=9.4.8.v20171121&new-version=9.4.17.v20190418)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/rejoiner/network/alerts).

</details>
Rejoiner's errors make me feel inconvenient because I can't define valid data to let the front desk staff know what the current error is, what kind of error is, because the current valid information is only message, which is not good judgment, I hope in When you execute responseObserver.onError(), you can have some properties in the error message, you can customize it, and let the background personnel return their own defined errors.
I'm feeling that rejoiner could be split into some modules which would make it more generally useful and easier to adapt to different usecases. I'm thinking out loud here so please tell me I'm wrong before I start on a PR ;-)

1. protobuf -> graphql schema conversion
2. graphql schema modification (now depends on protobuf)
3. annotations for 2
4. binding with guice

Splitting these into maven modules would allow to add these for example:

5. swagger -> graphql schema conversion
6. binding with spring

I think the hardest work would be to make the modification part independent of protobuf without losing efficiency.

cheers
Hello,
I can't seem to find a way how to access current field parent arguments, and getting the actual resolved Proto object.
For example, we have this query:
```
query ($input: Input_proto_request_params)  {
  search(
    input: $input
  ) {
    item {
      specificProperty {
        value
      }
    }
  }
}
```
Now, field `specificProperty` is a `SchemaModification` kind of field, and we need the `$input: Input_proto_request_params`  variable to be able to resolve it.
I found a way that by injecting `DataFetchingEnvironment` in the method we could get the list of parent arguments, like:
```
 dataFetchingEnvironment.executionStepInfo.parent.arguments
```
but with this, I get the `LinkedHashMap`, not the converted to Proto class object. I could create the Proto object manually, but that means the same object is constructed two times.
Is there a way to get access to the parent argument, but the already resolved Proto object one?

Thank you

P.S. Love the library, thank you very much for this awesome product ❤️ 
I'm sure there are a lot of people, myself included, excited to use Rejoiner, but are rusty with their Java tooling knowledge.

Would love to see a very easy copy/paste how-to to get rejoiner up and running with vanilla Java. A quick start guide would help immensely.
I think it would be useful to be able to analyze a GraphQL schema and produce a set of .proto files describing services that, when implemented, could be stitched together by Rejoiner to implement the specified schema. I'm not sure that all possible GraphQL schemas could be supported by this, but even a subset could be useful (particularly if the analyzer also generated warnings about what was unsupportable).
I found that the cache you use is DefaultCacheMap, but I want to set the cache in redis. I don't know if you have any ideas or suggestions like that. In the future, would you consider adding redis to the project and adding redis to it?
I cloned master and follow the instruction here https://rejoiner.io/docs/examples.html
But got this error

```
{
  "errors": [
    {
      "message": "Exception while fetching data (/sayHello) : java.lang.IllegalArgumentException: argument type mismatch",
      "locations": [
        {
          "line": 2,
          "column": 3
        }
      ],
      "path": [
        "sayHello"
      ]
    }
  ],
  "data": {
    "sayHello": null
  }
}

```
Lets get the coveralls.io badge to turn green.