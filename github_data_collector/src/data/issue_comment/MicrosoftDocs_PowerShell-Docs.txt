After this change:

+ https://review.docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/clear-host?branch=qinezh%2Fredirect will be redirected to https://review.docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/clear-host?branch=qinezh%2Fredirect&view=powershell-7
+ https://review.docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/get-verb?branch=qinezh%2Fredirect will be redirected to https://review.docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/get-verb?branch=qinezh%2Fredirect&view=powershell-5.1

while these two links are not working in live site:

+ https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/clear-host
+ https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/get-verb
THe same command that works in the console does not work when used in the profile.ps1

---
#### Document Details

⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*

* ID: 8794a7a9-ae86-bbde-626f-da91b0d1b491
* Version Independent ID: 18945940-0df3-1027-612f-2adf6291d22d
* Content: [Set-PSReadLineOption (PSReadline)](https://docs.microsoft.com/en-us/powershell/module/psreadline/set-psreadlineoption?view=powershell-5.1)
* Content Source: [reference/5.1/PSReadline/Set-PSReadlineOption.md](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/5.1/PSReadline/Set-PSReadlineOption.md)
* Product: **powershell**
* Technology: **powershell-cmdlets**
* GitHub Login: @SteveL-MSFT
* Microsoft Alias: **slee**
# PR Summary
Updates Information `Format-Hex` in PowerShell 7 and formatting for other versions. 

## PR Context
Fixes #4532 
Fixes [AB#1662338](https://dev.azure.com/mseng/677da0fb-b067-4f77-b89b-f32c12bb8617/_workitems/edit/1662338)

Select the type(s) of documents being changed.

**Cmdlet reference & about_ topics**
- [x] Version 7.x preview content
- [x] Version 7.0 content
- [x] Version 6 content
- [x] Version 5.1 content

**Conceptual articles**
- [ ] Fundamental conceptual articles
- [ ] Script sample articles
- [ ] DSC articles
- [ ] Gallery articles
- [ ] JEA articles
- [ ] WMF articles
- [ ] SDK articles

## PR Checklist

- [x] I have read the [contributors guide](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/CONTRIBUTING.md) and followed the style and process guidelines
- [x] PR has a meaningful title
- [x] PR is targeted at the _staging_ branch
- [x] All relevant versions updated
- [x] Includes content related to issues and PRs - see [Closing issues using keywords](https://help.github.com/en/articles/closing-issues-using-keywords).
- [x] This PR is ready to merge and is not **Work in Progress**
  - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the
    title and remove the prefix when the PR is ready.

<!--
Use this template to report issues with documentation. This can include typos, technical and factual
errors, grammar, spelling, formatting, presentation, etc.
Be sure to change the issue title. Titles should be brief and meaningful.
-->
# Documentation Issue
Current [article on Portable Modules](https://docs.microsoft.com/en-us/powershell/scripting/learn/writing-portable-modules?view=powershell-7) does not mention how to provide the help section for the custom portable modules.


## Context of the issue

- URL to the article (Docs or GitHub URL): https://docs.microsoft.com/en-us/powershell/scripting/learn/writing-portable-modules?view=powershell-7
- Issue affects the following content (check all that apply):

  **Cmdlet reference & about_ topics**
  - [X] Version 7.x preview content
  - [X] Version 7.0 content
  - [X] Version 6 content
  - [X] Version 5.1 content

## Detailed description of the issue
In the old days we were encouraged to document scripts/modules [using comments based help](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_comment_based_help?view=powershell-7). In the new way f binary modules we can't use same method since C# comments use different structure. Can we please document how to provide documentations for binary modules?
Under the heading "Place role capabilities in a module" there is an example. This example creates a module and a module manifest. The manifest includes a RootModule "ContosoJEAFunctions.psm1". What is the purpose of this? Can a PSM1 file ADD additional functions to a JEA session? If the .PSRC file defines the role, what value does the root module add? 
It would be useful to see this explained on this otherwise awesome page!

---
#### Document Details

⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*

* ID: a177616c-e5fe-2cce-5813-f2ce4f0150db
* Version Independent ID: 00c84eaa-e272-aea5-22cb-61c6978155c5
* Content: [JEA Role Capabilities - PowerShell](https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/jea/role-capabilities?view=powershell-7#feedback)
* Content Source: [reference/docs-conceptual/learn/remoting/jea/role-capabilities.md](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/docs-conceptual/learn/remoting/jea/role-capabilities.md)
* Product: **powershell**
* Technology: **powershell-conceptual**
* GitHub Login: @joeyaiello
* Microsoft Alias: **jaiello**
# PR Summary
<!-- Summarize your changes and list related issues here -->

## PR Context
<!--
There is a numbered folder for each version of the PowerShell cmdlet content. Changes to cmdlet
reference should be made to all versions where applicable. The /docs-conceptual folder tree does
not have version folders.
-->

Select the type(s) of documents being changed.

**Cmdlet reference & about_ topics**
- [x] Version 7 content
- [ ] Version 6 content
- [ ] Version 5.1 content

**Conceptual articles**
- [ ] Fundamental conceptual articles
- [ ] Script sample articles
- [ ] DSC articles
- [ ] Gallery articles
- [ ] JEA articles
- [ ] WMF articles
- [ ] SDK articles

## PR Checklist

- [x] I have read the [contributors guide](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/CONTRIBUTING.md) and followed the style and process guidelines
- [x] PR has a meaningful title
- [x] PR is targeted at the _staging_ branch
- [x] All relevant versions updated
- [ ] Includes content related to issues and PRs - see [Closing issues using keywords](https://help.github.com/en/articles/closing-issues-using-keywords).
- [ ] This PR is ready to merge and is not **Work in Progress**
  - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the
    title and remove the prefix when the PR is ready.

Clicking on both information links on home page takes users to 404 pages.

Broken - "What is PowerShell Gallery?"
  404 - https://docs.microsoft.com/en-us/powershell/gallery/overview

Broken - "Getting started"
  404 - https://docs.microsoft.com/en-us/powershell/gallery/getting-started

---
#### Document Details

⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*

* ID: d4b83cac-48eb-d254-b541-76a77bfc1854
* Version Independent ID: ca0eb566-b8bc-4f87-f8fa-2f9074bef107
* Content: [The PowerShell Gallery - PowerShell](https://docs.microsoft.com/en-us/powershell/scripting/gallery/overview?view=powershell-6)
* Content Source: [reference/docs-conceptual/gallery/overview.md](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/docs-conceptual/gallery/overview.md)
* Product: **powershell**
* Technology: **powershell-conceptual**
* GitHub Login: @joeyaiello
* Microsoft Alias: **jaiello**
One problem I had with this sample is that it requires 32 bit PowerShell (for the ODBC driver), which is fine, but should be in the instructions. Another problem is that it requires an older-format Access DB (2003 format), which isn't called out. A much better sample would be to avoid all of that and make a sample file system provider, which is unnecessary since it already exists, but would be an easier to understand demonstration. The instructions also don't explain that you need to do a new-psdrive command to start the provider and connect it to the MDB file.

With those fixes I can do a 'dir' to see the tables, but I can't dir or CD to a specific table (GetParentPath crashes looking for a '\' that doesn't exist).


---
#### Document Details

⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*

* ID: fc9a9516-b3b0-d759-20d0-791ca4f88b40
* Version Independent ID: 381b4413-8c02-47cf-f390-b51319c49793
* Content: [AccessDbProviderSample05 Code Sample - PowerShell](https://docs.microsoft.com/en-us/powershell/scripting/developer/prog-guide/accessdbprovidersample05-code-sample?view=powershell-6#feedback)
* Content Source: [reference/docs-conceptual/developer/prog-guide/accessdbprovidersample05-code-sample.md](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/docs-conceptual/developer/prog-guide/accessdbprovidersample05-code-sample.md)
* Product: **powershell**
* Technology: **powershell-conceptual**
* GitHub Login: @joeyaiello
* Microsoft Alias: **jaiello**
The section "[Built-in resources](https://docs.microsoft.com/en-us/powershell/scripting/dsc/resources/resources?view=powershell-6#built-in-resources)" states:

> In addition to community resources, there are built-in resources for Windows, resources for Linux, and resources for cross-node dependency.

As a technical person trying to understand the DSC big picture I have the following questions after reading the above statement:

1. What are those "_community resources_"? They are mentioned here casually without linking somewhere. Is there a well-known set of community resources? Or is this rather a generic term referring to any resource that might have been created by a third party?
2. "_there are **built-in** resources for Windows, resources for Linux, and resources for cross-node dependency_" - what is "built-in" and what is "not built-in"? Does the term "built-in" also refer to Linux? In the sub-heading of the listed resources it says "Linux resources", "built-in" is missing. In the resource reference left navigation node it says "Linux built-in resources" instead. This should be made consistent. Why am I harping on this? Because "built-in" for me means: I don't have to do anything. "Not built-in" means: I have to install something. (Is this even right? What exactly is built into what?)
2. How does the GitHub repository [DscResources](https://github.com/PowerShell/DscResources) fit into the picture? The repo readme states that this is a list of resources from Microsoft. Is it equivalent to the "built-in" resources? Is this the "community resources"? Is it a different set of resources? And if yes, do I have to differentiate between the ["non-x"-resources](https://github.com/PowerShell/DscResources/tree/master/DscResources) and the ["x"-resources](https://github.com/PowerShell/DscResources/tree/master/xDscResources) (those were kind of beta if I remember correctly)?
3. Looking also at [Azure Automation State Configuration (DSC)](https://docs.microsoft.com/en-us/azure/automation/automation-dsc-overview) I wonder which resources are available there in Azure. Is it the "built-in" ones? The GitHub repo ones? ...? Since the topics are somewhat connected I wished there was a hint in the right direction here.
4. And a bit fringy but also connected: what's the deal with the [Office365DSC](https://github.com/microsoft/Office365DSC) resource? Is there a connection to the aforementioned topics or is this a project completely separated from it all?

My goal is to
- learn about the available resources for DSC
- know which DSC resources are from Microsoft and which ones are not
- learn about non-MS resources from third parties or the community (if there are known places)
- know which resources I can expect to work in Azure with Azure Automation State Configuration (DSC)

Clarifying the above questions would help a lot.

---
#### Document Details

⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*

* ID: e8a198a3-6fcd-624e-2fc4-deb7e1dcb3e6
* Version Independent ID: d3515939-e925-2b6b-b31f-c212440f7d47
* Content: [DSC Resources - PowerShell](https://docs.microsoft.com/en-us/powershell/scripting/dsc/resources/resources?view=powershell-6)
* Content Source: [reference/docs-conceptual/dsc/resources/resources.md](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/docs-conceptual/dsc/resources/resources.md)
* Product: **powershell**
* Technology: **powershell-conceptual**
* GitHub Login: @joeyaiello
* Microsoft Alias: **jaiello**
Only contains only biolerplate headings

---
#### Document Details

⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*

* ID: 36cc197e-962f-5a4c-eb59-548963b9030f
* Version Independent ID: 93cceb4c-c80a-b1ac-59a1-0c71ecfc47a6
* Content: [Defining Common Configuration Features - PowerShell](https://docs.microsoft.com/en-us/powershell/scripting/developer/format/defining-common-configuration-features?view=powershell-6#feedback)
* Content Source: [reference/docs-conceptual/developer/format/defining-common-configuration-features.md](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/docs-conceptual/developer/format/defining-common-configuration-features.md)
* Product: **powershell**
* Technology: **powershell-conceptual**
* GitHub Login: @joeyaiello
* Microsoft Alias: **jaiello**