I have implemented the, I hope final, requirements as requested in your pull request #4268 for publishing the package to MELPA. Could you please create another pull request for publishing to MELPA? I am happy to apply any further updates to meet any further requirements. Also I am happy to create the pull request but I need the rights to do that.

I am also willing to fork this repository and create the pull request for publishing, but the MELPA contributing guidelines state that they only publish original repositories of the authors of the packages (with very few exceptions).

I hope you find time to reply to my request. Otherwise I hope you are okay with it if I try to publish a fork of this repository because your package is awesome!
I am try to install org-wiki by method 1(bootstrap installer). I got following error: 
https://melpa.org/packages/async-20181224.454.tar: Not found
I am using org files to keep notes with
https://github.com/abo-abo/plain-org-wiki/blob/master/plain-org-wiki.el
As time goes by, the file is getting bigger and bigger, which bring a lot of duplication, also makes auto save and backup files big and cause a lot more extra disk io, not good for the hard drive. :-)

So I am thinking about a purely simple tag base system:
1. a tag datafile: (tag . value), tag is a string without blank characters, value is a numeric value, eg. ((linux . 10) (debian . 2) (emacs . 3))
2. a notes folder: note file name is the joined string of tag values sort in ascending order, eg. a note with both linux and debian tag should be named 2-10, just plain org files without the .org extension

The search operation is simple too:
1. a search tag function: search tag datafile with keywords separated by space to find all the matched values, each single tag uses fuzzy matching, eg. search for "dbian linx" will retrun files match the glob pattern `*2*10*` , but the file name list is converted to tag names like "1. debian linux 2. debian emacs linux", you can select the file to open with number, or you can goto 2.
2. open them all in a temp buffer with all files inserted using https://github.com/whacked/transclusion-minor-mode , the nice thing is you can view all of them in one buffer, and maybe cut and paste from one file to another

The tag manipulation is very simple:
1. Delete a tag: remove the tag from the datafile, replace the tag value from all notes files names, move file name the same as tag value to trash and warn the user. save the tag value to a file named available-tag-values.
2. Add a new tag: search the tag datafile if no match, create a new tag value and associate to the tag name, the value in available-tag-values will used first.
3. Add a tag to the current note: rename it to a name include the tag value
4. rename a tag: just rename it in the tag datafile.

This will break big notes files into smaller ones and does not affect the viewing thanks to org translusion. However, I only have a very limited knowledge of emacs. I am looking forward to hear your opinion and on how to bring the feature to this repo.
Thank you!

Overview section:
- Remove the empty last table row

Features section:
- Removed duplicate M-x.
- Moved both the key binding and command to the second line.
Github still shows the comment and key binding/command on a
single line, but it's easier to read in the readme.org file,
when M-x is on the same line as the command.

Demos section:
- Added verbatim emphasis (equal signs) around M-x commands.

Screenshots section:
- Update renamed command (dash to slash):
=M-x org-wiki-search-pattern= -> =M-x org-wiki/search-pattern=
- Missing `s` after `page`
6. =M-x org-wiki-search-pattern= Search for all wiki page that contains
   a pattern. (string or regex pattern).
- Missing `t` in `patern` in: `=M-x org-wiki/search-patern - System.Windows=

Workflow section:
- Added verbatim emphasis around M-x commands and a key binding.

Configuration section:
- Added verbatim emphasis around the single and double backslashes
(double backslashes were not visible on github).

Open org-wiki pages in read-only section:
- Added verbatim emphasis around a key binding.

Start the wiki section:
- Added verbatim emphasis around M-x command.

Command Summary section:
- Reduced double empty table rows to a single row between the sections:
  - Navigation and Close Command
  - Alias Command and Backup Command
- And removed the two empty table rows at the end of the Misc section.

M-x org-wiki-insert-link section:
- Added verbatim emphasis around M-x command.

M-x org-wiki-header section:
- Added missing closing verbatim emphasis sign.

M-x org-wiki-asset-create section:
- Changed (backticks/grave accent characters) around commands to verbatim emphasis.

M-x org-wiki-asset-download-insert1 section:
- Added verbatim emphasis around M-x command and a key binding.
- Fixed typo: happesn -> happens

M-x org-wiki-asset-download-insert2 section:
- Added verbatim emphasis around M-x command.
- Changed the command ending in a 1 to end in a 2:
M-x org-wiki-asset-download-insert1 -> M-x org-wiki-asset-download-insert2
Since it's in the org-wiki-asset-download-insert2 section the command probably
should use the command ending in a `2`.

Modify it section:
- Added verbatim emphasis around M-x commands.
Backlinks known from wikis available in org-wiki?
The different link types could be represented by different colors in emacs buffer, if set somehow in .emacs

The idea has its origin in TheBrain or org-brain, but having a similar feature directly in org-wiki would open up new possibilities. Having at least those 3 new link categories helps in structuring your navigation travels within your notes, so you could always walk into more general direction, just by following parent links, only, and the opposite in child direction, friend links would be kind of like the normal links which org-wiki has now, where its hierarchical location is somewhat free to current concept.
Say my index page links to page A and page A links to page B and I follow the links in this order, is there a easy shortcut to get to the previous wiki page, like from B back to A and from A back to the index?

Like pushing and popping visited links on and off a stack.

Thanks!
I would love to be able to create notes, directly from `org-wiki-helm`. In this way, the user would first use `org-wiki-helm` to search for the note. Then failing that, he would hit [RET] to automatically create the file.

This would be similar to how org-velocity and deft work... except that it relies on helm, which of course makes it all that much better! :)
* MX-Linux 17
* Emacs 26.1.50 (graphical)
* [init.el](https://gist.github.com/mrbig033/63fd7f4f51b6a8ae379abae74c52aff2)
* [complete environment](https://gist.github.com/mrbig033/63fd7f4f51b6a8ae379abae74c52aff2)
* org-wiki configuration:
```
(require 'org-wiki)
(setq org-wiki-location-list
      '(
	"/~/orgwiki"  ;; First wiki (root directory) is the default.
	))
;; Initialize first org-wiki-directory or default org-wiki
(setq org-wiki-location (car org-wiki-location-list))

```
I have a wiki that I created using orgmode. I tried using org-wiki with it, but it cannot see the subdirectories, and only lists the files that are in the same dir as index.org. I also tried creating a new wiki, and put some files in there, and org-wiki could not see them. Does org-wiki support files in different places, or I should just put everything in the same folder?
org-wiki/replace-extension not work correctly when filename include '.'

and, browse-url on file should add "file:" as prefix.