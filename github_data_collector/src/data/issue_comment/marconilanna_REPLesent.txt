Looks like I never actually submitted these upstream, my apologies!

- Resolves #11 
- ~Moving `REPLesent` class into a `replesent` package~ Forgot why this was done, and it broke tests, so removed it
- ~`padNewLine` adds an empty newline after rendering a slide, then moves the cursor back up, so `n<Enter>` doesn't cause the slides to jump due to scrolling~ Split to #16 
- ~Resolving conflict against top-level `io` packages vs `scala.io`~ Split to #16 
I would like to use REPLesent in `sbt console`. Is this possible? A slew of errors pop up if I try to load `REPLesent.scala`.

The readme says "We recommend you install and use the full Scala distribution (the scala command) instead of just the sbt console.", so it seems like it is possible.

I would like to run some spark snippets in my slides and sbt console works perfectly for this. The full scala distribution raises quite a few dependency conflicts.
I have already implemented an export for the whole slide deck in my [fork](https://github.com/max-leuthaeuser/REPLesent) (very hackish - hence, no pull request; needs to be done right and does not support slides with builds currently). It requires ```ansifilter``` to convert the rendered slides (with all color codes etc.) to HTML. Maybe something similar could be done for exporting to PDF, LaTex, or whatever for online publishing.
I have already implemented line numbering for embedded code in my [fork](https://github.com/max-leuthaeuser/REPLesent) (very hackish - hence, no pull request; needs to be done right).
Hidden code blocks would be a nice addition.
Sometimes you need to execute some code but that code should not be shown to the audience for the sake of simplicity (e.g., some import statements). Nevertheless, it should still be executed.
Instead of creating this alias 
`alias REPLesent='scala -Dscala.color -language:_ -nowarn -i REPLesent.scala'`
Now you can add something like this to your .bashrc/.zshrc/etc:
`function REPLesent
{
    path/to/REPLesent/replesent.sh $1
}`
When you pass it an argument with a presentation file it will load it without having to write any code in the scala REPL.
