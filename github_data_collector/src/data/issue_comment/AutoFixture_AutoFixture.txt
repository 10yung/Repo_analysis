Today I stumbled about a bug and I am a little confused why it is happening. 

The test code is around some bad legacy code which sadly cannot be changed:

```
 public interface IValue
  {
  }

  public interface IItem
  {
    IValue Value { get; }
  }

  public interface ISpecialItem : IItem
  {
    new IValue Value { get; set; }
  }

  public interface IFoo
  {
    IList<ISpecialItem> Items { get; }
  }
```
So basically there is an interface IItem having a readonly property and for some reason the writer of this legacy code wanted to have a setter for an inherited interface ISpecialItem. Therefore the new keyword.
In another interface IFoo is a property with a list of these special items as data type.

```
    [Fact]
    private void Test()
    {
      var customization = new AutoNSubstituteCustomization()
      {
        ConfigureMembers = true,
      };

      var fixture = new Fixture();
      fixture.Customize(customization);

      var foo = fixture.Create<IFoo>();

      // Reading the property once fixes it
      // var items = foo.Items; 

      foo.Items.ReturnsNull();
    }
```
In a test the interface IFoo is created with AutoFixture but someone wanted to test a special case where the property returns null.
For some strange reason an exception is thrown.

> Can not return value of type IList`1 for ISpecialItem.set_Value (expected type Void).

Investigating the exception further I found that AutoFixture is trying to set the Value property of the special items to return null by calling NSubstitute. And NSubstitute throws an exception not allowing Returns statements on properties having a setter.

The fixture creates the IFoo proxy with an Items property returning 3 ISpecialItem proxies due to the ConfigureMembers being true in the customization.

By calling the ReturnsNull extension method I override the proxies return value of the Items property, but I dont understand why this results in a call to ISpecialItem.Value.ReturnsNull() ?

With my limited understanding of AutoNSubstitute it gets even stranger for me. If I read the property at some point before calling the Returns statement everything works fine.

If needed I can attach a sample solution.

Thx for any help
  Gerald
The Moq reference version 4.7.0 contains a reference to Castle.Core which again contains a reference to System.ComponentModel.TypeConverter 4.0.1
This version (System.ComponentModel.TypeConverter 4.0.1) is not available on NuGet.org and Visual Studio emits a warning.
"Castle.Core 4.0.0 depends on System.ComponentModel.TypeConverter (>= 4.0.1) but System.ComponentModel.TypeConverter 4.0.1 was not found. An approximate best match of System.ComponentModel.TypeConverter 4.1.0 was resolved."

The first version of Moq that references a newer version of Castle.Core with this issue fixed is 4.7.49
has upgrading the minimum NSubstitute version to v4 for version 5.0 been considered?

It strikes me that we are two clear versions behind, and I wondered what hte rationale for this is?

I'm happy to do the upgrade if it is desired?

Fixes #1155. Also could fix #996, we want to drop support for FakeItEasy 1.x and retain it for 2+. Alternatively, more versions could be droppedâ€¦
Fixes #1155.
I was preparing to test AutoFixture.AutoFakeItEasy with an early FakeItEasy 6.0.0 candidate, and found that many of the unit tests broke with output like

```
X AutoFixture.AutoFakeItEasy.UnitTest.FixtureIntegrationTest.WithConfigureMembers_GetOnlyPropertiesReturnValueFromFixture [6ms]
  Error Message:
   System.MissingMethodException : Method SetReturnValue cannot be found on FakeItEasy.Creation.CastleDynamicProxy.CastleInvocationCallAdapter
  Stack Trace:
     at AutoFixture.AutoFakeItEasy.FakeObjectCall.InvokeWrappedMethod(String methodName, Object[] parameters) in D:\Sandbox\AutoFixture\src\AutoFakeItEasy\FakeObjectCall.cs:line 60
   at AutoFixture.AutoFakeItEasy.MethodCallResult.ApplyToCall(FakeObjectCall fakeObjectCall) in D:\Sandbox\AutoFixture\src\AutoFakeItEasy\MethodCallResult.cs:line 18
   at FakeItEasy.Core.FakeManager.ApplyBestRule(IInterceptedFakeObjectCall fakeObjectCall) in C:\projects\fakeiteasy\src\FakeItEasy\Core\FakeManager.cs:line 268
   at FakeItEasy.Core.FakeManager.FakeItEasy.Core.IFakeCallProcessor.Process(InterceptedFakeObjectCall fakeObjectCall) in C:\projects\fakeiteasy\src\FakeItEasy\Core\FakeManager.cs:line 167
   at Castle.DynamicProxy.AbstractInvocation.Proceed()
   at Castle.Proxies.ObjectProxy_19.get_GetOnlyProperty()
   at AutoFixture.AutoFakeItEasy.UnitTest.FixtureIntegrationTest.WithConfigureMembers_GetOnlyPropertiesReturnValueFromFixture() in D:\Sandbox\AutoFixture\src\AutoFakeItEasyUnitTest\FixtureIntegrationTest.cs:line 266
```

In FakeItEasy, we'd removed the publicly-visible `SetReturnValue` member on the _internal_ class `CastleInvocationCallAdapter` in the 5.4.1 release as part of #1697, leaving only the explicitly-implemented interface member.

I propose, partly based on my own reasoning and on comments @thomaslevesque made in  FakeItEasy/FakeItEasy#1736, that we work around the problem in `FakedObjectCall`. This would mean that recent AutoFixture.AutoFakeItEasys will work with all FakeItEasys <= 5.4.0 and the next AutoFakeItEasy released would work with all FakeItEasys.

Specifically, we should look methods and properties on interfaces implemented by the type of the object passed to `FakedObjectCall` in addition to directly on the type. PR forthcoming.
While I totally agree that value types without non-default constructors are almost always mutable value types, there is a corner case when I design a Unit type.

So, maybe we should not must use `SupportMutableValueTypesCustomization` when there are no properties or fields in the struct.
Hi,

I'm trying to use [MockHttp](https://github.com/richardszalay/mockhttp) with AutoFixture's AutoData attribute.

To test the library, I've created a [test repo](https://github.com/Kralizek/MockHttpTests) that contains only two tests:

```csharp
public class Tests
{
    [Test, CustomAutoData]
    public async Task Basic_test(Uri testUri, string result)
    {
        var handler = new MockHttpMessageHandler();

        var sut = new TestService(handler.ToHttpClient());            

        handler.When(HttpMethod.Get, testUri.ToString()).Respond(HttpStatusCode.OK, new StringContent(result));

        var actual = await sut.GetString(testUri);

        Assert.That(actual, Is.EqualTo(result));
    }

    [Test, CustomAutoData]
    public async Task Test_with_custom_autodata([Frozen] MockHttpMessageHandler handler, TestService sut, Uri testUri, string result)
    {
        handler.When(HttpMethod.Get, testUri.ToString()).Respond(HttpStatusCode.OK, new StringContent(result));

        var actual = await sut.GetString(testUri);

        Assert.That(actual, Is.EqualTo(result));
    }
}

public static IFixture CreateFixture()
{
    var fixture = new Fixture();

    fixture.Customize<HttpClient>(o => o.FromFactory((MockHttpMessageHandler handler) => handler.ToHttpClient()));

    return fixture;
}
```

This setup is not working as the second test fails due to a CancellationToken being on "ThrowIfCancellationRequested".

Changing the customizations as follow makes the second test working. Unfortunately this is not optimal because it makes the setup too dependent on the SUT constructor.

```csharp
public static IFixture CreateFixture()
{
    var fixture = new Fixture();

    //fixture.Customize<HttpClient>(o => o.FromFactory((MockHttpMessageHandler handler) => handler.ToHttpClient()));

    fixture.Customize<TestService>(o => o.FromFactory((MockHttpMessageHandler handler) =>
    {
        var http = handler.ToHttpClient();

        return new TestService(http);
    }));

    return fixture;
}
```

This issue is mostly about a clarification about the "chain".

I was expecting:
1. TestService (default setup) to require a HttpClient
2. HttpClient use the provided customization based on `FromFactory` that requires a MockHttpMessageHandler
3. MockHttpMessageHandler to be newed up using the default setup

Thanks for your help!

I opened an issue on MockHttp here: https://github.com/richardszalay/mockhttp/issues/73
Hi,

If I try to use something like:

[Range(1, Double.PositiveInfinity, ErrorMessage = "You must provide a budget value for CADS")]

It throws an exception :(
I want to create the base type data for the specified scope. What should I do?
For example, the following code:
``` csharp
//no object
int a=fixture.create<int>(min:5,max:20);
string b=fixture.create<string>(minLength:5,maxLength:20);


//object 
Feedback_In tt = fixture.Build<Feedback_In>()
                .With(t => t.PlatformName, minLength:5,maxLength:20)
                .Create();


```


I didn't find any APIs. If the library doesn't provide it, I need to write my own extension method. Can you tell me what interface or object to write based on?


## package info
AutoFixture.AutoNSubstitute 4.11
AutoFixture.SeedExtensions 4.11

## env info
.net core 3.0
UT: xunit


Another question: How do you ` just ignore one of the property` when creating object data? Other property are automatically generated by AutoFixture
