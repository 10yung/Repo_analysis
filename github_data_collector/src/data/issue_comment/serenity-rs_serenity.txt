Currently, serenity supports AttachmentType::File (corresponding to Part::reader, but limited to std::fs::File), AttachmentType::Bytes (corresponding to Part::bytes), and AttachmentType::Path (corresponding to Part::file). An AttachmentType::Reader could be added (unclear how this would affect existing code unless a trait object is used).
I tried using serenity with the web flow login, and I have facing these problems:
- A new `reqwest::Client` has to be created for each session, which is not optimal for performance
- The authorization and token endpoints are not available via this library.
So I was trying to compile [Cosmic](https://github.com/Sreyas-Sreelal/Cosmic) on my AWS Ubuntu instance, and met a few problems. I published them with their solution [here, in Cosmic's bug tracker (#6)](https://github.com/Sreyas-Sreelal/Cosmic/issues/6). 

Here's a copy of the above issue to make it google-discoverable when searching for Serenity:

##### TL;DR

```
sudo apt update
sudo apt install -y pkg-config libssl-dev autoconf libtool libopus-dev
```

---

##### Story

I was getting the following error with `openssl-sys`:

```
ubuntu@ip-x-x-x-x:~/cosmic$ cargo build --release
   Compiling openssl-sys v0.9.53
error: failed to run custom build command for `openssl-sys v0.9.53`

Caused by:
  process didn't exit successfully: `/home/ubuntu/cosmic/target/release/build/openssl-sys-a58496d500b0ba7f/build-script-main` (exit code: 101)
--- stdout
cargo:rustc-cfg=const_fn
cargo:rerun-if-env-changed=X86_64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR
X86_64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR unset
cargo:rerun-if-env-changed=OPENSSL_LIB_DIR
OPENSSL_LIB_DIR unset
cargo:rerun-if-env-changed=X86_64_UNKNOWN_LINUX_GNU_OPENSSL_INCLUDE_DIR
X86_64_UNKNOWN_LINUX_GNU_OPENSSL_INCLUDE_DIR unset
cargo:rerun-if-env-changed=OPENSSL_INCLUDE_DIR
OPENSSL_INCLUDE_DIR unset
cargo:rerun-if-env-changed=X86_64_UNKNOWN_LINUX_GNU_OPENSSL_DIR
X86_64_UNKNOWN_LINUX_GNU_OPENSSL_DIR unset
cargo:rerun-if-env-changed=OPENSSL_DIR
OPENSSL_DIR unset
run pkg_config fail: "Failed to run `\"pkg-config\" \"--libs\" \"--cflags\" \"openssl\"`: 
No such file or directory (os error 2)"

--- stderr
thread 'main' panicked at '

Could not find directory of OpenSSL installation, and this `-sys` crate cannot
proceed without this knowledge. If OpenSSL is installed and this crate had
trouble finding it,  you can set the `OPENSSL_DIR` environment variable for the
compilation process.

Make sure you also have the development packages of openssl installed.
For example, `libssl-dev` on Ubuntu or `openssl-devel` on Fedora.

If you're in a situation where you think the directory *should* be found
automatically, please open a bug at https://github.com/sfackler/rust-openssl
and include information about your system as well as this message.

$HOST = x86_64-unknown-linux-gnu
$TARGET = x86_64-unknown-linux-gnu
openssl-sys = 0.9.53


It looks like you're compiling on Linux and also targeting Linux. Currently this
requires the `pkg-config` utility to find OpenSSL but unfortunately `pkg-config`
could not be found. If you have OpenSSL installed you can likely fix this by
installing `pkg-config`.

', /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-sys-0.9.53/build/find_normal.rs:150:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

So, as suggested by openssl-sys's error message, I did the following:

```
sudo apt update
sudo apt install -y libssl-dev pkg-config
```
---

Then I got the following error with `audiopus_sys`:

```
ubuntu@ip-172-31-38-14:~/cosmic$ cargo build --release
   Compiling audiopus_sys v0.1.5
error: failed to run custom build command for `audiopus_sys v0.1.5`

Caused by:
  process didn't exit successfully: `/home/ubuntu/cosmic/target/release/build/audiopus_sys-d46ad8915490dd23/build-script-build` (exit code: 101)
--- stdout
cargo:info=No feature or environment variable found, linking by default.
cargo:info=`pkg_config` could not find `Opus`.
cargo:info=Opus source path: "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/audiopus_sys-0.1.5/opus".
cargo:info=Opus will be built as dylib-library.
Updating build configuration files, please wait....

--- stderr
autogen.sh: 14: autogen.sh: autoreconf: not found
thread 'main' panicked at 'Failed to autogen Opus.', /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/audiopus_sys-0.1.5/build.rs:81:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

So I installed autoconf:

```
sudo apt install -y autoconf
```

But then I got:

```
ubuntu@ip-172-31-38-14:~/cosmic$ cargo build --release
   Compiling audiopus_sys v0.1.5
error: failed to run custom build command for `audiopus_sys v0.1.5`

Caused by:
  process didn't exit successfully: `/home/ubuntu/cosmic/target/release/build/audiopus_sys-d46ad8915490dd23/build-script-build` (exit code: 101)
--- stdout
cargo:info=No feature or environment variable found, linking by default.
cargo:info=`pkg_config` could not find `Opus`.
cargo:info=Opus source path: "/home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/audiopus_sys-0.1.5/opus".
cargo:info=Opus will be built as dylib-library.
Updating build configuration files, please wait....

--- stderr
configure.ac:38: warning: macro 'AM_PROG_LIBTOOL' not found in library
configure.ac:38: error: possibly undefined macro: AM_PROG_LIBTOOL
      If this token and others are legitimate, please use m4_pattern_allow.
      See the Autoconf documentation.
autoreconf: /usr/bin/autoconf failed with exit status: 1
thread 'main' panicked at 'Failed to autogen Opus.', /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/audiopus_sys-0.1.5/build.rs:81:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

So I installed libtool:

```
sudo apt install -y libtool
```

---

and then it built.

---

Edit: Added `libopus-dev` to TL;DR.
I'm thinking about writing a Serenity-based bot, and I was wondering what would be the best way to conduct automated testing of such a bot. As far as I can tell, there's not a way to change the URL that Serenity connects to, which means I would need to either intercept the Discord connection by mucking with `/etc/hosts`, or set up a Discord server dedicated to testing this bot. What would you recommend?
1. Create a message and send it to a channel. The message should have an embed that uses an attachment for its image.
2. Get the message by its ID (`get_message`).
3. Take the `Embed` from the `Message` (`message.embeds.remove(0)`).
4. Make a `CreateEmbed` from the `Embed` (`CreateEmbed::from(embed)`).
5. Add a field to the embed.
6. Edit the message (`edit_message`).
    ```rust
    channel.edit_message(http, message_id, |msg| msg.embed(|e| { *e = embed; e } ))?;
    ```
7. Notice the output looks something like ![this][image].

There was relevant discussion [on Discord][disc] prior to making this issue (see link).

Actual code:
  - [Making the message][making]
  - [Editing the embed][editing]

Serenity version: 0.7.4 from crates.io

[image]: https://cdn.discordapp.com/attachments/381912587505500160/658717349788123180/unknown.png
[disc]: https://discordapp.com/channels/381880193251409931/381912587505500160/658717335456317490
[making]: https://git.sr.ht/~jkcclemens/lalaworld/tree/temp/src/route/giveaways.rs#L399
[editing]: https://git.sr.ht/~jkcclemens/lalaworld/tree/temp/src/task.rs#L160
With the arrival of Rust 1.40, we can now write non exhaustive enums/structs with the built-in `#[non_exhaustive]` attribute.
This PR replaces all occurences of the `__Nonexhaustive` hack previously in place with the new attribute.

I opened this so we can discuss whether this change is appropriate or not for Serenity, as this may force users to use Rust 1.40. However, if merged to `current`, it will only affect Serenity 0.8 and later, so I personally think this is fine.
This featureâ€™s goal is to make it easier and shorter for programmers to parse command arguments.

Currently, one has to write quite a lot of boilerplate code to parse arguments in every command. This can be quite redundant for commands that take similar parameters (for example, a ban and a kick command might take a `target` Member and an optional `reason`).
However, we can make use of procedural macros to generate the parsing code for the user, and reject bad command invocations in the process.

Here is a TODO list of what I think should be done for this feature:
- [ ] Create a `CommandArgument` trait, which represent a type that can be created from command argument(s)
- [ ] Write the macro itself
- [ ] Provide a blanket implementation of this trait for `FromStr`
- [ ] Provide implementation of the trait for every model object that could be created from a command arg (such as `Member`, `Channel`...)
- [ ] Handle `Option`al arguments
- [ ] Handle Greedy arguments and pass it as a Vec
- [ ] Provide rest of arguments somehow
Resolves #296.

I'm trying to implement things in a way it breaks as few code as possible. Every builder like `builder::EditGuild` will have an additional method, `reason`, which allows to set (or unset) the reason for that request. However, it will still break the code which uses the Http struct directly.

Current state of implementation:
- [x] GUILD_UPDATE
- [x] CHANNEL_CREATE
- [x] CHANNEL_UPDATE
- [x] CHANNEL_DELETE
- [x] CHANNEL_OVERWRITE_CREATE
- [ ] ~CHANNEL_OVERWRITE_UPDATE~ (not implemented in Serenity)
- [x] CHANNEL_OVERWRITE_DELETE
- [x] MEMBER_KICK
- [x] MEMBER_PRUNE
- [x] MEMBER_BAN_ADD
- [x] MEMBER_BAN_REMOVE
- [ ] MEMBER_UPDATE
- [ ] MEMBER_ROLE_UPDATE
- [ ] MEMBER_MOVE
- [ ] MEMBER_DISCONNECT
- [ ] ROLE_CREATE
- [ ] ROLE_UPDATE
- [ ] ROLE_DELETE
- [ ] INVITE_CREATE
- [ ] INVITE_UPDATE
- [ ] INVITE_DELETE
- [ ] WEBHOOK_CREATE
- [ ] WEBHOOK_UPDATE
- [ ] WEBHOOK_DELETE
- [ ] EMOJI_CREATE
- [ ] EMOJI_UPDATE
- [ ] EMOJI_DELETE
- [ ] MESSAGE_DELETE
- [ ] MESSAGE_BULK_DELETE
- [ ] MESSAGE_PIN
- [ ] MESSAGE_UNPIN
- [ ] INTEGRATION_CREATE
- [ ] INTEGRATION_UPDATE
- [ ] INTEGRATION_DELETE
Marked as a draft as I have to add error handling and correct recoonection/resuming logic!
```rust
$ cargo -V
cargo 1.38.0 (23ef9a4ef 2019-08-20)

$ cargo fmt --version
rustfmt 1.4.4-stable (0462008 2019-08-06)

$ cargo +nightly fmt --version
rustfmt 1.4.9-nightly (33e3667 2019-10-07)
```