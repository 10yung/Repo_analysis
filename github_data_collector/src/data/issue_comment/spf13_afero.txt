### Overview
This PR intent it to bring `afero.TempFile` functionality to one in [ioutil.TempFile](https://golang.org/src/io/ioutil/tempfile.go?s=1419:1477#L40).



I created two interfaces to facilitate file systems optionally supporting the Symlink and Readlink operations from the os implementation.

```
type Linker interface {
	SymlinkIfPossible(oldname, newname string) error
}
type LinkReader interface {
	ReadlinkIfPossible(name string) (string, error)
}
```

I opted to write them this way to preserve consistency with the Lstater interface created by @bep 

The actual Symlink and Readlink are only implemented in the `OsFs`, with proxy support in:
 - BasePathFs,
 - CopyOnWriteFs, and
 - ReadOnlyFs

for consistency with the other two I implemented the Linker interface on `ReadOnlyFs` with it just returning a not supported error. I would appreciate feedback if this is the correct pattern, or if I should instead remove the method?

The motivation for this change was to allow wrapping an existing use of afero in a project with the [go-billy](https://github.com/src-d/go-billy) interface to allow a git integration to support a client request.
The implementation is in the process of being tested in our logic, but I wanted to create the pull request and get feedback and make any necessary changes early.
Hello,

   Is a git repo could be used as backend ?

#question
Fixes #225 

### Problem:
MemMapFs is set to initialize with a map data structure and a root path was added to it. The path that was added uses the `os.PathSeparator` as the root path. While UNIX has no problem with this, Windows does as the volume name is not present in `os.PathSeparator`

### Changes:
* MemMapFs `getData()` init is now changed to add a root absolute instead of `FilePathSeparator`
* `normalizePath(path string) string` is changed to return a proper root absolute if the cleaned path results in a root path (`/` or `\\`) and an error
* BasePathFs removes volume name from path when `Name() string` is called to hide real path
* Several tests are changed to implement the changes
Doing `fs.Open("c:\\")` or `afero.Walk` from root on a MemMapFs in a windows system returns the error `open c:\: file does not exist`. During debugging, I found that the `getData()` function in MemMapFs does not support windows root as shown by the TODO in it (https://github.com/spf13/afero/blob/master/memmap.go#L38). 

I would like to fix it in my fork, if it is okay.
Not really a bug but this could lead to security implications if not properly understood by users (this behavior is Windows specific). Perhaps this could be highlighted in documentation (or perhaps it already is and I missed it)?
```
subFolder := "test____..____..____..____..____..____..____..____Windows"
if (strings.Contains(subFolder, "..\\")){
		fmt.Println("Path traversal attack detected")
		return
}

fs := new(afero.OsFs)
fmt.Printf("Subfolder: %s\n", subFolder)
tempFolder := afero.GetTempDir(fs,subFolder)
fmt.Printf("tempFolder: %s\n", tempFolder)

```

```
C:\Users\chris\>Spf13GetTempDirTest.exe
Subfolder: test____..____..____..____..____..____..____..____Windows
tempFolder: C:\Users\chris\AppData\Local\Temp\test\..\..\..\..\..\..\..\Windows\
```
Kind Regards
Chris
New users coming to the project could incorrectly assume that the project is pre-1.0 release and that it hasn't had a release in years if they assumed that the release notes in the README were up-to-date. I say this because I assumed that on my first read.
If you try
```
httpFs := afero.NewHttpFs(<ExistingFS>)
fileserver := http.FileServer(httpFs.Dir("/")))
http.Handle("/", fileserver)
```
you'll find that your fileserver successfully lists the directory, but gives 404 on any file. However, if you do
```
httpFs := afero.NewHttpFs(<ExistingFS>)
fileserver := http.FileServer(httpFs.Dir("/something/")))
http.Handle("/", fileserver)
```
everything works as expected.
Context:

- initially afero.TempFile() takes prefix as last argument and adds a random string to the end. This posed difficulty when trying to add a file extension with randomised filename.
- to avoid this, going forward afero.Tempfile() takes a pattern and replace the last * with the random string. This behavior is same as ioutil.Tempfile()

This PR closes the issue https://github.com/spf13/afero/issues/217

Hello,
Is it possible to execute a file loaded in NewMemMapFs() ? Would be great to execute a file embedded with packr and execute it from memory.
Gr,
Peter