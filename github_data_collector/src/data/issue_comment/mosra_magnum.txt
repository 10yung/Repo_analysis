This PR should improve the clarity of the documentation about the use of Magnum as a Cmake subproject.

I tweaked a couple of paragraphs to make it more obvious that the Modules directory is still necessary even when not using a shared installation of Magnum.
As you asked on Gitter, mosra, this is the PR containing the fix to errors when linking with the SceneGraph library on MSYS2's build of Clang.
If there is no `--magnum-dpi-scaling` specified on the command line, dpi-scaling is set to `"default"`

Which according to this code, which is run by every ctor of GlfwApplication:
https://github.com/mosra/magnum/blob/7cfa1709ef66f1e26a0d9fdfbf67dee626326400/src/Magnum/Platform/GlfwApplication.cpp#L91-L108
`_commandLineDpiScalingPolicy` is set here and only here to `GlfwDpiScalingPolicy::Default`, which is just an alias to the platform-dependant default policy.

Crucially `GlfwDpiScalingPolicy::Default` is _not_ `0`
so... when this code comes along:
https://github.com/mosra/magnum/blob/7cfa1709ef66f1e26a0d9fdfbf67dee626326400/src/Magnum/Platform/GlfwApplication.cpp#L137-L150
and checks `if(UnsignedByte(_commandLineDpiScalingPolicy))`
The other 2 cases are not possible!
Hi, I'm attempting to use a static version of OpenAL built through the repo here: https://github.com/kcat/openal-soft

Using a dynamic library build of OpenAL seems to link fine, whereas using the static library seems to cause linker errors. CMake configuration went fine and thus I'm somewhat puzzled as to what's happening.

Log:
```
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\AudioData.cpp.obj : error LNK2019: unresolved external symbol __imp__alBufferData referenced in function "public: class Magnum::Audio::Buffer & __thiscall Magnum::Audio::Buffer::setData(enum Magnum::Audio::BufferFormat,class Corrade::Containers::ArrayView<void const >,int)" (?setData@Buffer@Audio@Magnum@@QAEAAV123@W4BufferFormat@23@V?$ArrayView@$$CBX@Containers@Corrade@@H@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\AudioMgr.cpp.obj : error LNK2019: unresolved external symbol __imp__alGenBuffers referenced in function "public: __thiscall Magnum::Audio::Buffer::Buffer(void)" (??0Buffer@Audio@Magnum@@QAE@XZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\AudioMgr.cpp.obj : error LNK2019: unresolved external symbol __imp__alDeleteBuffers referenced in function "public: __thiscall Magnum::Audio::Buffer::~Buffer(void)" (??1Buffer@Audio@Magnum@@QAE@XZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\Sound.cpp.obj : error LNK2019: unresolved external symbol __imp__alGenSources referenced in function "public: __thiscall Magnum::Audio::Source::Source(void)" (??0Source@Audio@Magnum@@QAE@XZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\Sound.cpp.obj : error LNK2019: unresolved external symbol __imp__alDeleteSources referenced in function "public: __thiscall Magnum::Audio::Source::~Source(void)" (??1Source@Audio@Magnum@@QAE@XZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\Sound.cpp.obj : error LNK2019: unresolved external symbol __imp__alSourcef referenced in function "public: class Magnum::Audio::Source & __thiscall Magnum::Audio::Source::setGain(float)" (?setGain@Source@Audio@Magnum@@QAEAAV123@M@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\Sound.cpp.obj : error LNK2019: unresolved external symbol __imp__alSourcei referenced in function "public: class Magnum::Audio::Source & __thiscall Magnum::Audio::Source::setLooping(bool)" (?setLooping@Source@Audio@Magnum@@QAEAAV123@_N@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Source.cpp.obj) : error LNK2001: unresolved external symbol __imp__alSourcei
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\Sound.cpp.obj : error LNK2019: unresolved external symbol __imp__alGetSourcef referenced in function "public: float __thiscall Magnum::Audio::Source::gain(void)const " (?gain@Source@Audio@Magnum@@QBEMXZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\Sound.cpp.obj : error LNK2019: unresolved external symbol __imp__alGetSourcei referenced in function "public: bool __thiscall Magnum::Audio::Source::isLooping(void)const " (?isLooping@Source@Audio@Magnum@@QBE_NXZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Source.cpp.obj) : error LNK2001: unresolved external symbol __imp__alGetSourcei
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\Sound.cpp.obj : error LNK2019: unresolved external symbol __imp__alSourcePlay referenced in function "public: class Magnum::Audio::Source & __thiscall Magnum::Audio::Source::play(void)" (?play@Source@Audio@Magnum@@QAEAAV123@XZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\Sound.cpp.obj : error LNK2019: unresolved external symbol __imp__alSourceStop referenced in function "public: class Magnum::Audio::Source & __thiscall Magnum::Audio::Source::stop(void)" (?stop@Source@Audio@Magnum@@QAEAAV123@XZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\Sound.cpp.obj : error LNK2019: unresolved external symbol __imp__alSourcePause referenced in function "public: class Magnum::Audio::Source & __thiscall Magnum::Audio::Source::pause(void)" (?pause@Source@Audio@Magnum@@QAEAAV123@XZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Context.cpp.obj) : error LNK2019: unresolved external symbol __imp__alGetString referenced in function "public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > __thiscall Magnum::Audio::Context::vendorString(void)const " (?vendorString@Context@Audio@Magnum@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Context.cpp.obj) : error LNK2019: unresolved external symbol __imp__alcCreateContext referenced in function "public: bool __thiscall Magnum::Audio::Context::tryCreate(class Magnum::Audio::Context::Configuration const &)" (?tryCreate@Context@Audio@Magnum@@QAE_NABVConfiguration@123@@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Context.cpp.obj) : error LNK2019: unresolved external symbol __imp__alcMakeContextCurrent referenced in function "public: bool __thiscall Magnum::Audio::Context::tryCreate(class Magnum::Audio::Context::Configuration const &)" (?tryCreate@Context@Audio@Magnum@@QAE_NABVConfiguration@123@@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Context.cpp.obj) : error LNK2019: unresolved external symbol __imp__alcDestroyContext referenced in function "public: __thiscall Magnum::Audio::Context::~Context(void)" (??1Context@Audio@Magnum@@QAE@XZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Context.cpp.obj) : error LNK2019: unresolved external symbol __imp__alcOpenDevice referenced in function "public: bool __thiscall Magnum::Audio::Context::tryCreate(class Magnum::Audio::Context::Configuration const &)" (?tryCreate@Context@Audio@Magnum@@QAE_NABVConfiguration@123@@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Context.cpp.obj) : error LNK2019: unresolved external symbol __imp__alcCloseDevice referenced in function "public: __thiscall Magnum::Audio::Context::~Context(void)" (??1Context@Audio@Magnum@@QAE@XZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Context.cpp.obj) : error LNK2019: unresolved external symbol __imp__alcGetError referenced in function "public: bool __thiscall Magnum::Audio::Context::tryCreate(class Magnum::Audio::Context::Configuration const &)" (?tryCreate@Context@Audio@Magnum@@QAE_NABVConfiguration@123@@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Context.cpp.obj) : error LNK2019: unresolved external symbol __imp__alcGetString referenced in function "public: static class std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > __cdecl Magnum::Audio::Context::deviceSpecifierStrings(void)" (?deviceSpecifierStrings@Context@Audio@Magnum@@SA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Context.cpp.obj) : error LNK2019: unresolved external symbol __imp__alcGetIntegerv referenced in function "public: bool __thiscall Magnum::Audio::Context::isHrtfEnabled(void)const " (?isHrtfEnabled@Context@Audio@Magnum@@QBE_NXZ)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Source.cpp.obj) : error LNK2019: unresolved external symbol __imp__alSourcePlayv referenced in function "public: static void __cdecl Magnum::Audio::Source::play(class std::initializer_list<class std::reference_wrapper<class Magnum::Audio::Source> >)" (?play@Source@Audio@Magnum@@SAXV?$initializer_list@V?$reference_wrapper@VSource@Audio@Magnum@@@std@@@std@@@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Source.cpp.obj) : error LNK2019: unresolved external symbol __imp__alSourceStopv referenced in function "public: static void __cdecl Magnum::Audio::Source::stop(class std::initializer_list<class std::reference_wrapper<class Magnum::Audio::Source> >)" (?stop@Source@Audio@Magnum@@SAXV?$initializer_list@V?$reference_wrapper@VSource@Audio@Magnum@@@std@@@std@@@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Source.cpp.obj) : error LNK2019: unresolved external symbol __imp__alSourceRewindv referenced in function "public: static void __cdecl Magnum::Audio::Source::rewind(class std::initializer_list<class std::reference_wrapper<class Magnum::Audio::Source> >)" (?rewind@Source@Audio@Magnum@@SAXV?$initializer_list@V?$reference_wrapper@VSource@Audio@Magnum@@@std@@@std@@@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Source.cpp.obj) : error LNK2019: unresolved external symbol __imp__alSourcePausev referenced in function "public: static void __cdecl Magnum::Audio::Source::pause(class std::initializer_list<class std::reference_wrapper<class Magnum::Audio::Source> >)" (?pause@Source@Audio@Magnum@@SAXV?$initializer_list@V?$reference_wrapper@VSource@Audio@Magnum@@@std@@@std@@@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Source.cpp.obj) : error LNK2019: unresolved external symbol __imp__alSourceQueueBuffers referenced in function "public: class Magnum::Audio::Source & __thiscall Magnum::Audio::Source::queueBuffers(class Corrade::Containers::ArrayView<class Corrade::Containers::Reference<class Magnum::Audio::Buffer> >)" (?queueBuffers@Source@Audio@Magnum@@QAEAAV123@V?$ArrayView@V?$Reference@VBuffer@Audio@Magnum@@@Containers@Corrade@@@Containers@Corrade@@@Z)
C:\Users\daego\Desktop\Projects\Light.vn-multi\core\out\build\x86-Debug\MagnumAudio-d.lib(Source.cpp.obj) : error LNK2019: unresolved external symbol __imp__alSourceUnqueueBuffers referenced in function "public: unsigned int __thiscall Magnum::Audio::Source::unqueueBuffers(class Corrade::Containers::ArrayView<class Corrade::Containers::Reference<class Magnum::Audio::Buffer> >)" (?unqueueBuffers@Source@Audio@Magnum@@QAEIV?$ArrayView@V?$Reference@VBuffer@Audio@Magnum@@@Containers@Corrade@@@Containers@Corrade@@@Z)
```
Should have been 2019.12, but hey -- I took a (semi-)break and survived until 2020! 

There's a ton of little things, so better list them so I don't forget:

- [ ] Update copyright years everywhere
  - [ ] Also on the website
- [x] Better CMake subproject usage docs
- [ ] "Fix" Mac builds of homebrew-magnum because Homebrew is stupid
  - It tries to do Py2->3 migration and fails, returning a non-zero code. "Solution" is to disable upgrading (uhhh).
- [ ] Integrate changes from https://build.opensuse.org/project/show/home:synnick, mention in Community Features
- [ ] Mention sequentity in ~~Community Features~~ a new ~~Community Showcase~~ Powered By Magnum page, along with other projects
- [ ] webgl releases of the two new physics examples
- [ ] Finish growable arrays (arbitrary insertion / deletion)
  - [ ] `arrayRemoveUnordered()` as well
  - [ ] Compare to STL, folly, others; write a blog post
- [ ] `WM_DPICHANGED` event on GLFW 3.3 & Windows (#243), check also Mac with multiple differently dense monitors
- [ ] Use `glfwGetWindowContentScale()` for getting *virtual* DPI scaling on windows when we have GLFW 3.3+ at least (and make the original just physical (and also complain that glfw is too old when trying to use virtual on 3.2 and below)), but keep the original handling for Linux as it's also used in Sdl2App and many Linux distros still have just 3.2
- [ ] Look into Android NDK r18+ on CMake 3.16 (#310)
  - [ ] Also mosra/toolchains#10 and mosra/toolchains#11
- [ ] Finish MeshData rework (#371)
  - [ ] Add Tangent attribute to the grid primitive (at least)
  - [ ] Add support for tangents, use in `MeshTools::compile()`
  - [ ] Add support for integer data and object ID attribs (no packed normals or anything just yet), use in `MeshTools::compile()`
  - [ ] `join()` that takes a list of MeshData, assumes the same primitive, and combines them together (for simplicity picking attributes of the first mesh) .. or `concat()`? what about mesh slicing?
- [ ] Make STL-less alternatives of MeshTools (w/o deprecating the originals yet) <kbd>in progress</kbd>
  - [ ] Change `flipNormals()`, `tipsify()` to operate on array views instead
  - [ ] Deprecate `combineIndex*Arrays()` in favor of integer `removeDuplicates()` + `duplicate()`
- [ ] Texture coordinate support in the cube primitive (one with a single texture for all faces, one with a center strip and two "ears" up and down, one packing six faces)
- [ ] Finish & merge mip level selection (#369)
  - [ ] Adapt Assimp, Ogex, TinyGltf importers (I hope I have a branch with these)
- [ ] Extend format support in DDS (https://github.com/mosra/magnum-plugins/pull/67)
  - [ ] Make a BC6H converter plugin using something from #146 
  - [ ] Make a DDS converter that can contain the BC6H data
- [ ] Zero-copy import for gltf so we can operate on the data in-place (#240) -- just a MVP, glb only, as I need it for the dataset fixups
- [ ] Per-face attribute import in StanfordImporter (object ID, in particular)
  - [ ] Needs an integer version of `MeshTools::removeDuplicates()`
- [ ] A non-crappy `TextureTools::atlas()` (I have some links somewhere, don't remember where) -- 
with binary search that aims to fit into the smallest rectangle, plus trying a few sorting strategies, picking the one that fits best (don't need an incremental version yet, it's again just for the dataset fixups)
- [ ] `mesh.draw(shader)` -> `shader.draw(mesh)`, also the xfb and MeshView version, deprecate the original 

Stretch goals:

- [ ] Minimal instancing in Phong, should also make it work with per-vertex object IDs 
  - [ ] Port physics examples to use instancing
- [ ] 2D MeshVisualizer shader, which can also take texture coordinates of a 3D mesh and visualize the UV layout
Requested by @hsdk123. Currently the forked upstream FindOpenAL only works with bundled OpenAL Soft binaries, but not with sources.

EDIT: And also allow DLL copying like with FindSDL and FindGLFW.
@mosra, is there any (or plan for adding)  acceleration data structure such as Kd-tree and Octree? They are extremely useful.
@mosra, I think Signed Distance Field (SDF) primitives are very useful in graphics, so it is great if magnum has them.

I have implemented some classes for SDF, and used them here: https://ttnghia.github.io/portfolio/tool-particle-sampling-with-sph-relaxation/

The code is [here](https://github.com/NTCodeBase/LibCommon/blob/master/LibCommon/Geometry/GeometryObjects.h) and [here](https://github.com/NTCodeBase/LibCommon/blob/master/LibCommon/Geometry/GeometryObjects.h).

If you can adopt my work, it's great. Otherwise, if you like, I can rework it and submit a MR sometime later.
It would be nice to have utility functions on `SceneGraph::Object` to find attached features by type, similar to e.g. Unity's components.

```c++
object.features(); // list of AbstractFeatures&
object.feature<Drawable>(); // Drawable* or nullptr
object.features<Drawable>(); // list of Drawable&
object.featuresInChildren<Drawable>();
object.featuresInParents<Drawable>();
```
I'm noticing that png files with alpha values don't have the setColor alpha values applied when using Flat3D shader (ex. `setColor({1.f, 1.f, 1.f, 0.f})` still displays the image). 

I'm currently using StbImageImporter for image importing. 

Other Peculiarities
- png images with transparent backgrounds have their transparent colours displayed as hard colours (ex. black or white instead of transparent)

Class implementation:
```
class lvn::CSpriteBuffer::BufferImpl
{
public:
	BufferImpl(const float width, const float height)
	{
		using namespace Magnum;
		using namespace Math::Literals;
		struct TriangleVertex {
			Vector3 position;
			Vector2 textureCoordinates;
		};

		// note: this places center in the middle of the texture
		const TriangleVertex data[]{
			{{-width / 2.f, -height / 2.f, 0.f}, {0.0f, 0.0f}},    /* Left vertex, red color */
			{{ width / 2.f, -height / 2.f, 0.f}, {1.0f, 0.0f}},    /* Right vertex, green color */
			{{ width / 2.f,  height / 2.f, 0.f}, {1.0f, 1.0f}},     /* Top vertex, blue color */

			{{-width / 2.f, -height / 2.f, 0.f}, {0.0f, 0.0f}},    /* Left vertex, red color */
			{{ width / 2.f, height / 2.f, 0.f}, {1.0f, 1.0f}},    /* Right vertex, green color */
			{{ -width / 2.f,  height / 2.f, 0.f}, {0.0f, 1.0f}}     /* Top vertex, blue color */
		};

		GL::Buffer buffer;
		buffer.setData(data);

		_mesh.setCount(6)
			.addVertexBuffer(std::move(buffer), 0,
				Shaders::Flat3D::Position{},
				Shaders::Flat3D::TextureCoordinates{});
	}

public:
	Magnum::GL::Mesh _mesh;
	Magnum::GL::Texture2D _texture;
	Magnum::Shaders::Flat3D _shader{ Magnum::Shaders::Flat3D::Flag::Textured };
};
```
Sample Usage:
```
m_buffer->_texture
			.setWrapping(Magnum::GL::SamplerWrapping::ClampToEdge)
			.setStorage(1, Magnum::GL::TextureFormat(image_data->format()), image_data->size())
			/*.setStorage(1, Magnum::GL::TextureFormat::RGBA8, image_data->size())*/
			.setSubImage(0, {}, *image_data);
m_buffer->_shader
			.setColor({1.f, 1.f, 1.f, 0.f})
			//.setColor(rgba)
			.setTransformationProjectionMatrix(lvn::CCameraMgr::GetInstance().getProjectionMatrix() * transform.GetTransformWorld())
			.bindTexture(m_buffer->_texture);
m_buffer->_mesh.draw(m_buffer->_shader);
```

Images:

![light_splash_1280](https://user-images.githubusercontent.com/4100142/68871433-6bcd5280-06ca-11ea-9ebf-b8711962ab6c.png)

![scg2](https://user-images.githubusercontent.com/4100142/68871878-1f364700-06cb-11ea-8a45-85b6088d7769.png)
