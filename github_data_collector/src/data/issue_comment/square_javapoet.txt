`TypeMirror returnType = executableElement.getReturnType();`
Now I get the returnType, it's `com.xx.xx.Result<Name>`, so how can I get the rawType `Name` from this return type?
Please add a section in the README that briefly covers every formatting placeholder. Right now the README only covers `$L`, `$S`, `$T` and `$N`, so `$Z` is missing for example.
Currently, the `TypeSpec` class doesn't allow building empty enums, but empty enums are valid Java. I pushed a possible solution here: <https://github.com/mal-lang/javapoet/commit/28cdc952ff7c6ab5449a4321951cc21e89e95be3>
Would it make sense to add an option to allow Javadocs to cause an import to be emitted even if that type isn't referenced anywhere else? I'd essentially like to be able to override this behavior:

https://github.com/square/javapoet/blob/e9460b84fc41464c2aa2ef85c84dd1ac87ae1692/src/main/java/com/squareup/javapoet/CodeWriter.java#L395-L397
I feel like this is never what you want, and that it should behave like `"$N"`. Or is this too magical and I should just be using `"$N"`?
`get` doesn't accept an `Iterable<? extends TypeName>` which makes it annoying to build incrementally.

Alternatively or additionally, a builder would be nice.
```
addComment("Hey\nFriends\nI\nBreak\nCode!")
```
Can't just split on newlines either since that would break formatting.
I want to generate a lambda inside a statement, that itself uses multiple statements, but JavaPoet does not allow nesting of statements (for reasons that make sense, outside of lambdas). Do you think that an API for making these sorts of lambdas is worth it, or should I just use `add` when generating this style of code?

Example:
```java
        return CodeBlock.builder()
            .addStatement("$L.register($L)", "manager", generateLambda())
            .build();

CodeBlock generateLambda() {
        return CodeBlock.builder()
            .add("b -> {\n").indent()
            .addStatement("b.name($S)", "some name")
            .unindent().add("}")
            .build();
}
```
Expected output:
```java
manager.register(b -> {
  b.name("some name");
});
```
Current result:
```
java.lang.IllegalStateException: statement enter $[ followed by statement enter $[
```
This is an initial proposal to provide an easier way to deal with character literals.

The majority of characters can currently be dealt with using `'$L'`. However, special characters such as `'` or `\` (amongst others), would require special handling by the users.

In essence, a user would need to define a method such as `com.squareup.javapoet.Util.characterLiteralWithoutSingleQuotes()` and pass characters through that method to get it printed as expected.

Rather than putting the burden on the user, @bjansen has proposed in issue #698 to add support for single-quoted character literals via `$C`. I also think this is a good enhancement.

As an initial proposal, this PR should not be considered as the final product. Here's a list of pending tasks: 

- [ ] Documentation
- [x] Further test cases should be added to verify its robustness. 
- [ ] `singleQuoteCharacterInLiteral` should probably be removed since it's likely covered already by other tests. I just added this test to compare existing alternatives for handling special characters.
- [ ] Convert `AnnotationSpec.Builder.addMemberForValue` to use `$C` instead of ``$L``
Hi,

I was looking for something similar to `$S` but for character literals, and could not find any easy way to do it. 

Basically what I'm trying to achive is something like this:

```java
Character someChar = ...;

builder.addStatement("myArray['$L'] = ...", someChar);
```

This doesn't work when `someChar` needs to be escaped (`\`, `'`, etc.) because it produces code like `myArray['''] = ...`.

It looks like JavaPoet has everything needed to implement that (`com.squareup.javapoet.Util#characterLiteralWithoutSingleQuotes`), it just needs to handle `$C` and wrap the value with single quotes.

If you are interested in this feature, I can implement it and submit a PR.

Thanks for this nice library btw :)