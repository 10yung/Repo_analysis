`tap` run the side-effect with input first, and return the input. 

`@symb R.tap(f, a) = (f(a), a)` describes what `R.tap` do more clearly.
Since [Array.prototype.flatMap](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) has arrived, one would perhaps expect that like `map`, `filter`, etc. `chain(fn, anArray)` dispatches to the native implementation `anArray.flatMap(fn)` as well?

That change would allow Ramda to work better on other types which still just expose a `.flatMap` method. ([Kefir.flatMap](https://kefirjs.github.io/kefir/#flat-map), [Bacon.flatMap](https://baconjs.github.io/api3/classes/observable.html#flatmap)). 

Though the latter is the actually the reason I am asking. Because I am too lazy to motivate to add a `chain` alias to those libraries. ðŸ™„ 

Of course it would break Ramda code which operates on a user type exposing a `.flatMap` which is not fantasy-land `chain`.
 
add ``lensEq`` and ``lensSatisfies``.
```js
const obj = { a: 1, b: 2, c: { d: 3 } };
const dLens = R.lensPath(['c', 'd']);

R.lensEq(dLens, 3, obj);  //=> true
R.lensSatisfies(n => n <= 3, dLens, obj);  //=> true
```
``lens`` is very useful. we should strengthen its capabilities.

now i have the code below:
```js
const tagTypeLens = R.lensProp('_tagType');
const lensEq = lens => value => target => R.equals(R.view(lens, target), value);
const isNumberType = lensEq(tagTypeLens)('number');
```
can i use ``propEq`` with ``lensProp`` like this?
```js
const tagTypeLens = R.lensProp('_tagType');
const isNumberType = R.propEq(tagTypeLens, 'number');
```
i think the ``lens`` related apis could be very powerful, they could use with any ``prop``, ``path`` related apis. 

does it make sense?
@CrossEye  Optimize partial and partialRight as you suggested.

related to #2940


If I have a function created by `partialRight`, and passing in wrong count of arguments, this will lead to wrong behavior of original function. For example:

```js
const greet = (salutation, title, firstName, lastName) =>
  salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';

const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);

greetMsJaneJones('Hello', 'Mr.' 'Green'); //=> 'Hello, Mr. Green Jones!'
```

So  function created by `partialRight`, should be restricted to the right count of parameters?
Make `propEq/pathEq` parameters order be consistent to `propSatisfies/pathSatisfies` parameters order.

related to #2937 
`pathEq`'s path and `propEq`'s prop is the first parameter, but `pathSatisfies` and `propSatisfies` is the second parameter, should their parameters' order be consistent?
`const also = (func, var) => [func(var), var]]`
`const concurrent = (fns, var) => append(id, flip(map)(applyTo(var)))`
`const progress = (fns, var) => scan( (acc, fn => fn(acc ), var)`

`also(toUpper, 'foo') // ['FOO', 'foo]`
`concurrent([toUpper, toLower, concat('Bar')], 'Foo.Bar') // ['FOO', 'foo', 'FooBar']` 
`progress([toUpper, concat('BAZ'), split('.')], 'Foo.Bar')` 
`// ['FOO.BAR','FOO.BAR.BAZ', ['FOO', 'BAR', 'BAZ']]`

I feel that a common barrier in writing pipes has been losing information that one later needs. Existing solutions using ramdas existing API that I am aware of feel overpowered and difficult to reason about. I feel adding simple convenience functions like these provides a much more accessible alternative.

For example

`pipe(
    ....,
chain(head, append),
   ....
)
`
`pipe(
    ....,
ap(head, append),
  .....
)
`

To understand these,one is forced to think at an extra level of abstraction (function monad, S combinators), and one to do it all at once. While it can be used, I feel the abstraction increases the barrier of entry for endusers, and it still lacks the power of concurrent/progress for this case.

`pipe( ...., list => converge(flip(append)(list),  [head])(list), ....)`

Other solutions are even more unwieldy.


`pipe(
    ...,
    also(head),
    apply(append),
   ...
)`
`pipe(
    ...,
    concurrent([head]),
    apply(append),
   ...
)`
`pipe(
    ...,
    progress([head]),
    apply(flip(append)),
   ...
)`

With these functions we can split this into two trivial steps,  and easily describe the flow of whats going on.


In general, it seems ramda provides a lot of ways of transforming data and converging collections of data into points, and I feel it would be nice to provide a simple way of covering the other case, that of diverging data into paths.

 I also feel that this is a logical extension of the existing API. Ramda already provides a lot of constructs for conditionally branching into different paths (when, cond, ifElse, etc), whereas this provides unconditional branching.

Note the symmetry that they share with existing low level ramda functions: 

`concurrent` : _apply N functions concurrently to 1 variable with N results_
`map`: _apply 1 function concurrently to N variables with N results_
`progress`: _apply N functions consecutively to 1 variable with N results_
`scan`: _apply 1 function concurrently to 1 variable with N results_


