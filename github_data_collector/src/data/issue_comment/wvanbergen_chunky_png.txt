I'm trying to paste a series of 875 images into a single image, each image has a size of 256x256 for a total size of 11008x6400, when i try to paste i get this error:

C:/Ruby24/lib/ruby/gems/2.4.0/gems/chunky_png-1.3.11/lib/chunky_png/canvas/png_encoding.rb:220:in `block in encode_png_image_pass_to_stream': failed to allocate memory (NoMemoryError)

And when i try to save the single image i get this error: [FATAL] failed to allocate memory

Is there a way to do it like a IO Stream?
Is there a memory leak in Chunky PNG?
I have 4GB(using 3GB) of Memory Ram, Windows 7 (32 bits).

Example Code:

```
require 'chunky_png'

WIDTH = 11008
HEIGHT = 6400
FOLDER = "images/"

x = 0
y = 0
count = 0
filename_size = Dir.entries(FOLDER).size - 2 # 875 Files.
background = ChunkyPNG::Image.new(WIDTH, HEIGHT, ChunkyPNG::Color::TRANSPARENT)

for filename in Dir.entries(FOLDER) - [".", ".."]
	image = ChunkyPNG::Image.from_file("#{FOLDER}#{filename}") # NoMemoryError.
	background.replace!(image, x * 256, y * 256)
	count += 1
	puts "#{filename} saved! #{count}/#{filename_size} files left."
	x = (x + 1) % (WIDTH / 256)
	if x == 0
		y += 1
	end
	#break if count == 300 # To get '[FATAL] failed to allocate memory' error.
end

puts "Saving background image."
background.save("background.png") # [FATAL] failed to allocate memory.
```
I need it to easily add iTXt chunks to bake OpenBadges (https://www.imsglobal.org/sites/default/files/Badges/OBv2p0Final/baking/index.html). 

Hope it'll help someone and I didn't break any backward compatibilities.

```ruby
image.metadata["iTXt_fun"] = ChunkyPNG::Chunk::InternationalText.new("iTXt_fun", "Hola!", "es")

expect(metadata["iTXt_fun"]).to eq ChunkyPNG::Chunk::InternationalText.new("iTXt_fun", "Hola!", "es")
```
this just seems very unclear  can we have an example someplace?
The links to http://chunkypng.com/2014/11/07/the-value-of-a-pure-ruby-library.html, http://chunkypng.com/2010/01/17/ode-to-array-pack-and-string-unpack.html and http://chunkypng.com/2010/01/14/memory-efficiency-when-using-ruby.html leads to a 404 served by GitHub Pages. 

If I clone the repository and serve locally using `bundle exec jekyll serve` they work without problem (jekyll 3.3.0 under ruby 2.3.3p222) so I suspect it might be something strange on Github's part.
These two methods encapsulate the knowledge of how to convert from DPI back to pixels per unit, as well as automatically setting the unit when setting DPI.
Hello, 

I'm wondering if anyone has tried or had luck with using ChunkyPNG to create an animated PNG from a sequence of images. 

From what I understand, the APNG format is just an extension to PNG with 3 additional chunks for defining animation settings. 

https://wiki.mozilla.org/APNG_Specification

Thanks for any insight into this. 

It would be nice to have api support for generating the [pHYs section](http://www.libpng.org/pub/png/book/chapter11.html#png.ch11.div.8), as it is part of the PNG Specification. 

It's possible to do it manually if there is already a chunk:

```
stream.each_chunk do |c|
  if c.type == 'pHYs'
    c.content = [5906, 5906, 1] .pack('N2C')
  end
end
```

But it's not as easy to insert this node into a fresh PNG. I plan on inserting a `ChunkyPNG::Chunk::Generic` into `#other_chunks`, but this feels really a tad dirty. I propose that `Datastream` have `ChunkyPNG::Chunk::Phys` and a corresponding `phys_chunk` accessor. 

Move useful stuff to chunkypng.com
