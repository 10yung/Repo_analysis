
![图片](https://user-images.githubusercontent.com/16486344/72666286-98e00d80-3a4b-11ea-981e-d8b78fcc659a.png)

````
第20章中：
所以，如果我们细化redis 有序集合的操作，那就是下面这样
添加一个成员对象ͺ
按照键值来删除一个成员对象ͺ
按照键值来查找一个成员对象ͺ
按照分值区间查找数据，比如查找积分在 [100进 356] 之间的成员对象ͺ
按照分值从小到大排序成员变量ͺ
````
王争老师好，我翻遍了redis的操作文档，也没有看到在zset中可以“**按 照 键 值 查 找一个成员对象**”的方法，实在是不能理解，还望老师解答一下
https://github.com/wangzheng0822/algo/blob/40e0aa11f4fc1655b5a3afa14466f9c67cc9c694/python/09_queue/dynamic_array_queue.py#L21

`            for i in range(self._tail + 1, len(self._items)-1):
                self._items.pop(i)`

https://github.com/wangzheng0822/algo/blob/40e0aa11f4fc1655b5a3afa14466f9c67cc9c694/python/44_shortest_path/shortest_path.py#L64
QueueBasedOnLinkedList.java中
enQueue()方法中
if(tail == null) 应改为 if(head==null)
字节跳动教育线新项目，大投入，千亿级市场，服务端工程师大量缺口(客户端，前端也招)，各级别都要。项目主要使用Golang/Python，但是语言不做要求，可以来了再学。研发直招渠道，快速反馈，支持年前面试(可以远程面试)，年后报道，北京、上海都有HC。完整简历请投邮箱 lichengqian@bytedance.com。邮件标题：在线教育+姓名

 public void deleteByValue(int value) {
    
        // 可重复删除指定value的代码
        /*
           if (head != null && head.data == value) {
           head = head.next;
           }
           Node pNode = head;
           while (pNode != null) {
           if (pNode.next.data == data) {
           pNode.next = pNode.next.next;
           continue;
           }
           pNode = pNode.next;
           }
         */
    }
Hello, 

the current version for ```findMiddleNode()``` method in LinkedListAlgo.java may behave a little bit odd. 

The code snippet 
```java
    while (fast != null && fast.next != null) {
      fast = fast.next.next;
      slow = slow.next;
    }
```
in the file should work both for odd number and even number of nodes.

However, when the number of nodes is even, there are two nodes in the middle. This part of code returns the second node of the two. Should it return the first node? 

According to the integer division, ```5 / 2``` for example, will result in ```2``` because of the truncation. This can be viewed as it returns ```2``` between ```2 and 3```. Comparably, when there are two nodes in the middle, I think we should return the first node. 

Actually, the original code works as I said. 
Please check it out.
