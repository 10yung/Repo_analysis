#### Bug

Despite our best efforts, bugs can slip into releases or corner cases forgotten about. We will try our best to remedy the situation
and/or provide workarounds. Note that certain (odd) behaviors are by design and as such are not considered bugs.

> Which library version?

Was reported against 4.1.6, still present in 4.3.2

> What are the platform(s), environment(s) and related component version(s)?

Xamarin.Android

> What is the use case or problem?

In ReacitveUI we use Reflection and Tuples to provide Two Way Binding to UI elements.  It seems that the reflection spits a specific error now when it tries to bind on Xamarin.Android.   The issue was reported after we migrated to Value Tuples.

This is related to https://github.com/reactiveui/ReactiveUI/issues/2170

> What is the expected outcome?

That the bindings are found and Android handles the Two Way binding.

> What is the actual outcome?

The following error is produced.  The Android App crashes.

> What is the stacktrace of the exception(s) if any?

https://gist.github.com/RLittlesII/13c15d8047ae906aee0ad585c097f0f2

> Do you have a code snippet or project that reproduces the problem?

[reactiveui.2170.zip](https://github.com/dotnet/reactive/files/4069219/reactiveui.2170.zip)
#### Feature request


> Which next library version (i.e., patch, minor or major)? 

Major?, as it most likely would be a breaking change due classes/methods being moved out/around.

> What are the platform(s), environment(s) and related component version(s)?

.NET Framework System.Reactive at least 4.2.2+ (Checked 4.2.2 and 4.3.2)

> How commonly is this feature needed (one project, several projects, company-wide, global)?

Causing audit issues Company-wide on any projects using Rx in any Full Framework service code (e.g. AspNetCore 2.x).

> Please describe the feature.

Would like to see the Windows.Forms references moved out of the main System.Reactive library and into their own NuGet package. We are getting audit issues as SonarQube is complaining that all of our server side projects should be using STA Thread attributes as we have a reference to Windows.Forms.

Yes we are ignoring the error, but still think it is worth moving out into their own package.

Hi,
When referencing System.Reactive in a WPF project using the `Microsoft.NET.Sdk.WindowsDesktop` SDK, both `UseWindowsForms` and `UseWPF`, and .NET core 3.1, I have this warning:

```
1>C:\Program Files\dotnet\sdk\3.1.100\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(39,5): warning NETSDK1086: A FrameworkReference for 'Microsoft.WindowsDesktop.App' was included in the project. This is implicitly referenced by the .NET SDK and you do not typically need to reference it from your project. For more information, see https://aka.ms/sdkimplicitrefs
```

Library version : 4.3.1

Tried with both VS2019 and `dotnet build`.

You can find an example here : https://github.com/jeremyVignelles/repro-dotnet-reactive
I recently ran into a consistency issue with call order of disposables. This is happening across all versions of Rx (2.2.5 > 4.0+). Consider the following queries:

```c#
static void Main(string[] args)
{
    var o1 = Observable.Using(
        () => Disposable.Create(() => Console.WriteLine("R1")),
        r => Observable.Return(0));

    var o2 = Observable.Using(
        () => Disposable.Create(() => Console.WriteLine("R2")),
        r => o1);

    o2.Subscribe();
    Console.ReadLine();
    Console.WriteLine("---");

    var o2a = o1.Publish(po1 => Observable.Using(
        () => Disposable.Create(() => Console.WriteLine("R2")),
        r => po1));

    o2a.Subscribe();
    Console.ReadLine();
    Console.WriteLine("---");

    var o2b = o1.SelectMany(x => Observable.Using(
        () => Disposable.Create(() => Console.WriteLine("R2")),
        r => Observable.Return(x)));

    o2b.Subscribe();
    Console.ReadLine();
    Console.WriteLine("---");
}
```

All of these queries are about chaining the results of a sequence as a causal consequence on the notifications of `o1`. Each of the observables also has some disposable resources that are specified with the `Using` operator.

The 1st example chains the two observables, by having `o2` subscribe to `o1` inside its creation expression. The 2nd example does exactly the same thing, but uses `Publish` to multicast the observable first. The 3rd example uses `SelectMany` to create `o2` from a sequence generated by the singleton value of `o1`.

All these observables return the exact same sequence of values. However, inconsistent behaviour is observed when cleaning up the resources involved in the operation.

Specifically the disposal order for the 1st example is:

```
R1
R2
```

Whereas the disposal order for the 2nd and 3rd examples is:

```
R2
R1
```

From being used to RAII principles, I would expect the latter case to be the correct one, as resources created last should be disposed first, which seems to be the case for the majority of operators in Rx.

Hence my surprise finding that the 1st simple example actually switches the order around. This is problematic for compositionality semantics of Rx. Any ideas about why this is happening and what should the expected semantics be like?

Bumps [PublicApiGenerator](https://github.com/PublicApiGenerator/PublicApiGenerator) from 10.0.0 to 10.0.1.
<details>
<summary>Release notes</summary>

*Sourced from [PublicApiGenerator's releases](https://github.com/PublicApiGenerator/PublicApiGenerator/releases).*

> ## 10.0.1
> Changes:
> 
> - Fix Output property even though indexer exists (PR)[#161](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/issues/161)
</details>
<details>
<summary>Commits</summary>

- [`539c99f`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/539c99fbf48f8a916b21759f2ff3c2ea81b06b2e) Merge pull request [#161](https://github-redirect.dependabot.com/PublicApiGenerator/PublicApiGenerator/issues/161) from sungam3r/indexer-name-fix
- [`3935ed2`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/3935ed2477dd1e41e6c40e8feee7f9bd80914cfb) fix
- [`6bab05c`](https://github.com/PublicApiGenerator/PublicApiGenerator/commit/6bab05ce01615bc410d5c3218747e6f641bab66e) add tests to demonstrate problem
- See full diff in [compare view](https://github.com/PublicApiGenerator/PublicApiGenerator/compare/10.0.0...10.0.1)
</details>
<br />

[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=PublicApiGenerator&package-manager=nuget&previous-version=10.0.0&new-version=10.0.1)](https://dependabot.com/compatibility-score.html?dependency-name=PublicApiGenerator&package-manager=nuget&previous-version=10.0.0&new-version=10.0.1)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
If all status checks pass Dependabot will automatically merge this pull request.

[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
This is actually distilled from a much more complicated debugging session, which boils down to the following query:

```c#
using System;
using System.Linq;
using System.Reactive.Linq;

namespace Recursive
{
    class Program
    {
        static void Main(string[] args)
        {
            var timer = Observable
                .Timer(TimeSpan.Zero, TimeSpan.FromSeconds(1))
                .SelectMany(x => Observable.
                    Return(x)
                    .Repeat()
                    .Do(k => Console.WriteLine(k))
                    .TakeWhile((k, i) => i <= k));
            timer.Subscribe();
            Console.ReadLine();
        }
    }
}
```

In my understanding, this query should repeat the value N as many times as N, and then stop, but for some reason it loops forever on the **Repeat**, even though **TakeWhile** is clearly terminating, as can be verified by moving the **WriteLine** right after the **TakeWhile** operator (it will return zero once and then nothing, as opposed to an infinite stream of zeroes when it's right after **Repeat**).
It's wonderful that we now have framework provided `IAsyncEnumerable` and some C# sugar for it, but where are the extension methods we all need ? `Where` `Select` ....

Is this package the official home for `IAsyncEnumerable` extension methods? If yes, where can I read more about it? Where are the docs?

Why isn't full Linq support included in the .net core framework?

Hi,

Please implement an operator that walks through a collection of observables and emits all values for the first observable that's not empty:

```c#
public static IObservable<T> SwitchIfEmpty(
    this IObservable<T> first, params IObservable<T>[] others);
```

[Here](https://stackoverflow.com/questions/15209932/switch-to-a-different-iobservable-if-the-first-is-empty) is a SO question about that.
[Here](https://github.com/akarnokd/reactive-extensions/blob/master/reactive-extensions/observable/SwitchIfEmpty.cs) is a possible implementation.
After upgrading our projects (.NET Core 3) from Reactive 4.1.6 -> 4.2.0, our xunit tests failed to start with:
```
[11/10/2019 11:18:15.912 AM Error] Microsoft.VisualStudio.TestPlatform.ObjectModel.TestPlatformException: Testhost process exited with error: Error:
  An assembly specified in the application dependencies manifest (ProjectX.Tests.deps.json) was not found:
    package: 'System.Reactive.Reference', version: '4.2.0.0'
    path: 'System.Reactive.dll'
```

Unlike all other nuget packages, I noticed in VS that Reactive.dll now shows up in `Solution Explorer->Project->Dependencies->Assembly` as well as under `Packages`:
![reactive1](https://user-images.githubusercontent.com/2976921/68548795-19c8bc00-03ae-11ea-9f64-43faa5097ca9.png)

Reverting back to 4.1.6 removes the assembly reference and allows our unit tests to execute once again.