This is a work-in-progress PR to implement performance counters.

A performance counter monitors the invocation time of events. This allows us to:

- Identify which mods cause lags or performance issues
- Analyze and optimize mod performance

# Examples
To test this PR, just compile and run it. A few console commands to get started with:

- `pc sum`: Shows the summary
- `help pc`: Shows the help (read this! pc has many sub-commands)
- `pc help concepts`: Explains the concepts about performance counters, collections and sources

# Performance
The performance penalty is pretty low, on my T460 it's only ~~0.001ms~~ 0.005ms (5ns) per recorded performance counter, which probably adds to an overhead of about 0.5ms per second. While debugging this value might be higher.

`[03:11:21 TRACE SMAPI] Logged 329718 events in 128ms (avg 0.0004ms / event)`
# Memory Usage

Each event record uses about 16 bytes (plus overhead) and each `PerformanceCounter` instance is configured to keep 16.384 records. A Ring Buffer is used to store the structs so we shouldn't be hit by the garbage collector. With roughly 50 events from SMAPI and assuming the user has 100 installed mods which would register each and every event, the required memory usage without overhead would only be about 1.5MB.

On my SDV installation with about 60 mods including SVE, the performance counters use about 60MB of memory.

# ToDo

- [x] Move the hardcoded `performance_counter` command to `SMAPI.Mods.ConsoleCommands`
- [x] Add a monitor command with a configurable threshold to log long-running event handlers for debugging (something like `performance_counter monitor Display.Rendering 10`)
- [x] Refactor the code, add documentation once the implementation class structure is stable
- [x] Add a `performance_counter reset` command to zero all performance counters
- [x] Make the API private and use `InternalsVisibleTo` to allow access from `SMAPI.Mods.ConsoleCommands`
- [x] Encapsulate the performance counter logic

Optionals:
- [ ] Monitor `IAssetLoader` and `IAssetEditor`
- [ ] Optimize the table view, like light gray for values of 0.00ms, as well as green and red for critical stuff. Would be useful for timing critical events like `Display.Rendering`.


Consider adding mod pages to smapi.io to show more info like GitHub licenses and per-site versions.
SMAPI officially runs on Linux, Mac, and Windows (see [player guide](https://stardewvalleywiki.com/Modding:Player_Guide)).

I don't plan to port it to mobile/consoles myself, but I'm happy to provide any help needed if someone familiar with those wants to figure it out.

Current status:

platform | status
-------- | ------
Linux | ✓ fully supported.
Mac | ✓ fully supported.
Windows | ✓ fully supported.
Android | ⭮ [most mods supported](https://github.com/MartyrPher/SMAPI-Android-Installer#readme) using @MartyrPher's fork (see [downloads](https://github.com/MartyrPher/SMAPI-Android-Installer/releases), [source code](https://github.com/MartyrPher/SMAPI)).<br />~~⭮ prototype by @ZaneYork (see [source code](https://github.com/ZaneYork/SMAPI/tree/android), [last announcement](https://www.reddit.com/r/StardewValley/comments/bcm8w8/smapi_for_android_version/), [blockers](https://github.com/Pathoschild/SMAPI/pull/635)).~~<br />~~⭮ early experimentation by @LeonBlade.~~
iOS | ☐ no current plans that I know of.
PS4 | ☐ no current plans that I know of.
PS Vita | ☐ no current plans that I know of.
Switch | ☐ no current plans that I know of.
Xbox One | ⭮ early experimentation by @dittusch.
Extend the `helper.Input` API to let mods register key bindings, optionally with an in-game UI which lets the user change bindings.
Add a content API method which lists mods that loaded or edited an asset.

```cs
/// <summary>Get a list of mods which loaded or edited the current version of a given asset.</summary>
/// <param name="assetName">The asset name to check.</param>
public IEnumerable<IModInfo> GetModsWhichInterceptedAsset(string assetName);
```
Consider adding an event raised when the player collapses.

Split from #310.
Consider adding events raised when the player receives damage from an NPC, or hits/kills an NPC.

Split from #310.
Consider adding events for dialogue (talked to NPC, gifted NPC, answered dialogue choice).

Split from #310.
Consider adding item events (picked up, consumed, equipped, dropped, sold, trashed, bought/sold, tool used).

Split from #310.
Consider adding crop events (harvested, died, planted, day-updated).

Split from #310.