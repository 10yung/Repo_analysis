With upcoming iOS versions the swizzling of NSCFMutableArray's and NSCFMutableDictionary's `addObject:` fails, as the class clusters now also have `__NSCFMutable*` classes which will not respond to the swizzeled selectors as they were not added.
I only looked into the crashes for 5mins or so there might be more/other causes for it.
Add the method to the other classes could fix that.
In general we could (should?) look into a way to not swizzle the whole programs behaviour with added nils to arrays and only do so in a nu context?
Any ideas/pointers @timburks ?


Implementing a SWANK backend could be interesting. 
Would it be worth it and possible?

An even better target than Objective-C, feature- and structure-wise. 

Swift is great, but without homoiconicity, true macros and prefix notation, how can anything than Clojure/Lisp be my favorite language :)

It should be possible to write mobile apps in Nu due to its ObjC base, am I correct? Could we have some demo GUI apps with sample code?

I'm testing my nu installation at the moment. After using `./mininush tools/nuke install` to install nu, I'm trying to use `./mininush tools/nuke uninstall` to uninstall but with no luck. What's the correct way to uninstall nu?

git clone git://github.com/jsallis/nu-tmbundle.git "Nu.tmbundle"

->

git clone git://github.com/jsallis/nu.tmbundle.git "Nu.tmbundle"

(dash should be period).

This repo has been modified by github's web browser editor at a point where it wrote corrupt git objects to the repo.

These trees are broken:

18:52:28 banana:~/Dev/iphone2/vendor/nu nevyn (master)$ git fsck --full
warning in tree 16bfc00c112096d096440f1b6281e8cdfd7d9dbc: contains zero-padded file modes
warning in tree 2698c6c49d55b360bc2fec7ede772da12cb4680f: contains zero-padded file modes
warning in tree 29f760a8f4d2577ed50ba1dab6cb0e214a664151: contains zero-padded file modes
warning in tree 32cbdd8d58c9731c460a1563237c8aeac26877ef: contains zero-padded file modes
warning in tree 3eb4a46becf98642255c9916b2fe0d7fea7b004f: contains zero-padded file modes
warning in tree 4479a800ea37bbc6950126f42bee6d1747efe20c: contains zero-padded file modes
warning in tree 4f8329ae933a3fdb10920d9ca25f7f6f8b144bd4: contains zero-padded file modes
warning in tree 7a2dc8c2ec60756f9c61340875e96862cb34149f: contains zero-padded file modes
warning in tree ddf9dcc2d2a905e9246cc4f2e92af7be44a47241: contains zero-padded file modes
warning in tree e11e24ecde5c6691aa46d95e6ad43f05422ad420: contains zero-padded file modes
warning in tree ee6e690c3dbce7e7678b477cb9b2ebf62cb6121c: contains zero-padded file modes
warning in tree f04f920a90c4db7063cbeed339bff941d82122de: contains zero-padded file modes

This means that the repository can't be pushed to a git server that is less forgiving about errors. (I'm trying to fork all my external dependencies (so we can keep building even if github or bitbucket is down), and failing to push the fork to gerrit).

The only way to fix it is to rewrite the tree, which will be very annoying for all forks with outstanding changes. If you still want to go through with it, instructions can be found in this mailing thread:
http://thread.gmane.org/gmane.comp.version-control.git/143288

It claims to not be able to find `signature_for_identifier`. 

It would be helpful if blocks would just work like in MacRuby. I do not wish to distinguish between Nu blocks and Objective-C blocks.

``` lisp
#!/usr/bin/env nush

(load "nu")
(load "cblocks") 

(set myList '("one" "two" "three"))
(set myArray (myList array))

(puts "each: works")
(myList each:
    (do (obj)
        (puts obj)))

(puts "cBlockWithNuBlock: works")
(myArray enumerateObjectsUsingBlock:
    (NuBridgedBlock cBlockWithNuBlock:
        (do (obj idx stop)
            (puts obj))
        signature:"v@I^?")) 

(puts "cblock: fails")
(myArray enumerateObjectsUsingBlock:
    (cblock void ((id) obj (unsigned long) idx (BOOL*) stop)
        (puts obj)))
```

``` text
each: works
one
two
three
cBlockWithNuBlock: works
one
two
three
cblock: fails
Nu uncaught exception: NuCantFindBridgedFunction: dlsym(RTLD_DEFAULT, signature_for_identifier): symbol not found
If you are using a release build, try rebuilding with the KEEP_PRIVATE_EXTERNS variable set.
In Xcode, check the 'Preserve Private External Symbols' checkbox.

  from <TopLevel>:-1: in NuBridgedFunction
  from <TopLevel>:-1: in (NuBridgedFunction functionWithName: "signature_for_identifier" signature: "@@@")
  from <TopLevel>:-1: in ((NuBridgedFunction functionWithName: "signature_for_identifier" signature: "@@@") identifier (NuSymbolTable sharedSymbolTable))
  from <TopLevel>:-1: in g1804289383__get_type_signature
  from <TopLevel>:-1: in set
  from <TopLevel>:-1: in progn
  from <TopLevel>:-1: in bridgedblock
  from <TopLevel>:-1: in (bridgedblock (obj idx stop) (puts obj) ())
  from ./test.nu:23: in cblock
  from ./test.nu:22: in myArray
  from /Library/Frameworks/Nu.framework/Resources/help.nu:136: in progn
```
