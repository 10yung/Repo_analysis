@photoszzt discovered that our implementation of dlopen() and dlsym() is not complete. Here is the list of shortcomings:

- `dlopen` ignores all flags; the default behavior should be RTLD_LOCAL not RTLD_GLOBAL which is the current default 
- `dlsym()`  does not implement RTLD_NEXT
- `dlsym()` does not lookup for symbols in the dependant objects for non-RTLD_DEFAULT and non-RTLD_NEXT handle (handle created with `dl_open`) 
It would be nice to add [vsock support](https://docs.oasis-open.org/virtio/virtio/v1.1/csprd01/virtio-v1.1-csprd01.html#x1-39000010) to OSv. For details of what it would take please see [this conversation on mailing list](https://groups.google.com/d/msg/osv-dev/a3i4cMD_Mn4/IiwhQ0CdBAAJ). 
Building an OSv image - one including the OSv kernel and an application - currently requires running OSv. Both `scripts/build` and `Capstan` run the OSv kernel, and utilities stored on its ramdisk - namely `/tools/mkfs.so` (to create a ZFS filesystem) and `/tools/cpiod.so` - to create a ZFS filesystem on the image and upload files onto it.

In the back of our minds, we always considered the idea of doing the last step - creating the ZFS filesystem and copying files into it - on the Linux build host, without running an OSv guest at all. But this never worked properly, as demonstrated by issue #918. But now that this issue was fixed, we can return to this idea.

Not running the guest to build the filesystem has several advantages. One is making the image smaller - cpiod.so is no longer as big as it was (see #980) but it's still is over 200KB and we put it twice on each image, and some of the other ZFS stuff in `bootfs.manifest.skel` and `usr.manifest.skel` might not be needed any more as well.

The second benefit is speeding up the build of OSv images on machines where running a guest is very slow (e.g., VMs with no support for nested virtualization) or not possible at all (e.g., cross-compilation).

I'm marking this issue as "low priority" because the current approach of scripts/build - i.e., running the guest to uploads files onto it - has been working quite well for years, so we're are in no real rush to replace it.
Hello, 

I am running a fresh build of the Docker image at `docker/Dockerfile`, but `tracing_smoke_test` still fails.

My steps:
* `docker build -t osv/builder .` (I've also tried with  _--no-cache_ to ensure my image is fresh)
* `docker run -it --privileged osv/builder`
* `./scripts/build check`

The check fails on `tracing_smoke_test` with the following:
```TEST tracing_smoke_test                 Test tracing_smoke_test FAILED
Traceback (most recent call last):
  File "/git-repos/osv/scripts/test.py", line 204, in <module>
    main()
  File "/git-repos/osv/scripts/test.py", line 183, in main
    run_tests()
  File "/git-repos/osv/scripts/test.py", line 174, in run_tests
    run(tests_to_run)
  File "/git-repos/osv/scripts/test.py", line 94, in run
    run_test(test)
  File "/git-repos/osv/scripts/test.py", line 69, in run_test
    test.run()
  File "/git-repos/osv/scripts/tests/testing.py", line 52, in run
    self.f()
  File "/git-repos/osv/scripts/tests/test_tracing.py", line 52, in tracing_smoke_test
    assert('0.0.0.0.68 > 255.255.255.255.67: BOOTP/DHCP, Request from' in tcpdump)
AssertionError```
Some resources:
- https://virtio-fs.gitlab.io/index.html#faq 
- https://stefanha.github.io/virtio/virtio-fs.html#x1-41500011 (look for virtio-fs)
- https://virtio-fs.gitlab.io/howto-qemu.html
- https://lists.oasis-open.org/archives/virtio-dev/201812/msg00073.html
 
This would require implementing a new virtio device and a new filesystem. The challenge is that Linux implementation (https://gitlab.com/virtio-fs/linux/blob/virtio-fs/fs/fuse/virtio_fs.c and https://gitlab.com/virtio-fs/linux/blob/virtio-fs/fs/fuse/inode.c) uses FUSE layer which is OSv does not implement and never will probably. For starters, we could limit the initial implementation to a read-only part.
Even though per comments in issue #1040, boost spirit QI used by command.cc increases the size of `loader-stripped.elf`by ~60K "only", it would still be desirable to replace it with something lighter.

One such replacement could use std::regex and following expressions like so:
1. Replace unescaped characters.
2. Use regex to extract all of 3 kinds of things
    * `((\"[^\"]*\")|([^\s;&!]+)|(&!|;|&|!))`
    * `(\"[^\"]*\")` - quoted string
    * `([^\s;&!]+)` - non-quoted string
            * `\s` is used for any white-space character not just â€˜ '
    * `(&!|;|&|!)` - command terminator/delimiter
3. Iterate over all matches to group then into vectors and start new vector on command delimiter - (&!|;|&|!)

Given the Python end-of-life scheduled for Jan 1st, 2020, we should upgrade at least the key scripts (setup.py, module.py, test.py, etc) under script to be Python 3 compatible. 

Please see https://docs.python.org/3/howto/pyporting.html
These are two issues in `rwlock` discovered during reviewing of other bugs, but did not directly cause them so it is of low priority fixing these issues:

1. `rwlock` is recursive for the write-lock holder, i.e., a thread holding a write lock can take another one. But if a thread already holds a write lock and now tries to take *also* a read lock, it will hang forever. We should consider if this is to be allowed immediately, or `assert()` - just hanging forever is never a good idea.

2. `rwlock::wunlock()`, if the lock was recursive, reduces the recursion count but that continues to go on to wake up a waiter. This is a spurious wakeup - the woken thread will discover the lock is still taken, and go back to sleep. So we should probably immediately return after reducing the recursion count?
The commit https://github.com/cloudius-systems/osv/commit/33bea608faff461cf6d4a61053712c28d2de0e75 fixed the original crash reported by issue #1026. However, when a user presses Ctrl-C on running [golang-pie-httpserver app](https://github.com/cloudius-systems/osv-apps/tree/master/golang-pie-httpserver), OSv prints message about unimplemented **tgkill** syscall instead of exiting gracefully.
The goal of this issue is to provide a limited but reasonable implementation of this syscall to let Golang apps like the one mentioned here exit gracefully.
For more details please see this discussion on [OSv dev list](https://groups.google.com/forum/#!topic/osv-dev/2ofZxgr1jag).
Travis-CI offers free CI (builds, tests, etc.) services to open-source projects. I opened an OSv page there:

https://travis-ci.org/cloudius-systems/osv

By adding a properly-formatted travis.yml project (see explanation in https://docs.travis-ci.com/user/tutorial/) we could easily ask Travis to automatically try to build OSv after every commit. Even more interestingly, we can ask it to build on several different Linux distributions, which can help us make sure that OSv still builds properly on older distros which the developers no longer have or test.

In the long run, it would be nice for these automated build to also do "make check" (i.e., run the tests), but these will be very slow because Travis doesn't support nested virtualization so everything will be run in qemu's emulator. But OSv's build itself should be quick it enough (it only minimally uses qemu to build the image - this will be slower than usual but probably not prohibitively slow).