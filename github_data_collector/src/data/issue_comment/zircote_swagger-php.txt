Reading some of the issues (#700 , #576 ), and still having some problems myself, I decided to setup a simple data model. Defined are the following models and traits:
* Dog extends Pet, no additional properties
* Pet uses Food trait and Fur trait, and has the property name
* Fur trait uses FurColor trait and has the property fur
* FurColor has the proporty color

Note: because of the mentioned problem of separate namespaces, I applied that as well, since our production environment uses a similar approach. 

As I will mention in the result section I ran the code on both the 3.0.3 version and the dev-trait-reference-fix branch. The result was then checked through https://editor.swagger.io/.

### Files

Dog.php
```php
<?php
use OpenApi\Annotations as OA;

namespace animals\object;

/**
 * Class Dog
 * @package animals\object
 * @OA\Schema(schema="Dog",
 *     allOf={
 *     @OA\Schema(ref="#/components/schemas/Pet"),
 *     }
 * )
 */
class Dog extends Pet
{
}
```

Pet.php
```php
<?php
use OpenApi\Annotations as OA;

namespace animals\object;

use animals\traits\FoodTrait;
use animals\traits\FurTrait;

/**
 * Class Pet
 * @package animals\object
 * @OA\Schema(schema="Pet",
 *     allOf={
 *         @OA\Schema(ref="#/components/schemas/HasFood"),
 *         @OA\Schema(ref="#/components/schemas/Fur")
 *     }, required={"name"}
 *     )
 */
class Pet
{
    use FoodTrait;
    use FurTrait;

    /**
     * @OA\Property(
     *     type="string"
     * )
     * @var string
     */
    protected $name;
}
```

FurTrait.php
```php
<?php
use OpenApi\Annotations as OA;

namespace animals\traits;

/**
 * Trait FurTrait
 * @package animals\traits
 * @OA\Schema(schema="Fur", allOf={
 *         @OA\Schema(ref="#/components/schemas/FurColor")
 *     }
 * )
 */
trait FurTrait
{
    use FurColorTrait;
    /**
     * @OA\Property(type="string")
     * @var string
     */
    public $fur;
}
```

FurColor.php
```php
<?php
use OpenApi\Annotations as OA;

namespace animals\traits;

/**
 * Trait FurColorTrait
 * @package animals\traits
 * @OA\Schema(schema="FurColor")
 */
trait FurColorTrait
{
    /**
     * @OA\Property(type="string")
     * @var string
     */
    public $color;
}
```

FoodTrait.php
```php
<?php
use OpenApi\Annotations as OA;

namespace animals\traits;

/**
 * Trait FoodTrait
 * @package animals\traits
 * @OA\Schema(schema="HasFood")
 */
trait FoodTrait
{
    /**
     * @OA\Property(type="string")
     * @var string
     */
    public $food;
}
```

### Results
**Using 3.0.3**

json output
```json
{
    "openapi": "3.0.0",
    "info": {
        "title": "Trait test",
        "version": "0.0.1"
    },
    "paths": {
        "/": {}
    },
    "components": {
        "schemas": {
            "Dog": {
                "properties": {
                    "food": {
                        "type": "string"
                    }
                },
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pet"
                    }
                ]
            },
            "Pet": {
                "required": [
                    "name"
                ],
                "properties": {
                    "food": {
                        "type": "string"
                    }
                },
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/HasFood"
                    },
                    {
                        "$ref": "#/components/schemas/Fur"
                    },
                    {
                        "properties": {
                            "name": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "HasFood": {},
            "FurColor": {
                "properties": {
                    "color": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Fur": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FurColor"
                    },
                    {
                        "properties": {
                            "fur": {
                                "type": "string"
                            }
                        }
                    }
                ]
            }
        }
    }
}
```
Notice that Fur has is properties in the "allOf" part. 
Also note that although Pet uses all traits (direct or indirect like FurColor), the "food" property is on the object level both within "Dog" and "Pet", but the "name" property is also within the allOf part, only within "Pet".
Also note that HasFood has no properties at all, whereas FurColor still has the property "color".

Validating through editor.swagger.io shows the different models as expected, albeit HasFood is still empty. Both Dog and Pet have all properties, as expected.

**Using dev-trait-reference-fix**

json output
```json
{
    "openapi": "3.0.0",
    "info": {
        "title": "Trait test",
        "version": "0.0.1"
    },
    "paths": {
        "/": {}
    },
    "components": {
        "schemas": {
            "Dog": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pet"
                    }
                ]
            },
            "Pet": {
                "required": [
                    "name"
                ],
                "properties": {
                    "food": {
                        "type": "string"
                    },
                    "fur": {
                        "type": "string"
                    }
                },
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/HasFood"
                    },
                    {
                        "$ref": "#/components/schemas/Fur"
                    },
                    {
                        "properties": {
                            "name": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "HasFood": {},
            "FurColor": {
                "properties": {
                    "color": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Fur": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FurColor"
                    }
                ]
            }
        }
    }
}
```
Again, notice HasFood is still empty. But more important notice that Fur is missing its own property "fur". 
FurColor on the contrairy still has its own property "color". The "fur" property is now attached directly to "Pet".

"Dog" now has no properties attached, only a reference to "Pet" as I would expect.

Validation through editor.swagger.io results in "Dog" and "Pet" having all properties, but only the trait that is used within another trait has its own property ("FurColor" with "color").

### Conclusion
To be honest, in my opinion neither of these results are correct. Sure, the objects contain all properties. But the traits itself, which are also exported into the json output, are incomplete in both cases.

### Request
If possible, please provide feedback on the file hereinabove, and/or provide a full example using traits, both with "bare" traits and traits using other traits.

Hopefully this issue and any feedback can be of service in the future.

##### Additional information
* php7.2.24 on Ubuntu 18.04.3
* zip added with project structure:
[swagger3-Pet-example-using-traits.zip](https://github.com/zircote/swagger-php/files/4045923/swagger3-Pet-example-using-traits.zip)

**Feature-Request:**
This project should validate the given data types.  
For valid data types see: https://swagger.io/docs/specification/data-models/data-types

**As example:**
We define the type of "load" as `float`, but this should be `number`.

Defined in test.php:  
```php
<?php declare(strict_types=1);

use OpenApi\Annotations as OA;

/**
 * @OA\Info(title="Example", version="3.0")
 * @OA\Server(
 *     description="Dev",
 *     url="https://localhost"
 * )
 * @OA\Get(
 *      path="/health/load.json",
 *      @OA\Response(
 *          response=200,
 *          description="Get current server load",
 *          @OA\JsonContent(
 *              required={"success"},
 *              @OA\Property(property="success", type="boolean"),
 *              @OA\Property(property="load", type="float")
 *          )
 *      )
 * )
 */
```

Generate output as YAML (no error):  
```bash
php ./vendor/bin/openapi --output test.yml test.php
```
Output as test.yml:  
```yml
openapi: 3.0.0
info:
  title: Example
  version: '3.0'
servers:
  -
    url: 'https://localhost'
    description: Dev
paths:
  /health/load.json:
    get:
      responses:
        '200':
          description: 'Get current server load'
          content:
            application/json:
              schema:
                required:
                  - success
                properties:
                  success: { type: boolean }
                  load: { type: float }
                type: object

```

Verify output with http://editor.swagger.io:  
![image](https://user-images.githubusercontent.com/40632052/72153523-8a8c5480-33ae-11ea-9a8d-d2a0b00a72a3.png)

Hi,

If the `functions.php` file is preloaded and then included at runtime, it triggers a `PHP Fatal error:  Cannot redeclare OpenApi\scan()`.

Constants are not preloaded, so this PR split constants and function definition to fix this issue.
The issue reported in #407 and fixed in #408 regressed with the new @OA\Flow keyword.

This annotation:
```
     *  @OA\SecurityScheme(
     *      type="oauth2",
     *      securityScheme="ClientAuth",
     *      @OA\Flow(
     *          flow="clientCredentials",
     *          tokenUrl="/oauth2/token",
     *          scopes={},
     *      ),
     *  ),
```

produces this YAML:
```
securitySchemes:
    UserAuth:
      type: oauth2
      flows:
        password:
          tokenUrl: /oauth2/token
          refreshUrl: /oauth2/token
          scopes: []
```

As per the [spec](https://swagger.io/docs/specification/authentication/oauth2/#no-scopes), this should be an empty object, which there isn't a way to directly define with the annotations.

This applies the same fix as #408, but now in the Flow element versus the SecurityScheme element to match OAS3.

With this patch, we get:
```
  securitySchemes:
    UserAuth:
      type: oauth2
      flows:
        password:
          tokenUrl: /oauth2/token
          refreshUrl: /oauth2/token
          scopes: {  }
```
There doesnt seem to be a way to create a reusable list parameters to be reusable in multiple routes. I posted the desired outcome here. Ive been scratching my head on this for a day, cant tell if im ignorant to some syntax/annotation or if this is a swagger OR swagger-php package limitation.

https://stackoverflow.com/questions/59428832/how-to-define-and-use-a-reuseable-parameter-list-for-swagger-in-php
Fixes #742

Additionally, this allows the parser to now read [php 7.4 native property types][typed-properties] for augmenting the schema, so no need to declare `@var Type` anymore 🎉 

[typed-properties]:https://www.php.net/manual/en/migration74.new-features.php#migration74.new-features.core.typed-properties
Hi,

The new PHP 7.4 typed property feature is a godsend for this library and would really help reduce the use of comment Annotations in Models.

`type` can now be directly deduced from `PHP` tokens as well as the `nullable` property (c.f. #705 / #711), which brings a more robust way of defining Models.

Example:
PHP < 7.4
```php
/**
 * @OA\Schema
 */
class ExampleModel
{
    /**
     * @var int|null
     * @OA\Property
     */
    private $id;

    /**
     * @var string
     * @OA\Property
     */
    private $name;

    /**
     * @var \DateTimeInterface|null
     * @OA\Property(type="datetime")
     */
    private $createdAt;
}
```

PHP >= 7.4
```php
/**
 * @OA\Schema
 */
class ExampleModel
{
    /** @OA\Property */
    private ?int $id;

    /** @OA\Property */
    private string $name;

    /** @OA\Property(type="datetime") */
    private ?\DateTimeInterface $createdAt;
}
```

I tried them out and they make the `StaticAnalyser` fail; it fails to get property names while parsing the tokens as it doesn't recognise the new format.



Since several days I cant reacht http://zircote.com/swagger-php/. 
You should either fix the link or remove it entirely.
I would like to add a "custom" property in the ref (Article) (example, in the json, it's the "countries" array property) : 

```
{
"message" : "Get one article",
"status" : 200,
"data": {
    "id": 1,
    "title": "Title"
    "countries" : [
            {
                "id": 1,
                "name": "Country name"
            }
        ]
    }
}
```
> Annotation in controller

Currently, on the annotation, I have this (without countries property), it works : 

```
     *  @OA\Response(
     *      response="200",
     *      description="Get one article success",
     *      @OA\MediaType(
     *          mediaType="application/json",
     *          @OA\Schema(
     *              allOf={
     *               
   @OA\Schema(ref="#/components/schemas/StandardResponse")
     *              },
     *              @OA\Property(
     *                  property="data",
     *                  ref="#/components/schemas/Article"
     *              )
     *         )
     *     )
     * ),
```

> Article schema

    /**
     * @OA\Schema(
     *     schema="Article",
     *     type="object",
     *     title="Article",
     *     @OA\Property(property="id", type="integer", description="Article id"),
     *     @OA\Property(property="title", type="string", description="Article title"),
     * )
     */

> Countries schema

    /**
     * @OA\Schema(
     *     schema="Country",
     *     type="object",
     *     title="Country",
     *     @OA\Property(property="id", type="integer", description="Country id"),
     *     @OA\Property(property="name", type="string", description="Country name"),
     * )
     */

I would like to add "**countries**" property in **property="data"**

I tried it (to add directly Countries Property in Data Property), without success...

```
     * @OA\Response(
     *     response="200",
     *     description="Get one article success",
     *     @OA\MediaType(
     *         mediaType="application/json",
     *         @OA\Schema(
     *             allOf={
     *           
  @OA\Schema(ref="#/components/schemas/StandardResponse")
     *             },
     *             @OA\Property(
     *                  property="data",
     *                  ref="#/components/schemas/Article",
     *                  @OA\Property(
     *                       property="countries",
     *                       type="array",
     *                       @OA\Items(ref="#/components/schemas/Countries")
     *                  )
     *             )
     *         )
     *     )
     * ),
```