### Description

I am running a Bolt app locally, proxied with ngrok, and the Slack API Enable Subscriptions page will not verify the Events Request URL. In the ngrok inspector, it looks like the response is correct, but on the Slack API page, I receive the error "Your URL didn't respond with the value of the challenge parameter." but no other information.

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [x] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/bolt/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.

---

### Bug Report

Filling out the following details about bugs will help us solve your issue sooner.

#### Reproducible in:

package version:
1.5.0

node version:
12.13.1

OS version(s):
macOS 10.13.6

#### Steps to reproduce:

I am following the "Getting Started" instructions on [this page](https://slack.dev/bolt/tutorial/getting-started)
1. On Slack API page, create a new Slack app for a workspace, then create a new bot user
2. Copy the signing secret and bot auth token
3. On local machine, setup new Bolt project:
  - Create directory
  - npm init
  - npm i -S @slack/bolt
  - set environment variables copied above
  - create app.js and paste contents from instructions
  - start app
4. On local machine, start ngrok to proxy http port 3000
5. On Slack API Events Subscriptions page, enable events, then in the Request URL field, post the ngrok https URL followed by `/slack/events` path.

#### Expected result:

Events URL is verified

#### Actual result:

Bolt app responds to event URL verification request, but the Slack API page is unable to verify the URL and displays the error, "Your URL didn't respond with the value of the challenge parameter."

#### Attachments:

Slack API Events URL verification error:
![image](https://user-images.githubusercontent.com/1933201/72670364-8beefa00-3a0a-11ea-9975-5fd96e295b53.png)

Request in ngrok inspector:
![image](https://user-images.githubusercontent.com/1933201/72670432-36671d00-3a0b-11ea-91d0-c1fb75942b88.png)

Response in ngrok inspector:
![image](https://user-images.githubusercontent.com/1933201/72670445-526abe80-3a0b-11ea-91e4-77e019f789af.png)


###  Summary

This converts all middleware to be promise based as per #353 

Depends on #369 

**NOTE** I didn't include any documentation updates as #369 got giant because of it. I'll follow this with a pr for docs alone.

### Requirements (place an `x` in each `[ ]`)

* [x] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/bolt/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
###  Summary

A few edits to make the Getting Started guide reflect Granular Bot permissions.

### Requirements (place an `x` in each `[ ]`)

* [x] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/bolt/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
### Description

APIs supporting Block Kit will respond with `invalid_blocks` if the payload is invalid, which the app will log with `app.error` callback. But, the error payload response from the API will actually include really helpful information about WHAT about the payload is invalid, that I don't seem to have access to in that callback.

You can see the larger helpful error messaging in the network tab for the block kit builder:
<img width="1377" alt="Screen Shot 2020-01-09 at 11 39 40 AM" src="https://user-images.githubusercontent.com/8782928/72280425-273c3580-35ed-11ea-8d55-483b33936c99.png">


### What type of issue is this? (place an `x` in one of the `[ ]`)
- [x] bug
- [x] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/bolt/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.

---

## Bug Report

#### Reproducible in:

package version:
"@slack/bolt": "v1.4.1"

#### Steps to reproduce:

1. Use bolt to send an invalid payload to an api that supports block kit. (aka sending block type "sections" instead of "section")
2. Log the error that comes through in the `app.error` callback
3. See that the information about which block is causing the error is not included

#### Expected result:

I would expect to at least have access to the information within the callback, even if it's not logged by default

#### Actual result:

Inspecting the "error" object does not have any other information than the error string.
###  Summary

Makes say, ack, and respond return promises. Per discussion in #353

I possibly changed a few things from the discussion above, I'll leave comments.

### Requirements (place an `x` in each `[ ]`)

* [x] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/bolt/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
### Description

When an incoming event fails to authenticate via Bolt's `authorizeFn`, the following warning is thrown:

https://github.com/slackapi/bolt/blob/227421b324bcf5548d1263db7b61fc66eb407908/src/App.ts#L395

Then, the following error is thrown that the incoming event is not acknowledged.

https://github.com/slackapi/bolt/blob/6cd88eb3a6246405dee9afe06f793ed7c59958f2/src/ExpressReceiver.ts#L75-L78

Is this the expected design? If listeners are not being called, why do we need to call `ack()`?

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [x] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/bolt/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.

---

### Bug Report

Filling out the following details about bugs will help us solve your issue sooner.

#### Reproducible in:

package version: >= 1.2.0

node version: v12.12.0

OS version(s): macOS Catalina 10.15.1

#### Steps to reproduce:

1. With `authorizeFn`, do not authorize an incoming event.

#### Expected result:

Incoming event is not sent to listeners. `receiverAckTimeoutError` is not thrown.

#### Actual result:

`receiverAckTimeoutError` is thrown.

#### Attachments:

```
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR { Error: Authorization of incoming event did not succeed.
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR     at Object.errorWithCode (/home/vcap/deps/0/node_modules/@slack/bolt/dist/errors.js:17:19)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR     at authorizationErrorFromOriginal (/home/vcap/deps/0/node_modules/@slack/bolt/dist/App.js:293:28)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR     at authorizeResult.authorize.catch (/home/vcap/deps/0/node_modules/@slack/bolt/dist/App.js:145:32)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR     at process._tickCallback (internal/process/next_tick.js:68:7)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR   code: 'slack_bolt_authorization_error',
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR   original:
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR    Error: No matching authorizations for E27SFGS2W:T0258Q0SG
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR        at App.module.exports [as authorize] (/home/vcap/app/src/authorizeFn.js:15:15)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR        at App.onIncomingEvent (/home/vcap/deps/0/node_modules/@slack/bolt/dist/App.js:144:45)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR        at ExpressReceiver.App.receiver.on.message (/home/vcap/deps/0/node_modules/@slack/bolt/dist/App.js:55:53)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR        at ExpressReceiver.emit (events.js:198:13)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR        at ExpressReceiver.requestHandler (/home/vcap/deps/0/node_modules/@slack/bolt/dist/ExpressReceiver.js:70:14)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR        at Layer.handle [as handle_request] (/home/vcap/deps/0/node_modules/express/lib/router/layer.js:95:5)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR        at next (/home/vcap/deps/0/node_modules/express/lib/router/route.js:137:13)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR        at respondToUrlVerification (/home/vcap/deps/0/node_modules/@slack/bolt/dist/ExpressReceiver.js:122:5)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR        at Layer.handle [as handle_request] (/home/vcap/deps/0/node_modules/express/lib/router/layer.js:95:5)
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR        at next (/home/vcap/deps/0/node_modules/express/lib/router/route.js:137:13) }
   2020-01-02T15:25:13.64-0500 [APP/PROC/WEB/0] ERR [WARN]   Authorization of incoming event did not succeed. No listeners will be called.
   2020-01-02T15:25:16.44-0500 [APP/PROC/WEB/0] ERR { Error: An incoming event was not acknowledged before the timeout. Ensure that the ack() argument is called in your listeners.
   2020-01-02T15:25:16.44-0500 [APP/PROC/WEB/0] ERR     at receiverAckTimeoutError (/home/vcap/deps/0/node_modules/@slack/bolt/dist/ExpressReceiver.js:213:19)
   2020-01-02T15:25:16.44-0500 [APP/PROC/WEB/0] ERR     at Timeout.setTimeout [as _onTimeout] (/home/vcap/deps/0/node_modules/@slack/bolt/dist/ExpressReceiver.js:39:32)
   2020-01-02T15:25:16.44-0500 [APP/PROC/WEB/0] ERR     at ontimeout (timers.js:436:11)
   2020-01-02T15:25:16.44-0500 [APP/PROC/WEB/0] ERR     at tryOnTimeout (timers.js:300:5)
   2020-01-02T15:25:16.44-0500 [APP/PROC/WEB/0] ERR     at listOnTimeout (timers.js:263:5)
```
###  Summary

This pull request fixes #324 - refer to the issue for details.

### Requirements (place an `x` in each `[ ]`)

* [x] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/bolt/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
### Description

#### Disclaimer

Creating this issue **doesn't mean** the Bolt team is going to provide a proper way to support FaaS (e.g., AWS Lambda, Google Cloud Functions, Cloud Functions for Firebase, etc.) in the short run. 

I wanted to create a place to discuss any future possibilities to support FaaS in some ways.

#### The challenge we have with FaaS

One limitation you should know when you run Bolt apps on FaaS is that any asynchronous operations can be silently terminated once its internet-facing function responds to an incoming HTTP request from Slack. 

Examples of "asynchronous operations" here are `say`, `respond`, `app.client` calls, and whatever internally starts `Promise` operations separately from `ack()` completion.

Let's say you want to create an AWS Lambda function that is free from Slack's 3-second timeouts and the limitation I mentioned above. In this case, the following code is a solution.

```js
const { App, ExpressReceiver } = require('@slack/bolt');
import AWS = require('aws-sdk');

const receiver = new ExpressReceiver({
  signingSecret: process.env.SLACK_SIGNING_SECRET
});
const app = new App({
  receiver,
  token: process.env.SLACK_BOT_TOKEN,
});

app.command("/hello", ({ body, ack }) => {
  if (isLocalDevelopment()) {
    ack();
    mainLogic(body);
  } else {
    const lambda = new AWS.Lambda();
    const params: AWS.Lambda.InvocationRequest = {
      InvocationType: 'Event', // async invocation
      FunctionName: functionName,
      Payload: JSON.stringify(body)
    };
    const lambdaInvocation = await lambda.invoke(params).promise();
    // check the lambdaInvocation here
    ack();
  }
});

function mainLogic(body) {
  // do something it may take a long time
}

// frontend: internet-facing function handling requests from Slack
const awsServerlessExpress = require('aws-serverless-express');
const server = awsServerlessExpress.createServer(receiver.app);
module.exports.frontend = (event, context) => {
  awsServerlessExpress.proxy(server, event, context);
}

// backend: internal function for anything apart from acknowledging requests from Slack
module.exports.backend = async function (event, _context) {
  // if you reuse this function for other patterns, need to dispatch the events
  await mainLogic(event);
  return {
    statusCode: 200,
    body: JSON.stringify({ message: 'done' }),
  };
};
```

#### One possible idea I came up with

Let me refer to my comment in another issue: https://github.com/slackapi/bolt/issues/353#issuecomment-568811051

>One feasible idea is creating a FaaS support package as a 3rd-party one. That means the package won't be managed by @slackapi. The authors of such packages can be anyone. If someone starts such projects, I'll be more than happy to support them.

>As a first step, I'll publish my prototype implementation in my own repository and will start a new GitHub issue in this repository. I hope it will be a good starting point for people interested in FaaS support. Even though my prototype is still in very alpha quality, checking it could be helpful for the folks that may start new projects.

If Bolt changes its APIs and internals, it may be feasible to have a 3rd-party generalized npm package that offers proper FaaS supports for Bolt.

Here is my prototype demonstrating it: https://github.com/seratch/bolt-aws-lambda-proof-of-concept
It doesn't support all the features yet but it just works for supported cases. 

Here is a simple example code (just pasted from the repository's README). 
```js
const app = new TwoPhaseApp({
  token: process.env.SLACK_BOT_TOKEN,
  // this receiver tries to get AWS credentials from env variables by default
  receiver: new AwsLambdaReceiver({
    signingSecret: process.env.SLACK_SIGNING_SECRET
  })
});

app.command('/lambda')
  .ack(({ ack }) => {
    // phase1 function: compatible with current listener function
    ack('ack response');
  })
  .then(async ({ body, say }) => {
    // phase2 function: this one is invoked as another lambda function
    return say('How are you?').then(() => say("I'm good!"));
  });
```

Now developers don't need to directly use AWS Lambda SDK. `AwsLambdaReceiver` does everything for you: https://github.com/seratch/bolt-aws-lambda-proof-of-concept/blob/7b72a5e416977036e98c4bfbf40ee0567910766c/src/added/AwsLambdaReceiver.ts#L174-L189

Apart from the things specific to AWS, this approach is applicable to any others (not only FaaS). 

In this design, the two phases are:
* Phase 1: **internet-facing handler** - responsible for request acknowledgment and synchronous things (e.g., signature verification, dispatching requests, payload validation, and responding a message as part of HTTP responses)
* Phase 2: **internal function** - can do anything with the relayed request body asynchronously / use `respond` to send a message to a user asynchronously

Phase 2 function is supposed to return a single `Promise` as its result. The design makes easier to write code in idiomatic ways (like using `then`/`catch` and/or `Promise.all`) for working with `Promise`s.

#### Next steps

If someone is interested in starting with my PoC prototype to build a 3rd-party library, I'm happy to donate my code (it's under the MIT license) and will be more than happy to contribute to it as an individual.

To realize such 3rd parties, a few changes on the Bolt side are still needed. @aoberoi shared a related proposal at https://github.com/slackapi/bolt/issues/353. Join the conversation to share your thoughts and/or feedback.

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [ ] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [x] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/bolt/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.

Using app.action to monitor `app_home_openend` fires twice when a user clicks on the messages tab 

``` javascript
 app.event("app_home_opened", async context => {
    console.log(context.payload.tab);
  });
```

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [x] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/bolt/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.

---

### Bug Report

#### Reproducible in:

package version: 1.5.0

node version: v10.14.1

OS version(s): OSX 10.14.6

#### Steps to reproduce:

``` javascript
 app.event("app_home_opened", async context => {
    console.log(context.payload.tab);
  });
```

#### Expected result:

Clicking back and forth between the Home and Messages tab should appear in the console as:

home
messages
home 
messages 



#### Actual result:

![image](https://user-images.githubusercontent.com/11074280/71425060-96a5b180-264d-11ea-836d-4bf3b765997d.png)

###  Summary

This pull request depends on #358. The essential change which fixes #354 is https://github.com/slackapi/bolt/commit/c571f449bef56ebbdd75c3b321f4bc2ce5f0813c

### Requirements (place an `x` in each `[ ]`)

* [x] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/bolt/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).