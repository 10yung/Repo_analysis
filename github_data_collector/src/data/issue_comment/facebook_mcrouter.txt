Could you push the latest release to the ubuntu repo: https://github.com/facebook/mcrouter/tree/gh-pages/debrepo/bionic/pool/contrib/m/mcrouter ?
Hi team,

Description of the use case: 

I am using Mcrouter for HA and failover mechanism for Memcache. Both mcrouter and Memcache are deployed as kubernetes deployment and statefulset respectively. We have created a service for mcrouter and Memcache as ClusterIP and a headless service respectively. Now we provide the mcrouter service as Memcache endpoint for the application.

The command for the mcrouter pod's startup is "command: ["mcrouter","--port={{.service.port}}","--num-proxies=1","--config-str={\"pools\":{\"PoolA\":{\"servers\":[$(MEMCACHED_POOL)]}},\"route\":{\"type\":\"OperationSelectorRoute\",\"operation_policies\":{\"get\":\"MissFailoverRoute|Pool|PoolA\",\"set\":\"AllFastestRoute|Pool|PoolA\"},\"default_policy\":\"AllSyncRoute|Pool|PoolA\"}}"]
"

where MEMCACHED_POOL set as memcached-preproduction-statefulset-0.memcached-preproduction-service:11211","memcached-preproduction-statefulset-1.memcached-preproduction-service:11211","memcached-preproduction-statefulset-2.memcached-preproduction-service:11211 

Issue: 

When we try the failover for Memcache pods by deleting one of the Memcache pod as per the routing policy mcrouter must try to get the key sequentially in all the pods but it is not happening we get some errors from the application side.

Do you recommend any library to use as we are using gomemcache for the same? Do you suggest any best practices or changes in mcrouter config? Please do reply.
It would be great if mcrouter could provide an endpoint ootb for metrics-probing suitable for prometheus. There are some client-libs listed here: https://prometheus.io/docs/instrumenting/clientlibs/

I found https://github.com/Dev25/mcrouter_exporter/ but it does not seem maintained - maybe it could be adopted?
Updated readme URL for memcashed to use https instead of http.
So I haven't been able to find a quick answer to this. For simplicity in our network setup, we use DNS instead of IPs. However, sometimes we want to replace the memcached instance behind a DNS record with a new machine with a different IP address. Will mcrouter re-resolve a DNS record when a connection to a server fails and has to be reestablished?
Does **mcrouter** works on network **layer 4** ? For example **haproxy** which can work on layer 4 and layer 7 as well ?
After receiving `quit\r\nversion\r\n`, mcrouter crashes with message:
```mcrouter: network/McServerSession.cpp:166: void facebook::memcache::McServerSession::checkClosed(): Assertion `pendingWrites_.empty()' failed.```

Can be reproduced with `echo -e "quit\r\nversion" | nc <host> <port>`.

Stack trace from core dump:
```
#0  0x00007f2f17cb5428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54
#1  0x00007f2f17cb702a in __GI_abort () at abort.c:89
#2  0x00007f2f17cadbd7 in __assert_fail_base (fmt=<optimized out>, assertion=assertion@entry=0xe597b1 "pendingWrites_.empty()", file=file@entry=0xe59795 "network/McServerSession.cpp", line=line@entry=166,
    function=function@entry=0xe619e0 <facebook::memcache::McServerSession::checkClosed()::__PRETTY_FUNCTION__> "void facebook::memcache::McServerSession::checkClosed()") at assert.c:92
#3  0x00007f2f17cadc82 in __GI___assert_fail (assertion=assertion@entry=0xe597b1 "pendingWrites_.empty()", file=file@entry=0xe59795 "network/McServerSession.cpp", line=line@entry=166,
    function=function@entry=0xe619e0 <facebook::memcache::McServerSession::checkClosed()::__PRETTY_FUNCTION__> "void facebook::memcache::McServerSession::checkClosed()") at assert.c:101
#4  0x00000000007ff815 in facebook::memcache::McServerSession::checkClosed (this=0x7f2f14045800) at network/McServerSession.cpp:166
#5  0x00000000007ff952 in facebook::memcache::McServerSession::onTransactionCompleted (this=0x7f2f14045800, isSubRequest=<optimized out>) at network/McServerSession.cpp:195
#6  0x00000000007fecb4 in facebook::memcache::McServerRequestContext::~McServerRequestContext (this=0x7f2f142de928, __in_chrg=<optimized out>) at network/McServerRequestContext.cpp:66
#7  0x000000000081ffbb in folly::Optional<facebook::memcache::McServerRequestContext>::StorageNonTriviallyDestructible::clear (this=<optimized out>) at /usr/local/mcrouter/install/include/folly/Optional.h:423
#8  folly::Optional<facebook::memcache::McServerRequestContext>::StorageNonTriviallyDestructible::~StorageNonTriviallyDestructible (this=<optimized out>, __in_chrg=<optimized out>)
    at /usr/local/mcrouter/install/include/folly/Optional.h:417
#9  folly::Optional<facebook::memcache::McServerRequestContext>::~Optional (this=<optimized out>, __in_chrg=<optimized out>) at /usr/local/mcrouter/install/include/folly/Optional.h:96
#10 facebook::memcache::WriteBuffer::~WriteBuffer (this=0x7f2f142de400, __in_chrg=<optimized out>) at network/WriteBuffer.cpp:33
#11 0x0000000000804f56 in std::default_delete<facebook::memcache::WriteBuffer>::operator() (this=<optimized out>, __ptr=0x7f2f142de400) at /usr/include/c++/5/bits/unique_ptr.h:76
#12 facebook::memcache::UniqueIntrusiveList<facebook::memcache::WriteBuffer, &facebook::memcache::WriteBuffer::hook_, std::default_delete<facebook::memcache::WriteBuffer> >::~UniqueIntrusiveList()::{lambda(facebook::memcache::WriteBuffer*)#1}::operator()(facebook::memcache::WriteBuffer*) const (t=0x7f2f142de400, __closure=<optimized out>) at ../../mcrouter/lib/network/UniqueIntrusiveList.h:46
#13 boost::intrusive::list_impl<boost::intrusive::mhtraits<facebook::memcache::WriteBuffer, boost::intrusive::list_member_hook<boost::intrusive::link_mode<(boost::intrusive::link_mode_type)1>, void, void>, &facebook::memcache::WriteBuffer::hook_>, unsigned long, true, void>::clear_and_dispose<facebook::memcache::UniqueIntrusiveList<facebook::memcache::WriteBuffer, &facebook::memcache::WriteBuffer::hook_, std::default_delete<facebook::memcache::WriteBuffer> >::~UniqueIntrusiveList()::{lambda(facebook::memcache::WriteBuffer*)#1}>(facebook::memcache::UniqueIntrusiveList<facebook::memcache::WriteBuffer, &facebook::memcache::WriteBuffer::hook_, std::default_delete<facebook::memcache::WriteBuffer> >::~UniqueIntrusiveList()::{lambda(facebook::memcache::WriteBuffer*)#1}) (this=0x7f2f14045900, disposer=...) at /usr/include/boost/intrusive/list.hpp:740
#14 facebook::memcache::UniqueIntrusiveList<facebook::memcache::WriteBuffer, &facebook::memcache::WriteBuffer::hook_, std::default_delete<facebook::memcache::WriteBuffer> >::~UniqueIntrusiveList (this=0x7f2f14045900,
    __in_chrg=<optimized out>) at ../../mcrouter/lib/network/UniqueIntrusiveList.h:46
#15 facebook::memcache::McServerSession::~McServerSession (this=0x7f2f14045800, __in_chrg=<optimized out>) at network/McServerSession.h:38
#16 0x0000000000805029 in facebook::memcache::McServerSession::~McServerSession (this=0x7f2f14045800, __in_chrg=<optimized out>) at network/McServerSession.h:38
#17 0x0000000000800854 in facebook::memcache::McServerSession::readDataAvailable (this=0x7f2f14045800, len=<optimized out>) at network/McServerSession.cpp:272
#18 0x0000000000ac4893 in folly::AsyncSocket::handleRead (this=0x7f2f141e5d80) at /usr/local/mcrouter/pkgs/folly/folly/io/async/AsyncSocket.cpp:1961
#19 0x0000000000ac3160 in folly::AsyncSocket::ioReady (this=0x7f2f141e5d80, events=2) at /usr/local/mcrouter/pkgs/folly/folly/io/async/AsyncSocket.cpp:1752
#20 0x0000000000acb5a7 in folly::AsyncSocket::IoHandler::handlerReady (this=0x7f2f141e5f08, events=2) at /usr/local/mcrouter/pkgs/folly/folly/io/async/AsyncSocket.h:1020
#21 0x0000000000ad7dfd in folly::EventHandler::libeventCallback (fd=718, events=2, arg=0x7f2f141e5f08) at /usr/local/mcrouter/pkgs/folly/folly/io/async/EventHandler.cpp:161
#22 0x00007f2f197974c9 in event_base_loop () from /usr/lib/x86_64-linux-gnu/libevent-2.0.so.5
#23 0x0000000000a93e90 in folly::EventBase::loopBody (this=0x7f2f16c4a300, flags=1, ignoreKeepAlive=false) at /usr/local/mcrouter/pkgs/folly/folly/io/async/EventBase.cpp:335
#24 0x0000000000a939e8 in folly::EventBase::loopOnce (this=0x7f2f16c4a300, flags=0) at /usr/local/mcrouter/pkgs/folly/folly/io/async/EventBase.cpp:276
#25 0x0000000000505ffe in facebook::memcache::mcrouter::detail::serverLoop<facebook::memcache::MemcacheRouterInfo, facebook::memcache::MemcacheRequestHandler> (router=..., threadId=<optimized out>, evb=..., worker=...,
    standaloneOpts=...) at ../mcrouter/Server-inl.h:110
#26 0x00000000007b77ee in std::function<void (unsigned long, folly::EventBase&, facebook::memcache::AsyncMcServerWorker&)>::operator()(unsigned long, folly::EventBase&, facebook::memcache::AsyncMcServerWorker&) const (__args#2=...,
    __args#1=..., __args#0=0, this=<optimized out>) at /usr/include/c++/5/functional:2267
#27 facebook::memcache::McServerThread::startThread()::{lambda()#2}::operator()() const (__closure=0x7f2f16c40968) at network/AsyncMcServer.cpp:222
#28 0x00007f2f1840bc80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#29 0x00007f2f18afb6ba in start_thread (arg=0x7f2f16bff700) at pthread_create.c:333
#30 0x00007f2f17d8741d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
```
I have been trying to develop a couple of changes for mcrouter and want to add proper unit tests as part of that effort. As a starting point I am trying to run the existing unit tests but I keep getting failures while building the unit tests.

**Operating System:** `Ubuntu 16.04`
**Branch Tags Tested So Far:**
* `release-40-0`
* `release-39-0`

**Error:**
```
make  mcrouter_network_test
make[5]: Entering directory '/home/stack/mcrouter/mcrouter/lib/network/test'
/bin/bash ../../../libtool  --tag=CXX   --mode=link g++ -std=gnu++14  -DLIBMC_FBTRACE_DISABLE -DDISABLE_COMPRESSION  -Wno-missing-field-initializers -Wno-deprecated -W -Wall -Wextra -Wno-unused-parameter -fno-strict-aliasing -g -O2  -L/home/stack/mcrouter-install/install/lib -ljemalloc  -o mcrouter_network_test mcrouter_network_test-AccessPointTest.o mcrouter_network_test-AsyncMcClientTestSync.o mcrouter_network_test-CarbonMessageDispatcherTest.o mcrouter_network_test-CarbonMockMcTest.o mcrouter_network_test-CarbonQueueAppenderTest.o gen/mcrouter_network_test-CarbonTestMessages.o mcrouter_network_test-McAsciiParserTest.o mcrouter_network_test-McServerAsciiParserTest.o mcrouter_network_test-MockMc.o mcrouter_network_test-MockMcServer.o mcrouter_network_test-SessionTest.o mcrouter_network_test-SessionTestHarness.o mcrouter_network_test-TestClientServerUtil.o mcrouter_network_test-TestMcAsciiParserUtil.o ../../../lib/libmcrouter.a ../../../lib/libtestmain.la ../../../lib/network/libtest_util.a -lwangle -lfizz -lsodium -lfolly -lfizz -lsodium -lfolly -ldl -ldouble-conversion -lz -lssl -lcrypto -levent -lgflags -lglog  -L/usr/lib/x86_64-linux-gnu -lboost_context -lboost_filesystem       -lboost_program_options -lboost_system -lboost_regex       -lboost_thread -lpthread -pthread -ldl -lunwind
libtool: link: g++ -std=gnu++14 -DLIBMC_FBTRACE_DISABLE -DDISABLE_COMPRESSION -Wno-missing-field-initializers -Wno-deprecated -W -Wall -Wextra -Wno-unused-parameter -fno-strict-aliasing -g -O2 -o mcrouter_network_test mcrouter_network_test-AccessPointTest.o mcrouter_network_test-AsyncMcClientTestSync.o mcrouter_network_test-CarbonMessageDispatcherTest.o mcrouter_network_test-CarbonMockMcTest.o mcrouter_network_test-CarbonQueueAppenderTest.o gen/mcrouter_network_test-CarbonTestMessages.o mcrouter_network_test-McAsciiParserTest.o mcrouter_network_test-McServerAsciiParserTest.o mcrouter_network_test-MockMc.o mcrouter_network_test-MockMcServer.o mcrouter_network_test-SessionTest.o mcrouter_network_test-SessionTestHarness.o mcrouter_network_test-TestClientServerUtil.o mcrouter_network_test-TestMcAsciiParserUtil.o -pthread  -L/home/stack/mcrouter-install/install/lib ../../../lib/libmcrouter.a ../../../lib/.libs/libtestmain.a -ljemalloc ../../../lib/network/libtest_util.a -lwangle -lfizz -lsodium -lfolly -ldouble-conversion -lz -lssl -lcrypto -levent -lgflags -lglog -L/usr/lib/x86_64-linux-gnu -lboost_context -lboost_filesystem -lboost_program_options -lboost_system -lboost_regex -lboost_thread -lpthread -ldl -lunwind -pthread
mcrouter_network_test-AsyncMcClientTestSync.o: In function `apache::thrift::CompactProtocolWriter::writeBinary(folly::IOBuf const&)':
/home/stack/mcrouter-install/install/include/thrift/lib/cpp2/protocol/CompactProtocol.tcc:319: undefined reference to `apache::thrift::protocol::TProtocolException::throwExceededSizeLimit()'
mcrouter_network_test-TestClientServerUtil.o: In function `apache::thrift::CompactProtocolWriter::writeBinary(folly::IOBuf const&)':
/home/stack/mcrouter-install/install/include/thrift/lib/cpp2/protocol/CompactProtocol.tcc:319: undefined reference to `apache::thrift::protocol::TProtocolException::throwExceededSizeLimit()'
collect2: error: ld returned 1 exit status
Makefile:447: recipe for target 'mcrouter_network_test' failed
make[5]: *** [mcrouter_network_test] Error 1
make[5]: Leaving directory '/home/stack/mcrouter/mcrouter/lib/network/test'
```
Steps to reproduce:
1. Build Mcrouter from source
2. `cd mcrouter/mcrounter`
3. Run `make check`

I haven't been able to determine whether or not these unit tests are running as part of the normal CI process.

Does anyone have any ideas what might be causing these failures?
```
/home/ubuntu/hhvm/third-party/mcrouter/mcrouter/routes/ShardSplitter.h:73:48: error: could not convert ‘1’ from ‘int’ to ‘const folly::dynamic&’
```
Hi,

I've been trying to  dockerfile build mcrouter on a vanilla Ubuntu 16.04 instance using scripts/install_ubuntu_16.04.sh


-- Boost version: 1.58.0
-- Found the following Boost libraries:
--   filesystem
--   system
--   thread
--   chrono
--   date_time
--   atomic
-- Found folly: /usr/local/mcrouter/install
-- Found YARPL: /usr/local/mcrouter/install
-- Found rsocket: /usr/local/mcrouter/install
-- Found fizz: /usr/local/mcrouter/install
CMake Error at CMakeLists.txt:104 (find_package):
  Could not find a package configuration file provided by "fmt" with any of
  the following names:

    fmtConfig.cmake
    fmt-config.cmake

  Add the installation prefix of "fmt" to CMAKE_PREFIX_PATH or set "fmt_DIR"
  to a directory containing one of the above files.  If "fmt" provides a
  separate development package or SDK, be sure it has been installed.


-- Configuring incomplete, errors occurred!
See also "/usr/local/mcrouter/pkgs/fbthrift/build/CMakeFiles/CMakeOutput.log".
See also "/usr/local/mcrouter/pkgs/fbthrift/build/CMakeFiles/CMakeError.log".