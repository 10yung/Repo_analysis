This request is not a proper branch (`swift/4.0`), but I will send it for the time being.
I tried both Carthage and Pod and both failed to compile in the end.

Is there support yet for Swift 4.1 or when is it planned?
I see that there is a branch for Swift 3 support open. What is the roadmap for having the Swift 3 branch merged and available publicly via cocoapods? 

(Specifically, looking to consume the library in a podspec, where the branch cannot be specified)
Can you help please? Found some case when `failure` block is called after task is fulfilled. I don't understand how could it be possible but from stacktrace of XCode `cancel` method is called from task `deinit`. This cause the task to be handled as canceled in my code, but I has fulfilled it. I don't understand what I made wrong. 

<img width="350" alt="screen shot 2016-10-03 at 10 16 08 pm" src="https://cloud.githubusercontent.com/assets/7643346/19050483/72fab572-89b7-11e6-9386-fba586c931f7.png">

I implement "when" method. 
It corresponds to multiple value type.
# Usage
- success pattern

``` swift
        let task1 = Task<Float, String, NSError?> { fulfill, reject in fulfill("Success") }
        let task2 = Task<Float, Int, NSError?> { fulfill, reject in fulfill(1) }
        let task3 = Task<Float, Double, NSError?> { fulfill, reject in fulfill(1.1) }

        Task<Float, (String, Int, Double), NSError>.when((task1, task2, task3)).success { (string, int, double) -> Void in
            print(string) // -> Success
            print(int) // -> 1
            print(double) // -> 1.1
        }.failure { (error, isCancelled) -> Void in
            fatalError()
        }
```

*failure pattern

``` swift
        let task1 = Task<Float, String, String> { fulfill, reject in fulfill("Success") }
        let task2 = Task<Float, Int, String> { fulfill, reject in fulfill(1) }
        let task3 = Task<Float, Double, String> { fulfill, reject in  reject("Rejected") }

        Task<Float, (String, Int, Double), String>.when((task1, task2, task3)).success { (string, int, double) -> Void in
            fatalError()
        }.failure { (error, isCancelled) -> Void in
            print(error) // -> Optional("Rejected")
        }
```
