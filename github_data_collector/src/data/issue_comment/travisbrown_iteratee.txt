- https://meta.plasm.us/posts/2016/01/08/yet-another-iteratee-library/ examples don't compile (with 0.17.0)
#171 addresses the main part of #166, but I'd also like to have converters allowing us to go between the iteratee abstractions and fs2's streams.

I'm not sure exactly what this would look like, and I don't want to block 0.9.0 waiting for us to figure it out, but it should happen before 1.0.
In #168 for example the fact that we're only testing `FutureFileModule` (not `files.future`) allowed an initialization order bug to slip through. I think that's a somewhat exceptional case, and the lack of coverage is caught by Scoverage, but it would be better not to have to worry about our test code being so abstract that stuff like that can slip through.
I'm working on a new iteratee-parsing module with iteratee-powered parser combinators, and I really want to be able to parse strings as streams of characters without representing chunks as sequences of characters. This PR is a first step in that direction.

There's no measurable impact on performance (at least in the benchmarks I've looked at so far), since the `IsSeqLike` instances get instantiated once for each type involved, and in the case where the chunks _are_ sequences, the conversion is just identity.

This is a breaking change, but only to fairly internal APIs.
@johnynek has several questions about performance on #129 that deserve a closer look, probably after #141 (which includes a Cats-0.8.0 reworking of #129) gets merged.


It would be nice to have something like `gatherMap` that would allow us to run a transformation in parallel over batches of items. I can imagine a method like this:

``` scala
def gatherMap[F[_]: Monad, O, I]
  (gather: Vector[F[I]] => F[Vector[I]], size: Int)(f: O => F[I]):: Enumeratee[F, O, I]
```

This would be a little nicer if we had a `NonDeterminism` type class, and I guess we could introduce our own, but passing in a `gather` function isn't too bad, either. I'd imagine the implementation would be pretty simple with `sequenceI`, but I haven't written it out yet.

See @johnynek's question [here](https://github.com/travisbrown/iteratee/pull/104/files#r75601250).

> I wonder if combine is a better name here. Algebird used plus/sum but @non really does not like that except for explicitly"additive" (in name monoid)

Like in scalaz's Iteratee lib

It would be nice to have a buffer Enumeratee in order to speed latency dependent iteratees up.
