<!--
Thanks a lot for reporting issues to Gauge! This is the issue tracker for reporting bugs or for requesting new feature and enhancements.

If you have any support related questions, please refer our documentation at https://gauge.org/documentation/user/current/. You can even ask questions on Google groups (http://groups.google.com/forum/#!forum/getgauge) or on spectrum (https://spectrum.chat/gauge).

This is the issue tracker for Gauge core. Find other components at https://github.com/getgauge

Please delete irrelevant sections below. 
-->

### Expected behavior
Tell us what should happen

### Actual behavior
Tell us what happens instead

### Steps to reproduce
1.
2.
3.

### Gauge version
```
Run gauge -v on your system and paste the results here.
```

These are the release activities to be performed when releasing Gauge.
## Pre release

- [ ] Check all commits that has been added with this release and make sure the relevant issues are tested/closed.
- [ ] Check if all relevant tests(FTs and LSP tests on gocd, travis, appveyor) are passing
- [ ] Check if any plugins need to be released and release them.
- [ ] Make sure there are no compatibility issues with released plugins.
- [ ] Take a call on release.

## Release
- [ ] Update docs to have correct version of Gauge in installation section
- [ ] Trigger the gauge-deploy pipeline
- [ ] Make a note of all external contributors and add thank you note in release notes
- [ ] Review the release notes and publish it.
- [ ] Trigger the `github-publish` stage of **Gauge-Deploy** pipeline.
- [ ] Trigger(or check if triggered) the website pipeline
- [ ] Trigger(or check if triggered) the documentation pipeline
- [ ] Trigger(or check if triggered) the manpage pipeline

## Post release

- [ ] Make sure website, docs are pointing to the correct versions
- [ ] Send release mail to google groups
- [ ] Track the brew PR and make sure it gets merged
- [ ] Bump up gauge version for further development
```
java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor527.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at com.intellij.execution.process.ProcessHandler$2.invoke(ProcessHandler.java:214)
	at com.sun.proxy.$Proxy25.onTextAvailable(Unknown Source)
	at com.intellij.execution.process.ProcessHandler.notifyTextAvailable(ProcessHandler.java:188)
	at com.intellij.execution.process.ColoredProcessHandler.textAvailable(ColoredProcessHandler.java:83)
	at com.intellij.execution.process.ColoredProcessHandler.coloredTextAvailable(ColoredProcessHandler.java:57)
	at com.intellij.execution.process.AnsiEscapeDecoder.processTextChunk(AnsiEscapeDecoder.java:99)
	at com.intellij.execution.process.AnsiEscapeDecoder.escapeText(AnsiEscapeDecoder.java:63)
	at com.intellij.execution.process.ColoredProcessHandler.notifyTextAvailable(ColoredProcessHandler.java:46)
	at com.intellij.execution.process.BaseOSProcessHandler$SimpleOutputReader.onTextAvailable(BaseOSProcessHandler.java:179)
	at com.intellij.util.io.BaseOutputReader.sendText(BaseOutputReader.java:211)
	at com.intellij.util.io.BaseOutputReader.processInput(BaseOutputReader.java:195)
	at com.intellij.util.io.BaseOutputReader.readAvailableNonBlocking(BaseOutputReader.java:114)
	at com.intellij.util.io.BaseDataReader.readAvailable(BaseDataReader.java:77)
	at com.intellij.util.io.BaseDataReader.doRun(BaseDataReader.java:155)
	at com.intellij.util.ConcurrencyUtil.runUnderThreadName(ConcurrencyUtil.java:208)
	at com.intellij.util.io.BaseDataReader.lambda$start$0(BaseDataReader.java:61)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: com.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Unterminated string at line 2 column 1 path $.message
	at com.google.gson.Gson.fromJson(Gson.java:942)
	at com.google.gson.Gson.fromJson(Gson.java:892)
	at com.google.gson.Gson.fromJson(Gson.java:841)
	at com.google.gson.Gson.fromJson(Gson.java:813)
	at com.thoughtworks.gauge.execution.runner.GaugeOutputToGeneralTestEventsProcessor.processServiceMessages(GaugeOutputToGeneralTestEventsProcessor.java:61)
	at com.intellij.execution.testframework.sm.runner.OutputToGeneralTestEventsConverter.processConsistentText(OutputToGeneralTestEventsConverter.java:114)
	at com.intellij.execution.testframework.sm.runner.OutputToGeneralTestEventsConverter$1.onTextAvailable(OutputToGeneralTestEventsConverter.java:71)
	at com.intellij.execution.testframework.sm.runner.OutputEventSplitter.flushInternal(OutputEventSplitter.kt:166)
	at com.intellij.execution.testframework.sm.runner.OutputEventSplitter.flushInternal$default(OutputEventSplitter.kt:151)
	at com.intellij.execution.testframework.sm.runner.OutputEventSplitter.processInternal(OutputEventSplitter.kt:98)
	at com.intellij.execution.testframework.sm.runner.OutputEventSplitter.process(OutputEventSplitter.kt:72)
	at com.intellij.execution.testframework.sm.runner.OutputToGeneralTestEventsConverter.process(OutputToGeneralTestEventsConverter.java:97)
	at com.intellij.execution.testframework.sm.SMTestRunnerConnectionUtil$2.onTextAvailable(SMTestRunnerConnectionUtil.java:213)
	... 24 more
Caused by: com.google.gson.stream.MalformedJsonException: Unterminated string at line 2 column 1 path $.message
	at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1568)
	at com.google.gson.stream.JsonReader.nextQuotedValue(JsonReader.java:1031)
	at com.google.gson.stream.JsonReader.nextString(JsonReader.java:815)
	at com.google.gson.internal.bind.TypeAdapters$16.read(TypeAdapters.java:402)
	at com.google.gson.internal.bind.TypeAdapters$16.read(TypeAdapters.java:390)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)
	at com.google.gson.Gson.fromJson(Gson.java:927)
	... 36 more

```
### Steps to reproduce
1. run gauge on intelij 2019.2.1
2.
3.

### Gauge version
```
Gauge version: 1.0.6
Commit Hash: 2bc49db

Plugins
-------
html-report (4.0.8)
java (0.7.3)
screenshot (0.0.1)
spectacle (0.1.3)

```

**Requirement**
Would like to have Test Report Aggregator (html / xml) to show overall testing statistics.

**Example:** 

https://github.com/jenkinsci/test-results-aggregator-plugin
Above plugin does support only for JUnit and TestNG reports.

**Why this feature?**

We have 50+ test jobs in jenkins and each producing html / xml reports individually. If we have feasible to display overall summary report where we can see  PASS / FAIL / SKIPPED status in each jobs and how much execution time and overall execution time, it is very convenient for us to see all results in one place instead of going to each job to check results.

**Features required**

Need groovy script for pipeline to get overall summary report.

1. Can add groups / teams - where we can get summary for each team results + overall summary for entire application.

2. Job Name, Health checks, Status, Total Tests, PASS, FAIL, SKIPPED, Test Pass Percentage, Duration and Last Run

![Screen Shot 2563-01-07 at 2 57 02 PM](https://user-images.githubusercontent.com/13374564/71878365-0c397380-315e-11ea-9941-db03ff42f123.png)

### Expected behavior
Safari pops up and executes my tests.

### Actual behavior
If I execute the tests locally, Safari pops up and everything works fine. If I run the tests through Jenkins while having the Mac configured as an agent, they fail with the following error:

```
Python: 3.7.5
  Error Message: Message: Service /usr/bin/safaridriver unexpectedly exited. Status code was: 1
  
  Stacktrace: 
  Traceback (most recent call last):
    File "/usr/local/lib/python3.7/site-packages/getgauge/executor.py", line 31, in execute_method
      step.impl(*params)
    File "/Users/jenkinsslave/jenkins_home/workspace/_collect_feature_gauge-mac-debug/tests/step_impl/utils/driver.py", line 38, in init
      Driver.driver = webdriver.Safari(executable_path=driver_executable_path)
    File "/usr/local/lib/python3.7/site-packages/selenium/webdriver/safari/webdriver.py", line 57, in __init__
      self.service.start()
    File "/usr/local/lib/python3.7/site-packages/selenium/webdriver/common/service.py", line 98, in start
      self.assert_process_still_running()
    File "/usr/local/lib/python3.7/site-packages/selenium/webdriver/common/service.py", line 111, in assert_process_still_running
      % (self.path, return_code)
  selenium.common.exceptions.WebDriverException: Message: Service /usr/bin/safaridriver unexpectedly exited. Status code was: 1
```

I read that this issue might be related to the way the agent connects to the master. I tried both via SSH and Java direct connection.
All other "webdrivers" work fine (Chrome and Firefox), only Safari fails.

In the console app I see the same error message:
```
XPC connection to com.apple.WebDriver.HTTPService was interrupted, the server probably exited or crashed.
```

I also tried to start the safaridriver process manually with:
```
# safaridriver -p 0
Attempting to establish XPC connection to com.apple.WebDriver.HTTPService.
Configuring server.
Server started.
```
macOS 10.13.6, Mac Pro

### Steps to reproduce
1. Setup Mac as Jenkins agent (connect agent through Java *not* SSH)
2. Start tests in Jenkins job with `gauge run --env safari specs`

### Gauge version
```
Gauge version: 1.0.6
Commit Hash: 2bc49db
```

<!--
Thanks a lot for reporting issues to Gauge! This is the issue tracker for reporting bugs or for requesting new feature and enhancements.

If you have any support related questions, please refer our documentation at https://gauge.org/documentation/user/current/. You can even ask questions on Google groups (http://groups.google.com/forum/#!forum/getgauge) or on gitter (https://gitter.im/getgauge/chat).

This is the issue tracker for Gauge core. Find other components at https://github.com/getgauge

Please delete irrelevant sections below. 
-->

### Expected behavior
`gauge run specs` should exit with a non-zero code when there are failures at the hooks level. These failures should be considered as test failures and should be included in reports as same. This is especially useful when integrating with CI/CD tools the current behavior marks the build(s) as `PASSED` even though there are failures during setup and tests might not run, thus leading to false positives.

### Actual behavior
Any failure(s) at the `hooks` level is not reported in XML report and `gauge run spec` command returns `0` as the exit code even when there are failures in `before_suite`, `before_spec` etc. hooks. This is a concern when integrating with CI/CD tools as jobs/builds are marked as `PASSED` even though there are failures.

### Gauge version
Gauge version: 1.0.5
Commit Hash: 562f036

Plugins
python (0.3.4)
xml-report (0.2.1)

<!--
Thanks a lot for reporting issues to Gauge! This is the issue tracker for reporting bugs or for requesting new feature and enhancements.

If you have any support related questions, please refer our documentation at https://gauge.org/documentation/user/current/. You can even ask questions on Google groups (http://groups.google.com/forum/#!forum/getgauge) or on gitter (https://gitter.im/getgauge/chat).

This is the issue tracker for Gauge core. Find other components at https://github.com/getgauge

Please delete irrelevant sections below. 
-->

### Expected behavior
It should print same string what I am passing in Gauge.writeMessage()

### Actual behavior
I am passing below string in Gauge.writeMessage() but in html report why its showing <br/>
curl 'https://url' \
--header 'Accept: */*' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--header 'Host: auth.staging.com' \
--header 'Connection: Keep-Alive' \
--header 'User-Agent: Apache-HttpClient/4.5.3 (Java/13.0.1)' \
--data-binary 'password=password&username=username' \
--compressed \
--insecure \
--verbose


curl ‘https://url' <br/> –header ‘Content-Type: application/x-www-form-urlencoded’ <br/> –header ‘Host: auth.staging..com’ <br/> –header ‘Connection: Keep-Alive’ <br/> –header ‘User-Agent: Apache-HttpClient/4.5.3 (Java/13.0.1)’ <br/> –data-binary ‘password=password&username=username’ <br/> –compressed <br/> –insecure <br/> –verbose

### Gauge version
0.6.9


I opened a ticket for Json plugin and below is the link for the same. Its been 6 days and nobody responded to me so thought of opening a ticket here to see if somebody can take a look at the issue.
https://github.com/getgauge-contrib/json-report/issues/14

Problem Statement --> Json plugin, for the same test, sometimes shows steps details and sometime shows details only at spec level.

I ran my test twice and both the times the report is different. In one report i see that all the step details are present but the second report does not has any step detail. The behavior is inconsistent.

It is happening for both 0.3.0 and 0.3.2

Attached are the files for your reference.
[Json.Results.zip](https://github.com/getgauge/gauge/files/3995771/Json.Results.zip)


### Expected behavior
The Json structure should be same

### Actual behavior
The Json structure is not same

### Gauge version
Gauge version: 1.0.4
Commit Hash: 3a9a647

Plugins
-------
dotnet (0.1.2.nightly-2019-02-14)
html-report (4.0.7)
json-report (0.3.0)
screenshot (0.0.1)
xml-report (0.2.1)
Messages to the console should be printed via logger package

The logger package manages the output to be printed correctly. It prints in json format if machine readable flag is provided. It decides when it is safe to print to the console ( if gauge is started with lsp, it will not print). So it is best to let it handle all prints to process standard  output

There are many places where we directly print to the console in Gauge. These should be printed via the logger.

### Current problem 

Gauge's default screenshot tool captures the current display. This does not work on headless environments like CI where tests are run without a display. 

It is not clear that a tester can or has to override the default screenshot behaviour

### Suggestion

When the default screenshot tool fails to take a screenshot because of the environment add a note or warning in the report about the problem and link to the documentation about how to take custom screenshots.

