Paste multiple lines text: 

![ã‚¹ã‚¯ãƒªãƒ¼ãƒ³ã‚·ãƒ§ãƒƒãƒˆ 2020-01-17 19 00 17](https://user-images.githubusercontent.com/7702653/72603098-bd5cbc80-395b-11ea-864a-e28b825cfb94.png)

Then, text is pasted as **other blocks**. 
![ã‚¹ã‚¯ãƒªãƒ¼ãƒ³ã‚·ãƒ§ãƒƒãƒˆ 2020-01-17 19 00 32](https://user-images.githubusercontent.com/7702653/72603314-23494400-395c-11ea-81a9-b718f2cbc962.png)

I expected that text is pasted in **same block**. 
And I think that it is more useful!
![ã‚¹ã‚¯ãƒªãƒ¼ãƒ³ã‚·ãƒ§ãƒƒãƒˆ 2020-01-17 19 00 56](https://user-images.githubusercontent.com/7702653/72603294-188eaf00-395c-11ea-9573-756d67a773ad.png)

https://github.com/codex-team/editor.js/issues/1012
https://github.com/codex-team/editor.js/issues/1003
Example, paste the following plain text data
```
<b>bold</b>
```

EditorJS displays

**bold**

I'll write more detail soon. ðŸ˜ƒ
I'll write more detail soon. ðŸ˜ƒ
I seem to have a problem when trying to use EditorJs, even in a simple web page.

After installing EditorJs with npm, I made two simple files : an HTML file and a Javascript file.

Here's my `index.html` page :
```html
<html>
<head>
</head>
<body>
    <h1>Hello World !</h1>
    <div id="editorjs"></div>
    <script src="./index.js"></script>
</body>
</html>
```

Here's my `index.js` file :
```javascript
import EditorJs from '@editorjs/editorjs';

const editor = new EditorJs({
    
});
```
I get the following error message on Firefox :
```
SyntaxError: import declarations may only appear at top level of a module
index.js:1
```

When importing the `index.js` file as a module :
```html
<script src="./index.js" type="module"></script>
```

I get the following :
```
Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource (Reason: CORS request not http).
Module source URI is not allowed in this document
index.html:12:1
```

Any ideas ?
Thanks.
We wanted to use EditorJS with customElements (we use `lit-html` internally). Our reasons behind this is because we wanted to isolate the editor styles away from the main dom so that our CMS styles don't make the editor content look strange. This way we can also customize the CSS nicely so that the end user looks at the formatting and text with about the same styles as they would on the frontend.

We previously used a Iframe for this (which still works), but we would like to avoid that if possible.

With the editor in the customElement, we get errors like these:
![editorjs_shadowdom](https://user-images.githubusercontent.com/84479/72177431-9260ee80-33d8-11ea-906f-279249606cde.png)

Here is the code that creates the customElement:

```
import '@editorjs/editorjs/dist/editor.js';
import {LitElement, html, css} from 'lit-element';


class HTMLEngine {
  constructor(inputEl, templateSelector, editorConfig) {
    this.inputEl = inputEl;
    this.editorConfig = editorConfig;
  }

  read() {
    let doc = new DOMParser().parseFromString(this.inputEl.value, 'text/html');
    var dataTemplate = doc.querySelector('[data-editor-data]');
    if (dataTemplate) {
      var jsonData = dataTemplate.dataset.editorData;
      return JSON.parse(jsonData);
    }
    return null;
  }

  write(outputData) {
    var editorData = JSON.stringify(outputData);
    var renderedBlocks = '';
    outputData.blocks.forEach((block) => {
      renderedBlocks += this.renderBlock(block);
    });
    this.inputEl.value = `<template data-editor-data='${editorData}'></template>
      ${renderedBlocks}`;
  }

  renderBlock(block) {
    return this.editorConfig.tools[block.type].HTMLGenerator(block.data) + '\n';
  }
}


class OstinatoEditorWidget extends LitElement {
  static get properties() {
    return {
      saveTo: { type: String },
      editorConfig: { type: String },
      editorFramePath: { type: String },
    }
  }

  constructor() {
    super();
    this.saveTo = '';
    this.editorConfig = '';
    this.editorFramePath = '';
  }

  connectedCallback() {
    super.connectedCallback();
    this.saveToEl = document.querySelector(this.saveTo);
    // Now import our editor config.
    import(this.editorConfig).then((m) => {
      this.config = m.editorConfig;
      this.engine = new HTMLEngine(
        this.saveToEl,
        '[editorjs-data]',
        this.config);
      this.initEditor();
    });
  }

  initEditor() {
    this.config.data = this.engine.read();
    this.config.holder = this.shadowRoot.getElementById('editor');

    this.config.onChange = function() {
      this.editor.save().then((outputData) => {
        if (outputData) this.engine.write(outputData);
      });
    }.bind(this);

    console.log(this.config);

    this.editor = new EditorJS(this.config);
  }

  static get styles() {
    return css`
      :host {
        display: block;
        width: 100%;
      }

      #editor {
        width: 100%;
        box-shadow: 0 0 1px 2px #e3e3e3;
      }
    `;
  }

  render() {
    return html`
      <div id="editor"></div>
    `;
  }
}

customElements.define('ostinato-editor-widget', OstinatoEditorWidget);
```

And this is how we are using the element:

```
{% load staticfiles %}

<textarea name="{{ widget.name }}"
  {% include "django/forms/widgets/attrs.html" %}
  style="display: none;">{% if widget.value %}{{ widget.value }}{% endif %}</textarea>

<ostinato-editor-widget
  saveTo='[name="{{ widget.name }}"]'
  editorConfig="{{ config_module }}">
</ostinato-editor-widget>
```

*Edit*: Oh and here is the config that is used.

```
export const editorConfig = {
  initialBlock: "paragraph",
  minHeight: "400px",
  autoFocus: true,

  tools: {
    header: {
      class: Header,
      config: {
        placeholder: 'Header Text'
      },
      shortcut: 'CMD+SHIFT+H',
      HTMLGenerator: (data) => `<h${data.level}>${data.text}</h${data.level}>`,
    },

    paragraph: {
      class: Paragraph,
      shortcut: 'CMD+SHIFT+P',
      HTMLGenerator: (data) => `<p>${data.text}</p>`,
    },

    list: {
      class: List,
      inlineToolbar: true,
      shortcut: 'CMD+SHIFT+L',
      HTMLGenerator: (data) => {
        let tagname = data.style.charAt(0) + 'l';
        var renderItem = (item) => { return `<li>${item}</li>`; }
        var items = '';
        data.items.forEach((item) => { items += renderItem(item); });
        return `<${tagname}>${items}</${tagname}>`;
      },
    },

    quote: {
      class: Quote,
      inlineToolbar: true,
      config: {
        quotePlaceholder: 'Enter a quote',
        captionPlaceholder: 'Caption or Author',
      },
      shortcut: 'CMD+SHIFT+O',
      HTMLGenerator: (data) => {
        return `<blockquote style="quote-${data.alignment}">
          <p class="quote-text">${data.text}</p>
          <p class="quote-caption">${data.caption}</p>
        </blockquote>`;
      },
    },

    warning: {
      class: Warning,
      inlineToolbar: true,
      shortcut: 'CMD+SHIFT+W',
      config: {
        titlePlaceholder: 'Warning Title',
        messagePlaceholder: 'Warning Message',
      },
      HTMLGenerator: (data) => {
        return `<div class="warning">
            <p class="warning-title">${data.title}</p>
            <p class="warning-message">${data.message}</p>
          </div>`;
      },
    },

    marker: {
      class:  Marker,
      shortcut: 'CMD+SHIFT+M'
    },

    code: {
      class:  CodeTool,
      shortcut: 'CMD+SHIFT+C',
      HTMLGenerator: (data) => { return `<code>${data.code}</code>`; }
    },

    delimiter: {
      class: Delimiter,
      HTMLGenerator: () => { return `<div class="ce-delimiter"></div>` }
    },

    inlineCode: {
      class: InlineCode,
      shortcut: 'CMD+SHIFT+C'
    },

    table: {
      class: Table,
      inlineToolbar: true,
      shortcut: 'CMD+ALT+T',
      HTMLGenerator: (data) => {
        var rows = '';
        data.content.forEach((row) => {
          var cells = '';
          row.forEach((cell) => { cells += '<td>' + cell + '</td>'; })
          rows += '<tr>' + cells + '</tr>';
        });
        return '<table>' + rows + '</table>';
      }
    },
  },
};

```
Some small changes to use more standardised grammar.
## Related Issue

resolves #1005, which describes an example use-case for this feature in more details.

## How to test

```sh
cd example/tools/header
code src/index.js
```

add the following code at the bottom (near line 464)

```js
  moved(event) {
    console.log('>> I WAS MOVED', event);
  }
```

and run `yarn build`.

Finally, open the example page with `open example/example-dev.html` and swap the header tool.

## Notes

This is my very first contribution to https://github.com/codex-team/editor.js, and I need to get used to your plans about lifecycles and callbacks. So please, be gentle ;)

~~Additionally, it might be helpful when there's a "How to develop" section in the README. After, checking the `package.json`'s `scripts` section I had an idea how to start though.~~ ==> https://editorjs.io/core-development

## Example

![Screen Capture on 2020-01-10 at 20-52-21](https://user-images.githubusercontent.com/1043668/72182169-3784c280-33eb-11ea-9074-9232b891616f.gif)

https://d.pr/i/SUOMHq/9TjBiEy2mF
Hi there.
In editor.js, when click on a block, it will show a gray background.
How can we disable this background color changing?
Thanks!