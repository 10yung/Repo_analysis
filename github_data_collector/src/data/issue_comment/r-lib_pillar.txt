and export it.

Requested by @romainfrancois in https://github.com/tidyverse/dplyr/pull/4746#issuecomment-574028611.

What would be a good name? I don't really like `format_v()`. (The generic isn't used anywhere in CRAN packages, and was never public.) This could be a variant of `pillar()` or `format.pillar()` too.

Pretty-printing of type, size and object information, and data, is the purpose of this package.
(Not seen here, but difference is visible in the terminal.)

``` r
pillar::pillar(bit64::as.integer64(1e10))
#> <int64>    
#> 10000000000
pillar::pillar(1e10)
#>       <dbl>
#> 10000000000
```

<sup>Created on 2019-11-26 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
I was planning on creating a `vctrs_list_of` class where each element would be a tibble containing "notes" (i.e. errors and warnings) that happened during model tuning. I would like to be able to control the printing enough to have an end result like:

```r
# A tibble: 2 x 1
            x
  <list<tbl_notes>>
1       [1 W / 2 E]
2       [0 W / 3 E]
```

After looking at this issue https://github.com/r-lib/pillar/issues/137, I was hoping that `pillar_shaft.vctrs_list_of()` would help.


But the current implementation of `pillar_shaft.vctrs_list_of()` provides no customization points for me.

https://github.com/r-lib/pillar/blob/82370d73e9f5b96689454fab675087d0ef0993c9/R/vctrs.R#L18-L23

Is there any hope that we could go back and do what #137 suggests by calling `map(x, obj_sum)`? Then I could control `obj_sum.tbl_notes`
``` r
pillar::pillar(list(matrix(0, nrow = 100, ncol = 200)))
#> <list>                 
#> <dbl[,200] [100 Ã— 200]>
```

<sup>Created on 2019-06-30 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

Follow-up from https://github.com/tidyverse/tibble/issues/615, CC @Shians.

@lionel-: Do we need a `vec_ptype_abbr()` variant that does not include the shape?
`type_sum()` now forwards to `vec_ptype_abbr()`, but there are concerns regarding its deprecation:

- Is `vec_ptype_abbr()` stable (https://github.com/r-lib/pillar/issues/134#issuecomment-447648442)? Type descriptions to be shown in a word/sentence/paragraph are supposed to be new generics (https://github.com/r-lib/vctrs/issues/139#issuecomment-489082459), forwarding to existing `vec_ptype_abbr()` functions here.

- `type_sum()` also works for non-vector types, `vec_ptype_abbr()` does not. This isn't a huge problem, but still worth mentioning.

@hadley: Do we initiate soft-deprecation now? It seems safe -- it's only a message once per session, and also only for direct callers.
If you have data with many zeroes, it can be useful to replace the `0` character with something subtler in printed output. For example, the `Matrix` package defaults to printing zeroes as a `.` for sparse matrices. Similarly, `prettyNum()` lets you override the zero character.

``` r
set.seed(1979)
# Sparse matrices print with . instead of 0 
library(Matrix)
spMatrix(10, 10, sample(10, 3), sample(10, 3), 1:3)
#> 10 x 10 sparse Matrix of class "dgTMatrix"
#>                          
#>  [1,] . . . . . . . . . .
#>  [2,] . . . . . . . . . .
#>  [3,] . . 3 . . . . . . .
#>  [4,] . . . . . . . . . .
#>  [5,] . 2 . . . . . . . .
#>  [6,] . . . . . . . . . .
#>  [7,] . . . . . . . . . .
#>  [8,] . . . . . . . . . .
#>  [9,] . . . . . . . . . .
#> [10,] . . . . . . . 1 . .

# You can specify this for vectors using prettyNum()
(pois <- rpois(100, 0.1))
#>   [1] 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0
#>  [36] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
#>  [71] 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
prettyNum(pois, zero.print = ".")
#>   [1] "." "." "." "." "." "." "1" "." "." "." "." "." "." "." "1" "." "."
#>  [18] "1" "." "." "." "." "." "1" "." "." "." "1" "." "." "1" "." "." "."
#>  [35] "." "." "." "." "." "." "." "." "." "." "." "." "." "." "." "." "."
#>  [52] "." "." "." "." "." "." "." "." "1" "." "." "." "." "." "." "." "."
#>  [69] "." "." "." "." "." "." "." "." "1" "." "." "." "." "." "." "." "."
#>  [86] "." "." "." "." "." "." "." "." "." "." "." "." "." "." "."
```

It seems useful to have a pillar option to allow overriding the zero character. Similarly, if data has a lot of missing values, it seems useful to have an option to replace `NA` with another subtler character.




I do realize that row names have grown out of fashion in the tidyverse, and that `tibble` is the main consumer of pillar. However, I feel it would still be worthwhile, if pillar could honor the `row.names` attribute for printing `data.frame`ish objects. I have tried to implement this using the `new_pillar_shaft()` API, but I could not come up with anything pleasing (especially if `width` > terminal width and the output is split up). I'm happy to start a PR.
Hi, I was yesterday playing around with the [vctrs](https://github.com/r-lib/vctrs) package, creating a type for MCMC posterior samples, that internally is a matrix, but looks and behaves like a simple numeric vector. The idea behind it is to make handling those samples simpler (i.e. taking the difference of the runs etc.). 

This all working quite well, but unfortunately pillar seems to be ignoring the `format` function I wrote for the type, and displays the vctrs as the matrix it is internally:

``` r
library(vctrs)
library(tibble)

post <- function(x=matrix(, nrow=0, ncol=0)){
  if(is.vector(x)){
    x <- as.matrix(x)
  }
  stopifnot(is.matrix(x))
  
  new_vctr(c(x), nsamples=ncol(x), dim=c(nrow(x), ncol(x)), class="post")
}

as.matrix.post <- function(x, ...){
  matrix(vec_data(x), ncol=attr(x, "nsamples"))
}

format.post <- function(x, ...){
  rowMeans(as.matrix(x))
}
obj_print_footer.post <- function(x, ...) {
  cat("nsamples: ", attr(x, "nsamples"), "\n", sep = "")
}

`[.post` <- function(x, i, j, drop=FALSE){
  m <- as.matrix(x)[i,j,drop=drop]
  post(m)
}

vec_arith.post <- function(op, x, y) UseMethod("vec_arith.post", y)
vec_arith.post.post <- function(op, x, y){
  nsamples_x <- attr(x, "nsamples")
  nsamples_y <- attr(y, "nsamples")
  mx <- as.matrix(x)
  my <- as.matrix(y)
  res <- t(vapply(seq_len(vec_size(x)), function(idx){
    c(outer(mx[idx, ], my[idx, ], op))
  }, FUN.VALUE = rep(0.0, nsamples_x * nsamples_y)))
  post(res)
}

p1 <- post(rbind(rnorm(10, mean=1),
                 rnorm(10, mean=10),
                 rnorm(10, mean=-2),
                 rnorm(10, mean=4)))
p2 <- post(rbind(rnorm(3, mean=1),
                 rnorm(3, mean=-10),
                 rnorm(3, mean=0),
                 rnorm(3, mean=10)))

p1
#> <post[40]>
#> [1]  0.8163855  9.6762014 -1.5743212  4.1346032
#> nsamples: 10
p2
#> <post[12]>
#> [1]  0.7319972 -9.9491694  0.3368831  9.2285601
#> nsamples: 3
p1 + p2
#> <post[120]>
#> [1]  1.5483827 -0.2729679 -1.2374380 13.3631632
#> nsamples: 30

df <- tibble(abc=letters[1:4], p2)
as.data.frame(df)
#>   abc         p2
#> 1   a  0.7319972
#> 2   b -9.9491694
#> 3   c  0.3368831
#> 4   d  9.2285601
df
#> # A tibble: 4 x 2
#>   abc               p2[,1]               [,2]               [,3]
#>   <chr>             <post>             <post>             <post>
#> 1 a      0.172519602906773 0.0588098684335713    1.9646620956729
#> 2 b      -10.3594901450867  -9.71129156443163  -9.77672639449069
#> 3 c     -0.177959609558753   1.57355653495115 -0.384947503221933
#> 4 d        10.349987018383   10.4663913594914   6.86930179123215
```
<sup>Created on 2018-10-25 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1)</sup>

I would prefer tibble/pillar to output my type the way the classical `data.frame` does, not spitting out the internal matrix. So I was wondering if there are any plans to handle such 2D vctr types specifically?

I also apologize in advance if this not the right place for this issue, but I thought that because the internal logic for [handling matrices](https://github.com/r-lib/pillar/blob/master/R/multi.R#L72) is in this package, this would be a good place to start.


if the `"pillar.sigfig"` option is unset?

This might make tibbles a little less surprising to new users, or if grouping creates a tibble from a data frame.
``` r
pillar::pillar(567.89)
#> <dbl>
#>  568.
```

> Created on 2018-08-05 by the [reprex package](http://reprex.tidyverse.org) (v0.2.0).

@hadley: Would it work to use a different symbol instead of the decimal point here, to indicate that the true value is lower?