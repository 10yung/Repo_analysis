Sometimes after a bunch of deletes Last() for new cursor returns nil for non-empty bucket. Code to reproduce is [here](https://github.com/coreos/bbolt/issues/95).  

May be it's enough to put n.rebalance() at the end of (n *node) del(key []byte) to fix this.

Hi @benbjohnson,
Could you please confirm the solution?

I am not sure about invariants that should provide cursor.Delete(). Is it ok to get an empty leaf page after delete a key?

Thank you.
I use the following code to create/open a bolt database file under the user home directory on mac:

```go

curUser, err := user.Current()
if err != nil {
  panic(err)
} else {
 dataPath := filepath.Join(curUser.HomeDir, dataPath)
 handle, err := bolt.Open(dataPath, 0644, defaultBoltOptions)
if err != nil {
 log(err) // this tells me permission denied error 
}
}

```

I wonder why this happened and how to fix it? I run my go code `go run main.go` as a mac user. 
# github.com/boltdb/bolt
../../../boltdb/bolt/db.go:113:11: error: reference to undefined identifier ‘sync.Pool’
  pagePool sync.Pool
           ^
../../../boltdb/bolt/db.go:223:21: error: reference to undefined identifier ‘sync.Pool’
  db.pagePool = sync.Pool{
                     ^
../../../boltdb/bolt/db.go:223:25: error: expected ‘;’ or ‘}’ or newline
  db.pagePool = sync.Pool{
                         ^
../../../boltdb/bolt/db.go:224:27: error: expected ‘;’ or newline after top level declaration
   New: func() interface{} {
                           ^
../../../boltdb/bolt/db.go:226:3: error: expected declaration
   },
   ^
../../../boltdb/bolt/db.go:230:2: error: expected declaration
  if err := db.mmap(options.InitialMmapSize); err != nil {
  ^
../../../boltdb/bolt/db.go:230:46: error: expected declaration
  if err := db.mmap(options.InitialMmapSize); err != nil {
                                              ^
../../../boltdb/bolt/db.go:232:3: error: expected declaration
   return nil, err
   ^
../../../boltdb/bolt/db.go:233:2: error: expected declaration
  }
  ^
../../../boltdb/bolt/db.go:236:2: error: expected declaration
  db.freelist = newFreelist()
  ^
../../../boltdb/bolt/db.go:237:2: error: expected declaration
  db.freelist.read(db.page(db.meta().freelist))
  ^
../../../boltdb/bolt/db.go:240:2: error: expected declaration
  return db, nil
  ^
../../../boltdb/bolt/db.go:241:1: error: expected declaration
 }
 ^
../../../boltdb/bolt/db.go:224:25: error: missing return at end of function
   New: func() interface{} {
                         ^
../../../boltdb/bolt/db.go:176:3: error: too many values in return statement
   return nil, err
   ^
../../../boltdb/bolt/db.go:188:3: error: too many values in return statement
   return nil, err
   ^
../../../boltdb/bolt/db.go:196:3: error: too many values in return statement
   return nil, err
   ^
../../../boltdb/bolt/db.go:200:4: error: too many values in return statement
    return nil, err
    ^
../../../boltdb/bolt/db.go:461:3: error: not enough arguments to return
   return db.beginRWTx()
   ^
../../../boltdb/bolt/db.go:463:2: error: not enough arguments to return
  return db.beginTx()
  ^
../../../boltdb/bolt/db.go:489:20: error: argument 1 must be a slice
  db.txs = append(db.txs, t)
                    ^
../../../boltdb/bolt/db.go:532:2: error: range clause must have array, slice, string, map, or channel type
  for _, t := range db.txs {
  ^
../../../boltdb/bolt/db.go:553:2: error: range clause must have array, slice, string, map, or channel type
  for i, t := range db.txs {
  ^
../../../boltdb/bolt/db.go:671:34: error: argument 1 must be a slice
  db.batch.calls = append(db.batch.calls, call{fn: fn, err: errCh})
                                  ^
../../../boltdb/bolt/db.go:739:3: error: range clause must have array, slice, string, map, or channel type
   for _, c := range b.calls {
   ^
../../../boltdb/bolt/db.go:718:4: error: range clause must have array, slice, string, map, or channel type
    for i, c := range b.calls {
    ^
../../../boltdb/bolt/db.go:833:27: error: non-integer len argument to make
   buf = make([]byte, count*db.pageSize)
                           ^
../../../boltdb/bolt/tx.go:71:2: error: return with value in function with no return type
  return tx.db
  ^
../../../boltdb/bolt/tx.go:108:2: error: not enough arguments to return
  return tx.root.CreateBucket(name)
  ^
../../../boltdb/bolt/tx.go:115:2: error: not enough arguments to return
  return tx.root.CreateBucketIfNotExists(name)
  ^
../../../boltdb/bolt/tx.go:138:31: error: argument 1 must be a slice
  tx.commitHandlers = append(tx.commitHandlers, fn)
                               ^
../../../boltdb/bolt/tx.go:177:47: error: division by zero
  p, err := tx.allocate((tx.db.freelist.size() / tx.db.pageSize) + 1)
                                               ^
../../../boltdb/bolt/tx.go:209:4: error: expected channel
    err, ok := <-ch
    ^
../../../boltdb/bolt/tx.go:231:2: error: range clause must have array, slice, string, map, or channel type
  for _, fn := range tx.commitHandlers {
  ^
../../../boltdb/bolt/tx.go:477:2: error: range clause must have array, slice, string, map, or channel type
  for _, p := range tx.pages {
  ^
../../../boltdb/bolt/tx.go:574:6: error: expected map index on right hand side
   if p, ok := tx.pages[id]; ok {
      ^
../../../boltdb/bolt/tx.go:574:6: error: invalid tuple definition
../../../boltdb/bolt/db.go:532:6: error: invalid type for range clause
  for _, t := range db.txs {
      ^
../../../boltdb/bolt/db.go:553:6: error: invalid type for range clause
  for i, t := range db.txs {
      ^
../../../boltdb/bolt/db.go:553:6: error: invalid type for range clause
../../../boltdb/bolt/db.go:739:7: error: invalid type for range clause
   for _, c := range b.calls {
       ^
../../../boltdb/bolt/db.go:718:8: error: invalid type for range clause
    for i, c := range b.calls {
        ^
../../../boltdb/bolt/db.go:718:8: error: invalid type for range clause
../../../boltdb/bolt/tx.go:231:6: error: invalid type for range clause
  for _, fn := range tx.commitHandlers {
      ^
../../../boltdb/bolt/tx.go:477:6: error: invalid type for range clause
  for _, p := range tx.pages {
      ^

Do not able to create sub bucket inside loop but when creating it outside it gets created.
Sorry to bring up another issue with this headline... I already checked the other two issues and do not have the impression that they match my case.

Here my error

> panic: page 4 already freed
> 
> goroutine 416 [running]:
> .../vendor/github.com/boltdb/bolt.(*freelist).free(0x202f7ec0, 0x5, 0x0, 0x3014000)
>         /ext-go/1/src/.../vendor/github.com/boltdb/bolt/freelist.go:121 +0x263
> .../vendor/github.com/boltdb/bolt.(*node).spill(0x20356d40, 0x2064bc64, 0x6)
>         /ext-go/1/src/.../vendor/github.com/boltdb/bolt/node.go:363 +0x19f
> .../vendor/github.com/boltdb/bolt.(*Bucket).spill(0x2032eb0c, 0xe, 0x38554104)
>         /ext-go/1/src/.../vendor/github.com/boltdb/bolt/bucket.go:570 +0x13d
> .../vendor/github.com/boltdb/bolt.(*Tx).Commit(0x2032eb00, 0x0, 0x0)
>         /ext-go/1/src/.../vendor/github.com/boltdb/bolt/tx.go:163 +0xff
> .../vendor/github.com/boltdb/bolt.(*DB).Update(0x20244fc0, 0x2056de80, 0x0, 0x0)
>         /ext-go/1/src/.../vendor/github.com/boltdb/bolt/db.go:605 +0xc9

Here my Code snippet:

```
// Add adds a value to the db using NextSequence to autoincrement the key
func (s *DB) Add(tableName string, value []byte) (uint64, error) {
	var id uint64
	err := s.Conn.Update(func(tx *bolt.Tx) error {
		bt, err := tx.CreateBucketIfNotExists([]byte(tableName))
		if err != nil {
			return err
		}

		id, err = bt.NextSequence()
		if err != nil {
			return err
		}

		return bt.Put(itob(id), value)
	})
	return id, errors.WithStack(err)
}

// itob returns an 8-byte big endian representation of v.
func itob(i uint64) []byte {
	b := make([]byte, 8)
	binary.BigEndian.PutUint64(b, i)
	return b
}
```

The error occurs the second time this code is executed (every time).

The code runs fine on MacOS (amd64) and Windows (386) without cgo. Disabling cgo disables a few packages that use windows dlls.
When compiling the final version with cgo (and dlls) using `xgo --targets=windows/386 .` the resulting windows executable will show the above issue.

I added some logs to the boltdb code and checked which pages are being freed. On every call the same pages are being freed. The `node.pgid` on node.go:363 is also the same on every call (calls are several secods apart). Why?

Since in one of the other issues on this topic there is talk about race conditions I made sure the entire connection is used by a single goroutine using the action pattern. This did not resolve the issue either:

```
// Add adds a value to the db using NextSequence to autoincrement the key
func (s *DB) Add(tableName string, value []byte) (uint64, error) {
	// added this to make sure there is no other goroutine using the byte array at the same time
	var valCopy = make([]byte, 0, len(value))
	valCopy = append(valCopy, value...)

	var id uint64
	chErr := make(chan error)
	s.Run(s.Action)
	s.Action <- func() {
		err := s.Conn.Update(func(tx *bolt.Tx) error {
			bt, err := tx.CreateBucketIfNotExists([]byte(tableName))
			if err != nil {
				return err
			}

			id, err = bt.NextSequence()
			if err != nil {
				return err
			}

			return bt.Put(itob(id), valCopy)
		})
		chErr <- err
	}
	err := <-chErr
	return id, errors.WithStack(err)
}
```

Anyone any idea on how to solve this issue?
Write-Transactions update Meta1 on commit, and Meta2 only be updated at Backup (invoke tx.WriteTo);

**So, please consider this case:**
1. Assume my DB's freelist is stored in Page34, and I backup it now; Then the page id of freelist in meta2 is 34 now;
2. Then I do some write-transactions on the new DB file, obviously the Page34 maybe reallocated as a branch page or a leaf page;
3. If meta1 is written to broken now, then meta2 is used, and the Page34 is regard as a freelist page again;

Hello guys,
there is a problem in file size updating in boltdb after reaching 1GB (it occurs during file remapping). The problem is still present in the master version.
The following are the technical details (before start, I want to say that my OS pageSize, on a Windows 64 bit machine is equal to 4.096 bytes):
When boltdb needs to allocate new "junk" to store file, this method is called:
![immagine](https://user-images.githubusercontent.com/6648129/36090559-14e7b03c-0fe1-11e8-832d-002d8673ff98.png)
as you can see, when is needed to increase the store file is called the method "mmap" with a minimum size reallocation parameter. Inside "mmap" is called the method "mmapSize", that calculate the new store file size based on the minimum one passed as parameter:
![immagine](https://user-images.githubusercontent.com/6648129/36090740-d2c1add8-0fe1-11e8-969a-286b158e74ee.png)
as you can see from my red comments, there are 2 different calculation methods inside "mmapSize". The first one calculate the new store size following this rule, based on the minimum size parameter:
2^15 = 32.768 bytes
2^16 = 65.536 bytes
2^17 = 131.072 bytes
2^18 = 262.144 bytes
2^19 = 524.288 bytes
2^20 = 1.048.576 bytes
2^21 = 2.097.152 bytes
2^22 = 4.194.304 bytes
2^23 = 8.388.608 bytes
2^24 = 16.777.216 bytes
2^25 = 33.554.432 bytes
2^26 = 67.108.864 bytes
2^27 = 134.217.728 bytes
2^28 = 268.435.456 bytes
2^29 = 536.870.912 bytes
2^30 = 1.073.741.824 bytes
and this method works well.
The problems starts when the second calculation method take control over remap size, because the minimum size that is passed as parameter when 1GB is reached was "1.073.741.824", and not as I was expecting a value greater than "1.073.741.824".
So, when 1GB is reached, simply the mmapSize return the same minimum size passed as parameter (1.073.741.824), because following codes:
![immagine](https://user-images.githubusercontent.com/6648129/36091008-9c11d41a-0fe2-11e8-8080-871cf08016c8.png)
are never reached.

Can you please verify?

P.s.: I want to reference this bug on gitea project: https://github.com/go-gitea/gitea/issues/3457
>> Only one read-write transaction is allowed at a time. 

From documentation I understand that concurrent writes are not allowed. I'm not sure if this is correct thus this question to clarify: is boltdb designed only for one single writer (globally)? Am I suppose to maintain a lock on any write? 
Use case: 
I  want to store access logs of http requests. Does this mean that I need to use a  global channel to serialise the access bolt writes ?
```

e.g. 

var globalChan = make(chan string, 10)

func init() {
	const bucketName = "widgets"
	tx, err := db.Begin(true)
	if err != nil {
		panic(err)
	}
	_, err = tx.CreateBucketIfNotExists([]byte(bucketName))
	if err != nil {
		return err
	}
	go func() {
		for URL := range globalCHan {
			tx, err := db.Begin(true)
			if err != nil {
				panic(err)
			}
			bk := tx.Bucket([]byte(bucketName))
			// Set the value "bar" for the key "foo".
			if err := b.Put([]byte(time.Now().String()), []byte("bar")); err != nil {
				return err
			}
		}

	}()
}

func HandleFunc(w http.ResponseWriter, r *http.Request) {
    globalChan <- r.URL.String()
}

```
every 20 min， i will write maybe 100k pairs， but the write so slow
I need some thing like `db.IsOpen()` to check is the database open or not.
bolt database structure has unexported field **`open`** but I cant access to that from my code 