Is there a way to write something like this:

`parent.clildren = array_of_children`

Where array_of_children is an array of objects? 
There is some method to get all children by level?

If I have 2 children, and they have 2 each, using the indirect method I get then 4 indirect users.

So if my indirect users have 2 more each one, can I get children from my indirect users by level?


Hi!
Thank you for gem.
I added small performance improvement for sort
[`sort vs sort_by`](https://github.com/JuanitoFatas/fast-ruby#enumerablesort-vs-enumerablesort_by-code)
Hi

Great library btw. Thanks!

Is it possible to do something like this:

```Item.where(id: [1,2,3]).descendants``` 

Thanks

# Summary

Currently, there is no way to make optimization for a specific database.
This PR is to give an approach to help a developer use database techniques to do optimization.
For example, the origin of `update_descendants_with_new_ancestry` has a lot of N+1 queries to update all descendants. By using `regexp_replace` on Postgres, we can use one query to remove N+1.

Related Issue: https://github.com/stefankroes/ancestry/issues/282
Fix #arrange_serializable method in `ancestry/lib/ancestry/class_methods.rb` file

```rb
    # ancestry/lib/ancestry/class_methods.rb:58

    def arrange_serializable(serializer = nil, children_node_name = 'children', options = {}, nodes = nil)
      nodes = arrange(options) if nodes.nil?

      nodes.map do |parent, children|
        node_name = arrange_serializable(serializer, children_node_name, options, children)
        serialized_parent = serializer.nil? ? parent : serializer.new(parent)
        serialized_parent.serializable_hash.merge(children_node_name => node_name)
      end
    end
```

And in use
```rb
User.all.arrange_serializable(UserSerializer, :items)
```
As seen [here](https://github.com/stefankroes/ancestry/blob/b609e68cd3b4391eb3a8ebd83a922a711395ee21/lib/ancestry/class_methods.rb#L5) it uses find on the `scope` with an `object` instead of an `id` which then leads to an ArgumentError.

```
You are passing an instance of ActiveRecord::Base to `find`. Please pass the id of the object by calling `.id`.
```
Find with an instance was already deprecated with rails4.x and is now completely deactivated with rails5.

Would it be enough to just change `object` to `object.id` ?

Hey! We're planning on upgrading to Rails 6.0.0.rc1 soon. I traced a number of deprecation warnings back to `ancestry`

These include using `update_attributes` over `update` as well as using class level querying methods if the receiver scope has leaked (see https://github.com/rails/rails/pull/35280)

One thing I am not 100% sure about is using `unscoped` over `unscope(:where)`. Feedback would be appreciated on this. 
Suppose I have these models:

```ruby
class Area < ApplicationRecord
  has_ancestry orphan_strategy: :restrict
  has_many :people

  def full_name
    # there is a name column
    (ancestors.map(&:name) + [name]).join " - "
  end
end

class Person < ApplicationRecord
  belongs_to :area
end
```

So each person belongs to an area, which are arranged as a tree. Now if I want to print a list with a set of people and the area they belong to, I get N+1 queries:

```ruby
data = people.preload(:area).map{|p| [p.name, p.area.full_name]}
```

```
  Area Load (0.5ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.5ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.4ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.5ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.4ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.4ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.5ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.6ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.6ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.5ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.5ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.4ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.3ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.3ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (991) ORDER BY COALESCE("areas"."ancestry", '') ASC
  Area Load (0.4ms)  SELECT "areas".* FROM "areas" WHERE "areas"."id" IN (1129) ORDER BY COALESCE("areas"."ancestry", '') ASC
```

It would be great to have a way to tell rails to preload the ancestors of a set of records.

@stefankroes Looks like travis is no longer setup to run. I do not have admin permissions so I can not fix.

Possible solutions:

1. enable travis again for ancestry
2. transition ancestry over to a github org (ancestry-rb ?) and give me admin priviliges over there?

Or if you have other suggestions, that would be great

Thanks
--K