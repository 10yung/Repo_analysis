Hello!

I am confused about how to support array attributes. Let's say I have simple `urls` array field on `users` like so:
```
  create_table "users", force: :cascade do |t|
    t.text "urls", default: [], array: true
  end
```

From searching the issues, it appears I need to define a `build_url` field on the `User` model? Is that correct? What else would I need to do? Or is there a simple example somewhere for this?
As Rails 6 is moving towards Webpacker, it would be really nice if the javascript for cocoon would be available through Yarn. Any plans for this? Thanks.
- Regex makers moved to their own functions

- Isolated #add_field's responsibilities wrapping assoc id to another function

- Cut extraneous passing of parameters in getInsertionNodeElem as we already pass $this
@nathanvda :+1: 
I'm experimenting with using cocoon in a context where some of the models involved are ActiveModels rather than ActiveRecord::Base.  For my work with [this gem](https://github.com/jrochkind/json_attribute).

It actually works out pretty well, most parts of cocoon don't assume that the collections involved actually have AR reflection info, for instance.   Perhaps some work has gone in this direction before!

There are just a couple places where cocoon is assuming methods exist where I'd rather it didn't. 

This is one of them, which seems pretty straightforward to do something about -- it was accepting a `nil` return value from `reflect_on_association` anyway (and doing the right thing for my use case in that situation), so just have it not try to call the method if it doesn't exist, and just go with the nil value. Seems quite clean and neat. 

What do you think?

This is a feature that I'm using in several projects.

Besides the documentation included in this pull request, 
I prepared a small application that shows how to use it
https://github.com/vtamara/cocoon-ajax-project-objective-result-indicator
and a video of the applicattion running
https://www.youtube.com/watch?v=R5lNVBVOrjU

At the company I work for we've been using Cocoon for more than 2 years now. Thanks @nathanvda and everyone that contributed! üëè 

We recently migrated to Rails 5.1 and stopped using the Asset Pipeline to compile our JavaScript (we're using the Rails Webpacker gem). This means we can't require JavaScript like this anymore:

```js
//= require cocoon
```

I've read issues #363 and #452 and understand if the author is not interested in maintaining another package in a different registry (NPM). What I propose in this PR is a compromise solution.

This PR adds a `package.json` file with the property [`private`](https://docs.npmjs.com/files/package.json#private) set to `true`. This lets users that visit this repository know that the JavaScript is not officially published in the NPM registry, but at the same time they can install Cocoon directly from GitHub:

```bash
# Using the NPM client
npm install github:nathanvda/cocoon --save

# Using the Yarn client
yarn add github:nathanvda/cocoon
```

They can then import the code like this:

```es
import "cocoon";
```

The `package.json` includes a `version` because it is a required property, but even if this property is not updated, users can always install a specific commit, similarly to what we do in a `Gemfile`:

```bash
npm install github:nathanvda/cocoon#c24ba53
```

---

_Side note:_ If in the future @nathanvda finds it valuable to publish the package in the NPM registry, he would simply have to remove the `private` property, update the `version`, and run `npm publish`.

Both names "cocoon" and "cocoon-rails" are taken, but the author can use a [scoped name](https://docs.npmjs.com/misc/scope). Assuming the NPM username `nathanvda`, the name property could be `@nathanvda/cocoon`.
HI,
 Rails 5.1 give ability to use webpacker gem to manage javascript libraries. But this management is completely out of Rails so it cannot see `gem cocoon`.

Can You, please, add `package.json` file and build an NPM package of  cocoon?

Related Issues in other project 
https://github.com/ifad/data-confirm-modal/pull/53 and 
https://github.com/rails/webpacker/issues/57#issuecomment-327533578
Uses ```$()``` syntax instead ```$(document).on("ready")``` which removes deprecation warning as of jQuery 1.8 and fixes the script for jQuery 3, where the method is removed.

See:
https://jquery.com/upgrade-guide/3.0/#breaking-change-on-quot-ready-quot-fn-removed
https://api.jquery.com/ready/#entry-longdesc

