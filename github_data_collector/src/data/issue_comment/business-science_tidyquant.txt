I suppose it should return OHLC of a period, but the results are the last row of a period.
Is this a bug?

```r
df = FANG %>% filter(symbol=='FB') %>% slice(1:40)  # FB, Jan/Feb data

tq_transmute(df, select=open:close, mutate_fun=to.monthly)

# date    open    high    low close
# <yearmon>   <dbl>   <dbl>   <dbl>   <dbl>
# Jan 2013    29.15   31.47   28.74   30.98
# Feb 2013    26.84   27.30   26.34   27.25

# manually transform to xts then to.monthly get the right data
df %>% select(date, Open=open, High=high, Low=low, Close=close) %>% 
    tk_xts %>% to.monthly

#          ..Open ..High ..Low ..Close
# Jan 2013  27.44  32.51 27.42   30.98
# Feb 2013  31.01  31.02 26.34   27.25
```


I have the following code:

```
# Load Libs ####
# Time Series analysis of CCI30 crypto index
install.load::install_load(
  "tidyquant"
  ,"timetk"
  # , "tibbletime"
  , "tsibble"
  , "sweep"
  , "anomalize"
  , "caret"
  , "forecast"
  , "funModeling"
  , "xts"
  , "fpp"
  , "lubridate"
  , "tidyverse"
  , "urca"
  , "prophet"
)

# Daily OHLCV ####
url <- "https://cci30.com/ajax/getIndexHistory.php"
destfile <- "cci30_OHLCV.csv"
download.file(url, destfile = destfile)
df <- read.csv("cci30_OHLCV.csv")
class(df)

# Format Date ####
df$Date <- lubridate::ymd(df$Date)
df.tibble <- as_tsibble(df, index = Date)
class(df.tibble)
head(df.tibble)
tail(df.tibble)

# Add varaibles ####
df.tibble <- df.tibble %>% 
  tq_mutate(
    select = Close
    , mutate_fun = dailyReturn
    , col_rename = "Daily_Return"
  )
``` 

At this point it fails with the following error:
```
Selecting index: "Date"
Selecting index: "Date"
Selecting index: "Date"
Error in dplyr::matches(date_var) : is_string(match) is not TRUE
```

Session Info

```
> sessionInfo()
R version 3.5.3 (2019-03-11)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17763)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252    LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C                           LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] prophet_0.5                rlang_0.4.2                Rcpp_1.0.3                 urca_1.3-0                
 [5] forcats_0.4.0              stringr_1.4.0              dplyr_0.8.3                purrr_0.3.3               
 [9] readr_1.3.1                tidyr_1.0.0                tibble_2.1.3               tidyverse_1.3.0           
[13] fpp_0.5                    tseries_0.10-47            lmtest_0.9-37              expsmooth_2.3             
[17] fma_2.3                    funModeling_1.9.3          Hmisc_4.3-0                Formula_1.2-3             
[21] survival_2.43-3            forecast_8.10              caret_6.0-85               ggplot2_3.2.1             
[25] lattice_0.20-38            anomalize_0.2.0            sweep_0.2.2                tsibble_0.8.5             
[29] timetk_0.1.2               tidyquant_0.5.9            quantmod_0.4-15            TTR_0.23-6                
[33] PerformanceAnalytics_1.5.3 xts_0.11-2                 zoo_1.8-6                  lubridate_1.7.4           

loaded via a namespace (and not attached):
  [1] readxl_1.3.1        backports_1.1.5     plyr_1.8.5          lazyeval_0.2.2      splines_3.5.3      
  [6] entropy_1.2.1       inline_0.3.15       digest_0.6.23       foreach_1.4.7       htmltools_0.4.0    
 [11] gdata_2.18.0        fansi_0.4.0         magrittr_1.5        checkmate_1.9.4     cluster_2.0.7-1    
 [16] ROCR_1.0-7          recipes_0.1.9       modelr_0.1.5        gower_0.2.1         matrixStats_0.55.0 
 [21] anytime_0.3.6       prettyunits_1.0.2   colorspace_1.4-1    install.load_1.2.1  rvest_0.3.5        
 [26] haven_2.2.0         xfun_0.11           callr_3.4.0         crayon_1.3.4        jsonlite_1.6       
 [31] zeallot_0.1.0       iterators_1.0.12    glue_1.3.1          gtable_0.3.0        ipred_0.9-9        
 [36] pkgbuild_1.0.6      Quandl_2.10.0       rstan_2.19.2        scales_1.1.0        DBI_1.1.0          
 [41] htmlTable_1.13.3    foreign_0.8-71      stats4_3.5.3        lava_1.6.6          StanHeaders_2.19.0 
 [46] prodlim_2019.11.13  htmlwidgets_1.5.1   httr_1.4.1          gplots_3.0.1.1      RColorBrewer_1.1-2 
 [51] acepack_1.4.1       pkgconfig_2.0.3     loo_2.2.0           nnet_7.3-12         dbplyr_1.4.2       
 [56] utf8_1.1.4          tidyselect_0.2.5    reshape2_1.4.3      munsell_0.5.0       cellranger_1.1.0   
 [61] tools_3.5.3         cli_2.0.0           generics_0.0.2      moments_0.14        broom_0.5.3        
 [66] ModelMetrics_1.2.2  processx_3.4.1      knitr_1.26          fs_1.3.1            pander_0.6.3       
 [71] caTools_1.17.1.3    packrat_0.5.0       nlme_3.1-137        xml2_1.2.2          compiler_3.5.3     
 [76] rstudioapi_0.10     curl_4.3            reprex_0.3.0        stringi_1.4.3       ps_1.3.0           
 [81] Matrix_1.2-15       vctrs_0.2.1         pillar_1.4.3        lifecycle_0.1.0     data.table_1.12.8  
 [86] bitops_1.0-6        R6_2.4.1            latticeExtra_0.6-28 KernSmooth_2.23-15  gridExtra_2.3      
 [91] codetools_0.2-16    MASS_7.3-51.1       gtools_3.8.1        assertthat_0.2.1    withr_2.1.2        
 [96] fracdiff_1.5-0      parallel_3.5.3      hms_0.5.2           quadprog_1.5-8      grid_3.5.3         
[101] rpart_4.1-13        timeDate_3043.102   class_7.3-15        pROC_1.15.3         base64enc_0.1-3   
```
Hello tidy quant!!

I'm having an issues plotting geom_barchart / geom_candlestick function. 
Using a Simple code to Test the plot, I plot a barchart but there is no difference in width for the shadow and body. 

Code:
```
AAPL %>%
ggplot(aes(x = date, y = close)) +
geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
geom_ma(color = "darkgreen") +
coord_x_date(xlim = c(today() - weeks(6), today()),
ylim = c(100, 130))

```
Plot: 
![CandlestickPlot](https://user-images.githubusercontent.com/18613801/66481690-b3e0d000-eaa1-11e9-9744-81ff02c8d42e.png)


Im i missing some dependencies?
Thank you in advance!

I have been using `tidyquant::tq_transmute` inside a function of one of my packages, but today I got the following error: 

     Error in check_transmute_fun_options(mutate_fun) : 
     fun = xts::apply.monthly not a valid option.

My tidyquant version is 0.5.6. 
In the replace_bad_names function seems its setup to look for 'low' as part of an OHLC format, but it also detects titles with those three letters, for example 'ma_slow' for naming a slow moving average. Suggestion to change the regex so that it only selects specifically low.
When I calculate a monthly portfolio return I found an issue:  
   The   results are not equal when you add and do not add the ** rebalance_on = c("months")**  argument.  And By calculating returns on myself, I think the argument should not be omitted. 
  I don not know how the `tq_portfolio()` works exactly, and I suggest you guys to make a check.  If I were right, then original [examples]( https://business-science.github.io/tidyquant/articles/TQ05-performance-analysis-with-tidyquant.html) about portfolio returns should be corrected. 

For your convenience , the following is  my codes  : 

`
library(tidyquant)
stock_returns_monthly <- c("AAPL", "GOOG", "NFLX") %>%
  tq_get(get  = "stock.prices",
         from = "2010-01-01",
         to   = "2015-12-31") %>%
  group_by(symbol) %>%
  tq_transmute(select     = adjusted, 
               mutate_fun = periodReturn, 
               period     = "monthly", 
               col_rename = "Ra")

weights <- c(
  0.50, 0.25, 0.25
)
stocks <- c("AAPL", "GOOG", "NFLX")

weight_tibble <-  tibble(symbol = stocks) %>%
  bind_cols(tibble(weights))


portfolio_returns_monthly_rebalance <- stock_returns_monthly %>%
  tq_portfolio(assets_col  = symbol, 
               returns_col = Ra, 
               weights     = weight_tibble, 
               rebalance_on = c("months"),  
               col_rename  = "port_ret_rebalance")

portfolio_returns_monthly <- stock_returns_monthly %>%
  tq_portfolio(assets_col  = symbol, 
               returns_col = Ra, 
               weights     = weight_tibble, 
               # rebalance_on = c("months"),
               col_rename  = "port_ret")


portfolio_returns_monthly_byhand <- stock_returns_monthly %>%
  left_join(
    weight_tibble, 
    by= "symbol"
  ) %>% 
  group_by(date) %>% 
  mutate(
    port_ret_byhand = sum(Ra*weights)
  ) %>% 
  select(
    date, port_ret_byhand
  ) %>% 
  distinct_all()


all <- portfolio_returns_monthly_rebalance %>% 
  bind_cols(portfolio_returns_monthly) %>% 
  bind_cols(portfolio_returns_monthly_byhand)

# note: the  2nd, 4th and 6th column are calculated with rebalance_on option, without that option and by hand. 

`



Here an example:

> log_ret_table %>% gather(key = "asset", value ="ret", -date) %>%
                     group_by(asset) %>%
                     tq_performance(Ra = ret, performance_fun = AdjustedSharpeRatio)


Output:

 A tibble: 20 x 2
 Groups:   asset [20]
   asset    AnnualizedSharpeRatio(Rf=0%)
   <chr>                             <dbl>
 1 ACWI                             0.0854
 2 ATX                             -0.268 
I have following tbl_time object:
```
data <- structure(list(index = structure(c(13915, 13916, 13917, 13920, 
13921, 13922, 13923, 13924, 13927, 13928), class = "Date"), zadnja = c(305.55, 
298.02, 291.8, 294.98, 296.44, 296, 294, 290.65, 288, 291.99), 
    ma_1 = c(314.182857142857, 311.614285714286, 308.085714285714, 
    305.225714285714, 301.86, 299.145714285714, 296.684285714286, 
    294.555714285714, 293.124285714286, 293.151428571429), ma_2 = c(323.297142857143, 
    321.304761904762, 318.885238095238, 316.503333333333, 314.429047619048, 
    312.519047619048, 310.757142857143, 308.695714285714, 306.695238095238, 
    305.504285714286), macd = c(-3.37207220810237, -3.59709986407118, 
    -3.89692069355047, -4.01283868533963, -4.02460932284664, 
    -4.00256141038603, -3.99475081263415, -4.03423844455097, 
    -4.09302794203064, -3.98985583452542), dn = c(300.938100803014, 
    298.535273326249, 295.819794246054, 292.268047445615, 290.856476276663, 
    289.554088576577, 288.156637290461, 287.077449069052, 284.813011332112, 
    282.81163022933), up = c(345.027565863653, 343.196726673751, 
    340.87853908728, 339.114619221052, 336.353190390004, 334.237244756756, 
    332.065029376206, 329.277884264281, 328.386322001221, 328.18636977067
    ), pctB = c(0.14323676918361, 0.0329454872184538, -0.0404611265984324, 
    -0.0802203299662945, 0.105359778541273, 0.166637992029882, 
    0.141203744470954, 0.121149246620224, 0.102440123690646, 
    0.169294704094218), ema = c(309.678489813407, 303.849244906704, 
    297.824622453352, 296.402311226676, 296.421155613338, 296.210577806669, 
    295.105288903334, 292.877644451667, 290.438822225834, 291.214411112917
    )), row.names = c(NA, -10L), ticker = "HT", index_quo = ~index, index_time_zone = "UTC", class = c("tbl_time", 
"tbl_df", "tbl", "data.frame"))
```
I can create new differenced column:
`data <- tidyquant::tq_mutate_(data, select = cls, mutate_fun = diff.xts)`
but can't do the same inside function, that is using strings for column names:
```
cls = "zadnja"
data <- tidyquant::tq_mutate_(data, select = cls, mutate_fun = diff.xts)
```
It returns an error:
```
 Error in match(x, table, nomatch = 0L) : 
  'match' requires vector arguments 
```
I would also like to change column name in place. In above example, if I want to change column "zadnja", it add new column "zadnja.1"
> library(tidyquant)

> aapl_key_ratios <- tq_get("AAPL", get = "key.ratios")

Warning messages:
1: x = 'AAPL', get = 'key.ratios': Error in UseMethod("as_list"): no applicable method for 'as_list' applied to an object of class "NULL"
 
2: x = 'AAPL', get = 'key.ratios': Error in eval(lhs, parent, parent): object 'key_ratios_bind' not found

appears these URLs 
 
http://financials.morningstar.com/ajax/ReportProcess4CSV.html?t=AAPL&reportType=bs&period=3&dataType=A&order=asc&columnYear=10&number=3

or

http://financials.morningstar.com/finan/ajax/exportKR2CSV.html?&callback=?&t=:AAPL&region=usa&culture=en-US&cur=&order=asc

no longer work to scrape the data files. However the option to download key ratios/statements still exists, i assume the URL has been changed.
How do I import a timeseries that I have obtained elsewhere and stored in an R object (e.g. a dataframe) into a tidyquant tibble? 