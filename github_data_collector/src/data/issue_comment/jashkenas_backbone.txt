

I know that backbone likes to call destroy on each model but in my particular case, it would be nice to be able to destroy all models in a collection with one call to speed up the process.

My scenario.
I am using Appcelerator which uses backbone collections to bind models to a list view.  Say I have 100 models in the collection bound to the listview. This listview contains leads ( customers who made a call to a dealership in the past 30 days). Now I only want to show the customers who made calls to the dealer in the past 7 days.  I could use reset but that does not remove the models so the current list would still show the 30-day list instead of the 7-day list.  In order to show the 7-day list, I have to run a loop to destroy each model in the collection and re-populate the collection.  The destroy loop for just 100 items takes about 10 seconds while adding the items takes under a second.

Without being able to remove all at once the UI since Appcelerator runs on the main thread is frozen until all the models are deleted. Currently, there is no workaround for this issue.
This PR fixes issue #4159, where a model was not properly removed from a collection after its ID was unset. The cause for this is that `_onModelEvent` handles potential model deletions upon detecting an event called "change", when the actual event name being sent was "change:_(attribute)_". An extra check was added so that the latter case is handled as well.
Hi there!

We're having a strange issue when using a collection of models with custom `idAttribute`. Basically, if `idAttribute` attribute has a value that "looks like" `cid` (**c12**, **c78**, etc), the model is not added to collection or merged with some previously added model.

Please, check the following simplified example:

```
const MyModel = Backbone.Model.extend({
    idAttribute: 'myId'
});

const MyCollection = Backbone.Collection.extend({
    model: MyModel
});

const list = [
  { myId: 'c10', name: 'John' },
  { myId: 'c9', name: 'James' },
  { myId: 'c8', name: 'William' },
  { myId: 'c7', name: 'Henry' },
  { myId: 'c6', name: 'Michael' },
  { myId: 'c5', name: 'Fred' },
  { myId: 'c4', name: 'George' },
  { myId: 'c3', name: 'Larry' },
  { myId: 'c2', name: 'Peter' },
  { myId: 'c1', name: 'Neil' }
];

const testCollection = new MyCollection(list);

alert(testCollection.length); // expected: 10, actual 5
```

Or check this fiddle: https://jsfiddle.net/0goy4u9w/8/

I believe this happens because Backbone stores models both by `cid` and `idAttribute`, when available, here:
https://github.com/jashkenas/backbone/blob/75e6d0ce6394bd2b809823c7f7dc014ddb6ae287/backbone.js#L1178-L1183
Then, during `set()` it finds the previously stored (by `cid`) model and assumes it's found a duplicate:
https://github.com/jashkenas/backbone/blob/75e6d0ce6394bd2b809823c7f7dc014ddb6ae287/backbone.js#L870-L877

Now, I understand that this looks like someone's tried really hard to find a defect ðŸ˜¬and created ids that look like cids, but we actually use custom id attributes that are unique, but don't follow same pattern (they come from different sources), and sometimes they actually look like cid. ðŸ˜±

Is there a reason why `cid` is still being used as key for `_byId` even when models have `idAttribute` declared?
fixes issue #4224

`collection._byId` is an internal object used solely for mapping ids to models, and doesn't need any of the standard object prototype methods for its internal usage.  
Unlikely to be a breaking change for any external uses, unless someone is really hacking into the core backbone functionality, and they can simply do things like `Object.prototype.hasOwnProperty.apply(collection._byId)`.

Alternative solution could be to use a `Map()` object for `collection._byId`, but that would require many more code changes, would not be supported in old browsers, and is more likely to break external uses.
```
const collection = new Backbone.Collection();
const model = new Backbone.Model({
    id: 'hasOwnProperty'
});
collection.set([model]); // TypeError: existing.set is not a function
```

In `Collection#set`, it does: `var existing = this.get(model);` which in this case is setting `existing` to `Object#hasOwnProperty` rather than `undefined` because `Collection#get` is returning the result of`this._byId['hasOwnProperty']`

Have reproduced this bug in a [codepen here](https://codepen.io/PeterW570/full/mddyaOx).
When using an ES6 class, idAttribute should be returned from a getter, rather than being set in the preinitialize function.
```javascript
class Meal extends Backbone.Model(
  get idAttribute() {
     return "_id";
  }
);
```

Otherwise the following will not work.
```javascript
let model = MealCollection.get(someId);
```

Due to the use of prototype in the collection function

```javascript
// Define how to uniquely identify models in the collection.
modelId: function(attrs) {
  return attrs[this.model.prototype.idAttribute || 'id'];
};
```

If a backbone model is an ES6 class with a statc property, and one use `Model.extend` to make a subclass (instead of the ES6 `extends`), the static properties of the base model are not added to the subclass.
- [x] fix the es6 version of the `backbone.localStorage`
- [ ] rollup task for creating UMD bundle (backbone.js)
- [x] lodash -> underscore 