I have a remote `https://api` server that I do not control.

I would like to use bloom to cache the responses from the remote server:

`curl -H "Bloom-Request-Shard: 0;" -H "Bloom-Request-Ignore: 1;" http://bloom-host:8080/my-url`

In this case I am:
-  making an http request to bloom with an https request to the api server
- specifying a new flag `Request-Ignore` to disable cache on the request

I have a few remote API servers, so an example of how to configure multiple hosts/shards would be useful.

NOTE: I am currently able to use bloom with http to accomplish this task, with the exception of controlling the ignore cache from the client.


Currently, Bloom supports a single Redis host / port. When Redis is run in a clustered mode with multiple masters, Bloom is unable to consider another Redis node to talk to for continued use upon the failure of a master node.

Libraries like ioredis support this kind of functionality (https://github.com/luin/ioredis/blob/master/API.md#Cluster). 
Goal: build a generic plugin system on Bloom to be able to extract data and inject live configuration changes (an I/O interface).

On which, we may integrate a wide range of stuff without needing to touch the Bloom core. For instance, a metrics system (which is relevant for the Bloom use case).

## Early requirements

### Metrics

1. Instance RPS (total, per request type)
2. Success/error ratio
3. Request/response latency per Bloom-Status (MISS, HIT, DIRECT)
4. Cache hit/miss ratio (probably per-route?)