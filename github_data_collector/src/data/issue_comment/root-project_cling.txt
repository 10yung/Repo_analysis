Hey, would you consider tagging releases more frequently, with a patch number (0.6.1, 0.6.2).

- This would help us engage with upstream development: indeed, with the current release cycle, our merged PRs get into releases several months later, so we cannot not use them in our projects. It would be more of an incentive if we new there could be a patch release including our changes in the next few weeks!
Also, the 0.5 to 0.6 migration was difficult for us because of the large number of changes at once.
- Also, this may prevent breakages by enabling more rapid feedback from downstream...
- Finally, this would enable rolling out features faster to outside users. For example, we are really excited by the ability to override variable is really cool, but we don't know when it will be in a release!
In our conda packaging for v0.6, we had to revert the change introduced in commit https://github.com/root-project/cling/commit/c23abbc88b6ee61b966291c785794743b1bd5c62 which switches from detecting the sysroot at runtime from using the build time value.

The problem is that we cannot distribute the OS X SDK in a conda package because of license reasons. Hence, we build things with an old version of the SDK (0.10.9) so that it can run with newer ones.

However, with that change, cling will look exactly at where the SDK was at build time, which prevents distributing a binary of cling on a different machine like we do with conda.

cc @chrisburr
I just completed the packaging of cling 0.6 for conda-forge, and now we also have a windows package! Woot!

Now I am working on building xeus-cling against that version of cling, and on windows, I am missing the import library `PREFIX/lib/libcling.lib` while `PREFIX/bin/libcling.dll` is present.

Is there a compilation flag that I should be using to enable the creation of the import library?
We were able to package cling 0.6 for conda-forge on windows, but we are seeing this error message upon startup:

```
[Windows] RegQueryValueEx<InstallationFolder>: returned 2: The system cannot find the file specified
```

![CLING-WINDOWS](https://user-images.githubusercontent.com/2397974/69385902-252aba00-0cc1-11ea-97d2-158c61c309ba.png)
Hi,

i have a problem with `std::future`. If I run the following code, I get the following error:

```C++
cling -pthread

****************** CLING ******************
* Type C++ code and press enter to run it *
*             Type .q to exit             *
*******************************************
[cling]$ #include <iostream>
[cling]$ #include <future>
[cling]$ int foo(){
[cling]$ ?   std::future<int> f1 = std::async([](){ return 42; });
[cling]$ ?   f1.wait();
[cling]$ ?   return f1.get();
[cling]$ ?   }
[cling]$ int i  = foo();
IncrementalExecutor::executeFunction: symbol '__emutls_v._ZSt11__once_call' unresolved while linking function '_GLOBAL__sub_I_cling_module_4'!
IncrementalExecutor::executeFunction: symbol '__emutls_v._ZSt15__once_callable' unresolved while linking function '_GLOBAL__sub_I_cling_module_4'!
[cling]$ i
(int) 0
[cling]$ i  = foo();
#0 0x00000000009410f4 PrintStackTraceSignalHandler(void*) (/home/sehrig/projects/xeus-cling-cuda/install_release/bin/cling+0x9410f4)
#1 0x00000000009413d6 SignalHandler(int) (/home/sehrig/projects/xeus-cling-cuda/install_release/bin/cling+0x9413d6)
#2 0x00007f3a3c0c74b0 (/lib/x86_64-linux-gnu/libc.so.6+0x354b0)
#3 0x00007f3a3c0c7428 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x35428)
#4 0x00007f3a3c0c902a abort (/lib/x86_64-linux-gnu/libc.so.6+0x3702a)
#5 0x00007f3a3c46e879 (/lib/x86_64-linux-gnu/libgcc_s.so.1+0x12879)
#6 0x00007f3a3d387fc3
#7 0x00007f3a3d385093
#8 0x00007f3a3d382484
#9 0x00007f3a3d3854c0
#10 0x00007f3a3d383032
#11 0x00007f3a3d37d033
#12 0x00007f3a3d372018
#13 0x00000000008a7ecc cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (/home/sehrig/projects/xeus-cling-cuda/install_release/bin/cling+0x8a7ecc)
#14 0x00000000008b8f41 cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (/home/sehrig/projects/xeus-cling-cuda/install_release/bin/cling+0x8b8f41)
#15 0x00000000008b8674 cling::Interpreter::process(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*, cling::Transaction**, bool) (/home/sehrig/projects/xeus-cling-cuda/install_release/bin/cling+0x8b8674)
#16 0x00000000008f4d8e cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (/home/sehrig/projects/xeus-cling-cuda/install_release/bin/cling+0x8f4d8e)
#17 0x000000000096e1eb cling::UserInterface::runInteractively(bool) (/home/sehrig/projects/xeus-cling-cuda/install_release/bin/cling+0x96e1eb)
#18 0x000000000090540d main (/home/sehrig/projects/xeus-cling-cuda/install_release/bin/cling+0x90540d)
#19 0x00007f3a3c0b2830 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x20830)
#20 0x0000000000813479 _start (/home/sehrig/projects/xeus-cling-cuda/install_release/bin/cling+0x813479)
Stack dump:
0.	Program arguments: /home/sehrig/projects/xeus-cling-cuda/install_release/bin/cling -pthread 
SIGABRT: abort
PC=0x474abb m=0 sigcode=0
```

I found some similar Issues, but without a solution or workaround.
https://root-forum.cern.ch/t/unresolved-symbols-when-using-std-async/28084/6
https://root-forum.cern.ch/t/unresolved-symbol-emutls-v-zst11-once-call/30595
https://sft.its.cern.ch/jira/si/jira.issueviews:issue-html/ROOT-9277/ROOT-9277.html

So my question is, is there a workaround?

By the way, upgrading the LLVM base to version 6 should solve the problem.
https://github.com/llvm/llvm-project/commit/8eec91e96d4a03ee1a3287405dda53e60d0c9933
Hello! I find the existing methods for loading third-party libraries to be a bit verbose and tightly coupled to the file system. I would like to propose a new pragma that allows dependencies to be linked using pkg-config. It would be something like:

```C++
#pragma cling pkg-config(libname)
```

This picks up the include directories, lib directories, lib names, other flags, etc. in a single pragma. Also, it doesn't have any hardcoded paths. As long as `PKG_CONFIG_PATH` is defined in the environment where the `.pc` files are found, everything will be found.

My inspiration for this is how [cgo uses comment magic to link dependencies with pkg-config](https://godoc.org/github.com/rjeczalik/pkgconfig/cmd/pkg-config).
 @Axel-Naumann Load, unload and load anonymous namespace will generate an error:
```bash
.L test.h
.U test.h
.L test.h
```
The error info is:
```bash
error: use of undeclared identifier 'test'
  template<> class info<test<int> > {};
```
The content of `test.h` is:
```c++
#ifndef test_1
#define test_1
namespace {
  template<typename T> class test;
}

namespace hello{
  template<typename T> class info;
  template<> class info<test<int> > {};
}
#endif
```
If we omit the anonymous namespace specifier `namespace{}`, there will be no error:
```c++
#ifndef test_1
#define test_1
 template<typename T> class test;
namespace hello{
  template<typename T> class info;
  template<> class info<test<int> > {};
}
#endif
```

Hi, I was wondering if there has been any thought about proposing to put the project under the LLVM umbrella, given the project's reliance on clang's and llvm's ever-changing apis. It would help keep the project in sync with upstream and potentially gain more visibility/contributors. 
Hi There,

This project is still using an old implementation of LGTM's automated code review, which has now been disabled. To continue using automated code review, and receive checks on your Pull Requests, please [install the GitHub App](https://github.com/apps/lgtm-com/installations/new) on this repository.

Thanks,
The LGTM Team
running cling cpt to build on mingw64 gave me:

$ ./cpt.py -c
Cling Packaging Tool (CPT)
Arguments vector: ['./cpt.py', '-c']

+=============================================================================+
| cling (AMD64)                                Sat, 05 Oct 2019 17:43:36 +0700|
+=============================================================================+
Thread Model: NT
Operating System: Windows
Distribution: N/A
Release: Windows 10
Revision: 10.0.16299
Architecture: AMD64

+-----------------------------------------------------------------------------+
| Check availability of required softwares                                    |
+-----------------------------------------------------------------------------+
git                 [OK]
python              [OK]
SSL                 [SUPPORTED]

subprocess.CalledProcessError: Command 'REG QUERY HKEY_CLASSES_ROOT/VisualStudio.DTE.14.0' returned non-zero exit status 1



+-----------------------------------------------------------------------------+
Clean up 
...

How to solve this to be able to build it on Mingw64 succesfully?  Thanks..