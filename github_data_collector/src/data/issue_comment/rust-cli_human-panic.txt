It would be great if we could have a new release for the changes made in https://github.com/rust-cli/human-panic/pull/63

cc @johnchildren 
While on desktop applications it makes sense to store the crash report in a file, on mobile devices it can be challenging to actually find the report file, especially for end users. So for these cases I would like to print the whole report, after message, such that it is easier to report.  Is this sth you would consider? Alternatively having a hook to customize the file writing would likely solve this issue as well. Thank you
https://github.com/rust-cli/human-panic/blob/200e427603841238a4a9ff97ca9e0c5d5b9be974/src/lib.rs#L220

The code attempts to downcast to &str but this will return None if the PanicInfo.payload() is a String. For example, consider the following panic:

`panic!("this is a {}", "test");`

The "Cause" will not be displayed in the "explanation" portion of the dump file as this panic has a payload of type String which is not &str. How do I get the Cause to show when I use a panic such as this? Or does this require a code change to support downcasting to other types such as String?
ðŸ”¦ question?

<!-- Provide a general summary of the issue in the title above -->

## Expected Behavior

<!-- If you're describing a bug, tell us what should happen -->
<!-- If you're suggesting a change/improvement, tell us how it should work -->

When using panic!, the log message is displayed prior to the stack trace. As an example, this statement

    panic!("feed item {:?} can't be parsed, as it doesn't have pub_date", &self);

will display an error message in stdout prior to the stack trace.

## Current Behavior
<!-- If describing a bug, tell us what happens instead of the expected behavior -->
<!-- If you are seeing an error, please include the full error message and stack trace -->
<!-- If suggesting a change/improvement, explain the difference from current behavior -->
The generated log file contains **lots** of info, but not this log message

## Possible Solution
<!-- Not obligatory, but suggest a fix/reason for the bug, -->
<!-- or ideas how to implement the addition or change -->
How could I add the log message to that file ?

## Context
<!-- How has this issue affected you? What are you trying to accomplish? -->
<!-- Providing context helps us come up with a solution that is most useful in the real world -->
I'm using human_panic in a command-line app I'm developing

## Code Sample
<!-- If you are seeing an error, please provide a code repository, gist or sample files to reproduce the issue -->

## Your Environment
<!-- Include as many relevant details about the environment you experienced the bug in -->

name = 'rrss2imap'
operating_system = 'windows'
crate_version = '0.1.3-alpha.0'

(I'm quite sure this section could be automatically generated when using human_panic)
Would it be possible to set a custom error message?

Perhaps a project could have a text file or config file that it passes as a string to human-panic's sourcing of its text.

This would also fix https://github.com/rust-clique/human-panic/issues/7#issuecomment-383035397.
This is a work-in-progress tracking issue for a `2.0` release of `human-panic`, set in motion because of #45 

## New Features

- [x] Show message only to humans (#48 | PR: #50)
- [x] Include original panic messages (#40 | PR: #43)
- [ ] Include rustc version program was compiled with (#31)
- [ ] Provide a way for tools to hook into panic reports (#30)
- [ ] Provide a way for crash reporters to be called (#7)
- [ ] Split `website` and `repository` fields ( - | PR: #45)
- [ ] Update to Rust 2018 (#57)
## Expected Behavior

I was investigating human-panic for possible usage in Clippy because we usually get a lot of failures due to being on nightly and depending on a lot of internal APIs.

Is there a possibility to include the current rustc version in the report?
Ideally, that would include everything that's shown in `rustc -vV`.

## Current Behavior
It's currently not included.

## Possible Solution
I think executing `rustc -vV`, capturing the output and adding it to the report file should work, but not sure.
I'd be happy to work on this if you have nothing against including that in the report.
**Choose one:**  ðŸ™‹ feature request

Something I noticed in [sentry](https://blog.sentry.io/2018/05/01/sentry-for-rust), which is an enterprise-y form of human-panic, is the ability to capture logged warnings / errors.  This could be a useful feature for human-panic as well to get extra context for why things might have failed.

See their [log integration](https://github.com/getsentry/sentry-rust/blob/master/src/integrations/log.rs) for their API and what features it provides.
As per #15, we should probably setup some tests. @killercup made a good suggestion that we could use https://github.com/assert-rs/assert_cli for that.
Could this crate at a later date optionally allow for sending the report on behalf of the user if they allow it rather than manual submission from the user? Or would that be the responsibility of another crate that builds off this one?