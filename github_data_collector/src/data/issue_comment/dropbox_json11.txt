MSVC build was failing under Visual Studio 2017 with CMake v3.15.5 and v3.16.2 generated project files.

Compiler cl.exe was failing with following error code for all GCC specific compiler flags
```bash
cl : Command line error D8021: invalid numeric argument '/Wextra'
```

CHECK_CXX_COMPILER_FLAG() evaluates with GCC specific compiler flags to positive result.
Parse the number according to the JSON grammar, ignoring the current
locale.
Please review and merge this pull request :
https://github.com/random-basad/json11/commit/7a03087db4898e50d41d06e1fd7945c92a109bd4

Thanks.
@artwyman 

```In file included from /home/genstor/toolchain/json11-master/json/json11.cpp:22:0:
/home/genstor/toolchain/json11-master/json/json11.hpp:228:25: error: 'virtual const json11::Json& json11::JsonValue::operator[](const string&) const' was hidden [-Werror=overloaded-virtual]
     virtual const Json &operator[](const std::string &key) const;
                         ^
/home/genstor/toolchain/json11-master/json/json11.cpp:206:18: error:   by 'virtual const json11::Json& json11::JsonArray::operator[](size_t) const' [-Werror=overloaded-virtual]
     const Json & operator[](size_t i) const override;
                  ^
In file included from /home/genstor/toolchain/json11-master/json/json11.cpp:22:0:
/home/genstor/toolchain/json11-master/json/json11.hpp:226:25: error: 'virtual const json11::Json& json11::JsonValue::operator[](size_t) const' was hidden [-Werror=overloaded-virtual]
     virtual const Json &operator[](size_t i) const;
                         ^
/home/genstor/toolchain/json11-master/json/json11.cpp:214:18: error:   by 'virtual const json11::Json& json11::JsonObject::operator[](const string&) const' [-Werror=overloaded-virtual]
     const Json & operator[](const string &key) const override;
                  ^
```
With
`set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -fno-omit-frame-pointer -fsanitize=address,undefined")`
`set (CMAKE_LINKER_FLAGS_DEBUG "${CMAKE_LINKER_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=address,undefined")`

I get the following report:

```usr/include/c++/8/bits/shared_ptr_base.h:735:4: runtime error: member call on address 0x603000115b40 which does not point to an object of type '_Sp_counted_base'
0x603000115b40: note: object has invalid vptr
 18 00 00 66  00 f1 21 58 55 55 00 00  01 00 00 00 01 00 00 00  b8 f2 21 58 55 55 00 00  be be be be
              ^~~~~~~~~~~~~~~~~~~~~~~
              invalid vptr
/usr/include/c++/8/bits/shared_ptr_base.h:728:4: runtime error: member call on address 0x603000115b40 which does not point to an object of type '_Sp_counted_base'
0x603000115b40: note: object has invalid vptr
 18 00 00 66  00 f1 21 58 55 55 00 00  02 00 00 00 01 00 00 00  b8 f2 21 58 55 55 00 00  be be be be
              ^~~~~~~~~~~~~~~~~~~~~~~
              invalid vptr
```

This is with git cloned a few moments ago. I can dig deeper a bit later. Have you tested json11 with asan?
I added the following to json11.hpp

```
 /// @weepy additions
        operator long() {
            return (long) int_value();
        }
        
        operator int() {
            return int_value();
        }
        operator float() {
            return (float) number_value();
        }
        operator double() {
            return (double) number_value();
        }
        operator std::string() {
            return string_value();
        }
        operator bool() {
            return bool_value();
        }
        
        operator object() {
            return object_items();
        }
        
        operator array() {
            return array_items();
        }
```

It makes using json11 much more convenient as the compiler will auto cast your variables for you, eg:  
```int id = myJson["id"];```

I need it ..
Don't expose the risk of accessing objects after the end of their lifetime
By adding this file, the library can be added to PlatformIO's library
registry. This way, projects built with PlatformIO can depend on json11
and it will be automatically downloaded from GitHub and linked with the
final program.
Let CMake create and install *json11Config.cmake* allowing other CMake projects to easily import json11 as a CMake-target by setting `json11_DIR` to the corresponding location.
json11 raises a "pure virtual function call" exception when trying to dump the following json:
{"params": {}, "method": "ping", "id": 1}

this only happens in gdb