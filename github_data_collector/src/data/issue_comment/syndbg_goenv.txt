I'm not sure why goenv doesn't do anything here, on aarch64. I've installed both rbenv and pyenv too, and pyenv is installing Python 3.8.0 for me on there right now, and I am pretty sure rbenv would be doing the same.

I tried running goenv install with verbose both on and off, and nothing gets printed out to the console.

Here's the goenv section of `.bashrc`:
```
export GOENV_ROOT="$HOME/.goenv"
export PATH="$GOENV_ROOT/bin:$PATH"
eval "$(goenv init -)"
export PATH="$GOROOT/bin:$PATH"
export PATH="$PATH:$GOPATH/bin"
```
Can INSTALL.md accept a complete refactoring at this point, or should we keep adding exceptions and notes for e.g. zsh and Ubuntu?  I know that the existing INSTALL.md is pretty much a direct port of the one from pyenv; I'm wondering if we're purposely staying with that template, or if we can stray.  I ask because I may have another note to add to it...

On Ubuntu (or any other distro that points BASH_ENV at .bashrc), if you follow the instructions in INSTALL.md, it currently tells you to put the `goenv init -` command in .bash_profile to prevent a loop.  This can create a problem though, because if you do that, the `goenv init -` command isn't run when starting a subshell from editors or IDEs.  

I ran into this problem when using vim-go, for instance, because vim-go needs to be able to shell out to run `guru` etc.  When the subshell is started, it doesn't run `goenv init -`, so GOPATH may not be set right, depending on what else is in your dotfiles.

Here's a general fix: Rather than call `goenv init -` from .bash_profile as INSTALL.md currently recommends, I instead put this at the bottom of my .bashrc:

```
if [ -z "$GOENV_INIT_DONE" ]
then
    export GOENV_INIT_DONE=1
    export GOENV_ROOT="$HOME/.goenv"
    export PATH="$GOENV_ROOT/bin:$PATH"
    eval "$(goenv init -)"
    export PATH="$GOROOT/bin:$PATH"
    export PATH="$GOPATH/bin:$PATH"
fi

```

For me, this fixed the problem I had, and I wonder if this sort of fix would prevent many of the problems others run into.  So rephrasing the question above -- should we add this sort of thing as yet another Ubuntu note, in addition to the existing Ubuntu and zsh notes, or should INSTALL.md be reworked completely?  

For instance, should we perhaps provide the above code as a script that is sourced from .bashrc, rather than continue with the multiple appends we're doing now?


First off, thanks for the great tool. I've run into a few problems since upgrading from version 1.X `brew install --HEAD goenv`

Previously I had the following in my `.bash_profile`, which seemed to work ok
```
if which goenv > /dev/null; then eval "$(goenv init -)"; fi
export GOPATH="$HOME/go"
export PATH="$GOROOT/bin:$PATH"
export PATH="$GOPATH/bin:$PATH"
```

The docs for `GOENV_DISABLE_GOPATH` specify:
>It's recommend that you use this (as set to 0) to avoid mixing multiple versions of golang packages at GOPATH when using different versions of golang. See https://github.com/syndbg/goenv/issues/72#issuecomment-478011438

So now I have the following in my `.bash_profile` and I'm leaving `goenv` to manage my `GOPATH`
```
if which goenv > /dev/null; then eval "$(goenv init -)"; fi
export PATH="$GOROOT/bin:$PATH"
export PATH="$GOPATH/bin:$PATH"
```

Currently my projects are all in the `$HOME/go/src` dir:
```
/Users/gw/go/src/gitlab.com/GrahamWalters/project-a (1.11.4)
/Users/gw/go/src/gitlab.com/GrahamWalters/project-b (1.12.7)
```
1. Can you confirm I should be moving them into the versioned dirs `$HOME/go/version/src`?
```
/Users/gw/go/1.11.4/src/gitlab.com/GrahamWalters/project-a (1.11.4)
/Users/gw/go/1.12.7/src/gitlab.com/GrahamWalters/project-b (1.12.7)
```

2. Alternatively, is it possible to only separate the binaries? Something like the following
```
/Users/gw/go/src/gitlab.com/GrahamWalters/project-a (1.11.4)
/Users/gw/go/src/gitlab.com/GrahamWalters/project-b (1.12.7)
/Users/gw/go/1.11.4/bin/project-a
/Users/gw/go/1.12.7/bin/project-b
```

Followed all the instructions but this doesn't seem to work on alpine (3.8, 3.9 or 3.10).

go and godoc give command not found (gofmt works).


```
➜  .goenv git:(master) ls cache
go1.12.4.darwin-amd64.tar.gz
➜  .goenv git:(master) goenv install 1.12.4
Downloading go1.12.4.darwin-amd64.tar.gz...
-> https://dl.google.com/go/go1.12.4.darwin-amd64.tar.gz
^C%
```
it still needs to download the archive file

gone version: 2.00beta9

When printing out the version numbers they don't come out in semver order

```
$ goenv versions 
  1.10.2
* 1.11.0 (set by /home/hughest/.goenv/version)
  1.5.4
```

Using sort fixes it but I don't know if this is a linux extension to sort or cross platform

```
$ goenv versions |sort --version-sort
  1.5.4
  1.10.2
* 1.11.0 (set by /home/hughest/.goenv/version)
```
Hi there,

I notice that there haven't been any 1.X releases lately in favour of 2.0.0 beta releases. Are we likely to see any more 1.X releases coming out? Is a 2.0.0 stable release likely to drop soon?

If there aren't likely to be any new 1.X releases would it be appropriate if we updated the Homebrew references to point to the 2.x betas? I'd love for my team to update to Go 1.12, but ideally we can avoid manually managing our goenv installations.

https://github.com/Homebrew/homebrew-core/blob/master/Formula/goenv.rb

I'm less familiar how this project operates, but is there intention in the future to decouple go-build and goenv releases to allow for go version bumps independent of toolchain changes to goenv itself?
Okay so, I'm new to Go, and found goenv since I'm familiar with rbenv, pyenv, etc.
I'm having trouble getting stuff installed with `go get` commands that have binaries to actually ever say anything other than "command not found".

Forgive me if this has already been discussed, I did browse the closed issues and the open issues but couldn't find exactly this.

I'm assuming this works a lot like rbenv, etc.

I use `goenv` as I would any other.
`goenv install 1.8.3`
`goenv global 1.8.3`

I install dependencies such as `revel` and `dep` with:
`go get -u github.com/golang/dep/cmd/dep`
`go get github.com/revel/revel`

`goenv rehash` and I still am getting:
`-bash: dep: command not found`
`-bash: revel: command not found`
 
In my ~/.bash_profile on MacOS Sierra:
```
export GOENV_ROOT="$HOME/.goenv"
export PATH="$GOENV_ROOT/bin:$PATH"
eval "$(goenv init -)"
export GOPATH="$HOME/go"
```

As seen above, I even tried something from another closed issue for setting `GOPATH=` to ~/go as default.  But no dice.

Any tips on this?