
<img width="1032" alt="image" src="https://user-images.githubusercontent.com/649227/71842053-2a04cb00-30c1-11ea-8eb8-e3571e03f08a.png">

If line#24 use 'wif_compressed', it will produce a wrong Key (WIF-Compressed) started with 2.

So there should be 'wif', unless :

wif_compressed_private_key = bitcoin.encode_privkey(
    bitcoin.decode_privkey(private_key, 'hex'), 'wif_compressed')

This is also right. 

However, use the 'compressed_private_key' and 'wif_compressed' is wrong.
in the example you write: 

> When Fabian’s server receives this transaction, it adds the second signature (for the 2-of-2 input) and returns it to Emma together with 1 second worth of video. Now both parties have a fully signed commitment transaction that either can redeem, representing the correct up-to-date balance of the channel. Neither party broadcasts this transaction to the network.

Why that design? It would be much more useful if Fabian would not send the tx back to Emma. in this way the channel still relies on trusting Fabian but Emma can't cheat anymore. 

It is an illustrative example anyway. Also it might be worthwhile thinking about sending over signatures instead of tx. everyone knows how the tx look like and sending over signatures will resemble the actual lightning network much more

In Ch06:Separate execution of unlocking and locking scripts
> First, the unlocking script is executed, using the stack execution engine. If the unlocking script is executed without errors (e.g., it has no "dangling" operators left over), **the main stack is copied and the locking script is executed.** If the result of executing the locking script with the stack data copied from the unlocking script is "TRUE," the unlocking script has succeeded in resolving the conditions imposed by the locking script and, therefore, the input is a valid authorization to spend the UTXO. 

**1, What exactly the main stack here is? The result of the unlocking script or the raw data of the unlocking script.
2, It says the unlocking script is executed firstly, which is mismatch with the P2SH processing procedure in CH07.**
In CH07: Pay-to-Script-Hash (P2SH)
> 
![image](https://user-images.githubusercontent.com/30827440/68266199-57b1a180-0089-11ea-83fc-fb0653960007.png)


>The two scripts are combined in two stages. First, the redeem script is checked against the locking script to make sure the hash matches:
` <2 PK1 PK2 PK3 PK4 PK5 5 CHECKMULTISIG> HASH160 <redeem scriptHash> EQUAL`

>If the redeem script hash matches, the unlocking script is executed on its own, to unlock the redeem script:
`<Sig1> <Sig2> 2 PK1 PK2 PK3 PK4 PK5 5 CHECKMULTISIG`

**Why here it says the locking script ` <2 PK1 PK2 PK3 PK4 PK5 5 CHECKMULTISIG> HASH160 <redeem scriptHash> EQUAL` is process firstly?And does it miss a  DUP before the the locking script**

Thanks!!
It's not an exact comparison because you could have many email addresses and a single bitcoin amount could be sent to many more than one of your bitcoin addresses. From a reader's viewpoint, I feel that the new text makes the flow of the sentence clearer without getting pedantic.
def kalkulator () :
def tambah () :
print ‘1.Penjumlahan’
a = input (‘Masukkan nilai x = ’)
b = input (‘Masukkan nilai y = ’)
c = a+b
print ‘x + y = ’,c
print (‘ ‘)
tanya ()

def kurang () :
print ‘2.Pengurangan’
a = input (‘Masukkan nilai x = ’)
b = input (‘Masukkan nilai y = ’)
c = a-b
print ‘x – y = ’,c
print (‘ ‘)
tanya ()
def kali () :
print ‘3.Perkalian’
a = input (‘Masukkan nilai x = ’)
b = input (‘Masukkan nilai y = ’)
c = a*b
print ‘x . y = ’,c
print (‘ ‘)
tanya ()
def bagi () :
print ‘4.Pembagian’
a = input (‘Masukkan nilai x = ’)
b = input (‘Masukkan nilai y = ’)
c = a+b
print ‘x /y = ’,c
print (‘ ‘)
tanya ()
def tanya () :
choose = raw_input (‘Ulangi lagi (Y/T)? ’)
if choose == ‘Y’ or choose == ‘y’:
kalkulator ()
elif choose == ‘T’ or choose ‘t’:
print ‘Terima kasih sudah menggunakan program ini’
else :
print ‘Maaf, input yang Anda masukkan salah’
print ‘Silahkan masukkan Y atau T’
tanya ()
print (‘Program Kalkulator Sederhana’)
print (‘################’)
print (‘1. Penjumlahan’)
print (‘2. Pengurangan’)
print (‘3. Perkalian’)
print (‘4. Pembagian’)
print (‘################’)
print (‘silahkan pilih 1-4’)
print (‘ ‘)

pil = raw_input (‘Masukkan pilihan : ’)
if pil == ‘1’:
tambah ()
elif pil == ‘2’:
kurang ()
elif pil == ‘3’:
kali ()
elif pil == ‘4’:
bagi ()
else :
print (‘Maaf, input yang Anda masukkan salah’)
print (‘coba ulangi lagi’)
tanya ()
kalkulator()
"However, because the xpub contains the **chain code**, if a child private key is known, or
somehow leaked, it can be used with the chain code to derive all the other child pri‐
vate keys. A single leaked child private key, together with a parent chain code, reveals
all the private keys of all the children. Worse, the child private key together with a
parent chain code can be used to deduce the parent private key."

1. **chain code**  is parent's chain code?
2. if 1 true why it together with a  child private key can  reveals all the private keys of all the children?
![image](https://user-images.githubusercontent.com/13699123/67771337-128edd80-fa93-11e9-8cf2-33c442daaf17.png)

it means kowns 1 and 2 then all child privates keys konws?


