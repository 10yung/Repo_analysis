#### Code Sample, a copy-pastable example if possible

In 1.0.0 rc0, `pd.read_csv` returns this error when reading NA with specifying dtype of 'boolean'

```python
# import pandas as pd
# import io

>>> txt = """
X1,X2,X3
1,a,True
2,b,False
NA,NA,NA
"""
>>> df1 = pd.read_csv(io.StringIO(txt), dtype={'X3': 'boolean'}) # `pd.BooleanDtype()` also fails
raceback (most recent call last):
  File "pandas/_libs/parsers.pyx", line 1191, in pandas._libs.parsers.TextReader._convert_with_dtype
  File "/usr/local/lib/python3.7/site-packages/pandas/core/arrays/base.py", line 232, in _from_sequence_of_strings
    raise AbstractMethodError(cls)
pandas.errors.AbstractMethodError: This method must be defined in the concrete class type

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/local/lib/python3.7/site-packages/pandas/io/parsers.py", line 676, in parser_f
    return _read(filepath_or_buffer, kwds)
  File "/usr/local/lib/python3.7/site-packages/pandas/io/parsers.py", line 454, in _read
    data = parser.read(nrows)
  File "/usr/local/lib/python3.7/site-packages/pandas/io/parsers.py", line 1133, in read
    ret = self._engine.read(nrows)
  File "/usr/local/lib/python3.7/site-packages/pandas/io/parsers.py", line 2037, in read
    data = self._reader.read(nrows)
  File "pandas/_libs/parsers.pyx", line 859, in pandas._libs.parsers.TextReader.read
  File "pandas/_libs/parsers.pyx", line 874, in pandas._libs.parsers.TextReader._read_low_memory
  File "pandas/_libs/parsers.pyx", line 951, in pandas._libs.parsers.TextReader._read_rows
  File "pandas/_libs/parsers.pyx", line 1083, in pandas._libs.parsers.TextReader._convert_column_data
  File "pandas/_libs/parsers.pyx", line 1114, in pandas._libs.parsers.TextReader._convert_tokens
  File "pandas/_libs/parsers.pyx", line 1194, in pandas._libs.parsers.TextReader._convert_with_dtype
NotImplementedError: Extension Array: <class 'pandas.core.arrays.boolean.BooleanArray'> must implement _from_sequence_of_strings in order to be used in parser methods
```

while "Int64" and "string" with NA can be correctly recognized.

```python
>>> df2 = pd.read_csv(io.StringIO(txt), dtype={'X1': 'Int64', 'X2': 'string'})
>>> df2
     X1    X2     X3
0     1     a   True
1     2     b  False
2  <NA>  <NA>    NaN
>>> df2.dtypes
X1     Int64
X2    string
X3    object
dtype: object
```

#### Problem description

NA literal for boolean is not parsed by `pd.read_csv`

#### Expected Output

```python
df3 = pd.read_csv(io.StringIO(txt), dtype={'X3': 'boolean'})
>>> df3
    X1   X2     X3
0  1.0    a   True
1  2.0    b  False
2  NaN  NaN   <NA>
>>> df3.dtypes
X1    float64
X2     object
X3    boolean
dtype: object

# and
df4 = pd.read_csv(io.StringIO(txt), dtype={'X1': 'Int64', 'X2': 'string', 'X3': 'boolean'})
>>> df4
     X1    X2     X3
0     1     a   True
1     2     b  False
2  <NA>  <NA>   <NA>
>>> df4.dtypes
X1     Int64
X2    string
X3   boolean
dtype: object
```

#### Output of ``pd.show_versions()``

<details>

INSTALLED VERSIONS
------------------
commit           : None
python           : 3.7.6.final.0
python-bits      : 64
OS               : Linux
OS-release       : 4.9.184-linuxkit
machine          : x86_64
processor        : 
byteorder        : little
LC_ALL           : None
LANG             : C.UTF-8
LOCALE           : en_US.UTF-8

pandas           : 1.0.0rc0
numpy            : 1.18.1
pytz             : 2019.3
dateutil         : 2.8.1
pip              : 19.3.1
setuptools       : 44.0.0
Cython           : None
pytest           : None
hypothesis       : None
sphinx           : None
blosc            : None
feather          : None
xlsxwriter       : None
lxml.etree       : None
html5lib         : None
pymysql          : None
psycopg2         : None
jinja2           : None
IPython          : None
pandas_datareader: None
bs4              : None
bottleneck       : None
fastparquet      : None
gcsfs            : None
lxml.etree       : None
matplotlib       : None
numexpr          : None
odfpy            : None
openpyxl         : None
pandas_gbq       : None
pyarrow          : None
pytables         : None
pytest           : None
s3fs             : None
scipy            : None
sqlalchemy       : None
tables           : None
tabulate         : None
xarray           : None
xlrd             : None
xlwt             : None
xlsxwriter       : None
numba            : None
</details>

- [x] ref #30999
- [x] tests added / passed
- [x] passes `black pandas`
- [x] passes `git diff upstream/master -u -- "*.py" | flake8 --diff`
- [ ] whatsnew entry

Opened PR for what @gfyoung wrote [here](https://github.com/pandas-dev/pandas/issues/30999#issuecomment-575426086)


#### Code Sample, a copy-pastable example if possible

```python
df = pd.DataFrame(
    [[5.1, 3.5, 0], [4.9, 3.0, 0], [7.0, 3.2, 1], [6.4, 3.2, 1], [5.9, 3.0, 2]],
    columns=["length", "width", "species"],
)
ax1 = df.plot.scatter(x="length", y="width", c=128)
```
returns
```
IndexError: index 128 is out of bounds for axis 0 with size 3
```
#### Problem description

The docstring reads

>         c : str, int or array_like, optional
>             The color of each point. Possible values are:
> 
>             - A single color string referred to by name, RGB or RGBA code,
>               for instance 'red' or '#a98d19'.
> 
>             - A sequence of color strings referred to by name, RGB or RGBA
>               code, which will be used for each point's color recursively. For
>               instance ['green','yellow'] all points will be filled in green or
>               yellow, alternatively.
> 
>             - A column name or position whose values will be used to color the
>               marker points according to a colormap.

but it doesn't say what passing a `c` of type `int` does.

#### Output of ``pd.show_versions()``

<details>

INSTALLED VERSIONS
------------------
commit           : 00c9b2df2dd5680eb13605f599e38a0f5950aeef
python           : 3.7.4.final.0
python-bits      : 64
OS               : Linux
OS-release       : 4.15.0-74-generic
machine          : x86_64
processor        : x86_64
byteorder        : little
LC_ALL           : None
LANG             : en_GB.UTF-8
LOCALE           : en_GB.UTF-8

pandas           : 0.26.0.dev0+1837.g00c9b2df2
numpy            : 1.17.4
pytz             : 2019.3
dateutil         : 2.8.1
pip              : 19.2.2
setuptools       : 41.0.1
Cython           : 0.29.14
pytest           : 5.0.1
hypothesis       : 4.32.2
sphinx           : 2.2.2
blosc            : 1.8.3
feather          : None
xlsxwriter       : 1.1.8
lxml.etree       : 4.4.1
html5lib         : 1.0.1
pymysql          : None
psycopg2         : None
jinja2           : 2.10.3
IPython          : 7.8.0
pandas_datareader: None
bs4              : 4.8.0
bottleneck       : 1.2.1
fastparquet      : 0.3.2
gcsfs            : None
lxml.etree       : 4.4.1
matplotlib       : 3.1.1
numexpr          : 2.7.0
odfpy            : None
openpyxl         : 2.6.2
pandas_gbq       : None
pyarrow          : 0.15.1
pytables         : None
pytest           : 5.0.1
s3fs             : 0.2.1
scipy            : 1.3.1
sqlalchemy       : 1.3.7
tables           : 3.5.2
tabulate         : 0.8.6
xarray           : 0.12.1
xlrd             : 1.2.0
xlwt             : 1.3.0
xlsxwriter       : 1.1.8
numba            : 0.45.1

</details>

Makes mypy discover the ``.index`` and ``.columns`` attributes and that they're ``Index`` (sub-)classes.

This is done by manually adding the ``properties.AxisProperty`` to DataFrame/Series instead of doing it programatically, as mypy doesn't like adding attributes programatically very much.
- [x] closes #29879
- [x] tests added / passed
- [x] passes `black pandas`
- [x] passes `git diff upstream/master -u -- "*.py" | flake8 --diff`
- [x] whatsnew entry

- [ ] closes #10720
- [ ] tests added / passed
- [ ] passes `black pandas`
- [ ] passes `git diff upstream/master -u -- "*.py" | flake8 --diff`
In trying to refactor IntervalIndex.get_loc/get_value to more closely follow the other implementations, I stumbled on a behavior in a test case that surprised me:

```
idx = IntervalIndex.from_tuples([(1, 5), (3, 7)])
s = Series(range(len(idx)), index=idx)
key = [4]

>>> idx.get_loc(key)  # <-- behaves like all the other get_locs in requiring scalar
KeyError: [4]

>>> idx.get_value(s, key)   # <-- surprising
(1, 5]    0
(3, 7]    1
dtype: int64
```

All of the other FooIndex.get_value methods raise InvalidIndexError on non-scalar.

AFAICT this is behaving sort of like a slicing operation, since 4 is in the interior of both of these intervals.  @jschendel is that correct?  If so, we should try to refactor IntervalIndex.get_value to explicitly dispatch for this case, kind of like DatetimeIndex._get_string_slice
Within [DataFrame.info](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.info.html), the description of the [DatetimeIndex](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DatetimeIndex.html) of unsorted indexes might not be clear enough to users, because just showing the first and last element and not the *"min date" to "max date"* values.

Please check the following sample:

```python
import pandas as pd
dfs = []
for day in [30, 1, 2, 5]:
    idx = pd.date_range(f'2020-01-{day} 00:00:00', periods=1000, freq='s')
    dfs.append(pd.DataFrame({'count': range(len(idx)), 'date': idx}))

df = pd.concat(dfs)
df.set_index(['date'], inplace=True)
df
df.info()
df.index.min()
df.index.max()
```

Reated output is the following:
```
>>> df
                     count
date
2020-01-30 00:00:00      0
2020-01-30 00:00:01      1
2020-01-30 00:00:02      2
2020-01-30 00:00:03      3
2020-01-30 00:00:04      4
...                    ...
2020-01-05 00:16:35    995
2020-01-05 00:16:36    996
2020-01-05 00:16:37    997
2020-01-05 00:16:38    998
2020-01-05 00:16:39    999

[4000 rows x 1 columns]
>>> df.info()
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 4000 entries, 2020-01-30 00:00:00 to 2020-01-05 00:16:39
Data columns (total 1 columns):
 #   Column  Non-Null Count  Dtype
---  ------  --------------  -----
 0   count   4000 non-null   int64
dtypes: int64(1)
memory usage: 62.5 KB
>>> df.index.min()
Timestamp('2020-01-01 00:00:00')
>>> df.index.max()
Timestamp('2020-01-30 00:16:39')
```

I would expect `2020-01-01 00:00:00 to 2020-01-30 00:16:39` (min and max range values for DatetimeIndex) and not `2020-01-30 00:00:00 to 2020-01-05 00:16:39` (first and last element).

In case, PR https://github.com/pandas-dev/pandas/pull/31069 fixes the issue.

<details>

INSTALLED VERSIONS
------------------
commit           : None
python           : 3.6.8.final.0
python-bits      : 64
OS               : Linux
OS-release       : 4.4.0-18362-Microsoft
machine          : x86_64
processor        : x86_64
byteorder        : little
LC_ALL           : None
LANG             : en_US.UTF-8
LOCALE           : en_US.UTF-8

pandas           : 0.25.1
numpy            : 1.17.4
pytz             : 2019.3
dateutil         : 2.8.0
pip              : 19.3.1
setuptools       : 41.6.0
Cython           : 0.29.14
pytest           : 5.3.0
hypothesis       : None
sphinx           : None
blosc            : None
feather          : None
xlsxwriter       : None
lxml.etree       : 4.4.1
html5lib         : None
pymysql          : None
psycopg2         : None
jinja2           : 2.10.3
IPython          : 7.8.0
pandas_datareader: None
bs4              : 4.8.1
bottleneck       : None
fastparquet      : 0.3.2
gcsfs            : None
lxml.etree       : 4.4.1
matplotlib       : 3.1.1
numexpr          : None
odfpy            : None
openpyxl         : None
pandas_gbq       : None
pyarrow          : 0.15.1
pytables         : None
s3fs             : None
scipy            : 1.3.3
sqlalchemy       : None
tables           : None
xarray           : None
xlrd             : None
xlwt             : None
xlsxwriter       : None
</details>
