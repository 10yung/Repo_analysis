I don't see any implementations for prime number generators. For starters, how about Linear prime sieve.

I'd like to see that added to the library.
I was surprised to see a BinaryTreeMap and a RedBlackTreeMap but no AVLTreeMap (given the fact that there is an AVLTree implementation in the library). 

For the sake of completion, I'd like to see an AVLTreeMap added. 
looks not any bitmap in this repo.
plan for RoaringBitmap support ?

FindGCD() is not working as expected.It runs as infinite loop if I try to find a GCD of 4,5 with value of r =4 everytime.

# steps to reproduce
Write a loop, from 1 to 80000, each time add a random int to the max heap.

In theory it takes very little time(NlogN, N=80000, <1sec ), but the program does take a long time.

I'v also tested the BinaryHeap in https://github.com/SolutionsDesign/Algorithmia, it performs well, so it is probably due to the bad algorithm.

Original implementation only supports `long` as edge weights.
This PR allows customized edge weight types while keeps default edge weight type as long/Int64.
https://chrispenner.ca/posts/intro-to-finger-trees
Hi,

Are there any plans to migrate this project to .net standard and/or have a nuget package?
```
int midIndex = collection.Count / 2;
var leftCollection = collection.GetRange(startIndex, midIndex);
var rightCollection = collection.GetRange(midIndex, (endIndex - midIndex) + 1);
leftCollection = InternalMergeSort<T>(leftCollection, 0, leftCollection.Count - 1, comparer);
rightCollection = InternalMergeSort<T>(rightCollection, 0, rightCollection.Count - 1, comparer);
```

No need to invoke GetRange, as it copies the data and consumes extra memory. Passing StartIndex, EndIndex along with the original array should be sufficient. Don't you think so?