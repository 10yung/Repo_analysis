### Description

Describe your issue here.

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [ x] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [x ] I've read and understood the [Contributing guidelines](https://github.com/slackapi/hubot-slack/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [ x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x ] I've searched for any related issues and avoided creating a duplicate issue.

---

### Bug Report

Filling out the following details about bugs will help us solve your issue sooner.

#### Reproducible in:

hubot-slack version: 4.7.1

node version: 0.10.x

OS version(s):

#### Steps to reproduce:

1.
2.
3.

#### Expected result:
to display the user status when he changes the status in slack
What you expected to happen

#### Actual result:

What actually happened
 a blank console wihout any result
#### Attachments:

Logs, screenshots, screencast, sample project, funny gif, etc.
### Description

User Groups allow multiple users to be @ mentioned in one go, or to build a sort of "dynamic dispatch" messaging system like `@on-call-responder` that can be set to different users based on a rota.

Hubot has a `respond` callback, which will trigger when Hubot is mentioned.

Currently, this callback is not triggered by a user-group mention when Hubot is in a user group.

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [x] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/hubot-slack/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.

---

### Bug Report

Filling out the following details about bugs will help us solve your issue sooner.

#### Reproducible in:

hubot-slack version: 4.7.1 

node version: 7.10.1

OS version(s): Debian Jessie

#### Steps to reproduce:

1. Create a user group, e.g. `@test`
2. Put `@hubot` in the group `@test`
3. With the following script:

```js
module.exports = function(robot) {
  robot.respond(/test/i, function(res) {
    res.send("pong");
  });
}
```

4. Message `@test ping`

#### Expected result:

No reply from Hubot.

Messaging Hubot with `@hubot test ping` does however result in this, but is not using the user group.

#### Actual result:

A reply from Hubot of `pong`


I am writing a Hubot script where I want Hubot to listen to a particular slack channel for a specific command. If the command comes from this channel, only then Hubot should respond to it. I want to implement this on a script level, so I do not want to whitelist or blacklist channels. I can achieve this using `robot.hear` and an `if` condition but I was wondering if there’s a better way to do this. I welcome your suggestions.
### Description

Describe your issue here.

──────────────────────────────────────────────────────────────────────────────┐
│                                Manual Review                                 │
│            Some vulnerabilities require your attention to resolve            │
│                                                                              │
│         Visit https://go.npm.me/audit-guide for additional guidance          │
└──────────────────────────────────────────────────────────────────────────────┘
┌───────────────┬──────────────────────────────────────────────────────────────┐
│ High          │ Machine-In-The-Middle                                        │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Package       │ https-proxy-agent                                            │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Patched in    │ >=3.0.0                                                      │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Dependency of │ hubot-slack                                                  │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Path          │ hubot-slack > @slack/client > https-proxy-agent              │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ More info     │ https://nodesecurity.io/advisories/1184

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [ X] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [ ] I've read and understood the [Contributing guidelines](https://github.com/slackapi/hubot-slack/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [ ] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [ ] I've searched for any related issues and avoided creating a duplicate issue.

---

### Bug Report

Filling out the following details about bugs will help us solve your issue sooner.

#### Reproducible in:

hubot-slack version: 4.7.1

node version:

OS version(s):

#### Steps to reproduce:

1.
2.
3.

#### Expected result:

What you expected to happen

#### Actual result:

What actually happened

#### Attachments:

Logs, screenshots, screencast, sample project, funny gif, etc.
The slack rtm client handles reconnections automatically, but when it does so, subscriptions for presence_change events are lost. This means after one or more autoReconnects, presenceChange events will not fire.

_Fix_: I've taken a stab at fixing this in a fork and confirmed it works as expected. I'm not a javascript/ coffeescript programmer tho, so I had a scoping issue with @presenceSub in bot.coffee that I got around by inlining..  https://github.com/kippr/hubot-slack/commit/c35a109e6366a541d73235538020dac5e527bf94

### What type of issue is this? (place an `x` in one of the `[ ]`)
- [x] bug
- [ ] enhancement (feature request)
- [ ] question
- [ ] documentation related
- [ ] testing related
- [ ] discussion

### Requirements (place an `x` in each of the `[ ]`)
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/hubot-slack/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.

---

### Bug Report


#### Reproducible in:

hubot-slack version: 4.7.1

node version: 

OS version(s):

#### Steps to reproduce:

The simplest way to see this is to watch the debug logs, but you can also create a simple hubot script that does something on presence changes. (robot.presenceChange (msg) callback)

1. Connect hubot to your slack instance
2. Start the slack client
3. monitor for 'Received presence change update message [..]' in debug logs for your connection/ disconnection events by starting/ quitting client
4. use tcpkill or some other tool to disrupt hubot's connection to slack; hubot will reconnect
5. monitor for same presence change messages

#### Expected result:

The messages should keep firing.

#### Actual result:

They don't because the subscriptions for presence change events don't get created on the new connection.

#### Attachments:

Logs, screenshots, screencast, sample project, funny gif, etc.
### Description

Marking this as question because I'm not sure it's a bug. I've noticed that the enter and leave events are missing a timestamp (I will talk about only enter events from here on because leave events behave the same).

Most things in the eventHandler return a timestamp from `event.ts` or `event.event_ts`. Enter events do not: ([source](https://github.com/slackapi/hubot-slack/blob/master/src/bot.coffee#L262-L266))

```coffeescript
    else if event.type is "member_joined_channel"
      # this event type always has a channel
      user.room = channel
      @robot.logger.debug "Received enter message for user: #{user.id}, joining: #{channel}"
      @receive new EnterMessage user
```

The only thing it passes to `@receive` is user, and you can see as much if you console.log what you get when using `robot.enter` as a script developer; you have user data and that's it.

My use case is: I'd like the robot to apply emoji reactions to the message for the enter event in Slack but that action [requires a timestamp and a channel](https://api.slack.com/methods/reactions.add#arguments). I can get the channel from room, kinda, but I don't have the message timestamp.

To be honest it's not clear to me whether that RTM event even contains a timestamp or not because the documentation for [member_joined_channel](https://api.slack.com/events/member_joined_channel) does not include a timestamp in the example even though the example in [the 2017 blog post introducing this event](https://api.slack.com/changelog/2017-05-rethinking-channel-entrance-and-exit-events-and-messages) _does_ include one. What's for sure is that the [message/channel_join](https://api.slack.com/events/message/channel_join) _did_ include a timestamp and probably its frequency would be sufficient for my use case but we moved away from using that in #513.

If the RTM event member_joined_channel does include a timestamp, this is perfect and I will create a pull request to try to propogate that timestamp to Hubot. How can I find that out?

If it does _not_ have one, then it is probably intentional and in that case, how can I work around the now-missing message/channel_join which has the timestamp I need?

Sorry for the wall of text 😅

### What type of issue is this?
- [x] question

### Requirements
* [x] I've read and understood the [Contributing guidelines](https://github.com/slackapi/hubot-slack/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
* [x] I've searched for any related issues and avoided creating a duplicate issue.
This is a really minor syntax-only change and shouldn't affect behaviour at all.

Because what we're assigning in the happy side of this condition is the same as what we're checking in its expression we can use Coffeescript's shorthand with the existential operator, i.e. instead of

    a = if b? then b else c

use this:

    a = b ? c

Source: https://coffeescript.org/#existential-operator

###  Summary

Describe the goal of this PR. Mention any related Issue numbers.

### Requirements (place an `x` in each `[ ]`)

* [x] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/hubot-slack/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
###  Summary

This exposes Slack rate-limiting information to Hubot. This allows custom scripts to react to rate-limiting, for example to slow themselves down or to report to an alerting channel that a rate-limiting event has occurred.

### Requirements (place an `x` in each `[ ]`)

* [x] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/hubot-slack/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).
Does anyone have or can share a hubot and slack message menu's integration code? 
my requirement is: whenever user choses an option from menu, how do i capture that selection in hubot?

I tried hubot-interactive-messages but receiving this error: 

Unable to load /home/xxxx/app/scripts/xxxxx: TypeError: robot.setOptionsHandler is not a function

here is my package.json
{
  "name": "xxxxxx",
  "version": "0.0.0",
  "private": true,
  "author": "xxxxxxxxxx",
  "description": "xxxxxxxx",
  "dependencies": {
    "coffee-script": "^1.11.1",
    "hubot": "^3.3.2",
    "hubot-diagnostics": "^1.0.0",
    "hubot-help": "^1.0.1",
    "hubot-pugme": "^0.1.1",
    "hubot-rules": "^1.0.0",
    "hubot-slack": "^4.7.1",
    "hubot-interactive-messages": "^0.0.2"
  }
}
###  Summary

My company's Hubot has been facing some repeated rate-limiting issues, and we've found that hubot-slack has been missing the diagnostics we need to be able to figure out the cause. This adds some new event emitters to let user scripts listen in for these events. So far I've added emitters for every message that's posted, and whenever a rate limit occurs.

An open question for me on the latter is whether there's any other place that rate limiting might come up, and whether there's any detail that I can include in the `slack-rate-limit` event in order to allow consumers to gather meaningful, actionable data.

cc @aoberoi 

### Requirements (place an `x` in each `[ ]`)

* [x] I've read and understood the [Contributing Guidelines](https://github.com/slackapi/hubot-slack/blob/master/.github/contributing.md) and have done my best effort to follow them.
* [x] I've read and agree to the [Code of Conduct](https://slackhq.github.io/code-of-conduct).