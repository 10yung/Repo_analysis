Cause: The animation code is broken and commented out
As outlined in the [TMX format documentation](https://doc.mapeditor.org/en/stable/reference/tmx-map-format/#property), a string property that contains multiple lines is stored inside the `property` element rather than in the `value` attribute:

> When a string property contains newlines, the current version of Tiled will write out the value as characters contained inside the property element rather than as the value attribute. It is possible that a future version of the TMX format will switch to always saving property values inside the element rather than as an attribute.

The Tiled Importer does not reflect this, causing it to throw an exception due to the `value` attribute being missing.
Feel free to close this if I am mistaken, but as far as I can tell the TexturePacker json is lacking a few critical features, mainly sprite trimming/rotation flags.   
```
 {
	"filename": "tiles1.26.png",
	"frame": {"x":160,"y":256,"w":18,"h":32},
	"rotated": true,
	"trimmed": true,
	"spriteSourceSize": {"x":7,"y":0,"w":18,"h":32},
	"sourceSize": {"w":32,"h":32}
},
```
When imported, TextureRegion2D doesn't seem to track the offset position(x and y of spriteSourceSize) and whether or not the sprite was rotated to fit, as well as correctly drawing them in offset/re-rotated space when using the spritebatch.draw extensions. 

Anyways, big fan of the implementation, this one tiny thing is holding me back.
I have content is named "test.json" and the texture is "test.tex.png"
`Content.Load<TextureAtlas>("test");`
Throws an overflow exception.  **If I change the name of the texture to "test_tex.png", it loads fine.** 
Seems to not like the period demarcation.  If this is an issue with monogame itself, please feel free to close, and I will submit it there.
can the following methods be implemented in spritebatch?
-FillCircle
-FillEclipse
-FillPolygon
Sorry if this has been posted elsewhere, but I was having issues with the Importers and processors not showing up in the content pipeline. I figured this might be due to some recent changes.

I'm using Visual Studio Community 2017 with .NET 4.8, Monogame 3.7.1, and Monogame.Exteneded 3.7.0

Here are my references in the pipeline:
 * /reference:..\..\packages\MonoGame.Extended.Content.Pipeline.3.7.0\lib\netstandard2.0\MonoGame.Extended.Content.Pipeline.dll
 * /reference:..\..\packages\MonoGame.Extended.Tiled.3.7.0\lib\netstandard2.0\MonoGame.Extended.Tiled.dll

![references](https://user-images.githubusercontent.com/22644674/63899401-bfcd7280-c9ca-11e9-9022-19ce060d1ef4.PNG)



Here's my importer selection:

![importers](https://user-images.githubusercontent.com/22644674/63899395-b93efb00-c9ca-11e9-8372-27d03a7440ac.PNG)
This issue came from [a post on the community forum](http://community.monogame.net/t/zoom-to-world-position/11786)

These are new zoom functions for the MonoGame.Extended `OrthographicCamera` class

```cs
    public void ZoomIn(float deltaZoom, Vector2 zoomCenter)
    {
        float pastZoom = Zoom;
        ClampZoom(Zoom + deltaZoom);
        Position += (zoomCenter - Origin - Position) * ((Zoom - pastZoom) / Zoom);
    }

    public void ZoomOut(float deltaZoom, Vector2 zoomCenter)
    {
        float pastZoom = Zoom;
        ClampZoom(Zoom - deltaZoom);
        Position += (zoomCenter - Origin - Position) * ((Zoom - pastZoom) / Zoom);
    }
```

They can be called like this.

```cs
        _worldPosition = _camera.ScreenToWorld(mouseState.Position.ToVector2());


        // zoom targeting the mouse
        int previousMouseWheelValue = currentMouseWheelValue;
        currentMouseWheelValue = Mouse.GetState().ScrollWheelValue;
        if (currentMouseWheelValue > previousMouseWheelValue)
        {
            _camera.ZoomIn(1 / 12f, _worldPosition);
        }
        if (currentMouseWheelValue < previousMouseWheelValue)
        {
            _camera.ZoomOut(1 / 12f, _worldPosition);
        }
```
If my game has some trees and a couple of boundaries then I don't want these to check for collisions on each other.

In the current CollisionComponent, it is not possible to specify this


Hello,

If padding is set on stackpanel content is indented only from bottom and right
**Branch:** develop

**Steps to reproduce:**
In demo gui set padding on stack panel
```
var stackTest = new DemoViewModel("Stack Panels",
                    new StackPanel
                    {
                        Padding = 20,
                        Items =
                        {
                            new Button { Content = "Press Me", HorizontalAlignment = HorizontalAlignment.Left, VerticalAlignment = VerticalAlignment.Top },
                            new Button { Content = "Press Me", HorizontalAlignment = HorizontalAlignment.Right, VerticalAlignment = VerticalAlignment.Bottom  },
                            new Button { Content = "Press Me", HorizontalAlignment = HorizontalAlignment.Centre, VerticalAlignment = VerticalAlignment.Centre  },
                            new Button { Content = "Press Me", HorizontalAlignment = HorizontalAlignment.Stretch, VerticalAlignment = VerticalAlignment.Stretch },
                        }
                    });
```
![image](https://user-images.githubusercontent.com/31237584/55631295-01f5dd80-57b8-11e9-8e40-fb3b0b05f768.png)

**Possible fix:**
In LayoutControl.Update() change line  from
`Layout(context, new Rectangle(0, 0, ContentRectangle.Width, ContentRectangle.Height));`
To
`Layout(context, new Rectangle(Padding.Left, Padding.Top, ContentRectangle.Width, ContentRectangle.Height));`
Coming from LibGDX, I was trying to find an implementation of something that is shipped with LibGDX that extends the viewport in either direction (with limits) that works really well for a lot of scenarios: 

https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/utils/viewport/ExtendViewport.java

As far as I can see, there does not seem to be a similar implementation for MonoGame.Extended available. Have I overlooked something, or is there perhaps desire for such a viewport implementation?

Seeing as I need it either way, I wouldn't mind sharing what I come up with if it's not available yet!