- Could this repo get deleted?
- Or could the repository description more prominently mention the archival nature of the repo? -
 Maybe add a link to the new repo github.com/typesafehub/scala-logging as well?

It's easy to miss that the bottom of the README says to go to the new repo.

It's acting as a honeypot for well-meaning people like @unoexperto (and myself!).


Guys, could you please push 2.12 version to Maven/Sonatype repo ? Current version is "2.12.0-M5".

Thanks!

Replacing the whole README.md by a redirect to version 2.x is a bit confusing for everyone still using Scala 2.10.

Also, it would be interesting to know whether there are other important differences between v1.1.0 and v2.x apart from the supported Scala version?

Please update `README.md` on `Using ScalaLogging` section to use 1.1.0 version on Sonatype OSS release

see [https://oss.sonatype.org/content/repositories/snapshots/com/typesafe/scalalogging-log4j_2.10/](https://oss.sonatype.org/content/repositories/snapshots/com/typesafe/scalalogging-log4j_2.10/)
and
[https://oss.sonatype.org/content/repositories/releases/com/typesafe/scalalogging-log4j_2.10/](https://oss.sonatype.org/content/repositories/releases/com/typesafe/scalalogging-log4j_2.10/)

http://www.slf4j.org/news.html - various concurrency improvements!

We had [this issue](https://github.com/etorreborre/specs2/issues/213) in specs2 where Scalalogging was used with the `-Yrangepos` compiler option. 

I suspect that the macros in Scalalogging need a bit of position setting to make this disappear.

Unlike scala itself and akka which I am using the scalalogging jar file is missing OSGI export manifest headers which means I am unable to use it in OSGI environments


similar to all log level (error, warn,..).

[Logger#info](https://github.com/typesafehub/scalalogging/blob/2d73d1014784d8191a7378374f2b95de6643a680/scalalogging-slf4j/src/main/scala/com/typesafe/scalalogging/slf4j/Logger.scala#L72):

``` scala
def info(message: String, params: AnyRef*): Unit = macro LoggerMacros.infoMessageParams
```

I think we must change `params: AnyRef*` to `params: Any*`

And in [LoggerMacros#infoMessageParams](https://github.com/typesafehub/scalalogging/blob/2d73d1014784d8191a7378374f2b95de6643a680/scalalogging-slf4j/src/main/scala/com/typesafe/scalalogging/slf4j/LoggerMacros.scala#L98): `params: c.Expr[AnyRef]*` to `c.Expr[Any]*`

In [LoggerMacros#logParams](https://github.com/typesafehub/scalalogging/blob/2d73d1014784d8191a7378374f2b95de6643a680/scalalogging-slf4j/src/main/scala/com/typesafe/scalalogging/slf4j/LoggerMacros.scala#L188):
- Change `params: Seq[c.Expr[AnyRef]]` to `Seq[c.Expr[Any]]`
- Then check if we need to convert params to type Seq[AnyRef] before delegate to underlying using WILDCARD_STAR syntax. See method [akka.event.Logging#format1](https://github.com/akka/akka/blob/master/akka-actor/src/main/scala/akka/event/Logging.scala#L994)

Why there is only AnyRef\* in API?

```
  def debug(message: String, params: AnyRef*): Unit = macro LoggerMacros.debugMessageParams
```

is there any way to log something like this:

```
val i1 = 2
val i2 = 3
logger.debug("i1={} and i2={}", i1, i2)
```

whitout using toString method on i1 and i2?
