We didn't manage to get rid of the last generated file: we generate `api-latest.md` and we rely on the GitHub GUI to display it properly.

I moved it from web/docs to 

https://github.com/dc-js/dc.js/blob/master/docs/api-latest.md

One way to get rid of it would be to serve it via Jeckyll in GitHub Pages. Or we could leave it alone.
With the 4.0 beta release we have 

https://unpkg.com/dc@%5E4.0.0-beta.1/dist/dc.js
https://unpkg.com/dc@%5E4.0.0-beta.1/dist/style/dc.css

These will simplify to

https://unpkg.com/dc@4/dist/dc.js
https://unpkg.com/dc@4/dist/style/dc.css

once 4.0 is officially released.

But as of version 3, these worked:

https://unpkg.com/dc@3
https://unpkg.com/dc@3/dc.css

jsdelivr works pretty much the same, but it is able to successfully resolve

https://cdn.jsdelivr.net/npm/dc@%5E4.0.0-beta.1

... to the minimized version.

It would be nice to return to shorter URLs somehow.
Other charts such as the coordinate grid charts will supply the range to the scales if scales are specified by the user. The range is based on the effective width (width minus margins).

However, the row chart will only set the range of the scale if the scale is defaulted or elasticX is on. (In which case it will replace the scale entirely - also unfriendly because it's possible to use elasticX with non linear scales.)

Probably safe to fix this, although it might cause subtle changes to users who have already worked around this.
Hi, I am trying to render labels rotated, but labels rotate position starts at 0 always. Can we change that?

same problem : https://stackoverflow.com/a/38925654


@gordonwoodhull I found that I was unable to zoom-in to my graph even with mouseZoomable(true) and documentation didn't explicity specify this case.

After some googling I found your answer in [SO](https://stackoverflow.com/questions/56550825/mouse-zooming-not-working-for-dc-js-line-chart/56568963#56568963), and I thought users in future shouldn't be wasting time on this. The commit contains update in documentation and rebuild docs.


This can be removed once the below is the case.

> dc.js should only "elast" the X domain once (on render) if both options are set
72b7e54cb6880e97 lifted `elasticRadius` from `bubbleChart` to `bubbleMixin` but the doc block was not updated, so the documentation didn't move.
Can't seem to find this documented in the obvious places.
I am looking forward to diving into scatterPlot.js to make possible pan and zoom on both axes. Now it's working only for one axis, x. I would also want to stop filtering when zoom is applied, but not necessarily (it could involve a lot of work in coordinate-grid-mixin.js I guess). Any hints or some indications?
We're trying not to change the interface for DCv4, but ES6 and D3v6 will require some changes to user code.

If there are enough changes that it's worth the effort, we could consider providing a [codemod](https://github.com/facebook/codemod). For example, [d3-upgrade-codemod](https://npm.taobao.org/package/d3-upgrade-codemod) is a codemod that upgrades d3v3 code to d3v4.

It looks like the javascript part of the picture is a utility/toolkit called [jscodeshift](https://github.com/facebook/jscodeshift)
This is related to $646, which also needs better control over the zero point of the chart.

It came up in this SO question: [dcjs dynamic zooming to fit range of values](https://stackoverflow.com/questions/58012328/dcjs-dynamic-zooming-to-fit-range-of-values/58014434?noredirect=1#comment102462073_58014434) (thanks Isaac!)

The row chart expects always to start at zero and has code to set either the start or the end of the domain to zero:

https://github.com/dc-js/dc.js/blob/7c5550076f7ccd7acd35ab0f73dc6c7a76ca3d2a/src/row-chart.js#L53-L66

Then it draws the rects starting from where the scale says zero is:

https://github.com/dc-js/dc.js/blob/7c5550076f7ccd7acd35ab0f73dc6c7a76ca3d2a/src/row-chart.js#L167-L170

If the range start is not zero, this will be off the chart.

[Example fiddle](https://jsfiddle.net/gordonwoodhull/1ymrbn8q/11/)

A temporary fix, but it has flicker because, as usual, it's fighting with the chart's transitions and `pretransition` won't work here. <sub>Well maybe it could with more work.</sub>

```js
chart.on('renderlet', function(chart) {
    var transform = chart.select('g.row rect').attr('transform');
    var tx = +transform.split('(')[1].split(',')[0];
    chart.selectAll('g.row rect')
        .attr('transform', null)
        .attr('width', function(d) {
            return +d3.select(this).attr('width') + tx;
        })
    chart.selectAll('g.row text.row')
        .attr('transform', null);    
})
```