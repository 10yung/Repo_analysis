[bincode::Error](https://docs.rs/bincode/1.2.1/bincode/type.Error.html) is a Box. Any API in ipc-channel that returns a bincode::Error as part of a result (ie. lots of APIs in ipc.rs) can therefore allocate when there's a failure result. For APIs like try_recv() where they can be called frequently and often, this can lead to performance surprises, particularly in code like `if let Ok(msg) = receiver.try_recv()` where the error case is completely discarded.

For the inprocess backend it's actually even worse - https://github.com/servo/ipc-channel/blob/84a1483420ba60110c2388aaa3062511339976d1/src/platform/inprocess/mod.rs#L384-L404 means that we first create a std::Error (which is a Box), then box that inside a bincode error. This shows up really high in some profiles that rely on try_recv being called every frame.

https://github.com/servo/ipc-channel/pull/179
This is one of our longest-existing and most distributed intermittent failures in Servo's automated tests.
Currently `add_route` is defined as:
```rust
pub fn add_route(&self, receiver: OpaqueIpcReceiver, callback: RouterHandler);
pub type RouterHandler = Box<FnMut(OpaqueIpcMessage) + Send>;
```
It is up to the user to remember and properly turn the OpaqueIpcMessage into the correct type. This leads to wrong types being used as in https://github.com/servo/servo/issues/23818

Instead I recommend adding a typed version as:
```rust
pub fn add_route<T>(&self, receiver: IpcReceiver<T>, mut callback: RouterHandler<T>)
```
The user no longer has to learn about `OpaqueIpcReceiver` and it is compile-time checked, so the type can never be used wrong! Internally, the implementation converts the `OpaqueIpcMessage` into `T` so it can never be misused:
```rust
|msg: OpaqueIpcMessage| callback(msg.to::<T>().unwrap());
```

Eventually the existing `add_route` could be deprecated in favor of the typed one.
I couldn't find a way to mutate the contents of shared memory using the existing API. For example `DerefMut` is not implemented. 

Is this intended, or am I missing something on how to actually do the mutation? 

I would like to send some shared memory across process, then mutate it and have the other process see the mutation. 

I've tried to do this with `unsafe` code, and I'm actually not sure if that is working or not(I can see the mutation in the process doing it, however I'm still testing if the other process sees it as well). 

See https://github.com/servo/servo/pull/23909/files#diff-2967b47a1530b8945948650780afabcaR89
When ipc channels are sent over ipc oin unix, their fds are sent using `sendmsg`, and the matching `recvmsg` creates a new fd. This means that even programs which use a fixed number of channels can end up using an unbounded number of fds. For example:
```rust
fn main() {
   let (send1, recv1) = ipc::channel::<IpcSender<bool>>().unwrap();
   let (send2, recv2) = ipc::channel::<bool>().unwrap();
   thread::spawn(move || {
       let mut senders = vec![];
       while let Ok(send2) = recv1.recv() {
           let _ = send2.send(true);
           // The fd is private, but this transmute lets us get at it
           // let fd: &std::sync::Arc<u32> = unsafe { std::mem::transmute(&send2) };
	   // println!("fd = {}", *fd);
	   // Stop the ipc channel from being dropped
	   senders.push(send2);
       }
   });
   for _ in 0..10000 {
       let _ = send1.send(send2.clone());
       let _ = recv2.recv();
   }
}
```
runs out of fds even though it only uses two ipc channels.
The following minimal example reproduces the error (I'm using the latest crates.io version of `ipc-channel` but I bet it works with latest commit on master as well):
```rust
use ipc_channel::ipc;
use ipc_channel::router::ROUTER;

fn main() -> Result<(), std::io::Error> {
    let (sender, receiver) = ipc::channel::<(i32, i32)>()?;
    // Use this second channel to force main thread to block until child thread
    // is done.
    let (sender2, receiver2) = ipc::channel()?;

    ROUTER.add_route(receiver.to_opaque(), Box::new(move |msg|{
        match msg.to::<i32>() {
            Ok(val) => println!("Val: {:?}", val),
            Err(e) =>  println!("Error: {:?}", e),
        };
        sender2.send(());
    }));

    sender.send((1234, 5678)).unwrap();
    receiver2.recv().unwrap();
    Ok(())
}
```
Which happily outputs: `Val: 1234`.

Basically I'm able to convert the `(i32, i32)` to a `i32` through `to::<i32>()`. I only tried it for numerical types, but it seems we have observed this behavior for less trivial types: https://github.com/servo/servo/issues/23818#issuecomment-514877686

I'm planning to (ab)use this behavior... but it seems a little undefined-behaviory to me?
@asajeffrey 

With the latest ipc-channel commit, the following code panics when ran:
```rust
// main.rs
use serde::{Serialize, Deserialize};
use ipc_channel::ipc;

#[derive(Serialize, Deserialize, Debug)]
struct IpcWrapper<T> {
    s: ipc::IpcSender<T>
}

fn main() {
    let (sender, receiver) = ipc::channel::<i32>().unwrap();
    let wrapper = IpcWrapper { s: sender };

    let ser = serde_json::to_string(&wrapper).unwrap();
    let deser: IpcWrapper<i32> = serde_json::from_str(&ser).unwrap();
}
```
Error: `thread 'main' panicked at 'index out of bounds: the len is 0 but the index is 0'`

`Cargo.toml`:
```
[dependencies]
ipc-channel = {git = "https://github.com/servo/ipc-channel"}
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
```

All you need is to "wrap" `IpcSender<T>` in your own type and derive Serialize/Deserialize. The error happens during deserialization.

From the backtrace. The error is happening here:
```rust
fn deserialize_os_ipc_sender<'de, D>(deserializer: D)
                                -> Result<OsIpcSender, D::Error> where D: Deserializer<'de> {
    let index: usize = Deserialize::deserialize(deserializer)?;
    OS_IPC_CHANNELS_FOR_DESERIALIZATION.with(|os_ipc_channels_for_deserialization| {
        // FIXME(pcwalton): This could panic if the data was corrupt and the index was out of
        // bounds. We should return an `Err` result instead.
        Ok(os_ipc_channels_for_deserialization.borrow_mut()[index].to_sender())
    })
}
```

I'm not sure why though.
Preliminary IPC-Channel modifications based on rust 2018.  It is also a rebase of #166.
This avoids having to compile tempfile for Windows arm64, where it has an unsupported dependency.