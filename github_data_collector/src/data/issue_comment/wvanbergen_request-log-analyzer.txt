hi, i see in the time analysis, which I believe is the 5th report down, the Request column is too small to be useful - I can't tell which method is taking all the time b/c it's truncated.  Is there a setting to allow expanding a column width of the overall report width?
Looks like this article is outdated as many of the table and column names have changed since it was written. 
Not sure if this is already logged but could you provide some insights into this error:

```
Request-log-analyzer, by Willem van Bergen and Bart ten Brinke - version 1.13.4
Website: http://railsdoctors.com

^Cproduction.log:           10% [======================                                                                                                                                                                                                         ] Time: 00:01:04
Caught interrupt! Stopping parsing...
/usr/local/rvm/gems/ruby-2.2.3/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/controller.rb:277:in `handle_progress': undefined method `set' for nil:NilClass (NoMethodError)
        from /usr/local/rvm/gems/ruby-2.2.3/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/controller.rb:256:in `block in initialize'
        from /usr/local/rvm/gems/ruby-2.2.3/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:181:in `call'
        from /usr/local/rvm/gems/ruby-2.2.3/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:181:in `parse_io_19'
        from /usr/local/rvm/gems/ruby-2.2.3/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:130:in `block in parse_file'
        from /usr/local/rvm/gems/ruby-2.2.3/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:130:in `open'
        from /usr/local/rvm/gems/ruby-2.2.3/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:130:in `parse_file'
        from /usr/local/rvm/gems/ruby-2.2.3/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:76:in `each_request'
        from /usr/local/rvm/gems/ruby-2.2.3/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/controller.rb:334:in `run!'
        from /usr/local/rvm/gems/ruby-2.2.3/gems/request-log-analyzer-1.13.4/bin/request-log-analyzer:133:in `<top (required)>'
        from /usr/local/rvm/gems/ruby-2.2.3/bin/request-log-analyzer:23:in `load'
        from /usr/local/rvm/gems/ruby-2.2.3/bin/request-log-analyzer:23:in `<main>'
        from /usr/local/rvm/gems/ruby-2.2.3/bin/ruby_executable_hooks:15:in `eval'
        from /usr/local/rvm/gems/ruby-2.2.3/bin/ruby_executable_hooks:15:in `<main>'

```

Currently, log files that are longer than 2gb throw an error when the length is attempted to be saved into the source table. This forces the data to be stored as a limit 8 integer instead of a limit 4 integer.

I couldn't get the specs working before I made any changes, but I am seeing the same failures after making the changes. These were ran using ruby 2.2.2 and I believe AR 5.0.0

First off, this gem is awesome and a great tool! I am running into an issue when parsing a log file that is 3.5gb though, and when DatabaseInserter.new.source_change([..]) gets called, it hits a database column limitation.

```
/gems/activerecord-4.2.4/lib/active_record/type/integer.rb:45:in `ensure_in_range': 3461277784 is out of range for ActiveRecord::Type::Integer with limit 4 (RangeError)
```

Maybe you should explicitly set the limit to 8? It seems as though its trying to store it as a 4byte integer, but should really be stored as an 8 byte integer. 

in `/request-log-analyzer/lib/request_log_analyzer/database/source.rb`

``` ruby
class RequestLogAnalyzer::Database::Source < RequestLogAnalyzer::Database::Base
  def self.create_table!
    unless database.connection.table_exists?(:sources)
      database.connection.create_table(:sources) do |t|
        t.column :filename, :string
        t.column :mtime,    :datetime
        t.column :filesize, :integer, limit: 8
      end
    end
  end
end
```

Hi and thanks for the awesome app!

I'm trying to use my own haproxy log format. The log entry has some captured request headers which are enclosed with braces:

```
... {||573|Delivery%20Map/11 CFNetwork/758.5.3 Darwin/15.6.0} ...
```

To catch that part I use the following regexp (check captured_request_headers line):

```
    def self.compose_regexp(millisecs, backends, counters, connections, queues)
      %r{
        (#{ip_address}):\d+\s # client_ip ':' client_port
        \[(#{timestamp('%d/%b/%Y:%H:%M:%S')})#{millisecs}\]\s # '[' accept_date ']'
        (\S+)\s # frontend_name
        #{backends}
        #{counters}
        (\w|-)(\w|-)(\w|-)(\w|-)\s # termination_state
        #{connections}
        #{queues}
        "([^"]*)"\s # '"' http_request '"'
        (\d+)\s # status_code
        (\S+)\s # captured_request_cookie
        ({[\w\W]*})\s # captured_request_headers
        (\S+)\s # captured_response_cookie
        (\S*)\s? # captured_response_headers
        ireq_size\=(\d+)\s # bytes_sent
        resp_size\=(\d+)\s # bytes_read
      }x
    end
```

Online regexp checker successfully works for that part: https://regex101.com/r/fM4mW5/1

But your app throws an exception:

```
$ /opt/rh/ruby193/root/usr/local/bin/request-log-analyzer test -f myhaproxy --reject query "/hastats;csv/" --after 2016-09-02 --before 2016-09-03 --debug
Request-log-analyzer, by Willem van Bergen and Bart ten Brinke - version 1.13.4
Website: http://railsdoctors.com

/opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/aggregator/echo.rb:12:in `+': can't convert Enumerator into String (TypeError)
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/aggregator/echo.rb:12:in `aggregate'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/controller.rb:316:in `block in aggregate_request'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/controller.rb:316:in `each'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/controller.rb:316:in `aggregate_request'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/controller.rb:336:in `block in run!'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:332:in `handle_request'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:304:in `update_current_request'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:225:in `parse_line'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:182:in `parse_io_19'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:130:in `block in parse_file'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:130:in `open'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:130:in `parse_file'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/source/log_parser.rb:76:in `each_request'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/lib/request_log_analyzer/controller.rb:334:in `run!'
        from /opt/rh/ruby193/root/usr/local/share/gems/gems/request-log-analyzer-1.13.4/bin/request-log-analyzer:133:in `<top (required)>'
        from /opt/rh/ruby193/root/usr/local/bin/request-log-analyzer:23:in `load'
        from /opt/rh/ruby193/root/usr/local/bin/request-log-analyzer:23:in `<main>'
```

If I remove that regexp and the appropriate log part, everything works like a charm. There's also no exception if I remove \* (the star) from "({[\w\W]*})".

Can you please help me with that?

Hello, It would be useful to have support for Amazon's Cloudfront Logs.  I have included AWStats configs for each, in hopes that this utility will adopt the log format.
S3:
`LogFormat="%other %extra1 %time1 %host %logname %other %method %url %otherquot %code %extra2 %bytesd %other %extra3 %extra4 %refererquot %uaquot %other"`
Cloudfront:
`LogFormat="%time2 %cluster %bytesd %host %method %virtualname %url %code %referer %ua %query"`

While trying to support the `Solr:` metric inside the `Completed` lines, I had to extend the `Rails3` format.
So I have created the class `Rails3Solr` and I have used the new method `extend_line_definition` to
override the line definition for `:completed` of `Rails3` format.

This also allows the munin plugin to pick them up.

Is there a way to aggregate the same controller and action that gets called with different content types such as:

EdibleSuggestionsController#create.*/*
EdibleSuggestionsController#create.JSON

We would like all metrics for EdibleSuggestionsController#create to be rolled up, regardless of the method in which it is being called.
