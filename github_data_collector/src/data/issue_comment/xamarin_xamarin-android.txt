Context: https://github.com/xamarin/monodroid/pull/1067
### Steps to Reproduce

1. git clone https://github.com/xamarin/xamarin-android.git
2. cd xamarin-android
4. make jenkins


### Expected Behavior

`make` should run through without errors.

### Actual Behavior

After a while the following error occurs:

```
  /usr/bin/x86_64-w64-mingw32-ld: cannot find -lmincore
collect2 : error : ld returned 1 exit status [/home/janus/github/xamarin-android/src/monodroid/monodroid.csproj]
  ninja: build stopped: subcommand failed.
/home/janus/github/xamarin-android/src/monodroid/monodroid.targets(93,5): error MSB3073: The command "/home/janus/android-toolchain/sdk/cmake/3.10.2.4988404/bin/ninja -v" exited with code 1. [/home/janus/github/xamarin-android/src/monodroid/monodroid.csproj]
Done Building Project "/home/janus/github/xamarin-android/src/monodroid/monodroid.csproj" (default targets) -- FAILED.
```

### Version Information

* xamarin-android version: master as of 2020-01-17 (commit fdc9f621cd2ff7645729a447df5595dc1497d4b4)
* OS: Ubuntu Linux 18.04 (bionic)
* Mono version: 6.4.0.198
* msbuild version: Microsoft (R) Build Engine version 16.3.0-ci for Mono


### Log File

If necessary I can attach the full build log or provide further information. 
Updates our desktop unit test projects to short-form style projects
targeting `net472`. Any existing `AssemblyInfo.cs` files have also been
removed from these projects. The unused `Test.cs` file which was part of
CodeBehind unit tests has also been removed.
Breaks up the `Integrated Regression` tests to run across 3 nodes, reducing the time taken to run from `~150 minutes` to `3 x ~50 minutes`.

Moves the `Integrated Regression` tests to a separate Stage to improve readability.  This also allows us to move the `condition` to the Stage level instead of each Job.

![image](https://user-images.githubusercontent.com/179295/72639388-1b24e080-392b-11ea-9d13-47a80294cb4a.png)

Recently we missed apk size increase, because the test was not run. Context https://github.com/xamarin/xamarin-android/pull/4133

Let check what was added by commit https://github.com/xamarin/xamarin-android/commit/130905e1612f1c3f41b6b233056cae2753270630 and whether it can be avoided.
Updates `Xamarin.Android.Build.Tests.csproj` to a short-form style
project targeting `net472`. The `Xamarin.Android.Build.Tests.Shared`
project files have been removed, as they only appeared to be referenced
by `Xamarin.Android.Build.Tests.csproj`. The `Compile` items in that
project also no longer need to be explicitly defined, so there doesn't
seem to be a reason to keep the project around anymore.
JNIEnv code sometimes tries to map a primitive .NET type (e.g. `System.Int32`) to a Java type. The mapping call will fail, since we have no such mappings in place (nor should we) which costs between 30k-70k ns per call. Here are a few stack traces which point to code which requests the mappings:

```
01-17 15:31:00.744 20572 20572 W monodroid: Failed to map managed type to Java type: System.Int32, mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e (Module ID: 645d90a7-1dd4-48ac-a29d-40b03f4ec8af)
01-17 15:31:00.746 20572 20572 W monodroid: Called from:   at Android.Runtime.JNIEnv.TypemapManagedToJava (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.746 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.GetJniName (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.746 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.FindClass (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.746 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.AssertCompatibleArrayTypes (System.IntPtr sourceArray, System.Type destType) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.746 20572 20572 W monodroid:   at Android.Runtime.JNIEnv._GetArray (System.IntPtr array_ptr, System.Type element_type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.746 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.GetArray (System.IntPtr array_ptr, Android.Runtime.JniHandleOwnership transfer, System.Type element_type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.746 20572 20572 W monodroid:   at Android.Graphics.Drawables.Drawable.n_OnStateChange_arrayI (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_state) [0x00000] in <b8210a63241240289091f49577c08e74>:0
```

```
01-17 15:31:00.835 20572 20572 W monodroid: Failed to map managed type to Java type: System.Int32, mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e (Module ID: 645d90a7-1dd4-48ac-a29d-40b03f4ec8af)
01-17 15:31:00.835 20572 20572 W monodroid: Called from:   at Android.Runtime.JNIEnv.TypemapManagedToJava (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.835 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.GetJniName (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.835 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.FindClass (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.835 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.AssertCompatibleArrayTypes (System.IntPtr sourceArray, System.Type destType) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.835 20572 20572 W monodroid:   at Android.Runtime.JNIEnv._GetArray (System.IntPtr array_ptr, System.Type element_type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.835 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.GetArray (System.IntPtr array_ptr, Android.Runtime.JniHandleOwnership transfer, System.Type element_type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.835 20572 20572 W monodroid:   at Android.Graphics.Drawables.Drawable.GetState () [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.835 20572 20572 W monodroid:   at Xamarin.Forms.Platform.Android.BorderDrawable.Draw (Android.Graphics.Canvas canvas)
```

```
01-17 15:31:00.685 20572 20572 W monodroid: Failed to map managed type to Java type: System.Int32, mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e (Module ID: 645d90a7-1dd4-48ac-a29d-40b03f4ec8af)
01-17 15:31:00.688 20572 20572 W monodroid: Called from:   at Android.Runtime.JNIEnv.TypemapManagedToJava (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.688 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.GetJniName (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.688 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.FindClass (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.688 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.AssertCompatibleArrayTypes (System.IntPtr sourceArray, System.Type destType) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.688 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.CopyArray (System.IntPtr src, System.Array dest, System.Type elementType) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.688 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.CopyArray (System.IntPtr src, System.Array dest, System.Type elementType) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.688 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.CopyArray[T] (System.IntPtr src, T[] dest) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.688 20572 20572 W monodroid:   at Android.Content.Res.ColorStateList..ctor (System.Int32[][] states, System.Int32[] col
```

```
01-17 15:31:00.662 20572 20572 W monodroid: Failed to map managed type to Java type: System.Int32, mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e (Module ID: 645d90a7-1dd4-48ac-a29d-40b03f4ec8af)
01-17 15:31:00.676 20572 20572 W monodroid: Called from:   at Android.Runtime.JNIEnv.TypemapManagedToJava (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.676 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.GetJniName (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.676 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.FindClass (System.Type type) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.676 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.NewArray (System.Array value, System.Type elementType) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.676 20572 20572 W monodroid:   at Android.Runtime.JNIEnv.NewArray[T] (T[] array) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.676 20572 20572 W monodroid:   at Android.Content.Res.ColorStateList..ctor (System.Int32[][] states, System.Int32[] colors) [0x00000] in <b8210a63241240289091f49577c08e74>:0 
01-17 15:31:00.676 20572 20572 W monodroid:   at Xamarin.Forms.Platform.Android.TextColorSwitcher.UpdateTextColor (Android.Widget.TextView control, Xamarin.Forms.Color color, System.Action`1[T] setColor) [0x00000] in <acc53160996d4d65ad59c1907311a9e6>:0 
01-17 15:31:00.676 20572 20572 W monodroid:   at Xamarin.Forms.Platform.Android.FastRenderers.ButtonRenderer.UpdateTextColor
```

This creates a new mode for `JavaToolTask`, where if `UseDaemon=True`:

* Instead of just running a new `java.exe`, a new `JavaDaemonClient`
  class will start a java process that runs `java-daemon.jar`.
* The daemon reads stdin to run a jar file's `Main` method, and
  replies to stdout with the result of running that jar file.
* If `JavaDaemonClient` is disposed (and when the MSBuild node shuts
  down), the java process will exit.

Some of the *gotchas* here were:

* We cannot change the working directory of `java` after the process
  has started:

https://stackoverflow.com/a/840229

To resolve this, we have to create an instance of the daemon for each
working directory. This should only happen if a solution has multiple
Xamarin.Android head projects.

* The `-classpath` of the daemon must include all possible jar files
  that might be used by the build.

I used the `@(_JavaDaemonClassPath)` for this.

* There is not currently a way to set java properties with the daemon,
  such as `-Dfile.encoding=UTF8`.

There were two usages of this in `<CreateMultiDexMainDexClassList/>
and `<CompileToDalvik/>`. I will need to add something to pass these
through to the daemon if they are required.

* We need low memory usage for the daemon after a request has
  completed, when it is idle.

Originally `java.exe` was using ~531MB of RAM on my PC that has a
total of 64GB of RAM. For comparison `MSBuild.exe` is using ~62MB.

I added a call to `System.gc()` and used the `-XX:+UseG1GC` switch to
get `java.exe` idling at ~90MB.

https://www.javacodegeeks.com/2017/11/minimize-java-memory-usage-right-garbage-collector.html

## Results ##

I built the Xamarin.Forms project in this repo, using
`%MSBUILDNOINPROCNODE%` = 1.

The command was:

    git clean -dxf tests
    xabuild tests\Xamarin.Forms-Performance-Integration\Droid\Xamarin.Forms.Performance.Integration.Droid.csproj /r /t:SignAndroidPackage /bl /clp:performancesummary /p:AndroidUseJavaDaemon=True /p:AndroidManifestMerger=manifestmerger.jar

Not using daemon:

     303 ms  ManifestMerger                             1 calls
     806 ms  AndroidApkSigner                           1 calls
    3804 ms  D8                                         1 calls
    Time Elapsed 00:00:15.24

Using daemon, after daemon is running:

     151 ms  ManifestMerger                             1 calls
     437 ms  AndroidApkSigner                           1 calls
    3506 ms  D8                                         1 calls
    Time Elapsed 00:00:14.55

This seems to save ~1 second of build time for these three tasks that
run java processes.

In past iterations, before I changed java GC settings. I was seeing ~7
seconds saving for this app. I need to do more investigation there, as
maybe we can do something to only free up the memory after the entire
`Build`.
Describe the simplyfied usage with the new targets.
Since the prepare external dependencies step is only for proprietary
dependencies, update the wording of the build instructions to let
community contributors know that they should skip it.

`make prepare-external-dependencies` uses the
`PrepareExternalGitDependencies` step in `xaprepare`, which currently
only prepares the monodroid external dependency.

The Mono dependency listed in `.external` is prepared via a separate
`DownloadMonoArchive` step in `xaprepare`.  That step is part of `make
prepare` and does not require running `make
prepare-external-dependencies`.