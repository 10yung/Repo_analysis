Hi, and thanks for this awesome project!

How would I go about creating a WASI-enabled standalone native executable from a WASM module such as the one below?

It doesn't need to be sandboxed. Should I package it with the `lucet-wasi` runtime, or maybe with [`wasm-micro-runtime`](https://github.com/bytecodealliance/wasm-micro-runtime)? How would I do that?

I'm thinking ideally I would be able to generate a ".o" object file containing the Lucet WASI runtime implementations and link it with my own object file that was generated by `lucetc`. How could I generate such an object file containing Lucet's WASI runtime implementations?

Thanks in advance!

```wasm
(module
    (import "wasi_unstable" "fd_write" (func $fd_write (param i32 i32 i32 i32) (result i32)))
    (memory 1)
    (export "memory" (memory 0))
    (data (i32.const 8) "hello world\n")
    (func $main (export "_start")
        (i32.store (i32.const 0) (i32.const 8))
        (i32.store (i32.const 4) (i32.const 12))
        (call $fd_write
            (i32.const 1)  ;; file_descriptor - 1 for stdout
            (i32.const 0)  ;; *iovs - The pointer to the iov array, which is stored at memory location 0
            (i32.const 1)  ;; iovs_len - We're printing 1 string stored in an iov - so one.
            (i32.const 20) ;; nwritten - A place in memory to store the number of bytes written
        )
        drop ;; Discard the number of bytes written from the top of the stack
    )
)
```
Hi, i only found how to use lucetc-wasi in wiki, but i can't find its working principle, is there any article describing it?  Thank you very much.

I'm curios to understand the reason why `so` modules produced by `lucetc` are so large. For instance let's compile the code below with Lucet's toolchain and gcc. The binary produced by gcc is pretty compact. It's just 15KB when compiled with `-Oz` option. The `so` module from Lucet is almost 400KB. I've tried different `clang` and `lucetc` options, also applied `strip`. It doesn't matter. `so` remains 350KB+.     

Is there some technological limitation under the hood? Can the size of the binaries be reduced?

```cpp
#include <iostream>
#include <list>
#include <vector>

using namespace std;

int main() {

    list<string> ls;
    ls.push_back("one");
    ls.push_back("two");
    ls.push_back("three");

    for (auto v : ls) {
        cout << v << "\n";
    }

    vector<string> vs;
    vs.push_back("one");
    vs.push_back("two");
    vs.push_back("three");

    for (auto v : vs) {
        cout << v << "\n";
    }

    return 0;
}
```
This change (or something like it) is a prerequisite to being able to
pass `--target [TARGET]` to lucetc for cross-compilation purposes.
This doesn't seem to be supported based on `--help` and a quick browse through the code.  It's entirely possible I'm missing something, though!

Firefox, at least, would really like this for Linux -> OS X cross builds, as well as several other cases.
Adds a `--report-times` which makes for nice breakdowns via `lucetc --report-times slow_to_compile.wat` like:
```
======== ========  ==================================
   Total     Self  Pass
-------- --------  ----------------------------------
   0.000    0.000  Translate WASM module
   0.001    0.001  Translate WASM function
  12.435    3.888  Verify Cranelift IR
   0.005    0.005  Verify CSSA
   0.008    0.008  Verify live ranges
   0.005    0.005  Verify value locations
   0.086    0.086  Verify CPU flags
  15.781    0.006  Compilation passes
   0.049    0.049  Control flow graph
  10.828   10.828  Dominator tree
   0.260    0.260  Loop analysis
   0.003    0.003  Post-legalization rewriting
   0.000    0.000  Pre-legalization rewriting
   0.001    0.001  Dead code elimination
   0.009    0.009  Legalization
   0.002    0.002  Global value numbering
   0.402    0.000  Loop invariant code motion
   0.000    0.000  Remove unreachable blocks
   5.229    0.018  Register allocation
   0.002    0.002  RA liveness analysis
   0.001    0.001  RA coalescing CSSA
   0.006    0.006  RA spilling
   0.005    0.005  RA reloading
   0.007    0.007  RA coloring
   0.001    0.001  Prologue/epilogue insertion
   0.005    0.005  Instruction encoding shrinking
   0.990    0.588  Branch relaxation
   0.000    0.000  Binary machine code emission
   0.000    0.000  Layout full renumbering
   0.000    0.000  Emit output
```

or in json (` ../target/debug/lucetc tests/wasm/arith.wat --report-times --error-style json`):
```
{"errors":null,"timing":{"pass_times":["   0.000    0.000  Translate WASM module","   0.000    0.000  Translate WASM function","   0.004    0.003  Verify Cranelift IR","   0.000    0.000  Verify CSSA","   0.000    0.000  Verify live ranges","   0.000    0.000  Verify value locations","   0.000    0.000  Verify CPU flags","   0.006    0.000  Compilation passes","   0.000    0.000  Control flow graph","   0.000    0.000  Dominator tree","   0.000    0.000  Loop analysis","   0.000    0.000  Post-legalization rewriting","   0.000    0.000  Pre-legalization rewriting","   0.000    0.000  Dead code elimination","   0.000    0.000  Legalization","   0.000    0.000  Global value numbering","   0.000    0.000  Loop invariant code motion","   0.000    0.000  Remove unreachable blocks","   0.002    0.000  Register allocation","   0.000
 0.000  RA liveness analysis","   0.000    0.000  RA coalescing CSSA","   0.000    0.000  RA spilling","   0.000    0.000  RA reloading","   0.000    0.000  RA coloring","   0.000    0.000  Prologue/epilogue insertion","   0.000    0.000  Instruction encoding shrinking","   0.000    0.000  Branch relaxation","   0.000    0.000  Binary machine code emission","   0.000    0.000  Emit output"]}}
```
This is another "tiny lint fix I found while looking around at things" PR.

Rather than using a `CtxMap::new()` constructor, we can implement the `Default` trait, and use that instead.
this is a matched draft with https://github.com/bytecodealliance/wasmtime/pull/701 that I expect to clip down to just
```
ctx = ctx.preopened_virt(Box::new(fs), "/sandbox");
```
or so whenever this is made a real PR. So far as lucet-wasi is concerned, I just want to exercise file APIs and ensure that things are still usable as I poke at wasi-common.

This WIP PR fixes #357 .
https://github.com/bytecodealliance/lucet/blob/f312d0859817fbcc08b5913b300c0c49e0ecf0f5/config.inc#L4