After much irritation banging my head up against how to easily resize the existing box image from the small 80G limit, this uses the vagrant-disksize plugin to resize it to 150G and runs a diskpart to extend volume 1 when the machine is created.

Hi Stefan,

first of all I wanted to say that I'm impressed by this project and am using it on a daily basis for cross-platform development. It's really helping a lot! Thanks for the great work so far.

One of the things that I'm missing currently is the support for easily defining `insecure-registries` within the daemon.json on the windows hosts. 

I was able to quickly `hack` in a solution for me that works but was wondering if that could be something that might be of interest to more people.

what I did so far was simply extending the `create-machine.ps1` Powershell script by a single line

```Powershell
  $config = $config | Add-Member(@{ `
    hosts = @("tcp://0.0.0.0:2376", "npipe://"); `
    tlsverify = $true; `
    tlscacert = "$serverCertsPath\ca.pem"; `
    tlscert = "$serverCertsPath\server-cert.pem"; `
    tlskey = "$serverCertsPath\server-key.pem"; `
    "insecure-registries" = @("my.insecure.registry:4567"); `
    experimental = $experimental `
    }) -Force -PassThru
```

It probably would be great to be able to define this within the Vagrant environment.
I'm not a Powershell nor a Vagrant guru, so sorry for not providing a potential solution already.

Best,
Matthias


On a Windows host with VirtualBox the provision script fails

![bildschirmfoto 2017-01-15 um 10 05 37](https://cloud.githubusercontent.com/assets/207759/21961476/b58809c2-db0a-11e6-9315-f13b86e06da4.png)

It seems that Vagrant has to create a simpler name for the share.

A manually created share with only a name without drive name and without backslashes works fine.

Running the Vagrant box from a Windows 10 host with Hyper-V shows the following error:

<img width="1027" alt="bildschirmfoto 2017-01-14 um 22 30 29" src="https://cloud.githubusercontent.com/assets/207759/21958247/5419cc6c-daaa-11e6-8d35-347b0c8d2a24.png">

The Vagrant box mounts the current user directory into the Windows 2016 VM through SMB.
It seems that this kind of mount can't be mapped into a Windows container as the docker engine complains with Access denied.
