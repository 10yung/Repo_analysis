尝试使用jemalloc，发现一使用就会导致deadlok，初步查了下好像是libco内使用dlsym跟jemalloc死锁了，一般遇到这种场景，怎么解决好些。
很感谢微信开源了libco，我是流媒体直播服务器[SRS](https://github.com/ossrs/srs)的维护者，SRS是MIT的LICENSE，SRS用的是之前的coroutine库[ST/StateThreads](https://github.com/ossrs/state-threads)。

ST是MPL或GPLv2的LICENSE，据说好像可以用so的方式使用但由于MPL太古老也少见，所以不能确定这个LICENSE是否可用，所以准备换coroutine库，就在考虑libco了。

> The State Threads library is a derivative of the Netscape Portable Runtime library (NSPR) and therefore is distributed under the Mozilla Public License (MPL) version 1.1 or the GNU General Public License (GPL) version 2 or later.

我看libco(2013年)是Apache的LICENSE，但是另外一个2011年的项目也有[bsnes/libco](https://github.com/byuu/bsnes/blob/master/libco/libco.h)协议是ISC。

[![image](https://user-images.githubusercontent.com/2777660/72120318-8baf8880-3392-11ea-889e-f94cdded43f0.png)](https://www.jianshu.com/p/86251523e898)

我的问题是：
1. 是否 wechat/libco，是从 bsnes/libco fork的呢？
1. 按上图所说， bsnes/libco ISC协议，是否能转成 wechat/libco Apache协议没有问题？

希望能解答我的疑惑。


协程利用了cpu的的多个核心执行任务了吗？
当前 hook connect 在 (ip,port)不存在时会返回0

修正为返回-1，errno=Connection refused

can use guard_allocate() replace co_alloc_stackmem() internal malloc()  
Hi,

We have found and fixed 80 dependency issues in the Makefile.
Those issues can cause incorrect results when the project is incrementally built.
For example, any changes in a header file will not cause the object file to be rebuilt, which is incorrect.
I've tested it on my computer, the fixed version worked as expected.
I fix the header dependencies by using the Auto-Dependency Generation technique mentioned here: http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/

Abd for the lib dependencies, I manually add a rule in the Makefile. 

Looking forward to your confirmation.


Thanks
Vemake
gethostbyname之类的在hook了__poll函数以后可以正常工作，不过目前三方库开始使用getaddrinfo函数替代，发现getaddrinfo会堵塞在recvmsg，没法hook住，希望可以解决
在函数coctx_make函数中，ctx->regs[KRSP] = sp - 8;  该语句中sp 指向了堆内存的末尾，这块堆内存当作新协程的栈来使用，即实际指向了栈顶，这在coctx_swap.S x86-64模式中 popq  %rsp, 完成栈顶的构建，因为栈从高地址向低地址增长，因此栈增长方向上内存已经由堆内存建立，因此这里就协程切换而言并不需要栈顶再减去8字节。随后将新协程的函数地址压入栈中，即 随后的pushq %rax  (%rax 在 popq %rax 已经存放了函数地址），最后由ret 将栈中的返回地址弹出到rip中。这里浪费8字节并不影响程序的正确，但突然来个魔鬼数字，影响了阅读。我特意做了实验，将减8去掉（即变为ctx->regs[KRSP] = sp;），协程切换正常，不知作者将栈顶留出8字节，有何其他的用途，如能告之不胜感谢