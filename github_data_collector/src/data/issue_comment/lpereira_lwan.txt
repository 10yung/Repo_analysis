hi i am looking at your project.. now i want to make some request processing and i am currently doing a malloc for creating an auxiliary structure. i notice the presence of a coro_malloc.. can i follow my approach or is advisable to use the coro functions to create the structure that is only used by the request..
- https://kernel.dk/io_uring.pdf

I can't run `make benchmark` even after [this fork of weighttp](https://github.com/lpereira/weighttp) is installed.

```
pi@nalzoks-pi:~/Downloads/lwan/build $ make benchmark
[  3%] Built target bin2hex
[  5%] Built target generate_auto_index_icons
[ 15%] Built target mimegen
[ 16%] Built target generate_mime_types_table
[ 94%] Built target lwan-static
[ 98%] Built target testrunner
[100%] Running benchmark.
Using /home/pi/Downloads/lwan/build/src/bin/testrunner/testrunner for lawn
This script requires a special version of weighttp which supports JSON
output. Get it at http://github.com/lpereira/weighttp
make[3]: *** [CMakeFiles/benchmark.dir/build.make:58: CMakeFiles/benchmark] Error 1
make[2]: *** [CMakeFiles/Makefile2:73: CMakeFiles/benchmark.dir/all] Error 2
make[1]: *** [CMakeFiles/Makefile2:80: CMakeFiles/benchmark.dir/rule] Error 2
make: *** [Makefile:164: benchmark] Error 2
```

A quick skim of its source code doesn't reveal any JSON related code; in fact, it doesn't even take a `-j` argument.

https://github.com/lpereira/weighttp/blob/ffd0439e447ef20169d08b5581a4f0770cf43f73/src/weighttp.c#L136-L172
Hello, can it handle TCP / UDP service / server? 
(IOT applications are next future)
If yes How?
If not Why?
Regards
I ran into this error after build and load with original lwan.conf. 
Did I miss something?

localhost:/briteFaaS/runtime/lwan# ./build/src/bin/testrunner/testrunner
Loading configuration file: testrunner.conf
Could not drop capabilities: Invalid argument (error number 22)

Ideally, this would be a `struct lwan_key_value *` member in `struct lwan_config`. Then, every response will unconditionally serve any headers in this member.

This might be really useful for security-related headers that you wish to apply site-wide (for example, `HTTP-Strict-Transport-Security` or `Content-Security-Policy`).

Personally, I would plan to have the following:

```c
static struct lwan_key_value headers [] = {
    { .key = "content-security-policy", .value = "default-src 'self'" },
    { .key = "x-frame-options", .value = "SAMEORIGIN" },
    { .key = "x-xss-protection", .value = "1; mode=block" },
    { .key = "x-content-type-options", .value = "nosniff" },
    { .key = "referrer-policy", .value = "no-referrer" },
    { .key = "strict-transport-security", .value = "max-age=31536000; includeSubDomains" },
    { .key = NULL, .value = NULL }
};
```
Thansk for merging the websocket branch into the main.

May I ask is there a websocket client built in ?
I am load testing lwan using wrk load test. Sending requests on 100 connections.

However, the number of outstanding incoming requests is limited by the number of I/O threads and cant go over it (I kept a counter to track this info). 

I thought coroutine support in lwan will allow for more requests to be sent than the number of I/O threads.

Wonder if I am missing something.

Thanks,
Peter 
Is it possible in a current implementation of coroutines to wrap the callback-style functions and to use them from coroutines? 
Is it the coro_defer() function only for free some internal stuff?
At the moment, there are two init functions:

* ``lwan_init()``
* ``lwan_init_with_config()``

As a side-note, the naming convention of these functions is somewhat confusing. The first function implicitly reads from a lwan configuration file (with the same name as the binary being run). The second allows you to pass a configuration struct, and therefore should allow for not needing a configuration file to be present.

Unfortunately, using ``lwan_init_with_config()`` does not escape the need for a configuration file. Lwan still requires a minimal config file when using this function, roughly:

```
listener *:8080 {}
```

Ideally, using ``lwan_init_with_config()`` should escape any need for a configuration file. Perhaps a configuration file, if one is present, should still be honored (though I am unsure if that's actually preferable), but it certainly should not be required.

It looks like the specific culprit here is [``try_setup_with_config()``](https://github.com/lpereira/lwan/blob/master/src/lib/lwan.c#L444-L455) (reproduced below for ease):

```c
static void try_setup_from_config(struct lwan *l, const struct lwan_config *config)
{
    if (!setup_from_config(l, config->config_file_path)) {
        if (config->config_file_path) {
            lwan_status_critical("Could not read config file: %s",
                                 config->config_file_path);
        }
    }

    /* `quiet` key might have changed value. */
    lwan_status_init(l);
}
```

I am hoping this can be modified such that if ``config != &default_config``, it skips the check for the config file path. Does that sound reasonable? Are there any assumptions I am making which mean this needs to be done in a different way or that this cannot be done at all?