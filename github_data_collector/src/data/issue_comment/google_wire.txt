Let's imagine, we have an application with a lot of business logic and big amount of abstraction layers. This application could make calls to external (for example http) services. When it comes to functional testing, we want to mock our caller service and control response it will return to us
. The rest of application should work in its normal mode.

When we have some kind of IoC container, we could instantiate our application and then replace needed services in container with corresponding mock. Thanks to separate definitions, we don't need to manually call the whole dependency graph, we just need to get the container with default definitions for each services and then replace needed with mocks.

Is there a way in wire to swap one dependency in the middle of dependency graph?
### Is your feature request related to a problem? Please describe.

It's difficult currently to use wire for conditional bindings or to delay instantiation of a bound type.

I'm thinking along the lines of [dagger's support](https://dagger.dev/users-guide#bindings-in-the-graph) for [`Provider`](http://javax-inject.github.io/javax-inject/api/javax/inject/Provider.html) and [`Lazy`](https://dagger.dev/api/2.11/dagger/Lazy.html).

### Describe the solution you'd like

If wire can inject a type `A`, it would be cool if it could also inject a `func() A`.  (There's probably a better solution, but without generics, I'm not sure what it would be.)

For example, let's say `A` is expensive to instantiate, and I only want to do so if some condition is true.  This isn't right:

```
type A struct{
	// expensive things here...
}

var aSet = wire.NewSet(
  wire.Struct(new(A), "*"),
  dependsOnA)

var someCondition bool

func dependsOnA(a A) B {
  // we always pay the cost of instantiating A.
	if someCondition {
		// do stuff with A
	}
	// do other stuff, return a B
}
```

What one would like is:

```
func dependsOnA(aProvider func() A) B {
	if someCondition {
    a := aProvider()
		// do stuff with A
	}
	// ...
}
```

### Describe alternatives you've considered

Two alternatives:

1. Build separate graphs, and use conditions do decide which injector function to use.  This isn't great if the dependency graph is complex and there are multiple types that need conditional or lazy instantiation, since configuring the entire graph N different ways is tedious.

2. Generate separate injector functions for each lazy/conditional thing, and use those functions inside higher level provider functions.  Following the example above:

```
func dependsOnA() B {
	if someCondition {
    a := injectA() // this is a wire gen'd function
		// do stuff with A
	}
	// ...
}
```
I've used "two injector" strategies in the past (with guice) for bootstrapping, but it's not a great to use use all over the place in an app because you'll have multiple disconnected dependency graphs.  This is bad if `A` needs a `B`, but `B` is also needed in a graph elsewhere.

I think some sort of wire analog to Lazy or Provider would also help with #205 and #216 
It would be great if Wire would work out of the box with Bazel.

There could be a "go_wire_injector()" build rule that takes the source of the file containing the injector and generate a library that could be included as a dependency elsewhere. The generated file could be left out uncommitted in the source code repository (similar to how proto rules work).
 

### Is your feature request related to a problem? Please describe.

When building applications, we might want to support different database drivers, e.g using Go CDK and using the in-memory docstore for development, and mongo or firestore for production. For the scenarios, it would be useful if there was a way to conditionally generate code.

This does reduce flexibility, but eases development, especially when you are wiring up something that is unlikely to change often (e.g the database driver is unlikely to change without a re-compilation anyway).

### Describe the solution you'd like

When running `wire`, the wire generator will execute conditionals *at generation time* (e.g if you have a `switch` on an env variable, it would do a check based on the env variable set at the time `wire` was run).

### Describe alternatives you've considered

I have looked at the proposed solution of #205, but this still causes problems since we then are back at needing to effectively build out the whole dependency ourselves.

### Additional context

Example of current conditional implementation

`wire.go`  
```go
wire.Build(
	conversations.NewManager,
	datastore.ProvideCollection,
	wire.Value(datastore.CollectionName("conversations")),
	datastore.ProvideContext,
)

return &conversations.ConversationManager{}, nil
```

`datastore/store.go`  
```go
func ProvideCollection(ctx context.Context, name CollectionName) (*docstore.Collection, error) {
	switch os.Getenv("DB_DRIVER") {
	case "mongo":
		return NewMongoCollection(ctx, ProvideHostName(), ProvideDatabaseName(), name)
	case "memory":
		return NewInMemoryCollection()
	}
	
	return nil, errors.New("tried to initialize invalid driver")
}
```

#### Desired configuration:

`wire.go`  
```go
switch os.Getenv("DB_DRIVER") {
case "mongo":
	wire.Build(
		conversations.NewManager,
		datastore.MongoProviderSet,
		wire.Value(datastore.CollectionName("conversations")),
		datastore.ProvideContext,
	)
	return &conversations.ConversationManager{}, nil
case "memory":
	wire.Build(conversations.NewManager, datastore.NewInMemoryCollection, datastore.ProvideContext)

	return &conversations.ConversationManager{}, nil
}

return nil, errors.New("tried to initialize invalid driver")
```

### Describe the bug

I am actually not 100% sure this is a pure bug of mis configuration, but since I googled and asked at some places and was not provided with any suitable answer I believe it is unexpected behavior. Let me explain: once in a while wire complains about the error on type that is for some reason now visible to it. This scenario is particularly weird, because it seems to treat two different types but because wire does not detect the type properly it tricks him to cause unrelated error of double definition in provider set.

This is the error:
```
/server/config.go:50:15: Configs has multiple bindings for *invalid type
	current:
	<- provider "ProvideLiveMediaHandlerConfig" (/server/config.go:135:6)
	previous:
	<- provider "ProvideLivePostgresConfig" (/server/config.go:130:6)
```

### To Reproduce

The configuration on those lines are these two providers:
```
// ProvideLivePostgresConfig returns valid postgresSQL config instance
func ProvideLivePostgresConfig(c *Config) *livemediaobject.PostgresSQLConfig {
	return &livemediaobject.PostgresSQLConfig{DatabaseDSN: c.databaseDSN} // line 131
}

// ProvideLiveMediaHandlerConfig additional handler configs
func ProvideLiveMediaHandlerConfig(c *Config) *livemediaobject.HandlerConfig {
	return &livemediaobject.HandlerConfig{Env: c.appEnv} // line 136
}
```

Configs set mentioned in error is defined as 
```
// Configs is a config provider to auto wire
var Configs = wire.NewSet(ProvideLivePostgresConfig, ProvideLiveMediaHandlerConfig)
```

## Expected behavior

I would expect it to provide the type returned when throwing error message, *invalid type is not telling anything for debugging.

### Version

github.com/google/wire v0.2.2



### Is your feature request related to a problem? Please describe.

I have several controllers that I want to create. These controllers all implement the `type XX interface` but are from different classes. Currently, I must create one function for each controller, and then call them one by one to create an array of controllers and then pass this array of controllers to the router package. 
The issue is all of them requires an instance of the same objects over and over. this object is shared between them (some validator, and also an object related to the database) 

I have this problem in another place with loading multiple keys in the system from various sources. Usually, when I need multiple-instance or implementation of an interface. 

### Describe the solution you'd like

When the providers provide `type X` more than one time, and if the next consumer required a slice of `type X` (or it uses `...`) then instead of error about multiple providers, pass them in order of appearance in the list, to the next function. 

something like this 

```go 
func base() string { return "shared resource" }
func p1(b string) int { return 20 }
func p2(b string) int { return 22 }
func p3(in ...int) int64  { 
    sum := 0  
    for i := range in {
        sum+= in[i]
    }
    return int64(sum)
}

func wireMe() int64 {
  panic(wire.Build(base, p1, p2, p3))
}
```
the result should be something like this : 

```go
func wireMe() int64{
   s := base() // this resource is shared between all of them
   return p3(p1(s), p2(s)) 
}
``` 

### Describe alternatives you've considered

The only alternative is to write them one by one. The problem is the `base` function in my example. It should be some singleton in my use case, or I should call it myself and pass the resource to all other function as a parameter.

### Additional context

None.

### Describe the bug

When using the `--header_file` flag the resulting generated file has the following go generate line:

```go
//go:generate wire
```

This implies when someone later runs `go generate ./...`, the header file that was originally in the file will be removed.

### To Reproduce

```sh
wire --header_file=./path/to/header/file
go generate
```

## Expected behavior

After running wire with the `--header_file` flag, running `go generate` again would not produce a delta.

### Version

v0.3.0

### Additional context

### Describe the bug

Panic when running `wire ./...`

### To Reproduce

Sorry, I can't give a specific repro because
1. I worked around it as soon as I ran into it
2. There's a lot of proprietary code involved and it would have been pretty hard to isolate

The error was related to a bind statement:
```
	wire.Bind(new(Interface), new(*Concrete)),
```
I don't know what was unusual about this bind statement. There was New function that returns a pointer to Concrete and *Concrete implements Interface. In 0.2.2, I was able to use new(Concrete), but I had to change that to new(*Concrete) after upgrading to 0.3.0 and that's when the panic happened.

I hope that the following stack trace helps. If not, we might want to wait for someone to run into this again and provide a repro.

```
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0x64488d]

goroutine 1 [running]:
go/types.(*Package).Path(...)
        /home/<user>/.go/src/go/types/package.go:30
github.com/google/wire/internal/wire.(*objectCache).get(0xc03b480880, 0x76bb60, 0xc00008cc30, 0x0, 0x0, 0x0, 0x0, 0x0)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/parse.go:464 +0x7d
github.com/google/wire/internal/wire.(*objectCache).processExpr(0xc03b480880, 0xc03a9324b0, 0xc000cfdce0, 0x5b, 0x766e60, 0xc03a9394c0, 0x0, 0x0, 0x0, 0x0, ...)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/parse.go:523 +0xfd3
github.com/google/wire/internal/wire.(*objectCache).processNewSet(0xc03b480880, 0xc03a9324b0, 0xc000cfdce0, 0x5b, 0xc03a9c1980, 0x0, 0xc03a905620, 0xf, 0xc000656ec0, 0x58632c, ...)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/parse.go:592 +0x18a
github.com/google/wire/internal/wire.(*objectCache).processExpr(0xc03b480880, 0xc03a9324b0, 0xc000cfdce0, 0x5b, 0x766a60, 0xc03a9c1980, 0xc03a905620, 0xf, 0xf, 0xc000026500, ...)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/parse.go:535 +0x519
github.com/google/wire/internal/wire.(*objectCache).get(0xc03b480880, 0x76bd40, 0xc03a9331d0, 0x0, 0x0, 0x0, 0x0, 0x0)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/parse.go:489 +0x42e
github.com/google/wire/internal/wire.(*objectCache).processExpr(0xc03b480880, 0xc03b4684b0, 0xc0003737a0, 0x51, 0x7671a0, 0xc03b441b60, 0x0, 0x0, 0x68c340, 0xc03b4e1320, ...)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/parse.go:523 +0xfd3
github.com/google/wire/internal/wire.(*objectCache).processNewSet(0xc03b480880, 0xc03b4684b0, 0xc0003737a0, 0x51, 0xc03b466e40, 0x0, 0xc03b4432a0, 0x16, 0xc0006573e8, 0x58632c, ...)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/parse.go:592 +0x18a
github.com/google/wire/internal/wire.(*objectCache).processExpr(0xc03b480880, 0xc03b4684b0, 0xc0003737a0, 0x51, 0x766a60, 0xc03b466e40, 0xc03b4432a0, 0x16, 0x16, 0xc000026500, ...)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/parse.go:535 +0x519
github.com/google/wire/internal/wire.(*objectCache).get(0xc03b480880, 0x76bd40, 0xc03b468550, 0x0, 0x0, 0x0, 0x0, 0x0)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/parse.go:489 +0x42e
github.com/google/wire/internal/wire.(*objectCache).processExpr(0xc03b480880, 0xc03b468e10, 0xc0002f6eb0, 0x49, 0x7671a0, 0xc03b4770a0, 0x0, 0x0, 0x6b2cc0, 0xc039982600, ...)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/parse.go:523 +0xfd3
github.com/google/wire/internal/wire.(*objectCache).processNewSet(0xc03b480880, 0xc03b468e10, 0xc0002f6eb0, 0x49, 0xc03b467680, 0xc03b4808e0, 0x0, 0x0, 0x0, 0x0, ...)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/parse.go:592 +0x18a
github.com/google/wire/internal/wire.generateInjectors(0xc03b469f90, 0xc000da5770, 0x2, 0xc0393f10a0, 0x69, 0x0, 0x0, 0xc00000c0b0)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/wire.go:176 +0xaaf
github.com/google/wire/internal/wire.Generate(0x767ca0, 0xc0000120d8, 0xc000020004, 0x40, 0xc000010c00, 0x59, 0x59, 0xc00000c0b0, 0x1, 0x1, ...)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/internal/wire/wire.go:99 +0x412
main.(*genCmd).Execute(0xc000047eb0, 0x767ca0, 0xc0000120d8, 0xc00005a180, 0x0, 0x0, 0x0, 0x7f97cf1e8008)
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/cmd/wire/main.go:131 +0x249
main.main()
        /home/<user>/go/pkg/mod/github.com/google/wire@v0.3.0/cmd/wire/main.go:71 +0x4a1
exit status 2
```
## Expected behavior

No panic

### Version

0.3.0

### Additional context

Sorry, too much proprietary code. Hope there's something obvious that recently changed and the stack trace helps.

## Problem Statement

In production, dependencies can misbehave in unexpected or unchecked ways. For example, a database module could fail to initialize quickly due to network error, or a provider could loop infinitely due to programmer error.

In any case where the particular module is coded to block, rather than fail fast, this can lead to an entire application failing to start up (or shut down) cleanly.

## Potential Solution

I can imagine a number of ways to handle this case, but there is one that seems simple and useful to me: **timeouts**.

If specified in the wireinject code, wire could generate code to perform a timeout on startup (and also during cleanup).

I'm not sure about the syntax, but it could be something like `wire.WithTimeout(SomeProvider, time.Minute)`. It could also be global as a new parameter to `wire.Build`. In either case, the generated code would be surrounded by a select statement that fails when a timer expires.

Does wire's current design already account for this use case? Is it generally programmer error to perform long-running effects in a provider, or are there other legitimate use cases where a provider can fail to return in a timely manner?
It's common for constructor functions to return values that have a Close method that's used to clean up the value's associated resources. This doesn't fit easily with the convention used by wire of using a `func()`-typed return value. This means it's always necessary to add an adaptor function that returns a cleanup function that calls the Close method.

As a possible feature, it might be possible to add a wire function that makes this easier:

    // Cleanup specifies that cleanupFunc should be used to
    // clean up values of a given type. The cleanupFunc argument must be
    // of type func(T) or func(T) error where T is the type to be cleaned up.
    // If it returns an error, the error value will be discarded. 
    //
    // For example:
    //      wire.Bind(
    //           openDatabaseFile,
    //           openDatabase,
    //           wire.Cleanup((*os.File).Close),
    //       )
    func Cleanup(cleanupFunc interface{}) Cleaner
