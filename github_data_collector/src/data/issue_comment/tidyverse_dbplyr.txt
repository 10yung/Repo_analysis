`dplyr` disallows mutation on grouping variables. However, it seems that `mutate.tbl_lazy` doesn't check whether a mutated variable is a grouping variable and allows the function call to proceed without warnings.

The implication of this is that the seemingly successful mutation actually messed up the grouping information and introduced NA values into the grouping via [this line of code](https://github.com/tidyverse/dbplyr/blob/master/R/verb-select.R#L75). Note this line of code still runs. It just emits a warning about vector replacement that doesn't alert the end user of the actual problem.

When the user tries to call `mutate()` again, the call fails because of the NAs in grouping in [this line of code](https://github.com/tidyverse/dbplyr/blob/master/R/verb-mutate.R#L8) when `op_grps` is called and triggers an `Only strings can be converted to symbols` error in [this line of code](https://github.com/tidyverse/dbplyr/blob/master/R/verb-select.R#L34) when it tries to test if all select variables are symbol and fails on the NA value.

This error is quite subtle to diagnose as the final error message doesn't suggest anything related to the root cause.

To be consistent with `dplyr`'s `mutate()` behavior, perhaps `dbplyr` should check if a mutated variable is included in the current grouping and disallow if it is in `mutate.tbl_lazy()`.

``` r
library(dplyr)
#> 
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#> 
#>     filter, lag
#> The following objects are masked from 'package:base':
#> 
#>     intersect, setdiff, setequal, union
library(dbplyr)
#> 
#> Attaching package: 'dbplyr'
#> The following objects are masked from 'package:dplyr':
#> 
#>     ident, sql

# Create a test local lazy tibble
t <- lazy_frame(x = 1, y = 2, z = 3)
# There are no groupings
op_grps(t)
#> character(0)

# Add groupings
t.grp <- group_by(t, x, y)
# Grouping is x, y
op_grps(t.grp)
#> [1] "x" "y"

# Calling mutate() on grouped column runs successfully without warning
t.grp.2 <- mutate(t.grp, x = 2)
# Grouping now has an NA value
op_grps(t.grp.2)
#> Warning in grps[grps %in% names(old2new)] <- old2new[grps]: number of items to
#> replace is not a multiple of replacement length
#> [1] "x" NA

# Subsequent calling of mutate() now returns error
mutate(t.grp.2, x = 3)
#> Warning in grps[grps %in% names(old2new)] <- old2new[grps]: number of items to
#> replace is not a multiple of replacement length
#> Error: Only strings can be converted to symbols
```

<sup>Created on 2020-01-16 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

So they appear in dplyr docs
And provide an informative error for the `slice()` method.
``` r
library(rlang)
library(dbplyr)

a <- expr(1 + 1)

# correctly add parentheses in R
expr(!!a / 2)
#> (1 + 1)/2


# but not in SQL
dbplyr::translate_sql(b = !!a / 2)
#> <SQL> 1.0 + 1.0 / 2.0 AS b
```

<sup>Created on 2019-12-23 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>



When I debug into `translate_sql`, the R expression is first unquoted correctly to `(1 + 1) / 2`, but then passed to `eval_tidy` where the parentheses are somehow taken out.
corrected str_detect so it is possible to use regular expressions, introduced str_replace and corrected str_replace_all with 'g' parameter

fixes #362 
These modifications address the issue described in https://github.com/tidyverse/dbplyr/issues/384
Fixes #385 

Currently this generates a rather large set of conflicts:

``` r
library(dbplyr)
library(dplyr)
#> 
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:dbplyr':
#> 
#>     db_analyze, db_begin, db_commit, db_create_index,
#>     db_create_indexes, db_create_table, db_data_type, db_desc,
#>     db_drop_table, db_explain, db_has_table, db_insert_into,
#>     db_list_tables, db_query_fields, db_query_rows, db_rollback,
#>     db_save_query, db_write_table, ident, sql, sql_escape_ident,
#>     sql_escape_string, sql_join, sql_select, sql_semi_join, sql_set_op,
#>     sql_subquery, sql_translate_env
#> The following objects are masked from 'package:stats':
#> 
#>     filter, lag
#> The following objects are masked from 'package:base':
#> 
#>     intersect, setdiff, setequal, union
```

<sup>Created on 2019-12-15 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
See issue #376 

Creates a translation for the R function `weighted.mean`. 
casting as NUMERIC in MSSQL results in an integer being returned, even if the character string is representing a floating point number. casting as FLOAT results in a float being returned.
addresses issue https://github.com/tidyverse/dbplyr/issues/379

* [x] Copy over `dbplyr.R`
* [x] Remove existing dplyr imports
* [x] Integrate into existing documentation files
* [x] Update dbplyr backend vignette
* [x] Add default methods (https://github.com/tidyverse/design/issues/106)
* [x] Add conflict resolution
* [x] Eliminate uses of `src_sqlite()`, `src_postgres()`, and `src_mysql()`