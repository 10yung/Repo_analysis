Hey @beizhedenglong üëã Thanks for creating such a beautiful charting library.

I'm looking to convert open source libs into SaaS APIs as part of my work with [saasify.sh](https://saasify.sh) and thought rough-charts would be a great fit.

For example, I'd like to create an API endpoint to render charts like

```
https://api.saasify.sh/1/call/dev/rough-charts@latest/render
```

called with a JSON payload that represents your React usage in a [`react-from-json` format](https://github.com/hydrateio/react-from-json)

```json
{
  "data": [
    { "name": "A", "value": 30 },
    { "name": "B", "value": 90 }
  ],
  "height": 400,
  "children": [
    { "type": "XAxis", "dataKey": "name" },
    { "type": "YAxis" },
    { "type": "LineSeries", "dataKey": "value"}
  ]
}
```


We'd love to offer a rate-limited API and reserve most of the profits for you. As an example, we've also worked on converting sindresorhus' [imagemin](http://imagemin.saasify.sh/) and minimaxir's [stylecloud](http://wordcloud.saasify.sh/) to APIs.

Looking forward to hearing your thoughts! Would also be happy to jump on a quick call to discuss.
Love the project!! üòç 
Is there an existing way to make a Area chart such as this one? 
http://recharts.org/en-US/examples/SimpleAreaChart
If I have data to plot to a line graph with a narrow range, i.e. temperature data, I can not find a way to change the lowest value on the Y Axis from 0. So, in my case I end up with a flat line of values at the top of the graph.

In the source `useChartContext` code I see references to the props userXScale/userYScale, but it appears to take 0 as the bottom range regardless of what is supplied:

```
if (userYScale) {
       userYScale.range([0, contentHeight])
```

If this feature exists, it should be documented. 

All of the storybook pages and examples you show in the repo show 0 as the bottom bound of the Y Axis.

If this feature does not exist, please allow a way pass a preferred yAxis start value into the ChartContext. With a static set of data, the user could trivially determine a suitable bottom value, and pass it in.

Perhaps, fitting the animated style of the project, a squiggly "break" could be used to show the graph's distortion from 0.