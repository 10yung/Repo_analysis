(rbspy compiled from master today.)

```
Press Ctrl+C to stop
thread '<unnamed>' panicked at 'Ruby version not supported yet: 2.7.0. Please create a GitHub issue and we'll fix it!', src/core/initialize.rs:340:14
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
Wrote raw data to /home/XXX/.cache/rbspy/records/rbspy-2020-01-14-nPi9lgQl9u.raw.gz
Writing formatted output to /home/XXX/.cache/rbspy/records/rbspy-2020-01-14-hB1FCDBIdN.flamegraph.svg
[2020-01-14T14:51:41Z ERROR inferno::flamegraph] No stack counts found
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Io(Custom { kind: InvalidData, error: "No stack counts found" })', src/libcore/result.rs:1165:5
```
I'v been consistently finding that my recordings stop prematurely (even with a duration specified) without any sort of notification as to why. I checked the docs and couldn't find any information about what might cause this.
Running currently with `rbspy record --rate 400 --duration 60 --pid`, I am seeing cpu usage on htop from 8%-25% with it typically being closer to 10-18%. At one point, it did hit upwards of 75%. 
It would be nice to be able to merge the stack traces from multiple running servers (eg via `rbspy merge <trace1> <trace2> <traceN>`) into a single file for analysis.
Now that py-spy supports FreeBSD we can leverage its internal
`remoteprocess` Crate, which does everything related to obtaining
information about remote processes: memory reading, obtaining threads
info and native stack traces etc.

This change

* Refactors rbspy to use py-spy's remoteprocess crate
* Tweaks Linux's address finder code to support FreeBSD as well.
* Adds Cirrus CI (a FreeBSD CI) config.
    thread '<unnamed>' panicked at 'Ruby version not supported yet: 2.6.5. Please create a GitHub issue and we'll fix it!', src/core/initialize.rs:333:14
Fixes #234 

(WIP)
* Multiple `function is never used` because of #213 (also noted in #222) 
* Multiple warnings in `ruby-structs` crate because of autogen'd `bindgen` code. (Some indicate they may become errors in the future)
* Some OS builds have unused import warnings (check CI logs)

```
   Compiling read-process-memory v0.1.2
   Compiling term_size v0.3.1
error[E0432]: unresolved import `platform`
  --> /usr/local/registry/src/github.com-1ecc6299db9ec823/read-process-memory-0.1.2/src/lib.rs:38:9
   |
38 | pub use platform::Pid;
   |         ^^^^^^^^ maybe a missing crate `platform`?

error[E0432]: unresolved import `platform`
  --> /usr/local/registry/src/github.com-1ecc6299db9ec823/read-process-memory-0.1.2/src/lib.rs:40:9
   |
40 | pub use platform::ProcessHandle;
   |         ^^^^^^^^ maybe a missing crate `platform`?

error[E0433]: failed to resolve: use of undeclared type or module `platform`
  --> /usr/local/registry/src/github.com-1ecc6299db9ec823/read-process-memory-0.1.2/src/lib.rs:60:53
   |
60 |     fn try_into_process_handle(&self) -> io::Result<platform::ProcessHandle> {
   |                                                     ^^^^^^^^ use of undeclared type or module `platform`

   Compiling clap v2.33.0
error: aborting due to 3 previous errors

Some errors have detailed explanations: E0432, E0433.
For more information about an error, try `rustc --explain E0432`.
error: Could not compile `read-process-memory`.
warning: build failed, waiting for other jobs to finish...
```

I wish it works like py-spy does
https://github.com/benfred/py-spy/issues/112

I ran `rbspy record --pid 35` and got the error:

```
Press Ctrl+C to stop
Wrote raw data to /root/.cache/rbspy/records/rbspy-2019-08-29-E3Qc4TJIj7.raw.gz
Writing formatted output to /root/.cache/rbspy/records/rbspy-2019-08-29-cTpezCRXzx.flamegraph.svg
[2019-08-29T17:04:44Z ERROR inferno::flamegraph] No stack counts found
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Io(Custom { kind: InvalidData, error: StringError("No stack counts found") })', src/libcore/result.rs:997:5
note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

This was in a docker container on kubernetes, but i don't think that should matter since i'm running rbspy in the same container as the process i'm trying to profile.

Running with rbspy record cmd does work, but isn't very useful for us since the process i'm trying to look at is a web server that spawns 2 other processes which do the actual work.