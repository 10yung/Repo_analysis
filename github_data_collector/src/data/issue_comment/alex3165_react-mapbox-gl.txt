In case when I am using image from url I am getting an following error:

> mapbox-gl.js:365 Uncaught DOMException: Failed to execute 'getImageData' on 'CanvasRenderingContext2D': The canvas has been tainted by cross-origin data.

```
const image = new Image()
image.src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSympkVrlM_Rg5yClfsdKLPwitlHW_3XtB6KE5rdZSFs6Ly0Xvk&s'
```

What is wrong and how can I user image from url?


The code right now checks:
- If there was a listener and got removed, then unlisten from the map.
- If there wasn't a listener before and one was added to the props, add it to the map.
But it's not checking if the listener simply changed. This fixes that issue, making the map be always up to date with the listeners passed through props.
All Layers are seemingly only using the "images" option set by the Layer that is defined first in my render method.

My problem is as follows: Two Layers using the same GeoJSONLayer as a source seem to use the icon-image of the Layer that is defined first in my render() method. In my example, "unclustered_arrived_layer" and "clustered_arrived_layer" both use _icon A_, and "clustered_transit_layer" and "unclustered_transit_layer" both use _icon B_, despite using a different _images_ option. 
Furthermore, and even weirder: Adding/deleting Layers seems to influence the behavior of Layers that are using an entirely different GeoJSONLayer. E.g., deleting the "clustered_arrived_layer" in my source also changes the icon used by Layer "unclustered_transit_layer"

```
<Layer
                            id="clustered_arrived_layer"
                            sourceId='arrived_id'
                            type="symbol"
                            images={CLUSTER_IMAGES} // contains SVGs for clustered transit and arrived markers 
                            layout={{ 
                                "icon-image": "arrived",
                                "icon-allow-overlap": true,
                                "icon-anchor": "bottom"
                            }}
                            filter= {['has', 'point_count']}
                        />

                        <Layer
                            id="unclustered_arrived_layer"
                            sourceId='arrived_id'
                            type="symbol"
                            images={MARKER_IMAGES} // contains SVGs for unclustered transit and arrived markers
                            layout={{ 
                                "icon-image": "arrived",
                                "icon-allow-overlap": true,
                                "icon-anchor": "bottom"
                            }}
                            filter={['!', ['has', 'point_count']]}
                        />

// Both Layers appear with same icon
```

CONTEXT: In my project, I have the following situation: I have potentially thousands of point-location, each one having a "status" property that is either "arrived" or "transit". I want the points to cluster, BUT not with each other; so all points with status: transit should cluster with each other, but not any points that have status: arrived, and vice versa. My current solution is to use two separate GeoJSONLayersources: one for transit and one for arrived points. For each GeoJSONLayer source, I create two Layers: one for clustered markers and one for unclusters markers, each one using a different icon-image. 
- All images are SVG's. When using just one layer and source, they all render just fine. 
- I have also tested the filters on the Layers separately, which also seems to work just fine. 
- I'm not using the Cluster component, since I potentially have A LOT of data, which as declared by the docs and issue #719 ,has a negative impact on performance, and I want to use SVG images as icons, not HTML Markers. 

Full Render method: 
```
render() {
        let containerFeatures = (this.props.loadingContainers || this.props.errorContainers ) ? null : this.props.containers.features;

        //First we filter all containers
        containerFeatures = FILTER_HELPER_INSTANCE.filterFeatures(containerFeatures, this.props.filterValues);

        let arrivedContainers = GEOJSON_HELPER_INSTANCE.filterFeaturesByStatus(containerFeatures, 'arrived');
        let transitContainers = GEOJSON_HELPER_INSTANCE.filterFeaturesByStatus(containerFeatures, 'transit');

        return (
            <div className="mapContainer">
                <Mapbox
                    zoom={[this.state.zoom]}
                    center={this.state.center}
                    onDragEnd={(map) => this.onDragEnd(map)}
                    onZoomEnd={(map) =>  this.onZoomEnd(map)}
                    style="mapbox://styles/mapbox/streets-v8" // eslint-disable-line react/style-prop-object
                    containerStyle={{height: "100%", width: "100%"}}
                    maxBounds={[-180,-85,180,85]}
                    >

                  {//Determine if we are still fetching containers from the API. If we are return null
                    (this.props.loadingContainers || this.props.errorContainers) ?

                    null

                    :

                    <div>

                        {/*-----------------------------//
                         //          ARRIVED            // 
                         //-----------------------------*/}

                        <GeoJSONLayer
                            id="arrived_id"
                            data={arrivedContainers}
                            sourceOptions={{
                                cluster: true,
                                clusterMaxZoom: 14,
                                clusterRadius: 100,
                            }}
                        />

                        <Layer
                            id="clustered_arrived_layer"
                            sourceId='arrived_id'
                            type="symbol"
                            images={CLUSTER_IMAGES} // contains SVGs for clustered transit and arrived markers 
                            layout={{ 
                                "icon-image": "arrived",
                                "icon-allow-overlap": true,
                                "icon-anchor": "bottom"
                            }}
                            filter= {['has', 'point_count']}
                        />

                        <Layer
                            id="unclustered_arrived_layer"
                            sourceId='arrived_id'
                            type="symbol"
                            images={MARKER_IMAGES} // contains SVGs for unclustered transit and arrived markers
                            layout={{ 
                                "icon-image": "arrived",
                                "icon-allow-overlap": true,
                                "icon-anchor": "bottom"
                            }}
                            filter={['!', ['has', 'point_count']]}
                        />

                        {/*-----------------------------//
                         //          TRANSIT            // 
                         //-----------------------------*/}

                        <GeoJSONLayer
                            id="transit_id"
                            data={transitContainers}
                            sourceOptions={{
                                cluster: true,
                                clusterMaxZoom: 14,
                                clusterRadius: 300,
                            }}
                        />
                        
                        <Layer
                            id="clustered_transit_layer"                         
                            sourceId='transit_id'
                            type="symbol"
                            images={CLUSTER_IMAGES} // contains SVGs for clustered transit and arrived markers
                            layout={{ 
                                "icon-image": "transit",
                                "icon-allow-overlap": true,
                                "icon-anchor": "bottom"
                            }}
                            filter= {['has', 'point_count']}
                        />

                        <Layer
                            id="unclustered_transit_layer"                         
                            sourceId='transit_id'
                            type="symbol"
                            images={MARKER_IMAGES} // contains SVGs for unclustered transit and arrived markers
                            layout={{ 
                                "icon-image": "transit",
                                "icon-allow-overlap": true,
                                "icon-anchor": "bottom"
                            }}
                        />

                        

                    </div>
                    
                  }
                </Mapbox>
            </div>
        )
    }
```
See #815 
Consider the following, a fixed GeoJSONLayer combined with a variable amount of GeoJSONLayer's.

```javascript
<Map style='mapbox://styles/mapbox/light-v9'>
  <GeoJSONLayer data='{}' />
  {Array(3).fill({}).map((data, i) => (
    <GeoJSONLayer key={i} data={data} />
  ))}
</Map>
```

This gives a typescript error 

>  Type '(Element | Element[])[]' is not assignable to type 'Element | Element[] | (Element | undefined)[] | (Element & string) | (Element & number) | (Element & false) | (Element & true) | ... 17 more ... | undefined'.
          Type '(Element | Element[])[]' is not assignable to type 'Element[]'.



Something is wrong with the `children`'s definition on `Prop`. 

Also, adding a comment above the Element[] part fixes it for some reason.
```javascript
<Map style='mapbox://styles/mapbox/light-v9'>
  <GeoJSONLayer data='{}' />
  {/* magic comment */}
  {Array(3).fill({}).map((data, i) => (
    <GeoJSONLayer key={i} data={data} />
  ))}
</Map>
```
It could be useful to animate a line : https://docs.mapbox.com/mapbox-gl-js/example/animate-a-line/
I am trying to add WMS source to the map. 
I followed the documentation for adding the raster source

https://github.com/alex3165/react-mapbox-gl/blob/master/docs/API.md#source

```
const RASTER_SOURCE_OPTIONS = {
  "type": "raster",
  "tiles": [
    'http://localhost:8080/geoserver/cite/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&FORMAT=image%2Fpng&TRANSPARENT=true&tiled=true&LAYERS=cite%3AKhokana_Nadir_transparent_mosaic_group1&exceptions=application%2Fvnd.ogc.se_inimage&WIDTH=256&HEIGHT=256&SRS=EPSG%3A&STYLES=&BBOX={bbox-epsg-3857}'
  ],
  "minzoom": 1,
  "maxzoom": 6,
  "scheme": "tms",
  "tileSize": 256,
};

```
Inside render

```
  <Source id="wms_id" tileJsonSource={RASTER_SOURCE_OPTIONS} />
   <Layer type="raster" id="layer_id" sourceId="wms_id" >
    </Layer>
```

**Map doesn't seem to render the raster image** 
it works if I have **static value of BBOX** in the WMS url

> localhost:8080/geoserver/cite/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&FORMAT=image%2Fpng&TRANSPARENT=true&tiled=true&LAYERS=cite%3AKhokana_Nadir_transparent_mosaic_group1&exceptions=application%2Fvnd.ogc.se_inimage&WIDTH=256&HEIGHT=256&SRS=EPSG%3A&STYLES=&BBOX={bbox-epsg-3857

but not with 
`BBOX={bbox-epsg-3857}`

like in the mapbox-gl example https://docs.mapbox.com/mapbox-gl-js/example/wms/

Please note that there is not issue with the WMS service



Mapbox docs give this clear example: 
https://docs.mapbox.com/mapbox-gl-js/example/language-switch/

react-mapbox-gl docs describe how to work with the original mapbox API:
https://github.com/alex3165/react-mapbox-gl/blob/master/docs/API.md#using-the-original-mapbox-api

But I cannot change the  language of my map labels by combining these two pieces of documentation. (I have tried both methods  described for working with the original mapbox documentation.)

I've also tried Mapbox GL Language plugin: https://blog.mapbox.com/how-to-localize-your-maps-in-mapbox-gl-js-da4cc6749f47

Using Mapbox GL Language plugin as described (combined with the docs on [how to interact with original mapbox API](https://github.com/alex3165/react-mapbox-gl/blob/master/docs/API.md#using-the-original-mapbox-api)) wipes out  map labels completely.  

I'm clearly doing something (perhaps many things!) wrong.

Can someone point me in the right direction to learn how to localize a react-mapbox-gl map? Or even better: share a working code sample of how you implemented map localization with react-mapbox-gl? 

Thank  you!!
How I could call sth like :
```javascript
if (!mapboxgl.hasRTLTextPlugin) {
      mapboxgl.setRTLTextPlugin(Map[mapType].RTLTextPlugin);
      mapboxgl.hasRTLTextPlugin = true;
    }
```
without importing 'mapbox-gl' in my component ?
I am rendering some geoJson polygons in my app using the `GeoJSONLayer` component. I have provided some `fill` expressions and things are working well.

I noticed this layer is by default called `geojson-1-fill` and it seems that neither `Layer` nor the `GeoJSONLayer` component allow you to change this. 

Is there a way to specifically give that layer a name?