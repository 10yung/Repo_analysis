When testing for PowerShell auditing settings I am unable to test for the following value as it contains a "*"

The code below is what I'm currently using which doesn't work. I have tried escaping the * by "\*" but that doesn't work.
```
Registry 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell\ModuleLogging\ModuleNames\' "*" { Should -Be '*'}
```
The problem code is the expandproperty as shown below.
```
Get-ItemProperty HKLM:\Software\Policies\Microsoft\Windows\PowerShell\ModuleLogging\ModuleNames\ | Select-Object -ExpandProperty '*'
```


Here is the Full Context that I'm using for the PowerShell Audit Settings.
```
Context -Name 'Powershell Auditing' -Fixture {
        #Turn on Module Logging: Enabled
        Registry 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell\ModuleLogging\' 'EnableModuleLogging' { Should -BeExactly 1}
        #* Module Names: *
        Registry 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell\ModuleLogging\ModuleNames\' "*" { Should -Be '*'}
        #* Turn on Powershell Script Block Logging:
        #    * Enabled
        Registry 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging\' 'EnableScriptBlockLogging' { Should -Be 1}
        #* Log script block invocation start / stop events:
        #   * Disabled
        IF (Test-Path 'HKLM\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging\EnableScriptBlockInvocationLogging') {
            #If Value doesn't exist it defaults to 0
            Registry 'HKLM:\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging\' 'EnableScriptBlockInvocationLogging' {Should -BeLessOrEqual 0}
        }
    }
```
I've added some new functions over the last months.
Added a Ping function based off the TcpPort function.
This project's documentation is somewhat limited. I suggest migrating towards a documentation solution using either [MkDocs](http://www.mkdocs.org/) or [GitBook](https://toolchain.gitbook.com/).

## Expected Behavior
Users should be able to access a documentation site for the project which includes tutorials, design explanations/concept guides, and reference materials. Preferably, this documentation should be versioned, available as a downloadable artifact, source controlled, and built automatically via CI.

## Current Behavior
Documentation exists in limited form as wiki articles in the project, though these are not always up to date.

## Possible Solution
We could use either MkDocs or GitBook to create the documentation site. GitBook can also be used to export to PDF/epub/mobi format for artifact download.

I suggest breaking documentation into three broad parts:

1. **Tutorials:** This section includes more blog-like documentation conversationally walking prospective users/developers through using and interacting with the project. This is a perfect place to give an example of how to create a plugin or how to set permissions for a role.
2. **Guides:** This section is more like an informal set of white papers or design documents explaining design decisions, security concerns, and other topics not best suited to a blog format but which still need to be covered.
3. **Reference:** This section is where all of the actual reference documentation (exported comment based help, class references, etc) belong. 

## Context
I have found that this type of documentation makes using a project much easier from both a normal user standpoint as well as from a contributing developer standpoint. It doesn't have to be written all at once but providing a base level of useful documentation and then iterating on it can help to drive adoption and help answer questions about the project more easily.
Simple SQL connectivity check
I am using Package resource for my infrastructure validation. As my environment has only powershell v4, Get-package function was not there. 

I have written a module named Poshspechelper in my machine and written a custom function 
Get-InstalledPackage. The function is given below.

```
function Get-InstalledPackage
{
    [CmdletBinding()]
  param($appName, $appVersion)

  if ((Get-WmiObject win32_operatingsystem).OSArchitecture -notmatch '64')  
  { 
    $keys= (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*')
    $possible_path= 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*'
    if (Test-Path $possible_path)
    {
      $keys+= (Get-ItemProperty $possible_path)
    }
  }  
  else  
  { 
    $keys = (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*','HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*')
    $possible_path= 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*'
    if (Test-Path $possible_path)
    {
      $keys+= (Get-ItemProperty $possible_path)
    }
    $possible_path= 'HKCU:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*'
    if (Test-Path $possible_path)
    {
      $keys+= (Get-ItemProperty $possible_path)
    }
  }

  if ($appVersion -eq $null) { 
    @($keys | Where-Object {$_.DisplayName -like $appName -or $_.PSChildName -like $appName}).Length -gt 0
  }
  else{
    $IsAppInstalled =    @($keys | Where-Object {$_.DisplayName -like $appName -or $_.PSChildName -like $appName}).Length -gt 0
    $VersionAvailable =   @($keys | Where-Object {$_.DisplayName -like $appName -or $_.PSChildName -like $appName  } | Where-Object {$_.DisplayVersion -eq $appVersion} ).Length -gt 0
    if ($VersionAvailable)
    {
        $Version = $appVersion
    }    
    $object = [Pscustomobject] @{
        IsInstalled= $IsAppInstalled
        Version= $Version   
    }
    Write-Output $object

  }
}
```

When i run this with pester like below , it worked as expected. .

```
Import-module pester
Import-Module PoshspecHelper

Describe "Orca msi validation" {
    It "Package validation" {
        Get-InstalledPackage -appName 'Orca' -appVersion '3.1.3790.0000' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'version' | should be '3.1.3790.0000'
    }
}
```

But when i call this in package.ps1 file instead of Get-package (like given below) , i am getting error given below the code.

```

#$expression = {Get-Package -Name '$Target' -ErrorAction SilentlyContinue}
    $expression = { Get-InstalledPackage -appName '$Target' -appVersion $Property -ErrorAction SilentlyContinue}
```

> [-] Package2 property 'version' for 'Orca' should be '3.1.3790.0000' 67.04s
>    Expected: {3.1.3790.0000}
>    But was:  {}
>    1: Get-InstalledPackage -appName 'Orca' -appVersion version -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'versio
> n' | should be '3.1.3790.0000'
>    at <ScriptBlock>, <No file>: line 1
>    at <ScriptBlock>, C:\Program Files\WindowsPowerShell\Modules\Poshspec\2.1.12\Private\Invoke-PoshspecExpression.ps1: line 12

Please check and let me know what went wrong .  when i debugged it ,it always failed in the below line at Invoke-PoshspecExpression.ps1 file

`Invoke-Expression $InputObject.Expression`

Since the Assertion in the PoshSpec is placed inside a scriptblock, how does one reference variables in it e.g below works fine when the assertion is hardcoded -:

```
Describe test {
    Service Bits Status {Should be 'Running'}
}
```

But when a variable is placed in the assertion, it can't see them e.g.

```

Describe test {
    $DesiredStatus = 'Running'
    Service Bits Status {Should be $DesiredStatus}
}
```

Above gives me the error -:

```
Describing test
 [-] Service property 'Status' for 'Bits' Should be $DesiredStatus 123ms
   Expected: {}
   But was:  {Running}
   1: Get-Service -Name 'Bits' | Select-Object -ExpandProperty 'Status' | Should be $Desir
edStatus
   at <ScriptBlock>, <No file>: line 1
   at <ScriptBlock>, C:\Users\Deepak_Dhami\Documents\GitHub\poshspec\Private\Invoke-Poshsp
ecExpression.ps1: line 12

```

The idea is to use a CSV file as a template for all the service and their compliant status.
How do I do something like this with PoshSpec ?

```
Describe 'IT Compliance for Services' {
    $ObjectFromCSV = @([PSCustomObject]@{
        Name='Bits';
        Status='Stopped'
    })

    $ObjectFromCSV.Foreach({
        Service $PSItem.Name Status {Should be $PSItem.Status}

    })
}
```

Does the above make sense to be  added to the DnsHost implementation ? 

I am working on project, where we have multiple DNS servers set on the client nodes and want to validate that the name resolution works using each of the DNS server, also at the same time be able to make different type of DNS queries to the DNS server.

Current implementation of the DnsHost does not let you specify a DNS server or the type of DNS query to for a validation test.

For Example - a machine can have multiple DNS servers, so this test should allow specifying a specific DNS server for the name resolution along with the type of DNS query to run for the test e.g MX or an A record query etc.

``` PowerShell
Describe 'multiple DNS servers' {

    Context 'Test for the DNS server1' {
        DnsHost cloud.local 10.116.2.250  {Should Not BeNullOrEmpty} # query the domain FQDN
        DnsHost mail.cloud.local 10.116.2.250 -Type MX {Should Not BeNullOrEmpty} # test the MX record
    }

    Context 'Test for the DNS server2' {
        DnsHost cloud.local 10.116.2.251 {Should Not BeNullOrEmpty}
        DnsHost mail.cloud.local 10.116.2.251 -Type MX {Should Not BeNullOrEmpty}
    }
}
```

Check active directory settings for existence of users, OUs, OU paths, systems 

Add tests for things such as email accounts deleted, check licenses, etc...
