
Executing commands on the command line takes a couple of seconds more when oh-my-git is enabled in a repository.
With oh-my-git enables running `time git st` 

```
real	0m1.837s
user	0m0.421s
sys	0m8.548s
```

And without oh-my-git on the same repo

```
real	0m1.473s
user	0m0.397s
sys	0m4.889s
```

Also just hitting enter on the cmd line it takes about 3 seconds for the prompt to release.
I tried in my mac terminal and iTerm2 and results were the same.

Any suggestions to fix this please.
Thank you.
I fear this repo has been abandoned... and it looks like this issue has been addressed in some previous pull requests (which have not been accepted or closed).  But the fix seems simple to me, so I'll risk my time by offering it again...  

My fix just involves doing a full reset, and then setting only the *foreground* color before emitting the last character.  I haven't run across any terminal emulators (in any color-enabled modes) where this doesn't work.  If I've missed some case(s) where this won't work, please share the specifics. 
Hi,
Is it possible to implement it in git bash for windows?
Most of the characters show up fine and it looks good-- however, the last character is missing/malformed:

![oh-my-git issue 2](https://user-images.githubusercontent.com/7458985/47960181-90c1bc80-dfc4-11e8-8ecf-f62026b09a1e.png)

Also I'm not sure what is up with the fancy "f" on the left.

I'm on Ubuntu 18.04, using the standard gnome terminal.

Git will complain if you call `git config` with `--local` switch outside a git repo. This check reverts back to default lookup (which will end up being global) if not inside a git repo.
the word standard misspelled in the README
The 'bash_prompt' function was not preserving the return code between
calls to it. If other PROMPT_COMMAND executions were to rely on the
return code - say, to change the value of a variable that would be
substituted into the PS1 value to indicate the return code - this
would be broken, causing such functions to break.

This change preserves the return code such that the subsequent prompt
command executions can take advantage of the value of the prior
executed commands return.
@arialdomartini could you please help  me set my oh-my-git 

**# Error**
After installing oh-my-git as per the link below.
[https://github.com/arialdomartini/oh-my-git/blob/master/README.md#install-the-patched-font](url)
My terminal always displays with below code, can you suggest me what I am doing worng?
```
%K{white}%F{black} %K{white}%F{black}  %K{white}%F{yellow}   %K{white}%F{red}   %K{white}%F{red}   %K{white}%F{red}   %K{white}%F{black}   %K{white}%F{black}   %K{white}%F{black}   %K{white}%F{red}   %K{white}%F{black}%K{white}%F{red}   %K{red}%F{white} %K{red}%F{black}%K{red}%F{black} --   --   %K{red}%F{black}(master  origin)  %K{red}%F{black}   %k%F{red}%k%f
%~ • 
```
![oh-my-git-issue](https://user-images.githubusercontent.com/16725432/40500931-654ba61a-5f54-11e8-9f7c-fa50b069e1ce.jpg)

Notes:
**Fedora:27**
I had zsh and oh-my-zsh installed prior and working fine and wanted to install oh-my-git and use oppa-lana-style.zsh-them.
[https://github.com/arialdomartini/oh-my-git/blob/master/README.md#install-the-patched-font](url)

I came across something weird:

I am on MacOSX High Sierra with its plain bash and iTerm2.

the weird thing is, I log in, I `cd` into a repo, nothing happens, then I manually `source ~/.bash_profile` and everything is working fine...

I've added echos here and there and everything is sauced correctly at login, but the prompt does not appear until I source a second time, does not matter from which directory...