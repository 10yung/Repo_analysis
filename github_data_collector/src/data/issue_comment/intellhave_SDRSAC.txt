Has someone already implemented this method using C++, Python or something like that and should share the code?

Thanks.
![image](https://user-images.githubusercontent.com/42090834/68656117-2bf05900-056c-11ea-97c7-d365bfa193cc.png)

Dear author, thank you very much for opening your code. I have some questions about  your paper's experiment, the time consumption of the algorithm is very low, but I use my own data set program is very time-consuming, and it takes about 380s to complete a matching， IT‘s much higher than yours. Although I reduced the number of iterations and increased the minimum error to 0.05, it still needs about 180s on the premise of ensuring the correct matching.So may i ask you is there any way to speed up the operation?
I check the SDRSAC.m file， and fond that maybe some problems when execute the plotPointClouds.m function. In your program, " plotPointClouds(B, bestR*M + bestT, 'b.','r.')" , the dimensions of "bestR*M" is (3,4500), while "bestT" is (3,1). And can't sum directly, I changed this part as follows:
    [row, col] = size(M);
    bestTrl = repmat(bestT, 1, col);
    plotPointClouds(B, bestR*M + bestTrl, 'b.','r.')
and works well! 
In [`solveSDP`](https://github.com/intellhave/SDRSAC/blob/master/solveSDP.m#L17) you set up the SDP solution as a `var_sdp` object, and then add a symmetric constraint.  According to [the SDPNAL+ docs](https://github.com/intellhave/SDRSAC/blob/master/solvers/SDPNAL%2Bv1.0/SDPNALplus-guide.pdf), it looks like you could have used `var_symm` for the definition of `Y`, in which case you can remove the symmetric constraint [here](https://github.com/intellhave/SDRSAC/blob/master/solveSDP.m#L22).  Is there something that I am missing here?

Thanks for the implementation, and I enjoyed your talk at CVPR this year!
Hello, when running the demo code ,the matlab tell me that"未定义与 'char' 类型的输入参数相对应的函数 'ccp_model'。". so I guess  there is no cpp_model function.