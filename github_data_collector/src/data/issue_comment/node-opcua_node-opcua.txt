<!--
IF YOU DON'T FILL OUT THE FOLLOWING INFORMATION WE MIGHT CLOSE YOUR ISSUE WITHOUT INVESTIGATING
-->

**I'm submitting a ...**  (check one with "x")


 - (x) bug report => search github for a similar issue or PR before submitting
 - ( ) feature request
 - ( ) support request => Please do not submit support request here, instead see use 
      - use [gitter](https://gitter.im/node-opcua/node-opcua) or [stackoverflow](https://stackoverflow.com/questions/tagged/node-opcua) for community support, or 
      - [contact Sterfive for commercial support](https://www.sterfive.com) (contact (@) sterfive.com )

**Current behavior**
In the browseFilterFunction the SessionContext is always undefined.

**Expected behavior**
The SessionContext is set.

**Minimal reproduction of the problem with instructions**
<!--
If the current behavior is a bug or you can illustrate your feature request better with an example, 
please provide the *STEPS TO REPRODUCE* and if possible a *MINIMAL DEMO* of the problem.
-->
Start Server
Connect with Client to Server.
Browse to Folder Test

<!--
Important !: Please also provide a self -contains source code of a node-opcua client and server that demonstrate the isssue
-->
gist:
```javascript
import * as opcua from "node-opcua";

const server = new opcua.OPCUAServer({
  port: 4841
});

interface MyAddOptions extends opcua.AddBaseNodeOptions {
  browseFilter?: (session: opcua.SessionContext) => boolean;
}

function browseFilter(context: opcua.SessionContext): boolean {
  if (context == null) {
    return false;
  }
  return true;
}

server
  .start()
  .then(() => {
    const addrSpace = server.engine.addressSpace;
    if (addrSpace === null) return;
    const namespace = addrSpace.getOwnNamespace();
    const options: MyAddOptions = {
      browseName: "Test",
      browseFilter: browseFilter
    };
    namespace.addFolder(addrSpace.rootFolder.objects, options);
  })
  .catch(reason => {
    console.error(reason);
  });
```  
**What is the motivation / use case for changing the behavior?**
The motiviation is to Hide some Nodes for some User

**Please tell us about your environment:**
<!-- Operating system, opcua server or client type, package manager,  equipment , vendor info -->

  * ( ) my request is related to node-opcua acting as a  OPCUA CLIENT 
  * (x)  my request is related to node-opcua acting as a OPCUA SERVER 


  * ( ) I have installed node-opcua from source ( using git clone)
  * ( x) I have installed node-opcua as a package ( using npm install )
  * ( ) I am using an application that uses node-opcua 
  
       - ( ) node-red
       - ( ) other : please specify 
        
  * Device: _____
  * OS version: _____
    
    - ( x ) Windows : version : WIN 10
    - ( ) Linux   : version : _________
    - ( ) MacOs   : version : _________
    - ( ) Raspbian: version : _________
    - ( ) Other   : specify :
     
    
* **node-opcua version:**  :  2.4.1

* **Node:** 
   `node --version` = 10.15.3



**I'm submitting a ...**

 - (x) bug report
 - ( ) feature request
 - (x) support request

**Current behavior**
Using the node-crawler, I cannot get the nodeClass of every node. I only get the nodeClass of the root node I'm crawling.

**Expected behavior**
I'd like to get every node's nodeClass. I'm not sure if this is a bug or if I'm just missing to pass any options to the crawler. What I'm doing is basically just:

```
const crawler = new NodeCrawler(mySession);
const nodeId = "ObjectsFolder";
crawler.read(nodeId, function (err, obj) {
  console.log(obj);
}
```
And it works, I'm able to crawl different servers (on a PLC, the public Milo example server and another one I wrote with Milo). But I don't get the nodeClasses...
Is there anything I'm missing or is this a bug?

My result currently looks like this:
```
{
    "browseName": "Objects",
    "nodeId": "ns=0;i=85",
    "nodeClass": "1",
    "organizes": [{
        "browseName": "DeviceSet",
        "nodeId": "ns=2;i=5001",
        "typeDefinition": "BaseObjectType",
	"organizes": [{
	    "browseName": "CODESYS Control Win V3 x64",
	    "nodeId": "ns=4;s=|plc|CODESYS Control Win V3 x64",
	    "organizes": [{
                ...
```

Thanks for any help in advance!


My apologies I tried this again and it is still throwing the error.

I can successfully start this sample server https://github.com/node-opcua/node-opcua/blob/v2.1.3/documentation/sample_server.js 

Most of this is new to me NPM, node.js etc.. so I might just be doing something stupid.

I'm submitting a ... (check one with "x")

(X) bug report => search github for a similar issue or PR before submitting
( ) feature request
( ) support request => Please do not submit support request here, instead see use
use gitter or stackoverflow for community support, or
contact Sterfive for commercial support (contact (@) sterfive.com )
Current behavior
Following this quick guide
https://github.com/node-opcua/node-opcua/blob/master/documentation/monitoring_home_temperature_with_a_raspberry.md

created directory homeserver

ran npm init (I accepted the defaults, don't know if I should do differently?)

I ran npm install node-opcua --unsafe-perms (to resolve cannot find module 'node-opcua')

created index.js with code from tutorial

ran node index.js

error TypeError: Assignment to constant variable.
at /home/pi/homeserver/index.js:10:15
at _fulfilled (/home/pi/homeserver/node_modules/q/q.js:854:54)
at self.promiseDispatch.done (/home/pi/homeserver/node_modules/q/q.js:883:30)
at Promise.promise.promiseDispatch (/home/pi/homeserver/node_modules/q/q.js:816:13)
at /home/pi/homeserver/node_modules/q/q.js:624:44
at runSingle (/home/pi/homeserver/node_modules/q/q.js:137:13)
at flush (/home/pi/homeserver/node_modules/q/q.js:125:13)
at _combinedTickCallback (internal/process/next_tick.js:132:7)
at process._tickCallback (internal/process/next_tick.js:181:9)

Expected behavior

Expose the temperature of the connected temperature sensor

I have tested cat w1_slave and am able to see the data.

Minimal reproduction of the problem with instructions

...

gist:

What is the motivation / use case for changing the behavior?

Please tell us about your environment:

( ) my request is related to node-opcua acting as a OPCUA CLIENT

(X) my request is related to node-opcua acting as a OPCUA SERVER

( ) I have installed node-opcua from source ( using git clone)

(X) I have installed node-opcua as a package ( using npm install )

( ) I am using an application that uses node-opcua

( ) node-red
( ) other : please specify
Device: _____

OS version: _____

( ) Windows : version : _________
( ) Linux : version : _________
( ) MacOs : version : _________
(X) Raspbian: version : _________
( ) Other : specify :
Description of the other OPCUA system I am trying to connect to:

Name:_________
Version:_________
Manufacturer/Software vendor:_________
link : https://
node-opcua version: :

Node:
node --version = v8.16.1
<!--
IF YOU DON'T FILL OUT THE FOLLOWING INFORMATION WE MIGHT CLOSE YOUR ISSUE WITHOUT INVESTIGATING
-->

**I'm submitting a ...**  (check one with "x")


 - (x) bug report => search github for a similar issue or PR before submitting
 - ( ) feature request
 - ( ) support request => Please do not submit support request here, instead see use 
      - use [gitter](https://gitter.im/node-opcua/node-opcua) or [stackoverflow](https://stackoverflow.com/questions/tagged/node-opcua) for community support, or 
      - [contact Sterfive for commercial support](https://www.sterfive.com) (contact (@) sterfive.com )

**Current behavior**
<!-- Describe how the bug manifests. -->
I am seeing these messages in my log. From reading the other issues people have this was fixed in a round of updates. I have the latest version of opcua but I still see them come up. It looks like as a result my SCADA server cannot read from the server. 

```
Server: closing SESSION  new DaClient Lib     because of timeout =  30000  has expired without a keep alive
channel =  ::ffff:192.168.12.10  port =  56592
14:37:53.062Z :opcua_server                  :1212   channel.sessionTokens ===
14:37:53.068Z :opcua_server                  :1347  ERROR: channel.channelId !== session.channelId 31 30
14:37:53.072Z :opcua_server                  :968   SERVER with secure connection: Nonee has already been used 0000000006000000060000000000000025004000740045003700280000000000
14:37:58.207Z :opcua_server                  :1212   channel.sessionTokens ===
14:37:58.212Z :opcua_server                  :1347  ERROR: channel.channelId !== session.channelId 32 30
Server: closing SESSION  new DaClient Lib     because of timeout =  30000  has expired without a keep alive
channel =  ::ffff:192.168.12.10  port =  56722
14:38:03.350Z :opcua_server                  :1212   channel.sessionTokens ===
14:38:03.360Z :opcua_server                  :1347  ERROR: channel.channelId !== session.channelId 33 32
14:38:03.363Z :opcua_server                  :968   SERVER with secure connection: Nonee has already been used 0000000006000000060000000000000025004000740045003700280000000000
```

**Expected behavior**
<!-- Describe what the behavior would be without the bug. -->
This is a reproduction of the the sample code with a couple things change and when I run the sample code it just works. 

**Minimal reproduction of the problem with instructions**
<!--
If the current behavior is a bug or you can illustrate your feature request better with an example, 
please provide the *STEPS TO REPRODUCE* and if possible a *MINIMAL DEMO* of the problem.
-->
  1. I just run the server and this comes up
  ...

<!--
Important !: Please also provide a self -contains source code of a node-opcua client and server that demonstrate the isssue
-->
gist:
``` javascript
/*global require,setInterval,console */
const opcua = require("node-opcua");

// Let's create an instance of OPCUAServer
const server = new opcua.OPCUAServer({
    port: 4334, // the port of the listening socket of the server
    resourcePath: "/UA/TabletServer", // this path will be added to the endpoint resource name
    buildInfo: {
        productName: "TabletServer",
        buildNumber: "7658",
        buildDate: new Date(2019, 12, 31)
    }
});

function post_initialize() {
    console.log("initialized");
    function construct_my_address_space(server) {

        const addressSpace = server.engine.addressSpace;
        const namespace = addressSpace.getOwnNamespace();

        // declare a new object
        const device = namespace.addObject({
            organizedBy: addressSpace.rootFolder.objects,
            browseName: "MyDevice"
        });

        // add some variables

        // My Test string variable
        let defaultStat = "TestStatus";

        namespace.addVariable({
            componentOf: device,
            nodeId: "ns=1;b=1101",
            browseName: "SS101Status",
            dataType: "String",

            value: {
                get: function () {
                    return new opcua.Variant({ dataType: opcua.DataType.String, value: defaultStat });
                },
                set: function (variant) {
                    defaultStat = variant.value;
                    return opcua.StatusCodes.Good;
                }
            }
        });

    }
    construct_my_address_space(server);
    server.start(function () {
        console.log("Server is now listening ... ( press CTRL+C to stop)");
        console.log("port ", server.endpoints[0].port);
        console.log("Build Number: ", server.endpoints[0].buildDate);
        const endpointUrl = server.endpoints[0].endpointDescriptions()[0].endpointUrl;
        console.log(" the primary server endpoint url is ", endpointUrl);
    });
}
server.initialize(post_initialize);
```

  
**What is the motivation / use case for changing the behavior?**
<!-- Describe the motivation or the concrete use case -->

**Please tell us about your environment:**
<!-- Operating system, opcua server or client type, package manager,  equipment , vendor info -->

  * ( ) my request is related to node-opcua acting as a  OPCUA CLIENT 
  * (x)  my request is related to node-opcua acting as a OPCUA SERVER 


  * ( ) I have installed node-opcua from source ( using git clone)
  * (x) I have installed node-opcua as a package ( using npm install )
  * ( ) I am using an application that uses node-opcua 
  
       - ( ) node-red
       - ( ) other : please specify 
        
  * Device: _____
  * OS version: _____
    
    - (x) Windows : version : Windows 10 for the server and Windows Server 2016 for reading
    - ( ) Linux   : version : _________
    - ( ) MacOs   : version : _________
    - ( ) Raspbian: version : _________
    - ( ) Other   : specify :
   
   * Description of the other OPCUA system I am trying to connect to:
   
     - Name: Indusoft 
     - Version: 7.1
     - Manufacturer/Software vendor:_________
     - link : https://
     
    
* **node-opcua version:**  : 2.4.1
<!-- provide the semver version number of node-opcua -->
<!-- Check which is the hash of the last commit from node-opcua that you have locally -->

* **Node:** 
   `node --version` = 12.13.1



I am looking for a sample node opcua client implementation which uses x.509 certs to connect to OPCUA server. Can anyone help me with sample code ? what are the important properties need to fill for x.509 in client options and create session case ? 

Appreciate all your help. 
<!--
IF YOU DON'T FILL OUT THE FOLLOWING INFORMATION WE MIGHT CLOSE YOUR ISSUE WITHOUT INVESTIGATING
-->

**I'm submitting a ...**  (check one with "x")


 - ( ) bug report => search github for a similar issue or PR before submitting
 - ( ) feature request
 - (x) support request => Please do not submit support request here, instead see use 
      - use [gitter](https://gitter.im/node-opcua/node-opcua) or [stackoverflow](https://stackoverflow.com/questions/tagged/node-opcua) for community support, or 
      - [contact Sterfive for commercial support](https://www.sterfive.com) (contact (@) sterfive.com )

**Current behavior**
<!-- Describe how the bug manifests. -->
I have a SCADA system which i am trying to update my tags from an outside application. How I picture this working is that I have a user press a button on a WPF app running on a tablet and it sends a curl request to a simple API with some parameters and have that update a value in a running opc ua server which our scada system will monitor and note changes to the value. 
  ...
  
**What is the motivation / use case for changing the behavior?**
<!-- Describe the motivation or the concrete use case -->
Using outside apps to change tag values within our SCADA system.

**Please tell us about your environment:**
<!-- Operating system, opcua server or client type, package manager,  equipment , vendor info -->

  * ( ) my request is related to node-opcua acting as a  OPCUA CLIENT 
  * (x)  my request is related to node-opcua acting as a OPCUA SERVER 


  * ( ) I have installed node-opcua from source ( using git clone)
  * (x) I have installed node-opcua as a package ( using npm install )
  * ( ) I am using an application that uses node-opcua 
  
       - ( ) node-red
       - ( ) other : please specify 
        
  * Device: _____
  * OS version: _____
    
    - (x) Windows : version : Windows 10/Server 2012 r2
    - ( ) Linux   : version : _________
    - ( ) MacOs   : version : _________
    - ( ) Raspbian: version : _________
    - ( ) Other   : specify :
     
    
* **node-opcua version:**  : 2.4.1
<!-- provide the semver version numero of node-opca -->
<!-- Check which is the hash of the last commit from node-opcua that you have locally -->

* **Node:** 
   `node --version` = 12.13.1



**I'm submitting a ...**  (check one with "x")


 - (x) bug report => search github for a similar issue or PR before submitting
 - ( ) feature request
 - ( ) support request => Please do not submit support request here, instead see use 
      - use [gitter](https://gitter.im/node-opcua/node-opcua) or [stackoverflow](https://stackoverflow.com/questions/tagged/node-opcua) for community support, or 
      - [contact Sterfive for commercial support](https://www.sterfive.com) (contact (@) sterfive.com )

**Current behavior**
I suspect the issue occurs when the S7-1500 device is downloaded to and initializes again. I get a message "recreate_session_and_reperform_transaction => Already in Progress" and my requests all error with "cannot recreate session". It has been in this state for over half of a day. This seems to occur after the error "publushEngine: invalid state" (I assume there is a typo and this should be publishEngine too). This has occurred on both my development machine and on a production server.

**Expected behavior**
The session is recreated.

**Minimal reproduction of the problem with instructions**
<!--
If the current behavior is a bug or you can illustrate your feature request better with an example, 
please provide the *STEPS TO REPRODUCE* and if possible a *MINIMAL DEMO* of the problem.
-->
  1. Download to S7-1500 PLC
  2. An error "publushEngine: invalid state" occurs
  3. Attempts to recreate session and it never succeeds

<!--
Important !: Please also provide a self -contains source code of a node-opcua client and server that demonstrate the isssue
-->
gist: Any client connected to the PLC should do

  
**What is the motivation / use case for changing the behavior?**
I need the session to recover to keep my application alive.

**Please tell us about your environment:**
<!-- Operating system, opcua server or client type, package manager,  equipment , vendor info -->

  * (x) my request is related to node-opcua acting as a  OPCUA CLIENT 
  * ( )  my request is related to node-opcua acting as a OPCUA SERVER 


  * ( ) I have installed node-opcua from source ( using git clone)
  * (x) I have installed node-opcua as a package ( using npm install )
  * ( ) I am using an application that uses node-opcua 
  
       - ( ) node-red
       - ( ) other : please specify 
        
  * Device: IPC547G
  * OS version:  Windows Server 2016 Standard with Hyper-V
    
    - ( ) Windows : version : _________
    - (x) Linux   : version : NixOS 19.09
    - ( ) MacOs   : version : _________
    - ( ) Raspbian: version : _________
    - ( ) Other   : specify :
   
   * Description of the other OPCUA system I am trying to connect to:
   
     - Name:S7-1500
     - Version:V2.5.2
     - Manufacturer/Software vendor:Siemens
     - link : https://new.siemens.com/global/en/products/automation/systems/industrial/plc/simatic-s7-1500.html
     
    
* **node-opcua version: 2.3.0
<!-- provide the semver version numero of node-opca -->
<!-- Check which is the hash of the last commit from node-opcua that you have locally -->

* **Node:** 
   `node --version` =10.15.1



I'm attempting to run this module on CentOS 7 however the server fails to start after installing from source as documented in the README file.

The `node packages/node-opcua-samples/bin/simple_server` command fails with the following message.

```
internal/modules/cjs/loader.js:895
    throw err;
    ^

Error: Cannot find module 'node-opcua'
Require stack:
- /usr/src/node-opcua/packages/node-opcua-samples/bin/simple_server.js
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:892:15)
    at Function.Module._load (internal/modules/cjs/loader.js:785:27)
    at Module.require (internal/modules/cjs/loader.js:956:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.<anonymous> (/usr/src/node-opcua/packages/node-opcua-samples/bin/simple_server.js:7:15)
    at Module._compile (internal/modules/cjs/loader.js:1063:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1103:10)
    at Module.load (internal/modules/cjs/loader.js:914:32)
    at Function.Module._load (internal/modules/cjs/loader.js:822:14)
    at Function.Module.runMain (internal/modules/cjs/loader.js:1143:12) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    '/usr/src/node-opcua/packages/node-opcua-samples/bin/simple_server.js'
  ]
}
```
I am not certain how to fix this, the module definitely does exist.
**I'm submitting a ...**  (check one with "x")


 - (x) bug report => search github for a similar issue or PR before submitting
 - ( ) feature request
 - ( ) support request => Please do not submit support request here, instead see use 
      - use [gitter](https://gitter.im/node-opcua/node-opcua) or [stackoverflow](https://stackoverflow.com/questions/tagged/node-opcua) for community support, or 
      - [contact Sterfive for commercial support](https://www.sterfive.com) (contact (@) sterfive.com )

**Current behavior**

`const obj = await crawler.read(nodeId);` causes the unhandled 


```
(node:13011) UnhandledPromiseRejectionWarning: Error
    at Object.assert (/home/mustafa/Desktop/Crawler/node_modules/node-opcua-assert/dist/index.js:10:21)
    at _fetch_elements (/home/mustafa/Desktop/Crawler/node_modules/node-opcua-client-crawler/dist/node_crawler.js:42:25)
    at NodeCrawler._resolve_deferred_readNode (/home/mustafa/Desktop/Crawler/node_modules/node-opcua-client-crawler/dist/node_crawler.js:604:42)
    at task4 (/home/mustafa/Desktop/Crawler/node_modules/node-opcua-client-crawler/dist/node_crawler.js:411:22)
    at /home/mustafa/Desktop/Crawler/node_modules/async/dist/async.js:2952:28
    at replenish (/home/mustafa/Desktop/Crawler/node_modules/async/dist/async.js:444:21)
    at /home/mustafa/Desktop/Crawler/node_modules/async/dist/async.js:449:13
    at eachOfLimit$1 (/home/mustafa/Desktop/Crawler/node_modules/async/dist/async.js:475:34)
    at awaitable(eachOfLimit$1) (/home/mustafa/Desktop/Crawler/node_modules/async/dist/async.js:208:32)
    at eachOfGeneric (/home/mustafa/Desktop/Crawler/node_modules/async/dist/async.js:510:16)
(node:13011) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:13011) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

**Minimal reproduction of the problem with instructions**
```
        const client = await opcua.OPCUAClient.create(
        {
            connectionStrategy: {
                maxRetry: 2,
                initialDelay: 2000,
                maxDelay: 10 * 1000
            },
            endpoint_must_exist: false
        });
        client.on("backoff", () => console.log("retrying connection"));


        await client.connect(endpointUrl);

        const session = await client.createSession();


        const NodeCrawler = opcua.NodeCrawler;
        console.log(NodeCrawler);

        var crawler = await new NodeCrawler(session);

        client.on("send_request", () => {
          console.log('send_request');
        });

        client.on("receive_response", () => {
          console.log('receive_response');
        });

        let t5 = Date.now();

        const obj = await crawler.read(nodeId);
        console.log(" Time        = ", (new Date()).getTime() - t5);
        console.log(" read        = ", crawler.readCounter);
        console.log(" browse      = ", crawler.browseCounter);
        console.log(" browseNext  = ", crawler.browseNextCounter);
        console.log(" transaction = ", crawler.transactionCounter);
        crawler.dispose();
````


**Please tell us about your environment:**
Ubuntu 18.04 gues OS running in Virtualbox (6.0) on Mac (10.14.6) host.

  * (x) my request is related to node-opcua acting as a  OPCUA CLIENT 
  * ( )  my request is related to node-opcua acting as a OPCUA SERVER 


  * ( ) I have installed node-opcua from source ( using git clone)
  * (x) I have installed node-opcua as a package ( using npm install )
  * ( ) I am using an application that uses node-opcua 
  
       - ( ) node-red
       - ( ) other : please specify 
        
  * Device: _____
  * OS version: _____
    
    - ( ) Windows : version : _________
    - (x) Linux   : version : Ubuntu 18.04
    - ( ) MacOs   : version : _________
    - ( ) Raspbian: version : _________
    - ( ) Other   : specify :
   
   * Description of the other OPCUA system I am trying to connect to:
   
     - Name: opcua-asyncio
     - Version: 0.6.1
     - Manufacturer/Software vendor:_________
     - link : https://github.com/FreeOpcUa/opcua-asyncio.git
     
    
* **node-opcua version:**  :
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/node-opcua/-/node-opcua-2.3.0.tgz",
      "integrity": "sha512-u5h1mk/NlokyOP1zEJfXiSl5qc6N633TIi/nXNVHDcJl5gosMLsCjrljl2s6RmGjWDiZXEGBB8H6U0x+CdUxog==",


* **Node:** 
   `node --version` = v12.13.0
The code is raising an error event which in my app is ending up setting _socket to null.
Therefore the code is unsafe.

This is not the most elegant way to fix this but it illustrates the problem.