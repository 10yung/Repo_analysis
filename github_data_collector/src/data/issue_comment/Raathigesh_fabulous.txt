The title says it all.
**Is your feature request related to a problem? Please describe.**
It would be nice to support the css literal from emotion.sh

**Describe the solution you'd like**
Using syntax:

```js

const styles = css`
	background: red;
`

```

**Additional context**
Similar to `styled.div` `css` works by creating a className for your styles.
Read more about emotion css here: https://emotion.sh/docs/css-prop

**Describe the bug**
When a file contains template literals that are not assigned to a variable, Fabulous fails to work with the following error:

```
TypeError: Cannot read property 'name' of undefined
	at TaggedTemplateExpression (raathigeshan.fabulous-0.10.0\out\extension\file-handlers\js.js:16:38)
```

**To Reproduce**
In our codebase, it is failing on styled-components interpolated templates like the following but looking at the file handler it will probably fail for any tagged template that isn't assigned to a variable:

```js
export const SearchCentering = styled.div`
  width: 100%;
  ${mediaMin.xxl`
  margin: 0 auto;
  max-width: 1200px;
  `};
`;
```

**Expected behavior**
Tagged templates that aren't defining a styled component should be ignored by Fabulous and the extension should still work.
The Readme of this project starts great, giving precise information, nicely illustrated.
But it ends with "You should see the sidebar controls become active" and stops there.
We can get a hint from the screenshot, but it is not really clear.
I suggest to add a section to describe what this extension is supposed to do, why we need it, how it can improve our work. ðŸ˜„ 
Thank you, I know stuff of this kind demands lot of work, that's why I do this suggestion, it can improve the number of people using it.
# Description
There are a number of cases where there are uncaught exceptions.  Example: if a file has invalid syntax, then parsing fails and an error is thrown.

Depending on where the error occurs, we should catch the error and either silently ignore, or log something to the output panel so the user can get optional feedback.
# Description
Right now, we have typescript coupled to Angular and javascript tied to StyledComponents.  We should combine the codebase and conditionally handle the parts where the logic needs to differ.

In addition, this should be refactored in a way where other file structures could be added.

This ticket is a result of this PR comment: https://github.com/Raathigesh/fabulous/pull/17#issuecomment-497659509

First i'm sorry for my English if it is very bad.

### 1. Config
- Need a config for default value for units (px,pt,rem,...).

### 2. Margin and Padding 
- If i enter 1 value to margin top or padding input css output is margin : 10 0 0 0. But in many cases we just margin top ( override old value). I have idea if user enter in top, right, bottom, left merge all to margin : 10 0 0 0 and if enter in top only generator margin-top. Padding same it. Or need a choice same border. If checked it generator for all sides

### 3. Background
- I think need background-image property ( one file select button ). On selected file generator path to file from root project.
- Need properties background-position, background-size etc..
- Background-color : Need color picker

### 4. Font
- Need a button color picker

### 5. Position
- Need input for position top , left , right , bottom.

### 6. Border
- border-color : Need color picker
**Describe the bug**
Display grid not showing under Display properties. Other grid properties should be shown as well, e.g., background color, order.

**To Reproduce**
Open style.css, toggle on Fabulous, and place cursor into either css rule: 

#test.parent { 
	display: grid;
	grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
	grid-template-rows: 1fr 1fr 1fr 1fr 1fr;
	grid-column-gap: 10px;
	grid-row-gap: 10px;
}

<...>

.div3 {
	grid-area: 1 / 1 / 4 / 5;
	background: red;
	height: 50vh;
	order: 2;
}

**Expected behavior**
Under Display, should find Grid next to or before Flex. Background properties & additional grid properties should display such as color, order, etc.

**Additional context**

If it's possible to eventually extend support to Sass and SCSS well, that would just make this even more amazing. 
Nice work, it's really fabulous!

We are missing top,left,bottom,right when position absolute/relative/fixed etc.

select Position then you need to add the position.

