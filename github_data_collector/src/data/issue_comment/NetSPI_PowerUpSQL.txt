Add Get-SQLFunction
These three system databases require cross-database ownership chaining to be turned on.

https://github.com/NetSPI/PowerUpSQL/issues/50
`Invoke-SQLAudit` flags false positives for "Excessive Privilege - Database Ownership Chaining" for the following databases
- master
- tempdb
- msdb

According to [https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-database-transact-sql-set-options?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-database-transact-sql-set-options?view=sql-server-2017), the DB_CHAINING option cannot be set on the master, model, and tempdb system databases.

[Another reference here](https://www.mssqltips.com/sqlservertip/1782/understanding-cross-database-ownership-chaining-in-sql-server/) which says these three system databases require cross-database ownership chaining to be turned on. 



add challenge option to Invoke-SQLUncPathInjection so custom static challenge can be set.
Large queries currently timeout even with the -timeout flag set, because you are missing the following line in the get-sqlquery function.

$Command.CommandTimeout=$TimeOut
On cases where there are multiple credentials (i.e. SQLEXPRESS) it will fail.
Fixed the issue by iteration.

Also mentioned in Issue#42
https://github.com/NetSPI/PowerUpSQL/issues/42
It appears that when running Get-SQLServerLoginDefaultPw, errors arise in cases where instances that are found that have multiple sets of credentials that need to be tried. For instance. SQLEXPRESS instances have four sets of credentials to try. The issue is that these sets of values come out of $TblResultsTemp.username and $TblResultsTemp.password as arrays and then are assigned to $CurrentUsername and $CurrentPassword, respectively. The $CurrentUsername and $CurrentPassword variables are then used as strings even though they are actually arrays at this point.

The fix to this is just to unroll the values and test them pairwise one at a time. I have a quick fix for this and will try to get a PR done if nobody else hops on it first.

Thanks!
Hi there,

When trying to import PowerUpSQL into a powershell -version 2 session, the user receives the following message:
```
ipmo 'E:\Pentest Tools\PowerUpSQL-master\PowerUpSQL.ps1'
- : You must provide a value expression on the right-hand side of the '-' operator.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : ExpectedValueExpression
```

I'll have a look at working out the exact error line, but first inspection seems to be PS interpreting a '-' as a mathematical symbol rather than a hyphen.

Thanks :)
when calling `Invoke-SQLImpersonateService -Verbose -Instance  [Instance-Name]` on windows 10 I get the above error. Looks like Caldera had this issue as well and had a pretty good fix for it: https://github.com/mitre/caldera/issues/38
Replaces the usage of `Create-` with `New-` in cmdlets, the approved equivalent.

Note that there are still two internal functions (`Enum-AllTokens` and `Free-AllTokens`) which use unapproved verbs - these don't give errors, on import, though.

Fixes #30.