same issue as https://github.com/neovim/neovim/issues/1592

as the NOTE of neovim's job saied:

```
  Note: Buffered stdout/stderr data which has not been flushed by the sender
  will not trigger the on_stdout/on_stderr callback (but if the process
  ends, the on_exit callback will be invoked).
        For example, "ruby -e" buffers output, so small strings will be
        buffered unless "auto-flushing" ($stdout.sync=true) is enabled. >
          function! Receive(job_id, data, event)
            echom printf('%s: %s',a:event,string(a:data))
          endfunction
          call jobstart(['ruby', '-e',
            \ '$stdout.sync = true; 5.times do sleep 1 and puts "Hello Ruby!" end'],
            \ {'on_stdout': 'Receive'})
```

how about enable autoflush in io?



Is there a websocket client ?
Any suggestions or advice for this? The bindings section in docs is pretty empty..

Lua has extremely good bindings for Rust so I thought maybe Io should too?

```
Io> 0x12345678 asHex
==> 12345678
Io> 0x1234567890 asHex
==> 34567890
```
when literal integer more than 4 bytes, the high bits will be truncated (e.g. the `12` of `0x1234567890`), this problem does still exist in latest release (2017.09.06 )

The same error is "  __attribute_used__ = { 0x7ff8000000000000 };"
**I used gcc 7.3.0 cmake 3.12.0.**
E:/msys64/home/heche/io/libs/iovm/source/IoNumber.h:27:2: error: expected '=',  ,', ';', 'asm' or '__attribute__' before '__attribute_used__'
  __attribute_used__ = { 0x7ff8000000000000 };
  ^~~~~~~~~~~~~~~~~~
In file included from E:/msys64/home/heche/io/libs/iovm/source/IoBlock.c:14:0:
E:/msys64/home/heche/io/libs/iovm/source/IoNumber.h:27:2: error: expected '=',  ,', ';', 'asm' or '__attribute__' before '__attribute_used__'
  __attribute_used__ = { 0x7ff8000000000000 };
  ^~~~~~~~~~~~~~~~~~
In file included from E:/msys64/home/heche/io/libs/iovm/source/IoCoroutine.c:14:0:
E:/msys64/home/heche/io/libs/iovm/source/IoNumber.h:27:2: error: expected '=',  ,', ';', 'asm' or '__attribute__' before '__attribute_used__'
  __attribute_used__ = { 0x7ff8000000000000 };
  ^~~~~~~~~~~~~~~~~~
In file included from E:/msys64/home/heche/io/libs/iovm/source/IoCollector.c:27:0:
E:/msys64/home/heche/io/libs/iovm/source/IoNumber.h:27:2: error: expected '=',  ,', ';', 'asm' or '__attribute__' before '__attribute_used__'
  __attribute_used__ = { 0x7ff8000000000000 };
  ^~~~~~~~~~~~~~~~~~
In file included from E:/msys64/home/heche/io/libs/iovm/source/IoCompiler.c:10: :
E:/msys64/home/heche/io/libs/iovm/source/IoNumber.h:27:2: error: expected '=',  ,', ';', 'asm' or '__attribute__' before '__attribute_used__'
  __attribute_used__ = { 0x7ff8000000000000 };
  ^~~~~~~~~~~~~~~~~~
In file included from E:/msys64/home/heche/io/libs/iovm/source/IoDate.c:13:0:
E:/msys64/home/heche/io/libs/iovm/source/IoNumber.h:27:2: error: expected '=',  ,', ';', 'asm' or '__attribute__' before '__attribute_used__'
  __attribute_used__ = { 0x7ff8000000000000 };
  ^~~~~~~~~~~~~~~~~~

In the section "[Defining Objects with the do() method](http://iolanguage.com/tutorial.html)", the code snippet fails when pasting into Terminal (Ubuntu 17.04, bash 4.4.19), resulting in only `name` and `setName` being defined:
```
Contact := Object clone do( 
  name ::= nil 
  address ::= nil 
  city ::= nil 
  fullAddress := method(list(name, address, city) join("\n")) 
)
```

This is because of the bare value `nil` (the same failure occurs for bare integer values). This works though:
```
Contact := Object clone do( 
  (name ::= nil) 
  (address ::= nil)
  (city ::= nil)
  ( fullAddress := method(list(name, address, city) join("\n")) )
)
```
Hey all!

First of all, this is a super cool project. I've enjoyed learning about and understanding this language. But since you guys came out with Eerie and moved all the addons out of the main repo, there is absolutely no documentation for how to install them. The documentation on the guide on the main website (http://iolanguage.org/guide/guide.html#Introduction-Installing) says to use the builtin Makefile which no longer exists. The Eerie readme briefly mentions installing packages and the Io readme doesn't mention it at all. Hopefully, the website could be updated to list this information correctly. I would be open to helping with documentation if I was pointed in the right direction.
I would greatly appreciate it if support for libreadline could be added to io interface, so that users can edit input with arrow keys, just like that in Python, bash, and many more others.
It would be simpler to understand the state of a release with the semantic versioning instead of the current one (does it has breaking changes? new features? or is it a bugfix release?).
Hi,

while I was working on PyParsing port for Io, I hit a problem with assignment operators, namely that they require their left operand to be a simple name. This is enforced during "operator shuffling" and is implemented in `IoMessage_opShuffle.c`.

After some wrangling with the implementation, I managed to create a patch. I opened a PR with it here: https://github.com/stevedekorte/io/pull/394/

Additionally, I wrote a blog post about the whole thing, posted here: https://klibert.pl/posts/adding_destructuring_bind_to_io.html - I plan to post it to news.ycombinator.com and maybe some other sites next week, and I'd appreciate any hints on how to make the post - and, of course, the PR - better. 

TL;DR: my patch makes this Io code possible and working:

    Object destructure := method(
      # target [a, b] <- list(9,8) becomes: target a := 9; target b := 8
      msg := call argAt(0)
      lst := call evalArgAt(1)
      target := call target
      msg arguments foreach(i, x,
          target setSlot(x name, lst at(i))
      )
      target
    )
    # inform the parser about our new operator
    OperatorTable addAssignOperator("<-", "destructure")


    o := Object clone
    o [wa, wb, x] <- list(3, 123)
    o println
    # prints:
    #  Object_0x19bcb60:
    #  wa               = 3
    #  wb               = 123
    #  x                = nil