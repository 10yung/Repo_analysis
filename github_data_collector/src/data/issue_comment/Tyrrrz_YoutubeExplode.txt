It seems there is something wrong, please try to get the response from Empty response from GetVideoMediaStreamInfosAsync and let me know if it's working with you. Thanks.
Hello. Thanks for your work. I was wondering how do you download the url from youtube in asp.net / Blazor? I got it all working where I got the url and can watch the video from the browser but I can not download it unless I open the link in the browser. its loads the standard html5 player and from their I can click download. Is there a way that I can download from YouTubeExplode class? I searched around and could not find anything. Looks like this works for Desktop apps and UWP apps but not for the web. Thank you.
Hi,

Often times when I use this line to get a Youtube video's audio, I get an exception. This used to never happen, now its 3/4ths of the time:
`MemoryStream audioData = this.Tube.GetAudioAsync(track.VideoId).Result`

System.ArgumentNullException, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e:
Help link: 
Error code: -2147467261
Message: Value cannot be null. (Parameter 'info')
Source: YoutubeExplode
Stack trace: 
   at YoutubeExplode.Internal.Guards.GuardNotNull[T](T o, String argName)
   at YoutubeExplode.YoutubeClient.DownloadMediaStreamAsync(MediaStreamInfo info, Stream output, IProgress`1 progress, CancellationToken cancellationToken)
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()

Any ideas?

Thanks!
I would like to load more videos from search as needed. For example I would like to load 1 page and when user wants to see more videos for that same search term then I can load the second page and so on. I looked at the source code and I can see that the function = SearchVideosAsync always starts on page 1. Is there a way to fix this? Maybe Im missing something? Would be great to have a loadMore() for the search term. Thank you. 
Since 2017, YoutubeExplode has been targeting .NET Standard 1.1 in addition to other frameworks. This has now become a hindrance as the project can't depend on many other libraries which have moved on from .NET Standard 1.1 a long time ago.

The suggestion is to drop .NET Std 1.1 altogether or replace it with .NET Std 1.6.

Please leave a reaction with your vote:

- üëç = drop .NET Std 1.1
- üëé = keep .NET Std 1.1 (and explain in the comments why you need it)
- üòï = drop .NET Std 1.1 and add .NET Std 1.6 target (and explain in the comments why you need it)
- üëÄ = I don't care
When I ask any questions, the following error returns:
Newtonsoft.Json.JsonReaderException: Unexpected character encountered while parsing value: <. Path '', line 0, position 0.
at Newtonsoft.Json.JsonTextReader.ParseValue()
at Newtonsoft.Json.Linq.JToken.ReadFrom(JsonReader reader, JsonLoadSettings settings)
at Newtonsoft.Json.Linq.JToken.Parse(String json, JsonLoadSettings settings)
at YoutubeExplode.YoutubeClient.GetSearchResultsJsonAsync(String query, Int32 page)
at YoutubeExplode.YoutubeClient.SearchVideosAsync(String query, Int32 maxPages)
Youtube sends word timing data but It's not supported in the lib

Example structure 
```
<p t="0" d="4049" w="1">
<s ac="224">Sacha</s>
<s t="420" ac="252"> Baron</s>
<s t="539" ac="252"> Cohen's</s>
<s t="1050" ac="217"> new</s>
<s t="1680" ac="234"> show</s>
<s t="1920" ac="200"> who</s>
<s t="2220" ac="201"> is</s>
</p>
```

I can only get 't', 'd' and the words, other data isn't available
Both the mobile version and the web version have search options. But in this library, I only see "query".  How to apply date and order? There are other conditions I can live without, but date and order are kind of crucial for search.

![image](https://user-images.githubusercontent.com/10900489/64962189-f6afed80-d8d1-11e9-8c6d-45b996285e84.png)

it seem issue from youtube limit rate, i have same issue
"message":"Response status code does not indicate success: 429 (unknown)."
although one request only
Hi Alexey,

I have encountered very poor performance on mobile devices when awaiting the async methods GetVideoAsync and GetVideoMediaStreamInfosAsync. I have not tested any other async methods.

To be able to track performance I have created a very basic benchmark in Xamarin.Forms(Android) and have already provided benchmark results for phones of different performance levels. 

The benchmark calls await GetVideoAsync() and in a different run GetVideoMediaStreamInfosAsync() on a collection of test Youtube-Id-s. 

This collection is the same 10 piece collection, the YoutubeExplode.Test project uses. 

Compiled APK, results and code can be found below:
[https://github.com/j4ni/YoutubeExplodeXamarinBenchmark/blob/master/README.md](https://github.com/j4ni/YoutubeExplodeXamarinBenchmark/blob/master/README.md)


Regards
Janos




