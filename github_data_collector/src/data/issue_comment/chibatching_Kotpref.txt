As of Kotlin 1.3.60, inline property delegation functions are going to be optimized heavily. https://youtrack.jetbrains.com/issue/KT-14513

This PR breaks API for custom delegates. Other ways:
* rework API and stop implementing `ReadWriteProperty`, or
* save API, implement KProperty, override only `name` and pass instances to abstract methods of `AbstractPref`
This is a basic implementation to add this feature: https://github.com/chibatching/Kotpref/issues/154

Currently strings and booleans are supported.

**Changes that influence existing code:**

* `KotprefModel - kotprefMode` made public
* `StringPref` and `BooleanPref` made public

Currently I use a little bit of reflection, this code is all placed inside the `PreferenceUtil` class. I think, in a real world example it does not matter though for the sake of speed, but it must be considered in case of proguard usage if this solution is used.

Let me know if you have some feedback on this.
How about an extra module to create a preference screen for a `KotprefModel`? Would be a very useful addition.

I've done smoething like this for my own `KotprefModule`, could share the code with you so that you could derive a generic solution for this. Let me know if you're interested

As of now, there is no support for versioning of KotprefModel. This is useful in some cases when someone wants to remove a key on version update, or clear the complete model itself.

This could be provided by having a version number in KotprefModel and calling an abstract function `onVersionUpdate` whenever the version number is increased.
Hello again :)
What about supporting pref values, which could be presisted into String by custom converter?
```
object AppState { // client code
    val user by customPref<User?>(default = null, converter = UserConverter)
}

interface PrefConverter<T> { // library code
    fun fromPref(str: String): T
    fun toPref(t: T): String
}

object UserConverter : PrefConverter<User> { // client code
    private val gson = Gson()
    override fun fromPref(str: String) = gson.fromJson(str, User::class.java)
    override fun toPref(t: T) = gson.toJson(t)
}
```
Many ORMs (Hibernate, GreenDAO, ORMLite, ObjectBox, etc) do this for object's fields, so we can borrow some architectural solutions from them.