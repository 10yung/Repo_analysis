**Jetty version**
9.4.26

**Description**
Would be great to have the thread pool behavior documented so that configurations with too few threads, or custom thread pools, or bounded queues that cause Jetty to misbehave are outlined and therefore avoided by users.

Include how ThreadPoolBudget works and how various components could steal threads from the pool.



**Jetty version**

9.4.6 -> 9.4.25

**Java version**

various flavours of jdk8 (oracle, opendjk)

**OS type/version**

Windows and Linux

**Description**

When using Jetty with a `ServerConnector` created without specifying the number of acceptors and selectors Jetty does not process any incoming requests.

This has been observed reliably on a `c5.4xlarge` in AWS.

see https://github.com/jenkinsci/jenkins-test-harness/pull/193 for an example.

The symptom of this is that Jetty starts and is listening (as shown by `netstat`) but any requests just timeout.

Note: the versions affected range is a tad unreliable.  The code works with `jetty-9.4.5.v20170502` and fails with later versions from maven central - but recompiling later jetty versions from a tag with jdk8 appears to resolve the issue (for an unknown reason) - the running JVM is the same in all cases. So I do not believe that code diff between `jetty-9.4.5.v2017050` and `jetty-9.4.5.v20180619` is of any use in order to bisect this issue.




**Jetty version**
9.4.20

**Java version**
1.8

**Question**
I have been trying out the QoSFilter for the purpose of restricting the number of requests that can be served at a time for a single endpoint, so the rest of our API isn't impacted under heavy load of that endpoint in particular. However, I am running into some difficulties when testing that it is working as expected.

As I understand it, when the max request limit is reached, any new requests get suspended and queued by priority. When an active request finishes, the next highest priority queued request can be resumed as normal, and passed along the filter chain. If the period of suspension finishes before the request can be processed, the request is rejected as unavailable.

With this in mind, I have tried testing this by making a number of requests on different threads so I can verify a response of unavailability. In testing, I set the following parameters:
`maxRequests`: 1
`suspendMs`: 1
`waitMs`: 1
I can verify that these values are set on the QoS filter correctly by logging them when the request hits the filter. Under these conditions, I would expect quite quickly to see requests get rejected. However, this is not the case. Through logging I can see that requests matching the path hit the filter and that they are getting suspended, but they never seem to get rejected/resumed/accepted after that. Interestingly, the requests do still hit the endpoint despite never being `accepted` and passing down the filter chain. The requests that do hit the endpoint do not pass through any filters beyond the QoSFilter.

An even more contrived example is when I set the `maxRequests` to 0. My expectation would be that no requests can ever reach my endpoint on the path specified, but the behaviour is the same as described above.

So I guess my question is am I overlooking some part of the configuration, or is my understanding of how it _should_ work incorrect? I would be interested in knowing how other people are testing that this filter is working as expected.

Thanks in advance


Updated old keystores to new PKCS12 keystores.
Removed unused keystores and truststores.

Signed-off-by: Simone Bordet <simone.bordet@gmail.com>

Fixes #2643
Close #4361 

Update to jasper version for jetty-10.
Upgrade jasper.

Closes #4360
**Issue #4475**

`MessageInputStream` now takes a session and uses suspend resume so that we only read the next frame if we have consumed all the data from the previous frame one or we exit from onMessage so all the bytes until the next message are discarded.
**Jetty version** 9.3.27.v20190418

**Java version** 8u121

**Description** 
The The Central Maven Repository (https://blog.sonatype.com/central-repository-moving-to-https) is updating to https and when pulling and building jetty from: (https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/9.3.27.v20190418/jetty-distribution-9.3.27.v20190418.zip) the ALPN module pulls from `http://central ` which then fails. The update URL should be https://repo1.


removed stopTimeout from all abstractLifeCycles.  It is on Graceful.LifeCycle, which is only implemented by components that can start a graceful shutdown (eg Server, ContextHandler and QueuedThreadPool)

Signed-off-by: Greg Wilkins <gregw@webtide.com>
**Jetty version**
jetty-9.4.25.v20191220

**Java version**
1.8.0_112

**OS type/version**
Ubuntu 18.04.3 LTS

**Description**
JSR 356 WebSocket's MessageHandler's JavaDoc states _"Each web socket session uses no more than one thread at a time to call its MessageHandlers. This means that, provided each message handler instance is used to handle messages for one web socket session, at most one thread at a time can be calling any of its methods."_

This has also held for everything I've tried as long as the registered listener is a Whole\<String\>. However, since I'm parsing JSON using Jackson, it hit me that I could as well use a Whole\<Reader\> and feed that directly into the Jackson ObjectReader. All of a sudden, I started to get protocol errors from my library. It depends on a HELLO message, containing auth, being sent before any other.

From the logs, it seems that with Whole\<Reader\>, two threads are delivering messages concurrently - and they are even sometimes coming in the wrong order, which is what triggers the failure.

**This is a set of log lines showing concurrent processing of messages**, but at least in the right order (HELLO before SEND):
`00:42:07.573 [qtp833240229-150] INFO  c.s.m.w.impl.MatsSocketSession - WebSocket received message [org.eclipse.jetty.websocket.common.message.MessageReader@106ebd8d] on MatsSocketSessionId [null], WebSocket SessionId:3, this:MatsSocketSession@3cdf2ae9  {}
00:42:07.573 [qtp833240229-151] INFO  c.s.m.w.impl.MatsSocketSession - WebSocket received message [org.eclipse.jetty.websocket.common.message.MessageReader@2dd4f197] on MatsSocketSessionId [null], WebSocket SessionId:3, this:MatsSocketSession@3cdf2ae9  {}
00:42:07.573 [qtp833240229-150] INFO  c.s.m.w.impl.MatsSocketSession - Messages: [[HELLO:NEW]->null,tid:MatsSocket_start_mJrl0b,cid:GImeQ9akra]  {}
00:42:07.573 [qtp833240229-150] INFO  c.s.m.w.MatsTestWebsocketServer - Resolving Authorization header to principal for header [DummyAuth:1578958947562].  {}
00:42:07.573 [qtp833240229-150] INFO  c.s.m.w.impl.MatsSocketSession - MatsSocket HELLO!  {matssocket.type=HELLO, matssocket.subType=NEW}
00:42:07.573 [qtp833240229-151] INFO  c.s.m.w.impl.MatsSocketSession - Messages: [[SEND]->Test.single,tid:SEND_3J3yyp,cid:null]  {}
00:42:07.573 [qtp833240229-151] INFO  c.s.m.w.impl.MatsSocketSession -   \- SEND to:[Test.single], reply:[null], msg:[{}].  {matssocket.type=SEND}`

**Here's a different set where they come both concurrent and in the wrong order** (SEND before HELLO), thus the SEND is triggering close of socket, even while the concurrent HELLO is being processed.
`00:42:07.619 [qtp349259569-144] INFO  c.s.m.w.impl.MatsSocketSession - WebSocket received message [org.eclipse.jetty.websocket.common.message.MessageReader@13d88ad8] on MatsSocketSessionId [null], WebSocket SessionId:4, this:MatsSocketSession@f5142d7  {}
00:42:07.619 [qtp349259569-99] INFO  c.s.m.w.impl.MatsSocketSession - WebSocket received message [org.eclipse.jetty.websocket.common.message.MessageReader@4ad307b0] on MatsSocketSessionId [null], WebSocket SessionId:4, this:MatsSocketSession@f5142d7  {}
00:42:07.620 [qtp349259569-99] INFO  c.s.m.w.impl.MatsSocketSession - Messages: [[SEND]->Test.single,tid:SEND_3nj9E9,cid:null]  {}
00:42:07.620 [qtp349259569-144] INFO  c.s.m.w.impl.MatsSocketSession - Messages: [[HELLO:NEW]->null,tid:MatsSocket_start_OCjlh2,cid:MFSqZtWVXL]  {}
00:42:07.620 [qtp349259569-99] ERROR c.s.m.w.impl.MatsSocketSession - We have not got Authorization header!  {}
00:42:07.620 [qtp349259569-144] INFO  c.s.m.w.MatsTestWebsocketServer - Resolving Authorization header to principal for header [DummyAuth:1578958947613].  {}
00:42:07.620 [qtp349259569-99] INFO  c.s.m.w.impl.DefaultMatsSocketServer - Closing WebSocket SessionId [4]: code: [VIOLATED_POLICY], reason:[Missing Authorization header]  {}
00:42:07.620 [qtp349259569-144] INFO  c.s.m.w.impl.MatsSocketSession - MatsSocket HELLO!  {matssocket.type=HELLO, matssocket.subType=NEW}`

**By literally only changing Whole\<Reader\> to Whole\<String\>** and also doing Reader->String in the onMessage method, I get these lines for the same test - notice how it is a) in order, b) the first message is finished before the next comes in, and c) it is even the same thread that does the processing for those two messages.
`01:01:57.205 [qtp1068945248-79] INFO  c.s.m.w.impl.MatsSocketSession - WebSocket received message [[{"t":"HELLO","clv":"MatsSocket.js,v0.8.9; User-Agent: Unknown","ts":1578960117203,"an":"TestApp","av":"1.2.3","auth":"DummyAuth:1578960137196","cid":"WTvoxdiO8Y","tid":"MatsSocket_start_mKnhFA","st":"NEW"}]] on MatsSocketSessionId [null], WebSocket SessionId:4, this:MatsSocketSession@3185190d  {}
01:01:57.205 [qtp1068945248-79] INFO  c.s.m.w.impl.MatsSocketSession - Messages: [[HELLO:NEW]->null,tid:MatsSocket_start_mKnhFA,cid:WTvoxdiO8Y]  {}
01:01:57.205 [qtp1068945248-79] INFO  c.s.m.w.MatsTestWebsocketServer - Resolving Authorization header to principal for header [DummyAuth:1578960137196].  {}
01:01:57.205 [qtp1068945248-79] INFO  c.s.m.w.impl.MatsSocketSession - MatsSocket HELLO!  {matssocket.type=HELLO, matssocket.subType=NEW}
01:01:57.223 [qtp1068945248-79] INFO  c.s.m.w.impl.MatsSocketSession - WebSocket received message [[{"eid":"Test.single","tid":"SEND_g1BBep","msg":{},"t":"SEND","cmcts":1578960117196,"cmseq":0}]] on MatsSocketSessionId [M5Q5oSpeow25hjY0], WebSocket SessionId:4, this:MatsSocketSession@3185190d  {matssocket.principal=Mr. Dummy Auth, matssocket.sessionId=M5Q5oSpeow25hjY0}
01:01:57.223 [qtp1068945248-79] INFO  c.s.m.w.impl.MatsSocketSession - Messages: [[SEND]->Test.single,tid:SEND_g1BBep,cid:null]  {matssocket.principal=Mr. Dummy Auth, matssocket.sessionId=M5Q5oSpeow25hjY0}
01:01:57.223 [qtp1068945248-79] INFO  c.s.m.w.impl.MatsSocketSession -   \- SEND to:[Test.single], reply:[null], msg:[{}].  {matssocket.principal=Mr. Dummy Auth, matssocket.sessionId=M5Q5oSpeow25hjY0, matssocket.type=SEND}`