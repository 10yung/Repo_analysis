In this commit: https://github.com/2muchcoffeecom/ngx-restangular/commit/67871acc4317927757339c7059870df91f53e6d6 ngx-restangular was changed from using `HttpClient`'s `request` method to the `handle` method of `HttpBackend` which bypasses the ability to use Angular's HTTP interceptors.

I looked around in issues, but didn't see a reason why this was done.

Unfortunately, for us, ngx-restangular's own interceptors aren't good enough for our use case, as they don't intercept every request (i.e. anything made with `allUrl` or `oneUrl`) and you can't abort the request (i.e. in the event that you want to return a cached response).  Plus, extra config is necessary in order to take advantage of other Angular modules that do provide Angular interceptors (like the loading bar plugin that's mentioned in #144).

I forked the repo and just replaced a couple instances of `HttpBackend` and changed the `handle` method to `request` and plugged the built files into an app that we're migrating to ngx-restangular from restangular, and all seems to function the same, except now we can use native Angular interceptors (ngx-restangular interceptors still work though), and can just plug in the loading bar mentioned above without having to add custom code since all requests that ngx-restangular makes are going through `HttpClient` now.

Here's the fork: https://github.com/jaydiablo/ngx-restangular 
And the specific commit where I've changed back to `HttpClient`: https://github.com/jaydiablo/ngx-restangular/commit/9c09c3edb20224e5dee3159de062bdafda326915

This has the ability to fix #144, #95, #182 and perhaps others.

That said, I'm not sure why this support was removed (when both Angular interceptors and ngx-restangular interceptors appear to work fine) so just wanted to get some clarification on that before proposing the change from my fork as a PR.

Also, is there any sort of test suite? I've tested in our app, but that probably doesn't touch all of ngx-restangular's surface area. I see there's some karma config, but no specs. Is the "demo" app the best way to test changes?

Thanks!
I noticed on Snyk (https://snyk.io) that this project pulls in `@types/lodash` as a non-dev dependency.

https://github.com/2muchcoffeecom/ngx-restangular/blob/master/projects/ngx-restangular/package.json#L49

This should be moved to the `devDependencies` section right?
We had an issue where we were using lodash 3.x and were getting tricky to debug errors.

>ERROR TypeError: “Object(...) is not a function”

As a long shot, we upgraded to lodash 4.x and that fixed the error.

It would be nice if `lodash` (and Angular for that matter) were added to the dependencies of this project, with the specific versions that are supported (at least the minimum versions), i.e. `"lodash": ">=4.0.0",`.

Or, at the very least, mention that at least lodash 4.x is required in the README (https://github.com/2muchcoffeecom/ngx-restangular#dependencies). :)

Thanks!
If you have HTTP Interceptors from Angular, https://angular.io/api/common/http/HttpInterceptor, then this will be ignored from this ngx-restangular.
So it would be nice if someone could integrate this.

    src/app/app.module.ts

```
export function RestangularConfigFactory(RestangularProvider) {
  RestangularProvider.setBaseUrl(environment.url);
  RestangularProvider.addFullRequestInterceptor(AuthInterceptor); // <- Not working!
}

@NgModule({
  imports: [
    RestangularModule.forRoot(RestangularConfigFactory),
    HttpClientModule,
  ],
  providers: [
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true }
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}
```

Thanks in Advance!
When i run the Following Command i get this error Message

`> ngcc --properties es2015 browser module main --first-only --create-ivy-entry-points
`
```
Warning: Entry point 'ngx-restangular' contains deep imports into 'C:/Projekte//node_modules/core-js/features/object'. This is probably not a problem, but may cause the compilation 
of entry points to be out of order.
```
Is there any type definition file for this library? I think this is insanely necessary, since this is an Angular library and given that Angular promotes using typescript, i think this is needed.
With angular 8 Ivy it prevents production build since it contains deep import.

Getting below error and build fails.
`WARNING in Entry point 'ngx-restangular' contains deep imports into 'E:/test_app/node_modules/core-js/features/object'`
I have angular 8 project. 

When i tried to add `ngx-restangular: 5.0.0` it's giving me below error.

`ERROR in ./node_modules/ngx-restangular/fesm2015/ngx-restangular.js
Module not found: Error: Can't resolve 'core-js/features/object'`
I need to use in my application a custom header in response to a getList (header is totalElements).
It is correctly set by the backend, but of course in restangular the headers map only cointained the "default allowed" ones. For that reason I added Access-Control-Exposed-Headers. It is correctly returned, as per the following response, but after this change restangular does not populate the headers map entries
```

Access-Control-Allow-Credentials: true
Access-Control-Allow-Origin: http://localhost:4200
Access-Control-Expose-Headers: total-elements
Cache-Control: no-cache
Connection: keep-alive
Content-Encoding: gzip
Content-Type: application/json; charset=utf-8
Date: Wed, 10 Jul 2019 09:22:29 GMT
ETag: W/"d94-6ITA2YnKbkbSYtyM0pSSIrU0koc"
Expires: -1
Pragma: no-cache
total-elements: 13
Transfer-Encoding: chunked
Vary: Origin, Accept-Encoding
X-Powered-By: Express
```
Hey,

according to spec there must **not** be any body, when the server replies with HTTP 204. And in fact, chrome cancels a request, when there is data. This breaks the handling of restangular in this case:

`ERROR Error: Response for getList SHOULD be an array and not an object or something else`

This can be verified like this with he help of https://httpstat.us:

```
this.restangular.withConfig((RestangularConfigurer) => {
  RestangularConfigurer.setBaseUrl('https://httpstat.us');
}).all('204').getList();
```

Back then in 2014 there was a small fix for handling of 204: https://github.com/mgonto/restangular/pull/561/commits/6565c86110cc9fe9930ce98ade926a3cd9e161f3

No idea if this ever worked, but int he current version data is of type Object, whenever the server sends no body and the check in the patch fails.

So my question before any pull request and whatsoever:

- Is this error message required at all?
- Is there any problem/side effect with always returning an array, when data isn't already one?

This works properly for me:

```
// support empty response for getList() calls (some APIs respond with 204 and empty body)
if (!isArray(data)) {
  data = [];
}
```

Here some facts about my system, although I don't think they make any difference:

Linux (Debian 9)
Version 70.0.3538.110 (Developer Build) built on Debian 9.6, running on Debian 9.6 (64-bit)

```
$ npm list | grep angular
@angular/core@7.0.4
@angular/forms@7.0.4
@angular/http@7.0.4
@angular/language-service@7.0.4
@angular/platform-browser@7.0.4
@angular/platform-browser-dynamic@7.0.4
@angular/router@7.0.4
@angular-devkit/core@0.5.13
@angular-devkit/schematics@0.5.13
@angular-devkit/core@0.5.13 deduped
ngx-restangular@4.0.1
```

```
$ npm version
{ 'twttr-angular': '0.0.0',
  npm: '6.4.1',
  ares: '1.14.0',
  cldr: '33.1',
  http_parser: '2.8.0',
  icu: '62.1',
  modules: '64',
  napi: '3',
  nghttp2: '1.34.0',
  node: '10.14.0',
  openssl: '1.1.0j',
  tz: '2018e',
  unicode: '11.0',
  uv: '1.23.2',
  v8: '6.8.275.32-node.36',
  zlib: '1.2.11' }
```

```
$ node --version
v10.14.0
```