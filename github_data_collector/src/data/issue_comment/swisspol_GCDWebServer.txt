hello, When is **HTTPS** supported?
I dont wanna compress the whole folder cause it takes time. when i upload the folder. it seems like all files are stored in the same path and i wanna delete it but so many files cant be selected at a time. so its a question and enhancement.
I am trying to fetch ip address using `GCDWebServerGetPrimaryIPAddress` on iOS simulator while connected to Ethernet but it returns `nil`. The same code is working fine when I am connected to wifi network. Here is my code.

`NSString *ipAddress = GCDWebServerGetPrimaryIPAddress(NO);`
`NSAssert(ipAddress, @"We must have an IP address at this point to proceed");`

I am using latest release of GCDWebServer v3.5.3.

I've attached screenshot of my ethernet connection.

<img width="657" alt="Screenshot 2020-01-03 at 11 50 45 AM" src="https://user-images.githubusercontent.com/5492088/71709875-9365af00-2e1f-11ea-8b02-50bb7f86e5a2.png">

Let me know if you need more information.


My app requires visibility into the progress of a request being read by GCDWebServer. As seen in #181, #174, and #22, this isn't an entirely new problem. There's a solution mentioned there as follows:

1. Subclass GCDWebServerConnection
2. Override `didReadBytes:length:` to be notified when bytes are read and `processRequest:completion:` to get the request and its content length.

Unfortunately, it appears that internal changes since these issues (in 2015) have changed the order of these methods being called. Currently, they `processRequest:completion:` is called after all of the bytes are received, despite the connection owning a `GCDWebServerRequest`.

- This pull request adds a new method to connections that can be overridden to receive the request, called `didParseRequest:`. When this is called, we've received just enough data to get the headers, allowing us to read the content length and calculate the percentage complete.
- Since the response is formulated in the connection instance, there was no need for an additional method for tracking write progress.

Another problem I encountered was that `totalBytesRead` includes the header data's bytes. This is unlike the content length of `GCDWebServerRequest`, which only accounts for the body.

- To solve this, I added two new methods to `GCDWebServerConnection` that calculate the amount of bytes that the connection expects to receive from/send to the remote peer once the exchange is complete.  Named `expectedFinalTotalReadBytes` and `expectedFinalTotalWrittenBytes`, it adds the headers' and body's lengths.

With these two changes, it is possible to monitor the progress of a request being received and sent by GCDWebServer.
Hi @swisspol thanks for creating this useful library. This PR is about to create a new subspec to use GCDWebServer on iOS App Extensions. Please have a look when you have time.
Hello @swisspol, Thanks for this awesome library I am facing one issue,   
I have start playing video then I press home button (App is in Background now) and I have locked the phone now when I unlocked the phone and opening app again then video is not playing as Connection is not reestablished or reconnected.

Please help me with this 

Thanks :)
Hello!

I've created a web server that serves a static website. A 404 response is sent if a request is made to a page that doesn't exist, but the response body is blank. This means that the WKWebView will be blank. Is there a way to send a simple "Not found" as a response body when returning 404s?

```Swift
let secondServer = GCDWebServer()
secondServer.addGETHandler(forBasePath: "/", directoryPath: pages, indexFilename: "index.html", cacheAge: 3600, allowRangeRequests: true)
secondServer.start(withPort: 8080, bonjourName: nil)
```
After a while in the background, switch back to the APP, self.webserver.isrunning is always true, but in fact the local server has stopped running
Note: data racing conditions can be detected when running the code with the `Thread Sanitizer` turned on (`Thread Sanitizer` can only be activated when running on simulators at least for iOS apps)
This is an alternative to https://github.com/swisspol/GCDWebServer/pull/292. 

I didn't have luck with the previous restart code but when I stopped and started the server everything seemed to work fine.