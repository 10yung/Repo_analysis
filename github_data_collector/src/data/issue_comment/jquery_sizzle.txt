PR #439 made Sizzle crash earlier on a `documentElement`-missing `document`. However, we want selection to work on nodes inside of a `<template>` element for which `ownerDocument` will point to a document fragment with a `null` `documentElement`. As @gibson042 said in #452:

> We discussed in-meeting and had rough consensus that the right behavior was to stop at a disconnected fragment but to traverse up through a fragment's \<template> host when one exists. But unfortunately, it seems difficult and maybe impossible to differentiate the two. My ideal change would instead be to tolerate null `documentElement`, but more changes will be required for that.
Migrated from https://github.com/jquery/jquery/issues/4109

Test case: https://jsfiddle.net/63zby1nt/

Seems like maybe the process the of checking for focus in Edge causes the input to lose focus. More thorough analysis is available in the comments on the jQuery issue.
Add :invalid and :valid pseudoclass selectors.

The implementation is based on element's [validity attribute](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState).

If element has no `validity` attribute, it's supposed, that both functions return false. This also matches CSS behaviour.
Consider the following collection:

```js
const array = ['a', 'b', 'c'];
```

Retrieving `array[0]` can be done relatively quickly. However, when the property doesn’t exist on the receiver, JavaScript engines must continue to look up the prototype chain until either the property is found or the chain ends. This is inherently slower than *not* doing any prototype chain lookups. Retrieving an out-of-bounds index, e.g. `array[3]`, triggers this scenario, resulting in decreased performance.

This patch changes the way some loops are written to avoid running into the slow case unnecessarily.

----

Similar patch for jQuery: https://github.com/jquery/jquery/pull/3769
Migrated from https://github.com/jquery/jquery/issues/3704

We decided in the meeting to try a for loop instead of `push.apply`. Check perf to be sure, but for loops are so heavily optimized these days that it might even be better. It has the added advantage of not causing "stack limit exceeded" errors.
I have written a robust CSS selector parser.

https://github.com/gajus/scalpel

It does not cover the entire sizzle.js spec, however that would be a simple change. I am making Scalpel an extendable parser.

Would there be any interest from Sizzle team to integrate Scalpel should it cover the entire spec?

The main benefits would be a clear separation of concerns and robustness of the parser.
It seems that the $element.is(':focus') detection of jQuery and therefore Sizzle has troubles detecting the currently focused element in the Android version of the Chrome browser.

I have created fiffdle for this problem: https://jsfiddle.net/abcqLoaL/1/

I had the same issue in Safari on an iOS device. Maybe this is a webkit related problem.
Firefox works fine though. Desktop browser seem to handle it fine.

...because tags aren't enough.

Cf. jquery/jquery/issues/2880

This issue should close when one of the following two conditions are satisfied:
- Someone adds a comment certifying that they have examined all unit tests and found no selections scoped so broadly that they could match QUnit output.
- A commit lands on the `master` branch claiming to correct all such selections (e.g., by either scoping more tightly or—for those that are explicitly document-scope—reducing with `jQuery#filter( "#qunit-fixture *" )` before comparing to expected results).

The next release will be adding some surface area, and the one after that breaking some little-used interfaces. Such changes need to be captured.
