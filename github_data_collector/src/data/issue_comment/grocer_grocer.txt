I'm using this gem to send iOS notifications it's working in development but not in production and there is no error.

Generated .pem with private key as suggested in documentation 
In Ruby 2.4, Fixnum is deprecated. I get deprecation warnings now when using Grocer. I believe switching any Fixnum instances to Integer is all that needs to be done to fix this. 
Hi - I've been using Grocer in a production app for several years, and I really appreciate it.

Today I was updating the app to ruby 2.4.0 and rails 4.2.8, and now my tests are failing. I'm initializing the grocer testing server just like in the sample code, and I've checked everything else I can think of. (Push notifications are still sending successfully when connecting to Apple's APNs).

The result I get in rspec is a timeout failure, because server.notifications.pop just sits and waits with no events.

Is anyone else having this problem?
Hi,

I'm trying to understand if this gem works with the last p8 apple certificate.
The problem is when i try to convert the p8 to pem or is the gem not ready for this?

Federico
Apple announced a new provider API coming later in 2015 that is based on HTTP/2. 
https://developer.apple.com/videos/wwdc/2015/?id=720 (at about 20 minutes)

The request/response cycle with standard http status codes means that issues like #14 don't need elaborate ring buffer solutions. There is also no need for a separate feedback service.

There will be no need to keep the existing APNS provider API as the new API applies to older devices. The video mentions some other changes, such as 4K payloads and ~100-character device tokens.

For HTTP/2 in Ruby, perhaps: https://github.com/igrigorik/http-2

I found [this class](https://github.com/grocer/grocer/blob/master/lib/grocer/error_response.rb) but can't find it using somewhere in the code. The reason I'm asking is Apple recommendation:

`
Note: The Apple Push Notification service (APNs) provides feedback to your server which may require specific actions. For example, if APNs tells you that a push token is invalid, remove that device and its registrations from your server
`

This is what that class is responsible for - tell me exactly what error was happened, so I can decide should I destroy registration of device or not. 

Please, make this moment clear for me. Am I missed something or there is a way to use this class somehow?

I've started seeing segmentation faults during test runs of the Grocer server on our CI platform. These do not appear locally, and so far not on production either. The CI and production platform are Ubuntu 12.04 and the Ruby version is identical for all, 2.1.1.

Is this a problem in Grocer or do I have to look elsewhere?

```
/home/rof/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/openssl/buffering.rb:61: [BUG] Segmentation fault at 0x007f26d801dcb0
ruby 2.1.1p76 (2014-02-24 revision 45161) [x86_64-linux]

-- Control frame information -----------------------------------------------
c:0007 p:---- s:0029 e:000028 CFUNC  :sysread
c:0006 p:0019 s:0025 e:000023 METHOD /home/rof/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/openssl/buffering.rb:61
c:0005 p:0085 s:0021 e:000020 METHOD /home/rof/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/openssl/buffering.rb:102
c:0004 p:0010 s:0015 e:000014 METHOD /home/rof/cache/bundler/ruby/2.1.0/gems/grocer-0.6.0/lib/grocer/notification_reader.rb:21
c:0003 p:0020 s:0008 e:000007 METHOD /home/rof/cache/bundler/ruby/2.1.0/gems/grocer-0.6.0/lib/grocer/notification_reader.rb:13
c:0002 p:0026 s:0004 e:000003 BLOCK  /home/rof/cache/bundler/ruby/2.1.0/gems/grocer-0.6.0/lib/grocer/server.rb:25 [FINISH]
c:0001 p:---- s:0002 e:000001 TOP    [FINISH]

-- Ruby level backtrace information ----------------------------------------
/home/rof/cache/bundler/ruby/2.1.0/gems/grocer-0.6.0/lib/grocer/server.rb:25:in `block (3 levels) in accept'
/home/rof/cache/bundler/ruby/2.1.0/gems/grocer-0.6.0/lib/grocer/notification_reader.rb:13:in `each'
/home/rof/cache/bundler/ruby/2.1.0/gems/grocer-0.6.0/lib/grocer/notification_reader.rb:21:in `read_notification'
/home/rof/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/openssl/buffering.rb:102:in `read'
/home/rof/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/openssl/buffering.rb:61:in `fill_rbuff'
/home/rof/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/openssl/buffering.rb:61:in `sysread'

-- C level backtrace information -------------------------------------------
/home/rof/.rvm/rubies/ruby-2.1.1/lib/libruby.so.2.1(+0x1c73dc) [0x7f26ec4a23dc] vm_dump.c:685
/home/rof/.rvm/rubies/ruby-2.1.1/lib/libruby.so.2.1(+0x74410) [0x7f26ec34f410] error.c:307
/home/rof/.rvm/rubies/ruby-2.1.1/lib/libruby.so.2.1(rb_bug+0xb3) [0x7f26ec3500c3] error.c:334
/home/rof/.rvm/rubies/ruby-2.1.1/lib/libruby.so.2.1(+0x148dde) [0x7f26ec423dde] signal.c:704
/lib/x86_64-linux-gnu/libc.so.6(+0x36c30) [0x7f26ebf4bc30] array.c:759
[0x7f26d801dcb0]
```

We currently try to truncate the alert when exceeding the payload dimension, but without actual numbers it's kind of difficult.

We're left with 2 options:
- fork and expose `payload_too_large?` and a new `payload_size` (which is `encoded_payload.bytesize`)
- use `send` to access private methods

I wanted to know if there was any reason for making these private. If not, then you can expect a PR promptly.

Thanks

We have a worker that sends push notification for a given push ID.
The worker gets messages and sends PN according to the data.

The problem:
Sometimes the PN server responds with big delay. It got stuck in a middle of sending PN (maybe they limit number of APNS). It can take about an hour or more, and then, the PN is sent successfully and the queue started polling messages again.. 
But in this time, the worker can't push any message from the queue, so we have a big delay also for the other devices.

Is there a timeout option to `Grocer.pusher` ? (It's not appears in documentation)
Any other idea how to handle this?

As of now, I have no idea if/how this excellent gem handles errors.  Documentation about exceptions, return values, etc. would really be helpful.
