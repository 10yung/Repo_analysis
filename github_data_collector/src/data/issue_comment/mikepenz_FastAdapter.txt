## About this issue

I'm using FastAdapter with `PagedModelAdapter` to display a large list of books.

__Repro steps__
1. Initialize a `PagedList` on a library with 70 books, using `PagedList.Config.Builder` and 
- `enablePlaceholders = true`
- `initialLoadSizeHint = 40`
- `pageSize = 20`

2. View the first 10 items on a `RecyclerView`

3. Call `selectExtension.getSelectedItems()`


__Expected behaviour__
The selected items are returned; the DAO is never called
Only the first 40 items are loaded in the `PagedList`; the 30 others still are placeholders

__Actual behaviour__
As soon as `selectExtension.getSelectedItems()` is called, the DAO loads books 41 to 60 and 61 to 70.
All 70 items are loaded in the `PagedList`; no placeholder is left even though the `RecyclerView` has never gone beyond position 10.

__Note__
Loading all placeholders has both a performance impact and super weird side effects on my app.

If the current behaviour works as designed, could you at least add an option to _avoid_ loading placeholders when collecting selected items ? Thanks a bunch !

## Details
- [x] Used library version v4.1.2
- [x] Used support library version v1.0.0 (AndroidX)
- [x] Used gradle build tools version v3.5.3
- [x] Used tooling / Android Studio version AS v3.5.3
- [x] Other used libraries, potential conflicting libraries None that I know of

## Checklist

- [x] Searched for [similar issues](https://github.com/mikepenz/FastAdapter/issues)
- [x] Checked out the [sample application](https://github.com/mikepenz/FastAdapter/tree/develop/app)
- [x] Read the [README](https://github.com/mikepenz/FastAdapter/blob/develop/README.md)
- [x] Checked out the [CHANGELOG](https://github.com/mikepenz/FastAdapter/releases)
- [x] Checked out the [MIGRATION GUIDE](https://github.com/mikepenz/FastAdapter/blob/develop/MIGRATION.md)

WIP
At the moment you must specify a drawable on the `SimpleSwipeCallback` for swipe to be enabled. I have changed this so if either a background colour or a "leave-behind" drawable is set, swipe is enabled.
Not an issue, but just wanted to post this to help with others using data binding. If it proves to be useful, it could also be added as another submodule.

The general contents are [here](https://github.com/AllanWang/KAU/blob/dev/fastadapter-databinding/src/main/kotlin/ca/allanwang/fastadapter/databinding/BindingItem.kt), but the idea is that with data binding, we can get the view ids from the layout id, and we no longer need to make a custom ViewHolder. This also avoids the need for non generic adapters.

ViewHolders however are useful for cases like event hooks, where we need to distinguish between the types. This binding pattern uses a companion object to keep track of that layout res instead.

Usage example:

```kt
class PlaceholderVhBinding(@StringRes override val data: Int) :
    BindingItem<ViewPlaceholderBinding>(data), 
    BindingLayout<ViewPlaceholderBinding> by Companion {

    override fun ViewPlaceholderBinding.bindView(holder: ViewHolder, payloads: MutableList<Any>) {
        placeholderText.setText(data)
    }

    override fun ViewPlaceholderBinding.unbindView(holder: ViewHolder) {
        placeholderText.text = null
    }

    companion object : BindingLayout<ViewPlaceholderBinding> {

        override val layoutRes: Int
            get() = R.layout.view_placeholder

    }
}
```

Binding and unbinding signatures extend the data binding, so view access is easy, and the model can be accessed from `data`. So long as it is a data class, equality and hash are also defined, so diffs work out of the box.

Id type defaults to layout res, though that is a person design decision.
Should payloads really be mutable? Should an item ever modify the payload or should it actually be read only?
## About this issue

- Briefly describe the issue
As stated [here](https://stackoverflow.com/questions/31759171/recyclerview-and-java-lang-indexoutofboundsexception-inconsistency-detected-in) and [here](https://issuetracker.google.com/issues/37030377#comment12) the recycler views internal list needs to be updated on the main thread as otherwise there may be inconsistencies. The current implementation of `FastAdapterDiffUtil` has separate `calculateDiff` and `set` functions which is great for doing the diff calculation on a background thread. The issue is that `calculateDiff` also updates the adapter internal list, which also happens on a background thread if that's where the diff is calculated. It is however mandatory to call the `set` part on the main thread as otherwise android complains that anything other than the main thread is touching its views.
For that reason`FastAdapterDiffUtil` needs to always perform the `adapterItem` update on the main thread.
- How can the issue be reproduced / sample code
https://github.com/IIIuminator/EnQ/blob/149ed0202db876d11b2e8f7eb033b105cac8199f/app/src/main/java/com/ivoberger/enq/ui/fragments/QueueFragment.kt#L95-L104
Any similar implementation like that (`calculateDiff` on background thread, `set` on main thread) will at some point crash. It sometimes takes a while but it happens every time. In that particular sample there are queue updates twice a second meaning is happens pretty quickly.

## Details
- [4.0.0-rc04] Used library version
usage: 
```java
mRecyclerView.addOnItemTouchListener(new DragSelectionItemTouchListener(this, new OnItemInteractionListener() {
    @Override
    public void onLongItemClicked(RecyclerView recyclerView, ViewHolder mViewHolderTouched, int position) {
        
    }

    @Override
    public void onItemClicked(RecyclerView recyclerView, ViewHolder mViewHolderTouched, int position) {

    }

    @Override
    public void onViewHolderHovered(RecyclerView rv, ViewHolder viewHolder) {

    }

    @Override
    public void onMultipleViewHoldersSelected(RecyclerView rv, List<ViewHolder> selection) {

    }
}));
```
Todo:
- [ ] Integrate into fastadapter (add Item parameter to DragSelectionItemTouchListener interface methods)