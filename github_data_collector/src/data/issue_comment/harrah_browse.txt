@sethtisue implemented support for 2.12.0 https://github.com/cvogt/browse/tree/topic/2.12-compat

I added support for 2.12.1 https://github.com/cvogt/browse/tree/topic/2.12.1-compat

Looks like @paulp had done this, too, but I can't find the source code. The binaries are here:
https://bintray.com/paulp/maven/sxr/1.0.2#files/org/improving/sxr_2.12/1.0.2

@paulp Since this is a compiler plugin, it should be released with scala minor versions in the artifactId. The plugin is definitely binary incompatible between 2.12.0 and 2.12.1 as you can see from my patch here: https://github.com/cvogt/browse/commit/67261cdbcc27a1e044d7b280b2db0a02ba27add5 (the previously overridden method became final in 2.12.1 and the new one didn't exist in 2.12.0)
OlegYch was able to publish sxr for 2.11. Any plans to publish for 2.11?

https://github.com/OlegYch/scastie/blob/master/renderer-template/project/DefaultSettings.scala#L49

The given setup sets the path incorrectly for tests. Fix that - this setup is tested with SBT 0.12.4.

Updates to generated html pages specifically:
- Generate valid html
- Make the index a frame view
- Update jquery/scrollTo/qtip2 to address issues #3,#4,#5 (better handling of screen edge and allow copy/paste from tooltip

Hi,

I got nosymbol has no owner with this code from play 2.2.0 source

``` scala
package play.api.libs.iteratee {

  private[iteratee] object internal {
    import play.api.libs.iteratee.Iteratee
    import scala.concurrent.{ ExecutionContext, Future }
    import scala.util.control.NonFatal
```

When running fullNameString (Browse.scala:470) on `internal`, the compiler raises the nosymbol error.

It was deleted in 0d6cd72dc9cf31729112f1063eb6df851c2c9c1c as part of a rewrite of stable IDs.

Dear Mark,
   Thank you very much for 'browse'. I slightly modify your code by adding new option. I try to preserve all punctuation, tabs, \r\n. I hope that addition look like original code. This new option allow add external class writer for sxr.

For example
somewhere at build.sbt or like one:
    scalacOptions += "-Xplugin:other.package.jar"
    scalacOptions <+= (scalaSource in Compile) map { (source) => { "-P:sxr:output-class:other.package.CustomWriter" }

Our custom writer

package other.package

import java.io.File
import sxr.OutputWriter
import sxr.Token
import sxr.OutputWriterContext

class CustomWriter(context: OutputWriterContext) extends OutputWriter {
  /*\* Generates initial content. */
  def writeStart() {
  }

  /*\* Generates content for a given source file. */
  def writeUnit(source: File, relativeSourcePath: String, tokenList: List[Token]) {
    println("--- " + source.toString)
    ...
    withReader(source, context.encoding) { input =>
      withWriter(destination) { output =>
    tokenList.foreach( ... custom code ...))
      }
    }
  }

  /*\* Generates final content. */
  def writeEnd() {
  }
}

It's work surprisingly well. I hope that you accept this addition. If i need it modify, please tell me about.

King regards,
Alexey

It would be nice to be able to copy the contents of the popups. 

I see two solutions to this:
- Wait sometime before hiding the popup. If the mouse is over the popup it wouldn't be hidden.
- A invisible div between the hovered element and the popup. The mouse over  the element, the said div or the popup wouldn't let the popup be hidden.

I made the Scaladoc's popups and I would be able to help with JS issues. Don't hesitate contacting me.

When there is hoverable code near the right side of the browser the part of the popup is created beyond the right end of browser causing a scroll bar to appear. Trying to scroll closes the pop-up.

Example: http://harrah.github.com/browse/samples/library/scala/Function19.scala.html 
Hover over the '.curry' call inside the 'def curry' method. Not sure it will work for everybody's resolutions, browser setup.

It would be nice if the popup positioned itself somewhere that wouldn't cause a scroll bar.

Look at the 2nd assert_â‰Ÿ at http://scalaz.googlecode.com/svn/continuous/latest/browse.sxr/scalaz/example/ExampleTraverse.scala.html.
