### "No such table" exception. But it queries the wrong table name.
It sometimes fails to find a table when I want to log another crash. 
I did not spell it wrongly. It seems to be random and happens for a few users every day, which makes the app crash.

Only on iOS.

### When?
It happens when I try to log a crash in the Main.cs file before the app terminates. 
In the iOS project in Main.cs in Application.Main:
I am trying to reach the table DeviceSetting from inside the catch block in order to log another crash.
```
try
{
    UIApplication.Main(args, null, "AppDelegate");
}
catch (Exception e)
{
    LogUtils.LogExceptionForReport(e, "Unhandled exception - Making the app crash.", Enums.LogLevel.Error);
    throw;
}
```
I don't know which crash it is, given that logging it fails. 
I cannot reproduce it locally. But we are logging crashes for 1 million users.

I get many different spellings, it seems random how it chooses to misspell it:
Exception (SQLiteException): no such table: DevieSettingg
Exception (SQLiteException): no such table: DeviceSettigg
Exception (SQLiteException): no such table: DviceSetting
Exception (SQLiteException): no such table: DevaeSSeting
Exception (SQLiteException): no such table: eeiceSetting

It has not always been there. I am not sure, but I think it started appearing after we targeted iOS 13.

### Exception

Exception (SQLiteException): no such table: DevieSettingg

```Exception (SQLiteException): no such table: DevieSettingg. at SQLite.SQLiteCommand+<ExecuteDeferredQuery>d__12`1[T].MoveNext () <0x10460d0cc + 0x00600> in <eaa146ee868043e287f5507c8701ad9e#88f563ba48fedaf0b99215d2f7c5b87f>:0 at System.Collections.Generic.List`1[T].AddEnumerable (System.Collections.Generic.IEnumerable`1[T] enumerable) <0x103623b8c + 0x000a7> in <0e400f473a3e4716a829e46ba2f1f0d6#88f563ba48fedaf0b99215d2f7c5b87f>:0 at System.Collections.Generic.List`1[T]..ctor (System.Collections.Generic.IEnumerable`1[T] collection) <0x1036219ec + 0x00177> in <0e400f473a3e4716a829e46ba2f1f0d6#88f563ba48fedaf0b99215d2f7c5b87f>:0 at System.Linq.Enumerable.ToList[TSource] (System.Collections.Generic.IEnumerable`1[T] source) <0x103ca30e0 + 0x00093> in <874baba848df4c068fe8cfc0052823f2#88f563ba48fedaf0b99215d2f7c5b87f>:0 at SQLite.SQLiteCommand.ExecuteQuery[T] () <0x10460bd2c + 0x0006b> in <eaa146ee868043e287f5507c8701ad9e#88f563ba48fedaf0b99215d2f7c5b87f>:0 at SQLite.TableQuery`1[T].ToList () <0x104610f70 + 0x0005f> in <eaa146ee868043e287f5507c8701ad9e#88f563ba48fedaf0b99215d2f7c5b87f>:0 at SQLite.TableQuery`1[T].FirstOrDefault () <0x1046110f4 + 0x00027> in <eaa146ee868043e287f5507c8701ad9e#88f563ba48fedaf0b99215d2f7c5b87f>:0 at SQLite.TableQuery`1[T].FirstOrDefault (System.Linq.Expressions.Expression`1[TDelegate] predExpr) <0x104611178 + 0x0001f> in <eaa146ee868043e287f5507c8701ad9e#88f563ba48fedaf0b99215d2f7c5b87f>:0 at MyProject.SQLiteData.Managers.SQLiteDeviceSettingManager.GetLoginSettingsById (System.String id) <0x103f81114 + 0x00167> in <578130feda49498d9c98620295a1e108#88f563ba48fedaf0b99215d2f7c5b87f>:0 at MyProject.SQLiteData.Managers.SQLiteDeviceSettingManager.GetDeviceLog (MyProject.Enums.LogLevel logLevel) <0x103f80e8c + 0x0007b> in <578130feda49498d9c98620295a1e108#88f563ba48fedaf0b99215d2f7c5b87f>:0 at MyProject.SQLiteData.Managers.SQLiteDeviceSettingManager.AddToDeviceLog (System.String log, MyProject.Enums.LogLevel logLevel) <0x103f80dbc + 0x00037> in <578130feda49498d9c98620295a1e108#88f563ba48fedaf0b99215d2f7c5b87f>:0 at MyProject.Utils.LogUtils.LogMessageForReport (System.String message, MyProject.Enums.LogLevel logLevel) <0x104034ae4 + 0x0012f> in <578130feda49498d9c98620295a1e108#88f563ba48fedaf0b99215d2f7c5b87f>:0 at MyProject.iOS.PinCodeViewController.<OnSuccessfullyLoggedIn>b__32_0 () <0x10307ab50 + 0x001d3> in <1db1167c54c04175b52f698c47369bd8#88f563ba48fedaf0b99215d2f7c5b87f>:0 at System.Runtime.CompilerServices.AsyncMethodBuilderCore+<>c.<ThrowAsync>b__7_0 (System.Object state) <0x103594c5c + 0x0005b> in <0e400f473a3e4716a829e46ba2f1f0d6#88f563ba48fedaf0b99215d2f7c5b87f>:0 at Foundation.NSAsyncSynchronizationContextDispatcher.Apply () <0x1037b4a04 + 0x0002f> in <e139e7c752b84c85bc1cc3eeae1725fa#88f563ba48fedaf0b99215d2f7c5b87f>:0 at (wrapper managed-to-native) UIKit.UIApplication.UIApplicationMain(int,string[],intptr,intptr) at UIKit.UIApplication.Main (System.String[] args, System.IntPtr principal, System.IntPtr delegate) <0x103777cfc + 0x0003f> in <e139e7c752b84c85bc1cc3eeae1725fa#88f563ba48fedaf0b99215d2f7c5b87f>:0 at UIKit.UIApplication.Main (System.String[] args, System.String principalClassName, System.String delegateClassName) <0x103777c54 + 0x00053> in <e139e7c752b84c85bc1cc3eeae1725fa#88f563ba48fedaf0b99215d2f7c5b87f>:0 at MyProject.iOS.Application.Main (System.String[] args) <0x10312e870 + 0x00037> in <1db1167c54c04175b52f698c47369bd8#88f563ba48fedaf0b99215d2f7c5b87f>:0```

### Project Setup

sqlite-net-pcl library version: 1.5.231

=== Visual Studio Enterprise 2019 for Mac ===

Version 8.3.11 (build 1)
Installation UUID: 4c2dc437-7869-4392-9b24-f24a2c4f02e7
	GTK+ 2.24.23 (Raleigh theme)
	Xamarin.Mac 5.16.1.24 (d16-3 / 08809f5b)

	Package version: 604000208

=== Mono Framework MDK ===

Runtime:
	Mono 6.4.0.208 (2019-06/07c23f2ca43) (64-bit)
	Package version: 604000208

=== NuGet ===

Version: 5.3.0.6192

=== .NET Core SDK ===

SDK: /usr/local/share/dotnet/sdk/3.0.101/Sdks
SDK Versions:
	3.0.101
	3.0.100
	2.1.701
	2.1.700
	2.1.505
	2.1.504
	2.1.302
	2.1.301
	2.1.4
	2.0.0
MSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/6.4.0/lib/mono/msbuild/Current/bin/Sdks

=== .NET Core Runtime ===

Runtime: /usr/local/share/dotnet/dotnet
Runtime Versions:
	3.0.1
	3.0.0
	2.1.14
	2.1.13
	2.1.12
	2.1.11
	2.1.9
	2.1.8
	2.1.2
	2.1.1
	2.0.5
	2.0.0

=== Xamarin.Profiler ===

Version: 1.6.12.29
Location: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler

=== Updater ===

Version: 11

=== Xamarin.Android ===

Version: 10.0.6.2 (Visual Studio Enterprise)
Commit: xamarin-android/d16-3/c407838
Android SDK: /Users/janettholst/Library/Developer/Xamarin/android-sdk-macosx
	Supported Android versions:
		None installed

SDK Tools Version: 26.1.1
SDK Platform Tools Version: 29.0.5
SDK Build Tools Version: 28.0.3

Build Information: 
Mono: mono/mono/2019-06@476d72b9e32
Java.Interop: xamarin/java.interop/d16-3@5836f58
LibZipSharp: grendello/LibZipSharp/d16-3@71f4a94
LibZip: nih-at/libzip/rel-1-5-1@b95cf3fd
ProGuard: xamarin/proguard/master@905836d
SQLite: xamarin/sqlite/3.27.1@8212a2d
Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-3@cb41333

=== Microsoft Mobile OpenJDK ===

Java SDK: /Users/janettholst/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.25
1.8.0-25
Android Designer EPL code available here:
https://github.com/xamarin/AndroidDesigner.EPL

=== Android SDK Manager ===

Version: 1.4.0.65
Hash: c33b107
Branch: remotes/origin/d16-3
Build date: 2019-11-19 20:33:22 UTC

=== Android Device Manager ===

Version: 1.2.0.116
Hash: d2b2af0
Branch: remotes/origin/d16-3
Build date: 2019-11-19 20:33:42 UTC

=== Xamarin Designer ===

Version: 16.3.0.256
Hash: 8a223bfd7
Branch: remotes/origin/d16-3
Build date: 2019-11-01 21:02:02 UTC

=== Apple Developer Tools ===

Xcode 11.3 (15712)
Build 11C29

=== Xamarin.Mac ===

Version: 6.6.0.12 (Visual Studio Enterprise)
Hash: e3c2b406d
Branch: xcode11.2
Build date: 2019-11-01 00:12:07-0400

=== Xamarin.iOS ===

Version: 13.6.0.12 (Visual Studio Enterprise)
Hash: e3c2b406d
Branch: xcode11.2
Build date: 2019-11-01 00:12:08-0400

=== Xamarin Inspector ===

Version: 1.4.3
Hash: db27525
Branch: 1.4-release
Build date: Mon, 09 Jul 2018 21:20:18 GMT
Client compatibility: 1

=== Build Information ===

Release ID: 803110001
Git revision: 6ee6ad2ec46ae5a08a1999ee4c815ac656a35b91
Build date: 2019-12-05 16:09:27+00
Build branch: release-8.3
Xamarin extensions: 56bd70ef2e327f71c615cfc29a47fd50685fadcb

=== Operating System ===

Mac OS X 10.15.1
Darwin 19.0.0 Darwin Kernel Version 19.0.0
    Thu Oct 17 16:17:15 PDT 2019
    root:xnu-6153.41.3~29/RELEASE_X86_64 x86_64


I need to know the amount of free space in the db file and found I can run
`
select * from dbstat 
`
and get info out of the virtual table. is there some way to do this using sqllite-net? I tried to create a mock instance of the dbstat record and run using the Query method but I get an error that the dbstat table does not exist

Is there another way to read the % of free space in the file?
I use the sqlite-net in wpf platform, when I compile the project, the e_sqlite3.dll will be copy to the x86 folder and x64 folder in output directory, but when I running, the e_sqlite3.dll will be delete sometimes. I don't know why this happens, and it doesn't have to happen.

I use the .net framework is 4.7.2, Nuget reference is PackageReference.
The sqlite-net version is 1.6.292.
Hey,

I spent good 20 minutes on it, so it will be nice to show better exception. If we place in InsertAsync(object obj) collection we will get argument exception. Method takes object than can we check its implemented iterface and show suitable message in exception?

Regards :)
***tl;dr: By moving away from PropertyInfo.SetValue to dynamic strongly-typed delegates, we can speed up large query retrieval by ~500%.***

## Simple Syntax vs. Fast Speed

SQLite.net is very easy to use, and has great facility for mapping from SQLite tables into object properties.  However, for very large queries, response times can be a bit on the slow side:

	// *** Method 1 ***
	var orders = conn.Query<OrderDetail>("select * from [OrderDetail]");


If OrderDetail is 1 million records or so, then performance is very poor:

```Retrieved 1000000 records in 14852 ms```

Why does it take 15 seconds to query from a local database?  This should be FAST!

Traditionally this can be overcome by doing some low-level work and stepping through a SQLite query on your own:

	// *** Method 2 ***
	var stmt = SQLite3.Prepare2(conn.Handle, "select * from [OrderDetail]");
	var orders = new List<OrderDetail>();
	
	while (SQLite3.Step(stmt) == SQLite3.Result.Row)
	{
	    var id = SQLite3.ColumnInt(stmt, 0);
	    var orderId = SQLite3.ColumnInt(stmt, 1);
	    var productId = SQLite3.ColumnInt(stmt, 2);
	    var quantity = SQLite3.ColumnInt(stmt, 3);
	    var name = SQLite3.ColumnString(stmt, 4);
	
	    var orderDetail = new OrderDetail()
	    {
	        Id = id,
	        OrderId = orderId,
	        ProductId = productId,
	        Quantity = quantity,
	        Name = name
	    };
	    orders.Add(orderDetail);
	}

uuuugh.  It's much more cumbersome syntax, but the performance boost is undeniable:
```Retrieved 1000000 records in 1350 ms.```

That's more like it!  It runs in a tenth of the time!  Both are using SQLite.net with the same query on the same database -- so why is Method 1 so slow?

## In-Loop Reflection as the Root of Evil

The core of the problem lies in the fact that the inside of SQLite.net's `ExecuteDeferredQuery` loop makes a call to `PropertyInfo.SetValue ()`.  This is a rather heavy-weight call that uses Reflection every time it's called to make sure that the generic `object` being passed into it is compatible with the type held by that particular PropertyInfo.

So how do we fix this?  Is there a way to have the syntactic sugar of Method 1 with the speed of Method 2?

The good news is yes -- there are two alternatives that people have used to approach this problem.

### Fast-Member
The fastest method is to emit dynamic IL and link into that at runtime.  This is the method used by the [excellent Fast-Member library](https://github.com/mgravell/fast-member).

However, there are .NET platforms (such as Xamarin.iOS and Unity IL2CPP) that don't support such shenanigans, so I'd rather not go down that road.

### Strongly-Typed Delegates
The second method isn't quite as fast as dynamic IL, but it's still reasonably fast.  It involves doing all of the type-checking reflection _outside_ of the query loop, and creating strongly-typed delegates to set property values.  

Jon Skeet wrote [a blog post](https://codeblog.jonskeet.uk/2008/08/09/making-reflection-fly-and-exploring-delegates/) that explains this technique, as well as [a Stack Overflow answer that summarizes nicely](https://stackoverflow.com/a/1028058/12481680).  This is the same technique used to add [this same speed-boost to Google's Protobuf library](https://github.com/protocolbuffers/protobuf/blob/master/csharp/src/Google.Protobuf/Reflection/ReflectionUtil.cs).

I'm not doing everything quite the same way as he is (to be honest, I had a hard time following all of it), but I think the version I created is hopefully easy enough to read, and similarly zippy at runtime.

Note that we avoid quite a bit of confusion by simply skipping the Enum case, and falling back to the original method of simply calling Column.Set() on every row.  For enumerated types, then my pull request will simply fall back on the old (and slow) method of calling `PropertyInfo.SetValue()` on every row.  Yes, it's slow -- but at least it's not going to be any slower than it was before this change (and maybe someone else can help figure out the black-magic voodoo to make strongly-typed delegates for enums function).  

## Measuring Performance
So what does this all boil down to?  Well, let's check the performance.

Prior to my pull request:

	Method 1: Retrieved 1000000 records in 15009 ms.
	Method 2: Retrieved 1000000 records in 1419 ms.

After FastColumnSet:

	Method 1: Retrieved 1000000 records in 3087 ms.
	Method 2: Retrieved 1000000 records in 1426 ms.

Still not nearly as good as the hand-created mappings, but 15 seconds down to 3 seconds is still an impressive boost!

There's a lot of junk I needed to put in there to make Nullable types work properly (ugh).  If I skip Nullable checks and defer nullable types back to the legacy method, then it makes things a tad bit simpler, but I don't think the speed increase is that significant -- it shaves off maybe 500ms or so.

## Feedback?
What do you all think?  Is this clean enough / general-purpose enough to make it into the main trunk?  

I'm certainly open to input on how to make this all cleaner -- it was a bear getting this all to work properly, but I'm very very thankful for a comprehensive unit test suite in SQLite-net. Kudos for that. :)
Hello. Not even sure if this is an issue, but since I couldn't find any documentation anywhere, I figured this was the best place to ask. I received the following exception which, I assume, was due to an attempt by 1 thread to read/write while another thread was read/writing. Is SQLite.NET not threadsafe? Do I need to synchronize access myself?

```csharp
Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.
   at SQLitePCL.SQLite3Provider_e_sqlite3+NativeMethods.sqlite3_prepare_v2(IntPtr undefined, IntPtr undefined, Int32 undefined, IntPtr ByRef, IntPtr ByRef)
   at SQLitePCL.SQLite3Provider_e_sqlite3+NativeMethods.sqlite3_prepare_v2(IntPtr undefined, IntPtr undefined, Int32 undefined, IntPtr ByRef, IntPtr ByRef)
   at SQLitePCL.SQLite3Provider_e_sqlite3.SQLitePCL.ISQLite3Provider.sqlite3_prepare_v2(IntPtr undefined, System.String undefined, IntPtr ByRef, System.String ByRef)
   at SQLitePCL.raw.sqlite3_prepare_v2(SQLitePCL.sqlite3 undefined, System.String undefined, SQLitePCL.sqlite3_stmt ByRef, System.String ByRef)
   at SQLitePCL.raw.sqlite3_prepare_v2(SQLitePCL.sqlite3 undefined, System.String undefined, SQLitePCL.sqlite3_stmt ByRef)
   at SQLite.SQLite3.Prepare2(SQLitePCL.sqlite3 undefined, System.String undefined)
   at SQLite.SQLiteCommand.Prepare()
   at SQLite.SQLiteCommand.ExecuteScalar[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]()
   at SQLite.TableQuery`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Count()
   at SQLite.TableQuery`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Count(System.Linq.Expressions.Expression`1> undefined)
   at SQLite.AsyncTableQuery`1+<>c__DisplayClass14_0[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].b__0(SQLite.SQLiteConnectionWithLock undefined)
   at SQLite.AsyncTableQuery`1+<>c__DisplayClass2_0`1[[System.__Canon, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].b__0()
   at System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InnerInvoke()
   at System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(System.Object undefined)
   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread undefined, System.Threading.ExecutionContext undefined, System.Threading.ContextCallback undefined, System.Object undefined)
   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread undefined)
   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread undefined)
   at System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread undefined)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
```
I keep hitting a wall implementing tables because I am using types that aren't specifically defined in your mapper. For instance, we are using an `Option` type for nullable items. If I add that to a data model:

```
public Option<string> OptionalString { get; set; }
```
that will fail because it's not handled.

The same goes for `NodaTime`'s date objects and simple 1 to 1 mapped objects... These things are easily serialised and stored _if_ there's a mechanism for defining these types. Without it, I have to do a heap of boilerplate adding extra fields to convert to correct objects.

```
        private Option<string> _optional;

        [Ignore]
        public Option<string> Optional {
            get => _optional;
            set {
                _optional = value;
                __optionalString = value.ValueOrDefault();
            }
        }

        public string __optionalString {
            get => _optional.ValueOrDefault();
            set { _optional = value.SomeWhen(s => !string.IsNullOrEmpty(s)); }
        }
```

Is it possible to make this happen? Am I missing something?
Fix comment of SQLiteConnection.Trace
It would be cool if we have [Source Link support](https://github.com/dotnet/sourcelink) to get first-class debugging experience.
The bug was reported in a similar way under #809.

ToListAsync(), ToArrayAsync() and CountAsync() throw an exception when under Android called. 
However, the exception is thrown in debug and release. It makes no difference whether breakpoints are set or not. With iOS the calls work without problems.

Java.Util.ConcurrentModificationException

Examples:
var query = await database.Table<T>().Where(x => x.Id == id).ToListAsync(); 
var query = await database.Table<T>().Where(x =>iIds.Contains(x.d)).ToListAsync(); 

Tested:
- Xamarin.Forms 4.3.00.991211 and sqlite-pcl 1.5.231
- Xamarin.Forms 4.3.00.991211 and sqlite-pcl 1.6.292
- Xamarin.Forms 4.3.00.947036 and sqlite-pcl 1.5.231
- Xamarin.Forms 4.3.00.947036 and sqlite-pcl 1.6.292
- Last working framework:  Xamarin.Forms 4.1.0.778454

Enviroment:
Win10 1909
Visual Studio 2019 16.3.9
Android min. version 7.0 (Api 24)
Android target version 9.0 (Api 28)

