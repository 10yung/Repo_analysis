What I am seeing is exactly what #263 was showing under exactly the same circumstances.  He said it magically fixed itself but mine still hasn't :)

Anybody else have this problem and any hints to fix will be appreciated!  

-Andy Galewsky
The current implementation failed to retry queries that are in the `QUEUED` state prior to #256.

Instead of attempting to get the results of the query and retrying based on an error message which might change in the future, this PR checks the status of the query via the AWS APIs to determine when it has succeeded and the results can be retrieved.

This also includes a minor change to perform the creation of the request token in a separate method that can be easily monkey patched for applications that always want to execute a query. Currently if someone needs this behavior, they must duplicate the entirety of the `run_statement` method to support this.

**EDIT**: Note this was originally based on a version of Blazer prior to #256. The change to poll for the status of the query is still an improvement to the general functionality of this adapter that should be considered.
Allows the credentials for the Athena adapter to be configured explicitly. If the settings are not provided, the AWS clients fallback to the normal process for resolving credentials that is currently used.
Hello,

So we have some queries that are way too big and heavy for browser rendering, there is any chance that the result of the query on the view can crash the web browser in that process? And what would it be your suggestion to surpass that problem.

We had an idea to avoid any problem like that, that was creating an async process that would go to sidekiq and eventually send the generated csv to the user's email. The problem is that we tried to replicate the process of just running a query on the Rails Console and we were not able to do so.

Here are the step that we followed:

`require 'securerandom'`
`run_id = SecureRandom.uuid`
`query = Blazer::Query.last`
`data_source = Blazer.data_sources[query.data_source]`
`result = data_source.run_results(run_id)`

We had a few queries saved, so we used one of them. Also, just to make sure nothing was out of place we executed the rails server and executed the queries through the interface and worked just fine.   

Regards,
Hi,

What do you think about having a limit setting that applies to all the queries if it is set? The idea of this is to prevent the database or the server from having performance issues when executing queries that grab a large amount of data.

If you think that this can be helpful I can do a PR with the code. Thanks! 
After successfully connecting to a Redshift database, I found that the "Preview Table" is blank. We use Segment.com for analytics which created a separate schema for every data source (ex: SELECT * FROM mailchimp.campaigns). 

Do you have any suggestions on how to preview the schemas and related tables when using Redshift?
Another implementation of https://github.com/ankane/blazer/pull/195

## Problem
Unfortunately previous patch doesn't work. When user push `Download` button it produces POST request with "ready to fire" query statement and already interpolated variables. So there are no way to get variables in case of csv response.

## Solution
Adding query params to csv request explicitly.

## Example
The example name of downloaded file:
`statistika-po-offeru-end_time-2019-07-30t20-59-59-00-00-offer_id-123-period-week-start_time-2019-06-30t21-00-00-00-00.csv`
Hi,

I noticed myself downloading files, changing variables, then downloading more and needing to manually change the filename. 

Curious if we could update this https://github.com/ankane/blazer/blob/master/app/controllers/blazer/queries_controller.rb#L265 to include variable names and values? 

As far as I can tell there is no map of `vars` to values, they're gsub'ed to create the statement within `process_vars`

Keeping track of the values in there might add some overhead you don't want, but seems like a nice-to-have. 
This pull request is in reference to the `- add to dashboard from query page` in the issue #24.

This PR allows the user to add the queries to multiple dashboards right from the query show page. 
- When the user adds the query, this is appended to the end of the dashboard page (with position n+1, where n is the number of current queries on the dashboard)
- When the user removes the query, the query is deleted from the current position
- The dashboard_query positions are reset after removal of queries for each of the dashboards that were modified

Below is a quick video for an overview of the functionality:

[![Play Video](https://play.vidyard.com/YDFd6UCLJitWCGHUMhxWdD.jpg)
](https://watch.basilkhan.ca/watch/YDFd6UCLJitWCGHUMhxWdD)
[Blazer PR | Hide Mastermind if user_class does not exist](https://watch.basilkhan.ca/watch/YDFd6UCLJitWCGHUMhxWdD)

Below is the screenshot of the Add to Dashboard modal:
![image](https://user-images.githubusercontent.com/13711901/54939145-34712200-4efe-11e9-8ba1-6296478e566b.png)

Hello, I'm using your project and it's working very well, now I would like to embed the dashboard view in a partial inside my main app, is it possibile to do so?
Thanks