目前越来越多的国际线路出现去程与回程线路情况天差地别的的情况，有的去程丢包极高，回程几乎不丢包，目前kcptun的单一静态配置在回程上极为浪费带宽，而去程上即使参数再激进也无法充分发挥目前大部分xPON上行大带宽的优势，能否实现上行100倍放大，下行仅仅1.2-2.0倍放大，显著提升带宽利用率？
如题：请问client侧，如何设置TCP监听(即对应的localaddr监听）的相关tcp参数，比如：	tcp窗口(发送、接受)大小，缓冲区大小等。应为我发现做为 tun的client侧，应用能发送数据快了，数据全堵在 tun client这儿了，给应用层造成一个 数据流都已发送的假象。
是否考虑增加网络接口绑定的共功能？
需求场景：
比如 client 端，我有多个物理网络接口（如网卡,usb 4g卡 等），我希望udp 隧道 建立在我指定的 物理网卡上。
问问题前先搜索ISSUE，并搞清楚下面的问题:

1. 检查 ```-key xxx``` 至少三遍, ***保证***两边一致。
2. 保证```-nocomp, -datashard, -parityshard,  -key, -crypt, -smuxver```两边一致。
3. 是否在服务器端，正确设定了转发的目标服务器地址 ***--target***。
4. 是否在客户端，正确的连接到了 client的监听端口。
5. 如果第3条不确定，尝试在服务器上telnet target port试试。
6. 防火墙是否关闭了UDP通信，或者设置了UDP的最大发包速率？
7. 两端的版本是否一致？
8. 是不是最新版本？
9. 两端分别是什么操作系统？
10. 两端的输出日志是什么？

Before firing issue, make sure you figured out the following common questions.

PLEASE DO SEARCH FIRST.

1. Check your ```-key xxx``` for at least 3 times, ***MAKE SURE*** both sides share the same secret.
2. ```-nocomp, -datashard, -parityshard,  -key, -crypt, -smuxver``` ***must be the same*** on both side.
3. Did you correctly set the ***-target*** on the server side?
4. Did you correctly connected to the listening port on client side?
5. ***MAKE SURE*** ```telnet target port``` on your server successful(don't ask me why couldn't).
6. Does your ***firewall allows UDP*** communications? (including your ISP Cable-Modem)
7. Are you using the **same version** for both client & server
8. Are you using the **latest release**?
9. Which **OS** do you use?
10. Which end for this issue related to, **client or server**?



操作系统:XP 32位
1.5G内存
cpu:N3710 VM虚拟机装的
![2019-10-31_02-12-18](https://user-images.githubusercontent.com/10203925/67886265-29f9c380-fb84-11e9-9ddc-3ad823d062da.png)



日志：
2019/10/26 10:40:06 stream closed in: 127.0.0.1:42304 out: XX.XX.XX.XX:XX(43)
2019/10/26 10:40:06 stream closed in: 127.0.0.1:42302 out: XX.XX.XX.XX:XX(41)
2019/10/26 10:40:06 stream closed in: 127.0.0.1:42298 out: XX.XX.XX.XX:XX(39)
2019/10/26 10:40:06 stream closed in: 127.0.0.1:42294 out: XX.XX.XX.XX:XX(37)
2019/10/26 10:40:06 stream closed in: 127.0.0.1:42290 out: XX.XX.XX.XX:XX(35)
2019/10/26 10:40:06 stream opened in: 127.0.0.1:42304 out: XX.XX.XX.XX:XX(43)
2019/10/26 10:40:06 stream closed in: 127.0.0.1:42286 out: XX.XX.XX.XX:XX(33)
2019/10/26 10:40:06 stream opened in: 127.0.0.1:42302 out: XX.XX.XX.XX:XX(41)
2019/10/26 10:40:06 stream opened in: 127.0.0.1:42298 out: XX.XX.XX.XX:XX(39)
2019/10/26 10:40:06 stream opened in: 127.0.0.1:42294 out: XX.XX.XX.XX:XX(37)
2019/10/26 10:40:06 stream opened in: 127.0.0.1:42290 out: XX.XX.XX.XX:XX(35)
2019/10/26 10:40:06 stream opened in: 127.0.0.1:42286 out: XX.XX.XX.XX:XX(33)
2019/10/26 10:39:57 stream opened in: 127.0.0.1:42282 out: XX.XX.XX.XX:XX(31)
2019/10/26 10:39:56 stream opened in: 127.0.0.1:42280 out: XX.XX.XX.XX:XX(29)
2019/10/26 10:39:51 session normally closed XX.XX.XX.XX:XX
2019/10/26 10:39:51 stream closed in: 127.0.0.1:42266 out: XX.XX.XX.XX:XX(19)
2019/10/26 10:39:51 stream closed in: 127.0.0.1:42270 out: XX.XX.XX.XX:XX(23)
2019/10/26 10:39:51 stream closed in: 127.0.0.1:42268 out: XX.XX.XX.XX:XX(21)
2019/10/26 10:39:51 stream closed in: 127.0.0.1:42264 out: XX.XX.XX.XX:XX(17)
2019/10/26 10:39:51 stream closed in: 127.0.0.1:42256 out: XX.XX.XX.XX:XX(9)
2019/10/26 10:39:51 stream closed in: 127.0.0.1:42258 out: XX.XX.XX.XX:XX(11)
2019/10/26 10:39:51 stream closed in: 127.0.0.1:42260 out: XX.XX.XX.XX:XX(13)
2019/10/26 10:39:51 stream opened in: 127.0.0.1:42278 out: XX.XX.XX.XX:XX(27)
2019/10/26 10:39:51 stream closed in: 127.0.0.1:42276 out: XX.XX.XX.XX:XX(25)
2019/10/26 10:39:51 stream opened in: 127.0.0.1:42258 out: XX.XX.XX.XX:XX(11)
2019/10/26 10:39:51 stream opened in: 127.0.0.1:42256 out: XX.XX.XX.XX:XX(9)
2019/10/26 10:39:51 stream opened in: 127.0.0.1:42276 out: XX.XX.XX.XX:XX(25)
2019/10/26 10:39:50 stream opened in: 127.0.0.1:42260 out: XX.XX.XX.XX:XX(13)
2019/10/26 10:39:50 stream opened in: 127.0.0.1:42262 out: XX.XX.XX.XX:XX(15)
2019/10/26 10:39:50 stream opened in: 127.0.0.1:42264 out: XX.XX.XX.XX:XX(17)
2019/10/26 10:39:50 stream opened in: 127.0.0.1:42266 out: XX.XX.XX.XX:XX(19)
2019/10/26 10:39:50 stream opened in: 127.0.0.1:42268 out: XX.XX.XX.XX:XX(21)
2019/10/26 10:39:50 stream opened in: 127.0.0.1:42270 out: XX.XX.XX.XX:XX(23)
2019/10/26 10:39:50 stream opened in: 127.0.0.1:42254 out: XX.XX.XX.XX:XX(7)
2019/10/26 10:39:50 stream opened in: 127.0.0.1:42250 out: XX.XX.XX.XX:XX(3)
2019/10/26 10:39:50 stream opened in: 127.0.0.1:42272 out: XX.XX.XX.XX:XX(5)
2019/10/26 10:39:50 smux version: 2 on connection:  -> XX.XX.XX.XX:XX
2019/10/26 10:39:50 session marked as expired XX.XX.XX.XX:XX
2019/10/26 10:39:50 stream closed in: 127.0.0.1:42138 out: XX.XX.XX.XX:XX(185)
2019/10/26 10:39:50 stream closed in: 127.0.0.1:42192 out: XX.XX.XX.XX:XX(217)
2019/10/26 10:39:50 stream closed in: 127.0.0.1:42208 out: XX.XX.XX.XX:XX(225)
2019/10/26 10:39:50 stream closed in: 127.0.0.1:42248 out: XX.XX.XX.XX:XX(255)
2019/10/26 10:39:50 stream closed in: 127.0.0.1:42044 out: XX.XX.XX.XX:XX(129)
2019/10/26 10:39:50 stream closed in: 127.0.0.1:41884 out: XX.XX.XX.XX:XX(13)
2019/10/26 10:39:50 stream closed in: 127.0.0.1:42188 out: XX.XX.XX.XX:XX(215)
2019/10/26 10:39:50 stream closed in: 127.0.0.1:42236 out: XX.XX.XX.XX:XX(247)
2019/10/26 10:39:50 stream closed in: 127.0.0.1:42196 out: XX.XX.XX.XX:XX(219)
2019/10/26 10:39:50 stream closed in: 127.0.0.1:41988 out: XX.XX.XX.XX:XX(85)
2019/10/26 10:39:50 stream closed in: 127.0.0.1:42242 out: XX.XX.XX.XX:XX(253)
2019/10/26 10:39:50 stream closed in: 127.0.0.1:42132 out: XX.XX.XX.XX:XX(181)

一段时间断流，查日志提示“session marked as expired”

配置：
{   
    "listen": ":3677",
    "target": "0.0.0.0:xxx",
    "key": "1111",
    "crypt": "salsa20",
    "mode": "fast3",
    "mtu": 1350,
    "sndwnd": 4096,
    "rcvwnd": 512,
    "datashard": 0,
    "parityshard": 0,
    "dscp": 0,
    "nocomp": false,
    "acknodelay": false,
    "sockbuf": 16777216,
    "keepalive": 10,
    "tcp": true,
    "smuxver": 2,
    "smuxbuf": 16777216,
    "streambuf": 2097152,
    "scavengettl": 900
}
win64客户端，版本20190924，服务器版本也为20190924，SS直接正常。
加了KCPTUN以后，看日志，服务端已收到数据，服务端也向客户端发出数据，但是SS没收到数据。日志如下：
客户端
2019/10/14 12:06:49 version: 20190924
2019/10/14 12:06:49 smux version: 1
2019/10/14 12:06:49 listening on: [::]:9000
2019/10/14 12:06:49 encryption: aes
2019/10/14 12:06:49 nodelay parameters: 1 20 2 1
2019/10/14 12:06:49 remote address: 3.112.150.211:29250
2019/10/14 12:06:49 sndwnd: 512 rcvwnd: 512
2019/10/14 12:06:49 compression: true
2019/10/14 12:06:49 mtu: 1350
2019/10/14 12:06:49 datashard: 10 parityshard: 3
2019/10/14 12:06:49 acknodelay: false
2019/10/14 12:06:49 dscp: 0
2019/10/14 12:06:49 sockbuf: 4194304
2019/10/14 12:06:49 smuxbuf: 4194304
2019/10/14 12:06:49 streambuf: 2097152
2019/10/14 12:06:49 keepalive: 10
2019/10/14 12:06:49 conn: 1
2019/10/14 12:06:49 autoexpire: 0
2019/10/14 12:06:49 scavengettl: 600
2019/10/14 12:06:49 snmplog:
2019/10/14 12:06:49 snmpperiod: 60
2019/10/14 12:06:49 quiet: false
2019/10/14 12:06:49 tcp: false
2019/10/14 12:06:49 initiating key derivation
2019/10/14 12:06:49 key derivation done
2019/10/14 12:06:50 smux version: 1 on connection: 0.0.0.0:59306 -> 3.112.*.211:2*
2019/10/14 12:07:07 stream opened in: 127.0.0.1:58699 out: 3.112.150.211:29250(3)
2019/10/14 12:07:12 stream opened in: 127.0.0.1:58702 out: 3.112.150.211:29250(5)
2019/10/14 12:07:12 stream opened in: 127.0.0.1:58704 out: 3.112.150.211:29250(7)
2019/10/14 12:07:13 stream opened in: 127.0.0.1:58708 out: 3.112.150.211:29250(9)
2019/10/14 12:07:17 stream closed in: 127.0.0.1:58699 out: 3.112.150.211:29250(3)
2019/10/14 12:07:42 stream closed in: 127.0.0.1:58702 out: 3.112.150.211:29250(5)
2019/10/14 12:07:42 stream opened in: 127.0.0.1:58716 out: 3.112.150.211:29250(11)
2019/10/14 12:07:42 stream closed in: 127.0.0.1:58704 out: 3.112.150.211:29250(7)
服务端日志
2019/10/14 12:06:58 smux version: 1 on connection: [::]:29250 -> 117.136.39.212:57892
2019/10/14 12:07:06 stream opened in: 117.136.39.212:57892(3) out: 127.0.0.1:3840
2019/10/14 12:07:16 stream closed in: 117.136.39.212:57892(3) out: 127.0.0.1:3840
2019/10/14 12:07:58 io: read/write on closed pipe
2019/10/14 12:08:48 remote address: 117.136.39.212:57893
2019/10/14 12:08:48 smux version: 1 on connection: [::]:29250 -> 117.136.39.212:57893
2019/10/14 12:08:48 stream opened in: 117.136.39.212:57893(3) out: 127.0.0.1:3840
2019/10/14 12:08:48 stream opened in: 117.136.39.212:57893(5) out: 127.0.0.1:3840


服务器端版本: **20190910**
客户端版本(openwrt): **20190109**

不知道是不是因为版本不一致的原因，一直连不上服务器，停顿在connection这里：
root@XiaoQiang:~# kcptun -l ":64589" -r "192.243.xxx.xxx:29900" --key erik --crypt none --mode fast -nocomp --mtu 135
0 --datashard 10 --parityshard 3 --dscp 0
2019/09/22 04:56:27 version: 20190109
2019/09/22 04:56:27 initiating key derivation
2019/09/22 04:56:27 listening on: [::]:64589
2019/09/22 04:56:27 encryption: none
2019/09/22 04:56:27 nodelay parameters: 0 30 2 1
2019/09/22 04:56:27 remote address: 192.243.xxx.xxx:29900
2019/09/22 04:56:27 sndwnd: 128 rcvwnd: 512
2019/09/22 04:56:27 compression: false
2019/09/22 04:56:27 mtu: 1350
2019/09/22 04:56:27 datashard: 10 parityshard: 3
2019/09/22 04:56:27 acknodelay: false
2019/09/22 04:56:27 dscp: 0
2019/09/22 04:56:27 sockbuf: 4194304
2019/09/22 04:56:27 keepalive: 10
2019/09/22 04:56:27 conn: 1
2019/09/22 04:56:27 autoexpire: 0
2019/09/22 04:56:27 scavengettl: 600
2019/09/22 04:56:27 snmplog: 
2019/09/22 04:56:27 snmpperiod: 60
2019/09/22 04:56:27 quiet: false
2019/09/22 04:56:27 connection: 0.0.0.0:30767 -> 192.243.xxx.xxx:29900
Hello,
Is bonding (I mean, multiple links aggregation) a possibility with kcptun? On the title, it is written `N:M multiplexing`, but I don't see anywhere any reference to use several interfaces/connections to distribute the packets?

Thanks
As the title.
I am considering writing a script testing the quality of the Internet in real time and adjust the redundant rate accordingly, i.e. If the Internet packet loss is high, change to higher redundant rate, or reduce the redundant rate.
To do that I need to change configuration settings of KCPTUN while it is running without restarting KCPTUN.
Is this possible? 
KCPTUN read configuration just once? Or is there a way making it read configuration periodically.
