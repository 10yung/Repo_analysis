Dear Ooui Team,

i`ve bind over XAML a Button via a Command, as it  do not work, so i bind over x:name the button to a click method. Same error it`s happen. The error in my Debugger console on Chrome is:

Failed to process received message: Newtonsoft.Json.JsonSerializationException: Error getting value from 'MessageType' on 'Ooui.Message'. ---> System.NullReferenceException: Object reference not set to an instance of an object. 

thrown in mono.js

i use VS Studio 2017 and the newest (released) nuget packages for .net Standard and Xamarin.Forms. 

The over bindings and Code behind Systems work for me. Just the Command pattern seems to be buggy.
There are plans to implement some more missing methods to this interface? I'm specifically looking for InsertPageBefore and PopAsync. Thanks.


running the latest master branch code and testing 'monkey' gives the following error:

Î» dotnet run --project samples/Samples.csproj
PRESENT http://localhost:8080/sample-picker
Listening at http://*:8080/...
GET /sample-picker
GET /ooui.js
WEBSOCKET /sample-picker
GET /monkeys
GET /ooui.js
Failed to create element: System.NullReferenceException: Object reference not set to an instance of an object.
   at Xamarin.Forms.Grid.AssignAbsoluteCells() in D:\a\1\s\Xamarin.Forms.Core\GridCalc.cs:line 92
   at Xamarin.Forms.Grid.MeasureGrid(Double width, Double height, Boolean requestSize) in D:\a\1\s\Xamarin.Forms.Core\GridCalc.cs:line 483
   at Xamarin.Forms.Grid.OnSizeRequest(Double widthConstraint, Double heightConstraint) in D:\a\1\s\Xamarin.Forms.Core\GridCalc.cs:line 60
   at Xamarin.Forms.VisualElement.OnMeasure(Double widthConstraint, Double heightConstraint) in D:\a\1\s\Xamarin.Forms.Core\VisualElement.cs:line 776
   at Xamarin.Forms.VisualElement.GetSizeRequest(Double widthConstraint, Double heightConstraint) in D:\a\1\s\Xamarin.Forms.Core\VisualElement.cs:line 658
   at Xamarin.Forms.Layout.GetSizeRequest(Double widthConstraint, Double heightConstraint) in D:\a\1\s\Xamarin.Forms.Core\Layout.cs:line 132
   at Xamarin.Forms.VisualElement.Measure(Double widthConstraint, Double heightConstraint, MeasureFlags flags) in D:\a\1\s\Xamarin.Forms.Core\VisualElement.cs:line 705
   at Ooui.Forms.Renderers.ListViewRenderer.CalculateHeightForCell(Cell cell) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\Renderers\ListViewRenderer.cs:line 284
   at Ooui.Forms.Renderers.ListViewRenderer.UpdateItems() in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\Renderers\ListViewRenderer.cs:line 191
   at Ooui.Forms.Renderers.ListViewRenderer.OnElementChanged(ElementChangedEventArgs`1 e) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\Renderers\ListViewRenderer.cs:line 61
   at Ooui.Forms.VisualElementRenderer`1.SetElement(TElement element) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\VisualElementRenderer.cs:line 121
   at Ooui.Forms.VisualElementRenderer`1.Ooui.Forms.IVisualElementRenderer.SetElement(VisualElement element) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\VisualElementRenderer.cs:line 87
   at Ooui.Forms.Platform.CreateRenderer(VisualElement element) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\Platform.cs:line 84
   at Ooui.Forms.VisualElementPackager.OnChildAdded(VisualElement view) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\VisualElementPackager.cs:line 71
   at Ooui.Forms.VisualElementPackager.Load() in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\VisualElementPackager.cs:line 40
   at Ooui.Forms.VisualElementRenderer`1.SetElement(TElement element) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\VisualElementRenderer.cs:line 109
   at Ooui.Forms.VisualElementRenderer`1.Ooui.Forms.IVisualElementRenderer.SetElement(VisualElement element) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\VisualElementRenderer.cs:line 87
   at Ooui.Forms.Platform.CreateRenderer(VisualElement element) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\Platform.cs:line 84
   at Ooui.Forms.VisualElementPackager.OnChildAdded(VisualElement view) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\VisualElementPackager.cs:line 71
   at Ooui.Forms.VisualElementPackager.Load() in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\VisualElementPackager.cs:line 40
   at Ooui.Forms.VisualElementRenderer`1.SetElement(TElement element) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\VisualElementRenderer.cs:line 109
   at Ooui.Forms.VisualElementRenderer`1.Ooui.Forms.IVisualElementRenderer.SetElement(VisualElement element) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\VisualElementRenderer.cs:line 87
   at Ooui.Forms.Platform.CreateRenderer(VisualElement element) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\Platform.cs:line 84
   at Ooui.Forms.Platform.AddChild(VisualElement view) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\Platform.cs:line 167
   at Ooui.Forms.Platform.SetPage(Page newRoot) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\Platform.cs:line 127
   at Xamarin.Forms.PageExtensions.CreateElement(Page page) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\PageExtensions.cs:line 40
   at Xamarin.Forms.PageExtensions.GetOouiElement(Page page) in D:\a\Repos\praeclarum\Ooui\Ooui.Forms\PageExtensions.cs:line 30
   at Samples.MonkeysSample.CreateElement() in D:\a\Repos\praeclarum\Ooui\samples\MonkeysSample.cs:line 17
   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)
   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)
   at System.Lazy`1.CreateValue()
   at Ooui.UI.ElementHandler.GetElement() in D:\a\Repos\praeclarum\Ooui\Ooui\UI.cs:line 345
   at Ooui.UI.<ProcessWebSocketRequest>d__65.MoveNext() in D:\a\Repos\praeclarum\Ooui\Ooui\UI.cs:line 521
I'm curious if there are plans to update the package version hosted on nuget with all the latest changes in master of Ooui. Specifically, I'm looking at using Ooui with xamarin.forms 3.6.xxx but the version that is out on nuget is 2.5.x. 

There have been a lot of great changes merged into master since last year, but nuget seems to have gotten stale with the packages.  It would be great if these changes could be made available without pulling a submodule of the repo.
Hello!

I'm really interested into Ooui. For the project I'm considering it, one of the things that I need to do is to embed into the HTML existing 3rd party JavaScript controls, for example a photo gallery component.

Is this something that we should be able to do in Ooui without problems? In the example of the photo gallery, adding a 3rd party control means modifying the HEAD of the HTML document to reference external JS and CSS files, and then executing some JavaScript code on the document. The library will then create new elements inside the document and attach handlers to their events.

Given that all this handling of elements happens in a lower level of abstraction respective to Ooui, is this something that you see feasible? Or is the engine going to compare versions and run over all the 'rogue' elements and their event handlers, that were created with nasty injected JavaScript?

Thank you!!
This addresses the issues in 217 222  and 227, with separate issues to reflect different facets, now all addressed in proposed fixes.  It resolves for us a final issue in porting a large complicated app to the magnificence of Ooui, which we are using for a production project.

The problem is that WebView works only with a url passed to iframe src, and not with text input.

This seems a show stopper because the best way to have pretty screens is to use an html editor to produce html text files for importing into Xamarin Forms.  Given the limitation, these files could be loaded as files via a url, but it's slow and inefficient poor practice to keep/maintain contents on an external source.  It's a real leg up to load these as text directly into WebView, and very frequently needed.

An impediment is that different browsers and versions handle text input to iframe differently. We have experimented with various approaches to this and found many things that don't work (e.g. polyfill) and two solutions that seem reasonable. 

We are not presenting the second option, which we prefer for ourselves, to actually detect the browser and respond accordingly.  This will support older browsers and has fallback in case useragent syntax should change, but  is a bit of black art that we feel is too time=consuming for Frank to evaluate and personally test without very extensive discussins and testing, given all his responsibilities and interests.

The best option, we feel is one that is very simple, i.e. just changing the iframe load from src to srcdoc, which is now html standard and being adopted widely, but not bothering with data:text conventions etc. that can make older versions of browsers work.  With this change, text input to WebView will in fact be implemented, but only in a forward looking way.  It works with current Chrome, Firefox, etc. and will soon with Edge, where srcdoc is already implemented for next release.  It should work with other browsers that properly implement srcdoc.  It will not work with legacy versions even where these can be made to work with browser version detection. (Note some caching issues for the latter.)  An ugly thing is that it doesn't work with IE 11 that is in Visual Studio 2017!!

If one is satisfied to only support browsers as they support the recent srcdoc standard this approach might recommend itself.  If one is doing production and worried about all the browsers not upgraded then our other more involved solution might be preferred.  Depending on this and evalution of the fix, issues 217 222  and 227 might be considered closed in a fashion.  We leave these judgments to Frank who will want to preserve his elegant architecture and careful software practices. Issues around sandbox might be approached by adopting the most secure option then only backing off as time reveals it to be wise.  Note that for ourselves we do not pursue any javascript solutions and the various considerations that they entail.

We present the fix below.  Please note that this has been so time consuming on our critical path project that we can't generate a pull request at present. Apologies: if this causes difficulties we may be able to do it in a month or two.  We need to concentrate on product first.

1) Code changes in iframe.cs inside the long self-documenting ifdef "BiasIframeToSupportSrcdocOnlyRecentBrowsersNoDetect":

        public string Source
        {
            get => GetStringAttribute ("src", null);
            set => SetAttributeProperty ("src", value);
        }
#if DETECTREQUEST || BiasIframeToSupportSrcdocOnlyRecentBrowsersNoDetect
        public string srcdoc //tryfix trynew
        {
            get => GetStringAttribute("srcdoc", null);
            set => SetAttributeProperty("srcdoc", value);
        }
        public string sandbox //tryfix trynew
        {
            get => GetStringAttribute("sandbox", null);
            set => SetAttribute("sandbox", string.Empty);
        }
#endif //detectrequest
        public Iframe ()
            : base ("iframe")
        {
        }
    }
}

2) Code changes in WebViewRenderer.cs:

if (_iframe != null)
{
#if BiasIframeToSupportSrcdocOnlyRecentBrowsersNoDetect
   _iframe.srcdoc = html;
   _iframe.sandbox = null; // security but research more, might fail some cases
#else // orig code, notBiasIframeToSupportSrcdocOnlyRecentBrowsersNoDetect
     iframe.Source = html;  // generally fails, html text input to webview not implemented
#endif // BiasIframeToSupportSrcdocOnlyRecentBrowsersNoDetect
 }






It was hard to find the message pump bug but at all the logical junctures where we might have given up, we were enjoying learning the code and really liking the whole endeavor so that inspired us to keep on.

Now, however, we did go back and flip on our test to see if WebView works from raw text as opposed to url input.  Unfortunately, it doesn't even when we verify the other tag closure fix is active (buttons etc. are active).

So these are separate bugs.

We are hoping this second one might be easy for you to see and fix, knowing the code thoroughly.

Thanks for everything you've created here.  It's magnificent.
Needs to be tested.