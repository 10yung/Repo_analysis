https://travis-ci.org/hyperhq/hyperstart/builds/459648651
https://travis-ci.org/hyperhq/hyperstart/builds/459640064

Both of them got:
I1126 09:00:35.252712   22518 libvirt.go:645] domainXML: <domain type="qemu"><name>vm-RZGreCzcOF</name><memory unit="MiB">128</memory><maxMemory unit="MiB" slots="1">32768</maxMemory><vcpu placement="static" current="1">8</vcpu><os supported="yes"><type arch="x86_64" machine="pc-i440fx-2.1">hvm</type><kernel>/var/lib/hyper/kernel</kernel><initrd>/var/lib/hyper/hyper-initrd.img</initrd><cmdline>console=ttyS0 panic=1 no_timer_check iommu=off clocksource=acpi_pm notsc</cmdline></os><features><acpi></acpi></features><cpu mode="host-model" match="exact"><model fallback="allow">core2duo</model><numa><cell id="0" cpus="0-7" memory="131072" unit="KiB"></cell></numa></cpu><on_poweroff>destroy</on_poweroff><on_reboot>destroy</on_reboot><on_crash>destroy</on_crash><devices><emulator>/usr/bin/qemu-system-x86_64</emulator><controller type="pci" index="0" model="pci-root"></controller><controller type="virtio-serial" index="0"><address type="pci" domain="0x0000" bus="0x00" slot="0x02" function="0x00"></address></controller><controller type="scsi" index="0" model="virtio-scsi"><address type="pci" domain="0x0000" bus="0x00" slot="0x03" function="0x00"></address></controller><controller type="usb" model="none"></controller><filesystem type="mount" accessmode="squash"><driver type="path"></driver><source dir="/var/run/hyper/vm-RZGreCzcOF/share_dir"></source><target dir="share_dir"></target><address type="pci" domain="0x0000" bus="0x00" slot="0x04" function="0x00"></address></filesystem><channel type="unix"><source mode="bind" path="/var/run/hyper/vm-RZGreCzcOF/hyper.sock"></source><target type="virtio" name="sh.hyper.channel.0"></target></channel><channel type="unix"><source mode="bind" path="/var/run/hyper/vm-RZGreCzcOF/tty.sock"></source><target type="virtio" name="sh.hyper.channel.1"></target></channel><console type="unix"><source mode="bind" path="/var/run/hyper/vm-RZGreCzcOF/console.sock"></source><target type="serial" port="0"></target></console><memballoon model="virtio"><address type="pci" domain="0x0000" bus="0x00" slot="0x05" function="0x00"></address></memballoon></devices><seclabel type="none"></seclabel><clock offset="utc"><timer name="rtc" track="wall" tickpolicy="catchup"><catchup></catchup></timer></clock><qemu:commandline></qemu:commandline></domain>
E1126 09:00:35.475466   22518 libvirt.go:653] Fail to launch domain [Code-1] [Domain-10] internal error: process exited while connecting to monitor: qemu-system-x86_64: CPU feature ssbd not found
I1126 09:00:35.475556   22518 vm.go:788] VM[vm-RZGreCzcOF] GetVm succeeded

But hyperd doesn't set CPU feature ssbd.

Hi, is there a command argument to check hyperd/hyperctl version?
not in the commands / arguments here https://docs.hypercontainer.io/reference/index.html (and not in hyperctl / hyperd --help)
Is it possible to make a Windows platform 
 Hyperctl load command works good without -r option while adding "-r aaa" makes it fail. 

We have many issues fixed since the last release, it is time to release 1.1.

And the 2.x will have the support of new kata containers as runtime.
Guys, anyone had these issues before?

```
jun 27 01:42:33 codius.rsamail.ru systemd[1]: Started hyperd.
jun 27 01:42:33 codius.rsamail.ru systemd[1]: Starting hyperd...
jun 27 01:42:33 codius.rsamail.ru hyperd[23533]: E0627 01:42:33.951425   23533 daemondb.go:23] open leveldb file failed, leveldb/storage: corrupted or incomplete meta file
jun 27 01:42:33 codius.rsamail.ru hyperd[23533]: E0627 01:42:33.952331   23533 hyperd.go:117] The hyperd create failed, leveldb/storage: corrupted or incomplete meta file
```
My OS is:
```
Static hostname: codius.rsamail.ru
Operating System: CentOS Linux 7 (Core)
CPE OS Name: cpe:/o:centos:centos:7
Kernel: Linux 3.10.0-862.3.3.el7.x86_64
Architecture: x86-64
```

Hi Guys

I'd like to set up small kubernetes clusters for a workshop and since we're running hyperd I thought I'd try an run the kubelet in a hyperd pod and let it start all it's  dependencies in there!

So my question is - Is it possible to get the kubelet to run inside a hyperd VM? The main challenge I see is getting Docker to run inside the VM so the Kubelet can start controllers, apisurfaces etc... Does anybody know if a) that's possible and b) has any advice on how it could be done?

I've been struggling to debug an issue with the standard [consul image](https://hub.docker.com/_/consul/https://hub.docker.com/_/consul/) when running on docker+runv and/or pure hyperctl stack.

First of all, when running docker+runc (on the same fresh Ubuntu 16.04 bare metal box for all these examples -- I also tried on centos 7 bare metal and two other ubuntu 16.04 bare metal boxes), I get the following successful start:

```bash
root@hyperdev-02:~# docker run -d   --name consul   -p "8500:8500"   -h "consul"   consul agent -server -bootstrap -client "0.0.0.0"
a991885eddd23412dfceb3b5bbd56d1e52b0ef67e29ae54405e3012da2576c7b
root@hyperdev-02:~# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                                                      NAMES
a991885eddd2        consul              "docker-entrypoint..."   45 seconds ago      Up 21 seconds       8300-8302/tcp, 8301-8302/udp, 8600/tcp, 8600/udp, 0.0.0.0:8500->8500/tcp   consul
root@hyperdev-02:~# docker logs a991885eddd2
bootstrap = true: do not enable unless necessary
==> Starting Consul agent...
==> Consul agent running!
           Version: 'v1.1.0'
           Node ID: 'fb56a8fd-1dcc-70ae-231e-19f4fc012a14'
         Node name: 'consul'
        Datacenter: 'dc1' (Segment: '<all>')
            Server: true (Bootstrap: true)
       Client Addr: [0.0.0.0] (HTTP: 8500, HTTPS: -1, DNS: 8600)
      Cluster Addr: 172.17.0.2 (LAN: 8301, WAN: 8302)
           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: false

==> Log data will now stream in as it occurs:

    2018/05/27 11:45:24 [INFO] raft: Initial configuration (index=1): [{Suffrage:Voter ID:fb56a8fd-1dcc-70ae-231e-19f4fc012a14 Address:172.17.0.2:8300}]
    2018/05/27 11:45:24 [INFO] raft: Node at 172.17.0.2:8300 [Follower] entering Follower state (Leader: "")
    2018/05/27 11:45:24 [INFO] serf: EventMemberJoin: consul.dc1 172.17.0.2
    2018/05/27 11:45:24 [INFO] serf: EventMemberJoin: consul 172.17.0.2
    2018/05/27 11:45:24 [INFO] agent: Started DNS server 0.0.0.0:8600 (tcp)
    2018/05/27 11:45:24 [INFO] consul: Adding LAN server consul (Addr: tcp/172.17.0.2:8300) (DC: dc1)
    2018/05/27 11:45:24 [INFO] agent: Started DNS server 0.0.0.0:8600 (udp)
    2018/05/27 11:45:24 [INFO] consul: Handled member-join event for server "consul.dc1" in area "wan"
    2018/05/27 11:45:24 [INFO] agent: Started HTTP server on [::]:8500 (tcp)
    2018/05/27 11:45:24 [INFO] agent: started state syncer
    2018/05/27 11:45:30 [WARN] raft: Heartbeat timeout from "" reached, starting election
    2018/05/27 11:45:30 [INFO] raft: Node at 172.17.0.2:8300 [Candidate] entering Candidate state in term 2
    2018/05/27 11:45:30 [INFO] raft: Election won. Tally: 1
    2018/05/27 11:45:30 [INFO] raft: Node at 172.17.0.2:8300 [Leader] entering Leader state
    2018/05/27 11:45:30 [INFO] consul: cluster leadership acquired
    2018/05/27 11:45:30 [INFO] consul: New leader elected: consul
    2018/05/27 11:45:30 [INFO] consul: member 'consul' joined, marking health alive
    2018/05/27 11:45:30 [INFO] agent: Synced node info
```

And subsequently, the consul server works as expected.

Now, with docker+runv, I run the same `docker run ...` command as above, but I get the following output in the docker logs and the container exits:

```bash
root@hyperdev-02:~# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                         PORTS               NAMES
bcadbb56da7c        consul              "docker-entrypoint..."   10 seconds ago      Exited (1) 6 seconds ago                           consul
root@hyperdev-02:~# docker logs bcadbb56da7c
bootstrap = true: do not enable unless necessary
==> Starting Consul agent...
==> Error starting agent: Failed to start Consul server: Failed to start Raft: invalid argument
```

The process (and container) exit with the mysterious "Failed to start Consul server" error...

Trying it with `hyperctl` (slightly different command as `hyperctl` doesn't support the `-h` host flag):

```bash
root@hyperdev-02:~# hyperctl run -d --name consul --publish 8500:8500 consul agent -server -bootstrap -client "0.0.0.0"
Using default tag: latest
latest: Pulling from library/consul
ff3a5c916c92: Pull complete 
4f7ceec429a3: Pull complete 
479d56dd1427: Pull complete 
fe7ac0cf7b6b: Pull complete 
e2db5deeb099: Pull complete 
Digest: sha256:1c7b20c43b933c34e52e56f33904dda64cd78f085cab670cfc7c3ee34429a249
Status: Downloaded newer image for consul:latest
sha256:1c7b20c43b933c34e52e56f33904dda64cd78f085cab670cfc7c3ee34429a249: Pulling from library/consul
Digest: sha256:1c7b20c43b933c34e52e56f33904dda64cd78f085cab670cfc7c3ee34429a249
Status: Downloaded newer image for consul@sha256:1c7b20c43b933c34e52e56f33904dda64cd78f085cab670cfc7c3ee34429a249
POD id is consul
Time to run a POD is 35350 ms
root@hyperdev-02:~# hyperctl list
POD ID              POD Name            VM name             Status
consul              consul              vm-taqgLYUXKv       running
root@hyperdev-02:~# hyperctl logs consul
bootstrap = true: do not enable unless necessary
==> Starting Consul agent...
==> Error starting agent: Failed to start Consul server: Failed to start Raft: invalid argument
```

The first thing that I noticed is that when running with `runv`, the `PORTS` in the `docker ps` command are missing... So I have also tried running the container with `--net=host` which doesn't seem to work with `runv` for whatever reason... And then I also tried to just `--publish` all of the ports that are exposed in the `consul:latest` Dockerfile, but that yielded the same error...

On a separate note, it'd be great to have some sort of a lookup table/doc article with a list of known incompatabilities+workarounds for normal docker containers running on the `runv` stack... Maybe this exists, but I haven't been able to uncover it. Thanks!

PR #692 fixed port mapping but was after the release of 1.0.0

Therefore, the latest available binaries cannot handle an example like `hyperctl run -d --publish 80:80 nginx` without breaking on the iptables command fixed by #692 

Can we make a new release with the latest code so networking works out of the box and we don't have to build from source?
 