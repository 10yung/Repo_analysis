Dear @mkdynamic and other maintainers,

I'm a frequent user of this gem. Most of the project I worked on till now, this was an essential part. You guys really did a great job creating and maintaining this gem. We really appreciate it as a community.

I can understand life happens, priorities change, and someone cannot focus on the same thing all the time.

I'm really interested in taking the wheel and maintaining the gem until life happens to me as well! Looking forward to hearing from you guys.
**Version 3.0**
Released May 1, 2018 | Available until July 26, 2020

https://developers.facebook.com/docs/graph-api/changelog/version3.0

Facebook graph API is now at V4.0 and this gem current graph version is v2.10 and  will be deprecated on Nov 05, 2019 will there be any updates on this gem anytime soon ? is there an alternative to this gem ?
Hi all,
I have been struggling for a long while trying to determine the correct approach to use the omniauth-facebook gem.
I am running my API on port 3001 while my frontend (in my case coded on ReactJS) is running on port 3000. As per what I have been researching, this is a common issue but there is not a clear answer nor documentation here. I am not expecting to use any additional SDK as I understand that this gem should handle all I need to simply login through FB.
When manually running on the browser hhtp://localhost:3001/auth/facebook, I can see on Rails console that route is being hit and things are moving forward as expected; also, I am seeing that callback route is hit and I am getting back a JSON with UID, client and auth_token.
However, when trying to reach this through my react app, I am getting a CORS error. I am simply making an AXIOS.get(/auth/facebook) which gets routed into my API as I have configured the proxy to pass calls received on my frontend into the API. My console seems to be hit by my request as I am seeing the following:
![image](https://user-images.githubusercontent.com/16242832/64482773-82d55d00-d1ce-11e9-91b6-a0c709d802cb.png)

However, on the Chrome console, I am seeing a CORS issue as per the following image:
![image](https://user-images.githubusercontent.com/16242832/64482779-954f9680-d1ce-11e9-98ab-6816cd2d3ce8.png)

For sure, I have already tried adding the following code snippet and still getting the same error:
![image](https://user-images.githubusercontent.com/16242832/64482788-b87a4600-d1ce-11e9-9d86-6486ef0c79e1.png)

Having said this, could someone answe rme the following questions:
a) which is the expected way to trigger the initial call into /auth/facebook route? Kindly do not FW me to read the main repo doc as it does not say this solution there.
b) has someone solved the present issue on a way which is not by adding a link into http://localhost:3001/auth/facebook? Would this be a correct approach? It sounds weird to me.

Let me know your comments.
Thanks in advance.
Alejandro.  
### Configuration

- Provider Gem: `omniauth-facebook 5.0.0`
- Other Gems: `devise 4.6.2` + `omniauth-google-oauth2 0.7.0`
- Ruby Version: `2.6.2`
- Framework: `rails 6.0.0.rc2`

### Expected Behavior

Authentication to facebook or google_oauth2 should succeed (returning `request.env['omniauth.auth']`).
I followed the Devise guide to integrate with Omniauth ([here](https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview)), taking into account Omniauth's recommendations when integrating into a Rails API ([here](https://github.com/omniauth/omniauth)).

### Actual Behavior

Client-side, I am able to connect to facebook or google_oauth2 with OmniAuth. But server-side,  but I get an Authentication failure!
In the rails console, I have different error messages for Facebook and for Google as I request different authentication strategies, using One-time Code Flow (Hybrid Authentication) with Google.

- For Facebook:
```
ERROR -- omniauth: (facebook) Authentication failure! no_authorization_code: OmniAuth::Strategies::Facebook::NoAuthorizationCodeError, must pass either a `code` (via URL or by an `fbsr_XXX` signed request cookie)
```
- For Google:
```
ERROR -- omniauth: (google_oauth2) Authentication failure! csrf_detected: OmniAuth::Strategies::OAuth2::CallbackError, csrf_detected | CSRF detected
```
I found kind of a workaround by adding `provider_ignores_state: true` in the Devise initializer but it doesn't seem to be secure...

config/initializers/devise.rb
```ruby
  config.omniauth :google_oauth2, google_app_id, google_app_secret, scope: 'email,public_profile', provider_ignores_state: true
```

### Steps to Reproduce

config/initializers/devise.rb
```ruby
  # ==> OmniAuth
  # Add a new OmniAuth provider. Check the wiki for more information on setting
  # up on your models and hooks.
  facebook_app_id = Rails.application.credentials.apis[:facebook][:oauth2][:app_id]
  facebook_app_secret = Rails.application.credentials.apis[:facebook][:oauth2][:app_secret]
  google_app_id = Rails.application.credentials.apis[:google][:oauth2][:app_id]
  google_app_secret = Rails.application.credentials.apis[:google][:oauth2][:app_secret]

  config.omniauth :facebook, facebook_app_id, facebook_app_secret, scope: 'email,public_profile'
  config.omniauth :google_oauth2, google_app_id, google_app_secret, scope: 'email,public_profile'
````

app/config/application.rb
```ruby
    # To integrate OmniAuth into a Rails API.
    config.session_store :cookie_store, key: '_interslice_session'
    config.middleware.use ActionDispatch::Cookies
    config.middleware.use ActionDispatch::Session::CookieStore, config.session_options
```

app/models/user.rb
```ruby
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable,
         :omniauthable, omniauth_providers: %i[facebook google_oauth2]
```

config/routes.rb
```ruby
  devise_for :users,
             only: :omniauth_callbacks,
             controllers: { omniauth_callbacks: 'v1/omniauth_callbacks' }
```

app/controllers/v1/omniauth_callbacks_controller.rb
```ruby
module V1
  class OmniauthCallbacksController < Devise::OmniauthCallbacksController
    def facebook
      generic_callback
    end

    def google_oauth2
      generic_callback
    end

    private

    def generic_callback
      auth = request.env['omniauth.auth']

      user = User.from_omniauth(auth)

      if user.persisted?
        return serialize_response(
          resource: user,
          options: response_options(user_id: user.id),
          status: :created
        )
      end

      # Raise custom 'Unauthenticated' error message.
      raise Errors::Unauthenticated.new(message: 'Invalid social credentials')
    end
  end
end
```
By using React and Facebook SDK inside it, to authenticate in XHR, things have been not nice to set a cookie. 

To overcome this issue, I've patched the signed request to check it both in cookie and params.

That way, the signed_request can be sent as a param to perform the same way as it would if one had the cookie set.
Hi, I'm trying to register login with my React frontend. On the front end, I use the react-faceboo-login component. On the response, I get the response. I add to the callback url 
 ?code='signedRequest' and pass the response as the POST body. 

On the Rails side, I get the following error. 

Authentication failure! invalid_credentials: OAuth2::Error, {"message"=>"Invalid verification code format.", "type"=>"OAuthException", "code"=>100, "fbtrace_id"=>"A74qVKtjjtF"}: 
{"error":{"message":"Invalid verification code format.","type":"OAuthException","code":100,"fbtrace_id":"A74qVKtjjtF"}}

I've been checking my redirect urls, and so on. But seems not the issue here. I've specified FB v3.0. I tried with 2.12 and 3.3 but I get the same issue. 

I'm not sure how to debug further. 

Thanks for your ideas .
Hi there, 
Do we have some way to prompt the pages permissions only on the first time that the user is logging in? 
I have all the permissions approved on my facebook app (manage_pages, pages_messaging, pages_messaging_subscriptions), but even with that, when i'm logging in i'm being prompted by facebook to authorize managing pages, etc...
