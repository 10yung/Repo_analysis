Hello. I try to use `--compiler` option:

```sh
ts-node-dev --compiler ttypescript ./src/index.ts
```

though it has no effect.

Everything works with:

```sh
 ts-node --compiler ttypescript ./src/index.ts
```

I looked into source code, and everything seems to be in place, so I cannot even submit PR.

Any idea, why it may happen? I can create example repository, if that helps
When I run:

    ./node_modules/ts-node-dev/bin/ts-node-dev --respawn ./src/server.js --ignore-watch /src/next

on version 1.0.0-pre.44, the `--ignore-watch` argument has no effect.

I put in a `console.log(opts)` in the `bin/ts-node-dev` file and it prints:

```js
{
  _: [ './src/server.js', '--ignore-watch', '/src/next' ],
  'all-deps': false,
  deps: true,
  dedupe: false,
  poll: false,
  respawn: true,
  notify: true,
  fast: false,
  F: false,
  disableWarnings: false,
  'disable-warnings': false,
  'no-cache': false,
  cache: false,
  'type-check': false,
  'transpile-only': false,
  transpileOnly: false,
  T: false,
  files: false,
  pretty: false,
  'prefer-ts': false,
  'exec-check': false,
  debug: false,
  'log-error': false,
  'prefer-ts-exts': false,
  'tree-kill': false,
  clear: false,
  cls: false,
  'exit-child': false,
  rs: true,
  priorNodeArgs: []
}
```

which seems not right. maybe a bug in minimalist? or the config?
As you can see here: https://github.com/whitecolor/ts-node-dev/blob/master/lib/index.js#L192

The script calls `notify` whenever the process is restarted, and notifications can be disabled completely using the `--notify=false` flag on the CLI.

This is good. But! It would be cool to have the option of notifications only on errors. 

As it is right now, I have to choose between being flooded with restart notifications, and occasionally seeing an error notification, or disabling notifications and not knowing when my TS doesn't compile or something.
```
=== npm audit security report ===                        
                                                                                
# Run  npm update tree-kill --depth 2  to resolve 1 vulnerability
                                                                                
  High            Command Injection                                             
  Package         tree-kill                                                     
  Dependency of   ts-node-dev [dev]                                             
  Path            ts-node-dev > tree-kill                                       
                                                                                
  More info       https://npmjs.com/advisories/1432      
```

`tree-kill` package should be upgraded to version `1.2.2` or later according to npm:

```
Overview

Versions of tree-kill prior to 1.2.2 are vulnerable to Command Injection. The package fails to sanitize values passed to the kill function. If this value is user-controlled it may allow attackers to run arbitrary commands in the server. The issue only affects Windows systems.

Remediation

Upgrade to version 1.2.2 or later.
```
I run my my TypeScript app as follows:

```bash
$ ts-node-dev --transpileOnly --ignore-watch node_modules src/client.ts
```

`src/client.ts` is just as follows:

```typescript
import * as process from 'process';
import * as repl from 'repl';

repl.start({ prompt: 'terminal> ' });
```

The REPL terminal becomes completely unusable. If I press Enter I get `rl.on line`. If I type a char, it's not written (just one of each 2 or 3 chars are written). I have to press `Ctrl+C` 4 times to exit the process, etc etc. 100% unusable.

This does not happen if I run my app without `ts-node-dev`.

Do I miss something? I see that, somehow, `ts-node-dev` opens a REPL by itself, but it's 100% unclear for me how to use it. Anyway, is there any way to disable such a REPL?

BTW, running with `ts-node` as follows the issue does **not** happen (I can use my REPL terminal perfectly):

```bash
$ ts-node src/client.ts
```

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.10 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.10...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.10&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/whitecolor/ts-node-dev/network/alerts).

</details>
There is a lot of ```console.log``` functions without wrapper so there is impossible to switch off file-changes-logging. 

I would like to disable the similar places:
```js
 function start() {
    console.log(
      'Using ts-node version',
      tsNodeVersion + ', typescript version',
      tsVersion
    )
...
```

I suggest to add option **verbose** (bool) for this (for completely disabling console.log from ts-node-dev)
Hello!  This project is wonderful.

One of the newer features `ts-node` has added is a symbol on the `process` that can be used to detect if we are running in typescript or JS.  This is very helpful when developing frameworks (like www.actionherojs.com) to know which types of files to load in... even when running as a distributed javascript package.

The ts-node converstation: https://github.com/TypeStrong/ts-node/pull/858

Could this be ported that to ts-node-dev?

It disables logging of new line listener:

![image](https://user-images.githubusercontent.com/1016523/68123418-4dc35d80-ff26-11e9-8ff8-39902e61c701.png)

Reproduction steps:

1. run `ts-node-dev`
2. press \<Enter\> button
