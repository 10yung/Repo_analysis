Hi

Does this framework support horizontal scaling?
Which means
1. stateless multiple node.js instances behind a load balancer.
2. central state storage (ex. MongoDB, redis , ...)

It seems that single point of failure might happen in this framework?
Correct me if I'm wrong.
Thanks

Your test (pluginplayer.test.js) is OK
```
const gametest = {
  playerSetup: () => ({ A: 1 }),
  plugins: [PluginPlayer],  
};
const TestClient = Client({ 
  game : gametest,
  debug: true,
  numPlayers: 2,
  multiplayer: Local()
 });
// eslint-disable-next-line
const App = () => (<TestClient playerID="0" />);
```

but with Phases, it seems that **G.players = {}**
```
const gametest = {
  playerSetup: () => ({ A: 1 }),
  plugins: [PluginPlayer],
  phases : {
    test : { start : true}
  }   
};
```

```js
{
  turn: {
    onBegin: (G, ctx) => {
      if (ctx.turn < 10) ctx.events.endTurn();    // this is a no-op
    }
  }
}
```

This [check](https://github.com/nicolodavis/boardgame.io/blob/master/src/core/events.js#L49) prevents the `endTurn` because the `Events` class is attached at a point where the turn was 0 [here](https://github.com/nicolodavis/boardgame.io/blob/master/src/core/initialize.js#L36), but by the time the event is processed the turn is incremented to 1.
There are lots of analysis options that would be opened up if it was possible to collect more information about what happens during games when using Simulate.

For example, if the sequence of moves could be accessed, it would mean that we could see how often different kinds of moves are used. If mid-game states could be accessed then things like average scores at different points in the game could be looked at.  If the enumerated moves could be accessed then the average branching factor could be calculated.

Rather than picking specific things and making them part of the game state, I propose enabling code that uses Simulate to pass in handler functions that will be called as the simulation reaches particular events (entering and leaving stages, turns and phases I guess) and that the Bot enables a handler function to be specified that will be called when a bot has enumerated its moves for a turn. 

With this approach, it should be possible for code to grab what it needs without adding to the overall state overhead. 
Right now we allow adding "all" players or "other" players to the set of active players (and they can make moves in any order).  However, you might also want them to be able to perform actions one after the other (all inside the same turn).
The [documentation for the AI framework](https://boardgame.io/documentation/#/tutorial?id=adding-ai) is lacking, currently only giving an example of `enumerate` without giving much context about how to use it.  I had to dig into the code to see how and when the bots were instantiated, and what their API was.
When using the out-of-box MCTS in a game where the number of available moves (and therefore number of possible game states) declines as the game progresses, the time to calculate the best move reduces over time.

In other words: the _time_ to calculate _N_ `iterations` reduces as the `turn` count increases.

Currently, the `iterations` value is hard-coded when the bot is instantiated.  This should be updated to accept a function (much like the `objectives` function) that can return a dynamic number of iterations to support scenarios such as increasing the iteration count as the game progresses while the cost (in time) stays relatively flat.

The [AlphaBeta library](https://github.com/panchishin/alphabeta) offers [an alternative solution](https://github.com/panchishin/alphabeta#alphabetastepformilliseconds-milliseconds--callback-) which achieves the same effect of taking the same amount of time - running the algorithm for as many iterations as it can until the wall time expires - which also seems like a great option.
When it's a player's turn, update favicon with badge using https://github.com/ejci/favico.js.
This helps the user to play long-running board games while doing other things by notifying them it's their turn.
Any plan for out of the box in game chat support?
This would be very helpful.
Is there any reason why `ctx.currentPlayer` is string `"0"` rather than `0`.