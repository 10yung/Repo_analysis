
The compiler team is working on a standard policy around its external crates (see https://github.com/rust-lang/compiler-team/pull/19) -- we need to bring this crate into conformance, though the policy is not yet finalized, so it's not 100% clear what this means.
We don't presently have any unit tests...for anything. I think we should create a "base layer" of unit tests where we generate some simple operations and some random inputs and check that they get the correct result, using some kind of naive computation to act as an oracle.

[Roughly as described here.](https://github.com/rust-lang-nursery/datafrog/pull/11#issuecomment-444422500)
It could be interesting to have simple statistics, for example behind a feature flag, of the number of tuples and the time it took to merge and create them, for `Relation`s and/of `Variable`s.

There are commented out Drop impls in the code, e.g [here](https://github.com/rust-lang-nursery/datafrog/blob/master/src/lib.rs#L389-L397) as an example of the way to add the final tuple counts statistic.

Similarly, a `Duration` could be added to the merged relations, updating it in the operator functions, to display the time it took to create those tuples, as described a bit more [here](https://rust-lang.zulipchat.com/#narrow/stream/122657-wg-nll/subject/benchmarks/near/127073557) by Frank.