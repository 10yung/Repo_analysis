

### Steps to reproduce
- Configure `webpacker` to use TypeScript (default setup)
- Create React Functional Component and add to `slim` template 
```= react_component("HelloWorld", { name: 'my name'}, { prerender: true } )```
- Render component

FYI Functional component is:
```
import * as React from "react";

interface Props {
  name: string;
}

const HelloWorld: React.FunctionComponent<Props> = ({
  name = "Default name"
}) => {
  return (
    <h3>
      Hello from React and{" "}{name}!
    </h3>
  );
};

export default HelloWorld;
```

### Expected behavior
Should display component rendered server side. Without `prerender` the component renders as expected.

### Actual behavior
- Rails Error that Element Type is invalid

```
<ExecJS::ProgramError: Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.>" when prerendering HelloWorld with {"name":"my name"}
```

### System configuration
- Webpacker 4.2.2
- React-Rails 2.6.1
- Rect-UJS version ^2.6.1
- Ruby Version 2.4.9
- Rails Version 4.2.11

-------
When attempting to render a React Functional component in a `slim` template prerendering doesn't work. Without `prerender` set to `true` the component renders as expected. Not sure if this might be a problem with TypeScript, using a React functional component, using `slim` instead of `erb`, or another library issue.




### Summary

This enables us to easily override `getConstructor` to not use global
fallback, avoiding the all-consuming `try...catch`.

### Other Information

Here's the context:

Quoting https://github.com/reactjs/react-rails/issues/264#issuecomment-552326663

> Regarding `Encountered error "#<ExecJS::ProgramError: Invariant
> Violation: Element type is invalid: ...`:
>
> I think one of the core issues is that [module lookup uses
> `try...catch`](https://github.com/reactjs/react-rails/blob/master/react_ujs/src/getConstructor/fromRequireContextWithGlobalFallback.js#L11-L23).
> While the errors are logged to the console shim, that typically doesn't
> help as a later error (such as the invariant violation) will lead to a
> fatal error (triggering a 500). If that could be refactored to be a bit
> more intentional based on environment (instead of just reacting based on
> exceptions, or at the very least, throwing if the caught exception isn't
> very specific)


### Steps to reproduce

Run `rails server` and start your application.
Make a change to a jsx / tsx file, and save the file.

### Expected behavior
The application compiles the javascript, reloads in the browser and shows the changes.

### Actual behavior
The application appears to compile the javascript, reloads in the browser and **does not** show the changes. It appears as though React is *out of sync* with the rest of the application. 
After stopping and starting the server the changes appear.

### System configuration
**Webpacker version**: 4.0
**React-Rails version**: 2.5
**React_UJS version**: 2.5.0
**Rails version**: 6.0.0.rc2
**Ruby version**: 2.6.0


-------
In development, when making a large amount of javascript changes the application stops refreshing. It's almost as if the react changes are out of sync.
React hangs intermittently after saving a jsx / tsx file.
Bumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 2.11.5 to 3.1.11.
<details>
<summary>Release notes</summary>

*Sourced from [webpack-dev-server's releases](https://github.com/webpack/webpack-dev-server/releases).*

> ## v3.1.11
> <a name="3.1.11"></a>
> ## [3.1.11](https://github.com/webpack/webpack-dev-server/compare/v3.1.10...v3.1.11) (2018-12-21)
> 
> 
> ### Bug Fixes
> 
> * **bin/options:** correct check for color support (`options.color`) ([#1555](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1555)) ([55398b5](https://github.com/webpack/webpack-dev-server/commit/55398b5))
> * **package:** update `spdy` v3.4.1...4.0.0 (assertion error) ([#1491](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1491)) ([#1563](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1563)) ([7a3a257](https://github.com/webpack/webpack-dev-server/commit/7a3a257))
> * **Server:** correct `node` version checks ([#1543](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1543)) ([927a2b3](https://github.com/webpack/webpack-dev-server/commit/927a2b3))
> * **Server:** mime type for wasm in contentBase directory ([#1575](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1575)) ([#1580](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1580)) ([fadae5d](https://github.com/webpack/webpack-dev-server/commit/fadae5d))
> * add url for compatibility with webpack@5 ([#1598](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1598)) ([#1599](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1599)) ([68dd49a](https://github.com/webpack/webpack-dev-server/commit/68dd49a))
> * check origin header for websocket connection ([#1603](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1603)) ([b3217ca](https://github.com/webpack/webpack-dev-server/commit/b3217ca))
> 
> ## v3.1.10
> ## [2018-10-23](https://github.com/webpack/webpack-dev-server/compare/v3.1.9...v3.1.10)
> 
> 
> ### Bug Fixes
> 
> * **options:** add `writeToDisk` option to schema ([#1520](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1520)) ([d2f4902](https://github.com/webpack/webpack-dev-server/commit/d2f4902))
> * **package:** update `sockjs-client` v1.1.5...1.3.0 (`url-parse` vulnerability) ([#1537](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1537)) ([e719959](https://github.com/webpack/webpack-dev-server/commit/e719959))
> * **Server:** set `tls.DEFAULT_ECDH_CURVE` to `'auto'` ([#1531](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1531)) ([c12def3](https://github.com/webpack/webpack-dev-server/commit/c12def3))
> 
> ## v3.1.9
> No release notes provided.
> 
> ## v3.1.8
> ## [2018-09-06](https://github.com/webpack/webpack-dev-server/compare/v3.1.7...v3.1.8)
> 
> 
> ### Bug Fixes
> 
> * **package:** `yargs` security vulnerability (`dependencies`) ([#1492](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1492)) ([8fb67c9](https://github.com/webpack/webpack-dev-server/commit/8fb67c9))
> * **utils/createLogger:** ensure `quiet` always takes precedence (`options.quiet`) ([#1486](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1486)) ([7a6ca47](https://github.com/webpack/webpack-dev-server/commit/7a6ca47))
> 
> ## v3.1.7
> ## [2018-08-29](https://github.com/webpack/webpack-dev-server/compare/v3.1.6...v3.1.7)
> 
> 
> ### Bug Fixes
> 
> * **Server:** don't use `spdy` on `node >= v10.0.0` ([#1451](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1451)) ([8ab9eb6](https://github.com/webpack/webpack-dev-server/commit/8ab9eb6))
> 
> ## v3.1.6
> ## [2018-08-26](https://github.com/webpack/webpack-dev-server/compare/v3.1.5...v3.1.6)
> 
> 
> ### Bug Fixes
> 
></tr></table> ... (truncated)
</details>
<details>
<summary>Changelog</summary>

*Sourced from [webpack-dev-server's changelog](https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md).*

> ## [3.1.11](https://github.com/webpack/webpack-dev-server/compare/v3.1.10...v3.1.11) (2018-12-21)
> 
> 
> ### Bug Fixes
> 
> * **bin/options:** correct check for color support (`options.color`) ([#1555](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1555)) ([55398b5](https://github.com/webpack/webpack-dev-server/commit/55398b5))
> * **package:** update `spdy` v3.4.1...4.0.0 (assertion error) ([#1491](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1491)) ([#1563](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1563)) ([7a3a257](https://github.com/webpack/webpack-dev-server/commit/7a3a257))
> * **Server:** correct `node` version checks ([#1543](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1543)) ([927a2b3](https://github.com/webpack/webpack-dev-server/commit/927a2b3))
> * **Server:** mime type for wasm in contentBase directory ([#1575](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1575)) ([#1580](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1580)) ([fadae5d](https://github.com/webpack/webpack-dev-server/commit/fadae5d))
> * add url for compatibility with webpack@5 ([#1598](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1598)) ([#1599](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1599)) ([68dd49a](https://github.com/webpack/webpack-dev-server/commit/68dd49a))
> * check origin header for websocket connection ([#1603](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1603)) ([b3217ca](https://github.com/webpack/webpack-dev-server/commit/b3217ca))
> 
> 
> 
> <a name="3.1.10"></a>
> ## [3.1.10](https://github.com/webpack/webpack-dev-server/compare/v3.1.9...v3.1.10) (2018-10-23)
> 
> 
> ### Bug Fixes
> 
> * **options:** add `writeToDisk` option to schema ([#1520](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1520)) ([d2f4902](https://github.com/webpack/webpack-dev-server/commit/d2f4902))
> * **package:** update `sockjs-client` v1.1.5...1.3.0 (`url-parse` vulnerability) ([#1537](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1537)) ([e719959](https://github.com/webpack/webpack-dev-server/commit/e719959))
> * **Server:** set `tls.DEFAULT_ECDH_CURVE` to `'auto'` ([#1531](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1531)) ([c12def3](https://github.com/webpack/webpack-dev-server/commit/c12def3))
> 
> 
> 
> <a name="3.1.9"></a>
> ## [3.1.9](https://github.com/webpack/webpack-dev-server/compare/v3.1.8...v3.1.9) (2018-09-24)
> 
> 
> 
> <a name="3.1.8"></a>
> ## [3.1.8](https://github.com/webpack/webpack-dev-server/compare/v3.1.7...v3.1.8) (2018-09-06)
> 
> 
> ### Bug Fixes
> 
> * **package:** `yargs` security vulnerability (`dependencies`) ([#1492](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1492)) ([8fb67c9](https://github.com/webpack/webpack-dev-server/commit/8fb67c9))
> * **utils/createLogger:** ensure `quiet` always takes precedence (`options.quiet`) ([#1486](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1486)) ([7a6ca47](https://github.com/webpack/webpack-dev-server/commit/7a6ca47))
> 
> 
> 
> <a name="3.1.7"></a>
> ## [3.1.7](https://github.com/webpack/webpack-dev-server/compare/v3.1.6...v3.1.7) (2018-08-29)
> 
> 
> ### Bug Fixes
> 
> * **Server:** don't use `spdy` on `node >= v10.0.0` ([#1451](https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/1451)) ([8ab9eb6](https://github.com/webpack/webpack-dev-server/commit/8ab9eb6))
> 
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- See full diff in [compare view](https://github.com/webpack/webpack-dev-server/commits/v3.1.11)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=2.11.5&new-version=3.1.11)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/reactjs/react-rails/network/alerts).

</details>
**Specs**:  
* Rails 5.2  
* Ruby 2.5.1  
* Yarn 1.91.1  
* React-Rails 2.6.0  
* Postgresql 10  
* Ubuntu 18.04
* Webpacker 4.0.7
* Websocket-driver 0.7.1

**Issue**: Getting these ever present error messages destroying my logs with backtraces.  They happen after I set up a rails 5 app with react.  The errors are all looking for routes for javascript/workbox/ files once I start the server with `rails s` 

> Started GET "/service-worker.js" for 127.0.0.1 at 2019-11-14 09:28:15 -0700     
Started GET "/javascripts/workbox/workbox-sw.js" for 127.0.0.1 at 2019-11-14 09:28:15 -0700       
Started GET
> "/javascripts/workbox/workbox-expiration.prod.js" for 127.0.0.1 at
> 2019-11-14 09:28:15 -0700   
Started GET
> "/javascripts/workbox/workbox-core.prod.js" for 127.0.0.1 at
> 2019-11-14 09:28:15 -0700   
Started GET
> "/javascripts/workbox/workbox-strategies.prod.js" for 127.0.0.1 at
> 2019-11-14 09:28:15 -0700  
> **ActionController::RoutingError (No route matches [GET] "/service-worker.js"):**

Notice the errors begin on the last line and will continue from there for each of those GET requests.
Followed by a stacktrace for each like this one

> actionpack (5.2.3) lib/action_dispatch/middleware/debug_exceptions.rb:65:in `call'
> web-console (3.7.0) lib/web_console/middleware.rb:135:in `call_app'
> web-console (3.7.0) lib/web_console/middleware.rb:30:in `block in call'
> web-console (3.7.0) lib/web_console/middleware.rb:20:in `catch'
> web-console (3.7.0) lib/web_console/middleware.rb:20:in `call'
> actionpack (5.2.3) lib/action_dispatch/middleware/show_exceptions.rb:33:in `call'
> railties (5.2.3) lib/rails/rack/logger.rb:38:in `call_app'
> railties (5.2.3) lib/rails/rack/logger.rb:26:in `block in call'
> activesupport (5.2.3) lib/active_support/tagged_logging.rb:71:in `block in tagged'
> activesupport (5.2.3) lib/active_support/tagged_logging.rb:28:in `tagged'
> activesupport (5.2.3) lib/active_support/tagged_logging.rb:71:in `tagged'
> railties (5.2.3) lib/rails/rack/logger.rb:26:in `call'
> sprockets-rails (3.2.1) lib/sprockets/rails/quiet_assets.rb:13:in `call'
> actionpack (5.2.3) lib/action_dispatch/middleware/remote_ip.rb:81:in `call'
> actionpack (5.2.3) lib/action_dispatch/middleware/request_id.rb:27:in `call'
> rack (2.0.7) lib/rack/method_override.rb:22:in `call'
> rack (2.0.7) lib/rack/runtime.rb:22:in `call'
> activesupport (5.2.3) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'
> actionpack (5.2.3) lib/action_dispatch/middleware/executor.rb:14:in `call'
> actionpack (5.2.3) lib/action_dispatch/middleware/static.rb:127:in `call'
> rack (2.0.7) lib/rack/sendfile.rb:111:in `call'
> webpacker (4.0.7) lib/webpacker/dev_server_proxy.rb:29:in `perform_request'
> rack-proxy (0.6.5) lib/rack/proxy.rb:57:in `call'
> railties (5.2.3) lib/rails/engine.rb:524:in `call'
> puma (3.12.1) lib/puma/configuration.rb:227:in `call'
> puma (3.12.1) lib/puma/server.rb:660:in `handle_request'
> puma (3.12.1) lib/puma/server.rb:474:in `process_client'
> puma (3.12.1) lib/puma/server.rb:334:in `block in run'
> puma (3.12.1) lib/puma/thread_pool.rb:135:in `block in spawn_thread'


**What I did**:  I followed instructions from multiple sources ([Here's 1](https://medium.com/@asble/creating-a-new-rails-5-0-react-app-9158fd1efa0b) and [another](https://github.com/reactjs/react-rails)) telling me to do basically the same thing.  I ran `rails new app --database=postgresql --webpack=react` which runs normally.  Then I add the gem `react-rails` to my gemfile and `bundle install` again.  I next run `rails generate react:install` and everything seems fine except for a few warnings.  Here are some of the warnings, I don't know if these are causing the issue or not. 

> warning " > @babel/preset-react@7.7.0" has unmet peer dependency
> "@babel/core@^7.0.0-0".                          
warning
> "@babel/preset-react >
> @babel/plugin-transform-react-display-name@7.2.0" has unmet peer
> dependency "@babel/core@^7.0.0-0".   
warning "@babel/preset-react >
> @babel/plugin-transform-react-jsx@7.7.0" has unmet peer dependency
> "@babel/core@^7.0.0-0".   
warning "@babel/preset-react >
> @babel/plugin-transform-react-jsx-self@7.2.0" has unmet peer
> dependency "@babel/core@^7.0.0-0".   
warning "@babel/preset-react >
> @babel/plugin-transform-react-jsx-source@7.5.0" has unmet peer
> dependency "@babel/core@^7.0.0-0".   
warning "@babel/preset-react >
> @babel/plugin-transform-react-jsx > @babel/plugin-syntax-jsx@7.2.0"
> has unmet peer dependency "@babel/core@^7.0.0-0".   
warning " >
> webpack-dev-server@3.9.0" has unmet peer dependency "webpack@^4.0.0". 
> warning "webpack-dev-server > webpack-dev-middleware@3.7.2" has unmet
> peer dependency "webpack@^4.0.0".

Not sure if those warnings matter or if there is another reason that my app isn't setting up Workbox properly.  

React itself is working.  The default Hello world rails app works fine.  It is just the constant failed GET requests to Workbox files that is causing me grieve.  

**What I've tried to fix it**
I've tried re-creating new react apps using the instructions I showed above but I run into the same problem.  
I've also looked through stackoverflow questions for anyone else with a similar issue. 
### Expected behavior
I fetched data from client-side like below when I use react-router, but source code has nothing.

```js
  useEffect(() => {
    fetch(`v1/things.json`)
      .then(response => response.json())
      .then(json => {
        setThing(json.things);
      });
  }, []);
```

### Actual behavior
Source code renders nothing.

### System configuration
webpacker (4.0.7)
react-rails (2.6.0)
react_ujs: "^2.6.0"
ruby '2.6.4'
rails '~> 6.0.0'

-------

How to use react-router to server-side render? could use client-side fetch and render? 
If not, how to use props for all router?

code like this

```js
// App.js
import React from 'react';
import { StaticRouter, BrowserRouter } from 'react-router-dom';
import HelloWorld from './HelloWorld';

class Router extends React.Component {
  renderRouter = () => {
    if (typeof window !== 'undefined') {
      return <BrowserRouter>{this.props.children}</BrowserRouter>;
    } else {
      return (
        <StaticRouter location={this.props.path} context={{}}>
          {this.props.children}
        </StaticRouter>
      );
    }
  };

  render() {
    return this.renderRouter();
  }
}

const Application = props => (
  <Router path={props.path}>
      <HelloWorld/>
  </Router>
);

export default Application;
```

```js
// HelloWorld.js
const NoteApp = props => {
  const [things, setThing] = useState([]);

  useEffect(() => {
    fetch(`v1/things.json`)
      .then(response => response.json())
      .then(json => {
        setThing(json.things);
      });
  }, []);

  const mapp = things.map((thing, index) => (
    <List.Item key={index}>
      <List.Content>
        <List.Header as="a">{thing.name}</List.Header>
        <List.Description as="a">{thing.guid}</List.Description>
      </List.Content>
    </List.Item>
  ));

  return (
    <React.Fragment>
      Greeting: {props.greeting}
      {mapp}
    </React.Fragment>
  );
};

export default NoteApp;
```
### Steps to reproduce
Create a .css file and import it into a .jsx file. It works locally but when pushing to heroku the css isnt loaded.

### Expected behavior
Dev and prod behaves the same way

### Actual behavior
Heroku does not load css and it's super annoying.

### System configuration
`"dependencies": {
    "@babel/preset-react": "^7.6.3",
    "@rails/actioncable": "^6.0.0-alpha",
    "@rails/activestorage": "^6.0.0-alpha",
    "@rails/ujs": "^6.0.0-alpha",
    "@rails/webpacker": "^4.0.7",
    "babel-plugin-transform-react-remove-prop-types": "^0.4.24",
    "css-loader": "2.1.1",
    "prop-types": "^15.7.2",
    "react": "^16.10.2",
    "react-dom": "^16.10.2",
    "react-facebook": "^8.0.4",
    "react-stripe-elements": "^5.0.1",
    "react_ujs": "^2.6.0",
    "turbolinks": "^5.2.0"
  },
  "version": "0.1.0",
  "devDependencies": {
    "webpack-dev-server": "^3.8.2"
  }`


Using ruby 2.6.0 and Rails 6.0.0
I used react-rails in my main app but some of my rails engine need to use react as well. Do we have any way to use react-rails inside rails engines?  I mean we create by my own component on use it inside my engine. 
Btw: After research a bit about it, I saw this answer about this: https://stackoverflow.com/questions/44447696/including-react-react-rails-into-a-rails-engine. Can we do like that? Is it official way in react-rail?

Thank you guys so much for support this issues.

### System configuration
**Sprockets**: (>= 2.8, < 4.0)
**React-Rails version**: 2.4.7
**Rails version**: 5.2.1
**Ruby version**: 2.5.1


-------
In react_ujs.js

/***/ (function(module, exports, __webpack_require__) {

var React = __webpack_require__(3)
var ReactDOM = __webpack_require__(4)
var ReactDOMServer = __webpack_require__(5)

ReactDOM comes up undefined.

Searching the code for symbol __WEBPACK_EXTERNAL_MODULE_4__ shows it being used but I have no idea what is supposed to define it.

I don't understand webpack so I may be missing something fundamental.
### Steps to reproduce

Here is an example set up of the files:

__Procfile.dev__
```
web: DB_CONNECTION_POOL=${WEB_DB_CONN_POOL:-5} bundle exec puma -C config/puma.rb
worker: DB_CONNECTION_POOL=${SIDEKIQ_DB_CONN_POOL:-5} MALLOC_ARENA_MAX=2 bundle exec sidekiq -C config/sidekiq.yml -t 25
webpacker: ./bin/webpack-dev-server
```

__config/webpacker/yml__
```yaml
development:
  source_path: app/javascript
  source_entry_path: packs
  public_root_path: public
  public_output_path: packs
  cache_path: tmp/cache/webpacker
  check_yarn_integrity: false
  webpack_compile_output: false
  
  dev_server:
    https: false
    host: localhost
    port: 3035
    public: localhost:3035
    hmr: false
    # Inline should be set to true if using HMR
    inline: true
    overlay: true
    compress: true
    disable_host_check: true
    use_local_ip: false
    quiet: false
    headers:
      'Access-Control-Allow-Origin': '*'
    watch_options:
      ignored: '**/node_modules/**'
```

__config/application.rb__
```ruby
...
config.react.server_renderer_options = {
      files: ["ssr_pack_one.js", "ssr_pack_two.js"],       # files to load for prerendering
}
...
```

__packs/application.js__
```javascript
import ReactRailsUJS from 'react_ujs';
import Rails from 'rails-ujs';

Rails.start();

const componentRequireContext = require.context('react/ssr_comps_one', true);
ReactRailsUJS.useContext(componentRequireContext);
```

__packs/ssr_pack_one.js__
```javascript
import ReactRailsUJS from 'react_ujs';

const componentRequireContext = require.context('react/ssr_comps_one', true);
ReactRailsUJS.useContext(componentRequireContext);
```
__packs/ssr_pack_two.js__
```javascript
import ReactRailsUJS from 'react_ujs';

const componentRequireContext = require.context('react/ssr_comps_two', true);
ReactRailsUJS.useContext(componentRequireContext);
```

__react/ssr_comps_one/TestComponent.js__
```javascript
import React from 'react';

export default () => <div> Test Component</div>;
```

__react/ssr_comps_two/TestComponentTwo.js__
```javascript
import React from 'react';

export default () => <div> Test ComponentTwo</div>;
```

__application.html.erb__
```html
<!DOCTYPE html>
<html lang="en-nz">
  <head>
    <%= stylesheet_pack_tag "application" %>
    <%= javascript_pack_tag("application", nonce: true) %>
  </head>
  <body>
    <%= react_component("TestComponent",  {  }, prerender: true) %>
  </body>
</html>

```

### Expected behavior
When using webpack dev server we should be able to specify more than one file to compile for server rendering, which can prerender a component.

### Actual behavior
We get an error from the server:

`Uncaught SyntaxError: Illegal return statement at undefined:30402:10`

### System configuration
**Sprockets or Webpacker version**: 4.0.1
**React-Rails version**: 2.4.7
**React_UJS version**:
**Rails version**: 5.2
**Ruby version**: 2.6.5


-------

We want to be able to have two separate server rending packs so that we are not compiling all components when some are not needed. 

During development, using the webpack-dev-server, adding a second file results in:

`Uncaught SyntaxError: Illegal return statement at undefined:30402:10`

Removing the file solves the issue. 

It also seems to work fine when not using webpack-dev-server.

Hopefully I've provided enough information, but let me know if I can provide some more
