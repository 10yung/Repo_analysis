Since we are playing around with apartment, and after reading following blog entry https://influitive.io/our-multi-tenancy-journey-with-postgres-schemas-and-apartment-6ecda151a21f?gi=16140b70d3fa 

> Currently the Apartment gem uses the rails schema.rb for generating new tenants. This is a mistake. This file changes locally when running migrations, but it represents exactly what that developer has in their local database. If a feature branch (for example) has experimental database columns added, those can end up sneaking out to production if you inadvertently commit the schema.rb changes to your mainline development branch. 

I wanted to ask if there is a way to just run the normal migrations (instead of executing schema.rb or import via sql/pg_dump)? I know, it's maybe not best practice, but our deployment is based on working migrations and it would fit nicely to our workflow.

If there is no possibility right now, I would maybe spend some time to create a PR for this?
I am getting an error when I am trying to 

`bundle exec rails generate apartment:install`

Getting this error,

> `build': undefined method `new' for "Apartment::Reloader":String (NoMethodError)

Looks this is a middleware issue. Any solution.

My stack overflow question:  https://stackoverflow.com/questions/59514391/rails-apartment-adding-www-redirects-to-public-tenant

## Steps to reproduce

Set up a domain with google, connected it with heroku and added wildcard domains.  Made a new rails project and set up apartment using subdomain elevator.  Added WWW to excluded domains

## Expected behavior

www.tenant1.example.com would take me to the tenant1 tenant.

## Actual behavior

www.tenant1.example.com takes me to the public domain

## System configuration

<!-- Please let us know as far as you can. -->

* Database: (Tell us what database and its version you use.)
pg 
* Apartment version: the developmental version for rails 6

* Apartment config (in `config/initializers/apartment.rb` or so):

```
# You can have Apartment route to the appropriate Tenant by adding some Rack middleware.
# Apartment can support many different "Elevators" that can take care of this routing to your data.
# Require whichever Elevator you're using below or none if you have a custom one.
#
# require 'apartment/elevators/generic'
# require 'apartment/elevators/domain'
require 'apartment/elevators/subdomain'
# require 'apartment/elevators/first_subdomain'
# require 'apartment/elevators/host'

#
# Apartment Configuration
#
Apartment.configure do |config|
  
  Apartment::Elevators::Subdomain.excluded_subdomains = ['www']

  # Add any models that you do not want to be multi-tenanted, but remain in the global (public) namespace.
  # A typical example would be a Customer or Tenant model that stores each Tenant's information.
  #
   config.excluded_models = %w{ User }

  # In order to migrate all of your Tenants you need to provide a list of Tenant names to Apartment.
  # You can make this dynamic by providing a Proc object to be called on migrations.
  # This object should yield either:
  # - an array of strings representing each Tenant name.
  # - a hash which keys are tenant names, and values custom db config (must contain all key/values required in database.yml)
  #
  # config.tenant_names = lambda{ Customer.pluck(:tenant_name) }
  # config.tenant_names = ['tenant1', 'tenant2']
  # config.tenant_names = {
  #   'tenant1' => {
  #     adapter: 'postgresql',
  #     host: 'some_server',
  #     port: 5555,
  #     database: 'postgres' # this is not the name of the tenant's db
  #                          # but the name of the database to connect to before creating the tenant's db
  #                          # mandatory in postgresql
  #   },
  #   'tenant2' => {
  #     adapter:  'postgresql',
  #     database: 'postgres' # this is not the name of the tenant's db
  #                          # but the name of the database to connect to before creating the tenant's db
  #                          # mandatory in postgresql
  #   }
  # }
  # config.tenant_names = lambda do
  #   Tenant.all.each_with_object({}) do |tenant, hash|
  #     hash[tenant.name] = tenant.db_configuration
  #   end
  # end
  #
  config.tenant_names = lambda { User.pluck :subdomain }

  # PostgreSQL:
  #   Specifies whether to use PostgreSQL schemas or create a new database per Tenant.
  #
  # MySQL:
  #   Specifies whether to switch databases by using `use` statement or re-establish connection.
  #
  # The default behaviour is true.
  #
  # config.use_schemas = true

  #
  # ==> PostgreSQL only options

  # Apartment can be forced to use raw SQL dumps instead of schema.rb for creating new schemas.
  # Use this when you are using some extra features in PostgreSQL that can't be represented in
  # schema.rb, like materialized views etc. (only applies with use_schemas set to true).
  # (Note: this option doesn't use db/structure.sql, it creates SQL dump by executing pg_dump)
  #
  # config.use_sql = false

  # There are cases where you might want some schemas to always be in your search_path
  # e.g when using a PostgreSQL extension like hstore.
  # Any schemas added here will be available along with your selected Tenant.
  #
  # config.persistent_schemas = %w{ hstore }

  # <== PostgreSQL only options
  #

  # By default, and only when not using PostgreSQL schemas, Apartment will prepend the environment
  # to the tenant name to ensure there is no conflict between your environments.
  # This is mainly for the benefit of your development and test environments.
  # Uncomment the line below if you want to disable this behaviour in production.
  #
  # config.prepend_environment = !Rails.env.production?

  # When using PostgreSQL schemas, the database dump will be namespaced, and
  # apartment will substitute the default namespace (usually public) with the
  # name of the new tenant when creating a new tenant. Some items must maintain
  # a reference to the default namespace (ie public) - for instance, a default
  # uuid generation. Uncomment the line below to create a list of namespaced
  # items in the schema dump that should *not* have their namespace replaced by
  # the new tenant
  #
  # config.pg_excluded_names = ["uuid_generate_v4"]
end

# Setup a custom Tenant switching middleware. The Proc should return the name of the Tenant that
# you want to switch to.
# Rails.application.config.middleware.use Apartment::Elevators::Generic, lambda { |request|
#   request.host.split('.').first
# }

# Rails.application.config.middleware.use Apartment::Elevators::Domain
Rails.application.config.middleware.use Apartment::Elevators::Subdomain
# Rails.application.config.middleware.use Apartment::Elevators::FirstSubdomain
# Rails.application.config.middleware.use Apartment::Elevators::Host

```

  * `use_schemas`: (`true` or `false`)
 I think so...Honestly I'm a noob
* Rails (or ActiveRecord) version:
6.0.1
* Ruby version:
2.6.3
## Steps to reproduce
- Create a User model
- Create a User::Stuff model
- Exclude User model.

## Expected behavior
User model is excluded, but User::Stuff is not.

## Actual behavior
User and User::Stuff models are excluded resulting in User::Stuff being publicly scoped.

However, models not namespaced under any of the excluded model names work as expected, so fairly sure this it's accepting anything under the User namespace as being part of the user model.

I'm likely going to end up having to change the namespace those models are under, but figured I'd report the issue in case there is a quick fix I'm missing. Thankfully the app isn't actually in production yet, so rebuilding the database isn't a major issue, but would be nice to avoid it.

## System configuration
AWS Cloud9 Ubuntu

<!-- Please let us know as far as you can. -->

* Database: (Tell us what database and its version you use.)
```
Postgres 10.10
```

* Apartment version:
```
$ gem list | grep apartment
apartment (2.2.1)
```

* Apartment config (in `config/initializers/apartment.rb` or so):

```
# Apartment initializer
# frozen_string_literal: true

require "apartment/elevators/generic"

Apartment.configure do |config|
  config.excluded_models = ["Tenant", "User"]

  config.tenant_names = -> { Tenant.pluck :tenant_name }
end

Rails.application.config.middleware.use Apartment::Elevators::Custom
```

Original configuration was a bit more complicated as it was using UUIDs for a while, then decided to move away from them in favor of friendly IDs, thought that was the issue, but it looks like it wasn't.

  * `use_schemas`: (`true` or `false`)
Postgres, so yes I believe.

* Rails (or ActiveRecord) version:
Rails 5.2.3

* Ruby version:
ruby 2.6.5

I have a model in my application named Apartment which is obviously creating a conflict.  For example when I have "Apartment.all.count" in my code I get this error:

`undefined method 'all' for Apartment:Module`

Is there some way to rename the Apartment gem or place it in its own namespace?  The app I'm working on is a legacy app and the Apartment model is used in too many places for a renaming of that model to work.
How to get request.headers info in apartment library.
In Rails app config/initializers/apartment.rb I want to fetch "request.headers" info which I request from browser or other devices.
Please share the idea its bit urgent.
## Steps to reproduce
```
Apartment::Tenant.switch("domain.com") do
     Content.all
end
```
## Expected behavior
Show content from expected schema

## Actual behavior
Show content from public schema

## System configuration

<!-- Please let us know as far as you can. -->

* Database: (Tell us what database and its version you use.)
Postgresql 11.2

* Apartment version:
2.2.1

* Apartment config (in `config/initializers/apartment.rb` or so):
```
# You can have Apartment route to the appropriate Tenant by adding some Rack middleware.
# Apartment can support many different "Elevators" that can take care of this routing to your data.
# Require whichever Elevator you're using below or none if you have a custom one.
#
# require 'apartment/elevators/generic'
# require 'apartment/elevators/domain'
# require 'apartment/elevators/subdomain'
# require 'apartment/elevators/first_subdomain'
# require 'apartment/elevators/host'

#
# Apartment Configuration
#
Apartment.configure do |config|

  # Add any models that you do not want to be multi-tenanted, but remain in the global (public) namespace.
  # A typical example would be a Customer or Tenant model that stores each Tenant's information.
  #
  config.excluded_models = %w{ JwtBlacklist Organization OrganizationsUser Profile Role User }

  # In order to migrate all of your Tenants you need to provide a list of Tenant names to Apartment.
  # You can make this dynamic by providing a Proc object to be called on migrations.
  # This object should yield either:
  # - an array of strings representing each Tenant name.
  # - a hash which keys are tenant names, and values custom db config (must contain all key/values required in database.yml)
  #
  # config.tenant_names = lambda{ Customer.pluck(:tenant_name) }
  # config.tenant_names = ['tenant1', 'tenant2']
  # config.tenant_names = {
  #   'tenant1' => {
  #     adapter: 'postgresql',
  #     host: 'some_server',
  #     port: 5555,
  #     database: 'postgres' # this is not the name of the tenant's db
  #                          # but the name of the database to connect to before creating the tenant's db
  #                          # mandatory in postgresql
  #   },
  #   'tenant2' => {
  #     adapter:  'postgresql',
  #     database: 'postgres' # this is not the name of the tenant's db
  #                          # but the name of the database to connect to before creating the tenant's db
  #                          # mandatory in postgresql
  #   }
  # }
  # config.tenant_names = lambda do
  #   Tenant.all.each_with_object({}) do |tenant, hash|
  #     hash[tenant.name] = tenant.db_configuration
  #   end
  # end
  #
  config.tenant_names = lambda { Organization.pluck :domain }

  # PostgreSQL:
  #   Specifies whether to use PostgreSQL schemas or create a new database per Tenant.
  #
  # MySQL:
  #   Specifies whether to switch databases by using `use` statement or re-establish connection.
  #
  # The default behaviour is true.
  #
  # config.use_schemas = true

  #
  # ==> PostgreSQL only options

  # Apartment can be forced to use raw SQL dumps instead of schema.rb for creating new schemas.
  # Use this when you are using some extra features in PostgreSQL that can't be represented in
  # schema.rb, like materialized views etc. (only applies with use_schemas set to true).
  # (Note: this option doesn't use db/structure.sql, it creates SQL dump by executing pg_dump)
  #
  # config.use_sql = false

  # There are cases where you might want some schemas to always be in your search_path
  # e.g when using a PostgreSQL extension like hstore.
  # Any schemas added here will be available along with your selected Tenant.
  #
  # config.persistent_schemas = %w{ hstore }

  # <== PostgreSQL only options
  #

  # By default, and only when not using PostgreSQL schemas, Apartment will prepend the environment
  # to the tenant name to ensure there is no conflict between your environments.
  # This is mainly for the benefit of your development and test environments.
  # Uncomment the line below if you want to disable this behaviour in production.
  #
  # config.prepend_environment = !Rails.env.production?

  # When using PostgreSQL schemas, the database dump will be namespaced, and
  # apartment will substitute the default namespace (usually public) with the
  # name of the new tenant when creating a new tenant. Some items must maintain
  # a reference to the default namespace (ie public) - for instance, a default
  # uuid generation. Uncomment the line below to create a list of namespaced
  # items in the schema dump that should *not* have their namespace replaced by
  # the new tenant
  #
  # config.pg_excluded_names = ["uuid_generate_v4"]
end

# Setup a custom Tenant switching middleware. The Proc should return the name of the Tenant that
# you want to switch to.
# Rails.application.config.middleware.use Apartment::Elevators::Generic, lambda { |request|
#   request.host.split('.').first
# }

# Rails.application.config.middleware.use Apartment::Elevators::Domain
# Rails.application.config.middleware.use Apartment::Elevators::Subdomain
# Rails.application.config.middleware.use Apartment::Elevators::FirstSubdomain
# Rails.application.config.middleware.use Apartment::Elevators::Host
```

  * `use_schemas`: `true`

* Rails (or ActiveRecord) version:
5.2.3

* Ruby version:
2.6.3

* Additional Info :
1. If im using switch!, it works perfectly.

Using Switch :
```
2.6.3 :036 > Apartment::Tenant.switch("domain.com") { Content.all }
  Content Load (0.9ms)  SELECT  "contents".* FROM "contents" LIMIT $1  [["LIMIT", 11]]
 => #<ActiveRecord::Relation []>
```

Using Switch! :
```
2.6.3 :001 > Apartment::Tenant.switch!("domain.com")
 => nil 
2.6.3 :002 > Content.all
  Content Load (1.2ms)  SELECT  "contents".* FROM "contents" LIMIT $1  [["LIMIT", 11]]
 => #<ActiveRecord::Relation [#<Content id: 3, path: "test3", name: "test3", description: nil, published: false, active: true, user_id: nil, created_at: "2019-08-30 22:17:24", updated_at: "2019-08-30 22:17:24">, ...]> 
```

2. If im using switch block with Content.all.load, it works perfectly
```
2.6.3 :001 > Apartment::Tenant.switch("domain.com") { Content.all.load }
  Content Load (0.9ms)  SELECT "contents".* FROM "contents"
 => #<ActiveRecord::Relation [#<Content id: 3, path: "test3", name: "test3", description: nil, published: false, active: true, user_id: nil, created_at: "2019-08-30 22:17:24", updated_at: "2019-08-30 22:17:24">, ...]> 
```

I think its similiar with issue #610 
## Steps to reproduce
1. `rails app:update`
2. manually update rails gem from 5.2.3 to 6.0 in Gemfile
3. `bundle update`

## Expected behavior
Supposedly rails will start as usual.

## Actual behavior
/Users/ahmadyakobbinabaidullah/.asdf/installs/ruby/2.5.1/lib/ruby/gems/2.5.0/gems/actionpack-6.0.0/lib/action_dispatch/middleware/stack.rb:37:in `build': undefined method `new' for "Apartment::Reloader":String (NoMethodError)
Did you mean?  next

## System configuration
```
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see rails configuration guide
  # http://guides.rubyonrails.org/configuring.html#database-pooling
  # pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  pool: 220
  connect_timeout: 5
  read_timeout: 5
```
<!-- Please let us know as far as you can. -->

* Database: (Tell us what database and its version you use.)
psql (PostgreSQL) 9.6.2

* Apartment version:
apartment (0.24.3)

* Apartment config (in `config/initializers/apartment.rb` or so):
nothing yet.

  * `use_schemas`: (`true` or `false`)
nothing yet.

* Rails (or ActiveRecord) version:
Rails 6.0.0

* Ruby version:
ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin17]
Happy to do the work on this if it's a desirable feature, but not if it's unlikely to get merged.

I need to run some reporting over all tenants. A feature that might make this easier would be to generate a view which produces a view like:
```
select *, 'tenant_one' as tenant from tenant_one.table_name 
UNION 
select *, 'tenant_two' as tenant from tenant_two.table_name
UNION
...
```

If I can get my tenants to all share one sequence for ID generation, the 'tenant' column probably isn't needed.

The goal would be to automatically update each of these views whenever either the schema or the list of tenants are modified, so you can always query `all_tenants.table_name` to see unified data.
