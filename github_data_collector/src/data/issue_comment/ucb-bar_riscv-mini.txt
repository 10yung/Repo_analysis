Current `riscv-mini` implements RV32I of the User-level ISA Version 2.0 and the Machine-level ISA of the Privileged Architecture Version 1.7. This requires the users to build and install RISC-V tools for priv 1.7. If we upgrade the implement to user-level ISA to version 2.2 and privileged architecture to version 1.10, users could download latest pre-built compiler from [xpack-dev-tools](https://github.com/xpack-dev-tools/riscv-none-embed-gcc-xpack/releases) and generate the executable much easier.

## Major User-level Base ISA Changes

### Changes from v2.1 to v2.2

* Rearranged chapters to put all extensions first in canonical order.
* Improvements to the description and commentary.
* Modified implicit hinting suggestion on JALR to support more efficient macro-op fusion of
LUI/JALR and AUIPC/JALR pairs.
* Clarification of constraints on load-reserved/store-conditional sequences.
* A new table of control and status register (CSR) mappings.
* Clarified purpose and behavior of high-order bits of fcsr.
* Specified behavior of narrower (<FLEN) floating-point values held in wider f registers using
NaN-boxing model.
* Defined the exception behavior of FMA(∞, 0, qNaN).

### Changes from v2.0 to v2.1

* Modification to long instruction encodings >64 bits to avoid moving the rd specifier in very
long instruction formats.
* CSR instructions are now described in the base integer format where the counter registers
are introduced, as opposed to only being introduced later in the floating-point section (and
the companion privileged architecture manual).
* The SCALL and SBREAK instructions have been renamed to ECALL and EBREAK, re-
spectively. Their encoding and functionality are unchanged.
* Clarification of LR/SC allowed successes and required failures, including use of compressed
instructions in the sequence.

## Major Privileged Architecture Changes

### Changes from v1.9.1 to v1.10

* The explicit convention on shadow CSR addresses has been removed to reclaim CSR space.
Shadow CSRs can still be added as needed.
* The mvendorid register now contains the JEDEC code of the core provider as opposed to
a code supplied by the Foundation. This avoids redundancy and offloads work from the
Foundation.
* The interrupt-enable stack discipline has been simplified.
* An optional mechanism to change the base ISA used by supervisor and user modes has been
added to the mstatus CSR, and the field previously called Base in misa has been renamed
to MXL for consistency.
* Clarified expected use of XS to summarize additional extension state status fields in mstatus.
* Optional vectored interrupt support has been added to the mtvec and stvec CSRs.
* The SEIP and UEIP bits in the mip CSR have been redefined to support software injection
of external interrupts.
* The mbadaddr register has been subsumed by a more general mtval register that can now
capture bad instruction bits on an illegal instruction fault to speed instruction emulation.
* The machine-mode base-and-bounds translation and protection schemes have been removed
from the specification as part of moving the virtual memory configuration to sptbr (now
satp). Some of the motivation for the base and bound schemes are now covered by the PMP
registers, but space remains available in mstatus to add these back at a later date if deemed
useful.
* In systems with only M-mode, or with both M-mode and U-mode but without U-mode
trap support, the medeleg and mideleg registers now do not exist, whereas previously they
returned zero.
* Virtual-memory page faults now have mcause values distinct from physical-memory access
exceptions. Page-fault exceptions can now be delegated to S-mode without delegating excep-
tions generated by PMA and PMP checks.
* An optional physical-memory protection (PMP) scheme has been proposed.
* The supervisor virtual memory configuration has been moved from the mstatus register to
the sptbr register. Accordingly, the sptbr register has been renamed to satp (Supervisor Address Translation and Protection) to reflect is broadened role.
* The SFENCE.VM instruction has been removed in favor of the improved SFENCE.VMA
instruction.
* The `mstatus` bit MXR has been exposed to S-mode via sstatus.
* The polarity of the PUM bit in sstatus has been inverted to shorten code sequences involving
MXR. The bit has been renamed to SUM.
Hardware management of page-table entry Accessed and Dirty bits has been made optional;
simpler implementations may trap to software to set them.
* The counter-enable scheme has changed, so that S-mode can control availability of counters
to U-mode.
* H-mode has been removed, as we are focusing on recursive virtualization support in S-mode.
* The encoding space has been reserved and may be repurposed at a later date.
* A mechanism to improve virtualization performance by trapping S-mode virtual-memory
management operations has been added.
* The Supervisor Binary Interface (SBI) chapter has been removed, so that it can be maintained
as a separate specification.

### Changes from v1.9 to v1.9.1

* Numerous additions and improvements to the commentary sections.
* Change configuration string proposal to be use a search process that supports various formats
including Device Tree String and flattened Device Tree.
* Made misa optionally writable to support modifying base and supported ISA extensions.
CSR address of misa changed.
* Added description of debug mode and debug CSRs.
* Added a hardware performance monitoring scheme. Simplified the handling of existing hard-
ware counters, removing privileged versions of the counters and the corresponding delta reg-
isters.
* Fixed description of SPIE in presence of user-level interrupts.

### Changes from v1.7 to v1.9

(Not yet available.)

For more details, please refer to the documents [here](https://github.com/riscv/riscv-isa-manual/tree/riscv-user-2.2/release).

Please leave your comments.
- TesterDriver
  - execute was separated into executeVerilog and executeTreadle
  - The default backend remains verilog
  - One can change comment on default backend to make all tests run in Treadle.
  - Or this can be done by adding a backend annotation to most tests
  - Directory naming is changed
    - Tests have a fixed unique name
    - Re-running test keeps the same name as before
    - this makes it easier to reload vcd files in debugging
  the same direct
- CacheTests
  - There a couple of treadle problems uncovered here.
    - Some naming changes were made in the GoldCache to make debugging easier
  - Currently this is the only test that explicitly uses Treadle
- Fixed typo in TestUtils
- Reformatted table for chisel3 style
Hi, 

I've started coding Chisel the past few weeks and I have to work on the risc v mini processor. I am having troubles following which signal is used for what in code. I also do not understand how is the  freechips.rocketchip.config suppose to work. So my question is: do you have a report or a commented version of the code that contains the description of the intern signals of each module ? 

Thank you
I'd like to propose the following. 

1. Make the current master branch become the release branch
    - Make release be the default branch in this repo
    - It will, for now, continue to point to its desired version of chisel3
    - This would allow us to work on master, buffering existing users
1. After the above change master branch
    1. Point to current 3.2-SNAPSHOT
    1. Fix all code to be compliant and as warning free as possible with Chisel 3.2
    1. put all code in main and tests into a `mini` package
        - This will bring it in line with standard Scala conventions
1. Change master to depend on chisel-testers2 instead of chisel3
    - This would allow us to develop some testers2 style unit tests
        - This would help test out testers2 capabilities
        - Provide alternative examples of unit testing facilities under chisel
Hello.

I made sure everything is set-up. The VTile.v is generated, I also got the .HEX pre-compiled tests working. now I want to create some additional software benchmarks. So I tried to build the priv-1.7 toolchain. The build process fails here:

```bash
In file included from /home/[.....]/riscv-mini/riscv-tools-priv1.7/riscv-gnu-toolchain/build/src/newlib-gcc/gcc/cp/except.c:1023:0:
cfns.gperf: In function ‘const char* libc_name_p(const char*, unsigned int)’:
cfns.gperf:101:1: error: ‘const char* libc_name_p(const char*, unsigned int)’ redeclared inline with ‘gnu_inline’ attribute
cfns.gperf:26:14: note: ‘const char* libc_name_p(const char*, unsigned int)’ previously declared here
cfns.gperf: At global scope:
cfns.gperf:26:14: warning: inline function ‘const char* libc_name_p(const char*, unsigned int)’ used but never defined
make[3]: *** [cp/except.o] Error 1
make[2]: *** [all-gcc] Error 2
make[1]: *** [all] Error 2
make: *** [stamps/build-gcc-newlib] Error 2
```

Is there any other working commit ID of `riscv-tools` that support priv-1.7 and compiles successfully?
in ALU.scala file:
define below:
val ALU_ADD    = 0.U(4.W)
val ALU_SUB    = 1.U(4.W)
io.sum := io.A + Mux(io.alu_op(0), -io.B, io.B)
in mux ,if io.alu_op(0) is 0 then alu_op is ALU_ADD then Mux(io.alu_op(0), io.B, -io.B) ?


I tried to follow the steps as given in the RAEADME. But the 'make' command gives an error as below:
```
sagar@LAPTOP-LRFVFPQJ:~/riscv-mini$ make
sbt -ivy /home/sagar/riscv-mini/.ivy2 "run /home/sagar/riscv-mini/generated-src"
/bin/sh: 1: sbt: not found
Makefile:17: recipe for target '/home/sagar/riscv-mini/generated-src/Tile.v' failed
make: *** [/home/sagar/riscv-mini/generated-src/Tile.v] Error 127
sagar@LAPTOP-LRFVFPQJ:~/riscv-mini$
```


I'm not sure why this happened.Do help.

Hi,

I try to use the test.ld, syscall.c and crt.S from ([riscv-tools](https://github.com/riscv/riscv-tools.git) and checkout to **4635ab67966c763a84f7217bc2c20b65dcabc7ec**. Those sources exist in [riscv-tests/benchmarks/common/](https://github.com/riscv/riscv-tests/tree/c9022d2f63f50388b2ab1192966f30dbe7819a59/benchmarks/common). These two steps follow [riscv-mini/build-riscv-tools.sh](https://github.com/ucb-bar/riscv-mini/tree/master/custom-bmark)) for building the [custom-bmark](https://github.com/ucb-bar/riscv-mini/tree/master/custom-bmark).

It would be success for compiling program and execute simulation with no any warning like (**TOHOST: XXXX**).

The simulation warning will occur during execution the system call (like printf) or floating variable computation. The screenshot shows the warning during the previous two scenarios.

**main.c**
```c
int add(int a, int b);

int main(int argc, char** argv) {
  int res = add(3, 2);

  // Simple float variable computation
  float a = 1.0;
  for(int i = 0; i < 10; i++) {
    a += 0.5;
  }

  return res == 5 ? 0 : -1;
}

```
![image](https://user-images.githubusercontent.com/30294203/44037280-877258f6-9f46-11e8-8c6a-9d7933aee619.png)

Environment
- Ubuntu 16.04
- riscv-gnu-toolchain installtion (based on riscv-mini/build-riscv-tools.sh)
   - riscv32-unknown-elf-gcc (GCC) 5.3.0
- Verilator 3.922 2018-03-17

There is an another question. Could riscv-mini team provide the some source code ([riscv-mini/src/test/resources/](https://github.com/ucb-bar/riscv-mini/tree/master/src/test/resources)) and its corresponding crt.S, syscall.c, util.h, linker sciprt (test.ld).

Thanks you very much!!


Hi.

I was trying to follow your instructions on README.md to get verilator tests running, before encountering the following error
```
hob:riscv-mini/ (master) $ make verilator
verilator --cc --exe --assert -Wno-STMTDLY -O3 --trace --top-module Tile -Mdir /home/hob/Programs/test/riscv-mini/generated-src/VTile.csrc -CFLAGS "-std=c++11 -Wall -Wno-unused-variable -include /home/hob/Programs/test/riscv-mini/generated-src/VTile.csrc/VTile.h"  -o /home/hob/Programs/test/riscv-mini/VTile /home/hob/Programs/test/riscv-mini/generated-src/Tile.v /home/hob/Programs/test/riscv-mini/src/main/cc/top.cc /home/hob/Programs/test/riscv-mini/src/main/cc/mm.cc
%Error: /home/hob/Programs/test/riscv-mini/generated-src/Tile.v:3397: syntax error, unexpected INTEGER NUMBER, expecting IDENTIFIER
%Error: Exiting due to 1 error(s)
%Error: Command Failed /usr/bin/verilator_bin --cc --exe --assert -Wno-STMTDLY -O3 --trace --top-module Tile -Mdir /home/hob/Programs/test/riscv-mini/generated-src/VTile.csrc -CFLAGS '-std=c++11 -Wall -Wno-unused-variable -include /home/hob/Programs/test/riscv-mini/generated-src/VTile.csrc/VTile.h' -o /home/hob/Programs/test/riscv-mini/VTile /home/hob/Programs/test/riscv-mini/generated-src/Tile.v /home/hob/Programs/test/riscv-mini/src/main/cc/top.cc /home/hob/Programs/test/riscv-mini/src/main/cc/mm.cc
Makefile:28: recipe for target '/home/hob/Programs/test/riscv-mini/VTile' failed
make: *** [/home/hob/Programs/test/riscv-mini/VTile] Error 10
```
The sbt tests fail as a result too.

It says that there's a syntax error on the 3397th line of Tile.v, which is
```
          $fwrite(32'h80000002,"PC: %h, INST: %h, REG[%d] <- %h\n",ew_pc,ew_inst,_T_296,_T_298); // @[Datapath.scala 172:11]
```

However if I change `fwrite` to `display` and delete that `32'h80000002` it compiles without problem.

-------------------
My setup:
```
$ git clone https://github.com/ucb-bar/riscv-mini.git 
$ cd riscv-mini
$ make  # it tells me there's 68 feature warnings
$ make verilator
```

My environment:
* Ubuntu 16.04
* Verilator 3.874 2015-06-06 rev verilator_3_872-20-g0d43051  (just the one from `apt install`)
* Scala version 2.11.6 (OpenJDK 64-Bit Server VM, Java 1.8.0_171).

Could you tell my if there's anything I's wrong or missed?
Thank you very much.
after I use quartus II 9.0 to compile Title.v successfully, but I double click ALUArea::alu module turn on error as below:
![360-16581118485047](https://user-images.githubusercontent.com/905931/31616622-c3999cbe-b2bf-11e7-8fca-456ab039a58e.png)
if alu module have a bug ??