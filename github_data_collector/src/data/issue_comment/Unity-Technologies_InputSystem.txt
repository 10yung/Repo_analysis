Joining a PlayerInput through PlayerInputManager, destroying it, then joining again leaves the manager in a broken state where subsequent join attempts hit an assert and fail. This only seems to happen when Join Behaviour is set to "Join Players When Join Action Is Triggered" and Join Action is set via reference.

The issue can be reproduced easily:

1. Add a PlayerInputManager to a game object, set the Join Behaviour to "Join Players When Join Action Is Triggered", enable "Use Reference" in Join Action and set any action as the reference.
2. Create a prefab containing a PlayerInput and set this as the Player Prefab in the PlayerInputManager.
3. Press play, trigger the set action to join.
4. Destroy the created PlayerInput prefab instance via scene hierarchy or script.
5. Attempt to join again by triggering the set action. This will fail.
When adding a binding to an InputActionMap, there is a check to make sure the binding's path is not null:
```cs
public static BindingSyntax AddBinding(this InputActionMap actionMap, InputBinding binding)
{
...
    if (binding.path == null)
        throw new ArgumentException("Binding path cannot be null", nameof(binding));
...
}
```

In order to add a placeholder binding that will be bound later, the path can be set to an empty string instead.

However, if the asset (or even just the map) is cloned through json, any empty strings in the bindings are converted to null when they are loaded.
This results in a map that has a binding with a null path, which isn't supposed to be allowed.

```cs
[Test]
public void AssetFromJsonHasValidBinding()
{
    var asset1 = ScriptableObject.CreateInstance<InputActionAsset>();
    var map1 = new InputActionMap("map1");
    var action1 = map1.AddAction("action1", InputActionType.Value);
    var binding1 = new InputBinding(string.Empty);
    action1.AddBinding(binding1);
    asset1.AddActionMap(map1);

    var asset2 = InputActionAsset.FromJson(asset1.ToJson());

    Assert.That(asset2.actionMaps.Count == 1);
    var map2 = asset2.actionMaps[0];
    Assert.That(map2.bindings.Count == 1);
    Assert.That(map2.bindings[0].path, Is.Not.Null);
}
```

Also note that `BindingSyntax` will allow changing a binding in a map to have a null path using either the `WithPath` or `To` method.

Most usages of path or effectivepath are checking for null anyway, so perhaps the restriction should just be removed from `AddBinding`.
This PR intends to address bugs arising from the current focus handling, like e.g. a stuck alt key when alt-tabbing on Windows (case 1206199).

It essentially replaces the previous focus handling with a much more nuanced mechanism.

* When focus is lost in the player, devices are reset.
* A reset consists of sending a reset *request* to the backend, like before, but regardless of how the backend responds to that, the input system will now perform an immediate reset of a device's state back to its default state.
* Noisy controls are not touched and will remain at their current value. This preserves sensor readings at their last value instead of snapping them back to default.
* When `Application.runInBackground` is enabled, devices that return `true` from `InputDevice.canRunInBackground` will be exempted from resets and will be left alone.

Working on this, I also found a couple bugs with noise masks and associated memory checks.
We really need mouse wheel to be usable as buttons :) 

The team already tagged this as "REVIEW", is there an easy work around till next release ?
Best

Line 43 in Mouse.cs 
 ////REVIEW: have half-axis buttons on the scroll axes? (up, down, left, right)
```c#
  ////REVIEW: have half-axis buttons on the scroll axes? (up, down, left, right)
        /// <summary>
        /// Scroll-wheel delta of the mouse.
        /// </summary>
        /// <value>Scroll wheel delta.</value>
        /// <seealso cref="Mouse.scroll"/>
        [InputControl(displayName = "Scroll")]
        [InputControl(name = "scroll/x", aliases = new[] { "horizontal" }, usage = "ScrollHorizontal", displayName = "Scroll Left/Right")]
        [InputControl(name = "scroll/y", aliases = new[] { "vertical" }, usage = "ScrollVertical", displayName = "Scroll Up/Down", shortDisplayName = "Wheel")]
        [FieldOffset(16)]
        public Vector2 scroll;
```
Hi. Thank you very much for your time. I know there are probably a lot of good reasons for the editors being defined as internal. I would love if the PlayerInputEditor could be inherited from. Here is my case: 

There have been a considerable amount of times where I've made things easier for myself by implementing a class that inherits from PlayerInput, even though I had to implement its own editor, because it can still be managed by the PlayerInputManager,  and it still can handle different users and maps. 

Right now, though, I need to be able to inherit from the editor too to make an idea work. I've been making a package that implements, among other things, the idea of parameter references as ScriptableObjects proposed in the famous 2017 talk by Ryan Hipple (https://youtu.be/raQ3iHhE_Kk). I'm adding the functionality of directly linking a parameter to an input action. It would be awesome if I could add that functionality to a class that inhereits from PlayerInput; it would be less clutter and I could make it more performant. 

The thing is, I want it to be useful to many users, so I need the interface to look the same (with some extras at the end) as the normal PlayerInput that everyone uses in many different ways. Only if I could inherit from the PlayerInputEditor, I could guarantee that the interface is going to be consistent in the future, plus it would be easier and cleaner. So, is there anyway it could not be internal? :)

I'll understand if it's not possible. Thank you very much for your time; this package is awesome. I hope you have a very nice day.
PS4 controller can't be detected in playstation. 

Editor 2019.1.14f1
InputSystem 1.0.0 preview 3
Project InputDeviceTester

the GamePad.current is always none.
Hello,

I'm experimenting with the new input system in making a little tank game.
To aim hte tank turret I use pointer (mouse) but I want to also support game pad and for me the best way to do so is to convert the Vector 2 output of the game stick and using a custom processor, I convert it to a screen pointer coordinate from the center of the screen using the camera.

```
using UnityEditor;
using UnityEngine;
using UnityEngine.InputSystem;
 
#if UNITY_EDITOR
[InitializeOnLoad]
#endif
public class ToPointerPosition : InputProcessor<Vector2>
{
 
#if UNITY_EDITOR
    static ToPointerPosition()
    {
        Initialize();
    }
#endif
 
    [RuntimeInitializeOnLoadMethod]
    static void Initialize()
    {
        InputSystem.RegisterProcessor<ToPointerPosition>();
    }
 
 
    Camera m_Camera;
 
    public override Vector2 Process(Vector2 value, InputControl control)
    {   if (m_Camera == null) m_Camera = Camera.main;
        value.x = (value.x + 1) * m_Camera.scaledPixelWidth / 2;
        value.y = (value.y + 1) * m_Camera.scaledPixelHeight / 2;
        return value;
    }
}
```

This works great as long as I have only one main camera.
For local multiplayer with split screen, I have no idea how to get the player's camera from there.

Any idea on how to solve that use case ?

I either need to access the camera from the processor or have a way, when consuming the InputAction.CallbackContext, to figure out that i'm not processing a pointer vector2 but a stick vector2.
When using the Tracked Pose Driver component on the latest package version, I am having issues with XR controllers reconnecting.

Steps to reproduce:
- Enter play mode with XR controllers enabled
- Disconnect one controller
- Reconnect that controller (fails to receive any input)
- Disable -> Enable the Tracked Pose Driver component to fix

The issue is solved by disabling/enabling the component in editor after attempting a reconnect, however I have been unable to replicate that fix through code.

I am also having issues allowing the controller inputs to run in background. The InputDevice object will point me to "enable the behavior, use <see cref="InputSettings.runInBackground"/>"; however, the Input Settings so does not have a run in background option.
Hi. I get an exception and a null reference when I press the button(s) on a DualShock 4 controller I have connected to my computer on a new/empty scene using Player Input Manager.

`Exception 'NullReferenceException' thrown from state change monitor 'InputActionState' on 'Button:/DualShock4GamepadHID/buttonSouth'`
`NullReferenceException: Object reference not set to an instance of an object`

Unity version: 2019.3.0f3
InputSystem version: 1.0.0-preview.3

Steps to reproduce:
1. Have a controller connected
2. New scene, add an empty gameobject
3. Add Player Input Manager-script to the empty gameobject
4. Change "Join behavior" to "Join players when join action is triggered"
5. Check Use Reference
6. Add InputActionReference asset
  6.1. My input asset is setup as: Added an Action map "Player", added action "JoinGame"
  6.2 Set Action Type on the action to Button, add Press (Press Only) interaction
  6.3 Add binding: Button South [Gamepad]
7. Play game and press the south button on the gamepad
8. Errors occurs

![unity_error_input-system_200114](https://user-images.githubusercontent.com/2084555/72371738-462deb00-3705-11ea-9770-e44a78efee98.png)
This PR significantly builds out the event recording and replay functionality of the system.

__Rationale for doing this now:__

One problem I'm repeatedly having with bugs is that there's always the trickier bug where you need to be on some specific platform, have some specific hardware, run some specific project, and perform some specific input for the problem to show. For example, we have a bug where key presses are getting lost. In my debugging so far, everything points to events but with the tools in the input system right now, it requires laborious and tedious debugging to dig into problems like this.

So, instead I want to be able to repro a problem once and to simply capture the repro such that I can replay it over and over and dissect it at will. Even without being on the specific platform, having the specific hardware, running a specific project, and definitely without trying to get the repro sequence just right (which makes debugging no fun).

A side benefit is that it also addresses the question of "how do I record and replay input?" which has repeatedly come up. So, two birds, one stone kinda deal.

__What can this do:__

You record your input problem, you send/upload/post the resulting trace file, and I can debug your problem even without having anything else from you. You have a BuzzFit Twitchomatic 4000 controller with the ChamferEdge Rainbow LED add-on running on Linux and I don't? No problem, I can still repro your input.

__What can this not do:__

Trace back problems to *before* event generation, i.e. to where the event sequence is already buggy. But it can still at least clearly point in the direction.

__What this adds:__

A new "InputRecording" sample with a new `InputRecorder` MonoBehaviour in it.

![image](https://user-images.githubusercontent.com/3418347/72329301-c841f380-36b4-11ea-9457-902c00330af9.png)

Some additional controls to event traces in the input debugger.

![image](https://user-images.githubusercontent.com/3418347/72329362-e14aa480-36b4-11ea-8757-4bbe0dce58f1.png)

A number of additions to the `InputEventTrace` API.
* Buffers can be made growable now.
* Can now capture frame markers to capture distribution of input over frames.
* Can write traces to streams/files and load them from such.
* Traces now capture information about the devices they capture events for (including writing out entire device layouts as JSON for devices with auto-generated layouts; this allows reproducing problems on HIDs without the original HID data being available).
* Traces now have built-in replay functionality including the ability to replay the original frame distribution or to simulate original event timing.