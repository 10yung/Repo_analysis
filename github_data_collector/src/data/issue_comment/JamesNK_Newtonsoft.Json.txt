# Source/destination types

```csharp
readonly struct ReadOnlyTestValue : IEquatable<ReadOnlyTestValue>
{
        public readonly int Item1;

        public readonly string Item2;

        public ReadOnlyTestValue(int item1, string item2)
            => (Item1, Item2) = (item1, item2);
}

sealed class ReadOnlyTestValueMessage : IEquatable<ReadOnlyTestValueMessage>
{
        public readonly string Item1;

        public readonly ReadOnlyTestValue Item2;

        public ReadOnlyTestValueMessage(string item1, in ReadOnlyTestValue item2)
            => (Item1, Item2) = (item1, item2);
}
```

### Source/destination JSON

```javascript
{"$type":"MyUnitTests.ReadOnlyTestValueMessage, MyUnitTests","Item1":"value1","Item2":{"$type":"MyUnitTests.ReadOnlyTestValue, MyUnitTests","Item1":1,"Item2":"value2"}}
```

### Expected behavior
The json should be deserialized back without exceptions.

### Actual behavior
It throws only when TypeNameHandling.All or Auto is set for the JsonConvert.DeserializeObject call.
the deserializion is working with TypeNameHandling.None.

```
Newtonsoft.Json.JsonSerializationException: 'Type specified in JSON 
'MyUnitTests.ReadOnlyTestValue, MyUnitTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' is not compatible with 
'MyUnitTests.ReadOnlyTestValue&, MyUnitTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'. Path 'Item2.$type', 
line 1, position 151.'
```
### Steps to reproduce

```csharp
[Fact]
public void readonly_value_message_with_type_meta_should_be_serializable()
{
	var v1 = new ReadOnlyTestValue(1, "value2");

	var p1 = new ReadOnlyTestValueMessage("value1", v1);

	var settings = new JsonSerializerSettings
	{
		TypeNameHandling = TypeNameHandling.All
	};

	var s = JsonConvert.SerializeObject(p1, settings);

	var p2 = JsonConvert.DeserializeObject<ReadOnlyTestValueMessage>(s, settings);

	Assert.Equal(p1, p2);
}
```

If you execute Newtonsoft.Json.JsonConvert.Serialize() on a custom object defined in an assembly in a collectible AssemblyLoadContext, the AssemblyLoadContext can no longer be unloaded. 
It obviously happens because of using a number of different caches like ConvertUtils.CastConverters with strong references and without any possibility to remove them (but reflection which seems like a bad workaround).
Existing implementation does not treat numbers in any special way. They're treated most closely
to lowercase characters. This change provides an options 'numbersAsWords' that permits viewing
numbers as capable of starting and stopping a word.

Closes JamesNK/Newtonsoft.Json#2251
<!--

If you have questions about how to use Json.NET, please read the Json.NET documentation or ask on Stack Overflow.

https://www.newtonsoft.com/json/help
https://stackoverflow.com/questions/tagged/json.net

There are thousands of Json.NET questions on Stack Overflow with the json.net tag.

GitHub issues are only for reporting bugs, not questions or help.

-->

I'm integrating an API using kebab casing and views numbers as their own words. For example, for a C# property name of `Street1` (of an `Address` object), the serialized member name needs to be `street-1`. Now, this is easily achievable using the `[JsonProperty]` syntax _if_ you have access to the model type, and if not, a custom `NamingStrategy` to take matters into your own hands. Another option is updating `StringUtils.ToSnakeCase` and `StringUtils.ToKebabCase` to support an optional `numbersAsWords` parameter and adding `SeparatedCaseState.Number` to the enum along with an accompanying case handler in the `ToSeparatedCase` helper method.

### Source/destination types

```csharp
public class Address
{
    public string Street1 { get; set; }
    public string Street2 { get; set; }
}
```

### Source/destination JSON

```javascript
{
    "street-1": "123 Hickory Street",
    "street-2": "Suite 36D"
}
```

### Expected behavior
The json.net provides options to support the above naming strategy out-of-the-box.

### Actual behavior
The json.net API does not support viewing numbers as their own words via the provided `NamingStrategy` implementations.

Sorry if this is the wrong venue but I did not know where to ask this question!

Can someone tell me how I Can deserialize the following array of project info into a container object with a list? The reason I need to have  a container object is because when there is an error the response changes  from array to Json error: 

- The Json response appears to be an array **without a name:**

**[{"project_code":"TNTPH_TEST","title":"TNTPH_TEST" },{"project_code":"POI_PROJ","title":"Poinsettia Projects"},{"project_code":"DOL_ASSET","title":"Dolphin Facility"}]**

- In case of error the Json will appear like the following:

{"error_code":404,"error":"Not Found","error_description":"No projects data found"}

- My Classes definition:

//Container Class Definition
public class AssaiProjectCodeInfoResponse

    {
        **[JsonProperty("data")]
       public List<AssaiProjectInfo> Data { get; set; }**

       [JsonProperty("error_code")]
        public string ErrorCode { get; set; }

        [JsonProperty("error")]
        public string ErrorTitle { get; set; }

        [JsonProperty("error_description")]
        public string ErrorDescription { get; set; }

    }

 // Array Item class Definition
    public class AssaiProjectInfo
    {
        [JsonProperty("project_code")]
        public string ProjectCode { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }


    }
}


When I call: 

JsonConvert.DeserializeObject<AssaiProjectCodeInfoResponse>(JsonString);

I get Exception:

Cannot deserialize the current JSON array (e.g. [1,2,3]) into type 'AssaiApiClient.AssaiObjects.AssaiProjectCodeInfoResponse' because the type requires a JSON object (e.g. {"name":"value"}) to deserialize correctly.
To fix this error either change the JSON to a JSON object (e.g. {"name":"value"}) or change the deserialized type to an array or a type that implements a collection interface (e.g. ICollection, IList) like List<T> that can be deserialized from a JSON array. JsonArrayAttribute can also be added to the type to force it to deserialize from a JSON array.
Path '', line 1, position 1.


// input json
{
    "ErrorMessage":"Transaction has been authorized successfully",
    "ControlId":1000.00,
    "Authorizations":[
        {
            "RMATranUUID":"1c1a88f7-d6cf-4ae8-87d3-ba06e9d9fe36",
            "Payments":[
                {
                    "PaymentNumber":"1",
                    "TotalPaymentsNumber":24,
                    "AmountDue":1000.0,
                    "AmountPaid":0.00
                }
            ],
            "Term":24,
            "OTBReleaseAmount":null
        },
        {
            "RMATranUUID":"b012ba9c-2dbd-4961-8959-ec0afbafbe13",
            "OTBReleaseAmount":null
        }
    ]
}

==========================================================================================================================
//Output json
After parsing

                JObject jsonPacket = JObject.Parse(inputString);
//Line no second changes 1000.00 to 1000.0
---------------------------------------------------------------------------------------------------


{
  "ErrorMessage": "Transaction has been authorized successfully",
  "ControlId": 1000.0,
  "Authorizations": [
    {
      "RMATranUUID": "1c1a88f7-d6cf-4ae8-87d3-ba06e9d9fe36",
      "Payments": [
        {
          "PaymentNumber": "1",
          "TotalPaymentsNumber": 24,
          "AmountDue": 1000.0,
          "AmountPaid": 0.0
        }
      ],
      "Term": 24,
      "OTBReleaseAmount": null
    },
    {
      "RMATranUUID": "b012ba9c-2dbd-4961-8959-ec0afbafbe13",
      "OTBReleaseAmount": null
    }
  ]
}


==========================================================================================================================

Thank you,

### Summary
JsonConvert.DeserializeObject throws an error "The reader's MaxDepth of 32 has been exceeded" when I try to deserialize objects only **with 16 levels of depth.**

MaxDepth of 32 is the default value for `.AddNewtonsoftJson()` in AspNetCore.

### Environment
I'm using NuGet in my AspNetCore project.
Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="3.1.0"

// Type: Newtonsoft.Json.JsonConvert
// Assembly: Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// Assembly location: C:\Users\MyUser\ .nuget\packages\newtonsoft.json\12.0.3\lib\netstandard2.0\Newtonsoft.Json.dll
### Source/destination types

```csharp
    public class FolderCopy
    {
        [Required]
        public string Property1 { get; set; }

        [Required]
        public string Property2 { get; set; }

        [Range(1, int.MaxValue)]
        public int Property3 { get; set; }

        [Range(1, int.MaxValue)]
        public int Property4 { get; set; }

        [Required]
        [MinLength(1)]
        public FolderCopyItem[] Roots { get; set; }
    }

    public class FolderCopyItem
    {
        [Required]
        public string Property1 { get; set; }

        [Required]
        public string Property2 { get; set; }

        [Range(1, int.MaxValue)]
        public int Property3 { get; set; }

        [Range(1, int.MaxValue)]
        public int Property4 { get; set; }

        public string Property5 { get; set; }

        public string Property6 { get; set; }

        public string Property7 { get; set; }

        [Required]
        [MinLength(1)]
        public FolderCopyItem[] Children{ get; set; }
    }
```

### Source/destination JSON

```javascript
The reader's MaxDepth of 32 has been exceeded. Path 'Roots[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0].Children[0]', line 1, position 4854.
```

### Expected behavior

Successful deserialize.

### Actual behavior

The reader's MaxDepth of 32 has been exceeded.

### Steps to reproduce

```csharp
            var json = JsonConvert.SerializeObject(new FolderCopy{
                Roots = ReproduceOnly15Levels(parent.Children), // here we reproduce 15 levels of tree
                Property1 = parent.Property1,
                Property2 = parent.Property2,
                Property3 = parent.Property3,
                Property4 = parent.Property4
            }); // here is okay(**15 levels + 1 parent object = 16 levels**)
            JsonConvert.DeserializeObject<FolderCopy>(json , new JsonSerializerSettings
            {
                MaxDepth = 32
            }); // here is error
            JsonConvert.DeserializeObject<FolderCopy>(json , new JsonSerializerSettings
            {
                MaxDepth = 64
            }); // works well 
```

The following queries provide results that do not match those of other implementations of JSONPath
(compare https://cburgmer.github.io/json-path-comparison/):

- [ ] `$[-1]`
  Input:
  ```
  ["first", "second", "third"]
  ```
  Expected output:
  ```
  ["third"]
  ```
  Error:
  ```
  Index was out of range. Must be non-negative and less than the size of the collection. (Parameter 'index')
  ```

- [ ] `$["key"]`
  Input:
  ```
  {"key": "value"}
  ```
  Expected output:
  ```
  ["value"]
  ```
  Error:
  ```
  Unexpected character while parsing path indexer: "
  ```

- [ ] `$..*`
  Input:
  ```
  {"key": "value", "another key": {"complex": "string", "primitives": [0, 1]}}
  ```
  Expected output:
  ```
  ["string", "value", 0, 1, [0, 1], {"complex": "string", "primitives": [0, 1]}]
  ```
  Actual output:
  ```
  ["string", "value", 0, 1, [0, 1], {"complex": "string", "primitives": [0, 1]}, {"another key": {"complex": "string", "primitives": [0, 1]}, "key": "value"}]
  ```

- [ ] `$..*`
  Input:
  ```
  [40, null, 42]
  ```
  Expected output:
  ```
  [40, null, 42]
  ```
  Actual output:
  ```
  [[40, null, 42], 40, null, 42]
  ```

- [ ] `$[*]`
  Input:
  ```
  {"some": "string", "int": 42, "object": {"key": "value"}, "array": [0, 1]}
  ```
  Expected output:
  ```
  ["string", 42, [0, 1], {"key": "value"}]
  ```
  Actual output:
  ```
  []
  ```

- [ ] `$.*`
  Input:
  ```
  ["string", 42, {"key": "value"}, [0, 1]]
  ```
  Expected output:
  ```
  ["string", 42, {"key": "value"}, [0, 1]]
  ```
  Actual output:
  ```
  []
  ```


For reference, the output was generated by the program in https://github.com/cburgmer/json-path-comparison/tree/master/implementations/dotNET_Json.NET.

<!--

If you have questions about how to use Json.NET, please read the Json.NET documentation or ask on Stack Overflow.

https://www.newtonsoft.com/json/help
https://stackoverflow.com/questions/tagged/json.net

There are thousands of Json.NET questions on Stack Overflow with the json.net tag.

GitHub issues are only for reporting bugs, not questions or help.

-->

It seems like that custom value converters failed to handle nullable values when serializing objects.

### Source/destination types

```csharp
public sealed class MyValueConverter : JsonConverter
{
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        serializer.Serialize(writer, "MyValueConverter: " + value);
    }

    public override bool CanRead => false;

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue,
                                    JsonSerializer serializer)
    {
        throw new NotSupportedException();
    }

    public override bool CanConvert(Type objectType)
    {
        return objectType.IsEnum;
    }
}

public enum Bar
{
    Hello,
    World,
}

public sealed class Foo
{
    public Bar SomeValue { get; set; }
    public Bar? SomeOtherValue { get; set; }
}

// We're going to serialize Foo with the custom json converter MyValueConverter
```

### Source/destination JSON

```javascript
{"SomeValue":"MyValueConverter: Hello","SomeOtherValue":0}
```

### Expected behavior

<!-- What did you expect to happen? -->

Both of `SomeValue` and `SomeOtherValue` should be serialized as `MyValueConverter: Hello`

### Actual behavior

But `SomeOtherValue` is serialized by the default behavior of serializing enum types.

### Steps to reproduce

```csharp
var data = new Foo { SomeValue = Bar.Hello, SomeOtherValue = Bar.Hello };
var converter = new MyValueConverter();
Console.WriteLine(JsonConvert.SerializeObject(data, converter));
```

### Source/destination types

```csharp
using (var reader = new StreamReader(inputStream))
{
  using (var jsonReader = new JsonTextReader(reader)
  {
    DateParseHandling = DateParseHandling.None,
    DateTimeZoneHandling = DateTimeZoneHandling.Utc,
  })
  {
    var json = JObject.Load(jsonReader);
    json["value"].Value<DateTime?>().Kind // Is "Local", should be "Utc"
    (json["value"].Value() as DateTime)?.Kind // Is "Local", should be "Utc"
  }
}
```

### Source/destination JSON

```javascript
{"value":"2019-12-22T14:02:26.021Z"}
```

### Expected behavior

"Kind" property to be UTC.

### Actual behavior

Instead of passing a pointer to the parsing settings into the `JToken`'s created, and then using `DateTimeUtils`, there is usage of `Convert.ToDateTime`, which uses some default implementation, does not consider other supported parsing formats, and does not consider specified parsing behavior.
This introduces inconsistent behavior.
Could also be address without significant overhead, by wrapping the settings of `JsonReader` in a settings object and passing a pointer to it into `JToken`s created by it, or by simply passing a pointer to the `JsonReader` itself.
