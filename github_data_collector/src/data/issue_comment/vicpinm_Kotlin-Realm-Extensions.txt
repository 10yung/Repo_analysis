When use custom realm module，set “library = true”，run app can cause crash：

the crash msg is "is not part of the schema for this Realm. Did you added realm-android plugin in your build.gradle file?"
I got the error message like “is not part of the schema for this Realm. Did you added realm-android plugin in your build.gradle file?”
but i do not find what happened！Could you help me?
您好 先感謝您的開源分享

然後想跟您請教一下 如下圖所示
performUserTest()的部分 都只會運行在background thread
因此兩個應該都是performUserTest("background thread users") ?

![2019-10-17_193509](https://user-images.githubusercontent.com/23090085/67005907-4f171c80-f116-11e9-977e-40ad72c59391.jpg)
![2019-10-17_193615](https://user-images.githubusercontent.com/23090085/67005910-4fafb300-f116-11e9-966d-38cb802d3db7.jpg)


Great library :+1: 
I was looking to the library before using it and it's great, I have just one concern about realm instance as we are **not closing it after executing the transaction or any query.**

As mentioned in the[ Realm doc](https://realm.io/docs/java/latest/#closing-realms)

> Realm implements Closeable to take care of native memory deallocation and file descriptors, so always close your Realm instances when you’re done with them.

So, doesn't it will affect the **performance or create any thread issue**?
hi, just asking if this library will work fine with these version of realm and kotlin? 

thanks in advance 
implementation ("com.github.vicpinm:krealmextensions:2.5.0")
=
Duplicate class io.realm.BaseRealm found in modules classes.jar (io.realm:realm-android-library-object-server:4.3.1) and classes.jar (io.realm:realm-android-library:5.9.0)
Duplicate class io.realm.BaseRealm$1 found in modules classes.jar (io.realm:realm-android-library-object-server:4.3.1) and classes.jar (io.realm:realm-android-library:5.9.0)
Duplicate class io.realm.BaseRealm$2 found in...
___________________________________________________________________________________________________
implementation ("com.github.vicpinm:krealmextensions:2.5.0"){
        exclude group: 'io.realm'
    }
=
Caused by: java.lang.NoClassDefFoundError: Failed resolution of: [Lio/realm/ImportFlag;
like this :
data class Sms(
    var content: String? = null,
    var timeStr: String? = null,
    var time: String? = null,
    var from: String? = null,
    var to: String? = null
) :
    RealmObject()

Hi,
I saw in your code, you used `BackpressureStrategy.BUFFER` for flowableQuery.
But in a Realm article: https://academy.realm.io/posts/creating-a-reactive-data-layer-with-realm-and-rxjava2, they said:

> As RealmResults are always updated to be the latest version, it makes sense that you would need it as a Flowable with LATEST backpressure strategy.

How do you think about it?

Consider the following model

```
@RealmClass
open class StylistModel(
    @PrimaryKey
    var id: String,
    var categoriesIds: List<String>
) : RealmModel
```

I need to query all stylists those have specific category id.

```
// example
StylistModel().queryAsFlowable { includes("categoriesIds", id) }
```

One more thing 😊 , in most databases I can do something like this `stylists.where("id > someValue")` to skip all objects with id < `someValue`, notice that the id field is `String` how can I achieve the same result using these extensions?

**Edit**
For now, I'm working around it by querying all objects and filter them manually like the following
```
    fun getStylists(
        countryName: String,
        countryCode: String,
        categoryId: String,
        latestId: String
    ): Flowable<List<StylistEntity>> {
        return StylistModel().queryAllAsFlowable()
            .map { list ->
                list.asSequence().map { stylist ->
                    stylist.toEntity()
                }.sortedWith(Comparator { a, b ->
                    when {
                        a.id > b.id -> 1
                        a.id < b.id -> -1
                        else        -> 0
                    }
                }).filter { stylist ->
                    stylist.countryCode == countryCode
                }.filter { stylist ->
                    stylist.countryName == countryName
                }.filter { stylist ->
                    stylist.categoriesIds.contains(categoryId)
                }.filter { stylist ->
                    stylist.id > latestId
                }.toList()
            }.defaultIfEmpty(emptyList())
    }
```