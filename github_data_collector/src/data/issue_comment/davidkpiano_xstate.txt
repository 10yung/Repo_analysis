**Description**
@xstate/react: typescript: state is always `never` after calling `.matches()` twice (in the same expression?)

```js
function App () {
  const [state, _] = useMachine(toggleMachine)

  if (state.matches('a') || state.matches('b')) {
    //                        ^ is of type `never`
    console.log('do a thing')
  }


  /*
   * doesn't work like this either
   *
   * if (state.matches('a')) {
   *   // ...
   * } else if (state.matches('b')) {
   *   // ...
   * }
   */
}
```

Is this an antipattern or am I doing something wrong?

Sadly I don't have enough typescript experience at the moment to understand the following code in detail: 
https://github.com/davidkpiano/xstate/blob/d6eda85b28759b4cc296ca8f88633f2342045e31/packages/core/src/State.ts#L284-L291

**Expected Result**
I should be able to check if a state is either one of a state

**Actual Result**
I can't check if a type is one of either states

**Reproduction**

Simple Reproduction: https://codesandbox.io/s/xenodochial-faraday-05nmv

**Additional context**

```
{
  "@xstate/react": "^0.8.1",
  "xstate": "^4.7.6"
}
```

**Description**

I have two machines, a parent machine and a child machine. The parent machine invokes the child machine on start and the child machine keeps running indefinitely between three states. How can I print out the **child machineÂ´s** current value using react?

**Expected Result**
I expect to be able to subscribe to invoked child machines state transitions somehow so that I can update my react ui with the information.

**Actual Result**
Accessing the child machine does not return the invoked instance nor an interpreter, but instead some metadata.

**Reproduction**
See a full sample here, notice how the child machine state is rendered **N/A** even though the invoked child machine is running (see console output):

- [CodeSandbox Reproducible Example](https://codesandbox.io/s/crimson-cdn-fx0p4?fontsize=14&hidenavigation=1&theme=dark)

**Additional context**

I've extracted this issue from a [comment on 772](https://github.com/davidkpiano/xstate/issues/772#issuecomment-574321932). As far as I can tell #772, #664 , #938 may or may not be related issues.

This is the package.json versions:
```json
    "@types/jest": "24.0.25",
    "@types/node": "13.1.6",
    "@types/react": "16.9.17",
    "@types/react-dom": "16.9.4",
    "@xstate/react": "1.0.0-rc.1",
    "react": "^16.12.0",
    "react-dom": "^16.12.0",
    "react-scripts": "3.3.0",
    "typescript": "3.7.4",
    "xstate": "^4.7.6"
```

I'm looking into the new Typestates functionality in 4.7 and I'm a bit confused about the distinction between `createMachine` and `Machine`. It looks like you have to use `createMachine` to use Typestates as there is no generic for them with `Machine`. But, `createMachine` is missing the generic for the state schema which is something I find helpful.

It doesn't look like this is an oversight, does that mean representing your schema as a type is no longer considered good practice? Is there an alternative that makes it unnecessary to use with `createMachine`? 
## Please treat the serialized format as a part of your public API.

**This is more of a plea/headsup/feature request.**

I just got bitten by an XState machine format change from back in August.

* I'm persisting XState 4.6.x machines in PouchDB. 
* This change, introduced in XState 4.7.0, adds an `_event` property to the state object: ["Use SCXML.Event wherever possible"](https://github.com/davidkpiano/xstate/commit/f24f73b70795860e499a9dd4bcc912ccc017cc73)

This caused two issues upon trying to update XState:

1. Unfortunately for me, [PouchDB forbids the storing of objects under a key a leading underscore](https://github.com/pouchdb/pouchdb/blob/b6b4f50e161d52d9c78aa4ea12fd950e3a875b96/packages/node_modules/pouchdb-adapter-utils/src/parseDoc.js#L144-L148), i.e. `_event` is an invalid top-level key, so new machines created with the latest version of XState simply wouldn't persist to the db. I don't expect XState to change format because of a restriction like this in PouchDB, however I do feel like this should not have happened without a major version bump.
2. Secondly, the new version of XState would crash with `Cannot read property 'data' of undefined` when trying to deserialize state saved from the old version, because this new `_event` property is missing: https://github.com/davidkpiano/xstate/blob/7ce4e93cda2a8cad00842725a12e9e7b731f2c24/packages/core/src/State.ts#L232 

### Request

Ideally:

* Breaking changes to the serialized format should be done across a major semver version bumps.
* XState should give some consideration & explicit testing to identify issues with backwards/forwards compatibility of the serialized format.
* XState could support running something akin to db "migrations" when the serialized format changes.

I think this would be appropriate, given that serialization (and deserialization?) is stated as one of the key goals:

![image](https://user-images.githubusercontent.com/43438/72135335-2fb02880-33c1-11ea-8081-6a23e9f5f74d.png)

----

My *hacky* workaround is to wrap all reads and writes to the db with custom `serialize`/`deserialize` to rename the keys and add the `_event` property by calling `toSCXMLEvent` on the `event` property. This is inconvenient and a bit haphazard because I need to wrap every location that reads from the db, but it seems to work. Included my workaround code below in case someone else experiences this issue.

```JS
import mapKeys from 'lodash/mapKeys'
import { toSCXMLEvent } from 'xstate/lib/utils'

export function serialize (state) {
  const s = JSON.parse(JSON.stringify(state)) // ensures no magic objects
  return mapKeys(s, (value, key) => { // swap keys with leading _ to leading $
    if (key[0] === '_') {
      return `$${key.slice(1)}`
    }
    return key
  })
}

export function deserialize (s) {
  const r = mapKeys(s, (value, key) => {
    if (key[0] === '$') { // swap keys with leading $ to leading _ (reverse of serialise)
      return `_${key.slice(1)}`
    }
    return key
  })
  // add missing _event if not there
  if (r.event && !r._event) {
    r._event = toSCXMLEvent(r.event)
  }
  return r
}
```
## Bug or feature request?
Feature request / query

## Description:

I have a piece of UI that I'd like to display when one of multiple states is true. At the moment, I'm writing code like this: 
```jsx
const displayCustomerBalance = current.matches("customer_deposit") || current.matches("customer_withdrawal");
```
This is okay, but gets a bit cumbersome when you add more states. It would be nice to be able to write something more like:
```jsx
const displayCustomerBalance = current.matches([
  "customer_deposit",
  "customer_withdrawal"
]);
```

It might be that you can actually do something like this and I've missed or misunderstood something. If so, sorry!

## (Feature) Potential implementation:

I think adding an overload for State.matches() with a signature like this would work, where `TSV` is a union of the possible value types instead of a single value type:

```tsx
matches<TSV>(parentStateValues: TSV[]): this is TState extends { value: TSV; } ? State<TState["context"], TEvent, TStateSchema, TState> : never
```

It would call utils.ts/matchesState for each of the state values passed in, and return true if any of them were true.

**Description**
When I try to useService, I'm finding that the current state isn't being returned correctly.

**Expected Result**
The state should be available for use on first render of the component.

**Actual Result**
The state is undefined.

**Reproduction**
https://codesandbox.io/embed/crimson-http-eksyg?fontsize=14&hidenavigation=1&theme=dark

**Additional context**
On my local machine I'm on the latest `@xstate/react` (0.8.1). The code installed in node modules is clearly only setting current to `service.state` and not `service.state || service.initialState`.

```
function useService(service) {
    var _a = __read(react_1.useState(service.state), 2), current = _a[0], setCurrent = _a[1];
    react_1.useEffect(function () {
        // Set to current service state as there is a possibility
        // of a transition occurring between the initial useState()
        // initialization and useEffect() commit.
        setCurrent(service.state);
        var listener = function (state) {
            if (state.changed) {
                setCurrent(state);
            }
        };
        var sub = service.subscribe(listener);
        return function () {
            sub.unsubscribe();
        };
    }, [service]);
    return [current, service.send, service];
}
```

This PR was opened by the Changesets release GitHub action. When you're ready to do a release, you can merge this and the packages will be published to npm automatically. If you're not ready to do a release yet, that's fine, whenever you add more changesets to master, this PR will be updated.

# Releases
## @xstate/fsm@1.3.0

### Minor Changes

-   3c10215: A `config` property got exposed on created machines. It's the same object which got passed in as argument.

### Patch Changes

-   a337473: Fixed entry actions defined on an initial state not being executed.

 ## xstate@4.7.7

### Patch Changes

-   c8db035: The `escalate()` action can now take in an expression, which will be evaluated against the `context`, `event`, and `meta` to return the error data.
-   2a3fea1: The typings for the raise() action have been fixed to allow any event to be raised. This typed behavior will be refined in version 5, to limit raised events to those that the machine accepts.

 ## @xstate/react@1.0.0

### Patch Changes

-   Updated dependencies [a337473]
-   Updated dependencies [c8db035]
-   Updated dependencies [2a3fea1]
-   Updated dependencies [3c10215]
    -   @xstate/fsm@1.3.0
    -   xstate@4.7.7

All notable changes to this project will be documented in this file.

 ## @xstate/vue@1.0.0

### Patch Changes

-   Updated dependencies [a337473]
-   Updated dependencies [c8db035]
-   Updated dependencies [2a3fea1]
-   Updated dependencies [3c10215]
    -   @xstate/fsm@1.3.0
    -   xstate@4.7.7

The original documented way to increment the simulated clock would not work in TypeScript because `service.clock` is of type `Clock` while only `SimulatedClock` has an `increment` method.

At first I thought I'd just use a type assertion like:
```
(service.clock as SimulatedClock).increment(1000);
```
and that may be good enough for the example.

I don't like unnecessary type assertions, so this PR proposes to keep the `SimulatedClock` instance in a local variable and increment that instead.

As I said, this is just a suggestion. What do you think?
This feature is a quick win that allows developers to define `context` partially for states and transitions in the same way that they would with the `assign()` action creator. This is equivalent to the same `assign()` action as the first action:

**State-level `context`**
```diff
// ...
context: {
  count: 0,
  message: 'hello'
},
states: {
  foo: {
-   entry: assign({ count: 10 })
+   context: { count: 10 }
  },
  bar: {
-   entry: assign({ count: ctx => ctx.count + 10 })
+   context: { count: ctx => ctx.count + 10 }
  },
  baz: {
-   entry: assign(ctx => ({...ctx, count: 42 }))
+   context: ctx => ({...ctx, count: 42 })
  }
}
```

**Transition-level `context`**
```diff
// ...
// same assign-like behavior as above
context: {
  count: 0,
  message: 'hello'
},
on: {
  SOME_EVENT: {
-   actions: assign({ count: ctx => ctx.count + 10 })
+   context: { count: ctx => ctx.count + 10 }
  }
}
```

This has a few advantages:

- No need to import `assign` action creator for most use-cases; it's built into `context`
  - Still need it for `exit` actions; `assign()` is not removed and will still work the same
- Less verbose (plain JS)
- Less painful typing (TypeScript), since the types don't need to be inferred from the `assign<TC, TE>(...)` action creator, and instead are explicit on the `context` properties.
  - This solves a huge pain point (#681)
- Not a breaking change and still compatible with SCXML since the `context` is translated to `assign` actions


- [x] State-level `context`
- [x] Transition-level `context`
- [x] Tests
- [x] Docs
- [x] Changelog
