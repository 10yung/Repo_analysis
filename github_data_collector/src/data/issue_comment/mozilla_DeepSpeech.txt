**Problem:** Currently we have implementation assumptions coded into the LM API. For example, the `DS_EnableDecoderWithLM` call assumes there are two separate files, one for the LM binary and one for the trie. It also assumes there are two float hyperparameters alpha and beta. If we keep it as is, then any change in the underlying external scorer technology requires breaking the API.

**Complication:** We don't currently have a concrete idea of how the underlying scorer implementation would change, so we don't know what the future API would need.

**Proposal:** Any problem in computer science can be solved with another layer of indirection. Separate the decoder loading and the hyperparameter setting into separate API calls so the latter can be made deprecated/no-op in case we move to a new implementation where it isn't needed. Figure out a way to package our current KenLM solution into a single file instead of separate LM.binary and trie files. We can then iterate on the underlying file format and handle upgrades without breaking the API, for example by supporting two implementations at the same time until a future 2.x release.

The new API would look something like this:

```cpp
int DS_EnableExternalScorer(ModelState* ctx, const char* scorerModelPath);
int DS_SetScorerAlphaBeta(ModelState* ctx, float alpha, float beta);
```

Ideally we can push default alpha and beta values into the LM package so that most users don't have to call `DS_SetScorerAlphaBeta` (makes upgrading easier). For an even more flexible approach, where we can deprecate individual options and add new options without breaking the API, we can also do something like:

```cpp
enum DS_ScorerOptions
{
    DS_SCORER_ALPHA,
    DS_SCORER_BETA,
};

int DS_SetScorerOptionInt(ModelState* ctx, int optionCode, int optionValue);
int DS_SetScorerOptionFloat(ModelState* ctx, int optionCode, float optionValue);
int DS_SetScorerOptionStr(ModelState* ctx, int optionCode, char* optionValue);
```

**Implementation details:** KenLM takes file paths everywhere for loading the LM binary file, so encapsulating it in an archive is hard to do without patching KenLM. What we can do instead is append the trie and any extra data/configuration to the end of the LM binary file, making a single file that still loads with the KenLM API and we can then load the trie from the correct offset. We can then embed default alpha/beta values in the trie file header, which we already control.

This is hacky, but the goal here is just to move to a single file, so that we can iterate on the underlying binary file format without breaking the API. A future solution could use a cleaner packaging solution, but the point is that it's invisible to API users.

- [x] Update KenLM vendored code
- [x] Stop including vocabulary data in LM.binary.
- [x] Refactor Scorer so that trie generation can be performed by `generate_trie` directly.
- [x] Make `generate_trie` take the vocabulary directly as input instead of extracting it from the LM.
- [x] Adapt `generate_trie` to generate new package format as a single file.
- [x] Adapt Scorer to load the new format.
- [x] Include default alpha and beta hyperparameters in trie header.
- [ ] Refactor DeepSpeech API to load a single path and make hyperparameter setting optional.
Current platforms status:
 - [x] Linux/ARMv7 (RPi3/4)
 - [x] Linux/ARM64 (#2676)
 - [x] Android ARMv7
 - [x] Android ARM64
 - [ ] Android x86-64 (not published)
 - [x] Linux/AMD64
 - [x] MacOS/AMD64
 - [x] Windows/AMD64


Create Mozilla ML WebSite with collected blog posts from the group's members
Enhancement of pre-existing  training materials


Need to adapt code/repositories/websites to match new branding and validate everything is working. So this can affect the timing of other tasks here.
