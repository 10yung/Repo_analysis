This pull request fixes the extraction of 0x formatted hex string for `From Hex` operation and adds `0x with comma` option to `To Hex` operation. It also allows the user to specify the amount of bytes in each line of the output. Tests are also provided.

In the current version, From Hex doesn't extract 0x formatted hex correctly when the deliminator is set to `Auto`. For [example](https://gchq.github.io/CyberChef/#recipe=From_Hex('Auto')&input=MHg0MSwweDQyLDB4NDM), given `0x41,0x42,0x43`, the operation outputs non-ASCII characters but the desired result is `ABC`.

With the added option `0x with comma` in `To Hex`, output bytes are separated with commas instead of cluttering together. For instance, `#recipe=To_Hex('0x%20with%20comma',0)&input=R3VucG93ZGVyLCBnZWxhdGluZQpEeW5hbWl0ZSB3aXRoIGEgbGFzZXIgYmVhbQ`
gives
`0x47,0x75,0x6e,0x70,0x6f,0x77,0x64,0x65,0x72,0x2c,0x20,0x67,0x65,0x6c,0x61,0x74,0x69,0x6e,0x65,0x0a,0x44,0x79,0x6e,0x61,0x6d,0x69,0x74,0x65,0x20,0x77,0x69,0x74,0x68,0x20,0x61,0x20,0x6c,0x61,0x73,0x65,0x72,0x20,0x62,0x65,0x61,0x6d`
This can then be directly pasted into source code to, say, initialise a list.

Users can also format the output by using `Bytes per line` argument. For instance,
`#recipe=To_Hex('0x%20with%20comma',8)&input=R3VucG93ZGVyLCBnZWxhdGluZQpEeW5hbWl0ZSB3aXRoIGEgbGFzZXIgYmVhbQ`
gives
```
0x47,0x75,0x6e,0x70,0x6f,0x77,0x64,0x65,
0x72,0x2c,0x20,0x67,0x65,0x6c,0x61,0x74,
0x69,0x6e,0x65,0x0a,0x44,0x79,0x6e,0x61,
0x6d,0x69,0x74,0x65,0x20,0x77,0x69,0x74,
0x68,0x20,0x61,0x20,0x6c,0x61,0x73,0x65,
0x72,0x20,0x62,0x65,0x61,0x6d
```
so that when pasted into codes, the user doesn't have to manually format it into multiple lines
**Describe the bug**

The **parseX509 certificate** operation seems to mis-label the usage of a provided certificate's key as digital signature when it should really be key encipherment.

**To Reproduce**

* Provide a PEM encoded encryption certificate as input - see attached: [blah.com.cert.and.pem.zip](https://github.com/gchq/CyberChef/files/4072911/blah.com.cert.and.pem.zip)
* Use the **Parse X.509 certificate** operation.
* Note the keyUsage field in the output, which says: `digitalSignature`

**Expected behaviour**

* Use openssl to examine your certificate: `openssl x509 -in test.pem -text`
* This reports the `X509v3 Key Usage:` as `Key Encipherment`
* Similarly, the output expected from the cyberchef operation should be `keyEncipherment`

**Desktop**

* Version: 9.12.0
* Compile time: 20/12/2019 16:10:42 UTC
* User-Agent:
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36
**Describe the bug**
When clicking or selecting any text in the output page when using Safari, the input text is visually duplicated with a vertical offset.

**To Reproduce**
Using Safari, add an operation and some input text. Then select some of the output and notice the distortion in the input box.
This issue does not appear in Chrome on the same CyberChef version.


**Expected behaviour**
No visual artefacts in the input box when selecting output

**Screenshots**
<img width="951" alt="image" src="https://user-images.githubusercontent.com/52707208/72357910-a9a72100-36e3-11ea-9233-7bf0a44672a2.png">
<img width="849" alt="image" src="https://user-images.githubusercontent.com/52707208/72357946-b75ca680-36e3-11ea-8fc8-9409db2daaa7.png">


**Desktop (if relevant, please complete the following information):**
 - OS: macOS Mojave 10.14.6
 - Browser: Safari 13.0.4
 - CyberChef version: 9.12.0


This pull request adds 4 new operations: Salsa20 Encrypt and Decrypt and Chaha20 Encrypt and Decrypt (along with Poly1305 AEAD).

The algorithms are implemented using native Javascript so no new dependency is introduced.

lib/Salsa20.mjs is forked from https://github.com/thesimj/js-salsa20 (MIT Licence). The original code allowed only 256 bit key, but I added support for 128 bit key as specified in DJB's spec.
lib/Chacha20.mjs is implemented based on the Salsa20 code. Both the 64 bit and 96 bit nonce variants are supported.
lib/Poly1305.mjs and lib/Chacha20Poly1305.mjs are forked from https://github.com/devi/chacha20poly1305/blob/master/chacha20poly1305.js (Public Domain). 

The test vectors for Salsa20 were generated with PyCryptoDome. For Chacha20 and Chacha20-Poly1305 they were picked from https://tools.ietf.org/html/rfc8439 and https://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-04.
I would like to submit a pull request for an emulation of the WW2 SIGABA machine. Please let me know of any comments. Thank you.
This fixes https://github.com/gchq/CyberChef/issues/930 by correcting the key size validation. Tests have also been added for key sizes other than 8 bytes. 
Extractors added for DMP(Windows Page Dump) PF(Windows Prefetch), PF(Windows 10 Prefetch), LNK (Windows Shortcut) and LZOP(LZOP compressed data).


The fileSize field in the header is the number of bytes after that point rather than the number of bytes including everything up to that point. 
So instead of fileSize we need fileSize + 8.
Since the fileSize field itself is 4 bytes long and the RIFF is 4 bytes.
**Describe the bug**
When I try to set a Blowfish key to a 15-byte string, I get: `Blowfish uses a key length of 8 bytes (64 bits).`

**To Reproduce**
Add a Blowfish node with a key that is not 8 bytes long.

**Expected behaviour**
It should work if the key is between 4 and 56 bytes long, according to Wikipedia.

I'm not sure whether this is a "bug" or behaviour by design, but it seemed more appropriate to frame it as a bug than a feature or operation request.

**Describe the bug**
As is standard, the output of the Hexdump operation includes each line of hex data displayed as single-byte characters, with the unprintable characters replaced by a period. The standard implementation of this is to only consider characters in the range 0x20 - 0x7e as printable, but CyberChef prints a bunch of characters that have their high bit set.

**To Reproduce**
https://gchq.github.io/CyberChef/#recipe=From_Hex('Auto')To_Hexdump(16,false,false)&input=YTU

**Expected behaviour**
The Â¥ character replaced by a period. One of the advantages of displaying data in (traditional) hexdump format is that it looks the same to everyone, because it can display arbitrary data while only using characters from the 7-bit ASCII set, which are the same for every common character encoding.

**Additional context**
This comes down to the implementation of Utils.printable, which rather than designating a range (or ranges) of characters as "printable", it instead uses an enormous regex to define a bunch of ranges of unicode codepoints that are "unprintable" and strips them out. This is probably the right way to go for other uses of the function, but I feel that's too broad for Hexdump.
