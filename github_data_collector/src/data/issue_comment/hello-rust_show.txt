### What?

Rewrite htop in Rust using async/await.

### Why?

Would be a lot of fun to learn how to create a "lazy" version of htop and find out about the limitations of the Rust crate ecosystem around cross-platform process monitoring.

### How?

Find some crates for process monitoring and put them behind async/await to update each process status regularly and independently from other processes.
### What?

https://sourceware.org/git/?p=glibc.git;a=blob;f=string/strstr.c;hb=9d13fb2413921c713f83efe331e8e4d219c62c6b#l21

### Why?

My assumption is, that there is a lot of undefined behavior in this code.
We could talk about fuzzing, porting C code, performance benchmarks and more.

### How?

* Create a naive implementation of `strstr` in Rust.
* Benchmark it against the existing C version.
* Port the C `strstr` version verbatim to Rust.
* Run afl (fuzzing) against it to check for edge-cases.

Thanks for the inspiration @jorgelbg.

### What?

https://github.com/mre/the-coding-interview/pull/111

### Why?

Let's explore different ways on how to solve the same problem in Rust and discuss how idiomatic the solutions are.

### How?

Refactor the code from the link and talk about trade-offs.

Hello, I'm a new rust enthusiast. Today I have found your channel and fall in love with your content / dedication to the community. So I'm wondering with have any chance to you go back to produce that content, and I will be so gratefull to become a patreon.
### What?

(Visually) show how the rust compiler works

### Why?

To teach about the internals of a complex tool we use a lot (hopefully every day ðŸ˜‰)

### How?

https://github.com/nrc/stupid-stats
### What?

Write a clone of kafkacat in Rust (https://github.com/edenhill/kafkacat)

### Why?

Show how to write CLI apps that follow best-practices.
Would also be a fun tool to have and I need such a tool on a regular basis.

### How?

Probably something around structopt, Rust 2018 edition.

### What?

Spin up a ROM in [sprocketnes](https://github.com/pcwalton/sprocketnes) or [pinky](https://github.com/koute/pinky) and mess with it by modifying the bytes in memory or changing the meaning of the opcodes.

### Why?

Just for fun.

### How?

I guess we should go with a popular game like Super Mario.
We add a keyboard shortcut or so which inserts random glitches into the ROM. My assumption is, that the game will crash at some point. Also, when changing the opcodes, funny things could happen.

### What?

Explain tools that measure code coverage and work with Rust

### Why?

While code coverage is not a good measurement for the fail-safety of a system,
it might indicate, which parts of a system might need more tests.
Some coverage tools like kcov support Rust, but some tweaking is required to get them to work.

### How?

https://github.com/kennytm/cargo-kcov
https://github.com/xd009642/tarpaulin

----

Suggested by user [Hitlife80 on Reddit](https://www.reddit.com/r/rust/comments/8rttmw/hello_rust_7_parsing_dates_using_proptest_and_tdd/e0vkytb/)
### What?

Show how to debug Rust code.

### Why?

Debugging code is one of the core skills for software engineers.
Because Rust's current debugging story is not very mature yet, it might make sense to make an episode about the current debugging options and how to properly configure the environment.

### How?

Start with some pre-existing but buggy code and set-up a new debugger from scratch (most likely in VSCode or Intellij Rust). Show the current limitations of the system (e.g. variables don't show up or they get displayed as C/low-level structures without proper Rust introspection).

---

Requested by user [Hitlife80 on Reddit](https://www.reddit.com/r/rust/comments/8rttmw/hello_rust_7_parsing_dates_using_proptest_and_tdd/e0vkytb/)

### What?

Introduce some helpful crates.

### Why?

Because it's tricky to stay up-to-date with new, helpful crates nowadays. Also to raise awareness for the work of some talented Rust developers.

### How?

Just show five crates or so and give an example for their usage (maybe a before and after code comparison might work best.
