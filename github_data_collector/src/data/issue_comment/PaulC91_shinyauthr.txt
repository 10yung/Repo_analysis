Thank you for great package! 
Are there any tricks for using Shinyauth with Flexdashboard instead of pure Shiny and/or Shinydashboard? 
I have tried with no success.

After experimenting with couple different approaches, I believe testing `shinyauthr` functionalities against the Shiny example app in `inst/` would be the most practical way as it allows to test the user-facing interface (leaving room to change the underlying logic, e.g hashing, etc.).

Tests have been structured as:  
**Login**:
  * Login form displays properly (empty `user_name` and `password` fields with collapsed sidebar).
  * If a user logs in successfully `user_auth` is set to _TRUE_  and `info` gets update with user infos.
  * When a user logs in successfully `sidebarCollapsed` is set to _FALSE_ and logout button displays.

**Logout**:
  * Logging out successfully sets `user_auth` to _FALSE_ and `info` to _NULL_
  * Logging out hides logout button and sets `sidebarCollapsed` to  _TRUE_

Tests run well under a minute (~26secs.), hence it shouldn't be required to skip tests when submitting.

Would be really interesting to understand if I overlooked any better approach to do this.

### Help needed
Exporting values is needed in order to inspect them during testing. This is done by adding a call to `exportTestValues()` in `app.R`.
```r
  # Export reactive values for testing
  exportTestValues(
    auth_status = credentials()$user_auth,
    auth_info   = credentials()$info,
    user_data    = user_data()  # this throws an error
  )
```
On the other hand, exporting `user_data()` reactive data frame breaks the call, trowing the following error (even when in testmode): 
```
Unable to fetch all values from server. Is target app running with options(shiny.testmode=TRUE?)
```
This is blocking me from testing the right data is being show to user respecting their permission level. Hence tests have been commented out `test-shinyauthr.R`.

I am probably missing something obvious here but the same call works like a charm on a mock Shiny app.

Thanks a lot for the package, with some basic db logic to store/retrieve user credentials it has become my go-to to implement basic auth in Shiny.

I think unit tests are needed to guard the package from bugs, [`testthat`][1] is probably your best go-to on this one.

[1]: https://testthat.r-lib.org/
Is it possible to add the logout button in the User panel of the shinydashboardPlus' dashboardUser interface? When adding the button as it is, the button is not visible. Builing an own function without the `hide` function solves the problem, but then the login panel is not showing up after logout. 



Hey,
First of all: Thanks for the great package.
I found out that you can't log in, if the passwort contains the character §. Don't know if there are other characters which will cause that bug also, I didn't find out.   
Minimal example:  
Just run your example app with:
`user_base <- data.frame(user = "test", password = "§test") ` 
It will always say "Invalid username or password!"  
Also if § isn't the first character, it will cause this bug.

I'm trying to add signup functionality. I'm using the prescribed code for login verification:

```
credentials <- callModule(
    module = shinyauthr::login,
    id = "login", 
    data = user_base,
    user_col = user,
    pwd_col = password_hash,
    sodium_hashed = TRUE,
    log_out = reactive(logout_init()))
```

In the above code, `user_base` is a global variable. I tried to use `reactive()` and `eventReactive()` to replace the `data`, but got the following error:

> Error in UseMethod("tbl_vars") : 
>   no applicable method for 'tbl_vars' applied to an object of class "c('reactiveExpr', 'reactive')"

Refreshing the page does not help, but I'm able to login with the previously created user after restarting the application (because global variable `user_base` gets updated). But I'm unable to login with any user ID that's created in the current session.

**Desired output:**

On click of signup, a new row gets added to `user_base` during the same session. Login attempt should be successful with the new user.
Thank you for your package, it saves a lot!

I want to use ```user_info()$permissions == "..." ```  to control the appearance of certain ```tabPanel()``` in ```fluidPage()```. It works when first login, but after logout, the re-login process requires to refresh the web-page, other wise the web-page just not render the ```uiOutput("2")``` and ```uiOutput("3")```, as well as the ```glue()``` in sidebar. 

Do you have any idea why this happens?

```
ui <- dashboardPage(header = dashboardHeader(), 
                    sidebar = dashboardSidebar(), 
                    body = dashboardBody(
  shinyjs::useShinyjs(),
  tags$head(tags$style(".table{margin: 0 auto;}"),
            tags$script(src="https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/3.5.16/iframeResizer.contentWindow.min.js",
                        type="text/javascript"),
            includeScript("returnClick.js")
  ),
  shinyauthr::loginUI("login"),
  uiOutput("prelogin"), # same as uiOutput("user_table") in your example
  uiOutput("afterlogin"), # here i encountered issue
  HTML('<div data-iframe-height></div>')
))

server <- function(input, output, session) {
  output$afterlogin <- renderUI({
    afterloginUI()
  })
  
  ## issue may related to here
  afterloginUI <- reactive({
    req(credentials()$user_auth)
    
    if (user_info()$permissions == "standard") {
      
      fluidPage(
        tabsetPanel(type = "tabs",
                    tabPanel("1", uiOutput("1")),
                    tabPanel("2", uiOutput("2"))
                    )
        )
      } else if (user_info()$permissions == "admin") {
      
      fluidPage(
        tabsetPanel(type = "tabs",
                    tabPanel("1", uiOutput("1")),
                    tabPanel("2", uiOutput("2")),
                    tabPanel("3", uiOutput("3"))
                    )
        )
      }
    })
  }
```

Note: for ```uiOutput("2")``` and ```uiOutput("3")```, there are calls in their server like ```observe({})``` and ```observeEvent({})```, this is the major difference between ```uiOutput("1")```.

Thanks in advance!

Is it possible to use `shinyauthr` inside a shiny app like [superzip](https://shiny.rstudio.com/gallery/superzip-example.html)? I tried the following:

## UI
```r
library(leaflet)
library(shinyauthr)
library(shinyjs)

# Choices for drop-downs
vars <- c(
  "Is SuperZIP?" = "superzip",
  "Centile score" = "centile",
  "College education" = "college",
  "Median income" = "income",
  "Population" = "adultpop"
)


fluidPage(
  # must turn shinyjs on
  shinyjs::useShinyjs(),
  # add logout button UI 
  div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
  # add login panel UI function
  shinyauthr::loginUI(id = "login"),
  # setup table output to show user info after login
  uiOutput("superzip")
)

```

## Server

```r
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)

user_base <- data.frame(
  user = c("user1", "user2"),
  password = c("pass1", "pass2"), 
  permissions = c("admin", "standard"),
  name = c("User One", "User Two"),
  stringsAsFactors = FALSE,
  row.names = NULL
)

# Leaflet bindings are a bit slow; for now we'll just sample to compensate
set.seed(100)
zipdata <- allzips[sample.int(nrow(allzips), 10000),]
# By ordering by centile, we ensure that the (comparatively rare) SuperZIPs
# will be drawn last and thus be easier to see
zipdata <- zipdata[order(zipdata$centile),]

function(input, output, session) {
  
  # call the logout module with reactive trigger to hide/show
  logout_init <- callModule(shinyauthr::logout, 
                            id = "logout", 
                            active = reactive(credentials()$user_auth))
  
  # call login module supplying data frame, user and password cols
  # and reactive trigger
  credentials <- callModule(shinyauthr::login, 
                            id = "login", 
                            data = user_base,
                            user_col = user,
                            pwd_col = password,
                            log_out = reactive(logout_init()))
  
  # pulls out the user information returned from login module
  user_data <- reactive({credentials()$info})

  ## Interactive Map ###########################################

  # Create the map
  output$map <- renderLeaflet({
    leaflet() %>%
      addTiles(
        urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
        attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
      ) %>%
      setView(lng = -93.85, lat = 37.45, zoom = 4)
  })

  # A reactive expression that returns the set of zips that are
  # in bounds right now
  zipsInBounds <- reactive({
    if (is.null(input$map_bounds))
      return(zipdata[FALSE,])
    bounds <- input$map_bounds
    latRng <- range(bounds$north, bounds$south)
    lngRng <- range(bounds$east, bounds$west)

    subset(zipdata,
      latitude >= latRng[1] & latitude <= latRng[2] &
        longitude >= lngRng[1] & longitude <= lngRng[2])
  })

  # Precalculate the breaks we'll need for the two histograms
  centileBreaks <- hist(plot = FALSE, allzips$centile, breaks = 20)$breaks

  output$histCentile <- renderPlot({
    # If no zipcodes are in view, don't plot
    if (nrow(zipsInBounds()) == 0)
      return(NULL)

    hist(zipsInBounds()$centile,
      breaks = centileBreaks,
      main = "SuperZIP score (visible zips)",
      xlab = "Percentile",
      xlim = range(allzips$centile),
      col = '#00DD00',
      border = 'white')
  })

  output$scatterCollegeIncome <- renderPlot({
    # If no zipcodes are in view, don't plot
    if (nrow(zipsInBounds()) == 0)
      return(NULL)

    print(xyplot(income ~ college, data = zipsInBounds(), xlim = range(allzips$college), ylim = range(allzips$income)))
  })

  # This observer is responsible for maintaining the circles and legend,
  # according to the variables the user has chosen to map to color and size.
  observe({
    # use req to only render results when credentials()$user_auth is TRUE
    req(credentials()$user_auth)
    # 
    colorBy <- input$color
    sizeBy <- input$size

    if (colorBy == "superzip") {
      # Color and palette are treated specially in the "superzip" case, because
      # the values are categorical instead of continuous.
      colorData <- ifelse(zipdata$centile >= (100 - input$threshold), "yes", "no")
      pal <- colorFactor("viridis", colorData)
    } else {
      colorData <- zipdata[[colorBy]]
      pal <- colorBin("viridis", colorData, 7, pretty = FALSE)
    }

    if (sizeBy == "superzip") {
      # Radius is treated specially in the "superzip" case.
      radius <- ifelse(zipdata$centile >= (100 - input$threshold), 30000, 3000)
    } else {
      radius <- zipdata[[sizeBy]] / max(zipdata[[sizeBy]]) * 30000
    }

    leafletProxy("map", data = zipdata) %>%
      clearShapes() %>%
      addCircles(~longitude, ~latitude, radius=radius, layerId=~zipcode,
        stroke=FALSE, fillOpacity=0.4, fillColor=pal(colorData)) %>%
      addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
        layerId="colorLegend")
  })

  # Show a popup at the given location
  showZipcodePopup <- function(zipcode, lat, lng) {
    selectedZip <- allzips[allzips$zipcode == zipcode,]
    content <- as.character(tagList(
      tags$h4("Score:", as.integer(selectedZip$centile)),
      tags$strong(HTML(sprintf("%s, %s %s",
        selectedZip$city.x, selectedZip$state.x, selectedZip$zipcode
      ))), tags$br(),
      sprintf("Median household income: %s", dollar(selectedZip$income * 1000)), tags$br(),
      sprintf("Percent of adults with BA: %s%%", as.integer(selectedZip$college)), tags$br(),
      sprintf("Adult population: %s", selectedZip$adultpop)
    ))
    leafletProxy("map") %>% addPopups(lng, lat, content, layerId = zipcode)
  }

  # When map is clicked, show a popup with city info
  observe({
    leafletProxy("map") %>% clearPopups()
    event <- input$map_shape_click
    if (is.null(event))
      return()

    isolate({
      showZipcodePopup(event$id, event$lat, event$lng)
    })
  })


  ## Data Explorer ###########################################

  observe({
    cities <- if (is.null(input$states)) character(0) else {
      filter(cleantable, State %in% input$states) %>%
        `$`('City') %>%
        unique() %>%
        sort()
    }
    stillSelected <- isolate(input$cities[input$cities %in% cities])
    updateSelectInput(session, "cities", choices = cities,
      selected = stillSelected)
  })

  observe({
    zipcodes <- if (is.null(input$states)) character(0) else {
      cleantable %>%
        filter(State %in% input$states,
          is.null(input$cities) | City %in% input$cities) %>%
        `$`('Zipcode') %>%
        unique() %>%
        sort()
    }
    stillSelected <- isolate(input$zipcodes[input$zipcodes %in% zipcodes])
    updateSelectInput(session, "zipcodes", choices = zipcodes,
      selected = stillSelected)
  })

  observe({
    if (is.null(input$goto))
      return()
    isolate({
      map <- leafletProxy("map")
      map %>% clearPopups()
      dist <- 0.5
      zip <- input$goto$zip
      lat <- input$goto$lat
      lng <- input$goto$lng
      showZipcodePopup(zip, lat, lng)
      map %>% fitBounds(lng - dist, lat - dist, lng + dist, lat + dist)
    })
  })

  output$ziptable <- DT::renderDataTable({
    df <- cleantable %>%
      filter(
        Score >= input$minScore,
        Score <= input$maxScore,
        is.null(input$states) | State %in% input$states,
        is.null(input$cities) | City %in% input$cities,
        is.null(input$zipcodes) | Zipcode %in% input$zipcodes
      ) %>%
      mutate(Action = paste('<a class="go-map" href="" data-lat="', Lat, '" data-long="', Long, '" data-zip="', Zipcode, '"><i class="fa fa-crosshairs"></i></a>', sep=""))
    action <- DT::dataTableAjax(session, df)

    DT::datatable(df, options = list(ajax = list(url = action)), escape = FALSE)
  })
  
  
  output$superzip <- renderUI({
    # use req to only render results when credentials()$user_auth is TRUE
    req(credentials()$user_auth)
    ## The old superzip ui
    navbarPage("Superzip", id="nav",
               
               tabPanel("Interactive map",
                        div(class="outer",
                            
                            tags$head(
                              # Include our custom CSS
                              includeCSS("styles.css"),
                              includeScript("gomap.js")
                            ),
                            
                            # If not using custom CSS, set height of leafletOutput to a number instead of percent
                            leafletOutput("map", width="100%", height="100%"),
                            
                            # Shiny versions prior to 0.11 should use class = "modal" instead.
                            absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
                                          draggable = TRUE, top = 60, left = "auto", right = 20, bottom = "auto",
                                          width = 330, height = "auto",
                                          
                                          h2("ZIP explorer"),
                                          
                                          selectInput("color", "Color", vars),
                                          selectInput("size", "Size", vars, selected = "adultpop"),
                                          conditionalPanel("input.color == 'superzip' || input.size == 'superzip'",
                                                           # Only prompt for threshold when coloring or sizing by superzip
                                                           numericInput("threshold", "SuperZIP threshold (top n percentile)", 5)
                                          ),
                                          
                                          plotOutput("histCentile", height = 200),
                                          plotOutput("scatterCollegeIncome", height = 250)
                            ),
                            
                            tags$div(id="cite",
                                     'Data compiled for ', tags$em('Coming Apart: The State of White America, 1960–2010'), ' by Charles Murray (Crown Forum, 2012).'
                            )
                        )
               ),
               
               tabPanel("Data explorer",
                        fluidRow(
                          column(3,
                                 selectInput("states", "States", c("All states"="", structure(state.abb, names=state.name), "Washington, DC"="DC"), multiple=TRUE)
                          ),
                          column(3,
                                 conditionalPanel("input.states",
                                                  selectInput("cities", "Cities", c("All cities"=""), multiple=TRUE)
                                 )
                          ),
                          column(3,
                                 conditionalPanel("input.states",
                                                  selectInput("zipcodes", "Zipcodes", c("All zipcodes"=""), multiple=TRUE)
                                 )
                          )
                        ),
                        fluidRow(
                          column(1,
                                 numericInput("minScore", "Min score", min=0, max=100, value=0)
                          ),
                          column(1,
                                 numericInput("maxScore", "Max score", min=0, max=100, value=100)
                          )
                        ),
                        hr(),
                        DT::dataTableOutput("ziptable")
               ),
               
               conditionalPanel("false", icon("crosshair"))
    )
  })
  
}


```

Alas, when I try to run this code I get the following error:

```r
 renderUI [/home/ignacio/learning_shinyauthr/063-superzip-example/server.R#218]
```


Finding your [issue 10](https://github.com/PaulC91/shinyauthr/issues/10) and calligross's [Shiny Cookie Based Authentication Example](https://gist.github.com/calligross/e779281b500eb93ee9e42e4d72448189) I simply combined the code and created this PR.
First off, would like to thank you for putting all the work in this package. It has made my life simpler.

However, there is always room for improvement and one problem I noticed that I have to re-login in every new window because currently the package doesn't store successful authentication persistently across tabs so want propose a feature : Would anyone be up for collaboration to combine [cookie.js](https://github.com/js-cookie/js-cookie) to save session-id per user as Cookie with a custom expiry period such that the same user is not required to login again in that time period. 

[This](https://calligross.de/post/using-cookie-based-authentication-with-shiny/) blog uses this cookie.js and exemplifies its usage in R.