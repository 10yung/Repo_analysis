I cannot see any 0.3.1 release in https://github.com/oleg-py/better-monadic-for/releases although the artifacts are released.


When building tests for `catsTests` for Scala 2.11.12 with `-Ywarn-unused`, I get a following lint warning:
```
[warn] /tmp/better-monadic-for/cats-tests/src/test/scala/com/olegpy/bm4/CatsSyntaxTest.scala:37:13: local val in value $anonfun is never used
[warn]           _ <- "dummy".pure[F]
[warn]             ^
```
A minimal (?) example for this looks like this:
```scala
def f[F[_]: Monad] =
  for {
    _ <- "dummy".pure[F]
    a = 1
  } yield a
```

Additionally, under the same conditions this code:
```scala
import cats.Monad
import cats.implicits._

object Foo {
  def foo[F[_]: Monad]: F[Unit] =
    for {
      _ <- ().pure[F]
      (a, b) = (1, 2)
      _ = println(s"($a, $b)")
    } yield ()
}
```
also produces warnings:
```
[warn] /tmp/better-monadic-for/cats-tests/src/test/scala/com/olegpy/bm4/Foo.scala:8:7: local val in value $anonfun is never used
[warn]       (a, b) = (1, 2)
[warn]       ^
[warn] /tmp/better-monadic-for/cats-tests/src/test/scala/com/olegpy/bm4/Foo.scala:9:18: local val in value $anonfun is never used
[warn]       _ = println(s"($a, $b)")
[warn]                  ^
```
These two seem to be introduced in 5eba85bb.
This code:
```scala
val x =
 for {
    n <- Some(1)
    if n > 0
  } yield n
```

triggers the "unused parameter" lint:
```
Error:(99, 7) parameter value n in value $anonfun is never used
      n <- Some(1)
```
The following causes some noise during migration to this plugin:
```scala
import cats.implicits._
case class Foo(a: Long)
for {
  Foo(a) <- Either.right[String, Foo](Foo(1))
  b <- Either.right(Foo(2))
  Foo(c) = b
} yield a + c
```
yields
```
scala> for { Foo(a) <- Either.right[String, Foo](Foo(1)); b <- Either.right(Foo(2)); Foo(c) = b } yield a + c
<console>:17: warning: [wartremover:NonUnitStatements] Statements must return Unit
       for { Foo(a) <- Either.right[String, Foo](Foo(1)); b <- Either.right(Foo(2)); Foo(c) = b } yield a + c
                                                                                        ^
res1: scala.util.Either[String,Long] = Right(3)
```

Walking through the tree, I can't even see where this error is coming from. By spacing out the above code, I can narrow it down to:
```
<console>:20: warning: [wartremover:NonUnitStatements] Statements must return Unit
         Foo(c) = b
            ^
```

Any pointers or insight would be appreciated. This is already excellent, just looking to learn.

The simplified tree from the SBT console is:
```
object $iw extends scala.AnyRef {
  def <init>() = {
    super.<init>();
    ()
  };
  val res1 = Either.right[String, Foo](Foo(1)).withFilter((check$ifrefutable$1) =>
    check$ifrefutable$1: @scala.unchecked match {
      case Foo((a @ _)) => true
      case _ => false
    }
  )
  .flatMap((x$4) =>
    x$4: @scala.unchecked match {
      case Foo((a @ _)) =>
        Either.right(Foo(2))
          .map((b) => {
            <synthetic> <artifact> private[this] val x$2 = b: @scala.unchecked match {
              case (x$1 @ Foo((c @ _))) => scala.Tuple2(x$1, c)
            };
            val x$1 = x$2._1;
            val c = x$2._2;
            scala.Tuple2(b, x$1)
          })
          .map((x$3) =>
            x$3: @scala.unchecked match {
              case scala.Tuple2((b @ _), Foo((c @ _))) => a.$plus(c)
            }
          )
    }
  )
}
```