Hello!

I tested the ReceiveDemo advanced and simple. Both staying silent on serial.

mySwitch.available()

never triggers. I use theese receivers https://www.amazon.de/gp/product/B071J2Z3YK/ref=ppx_yo_dt_b_asin_title_o04_s00?ie=UTF8&psc=1

If i connect a Logic analyzer to the receiver module its bitbanging. If i push a button on the remote i try to capture the bitbanging sequences are changing. After releasing a button all is 1 for a while.
Is there a special Setup or receiver i have to use with this library?

Thanks 
Stephan
I've worked on receiving this code this off and on over several months but I just keep hitting walls. I have a driveway sensor that I can reliably receive consistent data via the rtl_443 app on an sdr. I can't seem to do so on my arduino though. I get the following pulses:

3784,904,1344,920,644,916,640,916,640,916,1144,916,1144,912,1144,916,640,920,640

And it seems to match up with the fcc filing for the product here: https://fccid.io/I6HGTOFM231/Test-Report/Test-Report-1214140 on page 14 of 23

It looks like the pulse lengths are purposely different and there are more than 2 states which would explain why I can't get the results I want with rc-switch but the reliability of data via the sdr method says to me it must be binary data and I'm ju7st missing something.

Any suggestions?




In all the examples I find it says

`  mySwitch.enableReceive(0);  // Receiver input on interrupt 0 (D2)`

But what if I would like to use another pin for the receiver? 

I have a Wemos D1 mini and I can't use pin 2. How could I set up a different pin?
Dear Sir I have to say tank you very very much for your lib I have achieve my domobox for most off my outlet

your lib associate with websocket it's wonderfull of reactivity less than 1 second amaizing from a smartphone

however i have problem with one outlet here find inclose with simple scaner

618,206,616,208,619,613,210,207,616,613,211,610,213,609,215,607,216,201,620,203,623,610,213,203,619,205,618,207,615,208,615,614,210,611,212,205,621,206,616,208,614,210,612,211,613,212,610,213,610,213,610,619,208,211,612,212,610,213,610,214,609,215,607,217,607,216,606,217,609,218,606,217,606,217,605,218,606,623,201,215,608,620,204,617,210,210,613,616,207,209,614,615,209,612,212,610,213,608,215,201,619,608,5107,5069,626,604,219,197,625,604,219,198,624,200,621,204,619,610,214,607,220,200,622,202,620,204,618,612,212,204,618,206,616,208,615,209,617,615,208,209,614,615,209,612,212,609,214,608,216,200,621,203,623,611,213,203,619,205,617,206,616,209,614,615,209,612,211,205,621,207,615,208,615,209,613,211,612,212,610,213,610,214,610,618,208,212,611,213,610,214,608,215,608,214,609,215,607,216,608,216,610,217,606,217,606,218,605,218,605,624,200,215,608,620,204,618,209,210,614,614,208,208,616,614,209,613,211,610,214,608,214,202,618,609,5114,5069,626,604,219,197,625,605,219,197,624,200,622,202,621,609,214,608,219,201,620,204,619,205,617,612,212,205,617,207,615,209,613,210,617,615,209,207,616,613,210,612,212,609,214,608,217,199,621,203,623,611,212,203,619,206,617,206,616,208,615,613,211,612,211,205,620,207,615,209,614,210,613,211,611,212,611,213,609,214,610,618,209,211,612,211,611,214,609,214,608,215,608,215,608,216,607,217,609,217,606,218,605,219,604,218,605,623,201,215,609,620,204,616,211,210,612,616,208,208,615,615,208,613,211,611,212,609,214,202,619,608,5106,5069,627,602,220,196,627,604,218,199,623,201,621,203,619,610,214,608,219,201,620,204,619,204,618,611,213,203,619,205,617,208,615,209,617,615,208,208,616,613,210,612,211,610,214,608,215,201,621,203,623,610,213,203,620,204,617,207,616,208,615,615,208,612,212,205,620,208,614,209,614,210,613,210,612,212,611,212,611,212,611,618,209,211,611,213,610,213,610,214,608,216,607,216,607,215,608,216,610,217,606,217,606,218,605,218,605,623,201,215,608,620,204,618,209,210,612,617,207,209,614,615,210,612,211,610,214,607,216,201,618,609,79286,

it's very long can you give me a help

thanks a lot


Wiring between arduino and receiver/transmitter is fine and works with many remotes with different protocols.

I'm struggling with a last one - I receive fine:

```
19:08:48.387 -> Received 3305378 / 24bit Protocol: 0
19:08:48.423 -> data bits of pulse train duration: 21712
19:08:48.459 -> proposed protocol: { 302, { 70, 3 }, { 1, 2 }, { 2, 1 }, true }
19:08:48.531 -> ====
19:08:48.531 -> first level down
19:08:48.567 -> 21100 812 
19:08:48.567 -> 320 612 288 612 584 316 588 316 292 608 292 608 588 312 300 624 
19:08:48.639 -> 300 600 596 304 596 308 300 600 596 308 596 304 596 308 596 328 
19:08:48.711 -> 600 304 300 600 596 308 300 600 304 596 308 592 600 304 304 600 
19:08:48.780 -> 
19:08:48.780 -> ====
```

But nothing happens when I transmit:

```
RCSwitch mySwitch = RCSwitch();
mySwitch.enableTransmit(3);
mySwitch.setProtocol(0);
mySwitch.setPulseLength(302);
mySwitch.setRepeatTransmit(7);
delay(500);
mySwitch.send(3305378, 24);
delay(2000);
```

Any idea?
I have a Type A (DIP switch) set of 5 outlets and 1 remote with 5x2 buttons. In getCodeWordA sGroup and bStatus parameters were handled wrong, had to be changed in order to get it work with my set like this:

char* RCSwitch::getCodeWordA(const char* sGroup, const char* sDevice, bool bStatus) {
  static char sReturn[13];
  int nReturnPos = 0;

  for (int i = 0; i < 5; i++) {
    sReturn[nReturnPos++] = (sGroup[i] == '1') ? '1' : 'F';
  }

  for (int i = 0; i < 5; i++) {
    sReturn[nReturnPos++] = (sDevice[i] == '0') ? 'F' : '0';
  }

  sReturn[nReturnPos++] = bStatus ? 'F' : '0';
  sReturn[nReturnPos++] = bStatus ? '0' : 'F';

  sReturn[nReturnPos] = '\0';
  Serial.println(sReturn);
  return sReturn;
}
Hi. i would like to send longer signal than 32 bit. Is it possible with this library(I´ve tested tutorial Add_New_Remote_Part_2, but i couldnt recognize new protocol). Is it possible to send binary longer than 32bit with arduino? I´ve received binary code with SDR.

The library is just super!!! I try to compile the project under STM8S103F3P6 and get errors. Please help to adapt for this controller. The controller is very cheap and therefore very suitable for sensors of security systems.

C:\Users\roman\AppData\Local\Arduino15\packages\sduino\tools\sdcc\build.11242/bin/sdcc sketch\SendDemo.ino.cpp preproc\ctags_target_for_gcc_minus_e.cpp re12 -c -Ddouble=float -DUSE_STDINT -D__PROG_TYPES_COMPAT__ -E -MC -mstm8 -DSTM8S103 -DF_CPU=16000000L -DARDUINO=10809 -DARDUINO_STM8S_BLUE -DARDUINO_ARCH_STM8 -IC:\Users\roman\AppData\Local\Arduino15\packages\sduino\hardware\stm8\0.5.0\cores\sduino -IC:\Users\roman\AppData\Local\Arduino15\packages\sduino\hardware\stm8\0.5.0\variants\standard -IC:\Users\roman\Documents\Arduino\libraries\rc-switch -IC:\Users\roman\AppData\Local\Arduino15\packages\sduino\hardware\stm8\0.5.0/STM8S_StdPeriph_Driver/inc -IC:\Users\roman\AppData\Local\Arduino15\packages\sduino\tools\sdcc\build.11242/include
Mark re12:C:\Users\roman\AppData\Local\Arduino15\packages\sduino\tools\sdcc\build.11242/bin/sdcc -c -Ddouble=float -DUSE_STDINT -D__PROG_TYPES_COMPAT__ -E -MC -mstm8 -DSTM8S103 -DF_CPU=16000000L -DARDUINO=10809 -DARDUINO_STM8S_BLUE -DARDUINO_ARCH_STM8 -IC:\Users\roman\AppData\Local\Arduino15\packages\sduino\hardware\stm8\0.5.0\cores\sduino -IC:\Users\roman\AppData\Local\Arduino15\packages\sduino\hardware\stm8\0.5.0\variants\standard -IC:\Users\roman\Documents\Arduino\libraries\rc-switch -IC:\Users\roman\AppData\Local\Arduino15\packages\sduino\hardware\stm8\0.5.0/STM8S_StdPeriph_Driver/inc -IC:\Users\roman\AppData\Local\Arduino15\packages\sduino\tools\sdcc\build.11242/include sketch\SendDemo.ino.cpp -o preproc\ctags_target_for_gcc_minus_e.cpp
cpp gefunden
In file included from C:\Users\roman\Documents\Arduino\SendDemo\SendDemo.ino:8:

C:/Users/roman/Documents/Arduino/libraries/rc-switch/RCSwitch.h:55:33: error: missing binary operator before token "or"

C:/Users/roman/Documents/Arduino/libraries/rc-switch/RCSwitch.h:83:13: error: missing binary operator before token "defined"

C:/Users/roman/Documents/Arduino/libraries/rc-switch/RCSwitch.h:101:13: error: missing binary operator before token "defined"

C:/Users/roman/Documents/Arduino/libraries/rc-switch/RCSwitch.h:130:13: error: missing binary operator before token "defined"

C:/Users/roman/Documents/Arduino/libraries/rc-switch/RCSwitch.h:140:13: error: missing binary operator before token "defined"
Hello,
  Thanks for rc-switch -- it's a great library!  

  But I'm trying to integrate it with a GPS device, and I find that when I enable rc-switch with:

mySwitch.enableReceive(1);

...it introduces an internal delay somewhere that throws off the timing of reading the GPS data stream, causing the GPS data to generate about a 50% error rate -- even when no remote buttons are being pressed, just idle state. 

 Once I remove the enableRecieve(1) statement, the code works perfectly and the GPS data stream has zero errors.  

Is there a way to use rc-switch that doesn't introduce a small loop{} delay and only triggers when the actual interrupt pin is triggered? 

Thanks.

My setup is as below.

MX-RM-5V [data] ---> [D2] Arduino Nano

rcswitch.enableReceive is set to 0. That's the interrupt number for D2. Should it be 5? (that's the pin number)


The remote I'm trying to sniff out.
https://photos.app.goo.gl/9j5Ak2yzxeKkRbEA6