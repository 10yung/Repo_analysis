
I want to display auto renewable product price in local currency and display it on UILabel. Is it possible to achieve that?




### Platform

- [ x] iOS
- [ x] macOS
- [ ] tvOS

### In app purchase type

- [ x] Consumable
- [ x] Non-consumable 
- [ x] Auto-Renewable Subscription
- [ x] Non-Renewing Subscription

### Environment

- [ x] Sandbox
- [ x] Production

### Version
0.15

### Related issues
ℹ When compile  new feature(ios, tablet, mac) of Xcode on mac 10.15 is error.

## Report

### Issue summary
When compile it shows error was below:
/xxxxxx/Pods/SwiftyStoreKit/SwiftyStoreKit/PaymentQueueController.swift:244:10: Cannot override 'paymentQueue' which has been marked unavailable
Error function:
 #if os(iOS)
    func paymentQueue(_ queue: SKPaymentQueue, shouldAddStorePayment payment: SKPayment, for product: SKProduct) -> Bool {
        
        return shouldAddStorePaymentHandler?(payment, product) ?? false
    }

### What did you expect to happen
Should not no error

### What happened instead
No has only this one happen.





### Platform

- [* ] iOS
- [ ] macOS
- [ ] tvOS

### In app purchase type

- [ ] Consumable
- [* ] Non-consumable 
- [ ] Auto-Renewable Subscription
- [ ] Non-Renewing Subscription

### Environment

- [ ] Sandbox
- [*] Production

### Version
ℹ 0.15.0

### Related issues
ℹ 

## Report

### Issue summary
ℹ When user execute the SwiftyStoreKit.purchaseProduct function, it takes long to time to show next dialog box. For each steps, it takes more than 10 seconds.

### What did you expect to happen
ℹ When execute SwiftyStoreKit.purchaseProduct it will execute faster and each steps should be faster until user make the purchase. 

### What happened instead
ℹ Very slow. 





### Platform

- [x] iOS

### In app purchase type

- [x] Consumable

### Environment
- [x] Production

### Version
0.15.0


### Issue summary

I printed the log in the official environment and found that the user paid in the official environment and the payment was successful, but the library failed to return. At this time, I can get the payment receipt. Go to server authentication is OK.

### What did you expect to happen
I want SwiftyStoreKit to handle this situation





After adding SwiftyStoreKit to my macOS app now I see the location arrow at the menu bar while I am using SwiftyStoreKit to check a receipt.

Do SwiftyStoreKit use location services in any way?

If so, do I need to add some entitlement to my app, so it will not be rejected by the Mac App Store review?

thanks
### Platform

- [X ] iOS
- [ ] macOS
- [ ] tvOS

### In app purchase type

- [ ] Consumable
- [X ] Non-consumable 
- [ ] Auto-Renewable Subscription
- [ ] Non-Renewing Subscription

### Environment

- [X ] Sandbox
- [X] Production

### Version
0.15.0

## Report

### Issue summary
I downloaded the example project and placed in my secret key and product identifier for a non-consumable IAP. Unfortunately it seems that I can't identify if the non-consumable IAP was purchased. I can buy the IAP and there's the dialog which also says that it was already purchased. But after that and after I restored my purchases the receipt validation ends up that I don't purchased it. So what I mean is that in the receipt the non-consumable IAP is not listed. Either sandbox neither production. I came across that problem cause we currently facing this problem in our app.

I also wrote apple and they check this on their side. I'm just curious cause non-renewable and renewable subscriptions work fine. Is there something is miss here? Something special about non-consumable IAP. I just wanted to write it here cause I use SwiftyStoreKit in our app.

### What did you expect to happen
Non-consumable IAP should be listed in receipt 

### What happened instead
Non-consumable IAP is not listed in receipt






### Platform

- [ x] iOS
- [ ] macOS
- [ ] tvOS

### In app purchase type

- [ ] Consumable
- [x ] Non-consumable 
- [ ] Auto-Renewable Subscription
- [ ] Non-Renewing Subscription

### Environment

- [ x] Sandbox
- [ ] Production

### Version
0.15.0

## Report

### Issue summary
On iOS 13.2 purchase never call the completion closure, in app purchase dialog is never shown.
Same code on iOS 13.1 works like a charm, the app tested on iOS 13.1 was rejected from app store for this reason, the reviewer tested on iOS 13.2.

ProductsInfoController.swift 
```
 for completion in query.completionHandlers {
        completion(results) //do nothing
   }
``` 

### Related issue
#500 something bad happen on iOS 13.2

### What did you expect to happen
the purchase should call the completion block and show the purchase dialog

### What happened instead
purchase dialog not shown

### Platform
iOS 13.1 and 13.2

### In app purchase type
- [ ] Consumable

### Environment
- [ ] Sandbox

### Version
SwiftyStoreKit (0.15.0) // installation: pod 'SwiftyStoreKit'

### Related issues

https://github.com/bizz84/SwiftyStoreKit/issues/432

https://stackoverflow.com/a/53162058/4833705

https://stackoverflow.com/q/53841379/4833705

### Issue summary
the `closure` inside `SwiftyStoreKit.completeTransactions(atomically: true) { ...  }`  never gets reached

### What did you expect to happen
I expected the closure to get entered

### What happened instead
the closure was ever entered

## Report

My app uses a tip jar for IAP so I only use Consumable.

I submitted my app to the App Store this morning and got a rejection saying they couldn't make an IAP when trying to make a Consumable purchase (a tip).

While testing as a sandbox tester when I checked the purchase I kept getting an error: "Unknown error. Please contact support":

```
SwiftyStoreKit.purchaseProduct(product, quantity: 1, atomically: true) { result in
    switch result {
        case .success(let product):
            // fetch content from your server, then:
            if product.needsFinishTransaction {

                SwiftyStoreKit.finishTransaction(product.transaction)
            }
            print("Purchase Success: \(product.productId)")

        case .error(let error):
             switch error.code {
                case .unknown:
                     print("Unknown error. Please contact support")
        // failed cases ...
    }
}
```

Upon further inspection even though I had this code below in `AppDelegate` the closure never gets called.

```
func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {

    // Doesn't enter closure
    SwiftyStoreKit.completeTransactions(atomically: true) { 

        // *** it never reaches this point ***

        (purchases) in

        for purchase in purchases {
            switch purchase.transaction.transactionState {
            case .purchased, .restored:
                if purchase.needsFinishTransaction {
                    // Deliver content from server, then:

                    let downloads = purchase.transaction.downloads
                    SKPaymentQueue.default().start(downloads)

                    SwiftyStoreKit.finishTransaction(purchase.transaction)
                }
                // Unlock content
            case .failed, .purchasing, .deferred:
                break // do nothing
            }
        }
    }
    return true
}
```

My sandbox tester email is confirmed, I signed out of the device as my real self, I logged in on the device as the sandbox tester, I'm logged into iCloud as the sandbox tester.

**What could be the reason for the closure not being entered in AppDelegate?**

Here's the code from the vc that I use to make the Consumable purchase:

```
var dataSource = [Tip]()
var sharedSecret = appStoreConnectSecretKey

let inAppProductIds = ["com.myCo.myAppName.firstTip", // 0.99
                       "com.myCo.myAppName.secondTip", // 9.99 ]

override func viewDidLoad() {
    super.viewDidLoad()

   getInAppPurchaseAmounts()
}

func getInAppPurchaseAmounts() {

    // show spinner

    let dispatchGroup = DispatchGroup()

    for productId in inAppProductIds {

        dispatchGroup.enter()

        SwiftyStoreKit.retrieveProductsInfo([productId]) { [weak self](result) in
            if let product = result.retrievedProducts.first {
                let priceString = product.localizedPrice!
                print("Product: \(product.localizedDescription), price: \(priceString)")

                let tip = Tip(displayName: product.description,
                              description: product.localizedDescription,
                              productId: productId
                              price: priceString)


                self?.addTipToDataSource(tip)

                if let sharedSecret = self?.sharedSecret {

                    self?.verifyPurchase(with: productId, sharedSecret: sharedSecret)
                }
                dispatchGroup.leave()

            } else if let invalidProductId = result.invalidProductIDs.first {
                print("Invalid product identifier: \(invalidProductId)")
                dispatchGroup.leave()

            } else {
                print("Error: \(String(describing: result.error))")
                dispatchGroup.leave()
            }
        }
    }

    dispatchGroup.notify(queue: .global(qos: .background)) { [weak self] in
        DispatchQueue.main.async { [weak self] in

            // removeSpinnerAndReloadData()
        }
    }
}

func verifyPurchase(with productId: String, sharedSecret: String) {

    let appleValidator = AppleReceiptValidator(service: .production, sharedSecret: sharedSecret)
    SwiftyStoreKit.verifyReceipt(using: appleValidator) { result in
        switch result {
        case .success(let receipt):
            let productId = productId
            // Verify the purchase of Consumable or NonConsumable
            let purchaseResult = SwiftyStoreKit.verifyPurchase(
                productId: productId,
                inReceipt: receipt)

            switch purchaseResult {
            case .purchased(let receiptItem):
                print("\(productId) is purchased: \(receiptItem)")
            case .notPurchased:
                print("The user has never purchased \(productId)")
            }
        case .error(let error):
            print("Receipt verification failed: \(error)")
        }
    }
}

func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    guard let cell = collectionView.cellForItem(at: indexPath) as? TipCell else { return }
    guard let indexPath = collectionView.indexPath(for: cell) else { return }

    let tip = dataSource[indexPath.item]

    purchaseProduct(with: tip.productId)
}

func purchaseProduct(with productId: String) {

    SwiftyStoreKit.retrieveProductsInfo([productId]) { result in
        if let product = result.retrievedProducts.first {
            SwiftyStoreKit.purchaseProduct(product, quantity: 1, atomically: true) { result in

                switch result {
                case .success(let product):
                    // fetch content from your server, then:
                    if product.needsFinishTransaction {
                        SwiftyStoreKit.finishTransaction(product.transaction)
                    }
                    print("Purchase Success: \(product.productId)")
                case .error(let error):
                    switch error.code {
                    case .unknown:
                        print("Unknown error. Please contact support")
                    case .clientInvalid:
                        print("Not allowed to make the payment")
                    case .paymentCancelled:
                        print("Payment cancelled")
                    case .paymentInvalid:
                        print("The purchase identifier was invalid")
                    case .paymentNotAllowed:
                        print("The device is not allowed to make the payment")
                    case .storeProductNotAvailable:
                        print("The product is not available in the current storefront")
                    case .cloudServicePermissionDenied:
                        print("Access to cloud service information is not allowed")
                    case .cloudServiceNetworkConnectionFailed:
                        print("Could not connect to the network")
                    case .cloudServiceRevoked:
                        print("User has revoked permission to use this cloud service")
                    default:
                        print((error as NSError).localizedDescription)
                    }
                }
            }
        }
    }
}
```