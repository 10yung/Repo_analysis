Not sure how useful this is, but I wanted to update glutin and webrender to see if it would fix https://github.com/christolliday/limn/issues/3. Unfortunately this didn't fix the issue, but I thought I'd put this up for you in case it saves you work in future.

Known issues:
- Ellipse clipping broken as webrender no longer supports this.
- Only list, crud, and button examples updated to work with new glutin.
Hello, I encountered error when building limn with rustc 1.24.
```
   Compiling ordered_iter v0.1.0
error[E0277]: the trait bound `B: bit_vec::BitBlock` is not satisfied
   --> /home/user/.cargo/registry/src/github.com-1ecc6299db9ec823/ordered_iter-0.1.0/src/lib.rs:285:32
    |
285 | impl<'a, B: bit_vec::BitBlock> OrderedSetIterator for bit_set::Iter<'a, B> {}
    |                                ^^^^^^^^^^^^^^^^^^ the trait `bit_vec::BitBlock` is not implemented for `B`
    |
    = help: consider adding a `where B: bit_vec::BitBlock` bound
    = note: required because of the requirements on the impl of `std::iter::Iterator` for `bit_set::Iter<'a, B>`

error: aborting due to previous error

error: Could not compile `ordered_iter`.
warning: build failed, waiting for other jobs to finish...
error: build failed
```
I tried to add the `where` block as rust recommends, but the error stays exactly the same.
Commenting out this line with impl works, the library gets built and even examples can be built.

This error seems to be in [stable_bst](https://github.com/rocallahan/stable-bst) library which uses [ordered_iter](https://github.com/contain-rs/ordered_iter) internally, but these two crates seem to be no longer maintained. 

stable_bst library is used only in [limn/core/src/input/keyboard.rs](https://github.com/christolliday/limn/blob/0862eb02a46bc6a6610bc6911c3420b5f1a32665/core/src/input/keyboard.rs), it uses TreeMap and ranges from this crate.
Maybe the best thing to do is just wait for ranges to be stabilized in rust and just remove this library altogether and use std BTreeMap as written in [this comment](https://github.com/christolliday/limn/blob/0862eb02a46bc6a6610bc6911c3420b5f1a32665/core/src/input/keyboard.rs#L35).
Running Windows 10, v1709
Attempting to build or run any of the examples with cargo returns this error:

error: failed to select a version for `khronos_api` (required by `gl_generator`):
all possible versions conflict with previously selected versions of `khronos_api`
  version `2.0.0` in use by `khronos_api v2.0.0`
  possible versions to select: `2.2.0`, `2.1.0`
Are there any plans on data binding ?
Unicode input is essential for non-English users.

https://github.com/servo/servo/issues/4144

When I try to run clock example I gets error:
```
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: OsError("wglCreateContextAttribsARB failed: OS Error -1073274731 (FormatMessageW() returned error 317) (os error -1073274731)")', src\libcore\result.rs:906:4
note: Run with `RUST_BACKTRACE=1` for a backtrace.
error: process didn't exit successfully: `target\release\examples\clock.exe` (exit code: 101)
```
None of the currently available widgets demonstrate an ability to draw over other portions of the window.  It would be nice to see how this might be accomplished in limn.  Some example widgets that need this functionality include drop-down box, context menu, menu bar, tooltip, tab bar, etc.
I think there is still a room for little refactoring. Here are few propositions.

How about change of

WidgetBuilder::set_draw_style

to set_style?

___

I would suggest change naming of WidgetModifier also the method from_modifier. The name is confusing and I there is no documentation currently. Only have apply method, so how about Apply trait? Or WidgetApply?

Also,


```
WidgetBuilder::from_modifier(List::default());
```

you basically create a default list. Maybe "WidgetBuild::create_from(List::default())" or implement From trait for the current widget modifier?
It would be possible to write:

let wb = WidgetBuilder::from(List::default()); 

___

There is lot of some_widget.layout().add(contstraints!...) repeating in the examples. Since contraints is a macro itself, how about putting a target widget builder inside macro?

```
list_widget.layout().add(constraints![shrink(), match_width(&scroll_widget)]);
```

change to something like (not sure if possible):

```
constrain!{
	target: list_widget,
	shrink(),
	match_width(&scroll_widget)
}
```
In this case we are hiding mutating a state so maybe not so good idea.
How about:
```
list_widget.add(constraints![...])
```
 or
```
list_widget.constrain(align_top(&container))
```
or
```
list_widget.add_rule(align_top(&container))
```
?

We could also consider changing "constrain" to "rule" since its shorter and easier to type.
I don't have time to investigate this currently, but here:

![error](https://user-images.githubusercontent.com/12084016/33417857-6f67cfba-d5a3-11e7-9274-0ba638eba243.png)

... the bottom of the rectangle doesn't get rendered for whatever reason. Probably a webrender mistake.

The layout is correct, as far as I can see:

![error_with_borders](https://user-images.githubusercontent.com/12084016/33417878-88f05290-d5a3-11e7-8b63-eae16706ca34.png)

**Only occurs when the window is maximized!** This doesn't happen in a regular 800x600 window. It's only a minor annoyance, though.
Known issues:
-On Windows, the whole window flickers while resizing.
-On X11 (and probably other platforms) when growing the window the new window area stays black for a while before being drawn.
-Rendering lags when the layout is updated, rendering and layout are not well synchronized.

The core event/rendering loop needs an overhaul to fix these properly.

I'm planning to take these on after trying to fix the other major issues on OSX, so that these issues can hopefully be fixed and tested across all the major platforms.