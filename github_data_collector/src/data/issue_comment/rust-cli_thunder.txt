Consider this simple snippet:

```rust
use thunder;
use clap;
use thunder::thunderclap;
struct MyApp;
#[thunderclap(param: String: "A global var")]
impl MyApp {
    /// Scan a directory
    fn scan(source_dir: String) {
        println!("param={}", param);
    }
}
fn main() {
    MyApp::start();
}
```

returns an error when running compiling:
```
$ cargo run 
   Compiling test-thunder v0.1.0 (/home/xxx/tmp/test-thunder)
error[E0425]: cannot find value `param` in this scope
 --> src/main.rs:8:1
  |
8 | #[thunderclap(param: String: "A global var")]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope
```

or also

```
$ cargo run --param hey
error: Found argument '--param' which wasn't expected, or isn't valid in this context

USAGE:
    cargo run [OPTIONS] [--] [args]...

For more information try --help
```

How are global variable supposed to be used? Can you help with some more detailed examples?

thanks
The [Loki example](https://github.com/rust-clique/thunder/blob/master/examples/loki.rs) does not compile.

```
$ cargo run help
   Compiling test-thunder v0.1.0 (/home/xxx/tmp/test-thunder)
error: custom attribute panicked
 --> src/main.rs:9:1
  |
9 | #[thunderclap(example: Option<String>: "Error, here", another_example: String: "No error, here")]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: message: index out of bounds: the len is 1 but the index is 1
```

Running on `edition = "2018"`:
```
$ rustc --version
rustc 1.33.0-nightly (adbfec229 2018-12-17)
```
Hi, check this code out:

```
use thunder::thunderclap;
struct MyApp;
#[thunderclap]
impl MyApp {
    fn hello(name: &str) -> Result<&str,()> {
        println!("Hello {}", name);
    }
}
fn main() {
    MyApp::hello("kat");
}
```

Compilation errors:
```
$ cargo check 
    Checking test-thunder v0.1.0 (/home/xxx/tmp/test-thunder)
error[E0308]: mismatched types
 --> src/main.rs:5:1
  |
5 | #[thunderclap]
  | ^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()
  |
  = note: expected type `std::result::Result<&str, ()>`
             found type `()`

error[E0308]: match arms have incompatible types
 --> src/main.rs:5:1
  |
5 | #[thunderclap]
  | ^^^^^^^^^^^^^^
  | |
  | expected enum `std::result::Result`, found ()
  | match arm with an incompatible type
  |
  = note: expected type `std::result::Result<&str, ()>`
             found type `()`

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0308`.
error: Could not compile `test-thunder`.
```

I see two issues here:
* `thunderclap` is "stealing" the error positioning, which is unfortunate because on large codebases it could make hard to understand where exactly is the error
* There are two errors reported instead of one

Correct error expected:
```
$ cargo_check 
    Checking test-thunder v0.1.0 (/home/xxx/tmp/test-thunder)
error[E0308]: mismatched types
 --> src/main.rs:7:45
  |
7 |       fn hello(name: &str) -> Result<&str,()> {
  |  _____________________________________________^
8 | |         println!("Hello {}", name);
9 | |     }
  | |_____^ expected enum `std::result::Result`, found ()
  |
  = note: expected type `std::result::Result<&str, ()>`
             found type `()`
```

Running on `edition = "2018"`:
```
$ rustc --version
rustc 1.33.0-nightly (adbfec229 2018-12-17)
```

Opinions?
Hello!
After talking about thunder with @spacekookie, she told me about a effort to rewrite thunder to have a better usability and code.

Thinking about that, I thought about proposing a new way to write thunder apps.
So far my proposal would make a simple hello world look like this:

```rust
#![feature(use_extern_macros)]

extern crate thunder_derive;
extern crate thunder;

#[derive(ThunderApp)]
struct Thor {
    /// Bla bla bl
    #[thunder(take_value = false)] // Default is to take value
    drunk: bool,

    /// What will be Thor's age today
    #[thunder(default_value = 1342)] // Can configure flag default value
    age: i32
}

#[thunderclap]
impl Thor {
    /// This is a subcommand, as before
    fn hello(&self, name: Option<&str>) {
        println!("Hello, {}! Nice to meet you, I'm Thor and I'm {} years old", name.unwrap_or("world"), self.age);
    }

    fn me(&self) {
        let drunk = if self.drunk {
            "drunk!"
        } else {
            "not drunk!"
        };

        println!("Huh, me? I'm Thor! And I'm {}");
    }
}

fn main() {
    Thor::start();
}

```

This is strongly inspired by structopt.
The main idea is to have global args parsing work like normal args do in structopt, and subcommands work as they work right now. Thus being more flexible, while still being fast to iterate.

I couldn't think about how to make subcommand arguments as flexible, but it's on my list of things to improve too
For example, it's not clear how to run app with more than one parameter:

```rust
/// App
#[thunderclap]
impl App {
    /// run
    fn run<'a, 'b>(token: &'a str, listening_address: &'b str) {
        println!("Hello {}, my address is {}", token, listening_address);
    }
}
```

```
error[E0599]: no function or associated item named `run` found for type `clap::App<'_, '_>` in the current scope
  --> src\main.rs:28:1
   |
28 | #[thunderclap]
   | ^^^^^^^^^^^^^^ function or associated item not found in `clap::App<'_, '_>`

error: aborting due to previous error
```
When i didn't provide a valid boolean, i got a not so nice error message:

```
thor bla aged
thread 'main' panicked at 'Failed to parse value. Double check!: ParseBoolError { _priv: () }', libcore/result.rs:945:5
note: Run with `RUST_BACKTRACE=1` for a backtrace.
```
Would it be possible to instead print something like:
`Error: <drunk> needs to be "true" or "false"`
or something similar?

> `#[thunderclap(drunk: bool: "Thor drinks a lot", hammers: Option<u8>: "This isn't a joke about being drunk")]`
>
> hmmmm
>
> `#[thunderclap(drunk: bool = "Thor drinks a lot", hammers: Option<u8> = "This isn't a joke about being drunk")]` [makes me more happy]
It could enable more features and make the code base easier to work with and contribute to
:sob: 
Actual functionality tbd