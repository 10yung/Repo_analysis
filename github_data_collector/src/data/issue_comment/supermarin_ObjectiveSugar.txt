Sometimes not only need to map out an array, but also need to conditional mapping. Reference to NSArray's block traversal method `- (void) enumerateObjectsUsingBlock: (void (NS_NOESCAPE ^) (ObjectType obj, NSUInteger idx, BOOL * stop)) block`.

Add a skip option for the mapping methodï¼š
```
- (NSArray *) mm_mapWithskip:(id (^)(id obj, BOOL *skip))callback{
    
    NSMutableArray * _self = [NSMutableArray arrayWithCapacity:self.count];
    
    for( id obj in self ){
        
        BOOL skip = NO;
        
        id mapObj = callback(obj, &skip);
        
        if( !skip ){
            [_self addObject:mapObj];
        }
    }
    return [_self copy];
}
```

[Refer to this answer](https://stackoverflow.com/questions/12357904/what-is-the-bool-stop-argument-for-enumerateobjectsusingblock-used-for)
When initial value is set to ```nil``` and the array consists of single item, this item is returned and reduce block is never evaluated.

There seems to be an issue at https://github.com/supermarin/ObjectiveSugar/blob/master/Classes/NSArray%2BObjectiveSugar.m#L178

I would rather write it as
```
accumulator = block(accumulator, object);
```

Does this make sense?
Usage: 
`NSLog(@"%@", YES_OR_NO(myBool));`

Compatibility with Carthage would be nice :)


Also updated the version so it can be released as a new pod version. I can of course undo that or change the version or whatever.

This pull request adds generics to all Array/Set/Dictionary methods and nullability modifiers in a backward compatible way.

containsString was added in iOS8 and this may collide with the
native implementation.

It seems that when adding the project in a Podfile it does not get updated (getting 1.1.0 version).
Please check.

Cocoapods started causing me problems so I'm trying out Carthage. To make projects work with Carthage you don't have a podspec, you just create an Xcode project with a shared scheme that builds a dynamic framework (iOS 8 only).

You might want to move some of the files around, but you need to make sure xcodebuild will still build it. I'm not sure but we might need another scheme to build the version for Mac..
