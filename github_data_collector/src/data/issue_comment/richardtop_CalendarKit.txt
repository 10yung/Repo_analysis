Currently the public API has too many `public` or `open` methods which makes it difficult to understand the surface of the API and what should be commonly used.

Making most of those methods `internal` or `private`  would reduce the surface of the API, so that the library would be easier to use.

Since some people may need a specific API, they should submit an issue to make the access modifiers less restrictive for their task.

Focal points:
1. DayViewController
2. DayView

Add docs.
<!-- Thanks for helping _CalendarKit_! Before you submit your issue, please make sure to check the following boxes by putting an x in the [ ] (don't: [x ], [ x], do: [x]) -->

### New Issue Checklist

- [x] Use the latest version of CalendarKit
- [x] I've read the [Contribution Guidelines](https://github.com/richardtop/CalendarKit/blob/master/CONTRIBUTING.md)
- [x] I've searched for [existing GitHub issues](https://github.com/richardtop/CalendarKit/issues)

### Issue Description
Hi! I propose to add a day of the week picker date picker.

##### Code I'm using with CalendarKit
<!-- Please, add all the relevant code you're using to interact with CalendarKit.
For each code snippet use separate fenced code blocks.
Read more about syntax highlighting at https://help.github.com/articles/creating-and-highlighting-code-blocks/ -->

```Swift

[INSERT CODE HERE]

```

#### Result I am trying to achieve
<!-- If you have a UI Mockup of what you're trying to achieve, please, paste it here (Optional) -->
[INSERT API OR UI MOCKUPS HERE]

<!-- Thanks for helping _CalendarKit_! Before you submit your issue, please make sure to check the following boxes by putting an x in the [ ] (don't: [x ], [ x], do: [x]) -->

### New Issue Checklist

- [x] Use the latest version of CalendarKit
- [x] I've read the [Contribution Guidelines](https://github.com/richardtop/CalendarKit/blob/master/CONTRIBUTING.md)
- [x] I've searched for [existing GitHub issues](https://github.com/richardtop/CalendarKit/issues)

### Issue Description

Hi! Propose a to remove button, "dark", and change themes on dark and back to do automatic in dependence from themes chosen by on phone.


   override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        super.traitCollectionDidChange(previousTraitCollection)
              
       changeStyle()
    }
    
    private func changeStyle() {
        var style: CalendarStyle!
        
        if traitCollection.userInterfaceStyle == .light || traitCollection.userInterfaceStyle == .unspecified {
            style = StyleGenerator.defaultStyle()
        } else if traitCollection.userInterfaceStyle == .dark {
            style = StyleGenerator.darkStyle()
        } else {
            style = StyleGenerator.defaultStyle()
        }
        
        updateStyle(style)
        
        navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor:style.header.swipeLabel.textColor]
        reloadData()
    }

=========

And also add changeStyle() to viewDidLoad()

##### Code I'm using with CalendarKit
<!-- Please, add all the relevant code you're using to interact with CalendarKit.
For each code snippet use separate fenced code blocks.
Read more about syntax highlighting at https://help.github.com/articles/creating-and-highlighting-code-blocks/ -->

```Swift

[INSERT CODE HERE]

```

#### Result I am trying to achieve
<!-- If you have a UI Mockup of what you're trying to achieve, please, paste it here (Optional) -->
[INSERT API OR UI MOCKUPS HERE]

<!-- Thanks for helping _CalendarKit_! Before you submit your issue, please make sure to check the following boxes by putting an x in the [ ] (don't: [x ], [ x], do: [x]) -->

### New Issue Checklist

- [x] Use the latest version of CalendarKit
- [x] I've read the [Contribution Guidelines](https://github.com/richardtop/CalendarKit/blob/master/CONTRIBUTING.md)
- [x] I've searched for [existing GitHub issues](https://github.com/richardtop/CalendarKit/issues)

### Issue Description
Wrong date returned using 
`self.calendarDetailsView.state?.selectedDate`
after assigning date using
`self.calendarDetailsView.state?.move(to: selectedDate)`


##### Code I'm using with CalendarKit
<!-- Please, add all the relevant code you're using to interact with CalendarKit.
For each code snippet use separate fenced code blocks.
Read more about syntax highlighting at https://help.github.com/articles/creating-and-highlighting-code-blocks/ -->

```Swift

func calendar(_ calendar: FSCalendar, didSelect date: Date, at monthPosition: FSCalendarMonthPosition) {
        
        //self.dateSelected = Date(year: date.year, month: date.month, day: date.day)
        
        let selectedDate = date.addingTimeInterval(TimeInterval(TimeZone.current.secondsFromGMT(for: date)))
        NSLog("1. Selected Date: \(selectedDate)")
        self.fromCalendar = true
        self.calendarDetailsView.state?.move(to: selectedDate)
        NSLog("Calendar Date: \(self.calendarDetailsView.state?.selectedDate)")
        
    }

func eventsForDate(_ date: Date) -> [EventDescriptor] {
        
        let selectedDate =  date.addingTimeInterval(TimeInterval(-TimeZone.current.secondsFromGMT(for: date)))
        NSLog("Date: \(date)")
        NSLog("Date String: \(date.format(with: "yyyy-MM-dd"))")
        NSLog("2. Selected Date: \(selectedDate)")
        NSLog("3. Selected Date: \(selectedDate.getShortDateString())")
        
        let dateString = date.getShortDateString()
        var events = [Event]()
        
        for i in 0...47 {
            
            let event = Event()
            let timeString = dateString + CommonString.COMMON_WHITE_SPACE + schedule[i]
            let eventDate = Date(dateString: timeString, format: "yyyy-MM-dd HH:mm", timeZone: TimeZone(abbreviation: "EST")!)
            //NSLog("Event Date: \(eventDate.toLocalTime())")
            let duration = 20
            let datePeriod = TimePeriod(beginning: eventDate,
                                        chunk: TimeChunk.dateComponents(minutes: duration))
            
            event.startDate = datePeriod.beginning!
            event.endDate = datePeriod.end!
            
            var info = data[Int(arc4random_uniform(UInt32(data.count)))]
            let timezone = TimeZone.current
            info.append(datePeriod.beginning!.format(with: "YYYY-MM-dd", timeZone: timezone))
            info.append("\(datePeriod.beginning!.format(with: "HH:mm", timeZone: timezone)) - \(datePeriod.end!.format(with: "HH:mm", timeZone: timezone))")
            event.text = info.reduce("", {$0 + $1 + CommonString.COMMON_WHITE_SPACE})
            //NSLog("Event: \(event.text)")
            event.isAllDay = false
            
            events.append(event)
            event.userInfo = String(i)
        }
        
        if !self.fromCalendar {
            self.calendar.select(selectedDate)
        }
        
        self.fromCalendar = false
        
        return events
    }

```
I trying to use this together with other API.
The issue is clearly at DayView (self.calendarDetailsView. is an instance of DayView)

and here are the logs

```
2019-07-31 21:48:16.473307-0400 Tello EHR[30832:2391275] 1. Selected Date: 2019-08-15 00:00:00 +0000
2019-07-31 21:48:16.480253-0400 Tello EHR[30832:2391275] Date: 2019-08-14 04:00:00 +0000
2019-07-31 21:48:16.480602-0400 Tello EHR[30832:2391275] Date String: 2019-08-14
2019-07-31 21:48:16.480709-0400 Tello EHR[30832:2391275] 2. Selected Date: 2019-08-14 08:00:00 +0000
2019-07-31 21:48:16.480947-0400 Tello EHR[30832:2391275] 3. Selected Date: 2019-08-14
2019-07-31 21:48:16.555629-0400 Tello EHR[30832:2391275] Calendar Date: Optional(2019-08-14 04:00:00 +0000)
```

As you can see, the date I tried to assign was 2019-07-19 00:00:00 +0000.  However, the DayView returned to me with the different one. (To be exact, it is one day behind what I want)

#### Result I am trying to achieve
<!-- If you have a UI Mockup of what you're trying to achieve, please, paste it here (Optional) -->
What I am trying to achieve is something like this:

```
2019-07-31 21:48:16.473307-0400 Tello EHR[30832:2391275] 1. Selected Date: 2019-08-15 00:00:00 +0000
2019-07-31 21:48:16.480253-0400 Tello EHR[30832:2391275] Date: 2019-08-15 00:00:00 +0000
2019-07-31 21:48:16.480602-0400 Tello EHR[30832:2391275] Date String: 2019-08-15
2019-07-31 21:48:16.480709-0400 Tello EHR[30832:2391275] 2. Selected Date: 2019-08-15 00:00:00 +0000
2019-07-31 21:48:16.480947-0400 Tello EHR[30832:2391275] 3. Selected Date: 2019-08-15 00:00:00 +0000
2019-07-31 21:48:16.555629-0400 Tello EHR[30832:2391275] Calendar Date: Optional(2019-08-15 00:00:00 +0000)
```
As you can see with the image bellow, I am trying to select August 15, 2019 and I am pretty sure that I passed the 2019-08-15 00:00:00 +0000 to DayView instance.  However, the DayView showed me the 2019-08-14 calendar not the 2019-08-15.

![image](https://user-images.githubusercontent.com/16866234/62259622-f5d40280-b3dc-11e9-9a9d-7ae69814313f.png)




<!-- Thanks for helping _CalendarKit_! Before you submit your issue, please make sure to check the following boxes by putting an x in the [ ] (don't: [x ], [ x], do: [x]) -->

### New Issue Checklist

- [x] Use the latest version of CalendarKit
- [x] I've read the [Contribution Guidelines](https://github.com/richardtop/CalendarKit/blob/master/CONTRIBUTING.md)
- [x] I've searched for [existing GitHub issues](https://github.com/richardtop/CalendarKit/issues)

### Issue Description

When I call dayView.state?.move(to: ) the subsequent timeline view resets to 12:00 am. I'd like for the position of the scroll view not to change, just as in the provided example. I am calling from within a delegate function of another library for a calendar cell selection. The scrollTo(hour24: ) and scrollToFirstEventIfNeeded() functions will work but only after the reset to 12:00 am. 

I'm using just a DayView rather than a DayViewController. I've removed the extraneous code (I think...).

Thanks.


##### Code I'm using with CalendarKit
<!-- Please, add all the relevant code you're using to interact with CalendarKit.
For each code snippet use separate fenced code blocks.
Read more about syntax highlighting at https://help.github.com/articles/creating-and-highlighting-code-blocks/ -->

```Swift
    @IBOutlet weak var dayView: DayView!

    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.dayView.isHeaderViewVisible = false
        
        self.dayView.dataSource = self
        self.dayView.delegate = self
        self.dayView.reloadData()
        
    }

    override func viewDidAppear(_ animated: Bool) {
       
       self.dayView.scrollToFirstEventIfNeeded() //This scroll func works great
        
    }

    func calendar(didSelectDate date: Date) {
        
        self.dayView.state?.move(to: date)
        
    }

```

#### Result I am trying to achieve
<!-- If you have a UI Mockup of what you're trying to achieve, please, paste it here (Optional) -->

See behavior in the iOS example.
Related #10
<!-- Thanks for helping _CalendarKit_! Before you submit your issue, please make sure to check the following boxes by putting an x in the [ ] (don't: [x ], [ x], do: [x]) -->

### New Issue Checklist

- [x] Use the latest version of CalendarKit
- [x] I've read the [Contribution Guidelines](https://github.com/richardtop/CalendarKit/blob/master/CONTRIBUTING.md)
- [x] I've searched for [existing GitHub issues](https://github.com/richardtop/CalendarKit/issues)

### Issue Description
I want to call move(to:) in viewDidLoad so I can load the DayViewController on a certian date, but if I do this, it causes some odd behavior. 

When I swipe right or left on the calendarkit view after calling move(to:) in viewDidLoad, the calendar jumps forward/backward two days instead of one. For example, swiping backwards would move me to November 15th if the date i jump to is November 17th. 

I tried putting the method in viewDidAppear, but if I do that, the calendar loads and then awkwardly jumps to the specified date. I'd like it to open to the specified date and not skip days when swiping back and forth. 

##### Code I'm using with CalendarKit
<!-- Please, add all the relevant code you're using to interact with CalendarKit.
For each code snippet use separate fenced code blocks.
Read more about syntax highlighting at https://help.github.com/articles/creating-and-highlighting-code-blocks/ -->

```Swift

override func viewDidLoad() {
  super.viewDidLoad()
  self.dayView.state?.move(to: selectedDate)
  dayView.autoScrollToFirstEvent = true
  reloadData()
}

```

#### Result I am trying to achieve
<!-- If you have a UI Mockup of what you're trying to achieve, please, paste it here (Optional) -->

I would like to be able to load the calendar to a certain date, and have it work normally from there. 

Hey, is there any way to get to get the frame coordinates:**(x position, y position, height, width)** from an event that i created on the timelineView.

#### Result I am trying to achieve
I want to add my own custom view on top of my event in the exact position to simulate an event view, because the event view isn't that customizable. I want to add buttons and add uilabels to the custom view, as well as shadows.

### I would very greatly appreciate help with this problem, or if you could add more customization to the eventview.
<!-- Thanks for helping _CalendarKit_! Before you submit your issue, please make sure to check the following boxes by putting an x in the [ ] (don't: [x ], [ x], do: [x]) -->

### New Issue Checklist

- [x] Use the latest version of CalendarKit
- [x] I've read the [Contribution Guidelines](https://github.com/richardtop/CalendarKit/blob/master/CONTRIBUTING.md)
- [x] I've searched for [existing GitHub issues](https://github.com/richardtop/CalendarKit/issues)

### Issue Description

I'd like to start with saying that this library is awesome to work with, so thank you very much for making my life much easier.

My issue is actually more like a feature request. 
I'm solely using the day view, and I'd like to show all the things I've done throughout the day. Some things can take hours, other only a couple of minutes.
Adding events to the day view that lasts longer  than about 30 minutes shows up just fine, but any less than that and it'll be so small that it will barely show up (and won't show up at all if something only lasts a minute).

I know about the timeline verticalDiff variable, but having to change it to also be able to see events that last a minute, will make the rest of the day enormous, which isn't something I want.

Therefore my suggestion; would it be possible to "extend" the hours that have very small events in it (so perhaps increasing the verticalDiff drastically only in that timeslot), but keep the same verticalDiff for hour intervals that have longer events in them?

I've attached a screenshot of what I was thinking below.

#### Result I am trying to achieve

![calendar3](https://user-images.githubusercontent.com/5940867/45745018-2b765f80-bc00-11e8-8cae-28a2b6af8d5c.png)

