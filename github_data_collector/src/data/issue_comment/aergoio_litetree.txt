Is the multi branch work with multi thread or process ?

I mean for example branch master work on thread A, and test for thread B at same time without lock ?
As a fork, LiteTree is inevitably going to need updating as newer versions of SQLite are released (At the moment SQLite is up to 3.30, while litetree is still based on 3.27.2.) Keeping up with SQLite can be very important if one needs new features or bug fixes.

How does one perform such an update? All I see in here are heavily modified versions of sqlite3.c and sqlite3.h, not any tools for updating the source. Does one just run a 3-way-merge tool and feed it litetree's source, the unmodified version of the same SQLite release, and the new SQLite release?

It would be good to document this, so potential users of the library can feel that they're not going to be stuck on an old release of SQLite forever, or be dependent on someone else to keep it up to date for them.
I am on High Sierra. I tried to follow the given instruction to build litetree on my machine and it gave me some errors as follows:

	macoss-iMac:litetree macos$ make test
	cd test && python test.py -v
	test00_read_config (__main__.TestSQLiteBranches) ... ERROR
	test01_branches (__main__.TestSQLiteBranches) ... FAIL
	test02_branch_info (__main__.TestSQLiteBranches) ... FAIL
	test02_branch_tree (__main__.TestSQLiteBranches) ... ERROR
	test02b_sql_log (__main__.TestSQLiteBranches) ... ERROR
	test03_reading_branches_at_the_same_time (__main__.TestSQLiteBranches) ... FAIL
	test04_concurrent_access (__main__.TestSQLiteBranches) ... FAIL
	test05_single_connection_uri (__main__.TestSQLiteBranches) ... FAIL
	test06_invalid_branch_name (__main__.TestSQLiteBranches) ... ERROR
	test07_rename_branch (__main__.TestSQLiteBranches) ... FAIL
	test08_truncate_branch (__main__.TestSQLiteBranches) ... ERROR
	test09_delete_branch (__main__.TestSQLiteBranches) ... FAIL
	test10_rollback (__main__.TestSQLiteBranches) ... ERROR
	test11_attached_dbs (__main__.TestSQLiteBranches) ... FAIL
	test12_temporary_db (__main__.TestSQLiteBranches) ... FAIL
	test13_discard_commits (__main__.TestSQLiteBranches) ... FAIL
	test14_forward_merge (__main__.TestSQLiteBranches) ... FAIL
	test15_forward_merge (__main__.TestSQLiteBranches) ... FAIL
	test18_savepoints (__main__.TestSQLiteBranches) ... ERROR
	test19_closed_connection (__main__.TestSQLiteBranches) ... ERROR
	test20_open_while_writing (__main__.TestSQLiteBranches) ... ERROR
	test21_internal_temporary_dbs (__main__.TestSQLiteBranches) ... ERROR
	test22_normal_sqlite (__main__.TestSQLiteBranches) ... ok

Anything I can trace from the log? where are they located?

**EDIT:** I fixed the formatting, it did not go well with the code tag
When my `.db` file reaches 512 MB, every update/insert query creates an `SQL logic error`. 
Is there any command line interface to interact with litetree database?
does it support merge branch?
I have compiled the latest litetree on macOS 10.10.5, and I cannot get the branch commands to work. From the output, the new commands are available, but for some reason just not working:

```
sqlite> PRAGMA new_branch=test at master.2;
Error: SQL logic error
sqlite> PRAGMA new_branch=test at master.1;
Error: SQL logic error
sqlite> PRAGMA new_branch=test at master;
Error: SQL logic error
sqlite> PRAGMA new_branch=test;
Error: SQL logic error
sqlite> PRAGMA new_branch;
Error: argument required
sqlite> PRAGMA branch;
sqlite> PRAGMA branches;
```


Since aergo blockchain kernel is written in go, is there a golang wrapper for litetree?