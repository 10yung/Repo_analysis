This implementation uses the new helper method of `Bitmap` called `find_up_to_n_unset`. This
method, looks for the biggest continuous bits unset in the bitmap and returns the start of
the region back to the caller.

I implemented this the simplest way possible and it seems to work. It is more of a proposal than anything else as it is the result of me messing around with the ext2 filesystem. The main idea is that when we want to allocate a big chunk of blocks, it is better to allocate the blocks as close to each other as possible. So, the new allocation method finds the biggest fit possible and then repeats the process in case the actual block count could not be found in a continuous region. Finally, the method still respects the `preferred_group_index` as it tries to allocate the blocks there first and then proceeds to other groups when no more blocks are available.
This super WIP MR adds ld-elf.so


First of all, Thanks for your selfless help. 

This the issue I've encountered.

![Screenshot from 2020-01-17 09-52-04](https://user-images.githubusercontent.com/50317297/72577877-2ec24e00-390f-11ea-8a1d-5fd8015962ce.png)

I have to mention that after I run BuildIt.sh in Toolchain directory, I got this:
![Screenshot from 2020-01-17 10-00-35](https://user-images.githubusercontent.com/50317297/72578216-64b40200-3910-11ea-90dc-4477325e2470.png)

I'm using ubuntu 18.04.2 LTS.
![Screenshot from 2020-01-17 09-56-29](https://user-images.githubusercontent.com/50317297/72578017-c1fb8380-390f-11ea-9812-b63bfd98bb01.png)

Thanks!
Popup mechanism needs to be improved.

For example, in the filemanager, when deleting a file or directory the popup modal does not prevent the filemanager from beeing used with the keyboard. It should lock what's behind and navigating with the keyboard arrows, for example, should change the confirmation popup focus instead.
...at some point, probably during the introduction of theming.
1. Boot into a fresh virtual image (`ubuntu-mate-19.10-desktop-amd64` for example)

2. Prepare environment:
```
$ sudo apt install git vim
$ git clone https://github.com/SerenityOS/serenity.git --depth=1
```

3. Following `serenity/BuildInstructions.md`:
```
$ sudo apt install build-essential curl libmpfr-dev libmpc-dev libgmp-dev e2fsprogs qemu-system-i386 qemu-utils
```

4. Try to build toolchain:
```
$ cd serenity/Toolchain
$ ./BuildIt.sh
/home/ubuntu-mate/serenity/Toolchain
PREFIX is /home/ubuntu-mate/serenity/Toolchain/Local
SYSROOT is /home/ubuntu-mate/serenity/Toolchain/../Root
~/serenity/Toolchain/Tarballs ~/serenity/Toolchain
bu md5='1a6b16bcc926e312633fcc3fae14ba0a'
Skipped downloading binutils
gc md5='e03739b042a14376d727ddcfd05a9bc3'
Skipped downloading gcc
Skipped extracting binutils
Skipped extracting gcc
~/serenity/Toolchain
~/serenity/Toolchain/Build ~/serenity/Toolchain
~/serenity/Toolchain/Build/binutils ~/serenity/Toolchain/Build ~/serenity/Toolchain
checking build system type... x86_64-pc-linux-gnu
checking host system type... x86_64-pc-linux-gnu
checking target system type... Invalid configuration `i686-pc-serenity': system `serenity' not recognized
configure: error: /bin/bash /home/ubuntu-mate/serenity/Toolchain/Tarballs/binutils-2.33.1/config.sub i686-pc-serenity failed
```
This patch adds the methodology from ports to the toolchain.
It's much easier and convenient to build the toolchain apps by
using the ./packages.sh script in each package subfolder.

For convenience, ./build-essential.sh and ./build-optional.sh
can be used to build the entire toolchain parts.
A few changes to LibC that allows the `useradd` Userspace utility to run. This makes it a lot easier to append to `/etc/passwd` without manually editing it (as well as having to know the format for the entries)
TextEditor only needs to open files that the user selects in a `GFilePicker` or drags-n-drops onto its window (disregarding fonts and icons â€” they could be explicitly made accessible by e.g. bind-mounting them into a chroot).

Wouldn't it be cool if an app could ask the the system (SystemDialog?) to run `GFilePicker` for it and send back an opened file?
I'm trying to get Serenity to boot on a physical machine. I have now managed to copy the files from the usb drive to an hdd partition and to start booting serenity with an existing grub1 on that machine. 

I'm doing it this way because it seems the machine isn't able to boot from usb drives at all. Now the boot stops at init_stage2 because I have the serentity files on the 6th partition of the drive and apparently serenity allows only for 4 partitions.

This is the exact message I'm getting:
`init_stage2: invalid partition number 6; expected 1 to 4`

Details to my setup:
On the machine there's a Linux installation with following partitions:
```
/dev/sda1 /boot ext2
/dev/sda3 / ext3
/dev/sda2 swap
/dev/sda5 /usr ext3
```
I've put the Serenity files from the USB drive on sda6 and copied Serenity's `/boot/kernel` to sda1 (as `kernel-serenity`) and added to the grub1 menu.lst of sda1:
```
title SerenityOS
root (hd0,0)
kernel /boot/kernel-serenity root=/dev/hda6
```