Based on #423

I started migrating the audio and core crates to futures 0.3, tokio 0.2, hyper 0.13 ... There is still quite a lot left to do. I think the remaining crates could then first use futures compat and then be migrated one by one. 
Migrated to rust 2018 edition using `cargo fix` and removed `extern crate` as this is redundant in Rust 2018. For more details about the transition [here](https://doc.rust-lang.org/edition-guide/editions/transitioning-an-existing-project-to-a-new-edition.html).
Added subprocess audio backend.
Simple test with ```ffmpeg``` installed:
```
cargo run -- -n "Librespot Speaker" -b 160 --backend subprocess --device "ffplay -i -  -f s16le -ac 2 -nodisp"
```

Also ```Sink``` is stopping and starting again after every track. Is there a way to prevent this behaviour?
There is sometimes a problem that is really hard to fix. Basically how to reproduce it is like follows:

(use two Spotify accounts).
* Connect and play a song from account 1.
* Play song locally on account 2 device.
* Try connecting(taking over) Librespot connect
* This is when Librespot will crash and not recover by itself

At this point, the only way to recover is by stopping Librespot and the Spotify client on your device. Once both stopped you need to first open your Spotify client and afterwards start Librespot, then you will be able to connect to Librespot connect.

Here the logs:
```
[30506]: [2019-12-28T22:50:56Z INFO  librespot] librespot (raspotify v0.13.1-1-ga7274ae) b634117 (2019-12-17). Built on 2019-12-27. Build ID: lqPey9SF
[30506]: [2019-12-28T22:51:00Z INFO  librespot_core::session] Connecting to AP "gew1-accesspoint-a-fn6q.ap.spotify.com:4070"
[30506]: [2019-12-28T22:51:00Z INFO  librespot_core::session] Authenticated as "pyl3v4faqqytciloorhidn4px" !
[30506]: [2019-12-28T22:51:00Z INFO  librespot_playback::audio_backend::alsa] Using alsa sink
[30506]: [2019-12-28T22:51:00Z INFO  librespot_core::session] Country: "DE"
[30506]: [2019-12-28T22:51:01Z INFO  librespot_playback::player] Loading <I Dream Of You> with Spotify URI <spotify:track:2hk0vxMqUzHmediqECGXlh>
[30506]: [2019-12-28T22:51:01Z INFO  librespot_playback::player] <I Dream Of You> loaded
[30506]: thread 'main' panicked at 'channel closed', src/libcore/option.rs:1185:5
[30506]: stack backtrace:
[30506]:    0:   0x965628 - backtrace::backtrace::libunwind::trace::h65597d255cb1398b
[30506]:                        at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88
[30506]:    1:   0x965628 - backtrace::backtrace::trace_unsynchronized::h85fd8d34e214d876
[30506]:                        at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66
[30506]:    2:   0x965628 - std::sys_common::backtrace::_print_fmt::he35a37f9b8e4b952
[30506]:                        at src/libstd/sys_common/backtrace.rs:77
[30506]:    3:   0x965628 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::he0e762d8ed66f8bc
[30506]:                        at src/libstd/sys_common/backtrace.rs:61
[30506]:    4:   0x988290 - core::fmt::write::h1f444f4312eb6c27
[30506]:                        at src/libcore/fmt/mod.rs:1028
[30506]:    5:   0x960298 - std::io::Write::write_fmt::hfae316bf0dea24b4
[30506]:                        at src/libstd/io/mod.rs:1412
[30506]:    6:   0x967bd8 - std::sys_common::backtrace::_print::ha081546d159043e6
[30506]:                        at src/libstd/sys_common/backtrace.rs:65
[30506]:    7:   0x967bd8 - std::sys_common::backtrace::print::h5ae28d5a72f95be5
[30506]:                        at src/libstd/sys_common/backtrace.rs:50
[30506]:    8:   0x967bd8 - std::panicking::default_hook::{{closure}}::h00506bfaacab8ec5
[30506]:                        at src/libstd/panicking.rs:188
[30506]:    9:   0x967838 - std::panicking::default_hook::h55fa199021de9a28
[30506]:                        at src/libstd/panicking.rs:205
[30506]:   10:   0x9682d4 - std::panicking::rust_panic_with_hook::h61149c5bf815a5b0
[30506]:                        at src/libstd/panicking.rs:464
[30506]:   11:   0x967ed8 - std::panicking::continue_panic_fmt::h8c2cbca8aac85ef4
[30506]:                        at src/libstd/panicking.rs:373
[30506]:   12:   0x967dd0 - rust_begin_unwind
[30506]:                        at src/libstd/panicking.rs:302
[30506]:   13:   0x984050 - core::panicking::panic_fmt::hdeb7979ab6591473
[30506]:                        at src/libcore/panicking.rs:139
[30506]:   14:   0x9840b8 - core::option::expect_failed::h6c3ec3658ee2670d
[30506]:                        at src/libcore/option.rs:1185
[30506]:   15:   0x60974c - librespot_core::channel::Channel::recv_packet::he77700390f5949c6
[30506]:   16:   0x609948 - <librespot_core::channel::Channel as futures::stream::Stream>::poll::h186ea39dab8a047d
[30506]:   17:   0x60a0b0 - <librespot_core::channel::ChannelData as futures::stream::Stream>::poll::h8634377478141f72
[30506]:   18:   0x5942d4 - <librespot_audio::fetch::AudioFileFetchDataReceiver as futures::future::Future>::poll::h2641010589e6c99f
[30506]:   19:   0x8ed254 - futures::task_impl::std::set::h63cf6496d0f0b529
[30506]:   20:   0x8e3aa4 - tokio_current_thread::CurrentRunner::set_spawn::h61a5b2343957ad1c
[30506]:   21:   0x8f5c60 - tokio_current_thread::scheduler::Scheduler<U>::tick::hc123f3341884045a
[30506]:   22:   0x8e3c20 - tokio_current_thread::Entered<P>::turn::hc37f2a4df2f72285
[30506]:   23:   0x8e8a80 - scoped_tls::ScopedKey<T>::set::h2e298a643239aee5
[30506]:   24:   0x8f4f54 - std::thread::local::LocalKey<T>::with::hc192f4e7c2710385
[30506]:   25:   0x8f548c - std::thread::local::LocalKey<T>::with::hd2335362d7a3ac57
[30506]:   26:   0x8f4b9c - std::thread::local::LocalKey<T>::with::h517e890b536e3b0d
[30506]:   27:   0x8f2468 - tokio_core::reactor::Core::poll::h1e5023ce8107152a
[30506]:   28:   0x4af6f8 - tokio_core::reactor::Core::run::h5bf2ec6a73920ff8
[30506]:   29:   0x4bb978 - librespot::main::h0e1eea195edfb866
[30506]:   30:   0x490a7c - std::rt::lang_start::{{closure}}::he248ace8ff883d90
[30506]:   31:   0x967d48 - std::rt::lang_start_internal::{{closure}}::h573944590855ff7b
[30506]:                        at src/libstd/rt.rs:48
[30506]:   32:   0x967d48 - std::panicking::try::do_call::hf1a1bb85fb9db97b
[30506]:                        at src/libstd/panicking.rs:287
[30506]:   33:   0x96f440 - __rust_maybe_catch_panic
[30506]:                        at src/libpanic_unwind/lib.rs:78
[30506]:   34:   0x968760 - std::panicking::try::h75da29acad739f50
[30506]:                        at src/libstd/panicking.rs:265
[30506]:   35:   0x968760 - std::panic::catch_unwind::haf0421e667687a32
[30506]:                        at src/libstd/panic.rs:396
[30506]:   36:   0x968760 - std::rt::lang_start_internal::h382bfca60988e23d
[30506]:                        at src/libstd/rt.rs:47
[30506]:   37:   0x4bc8cc - main
[30506]:   38: 0x76ccb718 - __libc_start_main
[1]: raspotify.service: Main process exited, code=exited, status=101/n/a
[1]: raspotify.service: Failed with result 'exit-code'.
[1]: raspotify.service: Service RestartSec=10s expired, scheduling restart.
[1]: raspotify.service: Scheduled restart job, restart counter is at 1.
[1]: Stopped Raspotify.
[1]: Starting Raspotify...
[1]: Started Raspotify.
[30530]: [2019-12-28T22:51:19Z INFO  librespot] librespot (raspotify v0.13.1-1-ga7274ae) b634117 (2019-12-17). Built on 2019-12-27. Build ID: lqPey9SF
```
Hi guys,

I've read over issue #261, and from what I understand, the 'premium account' restriction is in librespot to comply with Spotify's TOS. 

Is it technically possible to stream songs on a free account using the same approach as librespot, or is this a server side limitation by Spotify? I ask because I'd like to use librespot as a base to make a custom player for an embedded device that supports free accounts. Ideally, I'd be able to integrate ad breaks, skip limits, and everything else needed to comply with Spotify free. I just want to know if librespot is a good starting point for me, or if whatever APIs it utilizes are limited by Spotify to only premium accounts.
Hello, 
I was wondering if there was a way to start the client/player as an "active" device (according to [this api](https://developer.spotify.com/documentation/web-api/reference/player/get-a-users-available-devices/)), directly from the runtime options, because I haven't found any programmatical way (the only other way is to run librespot, then use the officiel client/online client to make a music play from this device, using Spotify Connect).
If this option isn't available I'd be glad if it could be added :)
As I read `dev/core/src/cache.rs` it seems the `cache_path` is filled with audio files and read from, but never expired, so eventually the disk will run full.
I can manually expire old cache entries that have not been used in a time, e.g. with a daily cronjob running `find $CACHE_DIR -type f -atime +30 -delete`, but maybe you consider pruning the cache in scope?
Hello;

I am encountring this error, while trying to build librespot.
![Screenshot of the error when compiling librespot-core](https://user-images.githubusercontent.com/31004043/70852032-de357c00-1e9c-11ea-9806-f55d12f13533.png)


Same output for `cargo build` and `cargo build --release`:
```bash
....
/* successfully compiled crates */
....

   Compiling librespot-core v0.1.0 (/home/fariss/librespot/core)
   Compiling tokio-core v0.1.17
   Compiling rodio v0.9.0
   Compiling tokio-proto v0.1.1
   Compiling libmdns v0.2.4
   Compiling hyper v0.11.27
   Compiling hyper-proxy v0.4.1
error[E0658]: use of unstable library feature 'duration_as_u128' (see issue #50202)
  --> core/src/channel.rs:69:64
   |
69 |                 if (current_time - download_measurement_start).as_millis() > 1000 {
   |                                                                ^^^^^^^^^

error[E0658]: use of unstable library feature 'duration_as_u128' (see issue #50202)
  --> core/src/channel.rs:71:71
   |
71 |                         / (current_time - download_measurement_start).as_millis() as usize;
   |                                                                       ^^^^^^^^^

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0658`.
error: Could not compile `librespot-core`.

To learn more, run the command again with --verbose.

```
Hi,
since there are PlayerEvents (player.rs) for **started**, **changed** and **stopped**, would it be possible to add events for **VolUp** and **VolDown?** This way I could control the volume of my receiver by running scripts that use HDMI-CEC (https://github.com/Pulse-Eight/libcec).

Event better would be to directly integrate HDMI-CEC-support, but I assume this would consume too much time.

Thanks for your reply.

Kind regards



Hi there, 
I've tried to build librespot via the docker image for armhf with various flags.
None of the builds are working. Librespot does not connect and stops at
`2019-12-07T08:31:54Z INFO  librespot] librespot f67a38d (2019-12-03). Built on 2019-12-04. Build ID: d6Ol89kL
[2019-12-07T08:31:54Z DEBUG librespot_connect::discovery] Zeroconf server listening on 0.0.0.0:42450
`
I want to use pipe backend (for snapcast) and user/password authentication

> ./librespot -n testname -u email@mail.com -p secretpass --disable-audio-cache -v --backend "pipe" --device /tmp/snapfifo &

Also: librespot does not respond to ctrl+c at that point

Any help?
Amd64 build is connecting and works as it should. Likewise the java version of librespot - but I would prefer the native build.
