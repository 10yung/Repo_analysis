Hi,

It will be great if you allow all objects in SecureStorage and not just string so the syntax will be like this:

`SecureStorage.SetAsync(string key, object value)`


Thanks,
Jassim

Hi,

I suggest you add an extension to the CheckStatusAsync which will force to RequestAsync when permission is not Granted without having to write it in a separate line (CheckStatusAsync and later RequestAsync)

so it will be like this:

`PermissionStatus status = await Permissions.CheckStatusAsync<Permissions.LocationWhenInUse>().RequestAsync();`


Thanks,
[Jassim](https://www.angelsemirates.com)

<!-- Bug report best practices: https://github.com/xamarin/Essentials/wiki -->

### Description
When the following line is executed before Requesting Permission, it seems to return PermissionStatus.Denied for Android and PermissionStatus.Unknown for iOS.

`await Permissions.CheckStatusAsync<Permissions.LocationWhenInUse>();`

I was wondering if this is expected or can be improved please?

### Steps to Reproduce

1. Create a new Application.
2. Run the code described in description.
3. You should get inconsistent results between iOS and Android.

### Expected Behavior
In my opinion, PermissionStatus.Unknown should be returned if permission is checked before requesting it and if the user denies it on request, then PermissionStatus.Denied should be returned.
I am not sure if that's possible.

### Basic Information

- Version with issue: 1.4.0 pre 2
- Last known good version:
- IDE:
- Platform Target Frameworks: <!-- All that apply -->
  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->iOS 12.4.4
  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> Android 10
### Description of Change ###

The idea is that we have an API which takes a URL to navigate to, and an expected callback URI which defines a scheme the app should listen for a callback on.  This is useful particularly for web authentication scenarios where you launch a url to start the authentication flow and await the callback to the app, usually with a token in the callback url.

Apple has this concept with their `ASWebAuthenticationSession` and UWP has the concept with the `WebAuthenticationBroker`.

### API Changes ###

List all API changes here (or just put None), example:

Added: 
 
- `Task<AuthResult> WebAuthenticator.AuthenticateAsync(Uri url, Uri callbackUrl);`

### PR Checklist ###

- [x] Has tests (if omitted, state reason in description)
- [x] Has samples (if omitted, state reason in description)
- [x] Rebased on top of master at time of PR
- [x] Changes adhere to coding standard
- [x] Updated documentation ([see walkthrough](https://github.com/xamarin/Essentials/wiki/Documenting-your-code-with-mdoc))

### Description of Change ###

Prior to saving a value first try to remove it on tizen so that overwriting an existing value works.

Also fix GetAsync to return `null` if the key does not exist.

### Bugs Fixed ###

https://github.com/xamarin/Essentials/issues/1055
### API Changes ###

None

### Behavioral Changes ###

None

### PR Checklist ###

- [X] Has tests (if omitted, state reason in description)
- [X] Has samples (if omitted, state reason in description): No API surface change
- [X] Rebased on top of master at time of PR
- [X] Changes adhere to coding standard
- [X] Updated documentation ([see walkthrough](https://github.com/xamarin/Essentials/wiki/Documenting-your-code-with-mdoc)): No API surface change

Because of https://github.com/jfversluis/FilePicker-Plugin-for-Xamarin-and-Windows/pull/168
I had made a ton of changes to that repo and it was suggested I bring this over here.

So the plan:
Merge : Launcher, FileSystem, FilePicker into a single class called FileManager

What I am planning to add:
Folder picker (already have a mono/ios/uwp/net45 version working)

FileBase :
Make OpenStreamForRead a part of FileBase (Or the original GetStream() but I found it confusing to work with)
Add string FolderPath to FileBase
Add bool IsRemoteFile to FileBase

This would combine a few complaints, and PR's into a single one (the one for the dev/filepicker branch)

What I am planning to change:
The insanity caused from manually mapping file types to respective platforms is quite the feat.
I plan on making everything work of file extentions, UWP already does this, and IOS and android have ways to work with this:
On ios for example, is actually pretty easy after some testing I found that this works just fine:
`            //default if null
            var allowedUtis = new string[]
            {
                UTType.Content,
                UTType.Item,
                "public.data"
            };
            //example {".jpg", ".jpeg", ".png", ".tiff"}
            if (allowedTypes != null)
            {
                List<string> typeslist = new List<string>();
                foreach (var extension in allowedTypes)
                {
                    if (!string.IsNullOrEmpty(extension))
                    {
                        var fixed_Extension = extension?.TrimStart('.');
                        var UTid = UTType.CreatePreferredIdentifier(UTType.TagClassFilenameExtension, fixed_Extension, null);
                        typeslist.Add(UTid);
                    }
                }
                allowedUtis = typeslist.ToArray();
            }`

On android you can get the mimetype from extension like:
`var type = MimeTypeMap.Singleton.GetMimeTypeFromExtension(fileType);`

# Platform Compatibility
The plan is to have this working on everything supported by essentials
# Backward Compatibility
None, as classes will be merged
# Difficulty : [low/medium/high]
low, as most of this is already done, just needs to be consolidated 
## Summary
I was trying out new Permissions API introduced in version 1.4. I was wondering if it is possible to add a feature in there that could ask permissions from user to turn on location services programmatically on user's phone.

## API Changes

It could look something like this.

Request Permissions
```
Permissions.RequestAsync<Permissions.LocationServicesEnable>()
```

Check Status

```
Permissions.CheckStatusAsync<Permissions.LocationServicesEnabled>()
```

## Intended Use Case
This addition can be used for requesting permissions from user to turn the location services on. It would be ideal, in my opinion,  to use with newly introduced API changes for requesting and checking status of location permissions for application.
### PR Checklist ###

- [ ] Has tests (if omitted, state reason in description)
- [ ] Has samples (if omitted, state reason in description)
- [ ] Rebased on top of master at time of PR
- [x] Changes adhere to coding standard
- [ ] Updated documentation ([see walkthrough](https://github.com/xamarin/Essentials/wiki/Documenting-your-code-with-mdoc))

<!-- Bug report best practices: https://github.com/xamarin/Essentials/wiki -->

### Description
Calling `SecureStorage.SetAsync` with a key that already exists fails on Tizen (`[Tizen.Security.SecureRepository] Failed to save data. alias=test, error=Provided alias already exists in the database`)

### Steps to Reproduce

Create a simple Xamarin app that calls 

``` c#
    await Xamarin.Essentials.SecureStorage.SetAsync("test", "one");
    await Xamarin.Essentials.SecureStorage.SetAsync("test", "two");
```

### Expected Behavior

Calling `SetAsync` twice with the same key should overwrite the existing entry.

### Actual Behavior
On Tizen you get an exception

```
D/kanbann (26499):    at Interop.CheckNThrowException(Int32 err, String msg)
D/kanbann (26499):    at Tizen.Security.SecureRepository.DataManager.Save(String alias, Byte[] data, Policy policy)
D/kanbann (26499):    at Xamarin.Essentials.SecureStorage.PlatformSetAsync(String key, String data)
D/kanbann (26499):    at Xamarin.Essentials.SecureStorage.SetAsync(String key, String value)
D/k
```

### Basic Information

Tizen.NET 6.0.0.14995
Xamarin Essentials 1.3.1

## Summary
Some apps simply don't work when sharing items such as Reminders and Facebook. Having the ability to filter out would be ideal on iOS and it is an API that exists:

https://stackoverflow.com/questions/31792506/how-to-exclude-notes-and-reminders-apps-from-the-uiactivityviewcontroller

## API Changes

Up for discussion

## Intended Use Case
Would fix issues such as #942