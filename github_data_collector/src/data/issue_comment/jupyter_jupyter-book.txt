Most of Jupyter Book's magic comes from its HTML / CSS / JS code. Right now, there is a lot of custom code under the hood controlling the general layout, structure, etc. It might simplify things if we used a lightweight web framework for this so we don't have to do as much custom stuff.

One possibility is bootstrap, a CSS-based web framework that has been around forever. For example, the [pandas sphinx theme](https://pandas-sphinx-theme.readthedocs.io/en/latest/) uses Bootstrap 4 under the hood, and is really close to what Jupyter Book uses for its own structure. With some minimal modifications we might be able to get nice out-of-the-box behavior that would simplify the codebase and make the HTML more responsive.

Another interesting project is the tufte bootstrap project, which copies the behavior of the Tufte CSS project into Bootstrap classes:

https://dylan-k.github.io/tufte-bootstrap/


**Summary of the problem:**
Section names with non-ascii letters cannot be linked from the table of code and everything points at a problem with *turbolinks* [turbolinks project page](https://github.com/turbolinks/turbolinks).

**Full description:**
My native language is not English and I'm currently writing a non-English project. During this project I've encountered a problem that may have eluded you in your tests, and that I haven't been able to figure out.

Occasionally, I've got section names with characters that do not belong on the English alphabet. In particular, in Spanish we've got accents on vowels ( á, é, í, ó, ú and the letter ñ) and they are extremely frequent. The problem I have is that the Page Navigation on the sidebar is not working for sections that have one of these special characters in their title: when I click on the section name, the browser jumps to the top of the page, as if it wasn't recognizing the anchor.

You can see a live example [here](https://cupi2-ip.github.io/IPBook/nivel1/seccion1-2.html), where the link to the subsection "Intérprete" is not working. Something interesting to noting is that the link in the menu points to "#Intérprete", but when I copy the link and paste  it in the browser it replaces the non-ascii characters and it becomes "#Int%C3%A9rprete".

I created a minimal page to test if non-ascii characters were valid in HTML anchors and I found out that they do! I was able to link "#Intérprete" and get the browser to jump to that part of the page. Then I pasted everything from a typical Jupyter Book <head> into my minimal example and the link stopped working. In the end I was able to find that when *turbolink* is included, non-ascii characters in the anchors stop working. These are the offending lines:

```javascript
  <!-- Include Turbolinks to make page loads fast -->
  <!-- https://github.com/turbolinks/turbolinks -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/turbolinks/5.2.0/turbolinks.js" async></script>
```
As I said, removing this library solves the problem but I have not been able to figure out:

1. why the problem is happening, 
2. what's the actual problem (I don't really understand what is wrong with the links), 
3. how to force the removal of turbolinks from my book, 
3. what could be the consequences of removing it. 

I did not found any information or any issue reported in turbolinks repository about potential problems with non-ascii characters.




While following this guide I was a bit confused about publishing on GitHub Pages. I'm providing this quick feedback in case it might help with the documentation. If I can find time I'll suggest some changes, otherwise this might be a good issue for someone looking to contribute to the community.

There were a few things that came up.

1. you need to modify the `_config.yml` file to point to your site.

 * in my case it was little more confusing because I'm not using an organization, but a project page. So my `_config.yml` has the following:
```
baseurl: "/intro-exp-phys-book" # the subpath of your site, e.g. /blog. If there is no subpath for your site, use an empty string ""
url: "https://cranmer.github.io" # the base hostname & protocol for your site, e.g. http://example.com
```

2. for my new repository, publishing from `gh-pages` branch was not an option. It was not super clear to me where the raw content for the page and the built page should live in the repository. I wanted to see an example repository. The docs point to this repository, but initially what you see is the code for jupyter-book as opposed to the source for the book itself. I then found the `gh-pages` branch, but that is now redirecting to netlify. After some hunting I found:
https://github.com/jupyter/jupyter-book/blob/master/jupyter_book/book_template/content/guide/04_publish.md
but it is still not clear to me if the book is being published directly from this or if this is just holding the code for executing `jupyter-book create demo`


 I would suggest either pointing to a vanilla gh-pages published book or briefly outlining what the target structure looks like in terms of source and built page. This is [mine](https://github.com/cranmer/intro-exp-phys-book), but I'm not sure it should be used as an exemplar. 

3. perhaps worth clarifying why the code for the book needs to be in a GitHub repository even if you are building it yourself and publishing it yourself. I suppose the reason is for binder to work. There is a corresponding `_config.yml` line to be edited.

4. Minor point, but the first page says:
*This documentation is for the master branch of Jupyter Book, which means that it might be slightly out-of-date with the latest version released on pip.* Which makes it sound like the pip version is the most up-to-date version. Later it says
*alternatively, if you'd like to install the latest version from GitHub, you can run:*
```pip install git+https://github.com/jupyter/jupyter-book```
Which may confuse newcomers as to what is the latest version. 





This is related to #83 which talks about exploring SSGs in general, this issue is specifically for thinking about using Sphinx to build books for Jupyter Book. A few thoughts:

# A quick idea for the build system

* Keep the CLI, which would create a Sphinx template with the Jupyter Book templates pre-initialized, along with several extensions that we'll standardize across books.
* Beyond that, building the book could either be just `make html` or something with more sugar in it like `jupyter-book build`.
* Use [nbsphinx](https://github.com/spatialaudio/nbsphinx) to directly support notebooks. Support nbsphinx markdown features, and then upstream improvements to nbsphinx as we need new features in Jupyter Book.

# What it'd require

At least:

* Conversion of all Liquid templates into Jinja templates
* Figure out how to map the `yaml` configuration files into something that works with sphinx's `conf.py`
* Figure out document structure issues (Jekyll uses a `yml` file define the site structure, while AFAIK Sphinx requires you to put `toctree` elements in pages that define the site structure
* Change the Jupyter Book CLI to generate the proper template for a Sphinx site instead of a Jekyll site 

# Potential benefits

The biggest benefit of Sphinx is that it already supports many of the feature's we hope to implement to improve the state around publishing etc. For example:

* Notebooks can be read directly into sphinx via nbsphinx, so we don't have an intermediate HTML representation (however, we'd need to figure out a way to include tag information in the HTML that was generated)
* Most importantly, many of the features around publishing etc *already exist* in Sphinx. For example, cross-references between notebooks / other files automatically resolve, equations work the same way, there's more support for references (though this would need to be improved), etc. Most of these are simply Sphinx extensions, and so could be removed from Jupyter Book's codebase (or factored out into Sphinx extensions themselves if they are broadly useful).
* Sphinx already supports PDF, EPUB, etc output (because rST is used under the hood and this is a semantic markup language)
* There is a healthy community of development around "notebooks for Sphinx" and as that story improves, so could Jupyter Book (and vice-versa).
* This is a bit of a reach, but using Intersphinx we could make books aware of other books, which is pretty badass
* We could piggy-back on readthedocs for hosting documentation

# Potential drawbacks

(aside from the one-time work of converting all of the templates from Liquid -> Jinja and making the necessary CLI etc changes)

* Some features may not work easily in Sphinx - e.g., I'm not sure how to get Turbolinks working in Sphinx websites, but perhaps this is just a question of getting the templating right.
* docutils is notoriously difficult to work with and debug, so we might be exposing ourselves to more developing pain (then again, we have virtually no ability to develop Jekyll since it's written in Ruby)
* Configuration in Sphinx is python-specific, and I don't think we want to require everyday users to write Python (if anything, because it will make people think Jupyter Book is python-specific when it is not). Perhaps we can keep the YAML config layer on top somehow.
* We still don't solve our long-term problems with publishing etc, but maybe Sphinx may help get us a step closer to the solution (this would similarly be true with Pandoc).
* It is still kind of a mystery to me how Sphinx builds up its internal model of the site structure from `toctree::` elements
* Maybe some performance issues around generating the HTML files?

## How to port some features to Sphinx

This is a quick section to describe how we'd need to port some features from Jekyll to Sphinx.

**Site-wide metadata**

In Jekyll, site-wide metadata is stored in the YAML file. We could keep this file, and then use it to populate `html_context` in the build. Then we'd have access to these variables as variable names. 

**Page-level metadata**

In Jekyll, we store page-level metadata as a YAML header. In Sphinx, this is done with `:key: value` pairs at the top of the page [e.g. see here](https://stackoverflow.com/questions/14774603/sphinx-add-custom-field-variable-to-be-used-in-html-template). We auto-populate the page-level YAML, so we can do the same in rST with key: value pairs

**Table of Contents**

In Jekyll, we specify a table of contents with a single YAML file. In Sphinx, TOC is inferred from the `.. toctree::` directive, generally split across many pages. I'm not sure how we'd handle this - maybe insert `toctree` lines into some intermediate files to define the book structure that way?

**Page HTML structure**
Jekyll uses Liquid templates, while Sphinx uses Jinja templates. We'd need to make this one-time conversion and use the Sphinx configuration variables etc instead of the jinja config.yaml ones. This might also be an opportunity to utilize a framework like bootstrap, which could help simplify the CSS a bit. I wonder if @jorisvandenbossche would be interested in advising or helping with that at all?

I'd be curious to hear other people's thoughts on this, particularly @mgeier, @mmcky, @akhmerov, @chrisjsewell, @willingc who I think have thought through some of these issues re: books and Sphinx before. Also @lheagy who I believe basically already has a pipeline like this for geosci.xyz. Also ping @mwouts who might also have experience w/ sphinx and documentation formats. Would love to hear thoughts on this idea if you have them :-)
I was reading the Jupyter Book documentation and found that two internal links were broken (#457).
I'm sure I won't do better, and that in my own project it's going to be the same 😄 

So I was wondering if it could be an option to test all the links at compile time... Anyone knows whether we can easily test that at least all internal links work? If such an option exists, should it be the default mode for Jupyter Book? Thanks!
This PR demonstrates changes that could be made to the `sidebar.html` liquid template to add anchoring to links in the sidebar.

I'm adding the PR to illustrate how I understood the feature suggestion in the top comment of #191.

See issue #191 itself for more detailed discussion
It would be nice to be able to write exercise cells in the notebook (using the 'exercise' or 'exercise2' notebook extensions) and be able to have the solution cells render onto the page as hidden cells (similar to the Carpentries `.challenge` and `.solution` markdown blockquotes). 

I *think* that this would be doable by: 

1. Having a custom nbconvert preprocessor that knows about the exercise metadata. 
2. Wiring that preprocessor into the nbconvert processing happening [here](https://github.com/jupyter/jupyter-book/blob/master/jupyter_book/page/page.py#L246).
3. Adding some javascript to handle this case as a special case of the `jb_cell` dive. Along the lines of [this](https://github.com/carpentries/lesson-example/blob/gh-pages/assets/js/lesson.js#L6).

Am I missing any major stumbling point? 
Hello!

I'm trying to use Jupyterbook to write scientific papers (at least drafts), and I've been making interactive plots with Bokeh (https://docs.bokeh.org/en/latest/) along with some libraries built on top of it (Holoviz, e.g. http://geoviews.org). When I include notebooks that have such plots in a book, the outputs just disappear. Any idea if this is supported, and if not, how to get started on getting the plots to display? 

Cheers,
Paul

Maybe related: #93, #179, #82

This is a small suggestion, but I've been exploring the ["popout" feature](https://jupyterbook.org/features/layout.html#Using-popouts-to-the-right-sidebar), which allows you to include extra info in the right sidebar without breaking "your narrative flow." I think it's very cool!

But, as the documentation explains, on mobile and smaller screens, the popouts become blockquotes in-line with the content. That's fine. However, the popout as blockquote comes before the content that, on a larger screen, it would be next to. When you're reading on mobile, it has the effect of including a random bit of information before the content that would help contextualize it.

For example, if you have a paragraph in your jupyter-book that introduces topic models, you might include a popout to the right of it that says "For more on topic models, see XYZ!" But on mobile, the popout "For more on topic models, see XYZ!" would come before you've ever introduced topic models.

So my suggestion would be to change the CSS so that you have to include popouts in the cell _after_ the content that you want it to be next to. That way, on smaller screens, it would become a blockquote that follows the content.

Big screen popout 👇
![Screen Shot 2019-12-06 at 8 17 39 AM](https://user-images.githubusercontent.com/20325102/70326371-6f07ba00-1802-11ea-97b9-b904290d6c79.png)

Smaller screen blockquote 👇
![Screen Shot 2019-12-06 at 8 17 28 AM](https://user-images.githubusercontent.com/20325102/70326379-73cc6e00-1802-11ea-9594-6ba685732512.png)

I'm suggesting that this "For example" popout should perhaps follow the "Add a popout cell." It's not as necessary with this particular example, but I think it is with more narrative style content.
I noticed that there are encoding problems when you try to download PDFs of certain jupyter-book pages with Chrome. Some pages work fine, but others don't for some reason. And weirdly they all seem to work with Safari?

I'm including a few example screenshots:

<img width="1240" alt="Screen Shot 2019-12-05 at 12 28 28 PM" src="https://user-images.githubusercontent.com/20325102/70259085-7fb12500-175b-11ea-9aea-9cbdf4f55777.png">

<img width="1233" alt="Screen Shot 2019-12-05 at 12 28 54 PM" src="https://user-images.githubusercontent.com/20325102/70259104-88096000-175b-11ea-9fa5-97629fbb30da.png">

<img width="1225" alt="Screen Shot 2019-12-05 at 12 28 41 PM" src="https://user-images.githubusercontent.com/20325102/70259096-850e6f80-175b-11ea-84f6-78e9b00d1ab6.png">

