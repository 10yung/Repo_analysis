### Description

Hi! 
It seems that getDividends adjusted dividends for splits twice.
### Expected behavior

For example, function quantmod::getDividends("AAPL") return xts object, where on 2014-05-08 its value is 0.067142 = 3.29 / 49, but valid value must be 0.47 = 3.29 / 7. I think,  the function adjusts already adjusted data. 
the current tiingo `getSymbols` implementation only returns an OHLCV result. It does allow for an adjusted or un-adjusted result, but it does not expose the `divCash` or `splitFactor` columns. I'd like to expose this data so that I can use it in other processes. Specifically, i have some other data sources that only expose unadjusted prices. These sources need to be adjusted for splits (not divs), so i need access to the split factor

There are a few considerations in how to go about this:
1.  `getSymbols.yahoo` already includes an extra `.Adjusted` column, in addition to the standard OHLCV columns, so it would not be unreasonable to just add these 2 columns to the end of the existing output. This would probably be the least invasive and simplest to implement, but would also create a go forward support issue that might interfere with a more radical API redesign approach

2. Another option would be to include a .Adjusted column to make it similar to the yahoo output, and to add parameters to the `getSymbols` call to control which adjustment to include, similar to how `adjRatios` works. This would be a bit more complicated to implement, but could work across a number of sources. the biggest downside would be that it wouldn't allow use of split/divs/both in different situations

3. this brings up the larger question of the framework design as a whole and how `getSplits()`, `getDividends`, `adjRatios` should work for sources other than yahoo. I certainly don't want to break existing functionality and design patterns, but it would seems silly to me to extend the existing 3 round trip call patterns to tiingo, when the data is already coming back as part of the `getSymbols` call.

4. For reference, the alphavatange api does not expose div and split data directly, so it's not really a consideration here

any thoughts on the best way to go about this. I'm happy to do the lifting once a direction/approach is accepted
Error messages contain API keys in plain text. This is a problem for tests that are run on TravisCI, or any other CI platform where the logs are public.

Here are a couple examples:

```r
quantmod::getQuote(c("FOO", "WYSIWYG"), src = "av", api.key = v)
Error in getQuote.av(Symbols = c("FOO", "WYSIWYG"), api.key = "[redacted]") : 
  No data for symbols: FOO, WYSIWYG

quantmod::getQuote(c("FOO", "WYSIWYG"), src = "tiingo", api.key = k)
Error in getQuote.tiingo(Symbols = c("FOO", "WYSIWYG"), api.key = "redacted]") : 
  No data for symbols: FOO, WYSIWYG
```

The fix may be as easy as setting `call. = FALSE` in the call to `stop()`.
Hi guys,

Amazing project here. Just wondering if we can add support for [https://finnhub.io/](https://finnhub.io/ ) stock API ? They allow 60 calls/ minute for free with intraday data going back for years. I think this is a better alternative for alpha vantage.

They also support Websocket to receive the latest trades on the market for free. What do you guys think ?
Hello Team,

Needed the symbols list for FRED source in `getSymbols` function of quantmod. Can any one help on this?

```r
getSymbols(Symbols = "EURUSD",
           reload.Symbols = FALSE,
           verbose = FALSE,
           warnings = TRUE,
           src = "FRED",
           symbol.lookup = TRUE,
           auto.assign = FALSE,
           from = Sys.Date() - 1,
           to = Sys.Date()-1)
```

In the place of `Symbols = "EURUSD"`, what need to  be  used  for different currency rate to the USD. Please assist.

### Description


Chartseries adds (by default) a second volume chart, equivalent to "addVo ()"

The volume chart scale is represented in a friendly way (x thousand, x one hundred thousand, etc.)

When we add the Volume average to this graph, it is plotted without friendly scaling (x unit) and is outside the plot area.

### Expected behavior

he expected behavior is to represent "SMA (Vo (VALE3.SA), n = 20)" on the same scale as the variable that created the second graph, in this case "Vo ()".

### Minimal, reproducible example

```r
# incorrect behavior of function Vo() in second graph
fim <- Sys.Date()
inicio <- Sys.Date() - 730

getSymbols("VALE3.SA", from= inicio, to = fim)
chartSeries(VALE3.SA, theme = "white", TA='addEMA(n=21); addVo(); addTA(SMA(Vo(VALE3.SA), n=20), on=2)', subset = 'last 6 months')

# correct behavior, add function in second graph, but not Vo() function
chartSeries(VALE3.SA, theme = "white", TA= 'addEMA(n=21,col="red"); addOBV(); addTA(EMA(OBV(Cl(VALE3.SA), Vo(VALE3.SA)), n=10), on =2)', subset = 'last 6 months')



```

### Session Info

```r
[Insert your sessionInfo() output]
```


### Description

- update.packages("quantmod") run today
- Get Error as follows:

Error in data.frame(Strike = strike, Last = lastprice, Chg = change, Bid = bid,  : 
  object 'openinterest' not found 


### Expected behavior

Should return option chain given the time frame for specified symbol 

### Minimal, reproducible example

```r
library(quantmod)
a <- getOptionChain("SPY", "2019/2020")

### Session Info
R version 3.4.4 (2018-03-15)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS  10.14.6

Matrix products: default
BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] htmlwidgets_1.3      derivmkts_0.2.4      plumber_0.4.6        V8_2.1               stringi_1.4.3        rvest_0.3.4          xml2_1.2.0           stringr_1.4.0        magrittr_1.5        
[10] heatmaply_0.16.0     viridis_0.5.1        viridisLite_0.3.0    d3heatmap_0.6.1.2    rhandsontable_0.3.7  plotly_4.9.0         ggplot2_3.2.1        DT_0.8               lubridate_1.7.4     
[19] quantmod_0.4-15      TTR_0.23-4           xts_0.11-2           zoo_1.8-5            shinydashboard_0.7.1 shiny_1.3.2         

loaded via a namespace (and not attached):
 [1] httr_1.4.1         tidyr_0.8.3        jsonlite_1.6       foreach_1.4.7      gtools_3.8.1       assertthat_0.2.1   pillar_1.4.2       lattice_0.20-38    glue_1.3.1         digest_0.6.18     
[11] RColorBrewer_1.1-2 promises_1.0.1     colorspace_1.4-1   htmltools_0.3.6    httpuv_1.5.0       pkgconfig_2.0.2    purrr_0.3.2        xtable_1.8-4       scales_1.0.0       webshot_0.5.1     
[21] gdata_2.18.0       later_0.8.0        tibble_2.1.1       withr_2.1.2        lazyeval_0.2.2     mnormt_1.5-5       crayon_1.3.4       mime_0.6           MASS_7.3-51.3      gplots_3.0.1.1    
[31] tools_3.4.4        registry_0.5-1     data.table_1.12.0  munsell_0.5.0      cluster_2.0.7-1    compiler_3.4.4     caTools_1.17.1.2   rlang_0.3.1        grid_3.4.4         iterators_1.0.12  
[41] rstudioapi_0.10    bitops_1.0-6       base64enc_0.1-3    gtable_0.3.0       codetools_0.2-16   curl_3.3           TSP_1.1-6          R6_2.4.0           seriation_1.2-3    gridExtra_2.3     
[51] dplyr_0.8.0.1      KernSmooth_2.23-15 dendextend_1.12.0  Rcpp_1.0.1         png_0.1-7          gclus_1.3.2        tidyselect_0.2.5  
```
### Description
getSymbols.av: Invalid API call. Please retry or visit the documentation (https://www.alphavantage.co/documentation/) for TIME_SERIES_DAILY

[Describe the issue]
API calls to Alphavantage failing for unavailable symbol.
### Expected behavior
Should return details of failure
[Describe the behavior/output you expected]
Data from the api call returned with more details.
### Minimal, reproducible example

library(quantmod, quietly = T)
.stock.prices <- new.env()
options(getSymbols.warning4.0 = FALSE)
SYMBOL <- getSymbols("SYMBOL", src="av", api.key = "demo", periodicity = "daily", 
                     env = .stock.prices)
```r
[Insert sample data and code]
```

### Session Info

```r
[Insert your sessionInfo() output]
```
This is not a quantmod error. This is an AV error.

### Description

While chart_Series(symbol, name="title") works, but it is currently difficult to set the fontsize/fontcolor of that title.

### Expected behavior

chart_theme() should be modified to allow for title customization.  If the title is not part of chart_theme(), then chart_Series() should be modified.

### Minimal, reproducible example

```r
# option 1
mytheme <- chart_theme(title.size=14, title.color="#ff0000")
chart_Series(IBM, name="IBM: IBM", theme=mytheme)

# option 2
chart_Series(IBM, name="IBM: IBM", name.size=14, name.color="#ff0000")
```

The `setOldClass("xts")` and `setOldClass("zoo")` calls in quantmod cause issues if other packages need to define those classes as well.  For example, see https://github.com/edzer/spacetime/issues/35, and a [StackOverflow question](https://stackoverflow.com/q/44295792/271616) I answered a couple years ago.

I mentioned these to @jaryan and he would prefer to remove all the S4 classes from quantmod.