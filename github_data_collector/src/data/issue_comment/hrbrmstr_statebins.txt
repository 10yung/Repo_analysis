Hi there

Great package. I wondered if there was an easy way to resize different bins? I'm after resizing the bins by population size, like this:

https://brilliantmaps.com/us-territories-resized/

It seems like resizing might not be too hard, but wondered whether dodging so that there is no overlap might be a bit trickier?

Best
Alan

Right now the state abbreviations will not print if a value is `NA`:
```
library(statebins)
library(dplyr)
data(USArrests)

USArrests$state <- rownames(USArrests)
USArrests$Assault[1] <- NA

statebins(USArrests, value_col="Assault", name = "Assault", round=TRUE) +
    theme_statebins(legend_position="right")
```

Which returns this error:
```
1: In .sb_invert(gb$data[[1]]$fill, dark_label, light_label) :
  NAs introduced by coercion
```

It would be nice to still have the abbreviation printed -- possibly with a user-specified color.
Following up from Twitter; how to get rid of the white background at the edges that resists all my attempts at removing them?


    library(shinydashboard)
    library(ggplot2)

    ui <- dashboardPage(
    dashboardHeader(),
    dashboardSidebar(),
    dashboardBody(fluidPage(fluidRow(
                          plotOutput("statebins1")),
                          fluidRow(
                          plotOutput("statebins2"))
                          ))
    )

    server <- function(input, output) {
    output$statebins1 <- renderPlot({
    
    us.data <- data.frame(cbind(state.abb, state.area), stringsAsFactors = FALSE)
    us.data$state.area <- as.numeric(us.data$state.area)
    statebins::statebins(state_data = us.data, state_col = "state.abb", value_col = "state.area")
    
    })
  
    output$statebins2 <- renderPlot({
    
    statebins::statebins(state_data = us.data, state_col = "state.abb", value_col = "state.area") +
               theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = 
               element_blank(), panel.grid.minor = element_blank(), panel.grid.major = element_blank(),
               plot.background = element_rect(fill = "#ecf0f5"))
    
    })
  
    }

    shinyApp(ui, server)
Background: I'm working on a shiny app that visualises US House and Senate voting patterns (with two types of scores, so four combinations). Currently I use the `highcharter` package however I want to switch to `statebins` - it looks really neat! Highcharter also takes forever to load every time a setting is changed - I'm hoping statebins would be faster (although not yet tested).

Request: Would it be possible to show more than one variable value in a single bin (w/o using faceting)? I really like the new facet functionality, but I also don't want to display 2x2 US maps to the user on a single page. I couldn't really find a working example (which might be telling), so I am attaching some hastily done photoshop'd possibilities:

![bars](https://user-images.githubusercontent.com/24681395/33795566-e45b592e-dcdb-11e7-85b2-b2178fe66e81.png)
![number](https://user-images.githubusercontent.com/24681395/33795567-e48c2f36-dcdb-11e7-956d-a7782b29b05a.png)
![two_colurs](https://user-images.githubusercontent.com/24681395/33795568-e4bb6a44-dcdb-11e7-83e1-8df19ed4587a.png)

Not sure about the feasibility of any of these, but looking forward to your response! Cheers.

/Gokhan
I hesitate to ask this, given how quickly you responded (over the weekend!) to my request via twitter, but here goes--is it much work to allow statebins to accept a `facet_wrap` or `facet_grid` argument?
Not being in the USA, but being very interested in the way this expresses data, would it be possible (read easy) to make this more general so I could have a data frame with a column variable equivalent to whree you have the US states initials (e.g. maybe Australian suburbs, geographic regions, etc) and produce the similar coloured grid result (i am thinking of e.g. population, average wages, number living alone, etc)?

Thanks
Dan Raymond
How hard would it be to create statebins as an sp object with reasonable lat and long values? I'm thinking about modifying `geom_map()` so it can take `sp` objects as input, and switching between actual state borders and binned border would be interesting.

(That would also make it easy to generalise statebins to other shapes)
