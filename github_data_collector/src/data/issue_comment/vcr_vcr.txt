https://travis-ci.org/vcr/vcr/jobs/634140946?utm_medium=notification&utm_source=github_status is a failed build where Faraday 1.0 is in use.

<details>

```

  1) Faraday hook inserts the VCR middleware just before the adapter

     Failure/Error:

       expect(conn.builder.handlers.last(2).map(&:klass)).to eq([

         VCR::Middleware::Faraday,

         Faraday::Adapter::NetHttp

       ])

       expected: [VCR::Middleware::Faraday, Faraday::Adapter::NetHttp]

            got: [Faraday::Response::Logger, VCR::Middleware::Faraday]

       (compared using ==)

       Diff:

       @@ -1,2 +1,2 @@

       -[VCR::Middleware::Faraday, Faraday::Adapter::NetHttp]

       +[Faraday::Response::Logger, VCR::Middleware::Faraday]

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-support-3.9.2/lib/rspec/support.rb:97:in `block in <module:Support>'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-support-3.9.2/lib/rspec/support.rb:106:in `notify_failure'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-expectations-3.9.0/lib/rspec/expectations/fail_with.rb:35:in `fail_with'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-expectations-3.9.0/lib/rspec/expectations/handler.rb:38:in `handle_failure'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-expectations-3.9.0/lib/rspec/expectations/handler.rb:50:in `block in handle_matcher'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-expectations-3.9.0/lib/rspec/expectations/handler.rb:27:in `with_matcher'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-expectations-3.9.0/lib/rspec/expectations/handler.rb:48:in `handle_matcher'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-expectations-3.9.0/lib/rspec/expectations/expectation_target.rb:65:in `to'

     # ./spec/lib/vcr/library_hooks/faraday_spec.rb:13:in `block (2 levels) in <top (required)>'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/example.rb:257:in `instance_exec'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/example.rb:257:in `block in run'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/example.rb:503:in `block in with_around_and_singleton_context_hooks'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/example.rb:460:in `block in with_around_example_hooks'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/hooks.rb:472:in `block in run'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/hooks.rb:610:in `run_around_example_hooks_for'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/hooks.rb:472:in `run'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/example.rb:460:in `with_around_example_hooks'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/example.rb:503:in `with_around_and_singleton_context_hooks'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/example.rb:254:in `run'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/example_group.rb:633:in `block in run_examples'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/example_group.rb:629:in `map'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/example_group.rb:629:in `run_examples'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/example_group.rb:595:in `run'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/runner.rb:121:in `block (3 levels) in run_specs'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/runner.rb:121:in `map'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/runner.rb:121:in `block (2 levels) in run_specs'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/configuration.rb:2031:in `with_suite_hooks'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/runner.rb:116:in `block in run_specs'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/reporter.rb:74:in `report'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/runner.rb:115:in `run_specs'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/runner.rb:89:in `run'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/runner.rb:71:in `run'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/lib/rspec/core/runner.rb:45:in `invoke'

     # ./vendor/bundle/ruby/2.4.0/gems/rspec-core-3.9.1/exe/rspec:4:in `<top (required)>'

     # ./vendor/bundle/ruby/2.4.0/bin/rspec:23:in `load'

     # ./vendor/bundle/ruby/2.4.0/bin/rspec:23:in `<main>'

     # ./vendor/bundle/ruby/2.4.0/bin/ruby_executable_hooks:24:in `eval'

     # ./vendor/bundle/ruby/2.4.0/bin/ruby_executable_hooks:24:in `<main>'
```

</details>

Ruby 2.7
Gem `master`
HTTP ?
Mock ?
Rails ?
Rspec ?

This PR adds the Ruby 2.7 element to the matrix.
https://github.com/vcr/vcr/pull/774 introduced a new feature. This feature is not yet promoted in the user-facing documentation.

- Read the documentation
- Find where you'd like to learn about this specific, small feature
- Add a description and an example of the new feature


I have a tool that executes a HEAD request to a remote service, and compares the Content-Length to a previously cached copy of the Content-Length. If the Content-Length increased, then a GET request is issued for the additional bytes.

I wrote some specs to modify the local cached copy of the Content-Length to simulate certain scenarios (remote file size increased, remote file size same, remote file size decreased). As the remote file can be large, I manually edited the cassettes to reduce the body sizes. This means the Content-Length in the cassette isn't accurate.

In this case I set `update_content_length_header: true` for the cassette on the spec, as I want the GET request Content-Length header to be updated to match the manually-edited cassettes. The spec fails as the initial HEAD request would have its Content-Length set to `0` because the body is empty. This breaks my tests as the scenario expects a non-zero Content-Length from the HTTP response.

For now I can manually update the Content-Length in the cassettes for the GET requests.

Ruby 2.6.3p62  
Gem 5.0.0  
HTTP n/a  
Mock n/a  
Rails n/a  
Rspec 3.9.0  


Address the ability to drop unused requests in cassettes. 



This seemed a better way to address the needs of all vs a whole new recording method.


Fixes #746

Adds a new option `fail_on_re_record`, which **raises a runtime error when a cassette is re-recorded**.

Fixes #734

It would be very nice to have the option of replacing values of a cassete for some cases.
When setting up a test, some requests might include nested resources with sequential data (like an id). So, when choosing witch cassete to use for a given request, having a way of replacing the values with the previous created record's data would be very useful.

I see myself using this kind of like this:
```ruby
    let(:item1) { create :item }
    let(:item2) { create :item } # these must have different ids
    let(:order) { create :order, items: [ item1, item2 ] }
...
    VCR.use_cassette("synopsis") do |cassete|
      cassete.attributes[:body][:order] = order.id
      # or
      cassete.dig(:body, :order, :items, 0, :id) = item1.id
      cassete.dig(:body, :order, :items, 0, :id) = item2.id

      response = Net::HTTP.get_response(URI("mydomain/orders/#{order.id}"))
      assert_match /Example domains/, response.body
    end
...
```
First of all, thanks to all the developers and contributers of this gem. We use it very intensively :)

We do have an issue with some weird behaviour. Our configuration is this (unrelated stuff is not included):
```
RSpec.configure do |config|
  VCR.configure do |c|
    c.hook_into :webmock # or :fakeweb
    c.configure_rspec_metadata!

    c.cassette_library_dir = 'spec/fixtures/vcr_cassettes'
    c.default_cassette_options = { erb: true }
  end
end
```
Most important is the last line. With the `default_casette_options` set, we are unable to overwrite the `erb`-option in a single casette. We have tried this many ways, including the one mentioned in the documentation:
```
it "deletes someting" do
  VCR.use_cassette('<some casette, thouroughly checked that we are modifying the right one', :erb => { uid: 1234 } ) do
  <snip>
  end
end
```
In the casette we call the variable with `<%= uid %>`. This crashes:
```
The ERB in the <snip> cassette file references undefined variable uid.  Pass it to the cassette using :erb => {:uid=>"some value"}.
```

Now for the interesting part of this issue: When not setting a default value in the configuration (commenting out `c.default_cassette_options = { erb: true }`), the exact same config of ERB works!

In the [documentation](https://relishapp.com/vcr/vcr/v/5-0-0/docs/configuration/default-cassette-options), it is mentioned that the default values should be overridable, but it seems not the case for us.

Do you have any idea about what is going on here? Many thanks in advance.

Ruby 2.6.3
Gem 5.0.0
HTTP ?
Mock: Webmock 3.6.0
Rails 5.2.3
Rspec 3.8.0

The `single_cassette` option makes every test case below the context/describe with this option use the description of this block as cassette name. It has the same behaviour as using cassette_name option in the context/describe, but automatically generating the name.

Fixes #700
#712 #304 #17 #694 #525

AKA "Relish is dead, what now?"

Apparently they have a new site called https://cucumber.io/jam.