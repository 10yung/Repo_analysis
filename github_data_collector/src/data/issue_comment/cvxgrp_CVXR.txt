I am currently using CVXR to develop Lasso results. I am using the “SCS” solver and see that it goes through 5000 iterations. Is it possible to see the results of each of these iterations? I am hoping to develop a plot from the results.

Thanks
Hi,
In Python I could have the constraint depend on a parameter that is supplied later on.

```
param = cp.Parameter(nonneg=True)
prob = cp.Problem(cp.Minimize(y), [x == param])
param.value = 3
prob.solve()
```

How can I achieve this in R? I tried using the Parameter class and then setting the param value by calling `value(param) <- 3`    but `solve` didn't work.
When calling `solve` with `ignore_dcp = TRUE` , the DCP check is still run. I can spot where this is happening in https://github.com/cvxgrp/CVXR/blob/master/R/problem.R, near line 473:

```
  if(!is_dcp(object)) {
    if(ignore_dcp)
      print("Problem does not follow DCP rules. Solving a convex relaxation.")
    else
      stop("Problem does not follow DCP rules.")
  }
```
I would suggest replacing with

```
  if (!ignore_dcp) {
    if(!is_dcp(object)) {
      stop("Problem does not follow DCP rules.")
    }
  }
```
Hello, I am working on an optimization problem with a complex formulation and although the problem is easy to solve (<1 sec once `Rglpk::Rglpk_solve_LP` is called), the DCP check (`CVXR::is_dcp`) within `CVXR::solve` is very, very slow (minutes).

Here is a small reproducible example. Though unrelated to my optimization problem, it shows the kind of slow DCP check I am experiencing:

`library(CVXR)`
`n <- 5L; m <- 3L`
`X <- Variable(n, m)`
`y <- runif(n)`
`cumX <- cumsum_axis(X, axis = 2) # %*% diag(m)`
`cumE <- sum_entries(cumX, axis = 1) - y`
`posE <- sum_entries(pos(cumE))`
`negE <- sum_entries(neg(cumE)) # * 1`
`objective <- Minimize(posE + negE)`
`problem <- Problem(objective)`
`system.time({ result <- is_dcp(problem) })`
`##    user  system elapsed` 
`##  3.234   0.021   3.447`

If you then run the same code but uncomment the `* 1` multiplication, it runs in 

`##    user  system elapsed` 
`##  12.278   0.104  14.546`

If you then run the same code but uncomment the `%*% diag(m)`, it runs in

`##    user  system elapsed`
`##  52.452   0.646  69.411`

I hope you will be able to find the problem and speed up `is_dcp`. If not or if it looks like it will take some time to implement, would you please consider making the `ignore_dcp` option skip completely the DCP check? Or provide a separate option?

Thank you.


Trying to add the _conflicted_ package to my project; getting this error when trying to load CVXR while conflicted is loaded. Not really sure where it's coming from, but figured I'd raise it. 

```> library(CVXR, warn.conflicts = FALSE)
Registered S3 method overwritten by 'R.oo':
  method        from       
  throw.default R.methodsS3
Error: `fn` must be an R function, not a primitive function
Call `rlang::last_error()` to see a backtrace

> rlang::last_error()
<error>
message: `fn` must be an R function, not a primitive function
class:   `rlang_error`
backtrace:
 1. conflicted:::library(CVXR, warn.conflicts = FALSE)
 2. conflicted:::conflicts_register()
 3. conflicted::conflict_scout(pkgs)
 4. conflicted:::map2(names(conflicts), conflicts, superset_principle)
 5. base::mapply(.f, .x, .y, MoreArgs = list(...), SIMPLIFY = FALSE)
 7. conflicted:::is_superset(fun, non_base, base = base)
 8. rlang::fn_fmls(base_obj)
 9. rlang:::check_closure(fn)```
I tried `Variable(-5)` and was expecting an error, but did not receive one
I'm using CVXR for the first time today, to perform a minimization of a max of a set of variables.

So i set my objective function as:

```
    O_j <- Variable(20)
    objective <- Minimize(max_entries(O_j))

```
So this should minimise the maximum of the 20 O_j values, as I understand it from the CVXR documentation.

Now in defining constraints, I am having issues in defining sets of constraints. Since I have 20 variables (and 2  more sets of 20 variables, which are mu_j and sigma_j), defining 20 constraints line by line is obviously tedious, and I am sure there is some way of aggregating this, for constraints that work by the universal quantifier/for all.

for example, one constraint is:

   ` O[j] = 1-pnorm((C([j] -mu[j])/sigma[j])`
for all j=1,2,3....20 (C is a constant vector of length 20)

I can replace the generic pnorm in R with p_norm in CVXR. But how will I aggregate all 20 constraints in one line of code? I'm new to using this package so I'm a bit confused.

Additionally, can functions like sqrt be used in constraints the same way or is there an equivalent for CVXR? I have a constraint which is:

    
    `sigma[j] = sqrt(sum(P[i] * (1 - P[i]) * X[i,j] ) `
for all j = 1,2,3....20. Here, P is a constant vector of length 30. X is a variable defined as:

` X_ij<-Int(30,20)
`
Now the sum here works like the excel function SUMPRODUCT(), that is, 

`P[1] * (1-P[1]) * X[1,j] + P[2] * (1-P[2]) * X[2,j] + ... + P[30] * (1-P[30]) * X[30,j] `

I would normally do this using dplyr if I knew the values of X[ i , j ]. Will sum_entries work here?

The code works fine if I define each constraint line by line, but there must be a more efficient way to do this right? I know these doubts are pretty basic but I'm just starting to learn how to code with R/CVXR and any help would be appreciated. Thanks.
The docs page https://cvxr.rbind.io/ github stars link goes to https://github.com/bnaras/cvxr_docs/. Shouldn't it go to this repo? https://github.com/anqif/CVXR
Thanks for the really useful package! I've run across a couple of small small issues when trying to adjust the number of iterations.

1. The names of the arguments to control the number of iterations is different for SCS and ECOS (and presumably the other solvers)
    - `max_iters` for SCS and `MAXIT` for ECOS
    - There's no warning if you set the wrong argument name – it just silently uses the default. Would it be possible to check that the provided `...` arguments are control arguments the solver uses?
2. Reaching a user-set maximum iteration count leads to a solver failure in ECOS, but `solved_inaccurate` in SCS. (In contrast, hitting the _default_ ECOS iteration count gives `solved_inaccurate`)


I am solving the same problem in matlab and R but I get different results (the solutions are completely different for some variables not just a little here and there) although all the inputs are the .same for completeness here is the matlab code:

```
p=132; 
cvx_begin;
variables b(p);
minimize(norm(weight'*b, 1));
subject to;
    1<matrix*b;
    0<=b;                                   
cvx_end;
```

and the R code:

```
p=132
  b=Variable(p,name="b")
  objective <- norm1(t(weight) %*% b) 
  constrnt <-list(1 < matrix %*% b,0 <= b )
 prob <- Problem(Minimize(objective), constrnt)
results <- solve(prob)
lb_solution=results$getValue(b)
```
Any insights on why this might happen?