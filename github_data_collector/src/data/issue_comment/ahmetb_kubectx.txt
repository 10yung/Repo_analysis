Fixes #185 
It would be nice if we could select current-context to empty, so unset the current-context, as for safety reasons, that would be similar (in effects) to logging off. This way, you can prevent commands being executed agains a cluster if any of the automation you're running does accidentally try to do something.

My workflow is similar to:
- going to work on something (login), so do `kubectx my-context`
- do my work
- finished working on a cluster (logout), so do `kubectx -off` (OR SIMILAR)

Using `kubectx -d <CTX>` does delete the context, but not unsets the current-context, so still has a value to a non existing context. What I'm requesting is the opposite, retain the context, but unset the value from current-context.
I would like to have a puppet module (and will probably make one) to install `kubectx`/`kubens` to Linux systems. If someone wanted to, it wouldn't be very hard to add Windows support as well. This would be fairly simple, just fetch the zip or tar.gz from GitHub, unzip, and link as appropriate. It would be a lot easier if #140 and #17 are complete first, but for my case, we need Enterprise Linux support anyhow.

I am mostly posting this to gather interest and ideas.

~tommy
I love kubectx and kubens ! -- It saves me a ton of time, and I've been using it for a long time already.

Now there is also a new kid on the block. "Krew" https://github.com/kubernetes-sigs/krew. Krew is a plugin manager for kubectl and kubectx and kubens are excellent candidates for it.

Since kubectx and kubens work well, and are well tested I think it's worth porting them to this plugin system. 

to be commands could be: `kubectl ctx` and `kubectl ns` These commands are available still. 
This a ux bug / feature request.

Problem: When I do kubens (to see what namspace I'm on), and then press 'enter' I change namespaces to the last one in the list. This is unexpected, and confusing.

https://asciinema.org/a/b6LsK3TDlji3c7AZRXjHVePkx
Client-go, and by extension, kubectl, has the ability to run configurable commands to interactively prompt a user to authenticate. This system is known as [client-go credential plugins](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins).

Kubectl will only run credential plugins when it believes its STDOUT is an interactive TTY. Since kubens invokes `kubectl get namespaces` in a subshell, by default it causes kubectl to bypass its credential plugins.

Since kubens uses the STDOUT of `kubectl get namespaces` we also can't blindly redirect its STDOUT to that of the parent process.

The solution to allow kubens to work correctly with credential plugins is two part:

1. Check if the get namespaces command will succeed, if so, run it like normal
2. If the get namespaces command will fail, then run it again, interactively, by redirecting its inputs and outputs to those of the parent process. After the user successfully authenticates then run the get namespaces command one final time without any output redirection
Getting below error when running kubectx.  Can you help?
docker: Error parsing reference: " " is not a valid repository/tag: invalid reference format
In many environments it's common to have different roles authenticating to the same cluster. This generally results in contexts named "developer@cluster-1" or "admin@cluster-1", etc.

The current completion scripts do not properly digest the '@' sign (treating it as a separator).
Following #17, I create a dedicated issue for fedora/rpm packaging.

- [x] Initiate .spec file
- [x] Building srpm and rpm
- [x] Add completions files => Location: `/usr/share/kubectx`
- [x] Create repo for sharing packages : https://copr.fedorainfracloud.org/coprs/cerenit/kubectx/
- [x] Mirror gitlab code on github : https://github.com/nsteinmetz/kubectx-rpm

To enable repo:

```shell
(sudo) dnf copr enable cerenit/kubectx 
(sudo) dnf install kubectx
```

Work in progress is available [here](https://code.cerenit.fr/cerenit/kubectx-rpm) and soon on Github too.
When having multiple versions of kubectx installed it is currently not possible to differentiate between the versions except with looking into the code and comparing the recent changes (or checking the git tags).
As commented in https://github.com/ahmetb/kubectx/pull/124 hardcoding the values is error-prone. This issue is for discussion how to implement this in a good way :)