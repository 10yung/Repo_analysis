Bumps [mixin-deep](https://github.com/jonschlinkert/mixin-deep) from 1.3.1 to 1.3.2.
<details>
<summary>Commits</summary>

- [`754f0c2`](https://github.com/jonschlinkert/mixin-deep/commit/754f0c20e1bc13ea5a21a64fbc7d6ba5f7b359b9) 1.3.2
- [`90ee1fa`](https://github.com/jonschlinkert/mixin-deep/commit/90ee1fab375fccfd9b926df718243339b4976d50) ensure keys are valid when mixing in values
- See full diff in [compare view](https://github.com/jonschlinkert/mixin-deep/compare/1.3.1...1.3.2)
</details>
<details>
<summary>Maintainer changes</summary>

This version was pushed to npm by [doowb](https://www.npmjs.com/~doowb), a new releaser for mixin-deep since your current version.
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=mixin-deep&package-manager=npm_and_yarn&previous-version=1.3.1&new-version=1.3.2)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/leebenson/reactql/network/alerts).

</details>
"Why Hooks are the future"
https://blog.apollographql.com/apollo-client-now-with-react-hooks-676d116eeae2

Hooks have been declared as the future of Apollo client, and also reduces the bundle size (if you only use the apollo hooks API for querying.

Maybe modify codegen.yml to emit hooks like in this example from the internet:

```
 models.tsx:
    documents: "packages/files-client-state/src/**/*.gql"
    schema: 
      - ./packages/client-state/src/**/*.graphql
      - ./packages-modules/module/server/src/graphql/**/*.graphql
    config:
        namingConvention: keep
        typesPrefix: I
        withMutationFn: true
        withHOC: true
        withComponent: true
        withHooks: true
    preset: "@cdmbase/import-types-preset"
    presetConfig:
      typesPath: "core"
      importTypesNamespace: SchemaTypes
```
I clone the project and try to run it but get this message from the terminal: **"Could not find "client" in the context or passed in as an option. Wrap the root component in an <ApolloProvider>"**
```
        {
          // If we're on the server, we only want to output the name
          // loader: isClient ? "css-loader" : "css-loader/locals",
          loader: "css-loader",

          options: {
            // Calculate how many loaders follow this one
            importLoaders: loader.use.length + 1,

            // Format for 'localised' CSS modules
            localIdentName: "[name]__[local]___[hash:base64:5]",

            // Add sourcemaps if we're in dev
            sourceMap,

            // Specify modules options
            ...modules
          }
        },
```

to

```
        {
          // If we're on the server, we only want to output the name
          // loader: isClient ? "css-loader" : "css-loader/locals",
          loader: "css-loader",

          options: {
            // Calculate how many loaders follow this one
            importLoaders: loader.use.length + 1,

            // Format for 'localised' CSS modules
            modules: {
              localIdentName: "[name]__[local]___[hash:base64:5]",
            },	

            // Add sourcemaps if we're in dev
            sourceMap,

            // Specify modules options
            ...modules
          }
        },
```
**Current Issue**
Currently, you have to use the code block below in any React component that uses to wish the CSS Prop for Emotion (rather than via styled method).

Currently:
```
/** @jsx jsx */
import { jsx } from '@emotion/core'
```

See https://emotion.sh/docs/css-prop for more details.

Emotion prescribes using the "@emotion/babel-preset-css-prop" babel preset in order to avoid this. However, this does not currently work with Typescript as discussed on the following issue (or as seen by simpling trying to implement it).

https://github.com/emotion-js/emotion/issues/1046

**Proposed Changes**
The proposed changes use the solution described [here](https://github.com/emotion-js/emotion/issues/1046#issuecomment-499571634) in order to support the use of the css prop without the need for the pragma statement. This only affects the packages used and the webpack presets/plugins used slightly. All functionality is intact.

**Motivation**
I think it's important to support both Emotion methodologies (CSS Prop and Styled Components) and doing so without the boiletplate currently needed in order to use the former.


I just cloned master, and ran it on node 12.2.0.

Hot reloading doesn't give any errors

![image](https://user-images.githubusercontent.com/109630/58366729-4cccd100-7e9c-11e9-9896-d4073f139c69.png)

However the component doesn't actually re-render.

Reloading the page loads the new changes.
I'm trying to get this framework to behave but I must be missing something.

I've added some styles to the ``styles.global.scss`` file in order to create a pretty standard layout (header, footer, sidebar). 

I've decided to use the [Office Fabric React UI components](https://github.com/OfficeDev/office-ui-fabric-react).

I've then structured my ``root.tsx`` file as you can see below. But for some reason, the images and styles breaks. At first I thought it was a problem with the hot reloading but doing a production build does not help.

Is there something in the ReactQL pipeline that is "unusual" regarding to building and packaging that makes this incompatible with "standard rendering"? 

Sometimes the css "comes back"if I click on items in the ui (without navigating). Somethings it works after a reload, sometimes i need to rebuild all. But I cannot see any pattern to it.

Also the log prints out occasional errors like:
``react-dom.development.js:507 Warning: Prop `data-focuszone-id` did not match. Server: "FocusZone1296" Client: "FocusZone1"``

Which makes me believe that something is way out of sync here.
Suggestions anyone?

PS I'm very new to both this starter kit and the Office Fabric kit.

### root.tsx
```typescript
// Root entry point

// ----------------------------------------------------------------------------
// IMPORTS

/* NPM */
import * as React from "react";
import Helmet from "react-helmet";
import { hot } from "react-hot-loader/root";
import { Route, Switch } from "react-router-dom";
import { Global } from "@emotion/core";
import { Fabric, loadTheme, initializeIcons } from "office-ui-fabric-react";

/* Local */

// Components
import ScrollTop from "@/components/helpers/scrollTop";

// Global styles
import globalStyles from "@/global/styles";

// Routes
import routes from "@/data/routes";
import Header from "./components/layout/Header";
import NavBar from "./components/layout/NavBar";
import Footer from "./components/layout/Footer";

loadTheme({
    palette: {
        themePrimary: "#2196f3",
        themeLighterAlt: "#f6fbfe",
        themeLighter: "#daedfd",
        themeLight: "#badefb",
        themeTertiary: "#78bef7",
        themeSecondary: "#3ba1f4",
        themeDarkAlt: "#1f86da",
        themeDark: "#1a71b8",
        themeDarker: "#135388",
        neutralLighterAlt: "#f8f8f8",
        neutralLighter: "#f4f4f4",
        neutralLight: "#eaeaea",
        neutralQuaternaryAlt: "#dadada",
        neutralQuaternary: "#d0d0d0",
        neutralTertiaryAlt: "#c8c8c8",
        neutralTertiary: "#d0d0d0",
        neutralSecondary: "#a0a0a0",
        neutralPrimaryAlt: "#747474",
        neutralPrimary: "#616161",
        neutralDark: "#4a4a4a",
        black: "#363636",
        white: "#ffffff"
    }
});

initializeIcons(/* optional base url */);

// ----------------------------------------------------------------------------

const Root = () => (
  <div>
    <Global styles={globalStyles} />
    <Helmet>
      <title>Pixon Administration</title>
    </Helmet>
    <ScrollTop>
        <Fabric  className="App">
            <div className="header">
                <Header />
            </div>
            <div className="body">
                <div className="content">
                    <Switch>
                        {routes.map(route => (
                            <Route key={route.path} {...route} />
                        ))}
                    </Switch>
                </div>
                <div className="sidebar">
                    <NavBar />
                </div>
            </div>
            <div className="footer">
                <Footer />
            </div>
        </Fabric>
    </ScrollTop>
  </div>
);

export default hot(Root);
```

### Example: broken styles
![image](https://user-images.githubusercontent.com/2828428/56597386-a4a0bf80-65f2-11e9-950b-eca0d4c313d4.png)

Hi,

we are thinking about using your package in one of our projects and we usually really like to use sass with css-modules on every component for styling.
We tried to implement it the way, we always do, but there seems to be a problem with the serverside rendering part.

We import the styles with 
```
import * as styles from './STYLEFILE.scss
```

Then we want to access the different style Classnames like 
```
<div className={styles.ClassName} />
```

The problem now is, that we end up getting `undefined` as the className, but if we change something and use hotreload (so it rerenders on the client side only), it works and shows the className correctly.
Also console.logging the className gives the correct result.

Here is our example DemoComponent:
```
import * as React from "react";
import { GetHackerNewsTopStoriesQuery } from "@/graphql";
import * as styles from './DemoListing.scss';

interface IDemoListingPropType {
  data?: GetHackerNewsTopStoriesQuery,
}

export class DemoListing extends React.PureComponent<IDemoListingPropType> {
  public render() {
    const { data } = this.props;
    
    console.log('Check it here: ', styles.List);

    return (
      <ul className={styles.List}>
        {data!.hn!.topStories!.map(story => (
          <li key={story!.id!}>
            <a href={story!.url!} target="_blank">
              {story!.title}
            </a>
          </li>
        ))}
      </ul>
    );
  }
}
```

And here is our DemoListing.scss file:
```
.List {
  list-style-type:none;
  margin:0;
  padding:0;

  li {
    display:block;
    border-bottom:1px solid #e7e7e7;
    padding:10px 0;
    font-size:12px;
  }
}
```
Hi @leebenson , 

Thanks for ton, for this amazing boilerplate. For sure have saved me tons of hours. :+1: 

Wanted to discuss a challenge that I am facing. As per https://github.com/leebenson/reactql/blob/master/src/entry/client.tsx#L63

Rehydration of the state from the local storage occurs after the apolloClient is already created at line https://github.com/leebenson/reactql/blob/master/src/entry/client.tsx#L44.

Now, if I used my store to keep the logged the authentication token, the store autosaved to localstorage. But would not be hydrated at the time of Apollo client creation. That basically means that it, since the store is hydrated later. 

Now, if I move  line   https://github.com/leebenson/reactql/blob/master/src/entry/client.tsx#L63
to https://github.com/leebenson/reactql/blob/master/src/entry/client.tsx#L42.

So, hydrate before creating the client. I get this error in client console.

```
react-dom.development.js:507 Warning: Expected server HTML to contain a matching <div> in <header>.
```

Please let me know if you have additional questions or if I can help any how to fix this
I tried to configure multiple entries in webpack but it breaks the app.

Additionally I would like to create multiple css bundles based on entry file.