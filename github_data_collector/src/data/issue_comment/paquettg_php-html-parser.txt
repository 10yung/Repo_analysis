Hi, this issue description is long, as I will describe it step by step.

https://github.com/paquettg/php-html-parser/blob/12b94f69637f946ca35af6554f0da67d9d176ca8/src/PHPHtmlParser/Dom/AbstractNode.php#L71-L78
This part explains well how node ids are generated and what they look like. It's a running number starting from 0. `AbstractNode::$count` is increased every time a new node is created, so every node should get a unique id, right?

Well, not always.

https://github.com/paquettg/php-html-parser/blob/12b94f69637f946ca35af6554f0da67d9d176ca8/src/PHPHtmlParser/Dom/AbstractNode.php#L139-L147
I don't know the reason why the counter should be reset, but here we have a method that does it. 

https://github.com/paquettg/php-html-parser/blob/12b94f69637f946ca35af6554f0da67d9d176ca8/src/PHPHtmlParser/Dom.php#L147-L160
According to my IDE, this is the only place where `AbstractNode::resetCount()` is called. I still don't see, why it's called. And see: `Dom::load()` is one kind of a wrapper: it inspects the value of `$str` and calls one of these other methods:
 - `loadFromFile()`,
 - `loadFromUrl()`,
 - or `loadStr()`
None of those methods call `AbstractNode::resetCount()`, and all of those methods are public, so it's easy to bypass `resetCount()` by just avoiding the `load()` method completely, and calling one of the specific `loadFrom*()` methods mentioned above.

**Finally: what is the problem with `AbstractNode::resetCount()`?**
Well, it does bad things!
Lets take an example where we want to insert one new element into a dom:
```php
// Create a dom which will be used as a parent/container for a paragraph
$dom1 = new \PHPHtmlParser\Dom;
$dom1->load('<div>A container div</div>'); // Resets the counter (doesn't matter here as the counter was 0 even without resetting)
$div = $dom1->firstChild();
echo 'Div id: '. $div->id().'<br>'; // Outputs 1

// Create a paragraph outside of the first dom
$dom2 = new \PHPHtmlParser\Dom;
$dom2->load('<p>Our new paragraph.</p>'); // Resets the counter
$paragraph = $dom2->firstChild();
echo 'Paragraph id: '. $paragraph->id(); // Outputs 1
```

(Just a note before continuing the example: when `$dom1`/`$dom2` is loaded with HTML content, it will have actually two nodes instead of just one: both doms will have an invisible `root` element which will have an id of 0. This is why the `div`/`p` element will have an id of 1 instead of 0.)

But let's continue with the example:

```php
$div->addChild($paragraph);
```
This will throw a `CircularException`, because take a look at the `InnerNode::addChild()` method:
https://github.com/paquettg/php-html-parser/blob/12b94f69637f946ca35af6554f0da67d9d176ca8/src/PHPHtmlParser/Dom/InnerNode.php#L110-L122

The last check will make it to: CRASH! BOOM! "The numbers are BAD!!" (says Hurley from the most legendary TV show, Lost.)
test code:

require_once '/vendor/php-html-parser/vendor/autoload.php';
$dom = new \PHPHtmlParser\Dom;
$dom->load([some html code]);
$order_title = $dom->find('.class')[0]->text;

return empty result. I test on php 7.2 and my code work and result not empty. 

Is there way to query multiple tag at once. I am trying following but doesnot seem to be working.
`$pTags          = $dom -> find('p,span');`
I have a need to convert some html from one tag to another (in my case, a `<div>` to a `<p>`). I've added the functionality here, as well as a test.
Some DocBlock and code improvements. Potentiallyfix issue #190.
Thanks for a cool project. Found an issue:

The find() method does not find all matches. After it has found a DOM-node that matches, it seems that it does not keep searching the children of that node for more matches.

Example: (5 b-tags should have been found, but only two are found)

```PHP
$html = "
    <p>
        <b>
            test
            <b>testing</b>
            <b>This is a test</b>
            <i>italic</i>
            <b>password123</b>
        </b>
        <i><b>another</b></i>
    </p>";

$dom = new Dom();
$dom->loadStr($html);
$nodes = $dom->find('b');
echo count($nodes);

```

Of course, there is no exact specification in the documentation of how ->find() should work, but it is indicated that it should work like JQuery, so i'm thinking it's not how it was intended. (As an aside: would be nice with documentation of the API)

(The same happens for getElementsByTag() and possibly others)

Version: 2.1.0
The following example returns zero.
```
count((new Dom())->load('
<html>
<head>
    <script type="text/javascript">
        console.log(1 < 3);
    </script>
</head>
<body>
    <div id="panel"></div>
</body>
</html>
', ['removeScripts' => false])->find('body'));
```

if I comment out the following lines in Dom.php

```
        if (trim($tag) == '')
        {
            // no tag found, invalid < found
            return $return;
        }
```
everything works as expected
I found a piece of invalid html that is causing infinite loop (and maximum execution time issues). 
similiar issue was #179 that was closed already but this example shows that similiar cases exist, how we could fix it without having access to change the html?

```
<img src="www.example.com/image.jpg" data-caption="How did <i>
```

I understand it is an invalid html but the parser should not stuck when trying to parse it and fail gracefully rather than causing infinite execution time
I would like to ask if it's possible to select a child element.

I have the following html : 

```
<tr>
    <td>
        <table style="color:red" cellspacing="0" cellpadding="0" border="0">
            <tbody>
                <tr>
                    <td width="3%">TEXT </td>
                    <td style="font-size:18px">TEXT TO FETCH</td>
                    <td width="3%">TEXT </td>
                </tr>
            </tbody>
        </table>
    </td>
</tr>
<tr>
    <td>
        <table style="color:red" cellspacing="0" cellpadding="0" border="0">
            <tbody>
                <tr>
                    <td width="3%">TEXT </td>
                    <td style="font-size:18px">TEXT NOT TO FETCH</td>
                    <td width="3%">TEXT </td>
                </tr>
            </tbody>
        </table>
    </td>
</tr>
```

I'm trying to retreive the "TEXT TO FETCH"

Here is what I tried : 

```
<?php
require "vendor/autoload.php";
use PHPHtmlParser\Dom;

$dom = new Dom;
$dom->load('content');
$a = $dom->find('tr > td > table > tbody');

var_dump($a->text);
```


Here is the result : 

`string(2) "  "`