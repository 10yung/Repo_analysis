![image](https://user-images.githubusercontent.com/31390605/72031925-eeeacf00-325b-11ea-8b7c-cad18518abeb.png)
NotSupportedException: Specified method is not supported.
  at System.Threading.Mutex..ctor (System.Boolean initiallyOwned, System.String name) [0x00000] in <00000000000000000000000000000000>:0 
  at CSScriptLibrary.CSScript.LoadCode (System.String scriptText, System.String tempFileExtension, System.String assemblyFile, System.Boolean debugBuild, System.String[] refAssemblies) [0x00000] in <00000000000000000000000000000000>:0 
  at CSScriptLibrary.CSScript.LoadCode (System.String scriptText, System.String assemblyFile, System.Boolean debugBuild, System.String[] refAssemblies) [0x00000] in <00000000000000000000000000000000>:0 
  at CSScriptLibrary.CSScript.LoadMethod (System.String methodCode, System.String assemblyFile, System.Boolean debugBuild, System.String[] refAssemblies) [0x00000] in <00000000000000000000000000000000>:0 
  at CSScriptLibrary.CSScript.LoadMethod (System.String methodCode, System.String[] refAssemblies) [0x00000] in <00000000000000000000000000000000>:0 
  at LevelLoader+<Load>d__2.MoveNex

The debug issue is in the red text that was outputted by Unity. I used a webgl dev export.
It works great in UnityEngine but I get errors with WebGL. Here is a snippet of the code that is being called creating the error.

```
using (UnityWebRequest www = UnityWebRequest.Get(QuizInfo.beatmapUrl + "/script.txt"))
        {
            yield return www.SendWebRequest();
            print(www.downloadHandler.text);
            string script = www.downloadHandler.text;
            LevelManager.Level.Script.Start = CSScript.LoadMethod(script).GetStaticMethod("*.Start");
            LevelManager.Level.Script.Update =CSScript.LoadMethod(script).GetStaticMethod("*.Update");
            outputDisplay.text = "Script loaded @ " + QuizInfo.beatmapUrl + "/script.cs";
        }

```

[note: this code is in a IEnumerator]

Is there an issue with CSScript? or is it System.Threading.Mutex..ctor. Im not sure.


I got the "Hello world" examples working, and now I'm trying something more real-world. 


```
           string codeFileName = @"c:\path\Demo3Verified.cs";
            string csCode = System.IO.File.ReadAllText(codeFileName);
            dynamic script = CSScript.LoadCode(codeFileName).CreateObject("*");
```

When I run it, I get this error: 
An unhandled exception of type 'csscript.CompilerException' occurred in CSScriptLibrary.dll

Additional information: c:\Users\nealw\AppData\Local\Temp\CSSCRIPT\dynamic. 

In that folder, I see a file for each time I have run it, but when I open that file, it simply has the name of the file being compiled:  c:\path\Demo3Verified.cs

Also, any recommendation for best practices?  I put Demo3Verified.cs in another C# project so I could write it with Intellisense and make sure it compiled.  I think I've added the same references to the C# program that is calling CSScript.Load,  

Thanks
Neal Walters





I was wondering if it is possible to load a class using CS-Script Core and reference it when executing another CS-Script or reference it from Roslyn? 

E.g.

```
var code2 = @"
using System;
using System.Collections.Generic;
using System.Linq;

public class Usings
{
    static void Main(string[] args)
    {
        var x = new List<int> {1, 2, 3, 4, 5};
        var y = Enumerable.Range(0, 5);
        
        x.ForEach(Console.WriteLine);
        var z = y.First();
        Console.WriteLine(z);
    }
}";
var state = CSScript.Evaluator.ReferenceAssembliesFromCode(code2);
state.CompileCode("var x = new Usings();");
```

I get the error 

> The type or namespace name 'Usings' could not be found
Hi there, I wanted to try out CS-Script. I have a console application, and I tried all three engines, each threw a different exception. Here is my code

```
CSScript.EvaluatorConfig.Engine = EvaluatorEngine.Roslyn; 
dynamic script = CSScript.Evaluator.CompileCode(@"using System;
                                         public class Script
                                         {
                                             public int Sum(int a, int b)
                                             {
                                                 return a+b;
                                             }
                                         }").CreateObject("*");
```
I am running this on OS X Catalina, and using .NET Core 3.1. 

Here is the exception for Roslyn:

```
Unhandled exception. System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.
 ---> System.InvalidCastException: Unable to cast object of type 'Microsoft.CodeAnalysis.UnresolvedMetadataReference' to type 'Microsoft.CodeAnalysis.PortableExecutableReference'.
   at System.Linq.Enumerable.CastIterator[TResult](IEnumerable source)+MoveNext()
   at System.Linq.Enumerable.Any[TSource](IEnumerable`1 source, Func`2 predicate)
   at CSScriptLibrary.RoslynEvaluator.ReferenceAssembly(Assembly assembly)
   at CSScriptLibrary.RoslynEvaluator.ReferenceDomainAssemblies(DomainAssemblies assemblies)
   at CSScriptLibrary.RoslynEvaluator..ctor()
   --- End of inner exception stack trace ---
   at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean wrapExceptions, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor, Boolean& hasNoDefaultCtor)
   at System.RuntimeType.CreateInstanceDefaultCtorSlow(Boolean publicOnly, Boolean wrapExceptions, Boolean fillCache)
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache, Boolean wrapExceptions)
   at System.Activator.CreateInstance[T]()
   at System.LazyHelper.CreateViaDefaultConstructor[T]()
   at System.Lazy`1.CreateViaDefaultConstructor()
   at System.Lazy`1.ViaConstructor()
   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.get_Value()
   at CSScriptLibrary.CSScript.get_RoslynEvaluator()
   at CSScriptLibrary.CSScript.get_Evaluator()
```

For CodeDom I get the following issue: 

`Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly 'System.CodeDom, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. The system cannot find the file specifie`

For Mono engine:
```
Unhandled exception. csscript.CompilerException: (1,1): error CS0518: The predefined type `System.Object' is not defined or imported

   at CSScriptLibrary.MonoEvaluator.HandleCompilingErrors(Action action)
   at CSScriptLibrary.MonoEvaluator.CompileCode(String scriptText)
```

Note: I haven't tried cs-script.core yet. 
There is a error when I using the code below:
```C#
var foo = @"public static void Bar()
{
    byte[] bytes = new byte[]
    {
        1,
        1,
        1,
    };
}";
CSScript.Evaluator.LoadMethod(foo);
```
it throws a `System.MissingMethodException`:
```
System.MissingMethodException
  HResult=0x80131513
  Message=Constructor on type '<PrivateImplementationDetails>1' not found.
  Source=mscorlib
  StackTrace:
   at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, StackCrawlMark& stackMark) in f:\dd\ndp\clr\src\BCL\system\rttype.cs:line 5345
   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes) in f:\dd\ndp\clr\src\BCL\system\activator.cs:line 107
   at System.Reflection.Assembly.CreateInstance(String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes) in f:\dd\ndp\clr\src\BCL\system\reflection\assembly.cs:line 1017
   at CSScriptLibraryExtensionMethods.CreateInstance(Assembly assembly, String typeName, Object[] args)
   at CSScriptLibrary.AsmBrowser.CreateInstance(String typeName, Object[] args)
   at CSScriptLibraryExtensionMethods.CreateObject(Assembly obj, String typeName, Object[] args)
   at CSScriptLibrary.RoslynEvaluator.LoadMethod(String code)
   at Test.Program.Test() in E:\Test\just_for_test\Test\Test\Program.cs:line 68
   at Test.Program.Main(String[] args) in E:\just_for_test\\Program.cs:line 25
```
In fact, there is alwasy an exception when initializing a byte array whose elements number are greater than 2.
It's just happened in `Evaluator.XXX`, and working fine in CSI or all codes below:
```c#
CSScript.LoadMethod(foo).GetStaticMethod("*.Bar")()
```
or
```c#
var foo = @"public static void Bar()
{
    byte[] bytes = new byte[]
    {
        1,
        1,
    };
}";
```
But, i'm not skilled at C# and don't know it's my fault or someway else anymore. Could anyone give me some tips?
```
CS-Script version: 3.30.0
.net Framework 4.7.2
```
I am looking for few scripting systems like lua, js and now csharp and I want to make possible to use these in a game and maybe also with multiplayer possibility.

In lua and js I can define my own globals. So far I know it is not possible to load and make bad things. I would like to make csharp available too (or even as primary language) but I am not sure about the security.
if I make this available in a online game and they could use libraries like to delete files, they maybe could make really evil things. 

An example I made a text file and loaded it with CSScript.Load but the file contains the CSScriptLibrary but it shouldn't be allowed and give error.

So the question is: Is there any limits possible to avoid this? Or even say only this one namespace is possible? The Idea is loaded scripts which contains "**unknown**" namespaces or libaries (example System) should give an error.
I have been writing a script which uses Appium.WebDriver.

It has a factory which executes this statement:
`Assembly.Load("WebDriver").GetType("OpenQA.Selenium.Remote.HttpCommandExecutor")`

My script had already loaded assemblies WebDriver and WebDriver.Support.

`Assembly.Load("WebDriver")` was resolving to WebDriver.Support.

This pull request ensures that the full assembly short name is matched by checking for the trailing comma. For reference the full assembly names are:

WebDriver, Version=3.141.0.0, Culture=neutral, PublicKeyToken=null
WebDriver.Support, Version=3.141.0.0, Culture=neutral, PublicKeyToken=null
Hey Oleg,

During migration of our project  to .NET Core 3 , we found a strange problem related to CSScript.Evaluator. It throws TargetInvocationException. Here are details:

Message: Inner Excception -"The type initializer for 'Microsoft.CodeAnalysis.Scripting.ScriptOptions' threw an exception."} System.Exception {System.TypeInitializationException}

StackTrace: 
   at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean wrapExceptions, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor, Boolean& hasNoDefaultCtor)
   at System.RuntimeType.CreateInstanceDefaultCtorSlow(Boolean publicOnly, Boolean wrapExceptions, Boolean fillCache)
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache, Boolean wrapExceptions)
   at System.Activator.CreateInstance[T]()
   at System.LazyHelper.CreateViaDefaultConstructor[T]()
   at System.Lazy`1.CreateViaDefaultConstructor()
   at System.Lazy`1.ViaConstructor()
   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.get_Value()
   at CSScriptLib.CSScript.get_RoslynEvaluator()
   at CSScriptLib.CSScript.get_Evaluator()

Probably not related but, this happens on following line of code in our project
ICodeVariable scriptObject = CSScript.Evaluator.LoadCode<ICodeVariable>(sourceCode);





Tried to install cscs (with base of mono) to windows 10, wsl linux subsystem.
Installation goes ok, but symbolic link pinpoints incorrectly:

```
user1@laptop:/mnt/c/dev1$ ls -la /usr/local/bin/cscs
lrwxrwxrwx 1 root root 18 Aug 15  2017 /usr/local/bin/cscs -> cs-script/cscs.exe
```

Found one executable, but it does not shows .net mono version correctly.

```
/usr/local/bin/cs-script/cscs.exe
C# Script execution engine. Version 3.27.2.1.
Copyright (C) 2004-2017 Oleg Shilo. www.csscript.net (github.com/oleg-shilo/cs-script)

   CLR:             4.0.30319.42000 (.NET Framework v4.6.2 or later)
   System:          Microsoft Windows NT 6.2.9200.0
```

Should it read .NET mono or something ?
Compile file content:
```C#
//css_reference "System.dll";
//css_reference "System.Windows.Forms.dll";

import System;
import System.Windows.Forms;

public class Script
{
	public static function Main(args)
	{
		Console.WriteLine("Hello World! (JScript)");
		MessageBox.Show("Hello World! (JScript)");
	}
}

```
Gets exception at file "csparser.cs":
```C# 
public ImportInfo(string statement, string parentScript)
{
                string statementToParse = statement.Replace("($this.name)", Path.GetFileNameWithoutExtension(parentScript));
                statementToParse = statementToParse.Replace("\t", "").Trim();

                string[] parts = CSharpParser.SplitByDelimiter(statementToParse, DirectiveDelimiters);

                this.file =
                this.rawStatement = parts[0];
                this.parentScript = parentScript;

---> here: if (!Path.IsPathRooted(this.file) && ResolveRelativeFromParentScriptLocation)
…
`
Solution - remove double quotes from a string statement:
`statementToParse = statementToParse.Replace("\t", "").Trim().Trim('"');`