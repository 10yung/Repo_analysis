Running on PHP 7.4, this line throws exception:
https://github.com/goaop/framework/blob/b39293743d69722d9bb557804d29bf1315d73e79/src/Proxy/ClassProxyGenerator.php#L233
We should replace the string casting with the getName() method on ReflectionType, or make sure we use the overloaded ReflectionType from goaop/parser-reflection library
Currently Go AOP cannot be used in a Symfony 5.0 based project, since this:

```
Your requirements could not be resolved to an installable set of packages.

  Problem 1
    - goaop/framework 2.3.3 requires symfony/finder ^3.4|^4.2 -> no matching package found.
    - goaop/framework 2.3.2 requires symfony/finder ^3.4|^4.2 -> no matching package found.
    - goaop/framework 2.3.1 requires symfony/finder ^3.4|^4.2 -> no matching package found.
    - goaop/framework 2.3.0 requires symfony/finder ^3.4|^4.2 -> no matching package found.
    - Installation request for goaop/framework ^2.3 -> satisfiable by goaop/framework[2.3.0, 2.3.1, 2.3.2, 2.3.3].
```

Could we probably add `symfony/finder@^5.0` also?
I'm especially interested in https://github.com/goaop/framework/pull/412
Error message:

> Call to a member function toString() on null in vendor/goaop/framework/src/Instrument/Transformer/SelfValueVisitor.php:72

```
    public function enterNode(Node $node)
    {
        if ($node instanceof Stmt\Namespace_) {
            $this->namespace = $node->name->toString();
```

`$node->name` is null in a class without namespace.
Consider example:

---------- file A.php ------------

    use Some\Annotation as Annotation;

    abstract class A {
        /**
         * @Annotation\Cacheable()
         */
        public foo () {}
    }

---------- file B.php ------------

    abstract class B extends A {}

We define our pointcut to target every public method annotated with annotation `\Some\Annotation\Cacheable`

Class A will get weaved, class B will get weaved as well. Exception will occur on class B since:
1. method `foo()` will be defined and weaved in class B as well because of A and pointcut
2. method `foo()` in weaved B will get docblock comment from `foo()` from A (`@Annotation\Cacheable()`)

Exception will be thrown because `@Annotation\Cacheable()` is not imported into weaved B.

This is easy to reproduce.

Fix is easy - instead of using class aliases for docblock annotations, in process of compiling classes and creating proxies, for all annotations FQCN should be used, eg, instead of `@Annotation\Cacheable()` -> write `@Some\Annotation\Cacheable()`



Doctrine entities can not be weaved - class metadata gets all messed up.

Engine generates `Entity__AopProxied`, which is copy of original class, and then generates class `Entity` that extends `Entity__AopProxied` and contains weaved methods/properties.

Issue is that `Entity__AopProxied` contains doctrine metadata, so Doctrine actually generates such metadata that `Entity__AopProxied` is main class and every relation is bound to that class, not `Entity`.

Side effects are that, per example, table name gets suffix "__aop_proixed", while relations gets all screwed up, so any join is broken because different aliases are generated with SQL walker. Lazy loading does not work as well.

Possible solution would be (in order to preserve BC compatibility) to provide possibility to specify different method of weaving for certain classes. Per example, in this case, in order to work as it should, `Entity__AopProxied` should not be generated and inherited, it should be generated only `Entity` class.

Yes, maybe we will loose nice debugging and breakpoints, however, for now, we can sacrifice that for working code.

 


Hello, I'm trying to use Go in a project, but it's crashing out of the box. It seems strange to me because I would think a crash this basic would affect more people. Perhaps it's my environment. I added some print debugging to the composer ClassLoader and the AopComposerLoader. As you can see it successfully locates the files on disk and includes them, but in the case of the doctrine AnnotationReader it tries to apply the go.source.transforming.loader filter and crashes the program.

`Searching for class Symfony\Component\Console\Application with extension .php
        File path before rewrite:
                /root/git/project/vendor/composer/../symfony/console/Application.php
        File path after rewrite:
                php://filter/read=go.source.transforming.loader/resource=/root/git/project/vendor/composer/../symfony/console/Application.php
Searching for class Go\Instrument\Transformer\StreamMetaData with extension .php
        File path before rewrite:
                /root/git/project/vendor/composer/../goaop/framework/src/Instrument/Transformer/StreamMetaData.php
        File path after rewrite:
                /root/git/project/vendor/composer/../goaop/framework/src/Instrument/Transformer/StreamMetaData.php
        Including /root/git/project/vendor/composer/../goaop/framework/src/Instrument/Transformer/StreamMetaData.php
Searching for class Go\Instrument\Transformer\WeavingTransformer with extension .php
        File path before rewrite:
                /root/git/project/vendor/composer/../goaop/framework/src/Instrument/Transformer/WeavingTransformer.php
        File path after rewrite:
                /root/git/project/vendor/composer/../goaop/framework/src/Instrument/Transformer/WeavingTransformer.php
        Including /root/git/project/vendor/composer/../goaop/framework/src/Instrument/Transformer/WeavingTransformer.php
Searching for class Go\Core\AdviceMatcher with extension .php
        File path before rewrite:
                /root/git/project/vendor/composer/../goaop/framework/src/Core/AdviceMatcher.php
        File path after rewrite:
                /root/git/project/vendor/composer/../goaop/framework/src/Core/AdviceMatcher.php
        Including /root/git/project/vendor/composer/../goaop/framework/src/Core/AdviceMatcher.php
Searching for class Go\Core\AspectLoader with extension .php
        File path before rewrite:
                /root/git/project/vendor/composer/../goaop/framework/src/Core/AspectLoader.php
        File path after rewrite:
                /root/git/project/vendor/composer/../goaop/framework/src/Core/AspectLoader.php
        Including /root/git/project/vendor/composer/../goaop/framework/src/Core/AspectLoader.php
Searching for class Doctrine\Common\Annotations\AnnotationReader with extension .php
        File path before rewrite:
                /root/git/project/vendor/composer/../doctrine/annotations/lib/Doctrine/Common/Annotations/AnnotationReader.php
        File path after rewrite:
                php://filter/read=go.source.transforming.loader/resource=/root/git/project/vendor/composer/../doctrine/annotations/lib/Doctrine/Common/Annotations/AnnotationReader.php
PHP Fatal error:  Uncaught Error: Class 'Doctrine\Common\Annotations\AnnotationReader' not found in /root/git/project/vendor/goaop/framework/src/Core/GoAspectContainer.php:88
Stack trace:
#0 /root/git/project/vendor/goaop/framework/src/Core/Container.php(65): Go\Core\GoAspectContainer->Go\Core{closure}(Object(Go\Core\GoAspectContainer))
#1 /root/git/project/vendor/goaop/framework/src/Core/Container.php(87): Go\Core\Container->Go\Core{closure}(Object(Go\Core\GoAspectContainer))
#2 /root/git/project/vendor/goaop/framework/src/Core/GoAspectContainer.php(50): Go\Core\Container->get('aspect.annotati...')
#3 /root/git/project/vendor/goaop/framework/src/Core/Container.php(65): Go\Core\GoAspectContainer->Go\Core{closure}(Object(Go\Core\GoAspectContainer))
#4 /root/git/project/vendor/goaop/framework/src/Core/Container.php(87): Go\Core\Container->Go\Core{closure}(Object(Go\Core\GoAspectContainer))
#5 /root/git/project/vendor/goaop/framework/src/Core/GoAspectContai in /root/git/project/vendor/goaop/framework/src/Core/GoAspectContainer.php on line 88`

Interception of methods in the internal PHP classes is the most complex one, however, it is required for special cases, for example, to intercept `mysql->query()` invocation:

``` php
class MysqliQueryOperationCollectionAspect implements Aspect {

    /**
     * @param MethodInvocation $invocation Invocation
     * @Around(execution(public mysqli->query(*))
     * @return mixed
     */
    public function aroundQueryMethod(MethodInvocation $invocation) {
        $method = $invocation->getMethod();
        $args = $invocation->getArguments();
        $query = $args[1];
        if ($this->logger->isTraceEnabled()) {
            $this->logger->trace($method->getName().'('.$query.')');
        }

        try {
            $result = $invocation->proceed();
            return $result;
        } catch(Exception $e) {
            if ($this->logger->isTraceEnabled()) {
                $this->logger->trace($method->getName().'('.$query.') '.get_class($e).':' .$e->getMessage());
            }
            throw $e;
        }
    }
}
```

If you are using an AOP or have a plan to use it, please add a small comment here or just put a +1 ) I will be happy to see that this technique can be useful for you ) 
You can also provide an additional information about the usage (how you use it and where). I can put this information later on my site with hyper-link to your solution.

JMSExtraSecurity bundle verifies that secure annotation is copied to overridden method from the parent method annotation and @SatisfiesParentSecurityPolicy annotation is added to the child class.
