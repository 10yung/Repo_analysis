```
{
      key: "test",
      template: `test: <input>`,
      templateOptions: {
        label: "test"
      }
    }
```
 WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss

this causes that <input> not being rendered.
It would be great if formly would support observables on the `hooks` `onInit` `afterViewInit` and `afterContentInit`. If an observable is returned from one of the hooks, Formly would automatically subscribe to that observable until the field is destroyed. This would free users from subscribing to the observable and handling the `onDestroy`-hook themselves.

Example usage:

```js
fields = [{
   ...
   hooks: {
      // Patch value of some other form control every time this value changes
      // subscription and unsubscribe is handled by formly
      onInit: field => field.formControl.valueChanges.pipe(
                    tap(value => field.form.patchValue({someOtherField: value})
                 )
   }
 },
...
];
```
**Question**

Hi, I'm building the fields from server side and send it to client side to display by using ngx-formly. In my form, I registered some custom types. The point is, because the custom types names are generated on server, in some cases when it returns the wrong name, there could be an issue "There is no type by the name of 'custom-field' " in displaying form.
I would like to display this error as a row in the form instead of having console.log error as usual. Or better if I could replace the error field by some default field. Is it possible with ngx-formly?

Here is the code example: https://stackblitz.com/edit/angular-8mugxj

**Is your feature request related to a problem? Please describe.**
I'm trying to use the 'step' attribute to restrict a number input to only 2 decimals. So 123.45 would be valid, 123.456 would be invalid.
My ngx-formly example can be seen here: https://stackblitz.com/edit/angular-xb9agn
Somehow the number is not recognized as invalid. The invalid input is also part of the submit. But if I copy the very same input element in this fiddle, it is recognized as invalid: https://jsfiddle.net/mfty6jpL/

**Describe the solution you'd like**
Error message when user input is invalid, i.e. if user types '123.456' if step="0.01"
(see JSFiddle above).

**Describe alternatives you've considered**
I currently use pattern validation instead.
Expression validation should be possible, too.

**Additional context**
Probably not browser dependent. Tried the following:
Firefox 70.0.1 (64-Bit)
Chrome  78.0.3904.97 (64-Bit)
Internet Explorer 11.1504.16299.0

I want to get notified whenever the structure of the form changes.

Use case:

- The form is not initialized at the start, but only after user clicks a button.
- I want to subscribe to changes (validity and value) of a specific control: `this.form.controls.myControl.valueChanges..`. This will fail if I do this too early because `myControl` will only exist after the formly form initialized itself.

So far I have not found a good solution to get noticed when formly changed the structure of the form. I therefore propose a new Output binding `formChange`:

Proposal:
```
export class FormlyForm implements ... {
   @Output()
   formChange = new EventEmitter<FormGroup | FormArray>();

   ...
   ngOnChanges(simpleChanges: SimpleChanges) {
     ... // existing implemtation
    // new:
      if (changes.fields || changes.form) {
        this.formChange.next(this.form);
      }
   }
```
<!-- Do you enjoy using formly? if yes, please give it a star ⭐! -->

**Is your feature request related to a problem? Please describe.**
Trying to create a Condition/Expression builder using Formly is extremely painful due to the requirement to manually do recursion and pollution of the model.

**Describe the solution you'd like**
I want to be able to do recursion within FieldGroups without having to manually re-create FieldGroups and pollute the model

**Describe alternatives you've considered**
I've created my form so far and I'm manually having to clean it up afterwards and it's limited to an amount of recursion that I specify.

**Additional context**
https://stackblitz.com/edit/angular-rhagg9-1bfpvt?file=src%2Fapp%2Futils.ts
<!--
IF YOU DON'T FILL OUT THE FOLLOWING INFORMATION WE MIGHT CLOSE YOUR ISSUE WITHOUT INVESTIGATING
-->

**I'm submitting a ...**  (check one with "x")
```
[x] bug report => search github for a similar issue or PR before submitting
[ ] feature request
[ ] support request
```

**Current behavior**

legend:

FORM: the controller where is declared the form.
CUSTOM_INPUT: the custom input created with ngx-form.
COMPONENT: the component declared in the template of CUSTOM_INPUT.

I created a custom type input in ngx-formly, the template of this custom input is COMPONENT that bind out a value with formControl (COMPONENT implements ControlValueAccessor).
COMPONENT is formed by 3 select box.
When value of COMPONENT is bind to CUSTOM_INPUT, i try to bind it with this.formControl.setValue(myValue); to FORM.
The problem is that "change" method of templateOptions of CUSTOM_INPUT it not trigger.
I try also to pass formlyAttributes to COMPONENT and i see that if i set formlyAttributes to my 3 select box of COMPONENT the method change in FORM is triggered, but is triggered every time that i change value of one of the 3 selectbox of COMPONENT.

**Expected behavior**
I expected that the change event is triggered when formControl.setValue(MyValue) is called inside CUSTOM_INPUT.

**Minimal reproduction of the problem with instructions**
This is a use case found on google that is exactly the same of my problem.
https://stackblitz.com/edit/angular-ngx-formly
Just add

`change: (field: FormlyFieldConfig, event?: any) => { debugger }`

in templateOptions of

`fields: FormlyFieldConfig[] = [ { key: 'state'.....`
  
in app.component.ts file

**What is the motivation / use case for changing the behavior?**
I expected to can create custom ngx-form input that use custom input component like template.
In this case with 3 select, i can't use formlyAttributes, for the problem of triggering that i said before.

**Please tell us about your environment:**
Ubuntu 18.04, Visual Studio Code, npm

* **Angular version:**
8.2.9

* **Browser:**
Chromium 77

* **Language:**
TypeScript 3.6.0

* **Node (for AoT issues):**
`node --version` = 10.16.3

I have hiddenexpression. which shows based on the other fields. When on condition hidden the values are not cleared. Like when the field is hidden we should clear the input value also.

Current behavior
Values are not removed

Expected behavior
Values are remain.

I have provided the stackblitz example in the below link.

https://stackblitz.com/edit/angular-fdjd5u-r9dzqb

steps
1 . click option 2 radio
2. now you should see line 2. enter some value in line 2
3. now click option 1 radio
4.  line 2 will be hidden
5. now again click option 2 radio
6. you will see the value there. it will not be cleared.
This is a fairly simple change which allows for custom-inline to be added as an option to the checkbox, radio and multicheckbox fields for bootstrap.

See: https://getbootstrap.com/docs/4.3/components/forms/#inline-1
**I'm submitting a ...**  (check one with "x")
```
[ ] bug report => search github for a similar issue or PR before submitting
[x] feature request
[x] support request
```

**Current behavior**
There is not a pre-defined way to pass in parameters to the validators, other then using templateOptions or some other field. I tried a custom property on the `validators` object, but it is interpreted as validator on itself.

**Expected behavior**
There should be a way to pass parameters to a validator in a logical way.

**Minimal reproduction of the problem with instructions**
https://stackblitz.com/edit/angular-ngx-formly-cck62q

**What is the motivation / use case for changing the behavior?**
I want to do validation on dates for future and/or past validation.

**Please tell us about your environment:**
..

* **Angular version:** 2.0.X
7.x

* **Browser:** [all | Chrome XX | Firefox XX | IE XX | Safari XX | Mobile Chrome XX | Android X.X Web Browser | iOS XX Safari | iOS XX UIWebView | iOS XX WKWebView ]
all

* **Language:** [all | TypeScript X.X | ES6/7 | ES5]
Typescript