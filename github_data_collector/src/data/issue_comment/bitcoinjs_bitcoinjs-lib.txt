- Add double-quote to prettier execution.
- Remove the logging output to /dev/null. This does cause a bit more logging to be outputted.
- Closes #1523
# Issue

It used to be possible to build the lib on Windows, but not after the migration to TypeScript and the way prettier is being utilized.

`"formatjs": "npm run prettierjs -- --write > /dev/null 2>&1"`

There are no /dev/null on Windows, though "nul" can be used as an alternative (at least when running from cmd.exe).

The second issue is with how prettier is called:

`"prettierjs": "prettier 'src/**/*.js' --ignore-path ./.prettierignore",`

Windows does not recognice single-quotes as strings, it must be double-quote characters. This also fails on Windows.

I presume the > piping is just to avoid logging output? If this is not a critical thing to avoid, I suggest dropping piping the log output and just show it.

# Solution

This is a way to output the logging to a null-device on Windows:

`"formatjs:win": "npm run prettierjs -- --write > nul 2>&1",`

If the exact same thing is run on Linux, it will create (and overwrite) a file named "nul". Probably not an optimal solution for cross-platform support, so this is not a full solution to that issue.

Here is a fix for the prettier scripts, they must be run with escaped double-quotes:

```
    "prettier": "prettier \"ts_src/**/*.ts\" \"test/**/*.ts\" --ignore-path ./.prettierignore",
    "prettierjs": "prettier \"src/**/*.js\" --ignore-path ./.prettierignore",
```
This will be a place to brainstorm ideas...

Needs:

1. Tagged Hashes (maybe make a smaller separate package)
2. Taproot builder (can we wedge this into the existing Payments API??? it seems to act similar to p2sh and p2wsh, and the lazy-loading should help greatly with performance due to the crypto operations to calculate the tweaked pubkey)
3. Segwit v1 Address generation via the Payments(Taproot) API
4. Schnorr signing module. (Modify tiny-secp256k1... not sure what to do with native JS though.)

Questions:

1. When should this be implemented? I'm guessing we should wait for at least a testnet release of Taproot before spending time on it... But at the same time, it would help the development of taproot if we can look at taproot with fresh eyes / a new perspective and make suggestions based on problems while implementing.
2. This is going to be a pretty big change... so maybe it should be a major version bump and that way we can reconsider existing API structure when adding Taproot.

Thoughts and comments welcome.
How can you Verify a Transaction in a block?

for example if i receive a transaction (lets say in HEX)

how would i know the transaction is **signed** by the owner?  


Maybe an example with a hardcoded-value would be helpful.

I think, I'm following as much as I could understood from this reference: https://github.com/helperbit/helperbit-wallet/blob/master/app/components/dashboard/bitcoin.service/ledger.ts

but it doesn't seems to be working.

this is my minimal reproducible example I've got.
```typescript
/* tslint:disable */
require('regenerator-runtime');
const { default: Transport } = require('@ledgerhq/hw-transport-node-hid')
const { default: AppBtc } = require('@ledgerhq/hw-app-btc');
import * as bitcoin from 'bitcoinjs-lib'

const MNEMONICS = 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about';
// not used, but there's no harm, since this is what I and @ledgerhq used to test anyway.

const NETWORK = bitcoin.networks.regtest;
const destinationAddress = '2MuhtGHkdxiL4BjFAAaYjq8Q2mwnCoYSebt';

const segwit = true;
const LOCK_TIME = 0;
const path = `m/12'/0'/55'`

function compressPublicKey(pk: string): string {
  return bitcoin.ECPair.fromPublicKey(Buffer.from(pk, 'hex')).publicKey.toString('hex');
}

async function main(): Promise<void> {

  const ecPrivate = bitcoin.ECPair.fromPrivateKey(Buffer.from('64e897b5fac936a30a7a73e1c2892697c91b0705a8d061ea28e59f41d2876e0d', 'hex'), { network: NETWORK });
  const ecPublic = bitcoin.ECPair.fromPublicKey(ecPrivate.publicKey, { network: NETWORK });
  const p2wpkh = bitcoin.payments.p2wpkh({ pubkey: ecPublic.publicKey, network: NETWORK });
  const p2sh = bitcoin.payments.p2sh({ redeem: p2wpkh, network: NETWORK });
  const redeemScript = p2wpkh.output as Buffer;

  const inputTxHex = '02000000000105e11d8c7970aff25a8a431c49397316ce80af25dca6ac395f172e2d7326d42e570100000017160014cccb96f2ec1b5a2b7081f96b78077488769e3d8efeffffff77bcf72d69888cc739341107028e1e8a302d507fe9ffb94c5359fb1e82f08f370100000017160014527aef9caa6e0a12ecea8ce255cb36427a2f451afeffffff3cad9140403d6ec68bc0cf0b261daa4a41d92f04bddad98fc05a305127c7145c00000000171600143ea2fa276d3de26e4e220a1e6d343a235edbaff6feffffff250152b93632b8e275aba954c894dcbc2c0124a5c1db10de3edc5a0fd2880cc30100000017160014954f8b16a236e5d76b1f6fb69ea821b370fba749feffffffafd0c8b8eab835303aa213a0390e40e25a152dc62889b32df6887dc147b4e29b000000001716001436c91ffd3fd014ca8955eaa97e14dc9fdbed08f4feffffff0200e1f5050000000017a914f1f02b570afafacde515fcd6862a50822b56973e876c515f000000000017a9141afb048a646910eb09136f1cb311774d6c63e8ed870247304402200bfc0495e92aece0807c4c709fc05df3725794e766f36d372f3b35714d376775022077f01d90848205088374c2d8a9e28aedbc9f46212ce83fad7ab5ba00e33130680121021e3bbec438d71dc4966c817ee8db61970bd2288799d9bad9a5f8dd3795e2b0410247304402202c871ca7260d427f07f0482f939aa6193785de9b6df8742cf48881bd0525c4e0022056d7f2621d17fcacb3abd2dad030618a74abb259e852c98d10c96b541876a8340121033c41c3f65f7dab256d1cb28b195ba27c7fc4b1bf2c75e17935dfe9a3846b8c580247304402206cfb872c56f3cab4fcad77f83fc953d037c091d7714c0e7eca1257b56dff57c2022024540ce39d13d55de9f626aee397bad27ef5434f8e57890a3012886c4a6bc1c80121025dec89fee179c0248b24fa2c88db9890a386b836485784d53d12df639fb1e1d6024730440220239dc8ac1c0692b2a4642318cbef810114818132721ab2ba403f037ac0732b3302207112d7d1592b22958184f311f25b8e7a90ac353316bea8af12eeb731e9b0dd540121021a13c8f4c8767317c3cd9d0f7e4d8d8509822ca6891f7cbcc33ec10139b461040247304402205a407877f002d6dc86a83b3c31880366fc3f82204eb7d61a4c3a34c03439592c02201200f52a858463e6547287b2f2964594c6c3233886e12d7d3b499ef59cca5713012102b05ca0a2dc317d82f64483d4087419122eb27e5646e8190a7bac6c5cbacadbe500000000';
  // this is the utxo with txid: '25ba0c45cadf92ded94432101d286975dcdb865df44b68da597910ea783cff74'
  // when decoded, the first outputs is the p2sh.address from the `MNEMONICS` at the path `m/12'/0'/55'`

  const txid = '25ba0c45cadf92ded94432101d286975dcdb865df44b68da597910ea783cff74'
  const psbt = new bitcoin.Psbt({ network: NETWORK });
  psbt.addInput({
    hash: txid,
    index: 0,
    nonWitnessUtxo: Buffer.from(inputTxHex, 'hex'),
    redeemScript,
    sequence: 0,
  });
  const output = {
    address: destinationAddress,
    value: 4000,
  };
  psbt.addOutput(output);

  const transport = await Transport.create();
  const btc = new AppBtc(transport);

  const fromLedger = await btc.getWalletPublicKey(path, { format: 'p2sh' });
  const ledgerPublicKey = compressPublicKey(fromLedger.publicKey);
  const bitcoinJsPublicKey = (ecPublic.publicKey as Buffer).toString('hex');
  console.log({ ledgerPublicKey, bitcoinJsPublicKey });
  // verifying ledger and bitcoinjs-lib has the same public key.
  

  const paths = [ path ];
  const tx = await (psbt as any).__CACHE.__TX.toHex();
  const ledgerTx = await btc.splitTransaction(tx, true);
  const ledgerOutputs: Buffer = await btc.serializeTransactionOutputs(ledgerTx);
  const txInput = await btc.splitTransaction(inputTxHex, segwit);
  const outputScript = (p2sh as bitcoin.payments.Payment).output as Buffer; // <- is this correct?
  const inputs = [[txInput, 0, (outputScript as Buffer).toString('hex'), 0]]
  const signatures = await btc.signP2SHTransaction(
    inputs,
    paths,
    ledgerOutputs.toString('hex'),
    LOCK_TIME,
    undefined,
    segwit,
    2
  );

  const signer = {
    network: NETWORK,
    publicKey: Buffer.from(ledgerPublicKey, 'hex'),
    sign: ($hash: Buffer) => {
      const signature = ecPrivate.sign($hash); // just for comparison.
      const ledgerSign = bitcoin.script.signature.decode(Buffer.from(signatures[0], 'hex'));
      console.log({
        $hash: $hash.toString('hex'),
        osg: signature.toString('hex'),
        lsg: ledgerSign.signature.toString('hex'),
      });
      // return signature;
      return ledgerSign.signature;
    },
  } as unknown as bitcoin.ECPairInterface;

  psbt.signInput(0, signer);
  const validated = psbt.validateSignaturesOfInput(0);
  console.log({ validated }); // <- I'd expect that this would be { validated: true }
  // just like if the sign method of `signer` above just return signature instead of ledgerSign.signature
}

main();

```

I also asked this question on Stackoverflow hoping to get some help.
https://stackoverflow.com/questions/59082832/how-to-sign-bitcoin-psbt-with-ledger
Hello!

Having this code:
```js
const alice = ECPair.fromWIF(
  'cQVWFq9CMaFtUPrYat4by6JQuWDoiSB2uzJR84nzDmdUBkkY6YTM',
  TESTNET
)

const p2pkh = payments.p2pkh({ pubkey: alice.publicKey, network: TESTNET })

const txb = new TransactionBuilder(TESTNET)

const txid = '58993dce9fec2ba9096080eb85ae996080c6eaa9f7715e6cc3d95ba7958d7fc3'
const vout = 0

txb.addInput(txid, vout, null, p2pkh.output)
txb.addOutput('2N2kuwmUqaYm3iifDrrxXQW6oW2uGX46Pf6', 500000)

txb.sign(0, alice)
const tx2 = txb.build()
console.log('tx', tx2.toHex())
```

I get this hexadecimal, ```0200000001c37f8d95a75bd9c36c5e71f7a9eac6806099ae85eb806009a92bec9fce3d9958000000006b48304502210085b7074689d0ce164a65a8d2d23ed3a194dad8d549ba4f8625869a4f9778281a02201237b0ebe2e0ee11d6abdf8ae1dc71a23b2f9c92cbdbc1fe7cb4b7f1ab39d8ff0121022761f7b06edd78c2c0aaf6f222da02b5b7668269f42467fcd4cff7cfb26eb640ffffffff0120a107000000000017a91468568c8e852f81ccc8503abe3d140e0aaba506328700000000```

When I send using blockcypher to the network, I get this validation error: ```Error validating transaction: Error running script for input 0 referencing 58993dce9fec2ba9096080eb85ae996080c6eaa9f7715e6cc3d95ba7958d7fc3 at 0: Script was NOT verified successfully..```

If I try to get the address of the WIF private key I'm using, I get a different address:
```js
const alice = ECPair.fromWIF(
  'cQVWFq9CMaFtUPrYat4by6JQuWDoiSB2uzJR84nzDmdUBkkY6YTM',
  TESTNET
)
const { address } = payments.p2pkh({ pubkey: alice.publicKey, network: TESTNET })
const publicKey = alice.publicKey.toString('hex')
const privateKey = alice.toWIF()
console.log('alice address', { address, privateKey, publicKey })
```

```
{ address: 'mzWY7FWn3PYDMPXKW62yywRuYKawpqXmZ8',
  privateKey: 'cQVWFq9CMaFtUPrYat4by6JQuWDoiSB2uzJR84nzDmdUBkkY6YTM',
  publicKey:
   '022761f7b06edd78c2c0aaf6f222da02b5b7668269f42467fcd4cff7cfb26eb640' }
```

I dont know if the WIF is the problem to get the validation error I get, the type of UTXO or something else. 

¿Any ideas please? 

Thank you very much :)


UTXOs for "2N8K8uf9ND1fQGxZdBUb9whd73Ukwi8ZEJu" : 
```
 bitcoin-cli --testnet listunspent
[
  {
    "txid": "58993dce9fec2ba9096080eb85ae996080c6eaa9f7715e6cc3d95ba7958d7fc3",
    "vout": 0,
    "address": "2N8K8uf9ND1fQGxZdBUb9whd73Ukwi8ZEJu",
    "redeemScript": "0014c4a10a23bceb0e7b659fac1ef2ff2dc752cdd457",
    "scriptPubKey": "a914a5474f6c0bd2b26b84738bb717cdc44f5d5df4a187",
    "amount": 0.02197712,
    "confirmations": 3,
    "spendable": true,
    "solvable": true,
    "safe": true
  },
]
```
This will allow people to use arbitrary scripts.

Bring over TransactionInput from BIP174 to here. Remove from BIP174.
For more information see this [Introduction and Live Compiler](http://bitcoin.sipa.be/miniscript/)

