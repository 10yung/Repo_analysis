The following:

```
item:
  1:
    - value: |
        ### Header
```

Results in:

```
{
  "item": {
    "1": [
      {
        "value": ""
      }
    ]
  }
}
```

When it should result in:

```
{
  "item": {
    "1": [
      {
        "value": "### Header"
      }
    ]
  }
}
```
When you get some time can you please add a CLI argument to specify a destination directory. When converting an entire directory this can be helpful 
I tried to use "prettier.io" on my api-doc.yml.

Here is a simplified snippet of my original yml which works:

```
swagger: '2.0'
host: localhost:4000
basePath: /
info:
  title: Sample
  version: '3.0.0'
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Error:
    additionalProperties: true
paths:
  /participant-organizations/{participantOrganizationId}/policies/validation/{recordType}: 
    parameters:
      - name: participantOrganizationId
        in: path
        type: string
        required: true
        description: OrganizationId
      - name: recordType
        in: path
        type: string
        required: true
        description: specified type of record
    put:
      tags:
        - Validation Policy
      description: Update validation policy for the record type
      operationId: updateValidationPolicy
      security:
        - Bearer: []
      parameters:
        - name: validation policy
          in: body
          schema:
            $ref: "#/definitions/ValidationPolicy"
      responses:
        201:
          description: validation policy was updated
  ```

After running the formatter, the yml looks like:

```
swagger: "2.0"
host: localhost:4000
basePath: /
info:
  title: Sample
  version: "3.0.0"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Error:
    additionalProperties: true
paths:
  ? /participant-organizations/{participantOrganizationId}/policies/validation/{recordType}
  : parameters:
      - name: participantOrganizationId
        in: path
        type: string
        required: true
        description: OrganizationId
      - name: recordType
        in: path
        type: string
        required: true
        description: specified type of record
    put:
      tags:
        - Validation Policy
      description: Update validation policy for the record type
      operationId: updateValidationPolicy
      security:
        - Bearer: []
      parameters:
        - name: validation policy
          in: body
          schema:
            $ref: "#/definitions/ValidationPolicy"
      responses:
        201:
          description: validation policy was updated
```

Notice the syntax `? /participant-organizations/{participantOrganizationId}/policies/validation/{recordType}`?

According to this thread, this is valid syntax: https://github.com/prettier/prettier/issues/5599#issuecomment-490083406

However, after these changes my server does not start:

```
/Users/nathanh/Git/my-project/services/core/node_modules/yamljs/lib/Parser.js:270
        throw new ParseException('Unable to parse.', this.getRealCurrentLineNb() + 1, this.currentLine);
        ^
Error: Unable to parse.
npm ERR! code ELIFECYCLE
```




When i run my project I am getting:

```
\node_modules\yamljs\lib\Parser.js:404
            throw e;
            ^
Error: Unexpected characters near ",".
```
This is for  yamljs@0.3.0. 

The jasmine library explicitly included in the test folder is old, there are a few security issues like this one...

https://github.com/jasmine/jasmine/commit/3b77f3818846ea68bcdcd7b0b734b48cb1f69cc1#diff-3c2f8da4061d4489b0e5166eb05524c1R258

Is there a reason that is explicitly included?  Can it be included via dev dependencies and reference the latest?
My yml hierarchy is below. In paths, I ref schema of responses to component defined in openapi_components.yml 
`$ref: "openapi_components.yml#/schemas/xxxxxx"` 
And this is where yaml.js returns error. 
`throw new ParseException('Unable to parse.', this.getRealCurrentLineNb() + 1, this.currentLine);`
Anyone has any idea how to fix? Thanks.
```
openapi.yml 
openapi_paths.yml
openapi_components.yml
#121 escape pattern is wrong: unnecessarily adds single quotes to strings that contain ':'
But it shouldn't, at the colon is perfectly legal in YAML.

For example, this:
```
test::value: 5
```
Would get unnecessarily quoted:
```
'test::value': 5
```
The use case would be the [Hiera](https://puppet.com/docs/puppet/5.5/hiera_automatic.html#class-parameters) relies on the `::` to refer to the classes.
Check out this [runkit](https://runkit.com/embed/0lqpjqh8hb38) example


It doens't like brackets for arrays, even though its valid YAML. [checkout this online parser working](http://yaml-online-parser.appspot.com/?yaml=---%0Apaths%3A%0A++%2Finstance%2F%7Binstance_id%7D%3A%0A++++get%3A%0A++++++tags%3A+%5B%0A++++++++%22Instance%22%0A++++++%5D&type=json)

```yaml
---
paths:
  /instance/{instance_id}:
    get:
      tags: [
        "Instance"
      ]
```
## YAML
```
gray-numerical:
  600: &gray-n-600 "#343741"
  500: &gray-n-500 "#565656"
  400: &gray-n-400 "#808080"
  300: &gray-n-300 "#C0BFC0"

gray-string:
  six: &gray-s-600 "#343741"
  five: &gray-s-500 "#565656"
  four: &gray-s-400 "#808080"
  three: &gray-s-300 "#C0BFC0"

border:
  light-n: *gray-n-300
  medium-n: *gray-n-400
  dark-n: *gray-n-500
  light-s: *gray-s-300
  medium-s: *gray-s-400
  dark-s: *gray-s-500
```

## JSON output
```
"gray-numerical": {
  "300": "#C0BFC0",
  "400": "#808080",
  "500": "#565656",
  "600": "#343741"
},
"gray-string": {
  "six": "#343741",
  "five": "#565656",
  "four": "#808080",
  "three": "#C0BFC0"
},
"border": {
  "light-n": "#343741",
  "medium-n": "#343741",
  "dark-n": "#343741",
  "light-s": "#C0BFC0",
  "medium-s": "#808080",
  "dark-s": "#565656"
}
```

`border.light-n`, `border.medium-n`, and `border.dark-n` all compile incorrectly when they reference anchors within numerical keys.