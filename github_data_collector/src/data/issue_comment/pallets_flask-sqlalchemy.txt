I'm only set `SQLALCHEMY_BINDS` for ALL of my tables, and leave the `SQLALCHEMY_DATABASE_URI` as default `sqlite:///:memory:`. I use MySQL so all uri in BINDS are like `mysql+pymysql://host:post/database`. 

Then I found out I can't set `pool_size` in `SQLALCHEMY_ENGINE_OPTIONS`, or I will get an error:
```
TypeError: Invalid argument(s) 'pool_size' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
```

I check out the source code, in `flask_sqlalchemy.__init__.apply_driver_hacks`, I found that this is because the `SQLALCHEMY_DATABASE_URI` is leave to `None`, then the `sa_uri` from `get_uri` is `sqlite:///:memory:`, then the default `poolclass` will be set to `StaticPool`. This pool only hold one connection so I can't give it `pool_size` parameter. 

So if I want to set the `pool_size` I should also set `poolclass` to `sqlalchemy.pool.QueuePool`.

It used to bother me for a few days. Maybe the documentation should be more detailed. From current docs, I know the default `pool_size` is 5 (but actually the `pool_size` of mysql driver is 10 ...), so I think I can change it by passing the `pool_size` field to `options`. The `SQLALCHEMY_DATABASE_URI` is not required, but the docs don't mention what will happen if i leave it to default. And I don't know the default `poolclass` has been set to `StaticPool`, which is not what I expected.

- Flask-SQLAlchemy: 2.4.0    
- SQLAlchemy: 1.3.8 
Addresses #789 - the quickstart examples do what they say, this tries to clarify that `create_all` creating the SQLite database is coincidental and that in general it's a utility for creating tables in a database that already exists.
There are many examples of people struggling to work around this limitation in flask-sqlalchemy, including various issues and PRs like:

https://github.com/pallets/flask-sqlalchemy/issues/269 
https://github.com/pallets/flask-sqlalchemy/pull/250
https://github.com/pallets/flask-sqlalchemy/pull/629

This PR documents a simple solution to bi-directional compatibility.

Resolves: #690 
- 

- Switches flask-sqlalchemy to Azure pipelines
- Enables Mac and Windows CI builds
- Switches coverage to be similar to other pallets projects
Current documentation claims that:

```
To create the initial database, just import the db object from an interactive Python shell and run the SQLAlchemy.create_all() method to create the tables and database:

>>> from yourapplication import db
>>> db.create_all()

Boom, and there is your database.
```
But the `create_all()` function does not seem to create the database, only the tables. 


I would like to be able to specify different `SQLALCHEMY_ENGINE_OPTIONS` for every bind in the `SQLALCHEMY_BINDS` dict. 

It would be nice if `SQLALCHEMY_DATABASE_URI` + `SQLALCHEMY_ENGINE_OPTIONS` would form a configuration pair, and `SQLALCHEMY_BINDS` + `SQLALCHEMY_BINDS_ENGINE_OPTIONS`.

This would greatly help to set database-specific options when using multiple different types of databases (e.g. MySQL + SQLite + MSSQL)
Don't know if I'm alone on this one, but it seems to be there's not really a documentation for this one, apart from few haphazard and unsure snippets on some issues.

I personally do not want to move away from flask-sqlalchemy in infras where multiple bindings are needed. Does anyone else feel documenting this would be helpful?

EDIT:

I'm currently using a structure like this to provide different MetaDatas, but I'm not versed enough to take account what implications this solution may have in the long run:

```python
from flask_sqlalchemy.model import Model, DefaultMeta 
from sqlalchemy.ext.declarative import declarative_base
from src.app import DB as db


ReplicaBase = db.make_declarative_base(
    declarative_base(cls=Model, name="Model", metaclass=DefaultMeta))


class AsMaster(db.Model):
    __abstract__ = True
    __bind_key__ = "master"


class AsReplica(ReplicaBase):
    __abstract__ = True
    __bind_key__ = "replica"
```
flask-sqlalchemy support multiple connections through binds, but the documentation how to use raw connections is missing. 

The issue [#107](https://github.com/pallets/flask-sqlalchemy/issues/107) shows you could get the bind connection engine just using `db.get_engine(app, 'oh_my_bind').execute(...)`.

The is missing the documentation about this nice feature.
The create_engine method _requires_ the engine_opts parameter, thus causing pre 2.4 code to throw TypeError exception. The engine_opts parameter should be optional
Unable to only reflect a single table that I want to use with flask-sqlalchemy, there should be an option like db.reflect(bind='db2',only=['table1']) to only reflect a table from specific db.