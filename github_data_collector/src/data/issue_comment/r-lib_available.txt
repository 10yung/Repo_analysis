It impedes workflow to keep asking whether urbandictionary results should be shown in available()
ideally there would be an argument like showUrbanDictionary=c(getOption("session.showUD",NA),T,F) that asks the user for their preference on first call, saves it in option "session.showUD" and then uses that choice unless the argument showUrbanDictionary is explicitly set to T or F
so as per https://twitter.com/VizMonkey/status/1184058710198497280, it's possible for people to publish a package name that isn't identical to other package names, but is extremely similar. Perhaps that should be a check too?

It does add a bit of computational overhead that will slow things down, but a quick `stringdist::stringdist()` could be run between the proposed name and everything on CRAN or github or whatevs and if anything returns a string distance of 1, then that should be in its own section as "not quite your name but close".

What do you think?
The "sentiment" part of my results is not getting populated.

I poked around a wee bit and also notice this tidytext workaround that can probably get dismantled now:

https://github.com/ropenscilabs/available/blob/2a54276f8c1ebe3c77f907fecf90d626b181730a/R/sentiment.R#L6-L9

Indeed, changes in tidytext probably explain why sentiment analysis isn't working right now.
When I visit the README via CRAN, one or more of the screenshots are very large:

https://cran.r-project.org/web/packages/available/readme/README.html

The template for READMEs in usethis might have some good remedies, in particular the chunk option `out.width = "100%"`.
Prepare for release: 
 
* [x] `devtools::check()` 
* [x] `devtools::check_win_devel()` 
* [x] `rhub::check_for_cran()` 
* [x] `revdepcheck::revdep_check(num_workers = 4)` 
* [x] [Polish NEWS](https://style.tidyverse.org/news.html#news-release) 
* [x] Polish pkgdown reference index 
 
Submit to CRAN: 
 
* [x] `usethis::use_version('patch')` 
* [x] Update `cran-comments.md` 
* [x] `devtools::submit_cran()` 
* [x] Approve email 
 
Wait for CRAN... 
 
* [x] Accepted :tada: 
* [ ] `usethis::use_github_release()` 
* [ ] `usethis::use_dev_version()` 
* [ ] Tweet 

> available_on_github("reproducibleexample")
Error in open.connection(con, "rb") : HTTP error 502.

on mac, R 3.6.1
It would be great if we could turn off the check by `get_urban_data()` when we call `available()`. 

Something like : 

``` r 
get_urban_data <- function (name, warn_offensive = TRUE) {
    if (interactive() & warn_offensive) {
        cat("Urban Dictionary can contain potentially offensive results,\n  should they be included? [Y]es / [N]o:\n")
        result <- tryCatch(scan("", what = "character", quiet = TRUE, 
            nlines = 1), error = function(x) "N")
        if (!identical(toupper(result), "Y")) {
            return(NULL)
        }
    }
    term <- tryCatch(as.data.frame(udapi::get_term(name)), error = function(e) e)
    tags <- tryCatch(udapi::get_tags(name)$tags, error = function(e) e)
    structure(list(term, tags), class = "available_urban")
}

```

And then

``` r
available <- function (name, browse = getOption("available.browse", TRUE), warn_offensive = TRUE, ...) {
    res <- list(valid_package_name(name), available_on_cran(name, 
        ...), available_on_bioc(name, ...), available_on_github(name))
    terms <- name_to_search_terms(name)
    res <- c(res, unlist(recursive = FALSE, lapply(terms, function(term) {
        compact(list(get_bad_words(term), get_abbreviation(term), 
            get_wikipidia(term), get_wiktionary(term), get_urban_data(term, warn_offensive), 
            get_sentiment(term)))
    })))
    structure(res, class = "available_query", packagename = name, 
        browse = browse)
}
```

This is a start on tackling #51. It takes a list of US indigenous tribe names from US Bureau of Indian Affairs & alerts the user to avoid naming a new pkg with anything anything on that list. 

I'm a bit stuck on one detail, for example this will flag 'dispute' because it contains 'ute'. Not sure what the best way to handle this is. There are a lot of words that contain 'ute', as I discovered using https://www.dcode.fr/words-containing, so we might need a different matching approach here?
Using an Indigenous tribe's names for software packages is widely considered to be an inappropriate and offensive use of those names, e.g. https://twitter.com/SavvyOlogy/status/1138478892212150272 

In the spirit of the 'bad words' checking that this pkg does, I wonder if this pkg could be a good place to have a checker that looks to see if a proposed pkg name is a tribe's name and alert the developer to avoid it? 

Perhaps this could be a good list to check names with: https://www.federalregister.gov/d/2018-15679  and it's available in XML, but would still need a little tidying to be useful here. 

Several of my anthropologist colleagues have recommended this list (also available in JSON, XML and CSV): https://www.bia.gov/tribal-leaders-directory 
get_urban_data checks with the user if they want to include Urban dictionary as a source. Because:

> Urban Dictionary can contain potentially offensive results,
  should they be included? [Y]es / [N]o:

However I got asked 5 times! (Which I think it is too much..) Could that check be done before the `lappy` call and just once? 

I could submit a PR to change this: 
https://github.com/ropenscilabs/available/blob/57c04c32f14ade8eb72b568a434dbbe36c3c9365/R/available.R#L36-L46