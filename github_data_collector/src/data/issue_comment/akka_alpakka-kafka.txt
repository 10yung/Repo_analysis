Fixes the internal bookkeeping on the number of outstanding
commits in CommittingProducerSinkStageLogic when pass-through
messages are passed in.

<!--
# Pull Request Checklist

* [x] Have you read through the [contributor guidelines](./CONTRIBUTING.md)?
* [x] Have you signed the [Lightbend CLA](https://www.lightbend.com/contribute/cla)?
* [x] Have you updated the documentation?
* [x] Have you added tests for any changed functionality?
-->
## Purpose

Fixes the internal bookkeeping on the number of outstanding commits in CommittingProducerSinkStageLogic when pass-through messages are passed in.

## References

References #1021 

## Changes

Adds a couple of tests to demonstrate the issue, as well as (what appears to be) the trivial fix

### Versions used 

alpakka-kafka 2.0.0

### Expected Behavior

When using pass-through messages via `ProducerMessage.passThrough` in combination with `Producer.committableSink`, the incoming messages used to pass-through via `ProducerMessage.passThrough` should be correctly committed in the same way as if a "real" ProducerMessage was sent through to `Producer.committaleSink`.

### Actual Behavior

The internal outstanding commit count in CommittingProducerSinkStage is not maintained correctly when pass-through messages (without a `ProducerRecord`) are handled, which means that the general accounting for how many commits are outstanding breaks. This causes the general logic around commit handling to break, and results in a stream that doesn't end at all -- instead, it enters a limbo state where it doesn't complete. If an exception occurs within the stream, the error is not reported correctly (or at all), and the stream still does not complete.

The core underlying cause appears to be that the `awaitingCommitResult` field of `CommittingProducerSinkStageLogic` does not get incremented for pass-through messages that are processed, but it does get decremented in the commit callback for all processed messages (i.e. including pass-through messages). This results in `awaitingCommitResult` having a negative value. As all stream-ending logic is based on waiting until awaitingCommitResult reaches 0, and the awaitingCommitResult can never reach 0 once it is negative, the whole stream state is corrupted and the stream fails to complete.


### Reproducible Test Case

I'll add a PR that demonstrates the issue, as well as a simple fix.
The Java API `createCommittableOffsetBatch` requires a list of `CommittableOffset` where it should allow `Committable` (as the Scala API does in `apply`)
https://github.com/akka/alpakka-kafka/blob/086c6056dc3b3cdafd90a8ce4ed906fe298e6eb7/core/src/main/scala/akka/kafka/ConsumerMessage.scala#L184

https://github.com/akka/alpakka-kafka/blob/086c6056dc3b3cdafd90a8ce4ed906fe298e6eb7/core/src/main/scala/akka/kafka/ConsumerMessage.scala#L166

Changing this is almost binary-compatible as type parameter for `List` is not part of the message signature, and `Committable` is wider than `CommittableOffset`.
The tests for #1016 failed on Travis as the log grows too big. This contains a change to reduce logging.

The original author did not create a separate branch, to run the test on Travis I branched the PR into this.
## Purpose

Added a test case that shows sometime offsets are skipped during re-balance
when multiple consumers belong to same group

## References

References #382, #589, #946, #336 

## Changes

When the submitted test is run multiple times, we observed one failure approximately
every ten test runs on
OS: ubuntu 14.04LTS (6-cores),                                                  
java version: "1.8.0_144", Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode))

## Background Context

There was a discussion in #946 in which @seglo suggested to submit a test to demonstrate that offsets are skipped with a Spec test.
[my_test_run_loop_63510_77.txt.gz](https://github.com/akka/alpakka-kafka/files/4043306/my_test_run_loop_63510_77.txt.gz)

[my_test_run_loop.sh.txt](https://github.com/akka/alpakka-kafka/files/4043332/my_test_run_loop.sh.txt)


### Short description

When is a good time for Alpakka Kafka to go on and stop supporting Scala 2.11?

### Details

The last release of Scala 2.11 was 2017-11-09.

Many Alpakka connectors support Scala 2.11, 2.12 and 2.13. New connectors are built for Scala 2.12 and 2.13 only.
Akka 2.6 is not available for Scala 2.11.
Apache Kafka 2.5 will drop Scala 2.11.

https://github.com/akka/alpakka/issues/2055
# Contributors!

As Alpakka Kafka configured Apache's staging repository since Kafka 2.4.0-RC1 came out, you might have the non-final jar in your local or team artefact cache.

Please remove those files now that we reference the final client library.

To clear you local Ivy cache you may use
```
find .ivy2 -name "kafka-clients-2.4.0*" -exec rm {} \;
```

```
[info] akka.kafka.TransactionsSourceSpec *** ABORTED *** (1 minute, 4 seconds)
[info]   java.lang.RuntimeException: java.util.concurrent.TimeoutException
[info]   at akka.kafka.testkit.internal.KafkaContainerCluster.start(KafkaContainerCluster.java:120)
[info]   at akka.kafka.testkit.internal.TestcontainersKafka$Spec.startKafka(TestcontainersKafka.scala:65)
[info]   at akka.kafka.testkit.internal.TestcontainersKafka$Spec.startKafka$(TestcontainersKafka.scala:53)
[info]   at akka.kafka.TransactionsSourceSpec.startKafka(TransactionsSourceSpec.scala:23)
[info]   at akka.kafka.testkit.scaladsl.TestcontainersKafkaPerClassLike.setUp(TestcontainersKafkaPerClassLike.scala:16)
[info]   at akka.kafka.testkit.scaladsl.TestcontainersKafkaPerClassLike.setUp$(TestcontainersKafkaPerClassLike.scala:15)
[info]   at akka.kafka.TransactionsSourceSpec.setUp(TransactionsSourceSpec.scala:23)
[info]   at akka.kafka.testkit.internal.TestFrameworkInterface$Scalatest.beforeAll(TestFrameworkInterface.scala:21)
[info]   at akka.kafka.testkit.internal.TestFrameworkInterface$Scalatest.beforeAll$(TestFrameworkInterface.scala:20)
[info]   at akka.kafka.testkit.scaladsl.ScalatestKafkaSpec.beforeAll(ScalatestKafkaSpec.scala:11)
[info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:212)
[info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
[info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[info]   at akka.kafka.scaladsl.SpecBase.org$scalatest$WordSpecLike$$super$run(SpecBase.scala:15)
[info]   at org.scalatest.WordSpecLike.$anonfun$run$1(WordSpecLike.scala:1189)
[info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:518)
[info]   at org.scalatest.WordSpecLike.run(WordSpecLike.scala:1189)
[info]   at org.scalatest.WordSpecLike.run$(WordSpecLike.scala:1187)
[info]   at akka.kafka.scaladsl.SpecBase.run(SpecBase.scala:15)
[info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:317)
[info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:510)
[info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
[info]   at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[info]   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[info]   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[info]   at java.lang.Thread.run(Thread.java:748)
[info]   Cause: java.util.concurrent.TimeoutException:
[info]   at java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1784)
[info]   at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1928)
[info]   at akka.kafka.testkit.internal.KafkaContainerCluster.start(KafkaContainerCluster.java:118)
[info]   at akka.kafka.testkit.internal.TestcontainersKafka$Spec.startKafka(TestcontainersKafka.scala:65)
[info]   at akka.kafka.testkit.internal.TestcontainersKafka$Spec.startKafka$(TestcontainersKafka.scala:53)
[info]   at akka.kafka.TransactionsSourceSpec.startKafka(TransactionsSourceSpec.scala:23)
[info]   at akka.kafka.testkit.scaladsl.TestcontainersKafkaPerClassLike.setUp(TestcontainersKafkaPerClassLike.scala:16)
[info]   at akka.kafka.testkit.scaladsl.TestcontainersKafkaPerClassLike.setUp$(TestcontainersKafkaPerClassLike.scala:15)
[info]   at akka.kafka.TransactionsSourceSpec.setUp(TransactionsSourceSpec.scala:23)
[info]   at akka.kafka.testkit.internal.TestFrameworkInterface$Scalatest.beforeAll(TestFrameworkInterface.scala:21)
[info]   at akka.kafka.testkit.internal.TestFrameworkInterface$Scalatest.beforeAll$(TestFrameworkInterface.scala:20)
[info]   at akka.kafka.testkit.scaladsl.ScalatestKafkaSpec.beforeAll(ScalatestKafkaSpec.scala:11)
[info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:212)
[info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
[info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[info]   at akka.kafka.scaladsl.SpecBase.org$scalatest$WordSpecLike$$super$run(SpecBase.scala:15)
[info]   at org.scalatest.WordSpecLike.$anonfun$run$1(WordSpecLike.scala:1189)
[info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:518)
[info]   at org.scalatest.WordSpecLike.run(WordSpecLike.scala:1189)
[info]   at org.scalatest.WordSpecLike.run$(WordSpecLike.scala:1187)
[info]   at akka.kafka.scaladsl.SpecBase.run(SpecBase.scala:15)
[info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:317)
[info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:510)
[info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:304)
[info]   at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[info]   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[info]   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[info]   at java.lang.Thread.run(Thread.java:748)
```

https://travis-ci.org/akka/alpakka-kafka/jobs/625707413#L402

### Versions used 
akka-stream-kafka 1.1.0

tested with embedded-kafka 2.3.0 and local kafka container

### Expected Behavior
When stopping a transactional source + flow, the producer should be closed after finishing last transaction

### Actual Behavior
When stopping a transactional source+flow, the producer is closed 30s after the transaction is finished


### Relevant logs
We can see in the relevant logs that the transaction is finished at 14:10:36 with last log been : 
TransactionManager : `Transition from state ABORTING_TRANSACTION to READY`
and we have 30s before 
Sender : `Shutdown of Kafka producer I/O thread has completed.`

[logs](https://github.com/akka/alpakka-kafka/files/3901936/producer-30s-shutdown.log)


P.S maybe it's related to kafka client ?