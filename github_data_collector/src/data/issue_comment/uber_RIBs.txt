
<!--
Thank you for contributing to RIBs. Before pressing the "Create Pull Request" button, please consider the following points.
Feel free to remove any irrelevant parts that you know are not related to the issue.
Any HTML comment like this will be stripped when rendering markdown, no need to delete them.
-->

<!-- Please give a description about what and why you are contributing, even if it's trivial. -->
**Description**:
* If you download the project and try to build it or any of the tutorials you won't be able to do because of RxSwift.
* In `ViewControllable` there is a property `uiviewController` which had been renamed to `uiViewController` in the entire project.

<!-- Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those. -->
**Related issue(s)**:

<!-- Please include a reasonable set of unit tests if you contribute new code or change an existing one. -->

Replace the deprecated gradle dependency handlers i.e. `compile` and `testCompile` with `implementation` and `testImplementation`.

How to setup RIB live tree viewer. is it open source ?
reference : 
https://www.youtube.com/watch?v=FfwZSk6VRVY&t=536s

at 30:03 . Thanks. 
As documentation mentioned that a RIB can be viewable or viewless, it is found that viewable RIB must be associated with UIViewController. However, I think it is not possible and most viewable RIB should be UIView-based as RIBs framework encouraging us to make reusable and micro components.

As the below image shown, are those viewable RIBs (`Confirmation, Location Refinements, Menu`) UIViewController based?
![image](https://user-images.githubusercontent.com/2561942/70305294-02f77700-183f-11ea-9de7-971572cc3f55.png)

When we start a new project, are RootActivity and RootRib generated automatically somehow or we should take the boilerplate in toturial1 ?
<!--
Thank you for contributing to RIBs. Before pressing the "Create Pull Request" button, please consider the following points.
Feel free to remove any irrelevant parts that you know are not related to the issue.
Any HTML comment like this will be stripped when rendering markdown, no need to delete them.
-->

<!-- Please give a description about what and why you are contributing, even if it's trivial. -->
**Description**:
Add SPM support

<!-- Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those. -->
**Related issue(s)**: #358

<!-- Please include a reasonable set of unit tests if you contribute new code or change an existing one. -->

It will be good to have the support of Swift Package Manager
<!--
Thank you for contributing to RIBs. Before pressing the "Create Pull Request" button, please consider the following points.
Feel free to remove any irrelevant parts that you know are not related to the issue.
Any HTML comment like this will be stripped when rendering markdown, no need to delete them.
-->

<!-- Please give a description about what and why you are contributing, even if it's trivial. -->
**Description**:
There's a conflict between _tutorial1_ and _RIB_ because they depend on two different versions of RxSwift.
_RIBs_ pod has a dependency on `RxSwift ~> 5.0` while _tutorial1_ has a dependency on `RxCocoa ~> 4.0.0` that has RxSwift as subdependecy.
<!-- Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those. -->

<!-- Please include a reasonable set of unit tests if you contribute new code or change an existing one. -->

Hi!

Suppose we have this hierarchy:

`NewsRIB (Headless) -> NewsListRIB -> NewsDetailsRIB -> NewsCommentsRIB`

We need to push the `NewsDetailsRIB` from the `NewsListRIB` and the `NewsCommentsRIB` from the `NewsDetailsRIB`.

What is the right approach about the routers?

A. Each RIB's routers are responsible to implement methods to push their related RIB. 
e.g. : the `NewsListRIB` router should implement an `attachNewsDetailsRIB()` method.

B. The headless `NewsRIB` should implement all methods, triggered by its interactor listening to events from other RIBS