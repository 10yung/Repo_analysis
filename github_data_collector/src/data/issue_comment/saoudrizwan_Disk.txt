There's no ability to copy file at one path to another. This method would be helpful 
It would be good to have an ability to pass quality parameter when saving jpeg images.

Or probably global variable like:
`Disk.jpegCompressionQuality = 0.95`

This would save half of disk space
[ZippyJSON](https://github.com/michaeleisel/ZippyJSON/) (a framework that I created), is a 3-4x faster version of JSONDecoder. Using it could be a big speed boost for consumers. However, the customization provided by https://github.com/saoudrizwan/Disk/pull/28 doesn't allow for anything besides JSONDecoder (or a subclass of it). This makes it difficult to use ZippyJSON because alternate implementations are best not to subclass it to ensure good performance. Here are some possibilities:
- Allow users to pass in anything that implements TopLevelDecoder, and not just JSONDecoder
- Mention performance wins from using a custom implementation like ZippyJSON
- Simply use ZippyJSON behind the scenes by default
I love `Disk`! I'd like to use this with my existing API, but I need the url where the file was stored. No worries if this doesn't go in, but it would be nice for me to have this.
Is there a way that I could add an array of strings for one key, and leave the other 2 as non-array strings? Thanks

Currently I have this (Interests is an array of strings):
`let message = Message(interests: interests, title: inputedTitle, body: inputedBody)   //Cannot convert value of type 'Array<Any>' to expected argument type 'String'`
Added watchOS, tvOS, macOS support.

Merged https://github.com/saoudrizwan/Disk/pull/66
Merged https://github.com/saoudrizwan/Disk/pull/53
The line `let url = try createURL(for: path, in: directory)` was in a try catch block, such that if an error was thrown inside `createURL(...)`, it would be caught in the `catch` block, only to be thrown again.

The same issue was the case for the error thrown if `FileManager.default.fileExists(atPath: url.path)` returned true. It would throw the error, then catch it, then throw it again.

Seeing how there was no extra logic that was performed by the catch block, there was no reason to have that catch block.

This update makes changes so that the redundant catch and throw is avoided.
I added the ability to retrieve an array of structs from a directory, where every struct was saved into a separate file (similar to retrieve of `[UIImage]` and `[Data]`).
If the `path` in `retrieve()` points to a directory and the `type` is `[T]`, retrieve will iterate over the files inside the directory and tries to decode every file as `T`.
If the `path` points to a file, the function is the same as before.

I am not sure if this is the most intuitive implementation for the given problem.
The are some cases which are not covered in my implementation, e.g. multiple files with arrays inside the same directory would be ignored.

I would be happy about feedback!
Use NS_ERROR_ENUM and NSErrorDomain in Objective-C, which works nicely in NSError and as Swift Error. Errors can now be catched as `catch DiskError.noFileFound` without introducing a source breaking change.

I updated the sample project to take advantage of the change.
Would it be possible to add tvOS support?