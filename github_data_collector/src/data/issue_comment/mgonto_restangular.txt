The Delete method supports body in Angular 7, window.fetch and XHR.
I see no reason why it cannot be supported in Restangular out of the box without tricks with interceptors.

Please see the discussion in similar issue in angular repository:
https://github.com/angular/angular/issues/19438#issuecomment-441511056
> Conform RFC 8231 Sec 4.3.5:
https://tools.ietf.org/html/rfc7231#section-4.3.5
"A payload within a DELETE request message has no defined semantics; sending a payload body on a DELETE request might cause some existing implementations to reject the request" 

https://github.com/angular/angular/issues/19438#issuecomment-377609661
> Angular is a medium, not the API itself. If the API doesn't forbid it, Angular shouldn't make the decision for the dev. If someone is developing full stack, they have sufficient control over the REST handling to properly handle DELETES with payload.

Since this repository didn't see any update in 2 years – not even merging simple PRs like this one https://github.com/mgonto/restangular/pull/1489 – is it fair to say that it is unmaintained?

i have model called taskToStaff contains ID, taskID, StaffID

I need to delete documents from taskToStaff model where tskID is equal to the ID that i given.

curruntlly i test this but does not work.

this.TaskToStaffsDataSource = Restangular.service("taskToStaffs");
this.TaskToStaffsDataSource.one(taskID).removeAll().then(() =>{});

I'm trying to intercept requests based on their headers and I see that the headers object in addFullRequestInterceptor is empty:
```JS
Restangular.addFullRequestInterceptor(function(element, operation, what, url, headers, params, httpConfig ) {
        if(!headers['access_token']) {
            httpConfig.timeOut = $q.resolve('token is absent');
        }

        return {
            element: element,
            headers: headers,
            params: params,
            httpConfig: httpConfig
        };
    });
```

On the other hand the original angular $httpProvider has all headers as necessary:
```JS
$httpProvider.interceptors.push(function ($q) {
            return {
                request: function(config) {
                    if(!config.headers['access_token']) {
                        return $q.reject(config);
                    }

                    return config || $q.when(config);
                }
            };
        });
```
Hi, 
Thanks for this wornderful tool , its really very hepful . i am novice for this tools .my sincere  apologies if i have raised a very basic query . have gone throught eh existing issues and help file  couldn't get the answer.
My query is 
i want to get a group by count from the server Eg: i am expecting the following output  

'pr': 250
'pj': 500

for this command :

Program.getList({ group:  'type'}).then(function(resp){

    console.log(resp)


})

i dont want to get all the 750 record in the client side and do a group by .

Cheers...
I know it sends a put request. But does it send the restangular object in json ?  

What should i do to send the request body in json format.
The data in server: 
` [{"id":1,"name":"myName1","head":"6E02"},{"id":2,"name":"myName2","head":"6E03"}]`
when I use getList()，I get something like this: `[{"id":1,"name":"myName1","route":"dtTypeList","reqParams":null,"restangularized":true,"fromServer":true,"parentResource":null,"restangularCollection":false},{"id":2,"name":"myName2","route":"dtTypeList","reqParams":null,"restangularized":true,"fromServer":true,"parentResource":null,"restangularCollection":false}]`
It loss 'head' property data. 
I don't know how to fix this problem. 

restangular v1.6.1 & AngularJS v1.6.7
Added support for getMethodOverride in getList function
Fixed support for getMethodOverride, where query params should be send as data in the POST body, since it's an override to post
Added unittests
Should restangular make the etag it receives a strong etag when it sends it as `if-None-Match` http header 
(i.e strip the `W/` from received etag when it uses it as `if-None-Match`)

MDN says that <etag_value>

> may be prefixed by `W/` to indicate that the weak comparison algorithm should be used (This is useless with `If-None-Match` as it only uses that algorithm).
  
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match

for more context: https://stackoverflow.com/questions/47995118/nginx-doesnt-match-weak-etags

I'm trying to handle weak etags problem with nginx
If I send a weak etag (with `W/"<etag>"`), nginx will not recognize the etag, and will send `200 OK` http response
But If I send it as strong etag (without `W/"<etag>"`) then nginx will respond correctly with `304 Not Modified` response


