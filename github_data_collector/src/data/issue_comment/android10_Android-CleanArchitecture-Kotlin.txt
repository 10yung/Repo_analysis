
When double tapping one of the movie item and coming back, the picture disappear.
[Here is a video of it](https://youtu.be/nSL0Kg1cJ7s)
Fix issue #46 and add support for orientation change to other activity
What is the best approach? 
```
// Only expose livedata
public class MyViewModel extends ViewModel {
    private MutableLiveData<List<User>> users = new MutableLiveData();
    public void loadUsers() {
        // Do an asynchronous operation to fetch users.
        users.postValue(/* ---- userList  --- */);
    }
}
```

```
// Expose livedata and instance variable userList
public class MyViewModel extends ViewModel {
    private MutableLiveData<List<User>> users = new MutableLiveData();
    private List<User> userList;
   
   //Expose already fetched list 
    public List<User> getUserList() {
     return userList;
    }

    public void loadUsers() {
        // Do an asynchronous operation to fetch users.
        this.userList = userList;
        users.postValue(/* ---- userList  --- */);
    }
}
```
First of all, thank you so much for this awesome repository.

**I have a question about dependency injection:**
You inject MovieDetailsAnimator
`@Inject lateinit var movieDetailsAnimator: MovieDetailsAnimator` 
at line 60, MovieDetailsFragment.kt.

And MovieDetailsAnimator is constructed through 
`class MovieDetailsAnimator @Inject constructor()`

Wouldn't it be better if MovieDetailsAnimator was constructed with @Singleton annotation? Something like:
`@Singleton class MovieDetailsAnimator @Inject constructor()` 
It seems like there is no point on getting a new instance of MovieDetailsAnimator for every fragment.

Thank you! üëç 
```
abstract class UseCase<out Type, in Params> where Type : Any {

    abstract suspend fun run(params: Params): Either<Failure, Type>

    operator fun invoke(params: Params, onResult: (Either<Failure, Type>) -> Unit = {}) {
        val job = async(CommonPool) { run(params) }
        launch(UI) { onResult(job.await()) }
    }

    class None
}
```

I've somewhat confused with this. Does this abstract class use case violate the domain layer? Usecase should be dumb and doesn't know the coroutines?

cmiiw @android10 
I heard about the Navigation Component part of the Android Jetpack.
Is it worth to use it ? and if yes, how could we apply it with this architecture because it slightly change the way we navigate between screens.
In meanwhile, I would love to contribute to this repo and refactor current gradle into Kotlin-DSL. But, if there's anyone already refactor it into Kotlin-DSL might want to do a PR here

* https://github.com/andromax-gits-indonesia-org/gradle-kotlin-dsl-migration-guide
* https://github.com/mochadwi/android-social-app/tree/master/buildSrc/src/main/kotlin
Any idea that how to use this architecture to be able to observe changes in database or firebase etc.

Could be modified or create a new use case class

Greetings
Please implement Paging library Using latest Jetpack