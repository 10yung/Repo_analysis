# Preface

This one is a bit of a doozy and I can't tell if it's a rustc issue or a cbindgen issue or both, so I'm going to cross-report them so both projects can be aware.

I don't have a minimal reproduction, but it is easily reproducible in my repo.

Repo: https://github.com/BVE-Reborn/bve-reborn
Working Commit: [`52b3ec6`](https://github.com/BVE-Reborn/bve-reborn/commit/52b3ec6c232198e7585909f20404b9ee5323bdab)
Failing Commit: [`7799c04`](https://github.com/BVE-Reborn/bve-reborn/commit/7799c04340edefcd52c51023e1271c0bb67d5ad1)

The only difference is the addition of the crate type of `cdylib`. (`rlib` is there, but it reproduces on my next commit which removed it)

# System Info

`Xubuntu 18.04`

Rust and Cargo locked to `nightly-2020-01-16`
rustc: `rustc 1.42.0-nightly (3291ae339 2020-01-15)`
cargo: `cargo 1.42.0-nightly (ad3dbe10e 2020-01-13)`

CBindgen latest, compiled on the same nightly toolchain:
`cbindgen 0.12.2`

# Repro

The rustc command is the exact command cbindgen runs to get macro expanded data.

This all takes place in the root of my repo.

```
cargo build
cargo rustc --lib --manifest-path bve-native/Cargo.toml  -p "bve-native:0.0.0-Placeholder" "--verbose" -- -Z unstable-options --pretty=expanded 
```

Both succeed as expected. However if you call cbindgen it fails, and the rustc no longer outputs anything at all.

```
# Succeeds
cargo build

# Fails citing an issue with compiling
# Occasionally must be run twice
cbindgen bve-native/ -c bve-native/cbindgen.toml -v

# Returns zero, but outputs nothing.
cargo rustc --lib --manifest-path bve-native/Cargo.toml  -p "bve-native:0.0.0-Placeholder" "--verbose" -- -Z unstable-options --pretty=expanded 
# You can call ^ as many times as you want, it will always fail
```

The problem goes away when you `cargo clean` and reappears by running cbindgen again.

# Comments

I have no idea what or who is causing this issue.

I feel like even if cbindgen is ultimately the "cause" of the bug, the expansion shouldn't be able to fail and not output anything without erroring (and returning `!= 0`) in some way.

# Notes:

Possibly relevant cbindgen code: https://github.com/eqrion/cbindgen/blob/master/src/bindgen/cargo/cargo_expand.rs#L129
rustc issue: https://github.com/rust-lang/rust/issues/68333

Thanks!
This should fix #442

Please tell me if there anything I can do better :)
The test is a reduced version of https://github.com/gfx-rs/wgpu/pull/440#issuecomment-573284991 . It currently fails. cc @emilio 
Hi,

When trying to generate bindings for this code:

```rust

use serde::{Deserialize, Serialize};

#[repr(C)]
#[derive(Serialize, Deserialize)]
pub struct Vec3f32 {
    x: f32,
    y: f32,
    z: f32,
}

#[no_mangle]
pub extern "C" fn f(x: *const Vec3f32) -> f32 {
    x.x
}
```

with a `Cargo.toml` containing 

```toml
[dependencies]
serde = { version = "1.0", features = ["derive"] }
```

and a `cbindgen.toml`:
```toml
language = "C"

[parse]
parse_deps = true
```

The following panic is produced 

```
WARN: Parsing crate `serde_derive`: can't find lib.rs with `cargo metadata`.
thread 'main' panicked at 'IntoIter is not generic', /Users/rb/.cargo/registry/src/github.com-1ecc6299db9ec823/cbindgen-0.12.1/src/bindgen/ir/opaque.rs:107:9
stack backtrace:
   0: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt
   1: core::fmt::write
   2: std::io::Write::write_fmt
   3: std::panicking::default_hook::{{closure}}
   4: std::panicking::default_hook
   5: std::panicking::rust_panic_with_hook
   6: std::panicking::continue_panic_fmt
   7: std::panicking::begin_panic_fmt
   8: <cbindgen::bindgen::ir::opaque::OpaqueItem as cbindgen::bindgen::ir::item::Item>::instantiate_monomorph
   9: cbindgen::bindgen::ir::ty::Type::add_monomorphs
  10: cbindgen::bindgen::library::Library::generate
  11: cbindgen::bindgen::builder::Builder::generate
  12: cbindgen::main
  13: std::rt::lang_start::{{closure}}
  14: std::panicking::try::do_call
  15: __rust_maybe_catch_panic
  16: std::rt::lang_start_internal
  17: main
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
```

[**Link to project**](https://github.com/ralfbiedert/rust_issues/tree/cbindgen_no_gen) that should reproduce the issue. I am running `cbindgen 0.12.1` and `rustc 1.40.0 (73528e339 2019-12-16)`.

... hah, and I just realized I filed a very similar issue #195 that was related to #203, however, both of which are closed now. Since this time the problem is related to specifying `parse_deps = true` I'm not sure if they are after all related or not.

Inputs
---

```rust
#[no_mangle]
#[doc = "a \n b"]
pub extern "C" fn example_a() {}
```

and

```rust
#[no_mangle]
#[doc = "a \n\n b"]
pub extern "C" fn example_b() {}
```

Rendered rustdoc
---
[rustdoc/the doc attribute](https://doc.rust-lang.org/rustdoc/the-doc-attribute.html)

![圖片](https://user-images.githubusercontent.com/5238484/71337544-22a0d600-2587-11ea-9905-b7483eb65788.png)

![圖片](https://user-images.githubusercontent.com/5238484/71337575-3f3d0e00-2587-11ea-9504-f38aad154490.png)

Actual generated header
---

```cpp
///a
 b
void example_a();
```

```cpp
///a

 b
void example_b();
```

Expected generated header
---

```cpp
///a b
void example_a();
```

```cpp
///a
///
///b
void example_b();
```

This happens when I'm trying to generate multi-line comments with macro. Looks like ([code](https://github.com/eqrion/cbindgen/blob/16fe3ec142653277d5405d9a6d25914d925c9c3c/src/bindgen/utilities.rs#L252)) we simply use value in single `doc` attribute directly without any modification (like rustdoc does).

BTW, I'm happy to help this out :)
We have a generic type being exposed to C. Mangle path adds an underscore between the types. Is it possible to configure this, as it messes with the project's code style :)
Looking at the code this is actually probably pretty easy. We buffer up literally everything until the end, so we should in theory be able to emit just the types into another file. Ideally the "full" header would just include the types header in this mode.

Specifically you would want a version of write_to_file that takes two files and splits this general item-processing part across the two:

https://github.com/eqrion/cbindgen/blob/9b5dd80d84cc4b0e0b696383b3d9b314d752bcbd/src/bindgen/bindings.rs#L226-L235

And then invoke it here:

https://github.com/eqrion/cbindgen/blob/b8140911ee843af93e6314fee72be96e30df63a6/src/main.rs#L255-L267
Split off from #431 

Right now, we don't generate structs for `#[repr(packed(n))]` structures because it appears that there is a fair amount of difficulty generating the correct field alignments due to disparities between the semantics of GCC's `__attribute__((aligned(n)))` with `__attribute__((packed))` and Rust's `#[repr(packed(n))]`. The below is a quote from #431 describing the problem:

<hr>

If I'm reading [this](https://doc.rust-lang.org/nightly/reference/type-layout.html#the-alignment-modifiers) right, it turns out that `#[repr(packed(n))]` does not really have a simple native C representation. In Rust, `#[repr(packed(n))]` indicates that the fields should have the **smaller** of `n` and `std::mem::align_of<field_type>()` as their alignment. While it is true that in C you can specify individual field alignments like so:

```
struct foo {
  uint64_t foo1 __attribute__((aligned(32)));
  uint32_t foo2 __attribute__((aligned(32)));
  uint16_t foo3 __attribute__((aligned(32)));
  uint8_t foo4 __attribute__((aligned(32)));
  bool foo5 __attribute__((aligned(32)));
} __attribute__((packed));
```

The issue is that, in Rust, the following struct:

```
#[repr(C, packed(32))]
struct Foo {
  foo1: u64;
  foo2: u32;
  foo3: u16;
  foo4: u8;
  foo5: bool;
}
```

Should actually be represented as (depending on your architecture):

```
struct foo {
  uint64_t foo1 __attribute__((aligned(8)));
  uint32_t foo2 __attribute__((aligned(4)));
  uint16_t foo3 __attribute__((aligned(2)));
  uint8_t foo4 __attribute__((aligned(1)));
  bool foo5 __attribute__((aligned(1)));
} __attribute__((packed));
```

And it's not clear to me how we can determine what the natural alignment of the constituent types is. And unfortunately, this is critical to making sure that C and Rust code can interoperate with packed structures. It's a bit unfortunate that Rust decided to have different semantics to GCC's alignment extensions. The extra kicker is that (AFAIK) `std::mem::align_of::<>()` depends on your architecture, so we'd probably have to do lots of extra work to generate the right alignment for each architecture rust supports.

And it's important to note that getting this wrong will almost certainly result in pretty hideous crashes.
Spun off from #431.

Since https://github.com/rust-lang/rust/pull/61229, aligned enums have a stable representation and thus we should represent them correctly when generating non-opaque versions.
Closes #277