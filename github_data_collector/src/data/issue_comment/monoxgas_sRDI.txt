On the short list of things the loading process still needs:

- [ ]  TLS callback initialization
- [ ] Late imports (a fork of sRDI already has this, just needs merging)
Environment: Win10  1709
DLL: C:\Windows\SysWOW64\user32.dll

1. I firstly use command `python Python\ConvertToShellcode.py user32.dll` convert user32.dll to user32.bin.
2. Then I change the code in Native\Loader.cpp to call API MessageBoxA after loading the user32.dll and compile the Native project using Visual Studio 2015 Debug x86.
```
	// Only set the first page to RWX
	// This is should sufficiently cover the sRDI shellcode up top
	if (VirtualProtect(finalShellcode, sysInfo.dwPageSize, PAGE_EXECUTE_READWRITE, &dwOldProtect1)) {
		RDI rdi = (RDI)(finalShellcode);

		printf("[+] Executing RDI\n");
 		UINT_PTR hLoadedDLL = rdi(); // Excute DLL

		free(finalShellcode); // Free the RDI blob. We no longer need it.

		/*Function exportedFunction = (Function)GetProcAddressR(hLoadedDLL, "SayGoodbye");
		if (exportedFunction) {
			printf("[+] Calling exported functon\n");
			exportedFunction();
		}*/
		MyMessageBoxA exportedFunction = (MyMessageBoxA)GetProcAddressR(hLoadedDLL, "MessageBoxA");
		if (exportedFunction) {
			printf("[+] Calling exported functon\n");
			exportedFunction(0, "Hello", "user32.dll message", 1);
		}
	}


----

typedef int (WINAPI *MyMessageBoxA)(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
```
3. Then use command `Native.exe user32.bin` to load the shellcode.
The exe crashed and report a error : 

> 0x7774CCC5 (ntdll.dll) (located at Native.exe) Exception: 0xC0000005: Access violation reading location 0x00000008.

I ensure that the GetProcAddressR return the correct address of MessageBoxA.

I found that the **0x7774CCC5** belongs to ntdll.dll!RtlAllocateHeap function:
![image](https://user-images.githubusercontent.com/2485043/42331896-31f87a56-80a9-11e8-909f-f47f30d3052f.png)

Do you have comments that which possible cause this problem? My conclusion is that reflective loading a DLL written by ourselves works fine but loading a system dll(ntdll, user32..) will not work. It seems that there is something the loader doesn't handle when load the system dll into memory.



Is it currently possible to execute by ordinal after load? This would be a pretty neat feature combined with Cobalt Strike/DanderSpiritz, etc.

[UPDATE]

Just hit me that both of those have export names, would still be a nice feature though.