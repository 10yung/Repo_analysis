(java_env) C:\Users\b.kurmanov>jupyter notebook
Traceback (most recent call last):
  File "C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\Scripts\jupyter-notebook-script.py", line 10, in <module>
    sys.exit(main())
  File "C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\lib\site-packages\jupyter_core\application.py", line 267, in launch_instance
    return super(JupyterApp, cls).launch_instance(argv=argv, **kwargs)
  File "C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\lib\site-packages\traitlets\config\application.py", line 663, in launch_instance
    app.initialize(argv)
  File "<C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\lib\site-packages\decorator.py:decorator-gen-7>", line 2, in initialize
  File "C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\lib\site-packages\traitlets\config\application.py", line 87, in catch_config_error
    return method(app, *args, **kwargs)
  File "C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\lib\site-packages\notebook\notebookapp.py", line 1679, in initialize
    self.init_webapp()
  File "C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\lib\site-packages\notebook\notebookapp.py", line 1442, in init_webapp
    self.http_server.listen(port, self.ip)
  File "C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\lib\site-packages\tornado\tcpserver.py", line 152, in listen
    self.add_sockets(sockets)
  File "C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\lib\site-packages\tornado\tcpserver.py", line 165, in add_sockets
    self._handlers[sock.fileno()] = add_accept_handler(
  File "C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\lib\site-packages\tornado\netutil.py", line 279, in add_accept_handler
    io_loop.add_handler(sock, accept_handler, IOLoop.READ)
  File "C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\lib\site-packages\tornado\platform\asyncio.py", line 99, in add_handler
    self.asyncio_loop.add_reader(fd, self._handle_events, fd, IOLoop.READ)
  File "C:\Users\b.kurmanov\AppData\Local\Continuum\anaconda3\envs\java_env\lib\asyncio\events.py", line 501, in add_reader
    raise NotImplementedError
NotImplementedError


How can I fix it?
Using scijava in jupyterlab and it has worked well thus far but when I try to do an import java.util.Scanner I get the following? Did I miss something, is importing outside the scope of scijava?
```
[ERROR] null
java.util.NoSuchElementException
	at java.util.Scanner.throwFor(Scanner.java:862)
	at java.util.Scanner.next(Scanner.java:1485)
	at java.util.Scanner.nextInt(Scanner.java:2117)
	at java.util.Scanner.nextInt(Scanner.java:2076)
	at java_util_Scanner$nextInt.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:117)
	at Test.main(Script3.groovy:9)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1218)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1027)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:815)
	at Test.invokeMethod(Script3.groovy)
	at org.codehaus.groovy.runtime.InvokerHelper$1.run(InvokerHelper.java:452)
	at org.scijava.plugins.scripting.groovy.GroovyScriptEngine.eval(GroovyScriptEngine.java:303)
	at org.scijava.plugins.scripting.groovy.GroovyScriptEngine.eval(GroovyScriptEngine.java:122)
	at javax.script.AbstractScriptEngine.eval(AbstractScriptEngine.java:264)
	at org.scijava.script.ScriptModule.run(ScriptModule.java:160)
	at org.scijava.module.ModuleRunner.run(ModuleRunner.java:168)
	at org.scijava.jupyter.kernel.evaluator.Worker.run(Worker.java:108)
	at org.scijava.thread.DefaultThreadService$2.run(DefaultThreadService.java:221)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
```
I have tried to install scijava using  "conda install  -c conda-forge scijava-jupyter-kernel" on three macs running mojave. The machines are two imacs and a macbook pro. On each mojave machine I  attempted the install using a  newly installed, updated anaconda. I've installed scijava on two macbook pros running sierra without issue. Also installed successfully on a linux mint 19 machine.  All three mojave installs fail consistently, see attached terminal output.
![image](https://user-images.githubusercontent.com/8423191/50345884-8d47ad80-04fe-11e9-8ac5-63e7d25e6a94.png)
Thanks,


Trying to launch a version of this kernel locally using `repo2docker` gives an error trying to find the OpenJDK package: 

```
E: Unable to locate package openjdk-11-jdk
Removing intermediate container 331568536f3c
The command '/bin/sh -c apt-get update && apt-get install --yes --no-install-recommends openjdk-11-jdk maven && apt-get purge && apt-get clean && rm -rf /var/lib/apt/lists/*' returned a non-zero code: 100
```
Any plans for Java 9/JShell support?
Attempting to run Deeplearning4j but it appears that required binaries that are pulled in by classifiers by transient dependencies are either not downloaded or made available on the classpath. 

Sometimes, maven dependencies with classifiers or platform-specific binaries are not loaded properly when using a dependency manager other than the one included with maven. Happy to help here.

To reproduce, try the following:

```
#@dependency(group="org.nd4j", module="nd4j-cuda-8.0-platform", version="0.9.1")
#@dependency(group="org.deeplearning4j", module="deeplearning4j-zoo", version="0.9.1")
```
then
```
#!scala
import org.deeplearning4j.zoo.model.VGG16
import org.deeplearning4j.zoo._


val zooModel = new VGG16()
val net = zooModel.initPretrained(PretrainedType.IMAGENET)
```

You will get the error:
```
Caused by: org.nd4j.linalg.factory.Nd4jBackend$NoAvailableBackendException: Please ensure that you have an nd4j backend on your classpath. Please see: http://nd4j.org/getstarted.html
	at org.nd4j.linalg.factory.Nd4jBackend.load(Nd4jBackend.java:258)
	at org.nd4j.linalg.factory.Nd4j.initContext(Nd4j.java:6086)
	... 44 more
```
Very low level at the moment and only a few part of the Vega Lite API is supported.

The goal is to implement all (or almost) the Vega Lite API at a very low level and then add convenient functions that make plotting as easy as with [matplotlib](https://matplotlib.org/gallery.html).

The Vega Lite specification is pretty easy to understand and is not that complex: https://vega.github.io/vega-lite/docs/spec.html

Technically the library is using the Jackson JSON library (https://github.com/FasterXML/jackson) to automatically map attributes to JSON fields.

When stable enough and if @ctrueden agree, that plotting library should be moved to its own repository under the Scijava GitHub organization.
Following https://github.com/scijava/scijava-jupyter-kernel/issues/56

I think the future of plotting for the kernel (and probably for many other languages, Python included) is [Vega](http://vega.github.io/) and [Vega-lite](https://vega.github.io/vega-lite/).

I found a Scala library called [Vegas](https://www.vegas-viz.org/). I tried it very quickly with the kernel and it works.

![screenshot from 2017-06-23 09-25-33](https://user-images.githubusercontent.com/528003/27484100-f36fb362-57f5-11e7-96b7-3eed817d1dcb.png)

I only tried with Scala but I expect others scripting languages to work as well.

For now `plot.show` display a window with the rendered plot. In a near future, a Vega extension will be shipped with Jupyter Lab (and the Notebook as well): https://github.com/altair-viz/jupyter_vega/issues/35. That will allow any Vega JSON string to be rendered if the mimetype is correct.

We could create a converter that send to the client the JSON string (using `plot.toJSON`) with the correct mimetype.
Consider the following code : 

```java
package org.scijava.jupyterkernel.sandbox;

import javax.script.ScriptEngine;
import javax.script.ScriptException;
import org.scijava.Context;
import org.scijava.script.ScriptLanguage;
import org.scijava.script.ScriptService;

/**
 *
 * @author Hadrien Mary
 */
public class TestScriptEngine {

    public static void main(String[] args) throws ScriptException {
        // Only for testing purpose

        Context context = new Context();
        ScriptService scriptService = context.getService(ScriptService.class);
        ScriptLanguage scriptLanguage = scriptService.getLanguageByName("python");
        ScriptEngine engine = scriptLanguage.getScriptEngine();

        Object result = engine.eval("p=999\n555");
        System.out.println(result);

        scriptService = context.getService(ScriptService.class);
        scriptLanguage = scriptService.getLanguageByName("python");
        engine = scriptLanguage.getScriptEngine();
        
        result = engine.eval("555");
        System.out.println(result);

        context.dispose();
    }

}
```

It returns: 

```
null
555
```

While it should returns : 

```
555
555
```