I would like to be able to change the config prefix from the default db.<name>... to something else.

This is to resolve an issue I'm having where an extra connection pool is being created.

Using Play 2.7.3 + PlaySlick, Slick creates the connection pool that we want to use.

However, if I define my db config for flyway with the normal `db.default` config then Play creates a second unwanted connection pool.

My workaround at the moment is to go from this
```
db.default {
  driver = org.postgresql.Driver
  username = "username"
  password = "password"
  url = "jdbc:postgresql://host/dbname"
}

slick.dbs.default.profile="slick.jdbc.PostgresProfile$"
slick.dbs.default.driver = "slick.driver.PostgresDriver$"
slick.dbs.default.db {
  properties.driver = "org.postgresql.Driver"
  properties.url = "postgresql://username:password@host/dbname"
  dataSourceClass="slick.jdbc.DatabaseUrlDataSource"
}
```

to this

```
flyway-config = "flyway"

flyway.default {
  driver = org.postgresql.Driver
  username = "username"
  password = "password"
  url = "jdbc:postgresql://host/dbname"
}

slick.dbs.default.profile="slick.jdbc.PostgresProfile$"
slick.dbs.default.driver = "slick.driver.PostgresDriver$"
slick.dbs.default.db {
  properties.driver = "org.postgresql.Driver"
  properties.url = "postgresql://username:password@host/dbname"
  dataSourceClass="slick.jdbc.DatabaseUrlDataSource"
}
```

This is just an example solution, open to any and all input.

Flyway 6 has been released in August 2019. It features support for many new DB version such as PostgreSQL 11 and 12. `flyway-play` should to be updated to support Flyway 6.
Version I am using:

```
    "org.flywaydb" %% "flyway-play" % "5.3.2",
```

I am particularly interested in [one of the versions supported by RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions).

I get this warning on one of my apps: 
```
[warn] o.f.c.i.d.b.Database - Flyway upgrade recommended: PostgreSQL 11.4 is newer than this version of Flyway and support has not been tested.
```

Couldn't that warning also be useful and tell us which version *is* the latest to be tested!?
I would like to be able to supply flywayUrl/user and password dependent on the environment the application is running. 

The flyway command line supports arguments but I cannot find how to execute flywayMigrate with arguments. 

Could you advise?

Thanks
Greetings! ☺️

I would like to keep my migrations in `conf/schema/sql` rather than in `conf/db/migrations` (because I also have a `conf/schema/json` and I want them to be parallel). Can I accomplish this with `flyway-play` as it stands today?

My best attempt so far is this config:

```
db.data.driver = org.postgresql.Driver
db.data.migration.schemas = ["myschema"]
db.data.migration.initOnMigrate = true
db.data.migration.auto = true
db.data.migration.locations = ["../../../schema/sql"]
```

Which gives me this log output:

```
2018-08-16 16:26:02 -0400 [WARN] from org.flywaydb.core.internal.util.scanner.classpath.ClassPathScanner in ForkJoinPool-1-worker-1 - Unable to resolve location classpath:db/migration/data//////////schema/sql
2018-08-16 16:26:02 -0400 [INFO] from org.flywaydb.core.internal.command.DbSchemas in ForkJoinPool-1-worker-1 - Creating schema "myschema" ...
2018-08-16 16:26:02 -0400 [INFO] from org.flywaydb.core.internal.metadatatable.MetaDataTableImpl in ForkJoinPool-1-worker-1 - Creating Metadata table: "myschema"."schema_version"
2018-08-16 16:26:02 -0400 [INFO] from org.flywaydb.core.internal.command.DbMigrate in ForkJoinPool-1-worker-1 - Current version of schema "myschema": null
2018-08-16 16:26:02 -0400 [INFO] from org.flywaydb.core.internal.command.DbMigrate in ForkJoinPool-1-worker-1 - Schema "myschema" is up to date. No migration necessary.
```

My hunch is that this would require some changes to `flyway-play` but I figured I would pose the question!
I've got such exception:
```
play.api.UnexpectedException: Unexpected exception[BeanCreationException: Error creating bean with name 'class org.flywaydb.play.PlayInitializer': Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.flywaydb.play.PlayInitializer]: Constructor threw exception; nested exception is org.flywaydb.core.api.FlywayException: Found non-empty schema(s) "public" without metadata table! Use baseline() or set baselineOnMigrate to true to initialize the metadata table.]
        at play.core.server.DevServerStart$$anon$1.reload(DevServerStart.scala:186)
        at play.core.server.DevServerStart$$anon$1.get(DevServerStart.scala:124)
        at play.core.server.AkkaHttpServer.modelConversion(AkkaHttpServer.scala:183)
        at play.core.server.AkkaHttpServer.handleRequest(AkkaHttpServer.scala:189)
        at play.core.server.AkkaHttpServer.$anonfun$createServerBinding$3(AkkaHttpServer.scala:106)
        at akka.stream.impl.fusing.MapAsync$$anon$23.onPush(Ops.scala:1172)
        at akka.stream.impl.fusing.GraphInterpreter.processPush(GraphInterpreter.scala:499)
        at akka.stream.impl.fusing.GraphInterpreter.processEvent(GraphInterpreter.scala:462)
        at akka.stream.impl.fusing.GraphInterpreter.execute(GraphInterpreter.scala:368)
        at akka.stream.impl.fusing.GraphInterpreterShell.runBatch(ActorGraphInterpreter.scala:571)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'class org.flywaydb.play.PlayInitializer': Bean instantiation via constructor failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.flywaydb.play.PlayInitializer]: Constructor threw exception; nested exception is org.flywaydb.core.api.FlywayException: Found non-empty schema(s) "public" without metadata table! Use baseline() or set baselineOnMigrate to true to initialize the metadata table.
        at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:279)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1193)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1095)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.flywaydb.play.PlayInitializer]: Constructor threw exception; nested exception is org.flywaydb.core.api.FlywayException: Found non-empty schema(s) "public" without metadata table! Use baseline() or set baselineOnMigrate to true to initialize the metadata table.
        at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:154)
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:122)
        at org.springframework.beans.factory.support.ConstructorResolver$1.run(ConstructorResolver.java:265)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:262)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1193)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1095)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
Caused by: org.flywaydb.core.api.FlywayException: Found non-empty schema(s) "public" without metadata table! Use baseline() or set baselineOnMigrate to true to initialize the metadata table.
        at org.flywaydb.core.Flyway$1.execute(Flyway.java:995)
        at org.flywaydb.core.Flyway$1.execute(Flyway.java:971)
        at org.flywaydb.core.Flyway.execute(Flyway.java:1464)
        at org.flywaydb.core.Flyway.migrate(Flyway.java:971)
        at org.flywaydb.play.PlayInitializer.$anonfun$migrateAutomatically$1(PlayInitializer.scala:156)
        at org.flywaydb.play.PlayInitializer.$anonfun$migrateAutomatically$1$adapted(PlayInitializer.scala:155)
        at scala.Option.foreach(Option.scala:257)
        at org.flywaydb.play.PlayInitializer.migrateAutomatically(PlayInitializer.scala:155)
        at org.flywaydb.play.PlayInitializer.$anonfun$onStart$1(PlayInitializer.scala:147)
        at org.flywaydb.play.PlayInitializer.$anonfun$onStart$1$adapted(PlayInitializer.scala:145)
```
although I set ```db.default.migration.baselineOnMigrate=true``` - it seems not working
Is there a way to apply Flyway migrations on a specific `Database` objects, such as one that comes from `Databases.withDatabase`?

For example here is the config I use with play-slick:

``` hocon
slick.dbs = {
  default = {
    driver = "slick.driver.H2Driver$"
    db = {
      url = "jdbc:h2:./database;AUTO_SERVER=TRUE"
      driver = org.h2.Driver
      user = "sa"
      password = ""
    }
  }
}
```

Every time when I change one of my models and Play wants to re-apply the evolutions scripts I get the following error:

```
1) Error injecting constructor, @6mm01i5n4: Database 'default' needs migration!
  at org.flywaydb.play.PlayInitializer.<init>(PlayInitializer.scala:31)
  at org.flywaydb.play.PlayModule.bindings(PlayModule.scala:24):
Binding(class org.flywaydb.play.PlayInitializer to self eagerly) (via modules: com.google.inject.util.Modules$OverrideModule -> play.api.inject.guice.GuiceableModuleConversions$$anon$1)
  while locating org.flywaydb.play.PlayInitializer
Caused by: @6mm01i5n4: Database 'default' needs migration!
    at org.flywaydb.play.PlayInitializer$$anonfun$org$flywaydb$play$PlayInitializer$$checkState$1.apply(PlayInitializer.scala:104)
    at org.flywaydb.play.PlayInitializer$$anonfun$org$flywaydb$play$PlayInitializer$$checkState$1.apply(PlayInitializer.scala:101)
    at scala.Option.foreach(Option.scala:257)
...
```

What am I doing wrong, I would like to apply the generated .sql from Play and let Flyway run the scripts afterwards..

