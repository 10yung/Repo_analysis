### Purpose of this PR
Why is this PR needed, what hard problem is it solving/fixing?
Backport #5515 

**Yamato**: (Select your branch):
https://yamato.prd.cds.internal.unity3d.com/jobs/78-ScriptableRenderPipeline

Any test projects to go with this to help reviewers?

---
### Comments to reviewers
Notes for the reviewers you have assigned.

7.1.8 backport for https://github.com/Unity-Technologies/ScriptableRenderPipeline/pull/5553

Removes one change from that PR which was about using less memory but did not impact the leak. Good stuff but not critical.
**DONT FORGET TO ADD A CHANGELOG**

### Checklist for PR maker
- [ ] Have you added a backport label (if needed)? For example, the `need-backport-2019.3` label. After you backport the PR, the label changes to `backported-2019.3`.
- [x] Have you updated the changelog? Each package has a `CHANGELOG.md` file.
- [ ] Have you updated or added the documentation for your PR? When you add a new feature, change a property name, or change the behavior of a feature, it's best practice to include related documentation changes in the same PR.
- [ ] Have you added a graphic test for your PR (if needed)? When you add a new feature, or discover a bug that tests don't cover, please add a graphic test.

---
### Purpose of this PR
Fixing https://fogbugz.unity3d.com/f/cases/1189718
Issue where we sometimes get 5+ active terrain materials, resulting in two passes, with height blending active. Since height blending requires normalization, it can only be rendered in one pass. When it is active for two passes it results in corrupt results. The change here removes all of the logic from the shader/material inspector that attempts to disable height blending based on number of layers and replaces it with a shader-based check that is guaranteed to be correct (at least guaranteed once you are also using trunk based on this: https://ono.unity3d.com/unity/unity/pull-request/99411/_/graphics/terrainLayerCount)

---
### Testing status

**Manual Tests**: What did you do?
- [x] Opened test project + Run graphic tests locally
- [x] Built a player
- [ ] Checked new UI names with UX convention
- [ ] Tested UI multi-edition + Undo/Redo + Prefab overrides + Alignment in Preset
- [x] C# and shader warnings (supress shader cache to see them)
- [ ] Checked new resources path for the reloader (in devloper mode, you have a button at end of resources that check the pathes)
- Other: 

**Automated Tests**: What did you setup? (Add a screenshot or the reference image of the test please)

**Yamato**: (Select your branch):
https://yamato.prd.cds.internal.unity3d.com/jobs/78-ScriptableRenderPipeline

Any test projects to go with this to help reviewers?

---
### Comments to reviewers
Notes for the reviewers you have assigned.

### Purpose of this PR
Fix for issue #1181518 -- https://fogbugz.unity3d.com/f/cases/1181518/
The issue appears to indicate that the X-component of the normal-mapped result on terrain vs meshes using the same normal mapping results in lighting that appears flipped on the X-axis.  More accurately, it is that the tangent direction is flipped.

---
### Testing status
Test scene result.

**Buggy State** 
![Broken1181518](https://user-images.githubusercontent.com/44006722/72652208-9cd03a80-393a-11ea-9b4c-e4d8ef9ef08d.JPG)

**Fixed State**
![Fixed1181518](https://user-images.githubusercontent.com/44006722/72652219-ace81a00-393a-11ea-955a-1a1ca2f9ea0b.JPG)

Also verified via another test case that this seems to affect Universal, but not HDRP.

**Yamato**: (Select your branch):
https://yamato.prd.cds.internal.unity3d.com/jobs/78-ScriptableRenderPipeline

---
### Comments to reviewers
Also needs backport to 2019.3

**DONT FORGET TO ADD A CHANGELOG**

### Checklist for PR maker
- [x] Have you added a backport label (if needed)? For example, the `need-backport-2019.3` label. After you backport the PR, the label changes to `backported-2019.3`.
- [x] Have you updated the changelog? Each package has a `CHANGELOG.md` file.
- [ ] Have you updated or added the documentation for your PR? When you add a new feature, change a property name, or change the behavior of a feature, it's best practice to include related documentation changes in the same PR.
- [ ] Have you added a graphic test for your PR (if needed)? When you add a new feature, or discover a bug that tests don't cover, please add a graphic test.

---
### Purpose of this PR

Fixing https://fogbugz.unity3d.com/f/cases/1189718
Issue where we sometimes get 5+ active terrain materials, resulting in two passes, with height blending active.  Since height blending requires normalization, it can only be rendered in one pass.  When it is active for two passes it results in corrupt results.  The change here removes all of the logic from the shader/material inspector that attempts to disable height blending based on number of layers and replaces it with a shader-based check that is guaranteed to be correct (at least guaranteed once you are also using trunk based on this:  https://ono.unity3d.com/unity/unity/pull-request/99411/_/graphics/terrainLayerCount)

---
### Testing status

**Manual Tests**: What did you do?
- [x] Opened test project + Run graphic tests locally
- [x] Built a player
- [ ] Checked new UI names with UX convention
- [ ] Tested UI multi-edition + Undo/Redo + Prefab overrides + Alignment in Preset
- [x] C# and shader warnings (supress shader cache to see them)
- [ ] Checked new resources path for the reloader (in devloper mode, you have a button at end of resources that check the pathes)
- Other: 

**Automated Tests**: What did you setup? (Add a screenshot or the reference image of the test please)

**Yamato**: (Select your branch):
https://yamato.prd.cds.internal.unity3d.com/jobs/78-ScriptableRenderPipeline/tree/Fix1189718

Any test projects to go with this to help reviewers?

---
### Comments to reviewers
Notes for the reviewers you have assigned.

### Checklist for PR maker
- [ ] Have you added a backport label (if needed)? For example, the `need-backport-2019.3` label. After you backport the PR, the label changes to `backported-2019.3`.
- [ ] Have you updated the changelog? Each package has a `CHANGELOG.md` file.
- [ ] Have you updated or added the documentation for your PR? When you add a new feature, change a property name, or change the behavior of a feature, it's best practice to include related documentation changes in the same PR.
- [ ] Have you added a graphic test for your PR (if needed)? When you add a new feature, or discover a bug that tests don't cover, please add a graphic test.

---
### Purpose of this PR

Fixed terrain shader error in XR.
Note: Follow up PR will be made to fix other terrain shaders in XR. Other terrain shaders won't generate shader errors for XR but they are not XR enabled at the moment.
---
### Testing status

**Manual Tests**: What did you do?
- [ ] Opened test project + Run graphic tests locally
- [ ] Built a player
- [ ] Checked new UI names with UX convention
- [ ] Tested UI multi-edition + Undo/Redo + Prefab overrides + Alignment in Preset
- [ ] C# and shader warnings (supress shader cache to see them)
- [ ] Checked new resources path for the reloader (in devloper mode, you have a button at end of resources that check the pathes)
- Other: 

**Automated Tests**: What did you setup? (Add a screenshot or the reference image of the test please)

**Yamato**: (Select your branch):
https://yamato.prd.cds.internal.unity3d.com/jobs/78-ScriptableRenderPipeline

Any test projects to go with this to help reviewers?

---
### Comments to reviewers
Notes for the reviewers you have assigned.

### Purpose of this PR
VFX backported fixes to 2019.3
- Filter out Direction type on inconsistent operator [Case 1201681](https://issuetracker.unity3d.com/product/unity/issues/guid/1201681/)
- Exclude MouseEvent, RigidBodyCollision, TriggerEvent & Sphere binders when physics modules isn't available
- Visual Effect Activation Track : Handle empty string in ExposedProperty
- in some cases AABox position gizmo would not move when dragged.
- Inspector doesn't trigger any exception if VisualEffectAsset comes from an Asset Bundle [case 1203616](https://issuetracker.unity3d.com/issues/visual-effect-component-is-not-fully-shown-in-the-inspector-if-vfx-is-loaded-from-asset-bundle)
- OnStop Event to the start of a Spawn Context makes it also trigger when OnPlay is sent [Case 1198339] https://issuetracker.unity3d.com/product/unity/issues/guid/1198339/
- Remove unexpected public API : UnityEditor.VFX.VFXSeedMode & IncrementStripIndexOnStart
- Moved VFX Event Tester Window visibility to Component Play Controls SceneView Window

---
### Testing status
**Yamato**: (Select your branch):
https://yamato.prd.cds.internal.unity3d.com/jobs/78-ScriptableRenderPipeline/tree/vfx%252F2019.3-staging

---
### Comments to reviewers
@iTris666 @PaulDemeulenaere Please double check changes are correct
### Purpose of this PR
Fix https://fogbugz.unity3d.com/f/cases/1211987/
The issue was due to wrong reference in new default DXR scene. I dunno exactly how it happened but GUID registered here are not the right ones.

---
### Testing status

**Manual Tests**: 
- Other: Run the wizard again and checked default prefab scene

---
### Comments to reviewers

Pre-render sky doesn't early out when matcap (while rest of sky related stuff does, therefore the leak) 

For QA: Without the fix, open a template scene enable matcap view and move around a bit and see memory usage go up. 

With the fix it doesn't do that
### Purpose of this PR
Fixed an issue where passing a null ProfilingSampler would cause a null ref exception.
