### Describe the bug
When i do a prompt request (i've tested the types select and text, happens on both) it displays the text "String.prototype.matchAll":

![Captura de ecraÌƒ 2020-01-09, aÌ€s 10 32 15](https://user-images.githubusercontent.com/25043758/72060916-cd75fb80-32cc-11ea-8ca3-e19d09fd1f15.png)

### To Reproduce
Just create a request with this code:

```
const response = await prompts({
    type: 'text',
    name: 'port',
    message: 'Server Port?',
    initial: 514
});
```

### Expected behavior
It's supposed to show the prompt without the "String.prototype.matchAll".

### System

- OS: Windows 10 Pro
- Terminal: Powershell and CMD
- Node version: v10.13.0

### Additional context
I'm building a exe with [pkg](https://www.npmjs.com/package/pkg) on macOs and running it on windows.

Is there a way to change the `[y/n]` values in the _confirm_ prompt?

I would like to change them to `[s/n]` to adapt better to my native language. :)

### Describe the bug
If `initial` is specified for a `text` prompt, the cursor is pinned to the right (visually). I can move the cursor left and right and delete characters, but it looks off. This was not present in 2.1 (and I proved this by reverting my local app to use 2.1)

### To Reproduce

Create a `text` question with an `initial` string. 

### Expected behavior
It should be editable as normal as it was in 2.1

### System

- OS: Ubuntu 19
- Terminal: Kitty + Tmux
- Node version: 12

### Additional context
Add any other context about the problem here.

Simple fix to prevent <kbd>home</kbd> and <kbd>end</kbd> keys to print undefined. 
The documentation and the actual code correctly spells it separator in the option for the list type. However, the TypeScript and one of the comments in the code misspells it seperator. This means that TypeScript refuses to allow it... work around is a ts-ignore.
simple repo for repro: [prompts-repro](https://github.com/loualfaro/prompt-repro)
Bug:
There is unexpected behavior utilizing commonly used keys, which register as undefined.

The `Home` button on a text prompt creates the string undefined, when you try to clear it only the `u` deletes so the prompt ends up having `ndefined` in the returned value.

Repro:
1. clone, install and run start on repo above
2. add a couple numbers at number prompt do not press `Return`
3. press `Home` key, cursor stays at end
4. press `Return`
5. add a couple letters at text prompt do not press `Return`
6. press `Home` key, undefined text appears
I add a link to readme with the same style as original one. If there is any suggestion, please tell me. I will keep update. ðŸ˜€
Hello, I am a developer from China. I like this library very much and have translated the documentation, hoping to better recommend it to the majority of Chinese developers.

[Here is the link](https://chinabigpan.github.io/prompts_docs_cn/)

I hope you can put it into the official document.

PS. [ä¸­æ–‡æ–‡æ¡£](https://chinabigpan.github.io/prompts_docs_cn/) means Chinese Documentation

Thank you very much.
it would be useful to add the possibility of adding a field
![image](https://user-images.githubusercontent.com/32040951/70388595-517a5200-19b4-11ea-9f9d-03b9de6fae55.png)

allows for new 'prompts' type that will process the message as a new set of questions to ask.
allows for dynamically adding questions to the set base on previous responses.

```javascript
const prompts = require('prompts');

const questions = [
    {
        type: 'number',
        name: 'players',
        message: 'Number of players?',
    },
    {
        type: 'prompts',
        name: 'ages',
        message: prev => {
            const empty = new Array(prev).fill({});
            const questions = empty.map((x, i) => ({
                type: 'number',
                name: `player${i+1}Age`,
                message: `Player ${i+1}'s Age?'`,
            }))
           return questions;
        }
    },
    {
        type: 'text',
        name: 'name',
        message: 'Name of game',
    }
];

(async () => {
    const config = await prompts(questions);
    console.log(config)
})();
```

Output: 
```
âœ” Number of players? â€¦ 2
âœ” Player 1's Age?' â€¦ 23
âœ” Player 2's Age?' â€¦ 56
âœ” Name of game â€¦ Testing
{ players: 2,
  ages: { player1Age: 23, player2Age: 56 },
  name: 'Testing' }
```