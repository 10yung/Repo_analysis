

I have this setting in my current project: 
`Compile / jsSourceDirectories += baseDirectory.value / "html"` 

It works well with sbt-1.2.8, but with sbt-1.3.0 fails with:

```
(Compile / npmInstallJSResources) java.lang.IllegalArgumentException: requirement failed: Source file '/Users/mushtaq/projects/tmt/msocket/example-service/example-service-app-js/html' is a directory.
```
I believe we have too many extension points in this plugin (`webpackNodeArgs`, `npmExtraArgs`, `additionalNpmConfig`, `webpackDevServerExtraArgs`, `webpackExtraArgs`, `yarnExtraArgs`). I’m wondering if that’s a sign that the plugin is not at the right “place”.

Maybe we should just generate a webpack configuration file and let users call webpack, npm, yarn, etc. as they want?

Initially, one goal of the plugin was to provide an “integrated” developer experience: no need to bother about writing a `package.json` file, or even maybe a webpack configuration file: just add an `npmDependencies += …` line to your `build.sbt` and you’re done! However, it turns out that this automation is achieved at the expense of (a required) flexibility…
### WIP ⚠️:
- Only one function of `util.Commands.scala`  has been updated to accept extra env. vars. Should I update the others too?

If adding this new option seems ok to the maintainers then I can add a test.

### Usage example:
```scala
webpackNodeEnvVars in fullOptJS := Map(
  "NODE_ENV" -> "production"
)
```


Fixes https://github.com/scalacenter/scalajs-bundler/issues/293

Allow to use ES modules as well as CommonJS module.

**WIP**: `BundlingMode.LibraryOnly()` does not work yet as with:
```html
<script src="[name]-fastopt-library.js"></script>
<script src="[name]-fastopt-loader.js"></script>
<script src="[name]-fastopt.js"></script>
```
the browser will not recognize the `import` syntax in the last script.

Adding the attribute `type="module"` is not enough: if `[name]-fastopt.js` contains something like `import * as $i_jquery from "jquery";` then the following error is thrown:
```
Uncaught TypeError: Failed to resolve module specifier "jquery". Relative references must start with either "/", "./", or "../".
```
Currently, scaljs-bundler uses `npmDependencies` in sbt to manage node.js packages.

It would be great if scalajs-bundler add `package.json` support to manage dependencies, so that npm tools like `npm audit` or [dependabot](https://dependabot.com/javascript/) work with `package.json`.

FYI) Dependabot is a bot to watch `npm` packages and open pull request if updates found, like [Scala Steward](https://github.com/fthomas/scala-steward) do so for Scala projects.
Adding eslint to `npmDevDependencies` and following just about any [tutorial ](serverLocalFast) or [official docs](https://www.npmjs.com/package/eslint-loader) for running eslint-loader in webpack does not seem to trigger it to run:

```
npmDevDependencies in Compile ++= Seq(
      ...
      "eslint" -> "6.1.0",
      "eslint-loader" -> "2.2.1",
      "eslint-plugin-react-hooks" -> "1.6.1"
    )
```

In my webpack config:

```
module: {
    rules:[
      {
        test: /\.(sc|c)ss$/,
        use: [
            "style-loader",
            "css-loader",
            "sass-loader"
        ]
      },
      {
        test: /\.(png|ttf|otf|eot|svg|woff(2)?)(\?[a-z0-9]+)?$/,
        use: [
          {
            loader: "file-loader",
            options: {
              name: "[hash].[ext]"
            }
          }
        ]
      },
      {
        test: /\.(js)$/,
        exclude: /node_modules/,
        loader: "eslint-loader"
      }
    ]
  }
```

all of my js source is located in `target/scala-2.12/scalajs-bundler/main`, so it should be picked up just like all my other loaders right?

I'm expecting to at least get the usual error that `.eslintrc` is missing, but I see no logs at all for eslint. Is there something fundamentally incompatible with eslint loader and `fastOptJS::webpack`?

I've been trying to debug an issue with the Bootstrap library.  It extends jquery and it expects the var jQuery to be a global, but I get the error 'jQuery is not defined'.  I've been trying to follow the [Global Namespace](https://github.com/scalacenter/scalajs-bundler/blob/master/sbt-scalajs-bundler/src/sbt-test/sbt-scalajs-bundler/global-namespace-with-jsdom-unit-testing_sjs-0.6/common.webpack.config.js) example, but I think there is an issue.  

The issue is not apparent in the example because the var name and the lib symbol name are the same, eg.

```
var globalModules = {
  moment: "moment"
};
```

However, in my case, the library symbol is jquery, and the global var that Bootstrap expects is jQuery.  It seems to me that the importRule is using the globalModules key/value opposite to the exposeRules.

When I make the following changes to common.webpack.config.js, I'm able to use Boostrap without the 'jQuery undefined' error.

```
var importMap = {
  jqueryDNC: "jquery"
};

var exportMap = {
  jquery: "jQuery"
};

const importRule = {
  // Force require global modules
  test: /.*-(fast|full)opt\.js$/,
  loader:
    "imports-loader?" +
    Object.keys(importMap)
      .map(function(modName) {
        return modName + "=" + importMap[modName];
      })
      .join(",")
};

const exposeRules = Object.keys(exportMap).map(function(modName) {
  // Expose global modules
  return {
    test: require.resolve(modName),
    loader: "expose-loader?" + exportMap[modName]
  };
});

const allRules = exposeRules.concat(importRule);

module.exports = {
  performance: { hints: false },
  module: {
    rules: allRules
  }
};
```

If you can confirm this issue, it may be helpful to change the example to use different var name and library symbol name.

Also, there is another issue for my understanding.  In the importMap above I use the key jqueryDNC in the InputMap.  It seems that the name I use there doesn't matter.  Based on all the docs I thought the key for the importMap would need to be the var name used by Bootstrap (ie. the global var name for jquery, ie. typically jQuery or $).  However, that doesn't seem to be the case.  My program works no matter what I name that key.  Then I thought this might mean the importRule simply isn't needed because the exportRule creates the desired global variable name, but my program breaks if I omit the importRule.  So it must be that the presence of the import rule has some other side effect.  Can you provide any further insight on what is going on here?
Fixes #301 (also required for LibraryAndApplication)