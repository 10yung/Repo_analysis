:robot: I have created a release \*beep\* \*boop\* 
---
## [15.2.0](https://www.github.com/yargs/yargs/compare/v15.1.0...v15.2.0) (2020-01-09)


### Features

* **completion:** takes negated flags into account when boolean-negation is set ([#1509](https://www.github.com/yargs/yargs/issues/1509)) ([7293ad5](https://www.github.com/yargs/yargs/commit/7293ad50d20ea0fb7dd1ac9b925e90e1bd95dea8))
---


This PR was generated with [Release Please](https://github.com/googleapis/release-please).
Hi all, it seems that when calling `--help` on a yargs project it can exit before all of the help content has been flushed to `stdout`.

I found this while trying to get `nyc`'s test suite running consistently on my local machine, the `nyc` issue is [here](https://github.com/istanbuljs/nyc/issues/1259).  

`nyc` has a test that compares the help output generated by yargs using `nyc --help` and a call to `yargs.showHelp()`.  These generate the same output most of the time but the call to `nyc --help` may get truncated if the `yargs` call to `process.exit(code)` on line 978 of `yargs.js` is hit before the buffer has flushed.

According to the NodeJS docs the call to `process.exit(code)` can be heavy handed and exit before writes to stdout/stderr have completed.


Allow setting `deprecated: true` for an option or a command, like:

```
yargs.options({
  oldOption: {type: 'boolean', deprecated: true }
  newOption: {type: 'boolean' }
})
```

which will show up in help as:

```
Options:
  --old-option [deprecated]
  --new-option
```

I've been tightening up yargs' team permissions, in prep for fully automating publication. This has included:

1. switching most folks to `triagers` rather than `maintainers` or `admins`.
2. enforcing 2FA on GitHub.
3. adding branch protection rules, such that one code review must have taken place before a PR may be merged.

These changes will put us in a position to more fully automate the yargs project, and were not related to any specific contributors actions (you're all great).
`.help(false)` does not appear to be working correctly in v15.0.2 when used in a default command.  It does hide the `--help` option from the help text, but yargs still prints the help text if you run `myapp --help` or `myapp help`.

This is contrary to the [docs](https://github.com/yargs/yargs/blob/master/docs/api.md#help), which say
> If the boolean argument `false` is provided, it will disable `--help`.

I got the desired behavior (ie, yargs did nothing with `--help`) in v8.0.2 by not calling `.help(â€¦)` at all.  I noticed this issue when trying to upgrade.
See https://github.com/yargs/yargs/issues/1331#issuecomment-559247460 

If you have a **default command**, and the user makes an **error in the args**, then `yargs` should not output usage for the default command (current behaviour). The problem is, the user may want to use another command, not the default, and the user does not know the app knows other commands. `yargs` should output general help `node index.js --help` instead, it contains list of commands and args for the default command, too.

Example:
```js
const options = yargs
  .command(['cmd1', '*'], 'Command 1', { 'value': { demandOption: true } })
  .command('cmd2', 'Command 2', { 'value': { demandOption: true } })
  .help().strict(true).demandCommand(1)
  .parse();
```

Then run `node index.js foo`  - an error argument -- and output is (shortened):
```
Command 1

Options:
  --version  Show version number                                      [boolean]
  --help     Show help                                                [boolean]
  --value                                                             [required]
```

But I would expect same similar to `node index.js --help`, i.e.
```
Command 1                                                                           
                                                                                    
Commands:                                                                           
  index.js cmd1  Command 1                                             [default]    
  index.js cmd2  Command 2                                                          
                                                                                    
Options:                                                                            
  --version  Show version number                                      [boolean]    
  --help     Show help                                                [boolean]    
  --value                                                             [required]                                
```

So, that the user knows, the app has more commands. 

I couldn't find any instructions on serving the docs locally to test my changes.
My yargs structure shows top-level help when I call

```
node yargs-issue.js --help

generate plain html from json

Commands:
  yargs-issue.js plain <json>  generate plain html from json           [default]
  yargs-issue.js audio <json>  generate html with audio support

Positionals:
  json  the json file as found in the ../JSON/ directory

Options:
  --version           Show version number                              [boolean]
  --help              Show help                                        [boolean]
  --speakers, -s      speakers                                [array] [required]
  --release-date, -r  release date, e.g. 'November 25, 2019'          [required]
```
But when I try to invoke help from a subcommand:
```
./yargs-issue.js audio --help
```
the options for that subcommand are not shown. Instead I get the exact same output as before.
However, if I call the audio subcommand incorrectly by omitting a required option, I get the desired information about the subcommand-specific options:
```
node yargs-issue.js audio
yargs-issue.js audio <json>

generate html with audio support

Positionals:
  json  the json file as found in the ../JSON/ directory

Options:
  --version           Show version number                              [boolean]
  --help              Show help                                        [boolean]
  --speakers, -s      speakers                                [array] [required]
  --release-date, -r  release date, e.g. 'November 25, 2019'          [required]
  --audio-file, -a    audio file
  --audio-offset, -o  audio file offset when speech starts in seconds [float]
                                                                      [required]

Not enough non-option arguments: got 0, need at least 1
```

This is the source code of yargs-issue.js
```javascript
const argv = require('yargs')
  .command(['plain <json>', '$0'], 'generate plain html from json', yargs => {
    yargs
    .positional('json', {
      describe: 'the json file as found in the ../JSON/ directory',
      nargs: 1,
      global: true, // used for both plain and audio commands
    })
    .option('speakers', {
      alias: 's',
      describe: 'speakers',
      demandOption: true,
      array: true,
      global: true,
    })
    .option('release-date', { // (will be renamed to releaseDate)
      alias: 'r',
      describe: 'release date, e.g. \'November 25, 2019\'',
      demandOption: true,
      nargs: 1,
      global: true,
    })
    .command('audio <json>', 'generate html with audio support', 
      yargs => { // builder
        return yargs
          .option('audio-file', {
            alias: 'a',
            describe: 'audio file',
            nargs: 1,
          })
          .option('audio-offset', { 
            alias: 'o',
            describe: 'audio file offset when speech starts in seconds [float]',
            demandOption: true,
            nargs: 1,
          })
      },
    )
  })
  .strict()
  .help()
  .argv

```
On a Windows machine, with a fresh node_modules install:

```bash
$ rm -rf node_modules && npm install
added 350 packages from 666 contributors and audited 697 packages in 24.33s
found 5 vulnerabilities (1 moderate, 4 high)
  run `npm audit fix` to fix them, or `npm audit` for details

$ npm audit
                       === npm audit security report ===
# Run  npm update handlebars --depth 3  to resolve 5 vulnerabilities
  High            Prototype Pollution
  Package         handlebars
  Dependency of   c8 [dev]
  Path            c8 > istanbul-reports > handlebars
  More info       https://npmjs.com/advisories/1164


  Moderate        Denial of Service
  Package         handlebars
  Dependency of   c8 [dev]
  Path            c8 > istanbul-reports > handlebars
  More info       https://npmjs.com/advisories/1300


  High            Arbitrary Code Execution
  Package         handlebars
  Dependency of   c8 [dev]
  Path            c8 > istanbul-reports > handlebars
  More info       https://npmjs.com/advisories/1316


  High            Arbitrary Code Execution
  Package         handlebars
  Dependency of   c8 [dev]
  Path            c8 > istanbul-reports > handlebars
  More info       https://npmjs.com/advisories/1324


  High            Prototype Pollution
  Package         handlebars
  Dependency of   c8 [dev]
  Path            c8 > istanbul-reports > handlebars
  More info       https://npmjs.com/advisories/1325

found 5 vulnerabilities (1 moderate, 4 high) in 697 scanned packages
  run `npm audit fix` to fix 5 of them.
```
I have an subcommand called `help` that's not getting called because yargs is assuming that I mean `--help`. How can I disable this?

```console
$ over the rainbow help
over the rainbow

Commands:
  over the rainbow help
  over the rainbow snazzy

Options:
  --help     Show help                                                 [boolean]
  --version  Show version number                                       [boolean]
```