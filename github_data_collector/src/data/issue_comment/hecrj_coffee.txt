## Motivation

I needed a way to project camera coordinates to world coordinates to be able to "pick" tiles using the mouse in a tile based game with a moving camera; In order to do so I needed to project the screen space coordinates into the world using the current `Transformation`.

## Solution

Add the following methods to `coffee::graphics::Transformation`.
```rust
pub fn project(&self, point: Point) -> Point;

pub fn unproject(&self, point: Point) -> Point;
```

## Further Work / Possible Improvements

- [ ] ~~Get the inverse matrix in an infallible way?~~
```rust
let inverse_mat = self.0.try_inverse().unwrap();
```


Good morning,

I have a small question about texture rendering. I want to create a fading effect where a texture get more transparent the more you zoom in to it. Sadly I can't find a function for that. Is it currently possible to draw a texture with a set alpha value?

I've also taken a look at some other tickets and I found this one: #1. Would it maybe be possible to add a fading effect with the color attribute if it would be implemented?

Keep up the good work this is an awesome crate :)
For an ui element made out of `graphics::Canvas`, is it better to

1. build a new `ui::Canvas`

2. make it so that `ui::Image` can accept either `graphics::Image` or `graphics::Canvas`

3. make it so that there's a `Drawable` trait that has `fn draw<Q: IntoQuad>(&self, quad: Q, target: &mut Target)`, so that `ui::Image` accepts a `&dyn Drawable` trait object.

1 is the most logical given the way the library is currently laid out, but involves duplication. But I think `ui::Image` shouldn't care whether it's displaying an image or a canvas, so 2) sounds better.

3 seems like a big departure from the way the lib is currently designed, but I'm curious on why coffee doesn't provide such trait already.
It'd be good if we could get access to [set_cursor_visible](https://docs.rs/winit/0.20.0-alpha4/winit/window/struct.Window.html#method.set_cursor_visible) and [set_cursor_icon](https://docs.rs/winit/0.20.0-alpha4/winit/window/struct.Window.html#method.set_cursor_icon) of `winit::Window`. This should be fairly simple to do once #62 is merged in.

@hecrj I'd be happy to work on this if you are OK with this addition. I was thinking we could just add these two methods in `graphics::Window`, which would just call the `winit::Window` methods. For the [CursorIcon](https://docs.rs/winit/0.20.0-alpha4/winit/window/enum.CursorIcon.html) `enum`, I am guessing we'd want to have an `enum` in `coffee` that maps one to one with the `winit::window::CursorIcon` since it doesn't look like `winit` is exposed to the consumers of this crate at all. If you have other ideas, I am happy to follow them as well, just let me know if you're interested.

For context, the reason I am interested in these methods is to be able to show a different icon in specific cases. Although `set_cursor_icon` would be enough to show the standard cursor icons, I believe `set_cursor_visible` is necessary to completely hide it to show a custom icon. I don't know which one I'll go with yet, but I think someone else might also find use for one or the other. Furthermore, a lot of games do hide the mouse icon completely, so the visibility control would be necessary for that as well.
I submitted #104 to avoid copying the buffer every time I submit a texture to the gpu, but it turns out that each gpu backend receives a `&image::DynamicImage` and performs another copy anyway. (well one copy is better than two, but still)

[on the gfx backend](https://github.com/hecrj/coffee/blob/e1bb429959472a786fe294916afc9e349181ad4b/src/graphics/backend_gfx/texture.rs#L28) it [always](https://docs.rs/image/0.21.3/image/enum.DynamicImage.html#method.to_rgb) performs a copy (even if the image already is rgba)

[on the wpu backend](https://github.com/hecrj/coffee/blob/e1bb429959472a786fe294916afc9e349181ad4b/src/graphics/backend_wgpu/texture.rs#L34) it always performs a copy too, even if it's already gbra (also: why do the two backends use a different color order for textures?)

For the opengl backend: I can't find it.

Well it's unavoidable to perform copies if the image isn't the right format, but it can be avoided if it is. But copying on some backends and not on others doesn't sound good, so I'm not sure if there's something that can be done.

(Anyway, my point of view is: the more optimized coffee is, the more people can get away with poorly optimized game code.)
I note that `Game` has the following methods:

```rust
fn interact(&mut self, _input: &mut Self::Input, _window: &mut Window)

fn update(&mut self, _window: &Window)
```

But `load::Task::run` can only be called if I have `&mut Window`, so I can only call it on `interact`, not on `update`. Is this by design? Is the rationale on that written somewhere?

I suppose that, since `Game::update` can potentially be called more times than `Game::interact`, it might not allow calling `Task::run` because it would be expensive. However, what if I'm procedurally generating GPU assets on `Game::update` and want to send it to the GPU ASAP? Should I store it somewhere and wait for the next `Game::interact`? (this looks ugly)
Currently, we only have [a simple `Mesh` test](https://github.com/hecrj/coffee/tree/18f7a67e7984300d799960ffe08faf7546794a1c/tests/_graphics/test) as an integration test for our `graphics` module. You can find a bit more context about this in #16 and #80.

We should write additional graphics tests until we cover a considerable amount of current functionality. This will allow us to control regressions if/when we change the graphical backends.
I currently have the following really basic function:

```rust
fn rect_from_tilemap_coord(x: u16, y: u16, tile_size: Option<u16>) -> Rectangle<u16>{
  let tile_size = tile_size.unwrap_or(16);
  let x = max(0, x - 1);
  let y = max(0, y - 1);
  return Rectangle {
    x: tile_size * x + x,
    y: tile_size * y + y,
    width: tile_size,
    height: tile_size
  }
}
```

Which is basically a really hacky way to get a Rectangle that represents an area of a spritesheet.  I'm likely to create an enum of all the sprites in the spritesheet, but I was wondering if there was some "better" way to do this in the actual engine.  A SpriteSheet that wraps an Image and takes grid coords rather than a quad maybe?  Or some way to load a spritesheet from which you can get the source rectangle for a given sprite?  

It may be that the best way to do it is indeed for me to create myself a tilemap class, that the renderer owns and have an enum that the renderer knows how to convert into a rectangle, but I thought I'd bring this up.
After 0.3.0 was released, different folks suggested me to build a standalone crate for the brand new `ui` module. I thought it was a really good idea. If folks use it, it would allow for cooperation between different game engines and UI applications to build better GUIs using Rust!

And so, [Iced] is here! A 2D renderer-agnostic GUI library focused on simplicity and type-safety. There is a long road ahead, but it is already usable!

This PR rewrites the `ui` module to integrate it with the upcoming first release of [Iced] ~while avoiding breaking changes. No examples were broken during this process!~

Depends on #62.

### Changed

  - The `Window::width` and `Window::height` methods now return a `u16`. This avoids many awkward conversions in user code.

### Pending work
  - [ ] Wait until the new `ProgressBar` and `Image` widgets are merged into [Iced]
  - [ ] Rewrite documentation
  - [ ] Wait for `winit` to implement `RedrawRequested` improvements: https://github.com/rust-windowing/winit/issues/1082

[Iced]: https://github.com/hecrj/iced
OS: Win10
Version: crates.io

Just minimized the example project (opengl + debug feat.) and it crashed with the following error:
```
thread 'main' panicked at 'The left corner must not be equal to the right corner.', C:\Users\USER\.cargo\registry\src\github.com-1ecc6299db9ec823\nalgebra-0.18.0\src\geometry\orthographic.rs:622:9
stack backtrace:
   0: backtrace::backtrace::trace_unsynchronized
             at C:\Users\VssAdministrator\.cargo\registry\src\github.com-1ecc6299db9ec823\backtrace-0.3.29\src\backtrace\mod.rs:66
   1: std::sys_common::backtrace::_print
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\/src\libstd\sys_common\backtrace.rs:47
   2: std::sys_common::backtrace::print
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\/src\libstd\sys_common\backtrace.rs:36
   3: std::panicking::default_hook::{{closure}}
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\/src\libstd\panicking.rs:200
   4: std::panicking::default_hook
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\/src\libstd\panicking.rs:214
   5: std::panicking::rust_panic_with_hook
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\/src\libstd\panicking.rs:477
   6: std::panicking::begin_panic<str*>
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\src\libstd\panicking.rs:411
   7: nalgebra::geometry::orthographic::Orthographic3<f32>::new
             at C:\Users\USER\.cargo\registry\src\github.com-1ecc6299db9ec823\nalgebra-0.18.0\src\geometry\orthographic.rs:0
   8: nalgebra::base::matrix::Matrix<f32, nalgebra::base::dimension::U4, nalgebra::base::dimension::U4, nalgebra::base::array_storage::ArrayStorage<f32, nalgebra::base::dimension::U4, nalgebra::base::dimension::U4>>::new_orthographic
             at C:\Users\USER\.cargo\registry\src\github.com-1ecc6299db9ec823\nalgebra-0.18.0\src\base\cg.rs:118
   9: coffee::graphics::transformation::Transformation::orthographic
             at C:\Users\USER\.cargo\registry\src\github.com-1ecc6299db9ec823\coffee-0.3.1\src\graphics\transformation.rs:30
  10: coffee::graphics::target::Target::new
             at C:\Users\USER\.cargo\registry\src\github.com-1ecc6299db9ec823\coffee-0.3.1\src\graphics\target.rs:32
  11: coffee::graphics::window::frame::Frame::as_target
             at C:\Users\USER\.cargo\registry\src\github.com-1ecc6299db9ec823\coffee-0.3.1\src\graphics\window\frame.rs:55
  12: coffee::graphics::window::frame::Frame::clear
             at C:\Users\USER\.cargo\registry\src\github.com-1ecc6299db9ec823\coffee-0.3.1\src\graphics\window\frame.rs:62
  13: example::gui::{{impl}}::draw
             at .\client\src\gui.rs:29
  14: coffee::game::Game::run<example::gui::MyGame>
             at C:\Users\USER\.cargo\registry\src\github.com-1ecc6299db9ec823\coffee-0.3.1\src\game.rs:217
  15: example::gui::start
             at .\client\src\gui.rs:6
  16: example::main
             at .\client\src\main.rs:4
  17: std::rt::lang_start::{{closure}}<()>
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\src\libstd\rt.rs:64
  18: std::rt::lang_start_internal::{{closure}}
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\/src\libstd\rt.rs:49
  19: std::panicking::try::do_call<closure,i32>
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\/src\libstd\panicking.rs:296
  20: panic_unwind::__rust_maybe_catch_panic
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\/src\libpanic_unwind\lib.rs:82
  21: std::panicking::try
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\/src\libstd\panicking.rs:275
  22: std::panic::catch_unwind
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\/src\libstd\panic.rs:394
  23: std::rt::lang_start_internal
             at /rustc/eae3437dfe991621e8afdc82734f4a172d7ddf9b\/src\libstd\rt.rs:48
  24: main
  25: invoke_main
             at d:\agent\_work\3\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:78
  26: __scrt_common_main_seh
             at d:\agent\_work\3\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:288
  27: BaseThreadInitThunk
  28: RtlUserThreadStart
error: process didn't exit successfully: `target\debug\example.exe` (exit code: 101)
```

I guess this can be solved in [here](https://github.com/hecrj/coffee/blob/master/src/graphics/window/frame.rs#L55).