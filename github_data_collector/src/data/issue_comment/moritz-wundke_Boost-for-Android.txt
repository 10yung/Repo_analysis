I am able to build arm v7 and v8 without trouble, but am unable to build for the emulator architectures with my setup.

I have VS2019 Version 16.4.0 Preview 4.0
I am using the latest NDK that comes with their Microsoft Android SDK Repo. 20.0.55945870

Any advice would be appreciated.  I was previously able to build all architectures with a slightly different configuration with NDK 16b, but want the latest if at all possible.
When building 1.70.0 with NDK 20: 

```
warning for library: ../build/build/arm64-v8a/boost/bin.v2/libs/atomic/build/clang-darwin-arm64v8a/release/link-static/target-os-android/threading-multi/visibility-hidden/libboost_atomic-clang-darwin-mt-a64-1_70.a the table of contents is empty (no object file members in the library define global symbols)
```
> cd Boost-for-Android
> ./build-android.sh --verbose --boost=1.70.0 /home/wyt/bin/android-ndk-r20 --prefix=/home/wyt/bin/android-ndk-r20/boost_install

all compile success

Application.mk
> APP_ABI :=   armeabi-v7a   arm64-v8a  x86  x86_64
> APP_PLATFORM = android-16
> APP_STL := c++_shared


Android.mk
> LOCAL_PATH := $(call my-dir)
> include $(CLEAR_VARS)
> 
> LOCAL_MODULE    := territory
> LOCAL_LDLIBS    := -landroid -llog
> 
> LOCAL_CXXFLAGS  := -std=c++11 -Werror
> LOCAL_CPPFLAGS  += -fexceptions
> LOCAL_CPPFLAGS  += -frtti
> LOCAL_CXXFLAGS  += -I$(LOCAL_PATH)/../../
> LOCAL_CXXFLAGS  += -I$(LOCAL_PATH)/../../territory-include/
> LOCAL_CXXFLAGS  += -I$(LOCAL_PATH)/../../territory-dll/
> LOCAL_CXXFLAGS  += -I$(LOCAL_PATH)/../../territory-src/
> LOCAL_CXXFLAGS  += -I$(LOCAL_PATH)/../../territory-src/engine/
> LOCAL_CXXFLAGS  += -I$(LOCAL_PATH)/../../territory-src/goboard/
> LOCAL_CXXFLAGS  += -I$(LOCAL_PATH)/../../territory-src/gtp/
> LOCAL_CXXFLAGS  += -I$(LOCAL_PATH)/../../territory-src/legacy/
> LOCAL_CXXFLAGS  += -I$(LOCAL_PATH)/../../territory-src/utils/
> 
> NDK_BOOST_PATH=/home/wyt/bin/android-ndk-r20/boost_install
> ifeq ($(TARGET_ARCH), x86)
> 	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOCAL_CXXFLAGS  += -I$(NDK_BOOST_PATH)/x86/include/boost-1_70
> 	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOCAL_LDLIBS    += -L$(NDK_BOOST_PATH)/x86/lib
> else ifeq ($(TARGET_ARCH), x86_64)
> 	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOCAL_CXXFLAGS  += -I$(NDK_BOOST_PATH)/x86_64/include/boost-1_70
> 	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOCAL_LDLIBS    += -L$(NDK_BOOST_PATH)/x86_64/lib
> else ifeq ($(TARGET_ARCH), arm64)
> 	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOCAL_CXXFLAGS  += -I$(NDK_BOOST_PATH)/arm64-v8a/include/boost-1_70
> 	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOCAL_LDLIBS    += -L$(NDK_BOOST_PATH)/arm64-v8a/lib
> else ifeq ($(TARGET_ARCH), arm)
> 	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOCAL_CXXFLAGS  += -I$(NDK_BOOST_PATH)/armeabi-v7a/include/boost-1_70
> 	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOCAL_LDLIBS    += -L$(NDK_BOOST_PATH)/armeabi-v7a/lib
> else 
> 	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(error platform not support!)
> endif
> 
> LOCAL_SRC_FILES := java_bridge.cpp
> LOCAL_SRC_FILES += $(wildcard $(LOCAL_PATH)/../../territory-src/*.cpp)
> LOCAL_SRC_FILES += $(wildcard $(LOCAL_PATH)/../../territory-src/engine/*.cpp)
> LOCAL_SRC_FILES += $(wildcard $(LOCAL_PATH)/../../territory-src/goboard/*.cpp)
> LOCAL_SRC_FILES += $(wildcard $(LOCAL_PATH)/../../territory-src/gtp/*.cpp)
> LOCAL_SRC_FILES += $(wildcard $(LOCAL_PATH)/../../territory-src/legacy/*.cpp)
> LOCAL_SRC_FILES += $(wildcard $(LOCAL_PATH)/../../territory-src/utils/*.cpp)
> 
> include $(BUILD_SHARED_LIBRARY)


my ndk project compile success now, is all step correct?
I'm using cmake to cross-compile a library for Android that uses boost. I've compiled and installed boost with

```
./build-android.sh --with-libraries=filesystem --prefix=/opt/boost_arm --arch=arm64-v8a $NDK
```

which worked fine.

However, when my project tries to `find_package(Boost)`, it fails:

```
-- Scanning /opt/boost_arm/arm64-v8a/lib/cmake/boost_filesystem-1.70.0/libboost_filesystem-variant*.cmake
--   Including /opt/boost_arm/arm64-v8a/lib/cmake/boost_filesystem-1.70.0/libboost_filesystem-variant-clang-mt-a64-1_70-static.cmake
--   ... skipped libboost_filesystem-clang-mt-a64-1_70.a (clang, detected clang8, set Boost_COMPILER to override)

CMake Error at /opt/boost_arm/arm64-v8a/lib/cmake/Boost-1.70.0/BoostConfig.cmake:95 (find_package):
  Found package configuration file:

    /opt/boost_arm/arm64-v8a/lib/cmake/boost_filesystem-1.70.0/boost_filesystem-config.cmake

  but it set boost_filesystem_FOUND to FALSE so package "boost_filesystem" is
  considered to be NOT FOUND.  Reason given by package:

  No suitable build variant has been found.
```

The relevant check that fails is in `/opt/boost_arm/arm64-v8a/lib/cmake/boost_filesystem-1.70.0/libboost_filesystem-variant-clang-mt-a64-1_70-static.cmake:19`:

```cmake
if(BOOST_DETECTED_TOOLSET AND NOT BOOST_DETECTED_TOOLSET STREQUAL "clang")
  _BOOST_SKIPPED("libboost_filesystem-clang-mt-a64-1_70.a" "clang, detected ${BOOST_DETECTED_TOOLSET}, set Boost_COMPILER to override")
  return()
endif()
```

It seems like `/opt/arm64-v8a/lib/cmake/BoostDetectToolset-1.70.0.cmake` appends the compiler version number to `BOOST_DETECTED_TOOLSET`.

I'm not sure where the `"clang"` comes from. Maybe this is an issue with boost itself? Maybe I just configured something wrong? https://boostorg.github.io/build/manual/master/index.html#bbv2.reference.tools.compilers doesn't even list clang as a builtin tool.

Hi,
I need to compile my existing 32 bit app to 64bit.

1. My main app needs to be compiled against NDK-r10d
2. The app used Boost 1.55
Thus I have to compile boost 1.55 to 64 bits using NDK-r10d as well. Is this possible?
I tried but faced many errors. 
ERROR: D:/Android/Sdk/android-ndk-r18d is not a valid NDK root
For NDK r10 has support abi : `arm64-v8a`, I want to build out and `arm64-v8a` archive, but when I run with the command it told me something not support like this:
```
android@android-srv:~/android-ndk-r10b$ ../boost-for-android/Boost-for-Android-master/build-android.sh $NDK_ROOT --boost=1.53.0 --arch=arm64-v8a
To follow build in another terminal, please use: tail -F /home/android/android-ndk-r10b/logs/myst-log-13489.log
Building boost version: 1.53.0
Detected Android NDK version 10b (64-bit)
Old NDK versions only support ARM architecture
```
I Want to build out the 64-bit archive, for Google Play new policy, Please help, Thanks to anyone who could help me, Thanks. ðŸ˜­ 
build-android.bat e:/android-ndk-r20
ERROR: e:/android-ndk-r20 is not a valid NDK root

I have been experimenting with different boost build versions and different android NDK versions to try and get boost::circular_buffer to work properly without much luck.

I have experimented with building my own, but have also experimented with using the prebuilt releases (e.g., https://github.com/dec1/Boost-for-Android/releases).

In each case, I am getting situations similar to this:
![image](https://user-images.githubusercontent.com/15824440/58659482-0c80af00-82f1-11e9-8b13-f3a2678a9d37.png)

I have experimented with various different built configurations but my current setup is the following.

CMake: 3.14.4
Android NDK: 19c
Android Gradle Plugin version: 3.4.1
Gradle version: 5.1.1
C++ compiler: Clang
C++ version: 14 (also tried 17)
OS: Windows

Note that I can import boost::circular_buffer and use various different methods but some of the boost classes themselves seem to me missing imports

Any help is greatly appreciated!
Hi, great work!
I'm using your latest version, with NDK r19 and Boost 1.69.0. I'm on Ubuntu 18.04 and Android Studio 3.3.1.
I'm trying to use Boost.Locale, but getting 
```
Build command failed.
Error while executing process /home/david/Android/Sdk/cmake/3.6.4111459/bin/cmake with arguments {--build /home/david/dev/android/AppAndroidFilter/app/.externalNativeBuild/cmake/debug/x86_64 --target app}
[1/1] Linking CXX shared library ../../../../build/intermediates/cmake/debug/obj/x86_64/libapp.so
FAILED: : && /home/david/Android/Sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++  --target=x86_64-none-linux-android21 --gcc-toolchain=/home/david/Android/Sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64 -fPIC --sysroot /home/david/Android/Sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/sysroot -g -DANDROID -fdata-sections -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes -fno-addrsig -Wa,--noexecstack -Wformat -Werror=format-security -stdlib=libc++ -std=c++17 -frtti -fexceptions -O0 -fno-limit-debug-info  -Wl,--exclude-libs,libgcc.a -Wl,--exclude-libs,libatomic.a -Wl,--build-id -Wl,--warn-shared-textrel -Wl,--fatal-warnings -Wl,--no-undefined -Qunused-arguments -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now -shared -Wl,-soname,libapp.so -o ../../../../build/intermediates/cmake/debug/obj/x86_64/libapp.so CMakeFiles/app.dir/src/main/cpp/app-router/app-router.cpp.o CMakeFiles/app.dir/src/main/cpp/app-router/tcp.cpp.o CMakeFiles/app.dir/src/main/cpp/app-mitm/MITM/AsyncProxyServer.cpp.o CMakeFiles/app.dir/src/main/cpp/app-mitm/MITM/ModerateTraffic.cpp.o CMakeFiles/app.dir/src/main/cpp/app-mitm/MITM/sslsplit/ssl.c.o CMakeFiles/app.dir/src/main/cpp/app-mitm/MITM/stdafx.cpp.o CMakeFiles/app.dir/src/main/cpp/app-mitm/AsyncProxyServerDelegate.cpp.o CMakeFiles/app.dir/src/main/cpp/app-mitm/app-mitm.cpp.o CMakeFiles/app.dir/src/main/cpp/app-mitm/thread-jni-env.cpp.o CMakeFiles/app.dir/src/main/cpp/app-mitm/java-methods.cpp.o CMakeFiles/app.dir/src/main/cpp/app-mitm/process-id.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/AsyncHarmonyContext.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/AsyncMessageClient.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/AsyncMessageCommon.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/CloudRules.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/AsyncHarmonyHttpClient.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/CatMessageClient.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/Url.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/OpSync.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/StringUtilities.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/CNStoredLog.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/ThreadKeeper.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/Locksmith.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/FastStringsToFileFunnel.cpp.o CMakeFiles/app.dir/src/main/cpp/AsyncHarmony/NHideAndSeek.cpp.o CMakeFiles/app.dir/src/main/cpp/util.cpp.o CMakeFiles/app.dir/src/main/cpp/patch-table.cpp.o  /home/david/dev/android/AppAndroidFilter/Boost-for-Android/build/libs/x86_64/libboost_system-clang-mt-x64-1_69.a /home/david/dev/android/AppAndroidFilter/Boost-for-Android/build/libs/x86_64/libboost_thread-clang-mt-x64-1_69.a /home/david/dev/android/AppAndroidFilter/Boost-for-Android/build/libs/x86_64/libboost_filesystem-clang-mt-x64-1_69.a /home/david/dev/android/AppAndroidFilter/Boost-for-Android/icu/libs/x86_64/libicuuc.a /home/david/dev/android/AppAndroidFilter/Boost-for-Android/icu/libs/x86_64/libiconv.so /home/david/dev/android/AppAndroidFilter/Boost-for-Android/build/libs/x86_64/libboost_locale-clang-mt-x64-1_69.a /home/david/dev/android/AppAndroidFilter/Boost-for-Android/build/libs/x86_64/libboost_iostreams-clang-mt-x64-1_69.a /home/david/dev/android/AppAndroidFilter/build-openssl-android/openssl-lib/x86_64/libssl.a /home/david/dev/android/AppAndroidFilter/build-openssl-android/openssl-lib/x86_64/libcrypto.a /home/david/Android/Sdk/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/x86_64-linux-android/21/liblog.so -latomic -lm && :
libs/locale/src/encoding/uconv_codepage.ipp:139: error: undefined reference to 'icu_62::UnicodeString::~UnicodeString()'
libs/locale/src/encoding/uconv_codepage.ipp:139: error: undefined reference to 'icu_62::UnicodeString::~UnicodeString()'
libs/locale/src/encoding/../icu/uconv.hpp:95: error: undefined reference to 'ucnv_open_62'
libs/locale/src/encoding/../icu/uconv.hpp:112: error: undefined reference to 'UCNV_FROM_U_CALLBACK_STOP_62'
libs/locale/src/encoding/../icu/uconv.hpp:112: error: undefined reference to 'ucnv_setFromUCallBack_62'
libs/locale/src/encoding/../icu/uconv.hpp:116: error: undefined reference to 'UCNV_TO_U_CALLBACK_STOP_62'
libs/locale/src/encoding/../icu/uconv.hpp:116: error: undefined reference to 'ucnv_setToUCallBack_62'
libs/locale/src/encoding/../icu/uconv.hpp:104: error: undefined reference to 'UCNV_FROM_U_CALLBACK_SKIP_62'
libs/locale/src/encoding/../icu/uconv.hpp:104: error: undefined reference to 'ucnv_setFromUCallBack_62'
libs/locale/src/encoding/../icu/uconv.hpp:108: error: undefined reference to 'UCNV_TO_U_CALLBACK_SKIP_62'
libs/locale/src/encoding/../icu/uconv.hpp:108: error: undefined reference to 'ucnv_setToUCallBack_62'
libs/locale/src/encoding/../icu/uconv.hpp:98: error: undefined reference to 'ucnv_close_62'
libs/locale/src/encoding/../icu/uconv.hpp:120: error: undefined reference to 'ucnv_close_62'
libs/locale/src/encoding/../icu/uconv.hpp:125: error: undefined reference to 'ucnv_getMaxCharSize_62'
libs/locale/src/encoding/../icu/uconv.hpp:157: error: undefined reference to 'ucnv_close_62'
libs/locale/src/encoding/../icu/icu_util.hpp:19: error: undefined reference to 'u_errorName_62'
libs/locale/src/encoding/../icu/uconv.hpp:61: error: undefined reference to 'icu_62::UnicodeString::UnicodeString(char const*, int, UConverter*, UErrorCode&)'
libs/locale/src/encoding/../icu/uconv.hpp:64: error: undefined reference to 'icu_62::UnicodeString::~UnicodeString()'
libs/locale/src/encoding/../icu/uconv.hpp:134: error: undefined reference to 'ucnv_fromUChars_62'
libs/locale/src/encoding/uconv_codepage.ipp:54: error: undefined reference to 'icu_62::UnicodeString::~UnicodeString()'
libs/locale/src/encoding/../icu/uconv.hpp:286: error: undefined reference to 'u_strToUTF32_62'
libs/locale/src/encoding/../icu/uconv.hpp:246: error: undefined reference to 'icu_62::UnicodeString::UnicodeString(int, int, int)'
libs/locale/src/encoding/../icu/uconv.hpp:250: error: undefined reference to 'icu_62::UnicodeString::append(int)'
clang++: error: linker command failed with exit code 1 (use -v to see invocation)
ninja: build stopped: subcommand failed.
```
I added these two libraries in my `CMakeLists.txt` file:
```
add_library( libiconv SHARED IMPORTED)

set_target_properties(libiconv PROPERTIES IMPORTED_LOCATION
        ${MY_ICONV_LIBS_DIR}/${ANDROID_ABI}/libiconv.so
        )
#-----------------------------------------
add_library( libicuuc STATIC IMPORTED)

set_target_properties(libicuuc PROPERTIES IMPORTED_LOCATION
        ${MY_ICONV_LIBS_DIR}/${ANDROID_ABI}/libicuuc.a
        )
#-----------------------------------------
```

I also used
```
android {
    ...
    sourceSets {
        main {
            // Android Studio doesn't package precompiled external (*.so) libs into apk, even if linked against via "add_library (... SHARED IMPORTED) in CMakeLists.txt
            // See eg https://stackoverflow.com/questions/24357687/how-to-include-so-library-in-android-studio/29234765
            // Hopefully this will be remedied in near future.
            // As a workaroun in the meantime, need to add them manually to jniLibs.srcDirs
            // Note: This causes ALL *.so files in ABI (eg "armeabi-v7a") subdir of this dir to get packaged into .apk - relative to "app" dir
            // If you want to just include those necessary (eh chrono,, system) copy/link them to a separate dir, and reference that dir here instead.
            jniLibs.srcDirs = [
                    // should contain any external libs which should be compiled in {armeabi-v7a,arm64-v8a,x86,x86_64,mips} subdirs
                    my_boost_dir_libs,
                    my_iconv_dir_lib
                    //, "src/main/JniLibs/boost" // could add additional dirs (with ABI subdirs) to be packaged into apk like this.
                    // Relative paths like this will be interpreted as relative to "app" dir
            ]
        }

    }
}
```

Is there something else I need to do in order to link these libraries?