Hi,
After updating from `4.0.7` to `4.0.9` my `pre-push` hook stopped working.
I get error as below:

```
.git/hooks/pre-push: 70: export: refs/heads/master: bad variable name
```

.huskyrc.js
```
module.exports = {
  hooks: {
    "commit-msg": "commitlint -e $HUSKY_GIT_PARAMS",
    "pre-commit": "lint-staged",
    "pre-rebase": "lint-staged",
    "pre-push": "branch-name-lint",
  }
};
```

OS: 
Ubuntu 19.10
Node 12.13.0
Git 2.20.1

Logs: 
```
husky:debug husky v4.0.9 (created at 2020-1-17 0:11:02)
husky:debug pre-commit hook started
husky:debug Current working directory is /home/jakub/Pulpit/test5
husky:debug pre-commit hook started
husky > pre-commit (node v12.13.0)
No staged files match any of provided globs.
husky:debug yarn run --silent husky-run exited with 0 exit code
On branch chore/update
```
Using pnpm, husky v4.0.10, and this config : 

```json
  "scripts": {
    "test": "mocha 'test/**/*.test.js'",
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "pre-push": "test"
    }
  },
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  }
```
The pre-commit hook works fine, but the pre-push always fails without running test

```sh
export HUSKY_DEBUG=1
time git push
husky:debug husky v4.0.10 (created at 2020-1-16 10:01:43 AM)
husky:debug pre-push hook started
husky:debug Current working directory is /home/sesamath/projets/git/sesaparcours
husky:debug pre-push hook started
husky > pre-push (node v10.18.0)
husky > pre-push hook failed (add --no-verify to bypass)
husky:debug pnpx --no-install husky-run exited with 1 exit code
error: failed to push some refs to 'git@framagit.org:Sesamath/sesaparcours.git'

real	0m1,333s
```
but `pnpm test` works fine

```
time pnpm test > /dev/null; echo "test exit code : $?"

real	0m4,730s
user	0m4,285s
sys	0m0,453s
test exit code : 0
```

<!-- If you like husky üê∂, please consider supporting this project by clicking the Sponsor button -->

We've noticed Husky can add a significant overhead to `git` commands when used together with Yarn 2 due to the fact that it needs to spawn at least one Node process for each hook called - and multiple hooks are called when doing a commit, and Node processes aren't exactly cheap üò¢

What would you think of adding a "pay only for what you use" mode where Husky would only add hooks that are actually used by the project? In most cases, that would limit them to `precommit`, and if you want to add/remove a hook you'd just have to run `yarn husky` to regenerate them.

I could open a PR if you think that would be useful.

Hi guys. I already used husky. Unfortunatly now I work for a project where if user push on master, the push will trigger a production release. It is possible to catch the push with husky and print some red text color whit "are you sure? yes/no". And if User tap yes it will push
when i install husky v4.x.x, I found below error.

npm„ÄÅgit„ÄÅnode   version  is in below screenshot.
![image](https://user-images.githubusercontent.com/7927784/72220314-6ab18800-358a-11ea-9c11-a6caed25faaf.png)

I saw the source code. Found:
`process.env.INIT_CWD is undefined`
```js
// Get INIT_CWD env variable
function getInitCwdEnv() {
    const { INIT_CWD } = process.env;    //   INIT_CWD is undefined  !!!!
    if (INIT_CWD === undefined) {
        const { name, version } = which_pm_runs_1.default();
        throw new Error(`INIT_CWD is not set, please upgrade your package manager (${name} ${version})`);
    }
    debug_1.debug(`INIT_CWD is set to ${INIT_CWD}`);
    return INIT_CWD;
}
```
husky version is in below image:
![image](https://user-images.githubusercontent.com/7927784/72220437-98e39780-358b-11ea-9e2d-6c3af1aa09bb.png)



OS: MacOS 10.15.2 (19C57)
Git: git version 2.24.1

 ‚ùØ which git
/usr/local/bin/git

‚ùØ node -v
v13.5.0

‚ùØ which node
/usr/local/bin/node

‚ùØ which npx
/usr/local/bin/npx

Node.js installed with brew package manager

```
    "husky": "^4.0.6",
```

When making commit in VSCode GUI

```
Can't find npx in PATH: /usr/local/Cellar/git/2.24.1/libexec/git-core:/usr/bin:/bin:/usr/sbin:/sbin
Skipping pre-commit hook
Can't find npx in PATH: /usr/local/Cellar/git/2.24.1/libexec/git-core:/usr/bin:/bin:/usr/sbin:/sbin
Skipping prepare-commit-msg hook
Can't find npx in PATH: /usr/local/Cellar/git/2.24.1/libexec/git-core:/usr/bin:/bin:/usr/sbin:/sbin
Skipping commit-msg hook
Can't find npx in PATH: /usr/local/Cellar/git/2.24.1/libexec/git-core:/usr/bin:/bin:/usr/sbin:/sbin
Skipping post-commit hook
```

Everything works fine when making commit from VSCode terminal.

<hr>

Version 3 works fine. Sample output from v3:

```
Info: can't find node in PATH, trying to find a node binary on your system
husky > pre-commit (node v13.5.0)
Stashing changes... [started]
Stashing changes... [skipped]
‚Üí No partially staged files found...
Running tasks... [started]
Running tasks for *.{js,ts,tsx,css,md} [started]
tslint --fix [started]
tslint --fix [completed]
prettier --write [started]
prettier --write [completed]
git add [started]
git add [completed]
Running tasks for *.{js,ts,tsx,css,md} [completed]
Running tasks... [completed]
```

Support Array of Commands, will be useful for non js config files

Closes #464
The recent change to have husky exit with a real error code is causing my CI build to fail.  For a variety of historical reasons we don't have git available during our CI builds, the old behavior of having husky fail to install silently was quite beneficial to us in this situation.

I can see that generally the error code is a good thing, but would you be open to allowing a silent failure if for example a CI specific environment variable was set?

MacOS, iterm2 w/ oh-my-zsh

My config from husky 3.x is not working for 4.0.x, but works for 3.1.0. This is my config:

```
"husky": {
          "hooks": {
              "pre-commit": "lint-staged",
              "prepare-commit-msg": "./scripts/add-tp-number-to-commit.sh $HUSKY_GIT_PARAMS"
          }
      },`
```

The specific script I'm using hasn't changed, and it only uses $1 from HUSKY_GIT_PARAMS. 
Output:

```
HUSKY_DEBUG=1 git commit -m "upgrade husky version"
husky:debug husky v4.0.1 (created at 1/8/2020, 2:03:03 PM)
husky:debug pre-commit hook started
husky:debug Current working directory is /Users/parker.johnson/git/project
husky:debug pre-commit hook started
husky > pre-commit (node v13.3.0)
  ‚Üì Stashing changes... [skipped]
    ‚Üí No partially staged files found...
  ‚úî Running tasks...
husky:debug npx --no-install husky-run exited with 0 exit code
husky:debug husky v4.0.1 (created at 1/8/2020, 2:03:03 PM)
husky:debug prepare-commit-msg hook started
husky:debug Current working directory is /Users/parker.johnson/git/project
husky:debug prepare-commit-msg hook started
husky > prepare-commit-msg (node v13.3.0)
cat: message: No such file or directory
husky:debug npx --no-install husky-run exited with 1 exit code
```
Support all documented git hooks with [`git-hooks-list`](https://www.npmjs.com/package/git-hooks-list) module.

Missing hooks:

- fsmonitor-watchman
- p4-pre-submit
- post-index-change

FYI: this `git-hooks-list` module is build to sort `husky.hooks` field in package.json https://github.com/keithamus/sort-package-json/pull/103