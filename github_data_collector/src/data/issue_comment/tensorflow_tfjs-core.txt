To see the logs from the Cloud Build CI, please join either
our [discussion](https://groups.google.com/a/tensorflow.org/forum/#!forum/tfjs)
or [announcement](https://groups.google.com/a/tensorflow.org/forum/#!forum/tfjs-announce) mailing list.

This adds an app that can serve as an integration testbed for tfjs-react-native. The PR looks somewhat big because there is a fair amount of generated iOS and Android boilerplate. The files that needs review all end in `.ts` `.js` and `.tsx` (and the regular js and ts configuration files we are used to). A few assets that the app uses are also included. The android and ios subfolders are pretty much all autogenerated.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs-core/1874)
<!-- Reviewable:end -->

To see the logs from the Cloud Build CI, please join either
our [discussion](https://groups.google.com/a/tensorflow.org/forum/#!forum/tfjs)
or [announcement](https://groups.google.com/a/tensorflow.org/forum/#!forum/tfjs-announce) mailing list.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs-core/1855)
<!-- Reviewable:end -->

the TF implementation of the pix2pix model which fails conversion because of

	`Unsupported Ops: DecodeJpeg, EncodePng, DecodeBase64`

the Open NSFW model also fails conversion with some of the same ops (https://github.com/tensorflow/tfjs/issues/433).

i wanted to try to implement some of these ops in TensorFlow.js. starting with this pull request for `DecodeBase64` and `EncodeBase64`.

along with this `tfjs-core` PR, there is a corresponding PR in `tfjs-converter` (https://github.com/tensorflow/tfjs-converter/pull/376)

---

To see the logs from the Cloud Build CI, please join either
our [discussion](https://groups.google.com/a/tensorflow.org/forum/#!forum/tfjs)
or [announcement](https://groups.google.com/a/tensorflow.org/forum/#!forum/tfjs-announce) mailing list.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs-core/1779)
<!-- Reviewable:end -->

This PR aims to fix tensorflow/tfjs#1426 and replaces #1637 

After trying to implement specific webgl/cpu shaders in #1637 i realized [`ImageProjectiveTransform`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/image/kernels/image_ops.cc#L127) is not available in the [ops list](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/ops.pbtxt) of C API.

Considering this, I've implemented it in a no-shader way, using `tf.gatherND` as the cornerstone of the implementation.

This new version won't need to maintain multiple shaders but may be a little bit slower (i haven't fully tested the performance yet)

Since the implementation takes 300 lines, i have put it into a separated file required in `image_ops.ts`.

Please share your feedbacks and suggestions :-)

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs-core/1641)
<!-- Reviewable:end -->

This is an attempt to further break down/simplify [PR#1366](https://github.com/tensorflow/tfjs-core/pull/1366).

(Matrix) band part is required for the backpropagation of many linear operations. Implementation should behave the same way as in [Python/C/C++ Tensorflow](https://www.tensorflow.org/api_docs/python/tf/linalg/band_part).

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs-core/1520)
<!-- Reviewable:end -->



<!-- Reviewable:start -->
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs-core/1492)
<!-- Reviewable:end -->

FEATURE
add operator diagPart

https://github.com/tensorflow/tfjs/issues/655

#### Description
<!--
Please describe the pull request here.
Also, if this is an issue/bug fix, please add the issue link for reference here.
-->


---
<!-- Please do not delete this section -->
##### For repository owners only:

Please remember to apply all applicable tags to your pull request.
Tags: FEATURE, BREAKING, BUG, PERF, DEV, DOC, SECURITY

For more info see: https://github.com/tensorflow/tfjs/blob/master/DEVELOPMENT.md

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs-core/1427)
<!-- Reviewable:end -->

#### Description
L-BFGS optimization was a [requested feature](https://github.com/tensorflow/tfjs/issues/127). This PR offers an `LBFGSFunctionOptimizer` that allows the optimization for loss functions of type `Tensor1D => Scalar`. This is however still at least one step away from a training optimizer. Any suggestion as to how to wrap the `LBFGSFunctionOptimizer` into an `LBFGSOptimizer` for training is welcome.

Suggestions for test cases and test functions are appreciated as well.
<!--
Please describe the pull request here.
Also, if this is an issue/bug fix, please add the issue link for reference here.
-->


---
<!-- Please do not delete this section -->
##### For repository owners only:

Please remember to apply all applicable tags to your pull request.
Tags: FEATURE, BREAKING, BUG, PERF, DEV, DOC, SECURITY

For more info see: https://github.com/tensorflow/tfjs/blob/master/DEVELOPMENT.md

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs-core/1385)
<!-- Reviewable:end -->

#### Description
As discussed, this is the first split of [PR#1356](https://github.com/tensorflow/tfjs-core/pull/1356): A faster QR Decomposition using a direct implementation of the Givens method, including support of Backpropagation.

`bandPart` and `triangularSolve` are a prerequesites for symbolic backpropagation of the QR Decomposition. Since both of the methods are frequently used in symbolic backpropagation, I believe they both deserve a backend implementation. `matrixTriangularSolve` and `matrixBandParts` are kernels in the Python/C/C++ Tensorflow Implentation as well.

`bandPart` is currently implemented purely using TFJS methods. In a quick [performance trial](https://github.com/DirkToewe/tfjs-experiments/blob/master/src/tf_bandPart_benchmark.js), bandPart was only [8x slower](https://dirktoewe.github.io/tfjs-experiments/tfjs_bandPart.html) without a backend implementation. Since it is only an `O(m*n)` operation in the first place, it's not too worrysome. The memory overhead however may be more of an issue, depending on how broadcasting is implemented.

`triangularSolve` will allow solving linear equations systems in TFJS, which is a [requested feature](https://github.com/tensorflow/tfjs/issues/157).

All linting errors are now fixed, but I'm afraid the code might have become (even) less readable. Suggestions as to how to improve this are welcome. In my defense: There was method to my code-formatting-madness. Low level linear algebra is always hard to read (at least to me). So in NDJS I tried my best to format the code in a way that things that belong together are aligned, reducing distractions and making bugs easier to spot.

As I said before, it should not be too hard to implement `qr` and `triangularSolve` in WebGL1. In order to do that, I will however need some guidance and introduction to the TFJS WebGL backend.

The randomized gradients test fails by a small margin roughly every 1 in ~~10,000~~ 100,000 tests. With the old implementation (after fixing some reshape and disposal issues), it fails roughly ~~1 time in 1,000~~ 76 times in 50,000, sometimes with a large margin (Possible explaination: The Householder implementation ignores sign changes in the input causing abrupt changes in the gradients). Sadly, `tf.randomUniform` does not seem to have a seed parameter, which would make the tests reproducible.

If there are any questions about implementation details, I'm more than happy to answer them.

##### Quick Overview
The `qr` implementation is two-fold: Whenever the resulting `R` is a square matrix, the economic QR Decomposition `qrEcoDecompKernel()` is computed. For the gradients, the same symbolic backpropagation as in Python/C/C++ Tensorflow is used.

In all other cases, the full QR Decomposition is computed using `qrFullDecompKernel()`. Backpropagation is computed via `qrFullBackpropKernel()` using the Givens rotations' `sin` and `cos` values that were recorded by `qrFullDecompKernel()`. Higher order derivatives are not (yet) supported/implemented.

##### Why Givens Rotations?
The Householder method is the de-facto standard for QR Decomposition, so I feel like I have to explain why I chose Givens Rotations over it:
  * For NDJS, I did some performance trials and could not see a significant performance difference
between Givens and Householder in JS. My guess is that the JS overhead outweighs the difference
in FLOPs
  * ~~With Givens Rotations, I was able to implement an economic QR Decomposition that requires only `O(m*n)` memory instead of `O(m²)`. For Householder, I could not find such an implementation.~~
  * Givens Methods is easier to implement in a numerically stable way (e.g. no underflow-safe norm 
 is required).
  * Givens Method is easier to backpropagate.
  * Givens Method guarantees `det(Q) = +1`, which is somewhat more canonical.
  * Givens Method is better parallelizable.
  * Givens Rotations seem to be smoother when it comes to Pertubation (Householder: do You reflect colum `c` to `+‖c‖e` or `-‖c‖e`). This should result in smoother gradients.
  * If the input is already close to upper triangular, a lot of operations can easily be skipped which may reduce the computation cost from `O(m²n)` all the way down to `O(m*n)` for upper triangular inputs.

---
<!-- Please do not delete this section -->
##### For repository owners only:

Please remember to apply all applicable tags to your pull request.
Tags: FEATURE, BREAKING, BUG, PERF, DEV, DOC, SECURITY

For more info see: https://github.com/tensorflow/tfjs/blob/master/DEVELOPMENT.md

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs-core/1366)
<!-- Reviewable:end -->

matMul now supports broadcasting

#### Description
Linear algebra operations seem to be widely requested and help was wanted, so I thought I'd try and help:
  * `qr()` now has a "low-level" CPU-implementation. At least on my machine this massively improves performance and memory efficiency.
  * `lu()` and `luSolve()` allow solving LES via LU Decomposition.
  * `cholesky()` and `choleskySolve()` allow solving symmetric positive definite LES via Cholesky Decomposition.
  * `triangularSolve` allows solving triangular LES or LES viar QR Decomposition.
  * `adjoint` and `conj` are now implemented.
  * `setDiag`, `diagPart` and `bandPart` were implemented for symbolic backpropagation.
  * `broadcastTo` is now implemented.
  * `matMul` now supports (matrix) broadcasting.


*P.S:* A proof of concept WebGL implementation of the Cholesky Decomposition can be found [here](https://github.com/DirkToewe/ndjs/blob/master/experiments/gl_cholesky_v2.js). I will require some guidance if I am supposed to work it into TFJS as a Vertex Shader and some non-Tensor uniform parameters are required. QR and LU Decompostion as well as `triangularSolve` should not be to difficult to implement either.

*P.P.S.:* This is my first time with TypeScript and about my third time with JS, so I apologize is the code is not up to standard. The linting requirements aren't even remotely met yet. I will fix that iff/once the commit is otherwise accepted.

---
<!-- Please do not delete this section -->
##### For repository owners only:

Please remember to apply all applicable tags to your pull request.
Tags: FEATURE, BREAKING, BUG, PERF, DEV, DOC, SECURITY

For more info see: https://github.com/tensorflow/tfjs/blob/master/DEVELOPMENT.md

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs-core/1356)
<!-- Reviewable:end -->
