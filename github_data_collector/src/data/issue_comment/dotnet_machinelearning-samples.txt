I need to know how to calculate the Within-Cluster-Sum of Squared Errors (WSS) for different values of k, do we have any samples for this to use it for Elbow method. 

Or do you have any other method samples to find optimal number of clusters in K-Mean Silhouette Method or Gap analysis.

Please let me know i want to use it for my usescase to find optimal number of clusters.
Greetings,

thanks for providing ML.net to us, you're really doing great work for the .NET community here.

With ML.net 1.1.0 you introduced the possibility to use in-memory data such as images (#3263) along with two samples to use them.  
I'm still having trouble conveying the concept to using in-memory images for the [object detection sample](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning_ObjectDetection_Onnx).

Would it be possible to adapt the sample with the alternative to load an image from memory (`Bitmap.FromFile()` for instance) or explain how we could do that here?

Thanks in advance, best regards and keep up the great work
-Simon




.NET Core 2.2 reaches end of life December 23. Either upgrade the version to 3.1 LTS, which is what users should be already doing anyway, or target multiple versions of .NET Core so users who are still on 2.x are not broken.
Hi there, I'm just loading up the material for the style transfer example. We'll do a once over and then have a review, if that works for the team.

Feel free to message me via email or teams (v-threid@microsoft.com)

Thanks! Tom
Hi,
     I trying to modify https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning_ObjectDetection_Onnx sample code use my onnx model to classify my image. When I want to get image result 
from OnnxModelScorer.cs, I meet exception like
 {"Splitter/consolidator worker encountered exception while consuming source data"}

Could any one tell me how to improve my code?

Thanks for your attention,
Rick

Here is my model
![model](https://user-images.githubusercontent.com/53546552/69841709-4419e500-129b-11ea-8e0c-e9bb50203539.png)

//input_image
![image](https://user-images.githubusercontent.com/53546552/69848392-f7db9e80-12b4-11ea-83e3-fd157a17876c.png)

//Add
![image](https://user-images.githubusercontent.com/53546552/69848499-396c4980-12b5-11ea-9a80-8a326b7f0ce4.png)

//input_label
![image](https://user-images.githubusercontent.com/53546552/69848548-59037200-12b5-11ea-9866-47f1cd03590b.png)

//Concat
![image](https://user-images.githubusercontent.com/53546552/69848590-720c2300-12b5-11ea-9ed5-baabad91163a.png)

//concatenate_1
![image](https://user-images.githubusercontent.com/53546552/69848611-82bc9900-12b5-11ea-996c-cc4136a52c02.png)


According to my model, I modify my relate .cs file as below

 ImageNetPrediction.cs

    public class ImageNetPrediction
    {
        [ColumnName("concatenate_1")]
        public string PredictedLabels;
    }


ImageNetData.cs

    public class ImageNetData
    {
        [LoadColumn(0)]
        public string input_image;
        public static IEnumerable<ImageNetData> ReadFromFile(string imageFolder)
        {
            return Directory .GetFiles(imageFolder)
                     .Where(filePath => Path.GetExtension(filePath) != ".md")
                     .Select(filePath => new ImageNetData { input_image = filePath });
        }
    }



OnnxModelScorer.cs

    public struct ImageNetSettings
    {
     public const int imageHeight = 224;
     public const int imageWidth = 224;
    }

    private ITransformer LoadModel(string modelLocation)
    {
            Console.WriteLine("Read model");
            Console.WriteLine($"Model location: {modelLocation}");
            Console.WriteLine($"Default parameters: image size=({ImageNetSettings.imageWidth}, 
                                             {ImageNetSettings.imageHeight})");

            var pipeline = mlContext.Transforms.LoadImages(outputColumnName: "input_image",     imageFolder: "", inputColumnName: nameof(ImageNetData.input_image))
                           .Append(mlContext.Transforms.ResizeImages(outputColumnName: "input_image", imageWidth: ImageNetSettings.imageWidth, imageHeight: ImageNetSettings.imageHeight, inputColumnName: "input_image"))
                           .Append(mlContext.Transforms.ExtractPixels(outputColumnName: "input_image"))
                           .Append(mlContext.Transforms.ApplyOnnxModel(modelFile: modelLocation, outputColumnNames: new[] { TinyYoloModelSettings.ModelOutput }, inputColumnNames: new[] { TinyYoloModelSettings.ModelInput}));

            // Fit scoring pipeline
            var model = pipeline.Fit(data);
            return model;
    }

    private IEnumerable<float[]> PredictDataUsingModel(IDataView testData, ITransformer model)
    {
            Console.WriteLine($"Images location: {imagesFolder}");
            Console.WriteLine("");
            Console.WriteLine("=====Identify the objects in the images=====");
            Console.WriteLine("");

            IDataView scoredData = model.Transform(testData);

            IEnumerable<float[]> probabilities = scoredData.GetColumn<float[]>(TinyYoloModelSettings.ModelOutput);

           //get image result
            var result = probabilities.ElementAt(0);

            return probabilities;
    }

Updated web ranking sample to 1.4 - this fixes the null reference crash that was happening now that we no longer need to use reflection for getting evaluation metrics for different NDCG values.
Added a new sample on how to cluster news articles.
Sample data came from https://www.kaggle.com/rmisra/news-category-dataset, but it's a subset of it and wanted to keep it smaller.
This addresses: dotnet/machinelearning#4106
Projects updated with ml.net v1.4