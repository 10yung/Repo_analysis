
Just ran

	gofmt -w .

on the project root. That's all.

https://blog.golang.org/go-fmt-your-code

---
> I made this PR with a project going on over at https://github.com/rotblauer/gofmt-att, and it's definitely a work in progress. So if I got something wrong, or this is annoying at all, please file an issue over there and we'll sort it out.
Since this repo is no longer maintained, it should probably be [archived](https://help.github.com/articles/archiving-a-github-repository/). This may help make it more obvious, as well.
If there is an error and the returned container is nil, `containerLogs` panics. This branches to ensure `containerLogs` isn't called with `nil`.
See issue #311 where @mattes states;

> Everyone,
> 
> I started migrate 3 years ago and I'm happy it's seeing widespread adoption. I see forks at @99designs, @codeship, @uber, @segmentio, @newrelic, @gitGNU, @postmates and many more who find migrate helpful and try to help pushing it forward.
> 
> Some months ago I co-founded www.templarbit.com and ever since things are busier than ever. It's unfortunate, but I won't be able to keep maintaining migrate.
> 
> Who is interested in stepping in and taking migrate over?

The most active successor seems to be this;

https://github.com/golang-migrate/migrate

Thanks @mattes for your efforts in bringing it this far! üëç
Hi, doing the following code, i still get a "can't acquire lock" error

```go
if err := m.Up(); err != nil && err != migrate.ErrNoChange && err != migrate.ErrLocked {
	logger.Fatalf("migrating up: %v", err)
}
```

any idea why?
would like someone implements support one of following tools?
for your great tool
https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html
https://github.com/github/gh-ost
https://github.com/facebookincubator/OnlineSchemaChange
SQL migrations is a good thing, but likely useless in many cases. Migrate must support go migrations, i.e a function that accepts an instance of the database or a transaction object (in case of SQL datastores).
Something along the lines of this to up the version:
```go
func up(tx *sql.Tx) error {
         _, err := tx.Exec("ALTER TABLE calls ADD stats text;")
	return err
}
```
down also looks the same:
```go
func down(tx *sql.Tx) error {
	_, err := tx.Exec("ALTER TABLE calls DROP COLUMN stats;")
	return err
}
```

‚Ä¶ents in a single migrate file (up/down)
Truncate cause an implicit commit
https://mariadb.com/kb/en/library/sql-statements-that-cause-an-implicit-commit/
Currently all database backends must be compiled into `migrate`. Some issues with this:

 * There is a short-term annoyance with this that a recompilation is needed to add a new backend.
 * There is also a long-term risk that two backends will require different incompatible versions of a third party library.
 * Will allow external plugins outside of this repository to make each plugin maintained by different maintainers.

What are your thoughts on this?