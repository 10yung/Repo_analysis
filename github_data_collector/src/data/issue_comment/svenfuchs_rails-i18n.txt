
Like x hours ago vs in x hours. 

In English it's can be extended with a little bit of hacking by adding the ago and in words to the beginning or the end of the sentence, but it causes issues when localized to other languages.

In hungarian for example it would be "x órája" or "x órával ezelőtt" for past and "x óra múlva" for future. Notice how the inflections are different for "óra" based on wether it's in the past or the future.

It's also weird that the "ago" and "in" words are not included in the generated text.

Wrong: debe ser un número non
Correct: debe ser un número impar
### Summary 
The problem was already mentioned in  [apidock in 2008](https://apidock.com/rails/ActionView/Helpers/NumberHelper/number_to_currency#259-number-to-euro).
There is no valid scenario where a symbol should be separated from the amount it describes, it's as bad as breaking the number itself, so this behavior should be finally addressed, imho.

### Steps to reproduce
Use some locale where the currency symbol has a space in it, like `de`
```ruby
HTMLEntities.new.encode(Class.new.extend(ActionView::Helpers::NumberHelper).number_to_currency(12, locale: 'de'), :named)
=> "12,00 &euro;"
```
Because of the simple space the semantic is:
> if needed is ok to separate "12,00" from "&euro;"

which is not true.

### Expected behavior
The space need to be considered part of the currency, so it should be a non-breaking space.
The expected result should be: `12,00&nbsp;&euro;`

### Work around
Replacing the space by `nbsp` would sort it out (a proven work around for over 11 years):
```ruby
HTMLEntities.new.encode(Class.new.extend(ActionView::Helpers::NumberHelper).number_to_currency(12, locale: 'de').gsub(' ',"\u00A0"), :named)
=> "12,00&nbsp;&euro;"
```
### Proposal

replace the `format: "%n %u"` of the locale (example of `de`:
https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/de.yml#L159)

by `format: "%n\u00A0%u"`
Is there a way to downcase a locale URL in the browser. For instance, https://example.com/fr-CA to https://example.com/fr-ca?

I know this is likely off-topic.
We have an app which currently has 5 languages, with more being added slowly.

How can we allow the user to for example use Spanish as a language, but have the currency of Chile, Argentina or Bolivia etc (and not use the Euro)?

We already have `@company.locale` and we would like to add `@company.currency`.
Then we could do something like: `number_to_currency(price, locale: @company.currency)`

Our problem at the moment is how to **select** the currency **with the country name** in a dropdown.

This is how we choose between allowed languages `@company.locale`
```ruby
[:en, :de, :is, :fr, :es, :'en-GB'].map do |locale|
  [I18n.t('name', locale: locale), locale.to_s]
end
```

This is how we _could_ choose between all supported currencies `@company.currency` but this **only shows the unit**
```ruby
I18n.available_locales.map do |locale|
  [ I18n.t('number.currency.format.unit', locale: locale),  locale.to_s ]
end
```

How can we also show the country belonging to each currency unit?

I also asked this on [SO](https://stackoverflow.com/questions/58357673/how-to-allow-users-to-select-all-currencies-but-with-limited-languages?noredirect=1#comment103079130_58357673)
there is a key that is failing: `cs.activerecord.errors.messages.restrict_dependent_destroy.has_many` /has_one,

should be: 
`de.activerecord.errors.messages.restrict_dependent_destroy.one` /other
```
 1) a rails-i18n rails/locale/te.yml locale file should not have legacy interpolations
     Failure/Error: it { should_not have_legacy_interpolations }

     ArgumentError:
       invalid byte sequence in US-ASCII
     # /usr/local/bundle/gems/i18n-spec-0.6.0/lib/i18n-spec/matchers/have_legacy_interpolations.rb:4:in `block (2 levels) in <top (required)>'
     # ./spec/unit/translation_spec.rb:14:in `block (3 levels) in <top (required)>'

Finished in 0.48971 seconds (files took 0.35761 seconds to load)
1835 examples, 1 failure

Failed examples:

rspec './spec/unit/translation_spec.rb[1:5]' # a rails-i18n rails/locale/te.yml locale file should not have legacy interpolations
```
more common language.