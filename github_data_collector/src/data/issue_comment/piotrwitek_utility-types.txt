## Is your feature request related to a real problem or use-case?
This type can be usefull to reverse required and optional properties of an object.
Related question: https://stackoverflow.com/questions/57593022/reverse-required-and-optional-properties.

## Describe a solution including usage in code example
Solution:
```ts
import { RequiredKeys, OptionalKeys } from 'utility-types';
export declare type Flip<T> = Partial<Pick<T, RequiredKeys<T>>> & Required<Pick<T, OptionalKeys<T>>>;
```
Usage:
```ts
import { Flip } from 'utility-types';

type MyObject = {
  a: number
  b?: number
  c?: number
};

type MyFlippedObject = Flip<MyObject>;
// Should be
// type MyObject = {
//  a?: number
//  b: number
//  c: number
// };
```


## Who does this impact? Who is this for?
TypeScript users.

## Is your feature request related to a real problem or use-case?
Yes, for instance to exclude `__typename` field from generated GraphQL type
As a reference - [question on stack overflow](https://stackoverflow.com/questions/55539387/deep-omit-with-typescript) 

## Describe a solution including usage in code example
Proposed solution (works for typescript 3.7, but I have not tested with union types)
```ts
import { Primitive } from 'utility-types'

type DeepOmitObject<T extends object, K> = {
  [P in Exclude<keyof T, K>]: DeepOmit<T[P], K>
}

type DeepOmitArray<T extends any[], K> = {
  [P in keyof T]: DeepOmit<T[P], K>
}

export type DeepOmit<T, K> =
  T extends Primitive ? T :
    T extends object ? DeepOmitObject<T, K> :
      T extends Array<infer E> ? Array<DeepOmit<E, K>> :
        T extends any[] ? DeepOmitArray<T, K> :
          never 
```

## Who does this impact? Who is this for?
TypeScript users.
## Is your feature request related to a real problem or use-case?
<!-- A clear description of your problem or use-case-->
As most of you probably know Typescript 3.4 added the 'as const' assertion to get a non-widening type literal with object attributes set as readonly (in typescript).

Now that construct in itself is very valuable. But since the beginning I was irked by the fact that AFAIK theres no clean way to validate such a type, the very thing Typescript was made for.

I regularly use unmodified Objects to provide config of how precisely my application works (I. E. Testing conditions, shown tabs etc), and being able to do that with non-widening type literals is making things easier and typesafer.

Today I got to this issue another time, and decided thats enough and decided to hack a quick helper together.

The only Article I could find in my quick search was this:
https://fettblog.eu/typescript-validate-mapped-types-and-const-context/
(the `validate` type near the end)
but this isnt quite what I was looking for.

So my solution looks different. Its also not ideal, while the Solution I linked needs a runtime check or assertion (which would not be type save) every time the variable is used, mine has considerable runtime overhead upon creation of the variable. But ultimately that shouldnt be a large problem for my most common usecase for checked non-widening literals, being configuration with file-global variables that only get created once on spin-up.

I also earlier implemented a alternative solution with a little less overhead but pretty confusing syntax, which wouldnt be possible to offer in a library (well, unless they typecheck their libraries). 

SInce I hacked this together pretty quickly and see many issues I wanted to discuss this issue, if you find this an issue too and possible solutions here.

## Describe a solution including usage in code example
```ts
export const getConstValidator = <ValidType extends unknown>() => <ConcreteType extends readonly ValidType[]>(value: ConcreteType) => value;

export const getConstArrayValidator = <ValueType extends unknown>() => <ConcreteArrayType extends readonly ValueType[]>(array: ConcreteArrayType) => array;

export const getConstDictValidator = <ValueType extends unknown>() => <ConcreteDictType extends {readonly [key: string]: ValueType}> (dict: ConcreteDictType) => dict;

// usage:
const validatedConstAssertedDict = getConstDictValidator<{field: number}>()({
    "some dict field": {
        field: 4,
    },
} as const)
```

Alternative from https://fettblog.eu/typescript-validate-mapped-types-and-const-context/:
```ts
type Validate<T, U> = T extends U ? T : never; 

//usage:
const correctImpl = {
  test: { open: 'CHANNEL_OPEN', close: 'CHANNEL_CLOSE', fail: 'CHANNEL_FAIL' }
} as const;

const wrongImpl = {
  test: { open: 'OPEN_CHANNEL', close: 'CHANNEL_CLOSE', fail: 'CHANNEL_FAIL' }
} as const;


// ✅ returns typeof correctImpl
type ValidatedCorrect 
  = Validate<typeof correctImpl, ChannelDefinition>;

// 💥 returns never
type ValidatedWrong 
  = Validate<typeof wrongImpl, ChannelDefinition>;
```

The alternative I used a few times before (unclear syntax though, has to be done manually each time etc.)

```ts
const constAssertedDict = {
    "some dict field": {
        field: 4,
    },
} as const

{
    const assertCorrectType: {[key: string]: {field: number}} = constAssertedDict
}
```

## Who does this impact? Who is this for?
People who love to use non-widening literals for configuration of the apps behavior, but want to type-test them without having to resort to other validators in the pipeline

## Describe alternatives you've considered (optional)
Listed a few alternatives in the main part.

Alternatively you could decide its not worth it (its for me though).


## Additional suggestions/issues
If we decide to offer this in this library, there is another issue with the usage of these type literals in code, that being that typescript current default type implementation of Object.entries, Object.keys etc. don't take advantage of type literals but will widen the type even if it's non-widening

So to use the config objects in some places I have to resort either to type assertion in-place or provide a correctly typed alternative.

The most elegant way to do this I've found is to provide an alias for these methods with their type asserted to the non-widend return-value (write this on the phone, like some above code, so might not work exactly like that but should get the point across):

```ts
const objectEntries = Object.entries as unknown as
    <DictLiteral extends object>(dict: DictLiteral) => ValuesType<{[key in keyof DictLiteral]:[key, DictLiteral[key]] } >[];
```

Now, if we decide to offer such a thing this could lead to some issues with browser compatibility, as Object.entries etc are not fully supported by all browsers and I'm not certain if all polyfill-pipelines do support polyfilling library code. This it might be better to just offer the types you cast the functions too, Or even modify the global type definitions.
<!-- Thank you for your contribution! :thumbsup: -->
<!-- Please makes sure that these checkboxes are checked before submitting your PR, thank you! -->

## Description
Add `Augmented*` types for consistency

## Related issues:
- Resolved #112 

## Checklist

* [x] I have read [CONTRIBUTING.md](https://github.com/piotrwitek/utility-types/blob/master/CONTRIBUTING.md)
* [x] I have linked all related issues above
* [x] I have rebased my branch

For new features:
* [x] I have added entry in TOC and API Docs
* [x] I have added a short example in API Docs to demonstrate new usage
* [x] I have added type unit tests with `dts-jest`

## Is your feature request related to a real problem or use-case?
<!-- A clear description of your problem or use-case-->
We have `DeepReadonly<T>`, `DeepMutable<T>` (added in #114), `DeepRequired<T>`, `DeepNonNullable<T>`, and `DeepPartial<T>`. We should have consistency in their code.

## Describe a solution including usage in code example
<!-- A clear description of the solution including usage with complete code examples, nicely formatted with "```ts" tags (especially if that's a new api proposal) -->

Proposed changes are below with inline comments:
```diff
diff --git a/src/mapped-types.ts b/src/mapped-types.ts
index 862b9c4..fbbb6c2 100644
--- a/src/mapped-types.ts
+++ b/src/mapped-types.ts
@@ -392,13 +392,13 @@ export type PromiseType<T extends Promise<any>> = T extends Promise<infer U>
  *   };
  *   type ReadonlyNestedProps = DeepReadonly<NestedProps>;
  */
-export type DeepReadonly<T> = T extends ((...args: any[]) => any) | Primitive
+export type DeepReadonly<T> = T extends ((...args: any[]) => any) | Primitive | null | undefined // null and undefined not needed after #113
   ? T
-  : T extends _DeepReadonlyArray<infer U>
-  ? _DeepReadonlyArray<U>
-  : T extends _DeepReadonlyObject<infer V>
-  ? _DeepReadonlyObject<V>
-  : T;
+  : T extends _DeepReadonlyArray<any> // _DeepXXXArray<any> vs any[] described below
+  ? _DeepReadonlyArray<T[number]> // Don't need to infer on Arrays, can just index with number
+  : T extends _DeepReadonlyObject<infer U> // _DeepXXXObject<infer U> vs object described below
+  ? _DeepReadonlyObject<U>
+  : never; // all primitives and non-primitives are covered and this case will never happen
 /** @private */
 // tslint:disable-next-line:class-name
 export interface _DeepReadonlyArray<T> extends ReadonlyArray<DeepReadonly<T>> {}
@@ -407,6 +407,21 @@ export type _DeepReadonlyObject<T> = {
   readonly [P in keyof T]: DeepReadonly<T[P]>
 };
 
+export type DeepMutable<T> = T extends ((...args: any[]) => any) | Primitive | null | undefined // added in #114; null and undefined not needed after #113
+  ? T
+  : T extends _DeepMutableArray<any> // _DeepXXXArray<any> vs any[] described below
+  ? _DeepMutableArray<T[number]> // Don't need to infer on Arrays, can just index with number
+: T extends _DeepMutableObject<infer U> // _DeepXXXObject<infer U> vs object described below
+  ? _DeepMutableObject<U>
+  : never; // all primitives and non-primitives are covered and this case will never happen
+/** @private */
+// tslint:disable-next-line:class-name
+export interface _DeepMutableArray<T> extends Array<DeepMutable<T>> {}
+/** @private */
+export type _DeepMutableObject<T> = {
+  -readonly [P in keyof T]: DeepMutable<T[P]>
+};
+
 /**
  * DeepRequired
  * @desc Required that works for deeply nested structure
@@ -427,13 +442,13 @@ export type _DeepReadonlyObject<T> = {
  *   };
  *   type RequiredNestedProps = DeepRequired<NestedProps>;
  */
-export type DeepRequired<T> = T extends (...args: any[]) => any
+export type DeepRequired<T> = T extends ((...args: any[]) => any) | Primitive | null | undefined // Move functions/primitives to be handled in one place; null and undefined not needed after #113
   ? T
   : T extends any[] // _DeepXXXArray<any> vs any[] described below
   ? _DeepRequiredArray<T[number]> // Don't need to infer on Arrays, can just index with number
   : T extends object // _DeepXXXObject<infer U> vs object described below
   ? _DeepRequiredObject<T>
-  : T;
+  : never; // all primitives and non-primitives are covered and this case will never happen
 /** @private */
 // tslint:disable-next-line:class-name
 export interface _DeepRequiredArray<T>
@@ -464,13 +479,13 @@ export type _DeepRequiredObject<T> = {
  *   };
  *   type RequiredNestedProps = DeepNonNullable<NestedProps>;
  */
-export type DeepNonNullable<T> = T extends (...args: any[]) => any
+export type DeepNonNullable<T> = T extends ((...args: any[]) => any) | Primitive | null | undefined
   ? T
   : T extends any[] // _DeepXXXArray<any> vs any[] described below
   ? _DeepNonNullableArray<T[number]> // Don't need to infer on Arrays, can just index with number
   : T extends object // _DeepXXXObject<infer U> vs object described below
   ? _DeepNonNullableObject<T>
-  : T;
+  : never; // all primitives and non-primitives are covered and this case will never happen
 /** @private */
 // tslint:disable-next-line:class-name
 export interface _DeepNonNullableArray<T>
@@ -500,13 +515,13 @@ export type _DeepNonNullableObject<T> = {
  *   };
  *   type PartialNestedProps = DeepPartial<NestedProps>;
  */
-export type DeepPartial<T> = T extends Function
-  ? T
-  : T extends Array<infer U>
-  ? _DeepPartialArray<U>
-  : T extends object
-  ? _DeepPartialObject<T>
-  : T | undefined;
+export type DeepPartial<T> = T extends ((...args: any[]) => any) | Primitive | null | undefined // Change Function to explicit declaration; Move functions/primitives to be handled in one place; null and undefined not needed after #113
+  ? T | undefined
+  : T extends _DeepPartialArray<any> // _DeepXXXArray<any> vs any[] described below
+  ? _DeepPartialArray<T[number]> // Don't need to infer on Arrays, can just index with number
+  : T extends _DeepPartialObject<infer U> // _DeepXXXObject<infer U> vs object described below
+  ? _DeepPartialObject<U>
+  : never; // all primitives and non-primitives are covered and this case will never happen
 /** @private */
 // tslint:disable-next-line:class-name
 export interface _DeepPartialArray<T> extends Array<DeepPartial<T>> {}
```

`_DeepXXXArray<any>` vs any[] and `_DeepXXXObject<infer U>` vs object:
`DeepReadonly<T>`, `DeepMutable<T>`, and `DeepPartial<T>` use `_DeepXXXArray<any>` and `_DeepXXXObject<infer U>` for their array and object cases respectively.

However, `DeepRequired<T>` and `DeepNonNullable<T>` use `any[]` and `object`.

The reason to use `_DeepXXXArray<any>` and `_DeepXXXObject<infer U>` is because the following test fails with `any[]` and `object`:
Using `any[]` and `object`, causes two `_DeepReadonlyObject` to show up in the snapshot.
```diff
● DeepReadonly › testType<DeepReadonly<DeepReadonly<NestedProps>>>() › (type) should match snapshot

  expect(value).toMatchSnapshot()
  
  Received value does not match stored snapshot 1.
  
- "_DeepReadonlyObject<{ first: { second: { name: string; }; }; }>"
+ "_DeepReadonlyObject<_DeepReadonlyObject<{ first: { second: { name: string; }; }; }>>"
```

`DeepRequired<T>` and `DeepNonNullable<T>` seem to only work with `any[]` and `object` because they use `NonUndefined<T>` and `NonNullable<T>` in their `_DeepXXXArray<T>` and `_DeepXXXObject<T>` definitions. I have to double check.

## Who does this impact? Who is this for?
<!-- Who is this for? All users? TypeScript users? Yourself? People using X, Y, Z, etc.? -->
TypeScript users.
## Is your feature request related to a real problem or use-case?
<!-- A clear description of your problem or use-case-->
Related to #27 and #111.
We have `DeepPartial<T>`, `DeepRequired<T>`, and `DeepReadonly<T>`. We should also add `DeepMutable<T>`.

Similar to #112, maybe we should have a `DeepOptional<T>` that would be an alias of `DeepPartial<T>`.

## Describe a solution including usage in code example
<!-- A clear description of the solution including usage with complete code examples, nicely formatted with "```ts" tags (especially if that's a new api proposal) -->
```ts
export type DeepMutable<T> = T extends ((...args: any[]) => any) | Primitive | null | undefined
  ? T
  : T extends _DeepMutableArray<any>
  ? _DeepMutableArray<T[number]>
: T extends _DeepMutableObject<infer U>
  ? _DeepMutableObject<U>
  : never;
/** @private */
// tslint:disable-next-line:class-name
export interface _DeepMutableArray<T> extends Array<DeepMutable<T>> {}
/** @private */
export type _DeepMutableObject<T> = {
  -readonly [P in keyof T]: DeepMutable<T[P]>
};
```

## Who does this impact? Who is this for?
<!-- Who is this for? All users? TypeScript users? Yourself? People using X, Y, Z, etc.? -->
TypeScript users.
## Is your feature request related to a real problem or use-case?
<!-- A clear description of your problem or use-case-->
Related to #27. I added `Mutable<T>` in #111.

For optional properties, we have `Optional<T, K>` and `Required<T, K>` (`AugmentedRequired<T, K>` in our codebase).

To be consistent, we should also have `AugmentedMutable<T, K>` and `AugmentedReadonly<T, K>`.

Maybe we should even have `AugmentedPartial<T, K>` (although `Optional<T, K>` already does the job) for consistency sake.

We should have some consistency between `Partial` vs `Optional`. These two keywords mean the same thing for us. However, in the case of `Required`, we didn't use a new word and just augmented with `AugmentedRequired<T, K>`.

## Describe a solution including usage in code example
<!-- A clear description of the solution including usage with complete code examples, nicely formatted with "```ts" tags (especially if that's a new api proposal) -->
Given `Mutable<T>` in #111:
```ts
export type AugmentedMutable<
  T extends object,
  K extends keyof T = keyof T
> = Omit<T, K> & Mutable<Pick<T, K>>;
```

```ts
export type AugmentedReadonly<
  T extends object,
  K extends keyof T = keyof T
> = Omit<T, K> & Readonly<Pick<T, K>>;
```

```ts
// Same as Optional<T, K>
export type AugmentedPartial<
  T extends object,
  K extends keyof T = keyof T
> = Omit<T, K> & Partial<Pick<T, K>>;
```

## Who does this impact? Who is this for?
<!-- Who is this for? All users? TypeScript users? Yourself? People using X, Y, Z, etc.? -->
TypeScript users.

Table of contents needs improvements in organization for better user experience, also we are missing some built-in examples.
Here is a rough plan of needed improvements:
- Improve api list organization and grouping (operations on object keys)
- Add missing built-in types (Record, Parameters, ConstructorParameters)
- Add missing use-case examples to standard-lib API
- Add Optional type alias for Partial

I would be nice to have a nice API Documentation webpage with search functionality similar to Ramda: https://ramdajs.com/docs/

## API documentation requirements:

A recommended solution is to parse source files (which now contains usage examples in JSDoc comments) to generate a markdown based static documentation website.

One way is to use a full documentation generator to generate a website from source files (I'm open to suggestions if you can find something but I guess TypeScript support will be required, maybe this: https://dotnet.github.io/docfx/).

Another way would be to use a JSDoc => Markdown transformer (like [jsdoc2md](https://github.com/jsdoc2md/jsdoc-to-markdown/wiki/How-to-document-TypeScript)) and then add some custom scripts to do the rest and use it as a page in a markdown docs generator like [Docsaurus](https://docusaurus.io/) or [Docz](https://www.docz.site/).

Additional alternatives to investigate:
- https://github.com/onury/docma
- https://github.com/docsifyjs/docsify/ -> looks nice and this TS project is using it so we might check their solution https://github.com/romakita/ts-express-decorators
I'm not sure if it's possible (either way might be good to document). 