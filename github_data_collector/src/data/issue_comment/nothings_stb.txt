assertion failure in stbtt__cff_int can be triggered by user supplied image.
POC: 
[POC.zip](https://github.com/nothings/stb/files/4079941/POC.zip)

Command: 
```
clang fuzz.c -fsanitize=address -lm -o test
./test assert
```

Result:
```bash
[#0] 0x7ffff6e41e97 → __GI_raise(sig=0x6)
[#1] 0x7ffff6e43801 → __GI_abort()
[#2] 0x7ffff6e3339a → __assert_fail_base(fmt=0x7ffff6fba7d8 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x5d1640 <.str> "bits >= 0 && bits <= 8", file=0x5cfbe0 <.str> "./stb_image.h", line=0x13fc, function=0x5d15e0 <__PRETTY_FUNCTION__.stbi__shiftsigned> "int stbi__shiftsigned(unsigned int, int, int)")
[#3] 0x7ffff6e33412 → __GI___assert_fail(assertion=0x5d1640 <.str> "bits >= 0 && bits <= 8", file=0x5cfbe0 <.str> "./stb_image.h", line=0x13fc, function=0x5d15e0 <__PRETTY_FUNCTION__.stbi__shiftsigned> "int stbi__shiftsigned(unsigned int, int, int)")
[#4] 0x5a74ed → stbi__shiftsigned(v=<optimized out>, shift=<optimized out>, bits=<optimized out>)
[#5] 0x572bb1 → stbi__bmp_load(s=<optimized out>, x=<optimized out>, y=<optimized out>, comp=<optimized out>, req_comp=<optimized out>, ri=<optimized out>)
[#6] 0x572bb1 → stbi__load_main(s=<optimized out>, x=<optimized out>, y=<optimized out>, comp=<optimized out>, req_comp=<optimized out>, ri=0x0, bpc=<optimized out>)
[#7] 0x4f7671 → stbi__load_and_postprocess_8bit(s=<optimized out>, x=<optimized out>, y=0x7fffffffdef0, comp=0x7fffffffdf00, req_comp=<optimized out>)
[#8] 0x4f70b4 → stbi_load_from_file(f=0x616000000080, x=0x7fffffffdee0, y=0x7fffffffdef0, comp=0x7fffffffdf00, req_comp=0x4)
[#9] 0x4f6ea6 → stbi_load(filename=<optimized out>, x=0x7fffffffdee0, y=0x7fffffffdef0, comp=0x7fffffffdf00, req_comp=0x4)
```
assertion failure in stbi__create_png_image_raw can be triggered by user supplied image
POC: 
[POC-assert.zip](https://github.com/nothings/stb/files/4079935/POC-assert.zip)

Command:
```
clang fuzz.c -fsanitize=address -lm -o test
./test assert
```

result:
```bash
[#0] 0x7ffff6e41e97 → __GI_raise(sig=0x6)
[#1] 0x7ffff6e43801 → __GI_abort()
[#2] 0x7ffff6e3339a → __assert_fail_base(fmt=0x7ffff6fba7d8 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", assertion=0x5d0f60 <.str> "img_width_bytes <= x", file=0x5cfc20 <.str> "./stb_image.h", line=0x1150, function=0x5d0e40 <__PRETTY_FUNCTION__.stbi__create_png_image_raw> "int stbi__create_png_image_raw(stbi__png *, stbi_uc *, stbi__uint32, int, stbi__uint32, stbi__uint32, int, int)")
[#3] 0x7ffff6e33412 → __GI___assert_fail(assertion=0x5d0f60 <.str> "img_width_bytes <= x", file=0x5cfc20 <.str> "./stb_image.h", line=0x1150, function=0x5d0e40 <__PRETTY_FUNCTION__.stbi__create_png_image_raw> "int stbi__create_png_image_raw(stbi__png *, stbi_uc *, stbi__uint32, int, stbi__uint32, stbi__uint32, int, int)")
[#4] 0x5a4fa4 → stbi__create_png_image_raw(a=<optimized out>, raw=0x621000002901 "\377\377\377", raw_len=0x103c, out_n=0x4, x=<optimized out>, y=0x4, depth=0x4, color=0x6)
[#5] 0x59a262 → stbi__create_png_image(a=0x7fffffffd7e0, image_data=0x621000002900 "\001\377\377\377", image_data_len=0x103c, out_n=0x4, depth=0x4, color=<optimized out>, interlaced=<optimized out>)
[#6] 0x59a262 → stbi__parse_png_file(z=0x7fffffffd7e0, scan=0x0, req_comp=0x4)
[#7] 0x56d049 → stbi__do_png(p=0x7fffffffd7e0, x=0x7fffffffdea0, y=0x7fffffffdeb0, n=0x7fffffffdec0, req_comp=0x4, ri=0x7fffffffdb80)
[#8] 0x56d049 → stbi__png_load(s=0x7fffffffdc80, x=<optimized out>, y=<optimized out>, comp=<optimized out>, req_comp=<optimized out>, ri=<optimized out>)
[#9] 0x56d049 → stbi__load_main(s=<optimized out>, x=<optimized out>, y=<optimized out>, comp=<optimized out>, req_comp=<optimized out>, ri=0x7fffffffdb80, bpc=<optimized out>)
```
reported by email, claims all 5.1 or 6-channel vorbis files generated by reference encoder don't work, example included in email, check there for details

Reported via email, since example may be proprietary look there for details, relevant code is:

```
   if (f->current_loc > sample_number)
      return error(f, VORBIS_seek_failed);

```
I found a memory leak in stb_image.h when using stbi_load_from_file
POC: 
[mem-leak.zip](https://github.com/nothings/stb/files/4069142/mem-leak.zip)

Command: 
```bash
clang -fsanitize=address fuzz.c -lm -o poc
./poc leak
```
Result:
```bash
=================================================================
==87210==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 75792408 byte(s) in 1 object(s) allocated from:
    #0 0x4bac13 in malloc /tmp/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:88:3
    #1 0x56e88e in stbi__malloc /home/radcet/stb/./stb_image.h:892:12
    #2 0x56e88e in stbi__malloc_mad3 /home/radcet/stb/./stb_image.h:959
    #3 0x56e88e in stbi__bmp_load /home/radcet/stb/./stb_image.h:5254
    #4 0x56e88e in stbi__load_main /home/radcet/stb/./stb_image.h:1019
    #5 0x4f7670 in stbi__load_and_postprocess_8bit /home/radcet/stb/./stb_image.h:1123:19
    #6 0x4f70b3 in stbi_load_from_file /home/radcet/stb/./stb_image.h:1237:13
    #7 0x4f6ea5 in stbi_load /home/radcet/stb/./stb_image.h:1227:13
    #8 0x7fb9ff in _fini (/home/radcet/stb/fuzz+0x7fb9ff)

SUMMARY: AddressSanitizer: 75792408 byte(s) leaked in 1 allocation(s).
```

I actually ran into this problem while using tev: https://github.com/Tom94/tev/issues/86
Just to summarize the issue, it seems that stb_image.h fails to load pgm images that contain comments `# some comment`.
I find a heap-buffer-overflow in stbi__tga_load in version 2.23
[poc.zip](https://github.com/nothings/stb/files/4052702/poc.zip)

Command:
```bash
clang -fsanitize=address fuzz.c -lm -o poc
./poc crash
```

Result:
```bash
=================================================================
==67837==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000011 at pc 0x00000057e5a4 bp 0x7ffcf992bdd0 sp 0x7ffcf992bdc8
READ of size 1 at 0x602000000011 thread T0
    #0 0x57e5a3 in stbi__tga_load /home/radcet/stb/./stb_image.h:5652:33
    #1 0x57e5a3 in stbi__load_main /home/radcet/stb/./stb_image.h:1044
    #2 0x4f7660 in stbi__load_and_postprocess_8bit /home/radcet/stb/./stb_image.h:1123:19
    #3 0x4f70a3 in stbi_load_from_file /home/radcet/stb/./stb_image.h:1237:13
    #4 0x4f6e95 in stbi_load /home/radcet/stb/./stb_image.h:1227:13
    #5 0x567bcc in main /home/radcet/stb/fuzz.c:16:2
    #6 0x7f9111eeeb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
    #7 0x41a4f9 in _start (/home/radcet/stb/fuzz+0x41a4f9)

0x602000000011 is located 0 bytes to the right of 1-byte region [0x602000000010,0x602000000011)
allocated by thread T0 here:
    #0 0x4bac13 in malloc /tmp/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:88:3
    #1 0x58cc0f in stbi__malloc /home/radcet/stb/./stb_image.h:892:12
    #2 0x58cc0f in stbi__malloc_mad2 /home/radcet/stb/./stb_image.h:953
    #3 0x4f7660 in stbi__load_and_postprocess_8bit /home/radcet/stb/./stb_image.h:1123:19
    #4 0x4f70a3 in stbi_load_from_file /home/radcet/stb/./stb_image.h:1237:13
    #5 0x4f6e95 in stbi_load /home/radcet/stb/./stb_image.h:1227:13
    #6 0x7f913b800000  (<unknown module>)

SUMMARY: AddressSanitizer: heap-buffer-overflow /home/radcet/stb/./stb_image.h:5652:33 in stbi__tga_load
Shadow bytes around the buggy address:
  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c047fff8000: fa fa[01]fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==67837==ABORTING
```
I have the following example code using the latest stb_tilemap_editor (0.41)

```c
#include <stdio.h>
#include <stdlib.h>

#define STB_TILEMAP_EDITOR_IMPLEMENTATION

void
STBTE_DRAW_RECT(int x0, int y0, int x1, int y1, unsigned int color)
{
}

void
STBTE_DRAW_TILE(int x0, int y0, unsigned short id, int highlight, float *data)
{
}

#include "stb_tilemap_editor.h"

int
main(void)
{
	return 0;
}
```
Trying to compile this gives the errors
```
stb_tilemap_editor.h: In function ‘stbte__tile_paint’:
stb_tilemap_editor.h:2999:29: error: ‘x0’ undeclared (first use in this function)
 2999 |             STBTE_DRAW_TILE(x0,y0, (unsigned short) data[i], 0, tm->props[mapy][mapx]);
      |                             ^~
stb_tilemap_editor.h:2999:29: note: each undeclared identifier is reported only once for each function it appears in
stb_tilemap_editor.h:2999:32: error: ‘y0’ undeclared (first use in this function)
 2999 |             STBTE_DRAW_TILE(x0,y0, (unsigned short) data[i], 0, tm->props[mapy][mapx]);
      |                                ^~
stb_tilemap_editor.h: In function ‘stbte__tile_in_palette’:
stb_tilemap_editor.h:3499:30: error: ‘t’ undeclared (first use in this function)
 3499 |          STBTE_DRAW_TILE(x,y,t->id, slot == tm->cur_tile,0);

```
armeabi-v7a (32bits), debug build (-O0), ok
**armeabi-v7a (32bits), release build (-O3), crash**
arm64-v8a (64bits), debug build (-O0), ok
arm64-v8a (64bits), release build (-O3), ok


**build env:**
```
    gradle 4.6
    android-ndk-r20b-x86_64
    armeabi-v7a
```

**test code:**
```cpp   
     
        // quick test
	{
		const char *a = "hello";
		const char *b = "world";

		logw("a=%s", a);
		logw("b=%s", b);

		char buf[0x20] = { 0 };
		stbsp_sprintf(buf, "%s/%s", a, b);  // <---- crash on this line

		logw("result:%s", buf);
	}
```

**output:**
```
W/jni     (11770): a=hello
W/jni     (11770): b=world
F/libc    (11770): Fatal signal 7 (SIGBUS) at 0x7a0d1497 (code=1), thread 11770 (main)
D/AEE/AED (  147): $===AEE===AEE===AEE===$	
```

**stack backtrace:**
```
I/DEBUG   (11806): signal 7 (SIGBUS), code 1 (BUS_ADRALN), fault addr 7a0d1497
D/KeyguardViewMediator(  875): setHidden false
D/KeyguardUpdateMonitor(  875): sendKeyguardVisibilityChanged(true)
D/KeyguardUpdateMonitor(  875): handleKeyguardVisibilityChanged(1)
D/KeyguardViewMediator(  875): handleMessage enter msg name=SET_HIDDEN
D/KeyguardViewMediator(  875): handleMessage exit msg name=SET_HIDDEN
I/SurfaceFlinger(  153): [virtual void android::LayerScreenshot::setGeometry(const android::sp<const android::DisplayDevice>&, android::HWComposer::HWCLayerInterface&)] add:716, count:1
D/SurfaceFlinger(  153): [doDisplayComposition] skip composition for [Built-in Screen (type:0)], dirtyRegion empty
I/SurfaceFlinger(  153): [virtual void android::LayerScreenshot::setGeometry(const android::sp<const android::DisplayDevice>&, android::HWComposer::HWCLayerInterface&)] add:716, count:1
D/SurfaceFlinger(  153): [doDisplayComposition] skip composition for [Built-in Screen (type:0)], dirtyRegion empty
I/DEBUG   (11806):     r0 bee42100  r1 7a0d1497  r2 00000005  r3 00000004
I/DEBUG   (11806):     r4 00000005  r5 00000000  r6 bee42100  r7 bee420c0
I/DEBUG   (11806):     r8 00000000  r9 bee42100  sl 00000005  fp 00000005
I/DEBUG   (11806):     ip 00000000  sp bee41e08  lr 00000020  pc 7a02a692  cpsr 20000030
I/DEBUG   (11806): 
I/DEBUG   (11806): backtrace:
I/DEBUG   (11806):     #00  pc 00311692  /data/app-lib/com.company.app-2/libGL2JNI.so (stbsp_vsprintfcb+4817)
I/DEBUG   (11806):     #01  pc 00312219  /data/app-lib/com.company.app-2/libGL2JNI.so (stbsp_sprintf+40)
I/DEBUG   (11806):     #02  pc 001ed7db  /data/app-lib/com.company.app-2/libGL2JNI.so (app::AppImpl::Init(char const*, char const*, char const*)+98)
I/DEBUG   (11806):     #03  pc 002382d9  /data/app-lib/com.company.app-2/libGL2JNI.so (Java_com_company_app_GL2JNILib_nativeOnActivityCreate+172)
I/DEBUG   (11806): 
I/DEBUG   (11806): stack:
I/DEBUG   (11806):          bee41dc8  00000000  
I/DEBUG   (11806):          bee41dcc  78f7a558  
I/DEBUG   (11806):          bee41dd0  40145d60  /system/lib/libc.so
I/DEBUG   (11806):          bee41dd4  7a273000  
I/DEBUG   (11806):          bee41dd8  40145d50  /system/lib/libc.so
I/DEBUG   (11806):          bee41ddc  400f59a0  /system/lib/libc.so (_pthread_internal_add+20)
I/DEBUG   (11806):          bee41de0  78f7a558  
I/DEBUG   (11806):          bee41de4  400f5a60  /system/lib/libc.so (_init_thread+128)
I/DEBUG   (11806):          bee41de8  00004022  
I/DEBUG   (11806):          bee41dec  4010f4e4  /system/lib/libc.so (mmap+92)
I/DEBUG   (11806):          bee41df0  40152af8  
I/DEBUG   (11806):          bee41df4  7a372f00  [stack:11805]
```


heap overflow in `stbtt__buf_peek8`.
<img width="427" alt="source" src="https://user-images.githubusercontent.com/20929895/71815599-f9219780-30ba-11ea-8b1c-249e637f5aed.png">

poc:
[poc.zip](https://github.com/nothings/stb/files/4025847/poc.zip)


result:
```
=================================================================
==26964==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62900000c545 at pc 0x0000004ea862 bp 0x7fffffffd2a0 sp 0x7fffffffd298
READ of size 1 at 0x62900000c545 thread T0
    #0 0x4ea861  (/home/casper/targets/struct/stb/dbg/fuzzrun/ttfuzz+0x4ea861)
    #1 0x4ea417  (/home/casper/targets/struct/stb/dbg/fuzzrun/ttfuzz+0x4ea417)
    #2 0x4e9bc2  (/home/casper/targets/struct/stb/dbg/fuzzrun/ttfuzz+0x4e9bc2)
    #3 0x4e9768  (/home/casper/targets/struct/stb/dbg/fuzzrun/ttfuzz+0x4e9768)
    #4 0x4e0aa9  (/home/casper/targets/struct/stb/dbg/fuzzrun/ttfuzz+0x4e0aa9)
    #5 0x4d71a2  (/home/casper/targets/struct/stb/dbg/fuzzrun/ttfuzz+0x4d71a2)
    #6 0x4e1b28  (/home/casper/targets/struct/stb/dbg/fuzzrun/ttfuzz+0x4e1b28)
    #7 0x7ffff6e24b96  (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)
    #8 0x41ad49  (/home/casper/targets/struct/stb/dbg/fuzzrun/ttfuzz+0x41ad49)

Address 0x62900000c545 is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow (/home/casper/targets/struct/stb/dbg/fuzzrun/ttfuzz+0x4ea861)
Shadow bytes around the buggy address:
  0x0c527fff9850: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fff9860: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fff9870: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fff9880: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fff9890: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x0c527fff98a0: fa fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa fa
  0x0c527fff98b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fff98c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fff98d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fff98e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fff98f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==26964==ABORTING

Program received signal SIGABRT, Aborted.
[----------------------------------registers-----------------------------------]
RAX: 0x0
RBX: 0x73be28 --> 0x0
RCX: 0x7ffff6e41e97 (<__GI_raise+199>:	mov    rcx,QWORD PTR [rsp+0x108])
RDX: 0x0
RSI: 0x7fffffffc2e0 --> 0x0
RDI: 0x2
RBP: 0x7fffffffd270 --> 0x7fffffffd2a0 --> 0x7fffffffd310 --> 0x7fffffffd490 --> 0x7fffffffd5d0 --> 0x7fffffffd8d0 (--> ...)
RSP: 0x7fffffffc2e0 --> 0x0
RIP: 0x7ffff6e41e97 (<__GI_raise+199>:	mov    rcx,QWORD PTR [rsp+0x108])
R8 : 0x0
R9 : 0x7fffffffc2e0 --> 0x0
R10: 0x8
R11: 0x246
R12: 0x7fffffffd2a0 --> 0x7fffffffd310 --> 0x7fffffffd490 --> 0x7fffffffd5d0 --> 0x7fffffffd8d0 --> 0x7fffffffe120 (--> ...)
R13: 0x7fffffffd298 --> 0x7fffffffd1a0 --> 0x45e0360e
R14: 0x7fffffffd240 --> 0x7fffffff014c --> 0x0
R15: 0x7ce288 --> 0x1
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x7ffff6e41e8b <__GI_raise+187>:	mov    edi,0x2
   0x7ffff6e41e90 <__GI_raise+192>:	mov    eax,0xe
   0x7ffff6e41e95 <__GI_raise+197>:	syscall
=> 0x7ffff6e41e97 <__GI_raise+199>:	mov    rcx,QWORD PTR [rsp+0x108]
   0x7ffff6e41e9f <__GI_raise+207>:	xor    rcx,QWORD PTR fs:0x28
   0x7ffff6e41ea8 <__GI_raise+216>:	mov    eax,r8d
   0x7ffff6e41eab <__GI_raise+219>:	jne    0x7ffff6e41ecc <__GI_raise+252>
   0x7ffff6e41ead <__GI_raise+221>:	add    rsp,0x118
[------------------------------------stack-------------------------------------]
0000| 0x7fffffffc2e0 --> 0x0
0008| 0x7fffffffc2e8 --> 0x7496836615c70b4b
0016| 0x7fffffffc2f0 --> 0x0
0024| 0x7fffffffc2f8 --> 0x0
0032| 0x7fffffffc300 --> 0x0
0040| 0x7fffffffc308 --> 0x0
0048| 0x7fffffffc310 --> 0x0
0056| 0x7fffffffc318 --> 0x0
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGABRT
__GI_raise (sig=sig@entry=0x6) at ../sysdeps/unix/sysv/linux/raise.c:51
51	../sysdeps/unix/sysv/linux/raise.c: No such file or directory.
gdb-peda$ bt
#0  __GI_raise (sig=sig@entry=0x6) at ../sysdeps/unix/sysv/linux/raise.c:51
#1  0x00007ffff6e43801 in __GI_abort () at abort.c:79
#2  0x00000000004b0707 in __sanitizer::Abort() ()
    at /tmp/final/llvm.src/projects/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cc:154
#3  0x00000000004af0e1 in __sanitizer::Die() ()
    at /tmp/final/llvm.src/projects/compiler-rt/lib/sanitizer_common/sanitizer_termination.cc:58
#4  0x0000000000496c69 in ~ScopedInErrorReport ()
    at /tmp/final/llvm.src/projects/compiler-rt/lib/asan/asan_report.cc:186
#5  0x00000000004983df in ReportGenericError ()
    at /tmp/final/llvm.src/projects/compiler-rt/lib/asan/asan_report.cc:470
#6  0x0000000000498ab8 in __asan_report_load1 () at /tmp/final/llvm.src/projects/compiler-rt/lib/asan/asan_rtl.cc:117
#7  0x00000000004ea862 in stbtt__buf_peek8 (b=0x7fffffffd690) at ./SRC/stb_truetype.h:1112
#8  0x00000000004ea418 in stbtt__dict_get (b=0x7fffffffd690, key=0x13) at ./SRC/stb_truetype.h:1204
#9  0x00000000004e9bc3 in stbtt__dict_get_ints (b=0x7fffffffd690, key=0x13, outcount=0x1, out=0x7fffffffd660)
    at ./SRC/stb_truetype.h:1217
#10 0x00000000004e9769 in stbtt__get_subrs (cff=..., fontdict=...) at ./SRC/stb_truetype.h:1329
#11 0x00000000004e0aaa in stbtt_InitFont_internal (info=0x7fffffffe180, data=0x629000000200 "OTTO", fontstart=0x0)
    at ./SRC/stb_truetype.h:1390
#12 0x00000000004d71a3 in stbtt_InitFont (info=0x7fffffffe180, data=0x629000000200 "OTTO", offset=0x0)
    at ./SRC/stb_truetype.h:4771
#13 0x00000000004e1b29 in main (argc=0x2, argv=0x7fffffffe428) at ../fuzzsrc/ttfuzz.c:29
#14 0x00007ffff6e24b97 in __libc_start_main (main=0x4e18f0 <main>, argc=0x2, argv=0x7fffffffe428,
    init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffe418)
    at ../csu/libc-start.c:310
#15 0x000000000041ad4a in _start ()
```