It would be great to have an ability to convert XML data into JSON or at least Dictionary
Running the following on Ubuntu (via Docker):

```swift
let podcastURL = URL(string: "http://feed.thisamericanlife.org/talpodcast")!
let contents = try String(contentsOf: podcastURL, encoding: .utf8)
let xml = SWXMLHash.parse(contents)

print(contents)
print("-----")
print(xml.description)
```

will switch an element name (around the `:`) when it has a namespace. For e.g., the string `contents` has

```
<itunes:image href="http://www.thisamericanlife.org/sites/all/themes/thislife/images/logo-square-1400.jpg" />
```

while the `xml` print out gives:

```
<image:itunes href="http://www.thisamericanlife.org/sites/all/themes/thislife/images/logo-square-1400.jpg"></image:itunes>
```

_Note_: this is only on Linux; the same code on macOS gives the correct element name.

---

Platform: ubuntu:16.04
Xcode 9.2, Swift 4.0.3

It is difficult to know when to implement `XMLElementDeserializable` versus `XMLIndexerDeserializable`. From the perspective of someone implementing custom deserialization, the indexer is for nodes that have child elements (i.e. a class with properties). Element deserialization is almost always for individual nodes (i.e. strings, ints, dates, etc.).

It'd be great to make these consistent. This has also been brought up as a point of difficulty and confusion in the library itself.

See https://stackoverflow.com/questions/45851987/deserialisation-error-with-swxmlhash as an example of the confusion.

(see also #84)
Hi, I am using your project as XML parser.  And I also want do some mark up on my UI.
It will be easier if I know the line number. But I didn't find any possible method.

Is that possible to know the line line number of specific XMLIndexer I am dealing with?
I was wondering if SWXMLHash supports nested nodes of the same type.

Given the following XML:

``` xml
<?xml version="1.0" encoding="UTF-8"?>
<nodes>
    <node>
        <name>Dog</name>
        <node>
            <name>Labrador</name>
        </node>
    </node>
    <node>
        <name>Cat</name>
    </node>
    <node>
        <name>Mouse</name>
    </node>
</nodex>
```

And the code:

``` swift
let xml = SWXMLHash.parse(content!)

struct Node: XMLIndexerDeserializable {
    let name: String
    let node: [Node]?

    static func deserialize(node: XMLIndexer) throws -> Node {
        return try Node(
            name: node["name"].value(),
            node: node["node"].value()
        )
    }

}

do {
    let nodes: [Node] = try xml["nodes"]["node"].value()
    print(nodes)
} catch let error {
    print(error)
}
```

This results in the message "This node is invalid: \n".
This is working with child nodes, that are not of type `Node`.

Because Swift 3.0 will be releasing soon, I'll also have to release a new and breaking version of SWXMLHash that will be versioned as 3.0.0 (in keeping with semantic versioning).

So... this seems as good a time as any to elicit feedback regarding improvements, suggestions, etc. particularly related to potential changes in the public API. I don't want to go nuts, but I'm open to improvements.

Some API-related thoughts I've had or gathered from other issues:
- Choose one way to access attributes
  - See #81 which deprecates the existing `attributes` collection anyway
  - This also introduces an actual type to encapsulate attributes (`XMLAttribute`) such that there would be an extension point for things like type conversion versus hanging extensions off of `String`
- Make `children` properties consistent
  - See #83 which made the `children` property on `XMLElement` public because the `children` property of `XMLIndexer` didn't return `TextElement`s.
- Consider changing `XMLElement` and `TextElement` to be enums
  - This might make accessing them somewhat more straightforward
  - Also suggested in #83 
- Consider consolidating more of `XMLElement`, etc. in `XMLIndexer`
  - This might make the API more discoverable versus having to call into `element` first

In addition, there is the feature request to support XPath at #9... I don't necessarily see this making it in time for 3.0 as I haven't even looked at it yet ðŸ˜„ 

It looks like `NSXMLParser` will crash if a [byte order mark (BOM)](https://en.wikipedia.org/wiki/Byte_order_mark) is present in the file/content being parsed. I've been able to reproduce the error and I have a repro committed on the [bom-crash](https://github.com/drmohundro/SWXMLHash/tree/bom-crash) branch (see https://github.com/drmohundro/SWXMLHash/blob/bom-crash/Tests/SWXMLHashSpecs.swift#L303-L320).

I can think of a few options for handling it:
- Leave it as is - it isn't strictly a bug in SWXMLHash, but instead is being thrown by `NSXMLParser`
  - I'm not fond of this idea because this crash has affected at least one app - it was privately reported to me. Their app on the AppStore was crashing because user-provided (I think?) XML content had BOM content in it.
  - It also reflects poorly on this library even though it was not directly caused by code in SWXMLHash.
- Strip BOM bytes from the content before parsing
  - This is doable, but I'm concerned about blindly stripping out bytes from content. Also, if performance is at all a concern, I wouldn't want to spin all of the XML to strip these characters out and _then spin the content again_ for actual XML parsing
- Add a config option to strip optionally strip them out
  - This would be a really obscure setting - `config.stripByteOrderMarkBytes = true` or `config.stripCrashingCharacters = true` or something like that?
- Add a more friendly exception/error if BOM content is found in the XML
  - It would still likely crash, but it would at least tell the developer what is wrong.

I'm open to thoughts or ideas here. I'd also be curious if anyone else has run into this issue before related to the `NSXMLParser`.

Research adding XPath support. I suspect that the code could wrap `NSXMLDocument` to provide this functionality.
