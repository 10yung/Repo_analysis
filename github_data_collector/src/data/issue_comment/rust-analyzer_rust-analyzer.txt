Would it be possible for these to be separate options? I'm not a big fan of the type inlays, I prefer hovering if I need them, but the recently added parameter name inlay is super nice
![image](https://user-images.githubusercontent.com/17426603/72661757-91364f80-39de-11ea-8ad8-1f8f6b4f00bb.png)

# Problem
Linux distributions are collectively moving towards Flatpak as a distribution model for third party applications. However, the VS Code extension is currently unsupported within the [VS Code Flatpak](https://flathub.org/apps/details/com.visualstudio.code), due to the way that it tries to spawn `ra_lsp_server` by looking up its path within system paths â€” paths that won't exist inside of a Flatpak container.

# Solution

The extension could check for the existence of `/usr/bin/flatpak-spawn` to determine if being run within a Flatpak container. If within a Flatpak container, `ra_lsp_server` can be invoked with `flatpak-spawn --host ra_lsp_server`.
This is just keeping track of the changes required to upgrade Chalk; currently we can't really merge it since it breaks opaque types.

Now also makes use of the newly introduced `solve_limited` to implement fuel.
In /docs/user/README.md, the current user setting definition for LSP package in Sublime Text 3 is specified as:
```
{
	"rust-analyzer": {
		"command": ["ra_lsp_server"],
		"languageId": "rust",
		"scopes": ["source.rust"],
		"syntaxes": [
			"Packages/Rust/Rust.sublime-syntax",
			"Packages/Rust Enhanced/RustEnhanced.sublime-syntax"
		],
		"initializationOptions": {
			"featureFlags": {
			}
		},
	}
}
```

It should specifically be a child of "clients" dictionary:
```
{
	"clients": {
		"rust-analyzer": {
			"command": ["ra_lsp_server"],
			"languageId": "rust",
			"scopes": ["source.rust"],
			"syntaxes": [
				"Packages/Rust/Rust.sublime-syntax",
				"Packages/Rust Enhanced/RustEnhanced.sublime-syntax"
			],
			"initializationOptions": {
				"featureFlags": {
				}
			},
		}
	}
}
```

At least, it confused me for quickly enabling in new installation.
See this example:

![image](https://user-images.githubusercontent.com/1711539/72620025-cb501480-393e-11ea-94b1-bfd18d10a4d3.png)

Here, the intention will add type to `let ty`. This is clearly not desirable, as `ty` might be off screen. I think we should restrict the intention to only trigger if the cursor is on the `let foo =`, that is, before `=`.

The code for assist is here: https://github.com/rust-analyzer/rust-analyzer/blob/07dca1123dfaec527c6ba3164125309f5c4cc3db/crates/ra_assists/src/assists/add_explicit_type.rs

cc @TomasKralCZ  
Not sure if it's always the case, I have a workspace and `Cargo.toml` is manifest of subpackage. When I remove a dependency there, compilation errors don't appear until I make a noop edit to any `*.rs` file.
- Built per https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/user#vs-code, including the Remote section.
- VS Code prompted to restart after installing
- Got this error message:

![image](https://user-images.githubusercontent.com/7822926/72518093-dcbcf200-3854-11ea-9d2c-97a813d1b45e.png)

- On a terminal within the remote session:

```sh
$ ra_lsp_server --version
Thu Jan 16 11:34:31 CET 2020
rust-analyzer c78d269
```

**Environment**

WSL:

```
$ uname -a
Thu Jan 16 11:40:39 CET 2020
Linux brute 4.4.0-18362-Microsoft #476-Microsoft Fri Nov 01 16:53:00 PST 2019 x86_64 x86_64 x86_64 GNU/Linux
```

VS Code:

![image](https://user-images.githubusercontent.com/7822926/72518256-37eee480-3855-11ea-96e6-b9938c847147.png)

_Every time_ rust analyzer says can't find rust-src, I have to run rustup component add rust-src (when switching toolchains or computers or getting other people set up).

If rust-analyzer hasn't got the source could it try running `rustup component add rust-src` to see if it fixes things first?
I can't think anyone would not want this? (but if so it could be turned off by a config setting).
It's frustrating to have to restart RA after each config change. I was talking with @memoryruins and they mentioned that there's a LSP notification on config changes, we'd just have to handle it here:

https://github.com/rust-analyzer/rust-analyzer/blob/c0661ce7444223b0fff1f5d54adb41022ab788cb/crates/ra_lsp_server/src/main_loop.rs#L565