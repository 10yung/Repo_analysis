So looking at setting up Octopress for a documentation site, ala Sendgrid, and have a few questions as the README is far from verbose on the install process. Here is what I have done:

1. `jekyll new [sitename]` gives the below file structure:
```
total 56
drwxr-xr-x  10 jerdog  staff   340 Nov 22 17:42 .
drwxr-xr-x  12 jerdog  staff   408 Nov 22 17:42 ..
-rw-r--r--   1 jerdog  staff    35 Nov 22 17:42 .gitignore
-rw-r--r--   1 jerdog  staff   398 Nov 22 17:42 404.html
-rw-r--r--   1 jerdog  staff   937 Nov 22 17:42 Gemfile
-rw-r--r--   1 jerdog  staff  1284 Nov 22 17:42 Gemfile.lock
-rw-r--r--   1 jerdog  staff  1652 Nov 22 17:42 _config.yml
drwxr-xr-x   3 jerdog  staff   102 Nov 22 17:42 _posts
-rw-r--r--   1 jerdog  staff   539 Nov 22 17:42 about.md
-rw-r--r--   1 jerdog  staff   213 Nov 22 17:42 index.md
```
2. `cd [sitename]`
3. `octopress init` does some things and the new structure is:
```
total 56
drwxr-xr-x  11 jerdog  staff   374 Nov 22 17:45 .
drwxr-xr-x  12 jerdog  staff   408 Nov 22 17:42 ..
-rw-r--r--   1 jerdog  staff    35 Nov 22 17:42 .gitignore
-rw-r--r--   1 jerdog  staff   398 Nov 22 17:42 404.html
-rw-r--r--   1 jerdog  staff   937 Nov 22 17:42 Gemfile
-rw-r--r--   1 jerdog  staff  1284 Nov 22 17:42 Gemfile.lock
-rw-r--r--   1 jerdog  staff  1652 Nov 22 17:42 _config.yml
drwxr-xr-x   3 jerdog  staff   102 Nov 22 17:42 _posts
drwxr-xr-x   5 jerdog  staff   170 Nov 22 17:45 _templates
-rw-r--r--   1 jerdog  staff   539 Nov 22 17:42 about.md
-rw-r--r--   1 jerdog  staff   213 Nov 22 17:42 index.md
```

The only thing that actually changed was `_templates` was added.... which is blank, empty **draft**, **page**, **post** files.

So what's the difference here between normal Jekyll and Octopress? 
When publishing a draft without a date, the code that inserts the publish date into the post was not restricting itself to the YAML front-matter section of the post.  Rather, it would search anywhere in the post for the `date:` and `title:` keys and attempt to parse their values.

If a draft didn't have a date in the front matter, but had the pattern `date:` somewhere in the body of the post, `read_post_yaml` would find the pattern and attempt to parse the rest of the line.

If it was successful, it would then try to remove the old date entry and add a new one in the front matter, corrupting the body of the post.

I attempted to fix this by using `YAML.safe_load` to parse the front-matter, but ran into two issues:

1. It would parse the date as a date, causing breakage in other parts of the code that were expecting strings.
2. `YAML.safe_load` doesn't tell you where it finished parsing, so there was no way to get at the rest of the post after the front matter without using the regex anyway.

In the end, I opted for a simpler approach: use the regex (the same one that Jekyll uses) to split out the front matter and the body, update the front matter, and reassemble the new front matter with the existing body.

I was not able to craft a proper `clash` test for this fix; all my attempts to `echo` some additional content into the draft failed unless I ran with the `-t` flag.  I'm not sure why that is.
I get the following error when I do` rake generate`

```
Starting to watch source with Jekyll and Compass. Starting Rack on port 4000
directory source/stylesheets
DEPRECATION WARNING on line 87 of /var/lib/gems/2.3.0/gems/compass-core-1.0.3/stylesheets/compass/css3/_deprecated-support.scss: #{} interpolation near operators will be simplified
in a future version of Sass. To preserve the current behavior, use quotes:

  unquote('"$moz-"#{$experimental-support-for-mozilla} "$webkit-"#{$experimental-support-for-webkit} "$opera-"#{$experimental-support-for-opera} "$microsoft-"#{$experimental-support-for-microsoft} "$khtml-"#{$experimental-support-for-khtml}')

You can use the sass-convert command to automatically fix most cases.

DEPRECATION WARNING on line 92 of /var/lib/gems/2.3.0/gems/compass-core-1.0.3/stylesheets/compass/css3/_deprecated-support.scss: #{} interpolation near operators will be simplified
in a future version of Sass. To preserve the current behavior, use quotes:

  unquote('"$ie6-"#{$legacy-support-for-ie6} "$ie7-"#{$legacy-support-for-ie7} "$ie8-"#{$legacy-support-for-ie8}')

You can use the sass-convert command to automatically fix most cases.

    write source/stylesheets/screen.css
[2017-03-08 16:38:02] INFO  WEBrick 1.3.1
[2017-03-08 16:38:02] INFO  ruby 2.3.1 (2016-04-26) [i386-linux-gnu]
[2017-03-08 16:38:02] INFO  WEBrick::HTTPServer#start: pid=11564 port=4000
>>> Compass is watching for changes. Press Ctrl-C to Stop.
directory public/stylesheets
Configuration file: /home/ubuntu/octopress/_config.yml
/var/lib/gems/2.3.0/gems/posix-spawn-0.3.13/lib/posix/spawn.rb:2:in `require': /var/lib/gems/2.3.0/gems/posix-spawn-0.3.13/lib/posix_spawn_ext.so: undefined symbol: rb_fix2int - /var/lib/gems/2.3.0/gems/posix-spawn-0.3.13/lib/posix_spawn_ext.so (LoadError)
	from /var/lib/gems/2.3.0/gems/posix-spawn-0.3.13/lib/posix/spawn.rb:2:in `<top (required)>'
	from /var/lib/gems/2.3.0/gems/pygments.rb-0.6.3/lib/pygments/popen.rb:2:in `require'
	from /var/lib/gems/2.3.0/gems/pygments.rb-0.6.3/lib/pygments/popen.rb:2:in `<top (required)>'
	from /var/lib/gems/2.3.0/gems/pygments.rb-0.6.3/lib/pygments.rb:1:in `require'
	from /var/lib/gems/2.3.0/gems/pygments.rb-0.6.3/lib/pygments.rb:1:in `<top (required)>'
	from /home/ubuntu/octopress/plugins/pygments_code.rb:1:in `require'
	from /home/ubuntu/octopress/plugins/pygments_code.rb:1:in `<top (required)>'
	from /home/ubuntu/octopress/plugins/backtick_code_block.rb:1:in `require'
	from /home/ubuntu/octopress/plugins/backtick_code_block.rb:1:in `<top (required)>'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/plugin_manager.rb:74:in `require'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/plugin_manager.rb:74:in `block (2 levels) in require_plugin_files'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/plugin_manager.rb:73:in `each'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/plugin_manager.rb:73:in `block in require_plugin_files'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/plugin_manager.rb:72:in `each'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/plugin_manager.rb:72:in `require_plugin_files'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/plugin_manager.rb:18:in `conscientious_require'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/site.rb:79:in `setup'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/site.rb:41:in `initialize'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/commands/build.rb:29:in `new'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/commands/build.rb:29:in `process'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/lib/jekyll/commands/build.rb:18:in `block (2 levels) in init_with_program'
	from /var/lib/gems/2.3.0/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `block in execute'
	from /var/lib/gems/2.3.0/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `each'
	from /var/lib/gems/2.3.0/gems/mercenary-0.3.6/lib/mercenary/command.rb:220:in `execute'
	from /var/lib/gems/2.3.0/gems/mercenary-0.3.6/lib/mercenary/program.rb:42:in `go'
	from /var/lib/gems/2.3.0/gems/mercenary-0.3.6/lib/mercenary.rb:19:in `program'
	from /var/lib/gems/2.3.0/gems/jekyll-2.5.3/bin/jekyll:20:in `<top (required)>'
	from /usr/local/bin/jekyll:23:in `load'
	from /usr/local/bin/jekyll:23:in `<main>'
    write public/stylesheets/screen.css
```

My first time trying octopress 3, I did a "octopress init" and couldn't understand why jekyll build was not working. This change hopefully will help the next person.
I'm testing Octopress 3.  I uploaded a minimal example on VincentTam/octo3test.  In `index.html` on the `gh-pages` branch, the [canonical link reads `localhost`](https://git.io/vM2wx).

```html
<link rel="stylesheet" href="/octo3test/assets/main.css">
<link rel="canonical" href="http://localhost:4000/octo3test/">
<link rel="alternate" type="application/rss+xml" title="Your awesome title" href="/octo3test/feed.xml">
```

In my `_config.yml`, I set

```yml
baseurl: "/octo3test"
url: "http://vincenttam.github.io"
```

(I carelessly missed an 's'.)

and my `_deploy.yml`

```yml
method: git                               # How do you want to deploy? git, rsync or s3.
site_dir: _site                           # Location of your static site files.

git_url: git@github.com:VincentTam/octo3test.git  # remote repository url, e.g. git@github.com:username/repo_name

# Note on git_branch:
# If using GitHub project pages, set the branch to 'gh-pages'.
# For GitHub user/organization pages or Heroku, set the branch to 'master'.
#
git_branch: gh-pages                        # Git branch where static site files are commited


# remote_path:                            # Destination directory
```
I was struggling to set everything up, so I wrote this up.

It might fit better underneath "installation".
I initialized a new octopress instance and then within the directory try to run any octopress command and i get the following

```
$ octopress
/Users/gregg/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/rubygems/specification.rb:2158:in `method_missing': undefined method `this' for #<Gem::Specification:0x3fc7ef05b1ac mercenary-0.3.6> (NoMethodError)
	from /Users/gregg/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/rubygems/specification.rb:1057:in `find_active_stub_by_path'
	from /Users/gregg/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:64:in `require'
	from /Users/gregg/.rvm/gems/ruby-2.3.0/gems/octopress-3.0.11/bin/octopress:5:in `<top (required)>'
	from /Users/gregg/.rvm/gems/ruby-2.3.0/bin/octopress:23:in `load'
	from /Users/gregg/.rvm/gems/ruby-2.3.0/bin/octopress:23:in `<main>'
	from /Users/gregg/.rvm/gems/ruby-2.3.0/bin/ruby_executable_hooks:15:in `eval'
	from /Users/gregg/.rvm/gems/ruby-2.3.0/bin/ruby_executable_hooks:15:in `<main>'
```
I am using Octopress 3, and when I run `jekyll build`, it generates the correct set of files (which includes my static files, see list of files below):

```
      $ cd _site
:_site$ ls -a
.               CNAME               assets              google2d8.html  index-alternative.html
..              about               blog                increase-revenue.html       index.html
```

Note that my entire jekyll-generated `blog` is now safely stored within `\blog\`, which is how I want it.

But once I do `octopress deploy`, it overwrites this entire folder (which also overwrites my existing static files), see listing below:

```
      $ cd _site
:_site$ ls -a
.       ..      Gemfile     Gemfile.lock    about       css     feed.xml    index.html  jekyll
```

Here is my `_config.yml`:

```
title: My Title
email: some@email.com
description: > # this means to ignore newlines until "baseurl:"
     some description
baseurl: "/blog" # the subpath of your site, e.g. /blog
url: "http://example.com" # the base hostname & protocol for your site
twitter_username: myusername

source: '../'

# Build settings
markdown: kramdown
theme: minima
```

This is my `_deploy.yml`

```
method: git                 # How do you want to deploy? git, rsync or s3.
site_dir: _site             # Location of your static site files.
git_url: my_git_url

git_branch: gh-pages-2       # Git branch where static site files are commited
```

**Note:** Once I remove the following line from my `_config.yml`:     `source: '../'`, my `jekyll build` generates that deploy folder like `octopress deploy` does.

Given the new Octopress 3 and an existing static site hosted on my `gh-pages` branch, how do I deploy my blog to a subdirectory of that existing `gh-pages` site?

P.S. If you want SO points, I also [asked it there](http://stackoverflow.com/questions/39200501/how-do-i-deploy-octopress-3-to-a-subdirectory-within-an-existing-gh-pages-site) but couldn't get an answer despite it getting a lot of attention.

for some reason 'date' field could be missing from the post metadata.
this fix tries to tell the user what is going the wrong way.

fixes #168

Hey guys!

I'd like to store "page"s I created after `octopress new page "Blablabla"` inside a subfolder instead of root. How can I change it to make them stored in a subfolder? 
