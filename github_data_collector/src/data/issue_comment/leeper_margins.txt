[x] a possible bug

This is not a very serious problem, however it is on the one hand inconvenient and on the other hand a little trouble-prone for careless users: if there are predictors in a model, that are factors, rows and columns in a matrix returned by `vcov(margins_object)` have different order than what `summary(margins_object)` returns.

This makes hard to use `vcov(margins_object)` - while calling `vcov()` is widespread method of getting coefficients variances -  and if someone is not aware about this happens, he may end up using wrong variances/covariances with respect to given AMEs.

```R
## load package
library("margins")
require("datasets")

## code goes here
x <- lm(mpg ~ wt + factor(cyl) * hp, data = mtcars)
mrg = margins(x)
vcov(mrg)
summary(mrg)$AME
cbind(vcov_rownames = sub("dydx_(.*)\\.1", "\\1", rownames(vcov(mrg))),
         AMEs_names = names(summary(mrg)$AME))

## session info for your system
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18363)

Matrix products: default

locale:
[1] LC_COLLATE=Polish_Poland.1250  LC_CTYPE=Polish_Poland.1250   
[3] LC_MONETARY=Polish_Poland.1250 LC_NUMERIC=C                  
[5] LC_TIME=Polish_Poland.1250    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] margins_0.3.25

loaded via a namespace (and not attached):
[1] MASS_7.3-51.4     compiler_3.6.1    tools_3.6.1       data.table_1.12.8
[5] prediction_0.3.14
```

It seems appealing to do something with this is about line 39 in _build_margins.R_ - if `variables` object could get the proper order in that place, everything afterwards should preserve this order. However I'm not sure from where to get a proper order of terms - perhaps `find_terms_in_model()` should be modified so it would include this order in an object it returns?

[x] a suggested code or documentation change, improvement to the code, or feature request

If a simple `coef()` method for _margins_ objects would be added to the package, it will enable for example easy computation of AMEs on multiply imputed datasets using package *mitools*. I think it may look as simply as:

```R
#' @export
coef.margins <- function(object, ...) {
  summary(object)$AME
}
```


Please specify whether your issue is about:

 - [ ] a possible bug
 - [x] a question about package functionality
 - [ ] a suggested code or documentation change, improvement to the code, or feature request

Thanks for making this package-- it's really useful! I'm having an issue when I try to use the margins() command on my data: I get the error message:
```R
Error: cannot allocate vector of size 369.5 Gb
```
My dataset is pretty large (the csv of raw data is 1.51 GB and the regression model object is 1.29 GB when I save it as a .rds file). Do you have any tips for getting around this issue so that I can use the package?

For more context, I'll provide some sample data/a description of what I'm trying to get at. This code doesn't reproduce the error, since it isn't as large as my data, but I'm hoping you can tell me if I'm making a coding error that might be contributing to the vector size issue. Basically, I want to calculate the marginal effect of a binary categorical variable over time in several different states in the US. 

Here's some sample data:
```R
### Load packages
library(lme4)
library(margins)
library(fastDummies)

### Make data
set.seed(1)
df <- data.frame(year = rep(2001:2010, each = 100), 
          state = rep(c("montana", "idaho", "colorado", "wyoming", "utah"), times = 10, each = 20), 
          site_id = as.factor(rep(1:100, times = 10)), 
          cat_variable = as.factor(rep(0:1, times = 5, each = 10)), 
          ind_cont_variable = rnorm(100, mean = 20, sd = 5), 
          event_occurred = as.factor(sample(c(0, 1), replace = TRUE, size = 1000)))

### Add dummy columns for states
df <- dummy_cols(df, 
                 select_columns = "state",
                 remove_first_dummy = TRUE)
```

and a model (I'm interested in the effect of the cat_variable on event_occurred in a given year):
```R
fit_df <- glmer(event_occurred ~ ind_cont_variable + cat_variable*year* state + (1|site_id), 
                                                      data = df, family = binomial(link = "logit"), 
                                                      nAGQ = 0, control = glmerControl(optimizer = "nloptwrap"))
```

And then to get the marginal effect of, for example, the cat_variable in each year:
```R
annual_effect <- summary(margins(fit_state, 
                                at = list(year = 2001:2010),
                                variables = "cat_variable",
                                data = df[df$state == "colorado", ]))
```
This last chunk of code is where I get the issue with the vector size. Any ideas how I can get around this? 

Also, if I wanted to get the marginal effect of the cat_variable across the time series in each state (rather than just for Colorado), how would I do that?

**Possible bug**
Please excuse me if I dont follow all the rules correctly- its my first time posting here. 

I ran into this problem since I specify some continious covariates in a glmer by using fractional polynomials. To identify the issue I compared the behavour of margins() between a glm and a glmer. I found: If you specify a model where a covariate is only included in the formula as a functional form, than a problem seems to occur in identification of the class of the variable. Therefore dydx does not seem to work properly. This problem occurs in glmer but not in glm. I was not able to reproduce the exact same error message I found with my data using the InstEval data from lme4, but I believe the underlying problem is the same. The following example does not produce an error- but results in an empty margins object.

```R
## load packages
library(lme4)
library(margins)

## centering continous predictor
InstEval$y <- InstEval$y - mean(InstEval$y)

attach(InstEval)

test.glm <- glm(service ~ y + I(y^2) ,family=binomial)
test.glmer <- glmer(service ~ y + I(y^2)  + (1|dept),family=binomial(link=logit))

marg.glm <- margins(test.glm)
marg.glmer <- margins(test.glmer)

test.glm2 <- glm(service ~ I(y^2) ,family=binomial)
test.glmer2 <- glmer(service ~ I(y^2) + (1|dept),family=binomial(link=logit))

marg.glm2 <- margins(test.glm2)
marg.glmer2 <- margins(test.glmer2)

marg.glm2
marg.glmer2


## session info for your system
sessionInfo()
```
**What happens:**
"marg.glmer2 <- margins(test.glmer2)" results in 
_Warning messages:
1: In dydx.default(X[[i]], ...) :
  Class of variable, y, is unrecognized. Returning NA.
2: In dydx.default(X[[i]], ...) :
  Class of variable, y, is unrecognized. Returning NA.
3: In dydx.default(X[[i]], ...) :
  Class of variable, y, is unrecognized. Returning NA.
4: In dydx.default(X[[i]], ...) :
  Class of variable, y, is unrecognized. Returning NA._

And marg.glmer2 is a data frame with 0 columns and 0 rows.

**SessionInfo**

_R version 3.6.1 (2019-07-05)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17763)

Matrix products: default

locale:
[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252    LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   
[5] LC_TIME=German_Germany.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] margins_0.3.23 lme4_1.1-21    Matrix_1.2-18 

loaded via a namespace (and not attached):
 [1] minqa_1.2.4       MASS_7.3-51.4     compiler_3.6.1    tools_3.6.1       Rcpp_1.0.3        splines_3.6.1     nlme_3.1-142      grid_3.6.1       
 [9] data.table_1.12.6 nloptr_1.2.1      boot_1.3-23       lattice_0.20-38   prediction_0.3.14_

Maybe there is a way to get around this problem by providing the class of the respective variables to the function?

Best

Daniel
The [fixest](https://cran.r-project.org/package=fixest) package is a new-ish package for estimating OLS and GLM models with fixed effects. It would be lovely if `margins` supported it. There are already `predict` and `vcov` methods, which should make things easier for anyone who wants to take this up.

Ref: https://github.com/leeper/margins/issues/101, https://github.com/sgaure/lfe/issues/13
CC @grantmcdermott

-----

Please specify whether your issue is about:

 - [ ] a possible bug
 - [ ] a question about package functionality
 - [x] a suggested code or documentation change, improvement to the code, or feature request

Put your code here:

``` r
library(margins)
library(fixest)

x <- fixest::feols(mpg ~ hp * wt | cyl, data = mtcars)
margins(x)
#> Error in terms.default(model): no terms component nor attribute

head(predict(x))
#> [1] 22.47196 21.28068 25.94454 19.69230 17.08487 18.65003
vcov(x)
#>                  hp            wt         hp:wt
#> hp     1.641964e-04  0.0042546536 -2.454378e-05
#> wt     4.254654e-03  0.1706445284 -8.152661e-04
#> hp:wt -2.454378e-05 -0.0008152661  4.200967e-06
#> attr(,"type")
#> [1] "Clustered (cyl)"
```

<sup>Created on by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

Note that by default, `fixest` clusters by the fixed effects, and different clustering can be specified as arguments to `summary` or `vcov`. I'm not sure what approach `margins` wants to take here. 
Please specify whether your issue is about:

 - [x] a possible bug
 - [ ] a question about package functionality
 - [ ] a suggested code or documentation change, improvement to the code, or feature request

```R
## load package
library("margins")

## code goes here
library(margins)

y = rbinom(n=100, 1, .5)
x1 = rnorm(100)
x2 = runif(100)
x3 = 2*x2
sim_dat <- data.frame(cbind(y, x1, x2, x3))
mylogit <- glm(y ~ x1 + x2 + x3, data = sim_dat, family = "binomial"(link = logit))
sumout <- summary(margins(mylogit))
## There were 20 warnings (use warnings() to see them)
print(sumout)
##  factor    AME SE  z  p lower upper
##      x1 0.0776 NA NA NA    NA    NA
##      x2 0.1430 NA NA NA    NA    NA
##      x3 0.0000 NA NA NA    NA    NA
mylogit
## Call:  glm(formula = y ~ x1 + x2 + x3, family = binomial(link = logit), 
##     data = sim_dat)
## 
## Coefficients:
## (Intercept)           x1           x2           x3  
##     -0.3773       0.3205       0.5906           NA  
## 
## Degrees of Freedom: 99 Total (i.e. Null);  97 Residual
## Null Deviance:      138.5 
## Residual Deviance: 135.5        AIC: 141.5
vcov(mylogit)
##             (Intercept)          x1          x2 x3
## (Intercept)  0.14416731 -0.01185947 -0.21880287 NA
## x1          -0.01185947  0.04196244  0.01843671 NA
## x2          -0.21880287  0.01843671  0.46649843 NA
## x3                   NA          NA          NA NA
coef(mylogit)
## (Intercept)          x1          x2          x3 
##  -0.3773247   0.3204783   0.5905926          NA 
## margins(mylogit)
## Average marginal effects
## glm(formula = y ~ x1 + x2 + x3, family = binomial(link = logit),     data = sim_dat)
## 
##       x1    x2 x3
##  0.07761 0.143  0
## There were 20 warnings (use warnings() to see them)
```

```R
## session info for your system
sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 7 x64 (build 7601) Service Pack 1

Matrix products: default

locale:
[1] LC_COLLATE=English_United Kingdom.1252  LC_CTYPE=English_United Kingdom.1252   
[3] LC_MONETARY=English_United Kingdom.1252 LC_NUMERIC=C                           
[5] LC_TIME=English_United Kingdom.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] margins_0.3.23

loaded via a namespace (and not attached):
[1] MASS_7.3-51.4     compiler_3.6.1    data.table_1.12.2 prediction_0.3.14
```



 - [x] a possible bug
 - [ ] a question about package functionality
 - [ ] a suggested code or documentation change, improvement to the code, or feature request

``` r
library(MASS)
library(margins)

# Simulate dataset
n <- 100
u <- rnorm(n)
X1 <- u + rnorm(n)
X2 <- u + rnorm(n)
Ystar <- X1 + X2 + rnorm(n)
Y <- cut(Ystar, 3)
dat <- data.frame(X1, X2, Y, Ystar)

# Estimate
mod <- polr(Y ~ X1 + X2, data = dat)
margins(mod, unit_ses = FALSE)
#> 
#> Re-fitting to get Hessian
#> Average marginal effects
#> polr(formula = Y ~ X1 + X2, data = dat)
#>       X1      X2
#>  -0.1343 -0.1299
margins(mod, unit_ses = TRUE)
#> 
#> Re-fitting to get Hessian
#> Error in jacobian %*% vcov: non-conformable arguments
```

<sup>Created on 2019-07-16 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

```
> traceback()
7: diag(jacobian %*% vcov %*% t(jacobian))
6: FUN(X[[i]], ...)
5: lapply(seq_len(nrow(data)), function(datarow) {
       FUN <- gradient_factory(data = data[datarow, ], model = model, 
           variables = variables, type = type, weights = weights, 
           eps = eps, varslist = varslist, ...)
       jacobian <- jacobian(FUN, coef(model)[names(coef(model)) %in% 
           c("(Intercept)", colnames(vcov))], weights = weights, 
           eps = eps)
       diag(jacobian %*% vcov %*% t(jacobian))
   })
4: do.call("rbind", lapply(seq_len(nrow(data)), function(datarow) {
       FUN <- gradient_factory(data = data[datarow, ], model = model, 
           variables = variables, type = type, weights = weights, 
           eps = eps, varslist = varslist, ...)
       jacobian <- jacobian(FUN, coef(model)[names(coef(model)) %in% 
           c("(Intercept)", colnames(vcov))], weights = weights, 
           eps = eps)
       diag(jacobian %*% vcov %*% t(jacobian))
   }))
3: build_margins(model = model, data = data_list[[i]], variables = variables, 
       type = NULL, vcov = vcov, vce = vce, iterations = iterations, 
       unit_ses = unit_ses, eps = eps, varslist = varslist, ...)
2: margins.polr(mod, unit_ses = TRUE)
1: margins(mod, unit_ses = TRUE)
```

`margins()` fails in a situation when in a model there is a factor variable with some unused level(s):

```R
## load package
library("margins")

## code goes here
mtcars$gear = factor(mtcars$gear,
                     c(sort(unique(mtcars$gear)),
                       "level not in the data"))
table(mtcars$gear)
m <- lm(hp ~ gear, mtcars)
margins(m)

## session info for your system
R version 3.6.0 (2019-04-26)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17763)

Matrix products: default

locale:
[1] LC_COLLATE=Polish_Poland.1250  LC_CTYPE=Polish_Poland.1250   
[3] LC_MONETARY=Polish_Poland.1250 LC_NUMERIC=C                  
[5] LC_TIME=Polish_Poland.1250    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] margins_0.3.23

loaded via a namespace (and not attached):
[1] MASS_7.3-51.4     compiler_3.6.0    tools_3.6.0       data.table_1.12.2
[5] prediction_0.3.14
```

That's is because `dydx()` while calling for predictions goes through all the levels of a factor no matter they occur in a data on which model was estimated or not. But in this latter situation model obviously gives no information needed to compute a prediction.

I think that simply adding `droplevels()` in line 159 of a file "dydx.R" should work:

```R
levs <- levels(droplevels(as.factor(data[[variable]])))
```

`margins()` S3 method for _svyglm_ object now requires providing design object as an additional argument. This causes trouble if there are missings in some variable included in a model:

```R
## load package
library(margins)
library(survey)
data(api)

## code goes here
dstrat <- svydesign(id=~1,strata=~stype, weights=~pw, data=apistrat, fpc=~fpc)
m <- svyglm(growth ~ target, dstrat)
margins(m, design = dstrat)
# not sure, why there are 2 times more rows reported in error message,
# but in general error seems to be a consequence of 20 observations in apistrat$target
# being NAs:
summary(is.na(apistrat$target))

## session info for your system
R version 3.6.0 (2019-04-26)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17763)

Matrix products: default

locale:
[1] LC_COLLATE=Polish_Poland.1250  LC_CTYPE=Polish_Poland.1250   
[3] LC_MONETARY=Polish_Poland.1250 LC_NUMERIC=C                  
[5] LC_TIME=Polish_Poland.1250    

attached base packages:
[1] grid      stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] margins_0.3.23    survey_3.36       survival_2.44-1.1 Matrix_1.2-17    

loaded via a namespace (and not attached):
[1] MASS_7.3-51.4      compiler_3.6.0     DBI_1.0.0          tools_3.6.0       
[5] splines_3.6.0      data.table_1.12.2  lattice_0.20-38    prediction_0.3.6.2
[9] mitools_2.4  
```

Importantly, providing survey design object as an argument to `margins()` seems completely unnecessary, as it is included in a _svyglm_ object and it is already restricted only to observations included in estimation - please run:

```R
m$survey.design
nrow(m$survey.design)
```

So simple solution should be replacing lines 25-32 in "margins_svyglm.R" with something like:

```R
wts <- weights(model$survey.design)
```
Hi Thomas,

Hope you are well. I noticed that the `cplot` function in margins doesn't appear to work when the data one passes to `lm` is a `data.table` instead of a `data.frame`. Perhaps you are already aware, but it's caught me out a couple of times now.

Thanks!

Jack

Please specify whether your issue is about:

 - [X ] a possible bug
 - [ ] a question about package functionality
 - [ ] a suggested code or documentation change, improvement to the code, or feature request

If you are reporting (1) a bug or (2) a question about code, please supply:

 - [a fully reproducible example](http://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example) using a publicly available dataset (or provide your data)
 - if an error is occurring, include the output of `traceback()` run immediately after the error occurs
 - the output of `sessionInfo()`

Put your code here:

```R
## load package
library(margins)
library(data.table)

x <- rnorm(100)
z <- sample(c(T, F), 100)
y <- rnorm(100)

mydt <- data.table(x,y,z)
mydf <- data.frame(x,y,z)

dtmod <- lm(y ~ x*z, mydt)
dfmod <- lm(y ~ x*z, mydf)

## DT data produces an error
cplot(dtmod, x="x", dx= "z", what = "effect")

> Error in dat[[dx]] : subscript out of bounds


## DF data does not produce an error
cplot(dfmod, x="x", dx = "z", what = "effect")


## session info for your system
sessionInfo()

R version 3.5.1 (2018-07-02)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Sierra 10.12.6

Matrix products: default
BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib

locale:
[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] data.table_1.12.2 margins_0.3.23   

loaded via a namespace (and not attached):
[1] MASS_7.3-50      compiler_3.5.1   tools_3.5.1      yaml_2.2.0       prediction_0.3.6
```
