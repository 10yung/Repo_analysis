Upon resizing the X11 window I get black bars around the rendered scene, the scene sometimes snapping to the lower and/or bottom window edge, sometimes staying exactly where it is. Scene renders as expected (judging by gl_FragCoord still saying that pixels are pixels, that is).

---

Some abbreviated `es2_info`:

    EGL_VERSION: 1.4 Midgard-"r14p0-01rel0"
    EGL_VENDOR: ARM
    EGL_CLIENT_APIS: OpenGL_ES
    GL_VERSION: OpenGL ES 3.2 v1.r14p0-01rel0-git(966ed26).f44c85cb3d2ceb87e8be88e7592755c3
    GL_RENDERER: Mali-T860

That's an rk3399 chip running Armbian, in particular a NanoPC-T4 and Ubuntu 18.04.3 LTS, using the media scripts to get at the binary driver blob and thus OpenGL ES via EGL under X11. (Now, the hardware can do vulkan but rockchip isn't releasing any drivers for that, that's a whole another issue).

---

I'm calling `resize` on the context as intended, however that's bound to do nothing as the call is blackholed in `platform_impl/unix/mod.rs` for X11 contexts. 

---

[Quoth Khronos on `eglSwapBuffers`](https://www.khronos.org/registry/EGL/sdk/docs/man/html/eglSwapBuffers.xhtml):

> Native Window Resizing
If the native window corresponding to surface has been resized prior to the swap, surface must be resized to match. surface will normally be resized by the EGL implementation at the time the native window is resized. If the implementation cannot do this transparently to the client, then eglSwapBuffers must detect the change and resize surface prior to copying its pixels to the native window. If surface shrinks as a result of resizing, some rendered pixels are lost. If surface grows, the newly allocated buffer contents are undefined. The resizing behavior described here only maintains consistency of EGL surfaces and native windows; clients are still responsible for detecting window size changes (using platform-specific means) and changing their viewport and scissor regions accordingly.

...which, if I'm reading that correctly, makes the behavior ARM's fault: They should be resizing the surface on their end, in `libMali.so` (where egl lives). OTOH other egl-backed apps I'm running do resize properly, which leads me to believe that context libraries that aren't glutin happen to be working around this issue.
The new releases of winit and glutin use different versions of parking_lot (0.9 and 0.10). Can glutin get an update with the new version of parking_lot?
The pull request https://github.com/rust-windowing/glutin/pull/1253 prevents Glutin from creating windowed contexts on systems that do not have vsync extensions. It fails even if `vsync` is set to `false`.

```
CreationErrors([NoAvailablePixelFormat, OsError("Couldn't find any available vsync extension")])
```
In my opinion instead of throwing an error at [mod.rs#L459](https://github.com/2xsaiko/glutin/blob/3acad49efa2325230d9479e665104c5d68600719/glutin/src/api/glx/mod.rs#L459 ) we shall ignore vsync if there are no available extensions.


Here is an example of such limited system:

```
name of display: :0
display: :0  screen: 0
direct rendering: Yes
server glx vendor string: Parallels Inc
server glx version string: 1.4
server glx extensions:
    GLX_ARB_get_proc_address, GLX_EXT_texture_from_pixmap, GLX_SGIX_fbconfig
client glx vendor string: Parallels Inc
client glx version string: 1.4
client glx extensions:
    GLX_ARB_get_proc_address, GLX_EXT_texture_from_pixmap, GLX_SGIX_fbconfig
GLX version: 1.4
GLX extensions:
    GLX_ARB_get_proc_address, GLX_EXT_texture_from_pixmap, GLX_SGIX_fbconfig
OpenGL vendor string: Parallels and ATI Technologies Inc.
OpenGL renderer string: Parallels using AMD Radeon Pro 460 OpenGL Engine
OpenGL version string: 2.1 ATI-3.2.24
OpenGL shading language version string: 1.20
OpenGL extensions:
    GL_ARB_color_buffer_float, GL_ARB_depth_buffer_float, GL_ARB_depth_clamp, 
    GL_ARB_depth_texture, GL_ARB_draw_buffers, 
    GL_ARB_draw_elements_base_vertex, GL_ARB_draw_instanced, 
    GL_ARB_fragment_program, GL_ARB_fragment_program_shadow, 
    GL_ARB_fragment_shader, GL_ARB_framebuffer_object, 
    GL_ARB_framebuffer_sRGB, GL_ARB_half_float_pixel, 
    GL_ARB_half_float_vertex, GL_ARB_imaging, GL_ARB_instanced_arrays, 
    GL_ARB_map_buffer_range, GL_ARB_multisample, GL_ARB_multitexture, 
    GL_ARB_occlusion_query, GL_ARB_pixel_buffer_object, 
    GL_ARB_point_parameters, GL_ARB_point_sprite, GL_ARB_provoking_vertex, 
    GL_ARB_seamless_cube_map, GL_ARB_shader_objects, 
    GL_ARB_shader_texture_lod, GL_ARB_shading_language_100, GL_ARB_shadow, 
    GL_ARB_shadow_ambient, GL_ARB_sync, GL_ARB_texture_border_clamp, 
    GL_ARB_texture_compression, GL_ARB_texture_compression_rgtc, 
    GL_ARB_texture_cube_map, GL_ARB_texture_env_add, 
    GL_ARB_texture_env_combine, GL_ARB_texture_env_crossbar, 
    GL_ARB_texture_env_dot3, GL_ARB_texture_float, 
    GL_ARB_texture_mirrored_repeat, GL_ARB_texture_non_power_of_two, 
    GL_ARB_texture_rectangle, GL_ARB_texture_rg, GL_ARB_transpose_matrix, 
    GL_ARB_vertex_array_bgra, GL_ARB_vertex_array_object, GL_ARB_vertex_blend, 
    GL_ARB_vertex_buffer_object, GL_ARB_vertex_program, GL_ARB_vertex_shader, 
    GL_ARB_window_pos, GL_ATI_separate_stencil, GL_ATI_texture_env_combine3, 
    GL_ATI_texture_float, GL_ATI_texture_mirror_once, GL_EXT_abgr, 
    GL_EXT_bgra, GL_EXT_bindable_uniform, GL_EXT_blend_color, 
    GL_EXT_blend_equation_separate, GL_EXT_blend_func_separate, 
    GL_EXT_blend_minmax, GL_EXT_blend_subtract, GL_EXT_clip_volume_hint, 
    GL_EXT_depth_bounds_test, GL_EXT_draw_buffers2, 
    GL_EXT_draw_range_elements, GL_EXT_fog_coord, GL_EXT_framebuffer_blit, 
    GL_EXT_framebuffer_multisample, GL_EXT_framebuffer_object, 
    GL_EXT_framebuffer_sRGB, GL_EXT_geometry_shader4, 
    GL_EXT_gpu_program_parameters, GL_EXT_gpu_shader4, 
    GL_EXT_multi_draw_arrays, GL_EXT_packed_depth_stencil, 
    GL_EXT_packed_float, GL_EXT_provoking_vertex, GL_EXT_rescale_normal, 
    GL_EXT_secondary_color, GL_EXT_separate_specular_color, 
    GL_EXT_shadow_funcs, GL_EXT_stencil_two_side, GL_EXT_stencil_wrap, 
    GL_EXT_texture3D, GL_EXT_texture_array, GL_EXT_texture_compression_dxt1, 
    GL_EXT_texture_compression_s3tc, GL_EXT_texture_edge_clamp, 
    GL_EXT_texture_env_add, GL_EXT_texture_env_combine, 
    GL_EXT_texture_filter_anisotropic, GL_EXT_texture_integer, 
    GL_EXT_texture_lod_bias, GL_EXT_texture_mirror_clamp, 
    GL_EXT_texture_rectangle, GL_EXT_texture_sRGB, 
    GL_EXT_texture_shared_exponent, GL_EXT_transform_feedback, 
    GL_EXT_vertex_array_bgra, GL_NV_blend_square, GL_NV_conditional_render, 
    GL_NV_depth_clamp, GL_NV_fog_distance, GL_NV_light_max_exponent, 
    GL_NV_texgen_reflection, GL_NV_texture_rectangle, GL_SGIS_generate_mipmap, 
    GL_SGIS_texture_edge_clamp, GL_SGIS_texture_lod, GL_SGI_color_matrix

4 GLX Visuals
    visual  x   bf lv rg d st  colorbuffer  sr ax dp st accumbuffer  ms  cav
  id dep cl sp  sz l  ci b ro  r  g  b  a F gb bf th cl  r  g  b  a ns b eat
----------------------------------------------------------------------------
0x021 24 tc  1  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 None
0x022 24 dc  1  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 None
0x023 32 tc  1  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 None
0x024 32 dc  1  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 None

16 GLXFBConfigs:
    visual  x   bf lv rg d st  colorbuffer  sr ax dp st accumbuffer  ms  cav
  id dep cl sp  sz l  ci b ro  r  g  b  a F gb bf th cl  r  g  b  a ns b eat
----------------------------------------------------------------------------
0x053 32 dc  1  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 None
0x054 32 dc  1  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 None
0x055 24 dc  1  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 None
0x056 24 dc  1  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 None
0x057 32 tc  1  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 None
0x058 32 tc  1  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 None
0x059 24 tc  1  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 None
0x05a 24 tc  1  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 None
0x05b 32 dc  1  32  0 r  . .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 None
0x05c 32 dc  1  32  0 r  . .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 None
0x05d 24 dc  1  24  0 r  . .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 None
0x05e 24 dc  1  24  0 r  . .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 None
0x05f 32 tc  1  32  0 r  . .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 None
0x060 32 tc  1  32  0 r  . .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 None
0x061 24 tc  1  24  0 r  . .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 None
0x062 24 tc  1  24  0 r  . .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 None
```
It's possible to use a single OpenGL context to render to multiple windows, on Windows and X11 at least ([see this post](https://community.khronos.org/t/multiple-opengl-windows-in-one-application/72971/3)). It would be cool if Glutin supported that usecase, although it's not entirely clear to me what the API design for that would look like. It's been on my mind on and off the past few years now though, and I figured it'd be useful to officially put down that it's a thing we could do.
The method name and documentation implies that display lists are the only objects that get shared between contexts, which very much isn't the case. You seem to be able to share [most non-container objects](https://www.khronos.org/opengl/wiki/OpenGL_Object#Object_Sharing) between contexts, so we should rename the function to reflect that and link to that wiki page.
This adds basic support for android to glutin. The android build failure is due a too old version of `cargo-apk`, the docker image needs to use https://github.com/rust-windowing/android-rs-glue/pull/256
I'm wondering if it would make sense to have a sample on how to force software rendering using glutin.
Basically my dream is that `glutin` does not need to depend on a particular version of `winit`, it just does the OpenGL context setup and `winit`'s windowing and event loop and stuff is all independent of it.  `glutin` just takes a `raw-window-handle` and does its magic.

Per conversations on Discord, this is Tricky 'cause on some platforms the OpenGL context setup needs to happen at window creation time, you can't create a window and then throw an OpenGL context into it later.  So `glutin` would need to create a window and then pass its `raw-window-handle` to `winit` for it to do *its* magic.  For my purposes this seems fine, and apparently bullet point 2 in [this issue](https://github.com/rust-windowing/winit-blit/issues/1#issue-526294636) has similar problems, so this may be something we want to do anyway.
Supersedes #1165, as the diff was getting cluttered.
- [ ] Examples updated?

Implemented for:
- [ ] Windows - EGL
- [ ] Windows - WGL
- [x] X11 - EGL
- [ ] X11 - GLX
- [x] Wayland - EGL
- [x] OSMesa
- [ ] MacOS
- [ ] iOS
- [ ] ~Android~ (Waiting on https://github.com/rust-windowing/winit/pull/1328)

Tested for:
- [ ] Windows - EGL
- [ ] Windows - WGL
- [ ] X11 - EGL
- [ ] X11 - GLX
- [ ] Wayland - EGL
- [ ] MacOS
- [ ] iOS
- [ ] OSMesa
- [ ] ~Android~ (Waiting on https://github.com/rust-windowing/winit/pull/1328)

#1140 will be solved by adding stuff to plat_attrs for x11 and windows
#1136
#1184 

How the Raw extensions will work I have yet to decide, but I'll shoe horn something in once we got it more fleshed out.
How could I write a array of u32 values to the frame buffer?