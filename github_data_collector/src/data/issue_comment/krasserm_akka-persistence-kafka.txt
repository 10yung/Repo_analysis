This is an early version with kafka 0.11 support and transactional producers implemented, as described in #20. I would welcome some early feedback.

While this version works and passes the tests, I think some additional work should still be done:

- Replace all uses of the old scala kafka api with the new java producers and consumers
- Remove the dependency on kafka, and only depend on kafka-clients?
- Can the dependency on zookeeper and the BrokerWatcher mechanism be removed?
- Upgrade to the latest version of akka-persistence (not experimental anymore)
- Don't use multiple KafkaProducer instances in the KafkaJournalWriters (From the KafkaProducer javadoc: `The producer is thread safe and sharing a single producer instance across threads will generally be faster than having multiple instances.`)
- Add tests for transactional behaviour by mocking the kafka producer?
- Update the README

Hi, 
We are trying to use the library for Akka 2.4.17 adn kafka 0.10.2. It would be great if you add support to the latest versions 

Regards,
Sravan 
Has anyone tried to use this in conjunction with clustering ?
I implemented a simple cluster singleton with persistence and a client. When I run the system without persistence, works like a charm. When I run it with persistence enabled and LevelDB, Cassandra or Couchbase backands, also works. When I run it with Kafka persistence enabled, somehow the actors cannot communicate anymore. Gossip protocol still works, but the messages sent from the client ( simple case objects ) are not reaching the singleton anymore. My guess is that somehow kafka persistence is interfering with message serialization, but I don't really understand how ... has anyone has had similar experiences ?
Thank you!



Hello,
I am using latest version akka-persistence-kafka for persisting state of one kind of Actor (but very hot Actor), and I noticed lots CLOSE_WAIT sockets, and as application starts, it's number grows:

```
netstat -ant  | grep CLOSE_WAIT
tcp6       1      0 172.31.39.249:33181     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:60979     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:33271     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:59335     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:32958     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:33150     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:60964     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:33153     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:32939     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:33285     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:60968     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:33287     172.31.39.249:9092      CLOSE_WAIT
tcp6       1      0 172.31.39.249:32967     172.31.39.249:9092      CLOSE_WAIT
```

There is nothing except akka-persistence who connects to kafka, looks like a bug.

See also http://blog.confluent.io/2014/12/02/whats-coming-in-apache-kafka-0-8-2/

Use case is the following: an Akka application implementing event sourcing performs sharding internally before persisting events. Such sharding would occur at a single actor with a fanout; messages could then be sent along to a set of PersistentActors, one for each partition of a topic. This would allow external consumption of a partitioned topic when events are captured in an akka application.
