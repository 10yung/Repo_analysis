This change fixes compiler misjudgement on whether small functions should be inlined into `LZ4_compress_generic`. Since `LZ4_compress_generic` is a big function and it is force inlined, the compiler heuristics prevent inlining of small functions, which results in excessive code size.

For example, `LZ4_getIndexOnHash` is compiled by MSVC 2019 as:
```
00007FF6739A58A0  mov         eax,ecx  
00007FF6739A58A2  mov         eax,dword ptr [rdx+rax*4]  
00007FF6739A58A5  ret
```

With the following call site in `LZ4_compress_generic`:
```
; pass tableType, even though it is unused
00007FF6739A62A3  mov         r8d,2
; store h on stack, as it is later used in the function, but may be changed during the call
00007FF6739A62A9  mov         dword ptr [rsp+0F0h],ecx
...
00007FF6739A62B6  call        tracy::LZ4_getIndexOnHash (07FF6739A58A0h)  
```

With the proposed changes the entire `LZ4_getIndexOnHash` call is compiled as:
```
00007FF7809F5048  mov         ecx,dword ptr [r9+rdx*4]
```

This has the following effect on compression speed:

Ryzen 3900X @3.8GHz (turbo disabled):

```
 dickens :
Compression functions :
 1-LZ4_compress_default            :  10192446 ->  6431106 (63.10%),  347.0 MB/s -> 358.6 MB/s
 2-LZ4_compress_default(small dst) :  10192446 ->  6431106 (63.10%),  334.6 MB/s -> 366.2 MB/s
 3-LZ4_compress_destSize           :  10192446 ->  6431106 (63.10%),  331.9 MB/s -> 359.4 MB/s
 4-LZ4_compress_fast(0)            :  10192446 ->  6431106 (63.10%),  345.7 MB/s -> 363.2 MB/s
 5-LZ4_compress_fast(1)            :  10192446 ->  6431106 (63.10%),  346.4 MB/s -> 364.9 MB/s
 6-LZ4_compress_fast(2)            :  10192446 ->  6763934 (66.36%),  380.2 MB/s -> 412.9 MB/s
 7-LZ4_compress_fast(17)           :  10192446 ->  9222511 (90.48%),  990.8 MB/s -> 1053.8 MB/s
 8-LZ4_compress_fast_extState(0)   :  10192446 ->  6431106 (63.10%),  385.0 MB/s -> 382.3 MB/s
 9-LZ4_compress_fast_continue(0)   :  10192446 ->  6428753 (63.07%),  366.2 MB/s -> 363.6 MB/s
10-LZ4_compress_HC                 :  10192446 ->  4441354 (43.57%),   20.1 MB/s -> 20.2 MB/s
12-LZ4_compress_HC_extStateHC      :  10192446 ->  4441354 (43.57%),   20.1 MB/s -> 20.1 MB/s
14-LZ4_compress_HC_continue        :  10192446 ->  4432831 (43.49%),   20.0 MB/s -> 20.0 MB/s
20-LZ4_compress_forceDict          :  10192446 ->  6428753 (63.07%),  356.8 MB/s -> 336.6 MB/s
```

```
 ooffice :
Compression functions :
 1-LZ4_compress_default            :   6152192 ->  4339312 (70.53%),  486.5 MB/s -> 498.6 MB/s
 2-LZ4_compress_default(small dst) :   6152192 ->  4339312 (70.53%),  470.0 MB/s -> 488.7 MB/s
 3-LZ4_compress_destSize           :   6152192 ->  4339312 (70.53%),  450.6 MB/s -> 471.7 MB/s
 4-LZ4_compress_fast(0)            :   6152192 ->  4339312 (70.53%),  484.8 MB/s -> 498.6 MB/s
 5-LZ4_compress_fast(1)            :   6152192 ->  4339312 (70.53%),  486.7 MB/s -> 498.4 MB/s
 6-LZ4_compress_fast(2)            :   6152192 ->  4552666 (74.00%),  608.1 MB/s -> 621.6 MB/s
 7-LZ4_compress_fast(17)           :   6152192 ->  5531363 (89.91%), 1619.8 MB/s -> 1648.1 MB/s
 8-LZ4_compress_fast_extState(0)   :   6152192 ->  4339312 (70.53%),  501.6 MB/s -> 485.1 MB/s
 9-LZ4_compress_fast_continue(0)   :   6152192 ->  4338923 (70.53%),  458.2 MB/s -> 456.6 MB/s
10-LZ4_compress_HC                 :   6152192 ->  3546025 (57.64%),   35.9 MB/s -> 35.7 MB/s
12-LZ4_compress_HC_extStateHC      :   6152192 ->  3546025 (57.64%),   35.6 MB/s -> 35.7 MB/s
14-LZ4_compress_HC_continue        :   6152192 ->  3543767 (57.60%),   35.6 MB/s -> 35.6 MB/s
20-LZ4_compress_forceDict          :   6152192 ->  4338923 (70.53%),  471.0 MB/s -> 456.3 MB/s
```

Odroid C2 (ARM64):

```
 ooffice :
Compression functions :
 1-LZ4_compress_default            :   6152192 ->  4339312 (70.53%),   68.2 MB/s -> 68.9 MB/s
 2-LZ4_compress_default(small dst) :   6152192 ->  4339312 (70.53%),   67.1 MB/s -> 67.4 MB/s
 3-LZ4_compress_destSize           :   6152192 ->  4339312 (70.53%),   57.2 MB/s -> 57.5 MB/s
 4-LZ4_compress_fast(0)            :   6152192 ->  4339312 (70.53%),   68.2 MB/s -> 68.9 MB/s
 5-LZ4_compress_fast(1)            :   6152192 ->  4339312 (70.53%),   68.2 MB/s -> 68.9 MB/s
 6-LZ4_compress_fast(2)            :   6152192 ->  4552666 (74.00%),   83.1 MB/s -> 83.8 MB/s
 7-LZ4_compress_fast(17)           :   6152192 ->  5531363 (89.91%),  283.2 MB/s -> 284.2 MB/s
 8-LZ4_compress_fast_extState(0)   :   6152192 ->  4339312 (70.53%),   63.8 MB/s -> 70.2 MB/s
 9-LZ4_compress_fast_continue(0)   :   6152192 ->  4338923 (70.53%),   58.2 MB/s -> 63.0 MB/s
10-LZ4_compress_HC                 :   6152192 ->  3546025 (57.64%),    7.1 MB/s -> 7.0 MB/s
12-LZ4_compress_HC_extStateHC      :   6152192 ->  3546025 (57.64%),    7.1 MB/s -> 7.1 MB/s
14-LZ4_compress_HC_continue        :   6152192 ->  3543767 (57.60%),    7.1 MB/s -> 7.1 MB/s
20-LZ4_compress_forceDict          :   6152192 ->  4338923 (70.53%),   58.6 MB/s -> 63.1 MB/s
```
Yesterday, when I uploaded app binary in Apple AppStore Connect, I received the following error message:

> ITMS-90338: Non-public API usage - The app references non-public symbols in MY_APP_NAME: _LZ4_decompress_safe. If method names in your source code match the private Apple APIs listed above, altering your method names will help prevent this app from being flagged in future submissions.

Can someone advise a way to solve the problem?
This PR allows testing on multiple architectures via Travis-CI.
function "LZ4_resetStream_fast" is added in LZ4_attach_dictionary at commit "f2ae385c2f" in order to make sure that changes will not be erased by subsequent calls to LZ4_resetStream_fast() in case stream was marked as having dirty context, e.g. requiring full reset.
Correspondingly， when LZ4_compress_generic goto failure cctx->dirtyContext is set to 1. However, now,  LZ4_compress_generic goto failure , no cctx->dirty would be set. So  `if (cctx->dirty)` in function LZ4_resetStream_fast makes no sense. No body will set this variable to 1.
Subject: Can we introduce [GitHub's issue templates](https://help.github.com/en/github/building-a-strong-community/configuring-issue-templates-for-your-repository) to this project?

Recently, actually recent 24 months ;) , I've observed that there're many vague issues here GitHub issues of LZ4 project.
And also I can say that there're many users and potential contributors who are struggling to express their issue/problem/concern/impressions.

I think GitHub's issue templates helps them a lot.  Because it has been designed to help normal/ordinal people who doesn't have technical/bare-metal computing background.
Especially for this project, there must be many people who doesn't have experience with bare-metal computer language (such as C/C++) but also has interest high performance computing and compression.

----
For example, `electron` project has [their own template](https://github.com/electron/electron/blob/master/.github/ISSUE_TEMPLATE/Bug_report.md) and their typical issue looks like this one `https://github.com/electron/electron/issues/21309` .

----
EDIT: I removed direct link to electron project's issue to avoid auto issue linking.  I'm sorry if someone from the team is looking this issue.
Imagine a protocol that disallows the compressor to inflate the packet size and we want to use LZ4Frame streaming compression.

Whenever we compress a packet, and it gets larger, we must send it uncompressed because of the protocol restrictions. We now need to reset the compressor and decompressor, since the decompressor will never receive the uncompressed block, and the compressor has already processed it (we just threw out the result).

We will still send the uncompressed data to the decompressor. It would be nice to have a function like `LZ4F_injectUncompressedBlock(LZ4F_dctx* dctx, void const* src, size_t srcSize)`. That way we don't have to reset the stream.

Alternatively, the user could prepend a fake LZ4F block header to the uncompressed data, and pass that to the normal decompression function. This works with the current LZ4 version.
Hello.

I'm looking to compress on an embedded arm platform for decompression on a pc or mobile platform. I'm using the same format in the examples:

[16bit length][data...][16 bit length][data...]...

I've verified through crc32 that the data on the embedded matches the pc side. The code to compress is identical although the code driving the compress has some minor differences that shouldn't affect things.

I'm seeing differences in the compressed data starting about halfway through the first compressed block. Source size of 4096, output size of 599 bytes (arm) 597 (x86).

- This is single threaded at the moment
- Increased stack to 16k in case it was a stack overflow
- Compared 4096 byte input block to confirm it matches between ARM/x86 by printing out each byte and a column sum in 16byte chunks.
- Decompressing the ARM compressed block yields the same data for the first 4096 byte chunk. I don't have the means to compare the full buffer.


Is it expected that the algorithm could produce different compressed output between the two platforms but that I should be able to decompress the ARM compressed data on a pc/mobile platform?
The spec (`doc/lz4_Block_format.md`) says that a 255 byte means to add that to an accumulator and read another byte. It does not specify overflow behavior: what to do if e.g. decoding 17 million consecutive 0xFF bytes (`17000000 * 255` is around 4.3 billion, which is more than `1 << 32`).

Of course, a reasonable encoder shouldn't do that, but not every encoder is reasonable, and a malicious actor passing around a 17MB file is very feasible. It would be great if the spec and various implementations (whether C, Java, JavaScript, Python etc which all have different 'integer' semantics) could all agree on how to treat this (e.g. is it an error, or should it always be `uint32_t` modular arithmetic)?

It is possibly a security issue if two different programs disagree on the decoding of some LZ4-compressed data, especially if the first program verifies some sort of safety property before passing it on to the second.

If I understand the canonical *implementation* correctly, `read_variable_length` in `lz4.c` uses an `unsigned`. The function does have comments that say "overflow detection", but this checks overflowing the input buffer, not overflowing the accumulator. Technically, `sizeof(unsigned int)` depends on the platform. A mere 260 copies of an 0xFF byte could overflow on a 16-bit platform where `sizeof(int) == 2`.
As of v1.9.2, I don't see any *stable* frame API (`lz4frame.h`) for compressing *with a dictionary*.

The `LZ4F_frameInfo_t` struct does have an `unsigned dictID` field, but that's just an ID, not the `(const void* dictBuffer, size_t dictSize)`.

There is a "Bulk processing dictionary API", but it is guarded by `LZ4F_STATIC_LINKING_ONLY`, and my (Go) program does not static-link lz4.

The block API (`lz4.h`) does have `LZ4_loadDict` in its stable API, e.g. used by `examples/dictionaryRandomAccess.c`. I guess I could roll my own format to wrap the block format, or roll my own implementation of the frame format, and stick to stable LZ4 API, but the existing LZ4 framing format (and its existing unstable API) does exactly what I want.

I know that "just bless the existing unstable API as stable" can be easier said than done. I just want a LZ4-the-project issue to point people to if I'm asked why my program doesn't support LZ4-the-format dictionaries yet.
Through release 1.8.3, lz4 releases for Windows included pre-built shared libraries (e.g. dll/liblz4.so.1.8.3.dll).  

Starting with the 1.9.X line, prebuilt dlls are no longer present, and instead, only a static liblz4.dll.a file is shipped in the /dll folder.  It seems an unconventional change to provide a GCC-style static file here, especially when similar libraries (e.g. zstd) stick with the normal convention of shipping a prebuilt Windows dll in the /dll folder.  (Prebuilt shared libraries are incredibly convenient for Windows devs - thank you to whomever built these in the past!)

A quick scan of lz4's 1.9.X release notes doesn't explain why this changed, so I just wanted to see if this was an intentional or accidental change?

tl;dr - are there plans to include prebuilt Windows DLLs in future lz4 releases?  Similarly, is there a reason they are no longer provided (hopefully no known problems with building lz4 this way using the provided VS solutions)?

Thank you!