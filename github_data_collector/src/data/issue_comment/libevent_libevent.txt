### Getting the following issue while trying to run make:

```
./.libs/libevent_openssl-2.2.so: undefined reference to `SSL_set_accept_state'
./.libs/libevent_openssl-2.2.so: undefined reference to `BIO_meth_set_write'
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[1]: *** [Makefile:1610: sample/le-proxy] Error 1
make[1]: Leaving directory '/shared/tmp/temp_workspace/libevent'
make: *** [Makefile:1412: all] Error 2
```

### OS specs:

- macOS Mojave 10.14.6
- make, cmake, openssl installed using brew

### Steps I have used:

- Ensured https://developer.android.com/studio/projects/install-ndk
- Ensured the path and variables and running the following script:

```
#!/usr/bin/env bash
set -xe

rm -rf libevent
git clone https://github.com/libevent/libevent.git
cd libevent
make clean || true

# Ensure "ls -lad ${NDK}/toolchains/llvm/prebuilt/darwin-x86_64"
export HOST_TAG="darwin-x86_64"
export NDK="${HOME}/Library/Android/sdk/ndk/21.0.6113669"
export GNUMAKE="${NDK}/prebuilt/${HOST_TAG}/bin/make"
#export GNUMAKE="/usr/local/bin/gmake"

export TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/$HOST_TAG
export AR=$TOOLCHAIN/bin/aarch64-linux-android-ar
export AS=$TOOLCHAIN/bin/aarch64-linux-android-as
export CC=$TOOLCHAIN/bin/aarch64-linux-android21-clang
export CXX=$TOOLCHAIN/bin/aarch64-linux-android21-clang++
export LD=$TOOLCHAIN/bin/aarch64-linux-android-ld
export RANLIB=$TOOLCHAIN/bin/aarch64-linux-android-ranlib
export STRIP=$TOOLCHAIN/bin/aarch64-linux-android-strip
#export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"
./autogen.sh
./configure --host aarch64-linux-android

$GNUMAKE
```

#### Pros:
- windows/osx/linux in one place
- may fix tests under osx
- can be used to build docker images
- according to [doc](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/about-github-actions#usage-limits) allows **20 concurrent jobs** (although only **5 for osx**), while [travis-ci](https://travis-ci.com/plans) allows only **3 concurrent jobs** and **no parallelism across various OS'es**

Closes: #940
Closes: #758 
Refs: #887 
Hey there and happy new year,

Consider a user case of a HTTP download server which provides downloads of a large file, by using `evhttp_send_chunk_reply()`. Assume that you want to shut down the server for the maintenance. During the shutdown the server is still serving some active downloads and many requests may still be coming. 
Is there any a nice way to deny the incoming requests, and to store the states of all active downloads or finish those downloads before the shutdown in this case?

Additionally I have another question which could be relevant to the above question. I use `event_base_loopexit(evBase, null)` to stop the event loop, and expect that the loop will exit after it completes the handling of active downloads. However, I get an assertion when I shut down the server:
>  bufferevent.c:692: Assertion bufev_private->refcnt > 0 failed in bufferevent_decref_and_unlock_

I am not sure how `event_base_loopexit()` behaves. The callback set by `evhttp_connection_set_closecb()` is not invoked during the loop exit.

Thank you for any tips!
I'm trying to find out how to do a `SSL_shutdown()` and why there isn't a `int bufferevent_ssl_shutdown(struct bufferevent *bev);` function (triggering a DISCONNECTED event similar to CONNECTED). The underlying socket I'm using is non-blocking.

I'm trying to understand the following sentence from the OpenSSL manual in the context of being used with libevent

> "When using a non-blocking socket, nothing is to be done, but select() can be used to check for the required condition."
https://www.openssl.org/docs/man1.1.1/man3/SSL_shutdown.html

What "required condition" can/should be checked, and is there a benefit of doing this in the libevent event loop (make libevent shutdown aware)?

I know I can get the `SSL*` from `bufferevent_openssl_get_ssl` and call `SSL_shutdown` directly (followed by a bufferevent_free). But it's not clear that this is correct if the socket is non-blocking. As there is a reference that you may in some cases need further read/write's in case the "BIO" is non-blocking that wouldn't be sufficient.

I found this thread on the openssl maling list but it didn't make it clear to me https://mta.openssl.org/pipermail/openssl-users/2018-August/008493.html
Libevent Version: 2.1.6 
System: ubuntu 18.04 LTS (Desktop)

as title mentions, after evdns_getaddreinfo is called, I free its base object by calling evdns_base_free(evdns_base, 0)  before it get a result.  it might leaks some memory (according to vg detection): 

sample codes:

	#include <event2/dns.h>
	#include <event2/event.h>
	#include <event2/thread.h>
	#include <cassert>
	#include <cstdlib>
	#include <cstring>

	static void dns_callback(int  errcode,  struct  evutil_addrinfo *addr, void *usr_ptr)
	{
		if (errcode) {
			assert(!addr);
		}
		else {
			evutil_freeaddrinfo(addr);
		}
	}

	int main(int, char **)
	{
		const char * host = "www.google.com";

		evthread_use_pthreads();
		event_base * event_base = nullptr;
		evdns_base * evdns_base = nullptr;

		event_base = event_base_new();
		evdns_base = evdns_base_new(event_base, EVDNS_BASE_DISABLE_WHEN_INACTIVE);

		struct evutil_addrinfo hints;
		memset(&hints, 0, sizeof(hints));
		hints.ai_family = PF_UNSPEC;
		hints.ai_protocol = IPPROTO_TCP;
		hints.ai_flags = EVUTIL_AI_CANONNAME;
		evdns_getaddrinfo(evdns_base, host, nullptr, &hints, dns_callback, nullptr);

		// let's not call event_base_loop.

		evdns_base_free(evdns_base, 0);
		event_base_free(event_base);

	}

the VG test results: 
==19491== Memcheck, a memory error detector
==19491== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==19491== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==19491== Command: zecore/build/bin/test_libevent
==19491== 
==19491== 
==19491== HEAP SUMMARY:
==19491==     in use at exit: 384 bytes in 4 blocks
==19491==   total heap usage: 20 allocs, 16 frees, 3,120 bytes allocated
==19491== 
==19491== 264 bytes in 1 blocks are definitely lost in loss record 4 of 4
==19491==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==19491==    by 0x4E48C87: evdns_getaddrinfo (in /usr/lib/x86_64-linux-gnu/libevent_extra-2.1.so.6.0.2)
==19491==    by 0x1089AB: main (testLibevent.cpp:35)
==19491== 
==19491== LEAK SUMMARY:
==19491==    definitely lost: 264 bytes in 1 blocks
==19491==    indirectly lost: 0 bytes in 0 blocks
==19491==      possibly lost: 0 bytes in 0 blocks
==19491==    still reachable: 120 bytes in 3 blocks
==19491==         suppressed: 0 bytes in 0 blocks
==19491== Reachable blocks (those to which a pointer was found) are not shown.
==19491== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==19491== 
==19491== For counts of detected and suppressed errors, rerun with: -v
==19491== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
I've registered a callback function via `evhttp_set_cb()`. Inside of the callback function I create and send the reply via `evhttp_send_reply(…)` but how can I keep the connection open and read from and send to the peer after that?

(I am implementing a simple WebSocket server, so the connection might be open for a quite long time)


At installation `@rpath` in install_name is replaced with absolute path. How can I prevent this?
`cd "$LIBEVENT_CMAKE_PATH"`
`cmake -DCMAKE_INSTALL_PREFIX:PATH="$LIBEVENT_BUILD_PATH" "$LIBEVENT_PATH"`
`cmake --build "$LIBEVENT_CMAKE_PATH" --target install --config Release`
`otool -D "$LIBEVENT_BUILD_PATH/lib/libevent-2.1.7.dylib"`
`Result: /Users/barricadenick/build/libevent-2.1.11-macos/lib/libevent-2.1.7.dylib`
`Expected result: @rpath/libevent-2.1.7.dylib <- the same as in zlib, libpng, SDL, etc`
Mac OS
If we do not remove a bad fd from the select list we keep getting the same error from select, and we stop doing any progress as we loop on select_dispatch. Thus, we forcefully disable all bad fd as soon as select fails, and we are back in track, progress ensues and everything seems to work as expected (no leftover events in the event base).

Signed-off-by: George Bosilca <bosilca@icl.utk.edu>
I noticed that 737d1beb14423dc212b0c53edf536b3172c87571 added the ability to bind the HTTP server to a UNIX socket.

Is there a way to do the same but for the client?

A long time ago I submitted a PR (#479) for some code I used to make HTTP requests over a UNIX socket, but this wasn't accepted. Maybe my approach was wrong, but I'm still looking for a way to do this.
I’m working on the Zeek project (https://github.com/zeek/zeek) and we’re investigating switching from our internally-written event loop over to use something like libevent. One of the features of our existing hand-written loop is that we can trigger it using an artificial time base, which allows us to move time forward based on the timestamps of packets in a packet capture. Timers can then fire based on the packet times instead of wall-clock time, and we get repeatable results when using such files as if they were still live data.

Does something like that already exist in libevent or cauld it be easily added? I dug through the code a little bit today and it seems possible to add it, but I thought I’d ask before I went too far with it.