A new version of MPTCP protocol (RFC8684) has been published, with some
changes to the MP_CAPABLE options handling. Let tcpdump print the protocol
version, and adjust parsing of MP_CAPABLE options according to RFC8684.

Signed-off-by: Davide Caratti <dcaratti@redhat.com>
Please add an option to directly use a user ID and group ID with the -Z/--relinquish-privileges option.

With the following commands:
```
# tcpdump -c 10 -w output_file_1 -Z 900:990
# tcpdump -c 10 -w output_file_2 -Z 901
# tcpdump -c 10 -w output_file_3 -Z :991
```

I would expect the output files to have permissions like this.
```
# ls -la
-rw-r-----. 1 900  990  1000 Dec 19 10:20 output_file_1
-rw-r-----. 1 901  root 1000 Dec 19 10:20 output_file_2
-rw-r-----. 1 root 991  1000 Dec 19 10:20 output_file_3
```

Distributions which started building --with-user to switch to an
unpriviliged user claim that the old behavior of running under root
can be restored by passing "-Z root" on the command line. However,
doing so is different from not using --with-user, as tcpdump still
drops privileges and sets supplementary user groups.

In Linux containers using user namespaces with an in-container root
user mapped to an unprivileged external user, calling setgroups() is
usually denied, as it would allow that unprivileged user to leave
groups (see user_namespaces(7) for details). Passing "-Z root" on
a --with-user build still goes through initgroups() and therefore
setgroups(), which will fail in such a container environment. This
makes tcpdump builds using --with-user effectively unusable in such
containers.

Adjust the "-Z root" fallback to skip any privilege dropping and
supplementary group setup, making it identical to builds not using
--with-user.
IOW, something similar to `-T …` except that it currently won't help decoding, say, DNS traffic if ports other than 53 are used.
When outputting with `ndo_vflag > 0` IPv4 addresses have a newline before the IPs while IPv6 do not.

Here's an example:
```
1523520922.254050 IP (tos 0x0, ttl 107, id 4816, offset 0, flags [none], proto UDP (17), length 74)
    @ipv4@.52249 > @ipv4@.53: [udp sum ok] 51092 A? example.com. (46)
1523520922.254978 IP6 (hlim 54, next-header UDP (17) payload length: 47) @ipv6@.52249 > @ipv6@.53: [udp sum ok]
```

This is a pretty minor issue, but it'd be nice if it was consistent. I wasn't sure if this was intentional or which way is preferred so that's why this is an issue instead of a pull request.

The newline comes from [print-ip.c:468](https://github.com/the-tcpdump-group/tcpdump/blob/master/print-ip.c#L468)

Personally, I'd prefer a single line of output for easy parsing.

Forgot to mention: tcpdump version `4.9.2` and lippcap `1.8.1`, but it doesn't look like the line in question has changed in newer versions.
I need to capture packets without the influence of iptables. Because I set the DNAT of iptables to cause the inconsistency between the flow IP of in and out when tcpdump grabs packets, so I can't analyze the flow correctly. As shown below, the outlet flow is affected by iptables, but the inlet flow is not affected by iptables. How can I capture packets without the influence of iptables? 

```
10.0.2.15.40322 > 127.0.0.1.8080: Flags [S], seq 2338969149, win 65535, options [mss 1460,sackOK,TS val 1301594 ecr 0,nop,wscale 6], length 0
203.208.40.79.443 > 10.0.2.15.40322: Flags [S.], seq 1312729188, ack 2338969150, win 65535, options [mss 65495,sackOK,TS val 1301594 ecr 1301594,nop,wscale 6], length 0
```

The following is a discussion about the relationship between tcpdump and iptables for reference:
[Does tcpdump bypass iptables?](https://superuser.com/questions/925286/does-tcpdump-bypass-iptables)

Builds directly on #762 . Adds printing of EDNS options and their data with `-vv`. Format of EDNS options matches format of TCP options.
Input data to the EVP_Cipher must be padded with zeros and data size
must be multiple of a block_size [1,2].

For example, in the case of the AES 128 CBC, if inl argument of the
EVP_Cipher is len (not buffer_size), then the result (output_buffer)
will depend on architecture.

This patch does fix ikev2pI2 test on a ppc64le (tested on PowerNV 8247-22L).

[1] https://tools.ietf.org/html/rfc2406
[2] https://tools.ietf.org/html/rfc3602
How to reproduce the issue : 

```
cd tcpdump_libpcap/
wget https://www.tcpdump.org/release/libpcap-1.9.1.tar.gz
tar xzf libpcap-1.9.1.tar.gz
cd libpcap-1.9.1/
./configure --with-pcap=linux
make

cd ..
wget https://www.tcpdump.org/release/tcpdump-4.9.3.tar.gz
tar xzf tcpdump-4.9.3.tar.gz
cd tcpdump-4.9.3/
sudo apt install bison flex
export CFLAGS="-static -I/<..full_path..>/tcpdump_libpcap/libpcap-1.9.1 -L/<..full_path..>/tcpdump_libpcap/libpcap-1.9.1"
export CPPFLAGS=-static
export LDFLAGS=-static
./configure
make
```
make error : 

```
./print-esp.c:129:1: error: static declaration of ‘EVP_CIPHER_CTX_new’ follows non-static declaration
 EVP_CIPHER_CTX_new(void)
 ^~~~~~~~~~~~~~~~~~
In file included from ./print-esp.c:41:
/usr/include/openssl/evp.h:679:17: note: previous declaration of ‘EVP_CIPHER_CTX_new’ was here
 EVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void);
                 ^~~~~~~~~~~~~~~~~~
./print-esp.c: In function ‘EVP_CIPHER_CTX_new’:
./print-esp.c:133:22: error: dereferencing pointer to incomplete type ‘EVP_CIPHER_CTX’ {aka ‘struct evp_cipher_ctx_st’}
  ctx = malloc(sizeof(*ctx));
                      ^~~~
./print-esp.c: At top level:
./print-esp.c:141:1: error: static declaration of ‘EVP_CIPHER_CTX_free’ follows non-static declaration
 EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *ctx)
 ^~~~~~~~~~~~~~~~~~~
In file included from ./print-esp.c:41:
/usr/include/openssl/evp.h:681:6: note: previous declaration of ‘EVP_CIPHER_CTX_free’ was here
 void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *c);
      ^~~~~~~~~~~~~~~~~~~
./print-esp.c: In function ‘esp_print_decrypt_buffer_by_ikev2’:
./print-esp.c:269:9: warning: passing argument 1 of ‘memcpy’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
  memcpy(buf, output_buffer, len);
         ^~~
In file included from ./print-esp.c:32:
/usr/include/string.h:42:14: note: expected ‘void * restrict’ but argument is of type ‘const u_char *’ {aka ‘const unsigned char *’}
 extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
              ^~~~~~
./print-esp.c: In function ‘esp_print’:
./print-esp.c:844:13: warning: passing argument 1 of ‘memcpy’ discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
    memcpy(p + ivlen, output_buffer, len);
           ~~^~~~~~~
In file included from ./print-esp.c:32:
/usr/include/string.h:42:14: note: expected ‘void * restrict’ but argument is of type ‘const u_char *’ {aka ‘const unsigned char *’}
 extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
              ^~~~~~
make: *** [Makefile:71: print-esp.o] Error 1

```
Env: 
- OpenSSL Version: 1.1.1d-0+deb10u1 - https://packages.debian.org/source/buster/openssl
- Debian GNU/Linux 10 (buster)
- kernel 4.19.0-6-amd64 #1 SMP Debian 4.19.67-2 (2019-08-28) x86_64 GNU/Linux

Relatives issue : https://github.com/the-tcpdump-group/tcpdump/issues/527 

Relative commit : https://github.com/the-tcpdump-group/tcpdump/commit/b1f305da3ddf635522bdcd6c88918beaea330968 
If I try to get the output of a compiled filter program with `tcpdump -d $FILTER` without privileges, it fails because it tries to attach to an arbitraty interface and lacks the permissions.
Given this should just be a conversion from input to output, the interface is an unrequited third-party and `tcpdump` shouldn't ask for permission to use it.