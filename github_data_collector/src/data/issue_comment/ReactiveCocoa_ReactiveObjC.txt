I put the following code in ViewController. When I close the ViewController and open again, then the block will execute more than once When the notification post. Only when I restart the APP and open this ViewController first time, the block execute once. Why? Can I program to delete it when I close the ViewController(example, in the dealloc method)?
```
- (void)viewDidLoad {
    [super viewDidLoad];
    @weakify(self)
    [[[NSNotificationCenter defaultCenter] rac_addObserverForName:@"MakeDoctorOrderNetRequest" object:self] subscribeNext:^(NSNotification * _Nullable x) {
        @strongify(self)
        //block
    }];
}
```
It's a little thing, but it was preventing returning `nil` in Swift, which makes `tryMap` kinda hard to use.
please check the 

https://github.com/ReactiveCocoa/ReactiveObjC/archive/3.1.1.zip

the source code of podspec is s.version      = "3.1.0"

god, please fix it.

@mdiep 

@andersio 

@erichoracek 
当我在iOS13 上运行的时候, 点击TextField想要输入的时候, 直接Crash, 我看到aliasSelector(rac_alias_becomeFirstResponder) 为none, 在invoke的时候崩溃了.
I have Xcode 10.1 and updated Reactive libraries as below :
Using ReactiveCocoa (9.0.0)
Using ReactiveObjC (3.1.1)
Using ReactiveSwift (5.0.1)
Using Result (4.1.0)

Below is my extension on RACSignal : 
extension RACSignal {
     public func toSignalProducer() -> SignalProducer<AnyObject?, NSError> {
            return SignalProducer { observer, disposable in
.
.
.            
}  }  }
We are getting this error after updating libraries : **Extension of a generic Objective-C class cannot access the class's generic parameters at runtime**

Is any one faced same issue after library updation and found any workaround ?









#import <ReactiveObjC/ReactiveObjC.h>
#import <ReactiveObjC/RACEXTScope.h>
_textField = [UITextField new];
    _textField.frame = CGRectMake(50, 50, 200, 30);
    _textField.backgroundColor = [UIColor cyanColor];
    _textField.delegate = self;
    [self.view addSubview:_textField];
    
    
    [[self rac_signalForSelector:@selector(textField:shouldChangeCharactersInRange:replacementString:) fromProtocol:@protocol(UITextFieldDelegate)] subscribeNext:^(RACTuple *x) {
        NSLog(@"_____%@",x);
    }];

output:
2019-03-23 17:49:59.611420+0800 LLKit[18454:188204] _____<RACTuple: 0x600000314290> (
    "<UITextField: 0x7f8601032400; frame = (50 50; 200 30); text = ''; opaque = NO; gestureRecognizers = <NSArray: 0x600000f4e3a0>; layer = <CALayer: 0x600000144760>>",
    "NSRange: {0, 0}",
    S
)
2019-03-23 17:49:59.777225+0800 LLKit[18454:188204] _____<RACTuple: 0x60000030add0> (
    "<UITextField: 0x7f8601032400; frame = (50 50; 200 30); text = ''; opaque = NO; gestureRecognizers = <NSArray: 0x600000f4e3a0>; layer = <CALayer: 0x600000144760>>",
    "NSRange: {0, 0}",
    S
)


The trace templates cannot be opened by Xcode 10. They work on Xcode 9.
Are there any ways to update them?

here is my code:
```objective-c
@interface ObjectA ()

@property (nonatomic, strong) NSString *tempValue;
@property (nonatomic, strong) RACMulticastConnection *racConnection;

@end

@implementation ObjectA

- (void)someMethod:(void (^)(NSString *tempString))complete
{
    if (!complete) {
        return;
    }
    __weak typeof(self) weakSelf = self;
    if (!self.racConnection) {
        RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(id<RACSubscriber>  _Nonnull subscriber) {
            weakSelf.tempValue = [NSProcessInfo processInfo].globallyUniqueString;
            NSLog(@"createSignal tempValue: %@", weakSelf.tempValue);
            [subscriber sendCompleted];
            return [RACDisposable disposableWithBlock:^{
                NSLog(@"RACSignal is dispose: %@", weakSelf.tempValue);
                weakSelf.tempValue = nil;
            }];
        }];
        RACSubject *subject = [RACReplaySubject replaySubjectWithCapacity:1];
        self.racConnection = [signal multicast:subject];
    }

    [[self.racConnection autoconnect] subscribeNext:^(id  _Nullable x) {
        NSLog(@"subscribeNext tempValue: %@", weakSelf.tempValue);
        complete(weakSelf.tempValue);
    } completed:^{
        NSLog(@"completed tempValue: %@", weakSelf.tempValue);
        complete(weakSelf.tempValue);
    }];
}

- (void)shutdown
{
    [[self.racConnection connect] dispose];
//    self.racConnection = nil;
}
@end
```

and ViewController:
```objective-c
self.object = [[ObjectA alloc] init];
[self.object someMethod:^(NSString *tempString) {
    NSLog(@"someMethod 1: %@", tempString);
}];
[self.object someMethod:^(NSString *tempString) {
    NSLog(@"someMethod 2: %@", tempString);
}];
// here, the shutdown method is behind the log "someMethod 2"
[self.object shutdown];
[self.object someMethod:^(NSString *tempString) {
    NSLog(@"someMethod 3: %@", tempString);
}];
```

out put is:
```
createSignal tempValue: 7683D13D-C77E-476A-A926-BC297065BCED-22772-00000DED5694A98E
completed tempValue: 7683D13D-C77E-476A-A926-BC297065BCED-22772-00000DED5694A98E
someMethod 1: 7683D13D-C77E-476A-A926-BC297065BCED-22772-00000DED5694A98E
RACSignal is dispose: 7683D13D-C77E-476A-A926-BC297065BCED-22772-00000DED5694A98E
completed tempValue: (null)
someMethod 2: (null)
completed tempValue: (null)
someMethod 3: (null)
```

my question is 
whe the `dispose` method before `subscribeNext` called?