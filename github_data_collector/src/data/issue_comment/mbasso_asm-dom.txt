Bumps [lodash](https://github.com/lodash/lodash) from 4.17.4 to 4.17.15.
<details>
<summary>Commits</summary>

- [`ddfd9b1`](https://github.com/lodash/lodash/commit/ddfd9b11a0126db2302cb70ec9973b66baec0975) Bump to v4.17.15.
- [`b185fce`](https://github.com/lodash/lodash/commit/b185fcee26b2133bd071f4aaca14b455c2ed1008) Rebuild lodash and docs.
- [`be87d30`](https://github.com/lodash/lodash/commit/be87d303941222b97c482755afc0f4a77ce46c30) Bump to v4.17.14.
- [`a6fe6b1`](https://github.com/lodash/lodash/commit/a6fe6b1e174fd02b5e60eb2664405f4c1262c300) Rebuild lodash and docs.
- [`e371828`](https://github.com/lodash/lodash/commit/e37182845f16715a0d1c391c8662d83c55609cee) Bump to v4.17.13.
- [`357e899`](https://github.com/lodash/lodash/commit/357e899e685872b4af5403ecc4b2a928f961ae63) Rebuild lodash and docs.
- [`fd9a062`](https://github.com/lodash/lodash/commit/fd9a062d57646450b61f74029315abd4cc834b08) Bump to v4.17.12.
- [`e77d681`](https://github.com/lodash/lodash/commit/e77d68121ff00ba86b53eed5893d35adfe94c9dd) Rebuild lodash and docs.
- [`629d186`](https://github.com/lodash/lodash/commit/629d1865793182cd967196716f4beff223aa4a91) Update OpenJS references.
- [`2406eac`](https://github.com/lodash/lodash/commit/2406eac542b2a1282be8d812a6d8a45433ade80a) Fix minified build.
- Additional commits viewable in [compare view](https://github.com/lodash/lodash/compare/4.17.4...4.17.15)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.4&new-version=4.17.15)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/mbasso/asm-dom/network/alerts).

</details>
**General Information**

- [ +] Improvement
- [ +] Feature

**Description**

What do you think about that idea:

Create app logic in C++, so it can be used both by desktop/mobile and web browser. For browser use emscripten/WASM.

Use asm-dom in browser, so we will get native html/css.

Use something similar to https://github.com/blockspacer/skia-opengl-emscripten/issues/5 for desktop/mobile, so we will be able to render and use same html/css.

Add custom HTML/CSS tags/styles e.t.c. to create something similar to Angular/React/Vue. For browser use 'shadow' dom or JS scripts (or even some existing JS framework).

Become next-gen web framework after WASM GC/DOM Integration. Target all platforms, browsers and even 3D apps/games.
**General Information**

- [+ ] Improvement
- [+ ] Feature

**Description**

It may be useful: High-quality C++ HTML parser from cobalt.foo project. CMake port of it can be found at https://github.com/blockspacer/skia-opengl-emscripten/issues/5 and https://github.com/blockspacer/skia-opengl-emscripten/blob/master/src/cobalt/cobalt_dom.cmake#L32

**Some possible use cases**:
+ Create something similar to gccx - CPX (JSX like syntax) support.
We can use C++ template engine - CXTPL and code generation to convert JSX into C++ (see https://github.com/blockspacer/CXXCTP )
With cobalt.foo html parser - create HTML parser with custom tags/JSX syntax.
With CXXCTP - create code generation rule - from JSX to HTMl/CSS.
With CXTPL - just combine C++ and HTML/CSS (and pass any complex C++ variables to HTML/CSS without binding!).
+ ...


This PR aims to provide an easier setup for an asm-dom C++ project removing the imports of extra js files. This also means that we have to improve the internals, action needed for #18.
Other kinds of fixes and perf improvements are also included in this release.
Hello, we would like to feature your project to the Docusaurus users page.

Are you with me on this? Also, can you provide your logo?


More info about this [here](https://github.com/facebook/Docusaurus/issues/1080)

At the moment asm-dom uses only one thread, the main one, to perform its work.
This is an experimental PR that aims to improve the performance by dividing the diffing algorithm and the DOM operations in two different threads. This is now possible thanks to the support of [WebAssembly threads in Chrome 70](https://developers.google.com/web/updates/2018/10/wasm-threads), previously disabled due to a set of reasons involving spectre and meltdown. So, we can now use [pthreads and emscripten](https://kripken.github.io/emscripten-site/docs/porting/pthreads.html).
We should firstly change our `Makefile` to setup the new compilation, improve the test suite and runs it directly in the browser, since we cannot mock `Worker` and `SharedArrayBuffer` in node.
After that we can develop the new core part and benchmark it to see if it is better than the existing one.
Here is a list of things that needs to be done:

- [ ] update `Makefile`
- [ ] improve test suite
- [Â ] implement a Producer/Consumer pattern
- [ ] test and update benchmarks
- [ ] update examples
- [ ] update documentation
I found this after much googling for the possibility of making a website entirely with C++ and webassembly. So far it's quite impressive, everything I have seen so far I would have done the same way. I am trying understand it a bit more. I am really interested in pushing to create a full C++ tooling to do production web apps, hopefully being a complete alternative to react and node.

This project seems to be the only thing I've seen so far that has taken seemingly a correct step in that direction. So I am curious to almost like brainstorm on this. Where do you see asm-dom going? Are you hopeful for comprehensive C++ web tooling? Is such a thing plausible or ideal? What missing components do you think are necessary?
This is potentially an idea for improvement. Is there support for the web components standards: template, custom elements, shadow DOM? 
Use asm-dom with the `h` function is a little bit verbose, for this reason we have to develop a parser that allows us to write a JSX like syntax in C++:

```c++
#include <iostream>
#include "asm-dom.hpp"

int main() {
  VNode* vnode = <span />;
  // translated to:
  // VNode* vnode = asmdom::h(u8"span");
}
```

At the moment there is a work in progress command line interface (cli) called [gccx](https://github.com/mbasso/gccx). However, other ideas and implementations are welcome.
After that we have reached a good point, we have to add a section to asm-dom docs that links the right tool to do this.
If you are using asm-dom, please let us know who are you, how it's used and give us a feedback!