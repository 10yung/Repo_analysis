Regarding your considerations:
* create git pull (I hope)
* Change "login attemp" in message to eventid
* removed certifi 
* changed from twisted to treq

(I did my best despite not being a developer)
Hello
I'm a cowrie honeypot user.
For my need I developed an output plugin for Telegram Bot.

Just add to "etc/cowrie.cfg"
```
[output_telegram]
enabled = true
bot_id = 123456789:ASDASDASDASqwertyuiopasdfghjklçzxcvbnm
chat_id= 987654321
```

And create file src/cowrie/output/telegram.py (based on elasticsearch.py)
```
# Simple Telegram Bot logger

from __future__ import absolute_import, division

import urllib3
import certifi
from twisted.python import log

import cowrie.core.output
from cowrie.core.config import CowrieConfig

class Output(cowrie.core.output.Output):
    """
    telegram output
    """

    def start(self):
        self.bot_id = CowrieConfig().get('output_telegram', 'bot_id') 
        self.chat_id = CowrieConfig().get('output_telegram', 'chat_id') 

    def stop(self):
        pass

    def write(self, logentry):
        for i in list(logentry.keys()):
            # remove twisted 15 legacy keys
            if i.startswith('log_'):
                del logentry[i]

        if "login attempt" in logentry['message']:
            msgtxt = "[cowrie] " + logentry['timestamp']
            msgtxt += "  " + logentry['message']
            msgtxt += "  (session " + logentry['session'] + ")"

            try:
                https = urllib3.PoolManager(cert_reqs='CERT_REQUIRED', ca_certs=certifi.where())
                r = https.request('GET', 'https://api.telegram.org/bot' + self.bot_id + '/sendMessage?chat_id=' + str(self.chat_id) + '&text=' + msgtxt)
            except urllib3.exceptions.SSLError as err:
                print('[ERROR] Telegram SSL error', err)


```

Telegram message can be customized. This is my first solution!

Hope it helps!
**Is your feature request related to a problem? Please describe.**
Many newer bots are running commands with the "&" in the command knowing that the fake shell will not properly handle the background. They use this to their advantage and can tell they are in a honeypot. 

**Describe the solution you'd like**
I would like it if you added realistic handling of the background "&" in the fake shell 

**Additional context**
I noticed this when a lot of bots were running the command "uname -a & lscpu" and then exiting right after. This made me realize that the shell is not properly handling the "&"/background in the shell. 

When setting `${ssh:version}` to a seemingly valid but actually invalid value, connections to the honeypot will time out and an error is **not** logged.

**To Reproduce**

Steps to reproduce the behavior:
1. Manipulate `cowrie.cfg`:
```ini
[ssh]
version = OpenSSH_7.6p1 Ubuntu-4ubuntu0.3
```
2. Restart cowrie
3. Connect to it via SSH and observe how your connection will time out, `ssh -v` output:

```
...
debug1: ssh_exchange_identification: 
debug1: ssh_exchange_identification: \024\316\353!\373\212

debug1: ssh_exchange_identification: \025#\367\262\365\331E\341\233\320
debug1: ssh_exchange_identification: cbc,3des-cbc,blowfish-cbc,cast128-cbc
ssh_exchange_identification: Connection closed by remote host
```

4. When the connection is closed, cowrie reports that the timeout for this connection was reached. The invalid value is not reported. This also causes those strange escape codes.

While debugging this problem I found issue #746 which provided a solution.

**Expected behavior**

Cowrie logs an error that the value is not valid and does not fail silently.

**Invalid:** `OpenSSH_7.6p1 Ubuntu-4ubuntu0.3`

**Valid:** `SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3` (prepended `SSH-2.0-`)
My telnet honeypot is running on kvm, when I login it success and type any command, e.g. ls, logout. 

Then I'd like to query data from kibana page, But it just only 2 datas, the one is `session.connect`, and the other one is `session.closed`.

I don't know why it doesn't record 'input' data.

<img width="1046" alt="螢幕快照 2019-11-30 下午11 56 20" src="https://user-images.githubusercontent.com/1113604/69902849-1208a000-13cd-11ea-86de-4e8892edf49d.png">


Hello @micheloosterhof 
I have some problems when I try to use cowrie in proxy mode. I would like to deploy cowrie on my machine in proxy mode, in this way, when a user do ssh on my machine he is able to access completely to it but all is logged. This is how proxy mode may work, isn't it?

In order to do that i set the `cowrie.config` as follows:

- `[honeypot] backend = proxy`
- `[proxy] backend = simple`

Do I miss something in my settings? Is it possible to hide cowrie to `ps x` command?
Similar to SANS DShield and CSIRTG, AbuseIP also offers a public list of bad actors, with ability to export feeds to FAIL2BAN.

API documentation at https://docs.abuseipdb.com/

[cowrie_out.txt](https://github.com/cowrie/cowrie/files/3855191/cowrie_out.txt)
While pip can install the csirtgsdk module and its dependencies, cowrie fails to initialize a function and does not make use of this output module. It still launches, though:

"Failed to load output engine: csirtg due to ImportError: cannot import name 'Client' from 'csirtgsdk.client' (/home/cowrie/cowrie/cowrie-env/lib/python3.7/site-packages/csirtgsdk/client/__init__.py)"

Running latest source from GitHub as of Nov 16 10PM EST.

csirtgsdk is properly installed:
(cowrie-env) cowrie@xxx:~/cowrie$ csirtg
~/.csirtg.yml configuration no longer supported
Please setup your environment variables:

export CSIRTG_TOKEN=1234..
(cowrie-env) cowrie@xxx:~/cowrie$ _
I think need to add `protocol` field.

<img width="1417" alt="螢幕快照 2019-11-12 下午6 35 15" src="https://user-images.githubusercontent.com/1113604/68664568-804f0500-057b-11ea-843a-8e0527214f6e.png">

In the cowrie.cfg.dist file, the parameter "interactive_timeout" is described as follows: "determines when logged in sessions are terminated for being idle". However, the interactive_timeout is only set once at the beginning of a SSH session (in transport.py) or Telnet session (in userauth.py). In consequence, each session is terminated when the interactive timeout is reached - no matter whether input is received in the meantime or not.

**To Reproduce**
1. In cowrie.cfg, set: interactive_timeout = 90
2. Start Cowrie (not in proxy mode, I did not check this)
3. Connect via Telnet or SSH, interact with the system and stop the time until the connection is closed due to timeout.

**Expected behavior**
Each time after a command is executed the timeout is supposed to be reset to the time period specified in interactive_timeout. Otherwise it has to be described differently in cowrie.cfg.dist.

**Server:**
 - OS: Ubuntu 18.04
 - Python: 3.7