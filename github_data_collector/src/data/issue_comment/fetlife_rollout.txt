- Use `Redis.current` instead of creating global `$redis` variable in tests
- Move `Feature` class to its own file.

a follow up task could be to create a `Rollout.current` that acts similar to `Redis.current` so we don't need to pollute the runtime with global variables. I didn't do it here because I thought it warranted a conversation first, as its a bit more complex than how `Redis.current` works.
Getting hundreds times active_features performance improvement with indices.

benchmark
https://gist.github.com/travisliu/e4644ca87a1ebad39b2004d668b16943
Something like this?
```diff
class Rollout
# ...
+  def to_hash
+    results = {}
+    features.each do |feature|
+      with_feature(feature) do |f|
+        results[feature] = f.to_hash
+      end
+    end
+    results
+  end
end
```
I have tried to limit users by 20 percent but seemed all the users can see the view that I blocked
```ruby
- if $rollout.active? :percentage_rollout, current_user
    %h2
      Hello
      =current_user.first_name
```
my initial instance
```ruby
    $name_space = Redis::Namespace.new(Rails.env, redis: $redis)
    $rollout = Rollout.new($name_space)
    $rollout.define_group(:percetage_users) do |user|
      user
    end
    $rollout.activate_users(:percentage_rollout, User.all)
    $rollout.deactivate_group(:percentage_rollout, :percentage_users)

    $rollout.activate_percentage :percentage_rollout, 20
```
---
please correct me if what i did wrong here?, thanks

Have y'all thought about adding account support?

Our system has the concept of accounts which are collections of users.  We would like to enable a feature for a account without having to add each individual user.

Maybe I'm using it wrong, or its mentioned somewhere in the docs, and I have not read it properly.

But if you do this : 

```
user = User.first
$rollout.activate_group(:chat, :all)      # You'd assume this activates feature for everyone, and it does.
$rollout.deactivate_user(:chat, user)  # I'm assuming this should only deactivate the feature for this user, everyone else should still have it active.
$rollout.active?(:chat, user)                # This should return false, but returns true.

```
