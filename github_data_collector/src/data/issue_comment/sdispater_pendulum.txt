
I tried this

> streamlink -l debug 'https://www.youtube.com/watch?v=7sd7DTMWzFQ&feature=youtu.be'

> [cli][debug] OS:         Linux-4.19-ovh-xxxx-std-ipv6-64-x86_64-with-centos-7.7.1908-Core
> [cli][debug] Python:     2.7.5
> [cli][debug] Streamlink: 1.3.0+24.g40c732c
> [cli][debug] Requests(2.22.0), Socks(1.7.1), Websocket(0.56.0)
> [cli][info] Found matching plugin youtube for URL https://www.youtube.com/watch?v=7sd7DTMWzFQ&feature=youtu.be
> [plugin.youtube][debug] Video ID from URL
> [plugin.youtube][debug] Using video ID: 7sd7DTMWzFQ
> [plugin.youtube][debug] get_video_info - 1: Found data
> error: No playable streams found on this URL: https://www.youtube.com/watch?v=7sd7DTMWzFQ&feature=youtu.be

> streamlink --version
> streamlink 1.3.0+24.g40c732c

Please check and fix it. Thank you
Parsing token 'x' according to documentation it should parse to microseconds timestamp but it parses to milliseconds timestamp. Not sure what was intended here but there is a discrepancy.
code:
`
_TOKENS = (
...
"x": lambda dt: "{:d}".format(dt.int_timestamp * 1000 + dt.microsecond // 1000)
`
Something really strange is going on

```python
>>> a = pendulum.now()
>>> a.__class__.__bases__
(<type 'datetime.datetime'>, <class 'pendulum.date.Date'>)
>>> isinstance(a, datetime.datetime)
False
```

Surely `isinstance` should return `True` here?!
```python
>>> datetime.datetime.now() - datetime.datetime.now()
datetime.timedelta(0)
>>> pendulum.now() - pendulum.now()
*** TypeError: TypeError("unsupported operand type(s) for -: 'DateTime' and 'DateTime'",)
```

To be a drop-in replacement, subtracting should probably call `diff()`?
As python has gotten better and better support for type annotations we should add support for type annotations inside pendulum.

Thankfully there's already a PR open for this:

https://github.com/sdispater/pendulum/pull/320 

Happy to help out in any way possible to get this through the finish line.
This seems to have been caused by `bpo-32417`. Before that change, adding a timedelta to a date/datetime subclass would always return an instance of date/datetime instead of the subclass. After the change, the subclass is preserved.

The RecursionError was caused by adding a timedelta to a DateTime. Doing this uses the `convert` method of the DateTime's timezone to convert the new DateTime into the correct timezone. In the case of FixedTimezones, this requires adding the UTC offset of the timezone (a timedelta) to the DateTime, causing the recursion.

Before bpo-32417, the subclass of the DateTime was dropped while calling `astimezone`. This meant that the object that was passed into `fromutc` by `astimezone` was a stdlib datetime, not a Pendulum DateTime. Calling the stdlib datetime's add function would then do the addition and return the result (which would then be upconverted back into a Pendulum DateTime instance). Now, due to the subclass being preserved, the Pendulum DateTime's add function is being called instead, causing the recursion.

This commit fixes the RecursionError by always using the stdlib datetime's addition function to add the offset to the DateTime when calling `fromutc`.

bpo-32417: https://bugs.python.org/issue32417
commit: https://github.com/python/cpython/commit/89427cd0feae25bbc8693abdccfa6a8c81a2689c

Fixes #422
I'm developing an application where each request coming to the server may need to have different default timezone.  I wanted to initialize pendulum with right timezone and set in request local variable.  I'm not able to that as pendulum uses global to save the local timezone.

Can someone suggest me an approach to achieve this.
The new zipapp module permits one to create a bundled python program inside of a zip file. I went ahead and made such a program but I have an issue when I try to execute it, it seems like pendulum is not able to locate the locale files.

```
    import pendulum
  File "<frozen importlib._bootstrap>", line 971, in _find_and_load
  File "<frozen importlib._bootstrap>", line 955, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 656, in _load_unlocked
  File "<frozen importlib._bootstrap>", line 626, in _load_backward_compatible
  File "dist/bobctl.pyz/pendulum/__init__.py", line 9, in <module>
  File "<frozen importlib._bootstrap>", line 971, in _find_and_load
  File "<frozen importlib._bootstrap>", line 955, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 656, in _load_unlocked
  File "<frozen importlib._bootstrap>", line 626, in _load_backward_compatible
  File "dist/bobctl.pyz/pendulum/datetime.py", line 11, in <module>
    def _cmp(x, y):
  File "<frozen importlib._bootstrap>", line 971, in _find_and_load
  File "<frozen importlib._bootstrap>", line 955, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 656, in _load_unlocked
  File "<frozen importlib._bootstrap>", line 626, in _load_backward_compatible
  File "dist/bobctl.pyz/pendulum/date.py", line 10, in <module>
  File "<frozen importlib._bootstrap>", line 971, in _find_and_load
  File "<frozen importlib._bootstrap>", line 955, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 656, in _load_unlocked
  File "<frozen importlib._bootstrap>", line 626, in _load_backward_compatible
  File "dist/bobctl.pyz/pendulum/helpers.py", line 43, in <module>
  File "dist/bobctl.pyz/pendulum/formatting/difference_formatter.py", line 12, in __init__
  File "dist/bobctl.pyz/pendulum/locales/locale.py", line 38, in load
    
ValueError: Locale [en] does not exist.
```
Resolves #421 along with comparison against None and other classes.