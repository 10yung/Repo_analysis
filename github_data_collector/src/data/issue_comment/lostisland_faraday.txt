## Description
This commit adds documentation search to the whole website using Algolia's
DocSearch project: https://community.algolia.com/docsearch/

I tried to be as close as the Faraday design as possible.

fixes #1110 (at least it provides an easy way to search for pages, even if pages are not clearly laid out in the navigation)

You can test the search here: https://faraday.codeagain.now.sh/

![2020-01-17 16 00 49](https://user-images.githubusercontent.com/123822/72622898-6e575d00-3944-11ea-8a5a-557743fd1332.gif)


## Todos
List any remaining work that needs to be done, i.e:
- [ ] Get review from the Faraday team

## Additional Notes
It's possible to get analytics on the search feature: what is searched, what get no results (= need to document). I have access to all of that but if you maintainers want that too, just provide me your email address and I will invite you to the application. You will have to create an Algolia account.

## Basic Info

* Faraday Version: 0.17.3 (also in 1.0.0)
* Ruby Version: ruby 2.6.3p62

## Issue description

When using the default adapter (in my case `:net_http`), a new `OpenSSL::X509::Store` is initialized for each connection.

Each initialized store then loads the default certificates (`set_default_paths` is a misnomer and actually loads certificates into the store - see OpenSSL's `X509_STORE_set_default_paths` documentation).

This results in a `Faraday::Connection` object holding references to a significant (~1MB on my system) amount of memory.

In itself, this isn't too much of a problem, but I'm opening this following on from a downstream issue whereby a pool of connections is causing a memory leak:
https://github.com/Azure/azure-storage-ruby/issues/150

I wonder if a single default certificate store should be shared between all connections that don't specify `cert_store`?

## Steps to reproduce

The problem can be observed by running the following gist with `TIMES` set to a notable number (I tried 100):
https://gist.github.com/ball-hayden/5ab0171ee76cd9b0b256b45f7e631b43

Just as 148b99ee0fde8 also does but for the v0.1x releases.
Congratulations on v1.0 of this amazing gem! ðŸŽ‰ðŸŽ‰

Is it possible to get a GitHub tag and release for this version?
Commit history is not super-clear, but from a quick diff with the gem on rubygems I assumed ff9dc1d1219a1bbdba95a9a4cf5d135b97247ee2 is the commit of v1.0. Is this correct?
Thanks!
## Basic Info

Even if I went multiple times to the website, I first completely missed the fact that there are actually more pages than the ones here:
![image](https://user-images.githubusercontent.com/123822/72051089-d661cf80-32c2-11ea-95be-3509c96c7fd7.png)

For example I was looking for the retry documentation and could not find it but in GitHub, because to access it you need to do this:
1. Click on middleware
2. Click at the bottom for "Available middleware"
3. Click on the retry middleware

Step 2. is the easy one to miss because the link is not obvious.

I would propose to have something like this instead:

![image](https://user-images.githubusercontent.com/123822/72051555-d0b8b980-32c3-11ea-92f0-9b9c217076f0.png)

Or in general, a way to visualize easily all the documentation links without having to scroll down etc..

PS: I worked previously at Algolia, they provide this service for documentation websites: https://community.algolia.com/docsearch/. Would you like it implemented on the faraday website? I can help with that!
## Basic Info

* Faraday Version: 0.17.3, 1.0.0
* Ruby Version: 2.5.3, 2.6.3

## Issue description

Whenever I run Ruby with `-rdebug` and set a breakpoint, the interpreter quits with `SystemStackError` upon loading Faraday.

This makes it impossible to debug any program that uses the library.

## Steps to reproduce

(For Ruby 2.5.3 and Faraday 0.17.3, the result is the same)

```
$ cat test.rb
require 'faraday'
puts "bla-bla-bla"

$ ruby -rdebug test.rb 
/home/vmuser/.rvm/rubies/ruby-2.6.3/lib/ruby/2.6.0/x86_64-linux/continuation.so: warning: callcc is obsolete; use Fiber instead
Debug.rb
Emacs support available.

test.rb:1:require 'faraday'
(rdb:1) b 2
Set breakpoint 1 at test.rb:2
(rdb:1) c
Traceback (most recent call last):
	2: from test.rb:1:in `<main>'
	1: from /home/vmuser/.rvm/rubies/ruby-2.6.3/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'
/home/vmuser/.rvm/rubies/ruby-2.6.3/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require': cannot load such file -- faraday (LoadError)
	9360: from test.rb:1:in `<main>'
	9359: from /home/vmuser/.rvm/rubies/ruby-2.6.3/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:34:in `require'
	9358: from /home/vmuser/.rvm/rubies/ruby-2.6.3/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:130:in `rescue in require'
	9357: from /home/vmuser/.rvm/rubies/ruby-2.6.3/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:130:in `require'
	9356: from /home/vmuser/.rvm/gems/ruby-2.6.3/gems/faraday-1.0.0/lib/faraday.rb:21:in `<top (required)>'
	9355: from /home/vmuser/.rvm/gems/ruby-2.6.3/gems/faraday-1.0.0/lib/faraday.rb:126:in `<module:Faraday>'
	9354: from /home/vmuser/.rvm/gems/ruby-2.6.3/gems/faraday-1.0.0/lib/faraday.rb:102:in `default_adapter='
	9353: from /home/vmuser/.rvm/rubies/ruby-2.6.3/lib/ruby/2.6.0/debug.rb:1109:in `block in <class:DEBUGGER__>'
	 ... 9348 levels...
	   4: from /home/vmuser/.rvm/gems/ruby-2.6.3/gems/faraday-1.0.0/lib/faraday.rb:115:in `method_missing'
	   3: from /home/vmuser/.rvm/gems/ruby-2.6.3/gems/faraday-1.0.0/lib/faraday.rb:115:in `method_missing'
	   2: from /home/vmuser/.rvm/gems/ruby-2.6.3/gems/faraday-1.0.0/lib/faraday.rb:115:in `method_missing'
	   1: from /home/vmuser/.rvm/gems/ruby-2.6.3/gems/faraday-1.0.0/lib/faraday.rb:115:in `method_missing'
/home/vmuser/.rvm/gems/ruby-2.6.3/gems/faraday-1.0.0/lib/faraday.rb:115:in `method_missing': stack level too deep (SystemStackError)
```
Ruby 2.7 separates positional and keyword arguments. This resulted in several deprecation warnings in `Faraday::RackBuilder`. Keyword arguments are often passed to it that are implicitly passed through as a hash (as the last positional argument). Ruby 2.7 raises a warning for this and 3.0 will error.

For example, faraday-http-cache, which is configured something like `builder.use Faraday::HttpCache, serializer: Marshal, shared_cache: false`, will raise warnings, because RackBuilder doesnâ€™t handle the Ruby-2.7 change.

This PR removes the deprecation in a backwards- and forward-compatible way. It uses a new compatability method in ruby 2.7 and a shim to support older rubies, which is recommended on the [ruby blog](https://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/).
Hello,

currently, there's no option to specify the log level in the default formatter. I think it would be better if we're able to do that. what do you guys think?

If I implement my own formatter to solve this, will I be able to log the headers/body of the request?

This extracts the `Faraday::MiddlewareRegistry` module functionality into a `Faraday::ClassRegistry` class. This allows us to make some better assumptions about how the class registry's internal vars are loaded.

TODO:

* [ ] copy/adapt MiddlewareRegistry specs for `ClassRegistry`
* [ ] test with [technoweenie/faraday-live](https://github.com/technoweenie/faraday-live)

I also made a few small changes that may bite us later:

1. Deprecated `#load_middleware`. It's the same as `#lookup_middleware`, except `#lookup_middleware` raises if it doesn't return anything. When deciding between `ClassRegistry#lookup` and `#load`, I went with `#lookup` since `#load` is an existing ruby method.

https://github.com/lostisland/faraday/blob/1c5672acf00dd976960c4f8940d4260e50509e56/lib/faraday/middleware_registry.rb#L207-L214

2. Deprecated `#middleware_mutex` and `#fetch_middleware`. Those should've been private originally. They're not used elsewhere in Faraday, but may be in use in an external lib or app. Pretty low chance though...

https://github.com/lostisland/faraday/blob/1c5672acf00dd976960c4f8940d4260e50509e56/lib/faraday/middleware_registry.rb#L216-L222

3. `#register_middleware` now complains if you try to change the `autoload_path` _after the ClassRegistry has been setup`. So, something like:

```ruby
module Faraday
  class Adapter
    extend MiddlewareRegistry

    # first time, set 'path/to/adapters' as @autoload_path
    register_middleware 'path/to/adapters', foo: Foo

    # subsequent calls MUST ignore @autoload_path
    register_middleware bar: Bar

    # raises a warning: 
    # "Cannot change autoload_path of existing Faraday::Adapter.class_registry"
    register_middleware 'path/to/other-adapters', baz: Baz
  end
end
```

https://github.com/lostisland/faraday/blob/1c5672acf00dd976960c4f8940d4260e50509e56/lib/faraday/middleware_registry.rb#L173-L175
This is an attempt to fix #1065 by calling `#middleware_mutex` when the classes are defined. This should prevent `@middleware_mutex` from being undefined when a `Faraday::Connection` instance is used in a multi-threaded environment.

Right now, the proper way to build a `Faraday::Connection` for use in a multi-threaded environment should look something like this:

```ruby
conn = Faraday.new(url: "some-base-url") do |f|
  f.request :something
  f.response :or_other
  f.adapter :some_http_client
end

conn.app
```

https://github.com/lostisland/faraday/blob/d51a6c6979363c820d81a9166847ab09d30fae2b/lib/faraday/rack_builder.rb#L156-L168

`Faraday::Connection#app` is delegated to `Faraday::RackBuilder#app`, which does the following:

* Uses the `Faraday::Request` middleware registry to load `:something`
* Uses the `Faraday::Response` middleware registry to load `:or_other`
* Uses the `Faraday::Adapter` middleware registry to load `:some_http_client`
* Locks the `Faraday::RackBuilder` instance from changing the middleware chain (`conn.builder.handlers`)
* Instantiates all of the middleware instances
* Builds the "app" instance from the loaded recursive middleware instances.

At this point, it _should_ be safe to use shared connection object across multiple threads. But, I don't know how often it's used like this, so there are likely some more bugs.

I also have another larger solution in mind that requires some refactoring. I'll publish once I have it working.