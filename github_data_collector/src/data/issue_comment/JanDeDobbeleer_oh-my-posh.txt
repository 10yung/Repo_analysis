If I change the current working directory to a UNC location, say:

````
cd //pnjnas/public
````

I get the following prompt:

![image](https://user-images.githubusercontent.com/12860484/72209189-05876500-34ac-11ea-9528-0c931ee4ae4b.png)


whereas I expect the `Microsoft.PowerShell.Core\FileSystem::` part to be omitted.

IOW, if the current location is set to a filesystem location, I expect the prompt to include `(pwd).ProviderPath`, not `(pwd).Path`



Adding Get-KubernetesInfo to support showing the current kubernetes context name for a prompt.  I added unit tests, but I have not adjusted any of the existing themes to use this.
Thanks for fixing the missing $profile problem #168. 

I can now successfully import oh-my-posh on the remote machine and set themes, which are properly reflected in the local terminal. However, there are problems with the cursor location after executing commands remotely. It always returns to the first line of the terminal, while the output extends many lines down. Executing a new command overwrites this output.

The remote machine is a Windows 2012R2 server with PS 5.1. The local machine is a latest Windows 10 1909. This happens both in the standard Powershell console and the Windows Terminal preview. The remote machine's oh-my-posh is version 2.0.332.
I've extended the Paradox theme to add some info. Depending on the current path, this may cause the prompt to wrap to the next line, which is fine.

However, I have noticed that:
- Once it wraps to a second line AND
- The terminal has to scroll because the current line has hit the bottom of the screen

...then there is a "stripe" that fills what should be empty space.

Here's PowerShell Core in the Windows Terminal app:

![PowerShell Core in Windows Terminal](https://user-images.githubusercontent.com/1156571/67522517-bfb3c100-f661-11e9-98bc-3a314d4f3045.jpg)

Here's standard PowerShell in its native console:

![Standard PowerShell](https://user-images.githubusercontent.com/1156571/67522562-cf330a00-f661-11e9-8a0d-8a7f7d61dbd1.jpg)

It's possible to reproduce this with the default Paradox theme.

```powershell
Set-Theme Paradox
Set-Location C:\
New-Item -ItemType Directory -Name "repro"
Set-Location C:\repro
@(1..10) | %{ $name = "really-long-dir-$_"; New-Item -ItemType Directory -Name $name | Out-Null; Set-Location $name }
```

That will put you in a really deep directory that will cause the line to wrap. Now hit "Enter" until the prompt is at the bottom of the console window. You'll end up getting something like this:

![Line wrapping of really long dirname](https://user-images.githubusercontent.com/1156571/67523335-559c1b80-f663-11e9-9113-fc2232d48857.jpg)

It doesn't appear to matter if the time shows up or not, so I don't think it has to do with the `Set-CursorForRightBlockWrite` method.

I also noticed that the "fill color" in that stripe is whatever the color is at the end of the _previous_ line. Let's say the prompt is two lines long, wrapped. The first line ends with cyan, then the second line has another segment that's green. The fill color will be cyan - you'll see this in my earlier screen shots.

That leads me to believe that when the line wraps off the screen, it does something like:
- Clear the next line using the current background and foreground color
- Reset the cursor to the beginning of the line
- Allow the prompt to continue

Just guessing, but that's how it _seems_.

Unclear if that's something which can be handled here or if there's something we need to file against PowerShell itself. Maybe something like a `Clear-ToEndOfLine` method that could be run after the final item `>` is written out? I dunno.
The regular text when running powershell through Cmder seems to be stuck on blue... 

![image](https://user-images.githubusercontent.com/6406986/52775187-bb052a80-3047-11e9-8fc1-fe582787187e.png)

For the sake of comparison, here's running in regular powershell (ligatures and things don't work... not sure how to fix that?)

![image](https://user-images.githubusercontent.com/6406986/52775255-e5ef7e80-3047-11e9-8d53-d7a9c9ee52f6.png)

It would be super nice to be able to install oh-my-posh using Chocolatey, like it is possible for [posh-git](https://github.com/dahlbyk/posh-git/tree/master/chocolatey)! 
Then I could add it to my [Cacao machine install script](https://github.com/laurentkempe/Cacao/blob/master/PrepareMyCacao.ps1#L81)
Hi,
I am just a modest beginner in posh, but I am trying to re-use some snippets I found to display a "+" for each location in the pushd/popd stack...

Snatched this somewhere:
```$Stack = "+" * (Get-Location -Stack).count```

But I can't get to work in a theme!
As a test I tried to modify the line that displays the current directory in the Agnoster theme:
```$prompt += Write-Prompt -Object "$(Get-ShortPath -dir $pwd)$((Get-Location -Stack).Count)" -ForegroundColor $sl.Colors.PromptForegroundColor -BackgroundColor $sl.Colors.PromptBackgroundColor```

- the count in this test is always 0!
The directory `/` appears like `/:` in the prompt.

`/usr` appears as `/\usr`

`/usr/local` appears as `/\..\local`

Any path not prefixed by `$HOME` (`~`) appears broken. Also, `/` should be used instead of `\`.
Right now you are using `$global:error.Count` to verify if there was an error and populate the value for `$lastCommandFailed`, but that only checks for errors on powershell things, it does not check for errors on exit codes:

https://github.com/JanJoris/oh-my-posh/blob/c0e88625a338d4a3c1fa47c73491c7809d1e1edb/oh-my-posh.psm1#L33

I suggest you use `$?` instead, which checks for both.