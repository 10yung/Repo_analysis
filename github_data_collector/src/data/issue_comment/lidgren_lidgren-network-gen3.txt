When Lidgren Client gets disconnected from server it cannot connect again. I have explained this issue here:
https://stackoverflow.com/questions/59443954/lidgren-client-cannot-connect-after-disconnecting
Hello!

While investigating random timeout connection issues (on perfect connections) I've noticed that `ReceivedPong` could handle only the latest ping request (`m_sentPingNumber`), which is certainly not perfect in some cases https://github.com/lidgren/lidgren-network-gen3/blob/c18c8b96329772f49ec43362d4a219c1820870d6/Lidgren.Network/NetConnection.Latency.cs#L90

I've also noticed that `NetConnection.ResetTimeout()` call in the `NetReliableSenderChannel` to not working as expected...the client is dropping connection by timeout (set as 8 seconds) in some rare but 100% reproducible (for some clients) cases. I will keep investigating this issue.

Regards!
I am facing this issue:
```
Socket bound to 0.0.0.0:63658: True
Network thread started
InitiatedConnect: user called connect
Failed to send packet: System.Net.Sockets.SocketException (0x80004005): An address incompatible with the requested protocol was used
   at System.Net.Sockets.Socket.SendTo(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, EndPoint remoteEP)
   at Lidgren.Network.NetPeer.ActuallySendPacket(Byte[] data, Int32 numBytes, IPEndPoint target, Boolean& connectionReset) in D:\projects\lidgren-network-gen3\Lidgren.Network\NetPeer.LatencySimulation.cs:line 164
```
Dns.GetHostEntry also returns IPv6 addresses. In this case, the IPv6 address (::1) is first in the list.

Steps to reproduce: 
1. download latest codebase
2. open any example. in my case, I tested the chat client / server
3. run and fail

Probably this could be caused by having many vEthernets on my machine and wifi.
Hello. 
I am working on the GUI for my networked application and when the client tries to connect I get the NetConnectionStatus.InitiatedConnect in the StatusChange-Message. 
When the client is not able to connect immediately it will try 5 more handshake attempts and I want to show the user of my app that it is doing this. 
After the StatusChange I only get 5 ErrorMessages, that it failed to send a packet. 
I want to show the user: Trying to connect...
And then something like "Trying to connect(1)", "Trying to connect(2)", "Trying to connect(3)"...

But I can't seem to access any information that the client is resending the handshake attempt/trying to connect again. 
I think a StatusChange-Message would be nice or some other kind of event. 
Any ideas on how to achieve this behaviour? Do I have to extend lidgren network for this or can this be achieved with the current version?
Can't use UPnP to open ports automatically. Already checked router config, UPnP is turned on and works as intended with other applications
I executed a project I wrote with this commit 42693bdb6e39039535e5f5d2da5d510c5cde363e and it works fine although it fails to correctly update the connection status of the client, the latest commit c18c8b96329772f49ec43362d4a219c1820870d6 on the other hand just refuses to connect at all.

Hello.
Please forgive me for my poor English.

I create a simple ping-pong test project ( after host and client create connect, client send a empty message to host, when host got message then send a empty message back to client).
If undefine __CONSTRAINED, the duration is 3ms.
When define  __CONSTRAINED, the duration is 15-17ms.

I am wondering why the delay is so big when __CONSTRAINED.
Any help is appreciated, Thanks.

This has been a fairly rare occurrence, but we had a few crashes that looked like this:
```
System.InvalidOperationException: Collection was modified; enumeration operation may not execute.
   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)
   at System.Collections.Generic.List`1.Enumerator.MoveNextRare()
   at System.Collections.Generic.List`1.Enumerator.MoveNext()
   at Lidgren.Network.NetPeer.SendMessage(NetOutgoingMessage msg, IList`1 recipients, NetDeliveryMethod method, Int32 sequenceChannel)
   at Lidgren.Network.NetServer.SendToAll(NetOutgoingMessage msg, NetDeliveryMethod method)
```

It seems like the SendToAll method is enumerating all connections, but perhaps in the off chance that someone connects during that brief moment, this crash will happen. Side note: most of my code uses the `SendMessage(NetOutgoingMessage msg, NetConnection recipient, NetDeliveryMethod method)` method, and that one has never crashed thus far.
When building the `Lidgren.Network.MultiTarget` project, I currently get tons of warnings like `'NetBitWriter.ReadUInt16(byte[], int, int)' does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute [Lidgren.Network.MultiTarget]`

I was able to fix this by adding a file `Properties/AssemblyInfo.cs` in the `MultiTarget` project folder with just the line `[assembly: System.CLSCompliant(true)]`.

It might also be worth noting that the auto-generated AssemblyInfo for this project uses the version `1.0.0.0` instead of `2012.1.7.0`.