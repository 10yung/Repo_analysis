 Passport is successfully connected, after successful login i see req.user in my navigated get route "/foo". but when i refresh page req. user is lost it is just not being serialized.  If i navigate to another route from  /foo to /bar lets say,  i can see req.user in get /bar route, so if i refresh /bar req.user is lost "undefined" again, go back to /foo it is there and so on... 

I think this have to do something with sapper configs but im not sure 


Sometimes when I try to load a sapper app, I get a blank page with the following in console:
```
GET http://localhost:3000/client/59f055dfc24d5e828a4f/main.js net::ERR_ABORTED 404 (Not Found)
(index):39 GET http://localhost:3000/client/59f055dfc24d5e828a4f/main.js net::ERR_ABORTED 404 (Not Found)
```

Here's the responsible line:

![sapper_issue](https://user-images.githubusercontent.com/31391056/72634405-d022c180-395a-11ea-944f-994cf214a2ac.png)

I have to clear cache and reload (`Ctrl + F5`) for the app to render. The `main.js` file is then generated with a different path which may or may not work.

It seems that the main.js file sometimes isn't written to cache before the page is loaded?

Note I'm using the sapper-webpack template.
similar to https://github.com/sveltejs/sapper/issues/748

When on the current page, if you click a link that IS the current page, I would like it to either:

1. do a full reload if `target=_self` as per issue #748
2. re-fire onMount without `target=_self`

Thoughts?

This updates `npm run deploy` to call a new script which commits the contents of the `site/__sapper__/export` directory (moved to the root of the repo) as the gh-pages branch (off of the current HEAD) and pushes it to origin.

This plus updating DNS to point to sveltejs.github.io should be all that's needed to move the site to GitHub pages.
I was a bit confused as to where I would import goto from so I added a small usage example.
Fixes #970 and related.
I have a website exported. While the initial page is hydrated (`hydrate_target` function runs) whenever I click on any link to other page of my website, it also gets hydrated. Two simultaneous `hydrate_target` functions are running and the latter one apparently uses global variable `initial_data` that keeps the data preloaded for the first one, thus it loads the components with invalid props, making it fail.
The bug does not appear if I wait for the first hydrate to finish before clicking the link.

**Describe the bug**
During build `C:\dev\sapper.svelte\t` is replaced to `C:\dev\sapper.css\t` (.svelte -> .css)

**Logs**
```
C:\dev\sapper.svelte\test001>npm run build

> TODO@0.0.1 build C:\dev\sapper.svelte\test001
> sapper build --legacy

> Building...
> Failed to build — error in C:\dev\sapper.css\test001\src\routes\_error.svelte: Expected }
1: h1.svelte-1g76ndb,p.svelte-1g76ndb{margin:0 auto}h1.svelte-1g76ndb{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-1g76ndb{margin:1em auto}@media(min-width: 480px){h1.svelte-1g76ndb{font-size:4em}}
                                            ^
2: /*# sourceMappingURL=... */
ParseError: Failed to build — error in C:\dev\sapper.css\test001\src\routes\_error.svelte: Expected }
1: h1.svelte-1g76ndb,p.svelte-1g76ndb{margin:0 auto}h1.svelte-1g76ndb{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-1g76ndb{margin:1em auto}@media(min-width: 480px){h1.svelte-1g76ndb{font-size:4em}}
                                            ^
2: /*# sourceMappingURL=... */
    at error$1 (C:\dev\sapper.svelte\test001\node_modules\svelte\compiler.js:13442:20)
    at Parser$2.error (C:\dev\sapper.svelte\test001\node_modules\svelte\compiler.js:13518:10)
    at Parser$2.eat (C:\dev\sapper.svelte\test001\node_modules\svelte\compiler.js:13532:19)
    at mustache (C:\dev\sapper.svelte\test001\node_modules\svelte\compiler.js:13335:17)
    at new Parser$2 (C:\dev\sapper.svelte\test001\node_modules\svelte\compiler.js:13477:22)
    at parse$2 (C:\dev\sapper.svelte\test001\node_modules\svelte\compiler.js:13608:21)
    at compile (C:\dev\sapper.svelte\test001\node_modules\svelte\compiler.js:26089:18)
    at preprocessPromise.then.code (C:\dev\sapper.svelte\test001\node_modules\rollup-plugin-svelte\index.js:252:22)
    at <anonymous>
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! TODO@0.0.1 build: `sapper build --legacy`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the TODO@0.0.1 build script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
```

**To reproduce**
```bash
md sapper.svelte
cd sapper.svelte
npx degit "sveltejs/sapper-template#rollup" my-app
cd my-app
npm run build
```

**Information about your Sapper Installation:**
Win 10

node -v
v8.11.2

npm -v
6.10.0

```js
  "dependencies": {
    "compression": "^1.7.1",
    "polka": "next",
    "sapper-environment": "^1.0.1",
    "sirv": "^0.4.0"
  },
  "devDependencies": {
    "npm-run-all": "^4.1.5",
    "sapper": "^0.27.0",
    "svelte": "^3.0.0",
    "@babel/core": "^7.0.0",
    "@babel/plugin-syntax-dynamic-import": "^7.0.0",
    "@babel/plugin-transform-runtime": "^7.0.0",
    "@babel/preset-env": "^7.0.0",
    "@babel/runtime": "^7.0.0",
    "@rollup/plugin-commonjs": "^11.0.0",
    "@rollup/plugin-node-resolve": "^6.0.0",
    "@rollup/plugin-replace": "^2.2.0",
    "rollup": "^1.20.0",
    "rollup-plugin-babel": "^4.0.2",
    "rollup-plugin-svelte": "^5.0.1",
    "rollup-plugin-terser": "^4.0.4"
  }
```


Right now Sapper crawls the website and for all local links creates subdirectories with `index.html` file inside. It's not necessary in case the link points to a file that looks like HTML document itself, i.e. ends with `.html` extension. 

It's useful not to create subdirectories like `foo.html/index.html` for at least two reasons:
- it breaks Github Pages custom 404, as described in #1043 
- Surge.sh redirects `foo.html` to `foo.html/` when it encounters a directory, which smells strange.

Fixes #1040 

It works exactly like the example in my [comment](https://github.com/sveltejs/sapper/issues/1040#issuecomment-570093806) + you can return a promise inside `onNavigate`.