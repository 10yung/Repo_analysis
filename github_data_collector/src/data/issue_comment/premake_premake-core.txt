Can we have an option for setting precompiled header output file. 

visual studio equivalent:
![image](https://user-images.githubusercontent.com/17770917/72648340-18ea7280-397b-11ea-95f2-226e8b86a2b5.png)

**What's your question?**

How is the library extension determined when generating library dependencies?

**Details**

From the manual:

_When linking against system libraries, do not include any prefix or file extension. Premake will use the appropriate naming conventions for the current platform._

I am adding support for a new platform (handheld gameconsole) to premake, and this platform uses **.a** for library names.

I've set up the new OS types as a POSIX OS, and it mostly works.

But when I add `links( {"fmod"} )` then the generated visual studio file will create an additional dependency called **libfmod.lib** and not **libfmod.a** unfortunately.

NOTE: for the dependency projects in my application, it does use the .a suffix, and correctly links against it. It is just an issue with 3rd party pre-built library.

I looked in the premake5 sourcecode, but am not sure where this library suffix is determined. The suffix stuff defaults to posix, which I've set, so I'm puzzled.

**What does this PR do?**

-  If there is a whitespace immediately before and/or after `|`, it is not considered as a "deferred join delimiter".

**How does this PR change Premake's behavior?**

-  In most cases, directory names do not have leading and/or trailing whitespace.
  In most cases, whitespace is added before and after "pipe" and "or".
  In such cases, applying this PR eliminates issue #1310.

- if directory name has a leading and/or trailing whietspace, "deferred join delimiter" will not work properly.
  However, all existing tests passed without change.

**Anything else we should know?**

- This PR does not completely resolve issue #1310.
  So I don't write `close` comment.

**Did you check all the boxes?**

- [x] Focus on a single fix or feature; remove any unrelated formatting or code changes
- [x] Add unit tests showing fix or feature works; all tests pass
- [x] Mention any [related issues](https://github.com/premake/premake-core/issues) (put `closes #XXXX` in comment to auto-close issue when PR is merged)
- [x] Follow our [coding conventions]([https://github.com/premake/premake-core/blob/master/CONTRIBUTING.md#coding-conventions](https://github.com/premake/premake-core/blob/master/CONTRIBUTING.md#coding-conventions))
- [x] Minimize the number of commits

*You can now [support Premake on our OpenCollective](https://opencollective.com/premake). Your contributions help us spend more time responding to requests like these!*

Hey!

I'm am using premake5 (also I'm new to using premake in general). I'm trying to generate a "SharedItems" project but I get the error "_invalid value 'SharedItems' for kind_". It looks like .vcxitems files are supported and the key word "SharedItems" is supported too, but this 'kind' isn't being recognized. Am I using it wrong or is this a bug?

Example use case:
`project "Library.Shared"`
	`kind "SharedItems"`
	`language "C++"`
	`location "source/Library.Shared"`

Thanks!
I started experimenting with modules recently after falling in love with Premake. I wanted to see what would happen if I attempt to a module that doesn't exist 
```lua
require("this_module_certainly_doesnt_exist")
```

I expected to see some soft of "module not found" error message instead I got this cryptic mess:
```
Error: ** Error: Download of <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="refresh" content="0;url=https://searchassist.verizon.com/main?ParticipantID=euekiz39ksg8nwp7iqj2fp5wzfwi5q76&FailedURI=http%3A%2F%2Fpackagesrv.com%2Fapi%2Fv1%2Fmodule%2Fthis%255Fmodule%255Fcertainly%255Fdoesnt%255Fexist&FailureMode=1&Implementation=&AddInType=4&Version=pywr1.0&ClientLocation=us"/><script type="text/javascript">url="https://searchassist.verizon.com/main?ParticipantID=euekiz39ksg8nwp7iqj2fp5wzfwi5q76&FailedURI=http%3A%2F%2Fpackagesrv.com%2Fapi%2Fv1%2Fmodule%2Fthis%255Fmodule%255Fcertainly%255Fdoesnt%255Fexist&FailureMode=1&Implementation=&AddInType=4&Version=pywr1.0&ClientLocation=us";if(top.location!=location){var w=window,d=document,e=d.documentElement,b=d.body,x=w.innerWidth||e.clientWidth||b.clientWidth,y=w.innerHeight||e.clientHeight||b.clientHeight;url+="&w="+x+"&h="+y;}window.location.replace(url);</script></head><body></body></html> failed (0)
Couldn't resolve host name
Could not resolve host: <!DOCTYPE html PUBLIC "-
```
It looks like premake is trying to download the missing module but the server doesnt exist either. Im not sure if this server is down or this is some local DNS issue because I cant load http://packagesrv.com. Also I found where in premake this occurs:
https://github.com/premake/premake-core/blob/ba3b2eb50b70eb0d85c55512b9cd3814a8237a71/src/base/moduledownloader.lua#L59

Some better error handling would be nice here. 
This is using premake5 alpha15


With 5.0.0-dev

from the source code, I see that the user can adjust `indentLeve`l by using _p function (like `push` and `pop` functions)

but I'm little confused about the use of `_x` function.

Xcode will autocreate scheme files once you open the project in xocde.
But if you do not, there is no way to build only part of a workspace if you don't specify a scheme.

A solution would be this mr:
https://github.com/premake/premake-xcode/pull/25

@ratzlaff , @starkos  was there a reason for which this was not merged?

Should I make a new MR with this? Ideally we should specify trough a command line option or a flag if we want schemes to be generated or not.

Make enablewarnings actually do something

**What does this PR do?**
enablewarnings currently does nothing on MSVC. 
This pull request makes it so any warnings that are specifically enabled are set to level 1, which enables them as long as the user has the warning level at least level 1.

Thanks for the contribution! Please provide a concise description of the problem this request solves.

**How does this PR change Premake's behavior?**
enablewarnings will work on msvc

Are there any breaking changes? Will any existing behavior change?
If people were using enablewarnings they may not have noticed it wasn't doing anything on MSVC, it will now do something, but this may cause them to hit warnings they did not previously hit.

**Anything else we should know?**
Don't think so

Add any other context about your changes here.

**Did you check all the boxes?**

- [ ] Focus on a single fix or feature; remove any unrelated formatting or code changes
- [ ] Add unit tests showing fix or feature works; all tests pass
- [ ] Mention any [related issues](https://github.com/premake/premake-core/issues) (put `closes #XXXX` in comment to auto-close issue when PR is merged)
- [ ] Follow our [coding conventions]([https://github.com/premake/premake-core/blob/master/CONTRIBUTING.md#coding-conventions](https://github.com/premake/premake-core/blob/master/CONTRIBUTING.md#coding-conventions))
- [ ] Minimize the number of commits

*You can now [support Premake on our OpenCollective](https://opencollective.com/premake). Your contributions help us spend more time responding to requests like these!*

