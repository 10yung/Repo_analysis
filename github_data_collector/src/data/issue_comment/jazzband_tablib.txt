I have a Django project that use [django-import-export](https://github.com/django-import-export/django-import-export) which in turn uses `tablib`.

After some upgrades (`pip-compile -U` follow by `pip-sync`), I am getting issue with `Django (2.2.7)`.

```
$ ./manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

Exception in thread django-main-thread:
Traceback (most recent call last):
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/template/utils.py", line 66, in __getitem__
    return self._engines[alias]
KeyError: 'django'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/-redacted-/.pyenv/versions/3.6.4/lib/python3.6/threading.py", line 916, in _bootstrap_inner
    self.run()
  File "/Users/-redacted-/.pyenv/versions/3.6.4/lib/python3.6/threading.py", line 864, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/utils/autoreload.py", line 54, in wrapper
    fn(*args, **kwargs)
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/core/management/commands/runserver.py", line 117, in inner_run
    self.check(display_num_errors=True)
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/core/management/base.py", line 390, in check
    include_deployment_checks=include_deployment_checks,
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/core/management/base.py", line 377, in _run_checks
    return checks.run_checks(**kwargs)
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/core/checks/registry.py", line 72, in run_checks
    new_errors = check(app_configs=app_configs)
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/contrib/admin/checks.py", line 79, in check_dependencies
    for engine in engines.all():
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/template/utils.py", line 90, in all
    return [self[alias] for alias in self]
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/template/utils.py", line 90, in <listcomp>
    return [self[alias] for alias in self]
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/template/utils.py", line 81, in __getitem__
    engine = engine_cls(params)
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/template/backends/django.py", line 25, in __init__
    options['libraries'] = self.get_templatetag_libraries(libraries)
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/template/backends/django.py", line 43, in get_templatetag_libraries
    libraries = get_installed_libraries()
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/template/backends/django.py", line 108, in get_installed_libraries
    for name in get_package_libraries(pkg):
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/template/backends/django.py", line 121, in get_package_libraries
    module = import_module(entry[1])
  File "/Users/-redacted-/.pyenv/versions/3.6.4/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 994, in _gcd_import
  File "<frozen importlib._bootstrap>", line 971, in _find_and_load
  File "<frozen importlib._bootstrap>", line 955, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 665, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 678, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/rest_framework/templatetags/rest_framework.py", line 12, in <module>
    from rest_framework.renderers import HTMLFormRenderer
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/rest_framework/renderers.py", line 19, in <module>
    from django.test.client import encode_multipart
  File "/Users/-redacted-/.pyenv/versions/-redacted-/lib/python3.6/site-packages/django/test/client.py", line 23, in <module>
    from django.test import signals
  File "<frozen importlib._bootstrap>", line 968, in _find_and_load
  File "<frozen importlib._bootstrap>", line 149, in __enter__
  File "<frozen importlib._bootstrap>", line 94, in acquire
_frozen_importlib._DeadlockError: deadlock detected by _ModuleLock('django.test.signals') at 4583373176
```

I have managed to narrow down the issue, which is due to the missing `backports.csv==1.0.7` dependency is missing which `pip-compile` generate dependency for `tablib==0.14.0`.

If I manually install the `backports.csv`, then everything is working again.

I am not sure if the omission of `backports.csv` was on purpose for `tablib==0.14.0` or was it a bug. Or maybe this bug report should be with `django-import-export`? 😅 

Thank you.
As part of #398 I've added disabled calls to flake8 including a commented-out installation of the flake8-black and flake8-isort plugins.

I would suggest to run black and isort once over the code base and enabling both plugins to have a positive long-term effect on code quality. I didn't make this part of #398 since it's not a hard requirement for Jazzband projects (yet) but I've seen more and more projects move to that strategy. 
Using tablib version 0.13.0
The issue is with Control Characters and Surrogates

Steps to reproduce:
```py
from tablib import Dataset
data=Dataset((u'\x1f',),)
data.export('xlsx')
```

Stack Trace
```
IllegalCharacterErrorTraceback (most recent call last)
<ipython-input-1-9b9694f739ff> in <module>()
      1 from tablib import Dataset
      2 data=Dataset((u'\x1f',),)
----> 3 data.export('xlsx')

/srv/jupyter/local/lib/python2.7/site-packages/tablib/core.pyc in export(self, format, **kwargs)
    466             raise UnsupportedFormat('Format {0} cannot be exported.'.format(format))
    467 
--> 468         return export_set(self, **kwargs)
    469 
    470     # -------

/srv/jupyter/local/lib/python2.7/site-packages/tablib/formats/_xlsx.pyc in export_set(dataset, freeze_panes)
     41     ws.title = dataset.title if dataset.title else 'Tablib Dataset'
     42 
---> 43     dset_sheet(dataset, ws, freeze_panes=freeze_panes)
     44 
     45     stream = BytesIO()

/srv/jupyter/local/lib/python2.7/site-packages/tablib/formats/_xlsx.pyc in dset_sheet(dataset, ws, freeze_panes)
    145                         cell.value = unicode('%s' % col, errors='ignore')
    146                 except TypeError:
--> 147                     cell.value = unicode(col)

/srv/jupyter/local/lib/python2.7/site-packages/openpyxl/cell/cell.pyc in value(self, value)
    292     def value(self, value):
    293         """Set the value and infer type and display options."""
--> 294         self._bind_value(value)
    295 
    296     @property

/srv/jupyter/local/lib/python2.7/site-packages/openpyxl/cell/cell.pyc in _bind_value(self, value)
    195 
    196         elif isinstance(value, STRING_TYPES):
--> 197             value = self.check_string(value)
    198             self.data_type = self.TYPE_STRING
    199             if len(value) > 1 and value.startswith("="):

/srv/jupyter/local/lib/python2.7/site-packages/openpyxl/cell/cell.pyc in check_string(self, value)
    158         value = value[:32767]
    159         if next(ILLEGAL_CHARACTERS_RE.finditer(value), None):
--> 160             raise IllegalCharacterError
    161         return value
    162 

IllegalCharacterError:
```
It took me quite a while to figure out how to use `Dataset.subset`.

The documentation states the interface is `subset(rows=None, cols=None)`, so my first assumption was to just pass two ints for the number of requested rows and columns, and when that didn't work I passed a list of column indices, but also to no avail.

Only after debugging I finally found out that I first need to define column headers for the Dataset instance and then pass a subset of these headers to `cols`.

In my opinion, this could be made more clearly in the documentation.
Also, is there a reason why headers are required and we cannot alternatively just pass column indices?

I would go ahead and try to implement that myself if you don't mind.
How does the cell width adapt？
I thought I would open an issue to gauge interest in a terminal / plain text formatter. This possible formatter would print or read data from space padded plain text.

```python
import tablib

data = tablib.Dataset()
data.headers = ('first_name', 'last_name')
data.append(('John', 'Adams'))
data.append(('George', 'Washington'))
print data.export('txt')
# first_name           last_name
# John                 Adams
# George               Washington
```

If you think this is useful and fits with the philosophy of the project, I could put together a PR.

There are definitely some differences between this and some of the other formatters including:

- how wide should it print by default?
- if the data is wider than the width, there will be data truncation
- this can't really losslessly handle (outputting and then reading a dataset will result in differences) data with spaces at the beginning or end
- Read/write CSVW

  - [ ] Read CSVW
  - [ ] Write CSVW

## CSVW
Homepage: https://w3c.github.io/csvw/
Standard: https://www.w3.org/TR/tabular-data-primer/
Standard: https://www.w3.org/TR/tabular-data-model/
Standard: https://www.w3.org/TR/tabular-metadata/
Standard: https://www.w3.org/TR/csv2json/
Standard: https://www.w3.org/TR/csv2rdf/
Namespace: http://www.w3.org/ns/csvw#
xmlns: ``@prefix csvw: <http://www.w3.org/ns/csvw#> .``
@context: http://www.w3.org/ns/csvw.jsonld

CSVW (CSV on the Web) is a set of relatively new standards for representing CSV rows and columns as RDF (and JSON / JSON-LD) along with metadata.

- URIs for datatypes (XSD, ...)
- URIs for columns (RDF)
- Document Metadata
- CSV -> JSON ( -> JSON-LD -> RDF )
- CSV -> RDF

.

- https://wrdrd.github.io/docs/consulting/knowledge-engineering#csvw
Hi,

for XLSX format, databook sheet title must be below 32 characters. If it is longer, you get a warning about a corrupted file when trying to open such file in Microsoft Excel (the original MS Excel from MS Office package).

Attached is out file and a minimal non-working code example. 

```python
import tablib

parent_data = tablib.Databook()

data = tablib.Dataset()
# collection of names
names = ['Kenneth Reitz', 'Bessie Monke']

for name in names:
    # split name appropriately
    fname, lname = name.split()

    # add names to Dataset
    data.append([fname, lname])

data.title = "1" * 32
parent_data.add_sheet(data)

x = open("test.xlsx", "wb")
x.write(parent_data.xlsx)
x.close()
```

This is the out file that I got on Python 3.6 and tablib 0.11.5. 

[test.xlsx](https://github.com/kennethreitz/tablib/files/1258761/test.xlsx)

When I change the dataset title length to below 31 characters, everything goes back to normal. 
**Part of the code:**
```python
data=tablib.Dataset(headers=['userId','userPhone', 'phone', 'address'])
for item in resp_data:
    order_id,user,phone,address=item.get('id',''),item.get('userPhone',''),item.get('phone',''),item.get('contact',{}).get('address')
    print('>>>',database,user,phone,address)
    if not address:
        continue
    data.append([order_id,user,phone,address])
with open('data_6.9-8.23.xls', 'wb') as f:
    f.write(data.xls)
```
**Part of the print:**
```python
...
>>> order_waimai 152570300** 152570300** 明桂苑新风路与环站北路交叉口1幢1单元1203
>>> order_waimai 134170076** 134170076** 明昇幼儿园对面东北饺子旁边电梯上去211
>>> order_waimai 188837906** 135325400** 东莞市凯格精密机械有限公司广东省东莞市东城科技园沙朗路2号
>>> order_waimai 151593111** 151593111** 富江宾馆赛歧镇罗江开发区三江二路49号蔚蓝音乐会所2楼超市
>>> order_waimai 159900353** 159900353** 西堤北路浙江省杭州市富阳区11幢东单元201室
>>> order_waimai 132161789** 132161789** 滨兴西苑杭州市滨江区滨兴路1796号15幢1单元501室
>>> order_waimai 187546966** 187546966** 祥河小区-13号东营市东营区鱼台路58号2单元1003
>>> order_waimai 139953449** 139953449** 恒大名都通达南街与双渠口路交会处向西500米17号楼1单元1504
>>> order_waimai 138013569** 187100085** 恒通国际创新园北京市朝阳区酒仙桥北路9号C17
>>> order_waimai 134170076** 134170076** 明昇幼儿园对面东北饺子旁边电梯上去211
>>> order_waimai 158518085** 158518085** 格调海洋主题宾馆(颍上北路店)阜阳颍泉区颍上北路阜阳商厦向南200米
...
```
**Part of the excel:**
![tablib](https://user-images.githubusercontent.com/24584669/29696091-326736bc-8979-11e7-9cff-cf169167f5c4.png)
**summarize:**
I am sure that have carefully checked the print data, no empty data lines, and empty data,bug export data to the excel, there are a lot of empty lines and empty cells.
Finally, I had to use openpyxl to solve the problem.
Hello,

I've been using tablib indirectly through records to produce some Excel reports from a database, and I've noticed that while I add my content in a specific order, when exporting, the order of the columns is not the same as I added.

Looking at the documentation of tablib -- if the examples are not merely illustrative -- this should be noticeable, as for instance, when exporting to JSON, YAML, and CSV, the output "columns" are re-ordered differently for each format:

```python
>>> print data.json
[
  {
    "last_name": "Adams",
    "age": 90,
    "first_name": "John"
  },
  {
    "last_name": "Ford",
    "age": 83,
    "first_name": "Henry"
  }
]

>>> print data.yaml
- {age: 90, first_name: John, last_name: Adams}
- {age: 83, first_name: Henry, last_name: Ford}

>>> print data.csv
first_name,last_name,age
John,Adams,90
Henry,Ford,83
```

I'd appreciate if this could be fixed in such way that output would always have the same structure as what was inputted.

Thanks

