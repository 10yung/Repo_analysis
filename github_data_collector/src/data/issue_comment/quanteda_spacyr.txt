I have followed the thread for this by another user, and have found that the options are not working for me as a mac user. I have tried leaving all arguments blank in the "space_initialize()" command, and R crashes and restarts the moment I have hit the enter key on space_parse(). Spacyr is recognizing the condo environment, but the crash still happens.

> library(spacyr)
> spacy_initialize()
Found 'spacy_condaenv'. spacyr will use this environment
successfully initialized (spaCy Version: 2.0.16, language model: en)
(python options: type = "condaenv", value = "spacy_condaenv")
>txt <- "This is love."
>space_parse(txt)
"R session aborted. R encountered a fatal error. The session was terminated."
I have a suggestion for an enhancement. It is becoming very easy to create domain specific models in spaCy with the matcher and Phrasematcher and the Entity Ruler. Prodigy is also turning out to be really powerful for improving the out of the box NER matching and for classification in specific domains. 

At present spacyr allows the user to download models from spacy (e.g. the en model). Bearing in mind the discussion on full model names #177 would it be possible to add an arg to install a model from a local path. I took a look inside the code but as far as I could tell the calls to install are made through commands to the sys(?). 

My use case on this is that I used spacyr to extract noun phrases containing species names for Antarctic and the Arctic from scientific and patent texts to examine bioinnovation in the polar regions. However, that approach drops relevant results and so training a large model with an entity ruler etc was necessary. It would be good to use that model inside spacyr.

I also think we might see R users wanting to use other spacy models such as for biomedical text https://github.com/allenai/scispacy  and the spacy universe suggests other models such as for legal text classification (blackstone) etc. So, I think adding this arg would open up a lot of flexibility for users. 

Many thanks again for all the work on the package!


Hi, I am trying to use spacyr and I dont have admin privileges to my machine.  
I am running:
install.packages("spacyr")
library(spacyr)
without any error messages

however, when  I try to run spacy_initialize, I get the error: 
Error in path.expand(path) : invalid 'path' argument

I have tried different options for the arguments of the function with no success. Any advice? 
Thanks
At the moment, `spacy_initialize` use the default model name `en`. This would become a bit confusing as we are planning to use word-vectors that come with spaCy language models and vectors come only with `_lg` or `_md` (#171). Once this is implemented, we expect a number of `spacyr` users will have multiple models from the same language. 

I think we should use a full model name as the default (e.g. the default will be `en_core_web_sm`) to avoid this confusion. 

That's also what @ines recommends:
https://support.prodi.gy/t/spacy-load-en-download/1858

This will be implemented with #171 (unless vetoed by @kbenoit or someone else).
Please give us a way to install spacyr via Docker. I have tried everything from installing spacy via a continuumio/miniconda3 container to installing conda on an RStudio container and initalizing directly to spacy_install() within my Dockerfile. 

I feel the easiest way would be to simply call `RUN R -e "spacyr::spacy_install(prompt=FALSE)"` in my Dockerfile and let it install everything from miniconda to the enviroment (as I would in RStudio). Unfortunately, running it like this is non-interactive and consequently doesn't work. I was not able to find a why to run the command interactively in my Dockerfile (and automatically answer all prompts with Yes). 

Unless you know a way to run something like `RUN R -it -y -e`, PLEASE enable us to run `prompt=FALSE` in non-interactive mode!

I ran out of any other ideas to make spacyr available via Docker...
The documentation of `spacy_tokenize()` states that "`x` can be a character object, a **quanteda** corpus, or a TIF-compliant corpus data.frame". Yet, it does not seem to work on a **quanteda** corpus, but only on `texts(corpus)`.  Either the behaviour should change or the documentation should be refined.

```r
library(quanteda)
#> Package version: 1.5.1
#> Parallel computing: 2 of 12 threads used.
#> See https://quanteda.io for tutorials and examples.
#> 
#> Attaching package: 'quanteda'
#> The following object is masked from 'package:utils':
#> 
#>     View
library(spacyr)

spacy_initialize(model = "en")
#> Found 'spacy_condaenv'. spacyr will use this environment
#> successfully initialized (spaCy Version: 2.1.4, language model: en)
#> (python options: type = "condaenv", value = "spacy_condaenv")

toks1 <- spacy_tokenize(data_corpus_inaugural, output = "data.frame")
#> Error in UseMethod("spacy_tokenize"): 
#> no applicable method for 'spacy_tokenize' applied to an object of class "c('corpus', 'list')"

toks2 <- spacy_tokenize(texts(data_corpus_inaugural), output = "data.frame")

head(toks2, 10)
#>             doc_id    token
#> 1  1789-Washington   Fellow
#> 2  1789-Washington        -
#> 3  1789-Washington Citizens
#> 4  1789-Washington       of
#> 5  1789-Washington      the
#> 6  1789-Washington   Senate
#> 7  1789-Washington      and
#> 8  1789-Washington       of
#> 9  1789-Washington      the
#> 10 1789-Washington    House
```
spaCy now has this:
https://spacy.io/usage/vectors-similarity

Maybe we want to make this functionality available in `spacyr`. 

Any feedback/suggestions from users are welcome.
Revise JOSS submission.
Hello @kbenoit and other users of `spacyr`

This is a comprehensive wishlist of `spacyr` updates inspired by our discussion with @honnibal and @ines. We will implement some of them in future, but is there anything you are particularly intereted in?

**Something likely to be implemented**

- Turn off the part of pipes at the time of execution
- Noun phrases extractions
- Having a "just tokenization" option
- Size of batch in pipe for performance tuning

**Something nice to have but not sure how many users need it**

- Allowing to add user-defined attributes
- Functionality to add word embeddings to the model

**Just a wish**

- https://explosion.ai/demos/
   - consider the use of matcher in spacyr (construction of JSON is necessary)
- parse-tree navigations (maybe a different package)