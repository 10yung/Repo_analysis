**Symfony version(s) affected**: 5.0.2

**Description**  
Database queries in listeners to `kernel.terminate` event are not logged to profiler, but they are still logged to `var/log/dev.log`. I would expect them to be either in both places or none.

I discovered this after I added a listener that saves timestamp of last user activity to database (and I thought it may be a good idea to do it in `kernel.terminate` not to block the response).

**How to reproduce**  

1. create a Symfony demo application
2. create a listener in `src/DemoListener.php`:

```php
<?php declare(strict_types = 1);

namespace App;

use App\Entity\Post;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpKernel\Event\TerminateEvent;

final class DemoListener
{
    /** @var \Doctrine\ORM\EntityManagerInterface */
    private $entityManager;

    public function __construct(
        EntityManagerInterface $entityManager
    )
    {
        $this->entityManager = $entityManager;
    }

    public function __invoke(TerminateEvent $event): void
    {
        $posts = $this->entityManager->createQueryBuilder()
            ->select('post')
            ->from(Post::class, 'post')
            ->getQuery()->getResult();
    }
}
```

3. and register in in `services.yaml`:

```yaml
    App\DemoListener:
        tags:
            - { name: 'kernel.event_listener' }
```

(You can use the patch [listener.patch.txt](https://github.com/symfony/symfony/files/4080717/listener.patch.txt) )

4. open any page in the demo application
5. the SELECT from the listener is not visible in profiler
6. the SELECT from the listener is visible in `var/log/dev.log`

**Possible Solution**  
Maybe collect the profiler data in `kernel.terminate`? But I guess that would have other consequences.

**Additional context**  
I found an opinion that use of `kernel.terminate` is dangerous and should be avoided https://github.com/symfony/symfony/issues/27544#issuecomment-428589534 but it is not mentioned [in docs](https://symfony.com/doc/current/components/http_kernel.html#the-kernel-terminate-event).

In this PR https://github.com/symfony/symfony/pull/33285 the second and third argument of `FileLocator::__construct` were removed.

Before (<= v4.4) the lookup for resources was done from 2 paths.

```
/Users/path/src
/Users/path/src/Resources
```

\+ current path `/Users/path/src/Home/Config/routes`

Now (v5) the `$paths` property in `FileLocator` is empty so only current path is applied.

The resource is atemped to be resolved only as `/Users/path/src/Home/Config/routes/../src/Home/Application/Controller` for my definition `<import resource="../src/Home/Application/Controller" prefix="/home" type="annotation" />`

The [documentation still says](https://symfony.com/doc/current/routing.html#creating-routes-in-yaml-xml-or-php-files) to do this:

```yaml
# config/routes.yaml
controllers:
    resource: '../src/Controller/'
    type:     annotation
```



But for that cannot work. Is the documentation outdated and this is the correct behaviour or the `root_dir` should have been replaced by `project_dir` instead and this is a bug? Thanks-

**Symfony version(s) affected**: v4.4.2

**Description**  
the dom crawler short circuits when reaching a special character I can not identify, I've put in the middle of this file [error.txt](https://github.com/symfony/symfony/files/4079128/error.txt) 
my IDE renders the character as Box
<img width="471" alt="Screen Shot 2020-01-17 at 2 34 49 PM" src="https://user-images.githubusercontent.com/39970/72647781-9049e300-3936-11ea-8d7d-b9b1b98a671c.png">

**How to reproduce**  
Here is a simple PHPUnit test I wrote with a file containing the bad character [error.txt](https://github.com/symfony/symfony/files/4079128/error.txt)  
```
public function testCrawlerShortCircuited()
    {
        $html = file_get_contents(__DIR__ . '/error.txt');
        $crawler = new \Symfony\Component\DomCrawler\Crawler($html);

        $this->assertEquals('<body><span>pre</span><span></span><span>post</span></body>', $crawler->html());
    }
```
Failed test shows the missing "post" span in fact the entire html document after the crazy character just gets dropped.

```
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-'<body><span>pre</span><span></span><span>post</span></body>'
+'<body><span>pre</span><span></span></body>'
````
**Possible Solution**  
Strip the character, but I don't even know what it is.

**Additional context**  
I can't copy the character into a browser to help identify it (get's stripped by chrome maybe?)
This character is live on the internet when trying to crawl the dom of certain websites.

| Q             | A
| ------------- | ---
| Branch?       | master <!-- see below -->
| Bug fix?      | no
| New feature?  | no <!-- please update src/**/CHANGELOG.md files -->
| Deprecations? | no <!-- please update UPGRADE-*.md and src/**/CHANGELOG.md files -->
| Tickets       | - <!-- prefix each issue number with "Fix #", if any -->
| License       | MIT
| Doc PR        | - <!-- required for new features -->
<!--
Replace this notice by a short README for your feature/bugfix. This will help people
understand your PR and can be used as a start for the documentation.

Additionally (see https://symfony.com/roadmap):
 - Always add tests and ensure they pass.
 - Never break backward compatibility (see https://symfony.com/bc).
 - Bug fixes must be submitted against the lowest maintained branch where they apply
   (lowest branches are regularly merged to upper ones so they get the fixes too.)
 - Features and deprecations must be submitted against branch master.
-->

| Q             | A
| ------------- | ---
| Branch?       | master
| Bug fix?      | no
| New feature?  | no <!-- please update src/**/CHANGELOG.md files -->
| Deprecations? | no <!-- please update UPGRADE-*.md and src/**/CHANGELOG.md files -->
| Tickets       | - <!-- prefix each issue number with "Fix #", if any -->
| License       | MIT
| Doc PR        | - <!-- required for new features -->

I like these option a lot and I think it deserves to be mentioned in the command help text :-) 
| Q             | A
| ------------- | ---
| Branch?       | 4.3
| Bug fix?      | yes
| New feature?  | no
| Deprecations? | no
| Tickets       | 
| License       | MIT
| Doc PR        | 

Mysqli doesn't support named parameters, so if you pass a doctrine connection using `mysqli` then you get the following error:
`You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ':id, :token, UNIX_TIMESTAMP() + 300)'`
This PR ensures a clear error is provided and suggests to use `pdo_mysql` instead
| Q             | A
| ------------- | ---
| Branch?       | master
| Bug fix?      | no
| New feature?  | yes
| Deprecations? | yes
| Tickets       | N/A
| License       | MIT
| Doc PR        | To do

The aim of this PR is to bring the possibility to modify the name converter to use at runtime.

Imagine you use the classical serializer for your (de)normalization needs (if you use some DTOs for instance). You also need to call an API using snake case and you want to use the serializer too.

In the current state, you need to do something like this:

```yaml
services:
    app.serializer.normalizer.object.snake_case:
        class: Symfony\Component\Serializer\Normalizer\ObjectNormalizer
        autoconfigure: false
        arguments:
            $nameConverter: '@serializer.name_converter.camel_case_to_snake_case'

    app.serializer.denormalizer.array.snake_case:
        class: Symfony\Component\Serializer\Normalizer\ArrayDenormalizer
        autoconfigure: false

    app.serializer.normalizer.datetime.snake_case:
        class: Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
        autoconfigure: false

    app.serializer.encoder.json.snake_case:
        class: Symfony\Component\Serializer\Encoder\JsonEncoder
        autoconfigure: false

    app.serializer.snake_case:
        class: Symfony\Component\Serializer\Serializer
        autoconfigure: false
        arguments:
            - ['@app.serializer.normalizer.datetime.snake_case', '@app.serializer.normalizer.object.snake_case', '@app.serializer.denormalizer.array.snake_case']
            - ['@app.serializer.encoder.json.snake_case']
```

You have to reconfigure all the (de)normalizers because if you use the ones from Symfony in the declaration of your snake case serializer, they can use the snake case serializer instead of the classical one when you (de)normalize your data (mainly because of this: https://github.com/symfony/symfony/blob/af4035d4ecf98df3d9dec9ac9eaadd6ca6d00873/src/Symfony/Component/Serializer/Serializer.php#L77-L87).

With this PR, you can just use the classical serializer with a flag given to the context:

```php
$data = $this->normalizer->normalize($object, null, [
    AbstractNormalizer::NAME_CONVERTER => CamelCaseToSnakeCaseNameConverter::class,
]);
```

| Q             | A
| ------------- | ---
| Branch?       | master
| Bug fix?      | no
| New feature?  | yes 
| Deprecations? | no 
| Tickets       | Fix #32048 
| License       | MIT
| Doc PR        | not done yet

Support using the `name` attribute on the `unit` element in xliff 2.0 to use as the "translation key" rather than always relying on the `<source>` content, as was done on the xliff 1.2.
| Q             | A
| ------------- | ---
| Branch?       | 3.4
| Bug fix?      | no
| New feature?  | yes
| Deprecations? | no
| License       | MIT


| Q             | A
| ------------- | ---
| Branch?       | 5.0
| Bug fix?      | yes
| New feature?  | no
| Deprecations? | no
| Tickets       | 
| License       | MIT
| Doc PR        | 

This PR ensures that when adding translations to a catalogue using the `add(array $messages, string $domain = 'messages')` method internally the intl icu domain is checked first.

Otherwise it could happen that existing messages in e.g. `messages+intl-icu` are not updated but the same keys are added to `messages`.
