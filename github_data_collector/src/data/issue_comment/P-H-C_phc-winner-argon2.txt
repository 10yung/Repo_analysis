When building libargon2 as part a buildsystem like for example buildroot (which targets embedded systems), it shouldn't fail if the symlink is already present on the target rootfs.
When I build argon2 on macOS 10.15 Catalina (19A602) it produces a binary but the binary does not work - it always exits with a segmentation fault when trying to produce a hash. Running make test also fails. My shell is zsh, and I have Apple's current command line tools installed . Here are the steps I took:

```
% make 
Building with optimizations for native
cc -std=c89 -O3 -Wall -g -Iinclude -Isrc -pthread -march=native  src/argon2.c src/core.c src/blake2/blake2b.c src/thread.c src/encoding.c src/opt.c src/run.c -o argon2

```
No error is thrown during build, and the argon2 binary is created as expected. Running tests:

```
% make test
Building with optimizations for native
cc -std=c89 -O3 -Wall -g -Iinclude -Isrc -pthread -march=native  -Wextra -Wno-type-limits src/argon2.c src/core.c src/blake2/blake2b.c src/thread.c src/encoding.c src/opt.c src/test.c -o testcase
ld: can't write output file: testcase for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make: *** [test] Error 1
```

If I try and produce a hash using the produced argon2 binary:


```
% ./argon2 ThisIsMySalt
asdfjkl
Type:		Argon2i
Iterations:	3
Memory:		4096 KiB
Parallelism:	1
zsh: segmentation fault  ./argon2 ThisIsMySalt

```

That's it!
As a robust command line program, the arguments should _not_ be positional, e.g. `tar`. In `argon2`, the arguments are mostly non-positional except `salt`.

See example below.

![Screen Shot 2019-10-16 at 12 54 19 PM](https://user-images.githubusercontent.com/133924/66941022-17c04700-f014-11e9-8693-8ef3c033d8bb.png)

1. it didn't work because I placed the type argument `-id` before the `salt`. Also this error message is useless because it doesn't give hint of which parameter went wrong. A good example is `git`, which will give you the context what the CLI program thinks you are trying to do and suggest the right way to do it. 
1. it worked because i followed the EXACT ordering
1. it worked because all the arguments are not ordered (e.g `-t` placed last)
1. `argon2 -h` or just `argon2` gives the help text. But no way to show argon2 version.

To me, the usage line example is problematic:

```
Usage:  argon2 [-h] salt [-i|-d|-id] [-t iterations] [-m log2(memory in KiB) | -k memory in KiB] [-p parallelism] [-l hash length] [-e|-r] [-v (10|13)]
```

 * The help text usage (`argon2 -h` or just `argon2` doesn't require `salt`), but all other cases `salt` argument is required. However, having `-h` argument or any arguments prefixed with `-` placed in front of `salt` made the impression that argon2 doesn't require arguments to be passed in order but in fact that's not true, `salt` must be the 1st positional argument.
 * Recommend have a separate line to indicate how to print help text, rather than consolidate all usages in one line in this current awkward way. Or make the `salt` argument optional as well `[salt]` and provide more detail error message when argon2 expects salt but not getting it.
 * add a print version command line argument `--version`. Right now the only way for me to check version is to do `brew info argon2`, always don't work if I compile from source directly.

Hi everyone,
I'm trying to encrypt password to stroe it in database. First I use example code from readme to test.
```
#include "argon2.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>


#define HASHLEN 32
#define SALTLEN 16
#define PWD "password"

string PasswordEncoder::encode(string plainPassword) {

    uint8_t hash1[HASHLEN];
    uint8_t hash2[HASHLEN];
    char encoded[97];

    uint8_t salt[SALTLEN];
    memset( salt, 0x00, SALTLEN );

    uint8_t *pwd = (uint8_t *)strdup(PWD);
    uint32_t pwdlen = strlen((char *)pwd);

    uint32_t t_cost = 2;            // 1-pass computation
    uint32_t m_cost = (1<<16);      // 64 mebibytes memory usage
    uint32_t parallelism = 1;       // number of threads and lanes

    // high-level API
    argon2i_hash_raw(t_cost, m_cost, parallelism, pwd, pwdlen, salt, SALTLEN, hash1, HASHLEN);
    argon2i_hash_encoded(t_cost, m_cost, parallelism, pwd, pwdlen, salt, SALTLEN, HASHLEN, encoded, 97);

    // low-level API
    argon2_context context = {
            hash2,  /* output array, at least HASHLEN in size */
            HASHLEN, /* digest length */
            pwd, /* password array */
            pwdlen, /* password length */
            salt,  /* salt array */
            SALTLEN, /* salt length */
            NULL, 0, /* optional secret data */
            NULL, 0, /* optional associated data */
            t_cost, m_cost, parallelism, parallelism,
            ARGON2_VERSION_13, /* algorithm version */
            NULL, NULL, /* custom memory allocation / deallocation functions */
            /* by default only internal memory is cleared (pwd is not wiped) */
            ARGON2_DEFAULT_FLAGS
    };

    free(pwd);

    for( int i=0; i<HASHLEN; ++i )
        printf( "%02x", hash1[i] ); printf( "\n" );

    if (memcmp(hash1, hash2, HASHLEN)) {
        for( int i=0; i<HASHLEN; ++i ) {
            printf( "%02x", hash2[i] );
        }
        printf("\nfail\n");
    }
    else printf("ok\n");

    std::cout << "encoded password: " << encoded << std::endl;

    return encoded;

}
```
Now, when I run it I see that two diffrent hashes are generated for high level and low level. 
```
26dafa2c5bf87a7263ae77bcf1ad8bd9413ca8317e2da931ac0af84102995976
307418f3fe7f000025f4abe7aa5500001df4abe7aa550000307518f3fe7f0000
fail
encoded password: $argon2i$v=19$m=65536,t=2,p=1$sdMe5h0RTWAH+Z87Q5Tq0Q$Jtr6LFv4enJjrne88a2L2UE8qDF+LakxrAr4QQKZWXY
```
Shouldnt be the same? 

Some Linux distributions (e.g. NixOS, where this issue was spotted) don't provide an unprefixed ar when cross-compiling. This PR aims to fix this.

See [NixOS/nixpkgs#67490](https://github.com/NixOS/nixpkgs/pull/67490) for information on where did it start.
I've published an Android binding named [Argon2Kt](https://github.com/lambdapioneer/argon2kt) for Argon2 that makes it simple for Android developers to use Argon2. It emerged from a personal mobile app project.

Looking at the existing bindings I've found that the existing Java bindings don't work too well with Android - especially with the now mandatory 64-bit support. Argon2Kt can be used from both Kotlin and Java projects.

I hope adding to the listing will help other mobile developers.
This is just a detail but the [CHANGELOG.md](https://github.com/P-H-C/phc-winner-argon2/blob/20190702/CHANGELOG.md) wasn't forgotten with the last release.

https://github.com/P-H-C/phc-winner-argon2/compare/20171227...20190702
This patch automates the build process using most of the existing handcrafted Makefile.
It's now the familiar process of running:
```
./configure --prefix=/usr
make
make install
```
Using autotools allows the dynamic variables in `libargon2.pc` to be automatically substituted using detected variables. It's much easier than the current manual process.

More could be done to further integrate autotools with the current buidl system, but this patch keeps most the existing build system to keep the changes small.
None
Hi guys,

Any ideas how I can compile this for arm?

fatal error: emmintrin.h: No such file or directory
 #include <emmintrin.h>
                       ^
compilation terminated.
