@ianmoran11 Thanks again for this huge contribution. I have made it a pull request so that we can easily comment on the code.

This PR adds a new workflow for unpivoting.

1. Annotate cells as 'data'
2. Carry forward all the cells
3. Annotate cells as 'header'
4. Carry forward all the cells
5. Etc.
6. Unpivot in one go at the end.

Contrast this with the existing workflow:

1. Strip one layer of headers from an outside edge
2. Carry forward the remaining cells
3. Strip another layer of headers from the newly exposed edge
4. Carry forward the remaining cells
5. Etc.
6. The remaining cells are the 'data' cells

The new workflow allows for clever functions to guess what the annotations ought to be:

1. Automatically annotate cells as 'data' and 'header' with a clever function
2. Carry forward all the cells
3. Modify the annotations if necessary
4. Unpivot

The automatic annotation can spare the programmer from having to know in advance how many layers of headers there are.  This is useful when a file contains many tabs, each of which has different numbers of layers of headers, but arranged in a similar hierarchy.  The automatic annotator can recurse through as many layers of headers as necessary.

The annotations can be inspected graphically.  This might be easier for users to debug.

Because you must often refer to formatting to identify sets of cells, a suite of functions is provided to extract particular formats into their own columns.  This means the formats have to be available alongside the cells, hence there is an `xlsx_cells_fmt()` function, which stores the formats in an attribute.  This was always the intention for `tidyxl`, but only became possible relatively recently when `dplyr` et al began to preserve attributes.
The current unpivotr grammar starts from the point of view of data cells, and searches for associated headers.  This imitated databaker, because it is useful in the most common case (in my experience).

1. The header cells surround the data cells.
2. There are more different headers than you care to hardcode into a script

At long last, there is an example of a consistent schema that breaks (1) and doesn't suffer from (2).

* [Tweet](https://twitter.com/brookLYNevery1/status/1204207433356390400)
* [Gist](https://gist.github.com/brooke-watson/ccf3d1b1f4449ab55a72f7835a52e599) ([fork](https://gist.github.com/nacnudus/9407659f9a33f2eae60f5c7d43433d41))

## Untidy data

![image](https://user-images.githubusercontent.com/3522552/70563752-b2f21a80-1b86-11ea-84a9-312d6fe845d4.png)

## Tidy version

![image](https://user-images.githubusercontent.com/3522552/70563770-be454600-1b86-11ea-8016-7acb9ed60fb3.png)

## Thoughts

1. Locate each type of header by filtering, e.g. `character == "Species:"`. Error if not unique (see step 4 for when whole tables repeat, as in the example).
2. Describe the domain of the header over related data cells by its direction and limit, e.g. `direction = "W"` and `limit = 1` or `limit = Inf`.  Unlike the existing grammar, the direction is from the point of view of the _header_ cell, rather than the _data_ cells.
3. Given a set of headers so described, unpivotr would resolve the data cells to the matching headers.
4. If the whole table repeats, as in the example above, the same technique would apply as now -- identify a corner cell of each table, nest, and unpivot one at a time.

We're updating error messages (tidyverse/tibble#250) for the upcoming CRAN release of tibble. It would be great if you could submit this change to CRAN, too. Thanks.