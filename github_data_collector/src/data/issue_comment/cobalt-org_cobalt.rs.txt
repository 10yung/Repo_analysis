With 0.15.6, I can't close `cobalt serve` anymore. It doesn't respond to Ctrl-C, nor to SIGINT or SIGTERM, only to SIGKILL.

Here's a log file when I started the server and tried to close it, I hope it contains something useful:
https://paste.sr.ht/%7Ebrown121407/cb2fe80a60941a9dff7e40678101d770509958e6
To open a browser to the site.

See `open` crate.
For https://github.com/cobalt-org/cobalt.rs/issues/681
Before #395, we gave every page in the "pages" collection a "collections.posts" so people could generate an index.

We now have an opt-in solution with #395, so it seems like an expensive "give it to everyone" option can/should be removed.
Really, what we are calling "pagination" is auto-generating of some kind of index page with the option to paginate it.  Is there a more clear name?
We have
- Asc / Desc
- Year, Month, Day
- Tags, Categories, Dates

Should this be changed to lowercase?
Blocked on #656

The new liquid has some introspection features that will let us report what filters, tags, and blocks are supported and what parameters they take.
The html generated from markdown is exceptionally clean, with the exception of the code blocks, which have a fixed styling like this:

```
<pre style="background-color:#2b303b;">
<span style="background-color:#2b303b;color:#c0c5ce;">ans = 42;
</span></pre>
```

It would be so much better if the code blocks emitted the `<code>` tag without the fixed color syling, which would then allow us to style it using css.
# Goal
Any search engine (lunr, elasticsearch, lucene) need an index to search in.
After trying to apply https://booyaa.wtf/2017/adding-search-to-your-cobalt-site-part-one/ to my own blog, I discover that there is an offline indexation step involving `node` to call a js script.

Would be nicer to not having this dependency to get search functionality hence this RFC to generate a search index that can be serialized into various search engines format.

# Options
## JS
* [lunr](https://lunrjs.com/)
* [elasticsearch](https://www.elastic.co/)
* [elastilunr.js](https://github.com/weixsong/elasticlunr.js)

## Rust
* [Toshi](https://github.com/toshi-search/Toshi)
* [Tantivy](https://github.com/tantivy-search/tantivy)
* [lunr.rs](https://github.com/olivernn/lunr.rs)
* [elasticlunr-rs](https://github.com/mattico/elasticlunr-rs)

The Rust options don't seem mature enough. `lunr.rs` can be a base to generate a lunr index though, but it seems abandoned (few features + last commit Oct 2017). `elasticlunr-rs` is more active (last commit Nov 2018) and has pipeline implemented.

For Toshi and Tantivy, I don't know how to use them in a browser.

# Activation
In `_cobalt.yml`:
```yml
site:
  search_engine: lunr // example, can be another search engine that we support. Default value: ~ to deactivate 
```
# Internal index format

# Serialization to targeted search engine

# Original message
I don't have a clue on how to do that except using an external search engine (duckduckgo, qwant…) once is has crawled the generated web site.
It appears that #188 caused all footnotes/references in a document to be hoisted to be at the start of the description, including those not referenced in the excerpt paragraph.

This appears to not match the behaviour of Jekyll, which instead copies references to the end of the excerpt. In my case them being present in the excerpt at all is undesirable, but them being at the end feels more reasonable.

Given that this is used for the RSS feed, it doesn’t seem useful to have references, which are not linked to by the text, as the opening text in the preview.