potentially breaking change
if any issues show up, then they'll be considered regressions
should be resolved in ways which cause less traffic from js to native
# Question
 How can i use the animated API to rotate a line around an originX, originY point, just like i would do using:
```
 rotation: angle, originX: someX, originY: someY
```
where angle would be a continuously changing state to act like animation.

I have opened a more detailed question [here in SO](https://stackoverflow.com/questions/59694548/whats-the-equivalent-of-react-native-svg-rotation-with-origins-using-react-nati) , but i didn't have any luck yet.
Any help is really appreciated!
Hello there.

I've found a regression in my code after upgrade to react-native-svg@^10.0.0 from version 9.13.6. 

So basically if there is any Non SVG animated View (I'm using reanimated) located inside `<Svg></Svg>` component then I'm not able to change it's (Views) translateX and translateY value using `style={{transform: [{translateX: somthingX}, {translateY: somethingY}]}` property. 

I'm not able to provide reproducible demo right now but I will add it later (probably after January).

My code goes like:

```tsx
 // View is located inside because it's position is computed by 
 // Line's x/y position and TexInput is always centered on the line
<Svg style={StyleSheet.absoluteFill}>
  <Animated.View
    style={[
      styles.textInputContainer,
      {
        opacity: textVisible,
        transform: [{ translateX: textX }, { translateY: textY }] // this is not working
      }
    ]}
    >
    <TextInput
        ref={distanceRef} // using setNativeProps to change text...
        maxFontSizeMultiplier={0}
        editable={false}
        style={styles.textInput}
     />
  </Animated.View>
  <ALine // ALine is just Animated.createAnimatedComponent(Line)
    x1={x1}
    y1={y1}
    x2={x2}
    y2={y2}
    stroke="#fff"
    strokeDasharray={[2, 7]}
    strokeOpacity="0.5"
    strokeWidth="2"
  />
</Svg>
```

I have the same problem at the other place in my code where <Svg> is not set to be positioned absolutely and I have there statically set width/height of Svg and I'm getting same result.

Hopefully somebody encountered same issue and can help with reproducible demo.

Have a nice day and thank you so much!

# Bug

  Please provide a clear and concise description of what the bug is.
  Include screenshots if needed.
	<Svg width={w} height={h} viewBox="0, 0, 30, 50">
viewBox value is ignored and leads to an error: "Invalid `viewBox` prop:0, 0, 30, 50"
using viewBox="0 0 30 50" as described in the docs crashes the app.

Please test using the latest release of the library, as maybe said bug has been already fixed.
The latest version doesn't work with Expo at all.

## Environment info
"react-native-svg": "9.9.5",
"expo": "^35.0.0",
 "react-native": "https://github.com/expo/react-native/archive/sdk-35.0.0.tar.gz",
Testing on iOS 13.1.2
  Run `react-native info` in your terminal and copy the results here. 
command not found
# Feature Request

Hi @msand 

I just see the new release, Thanks for that. I just wanted to try the new feature, but I didn't succeed so I should misusing it.

It would be great if you add an example to `Mask` section in ReadMe.md file. 

## Why it is needed

It helps users to understand how it should be used, like the other examples.

### Code sample

here is what I tried

https://snack.expo.io/@saeedzhiany/using-native-view-with-mask

```js
import React from 'react';
import {View, Image, Text} from 'react-native';
import {
  Svg,
  G,
  Circle,
  Defs,
  LinearGradient,
  Mask,
  Rect,
  Stop,
} from 'react-native-svg';

export default () => {
  return (
    <View style={{flex: 1, justifyContent: 'center'}}>
      <Svg height="50%">
        <Defs>
          <LinearGradient
            id="Gradient"
            gradientUnits="userSpaceOnUse"
            x1="0"
            y1="0"
            x2="800"
            y2="0">
            <Stop offset="0" stopColor="white" stopOpacity="0" />
            <Stop offset="1" stopColor="white" stopOpacity="1" />
          </LinearGradient>
          <Mask
            id="Mask"
            maskUnits="userSpaceOnUse"
            x='0'
            y='0'
            width="800"
            height="300">
            <Rect x="0" y="0" width="800" height="300" fill="url(#Gradient)" />
          </Mask>
        </Defs>
        <G mask="url(#Mask)">
          <Circle x={50} y={70} r={65} />
          <G transform="translate(200, 100)">
            <Text>Some Text</Text>
          </G>
        </G>
      </Svg>
    </View>
  );
};
```
## Issue
When attempting to run the web app I got the following error.

Failed to compile.
./node_modules/react-native-svg/lib/module/ReactNativeSVG.web.js
Attempted import error: 'createElement' is not exported from 'react-native-web'.

## Workaround

modified the file:
./node_modules/react-native-svg/lib/module/ReactNativeSVG.web.js

from
```import { createElement } from `react-native-web'```
to
```import { unstable_createElement as createElement } from `react-native-web'```

## Versions
"react": "16.11.0"
"react-native": "0.61.5"
"react-native-svg": "9.13.6",
"react-native-web": "0.12.0-rc.1"

## Reference
https://github.com/necolas/react-native-web/issues/1385
# Question

Is there a way to export an SVG what has Native animations (with the animation library) to a gif file? Would rendering include animations?

Thanks!
 

My company is considering this library for our software, and we would like to know if main maintainers would consider paid support for proactive bug fixing ? 
Details of course are to be defined.
# Bug

Press events are not fired on Android devices if the SVG element pressed is further away than the device's window (even if visible when rendered).

## Environment info

Library version: 9.13.6

## Steps To Reproduce

1. Create an SVG that is larger than the device's window size and place a circle outside the device's window size (but inside the SVG). Add a press event to the circle.
2. Launch it on Android
3. Test to see if the circle react to onPress. 

See snack further down.

**Describe what you expected to happen:**
I would expect all components to behave the same since they are identical, i.e. I would expect the press events to work no matter what coordinates are used.

## Reproducible sample code

https://snack.expo.io/@insats/android-svg-bug (number 8 does not react to press events)
# Feature: filter, feFlood and feBlend

Hi there, 

I am writting here because I need these features. 
I want to do these, but I would like to be introduced. I don't know the procedures for doing this.
Any help is very useful to me.