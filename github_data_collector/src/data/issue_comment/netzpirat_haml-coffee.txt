The following examples are both rendering wrong:

``` haml
%ul
  / Breaks because of asterisk (*)
  %li(*ngFor="#i in [1,2,3]")
    This is tag number {{i}}.
```

``` haml
/ non-ascii characters
%my-t√°g
```

It's a generally good practice to throw `Error` objects instead of strings because they have an attached stack trace and wrapping tools can add additional information on the object which you can't do on a string.

To my surprise, it does not. The HAML way to run code at compile time is to start a line with a dash.

I'm running into an issue with haml-coffee where any file I prefix with `_` seems to be missing. 

In my old version of hamlc, I would prefix partials in convention of Rails with a `_filename.hamlc`. After upgrading, this convention no longer works.

Anyone know why this might be?

Similar to [HAML attribute method](https://github.com/haml/haml/blob/master/REFERENCE.md#attribute-methods)

 I'm currently running into a case where I want to do something like this but it isn't supported by haml-coffee:

``` haml
%button{data: @model.dataAttributes()}
```

or

``` haml
%button{@attributes()}
```

@netzpirat [mentioned this](https://github.com/netzpirat/haml-coffee/issues/57#issuecomment-14221888) in #57 but I didn't see an issue tracking it.

I, together with @sebastiandeutsch were the first committers on the project, before handing it over to Michael (@netzpirat).

I have just learned that Michael has [passed away in the beginning of April](https://groups.google.com/forum/?utm_source=rubyweekly&utm_medium=email#!msg/guard-dev/2Td0QTvTIsE/cegvVofIJ8AJ). I'm putting up this issue to bring this to the attention of HAML-Coffee users.

This also means that haml-coffee needs a new maintainer. Unfortunately my free time doesn't allow for maintenance of this project in the extent Michael worked on HAML-Coffee.

:(

The +include directive was working for global placement but not for standalone placement.  The only way you could use +include with standalone was to specify an absolute path to the template (which isn't so useful). This commit makes the file loading relative to the template initiating the directive.  I also added a test.

At the moment, when I compile a template using haml-coffee I get a global leak of `CoffeeScript`.

This works:

```
%foo(bar baz)
```

```
<foo bar baz></foo>
```

This also works:

```
%foo(bar=""
     baz="")
```

```
<foo bar='' baz=''></foo>
```

This, however, doesn't:

```
%foo(bar
     baz="")
```

```
  #{ red }[haml coffee] CoffeeScript compilation error:#{ reset } SyntaxError: unexpected STRING
SyntaxError: unexpected STRING
  at Object.exports.throwSyntaxError (/Users/jan/development/haml-coffee/node_modules/coffee-script/lib/coffee-script/helpers.js:209:13)
  at Object.parser.yy.parseError (/Users/jan/development/haml-coffee/node_modules/coffee-script/lib/coffee-script/coffee-script.js:245:20)
  at Object.parse (/Users/jan/development/haml-coffee/node_modules/coffee-script/lib/coffee-script/parser.js:535:22)
  at Object.exports.compile.compile [as compile] (/Users/jan/development/haml-coffee/node_modules/coffee-script/lib/coffee-script/coffee-script.js:36:25)
  at Function.module.exports.CoffeeMaker.compile (/Users/jan/development/haml-coffee/src/cli/coffee-maker.coffee:96:31)
  at ReadStream.exports.run (/Users/jan/development/haml-coffee/src/cli/command.coffee:198:49)
  at ReadStream.EventEmitter.emit (events.js:93:17)
  at TTY.onread (net.js:417:51)
```
