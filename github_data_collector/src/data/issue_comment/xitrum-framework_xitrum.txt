Compressing data before encrypting it gives information away about what is encrypted if the end user has control over what is encrypted. Through trial and error you could effectively decrypt the contents.

See:
* https://en.wikipedia.org/wiki/CRIME
* https://en.wikipedia.org/wiki/BREACH
https://expressjs.com/en/advanced/best-practice-security.html
Update scala version to 2.13.1 so we can use latest features.

https://www.scala-lang.org/news/2.13.1
https://www.scala-lang.org/news/2.13.0
@ngocdaothanh 
Thanks #656 and it enabled to prevent single big file request.
But there are some vulnerability.
I want to allow user to upload big file and prevent evil request.
Is there any way to protect service from those evil scenario?

- Evil Scenario 1:
Many requests less than `maxSizeInMB` at same time.

xitrum.conf
```
request {
    maxSizeInMB = 1024
    maxSizeInKBOfUploadMem = 16
  }
```

Using not `isAPPLICATION_X_WWW_FORM_URLENCODED_or_MULTIPART_FORM_DATA` header with less than 1024MB body at **same time**.

```
cmd="printf \"ttt=%01000000000d\" 0 | curl -X POST http://localhost:8000/xxx -H \"Content-Type: application/xml\" -d @-"
 bash -c $cmd & bash -c $cmd & bash -c $cmd & bash -c $cmd & bash -c $cmd & bash -c $cmd & bash -c $cmd & bash -c $cmd &
...
```

- Evil Scenario 2:
Too many small file less than `maxSizeInKBOfUploadMem` in one request.

xitrum.conf(Unrealistic value to make it easier to reproduce)
```
request {
    maxSizeInMB = 10240
    maxSizeInKBOfUploadMem = 1024000
  }
```

```
curl -X POST http://localhost:8000 -F "1=@tmp.dat" -F "2=@tmp.dat" -F "3=@tmp.dat" -F "4=@tmp.dat" -F "5=@tmp.dat" -F "6=@tmp.dat" -F "7=@tmp.dat" -F "8=@tmp.dat" -F "9=@tmp.dat" -F "10=@tmp.dat"
```




This patch allows to document JSON models from case classes with Swagger like this example:

```scala
package quickstart.action

import java.util.Date

import xitrum.FutureAction
import xitrum.annotation.{POST, Swagger}
import xitrum.util.SeriDeseri

@POST("api/test")
@Swagger(
	Swagger.JsonBody("request", "This is request model", Test.RequestType),
	Swagger.Response(200, "Success", Some(Test.ResponseType)),
	Swagger.Response(201, "Success", Some(Test.ResponseArrayType)),
	Swagger.Response(404, "Not found")
)
class Test extends FutureAction {
	override def execute(): Unit = {
		SeriDeseri.fromJValue[Test.Request](requestContentJValue) match {
			case Some(req) => // do something useful
			case None => // reply 404 or something
		}
	}
}

object Test {

	case class Sub(subValue: Option[Int])

	case class Response(value: String, sub: Sub)

	case class Request(integer: Int,
	                   long: Long,
	                   float: Float,
	                   double: Double,
	                   string: String,
	                   boolean: Boolean,
	                   dateTime: Date,
	                   optional: Option[String],
	                   list: List[String],
	                   seq: Seq[Sub],
	                   obj: Sub
	                  )

	val RequestType = Swagger.arrayOf[Request]
	val ResponseType = Swagger.valueOf[Response]
	val ResponseArrayType = Swagger.arrayOf[Response]
}
```

And this code will produce following swagger.json
```json
{
  "swagger" : "2.0",
  "info" : {
    "title" : "APIs documented by Swagger",
    "version" : "1.0-SNAPSHOT"
  },
  "basePath" : "/",
  "paths" : {
    "/api/test" : {
      "post" : {
        "operationId" : "test",
        "parameters" : [ {
          "name" : "request",
          "in" : "body",
          "description" : "This is request model",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Test.Request"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Test.Response"
            }
          },
          "201" : {
            "description" : "Success",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Test.Response"
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    }
  },
  "definitions" : {
    "Test.Request" : {
      "type" : "object",
      "properties" : {
        "integer" : {
          "type" : "integer",
          "format" : "int32"
        },
        "long" : {
          "type" : "integer",
          "format" : "int64"
        },
        "float" : {
          "type" : "number",
          "format" : "float"
        },
        "double" : {
          "type" : "number",
          "format" : "double"
        },
        "string" : {
          "type" : "string",
          "format" : ""
        },
        "boolean" : {
          "type" : "boolean",
          "format" : ""
        },
        "dateTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "optional" : {
          "type" : "string",
          "format" : ""
        },
        "list" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : ""
          }
        },
        "seq" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Test.Sub"
          }
        },
        "obj" : {
          "$ref" : "#/definitions/Test.Sub"
        }
      },
      "required" : [ "integer", "long", "float", "double", "string", "boolean", "dateTime", "list", "seq", "obj" ]
    },
    "Test.Sub" : {
      "type" : "object",
      "properties" : {
        "subValue" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "Test.Response" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string",
          "format" : ""
        },
        "sub" : {
          "$ref" : "#/definitions/Test.Sub"
        }
      },
      "required" : [ "value", "sub" ]
    }
  }
}
```

You may want to load that json to [Swagger Online Editor](http://editor.swagger.io/) to check how the documentation looks like.

This patch supports simple case classes as models (not sure about inheritance and other advanced features), `Seq`, `List`, `Set` as array types, `Option` for non-mandatory fields.
Hello! I use micro-services, and MessageQueue for interservice communication. So on end-point service I have deserialized FullHttpRequest instance from queue and requsted url. is there any possibillity in xitrum to handle my http request directly with action or something else? 


For example, I would like to be able to see which data gets passed to Scalate view through "at" variable during my unit and integration tests. This way I want to make sure that the logic is 100% solid.

This feature may be implemented in a separate project, like xitrum-test.

Why this is a good feature to have?
- This is for convenience, so that we don't have to install additional reverse proxies like Nginx, HAProxy etc. 
- We usually use those for (1) reverse proxy and (2) static file serving. Xitrum is already good at (2), adding (1) will make Xitrum more complete.

Example:
Site X is written with Xitrum. It also needs to integrate [Discourse](https://github.com/discourse/discourse). With this reverse proxy feature, we can mount Discourse at `/forum` of site X.

For now, we don't support request and response interception.

In the future, we can:
- Allow code to intercept requests and responses to modify (headers etc.) or extract info.
- Add `respondProxy` for actions.

How to implement?
- https://github.com/netty/netty/tree/4.1/example/src/main/java/io/netty/example/proxy
- For performance, we avoid parsing as much as possible. Probably we only need to (1) look at the first request line to know the URL and (2) inject proxy info headers to the request. We don't modify responses, just send them as-is.

Headers to set:
- https://httpd.apache.org/docs/current/mod/mod_proxy.html#proxyaddheaders
- https://www.nginx.com/resources/admin-guide/reverse-proxy/

Use this task to drive #561 Add plugin architecture.
https://github.com/xitrum-framework/xitrum-metrics
