The motivating use case for this in our codebase is to switch [Sorbet](https://sorbet.org/) `sig` declarations from `do...end` to `{...}`:

Syntax highlight for do/end on type signatures are distracting:
![image](https://user-images.githubusercontent.com/1289501/72665849-f9326900-39d1-11ea-9dff-07adc9754ec8.png)

Braces are less distracting:
![image](https://user-images.githubusercontent.com/1289501/72665853-04859480-39d2-11ea-80b9-7686ca8e2697.png)

Currently the first is enforced by `line_count_based`, which we want for all other methods.

-----------------

Before submitting the PR make sure the following are checked:

* [x] Wrote [good commit messages][1].
* [ ] Commit message starts with `[Fix #issue-number]` (if the related issue exists).
* [x] Feature branch is up-to-date with `master` (if not - rebase it).
* [x] Squashed related commits together.
* [x] Added tests.
* [x] Added an entry to the [Changelog](https://github.com/rubocop-hq/rubocop/blob/master/CHANGELOG.md) if the new code introduces user-observable changes. See [changelog entry format](https://github.com/rubocop-hq/rubocop/blob/master/CONTRIBUTING.md#changelog-entry-format).
* [x] The PR relates to *only* one subject with a clear title and description in grammatically correct, complete sentences.
* [x] Run `bundle exec rake default`. It executes all tests and RuboCop for itself, and generates the documentation.

[1]: https://chris.beams.io/posts/git-commit/

Shortens long lines by inserting a line break into blocks like this:

```rb
# original
foo.bar { |baz| batbatbatbatbatbatbatbat(baz) }

# auto-corrected after this PR
foo.bar { |baz|
batbatbatbatbatbatbatbat(baz) }

# auto-corrected after other block alignment cops run
# (just one example -- final output depends on config)
foo.bar do |baz|
  batbatbatbatbatbatbatbat(baz)
end
```

-----------------

Before submitting the PR make sure the following are checked:

* [x] Wrote [good commit messages][1].
* [ ] Commit message starts with `[Fix #issue-number]` (if the related issue exists).
* [x] Feature branch is up-to-date with `master` (if not - rebase it).
* [x] Squashed related commits together.
* [x] Added tests.
* [x] Added an entry to the [Changelog](https://github.com/rubocop-hq/rubocop/blob/master/CHANGELOG.md) if the new code introduces user-observable changes. See [changelog entry format](https://github.com/rubocop-hq/rubocop/blob/master/CONTRIBUTING.md#changelog-entry-format).
* [x] The PR relates to *only* one subject with a clear title and description in grammatically correct, complete sentences.
* [x] Run `bundle exec rake default`. It executes all tests and RuboCop for itself, and generates the documentation.

[1]: https://chris.beams.io/posts/git-commit/

## Tension

Hello ðŸ‘‹

We have `with_fixed_indentation` option for `Layout/ArgumentAlignment` and `Layout/ParameterAlignment`. So we can write our code this way:
```ruby
foo :bar,
  :baz
```
```ruby
method_call(a,
  b)
```

And we in our company decided to use this style (with `with_fixed_indentation`) for all alignments. But we can't use this this option for `Layout/ArrayAlignment` because it doesn't support this flag.

We want to write multi-line arrays in this style:
```ruby
array = [a,
  b]
```
in order to have the same style of code in whole project in all cases.

## Changes

I've used these cops as examples:
- https://github.com/rubocop-hq/rubocop/blob/master/lib/rubocop/cop/layout/argument_alignment.rb
- https://github.com/rubocop-hq/rubocop/blob/master/lib/rubocop/cop/layout/parameter_alignment.rb

Extended exciting `Layout/ArrayAlignment`. So now it supports `with_fixed_indentation`.

## Tests

- I took the old tests.
- Moved them to `context 'when aligned with first parameter'` (when `with_first_parameter`)
- Created `context 'when aligned with fixed indentation'` (when `with_fixed_indentation`) and wrote the same tests as for `with_first_parameter`.
- Added tests with case when the first element on the new line to both contexts.
Ex. it is okay for both options:
```ruby
array = [
  a,
  b,
  c,
  d
]
```

## Basic Checklist
Before submitting the PR make sure the following are checked:

* [x] Wrote [good commit messages][1].
* [x] Commit message starts with `[Fix #issue-number]` (if the related issue exists).
* [x] Feature branch is up-to-date with `master` (if not - rebase it).
* [x] Squashed related commits together.
* [x] Added tests.
* [x] Added an entry to the [Changelog](https://github.com/rubocop-hq/rubocop/blob/master/CHANGELOG.md) if the new code introduces user-observable changes. See [changelog entry format](https://github.com/rubocop-hq/rubocop/blob/master/CONTRIBUTING.md#changelog-entry-format).
* [x] The PR relates to *only* one subject with a clear title and description in grammatically correct, complete sentences.
* [x] Run `bundle exec rake default`. It executes all tests and RuboCop for itself, and generates the documentation.

[1]: https://chris.beams.io/posts/git-commit/

I came across this while cleaning up tests. We have made similar changes to this in the past. The extra context makes it a little easier to quickly identify which method contains the offense.
Fixes #7655.

This PR fixes the following error when processing a regexp with a line break at the start of capture parenthesis.

```console
% cat examle.rb
/(
  pattern
)/ =~ string

% bundle exec rubocop -d
(snip)

An error occurred while VariableForce cop was inspecting
/Users/koic/src/github.com/koic/rubocop-issues/7655/examle.rb.
end pattern with unmatched parenthesis: /(
/
/Users/koic/src/github.com/rubocop-hq/rubocop/lib/rubocop/cop/variable_force.rb:194:in
`initialize'
/Users/koic/src/github.com/rubocop-hq/rubocop/lib/rubocop/cop/variable_force.rb:194:in
`new'
/Users/koic/src/github.com/rubocop-hq/rubocop/lib/rubocop/cop/variable_force.rb:194:in
`regexp_captured_names'
/Users/koic/src/github.com/rubocop-hq/rubocop/lib/rubocop/cop/variable_force.rb:174:in
`process_regexp_named_captures'
/Users/koic/src/github.com/rubocop-hq/rubocop/lib/rubocop/cop/variable_force.rb:86:in
`process_node'
/Users/koic/src/github.com/rubocop-hq/rubocop/lib/rubocop/cop/variable_force.rb:80:in `investigate'
```

-----------------

Before submitting the PR make sure the following are checked:

* [x] Wrote [good commit messages][1].
* [x] Commit message starts with `[Fix #issue-number]` (if the related issue exists).
* [x] Feature branch is up-to-date with `master` (if not - rebase it).
* [x] Squashed related commits together.
* [x] Added tests.
* [x] Added an entry to the [Changelog](https://github.com/rubocop-hq/rubocop/blob/master/CHANGELOG.md) if the new code introduces user-observable changes. See [changelog entry format](https://github.com/rubocop-hq/rubocop/blob/master/CONTRIBUTING.md#changelog-entry-format).
* [x] The PR relates to *only* one subject with a clear title and description in grammatically correct, complete sentences.
* [x] Run `bundle exec rake default`. It executes all tests and RuboCop for itself, and generates the documentation.

[1]: https://chris.beams.io/posts/git-commit/

Error occurs with code below:

``` ruby
/(?:
  blah
)/x =~ blah
```

Works:

``` ruby
/(?:single_line)/ =~ blah
```

``` ruby
/
  no_capture
/x =~ blah
```

--------

## Expected behavior

No errors.

## Actual behavior

An error occurred while VariableForce cop

## Steps to reproduce the problem

```
$ ruby -vc test.rb
ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-linux]
Syntax OK
```
```
$ bundle exec rubocop test.rb
For .../test/rubocop: configuration from .../test/rubocop/.rubocop.yml
Default configuration from .../gems/rubocop-0.79.0/config/default.yml
Inspecting 1 file
Scanning .../test/rubocop/test.rb
An error occurred while VariableForce cop was inspecting .../test/rubocop/test.rb.
end pattern with unmatched parenthesis: /(?:
/
.../gems/rubocop-0.79.0/lib/rubocop/cop/variable_force.rb:194:in `initialize'
.../gems/rubocop-0.79.0/lib/rubocop/cop/variable_force.rb:194:in `new'
.../gems/rubocop-0.79.0/lib/rubocop/cop/variable_force.rb:194:in `regexp_captured_names'
.../gems/rubocop-0.79.0/lib/rubocop/cop/variable_force.rb:174:in `process_regexp_named_captures'
.../gems/rubocop-0.79.0/lib/rubocop/cop/variable_force.rb:86:in `process_node'
.../gems/rubocop-0.79.0/lib/rubocop/cop/variable_force.rb:103:in `block in process_children'
.../gems/rubocop-0.79.0/lib/rubocop/ast/node.rb:193:in `block in each_child_node'
.../gems/rubocop-0.79.0/lib/rubocop/ast/node.rb:190:in `each'
.../gems/rubocop-0.79.0/lib/rubocop/ast/node.rb:190:in `each_child_node'
.../gems/rubocop-0.79.0/lib/rubocop/cop/variable_force.rb:100:in `process_children'
.../gems/rubocop-0.79.0/lib/rubocop/cop/variable_force.rb:87:in `process_node'
.../gems/rubocop-0.79.0/lib/rubocop/cop/variable_force.rb:80:in `investigate'
.../gems/rubocop-0.79.0/lib/rubocop/cop/commissioner.rb:108:in `block (2 levels) in invoke_custom_processing'
.../gems/rubocop-0.79.0/lib/rubocop/cop/commissioner.rb:136:in `with_cop_error_handling'
.../gems/rubocop-0.79.0/lib/rubocop/cop/commissioner.rb:107:in `block in invoke_custom_processing'
.../gems/rubocop-0.79.0/lib/rubocop/cop/commissioner.rb:104:in `each'
.../gems/rubocop-0.79.0/lib/rubocop/cop/commissioner.rb:104:in `invoke_custom_processing'
.../gems/rubocop-0.79.0/lib/rubocop/cop/commissioner.rb:43:in `investigate'
.../gems/rubocop-0.79.0/lib/rubocop/cop/team.rb:124:in `investigate'
.../gems/rubocop-0.79.0/lib/rubocop/cop/team.rb:112:in `offenses'
.../gems/rubocop-0.79.0/lib/rubocop/cop/team.rb:44:in `inspect_file'
.../gems/rubocop-0.79.0/lib/rubocop/runner.rb:296:in `inspect_file'
.../gems/rubocop-0.79.0/lib/rubocop/runner.rb:244:in `block in do_inspection_loop'
.../gems/rubocop-0.79.0/lib/rubocop/runner.rb:276:in `block in iterate_until_no_changes'
.../gems/rubocop-0.79.0/lib/rubocop/runner.rb:269:in `loop'
.../gems/rubocop-0.79.0/lib/rubocop/runner.rb:269:in `iterate_until_no_changes'
.../gems/rubocop-0.79.0/lib/rubocop/runner.rb:240:in `do_inspection_loop'
.../gems/rubocop-0.79.0/lib/rubocop/runner.rb:119:in `block in file_offenses'
.../gems/rubocop-0.79.0/lib/rubocop/runner.rb:143:in `file_offense_cache'
.../gems/rubocop-0.79.0/lib/rubocop/runner.rb:117:in `file_offenses'
.../gems/rubocop-0.79.0/lib/rubocop/runner.rb:108:in `process_file'
(snip)
.

1 file inspected, no offenses detected

1 error occurred:
An error occurred while VariableForce cop was inspecting .../test/rubocop/test.rb.
Errors are usually caused by RuboCop bugs.
Please, report your problems to RuboCop's issue tracker.
https://github.com/rubocop-hq/rubocop/issues

Mention the following information in the issue report:
0.79.0 (using Parser 2.7.0.2, running on ruby 2.6.5 x86_64-linux)
Finished in 0.10937485797330737 seconds
```

## RuboCop version

```
$ [bundle exec] rubocop -V
0.79.0 (using Parser 2.7.0.2, running on ruby 2.6.5 x86_64-linux)
```

## Is your feature request related to a problem? Please describe.

We in our company decided to use `Layout/ArgumentAlignment` and `Layout/ParameterAlignment` with `with_fixed_indentation`. Also we would like to use this flag for `Layout/ArrayAlignment` too, but this cop doesn't support `with_fixed_indentation`.

## Describe the solution you'd like

I think it would be cool to add `with_fixed_indentation` flag for `Layout/ArrayAlignment` as for `Layout/ArgumentAlignment` and `Layout/ParameterAlignment`.

## Describe alternatives you've considered

I don't see any  alternatives

## Additional context

We would like to write arrays this way:
```ruby
array = [1, 2, 3,
  4, 5, 6]
```

## Is your feature request related to a problem? Please describe.
On a large internal codebase, it's not possible to gradually move all developers between versions of Rubocop without getting `Warning: unrecognized cop` on renamed cops used in `.rubocop.yml` files.

e.g. `Layout/IndentHash` was renamed to `Layout/IndentFirstHashElement`.
The obvious solution for `.rubocop.yml` to contain BOTH blocks at once:
```
Layout/IndentHash:
  Enabled: false
Layout/IndentFirstHashElement:
  Enabled: false
```

- Any early upgraders will get the renamed cop warning
- Any late upgraders will get `Warning: unrecognized cop`

## Describe the solution you'd like
Provide a configurable way to temporarily suppress the warnings for certain obsolete or unrecognized cops.
```
SuppressObsoleteCop:
- (list of obsolete cops to NOT give warnings for)
SuppressUnrecognizedCop:
- (list of unrecognized cops to NOT give warnings for)
```

I realize that everybody will have to upgrade to a new enough rubocop that has this suppression feature first, but hopefully it will reduce future cases of obsolete cop in the meantime.

## Alternate solutions
1. Ways to mark parts of the config to be used in certain versions of Rubocop only.
- This is probably going to end up much too complex, and old versions of Rubocop might break anyway on it.
2. Accept obsolete names transparently and run the check by the new name name. This provides maximum compatibility with old versions. This only works for straight rename of Cops, and not other changes to the Cops.
`pp` is standard parameter name for `PrettyPrint`



-----------------

Before submitting the PR make sure the following are checked:

* [x] Wrote [good commit messages][1].
* [ ] Commit message starts with `[Fix #issue-number]` (if the related issue exists).
* [ ] Feature branch is up-to-date with `master` (if not - rebase it).
* [ ] Squashed related commits together.
* [ ] Added tests.
* [ ] Added an entry to the [Changelog](https://github.com/rubocop-hq/rubocop/blob/master/CHANGELOG.md) if the new code introduces user-observable changes. See [changelog entry format](https://github.com/rubocop-hq/rubocop/blob/master/CONTRIBUTING.md#changelog-entry-format).
* [ ] The PR relates to *only* one subject with a clear title and description in grammatically correct, complete sentences.
* [ ] Run `bundle exec rake default`. It executes all tests and RuboCop for itself, and generates the documentation.

[1]: https://chris.beams.io/posts/git-commit/
Given the following example, Rubocop's `Style/IdenticalConditionalBranches` flags that the repeated statement should be hoisted out of the conditional. But to do so would change the logic of the program.

```ruby
# frozen_string_literal: true

class SideEffectClass
  attr_reader :animal

  def should_do_something?
    @animal = rand(100) > 50 ? 'Dog' : 'Cat'
    rand(100) > 50
  end
end

side_effect = SideEffectClass.new

if side_effect.should_do_something?
  animal = side_effect.animal
  puts "#{animal} should do something."
else
  animal = side_effect.animal
  puts "#{animal} should not do something."
end
```

--------

## Expected behavior

Rubocop should not flag this code.

## Actual behavior

```
rubocop .
Inspecting 1 file
C

Offenses:

error.rb:3:1: C: Style/Documentation: Missing top-level class documentation comment.
class SideEffectClass
^^^^^
error.rb:15:3: C: Style/IdenticalConditionalBranches: Move animal = side_effect.animal out of the conditional.
  animal = side_effect.animal
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
error.rb:18:3: C: Style/IdenticalConditionalBranches: Move animal = side_effect.animal out of the conditional.
  animal = side_effect.animal
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^

1 file inspected, 3 offenses detected
```

## Steps to reproduce the problem

See above

## RuboCop version

```
$ rubocop -v
0.79.0
```
