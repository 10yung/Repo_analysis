```
Meteor.methods
  sampleMethod: () ->
       return "test"
````

I want to be able to have sampleMethod show up either in the methods list, or be able to make it show up in the file, under files list.

Have tried adding tags but it doesnt seem to detect it within the object list..
I'm getting this fun stacktrace when I run codo on travis, but the same config works fine on my machine, so I presume there's an environment-related issue here but I can't guess what it might be; any ideas?

```bash
$ codo --name "imjs"
Cannot generate documentation: Callback must be a function
TypeError [ERR_INVALID_CALLBACK]: Callback must be a function
  at maybeCallback (fs.js:129:9)
  at exists (fs.js:197:3)
  at module.exports.Codo.detectName (/home/travis/build/yochannah/imjs/node_modules/codo/src/codo.coffee:272:8)
  at /home/travis/build/yochannah/imjs/node_modules/async/dist/async.js:3853:24
  at replenish (/home/travis/build/yochannah/imjs/node_modules/async/dist/async.js:946:17)
  at /home/travis/build/yochannah/imjs/node_modules/async/dist/async.js:950:9
  at eachOfLimit (/home/travis/build/yochannah/imjs/node_modules/async/dist/async.js:975:24)
  at /home/travis/build/yochannah/imjs/node_modules/async/dist/async.js:980:16
  at eachOf (/home/travis/build/yochannah/imjs/node_modules/async/dist/async.js:1051:5)
  at _parallel (/home/travis/build/yochannah/imjs/node_modules/async/dist/async.js:3852:5)
  at Object.parallelLimit [as parallel] (/home/travis/build/yochannah/imjs/node_modules/async/dist/async.js:3935:5)
  at Function.module.exports.Codo.run (/home/travis/build/yochannah/imjs/node_modules/codo/src/codo.coffee:69:13)
  at Object.<anonymous> (/home/travis/build/yochannah/imjs/node_modules/codo/bin/codo:2:28)
  at Object.<anonymous> (/home/travis/build/yochannah/imjs/node_modules/codo/bin/codo:4:4)
  at Module._compile (internal/modules/cjs/loader.js:689:30)
  at Object.exports.run (/home/travis/build/yochannah/imjs/node_modules/coffee-script/lib/coffee-script/coffee-script.js:119:23)
  at compileScript (/home/travis/build/yochannah/imjs/node_modules/coffee-script/lib/coffee-script/command.js:208:29)
  at compilePath (/home/travis/build/yochannah/imjs/node_modules/coffee-script/lib/coffee-script/command.js:161:14)
  at Object.exports.run (/home/travis/build/yochannah/imjs/node_modules/coffee-script/lib/coffee-script/command.js:96:21)
  at Object.<anonymous> (/home/travis/build/yochannah/imjs/node_modules/coffee-script/bin/coffee:7:41)
  at Module._compile (internal/modules/cjs/loader.js:689:30)
  at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
  at Module.load (internal/modules/cjs/loader.js:599:32)
  at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
  at Function.Module._load (internal/modules/cjs/loader.js:530:3)
  at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)
  at startup (internal/bootstrap/node.js:283:19)
  at bootstrapNodeJSCore (internal/bootstrap/node.js:743:3)
The command "codo --name "imjs"" exited with 1.
```


Link to build results: https://travis-ci.org/yochannah/imjs/jobs/500286141#L4059
Link to repo codoopts file: https://github.com/yochannah/imjs/blob/91bc39e33058607d9acc621894ed7a062f6ebd65/.codoopts
It looks like you updated the winston version in package.json but you never tagged a new release - could you bump to `2.1.3` ?  The older version of winston requires an outdated version of hawk (0.10.2), which isn't marked as compatible with modern node engines.  It causes errors if you're trying to use yarn instead of npm (e.g. you have to pass in `--ignore-engines`).
It can't find files in `parseProject` because the path is not used.

As a workaround I call `process.chdir path` before calling `codoCLI.generate path, ...`
I had to dig in the source to figure out how to pass arguments that are not options.
An example from my code:

```coffee-script
    # Loads objects that are visible from any point of view, returns a promise
    # @option options fetch_textures [boolean] Whether to fetch textures when they're not loaded already.
    # @option options texture_size_ratio [number] Quality of textures specified in ratio of number of pixels.
    # @option options max_mesh_lod [number] Quality of meshes specified in LoD polycount ratio.
    # @return [Promise]
    load_visible_objects: (options) ->
        visible_objects = for ob in @children when ob.visible then ob
        return fetch_objects(visible_objects, options).then(=>this)
```

Option lines are way too long, trip the linter and more importantly, they're difficult to read since the rest of the code now fit in 80 columns. I picked a random example with relatively short descriptions, there are instances where I need to explain much more. In those cases I explain in the function body and then in the parameter/option I say "see above" or something, which is ugly.

Examples of what I'd like codo to support:

```coffee-script
    # @option options texture_size_ratio [number]
    #         Quality of textures specified in ratio of number of pixels.
```

```coffee-script
    # @option options texture_size_ratio [number] Quality of textures specified 
    #                                             in ratio of number of pixels.
```

I ran into a bug when trying to run `codo` with the `--debug` flag -- it seems the logging library used is not required in at least one file, namely here: https://github.com/coffeedoc/codo/blob/master/lib/entities/extra.coffee
I got this error message by trying parsing my code. I have got no idea why it doesn't work not anymore (I know it's a really bad error description. Sorry about that.):

node_modules/codo/lib/entities/class.coffee:144
      for (i = 0, len = ref.length; i < len; i++) {
                           ^

TypeError: Cannot read property 'length' of undefined
  at Class.module.exports.Entities.Class.Class.linkifyValue (/usr/local/lib/node_modules/codo/lib/entities/class.coffee:105:5)
  at Class.module.exports.Entities.Class.Class.linkify (/usr/local/lib/node_modules/codo/lib/entities/class.coffee:82:10)
  at Environment.module.exports.Environment.linkify (/usr/local/lib/node_modules/codo/lib/environment.coffee:130:12)
  at Object.module.exports.Codo.parseProject (/usr/local/lib/node_modules/codo/lib/codo.coffee:56:17)
  at Command.module.exports.Command.generate (/usr/local/lib/node_modules/codo/lib/command.coffee:118:24)
  at Command.module.exports.Command.run (/usr/local/lib/node_modules/codo/lib/command.coffee:87:8)
  at Function.module.exports.Command.run (/usr/local/lib/node_modules/codo/lib/command.coffee:27:13)
  at Object.<anonymous> (/usr/local/lib/node_modules/codo/bin/codo:14:19)
  at Module._compile (module.js:410:26)
  at Object.Module._extensions..js (module.js:417:10)
  at Module.load (module.js:344:32)
  at Function.Module._load (module.js:301:12)
  at Function.Module.runMain (module.js:442:10)
  at startup (node.js:136:18)
  at node.js:966:3

Coffeescript [allows multiline strings](http://coffeescript.org/#strings). The codo parser throws an error if the source contains a multiline string with interpolation.

```
class Test
  constructor: (a, b) ->
    @thing = "#{a} >
      #{b}"
```
Gives the error:
```
error: Cannot parse Coffee file Test.coffee: missing "
```
The same code passes through the CoffeeScript compiler (and coffeelint) without error.
I have quite few markdown files that I am passing as extras. Few of these are guides - I will like to provide links to specific methods or classes from these guides.

Currently I am using relative paths that is generated by codo, like:

```
[Stomp.over](../../mixin/Stomp.html#over-)
```

Is there a better way to write this?