您好，谢谢您的项目
我想用类似一下的格式 ws://localhost:8090/data/000001.XSHE,  其中，data/000001.XSHE 作为参数。
请问是否支持PATHPARAM，或者在程序中读取到  data/000001.XSHE 这个值。

服务器监听代码为:
`IO(UHttp) ! Http.Bind(server, "localhost", 8090)`
客户端代码为：

```
var wsUri = "ws://localhost:8090/data/000001.XSHE";
websocket = new WebSocket(wsUri);
```

再次感谢！


Great library, thank you.

I need the ability to, from an outside source (perhaps HTTP, or some RPC call), given an ID that matches with the session, send a message to the WebSocketServerWorker actor. This is quite similar to this issue: https://github.com/wandoulabs/spray-websocket/issues/62

I see two obvious ways of accomplishing this:
1. Upon connection, when the HttpRequest comes in, we disect the request, perform auth etc, and create the actor with it's name set to whatever session ID we decide. We could then lookup an actor via it's path, and send it messages. This has proved impossible so far. Here is my sample code:

``` scala
class WebSocketHttpServer extends Actor with ActorLogging {
  def receive = {
    case Http.Connected(remoteAddress, localAddress) => {
      val conn = context.actorOf(Props(classOf[WebSocketSessionWorker], client))
      sender ! Http.Register(conn)
    }
  }
```

which I modified to become:

``` scala
class WebSocketHttpServer extends Actor with ActorLogging {
  def receive = {
    case request: HttpRequest =>
      val client = sender
      // disect the request and create a session ID we can associate with
      val conn = context.actorOf(Props(classOf[WebSocketSessionWorker], client), name = "ABC")
      conn ! request

    case Http.Connected(remoteAddress, localAddress) => {
      self ! Http.Register(self)
    }
  }
```

The issue is that when the request is forwarded to the WebSocketSessionWorker, when it [executes the Handshake](https://github.com/wandoulabs/spray-websocket/blob/b6d4db73fc547a0f980199d0122970c09ec0fc3e/spray-websocket/src/main/scala/spray/can/websocket/WebSocketServerWorker.scala#L33), it sends the UpgradeServer message BACK to the WebSocketHttpServer, not the WebSocketSessionWorker. Not sure why. Gave up.

Edit: I have solved this issue. i didn't know about the `forward` method on ActorRefs. Retains the sender reference correctly.
1. The second approach would be to construct WebSocketSessionWorker's with some sort of ActorCommunication actor, that it then registers with (and inside this ActorCommunication actor). Communication would then go through this actor, as it would maintain state around all WebSocket sessions currently going on.
   
   Thoughts?

I want to respond to a PingFrame manually. The current implementation auto responds with a PongFrame. I'd like to respond with extra status information. At the moment, I can achieve this just using my own case classes wrapped around TextFrames.

https://github.com/smootoo/simple-spray-websockets/blob/1bc54f0e7ae681c4e11628094d097de24995014e/src/main/scala/spray/can/websocket/WebSocketFrontend.scala#L64

Please, consider the following scenario:
- users could decide to create their ActorSystem passing a Config object different than the application.conf simply because Akka allows it:

``` scala
implicit val system = ActorSystem("mySystem", ConfigFactory.load("mySystem.conf"))
```
- spray-websocket package object is actually loading the default application.conf file regardless the above decision and without considering the ActorySystem could have been configured with a different Config object

``` scala
package object websocket {

  val config = ConfigFactory.load().getConfig("spray.websocket")
  // ...
}
```
- That will certainly lead to a misconfiguration making users notice unexpected behaviour of spray-websocket

By reading [The WebSocket Protocol](https://tools.ietf.org/html/rfc6455) specification at section [1.9.  Subprotocols Using the WebSocket Protocol](https://tools.ietf.org/html/rfc6455#section-1.9), I can understand:

> the client _CAN_ (optionally) request that the server use a specific subprotocol by including the `Sec-WebSocket-Protocol` field in its handshake. If it is specified, the server _NEEDS_ to (mandatory) include the same field and one of the selected subprotocol values in its response for the connection to  be established.

Unfortunately neither the most recent tag (actually `v0.1.4`) nor the master branch are compliant with that piece of specification :-(

As quick test, if you try the following Javascript in your HTML page

``` javascript
new WebSocket(window.location.host, "aSubprotocol");
```

your browser will almost certainly throw an exception which could look like the following:

```
WebSocket connection failed: 
Error during WebSocket handshake: 
Sent non-empty 'Sec-WebSocket-Protocol' header but no response was received
```

I deployed the sample web sokcet server code in cloud foundry.
 My web socket client is not able to connect.

following is the url used to connect to web socket server : wss://cfAppInstance:4443/

Basically handshake is not happening.

It would be great if there were a means to name the connection handler actor based on some information available in the upgrade request. I'm thinking, for example, of a custom header that provides an ID, and that ID (presumably URL encoded) can be used as the name of the connection handler actor. The problem, of course, is that the connection handler actor already exists, and I don't think there's a way to name the actor after the fact. So presumably the implementation would create a new connection handler with the right name, register it as the handler, and stop the existing connection handler.

The goal is for clients to be able to identify themselves, and for the application to be able to use Akka routers, ActorSelections, etc. to communicate with specific clients (I'm assuming that's what the send() methods are for).

Does this make any sense? Is there a straightforward way to do it?

Running into a strange issue, I'll try to summarize as briefly as possible. 

I have two servers, M(onitor) & S(erver). M is receiving data from S, once per second, over a spray-websocket connection. 

Browser client connects to M over another web socket connection. As S pushes data to M, it's pushed out to the browser client. If the browser client disappears (I simulate it by quitting my VPN client that browser connects to M over), the data from S fails to be written at M over the web socket connection it had with the browser client. 

Brower <---- (websocket/vpn) ---- Monitor <---- (websocket) ---- Server

Spray logs warnings endlessly, it doesn't appear that the connection gets cleaned up:

2014-04-15 18:17:41,701 WARN [ReportingActorSystem-akka.actor.default-dispatcher-10] s.c.s.HttpServerConnection [Slf4jLogger.scala : 71] CommandFailed for Tcp.Write text frame: {"node":"10.0.20.202","up":true,"metrics":{"buildI ...
2014-04-15 18:17:41,704 WARN [ReportingActorSystem-akka.actor.default-dispatcher-10] s.c.s.HttpServerConnection [Slf4jLogger.scala : 71] event pipeline: dropped CommandFailed(Write(ByteString(-127, 126, 0, -69, 123, 34, 110, 111, 100, 101, 34, 58, 34, 49, 48, 46, 48, 46, 50, 48, 46, 50, 48, 50, 34, 44, 34, 117, 112, 34, 58, 116, 114, 117, 101, 44, 34, 109, 101, 116, 114, 105, 99, 115, 34, 58, 123, 34, 98, 117, 105, 108, 100, 73, 110, 102, 111, 34, 58, 123, 34, 99, 111, 109, 112, 111, 110, 101, 110, 116, 78, 97, 109, 101, 34, 58, 34, 119, 111, 114, 107, 101, 114, 34, 44, 34, 99, 111, 109, 112, 111, 110, 101, 110, 116, 86, 101, 114, 115, 105, 111, 110, 34, 58, 34, 48, 46, 49, 46, 50, 45, 83, 78, 65, 80, 83, 72, 79, 84, 34, 44, 34, 98, 117, 105, 108, 100, 84, 105, 109, 101, 34, 58, 34, 84, 104, 117, 32, 65, 112, 114, 32, 49, 48, 32, 49, 57, 58, 50, 49, 58, 52, 56, 32, 80, 68, 84, 32, 50, 48, 49, 52, 34, 44, 34, 117, 112, 116, 105, 109, 101, 77, 105, 108, 108, 105, 115, 34, 58, 50, 54, 55, 57, 55, 57, 48, 53, 57, 125, 125, 125),NoAck(null)))

I don't get any (unhandled) messages at my WebSocketServerConnection (worker) or my web socket server actor (that created the worker), no indication that the connection is unavailable. 

Have you witnessed this issue?
