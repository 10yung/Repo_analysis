Fix a bug where:
using System.Linq;
using MoreLINQ;

Causes calls to .ToHashSet() to fail to compile, because an identical implementation exists in .Net 4.7.1+
The base .Net framework, starting in .Net Framework 4.7.1, and .Net Core 2.0, includes its own IEnumerable extension method, .ToHashSet(). It should be removed from MoreLinq with a compiler flag for 4.7.1+ and Core 2.0+. Currently, it's easy to end up in a place where you can't compile if you have using statements for both `System.Linq` and `MoreLinq`.

https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tohashset?view=netframework-4.8
What about adding extensions allowing producing "diffgrams" between sequences of objects with value and id identity?

The desired behavior would be:

```csharp
        [TestMethod]
        public void Compare_Value_Identity()
        {
            var source = new[] { 1, 2 };
            var modified = new[] { 2, 3 };
            
            var (inserted, deleted) = source.Compare(modified);

            CollectionAssert.AreEqual(new[] { 3 }, inserted.ToArray());
            CollectionAssert.AreEqual(new[] { 1 }, deleted.ToArray());
        }
```

And:

```csharp
        [TestMethod]
        public void Compare_Id_Identity()
        {
            var source = new[] { (1, "A"), (2, "B"), (3, "C") };
            var modified = new[] { (2, "B"), (3, "D"), (4, "E") };

            var (inserted, updated, deleted) = source.Compare(modified, x => x.Item1);

            CollectionAssert.AreEqual(new[] { (4, "E") }, inserted.ToArray());
            CollectionAssert.AreEqual(new[] { (3, "D") }, updated.ToArray());
            CollectionAssert.AreEqual(new[] { (1, "A") }, deleted.ToArray());
        }
```

Library code is:

```csharp
    public static class SequenceChange
    {
        public static (IEnumerable<T> Inserted, IEnumerable<T> Deleted) Compare<T>(
            this IEnumerable<T> source, IEnumerable<T> modified) =>
            source.Compare(modified, EqualityComparer<T>.Default);

        public static (IEnumerable<T> Inserted, IEnumerable<T> Deleted) Compare<T>(
            this IEnumerable<T> source, IEnumerable<T> modified, IEqualityComparer<T> comparer) =>
            (modified.Except(source, comparer), source.Except(modified, comparer));

        public static (IEnumerable<T> Inserted, IEnumerable<T> Updated, IEnumerable<T> Deleted) Compare<T, TKey>(
            this IEnumerable<T> source, IEnumerable<T> modified, Func<T, TKey> keySelector) =>
            source.Compare(modified, keySelector, EqualityComparer<T>.Default);

        public static (IEnumerable<T> Inserted, IEnumerable<T> Updated, IEnumerable<T> Deleted) Compare<T, TKey>(
            this IEnumerable<T> source, IEnumerable<T> modified, Func<T, TKey> keySelector, IEqualityComparer<T> comparer) =>
            (modified.ExceptBy(source, keySelector),
            from s in source
            join m in modified on keySelector(s) equals keySelector(m)
            where !comparer.Equals(s, m)
            select m,
            source.ExceptBy(modified, keySelector));
    }  
```
This PR add `TestSortedMergeDoNotCallMoveNextEagerly`.
Unlike for `Interleave` (#694), this test pass.
This PR addresses #729.
As discussed [here ](https://github.com/morelinq/MoreLINQ/issues/724#issuecomment-564914459 ) in #724, with current implementation of `Interleave`,
The code below throws:

```C#
var sequenceA = TestingSequence.Of(1);
var sequenceB = new BreakingSequence<int>();
var interleave = sequenceA.Interleave(sequenceB).Take(1).ToList();
```

While we can expect `interleave` to be a list of one element.
Added:
 - TestInterleaveEarlyThrowOnNullElementInOtherSequences
 - TestInterleaveDisposesAllIteratorsOnPartialEnumeration
Hi, I'm making updates for Open Collective. Either you or another core contributor signed this repository up for Open Collective. This pull request adds financial contributors from your Open Collective https://opencollective.com/MoreLINQ ‚ù§Ô∏è

  What it does:
  - adds a badge to show the latest number of financial contributors
  - adds a banner displaying contributors to the project on GitHub
  - adds a banner displaying all individuals contributing financially on Open Collective
  - adds a section displaying all organizations contributing financially on Open Collective, with their logo and a link to their website

P.S: As with any pull request, feel free to comment or suggest changes.

  Thank you for your great contribution to the Open Source community. You are awesome! üôå
  And welcome to the Open Collective community! üòä

  Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other Open Source sustainers!
  
Use a `LinkedList` in `Interleave` implementation to avoid many null checks.
See #724, #696 
`Transpose`, `Interleave` and  `SortedMerge` are three methods that have to deals with enumeration of a collection of `IEnumerable`.

In this three methods, implementation have to ensure that all enumerators from the input enumerables are disposed when:

1. The enumeration of the input collection of IEnumerable fail.
2. The result sequence enumerator is disposed.

*1.* is assured by `Acquire` in the three methods.
*2.* is assured by `DisposableGroup` in `SortedMerge` and by some `try {} finaly {}` blocks in `Transpose` and `Interleave` (and those make `Acquire` useless as discussed here #696 ).

`Acquire` return an array, `DisposableGroup` is based on an list.
For the three methods we can build cases where enumerators are heavily removed from the array/list (or, for `Transpose`, tested as null).
Since remove for array/list (or repeatedly skip null elements) is O(N) in time, that lead to O(N¬≤) time complexity.
This can be easily fixed with the use of a `LinkedList` (and by removing null elements from it).

I propose a `ToDisposableLinkedList()` method that *1.* have the functionality of Acquire (on error, dispose already acquired elements) and provide a `DisposableLinkedList` that *2.* have the functionality of `DisposableGroup<T>` (being disposable and dispose its content when disposed).

It will be used like that:

```C#
using var enumerators = source.Select(e => e.GetEnumerator()).ToDisposableLinkedList();
```

The `using` here allow to remove the `try {} finally {}` from here:
https://github.com/morelinq/MoreLINQ/blob/9fc8486b9d8819690c9bc67fe41e74d4e1e2d765/MoreLinq/Transpose.cs#L92-L96
and here:
https://github.com/morelinq/MoreLINQ/blob/9fc8486b9d8819690c9bc67fe41e74d4e1e2d765/MoreLinq/Interleave.cs#L141-L146

and improve the `DisposableGroup/Acquire` combo from here:

https://github.com/morelinq/MoreLINQ/blob/9fc8486b9d8819690c9bc67fe41e74d4e1e2d765/MoreLinq/SortedMerge.cs#L101


