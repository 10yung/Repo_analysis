**Describe the bug**
scroll to the top doesn't work correctly.

**To Reproduce**
create a tableView including too many items.
scroll to the middle of tableView and then call this:
```
if let navigationController = self.navigationController as? ScrollingNavigationController {
    navigationController.showNavbar(animated: true, duration: 0.2, scrollToTop: true)
}
```
It scrolls to top but not actually to top of tableView.

this pod makes navigation translucent automatically but if you want to use it not translucent your collection views section header will be under navigationBar. 
**Describe the bug**
Table view buttons and title disappears after going back from full screen presented controller.

**To Reproduce**
- Start observing a collection view (or table view) scroll. 
- Scroll to hide the nav bar
- Present a modal view controller with full screen
- Stop observing (in `viewWillDissapear`) **with `showingNavBar = false`**
- Dismiss the presented view controller
- The original controller has the nav bar displayed and all its items (title, buttons) are transparent. 

You can also reproduce it by adding this code to `CollectionViewController.swift` in the demo app.

```
// line 38, replace commented line
// navigationController.stopFollowingScrollView()
navigationController.stopFollowingScrollView(showingNavbar: false)
```

```
// line 44, replace commented lines
// let storyBoard = UIStoryboard(name: "Main", bundle: nil)
// let mainViewController = storyBoard.instantiateViewController(withIdentifier: "TestViewController")
// self.present(mainViewController, animated: true, completion: nil)

let c = UIViewController()
c.modalPresentationStyle = .fullScreen
c.view.backgroundColor = .red
present(c, animated: true)
Timer.scheduledTimer(withTimeInterval: 2, repeats: false) { _ in
  c.dismiss(animated: true, completion: nil)
}
```
**Expected behavior**
- The nav bar should remain hidden or at least visible with all this items


**Describe the bug**
First of all I would like to thank you again for this library, I use it in my apps and it makes the user experience much more pleasurable.
I've been updating my app for iOS 13 and I've noticed an invalid behaviour of the Scrolling NavBar, TabBar to be exact. 
If the device is locked and the NavBar/TabBar is collapsed, then its position is invalid, when the device wakes back up. The problem can be seen in the gif I've attached. 

The problem appears when also presenting other VCs onto the VC that has the ScollingNavBar, such as when presenting a SideMenu, in my case. 

**To Reproduce**
Steps to reproduce the behavior:
1. Make the TabBar collapse.
2. Lock the device/simulator
3. Unlock the device, the TabBar will be visible, but in the .collapsed state, so once you scroll up, the TabBar moves above its normal position.
(Tested on iPhone 11 Pro Max iOS 13 Simulator, which didn't seem to happen on iOS 12 and below after fixing #321 )

**Expected behavior**
The TabBar should either be collapsed when waking, or have the correct state so it does not go above its normal position

**Screenshots**
Here's the gif of the problem. [gif](https://gph.is/g/4LNBQ3p)

After taking a look at the source code, I believe that the `scrollWithDelta` function gets called before the `didBecomeActive` function, thus making the `previousState` param always `.expanded` before the `didBecomeActive` checks its value. All of these are in the ScrollingNavigationController class.

I'll do some more digging and report here if I find a fix, any ideas are appreciated
I scroll up but the collection view does not follow. I use the storyboard to set up the everything and the constraints.

`if let navigationController = navigationController as? ScrollingNavigationController {
            navigationController.followScrollView(collectionView, delay: 20.0, followers: [NavigationBarFollower(view: exploreSearchBar, direction: .scrollUp)])
        } else {
            print("Not FOUND")
        }`

A short youtube video on the issue:
EDIT I had the wrong link up sorry.
[https://youtu.be/bmP3GWvoWqs](url)


The top constraint for the ui collection view to the bottom of the search bar:
![Screen Shot 2019-08-09 at 2 26 38 AM](https://user-images.githubusercontent.com/43056803/62761790-2ce58c00-ba4d-11e9-93d8-b9b78a4b8ed3.png)
Fix for #367.

**Motivation**

After investigating this and testing on iOS's 8-12 I could not observe that recursive subview actually does anything(except causing flickering on iOS 11 and 12 :). 

Bar button items(including those with custom views) are handled by these:
```swift
    navigationItem.leftBarButtonItem?.tintColor = navigationItem.leftBarButtonItem?.tintColor?.withAlphaComponent(alpha)
    navigationItem.rightBarButtonItem?.tintColor = navigationItem.rightBarButtonItem?.tintColor?.withAlphaComponent(alpha)
    navigationItem.leftBarButtonItems?.forEach { $0.tintColor = $0.tintColor?.withAlphaComponent(alpha) }
    navigationItem.rightBarButtonItems?.forEach { $0.tintColor = $0.tintColor?.withAlphaComponent(alpha) }
...
    // Hide the left items
    navigationItem.leftBarButtonItem?.customView?.alpha = alpha
    navigationItem.leftBarButtonItems?.forEach { $0.customView?.alpha = alpha }

    // Hide the right items
    navigationItem.rightBarButtonItem?.customView?.alpha = alpha
    navigationItem.rightBarButtonItems?.forEach { $0.customView?.alpha = alpha }
```

Title and title view handled here:
```swift
    navigationItem.titleView?.alpha = alpha
   ...
    if let titleColor = navigationBar.titleTextAttributes?[NSAttributedString.Key.foregroundColor] as? UIColor {
      navigationBar.titleTextAttributes?[NSAttributedString.Key.foregroundColor] = titleColor.withAlphaComponent(alpha)
    } else {
      let blackAlpha = UIColor.black.withAlphaComponent(alpha)
      if navigationBar.titleTextAttributes == nil {
        navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: blackAlpha]
      } else {
        navigationBar.titleTextAttributes?[NSAttributedString.Key.foregroundColor] = blackAlpha
      }
    }
```

Any other "tintable" stuff handled here
```swift
    navigationBar.tintColor = navigationBar.tintColor.withAlphaComponent(alpha)
```

It seems that all cases are covered already without the need to traverse navigation bar view hierarchy updating alpha for each of them(which also has it's problems).

**Issue with recursive alpha**

As the documentation for [`UIView.alpha`](https://developer.apple.com/documentation/uikit/uiview/1622417-alpha) states 

> transparency imparted by that alpha value affects all of the view's contents, including its subviews

Which results in alpha value of a view being multiplied by alpha of its superview(and superview of superview and so on).
In this illustration you can see what I'm trying to describe:
<img width="301" alt="Screenshot 2019-07-31 at 14 44 47" src="https://user-images.githubusercontent.com/1478430/62209265-d4095a00-b3a1-11e9-8b7c-41ecb11cc106.png">

The first square consists of a white view with alpha `0.5` and a black subview with alpha `0.5`. Square two and three are just for comparison - the first one is a black view with alpha 0.25, second one - 0.5.
This shows that recursively applying alpha produces result different from desired - in an attempt to set everything to `0.5` - the result ended up looking as if it has alpha of value `0.25`. And this is in controlled environment - view hierarchy depth is limited to 2 in this example, this should be more pronounced when nesting is deeper, the alpha of the deepest view should be desired_alpha^depth.

Here's playground with this setup: 
[RecursiveAlphaPlayground.playground.zip](https://github.com/andreamazz/AMScrollingNavbar/files/3451664/RecursiveAlphaPlayground.playground.zip)


**Describe the bug**

Some navigation bar elements(`UIBarButtonItem`s and `UINavigationitem`s with custom views) flicker when navigation bar gets hidden interactively.

![flickering_bug](https://user-images.githubusercontent.com/1478430/62207596-25fbb100-b39d-11e9-9f75-68977fb1c2cb.gif)

**To Reproduce**

The issues manifests quite easily, for example when setting up an item with custom image view:
```swift
    let imageView = UIImageView(image: UIImage(named: "AppIcon"))
    navigationItem.rightBarButtonItem = UIBarButtonItem(customView: imageView)
```
or event just an empty view
```swift
    let titleView = UIView(frame: CGRect(x: 0, y: 0, width: 200, height: 30))
    titleView.backgroundColor = .white
    navigationItem.titleView = titleView
```
Here's a sample project that demonstrates this:
[Sample.zip](https://github.com/andreamazz/AMScrollingNavbar/files/3451411/Sample.zip)

**Expected behavior**
Would be nice if it wouldn't flicker.
**Describe the bug**
When presenting a `SFSafariViewController` on top of a view controller that uses a `ScrollingNavigationController` and returning to the app, the web view content will be behind the navigation bar when scrolling to the top. Upon inspecting various older version, this behavior was not apparent in version `4.1.0` and before.

**To Reproduce**
Steps to reproduce the behavior:
1. Setup a view controller with a scrolling navigation bar and a web view
2. Tap a link in the web content and open a safari view controller
3. Return to the app and scroll to the top, the content will be behind the navigation bar.

**Expected behavior**
The web view's content is not behind the navigation bar.

**Screenshots**

![Jul-24-2019 17-26-25](https://user-images.githubusercontent.com/16432044/61830019-327d8800-ae38-11e9-85ca-7a45f5849429.gif)
![Simulator Screen Shot - iPhone X - 2019-07-24 at 17 26 47](https://user-images.githubusercontent.com/16432044/61830027-390bff80-ae38-11e9-85db-4c0bfdf06921.png)


Is there any way to slide toolbar beneath the navigation bar while scrolling and collapse both of them?
**Describe the bug**
If you scroll and slide your finger diagonally across the screen, the NavigationBar will not recognize it. So it will not collapse and will not expand. Furthermore, with scrolling small steps, the NavigationBar will not collapse and expand. Even if you include a UiTableview in a UiTableview and only scroll inside, the UiNavigationBar becomes unnecessarily collapsed or expand. This does not happen with a delegate method. The error is the same in all three causes.

**To Reproduce**
Steps to reproduce the behavior:
1. Open Demo or your own project
2. Slide your finger diagonally across the screen to scroll the UiTableView or UiCollectionView or...
3. NavBar does not collapse or expand.

**Expected behavior**
NavBar should collapse or expand

**Screenshots**
If you need a video, so I can deliver it.
