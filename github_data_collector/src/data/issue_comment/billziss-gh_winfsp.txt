## Bug Report
The `FspFileSystemResolveReparsePoints` function don't handle Junction reparse point, also called Mount point. `IO_REPARSE_TAG_MOUNT_POINT` is not only used for drive mounting on directory but also for directory to directory redirection. A simple work around is to convert an `IO_REPARSE_TAG_MOUNT_POINT` in `IO_REPARSE_TAG_SYMLINK` into the `GetReparsePointByName` callback.

### How to Reproduce
Start memfs with default setting mount as drive and create a directory with sub-directory and/or an EXE file, then create a Junction (mklink /j link target) to the first directory on mounted drive. As result the EXE file can't start and exploring the sub-directory loop to the parent directory.

### Behaviors
Expected to work just as Symlink.

### Environment
OS version and build: WIN10-1909 x64
WinFsp version and build: 2019.B5

**Bug Report**
When you try to change the owner for the main drive or a file with explorer you get the error `ERROR_INVALID_OWNER`. No matter what account you specify (Builtin or not), neither the proccess account (User or System) or enable privileges make the operation work. The error come from `FspSetSecurityDescriptor` function that return `NTSTATUS C000005A`. (Probably from `SetPrivateObjectSecurity`).

**How to Reproduce**
Launch memfs with default setting drive mapped and try to change the drive owner with the explorer interface.

**Environment**
OS version and build: WIN10-1909 and WINSERVER 2019-1809 (All x64)
WinFsp version and build: 2019.B5 and 2019.B3
![image](https://user-images.githubusercontent.com/53322569/71303199-47167a00-23f0-11ea-83b3-89995a418034.png)
![image](https://user-images.githubusercontent.com/53322569/71303203-5f869480-23f0-11ea-9c14-3cceb214b643.png)

windows versionï¼š

Win10 14393

Win10 1803

Win10 1809

Win10 1903



VMware version:

15.5



cmd execute 

C:\Users\Administrator\Desktop\passthrough-x64.exe -p M: -m X: -D C:\Users\Administrator\Desktop\LogFile.txt

LogFile is empty.

[google online forum ](https://groups.google.com/forum/#!topic/winfsp/1sBlpDGFv9w)
If you know why, please help us, thank you!

## Enhancement Request

As per title. Original Google Group post from Keith Kaminski:

> Hello,
> 
> We have code currently running in Windows Docker containers that accesses files on a network file share. We'd like to use WinFsp within those containers to install our own user mode file system to handle all those requests to the NFS. 
> 
> To test something simple, we took the memfs-dotnet code and built a C# console app that targets .NET Framework 4.7.2. After verifying that it worked on a local development box, we attempted to get it working within a docker container. The dockerfile we used is pretty straightforward and I have attached a sample of it here.
> 
> We then navigated to the app folder within our container and executed the following command: `memfs-dotnet.exe -t -1 -n 1024 -s 16777216 -m Y: -d -1 -D "C:\app\driverdebug.log"`. And yes - we were just testing a drive letter mount as opposed to an NFS to start with. After roughly 10 seconds or so, the application simply closes. Nothing is written to the configured debug log file. We do, however, see two relevant messages in the Event Log:
> 
> ```
> memfs-dotnet: cannot mount file system
> memfs-dotnet: The service MemfsService has failed to start (Status=e0434f4d).
> ```
> 
> We spent a bit of time trying to debug, and we were able to determine that the following line in the FileSystemHost was returning STATUS_DRIVER_UNABLE_TO_LOAD. We then tried to enable mixed mode debugging to step into the C++ code, but it doesn't look like the PDBs included in the WinFsp installer have source maps so we didn't have much success.
> 
> We also tried to start the driver from the command line using "sc start winfsp". This does not appear to work, though, and we get the following:
> 
> ```
> SERVICE_NAME: winfsp
>         TYPE               : 2  FILE_SYSTEM_DRIVER
>         STATE              : 1  STOPPED
>         WIN32_EXIT_CODE    : 1077  (0x435)
>         SERVICE_EXIT_CODE  : 0  (0x0)
>         CHECKPOINT         : 0x0
>         WAIT_HINT          : 0x0
>         PID                : 0
>         FLAGS              :
> ```
> The error code 1077 is just "No attempts to start the service have been made since the last boot.". I can't find anything in the event logs or any other indication of failure. 
> 
> We are sort of at a loss about how to continue troubleshooting. It may be some limitation of Windows Docker containers that we're running into... but we are hopeful that we can somehow get this to work! For reference, I have also attached the results of running diag.bat in the container.
> 
> Thanks.
> 
> - Keith Kaminski

Link to full thread:

https://groups.google.com/d/topic/winfsp/VtRA_5KMWfU/discussion
## Bug Report

The _create_ callback is called also for special files like S_IFIFO. 
The special named FIFO file is still not created, instead a corresponding _.lnk_ file pops up in the same directory.
```
$ mkfifo foobar

$ ls -l foobar*
-rwx------ 1 Hasse None 130 Oct 12 14:46 foobar.lnk*
```
The same happens if _create_ is not implemented which forces a call to _mknod_ instead.
Possible root cause is that the file type mode bits are not being sent properly in _create_ nor _mknod_ callbacks (see issue #256). 

I however chose to file this as two separate bugs since they are basically two different deviations compared to the legacy FUSE API behavior on e.g. Linux..

### How to Reproduce

This is a bit tricky since you need to mount a user file system that implements the _create_ callback. Then try to create a named FIFO (_mkfifo_) under some FUSE file system mount point.

### Behaviors

According to FUSE documentation, _create_ should only be called for regular files (_S_IFREG_).
From fuse.h:
```
        /** Create a file node
	 *
	 * This is called for creation of all non-directory, non-symlink
	 * nodes.  If the filesystem defines a create() method, then for
	 * regular files that will be called instead.
	 */
	int (*mknod) (const char *, mode_t, dev_t);
```


### Environment

- OS version and build: CYGWIN_NT-10.0 xxx 3.0.7(0.338/5/3) 2019-04-30 18:08 x86_64 Cygwin
- WinFsp version and build: 2019.2
- fuse2

## Bug Report

When a new file is created on a mounted FUSE file system either the _mknod_ or _create_ callback is called (depending on what the file system implements) the _mode_ argument is expected to hold not only the file mode bits but also the file type, e.g. _S_IFREG_.
This does not seem to be the case on WinFSP/FUSE but works as expected on e.g. Linux.

### How to Reproduce

Create a new file using e.g. _touch_ and watch the mode bits in calls to _mknod_ or _create_.

### Behaviors

Expected the file type bits to be set in the mode argument as is the case on e.g. Linux.

### Environment

- OS version and build: CYGWIN_NT-10.0 xxxx 3.0.7(0.338/5/3) 2019-04-30 18:08 x86_64 Cygwin
- WinFsp version and build: 2019.2
- fuse2
## Question

Hi,
is WinFsp compatible with [FUSE filesystem over Google Drive](https://github.com/astrada/google-drive-ocamlfuse)?
WinFsp version and build: WinFsp 2018.2 B2

```
IRQL_NOT_LESS_OR_EQUAL (a)
An attempt was made to access a pageable (or completely invalid) address at an
interrupt request level (IRQL) that is too high.  This is usually
caused by drivers using improper addresses.
If a kernel debugger is available get the stack backtrace.
Arguments:
Arg1: 0000000000000014, memory referenced
Arg2: 0000000000000002, IRQL
Arg3: 0000000000000001, bitfield :
	bit 0 : value 0 = read operation, 1 = write operation
	bit 3 : value 0 = not an execute operation, 1 = execute operation (only on chips which support this level of status)
Arg4: fffff80004483544, address which referenced memory

Debugging Details:

KEY_VALUES_STRING: 1


TIMELINE_ANALYSIS: 1


DUMP_CLASS: 1

DUMP_QUALIFIER: 400

BUILD_VERSION_STRING:  7601.24214.amd64fre.win7sp1_ldr_escrow.180801-1700

SYSTEM_MANUFACTURER:  TSINGHUA TONGFANG COMPUTER

SYSTEM_PRODUCT_NAME:  H61H2-CM2

BIOS_VENDOR:  American Megatrends Inc.

BIOS_VERSION:  E001NP0

BIOS_DATE:  01/15/2014

BASEBOARD_MANUFACTURER:  ECS

BASEBOARD_PRODUCT:  H61H2-CM2

BASEBOARD_VERSION:  1.0

DUMP_TYPE:  2

BUGCHECK_P1: 14

BUGCHECK_P2: 2

BUGCHECK_P3: 1

BUGCHECK_P4: fffff80004483544

WRITE_ADDRESS: GetPointerFromAddress: unable to read from fffff800046f4100
Unable to get MmSystemRangeStart
GetUlongPtrFromAddress: unable to read from fffff800046f42f0
GetUlongPtrFromAddress: unable to read from fffff800046f44a8
 0000000000000014 

CURRENT_IRQL:  2

FAULTING_IP: 
nt!KiDeliverApc+1a4
fffff800`04483544 48894208        mov     qword ptr [rdx+8],rax

CPU_COUNT: 2

CPU_MHZ: bb1

CPU_VENDOR:  GenuineIntel

CPU_FAMILY: 6

CPU_MODEL: 3a

CPU_STEPPING: 9

CPU_MICROCODE: 6,3a,9,0 (F,M,S,R)  SIG: 19'00000000 (cache) 19'00000000 (init)

CUSTOMER_CRASH_COUNT:  1

DEFAULT_BUCKET_ID:  WIN7_DRIVER_FAULT

BUGCHECK_STR:  0xA

PROCESS_NAME:  System

ANALYSIS_SESSION_HOST:  XXK-PC

ANALYSIS_SESSION_TIME:  08-28-2019 15:56:56.0880

ANALYSIS_VERSION: 10.0.17134.1 amd64fre

TRAP_FRAME:  fffff88004747520 -- (.trap 0xfffff88004747520)
NOTE: The trap frame does not contain all registers.
Some register values may be zeroed or incorrect.
rax=fffffa80036d4450 rbx=0000000000000000 rcx=0000000000000000
rdx=000000000000000c rsi=0000000000000000 rdi=0000000000000000
rip=fffff80004483544 rsp=fffff880047476b0 rbp=0000000000000000
 r8=fffffa8003bfcb18  r9=0000000000000130 r10=fffffa8003bfcb08
r11=fffff800045bab60 r12=0000000000000000 r13=0000000000000000
r14=0000000000000000 r15=0000000000000000
iopl=0         nv up ei pl zr na po nc
nt!KiDeliverApc+0x1a4:
fffff800`04483544 48894208        mov     qword ptr [rdx+8],rax ds:00000000`00000014=????????????????
Resetting default scope

LAST_CONTROL_TRANSFER:  from fffff800044f7d69 to fffff800044e99a0

STACK_TEXT:  
fffff880`047473d8 fffff800`044f7d69 : 00000000`0000000a 00000000`00000014 00000000`00000002 00000000`00000001 : nt!KeBugCheckEx
fffff880`047473e0 fffff800`044f5b88 : 00000000`00000001 00000000`00000014 00000000`00000000 fffffa80`036d4400 : nt!KiBugCheckDispatch+0x69
fffff880`04747520 fffff800`04483544 : fffffa80`036d4400 fffff880`04747730 fffffa80`0921bb58 fffff880`04747770 : nt!KiPageFault+0x448
fffff880`047476b0 fffff800`044ee2f3 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!KiDeliverApc+0x1a4
fffff880`04747730 fffff800`0448e94a : fffffa80`03b03b50 fffffa80`03bfcba8 fffffa80`03ae1010 00000000`00000000 : nt!KiApcInterrupt+0x2b3
fffff880`047478c0 fffff800`04554234 : 00000000`00000001 fffffa80`03ee6060 fffffa80`03bfca90 fffffa80`03bfcba8 : nt!KeReleaseSpinLock+0x2a
fffff880`047478f0 fffff880`08141ec7 : fffffa80`03ae0800 fffff880`047479d0 fffff880`04747a00 fffffa80`03ae0900 : nt!IoCsqInsertIrpEx+0x74
fffff880`04747930 fffff880`08159830 : fffffa80`03bfca90 00000000`00000003 fffffa80`0921ba90 fffff880`04747a80 : winfsp_x64!FspIoqPostIrpEx+0x5b [e:\work\docprotect\trunk\1.0\client\project\winfsp\src\sys\ioq.c @ 580] 
fffff880`04747960 fffff880`00c0283f : fffffa80`03ae0870 fffffa80`03bfca90 00000000`20000000 00000000`00000003 : winfsp_x64!FspWrite+0xf0 [e:\work\docprotect\trunk\1.0\client\project\winfsp\src\sys\write.c @ 647] 
fffff880`047479c0 fffff880`00c016df : fffffa80`03ee6060 fffffa80`09033500 fffffa80`03bfca00 fffffa80`03bfca90 : FLTMGR!FltpLegacyProcessingAfterPreCallbacksCompleted+0x24f
fffff880`04747a50 fffff800`045bde7b : fffffa80`03bfca90 fffffa80`03ee6060 fffffa80`09033500 fffffa80`088d0020 : FLTMGR!FltpDispatch+0xcf
fffff880`04747ab0 fffff800`045e9a4b : 00000000`00200000 00000000`00000000 00000000`00000040 00000000`00000701 : nt!IoAsynchronousPageWrite+0x20b
fffff880`04747b00 fffff800`044c65f8 : 00000000`00000000 fffffa80`088d0010 fffffa80`00000000 fffff8a0`00000000 : nt!MiGatherMappedPages+0xeeb
fffff880`04747c10 fffff800`04798d04 : fffff800`0463b180 00000000`00000080 00000000`00000001 2dcdd673`15899708 : nt!MiMappedPageWriter+0x198
fffff880`04747d00 fffff800`044ef9a6 : fffff800`0463b180 fffffa80`036d4400 fffffa80`036d4b50 00000000`00000000 : nt!PspSystemThreadStartup+0x194
fffff880`04747d40 00000000`00000000 : fffff880`04748000 fffff880`04742000 fffff880`047475b0 00000000`00000000 : nt!KxStartSystemThread+0x16


THREAD_SHA1_HASH_MOD_FUNC:  b234e2cfc511f4d439e8d3134f7632b688d9bbf5

THREAD_SHA1_HASH_MOD_FUNC_OFFSET:  9c85ed39ce207bf5735622db1b668032e09f00f2

THREAD_SHA1_HASH_MOD:  6de2049fa8c7be5a39677f7e55ebfc53839a8183

FOLLOWUP_IP: 
winfsp_x64!FspIoqPostIrpEx+5b [e:\work\docprotect\trunk\1.0\client\project\winfsp\src\sys\ioq.c @ 580]
fffff880`08141ec7 85c0            test    eax,eax

FAULT_INSTR_CODE:  f78c085

FAULTING_SOURCE_LINE:  e:\work\docprotect\trunk\1.0\client\project\winfsp\src\sys\ioq.c

FAULTING_SOURCE_FILE:  e:\work\docprotect\trunk\1.0\client\project\winfsp\src\sys\ioq.c

FAULTING_SOURCE_LINE_NUMBER:  580

FAULTING_SOURCE_CODE:  
   576:     NTSTATUS Result;
   577:     FspIrpTimestamp(Irp) = BestEffort ? FspIrpTimestampInfinity :
   578:         QueryInterruptTimeInSec() + Ioq->IrpTimeout;
   579:     Result = IoCsqInsertIrpEx(&Ioq->PendingIoCsq, Irp, 0, (PVOID)BestEffort);
>  580:     if (NT_SUCCESS(Result))
   581:     {
   582:         if (0 != PResult)
   583:             *PResult = STATUS_PENDING;
   584:         return TRUE;
   585:     }


SYMBOL_STACK_INDEX:  7

SYMBOL_NAME:  winfsp_x64!FspIoqPostIrpEx+5b

FOLLOWUP_NAME:  MachineOwner

MODULE_NAME: winfsp_x64

IMAGE_NAME:  winfsp-x64.sys

DEBUG_FLR_IMAGE_TIMESTAMP:  5c10816d

IMAGE_VERSION:  1.3.18346.0

STACK_COMMAND:  .thread ; .cxr ; kb

FAILURE_BUCKET_ID:  X64_0xA_winfsp_x64!FspIoqPostIrpEx+5b

BUCKET_ID:  X64_0xA_winfsp_x64!FspIoqPostIrpEx+5b

PRIMARY_PROBLEM_CLASS:  X64_0xA_winfsp_x64!FspIoqPostIrpEx+5b

TARGET_TIME:  2019-08-28T07:31:21.000Z

OSBUILD:  7601

OSSERVICEPACK:  1000

SERVICEPACK_NUMBER: 0

OS_REVISION: 0

SUITE_MASK:  272

PRODUCT_TYPE:  1

OSPLATFORM_TYPE:  x64

OSNAME:  Windows 7

OSEDITION:  Windows 7 WinNt (Service Pack 1) TerminalServer SingleUserTS

OS_LOCALE:  

USER_LCID:  0

OSBUILD_TIMESTAMP:  2018-08-02 10:18:10

BUILDDATESTAMP_STR:  180801-1700

BUILDLAB_STR:  win7sp1_ldr_escrow

BUILDOSVER_STR:  6.1.7601.24214.amd64fre.win7sp1_ldr_escrow.180801-1700

ANALYSIS_SESSION_ELAPSED_TIME:  6d1

ANALYSIS_SOURCE:  KM

FAILURE_ID_HASH_STRING:  km:x64_0xa_winfsp_x64!fspioqpostirpex+5b

FAILURE_ID_HASH:  {a5212ce0-606c-8e7f-396d-9c845154edb8}

Followup:     MachineOwner
```
## Enhancement Request
Fuse api exposes a `copy_file_range` method (since fuse 3.4.0) [see fuse struct definition](https://libfuse.github.io/doxygen/structfuse__operations.html#a8dab2194663f561ef7db54de2ca35694), would it be possible to add this feature in winfsp ?

```
ssize_t(* fuse_operations::copy_file_range)(const char *path_in, struct fuse_file_info *fi_in, off_t offset_in, const char *path_out, struct fuse_file_info *fi_out, off_t offset_out, size_t size, int flags)

Copy a range of data from one file to another

Performs an optimized copy between two file descriptors without the additional cost
of transferring data through the FUSE kernel module to user space (glibc) and
then back into the FUSE filesystem again.

In case this method is not implemented, glibc falls back to reading data from the source
and writing to the destination.
Effectively doing an inefficient copy of the data.

```

## Enhancement Request

Windows includes the [`CcSetReadAheadGranularityEx`](https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/ccsetreadaheadgranularityex) DDI and the older [`CcSetReadAheadGranularity`](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-ccsetreadaheadgranularity) DDI, which can be used to influence the operating system read-ahead policy for a particular file. This functionality should be exposed to user mode file systems in some form.

- This may be implemented on a per-file basis (`CcSetReadAheadGranularity*` works on a `FILE_OBJECT`) or on a per-filesystem basis (e.g. via `FSP_FSCTL_VOLUME_PARAMS`).

    - Maximum flexibility might be provided by a mix of the two. Consider a `ReadAhead` field in   `FSP_FSCTL_VOLUME_PARAMS` which defines a file system default (with `0` meaning the operating system default policy, i.e. the current behavior). In addition a file system may choose to provide a different read-ahead for a particular file (-- perhaps encoded as a power of 2 in the bitfields of `FSP_FSCTL_TRANSACT_RSP::Rsp.Create.Opened`, since read-ahead should be a power of 2 in general).

- FUSE read-ahead support should be added via a command-line option.

- .NET support should be added as well.

- See issue billziss-gh/sshfs-win#104, which requested such support for SSHFS-Win.