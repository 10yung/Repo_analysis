**OS / Environment (where do you run Algo on)**

> Linux (ubuntu 18.04) on server

**Cloud Provider (where do you deploy Algo to)**

> Azure

**Summary of the problem**

> When connecting through Wireguard with either Mac or PC, the client cannot connect to the Internet.

**Steps to reproduce the behavior**

> 

[It seems at least in earlier versions of AlgoVPN, there were special settings during ./Algo for Windows clients.](https://github.com/trailofbits/algo/issues/760) However, I installed AlgoVPN on my Ubuntu Server and saw no special settings related to Windows 10 or Wireguard when setting up ./Algo. 

After completion of ./Algo, I tried connecting my Mac with Wireguard and could not connect to the Internet when doing so. On later attempts, all my Apple devices (iPhone, iPad, Mac) could connect via the dedicated mobile configuration files. 

With my Windows 10 Laptop, it seems I need to connect via Wireguard and this connection is not working - i.e. after activating the connection, when hovering over the connection details it is displayed that the VPN user ("userWindows") cannot connect to the Wifi network ("TP-Link_XYZ"):

> TP-Link_XYZ
> Internet access
> 
> userWindows
> No Internet access

After a few minutes, the Internet connection (TP-Link_XYZ) changes from "connected, secured" to "No Internet, secured".

The same happens if I connect via my phone's network instead.

I setup Wireguard as described:

> Install the WireGuard VPN Client. Import the generated wireguard/<username>.conf file to your device, then setup a new connection with it.

Also, I tried deactivating the Windows Firewall and added an exception to the Virus scanner for Wireguard - the issue persisted after doing that.

Is this a known Issue? Is setting up the VPN connection manually instead of using Wireguard a good workaround? I ran into a "Policy match error" when attempting to do that on my Windows 10 laptop.
The docs [recommend](https://github.com/trailofbits/algo/blob/master/docs/cloud-azure.md) using Azure Cloud Shell.  

Azure Cloud Shell has Python 3.5 installed.

You also can't use apt to install packages.

Approximate steps to get around this:

1. [Install](https://github.com/pyenv/pyenv#installation) `pyenv`
2. Install python 3.6.10: `pyenv install 3.6.10`
2. Clone algo
3. cd to `./algo`
5. Set python version for algo to 3.6.10: `pyenv local 3.6.10`.
6. Continue with algo steps

Dunno if this should go in the wiki or not.

**Describe the bug**
Please consider using the mainline binary from the dnscrypt-proxy release page instead of the PPA repository, it's unmaintained and outdated.

**To Reproduce**

Steps to reproduce the behavior:
1. run on the shell: dnscrypt-proxy -version.

**Expected behavior**

The version displayed should be 2.0.36, when this issue was opened. 

**Additional context**

There are other positive outcomes from making this change:

1) Algo wouldn't need systemd socket activation to work anymore, since the plain binary ditched it.

2) Since version 2.0.34 it has the capability to block CNAME Cloaked domains for adblocking. 

3) It's pretty easy to keep dnscrypt-proxy up-to-date by using a simple update script provided at the official wiki.

4) The dnscrypt-proxy.toml can be further updated to use ip-blocklists from malware services, the ip-blacklist.txt provided by Algo is mitigating against dns-rebinding, and dnscrypt-proxy already does that by default.

5) The blacklist.txt could be using a bigger blocklist that has daily updates.

6) One final change would be to use the "Load balancing" feature with the "ph" switch, instead of using all queries directed to Cloudflare, this way no resolver would have the full log of requests of Algo.
<!--- Provide a general summary of your changes in the Title above -->

## Description
- changes the basic constraints to critical with `pathlen:0`:
```
X509v3 Basic Constraints: critical
    CA:TRUE, pathlen:0
```

- Generates a random id for every deployment and adds the nameConstraints extension to the CA certificate:
```
X509v3 Name Constraints: critical
    Permitted:
      IP:34.254.198.99/255.255.255.255
      DNS:585d3e61-7be1-5170-b417-e4e5d5b4fa57.algo
      email:585d3e61-7be1-5170-b417-e4e5d5b4fa57.algo   
```

## Motivation and Context
The discussion initially started in #75 and rose up again in #1673

## How Has This Been Tested?

## Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- New feature (non-breaking change which adds functionality)
- Breaking change (fix or feature that would cause existing functionality to not work as expected)
  - emails in usernames are not allowed anymore

## Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the **CONTRIBUTING** document.
- [x] My code follows the code style of this project.
- [x] I have added tests to cover my changes.
- [x] All new and existing tests passed.

**Is your feature request related to a problem? Please describe.**
I'm completely new to servers & Algo (therefore I apologise if I don't make any sense) and it was a bit of a shock to see the number of brute force attempts to get in via netstat. The default deployment firewall at the moment for Vultr leaves port 22 open to any IPv4 or IPv6 address. Further the default /etc/ssh/sshd_config allows both root access and password access, and it doesn't force keys (I was able to SSH in via putty on a different computer with just a username & password). Less knowledgeable users may struggle with security. 

**Describe the solution you'd like**
I'd like to see an option upon deployment to prevent any additional port being opened, only leaving open 500, 4500 & wireguard. This option would have a short explanation encouraging users to select it if they were concerned. For those selecting that option, access can still be faciliated from a cloud provider's console or through wireguard. A comment on the option that this would help against brute force attempts. More out of the box security is good, especially for those of us just starting out. 

**Describe alternatives you've considered**
I've noticed there are a number of discussions already about including fail2ban #1672  and PR #1636 to randomise the port. I agree with comments in #1672 that both would help lower instances. 
**Is your feature request related to a problem? Please describe.**
Currently, if we keep the PKI, we take the risk that someone steals the CA private key and uses it to sign server certificates our client devices will trust. They would be able to sign any server certificate, including well known ones like google.com, microsoft.com, apple.com, etc.

**Describe the solution you'd like**
Setting [name constraint](https://tools.ietf.org/html/rfc5280#section-4.2.1.10) on CA certificate so that it can only be used to sign our server certificate. Stealing CA private key will then result in no more damage than stealing the server certificate key.

**Describe alternatives you've considered**
We can choose to discard CA key, but then we cannot add more users.

**Additional context**


**Describe the bug**

Wireguard always successfully connects to the EC2 instance, but is unable to fetch webpages at random times for a few minutes before full functionality and speed is restored.

**To Reproduce**

Steps to reproduce the behavior:
1. Enter mainland China.
2. Connect to Wireguard/Algo.
3. Observe failures after 24 hours.

**Expected behavior**

Uninterrupted support. Or, at the very least, a definite end of life to the servers responsiveness when the govt detected the server?
Tor Browser Doesn't load any website with VPN on. It just times out.... What could be causing this?
Currently you have to supply your AWS access key and secret key when setting up Algo. A better, and more user friendly solution would be to read from the AWS credentials file.

**Describe the solution you'd like**
Algo should read from the AWS credentials file

**Describe alternatives you've considered**
None

**Additional context**
None

Thoughts welcome

**Describe the bug**

A web page take way more time to load than normal. Maybe because I have OpenVPN installed ?

```shell
# With Algo VPN on DigitalOcean, London
$ curl https://github.com/sundowndev -s -o /dev/null -w  "%{time_starttransfer}\n"
6,662533
$ curl ipv4.icanhazip.com -s -o /dev/null -w  "%{time_starttransfer}\n"
5,577715

# With OpenVPN on DigitalOcean, London
$ curl https://github.com/sundowndev -s -o /dev/null -w  "%{time_starttransfer}\n"
0,909037
$ curl ipv4.icanhazip.com -s -o /dev/null -w  "%{time_starttransfer}\n"
0,128238

# Without VPN
$ curl https://github.com/sundowndev -s -o /dev/null -w  "%{time_starttransfer}\n"
0,950027
$ curl ipv4.icanhazip.com -s -o /dev/null -w  "%{time_starttransfer}\n"
0,046997
```

It loads properly and fast on Android (tested on the same network). I tried stopping openvpn process, it does not change anything.

**To Reproduce**

I'm using Ubuntu 18.04 , kernel 5.0.0-37-generic x86_64

Deployed on DigitalOcean, region London, no ad blocking, all deploy options set to default.

**Expected behavior**

A normal load time.
