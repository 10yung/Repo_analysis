Hey @dsherret. I've come across a couple of scenarios where it would be convenient to be able to retrieve the `Project` instance from a `SourceFile` (such as to grab other source files in the project based on the given `SourceFile`'s source).

I've been passing in both the `Project` and the `SourceFile` instances to functions that I write which need this ability, but figuring that having a `SourceFile.getProject()` method would be convenient (especially when one function calls another, and it ends up being a lot of functions that need both arguments). 

Since this feature could be handy on any `Node`, was thinking to put this new method on that class. The method could just return `this._context.project`?

Thoughts?

Best,
Greg
```typescript
//this defined in  tsserverlibrary.d.ts
interface PluginCreateInfo {
        project: Project;
        languageService: LanguageService;
        languageServiceHost: LanguageServiceHost;
        serverHost: ServerHost;
        config: any;
}
```

**Is your feature request related to a problem? Please describe.**
I need a way to load my language service plugin.

**Describe the solution you'd like**
Provide apis to get all these `PluginCreateInfo` members.
Or I can custom load a plugin from a required module.

**Describe alternatives you've considered**
Maybe `project` and `serverHost` not exist. But at least `languageServiceHost` exists.
See here: https://github.com/dsherret/ts-morph/issues/776#issuecomment-567285555
**Describe the bug**
typescript version: 3.7.4
ts-morph version: 6.0.2

Here's an odd one! I am unable to call `getTagName()` on JSDoc tags if they are `@template` tags. Oddly, I have a number of other tag names in my codebase, several of which are nonstandard, and yet `@template` is the only offender.

**To Reproduce**
```ts
import { Project, SyntaxKind, ts } from 'ts-morph';

console.log(ts.version); // 3.7.4

const project = new Project();
const file = project.createSourceFile(
    'src/tmp.ts',
    [
        '/** @template Thing this is a thing */',
        'const printThing = (thing: Thing): Thing => {',
        '  console.log(thing);',
        '  return thing;',
        '};',
    ].join('\n'),
);

// Print all tag names
file.getFirstDescendantByKindOrThrow(SyntaxKind.VariableStatement)
    .getJsDocs()
    .forEach(jsDoc => {
        jsDoc.getTags().forEach(tag => {
            console.log(tag.getTagName()); // TypeError: tag.getTagName is not a function
        });
    });
```

**Expected behavior**
Console prints `@template`.

**Actual behavior**
`TypeError: tag.getTagName is not a function`

In my case I am able to work around the issue, but it is a bit of a nuisance (and a curiosity!)

<!-- If you are contributing this bug fix then please read the instructions in CONTRIBUTING.md -->

**Describe the bug**

Version: latest

<!-- A clear and concise description of what the bug is. -->

**To Reproduce**

<!-- Clearly identify the problem and submit some reproduction code. Prune the reproduction code to remove needless details. State the actual behaviour. -->

```ts
const { Project, StructureKind } = require("ts-morph");

const project = new Project({});

const classFile = project.createSourceFile("src/MyClass.ts", `
class Foo {
/**
 * 
 */
}
`);
const classNode = classFile.getClasses()[0];
classNode.addConstructor({
  statements: "console.log('i am constructor');",
});
```
![image](https://user-images.githubusercontent.com/7971415/72313794-7b1b4d00-36c7-11ea-8792-6c0c54692f3e.png)

**Expected behavior**

<!-- A clear and concise description of what you expected to happen. -->
no error
<!-- If you are contributing this bug fix then please read the instructions in CONTRIBUTING.md -->

**Describe the bug**

Trying to add a property assignment to an object literal which exists inside of a CallExpression, but seems the formatting gets an extra level of indentation when doing so.

Version: 6.0.2

<!-- A clear and concise description of what the bug is. -->

**To Reproduce**

<!-- Clearly identify the problem and submit some reproduction code. Prune the reproduction code to remove needless details. State the actual behaviour. -->

```ts
import { Project, SyntaxKind } from 'ts-morph';

const project = new Project();
const sourceFile = project.createSourceFile('test.ts', `
const obj = doSomething({});
`);

const objLiteral = sourceFile.getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression)[0];
objLiteral.addPropertyAssignment({
    name: 'myProp',
    initializer: '42' 
});

console.log('sourceFile: ', sourceFile.getFullText());
```

**Expected behavior**

Would expect the output source file to be formatted as:

```ts
const obj = doSomething({
    myProp: 42
});
```

However it ends up being formatted as: 

```ts
const obj = doSomething({
        myProp: 42
    });
```

Add manipulation methods for `ObjectBindingPattern`.

From #772.
Builds on #15, but does this for the compiler object. Basically this allows users to get a compiler type checker and not have to worry about re-requesting it.
<!-- If you are contributing this feature change then please read the instructions in CONTRIBUTING.md -->

**Is your feature request related to a problem? Please describe.**
<!-- A clear and concise description of what the problem is. -->
No MappedTypeNode definition in ts-morph.
No TypeQueryNode definition in ts-morph.
No TypeOperatorNode definition in ts-morph.
I want to remove some nodes. I know the "remove" method only exists in wrapped node. Now I have a compiler node which is to be removed, but I don't know the way to get the wrapped node from a compiler node. I've tried "createWrappedNode" to get the wrapped node, but when it calls "remove" method, errors occurred. I want to know whether there is a way to get the removable wrapped node from a compiler node.