Trying to install the Emgu.CV nuget package to an Android project throws the following error:

Error	NU1202	Package ZedGraph 5.1.7 is not compatible with monoandroid81 (MonoAndroid,Version=v8.1). Package ZedGraph 5.1.7 supports: net35-client (.NETFramework,Version=v3.5,Profile=Client)

Thanks taking a look, any help is appreciated!
`VideoCapture webCam;
webCam.SetCaptureProperty(Emgu.CV.CvEnum.CapProp.Brightness, 100);
imagebox.image = webCam.QueryFrame();`

The above code set the brightness, but it did not apply. 
GetCaptureProperty(Emgu.CV.CvEnumWhen.CapProp.Brightness);
However, the brightness is set to 100.
Both commercial and open source nuget/zip builds of 3.4.3.3016 unable to decode TIF files with CCITT T6 compression.  While other builds work, this is the latest build in 3.x series covered by our commercial license.

 Emgu.CV.CvInvoke.Imread(fileName, Emgu.CV.CvEnum.ImreadModes.Grayscale) call fails with exception.

Sample file https://www.fileformat.info/format/tiff/sample/3f7fedbb3dc8499eb8845d5f13ba039b/download


My code _was_ structured like so:
```c#
CvInvoke.FindContours(img, contours, null, RetrType.List, contoursMethod);
for(int i = 0; i < count; i++)
{
     var moments = CvInvoke.Moments(contours[i]);

     Do Stuff...

     moments.Dispose()
     contours[i].Dispose()
}
```

I was witnessing a pretty serious memory leak, as my algorithm performs many iterations over this block. And it caused a significant performance hit because my application quickly became resource-constrained.

I had nitpicked various other sections. But profiling kept pointing VectorOfVectorOfPoint instances, So I switched out calls to Dispose() for using statements, the memory leak disappeared and performance was vastly improved!

```c#
CvInvoke.FindContours(img, contours, null, RetrType.List, contoursMethod);
for(int i = 0; i < count; i++)
{
     using(var contour = contours[i])
     {
          using(var moments =  CvInvoke.Moments(contour))
          {
...
          }
     }
}
```
One of these method implementations must be throwing exceptions internally or something weird is happening in unmanaged space. Because other than the exception handling aspect (ie. implicit finally block), calling Dispose() _should_ be no different than calling using{...}! I do make use of the Dispose() pattern in numerous places where I interact with emgucv, simply because the structure of the code lends itself to that. So it would be great to know if I need to consider changing these elsewhere.

I am using the commercial build of the latest version (4.1.1).
I'm using the Kalman Filter for tracking a signal. I've found that small changes to Measurement Noise can cause sudden instability in the Kalman Filter for no reason that I can work out.

For instance, here is the filter with a Measurement Noise of 9.962:
![image](https://user-images.githubusercontent.com/23379082/72218273-36f64400-3531-11ea-8b9b-a340b9d2cd3d.png)
(This is good - the  error at the start is because of poor initial estimates)

But if I lower the Measurement Noise to 9.961:
![image](https://user-images.githubusercontent.com/23379082/72218277-54c3a900-3531-11ea-8d8a-d3be4ab57f33.png)

You can see that there is a sudden spike in the values. I have no idea why this is happening, and I've used other implementations of the Kalman in python that don't do this.  

For my version below, processNoise is 0.001f

```
            KalmanFilter tracker = new KalmanFilter(4, 1, 0);
            var transitionMatrix = new Matrix<float>(new[,]
            {
                {1f, 1f, 0f, 0f},
                {0, 1, 1, 0},
                {0, 0, 1, 1},
                {0, 0, 0, 1}
            });
            var measurementMatrix = new Matrix<float>(new[,] { { 1f, 0, 0, 0 } });
            //measurementMatrix.SetIdentity();

            var procNoiseCov = new Matrix<float>(4, 4);
            procNoiseCov.SetIdentity(new MCvScalar(processNoise));

            var measurementNoise = new Matrix<float>(1, 1);
            measurementNoise.SetIdentity(new MCvScalar(measurementNoiseValue));

            var errorCovPost = new Matrix<float>(4, 4);
            errorCovPost.SetIdentity(new MCvScalar(10));

            transitionMatrix.Mat.CopyTo(tracker.TransitionMatrix);
            measurementMatrix.Mat.CopyTo(tracker.MeasurementMatrix);
            procNoiseCov.Mat.CopyTo(tracker.ProcessNoiseCov);
            measurementNoise.Mat.CopyTo(tracker.MeasurementNoiseCov);
            errorCovPost.Mat.CopyTo(tracker.ErrorCovPost);
            tracker.StatePost.SetTo(new float[] { 0, 1, 1, 1 });

            List<float> measurements = new List<float>();
            List<float> smoothed = new List<float>();
            foreach (var (dt, z) in times.Zip(values, (time, value) => (time, value)))
            {

                measurements.Add(z);
                //I'm using a constant time, even though I should be setting to dt. It doesn't affect the problem
                tracker.TransitionMatrix.SetValue(0, 1, 1);
                tracker.TransitionMatrix.SetValue(1, 2, 1);
                tracker.TransitionMatrix.SetValue(2, 3, 1);

                Matrix<float> measurement = new Matrix<float>(new[,] { { z } });
                Matrix<float> corrected = new Matrix<float>(4, 1);
                tracker.Correct(measurement.Mat).CopyTo(corrected);
                
                tracker.Predict();
                smoothed.Add(corrected[0,0]);
            }

            return (times, values, smoothed.ToArray());
```

I don't know enough about the inner workings of the Kalman filter to be able to guess what might be going wrong. 

I've attached the zvalues file in case it helps.

[ZValuesOnly.txt](https://github.com/emgucv/emgucv/files/4050612/ZValuesOnly.txt)

Hello, I build this Version from Master: https://github.com/emgucv/emgucv/commit/51534a15085978b2138ca21ae799dbf428e80cf8 on Ubuntu 18.04.
So far everything is working, but when I want to use tesseract I get not exactly a much-expressive error message.

 I also have Tesseract installed.

> tess@ubuntu:~$ tesseract -v
> tesseract 5.0.0-alpha
>  leptonica-1.75.3
>   libgif 5.1.4 : libjpeg 8d (libjpeg-turbo 1.5.2) : libpng 1.6.34 : libtiff 4.0.9 : zlib 1.2.11 : libwebp 0.6.1 : libopenjp2 2.3.0
> 
>  Found AVX2
>  Found AVX
>  Found FMA
>  Found SSE

Training files are from here: https://github.com/tesseract-ocr/tessdata

`bash: Line 1: 22238 Memory access error (memory dump written) /usr/share/dotnet/dotnet "KIRunnerStandard.dll" development
`
Also no memory dump has been written.

```
using (var ocr = new Emgu.CV.OCR.Tesseract("/home/tess/Tesseract/Tessdata", "eng", OcrEngineMode.Default))
            {
                ocr.PageSegMode = mode;
                ocr.SetImage(new Image<Gray, byte>("/home/tess/Tesseract/test.bmp"));
                return ocr.GetUTF8Text();
            }
```


Hi, I am trying to integrate the quantized Mobilenet SSD v2 model to unity. I am getting an "index out of bound exception"  while reading the width and height from the input tensor using the following command.
int height = CocoSsdMobilenet._inputTensor.Dims[1];

I checked my model and it appears to be fine.  Below is the screenshot of it.

![image](https://user-images.githubusercontent.com/57176923/69864508-f7cca600-1296-11ea-9e65-f3eb10abfd12.png)

if I am commenting these lines and initializing height and width as 300, on clicking on the play button unity engine is crashing with giving any exception. Please suggest.
Porting this project to .Net Core
I am trying to implement a video recording tool using emgucv. 
version: 4.1.1.3497

The user can select the preferred resolution and if the user does not select any preference, the app is supposed to choose the maximum resolution.
After some googling, I found many articles write that I can input dummy large values for frame height and width as follows.

capture.SetCaptureProperty(Emgu.CV.CvEnum.CapProp.FrameHeight, 55555);
capture.SetCaptureProperty(Emgu.CV.CvEnum.CapProp.FrameWidth, 55555);

After calling this, I inspected the frame width and height using GetCaptureProperty and it seems like the above did the trick because the returned frame width/height values seem to be the real maximum resolution.
But the problem is that the ImageGrabbed event handler is not being called for this maximum resolution. The worse thing is that it does not raise any exceptions. 

I tried to find a solution everywhere but no luck.
Hope the developers could help me with this issue.
Thanks in advance.
This code gives a memory leak:

static void Main(string[] args)
        {
            String mPath = String.Empty;

            if (args.Length == 1)
                mPath = args[0];

            if (Directory.Exists(mPath))
            {
                foreach (String mFilename in Directory.GetFiles(mPath, "*.jpg"))
                {
                    Mat mImage = CvInvoke.Imread(mFilename);

                    Bitmap mBitmap = mImage.ToImage<Bgr, Byte>().ToBitmap();

                    mBitmap.Dispose();
                    mImage.Dispose();
                }
            }

            MessageBox.Show("Done");
        }

When i change 

Bitmap mBitmap = mImage.ToImage<Bgr, Byte>().ToBitmap();

to

Image<Bgr, Byte> mX = mImage.ToImage<Bgr, Byte>();
Bitmap mBitmap = mX.ToBitmap();

the memory leak is gone.