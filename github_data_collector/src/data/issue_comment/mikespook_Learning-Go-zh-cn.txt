`cosmo:mmark cosmo$ make
2.0.46
go build`
`cosmo:mmark cosmo$ ls
LICENSE                 internal                mmark.go                rfc
Makefile                mast                    mmark_man_test.go       rfc_test.go
README.md               mmark                   mmark_markdown_test.go  schema
Syntax.md               mmark.1                 mmark_test.go           testdata
go.mod                  mmark.1.docheader       mparser                 version.go
go.sum                  mmark.1.md              render`
bin下面找了也没有
然后我又执行了一下生成的mmark没有反应
Three steps:
```shell
1. git clone
2. cd Learning-Go-zh-cn ;\
   git reset --hard 69b632b85fa7c2e8ec3606643779e64a1edc5d29
3. make
```
注意v1版本依赖很多latex的插件[编译环境的准备](https://github.com/mikespook/Learning-Go-zh-cn/tree/69b632b85fa7c2e8ec3606643779e64a1edc5d29)
> 建议docker 拉取一个Ubuntu环境来编译

---
## 自己编译的
链接: [网盘baidu](https://pan.baidu.com/s/1UvCfnSQUMWaUk-MzN-2AtQ) 提取码: rch8
编译之后的 html 打开只有前言和基础的一部分，看代码，master 分支中 md 文件也只有这两个，是文件删了还是我打开方式不对？
在ubuntu环境下， go version go1.2.1 linux/386， 执行go get github.com/mmarkdown/mmark报错：flag.CommandLine.Output undefined (type *flag.FlagSet has no field or method Output)

很奇怪现在Golang都是1.12.4版本了，为啥我的ubuntu 重新apt-get的版本还是1.2.1？
![image](https://user-images.githubusercontent.com/36698124/55329251-b940da80-54c0-11e9-8e71-e61eb26c5fce.png)

```shell
PS C:\Users\ThinkPad\Downloads\Learning-Go-zh-cn-master\Learning-Go-zh-cn-master> make
```

> mmark -html -head inc/head.html -css inc/book.css learninggo.md > learninggo.html
2019/04/01 20:56:17 Failure to read: "..\\src\\basics\\helloworld.go": path is not on or below "."

windows make命令使用不了，没有make这个命令
Hi there , 

I try to  make this project to get  the file of learninggo.html as  it is from ots makefile . But,  after i  downloaded and did a make with a failed output as follows  .  

BR
Michael
DATE:2018-12-23

======
C:\Learning-Go-zh-cn>make
mmark -html -head inc/head.html -css inc/book.css learninggo.md > learninggo.html
    767 [main] make 5952 fork: child 20552 - died waiting for dll loading, errno 11
make: fork: Resource temporarily unavailable

C:\Learning-Go-zh-cn>dir
 Volume in drive C is Windows
 Volume Serial Number is 76ED-D0DB

 Directory of C:\Learning-Go-zh-cn

12/23/2018  08:31 PM    <DIR>          .
12/23/2018  08:31 PM    <DIR>          ..
12/23/2018  08:31 PM                12 .gitignore
12/23/2018  08:31 PM    <DIR>          basics
12/23/2018  08:31 PM    <DIR>          fig
12/23/2018  08:31 PM    <DIR>          inc
12/23/2018  08:31 PM    <DIR>          introduction
12/23/2018  08:31 PM               560 learninggo.md
12/23/2018  08:31 PM               294 LICENSE
12/23/2018  08:31 PM               842 Makefile
12/23/2018  08:31 PM             4,625 preface.md
12/23/2018  08:31 PM               890 README.md
12/23/2018  08:31 PM    <DIR>          src
               6 File(s)          7,223 bytes
               7 Dir(s)  13,141,250,048 bytes free

C:\Learning-Go-zh-cn>
看了看，这太简单了吧。我已经手写了一个python版的，稍后改为go版本，如果提交一个完整版本的逆波兰式代码是提交到这里吗？还是提交英文版的这里（ https://github.com/miekg/learninggo ）
这一题的答案在这里：

https://github.com/mikespook/Learning-Go-zh-cn/blob/master/ex-channels/src/for-quit-chan.go

它的代码是这样的:

```go
func main() {
	ch := make(chan int)
	quit := make(chan bool)
	go shower(ch, quit)
	for i := 0; i < 10; i++ {
		ch <- i
	}
	quit <- false	// 或者是 true，这没啥关系
}

func shower(c chan int, quit chan bool) {
	for {
		select {
		case j := <-c:
			fmt.Printf("%d\n", j)
		case <-quit:
			break
		}
	}
}
```
main 程序在将`false`写入`quit`channel后就退出了，此时是不是仍然有可能`shower` Goroutine 没有从`quit`中接收到值，整个程序已经结束了。

我感觉这个逻辑应该是`show` Goroutine 写入值到`quit`channel中，然后main再等待结束吧。

```go
package main

import "fmt"

func show(ch chan int, quit chan bool) {
	for {
		val, ok := <-ch
		if !ok {
			break
		}
		fmt.Println("Get the", val)
	}

	quit <- true
}

func main() {
	ch := make(chan int)
	quit := make(chan bool)

	go show(ch, quit)
	for i := 0; i < 10; i++ {
		ch <- i
	}
	close(ch)

	<-quit
}
```
In my compiler, the following Enone/Einvalid are marked as RED, and cannot pass compile. I think the arr and sl shall not include them, and in map they shall be string? or you want to show other thing here?

	arr := [...]string{Enone: "no error", Einvalid:"invalid argument"}
	sl :=[]string{Enone: "no error", Einvalid:"invalid argument"}
	ma :=map[int]string{Enone: "no error", Einvalid:"invalid argument"}