- dropping test runs for Ruby 2.2.x and 2.3.x
- adding test runs under Ruby 2.5 and 2.6 
- testing against Rails 5.2 and Rails 6
Hi, I am using mailboxer for sending email messages to users.
I have the following working code:
`user.send_message(contact, message.body, message.subject)`
But I need to send an email to CC (carbon copy) as well. How can I send an email to CC address?
How do I use mailboxer in chat view without Inbox Outbox Sent or subject

Mailboxer produces the following warnings in Rails 6.0.0:

`DEPRECATION WARNING: update_attributes is deprecated and will be removed from Rails 6.1 (please, use update instead)`

see also: https://rubyinrails.com/2019/04/09/rails-6-1-activerecord-deprecates-update-attributes-methods/
when i do something like 
`current_user.send_message(nil, body, subject).conversation` 
reciever_id is current_user.id
In the message class, when your message validation fails in the deliver method (if valid? save!) then then message is not saved but the receipts where created successfully telling that there are no errors on them (what is correct).
So, there is a need to translate somehow the message validations errors to the send_message method in order to know what's happening.

In my case when I set body_max_length in malboxer.rb initializer and I send a message longer than its value, the message where not sent but the blank @receipts.errors may me think that it does. 

Thanks, MateoLa.

This is also related to Issues #435 and #117.
1) Looking at the mailboxer_notifications table is there any way to identify if a message is a reply?



2) What are the possible values for these fields as I only see them set to nil in the code.

"notification_code"
"notified_object_type"
"notified_object_id"


```
 create_table "mailboxer_notifications", id: :serial, force: :cascade do |t|
    t.string "type"
    t.text "body"
    t.string "subject", default: ""
    t.string "sender_type"
    t.integer "sender_id"
    t.integer "conversation_id"
    t.boolean "draft", default: false
    t.string "notification_code"
    t.string "notified_object_type"
    t.integer "notified_object_id"
    t.string "attachment"
    t.datetime "updated_at", null: false
    t.datetime "created_at", null: false
    t.boolean "global", default: false
    t.datetime "expires"
    t.index ["conversation_id"], name: "index_mailboxer_notifications_on_conversation_id"
    t.index ["notified_object_id", "notified_object_type"], name: "index_mailboxer_notifications_on_notified_object_id_and_type"
    t.index ["notified_object_type", "notified_object_id"], name: "mailboxer_notifications_notified_object"
    t.index ["sender_id", "sender_type"], name: "index_mailboxer_notifications_on_sender_id_and_sender_type"
    t.index ["type"], name: "index_mailboxer_notifications_on_type"
  end
```
I had to read the source code to do it.
I found this line makes it work so easy:
https://github.com/mailboxer/mailboxer/blob/master/app/models/mailboxer/mailbox.rb#L126

ActiveStorage support for attachment upload would be preferable.  Right now, we have to keep Carrierwave around simply because mailboxer needs it.