Noticed this while tinkering

warning: trait objects without an explicit `dyn` are deprecated
  --> src/errors.rs:26:30
   |
26 |     pub fn from_any(any: Box<any::Any>) -> Error {
   |                              ^^^^^^^^ help: use `dyn`: `dyn any::Any`
   |
   = note: `#[warn(bare_trait_objects)]` on by default
Hi, I'm exploring Rust as an extension for Ruby for a lot of expensive calculations. I made [a project that implements a simple financial algorithm](https://github.com/bbugh/ruby-rust-extension-benchmark) in six ways (Ruby, C, Helix, ruru, FFI). They are all implemented with the minimum viable code to allow Ruby to be able to call a Rust function `cash_flow`.

The benchmark for Helix was surprising, and I'm curious what is unique about Helix that causes the function calls to return Ruby so slowly in comparison with the other methods.

As you can see from the numbers below, helix's iterations per second when called from Ruby are almost half of ruru, C, and Ruby for a [simple function](https://github.com/bbugh/ruby-rust-extension-benchmark/blob/f6b5e4179d341235809559423a12db4aaa023894/crates/cash_flow_rust_helix/src/lib.rs#L16-L22):

```
Warming up --------------------------------------
         ruby method    203479 i/100ms
 rust helix instance    120885 i/100ms
    rust helix class    121661 i/100ms
      rust ffi class    161558 i/100ms
     rust ruru class    199846 i/100ms
             c class    221703 i/100ms
Calculating -------------------------------------
                      iterations per second     total iterations    time
         ruby method  4966573.4 (±6.8%) i/s -   24824438          in 5.022462s
 rust helix instance  1875397.8 (±6.1%) i/s -    9429030          in 5.046921s
    rust helix class  1852779.7 (±5.9%) i/s -    9246236          in 5.008588s
      rust ffi class  3082134.8 (±8.1%) i/s -   15348010          in 5.019943s
     rust ruru class  4275527.6 (±6.2%) i/s -   21383522          in 5.021156s
             c class  5483016.5 (±6.0%) i/s -   27491172          in 5.032074s
```

However, when running a criterion benchmark for the function within the Rust repository, the performance is superb:

```
Benchmarking cash_flow
Benchmarking cash_flow: Warming up for 3.0000 s
Benchmarking cash_flow: Collecting 100 samples in estimated 5.0000 s (955,252,950 iterations)
Benchmarking cash_flow: Analyzing
cash_flow               time:   [5.2014 ns 5.2626 ns 5.3245 ns]
Found 5 outliers among 100 measurements (5.00%)
  5 (5.00%) high mild
slope  [5.2014 ns 5.3245 ns] R^2            [0.8278649 0.8276527]
mean   [5.2079 ns 5.3387 ns] std. dev.      [268.40 ps 395.58 ps]
median [5.1706 ns 5.3213 ns] med. abs. dev. [208.08 ps 356.25 ps]
```

This is a significant difference between the actual function and whatever Helix is doing to connect Ruby to Rust. Obviously with interop there's going to be some performance drop, but as you can see the other methods were approximately comparable. 

I want to dig deeper into it because Helix was the best API and usability of all of the methods I tried, but I want to know exactly why the performance is inhibited before we implement critical code with it. Any ideas? Thank you!

This still doesn't work. @wycats I'd love your help on this.
Unfortunately, #148 broke specs when it was merged so I had to revert it. @konstin we'd love to have you take another go at it.
Hey guys,

I've been playing around with Helix tonight and so far it's been an awesome experience, thank you! I'm concerned about using it for a project however because it doesn't appear to be very actively maintained or worked on. The last commit was 10 months ago and a number of issues and pull requests have been languishing for a while too. Is Helix still going places?
On my computer (i686-linux-gnu) after successfully compiling any helix project, when the resulting `native.so` file is required I get this error:

```ruby
`require_relative': invalid symbol in encoding US-ASCII :"\xA8\xBF\x98\xBFt\xBF\xEB\xB7\x98\xAB\x9C\x01\x1C\xBF\x98\xBF\x18N\x86\xB7\xC6\xE0\x82\xB7\r\x12\x85\xB7" (EncodingError)
```

Tested with rust 1.30.0 toolchain, and 1.17 toolchain, ruby 2.5.1 and 2.5.3.

## example

Steps taken to reproduce:
```sh
helix bootstrap example
cd example
bundle exec rake build
bundle exec ruby lib/example.rb
```

final output:

```
lib/example.rb:4:in `require': invalid symbol in encoding US-ASCII :"\xA8\xB0\xEF\xBFt\xBF\xE8\xB7\x90k0\x01\x1C\xB0\xEF\xBFx\xCE\x86\xB7U\xD0\x83\xB7T\xCD\x85\xB7`\xC3\x90\x01x\xCE\x86\xB7F\xD0\x83\xB7P\xB0\xEF\xBF]-`" (EncodingError)
```

###

Interestingly, the binary string from the error message is different each time you invoke it, even with the same file.
A common pattern in Ruby is to use a hash for temporary structured data. Manually implementing such coercions results in fairly mechanical, repetitive code that would be ideally produced by a proc-macro.
Does Helix have a discussion community anywhere? I'm unable to find any references to one on the website.
* [ ] Release new libcruby-sys
* [ ] Fix Windows builds
* [ ] Bring back encoding checks