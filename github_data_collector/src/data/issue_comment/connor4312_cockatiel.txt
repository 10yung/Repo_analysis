Like https://github.com/DavideCarvalho/hystrixjsDecorator.
@irbrownie suggested RxJS integration, I think that would be neat, but am unsure of the API consistency we can provide.

 - Retry policies  work idiomatically within RxJS; they can work the same way as the built-in `retry` operator:

```js
request$.pipe(
  switchMap(() => getFromDatabaseOrWhatever()),
  toOperator(retryPolicy),
)
```

 - Bulkheads fit nicely as a `switchMap`/`mergeMap`-esque operator. It's basically a mergeMap with a limited queue size. The caveat is that if a call is rejected and emitted down the observable chain, the results from any ongoing calls will be unable to emit. Maybe we have a second `catchError`-like callback that maps the error?


```js
request$.pipe(
  toOperator(bulkhead, () => getFromDatabaseOrWhatever()), // 2 args, or curried perhaps
)

// error handler:
request$.pipe(
  toOperator(bulkhead,
    () => getFromDatabaseOrWhatever()
    err => shouldEmit(err) ? throwError(err) : EMPTY),
)
```

 - Circuit breakers and timeouts handles flow control upstream of making the request, so I don't there's any nice reactive behavior we can do there there; an upstream operator can't track downstream flow control, so it would need to just wrap whatever async call is being made: 

```js
request$.pipe(
  switchMap(() => circuitBreaker.execute(() => getFromDatabaseOrWhatever())),
)
```

 - I'm not sure there's any good way to handle wrapped policies, since not all of them can map to operators in the same way; we'd be reduced to using the 'mode of most control'--which is the circuit breaker example that lacks much reactive integration at all!

Open to any ideas/suggestions!