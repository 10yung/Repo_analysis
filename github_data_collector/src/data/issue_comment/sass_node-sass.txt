Adds some CI for the Alpine images to speed up releases.
If this works out, I might take a look at converting some of the others.
This also uploads the artifacts as a zip on successful builds. This could be modified to only run on tags later

Note: ran into an issue with the Node 8.17.0 alpine images. You can see an example log here https://gist.github.com/nschonni/491cd2ae724e1f24db3b76b37698ab1c
Main issues is probably around
```
2020-01-18T03:50:16.3975372Z npm ERR! Command failed: git clone --mirror -q https://github.com/sass/sass-spec.git /github/home/.npm/_cacache/tmp/git-clone-dbd532b1/.git
2020-01-18T03:50:16.3975793Z npm ERR! /github/home/.npm/_cacache/tmp/git-clone-dbd532b1/.git: Permission denied
```
where the git sass-spec is failing. Tried a bunch of troubleshooting, but just decided to pin to the previous version that was working.

PS: I don't think the CI will show up till this lands, but you can see the build here https://github.com/nschonni/node-sass/commit/c288e6067650d9ebd11980c6e320e8b409f422d8/checks?check_suite_id=407548884
This gets rid of "python2-only" issues

Signed-off-by: Richie Bendall <richiebendall@gmail.com>
- NPM version (`npm -v`): 6.12.0
- Node version (`node -v`): 10.13.0
- Node Process (`node -p process.versions`):
```
{ http_parser: '2.8.0',
  node: '10.13.0',
  v8: '6.8.275.32-node.36',
  uv: '1.23.2',
  zlib: '1.2.11',
  ares: '1.14.0',
  modules: '64',
  nghttp2: '1.34.0',
  napi: '3',
  openssl: '1.1.0i',
  icu: '62.1',
  unicode: '11.0',
  cldr: '33.1',
  tz: '2018e' }
```
- Node Platform (`node -p process.platform`): darwin
- Node architecture (`node -p process.arch`): x64
- node-sass version (`node -p "require('node-sass').info"`): This is the problem -- that script won't run!
- npm node-sass versions (`npm ls node-sass`): node-sass@4.12.0

I can get node-sass to successfully install (I have it as a dependency of hexo-renderer-sass, but have also tried a direct install), and while I get a successful install, the build fails to run. I get the following error:

> dyld: lazy symbol binding failed: Symbol not found: _sass_make_boolean
>   Referenced from: /Users/twils18/dev/one-amex-docs/node_modules/node-sass/vendor/darwin-x64-64/binding.node
>   Expected in: flat namespace
> 
> dyld: Symbol not found: _sass_make_boolean
>   Referenced from: /Users/twils18/dev/one-amex-docs/node_modules/node-sass/vendor/darwin-x64-64/binding.node
>   Expected in: flat namespace
> 
> Abort trap: 6

What's frustrating is that on clean pulls of this app on others' machines, **they don't have any problems.** So there's obviously some kind of machine/environment configuration that is required that we can't deduce from instructions or error messages.

I downloaded the darwin-x64-64 build from https://github.com/sass/node-sass/releases/tag/v4.12.0 and then ran `node -p "require('node-sass').info"` again and I get this, which seems to contradict itself...:

```
/Users/myProject/node_modules/node-sass/lib/binding.js:15
      throw new Error(errors.missingBinary());
      ^

Error: Missing binding /Users/myProject/node_modules/node-sass/vendor/darwin-x64-64/binding.node
Node Sass could not find a binding for your current environment: OS X 64-bit with Node.js 10.x

Found bindings for the following environments:
  - OS X 64-bit with Node.js 10.x

This usually happens because your environment has changed since running `npm install`.
Run `npm rebuild node-sass` to download the binding for your current environment.
    at module.exports (/Users/myProject/node_modules/node-sass/lib/binding.js:15:13)
    at Object.<anonymous> (/Users/myProject/node_modules/node-sass/lib/index.js:14:35)
    at Module._compile (internal/modules/cjs/loader.js:688:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:699:10)
    at Module.load (internal/modules/cjs/loader.js:598:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:537:12)
    at Function.Module._load (internal/modules/cjs/loader.js:529:3)
    at Module.require (internal/modules/cjs/loader.js:636:17)
    at require (internal/modules/cjs/helpers.js:20:18)
    at [eval]:1:1
```

Some other environment info:
Python version 3.7.5
Python 2.7.17 also installed (and referenced in the build output)
MacOS 10.14.6
Xcode 11.2.1, Build version 11B500
GNU Make 3.81
Apple clang version 11.0.0 (clang-1100.0.33.12)
Target: x86_64-apple-darwin18.7.0
Hello,

I wanted to know if it is possible (and useful) for other users (in enterprise environment) to create a static website for the binding.node files.

**Use case:** It is forbidden to directly download content from github.com. So node-sass fails because the binding.node files can't be downloaded. 
**Workaround:** Download and host every file on a private server. Set the SASS_BINARY_SITE environment variable to that server.
**Problem:** With every update builds are failing because new binding.node files are not in the private repo.
**Solution:** So the idea is to proxy it with e.g. an Nexus Proxy repository like it is possible with https://nodejs.org/dist

Best regards

This is from https://github.com/sass/node-sass/issues/1672#issuecomment-555096383 by @MartijnHols

Reproduction code is in https://github.com/EmicoEcommerce/node-sass-segfault-repro

I have traced this with a debug-enabled version of node-sass binding on FreeBSD.

- NPM version (`npm -v`): 6.12.0
- Node version (`node -v`): 12.13.0
- Node Process (`node -p process.versions`):{
  node: '12.13.0',
  v8: '7.7.299.13-node.12',
  uv: '1.32.0',
  zlib: '1.2.11',
  brotli: '1.0.7',
  ares: '1.15.0',
  modules: '72',
  nghttp2: '1.39.2',
  napi: '5',
  llhttp: '1.1.4',
  http_parser: '2.8.0',
  openssl: '1.1.1d',
  cldr: '35.1',
  icu: '64.2',
  tz: '2019a',
  unicode: '12.1'
}
- Node Platform (`node -p process.platform`): win32
- Node architecture (`node -p process.arch`): x64
- node-sass version (`node -p "require('node-sass').info"`): 
node-sass       4.13.0  (Wrapper)       [JavaScript]
libsass         3.5.4   (Sass Compiler) [C/C++]
- npm node-sass versions (`npm ls node-sass`): C:\laragon\www\drupal
`-- node-sass@4.13.0


Hey folks, I have a problem. I'm trying to run a node-sass --watch but my main.scss has many imports such as:
`node-sass --importer node_modules/node-sass-glob-importer/dist/cli.js --output-style compressed -o $npm_package_config_public/css $npm_package_config_source/css`

My main.scss :


// Variables
@import "variables";

// Base-theme overrides.
@import "overrides";

// Global definitions
@import "global/**/*";


And the problem here is, that when I wanna change something related to variables or overrides files. Node-sass didn't build the style. but if I add code to my main.scss yes...

PD: variables and overrides are named as _overrides.scss and _variables.scss

I'd like help from your side because I tried to search for this problem in this repository without luck.

node 13 with node-sass 4.13.0:

How to reproduce:

`~/node_modules/node-sass` contains node-sass 4.13.0 without any binding binary.

at the same time node-sass 4.13.0 is installed globally in `/usr/local/lib/node_modules/node-sass`
and contains the binary file.

```
> find /home/saper/node_modules/node-sass/vendor/ /usr/local/lib/node_modules/node-sass/vendor
/home/saper/node_modules/node-sass/vendor/
/home/saper/node_modules/node-sass/vendor/freebsd-x64-79
/usr/local/lib/node_modules/node-sass/vendor
/usr/local/lib/node_modules/node-sass/vendor/freebsd-x64-59
/usr/local/lib/node_modules/node-sass/vendor/freebsd-x64-59/binding.node
/usr/local/lib/node_modules/node-sass/vendor/freebsd-x64-79
/usr/local/lib/node_modules/node-sass/vendor/freebsd-x64-79/binding.node
```

The message trying to run `npm test` on https://github.com/lunelson/node-sass-error-trace is the following:

```
> npm t
^A^Nnpm WARN npm npm does not support Node.js v13.0.0
npm WARN npm You should probably upgrade to a newer version of node as we
npm WARN npm can't make any promises that npm will work with this version.
npm WARN npm Supported releases of Node.js are the latest release of 6, 8, 9, 10, 11, 12.
npm WARN npm You can find the latest version at https://nodejs.org/

> @lunelson/node-sass-err@1.0.0 test /home/saper/sw/node-sass-error-trace
> node test.js

/home/saper/node_modules/node-sass/lib/binding.js:15
      throw new Error(errors.missingBinary());
      ^

Error: Missing binding /home/saper/node_modules/node-sass/vendor/freebsd-x64-79/binding.node
Node Sass could not find a binding for your current environment: FreeBSD 64-bit with Node.js 13.x

Found bindings for the following environments:
  - FreeBSD 64-bit with Node.js 13.x

This usually happens because your environment has changed since running `npm install`.
Run `npm rebuild node-sass` to download the binding for your current environment.
    at module.exports (/home/saper/node_modules/node-sass/lib/binding.js:15:13)
    at Object.<anonymous> (/home/saper/node_modules/node-sass/lib/index.js:14:35)
    at Module._compile (internal/modules/cjs/loader.js:958:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:994:10)
    at Module.load (internal/modules/cjs/loader.js:813:32)
    at Function.Module._load (internal/modules/cjs/loader.js:725:14)
    at Module.require (internal/modules/cjs/loader.js:850:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.<anonymous> (/home/saper/sw/node-sass-error-trace/test.js:1:12)
    at Module._compile (internal/modules/cjs/loader.js:958:30)
npm ERR! Test failed.  See above for more details.
```

As strange as this situation is, we should never say "Missing binding for FreeBSD 64-bit with Node.js 13.x, found binding for FreeBSD 64-bit with Node.js 13.x"
When building node-sass (v4.13.0) with the node engine that does not bundle uv we may get 
a problem with not finding `<uv.h>` in the right place.

    > node -p process.config.variables.node_shared_libuv
    true

    > node -p process.versions
```js
{
  node: '13.0.0',
  v8: '7.8.279.17-node.14',
  uv: '1.33.0',
  zlib: '1.2.11',
  brotli: '1.0.7',
  ares: '1.15.0',
  modules: '79',
  nghttp2: '1.39.2',
  napi: '5',
  llhttp: '1.1.4',
  openssl: '1.1.1a-freebsd',
  cldr: '36.0',
  icu: '65.1',
  tz: '2019c',
  unicode: '12.1'
}
```
    > node -p process.config  
```js
{
  target_defaults: {
    cflags: [],
    default_configuration: 'Release',
    defines: [ 'NODE_OPENSSL_CERT_STORE' ],
    include_dirs: [
      '/usr/local/include',
      '/usr/local/include',
      '/usr/local/include'
    ],
    libraries: [
      '-lz',
      '-L/usr/local/lib',
      '-luv',
      '-L/usr/local/lib',
      '-lcares',
      '-lnghttp2',
      '-lcrypto',
      '-lssl',
      '-L/usr/local/lib',
      '-licui18n',
      '-licuuc',
      '-licudata'
    ]
  },
  variables: {
    asan: 0,
    build_v8_with_gn: false,
    coverage: false,
    debug_nghttp2: false,
    enable_lto: false,
    enable_pgo_generate: false,
    enable_pgo_use: false,
    force_dynamic_crt: 0,
    host_arch: 'x64',
    icu_gyp_path: 'tools/icu/icu-system.gyp',
    icu_small: false,
    icu_ver_major: '65',
    is_debug: 0,
    llvm_version: '6.0',
    napi_build_version: '5',
    node_byteorder: 'little',
    node_code_cache: 'yes',
    node_debug_lib: false,
    node_enable_d8: false,
    node_install_npm: false,
    node_module_version: 79,
    node_no_browser_globals: false,
    node_prefix: '/usr/local',
    node_release_urlbase: '',
    node_report: true,
    node_shared: false,
    node_shared_cares: true,
    node_shared_http_parser: false,
    node_shared_libuv: true,
    node_shared_nghttp2: true,
    node_shared_openssl: true,
    node_shared_zlib: true,
    node_tag: '',
    node_target_type: 'executable',
    node_use_bundled_v8: true,
    node_use_dtrace: true,
    node_use_etw: false,
    node_use_large_pages: false,
    node_use_large_pages_script_lld: false,
    node_use_node_snapshot: true,
    node_use_openssl: true,
    node_use_v8_platform: true,
    node_with_ltcg: false,
    node_without_node_options: false,
    openssl_fips: '',
    openssl_is_fips: false,
    shlib_suffix: 'so.79',
    target_arch: 'x64',
    v8_enable_gdbjit: 0,
    v8_enable_i18n_support: 1,
    v8_enable_inspector: 1,
    v8_no_strict_aliasing: 1,
    v8_optimized_debug: 1,
    v8_promise_internal_field_count: 1,
    v8_random_seed: 0,
    v8_trace_maps: 0,
    v8_use_siphash: 1,
    v8_use_snapshot: 1,
    want_separate_host_toolset: 0
  }
}

```
@xzyfer can we push 4.13.0 to include this? unfortunately the binaries have to be re-built

Fixes #2621