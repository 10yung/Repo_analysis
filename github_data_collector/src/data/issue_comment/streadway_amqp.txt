I want to retry `Dial()` if it fails, but only if it's reasonable to do so.

- It's reasonable if the connection was refused (RabbitMQ has not yet started when my app is starting), or if the connection is reset (network problem, RabbitMQ restart).
- It's unreasonable if the url is invalid (`ParseURI()` fails).

It would help to use Go 1.13's new errors. The readme says:
```
This library supports two most recent Go release series, currently 1.10 and 1.11.
```
Would therefore a patch using Go 1.13's new errors (and thus breaking compatibility with Go 1.12) be accepted once Go 1.14 is released?




I am publishing messages to rabbitMQ at a small rate (30/s). If I close the connection after the message publishes, it is giving me the below error.

```
fatal error: concurrent map read and map write

goroutine 10 [running]:
runtime.throw(0x18e7d4f, 0x21)
        /usr/local/Cellar/go/1.13.1/libexec/src/runtime/panic.go:774 +0x72 fp=0xc00005fe28 sp=0xc00005fdf8 pc=0x102fcc2
runtime.mapaccess1(0x17be000, 0xc0000c4690, 0xc00005fe9e, 0x1)
        /usr/local/Cellar/go/1.13.1/libexec/src/runtime/map.go:411 +0x269 fp=0xc00005fe70 sp=0xc00005fe28 pc=0x100f889
github.com/streadway/amqp.(*Connection).dispatchN(0xc0002c8000, 0x1a0ac80, 0xc0004c0f60)
        /Users/pardhasaradhi/go/pkg/mod/github.com/streadway/amqp@v0.0.0-20190827072141-edfb9018d271/connection.go:473 +0x8c fp=0xc00005fec0 sp=0xc00005fe70 pc=0x16ed13c
github.com/streadway/amqp.(*Connection).demux(0xc0002c8000, 0x1a0ac80, 0xc0004c0f60)
        /Users/pardhasaradhi/go/pkg/mod/github.com/streadway/amqp@v0.0.0-20190827072141-edfb9018d271/connection.go:436 +0x87 fp=0xc00005fee8 sp=0xc00005fec0 pc=0x16ecc57
github.com/streadway/amqp.(*Connection).reader(0xc0002c8000, 0x2419078, 0xc000010080)
        /Users/pardhasaradhi/go/pkg/mod/github.com/streadway/amqp@v0.0.0-20190827072141-edfb9018d271/connection.go:528 +0xf4 fp=0xc00005ffc8 sp=0xc00005fee8 pc=0x16ed414
runtime.goexit()
        /usr/local/Cellar/go/1.13.1/libexec/src/runtime/asm_amd64.s:1357 +0x1 fp=0xc00005ffd0 sp=0xc00005ffc8 pc=0x105c891
created by github.com/streadway/amqp.Open
        /Users/pardhasaradhi/go/pkg/mod/github.com/streadway/amqp@v0.0.0-20190827072141-edfb9018d271/connection.go:233 +0x260
```
My code:

```
func Publish(name string, body []byte) {
    channel, err := connection.Channel()
    defer channel.Close() // commenting out this does not cause any errors but too many channels are left.
    err := channel.Publish("", name, false, false, amqp.Publishing{
        DeliveryMode: amqp.Persistent,
        ContentType:  "text/plain",
        Body:         body,
    })
    util.HandlerError(err, "Could not publish message for mq : "+name)
}
```
currently I am using the 0.9.1 version of this library and found that QueueInspect() does not return a error for me when it doesn't exist and returns an empty amqp.Queue struct. 

the implementation fails on a basic connect, channel call and queueinspect call to a localhost instance. let me know if you are able to replicate this issue. 
Follow up on #403 I made this PR to demonstrate how to create a pool of publishers on 1 connection. The example focuses on how the pool can be constructed and used, many details are omitted such as:
- Error handling
- Publish confirm handling
- Connection redialing
- etc.
I can not found document that support connection pool.

In the web, connection pool is necessary that avoid connect and reconnect ..
Hi,

Is there anyway to add max retry functionality like Laravel --tries=3 ?

I think every reject action, consumer can add a property if not exist to the message like "attempts_count" = 1 and if exists, increment like "attempts_count" = 2. This functionality will be great and can implement on Delivery - Reject and Nack ??
https://github.com/streadway/amqp/blob/edfb9018d2714e4ec54dbaba37dbfef2bdadf0e4/connection.go#L233

 I am working on a reconnect function for my company's project. What I found is that, when I keep publishing large volume of data, NotifyClose() doesn't receive any error on connection close. However, if I add a small delay (10us) between each publish, NotifyClose() works as expected. My guess is that, large amount of "publish" are scheduled in the CPU / go runtime queue before "notify".

To reproduce the error:
1. Spin up a rabbitmq server (in docker)
2. Run a publisher script to keep sending message to server, no delay between each send. In the meantime, another goroutine is listening on NotifyClose() and prints out any error.
3. Restart rabbitmq server (docker restart ...)

Here is what *Channel.Puhlish() returns:

```
2019/10/15 16:40:48 write tcp 127.0.0.1:37772->127.0.0.1:5672: write: broken pipe
2019/10/15 16:40:48 write tcp 127.0.0.1:37772->127.0.0.1:5672: write: broken pipe
2019/10/15 16:40:48 write tcp 127.0.0.1:37772->127.0.0.1:5672: write: broken pipe
2019/10/15 16:40:48 write tcp 127.0.0.1:37772->127.0.0.1:5672: write: broken pipe
2019/10/15 16:40:48 Exception (504) Reason: "channel/connection is not open"
2019/10/15 16:40:48 Exception (504) Reason: "channel/connection is not open"
2019/10/15 16:40:48 Exception (504) Reason: "channel/connection is not open"
2019/10/15 16:40:48 Exception (504) Reason: "channel/connection is not open"
2019/10/15 16:40:48 Exception (504) Reason: "channel/connection is not open"
```

I want to confirm my assumption, and see if adding a small delay (10us) between each publish is a correct and robust solution. Thanks for the help in advance.


I was trying to build hyperledge fabric source code which is in `Go` and modified it to include `amqp` in imports.
I'm facing this issue, 

```
âžœ  fabric git:(elastico) make dist-clean all release docker
Building .build/docker/bin/orderer
orderer/consensus/elastico/connection.go:7:2: cannot find package "github.com/streadway/amqp" in any of:
	/opt/gopath/src/github.com/hyperledger/fabric/vendor/github.com/streadway/amqp (vendor tree)
	/opt/go/src/github.com/streadway/amqp (from $GOROOT)
	/opt/gopath/src/github.com/streadway/amqp (from $GOPATH)
Makefile:232: recipe for target '.build/docker/bin/orderer' failed
make: *** [.build/docker/bin/orderer] Error 1

```

Despite `GOPATH, GOROOT` being set and `amqp` is available in `GOPATH`, it is not running. 
Can someone point me how to solve this issue?
Hi, all. I'd like to ask how to return message to the end of queue in rabbitmq?

Example:
- Message1 gets consumed and creates some record in database.
- Message2 gets consumed and checks if there is record in database, and if yes, then it updates the record. If there is no record in database, message should be returned to the end of queue.

The Code below did not work.
```  
    for delivery := range msg {
               exist := check()
		if exist != nil { //yes
                        update()
			err := delivery.Ack(false)
			logger.Info("Ack error : ", err)
		} else { // no
			// err := delivery.Reject(true)
			err := delivery.Nack(false, true)
			logger.Info("Reject error : ", err)
		}
   }
```
Thanks in advance.
This has been discussed in #125, #280 and  #312, but there are a few new things to consider.

In 2017 @michaelklishin said :
> Maybe once Go adopts an official package management tool, this can be revisited.
It is not default yet, but it exists.

Go [Modules](https://github.com/golang/go/wiki/Modules) is a thing since GO1.11, and although it is still being discussed, the semantic versioning is a key part to make it more viable, just like it is key for every other package manager out there.

Without it, a mod file looks like this:
```
module amqp/client

go 1.12

require (
	github.com/google/uuid v1.1.1
	github.com/streadway/amqp v0.0.0-20190404075320-75d898a42a94
)
```

Even without modules, release tags can be used by tools like [gopkg.in](http://labix.org/gopkg.in) to have imports like `gopkg.in/yaml.v1`

This is not only helpful, but also a good practice. This project is stable, but repositories without 1.x release tags are usually considered unstable.

Shall we discuss some more ?