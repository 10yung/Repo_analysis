In that, 60 other people could be sharing the same public IP address? Assume it would...
Hi, I have two questions
1) is pwnat applicable for symmetric NAT? how about two symmetric NATs?
2) can ICMP Time Exceeded message payload be used to transport data?

I encountered a enterprise NAT, which does the following:
1) host A, inside the NAT, binds a UDP socket to a local address, say 10.0.0.1:8888
2) A sends a packet to another public host B 101.0.0.1:9000, B sees A as 110.0.0.1:8888
3) A sends a packet to host B 101.0.0.1:9001 using the same socket, B now sees A as 110.0.0.2:8888
4) host C is behind another NAT. host A and C both drop packets from unknown origin

I would like to build a tunnel between A and C, traditional p2p hole punching method won't work, because when A tries to connect C, it's using a different public address than B sees. I don't think the original pwnat is designed to solve these kind of problems, it seems that pwnat focused on removing dependency on host B? https://samy.pl/pwnat/ says that "This will work behind many NATs and firewalls, but not all.", does that intended to mean symmetric NAT is not supported? in this case, the problem lies exactly that C don't know what the public address of A is.

I intercepted some ICMP Time Exceeded messages for ICMP ping requests, the original ping body was included in the Time Exceeded reply. can we modify the reply, use that part to encode some data? will the modified packet be accepted and routed correctly by NATs?

I'm trying to build a prototype that can penetrate symmetric NATs. I'm new to the field, succeeded in getting ICMP Time Exceeded replies by modifying TTL, but still learning about how to read ICMP Time Exceeded replies from OS.
can this method be adapted to run on iOS, and work iPhone to iPhone over a carrier network?
> Note: pwnat defaults source and destination ports to 2222.

Most NAT would change source port to another number, while by monitoring data out NAT we can watch that. So to get the real source port out NAT, we need a third server to monitor that, maybe like N2N does.

Hi,

I have a web server accessed with port 80 behind NAT and there is no way to port forwarding since the ISP itself block the port. So I hope this will help to to solve the problem.

I started "pwnat -s" on the webserver machine. Then on a client want to connect to the server I run "pwnat -c 8500 202.62.16.132 127.0.0.1 80". 202.62.16.132 is the public ip address of the web server.

Then I open browser and navigate to localhost:8500. But it failed with error "Bind failed". What does it mean?

Thank you so much.
As usual great work!!!!

I am facing an issue when trying to run pwnat..

When trying this command 
sudo ./pwnat -c 4444 192.168.1.29 adobe.com 80 and trying to access the local port in the browser, browser shows connection reset. And pwnat outputs as below:
Client 48276 disconnected.
Client 48277 disconnected.
Client 48278 disconnected.

Thanks in advance..

Hello,

I have started a server with this command
./pwnat -s 192.168.1.3 (accessible with 2222 port)

Client A with
./pwnat -c 172.16.16.2 3333 41.41.41.41 2222 (41.41.41.41 is the public ip of the server)

Another client B with
./pwnat -c 127.0.0.1 2222 41.41.41.41 2222 172.16.16.2 23
I have tried also in client B
./pwnat -c 127.0.0.1 2222 41.41.41.41 2222 42.42.42.42 23 (where 42.42.42.42 is the public IP of client A)

Client B want to telnet client A : 
telnet 12.0.0.1 2222
but it is not working !

Any help please

Using gcc 4.7.3 on FreeBSD 10.0-RELEASE x86-64:

``` sh
root@Ramiel:~/pwnat/pwnat-master # uname -a
FreeBSD Ramiel 10.0-RELEASE FreeBSD 10.0-RELEASE #0 r260789: Thu Jan 16 22:34:59 UTC 2014     root@snap.freebsd.org:/usr/obj/usr/src/sys/GENERIC  amd64
root@Ramiel:~/pwnat/pwnat-master # gcc47 --version
gcc47 (FreeBSD Ports Collection) 4.7.3
Copyright (C) 2012 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

root@Ramiel:~/pwnat/pwnat-master # ls
.gitignore              Makefile.Win32          client.h                gettimeofday.c          message.c               pwnat.c                 strlcpy.c               xgetopt.h
COPYING-pingtunnel      README                  common.h                gettimeofday.h          message.h               pwnat.core              udpclient.c
Changes                 README-udptunnel        destination.c           list.c                  packet.c                socket.c                udpserver.c
Makefile                client.c                destination.h           list.h                  packet.h                socket.h                xgetopt.c
root@Ramiel:~/pwnat/pwnat-master # head -27 Makefile | tail -7
# Uncomment appropriate one for the system this is compiling for
OS=LINUX
#OS=SOLARIS
#OS=CYGWIN

CC=gcc47
CFLAGS=-Wall -Wshadow -Wpointer-arith -Wwrite-strings -D ${OS}
root@Ramiel:~/pwnat/pwnat-master # gmake
gcc47 -Wall -Wshadow -Wpointer-arith -Wwrite-strings -D LINUX   -c -o socket.o socket.c
gcc47 -Wall -Wshadow -Wpointer-arith -Wwrite-strings -D LINUX   -c -o message.o message.c
gcc47 -Wall -Wshadow -Wpointer-arith -Wwrite-strings -D LINUX   -c -o strlcpy.o strlcpy.c
gcc47 -Wall -Wshadow -Wpointer-arith -Wwrite-strings -D LINUX   -c -o client.o client.c
gcc47 -Wall -Wshadow -Wpointer-arith -Wwrite-strings -D LINUX   -c -o packet.o packet.c
gcc47 -Wall -Wshadow -Wpointer-arith -Wwrite-strings -D LINUX   -c -o list.o list.c
gcc47 -Wall -Wshadow -Wpointer-arith -Wwrite-strings -D LINUX   -c -o destination.o destination.c
gcc47 -Wall -Wshadow -Wpointer-arith -Wwrite-strings -D LINUX   -c -o udpserver.o udpserver.c
gcc47 -Wall -Wshadow -Wpointer-arith -Wwrite-strings -D LINUX   -c -o udpclient.o udpclient.c
gcc47 -Wall -Wshadow -Wpointer-arith -Wwrite-strings -D LINUX -o pwnat pwnat.c socket.o message.o strlcpy.o client.o packet.o list.o destination.o udpserver.o udpclient.o
root@Ramiel:~/pwnat/pwnat-master # ./pwnat
usage: ./pwnat <-s | -c> <args>
  -c    client mode (default)
        <args>: [local ip] <local port> <proxy host> [proxy port (def:2222)] <remote host> <remote port>
  -s    server mode
        <args>: [local ip] [proxy port (def:2222)] [[allowed host]:[allowed port] ...]
  -6    use IPv6
  -v    show debug output (up to 2)
  -h    show this help and exit
root@Ramiel:~/pwnat/pwnat-master # ./pwnat -s
Segmentation fault (core dumped)
root@Ramiel:~/pwnat/pwnat-master #

```

Compiles and runs successfully on Debian 7 x86-64 using gcc 4.7.2.
