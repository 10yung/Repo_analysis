## What 🌱
I spotted `PBXBuildPhase` type is exposed publicly twice in the `PBXBuildPhase.swift`:

- First
```swift
    /// The build phase type of the build phase
    public var buildPhase: BuildPhase {
        fatalError("This property must be overriden")
    }
```

- Second
```swift
    /// Returns the build phase type.
    ///
    /// - Returns: build phase type.
    func type() -> BuildPhase? {
        return buildPhase
    }
```

I wonder if there is a reason behind that duplication?

## Proposal 🎉
We could deprecate and later remove the `type()` from the extension.
### Short description 📝
When creating a new project with SwiftUI checkbox, Xcode sets `ENABLE_PREVIEWS=YES`. It does not do so when setting storyboard as a default, but I have not found any drawbacks when it is set to yes, even if SwiftUI previews are not being used.

### Solution 📦
Add `ENABLE_PREVIEWS=YES` to build settings `.all`

Linked to https://github.com/tuist/tuist/pull/785

I am making a build file in swift to replace my Rakefile but as the subject says a newly generated xcodeproj creates schemes files

I made a simply change in 
XCScheme+BuildableReference.swift
```            
           if let blueprintIdentifier = element.attributes["BlueprintIdentifier"]  { 
//                throw XCSchemeError.missing(property: "BlueprintIdentifier")
                blueprint = .string(blueprintIdentifier)
            } else {
                blueprint = .string("")
            }
```

it all works fine. 

The aim was to add `environmentVariables` for the development



Xcode's integrated git source control features don't work with XcodeProj.

## Steps to reproduce
1. Clone XcodeProj (steps 1-3 from README.md)
    1. Git clone the repository `git@github.com:tuist/xcodeproj.git`.
    2. Generate xcodeproj with `swift package generate-xcodeproj`.
    3. Open `XcodeProj.xcodeproj`.
2. In Xcode: View → Version Editor → Show Version Editor

**Result:**
> **Could not load authors for file 'Sources/XcodeProj/Project/XcodeProj.swift'**
> Error: fatal: no such path 'Sources/XcodeProj/Project/XcodeProj.swift' in HEAD

Alternatively:
1. Step 1. i-iii from above
2. In Xcode: make a small change to some file
3. Source Control → Commit...
4. Enter Commit Message and hit Cmd-Return

**Result:**
> **The working copy “XcodeProj” failed to commit files.**
> error: pathspec 'Sources/XcodeProj/Project/XcodeProj.swift' did not match any file(s) known to git


## Context 🕵️‍♀️
The project doesn't have documentation at all. That makes it hard for developers to start using the project since they have to figure out how things work themselves.

## What 🌱
Add the following documentation pages:
- How Xcode projects are structured.
- Adding and removing objects from a project.
- Usage examples.
## Context 🕵️‍♀️
A pattern that I have seen when developers use the library is that they create new objects and forget to add them to the `pbxproj`. As a result, the write fails because those objects are not attached to any project.

## What 🌱
I think we can improve the API to codify that requirement so that developers don't need to think about that. CocoaPods' xcodeproj does it like that and

## Proposal 🎉
For each of the objects that are available, provide a constructor from their parent object:

```swift
let target = try project.addTarget(name: "MyNewTarget")
let configurationList = try target.addConfigurationList()
let configurations = try configurationList.addDefaults()
```

Note that the methods can throw when the object already contains a child *(if it only supports one)*, or has a child that is equal to the one being added.
## Context 🕵️‍♀️
As suggested [on this issue](https://github.com/tuist/xcodeproj/pull/365), Swift's `Codable` is not the most performant option for parsing the project plist file. Despite having introduced some improvements in that PR, there's still space for improvement.

## What 🌱
Evaluate the available options and replace Codable with he one that provides the best performance. There are companies with large projects that rely on xcodeproj for parsing and generating their projects so they'd benefit a lot from this improvement.

## References
- [Benchmark](https://github.com/bwhiteley/JSONShootout)
- [Marshal](https://github.com/utahiosmac/Marshal)
## Context 🕵️‍♀️
According to [this task](https://bugs.swift.org/browse/SR-8115) the only blocker to have support for Linux has been fixed.

## What 🌱
Make xcodeproj Linux compatible.

## Proposal 🎉
- Set up the CI pipeline to run on Linux.
- Check out and fix any other issues with the usage of Foundation APIs.