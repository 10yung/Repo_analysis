https://github.com/gothinkster/aspnetcore-realworld-example-app/blob/master/.dockerignore

This file doesn't have the `.git` folder in it but I think you would normally want to ignore that. Is that true?
Is there a reason that something like [Create.cs](https://github.com/gothinkster/aspnetcore-realworld-example-app/blob/master/src/Conduit/Features/Articles/Create.cs) has Create as a class instead of a namespace? I have also been frequently told that I should follow one class per file. Would it be better to have create be a folder with The command/validator/handler as classes inside of that folder?
I must have done something differently because someone would have raised a concern before this, but I could not get `_httpContextAccessor.HttpContext.User?.Claims?.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;` in `CurrentUserAccessor` to return a value. In fact, User.Claims was always empty.

I fixed the problem by adding `app.UseAuthentication();` above `app.UseMvc();` in `Startup.cs`, but I thought I'd mention this in case I did something wrong. How are others getting the claims to appear without this line?
Are OPTIONS action needed for CORS pre-flight requests?

See here: https://github.com/Dotnet-Boxed/Templates/blob/master/Source/Content/ApiTemplate/Controllers/CarsController.cs#L24-L64

```csharp
        /// <summary>
        /// Returns an Allow HTTP header with the allowed HTTP methods.
        /// </summary>
        /// <returns>A 200 OK response.</returns>
        [HttpOptions]
        [SwaggerResponse(StatusCodes.Status200OK, "The allowed HTTP methods.")]
        public IActionResult Options()
        {
            this.HttpContext.Response.Headers.AppendCommaSeparatedValues(
                HeaderNames.Allow,
                HttpMethods.Get,
                HttpMethods.Head,
                HttpMethods.Options,
                HttpMethods.Post);
            return this.Ok();
        }

        /// <summary>
        /// Returns an Allow HTTP header with the allowed HTTP methods for a car with the specified unique identifier.
        /// </summary>
        /// <param name="carId">The cars unique identifier.</param>
        /// <returns>A 200 OK response.</returns>
        [HttpOptions("{carId}")]
        [SwaggerResponse(StatusCodes.Status200OK, "The allowed HTTP methods.")]
        public IActionResult Options(int carId)
        {
            this.HttpContext.Response.Headers.AppendCommaSeparatedValues(
                HeaderNames.Allow,
                HttpMethods.Delete,
                HttpMethods.Get,
                HttpMethods.Head,
                HttpMethods.Options,
                HttpMethods.Patch,
                HttpMethods.Post,
                HttpMethods.Put);
            return this.Ok();
        }
```
Not sure, just glancing through the code, but in user Edit it doesn't seem like user names are required to be unique when editing?  all the code to deal with uniqueness is on create.

A current user could change their username to another users user name, 
Then they could edit again and then the firstordefault will likely give them access to the original user.




Should be able to update tags when an article is updated.
I'm playing around and am curious how one would pass creds or a token in an integration test? Would it be more appropriate to do so in a test that invokes a authorized controller and goes through the traditional request pipeline? Is there a way I can pass along a user's context when testing specific commands and/or queries outside of that pipeline?
Add caching on both db and http levels.
Add a graceful shutdown on app stop/restart.
Add an appropriate reaction to cancelled/aborted requests with `CancellationToken`.