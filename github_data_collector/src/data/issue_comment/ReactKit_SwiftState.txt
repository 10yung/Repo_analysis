
Hi

I'm having some trouble understanding the 'State & Event enums with associated values' example on the main project page.  I'm specifically confused by incomplete enum definitions ...

enum StrState: StateType {
    case str(String) ...
}
enum StrEvent: EventType {
    case str(String) ...
}

Can someone please respond to this question with a complete example or update the project README ?

Thanks
Dave
I'm using Xcode 9.4, and the v4.1.0 on cocoa pod doesn't compile. Could you fix it?
Apologies for creating an issue for this but it's hectic to keep track of your releases. Would be really helpful if you can start versioning it in a better way. Thanks. :)
CocoaPod doens't compile with Xcode 9.2
On carhage update, build fail:

carthage version: 0.27.0
xcode version: 9.2

Build Failed
	Task failed with exit code 65:
	/usr/bin/xcrun xcodebuild -project /Users/vml933/Documents/XCodeProject/PalLinkTest3/Carthage/Checkouts/SwiftState/SwiftState.xcodeproj -scheme SwiftState -configuration Release -derivedDataPath /Users/vml933/Library/Caches/org.carthage.CarthageKit/DerivedData/9.2_9C40b/SwiftState/4.1.0 -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath /var/folders/c6/cmhy9djd5y52994tjg3lsq7c0000gn/T/SwiftState SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO (launched in /Users/vml933/Documents/XCodeProject/PalLinkTest3/Carthage/Checkouts/SwiftState)

This usually indicates that project itself failed to compile. Please check the xcodebuild log for more details: /var/folders/c6/cmhy9djd5y52994tjg3lsq7c0000gn/T/carthage-xcodebuild.WbBQpz.log
Suggestions and comments about the design (not a bug.)

Should state be an attribute of the machine, or the object which is going through the machine?

My use case is a game having many tokens (AKA sprites) each having state and a state machine.  I don't mind each token owning an instance of StateMachine, but then I must configure each instance the same way (easy enough to workaround.)  But possibly a StateMachine should have a Design which is configured and passed to a StateMachine instance.

In other implementations of FSM 'context' seems to mean: the object which has state, which the state machine sets the state of,  and which is passed to all actions (what you call Handlers) for them to act on.  Your context is not the same thing?  Maybe a solution is a delegate for the state machine?

On another topic, I don't understand the use case for AnyState.  Is one use case adding transitions from any state to a reset state, so that you don't have to specify a transition from every state to the reset state?  Maybe you could explain in your document.  But I should read the code, and for example study what a transition from AnyState to AnyState would mean.

Thanks, SwiftState is rather elegant.

