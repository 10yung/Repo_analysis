When I visit my page at

 https://my-project.eu-central-1.elasticbeanstalk.com

I see the debug bar ok. But when I click the Folder icon to see previous requests, the console reports this error:

> Mixed Content: The page at 'https://my-project.eu-central-1.elasticbeanstalk.com/' was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint 'http://my-project.eu-central-1.elasticbeanstalk.com/_debugbar/open?max=20&offset=20'. This request has been blocked; the content must be served over HTTPS.

In my ELB config I have `APP_URL` set to `https://my-project.eu-central-1.elasticbeanstalk.com`.
At some point this didn't work anymore. The Middleware is defined and users debug is set to 1. The Middleware is defined and setting the config is called etc. If i set debugbar.enabled = true in the config debugbar is shown. Any ideas?

```php
class DebugBarMiddleware
{
    public function handle($request, Closure $next)
    {
        \Debugbar::disable();

        if (auth()->check() && auth()->user()->debug) {
                config(['app.debug' => true]);
                config(['debugbar.enabled' => true]);

                \Debugbar::enable();
        }

        return $next($request);
    }
}
```
I am Using the Form Filler Plugin to Fill the forms

[Form Filler ](https://chrome.google.com/webstore/detail/form-filler/bnjjngeaknajbdcgpfkgnonkmififhfo?hl=en)

And i am using InertiaJs which means all the Request are XHR.

So when i try try to fill a form with form filler Plugin Debugbar Switches to Random Previous Request History Which is shown in drop down.

[Error Gif](https://media.giphy.com/media/daIFW6acsLPc50as32/giphy.gif)

Steps to Reproduce:

Clone the [Repo ](https://github.com/ManojKiranA/ineretiatest)

Do Some Requests so it will create the Dropdown the Debugbar to view previous Requests

Install the Form Filler [Plugin](https://chrome.google.com/webstore/detail/form-filler/bnjjngeaknajbdcgpfkgnonkmififhfo?hl=en)

Click on Create Post 

Use Form Filler to Fill the Form.

Laravel Version: 6.9.0
Debugbar Version : v3.2.8
Inertia Laravel Adapter Version:  v0.1.3




I am new to this. I have noticed this for some time and I am unsure of whether it is my environment or something I have missed. 
in Facade.php I see  
`@method static void info(string $message)`
and in LaravelDebugBar.php it is
` @method void info(...$message)`

To stop the inspection I changed `string $message` to `...message` and now I don't get the inspection issue, which is what I would like. I don't think it is a good idea to modify the src.

Is this a bug?


Added numerical ordering for widgets list, such as: 
- Views list 
- SQL queries list

![Capture](https://user-images.githubusercontent.com/10369102/70889940-bb32d580-201e-11ea-94f5-7df945b0e76d.PNG)
Hello, I would like when setting the inactive debugbar, that the routes should also be removed.

Is there any way to do this? if so how? 

Thank you
currently debugbar is showing detected file for example like:

Views:
`layouts.auth (\resources\views\layouts\auth.blade.php)`

Route:
` \vendor\laravel\framework\src\Illuminate\Foundation\Auth\AuthenticatesUsers.php:18-21`

i usually manually find and open that file in an editor.
i think is better if we able to directly click that line to open it in an editor.

here is an example implementation by other lib: https://github.com/facade/ignition/blob/1.13.0/resources/js/components/Shared/editorUrl.js
I've written a middleware that ensures that only I can see the bar on my dev/staging servers, however when receiving a 404 anyone can see the bar. Is there a way to stop this?

```
class DebugbarMiddleware {

		/**
		 * Handle an incoming request.
		 *
		 * @param \Illuminate\Http\Request $request
		 * @param \Closure $next
		 * @return mixed
		 */
		public function handle ($request, Closure $next) {

			if (env('APP_DEBUGBAR', true) == true && env('APP_ENV') != 'testing') {
				if (auth()->user() && in_array(auth()->user()->email, [
						'my@email.com'])) {
					\Debugbar::enable();
				}
				else {
					\Debugbar::disable();
				}
			}
			else {
				\Debugbar::disable();
			}

			return $next($request);
		}
	}
```
Optionally, if you prefer, I can create another config variable
Hi!

Thanks for your awesome work on the DebugBar!\
I found no guidelines how to prepare a pull request. So please bare with me :)

For a project I am working on, I needed specific middleware run on every request.\
So I created the new configuration option `route_additional_middleware`.

The additional middleware is then appended to the existing `DebugbarEnabled` middleware.

Thanks for your time!

Best,
Peter