Currently `docker-compose.yml` and README assumes user has linux, but it's not always the case.

I replaced absolute linux paths with docker system volumes that allows to run in both windows and linux in the same manner. Checked it works as expected on my own Windows machine (tbh it's actually the reason I even changed it).
docker-compose:
```
version: '3.3'
services:
    postgre-10-2:
      image: sameersbn/postgresql:10-2
      restart: always
      container_name: pgdb
      network_mode: "host"
      ports:
        - "5432:5432"
      environment:
        - DEBUG=true
        - PG_TRUST_LOCALNET=true
        - DB_EXTENSION=uuid-ossp
      volumes:
        - /home/user/docker/postgre/vol:/var/lib/postgresql
```

log from `docker logs pgdb`:
```
...
‣ Loading uuid-ossp extension...
+ for extension in $(awk -F',' '{for (i = 1 ; i <= NF ; i++) print $i}' <<< "${DB_EXTENSION}")
+ echo '‣ Loading uuid-ossp extension...'
+ psql -U postgres -d postgres -c 'CREATE EXTENSION IF NOT EXISTS uuid-ossp;'
```

log from `docker events`:
```
2019-12-03T15:12:41.191052596+08:00 container create d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5 (com.docker.compose.config-hash=786a351522d7020c2dcd1c172158fa0decb44da978cf17c63e872b761fcc22ae, com.docker.compose.container-number=1, com.docker.compose.oneoff=False, com.docker.compose.project=postgre, com.docker.compose.service=postgre-10-2, com.docker.compose.version=1.24.0, image=sameersbn/postgresql:10-2, maintainer=sameer@damagehead.com, name=pgdb)
2019-12-03T15:12:41.450095699+08:00 network connect 5bef42660ab09450e831718926ee8f2f2547bdc3c6cb3c45104762848e8e30af (container=d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5, name=host, type=host)
2019-12-03T15:12:42.126997069+08:00 container start d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5 (com.docker.compose.config-hash=786a351522d7020c2dcd1c172158fa0decb44da978cf17c63e872b761fcc22ae, com.docker.compose.container-number=1, com.docker.compose.oneoff=False, com.docker.compose.project=postgre, com.docker.compose.service=postgre-10-2, com.docker.compose.version=1.24.0, image=sameersbn/postgresql:10-2, maintainer=sameer@damagehead.com, name=pgdb)
2019-12-03T15:12:44.959592293+08:00 container die d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5 (com.docker.compose.config-hash=786a351522d7020c2dcd1c172158fa0decb44da978cf17c63e872b761fcc22ae, com.docker.compose.container-number=1, com.docker.compose.oneoff=False, com.docker.compose.project=postgre, com.docker.compose.service=postgre-10-2, com.docker.compose.version=1.24.0, exitCode=1, image=sameersbn/postgresql:10-2, maintainer=sameer@damagehead.com, name=pgdb)
2019-12-03T15:12:45.149794923+08:00 network disconnect 5bef42660ab09450e831718926ee8f2f2547bdc3c6cb3c45104762848e8e30af (container=d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5, name=host, type=host)
2019-12-03T15:12:46.358351218+08:00 network connect 5bef42660ab09450e831718926ee8f2f2547bdc3c6cb3c45104762848e8e30af (container=d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5, name=host, type=host)
2019-12-03T15:12:47.028189059+08:00 container start d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5 (com.docker.compose.config-hash=786a351522d7020c2dcd1c172158fa0decb44da978cf17c63e872b761fcc22ae, com.docker.compose.container-number=1, com.docker.compose.oneoff=False, com.docker.compose.project=postgre, com.docker.compose.service=postgre-10-2, com.docker.compose.version=1.24.0, image=sameersbn/postgresql:10-2, maintainer=sameer@damagehead.com, name=pgdb)
2019-12-03T15:12:48.460662744+08:00 container kill d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5 (com.docker.compose.config-hash=786a351522d7020c2dcd1c172158fa0decb44da978cf17c63e872b761fcc22ae, com.docker.compose.container-number=1, com.docker.compose.oneoff=False, com.docker.compose.project=postgre, com.docker.compose.service=postgre-10-2, com.docker.compose.version=1.24.0, image=sameersbn/postgresql:10-2, maintainer=sameer@damagehead.com, name=pgdb, signal=15)
2019-12-03T15:12:49.352485145+08:00 container die d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5 (com.docker.compose.config-hash=786a351522d7020c2dcd1c172158fa0decb44da978cf17c63e872b761fcc22ae, com.docker.compose.container-number=1, com.docker.compose.oneoff=False, com.docker.compose.project=postgre, com.docker.compose.service=postgre-10-2, com.docker.compose.version=1.24.0, exitCode=1, image=sameersbn/postgresql:10-2, maintainer=sameer@damagehead.com, name=pgdb)
2019-12-03T15:12:49.574709710+08:00 network disconnect 5bef42660ab09450e831718926ee8f2f2547bdc3c6cb3c45104762848e8e30af (container=d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5, name=host, type=host)
2019-12-03T15:12:50.928353376+08:00 container stop d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5 (com.docker.compose.config-hash=786a351522d7020c2dcd1c172158fa0decb44da978cf17c63e872b761fcc22ae, com.docker.compose.container-number=1, com.docker.compose.oneoff=False, com.docker.compose.project=postgre, com.docker.compose.service=postgre-10-2, com.docker.compose.version=1.24.0, image=sameersbn/postgresql:10-2, maintainer=sameer@damagehead.com, name=pgdb)
2019-12-03T15:12:51.044218120+08:00 container destroy d8e2bd02581bb83dff57ed8b6fb87dba528d32f71413b9311ef47d9a640aa2d5 (com.docker.compose.config-hash=786a351522d7020c2dcd1c172158fa0decb44da978cf17c63e872b761fcc22ae, com.docker.compose.container-number=1, com.docker.compose.oneoff=False, com.docker.compose.project=postgre, com.docker.compose.service=postgre-10-2, com.docker.compose.version=1.24.0, image=sameersbn/postgresql:10-2, maintainer=sameer@damagehead.com, name=pgdb)
```

The extension is working fine, it is only missing double-quote on it due to dash ("-") character.
```
> psql -h localhost -U postgres -d postgres -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'
CREATE EXTENSION
```

update: running with `--env 'DB_EXTENSION="uuid-ossp"` will solve the issue as well.
9 --->10 ?
## Feature description
It would be nice to have a dedicated Docker tags for latest version of given Postgres line.

## Detailed information
It's good that you make tag for every new image release (instead of using just latest :) ), but it could be handy to be able to put `sameersbn/postgresql:10` or `sameersbn/postgresql
:11` in the Docker configuration to stay with the latest version of Postgres with a given line (to not end up with Postgres 12 having an application not compatible with it).

That would require to name the first release 11-1, followed by 11-2, 11-3 while the tag 11 (or `11-latest` at your preference) would be reserved for the latest release of 11.x. Of course `latest` would be the latest version in general.

What do you think about that?

Btw, thanks for developing that container! I've found it very useful, especially the `ENABLE_PLUGINS` parameter.
Thanks for providing this useful container. 

I have a question about two postgre config:  It seems you keep the default setting of `checkpoint_segments` to 5min and `checkpoint_completion_target` to 0.5. 

However, The [official document](https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server) recommends to set `checkpoint_segments` to at least `10`, which improves the performance:  "Unless you're running on a very small configuration, you'll almost certainly be better setting this to at least 10, which also allows usefully increasing the completion target."

The document also recommends to set `checkpoint_completion_target` to `0.9`, which is the more useful value and improves the performance: "You can spread those writes out further, lowering the average write overhead, by increasing the checkpoint_completion_target parameter to its useful maximum of 0.9"

Shall we change the default of `checkpoint_segments` to 10 and `checkpoint_completion_target` to 0.9 for better performance? 
Thanks.

The neat concept to create a point-in-time-backup by specifying REPLICATION_MODE=backup and `--volume /srv/docker/backups/postgresql.$(date +%Y%m%d%H%M%S):/var/lib/postgresql \`
does not work for a docker-compose file since the volume name cannot be resolved in the yaml syntax.
In order to allow for a declaration of a master and a backup container in a docker-compose file, it would be great if you could add an option, like BACKUP_SCHEDULE, that would persist the backup container continuously and creates a backup at regular time invervals defined by BACKUP_SCHEDULE in subfolders in the volume statically mounted to the container.

In order to illustrate my use case, consider the following docker-compose:
```
services:
  database:
    restart: always
    image: sameersbn/postgresql:latest
    environment:
      - DB_USER=XXXX
      - DB_NAME=XXXX
      - DB_EXTENSION=pg_trgm
      - USERMAP_UID=1001
      - USERMAP_GID=1001
      - REPLICATION_USER=repluser
    container_name: con_database
    env_file:
      - postgresql-env-secrets.env
    volumes:
      - '/srv/database:/var/lib/postgresql:z'
    networks:
      - net_database
  database_backup:
    restart: always
    image: sameersbn/postgresql:latest
    environment:
      - REPLICATION_MODE=backup
      - REPLICATION_SSLMODE=prefer
      - REPLICATION_HOST=database 
      - REPLICATION_PORT=5432
      - REPLICATION_USER=repluser
      - REPLICATION_PASS=XXXXX
      - BACKUP_SCHEDULE=10m
      - BACKUP_PATTERN=+%Y%m%d%H%M%S
    container_name: con_database_backup
    volumes: 
#  (THIS DOES NOT WORK)
#      - '/srv/database_backup/postgresql.$(date +%Y%m%d%H%M%S):/var
#STATIC FOLDER TO CREATE BACKUPS WITH PATTERN NAME
        - '/srv/database_backup:/var/lib/postgresql:z'      
    networks:
      - net_database    
```

In this setup, the backup container should ideally persist and create a backup every 10 minutes under a subfolder in the mounted volume /srv/database_backup using BACKUP_PATTERN

Would that be possible?

There were two bugs when trying to run the image on Synology NAS (DSM 6.2.1-23824 Update 4):
1) `initdb` failed because the permission of ${PG_HOME} was 000, and
2) `sed -i` failed because `sed` internally could not generate temporary
files

It now works fine on Synology NAS and Ubuntu 16.04 (with [sameersbn/docker-gitlab](https://github.com/sameersbn/docker-gitlab)).
I got this error when I run the container (any version: latest, 9:6, ...). 

**OS:** Debian 9.6
**Kernel:** 4.9.0-8-amd64

/var/lib/docker is a mount point (partition of 92GB only with that)

```
Initializing datadir...
Initializing certdir...
Initializing logdir...
Initializing rundir...
Setting resolv.conf ACLs...
Initializing database...
sudo: unable to stat /etc/sudoers: Permission denied
sudo: no valid sudoers sources found, quitting
sudo: unable to initialize policy plugin
```
In other server with same OS is working OK.
[reference to error mesage](https://stackoverflow.com/questions/49064209/getting-archiver-unsupported-version-1-13-in-file-header-when-running-pg-r)

The problem is only for version 9.5 and 9.6. PErhaps the new patching should be introduced.

Thank you
when a docker PostgreSQL container get crash/stop how could i recover data . is it any possible to recover ?