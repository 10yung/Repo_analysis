In case you would like to provision a cluster of dockerized virtual machines on Apache CloudStack, there is no corresponding plugin for that, right?
[Vendored libvirt](https://github.com/docker/infrakit/tree/master/vendor/github.com/libvirt) wasn't updated for a while. Please update to latest.
It looks like something wrong with metadata disk creation when using libvirt with init section.

```
# infrakit.yml
Tags:
  custom.tag1 : kvm
  custom.tag2 : single-instance

Init: |
  #!/bin/bash
  sudo apt-get update -y
  sudo apt-get install wget curl
  wget -qO- https://get.docker.com | sh

Properties:
  MetadataStoragePool: default
  Domain:
  Domain:
    Type: kvm
    Memory:
      Unit: GiB
      Value: 1
    VCPU:
      Value: 1
    OS:
      Type:
        Arch: x86_64
        Machine: pc-i440fx-2.8
        Type: hvm
      Initrd: /home/john/image/linuxkit-initrd.img
      Kernel: /home/john/image/linuxkit-kernel
      KernelArgs: console=ttyS0
      BIOS:
        UseSerial: 'yes'
        RebootTimeout: '1000'
      Boot:
        Dev: hd
    Devices:
      Interfaces:
      - Type: bridge
        Source:
          Bridge: virbr0
        Model:
          Type: virtio
      Serials:
      - Type: pty
      Consoles:
      - Type: pty
        Target:
          Type: serial
          Name: "0"
      Channels:
      - Type: unix
        Target:
          Type: virtio
          Name: org.qemu.guest_agent.0
    OnCrash: destroy
    OnPoweroff: destroy
    OnReboot: restart

```

```
$ infrakit local libvirt/default provision -y infra.yml

Creating Domain: virError(Code=1, Domain=10,
Message='internal error: process exited while connecting to monitor: 2018-10-14T01:55:55.456495Z qemu-system-x86_64:
-drive file=/var/lib/libvirt/images/infrakit-e21543c9-metadata,format=raw,if=none,id=drive-sata0-0-2,media=cdrom,readonly=on:
Could not open '/var/lib/libvirt/images/infrakit-e21543c9-metadata': Permission denied')
```

Couldn't figure out what's going on. It looks like metadata disk is copied with root permissions, but qemu is running under a different user?
What do I need first? Do I need to write a playbook?

I'm looking to setup something like this:
![infrastructure 9](https://user-images.githubusercontent.com/361985/46734679-b34e0780-cc9c-11e8-90b4-cdfe15e0464e.jpg)

It looks like currently infrakit supports CLI-based deployment using playbooks. Do I get it right?

So if I somehow create a playbook, I would be able to provision a libvirt-based instance?
If you following the tutorial [here](https://github.com/docker/infrakit/tree/master/docs/tutorial), you can provision an instance using the provided example file. However, continuing the example by committing a group fails with an error.

**To reproduce**
With infrakit started and using the provided group.yml file:
`infrakit local group commit -y ./group.yml --log-debug-V 0 --log 5`

**Result**
```bash
DBUG[09-25|18:58:54] reading template                         module=cli/core url=http://10.50.7.50/rosette/group.yml fn=github.com/docker/infrakit/pkg/cli.templateProcessor.func3
DBUG[09-25|18:58:54] rendered                                 module=cli/core view="#\r\n#  A group of workers\r\n#\r\n#  Start up -- plugin start should include manager, vanilla, simulator, and group\r\n#  Then commit\r\n#\r\n#  infrakit group controller commit -y docs/tutorial/group.yml\r\n#\r\nkind: group\r\nmetadata:\r\n    name: workers\r\nproperties:\r\n    Allocation:\r\n      Size: 5\r\n    Flavor:\r\n      Plugin: vanilla\r\n      Properties:\r\n        Init:\r\n          - sudo apt-get update -y\r\n          - sudo apt-get install wget curl\r\n          - wget -qO- https://get.docker.com | sh\r\n        Tags:\r\n          custom.tag1 : tutorial\r\n          custom.tag2 : single-instance\r\n          custom.tag3 : by-group\r\n\r\n    Instance:\r\n      Plugin: simulator/compute\r\n      # This section here for the Instance plugin is the same as the example\r\n      # for creating a single instance.  The Tags and Init sections are now\r\n      # handled by the Flavor plugin\r\n      Properties:\r\n        apiProperty1 : value1\r\n        apiProperty2 : value2" fn=github.com/docker/infrakit/pkg/cli.templateProcessor.func3
DBUG[09-25|18:58:54] looking up controller backend            module=run/scope name=group fn=github.com/docker/infrakit/pkg/run/scope.fullScope.Controller.func1
DBUG[09-25|18:58:54] Discovered plugin                        module=discovery/local address=/.infrakit/plugins/group V=1000 fn=github.com/docker/infrakit/pkg/discovery/local.(*dirPluginDiscovery).List
DBUG[09-25|18:58:54] Discovered plugin                        module=discovery/local address=/.infrakit/plugins/group-stateless V=1000 fn=github.com/docker/infrakit/pkg/discovery/local.(*dirPluginDiscovery).List
DBUG[09-25|18:58:54] Discovered plugin                        module=discovery/local address=/.infrakit/plugins/simulator V=1000 fn=github.com/docker/infrakit/pkg/discovery/local.(*dirPluginDiscovery).List
DBUG[09-25|18:58:54] Discovered plugin                        module=discovery/local address=/.infrakit/plugins/vanilla V=1000 fn=github.com/docker/infrakit/pkg/discovery/local.(*dirPluginDiscovery).List
DBUG[09-25|18:58:54] Discovered plugin                        module=discovery/local address=/.infrakit/plugins/group V=1000 fn=github.com/docker/infrakit/pkg/discovery/local.(*dirPluginDiscovery).List
DBUG[09-25|18:58:54] Discovered plugin                        module=discovery/local address=/.infrakit/plugins/group-stateless V=1000 fn=github.com/docker/infrakit/pkg/discovery/local.(*dirPluginDiscovery).List
DBUG[09-25|18:58:54] Discovered plugin                        module=discovery/local address=/.infrakit/plugins/simulator V=1000 fn=github.com/docker/infrakit/pkg/discovery/local.(*dirPluginDiscovery).List
DBUG[09-25|18:58:54] Discovered plugin                        module=discovery/local address=/.infrakit/plugins/vanilla V=1000 fn=github.com/docker/infrakit/pkg/discovery/local.(*dirPluginDiscovery).List
DBUG[09-25|18:58:54] Client SEND                              module=rpc/client addr=/.infrakit/plugins/group payload="POST / HTTP/1.1\r\nHost: h\r\nContent-Type: application/json\r\n\r\n{\"jsonrpc\":\"2.0\",\"method\":\"Handshake.Hello\",\"params\":{},\"id\":1675921662065898680}" V=1100 fn=github.com/docker/infrakit/pkg/rpc/client.client.Call
DBUG[09-25|18:58:54] Client RECEIVE                           module=rpc/client addr=/.infrakit/plugins/group payload="HTTP/1.1 200 OK\r\nContent-Length: 318\r\nContent-Type: text/plain; charset=utf-8\r\nDate: Tue, 25 Sep 2018 18:58:54 GMT\r\n\r\n{\"jsonrpc\":\"2.0\",\"result\":{\"Objects\":{\"Controller/0.1.1\":[{\"Name\":\"groups\",\"ProxyFor\":\"\"},{\"Name\":\"\",\"ProxyFor\":\"\"}],\"Group/0.1.1\":[{\"Name\":\"groups\",\"ProxyFor\":\"\"}],\"Stack/0.1.1\":[{\"Name\":\".\",\"ProxyFor\":\"\"}],\"Updatable/0.1.1\":[{\"Name\":\"status\",\"ProxyFor\":\"\"},{\"Name\":\"vars\",\"ProxyFor\":\"\"}]}},\"id\":1675921662065898680}\n" V=1100 fn=github.com/docker/infrakit/pkg/rpc/client.client.Call
DBUG[09-25|18:58:54] Client SEND                              module=rpc/client addr=/.infrakit/plugins/group payload="POST / HTTP/1.1\r\nHost: h\r\nContent-Type: application/json\r\n\r\n{\"jsonrpc\":\"2.0\",\"method\":\"Controller.Commit\",\"params\":{\"Name\":\"group\",\"Operation\":0,\"Spec\":{\"kind\":\"group\",\"version\":\"\",\"metadata\":{\"name\":\"workers\",\"tags\":null},\"properties\":{\"Allocation\":{\"Size\":5},\"Flavor\":{\"Plugin\":\"vanilla\",\"Properties\":{\"Init\":[\"sudo apt-get update -y\",\"sudo apt-get install wget curl\",\"wget -qO- https://get.docker.com | sh\"],\"Tags\":{\"custom.tag1\":\"tutorial\",\"custom.tag2\":\"single-instance\",\"custom.tag3\":\"by-group\"}}},\"Instance\":{\"Plugin\":\"simulator/compute\",\"Properties\":{\"apiProperty1\":\"value1\",\"apiProperty2\":\"value2\"}}}}},\"id\":3751559271277998634}" V=1100 fn=github.com/docker/infrakit/pkg/rpc/client.client.Call
Error: Post http://h: net/http: request canceled (Client.Timeout exceeded while awaiting headers)
```

**Comments**
Outside of a potential regression, it seems as though the Group plugin is proxing for a real Controller implementation which does not exist in the tutorial setup. I can see some recent Controller implementations, but I am not sure which one to use in this case.
See the [Infrakit/Examples](https://github.com/infrakit/examples/blob/master/latest/swarm/aws/vpc.cfn) repository. This Cloudformation stack no longer works correctly, with the `cloudinit` failing when you select not to use the image pre-installed image, and the AMI not being found when you select to use the pre-installed image. 

This is an especially helpful example, so it would be nice to get it working again. 
The tutorial/instructions for getting LinuxKit working are confusing and/or out of date.

The POC video: 

https://www.youtube.com/watch?v=j50ovfRWpZM

appears to reference a demo playbook which does not exist.

The docs in the repo:

https://github.com/docker/infrakit/tree/master/docs/playbooks/linuxkit

don't create a valid/working playbook:

```
$ infrakit playbook add linuxkit https://docker.github.io/infrakit/playbooks/linuxkit/index.yml
WARN[02-18|19:31:30] Cannot build flags                       module=cli/playbook operation=scale-group url=https://docker.github.io/infrakit/playbooks/linuxkit/examples/sshd/hyperkit/scale-group.ikt err="template: https://docker.github.io/infrakit/playbooks/linuxkit/examples/sshd/hyperkit/scale-group.ikt:2: function \"managerCommit\" not defined" fn=github.com/docker/infrakit/pkg/cli/playbook.list
WARN[02-18|19:31:30] Cannot build flags                       module=cli/playbook operation=scale-group url=https://docker.github.io/infrakit/playbooks/linuxkit/examples/sshd/packet/scale-group.ikt err="template: https://docker.github.io/infrakit/playbooks/linuxkit/examples/sshd/packet/scale-group.ikt:2: function \"managerCommit\" not defined" fn=github.com/docker/infrakit/pkg/cli/playbook.list
found 1 commands cached file:///Users/mike/.infrakit/playbook-cache/linuxkit/infrakit/playbooks/linuxkit/index.yml
```
```
$ infrakit playbook ls
PLAYBOOK            	URL                                               	CACHE
linuxkit            	file:///Users/mike/build/infrakit/docs/playbooks/linuxkit/index.yml
```
```
$ infrakit playbook linuxkit -h


Manage playbooks

Usage:
  infrakit playbook [command]

Available Commands:
  add         Add a playbook
  ls          List playbooks
  rm          Remove playbooks
  update      Update a cached playbook

Flags:
  -q, --quiet   Print rows without column headers

Global Flags:
      --log int                       log level (default 4)
      --log-caller                    include caller function (default true)
      --log-debug-V int               log debug verbosity level. 0=logs all
      --log-debug-match stringSlice   debug mode only -- select records with any of the k=v pairs
      --log-debug-match-exclude       True to exclude; otherwise only include matches
      --log-format string             log format: logfmt|term|json (default "term")
      --log-stack                     include caller stack
      --log-stdout                    log to stdout

Use "infrakit playbook [command] --help" for more information about a command.
```
When launching infrakit local vagrant provision vagrant-centos7-vm.json I get the following:
CRIT[02-08|13:59:51] error executing                          module=main cmd=infrakit err="Post http://h: net/http: request canceled (Client.Timeout exceeded while awaiting headers)" fn=main.main
Post http://h: net/http: request canceled (Client.Timeout exceeded while awaiting headers)

It seems to be a cosmetic issue, but I don't know  if infrakit is wanting to keep state on the VM.  It looks like it  failed, but if you  look at the vagrant global-status you see:
$ vagrant global-status
id       name    provider   state   directory                           
------------------------------------------------------------------------
5c2ab1d  default virtualbox running /tmp/infrakit-473117891             

So obviously it succeeded.  Also the vagrant plugin seems happy.  
INFO[0051] Vagrant STDOUT:     default: Running: /tmp/vagrant-shell20180208-23141-vtiee6.sh
INFO[0051] Command completed, err= <nil>

Also I would think there would be a command like "infrakit local list" or "infrakit local vagrant list" to see running instances,  instead we have to check through vagrant.  
Pulled down code yesterday and was trying to get infrakit to launch with the vagrant plugin. Launched the plugin and the did a `infrakit local vagrant provision vagrant-centos7-vm.json.  I then get the error:
CRIT[02-08|08:08:43] error executing                          module=main cmd=infrakit err="Property 'Box' must be set" fn=main.main
Property 'Box' must be set

After some  investigation I see that something in 
github.com/docker/infrakit/pkg/provider/vagrant/plugin/instance/instance.go
must have changed in the method Provision.  Your expecting properties["Box"] to be a string, but actually it is a series of map[string]interface{}'s     I put some debug code in to see what was going on, the first set shows that spec.Properties is actually the following json:

Debug: spec.Properties ->  {"Instance":{"Plugin":"instance-vagrant","Properties":{"CPUs":1,"Memory":1024,"Box":"centos7"}},"Flavor":{"Plugin":"flavor-vanilla","Properties":{"Size":3,"UserData":["curl https://experimental.docker.com |sudo bash","sudo service docker start"],"Labels":{"tier":"docker-engines","project":"infrakit"}}}}

Debug: spec.Properties type ->  *types.Any

**I then print properties out and its type:**
Debug: properties ->  map[Flavor:map[Plugin:flavor-vanilla Properties:map[Size:3 UserData:[curl https://experimental.docker.com |sudo bash sudo service docker start] Labels:map[tier:docker-engines project:infrakit]]] Instance:map[Plugin:instance-vagrant Properties:map[CPUs:1 Memory:1024 Box:centos7]]]

Debug: properties type ->  map[string]interface {}

I modified the code in the instance file to what I believe your expecting by putting the following in:

--- a/pkg/provider/vagrant/plugin/instance/instance.go
+++ b/pkg/provider/vagrant/plugin/instance/instance.go
@@ -111,7 +111,7 @@ func (v vagrantPlugin) Provision(spec instance.Spec) (*instance.ID, error) {
                        return nil, fmt.Errorf("Invalid instance properties: %s", err)
                }
        }
-
+         **properties = properties["Instance"].(map[string]interface{})["Properties"].(map[string]interface{})**
        if properties["Box"] == nil {
                return nil, errors.New("Property 'Box' must be set")
        }

This temporarily fixes the issue and everything works.  I suspect the spec.Properties.Decode is to pass in only the  properties part which is "Properties":{"CPUs":1,"Memory":1024,"Box":"centos7"}, but instead it decodes and returns all of it burying properties 2 deep into a map[string]interface{}

I am not sure where the  proper place to fix this is though as the decode method is pretty straight forward and handles any input.
The group SPI has a `DescribeGroup`:
https://github.com/docker/infrakit/blob/master/pkg/spi/group/spi.go#L45

The group controller then called the instance plugin's `DescribeInstances`: https://github.com/docker/infrakit/blob/master/pkg/plugin/group/scaled.go#L142

Note that the `DescribeInstances` is hardcoded to `properties=true`. Depending on how the instance plugin is implemented, this can cause a lot of processing. When the group controller does it's normal processing (to determine the group is of the appropriate size) these additional attributes are not even used. Therefore, most of the group <-> instance communications is asking for additional properties that are never used.

Note that when the enrollment and ingress controllers retrieve the group members, we do need the additional properties.

Can we somehow update the SPI to expose `properties` boolean? This would reduce the processing done in the instance plugin.

Note, for the terraform provider, every `DescribeInstances` API with `properties=true` results in a `Command.Exec` to `terraform show`; my investigations show that this does not scale. Our deployment has 3 groups, 1 enrollment controller, and 1 ingress controller (managing 3 L4 load balancers) -- this results in dozens of `DescribeInstances` invocations per minute.  FWIW, I'm working on caching the instances to help mitigate this issue; however, IMO, the SPI should expose the `properties` boolean.

Thoughts on what should be done to the SPI?