Adds a `listOfN` and `option` combinators to the `Gen` companion object, making it much easier to generate lists of elements of a given size and optionals, which could be needed to implement generators for case classes.

Also, to help implementing the previous, I'm generalizing the picklers for _containers_ (collections & `Option`) since they can be easily derived using implicits and the current pickler implementations.
When using Scala 2.12.8 Scalameter 0.19 fails with the sample test throwing:
```
Exception in thread "main" java.lang.NoClassDefFoundError: scala/jdk/CollectionConverter
...
Caused by: java.lang.ClassNotFoundException: scala.jdk.CollectionConverters
...
```
Could it be related to CollectionConverters being removed on 2.13 standard Scala but present in 2.12?
It appears that scalameter fails to run on jdk11 

https://travis-ci.org/bitcoin-s/bitcoin-s/jobs/573849928#L2877


Here is my build.sbt

```
lazy val Benchmark = config("bench") extend Test

/**  This allows running ScalaMeter benchmarks in separate sbt configuration.
  *  It means, that when you want run your benchmarks you should type `bench:test` in sbt console.
  */
lazy val basic: Project = (project in file("."))
  .settings(Seq(
    name := "leap-year",
    organization := "com.storm-enroute",
    scalaVersion := "2.12.1",
    scalacOptions ++= Seq("-deprecation", "-unchecked", "-feature", "-Xlint"),
    publishArtifact := false,
    libraryDependencies ++= Seq(
      "com.storm-enroute" %% "scalameter" % version.value % "bench", // ScalaMeter version is set in version.sbt
      "org.scalatest" %% "scalatest" % "3.0.1" % "test"
    ),
    resolvers ++= Seq(
      "Sonatype OSS Snapshots" at "https://oss.sonatype.org/content/repositories/snapshots",
      "Sonatype OSS Releases" at "https://oss.sonatype.org/content/repositories/releases"
    ),
    testFrameworks += new TestFramework("org.scalameter.ScalaMeterFramework"),
    parallelExecution in Benchmark := false,
    logBuffered := false
  )
) configs(
  Benchmark
) settings(
  inConfig(Benchmark)(Defaults.testSettings): _*
)
```

Here is the version.sbt file:

```
version in ThisBuild := "0.18"
```

Here is project/build.properties:

```
sbt.version=0.13.15
```

Lastly, here is the simple benchmark I am trying to work with:

```
package leap.benchmark

import org.scalameter.api._

object RangeBenchmark
extends Bench.LocalTime {
  val years = Gen.range("year")(1, 9999, 1)

  def leapYear(year: Int) = year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)
  def nonOptimalLeapYear(year: Int) = year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)

  performance of "Leap" in {
    measure method "leapYear" in {
      using(years) in {
        year => leapYear(year)
      }
    }
  }
}
```

From the root directory...

```bash
$ sbt
[info] Loading project definition from <REDACTED>/eap/project
[info] Set current project to leap-year (in build file:<REDACTED>/leap/)
> bench:test
[info] Updating {file:<REDACTED>/leap/}basic...
[info] Resolving jline#jline;2.14.1 ...
[info] Done updating.
[info] Compiling 2 Scala sources to <REDACTED>/leap/target/scala-2.12/test-classes...
[error] <REDACTED>/leap/src/test/scala/benchmark/LeapBenchmark.scala:3: object scalameter is not a member of package org
[error] import org.scalameter.api._
```

Any help I can get with setting this up so that I can actually run benchmarks would be appreciated.
With 0.17:

```
import org.scalameter._
object DumbBenchmark extends Bench.LocalTime {
  performance of "sleep" in {
    using(Gen.unit(""))
    config (Key.verbose -> true)
    in { _ =>
      Thread.sleep(1000)
    }
  }
}
```

And adding -verbose to app arguments I get no verbose logging.

I'm not sure what I'm doing wrong but when I've traced the code I found no way this would work.

I've placed breakpoint at Console.debug and the currentContext has verbose=false and looks to be the default context as Captured in `setupzipper` and then restored in perfomance-test.scala:90.


The org.scala-tools.testing" % "test-interface" % "0.5 library is from circa 2010, not actively maintained, and has no declared license on the maven released artifact.

Instead we should be using org.scala-sbt" % "test-interface" % "1.0 which is actively maintained and has a properly declared license
Hi,

I've added cover with scalameter to an algorithm.   I then intentionally make it worse by doing a bad concat of lists in a tight loop.

Problem is that its so bad it never seems to fail and scalameter output keeps saying "GC detected " and sometimes  "Reinstating BenchMark Value"

The memory will have exploded to 4GB, but just sit there,, even though I set XMX 10000m.


This is how the JVM is loaded:

Starting new JVM: java -server -Xmx10048m -Xms4048m -cp C:\Users\hillmax\AppData\Local\Temp\classpath1003926506.jar;C:\Users\hillmax\AppData\Roaming\JetBrains\IntelliJ IDEA Community Edition 2018.1.1\lib\idea_rt.jar org.scalameter.execution.Main C:\Users\hillmax\AppData\Local\Temp\newjvm-5758005586671152155-io

Is XMX really working in this case?  Why am I hitting a GC wall at nowhere near the heap size?
Links at the bottom of the pages are broken. Ones at the top and in the TOC seem to be working.

Here's one:
https://scalameter.github.io/home/gettingstarted/0.5/index.html

[Simple Benchmark](https://scalameter.github.io/home/gettingstarted/0.5/simplemicrobenchmark/index.html) at the top (good)

[Simple Benchmark](https://scalameter.github.io/home/gettingstarted/0.5//home/gettingstarted/0.5/simplemicrobenchmark/index.html) at the bottom (bad)
Can you confirm whether this is supposed to happen?
```
[info] ::Benchmark Chunk.Columns.fold::
[info] cores: 4
[info] hostname: Luciano
[info] name: Java HotSpot(TM) 64-Bit Server VM
[info] osArch: amd64
[info] osName: Windows 7
[info] vendor: Oracle Corporation
[info] version: 25.161-b12
[info] Parameters(numRows -> 1): -30.92 kB
[info] Parameters(numRows -> 10000): -14.672 kB
[info]
[info] ::Benchmark Chunk.Columns.mapChunk::
[info] cores: 4
[info] hostname: Luciano
[info] name: Java HotSpot(TM) 64-Bit Server VM
[info] osArch: amd64
[info] osName: Windows 7
[info] vendor: Oracle Corporation
[info] version: 25.161-b12
[info] Parameters(numRows -> 1): 2850.856 kB
[info] Parameters(numRows -> 10000): -14.432 kB
```
If you can confirm this is not expected behaviour, I can see if I can publish the tests causing this.
`silent` config argument doesn't work there (just igrored, output is verbose), so we had to rollback to 0.13.15.