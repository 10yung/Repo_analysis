This will only take effect when `coc.preferences.formatOnType` is `true`, and will only check this setting when not empty, in order to avoid breaking change.

close #1472 

I have around 15 different coc extensions. I reckon I am not the only one, thus this would be nice if we had an opportunity to see how many plugins were installed in percentages (easier to implement approach) or as a progress bar (a bit more difficult, but still implementable once you have the percentages). I think it might be more user-friendly.
The function for format file on saving file can be customized for certain file types, but Iit seems that `coc.preferences.formatOnType` can only be toggle by `true` or `false`. Is it possible to expand this setting for file types customization.
<!--
**Warning: We will close the bug issue without the issue template and the reproduce ways.**

If you have question, please ask at https://gitter.im/neoclide/coc.nvim

If the problem related to specific language server, please checkout: https://git.io/fjCEM

If your have performance issue, checkout: https://git.io/fjCEX & https://git.io/fjCE1
-->

## Result from CocInfo

## versions

vim version: VIM - Vi IMproved 8.1 (2018 May 18, compiled Jul 28 2019 01:07:30)
node version: v10.16.3
coc.nvim version: 0.0.74-a52dec0522
term: iTerm.app
platform: darwin

## Messages
Messages maintainer: Bram Moolenaar <Bram@vim.org>
[coc.nvim] No ESLint configuration (e.g .eslintrc) found for file: /Users/jacobsandlund/dev/dotfiles/test.ts







1 change; before #13  4 seconds ago

[coc.nvim] No ESLint configuration (e.g .eslintrc) found for file: /Users/jacobsandlund/dev/dotfiles/other.ts






## Output channel: tsserver

[Info  - 11:29:47 AM] Forking TSServer
PATH: /Users/jacobsandlund/.rbenv/shims:/Users/jacobsandlund/.cargo/bin:/Users/jacobsandlund/go/bin:/Applications/MacVim.app/Contents/bin:/usr/local/opt/postgresql@9.5/bin:/usr/local/opt/python@2/libexec/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/jacobsandlund/.rbenv/shims:/Users/jacobsandlund/.cargo/bin:/Users/jacobsandlund/go/bin:/Applications/MacVim.app/Contents/bin:/usr/local/opt/postgresql@9.5/bin:/usr/local/opt/python@2/libexec/bin:/Users/jacobsandlund/.fzf/binÂ·
[Info  - 11:29:47 AM] Started TSServer
{
  "path": "/Users/jacobsandlund/.config/coc/extensions/node_modules/coc-tsserver/node_modules/typescript/lib",
  "_pathLabel": "",
  "_api": {
    "versionString": "3.7.3",
    "version": "3.7.3"
  }
}

## Output channel: eslint

[Info  - 11:29:47 AM] ESLint server running in node v10.16.3
[Info  - 11:29:47 AM] ESLint library loaded from: /usr/local/lib/node_modules/eslint/lib/api.js




## Describe the bug

Quite often if I Ctrl-C to exit insert mode, some of the helpful auto-suggestions that appear in the pop up near the cursor (what's that thing called?) don't go away. They stay there even if I Ctrl-L or :redraw! The only way to get them to go away is to trigger another auto-suggestion (by pressing tab or a key that triggers auto-complete).

## Reproduce the bug


The vanilla `mini.vim` was enough to reproduce the bug, but it took using the arrow keys to select a very long suggestion option, and then Ctrl-C'ing in order to reproduce it. But it did reproduce after a while. Screenshots below.


  ```vim
  set nocompatible
  set runtimepath^=/path/to/coc.nvim
  filetype plugin indent on
  syntax on
  set hidden
  ```

- Start (neo)vim with command: `vim -u mini.vim`

- Operate vim.

## Screenshots (optional)

![image](https://user-images.githubusercontent.com/698077/72465405-fba38180-378b-11ea-9844-ecf34a7f4555.png)

With mini.vim:

![image](https://user-images.githubusercontent.com/698077/72466327-85078380-378d-11ea-8045-ceb21deadeb7.png)

Sometimes it seems like it's most often a problem with the extra pop up providing additional information on the side. This was taken before Ctrl-C:

![image](https://user-images.githubusercontent.com/698077/72466504-d879d180-378d-11ea-82dc-39679b77f8aa.png)

And after:

![image](https://user-images.githubusercontent.com/698077/72466514-e0397600-378d-11ea-8aae-121ccc414bf0.png)

Thanks for an awesome plugin! I use it all the time and it is a huge improvement to my workflow.

## Result from CocInfo

```
vim version: NVIM v0.5.0-261-g2ef72437f
node version: v13.5.0
coc.nvim version: 0.0.74-15f685206a
term: xterm-256color
platform: linux
```

## Describe the bug

It seems that the function `triggerSignatureHelp` tries to determine the position parameter for signature help by:

https://github.com/neoclide/coc.nvim/blob/6e06c8854027fb6802409f06bf25e51d8f775729/src/handler/index.ts#L848-L849

which should work fine for most languages. But for Lisp-like languages, this may be problematic. For example, in the following scenario, the position will be incorrect:

```clojure
(outer-func param-a param-b (inner-func param-1 param-2) |)
 ^                           ^                           ^
 |                           |                           Cursor
 |                           coc.nvim will send the position of this character
 Actual function whose parameters are being filled in
```

## Reproduce the bug

I found this behaviour when I'm trying to implement the signature help function for [clojure-lsp](https://github.com/snoe/clojure-lsp), and I think the reproduction steps aren't really necessary because this can be seen in the code? But if this is indeed a non-existing problem or I've missed something somewhere, please kindly tell me.
<img width="614" alt="Screen Shot 2020-01-13 at 2 27 52 PM" src="https://user-images.githubusercontent.com/41779116/72236281-22897880-3611-11ea-8e47-8732f10362dc.png">

I try to debug where this error comes from, any hints will be appreciated.
### coc [document](https://github.com/neoclide/coc.nvim/wiki/Using-the-configuration-file#configuration-file-resolve) 
workspace configuration files is higher priority  than user configuration files

### my config

> use configuration files :cocConfig
```
{
  "git.enableGutters": false
}
```

> workspace configuration files :cocLocalConfig

```
{
  "git.enableGutters": true
}
```
workspace configuration file can not cover user configuration file, coc-git not activated. Other coc plugins has the same problem.

### env

vim version: NVIM v0.4.3
node version: v12.14.0
coc.nvim version: 0.0.74-db5ffd2ff0
term: iTerm.app
platform: darwin

**Update:**
- After a bit more thinking I realized the Set is not needed and I have brought this pull request back to one line :)
- Tried to clarify the issue this pull request solves

When root patterns are defined in lsp configuration like:

```
"vue": {
  "command": "vls",
  "filetypes": ["vue"],
  "rootPatterns": ["vue.config.js"]
}
```

They will still be merged with root patterns from the language server extension, so instead of looking for ['vue.config.js'] which you would expect, coc will look for ['package.json', 'vue.config.js'] 

package.json is coming coc-vetur's package.json's root patterns:
```
contributes": {        
 rootPatterns: [       
   {                   
     filetype: vue,    
     patterns: [       
       package.json,   
       vue.config.js   
     ]                 
   }                   
 ],    
```                

Let me try to clarify this with an example:

Project structure:
  ./project/package.json
  ./project/packages/frontend/package.json
  ./project/packages/frontend/vue.config.js
  ./project/packages/frontend/src/App.vue

old situation (before this patch):
- Open ./project/packages/frontend/src/App.vue
- Coc.nvim will determine root Patterns as: ['package.json', 'vue.config.js']
- Coc.nvim will try to resolve workspace folder and will match:
  **./project** since it starts scanning from bottom up and package.json
  is still in the root patterns

new situation (after this patch):
- Open ./project/packages/frontend/src/App.vue
- Coc.nvim will determine root Patterns as['vue.config.js']
- Coc.nvim will try to resolve workspace folder and will now match:
  **./project/packages/frontend** since it starts scanning from bottom up and package.json
  is not defined in the root patterns anymore
## Result from CocInfo

```
## versions                                                                                                                               
                                                                                                                                                                                                                                                              
vim version: NVIM v0.5.0-275-g34a59242a                                                                                                                                                                                                                       
node version: v10.16.0                                                                                                                                                                                                                                        
coc.nvim version: 0.0.74-15f685206a                                                                                                                                                                                                                           
term: xterm-256color                                                                                                                                                                                                                                          
platform: linux                                                                                                                                                                                                                       
[Info  - 1:58:28 PM] Highlight server running in node v10.16.0 
```

## Describe the bug

This only happens with nvim 0.5.0.  
`:CocAction` or `:CocList` (not exhaustive) makes nvim crashes.
Message not related to coc displayed on terminal when it crashes:

```
nvim: /home/travis/build/neovim/bot-ci/build/neovim/.deps/build/src/libuv/src/unix/stream.c:1400: uv_write2: Assertion `nbufs > 0' failed.
```

## Reproduce the bug

- Download `nvim.appimage` (0.5.0) from https://github.com/neovim/neovim/releases/tag/nightly 

- Give execute permission to `nvim.appimage` with:

```sh
chmod +x nvim.appimage
```

- Create file `mini.vim` withï¼

 ```vim
set nocompatible                                                                                                                                                                                                                                              
set runtimepath^=~/.local/share/nvim/plugged/coc.nvim    
filetype plugin indent on                                                                                                                                                                                                                                   
syntax on                                                                                                                                                                                                                                                   
set hidden                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                            
function! Foobar()                                                                                                                                                                                                                                          
    let foo = system("bar")    
endfunction           
                      
set statusline+=%{Foobar()} 
set termguicolors
 ```

- Start neovim with command: `./nvim.appimage -u mini.vim`

- Type `:CocAction` or `:CocList`.
<!--
**Warning: We will close the bug issue without the issue template and the reproduce ways.**

If you have question, please ask at https://gitter.im/neoclide/coc.nvim

If the problem related to specific language server, please checkout: https://git.io/fjCEM

If your have performance issue, checkout: https://git.io/fjCEX & https://git.io/fjCE1
-->

## Result from CocInfo
## versions

vim version: VIM - Vi IMproved 8.2 (2019 Dec 12, compiled Dec 26 2019 19:26:35)
node version: v12.14.0
coc.nvim version: 0.0.74
term: dumb
platform: linux

**NOTE: It's running on WSL (Windows Subsystem for Linux), Debian on Windows**

## Messages
Messages maintainer: Bram Moolenaar <Bram@vim.org>
## Output channel: highlight

[Info  - 1:31:03 AM] Highlight server running in node v12.14.0


<!--Run `:CocInfo` command and paste the content below.-->

## Describe the bug
I just discovered a very annoying loop that slows down vim to halt.

This is tested with a clean .vimrc (none), coc.nvim and only happens with `coc-highlight` installed just open `vim` then repeatedly

`:h type`
 and close with 
`:bd`

3-4 times and the 3/4 time it hangs with:

`Error on request (CocAutocmd): timeout after 30s`

When it finally returns Vim seems fairly responsive until I quit vim with `:q` and it halts again and I again get:

`Error on request (CocAutocmd): timeout after 30s`

I tried to watch log meanwhile, didn't produce anything useful in `:CocOpenLog` with `COC_LOG_LEVEL=debug`, I also tried hooking up the inspector, this did not "follow" the execution without any breakpoints so I was clueless where to break or if this would work at all I didn't see errors though.

I found out it can only be reproduced with "coc-highlight" installed. This is with no vimrc and only "coc-highlight" installed, without "coc-highlight" cannot be reproduced.

As this did not reproduce when opening main help page `:h` but only `:h type` I can only assume maybe some extension is reacting to the content in `:h type`

As I know this problem is probably hard to reproduce I politely ask what might be running with `CocAutocmd` with extensions, when a buffer is closed or deleted, specifically with coc-highlight, could it be the **Output channel**? Maybe its something like a "NULL" situation where something is trying to reach the "buffer" just deleted with ":bd" ? Or a procedure running on every buffer exit, even :q ? Could this be OutputChannel?

_WHY even bother?_

Well, I kept discovering a "node" instance consuming considerable CPU and my Vim frozen at random occassions, so I tried to figure out what was causing this in-between writing and visiting ":h" files this made my vim unusable from time to time without knowing the cause. I could not reproduce those steps easily happening at random, so this is the next best thing as it's the shortest path to same error.

## Reproduce the bug
Clean vim (no .vimrc)
coc.nvim from git and coc-highlight installed
Enter `:h type` and exit with `:bd` approximately 3-4 times
## Screenshots (optional)

If applicable, add screenshots to help explain your problem.
