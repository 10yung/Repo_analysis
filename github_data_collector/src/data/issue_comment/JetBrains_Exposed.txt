org.jetbrains.exposed.exceptions.DuplicateColumnException: Duplicate column name "id" in table "SYS_USER"
Performed the following changes:
- Added KDoc comments to most public declarations. There are still a few I didn't know how to describe.
- Rearranged some declarations to group them by functionality.
- Reformatted code to follow Kotlin Coding Conventions.
- Added explicit type to public API declarations.
- Edited some exception messages to be consistent.
- Renamed internal object `MysqlFunctionProvider.INSTANSE` to `MysqlFunctionProvider.INSTANCE` (should not break anything)
Hello. I use exposed-spring-boot-starter, but `additional-spring-configuration-metadata.json` is not merged into `spring-configuration-metadata.json`. Therefore, “code completion” dosen’t work with `application.properties` or `application.yml` files.

https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-configuration-metadata.html

```
% jar tf exposed-spring-boot-starter-0.20.3.jar
META-INF/
META-INF/MANIFEST.MF
org/
org/jetbrains/
org/jetbrains/exposed/
org/jetbrains/exposed/spring/
org/jetbrains/exposed/spring/DatabaseInitializerKt.class
org/jetbrains/exposed/spring/DatabaseInitializer.class
org/jetbrains/exposed/spring/DatabaseInitializer$Companion.class
org/jetbrains/exposed/spring/autoconfigure/
org/jetbrains/exposed/spring/autoconfigure/ExposedAutoConfiguration.class
org/jetbrains/exposed/spring/autoconfigure/ExposedProperties.class
META-INF/exposed-spring-boot-starter.kotlin_module
META-INF/additional-spring-configuration-metadata.json
META-INF/spring.factories
```

The releases on github appear to only go up to **[0.14.1](https://github.com/JetBrains/Exposed/releases)**, where as the [bintray repository](https://bintray.com/kotlin/exposed/exposed/view#) linked in the [ReadMe](https://github.com/JetBrains/Exposed) goes up to **0.17.7** and the [Change Log]() says the versioning goes up through **0.20.2**!! ... which can be found seperately after some searching [here instead](https://bintray.com/kotlin/exposed)

Can these be adapted somehow to let them stay more in sync. 
I'd happily create a PR to bring them into consistency but it'd only last till the next change.

How about pointing the ReadMe to the Wiki Getting started instead of directly linking and updating the older `kotlin/exposed/exposed` package on bintray to alert users to the now split up libraries under `kotlin/exposed`?
I am trying to develop a small ktor server that receives a post request with a CSV file as multipart and inserts all rows into a MySQL database. Everything works fine except that the second request to the server always crashes with the following stack trace:

```
org.jetbrains.exposed.exceptions.ExposedSQLException: com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: No operations allowed after connection closed.
	at org.jetbrains.exposed.sql.statements.Statement.executeIn$exposed(Statement.kt:48)
	at org.jetbrains.exposed.sql.Transaction.exec(Transaction.kt:130)
	at org.jetbrains.exposed.sql.Transaction.exec(Transaction.kt:124)
	at org.jetbrains.exposed.sql.Query.iterator(Query.kt:309)
```

this is the part of the stack trace after the insert is called by exposed.

at first, I created my SQL connection using URL and password, but now I decided to go with javax.sql.DataSource implementation where I just implemented all getConnection overloads.

after some debugging and searching around in the exposed library I found the following piece of code:

```        
private fun doConnect(getNewConnection: () -> Connection, setupConnection: (Connection) -> Unit = {}, manager: (Database) -> TransactionManager = { ThreadLocalTransactionManager(it, DEFAULT_ISOLATION_LEVEL, DEFAULT_REPETITION_ATTEMPTS) } ): Database {
    return Database {
        getNewConnection().apply { setupConnection(this) }
     }.apply {
        TransactionManager.registerManager(this, manager(this))
    }
}
```

Here getNewConnection is only called once and not passed to the transaction manager.

is it possible, that this prevents opening a new connection to MySQL when a previous got closed?

Connection creation:
`val connection: Database = Database.connect(MySqlDataSource())`

MySqlDataSource:
```
    override fun getConnection(): Connection {
        return getConnection("root", "")
    }

    override fun getConnection(username: String?, password: String?): Connection {
        return DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb", username, password)
    }
```
Hi,

I have been trying out Exposed for a while and I noticed that there is no built in support for validations either on DSL or DAO side. I suppose this is by design if Exposed is a lightweight SQL library. I can see the argument on not having validations in exposed. The reality however is that I have had the need for validations in every project I have been involved with.

If exposed is not going to have support for validations what do you think would be the best approach to deal with them on application level both on DSL and DAO style? One approach could be adding them to the repository:

DAO:
```kotlin
object Events : IntIdTable() {
    val startDate = date("start_date")
    val endDate = date("end_date")
}

class Event(id: EntityID<Int>) : IntEntity(id) {
    companion object : IntEntityClass<Event>(Events)

    var startDate by Events.startDate
    var endDate by Events.endDate
}

data class EventDataClass(val startDate: DateTime, val endDate: DateTime)

class EventsRepository {
    fun save(event: EventDataClass) {
        val errors = validate(event)
        if (errors.isNotEmpty()) {
            throw Exception(errors.toString())
        }

        Event.new {
            startDate = event.startDate
            endDate = event.endDate
        }
    }

    private fun validate(event: EventDataClass): MutableList<String> {
        val errors = mutableListOf<String>()
        if (event.endDate.isBefore(event.startDate)) {
            errors.add("End date is before start date")
        }

        return errors
    }
}
```
For a developer that comes from Ruby on Rails world this code looks a bit odd. My expectation was that Event class would be the public API to create new records in DB but at least if I want to add validations it looks like it can't be the public API. Also `all()` method is not transactional so is the design idea here indeed so that in both DSL and DAO styles a repository should be implemented which is transactional?

Second question is also kind of related on validations. Is it so that there is no support for single table inheritance? In Rails what I could do is add validations but also relationships on the child models:
```ruby
class Calendar < ApplicationRecord
  has_many :events
end

class Event < ApplicationRecord
  belongs_to :calendar
end

class PrivateEvent < Event
  belongs_to :user
end

class PublicEvent < Event

end

calendar = Calendar.create()
public_event = PublicEvent.create(calendar: calendar) # OK

calendar = Calendar.create()
private_event = PrivateEvent.create(calendar: calendar) # NOT OK: User is missing
puts private_event.errors # Prints out a validation error that user is required.
```
If there is no support in Exposed for this, ideas to implement this on application level are welcome too.

I've created a baseTable from which I extend all my other tables to add on a `createdAt` field.

![image](https://user-images.githubusercontent.com/13274079/71763383-5e318d80-2f01-11ea-9d1f-1bcd8061b7e8.png)

However, I've noticed that the createdAt field is often not populated to the current time (time of insertion) when using `defaultExpression`, however, using `clientDefault` does work.

Is there a reason `defaultExpression` might not be working?
Allow to integrate SQL binary operators (e.g. DIV)
```Property klass should be initialized before get```

Above is the error that is thrown if we try to use the DAO class as a general POJO.