Hello, i want to create a wireguard server for some clients only for internet access but i want to isolate them from each other. I don't want to ping each other or discovered. I used iptables but no result. Can anyone help me?
I am trying to use wireguard to assign public IPv6 addresses to my peers, so that I can ssh into them from anywhere. I currently have a setup working on a VPS which works with both IPv4 and IPv6, but it seems to NAT outbound traffic, so I cannot ssh into a specific peer. 

My current config is as follows: 
Server:
```
[interface]
#Address = 10.66.66.1/24,2607:x:y:z:1::57/88
ListenPort = 1194
PrivateKey = (hidden)
#PostUp = iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE; ip6tables -t nat -A POSTROUTING -o ens3 -j MASQUERADE
PostUp = iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE
#PostDown = iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE; ip6tables -t nat -D POSTROUTING -o ens3 -j MASQUERADE
PostDown = iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE

[Peer]
PublicKey = (hidden)
AllowedIPs = 10.66.66.3/32,2607:x:y:z:1::57/100
```
Client:
```
[Interface]
PrivateKey = (hidden)
Address = 10.66.66.3/24,2607:x:y:z:1::57/100

[Peer]
PublicKey =(hidden)
Endpoint = 51.a.b.c:1194
AllowedIPs = 0.0.0.0/0,::/0
```

I've been stuck on this all weekend and not sure how to proceed. Let me know if there is a better place to ask this question. So far the most helpful thing I found were these docs :+1:

Thanks!

Can you cover the usecase where wireguard is ran out of a separate network namespace wherein certain applications are launched -- and only the traffic of those launched from that network namespace is tunneled? I've been doing this on OpenVpn for a years but as Ubuntu's adoption of  `systemd-resolved ` I've had DNS leaks. 

Would love if there was a wireguard native way to tunnel certain applications rather than tunnel traffic based on range of destination IP addresses. 

Ps. thanks for the HN post. 
`DNS` and `Address` for example are only valid config items when using the `wg-quick` tool, IMO it would be good to distinguish these and any others, just a brief:

> [wg-quick only]

marker, perhaps linking to a section that explains.
While you mention the sysctl and iptables setup needed for ipv4, no such documentation is mentioned for IPv6 tunneling.

IPv6 forwarding can be enabled with `net.ipv6.conf.all.forwarding`

Also, `net.ipv4.conf.all.proxy_arp` is not necessary at all.

Also also, you can bypass sysctl entirely by just adding `IPForward=yes` to your public interface's networkd config, assuming you're using systemd.

Finally, if you're using systemd >= 241, you can make the whole process a hell of a lot easier by just using networkd's native wireguard support, like so. (See [the official docs on this](https://www.freedesktop.org/software/systemd/man/systemd.netdev.html#%5BWireGuard%5D%20Section%20Options) for further reading)

```
# /etc/systemd/network/30-wg0.netdev

[NetDev]
Name=wg0
Kind=wireguard
Description=WireGuard

[WireGuard]
PrivateKey=<key>
ListenPort=51820

[WireGuardPeer]
PublicKey=<key>
AllowedIPs=10.8.0.2/32, fd42:42:42::2/128
PersistentKeepalive=25
```

```
# /etc/systemd/network/30-wg0.network

[Match]
Name=wg0

[Network]
Address=10.8.0.1/24
Address=fd42:42:42::1/64
```