is the case for multiple links, I suppose a search & replace is in order...
Once the core is stabilized and we're confident the internal schema representation won't drastically change again, we need to make the API ready for public consumption by:

- naming things correctly
- reducing the API surface 
- removing the dependency to shapeless, or at least hiding it from the user (right now, we only need shapeless for getting singleton types for fields and branches names).



Before releasing a first version, we must provide a three-tiered documentation, each tier targeting a specific "level" of interaction with the library.

- **User** : the general philosophy behind the library, its intended purpose and goals; step-by-step descriptions of the most common use-cases (typeclass derivation, schema evolution), for every provided module.
- **Power-user** : how to extend the library, how the derivation mechanism works internally and how to create new modules and interpreters, how the migration mechanism works and how to implement new/custom migrations.
- **Contributor** : the design decisions that have lead to the current implementation and the reasons behind them, and more generally anything that is useful to know before contributing to the core of the library.
Once all other issues labelled with `needed-for-v1` are done, a few things need to be done in order to move out the prototyping phase:

- [ ] add file headers and other "administrative stuff" (most of this should be done in [sbt-org-policies](https://github.com/spartanz/sbt-org-policies))
- [ ] add a proper `CONTRIBUTING.md` 
- [ ] merge `prototyping` into `master`
- [ ] reconfigure the repository to make `master` the default branch again (CI, protected branches, etc)

We can (and should) pull the "isos" out of the `SchemaF` pattern-functor.

We would end up with a user-facing `SchemaZ` case class containing an "iso" from a business type `T` to a generic representation (sums of products) `A` and a `Schema[A]`.

The typeclass derivation would still work the same: it would derive instances for `A` and corresponding instances for `T` would be obtained by `map`ing or `contramaping` the relevant half of the "iso".

The impact on migrations is still unknown though.
TypeDefs is a project in Idris with very similar goals and internals as scalaz-schema (1). 
It already supports several target languages (2), and scalaz-schema has got a good opportunity to become the Scala implementation.

(1) https://github.com/typedefs/typedefs/blob/master/src/Typedefs.idr#L14
(2) https://typedefs.com/targets/
Building upon #47, it seems rather obvious that we should be able to automatically derive the schema of any ADT at compile time (as a matter of fact, [this gist](https://gist.github.com/vil1/7f28126db61ee9d6d0a9407da1b042fa) achieves just that, using shapeless).

Like to #47, this should be provided in the `generic` (sbt) module, with no impact on the existing API for constructing schemas.

Also, if #34 gets merged before this issue is solved, words must be added in the documentations to stress out the fact that such fully automatic derivation should be used with caution, for it somehow defeats the purpose of having schemas as runtime values (in scenarios where schema evolution is a needed feature, it OK to fully derive schemas at compile time, as long as the application stores the derived schema somewhere at runtime).

From the user's point of view, the most tedious part of defining a schema is writing the values of the `iso` field of unions and records.

For instance, in ordre to define the schema for a class

```scala
final case class Foo(i: Int, l: Long, s: String, b: Boolean)
```

one must implement an `Iso[(Int, (Long, (String, (Boolean)))), Foo]`, which is 100% boilerplate.

Using generic programming, it is possible to derive automatically at compile time an `Iso` between any case class (product type) and its "nested tuples" representation. We should provide such a way in the `generic` module using `scalaz-deriving`.

This issue must be solved without modifying the existing API for building schemas (namely, the public methods in `SchemaModule`).

An acceptable solution would be to define some `Generic`* module extending `SchemaModule` with two methods : 

* `caseClass`* allowing to define a `Record` by simply providing a "product of labelled fields" (with automatic derivation of the `iso`)
* `sealedTrait`* allowing to define an `Union` by simply providing a "sum of labelled branches (with automatic derivation of the `iso`)


### Important note


This issue should be solved while taking into account the results of #44. 
---
*: these names are merely suggested names


Implementing automatic data migration implies being able to compute the structural difference between to schemas.

Ideally, this difference would be represented as a sequence of "schema transformation" as defined in #45.