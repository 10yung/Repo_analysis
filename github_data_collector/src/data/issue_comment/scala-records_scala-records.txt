IntelliJ has added a new API to support macro libraries, and it seems quite simple and powerful.

http://blog.jetbrains.com/scala/2015/10/14/intellij-api-to-build-scala-macros-support/

IntelliJ support is blocking me from using scala-records. Now that supporting IntelliJ is easier, do you think it will be added in the short term?

Thanks in advance

```
[info] Compiling 5 Scala sources to /Users/dragos/workspace/Spark/scala-records/benchmarks/target/scala-2.11/test-classes...
[error] /Users/dragos/workspace/Spark/scala-records/benchmarks/src/test/scala/records/benchmark/RecordsBenchmarkSuite.scala:9: trait Rec takes type parameters
[error]   def accessRecSwitch(i: Int, size: Int, rec: Rec): Any = macro BenchmarkingMacros.accessRecSwitch
[error]                                               ^
[error] one error found
[error] (benchmarks/test:compileIncremental) Compilation failed
[error] Total time: 103 s, completed Nov 18, 2015 11:44:09 AM
```

Probably the SNAPSHOT dependency isn't on Maven anymore.

```
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[warn]  ::          UNRESOLVED DEPENDENCIES         ::
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[warn]  :: com.chuusai#shapeless_2.11;2.1.0-SNAPSHOT: not found
[warn]  ::::::::::::::::::::::::::::::::::::::::::::::
[warn] 
[warn]  Note: Unresolved dependencies path:
[warn]      com.chuusai:shapeless_2.11:2.1.0-SNAPSHOT (/Users/dragos/workspace/Spark/scala-records/project/Build.scala#L149)
[warn]        +- ch.epfl.lamp:scala-records-benchmarks_2.11:0.5-SNAPSHOT
[trace] Stack trace suppressed: run last benchmarks/*:update for the full output.
[error] (benchmarks/*:update) sbt.ResolveException: unresolved dependency: com.chuusai#shapeless_2.11;2.1.0-SNAPSHOT: not found
[error] Total time: 2 s, completed Nov 18, 2015 10:23:56 AM
```

``` scala
val r: Record[{def name: String; def age: Int}] = Record(new{def name = "Chris"; def age = 99})
```

See #118 and #110

The only documentation is in the test cases. 

This should be done after we cleanup the syntax in #118 

New goal as concluded:

updated docs and tests to use applyDynamicNamed syntax

Superseeded:
@vjovanov @gzm0 what do you think about removing this syntax? Both are supported right now. The second one highlights the type-safety and looks like case class constructors. And no need to have 2 apis.

P.S.: Slowly finding time again for records. Investigating the differences between cvogt/compossible and scala-records as preparation for a future merge.

After dicussing with @gzm0  extensively over the weekend, we realized that my macros in compossible and scala-records actually are still quite complimentary in their features rather than competitive. We should strongly consider joining forces i.e. merging I think. This requires agreement on https://github.com/scala-records/scala-records/issues/111 first. Apart from that we seem to have made the same design decisions or complement each other. compossible implements fully blackbox Record create, merge and select operations (and nicer syntax whitebox alternatives), explicit and optional implicit conversions from/to case classes and anonymous classes. I have also written a play-json deserializer for these records, which will be the first use case for which we will start using them in production at @xdotai. I am still missing equality comparison, hashCode and these things, which you guys already have. I am also missing pattern matching yet. That multi-backend feature is nothing I would have implemented for mine, but I can see the importance of this for certain use cases.

I'd be happy to merge and join forces. I am ok with migrating my stuff into Scala Records if we can agree on all design decisions. Also, I'd like to stabilize and finalize a small core soon so I can use it in production and go form there.

My Scala Days talk is about my implementation by the way, which you might want to check out.

This should work:

```
scala> import records.Rec
import records.Rec

scala> Rec("crazy-name" -> "Hannah").`crazy-name` // works
res0: String = Hannah

scala> Rec(`crazy-name` = "Hannah").`crazy-name` // does not work
java.util.NoSuchElementException: key not found: crazy-name
```

Note: Include test that we can have a record with both a field "-" and a field "$minus".

We have the following possibilities:
1. Expose disjoint fields in the joined record and leave common fields in nested records:

```
  r = Rec {
    def r1 = Rec { def y = 2; };
    def r2 = Rec { def y = 3; };
    def x = 1;
    def z = 4;
  }
```

   If somebody tries to access `r.y` we can generate a compile time error message that says look in `r2` `r3`.
1. Just leave two nested records (Slick does something similar):

```
  r = Rec {
    def r1 = Rec { def x = 1; def y = 2; };
    def r2 = Rec { def y = 3; def z = 4; };
  }
```

   Here we could also have an error message if somebody misses a field.
1. Leave both nested records and provide disjoint fields in the joined record:

```
  r = Rec {
    def r1 = Rec { def x = 1; def y = 2; };
    def r2 = Rec { def y = 3; def z = 4; };
    def x = 1;
    def z = 4;
  }
```
