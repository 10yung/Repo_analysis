Stripe automatically sends upcoming or billing invoice to customers but it doesn't mention for which plan or subscription it's going to charge.
We've tried to configure at Stripe's dashboard but didn't find any setting or option that could add subscription detail / plan detail in invoice template.
Any help or guidance how should we proceed??
Thanks.
SubscriptionSchedule's save fails due to both `default_tax_rates` and `tax_percent` being present on existing phases.

Example code:

```
// Creates a subscription schedule with at least one phase
$schedule = StripeSubscriptionSchedule::create([
    'from_subscription' => 'sub_...',
]);

// Some arbitrary modification
$schedule->... = ...;

// This fails due to both `default_tax_rates` and `tax_percent` being present on existing phases
$schedule->save();
```
r? @ob-stripe 
cc @marko-stripe @remi-stripe 
cc @stripe/api-libraries 

The biggest difference I can find is that we no longer output `|null` for optional fields in comments. Should we? I don't think it should be too hard.

There are a few other comment regressions, like
```diff
- * @property \Stripe\Collection $reversals
+ * @property mixed $reversals
```
Feels on how important those are to fix? Should be doable.
I have an issue with following:

\Stripe\Stripe::setApiKey($_ENV['STRIPE_KEY']);
$invoices = \Stripe\Invoice::all(['limit' => 100]);

$invoices->count() always returns 4 even if when I iterate over results it clearly shows more records. count($invoices->data) returns correct number of 100.

Reproduce with:
php php-cs-fixer --rules=native_function_invocation fix ./ --allow-risky=yes
(php-cs-fixer from : https://cs.symfony.com/)

Details:
https://veewee.github.io/blog/optimizing-php-performance-by-fq-function-calls/
Integration branch for the new "client + services" PHP API.

- [x] New `StripeClient` class (#767)
- [x] Add `AbstractService` and a couple of concrete services (#772)
- [x] Fix `CouponService` deletion test (#786)
- [x] Add `FileService` (#784)
- [x] Add namespaced service (#785)
- [x] Add service with methods for nested resources (#783)

TODO:
- many things
cc @remi-stripe 

Pretty experimental yet, but it works. I will polish this up and split it into smaller PRs.

Sample syntax:

```php
require_once('vendor/autoload.php');

// Instantiate client
$stripe = new \Stripe\StripeClient("sk_test_123");

// Retrieve method
$coupon = $stripe->coupons->retrieve("mycoupon");

// Create method, namespaced resource
$issuingCard = $stripe->issuing->cards->create(["authorization_controls" => ["max_amount" => 123]]);

// Custom method, namespaced resource
$details = $stripe->issuing->cards->details("ic_123");

// Update method, nested polymorphic resource
$updatedPaymentSource = $stripe->paymentSources->update("cus_123", " card_123", ["metadata" => ["key" => "value"]]);
```

stripe/stripe-php: v6.43.0

When updating an object to unset metadata, I'd expect setting the metadata key to `null` to unset it. But `null` doesn't have any effect (unlike with the Stripe Node SDK) and instead an empty string is required.

## This has no effect:
```php
Stripe\Customer::update(
    $customerId,
    ['metadata' => [
        'some_metadata_key' => null,
    ]]
);
```

## This unsets `some_metadata_key`:
```php
Stripe\Customer::update(
    $customerId,
    ['metadata' => [
        'some_metadata_key' => '',
    ]]
);
```

InternetJones from the #stripe IRC agrees that unsetting via `null` would be a little more expected/consistent behaviour. :-)
It would be very handy, when working in an IDE such as PhpStorm, if the docblocks for object properties reflected their simple and expanded state.

Take the `Subscription` class, for example, and specifically the `Subscription.latest_invoice` property whose property is documented here: https://github.com/stripe/stripe-php/blob/master/lib/Subscription.php#L28

It would be great if that was instead:
```php
/**
 * @property string|Invoice $latest_invoice
 */
```

This would inform the IDE that it may _either_ be a string or an Invoice object.

I understand docblocks are slated for some point in the future. I'm making this purely to be helpful and to track this specific need for that time. ðŸ˜„ 
I think the `Stripe\ApiResponse` should be psr7-compliant for easier integration in frameworks that handle psr7 responses, like Laravel, Symfony and others.

What do you think?