1.0.0-alpha.0 has been released and it only supports webpack 4 and newer. django-webpack-loader 1.0.0 should drop support for older webpack versions and rely on 1.0.0-alpha.0 of webpack-bundle-tracker. This mainly means updating the test suite and making sure it passes with webpack4 and bundle tracker 1.0.0

Starting this issue to track what should go into 1.0.0. This will be a backwards incompatible release so we have a chance to improve things we couldn't before.  For one, 1.0.0 will only support webpack 4 and newer. 

Please add a comment or link to an issue if you'd like it to be resolved in 1.0.0
I've used django-webpack-loader in a single-app django site, and it serves me well, thanks @owais  !

Now I want to break up my django app into reusable apps which I'll add to INSTALLED_APPS.
These reusable apps will contain templates and javascript which I'd like to compile with webpack and reference in the templates with django-webpack-loader (as I currently do in my single-app site). 

I want the templates and the js they contain to work out of the box when I add the app to the django site. **I haven't found a way to do this yet.**

Currently, the site's settings.py can contain something like:

```python
WEBPACK_LOADER = {
'DEFAULT': {
'BUNDLE_DIR_NAME': 'bundles/',
'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),
},
'DASHBOARD': {
'BUNDLE_DIR_NAME': 'dashboard_bundles/',
'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats-dashboard.json'),
}
}
```

Great: I can define as many webpack projects as I want.

However, if one of my webpack projects is an INSTALLED_APP (as opposed to a subdirectory of BASE_DIR), I need to find the path to the app's webpack stats.
I can think of a hacky way to do this (importing the app's package, then looking up its `__file__` attribute, then finding webpack-stats from there).
But that makes integrating the app that much harder, and introduces more coupling between the site and the app than is necessary.

Ideally, I'd like something analogous to django's collectstatic. I'd give webpack loader a STATS_FILE_DIR_NAME config telling the loader the name(s) of the directories containing webpack-stats.json files. The loader would collect webpack-stats from all app directories with that name.

So my webpack config in settings.py might look like:

```python
WEBPACK_LOADER = {
'DEFAULT': {
'BUNDLE_DIR_NAME': 'bundles/',
'STATS_FILE_DIR_NAME': '/stats/'
},
}
```

Then when using `render_bundle` in an html template, I could specify the app's name like so:

{% render_bundle DJANGO-APP-NAME BUNDLE-NAME %}

The template tag would look up the appropriate webpack-stats.json file for that app.

The author of this SO question seems to be looking for the same thing: https://stackoverflow.com/questions/52104733/django-vue-with-multiple-apps

Does anyone have thoughts on how to accomplish this ?



When using

    {% render_bundle 'style-base' 'css' %}

django-webpack-loader renders:

    <link type="text/css" href="/static/dist/css/style-base.21b45722.css" rel="stylesheet" />
    <link type="text/css" href="/static/dist/style-base.css" rel="stylesheet" />

Is there anyway to tell webpack not to render both the hash version and the hashless one or django-webpack-loader to keep only the hash version path?

Thanks
The django community is very dependent on this package, however, it's now outdated enough that it no longer works according to the documentation. Can the maintainer please add some other admins onto this project so we can get it working again?

If not, I'm happy to fork it and start accepting pull requests for fixes. 
**Context:**

I am using django-webpack-loader in a multi-pages Django app that runs VueJS components in Django templates. I set the publicPath option in webpack to an empty string so that I can control the static url from the Django settings and properly use a CDN server, as described in #160

**Issue:**

JS and CSS assets are saved to css and js subfolders. Here is what _webpack-stats.json_ looks like:

```{
    "status": "done",
    "chunks": {
        "compA": [{
            "name": "css/compA.css",
            "path": "D:\\home\\site\\wwwroot\\common-static\\assets\\frontend\\css\\compA.css"
        }, {
            "name": "css/compA.3564e3ce75ddc57936fd.css",
            "path": "D:\\home\\site\\wwwroot\\common-static\\assets\\frontend\\css\\compA.3564e3ce75ddc57936fd.css"
        }, 
             ...
        }],
             ...
}
```
Note that the chunk name uses a UNIX-like path "css/compA.css". 

In _settings.py_ I have the following configuration:
```
WEBPACK_LOADER = {
    'DEFAULT': {
        # when true, webpack will read stats file only once and cache results
        'CACHE': not DEBUG,
        # dir in which webpack outputs the bundles - it should not be full path
        'BUNDLE_DIR_NAME': os.path.join("assets", "frontend", ""),  # add a trailing slash
        # location of the bundle tracker file
        'STATS_FILE': STATS_FILE,
        'POLL_INTERVAL': 0.3,
        'TIMEOUT': None,
        'IGNORE': [r'.+\.hot-update.js', r'.+\.map']
    }
}
```
The BUNDLE_DIR_NAME value ends up being 'assets\\frontend\\' on Windows. 

With these settings, django-webpack-loader prints an invalid path in the Django template by concatenating BUNDLE_DIR_NAME with the chunk name: **\static\assets\frontend\css/compA.css**

The issue is in the get_chunk_url of **webpack_loader/loader.py**:

```
def get_chunk_url(self, chunk):
        public_path = chunk.get('publicPath')
        if public_path:
            return public_path

        relpath = '{0}{1}'.format(
            self.config['BUNDLE_DIR_NAME'], chunk['name']
        )
        return staticfiles_storage.url(relpath)
```
Concatenation does not take into account that the two relative paths may be formatted differently. In addition it requires the BUNDLE_DIR_NAME settings to end with a slash.

**Solution**

This issue is easily fixed by replacing the path concatenation with:
```
def get_chunk_url(self, chunk):
        public_path = chunk.get('publicPath')
        if public_path:
            return public_path

        relpath = os.path.normpath(
            os.path.join(self.config['BUNDLE_DIR_NAME'], chunk['name']
        )
        return staticfiles_storage.url(relpath)
```
This makes the path concatenation OS-independent, and allow greater flexibility to define output paths in the webpack config.

https://owais.lone.pw/blog/webpack-plus-reactjs-and-django/

For one 'loaders' is changed to 'rules' 

Then:

```
$ ./node_modules/.bin/webpack --config webpack.config.js
Invalid configuration object. Webpack has been initialised using a configuration object that does not match the API schema.
 - configuration.resolve has an unknown property 'modulesDirectories'. These properties are valid:
   object { alias?, aliasFields?, cachePredicate?, cacheWithContext?, concord?, descriptionFiles?, enforceExtension?, enforceModuleExtension?, extensions?, fileSystem?, mainFields?, mainFiles?, moduleExtensions?, modules?, plugins?, resolver?, symlinks?, unsafeCache?, useSyncFileSystemCalls? }
   -> Options for the resolver
```

I'm not familiar with webpack/babel and an updated guide that just works would be appreciated!
Added an option to specify css file with `rel="preload"`:
```
{% render_bundle 'commons' 'css' is_preload=True %}
```
It renders to
```
<link type="text/css" href="/static/dist/commons-ce3c39c62a45f3d1d496.bundle.css" rel="preload" as="style">
```
In other word, I havn't to press F5 to preview the modification, just like a pure frontend project with hot replacement enabled?