This PR updates the CI matrix to use latest JRuby, **9.2.7.0**.

[JRuby 9.2.7.0 release blog post](https://www.jruby.org/2019/04/09/jruby-9-2-7-0.html)
Hi, I'm making updates for Open Collective. Either you or a supporter signed this repo up for Open Collective. This pull request adds backers and sponsors from your Open Collective https://opencollective.com/celluloid ❤️
  
  It adds two badges at the top to show the latest number of backers and sponsors. It also adds placeholders so that the avatar/logo of new backers/sponsors can automatically be shown without having to update your README.md. [[more info](https://github.com/opencollective/opencollective/wiki/Github-banner)]. See how it looks on [this repo](https://github.com/apex/apex#backers).
You can also add a "Donate" button to your website and automatically show your backers and sponsors there with our widgets. Have a look here: https://opencollective.com/widgets

  P.S: As with any pull request, feel free to comment or suggest changes. The only thing "required" are the placeholders on the README because we believe it's important to acknowledge the people in your community that are contributing (financially or with code!).

  Thank you for your great contribution to the open source community. You are awesome! 🙌
  And welcome to the open collective community! 😊

  Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other open source sustainers!
  
This is a tracking issue for a Celluloid 0.18 release (see also #762, #728).

The [master branch](https://github.com/celluloid/celluloid/tree/master) contains the code to be released. This includes a lot of refactoring to consolidate Celluloid from fragmented gems and removed global variables and other hard-to-maintain bits.

I don't have time to do the release myself though (see #779), so I'm looking for volunteers to address the following items below:

- [x] Timeout extensions (#491) - decide whether to merge this PR or abandon it (EDIT: abandoning the PR)
- [ ] [CHANGES.md](https://github.com/celluloid/celluloid/blob/master/CHANGES.md) - add v0.18.0 release notes.
- [ ] Manual testing of the upgrade against some real-world Celluloid applications: it's been a *long* time since Celluloid had a release like this, and there's a good chance there are some unaddressed bugs not caught by automated tests.

If you are interested in working on either of these items, or would like to suggest additional items which should make it into a v0.18.0 release, please respond below.
If there are any volunteers interested in taking over maintenance of Celluloid, please reach out to me, either on this issue, or at my GMail address: bascule. I can help mentor you.

--

NOTE: Discussion about the future maintenance of Celluloid has largely moved to the Gitter:

https://gitter.im/celluloid/celluloid
I keep finding I need to retreive actors that are alive and of a given class -- normally just to count them.

What's the correct way of doing this without getting a DeadActorError?

The obvious doesn't work:
```
Celluloid::Actor.all.select{|a| a.alive? && a.is_a?(Thing)}
```
Maybe this is because of a race condition -- `alive?` is true when the first part of the test happens, but false when we reach the second part?  But I don't know for sure.

The only workable solutions I have been able to find are:
```
Celluloid::Actor.all.select{|a| a.alive? && a.__klass__ == "Thing"}
```
Which seems to rely on a private method, so I'm not very happy about that.  

Or I could trap for DeadActorError, which seems worse...

---

**Proposed solution should there not already be one:**

Make `alive?` a valid method to call on a dead Actor, rather than raising a NoMethodError as it does now...

Chasing an issue where my Celluloid script is unable to reconnect to the database if, in case the connection gets lost.

Found [this discussion](https://groups.google.com/forum/#!searchin/celluloid-ruby/ActiveRecord%7Csort:date/celluloid-ruby/n9a1RpRztjY/P859mSPvBQAJ) around celluloid and ActiveRecord from 2011 but nothing in it that help me here.

Tested the AR reconnect under JRuby Thread, the reconnect works there.

Here are the scripts I used to test the reconnect thing ..

With script running Celluloid (`celluloid (0.17.1.1)`)

```

require 'celluloid'
require 'active_record'
require 'activerecord-jdbcpostgresql-adapter'

ActiveRecord::Base.establish_connection(adapter: 'postgresql', username: 'postgres', database: 'postgres', pool: 1, timeout: 10)

class Worker
  include Celluloid

  def start
    begin
      ActiveRecord::Base.connection_pool.with_connection do |conn|
         conn.execute('select pg_sleep(0.6);')
        conn.execute('select 1;')
        puts ".. Working .."
      end
    rescue Exception => exception
      puts "\n got exception #{exception.message}"
    end
  end
end

loop do
  Worker.new.async.start
  sleep 0.5
end
```

Using JRuby Thread.
```

require 'active_record'
require 'activerecord-jdbcpostgresql-adapter'
require 'securerandom'

ActiveRecord::Base.establish_connection(adapter: 'postgresql',username: 'postgres',database: 'postgres',encoding: 'unicode', pool: 1, timeout: 4)



loop do
  Thread.new() do
    Thread.current[:id] = SecureRandom.hex
    begin
      ActiveRecord::Base.connection_pool.with_connection do |conn|
        puts ".. #{Thread.current[:id]}"
        puts conn.to_s[0..75]
        conn.execute('select pg_sleep(0.6);')
        conn.execute('select 1;')
        puts "Working .. #{Thread.current[:id]}"
      end
    rescue Exception => exception
      puts "\ngot error from #{Thread.current[:id]} .... #{exception.message}\n"
    end
  end
  sleep 0.5
end
```
While I'm still searching for the reason for the above issue. Is anything specific I need to understand here.

**NOTE**: 
All code was tested under 
```
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
```
this program eats 2Gb in 10 hours. i think this related somehow to gem timers (also there was a leak in it before https://github.com/celluloid/celluloid/issues/455). ruby 2.4.1p111, celluloid: "0.17.3", timers:  "4.1.2", Ubuntu 12.04.1 LTS

```ruby
require 'celluloid'

class A
  include Celluloid

  def initialize
    @timer = every(0.5) {}
  end

  def stop
    @timer.cancel
    terminate
  end
end

p Celluloid::VERSION
p Timers::VERSION

loop do
  actors = Array.new(50) { A.new }
  sleep 10.0
  actors.each &:stop
end
```
I have recently started noticing Actors failing in our Celluloid service with the following error and stacktrace:

```
E, [2017-08-29T07:35:30.647265 #3370] ERROR -- : Actor crashed!
Timeout::Error: execution expired
  /app/vendor/bundle/ruby/2.4.0/gems/celluloid-0.17.3/lib/celluloid/mailbox.rb:63:in `sleep'
  /app/vendor/bundle/ruby/2.4.0/gems/celluloid-0.17.3/lib/celluloid/mailbox.rb:63:in `wait'
  /app/vendor/bundle/ruby/2.4.0/gems/celluloid-0.17.3/lib/celluloid/mailbox.rb:63:in `block in check'
  /app/vendor/bundle/ruby/2.4.0/gems/timers-4.1.2/lib/timers/wait.rb:15:in `block in for'
  /app/vendor/bundle/ruby/2.4.0/gems/timers-4.1.2/lib/timers/wait.rb:14:in `loop'
  /app/vendor/bundle/ruby/2.4.0/gems/timers-4.1.2/lib/timers/wait.rb:14:in `for'
  /app/vendor/bundle/ruby/2.4.0/gems/celluloid-0.17.3/lib/celluloid/mailbox.rb:58:in `check'
  /app/vendor/bundle/ruby/2.4.0/gems/celluloid-0.17.3/lib/celluloid/actor.rb:155:in `block in run'
  /app/vendor/bundle/ruby/2.4.0/gems/timers-4.1.2/lib/timers/group.rb:68:in `wait'
  /app/vendor/bundle/ruby/2.4.0/gems/celluloid-0.17.3/lib/celluloid/actor.rb:152:in `run'
  /app/vendor/bundle/ruby/2.4.0/gems/celluloid-0.17.3/lib/celluloid/actor.rb:131:in `block in start'
  /app/vendor/bundle/ruby/2.4.0/gems/celluloid-essentials-0.20.5/lib/celluloid/internals/thread_handle.rb:14:in `block in initialize'
  /app/vendor/bundle/ruby/2.4.0/gems/celluloid-0.17.3/lib/celluloid/actor/system.rb:78:in `block in get_thread'
  /app/vendor/bundle/ruby/2.4.0/gems/celluloid-0.17.3/lib/celluloid/group/spawner.rb:50:in `block in instantiate'
```

I am a bit confused as to what is causing this error as there is no stack trace that correlates with any calls from my app.  Any advice on how to work out what could be causing this error would be hugely appreciated so that I can look into the root cause.  I suspect it could be:

* A block Actor
* A call to `sleep` 
I have seen some odd issues in our logs recently and tried to reproduce it.

I use the registry for Actors so that I can avoid having to link all my Actors together and restart everything when one Actor fails. What I mean by that is that I have a controller which starts up all the actors at the outset, and if one of those actors fails, it does not matter as I rely on the Supervisor functionality to restart that actor, and by then accessing the actors as `Celluloid::Actor[:foo]` I am not coupling Actors together unnecessarily simply for the purposes of passing messages.

According to the [Supervisor docs](https://github.com/celluloid/celluloid/wiki/Supervisors), if I supervise an actor with the `as: :foo` argument, then I can access that actor or any later respawned instance of that actor with `Celluloid::Actor[:foo]`.

Here is my registration code:

```ruby
Watch.supervise as: watch_key(watch_id), args: [watch_id, options]
```

In the Watch itself I log when it is instanced, and when that line above runs, I soon after see the log entry from the initializer as expected with the arguments specified above.

I then later forcibly trigger a failure of that actor:

```
E, [2016-12-21T10:40:41.616536 #17523] ERROR -- : Actor crashed!
RuntimeError: Test recoverer exception
        /recoverer.rb:90:in `block in run_manager_command'
```

The actor crashes as expected, and then within a few milliseconds I see the log entry from the Watch initializer confirming that a new Watch Actor has been created by the Supervisor.

Unfortunately however, whenever I then try and access that same actor, I get the DeadActorError:

```ruby
Celluloid::Actor[watch_key(watch_id)].future.foo => raises DeadActorError
Celluloid::Actor[watch_key(watch_id)].alive? => false
```

According to the docs, it states:

> In this case, the supervisor will ensure that an actor of the Sheen class, created using the given arguments, is always available by calling Celluloid::Actor[:charlie]. 

This is not happening for some reason. The old Actor is remaining in the registry and the new one, whilst instanced, is not available.  Any idea what is going on here?

BTW. 

* I am using Celluloid `0.17.3` on Linux, but expect this will happen on OSX too as that is my dev environment.
* I am not using the `supervise_as` method and instead using `supervise as:` as `supervise_as` no longer exists
We should release 1.0! While there's an awful lot of stuff we could potentially fix before shipping a "1.0" release, I think the biggest thing we can do is ship the `Actor`/`Cell` split as 0.16 (#357) and work to fix everything that breaks as a result :wink:

What about the rest of the stuff? Well, that's what 2.0 is for!
