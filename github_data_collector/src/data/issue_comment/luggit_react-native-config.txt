I've already seen people telling to commit the `.env` file (for React projects, for example), and to not commit (for servers).

For react-native projects, what's the best practice?
Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.11 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.11...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.11&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/luggit/react-native-config/network/alerts).

</details>

Thanks for the library.

Do you have plans to support object structures in the config, like JSON/YAML? 
I'm wondering if 0.12 version support autolink cause:

### First 

In the readme there is:
```
Link the library:

$ react-native link react-native-config
```

But autolink should not need a link command, right?



### Secondly

With these versions:

```
"react-native": "0.61.5",
"react-native-config": "^0.12.0",
```

I have an error on iOS:

```
built-in>:1:10: fatal error: '/Users/{USERNAME}/Library/Developer/Xcode/DerivedData/XXX-fdoedqtrcjsbppgvncqzfwelgcim/Build/Products/GeneratedInfoPlistDotEnv.h' file not found
#include "/Users/{USERNAME}/Library/Developer/Xcode/DerivedData/XXX-fdoedqtrcjsbppgvncqzfwelgcim/Build/Products/GeneratedInfoPlistDotEnv.h"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.
Command Preprocess failed with a nonzero exit code
```




See https://github.com/luggit/react-native-config/issues/187#issuecomment-554087367


In [this](https://github.com/luggit/react-native-config/commit/1eb6ac01991210ddad2989857359a0f6ee35d734#diff-04c6e90faac2675aa89e2176d2eec7d8) commit you changed the way ios integration is managed, but can you clarify whether the old mechanism still works? I have Info.plist entries like this:

```
	<key>CFBundleShortVersionString</key>
	<string>__RN_CONFIG_APP_VERSION</string>
	<key>CFBundleVersion</key>
	<string>__RN_CONFIG_APP_BUILD</string>
```
And this in build settings, as per the old instructions:
![image](https://user-images.githubusercontent.com/36155348/69501595-41676a80-0efe-11ea-9614-621b51b664e9.png)

And, at least in releases to TestFairy this still seems to work having upgraded to react-native-config 0.11.7, but before we roll out to the app store I just wanted confirmation that this will still work.

Were there any upgrade instructions when this new mechanism was rolled out? What is the advantage of the new mechanism using a .xcconfig file? Seems more complicated in the setup to me, and the latest README does not clarify how to refer to ENVFILE variables in the Info.plist file.
Is there a migration guide from 0.11.7 to 0.12.0?
What do I need to remove from the old config, and what do I need to add to the new config?
**Do I need this config in the Podfile?**
```
    if target.name == 'react-native-config'
      phase = target.project.new(Xcodeproj::Project::Object::PBXShellScriptBuildPhase)
      phase.shell_script = "cd ../../"\
        " && RNC_ROOT=./node_modules/react-native-config/"\
        " && export SYMROOT=$RNC_ROOT/ios/ReactNativeConfig"\
        " && export BUILD_DIR=$RNC_ROOT/ios/ReactNativeConfig"\
        " && ruby $RNC_ROOT/ios/ReactNativeConfig/@BuildDotenvConfig.rb"

      target.build_phases << phase
      target.build_phases.move(phase,0)
    end
```

**I have added a config file in ios folder called Config.xcconfig with this line:**
#include? "tmp.xcconfig"

I get some build errors, when I try to upgrade from 0.11.7 to 0.12.0.

I have the following:
echo ".env.test" > /tmp/envfile
Added this line to it as the guide suggests:
![image](https://user-images.githubusercontent.com/661911/69436167-26033080-0d41-11ea-86f4-22a2e162b88b.png)

**I get this build error:**
/node_modules/react-native-config/ios/ReactNativeConfig/ReadDotEnv.rb:27:in `join': no implicit conversion of nil into String (TypeError)
	from /node_modules/react-native-config/ios/ReactNativeConfig/ReadDotEnv.rb:27:in `read_dot_env'
	from ./node_modules/react-native-config//ios/ReactNativeConfig/BuildDotenvConfig.rb:15:in `<main>'
reading env file from  and writing .m to 
going to read env file from root folder 


I am trying to set up environment and only have buildtype like this.

```
  buildTypes {
    debug {
      debuggable true
      ext.enableCrashlytics = false
    }
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      consumerProguardFiles 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
  }
```

As a result, I write like this.

```
project.ext.envConfigFiles = [
        debug: ".env.dev",
        release: ".env.prod",
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

```
I have already created .env.dev and .env.prod in root project directory.

`ENV=dev
`

For testing, in my react native, I wrote like this as well.

```
<Button >{"Test " + Config.ENV}</Button>
```

Problem is it show as 'undefinied' and cannot detect Config.ENV. For iOS, it is okay. It means my gradle got issue I guess or react native version. 

I am using expo eject as well (ejected expo project)

Expo version: 35.0.0
React Native: 0.59.8

How shall I do?

For reference, this is my dotenv.gradle. I haven't changed anything. 

```
def loadDotEnv(flavor = getCurrentFlavor()) {
    def envFile = ".env"

    if (System.env['ENVFILE']) {
        envFile = System.env['ENVFILE']
    } else if (System.getProperty('ENVFILE')) {
        envFile = System.getProperty('ENVFILE')
    } else if (project.hasProperty("envConfigFiles")) {
        // use startsWith because sometimes the task is "generateDebugSources", so we want to match "debug"
        project.ext.envConfigFiles.any { pair ->
            if (flavor.startsWith(pair.key)) {
                envFile = pair.value
                return true
            }
        }
    } else if (project.hasProperty("defaultEnvFile")) {
        envFile = project.defaultEnvFile
    }

    def env = [:]
    println("Reading env from: $envFile")

    File f = new File("$project.rootDir/../$envFile");
    if (!f.exists()) {
        f = new File("$envFile");
    }

    if (f.exists()) {
        f.eachLine { line ->
            def matcher = (line =~ /^\s*(?:export\s+|)([\w\d\.\-_]+)\s*=\s*['"]?(.*?)?['"]?\s*$/)
            if (matcher.getCount() == 1 && matcher[0].size() == 3) {
                env.put(matcher[0][1], matcher[0][2].replace('"', '\\"'))
            }
        }
    } else {
        println("**************************")
        println("*** Missing .env file ****")
        println("**************************")
    }

    project.ext.set("env", env)
}
```




The vars are always correctly populated when building/archiving locally on my MAC but always empty when built/archived on Circle CI.

I'm not really sure what other information to give on this other than that. Basically, I ran into this problem when integrating Codepush to my app, where they expect the keys to be defined in the Info.plist file. I took the traditional route of specifying build settings as a temporary workaround for the moment.

Let me know how I can help with any additional logs or similar.