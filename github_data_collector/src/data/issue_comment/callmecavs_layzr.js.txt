Some browsers now support a `loading` attribute on images and iframes. A recent article on Smashing details how lazy loading scripts can be modified to first check for native support for lazy loading before triggering JavaScript based solutions.

What are your thoughts on adding a parameter (something like `prefer_native`) that would check if native lazy loading is supported, and only run Layzr if it's not supported?

https://www.smashingmagazine.com/2019/05/hybrid-lazy-loading-progressive-migration-native/
Do you have any plans to support the [IntersectionObserver API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)? It is supposed to be more performant than `Element.getBoundingClientRect()` and is [becoming widely supported](https://caniuse.com/#search=IntersectionObserver).

Hi, dear

This PR stops loading `img` which is not displayed ( `display:none` ).
The function `getBoundingClientRect`, which is used in `inViewport` can't take correct position when the node is in invisible element, can it?
So I added a check in `inViewport` to know whether it's displayed.
Please tell me if I did anything wrong.
Thanks.

best regards,
Hello!

I have added new option which allow to use optional container with images for lazy loading (not only `window`). Also I added two `html` pages for manual testing (`scrollWindow.html` and `scrollOverflowContainer.html`).

What do you think about review and merge it? :-)
This PR fixes a problem I currently have. Simply, I have a div on my page which is `overflow: auto`. Inside this div, I have a bunch of images that I want to lazy-load with Layzr. The issue is that Layzr's `handlers` method only operates on `window`. This means that only scrolling the window itself will trigger lazy-loading, and scrolling any other element won't. I propose the addition of `handlersFor` which will add the `scroll` handler for the given node.

Note: I looked into detecting resizing of a div (though, it's not a problem I have). It seems that [this](http://marcj.github.io/css-element-queries/) is a popular solution, and very efficient. However, it would introduce a dependency for an edge case which is probably rare. Having said that, maybe we should expose `requestFrame` (perhaps under a different name) as a hook for adding other triggers?
