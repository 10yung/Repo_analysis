```
> library(strict)
Warning message:
`env_bind_fns()` is deprecated as of rlang 0.3.0.
Please use `env_bind_active()` instead.
This warning is displayed once per session. 
> library(sessioninfo)
> session_info()
─ Session info ───────────────────────────────────────────────────────────────
 setting  value                       
 version  R version 3.4.4 (2018-03-15)
 os       Ubuntu 18.04.3 LTS          
 system   x86_64, linux-gnu           
 ui       X11                         
 language en_CA:en                    
 collate  en_US.UTF-8                 
 ctype    en_US.UTF-8                 
 tz       America/Toronto             
 date     2019-09-24                  

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version    date       lib source                        
 assertthat    0.2.1      2019-03-21 [1] CRAN (R 3.4.4)                
 cli           1.1.0      2019-03-19 [1] CRAN (R 3.4.4)                
 crayon        1.3.4      2017-09-16 [1] CRAN (R 3.4.4)                
 rlang         0.4.0      2019-06-25 [1] CRAN (R 3.4.4)                
 sessioninfo * 1.1.1      2018-11-05 [1] CRAN (R 3.4.4)                
 strict      * 0.0.0.9000 2019-04-01 [1] Github (hadley/strict@446573b)
 withr         2.1.2      2018-03-15 [1] CRAN (R 3.4.4)                

[1] /usr/local/lib/R/site-library
[2] /usr/lib/R/site-library
[3] /usr/lib/R/library
```
What I am doing is not exactly good practice anyway but I don't really understand why I am getting an error from strict here.

I have a package that creates a structure named `list` as `list = structure(NA, class = 'result')` and exports it. I have isolated this and placed it in [this package](https://github.com/oganm/unpack). What it does isn't really important but when this package is loaded, if I try to use dplyr, I get an error

```r
devtools::install_github('oganm/unpack')
library(strict)
library(unpack)
dplyr::filter(data.frame(a = c(1,2,3)), a == 1)
```
```
Error in filter_impl(.data, quo) : Evaluation error: [strict]
Multiple definitions found for `list`.
Please pick one:
 * unpack::list
 * base::list
Call `rlang::last_error()` to see a backtrace.
```
The code above does not try to use `list` which made me wonder if it can be avoided and why is it happening in the first place.
In case anyone else has had need to unload the `strict` R package without restarting your session, you need to do the following:

```R
if ("strict_conflicts" %in% search()) detach("strict_conflicts")
if ("strict_shims" %in% search()) detach("strict_shims")
if ("strict" %in% loadedNamespaces()) unloadNamespace("strict")
```

Unfortunately, `detach("package:strict")` doesn't work. There's a little more detail [here](https://gist.github.com/LukeGoodsell/aa8c79b34481c0544bd1f9800cd197b5).

Please let me know if I've missed anything.

```r
strict::strict_diag(matrix(1:9, nrow = 3))
```

returns

```
Error in base::diag(x = x, nrow = nrow, ncol = ncol) : 
  'nrow' or 'ncol' cannot be specified when 'x' is a matrix
```

Is that intended?

I'm using __R 3.3.3__, but cannot find anything in the [changelog](https://cran.r-project.org/doc/manuals/r-devel/NEWS.html) to explain the failure.
Quite a few people still learn to `attach(df)` for working with data. This is a dangerous approach, as you get confusion about where results of a transformation are stored:

```
attach(iris)
Sepal.Length <- round(Sepal.Length, 0)
```
Now `Sepal.Length` and `iris$Sepal.Length` are two different things. 

Personally I would even throw an error from the moment `attach()` is used. See also the session Good Practice in `?attach`.
This one catches me out quite a lot as I've come from another language where && and || are almost exclusively used (since they just mean short-circuit and/or).

```r
x <- c(1,2,3,4,5)
x > 1 && x < 4
#[1] FALSE
```

```r
x <- c(1,2,3,4,5)
x >= 1 & x < 6
[1] TRUE TRUE TRUE TRUE TRUE
```

Thanks to @WerthPADOH, I realise now that && and || just check the first item in the same way that `if(vector) does`. Very dangerous and would be good for it to throw an error
Hi,

I'm using strict and I'm seeing the following error on a function I am not calling in my script. Any ideas? I've tried using `lax(BiocGenerics)` but does not work and I'm not sure if it should.

To reproduce:

```
library(strict)
library(BiocGenerics)
library(readr)
read_tsv("example.tab")
```

gives:

```
terminate called after throwing an instance of 'Rcpp::eval_error'
  what():  Evaluation error: [strict]
Multiple definitions found for evalq.
Please pick one:
 * BiocGenerics::evalq
 * base::evalq.
Aborted (core dumped)
```

```
sessionInfo()
R version 3.4.1 (2017-06-30)
Platform: x86_64-redhat-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /usr/lib64/R/lib/libRblas.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] strict_0.0.0.9000

loaded via a namespace (and not attached):
 [1] httr_1.3.1      compiler_3.4.1  R6_2.2.2        tools_3.4.1
 [5] withr_2.0.0     curl_2.8.1      memoise_1.1.0   git2r_0.19.0
 [9] digest_0.6.12   rlang_0.1.2     devtools_1.13.3
```





R can change its behavior for code like...

```
a <- 1:2
if (a == 1) {
  print("ok")
}
```
to be an error instead of the typical `the condition has length > 1 and only the first element will be used` warning.  It seems like it might be in keeping with `package:strict` to throw that error.  However, it looks like this would [require setting an environmental variable](https://github.com/HenrikBengtsson/Wishlist-for-R/issues/38)...
```
Sys.setenv(`_R_CHECK_LENGTH_1_CONDITION_`="true")
a <- 1:2
if (a == 1) {
  print("ok")
}
```

What do you think, is setting that env var in scope for `package:strict`?
Double clicking a .rds file will automatically open the file with a ```load``` function call, which throws a very terse error:

```
t <- load("/Users/petergensler/Downloads/homedata_lesson1_clean.rds")
Error in load("/Users/petergensler/Downloads/homedata_lesson1_clean.rds") : 
  bad restore file magic number (file may be corrupted) -- no data loaded
In addition: Warning message:
file ‘homedata_lesson1_clean.rds’ has magic number 'X'
  Use of save versions prior to 2 is deprecated 
```
Maybe forcing a user to explicitly use read_rds when reading in a .rds file is a good idea?

```
##works fine
t <- readr::read_rds("/Users/petergensler/Downloads/homedata_lesson1_clean.rds")  
```
