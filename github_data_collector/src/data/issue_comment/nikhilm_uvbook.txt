void alloc_buffer(uv_handle_t *handle, size_t suggested_size, uv_buf_t *buf) {
    buf->base = (char*) malloc(suggested_size);
    memset(buf->base, 0, suggested_size);  // set 0
    buf->len = suggested_size;
}

After malloc, memset should be added, otherwise the received data may be scrambled. Actually, the test will be scrambled

Apparently newer versions of sphinx (>=1.8) don't support the pngmath extension.  This patch selectively adds the extension for older versions.  Tested with Sphinx 1.8.2
The pipe name "echo.sock" is not valid on Windows. What about using defines like [here](https://github.com/libuv/libuv/blob/1a96fe33343f82721ba8bc93adb5a67ddcf70ec4/test/task.h#L50-L58) in the working libuv tests?
[Referring to this code...](https://github.com/nikhilm/uvbook/blob/master/code/spawn/main.c)

Please also refer to [this](https://github.com/joyent/libuv/issues/796), which I think might be relevant.

After the call to uv_close() in the on_exit callback, the next time the following executes in core.c:498:

`if ((mode == UV_RUN_ONCE && !ran_pending) || mode == UV_RUN_DEFAULT)
      timeout = uv_backend_timeout(loop);`

uv_backend_timeout returns INFINITE. When the next loop then reaches core.c:420 (uv_poll_ex):

`success = pGetQueuedCompletionStatusEx(loop->iocp,
                                           overlappeds,
                                           ARRAY_SIZE(overlappeds),
                                           &count,
                                           timeout,
                                           FALSE);`

the program (unsurprisingly) hangs.

Two possible workarounds that fix the issue are:

1) call `uv_stop(uv_default_loop());` after the call to uv_close(), or

2) in the last line in main.c, replace this:

`return uv_run(loop, UV_RUN_DEFAULT);`

with

`while (0 != uv_run(loop, UV_RUN_ONCE));
return 0;`

I am new to libuv. If the above two options are incorrect or ill-advised, what is the correct fix for this? 

Hi,

First, thanks a lot for the book and examples, really useful.

If I run tcp-echo-server and use netcat to test, connection is closed immediately

```
[root@375f8431ca9f code]# echo -n 'hello!' | nc 127.0.0.1 7000
hello![root@375f8431ca9f code]# 
```

however, if I run multi-echo-server the connection is not closed

```
[root@375f8431ca9f code]# echo -n 'hello!' | nc 127.0.0.1 7000
hello!
```

Is this expected behavior because of using child process? 

I'm getting "Bind error EACCESS" error on the uv_pipe_bind on Windows.  IOJS & Node versions 2.3.1,  64-bit Windows 8.1 running under Git Bash.

uv_loop_t *loop;
uv_process_t child_req;
uv_process_options_t options;

bool MyPackage::OpenPipe()
{

  loop = uv_default_loop();
  uv_pipe_t server;
  uv_pipe_init(loop, &server, 0);

  signal(SIGINT, remove_sock);

  int q;
  if ((q = uv_pipe_bind(&server, "echo.sock"))) {
      fprintf(stderr, "Bind error %s\n", uv_err_name(q)); // <-- Errors here
      return false;
  }

... etc ...

It looks like you are using "CreateNamedPipeW" (http://manned.org/CreateNamedPipeW/c4d0b097) under Windows.  Is that valid, or do you mean to use "CreatedNamedPipe" (https://msdn.microsoft.com/en-us/library/windows/desktop/aa365150(v=vs.85).aspx) instead?

In the uvtee example, `uv_pipe_open(&file_pipe, fd)` fails on windows because internally it calls `uv_set_pipe_handle` which only works on something that is actually a named pipe. Should I open an issue at libuv instead? I'm not sure how to fix it.

---

I'm similarly not certain the example is fully functional on Linux either. Treating a pipe as a file isn't always valid. For example:

```
$ echo something > test.txt
$ ./uvtee hello.txt < test.txt 
Aborted (core dumped)
```

I have a hack that fixes this issue, I'm wondering if you think I should also submit this fix upstream?

---

Thanks for the manual!

I had a problem getting data from a child process using a pipe.  Please feel free to add a paragraph based on my problem and solution.  (Consider code public domain / MIT if it matters.)  

http://stackoverflow.com/questions/14751504/capture-a-child-processs-stdout-with-libuv/14753057#14753057

Would be mega awesome to see a simple client for the echo server

That it's a cross-platform meta-build system for generating msvs, xcode, or make build file. Explain that it's used for generating production Google Chrome builds and therefore rather robust. GYP makes it very easy to include libuv into other GYP projects 
