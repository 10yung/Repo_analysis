hello everyone,

First, congratulations for this great idea!
I successfully ran the example in this repository that launched my default browser and rendered the app.

Now, I would like to packaging the shiny files before desktopdeploying it. For that, I included a *launchApp* function when packaging

    launchApp <- function(){
      shiny::shinyApp(ui, server)
    }

This package, let's say, MyPackage, could be attached and the function *launcApp()* can launch the app manually in the R terminal

Then I manually add this package into the app/library and changed the app.R function as
    MyPackage::launchApp()


Once the appname.bat is launched, the browser opened and closed automatically. 
What did I miss? Grateful if you could guide me on how to packaging first the shiny files before desktopdeploying it. Thank you




Hello everybody,

I have trouble using global.R.

I defined some constants there and saved the file as proposed in the application structure in app/shiny/global.R

But when starting the app, the defined constants are not accessible.

Do I have to tell shiny to load global.R?


Hello Lee Pang

Thank you so much for creating this framework!
I managed to deploy it successfully on my Windows desktop. However, when I transferred the program files to a secured environment, the program stops after it reaches the file in dist/script/wsf/js/run.js. 

The following steps were logged: 
.bat file was allowed to run
dist/script/wsf/run.wsf was allowed to run
dist/script/wsf/js/json2.js was allowed to run
dist/script/wsf/js/json.minify.js was allowed to run
dist/script/wsf/js/run.js was allowed to run

The process terminates afterwards. 
Wanted to check if the run.js file requires any additional configurations or external dependencies/special settings? 

Cheers~
https://github.com/wleepang/DesktopDeployR/blob/8062916449b1c685706835e85f40d48e78f9ee45/dist/script/R/run.R#L20

For instance:
```
devtools::install_github(repo = "garthtarr/pairsD3",
                         ref = "69289763291e0fd95ac9c369bc83c23d1121eaea")
```

instead of
`
devtools::install_github(repo = "garthtarr/pairsD3")`
This is helpful for packages changing at a fast pace, and to ensure robustness over changes, and reproducibility of scientific computations.
Would it be helpful to use packrat?
[packrat](https://www.rstudio.com/resources/webinars/managing-package-dependencies-in-r-with-packrat/)
https://github.com/wleepang/DesktopDeployR/blob/8062916449b1c685706835e85f40d48e78f9ee45/dist/script/R/run.R#L20

For instance allow something like:
`devtools::install_github(repo = "garthtarr/pairsD3")`
Add an example `*.iss` compiler configuration for InnoSetup so that users have a starting point for building an installer for deployment.

Implement configurable options to allow users to:
- disable logging entirely 
- specify what is logged (stdout, stderr, stdout + stderr)

Hello,

thanks for your work.

My question is, if it is possible to use your solution to open an gWidgets2 (tcltk) App?
I tried and can see the Desktop App for half a second, but then it closes again by itself with the last log message: "Application terminated normally"

Thank you for any hint.

Great idea, I'm definitely going to play with it. (Unfortunately, most of my clients trust me to do the R ... they just want "answers"!)

Thought: when an app is deployed to the client, there is an assumption that things work as they did when the app was deployed. Unfortunately, if you automatically update installed packages, this might break things.

What do you think about [`checkpoint`](https://cran.r-project.org/web/packages/checkpoint/index.html)-like dependency handling, either _always_ or some mechanism for opting in? (For instance, packages that make significant changes to the function names, defaults, or API often increment the package's major number; a simple upgrade will see a higher number and update regardless of the untested ramifications this will have on the other deployed packages.)

As much as I don't use `checkpoint` for my normal use, it's because I control my own environment. When I give it to clients, I can only assume that they will keep using it well beyond the timeline I foresaw (or agreed), by which time some dependencies will have made huge changes to their API.

Hello

First of all, let me congratulate you on putting the different pieces together, and make it easier to deploy R/Shiny to non R-User. This is more of a question rather than an issue:

Is it possible to generalize this framework to work on other OS (eg OSX and Ubuntu)? Does R-portable exist for non-windows os?

Cheers
