Running `test/all.test` results in a segfault on Linux:

```
...
altermalloc-1.transient.79... Ok
altermalloc-1.transient.80...
! altermalloc-1.transient.80 expected: [1 1]
! altermalloc-1.transient.80 got:      [0 {}]
altermalloc-1.transient.81...
! altermalloc-1.transient.81 expected: [1 1]
! altermalloc-1.transient.81 got:      [0 {}]
altermalloc-1.transient.82...
! altermalloc-1.transient.82 expected: [1 1]
! altermalloc-1.transient.82 got:      [0 {}]
altermalloc-1.transient.83...
! altermalloc-1.transient.83 expected: [1 1]
! altermalloc-1.transient.83 got:      [0 {}]
altermalloc-1.transient.84...
! altermalloc-1.transient.84 expected: [1 1]
! altermalloc-1.transient.84 got:      [0 {}]
altermalloc-1.transient.85...
! altermalloc-1.transient.85 expected: [1 1]
! altermalloc-1.transient.85 got:      [0 {}]
altermalloc-1.transient.86...[1]    62802 segmentation fault (core dumped)  ./testfixture ../test/all.test
```


### Steps to Reproduce

1. Configure as described in the readme
2. Run `make testfixture`
3. Run `./testfixture test/all.test`

SQLCipher version: v4.3.0
Unfortunately there is no section in the readme on how to start the tests. From reading #172, `make test` apparently is not supposed to work. However, the test mentioned in #172 also does not exist any longer (assuming it has been renamed to `sqlcipher.test`).

Can you document how to run the tests in the readme?
### Expected Behavior
I have installed VS 2017 and I am trying to build the sqlcipher command (as in Ubuntu 18) for my Windows 10 x64.

### Actual Behavior
but I get the below error:

**..\Makefile.msc(2547) : fatal error U1052: file '..\sqlite\ext\lsm1\Makefile.msc' not found**


### Steps to Reproduce
 so I tried to do so by

```
    mkdir bld
    cd bld
    nmake /f Makefile.msc sqlite3.exe TOP=..\sqlite
```

But firstly I get the below error which is pretty obvious. It is most likely because in the bld folder there is no Makefile.msc. 

**
Microsoft (R) Program Maintenance Utility Version 14.16.27032.1
Copyright (C) Microsoft Corporation.  All rights reserved.

NMAKE : fatal error U1052: file 'Makefile.msc' not found
Stop.
**

So I tried to fix that by adding "..\" before Makefile.msc

**
    nmake /f ..\Makefile.msc sqlite3.exe TOP=..\sqlite
                   ^
**

But then I get the below error  which I believe is pretty obviously because I don't have the sqlite source folder in the source folder but I don't know where to get the source for sqlite and how to fix this.

**Microsoft (R) Program Maintenance Utility Version 14.16.27032.1
Copyright (C) Microsoft Corporation.  All rights reserved.

..\Makefile.msc(2547) : fatal error U1052: file '..\sqlite\ext\lsm1\Makefile.msc' not found
Stop.**

to be honest I couldn't find a step by step instruction on how to build sqlcipher using MSVC. The only one I found is [this](https://github.com/sqlitebrowser/sqlitebrowser/wiki/Win64-setup-%E2%80%94-Compiling-SQLCipher) which is pretty old.

I would appreciate if sb could shed some light.

Thank you


SQLCipher version: 4.2.0

*Note:* If you are not posting a specific issue for the SQLCipher library, please consider posting your question to the SQLCipher [discuss site](https://discuss.zetetic.net/c/sqlcipher).  Thanks!

I've recreated these files using the method described at https://www.gnu.org/software/gettext/manual/html_node/config_002eguess.html.

This should allow to compile sqlcipher with the arm64 instruction set.
### Expected Behavior
When I do vacuuming operation for a big database about 13G using latest SQLCipher  code in git,
I found the memory go up high continuously,  but when I use pure SQLite3 3.28.0 to test , it doesn't make memory high , so I don't know where I am wrong to use SQLCipher or some bug in SQLCipher
### Actual Behavior
it shoudn't make memory go up high continuously, which seems memory leak issue
### Steps to Reproduce
Just do VACCUM operation for a big database , then you will see memory go up high continously
SQLCipher version:
4.2.0
*Note:* If you are not posting a specific issue for the SQLCipher library, please consider posting your question to the SQLCipher [discuss site](https://discuss.zetetic.net/c/sqlcipher).  Thanks!

Changes proposed in this pull request:
- Add a mbedcrypto implementation for SQLCipher.

**Remark:** while this has been witnessed on Android, unless I'm mistaken this is not a android-database-sqlcipher bug as I'm using the amalgamation from the NDK side directly (a classic C program, not the Java API).

I'm running repeated (2 or 3 times per second) SELECT queries on a large table that has 26 columns, and about 30K records. The only conditional in the query is a comparison with a text field and the proper indexes set on that field (as confirmed by EXPLAIN QUERY PLAN). Most of the columns are retrieved on the SELECTs; one of them is a BLOB, but it is selected through HEX(blob_column).

Compared to previous (3.x) versions, doing those selects appears to take roughly double the amount of time on 4.x. This is confirmed by an average of the N last queries (it's not a one-shot). The database itself was a 3.x one, but this happens both when using the new 4.x config (after doing a pragma cipher_migrate+vacuum on said database) and when using 4.x with the 3.x compatibility settings (using the four pragma provided in your release changelog for that purpose).

I saw this bug, however: https://github.com/sqlcipher/android-database-sqlcipher/issues/411
... and as a result tried:

PRAGMA cipher_memory_security = OFF

... and this fixes the issue entirely. The selects now run as fast, if not faster, than on 3.x.

This may not really be a "bug", mind you; the new memory wiping security feature *does* strongly increase security. However, the fact that it was added in 4.x, and above all the possible performance impact (double the time for my use case described above), should probably be announced and documented better.
Changes proposed in this pull request:
-

We cross-compile sqlcipher for Windows on a Linux machine and to make it work we have to jump through some hoops, instead of it just working.

~~Here is how we currently make it work.~~

``` sh
REMOVED, SEE BELOW
```
[(old version)](https://web.archive.org/web/20171224151436/https://github.com/sqlcipher/sqlcipher/issues/176).

~~It's Debian 8 system. libopenssl_build_windows_x86-64_static_release.zip is a static openssl, cross-compiled for Windows.~~

~~Would be nice if you could fix the build system for windows cross-compilation to work out of the box or point out if we are doing something wrong.~~

~~SQLCipher version is 3.4.0~~

**EDIT**: [Here is an updated version for 3.4.2](https://github.com/qTox/qTox/blob/9525505bff8719c84b6193174ea5e7ec097c54b8/windows/cross-compile/build.sh#L390-L446). Make sure you copy tabs as tabs and spaces as spaces, without removing any trailing white-space in the patch part, as the patch will likely fail to apply because of that.

**EDIT2**: [Same but for 4.2.0](https://github.com/qTox/qTox/blob/51c5171ca395ca35c934e0357748e512d746f356/windows/cross-compile/build.sh#L389-L447).
This patch adds basic libsodium support.

Kdf: `crypto_pwhash_scryptsalsa208sha256`
Hmac: `crypto_auth_hmacsha512`
Cipher: `crypto_stream_xsalsa20`

Please make sure i did it right.

Also all of this code is public domain.
