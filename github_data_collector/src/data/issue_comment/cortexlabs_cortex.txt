closes #740 

---

checklist:

- [ ] run `make test` and `make lint`
- [ ] test end to end manually (i.e. build/push all images, restart operator, and run `cortex deploy --refresh`)
- [ ] update the examples
- [ ] update the docs and add any new files to `summary.md`
- [ ] merge to master
- [ ] cherry-pick into release branches if applicable
- [ ] check that the docs are up-to-date in [gitbook](https://www.cortex.dev/v/master)
- [ ] alert the dev team if the dev environment changed
- [ ] delete the branch once it's merged

closes #716 

---

checklist:

- [ ] run `make test` and `make lint`
- [ ] test end to end manually (i.e. build/push all images, restart operator, and run `cortex deploy --refresh`)
- [ ] update the examples
- [ ] update the docs and add any new files to `summary.md`
- [ ] merge to master
- [ ] cherry-pick into release branches if applicable
- [ ] check that the docs are up-to-date in [gitbook](https://www.cortex.dev/v/master)
- [ ] alert the dev team if the dev environment changed
- [ ] delete the branch once it's merged

#### Version

0.12.0

#### Description

Update validations to prevent users from spinning up clusters with instance types *.nano and *.micro.
closes #717 

---

checklist:

- [ ] run `make test` and `make lint`
- [ ] test end to end manually (i.e. build/push all images, restart operator, and run `cortex deploy --refresh`)
- [ ] update the examples
- [ ] update the docs and add any new files to `summary.md`
- [ ] merge to master
- [ ] cherry-pick into release branches if applicable
- [ ] check that the docs are up-to-date in [gitbook](https://www.cortex.dev/v/master)
- [ ] alert the dev team if the dev environment changed
- [ ] delete the branch once it's merged

closes #722 

---

checklist:

- [ ] run `make test` and `make lint`
- [ ] test end to end manually (i.e. build/push all images, restart operator, and run `cortex deploy --refresh`)
- [ ] update the examples
- [ ] update the docs and add any new files to `summary.md`
- [ ] merge to master
- [ ] cherry-pick into release branches if applicable
- [ ] check that the docs are up-to-date in [gitbook](https://www.cortex.dev/v/master)
- [ ] alert the dev team if the dev environment changed
- [ ] delete the branch once it's merged

closes #742, #732 

---

checklist:

- [ ] run `make test` and `make lint`
- [ ] test end to end manually (i.e. build/push all images, restart operator, and run `cortex deploy --refresh`)
- [ ] update the examples
- [ ] update the docs and add any new files to `summary.md`
- [ ] merge to master
- [ ] cherry-pick into release branches if applicable
- [ ] check that the docs are up-to-date in [gitbook](https://www.cortex.dev/v/master)
- [ ] alert the dev team if the dev environment changed
- [ ] delete the branch once it's merged

#### Description

Currently, the spot instance type will be chosen based on whichever type in the instance distribution is cheapest. There are scenarios where more expensive instances provide more compute per dollar, in which case it may be advantageous to pay more for the bigger instance.

#### Relevant docs

* [AWS ASG instance weights](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html)
* investigation is necessary to see how the cluster autoscaler can handle this
* not currently supported in [eksctl config](https://eksctl.io/usage/spot-instances/)

#### Notes

* this is just relevant for spot instances, since on-demand instance prices don't change, and scale linearly with instance size within a family
#### Description

Have seen `OOMKilled` in the logs

#### Description

When `on_demand_backup` is set to true, there is a possibility that on-demand instances are spin up when spot instances aren't available. When spot instances are available, replace spot instances with on-demand instances.

#### Additional context
- https://github.com/kubernetes/kubernetes/issues/45509
- [Pod deletion precedence rules](https://github.com/kubernetes/kubernetes/blob/d8d680be6e2bd1455bb6861f9bd6ed7d4f7dce43/pkg/controller/controller_utils.go#L731-L763)
- Look into pod disruption budget so minimize impact of transitioning pods from spot to on-demand instances
