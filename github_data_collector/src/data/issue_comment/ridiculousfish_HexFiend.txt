macOS 10.14.6

2.12.0 update is not offered 
<img width="412" alt="image" src="https://user-images.githubusercontent.com/5124946/72380766-17534d00-36e4-11ea-8742-cce3182e6ffb.png">

[mostly notes for my future self]

From https://developer.apple.com/documentation/macos_release_notes/macos_catalina_10_15_release_notes?language=objc

> Scripting language runtimes such as Python, Ruby, and Perl are included in macOS for compatibility with legacy software. Future versions of macOS won’t include scripting language runtimes by default, and might require you to install additional packages. If your software depends on scripting languages, it’s recommended that you bundle the runtime within the app.

While they don't mention Tcl, it might be removed in a future macOS version (ARM macOS?). If that's the case, we'll need to embed the Tcl framework directly into the app. This also benefits us by targeting a single version of the language/runtime, instead of whatever is built-in to the OS.

To compile:

1. Download source from https://www.tcl.tk/software/tcltk/download.html
2. Unarchive like so: `tar -xvf tcl8.6.9-src.tar.gz`
3. Move into the `macosx` directory: `cd tcl8.6.9/macosx`
4. Configure with `./configure`
5. Build with `make embedded`

Alongside the archive will be build/tcl/Tcl.framework which we can embed into the app.
I've been trying to reverse engineer a binary file format. During this process, I take a lot of notes on regular paper. It would be very helpful to add notes to the colored selections you highlight in HexFiend. The text will be shown while hoovering the mouse above the highlight. As a reference, [Ableton has the functionality to add info text](https://www.youtube.com/watch?v=DS81szjORWA) (i.e. taking notes) to much of your work. This is a form of GUI tooltip but better: by having a text box you will not be annoyed by pop up text, the text will be shown immediately when hoovering above a highlight, and you can create notes with line shifts.

BTW, thanks for this amazing software!


One of the most frequent use cases I have for a hex editor is to find opcodes that I've identified in a debugger. I then paste them into YARA rules. For readability in YARA, it's good practice to add spaces between bytes like so:

```
$a = { 01 DB 75 07 8B }
```

Can an optional feature be added to the preferences that adds spaces between bytes when copying to the clipboard?

I know this small snippet is easy to add spaces to, but for longer opcodes, having spaces added automagically would be a time saver.
Binary template view scroll dnt worked on diff window.
When performing a diff/compare, you can only control which ui elements are shown for the right pane.

For example, if you use the "Views" menu to turn off line numbers, turn on the plain text view, turn on templates, turn on columns, etc. These options all only apply to the right hand pane, the left hand pane ignores them.

Seems to me the solutuon would be to have the settings apply to both sides, though I guess an alternative would be to have a duplicate sets of controls in a submenu for the left pane.

Relatedly, it'd be nice if these ui settings were remembered for the diff/compare view.

I think this is a feature request, but if there's already a way to do this, please let me know:

Experimenting with a binary file format i'm trying to reverse-engineer, i find myself frequently wanting to fill a region of the file with a certain byte, similar to how one might use `memset()` in C. (The structures in the file are fixed in size, so just deleting the region wouldn't be helpful.) Usually i want to fill with `0x00` or `0xff`.

I think the most intuitive way to do this in my particular case (and it's what i immediately tried) would be to select a region of the file, right-click it, and then have like a 'Fill...' sub-menu with `0x00`, `0xff`, and maybe 'Other...'.

(I'm probably getting way too far into the weeds, but it occurs to me that data-manipulation functions like this could be implemented by the user if HexFiend supported scripting. Other examples of tasks you might script (ones that i've been doing with this file format) include updating check sums and repeating a decrement/increment/replace every *x* bytes. Is extending the Tcl integration used for templates into areas like this something that's been considered before?)

A few suggestions to improve the templates:

- when I select some data in the hex or text view, it would be great if the corresponding value(s) in the template were highlighted (and scrolled to be visible)

- it would be great to allow selecting multiple values (at least contiguous, even better also discontiguous) in the template, and highlight the corresponding bytes in the other views; also "copy values" would copy the values of all selected values. And finally, add a "copy labels and value" would copy structured text, with indented sections

- maybe you could add builtin support for posix dates (although we can use clock: `entry "posix date" [clock format [uint32] -format "%d/%m/%Y %H:%M:%S"]`; but this does not use the system's date format, and when I select the value in the template, the corresponding bytes are not highlighted in the other views)

- instead of a timeout, show a progress dialog (even if it is indeterminate) with a stop button when evaluating the template is slow. And if possible, use the partial result of the template if its execution has been stopped.
There's no way to deal with anything that's not byte aligned with "binary" templates, unless I'm missing something. It would be useful for reading files that contain bitstreams, and also raw devices.