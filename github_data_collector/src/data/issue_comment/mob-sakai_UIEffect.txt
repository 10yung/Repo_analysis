Hi !

First at all, UI-Effect is a really great plugin for Unity !

I have UI elements (images) that needs to affected by lights (using SpriteDefaultDiffuse shader).
When I apply UI-Effect, the Image component material is replaced with UI-Effect.mat (or variants such as UI-Effect-BlurDetail...) but UI-Effect.mat doesn't seem to handle diffuse (closer to SpriteDefault than SpriteDefaultDiffuse).

Could it be possible to patch UI-Effect main shader to make it diffuse ?

Thanks a lot

Great job, really !

Frederic
France
 - Platform: [e.g. Editor mac target ios platform
 - Unity: [e.g. 2019.2+]
 - UIEffect: [e.g. v3.2.0]
    void Start()
    {
        UIEffect uiEffect = gameObject.AddComponent<UIEffect>();
        uiEffect.effectMode = EffectMode.Sepia; //Error[0]
        uiEffect.effectFactor = 1f;
        uiEffect.effectColor = Color.white;
        uiEffect.colorMode = ColorMode.Fill; //Error[1]
        uiEffect.colorFactor = 1f;
    }

//Error[0]: Assets\AddUiEffect.cs(12,9): error CS0200: Property or indexer 'UIEffect.effectMode' cannot be assigned to -- it is read only
//Error[1]: Assets\AddUiEffect.cs(15,9): error CS0200: Property or indexer 'UIEffect.colorMode' cannot be assigned to -- it is read only

So the effectMode/colorMode can only be changed in the inspector?
Can you help with this issue? Much Appreciated! 
**Describe the bug**
Using Advanced Blur and Detail Blur mode on an Android device makes the game really slow.
Updates takes several seconds.

**To Reproduce**
Steps to reproduce the behavior:
1. Create a basic 2D UI project
2. Add a Button, configure it so it changes color when clicked and released
3. Add UI Effect and UI Shadow to configure a "Soft shadow" usage. Use "Detail blur" mode and tick "Advanced Blur".
4. Build and Run on an Android Device. See refresh rate when clicking on the button.

**Environment**
 - Platform: Android 5.0
 - Unity: 2019.1.8f1
 - UIEffect: v3.2.0

**Additional context**
I was told it was working fine some months ago, then an Android update occurred, and suddenly the app was awfully slow when run. It seems the app was not rebuilt in the meantime.
Only an Android update was done between the time it was working fine and smooth and now that it is too slow.

I've tried building a single project, like indicated in the "Reproduce" section, and indeed it is desperately slow with these settings.
Cannot personally confirm it was working "before", only was told by a colleague.

Edit : it seems the issue comes from the "Advanced Blur" option, as it is also very slow in Advanced, Medium Blur, but runs fine in Detail no-Advanced Blur.
Hello, first of all, MANY MANY thanks for your excellent work! 

I've got a project that requires a runtime change of Color mode (From Multiply to Add) for the UI Effect component. Unfortunately there's no setter in the UIEffect.cs, I've tried adding :
(on line 182)
		public ColorMode colorMode
		{
			get
			{
				return m_ColorMode;
			}
			set
			{
				m_ColorMode = value;
				GetMaterial();
				UpgradeIfNeeded();
			}
		}

but it did not work properly, it showed Add mode in the UI, but actually it was still multiply mode assigned...

Is there a way to do this ? At least maybe some workaround?


Since the adoption of Custom Render Pipelines camera stacking, UI Layering, etc is more in the hands of each developer.
However the proper way to blend a separately UI render after the fact is to clear a render target to a full clear color (black and alpha zero'ed), render all the UI on it with the preferred color blend mode BUT _**with the alpha channel always adding to the destination (separate alpha blend one one).**_ This resulting image can then be combined properly to any other on top.

**Describe the solution you'd like**
The option to use a UI-Effect shader with separate alpha blending op option.

**Describe alternatives you've considered**
Can force it on the current shaders, but would probably be better to have official support from the library. Probabably behind a #define directive?

**Additional context**
The default alpha blending behavior is that the last element that draws leaves it's alpha value "burned" on the image. So if by any chance one of the last elements during UI rendering happens to be very low opacity, it will leave that low value on the part of the image that it covers. Later on when combining them, that low value will wrongly make it low opacity.
 - Platform: Editor(Windows) Standalone(Windows)
 - Unity: 2019.2.8
 - UIEffect: v3.2

Hello, I wonder if it's possible to get an advanced reveal effect with TMP. Right now I'm using a reveal effect using the alpha value of the chars vertex colors, allowing a typewriter or fade effect per char.

I would like something like a dissolving effect per char, or at least per line. To make it per line I thought of dividing each line of text in a different TMPText and applying directly the dissolve effect to each one, but that's not optimal for dynamic text and it won't work for individual chars.

Congratulations for this wonderful component. 事前にどうもありがとうございました。
**Describe the bug**
1. static List<Action> s_UpdateActions; Normal initialization once
2. There are "n" canvases in the current scene
3. Canvas.willRenderCanvases is called "n" times

**To Reproduce**
Steps to reproduce the behavior:
1. Put "10" canvases in the current scene
2. And then look at the effect

**Environment (please complete the following information):**
 - Platform: [e.g. Editor(Windows/Mac), Standalone(Windows/Mac), iOS, Android, WebGL]
 - Unity: [e.g. 2018.2.8f1]
 - UIEffect: [e.g. v3.2.0]

**Additional context**
Add any other context, screenshots or gif animations about the bug here.

**BUG Fix**
1. Add “bool isRendered” variable on EffectPlayer
2. Using “bool isRendered” exclude multiple calls when "void OnWillRenderCanvases()" is called eg:
```
		void OnWillRenderCanvases()
		{
			if (!play || !Application.isPlaying || _callback == null || isRendered)
			{
				return;
			}

			isRendered = true;
			//Timer update...
		}
```
3. Add "internal void LateUpdate() { isRendered = false; }" on EffectPlayer
4. Call on UIEffectComponent eg:
```
		protected override void LateUpdate()
		{
			base.LateUpdate();
			_player.LateUpdate();
		}
```
