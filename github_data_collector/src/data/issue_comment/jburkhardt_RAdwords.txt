Hello --

I was trying to get a list of campaigns and their associated negative keyword lists using the CAMPAIGN_SHARED_SET_REPORT and got the following error:

`"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><reportDownloadError><ApiError><type>QueryError.DURING_CLAUSE_REQUIRES_DATE_COLUMN</type><trigger></trigger><fieldPath></fieldPath></ApiError></reportDownloadError>"`

For context, my code is listed below:

```
google_auth <- doAuth()
start<-"2019-01-01"
end<-"2020-01-01"

body <- statement(select = c("AccountDescriptiveName","CampaignId","CampaignName","CampaignStatus","ExternalCustomerId","SharedSetId","SharedSetName","SharedSetType","Status"),
                     report = "CAMPAIGN_SHARED_SET_REPORT",
                     where="***",
                     start=start,
                     end=end)

data <- getData(clientCustomerId='****-***-***',
                   google_auth=google_auth,
                   statement=body)
```

I believe this is similar to issues 110 and 94. I was able to resolve this locally on my computer by appending 'CAMPAIGN_SHARED_REPORT' to the code block in the statement() function to ensure that the AdWords query did not include a during clause (example below, following '#reports without statistics and date column' comment. I'm not sure if this quick fix would impact other parts of the code, though.

```
# reports without statistics and date column
  if(report %in% c("LABEL_REPORT",
                   "CAMPAIGN_NEGATIVE_KEYWORDS_PERFORMANCE_REPORT",
                   "CAMPAIGN_NEGATIVE_LOCATIONS_REPORT",
                   "CAMPAIGN_NEGATIVE_PLACEMENTS_PERFORMANCE_REPORT",
                   "CAMPAIGN_SHARED_SET_REPORT"
                   )){
    body <- sprintf("__rdquery=SELECT+%s+FROM+%s&__fmt=%s",selectA,report,fmt)
    print(sprintf("The Adwords API does not support date ranges in the %s. Thus, date ranges will be ignored.", report))
  }
  # attach report Type, compression and apiVersion as attributes of body
  attr(body,"reportType") <- report
  attr(body,"compressed") <- compress
  attr(body,"apiVersion") <- apiVersion
  # return
  body
```

Sorry if I'm missing anything obvious here!
The csv files in the folder extdata are not updated, therefore, when I'm trying to choose some "new metrics" that have been added to the reports, an error is obtained. Is it possible to update those files to their latest version? (The specific error that I found was when using the 'AUDIENCE_PERFORMANCE_REPORT')

Thanks

Manuel Lopes
Hi, I've gone through the process of downloading RAdwords and using the sample code. However, I am getting "Error: Bad Request" errors when trying to run getData()


```

library(RAdwords)

google_auth = doAuth()

#Example 1
body <- statement(select=c('Clicks','AveragePosition','Cost','Ctr'),
                  report="ACCOUNT_PERFORMANCE_REPORT",
                  start="2014-03-20",
                  end="2014-03-21")
#Example 2
body <- statement(select=c('CampaignName','Clicks','Cost','Ctr'),
                  report="CAMPAIGN_PERFORMANCE_REPORT",
                  where="CampaignName STARTS_WITH 'A' AND Clicks > 100",
                  start="2014-03-20",
                  end="2014-03-21")
#Example 3
body <- statement(select=c('Criteria','Clicks','Cost','Ctr'),
                  report="KEYWORDS_PERFORMANCE_REPORT",
                  where="Clicks > 100",
                  start="2014-03-20",
                  end="2014-03-21")     

# make sure to use the Adwords Account Id (MCC Id will not work)
data <- getData(clientCustomerId='xxx-xxx-xxxx',
                google_auth=google_auth,
                statement=body, #object created with statement()
                transformation = T, #data are transformed from xml text to R dataframe
                changeNames = T) #column names are changed to more useful expressions
```

Any help would be really appreciated! 
Hi!
I have been ignoring this annoying warning since too ling and I decided to report it and see if we can come with a solution. Every time I query the following I get the `NAs introduced by coercion` warnings:
```
body <- statement(select = c('Cost','Date','TargetOutrankShare','AveragePosition','TargetCpa','CampaignCount'),
                            report = "BID_GOAL_PERFORMANCE_REPORT",
                            where = "Cost > 0",
                            start = Sys.Date() - 10, 
                            end = Sys.Date() - 1)
data <- getData(clientCustomerId = "xxxxxxxxxx",
                          google_auth = google_auth, # Prior load(token)
                          transformation = FALSE, # For using the transformData function later
                          statement = body)
transformData(data, attributes(body)$reportType)
```
Works just fine, but prints warnings:
```
Warning messages:
1: In transformData(data, attributes(body)$reportType) :
  NAs introduced by coercion
2: In transformData(data, attributes(body)$reportType) :
  NAs introduced by coercion
3: In transformData(data, attributes(body)$reportType) :
  NAs introduced by coercion
4: In transformData(data, attributes(body)$reportType) :
  NAs introduced by coercion
5: In transformData(data, attributes(body)$reportType) :
  NAs introduced by coercion
```
Is there any chance we can help you fix this?

My session info:
```
R version 3.6.0 (2019-04-26)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Mojave 10.14.6

Matrix products: default
BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] es_ES.UTF-8/es_ES.UTF-8/es_ES.UTF-8/C/es_ES.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] anomalize_0.1.1         openxlsx_4.1.0.1        plotly_4.9.0           
 [4] RAdwords_0.1.18         DT_0.7                  shinyWidgets_0.4.8     
 [7] ChannelAttribution_1.16 gtools_3.8.1            data.table_1.12.2      
[10] prophet_0.5             rlang_0.4.0             Rcpp_1.0.2             
[13] lubridate_1.7.4         lares_4.7               googleAnalyticsR_0.6.0 
[16] googleAuthR_0.8.1       forcats_0.4.0           stringr_1.4.0          
[19] dplyr_0.8.3             purrr_0.3.2             readr_1.3.1            
[22] tidyr_0.8.3             tibble_2.1.3            ggplot2_3.2.1          
[25] tidyverse_1.2.1         shinydashboard_0.7.1    shiny_1.3.2    
```
dear all
how to know what clientCustomerId do i have

thanks
Hi, now `RAdwords` dont't output API Error messages, and this difficulty debaging process.

I modified the error checking a bit, see rows between `# ####` AND `# ####` inside `if (attributes(statement)$compressed)` block. 
```
mygetData <- function (clientCustomerId, google_auth, statement, apiVersion = "201809", 
                       transformation = TRUE, changeNames = TRUE, includeZeroImpressions = FALSE, 
                       verbose = FALSE) 
{
  access <- google_auth$access
  credlist <- google_auth$credentials
  if (as.numeric(Sys.time()) - 3600 >= access$timeStamp) {
    access <- refreshToken(google_auth)
  }
  google.auth <- paste(access$token_type, access$access_token)
  url <- paste("https://adwords.google.com/api/adwords/reportdownload/v", 
               apiVersion, sep = "")
  header <- c(Authorization = google.auth, developerToken = credlist$auth.developerToken, 
              clientCustomerId = clientCustomerId, includeZeroImpressions = includeZeroImpressions)
  if (attributes(statement)$compressed) {
    data <- RCurl::getBinaryURL(url, httpheader = header, 
                                postfields = statement, verbose = verbose, ssl.verifypeer = TRUE)
    
    
    # ####
    # check for Error - Alexey Seleznev
    xml_data  <- xml2::read_xml(data)
    xml_error <- xml_find_all(xml_data, "ApiError") 
    
    if ( length(xml_error) > 0 ) {
      
      stop(xml_text(xml_error))
      
    }
    # ####
    
    tmp <- tempfile()
    if (.Platform$OS.type == "unix" && file.exists("/dev/shm") && 
        file.info("/dev/shm")$isdir) {
      tmp <- tempfile(tmpdir = "/dev/shm")
    }
    on.exit(unlink(tmp), add = TRUE)
    writeBin(data, con = tmp)
    data <- paste(readLines(con <- gzfile(tmp)), collapse = "\n")
    close(con)
  }
  else {
    data <- RCurl::getURL(url, httpheader = header, postfields = statement, 
                          verbose = verbose, ssl.verifypeer = TRUE)
    
  }
  valid <- grepl(attr(statement, "reportType"), data)
  if (transformation & valid) {
    data <- transformData(data, report = attributes(statement)$reportType, 
                          apiVersion = apiVersion)
    if (changeNames) {
      data <- changeNames(data)
    }
  }
  
  data
}
```

Maybe you want add this to `RAdwords`,  in ths case add to `NAMESPACE` next rows:

```
importFrom(xml2,read_xml)
importFrom(xml2,xml_find_all)
importFrom(xml2,xml_text)
```

And add `xml2` to Import in `DESCRIPTION`
Thanks!
When trying to fetch reports with getData, the following error shows up:

Warning message:
In readLines(con <- gzfile(tmp), encoding = "UTF-8") : incomplete final line found on '~\AppData\Local\Temp\Rtmpg3qD1x\file2b6037793ff0'


I was wondering if it is because of the recent addition of UTF-8 encoding? 

The Adwords API only provides geolocation Ids within the ```GEO_PERFORMANCE_REPORT```
Google provides a csv file that matches geolocation Ids to the location name:
https://developers.google.com/adwords/api/docs/appendix/geotargeting
Add csv file as external data to the package and merge names to the result of the ```GEO_PERFORMANCE_REPORT```

The function getData calls the RCurl function getURL.
I would like to set Curl options so that I can authenticate to my proxy.

I'd like to set Curl options in a similar fashian as below.
Can a passtrough variable be implemented in the function getData to set these options?

opts <- list(
    proxy         = "<PROXY_URL>"
  , proxyauth     = -17
  , proxyuserpwd  = ":"
  , proxyport     = 80
)
curl <- getCurlHandle()
curlSetOpt(.opts = opts, curl = curl)
ans <- getURL('https://edition.cnn.com/', curl = curl)
ans

Regards,

Stam
