I cannot find any environment variable for doing this. I know that I can specifically deny a specific env from loading but that implies mutations of the configuration which I do not want to change my direnv configuration.

I would have expected something like:

```bash
export DIRENV_DISABLE=1
cd /my/project/whose/env/is/allowed
# .. Nothing.
```

I tried something like this in my `~/.bashrc`:

```sh
if command -v direnv >/dev/null 2>&1 \
      && ! [ "1" = "${DIRENV_DISABLE:-null}" ]; then
    eval "$(direnv hook bash)"
fi
```

however, I cannot disable it temporarily as follow:

```bash
export DIRENV_DISABLE=1
cd /my/project/whose/env/is/allowed
# .. Nothing.
unset DIRENV_DISABLE
cd /my/project/whose/env/is/allowed
# Loading env
```

I feel that there should be 2 possibilities: `DIRENV_DISABLE` to disable to whole hook (no printing that the env is denied and that one can allow it) and another var such as `DIRENV_DENY_ALL` which would have the same effect as if all env were denied.


It's often a case that locally developer has different environment variables depending if just running the app or running tests (like e.g. database url).

Ruby [dotenv](https://github.com/bkeepers/dotenv) allows you to have multiple different `.env` files with environment name suffix like `.env.local`, `.env.development` or `.env.test.local`.

It would be really helpful if I could somehow dynamically switch between dotenv files depending on some defined context or at least easy way to make a switch with a command. Or maybe it's already possible somehow?

**Describe the bug**
Hi,
I am using direnv installed under WSL from nix repos and I try to use it with git repo cloned under windows (with windows line endings). When direnv loads the envs, it leaves the /r (carriege return) character at end of their values

**To Reproduce**
1) create file under windows with windows line endings (/r/n), e.g. `.envrc` with `export SOMETHING=local`
2) allow direnv under WSL for that directory
3) 
```
echo $SOMETHING | hexdump -c
0000000   l   o   c   a   l  \r  \n
```

**Expected behavior**
I would expect to see:
```
echo $SOMETHING | hexdump -c
0000000   l   o   c   a   l   \n
```

**Environment**
 - OS: Windows + WSL with Ubuntu LTS
 - Shell: bash
 - Direnv version 2.20.1



**Is your feature request related to a problem? Please describe.**
I'd like to have an integrated solution to activate a project-local Conda environment.

**Describe the solution you'd like**
I'd like to include a new layout description in the direnv stdlib:

```
# Usage: layout local_anaconda <path/to/env> <path/to/environment.yml>
#
# Loads a conda virutal environment under "<path/to/env>" .
# If the environement doesn't exist,
# create it using the description in "<path/to/environment.yml>"
#
layout_local_anaconda() {
  local env_path=${PWD}/.condaenv
  if [ -n "$1" ]; then
    env_path=$1
  fi

  if [ -d ${env_path} ]; then
    source activate ${env_path}
  else
    local env_parent=$(dirname ${env_path})
    local env_yml=${env_parent}/environment.yml
    if [ -n "$2" ]; then
      env_yml=$2
    fi
    conda env create -p ${env_path} -f ${env_yml}
    source activate ${env_path}
  fi
}
```

**Describe alternatives you've considered**
My current solution is to integrate the proposed layour in '~/.direnvrc'


I'm not sure why  we need to create the `layout_python-venv` bash function ourselves (as per https://github.com/direnv/direnv/wiki/Python).

Would it be possible to provide `layout python-venv` by default? As it's probably superior to `layout python` for modern use-cases.
Regarding https://github.com/direnv/direnv/wiki/Node#using-nvm-with-automatic-discovery

I have no idea why this version is needed? All I needed to do after installing fish-nvm was to set this:

```fish
set -gx NODE_VERSIONS ~/.config/nvm
set -gx NODE_VERSION_PREFIX ''
```

And in a project dir:

```sh
~/code/test> cat .nvmrc
12.13.0
~/code/test> cat .envrc
use node
```

And then everything works. 
Under some circumstances (e.g. when called from a python subprocess), `direnv export json` does not produce output.

Here is an xonsh-session (basically a python shell) that illustrates the problem:

```
â”Œâ”€24-12:17 [(python-3.6.8) confus@jcgbx ~/devel/cuda]                               ðŸ˜±  ðŸ˜±
â””$ direnv export json                                                                  
direnv: unloading
{
  "DIRENV_DIFF": null,
  "DIRENV_DIR": null,
  "DIRENV_WATCHES": null,
  "PATH": "/home/confus/.local/bin:/home/confus/bin:/home/confus/bin:/home/confus/.local/bin:/home/confus/.config/yadmdotfiles/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin",
  "VIRTUAL_ENV": null
â”Œâ”€24-12:23 [(python-3.6.8) confus@jcgbx ~/devel/cuda]                               ðŸ˜±  ðŸ˜±
â””$ import subprocess; subprocess.check_output('direnv export json'.split())            
b''
```

Is there a way to force output or debug, why there is none? I assume some environment-variable is not set right. Is the output only printed if there are `DIRENV_*`, `VIRTUAL_ENV`, `PATH`, `SHELL` or `HOME` variables in the environment? If that is intended, I'd like to make a command line flag to force of output a feature request.

<details>

**Environment**
 - OS: [e.g. macOS Mojave, Ubuntu 18.04, ...]
 - Shell: [xonsh](https://github.com/xonsh/xonsh)
 - Direnv version 2.20.0

**Environment diff of subprocess call vs. xonsh-call**

        0a1,5
        > a=None
        > AUTO_PUSHD=1
        > AUTO_SUGGEST=1
        > AUTO_SUGGEST_IN_COMPLETIONS=1
        > BASH_COMPLETIONS=/usr/share/bash-completion/bash_completion
        5a11
        > BOTTOM_TOOLBAR=
        7a14
        > COMPLETIONS_CONFIRM=1
        14a22,24
        > DIRENV_DIFF=eJzUkl1vmzAYhf-LrwNuoEkGd1BgkKYsI84XNxZg85GCIRgCpMp_n7pszbRO07S73vk5Pkey3_O-gAqoL2CpIRuoAKZlQeEhYFDMyyjIYZgx9Sb-jf4YEKOSxVkCh4AUpGziLKf8aml5Da8J_hu_4e3i--GKb1oSFJT_mvshcBZUry5wGQH2-jXD8Ux3gw3HAyoQbm8j9ERzGLUkgEFDsjgGo5_erYYebHMFVEDnPT9z67E3tK96q8tDyHhhI1RQRkpBJ0ttQEtp-izdOfK22_VyKC9O3LAVvEe74zju0nPJ87HOZv6q23-2sDV9qudk-ziROrtubSfseRVGdZd2Z-8uZwgN5kRQpOks6hQsfZEFU6fLeVNTyVg1bW8XaMGZ5Dl8W3mpZU2Q0_tj273HybNfHbXo3pkUhrsvrad1shZayX-oW-V4OPsHHJIZ1hJNw1gp3PXOAaP3tb8bChRJVlN2gtXQpCUTZHEqfvqX6j_UrozAxvHQWltg0938x0DA5fItAAD__9_ZHzc=
        > DIRENV_DIR=-/home/jan/devel/cuda/atdiff
        > DIRENV_WATCHES=eJxszsFKxDAQBuB3ybnsmHTTmendo-BdPAyTP26k20I3WwXx3b3LvsDH9_YTXq1fwhzosl1Bn7ZSwYGF_F6MrJdWK52wHruHIbxspbcrwhwzR0lnTTyE5-9267cw9_2O3-EBePJtre2DStuxHmTLsn2RIsWpRhFF5TIxZ1HN4_gkZpqAc4I5mDNYoFMUgU-u2ZCru9qjzZj_bd7_AgAA__9mNUXI
        44c54
        < HISTFILE=/home/confus/.config/yadmdotfiles/bash/history
        ---
        > HISTFILE=/home/confus/.bash_history
        71a82
        > LOADED_RC_FILES=False,False,True
        76c87
        < LS_COLORS=
        ---
        > LS_COLORS=bd=48;5;16;1;38;5;184:ca=38;5;16;48;5;124:cd=48;5;16;1;38;5;184:di=1;38;5;81:do=1;38;5;89:ex=1;38;5;40:ln=1;38;5;81:mh=0:or=48;5;16;1;38;5;124:ow=38;5;63;48;5;40:pi=48;5;16;38;5;184:rs=0:sg=38;5;16;48;5;184:so=1;38;5;89:st=38;5;188;48;5;63:su=38;5;188;48;5;124:tw=38;5;16;48;5;40
        79a91
        > OLDPWD=/home/confus/devel/cuda/atdiff
        82a95,96
        > â””{prompt_end}{NO_COLOR} 
        > PROMPT={ret_code_color}â”Œâ”€{NO_COLOR}{#555}{shelldate}{NO_COLOR} {FAINT_BLUE}[{NO_COLOR}{env_name}{BOLD_GREEN}{user}@{hostname}{FAINT_ITALIC_BLUE} {cwd}{FAINT_BLUE}] {BOLD_BLUE}{ret_code_color}{ret_code}
        89a104
        > RIGHT_PROMPT=ðŸ˜± {branch_color}{gitstatus: {}}{NO_COLOR} ðŸ˜±
        91a107
        > SHELL_TYPE=prompt_toolkit2
        107a124
        > THREAD_SUBPROCS=
        111a129
        > VIRTUAL_ENV=/home/confus/devel/cuda/atdiff/.direnv/python-3.6.8
        126a145,158
        > XONSH_AUTOPAIR=1
        > XONSH_COLOR_STYLE=monokai
        > XONSH_GITSTATUS_STASHED=âš‘ 
        > XONSH_HISTORY_MATCH_ANYWHERE=1
        > XONSH_HISTORY_SIZE=16256 commands
        > XONSH_INTERACTIVE=True
        > XONSH_LOGIN=1
        > XONSHRC=/etc/xonshrc:/home/confus/.config/xonsh/rc.xsh:/home/confus/.xonshrc
        > XONSH_STDERR_POSTFIX={NO_COLOR}
        > XONSH_STDERR_PREFIX={BOLD_RED}
        > XONSH_STORE_STDOUT=1
        > XONSH_TRACEBACK_LOGFILE=/tmp/xonsh-tracebacks.log
        > XONSH_VERSION=0.9.13
        > _Z_DATA=/home/confus/.config/yadmdotfiles/xonsh/z.txt

</details>
**Describe the bug**

Unable to change PS1 using direnv following the instructions at  [direnv wiki on PS1](https://github.com/direnv/direnv/wiki/PS1).

**To Reproduce**
I have the following relevant entries in my files.

`.bashrc`

    DEFAULT_PS1='\[$(ppwd)\]\u@\h:\w$(__git_ps1 " (%s)")'
    # add some more things to DEFAULT_PS1, conditionally
    DEFAULT_PS1+='> '

    PS1=${CUSTOM_PS1:-$DEFAULT_PS1}

    # optional bashrc file extensions
    for f in ~/.bashrc_*; do test -s $f && . $f || true; done

    eval "$(direnv hook bash)"

`.envrc`

    export KUBECONFIG=~/.config/kube/homelab.yaml
    export KUBE_PS1_ENABLED=on
    export CUSTOM_PS1='$(kube_ps1) $ '
    PATH_add scripts

I have allowed the latest version of the `.envrc` with `direnv allow`. However, when changing to the directory, the custom PS1 value is not set, although the values seems to be right

    $ cd -
    /home/robert/sources/oss/sling-cloud-native
    direnv: loading .envrc
    direnv: export +CUSTOM_PS1 +KUBE_PS1_ENABLED ~KUBECONFIG ~PATH

    $ echo $PS1
    \[$(ppwd)\]\u@\h:\w$(__git_ps1 " (%s)")$(kube_ps1)>

    $ echo $CUSTOM_PS1
    $(kube_ps1) $

I am not sure how the solution in the wiki is supposed to work, as apparently the value of PS1 is set to the DEFAULT_PS1 when the `.bashrc` file is loaded the first time and is not re-evaluated as part of the `direnv` hook.

**Expected behavior**
PS1 should be set.

**Environment**
 - OS: openSUSE Tumbleweed
 - Shell: bash-5.0.11-2.1.x86_64
 - Direnv version: direnv-2.17.0-2.4.x86_64
**Describe the bug**

@danbst writes in https://github.com/target/lorri/issues/4:
> I've intalled NixOS module as per doc to enable direnv.
> Then cloned lorri, entered dir, but instead of installing lorri, i've run direnv allow. It started to download stuff, but when it started compiling Rust, I decided to ^C it.
>
> But I couldn't! After interrupt it restarted install of Rust, until I killed terminal.
>
> Recording https://asciinema.org/a/rNsfYKNI0HCJIX1BKIjVaoyE2

@Profpatsch writes:
> direnv evaluates .envrc on each new shell prompt. If that contains a long-running (blocking) process, it will restart it after each Ctrl+C, as of its design. If you havenâ€™t installed lorri we fall back to direnvs default use nix support.

**To Reproduce**

- Have an `.envrc` file which does a long-running action (try `sleep 10`)
- `direnv allow`
- hit Ctrl+c

**Expected behavior**

Iâ€™m not actually sure what the expected behavior is here, and if this is a bug at all. Maybe we should print something?

Also I canâ€™t reproduce the exact same behavior in `fish`, it seems to be dependent on which shell integration the user uses.

**Environment**
 - OS: any
 - Shell: not sure
 - Direnv version:  2.20.1
