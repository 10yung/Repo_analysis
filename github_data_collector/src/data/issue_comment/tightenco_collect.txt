As far as i can see the Symfony\VarDumper Dependency is just used once in a helpers method. Is it essential? A simple global non namespaced helper function with a pretty unspecific name like dump() command often has the potential to cause conflicts with other utility methods. Would be of great help if a native solution could be used. Not really a Php guy, are there any critical reasons why the symfony dump is prefered over something like this: 

`die(var_dump($var));`

Thank you for the project!
Hey,

I am getting this error when I try to run `composer update`:
```
Problem 1                                                                           
      - tightenco/collect v5.8.23 requires symfony/var-dumper >=3.4 <5 -> no matchin  
  g package found.  
```
I think it should be `^3.4.0` or `3.4.*` instead of `>=3.4 <5` or I am missing something?

Thanks.
References #124 
Hi,
Here a conflict with the `Arrayable` interface.

I have a Laravel Collection with several Tightenco collection inside.

When using `toArray()` on the main Laravel Collection, it doesn't touch the Tightenco ones... ðŸ˜ž 

It's because of the `\Illuminate\Contracts\Support\Arrayable` and `\Tightenco\Collect\Contracts\Support\Arrayable` Interfaces.

Because of these sort of bugs, packages that use Tightenco/collect can't be used with Laravel anymore... ðŸ˜¥ 

Hi again!
I'm sorry to be the one who open all theses issues, but as I'm working a lot with collect and Laravel for now, I'm seeing all the problems.

Again a problem due to the namespace change (and so, the composer replace) but not the fault of composer this time:

I have a regression in my project because of a `Tightenco\Collect\Support\Collection::make`

In fact you can reproduce easily the problem in a Laravel project:

```php
$items = User::all();
Tightenco\Collect\Support\Collection::make($items);
```

The function that converts $items is this one: 
```php
 protected function getArrayableItems($items)
    {
        if (is_array($items)) {
            return $items;
        } elseif ($items instanceof self) {
            return $items->all();
        } elseif ($items instanceof Arrayable) {
            return $items->toArray();
        } elseif ($items instanceof Jsonable) {
            return json_decode($items->toJson(), true);
        } elseif ($items instanceof JsonSerializable) {
            return $items->jsonSerialize();
        } elseif ($items instanceof Traversable) {
            return iterator_to_array($items);
        }

        return (array) $items;
    }
``` 

Previously, when collect was replaced by Laravel Collections, the return value was
```php
            return $items->all();
```
because `$this`and `$items` was from the same class.

Now, because they are from different classes the value will be 
```php
            return $items->toArray();
```

**which is not the same at all** and breaks totally my package, and my project! ðŸ˜… 

I don't have right now a simple solution, but I definitely think that changing the package namespace was much more complicated than we thought.. ðŸ˜•

Maybe, you or @adamwathan (as he uses it too in his packages, and so will have the same problems) should discuss with Taylor about a more global solution (extract definitely the collections from Laravel for example).

Thank's for your work, I'll hope we will find a solution to keep using this cool package.