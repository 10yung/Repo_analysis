Currently, the only way to install `cargo-release` is `cargo install` which builds it from scratch, incudind all the dependencies. No wonder it takes quite a bit of time.

You can setup your travis CI to deploy prebuilded binaries to your `releases` page so people are able to download it from there. The most easy way to do that is to use [`trust`](https://github.com/japaric/trust/). What do you think?
Every time i release a new version of something i seem to be getting a message like

```
[2020-01-08T21:45:21Z INFO ] Cannot detect changes for wide because tag v0.4.3-alpha.0 is missing. Try setting `--prev-tag-name <TAG>`.
```

But I'm using _exclusively_ this tool to do my releases so it's silly that it can't keep track of its own tag naming scheme. It [seems to just be a tag for each version](https://github.com/Lokathor/wide/releases), which is pretty easy to understand. However, it also updates the version stored with an `-alpha.0` when a new version is released, and that's where things go wrong.

What happens is that you're working on `0.4.2-alpha.0`, then you release that, and the tool releases it as `0.4.2` with a git tag to match and bumps your version in the repo to `0.4.3-alpha.0`. Then when you go to release that version, it doesn't see a tag for `0.4.3-alpha.0` because the last tag was `0.4.2`, and then it says it can't detect changes.

Checking for the current version's tag first is fine, but if that's not found just automatically go back through the tag list to find the latest tag version and compare to that. Or just don't even auto-compare at all. But the current confluence of systems makes it so that just using the tool in the default mode makes it print error messages about problems that it gave itself, which is silly.
Provide option to ignore untracked files when determining if working directory
is dirty.
```
$ HEAD_OUTPUT=$(git diff HEAD --exit-code --name-only)
$ echo Head Output=$HEAD_OUTPUT
Head Output=
$ LS_OUTPUT=$(git ls-files --exclude-standard --others)
$ echo LS Output=$LS_OUTPUT
LS Output=
$ RUST_LOG=trace cargo release --no-confirm --no-dev-version --tag-name "{{crate_name}}-{{prev_version}}" -vv patch
[2019-12-18T18:51:27Z WARN ] Uncommitted changes detected, please commit before release.
```

Git status also indicates a clean working directory. Not sure what it is error'ing on.
If publishing one crate in a workspace fails for any reason, it halts the `cargo release` process. It would be nice if there were a way to run something like `cargo release --continue` or `cargo release --from-package=<the one that failed>` to have it continue the release process from where it left off. Right now I think the best option is to manually specify crates to exclude, but in a project with a lot of crates, that can be pretty annoying.
Added a check before running `git push`. If the remote is not configured, print info message and skip the push.

Fixes #155 
`Fatal: IO Error: The system cannot find the file specified. (os error 2)` isn't very helpful.
The command that cargo release does is `git push`, which assumes that an upstream repo is set for the current branch. It will fail if this is not the case. Having an upstream branch set should not be required.

I think the logic could go something like this:

1. If the upstream remote for the current branch *is* set, then just run `git push`
1. If the upstream remote for the current branch *is not* set *and* the `push-remote` config *is* set, then run `git push <push-remote> <current branch>`
1. If neither the upstream remote for the current branch nor the `push-remote` config is set set, then run `git push origin <current branch>`
If anyone merges to master during our release - and we have a pre-commit hook that takes a few minutes - the push fails. Can I suggest that cargo release pull and merge with the remote before pushing?
The `--update-only` flag would combine the `--skip-push`, `--skip-tag`, `--skip-publish` and `--no-dev-version` flags.
The `--update-only-dev` would combine the `--skip-push`, `--skip-tag` and `--skip-publish` flags. It would also force `no-dev-version` to false. Also, it should do only one version bump instead of two.

## Examples

```
$ grep version Cargo.toml
version = "0.2.0"
$ cargo release minor --update-only
$ grep version Cargo.toml
version = "0.3.0"
$ cargo release patch --update-only
$ grep version Cargo.toml
version = "0.3.1"
```

```
$ grep version Cargo.toml
version = "0.2.0"
$ cargo release patch --update-only-dev
$ grep version Cargo.toml
version = "0.2.1-alpha.0"
$ cargo release minor --update-only-dev
$ grep version Cargo.toml
version = "0.3.0-alpha.0"
```

## Use case

As noted in #99, when publishing a new version you don't know yet what the next version will be. Sometimes your planning is telling you that right after a release you'll have to implement some changes that will requires a major or minor release, hence you do not want to start a patch release. And if your CI-platform or QA team reports a regression you have to patch right away, having the possibility to directly set the next dev version as a major or minor release would have been a mistake.

Setting `no-dev-version` to true solves the first part of the problem by letting you decide later. This is where the `--update-only-dev` flags comes handy since it allows you to start the next development iteration with the correct version number.
The `--update-only` is simply be a shortcut for people who does not uses dev versions.