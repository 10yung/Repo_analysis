`fzf` uses `fzf_colors` to change it in vim, howto have it with `fzy`?
Hello

This pull request improves the build script of this project.
Specifically, it adds missing Make dependencies so that the targets of the project are re-generated correctly whenever there are updates to any of the dependent source files.

In this way, the project is incrementally built.
Note that this fix follows the best practices for tracking dependencies automatically (through gcc -MD)

For more details, see here.
https://www.gnu.org/software/make/manual/html_node/Automatic-Prerequisites.html
Hey. Maybe someone will find this useful (or maybe you have suggestions for improvements):
https://gist.github.com/wknapik/5101aaea12172eff6ab6b2fb7666143c

Feel free to resolve this right away, this is just fyi.
It would be nice if fzy became interactive before it finished reading stdin. Useful for slow or large stdin.
Count a match at the beginning and end of the candidate as a consecutive
match. With that fzy returns better results, when searching for file
extensions, e.g. when searching for "appc", it scores "src/app.c" higher
than "build/app/contents/cache".

A match at the beginning was scored with the same bonus as a character
after a slash. To keep it consistent, this is now scored as a
consecutive match.

Another, more practical example from the tmux source tree:
`$ find . -type f | fzy -se tmuxh` without the patch returned:
```
4.570000        ./logo/tmux-logo-huge.png
4.480000        ./tmux.h
```
With the patch you get a more intuitive result:
```
5.480000        ./tmux.h
4.570000        ./logo/tmux-logo-huge.png
```
If you really wanted the .png, you could continue typing and refine the
search, but if you wanted the header file without the patch, you cannot
type an end of line character to filter the results further.

Note that I had to change some test cases, which broke with this change,
but I still prefer the new behavior. Let me know, if you find a case,
which is counter intuitive.
This enables multi-select in `fzy` with the Ctrl+s key. Pressing `Ctrl+s` on an item will make that item bold. Pressing `Ctrl+s` will de-select it. When at least one item is multi-selected, pressing the `Return` key will print each multi-selected item on its own line to `stdout` (this mimics the behavior of `fzf`'s multi-select feature).
Hi, I've fixed 6 dependencies missing
Those issues can cause incorrect results when fzy is incrementally built.
For example, any changes in "src/tty_interface.h" will not cause "src/fzy.o" to be rebuilt, which is incorrect. 
I've tested it on my computer, the fixed version worked as expected.
Looking forward to your confirmation.
I fix them by using the Auto-Dependency Generation technique mentioned here: http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/


Thanks
Vemake
This might address #98, too. (The behavior can be optional, activated via a `--eager-output`.)
From this [discussion](https://github.com/jhawthorn/fzy/issues/64#issuecomment-502434085).
Tested it on both neovim 0.3.7 and vim 8.1.1-1467.
Allow for splitting input lines to fields where only a certain field is shown and used for matching. Also it could be specified which field will be printed when the selection is chosen.

In example, "cat /etc/passwd | fzy -d: -f1 -F6" will display and match only usernames (=1st field) and when the selection is made it will output the user's home directory (=6th field).

There are three new options -d/--delimiter, -f/--field and -F/--output-field and the feature is enabled only when -f/--field is specified.