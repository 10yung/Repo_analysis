So I'm quite interested in AV applications and generally replacing libav code with rust but there's a lot of projects in the rust-av organisation and it can be hard to see where to go to find how mature different parts are. The embedded working group seemed to solve this through the embedded newsletter and also a presence on the official and unofficial rust discords.

Alternatively, I can just say what I'm interested in and hopefully get pointed to the right place. I'd like to decode AVI/webm videos and WAV and FLAC audio. It would also be great to have something similar to filter graphs in libav (although I'm not opposed to implementing that myself)
The Chromaton structure should be public in order to be used by others components.

Do we need a constructor?
[hawktracer](https://github.com/AlexEne/rust_hawktracer) is a low overhead intrusive tracer.
It would solve #27 by other means and avoid some duplicated code.
is necessary in order to be used as dependency by other projects on crates.io

Subcrates
- [x] bitstream
- [ ] data
  - [x] Make sure the crate builds on stable
  - [x] Make sure the tests run
  - [ ] Write the documentation
- [x] format
  - [x] Make sure the crate builds on stable
  - [x] Make sure the tests run
  - [ ] Write the documentation
- [ ] codec
  - [x] Make sure the crate builds on stable
  - [x] Make sure the tests run
  - [ ] Write the documentation




 
## Explicitly bind Packets to Streams
The `Packet::stream_index` has the same semantics of a `Weak` reference but using some custom machinery for the lookup.

- [ ] Move `Stream` to av-data
- [ ] Replace stream_index with a Weak or an Arc
- [ ] See how the change impacts `avp` and `ave`

## Reconsider the event API
Mid demuxing new streams is relatively uncommon and supported by few formats.

Alternatives:
- keep the event API but provide a simpler one for the user that do not care.
- drop it completely until there are users needing it.
Currently comparing `AudioInfos` to check if the format has changed is not very useful as it will also compare the number of samples (also stored in the info) too.

The format information itself should probably be stored separate from the frame metadata.
Currently a `Packet` can only contain a `Vec<u8>`. It would be great if it could work with an `Arc<AsRef<[u8]>>` or similar instead (or in addition via an enum for the two cases).

This would allow to fill packets with (read-only) data from other places and would also allow to clone the `Packet` without copying all the data (if the cloning e.g. happens in the `Decoder` only for being able to have it around a little bit longer than the call where the `&Packet` is passed).

From my understanding the data of a `Packet` is always immutable currently, but if this is not generally true then `AsMut<[u8]>` might also be an option.

I'd be happy to implement this if we end up with a nice design here. Main disadvantage of using an `Arc` would be another heap allocation, but as the data itself is already heap allocated unless you use a `&'static [u8]`...
Related to https://github.com/rust-av/rust-av/issues/51

Currently the `Demuxer` and its `Context` trait can only work on seekable, that is random-access, sources. It would be good to be able to run them on different kinds of sources.

From my perspective there are currently 3 different scenarios that would be good to support:

1) random-access: The demuxer can with little cost request data from any possible position (this would be the current situation, as that's basically what the `Seek` trait expresses)
1) seekable: The demuxer can request data from a different position, but it will impose some non-trivial cost (thing of e.g. HTTP) and might not always succeed. To some degree this can already be done via the `SeekFrom` return values of the `Demuxer`, but the `Demuxer` will require some kind of configuration to actually know about this and not just request seeks all the time
1) non-seekable: The caller would just feed the demuxer with data as it arrives and the demuxer should never even consider to seek elsewhere. Think of MPEG-TS via DVB for example.
The `Buffered` trait currently requires the `Seek` trait, so can't be implemented on non-seekable input, e.g. when reading from a streaming source.

This does not seem required as the `Demuxer` trait returns a `SeekFrom` whenever a seek would be required, which could then be handled in different ways from the caller.

Only the `Context` implementation for `Demuxer` would currently require the `Seek` trait (and as such does not work with non-seekable inputs) at the moment.