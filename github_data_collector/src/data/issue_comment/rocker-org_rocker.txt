Disclaimer: I know this is a known issue with rootless docker. I am posting this here because I think this is related to #324 and #295 .

## Which host OS you are using
OS: Arch Linux x86_64 
Kernel: 5.4.6-arch1-1 
## Which Docker container(s) you tried
`rocker/rstudio`
## What command you launched
I tried these two ($UID = 1000):
[0] `docker run -e USERID=$UID -e DISABLE_AUTH=true -p 127.0.0.1:8787:8787 -v /home/kmfrick/Documents/Code/:/home/rstudio/code rocker/rstudio`
[1] `docker run --user 1000 -e DISABLE_AUTH=true -p 127.0.0.1:8787:8787 -v /home/kmfrick/Documents/Code/:/home/rstudio/code rocker/rstudio`
Docker is running in rootless mode (started with `systemctl --user start docker`).
## What you were expecting
A `/home/rstudio/code` directory that I could read from and write to inside the container.
## Which error you get
[0] Everything under `/home/rstudio/code` is owned by `root` so there is no write access.
[1] `s6-mkdir: warning: unable to mkdir /var/run/s6: Permission denied`


I'm new to Rocker so I apologize if this is a dumb question or it has been asked already. I currently have a rocker project that has a developer run a shell script to open RStudio:

```
LOCAL_PATH=$1
IMAGE_NAME=$2

docker run \
	--rm \
	-it \
	-p 8787:8787 \
	-e "RENV_PATHS_CACHE=/renv/cache" \
	-v ${LOCAL_PATH}:/renv/cache \
	-v ${LOCAL_PATH}:/home/rstudio/project1 \
	--name p1_ctnr \
	-e PASSWORD='p1_password' \
	${IMAGE_NAME} 
```
As you can see, `renv` is used to keep track of the package versions. What I would like to happen is to add a `setwd('/home/rstudio/project1')`command to this docker run and then to activate the `renv` environment. Something like this:

```
LOCAL_PATH=$1
IMAGE_NAME=$2

docker run \
	--rm \
	-it \
	-p 8787:8787 \
	-e "RENV_PATHS_CACHE=/renv/cache" \
	-v ${LOCAL_PATH}:/renv/cache \
	-v ${LOCAL_PATH}:/home/rstudio/project1 \
	--name p1_ctnr \
	-e PASSWORD='p1_password' \
	${IMAGE_NAME}  \
        R -e "setwd('/home/rstudio/project1'); renv::activate()"
```
So the project automatically sets the project to the project folder and activates `renv` when a user opens RStudio Server. But this code above does not work. 

Is there any way to do this? Or does a user have to go into RStudio and set the window and activate `renv` every time he or she wants to use RStudio Server through Docker.


The `checkbashisms` script is now required by `R CMD check --as-cran`; see https://github.com/wch/r-source/commit/0866fd0d4a2cefb3547717d13a08cf63a7e996bb#diff-5702f496f33ffda0aece3e9224e829f0

This is available from the `devscripts` system package.
I am trying to build a docker image using the r-base:3.5.0 docker image. I am using a Dockerfile that I had been using for a while and has all of a sudden started returning an error.

When running docker build I receive the following error:
-------------------------------------------------------------------------------------------------------
```
Warning: unable to access index for repository http://cran.rstudio.com/src/contrib:
  internet routines cannot be loaded
Warning message:
package ‘tidyverse’ is not available (for R version 3.5.0)
```
-------------------------------------------------------------------------------------------------------

Below is the source of the docker file:
-------------------------------------------------------------------------------------------------------
```Docker 
FROM r-base:3.5.0

WORKDIR /app

# System dependencies
RUN apt-get update \
    && apt-get install -y \
      libssl-dev \
      libcurl4-openssl-dev \
      libxml2-dev

# R dependencies
RUN install2.r --error --deps TRUE tidyverse
RUN install2.r --error --deps TRUE lubridate
RUN install2.r --error --deps TRUE feather
RUN install2.r --error --deps TRUE magrittr
RUN install2.r --error --deps TRUE Rcpp
RUN install2.r --error --deps TRUE data.table
RUN install2.r --error --deps TRUE aws.s3

ADD preprocess.R .
ADD buscar_indice_primer_positivo.cpp .
ADD buscar_indice_ultimo_positivo.cpp .

ENTRYPOINT ["Rscript", "/app/preprocess.R"]
```
-------------------------------------------------------------------------------------------------------


This Dockerfile is very similar to another Dockerfile that still works, where the only difference is the installation of openjdk-8-jdk in the latter. Adding this to previous image allows it to build. That means in the Dockerfile above I change the installation the libraries to 

```Docker 
RUN apt-get update \
    && apt-get install -y \
      libssl-dev \
      libcurl4-openssl-dev \
      libxml2-dev \
      openjdk-8-jdk
```
I am not entirely sure why the java package is necessary for to access the cran repository and why it wasn't necessary before. It's purpose the Dockerfile that I copied it from is for a spark program.

If I increase the version of R to 3.5.1 or greater this error goes away but then I encounter inconsistencies in the code. 

Any help would be greatly appreciated. Thank you.



Hi, 

I have an RStudio server running currently on my AWS EC2 machine using docker.
I'm planning to move to Kubernetes for scaling purposes.
What would you suggest to be the best practice for maintaining multi-user on a multi-deployment?
* Is there a way to de-couple user management? Like using a database instead of Linux users.
* back up /home or /users to common shared location? which can be used by multi containers?
* Connect the container to Active Directory (Local AD) or PAM Authentication or can we hook up OAuth for authentication?

Please suggest the best practice to achieve RStudio deployment on Kubernetes and still maintain multi-user consistency without any issue.

Thanks, V
Currently, r-base only has tags for complete releases. This means as soon as you release a new image, this will be out of date. 

Ideally, there would be an immutable tag for each release, eg `3.6.0`, and a tag that's updated with every patch image release, eg `3.6`.
I've been playing around with `podman` and Rocker images a bit, see README in https://github.com/nuest/rodman

Although is a known issue with RStudio in containers started with podman, see #202, running the R prompt was no problem at all. Building the image required a small fix: prepending the registry name in the `FROM` instruction, which is added by default for the Docker CLI:

For example, the `r-ver:3.6.0` Dockerfile would start with

```
FROM docker.io/library/debian:stretch
```

The `rstudio:3.6.0` file would start with

```
FROM docker.io/rocker/r-ver:3.6.0
```

_What do you think about adding the registry and library explicitly to all Dockerfiles?_

Advantages I see:

- images can be build with podman without any change (potentially also with other builders?)
- the origin of the used base image is made more explicit

My docker-compose file looks like this:

```
services:
  rstudio:
    image: rocker/verse:3.6.0
    volumes:
      - $GIT:/git
      - $DASHBOARDS_GIT:/dashboards/

      - $DASHBOARDS_CONFIG:/config/
      - $DASHBOARDS_DATA_APP:/data_app/
      - $DASHBOARDS_DATA_CLEAN:/data_clean/
      - $DASHBOARDS_DATA_RAW:/data_raw/
      - $DASHBOARDS_RESULTS:/results/

      - $DASHBOARDS_JUNIT:/junit/
      - $DASHBOARDS_RSTUDIO/:/home/rstudio/

      - xtmp:/xtmp/
    environment:
      - COMPUTER=${COMPUTER:-noname}
      - PASSWORD=rstudio1
      - DISABLE_AUTH=true
```

Inside RStudio I type:

```
> Sys.getenv("PASSWORD")
[1] ""
> Sys.getenv("COMPUTER")
[1] ""
```

If I log into the terminal as root:

```
xxx@xxx:[xxx]: docker exec -it infrastructure_rstudio_1 bash
root@957fd8514387:/# echo $PASSWORD
rstudio1
root@957fd8514387:/# echo $COMPUTER
xxx
```

So the environmental variables make it into the docker container, but RStudio Server seems to strip them out. Any idea on how to make the environmental variables accessible internally?
First of all I want to thank you for your hard work maintaining this. Your project saved me for a lot of issues. 
Unfortunately, I have a problem connecting the rstudio to a postgres db. I can do it through R, but not from connections tab within rstudio. 

I'm thinking there may be some other packages that need to be installed or ODBC sources/drivers. Does the container come prepared for this kind of connection? 

I look forward to receiving your reply. 

Thanks, 
Dan

Thank you so much for your work!

I have a problem choosing the correct container for using RStudio remotely on iPad, as the latest containers of `rstudio` and `verse` seem to have different RStudio versions:

On one hand, `rocker/rstudio-daily:devel` runs RStudio 1.3.322, which solves many compatibility issues on iOS, particularly a bug that made impossible to scroll on the source panel. But on the downside, I can't install certain packages on this container, particularly `jpeg`.

On the other hand, `rocker/verse:devel` has no problem installing `jpeg`, but it uses RStudio 1.2.1.335 so scrolling doesn't work correctly on iOS.

Is it possible to get a container of `verse` with a higher RStudio build, such as 1.3 just like `rstudiodaily:devel` does, in order to get the latest iOS compatibility fixes?