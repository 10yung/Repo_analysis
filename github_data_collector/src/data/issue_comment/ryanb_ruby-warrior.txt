For the first case I added an if-case for whether the player has changed the template code in his profile's player.rb at all, before running the game, along with 2 seperate functions for compairing the template file with the player's file. 

I also thought it to be a good idea to check in on the user's input when trying to access or reset a profile,or choose a difficulty level  so, i added a loop on the choose method of the ui.rb file, asking for input again if the numerical input exceeds the number of options.

Additionally, I added a reset function with which the player can reset a profile he wants. I also added a -r option in the parse_options method for the user to choose which profile to reset.  

I tried to call `warrior.bind!` from a method of a class that I defined, but it only worked once. When it got to turn two, I got an error stating that I can only perform one action per turn.

`(eval):2:in 'bind!': Only one action can be performed per turn. (RuntimeError)`

I was playing level 3 in the intermediate tower.

When I changed it so that it was calling `warrior.bind!` directly from `play_turn` it worked.

The code is attached.
[player.rb.txt](https://github.com/ryanb/ruby-warrior/files/276167/player.rb.txt)

Hi,

I am a university student and I have a project concerning contributing ruby, so i am thinking about contributing for ruby - warrior since i find it really fun to work on ! 

I know there hasn't been any commit for a while now , but if anyone could point me to any useful way of contributing that would be great!

Currently if you win a level with -s option, you see "Staying on current level. Try to earn more points next time." But points have nothing to do with it. Can be confusing.

I wasn't able to run tests out of the box, so I upgraded Rspec and started tracking my Gemfile.lock.

I changed "should" to "expect" to quiet deprecation warnings from Rspec. At first I did it by hand, but then went looking for scripts:

```
perl -p -i -e 's/^(\s+)(.*(?=.should))\.should(_)?(not)? (.*)$/$1expect($2).$4$3to $5/g' `find spec -name *.rb`

perl -p -i -e 's/ == (.*)$/ eq($1)/g' `find spec -name *.rb`
```

http://jakeboxer.com/blog/2012/07/09/converting-to-the-new-rspec-2-dot-11-expectation-syntax/

Please let me know what you would like to see done differently, but please try to let me know about as much as you can think of up front or any contribution rules or guidelines you might have as early as possible so I can avoid lots of rounds of revisions. (Had a bad experience with that recently.)

I didn't initially catch that the m-dash was 'really' two regular dashes/hyphens.

If you want, I'll format other inline code snippets too.

test file added to practice pushing to forked directory

tigerroar@ubuntu:~$ rubywarrior
Welcome to Ruby Warrior
/var/lib/gems/1.9.1/gems/rubywarrior-0.1.3/lib/ruby_warrior/profile.rb:31:in `load': incompatible marshal file format (can't be read) (TypeError)
        format version 4.8 required; 254.154 given
        from /var/lib/gems/1.9.1/gems/rubywarrior-0.1.3/lib/ruby_warrior/profile.rb:31:in`decode'
        from /var/lib/gems/1.9.1/gems/rubywarrior-0.1.3/lib/ruby_warrior/profile.rb:35:in `load'
        from /var/lib/gems/1.9.1/gems/rubywarrior-0.1.3/lib/ruby_warrior/game.rb:8:in`start'
        from /var/lib/gems/1.9.1/gems/rubywarrior-0.1.3/lib/ruby_warrior/runner.rb:17:in `run'
        from /var/lib/gems/1.9.1/gems/rubywarrior-0.1.3/bin/rubywarrior:5:in`<top (required)>'
        from /usr/local/bin/rubywarrior:23:in `load'
        from /usr/local/bin/rubywarrior:23:in`<main>'

Newbie here. This is reproducible on a new ubuntu installation env that doesn't have the full ruby package installed yet. 

To fix this, do=> "sudo apt-get install ruby-full"

Corrected second level code example so player will attack sludge, and them move. Currently the code has the play just attack in an infinite loop, and not move.

