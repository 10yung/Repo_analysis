Fixed issues with previous pull request.
adding the includes
#include <glslang/SPIRV/SpvBuilder.h>
#include <glslang/SPIRV/GLSL.std.450.h>

instead of
#include <SPIRV/SpvBuilder.h>
#include <SPIRV/GLSL.std.450.h>

seems to fix the issue
This PR adds script to rearrange dump files to be stored in several "levels" of folders so that they are more manageable.
move into orbital directory after : `git clone https://github.com/AlexAltea/orbital`
and before  : `git submodule update --init`
The PS4 kernel creates multiple threads that might output debug information via UART. Unfortunately, there's no guest locks to prevent multiple threads from interleaving their output, which causes unreadable output such as:

![image](https://user-images.githubusercontent.com/5306886/55236785-03139180-5231-11e9-8c43-2e7b4b4a80bc.png)

We could prevent that on the host side, by obtaining the guest thread ID that is currently being executed by the CPU that made the UART write. This can be done by traversing the FreeBSD structures, as done in the Process/Thread List (the code is already there!). Then, storing the character being send to UART in per-thread buffers. Finally, when a newline ('\n') is encountered, flushing the thread buffer to the UI.

---

Contributors are welcome to solve this issue:

- Difficulty: Medium.
- Code:
  + https://github.com/AlexAltea/orbital-qemu/blob/master/ui/orbital-procs-list.cpp
  + https://github.com/AlexAltea/orbital-qemu/blob/master/hw/ps4/aeolia_uart.c
- Tasks: Coding.

http://docs.flatpak.org/en/latest/introduction.html#reasons-to-use-flatpak
https://github.com/flathub/flathub/wiki/App-Submission
I have:
Intel i7-2600K
12GB RAM DDR3
Geforce GTX 1050 Ti 4GB 
With TCG Accelerator i get to the part on where it shows the syscore crash logs, so i know it's working properly on that end
With Haxm Accelerator i get nothing else besides VCPU shutdown request. I'm unsure if this is caused by the processor, but from what i've googled it seems only 7th Gen processors cause this issue.
The haxm driver is installed properly by using the script and i've forked the correct branch (orbital) from https://github.com/AlexAltea/haxm
Examples of incorrectly parsed functions:
- https://github.com/AlexAltea/orbital/blob/51909bafa31b36d2f1c97d982dece7813e2ccaff/tools/ida/db_types.json#L80
- https://github.com/AlexAltea/orbital/blob/51909bafa31b36d2f1c97d982dece7813e2ccaff/tools/ida/db_types.json#L95

---

Contributors are welcome to solve this issue:

- Difficulty: Easy.
- Code: https://github.com/AlexAltea/orbital/blob/master/tools/ida/generate_types.py
- Tasks: Debugging.

https://github.com/AlexAltea/orbital-qemu/pull/14 imported some FreeBSD headers, which re-define standard C types and defines.

The ones conflicting with MSYS2 were renamed or their declarations/definitions removed so that the whole thing would build (just for Windows), but the correct solution would be to rename them to something else, to prevent clashes with the environment.

For instance, they could all be prepended or suffixed with `orbis_` for types and `ORBIS_` for defines.
Many MMIO registers are just "data" registers, i.e. whenever you read the register, you obtain the last value written to the same register or a default value initialized by the device. However, there's some registers that trigger a more complex action whenever they are accessed. The reason MMIO BARs in emulated devices are never backed by actual memory is to trigger #GP faults, i.e. VM-exiting back to the hypervisor+emulator, and thus synchronously react to those "action" registers.

However, we could take advantage of 128-byte sub-pages for fine-grained "action" vs "data" registers dispatching. So basically the idea would be: in every device we identify such "action" registers that require immediate attention and we remove R/W permissions from the 128-byte range they are in, so we get react synchronously in Orbital. For everything else, we have regular R/W permissions, and have the underlying 4KB page mapped to some structure inside our emulator.

Basically, instead of having like 5k-50k cycles wasted doing random hypervisor instruction emulation, we do a regular memory accesses: so around 100 cycles and down to 6 cycles if in L1.