related to #896

```
 âž¤ Executing task deploy:shared
> export APPLICATION_ENV='test'; if [ -d /var/www/dimauta/shared/data/cache/ ]; then echo 'true'; fi
< true
> export APPLICATION_ENV='test'; rm -rf /var/www/dimauta/releases/1/data/cache/
> export APPLICATION_ENV='test'; mkdir -p `dirname /var/www/dimauta/releases/1/data/cache/`
> export APPLICATION_ENV='test'; ln -nfs --relative /var/www/dimauta/shared/data/cache/ /var/www/dimauta/releases/1/data/cache/
< ln: target '/var/www/dimauta/releases/1/data/cache/' is not a directory: No such file or directory
```

deploy.php config i have 
```php
add('shared_dirs', ['data/cache/']);
add('writable_dirs', ['data/cache/']);
```

it seems `dirname /var/www/dimauta/releases/1/data/cache/` return upper dir `/var/www/dimauta/releases/1/data/` and created only it recursively so the `cache` subfolder is missing and symlink fails

Deployer 6.7.3
As the title says, we came in this morning to builds failing with this error:

> PHP Parse error:  syntax error, unexpected '?' in phar:///usr/local/bin/dep/vendor/symfony/console/Terminal.php on line 127

Digging into it, deployer is now bringing in Symfony 5 which isn't compatible with php 7.0

Appreciate that 7.0 is an older version but such a huge breaking change on a patch release isn't a good sign.

 I can't even get to the docs to see about downgrading to an older release because the deployer site has gone down again (seems to be happening far too often, can't it be moved to github pages?)
```
#0 /home/ws3/.config/composer/vendor/deployer/deployer/src/Collection/Collection.php(35):                              
 Deployer\Host\HostCollection->throwNotFound('192.168.255.55')                                                          
 #1 [internal function]: Deployer\Collection\Collection->get('192.168.255.55')                                          
 #2 /home/ws3/.config/composer/vendor/deployer/deployer/src/functions.php(49): array_map(Array, Array)                  
 #3 /home/ws3/project-name/deploy.php(64): Deployer\host('192.168.255.54', '192.168.255.55', '192.168.255.56')           
 #4 /home/ws3/.config/composer/vendor/deployer/deployer/src/Deployer.php(325): require('/home/ws3/proje...')            
 #5 [internal function]: Deployer\Deployer::Deployer\{closure}()                                                        
 #6 /home/ws3/.config/composer/vendor/deployer/deployer/src/Deployer.php(326): call_user_func(Object(Closure))          
 #7 /home/ws3/.config/composer/vendor/deployer/deployer/bin/dep(126): Deployer\Deployer::run('master',                  
 '/home/ws3/proje...')                                                                                                  
 #8 {main}
```

The deploy.php file defines 3 more single-hosts (one of which is `host('192.168.255.54')`) before defining the host with three IPs as follows:
`host('192.168.255.54', '192.168.255.55', '192.168.255.56')`

EDIT: Same happens if using `host('192.168.255.[54:56]')`

Tested with:
PHP 7.2.19 + Deployer 6.4.3
PHP 7.2.24 + Deployer 6.6.0

EDIT2: It seems the reason is that `192.168.255.54` is defined as single-host, than defined again with `host('192.168.255.[54:56]')` in both `host` definitions the `stage` is different
Add missing Top Supporter

| Q             | A
| ------------- | ---
| Bug fix?      | No
| New feature?  | No
| BC breaks?    | No
| Deprecations? | No
| Fixed tickets | N/A
Directories are created with `0775` permissions (due to `umask 002`). These permissions on the directories prevent the execution of my PHP files. I get 500 Internal Server error when the directories have `0775`.

I've tried to set `umask 022` in `~/.bash_profile` on my server. This works when connecting via SSH directly (without Deployer).

However, when using Deployer I keep getting `umask 0002` instead of `umask 0022`. Even when defining something like `run("source ~/.bash_profile")` as a deployer task.

I there something I am missing or are there perhaps better ways to get the permissions setup correctly?
Not sure if it's relevant, but I've symlinked `{{deploy_path}}/public_html` to `{{deploy_path}}/current/src/public`

Thanks!
Hello, I am getting an error with Symfony 4 projects when using setfacl. It was working fine with my Symfony 3.4 projects. The error is this:

```
  The command "cd /var/www/html/my_website/releases/48 && (setfacl -L -R -  
  m u:"www-data":rwX -m u:`whoami`:rwX var)" failed.                                
                                                                                    
  Exit Code: 1 (General error)                                                      
                                                                                    
  Host Name: mywebsite.com                                          
                                                                                    
  ================                                                                  
  setfacl: var/log/prod-2019-12-18.log: Operation not permitted                     
```

Every day I have to login into the server and launch this script before launching Deployer:

`sudo chmod -R 777 var/`

Do you know why it's giving this error?

Thanks!
I have my ssh config on my machine configured for multiplexing. Do I need to enable this also for my deploy config? Or can I disable it?
We reviewed the Magento 2 deployment thoroughly and ran into an interesting issue. It appears the `magento:maintenance:disable` task in the [Magento 2 recipe](https://github.com/deployphp/deployer/blob/master/recipe/magento2.php#L58) is useless and might in fact in some cases produce an error on the frontend.

This is the task sequence in the default recipe;

- deploy:info,
- deploy:prepare,
- deploy:lock,
- deploy:release,
- deploy:update_code,
- deploy:shared,
- deploy:vendors,
- deploy:writable,
- deploy:clear_paths,
- magento:compile,
- magento:deploy:assets,
- **magento:maintenance:enable,**
- **magento:upgrade:db,**
- **magento:cache:flush,**
- **magento:maintenance:disable**
- deploy:symlink,
- deploy:unlock,
- cleanup,
- success

The interesting ones are in bold.

The maintenance is set on the `current` dir (the code base that is live). The setup:upgrade command is then run on the `release` dir (the new code base that is about to be put live). Then the cache is flushed, followed by a disabling of the maintenance mode of the live version.

At this point in time, the database is upgraded but the previous release is still the live version but it has **no maintenance mode enabled**. If a visitor comes at that exact moment, they might face an error since the code base isn't in sync with the database.

Next, the symlink is swapped and the `release` dir is put live. This is now `current`. This dir had no maintenance mode set in the first place so it'll automatically become available. The question is: why is `magento:maintenance:disable` even in there? It serves no purpose and in fact may cause customer-facing errors.

My proposal would be to remove [this line](https://github.com/deployphp/deployer/blob/master/recipe/magento2.php#L79) (and keep the task itself).
Just setup a basic deployment and testing it against a dev server.  

I ran `dep deploy` and that worked fine, then ran a couple of tagged deploys like `dep deploy -o branch=v0.01` `dep deploy -o branch=v.0.02`

Everything seemed to be working at that point so I tried testing the rollback functionality `dep rollback`, but I just get the message **"No more releases you can revert to"**

Checked the server and after each deployment the releases folder only has 1 directory.  I have `set('keep_releases', 10);` in my deploy.php file.
The task `deploy:release` starts with 
```php
    cd('{{deploy_path}}');

    // Clean up if there is unfinished release
    $previousReleaseExist = test('[ -h release ]');

    if ($previousReleaseExist) {
        run('rm -rf "$(readlink release)"'); // Delete release
        run('rm release'); // Delete symlink
    }
```
But in serveral cases the command ` run('rm -rf "$(readlink release)"'); ` has to run with sudo rights.

I would suggest s.th. like:

```php
    $sudo = get('release_cleanup_use_sudo') ? 'sudo' : '';
    if ($previousReleaseExist) {
        run($sudo . ' rm -rf "$(readlink release)"'); // Delete release
        run($sudo . ' rm release'); // Delete symlink
    }
```
