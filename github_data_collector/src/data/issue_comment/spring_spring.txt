
I don't think anybody is using Rifles (harcoded low-quality particles being one of the reasons!) so this should do no harm and is fairly easy to replicate with Lua. On the other hand, Rifle could become more useful as a very simple hitscan weapon (simpler than BeamLaser which still involves a projectile).
LegacyCpp AI interface wrapper is written in a way that expects real array size as return value after [1st call](https://github.com/spring/spring/blob/39f8fbd47f112f067999366d0444fa591480f9b3/AI/Wrappers/LegacyCpp/AIAICallback.cpp#L295) with outArray=nullptr. The issue could be fixed on LegacyCpp level (pass INT_MAX instead of 0), but then in general C interface becomes inconsistent with similar functions like [getLosMap](https://github.com/spring/spring/blob/39f8fbd47f112f067999366d0444fa591480f9b3/rts/ExternalAI/SSkirmishAICallbackImpl.cpp#L1946-L1957).
(Fixes KAIK, please populate to maintenance)
Fail in CMake config phase, instead of later, when compiling.

Tested on *Debian testing*.

... hey folks! :-) ;-)
This is for review only. Not ready for merge yet.
I'll also port it to develop once I have tested the code enough with maintenance.
Should it be ported to maintenance too?
Lately I've been working to get clang-tidy running for Spring, and doing some cleanup in the process.

[Clang-tidy](http://clang.llvm.org/extra/clang-tidy/)  is a useful tool for modernizing code, performing micro optimizations and even finding bugs (provided you use it carefully and don't introduce them instead!)

Right now I've setup clang-tidy to run while Spring is being built, and I've made it do only the checks that I wanted to deal with initially - as we go long the list of checks should probably be increased, but I think the first priority would be to get the warning count to 0 (by fixing diagnostics or explicitly [suppressing them](http://clang.llvm.org/extra/clang-tidy/#suppressing-undesired-diagnostics)).Unless we change our coding style, some checks will probably be disabled forever, e.g. `-readability-braces-around-statements`.

Performing clang-tidy while compiling can be awfully slow (didn't measure but build times seemed to have tripled at least) which feels largely unnecessary for the first build. 

During development I would like to have a way to turn it on for builds, e.g. my workflow would likely go as  follows:
1. build without clang-tidy
2. do some changes
3. build with clang-tidy

I would also like to do some refactoring from time to time:
1. perform full builds with clang-tidy
2. do some refactoring/global cleanup

And it would be nice to have it run on buildbots:
1. perform full builds with clang-tidy

CMake is not my strong suite, so if anyone's willing to lend a hand I'd be grateful.
Except for demo-watching specs, when these do something it's still unsynced only
There is a stereoscopic widget that emulate 3D vision by moving camera left & right ( https://github.com/ZeroK-RTS/Zero-K/blob/master/LuaUI/Widgets/gfx_stereo3d.lua ) . But the method used by this widget cannot work properly for moving units. If Spring could render same world twice then that method could work!

I have tried it, here is the result with rendering twice:
(try to focus on the circular white cursor using cross-eye technique)
![stereoscopic- with doubledraw](https://cloud.githubusercontent.com/assets/2525365/4146207/efac2a04-3407-11e4-95d7-9c8dc5b237e7.jpg)

The following is the same scene but without rendering twice:
![stereoscopic- no doubledraw](https://cloud.githubusercontent.com/assets/2525365/4146238/4a2565a4-3408-11e4-92d6-fd0e46ee8cda.jpg)

The boat in the centre is moving and it doesn't 3D correctly in second image.

In the proposed code-change I added the following Interface:
/doubledraw 1|0 : enable/disable double drawing
Spring.IsDoubleDrawing(): to check if double drawing is active
Spring.GetDoubleDrawIndex(): output 1 or 2 to assist widget to select which draw-frame to displayed as left-eye or right-eye
