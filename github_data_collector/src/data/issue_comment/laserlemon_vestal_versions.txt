I think it would be great to retrieve list changes for a specific attribute along with their version date.
Hi guys, `updated_by` option when updating a model is not working.
I use devise for authentication. it saves `null` for user_id, user_type and user_name.
Hi,

I am using vestal_versions to store and show changes to model data on our application. My question is when I display changes to a foreign key, it is the ID that is shown. Can I customise / config the model to store an associated field instead of ID in the modifications field?

Thanks in advance

Leighton

any idea who to send in the current_user attribute value while updating a model? 

The gem hasn't been upgraded to support Rails 4.2. We've tried the https://github.com/safetypins/vestal_versions fork but it fails when attempts are made to destroy objects (see https://github.com/laserlemon/vestal_versions/issues/111#issuecomment-86681271).

We're considering moving from Vestal Versions to PaperTrail. However, if Vestal Versions was to be updated to support Rails 4.2 we may reconsider.

@laserlemon @midas @dreamr what are your intentions for Vestal Versions? Do you intend to continue maintaining it?

I'm attempting to use vestal_versions with a Rails 4.2 app, and Ruby 2.2, But after adding the gem, running the migration, and adding the 'versioned' method to the models I want to be versioned, I get the following error. Is there a rails 4/ruby 2.2 compatible fork of vestal_versions out there?

`Extracted source (around line #126):`
`124       def included(base = nil, &block)`
`125         if base.nil?`
`126           raise MultipleIncludedBlocks if instance_variable_defined?(:@_included_block)`
`127
`128           @_included_block = block`
`129         else`

`vendor/bundle/ruby/2.1.0/gems/activesupport-4.2.0/lib/active_support/concern.rb:126:in 'included'`
`vendor/bundle/ruby/2.1.0/bundler/gems/vestal_versions-beccc5744ec0/lib/vestal_versions/version_tagging.rb:29:in '<module:VersionMethods>'`
`vendor/bundle/ruby/2.1.0/bundler/gems/vestal_versions-beccc5744ec0/lib/vestal_versions/version_tagging.rb:26:in '<module:VestalVersions>'`

Hello, 

Was playing around with your gem (btw thanks amazing work !) , was wondering why you rely on after_update/create callbacks of version creation, instead of relying on the standard rails callback progation (ie instanciate the version in a before_save cb of the versioned instance and let rails save it with its parent in the same commit). 

Do you guys see some drawbacks with the described behavior, which made you code the creation feature the way you did ? 

thx !!

Fixed missing `.rb` extension here - https://github.com/laserlemon/vestal_versions/blob/master/lib/generators/vestal_versions/migration/migration_generator.rb#L12.

Hello,

I'm implementing your gem in one project (thx for wthe good work btw! ;-) ), and was wondering why you rely on after_create & update callback when creating a version. 

``` ruby
  #creation.rb line 8
  after_create :create_initial_version, :if => :create_initial_version?
  after_update :create_version, :if => :create_version?
  after_update :update_version, :if => :update_version?
```

There is a rails standard feature for callback propagation between associated models , wouldn't it be more interesting to do something like that : 

``` ruby
  #creation.rb line 8
  before_create :instanciate_initial_version, :if => :create_initial_version?
  before_update :instanciate_version, :if => :create_version?
  before_update :instanciate_version, :if => :update_version?
```

I'm perhaps missing something here, so let me know if you see any drawback to such evolution, but it would reduce the number of db commit and ensure that the after_commit include the last version instance ... 

