### Description

Error occurred when I use paper in mocha testing file. The error msg is `Cannot read property 'acorn' of undefined`. And the reason I found is that `this`, in file `src/core/PaperScript.js - Line 19`, is `undefined`. But it is just an empty Object when I use it in browser. So, I think it will always be safe if we have to use an attribute of an unknown Object.

#### Related issues

<!--
Please list related issues and discussion by using the following syntax:

- Relates to #49
  (to reference issues in the Objection.js repository)
- Relates to https://github.com/tgriesser/knex/issues/100
  (to reference issues in a related repository)
-->

- Relates to <https://github.com/paperjs/paper.js/issues/1480>

### Checklist

<!--
- Please mark your choice with an "x" (i.e. [x], see
  https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
- PR's without test coverage will be closed.
-->

- [x] New tests added or existing tests modified to cover all changes
- [ ] Code conforms with the JSHint rules (`npm run jshint` passes)

### Description

This PR proposes to add a new `PaperScope` setting: `hitOptions`

If set, this option supersedes `settings.hitTolerance` and allows us to specify the default values to any properties of the `hitTest()` options argument.

Why adding this setting?

I encountered an issue (unfiled) that the `Item` mouse events do not fire when the pointer is over a selection handle of a selected `Shape.Circle` item. Likewise, in a `Tool` mouse event callbacks, `evt.item` reports `null` even if the in-callback `circle.hitTest(evt.point, {bounds: true})` call returns a positive hit result.

After studying the source, I came up with this PR, which is the likely the simplest, least-invasive solution to my issue without altering the original behavior. With the PR, I can simply set

```js
paper.settings.hitOptions = { bounds: true }
```

to make the mouse events to fire on the selection handles. 

CAVEAT Since `hitTest()` does not check whether the bounds rectangle is shown or not, mouse events will fire on hidden bounds rectangle.

#### Related issues

None I could find.

### Checklist

- [x] New tests added or existing tests modified to cover all changes
- [x] Code conforms with the JSHint rules (`npm run jshint` passes)

Note: I cannot run the gulp script in Node 13.6 as is, but confirmed my test & jshint to pass in modified partially-functional gulp environment (using gulp-v3 package, which is a 3rd-person fork of gulp v3 with updates). Any interest in modernizing to gulp-4? I can contribute if there is such need.
I had just updated my Node version to v13 and tried out my app.

I got this error on startup:

```
Uncaught Error: Unable to load jsdom module.
    at Object.<anonymous> (node_modules\paper\dist\node\self.js:33:15)
```

I followed the message to the code here:

```js
try {
    jsdom = require('jsdom');
} catch(e) {
    // Check the required module's name to see if it contains jsdom, and only
    // complain about its lack if the module requires it.
    if (/\bjsdom\b/.test(requireName)) {
        throw new Error('Unable to load jsdom module.');
    }
}
```

I tried starting a new Node server that just imports `jsdom` directly. And this is the actual error message I got:

```
Error: The module '\node_modules\canvas\build\Release\canvas.node'
was compiled against a different Node.js version using
NODE_MODULE_VERSION 72. This version of Node.js requires
NODE_MODULE_VERSION 79. Please try re-compiling or re-installing
the module (for instance, using `npm rebuild` or `npm install`).
```

So, Paper is actually swallowing a much more useful error message here. I was confused for a while because I had purposefully installed `jsdom` and knew for a fact that it was in `node_modules` - yet I was continuing to get that message `Unable to load jsdom module.` - so yea, not very helpful and a bit of a misdirect for frustration.

In the end I just had to rebuild all my modules again (which I actually had already done, but for some reason yarn missed rebuilding `canvas`...)

At the least, the code should print out the full first error before throwing again:

```js
try {
    jsdom = require('jsdom');
} catch(e) {
  console.error(e);
    // Check the required module's name to see if it contains jsdom, and only
    // complain about its lack if the module requires it.
    if (/\bjsdom\b/.test(requireName)) {
        throw new Error('Unable to load jsdom module.');
    }
}
```
# Description/Steps to reproduce

The setter for `view.viewSize`, which I'm using to resize the canvas, appears to be buggy. At least, its behavior is inconsistent with how paper.js initializes its view.

Specifically, the `view.viewSize` setter incorrectly scales the canvas' "virtual" pixel dimension to be smaller by the factor of `view.pixelRatio` than `view.viewSize`. Based on my observation, it shouldn't scale at all.

# Link to reproduction test-case

Here is the minimum example:

[Github Repo](https://github.com/hokiedsp/paper.js-view-size-bug)

Please set `show_bug` flag at the top of the `index.js` to `true`/`false` to see the 2 different behaviors

# Expected result

### `show_bug=false`

On my PC, here is what `index.html` looks like when the canvas is pre-sized to fit the window:

![no-resize](https://raw.githubusercontent.com/hokiedsp/paper.js-view-size-bug/master/screenshot_noresize.png)

And here is the copy of the console:

```
Set canvas to span the window before initializing paper:
Initial view size:
 view.size: { width: 1047, height: 792 }
 view.viewSize: { width: 1047, height: 792 }
 view.pixelRatio: 2
Text position:
 text.point: { x: 500, y: 350 }
```

### `show_bug=true`

And here is the case when the canvas is resized via `view.viewSize`:

![resized](https://raw.githubusercontent.com/hokiedsp/paper.js-view-size-bug/master/screenshot.png)

with the console output:

```
Initial view size:
 view.size: { width: 302, height: 152 }
 view.viewSize: { width: 302, height: 152 }
 view.pixelRatio: 2
Resizing canvas by setting view.viewSize...
New view size:
 view.size: { width: 1045, height: 790 }
 view.viewSize: { width: 1045, height: 790 }
 view.pixelRatio: 2
Text position:
 text.point: { x: 500, y: 350 }
```

The final canvas sizes (`viewSize`) of 2 cases are near identical (I think the difference is due to using % vs. px). But, their appearances are greatly different. As I stated above, it appears the `viewSize` setter is making its workspace scaled by the factor of `view.pixelRatio`, which I don't think it should.

[edit]The biggest issue with this bug is that mouse events are triggering at where the object should be placed. The demo has `mouseenter`/`mouseleave` events to change the mouse cursor to `text`. Despite the text is shown at the bottom-right corner, the mouse cursor switches in the middle, where the text should be.[/edit]

As a final note, it would be a nice feature if the paper.js' workspace dimension could be specified by `view.size` and the size of the canvas element as `viewSize`. My use case is to annotate video with overlaying paper.js canvas; so setting the paper.js' pixels to match that of the video pixel size would eliminate the need for unit conversion.

# Additional information
  Windows 10 Pro, Node 13.5, tested with latest Chrome & Firefox

My display setting:

![Windows display config](https://raw.githubusercontent.com/hokiedsp/paper.js-view-size-bug/master/display_config.png)

# Description/Steps to reproduce
quad = new Path ({strokeWidth:2, strokeColor: "red", blendMode: "screen"});
quad.add ([100, 100]);
quad.add ([200, 100]);
quad.add ([200, 200]);
quad.add ([100, 200]);
quad.closed = true;
//quad.closed = false;
quad.removeSegments ();

This results in a script error when the blendMode is defined as anything other than "normal".

# Expected result
All segments should be removed from the Path, while it still retains its original properties.
Due to the error, however,  the script terminates execution.

Workarounds:
1) Set blendMode to "normal", or don't set it at all;

2) Before calling Path.removeSegments(), unclose the object by setting Path.close = false;

3) Wrapping the addJoin function in a conditional wrapper, e.g. if (typeof segment != "undefined")

# Additional information
Windows 10 Home, Firefox (72.0.1 64-bit), paperjs 11.3 - 12.4 + prebuilt,
# Description/Steps to reproduce

I'm finding a bug where when an SVG is imported that contains an id that begins with a number, the onError fires but the SVG is still imported and added to the root of the DOM at the bottom.

# Link to reproduction test-case

Convert an SVG file to a paper.js object using the importSVG() method where the SVG contains <g id="2"...

The onError event handler should fire showing an error with the SVG file but the SVG should be added as a node of the root DOM element.

Note: if there is not error then there is not added DOM element and no problem.

# Expected result

onError event handler to fire and SVG to not be imported.

# Additional information

  macOS 10.15.2, Node 12.14.0

Using paper.js as PaperScript, my script does not appear in the browser's debug sources.
I use Firefox or Chromium.
<!--
This issues database is used to keep track of bugs and new features.
For questions and support, please visit the Gitter channel instead:
  https://gitter.im/paperjs/paper.js
-->

I meet a question, I let Paper.path  use  strokeWith and opacity <1  while the paper.view.zoom > 3.5 ,the Paper.path â€™s angle will be clipped
Please see below

Please see below
![image](https://user-images.githubusercontent.com/26630687/71430858-2492a280-2709-11ea-89f9-3701dcc583fe.png)



# Link to reproduction test-case
reproduce  bug steps
1  set the paper.path strokeWith = 30 and strokeColor = 'black'
2 set the paper.path opacity = 0.8
3. set the paper.view.zoom = 3.5

Thanks

When [item#intersects](http://paperjs.org/reference/compoundpath/#intersects-item) is called on a compoundPath against another compoundPath that overlaps it but has none of its child paths intersecting the other's, `intersects` returns false.

Calling `a.intersect(b).firstChild !== undefined` returns true as it calculates intersecting area, but it performs unneeded calculations. 

The [isInside](http://paperjs.org/reference/compoundpath/#isinside-rect) method is inadequate because it compares the bounding rects and might return false positives. 

Is there a simpler method of detecting overlapping compoundPaths/paths that do not have intersecting child paths? Without having to calculate the resulting boolean `intersect`ed path? Maybe Paper.js could use such a method.

[sketch example](http://sketch.paperjs.org/#V/0.12.4/S/vZRBasMwEEWvMmhjG4xx3XqjkpUvEJplnIUsTWoTRWNkOaWE3L1SXVpTSqE4zSwE+qP/kR6DzsyIIzLONgd0smUpk6TC/iQsCFiBwReo6NjTaNRauDY+1wZ8ybbTyqLhsJ2EUOHwphU9ZlVnpcY4CGvqjIvv8jwFvyQplHmSOXoP2ws9YJL+NeH+e8IUsPsI2ndaP40aOUR4QkNKRbNORZqsb1n8lKkXsnOvHPKsrM0leaxNbQKB5n8IPCwmUFyDQKNH/BXBBEFeEUJRLh2DWcLNxkBdnUCxYAxmCbcZA0lmII2Zpuc4EuDvgHZA6QZoeJSCyL6UuEl+8Mi5RwWPnHuU9/ifp7EoDn144sD4dnd5Aw==)

<img width="526" alt="Screen Shot 2019-12-22 at 9 21 48 PM" src="https://user-images.githubusercontent.com/6657634/71338028-48dd5c00-251c-11ea-9d49-78bc797373b2.png">

_the shapes on the left do not intersect, while the ones on the right do._

v0.12.4
<!--
This issues database is used to keep track of bugs and new features.
For questions and support, please visit the Gitter channel instead:
  https://gitter.im/paperjs/paper.js
-->
When moving a Group with its `applyMatrix` set to `false`, the child item's `localToGlobal()` function works for only the _first_ child of a group, but fails for any _subsequent_ items in the group.

This is related to #1448: it seems that while #1552 fixed the issue for the first item in a group, it didn't for subsequent items.

# Description/Steps to reproduce

(See Sketch below for working example)

Note:
* `applyMatrix = false` is required to see the problem
* also, the `setTimeout()` is required to see the problem. I had originally experienced this issue with Raster images and was getting the same problem in the `onLoad()` callback. 

```javascript
applyMatrix = false     // fails
// applyMatrix = true   // works

g = new Group({applyMatrix: applyMatrix})

r1 = new Shape.Circle({
    fillColor: "red",
    radius: 50
})

r2 = new Shape.Circle({
    strokeColor: "green",
    radius: 50
})

g.addChild(r1)
g.addChild(r2)

// fails:
setTimeout(() => {
    console.log("Group's position before move", g.position)
    g.position.x += 100
    console.log("Group's position after move", g.position)
    
    if (!r1.localToGlobal([0,0]).equals(r2.localToGlobal([0,0]))) {
        console.error("*** FAIL! ***")
        console.warn("OK: positions:", r1.position, r2.position)
        console.warn("OK: matrices:", r1.matrix, r2.matrix)
        console.warn("OK: parent's positions:", r1.parent.position, r2.parent.position)
        console.warn("OK: parent's matrices:", r1.parent.matrix, r2.parent.matrix)
        console.error("FAIL: Items' localToGlobal:", r1.localToGlobal([0,0]), r2.localToGlobal([0,0]))
        console.error("FAIL: Groups' localToGlobal:", g.localToGlobal([0,0]))
    }

}, 1000)

```

# Link to reproduction test-case

<!--
Please link to a test-case for reproduction, ideally as a repository with a
`packages.json` that installs all required dependencies to reduce confusion.

Note: Failure to provide a test-case for reproduction purposes will result in
the issue being closed.
-->
[Sketch reproducing issue](http://sketch.paperjs.org/#V/0.12.4/S/jZTfb5swEMf/latfCllESaS9IGXSFGlVtU17aN/qPjhwECvGZmezZIryv8+QkEJG0/KAfD/8ua/vDHumRYksYY8bdOmaTVlqssZOjbZGYZQqFBSEXHMtqkr9/SkcyR0sIBfKIjTP3Z03pLJc+9UwyVGNx4ytoY1tKIV3a9zCPZm6Cva9/KS/+dCWpNkp+3EtKoyWkryeYM91UzeXSi2NMpQAZ4QZZ9NjgEQma5vA55jrE2d+hWMdmQ2eSQUh6iusIhJZtlxLlQU0C4f2vM3oGpJwbdE9yRJN7YIghMUXONXs2qtMEXDW9uLWQmWsdNJoWGFuCKE0f9ArgSLqIuFx+6sj2sGnBczi+ENckTukt7HHt8whuKGZZ6RCPZl7ZVZCBc/xNH4JI/xd+8H7k46Gw7A7YF8MEhnyciaTCXz7+vDjBvyKs/D/zK0g7RN/fU/Omn0XvVQvp3N4Y34p/A1G2VylFM+I1t61gOPyHQmCULte/161tJELSUPfB9GXEk+UntKBZ4TadbfpbAIPDkt7C4PhdOyxibUlRkf5XqX2co2WKq4BD80Xcpg2Vzb2Lv/HWRGKTWWkdpYlzy+Hfw==)

# Expected result

Two identical items contained in a parent `Group` should give the same value for `item.localToGlobal([0,0])` after moving the parent.

Actual result is that the first item in the group gives the correct `localToGlobal` value, but the second returns a value as if the parent had not moved.

# Additional information

* Paper version 0.12.4
* ChromeOS Version 78.0.3904.106 (Official Build) (64-bit)
