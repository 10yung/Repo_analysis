I used puppeteer to simulate logging into a website. After logging in successfully, a slider verification code may appear when entering a detail page.If your programs visit this type of page frequently, a slider verification code will appear. If you get the successful cookies afer go through the slider verification, add them to the header information, and then you can continue to crawl page data. The cookies are valid for 30 minutes.Ok, so here's the problem:
In header mode, you can log in normally, and you can also drag a slider on a certain type of page and successfully verify that you get the cookies.However, in headless mode, you can also log in normally, but you cannot drag the slider on a certain type of page normally. The slider does not move, and the program stops at the slider drag all the time.You can't just drag the slider like you have a head mode, and it doesn't move.This is part of my drag process:
el = await self.page.querySelector('#nc_1_n1z')
const box = await el.boundingBox()
await .page.hover('#nc_1_n1z')
await page.mouse.down()
await page.mouse.move(box['x'] + 5, box['y'], {'steps': 3})
await page.mouse.move(box['x'] + 20, box['y'], {'steps': 9})
await page.mouse.move(box['x'] + 60, box['y'], {'steps': 40})
 ......
await page.mouse.move(box['x'] + distance - 20, box['y'], {'steps': 15})
await page.mouse.move(box['x'] + distance, box['y'], {'steps': 10})
await page.mouse.up()

I look forward to your guidance and help. Thank you!
### Steps to reproduce

**Tell us about your environment:**

* Puppeteer version: 2.0.0
* Platform / OS version: windows10 1903
* URLs (if applicable): https://ts.xcatliu.com/
* Node.js version: 12.13.0

**What steps will reproduce the problem?**

_Please include code that reproduces the issue._

1. exposeFunction dosen't work correctly when calling a 3rd party method from modules, which cause unexpected error.
2. I had already searched in StackOverflow and Google, and disappointedly in vain.

```javascript
const removeSpItems = require("../helper/removeSpItems");
await page.exposeFunction("removeSpItems", (arr, idxArr) =>
    removeSpItems(arr, idxArr)
  );
let aLinkArr = await page.evaluate(async () => {
    const linkUl = document.querySelectorAll("ul.list-20526648")[4];
    let aLinks = [
      ...linkUl.querySelectorAll(
        "a.link-a079aa82--primary-53a25e66--link-faf6c434"
      )
    ];
    await window.removeSpItems(aLinks, [0, 1, 5, 16, 26]);
    return aLinks.map(a => {
      return {
        href: a.href.trim(),
        text: a.innerText.trim()
      };
    });
  });

// removeSpItems.js
function removeSpItems(arr, idxArr = []) {
  const len = idxArr.length;

  if (!Array.isArray(idxArr) || len === 0) {
    throw new Error("IdxArr Must Be An Array With At Least One Member!");
  }
  if (len === 1) {
    arr.splice(idxArr[0], 1);
    return arr;
  } else {
    let newIdx = idxArr.map((val, idx) => {
      return val - idx;
    });

    newIdx.forEach(idx => {
      arr.splice(idx, 1);
    });
    return arr;
  }
}
module.exports = removeSpItems;

```

**What is the expected result?**
`aLinks` is an array with several node like `<a><span>...</span></a>` , I try to use `removeSpItems` to remove special items in the array. 

**What happens instead?**
Unexpected Error Occured:

UnhandledPromiseRejectionWarning: Error: Evaluation failed: TypeError: Converting circular structure to JSON
    --> starting at object with constructor 'HTMLAnchorElement'
    |     property '__reactInternalInstance$li019jk8fmm' -> object with constructor 'tu'
    --- property 'stateNode' closes the circle
    at JSON.stringify (<anonymous>)
    at window.<computed> (__puppeteer_evaluation_script__:13:22)
    at __puppeteer_evaluation_script__:11:18
    at ExecutionContext._evaluateInternal (C:\Users\归去来兮\Desktop\Praticing\Puppeteer-Pratices\node_modules\_puppeteer@2.0.0@puppeteer\lib\ExecutionContext.js:122:13)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async ExecutionContext.evaluate (C:\Users\归去来兮\Desktop\Praticing\Puppeteer-Pratices\node_modules\_puppeteer@2.0.0@puppeteer\lib\ExecutionContext.js:48:12) 
    at async C:\Users\归去来兮\Desktop\Praticing\Puppeteer-Pratices\src\ts-pdf.js:125:18
0@puppeteer\lib\helper.js:112:23)                     ing\Puppeteer-Pratices\node_
    at C:\Users\归去来兮\Desktop\Praticing\Puppeteer-P)                           -Pratices\node_modules\_puppeteer@2.0.0@puppeteer\lib\helper.js:111:15)ratices\src\ts-pdf.js:125:29                          ticing\Puppeteer-Pratices\noode_modules\_puppeteer@2.0.0@puppeteer\lib\DOMWorld.js:112:20)
    at processTicksAndRejections (internal/process/tas12:23)k_queues.js:93:5) 



### Steps to reproduce

**Tell us about your environment:**

* Puppeteer version: 2.0.0, Chromium 79
* Platform / OS version: AWS Lambda
* URLs (if applicable):
* Node.js version: 12.x

**What steps will reproduce the problem?**

browser = await chromium.puppeteer.launch({
	args: chromium.args,
	defaultViewport: chromium.defaultViewport,
	executablePath: await chromium.executablePath,
	headless: chromium.headless
});

let page = await browser.newPage();

let viewportSize = {width: 1920, height: 1080};
await page.setViewport(viewportSize);

let result= await page.goto('https://www.dpreview.com/archive/2019/12',{timeout:30000,waitUntil:'networkidle0'});

let client = await page.target().createCDPSession();

let wHandle = await client.send("Runtime.evaluate", {expression: "window"});
console.log(wHandle);
let listeners = await client.send("DOMDebugger.getEventListeners", {objectId:wHandle.objectId});
console.log(listeners);

**What is the expected result?**
I expect to get a collection of listener objects (or at least not an error - the page in the example above replaces a non-public page which has 'resize' events I need to save/kill/restore as a way of working around problems described here: https://github.com/puppeteer/puppeteer/issues/5300)

**What happens instead?**
DOMDebugger.getEventListeners call results in an error:

Protocol error (DOMDebugger.getEventListeners): Invalid parameters objectId: string value expected

<!--
STEP 1: Are you in the right place?

- For general technical questions or "how to" guidance, please search StackOverflow for questions tagged "puppeteer" or create a new post.

https://stackoverflow.com/questions/tagged/puppeteer

- For issues or feature requests related to the DevTools Protocol (https://chromedevtools.github.io/devtools-protocol/), file an issue there:

https://github.com/ChromeDevTools/devtools-protocol/issues/new.

- Problem in Headless Chrome? File an issue against Chromium's issue tracker:

https://bugs.chromium.org/p/chromium/issues/entry?components=Internals%3EHeadless&blocking=705916

For issues, feature requests, or setup troubles with Puppeteer, file an issue right here!
-->

### Steps to reproduce

**Tell us about your environment:**

* Puppeteer version: 1.20.0
* Platform / OS version: Mac
* URLs (if applicable): https://recruit.jackall.co.jp/
* Node.js version: 10.15.0

**What steps will reproduce the problem?**

I try to screenshot that site with fullPage option. But, It only capture the top part. Beside that, it only contain white area or blank area. Below is my code

 `let browser = await puppeteer.launch({`
       ` defaultViewport: {`
            `width:1900,`
            `height:1080`
         ` }`
   ` });`
    `let page = await browser.newPage();`
    `await page.goto('https://recruit.jackall.co.jp/',{ waitUntil: "networkidle0" });`
    `await page.screenshot({ path: 'issue-4212.png', fullPage: true});`
    `await browser.close();`

 May I know what is the correct way to screenshot that type of website? I'm really appreciate your help.

**What is the expected result?**
https://pu-ai-bc.s3-ap-southeast-1.amazonaws.com/uploads/screenshot-recruit.jackall.co.jp-2020.01.17-17_13_17.png

**What happens instead?**
https://pu-ai-bc.s3-ap-southeast-1.amazonaws.com/uploads/issue-4212.png

<!--
STEP 1: Are you in the right place?

- For general technical questions or "how to" guidance, please search StackOverflow for questions tagged "puppeteer" or create a new post.

https://stackoverflow.com/questions/tagged/puppeteer

- For issues or feature requests related to the DevTools Protocol (https://chromedevtools.github.io/devtools-protocol/), file an issue there:

https://github.com/ChromeDevTools/devtools-protocol/issues/new.

- Problem in Headless Chrome? File an issue against Chromium's issue tracker:

https://bugs.chromium.org/p/chromium/issues/entry?components=Internals%3EHeadless&blocking=705916

For issues, feature requests, or setup troubles with Puppeteer, file an issue right here!
-->

Preface

> For general technical questions or "how to" guidance, please search StackOverflow for questions tagged "puppeteer" or create a new post.

Am banned from SO for another 4 years. That is not going to happen any time soon.

Have previously asked the question at Chromium discuss, /r/chrome, and bugs.chromium

- [What is the canonical procedure to use --utility, --utility-cmd-prefix, --utility-startup-dialog, --enable-service-binary-launcher flags?](https://groups.google.com/a/chromium.org/forum/#!topic/chromium-discuss/-mSK2JXyLuM)

- [What is the canonical procedure to use --utility, --utility-cmd-prefix, --utility-startup-dialog, --enable-service-binary-launcher flags?](https://www.reddit.com/r/chrome/comments/ej2p6r/what_is_the_canonical_procedure_to_use_utility/fei6cvx/?context=3)

- [Issue 1042473: How to use Chromium as utility and browser?](https://bugs.chromium.org/p/chromium/issues/detail?id=1042473)

Concept

- [SpeechSynthesis *to* a MediaStreamTrack or: How to execute arbitrary shell commands using inotify-tools and DevTools Snippets](https://gist.github.com/guest271314/59406ad47a622d19b26f8a8c1e1bdfd5)

Am trying to execute arbitrary shell scripts on the local machine without using a local server, Native Messaging, or `WebAssembly` to do so.

Execution of the local shell scripts and retrieval of the output as a file is not the issue.

Retaining the ability to use the browser even though launched as a utility is the issue.

Perhaps the developers here will be able to help. If not do not know where to ask the question next. 

If this issue is determined to be off-topic for this repository, kindly close the issue. 

> For issues, feature requests, or setup troubles with Puppeteer, file an issue right here!
### Steps to reproduce

**Tell us about your environment:**

* Puppeteer version: N/A
* Platform / OS version: Linux
* URLs (if applicable): file:, and Web address
* Node.js version: 8.10.0

**What steps will reproduce the problem?**


_Please include code that reproduces the issue._

notify_directory_modifications.sh

```
#!/bin/bash
requestLocalScripts() {
  while true; do
    inotifywait -e attrib -e close $HOME/localscripts/run.txt | while read a c; 
      do 
        $HOME/localscripts/script.sh
        echo "$$ $a $c"
      done
  done
}

requestLocalScripts
```
script.sh

```
#!/bin/bash
/usr/bin/espeak-ng -m -f $HOME/localscripts/input.txt -w $HOME/localscripts/output.wav
```

run.txt

A  plain text file having `0` size. We write the file to local file system without content to observe `ATTRIB` event (modification date) dispatched by `inotifywait`.

HTML

```
<!DOCTYPE html>
<html>

<head>
<meta charset="utf-8"/>
  <title>Choose directory, get writable permission, write without executing close()</title>
</head>

<body>
  <p id="choose_directory_get_writable_permission">Choose directory, get writeable permission, execute script</p>
  <script>
    let input = `<voice name="Storm">Test</voice>`, dir, status, execFileHandle, inputFileHandle, outputFileHandle, writer;
    const ac = new AudioContext();

    document.getElementById("choose_directory_get_writable_permission").onclick = async e => {
      try {
        if (!(dir instanceof FileSystemDirectoryHandle && dir.name === "localscripts") && status !== "granted") {
          dir = await self.chooseFileSystemEntries({type:"openDirectory"});
          status = await dir.requestPermission({writable:true});
        }
        inputFileHandle = await dir.getFile("input.txt", {create:true});
        execFileHandle = await dir.getFile("run.txt", {create: true});   
        writer = await inputFileHandle.createWriter({keepExistingData: false});
        await writer.write(0, new Blob([input], {
          type: "text/plain"
        }));
        await writer.close();
        writer = await execFileHandle.createWriter({keepExistingData: false});
        await writer.write(0, new Blob([], {
          type: "text/plain"
        }));
        // wait 25 for file to be written
        await Promise.all([writer.close(), new Promise(resolve => setTimeout(resolve, 25))]);
        outputFileHandle = await dir.getFile("output.wav", {create: false});
        const buffer = await (await outputFileHandle.getFile()).arrayBuffer();
        await Promise.all(["input.txt", "output.wav"].map(fn => dir.removeEntry(fn)));
        const ab = await ac.decodeAudioData(buffer);
        const source = ac.createBufferSource();
        source.buffer = ab;
        source.onended = e => {
          source.disconnect();
          console.log(e);
        }
        source.connect(ac.destination);
        source.start();
      } catch (e) {
          console.error(e);
      }
    }
  </script>
</body>

</html>
```
1. Launch Chromium 81 with `--utility`, `--utility-and-browser` flags set
 `chromium-browser --utility-and-browser --utility-cmd-prefix="/path/to/notify_directory_modifications.sh" "/path/to/choose_directory_get_writable_permission_without_executing_close.html"`
2. Write arbitrary sheel script to local filesystem using Native File System.
3. Utilize `inotify-tools` to execute the arbitrary shell script and get output of command as file.



**What is the expected result?**

Ability to navigate to a Web address at a tab other than the local HTML doccument at `file:` protocol set as argument to Chromium executable.


**What happens instead?**

When attempting to naviagte to a Web URL at the new tab page the document does not load, instead the tab appears to remain in the request state, similar to requesting a _N_ GB resource, though does not ever conclude the request.

--

How to run Chromium, Chrome as both a utility and general browser?
Can i in page context call a function defined on puppeter? What i need is, load a page on puppeter and when an especific event occurs, some elements will be shown on the screen, so when this happen i need call puppeter function with that loaded elements.

There is a way to achieve that?
### Steps to reproduce

**Tell us about your environment:**

* Puppeteer version: 2.0.0
* Platform / OS version: macOS Catalina 10.15.2
* Node.js version: 12.14.0
```
    const browser = await puppeteer.launch({
        headless: false,
        defaultViewport: null,
        args: ['--proxy-server=' + taskProxy]
    });
    const page = await browser.newPage();
    await page.authenticate({
        username: taskUser,
        password: taskPass
    });

    await page.goto(url);
```
**What is the expected result?**
Page will authenticate the proxy and the given URL will be loaded.

**What happens instead?**
Page won't authenticate and asks user to manually enter user/pass.

Hi..I am new and I'd like to get the response of the request from twitter shown in the screenshot

The current puppeteer code is shown below. Could anybody show me how to modify it so that it will get the JSON response directly from the browser? Thanks.
Here is a code as an example:

> const puppeteer = require('puppeteer');
(async () => {
    //  const browser = await puppeteer.launch();
    const browser = await puppeteer.launch({
        headless: false        
    });
    const page = await browser.newPage();
    await page.goto('https://twitter.com/login');
    await page.waitFor(3000)
    await page.type('input[name="session[username_or_email]"]', 'username');
    await page.waitFor(3000)
    await page.type('.js-password-field', 'password');
    await page.waitFor(3000)
    await page.click('.EdgeButtom--medium');
    await page.waitFor(3000)
    await page.goto('https://mobile.twitter.com/holidaytimeuk/status/1213629088671371267');
    await page.waitFor(3000)
 const linkHandlers = await page.$x("//*[@id='react-root']/div/div/div/main/div/div/div/div/div/div[2]/div/section/div/div/div/div[1]/div/article/div/div[6]/div[2]/a");
    if (linkHandlers.length > 0) {
        const [response] = await Promise.all([
    page.waitForResponse(response => response.url().includes('https://api.twitter.com/2/timeline/liked_by.json')),
    linkHandlers[0].click()
]);
const dataObj = await response.json();
console.log(dataObj);
    } else {
        throw new Error("Link not found");
    }
})();

Here is data i want to get
![tB1ja](https://user-images.githubusercontent.com/34914670/72455433-53c29e00-37f5-11ea-89ff-234e1aef995c.jpg)


### Steps to reproduce

**Tell us about your environment:**

* Puppeteer version: 2.0.0
* Platform / OS version: MacOS, Alpine Linux
* URLs (if applicable): https://www.tiktok.com/@patroxofficial or any other tik tok profile
* Node.js version: 10.16.3

**What steps will reproduce the problem?**

Simply use `page.goto`. No matter it's headless or not

_Please include code that reproduces the issue._

```javascript
const puppeteer = require('puppeteer');

async function test() {
    const browser = await puppeteer.launch({
      headless: false,
      defaultViewport: {
        height: 1024,
        width: 1280
      }
    });

    const ctx = await browser.createIncognitoBrowserContext();

    const page = await ctx.newPage();

    await page.goto('https://www.tiktok.com/@9gag', {
      timeout: 30000,
      waitUntil: 'networkidle0'
    })

    await new Promise(resolve => setTimeout(resolve, 5000));
    await browser.close();
}

test();
```

**What is the expected result?**

![the full page with video feed](https://i.ibb.co/KKDnq3n/Screenshot-2020-01-15-at-15-43-15.png)


**What happens instead?**

![video feed not loading](https://i.ibb.co/sJTnfNx/Screenshot-2020-01-15-at-15-42-42.png)

I've been trying many things, also nothing shows up in the console or the network that could give any clue about what the problem is. The issue also occurs when running in a docker container.

I tried loading the page using the chromium binary provided with puppeteer but it's loading fine, as well as on any other browser connected to the same and any other network. Incognito or not.

So, the only thing that is left to suspect is the fact that the connection between Puppeteer and the binary is somehow causing the problem? Would it be possible? I'm not familiar with how it works in the background and looking at the code has not been a successful lead for me, and I'm really running out of ideas.
I have several jobs that only run properly when headless mode is false, so I need to run them locally.

However, because every few seconds a new window is opened, I have to run when my local machine is not in use.

Is there a way to run in headful mode but open the browser in the background?