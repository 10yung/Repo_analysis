There are some limitations on use of Reflection under iOS, which affects Xamarin Projects:

https://docs.microsoft.com/en-us/xamarin/ios/internals/limitations

Essentially, Reflection.Emit and the use of IL is not supported. This is used only in specific sections of code anyway, basically ```GetFactory()``` and the ```MultiPocoFactory```.

I have been using PetaPoco with SQLite for my Xamarin projects (I've only delivered UWP so far, which has no issue with the full PetaPoco).   
Has anyone taken this journey before? It shouldn't be too hard to rewrite the IL into regular C# code using reflection ... I think!  
 I'm assuming that the IL is just for speed rather than flexibility.

Note I have gone back to PetaPoco v4, v3 and v2 but they all still use the IL loop for the factory.

BTW, love the recent work, v6 has some really nice features. I giggled a bit at the SQLKata plugin though, the interface is almost identical to the SubSonic v2 interface from all those years ago, which was dropped by Brad Robinson, due to its inflexibility in complex situations, in favour of the more flexible PetaPoco SQL generator. The wheel has come full circle!
Relates to #562 

This was trivial to implement, but I'm not sure if we should actually do it. After looking at some more DataProviders, I see that most of them handle this kind of translation from .NET type to DbType themselves. The particular db I'm working with for some reason doesn't explicitly handle `byte[]`, which is why I was having problems. But if I can count on `DatabaseProvider.PreExecute()` being called (see other PR), then I can handle this myself in my custom `DatabaseProvider`.

So I'm perfectly fine if you want to decline this PR.
I'm working with an oddball database engine for which I wrote my own custom `DatabaseProvider`. This database has a `Blob` field type, which I can read just fine using a `byte[]` property. But when I try to write to a table with one of those fields, I get `ArgumentException: Unable to infer parameter data type`. This has led me to a couple of questions.

1. **Should `byte[]` automatically map to `DbType.Binary`?** There is no code in `Database.SetParameterProperties()` to handle `byte[]` -- except when the parameter value is null and the property type is `byte[]`, in which case the `DbType` does get set to `Binary`. It seems like always treating `byte[]` as `Binary` would be a good thing. (NPoco does this, FWIW.)

1. **Should `DatabaseProvider.PreExecute()` get called in a different place?** I initially worked around my issue by using the `Database.CommandExecuting` event and setting the `DbType` to `Binary` for any `byte[]` properties. Then I thought that since `SetParameterProperties()` doesn't handle this globally, I could use `PreExecute()` in my `DatabaseProvider` to accomplish the same thing. The help text for `PreExecute()` says "Called immediately before a command is executed", but in fact it's called as part of `Database.CreateCommand()`. This means that for Insert and Update operations, `PreExecute()` sees the `DbCommand` object before any SQL or parameters have been added, which isn't very useful. What about calling `_provider.PreExecute()` as part of `Database.DoPreExecute()`, which does get called as part of every db call?

I'm happy to work on PRs for these.
Even though v6 hasn't been out for all that long, I think there are enough breaking changes that have been discussed (#478, #500 for example) and side conversations about code cleanup that it might be worth considering a v7 to roll all of these up. 

In addition to the two issues above, I think it would be good to:

1. Reorganize folders/namespaces a little.
2. Move convenience functions out of classes and into extension methods. For example, there are three overloads of `Database.Query()`, but only one of them does work; the other two delegate to the third. Similarly, all of the `Fetch()` methods just delegate to other methods to do their work. Having all of these in the base class clutters the class and clutters the interface, making it harder for anyone to write their own implementation of `IDatabase` (which, I know, is kind of unlikely, but still). By moving them all out to extension methods on `IDatabase`, we keep the functionality but reduce the clutter, and any `IDatabase` gets them for free.

I'm interested in discussion on this, and I'd be happy to take a first pass at the work.
https://devblogs.microsoft.com/dotnet/introducing-the-new-microsoftdatasqlclient/
Cannmot find any attribute which supports the definition of multi column primary keys ... is there a plan for integration?
The `Database` constructor which used to take an `IDbConnection` now takes a `DbConnection`. This is a breaking change -- I'm creating databases from helper functions that return an `IDbConnection`.

I understand that the async functions need a `DbConnection` for `OpenAsync()`. Could the constructor be changed back to `IDbConnection`, and then the async functions have a guard condition to cast the connection to `DbConnection` and check for null?
```csharp
public class Foo
{
    public int ID { get; set; }
    public DateTime DOB { get; set; }
    public int Month => DOB.Month;
}

using (var db = new Database(...))
{
    db.Query<Foo>().Dump();
    // SqlException: Invalid column name 'Month'.
}
```

I know that there's an `Ignore` attribute for this sort of thing, but it seems like PP should also ignore read-only properties when auto-generating a `SELECT` clause.

I think this could be done by changing the `PocoData` constructor like so, to check for read-only properties:

```csharp
QueryColumns = (
    from c in Columns
    where (!c.Value.ResultColumn || c.Value.AutoSelectedResultColumn) && c.Value.PropertyInfo.CanWrite
    select c.Key
).ToArray();
```

I'm happy to work on a PR if this sounds right.
When I call `PocoData.ForType(type, mapper)` for the first time, the resulting `PocoData` object is stored in the cache keyed only by the type. This means that if I later call `PocoData.ForType(type, otherMapper)`, I get back the initial PD object, which was created with a different mapper.

This is probably something of an edge case, but imagine a situation where a single type is used for queries in two different databases, each with its own mapper. The first database to use the class will cache its PD, and then both databases will always get that object.

I think it would be better if the cache had a composite key of type and mapper type. (Even then, it's possible for an instance of a mapper to have its properties changed between uses, but I would think that's even rarer.)

I'm happy to work on a PR for this.
I note and echo some concerns raised in #10 (it is from 2011 so I've opened this new issue!).

I tried inserting a PK into an autonumber-PK field, which is acceptable on many DBMS's. 

However IsNew is coded to base the return on whether the PK is still at default value or not.  
```Save()``` calls ```IsNew()``` and, getting false, then calls ```Update()```, which fails silently because the record does not exist.  
Calling ```Insert()``` directly fails because it will not insert a value into an autonumber column.

I propose creating an IsNew property on the poco column that will track the status (IsNew=false where loaded from the DB, new otherwise). This is how SubSonic worked.  
Also perhaps a ```CanInsertAutonum``` property on the providers to allow this behaviour.

Just checking this would be acceptable before I tool up a PR.