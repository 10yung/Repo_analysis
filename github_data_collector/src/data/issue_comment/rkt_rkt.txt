changing package name from libsystemd-journal-dev to libsystemd-dev.
this has caused because in semaphoreci Ubuntu version bumped up from trusty to xenial.
**Environment**

rkt Version: 1.29.0
appc Version: 0.8.11
Go Version: go1.8.3
Go OS/Arch: linux/amd64
Features: -TPM +SDJOURNAL

Linux 4.4.0-170-generic x86_64

NAME="Ubuntu"
VERSION="16.04.1 LTS (Xenial Xerus)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 16.04.1 LTS"
VERSION_ID="16.04"
HOME_URL="http://www.ubuntu.com/"
SUPPORT_URL="http://help.ubuntu.com/"
BUG_REPORT_URL="http://bugs.launchpad.net/ubuntu/"
UBUNTU_CODENAME=xenial

systemd 229
+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ -LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD -IDN

rkt run docker's image mysql, error.as  follows:

root@ubuntu:/home/rktuser# rkt --insecure-options=image run docker://mysql --set-env=MYSQL_ROOT_PASSWORD=password --set-env=MYSQL_USER=admin
run: group "rkt" not found, will use default gid when rendering images
stage1: warning: no volume specified for mount point "volume-var-lib-mysql", implicitly creating an "empty" volume. This volume will be removed when the pod is garbage-collected.
stage1: Docker converted image, initializing implicit volume with data contained at the mount point "volume-var-lib-mysql".
stage1: warning: error setting journal ACLs, you'll need root to read the pod journal: group "rkt" not found
stage1: warning: no volume specified for mount point "volume-var-lib-mysql", implicitly creating an "empty" volume. This volume will be removed when the pod is garbage-collected.
stage1: Docker converted image, initializing implicit volume with data contained at the mount point "volume-var-lib-mysql".
[98156.882386] mysql[6]: 2020-01-08 07:11:40+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.18-1debian9 started.
[98156.891594] mysql[6]: 2020-01-08 07:11:40+00:00 [ERROR] [Entrypoint]: mysqld failed while attempting to check config
[98156.892346] mysql[6]: 	command was: mysqld --verbose --help
[98156.892609] mysql[6]: 	mysqld: error while loading shared libraries: libpthread.so.0: cannot stat shared object: Permission denied

I hope everyone can help me solve this problem.Thanks.

Although it is spelling mistakes, it might make an affects while reading.

Signed-off-by: Kim Bao Long <longkb@vn.fujitsu.com>
__rkt__ no longer works when built by Golang 1.13: `rkt --debug run` hangs on `image: using image from file {ACI}` without printing anything else, apparently due to failure to extract the image.

Under [Nomad](https://www.nomadproject.io/) the following error is logged:

```
nomad: Error: prepare: error finding images:
   extracttar error: exit status 254, output:
    error extracting tar: could not extract file "rootfs/dev/console" in "/": operation not permitted
```

There is no such problem when __rkt__ is built by Golang 1.11 (I've confirmed that by re-building __rkt__ by older version of Golang in order to isolate the problem).

Please advise.
**Environment**

```
rkt Version: 1.30.0
appc Version: 0.8.11
Go Version: go1.13.1
Go OS/Arch: linux/amd64
Features: -TPM +SDJOURNAL
--
Linux 5.2.0-2-amd64 x86_64
--
PRETTY_NAME="Debian GNU/Linux bullseye/sid"
NAME="Debian GNU/Linux"
ID=debian
HOME_URL="https://www.debian.org/"
SUPPORT_URL="https://www.debian.org/support"
BUG_REPORT_URL="https://bugs.debian.org/"
--
systemd 244 (244-3)
+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN2 -IDN +PCRE2 default-hierarchy=hybrid
```

**What did you do?**

`sudo rkt fetch --insecure-options=image docker://busybox:1.31.1`

**What did you expect to see?**

A successful download.

**What did you see instead?**

```
$ sudo rkt fetch --insecure-options=image docker://busybox:1.31.1
fetch: parse docker://busybox:1.31.1: invalid port ":1.31.1" after host
```

From looking at the output of `rkt image list` I found a work-around:

```
$ sudo rkt fetch --insecure-options=image docker://library/busybox:1.31.1
```

But I think the simple no-slash version of the url (`docker://busybox:1.31.1`) should work based on the documentation (and I don't see `library/` documented anywhere).
**Environment**

Replace this with the output of:

rkt Version: 1.30.0
appc Version: 0.8.11
Go Version: go1.12.5
Go OS/Arch: linux/amd64
Features: -TPM +SDJOURNAL
--
Linux 4.19.68-coreos x86_64
--
NAME="Container Linux by CoreOS"
ID=coreos
VERSION=2191.5.0
VERSION_ID=2191.5.0
BUILD_ID=2019-09-04-0357
PRETTY_NAME="Container Linux by CoreOS 2191.5.0 (Rhyolite)"
ANSI_COLOR="38;5;75"
HOME_URL="https://coreos.com/"
BUG_REPORT_URL="https://issues.coreos.com"
COREOS_BOARD="amd64-usr"
--
systemd 241 (241-30-gf0da8f7+)
+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK -SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT -GNUTLS -ACL +XZ +LZ4 +SECCOMP +BLKID -ELFUTILS +KMOD +IDN2 -IDN +PCRE2 default-hierarchy=legacy

**What did you do?**

sestatus 
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             mcs
Current mode:                   enforcing
Mode from config file:          enforcing
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Max kernel policy version:      31

rkt run --interactive  docker://debian --insecure-options=image
result          
bash-4.3# 

sestatus 
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             mcs
Current mode:                   permissive
Mode from config file:          enforcing
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Max kernel policy version:      31

rkt run --interactive  docker://debian --insecure-options=image 
root@rkt-6b7c67a2-b20b-4b92-a182-81db09b85287:/#

**What did you expect to see?**

rkt  will work with SELinux  in the Enforcing mode

**What did you see instead?**

that rkt not working at the moment with SELinux  in the Enforce mode

** Note **

i've play the same scenario on debian Buster with SELinux in the Enforcing mode,
there are the same behavior and the same result.
there are no avc:  denied in  the logs


This is a copy of https://github.com/rkt/rkt/issues/3831 which was prematurely closed. I have the exact same issue but I'm just copying the original issue text for convenience:

**Environment**

```
rkt Version: 1.29.0
appc Version: 0.8.11
Go Version: go1.8.3
Go OS/Arch: linux/amd64
Features: -TPM +SDJOURNAL
--
Linux 4.11.0-14-generic x86_64
--
NAME="Ubuntu"
VERSION="16.04.3 LTS (Xenial Xerus)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 16.04.3 LTS"
VERSION_ID="16.04"
HOME_URL="http://www.ubuntu.com/"
SUPPORT_URL="http://help.ubuntu.com/"
BUG_REPORT_URL="http://bugs.launchpad.net/ubuntu/"
VERSION_CODENAME=xenial
UBUNTU_CODENAME=xenial
--
systemd 229
+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ -LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD -IDN
```

**What did you do?**

rkt run or rkt fetch docker:// image that has multiple layers after a update to a smaller layer.

**What did you expect to see?**

rkt download only changed layer and extract that.

**What did you see instead?**

rkt downloads ALL layers and re-extracts all of them to build aci.

I have base images that are 1 gig in size and having these layers downloaded and extracted every time a smaller upper layer is changed can take a very long time. Make dev testing with rkt frustrating. Maybe I'm missing something.
Hi, I'm Yevgeny Pats Founder of [Fuzzit](https://fuzzit.dev) - Continuous fuzzing as a service platform.

We have a free plan for OSS and I would be happy to contribute a PR if that's interesting.
The PR will include the following
- [go-fuzz](https://github.com/dvyukov/go-fuzz) fuzzers (This is generic step not-connected to fuzzit)
- Continuous Fuzzing of master branch which will generate new corpus and look for new crashes
- Regression on every PR that will run the fuzzers through all the generated corpus and fixed crashes from previous step. This will prevent new or old bugs from crippling into master.

You can see our basic example [fuzzitdev/example-go](https://github.com/fuzzitdev/example-go) and you can see an example of "in the wild" integration [google/syzkaller](https://github.com/google/syzkaller).

Let me know if this is something worth working on.

Cheers,
Yevgeny

**Environment**

Replace this with the output of:
```
$ printf "$(rkt version)\n--\n$(uname -srm)\n--\n$(cat /etc/os-release)\n--\n$(systemctl --version)\n"
rkt Version: 1.30.0
appc Version: 0.8.11
Go Version: go1.12.4
Go OS/Arch: linux/amd64
Features: -TPM +SDJOURNAL
--
Linux 4.19.50-coreos-r1 x86_64
--
NAME="Container Linux by CoreOS"
ID=coreos
VERSION=2135.5.0
VERSION_ID=2135.5.0
BUILD_ID=2019-07-01-1959
PRETTY_NAME="Container Linux by CoreOS 2135.5.0 (Rhyolite)"
ANSI_COLOR="38;5;75"
HOME_URL="https://coreos.com/"
BUG_REPORT_URL="https://issues.coreos.com"
COREOS_BOARD="amd64-usr"
--
systemd 241 (241-23-g05e654e+)
+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK -SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT -GNUTLS -ACL +XZ +LZ4 +SECCOMP +BLKID -ELFUTILS +KMOD -IDN2 -IDN +PCRE2 default-hierarchy=legacy
$
```

**What did you do?**
Trying to fetch ubuntu 16.04 image from docker.

```
$ sudo --preserve-env rkt --insecure-options=image fetch "docker://ubuntu:16.04"
Password: 
Downloading sha256:ad9c569a8d9 [=============================]     529 B / 529 B
Downloading sha256:35b42117c43 [=============================] 43.8 MB / 43.8 MB
Downloading sha256:0c175077525 [=============================]     169 B / 169 B
Downloading sha256:293b44f4516 [=============================]     850 B / 850 B
fetch: open /var/lib/rkt/cas/tree/deps-sha512-1a17cd1cda994227627cfecb653dbaf448310f516ccca29dd3112ac6254c2369/rootfs/dev/agpgart: no such device
$
```

I'm able to fetch 18.04 ubuntu image successfully.
**Environment**
```
Linux 4.9.0-6-amd64 x86_64
--
PRETTY_NAME="Debian GNU/Linux 9 (stretch)"
NAME="Debian GNU/Linux"
VERSION_ID="9"
VERSION="9 (stretch)"
ID=debian
HOME_URL="https://www.debian.org/"
SUPPORT_URL="https://www.debian.org/support"
BUG_REPORT_URL="https://bugs.debian.org/"
--
systemd 232
+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN
```
**What did you do?**
`rkt gc` in a cron job

**What did you expect to see?**
No output for successful execution.

**What did you see instead?**
Lots of informational output like `Garbage collecting pod` and `pod %q not removed: still within grace period`. Output is written to a mix of stdout and stderr, and when run from a cron job any output will cause cron to send a email report.

Either all output should be reviewed so that all status messages go to stdout and can be silenced in the crontab, or a flag like `--quiet` should be implemented to suppress all informational output.