**Describe the solution you'd like**
Supporting Swift 5.1 so that module stability can be achieved.

**Additional context**
The current MagazineLayout target is still using Swift 4. This means every time Xcode updates with a newer swift version, we'll have to rebuild MagazineLayout. Updating to Swift 5.1 will make use of the module stability to allow us rebuild only when we really want to.
## Details

A crash occurs during layout when a section is updated to: 
1. be empty
2. hide the footer

Under these conditions, `initialLayoutAttributesForAppearingSupplementaryElement(ofKind elementKind: String, at elementIndexPath: IndexPath)`
is called with an **empty** IndexPath. This results in a crash when `elementIndexPath.section` is accessed. 

## Related Issue

<!--- If this is related to any issues, link them here. -->

## Motivation and Context

Our project has a notion of a `collapsed` section, which is essentially an empty section. 
`Collapsed` sections do not show a footer view, but the expanded section may have a footer.

## How Has This Been Tested

I have modified the example project to reproduce the issue (see second commit on my PR). 
To test, I removed all of the items from a section that had a footer.
I observed that:
*without the fix*, the modified example crashes
*with the fix*, the modified example does not crash

I took at look at the test suite to see if I could add coverage for this test case, but I'm not sure what the your preferred strategy for testing this code path would be. The logic lives within the `MagazineLayout` class, which is not currently under test, as far as I can tell. 

**Note**: I'm not sure that the changes to example app are appropriate to bring back, but I wanted to be able to show you what was up. 

## Types of changes

<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->

- [ ] Docs change / refactoring / dependency upgrade
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

## Checklist

<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->

- [x] My code follows the code style of this project. ( I think so?) 
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have read the **CONTRIBUTING** document.
- [ ] I have added tests to cover my changes.

**Describe the bug**
If a `refreshcontrol` is added to the `collectionView`, pulling to refresh will cause the sticky header to pin to incorrect position, instead of top of the screen

**To Reproduce**
Steps to reproduce the behavior:
1. Go to `MagazineLayoutExample`
2. Go to `ViewController.swift` 
3. Inside `viewDidLoad()`, add `collectionView.refreshControl = .init()`
3. Run the project and pull to refresh, then scroll down
4. You will see the same behavior as shown in the attached gif

**Expected behavior**
The sticky header is expected to pin to the top even when the refresh control is active

**Screenshots**
![fdg](https://user-images.githubusercontent.com/14969440/69457588-63fd5600-0d3b-11ea-9078-4eeb1d8ae514.gif)

**Smartphone**
 - Simulator: iPhone 8 Plus
 - OS: 13.2.2
 - Version: Latest (1.5.2)

I just want to say upfront thanks so much for open sourcing this library. They say naming variables and caching data is the hardest thing in computer science, but I'd argue dealing with collection view layouts on iOS has made me pull out more hair over the years than anything else I can think of.

I have one feature request, and it's something I've been messing with over the last few days but this is your library, and I want to make sure that everyone here is happy with the idea/approach.

**Is your feature request related to a problem? Please describe.**
Section headers can be pinned to the top of the screen like table view headers can. This is fantastic! And more than enough in most circumstances. However, I have a use case where, instead of the section header scrolling off screen when we get to the next section, I want it to stay stuck until I encounter the next pinned section.

So let's say section 0 and section 5 are pinned. I want the header in section 0 to stay on screen while scrolling through sections 0 until 4, only scrolling off once we reach section 5.

**Describe the solution you'd like**
Currently in `MagazineLayoutHeaderVisibilityMode` there's a boolean `pinToVisibleBounds` property. I propose changing this to be an enum to be something like -

```
public enum MagazineLayoutPinningMode {
    case none
    case sectionVisibleBounds
    case visibleBounds
}
```

As mentioned in the opening, naming things are hard, so I'm not married to any of these. But essentially, `none` is the same is the current `pinToVisibleBounds` being set to `false`, `sectionVisibleBounds` is the current `true`behaviour, and `visibleBounds` would be this new case I'm talking about.

**Describe alternatives you've considered**
One alternative could be to instead just allow the ability to create a header (similar to table view headers, not section headers) which could have pinning behaviour on it. In some ways this might be preferable as it doesn't muddy the implementation of section headers (which already behave as you'd probably expect based on how they work on table view headers), and doesn't break existing API. But this is also a little less flexible.

**Additional context**
This has come about because I'm working on an app which has a component based API (I'm guessing Airbnb has something similar if they've gone to the trouble of building this library) where all content is driven by the server. Each component is part of its own section, and I want video players to be able to stick around on screen. The option of putting everything in one section and only having one sticky header was investigated but in the end this made things even more tricky to deal with. 


Scroll collection view to the bottom, then delete some cells, the behavior is unexpected. The animation of deleting cell is great, but the `contentOffset` is adjusted without any animation, the collection view just jumps. 

**Screenshots**
If applicable, add screenshots to help explain your problem.
![image](https://user-images.githubusercontent.com/10205466/68543925-61743580-03f8-11ea-9d1f-2348b8b3e496.png)

**Smartphone (please complete the following information):**
 - Simulator: iPhone 11
 - iOS 13

**Describe the bug**
When `reloadData()` is called, the `collectionView` sometimes doesn't preserve the scrolling position, causing the collectionView to jump abruptly

**To Reproduce**
Steps to reproduce the behavior:
1. Open and run the stock example project (workspacce) under `MagazineLayoutExample`
2. Please see the attached gif to reproduce this issue
Note: this doesn't occur every time, you need to adjust scrolling position before reloading the data if you cannot reproduce it at the beginning

**Expected behavior**
The screen should maintain its position after reloading data

**Screenshots**

![Untitled](https://user-images.githubusercontent.com/14969440/65793448-d8e55280-e133-11e9-8c3d-d8e81e66221a.gif)


**Smartphone (please complete the following information):**
 - Simulator: iPhone 11 Pro Max
 - OS: iOS 13.0
 - Version: current

**Additional context**
Not sure if this could be a bug in UICollectionView rather than MagazineLayout, please advise.

`UICollectionViewLayout` supports the ability to order its elements (cells, supplementary views & decoration views) not only by their IndexPath, so items with small IndexPath will be in the collectionView subviews' stack  in front of item with bigger IndexPath. This is required, for example, if you want to have an animation on a cell's content which will hover above all other cells.

It'd be great if MagazineLayout will support changing item's zIndex.

I can implement it & make a pull request. I think that the best place to get this data is part of the delegate call for 'MagazineLayoutItemSizeMode' (maybe we need to change its name to MagazineLayoutItemSizeAndOrderMode)
Currently, all widths are represented as a fraction 1/n of the width. How would you suggest to add support for something like |-- 2/3 --|-- 1/3 --| : Redefining fractionalWidth to use a floating point number, or adding a 'numerator' associated value to that enum?

Thanks!