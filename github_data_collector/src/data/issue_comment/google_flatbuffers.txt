Fixes the following:

- Previous code assumed that the fields vector would not end in a deprecated field, leading to several points where invalid code could be generated (e.g. missing a trailing paren/bracket).
- Previous code assumed that there would be at least one non-deprecated field if there were any fields, leading to invalid code generation
- Previous code did not handle `+/-inf` or `nan` default constants properly.

Fixes #5712
No support currently. (or I missing something)
It will still be possible to read buffers with this type, but the
elements will be treated as FBT_KEY and will be read as null-terminated
string.

Trying to build a vector of strings as typed will throw an exception.

More information on https://github.com/google/flatbuffers/issues/5627

Also, fix another bug on strings, where long strings were not properly
aligned.

Hi, there

please review it, thanks.
Version: 1.11.0 / C++11
Language: Java
OS: CentOS7

There is a bug in the Java export: missing vtable_start and vtable_size variable type (int)

`// automatically generated by the FlatBuffers compiler, do not modify`

`package org.yottalabs;
import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;`

`@SuppressWarnings("unused")
public final class MapLastTime extends Table {
  public static MapLastTime getRootAsMapLastTime(ByteBuffer _bb) { return getRootAsMapLastTime(_bb, new MapLastTime()); }
  public static MapLastTime getRootAsMapLastTime(ByteBuffer _bb, MapLastTime obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
...`

The last row should be:
`  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; int vtable_start = bb_pos - bb.getInt(bb_pos); int vtable_size = bb.getShort(vtable_start); }`

I believe it's simple to fix it. :) 






Hi ,

Similar to --json-parser option in flatcc, do we have a way to generate finalized buffer from  protobuf  data.

Can you please let us know inputs on this.
Hi ,

I am using C interface of flatbuffers and using --json-parser option to generate json parser routines.

When I give my json data as input, the parser is failing with many errors.
When I take my json data into any of the online json validators, validation is successful. But, the json-parser code is failing the parsing. 

Failure-1:
=======
For a field like below
    newIE [ubyte]
we are giving the data as "newIE": "abcdef"

However, parser is failing saying that array is expected.

Failure-2:
=======
For any enum that does not have a value "0" , the parsing is failing saying that initialization is not possible.

I am using the latest code of flatbuffers.
Can you please let us know, if there are any new versions of flatcc json-parser that fixes this.

Appreciate your inputs regarding this.

It seems the size-prefixed root accessors aren't taking into account the size prefix.

I'm not sure if this is the right fix, but 

Also, this change adds parentheses after new object expressions for Typescript generated code. (ie, `new MyGame.Example.Monster()` instead of `new MyGame.Example.Monster`).
The main idea of flatbuffers is to get rid of temporary data structures in serialization process. But what about `treasure` and `weaps`? Is there a way to write data directly one-by-one instead of creating this temporary arrays? 

https://github.com/google/flatbuffers/blob/a4b2884e4ed6116335d534af8f58a84678b74a17/samples/samplebinary.js#L44-L48
I'm (more or less) close to the tip of the tree. I'm generating Typescript code, and attempting to import the generated code into a web appllication.

If I generate with `--no-fb-imports`, I get errors along the lines of:

```
/home/max/src/frontend/generated/Schema_generated.ts
TypeScript error in /home/max/src/frontend/generated/Schema_generated.ts(129,7):
Cannot find namespace 'flatbuffers'.  TS2503

    127 | export namespace org.apache.arrow.flatbuf{
    128 | export class Null {
  > 129 |   bb: flatbuffers.ByteBuffer|null = null;
        |       ^
    130 | 
    131 |   bb_pos:number = 0;
    132 | /**
```

If I skip the `--no-fb-imports` option I get a bunch of code I can't seem to include; perhaps because the JavaScript library is targeting NodeJS and I'm targeting ES6?


Anyone here using generated TypeScript code in a browser successfully? (I found this: https://github.com/google/flatbuffers/issues/4493 but I'm getting the error above)