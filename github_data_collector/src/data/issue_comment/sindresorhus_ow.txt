Hello, thank this excellent module come to this world. Make much convenient!

I want to send error.message to Google Analytics and control flow in TypeScript, now I use this workaround:

```ts
// TypeScript control flow
try {
  ow(!gameId || !gameTitle, ow.boolean.false)
} catch (error) {
  gaAPI.send({
    ec: 'linebot',
    ea: `${gameTitle}/query/streams/error`,
    el: JSON.stringify({
      context: `!gameId || !gameTitle`,
      errorMessage: error.message,
    }),
  })
  await context.sendText(i18nAPI.t('error/internal'))
}
if (!gameId || !gameTitle) return

const response = await twitchAPI.getStreams({
  gameId,
  language: LanguageParam.zh,
})
```

How can I get rid of TryCatch? like

```ts
// TypeScript control flow
const error = ow.getError(!gameId || !gameTitle, ow.boolean.false)

if (error && (!gameId || !gameTitle)) {
  gaAPI.send({
    ec: 'linebot',
    ea: `${gameTitle}/query/streams/error`,
    el: JSON.stringify({
      context: `!gameId || !gameTitle`,
      errorMessage: error.message,
    }),
  })

  await context.sendText(i18nAPI.t('error/internal'))
  return
}

const response = await twitchAPI.getStreams({
  gameId,
  language: LanguageParam.zh,
})
```
Hi! Thank you for `ow`!

Could you export `ArgumentError` class from package?

Yes, I can check the error's type by `err.name === 'ArgumentError'` but this stands out from the approach adopted by our team. Schematically:
```javascript
async function updateById(id, data) {
  try {
    ow(id, ow.number.integer.greaterThanOrEqual(0).finite);
    ow(data, ow.object);
    
    const result = await db.updateById(id, data);
    // ...
  } catch (err) {
    if (err instanceof DBError) {
      if (err instanceof NotFoundError) {
        // ...
      } else if (err instanceof ConstraintViolationError) {
        // ...
      } // else if (err instanceof ...) { ... }
    }
    // here:
    else if (err.name === 'ArgumentError') { /* ... */ }
  }
}
```

It would be cool to use `ArgumentError` like this:
```javascript
import ow, { ArgumentError } from 'ow';

// ...

if (err instanceof ArgumentError) { /* ... */ }
```

In addition, we get the possibility of static analysis and instead of searching by all project by "ArgumentError" string, the editor/IDE will be able to show all the places where this error is catched/handled.

p.s. yes, I'm js-only user, not ts =)
This PR removes ESLint warnings using `/* eslint-disable-next-line ... */`. The errors and warnings removed were explicitly created, thus there is no need to display them in linter report.
I tried to do it in https://github.com/sindresorhus/ow/pull/131, but I could not make it work.
`ow.nullable.string`
instead of
`ow.any(ow.string, ow.null)`

A generic modifier for `|null|undefined` would also be useful. Maybe it is better if `optional` will also allow `null`? In most cases, you need `|null|undefined` and `|null`. Separately, `|undefined` is needed almost never.


`ow.array.of(ow.string)`
clearly better than
`ow.array.ofType(ow.string)`



`joi` has a field `isJoi=true`. Is there an analog in `ow`? Maybe use `isPredicate` for this?
`Error: Can't resolve 'fs' in './node_modules/ow/dist/source'`

Section `browser` in `package.json` is not actual.
When it's out: https://devblogs.microsoft.com/typescript/announcing-typescript-3-7-beta/
Hi guys,

this PR add `not` modifier to all predicates and should fix #148
```
// Chain from any predicate instance
ow('2', ow.any(ow.not.number, ow.not.string.numeric))

// Chain from any predicate rule(because it the same predicate instance)
ow(undefined, ow.not.undefined)
```