<!-- Love SVGR? Please consider supporting our collective: üëâ  https://opencollective.com/svgr/donate -->

## üêõ Bug Report

[parcel](https://www.npmjs.com/package/parcel) is the new official name of the package, as the readme shows: https://github.com/parcel-bundler/parcel

```js
‚ö†Ô∏è  Parser "@svgr/parcel-plugin-svgr/lib/asset.js" failed to initialize when processing asset "node_modules/@primer/octicons/build/svg/reply.svg". Threw the following error:
Error: Cannot find module 'parcel-bundler'
Require stack:
- ./refined-github/node_modules/@svgr/parcel-plugin-svgr/lib/asset.js
- ./refined-github/node_modules/parcel/src/Parser.js
- ./refined-github/node_modules/parcel/src/Pipeline.js
- ./refined-github/node_modules/parcel/src/worker.js
- ./refined-github/node_modules/@parcel/workers/src/child.js
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:793:17)
    at Function.Module._load (internal/modules/cjs/loader.js:686:27)
    at Module.require (internal/modules/cjs/loader.js:848:19)
    at require (./refined-github/node_modules/v8-compile-cache/v8-compile-cache.js:161:20)
    at Object.<anonymous> (./refined-github/node_modules/@svgr/parcel-plugin-svgr/lib/asset.js:3:22)
    at Module._compile (./refined-github/node_modules/v8-compile-cache/v8-compile-cache.js:194:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:991:10)
    at Module.load (internal/modules/cjs/loader.js:811:32)
    at Function.Module._load (internal/modules/cjs/loader.js:723:14)
    at Module.require (internal/modules/cjs/loader.js:848:19) falling back to RawAsset
```

## To Reproduce

```sh
npm i parcel @svgr/parcel-plugin-svgr
parcel build
```

Try on any repo. Remove `parcel-bundler` and install `parcel`
## üêõ Bug Report

SVG tranform removes the fill prop if the color is black

## To Reproduce

Use the [playground](https://react-svgr.com/playground/?native=true) and paste this:

```
<svg viewBox="0 0 180 135" id="za">
  <g id="South-African-Rand">
    <polygon fill="#002395" points="0.6 0.9 0.6 135.9 180.6 136 180.6 0.999277156" />
    <polygon fill="#DE3831" points="0.6 0.9 0.6 68.4 180.6 68.4 180.6 0.999277156" />
    <polygon fill="#000000" points="0.6 25.875 0.6 110.475 63.15 110.475 63.15 25.875" />
    <path d="M61.2875482,68.4 L0.639039756,27.9676611 L0.6,0.9 L41.2503758,0.9 L142.412452,68.4 L41.2503758,135.9 L0.6,135.9 L0.6,108.886816 L61.2875482,68.4 Z M101.85,90.9 L101.85,45.9 L180.6,45.9 L180.6,90.9 L101.85,90.9 Z" fill="#FFFFFF" fillRule="nonzero" />
    <polygon fill="#FFB612" fillRule="nonzero" points="61.2875482 68.4 0.6 28.5425781 0.6 0.9 101.85 68.5 0.6 135.9 0.6 107.5485" />
    <path d="M77.5125289,68.4 L0.566362555,17.1025558 L0.518719952,1.02192007 L25.0863868,0.999277156 L126.187471,68.4 L25.0272297,135.840161 L0.631850962,135.947776 L0.602532928,119.673331 L77.5125289,68.4 Z M101.85,81.9 L101.85,54.9 L180.6,54.9 L180.6,81.9 L101.85,81.9 Z" fill="#007A4D" fillRule="nonzero" />
  </g>
</svg>
```

## Expected behavior

Black color should stay. It doesn't:

```
import React from "react"
import Svg, { Path } from "react-native-svg"

function SvgComponent(props) {
  return (
    <Svg viewBox="0 0 180 135" {...props}>
      <Path fill="#002395" d="M.6.9v135l180 .1V1z" />
      <Path fill="#DE3831" d="M.6.9v67.5h180V1z" />
      <Path d="M.6 25.875v84.6h62.55v-84.6z" /> <---------------- BLACK MISSING HERE
      <Path
        d="M61.288 68.4L.639 27.968.6.9h40.65l101.162 67.5L41.25 135.9H.6v-27.013L61.288 68.4zm40.562 22.5v-45h78.75v45h-78.75z"
        fill="#FFF"
      />
      <Path
        fill="#FFB612"
        d="M61.288 68.4L.6 28.543V.9l101.25 67.6L.6 135.9v-28.352z"
      />
      <Path
        d="M77.513 68.4L.566 17.103.52 1.022 25.086.999 126.187 68.4l-101.16 67.44-24.395.108-.03-16.275L77.513 68.4zm24.337 13.5v-27h78.75v27h-78.75z"
        fill="#007A4D"
      />
    </Svg>
  )
}

export default SvgComponent
```

### Render in react-native
<img width="105" alt="Screenshot 2020-01-10 at 17 04 21" src="https://user-images.githubusercontent.com/48229166/72140236-43608c80-33cb-11ea-87d5-e71ce5a34626.png">

### Render on the web (without --native flag)
That works fine because svg fill on the web default to black
https://www.w3.org/TR/SVG/painting.html#FillProperty

```bash
## System:
 - OS: macOS Mojave 10.14.4
 - CPU: (8) x64 Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz
 - Memory: 75.28 MB / 16.00 GB
 - Shell: 5.3 - /bin/zsh
## Binaries:
 - Node: 12.5.0 - ~/.nvm/versions/node/v12.5.0/bin/node
 - Yarn: 1.17.3 - ~/.nvm/versions/node/v12.5.0/bin/yarn
 - npm: 6.10.3 - ~/.nvm/versions/node/v12.5.0/bin/npm
 - Watchman: 4.7.0 - /usr/local/bin/watchman
```

I created React app by using `npx create-react-app` i then run `npm run eject` to add `@svgr/webpack` follow the [docs](https://react-svgr.com/docs/webpack/) i changed webpack.config.js file to

```
{
   test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/, /\.svg$/],
     use: [{
         loader: '@svgr/webpack',
           options: {
              limit: imageInlineSizeLimit,
              name: 'static/media/[name].[hash:8].[ext]',
             }
          },
     {
          loader: 'url-loader'
     }]
},
```
**NotFoundPage** component
```
import React from 'react';
import { ReactComponent as NotFound } from '../assets/images/404.svg';
/** @jsx jsx */ import { jsx, css } from '@emotion/core';

export default function PageNotFound() {
    return <div css={{
          width: '100vw',
          height: '100vh',
          overflow: 'auto',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
     }}>
         <NotFound/>;
    </div>
}
```

It was working perfectly at the time. Day after I back run the project again and the error is shown in the command

>./src/assets/images/404.svg (./node_modules/@svgr/webpack/lib?-svgo,+titleProp,+ref!./src/assets/images/404.svg)
> TypeError: Cannot read property 'tagName' of null

Have anyone had encountered this problem? and how to fix it? **Thanks in advance!**
<!-- Love SVGR? Please consider supporting our collective: üëâ  https://opencollective.com/svgr/donate -->

## üêõ Bug Report

When using custom template, JSX syntax usage results in "Unexpected token"

## To Reproduce

1) Create custom template using JSX syntax for exmaple:
```
function template(
    { template },
    opts,
    { imports, componentName, props, jsx, exports },
) {
    return template.ast`
${imports}
function ${componentName}(${props}) {
return <div>${jsx}</div>
}
${exports}
`
}
```

2) Use the template in the config

## Expected behavior

Expected babel to transpile the JSX and continue successfully. 

## Run `npx envinfo --system --binaries --npmPackages @svgr/core,@svgr/cli,@svgr/webpack,@svgr/rollup --markdown --clipboard`

Paste the results here:

```bash
## System:
 - OS: macOS Mojave 10.14.5
 - CPU: (8) x64 Intel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz
 - Memory: 505.64 MB / 16.00 GB
 - Shell: 3.2.57 - /bin/bash
## Binaries:
 - Node: 8.10.0 - /usr/local/bin/node
 - Yarn: 1.17.3 - /usr/local/bin/yarn
 - npm: 6.13.2 - /usr/local/bin/npm
## npmPackages:
 - @svgr/webpack: 5.0.0 => 5.0.0 

```

Thanks (:
<!-- Love SVGR? Please consider supporting our collective: üëâ  https://opencollective.com/svgr/donate -->

## üöÄ Feature Proposal

support full sync API, except instead of `code` as the param a filePath

## Motivation

https://github.com/evenchange4/svgr.macro

## Example

``` js
import svgr from '@svgr/core/macro';

const Icon = svgr('my/icon.svg');

// would output

const Icon = props => <svg {..props}  />
```

## Pitch

Because most libraries that can have macros, make them
