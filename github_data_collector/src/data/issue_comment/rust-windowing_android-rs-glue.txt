Used by `cargo-flutter`.

- Makes a couple of things public
- adds support for passing additional rust flags
- `config::load` function takes a `cargo::core::Package`
- replaces `cargo::core::Target` with `BuildTarget` in `build_apks`
I developed bindings to c++ library, which widely uses global variables, which requires runtime initialization/finalization.
The library builds using clang++ from android NDK.

I have many linking errors like an `error: undefined reference to '__dso_handle'` when I build application.

I'm sure that this is common problem, but I still cannot find appropriate workaround, which can help solve this.

I guess that linker itself should use appropriate crt*.o module to deal around it but I don't know details why this is not so.
Command is failing with following message:

```
#!/bin/sh -eo pipefail
echo "$DOCKERHUB_PASSWORD" | docker login -u $DOCKERHUB_LOGIN --password-stdin
docker push $IMAGE_NAME

Error response from daemon: Get https://registry-1.docker.io/v2/: unauthorized: incorrect username or password
Exited with code 1
```

cc @tomaka 
Currently it is difficult to interact with the JNI and NDK through rust. This issue is asking for:

- A way to insert code called on the main thread at startup (In java, or preferably rust)
- A more exposed java interface for more complex calls to java code

This can be mostly covered by `android-ndk-rs` but a portion of it should probably be done here. 

This is closer to a goal than an issue.
When I migrated my project to cargo-apk from the current dev branch, I ran into this problem.

Test project:
[cargo-apk-repro-case.zip](https://github.com/rust-windowing/android-rs-glue/files/3516555/cargo-apk-repro-case.zip)

Output:
```
Compiling injected-glue for armv7-linux-androideabi
   Compiling cargo_apk_test v0.1.0 (D:\Sources\cargo_apk_test)
    Finished dev [unoptimized + debuginfo] target(s) in 1.45s
[armeabi-v7a] Compile thumb  : android_native_app_glue <= android_native_app_glue.c
[armeabi-v7a] StaticLibrary  : libandroid_native_app_glue.a
[armeabi-v7a] SharedLibrary  : libcargo_apk_test.so
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:466: error: undefined reference to 'eglGetDisplay'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:508: error: undefined reference to 'eglInitialize'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:515: error: undefined reference to 'eglMakeCurrent'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:536: error: undefined reference to 'eglQueryString'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:305: error: undefined reference to 'eglChooseConfig'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:326: error: undefined reference to 'eglCreateContext'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:403: error: undefined reference to 'eglDestroyContext'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:417: error: undefined reference to 'eglDestroySurface'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:494: error: undefined reference to 'eglGetProcAddress'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:431: error: undefined reference to 'eglGetConfigAttrib'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:445: error: undefined reference to 'eglGetCurrentContext'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:452: error: undefined reference to 'eglGetCurrentDisplay'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:459: error: undefined reference to 'eglGetCurrentSurface'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:396: error: undefined reference to 'eglCreateWindowSurface'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:347: error: undefined reference to 'eglCreatePbufferSurface'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:291: error: undefined reference to 'eglBindAPI'
D:\Sources\cargo_apk_test\target\armv7-linux-androideabi\debug\build\glutin_egl_sys-15abc7f6cc9d7d52\out/egl_bindings.rs:473: error: undefined reference to 'eglGetError'
clang++.exe: error: linker command failed with exit code 1 (use -v to see invocation)
make: *** [obj/local/armeabi-v7a/libcargo_apk_test.so] Error 1
error: process didn't exit successfully: `cmd /C D:\Android_NDK\android-ndk-r15b\build/ndk-build.cmd NDK_LIBS_OUT=./lib` (exit code: 2)
```

This was discussed a little in #223.

It would be great to rename `android_version`, `min_sdk_version`, and `target_sdk_version` to a more coherent naming scheme. Some options could be:
 * `build_sdk_version`, `min_sdk_version`, `target_sdk_version`
 * `build_android_version`, `min_android_version`, `target_android_version`
 * `android_platform`, `min_android_platform`, `target_android_platform`

However, this is very much a breaking change, so it merits some discussion.
The latest version of cargo-apk on crates.io is 0.4.0 while on GitHub it is now at 0.4.3.
While Android SDK/NDK only run in x86, Termux shell supports aapt, dx and ecj tools, which offer a lighter alternative to Android SDK/NDK.

I'm wondering why cargo-apk is calling gcc and other linkers from NDK. For it to be used easily in Termux it could rather lookup the basic tools...
This builds on top of #205, and allows users of `cargo-apk` to configure the gradle build such that it operates entirely in offline mode. Requires the user to set up a file that replaces the hard-coded jcenter() repository thingy.
