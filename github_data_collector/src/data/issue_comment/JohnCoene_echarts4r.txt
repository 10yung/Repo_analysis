Hello, John!

Many thanks for such an amazing package! May you help with this confusing issue?
I've tried to make a grouped bar plot with error bars (classical plot for statistics). But I've got unexpected results. I have no idea what parameters should I change to correct plot. 

The reproducible code is below.
![Снимок_экрана_011020_103443_PM](https://user-images.githubusercontent.com/13810479/72180950-66099a00-33f9-11ea-8a8c-37c7c9a13394.jpg)



```
library(echarts4r)
library(data.table)
library(binom)

# function for percent and CI calculation
myfun_binom <- function(n,all){
  round((binom::binom.confint(n, all, methods = "wilson", conf.level=0.95)[,c(4:6)])*100,2)
}


# prepare table
stackbar <- data.table(Year = c(2010, 2010, 2010, 2011, 2011, 2011, 2012, 2012, 2012, 2013,2013, 2013),
                       Category = c("A", "B", "C", "A", "B", "C", "A", "B", "C", "A", "B", "C"),
                       n = c(10, 20, 30, 30, 20, 10, 11,12,13, 15, 15, 15))
# calculate percent and 95% CI
stackbar <- stackbar[,`:=`(all=sum(n)), by = c("Year")][,c("perc","low","up") := myfun_binom(n,all)]

# manual spliting table for future series
series_A <- stackbar[Category == "A"]
series_B <- stackbar[Category == "B"]

# x axis category
xaxis_vec <- c(unique(paste0(series_A[["Year"]], " (N=", series_A[["all"]], ")")))


# series for barplot A
test_bar_A <- list(
  name = "A",
  type = "bar",
  #stack = stack,
  label = list(
    show = TRUE
  ),
  data = lapply(1:nrow(series_A), function(x){ 
    list(value = c(x-1, series_A[x][["perc"]]))
  })
)

# series for barplot A
test_bar_B <- list(
  name = "B",
  type = "bar",
  #stack = stack,
  label = list(
    show = TRUE
  ),
  data = lapply(1:nrow(series_B), function(x){ 
    list(value = c(x-1, series_B[x][["perc"]]))
  })
)

# series for 95% CI A
test_bar_A_CI <- list(
  name = "A",
  type = "custom",
  #stack = stack,
  label = list(
    show = FALSE
  ),
  renderItem = htmlwidgets::JS("renderErrorBar"),
  encode = list(
    x = 0,
    y = list(1, 2)
  ),
  data = lapply(1:nrow(series_A), function(x){ 
    list(value = c(x-1, series_A[x][["low"]], series_A[x][["up"]]))
  })
)

# series for 95% CI B
test_bar_B_CI <- list(
  name = "B",
  type = "custom",
  #stack = stack,
  label = list(
    show = FALSE
  ),
  renderItem = htmlwidgets::JS("renderErrorBar"),
  encode = list(
    x = 0,
    y = list(1, 2)
  ),
  data = lapply(1:nrow(series_B), function(x){ 
    list(value = c(x-1, series_B[x][["low"]], series_B[x][["up"]]))
  })
)


# collect all parametrs
opts <- list(
  legend = list(
    show = TRUE,
    top = "bottom",
    data = c('A', 'B')
  ),
  xAxis = list(
    type = "category",
    data = xaxis_vec
  ),
  yAxis = list(
    type = "value"
  ),
  series = list(test_bar_A,
                test_bar_A_CI,
                test_bar_B,
                test_bar_B_CI
  ),
  tooltip =  list(
    trigger = 'item',
    axisPointer = list(            
      type = 'shadow'
    )
  )
)


# plot chart
e_charts() %>% 
  e_list(opts)

```


Hi, Just wondering how to do conditional pipe? e.g. 

```
e_charts() %>% 
    e_list(opts) %>%
      { if(...){
      e_mark_area(
        data = list(
          list(xAxis = 15),
          list(xAxis = 29)
        ),
        itemStyle = list(opacity=0.2),
        silent = T
      )}
     }
```

at moment above code get error "must pass e"

```
opts <- list(
  grid = list(
    top = 30,
    left = "8%",
    right = "3%"
  ),
  xAxis = list(
    name = "Age in years",
    nameLocation = "center",
    nameTextStyle = list(
      fontWeight = 'bold',
      fontSize = 14,
      padding = list(15, 5, 0, 5)
    ),
    type = "value",
    min = variableMin,
    max = variableMax,
    interval = variableInterval,
    splitLine = list(
      show = F
    )
  ),
 ..... more options
)
```

I pass raw options as multiple marklines for different series (line chart), then willing to add markArea based on some conditions, e.g. add when xAxis is 0-100, not add when xAxis is 20-50

Hi

It would be great if the sunburst plots could have a depth of three instead of two.
When using `e_band` I noticed that the vertical limits of the bands are not located where they should be. Below is an example showing bands that are not properly located on the y-axis and errorbars that are in the correct location. The expectation here is that the upper limit is 6 and the lower limit is 3, which is where the errorbars end. This may be related to #44 

![image](https://user-images.githubusercontent.com/483064/67058842-d31bd500-f113-11e9-862b-93d92c5ba675.png)

I will make an attempt to help myself soon, but don't have time at the moment. Thanks for all the great packages!

```R
df <- data.frame(
    x = 1:10,
    y = 5
  ) %>% 
  dplyr::mutate(
    lwr = y - 2,
    upr = y + 1
  )
# Expectation is that upr is at 6 and lower is at 3
df %>%
  e_charts(x) %>%
  e_line(y) %>%
  e_band(lwr, upr) %>%
  e_error_bar(lwr, upr)

```

```R
> session_info()
- Session info -----------------------------------------------------------------------------
 setting  value                       
 version  R version 3.6.0 (2019-04-26)
 os       Windows 10 x64              
 system   x86_64, mingw32             
 ui       RStudio                     
 language (EN)                        
 collate  English_United States.1252  
 ctype    English_United States.1252  
 tz       America/Denver              
 date     2019-10-17                  

- Packages ---------------------------------------------------------------------------------
 package        * version    date       lib source                                                  
 echarts4r      * 0.2.3      2019-07-18 [1] CRAN (R 3.6.1) 
```


I'm trying to set a custom theme for the treemap - and I can't change the font color. For normal line charts and what not - you can edit the label color with markTextColor within e_theme_custom; but that does not work for e_treemap.

Any help would be great!
Hello! I'm trying to export my graphic generated by echarts4r to a html version, but when it's done it doesn't keep the aspect I ordered in the e_arrange.
Hallo John,

1st of all, thanks for the great work you've done in echarts4r. I just have a little curious about the output files' size. I used `htmlwidget::saveWidget(a, "a.html", selfcontained = F)` to save the bar chart. However, is it possible to reduce the file size as I found the file produced contained other chart's resources, like in the `a_files\echarts4r-4.3.2\plugins\`,  `a_files\echarts4r-4.3.2\themes\`, etc, which may not necessary for plotting the bar chart. 

This is annoying me because the files are too big and heavy, it does take very long time to load. It will be very appreciate if you can solve this.
Hello,

I would like to customize a treemap in order to use a legend for the parent level instead of the navigation bar below the graph. I only have two levels in my dataset.

I tried with the documentation example but could not find to properly use additional arguments.
```
library(echarts4r)
tm <- data.frame(
  parent = c("earth", "earth", "earth", "mars", "mars"), 
  child = c("forest", "ocean", "iceberg", "elon", "curiosity"),
  value = ceiling(rnorm(5, 10, 2))
)

tm %>% 
  e_charts() %>% 
  e_treemap(parent, child, value) %>% 
  e_title("Treemap charts")
```
I see in several native javascript code like [this one](https://echarts.apache.org/examples/zh/editor.html?c=treemap-obama) that it may be necessary to change options after rendering a first time the graph. Am I right ?

More generally, maybe I did not find it in documentation, but examples with additional arguments (and nested list I guess) would be useful !
Hello John, great package you have created, thank you!

I was trying to personalise a tooltip for a chart based on your example for the parameter trigger = 'item' on e_tooltip here:
https://echarts4r.john-coene.com/articles/tooltip.html

Here is an example of the type of chart I was fitting, where I want the tooltip to show a personalised data value whose column on the grouped data frame I added via the bind argument:

```r
set.seed(123)
iris %>% 
  as_tibble %>% 
  mutate(index = 1:nrow(.),
               eff =  sample(c(0,1), 150,
              replace = TRUE, prob = c(.9,.1))) %>%
  tibble::column_to_rownames("index") %>%
  group_by(Species) %>%   
  tibble::rownames_to_column("model") %>%
  e_charts(Sepal.Width) %>%
  e_line(Sepal.Length, bind = model) %>% 
  e_effect_scatter(Sepal.Length,  eff) %>%
  e_tooltip(trigger = 'item',
            formatter =htmlwidgets::JS("
              function(params){
                return('<strong>' + params.name + 
                       '</strong><br />Width: ' + params.value[0] + 
                       '<br /> Length: ' + params.value[1]*100) 
                        }
                  "))
```
 However, when I use trigger = 'axis' I can't manage to pass the values of the grouped variables correctly to the tooltip (the tooltip seems to turn off). 

```r
set.seed(123)
iris %>% 
  as_tibble %>% 
  mutate(index = 1:nrow(.),
               eff =  sample(c(0,1), 150,
              replace = TRUE, prob = c(.9,.1))) %>%
  tibble::column_to_rownames("index") %>%
  group_by(Species) %>%   
  tibble::rownames_to_column("model") %>%
  e_charts(Sepal.Width) %>%
  e_line(Sepal.Length, bind = model) %>% 
  e_effect_scatter(Sepal.Length,  eff) %>%
  e_tooltip(trigger = 'axis',
            formatter =htmlwidgets::JS("
              function(params){
                return('<strong>' + params.name + 
                       '</strong><br />Width: ' + params.value[0] + 
                       '<br /> Length: ' + params.value[1]*100).join(''); 
                        }
                  "))
```

Could you please explain how can I personalise the tooltip when trigger='axis' and there's grouping variables over the data?

`jsonlite` will quote the function as a string, therefore echarts will not parse it, is there any way to solve this?
```
   "yAxis":[  
      {  
         "type":"value",
         "name":"",
         "axisLabel":{  

         },
         "show":false,
         "min":"function(value) {return value.min - 200;}"
      }
```