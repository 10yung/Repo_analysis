Closes #411


# Issue Type

[x] Bug (Typo)

# Steps to Replicate

1. Examine README.md.
2. Search for `implementating`.

# Expected Behaviour

1. Should read `implementing`.


A good example on how this can be done is [c2rust](https://github.com/immunant/c2rust/). It not only converts the source, but keeps it compilable, provides the [refactoring tool](https://github.com/immunant/c2rust/tree/master/c2rust-refactor) and means to [script the refactoring](https://c2rust.com/manual/c2rust-refactor/doc/scripting_api.html) with Lua language. See their [manual](https://c2rust.com/manual/) for more information.

![image](https://user-images.githubusercontent.com/203261/66746818-7c18c480-eeb5-11e9-9fef-5dcbfe3de4ce.png)

My python code is as below
```python
def feature1(inputJsonString):
    print inputJsonString
    import json
    import sys
    print json.dumps(1)
    return sys.version
```
and the go main code is as below
```go
package main

import ... // I have imported all the package under the "$GOPATH/src/__python__" and thus "json" related libs should be imported

func main() {
    f := grumpy.NewRootFrame()
    mods, _ := grumpy.ImportModule(f, "feature1")
    fmt.Printf("mods: %v\n", mods)
    feature1, _ := grumpy.GetAttr(f, mods[0], grumpy.NewStr("feature1"), nil)
    args := f.MakeArgs(1)
    args[0] = grumpy.NewStr(`{"a": 1, "b": "I am string"}`).ToObject()
    result, err := feature1.Call(f, args, nil)
    fmt.Printf("result type: %v\n", reflect.TypeOf(result))
    fmt.Printf("result: %v\n", result.String())
    fmt.Printf("err: %v\n", err)
}
```
When I tried to run the go main code, and I got result like this
```
result: nil
err: TypeError('bad operand type for unary -: \'tuple\'',)
```
I found this error is raised from grumpy.ImportModule function in generated go code feature1.go but I am not clear how this error is raised. Also when I try to import some other python std libs like "sys", and it works fine.

My Golang version is **go1.10.3 darwin/amd64**
As titled, the newest grumpy.ImportModule function has only 2 params while the comment has not been updated. 

And ImportModule(f, "a.b") causes the initialization and entry into sys.modules of Grumpy module a and
then Grumpy module **a.b** instead of **b**. Is this a bug?
Looks like @alanjds maintains active fork of this project ~https://github.com/alanjds/grumpy~ https://github.com/grumpyhome/grumpy
Lets support him with our attention!
Changes the folders structure separating the Tools and the Runtime+Stdlib. Allows to test and publish both parts separately. The Tools are tested via `pytest`, not the Makefile.

The Tools are to be published as `grumpy-tools` package and Runtime as `grumpy-runtime` package.

TODO:
- [X] Publish-able on Python Package Index (PyPI)
- [x] Update the README
- [x] Better way to bump the version then editing files. (Maybe via `bumpversion`?)
- [x] ~Fix a `find: 'compiler': No such file or directory` Makefile warning~
Can django run on grumpy? Any tester here?
These are all libraries I added while studying the feasibility of using grumpy.
Works:
```python
import datetime
now = datetime.datetime.now()
now2 = datetime.datetime.now()
print now2-now

// Output: 0:00:00.000198
```

Does not work (contents of `hello.py`):
```python
import datetime
now = datetime.datetime.now()
print now
```

```
[u@x220 grumpy]$ grumpc -modname=hello $GOPATH/src/__python__/hello.py >     $GOPATH/src/__python__/hello/module.go
[u@x220 grumpy]$ echo 'import hello' | grumprun
NotImplementedError: conversion type not yet supported: c
```
