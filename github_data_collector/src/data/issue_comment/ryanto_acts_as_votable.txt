I have a Rails 5.2.3 app and `acts_as_votable` of `0.12.1` version.There are two problems that I faced...

- Migration does not run with the error shown as below -

```
ubuntu:~/environment/myapp (new_layout) $ rails generate acts_as_votable:migration
Running via Spring preloader in process 2422
Could not find generator 'acts_as_votable:migration'. Maybe you meant 'active_record:migration', 'acts_as_follower' or 'migration'
Run `rails generate --help` for more options.
```

- `acts_as_votable` comes undefined when added to a model(added `acts_as_votable` to `video.rb`).

```
[2.6.3 :001 > Video.new
Traceback (most recent call last):
        3: from (irb):1
        2: from app/models/video.rb:1:in `<main>'
        1: from app/models/video.rb:12:in `<class:Video>'
NameError (undefined local variable or method `acts_as_votable' for Video (call 'Video.connection' to establish a connection):Class)
Did you mean?  acts_as_taggable
2.6.3 :002 > ](url)
```

I had to manually create migration files by copying those from `lib/generators` folder which is Ok but why the second problem..not sure.
Can someone put some light on this?

Thanks in advance.
As the title says, destroying a voter does not update cached values in the votable, ie. votes by non-existent voters are still counted when looking at the votable.
Still love your gem, just a minor comment on 0.12.0 => 0.12.1 version upgrade pain points.

Before upgrading from 0.12.0 to 0.12.1 I checked the changelog at https://github.com/ryanto/acts_as_votable/releases

and corresponding pull requests
>#202 #198 Rails 6 (@BillyParadise @murny)
>#201 #200 Gem cleanup (@olleolleolle)

Failure message wasn't very helpful without checking the source code
```
Failure/Error: acts_as_votable cacheable_strategy: :update_attributes

ArgumentError:
  update_attributes
# ./app/models/entry.rb:48:in `<class:Entry>'
```

that's how I found this important commit that somehow wasn't mentioned in the changelog 
https://github.com/ryanto/acts_as_votable/commit/80d8296d5964380bb54b5441b495f4cbfd5e99b6

It doesn't feel like a patch-level version upgrade because it is not backward compatible.
The API has changed for retrieving votes, likes, dislikes, positives, negatives, etc, particularly in 0.8.0.

Update the API examples from #votes to #votes_for and the like.

(Thanks for all things `acts_as_votable` !)

Here is my web app environment:
```
Rails           : 5.2.2
acts_as_votable : 0.12.0
```

Here is the stack trace that i got:
```
…cts_as_votable-0.12.0/lib/acts_as_votable/cacheable.rb: 107:in `update_cached_votes'
…/acts_as_votable-0.12.0/lib/acts_as_votable/votable.rb: 101:in `block in vote_by'
…rd/connection_adapters/abstract/database_statements.rb: 259:in `block in transaction'
…ive_record/connection_adapters/abstract/transaction.rb: 239:in `block in within_new_transaction'
       /opt/rubies/ruby-2.4.1/lib/ruby/2.4.0/monitor.rb: 214:in `mon_synchronize'
…ive_record/connection_adapters/abstract/transaction.rb: 236:in `within_new_transaction'
…rd/connection_adapters/abstract/database_statements.rb: 259:in `transaction'
…s/activerecord-5.2.2/lib/active_record/transactions.rb: 212:in `transaction'
…/acts_as_votable-0.12.0/lib/acts_as_votable/votable.rb:  96:in `vote_by'
…...............app/controllers/api/votes_controller.rb:  24:in `create'
```

Here is the error message:
```
NoMethodError: undefined method `[]' for nil:NilClass
```
After lookin for the code, here is the part of code that throw that error https://github.com/ryanto/acts_as_votable/blob/313f06c6dc38f2a742d6e1300d3a3292d10e9d68/lib/acts_as_votable/cacheable.rb#L107
which call `acts_as_votable_options` that is assigned in https://github.com/ryanto/acts_as_votable/blob/599995f7ec5aa0f8a04312768fc956e9003d32d4/lib/acts_as_votable/extenders/votable.rb#L24-#L31
which, per my understanding will never be nil except there is another assignment. 

My model only calls `acts_as_votable` without any args so i assume it will use the default options.

Anyone can explain why this could happen?
This PR is a small refactoring that makes AAV use Rails' autoloading mechanisms to avoid using nested `require` calls.

This fixes an issue in **development** where in some situations I encountered `unitialized constant ActsAsVotable::Votable` errors due to calling `ActsAsVotable::Votable` directly in a place where Rails' hadn't already loaded a votable model, thus requiring the `acts_as_votable/votable` file.

Since the gem already depends on ActiveSupport, its autoload feature seems a good fit to allow the lazy loading provided by the original `require` calls without its drawbacks.

Note : I converted all local `require` calls to `autoload`, and created the needed parent module files (`acts_as_votable/extenders.rb` and `acts_as_votable/helpers.rb`. This is not mandatory but this way there's only one method used throughout the gem.
Update rake reference to rails and inheritance from ActionController::Base to ApplicationRecord in README
post.rb 
`acts_as_votable`

user.rb
`acts_as_voter`

The vote registers fine and doing `<%= @post.weighted_score %>` shows the correct amount as well. But when doing `<%= current_user.voted_for? @post  %>` it shows the incorrect boolean. 
Just a note for anyone using UUIDs out there, you will need to change the generated database migration to something like the example below, since `t.references :column` assumes that you are using integers.

Might be worth mentioning in the Readme, wanted to post it here in case anyone runs into this issue.

``` ruby
class ActsAsVotableMigration < ActiveRecord::Migration[4.2]
  def self.up
    create_table :votes do |t|
      t.string :votable_type
      t.string :voter_type
      t.uuid :votable_id
      t.uuid :voter_id

      t.boolean :vote_flag
      t.string :vote_scope
      t.integer :vote_weight

      t.timestamps
    end

    add_index :votes, [:voter_id, :voter_type, :vote_scope]
    add_index :votes, [:votable_id, :votable_type, :vote_scope]
  end

  def self.down
    drop_table :votes
  end
end
```


`article.cached_votes_up` 
=> 0

`10.times { Thread.new { user.likes article } }`

`article.cached_votes_up`
=> 2

`article.get_up_votes`
=> `[{votable_id: 1, voter_id: 1}, { votable_id: 1, voter_id: 1 }]`

Fix this issue please!