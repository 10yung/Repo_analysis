
Hey!

First of all, thanks for that amazing library. 👏  In our current project we have the problem that we have to extend/enhance the AuthInfo with additional information. Currently it seems not possible to do that.

As an example:
We have the case that we want to get the _audience_ query parameter from the AuthorizationRequest and make it accessible within the _createAccessToken(authInfo)_ method so we can include it in our JWT access token. The problem here is, that the createAccessToken method only takes the AuthInfo input parameter, which is a case class and built directly within the different GrantHandlers already. So there seems to be no way on how to put in additional information.

I made two proposals in two different branches that could maybe solve the issue:

1. This proposal converts the AuthInfo from a case class to a trait and provides a DefaultAuthInfo (equal to the currently existing AuthInfo) to not break the API. Diff: https://github.com/fg-devs/scala-oauth2-provider/commit/e5568b00fd5796dfab297c60ad18247b2aee9cd8
2. This proposal also converts the AuthInfo from a case class to a trait, but additionaly makes the AuthInfo typed on the DataHandler. This would make usually probably easier, but comes with the disadvantage that it breaks the API. Diff:  https://github.com/fg-devs/scala-oauth2-provider/commit/b727b90a5a03f6f50c512c7e4c6e8a1e7a4ed6b5

Please take a look at them and let me know your opinion, so that I could potentially open up a PR.
In case we are just overseeing something on how we could already achieve that with the current implementation, please let me know as well. Thanks 😉 
Hi :smile: 

Is there already any kind of support for WebSocket based actions?

I had made something like this to make it work here.

``` scala

trait OAuth2AsyncProvider2 extends OAuth2AsyncProvider {

  def authorized[A, U](dataHandler: DataHandler[U])(implicit request: RequestHeader): Future[Either[OAuthError, AuthInfo[U]]] =
    ProtectedResource.handleRequest(request, dataHandler)

}
```

Controller:

``` scala
  def liveMatch = WebSocket.async[JsValue] {
    implicit request =>
      authorized(MyDataHandler).flatMap {
        _ match {
          case Right(authInfo) => GameStream join authInfo.user
          case Left(error) =>
            // Just consume and ignore the input
            val in = Iteratee.foreach[JsValue](_ => {})
            // Send the error message and close
            val out = Enumerator[JsValue](
              JsObject(Seq("error" -> JsString(error.description)))
            ).andThen(Enumerator.enumInput(Input.EOF))
            Future.successful((in, out))
        }
      }
  }
```

If there isn't, do you plan to support it or we should just use the ProtectedResource class?

``` scala
ProtectedResource.handleRequest(request, dataHandler)
```
