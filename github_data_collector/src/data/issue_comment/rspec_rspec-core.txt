Will send a proper horde of pull requests from rspec-dev if it does.

Aimed at reproducing #2650

https://github.com/rspec/rspec-dev/pull/233
It wasn't that obvious from the docs how metadata tags and metadata hash can be combined.
### Subject of the issue
Methods that were injected via `config.extend(...)` are not defined when called within shared contexts.

### Your environment
* Ruby version: 2.6
* rspec-core version: 3.9.0

### Steps to reproduce
```ruby
module Foo
  def something
    puts 'hi'
  end
end

RSpec.configure do |config|
  config.extend(Foo)
end

RSpec.shared_context 'shared' do
  something
end
```

### Expected behavior
Prints 'hi'

### Actual behavior
`something` is undefined
### Subject of the issue
Compatibility of `shared_examples` with a ["Real" keyword argument](https://bugs.ruby-lang.org/issues/14183) from upcoming Ruby 3


### Your environment
* Ruby version: 2.7.0preview3
* rspec-core version: 3.9.0

### Steps to reproduce
```ruby
RSpec.describe 'ruby 2.7.0.preview3 warning' do
  shared_examples 'expects hash' do |hash|
    it { expect(hash[:input].reverse).to eq(hash[:output]) }
  end

  shared_examples 'expects keywords' do |input:, output:|
    it { expect(input.reverse).to eq(output) }
  end

  include_examples 'expects hash', input: 'afla', output: 'alfa'
  include_examples 'expects hash', { input: 'ovarb', output: 'bravo' }

  include_examples 'expects keywords', input: 'eilrahc', output: 'charlie' # Warning
  include_examples 'expects keywords', { input: 'atled', output: 'delta' } # Warning
end
```

### Expected behavior
- `charlie` example should not produce any warning
- `alfa` should not be supported to follow Ruby 3 changes (?)

### Actual behavior
Following warning is being printed for `charlie` and `delta` case
```
/home/wojciechko/.rbenv/versions/2.7.0-preview3/lib/ruby/gems/2.7.0/gems/rspec-core-3.9.0/lib/rspec/core/shared_example_group.rb:36: warning: The last argument is used as the keyword parameter
/home/wojciechko/dev/sample_spec.rb:6: warning: for method defined here
```

```
Run options: include {:full_description=>/AGENT::Services::CLI\ �첽������\��python������Ŀ����/}
	from D:/tools/atr/sft_tool/mingw32/lib/ruby/gems/2.3.0/gems/rspec-core-3.8.1/lib/rspec/core/world.rb:182:in `announce_filters'
	from D:/tools/atr/sft_tool/mingw32/lib/ruby/gems/2.3.0/gems/rspec-core-3.8.1/lib/rspec/core/runner.rb:99:in `setup'
	from D:/tools/atr/sft_tool/mingw32/lib/ruby/gems/2.3.0/gems/rspec-core-3.8.1/lib/rspec/core/runner.rb:86:in `run'
	from D:/tools/atr/sft_tool/mingw32/lib/ruby/gems/2.3.0/gems/rspec-core-3.8.1/lib/rspec/core/runner.rb:71:in `run'
	from D:/tools/atr/sft_tool/mingw32/lib/ruby/gems/2.3.0/gems/rspec-core-3.8.1/lib/rspec/core/runner.rb:45:in `invoke'
	from D:/tools/atr/sft_tool/mingw32/lib/ruby/gems/2.3.0/gems/rspec-core-3.8.1/exe/rspec:4:in `<top (required)>'
	from D:/tools/atr/sft_tool/mingw32/bin/rspec:23:in `load'
	from D:/tools/atr/sft_tool/mingw32/bin/rspec:23:in `<top (required)>'
	from -e:1:in `load'
	from -e:1:in `<main>'
```
```ruby
it 'should not do anything' do
  expect(did.length).to eq(1)
  do_something
  expect(did.length).to eq(1)
end
```

When this fails, I get 
```ruby
Failure/Error: expect(did.length).to eq(1)

       expected: 1
            got: 0

       (compared using ==)
```

Is there a way to know which `expect` failed? Maybe `do_something` did something it wasn't supposed to or my initial assumption is wrong. 

I'm curious if there's some `expect` failure line number option to save me the headache of trying to comment out expects and figuring out which failed. 

rspec-core 3.8.2
ruby 2.3.8p459
### Subject of the issue

While running bundler tests in ruby/ruby (currently done with Azure Pipelines running an Ubuntu job and a MacOS job), the following error appears:

```
All in rspec-core-3.8.2/lib/rspec/core/

backtrace_formatter.rb:61:in `=~': invalid byte sequence in US-ASCII (ArgumentError)
backtrace_formatter.rb:61:in `block in matches?'
core/backtrace_formatter.rb:61:in `any?'
backtrace_formatter.rb:61:in `matches?'
backtrace_formatter.rb:55:in `exclude?'
backtrace_formatter.rb:50:in `backtrace_line'
backtrace_formatter.rb:37:in `block in format_backtrace'
backtrace_formatter.rb:37:in `map'
backtrace_formatter.rb:37:in `format_backtrace'
formatters/exception_presenter.rb:58:in `formatted_cause'
```

I work with trunk/master/2.7.0 and I've never come across this error before.  Anyone have any ideas?

### Your environment
* Ruby version: master/trunk
* rspec-core version: 3.8.2

### Steps to reproduce

Run Ruby Azure Pipelines tests, the 'bundler' jobs'...

### --bisect's  ShellRunner does not properly shellescape special characters

when running `rspec --bisect` `Open3.capture2e` called at
https://github.com/rspec/rspec-core/blob/2800fe118fa2efeb87b7bdc7888476373debf6ca/lib/rspec/core/bisect/shell_runner.rb#L48 will pass the `cmd` string through to the system shell without any escaping, leading to spurious failures.

### Your environment
* Ruby version: 2.5.5
* rspec-core version: 3.8.0

### Steps to reproduce

Execute `rspec --bisect --pattern 'spec/**{,/*/**}/*_spec.rb' --exclude-pattern 'spec/{fixtures/**/*.rb,fixtures/modules/*/**/*.rb}'` with active shell backend

### Expected behavior

The provided pattern and exclude patterns should be passed through unchanged to the shelled out processes.

### Actual behavior

The provided patterns get exposed to the system shell and cause spurious failures. If I `puts cmd.inspect` just before L48 (see above) I get this:

```
"[...] --pattern spec/**{,/*/**}/*_spec.rb --exclude-pattern spec/{fixtures/**/*.rb,fixtures/modules/*/**/*.rb}"
```

and a lot of failures from the --exclude-pattern being wrong.