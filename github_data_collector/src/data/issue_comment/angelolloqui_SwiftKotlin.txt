struct User: Codable {
    var id: Int? = 0
    var name: String?
    var nick: String?
    var site: String?
}

into:

data class User: Codable(
    var id: Int? = 0,
    var name: String? = null,
    var nick: String? = null,
    var site: String? = null) {}

should be:

data class User(
    var id: Int? = 0,
    var name: String? = null,
    var nick: String? = null,
    var site: String? = null): Codable()

Adding this early before adding tests etc to get feeback; Is this a good idea or are there better ways to do it. Existing code now uses some "sealed class" that might be a better way?

Being able to init a simple enum from a raw value is very useful though, so some way of doing that is pretty important.

When pasting Java code to a Kotlin file IntelliJ will automatically translate the code into Kotlin.

It would be ideal if something similar can be created for Swift to Kotlin via Plugin. However, so far I have seen that they only accept JVM based plugins, so SwiftKotlin can not be embedded. An idea (not explored yet) is to run the tool as command line external execution, but it will introduce restrictions as it can only be run under certain operating systems (Mac and Linux), and it will require the tool installation outside the plugin somehow. 

Research if this "solution" is workable or if there are any others available that adapts better to this case.

https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started.html
This is a big epic as it will require a lot of work on top of the AST to perform type resolutions. From a very high level point of view, this will require:

1. Allow to find the declaration node of a local variable/constant: It will require to traverse the local AST and all parent siblings until it finds the declaration variable/constant node.
2. Allow to extract the type from a declaration node: If type is explicit, we can use it as resolved type. If not, then we should look me able to look at the called function/property/expression and restart the type resolution from there
3. Index all code files from a project: When the expression/function/property found in 2 is from an outer file, we should be able to find it in a previously indexed list of project files and ASTs. 
4. Include code from Foundation and other popular Swift modules to the type resolution index.

Number 1 and 2 are to some extent workable (although big work), but right now all others will require huge amounts of effort and big changes in the way the tool and the AST works. Nevertheless, if ever achieved, it could help to:

- Add `override` keywords when implementing protocol methods (required in Kotlin)
- Make proper translations of common foundation methods like `count`, `first`, etc over arrays, dictionaries,...
- Prefix enum names to the enum case and match casing (ex: replace `.present` by `Animation.PRESENT`)
- Fix primary constructors (Kotlin requires `()` pattern in the main constructor when using inheritance but only on those that are classes and not protocols, but currently the AST does not know if it is one or the other)
- .... many other subtle improvements....




Optional plugin that could transform some types:

`UIView` -> `View`
`UITextField` -> `EditText`
`UIButton` -> `Button`
`UILabel` -> `Label`
`UITableView` -> `RecyclerView`
`UIScrollView` -> `ScrollView`
`UIImageView` -> `ImageView`
...

Then, as part of the same or other plugin, we could also make use of Butterknife (http://jakewharton.github.io/butterknife/) to map `@IBOutlet` to `@BindView(R.id.<variable_name>)`  and `@IBAction` to `@OnClick()`, which is not always the event we want but most of the times.

Resulting code will be far from funcional, but of a good starting point when converting UIKIt views to Android views.


Swift:
```
guard array.count > row,
            let a = CustomView.viewFor(item: array1[column].array[row]), 
            let b = something(a) else {
                return UIView()
            }
           ...
```

Tool Return:
```
val a = CustomView.viewFor(item = array1[column].array[row])
val b = somethin(a)
if (array.size <= row || playerView == null || b == null) {
    return UIView()
}
...
```

Correct return:
```
if (array.size <= row) return UIView()
val a = CustomView.viewFor(item = array1[column].array[row]) ?: return UIView()
val b = somethin(a) ?: return UIView()
...
```
Swift:
```
            .reduce(0, +)
```
Translated:
```
            .reduce(0, +)
```
Should be translated to:
```
                .fold(0.0) { total, next ->
                    total + next
                }
```

```
        if let intent = coordinator.methodName(param1: param1, param2: param2, onComplete: {
            self.view.let { self.navigationManager.dismiss(view: $0, animated: true) }
        }) {
            navigationManager.show(intent, animation: .present)
        }
```
Translated:
```
        val intent = coordinator.methodName(param1: param1, param2: param2, onComplete = {
            this.view.val { this.navigationManager.dismiss(view = it, animated = true) }
        })
        if (intent != null) {
            navigationManager.show(intent, animation = .present)
        }

```
Correct Translate:
```
        val intent = coordinator.methodName(param1: param1, param2: param2, onComplete = {
            this.view?.let { this.navigationManager.dismiss(view = it, animated = true) }
        })
        if (intent != null) {
            navigationManager.show(intent, animation = .present)
        }

```




This Swift code:

```
switch exception {
case .qrCode(let name):
    trackCode(name: name)
default:
    trackError(name: "generic")
}
```

Translates to right now to:

```
when (exception) {
    .qrCode -> trackCode(name = name)
    else -> trackError(name = "generic")
}
```

However, the `name` variable in Swift has been decomposed from the tuple, and hence the Kotlin version should prefix its usage with the variable in the `when` expression. In this case:

```
when (exception) {
    .qrCode -> trackCode(name = exception.name)
    else -> trackError(name = "generic")
}
```