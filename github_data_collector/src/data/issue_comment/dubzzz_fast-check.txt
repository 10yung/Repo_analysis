"Combinors" => "Combinators"
Drop "of arbitraries" - these are arbitrary combinators in the Arbitraries docs, so just "Combinators"

## In a nutshell

❌ New feature
❌ Fix an issue
✔️Documentation improvement
❌ Other: *please explain*

## 🐛 Bug Report

Travis reported an issue with `webUrl` arbitrary.

## To Reproduce

Steps to reproduce: 

https://travis-ci.org/dubzzz/fast-check/jobs/638216480

```
FAIL test/unit/check/arbitrary/WebArbitrary.spec.ts (46.588s)

  ● WebArbitrary › webUrl › Should always generate correct values

    Property failed after 46 tests

    { seed: -1873263297, path: "45:0:1:1:1:1:1:1:1:1", endOnFailure: true }

    Counterexample: [[2,{}],1666243706]

    Shrunk 9 time(s)

    Got error: Error: expect(received).toBe(expected) // Object.is equality
```
## 💬 Question and Help

It isn't really clear how to use the Function arbitraries such as `compareBooleanFunc`. It would be great if some usage examples could be added to the documentation to illustrate this.
## 🐛 Bug Report

Based on the documentation, my understanding is that the `dedup` arbitrary is supposed to guarantee that the resulting tuple contains no duplicates. However, I see duplicates on every single run. The empty string `""` always shows up. Occasionally, various non-latin symbols (such as Chinese characters) show up too.

## To Reproduce

Use this `package.json`:

```json
{
  "dependencies": {
    "chai": "4.2.0",
    "fast-check": "1.21.0"
  }
}
```

Run the following script with `node test.js`:

```javascript
const { assert } = require("chai");
const fc = require("fast-check");

fc.assert(
    fc.property(fc.dedup(fc.unicodeString(), 2), vals => {
        assert.isTrue(vals[0] !== vals[1]);
    }), 
    { verbose: true },
);
```

I reproduced this with node v12.14.1 and node v10.18.1.

## Expected behavior

The above script should terminate without any output.

## Your environment

| Packages / Softwares  | Version(s)       |
| --------------------- | ---------------- |
| fast-check            | 1.21.0           |
| chai                  | 4.2.0            |
| node                  | 12.14.1, 10.18.1 |

## 🐛 Bug Report

High rate of duplicate values are generated when using `fc.tuple`. 

## To Reproduce

```js
const fc = require('fast-check');


const cases = [
	[
		fc.emailAddress(),
		'using just `fc.emailAddress() results in no duplicates'
	],

	[
		fc.tuple(fc.integer(), fc.emailAddress()).map((arr) => arr[1]),
		'using tuple with a different type (e.g. `fc.integer()`) results in no duplicates'
	],

	// This is the case where behavior seems incorrect
	[
		fc.tuple(fc.emailAddress(), fc.emailAddress()).map((arr) => arr[1]),
		'using the same type in a tuple results in duplicates at a much higher rate than one would expect'
	]
];

cases.forEach(([arb, description]) => {
	console.log(`${description}:`);

	const seenEmails = {};

	fc.check(fc.property(arb, (emailAddress) => {
		if (seenEmails[emailAddress]) {
			console.log(`\t${emailAddress}`);
		}
		seenEmails[emailAddress] = true;
	}), {
		numRuns: 1000,
		seed: -1653245226 // should also be able to replicate without providing seed
	});
	console.log();
});

```

## Expected behavior

There should be no duplicates (or at least an extremely small chance of duplicates) in the 3rd case as demonstrated above.

## Your environment

| Packages / Softwares  | Version(s) |
| --------------------- | ---------- |
| fast-check            |      1.20.1      |
| node                  |       8.11.1     |


## Why is this PR for?

Define browser version to be esm build
Final aim: no more bundle.js required for jsdelivr and others

## In a nutshell

❌ New feature
❌ Fix an issue
❌ Documentation improvement
✔️ Other: *config for jsdelivr and others*

(✔️: yes, ❌: no)

## Potential impacts

Default JavaScript file served by jsdelivr should be the ES module one
See https://www.jsdelivr.com/package/npm/fast-check
## Why is this PR for?

Support ES Modules and CommonJS
Related to #478

## In a nutshell

✔️ New feature
❌ Fix an issue
❌ Documentation improvement
❌ Other: *please explain*

(✔️: yes, ❌: no)

## Potential impacts

Under dev...
## 💡 Idea

Add troubleshooting page

## Motivation

Reference various common questions or issues

## Example

As an example:
```
node_modules/fast-check/lib/ts3.2/stream/Stream.d.ts:13:6 - error TS2585: 'Symbol' only refers to a type, but is being used as a value here. Do you need to 
change your target library? Try changing the `lib` compiler option to es2015 or later.

13     [Symbol.iterator](): IterableIterator<T>;
        ~~~~~~

node_modules/fast-check/lib/ts3.2/stream/Stream.d.ts:13:26 - error TS2304: Cannot find name 'IterableIterator'.

13     [Symbol.iterator](): IterableIterator<T>;
```

Can be solved by installing `@types/node`.

Knowing that `{}` and `Object.create(null)` are totally different objects, we need to be able to distinguish them in stringify. This will be a must have as soon as we add the ability to generate objects without any prototype 