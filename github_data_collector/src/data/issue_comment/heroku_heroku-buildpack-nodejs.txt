I have a starter application using angular 8, no bells and whistles, just ng new app using the new Angular 8 CLI. I then pushed it to Git and created a pipeline using the Heroku node build pack.

The Heroku build succeeds but when running the application using the Heroku link, it fails with the below stack trace. Can anyone help?

2020-01-17T21:26:37.849180+00:00 app[web.1]: <--- JS stacktrace --->
2020-01-17T21:26:37.849183+00:00 app[web.1]: Cannot get stack trace in GC.
2020-01-17T21:26:37.849186+00:00 app[web.1]: FATAL ERROR: MarkCompactCollector: semi-space copy, fallback in old gen Allocation failed - JavaScript heap out of memory
2020-01-17T21:26:37.849370+00:00 app[web.1]:
2020-01-17T21:26:37.867348+00:00 app[web.1]: Writing Node.js report to file: report.20200117.212637.23.0.001.json
2020-01-17T21:26:37.867350+00:00 app[web.1]: Node.js report completed
2020-01-17T21:26:37.867822+00:00 app[web.1]: 1: 0x9dab70 node::Abort() [ng serve]
2020-01-17T21:26:37.868385+00:00 app[web.1]: 2: 0x9dbd26 node::OnFatalError(char const*, char const*) [ng serve]
2020-01-17T21:26:37.868978+00:00 app[web.1]: 3: 0xb3b18e v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool) [ng serve]
2020-01-17T21:26:37.869528+00:00 app[web.1]: 4: 0xb3b509 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [ng serve]
2020-01-17T21:26:37.870157+00:00 app[web.1]: 5: 0xce68a5  [ng serve]
2020-01-17T21:26:37.870702+00:00 app[web.1]: 6: 0xd144e3 v8::internal::EvacuateNewSpaceVisitor::Visit(v8::internal::HeapObject, int) [ng serve]
2020-01-17T21:26:37.871376+00:00 app[web.1]: 7: 0xd1c3c0 void v8::internal::LiveObjectVisitor::VisitBlackObjectsNoFail<v8::internal::EvacuateNewSpaceVisitor, v8::internal::MajorNonAtomicMarkingState>(v8::internal::MemoryChunk*, v8::internal::MajorNonAtomicMarkingState*, v8::internal::EvacuateNewSpaceVisitor*, v8::internal::LiveObjectVisitor::IterationMode) [ng serve]
2020-01-17T21:26:37.872037+00:00 app[web.1]: 8: 0xd29648 v8::internal::FullEvacuator::RawEvacuatePage(v8::internal::MemoryChunk*, long*) [ng serve]
2020-01-17T21:26:37.872730+00:00 app[web.1]: 9: 0xd0dfae v8::internal::Evacuator::EvacuatePage(v8::internal::MemoryChunk*) [ng serve]
2020-01-17T21:26:37.873292+00:00 app[web.1]: 10: 0xd0e277 v8::internal::PageEvacuationTask::RunInParallel(v8::internal::ItemParallelJob::Task::Runner) [ng serve]
2020-01-17T21:26:37.873925+00:00 app[web.1]: 11: 0xd03765 v8::internal::ItemParallelJob::Task::RunInternal() [ng serve]
2020-01-17T21:26:37.874586+00:00 app[web.1]: 12: 0xd03b74 v8::internal::ItemParallelJob::Run() [ng serve]
2020-01-17T21:26:37.875157+00:00 app[web.1]: 13: 0xd1d907 void v8::internal::MarkCompactCollectorBase::CreateAndExecuteEvacuationTasks<v8::internal::FullEvacuator, v8::internal::MarkCompactCollector>(v8::internal::MarkCompactCollector*, v8::internal::ItemParallelJob*, v8::internal::MigrationObserver*, long) [ng serve]
2020-01-17T21:26:37.875793+00:00 app[web.1]: 14: 0xd2bbd4 v8::internal::MarkCompactCollector::EvacuatePagesInParallel() [ng serve]
2020-01-17T21:26:37.876403+00:00 app[web.1]: 15: 0xd2c7ea  [ng serve]
2020-01-17T21:26:37.877051+00:00 app[web.1]: 16: 0xd319d7 v8::internal::MarkCompactCollector::CollectGarbage() [ng serve]
2020-01-17T21:26:37.877663+00:00 app[web.1]: 17: 0xcf23f9 v8::internal::Heap::MarkCompact() [ng serve]
2020-01-17T21:26:37.878295+00:00 app[web.1]: 18: 0xcf3163 v8::internal::Heap::PerformGarbageCollection(v8::internal::GarbageCollector, v8::GCCallbackFlags) [ng serve]
2020-01-17T21:26:37.878945+00:00 app[web.1]: 19: 0xcf3cd5 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [ng serve]
2020-01-17T21:26:37.879579+00:00 app[web.1]: 20: 0xcf66e8 v8::internal::Heap::AllocateRawWithRetryOrFail(int, v8::internal::AllocationType, v8::internal::AllocationAlignment) [ng serve]
2020-01-17T21:26:37.880225+00:00 app[web.1]: 21: 0xcbd017 v8::internal::Factory::NewFillerObject(int, bool, v8::internal::AllocationType) [ng serve]
2020-01-17T21:26:37.880970+00:00 app[web.1]: 22: 0xff307b v8::internal::Runtime_AllocateInYoungGeneration(int, unsigned long*, v8::internal::Isolate*) [ng serve]
2020-01-17T21:26:37.881786+00:00 app[web.1]: 23: 0x1376259  [ng serve]
2020-01-17T21:26:37.912861+00:00 app[web.1]: Aborted
2020-01-17T21:26:37.916818+00:00 app[web.1]: npm ERR! code ELIFECYCLE
2020-01-17T21:26:37.917294+00:00 app[web.1]: npm ERR! errno 134
2020-01-17T21:26:37.918783+00:00 app[web.1]: npm ERR! heroku-ng8-test@0.0.0 start: `ng serve`
2020-01-17T21:26:37.919021+00:00 app[web.1]: npm ERR! Exit status 134
2020-01-17T21:26:37.919266+00:00 app[web.1]: npm ERR!
2020-01-17T21:26:37.919493+00:00 app[web.1]: npm ERR! Failed at the heroku-ng8-test@0.0.0 start script.
2020-01-17T21:26:37.919703+00:00 app[web.1]: npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
2020-01-17T21:26:37.929587+00:00 app[web.1]:
2020-01-17T21:26:37.929836+00:00 app[web.1]: npm ERR! A complete log of this run can be found in:
2020-01-17T21:26:37.930026+00:00 app[web.1]: npm ERR!     /app/.npm/_logs/2020-01-17T21_26_37_920Z-debug.log
2020-01-17T21:26:38.000301+00:00 heroku[web.1]: State changed from starting to crashed

PACKAGE.JSON

{
  "name": "heroku-ng8-test",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular-devkit/build-angular": "~0.803.23",
    "@angular/cli": "~8.3.23",
    "@angular/compiler-cli": "~8.2.14",
    "@angular/animations": "~8.2.14",
    "@angular/common": "~8.2.14",
    "@angular/compiler": "~8.2.14",
    "@angular/core": "~8.2.14",
    "@angular/forms": "~8.2.14",
    "@angular/platform-browser": "~8.2.14",
    "@angular/platform-browser-dynamic": "~8.2.14",
    "@angular/router": "~8.2.14",
    "rxjs": "~6.4.0",
    "tslib": "^1.10.0",
    "zone.js": "~0.9.1"
  },
  "devDependencies": {
    "@angular/language-service": "~8.2.14",
    "@types/node": "~8.9.4",
    "@types/jasmine": "~3.3.8",
    "@types/jasminewd2": "~2.0.3",
    "codelyzer": "^5.0.0",
    "jasmine-core": "~3.4.0",
    "jasmine-spec-reporter": "~4.2.1",
    "karma": "~4.1.0",
    "karma-chrome-launcher": "~2.2.0",
    "karma-coverage-istanbul-reporter": "~2.0.1",
    "karma-jasmine": "~2.0.1",
    "karma-jasmine-html-reporter": "^1.4.0",
    "protractor": "~5.4.0",
    "ts-node": "~7.0.0",
    "tslint": "~5.15.0",
    "typescript": "~3.5.3"
  }
}

ANGULAR.JSON

{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "heroku-ng8-test": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "style": "scss"
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/heroku-ng8-test",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.app.json",
            "aot": false,
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.scss"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
              ],
              "optimization": true,
              "outputHashing": "all",
              "sourceMap": false,
              "extractCss": true,
              "namedChunks": false,
              "aot": true,
              "extractLicenses": true,
              "vendorChunk": false,
              "buildOptimizer": true,
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "2mb",
                  "maximumError": "5mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "6kb",
                  "maximumError": "10kb"
                }
              ]
            }
          }
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "options": {
            "browserTarget": "heroku-ng8-test:build"
          },
          "configurations": {
            "production": {
              "browserTarget": "heroku-ng8-test:build:production"
            }
          }
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "browserTarget": "heroku-ng8-test:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "main": "src/test.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.spec.json",
            "karmaConfig": "karma.conf.js",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.scss"
            ],
            "scripts": []
          }
        },
        "lint": {
          "builder": "@angular-devkit/build-angular:tslint",
          "options": {
            "tsConfig": [
              "tsconfig.app.json",
              "tsconfig.spec.json",
              "e2e/tsconfig.json"
            ],
            "exclude": [
              "**/node_modules/**"
            ]
          }
        },
        "e2e": {
          "builder": "@angular-devkit/build-angular:protractor",
          "options": {
            "protractorConfig": "e2e/protractor.conf.js",
            "devServerTarget": "heroku-ng8-test:serve"
          },
          "configurations": {
            "production": {
              "devServerTarget": "heroku-ng8-test:serve:production"
            }
          }
        }
      }
    }},
  "defaultProject": "heroku-ng8-test"
}
If the SSL_CERT_FILE is set to an incorrect value, the build will be unable to download the (node, yarn, etc.) binaries. There's no message indicating the binaries can't be downloaded...  


How hard would this be?  Can anyone see any major obstacles?  I might be willing to have a crack at it.
Hi, the docs 

https://devcenter.heroku.com/changelog-items/1082
https://devcenter.heroku.com/articles/nodejs-support#cache-behavior

suggests that yarn caching works by default. My builds consistently showed however that only node_modules was being cached, which is insufficient for yarn workspaces and also inconsistent with what the docs seems to specify above.

I tried setting cacheDirectory to the output of `heroku run yarn cache dir` but alas no avail.

After much digging I found out the buildpack sets the yarn cache dir to a temporary location:
https://github.com/heroku/heroku-buildpack-nodejs/pull/459

I tried working around this by having the following in package.json:

```
    "heroku-prebuild": "export YARN_CACHE_FOLDER=/app/.cache/yarn/v4"
```

But this did not help the problem. 

What would really help would have been the following PR which was never merged:
https://github.com/heroku/heroku-buildpack-nodejs/pull/615


At Unsplash we use the popular tool [`patch-package`](https://github.com/ds300/patch-package) to apply patches to our Node modules after installation. This works in the form of a `postinstall` script.

However, this buildpack [invokes `yarn` with the `--ignore-scripts` flag when pruning dev dependencies](https://github.com/heroku/heroku-buildpack-nodejs/blob/v139/lib/dependencies.sh#L193) (since v119), which means `patch-package` will not run.

I can semi-understand why the buildpack would want to avoid invoking scripts, since the scripts were already run when `yarn` was invoked the first time, prior to building.

However, in this case we rely on scripts being invoked each time `yarn` is called, as they significantly modify the contents of `node_modules`.

It feels like we need an option to opt-in to running scripts after pruning? Perhaps `YARN_PRUNE_SCRIPTS` 🤷‍♂️ 
Seen in a customer app:

Procfile
```
not-web: node server.js
```

In this case, the buildpack will still define a `web` process that defaults to `npm start` which creates some confusion. We default to giving the created `web` process one dyno and the `not-web` process zero dynos, which the user then has to go change. In the example above, there was not a `start` script, so the created dyno would just crash with an error.

There are a couple of subtleties around this:

- If we suddenly don't add a default process when a Procfile exist, this could break users that are currently relying on this behavior without knowing it
- I need to think through the implications of changing this when multiple buildpacks are used
Hi!

For one of our projects, the durations of the nodejs buildpack part of our compile are as follows (all times are with zero changes to `yarn.lock` since the last build):
* Prior to #519: 16 seconds ([log excerpt](https://emorley.pastebin.mozilla.org/9078913))
* After #519 (and after an interim build to warm the cache with devDeps): 42 seconds ([log excerpt](https://emorley.pastebin.mozilla.org/9078914))
* After #519 and with setting `YARN_PRODUCTION=true` + interim build: 45 seconds ([log excerpt](https://emorley.pastebin.mozilla.org/9078915))

From both reading the last of the linked logs and from looking back over the PR, It seems that even with `YARN_PRODUCTION=true`, the pruning step still happens (and in our case takes quite a while - likely in part due to yarnpkg/yarn#932). 

Is this intended? I would have thought that for those installing only `dependencies` (via `YARN_PRODUCTION=true`), the prune step would not need to run at all?

Many thanks :-)
From @edmorley:

- Does `warn_missing_devdeps` in failure.sh need updating to also check for `YARN_PRODUCTION`?
- Can the `NPM_CONFIG_PRODUCTION` export now be removed from `bin/test-compile`?
- In `environment.sh`'s `list_node_config`, should the `mcount "npm-config-production-true"` also include `YARN_PRODUCTION` (or a new count be added)?
http://blog.npmjs.org/post/171139955345/v570
This would allow users to customize where they get their node binaries - such as from a local cache.

I've made a similar pull request for python [here](https://github.com/heroku/heroku-buildpack-python/pull/643) and it is also available for ruby [here](https://github.com/heroku/heroku-buildpack-ruby/pull/238).