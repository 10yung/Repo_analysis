This seems to be related to #215 and #180, but is not a pure duplicate:
I would like to be able to create an alias or shell function for accessing a certain rest API requiring authentication. I started with

    function girder {
        https --session=~/.girder_session.json girder.host.local.lan/api/v1/$1 ${@:2}
    }

but my main problem is that I cannot change the HTTP method (e.g. to PUT or PATCH) this way. I would like to be able to have a different way of specifying the default host, so that I do not have to add a commandline parsing around httpie. And I do have some hope, since httpie *already* supports a default hostname, only that it's hardcoded to be localhost.

I see two potential solutions:
1. #215 contains a small change introducing an environment variable for the default host, which would solve my issue.
2. Another idea I had (more in the line of #180) would be to make the default hostname an optional part of the sessions. Maybe that could even be made to work with named sessions, by looking into a "default" host directory: `~/.httpie/sessions/default/<name>.json`

With both solutions, the above shell function could be turned into a simple alias passing the desired `--session` parameter.
  git clone https://github.com/curl/curl-www.git
Hello!
And thanks for the great HTTP client.

I've noticed an issue with the latest release (`2.0.0`) + CPython 3.5: the Trove classifiers in `setup.py` list Python 3.5 among supported programming languages.
Furthermore, `setup.py` does not define any `python_requires` that could help `Pip` choosing the right version.

However, it seems that `httpie` has already embraced f-strings, which are unsupported on 3.5:
```
  File "<... my virtual env ...>/lib/python3.5/site-packages/httpie/core.py", line 88
    env.log_error(f'Request timed out ({parsed_args.timeout}s).')
```

FWIW, `README.rst` correctly states that 3.6+ is required. But `pip` cannot parse this info :slightly_smiling_face: 
I wanted to use https://twitter.com/rfreebern/status/1214560971185778693 with httpie, alas,

```
Â» http ðŸ‘»:6677

http: error: InvalidURL: Failed to parse: http://ðŸ‘»:6677
```

Should resolve to `http://xn--9q8h:6677`
- name: GraphQL query
  uses: helaili/github-graphql-action@1.0
First of all let me thankyou for wonderful project! It works perfectly on any platform I use.

Anyway on **Windows** (installed via `pip`), when it runs on **Git Bash** doesn't produce any output and blocks the shell. On **PowerShell** works perfectly.

System is **Windows 10**, **GitBash** is the latest at the moment of writing.

Have a nice day
Running  

```bash
http -d "https://go.microsoft.com/fwlink/?Linkid=852157"
```

to download the Visual Studio Code installer currently saves the installer as a file named `fwlink`, rather than the actual filename of the installer.

```http
HTTP/1.1 200 OK
Accept-Ranges: bytes
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: x-ms-request-id,x-ms-version,x-ms-lease-status,x-ms-blob-type
Cache-Control: max-age=31536000, public
Content-Length: 59538136
Content-MD5: vowvGl4DHKpYyO0wjSuzKw==
Content-Type: application/x-msdownload
Date: Wed, 01 Jan 2020 22:05:40 GMT
Etag: 0x8D783CCCA2392E9
Last-Modified: Wed, 18 Dec 2019 15:13:08 GMT
Server: ECAcc (cha/8115)
X-Cache: HIT
x-ms-blob-type: BlockBlob
x-ms-lease-status: unlocked
x-ms-request-id: ed893c8f-f01e-0082-37a0-b6613c000000
x-ms-version: 2009-09-19
```

```
Downloading 56.78 MB to "fwlink"
```

`httpie` should save the file as `VSCodeSetup-x64-1.41.1.exe` instead to match the filename of the final redirect, like any browser would. 

```http
HTTP/1.1 302 Moved Temporarily
Cache-Control: max-age=0, no-cache, no-store
Connection: keep-alive
Content-Length: 0
Date: Wed, 01 Jan 2020 22:10:21 GMT
Expires: Wed, 01 Jan 2020 22:10:21 GMT
Location: https://vscode-update.azurewebsites.net/latest/win32-x64/stable
Pragma: no-cache
Request-Context: appId=cid-v1:26ef1154-5995-4d24-ad78-ef0b04f11587
Server: Kestrel
Strict-Transport-Security: max-age=31536000 ; includeSubDomains
X-Powered-By: ASP.NET
X-Response-Cache-Status: True
```

```http
HTTP/1.1 301 Moved Permanently
Content-Length: 183
Content-Type: text/html; charset=UTF-8
Date: Wed, 01 Jan 2020 22:12:41 GMT
Location: https://update.code.visualstudio.com/latest/win32-x64/stable
Server: Microsoft-IIS/10.0
Set-Cookie: ARRAffinity=abe195b7d1e323bdf4f9720aca9fce9cfb2d8765df4f483aa8b94649f92969e0;Path=/;HttpOnly;Domain=vscode-update.azurewebsites.net
Strict-Transport-Security: max-age=31536000
X-Powered-By: ASP.NET
```

```http
HTTP/1.1 302 Found
Content-Length: 127
Content-Type: text/plain; charset=utf-8
Date: Wed, 01 Jan 2020 22:13:41 GMT
Location: https://az764295.vo.msecnd.net/stable/26076a4de974ead31f97692a0d32f90d735645c0/VSCodeSetup-x64-1.41.1.exe
Set-Cookie: ARRAffinity=5d10da0e40ca983507b2d5977c4a4d6507be25813895d6f7c215841f05c3dce8;Path=/;HttpOnly;Domain=update.code.visualstudio.com
Strict-Transport-Security: max-age=31536000
Vary: Accept
X-Content-Type-Options: nosniff
X-Powered-By: Express
X-Source-Commit: 5b1e6aaf6afec2feec218a378676e943da8f7885
request-context: appId=cid-v1:8109e553-6232-492a-afca-b78cea9b431c
```

```http
HTTP/1.1 302 Found
Content-Length: 127
Content-Type: text/plain; charset=utf-8
Date: Wed, 01 Jan 2020 22:13:41 GMT
Location: https://az764295.vo.msecnd.net/stable/26076a4de974ead31f97692a0d32f90d735645c0/VSCodeSetup-x64-1.41.1.exe
Set-Cookie: ARRAffinity=5d10da0e40ca983507b2d5977c4a4d6507be25813895d6f7c215841f05c3dce8;Path=/;HttpOnly;Domain=update.code.visualstudio.com
Strict-Transport-Security: max-age=31536000
Vary: Accept
X-Content-Type-Options: nosniff
X-Powered-By: Express
X-Source-Commit: 5b1e6aaf6afec2feec218a378676e943da8f7885
request-context: appId=cid-v1:8109e553-6232-492a-afca-b78cea9b431c
```

```http
HTTP/1.1 200 OK
Accept-Ranges: bytes
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: x-ms-request-id,x-ms-version,x-ms-lease-status,x-ms-blob-type
Cache-Control: max-age=31536000, public
Content-Length: 59538136
Content-MD5: vowvGl4DHKpYyO0wjSuzKw==
Content-Type: application/x-msdownload
Date: Wed, 01 Jan 2020 22:14:30 GMT
Etag: 0x8D783CCCA2392E9
Last-Modified: Wed, 18 Dec 2019 15:13:08 GMT
Server: ECAcc (cha/8115)
X-Cache: HIT
x-ms-blob-type: BlockBlob
x-ms-lease-status: unlocked
x-ms-request-id: ed893c8f-f01e-0082-37a0-b6613c000000
x-ms-version: 2009-09-19
```
In `--verbose` there are less information like TLS handshake (`curl --verbose`). Could you add more information on `--verbose` please? Thankyou. I love httpie so much, cz its full color.
```
$ TERM=xterm-256color http http://localhost:8081/api/grid-service/GridInquiryService/GridInquiry @SOAP.realtime.xml
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 921
Content-Type: text/xml;charset=ISO-8859-1
Date: Sun, 29 Dec 2019 10:07:58 GMT

<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"><soap:Body><ns4:realtimeResponse xmlns:ns4="http://rdc.com/soap/GridInquiry" xmlns:ns3="http://rdc.com/soap" xmlns:ns2="http://service.rdc.com"><return><ns2:Status><ns2:StatusCode>0</ns2:StatusCode><ns2:Severity>INFO</ns2:Severity></ns2:Status><ns2:GridInquiryStatusRec><ns2:GridInquiryId>3380</ns2:GridInquiryId><ns2:GridInquiryStatus><ns2:GridInquiryStatusCode>COMPLETE</ns2:GridInquiryStatusCode></ns2:GridInquiryStatus></ns2:GridInquiryStatusRec><ns2:GridInquiryResultsRec><ns2:GridInquiryId>3380</ns2:GridInquiryId><ns2:GridInquiryStatus><ns2:GridInquiryStatusCode>COMPLETE</ns2:GridInquiryStatusCode></ns2:GridInquiryStatus><ns2:GridInquiryReviewStatus><ns2:GridInquiryReviewStatusCode>NOMATCH</ns2:GridInquiryReviewStatusCode></ns2:GridInquiryReviewStatus></ns2:GridInquiryResultsRec></return></ns4:realtimeResponse></soap:Body></soap:Envelope>
```
![image](https://user-images.githubusercontent.com/720349/71555361-6e96c380-2a3c-11ea-8952-02878e9928e8.png)

So output even colorized. But it lack of indentation structure. It will be very cool to see said `--reformat` option (f.e. like in [highlight](https://gitlab.com/saalen/highlight)).

Consider the following request:

https --session=/tmp/c-session "https://localhost:8721/customer/business/1" Cookie:sAuth=foo6

If the server sets cookies XSRF-TOKEN and JSESSIONID, the session file will look like this:

{
    "__meta__": {
        "about": "HTTPie session file",
        "help": "https://httpie.org/doc#sessions",
        "httpie": "1.0.3"
    },
    "auth": {
        "password": null,
        "type": null,
        "username": null
    },
    "cookies": {
        "JSESSIONID": {
            "expires": null,
            "path": "/",
            "secure": true,
            "value": "091642DF767443D96E72C6FDEE561428"
        },
        "XSRF-TOKEN": {
            "expires": null,
            "path": "/",
            "secure": true,
            "value": "af6eb371-ce07-4583-bdce-efbfa09728f9"
        }
    },
    "headers": {
        "Cookie": "sAuth=foo6"
    }
}

When the request is repeated with the same session file (but without the sAuth given on the command line), the result is that only the cookie sAuth is sent, not the cookies JSESSIONID and XSRF-TOKEN:

https --verbose --session=/tmp/c-session "https://localhost:8721/apis/customer/business/1"

Request:
GET /apis/customer/business/1 HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate
Connection: keep-alive
Cookie: saamAuth=foo6
Host: localhost:8721
User-Agent: HTTPie/1.0.3

I would have expected to have all three cookies set in the request.