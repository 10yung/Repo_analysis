Hello,

I attempted to run the "MAIN_simulate.m" and "MAIN_minForceTraj.m" files in the quadRotor2d demo, but received the following error in both cases:


Index in position 1 exceeds array bounds (must not exceed 2).

Error in dynamics (line 14)
q = x(1:5,:);

Error in MAIN_simulate>@(t,z)(dynamics(z,ctrlFun(z),p))

Error in odearguments (line 90)
f0 = feval(ode,t0,y0,args{:});   % ODE15I sets args{1} to yp0.

Error in ode45 (line 115)
  odearguments(FcnHandlesUsed, solver_name, ode, tspan, y0, options, varargin);

Error in MAIN_simulate (line 29)
soln = ode45(dynFun,tSpan,z0);


I know the OptimTraj library should be compatible with any release of MATLAB, but I encountered this error using both the 2016a version and the 2018b version. Is there a change from earlier versions that might be causing this error?

Hi, 
I wrote the matlab function which calculates dynamics for an inverted pendulum and  I would like to use OtimTraj to find a Swingup Trajectory however as I run the simulation I see this warning from FMINCON : 

Your initial point x0 is not between bounds lb and ub; FMINCON
shifted x0 to strictly satisfy the bounds.

Hier is how P.x0 looks like : 
![image](https://user-images.githubusercontent.com/32224317/44955049-251c7f80-aead-11e8-81cc-f2a298d830d0.png)


and after that this warning : 
Warning: Matrix is close to singular or badly scaled. Results may
be inaccurate. RCOND =  3.066313e-18

Hier is how I set the initial conditions and boundries  : 
( as an Input I use the Cart's acceleration ! )

`clc; clear;
addpath OptimTraj

dist = 0 ;  
maxForce = 40;   
duration = 2;

problem.func.dynamics = @(t,x,u)( invPendDynamics(x,u) );
problem.func.pathObj = @(t,x,u)( u.^2 );  %Force-squared cost function

problem.boundslow = 0;
problem.bounds.initialTime.upp = 0;
problem.bounds.finalTime.low = duration;
problem.bounds.finalTime.upp = duration;

problem.bounds.initialState.low = [0;pi;0;0];
problem.bounds.initialState.upp = [0;pi;0;0];
problem.bounds.finalState.low = [0;0;0;0];
problem.bounds.finalState.upp = [0;0;0;0];

problem.bounds.state.low = [-2;-2*pi;-inf;-inf];
problem.bounds.state.upp = [2;2*pi;inf;inf];

problem.bounds.control.low = -maxForce;
problem.bounds.control.upp = maxForce;

problem.guess.time = [0,duration];
problem.guess.state = [problem.bounds.initialState.low, problem.bounds.finalState.low];
problem.guess.control = [0,0];
`
Do you know what might be causing the error ? 


Make it clear to users how to install this library.
- Add a INSTALL.md file
- Move source code into a src/ directory
- Add a simple installation script to add the library
  - include a flag to optionally install examples

There are many NLP solvers that can interface with Matlab, potentially allowing users to try to solve problems using a core solver other than FMINCON. Two possible interfaces are with Knitro and SNOPT, links below:

Knitro:
https://www.artelys.com/tools/knitro_doc/3_referenceManual/knitromatlabReference.html
https://www.artelys.com/tools/knitro_doc/1_introduction/installation.html

SNOPT
https://github.com/snopt/snopt-matlab
https://ccom.ucsd.edu/~optimizers/downloads/index.php
Is there a recommended way to cite OptimTraj in academic research? A BibTeX entry would be especially useful.

The commercial MATLAB optimal control solver GPOPS-II has been integrated into OptimTraj. It may be useful to also integrate the commercial MATLAB optimal control solvers DIDO and PROPT into OptimTraj.

DIDO: http://www.elissarglobal.com/academic/products/
PROPT: http://tomdyn.com/

ADiGator (https://sourceforge.net/projects/adigator/) is free, open-source MATLAB software that computes vectorized gradients (and even Hessians) via automatic differentiation. It was developed by the author of GPOPS-II to make it easier to supply vectorized gradients and Hessians to GPOPS-II. Perhaps ADiGator could be integrated into OptimTraj so that OptimTraj can optionally use ADiGator to generate vectorized derivatives of the optimal control functions (e.g. dynamics, path objective, etc.). This would be very useful, as it is often very difficult to manually derive and implement vectorized gradients (and Hessians).

Some of the OptimTraj methods (i.e. trapezoid, hermiteSimpson, rungeKutta) are able to exploit user-supplied gradients of the dynamics, path objective, etc. functions. Are there plans for the OptimTraj methods to also accept Hessians of these functions?

Do you plan to compute estimates of the costates and provide those with the OptimTraj solution, in addition to the states and controls? The costates can be useful if one wants to use an indirect method. Many optimal control solvers, such as the MATLAB solvers GPOPS-II, DIDO, PROPT, ICLOCS, and FALCON.m and the C++ solver PSOPT, do provide costate estimates in the solution.

GPOPS-II: http://www.gpops2.com/
DIDO: http://www.elissarglobal.com/academic/products/
PROPT: http://tomdyn.com/
ICLOCS: http://www.ee.ic.ac.uk/ICLOCS/
FALCON.m: http://www.fsd.mw.tum.de/software/falcon-m/
PSOPT: http://www.psopt.org/

The MATLAB code fminsdp: https://www.mathworks.com/matlabcentral/fileexchange/43643-fminsdp would make it really easy for OptimTraj to easily switch between several different 3rd party NLP solvers like IPOPT, SNOPT, KNITRO, and fmincon, assuming the user already has them installed. The documentation says that fminsdp is designed for small-scale optimization problems, but as long as there are no matrix inequality constraints (which is the novelty of fminsdp), fminsdp should be able to solve large-scale NLP problems (like those formulated from an optimal control problem by OptimTraj) via the third-party solvers. The fminsdp and fmincon interfaces are almost the same, so you would basically just have to replace the fmincon call in the OptimTraj code to fminsdp.
