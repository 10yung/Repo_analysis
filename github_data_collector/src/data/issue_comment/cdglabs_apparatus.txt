Once #49 is merged in, these features remain to do for full svg support:

- [ ] Add support for images. (I didn't know how to do this with the `imageCache` stuff.)
- [ ] Support css filter stuff if that's possible / important.
- [ ] Have bounds (`xMin`, `xMax`, etc in `Editor.exportSvgString`) populated in the same way that the hypothetical "artboard" feature populates the web export bounds.
- [ ] Add an export button to the UI. Also allow customization of the dpi. (Perhaps dpi is also related to web export concerns?)
Reordering variables feels so nice. Would be good to do the same for the symbols on the left hand side, as you develop similar kinds of "dependency orders" for these.

`Text` just uses the bounding box. But when I added `Image`, I included fancy hit-detection which doesn't recognizes hits from transparent parts of the image.

This seems needlessly inconsistent. Which should we use?

See how wide the vertical blue line is?

<img width="721" alt="screen shot 2016-09-26 at 4 01 57 pm" src="https://cloud.githubusercontent.com/assets/643799/18854771/9e4f76dc-8402-11e6-94e9-8103a64fb425.png">


See errors in console which occur when the `Y` expression is completed:
![screen shot 2016-02-16 at 7 51 29 pm](https://cloud.githubusercontent.com/assets/643799/13099427/ea9f1932-d4e6-11e5-85fd-eb004f59db00.png)

`Uncaught TypeError: Cannot read property 'a' of undefined` at `Matrix.coffee:26`

I've had trouble reproducing sometimes. This is unpredictable.

It looks like #43 was caused by a recursive structure which I accidentally created and then deleted, but which remains in the object network and which is still serialized along with everything else.

[This diagram](https://github.com/cdglabs/apparatus/files/71554/4.3.json.txt) isn't very complex. But for some reason, successive mouse clicks are processed over 400ms apart, so double-clicks cannot be registered. I'll poke around.

EDIT: Profiling suggests there's a big lag from serialization! Possible solutions:
- Make double-click a single event, rather than a pair of events (selection, double-click selection).
- Fix something serialization-scheduling-related.
- Check if there's some reason serialization of this particular diagram is problematic... I guess the file is unusually large...

@electronicwhisper: I wanted to play around with adding more point-like elements, so as a warm-up I added support for selecting & dragging anchor points. PTAL!

(((
Things that seemed sort of funky to me but eventually turned out to make perfect sense:
1. You still need to double-click your way down to the anchor from the path. I didn't expect this, before implementing the feature. But I should have, since it fits with Apparatus's general selection method.
2. Since anchor points are children of the parent path, their highlights will show up when the parent is highlighted. That means putting your mouse near one anchor results in all the fellow anchors being highlighted. But again, this fits with how Apparatus's visualizes single- and double-click targets: double-click targets are never visualized.

This is an interesting point to revisit: is there a good way to signify the double-click affordance?
)))

Some diagrams which used to work OK now take dozens of seconds to load. Profiling suggests that > 90% of these diagrams' render time is spent in `Attribute._value`'s call to `Attribute.circularReferencePath`, so I'm guessing this is #32's fault.

Example of a very slow drawing: [Field.json.txt](https://github.com/cdglabs/apparatus/files/54794/Field.json.txt).

I'm not sure exactly what property of a drawing makes it susceptible to this slow-down. But the Field drawing has a large spread. It makes sense that not caching the circular-reference check would cause especially big problems for drawings like that.
