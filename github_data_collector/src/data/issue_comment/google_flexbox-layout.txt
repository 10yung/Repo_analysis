Actually I'm not sure that we should do it, but I found a solution and describe it in the comment of FlexboxLayoutManager

Also, I checked that all test passed and write my own test for that solution

- [x] I have searched [existing issues](https://github.com/google/flexbox-layout/issues) and confirmed this is not a duplicate

## Issues and steps to reproduce
```
val itemDecoration = FlexboxItemDecoration(viewBinding.root.context)
itemDecoration.setDrawable(ContextCompat.getDrawable(viewBinding.root.context, R.drawable.vertical_divider))
itemDecoration.setOrientation(FlexboxItemDecoration.VERTICAL)
it.addItemDecoration(itemDecoration)
```

## Expected behavior
Can I set the divider mode, just as similar as the FlexboxLayout, we can set like below:
```
layout.showDividerVertical = FlexboxLayout.SHOW_DIVIDER_MIDDLE + FlexboxLayout.SHOW_DIVIDER_END
```

## Version of the flexbox library
*1.1.1*

## Link to code
```
val itemDecoration = FlexboxItemDecoration(viewBinding.root.context)
itemDecoration.setDrawable(ContextCompat.getDrawable(viewBinding.root.context, R.drawable.vertical_divider))
itemDecoration.setOrientation(FlexboxItemDecoration.VERTICAL)
it.addItemDecoration(itemDecoration)
```

## Issues and steps to reproduce
When I used padding or dividerDrawable on FlexBoxLayout, I used the flexBasisPercent property on the child view. The width of its child views will not meet my expectations: (parentViewGroupSize-padding-dividerDrawableSize*numberOfShownDividerDrawable) * flexBasisPercent
Its actual width calculation becomes: the parent viewGroup size * flexBasisPercent, which caused me to set the flexBasisPercent of 0.333 for each child view, it will not display three per line, but two or even one will wrap.

## Expected behavior
flexBasisPercent should consider the maximum displayable width of all child views when calculating, not just the width of the parent view, because it contains padding and dividerDrawable.

## Version of the flexbox library
2.0.0

## Link to code
    <com.google.android.flexbox.FlexboxLayout
        android:layout_width="100dp"
        android:layout_height="wrap_content"
        android:padding="30dp"
        app:flexWrap="wrap">

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            app:layout_flexBasisPercent="0.33f"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            app:layout_flexBasisPercent="0.33f"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            app:layout_flexBasisPercent="0.33f"/>
    </com.google.android.flexbox.FlexboxLayout>

or
Measurement of childMainSize in the calculateFlexLines method in the FlexboxHelper file:
childMainSize = Math.round(mainSize * flexItem.getFlexBasisPercent());
## Issues and steps to reproduce
Below you can see a screenshot of a `FlexboxLayout`, which is clipping it's children:

![Screenshot_1576202779](https://user-images.githubusercontent.com/227486/70763892-cfba6800-1da9-11ea-9dfc-d7b537653b82.png)

The layout is defined as so:

``` xml
<com.google.android.flexbox.FlexboxLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:paddingVertical="@dimen/spacing_small"
    android:paddingEnd="@dimen/spacing_normal"
    app:dividerDrawableVertical="@drawable/vertical_spaced_divider"
    app:dividerDrawableHorizontal="@drawable/horizontal_spaced_divider"
    app:flexWrap="wrap"
    app:showDividerVertical="middle"
    app:showDividerHorizontal="middle"/>
```

The dividers are implemented like so:

*vertical_spaced_divider.xml*
``` xml
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:drawable="?android:attr/listDivider"
        android:left="16dp"
        android:right="16dp" />
</layer-list>
```

*horinzontal_spaced_divider.xml*
``` xml
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item
        android:drawable="?android:attr/listDivider"
        android:top="16dp"
        android:bottom="16dp" />
</layer-list>
```

## Expected behavior
I expect the children to not be constrained horizontally, and the title text of each item stays on 1 line.

Each of the children has a width of `wrap_context`, so FlexboxLayout should be moving the item to the next line if there is not enough space.

If I remove the divider, the items are wrapped as expect.

## Version of the flexbox library
2.0.0




- [x] I have searched [existing issues](https://github.com/google/flexbox-layout/issues) and confirmed this is not a duplicate

## Issues and steps to reproduce
I don't really know what exact conditions cause this. I have a few screens and it depends on items in the list and/or device (most probably it has something to deal with dimensions of items and screen combined)
[Here is a video](https://photos.app.goo.gl/z8uEw6ShM7f3L7hs9) recording of how it behaves. As you can see it disappears while scrolling up and then appears at the very top of the screen.

It reproduces on this screen every time at the same range. One more important thing is that the screen should be scrolled to the very bottom, otherwise it does not disappears. 

But [here is another video](https://photos.app.goo.gl/2mRpCq1vGRTe4kS7A) from the different device where it disappears right after user starts scrolling.

## Expected behavior
The scrollbar handle is visible during all the scrolling duration.

## Version of the flexbox library
1.1.0 and 2.0.0

## Link to code
Layout
```xml
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/list"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:paddingStart="20dp"
        android:paddingEnd="20dp"
        android:clipToPadding="false"
        android:scrollbars="vertical"
        android:scrollbarSize="3dp"
        android:scrollbarStyle="outsideOverlay"
        android:fadeScrollbars="false"
        android:scrollbarAlwaysDrawVerticalTrack="true"
        app:layoutManager="com.google.android.flexbox.FlexboxLayoutManager"
        tools:listitem="@layout/personalization_item"
        />
```
`RecyclerView` setup:
```kotlin
        list.apply {
            setHasFixedSize(false)
            layoutManager = FlexboxLayoutManager(activity)

            adapter = mAdapter
            setPadding(paddingLeft, paddingTop, paddingRight, dip(184))
        }
```

`Adapter` and `ViewHolder`s :
```kotlin
data class Item(
        val data: PersonalizationItem,
        var isSelected: Boolean
)

class PersonalizationAdapter(
        private val checkedChangeListener: (Item) -> Unit,
        private val title: CharSequence? = null,
        private val initiator: PersonalizationActivity.Initiator
) : RecyclerView.Adapter<RecyclerView.ViewHolder>(), Filterable {

    companion object {
        private const val TYPE_TITLE = 0
        private const val TYPE_ITEM = 1
        private const val TYPE_TITLE_SIMPLE = 2
    }

    private var mData: List<Item>? = null
    private val mFilter: CustomFilter = CustomFilter(this)
    private val mFilteredList = ArrayList<Item>()

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
        return when (viewType) {
            TYPE_TITLE -> SecondaryPageAdapter.TitleViewHolder(parent, title ?: "")
            TYPE_TITLE_SIMPLE -> SimpleTitleViewHolder(parent, title ?: "")
            TYPE_ITEM -> ItemViewHolder(parent)
            else -> throw Error()
        }
    }

    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        when (holder) {
            is ItemViewHolder -> {
                val item = if (title == null) mFilteredList[position] else mFilteredList[position - 1]
                (holder as? ItemViewHolder)?.bindView(item)
            }
            else -> {}
        }
    }

    override fun getItemCount(): Int = if (title == null) mFilteredList.size else mFilteredList.size + 1

    override fun getItemViewType(position: Int): Int {
        return if (title != null && position == 0) {
            if (initiator == PersonalizationActivity.Initiator.ONBOARDING) {
                TYPE_TITLE
            } else {
                TYPE_TITLE_SIMPLE
            }
        } else TYPE_ITEM
    }

    fun swapData(data: List<Item>) {
        mData = data
        mFilteredList.clear()
        mFilteredList.addAll(data)
        notifyDataSetChanged()
    }

    fun isEmpty(): Boolean = mData?.isEmpty() ?: true

    override fun getFilter(): Filter = mFilter

    @Suppress("UNUSED_ANONYMOUS_PARAMETER")
    inner class ItemViewHolder(parent: ViewGroup) : RecyclerView.ViewHolder(parent.inflate(R.layout.personalization_item)) {
        private val mCheck: AppCompatCheckBox = itemView.findViewById(R.id.cbFollow)
        private var item: Item? = null

        init {
            mCheck.setOnCheckedChangeListener { compoundButton, checked ->
                item?.let {
                    it.isSelected = !it.isSelected
                    checkedChangeListener.invoke(it)
                }
            }
        }

        internal fun bindView(item: Item) {
            this.item = null
            mCheck.text = item.data.title
            mCheck.isChecked = item.isSelected
            this.item = item
        }

    }

    private inner class CustomFilter constructor(private val mAdapter: PersonalizationAdapter) : Filter() {

        override fun performFiltering(constraint: CharSequence): FilterResults {
            mFilteredList.clear()
            val results = FilterResults()
            if (constraint.isEmpty()) {
                mFilteredList.addAll(mData ?: emptyList())
            } else {
                val filterPattern = constraint.toString().toLowerCase().trim { it <= ' ' }
                mData?.filterTo(mFilteredList) { it.data.title.toLowerCase().contains(filterPattern) }
            }
            results.values = mFilteredList
            results.count = mFilteredList.size
            return results
        }

        override fun publishResults(constraint: CharSequence, results: FilterResults) {
            this.mAdapter.notifyDataSetChanged()
        }
    }

    class SimpleTitleViewHolder(parent: ViewGroup, title: CharSequence): RecyclerView.ViewHolder(parent.inflate(R.layout.onbording_title_item)) {
        init {
            (itemView as TextView).apply {
                @Suppress("DEPRECATION")
                text = Html.fromHtml(title.toString()).toString()
                textSizeDimen = R.dimen.personalization_list_header_text_size
                textColorResource = R.color.masterDarkGrey
            }
        }
    }
}
```

Item layout:
```xml
<?xml version="1.0" encoding="utf-8"?>
<CheckBox
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"

    android:id="@+id/cbFollow"

    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_gravity="center_vertical"
    android:layout_marginTop="16dp"
    android:layout_marginBottom="16dp"
    android:layout_marginStart="12dp"
    android:layout_marginEnd="12dp"
    android:background="@drawable/personalization_item_bg"
    android:button="@drawable/ic_checkmark"
    android:clickable="true"
    android:ellipsize="end"
    android:focusable="true"

    android:lines="1"
    android:minHeight="40dp"
    android:paddingStart="6dp"
    android:paddingTop="8dp"

    android:paddingEnd="20dp"
    android:paddingBottom="8dp"
    android:textColor="#de000000"
    android:textSize="16sp"

    tools:checked="true"
    tools:ignore="RtlSymmetry"
    tools:text="name"
    />
```
Title layout:

```xml
<?xml version="1.0" encoding="utf-8"?>
<TextView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto"

    android:textSize="23sp"
    android:textStyle="normal"
    android:textColor="@color/masterBlack"
    app:fontFamily="@font/custom_font_family"
    android:typeface="serif"

    android:layout_width="match_parent"
    android:layout_height="wrap_content"

    android:layout_marginStart="16dp"
    android:layout_marginEnd="16dp"
    android:layout_marginTop="32dp"
    android:layout_marginBottom="16dp"

    tools:text="Nesten der. Du kan også tilpasse andre lokale samfunnsinteresser"
    />
```

Sorry for such a noisy code. I can not sare a repo so I extracted some snippets that should help. 
If there is something missing please let me know in a comment.
- [x] I have searched [existing issues](https://github.com/google/flexbox-layout/issues) and confirmed this is not a duplicate

## Issues and steps to reproduce
Not sure if this is possible, I have a RecyclerView with a FlexboxLayoutManager, each view in the RecyclerView is a CardView which has a FlexboxLayout which contains a set of TextViews.  The TextViews can extend past the bottom of the screen, causing the FlexboxLayout to wrap to another column (great, expected behavior)

FlexboxLayerManager config:
```
flexboxLayoutManager = FlexboxLayoutManager(baseContext)
flexboxLayoutManager.setFlexDirection(FlexDirection.COLUMN)
flexboxLayoutManager.setFlexWrap(FlexWrap.WRAP)
flexboxLayoutManager.setJustifyContent(JustifyContent.FLEX_START)
```

When the layout _wraps_, the two columns have the same height, which can lead to lots of wasted space.  I'm wondering if there's a setting or where I would look to be able to have the second column "pin" to the height of its content, rather than matching the first column height.

<img width="760" alt="Screen Shot 2019-12-08 at 5 51 41 PM" src="https://user-images.githubusercontent.com/1540859/70398104-feb98e00-19e5-11ea-8a97-1c3ce845c293.png">
 (the lighter gray background is the parent CardView, the darker gray backgrounds are LinearLayouts (wrapping both Item with its Sub-items), those LinearLayouts are added to the CardView's FlexboxLayout.

## Expected behavior (hopeful behavior)
<img width="523" alt="Screen Shot 2019-12-08 at 6 20 30 PM" src="https://user-images.githubusercontent.com/1540859/70398261-8227af00-19e7-11ea-8a6a-e06992323963.png">

It obviously looks tough because the CardView needs to be a rectangle, but I'm hoping to be able to trim down the empty whitespace so things can fit under it like so:
<img width="523" alt="Screen Shot 2019-12-08 at 6 20 30 PM" src="https://user-images.githubusercontent.com/1540859/70400196-a1c6d380-19f7-11ea-9eb1-cd6abd2b6732.png">


## Version of the flexbox library
2.0.0

## Link to code
https://github.com/adziki/flexbox-layout-sample

## Issues and steps to reproduce
Use FlexboxLayoutManager, set FlewWrap to NOWRAP, flexShrink to 0 and add left padding to recycler view

![Screenshot_1575451249](https://user-images.githubusercontent.com/25534725/70129887-d2b5aa00-167f-11ea-9a9b-b65e9cef895b.png)

## Expected behavior
No space on top.

## Version of the flexbox library
2.0.0

## Link to code
https://github.com/Faierbel/FlexTest

Hello, I am trying to use flexbox-layout with RecyclerView to scroll list with dozens of elements (icons with text). It works mostly fine, but elements would fill the whole available space on screen, but I want to limit number of elements per row (when scroll down) or number of elements per column (when scroll to the right).

I can achieve same thing with GridLayoutManager:
~~~java
final GridLayoutManager gridLayoutManager = new GridLayoutManager(
    getApplicationContext(), 2, GridLayoutManager.HORIZONTAL, false);
recyclerView.setLayoutManager(gridLayoutManager);
~~~
but grid layout manager does not allow me to align items by center.

Can I do this with FlexBoxLaout?
Is it possible to have all children in one row to have the same width?

When I use the same flexGrow value for all children, they won't take up the same amount of space if their wrapped width is not the same.
For example: two textviews side by side with a middle divider. If one textview contains 'abc' and the other 'abcdef', then the divider isn't shown in the middle of the screen.

I don't know if there is a combination of attributes I can use to achieve this result. The expected behavior would be to grow the children in a way that they end up with an equal width, or at least grow the smallest children and leave the biggest ones as they are if there's not enough space.