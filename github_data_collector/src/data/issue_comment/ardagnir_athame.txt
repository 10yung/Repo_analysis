When you have a map like this:

`onoremap <silent> [key] :call TextObjectFunction()<CR>`

Upon typing `cw`, the text object won't be changed right away. You'll first see the :call command get typed fully in the command-line before actually going through, which adds a noticeable delay and general unexpected visual noise.

Reverting to https://github.com/ardagnir/athame/commit/474f12c19aa641f12ae25b5adfbc46de448d4c0c solves this problem.

If the behavior is not clear enough, Monday I can post a short 4 second video demonstrating what actually happens. Currently I can't due to bad internet. 
My other bindings do not work at all when using athame (like fzf or lf). I did not find anything about this in the FAQ, I'm assuming I configured it wrong (installed through AUR) or it does not support other commands with athame mode.
*This project is awesome and I feel lucky to have found this!*

I've tried various code escape sequences (plus http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes), but it seems that the cursor shape doesn't change.

I'd like to replicate my Vim behavior of having block cursor for normal mode, with line cursor for insert mode.
Although I don't entirely grasp how this works under the hood, it looks awesome! Is there any way I could use kakoune instead of vim? Would I have to modify code?
When I send something from tmux config, to just created window, it cuts off first character... 

What solves that problem (temporary fix that does not break it for people not using athame) is adding `` `` to the beggining of the line.... 
While typing, the plugins such as _zsh-autosuggestions_ and _zsh-syntax-highlighting_ do not get the memo that the line has changed. However, their hooks apply just fine when autocompleting with "tab," so I suppose it should be possible. 

I look into athame for a place where to possibly fix it. However, it is currently beyond my knowledge. If you could point me in the right direction, I will attempt to fix it.
I'm wondering if there's an easy way to specify what vimrc athame should use.

My current vimrc and athame do not play nice. On the other hand no vimrc and athame seem to get along just fine (e.g. throwing in a ATHAME_TEST_RC=1). 

I'm willing to contribute a patch if this doesn't yet exist. I would probably do so as a file list in a shell variable. For example:

`export ATHAME_VIM_RC_FILES=/home/user/config/vimrcForAthame1.vim;\
/home/user/config/vimrcForAthame2.vim`

In addition, I would probably add the following to the invocation of the vim process:

`vim --cmd "let g:athamerc=1"  -S vimbed.vim -S athamerc.... <or whatever is currently done>`

Thoughts?


Right now, multiline commands are effectively broken into separate lines by Athame. This is baked pretty deeply into how Athame works, but it would be nice to change because Vim would be especially useful for editing multiline commands.
The [prompt_toolkit](https://github.com/jonathanslenders/python-prompt-toolkit) project is getting a lot of traction and was chosen for [IPython 5.0](https://blog.jupyter.org/2016/07/08/ipython-5-0-released/).
It's written in pure, modern python so integrations should be relatively easy.

Is it possible to integrate with it?

@jonathanslenders what do you think?

Thanks!

I have the https://github.com/zsh-users/zsh-history-substring-search plugin installed. When using zsh with the athame patch the up/down no longer work with this plugin. Any idea how to solve this?

Thanks!
