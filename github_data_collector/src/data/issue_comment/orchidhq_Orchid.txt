Is it possible to change the license to ASL 2.0 and / or MIT 
Hi,
I have been trying to figure out how to include a .puml or.uml file from another file plantuml file.

I'm using the editorial theme and I have the following directory structure:
  + orchid
  ++ resources
  +++ assets
  +++ changlelog
  +++ pages
  ++++ sample.uml
  ++++ another.uml
 +++ wiki
 ++++ include-test.md

include-test.md loads the sample.uml as follows:
   {{ load('pages/sample.uml') | raw }}

Here is the sample.uml file under pages : 
@startuml
!include another.uml
@enduml


IncludeUrl works fine when pointed to URL but include with another uml file keeps giving a plantuml error of not able to include the file.

I wondered if that is something not supported yet or am I doing something wrong?

Thanks
![Screenshot from 2020-01-17 12-55-28](https://user-images.githubusercontent.com/1247549/72613922-cbddb080-3928-11ea-8320-4e015d17d406.png)



For example, the following KDoc comment

```kotlin
/**
 * ```
 * class ExampleApplication : Application {
 *     override val version: String = "1.0.0"
 *     override val name: String = "Example Kotlin Application"
 * 
 *     override fun start(vararg args: String) {
 *         for(i in 1..args.first().toInt()) {
 *             println("$i...")
 *             Thread.sleep(1000)
 *         }
 *     }
 * }
 * ```
 */
class ExampleApplication : Application {
```

results in: 

![image](https://user-images.githubusercontent.com/197274/72430031-93f03500-3791-11ea-9f72-f51d1cd9e9f5.png)

This happens regardless of the used theme.

I see that Markdown is supported:

https://orchid.run/wiki/user-manual/core-concepts/compilers

Is reStructuredText supported?

https://docutils.sourceforge.io/docs/user/rst/quickref.html
I have to admit, over the years I've come to fear software where the author talks about their plugin architecture. Usually such software is a pain in the butt to use because basic features need magic incantations to enable, and the docs are usually structured such that you have to figure it out yourself (because the "core" docs aren't supposed to talk about or link to "plugin" docs).

Plugins can make sense as a way to engineer a system but from a user's perspective they can just be confusing. For instance I discovered that in an out of the box Kotlin project with Orchid, Kotlin code isn't syntax highlighted. The regular tutorials/user guide didn't seem to mention this so I looked for a plugin, but it's half way down a list with huge pieces of stock artwork that are unrelated to the plugins themselves so it took a bit of hunting. Then I discovered there are two different ways to do syntax highlighting and I have no idea which is better. I picked PrismJS because that way I don't have to modify each page and it works. But - it would have been nice to save the five minutes and have this be configured out of the box when by context the Maven plugin can know it's in a Kotlin project! 

Or maybe you could switch to enabling all plugins by default and then let the user disable the ones they don't want, if they want to optimise the HTML download time (probably most people don't care).
**enhancement**

enable inter document xref linking with `<<>>` and `include:` tags, enhance `image: `support in _asciidoc markup_ pages for orchid 

**why**

this would enable to use already existing asciidoc content to be included in orchid sites.

**showcase**

i added a little bit asciidoc to the orchid starter project, using those tags

[https://github.com/man-at-home/OrchidStarter/blob/asciidoc-linking-showcase/src/orchid/resources/pages/asciidoc/asciidocpage.adoc](https://github.com/man-at-home/OrchidStarter/blob/asciidoc-linking-showcase/src/orchid/resources/pages/asciidoc/asciidocpage.adoc)

**solution ideas**

- usage of :outfilesuffix: attribute with asciidoc (or possibility to set attributes in orchid gradle task)
- enable include: (opt in) while processing with asciidoctor (correct unsafe mode?)
- nice to have: copy referenced images to target path

There's a lot of functionality I built custom for Orchid, but I would like to start migrating some of that stuff to libraries that could do it better and reduce the maintenance burden of Orchid. There are also a handful of Java libraries that would be nice to migrate to pure-kotlin options that are better for this project. Below is a list of the current functionality that I would like to replace:

- [ ] ASCII tables: [Krow](https://github.com/copper-leaf/krow) -> [Picnic](https://github.com/JakeWharton/picnic)
- [ ] Logging: [Clog](https://github.com/javaeden/Clog) -> [Timber](https://github.com/JakeWharton/timber)
- [ ] Event Bus: custom -> ??? (either find new library, or see if I can get similar functionality without an event bus at all)
- [ ] CLI: A pretty hacky version of the [common options](https://github.com/JavaEden/Common) -> [kotlinx.cli](https://github.com/Kotlin/kotlinx.cli)
- [ ] Options: Enable usage of delegates instead of annotations for creating options in Kotlin.
- [x] Bible verse API: [Eden](https://github.com/JavaEden/Eden) -> just implement the API calls directly within the OrchidBible plugin and drop the library entirely
- [ ] DI: [Guice](https://github.com/google/guice) -> [Koin](https://insert-koin.io/) (currently blocked due to lack of multibindings. Switch is ideal for improvements to startup performance and simpler API)
- [ ] Dev Server: [NanoHTTPD](https://github.com/NanoHttpd/nanohttpd) + custom routing framework -> [Ktor](https://github.com/ktorio/ktor) (also opens possibility of isomorphic deployment)
- [ ] Validation API: [Hibernate Validator](https://github.com/hibernate/hibernate-validator) -> ??? (is this even that useful? should we drop option validation entirely and just leave that up to the plugins when using those options?) 
- [ ] Mocking: [Mockito](https://github.com/mockito/mockito) -> [Mockk](https://github.com/mockk/mockk)
Syndication reader and management tools such as Feedbro do not find Orchid's automatically generated Atom/RSS feeds since `<link>` elements for them are missing from the site page's `<head>`. 

I fixed this by adding the following hack to `src/orchid/resources/templates/layouts/layoutBase.peb` but a more complete solution should probably take into account if and how feed generation is enabled in `config.yml`:

    <link rel="alternate" type="application/atom+xml" title="{{ site.about.siteName }} (Atom)" href="atom.xml"/>
    <link rel="alternate" type="application/rss+xml" title="{{ site.about.siteName }} (RSS)" href="rss.xml"/>

Also, perhaps it would be useful to have a clickable icon on the page allowing visitors to add the feeds.
A common use-case would be to run Node-based build pipelines for frontend assets. The current way to add assets from these pipelines to an Orchid site is to simply run them independently, but have the Node pipeline run before Orchid, so that Orchid can pick up the outputs and use them.

There should be a way to have Orchid run these pipelines as part of its own build process. I'm thinking including something like a [PublicationPipeline](https://github.com/JavaEden/Orchid/blob/dev/OrchidCore/src/main/java/com/eden/orchid/api/publication/PublicationPipeline.java) to the `AssetsGenerator`, which can be configured via `config.yml`. There could be pipeline stages for specific types of runners (gradle, NPM, yarn, etc), and it would be nice if they could "emit" output assets which get attached to pages automatically, so that the user doesn't need to manually set the output files, and so it would still work with dynamic (hashed) filenames.

Middleman's [external pipelines](https://middlemanapp.com/advanced/external-pipeline/) seem to pretty much be the same idea that I'm thinking of here, for a better understanding of what I'm thinking of for this.
A very common desire (and rarely done due to the difficulty of it) is to include snippets of code or other things in the documentation sites. This new plugin would add a standard way of registering "snippets" with Orchid that could be embedded anywhere as a TemplateTag.

Something like this was implemented already for [Strikt](https://strikt.io/), but that was very ad-hoc and crafted for that Orchid site. This would need to be a more general solution that can be very easily set up and used by anyone.

## Requirements

A new plugin, `OrchidSnippets`, with 2 ways of creating Snippets:

- As static content files (Markdown or otherwise) in the `snippets/` resource directory
- parsed as the text between comments/markers in ordinary text files in specified directories (such as from unit tests or class declarations)

## Features

- `SnippetsGenerator`: A generator that produces no pages, but indexes site resources and other directories to find available snippets
- `SnippetTag`: A TemplateTag to display an indexed snippet by its ID inline in arbitrary content
- `SnippetComponent`: An OrchidComponent to display an indexed snippet by its ID in the list of page components, in the sidebar, etc.
- This will be included in the `OrchidDocs` bundle.

## Dependencies

Nothing is blocking work from being started on this feature. It should be fairly easy to implement and would be a good candidate for someone looking to get started contributing to Orchid, as it introduces some of the main concepts around plugin creation and indexing.