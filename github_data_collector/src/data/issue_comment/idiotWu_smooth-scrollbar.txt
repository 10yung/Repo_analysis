## Environment
- Browser: IOS Safari
- Version of smooth-scrollbar: 8.5

## Issue Summary
I cannot scroll the page up and down by touching containers with horizontal smooth-scrollbar.

## Current Behavior
Cannot scroll page up and down.


## Expected Behavior
Should be able to scroll page up and down.

--
I already tried adding touch-action: pan-y to the container. It did not work.


I don't need to support older browser, my electron app is always running on latest Chrome? Any one help???

<img width="744" alt="截屏2019-11-0618 47 49" src="https://user-images.githubusercontent.com/13865581/68291986-efcd7c00-00c5-11ea-8416-30474fe201e6.png">

helllo window drag scroll function 
demo
https://www.designembraced.com/

**my  function**

`
Number.prototype.map = function(in_min, in_max, out_min, out_max) {
	return (this - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
};

let isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
	navigator.userAgent
);
const isFIREFOX = navigator.userAgent.includes("Firefox");
const firefoxMultiplier = 23;

const scrollStrength = 1;
const scrollDuration = 1;
const scrollEasing = Power3.easeOut;

const jsScroll = document.querySelector("#content-scroll");
const jsScrollContainer = document.querySelector("#scroll-container");

const scrollbar = document.querySelector("#scroll-scrollbar");
const scrollbarThumb = document.querySelector("#scroll-scrollbar-thumb");


const scrollprogressbar = document.querySelector(".progress-bar");
const scrollprogressbarel = document.querySelector(".progress-bar__el");

let scrollbarThumbHeight;
let maxDeltaY;
let deltaY = 0;

let delta = {
	y: 0,
	x: 0
};

let mouseDown = false;
let touchStart = false;
let touchPosition;

var touchStartY = false;
var _event = {
  y: 0,
  deltaY: 0
};

let HEIGHT;

let planes = [];
let curtains;
let planeElements;

function initCurtain() {
	curtains = new Curtains("canvas");
	planeElements = document.querySelectorAll(".h-work-li-over");

	planeElements.forEach((planeElement, index) => {
		let planeElementsParams = {
			vertexShaderID: "plane-vs",
			fragmentShaderID: "plane-fs",
			widthSegments: 20,
			heightSegments: 20,
			uniforms: {
				time: {
					name: "uTime",
					type: "1f",
					value: 0
				},
				multiplicator: {
					name: "uMultiplicator",
					type: "1f",
					value: 0
				},
				mousePosition: {
					name: "uMousePosition",
					type: "2f",
					value: [0, 0]
				},
				resolution: {
					name: "uResolution",
					type: "2f",
					value: [0, 0]
				},
				mouseMoveStrength: {
					name: "uMouseMoveStrength",
					type: "1f",
					value: 0
				}
			}
		};
		let plane = curtains.addPlane(planeElement, planeElementsParams);
		if (plane) {
			planes.push(plane);
			plane.uniforms.resolution.value = [
				window.devicePixelRatio * planeElement.clientWidth,
				window.devicePixelRatio * planeElement.clientHeight
			];
			planeElement.addEventListener("click", event => {
				let x = event.offsetX / planeElement.clientWidth * 1 - 1;
				let y = -(event.offsetY / planeElement.clientHeight) * 1 + 1;
				console.log(x,y)
				let tl = new TimelineMax();
				tl.to(plane.uniforms.mouseMoveStrength, 1, {
					value: 3
				});
				tl.to(plane.uniforms.mouseMoveStrength, 1, {
					value: 0
				});
				TweenMax.to(plane.uniforms.mousePosition.value, 1, {
					"0": x,
					"1": y
				});
			});
			plane.onRender(() => {
				plane.uniforms.time.value += 0.015;
			});
		}
	});
}

function init() {
	HEIGHT = jsScroll.offsetHeight;
	scrollbarThumbHeight = 100 - jsScrollContainer.offsetHeight / HEIGHT;
	maxDeltaY = -jsScrollContainer.offsetHeight + HEIGHT;
	isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
		navigator.userAgent
	);
	isMobile ? document.body.classList.add("is-mobile") : null;
	scroll();
}

function onWheel(e) {
	let delta =
		-e.deltaY *
		(isFIREFOX ? firefoxMultiplier * scrollStrength : 1 * scrollStrength);

	deltaY += delta;

	scroll(e);
}


function onTouchStart (e) {
    var t = (e.targetTouches) ? e.targetTouches[0] : e;
    deltaY = t.pageY;
	
};

function onTouchMove (e) {
	let delta =
		-e.deltaY *
		(isFIREFOX ? firefoxMultiplier * scrollStrength : 1 * scrollStrength);
		
    var t = (e.targetTouches) ? e.targetTouches[0] : e;
    delta.deltaY = (t.pageY - touchStartY) * 1;
	
	
    deltaY += t.pageY;

	scroll(e);
};




function scroll(e) {
	deltaY = Math.min(Math.max(maxDeltaY, deltaY), 0);
	TweenMax.to(delta, scrollDuration, {
		y: deltaY,
		ease: scrollEasing,
		onUpdate: () => {
			planes.forEach(plane => {
				plane.setRelativePosition(
					plane.relativeTranslation.x,
					delta.y,
					plane.relativeTranslation.z
				);
			});
		}
	});
	TweenMax.to(jsScrollContainer, scrollDuration, {
		y: deltaY,
		ease: scrollEasing
	});
	planes.forEach(plane => {
		let multiplicator = 2;
		TweenMax.to(plane.uniforms.mousePosition.value, 1, {
			"0": 0,
			"1": 0
		});
		if (plane.uniforms.mouseMoveStrength.value < 3) {
			let tl = new TimelineMax();
			tl.to(plane.uniforms.mouseMoveStrength, 1, {
				value: multiplicator
			});
			tl.to(plane.uniforms.mouseMoveStrength, 1, {
				value: 0
			});
		}
	});


	var progressPath = document.querySelector("#circle_progress");		
	var progressVisualizer = document.querySelector(".progressVisualizer div");


	let maxThumbDeltaY = HEIGHT - scrollbarThumb.offsetHeight;
	let thumbDeltaY = maxThumbDeltaY - deltaY.map(maxDeltaY, 0, 0, maxThumbDeltaY);
	thumbDeltaY = Math.min(Math.max(0, thumbDeltaY), maxThumbDeltaY);



						var progress = thumbDeltaY / maxThumbDeltaY;	
						/*var perc = 158 * s.offset.y / s.limit.y;
						var percCircle = 158 - perc;		
		progressPath.style.strokeDashoffset = percCircle; */
		progressVisualizer.style.transform = "translate3d(0px,0px,0px) scaleY(" + progress + ")";
		scrollprogressbarel.style.transform = "translate3d(0px,0px,0px) scaleY(" + progress + ")";


}






jsScroll.addEventListener("wheel", onWheel);
  jsScroll.addEventListener('touchstart', onTouchStart, { passive: false });
  jsScroll.addEventListener('touchmove', onTouchMove, { passive: false });


window.addEventListener("resize", init);






window.addEventListener("DOMContentLoaded", function() {
	init();
	initCurtain();
});`
<!-- Provide a general summary of the issue in the Title above -->
## Environment
- Browser:
- Version of smooth-scrollbar:

## Issue Summary
<!-- A summary of the issue and the browser/OS environment in which it occurs.  -->

## Current Behavior
<!-- If describing a bug, tell me what happens instead of the expected behavior -->


## Expected Behavior
<!-- If you're describing a bug, tell me what should happen -->
<!-- If you're suggesting a change/improvement, tell me how it should work -->

## Steps to Reproduce
<!-- Tell me how it happened -->

## Online demo
<!--
  Create an example on codepan.net:
    1. Open https://codepan.net/gist/4653b46f9e2d4c2f3585cebc1828859d
    2. Modify the code as you want
    3. Click "..." on the top right
    4. Click "Save Anonymous Gist" (or "Save New Gist" if you've logged in)
    5. Copy and paste the URL here
-->

<!-- Provide a general summary of the issue in the Title above -->
## Environment
- Browser: all
- Version of smooth-scrollbar: 8.4.1

## Issue Summary
When searching (ctrl+F) in the page and an item is found no scroll action is performed

## Expected Behavior
The scrolling container scrolls to the found element


 
Chrome
Latest version 

## Issue Summary
 scrollbar.update() return undefined..

We need update scrollbar after lazy load of images
## Environment
- Browser: latest chrome
- Version of smooth-scrollbar: latest

## Issue Summary
the call of getSize() function will cause forced reflow.

## Current Behavior

<img width="470" alt="截屏2019-10-0900 57 13" src="https://user-images.githubusercontent.com/13865581/66416132-c3273580-ea2f-11e9-9a00-6a470b1e98ef.png">
<img width="1135" alt="截屏2019-10-0900 58 23" src="https://user-images.githubusercontent.com/13865581/66416226-ed78f300-ea2f-11e9-8d6b-aac6ffdf81bb.png">
<img width="475" alt="截屏2019-10-0900 53 48" src="https://user-images.githubusercontent.com/13865581/66416078-a25ee000-ea2f-11e9-8609-70e777c0e143.png">
After implementing the smooth-scrollbar on the website, Goggle Chrome default Print is not able to print whole web page. It is just printing the displayed area. Please have a look on the following URL and try to print page in Google Chrome

https://idiotwu.github.io/smooth-scrollbar/
Modern browser has include form verifying mechanism. In simple words you can mark input as required and browser will show message near it when it left empty when user try to submit form. Problem happens when form is longer than screen height and invalid input is not seen. Browser try to scroll page to show input but smooth-scrollbar not handle it. Also similar situation happens when I use built-in search (Ctrl+F or F3) in browser on page with smooth-scrollbar. Is it possible to handle this kind of system scroll events on smooth-scrollbar?
**对于延时渲染的滚动列表**，当列表滚动到中间或者底部的时候，鼠标拖动复制文字，当鼠标移出可视边界的时候，会出现滚动到底部的问题，代码截图
![image](https://user-images.githubusercontent.com/31148395/65030332-ed765d80-d971-11e9-89ff-dd950a9b4f1e.png)

问题截图
![ta0r9-0wvpi](https://user-images.githubusercontent.com/31148395/65031820-8908cd80-d974-11e9-8fdb-fa6f0ad31ec2.gif)






