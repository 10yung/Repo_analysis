The API for SealingKey and OpeningKey changed to have these structs
manage their own nonces. Instead we switch to LessSafeKey so that we can
continue to manually manage nonce values.

Benchmark results before and after are well within the expected variance, at least on my computer.
This PR experiments with replacing the internal BLAKE2s implementation with the `blake2s_simd` crate. The throughput of the `bench_blake2s_hash_1024b` benchmark improves by 15% on my machine. (A larger improvement is possible using AVX-512, but those intrinsics aren't stable yet.) I expect boringtun prefers to maintain its own implementation rather than take a relatively large dependency, but this PR could be a point of comparison if someone wants to optimize the internal implementation in the future.

One behavioral difference in this PR is that the last 16 bytes of output in the `new_mac` case are zeros, rather than the untrucated state words. I believe all `new_mac` callers are ignoring those trailing bytes, as they should, but I could have missed one. Changing the return type of `finalize` to something based on `ArrayVec` (like `blake2s_simd::Hash`) could make this sort of thing safer.
Hi Guys, working on MAC OSX 10.14.5 and trying to compile I get the following errors. I'm working on the master branch.

Any ideas?

Cargo version: cargo 1.39.0 (1c6ec66d5 2019-09-30)
Installed rust using rustup-init.

`[~/boringtun]: cargo build --bin boringtun --release --target "armv7-unknown-linux-gnueabihf"`

```
   Compiling autocfg v0.1.6
   Compiling libc v0.2.62
   Compiling byteorder v1.3.2
   Compiling bitflags v1.1.0
   Compiling unicode-width v0.1.6
   Compiling safemem v0.3.2
   Compiling boxfnonce v0.1.1
   Compiling strsim v0.8.0
error[E0463]: can't find crate for `core`
  |
  = note: the `armv7-unknown-linux-gnueabihf` target may not be installed

error: aborting due to previous error

For more information about this error, try `rustc --explain E0463`.
error: could not compile `unicode-width`.
warning: build failed, waiting for other jobs to finish...
error[E0463]: can't find crate for `std`
  |
  = note: the `armv7-unknown-linux-gnueabihf` target may not be installed

error[E0463]: can't find crate for `std`
  |
  = note: the `armv7-unknown-linux-gnueabihf` target may not be installed

error[E0463]: can't find crate for `std`
  |
  = note: the `armv7-unknown-linux-gnueabihf` target may not be installed

error: aborting due to previous error

For more information about this error, try `rustc --explain E0463`.
error: aborting due to previous error

For more information about this error, try `rustc --explain E0463`.
error: aborting due to previous error

For more information about this error, try `rustc --explain E0463`.
error: could not compile `boxfnonce`.
warning: build failed, waiting for other jobs to finish...
error: could not compile `strsim`.
warning: build failed, waiting for other jobs to finish...
error: could not compile `safemem`.
warning: build failed, waiting for other jobs to finish...
error: build failed
```
run `cargo install boringtun` produce the following output:

```
   Compiling chrono v0.4.9
   Compiling boringtun v0.2.0
error[E0308]: mismatched types
  --> /root/.cargo/registry/src/github.com-1ecc6299db9ec823/boringtun-0.2.0/src/device/tun_linux.rs:77:29
   |
77 |                 ifru_flags: IFF_TUN | IFF_NO_PI | IFF_MULTI_QUEUE,
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected i16, found i32

error: aborting due to previous error

For more information about this error, try `rustc --explain E0308`.
error: failed to compile `boringtun v0.2.0`, intermediate artifacts can be found at `/tmp/cargo-installRDLTdM`

Caused by:
  Could not compile `boringtun`.


```

Any hint on what's going on?
I found this weird bug where when I add 0.0.0.0/0 to my allowedIPs on one of my peers the wireguard connection on the peer drops and is unrecoverable as far as I know. Bringing the wg interface down and up again does't work, I have to reboot the whole device.

My setup: 
I have borintun running inside a Docker container on a balena device and start it with:
`WG_QUICK_USERSPACE_IMPLEMENTATION=boringtun WG_SUDO=1 wg-quick up wg0`

After trying for a while to see why this is happening I switched to:
`WG_QUICK_USERSPACE_IMPLEMENTATION=wireguard-go  WG_SUDO=1 wg-quick up wg0`

and it is working just fine.

I still couldn't find out what exactly is causing this behaviour.

Please let me know how I can help to resolve this bug, because I would prefer using boringtun.


Is it maintained? Is it recommended for real usage or only for testing?

> NOTE: This crate is still undergoing review for security concerns. Therefore, we recommend that you take caution before using it in a production application.

Is the review still going on, abandoned or complete? What is the result?
It would be great if you could add some performance stats for boringtun. I would be also interested in comparison with the kernel-space implementation and wireguard-go. 
**
when i run root
./boringtun -f wg0
Failed to drop privileges: DropPrivileges("Failed to permanently drop privileges")

It hava a error message 
**

While trying to create a docker image using cargo install, compilation failed at

```
error[E0308]: mismatched types
  --> /root/.cargo/registry/src/github.com-1ecc6299db9ec823/boringtun-0.2.0/src/device/tun_linux.rs:77:29
   |
77 |                 ifru_flags: IFF_TUN | IFF_NO_PI | IFF_MULTI_QUEUE,
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected i16, found i32
```
Ubuntu bionic
cargo 1.35.0
rustc 1.35.0