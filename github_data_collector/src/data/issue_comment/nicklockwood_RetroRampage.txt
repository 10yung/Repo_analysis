This PR demonstrates how to add a platform layer for macOS.

The Engine module itself remains exactly the same. The only changes are in the platform-specific parts, such as integration with AppKit, and replacing touch controls with keyboard input.

Resolution is capped to 480px vertical as performance drops sharply at higher resolutions.

Use arrows to move and space to fire.
This PR demonstrates how to split the rendering load across multiple threads.

The renderer automatically selects the number of threads according the the processor count of the device, which should be at least 2 on any modern iPhone, so I was expecting a ~2X performance boost, but in practice the improvement seems pretty small.

This PR demonstrates how to implement GPU-accelerated rendering using Core Animation. This allows the game to be rendered at full display resolution, and with much better performance.

The renderer uses a CALayer pool as a simple optimization to avoid churning the view hierarchy each frame. There are opportunities for further optimizations however, for example:

* The map never changes, so the layers for walls and floor could just be generated once.
* Currently, layers are generated for every wall and floor/ceiling tile in the map, but we could use raycasting to determine the visible set of tiles and only render those.

I haven't bothered to implement fizzlefade currently. It's not clear what the most efficient way to draw a fizzle effect would be in Core Animation, but if all else fails you could just use Core Graphics.
This PR demonstrates how to save and restore the current state of the world when closing and opening the game.