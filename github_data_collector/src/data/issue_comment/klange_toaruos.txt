Hello bro. Your boot loader only works in the BIOS environment. It doesn't work with EFI. These codes from moremultiboot.h: #ifdef EFI_PLATFORM
print _ ("\ nExiting boot services and jumping to");
print_hex _ (_ x DOMAIN);
print_ ("with mboot_mag =");
print_hex _ (_ eax);
print_ ("and mboot_ptr =");
print_hex _ (_ ebx);
_ print ( "... \ n");
The window stays open, but you can't close or move it. It stays visible after logging out and is not in the list if you run ps

This PR adds the Group ID feature to processes on the system. This addition enables checking group permissions through the [`has_permissions()`](https://github.com/klange/toaruos/blob/master/kernel/fs/vfs.c#L44) function.

In addition to adding the group ID field to the process structure, the following changes are included with this PR:

* `spawn_init()` has been updated to initialize the GID. Similarly, `spawn_process()` has been updated to inherit the GID from the parent.

* System calls for setting and getting the process GID have been implemented.

* The `chown` command has been updated to appropriately submit the current `gid` instead of the process's `uid` in its place.

* The `chgrp` command has been added. It is basically identical to the `chown` command implementation except it operates on changing the GID.

* The `procfs` module's `status` function has been updated to show the process GID.

* The `has_permissions()` function has been updated to check the GID.

**Testing**

I didn't see a folder for test programs so I wasn't sure if it was appropriate to even add one in this PR.

I tested this manually with `make headless` and a small toy program that would set the process GID using the `getgid()` and `setgid()` system calls. I ran this as a background process and then checked `/proc/pid/status` to verify the new GID was there.

**Remarks**

To the best of my knowledge I believe this PR is complete. I'm still getting familiar with the code base so any feedback on whether this change is incomplete, unnecessary, unwanted, etc, is greatly appreciated.
- [ ] `genext2fs` - which has always been annoying for a lot of users. Either with our own ext2 filesystem generator (which would help improve / fix our ext2 write support) or with our own in-house filesystem. *How about tar?*
- [ ] `xorriso` - ISO9660 isn't too complicated - we already read it - but the integrated FAT stuff is a bit trickier. Ideally, we can kill two birds with one stone and replace `xorriso` and `mtools` with a "hybrid ISO-FAT generator".
- [ ] `mtools` - see above
- [ ] `make` - more of a long-term goal
- [ ] `python` - easy enough to replace the handful of scripts with a C tool we compile locally
- [ ] `gnu-efi` - mostly headers
- [ ] GNU `ld` - we have all the parts we need to write a linker, between the kernel and ld.so...
- [ ] GNU `as` - see the `toaru-cc` project
- [ ] `gcc` - see the `toaru-cc` project
In order to support installing to new media, we need a tool to initialize ext2 partitions.
In order to support the EFI system partition, a FAT driver should be implemented, as should tools to create new FAT partitions.
With our use of EFI, GPT is probably the right way to go for partition table support moving forward.

- [ ] GPT partition module
- [ ] GPT partition creation tools
The ext2 driver has been rather unstable since it first gained write support. Currently, I believe the biggest problems relate to creating new directory entries, as well as removing existing ones. Cleaning up the directory entry code is likely to be the biggest win here.
As a step towards making it easier to self-host with only gcc as a dependency, replacing ext2 for ramdisks with a tarfs would make things much smoother.

- Implement a tar fs
- Implement a tar archive creator / extractor