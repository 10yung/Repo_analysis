I use comment

is possible store comment in data? i read yajl and stored with this same comment in this same place
Support as_json so we can change Rails' json implementation and this
method is required. Yajl used to not support as_json because there was
an infinite loop, but here if the object returns from as_json is not the
one that we called as_json on then we dump that.

cc/ @tenderlove @brianmario 

Trying to parse large json files using yajl.

The code is working great in my local system. But when deployed in production I am getting 400 HTTP bad request. The file is coming from amazon s3.

Not sure of the exact issue here. Is it because of some authentication or wrong credentials?

Code:
```
require 'yajl'
require 'yajl/deflate'
require 'yajl/http_stream'
require 'uri'

uri = URI.parse(<amazon s3 link>)
hash = Yajl::HttpStream.get(uri, { headers: {"Content-Type" => "application/json", "Accept" => "application/json"}}) 
```

Error:
```
Yajl::ParseError: lexical error: invalid char in json text.
          "2018-01-08T16:04:38Z"   } ] HTTP/1.1 400 Bad Request  Date:
                     (right here) ------^
```

Any help would be appreciated.
I was a rspec fan for years, but that time has since passed ;)

This also brings in a couple of conventions I enjoy elsewhere like `script/test` and `script/cibuild`. The travis config has been updated to use `script/cibuild`, which now runs both the rspec and minitest suites.

For the moment, I've only moved a single rspec spec file over to minitest to prove out this approach. In an attempt to keep these small, I'm planning on merging this and opening more smaller pulls as I port more of the tests over until they're fully on minitest.
Changelog has nothing since 1.1.0 in 2011 â€” it's missing 1.2.0, 1.2.1, 1.2.2, 1.2.3, 1.3.0 and 1.3.1.
Why the archive streaming support will be deprecated in 2.0?

See https://github.com/brianmario/yajl-ruby/blob/master/CHANGELOG.md#100-september-13th-2011
`assert` is used for debug purposes and should not be used for code that is intended to be used in production
While building the package, seen this warning from the compiler.

yajl_ext.c: In function 'rb_yajl_parser_parse':
yajl_ext.c:471:17: warning: variable 'stat' set but not used [-Wunused-but-set-variable]
     yajl_status stat;

Probably not harming but also seems to be safe and easy to fix.
Hi,

I have the following case:

```ruby
require 'yajl'

valid_json = '{"1":{"11":11,"12":12}}'

invalid_json1 = valid_json.sub('":12}}', '')
# => {"1":{"11":11,"12
Yajl::Parser.parse(invalid_json1)
# => {"11"=>11}

invalid_json2 = valid_json.sub(':12}}', '')
# => {"1":{"11":11,"12"
Yajl::Parser.parse(invalid_json2)
# => "12"

require 'yajl/version'
Yajl::VERSION
# => "1.3.0"
```
In my opinion, this is really a strange behavior.

Can we check whether JSON is valid and if not, then raise an exception?