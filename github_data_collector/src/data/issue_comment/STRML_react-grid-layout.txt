I tried changing heights in CSS but It seems some internal problem

[![Run on Repl.it](https://repl.it/badge/github/faizhameed/leadbox-aug)](https://repl.it/github/faizhameed/leadbox-aug)
This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).
```
Warning: Failed prop type: minHeight larger than item height/maxHeight
    in GridItem (created by ReactGridLayout)
    in ReactGridLayout (created by ResponsiveReactGridLayout)
    in ResponsiveReactGridLayout (created by WidthProvider)
    in WidthProvider (at table-large.jsx:24)
    in CSSTransitionGroupChild (created by TransitionGroup)
    in span (created by TransitionGroup)
    in TransitionGroup (created by CSSTransitionGroup)
    in CSSTransitionGroup (at table-large.jsx:15)
    in TableLarge (at table-leadbox.component.jsx:50)
    in div (at table-leadbox.component.jsx:58)
    in TableLeadBox (at lead-box-container.component.jsx:24)
    in div (at lead-box-container.component.jsx:15)
    in div (at lead-box-container.component.jsx:13)
    in div (at lead-box-container.component.jsx:12)
    in LeadBoxContainer (at App.js:18)
    in div (at App.js:11)
    in App (created by ConnectFunction)
    in ConnectFunction (at src/index.js:11)
    in Provider (at src/index.js:10)
```
MY applications is very huge Check Repl.it  yarn install and yarn start 
and then click on 'L' as show in the image  [button](https://i.gyazo.com/020153e21544652a032b7008c8fd43ce.png)
I have hosted this in heroku [here](https://leadbox.herokuapp.com/)

feat(render): Add shouldComponentUpdate to ReactGridLayout & GridItem.

This improves performance quite a bit in most cases, is implemented safely
to avoid breakage on equal arrays and objects.

To do so, while avoiding the maintenance burden of keeping a keylist
in sync with propTypes, we read propTypes using babel-plugin-preval
then construct a function to do the fastest possible comparison.

This is *a lot* faster than isEqual while avoiding unnecessary
comparison of e.g. `children`.

Supersedes #1032 - pinging @zaykaalexander.
Colleagues, I want to note that the new version has ceased to support previously announced functionality (v0.16.6). In particular, it does not recount ResponsiveGridLayout when updating columns:

https://codesandbox.io/s/polished-https-v9sb5
Please only submit bugs to this tracker. If you have a feature request, please implement it. This is free software and the author is busy with other projects.

Please use the [CodeSandbox Template](https://codesandbox.io/s/5wy3rz5z1x?module=%2Fsrc%2FShowcaseLayout.js) to demonstrate your bug. It is much easier for us to help you if you do.
[screenshot.zip](https://github.com/STRML/react-grid-layout/files/4052850/screenshot.zip)



May I know if it is possible to expand and shrink the components from all sides and corners just like gridster2?
Please take a look at Gridster2 demo as reference on how it can be achieved. (Demo link below)
[Angular Gridster2 Demo](https://tiberiuzuld.github.io/angular-gridster2/)


Hi there,

I am trying to implement a multi selection feature for RGL. However, I believe there isn't an easy way to do that without making relatively significant changes to the package.  Alternatively, nested Grid would work, but I'd have to generate new absolute grid item values for the child grid and then convert it back after deselection.

Before I move into that direction, can anybody suggest anything else? We'd love to have your input.
Hello,

Thanks for creating and maintaining this awesome repo. I am trying to add and remove custom classNames during some drag conditions, however <element>.classlist.add function or any other such as remove, toggle do not fire when passed to onDragStart prop of GridLayout Component.

I have tried to test this function with other available event props too such as onDrag, onDragStop and there are not any problems with them.

You can find the example code below;
https://codesandbox.io/s/ondragstart-example-ptdi5?fontsize=14&hidenavigation=1&theme=dark

Thanks for your time
Onur
Hi,

The `ResponsiveReactGridLayout` do not allow to forward a ref to the underlying `ReactGridLayout`.
This prevents keeping track of the number of columns and size of the layout for example.

To give a use case, I wan't to display a placeholder grid behind the layout during edition, so I need to know precisely it's size. I could compute it from a parent component, but the most straightforward solution is using a "ref" to access the `rowHeight`, `cols` and `width` props.

I've implemented a working version for RRGL 1.16 but I should probably open a PR for new versions with forwardRef.

I will need to implement this sooner or later anyway when I update my project to React 16.

Thanks again for your work on RRGL, it's been running strong for years in our project and provides an excellent user experience.
I found an error using the new drag and drop feature on firefox. Sometimes react-grid-layout does not catch the drop event when I used on firefox. You can check this issue by opening the link https://strml.github.io/react-grid-layout/examples/15-drag-from-outside.html on firefox.
Demo Video: https://youtu.be/qVh2ivKYyQk
This property will cause some performance issues. I will manually disable user-select to optimize performance, so I need a prop here.