NDK version: r17c
android API version: 27

So close in getting this built without issue, have both libuv and openssl 1.1.1d compiled and built for ARM64 using the above Android ARM64 tools.  The initial CMAKE goes perfectly, but the make process is failing:  

[ 28%] Building C object CMakeFiles/websockets_shared.dir/lib/tls/tls.c.o
/media/jzer0/Dev/workspace/libwebsockets/lib/tls/tls.c: In function 'lws_tls_use_any_upgrade_check_extant':
/media/jzer0/Dev/workspace/libwebsockets/lib/tls/tls.c:290:2: error: implicit declaration of function 'lws_tls_extant' [-Werror=implicit-function-declaration]
  if (!lws_tls_extant(buf)) {
  ^
cc1: all warnings being treated as errors
make[2]: *** [CMakeFiles/websockets_shared.dir/lib/tls/tls.c.o] Error 1
make[1]: *** [CMakeFiles/websockets_shared.dir/all] Error 2
make: *** [all] Error 2

To work around this I commented out the #if !defined around this function to ensure that is is not implicit:

//#if !defined(LWS_WITH_ESP32) && !defined(LWS_PLAT_OPTEE) && !defined(OPTEE_DEV_KIT)


static int
lws_tls_extant(const char *name)
{
	/* it exists if we can open it... */
	int fd = open(name, O_RDONLY), n;
	char buf[1];

	if (fd < 0)
		return 1;

	/* and we can read at least one byte out of it */
	n = read(fd, buf, 1);
	close(fd);

	return n != 1;
}
//#endif

and I am able to successfully make the libraries.  Not sure what kind of impact or instability this could introduce.  Tried with both master and 3.2 stable branch.
I'm having trouble getting the LWS client to accept a (kind-of) self-signed certificate with mbedTLS whereas with OpenSSL it works fine. 

For tests, I'm using a certificate generated by github.com/jsha/minica - it creates a certificate authority and a server certificate. I've generated the certificate for an IP address, 127.0.0.1 and have configured the server to use the certificate and set up the client to load the CA's public key. 

As I've said above when linked against OpenSSL, it works fine (even after the hostname validation fix in the other issue). MbedTLS client however returns the following error: `server's cert didn't look good, X509_V_ERR = 62: Hostname mismatch`

Also, I'm pretty sure the CA public .pem is loaded properly because if I don't load it, it returns a different error (expected): `server's cert didn't look good, X509_V_ERR = 24: CA is not trusted`

I strongly suspect it has something to do with using the IP address, because when I've just (as a last resort :) ) set up an entry in /etc/hosts for `127.0.0.1     lwstest.com`, generated a certificate for that one and set it as a host, it connected just fine.

I'd be fine with using `localhost` if there's nothing that can be done about the IP address access for mbedTLS, however it doesn't work either with `connect failed` & `errno=111` for neither mbedTLS nor OpenSSL