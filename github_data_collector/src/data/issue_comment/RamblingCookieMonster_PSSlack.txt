1) TimeStamp wasn't getting set when called directly. Seemed to reference an old variable MessageTS?
2) The help example showed forcing / overriding a ChannelID when sending pipelined input. The code didn't seem to allow that previously, and specifying a ChannelID to be needed when deleting from a private channel, as the pipelined channel name isn't sufficient. Here's the example from the help file which now works for me after these edits:
         Get-SlackHistory -Count 1000 |
                Where-Object Username -match "MalfunctioningBot" |
                Remove-SlackMessage -ChannelID "C5H8XBUMV"
Implemented:

https://github.com/RamblingCookieMonster/PSSlack/issues/101#issuecomment-572182576
> 
> 
> https://github.com/RamblingCookieMonster/PSSlack/blob/b8ff0bd60aebfb270afd1973928ed8fcc137153a/PSSlack/Public/Send-SlackMessage.ps1#L376
> 
> Appending the option `-ContentType "application/json; charset=utf-8"` may fix this issue.
> 
> ```powershell
> Invoke-RestMethod -Method Post -Uri "https://hooks.slack.com/services/[snip]" -Body "{'text': 'Test message / テストメッセージ / Тестовое сообщение'}" -ContentType "application/json; charset=utf-8"
> ```
> 
> worked in PowerShell 6 in Ubuntu and 5 in Windows 10 (chcp 932).


when i run the get-slackuser function with the -excludebots switch it still returns bot users. Looking at the code, there is a switch parameter but no where in the code is there any logic that deals excluding bot users. Am i missing something?
Trying to send a message with Cyrillic characters. All characters are replaced with ? in Slack.

Apparently, this is because the default encoding in PowerShell Core nowadays is UTF-8, but the module encodes the text with iso-8859-1.

send-slackfile and send-slackmessage should support threads

send-slackfile should be modified as follows:

...

        [parameter(ParameterSetName = 'Content')]
        [string]$FileType,

        [string[]]$Channel,
        [string]$thread_ts,
        [string]$FileName,
        [String]$Title,
        [String]$Comment,
...
    process
    {
        if ($Content) {
            $body = @{}
            switch ($psboundparameters.keys) {
            'Content'     {$body.content     = $content}
            'Channel'     {$body.channels = $Channel -join ", " }
            'thread_ts'   {$body.thread_ts = $thread_ts}
            'FileName'    {$body.filename = $FileName}
            'Title'       {$body.Title = $Title}
            'Comment'     {$body.initial_comment = $Comment}
            'FileType'    {$body.filetype = $FileType}
            }
...
switch ($psboundparameters.keys) {
                'Channel'     {$bodyLines +=
                                ("--$boundary$LF" +
                                "Content-Disposition: form-data; name=`"channels`"$LF" +
                                "Content-Type: multipart/form-data$LF$LF" +
                                ($Channel -join ", ") + $LF)}
                
                'thread_ts'    {$bodyLines +=
                                ("--$boundary$LF" +
                                "Content-Disposition: form-data; name=`"thread_ts`"$LF" +
                                "Content-Type: multipart/form-data$LF$LF" +
                                "$thread_ts$LF")}
                
                'FileName'    {$bodyLines +=
                                ("--$boundary$LF" +
                                "Content-Disposition: form-data; name=`"filename`"$LF" +
                                "Content-Type: multipart/form-data$LF$LF" +
                                "$FileName$LF")}

---------
send-slackmessage
...
$Username,

        [parameter(ParameterSetName = 'Param',
                   ValueFromPipelineByPropertyName = $True)]
        $thread_ts,

        [parameter(ParameterSetName = 'Param',
                   ValueFromPipelineByPropertyName = $True)]
        $IconUrl,

        [parameter(ParameterSetName = 'Param',
                   ValueFromPipelineByPropertyName = $True)]
        $IconEmoji,
...
        if($PSCmdlet.ParameterSetName -eq 'Param')
        {
            $body = @{ }

            switch ($psboundparameters.keys)
            {
                'channel'     {$body.channel = $channel }
                'text'        {$body.text     = $text}
                'username'    {$body.username = $username}
                'thread_ts'   {$body.thread_ts = $thread_ts}
                'asuser'      {$body.as_user = $AsUser}
                'iconurl'     {$body.icon_url = $iconurl}
                'iconemoji'   {$body.icon_emoji   = $iconemoji}
                'linknames'   {$body.link_names = 1}
                'parse'       {$body.parse = $Parse}
                'UnfurlLinks' {$body.unfurl_links = $UnfurlLinks}
                'UnfurlMedia' {$body.unfurl_media = $UnfurlMedia}
                'attachments' {$body.attachments = $Attachments}
            }
            $Messages += $Body
....


Allows for PSSlack to be run in a constrained/Jea environment.

The only change here is replacing instances of Select-Object with Microsoft.PowerShell.Utility\Select-Object.

This allows PSSlack to be used in constrained endpoint /Jea environments as constrained endpoints load a limited version of Select-Object that breaks the module. Calling it using the fully qualified module path fixes the issue.
are there plans to support TLS 1.2? I used this module for a slack app and now Slack is telling me tls 1.0 and 1.1 will be deprecated in 2020 and any apps using those protocol will fail when querying their api.
This fixes issue #93 by adding a Send-SlackChannelInvite function.
This change allows the user to configure the message content-type with an optional parameter or using the PSSlackConfig as requested in the linked issue.
Reason for asking. conversations.list seems to be cached. If you make changes to objects returned by conversations.list and run it again, the newly returned objects are unchanged.

In comparison channels.list seems to be updated on every request.