The [PowerShell Gallery](https://www.powershellgallery.com) is a package-distribution system designed specifically for PowerShell modules and scripts. While NuGet provides one option for distributing .NET/C++ packages, PSGallery is more tightly integrated with PowerShell 5.0 and above.

Getting PSBuild on the PowerShell Gallery would mean anyone running PowerShell 5.0 or above could install the module simply by running `Install-Module PSBuild` - no initialization scripts or the like required.


Just for documentation purpose: 

I tried to install psbuild as described in the readme.

`PS C:\Users\florian.decker> (new-object Net.WebClient).DownloadString("https://raw.githubusercontent.com/ligershark/psbuild/master/src/GetPSBuild.ps1") | iex`

This was followed by this errors:

```
Copy-Item : Could not find a part of the path 'C:\Users\florian.decker\AppData\Local\GitHub\shell.ps1\psbuild\'.
At line:49 char:9
+         Copy-Item -Path "$($psbPsm1File.Directory.FullName)\*"  -Dest ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Copy-Item], DirectoryNotFoundException
    + FullyQualifiedErrorId : System.IO.DirectoryNotFoundException,Microsoft.PowerShell.Commands.CopyItemCommand

Import-Module : The specified module 'C:\Users\florian.decker\AppData\Local\GitHub\shell.ps1\psbuild\psbuild.psm1' was
not loaded because no valid module file was found in any module directory.
At line:69 char:9
+         Import-Module -Name $moduleFile -DisableNameChecking -Force
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (C:\Users\floria...ld\psbuild.psm1:String) [Import-Module], FileNot
   FoundException
    + FullyQualifiedErrorId : Modules_ModuleNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand

psbuild is installed and ready to use
USAGE:
    PS> Invoke-MSBuild 'C:\temp\msbuild\msbuild.proj'
    PS> Invoke-MSBuild C:\temp\msbuild\path.proj -properties (@{'OutputPath'='c:\ouput\';'visualstudioversion'='12.0'})
-extraArgs '/nologo'

For more details:
    get-help Invoke-MSBuild
Or visit http://msbuildbook.com/psbuild
```

The log says that the installation was successfull, although none of the commands worked afterwards.

I solved the problem by deleting the file `C:\Users\florian.decker\AppData\Local\GitHub\shell.ps1` and running the installation again.

Thanks for the nice project! :)

Cheers,
Florian

Hi,
if I'm not mistaken, msbuild 15 is not detected and used automatically when VS Buildtools 2017 installed. The path changed to
c:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin\MSBuild.exe

Or in case VS installed (look out for the edition dir name)
c:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin\MSBuild.exe

Thanks for fixing (or correcting me) :)

Petr

Currently there is a call to `[System.Security.Cryptography.HashAlgorithm]::Create()` at https://github.com/ligershark/psbuild/blob/dev/src/psbuild.psm1#L1013. This doesn't work in PowerShell core.

We can move to the NuGet package https://www.nuget.org/packages/System.Security.Cryptography.Algorithms/.

Related to #80 #81 

I just came across psbuild and am very interested in it. However, having recently moved to PowerShell Core for portability reasons, I wanted to give psbuild a spin under PS Core 6.0.0.9-beta.

```
PS C:\Kellekek\Microsoft\PowerShell\6.0.0.9> Install-Module Invoke-MsBuild
PackageManagement\Install-Package : Could not compare "6.0.0-alpha" to "5.0". Error: "Cannot convert value "5.0" to typ
e "System.Management.Automation.SemanticVersion". Error: "Cannot process argument because the value of argument "versio
n" is not valid. Change the value of the "version" argument and run the operation again.""
```

Trying with the self-installing script:

```
PS C:\Users\Matty\Desktop> Invoke-WebRequest https://raw.githubusercontent.com/ligershark/psbuild/master/src/GetPSBuild.ps1 -OutFile GetPSBuild.ps1
PS C:\Users\Matty\Desktop> .\GetPSBuild.ps1
Method invocation failed because [System.Environment] does not contain a method named 'GetFolderPath'.
At C:\Users\Matty\Desktop\GetPSBuild.ps1:188 char:9
+         $systemDir = [Environment]::GetFolderPath('System')
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : MethodNotFound

New-Object : Cannot find type [System.Net.WebClient]: verify that the assembly containing this type is loaded.
At C:\Users\Matty\Desktop\GetPSBuild.ps1:105 char:14
+             (New-Object System.Net.WebClient).DownloadFile($nugetDown ...
+              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidType: (:) [New-Object], PSArgumentException
    + FullyQualifiedErrorId : TypeNotFound,Microsoft.PowerShell.Commands.NewObjectCommand

psbuild not found, and was not downloaded successfully. sorry.
        Check your nuget.config (default path=C:\Users\Matty\AppData\Roaming\NuGet\NuGet.config) file to ensure that nuget.org
 is enabled.
        You can also try changing the versionToInstall value.
        You can file an issue at https://github.com/ligershark/psbuild/issues.
At C:\Users\Matty\Desktop\GetPSBuild.ps1:177 char:13
+             throw ("psbuild not found, and was not downloaded success ...
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OperationStopped: (psbuild not fou...psbuild/issues.:String) [], RuntimeException
    + FullyQualifiedErrorId : psbuild not found, and was not downloaded successfully. sorry.
        Check your nuget.config (default path=C:\Users\Matty\AppData\Roaming\NuGet\NuGet.config) file to ensure that nuge
   t.org is enabled.
        You can also try changing the versionToInstall value.
        You can file an issue at https://github.com/ligershark/psbuild/issues.
```

MSBuild now being able to build on [OSX and Linux](https://github.com/Microsoft/msbuild#building-msbuild-in-unix-mac--linux) using .Net Core, it would be nice if psbuild followed the example.

Due to #78 we should not enable masking secrets all the time. It's most important for CI builds so it would be better to default this to false, but if running on CI then enable it by default. We can use an environment variable `$env:PSBuildMaskSecrets=$true` to enable this behavior.

When masking secrets is enabled (default today) it messes up the PowerShell prompt. It's pretty invasive actually and we should change the default in a better way because of this.

Nuget.org throws a 401 unauthorized when I try to run GetPSBuild.ps1

Does the webclient need a user agent string?

PS C:> (new-object Net.WebClient).DownloadString("https://raw.githubusercontent.com/ligershark/psbuild/master/src/GetPSBuild.ps1") | iex
Get-Nuget : Exception calling "DownloadFile" with "2" argument(s): "The remote server returned an error: (401) Unauthorized."
At line:163 char:31
-                 $nugetPath = (Get-Nuget -toolsDir $toolsDir -nugetDownloadUrl $n ...
-                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  - CategoryInfo          : NotSpecified: (:) [Get-Nuget], MethodInvocationException
  - FullyQualifiedErrorId : WebException,Get-Nuget

psbuild not found, and was not downloaded successfully. sorry.
    Check your nuget.config (default path=C:\Users\jcarlson\AppData\Roaming\NuGet\NuGet.config) file to ensure that
nuget.org is enabled.
    You can also try changing the versionToInstall value.
    You can file an issue at https://github.com/ligershark/psbuild/issues.
At line:177 char:13
-             throw ("psbuild not found, and was not downloaded successfully. sorr ...
- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  - CategoryInfo          : OperationStopped: (psbuild not fou...psbuild/issues.:String) [], RuntimeException
  - FullyQualifiedErrorId : psbuild not found, and was not downloaded successfully. sorry.
    Check your nuget.config (default path=C:\Users\jcarlson\AppData\Roaming\NuGet\NuGet.config) file to ensure that nuget.org is enabled.
    You can also try changing the versionToInstall value.
    You can file an issue at https://github.com/ligershark/psbuild/issues.

I opened a [question](https://stackoverflow.com/questions/32928671/) on StackOverflow for how to check Visual Studio projects (.csproj files) for consistency in their property settings. Apparently there is no straightforward way to do this and you have to either write custom tasks or manually parse `.csproj` files as XML for testing project properties.

I think this is a good feature to be added to `Invoke-MSBuild`. Right now, `Invoke-MSBuild` has a `-properties` parameter which passes these parameters for build but it does not test projects for having them. For example if you pass `-properties @{'WarningLevel'='4'}` it will ignore the current `WarningLevel` property in projects and use the specified value instead. But what if you want the build to fail with proper error message if `WarningLevel` in any of the building projects is not `4`? I've seen different team invent their own stuff to implement this kind of verification in their projects.

I suggest adding a new parameter to `Invoke-MSBuild` just for this, like `-requireProperties` that will cause the build to fail if any of the projects does not comply with the specified property requirements.

One thing to notice is, if `-configuration Debug` is specified together with `-requireProperties $hash` then required properties will be checked only for the Debug condition. For this we may want to alternatively have the option to pass an MSBuild project with all required properties on different conditions and get `Invoke-MSBuild` to verify that every project being built follows that.
