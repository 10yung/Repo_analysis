e.g. to enable debug info
I have not been able to identify the cause of xargo not building this application, but I have attached the build log here.

Any help would be much appreciated, thanks.

[dump.log](https://github.com/japaric/xargo/files/3640647/dump.log)

The application is just a simple hello world application, the command used is `xargo build --target thumbv7m-none-eabi 2>dump.log`

the xargo.toml contains only `[target.thumbv7m-none-eabi.dependencies.std]
`
I believe my `xargo` is fully updated, and yet while trying to build a small no-std binary it fails. I was trying to build a custom target, but also find that it fails for the builtin host target. From looking through the issues this looks similar to the failures that were fixed by 0.3.13â€¦

Version:
```
$ xargo --version
xargo 0.3.13
cargo 1.33.0-nightly (2b4a5f1f0 2019-01-12)
```

Failing case:
```
$ xargo build --target x86_64-apple-darwin
warning: Patch `rustc-std-workspace-core v1.0.0 (/Users/c/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src/tools/rustc-std-workspace-core)` was not used in the crate graph.
Check that the patched package version and available features are compatible
with the dependency requirements. If the patch has a different version from
what is locked in the Cargo.lock file, run `cargo update` to use the new
version. This may also occur with an optional dependency that is not enabled.
   Compiling core v0.0.0 (/Users/c/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src/libcore)
    Finished release [optimized] target(s) in 31.54s
error: failed to load source for a dependency on `compiler_builtins`

Caused by:
  Unable to update /Users/c/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src/libcompiler_builtins

Caused by:
  failed to read `/Users/c/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src/libcompiler_builtins/Cargo.toml`

Caused by:
  No such file or directory (os error 2)
error: `"cargo" "build" "--release" "--manifest-path" "/var/folders/6f/l9rcfr1d2s55xy9vd6rtnvv00000gn/T/xargo.9N6Ub5sxQilY/Cargo.toml" "--target" "x86_64-apple-darwin" "-p" "compiler_builtins"` failed with exit code: Some(101)
note: run with `RUST_BACKTRACE=1` for a backtrace
```
windows IOT or for some newer laptops ie full desktop arm64 .. in windows 10. 

https://raspiproject.altervista.org/en/windows-10-on-raspberry-pi-3/

pine64 has a build also for iot.. 

however with rust ports firefox etc are also easier. .. 

and or roll your own cheep windows/linux Kiosks.. 

In #228, in `Blueprint::from` and `Blueprint::push`, several invocations of `Path::exists` were added. Since git sources are not available on the filesystem, this has broken builds using git sources after https://github.com/rust-lang/rust/pull/56092 was merged. Since `tools/rustc-std-workspace-core` will not be found on disk, the necessary `[patch]` section will not be inserted. (This only applies if your installed `rust-src` component is not up to date, but see #230)
#228 always adds a `[patch]` section to Xargo's `Cargo.toml`s, but there is no way to override the crate it points to. It always uses the crate it find in rust-src, even if `std` or `core` itself is built using a path or git source. This leads to two different, incompatible, core crates in the dependency tree.

See #231 for more issues with git sources.

I've come up with 3 different approaches to fix this, not sure which one is best:

1. If there is a `std` crate in the blueprint, compute `../tools/rustc-std-workspace-core` from that path (or use the same git) and use that as the `[patch]`.

2. If there is a `std` crate in the blueprint, find the spec of the core dependency (how would this work if `std` is a git dependency?), then generate a `rustc-std-workspace-core` crate in the tempdir with that core. Then, use that temp crate as the `[patch]`.

3. Use the existing logic from #228 to generate the `[patch]` by default. Let users specify their own `[patch]`es in `Xargo.toml`
I've recently been told that setting the environment variable `RUSTC_BOOTSTRAP=1` makes a standard `rustc` build able to build nightly-only crates. Maybe this could be used to not require a nightly build for compiling libcore?

Is there a way to suppress xargo's `metadata` and `extra-filename` behavior?  I'm compiling to .o successfully and then I need to link with a different linker and then objcopy so discovering this ~random string thwarts automation.
Trying to build for `arm-none-eabi` as though it had a pointer width of 64 bits causes an "error: could not compile `core`" with no further elaboration, and rebuilding with `--verbose` reveals that rustc segfaults.

To reproduce:
```
xargo new --lib segfault-repro
cd segfault-repro
echo '{"llvm-target": "arm-none-eabi", "data-layout": "e-m:e-p:64:32-i64:64-v128:64:128-a:0:32-n32-S64", "linker-flavor": "gcc", "target-endian": "little", "target-pointer-width": "64", "target-c-int-width": "32", "arch": "arm", "os": "none"}' > arm-segfault.json
xargo build --target arm-segfault --verbose
```
Changing the llvm target to "aarch64-none-elf" and the arch to "aarch64", or changing the target file to claim that pointers are 32-bit, will fix the segfault.

I'm actually not sure if this is a rustc bug or a xargo bug, as I lack the knowledge to do this with rustc without xargo -- sorry if this is in the wrong place!
Hi,
When I compile with xargo I get `error[E0432]: unresolved import core`.
I don't want to explicitly import core because that will break the regular cargo build (cargo: `the name `core` is defined multiple times `)

I'm running ```RUST_TARGET_PATH=`pwd` xargo build --target x86_64-unknown-linux-sgx --release```

x86_64-unknown-linux-sgx.json:
```
{
  "arch": "x86_64",
  "cpu": "x86-64",
  "data-layout": "e-m:e-i64:64-f80:128-n8:16:32:64-S128",
  "dynamic-linking": true,
  "env": "sgx",
  "exe-allocation-crate": "alloc_system",
  "executables": true,
  "has-elf-tls": true,
  "has-rpath": true,
  "linker-flavor": "gcc",
  "linker-is-gnu": true,
  "llvm-target": "x86_64-unknown-linux-gnu",
  "max-atomic-width": 64,
  "os": "linux",
  "position-independent-executables": true,
  "pre-link-args": {
    "gcc": [
      "-Wl,--as-needed",
      "-Wl,-z,noexecstack",
      "-m64"
    ]
  },
  "relro-level": "full",
  "stack-probes": true,
  "target-c-int-width": "32",
  "target-endian": "little",
  "target-family": "unix",
  "target-pointer-width": "64",
  "vendor": "unknown"
}
```

Xargo.toml:
```
[dependencies]
alloc = {}
panic_unwind = {}
panic_abort = {}

[dependencies.std]
path = "../../xargo/my_std"
stage = 1

[dependencies.rand]
path = "../../xargo/my_rand"
stage = 2

[dependencies.my_serialize]
path = "../../xargo/my_serialize"
stage = 2
```