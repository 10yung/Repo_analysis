Minimal reproducible example (you may have to run it a few times before it triggers; it's random):

```cpp
#include <stdio.h>
#include "SDL2/SDL.h"
#define CUTE_SOUND_IMPLEMENTATION
#define CUTE_SOUND_FORCE_SDL
#include "cute_sound.h"

cs_context_t *context;

void audio_init(void)
{
	context = cs_make_context(NULL, 44100, 4096 * 2, 0, NULL);
	cs_spawn_mix_thread(context);
	cs_loaded_sound_t loaded = cs_load_wav("hum.wav");
	cs_playing_sound_t hum = cs_make_playing_sound(&loaded);
	cs_insert_sound(context, &hum);
	cs_sleep(1000);
}

int main(void)
{
	audio_init();
	char *buf;
	FILE *f = fopen("hum.wav", "rb");
	if (f) {
		long size;
		fseek(f, 0, SEEK_END);
		size = ftell(f);
		rewind(f);
		buf = malloc(size);
		fread(buf, 1, size, f);
		fclose(f);
	} else {
		puts("Failed to open file");
		return 1;
	}
	return 0;
}
```

Here's a gdb session:

    (gdb) run
    Starting program
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib64/libthread_db.so.1".
    [New Thread 0x7ffff77cb700 (LWP 10363)]
    [New Thread 0x7ffff6c84700 (LWP 10364)]
    [New Thread 0x7ffff6483700 (LWP 10365)]
    [New Thread 0x7ffff5c82700 (LWP 10366)]
    
    Thread 5 "CuteSoundThread" received signal SIGSEGV, Segmentation fault.
    [Switching to Thread 0x7ffff5c82700 (LWP 10366)]
    cs_mix (ctx=0x55555555eba0) at cute_sound.h:2391
    2391                            playing->loaded_sound->playing_count -= 1;
    (gdb) bt
    #0  cs_mix (ctx=0x55555555eba0) at cute_sound.h:2391
    #1  0x0000555555556604 in cs_ctx_thread (udata=0x55555555eba0) at cute_sound.h:1760
    #2  0x00007ffff7dac5ec in ?? () from /usr/lib64/libSDL2-2.0.so.0
    #3  0x00007ffff7e16f59 in ?? () from /usr/lib64/libSDL2-2.0.so.0
    #4  0x00007ffff785c3d7 in start_thread () from /lib64/libpthread.so.0
    #5  0x00007ffff7bf2f4f in clone () from /lib64/libc.so.6


Doesn't happen without the `fread(buf, 1, size, f)` call. I can also hear an audible "pop" in the audio at the end of the sleep when when I have the `fread`, not present otherwise.

Seems like a very specific circumstance, but I encountered exactly this issue when trying to integrate cute_sound into a larger game engine.

I zipped and attached the sound file I was using (`hum.wav`)
[hum.zip](https://github.com/RandyGaul/cute_headers/files/3929457/hum.zip)
.
My original strategy was to copy + paste large swaths of code into big and individual #ifdef sections. This worked quite well, but isn't scaling as well as I hoped. After working on an ALSA implementation, I think a little too much code was duplicated.

Instead, I'll refactor a lot of duplicated code into helper functions and platform independent structs. In general there is too much platform independent code duplicated inside of the platform dependent sections.

I definitely don't want to devolve into a tangled mess of a million #ifdef everywhere. There will still be big sections, one for each platform/implementation, just smaller sections with less code duplication across them.
A while ago I made an attempt to use lookup table accelerator for decoding, and use the binary search decoder as a fallback if the code bitlength was beyond the lookup table's maximum size. I was attempting to mimic the lookup logic found in stb_image.h, but somehow I ended up introducing some bugs, and the lookup table is now unused.

Open up cute_png.h and search for "lookup" without case-sensitivity to easily find all the lookup table code.

The lookup table should be fixed up and used, eventually. This is a low priority task, so who knows when I will get around to it (if ever), but I'm writing it down here just so I don't forget.

If anyone else is interested in trying, feel free to take over and submit a pull request.
Hello,

I think, If the ```'"'``` character(213 line) is not in the file, it falls into an infinite loop.

https://github.com/RandyGaul/cute_headers/blob/b96e3fad1790c9784f062bf83c5b3065ed803360/cute_sid.h#L205-L217

This causes an overflow.

PoC
```
karas@ubuntu:~/cute_headers/examples_cute_sid$ cat crash/b.c 
SID( "crash
```

gdb log

```
Program received signal SIGSEGV, Segmentation fault.
0x000055555555522e in sid_preprocess (path=0x7fffffffd6c0 "in//b.c", 
    out_path=0x5555557602a0 "in//b.c.preprocessed") at ../cute_sid.h:207
207				if (*ptr == '\\')
(gdb) bt full
#0  0x000055555555522e in sid_preprocess (path=0x7fffffffd6c0 "in//b.c", 
    out_path=0x5555557602a0 "in//b.c.preprocessed") at ../cute_sid.h:207
        ptr = 0x555555779000 <error: Cannot access memory at address 0x555555779000>
        h = 4294955568
        bytes = 32767
        data = 0x555555761506 "hi\n"
        size = 9
        fp = 0x5555557602c0
        out = 0x5555557604f0 "\230\002\335\367\377\177"
        outOriginal = 0x5555557604f0 "\230\002\335\367\377\177"
        fileWasModified = 1
#1  0x0000555555555ccd in CB_DoPreprocess (file=0x7fffffffd6c0, udata=0x0) at main.c:26
        out = 0x5555557602a0 "in//b.c.preprocessed"
#2  0x000055555555566e in cf_traverse (path=0x7fffffffe4ad "in/", 
    cb=0x555555555c93 <CB_DoPreprocess>, udata=0x0) at ../cute_files.h:255
        file = {
          path = "in//b.c\000\000\000\000\000\003\000\000\000\000\000\000\000\377\177\000\000\241EUUUU\000\000\001\b\000\000\000\000\000\000\033\000 \001\000\000\000\000\001\000\000\000\000\000\000\000\355\201", '\000' <repeats 22 times>, "\320\352\035\000\000\000\000\000\000\020\000\000\000\000\000\000\370\016\000\000\000\000\000\000,\333k\\\000\000\000\000\250\266\216!\000\000\000\000T}\336Y", '\000' <repeats 12 times>, "\316\312QZ\000\000\000\000\070\020+2", '\000' <repeats 28 times>, "\240T\377\367\377\177\000\000\241EUUUU\000\000P\341\377\367\377\177\000\000\000\000\000\000\000\000\000\000"..., 
          name = "b.c\000\377\177\000\000\377\335\377\377\377\177\000\000\340\061\336\367\377\177\000\000$\361\335\367\377\177\000\000\360\334\377\377\377\177\000\000\275\000\000\000\000\000\000\000\300T\377\367\377\177\000\000H\216\237\367\377\177\000\000Xe\240\367\377\177\000\000k\371\335\367\377\177\000\000\275\000\000\000\000\000\000\000Xe\240\367\377\177\000\000\300T\377\367\377\177\000\000\310\333\377\377\377\177\000\000\304\333\377\377\377\177\000\000\361\362\335\367\377\177\000\000\001\000\000\000\000\000\000\000\264W\335\367\377\177\000\000(T\335\367\377\177\000\000\310\333\377\377\377\177\000\000_\232\177g\000\000\000\000i\376\235\001\000\000\000\000\037\000\000\000\377\177\000\000Xe\240\367\377\177\000\000\240\334\377\377\377\177\000\000"..., 
          ext = ".c", '\000' <repeats 22 times>, "\250\344\377\367\377\177\000", is_dir = 0, 
          is_reg = 1, size = 9, info = {st_dev = 2049, st_ino = 39327275, st_nlink = 1, 
            st_mode = 33152, st_uid = 1000, st_gid = 1000, __pad0 = 0, st_rdev = 0, 
            st_size = 9, st_blksize = 4096, st_blocks = 8, st_atim = {tv_sec = 1550581619, 
              tv_nsec = 294000000}, st_mtim = {tv_sec = 1550581611, tv_nsec = 766000000}, 
            st_ctim = {tv_sec = 1550581611, tv_nsec = 774000000}, __glibc_reserved = {0, 0, 0}}}
        dir = {path = "in/", '\000' <repeats 405 times>..., has_next = 1, dir = 0x555555758260, 
          entry = 0x5555557582a8}
#3  0x0000555555555d23 in main (argc=2, argv=0x7fffffffe198) at main.c:38
No locals.
```

Asan Log
```
=================================================================
==29774==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000001d at pc 0x00000050c02e bp 0x7fffddae1510 sp 0x7fffddae1508
READ of size 1 at 0x60200000001d thread T0
    #0 0x50c02d in sid_preprocess /home/karas/cute_headers/examples_cute_sid/../cute_sid.h:207:8
    #1 0x50e986 in CB_DoPreprocess /home/karas/cute_headers/examples_cute_sid/main.c:26:2
    #2 0x50d895 in cf_traverse /home/karas/cute_headers/examples_cute_sid/../cute_files.h:255:20
    #3 0x50ea22 in main /home/karas/cute_headers/examples_cute_sid/main.c:38:2
    #4 0x7f56a96651c0 in __libc_start_main /build/glibc-CxtIbX/glibc-2.26/csu/../csu/libc-start.c:308
    #5 0x41c3b9 in _start (/home/karas/cute_headers/examples_cute_sid/sid+0x41c3b9)

0x60200000001d is located 0 bytes to the right of 13-byte region [0x602000000010,0x60200000001d)
allocated by thread T0 here:
    #0 0x4d1a00 in malloc (/home/karas/cute_headers/examples_cute_sid/sid+0x4d1a00)
    #1 0x50bb5b in sid_preprocess /home/karas/cute_headers/examples_cute_sid/../cute_sid.h:172:17
    #2 0x50e986 in CB_DoPreprocess /home/karas/cute_headers/examples_cute_sid/main.c:26:2
    #3 0x50d895 in cf_traverse /home/karas/cute_headers/examples_cute_sid/../cute_files.h:255:20
    #4 0x50ea22 in main /home/karas/cute_headers/examples_cute_sid/main.c:38:2
    #5 0x7f56a96651c0 in __libc_start_main /build/glibc-CxtIbX/glibc-2.26/csu/../csu/libc-start.c:308

SUMMARY: AddressSanitizer: heap-buffer-overflow /home/karas/cute_headers/examples_cute_sid/../cute_sid.h:207:8 in sid_preprocess
Shadow bytes around the buggy address:
  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c047fff8000: fa fa 00[05]fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==29774==ABORTING
```

Thanks.

The stack and frame allocators return unaligned memory. Even though the header says it doesn't have any special alignment support, it still should have some basic alignment support.
Currently using the header as-is will crash on certain platforms due to unaligned memory. In C++ code this is undefined behavior.
Writing wrappers around the stack allocator to handle basic alignment breaks freeing.

Possible fix would be to align each allocation to at least std::max_align_t, mirroring the behavior of malloc.

Simple program to show unaligned memory:

```
// compiled with g++ alloc_test.cpp -m64 -std=c++17 -o alloc_test.out
#include <cstdlib>
#include <cinttypes>
#include <cstdio>

#define CUTE_ALLOC_IMPLEMENTATION
#include "cute_alloc.h"

int main(int argc, char const* argv[]) {
	size_t size       = 1024;
	void* stack_chunk = malloc(size);
	void* frame_chunk = malloc(size);

	ca_stack_t* stack = ca_stack_create(stack_chunk, size);
	ca_frame_t* frame = ca_frame_create(frame_chunk, size);

	{
		// push stack ptr by sizeof(char) to mess up alignment for next allocation
		char* c = (char*)ca_stack_alloc(stack, sizeof(char));
		int* i  = (int*)ca_stack_alloc(stack, sizeof(int));

		bool aligned = (((uintptr_t)i) % alignof(int)) == 0;
		printf("Memory from stack is %s\n", aligned ? "aligned" : "not aligned");
	}

	{
		// push frame ptr by sizeof(char) to mess up alignment for next allocation
		char* c = (char*)ca_frame_alloc(frame, sizeof(char));
		int* i  = (int*)ca_frame_alloc(frame, sizeof(int));

		bool aligned = (((uintptr_t)i) % alignof(int)) == 0;
		printf("Memory from frame is %s\n", aligned ? "aligned" : "not aligned");
	}

	return 0;
}
```

Output from program:
Memory from stack is not aligned
Memory from frame is not aligned
I've been treating tuShorten/tuWiden as a string-ish conversion between UTF16 and UTF 8, so I recommend this.

Here's the code; add it to the end of every tuShorten/tuWiden function.
`if (out < (original_out + out_len))
    out = 0;`
I think there's an extra #endif in tinyfiles.h. Around line 88 there's this:

#if defined( TINYPATH_IMPLEMENTATION )
#endif TINYPATH_IMPLEMENTATION

That #endif doesn't look like it should be there. I get compilation errors about the final #endif having no matching #if
The win32 API has been used to implement high resolution integer timers, but implementations for Apple/Linux are still missing.

See:
https://github.com/RandyGaul/tinyheaders/blob/master/tinytime.h#L10-L29
I am having issues with playing the following (1.2 pitch setting): 
http://www.particle-space.xyz/downloads/gong.ogg

Substituting the following resolved the issue:

```
__m128 phase; // = _mm_atan2_ps( imag, real );
float *phasef = (float*)&phase;
float *realf = (float*)&real;
float *imagf = (float*)&imag;
for (int i=0; i<4; i++) phasef[i] = smbAtan2(imagf[i], realf[i]);
```

I suspect there is an issue with _mm_atan2_ps() related to the edge cases.
From #12 

Even if I'm a windows user, the geek in me knows that an ALSA backend would be a great addition.
FYI, http://github.com/yui0/aplay-/blob/master/alsa.h (PD)

