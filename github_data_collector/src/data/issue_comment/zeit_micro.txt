The tests in the readme section "Testing" doesn't seem to work

```js
const http = require('http')
const micro = require('micro')
const test = require('ava')
const listen = require('test-listen')
const request = require('request-promise')

test('my endpoint', async t => {
  const service = new http.Server(micro(async (req, res) => {
    micro.send(res, 200, {
      test: 'woot'
    })
  }))

  const url = await listen(service)
  const body = await request(url)

  t.deepEqual(JSON.parse(body).test, 'woot')
  service.close()
})
```

Is this still the recommended approach?
Also, time to release a new version. It's been ages since 9.3.4.
Src:
```js
const {buffer} = require('micri');

module.exports = async (req, res) => {
    const body = await buffer(req);

    console.log(body);

    return 'txh';
};
```

Input:
```bash
$ curl 127.0.0.1:3000 -d 'ewfewfw'
$ curl 127.0.0.1:3000 -H 'Content-Type: application/json; charset=utf-8' -d 'ewfewfw'
```

Output:
```
<Buffer 65 77 66 65 77 66 77>
ewfewfw
```

This seems to be related to how [raw-body](https://www.npmjs.com/package/raw-body) is used in `buffer()`.
If `process.exit()` is not called explicitly, the server is still waiting a kill signal

Closes #407
Add `now.json` to deploy for Now1.0. (socket.io doesn't works on Now2.0)
Hello, every time i close the my server run with nicro it remains alive in the background even if it prompt "gracefully exiting", how can i achieve a complete shutdown of the app ?
I can see in the micro bin code that you're juste caching the process exit event and logging a console.log, is this enough ?
```
function registerShutdown(fn) {
	let run = false;

	const wrapper = () => {
		if (!run) {
                run = true;
                fn(); // registerShutdown(() => console.log('micro: Gracefully shutting down. Please wait...'));
              }
	};

	process.on('SIGINT', wrapper);
	process.on('SIGTERM', wrapper);
	process.on('exit', wrapper);
}
```
<img width="535" alt="Screenshot 2019-07-11 at 08 46 38" src="https://user-images.githubusercontent.com/15908751/61030566-f4a34d00-a3bd-11e9-901e-99ef77f1c06b.png">
<img width="1233" alt="Screenshot 2019-07-11 at 08 51 27" src="https://user-images.githubusercontent.com/15908751/61030567-f53be380-a3bd-11e9-8aaa-a3d7810f6f82.png">

The idea is to introduce an "envelope"-type construct into micro, that would allow us to express a broader range of HTTP responses as a simple `return` statement.

It restores a concept absent in the core Node.js HTTP API: a request comes in (function argument), a response goes out (`return`).

## Summary

- Introduces a `micro/res` return type
- Discourages imperatively responding, specially out-of-band (e.g.: callbacks)
- Deprecates `statusCode` from thrown errors. 
- Deprecates `micro/send` as an imperative wrapper ala `res.end`
- Adds official support of `TypeScript` / `Flow` types exports
- Makes micro even smaller!

## Examples

### Respond with 404

```js
const res = require('micro/res')
module.exports = req => {
  return res('Not Found', 404)
}
```

### Respond with 204

```js
const res = require('micro/res')
module.exports = req => {
  return res(null)
}
```

### Respond with a JSON body

```js
const res = require('micro/res')
module.exports = req => {
  return res({ "hi": "there" })
}
```

### Respond with a stream

```js
const res = require('micro/res')
module.exports = req => {
  return res(fs.createReadStream('./photo.jpg'))
}
```

### Respond with JSON and headers

```js
const res = require('micro/res')
module.exports = req => {
  return res({ error: "not_found" }, 404, {
     'Access-Allow-Control-Origin': '*'
  })
}
```

### Fun Trivia: Symmetry

If we avoid `{` and `}`, it almost looks like we're using the imperative `res` (similar to our current `send`):

```js
const res = require('micro/res')
module.exports = req => (
  await sideEffect(),
  res('Your request has been logged', 202)
)
```

### Composition

The return value from `res(200)` would return a `Response` object that works like an `immutable-js` `Record`.

I've written before about why [*middleware as a framework construct is a bad idea*](https://github.com/zeit/micro/issues/8#issuecomment-178362486), because functional programming is the ultimate middleware framework. Our language already has all the tools we need.

So let's imagine we want to create _"middleware"_ that always sends CORS headers to all your responses. The end goal would be to use it as follows:

```js
module.exports = withCORS(req => 
  res(200, 'Hi there')
)
```

So, how do we write `withCORS`?

```js
async function withCORS(fn) {
  const res_ = await fn()
  return res_.setHeaders({
    'Access-Control-Allow-Origin': '*'
  })
}
```

Which can actually be simplified as 

```js
async function withCORS(fn) {
  return (await fn()).setHeaders({
    'Access-Control-Allow-Origin': '*'
  })
}
```

We would have a few methods on `Response`, that just return a new immutable response:

- `setHeaders` merges headers
- `setStatus` sets status code
- `setBody` sets the body reference

## Questions

### What happens to our other return types?

Undecided and open for discussion.
Currently we support returning:

- `{}`  for JSON serialization and `application/json`
- `String` / `Number` for `text/plain`
- `Stream` for `application/octet-stream`
- Any of the above wrapped in a `Promise`
- `null` for 204 (empty body)
- `undefined` for deferring and letting the user respond later

These cover a wide spectrum, and they're ok if you want to retain the default headers / status code we chose.

There's a strong case for taking them away and always enforcing a `Response` type:

- They make composition harder. In the `withCORS` example above, since the response can return so many things, we would need a method for wrapping and converting into a cohesive type. `withCORS` would not be so simple to write!
- Not a fan of two ways of doing the same thing (hence why we are removing `statusCode` from thrown objects)

However, if we do want to main them, we could use a wrapper like `res.from()` that gives us a `Response` type from a primitive like `"Hello World"`:

```js
async function withCors(fn) {
  const res_ = res.from(fn())
  return res_.setHeaders({
    'Access-Control-Allow-Origin': '*'
  })
}
```

Another counter-argument of ditching support for returning the primitives is that it would make testing also harder, by requiring wrapping again in your test suites.

### What happens to the `throw` behavior?

Deprecated. Right now you can `throw` an `Error` with a `statusCode`, and we respond with it. We will be warning (once per process in prod, every time in dev) if you use it, and then remove it.

The functionality can also easily be retained in userland.

However, if a handler throws, we will still continue to respond with `500` and a generic `"Internal Server Error"` string, with the full stack in developer mode, and we will `console.error` as well.

If the user wishes to override error behavior, they can write their own function that performs `try/catch`.

### What happens to `send(res, 'Hi')`?

Deprecated. We will be warning (once per process in prod, every time in dev) if you use it, and then remove it.

The functionality can also easily be retained in userland.

## Transition plans

We should do our best to facilitate access to codemods and utilities (maintained in userland) that make the transition painless and as automatic as possible.

## Future Directions

If Node.js brings back support for the `sendfile` kernel syscall, we can consider introducing a `file` return type, that makes a reference to a node in the filesystem and it can be streamed back in a very optimized way.

It has been suggested in the past, however, that `sendfile` could become an implementation detail of piping a filesystem stream, in which case this wouldn't be necessary. 

## Input from the community

Please feel free to weigh your opinions on this RFC. The more comments we gather, the better!