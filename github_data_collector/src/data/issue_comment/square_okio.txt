Facing this exception while reading a message byte coming only for a particular server host

stacktrace : 
```
java.lang.IllegalArgumentException: byteCount < 0: -1
at okio.RealBufferedSource.request(RealBufferedSource.java:65)
at okio.RealBufferedSource.require(RealBufferedSource.java:61)
at okio.RealBufferedSource.readUtf8(RealBufferedSource.java:192)
```

okio version - 1.15.0

A quick response would be appreciated.
Thanks
Hello,

After reading the documentation available, I would expect this simple example to potentially time out:

Source source = Okio.source(new FileInputStream(file));
source.timeout().timeout(10, TimeUnits.SECONDS);
source.readByte();

In this case, file is a unix named pipe (ie: created using "Runtime.getRuntime().exec("mkfifo " + pipe.toString()).waitFor();") However, when the pipe writer doesn't write anything to the pipe, the read hangs indefinitely (ie: the timeout is never triggered). Is this scenario not supported?
`ArrayBuffer`, `UInt8Array`, etc.
Some operations are implemented by creating a conventional ByteString. We should cache this to limit the cost of using a SegmentedByteString.
I faced this issue writing code using `web3j` library which in turn uses `okhttp` and `okio`.
After application finished few daemon threads keep running. One of them is "Okio Watchdog".

Maven `exec` plugin makes warning about that, waits for 15 seconds and kills threads:
```
WARNING] thread Thread[RxSchedulerPurge-1,5,org.web3j.test.Web3jTestApp] was interrupted but is still alive after waiting at least 15000msecs
[WARNING] thread Thread[RxSchedulerPurge-1,5,org.web3j.test.Web3jTestApp] will linger despite being asked to die via interruption
[WARNING] thread Thread[RxCachedWorkerPoolEvictor-1,5,org.web3j.test.Web3jTestApp] will linger despite being asked to die via interruption
[WARNING] thread Thread[OkHttp ConnectionPool,5,org.web3j.test.Web3jTestApp] will linger despite being asked to die via interruption
[WARNING] thread Thread[Okio Watchdog,5,org.web3j.test.Web3jTestApp] will linger despite being asked to die via interruption
[WARNING] NOTE: 4 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java, it is a problem with the running code. Although not serious, it should be remedied.
[WARNING] Couldn't destroy threadgroup org.codehaus.mojo.exec.ExecJavaMojo$IsolatedThreadGroup[name=org.web3j.test.Web3jTestApp,maxpri=10]
java.lang.IllegalThreadStateException
```
Stacktrace:
```
"Okio Watchdog" #17 daemon prio=5 os_prio=0 tid=0x00007fc97c478000 nid=0x27dcd1 in Object.wait() [0x00007fc9b6618000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
        at java.lang.Object.wait(Native Method)
        - waiting on <0x000000076ec7bb58> (a java.lang.Class for okio.AsyncTimeout)
        at okio.AsyncTimeout.awaitTimeout(AsyncTimeout.java:347)
        at okio.AsyncTimeout$Watchdog.run(AsyncTimeout.java:312)
        - locked <0x000000076ec7bb58> (a java.lang.Class for okio.AsyncTimeout)
```
Looking into `okio` code I see that `okio.AsyncTimeout$Watchdog.run` ignores `InterruptedException`. 
Is it made intentionally? What is the reason?

Okio version: 1.13.0 (but I see the latest one is affected as well)
Original issue: https://github.com/web3j/web3j/issues/1085
Test app: https://github.com/web3j/web3j/issues/1085#issuecomment-549748777
Looking at FileOperator from OkHttp and potentially my own need for random access file operations, I've put together some ideas for an Okio native Store.

Still a bunch to do like documentation and multiplatform support, but I thought this would be a good place to discuss. Do you still want this abstraction in Okio? What should the API require things like `size()` and `truncate()`?

Feel free to close this pull request if this is not something you want in Okio. Otherwise, let me know what changes you would like to see and I will work toward getting this pull request ready for merge.
Currently we are getting occasional crashes from our crash-report that look like the following:

```
okio.Buffer.write
java.lang.IllegalArgumentException: Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull, parameter byteString

okio.Buffer.write | Buffer.java, line 2
-- | --
2 | okhttp3.Cache$Entry.readCertificateList | Cache.java, line 668
3 | okhttp3.Cache$Entry.<init> | Cache.java, line 581
4 | okhttp3.Cache.get | Cache.java, line 208
5 | okhttp3.Cache$1.get | Cache.java, line 145
6 | okhttp3.internal.cache.CacheInterceptor.intercept | CacheInterceptor.java, line 55
7 | okhttp3.internal.http.RealInterceptorChain.proceed | RealInterceptorChain.java, line 142
8 | okhttp3.internal.http.RealInterceptorChain.proceed | RealInterceptorChain.java, line 117
9 | okhttp3.internal.http.BridgeInterceptor.intercept | BridgeInterceptor.java, line 93
10 | okhttp3.internal.http.RealInterceptorChain.proceed | RealInterceptorChain.java, line 142
11 | okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept | RetryAndFollowUpInterceptor.java, line 88
12 | okhttp3.internal.http.RealInterceptorChain.proceed | RealInterceptorChain.java, line 142
13 | okhttp3.internal.http.RealInterceptorChain.proceed | RealInterceptorChain.java, line 117
14 | okhttp3.RealCall.getResponseWithInterceptorChain | RealCall.java, line 221
15 | okhttp3.RealCall$AsyncCall.execute | RealCall.java, line 172
16 | okhttp3.internal.NamedRunnable.run | NamedRunnable.java, line 32
17 | java.util.concurrent.ThreadPoolExecutor.runWorker | ThreadPoolExecutor.java, line 1162
```

How can we address this feature?
In Okio 2.x samples, there is only jvm target sample. Could you provide an iOS target sample?
okio version : 2.4.1

Name of automatic module 'okio' is unstable, it is derived from the module's file name.

![image](https://user-images.githubusercontent.com/9427954/68525323-5fc24900-02f6-11ea-8b13-4a2fd7a5821c.png)

