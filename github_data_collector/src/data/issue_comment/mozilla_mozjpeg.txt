Ubuntu 19.10
mozjpeg version 4.0.0 (build 20191129)

**MozJPEG can't read the image (PNG support is disabled in this build)**
- state current version in error message
- which builds support PNG

If this is not supported at all, update error message.
After upgrading mozjpeg, compressing some JPEG images fails with error:
````
Command failed: [...]/mozjpeg/vendor/cjpeg -quality 95 -maxmemory 4096
Backing store not supported
````
Can this be used in php ?
Looks Like libjpeg-turbo 2.0.4 has been released. 
Could mozjpeg be follow up the newest libjpeg-turbo (2.0.4) please?
@kornelski 

https://ci.appveyor.com/project/kornel/mozjpeg-4ekrx/history

any chance of fixing this? i would very much like to get an exe artifact for windows that supports pngs as input.

thanks!
mozjpeg version 4.0.0 (build 20190424). Built on Ubuntu 18.04 x64 from master branch:

```
Unrecognized input file format --- perhaps you need -targa
```

3.3.2 from commit 103c6c32 works fine with the same file and same setup.
Hi,

encoding the following image with `-quality 54` or less yields a severe artifact at the "Ã¼" character; with `-quality 55` or higher, everything is as expected.

The issue occurs with the current git HEAD, 3.2 (the mozjpeg-opt from Arch Linux' user repository), and 3.3.1 (built with an adapted build script). The build instructions for the Arch packages are pretty straightforward: unpack the release tarball and call `autoreconf -fiv`, `configure --with-jpeg8` and `make`. My build from git HEAD was a plain `mkdir build; cd build; cmake ..; make` on an Arch Linux machine; CMake output is attached. The `make` log was clean. As far as I know, I have only Arch's standard repositories' versions of any relevant libraries, freshly updated.

This is a crop from a larger file, where the same problem occurs at several positions; but all have the same structure, that is, a sharp black vertical line in one block. I didn't investigate with rotations etc.

Input: (PNG instead of PNM for the sake of uploading):
![in](https://user-images.githubusercontent.com/4997431/54039222-b05f3080-41c2-11e9-9032-a004236c72a1.png)

`cjpeg-static -quality 54 -outfile moz54.jpg in.pnm`:
![moz54](https://user-images.githubusercontent.com/4997431/54039229-b6551180-41c2-11e9-8964-d17a8a71ac5c.jpg)

`cjpeg-static -quality 55 -outfile moz55.jpg in.pnm`:
![moz55](https://user-images.githubusercontent.com/4997431/54039226-b48b4e00-41c2-11e9-9542-2fb190a69be1.jpg)

[build.log](https://github.com/mozilla/mozjpeg/files/2946522/build.log)
Hi,

I came across some very weird behaviour using jpegtran in ```mozjpeg version 3.4.0 (build 20190114)``` (built from source).

If I use ```-scans``` to transform a baseline JPEG into a progressive one, and my scan script contains a scan performing spectral selection including exactly the first 16 AC coefficients (for any channel), then jpegtran fails with ```Missing Huffman code table entry``` on literally every image I tested.

Here is a scan script to reproduce:
```
0 1 2: 0 0 0 0;
0: 1 16 0 0;
0: 17 63 0 0;
1: 1 63 0 0;
2: 1 63 0 0;
```

Invocation of jpegtran to reproduce:
```
$ jpegtran -copy all -scans test.scan lena10.jpg > /dev/null
Missing Huffman code table entry
```

Replacing the 16 with any other number seems to fix the issue.
The same scan script works fine with ```mozjpeg version 3.3.1 (build 20190105)``` (installed with homebrew). 
subj
Last release was in Mar 2018 240 commits ago? I see that in Nov 2018 [libjpeg-turbo 2.0 got merged](https://github.com/mozilla/mozjpeg/issues/306), there is a commit about tagging 2.0.0, but there is no actual tag in the repo matching that?

As this is the release that drops autotools moving those installs to use CMake instead(according to the [2.0.0 changelog](https://github.com/mozilla/mozjpeg/blob/master/ChangeLog.md)), it'd be handy to have a release to build from rather than master.

I didn't notice any milestone/roadmap listing what was to be done for this release, so I'm not sure if it's waiting on anything?