A proposed way to simplify version branches configuration so commits like 5e9b1a6514e1546ec695ae1d673ae68f992a2382 would potentially be limited to changing up to 4 lines in `config.cmake` (and possibly some changes in `appveyor.yml`). Currently CI scripts read some of build settings directly from `CMakeLists.txt`, such scripts were corrected to allow `config.cmake` define the necessary variables depending on certain conditions (which was necessary to automate most of changes in 5e9b1a6514e1546ec695ae1d673ae68f992a2382-like commits).

The changes are not tested on CI build services yet, Windows-related changes may need more attention as I didn't test them locally.
Resolves: The suggestion to implement extra navigation shortcuts: https://musescore.org/en/node/299829

Originally, this was for [_go to next/previous system_] (https://github.com/musescore/MuseScore/pull/5596) which brought the selection cursor to the top-left of the next/previous system. After the hint that this was too specialized and that other commands should be provided instead/additionally, here is a group of four commands and a description of their behavior. I will cancel the previous pull request since this supersedes it. 

**[Go to top staff]** - Goes to current measure's top staff. If there is no selection at all, this will go to the top staff at measure one 

**[Go to empty trailing measure]** - This is a little more interesting. If there is no active selection, the result will be to take the user to the first staff at the first empty trailing measure of the entire score, practically the same position where the **Tools**->**Remove Empty Trailing Measures** begins deleting. This will give the exact same desired activity i wanted in the old proposed [next system] behavior, under the assumption that the user is working per-system and that the next system starts at the empty trailing measure. 

To give this command a double-edged sword, this will also go to _an individual staff's_ empty trailing measure which may or may not be equivalent to the entire score's empty trailing measure. This can be also useful at times, and at first it was thought that only one or the other would be able to be implemented as a trade off, but after testing, I think having both function and contingent upon whether or not there's a selection makes the most sense with the only trade off being that if the user mainly wants the entire score's trailing measure instead of an individual staff's trailing measure, an [Escape] or clicking off of any elements would be required first. P.S. Since this is dealing explicitly with going to an empty measure, it seemed most logical to enter into Note-Entry Mode automatically after issuing this command. Not so with the other ones. 

Finally, although falling into the background, I didn't want to completely banish having a pair of:

**[Go to next/previous system]** commands to have available if a user should so happen to find it useful (I still do at times even with the above two other functions) depending on their workflow (Especially for score traversal in larger scores). However, this time, the selection will continue on the current working staff as would be expected for default behavior. So here the user can traverse per system forward, or backward. Backward will also take the user to the beginning of the current system before going to previous system. These are moreso 'helper' functions like with the [_go to top staff_] in that if set up by a user, they can aid in speed (instead of doing ctrl+left/right multiple times or alt+up multiple times, these could be used).

+ These compiled locally, passed the mtest ($make in mtest directory is really slow for me unfortunately), and have no bugs as far as I've tested them extensively. 
Resolves: https://musescore.org/node/20390.

This PR uses `minAbsStemLength()` for all stems with tremolos (default placement and placing mid-stem), after some modification.

Quick overview:

Before and After
![image](https://user-images.githubusercontent.com/46259489/72645975-e4dd7480-39af-11ea-98b4-086c0e3b9a70.png)
![image](https://user-images.githubusercontent.com/46259489/72645987-ed35af80-39af-11ea-8a5c-c2625fa2b6e1.png)
Extracted from #5610 (see https://github.com/musescore/MuseScore/pull/5610#discussion_r367874461) to allow more discussion for this particular change.
and add a tooltip mentioning that the key is specified at concert pitch

![image](https://user-images.githubusercontent.com/1786669/72608110-47882f00-3922-11ea-9e05-5141a5343065.png)

at least those that are backwards compatible to at least Qt 5.9.
There are 537 such wanings (C4996 in MSVC), this PR fixes all but 124 of those. The remaining ones use replacements that are available on Qt 5.11, 5.12 or sometimes even later, so may need to get revisited later
For consistency
Resolves:
https://musescore.org/en/node/280584
https://musescore.org/en/node/298638
https://musescore.org/en/node/286497
https://musescore.org/en/node/151121

These commits resolve a couple of courtesy clef visualization bugs when "show courtesy" property is unchecked for the clef, namely clef change and visualization of non-courtesy clef. It also fixes the behavior of inspector for multiple selected clefs when "show courtesy" is checked/unchecked.
The case of multi-measure rest is not covered by this PR.

- [x] I signed [CLA](https://musescore.org/en/cla)
- [x] I made sure the code in the PR follows [the coding rules](https://musescore.org/en/handbook/developers-handbook/finding-your-way-around/musescore-coding-rules)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question "Why do those changes fix that particular issue?" or "Why are those changes really necessary as improvements?"
- [x] I made sure the commit message title starts with "fix #424242:" if there is a related issue
- [x] I created the test (mtest, vtest, script test) to verify the changes I made
Partially resolves: https://musescore.org/en/node/18897.

This enables the "all lines attached to stem" beam style for (only) minim two-note tremolo. It's one of the most common things used in music notation which MuseScore currently doesn't support. The style can be changed in the inspector, and can also become a score style.

![image](https://user-images.githubusercontent.com/46259489/72506561-173a8500-387d-11ea-97a2-fb2d9f156c39.png)
![image](https://user-images.githubusercontent.com/46259489/72506580-1f92c000-387d-11ea-9e50-a9c6c3e00c11.png)

There should be another beam style for minim two-note tremolo, with only one (top/bottom, depending on stem direction) line attached to stem, but it's much more complicated than the former case, and less common too (I haven't seen that once but seen plenty of the "all lines attached" style). This doesn't mean it shouldn't be supported, but the "all lines attached" style option is much more requested and should probably be supported ASAP.
Resolves: [Issue  #299539](https://musescore.org/en/node/299539)

This PR fixes a set of related logical bugs in the command line interface handling logic. Essentially, in master as it stands right now, two options are somewhat intertwined, but break each other in subtle ways, which leads to plugins being entirely broken when run in command line mode: 

- Plugin mode does nothing when enabled by itself, and after making changes to a score, simply discards them. 
- Converter mode (which should then save changes), instead re-loads score files, discarding changes made by the plugin mode. 
- Finally converter mode *also* attempts to run plugins but, however, it doesn't run the plugin specified by the user - said plugin name is replaced with the empty string, so no plugins are actually run. 

The overall effect is that plugins (when specified at the command line) either a) do something, and then discard their work, or b) are ignored. This PR fixes this issue in the following way: 

- Firstly, "standalone" plugin mode has been removed, with plugins instead being run during converter mode. 
- Converter mode now correctly runs the user-specified plugin when invoked with plugin mode. 
- Converter mode also has a small number of fixes to correctly load a score in order to allow plugins to run correctly. 

- [x] I signed [CLA](https://musescore.org/en/cla)
- [x] I made sure the code in the PR follows [the coding rules](https://musescore.org/en/handbook/developers-handbook/finding-your-way-around/musescore-coding-rules)
- [x] I made sure the code compiles on my machine
- [x] I made sure there are no unnecessary changes in the code
- [x] I made sure the title of the PR reflects the core meaning of the issue you are solving
- [x] I made sure the commit message(s) contain a description and answer the question "Why do those changes fix that particular issue?" or "Why are those changes really necessary as improvements?"
- [x] I made sure the commit message title starts with "fix #424242:" if there is a related issue
- [ ] I created the test (mtest, vtest, script test) to verify the changes I made
