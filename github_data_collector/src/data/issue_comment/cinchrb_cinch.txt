Allows users to avoid IPv4 or IPv6 connections to their intended IRC server.

In progress, untested. I'll confirm that this works tomorrow.
This resolves an issue with Cinch not correctly parsing `AUTHENTICATE +` and potentially other types of messages.

See also b002f22251c7a933b27514831f373bbb02bc8af6.

Fixes #263.
As of commit b002f22251c7a933b27514831f373bbb02bc8af6, cinch no longer responds to `AUTHENTICATE +` messages during `SASL PLAIN` authentication.

The commit currently isn't present in any released versions.

@Defman21
This lets users specify custom ca_file / ciphers list.
This adds sending an OPER request automatically if 
`@bot.config.oper["user"]`
`@bot.config.oper["pass"]`
are set in your config, in on_001.

This adds an :oper event, which can be listened for. This happens if the client recieves a 381, which signifies that the client is now an operator. 
`listen_to :oper, method: :test`

This adds an :oper_fail event, which can be listened for. This happens if the client recieves a 464, which is an invalid password event.
`listen_to :oper_fail, method: :test`

This adds a `@bot.is_oper` boolean.
When Opering on InspIRCd to an o:line (or operclass) with attached snomasks, ModeParser fails with a  Cinch::ModeParser::TooManyParametersError exception.

Seems to be caused by the module not expecting usermodes to have parameters at all.
The issue could be fixed [here](../blob/v2.3.4/lib/cinch/irc.rb#L515), but i am.. almost completely unsure how to fix this without foobaring other networks.

Trace:
```
[2018/01/03 18:14:51.724] II Detected IRCd: inspircd
[2018/01/03 18:14:51.725] II Detected network: irchighway
[2018/01/03 18:14:52.075] !! /home/vhost/.rvm/gems/ruby-2.4.1/gems/cinch-2.3.4/lib/cinch/irc.rb:517:in `parse_bot_modes': #<struct Cinch::ModeParser::TooManyParametersError modes="+s", params=["+lLAakKoOtGg"]> (Cinch::Exceptions::InvalidModeString)
[2018/01/03 18:14:52.075] !!    /home/vhost/.rvm/gems/ruby-2.4.1/gems/cinch-2.3.4/lib/cinch/irc.rb:453:in `on_mode'
[2018/01/03 18:14:52.075] !!    /home/vhost/.rvm/gems/ruby-2.4.1/gems/cinch-2.3.4/lib/cinch/irc.rb:263:in `parse'
[2018/01/03 18:14:52.075] !!    /home/vhost/.rvm/gems/ruby-2.4.1/gems/cinch-2.3.4/lib/cinch/irc.rb:151:in `block (2 levels) in start_reading_thread'
[2018/01/03 18:14:52.076] !!    /home/vhost/.rvm/gems/ruby-2.4.1/gems/cinch-2.3.4/lib/cinch/helpers.rb:123:in `rescue_exception'
[2018/01/03 18:14:52.076] !!    /home/vhost/.rvm/gems/ruby-2.4.1/gems/cinch-2.3.4/lib/cinch/irc.rb:149:in `block in start_reading_thread'
```
adding a configuration option for the bot: proxy
It looks like the regex on line 100 of lib/cinch/message.rb is broken for twitch IRCv3 when emotes are used in the message:

Example message that breaks the regex:
`@badges=moderator/1,subscriber/24,bits/50000;color=#D63F50;display-name=CyclopsDragon;emotes=15017:11-16;id=e4964802-5310-449d-b8f1-52be38ff1d26;mod=1;room-id=21836069;sent-ts=1502929472853;subscriber=1;tmi-sent-ts=1502929475647;turbo=0;user-id=6342406;user-type=mod :cyclopsdragon!cyclopsdragon@cyclopsdragon.tmi.twitch.tv PRIVMSG #geoff :hi gibeDu`

On Twitch's IRC the emotes tag will contain a colon which breaks the regex preventing the message from being parsed.
I have cinch bots running on multiple networks and channels. I spawn a new thread for each bot I create per network. Many of those channels are getting very many channel messages. I have several on_channel handlers with regular expression:

on :channel, /.../ do |m, match1, match2 ... |

My last matchgroup would usually contain the rest of the message.

Quite often this last match group contains not only the remainder of the message, but also another messag efollowing right afterwards without any linebreaks separating the two.

For me this looks like a race condition and it makes it quite difficult to create some kind of show case. At least I can tell so far that I don't get any handler thread inflations which happen when my handlers were too slow.
At the moment cinch does not support reverse dcc sends.

https://en.wikipedia.org/wiki/Direct_Client-to-Client#Reverse_.2F_Firewall_DCC

It doesn't detect these messages and never fires the dcc_send event. This is due to the regex used:

```
message =~ /^\001DCC SEND (?:"([^"]+)"|(\S+)) (\S+) (\d+)(?: (\d+))?\001$/
```

For reverse DCCs the port is set to 0 and the filesize is followed by an additional parameter - a token.

The first step towards supporting reverse DCCs would be to detect them by updating the regex.