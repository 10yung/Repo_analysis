* Update to SDL 2.0.10 on Windows
* Update all stb dependencies
See https://github.com/gosu/gosu/pull/501#discussion_r324462429
Bug reported by @edwinacunav via Discord: Apparently when you leave out the color, nothing will be displayed on screen. The default should be white.
Here's a simple implementation for #506. This PR also sets the icon for TutorialExample to Starfighter.bmp.

I've tested it on macOS. I'm not sure what would happen on other platforms, but we should be able to look at SDL_SetWindowIcon() to see what would happen.

Looks like it supports the alpha channel. Yay! :)

Here's a screenshot of TutorialExample. You can see the icon in the dock.

![Window icon in TutorialExample on macOS](https://user-images.githubusercontent.com/107998/64741238-ab01dc00-d4ac-11e9-9e4f-e40a8dfde7f1.png)

ref: https://wiki.libsdl.org/SDL_SetWindowIcon
This time I'll try to submit my changes to the audio department the right way. The main changes would be the addition of playback position and duration and enabling functions like resume because I do think it's useful just to call it instead of passing a boolean to play(boolean) once again. (Especially useful if you want a single button to let you pause and resume songs at will.) With resume we no longer need to keep track of the initial settings. About position I might say it's convenient if anybody wants to show how many seconds are left before the song ends or simply tell the player how long he's been listening to the same song. I know for sure it gets reset after a new song starts playing. (I hate looping songs because they remind me of an closed source game engine...) Keep in mind it'll be hard or even impossible to keep track of a position on songs with variable bitrates. :S

From Ruby those things should be called:

```ruby
@song.position # Returns a Float
@song.position = Float # in seconds, not frames nor samples, just seconds
@song.position_minutes
@song.position_hours # Just in case it's some instrumental soundtrack like a symphony of sorts
@song.duration
@song.resume
```
I've been using it while playing OGG files so I know they run smoothly.
Technically, Gosu supports any refresh rate because `Window::Window()` takes `update_interval = 16.666666` as the fourth parameter. However, that default value is 60 Hz and there's no function to find the native refresh rate of the user's displays. The issue at hand is that displaying a game at 60 Hz on a monitor with 2x or greater that refresh rate, especially if the monitor's refresh rate does not divide smoothly into 60 (like 144 Hz), doesn't look too nice!

### Motivation

- It's becoming more common for Windows gaming laptops and desktop monitors to do 144 Hz or higher.
- Apple iPad Pro has a 120 Hz ProMotion display. One day an iPhone may come out with a 120 Hz display, as well. And maybe a MacBook Pro one day, too?
- Some Android phones have 120 Hz, as well.
- High refresh rate monitors can technically be used on Linux.

### Proposals

A couple of simple but not-too-well-thought-out-yet ideas for this:

#### Proposal 1: add a `Gosu::refresh_rate()`

One idea is Gosu could have a refresh rate equivalent of `unsigned Gosu::screen_width()`. You could call this function and give its return value to `Window::set_update_interval()`.

#### Proposal 2: allow `Window::Window()` to determine the refresh rate

`Window`'s constructor (maybe a new constructor for backwards compatibility?) can set its refresh rate to the display automatically.

### Resources

SDL2 can be queried for the refresh rate of an SDL_Window.

- https://wiki.libsdl.org/SDL_GetWindowDisplayMode

### Assumptions

We don't need to handle refresh rate changes if a game window is moved from one monitor to the next.
Currently images can be loaded and saved out (and destroyed.)
My goal is to emulate the Ruby gem as much as possible. That is, Implement the 9 classes and methods as closely as is practical.

C Image basic load and save test:
```C
#include "../gosu/Gosu/Image.h"

struct Gosu_Image *image;
int main()
{
  image = Gosu_Image_create("/home/cyberarm/Downloads/waterSim.png", 0x00000000);
  Gosu_Image_save(image, "path.png");
  Gosu_Image_destroy(image);
  return 0;
}
```

Edit:
### Current State
Fully Implemented: _(probably)*_
* [X] **Song**
* [X] **Sample**
* [X] **Channel**
* [X] **TextInput**
* [X] **Window**
* [X] **Color**
* [X] **Font**
* [x] **Image**
* [X] **Gosu**
* [X] Button Constants

Implemented with issues:
* [ ] Gosu Constants
  * [ ] TODO: String constants `VERSION`, `LICENSES` and probably others are returning `NULL` (Might not be initialized at compile time?) https://github.com/gosu/gosu/pull/501#discussion_r323615412
  * [ ] TODO: Add various constants for Font alignment and style, AlphaMode (BlendMode), and Image texture modes (smooth, retro, tiled) enums
Is there no way to make the game window resizable for Linux users?  I can't seem to figure out how to get it to work.  Setting resizable to true does nothing for me.
See video: https://youtu.be/xE2LUiSjiL0