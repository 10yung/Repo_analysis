Using `MemoryProfiler.start` on one of our jobs, and then waiting to dump `MemoryProfile.stop&.pretty_print` took a job that uses 2gb of memory to 76gb of memory. Is there a way we can prevent this kind of memory usage? Even running memory profiler for a few short seconds causes it to jump to exponential levels.
Followup on: https://github.com/SamSaffron/memory_profiler/pull/58

I believe why calling it 3 times seemed to work is that it increase the chances to trigger a `full_mark`, but if it's the intent, might as well as for it directly.

Please correct me if I'm wrong.

@SamSaffron @william101 
Allocated is usually not all that important to optimize, and the output is really verbose, so option to cut it in half would be much appreciated (especially since there's no simple grep can get the more relevant part).
hi guys 
i have a problem on youtube-dl.rb gem when i want download a big video ( 1/5gb) from youtube my ram is crashed ( i have 4 gb ram on server)  because after download video i see ram graph and up to 2gb after download again ram up to 3 and again 4 and as a result server crashed 

now i use memory_profiler gem this awesome but after download video ram up to 1.100 mb and again 1.200 mb ....... and again up to 4 and again crashed 
also after complete download ram buffer not start to flush buffer

I noticed today (I also updated my Gems today , so it might be related).
That memory_profiler now reports it's own footprint as a part of the analysis report.
I believe this wasn't the case before and it creates a false top level analysis metrics.

See the example here:
https://gist.github.com/ohaddahan/cdaef533abf963f16f7bccec141c2185

Most of the memory report is actually caused by memory_profiler.
```

Total allocated: 28693134 bytes (206218 objects)
Total retained:  28671354 bytes (205866 objects)

allocated memory by gem
-----------------------------------
  28664857  memory_profiler-0.9.8
     26437  chili-hunter-2/app
      1840  activesupport-5.0.0
```