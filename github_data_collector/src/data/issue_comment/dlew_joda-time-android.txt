Hi guys!

An user had a crash this morning (samsung Galaxy S7, Android  7.0):

> Fatal Exception: java.lang.NoSuchMethodError
> No direct method ()B in class B or its super classes (declaration of 'byte' appears in generated class)
> org.joda.time.UTCDateTimeZone.<init>

```
org.joda.time.UTCDateTimeZone.<init> (UTCDateTimeZone.java:30)
org.joda.time.UTCDateTimeZone.<clinit> (UTCDateTimeZone.java:26)
org.joda.time.DateTimeZone.<clinit> (DateTimeZone.java:108)
net.danlew.android.joda.ResourceZoneInfoProvider.loadZoneInfoMap (ResourceZoneInfoProvider.java:174)
net.danlew.android.joda.ResourceZoneInfoProvider.<init> (ResourceZoneInfoProvider.java:38)
net.danlew.android.joda.JodaTimeAndroid.init (JodaTimeAndroid.java:39)
com.xxxx.MyApplication.setupApplication (MyApplication.java:138)
```

In my proguard file, I have:

-dontwarn org.joda.convert.**
-dontwarn org.joda.time.**
-keep class org.joda.time.** { *; }
-keep interface org.joda.time.** { *; }

Thank you very much for your great work!
The program signature will die, how to solve
Hi,

currently `getRelativeTimeSpanString` method returns relative timespan to `DateTime.now()`. What do you think of extending it where you could get `getRelativeTimeSpanString` relative to some another `DateTime`? 

Thank you
# Reproduction steps
1) git clone repo
2) Run "sample" configuration

```
* What went wrong:
Circular dependency between the following tasks:
:sample:checkManifestChangesDebug
\--- :sample:instantRunMainApkResourcesDebug
     \--- :sample:transformClassesAndDexWithShrinkResForDebug
          \--- :sample:transformDexArchiveWithDexMergerForDebug
               +--- :sample:preColdswapDebug
               |    \--- :sample:incrementalDebugTasks
               |         +--- :sample:transformClassesAndClassesEnhancedWithInstantReloadDexForDebug
               |         |    \--- :sample:transformClassesWithInstantRunForDebug
               |         |         \--- :sample:checkManifestChangesDebug (*)
               |         \--- :sample:transformClassesWithInstantRunForDebug (*)
               \--- :sample:transformClassesWithDexBuilderForDebug
                    +--- :sample:preColdswapDebug (*)
                    \--- :sample:transformClassesWithInstantRunForDebug (*)

(*) - details omitted (listed previously)

```
Hi,

This is the stacktrace without any proguard rules
```
Caused by: java.lang.RuntimeException: Could not read ZoneInfoMap. You are probably using Proguard wrong.
                                                       at net.danlew.android.joda.a.a(JodaTimeAndroid.java:42)
```

```
Failed to retrieve identifier: type=class net.danlew.android.joda.b$a name=joda_zoneinfomap
                                                    java.lang.NoSuchFieldException: joda_zoneinfomap
                                                        at java.lang.Class.getField(Class.java:891)
                                                        at net.danlew.android.joda.c.a(ResUtils.java:105)
                                                        at net.danlew.android.joda.d.a(ResourceZoneInfoProvider.java:113)
                                                        at net.danlew.android.joda.d.<init>(ResourceZoneInfoProvider.java:38)
                                                        at net.danlew.android.joda.a.a(JodaTimeAndroid.java:39)
```

Using these rules solve the problem but I wonder what do you recommend
```
-dontwarn org.joda.convert.**
-dontwarn org.joda.time.**
-keep class org.joda.time.** { *; }
-keep interface org.joda.time.** { *; }
-keep class net.danlew.** { *; }
```
Hi,

I think I'm facing a timeZone bug.
It only happens when I first run my app. Here is how I reproduce the bug :

   1. I reset my android 6.0 tablet to factory default. At bootup, it comes with an older version of my app installed as a system-app which starts automatically.
   2. I install a newer version through adb shell.
   3. I start the app and display date and time which is wrong because of the timeZone (UTC instead of Europe/Amsterdam).
   3. I kill the app and start it up again. Now, it displays the right date & time with the Europe/Amsterdam timeZone.

TimeZone is correct when I use java.util's TimeZone.

`DateTimeZone.getDefault() => "UTC"`
`TimeZone.getDefault()        => "Europe/Amsterdam"`

Thank your work and  for helping.

[StackOverflow question](https://stackoverflow.com/questions/51159685/android-joda-time-incorrect-timezone-on-app-first-run-then-ok-after-app-restart)


Affected file:
https://github.com/dlew/joda-time-android/blob/master/library/src/main/res/values-ru/strings.xml

For quantity="one", number "1" is hardcoded.
This is wrong, because for example number 41 matches quantity="one" in Russian language, so instead of "41 minute ago" we get "1 minute ago" (I used English text just for example)

Because https://github.com/dlew/joda-time-android/blob/master/library/src/main/res/raw/joda_keep.xml references itself, so it ends up getting packaged.

The default formats provided through JodaTime are not entirely compatible with Android.

A simple demonstration is to use the DateTimeFormatter.fullDateTime() method in your code, and have the phone set to use Suomi as language, which will fail because the android version of SimpleDateFormat includes 'c' for "stand-alone day of week" which is not supported by JodaTime.
