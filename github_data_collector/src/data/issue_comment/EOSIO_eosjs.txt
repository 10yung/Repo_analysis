As release 21 eliminates eosjs-ecc library, two important functions are missing: signing and verifying an arbitrary piece of data.

using eosio-ecc, I could take a serialized private key and sign a blob of data, and export the signature in text or binary form.  Also I could load the signature from a 65-bytes binary array and verify it against a public key and the data blob.

Now if I do the same, I need to replicate the conversion from serialized form into elliptic object, and call its sign or verify methods. This creates code duplication and risk of incompatibility.

The eosjs library needs to export simple methods for signing and verifying an arbitrary blob of data. At the moment the Signature Provider object does it for transaction data directly, so there's no abstraction interface.




**Version of EOSJS**
_which version of eosjs exhibits the issue_
"eosjs": "^20.0.2",
**Describe the bug**
A clear and concise description of what the bug is.

For now, most jungle node change to hyperion history from v1 history. So does the eosjs still support Hyperion version?

Because when i try to get access to hyperion node, the follow error will be got.

storeman 2020-01-16 18:13:40,968 syncLogger ERROR getBlockNumberSync from : EOS { FetchError: invalid json response body at https://jungle.hyperion.eosrio.io/v1/chain/get_info reason: Unexpected token < in JSON at position 0
    at Y:\wanchain\crossChain\git\storeman\node_modules\node-fetch\lib\index.js:272:32
    at process._tickCallback (internal/process/next_tick.js:68:7)
  message:
   'invalid json response body at https://jungle.hyperion.eosrio.io/v1/chain/get_info reason: Unexpected token < in JSON at position 0',
  type: 'invalid-json',
  isFetchError: true }

And in file node_modules\eosjs\dist\eosjs-jsonrpc.js, we can find follow, does this mean, this cannot support hyperion version?  :
    /** Raw call to `/v1/chain/get_info` */
    JsonRpc.prototype.get_info = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_info', {})];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
<!-- PLEASE FILL OUT THE FOLLOWING MARKDOWN TEMPLATE -->
<!-- PR title alone should be sufficient to understand changes. -->

## Change Description
<!-- Describe your changes, their justification, AND their impact. Reference issues or pull requests where possible (use '#XX' or 'GH-XX' where XX is the issue or pull request number). -->


## API Changes
- [ ] API Changes
<!-- checked [x] = API changes; unchecked [ ] = no changes, ignore this section -->
<!-- If this PR introduces API changes, please describe the changes here. What will developers need to know before upgrading to this version? -->


## Documentation Additions
- [ ] Documentation Additions
<!-- checked [x] = Documentation changes; unchecked [ ] = no changes, ignore this section -->
<!-- Describe what must be added to the documentation after merge. -->

**Version of EOSJS**
20.0

**Describe the bug**
This looks like a dead link: https://eosio.github.io/eosjs/latest/00_introduction
linked from this page: https://eosio.github.io/eosjs/latest/technical-overview

**To Reproduce**
Steps to reproduce the behavior:
1. Go to https://eosio.github.io/eosjs/latest/technical-overview

![image](https://user-images.githubusercontent.com/20178448/71578333-ae3fd700-2b32-11ea-96b3-28606a42d01a.png) 
![image](https://user-images.githubusercontent.com/20178448/71578339-b4ce4e80-2b32-11ea-953a-ffc3aeda1d83.png)

Is it because of the NodeOS node version or the wrong way of using it?
### Overview

This is a rather simple semantic to add to the project.
Currently, the documentation asks users to clone and build the project from scratch.

**As seen here:** https://eosio.github.io/eosjs/latest/basic-usage/browser

Of course, a CDN is much simpler and easier to use... You can just pop in a script and you're good to go... However, it would be nice to have some DevOps integrations to automatically deploy new releases on every RC or commit to master.

### Suggested Tasks

1. Update a CDN (ie: JSDelivr) with the latest build from `yarn build-web` via CI.

2. Update documentation to point users to be able to use the CDN over having to manually build the web files from scratch.
**Version of EOSJS**
20.0

**Describe the bug**
the `yarn build-web` command does not seem working in this page:  https://eosio.github.io/eosjs/latest/basic-usage/browser

Some prerequisite is required? 

**To Reproduce**
Steps to reproduce the behavior:

Run this command:
`yarn build-web`

**Expected behavior**
command can be execute


**Desktop (please complete the following information):**
 - OS: mac os x brew x yarn v1.21.1

**Additional context**
Add any other context about the problem here.

Hi! is there any way to validate eos wallet address? regex or smth like that?
How to use the Consensus upgrade feature **bill_to_accounts** in eosjs which is mentioned in 
https://github.com/EOSIO/eos/issues/6332 

Please advice 
**Version of EOSJS**
Latest

**Describe the bug**
The `GetBlockResult` type defined in `eosjs-rpc-interfaces.ts` is missing a large amount of data that is actually returned in this call. In particular the following fields are missing:
- transactions
- new_producers
- header_extensions
- block_extensions

**To Reproduce**
Attempt to use EOSJS in TypeScript application and access data on a transaction in a block. TypeScript will complain that the `transactions` property does not exist so compilations will fail when trying to access it or any of the many sub-properties.

**Expected behavior**
The .d.ts typescript definitions should include ALL properties in the GetBlockResult return type.

**Screenshots**
<img width="422" alt="Screen Shot 2019-12-03 at 9 17 27 AM" src="https://user-images.githubusercontent.com/2394363/70058896-c3662c00-15ad-11ea-9c53-515645f3813e.png">
