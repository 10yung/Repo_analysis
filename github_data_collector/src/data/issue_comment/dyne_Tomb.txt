while `zsh` handles binary data correctly in its process substitution, other shells like `bash` and `fish` don't.

`zsh`:
```
% print -R -n - $pass | wc -c
509
```

`bash`:
```
-bash: warning: command substitution: ignored null byte in input
$ echo -n -e $pass | wc -c
507
```

`fish`:
```
> echo -n -e $pass | wc -c
323
```

In order to pass the correct key to `cryptsetup` I think the best way would be to pipe the `gpg` output to `head -c -1` to remove the newline created by `gpg`; this way the commands would be:

```
lo=$(losetup -f)
losetup -f secret.tomb
gpg -d secret.key | head -c -1 | cryptsetup --key-file - luksOpen $lo secret
mount /dev/mapper/secret /mnt
```
**edit 1**

That test was with a gpg key; today i tried with symmetric encryption and the resulting file from gpg didn't have a newline, so the commands above wouldn't work... maybe this is a gpg bug

**edit 2**

It's definitely not a gpg bug, in `gen_key()` the `print` options are just `-` for a gpg key ([line 1423](https://github.com/dyne/Tomb/blob/master/tomb#L1423) and `-n -` for a symmetric key [line 1498](https://github.com/dyne/Tomb/blob/master/tomb#L1498)
If a user sets GNUPGHOME before the first run, the keyring wouldn't be stored in $HOME/.gnupg, so the check in [lines 1931-1933](https://github.com/dyne/Tomb/blob/master/tomb#L1931-L1933) would just create an empty folder with an empty file.

I would update the aforementioned check with this snippet:
```
local gpghome=${GNUPGHOME:-$HOME/.gnupg}
[[ -r $gpghome/pubring.gpg ]] || {
        mkdir -p -m 0700 $gpghome
        touch $gpghome/pubring.gpg }
```
This software uses `user_xattr` to save hashes of files and their mtime, to detect changes.
https://github.com/oriansj/cshatag

It may be used to check both on tomb contents and on tomb files?
There are situations in which one may be coerced to give up the password, with a fine or imprisonment or even torture. We can address this in Tomb v3 with a new feature, hereby proposed.

An additional 'emergency' password may be given: when used to open the tomb will silently wipe all contents and eventually place decoy contents inside to not raise suspicion. This should happen without leaving a trace of the operation. Of course those adopting this feature are supposed to have backups of the Tomb in another place.

I'm interested in discussing this feature while designing the upcoming Tomb major version which will rely on [Zenroom](https://dev.zenroom.org) rather than GnuPG for key encryption, hence offering more advanced logics of interaction with passwords and keys as well advanced crypto as zero-knowledge proofs (zk-SNARKS).

Comments welcome.
The manpage tomb(1) mentions "tomb dig" but doesn't tell what are the arguments and in what order.

```
% tomb dig        
tomb  .  Commanded to dig tomb 
tomb [E] Missing path to tomb
% tomb dig my.tomb
tomb  .  Commanded to dig tomb my.tomb
tomb [E] Tombs can't be smaller than 10 mebibytes
% tomb dig my.tomb 10
tomb  .  Commanded to dig tomb my.tomb
tomb [E] Tombs can't be smaller than 10 mebibytes
% tomb dig -h     
tomb  .  Commanded to dig tomb 
tomb [E] Missing path to tomb
```

`tomb dig -h` should give the subcommand help and the manpage should mention expected args for a subcommand.
When trying to resize a `tomb` the `e2fsck` tool is used... so e2fsprogs should be a dependency
 
```
~ via 🐍 3.6.1 
•5% ➜ tomb resize -s 100 .password.tomb -k .password.tomb.key
tomb  .  Commanded to resize tomb .password.tomb to 100 mebibytes.
tomb  .  Valid tomb file found: .password.tomb
tomb  .  Key is valid.
tomb  .  Generating .password.tomb of 100MiB
90+0 records in
90+0 records out
94371840 bytes (94 MB, 90 MiB) copied, 0.774796 s, 122 MB/s
tomb  .  A password is required to use key .password.tomb.key
tomb  .  Password OK.
tomb  .  opening tomb
.password: 111/2048 files (1.8% non-contiguous), 1453/8192 blocks
tomb [E] e2fsck failed to check tomb..password.1565088755.loop0

~ via 🐍 3.6.1 took 21s 
•5% ➜ e2fsck
zsh: command not found: e2fsck
```
I'm trying to run Tomb in [Termux](https://termux.com/).

I have been able to install pinentry, gnupg, cryptsetup and zsh:

```bash
pkg install root-repo
pkg install pinentry gnupg cryptsetup zsh
```

I then got Tomb's source code, cd into it and ran `make install` successfully.

Now, trying to run `tomb --version`, I get:

```
/data/data/com.termux/files/usr/bin/tomb:68: failed to load module: zsh/mapfile
tomb [E] Missing required dependency sudo.  Please install it.
```

If in Termux, `sudo` should not be used. I don't know how to fix the `zsh/mapfile` failure yet.

Would you want to support Termux anyway? Could be great to have tombs on my phone :wink: 
I can't open one of my encrypted containers because of the next error:

> tomb [D] using pinentry-gtk2
tomb [D] get_lukskey
tomb [D] Created tempfile: /tmp/zsh/1549626126121704613
tomb [D] gpg: datos cifrados 3DES
tomb [D] [GNUPG:] NEED_PASSPHRASE_SYM 2 3 2
tomb [D] gpg: cifrado con 1 frase contraseña
tomb [D] [GNUPG:] BEGIN_DECRYPTION
tomb [D] [GNUPG:] DECRYPTION_COMPLIANCE_MODE 23
tomb [D] [GNUPG:] DECRYPTION_INFO 0 2
tomb [D] [GNUPG:] PLAINTEXT 62 1369073423 tomb.10546.JYbkTu5
tomb [D] [GNUPG:] PLAINTEXT_LENGTH 256
tomb [D] gpg: ATENCIÓN: la intgridad del mensaje no está protegida
tomb [D] gpg: Hint: If this message was created before the year 2003 it is
tomb [D]      likely that this message is legitimate.  This is because back
tomb [D]      then integrity protection was not widely used.
tomb [D] gpg: Use the option '--ignore-mdc-error' to decrypt anyway.
tomb [D] [GNUPG:] ERROR nomdc_with_legacy_cipher 152
tomb [D] gpg: decryption forced to fail!
tomb [D] [GNUPG:] DECRYPTION_FAILED
tomb [D] [GNUPG:] END_DECRYPTION

My Tomb version is 2.5 and the command executed
> tomb open --ignore-swap misdatos.tomb -k misdatos.tomb.key

My Linux kernel version:

> Linux arch 4.19.2-arch1-1-ARCH #1 SMP PREEMPT Tue Nov 13 21:16:19 UTC 2018 x86_64 GNU/Linux

Is there anything I can do in order to open my container? Thank you very much
A tomb file would become impossible to mount in certain conditions after a failed resize. Here's how to reproduce the issue:

1. Create a tomb as normal (`dig`, `forge` a key, then `lock` the tomb with that key).
2. Use `tomb resize` on the tomb file.
3. Insert a wrong password 3 times, or at least until it fails.

Now, the tomb file is resized evenutally however it will becomes umountable and returns "Failure mounting the encrypted file".

I'd suggest to fix by asking for the passphrase before actually resizing it.

semid 9273344: semop failed for cookie 0xd4d9cac: incorrect semaphore state
Failed to set a proper state for notification semaphore identified by cookie value 223190188 (0xd4d9cac) to initialize waiting for incoming notifications.

This happens often when you tomb lock. Perhaps it happens on other functions also. This message turns out to be harmless, and happens when everything's going perfectly. But it reduces user confidence in a program that already has some misleading content.

This message seems to  indicate yet another try to get possession of a file. If so, and if you have control over the software writing this message, it should say "seeking control of file whatever",  not something with the word "failed" in it.