super minor, sorry for the pedantry  :)

Signed-off-by: Alex <alex@theshrine.ca>
Tracking issue: https://github.com/rust-lang/rust/issues/62254
Stabilization PR & report: https://github.com/rust-lang/rust/pull/67712#issue-357908384
Version: 1.42.0.

I'm not sure it's a good idea to have the sentence "Feel free to write some tests for the functionality in the Config::new and run functions on your own" be the end of the opening paragraph of Chapter 12-4. The main reason I think that is because of `run`'s side effects:

```rust
fn run(config: Config) -> Result<(), Box<dyn Error>> {
    // talks to the filesystem
    let contents = fs::read_to_string(config.filename)?;

    // talks to stdout
    println!("With text:\n{}", contents);

    // --snip--
}
```

Many programmers will instinctively reach for test doubles when unit testing this function in order to isolate it from IO. As I found out, good, versatile test doubles in Rust are quite challenging to set up for a beginner. I eventually arrived at a [solution](https://gist.github.com/spinnylights/02308de189f7330da595fcdff394426c) I was happy with, but it took me 10 hours of reading and coding to get there starting from what I had learned so far, with lots of bumps and false starts along the way. Although I feel a lot more comfortable with Rust's advanced features now, and I'm deeply relieved to know that nice test doubles are possible to implement in it, I don't think the book intends for the reader to go to such great lengths at the beginning of this chapter.

It would be nice if Rust either had stronger first-class supporting for testing, or features that make testing easier, like default parameter values and keyword arguments. In either case, readers could then be lightly introduced to idiomatic versions of these sorts of common testing patterns in Chapter 11, enabling them to write unit tests for `run` without much trouble. With the language in its current state, though, that doesn't really seem practical, so I think it might be a good idea to put off discussion of them until readers have gotten more comfortable with traits and generics.

I do get that it's a little weird to launch into TDDing a new feature while there's untested code lying around. Maybe the end of the opening paragraph could say something like, "Feel free to write some tests for the functionality in the Config::new and run functions on your own. Don't sweat it if you find it challenging at this pointâ€”it'll get easier as you become more familiar with the type system." I think I would have found my initial difficulty with test doubles less disturbing if I had read that.

In chapter 10, section: [Using Trait Bounds to Conditionally Implement Methods](https://doc.rust-lang.org/book/ch10-02-traits.html)  `Self` was used in the example. That would be the first time `Self` will be appearing in the book. It would be useful to provide a brief explanation of what `Self` does. 
The repo for the Japanese translation changed earlier, but the Appendices link wasn't updated.

Tracked in the JA translation repo at https://github.com/rust-lang-ja/book-ja/issues/8 .
In chapter 4, section 4.3 https://doc.rust-lang.org/nightly/book/ch04-03-slices.html the example that is used to motivate the need for slice type is different from the example where the problem is actually solved with slice types.

The example involved a function with the following signature:

`fn first_word(s: &String) -> usize`

But the function used to show how slice types can be used is:

`fn first_word(s: &String) -> &str`

I am of the opinion that even with the slice type, the original problem/situation with the motivating example still exist!

I would suggest to use the same function in the problem motivation section as we have it in the solution.
Is there a reason why the RustC version is pinned to 1.37?
I'm thinking it would be a little more useful to have the CI build build with multiple RustC versions, to check for any regressions or deprecated features in example code would be better.

I also saw that at some point there was a check-stable script, but I no longer see it.

I'm imagining that the only reason to test against an older version than the current latest stable is to make sure the code works for the oldest stable compiler that supports the used/described features in the book, is this the reason?
There are a lot of phrases like this:

[ch04-01](https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html)
> The capacity is the total amount of memory, in bytes, that the String has received from the operating system.

And it could be misunderstood like "OS is responsible for memory management". But actually usually there are allocator and allocation strategies. And it is painful to read about OS allocating
memory for individual strings. But yes, it does it in some way through **allocator**.
This commit documents errors that a developer might face when compiling Rust projects on Windows 10.

It is by far not a comprehensive list of errors and solutions, but its a start, and document the errors I've faced when trying to compile https://github.com/rust-lang/www.rust-lang.org on Windows 10, on two scenarios:

- Fresh `rustup` installation, following the instructions on screen, and installing VS Build Tools 2019
- Older installation of `rustup`, using VS Build Tools 2017

It is important to also be aware that following the instructions of installing VS Build Tools 2019 might require patches on `*-sys` crates, as their `build.rs` might not work for the new locations on the new edition of MS Build Tools. For example: https://github.com/compass-rs/sass-rs/pull/49

This is a port from [rustup](https://github.com/rust-lang/rustup/pull/1909) documentation suggestion into the book as discussed on the thread.