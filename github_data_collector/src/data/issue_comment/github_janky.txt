http://mf-doom-42.herokuapp.com/ can be takeover from Heroku because there is no app on it.
I followed the setup instructions but am getting this error, even though the Heroku instance has this dir. Any suggestions?
Don't break the Ruby 2.4 support added in #237, but also support Ruby 2.5.
This is true for builds triggered by GitHub webhooks and hubot:

```
mkantor: hubot ci build janky/v0.10.2
hubot: Unknown branch "v0.10.2". Push again
```

I was surprised by this since I my git experience tells me that annotated tags are just another kind of named ref and should be treated similarly to branches in general.

The particular issue that caused me to realize this was that release tags for a project configured with Janky were not being CI'd. If anything needs to be built/tested, it's releases! I'm able to work around this by telling hubot to `hubot ci build project/master` immediately after tagging, but this is kind of silly.

~~Janky also doesn't understand how to build SHAs, which is unfortunate but a bit more understandable.~~ **EDIT:** It looks like #186 fixed this.

Allow (for the purpose of some Dashboards, for example) to do something similar to the hubot status request for a branch - but for a project, returning the status of all known branches (or all current branches on Github).

I currently have to poll this via the Github API for each individual branch (grab branches, get sha's request build status for each sha).  Doing this via janky would be preferable (so as to not overload github, and to have it all in a single request)

If the repo already has a hook in place, you get this

```
irb(main):008:0> Janky::Repository.setup('libgit2/rugged', 'rugged-continuous')
Janky::Error: Failed to create hook
    from /data/janky/vendor/gems/ruby/1.9.1/bundler/gems/janky-29f5cf09ae91/lib/janky/github.rb:125:in `hook_create'
    from /data/janky/vendor/gems/ruby/1.9.1/bundler/gems/janky-29f5cf09ae91/lib/janky/repository.rb:147:in `setup_hook'
    from /data/janky/vendor/gems/ruby/1.9.1/bundler/gems/janky-29f5cf09ae91/lib/janky/repository.rb:139:in `setup'
    from /data/janky/vendor/gems/ruby/1.9.1/bundler/gems/janky-29f5cf09ae91/lib/janky/repository.rb:37:in `setup'
    from (irb):8
    from /usr/share/rbenv/versions/1.9.3-p231-tcs-github/bin/irb:12:in `<main>'
```

This should handle removing/updating it properly, or maybe at least a more descriptive error message.

Folding/filtering compiles/etc to allow you to see just the compiler/test errors but reveal the rest on demand would be lovely.

I am only reporting this as an `undesired behavior` issue and not necessarily a bug. Wanted to make note though for those debugging later.

@joshaber ping'd today in Ops asking about Janky behavior. Basically Janky wouldn't see builds as actually completed:

![image](https://f.cloud.github.com/assets/1329/808099/7766f2ce-ee5b-11e2-859e-6ad8fa5f350b.png)

After looking at the output, Jenkins claimed SUCCESS:

```
** BUILD SUCCEEDED **

Finished: SUCCESS
```

Looking further it seems that our `output` column in Janky is set to `mediumtext` which has a character limit of [16,777,215 characters](http://dev.mysql.com/doc/refman/5.0/en/blob.html). The output for these particular tests were much higher:

```
~ : wc -m ~/Downloads/consoleText.txt
 24663273 /Users/asenchi/Downloads/consoleText.txt
```

Something to keep in mind if we see this again. /cc @github/ops

I have a project I want to build on both Mac and Windows. To do this, I've created two jobs (`project-osx.xml.erb` and `project-win.xml.erb`). Setting up the first one works just fine:

```
/ci setup owner/repo project-osx
```

But setting up the second one fails because the GitHub Hooks API recently changed to disallow duplicate hooks on repositories:

```
/ci setup owner/repo project-win
```

``` js
{
  "message": "Validation Failed",
  "errors": [
    {
      "resource": "Hook",
      "code": "custom",
      "message": "Hook already exists on this repository"
    }
  ]
}
```

```
/data/janky/vendor/gems/ruby/1.9.1/bundler/gems/janky-8329fb2e67e2/lib/janky/github.rb:125:in `hook_create'
/data/janky/vendor/gems/ruby/1.9.1/bundler/gems/janky-8329fb2e67e2/lib/janky/repository.rb:146:in `setup_hook'
/data/janky/vendor/gems/ruby/1.9.1/bundler/gems/janky-8329fb2e67e2/lib/janky/repository.rb:138:in `setup'
/data/janky/vendor/gems/ruby/1.9.1/bundler/gems/janky-8329fb2e67e2/lib/janky/repository.rb:36:in `setup'
/data/janky/vendor/gems/ruby/1.9.1/bundler/gems/janky-8329fb2e67e2/lib/janky/hubot.rb:15:in `block in '
```

/cc @technoweenie

I'm trying to add a personal repo ([aroben/libchromiumcontent](https://github.com/aroben/libchromiumcontent)) to an existing Janky instance. But every time I do, it throws an exception in `Repository.hook_create`. We're getting a 404 response from api.github.com when trying to create the service hook. This is happening because the user that Janky is authenticating as is not an admin on the repo. (Of course it isn't; since it's a personal repo, only I am an admin on the repo!)

It's quite easy for me to set up the service hook manually, of course. But there's no way for Janky to know that I've done so, since only admins can _list_ hooks on repos.

I'd love for there to be a way to get this working. Maybe Janky could say "Hey, you need to add SOMEURL as service hook to your repo"?
