I had to store the molar gas constant in a place where I had to write the type of the variable for Rust. The SI unit is "joule per kelvin per mole". Heat capacity is "joule per kelvin" and molar energy is "joule per mole", so neither will do directly.

What I finally came up with much trial and error was:

```rust
type HeatCapacityPerAmountOfSubstance = Quantity<ISQ<P2, P1, N2, Z0, N1, N1, Z0>, SI<f64>, f64>;
```

However, this is not really user friendly. Perhaps there could be a macro to help with this?
I've come up on several cases where a unit I was looking for was missing for a quantity. Most recently, I wanted to use "liters of ideal gas" as an amount of substance unit.

There doesn't seem to be any way to add any units to a quantity definition later on as the units are all defined through the `quantity!` macro. Not sure if is technically feasible as I don't really understand the implementation but something like this would be wonderful:

```rust
quantity_unit!(AmountOfSubstance, @ideal_gas_stp_liter: 0.044031629; "STPl", "STP liter", "STP liters")
```

Suppose we have a length stored in `u32`. How could I convert its storage type to `f64`?
So far it can be done by this unsafe way:

```rust
let u32length = uom::si::u32::Length::new::<meter>(5);
let f64length = uom::si::f64::Length::new::<meter>(u32length.get::<meter>() as f64);
```

It extracts the stored value and thus the underlying SI unit is not checked among `new` and `get`. My question is that how can we cast the storage type with type safety?
I had some work on Cartesian to spherical coordinate conversion with `uom`.
However, it lacks support on inverse trigonometric functions, and thus I have to use `get()` as workaround. Is it planned to add `asin`, `acos`, `atan` and `atan2` functions?
`Quantity::new` method can panic if conversion into the base unit fails.

E.g. with this code, where `Information` quantity is backed by a `u64` type
```
let value = kbytes.parse::<u64>()?;
let info = Information::new::<information::kilobyte>(value)
```

I got a case during the fuzz process where `kbytes` string contains `"111111111111111112"`, so code from above can be simplified to this:
```
let value: u64 = 111111111111111112;
let info: u64 = a * 1024 * 8;
```

which panics, because it overflows `u64`: `thread 'main' panicked at 'attempt to multiply with overflow'`.

One possible solution I see is too add the `Quantity::checked_new(v: V) -> Option<Self>` (similar to [checked_*](https://doc.rust-lang.org/std/primitive.u64.html#method.checked_add) methods for primitive types), which will handle the overflowing problem by returning `None`.

It would be nice [to document](https://rust-lang-nursery.github.io/api-guidelines/documentation.html#c-failure) that `Quantity::new` can panic also :)
Requires Rust 1.31 for support. Bump requirement for v1.0 or continuing to wait on feature until v2.0? What methods can be `const` besides `new`. Will `const fn` make zero constants easier (#26)?
https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#minimal-versions

https://www.reddit.com/r/rust/comments/ctayew/rust_crypto_developers_please_stop_the_yanking/
Support references to other units in a unit's conversion factor.

via #31 

For unit aliases it would be cool if the following were possible:

    @bit: prefix!(none) / 8.0; "b", "bit", "bits";
    @shannon: @bit; "Sh", "shannon", "shannons";

And for conversions:

    @deciban: prefix!(deci) * @hartley; "dHart", "deciban", "decibans";

This crate seems to use a mix of the BIPM and NIST names, such as `meter` and `liter` (NIST) instead of `metre` and `litre` (BIPM). It simultaneously uses the prefix `deca-` (BIPM) instead of `deka-` (NIST).

It think it would be better to either use a single consistent system (like BIPM for everything) or define aliases to support both systems.

(The places where NIST deviates from BIPM are given on page iii of the foreword here: https://www.nist.gov/sites/default/files/documents/2016/12/07/sp330.pdf)
I don't know how important this is to you, but I just had a test fail in a very weird way: https://travis-ci.org/iliekturtles/uom/builds/530889954 .  Re-running the build solved the issue with my PR, but I figured it's probably something you'd want to know about.