Is the `await` keyword purposely translated to `yield`, or what is the relationship between them for the sake of danger-js?

When I use `await` in my dangerfile (in order to access the promise returned by `git.structuredDiffForFile`), if I get an error, the `await` in my code always appears as a `yield` statement.

For example,
```js
const tables = await asyncFuncThatCallsStructuredDiffForFile(arg);
// Becomes:
var tables = yield asyncFuncThatCallsStructuredDiffForFile(arg);
```

If it's relevant, the error I was looking at is an `SyntaxError: Unexpected identifier` which points to the token directly after the `yield`.
`danger local` only computes the differences between commits and does not consider changes not yet committed.

If I modify a file, I'd like to be able to locally check it before committing it, so that my local commits are compliant.

When running `danger local` the list of modified and created files is relative to the git folder. Which makes it hard to actually read the contents of the files (need to detect what the path of the git repo is) or even execute other commands if you are not executing danger from the top level folder.

Either adding a new field to the `git` section with the path of the repo, or making the paths relative to the current directory would solve the issue.

For example, in my repo, when running `danger local` from the `foo` directory I get the following output:

```js
{
  git: {
    fileMatch: [Function],
    modified_files: [ 'package-lock.json', 'package.json' ],
    created_files: [ 'README', 'dangerfile.local.ts', 'foo/dangerfile.local.ts' ],
    deleted_files: [],
    commits: [ [Object] ],
    diffForFile: [Function: diffForFile],
    structuredDiffForFile: [Function: structuredDiffForFile],
    JSONPatchForFile: [Function: JSONPatchForFile],
    JSONDiffForFile: [Function: JSONDiffForFile],
    linesOfCode: [Function: linesOfCode]
  },
  github: null,
  bitbucket_server: ,
  bitbucket_cloud: ,
  gitlab: undefined,
  utils: { sentence: [Function: sentence], href: [Function: href] }
}
```
Hello.

Danger is trying to call the Gitlab rest api using the project name. while gitlab now only accepts the project ID as you can see in the [documentation](https://docs.gitlab.com/ce/api/projects.html#get-single-project).

Here is the error, i get.

+ danger-swift ci
Error:  { HTTPError: Not Found
    at fn (/snapshot/danger-js/node_modules/ky/umd.js:242:12)
    at process._tickCallback (internal/process/next_tick.js:68:7)
  name: 'HTTPError',
  response:
   Response {
     size: 0,
     timeout: 0,
     [Symbol(Body internals)]: { body: [PassThrough], disturbed: true, error: null },
     [Symbol(Response internals)]:
      { url:
         'https://gitlab.xxxx.com/api/v4/projects/project%2Fname/merge_requests/15/changes',
        status: 404,
        statusText: 'Not Found',
        headers: [Headers] } },
  description: '404 Project Not Found' }
# Report

## What did you do?

I invoked `npx danger local` within a Node.js project, specifying a `dangerfile.js` that lives outside of the project.

*Reproduction case:*
```
#!/bin/bash
set -eu

rm -rf ./project ./tool

mkdir tool && (
  cd tool && \
  cat >dangerfile.js <<:DANGERFILE
try{
  console.log(require('array-first'));
  console.log(require('array-last'));
} catch(e) {
  console.log('ERROR', e);
}
:DANGERFILE
)

mkdir project && (
  cd project && \
  npm init -y >/dev/null 2>&1 && \
  npm i danger array-first array-last && \
  git init . && \
  git add package.json package-lock.json && \
  git commit -m 'NPM installed' && \
  git checkout -b test && \
  cp ../tool/dangerfile.js . && \
  git add dangerfile.js && \
  git commit -m 'Initial dangerfile' )

echo 'Running Danger in project'
(
  cd project && \
  npx danger local) || true

echo 'Running Danger in project, using external Dangerfile'
(
  cd project && \
  npx danger local -d '../tool/dangerfile.js' ) || true
```

## What did you expect to happen?

Ideally, `danger` should evaluate an external Dangerfile as if it lived within the project directory from which `danger` was invoked.  Alternatively, it would be desirable to have a command-line parameter that lets me specify the directory that `danger` considers to be the project directory.

NOTE: `danger.import_dangerfile` seemed like it might be a solution for this problem, but I could not get it to work from within danger-js.  The documentation is pretty sparse and unclear, so I'm not sure if I was doing something wrong.

## What happened instead?

Danger was not able to see the `node_modules` in the directory from which I invoked `danger`:

```
Running Danger in project
[Function: arrayFirst]

[Function: last]


Danger: âœ“ passed review, received no feedback.

Running Danger in project, using external Dangerfile
ERROR { Error: Cannot find module 'array-first'
```

## Your Environment

* Which CI are you running on? *local*
* Are you running the latest version of Danger? *9.2.8*
* What is your Dangerfile?

```
try{
  console.log(require('array-first'));
  console.log(require('array-last'));
} catch(e) {
  console.log('ERROR', e);
}
```
I want danger to have option `--no-publish-check` that will prevent danger from adding status to pull request because I have one already. This is restriction of our enterprise CI, and danger works fine there because it has option to pass external ci provider. 
There is another approach to this issue, we can allow client to provide custom platform through `--external-platform` option and it will a lot of user cases.
What do you think?
# Summary
While trying to set up danger-swift I ran

```
DEBUG="*" danger-swift pr https://github.com/danger/swift/pull/95
```

Which gave the following error
```
Error:  TypeError: Cannot read property 'full_name' of null
    at Object.utils [as default] (/snapshot/danger-js/distribution/platforms/github/GitHubUtils.js:66:77)
    at Object.exports.githubJSONToGitHubDSL (/snapshot/danger-js/distribution/platforms/GitHub.js:127:69)
    at Object.<anonymous> (/snapshot/danger-js/distribution/runner/jsonToDSL.js:76:49)
    at step (/snapshot/danger-js/distribution/runner/jsonToDSL.js:32:23)
    at Object.f [as next] (/snapshot/danger-js/distribution/runner/jsonToDSL.js:13:53)
    at __awaiter (/snapshot/danger-js/distribution/runner/jsonToDSL.js:7:71)
    at new Promise (<anonymous>)
    at __awaiter (/snapshot/danger-js/distribution/runner/jsonToDSL.js:3:12)
    at Object.exports.jsonToDSL (/snapshot/danger-js/distribution/runner/jsonToDSL.js:67:53)
    at Object.<anonymous> (/snapshot/danger-js/distribution/commands/utils/runDangerSubprocess.js:159:54)
```

# Setup
```
brew install danger/tap/danger-swift
```

Dangerfile.swift
```
import Danger
let danger = Danger()

let editedFiles = danger.git.modifiedFiles + danger.git.createdFiles
message("These files have changed: \(editedFiles.joined())")

```

# Full Debug Output
```
 $ DEBUG="*" danger-swift pr https://github.com/danger/swift/pull/95
Launching Danger Swift pr (v2.0.6)
Finding out where the danger executable is
Running: /usr/local/bin/danger pr --process danger-swift --passURLForDSL https://github.com/danger/swift/pull/95
Starting Danger PR on danger/swift#95
You don't have a DANGER_GITHUB_API_TOKEN set up, this is optional, but TBH, you want to do this
Check out: http://danger.systems/js/guides/the_dangerfile.html#working-on-your-dangerfile
  danger:GitHub::Checks Not using the checks API for GitHub +0ms
  danger:pr running process separated Danger +0ms
  danger:process_runner Debug mode on for Danger v9.1.5 +0ms
  danger:process_runner Starting sub-process run +0ms
  danger:GitHubAPI Sending:  https://api.github.com/repos/danger/swift/pulls/95 { 'Content-Type': 'application/json',
  Accept: 'application/vnd.github.v3.diff' } +0ms
  danger:GitHubAPI getPullRequestCommits:: Sending pull request commit request for first page +598ms
  danger:GitHubAPI getPullRequestCommits:: Request url generated "repos/danger/swift/pulls/95/commits" +0ms
  danger:GitHubAPI Sending:  https://api.github.com/repos/danger/swift/pulls/95/commits { 'Content-Type': 'application/json' } +0ms
  danger:GitHubAPI getNextPageFromLinkHeader:: Given response does not contain link header for pagination +402ms
  danger:GitHubAPI Sending:  https://api.github.com/repos/danger/swift/pulls/95 { 'Content-Type': 'application/json' } +14ms
  danger:GitHubAPI Sending:  https://api.github.com/repos/danger/swift/issues/95 { 'Content-Type': 'application/json' } +357ms
  danger:GitHubAPI getPullRequestCommits:: Sending pull request commit request for first page +352ms
  danger:GitHubAPI getPullRequestCommits:: Request url generated "repos/danger/swift/pulls/95/commits" +0ms
  danger:GitHubAPI Sending:  https://api.github.com/repos/danger/swift/pulls/95/commits { 'Content-Type': 'application/json' } +0ms
  danger:GitHubAPI getNextPageFromLinkHeader:: Given response does not contain link header for pagination +790ms
  danger:GitHubAPI Sending:  https://api.github.com/repos/danger/swift/pulls/95/reviews { 'Content-Type': 'application/json',
  Accept: 'application/vnd.github.v3+json' } +0ms
  danger:GitHubAPI Sending:  https://api.github.com/repos/danger/swift/pulls/95/requested_reviewers { 'Content-Type': 'application/json',
  Accept: 'application/vnd.github.v3+json' } +396ms
  danger:process_runner { dangerJSONDSL:
  danger:process_runner    { git:
  danger:process_runner       { modified_files: [Array],
  danger:process_runner         created_files: [Array],
  danger:process_runner         deleted_files: [],
  danger:process_runner         commits: [Array] },
  danger:process_runner      github:
  danger:process_runner       { issue: [Object],
  danger:process_runner         pr: [Object],
  danger:process_runner         commits: [Array],
  danger:process_runner         reviews: [Array],
  danger:process_runner         requested_reviewers: [Object],
  danger:process_runner         thisPR: [Object] },
  danger:process_runner      settings: { github: [Object], cliArgs: [Object] } } } +3s
  danger:process_runner Preparing to run: danger-swift +1ms
  danger:runDangerSubprocess Running sub-process: danger-swift -  +0ms
  danger:runDangerSubprocess Started passing in STDIN via the URL: danger://dsl//var/folders/tw/mbrpz7ds19v8xy5qhqy27zzm0000gq/T/danger-dsl.json +7ms
  danger:runDangerSubprocess Passed DSL in via STDIN +0ms
Ran with: /var/folders/tw/mbrpz7ds19v8xy5qhqy27zzm0000gq/T/_tmp_dangerfile.swift /var/folders/tw/mbrpz7ds19v8xy5qhqy27zzm0000gq/T/danger-dsl.json /var/folders/tw/mbrpz7ds19v8xy5qhqy27zzm0000gq/T/danger-response.json
Decoding the DSL into Swift types
ERROR: Failed to parse JSON: valueNotFound(Swift.KeyedDecodingContainer<Danger.GitHub.Repo.CodingKeys>, Swift.DecodingError.Context(codingPath: [CodingKeys(stringValue: "danger", intValue: nil), CodingKeys(stringValue: "github", intValue: nil), CodingKeys(stringValue: "pr", intValue: nil), CodingKeys(stringValue: "head", intValue: nil), CodingKeys(stringValue: "repo", intValue: nil)], debugDescription: "Cannot get keyed decoding container -- found null value instead.", underlyingError: nil))

Got URL for JSON: /var/folders/tw/mbrpz7ds19v8xy5qhqy27zzm0000gq/T/danger-dsl.json
Created a temporary file for the Dangerfile DSL at: /var/folders/tw/mbrpz7ds19v8xy5qhqy27zzm0000gq/T/danger-dsl.json
Running Dangerfile at: Dangerfile.swift
Preparing to compile
Running: /usr/bin/swiftc --driver-mode=swift -L /usr/local/lib/danger -I /usr/local/lib/danger -lDanger /var/folders/tw/mbrpz7ds19v8xy5qhqy27zzm0000gq/T/_tmp_dangerfile.swift /var/folders/tw/mbrpz7ds19v8xy5qhqy27zzm0000gq/T/danger-dsl.json /var/folders/tw/mbrpz7ds19v8xy5qhqy27zzm0000gq/T/danger-response.json
Completed evaluation
ERROR: Dangerfile eval failed at Dangerfile.swift
ERROR: Could not get the results JSON file at /var/folders/tw/mbrpz7ds19v8xy5qhqy27zzm0000gq/T/danger-response.json

  danger:runDangerSubprocess child process exited with code 1 +485ms
  danger:runDangerSubprocess Handling fail from subprocess +0ms
  danger:jsonToDSL Creating pr DSL from JSON +0ms
Error:  TypeError: Cannot read property 'full_name' of null
    at Object.utils [as default] (/snapshot/danger-js/distribution/platforms/github/GitHubUtils.js:66:77)
    at Object.exports.githubJSONToGitHubDSL (/snapshot/danger-js/distribution/platforms/GitHub.js:127:69)
    at Object.<anonymous> (/snapshot/danger-js/distribution/runner/jsonToDSL.js:76:49)
    at step (/snapshot/danger-js/distribution/runner/jsonToDSL.js:32:23)
    at Object.f [as next] (/snapshot/danger-js/distribution/runner/jsonToDSL.js:13:53)
    at __awaiter (/snapshot/danger-js/distribution/runner/jsonToDSL.js:7:71)
    at new Promise (<anonymous>)
    at __awaiter (/snapshot/danger-js/distribution/runner/jsonToDSL.js:3:12)
    at Object.exports.jsonToDSL (/snapshot/danger-js/distribution/runner/jsonToDSL.js:67:53)
    at Object.<anonymous> (/snapshot/danger-js/distribution/commands/utils/runDangerSubprocess.js:159:54)
```
The `import` and `export` statements in `danger.d.ts` are preventing the danger DSL from being available in the global scope:

![danger-ambient-declarations](https://user-images.githubusercontent.com/9935648/68442571-4bf7d500-0186-11ea-908f-f8e30ace69a8.gif)

This is a known issue in Typescript `*.d.ts` files (ambient declarations):
https://github.com/microsoft/TypeScript/issues/28097


A potential solution per [this comment](https://github.com/microsoft/TypeScript/issues/28097#issuecomment-443509326) is to wrap global declarations in a `declare global { }` block.

EDIT: This appears to do the trick based on a quick test. Here's a minimum set of changes: https://github.com/carmanchris31/danger-ambient-declarations-repro/commit/e897e351bb253505075606acc9fde51fc429776e?w=1


Where should one look in the code in order to attempt addressing this?
https://github.com/danger/danger-js/blob/48ab882843f30f9fee8a9cbf48155307f5609f52/source/ci_source/providers/Codeship.ts#L68

The `CI_REPO_NAME` env var only contains the project name and not the user / organization. We are using Codeship Pro. Not sure if Basic has different results. This causes the API requests such as `https://api.github.com/repos/REPO_NAME_HERE/pulls` to fail with 404 status. Example:

```
Request failed [404]: https://api.github.com/repos/gourami/pulls
Response: {
  "message": "Not Found",
  "documentation_url": "https://developer.github.com/v3/repos/#get"
}
```

We tried doing a `printenv` and could not find a Codeship env var which contained the complete name e.g. `Organization/Repository`, so I'm not sure how to globally fix this.

We are resorting to overriding the `CI_REPO_NAME` env var inline when calling danger script.
Like in other CI workflows, I would expect any dangerjs code run in github actions to correctly update/delete previous comments made by previous builds. This currently does not happen, resulting in a *new* comment being created for every run.

While not functionally blocking, it create a rather poor experience because it results in a lot of noise.

I think I've identified the issue at these lines:
https://github.com/danger/danger-js/blob/master/source/platforms/github/GitHubAPI.ts#L133-L136
It seems that the userID is hardcoded for github actions and always returns the same value rather than looking up the user associated with the current GITHUB_TOKEN.

As a result of the hardcoded id, when the API goes to look for previous comments that are created by danger to update/delete them, there's a check on the userid in a `filter` and because the hard coded will probably never match the actual userid, it never gets a list of comments to actually update/delete.

https://github.com/danger/danger-js/blob/master/source/platforms/github/GitHubAPI.ts#L85-L96

I'm mot sure if this behavior was intentional, or if it was just something that was missed.

