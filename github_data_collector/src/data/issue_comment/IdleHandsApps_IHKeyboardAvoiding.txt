I have got a crash report from Fabric in the library IHKeyboardAvoiding version 2.6.0. The stack trace below:

**Fatal Exception: NSRangeException**

```
0  CoreFoundation                 0x1b329898c __exceptionPreprocess
1  libobjc.A.dylib                0x1b2fc10a4 objc_exception_throw
2  CoreFoundation                 0x1b32ee3f8 -[__NSCFString characterAtIndex:].cold.1
3  CoreFoundation                 0x1b3182c6c -[__NSArrayM objectAtIndexedSubscript:]
4  IHKeyboardAvoiding             0x1054f1730 +[IHKeyboardAvoiding applicationDidEnterBackground:] + 339 (IHKeyboardAvoiding.m:339)
5  CoreFoundation                 0x1b31f409c __CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__
6  CoreFoundation                 0x1b31f40e4 ___CFXRegistrationPost1_block_invoke
7  CoreFoundation                 0x1b31f3444 _CFXRegistrationPost1
8  CoreFoundation                 0x1b31f30fc ___CFXNotificationPost_block_invoke
9  CoreFoundation                 0x1b316f43c -[_CFXNotificationRegistrar find:object:observer:enumerator:]
10 CoreFoundation                 0x1b31f2a4c _CFXNotificationPost
11 Foundation                     0x1b354f2d8 -[NSNotificationCenter postNotificationName:object:userInfo:]
12 UIKitCore                      0x1b72abd50 __47-[UIApplication _applicationDidEnterBackground]_block_invoke
13 UIKitCore                      0x1b6ca6da0 +[UIViewController _performWithoutDeferringTransitionsAllowingAnimation:actions:]
14 UIKitCore                      0x1b72abb0c -[UIApplication _applicationDidEnterBackground]
15 UIKitCore                      0x1b6a8171c __101-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]_block_invoke_2
16 UIKitCore                      0x1b6f113ec _UIScenePerformActionsWithLifecycleActionMask
17 UIKitCore                      0x1b6a812f8 __101-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]_block_invoke
18 UIKitCore                      0x1b6a80d50 -[_UISceneLifecycleMultiplexer _performBlock:withApplicationOfDeactivationReasons:fromReasons:]
19 UIKitCore                      0x1b6a81124 -[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]
20 UIKitCore                      0x1b6a809e0 -[_UISceneLifecycleMultiplexer uiScene:transitionedFromState:withTransitionContext:]
21 UIKitCore                      0x1b68f5610 -[UIScene _invalidate]
22 UIKitCore                      0x1b74ceec4 -[UIWindowScene _invalidate]
23 UIKitCore                      0x1b72a2b20 -[UIApplication workspace:willDestroyScene:withTransitionContext:completion:]
24 UIKitCore                      0x1b6e64c10 -[UIApplicationSceneClientAgent scene:willInvalidateWithEvent:completion:]
25 FrontBoardServices             0x1b8331bdc -[FBSSceneImpl _callOutQueue_agent_willDestroyWithTransitionContext:completion:]
26 FrontBoardServices             0x1b8357b70 __84-[FBSWorkspaceScenesClient _queue_invalidateScene:withTransitionContext:completion:]_block_invoke_2
27 FrontBoardServices             0x1b833c0f8 -[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]
28 FrontBoardServices             0x1b83579e8 __84-[FBSWorkspaceScenesClient _queue_invalidateScene:withTransitionContext:completion:]_block_invoke
29 libdispatch.dylib              0x1b2f66184 _dispatch_client_callout
30 libdispatch.dylib              0x1b2f0f038 _dispatch_block_invoke_direct$VARIANT$mp
31 FrontBoardServices             0x1b837b540 __FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__
32 FrontBoardServices             0x1b837b20c -[FBSSerialQueue _queue_performNextIfPossible]
33 FrontBoardServices             0x1b837b734 -[FBSSerialQueue _performNextFromRunLoopSource]
34 CoreFoundation                 0x1b32167e0 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__
35 CoreFoundation                 0x1b3216738 __CFRunLoopDoSource0
36 CoreFoundation                 0x1b3215ed0 __CFRunLoopDoSources0
37 CoreFoundation                 0x1b321101c __CFRunLoopRun
38 CoreFoundation                 0x1b32108bc CFRunLoopRunSpecific
39 GraphicsServices               0x1bd07c328 GSEventRunModal
40 UIKitCore                      0x1b72a66d4 UIApplicationMain
41 MyApp                           0x1050801cc main + 14 (main.m:14)
42 libdyld.dylib                  0x1b309b460 start
```
References Issue #55 

The avoidingView was not moving back to the original position after "undo typing" click.

Basically, the problem is after the "undo typing" click the keyboardWillChangeFrameNotification observer will be called three times:
1 time: target to show the keyboard
2 time: target to hide the keyboard
3 time: target to show the keyboard

The third call will be executed bevor the "restore state" animation from the second call is finished. Therefore in the third call, all auto location are still saved in `updatedConstraints` & `updatedConstraintConstants`. So we need to wait for the animation to finish and then call `didChange` with the preserved notification object.
Hi, thanks for this nice little package. It helps me a lot as a Swift beginner to just avoid the keyboard problem :) However I found one little problem:

In order to subclass a class outside the current module, the access level needs to be "open"
Current:
1. When a text message is received with an authorization code, a suggestions toolbar will appear above the keyboard. 
2. IHKeyboardAvoiding does not update with this new height from the suggestions toolbar. (Avoiding view is not pushed further up)
3. When the authorization code is consumed, the suggestions toolbar disappears and IHKeyboardAvoiding shifts the view down by the suggestions toolbar's height.

Expected:
2. IHKeyboardAvoiding updates with this new height from the suggestions toolbar. (Avoiding view is pushed further up)
Added KeyboardLockiOSt to the similar solutions
There is an issue when switching from  keyboard with suggestions on one screen to keyboard without suggestions on another screen: avoidview offset is calculated incorrectly and textfiled is placed under keyboard.

How to reproduce:
I have created sample project to reproduce this issue: https://github.com/maks-g/IHKeyboardAvoidingIssueSample

Also, you can check recorded video: 
https://github.com/maks-g/IHKeyboardAvoidingIssueSample/blob/master/issue_sample.mp4
Shake Gesture , undo typing and click cancel option,then dimiss keyboard,the view can not back to the original position
When the avoiding view height + keyboard height is bigger than actual height of screen, it crashes. Could we anyhow avoid the crash ?
How to reproduce:

Set a container view with a textfield inside, and a bottom constraint from the container to the bottom layout guide in a View Controller. Set the container view as the avoiding view.

Click on the textfield on an iPad while in landscape. The keyboard comes up. While the keyboard is showing up turn the iPad to portrait.

While in portrait dismiss the keyboard. The view goes down way further than it should, seems like the device thinks it is still in landscape mode, and tries to lower the view the same distance as if it were in landscape (which is greater than in portrait due to less available height). 

If you repeat this process several times, (i.e. put in landscape, invoke the keyboard, turn to portrait), the view keeps going lower and lower.
First sorry for last post did not give the detail information. 

Here is what happen 
I have a View controller , and it has a navigation controller as child view controller .
and navigation controller's root view controller has a tableview,
tableview has many cell some of them has textview. 
I want to keyboard not block the textview ,when user start to enter something

i tried      KeyboardAvoiding.avoidingView = textview  at textview's delegate
but not work , textview move up in cell's content.

And now i use , KeyboardAvoiding.avoidingView = tableView.
it's ok but not perfect. because child view move up ,and it's parent view still there used a lot space. 

I think may be it is better to have a config , can choose which view move up,
for my case it is better move the parent view or window may be the best.

And my english is not well ,hope u can understand.



