README.md indicates a number of Scala types suitable for serialization/deserialization, including Map.  Running  a test with MeatLocker suggests Option and Either types may also be used.  Can this be added to README.md if it is indeed correct?

the tests are using a scala string enrichment that has a colliding name in java 11 (.lines on String) so the compilation breaks.

We should add a openjdk11 test to the travis setup.

cc @nevillelyh 
Updates [com.google.protobuf:protobuf-java](https://developers.google.com/protocol-buffers/) from 2.3.0 to 2.6.1.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.google.protobuf", artifactId = "protobuf-java" } ]
```
</details>

labels: semver-minor
Hi I would like to add compression when serializing object and then deserialize object back. Since I haven't found any info related in either GH or scaladoc, I tried to manipulate exisintg `KryoPool` class to achieve that. However I am getting :
`com.esotericsoftware.kryo.KryoException: Buffer too small: capacity: 0, required: 1`

here is the class:

```
/*
Copyright 2013 Twitter, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package com.twitter.chill;

import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.InputChunked;
import com.esotericsoftware.kryo.io.Output;
import org.constellation.consensus.SnapshotInfo;

import java.io.ByteArrayInputStream;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.zip.*;

/** Simple ResourcePool to save on Kryo instances, which
 * are expensive to allocate
 */
abstract public class KryoPoolHacked extends ResourcePool<SerDeState > {

  protected KryoPoolHacked(int poolSize) { super(poolSize); }

  @Override
  public void release(SerDeState  st) {
    st.clear();
    super.release(st);
  }
  /** Output is created with new Output(outBufferMin, outBufferMax);
   */
  public static KryoPoolHacked withBuffer(int poolSize,
      final KryoInstantiator ki,
      final int outBufferMin,
      final int outBufferMax) {
    return new KryoPoolHacked(poolSize) {
      protected SerDeState  newInstance() {
        return new SerDeState (ki.newKryo(), new Input(), new Output(new DeflaterOutputStream(new ByteArrayOutputStream(),new Deflater(4, true))));
      }
    };
  }

  /** Output is created with new Output(new ByteArrayOutputStream())
   * This will automatically resize internally
   */
  public static KryoPoolHacked withByteArrayOutputStream(int poolSize,
      final KryoInstantiator ki) {
    return new KryoPoolHacked(poolSize) {
      protected SerDeState  newInstance() {
        return new SerDeState (ki.newKryo(), new Input(), new Output(new DeflaterOutputStream(new ByteArrayOutputStream(),new Deflater(4, true)))) {
          /*
           * We have to take extra care of the ByteArrayOutputStream
           */
          @Override
          public void clear() {
            super.clear();
            ByteArrayOutputStream byteStream = (ByteArrayOutputStream)output.getOutputStream();
            byteStream.reset();
          }
          @Override
          public byte[] outputToBytes() {
            output.flush();
            ByteArrayOutputStream byteStream = (ByteArrayOutputStream)output.getOutputStream();
            return byteStream.toByteArray();
          }
          @Override
          public void writeOutputTo(OutputStream os) throws IOException {
            output.flush();
            ByteArrayOutputStream byteStream = (ByteArrayOutputStream)output.getOutputStream();
            byteStream.writeTo(os);
          }
        };
      }
    };
  }

  public <T> T deepCopy(T obj) {
    return (T)fromBytes(toBytesWithoutClass(obj), obj.getClass());
  }

  public Object fromBytes(byte[] ary) {
    SerDeState  serde = borrow();
    try {
      serde.setInput(new InflaterInputStream(new ByteArrayInputStream(ary)));
      return serde.readClassAndObject();
    }
    finally {
      release(serde);
    }
  }

  public <T> T fromBytes(byte[] ary, Class<T> cls) {
    SerDeState  serde = borrow();
    System.out.println("wkoszycki2");
    try {
      serde.setInput(new InflaterInputStream(new ByteArrayInputStream(ary)));
      return serde.readObject(cls);
    }
    finally {
      release(serde);
    }
  }


  public byte[] toBytesWithClass(Object obj) {
    SerDeState  serde = borrow();
    try {
      serde.writeClassAndObject(obj);
      return serde.outputToBytes();
    }
    finally {
      release(serde);
    }
  }

  public byte[] toBytesWithoutClass(Object obj) {
    SerDeState  serde = borrow();
    try {
      serde.writeObject(obj);
      return serde.outputToBytes();
    }
    finally {
      release(serde);
    }
  }

  public boolean hasRegistration(Class obj) {
    SerDeState  serde = borrow();
    try {
      return serde.hasRegistration(obj);
    }
    finally {
      release(serde);
    }
  }
}
```
setting bytes[] as input first and then stream
```
  public Object fromBytes(byte[] ary) {
    SerDeState  serde = borrow();
    try {
      serde.setInput(ary);
      serde.setInput(new InflaterInputStream(new ByteArrayInputStream(ary)));
      return serde.readClassAndObject();
    }
    finally {
      release(serde);
    }
  }
```
 ends with following:
`java.util.zip.ZipException: incorrect header check`

Please help
Currently chill doesn't support `Try` serialization, because it doesn't support java's `Throwable` serialization (see https://github.com/EsotericSoftware/kryo/issues/532 for details). It worth adding `Throwable` serialization to `chill-java` package and, maybe, explicit serialization `Try` serialization to `chill` package.
Hello, 
My understanding is that Chill Akka user requiredRegistration= false and FieldSerializer for all classes. Is there a way to 
1) Register some specific classes
2) Provide backwards compatibility for messages (useful for rolling restarts with new messages)
Are there any plans to make an official Akka 2.5 release? 0.8.0 seems to work fine with Akka 2.5, but still it would me nice to have all the dependancies right. 
Look at this: [https://i.imgur.com/9K75oVv.png](https://i.imgur.com/9K75oVv.png)

The webpage that you provide for a GitHub repo is suppose to match the library or framework in the repo. [https://twitter.com/scalding](https://twitter.com/scalding) is a different technology entirely.
https://twitter.github.io/chill is a 404
I use Kryo-sharded-4.0.1
I want to deserialize a data but I have an Exception when I write:
`kryo.fromBytes(bytes)`

`com.esotericsoftware.kryo.KryoException: java.lang.IndexOutOfBoundsException: Index: 32, Size: 12
	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:144)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543)
	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731)
	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543)
	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731)
	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543)
	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731)
	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543)
	at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:813)
	at com.twitter.chill.SerDeState.readClassAndObject(SerDeState.java:61)
	at com.twitter.chill.KryoPool.fromBytes(KryoPool.java:94)`
