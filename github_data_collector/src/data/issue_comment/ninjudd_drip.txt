Integrates https://github.com/ninjudd/drip/pull/105 and https://github.com/ninjudd/drip/pull/100.
Fixes Tests for now. Update the urls for `make test`. There is definitely an issue with processes not shutting down when running tests.  If you run basic before performance, performance will just hang.
When building using make, I had the following errors:

```
javac -source 1.5 -target 1.5 src/org/flatland/drip/Main.java src/org/flatland/drip/Switchable.java src/org/flatland/drip/SwitchableInputStream.java src/org/flatland/drip/SwitchableOutputStream.java -d classes/
warning: [options] bootstrap class path not set in conjunction with -source 5
error: Source option 5 is no longer supported. Use 6 or later.
error: Target option 1.5 is no longer supported. Use 1.6 or later.
make: *** [Makefile:13: classes/org/flatland/drip/Main.class] Error 2
```
If I replace them with 1.6, I got:
```
warning: [options] bootstrap class path not set in conjunction with -source 6
warning: [options] source value 6 is obsolete and will be removed in a future release
warning: [options] target value 1.6 is obsolete and will be removed in a future release
warning: [options] To suppress warnings about obsolete options, use -Xlint:-options.
```
But we don't need them anymore AFAIK.
So I just dropped the options.
Then another warning came up:

```
src/drip_daemon.c:46:5: warning: implicit declaration of function ‘wait’ [-Wimplicit-function-declaration]
```
So I fixed that one according to 
https://stackoverflow.com/questions/41884685/implicit-declaration-of-function-wait

Thank you devs !

Hi, not so much a bug, as an enquiry.

I've been trying to optimise my startup times, and I was trying out drip, and I was noticing a slight increase in startup time which I thought was weird.

Logstash makes using drip easy since all you need specify is the `USE_DRIP` environment variable.

Upon closer investigation I noticed that a restart was killing _all_ the processes, not just the active one basically meaning that drip has to reinitialise once more, and spin up the extra jvm, which explains the extra delay.

I think this is to do with systemd _killing all processes_ associated with the logstash services as well as the logstash runtime. Curiously this also happens when I kill the active process itself, so presumably systemd is monitoring that somehow.

I suppose this is strictly speaking a "logstash" issue, since it's they who supply the USE_DRIP feature, but I can imagine them saying "it's not for that" (running under systemd), which is fair enough I suppose.

Just wondering if you have any thoughts or suggestions as to how I might address this issue?

I might see if I can figure it out myself.

Thanks!
Rob

I'm trying out drip for a java CLI. The drip/client side is a only a UNIX socket sending command args to the server listener which respond to various commands. This makes the client part very thin since jar dependencies are packaged on the server. Hopefully this setup can be enough for bash auto completion as well.

However, when i run a test between drip and java they seem to perform equally fast? But maybe i'm missing or doing something wrong? 

I have created a super-simple project that demonstrate the client/server functionality here: https://github.com/deephacks/drip-test

The tests can be run like this:
1) Start the listening side on /tmp/serv.sock
`$ ./run drip server`

2) Run the drip test
`$ for i in {1..5}; do time ./run drip drip-msg; done`

3) Run the drip test
`$ for i in {1..5}; do time ./run java java-msg; done`

Here's a sample run.

- Java
```
$ for i in {1..5}; do time ./run java java-msg; done
java-msg echoes

real	0m0.328s
user	0m0.592s
sys	0m0.016s
msg echoes

real	0m0.267s
user	0m0.484s
sys	0m0.032s
java-msg echoes

real	0m0.273s
user	0m0.516s
sys	0m0.024s
java-msg echoes

real	0m0.271s
user	0m0.536s
sys	0m0.020s
java-msg echoes

real	0m0.280s
user	0m0.556s
sys	0m0.016s
```
- Drip
```
$ for i in {1..5}; do time ./run drip drip-msg; done

drip-msg echoes

real	0m0.354s
user	0m0.604s
sys	0m0.032s


drip-msg echoes

real	0m0.332s
user	0m0.020s
sys	0m0.012s


drip-msg echoes

real	0m0.291s
user	0m0.020s
sys	0m0.008s


drip-msg echoes

real	0m0.285s
user	0m0.016s
sys	0m0.016s


drip-msg echoes

real	0m0.282s
user	0m0.020s
sys	0m0.008s
```
Cheers! Awesome project!

Fixes the following compiler warning:
```
.../src/drip_daemon.c: In function ‘main’:                         
.../src/drip_daemon.c:46:5: warning: implicit declaration of function ‘wait’ [-Wimplicit-function-declaration]                                                
     wait(&status);                                                                        
     ^~~~
```
As in topic.
Hey guys, I was trying to use drip with Scala and fish shell on Mac OS X and it caused me some pain today. It seems it keeps creating new processes and never kills those it used before. If I `ps aux | grep -c drip` now it counts 1080 hits (590 for `drip_daemon` so this is probably the true process count). I am using Scala both as REPL and in Intellij Idea (latest). I've added those lines to my `fish.init` files as docs suggested:
```fish
set -gx JAVA_HOME (/usr/libexec/java_home)
set -gx PATH $JAVA_HOME/bin $PATH
set -gx JAVACMD drip
```
and everything was nice and speedy, but I started to run out of processes. I upped my ulimit and launchctl's maxproc's limits, but I kept getting fork errors and started looking at my `ps aux` output. Here's the command that keeps repeating 590 times now:
```
lukaszbialy       1005   0.0  0.0  2450176    184   ??  S    12:38PM   0:00.00 /usr/local/bin/../Cellar/drip/0.2.4/bin/../libexec/bin/drip_daemon /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/bin/java -Xmx256M -Xms32M -Xbootclasspath/a:/usr/local/Cellar/scala/2.12.1/libexec/lib/jline-2.14.1.jar:/usr/local/Cellar/scala/2.12.1/libexec/lib/scala-compiler.jar:/usr/local/Cellar/scala/2.12.1/libexec/lib/scala-library.jar:/usr/local/Cellar/scala/2.12.1/libexec/lib/scala-parser-combinators_2.12-1.0.4.jar:/usr/local/Cellar/scala/2.12.1/libexec/lib/scala-reflect.jar:/usr/local/Cellar/scala/2.12.1/libexec/lib/scala-swing_2.12-2.0.0-M2.jar:/usr/local/Cellar/scala/2.12.1/libexec/lib/scala-xml_2.12-1.0.6.jar:/usr/local/Cellar/scala/2.12.1/libexec/lib/scalap-2.12.1.jar -Dscala.home=/usr/local/Cellar/scala/2.12.1/libexec -Dscala.usejavacp=true -Denv.emacs= -Djava.awt.headless=true -classpath /usr/local/bin/../Cellar/drip/0.2.4/bin/../libexec/bin/../drip.jar:"" org.flatland.drip.Main scala.tools.nsc.MainGenericRunner /Users/lukaszbialy/.drip/0.2.4/<INSERT RANDOM HASH HERE>
```

Any ideas, am I doing something ridiculously wrong?
Hello,
  I just tried drip on a Solaris server, and it seems it has a dependency on git, since I'm getting an error "drip: line 150: git: command not found". For some reasons I can not install git on my server. Is there any way to remove that dependency?
Currently it does not appear that Drip's jar is published to Maven Central. This makes it difficult or impossible to work with the Drip classes directly from a Maven-based project.

Specifically, I need to be able to access the `Switched` interface in order to acquire a reference to the real file descriptors to be used for stdio. See jruby/jruby#2690.

For the moment I will use reflection. If the maintainers of Drip need assistance getting this published, I can help you follow the Sonatype OSS instructions.

I'm using Tabula (more specifically the command-line version, tabula-java) to extract data from PDFs. I have a bash script which calls tabula-java a total of four times per PDF. It's a slow process (10 sec per PDF). I have almost 200K PDFs to process, so I was hoping to see some speed-up by using drip.
Unfortunately, my script doesn't like drip. When I pipe tabula's output to tr (translate), the script hangs within tr. Here's one of those tabula calls which hangs in a piped-to tr:
`export id_value=$(drip -cp tabula-0.8.0-jar-with-dependencies.jar technology.tabula.CommandLineApp -a 240.593,124.695,264.308,227.97 -p 1 $filename | tr -d '\r\n')`
When I say this "hangs" I mean that it enters but never exits tr. Control-C will get me back to the prompt.
The script works just fine when I avoid drip and call tabula through java:
`export id_value=$(java -cp tabula-0.8.0-jar-with-dependencies.jar technology.tabula.CommandLineApp -a 240.593,124.695,264.308,227.97 -p 1 $filename | tr -d '\r\n')`
Details: OS X 10.8.5, tabula-java 0.8.0
