We currently have a number of issues related to our use of cargo that all manifest as some sort of advanced cargo feature interfering with our (rather hacky) way of talking to cargo.

The currently prominent issues: #67, #91. Also, best-effort integration with cargo's newly stabilized offline mode would be quite useful at times.

We have multiple ways of addressing these -- either update our interaction with cargo to support all these features cleanly, or approach the issues from a different angle, for example using something like [escargot](https://github.com/crate-ci/escargot) and `cargo-metadata` which we already make use of. The main drawback of such an approach would be that it's probably quite hard to get all the features we need from outside cargo. At the same time, not depending on cargo has its benefits, as long as our implementation for, say, finding build artifacts is stable across cargo versions. Most importantly, changes to cargo will no longer cause as much breakage to semverver as in the past.
The project currently does not build on nightly.

Would it be possible to send email notifications automatically when this happens ? (e.g. via a travis-ci cron job?)
The usage message for `cargo semver` states:

`usage: cargo semver [options] [-- cargo options]`

However, additional options after `--` are not passed on to cargo.
We should either make that work again or fix the usage message.
Since `librustc_save_analysis` is actually a somewhat stable API, a lot of breakage could be avoided (and at the same time, some issues with the checks could be easily addressed).

However, since the API operates essentially on an AST level, a number of issues has to be solved:

* item correspondence has to be reestablished on an AST level, which is less than ideal (and might be even bad for performance).
* no existing type check machinery can be reused, we would fall back to completely reimplementing our own reasoning about types and lifetimes on an API level. At the same time, technical issues would become relatively straightforward to solve.

To summarize, I believe such a change will cause a shift from relatively complex, but also somewhat compact functionality to much more code which will become possibly a bit simpler and tailored to our domain.

cc @Manishearth @gnzlbg you guys might be interested. While this could solve a number of problems on the backend side, we'd be reimplementing a lot of functionality that is already there.
@rust-dev-tools this repository was moved here recently, but travis-ci, appveyor, and dependa-bot were disabled as part of the move. These need to be re-enabled.

This will need updating the links in the readme to the appropriate places (i've updated most links in #84 but idk what to do about appveyor until the service is back up). 
For instance if you run `cargo semver -S url:1.0.0 -C url:1.7.1` this will happen:

```text
thread 'main' panicked at 'assertion failed: self.in_new_crate(new)', src/semcheck/mapping.rs:122:9
```

The item that cause this lives in the `percent_encoding` workspace.
Hello,

It would be great if `cargo semver` had a subcommand that could automate a chunk of the publishing process and update the version in Cargo.toml. This would make make deployment less error-prone by reducing human interaction.

Thanks for considering!
Hi. I'm trying to run `cargo semver` on exonum crate and getting an ICE:

Repo: https://github.com/exonum/exonum/

```text
$ pwd                                                                                                                                                                                                         
/home/ozkriff/exonum/exonum                                                                                                                                                                           
$ git rev-parse HEAD
7aa8fac54a47f31894a86119b25dfdc6a33f28ec
$ c b                                                                                                                                                                                                         
    Finished dev [unoptimized + debuginfo] target(s) in 1.54s                                                                                                                                                 
$ c c                                                                                                                                                                                                         
    Finished dev [unoptimized + debuginfo] target(s) in 0.28s                                                                                                                                                 
$ c semver                                                                                                                                                                                                    
       Fresh percent-encoding v1.0.1                                                                                                                                                                          
       Fresh quick-error v1.2.1                                                                                                                                                                               
       Fresh libc v0.2.40                                                                                                                                                                                     
       Fresh matches v0.1.6                                                                                                                                                                                   
       Fresh build_const v0.2.0                                                                                                                                                                               
.
.
.
       Fresh router v0.6.0                                                                                                                                                                                    
       Fresh iron-cors v0.7.0                                                                                                                                                                                 
       Fresh bodyparser v0.8.0                                                                                                                                                                                
       Fresh urlencoded v0.6.0                                                                                                                                                                                
       Fresh exonum_libsodium-sys v0.0.16                                                                                                                                                                     
       Fresh params v0.8.0                                                                                                                                                                                    
       Fresh exonum_sodiumoxide v0.0.16                                                                                                                                                                       
       Fresh exonum v0.7.0 (file:///home/ozkriff/bitfury/exonum/exonum)                                                                                                                                       
    Finished dev [unoptimized + debuginfo] target(s) in 0.1 secs                                                                                                                                              
    Updating registry `https://github.com/rust-lang/crates.io-index`                                                                                                                                          
       Fresh serde v1.0.55                                                                                                                                                                                    
       Fresh lazycell v0.6.0                                                                                                                                                                                  
       Fresh rustc-serialize v0.3.24                                                                                                                                                                          
       Fresh safemem v0.2.0                                                                                                                                                                                   
       Fresh lazy_static v1.0.0                                                                                                                                                                               
       Fresh itoa v0.4.1                            
.
.
.
       Fresh persistent v0.4.0                                                                                                                                                                                
       Fresh router v0.6.0                                                                                                                                                                                    
       Fresh iron-cors v0.7.0                                                                                                                                                                                 
       Fresh mount v0.4.0                                                                                                                                                                                     
       Fresh zip v0.2.8                                                                                                                                                                                       
       Fresh failure v0.1.1                                                                                                                                                                                   
       Fresh bodyparser v0.8.0                                                                                                                                                                                
       Fresh urlencoded v0.6.0                                                                                                                                                                                
       Fresh params v0.8.0                                                                                                                                                                                    
       Fresh exonum_libsodium-sys v0.0.16                                                                                                                                                                     
       Fresh exonum_sodiumoxide v0.0.16                                                                                                                                                                       
       Fresh exonum v0.7.0                                                                                                                                                                                    
    Finished dev [unoptimized + debuginfo] target(s) in 0.2 secs                                                                                                                                              
thread 'main' panicked at 'region_obligations not empty: [                                                                                                                                                    
    (                                                                                                                                                                                                         
        NodeId(                                                                                                                                                                                               
            0                                                                                                                                                                                                 
        ),                                                                                                                                                                                                    
        RegionObligation(sub_region=ReStatic, sup_type=H)                                                                                                                                                     
    )                                                                                                                                                                                                         
]', librustc/infer/mod.rs:1019:9                                                                                                                                                                              
note: Run with `RUST_BACKTRACE=1` for a backtrace.                                                                                                                                                            
                                                                                                                                                                                                              
error: internal compiler error: unexpected panic                                                                                                                                                              
                                                                                                                                                                                                              
note: the compiler unexpectedly panicked. this is a bug.                                                                                                                                                      
                                                                                                                                                                                                              
note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports                                                                                             
                                                                                                                                                                                                              
note: rustc 1.27.0-nightly (acd3871ba 2018-05-10) running on x86_64-unknown-linux-gnu                                                                                                                         
                                                                                                                                                                                                              
note: compiler flags: --crate-type lib                                                                                                                                                                        

$ rustup show
Default host: x86_64-unknown-linux-gnu

installed toolchains
--------------------

stable-x86_64-unknown-linux-gnu
nightly-2018-01-01-x86_64-unknown-linux-gnu
nightly-x86_64-unknown-linux-gnu (default)

active toolchain
----------------

nightly-x86_64-unknown-linux-gnu (default)
rustc 1.27.0-nightly (acd3871ba 2018-05-10)

```
From IRC:
```
<eddyb> hmmmmmmmm sadly rustc doesn't support it (although maybe it can be done hackily), but it'd be super cool if you could show that two different targets provide the same API
<eddyb> at least for tier-1 platforms
[...]
<eddyb> twk: aturon and others might be interested in it because of the "compatibility lint" stuff
```
Once https://github.com/rust-lang/rust/pull/47833 lands, it should be possible to make use of it to compute the bounds for auto-trait impls, and check them for backwards-incompatible changes.

It will probably be necessary to PR some minor adjustments to rustc (e.g. moving `AutoTraitFinder` from `librustdoc` to `librustc`), but all of the core logic already exists.