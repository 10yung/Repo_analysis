```ts
const enum TokenMember {
    TYPE = 0,
    VALUE,
    ...
}

token[TokenMember.TYPE]
```
It's much better than such as `token[0]`, `token[1]`.
I set up a page for a forked repo [here](https://jakkrobbit.github.io/quenchjs/). The site's supposed to load text on the right side, but as you can see, there's just a message saying "Your browser doesn't currently support JavaScript". It's set up to render text from .mst files located in `dist/scripts/templates`.

It works fine on the [original site](http://quenchjs.com/) and when I'm working on localhost, but I get 404 errors when testing the gh-pages version. And despite what the error message says, the rest of the Javascript works fine - tooltips, switching tabs, and saving files are all functioning. Compiling mustache templates is literally the only thing that isn't working.

If it helps, here's the block of code related to mustache:
```javascript
// Variable Setup
var quench_options = {
    'basic-gulpfile': false,
    'proj-name': 'Quench',
    'version': '1.0.0',
    'descrp': 'A Gulp file and project generator.',
    'author': 'Quench',
    'browser-sync': true,
    'css': true,
    'css-autoprefix': true,
    'css-destination': "dist/styles",
    'css-minimize': false,
    'css-precompile': true,
    'css-precompile-type': "sass",
    'css-source': "src/styles",
    'gulp-sass': true,
    'images-destination': "dist/images",
    'images-optimize': true,
    'images-source': "src/images",
    'js': true,
    'js-coffeescript': false,
    'js-concatenate': true,
    'js-destination': "dist/scripts",
    'js-es6': false,
    'es-lint': false,
    'js-minimize': true,
    'js-source': "src/scripts",
    'usingBS': true
};

// File Handlers
function displayFile(file) {
    'use strict';
    $('#file').html(file);
    hljs.highlightBlock($('#file').get(0));
}

function renderFile(file, renderOnly) {
    'use strict';
    var pJSON = '';

    if (renderOnly === undefined) {
        renderOnly = false;
    }

    if (!renderOnly) {
        $('#file-wrapper').addClass('loading');
    }

    if ($('#template-' + file.replace('.', '')).length) {
        var template = $('#template-' + file.replace('.', '')).text();
        Mustache.parse(template);
        pJSON = Mustache.render(template, quench_options);
        if (!renderOnly) {
            displayFile(pJSON);
            $('#file-wrapper').removeClass('loading');
        }
        return pJSON;
    } else {
        $.ajax({
            url: '/dist/scripts/templates/' + file + '.mst',
            dataType: 'text',
            success: function (template) {
                //Save template
                $('<script>')
                    .attr('type', 'x-tmpl-mustache')
                    .attr('id', 'template-' + file.replace('.', ''))
                    .text(template)
                    .appendTo('body');

                pJSON = Mustache.render(template, quench_options);
                if (!renderOnly) {
                    displayFile(pJSON);
                    $('#file-wrapper').removeClass('loading');
                }
                return pJSON;
            }
        });
    }
}
```
I'd like the `-p` flag to optionally accept a two-part argument, where one part is the path to the partial file and where the other part is a name for the partial. Renaming partials is currently possible only when using the library programmatically. This functionality would allow the CLI to mirror the following programmatic usage:
```js
const template = `
  <div class="mmgr-navigation__competitions">
    {{#competitionList}}
      {{> select }}
    {{/competitionList}}
  </div>

  <div class="mmgr-navigation__schedule">
    {{#seasonList}}
      {{> select }}
    {{/seasonList}}
  </div>
`

const selectPartial = `
  <select class="mmgr-select">
    {{#.}}
      <option class="mmgr-select__item" value="{{value}}">{{text}}</option>
    {{/.}}
  </select>
`

const output = Mustache.render(template, data, { select: selectPartial })
```

I would be willing to submit a patch if the maintainers would like to incorporate this functionality.
Is it possible to get a setter for the escape function? There might be a better way. I'm running into issues with TypeScript.

https://share.busheezy.dev/SovaRs

Thanks.

`"resultselector":"jsonpath:$.[*]"`
`"resultTemplate":"{ \"Value\" : \"{{{Id}}}\", \"DisplayValue\" : \"{{{Name}}}\" }"`

Am calling an API and it is returning a set of data.

While fetching the key value pairs, If DisplayValue-Name contains double quotes (eg. "AppWithQuotes" or AppWith"Quotes), the dropdown is displaying the entire key value pair as it is (Refer the [Link ](https://github.com/Microsoft/azure-pipelines-task-lib/issues/501 ))
For other cases (when double quotes are not present), the drop down displays the DisplayValue name alone as expected (eg. Demo/123).




Suppose I have IIFE (or just plain Object for that matter), defined thusly:

```
let data = (function() { 
  let _somePrivateDummyData = [
    {
      id : 1,
      name : 'bobbert',
      toString : () => `My name is ${this.name}`
    },
    {
      id : 2,
      name : 'tommy',
      toString : () => `My name is ${this.name}`
    }
  ]
  
  _somePrivateDummyData.forEach((obj) => obj.toString.bind(obj))
  
  /* a whole bunch of business logic irrelevant to this MVCE */
  
  return {
    getSelectedData : () => _somePrivateDummyData.slice()
    /* a smorgasboard of other exposed methods, irrelevant to this MVCE */
  }

})()
```

I wish to get the length of the selected data, to pass to the view. 

Doing `{{#getSelectedData}}{{length}}{{/getSelectedData}}` doesn't work.

[This CodePen](https://codepen.io/mwarren/pen/xMBEKm) shows everything that I have tried, including that. 

Failing that, and failing to find relevant documentation on this particular use case, how can we access the `length` property of an Array the user inputs? I'm trying to decouple the data-handling logic from the view-handling logic as much as possible.
Implemented Pipeline Operator, i did use #139 and #261 to understand the problem.

You can use `|` or `|>`

```js
let data = {
   variable: "MyAwesomeVariable",
   pipelineOne: function(value){
      return value.toLowerCase();
   },
   pipelineTwo: function(value){
      return value + " two";
   }
}
```

```txt
{{ variable | pipelineOne }}
```
```txt
{{ variable |> pipelineOne }}
```
```txt
{{ variable |> pipelineOne  |> pipelineTwo }}
```
Have some tag to count elements?
`list = [1,2,3,4,5,6];`
To insert counts list in html?
I'm new to mustache, so please go easy. I've found that `{{#thing}}` is used to loop over items in an array, and `{{^thing}}` is used to check if `thing` is falsey or an empty array. So far so good. But how do I check if an array is *non-empty*? I want to achieve a pretty common pattern like this:

```
{{if items}}
<ol>
    {{#items}}
    <li>{{.}}
    {{/items}}
</ol>
{{/if items}}
{{^items}}
  No items here
{{/items}}
```

The `{{if items}}` obviously doesn't work, but it does illustrate what I need. Given the dual function of `{{#thing}}` were it can also check truthyness of non-array variables afaik, if I were to use `{{#items}}` there, it would spew out as many lists as there are items.

Is there another notation that's not in the docs, or one that I've totally missed? I'm sure I'm not asking anything totally new, surely.
### Question:
How can I get all partials includes of a template? the includes not its contents. For example: for any partial include: {{>aTemplate}} i should get aTemplate

### New Feature:
If it is not posible, one feature can be a function that return all partial includes as an array of string.

### Why:
To fetch, by ajax requests, only the needed partials of a template.
