Xin chÃ o
http://www.huyng.com/bashmarks-directory-bookmarks-for-the-shell/
link is dead.
Could you fix it?
Current version mandates installation in .local.  This change
would allow the script to be installed in say /usr/loca/bin
Hi, 

I use bashmarks all the time and it is extremely useful to me.

Feature request: a shortcut to set the current directory as a bookmark without typing the name

I would have a list of directories that function as work places I frequently navigate to.  Every time I have to set a bashmark as in

```
cd my-very-long-working-directory
s myverylongworkingdirectory
cd to-where-I-was-before
```

The shortcut would be to simply state

```
s cwd
```

where cwd is the name of the current working directory that is parsed to remove characters that bashmarks do not allow.  The cwd can be anything else, it need not be cwd as long as bashmarks recognise it as the current working directory.

A trivial feature, but one that will be useful to some.

Thanks
 
The original `touch $SDIRS` command fails if a user has a path with spaces. This isn't super common, but has happened to me on one of my machines, found this fix, and thought it'd be a good thing to add. 
Hi,
when using ZSH with his Git alias plugin, the g alias is already taken to link Git command.
Chaging "g" to "go"
see line 150.

`sed "/$2/d" "$1" > "$t"` becomes `sed "/$2/d" "$1" >| "$t"`



With this commit, you can list bashmarks that start with a certain text, by passing that text to the list command. For example:
```
$ l
drill2             /Users/roubles/drill2
drillfoo           /Users/roubles/drillbar
drillbar           /Users/roubles/drillfoo
frontend           /Users/roubles/git/paging-alfred-2017-03-28/src/main/frontend
git                /Users/roubles/git
```

and now, if I want to list only the bashmarks that start with drill:
```
$ l drill
drill2             /Users/roubles/drill2
drillfoo           /Users/roubles/drillbar
drillbar           /Users/roubles/drillfoo
```

Also, the list function now supports tab completion to show the best matching bashmark.

Gurus,

This tool is great, and I think more value can be added if we can show a numbered list, and allow users to jump to a directory based on the number. 

This is similar to how you run the history command, you see a numbered list of history commands, and then you can use !n to re run a particular command. Similarly, 

```
$ l
1     foo         /Users/roubles/foo
2     bar         /Users/roubles/bar
3     fubar       /Users/roubles/fubar
4     nada        /Users/roubles/nada
5     alice       /Users/roubles/git/alice
6     bob         /Users/roubles/git/bob
```

And then users can use something like 'n 5' and jump to /Users/roubles/git/alice.

```
$ n 5
$ pwd
$ /Users/roubles/git/alice
```

This simplifies the workflow a lot.



the current function "l" is typically aliased to something else on Ubuntu 

What's the recommend way to alter the alias for bashmarks, with modifying the code?  i.e. l -> lll
I use yadm to manage my dotfiles across many different systems.  The current 
mechanism they have for managing files that are different are symlinks, so for
example

.sdirs## <- default
.sdirs##classA  <- special one-off system (i.e. different and/or extra bashmarks)

A yadm alt command will link .sdirs --> .sdirs##classA or .sdirs --> .sdirs## based on 
configuration.

The current bashmarks will stop on the symlink during a "s" and my guess "d"

Possible solution, to see if SDIRS is a link, if so follow it to the real file
change:
```
if [ ! -n "$SDIRS" ]; then
    SDIRS=~/.sdirs
fi
touch $SDIRS
```
to 
```
if [ ! -n "$SDIRS" ]; then
    SDIRS=~/.sdirs
fi

tmp=$(readlink $SDIRS)
if [ -n "$tmp" ]; then
#    echo "Updating sdirs: $tmp"
    SDIRS=$tmp
fi
touch $SDIRS
```


