This removes an extra parenthesis in the nested routing documentation example to allow the example to work.


> RFC 7230: server MUST reject messages with BWS after field-name (#445)
    Obey the RFC requirement to reject HTTP requests with whitespace
    between field-name and the colon delimiter. Rejection is
    critical in the presence of broken HTTP agents that mishandle
    malformed messages.

If not, it will be used to smuggle http request.

Test code:
```python
import tornado.ioloop
import tornado.web

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("Hello, world")
    
    def post(self):
        data = self.request.body
        self.write(str(data))

def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
    ])

if __name__ == "__main__":
    app = make_app()
    app.listen(8000)
    tornado.ioloop.IOLoop.current().start()
```

Test script:
```bash
printf 'POST / HTTP/1.1\r\n'\
'Host:localhost\r\n'\
'Content-length : 5\r\n'\
'Connection: close\r\n'\
'\r\n'\
'a=3\r\n'\
'\r\n'\
| nc -w 1 127.0.0.1 8000
```

Expected behavior:
return 400

Actual behavior:
return 200

Version:
tornado 6.0.3
python 3.7.5
The User-Agent format is "Tornado\\{Tornado_Version}".

If self.request.user_agent isn't set and self.request.headers has
no User-Agent in it's keys the default User-Agent is added.

Fixes: #2702 
The demo blog app has an issue with its Docker containers, where the Python app may initialize before the Postgres database.

This [PR](https://github.com/tornadoweb/tornado/pull/2784) was using a solution to enforce the container order, but a better approach would be to prevent the Python application from crashing if possible. See the PR comments for me.
I do not have any concept of why this issue is occuring, but Foosel believes this is an issue with Tornado rather than a misuse. So I'm placing it here since I am apparently banned from discussing anything further in Octoprint. I'll give more details when I can.

https://github.com/foosel/OctoPrint/issues/3376
Tornado's IOStream.start_tls leaks connections when the handshake starts but does not complete. The AsyncHTTPClient returns "HTTP 599: Timeout while connecting", but the underlying connection is not closed.

This can be reproduced quite easily: start a netcat to listen on 127.0.0.1:9000 and run the attached example with "ssl_leak.py http" or "ssl_leak.py https" to observe different behaviors. HTTP closes the connection (and netcat exits), while HTTPS keeps the connection up even after the request errors.

[ssl_leak.py.txt](https://github.com/tornadoweb/tornado/files/3926370/ssl_leak.py.txt)

I've observed this behavior with

> OpenSSL: OpenSSL 1.1.0f  25 May 2017
> Python: 3.5.3 (default, Jan 19 2017, 14:11:04) 
> [GCC 6.3.0 20170124]
> Tornado: 4.5.3

and 

> OpenSSL: OpenSSL 1.1.1d  10 Sep 2019
> Python: 3.7.3 (default, Apr  3 2019, 05:39:12) 
> [GCC 8.3.0]
> Tornado: 6.0.3


I've confirmed this is an issue in start_tls with a "fix", but this fix includes a timeout, which is currently hardcoded. This timeout value might need to be somehow passed into start_tls, but the start_tls is hidden quite deep.

[iostream_tls_leak_fix.diff.txt](https://github.com/tornadoweb/tornado/files/3926387/iostream_tls_leak_fix.diff.txt)

We provide read access to logs which are still being appended. Sometimes it causes:
tornado.httputil.HTTPOutputError: Tried to write more data than Content-Length

This will of course doesn't help when the file is truncated meantime - but this doesn't happen for us.

I suppose that the followin line should also set `end=size`.

https://github.com/tornadoweb/tornado/blob/984aba0a202038fba36b40adcf1a978ffc94dce3/tornado/web.py#L2636
[E 191029 10:54:51 base_events:1608] Task was destroyed but it is pending!
    task: <Task pending coro=<WebSocketProtocol13._receive_frame_loop() done, defined at D:\AndroidControl\Python37\lib\site-packages\tornado\websocket.py:1115> wait_for=<Future pending cb=[IOLoop.add_future.<locals>.<lambda>() at D:\AndroidControl\Python37\lib\site-packages\tornado\ioloop.py:690, <TaskWakeupMethWrapper object at 0x000002AC48174468>()]> cb=[IOLoop.add_future.<locals>.<lambda>() at D:\AndroidControl\Python37\lib\site-packages\tornado\ioloop.py:690]>