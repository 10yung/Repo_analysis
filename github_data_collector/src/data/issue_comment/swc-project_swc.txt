I try to evaluate swc parser to replace my usage of `@babel/parser`.

Is the AST compatible with `@babel/parser` result?

Also, `@babel/parser` has an `estree` plugin (which I use) to generate estree compatible AST tree. Does swc have something equivalent to produce `estree` output?
I'm attempting to use swc with a project on windows 10 and getting the following error:

```
ERROR in ./ts/apps/index.tsx
Module build failed (from ./node_modules/swc-loader/src/index.js):
Error: \\?\$MY_DIRECTORY$\node_modules\@swc\core\native\index.node is not a valid Win32 application.
\\?\$MY_DIRECTORY\node_modules\@swc\core\native\index.node
    at Object.Module._extensions..node (internal/modules/cjs/loader.js:1025:18)
    at Module.load (internal/modules/cjs/loader.js:815:32)
    at Function.Module._load (internal/modules/cjs/loader.js:727:14)
    at Module.require (internal/modules/cjs/loader.js:852:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.<anonymous> (C:\Development\JNC\royal_app_suite\src\Web\node_modules\@swc\core\index.js:53:14)
    at Module._compile (internal/modules/cjs/loader.js:959:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
    at Module.load (internal/modules/cjs/loader.js:815:32)
    at Function.Module._load (internal/modules/cjs/loader.js:727:14)
    at Module.require (internal/modules/cjs/loader.js:852:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.<anonymous> (C:\Development\JNC\royal_app_suite\src\Web\node_modules\swc-loader\src\index.js:2:13)
    at Module._compile (internal/modules/cjs/loader.js:959:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
    at Module.load (internal/modules/cjs/loader.js:815:32)
 @ multi ./ts/apps/index.tsx app[0]
```

I'm using windows 10 cmd prompt (not WSL).
node v2.13.1, x64 version.
webpack 4.41.4

The binary is `win32-x64`, should I be using 32-bit node? Or downloading rust myself to build it for x64? The installation instructions are a little unclear there, I interpret it to mean "the npm install command will install a prebuilt binary if it can. If you want to or need to build your own you should install rust. If you need to install rust on windows go to rustup.rs", but that installing rust is not necessary if you are using the prebuilt binary.
I took a look and couldn't find any mention of this anywhere. React has replaced `react-hot-loader` with with a new Fast Refresh system, which can be integrated with watch builds, babel, and webpack in order to do Hot Module Reloading.

I'm still working out exactly where the boundaries are myself in terms of what work to support this belongs in swc and what belongs in react or an external webpack plugin. But I wanted to at least get this on the radar as a Feature Request.
Cannot use webpack's resolve.alias

resolve: {
  '@': resolve('source')
}

**Error:**
**failed to parse config file: data did not match any variant of untagged enum Rc @ multi**
There have been a decent amount of bugs related to the AST node start and end being incorrect. I think we could help prevent regressions and make future node positions a little more testable if we develop a new test for this.

Perhaps beyond the current test that uses numbers it would be useful to create two typescript files (one jsx, one non-jsx) that hold all the different possible AST node combinations. Then a json test file that has all the AST nodes, but only contains the type, text, and any children. Maybe something like the following:

```json
// perhaps we'd skip the root module text because that would just be long and not so useful
[{
    "type": "FunctionDeclaration",
    "text": "function test {}",
    "name": {
        "type": "Identifier",
        "text": "test"
    },
    "params": [],
    // etc...
}, {
    // ... other statements go here ....
}]
```

The file would be auto-generated similar to the `input.ts.json` files, but this would make it extremely easy to visually identify problems with node span lengths.

Thoughts?
I'm working on it.

https://github.com/kdy1/swc/tree/ts-hybrid

Here's some code from the TypeScript compiler in [checker.ts](https://raw.githubusercontent.com/microsoft/TypeScript/master/src/compiler/checker.ts):

```ts
const filterFn: (t: Type) => boolean = operator === SyntaxKind.EqualsEqualsToken ?
                        (t => areTypesComparable(t, valueType) || isCoercibleUnderDoubleEquals(t, valueType)) :
                        t => areTypesComparable(t, valueType);
```

The following error occurs:

> not yet implemented: reparse_expr_as_pat, pat_ty = BindingPat, expr = Arrow(ArrowExpr { span: Span { lo: BytePos(109), hi: BytePos(193), ctxt: #0 }, params: [Ident(Ident { span: Span { lo: BytePos(109), hi: BytePos(110), ctxt: #0 }, sym: Atom('t' type=inline), type_ann: None, optional: false })], body: Expr(Bin(BinExpr { span: Span { lo: BytePos(114), hi: BytePos(192), ctxt: #0 }, op: "||", left: Call(CallExpr { span: Span { lo: BytePos(114), hi: BytePos(146), ctxt: #0 }, callee: Expr(Ident(Ident { span: Span { lo: BytePos(114), hi: BytePos(132), ctxt: #0 }, sym: Atom('areTypesComparable' type=dynamic), type_ann: None, optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: Span { lo: BytePos(133), hi: BytePos(134), ctxt: #0 }, sym: Atom('t' type=inline), type_ann: None, optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: Span { lo: BytePos(136), hi: BytePos(145), ctxt: #0 }, sym: Atom('valueType' type=dynamic), type_ann: None, optional: false }) }], type_args: None }), right: Call(CallExpr { span: Span { lo: BytePos(150), hi: BytePos(192), ctxt: #0 }, callee: Expr(Ident(Ident { span: Span { lo: BytePos(150), hi: BytePos(178), ctxt: #0 }, sym: Atom('isCoercibleUnderDoubleEquals' type=dynamic), type_ann: None, optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: Span { lo: BytePos(179), hi: BytePos(180), ctxt: #0 }, sym: Atom('t' type=inline), type_ann: None, optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: Span { lo: BytePos(182), hi: BytePos(191), ctxt: #0 }, sym: Atom('valueType' type=dynamic), type_ann: None, optional: false }) }], type_args: None }) })), is_async: false, is_generator: false, type_params: None, return_type: None })'

This also fails with babel, but is fine with the TS compiler: https://babeljs.io/repl#?browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=MYewdgzgLgBAZgSwDZQKYCcBiYBcMAUUeAKgJ4AOqAlDALwB8MARiCEqgIZh0wiXocoIdHVq0YAZVJgoHAB4BpBGAAmAOgCiARwCuHJBG16DxEAGtU3APwAoGPYeOnzh4TqMO6VGUoQAwiAAtuSeHEzshAA0MABu-jreFNQwAD4pMAj-IBjACOGoAKqqGAAiIDr5RvoQUbHxiZRUNDh2Lm1tsAwwng2oWcGh-bVxSAk-1ADcQA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=es2015%2Creact%2Cstage-2&prettier=false&targets=&version=7.7.7&externalPlugins=

Note this happens because of the type annotation on the variable declaration (see [here how this compiles](https://babeljs.io/repl#?browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=MYewdgzgLgBAZgSwDZQKYCcBiYYF4YgAOGAhlCOnrvgMoCeYUJAHgNIJgAmAdAKICOAVxJIIA4aIAqIANaocAfgBQMVWvUbNagBSxcAPhgl0qSXWIQAwiAC2hYyQBGSVLoA0MAG4jBp86gBKGAAfYJgEKxAMYARnVABVLgwAERBBOPERCHcvHz9iAKCALhUtMrK9Q2N81Ei7Bzic7yRfMwKAbiA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=es2015%2Creact%2Cstage-2&prettier=false&targets=&version=7.7.7&externalPlugins=)). Edit: Actually, in swc removing the type annotation doesn't fix the problem...

(This is low priority)
I wanted to make the following recommendations on the AST node names for import specifiers:

* `ImportDefault` -> `ImportDefaultSpecifier`
* `ImportStarAs` -> `ImportStarAsSpecifier` (or `ImportNamespaceSpecifier` as babel calls it?)
* `ImportSpecific` -> `ImportNamedSpecifier`

The comments for these should also probably be updated (ex. on `ImportDefault` it should go from `/// e.g. `import foo from 'mod.js'`` to `/// e.g. `foo` in `import foo from 'mod.js'``).

Note that the export specifier names should probably be switch to be consistent as well if we decide to do this:

* `NamespaceExportSpecifier` -> `ExportNamespaceSpecifier`
* `DefaultExportSpecifier` -> `ExportDefaultSpecifier`
* `NamedExportSpecifier` -> `ExportNamedSpecifier`
Hello! I'm exploring SWC as a base for a build tool. One of the things that I'd like to have, is a dependency graph starting at an entry point module. Ideally it could be separate CLI/API operation that emits dependency graph. Is this something SWC could have?
We have switched from Babel to swc, which worked fine. In the next PR of our project, suddenly all elements created with `document.createElement(tag_name_const)` were turned into `<br>` elements, which of course breaks the whole website. This problem only occured on a MacBook in all browsers, but in no browser on a Windows laptop.

We had to temporarily switch back to Babel (which made it work again) because we had no time to investigate the issue. I plan to update this Issue later with more information, which is why I do not expect any bug fixing work to this issue right now. Our project is currently private but I want to try to reproduce the error from scratch later.

