* Use Linux-style public symbol names (sym instead of _sym@blah)
* Rewrite inline assembly in v2mplayer.cpp as C++, or use GNU-style
  inline assembly
* #define __stdcall away when WIN32 isn't defined
* Disable Ronan by default (but can be switched on if you want)
* Emulate cdecl because stdcall isn't a thing on Linux

Might work on FreeBSD as well.

Example playback code [here](https://gitlab.com/PoroCYon/4klang-linux/blob/master/v2/src/lplayer.cpp)
Hi, I would like to test the GLES2 renderer, but it seems to be quite outdated or so. Does anybody know how to get it to work? I run into problems like this:

![werkkzeug4_gles2_tbind](https://user-images.githubusercontent.com/5236548/41692372-3eb95986-7500-11e8-8daf-2024e6faa4d9.png)

Or this:

![werkkzeug4_gles2_shadercreator](https://user-images.githubusercontent.com/5236548/41692454-ac31c02a-7500-11e8-997a-98b7161140b6.png)

I tried to make some sense out of the errors, but I don't know what to do with them. It looks to me that there are only HLSL shaders generated, so the C++ code must be rewritten for GLSL?
Hi, just tried to build this, but I ran into a few problems. It took a bit to figure it out, so the next person will have it easier.

1) First generate the 2012 solution/project files normally
2) Drag&drop the generated `G:\fr_public\altona_wz4\wz4\werkkzeug4\werkkzeug4.sln` on Visual Studio 2015
3) Either Visual Studio retargets it automatically, or if not, simply right click on `Solution 'werkkzeug4'` and click on "Retarget"
4) Now open "base/types.hpp"

Rewrite this:
```
#define sCONFIG_NATIVEINT         __int64 _w64
#define sCONFIG_INT64             __int64 _w64
```
to this, because _w64 doesn't exist in Visual Studio 2015:
```
#define sCONFIG_NATIVEINT         __int64
#define sCONFIG_INT64             __int64
```

5) You need the DX9 or DX11 headers and libs, which can be installed by running this: https://www.microsoft.com/en-us/download/details.aspx?id=6812

The DirectX setup will error with some short error message, but all the .lib files and header includes are saved on disc.

6) Now we actually need to tell Visual Studio 2015 where to find the headers/libs:

Add to include search path:
```
C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include
C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\include
C:\Program Files (x86)\Windows Kits\10\Include\10.0.15063.0\ucrt
C:\Program Files (x86)\Windows Kits\10\Include\10.0.15063.0\um
C:\Program Files (x86)\Windows Kits\10\Include\10.0.15063.0\shared
```

Add the lib search path, only needed for werkkzeug4 project:
```
C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Lib\x64
C:\Program Files (x86)\Windows Kits\10\Lib\10.0.15063.0\ucrt\x64
```

8)
```
First one was called, but fails, it needs "win32", not "Win32", case sensitive
1) yasm -Xvc -f Win32 -rnasm -pnasm      -o release_dx9_Win32\incbin.obj  incbin.asm
2) yasm -Xvc -f win32 -rnasm -pnasm      -o release_dx9_Win32\incbin.obj  incbin.asm
```

9) Add legacy_stdio_definitions.lib to werkkzeug4 project

10) The last problem is that Visual Studio doesn't allow overwriting the `new` operator "easily" anymore. But it works again by defining these two defines for every project (just select all, rightclick on options, C/C++ -> Preprocessor and set those two defines:
```
__PLACEMENT_NEW_INLINE
__PLACEMENT_VEC_NEW_INLINE
```

Otherwise the project will compile, but won't link, because two functions already have a body.


I guess this also works with Visual Studio 2017, but I didn't test it yet. Have fun xd


Hmmm... you said that GUI doesn't work on linux, but it works for me. The only problem is makeproject.
Hey, if you have it, pleaseeeeeeeeeeeeeeeeeee gimme that
These patches remove a few oversights and bugs that prevent building asc et al on POSIX platforms.
They also add a cmake script, greatly increasing portability. Untested on anything else than Linux/amd64.

Scanned with three anti virus applications. Two of them have identified threats on three files:
fr_public-master/werkkzeug3/data/debris/release/fr-041_debris.exe
fr_public-master/werkkzeug3/data/debris/release/fr-041_debris.zip
fr_public-master/v2/bin/lib/example/tinyplayer.exe

The third anti virus confirms tinyplayer.exe

It seems a problem affect all .k files generated by werkkzeug3. I also tried with the originals files from this repository. The result is `player_demo.exe` give something like :
![debris_9241 k](https://cloud.githubusercontent.com/assets/3824869/3061315/bc84b15a-e204-11e3-8f86-3c5f71db2a2e.GIF) or ![simple example k](https://cloud.githubusercontent.com/assets/3824869/3061352/9e36ad88-e205-11e3-8b8a-e72dd9a178fa.GIF). after clicking `Demo` on this image : 
![the parameters doesn t matter it also does the same error in full screen](https://cloud.githubusercontent.com/assets/3824869/3061398/52f501fc-e206-11e3-8be4-56fdb6a6a48b.PNG)

Hi, there, is there any plans to do that and is it difficult to do? I could help to do it too and even donate something. Many people want it to be playable on their mobile phones, macs and linuxes.

Is it possible that you could release some tool to convert v2m to mid? Of course the instruments will be gone, but you can add them by Hand later on. I just wanted to ask if you could make such a tool. Greetz!
