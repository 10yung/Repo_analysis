Blynk library version: [0.6.1]
IDE: [Arduino] but also on PlatformIO
IDE version: [1.8.10]
Board type: [ESP32]
ESP32 Arduino 1.0.4 (IDF 3.2)
Additional modules: [no]

Blynk.Inject ESP32 Template break with `dhcps: send_offer>>udp_sendto result 0` reboots and the Provisioning fails. What IDF version are people using with ESP32?

```
Guru Meditation Error: Core  0 panic'ed (InstrFetchProhibited). Exception was unhandled.
Core 0 register dump:
PC      : 0x00000000  PS      : 0x00060e30  A0      : 0x801396a5  A1      : 0x3ffb3f70  
A2      : 0x3ffcdd84  A3      : 0x3ffcdfb8  A4      : 0x3ffce3f8  A5      : 0x3ffce3d8  
A6      : 0x0204a8c0  A7      : 0x0c04a8c0  A8      : 0x80139548  A9      : 0x3ffb3f30  
A10     : 0x3ffcdd94  A11     : 0x3ffcdfb8  A12     : 0x3ffb3f7c  A13     : 0x00000044  
A14     : 0x00000001  A15     : 0x00000006  SAR     : 0x00000010  EXCCAUSE: 0x00000014  
EXCVADDR: 0x00000000  LBEG    : 0x4000c349  LEND    : 0x4000c36b  LCOUNT  : 0x00000000  

Backtrace: 0x00000000:0x3ffb3f70 0x401396a2:0x3ffb3fb0 0x40146529:0x3ffb3fd0 0x4014b531:0x3ffb4010 0x401507ce:0x3ffb4030 0x4013a0ab:0x3ffb4050 0x40088b9d:0x3ffb4080
```

* And decoded:
```
PC: 0x00000000
EXCVADDR: 0x00000000

Decoding stack results
0x401396a2: handle_dhcp at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/lwip/apps/dhcpserver/dhcpserver.c line 1031
0x40146529: udp_input at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/lwip/lwip/src/core/udp.c line 401
0x4014b531: ip4_input at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/lwip/lwip/src/core/ipv4/ip4.c line 740
0x401507ce: ethernet_input at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/lwip/lwip/src/netif/ethernet.c line 184
0x4013a0ab: tcpip_thread at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/lwip/lwip/src/api/tcpip.c line 135
0x40088b9d: vPortTaskWrapper at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/freertos/port.c line 143
```

* Serial Monitor:
```
[6667] WAIT_CONFIG => CONFIGURING
dhcps: send_offer>>udp_sendto result 0
dhcps: send_offer>>udp_sendto result 0
Guru Meditation Error: Core  0 panic'ed (InstrFetchProhibited). Exception was unhandled.
Core 0 register dump:
PC      : 0x00000000  PS      : 0x00060e30  A0      : 0x801396a5  A1      : 0x3ffb3f70  
A2      : 0x3ffcdd84  A3      : 0x3ffcdfb8  A4      : 0x3ffce3f8  A5      : 0x3ffce3d8  
A6      : 0x0204a8c0  A7      : 0x0c04a8c0  A8      : 0x80139548  A9      : 0x3ffb3f30  
A10     : 0x3ffcdd94  A11     : 0x3ffcdfb8  A12     : 0x3ffb3f7c  A13     : 0x00000044  
A14     : 0x00000001  A15     : 0x00000006  SAR     : 0x00000010  EXCCAUSE: 0x00000014  
EXCVADDR: 0x00000000  LBEG    : 0x4000c349  LEND    : 0x4000c36b  LCOUNT  : 0x00000000  

Backtrace: 0x00000000:0x3ffb3f70 0x401396a2:0x3ffb3fb0 0x40146529:0x3ffb3fd0 0x4014b531:0x3ffb4010 0x401507ce:0x3ffb4030 0x4013a0ab:0x3ffb4050 0x40088b9d:0x3ffb4080

Rebooting...
ets Jun  8 2016 00:22:57
```

<!--
Thanks for contributing to Blynk library :-)

Please provide the following information for all PRs.
Replace [brackets] and placeholder text with your responses.
-->

### Description
My use case is using a self-signed certificate and its fingerprint for validation.

This PR makes the following code use the fingerprint and work as expected:
> Blynk.begin(auth, ssid, pass, ip, port, fingerprint);

otherwise the `WiFiClientSecure::connect()` method fails to validate the SSL connection and returns the following error if debug messages are enabled or silently fails otherwise:
> BSSL:Couldn't connect. Error = 'Chain could not be linked to a trust anchor.'

A workaround, without applying this PR is:
>  _blynkWifiClient.setFingerprint(fingerprint);
>  Blynk.begin(auth, ssid, pass, ip, port, fingerprint);

### Issues Resolved
Using the fingerprint fails to establish an SSL connection.

Blynk library version: 0.6.1
IDE: Arduino and gcc in linux Raspberry pi
IDE version: Arduino 1.8.10, gcc Raspbian 8.3.0-6+rpi1
Board type: Arduini Pro Mini, Adruino Nano, Raspberry Pi Zero v1.3
Additional modules: enc28j60 for Arduino, 0fe6:9700 ICS Advent DM9601 Fast Ethernet Adapter for Raspberry Pi Zero

### Scenario, steps to reproduce
For Adruino I have done simple sketch to send heart beat to widget. For Raspberry Pi I have used your example from linux folder. I'm using my own blynk server. When I reboot the blynk server, the application does not try to connect to the server again. 

### Expected Result
The application continues to try to connect to the server until the connection is restored.

### Actual Result
Arduino loses its connection. The application in the Linux ends without any messages. 
<!--
Thanks for contributing to Blynk library :-)

Please provide the following information for all PRs.
Replace [brackets] and placeholder text with your responses.
-->

### Description
I made odroid-series arduino core.
I want to write blynk code on the Arduino platform even if on the embedded Linux.


### Issues Resolved
Until now, for using blynk, the code with blynk was compiled using command line tools on the embedded Linux.

If you merge BlynkSimpleLinuxSocket.h, to use blynk is much easier on the embedded Linux with Arduino.

Blynk library version: 0.61
IDE: platformio + clion + android Blynk app
IDE version: platformio 3.6.7
Board type: DFRobot Bluno Beetle BLE (ATMEGA328P + CC2540)

Trying to connect BLE to use in Arduino app. Added widget for connect BLE, it scans and see's "Bluno", clicking "OK" says 'Connecting' then fails with "Can't connect. Retry or choose another device"
I have retried multiple times, I have tried doing it from multiple Android devices.

### Expected Result
Connection

### Actual Result
"Can't connect. Retry or choose another device"

The latest ESP8266 Arduino core, 2.5.0, has switched to BearSSL as the default SSL implementation and deprecated the axTLS based implementation. The WiFiClientSecure API differs between the BearSSL and axTLS implementations which means BlynkSimpleEsp8266_SSL.h no longer compiles properly out of the box.
It is unable now to use setTimeout or any other blynk timer functions with lambdas like this:
```
int testParameter = 45;
timer.setTimeout(1000L, [=]()  {
      Serial.println("Lambda gets:" + (String)testParameter);
    } );
```
Getting an error:
`"no matching function for call to 'BlynkTimer::setTimeout(long int, setup()::__lambda0)'"`

[This issue was also disscussed at blynk community forum](https://community.blynk.cc/t/how-to-send-a-parameter-to-lambda-function-if-used-in-timer-settimeout/36777/6)

Supposedly, BlynkTimer does not support lambda (as far as the way it should be), because it is a fork of Marcello Romani’s Simple timer, that neither does. But there is [another fork](https://github.com/schinken/SimpleTimer) on github, where the support of lambdas stated as a feature.

Some changes with timer_callback (timer_callback_p) typedefs and style of calling passed functions needed.

As a result of fix, supporting std::function or lambda-expressions known from C++11 will get an ability to pass local vars to lambda, and thanks to it use deffered actions with fixed values in lambda-manner
hi @vshymanskyy 

### Description
Implemented the support file, required to make works Blynk with WizFi250:

Implemented the the header file BlynkSimpleWizFi250.h;
Implemented the the header file src\Adapters\BlynkWizFi250.h;
Implemented the example examples\Boards_WiFi\WizFi250\WizFi250.ino


WizFi250 is a lower version module of the WizFi310.

BylnkWizFi250 is almost the same as the WizFi310.
WizFi250 library is available download from the library manager :)

reference : https://www.wiznet.io/product-item/wizfi250/

There was nothing wrong with the test.
thanks!


Hi guys,


I'm having a problem with the Blynk-App on IOS with the Arduino MKR1400 over USB connection.

Blynk library version: [v0.6.1]
IDE: [Arduino.]
IDE version: [web based IDE]
Board type: [MKR GSM 1400]
Additional modules: [transmission over USB, not GSM]

### Scenario, steps to reproduce
[Sending float numbers from Arduino to Value Display on specified virtual pin.]

### Expected Result
[Seeing the float number in the Value display.]

### Actual Result
[No data is displayed. When I change the value to integer typ, the value is transmitted. The exact same code works with float numbers when an Arduino UNO is used instead of an mkr 1400 that is samd based.]

Here is the simple code:

`
```
#include <BlynkSimpleStream.h>

// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "...";

BlynkTimer timer;
float duration;

// This function sends Arduino's up time every second to Virtual Pin (5).
// In the app, Widget's reading frequency should be set to PUSH. This means
// that you define how often to send data to Blynk App.
void myTimerEvent()
{
  // You can send any value at any time.
  // Please don't send more that 10 values per second.
  Blynk.virtualWrite(V2, duration);
}

void setup()
{
  // Debug console


  // Blynk will work through Serial
  // Do not read or write this serial manually in your sketch
  Serial.begin(9600);
  Blynk.begin(Serial, auth);

  // Setup a function to be called every second
  timer.setInterval(1000L, myTimerEvent);

  delay(2000);
}

void loop()
{
  Blynk.run();
  timer.run(); // Initiates BlynkTimer
  duration = 10.99;
}
```
`
Blynk library version: [0.5.4]
IDE: [Arduino]
IDE version: [1.8.8]
Board type: [NodeMCU Amica ESP8266 with CP2102]
Additional modules: [null]

### Scenario, steps to reproduce
[What you are trying to achieve and you can't?]
Setup my NodeMCU with a Static IP to my router and use the App. 

```
#define BLYNK_PRINT Serial
#define BLYNK_DEBUG        // Optional, this enables more detailed prints

#include <ESP8266WiFi.h>
//#include <BlynkSimpleEsp8266.h>

// Your WiFi credentials.
// Set password to "" for open networks.
char auth[] = "myauthcode";
char ssid[] = "myhomessid";
char pass[] = "mynetworkpassword";


// Mac address should be different for each device in your LAN. Not required.
//byte arduino_mac[] = { HEX, HEX, HEX, HEX, HEX, HEX };
IPAddress device_ip  (192, 168,   1,  5);
IPAddress dns_ip     (  8,   8,   8,   8);
IPAddress gateway_ip (192, 168,   1,   1);
IPAddress subnet_mask(255, 255, 255,   0);

void setup()
{
  // Debug console
  Serial.begin(9600);
  
  //Disconnect any previous connections.
  WiFi.disconnect();
  
  //Print status debug info before any modifications for comparison
  WiFi.printDiag(Serial);

  // Setup WiFi network by setting WiFi mode to just a Client
  WiFi.mode(WIFI_STA);
  
  //Send credentials first
  WiFi.begin(ssid, pass);
  delay(1000);

  //Set config in the form of static ip, gateway, subnet and dns. Doesn't work without dns being explicitly set.
  WiFi.config(device_ip, gateway_ip, subnet_mask, dns_ip);
  delay(500);
  
  //Print diagnosis after modifications
  WiFi.printDiag(Serial);
  
  //Check registered static IP
  Serial.println(WiFi.localIP());
  
  //Check the SSID set on the firmware
  Serial.println(WiFi.SSID());
  
  //Check the Wifi status
  Serial.println(WiFi.status());

  // Setup Blynk
  Blynk.config(auth);
  while (Blynk.connect() == false) {
	Serial.print(“Still trying to connect…”)
  }

}

void loop()
{
  Blynk.run();
}
```



### Expected Result
[What are you expecting to happen as the consequence of above reproduction steps?]
I control my LEDs on my NodeMCU with 3 buttons and it works fine.

### Actual Result
[What actually happens after the reproduction steps? Include the error output or a link to a gist if possible.]
- ICMP timeout on my terminal pings to the static IP (Works fine without Blynk.run code and DHCP
- I get a login timeout 

As you can see it works initially for a few seconds and then the ping starts to go higher and times out. 

```
18:01:13.026 ->     ___  __          __
18:01:13.026 ->    / _ )/ /_ _____  / /__
18:01:13.060 ->   / _  / / // / _ \/  '_/
18:01:13.095 ->  /____/_/\_, /_//_/_/\_\
18:01:13.128 ->         /___/ v0.5.4 on NodeMCU
18:01:13.161 -> 
18:01:13.161 -> [23985] Connecting to blynk-cloud.com:80
18:01:18.036 -> [28986] Connecting to blynk-cloud.com:80
18:01:18.110 -> [29078] Ready (ping: 44ms).
18:02:30.414 -> [101382] Heartbeat timeout
18:02:32.416 -> [103385] Connecting to blynk-cloud.com:80
18:02:35.475 -> [106434] Login timeout
18:02:37.475 -> [108434] Connecting to blynk-cloud.com:80
18:02:40.536 -> [111482] Login timeout
18:02:42.530 -> [113482] Connecting to blynk-cloud.com:80
18:02:45.574 -> [116529] Login timeout
18:02:47.561 -> [118529] Connecting to blynk-cloud.com:80
18:02:48.662 -> [119609] Ready (ping: 1035ms).
18:03:08.034 -> [138996] Heartbeat timeout
18:03:12.715 -> [143682] Connecting to blynk-cloud.com:80
18:03:15.069 -> [146037] Ready (ping: 2284ms).
```
Update: When I uncomment `#include <BlynkSimpleEsp8266.h>` it seems to work well with only a 54ms ping. This I could repeat up to 7-8 times and was able to reproduce exact behaviour. 