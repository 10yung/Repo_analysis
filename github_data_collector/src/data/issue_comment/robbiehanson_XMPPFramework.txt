hello, everybody,
I am using XMPPFramework and i can't connect to the server. I have this error :
stream:error xmlns:stream="http://etherx.jabber.org/streams"
connection-timeout xmlns="urn:ietf:params:xml:ns:xmpp-streams"
text xmlns="urn:ietf:params:xml:ns:xmpp-streams" lang="en">Idle connection

this is my code :

import UIKit
import XMPPFramework

class ViewController: UIViewController, XMPPStreamDelegate {

    var stream:XMPPStream!
    var xmppRoster: XMPPRoster!

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        let xmppRosterStorage = XMPPRosterCoreDataStorage()
        xmppRoster = XMPPRoster(rosterStorage: xmppRosterStorage)

        stream = XMPPStream()
        stream.addDelegate(self, delegateQueue: .main)
        xmppRoster.activate(stream)
        
 
        stream.hostPort = 5222
        stream.myJID = XMPPJID(string: "emad@chat.myaddress.net")
        
        do {
            print("start connect")
            try stream.connect(withTimeout: 30)
            print("request sent")
        }
        catch {
            print("catch")
            
        }
        
        
        let button = UIButton()
        button.backgroundColor = UIColor.red
        button.setTitle("SendMessage", for: .normal)
        button.frame = CGRect(x: 10, y: 100, width: view.bounds.width - 20, height: 40)
        button.addTarget(self, action: #selector(self.sendMessage), for: .touchUpInside)
        
        self.view.addSubview(button)
    }
    
    @objc func sendMessage() {

        let message = "Yo!"
        let senderJID = XMPPJID(string: "emad2@chat.myaddress.net")
        let msg = XMPPMessage(type: "chat", to: senderJID)
        
        msg?.addBody(message)
        stream.send(msg)
    }
    
    
    func xmppStreamWillConnect(sender: XMPPStream!) {
        print("will connect")
    }
    
    func xmppStreamConnectDidTimeout(_ sender: XMPPStream!) {
        print("timeout:")
    }
    
    func xmppStreamDidConnect(sender: XMPPStream!) {
        print("connected")
        
        do {
            try sender.authenticate(withPassword: "1235")
        }
        catch {
            print("catch")
            
        }

    }
    
    
    func xmppStreamDidAuthenticate(_ sender: XMPPStream!) {
        print("auth done")
        sender.send(XMPPPresence())
    }
    

    func xmppStream(_ sender: XMPPStream!, didNotAuthenticate error: DDXMLElement!) {
        print("dint not auth")
        print(error)
    }
    
    func xmppStream(sender: XMPPStream!, didReceivePresence presence: XMPPPresence!) {
        print(presence)
        let presenceType = presence.type()
        let username = sender.myJID.user
        let presenceFromUser = presence.from().user
        
        if presenceFromUser != username  {
            if presenceType == "available" {
                print("available")
            }
            else if presenceType == "subscribe" {
                self.xmppRoster.subscribePresence(toUser: presence.from())
            }
            else {
                print("presence type"); print(presenceType)
            }
        }
   
    }
    
    func xmppStream(sender: XMPPStream!, didSendMessage message: XMPPMessage!) {
        print("sent")
    }
    
    private func xmppStream(sender: XMPPStream!, didFailToSendIQ iq: XMPPIQ!, error: NSError!) {
        print("error")
    }
    
    func xmppStream(_ sender: XMPPStream!, didReceiveError error: DDXMLElement!) {
        print("\(error)")
    }
    
    private func xmppStream(sender: XMPPStream!, didFailToSendMessage message: XMPPMessage!, error: NSError!) {
        print("fail")
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func xmppStream(sender: XMPPStream!, didReceiveMessage message: XMPPMessage!) {
        print(message)
    }
}

I have problem with the first step. connecting to server

when working with openfire, I ran into an issue of service unavailability. 
Please check the following SO post for reference. 
https://stackoverflow.com/questions/51237997/service-unavailable-error-in-openfire-message-archive-management

I had to make some adjustments. Though everyone should know about it.
I want to change the default xmpp host port (at my region, the service provider blocks port 5222 for 4g connection).

My xmpp server (prosody) is running on port 7000 , but when i tried to change the xmpp stream host port to 7000, i got this error: Error Domain=NSPOSIXErrorDomain Code=61 "Connection refused" UserInfo={NSLocalizedDescription=Connection refused, NSLocalizedFailureReason=Error in connect() function}

The problem is, I actually capture the packets coming to my server on port 7000, and there is no packet coming from my iphone. But if I capture the packets on port 5222, there are packets that come from the iphone (testing with wifi, not 4g).

So, for some reason, the packets from port 5222 is sent to the server, while the packets from port 7000 is blocked. Have anyone came across this problem?
Every time when I’m signing into the app or reinstalling app I didn’t receive group message history. I have searched a lot for message archiving in MUC for iOS.  Ejabberd doesn’t provide me old messages of the group although I configured setting into the YML file as mentioned below snippet:

**## mod_mam: {}
mod_mam:
   #default: always
   db_type: sql
   user_mucsub_from_muc_archive:true
mod_muc:
    ## host: "conference.@HOST@"
    access:
         - allow
    access_admin:
         - allow: admin
    access_create: muc_create
    access_persistent: muc_create
    max_user_conferences: 500
    max_rooms_discoitems: 500
    db_type: sql
    history_size: 10
    default_room_options: {allow_subscription: true, mam: true, members_only: true, persistent: false}**

I have kept a history size of 10. It means at least 10 messages must be fetched every time when I login into the app or reinstall the app but I could not receive 10 messages every-time after reinstalling the app.  I’m using Robbiehanson/XMPPFramework for iOS to implement XMPP based chat. I also performed MucSub based MUC to send/receive messages.

The scenario which I have performed:
I’m part of one MUC group. The member of the associated group sent 15 Messages into the group. I have received all those messages when I’m online. Now I am logged out from the group. Deleted the app from the device and reinstalled it into the device with the same login credentials. At this time I could not see the 15 messages which I received earlier. Here I would like to get all 15 Messages even after reinstalling the app into the iOS device.

I have searched on various Stack overflow questions but none of them are helpful to me. Your help will be appreciated.
need swift package support please, i tried to fork and add but couldn't achieve...
Hi,

I am getting a crash setupReadAndWriteSourcesForNewlyConnectSocked present in GCDAsyncSocket. Can you please let me know how can I handle it or it's an issue from your side. Here is the crash log that I have got on crashlytics.

<img width="1362" alt="Снимок экрана 2019-12-14 в 22 55 00" src="https://user-images.githubusercontent.com/22591719/71156002-0a6a4780-2265-11ea-83ab-4fcd65b41dc3.png">

Hello Team,

Is there any way to back up chat on server and while restore, it should be back to the origin stage. Is there any feature for this is available in XMPP?

Please share suggestions if any. 
I have used Robbiehanson XMPP Framework. My issue is i'm trying to authenticate user after did connect (in xmppStreamDidConnect method) and it's always return "<failure xmlns="urn:ietf:params:xml:ns:xmpp-sasl"><not-authorized></not-authorized><text lang="en">Invalid username or password</text></failure>" this error,

i'm 100% sure my user name & password is correct.
I have used Robbiehanson XMPP Framework. My issue is when I fire presence query to join a group, it takes to much time for processing as it fetches messages and members along with their affiliations which is an internal library call. As and when the number of groups and its respective messages get increased, the more time it takes for processing. How can I manage to fetch all the messages without firing presence?

Note: I had implemented “multicast” where the performance was not an issue but using the same I couldn’t manage the unread count. So I had to switch to explicit presence calls for every group.
`import UIKit
import XMPPFramework

class TestingViewController: UIViewController {
    var serverIp = "192.168.1.5"
    
    var xmppStream: XMPPStream!
    var xmppRosterStorage = XMPPRosterCoreDataStorage()
    var xmppRoster: XMPPRoster!
    var xmppvCardTempModule : XMPPvCardTempModule!
    var xmppvCardStorage: XMPPvCardCoreDataStorage!
    var hostName: String = ""
    var userJID: XMPPJID!
    var hostPort: UInt16 = 5222
    var password: String = ""
    var callbacks: CallbacksWrapper?
    
    
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        xmppStream = XMPPStream()
        hostName = serverIp
        hostPort = 5222
        password = "azeqsdwxc"
        userJID = XMPPJID(string: "sam@winsality64")
        userJID = userJID!
        
        self.xmppStream.hostName = hostName
        self.xmppStream.hostPort = hostPort
        self.xmppStream.startTLSPolicy = XMPPStreamStartTLSPolicy.allowed
        self.xmppStream.myJID = userJID
        
         self.xmppStream.addDelegate(self, delegateQueue: DispatchQueue.main)
        
        
    }
    
    func createProfile (){
        let profile = Profile.shared
        profile.id = UUID().uuidString
        let username = "sam"
        profile.jid = ("\(username)@winsality64")
        profile.UserName = username
        profile.image = UIImage(named: "DefaultUser2")
        profile.password = "azeqsdwxc"
        profile.updateProfile()
    }
    
    func sendMsg(receiver : String, textmsg : String){
        print("we are trying to send msg to",receiver)
        let user = XMPPJID(string: receiver)
        let msg = XMPPMessage(type: "chat", to: user)
        msg.addBody(textmsg)
        self.xmppStream.send(msg)
    }

    @IBAction func MeButtonPushed(_ sender: Any) {
        connect()
    }
    
    
    func connect() {
        if self.xmppStream.isConnected {
                return
        }
        try! self.xmppStream.connect(withTimeout: XMPPStreamTimeoutNone)
    }
    
    func UpdateVcard(profile : Profile) -> Bool{
        print("inside the update vcard func")
        if (self.xmppStream.isAuthenticated)  {
            self.xmppvCardStorage = XMPPvCardCoreDataStorage.sharedInstance()
            self.xmppvCardTempModule = XMPPvCardTempModule.init(vCardStorage: self.xmppvCardStorage!)
            self.xmppvCardTempModule.activate(self.xmppStream)
            var myVcardTemp = self.xmppvCardTempModule.myvCardTemp
            let vCardXML = DDXMLElement(name: "vCard", stringValue: "vcard-temp")
            
            if (myVcardTemp == nil) {
                myVcardTemp = XMPPvCardTemp.vCardTemp(from: vCardXML)
                myVcardTemp!.nickname = profile.UserName
                let image = profile.image
                myVcardTemp?.photo = image?.jpegData(compressionQuality: 1.0)
                self.xmppvCardTempModule.updateMyvCardTemp(myVcardTemp!)
                self.xmppvCardTempModule.deactivate()
                print("new vcard updated thank you ")
            }else{
                print("old nickname is  ",myVcardTemp!.nickname)
                myVcardTemp!.nickname = profile.UserName
                let image = profile.image
                myVcardTemp!.photo = image?.jpegData(compressionQuality: 1.0)
                self.xmppvCardTempModule.updateMyvCardTemp(myVcardTemp!)
                self.xmppvCardTempModule.deactivate()
                print("trying to parse vcard here")
                self.sendMsg(receiver: "iori", textmsg: "hello my mate")
                
                
            }
            return true
        }
        else {
            return false
        }
    }
    
    
}

extension TestingViewController: XMPPStreamDelegate {
    
    func xmppStream(_ sender: XMPPStream, didReceive iq: XMPPIQ) -> Bool {
        print("we recieved an iq from xmpp ",iq)
        let friendvcard = XMPPvCardTemp.vCardTempCopy(from: iq)
        if(friendvcard != nil){
            let userInfo = ["jid": iq.from,"nickname":friendvcard?.nickname,"photo": friendvcard?.photo] as [String : Any]
            print("we recieved an iq from xmpp ",friendvcard!.nickname)
        }
        
        return true
        
    }
    func xmppStreamDidConnect(_ stream: XMPPStream) {
        print("Stream: Connected")
        
        if(!stream.isAuthenticated && !stream.isConnecting){
            try! stream.authenticate(withPassword: self.password)
        }else{
            
            print("connected but already authenticated")
        }
    }
    
    func xmppStreamDidAuthenticate(_ sender: XMPPStream) {
        
        self.xmppStream.send(XMPPPresence())
        print("Stream: Authenticated")
        let profile = Profile.shared
        self.UpdateVcard(profile: profile)
        
    }
    
    
    func xmppStream(_ sender: XMPPStream, didNotAuthenticate error: DDXMLElement) {
        print("Stream: Fail to Authenticate")
    }
    
    func xmppStreamDidDisconnect(_ sender: XMPPStream, withError error: Error?) {
        print("there was a disconnection i believe sorry ")
    }
    
    func xmppStream(_ sender: XMPPStream, didReceive message: XMPPMessage) {
        print("the message is from",message.from?.bareJID.bare)
        print("the message body is",message.body)
    }

    func xmppStream(_ sender: XMPPStream, didReceive presence: XMPPPresence) {
        let presenceType = presence.type
        let myUsername = sender.myJID?.user
        let presenceFromUser = presence.from?.user
        let userInfo = ["text": presenceType!,"senderUserName": presenceFromUser]
        print("Did receive presence from \(presenceFromUser)")
        
    }
}`