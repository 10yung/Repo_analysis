Now that `inferno` is relatively stable, and exposes separate APIs for both stack folding and [producing flamegraphs](https://docs.rs/inferno/0.9.0/inferno/flamegraph/index.html), I wonder if it'd be interesting to see if we could make `flame` use `inferno` to generate the flamegraphs. That way you wouldn't need to vendor all the JS code and such into this project. You'd also get stack folding for free if you wished!
Right now, notes are only in the in-memory data structures, they don't get output to stdout or HTML.
Minimal test case:

```
use rayon::prelude::*;
use flame;
use std:: fs::File;

fn something(i: usize) -> f64 {
    flame::start("Something");
    std::thread::sleep(std::time::Duration::from_millis(10));
    flame::end("Something");
    0.56
}
fn main() {
    let a = (0..200).collect::<Vec<_>>()
        .par_iter()
        .map(|i| something(*i))
        .collect::<Vec<_>>();

    flame::dump_html(&mut File::create("flames.html").unwrap()).unwrap();
    println!("{:?}", flame::threads());
}
```

Dependencies:
```
rayon = "1.0.3"
flame = "0.2.2"
```


The written file has no graphics.
The output is: `[Thread { id: 140470522639296, name: Some("main"), spans: [], _priv: () }]`, so no data is available.
I think at least, that this is how it works? I spent some time trying to figure out why I got an empty graph when all profiling happens in other threads.
I found that you have a `threads()` function, from which I can get a `Vec<Span>` for each thread. But `Span` only has a function to write to json, not html. How can I get HTML output from different threads? Or alternatively, what can I do with a JSON file to display the flame graph?

I use flame for a ray tracer, which roughly correspond to
```rust
for i in 0..x {
  for j in 0..y {
    let _guard = flame::start_guard("compute color");
    out[i][j] = compute_color(i, j);
  }
}
```
The trouble is that I get x*y "compute color" frames, each taking 0.001% of running time. Is there a way to combine these in a single frame, aside from doing everything manually with `flame::frames()`?
Since your lib requires modifications to the source code, it's not easy to disable it for a true release. I see two ways to fix this:
- Add a compile time feature which prevents data collection. I'm thinking global const with a compile time value, and a `if !STATIC_ENABLED { return }` in every function. Since the condition is known at compile time, it should be inlined and removed by rustc.
- Add a runtime switch, like `flame::disable()` for example. It could set an `AtomicBool`. It would be a bit slower but would allow the activation without recompiling. Now that I thing of it, it would be a very nice feature to have!

These two options could be implemented at the same time, like `if !STATIC_ENABLED || !DYNAMIC_ENABLED ...`.
I am currently profiling some graphics code and I saw that currently open spans are not plotted in the output and this produces misleading stack plots.

I wrote a counter for a short number of frames and after that, I plot the flamegraph (html) and I shout down the application. This call happens inside of the function that renders the current frame and therefore is being profiled.  the span is not present in the plot, although the nested ones (already finished) are.

I know that this is not the most pretty coding style, but since it can be written: flame should do the right job here... the question is how.

Anyhow, great job here. It is a very nice tool, especially when used with flamer. 
Hi!  

This looks great and easy to use. Is there any API planned for folding the results (like https://github.com/brendangregg/FlameGraph)? I want to profile some tight loops and only a few seconds of running my program generates 50+MB html file...