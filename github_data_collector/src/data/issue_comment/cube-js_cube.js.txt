in my mysql database have a date format like this
"2020-01-16 21:32:34"

in my dashboard I want it to be displayed like this
"16.01.2020" and without time

Is it possible?

**Describe the bug**
I try to use BigQuery as my main DB and postgre as an external DB for external pre-aggregations.
But it seems that Cube JS reads both the aggregated table generated in BigQuery and the table in postgre ?

**To Reproduce**
Steps to reproduce the behavior:
1. Use this configuration for the CubejsServer :
```js
const server = new CubejsServer({
    driverFactory: () => new BigQueryDriver({
        location: 'EU'
    }),
    externalDbType: process.env.CUBEJS_EXT_DB_TYPE,
    preAggregationsSchema: `aggreg_${constants.TEST_TENANT_ID}`,
    externalDriverFactory: () => new PostgresDriver({
        host: process.env.CUBEJS_EXT_DB_HOST,
        database: process.env.CUBEJS_EXT_DB_NAME,
        port: process.env.CUBEJS_EXT_DB_PORT,
        user: process.env.CUBEJS_EXT_DB_USER,
        password: process.env.CUBEJS_EXT_DB_PASS,
    })
});
```
2. Query for dimensions / measures that are used in a pre aggregation schema (see log 1 below)
--> It creates a table : actions_ext_agg20200101_acgen5ax_x2slm5aq_1579252675464 both in BigQuery and postgre

3. When using the same query, there is no way to be sure that it isn't using the table which is on  BigQuery but it works (see log 2 below)

4. Doing the same query but with the proxy access to postgre disabled lend me this error (see log 3 below ) : 
```bash 
connect ECONNREFUSED 127.0.0.1:5432 at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14)
```

4. But doing the same query after deleting the table that was created in BigQuery lend me this error (see log 4 below) : 
```bash 
Error: Not found: Table eb-main-2013:aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101_acgen5ax_x2slm5aq_1579252675464 was not found in location EU
```

**Expected behavior**
CubeJS should only use the external pre-aggregation table in the DB configured in the externalDriverFactory instead of also reading the main DB that is meant to be used as read-only. 
Is it possible to have a clear message in log about which DriverFactory is used when retrieving data from a DB ?

**Logs**
Log 1 - Creating the aggregation table with a query
```bash
Load Request: {
  "query": {
    "measures": [
      "actions.count_actions"
    ],
    "timeDimensions": [
      {
        "dimension": "actions.timestamp",
        "dateRange": "Last 6 days",
        "granularity": "day"
      }
    ]
  },
  "requestId": "95dda566-820b-434e-b39e-6c036e05fb7e"
}
Performing query:
SELECT DATETIME_TRUNC(DATETIME(CURRENT_TIMESTAMP(), 'UTC'), HOUR) as current_hour
{
  "queueSize": 1,
  "queuePrefix": "SQL_QUERY_STANDALONE_default"
}
Performing query completed: (1398ms)
SELECT DATETIME_TRUNC(DATETIME(CURRENT_TIMESTAMP(), 'UTC'), HOUR) as current_hour
{
  "queueSize": 1,
  "queuePrefix": "SQL_QUERY_STANDALONE_default"
}
Performing query:
[["SELECT\n      DATETIME_TRUNC(DATETIME(`actions`.timestamp, 'UTC'), DAY) `actions__timestamp_day`, count(distinct `actions`.id) `actions__count_actions`\n    FROM\n      actions.actions_23IEUHD32UHOID43IOH AS `actions`\n  WHERE (`actions`.timestamp >= TIMESTAMP(?) AND `actions`.timestamp <= TIMESTAMP(?)) GROUP BY 1",["2020-01-01T00:00:00Z","2020-01-31T23:59:59Z"]],[[{"current_hour":"2020-01-17T09:00:00"}]]]
{
  "queueSize": 1,
  "queuePrefix": "SQL_PRE_AGGREGATIONS_STANDALONE_default"
}
Performing query completed: (14478ms)
[["SELECT\n      DATETIME_TRUNC(DATETIME(`actions`.timestamp, 'UTC'), DAY) `actions__timestamp_day`, count(distinct `actions`.id) `actions__count_actions`\n    FROM\n      actions.actions_23IEUHD32UHOID43IOH AS `actions`\n  WHERE (`actions`.timestamp >= TIMESTAMP(?) AND `actions`.timestamp <= TIMESTAMP(?)) GROUP BY 1",["2020-01-01T00:00:00Z","2020-01-31T23:59:59Z"]],[[{"current_hour":"2020-01-17T09:00:00"}]]]
{
  "queueSize": 1,
  "queuePrefix": "SQL_PRE_AGGREGATIONS_STANDALONE_default"
}```

Log 2 - Performing a query the pre-aggregated table
```bash
Load Request: {
  "query": {
    "measures": [
      "actions.count_actions"
    ],
    "timeDimensions": [
      {
        "dimension": "actions.timestamp",
        "dateRange": "Last 6 days",
        "granularity": "day"
      }
    ]
  },
  "requestId": "f200e0e9-e53a-4066-8682-fdc1700142f1"
}
Performing query:
SELECT DATETIME_TRUNC(DATETIME(CURRENT_TIMESTAMP(), 'UTC'), HOUR) as current_hour
{
  "queueSize": 1,
  "queuePrefix": "SQL_QUERY_STANDALONE_default"
}
Performing query:
SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union  WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP('2020-01-11T00:00:00Z'), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP('2020-01-16T23:59:59Z'), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000
{
  "queueSize": 2,
  "queuePrefix": "SQL_QUERY_STANDALONE_default",
  "requestId": "f200e0e9-e53a-4066-8682-fdc1700142f1"
}
Performing query completed: (2481ms)
SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union  WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP('2020-01-11T00:00:00Z'), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP('2020-01-16T23:59:59Z'), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000
{
  "queueSize": 2,
  "queuePrefix": "SQL_QUERY_STANDALONE_default",
  "requestId": "f200e0e9-e53a-4066-8682-fdc1700142f1"
}
Load Request Success: {
  "query": {
    "measures": [
      "actions.count_actions"
    ],
    "timeDimensions": [
      {
        "dimension": "actions.timestamp",
        "dateRange": "Last 6 days",
        "granularity": "day"
      }
    ]
  },
  "requestId": "f200e0e9-e53a-4066-8682-fdc1700142f1"
}
Performing query completed: (2737ms)
SELECT DATETIME_TRUNC(DATETIME(CURRENT_TIMESTAMP(), 'UTC'), HOUR) as current_hour
{
  "queueSize": 1,
  "queuePrefix": "SQL_QUERY_STANDALONE_default"
}
Performing query:
SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union  WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP('2020-01-11T00:00:00Z'), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP('2020-01-16T23:59:59Z'), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000
{
  "queueSize": 1,
  "queuePrefix": "SQL_QUERY_STANDALONE_default",
  "requestId": "f200e0e9-e53a-4066-8682-fdc1700142f1"
}
Performing query completed: (442ms)
SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union  WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP('2020-01-11T00:00:00Z'), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP('2020-01-16T23:59:59Z'), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000
{
  "queueSize": 1,
  "queuePrefix": "SQL_QUERY_STANDALONE_default",
  "requestId": "f200e0e9-e53a-4066-8682-fdc1700142f1"
}```

Log 3 - performing query without a connection to postgre
```bash
Load Request: {
  "query": {
    "measures": [
      "actions.count_actions"
    ],
    "timeDimensions": [
      {
        "dimension": "actions.timestamp",
        "dateRange": "Last 6 days",
        "granularity": "day"
      }
    ]
  },
  "requestId": "5e68fc13-f3f4-4436-b964-f67682627477"
}
Error querying db: {
  "query": "SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP(?), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP(?), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000",
  "params": [
    "2020-01-11T00:00:00Z",
    "2020-01-16T23:59:59Z"
  ],
  "requestId": "5e68fc13-f3f4-4436-b964-f67682627477"
}
Error: connect ECONNREFUSED 127.0.0.1:5432
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1128:14)
Orchestrator error: {
  "query": {
    "measures": [
      "actions.count_actions"
    ],
    "timeDimensions": [
      {
        "dimension": "actions.timestamp",
        "dateRange": "Last 6 days",
        "granularity": "day"
      }
    ]
  },
  "requestId": "5e68fc13-f3f4-4436-b964-f67682627477"
}
Error: connect ECONNREFUSED 127.0.0.1:5432`
```

Log 4 - performing query without the BigQuery table

```bash
Load Request: {
  "query": {
    "measures": [
      "actions.count_actions"
    ],
    "timeDimensions": [
      {
        "dimension": "actions.timestamp",
        "dateRange": "Last 6 days",
        "granularity": "day"
      }
    ]
  },
  "requestId": "634356c1-81cf-48df-846a-6fb6d165944c"
}
Performing query:
SELECT DATETIME_TRUNC(DATETIME(CURRENT_TIMESTAMP(), 'UTC'), HOUR) as current_hour
{
  "queueSize": 1,
  "queuePrefix": "SQL_QUERY_STANDALONE_default"
}
Performing query:
SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union  WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP('2020-01-11T00:00:00Z'), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP('2020-01-16T23:59:59Z'), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000
{
  "queueSize": 2,
  "queuePrefix": "SQL_QUERY_STANDALONE_default",
  "requestId": "634356c1-81cf-48df-846a-6fb6d165944c"
}
Error while querying:
SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union  WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP('2020-01-11T00:00:00Z'), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP('2020-01-16T23:59:59Z'), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000
{
  "queuePrefix": "SQL_QUERY_STANDALONE_default",
  "requestId": "634356c1-81cf-48df-846a-6fb6d165944c"
}
Error: Not found: Table eb-main-2013:aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101_acgen5ax_x2slm5aq_1579252675464 was not found in location EU
    at new ApiError (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@google-cloud/common/build/src/util.js:58:15)
    at /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@google-cloud/bigquery/build/src/bigquery.js:952:23
    at /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@google-cloud/common/build/src/util.js:364:25
    at Util.handleResp (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@google-cloud/common/build/src/util.js:144:9)
    at /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@google-cloud/common/build/src/util.js:429:22
    at onResponse (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/retry-request/index.js:206:7)
    at /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/teeny-request/build/src/index.js:233:13
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
Dropping Cache: {
  "cacheKey": [
    "SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union  WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP(?), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP(?), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000",
    [
      "2020-01-11T00:00:00Z",
      "2020-01-16T23:59:59Z"
    ],
    [
      [
        "SELECT\n      DATETIME_TRUNC(DATETIME(`actions`.timestamp, 'UTC'), DAY) `actions__timestamp_day`, count(distinct `actions`.id) `actions__count_actions`\n    FROM\n      actions.actions_23IEUHD32UHOID43IOH AS `actions`\n  WHERE (`actions`.timestamp >= TIMESTAMP(?) AND `actions`.timestamp <= TIMESTAMP(?)) GROUP BY 1",
        [
          "2020-01-01T00:00:00Z",
          "2020-01-31T23:59:59Z"
        ]
      ]
    ]
  ],
  "requestId": "634356c1-81cf-48df-846a-6fb6d165944c"
}
Error: Not found: Table eb-main-2013:aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101_acgen5ax_x2slm5aq_1579252675464 was not found in location EU
    at QueryQueue.parseResult (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryQueue.js:81:13)
    at QueryQueue.executeInQueue (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryQueue.js:70:19)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async QueryCache.cachedQueryResult (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryCache.js:81:13)
    at async /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryOrchestrator.js:38:24
    at async OrchestratorApi.executeQuery (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/server-core/core/OrchestratorApi.js:28:20)
    at async ApiGateway.load (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/api-gateway/index.js:336:24)
    at async /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/api-gateway/index.js:227:7
Error querying db: {
  "query": "SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP(?), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP(?), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000",
  "params": [
    "2020-01-11T00:00:00Z",
    "2020-01-16T23:59:59Z"
  ],
  "requestId": "634356c1-81cf-48df-846a-6fb6d165944c"
}
Error: Not found: Table eb-main-2013:aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101_acgen5ax_x2slm5aq_1579252675464 was not found in location EU
    at QueryQueue.parseResult (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryQueue.js:81:13)
    at QueryQueue.executeInQueue (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryQueue.js:70:19)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async QueryCache.cachedQueryResult (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryCache.js:81:13)
    at async /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryOrchestrator.js:38:24
    at async OrchestratorApi.executeQuery (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/server-core/core/OrchestratorApi.js:28:20)
    at async ApiGateway.load (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/api-gateway/index.js:336:24)
    at async /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/api-gateway/index.js:227:7
Orchestrator error: {
  "query": {
    "measures": [
      "actions.count_actions"
    ],
    "timeDimensions": [
      {
        "dimension": "actions.timestamp",
        "dateRange": "Last 6 days",
        "granularity": "day"
      }
    ]
  },
  "requestId": "634356c1-81cf-48df-846a-6fb6d165944c"
}
Error: Not found: Table eb-main-2013:aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101_acgen5ax_x2slm5aq_1579252675464 was not found in location EU
Performing query completed: (1879ms)
SELECT DATETIME_TRUNC(DATETIME(CURRENT_TIMESTAMP(), 'UTC'), HOUR) as current_hour
{
  "queueSize": 1,
  "queuePrefix": "SQL_QUERY_STANDALONE_default"
}
Performing query:
SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union  WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP('2020-01-11T00:00:00Z'), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP('2020-01-16T23:59:59Z'), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000
{
  "queueSize": 1,
  "queuePrefix": "SQL_QUERY_STANDALONE_default",
  "requestId": "634356c1-81cf-48df-846a-6fb6d165944c"
}
Error while querying:
SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union  WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP('2020-01-11T00:00:00Z'), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP('2020-01-16T23:59:59Z'), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000
{
  "queuePrefix": "SQL_QUERY_STANDALONE_default",
  "requestId": "634356c1-81cf-48df-846a-6fb6d165944c"
}
Error: Not found: Table eb-main-2013:aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101_acgen5ax_x2slm5aq_1579252675464 was not found in location EU
    at new ApiError (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@google-cloud/common/build/src/util.js:58:15)
    at /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@google-cloud/bigquery/build/src/bigquery.js:952:23
    at /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@google-cloud/common/build/src/util.js:364:25
    at Util.handleResp (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@google-cloud/common/build/src/util.js:144:9)
    at /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@google-cloud/common/build/src/util.js:429:22
    at onResponse (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/retry-request/index.js:206:7)
    at /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/teeny-request/build/src/index.js:233:13
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
Dropping Cache: {
  "cacheKey": [
    "SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101) as partition_union  WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP(?), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP(?), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000",
    [
      "2020-01-11T00:00:00Z",
      "2020-01-16T23:59:59Z"
    ],
    [
      [
        "SELECT\n      DATETIME_TRUNC(DATETIME(`actions`.timestamp, 'UTC'), DAY) `actions__timestamp_day`, count(distinct `actions`.id) `actions__count_actions`\n    FROM\n      actions.actions_23IEUHD32UHOID43IOH AS `actions`\n  WHERE (`actions`.timestamp >= TIMESTAMP(?) AND `actions`.timestamp <= TIMESTAMP(?)) GROUP BY 1",
        [
          "2020-01-01T00:00:00Z",
          "2020-01-31T23:59:59Z"
        ]
      ]
    ]
  ],
  "requestId": "634356c1-81cf-48df-846a-6fb6d165944c"
}
Error: Not found: Table eb-main-2013:aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101_acgen5ax_x2slm5aq_1579252675464 was not found in location EU
    at QueryQueue.parseResult (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryQueue.js:81:13)
    at QueryQueue.executeInQueue (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryQueue.js:70:19)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryCache.js:222:17
Error while renew cycle: {
  "query": "SELECT `actions__timestamp_day` `actions__timestamp_day`, sum(`actions__count_actions`) `actions__count_actions` FROM (SELECT * FROM aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101_acgen5ax_x2slm5aq_1579252675464) as partition_union  WHERE (`actions__timestamp_day` >= DATETIME(TIMESTAMP(?), 'UTC') AND `actions__timestamp_day` <= DATETIME(TIMESTAMP(?), 'UTC')) GROUP BY 1 ORDER BY 1 ASC LIMIT 10000",
  "query_values": [
    "2020-01-11T00:00:00Z",
    "2020-01-16T23:59:59Z"
  ],
  "requestId": "634356c1-81cf-48df-846a-6fb6d165944c"
}
Error: Not found: Table eb-main-2013:aggreg_23IEUHD32UHOID43IOH.actions_ext_agg20200101_acgen5ax_x2slm5aq_1579252675464 was not found in location EU
    at QueryQueue.parseResult (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryQueue.js:81:13)
    at QueryQueue.executeInQueue (/Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryQueue.js:70:19)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
    at async /Users/thibaultfoureur/git-repo/git-cubejs-poc/Cubejs-POC-backend/node_modules/@cubejs-backend/query-orchestrator/orchestrator/QueryCache.js:222:17
```
**Describe the bug**
The `pivotConfig` parameter should be optional

**To Reproduce**
Steps to reproduce the behavior:
1. Use Typescript
2. Try compiling `resultSet.tablePivot()`
3. See error

**Expected behavior**
The compiler should not throw an error saying `pivotConfig` is a required object.

**Screenshots**
![Screen Shot 2020-01-15 at 22 21 57](https://user-images.githubusercontent.com/1781985/72476586-7d73c900-37e5-11ea-9917-48f95d832115.png)


**Version:**
0.13.9

**Is your feature request related to a problem? Please describe.**

Currently CubeJS (mostly) serializes all values as strings. This is obviously very useful for large numbers (since JSON does not support them), however it would be really nice if numerical values were converted back to the `Number` type after receiving a response from the CubeJS Server.

**Describe the solution you'd like**
`ResultSet#tablePivot()` should look up any numerical measures from the schema and cast values to `Number`

**Describe alternatives you've considered**
This can definitely be manually be post-processing the results from the result set.

**Additional context**
https://cube-js.slack.com/archives/CC0403RRR/p1579123638123400

**Is your feature request related to a problem? Please describe.**
Unable to create pre-aggregations in postgres while using mysql as primary db

**Describe the solution you'd like**
External pre-aggregations are to be supported 

**Additional context**
date_trunc and timestamp are few functions that are creating issues while using this.

In the need of connecting cubejs to a set of posgres replicate set for scaling and back-up stategy using multiple standby prosgres db instances, is it possible to connect cubejs to a set of posgres relicate set?

Posgres connection string looks like this: 
**postgresql://host1:123,host2:456/somedb?target_session_attrs=any&application_name=myapp**

Thanks.
When running Cube.js Backend in production mode by setting `NODE_ENV` as a `production` it sends me the HTML response like `Cube.js server is running in production mode. Learn more about production mode`. when I hit http://localhost:3000/. But I use this URI(route) to display the `index.html` page of my application developed in NODEJS (Express). Because of this when an application gets to run, it shows me CubeJS response, not application page.

**My Findings**
When I debug this I found that in the latest NPM update, `else` condition gets added in `initApp()` method. 
```
async initApp(app) {
    checkEnvForPlaceholders();
    const apiGateway = this.apiGateway();
    apiGateway.initApp(app);
    if (this.options.devServer) {
      this.devServer.initDevEnv(app);
    } else {
      app.get('/', (req, res) => {
        res.status(200)
          .send(`<html><body>Cube.js server is running in production mode. <a href="https://cube.dev/docs/deployment#production-mode">Learn more about production mode</a>.</body></html>`);
      });
    }
  }
```
**PS:** Its working fine up to `"@cubejs-backend/server-core": "^0.10.62"`

**Suggestion**
Can we change that route **OR** can we provide the option to disable this route **OR** can we remove that `else` condition from `initApp()` method.
##### Description
I have a cube with an unbounded rolling-window measure. I would like to have pre-aggregation support for this type of measures.

##### Pre-agg
```
preAggregations: {
    myRollup: {
      type: `rollup`,
      measureReferences: [myMeasure],
      timeDimensionReference: eventDate,
      granularity: `day`
    },
```
##### Measure
```
measures: {
    myMeasure: {
      type: `avg`,
      sql: `${value}`,
      rollingWindow: {
        trailing: `unbounded`
      }
    },
```
##### Query
Note: This query should trigger the pre-aggregation, but does not.
```
{
   "measures":[
      "MyCube.myMeasure"
   ],
   "timeDimensions":[
      {
         "dimension":"MyCube.eventDate",
         "granularity":"day",
         "dateRange":"Last%20month"
      }
   ]
}
```

**Is your feature request related to a problem? Please describe.**
Currently Cube.js server options must be set inside Javascript source.

**Describe the solution you'd like**
This would improve ergonomics for Serverless projects as well as provide a single place for all configuration options to live in Cube.js projects.

I would suggest using something like [Cosmiconfig](https://github.com/davidtheclark/cosmiconfig), which makes reading `.*rc` (and similar filename variations) a doddle.
**Is your feature request related to a problem? Please describe.**
While it is awesome that Cube.js can scaffold a Serverless project for me, I'd prefer to use Serverless' own scaffolding tool.

**Describe the solution you'd like**
The Serverless CLI tool supports scaffolding projects from a URL:

```bash
serverless create --template-url https://github.com/cube-js/cube-js/tree/master/lib/packages/cubejs-serverless-aws-project --path myService
```

**Describe alternatives you've considered**
We could potentially change the current `cubejs create` command to instead run `npx serverless create <URL>`, or do something more extravagant with Yeoman templates 🙂

**Additional context**
[Serverless Create Command Reference](https://serverless.com/framework/docs/providers/aws/cli-reference/create/)