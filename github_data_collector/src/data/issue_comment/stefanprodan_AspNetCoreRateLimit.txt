I cannot manage to get the IpRateLimitPolicies settings to work. I would appreciate a second look, I've probably missed something. I will post the relevant parts of files.

ASP.NET Core version is 3.1. 
Project type is Web API.

**appsettings.json**

```
"IpRateLimiting": {
    "EnableEndpointRateLimiting": true,
    "StackBlockedRequests": false,
    "RealIpHeader": "X-Real-IP",
    "ClientIdHeader": "X-ClientId",
    "HttpStatusCode": 429,
    "QuotaExceededResponse": {
      "Content": "{{ \"message\": \"The request threshold has been reached. \", \"details\": \"Quota exceeded. Maximum allowed: {0} per {1}. Please try again in {2} second(s).\" }}",
      "ContentType": "application/json"
    },
    "GeneralRules": [
      {
        "Endpoint": "*",
        "Period": "1m",
        "Limit": 10
      }
    ]
  },
  "IpRateLimitPolicies": {
    "IpRules": [
      {
        "Ip": "123.456.789.123",
        "Rules": [
          {
            "Endpoint": "*",
            "Period": "1m",
            "Limit": 5
          }
        ]
      }
    ]
  }
```

**Startup.cs**

```
public void ConfigureServices(IServiceCollection services)
        {
            // starting off services configurations with IP rate limiter. 

            services.AddOptions();

            services.AddMemoryCache();

            services.Configure<IpRateLimitOptions>(Configuration.GetSection("IpRateLimiting"));

            services.Configure<IpRateLimitPolicies>(Configuration.GetSection("IpRateLimitPolicies"));

            services.AddSingleton<IIpPolicyStore, MemoryCacheIpPolicyStore>();
            services.AddSingleton<IRateLimitCounterStore, MemoryCacheRateLimitCounterStore>();



            // setting up database connection.

            string id = string.Format("{0}.db", Guid.NewGuid().ToString());

            var builder = new SqliteConnectionStringBuilder()
            {
                DataSource = id,
                Mode = SqliteOpenMode.Memory,
                Cache = SqliteCacheMode.Shared
            };

            var connection = new SqliteConnection(builder.ConnectionString);
            connection.Open();
            connection.EnableExtensions(true);
            services.AddDbContext<WebAPIContext>(options => options.UseSqlite(connection));



            // proceding with services configurations.

            services.AddControllers();

            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();

            services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();
        }
```

**Program.cs**

```
public static async System.Threading.Tasks.Task Main(string[] args)
        {
            var config = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                .AddEnvironmentVariables()
                .Build();

            IHost host = CreateHostBuilder(args).Build();

            using (var scope = host.Services.CreateScope())
            {
                var ipPolicyStore = scope.ServiceProvider.GetRequiredService<IIpPolicyStore>();
                await ipPolicyStore.SeedAsync();
            }

            await host.RunAsync();
        }
```

I can't manage to hit the IP rate of 5 calls per minute. Instead, I always hit the General Rules rate of 10 calls per minute.

I work with custom port numbers, could that be the reason?
Is it by design that you are unable to set an IP WhiteList whilst using the client rate limiting rules. 

Yet when using IP rate limiting rules you are able to set a client ID whitelist.

Has this been intentionally left out, or is this an issue that can be fixed via a PR ?
Hi @stefanprodan
First of all, thanks for the great software you build :)

I'm struggling with tests, could you help me? I've checked the tests in your repository, but they don't cover complex scenarios...

1) Let's say I have some rules and limits defined in config, how do I write a test which ensures throttling works as indended? It's pretty straight-forward for simple limits like "2 requests / second", but what about 10000 requests per hour or so?

2) Let's say the throttling doesn't work for me as indended (misconfiguration or something), is there an easy way to understand what's going on? Now I have to debug the middleware (which is pain if you have many rules defined or concurrent requests are made simultaneously) or track cache state changes (and it becomes even worse if counters are short living haha).

Thanks!
How can I define a policy on run time to effect all IPs for a specific Endpoint?
I also changed policies in run time but it seems it is not working. Here is my code:
**appsettings**
```
{
  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "AllowedHosts": "*",
  "IpRateLimiting": {
    "EnableEndpointRateLimiting": false,
    "StackBlockedRequests": false,
    "RealIpHeader": "X-Real-IP",
    "ClientIdHeader": "X-ClientId",
    "HttpStatusCode": 429,
    "IpWhitelist": [  ],
    "EndpointWhitelist": [  ],
    "ClientWhitelist": [  ],
    "GeneralRules": [  ]
  },
  "IpRateLimitPolicies": {
    "EnableEndpointRateLimiting": false,
    "StackBlockedRequests": false,
    "RealIpHeader": "X-Real-IP",
    "ClientIdHeader": "X-ClientId",
    "HttpStatusCode": 429,
    "IpWhitelist": [  ],
    "EndpointWhitelist": [  ],
    "ClientWhitelist": [  ],
    "GeneralRules": [  ]
  }  
}
```
**main()**
```
public static void Main(string[] args)
        {
            IWebHost webHost = CreateWebHostBuilder(args).Build();
            using (var scope = webHost.Services.CreateScope())
            {
                var ipPolicyStore = scope.ServiceProvider.GetRequiredService<IIpPolicyStore>();                                
                ipPolicyStore.SeedAsync().Wait();
            }
            webHost.Run();
        }
```
**Startup**
```
public void ConfigureServices(IServiceCollection services)
        {
            services.AddOptions();
            services.AddMemoryCache();
            services.Configure<IpRateLimitOptions>(Configuration.GetSection("IpRateLimiting"));
            services.Configure<IpRateLimitPolicies>(Configuration.GetSection("IpRateLimitPolicies"));
            services.AddSingleton<IpRateLimitOptions>();
            services.AddSingleton<IIpPolicyStore, MemoryCacheIpPolicyStore>();
            services.AddSingleton<IRateLimitCounterStore, MemoryCacheRateLimitCounterStore>();
            services.Configure<IpRateLimitOptions>(options =>
            {
                options.EnableEndpointRateLimiting = false;
                options.StackBlockedRequests = false;
                options.RealIpHeader = "X-Real-IP";
                options.ClientIdHeader = "X-ClientId";
                options.HttpStatusCode = 429;
                options.IpWhitelist = new List<string>() { };
                options.EndpointWhitelist = new List<string>() { };
                options.ClientWhitelist = new List<string>() {  };
                options.GeneralRules = new List<RateLimitRule>();
                options.DisableRateLimitHeaders = true;
                options.RateLimitCounterPrefix = "web_throttle_";
            });
            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
            services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();
            services.AddSingleton<IMyIpRateLimit, MyIpRateLimit>();
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            app.UseIpRateLimiting();
            app.UseMvc();
        }
```
**my custom class**
```
public class MyIpRateLimit : IMyIpRateLimit
    {
        private readonly IpRateLimitOptions _options;
        private readonly IIpPolicyStore _ipPolicyStore;
        private IpRateLimitPolicies Policies;

        public MyIpRateLimit(IpRateLimitOptions options, IIpPolicyStore ipPolicyStore)
        {
            _options = options;
            _ipPolicyStore = ipPolicyStore;            
        }

        public async void AddRule(RateLimitRule rule)
        {
            Policies = _ipPolicyStore.GetAsync(_options.IpPolicyPrefix).Result;
            if (Policies is null)
                Policies = new IpRateLimitPolicies();
            if (Policies != null && Policies.IpRules.Count > 0)
                Policies.IpRules[0].Rules.Add(rule);
            else
            {
                Policies.IpRules.Add(new IpRateLimitPolicy
                {
                    Ip = "127.0.0.1",
                    Rules = new List<RateLimitRule>(new RateLimitRule[] { rule })
                });
            }
            await _ipPolicyStore.SetAsync(_options.IpPolicyPrefix, Policies);
        }
    }
```
**controller**
```
[HttpPost]
        public void Post([FromBody] string value)
        {
            var a = new RateLimitRule();
            a.Endpoint = value;
            a.Limit = 1;
            a.Period = "100s";
            a.PeriodTimespan = TimeSpan.FromSeconds(100);
            _myRateLimit.AddRule(a);
        }
```
I expect it to let get or post data one in every 100 seconds but it doesn't do that.
When I set Endpoint to `*` it works but when I set to `*:/api/values` it doesn't work (my Url is `localhost:27285/api/values`).
Do I need to set anything else?
Im having an issue with the global wildcard ruleset overwriting the specific ruleset for a given endpoint. Is this a case where I can't have both options at the same time, so that if we want specific rules for specific endpoints, we need to apply to each and every one?

```
  // IP Rate limiting
  "IpRateLimiting": {
    "EnableEndpointRateLimiting": true,
    "StackBlockedRequests": false,
    "RealIpHeader": "CF-Connecting-IP",
    "ClientIdHeader": "ClientIdHeader",
    "HttpStatusCode": 429,
    "IpWhitelist": [ "127.0.0.1", "::1/10", "192.168.0.0/24", "172.31.71.0/16" ], // SHOULD BE:
    "EndpointWhitelist": [ "get:/api/license", "*:/api/status" ],
    "ClientWhitelist": [ "" ], //"dev-id-1", "dev-id-2"
    "GeneralRules": [
      // Login limit
      {
        "Endpoint": "get:/v1/Auth/create_token",
        "Period": "2m",
        "Limit": 10
      },

      // Open contact point
      {
        "Endpoint": "get:/v1/messaging/message-to-byndle",
        "Period": "1m",
        "Limit": 1
      },

      // Calling notifications every 15 seconds obviously ends up in a lot of queries
      {
        "Endpoint": "get:/v1/notifications/unseen",
        "Period": "12h",
        "Limit": 25000
      },
      {
        "Endpoint": "get:/v1/notifications/latest/15",
        "Period": "12h",
        "Limit": 25000
      },

      // General everything ever fallbacks
      {
        "Endpoint": "*",
        "Period": "1s",
        "Limit": 10
      },
      {
        "Endpoint": "*",
        "Period": "15m",
        "Limit": 1000
      },
      {
        "Endpoint": "*",
        "Period": "12h",
        "Limit": 5000
      }
    ]
```

GET calls to /v1/notifications/unseen are still being blocked by the 12h 5k limit, and not by the applied 12h 25k limit we have specified for that endpoint. 
`/api/v{version}/shp/buy`

my api has version controlling, so how should I define the limiting in the appsettings?

`get:/api/v*/shp/buy`    seems not work.
I have the following GeneralRule

```
 {
        "Endpoint": "*",
        "Period": "1m",
        "Limit": 2
   }
```

Can I add another GeneralRule (or something) that overrides this rate limit. I want to do something like the following

```
 {
        "Endpoint": "*",
        "Period": "1s",
        "Limit": 2
   },
 {
        "Endpoint": "*:/validate",
        "Period": "1s",
        "Limit": 10
   }
```
By this I mean that all endpoints except for the /validate endpoint should only allow 2 calls per second. The /validate endpoint should allow 10 calls per second.

I can't seem to get this to work.
Hello,

I have implemented ClientRateLimiting where in GeneralRules am setting to Period:1s, Limit:11
and in ClientRules am setting the Period:1m, Limit: 3. 
But always the GeneralRules gets overriden.
Also I tried same config by interchanging the rules and I got exactly opposite Results.


`  "ClientRateLimiting": {
    "EnableEndpointRateLimiting": true,
    "ClientIdHeader": "Ocp-Apim-Subscription-Key",
    "HttpStatusCode": 429,
    "ClientWhitelist": [ "cl-key-a", "cl-key-b" ],
    "GeneralRules": [
      {
        "Endpoint": "*",
        "Period": "1m",
        "Limit": 11
      }
    ]
  },
  "ClientRateLimitPolicies": {
    "ClientRules": [
      {
        "ClientId": "070f1593-3dd8-48d4-88f1-531182e204a8",
        "Rules": [
          {
            "Endpoint": "*",
            "Period": "1s",
            "Limit": 3
          }
        ]
      }
    ]
  }`

ResponseMessage on getting throttled, Here GeneralRules got picked up instead of ClientRule.
`"API calls quota exceeded! maximum admitted 11 per 1m."
`
**But when I gave same TimePeriod Format for both Rules, it gets executed properly.**
ClientWhitelist also works fine.

Here's the API call snippet:
```
using (HttpClient httpClient = new HttpClient())
{
httpClient.DefaultRequestHeaders.Accept.Clear();
httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
httpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", "070f1593-3dd8-48d4-88f1-531182e204a8");
string requestUri = "https://localhost:44337/{apiMethodName}";
var httpResponseMessage = httpClient.GetAsync(requestUri).Result;
}

```
Can you please look into the issue why giving different TimePeriodFormats is causing the issue,


Getting the following error when trying to install the package in VS 2017.

Install-Package WebApiThrottle -Version 1.5.4
Restoring packages for C:\Users\Dan\source\repos\WebApplication23\WebApplication23\WebApplication23.csproj...
Installing NuGet package WebApiThrottle 1.5.4.
Committing restore...
Writing lock file to disk. Path: C:\Users\Dan\source\repos\WebApplication23\WebApplication23\obj\project.assets.json
Restore completed in 909.91 ms for C:\Users\Dan\source\repos\WebApplication23\WebApplication23\WebApplication23.csproj.
Successfully installed 'Microsoft.AspNet.WebApi.Core 5.2.3' to WebApplication23
Successfully installed 'Microsoft.Owin 3.0.1' to WebApplication23
Successfully installed 'Owin 1.0.0' to WebApplication23
Successfully installed 'WebApiThrottle 1.5.4' to WebApplication23
Executing nuget actions took 1.46 sec
Time Elapsed: 00:00:02.5105531
PM> unInstall-Package WebApiThrottle -Version 1.5.4
Restoring packages for C:\Users\Dan\source\repos\WebApplication23\WebApplication23\WebApplication23.csproj...
Committing restore...
Writing lock file to disk. Path: C:\Users\Dan\source\repos\WebApplication23\WebApplication23\obj\project.assets.json
Restore completed in 840.69 ms for C:\Users\Dan\source\repos\WebApplication23\WebApplication23\WebApplication23.csproj.
Successfully uninstalled 'Microsoft.AspNet.WebApi.Core 5.2.3' from WebApplication23
Successfully uninstalled 'Microsoft.Owin 3.0.1' from WebApplication23
Successfully uninstalled 'Owin 1.0.0' from WebApplication23
Successfully uninstalled 'WebApiThrottle 1.5.4' from WebApplication23
Executing nuget actions took 375.5 ms
Time Elapsed: 00:00:01.6222598
PM> Install-Package AspNetCoreRateLimit -Version 3.0.5
Restoring packages for E:\Dev\swaytrader.io\SwayTrader\Raptor\Core\Licensing\RaptorLicensingService\RaptorLicensingService\RaptorLicensingService.csproj...
Install-Package : NU1107: Version conflict detected for Microsoft.Extensions.Logging. 
Install/reference Microsoft.Extensions.Logging 2.2.0 directly to project RaptorLicensingService to 
resolve this issue. 
 RaptorLicensingService -> AspNetCoreRateLimit 3.0.5 -> Microsoft.Extensions.Logging (>= 2.2.0) 
 RaptorLicensingService -> Microsoft.AspNetCore.App 2.1.1 -> Microsoft.Extensions.Logging (>= 2.1.1 
&& < 2.2.0).At line:1 char:1
+ Install-Package AspNetCoreRateLimit -Version 3.0.5
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception
    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets 
   .InstallPackageCommand
 
Install-Package : Package restore failed. Rolling back package changes for 
'RaptorLicensingService'.At line:1 char:1
+ Install-Package AspNetCoreRateLimit -Version 3.0.5
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception
    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets 
   .InstallPackageCommand
 
Hi @stefanprodan ,
When deploying a lots of api services(use distributed cache to store counter) behind load balance, every instance need to get conuter and use process' lock to increse count, as the code below
```
 using (await AsyncLock.WriterLockAsync(counterId).ConfigureAwait(false))
            {
                var entry = await _counterStore.GetAsync(counterId, cancellationToken);

                if (entry.HasValue)
                {
                    // entry has not expired
                    if (entry.Value.Timestamp + rule.PeriodTimespan.Value >= DateTime.UtcNow)
                    {
                        // increment request count
                        var totalCount = entry.Value.Count + _config.RateIncrementer?.Invoke() ?? 1;

                        // deep copy
                        counter = new RateLimitCounter
                        {
                            Timestamp = entry.Value.Timestamp,
                            Count = totalCount
                        };
                    }
                }

                // stores: id (string) - timestamp (datetime) - total_requests (long)
                await _counterStore.SetAsync(counterId, counter, rule.PeriodTimespan.Value, cancellationToken);
            }
```

I think it has concurrency issues, counter will not work correctly when a lots of requests come in. Every instance's counter count by themself then save to the cache store, the last one will cover the previous one.

Why not use Token Bucket algorithm to achieve this feature.