This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [fast-json-stringify](https://togithub.com/fastify/fast-json-stringify) | dependencies | patch | [`1.16.0` -> `1.16.1`](https://renovatebot.com/diffs/npm/fast-json-stringify/1.16.0/1.16.1) |

---

### Release Notes

<details>
<summary>fastify/fast-json-stringify</summary>

### [`v1.16.1`](https://togithub.com/fastify/fast-json-stringify/releases/v1.16.1)

[Compare Source](https://togithub.com/fastify/fast-json-stringify/compare/v1.16.0...v1.16.1)

**Fixes:**

-   Improve the debugging experience in case of a bad reference - [#&#8203;202](https://togithub.com/fastify/fast-json-stringify/issues/202)

</details>

---

### Renovate configuration

:date: **Schedule**: At any time (no schedule defined).

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#nestjs/nest).
## PR Checklist
Please check if your PR fulfills the following requirements:

- [x] The commit message follows our guidelines: https://github.com/nestjs/nest/blob/master/CONTRIBUTING.md
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been added / updated (for bug fixes / features)


## PR Type
What kind of change does this PR introduce?

<!-- Please check the one that applies to this PR using "x". -->
```
[ ] Bugfix
[x] Feature
[ ] Code style update (formatting, local variables)
[ ] Refactoring (no functional changes, no api changes)
[ ] Build related changes
[ ] CI related changes
[ ] Other... Please describe:
```

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->

Issue Number: #3786


## What is the new behavior?


## Does this PR introduce a breaking change?
```
[ ] Yes
[x] No
```

<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->


## Other information
## Bug Report

## Current behavior
Nestjs does not inform about broken connections when using GRPC server side streaming. As a result, there is no possible way for the server no know if a GRPC streaming client is still connected. The GRPC client also does not get an event after the network connection to server becomes broken. 

Clarification 1: 
Full-Duplex-Streaming (@GrpcStreamCall) provides this events. But in GRPC-web use cases, it is not an option to use Full-Duplex streaming, since GRPC-web supports server side streaming only.

Clarification 2:
On the client-side, developers can implement workarounds like Ping-Pong mechanisms using GRPC-unary-calls. But on the server side, no such workarounds are possible.


## Input Code
This has already been discussed on the following tickets:
- https://github.com/nestjs/nest/issues/2659
- https://github.com/nestjs/nest/issues/3289
- https://github.com/nestjs/nest/issues/1414

An example repo exists at:
https://github.com/sjkummer/nestjs-grpc-stream-helloworld

## Expected behavior
For the RxJS Subject + Observable approach, an 'error' or 'completed' event should be fired as soon as the network connection between client and server becomes broken. 
https://docs.nestjs.com/microservices/grpc

## Feature Request

## Is your feature request related to a problem? Please describe.
<!-- A clear and concise description of what the problem is. Ex. I have an issue when [...] -->

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. Add any considered drawbacks. -->
I want to handle the fastify error when starting the app.
```typescript
await app.listen(port, host, (err: Error) => {
    if (err) {
      logger.error(err)
      process.exit(1)
    }

    logger.info(`Application is listening on port ${host}:${port}.`, 'Main')
  })
```

If you write this now, typescript throws an error, so in INestApplication, the listen method is defined like this:
```typescript
listen(port: number | string, callback?: () => void): Promise<any>;
listen(port: number | string, hostname: string, callback?: () => void): Promise<any>;
```
I suggest taking the annotation from https://github.com/fastify/fastify/blob/master/fastify.d.ts#L529-L537 and adding it to NestFastifyApplication

## Teachability, Documentation, Adoption, Migration Strategy
<!-- If you can, explain how users will be able to use this and possibly write out a version the docs. Maybe a screenshot or design? -->

## What is the motivation / use case for changing the behavior?
<!-- Describe the motivation or the concrete use case. -->
## PR Checklist
Please check if your PR fulfills the following requirements:

- [x] The commit message follows our guidelines: https://github.com/nestjs/nest/blob/master/CONTRIBUTING.md
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been added / updated (for bug fixes / features)


## PR Type
What kind of change does this PR introduce?

<!-- Please check the one that applies to this PR using "x". -->
```
[*] Feature
```

## Does this PR introduce a breaking change?
```
[ ] Yes
[*] No
```

<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->


## Other information

use case:
```
this.httpService.request(...).pipe(timeout(1000))
```
we can then cancel this request upon timeout, saving a little bit of resource, and stop axios interceptors processing the timed-out response.
## Bug Report

## Current behavior
Passing in custom config (so they can be picked up in the interceptor) was broken in axios 0.19.0, its been a long time coming but its finally released! 0.19.1!

I send a previous report asking to be downgraded but it wasn't possible.  https://github.com/nestjs/nest/issues/3665

Now we have an official release.

The major problem about the config was this PR 

https://github.com/axios/axios/pull/2207

This has now been released (with other fixes also) here 

https://github.com/axios/axios/releases

Any chance of upgrading as this is a real blocker as our interceptors can't pick up any custom properties that you send down, they get erased :-(

To reiterate, it was broken in 0.19.0 and 0.19.1 fixes this and other things.

Thanks

This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [axios](https://togithub.com/axios/axios) | dependencies | patch | [`0.19.0` -> `0.19.1`](https://renovatebot.com/diffs/npm/axios/0.19.0/0.19.1) |

---

### Release Notes

<details>
<summary>axios/axios</summary>

### [`v0.19.1`](https://togithub.com/axios/axios/blob/master/CHANGELOG.md#&#8203;0191-Jan-7-2020)

[Compare Source](https://togithub.com/axios/axios/compare/v0.19.0...v0.19.1)

Fixes and Functionality:

-   Fixing invalid agent issue ([#&#8203;1904](https://togithub.com/axios/axios/pull/1904))
-   Fix ignore set withCredentials false ([#&#8203;2582](https://togithub.com/axios/axios/pull/2582))
-   Delete useless default to hash ([#&#8203;2458](https://togithub.com/axios/axios/pull/2458))
-   Fix HTTP/HTTPs agents passing to follow-redirect ([#&#8203;1904](https://togithub.com/axios/axios/pull/1904))
-   Fix ignore set withCredentials false ([#&#8203;2582](https://togithub.com/axios/axios/pull/2582))
-   Fix CI build failure ([#&#8203;2570](https://togithub.com/axios/axios/pull/2570))
-   Remove dependency on is-buffer from package.json ([#&#8203;1816](https://togithub.com/axios/axios/pull/1816))
-   Adding options typings ([#&#8203;2341](https://togithub.com/axios/axios/pull/2341))
-   Adding Typescript HTTP method definition for LINK and UNLINK. ([#&#8203;2444](https://togithub.com/axios/axios/pull/2444))
-   Update dist with newest changes, fixes Custom Attributes issue
-   Change syntax to see if build passes ([#&#8203;2488](https://togithub.com/axios/axios/pull/2488))
-   Update Webpack + deps, remove now unnecessary polyfills ([#&#8203;2410](https://togithub.com/axios/axios/pull/2410))
-   Fix to prevent XSS, throw an error when the URL contains a JS script ([#&#8203;2464](https://togithub.com/axios/axios/pull/2464))
-   Add custom timeout error copy in config ([#&#8203;2275](https://togithub.com/axios/axios/pull/2275))
-   Add error toJSON example ([#&#8203;2466](https://togithub.com/axios/axios/pull/2466))
-   Fixing Vulnerability A Fortify Scan finds a critical Cross-Site Scrip… ([#&#8203;2451](https://togithub.com/axios/axios/pull/2451))
-   Fixing subdomain handling on no_proxy ([#&#8203;2442](https://togithub.com/axios/axios/pull/2442))
-   Make redirection from HTTP to HTTPS work ([#&#8203;2426]\([#&#8203;2426](https://togithub.com/axios/axios/pull/2426)] and ([#&#8203;2547](https://togithub.com/axios/axios/pull/2547))
-   Add toJSON property to AxiosError type ([#&#8203;2427](https://togithub.com/axios/axios/pull/2427))
-   Fixing socket hang up error on node side for slow response. ([#&#8203;1752](https://togithub.com/axios/axios/pull/1752))
-   Alternative syntax to send data into the body ([#&#8203;2317](https://togithub.com/axios/axios/pull/2317))
-   Fixing custom config options ([#&#8203;2207](https://togithub.com/axios/axios/pull/2207))
-   Fixing set `config.method` after mergeConfig for Axios.prototype.request ([#&#8203;2383](https://togithub.com/axios/axios/pull/2383))
-   Axios create url bug ([#&#8203;2290](https://togithub.com/axios/axios/pull/2290))
-   Do not modify config.url when using a relative baseURL (resolves [#&#8203;1628](https://togithub.com/axios/axios/issues/1098)) ([#&#8203;2391](https://togithub.com/axios/axios/pull/2391))
-   Add typescript HTTP method definition for LINK and UNLINK ([#&#8203;2444](https://togithub.com/axios/axios/pull/2444))

Internal:

-   Revert "Update Webpack + deps, remove now unnecessary polyfills" ([#&#8203;2479](https://togithub.com/axios/axios/pull/2479))
-   Order of if/else blocks is causing unit tests mocking XHR. ([#&#8203;2201](https://togithub.com/axios/axios/pull/2201))
-   Add license badge ([#&#8203;2446](https://togithub.com/axios/axios/pull/2446))
-   Fix travis CI build [#&#8203;2386](https://togithub.com/axios/axios/pull/2386)
-   Fix cancellation error on build master. [#&#8203;2290](https://togithub.com/axios/axios/issues/2290) [#&#8203;2207](https://togithub.com/axios/axios/issues/2207) ([#&#8203;2407](https://togithub.com/axios/axios/pull/2407))

Documentation:

-   Fixing typo in CHANGELOG.md: s/Functionallity/Functionality ([#&#8203;2639](https://togithub.com/axios/axios/pull/2639))
-   Fix badge, use master branch ([#&#8203;2538](https://togithub.com/axios/axios/pull/2538))
-   Fix typo in changelog [#&#8203;2193](https://togithub.com/axios/axios/pull/2193)
-   Document fix ([#&#8203;2514](https://togithub.com/axios/axios/pull/2514))
-   Update docs with no_proxy change, issue [#&#8203;2484](https://togithub.com/axios/axios/issues/2484) ([#&#8203;2513](https://togithub.com/axios/axios/pull/2513))
-   Fixing missing words in docs template ([#&#8203;2259](https://togithub.com/axios/axios/pull/2259))
-   🐛Fix request finally documentation in README ([#&#8203;2189](https://togithub.com/axios/axios/pull/2189))
-   updating spelling and adding link to docs ([#&#8203;2212](https://togithub.com/axios/axios/pull/2212))
-   docs: minor tweak ([#&#8203;2404](https://togithub.com/axios/axios/pull/2404))
-   Update response interceptor docs ([#&#8203;2399](https://togithub.com/axios/axios/pull/2399))
-   Update README.md ([#&#8203;2504](https://togithub.com/axios/axios/pull/2504))
-   Fix word 'sintaxe' to 'syntax' in README.md ([#&#8203;2432](https://togithub.com/axios/axios/pull/2432))
-   upadating README: notes on CommonJS autocomplete ([#&#8203;2256](https://togithub.com/axios/axios/pull/2256))
-   Fix grammar in README.md ([#&#8203;2271](https://togithub.com/axios/axios/pull/2271))
-   Doc fixes, minor examples cleanup ([#&#8203;2198](https://togithub.com/axios/axios/pull/2198))

</details>

---

### Renovate configuration

:date: **Schedule**: At any time (no schedule defined).

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#nestjs/nest).
## Feature Request

## Is your feature request related to a problem? Please describe.
Hey! My situation is this: 

I want to log startup errors explicitly and log additional information on those errors. I can override default logger, but underneath there is an ExceptionHandler class which will only log occurred errors like [this](https://github.com/nestjs/nest/blob/master/packages/core/errors/exception-handler.ts):
```ts
ExceptionHandler.logger.error(exception.message, exception.stack);
```
This means that if a custom error is thrown and it looks something like this:
```ts
{
  "message": "Database connection failed"
  "stack": "..............."
  "code": "STARTUP_ERROR"
}
```
code property will be lost and will not be logged.

## Describe the solution you'd like
Solution could be something like this:
```ts
const logger = new Logger();

async function bootstrap() {
  const app = await NestFactory.create(AppModule, { logger, throwErrors: true });

  //Additional code here that can throw errors

  await app.listen(3000);
}

bootstrap().catch(error => {
  logger.error(error, null, 'Bootstrap');
  process.exit();
});
```
`throwErrors` is false by default and it means that internal ExceptionHandler is used. if value is true - ExceptionHandler is not used and original error is thrown as is or rethrown, allowing explicit handling.

In this case `new Logger()` is an instance of a custom logger implementing LoggerService of `@nestjs/common`, and this logger handled error object by whatever logic it deems necessary.

## Teachability, Documentation, Adoption, Migration Strategy
Already done in point above :)

## What is the motivation / use case for changing the behavior?
I want to log errors that are correctly tagged not only by log level, but by other criteria, or just log additional information that is not part of exception message or stacktrace.
closes #3740

## PR Checklist
Please check if your PR fulfills the following requirements:

- [x] The commit message follows our guidelines: https://github.com/nestjs/nest/blob/master/CONTRIBUTING.md
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been added / updated (for bug fixes / features)


## PR Type
What kind of change does this PR introduce?

<!-- Please check the one that applies to this PR using "x". -->
```
[ ] Bugfix
[ ] Feature
[ ] Code style update (formatting, local variables)
[ ] Refactoring (no functional changes, no api changes)
[*] Build related changes
[ ] CI related changes
[ ] Other... Please describe:
```

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->

Issue Number: N/A


## What is the new behavior?


## Does this PR introduce a breaking change?
```
[ ] Yes
[*] No
```

<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->


## Other information
## Feature Request

## Is your feature request related to a problem? Please describe.
<!-- A clear and concise description of what the problem is. Ex. I have an issue when [...] -->
So, the problem it self comes when you're build a view, paths can change,you can switch global prefix, or whatever but router name, will be static, stick to the dynamic path.

## Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. Add any considered drawbacks. -->
So I would like to have a possibility to set a name to the route that I can use it in view.

## Teachability, Documentation, Adoption, Migration Strategy
<!-- If you can, explain how users will be able to use this and possibly write out a version the docs. Maybe a screenshot or design? -->

I general, there are 2 packages, that some1 might think they cover the problem, first one is: https://www.npmjs.com/package/named-routes which do what it should do, but only on the Router scope, which is useless in our case, because each of the controller have his own isolated router, so you don't know the full path, second one is https://www.npmjs.com/package/express-reverse which seems to do the full funny staff for us, but idk if if it's not working the same way as the previous one.

So right now that we have:

```typescript
@Controller('admin')
export class Admin {
  @Get('/')
  public indexAction() {
    // ... logic
  }
}
```
I would like to propose to add a second **optional** parameter to `METHOD` decorators

that might looks like:

```typescript
@Controller('admin')
export class Admin {
  @Get('/', 'admin_index')
  public indexAction() {
    // ... logic
  }
}
```

and then in view, you will be able to use kind of function to get back the full url, fe:

```html
<a href="{{ url('admin_index') }}">Admin Panel</a>
```
Where `url` function|helper might live in `express.local` if we're talking about express or in different location, regarding to adapter.

## What is the motivation / use case for changing the behavior?
<!-- Describe the motivation or the concrete use case. -->

Problem here lives between a developer and web designer co we can call it PEKBAC in general, but I would like to solve it in different approach, kind of contracts approach, like when a developer who wrote a whole business logic make a deal with a web developer who build a views, that routes will be named in some way, web developer doesn't have to think about prefiex, or care about developer changes in paths. Even if you have in plenty places link to specific view, and you change its path, but you're using name path, until it won't change, you're safe.

Regards.