I was a bit surprised to see that the script uses ghostscript _and_ poppler _and_ imagemagick. I would have thought that the first two provide more or less feature-complete tools for working with PDFs, and that you wouldn't need both.

I haven't got a chance to look at the script in a very detailed way, but from what I can tell, poppler's tools `pdfinfo` and `pdfseparate` are mainly used to get the number of pages, page sizes, and split pages. But these are all things ghostscript can do already (look into, e.g., `sDEVICE=bbox -o /dev/null` for example). Conversely, if you're mainly using ghostscript to rasterize the pages, you could do this instead with poppler's `pdftoppm`, which can export directly to both png and (un/compressed) tiff on its own, so if you used that, you might not need ghostscript.

For yet another option, you could do either of these things or both with `mutool` from the mupdf project, which might be my preference, as in my experience, mupdf's libraries are faster than either ghostscript's or poppler's. 

In any case, it seems that the number of dependencies could be reduced.

Or the correct solution might be to have the script detect which of these are installed, and use what is available, or allow options for the user to decide which back-end to use.

If someone else doesn't pounce on this, I might try implementing it myself, though I'm not sure when I'll get around it, and admittedly, this isn't super high-priority. But it might be fun. (If someone else beats me to it, so be it!)
The code should be checked with [shellcheck](https://www.shellcheck.net/) and fixed accordingly. It raises several warnings. I'd do it if gets merged.
Screenshot of the problem below:
![screenshot from 2018-08-24 15-13-17](https://user-images.githubusercontent.com/5357642/44589368-53fd6c00-a7b0-11e8-8780-486efd741401.png)
Note that this does introduce a moment where there is no image and so the screen flashes black.

This line:

https://github.com/dsanson/termpdf/blob/5d9e9796d618dbe81bace9ffeb65f409cb461cb4/termpdf#L362

Crashes with:

```
sed: -e expression #1, char 1: unknown command: `.'
```

I'm guessing instead of `-i '.bak'` it should be `-i.bak`.
This line fails when the folder `~/.config/termpdf` doesn't exist.

https://github.com/dsanson/termpdf/blob/5d9e9796d618dbe81bace9ffeb65f409cb461cb4/termpdf#L295

However, `~/.config` in general is not a good place for storing cache, please store it in `~/.cache/termpdf`.
Renders fine outside of tmux, but both image (jpg) and pdfs fail to render (after measuring has successfully occured). Example below is for the start of a pdf file:
![termpdf](https://user-images.githubusercontent.com/10106320/39198436-fc09a40e-47de-11e8-87c2-6106fc786261.png)

Forcing -kitty rendering results in the following:
![termpdfkitty](https://user-images.githubusercontent.com/10106320/39198498-2481a29c-47df-11e8-96f0-8489018a7096.png)

However, running terminal_dimensions returns the correct values.

As an aside, very cool tool! To get it working on Ubuntu 16.04, I had to take a couple of extra steps to get it to play nice with some PDF files (which may or may not be worth mentioning in the readme; happy to do a PR). It seems ubuntu's ghostscript package doesn't link with freetype anymore, so I had to download [the latest ghostscript](https://www.ghostscript.com/download/gsdnld.html) and replace my `gs` file in `/usr/bin` with the downloaded file.
If I force iTerm with `-iterm` everything works fine, but the only thing kitty displays is a bunch of A's (and then some other random letters):
```
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...
```

Is kitty broken for anyone else? 
I installed kitty with homebrew cask, which reports it being version 0.8.2. 