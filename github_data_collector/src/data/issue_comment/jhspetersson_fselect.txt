Newer iPhones default to capturing photos in `*.heic` files using the HEIF format.  These photos still use EXIF metadata, and it looks like the `libheif-rs` crate can parse it out of such files.  Could the EXIF support in fselect be reasonably extended to cover HEIF files as well?  `libheif-rs` depends on the `libheif` C++ library and its dependencies, so this probably would have an impact on build complexity unless it was a compile-time option.

I'm trying to find anything that can sort a folder of mixed HEIF and JPEG photos by date taken, and not finding much smaller than full-blown photo management databases.
Hiya! I've been using this on my mac and it's simply brilliant! Any chance someone has built this for Ubuntu as well? 
Hi,

I wanted to try out fselect on my raspberry pi 3B but it gives me the error mentioned in the title.
rust was installed just fine, this is the version:

`rustc --version --verbose`
`rustc 1.38.0 (625451e37 2019-09-23)`
`binary: rustc`
`commit-hash: 625451e376bb2e5283fc4741caa0a3e8a2ca4d54`
`commit-date: 2019-09-23`
`host: armv7-unknown-linux-gnueabihf`
`release: 1.38.0`
`LLVM version: 9.0`

and I am on "rustup default stable"

changed it to nightly as some answers on the internet suggested, did not work out for me, same issue.

Attached is the whole output of `cargo install fselect`


[fselect.txt](https://github.com/jhspetersson/fselect/files/3779334/fselect.txt)

Just a random thought, in a true unix tradition, be nice to be able to do things like

```
$ find <whatever> | fselect max(size)
```

This way fselect would be more composable with other tools. E.g., could do things like `fd | fselect | fzf` (with fd being lightning-fast when going through massive numbers of files, so you could narrow it down before filtering it with more detail). In theory, you could also pipe `fselect` into `fselect`, why not? :)

Syntax-wise, maybe the whole `from` clause could be then omitted, and if there's anything being piped in, it would filter those results instead of searching in the current folder.
The SQL like syntax makes me think that we could implement fupdate or fdelete?
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 63, kind: Other, message: "File name too long" }', libcore/result.rs:945:5
note: Run with `RUST_BACKTRACE=1` for a backtrace.
First of all, I like what it can do and was about to install it when I noticed that there doesn't seem to be a single test.

Something that came to my mind is to test it entirely on `CLI` level to emulate how people would use it. Here is [an example][example] of journey level tests, which looks [like this][travis] when run (it's all just `bash`).

Do you consider this this as much of a maintenance problem as I do?
Please don't feel pressured or criticized, I really am interested to learn about the way this tool is/was developed.

[example]: https://github.com/Byron/share-secrets-safely/blob/master/tests/journeys/01-vault-init.sh#L17
[travis]: https://travis-ci.org/Byron/share-secrets-safely/jobs/345135680#L1000