What/how common is the use case?
If a user wants prefixed javascript names, there could be an annotation (like in scala-js) that specifies the javascript name to use. This is more general than adding a prefix. The javascript name could be completely different if desired.

...so that they can be used in scala, and rendered to javascript.

This would require a different approach than adding a method to the companion object, like the one I described here: https://groups.google.com/d/msg/jscala-user/b8QV0oofg3c/w_95Bjx7GQ0J

`{ x: Int => x }`

generates

```
function (x) {
    return x;
  };
```

Create Fiddle for JScala like:
http://jsfiddle.net/
http://cljsfiddle.net/

It can be run here:
http://fiddle.jscala.org
or here:
http://run.jscala.org

I was hoping for a (relatively) type safe and lightweight way of providing options to JavaScript APIs. Suppose we have:

``` scala
scala> object L { def f(opt: Opt): Int = ???; trait Opt { val a: String = ??? } }
defined module L
```

Then the following:

``` scala
scala> javascript { L.f(new L.Opt { val a = "a" }) } asString
$anon
L.Opt{}
res0: String = 
L.f({
  a: "a"
})

scala> javascript { new L.Opt { val a = "a" } } asString
res1: String = 
{
  function $anon() {
    this.a = "a";
  };
  new $anon();
}
```

compiles and generates proper JavaScript, but it should fail like this:

``` scala
scala> new L.Opt { val a = "a" }
<console>:13: error: overriding value a in class Opt$class of type String;
 value a needs `override' modifier
              new L.Opt { val a = "a" }
```

I thought that simple `c.typeCheck(...)` in `jsAnonObjDecl` will fix this, but apparently this doesn't work (it still type checks).

- [x] Don't generate block for single statement

``` scala
val a = 1 match {
  case 1 => 1
}
```

should not generated block like this:

``` javascript
var a;
switch(1) {
  case 1: 
     {
        a = 1;
     };
      break;
}

```
- [x] Alternatives

``` scala
1 match {
 case 1 | 2 => 1
}
```

should translate to 

``` javascript
switch(1) {
  case 1:
  case 2: 1; break;
}
```
- [ ] Guards

``` scala
1 match {
 case 1 if true => 1
}
```

should translate to 

``` javascript
switch(1) {
  case 1: if (true) { 1; break;}
}
```
