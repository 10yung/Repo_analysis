**Description**

I use `go:generate` in my source code to invoke `mockgen` to generate mocked interfaces.

e.g.

```go
//go:generate mockgen -destination=mocks/foo.pb.go github.com/xxx/xxx/pkg/xxx Foo
```

But it's too annoying that every time I have to write and check the package name (github.com/xxx/xxx/pkg/xxx).

And add the full package name in a source file is kind of duplicated information since *golang* could parse the file path and get the package name.

So I add a feature that can use "." to refer to the current path's package.

e.g.

```go
//go:generate mockgen -destination=mocks/foo.pb.go . Foo
```

Just a single `.`, no more `github.com/xxx/xxx/pkg/xxx`.

**Release Notes**

```
Use "." to refer to the current path's package in reflect mode
```
This change now makes use of go list to check for package names. This
tool is module aware and allows for better named imports.

To test this change I needed to also add a small package to our mod
file. To keep this import from disappearing from go.mod I made use
of the tools file strategy.

Note this change will change the import names in generated code. This
should not be a breaking change in user code.

Fixes #326
We should update the docs to include best practices for how to handle advanced mocking scenarios like those mentioned in #352 
*Requested feature* A clear description of the desired feature and an example of
how it would be used.

Benchmarks should be run and have some kind of assertion/validation during CI

*Why the feature is needed* A clear description of how this feature is not
served by existing functionality in gomock.

To ensure that there are no major performance regressions

*(Optional) Proposed solution* A clear description of a proposed method for
adding this feature to gomock.
 possible option https://dev.to/dannypsnl/how-to-compare-go-benchmark-in-travisci-2407
**Actual behavior** A clear and concise description of what the bug is.
```
==================
WARNING: DATA RACE
Read at 0x00c0002b0408 by goroutine 38:
  github.com/golang/mock/gomock.(*Controller).Call.func1()
      /home/powerman/go/pkg/mod/github.com/golang/mock@v1.3.1/gomock/call.go:401 +0x35c
  github.com/golang/mock/gomock.(*Controller).Call()
      /home/powerman/go/pkg/mod/github.com/golang/mock@v1.3.1/gomock/controller.go:217 +0xd7
  ...MY CODE WHICH CALLS SOME METHOD ON MOCK OBJECT...

Previous write at 0x00c0002b0408 by goroutine 24:
  github.com/golang/mock/gomock.(*Call).Return()
      /home/powerman/go/pkg/mod/github.com/golang/mock@v1.3.1/gomock/call.go:419 +0x45c
  ...MY TEST WHICH CALLS .EXPECT().â€¦.Return()...
==================
==================
WARNING: DATA RACE
Read at 0x00c0005940b8 by goroutine 38:
  github.com/golang/mock/gomock.(*Controller).Call()
      /home/powerman/go/pkg/mod/github.com/golang/mock@v1.3.1/gomock/controller.go:220 +0x10a
  ...MY CODE WHICH CALLS SOME METHOD ON MOCK OBJECT...

Previous write at 0x00c0005940b8 by goroutine 24:
  github.com/golang/mock/gomock.(*Call).Return()
      /home/powerman/go/pkg/mod/github.com/golang/mock@v1.3.1/gomock/call.go:419 +0x422
  ...MY TEST WHICH CALLS .EXPECT().â€¦.Return()...
==================
```

**Expected behavior** A clear and concise description of what you expected to happen.
I expect not to have race conditions in gomock. :smile: 

**To Reproduce** Steps to reproduce the behavior
From test, run some code which uses mocked object in parallel goroutine, then try to setup next EXPECT()ations in main test goroutine. Something like this:
```go
func Test(â€¦) {
    â€¦
    mockObj.EXPECT().â€¦.Return(â€¦)
    go codeWhichUsesMockObj()
    mockObj.EXPECT().â€¦.Return(â€¦)
    go codeWhichUsesMockObj()
    â€¦
}
```
Actual code which triggers this issue is under NDA, but I believe information above should be enough to fix it.

**Additional Information**

-   gomock mode (reflect or source): source
-   gomock version or git ref: v1.3.1 (latest, just installed by `go get github.com/golang/mock/mockgen`)
-   golang version: go version go1.13.5 linux/amd64

**Triage Notes for the Maintainers**

<!-- ðŸŽ‰ðŸŽ‰ðŸŽ‰ Thank you for an opening an issue !!! ðŸŽ‰ðŸŽ‰ðŸŽ‰ We are doing our best to get to this. -->

Add -version flag that shows a version provided by Go modules.

This strategy works well for module aware invocations of `go get` and `go
run` (which means using GO111MODULE=on).

If we ever plan to distribute built binaries, it is necessary to amend
the strategy with build flags.

GOPATH mode versioning is unsupported.
I suggest we add the following bots
* [delete merged branches](https://probot.github.io/apps/delete-merged-branch/)
* [triage new issues](https://probot.github.io/apps/triage-new-issues/)
* [close issues after no response](https://probot.github.io/apps/no-response/)
* [comment on issues which are blank or haven't filed out the template](https://probot.github.io/apps/request-info/)

If some of these don't seem right or we don't want to add them all at once that's ok with me.
Add a doc and link it in the readme which contains information about how to contribute to this project. It should include any necessary information about CLAs as well.
docker image: golang:1.13
go version: go1.13.5
gomock version: all after v1.1.0
gomock work mode: reflect mode

However, in OSX, without docker, mockgen works well with go.mod. Very strange!
https://github.com/golang/mock/blob/112dfb85f71efc679eef2a9763162fa83fbee449/gomock/call.go#L184

If someone uses Return with an interface slice, like `.Return(rets...)`, this line mutates the caller's slice.  **How** it mutates it is semi-harmless, usually, but rather importantly this means tests that share a return slice for convenience can encounter order-dependent behavior and race conditions:

```
WARNING: DATA RACE
Read at 0x00c0002da8f0 by goroutine 88:
  github.com/golang/mock/gomock.(*Call).Return()
      /Users/stevenl/gocode/pkg/mod/github.com/golang/mock@v1.1.1/gomock/call.go:171 +0x122
  go.uber.org/cadence/internal/common/metrics.runTest.func1()
      /Users/stevenl/gocode/src/go.uber.org/cadence/internal/common/metrics/service_wrapper_test.go:171 +0x316f
  testing.tRunner()
      /usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:909 +0x199

Previous write at 0x00c0002da8f0 by goroutine 89:
  github.com/golang/mock/gomock.(*Call).Return()
      /Users/stevenl/gocode/pkg/mod/github.com/golang/mock@v1.1.1/gomock/call.go:188 +0x2f3
  go.uber.org/cadence/internal/common/metrics.runTest.func1()
      /Users/stevenl/gocode/src/go.uber.org/cadence/internal/common/metrics/service_wrapper_test.go:171 +0x316f
  testing.tRunner()
      /usr/local/Cellar/go/1.13.4/libexec/src/testing/testing.go:909 +0x199
```

Evidence that it mutates a spread-ed slice is pretty simple: https://play.golang.org/p/mz_FRDnPJHB

Anyone free to fix?  There's really no reason to (ab)use the original slice like this.  I noticed other rets-use while skimming, but I'm not sure if they have the same issue.  It'd be good to make sure all instances of arg-slice mutating are cleaned up.