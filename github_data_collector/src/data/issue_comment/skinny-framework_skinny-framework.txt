Regarding Scala 3, this project will be aligning with ScalikeJDBC's policies. Please read the issue I posted: https://github.com/scalikejdbc/scalikejdbc/issues/1068
https://github.com/skinny-framework/skinny-framework/blob/f25ba6348a08b921c5d9704c57643e60d59cc4a5/orm/src/main/scala/skinny/orm/feature/AssociationsFeature.scala#L1008-L1010

we just hit this limit ;)
any special reason to limit to 5?
can we increase to 7? 8)
maybe via configuration?
This is a blocker issue for Scala 2.13 users. Skinny ORM doesn't work on Scala 2.13.0.

```
[info] Done compiling.
[info] Spec:
[info] Entity which has 1 - 8 associations
[info] - should return results as expected
[info] Entity which has 9 associations
[info] - should return results as expected
[info] Entity which has 10 associations
[info] - should throw exception as expected
[info] SkinnyORMSpec:
[info] ConnectionPool
[info] - should be available
[info] AutoSession
[info] - should be available
[info] DynamicTableName
[info] - should be available
[info] SkinnyRecord
[info] - should act like ActiveRecord
[info] Operations
[info] - should have #findById(Long)
[info] - should have #findBy(where)
[info] - returns nested belongsTo relations
[info] - returns nested hasMany relations
[info] - should have #findAll()
[info] - should have #count()
[info] - should have #count(Symbol)
[info] - should have #distinctCount(Symbol)
[info] - should have #count, #sum, #average, #maximum and #minimum
[info] - should have #findAllBy(SQLSyntax, Int, Int)
[info] - should have #countBy(SQLSyntax)
[info] - should have #countBy(SQLSyntax) with associations (byDefault)
[info] - should have #countBy(SQLSyntax) with associations
[info] - should have #updateById(Long)
[info] - should have #deleteById(Long)
[info] - should have #createWithPermittedAttributes
[info] - should thorw exception for invalid datetime format
[info] - should have Querying APIs
[info] - should have #orderBy in Querying APIs
[info] - should have #paginate in Querying APIs
[info] Relationship
[info] - should have #belongsTo, #hasOne
[info] - should have #hasMany
[info] Timestamps
[info] - should fill timestamps correctly
[info] Optimistic Lock
[info] - should update with lock version
[info] - should delete with lock version
[info] - should update with lock timestamp
[info] - should delete with lock timestamp
[info] dynamic table name
[info] - should accept table name
[info] WithId
[info] - should work
[info] - should deal with typed auto-increment value
[info] - should deal with tables by using SkinnyTable
[info] - should deal with tables by using SkinnyNoIdMapper
[info] - should have #deleteAll
[info] - should accept empty string as nullable number
[info] - should work with SkinnyNoIdMapper/SkinnyNoIdCRUDMapper
[info] - should have associations for SkinnyNoIdCRUDMapper
[info] ByDefaultSpec:
[info] find without associations
[info] - should return results as expected
[info] find with #joins associations
[info] - should return results as expected
[info] find with #includes associations
[info] - should return results as expected
[info] find with #includes and #joins associations
[info] - should return results as expected
[info] Spec:
[info] Entities with compound primary keys
[info] - should have finder APIs *** FAILED ***
[info]   java.lang.IllegalStateException: Connection pool is not yet initialized.(name:'test003)
[info]   at scalikejdbc.ConnectionPool$.$anonfun$get$1(ConnectionPool.scala:78)
[info]   at scala.collection.mutable.HashMap.getOrElse(HashMap.scala:366)
[info]   at scalikejdbc.ConnectionPool$.get(ConnectionPool.scala:76)
[info]   at scalikejdbc.ConnectionPool$.apply(ConnectionPool.scala:66)
[info]   at scalikejdbc.NamedDB.connectionPool(NamedDB.scala:25)
[info]   at scalikejdbc.NamedDB.db$lzycompute(NamedDB.scala:37)
[info]   at scalikejdbc.NamedDB.db(NamedDB.scala:36)
[info]   at scalikejdbc.NamedDB.toDB(NamedDB.scala:41)
[info]   at test003.Spec.db(Spec.scala:11)
[info]   at scalikejdbc.scalatest.AutoRollback.withFixture(AutoRollback.scala:57)
[info]   ...
[info] - should have querying APIs *** FAILED ***
[info]   java.lang.IllegalStateException: Connection pool is not yet initialized.(name:'test003)
[info]   at scalikejdbc.ConnectionPool$.$anonfun$get$1(ConnectionPool.scala:78)
[info]   at scala.collection.mutable.HashMap.getOrElse(HashMap.scala:366)
[info]   at scalikejdbc.ConnectionPool$.get(ConnectionPool.scala:76)
[info]   at scalikejdbc.ConnectionPool$.apply(ConnectionPool.scala:66)
[info]   at scalikejdbc.NamedDB.connectionPool(NamedDB.scala:25)
[info]   at scalikejdbc.NamedDB.db$lzycompute(NamedDB.scala:37)
[info]   at scalikejdbc.NamedDB.db(NamedDB.scala:36)
[info]   at scalikejdbc.NamedDB.toDB(NamedDB.scala:41)
[info]   at test003.Spec.db(Spec.scala:11)
[info]   at scalikejdbc.scalatest.AutoRollback.withFixture(AutoRollback.scala:57)
[info]   ...
[info] - should detect invalid associations *** FAILED ***
[info]   java.lang.IllegalStateException: Connection pool is not yet initialized.(name:'test003)
[info]   at scalikejdbc.ConnectionPool$.$anonfun$get$1(ConnectionPool.scala:78)
[info]   at scala.collection.mutable.HashMap.getOrElse(HashMap.scala:366)
[info]   at scalikejdbc.ConnectionPool$.get(ConnectionPool.scala:76)
[info]   at scalikejdbc.ConnectionPool$.apply(ConnectionPool.scala:66)
[info]   at scalikejdbc.NamedDB.connectionPool(NamedDB.scala:25)
[info]   at scalikejdbc.NamedDB.db$lzycompute(NamedDB.scala:37)
[info]   at scalikejdbc.NamedDB.db(NamedDB.scala:36)
[info]   at scalikejdbc.NamedDB.toDB(NamedDB.scala:41)
[info]   at test003.Spec.db(Spec.scala:11)
[info]   at scalikejdbc.scalatest.AutoRollback.withFixture(AutoRollback.scala:57)
[info]   ...
[info] HasOneHasManySpec:
[info] Finder pagination with hasMany conditions
[info] - should return has-many associations
[info] - should return has-one associations
[info] - should return has-one/has-many associations
[info] Querying pagination with hasMany conditions
[info] - should return has-many associations
[info] - should return has-one associations
[info] - should return has-one/has-many associations
[info] DBSeedsSpec:
[info] TimestampsFeatureSpec:
[info] WithId
[info] - assigns/updates timestamps
[info]   + It automatically assigns createdAt and updatedAt. 
[info]   + Only updatedAt should be changed by update. 
[info]   + Specified value is used when a user wants. 
[info] WithoutId
[info] - assigns/updates timestamps
[info]   + It automatically assigns createdAt and updatedAt. 
[info]   + Only updatedAt should be changed by update. 
[info]   + Specified value is used when a user wants. 
[info] MyWithId
[info] - assigns timestamps for custom fields
[info] Spec:
[info] SkinnyRecord
[info] - should update timestamps *** FAILED ***
[info]   java.lang.IllegalStateException: Connection pool is not yet initialized.(name:'test004)
[info]   at scalikejdbc.ConnectionPool$.$anonfun$get$1(ConnectionPool.scala:78)
[info]   at scala.collection.mutable.HashMap.getOrElse(HashMap.scala:366)
[info]   at scalikejdbc.ConnectionPool$.get(ConnectionPool.scala:76)
[info]   at scalikejdbc.ConnectionPool$.apply(ConnectionPool.scala:66)
[info]   at scalikejdbc.NamedDB.connectionPool(NamedDB.scala:25)
[info]   at scalikejdbc.NamedDB.db$lzycompute(NamedDB.scala:37)
[info]   at scalikejdbc.NamedDB.db(NamedDB.scala:36)
[info]   at scalikejdbc.NamedDB.toDB(NamedDB.scala:41)
[info]   at test004.Spec.db(Spec.scala:12)
[info]   at scalikejdbc.scalatest.AutoRollback.withFixture(AutoRollback.scala:57)
[info]   ...
[info] ServiceSpec:
[info] hasMany without byDefault
[info] - should work as expected
[info] belongsTo without byDefault
[info] - should work as expected
[info] StrongParametersFeatureSpec:
[info] #getTypedValueFromStrongParameter
[info]   Option[Any] handling
[info]   - should return a value (not wrapped in an option) as a Some(value parsed)
[info]   - should return a Some(value) as Some(value parsed)
[info]   empty string handling
[info]   - should return null as BigDecimal
[info]   - should return null as String
[info]   - should return null as DateTime
[info]   blank string handling
[info]   - should return null as BigDecimal
[info]   - should return null as String
[info]   - should return null as DateTime
[info] BlogSpec:
[info] hasManyThrough without byDefault
[info] blog2.BlogSpec *** ABORTED ***
[info]   java.lang.ExceptionInInitializerError:
[info]   at blog2.BlogSpec.fixture(BlogSpec.scala:13)
[info]   at scalikejdbc.scalatest.AutoRollback.$anonfun$withFixture$2(AutoRollback.scala:61)
[info]   at scalikejdbc.scalatest.AutoRollback.$anonfun$withFixture$2$adapted(AutoRollback.scala:60)
[info]   at scalikejdbc.DBConnection.withinTx(DBConnection.scala:277)
[info]   at scalikejdbc.DBConnection.withinTx$(DBConnection.scala:276)
[info]   at scalikejdbc.DB.withinTx(DB.scala:60)
[info]   at scalikejdbc.scalatest.AutoRollback.$anonfun$withFixture$1(AutoRollback.scala:60)
[info]   at scalikejdbc.LoanPattern.using(LoanPattern.scala:18)
[info]   at scalikejdbc.LoanPattern.using$(LoanPattern.scala:16)
[info]   at blog2.BlogSpec.using(BlogSpec.scala:8)
[info]   ...
[info]   Cause: scalikejdbc.InvalidColumnNameException: Invalid column name. (name: pt.tag_tag, registered names: post_id,tag_id)
[info]   at scalikejdbc.SQLSyntaxSupportFeature$QuerySQLSyntaxProvider.$anonfun$column$9(SQLSyntaxSupportFeature.scala:510)
[info]   at scala.Option.getOrElse(Option.scala:202)
[info]   at scalikejdbc.SQLSyntaxSupportFeature$QuerySQLSyntaxProvider.$anonfun$column$6(SQLSyntaxSupportFeature.scala:509)
[info]   at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:951)
[info]   at scalikejdbc.SQLSyntaxSupportFeature$QuerySQLSyntaxProvider.column(SQLSyntaxSupportFeature.scala:508)
[info]   at scalikejdbc.SQLSyntaxSupportFeature$SQLSyntaxProvider.c(SQLSyntaxSupportFeature.scala:310)
[info]   at scalikejdbc.SQLSyntaxSupportFeature$SQLSyntaxProvider.c$(SQLSyntaxSupportFeature.scala:310)
[info]   at scalikejdbc.SQLSyntaxSupportFeature$SQLSyntaxProviderCommonImpl.c(SQLSyntaxSupportFeature.scala:458)
[info]   at scalikejdbc.SQLSyntaxSupportFeature$SQLSyntaxProvider.field(SQLSyntaxSupportFeature.scala:325)
[info]   at scalikejdbc.SQLSyntaxSupportFeature$SQLSyntaxProvider.field$(SQLSyntaxSupportFeature.scala:320)
[info]   ...
[error] java.lang.ExceptionInInitializerError
[error] 	at blog2.BlogSpec.fixture(BlogSpec.scala:13)
[error] 	at scalikejdbc.scalatest.AutoRollback.$anonfun$withFixture$2(AutoRollback.scala:61)
[error] 	at scalikejdbc.scalatest.AutoRollback.$anonfun$withFixture$2$adapted(AutoRollback.scala:60)
[error] 	at scalikejdbc.DBConnection.withinTx(DBConnection.scala:277)
[error] 	at scalikejdbc.DBConnection.withinTx$(DBConnection.scala:276)
[error] 	at scalikejdbc.DB.withinTx(DB.scala:60)
[error] 	at scalikejdbc.scalatest.AutoRollback.$anonfun$withFixture$1(AutoRollback.scala:60)
[error] 	at scalikejdbc.LoanPattern.using(LoanPattern.scala:18)
[error] 	at scalikejdbc.LoanPattern.using$(LoanPattern.scala:16)
[error] 	at blog2.BlogSpec.using(BlogSpec.scala:8)
[error] 	at scalikejdbc.scalatest.AutoRollback.withFixture(AutoRollback.scala:57)
[error] 	at scalikejdbc.scalatest.AutoRollback.withFixture$(AutoRollback.scala:56)
[error] 	at blog2.BlogSpec.withFixture(BlogSpec.scala:8)
[error] 	at org.scalatest.fixture.FunSpecLike.invokeWithFixture$1(FunSpecLike.scala:502)
[error] 	at org.scalatest.fixture.FunSpecLike.$anonfun$runTest$1(FunSpecLike.scala:513)
[error] 	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:286)
[error] 	at org.scalatest.fixture.FunSpecLike.runTest(FunSpecLike.scala:513)
[error] 	at org.scalatest.fixture.FunSpecLike.runTest$(FunSpecLike.scala:494)
[error] 	at org.scalatest.fixture.FunSpec.runTest(FunSpec.scala:231)
[error] 	at org.scalatest.fixture.FunSpecLike.$anonfun$runTests$1(FunSpecLike.scala:557)
[error] 	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:393)
[error] 	at scala.collection.immutable.List.foreach(List.scala:312)
[error] 	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:381)
[error] 	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:370)
[error] 	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:407)
[error] 	at scala.collection.immutable.List.foreach(List.scala:312)
[error] 	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:381)
[error] 	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:376)
[error] 	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:458)
[error] 	at org.scalatest.fixture.FunSpecLike.runTests(FunSpecLike.scala:557)
[error] 	at org.scalatest.fixture.FunSpecLike.runTests$(FunSpecLike.scala:555)
[error] 	at org.scalatest.fixture.FunSpec.runTests(FunSpec.scala:231)
[error] 	at org.scalatest.Suite.run(Suite.scala:1124)
[error] 	at org.scalatest.Suite.run$(Suite.scala:1106)
[error] 	at org.scalatest.fixture.FunSpec.org$scalatest$fixture$FunSpecLike$$super$run(FunSpec.scala:231)
[error] 	at org.scalatest.fixture.FunSpecLike.$anonfun$run$1(FunSpecLike.scala:578)
[error] 	at org.scalatest.SuperEngine.runImpl(Engine.scala:518)
[error] 	at org.scalatest.fixture.FunSpecLike.run(FunSpecLike.scala:578)
[error] 	at org.scalatest.fixture.FunSpecLike.run$(FunSpecLike.scala:577)
[error] 	at org.scalatest.fixture.FunSpec.run(FunSpec.scala:231)
[error] 	at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:317)
[error] 	at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:510)
[error] 	at sbt.TestRunner.runTest$1(TestFramework.scala:113)
[error] 	at sbt.TestRunner.run(TestFramework.scala:124)
[error] 	at sbt.TestFramework$$anon$2$$anonfun$$lessinit$greater$1.$anonfun$apply$1(TestFramework.scala:282)
[error] 	at sbt.TestFramework$.sbt$TestFramework$$withContextLoader(TestFramework.scala:246)
[error] 	at sbt.TestFramework$$anon$2$$anonfun$$lessinit$greater$1.apply(TestFramework.scala:282)
[error] 	at sbt.TestFramework$$anon$2$$anonfun$$lessinit$greater$1.apply(TestFramework.scala:282)
[error] 	at sbt.TestFunction.apply(TestFramework.scala:294)
[error] 	at sbt.Tests$.processRunnable$1(Tests.scala:347)
[error] 	at sbt.Tests$.$anonfun$makeSerial$1(Tests.scala:353)
[error] 	at sbt.std.Transform$$anon$3.$anonfun$apply$2(System.scala:46)
[error] 	at sbt.std.Transform$$anon$4.work(System.scala:67)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:269)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:16)
[error] 	at sbt.Execute.work(Execute.scala:278)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:269)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:178)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:37)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[error] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[error] 	at java.lang.Thread.run(Thread.java:748)
[error] Caused by: scalikejdbc.InvalidColumnNameException: Invalid column name. (name: pt.tag_tag, registered names: post_id,tag_id)
[error] 	at scalikejdbc.SQLSyntaxSupportFeature$QuerySQLSyntaxProvider.$anonfun$column$9(SQLSyntaxSupportFeature.scala:510)
[error] 	at scala.Option.getOrElse(Option.scala:202)
[error] 	at scalikejdbc.SQLSyntaxSupportFeature$QuerySQLSyntaxProvider.$anonfun$column$6(SQLSyntaxSupportFeature.scala:509)
[error] 	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:951)
[error] 	at scalikejdbc.SQLSyntaxSupportFeature$QuerySQLSyntaxProvider.column(SQLSyntaxSupportFeature.scala:508)
[error] 	at scalikejdbc.SQLSyntaxSupportFeature$SQLSyntaxProvider.c(SQLSyntaxSupportFeature.scala:310)
[error] 	at scalikejdbc.SQLSyntaxSupportFeature$SQLSyntaxProvider.c$(SQLSyntaxSupportFeature.scala:310)
[error] 	at scalikejdbc.SQLSyntaxSupportFeature$SQLSyntaxProviderCommonImpl.c(SQLSyntaxSupportFeature.scala:458)
[error] 	at scalikejdbc.SQLSyntaxSupportFeature$SQLSyntaxProvider.field(SQLSyntaxSupportFeature.scala:325)
[error] 	at scalikejdbc.SQLSyntaxSupportFeature$SQLSyntaxProvider.field$(SQLSyntaxSupportFeature.scala:320)
[error] 	at scalikejdbc.SQLSyntaxSupportFeature$SQLSyntaxProviderCommonImpl.field(SQLSyntaxSupportFeature.scala:458)
[error] 	at skinny.orm.feature.AssociationsFeature.$anonfun$hasManyThrough$2(AssociationsFeature.scala:439)
[error] 	at skinny.orm.feature.AssociationsFeature.leftJoin(AssociationsFeature.scala:221)
[error] 	at skinny.orm.feature.AssociationsFeature.leftJoin$(AssociationsFeature.scala:218)
[error] 	at blog2.Post$.leftJoin(Post.scala:16)
[error] 	at skinny.orm.feature.AssociationsFeature.hasManyThrough(AssociationsFeature.scala:470)
[error] 	at skinny.orm.feature.AssociationsFeature.hasManyThrough$(AssociationsFeature.scala:461)
[error] 	at blog2.Post$.hasManyThrough(Post.scala:16)
[error] 	at skinny.orm.feature.AssociationsFeature.hasManyThrough(AssociationsFeature.scala:440)
[error] 	at skinny.orm.feature.AssociationsFeature.hasManyThrough$(AssociationsFeature.scala:427)
[error] 	at blog2.Post$.hasManyThrough(Post.scala:16)
[error] 	at blog2.Post$.<clinit>(Post.scala:24)
[error] 	at blog2.BlogSpec.fixture(BlogSpec.scala:13)
[error] 	at scalikejdbc.scalatest.AutoRollback.$anonfun$withFixture$2(AutoRollback.scala:61)
[error] 	at scalikejdbc.scalatest.AutoRollback.$anonfun$withFixture$2$adapted(AutoRollback.scala:60)
[error] 	at scalikejdbc.DBConnection.withinTx(DBConnection.scala:277)
[error] 	at scalikejdbc.DBConnection.withinTx$(DBConnection.scala:276)
[error] 	at scalikejdbc.DB.withinTx(DB.scala:60)
[error] 	at scalikejdbc.scalatest.AutoRollback.$anonfun$withFixture$1(AutoRollback.scala:60)
[error] 	at scalikejdbc.LoanPattern.using(LoanPattern.scala:18)
[error] 	at scalikejdbc.LoanPattern.using$(LoanPattern.scala:16)
[error] 	at blog2.BlogSpec.using(BlogSpec.scala:8)
[error] 	at scalikejdbc.scalatest.AutoRollback.withFixture(AutoRollback.scala:57)
[error] 	at scalikejdbc.scalatest.AutoRollback.withFixture$(AutoRollback.scala:56)
[error] 	at blog2.BlogSpec.withFixture(BlogSpec.scala:8)
[error] 	at org.scalatest.fixture.FunSpecLike.invokeWithFixture$1(FunSpecLike.scala:502)
[error] 	at org.scalatest.fixture.FunSpecLike.$anonfun$runTest$1(FunSpecLike.scala:513)
[error] 	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:286)
[error] 	at org.scalatest.fixture.FunSpecLike.runTest(FunSpecLike.scala:513)
[error] 	at org.scalatest.fixture.FunSpecLike.runTest$(FunSpecLike.scala:494)
[error] 	at org.scalatest.fixture.FunSpec.runTest(FunSpec.scala:231)
[error] 	at org.scalatest.fixture.FunSpecLike.$anonfun$runTests$1(FunSpecLike.scala:557)
[error] 	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:393)
[error] 	at scala.collection.immutable.List.foreach(List.scala:312)
[error] 	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:381)
[error] 	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:370)
[error] 	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:407)
[error] 	at scala.collection.immutable.List.foreach(List.scala:312)
[error] 	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:381)
[error] 	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:376)
[error] 	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:458)
[error] 	at org.scalatest.fixture.FunSpecLike.runTests(FunSpecLike.scala:557)
[error] 	at org.scalatest.fixture.FunSpecLike.runTests$(FunSpecLike.scala:555)
[error] 	at org.scalatest.fixture.FunSpec.runTests(FunSpec.scala:231)
[error] 	at org.scalatest.Suite.run(Suite.scala:1124)
[error] 	at org.scalatest.Suite.run$(Suite.scala:1106)
[error] 	at org.scalatest.fixture.FunSpec.org$scalatest$fixture$FunSpecLike$$super$run(FunSpec.scala:231)
[error] 	at org.scalatest.fixture.FunSpecLike.$anonfun$run$1(FunSpecLike.scala:578)
[error] 	at org.scalatest.SuperEngine.runImpl(Engine.scala:518)
[error] 	at org.scalatest.fixture.FunSpecLike.run(FunSpecLike.scala:578)
[error] 	at org.scalatest.fixture.FunSpecLike.run$(FunSpecLike.scala:577)
[error] 	at org.scalatest.fixture.FunSpec.run(FunSpec.scala:231)
[error] 	at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:317)
[error] 	at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:510)
[error] 	at sbt.TestRunner.runTest$1(TestFramework.scala:113)
[error] 	at sbt.TestRunner.run(TestFramework.scala:124)
[error] 	at sbt.TestFramework$$anon$2$$anonfun$$lessinit$greater$1.$anonfun$apply$1(TestFramework.scala:282)
[error] 	at sbt.TestFramework$.sbt$TestFramework$$withContextLoader(TestFramework.scala:246)
[error] 	at sbt.TestFramework$$anon$2$$anonfun$$lessinit$greater$1.apply(TestFramework.scala:282)
[error] 	at sbt.TestFramework$$anon$2$$anonfun$$lessinit$greater$1.apply(TestFramework.scala:282)
[error] 	at sbt.TestFunction.apply(TestFramework.scala:294)
[error] 	at sbt.Tests$.processRunnable$1(Tests.scala:347)
[error] 	at sbt.Tests$.$anonfun$makeSerial$1(Tests.scala:353)
[error] 	at sbt.std.Transform$$anon$3.$anonfun$apply$2(System.scala:46)
[error] 	at sbt.std.Transform$$anon$4.work(System.scala:67)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:269)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:16)
[error] 	at sbt.Execute.work(Execute.scala:278)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:269)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:178)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:37)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[error] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[error] 	at java.lang.Thread.run(Thread.java:748)
[error] (orm / Test / executeTests) java.lang.ExceptionInInitializerError
```
RequestBody.asMultipart  has the bug that puts the end boundary of multipart/form-data to the wrong location.
This method should put the end boundary to outside of request.multipartFormData.foreach in RequestBody.asMultipart .

http-client/src/main/scala/skinny/http/RequestBody.scala

As Is
```
--XXX
Content-Disposition: form-data; name="abcde"

abcde
--XXX--
--XXX
Content-Disposition: form-data; name="abcde"

abcde
--XXX--
```

To Be
```
--XXX
Content-Disposition: form-data; name="abcde"

abcde
--XXX
Content-Disposition: form-data; name="abcde"

abcde
--XXX--
```
Hi, I was wondering if and how skinny-framework can be configured to use https
I'm using skinny ORM with table which doesn't have auto generated key.

So, I've override useAutoIncrementPrimaryKey and primaryKeyFieldName like this.

```
  override def useAutoIncrementPrimaryKey: Boolean = false
  override def primaryKeyFieldName = "bookId" // bookId is Long
```

With this model, createWithNamedValue method fails with strange behavior.

If I don't get its result value, it succeed.  
But if I assign its result value into some variables, It fails with ClassCastException.

I've tried to add `afterCreate` and print id value. So, it says `id` value is ParameterBinder.(It should be Long)

```
afterCreate: Some(ParameterBinder(value=1))
```

I don't know why it doesn't cause compile error...

Minimum example is here

- [Main.scala](https://github.com/shunjikonishi/skinny-test/blob/master/src/main/scala/com/example/Main.scala)
- [Test.scala](https://github.com/shunjikonishi/skinny-test/blob/master/src/main/scala/com/example/Test.scala)




![not-secure](https://cloud.githubusercontent.com/assets/413772/22544731/ee3a4f42-e92d-11e6-9e07-caa637cefe19.png)

``` scala
class Member(id: Long, name: String, createdAt: DateTime, updatedAt: DateTime) 
...
object Member extends SkinnyCRUDMapper[Member] with TimestampsFeature[EntityTag] {
...
val member = Member.findAll().head // Member(1L, "name", 2016-05-24T05:49:48.000-07:00, 2016-05-24T05:49:48.000-07:00)
// time passes
member.copy(name = "updated").save() // does not change updateAt timestamp
Member.findAll().head // Member(1L, "updated", 2016-05-24T05:49:48.000-07:00, 2016-05-24T05:49:48.000-07:00)
Member.updateById(1).withAttributes('name -> "updated for real now") // works
```

```
val user = FactoryGirl(User).withAttributes('os -> "0001", 'user -> "true").create()
user.os should equal("0001") // actual 1
user.user should equal("true") // actual TRUE
```

I'm now trying to write a simple integration test: insert a Member with name and UUID as primary key.
It works perfectly in h2 memory database, but not working for Postgresql, which having the following error:

```
12:01:53.368 [ScalaTest-run-running-MemberSpec] ERROR s.StatementExecutor$$anon$1 - SQL execution failed (Reason: ERROR: column "uuid" is of type uuid but expression is of type character varying
  Hint: You will need to rewrite or cast the expression.
  Position: 45):

   insert into member (name, uuid) values ('Skinny', '60a3193b-ac24-44f7-8637-ab0c71833189')

12:01:53.402 [ScalaTest-run-running-MemberSpec] DEBUG scalikejdbc.DB - A Connection is closed.

```

I've created a repo to demonstrate the issue:
https://github.com/chakming/skinny-orm-postgresql-UUID

Any clue?
