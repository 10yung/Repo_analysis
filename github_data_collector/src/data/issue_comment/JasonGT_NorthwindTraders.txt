How can I use CQRS in the infrastructure layer when I have to communicate with an external API? I'm using a wrapper library, [SpotifyAPI-NET](https://github.com/JohnnyCrazy/SpotifyAPI-NET) to simplify calling Spotify API.

In my Application layer, I have `ISpotifyService`:

```
using System.Collections.Generic;
using System.Threading.Tasks;
using LDR.Application.Common.Models;

namespace LDR.Application.Common.Interfaces
{
    public interface ISpotifyService
    {
        Task<ArtistsViewModel> FindArtists(string searchQuery);

        Task<Artist> GetArtist(string id);

        // More commands and queries below...
    }
}
```

The models above are in the Application layer, so I can reference them anywhere else.

And in the Infrastructure layer, I implement `SpotifyService`:

```
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using LDR.Application.Common.Interfaces;
using LDR.Application.Common.Models;
using SpotifyAPI.Web;
using SpotifyAPI.Web.Auth;
using SpotifyAPI.Web.Enums;
using SpotifyAPI.Web.Models;

namespace LDR.Infrastructure
{
    public class SpotifyService : ISpotifyService
    {
        private SpotifyWebAPI _spotify;
        private Token _token;

        private string _clientId = Environment.GetEnvironmentVariable("SpotifyClientId");
        private string _secretId = Environment.GetEnvironmentVariable("SpotifySecretId");

        public async Task<ArtistsViewModel> FindArtists(string searchQuery)
        {
            await Authenticate();

            var results = _spotify?.SearchItemsEscaped(searchQuery, SearchType.Artist);

            var artists = results?.Artists.Items
                .Select(artist => new Artist {Name = artist.Name, SpotifyId = artist.Id})
                .ToHashSet();

            return new ArtistsViewModel {Artists = artists};
        }

        public async Task<Artist> GetArtist(string id)
        {
            await Authenticate();

            var result = await _spotify.GetArtistAsync(id);

            return new Artist
            {
                Name = result.Name, 
                SpotifyId = result.Id,
                Popularity = result.Popularity,
                Genres = result.Genres
            };
        }

        private async Task Authenticate()
        {
            // If token is not null or is not expired, do nothing
            if (_token == null || _token.IsExpired())
            {
                var auth = new CredentialsAuth(_clientId, _secretId);

                _token = await auth.GetToken();

                _spotify = new SpotifyWebAPI {AccessToken = _token.AccessToken, TokenType = _token.TokenType};
            }
        }
    }
}
```

This setup works but I'd like to separate the queries similar to how it's done with CQRS + Mediatr in the app layer. The reason being that I have more commands + queries I have to implement and I want to add validation to each. I'd rather not have everything in one class.

With CQRS style, I can inject `SpotifyService` via DI into my `Handler'`s constructor and use it as shown above. The problem comes when I have to reference the `CommandHandler` inside my controllers. Right now, trying to do that introduces a dependency on the Infrastructure layer, which I want to avoid. 

Perhaps CQRS is not the best approach here, but I'm after something similar in terms of simplicity and organization. I'm not sure how else to separate my interface implementation into separate files.
Hi,

I saw your video about clean architecture, very nice job.

You mentioned all interfaces should be in Application layer and all entities in Domain layer, but I need all my entities inherit form `IEntity` interfaces, e.g:

```
public interface IEntity { } // in my case it's just marker interface
```

What should I do?

_p.s: I'm not here to discuss marker interfaces._
Why does the Application layer depend on external libraries, for example: MediatR and FluentValidation. Is it Ok?

> This layer contains all application logic. It is dependent on the domain layer, but has no dependencies on any other layer or project. This layer defines interfaces that are implemented by outside layers. For example, if the application need to access a notification service, a new interface would be added to application and an implementation would be created within infrastructure.
Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/JasonGT/NorthwindTraders/network/alerts).

</details>
1. Inject `AUTH_BASE_URL` in the Angular app.
1. Add a permissive CORS policy while in development environment.
Updating the ValueObject tests to use the == operator instead of explicitly calling Equals causes them to fail. I had originally thought that testing Equals was sufficient, but it's not.
I added the following to fix it:
```
    public static Boolean operator ==(ValueObject left, ValueObject right) => EqualOperator(left, right);
    public static Boolean operator !=(ValueObject left, ValueObject right) => NotEqualOperator(left, right);
```

Example implementation as to how one can use [NetArchTest](https://www.ben-morris.com/writing-archunit-style-tests-for-net-and-c-for-self-testing-architectures/) to build an anti-corruption layer to protect against improper coupling.

@JasonGT - I've recently watched your NDC 2019 talk and noticed that you cautioned the audience that the `WebUI` layer has a reference to `Infrastructure` for the purpose of DI and if it's used outside of the Startup.cs "hopefully you'll pick that up during a code review".  The unit tests added here provide a mechanism to remove that ambiguity and use tests to validate this type of improper coupling doesn't occur.

The example included here is relatively simplistic, however it could easily be enhanced further.  I thought it would be wise to implement and discuss it here before attempting to incorporate it anywhere else (such as your `Clean.Architecture.Solution.Template` project).  
First - Thank you for providing such an excellent reference!

Q: How would you make use of database transactions in a mediator handler?
For example, assuming I need a value object for ProductId, which needs to be formated with some patterns with business rules. 

I will change the type of ProductId in Northwind.Domain.Entities.Product from int to ProductId (value object).

How about the Dto and Vm classes used in queries and commands: GetProductDetailQuery, GetProductsListQuery? 

How about the properties, e.g, Id of GetProductDetailQuery?


But a request for information on how OidcConfigurationController works in Northwind trader

any reference to articles would help, have had not much luck finding any

any other code snippets or application which use the above would help

Kind regards
Peter
