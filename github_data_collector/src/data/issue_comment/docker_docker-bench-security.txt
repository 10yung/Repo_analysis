### Reason for change

For a CI pipeline I was trying to scan just container images but without the healtcheck and docker trust check:
`./docker-bench-security.sh -i test -c container_images -e check_4_5,check_4_6`

This wasn't yet implemented so I took a stab at it.


### Technical explaining
The magic is in the sed:
```
sed -ne "/$i()/,/}/{ /{/d; /}/d; p}" functions_lib.sh
```

`$i` is the checkname, for example container_images so it matches on `container_images() {` until `}`
This results in:

```console
# sed -ne "/container_images() {/,/}/p" functions_lib.sh
container_images() {
  check_4
  check_4_1
  check_4_2
  check_4_3
  check_4_4
  check_4_5
  check_4_6
  check_4_7
  check_4_8
  check_4_9
  check_4_10
  check_4_11
  check_4_end
}
```

But I am just interested in the checks so just print the checks:

```console
# sed -ne "/container_images() {/,/}/{/check/p}" functions_lib.sh
  check_4
  check_4_1
  check_4_2
  check_4_3
  check_4_4
  check_4_5
  check_4_6
  check_4_7
  check_4_8
  check_4_9
  check_4_10
  check_4_11
  check_4_end
```

And then I just did the same grep trick as checkexclude to exlude test.
v1.3.5 was just released; https://github.com/docker/docker-bench-security/releases/tag/v1.3.5.
The image needs to be signed by Docker, have a :latest and a version tag added to the image and published.
docker compose fixed
In some evironments, there may be a very large number of images,
containers, etc not satisfying a given test. For example, in one
environment, we saw *378k* images not satisfying 4.6, mostly because
the customer was never cleaning up old images.

To avoid overly long lists of items, add a new option "-n LIMIT" that
limits the number of items included in JSON output. When the limit is
reached, the list will be truncated and a trailing (truncated) will be
added. Here's an example:

```
{"id": "5.9", "desc": "Ensure the host's network namespace is not
shared", "result": "WARN", "details": "Containers running with
networking mode 'host':  k8s_POD_storage-provisioner_kube-system_ef960ef5-62c5-11e9-802f-08002719228f_0
k8s_POD_kube-proxy-xfln8_kube-system_ee70c4c3-62c5-11e9-802f-08002719228f_0 (truncated)",
"items":
["k8s_POD_storage-provisioner_kube-system_ef960ef5-62c5-11e9-802f-08002719228f_0","k8s_POD_kube-proxy-xfln8_kube-system_ee70c4c3-62c5-11e9-802f-08002719228f_0","(truncated)"]},
```

Signed-off-by: Mark Stemm <mark.stemm@gmail.com>
In version 3 compose has another [restart configuration](https://docs.docker.com/compose/compose-file/#restart_policy)
```
version: "3"
services:
  redis:
    image: redis:alpine
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
```
And this configuration doesn't make changes in `docker inspect`:
```
docker ps --quiet --all | xargs docker inspect --format '{{ .Id }}:RestartPolicyName={{ .HostConfig.RestartPolicy.Name }} MaximumRetryCount={{ .HostConfig.RestartPolicy.MaximumRetryCount }}'

34f93a53b8c:RestartPolicyName= MaximumRetryCount=0
d1bce816b2cj:RestartPolicyName= MaximumRetryCount=0
410e4cbfa0h:RestartPolicyName= MaximumRetryCount=0
91a65a03d2:RestartPolicyName= MaximumRetryCount=0
```
So **5.14** test is failed =\
The testing is, more or less, a manual operation today.
This consequence of lack of testing are inconsistent output, and more than once have simple code changes caused incorrect results.
Verification of tests have also been forgotten.

https://github.com/docker/docker-bench-security/pull/343
https://github.com/docker/docker-bench-security/pull/345
https://github.com/docker/docker-bench-security/pull/347
https://github.com/docker/docker-bench-security/issues/286#issuecomment-441127060



I am using ubuntu 16.04 with docker version
Docker version 18.06.1-ce, build e68fc7a

I have created a separate partition for docker still security check warns about 1.1.

Here is the output of docker info command
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 0
Server Version: 18.06.1-ce
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: false
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: bridge host macvlan null overlay
 Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e
runc version: 69663f0bd4b60df09991c08812a60108003fa340
init version: fec3683
Security Options:
 apparmor
 seccomp
  Profile: default
Kernel Version: 4.15.0-1025-azure
Operating System: Ubuntu 16.04.5 LTS
OSType: linux
Architecture: x86_64
CPUs: 4
Total Memory: 27.48GiB
Name: AZLXSPTAPTDEVAP01
ID: IM4B:T3UU:O5S3:AAPG:A7UX:5VKM:434G:SKQO:M4AE:MERS:MMTJ:JBLU
**Docker Root Dir: /datadrive/docker**
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
Labels:
Experimental: false
Insecure Registries:
 127.0.0.0/8
Live Restore Enabled: false

WARNING: No swap limit support
Currently https://hub.docker.com/r/docker/docker-bench-security/ only has a _latest_ tag. We use this image and ec7d8ce690bbd38b709b679d85857351c328db09 broke how we assert whether checks we want to succeed indeed do. Of course it was not hard to fix, but still it would be nice to be able to reference a specific version tag on docker hub.
The company I'm working with have been using docker-bench-security and docker-bench-test on Linux with great results. We're now heavily migrating a bunch of Windows apps across to Docker and it would be really useful if this tool could be used on Windows also. I know a lot of the *host* recommendations would not make sense, or would need to be modified to fit Windows. Is this something that's being planned?