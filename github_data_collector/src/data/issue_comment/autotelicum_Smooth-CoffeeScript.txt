I'm in favor of CoffeeScript and I'd like to share with my newbie friends in China the beauty and strength of CoffeeScript. I really appreciate your work, for this is exactly the book my friends needs to get to know about programming. May I translate it into zh-cn?

Under https://autotelicum.github.io/Smooth-CoffeeScript/interactive/interactive-coffeescript.html#part-v.-reference-and-index

There is a list on the bottom of aliases, it lists is and isn't as with double ==, which is false, it actually compiles to triple equals, which is the identity operator.

Note that I will need someone to re-run the script to create a new pdf.

in Chrome:

```
    badWords = ['ape', 'monkey', 'simian', 'gorilla', 'evolution']
--- pattern = new RegExp badWords.join('|'), 'i'
+++ pattern = new RegExp "/" + badWords.join('|') + "/", 'i'
or  pattern = new RegExp '"' + badWords.join('|') + '"', 'i'
    isAcceptable = (text) ->
      !pattern.test text

    show isAcceptable 'Mmmm, grapes.'
    show isAcceptable 'No more of that monkeybusiness, now.'
```

file: interactive-coffeescript.html
Exercise 18
Solution:

``` coffeescript
oldestCat = (data) ->
  oldest = null
  for name of data
    cat = data[name]
--- unless 'death' of cat
+++ unless 'death' in cat
      if oldest is null or oldest.birth > cat.birth
        oldest = cat
  oldest?.name
show oldestCat catData
```

Hi,

In the "addToSet" and "removeFromSet" pasted below that appear after Exercise 14, shouldn't the double dots ".." be triple dots "..." in order to avoid requesting an element that does not exist?

addToSet = (set, values) ->
  for i in [0..values.length]
    set[values[i]] = true

removeFromSet = (set, values) ->
  for i in [0..values.length]
    delete set[values[i]]

on http://autotelicum.github.com/Smooth-CoffeeScript/literate/partial.html, you have:

`partialFree = (func, a...) -> (b...) ->
  func (for arg in a then arg ?= b.shift())...`

this could be improved to include any remaining variables from b:

`partialFree = (func, a...) -> (b...) ->
  func (for arg in a then arg ?= b.shift())..., b...`

In fact, that's how I assumed it worked, and it took me a while to find my bug.

I believe the following paragraph, which appears shortly after Exercise 8 in "Functions" is misleading.

> Here is a special case that might surprise you:
> 
> ```
> varWhich = 'top-level'
> parentFunction = ->
>   varWhich = 'local'
>   childFunction = ->
>     show varWhich
>   childFunction
> child = parentFunction()
> child()
> 
> → local
> ```
> 
> parentFunction returns its internal function, and the code at the bottom calls this function. Even though parentFunction has finished executing at this point, the local environment where variable has the value 'local' still exists, and childFunction still uses it. This phenomenon is called closure.

If I understand correctly, this has nothing to do with closures.  Both the reference to varWhich in parentFunction and that in childFunction access (and modify) the global var directly.  Modifications made thereto are not limited to the local scope, since there is no varWhich in local scope:

```
varWhich = 'top-level'
aFunction = ->
  varWhich = 'local'
bFunction = ->
  show varWhich
aFunction()
bFunction()

→ local
```

or:

```
varWhich = 'top-level'
parentFunction = ->
  varWhich = 'local'
  childFunction = ->
    show varWhich
  childFunction
child = parentFunction()
varWhich = 'not a closure'
child()

→ not a closure
```

You can effect a closure using function parameters (as in the example which follows this one in the book):

```
varWhich = 'top-level'
parentFunction = ->
  varWhich = 'local'
  childFunction = (myVar) ->
    -> show myVar
  childFunction(varWhich)
child = parentFunction()
varWhich = 'not a closure'
child()

→ local
```

You could even give childFunction a parameter of the same name, although it's not a very good idea to do that in coffeescript.  IMO given coffeescript's scoping rules, the compiler shouldn't allow this:

```
varWhich = 'top-level'
parentFunction = ->
  varWhich = 'local'
  childFunction = (varWhich) ->
    -> show varWhich
  childFunction(varWhich)
child = parentFunction()
varWhich = 'not a closure'
child()

→ local
```

I believe there is an error in the algorithm for possibleRoutes. It can't handle routes that reach a dead end on the map. If you have this route: Point Teo->Puama->Mt Ootua->Hanapaoa, you're at a dead end. At this point the expression "_filter roadsFrom(end), notVisited" returns an empty array. That array is then mapped over with "continueRoute". From an ampty array the only element you can map over is "undefined", referencing the "to" property of, results in a runtime exception:
TypeError: Cannot read property 'length' of undefined.

I think the general idea of transforming a graph to a tree (which this example tries to achieve, I think) needs to apply some form of backtracking.

"The number above has 64 bits. Numbers in CoffeeScript always do."

That is not  true. ECMAScript specifies (according to every source i've read) 53 significant bits and nowhere does it ever (in my last reading) specify 64 bit precision.
