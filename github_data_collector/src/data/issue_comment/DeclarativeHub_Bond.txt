
This PR proposes to update our Xcode project to use Swift Packages, rather than Carthage-compiled frameworks. This has a few knock-on effects:

- It should resolve the build issues we've been seeing when adding this project to the Swift Source Compatibility Suite.
- It will require developers to use Xcode 11.x or a newer version.
- The Playgrounds still use the Carthage-compiled frameworks - I couldn't see a way to get these to use SPM-provided packages.

I've also raised the Swift tools version to Swift 5.1. It's not required, but it's implied by requiring Xcode 11.
Hi!

Love ReactiveKit + Bond, but I'm having trouble implementing drag to reorder in a table view backed by a MutableObservableArray. I tried using the proposed solution in #366 — using `tableView.reactive.dataSource.forwardTo = self` — but the reorderControl does not appear. I've also noticed that declaring that data source proxy after `mockData.bind(to: tableView) ...`causes no cells to load at all.

It seems that Bond 7 brought significant changes to data sources, could that have reintroduced the issue resolved by `v5.4.4`?


Hi,

I have this property in my viewModel, that change the value of my UIImage if my method returns true of false
```
var image: Observable<UIImage?> {
        if musicService.isPlaying() {
            return Observable<UIImage?>(UIImage(named: "ic_pause"))
        } else {
            return Observable<UIImage?>(UIImage(named: "ic_play"))
        }
    }
```
Want I want is to be able to update the value of my property and notify its observers that the value changed (or didn't change) without having to `image.ObserveNext { }` cause I don't have any additional processing to do with the closure.

Example:

```
func foo() {
// Do something
// image.UPDATE()
}
```

So basically I want to know if there is another method that I can call, to pass again in my property, return the right image and notify all the observers
I'd like to be able to bind to an ObservableArray while only receiving updates on the first n items of that array. Much like I would use [prefix(_:)](https://developer.apple.com/documentation/swift/array/1689487-prefix) on an Array.

For example:

```
reviews.prefixCollection(5).bind(to: ...)
```

Is there any way I can achieve this effect without using `filterCollection` and looking up the index in the closure?
I am trying to create a `MutableObservableArray2D` so that I can bind it with a table view which has different sections.
I can't seem to get it right.
Here is my code:

```
//Properties
let upcomingTrips = MutableObservableArray2D<String, TripListModel>(Array2D())
-----

let trips = [TripListModel](JSONArray: data["result"] as! [[String : Any]])
self.upcomingTrips.value = Array2D<String, TripListModel>(sectionsWithItems: [(Dictionary(grouping: trips, by: { $0.time }))] )
```

First I am mapping API response to an array on objects and then grouping them according to date (string) but I cant assign it to instance of `MutableObservableArray2D`.

What am I doing wrong here?
batchUpdate causes the crashes on both UITAbleView and UICollectionView:

```swift
    func testBatchUpdates12() {
        array.batchUpdate { (array) in
            array[2] = 4
            array.remove(at: 1)
        }
    }
```
the crucial thing here is **array[2] = 4**
Add testing target for MacOS.
Implement test for NSTableView + SignalProtocol + diff()
Fix issue with excessive reloadData in NSTableView + SignalProtocol + diff()
Working on collections/changesets I found a possible issue:

 ```swift
                case .next(let element):
                    let newCollection = element
                    if let collection = collection {
                        let diff = generateDiff(collection, newCollection)
                        observer.receive(OrderedCollectionChangeset(collection: newCollection, patch: [], diff: diff))
                    } else {
                        observer.receive(OrderedCollectionChangeset(collection: newCollection, patch: []))
                    }
                    collection = newCollection
```

Line:
```
observer.receive(OrderedCollectionChangeset(collection: newCollection, patch: [], diff: diff))
```

I think this is a mistake. You shouldn't pass **patch** option there.
Then this patch will be used here:
```swift
 open func apply(changeset: Changeset) {
        guard let tableView = tableView else { return }
        let patch = changeset.patch
        if patch.isEmpty {
            collection = clone(changeset.collection)
            tableView.reloadData()
        } else {
            tableView.beginUpdates()
            patch.forEach(apply)
            tableView.endUpdates()
        }
    }
```
And as far as it's empty it always reloadData.

I've had a bit of a poke at this one, but I can't get the moons to align to let me apply sorting to `MutableObservableArray2D`. 

I was hoping to be able to sort the nodes at the current level of the tree (so non-recursively). 