If the folder specified in -OutputPath doesn't exist prior to running Start-DSCEAscan, the scan will run and will fail when attempting to save the output, losing all of your data.

The CmdLet should gracefully check for the existence of the folder *before* starting any scans, or perhaps go ahead and create one if it doesn't already exist.

`PS C:\Users\user\Desktop> Start-DSCEAscan -MofFile .\localhost.mof -ComputerName COMPUTER -OutputPath .\DSCEA -Verbose
VERBOSE: DSCEA Scan has started
VERBOSE: Connectivity testing complete
VERBOSE: Initiating DSCEA scan on COMPUTER
VERBOSE: Processing Compliance Testing...
VERBOSE: Total Scan Time: 00:23:55
Export-Clixml : Could not find a part of the path 'C:\Users\user\Desktop\DSCEA\results.20190618-1508-48.xml'.
At C:\Program Files\WindowsPowerShell\Modules\DSCEA\1.2.0.0\Functions\Start-DSCEAscan.ps1:383 char:16
+ ...  $results | Export-Clixml -Path (Join-Path  -Path $OutputPath -Child  ...
+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Clixml], DirectoryNotFoundException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportClixmlCommand`

Problem: A detailed report only contains Noncompliant settings. If the report is empty you expect all servers to be compliant. But if your scan failed for some reason and you automated the process you will not now weather you are compliant or your scan has errors.

Solution: Include the state of the input file in the report. If the XML is empty or has bad data.
Hi,

While browsing the code I've noticed the function Repair-DSCEngine which is actually killing all DSC engine host processes. And not only that, but it's being called 10 times in a loop from 2 places, which is kind of weird to see without understanding the context.

Can you guys please add comments to this function explaining why is this actually necessary ?
Also I wonder what happens if there is a periodic DSC config running and you are killing the DSC engine ?
For example I have a web server which is syncing contents from a DFS share every few minutes.
Depending on the size of the content, network bandwidth, etc this can take some time.

Ideally an analyzer would be free from side affects, so I just want to make sure I understand how safe is it to kill the DSC engine's process / what are the potential side effects and in general why is this necessary ? 

```
for ($i=1; $i -lt 10; $i++) { 
    Repair-DSCEngine -ComputerName $computer -ErrorAction SilentlyContinue
}
```

```
do {
    $processID = Get-Process -Id $dscProcess
    $processID | Stop-Process -Force}
while ($processID.ProcessName -match "WmiPrvSE")
```
Thanks!
When running with CIMSession the credentials are not passed to the PSSession which is used to copy the modules.
The line below doesn't get the credentials so it attempts using the current users credential.
https://github.com/Microsoft/DSCEA/blob/92401ff974b7934448aa9abd392064ec44043f65/functions/Start-DSCEAscan.ps1#L178

  
Pull Requests to Master
- [ ] Ensure pull requests to dev are heavily reviewed, tested and scrutinized before approving
- [ ] Run DSCEA through PowerShell Script Analyzer
- [ ] Pester and manual testing completed
- [ ] Update version number in DSCEA.psd1
- [ ] Update documentation with new release notes, link in sidebar pointing to the new page
- [ ] Perform a release on GitHub to get a snapshot of the project added to the releases section with zip file
- [ ] PowerShell gallery upload - download zip of master, remove unwanted things like docs folder, upload to ps gallery
- [ ] If needed, rebase dev on master so it shows all changes have been rolled into master as squash merge is likely to be used

Pull Requests to Dev
- [ ] Check to see if PowerShell shows any errors when running Import-Module DSCEA
- [ ] Review any lingering issues that might still be open and close them if the new release fixes the issues

Update this function with an external call to Get-Date instead of using StartDate, this is needed for things like OMS where we look to pull in just the most recent scan in a dashboard.  Review external PowerShell version check script for example.
Hi

I'm wondering if there was a reason you chose the casing for functions as you did? The two obvious "issues" I see are the following:

* DSC used instead of Dsc, as seen in PSDesiredStateConfiguration module
* Use of a lower case letter for the first word following DSCEA, e.g. Start-DSCEAscan

Both of these diverge from the [PowerShell Style Guide](https://github.com/PoshCode/PowerShellPracticeAndStyle/blob/master/Style%20Guide/Code%20Layout%20and%20Formatting.md#capitalization-conventions) and the [.Net Framework Capitalization Conventions](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions).
Hi Raplh and Keith and sorry for my Funny English.
During my test, I have a little problem with powershell version.
Not all powershell 5 versions are compatible with DSCEA.
For example, the 5.0.10018.0 version does not accept the "Test-DscConfiguration-ReferenceConfiguration". And DSCEA does not work (All configurations are False).
I could not test the next BUILD (5.0.10586.51) but it's Ok with the 5.0.10586.117 version.
During my tests, I used the same Framework version (4.0.30319.42000).

I have modify the Start-DSCEAscan functions.
I replaced line 279 and 280 by :
$runlist = ($psjobresults | Where-Object {$_.Major -ge 5 -and $_.Build -gt 10018}).PSComputername
$versionerrorlist = ($psjobresults | Where-Object {($.Major -lt 5) -or ($.Major -ge 5 -and $_.Build -le 10018)}).PSComputername
And the line 292
Write-Warning "The following systems cannot be scanned as they are not running the good Powershell Version (Greater Than 5.0.10018).  Please check '$versionerrorlist' for details"
![dscea](https://user-images.githubusercontent.com/28751337/26969071-b5e4a10c-4d04-11e7-80f1-c548d1aaf6da.png)
All it's Ok for my environment. If you think this is a good solution, I let you use with pleasure  ;)

Regards
Thierry

This looks like a great addition to DSC Tooling, however I have some concerns. Judging by the examples it looks like DSCEA assumes all servers share the same MOF file and they only have one MOF.

In our environment we have on average 11 MOF files (partial configurations), 19 in some cases, per server. On top of that, each MOF file is unique per server. Are there any plans to support this type of DSC usage or should we be creating some tooling around the tooling to generate reports?