When adding `up-target="..."` to a form, UnPoly will POST it with content type "multipart/form-data", also if `enctype="application/x-www-form-urlencoded"` is declared on the form.
Clients want custom scrollbars for their website, using css such as : ::-webkit-scrollbar / ::-webkit-scrollbar-track / ::-webkit-scrollbar-thumb

After adding the code for custom scrollbars within my main css file, if I close the opened modal, unpoly seems to add "overflow-y: hidden" to the html tag on Chrome browser

might be related to this? https://makandracards.com/makandra/55801-does-html-or-body-scroll-the-page (from https://unpoly.com/changes/0.60.0)
One of the in Rails UJS I still use in almost every "Unpoly" project is the `data-disable-with` functionality when submitting a form. Would it be an idea to have such functionality in the core of Unpoly as well? Maybe something like `up-disable-with`. I could make even a PR for it, if you like. 
Given this example:
```html
<form method="post" action="/my/action" up-target=".post">
  <button type"submit">Save</button>
  <button type"submit" name="my-param" value="my-value">Do something else</button>
</form>
```
On most systems, submitting the form by pressing the second button sends a POST request to `/my/action` with the parameters ` {'my-param': 'my-value'}`.
On Mac devices (Safari or Firefox), however, always the value of the first submit button is part of the Params hash. Chrome on Mac works fine.

Digging in Unpoly's code, I found that the method [submittingButton(form)](https://github.com/unpoly/unpoly/blob/cf91465eb9081256a69be4439832faefd1547013/lib/assets/javascripts/unpoly/form.coffee.erb#L92) in this case contains the wrong submit button:

```javascript
  submittingButton = (form) ->
    selector = submitButtonSelector()
    focusedElement = document.activeElement
    if focusedElement && e.matches(focusedElement, selector) && form.contains(focusedElement)
      return focusedElement
    else
      # If no button is focused, we assume the first button in the form.
      return e.first(form, selector)
```

The condition for the `if` clause matches in Chrome but fails in Safari or FF on a Mac: `focusedElement` is not the targeted button, but the HTML element. The property `document.activeElement` works only reliably for `input[type="text"]` elements. The [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/activeElement) states:

> Which elements are focusable varies depending on the platform and the browser's current configuration. For example, on **macOS systems, elements that aren't text input elements are not typically focusable by default**.

I am not sure what would be the best solution to this issue. The browser market share of Safari is around 15%, so we might need to work around this.
Here's a minimal example, in the console one can see that the text input triggers autosubmit while the reset input clears the text input but does not trigger autosubmit.

https://codepen.io/stefanfisk/pen/JjjwGdB

My use case was for clearing a filter form without additional JS, but as a workaround I'm currently using a small snippet to autosubmit on reset.
I've just started using Unpoly for a project, and a few weeks into it everything feels great as far as the client experience goes! I do however miss hot reloading like you have in React and others. I've been reading the API docs to figure out how to implement the browser side of it all, but so far I'm not quite getting if/how it could be done. Any pointers as to proceed would be much appreciated!

Here are two questions that I have on the top of my head:

1. Is it possible to request a reload of everything, even the body, in a coordinated manner?
2. Does Unpoly handle changes to `<head>` at all?

I'm really shocked because I come from Turbolinks and found Unpoly by accident: WONDERFUL! CONGRATULATIONS!

Just one question (coming from Turbolinks): is there a way to load the cached page (just like it happens default way) but check in "background" in parallel for new content on that page and replace the content with new one if available?

From Turbolinks docs (https://github.com/turbolinks/turbolinks/#understanding-caching):

>... during standard navigation (via Application Visits), Turbolinks will immediately restore the page from cache and display it as a preview while simultaneously loading a fresh copy from the network. This gives the illusion of instantaneous page loads for frequently accessed locations.
Greetings,
Whenever an input field with the [form attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#form) is used, I'd expect `up-autosubmit` to behave the same for out-of-the-form input fields.
So, if a field out of the form but with form attribute set changes, I'd expect the form to autosubmit (or an `up-validate` to trigger a validation).

From my understanding, the framework doesn't consider these type of fields at all.
Using `up-validate` on form inputs seems to break focus in at least two common situations:

1. With `up.form.config.validateTargets = ['form &']`, moving from first field to the next using <kbd>↹ Tab</kbd> will switch focus and then lose it once the validation results arrive. Can be worked around by using a more narrow target.

2. Regardless of validation target, pressing <kbd>↓</kbd> (down) on a `<select>` will switch to the next option and then lose focus once the validation results arrive. I have no idea how to work around this.

Both issues manifest themselves at least in Firefox and Chromium on current Fedora.
I have user menu that lives inside a drawer. The menu contains an "Edit profile" link. This links is `[up-instant]` and opens a modal.

![unpoly-issue](https://user-images.githubusercontent.com/115590/56361165-eee70280-61e6-11e9-838b-0c7b984cc21b.png)

However, that modal will not open consistently. Depending on the length of the click, sometimes the drawer will close, but the modal will never appear.

There is obviously the easy workaround of not using `[up-instant]`, so this is not a very serious issue for me.