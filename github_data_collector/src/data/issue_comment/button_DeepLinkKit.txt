When submitting builds to App Store, built with carthage and Xcode Version 11.2.1 (11B500) toolchain, I get this error in response:

> ERROR ITMS-90362: "Invalid Info.plist value. The value for the key 'MinimumOSVersion' in bundle MeetHubDev.app/Frameworks/DeepLinkKit.framework is invalid. The minimum value is 8.0"

https://github.com/button/DeepLinkKit/issues/159

This PR sets IPHONEOS_DEPLOYMENT_TARGET to 8.0, which affects the `MinimumOSVersion` plist value distributed with compiled framework.

With this update, I no longer see the App Store Connect submission error.
When submitting builds to App Store, built with `carthage` and Xcode Version 11.2.1 (11B500) toolchain, I get this error in response:

> ERROR ITMS-90362: "Invalid Info.plist value. The value for the key 'MinimumOSVersion' in bundle MeetHubDev.app/Frameworks/DeepLinkKit.framework is invalid. The minimum value is 8.0"

Does it mean that DeepLinkKit.framework's `IPHONEOS_DEPLOYMENT_TARGET` needs to be updated now to 8.0 (like here https://github.com/button/DeepLinkKit/pull/87), rather than 7.1 (set in https://github.com/button/DeepLinkKit/pull/156)?
Hey, 
I'm trying to use this pattern:
"(?:www\.)?shop\.example\.com/collections/:handle([^/]+)"

to match these urls:

https://shop.example.com/collections/new-arrivals
https://www.shop.example.com/collections/fall-2018

but not this url:
https://othersubdomain.shop.example.com/collections/new-arrivals

Unfortunately, if use a non-capturing group, somewhere in the pattern cleaning process, the ":" character confuses the framework. 
If I use a normal capturing group: "(www\.)?shop\.example\.com/collections/:handle([^/]+)" still doesn't work because it gets confused with the _handle_ parameter

As stated, I got a wrong route parameter when my route handler has alternation.

#### Config
Route handler: `/?(pathA|pathB|pathC)/path2/:number/?`
URL test: `someApp://pathA/path2/123456789`

#### Result
routeParameters[@"number"] = pathA

Do I get my configuration wrong or is it just a bug?
Let me know if you need more info to investigate this.

URL Example: https://www.getinapp.com.br/#!/restaurant/sao-paulo/el-tranvia-itaim-bibi

----------------------------------------------------------------
Test 1:

```objective-c
self.router[@"www.getinapp.com.br/:path(.*)"] = ^(DPLDeepLink *link) {
    // Function is called but is not recognizing the PATH (check LOG).
    NSLog(@"%@", link);
};
```

LOG:
```objective-c
<DPLDeepLink 0x170232600
	 URL: "https://www.getinapp.com.br/#!/restaurant/sao-paulo/el-tranvia-itaim-bibi"
	 queryParameters: "{
}"
	 routeParameters: "{
    path = "";
}"
	 callbackURL: "(null)"
>
```

----------------------------------------------------------------
Test 2:

```objective-c
self.router[@"www.getinapp.com.br/#!/restaurant/:city(.*)/:restaurant(.*)"] = ^(DPLDeepLink *link) {
   // Function is never called.
};
```
`app[-]*[a-zA-Z]*.(?:nextev|nio).com/content/:contentId`

This is my regular expression for march url, but after method `stringByRemovingNamedGroupsFromString` ,  it's modifiedStr is `^app[-]*[a-zA-Z]*.(?|nio).com/content/([^/]+)$`. 

Using `1.2.1`, I’m noticing an issue with routes that consist of a single path component failing to be handled when a trailing slash is included in the URL. This issue is not present when there is more than one path component in the registered route.

## Example

In `Info.plist`, I have the following scheme, `test`, set up so that my test app opens from Mobile Safari for URLs that begin with `test://`.

<img width="391" alt="screen shot 2016-11-08 at 4 16 51 pm" src="https://cloud.githubusercontent.com/assets/7883805/20117530/04ac2112-a5cf-11e6-91d1-7add4242ac07.png">

This is the entirety of `AppDelegate.m` in an otherwise empty test project, in which I demonstrate the issue:

```objc
#import "AppDelegate.h"
#import <DeepLinkKit/DeepLinkKit.h>

@interface AppDelegate ()

@property (nonatomic) DPLDeepLinkRouter *router;

@end

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    self.router = [[DPLDeepLinkRouter alloc] init];
    
    self.router[@"search"] = ^(DPLDeepLink *link) {
        // Called for `test://search`
        // Not called for `test://search/` <-- THE ISSUE
        NSLog(@"Handled Search Link");
    };
    
    self.router[@"settings/about"] = ^(DPLDeepLink *link) {
        // Called for `test://settings/about`
        // Called for `test://settings/about/`
        NSLog(@"Handled settings/about Link");
    };
    
    return YES;
}

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {
    return [self.router handleURL:url withCompletion:NULL];
}

@end
```

In summary, the issue shown in this example is that when attempting to open `test://search/` in Mobile Safari the handler that logs the message "Handled Search Link" is not called.

## Workaround

There is a workaround to the issue, and that is to specify `/?` to the end of the registered route to allow for an _optional_ trailing slash. In the example above, that’d change the registration of `search` to be:

```objc
self.router[@"search/?"] = ^(DPLDeepLink *link) {
    // Called for `test://search`
    // Called for `test://search/`
    NSLog(@"Handled Search Link");
};
```

However, this is not ideal as it requires treating routes with different numbers of components differently.
The method `- (void)placeTargetViewController:(UIViewController *)targetViewController
           inNavigationController:(UINavigationController *)navigationController` in  `DPLRouteHandler.m`prevents having multiple instances of the same view controller type in a navigation stack.   It does that by popping all view controllers above a certain type of controller, and then replacing that controller with the new one.

Doing this messes up the navigation stack for the user when it comes to the back button.  If they are looking at a controller, then they hit a deep link, and then hit back, they are not where they started before they hit the deep link.

Why not just always present the targetViewController() in top, or at least have an option to not wipe the navigation stack before presenting the targetViewController?

Is it possible to use a regex in the scheme? Specifically to match:
`one://www.host.com/callback`
and
`two://www.host.com/callback`
but not
`three://www.host.com/callback`

I expected this to work but it doesn't:
`(one|two)://www.host.com/callback` 

There seems to be a commit that added this but no mention in the docs.

Apparently `@"".stringByRemovingPercentEncoding` returns `nil` on iOS7. The following lines:

```
NSString *key = [[pairs firstObject] DPL_stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
paramsDict[key] = @"";
```

crash for e.g. `customscheme:/whatever?#` for obvious reasons.
