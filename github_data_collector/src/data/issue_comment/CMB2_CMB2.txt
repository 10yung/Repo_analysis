## Description

General once over of the `textarea_code` field to fix all logged issues as well as a couple of unlogged limitations.

1. Fixes #571 
2. Fixes #1194 
3. Support fields with "/" in the name.
4. Fix field styling and saving with Gutenberg is active.


**Is your feature request related to a problem? Please describe.**
I have been working on a custom post type that has different sections for different departments (e.g.: Sales, Marketing, Inventory, etc.) within the single post and I need each section to be locked after each manager/employee has entered their information. **All of this information is set up using CMB2 Fields.**

**Describe the solution you'd like**
I am picturing a signature field (ideally a text field for the person to type their name) and a date picker field (to select the date the manger/employee is signing that section) that could be assigned to a section of fields. After filling out their fields, signing, and dating their section (entering their name in the signature field and selecting a date), they would update the post and it would lock their fields and signature from being edited by anyone else. 

The process would look something like this:

- When creating fields, you could assign them to a section. 
- Each section would require a text field to act as a signature box. 
- Each section would require a date field next to the signature box to select the date of signature. 
- If the signature field & date picker had input when the post is updated, it would lock itself and all of the fields in its section from being editable. **I am open to ideas about how this would work. It might be easier to lock the section based on the current user that is signed in as it would be assumed that all users would be required to have an account on the site.**
- I would think it would also need some feature to undo accidental submissions. Maybe any administrators on the site could unlock a locked section if a revision was needed?

**Describe alternatives you've considered**
I have spent significant time looking at other plugins and current features that CMB2 offers, and nothing has what I am looking for. I am open to all opinions and suggestions on how we could get this into CMB2. I think it would be a killer feature with a significant number of applications.

I am open to all ideas about how we can get something like this in the works!

**Additional context**
Add any other context or screenshots about the feature request here.

I have a custom repeatable select element in a sortable group. When I have multiple groups with a different number of select options added in each group and I change the order of those groups then some selected options don't move. For example if group 1 has 2 select options set and group 2 has 5 options set, then after changing order group 2 (now in the first position) has 2 of the options and group 1 (now in second position) has 5 options set (3rd option is empty and options 4-5 are same as in group 2 before changing group order).

Wordpress version 5.3.2
CMB2 version 2.6.0

## Steps to reproduce (Not currently tested on the [`develop`] branch):
1. Add multiple groups in metabox
2. Add different number of repeatable select options in each group
3. Move a group up or down.
4. See that only some of the filled in select options moved with the group.

## Screenshots
### Before changing group order:
![before reorder](https://user-images.githubusercontent.com/2932646/72061046-c1466a00-32dd-11ea-898e-91e34bd16a8a.jpg)
### After changing group order:
![after reorder](https://user-images.githubusercontent.com/2932646/72061098-d9b68480-32dd-11ea-8776-e89710964bb1.jpg)

## CMB2 Field Registration Code:

```php
/**
 * Define sortable group metabox and field configurations.
 */
function page_sortable_group_metabox() {
    /**
	 * Initiate the metabox
	 */
	$sortable_group_metabox = new_cmb2_box([
		'id'            => 'sortable-group-metabox',
		'title'         => 'Sortable Group Metabox',
		'object_types'  => ['page'], // Post type
		'context'       => 'normal',
		'priority'      => 'high',
		'show_names'    => true, // Show field names on the left
    ]);

    $sortable_group = $sortable_group_metabox->add_field([
        'id'   => 'sortable-group',
        'type' => 'group',
        'options'     => [
            'group_title'       => __('Sortable group {#}'),
            'add_button'        => __('Add group'),
            'remove_button'     => __('Delete group'),
            'sortable'          => true,
        ],
    ]);

    // Get custom taxonomy terms for select options
    $regular_select = get_terms([
        'taxonomy' => 'custom_taxonomy',
        'hide_empty' => true,
    ]);

    $regular_select_options = [];
    
    // Format custom taxonomy data for select
    foreach ($regular_select as $select_item) {
        $regular_select_options[$select_item->term_id] = $select_item->name;
    }

    $sortable_group_metabox->add_group_field($sortable_group, [
        'name'     => __('Regular select'),
        'id'       => 'group-category',
        'taxonomy' => 'custom_taxonomy', //Enter Taxonomy Slug
        'type'     => 'select',
        'options'  => $regular_select_options,
    ]);

    $sortable_group_metabox->add_group_field($sortable_group, [
        'name'             =>  __('Repeatable select'),
        'id'               => 'group-items',
        'type'             => 'select',
        'show_option_none' => true,
        'repeatable'       => true,
        'sortable'          => true,
        'default'          => '',
        'options'          => [],
    ]);
}
add_action('cmb2_admin_init', 'page_sortable_group_metabox');

/**
 * Create optgroups for repeatable select
 *
 */
function cmb_repeatable_select_opt_groups($args, $defaults, $field_object, $field_types_object) {
    // Only do this for the repeatable select
	if (strpos($field_types_object->_id(), 'group-items') == false) {
		return $args;
    }

    // Get custom post type posts for select options
    $repeatable_select_items = get_posts([
        'post_type' => 'custom_post_type',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'orderby' => 'menu_order', 
        'order' => 'ASC',
        'suppress_filters' => false,
    ]);

    $repeatable_select_options = [];
    
    // Group options by custom taxonomy name
    foreach ($repeatable_select_items as $select_item) {
        $option_taxonomy = get_the_terms($select_item->ID, 'custom_taxonomy');

        if ($option_taxonomy && count($option_taxonomy) > 0) {
            $repeatable_select_options[$option_taxonomy[0]->name][$select_item->ID] = $select_item->post_title;
        } else {
            $repeatable_select_options[''][$select_item->ID] = $select_item->post_title;
        }
    }

    // Sort groups alphabetically
    ksort($repeatable_select_options);
    
    // Defaults
    $saved_value = $field_object->escaped_value();
	$value       = $saved_value ? $saved_value : $field_object->args('default');
	$repeatable_select_options_string = '';
	$repeatable_select_options_string .= $field_types_object->select_option([
		'label'		=> __('None selected', 'default'),
		'value'		=> '',
		'checked'	=> !$value
    ]);

    // Create optgroups
	foreach ($repeatable_select_options as $group_label => $group) {
        if (strlen($group_label) > 0) {
            $repeatable_select_options_string .= '<optgroup label="'. $group_label .'">';
        }
        
		foreach ($group as $key => $label) {
			$repeatable_select_options_string .= $field_types_object->select_option([
				'label'		=> $label,
				'value'		=> $key,
				'checked'	=> $value == $key
            ]);
		}
        
        if (strlen($group_label) > 0) {
            $repeatable_select_options_string .= '</optgroup>';
        }
    }

	// Replace select options value
    $defaults['options'] = $repeatable_select_options_string;
    
	return $defaults;
}
add_filter('cmb2_select_attributes', 'cmb_repeatable_select_opt_groups', 10, 4);
```

## My Environment
Tested with Google Chrome on multiple Windows 10 and OS X computers.
Props to @rubengc #995 

Complements #1312 

<!--- Provide a general summary of your changes in the Title above -->

## Description
Add support for multiple attribute fixing the name adding [] when there isn't already defined.

## Motivation and Context
Motivation to provide CMB2 with the multiple feature out of box easily.
Fixes #995 

## Risk Level
admin-only

## Testing procedure
You can test by adding the 'multiple' attribute to a select field type

## Types of changes
**Bug fix (non-breaking change which fixes an issue)**

## Checklist:
<!--- Go over all the following points, and put an x in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] My code follows the code style of this project.
- [x] My code and pull requests meets the [Contributing guidelines](https://github.com/CMB2/CMB2/blob/develop/CONTRIBUTING.md).
Props to @rubengc #995 

Didn't found this in a PR format so created this one.

Please advise.

<!--- Provide a general summary of your changes in the Title above -->

## Description
Add support for attribute multiple, showing correctly the multiple elements saved on database

## Motivation and Context
Motivation to provide CMB2 with the multiple feature out of box easily.
Fixes #995 

## Risk Level
admin-only

## Testing procedure
You can test by adding the 'multiple' attribute to a select field type

## Types of changes
**Bug fix (non-breaking change which fixes an issue)**

## Checklist:
<!--- Go over all the following points, and put an x in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] My code follows the code style of this project.
- [x] My code and pull requests meets the [Contributing guidelines](https://github.com/CMB2/CMB2/blob/develop/CONTRIBUTING.md).



[It was announced on make.wordpress.org](https://make.wordpress.org/core/2019/10/15/report-wp-5-3-admin-css-changes-tested-against-top-20-plugins/) that there are some significant CSS changes coming in 5.3, specifically regarding form styling in an effort to make the admin more accessible. They have 3 specific suggestions regarding making your plugin styles more compatible:

> - remove any fixed heights: flexible heights are the WordPress recommended standard (and one of the main goals of the Admin CSS changes)
> - remove any custom top and bottom padding values
> - remove any custom line-height values

I testing my plugin that uses CMB2 for its options panel and while it's not "broken," the text inputs are a bit too tall, and I imagine there may be a few other imperfections.

I just wanted to put this out there. If I can find some time, I might even be willing to see about a PR myself. Does anyone have any boilerplate code laying around that implements all the fields in various contexts?


<!--- Provide a general summary of your changes in the Title above -->

## Description
<!--- Describe your changes in detail -->

## Motivation and Context
<!--- Why is this change required? What problem does it solve? -->
<!--- If it fixes an open issue, please link to the issue here. -->
Fixes #1309.

## Risk Level
<!--- Document the potential risks for this PR, -->
<!--- E.g. admin-only = minimal risk, or major user feature = high risk -->

## Testing procedure
<!--- Please describe in detail how you tested your changes. -->
<!--- Include details of your testing environment, and the tests you ran to -->
<!--- see how your change affects other areas of the code, etc. -->

## Types of changes
<!--- What types of changes does your code introduce? Remove those that don't apply: -->
- **Bug fix (non-breaking change which fixes an issue)**
- **New feature (non-breaking change which adds functionality)**
- **Breaking change (fix or feature that would cause existing functionality to change)**

## Checklist:
<!--- Go over all the following points, and put an x in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [ ] My code follows the code style of this project.
- [ ] My code and pull requests meets the [Contributing guidelines](https://github.com/CMB2/CMB2/blob/develop/CONTRIBUTING.md).

## Screenshots
<!--- Provide screenshots if possible -->


## Expected Behavior:
<!--- If you're suggesting a change/improvement, tell us how it should work -->

Add an option to set a callback function for determine whether the group field should be closed or not.  Callback function should return **true** or **false**.

## Actual Behavior:
<!--- If suggesting a change/improvement, explain the difference from current behavior -->

Currently there is an option to set a **closed** parameter to true or false to set the group field to be open or closed upon rendering, but no way to dynamically determine if a group should be open or closed.

## Possible Solution
<!--- Not required, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->
See attached pull request. I apologize, I am not sure how to update tests.


## Use Case:
I have a number of group fields which the user may enter information for or leave empty. On editing the form, I'd like to have the groups which have information entered to be rendered open by default, and the groups which are blank be rendered closed by default.  Being able to set a callback rather than a static true/false made this simple.

This commit - https://github.com/CMB2/CMB2/commit/7bb887c8fc89cb76570433b436e3d6ca914ebcf9 - seems to have introduced an issue with the character counter width. The problem seems to be this line:

https://github.com/CMB2/CMB2/blob/develop/js/cmb2-char-counter.js#L49

The widths in my testing are all way too narrow to see the actual count.

Perhaps something to do with the styling on the site I'm testing it on. Hard to tell, but I'd imagine the easiest approach is to simply remove this line - better too wide than not wide enough. Or add an option to disable it.
This PR fixes the issue with CPT field values being empty.

## Description
<!--- Describe your changes in detail -->

## Motivation and Context
Fixes #1304.

## Risk Level
No risk :)

## Types of changes
- **Bug fix (non-breaking change which fixes an issue)**

## Checklist:
- [x] My code follows the code style of this project.
- [x] My code and pull requests meets the [Contributing guidelines](https://github.com/CMB2/CMB2/blob/develop/CONTRIBUTING.md).
