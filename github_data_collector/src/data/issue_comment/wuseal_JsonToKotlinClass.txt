As we already have a library for the user to generate kotlin data class codes instead of only have to use the IDE plugin, Now we'd better provide a sample project to show users how to use the library easily. Here some required points:
* The sample project should be contained in this project for easy maintains.
* The sample project could write in Kotlin as this library always for Kotlin programmer
* Add the compile & build script into CI/CD(Travis) to ensure the Environment of sample project always works fine 
* Demo code at least show the user the basic function of the library(All library options are default)
PR regarding #128 
Fix #265 
I've tried using the Library version but i can't get it to properly import or build.

First I tried importing the distributed jar file that you have in the repository, but that does not seem to work for neither intellij nor maven.

Building the jar myself solved the import problems in intellij. However when calling `JsonToKotlinBuilder` i get the following error: 
`java.lang.NoClassDefFoundError: wu/seal/jsontokotlin/test/TestConfig` 

I'm not that familiar with gradle myself but it seems that the library does not include the required packages from the parent project.

Any hints on how to proceed?

`data` classes provides `hashCode()`, `equals()`, `toString()`, `componentN()` and `copy()`. All these functions are not necessary to a DTO and thus `data` modifier must be optional.
![图片](https://user-images.githubusercontent.com/8476579/69227792-676ad300-0bbd-11ea-8882-70f3887e83ca.png)
![图片](https://user-images.githubusercontent.com/8476579/69227849-810c1a80-0bbd-11ea-9e4f-71c676972d52.png)

![image](https://user-images.githubusercontent.com/9211902/68086870-210e3800-fe8b-11e9-851e-7eee1d72c361.png)
As shown above, `@Optional` may need to be removed
My `~/.docker/config.json` looks similar to this:
```
{
	"auths": {
		"containers.example.io": {},
		"https://containers.example.io": {
			"auth": "ZXhhbXBsZQo="
		}
	},
	"HttpHeaders": {
		"User-Agent": "Docker-Client/19.03.2 (darwin)"
	},
	"credsStore": "desktop"
}
```
 .. but that gives me silly classes within `"auths"`, like this:
```
data class DockerConfig(
    val auths: Auths,
    val HttpHeaders: HttpHeaders,
    val credsStore: String
)

data class Auths(
    val containers.example.io: Containersexampleio,
    val https://containers.example.io: HttpsContainersexampleio
)

class Containersexampleio(
)

data class HttpsContainersexampleio(
    val auth: String
)

data class HttpHeaders(
    val User-Agent: String
)
```

How would you suggest making data classes that properly parses different keys within `"auths"`?  I guess preferrabbly it should be a `Map<String, Auth>` of some sort.    The same thing applies to `"HttpHeaders"` (`Map<String, String>`).

I usually use `com.fasterxml.jackson.module.kotlin.jacksonObjectMapper()` to parse my json files.

Error JSON:
```json
[
  "I'm outside",
  "I'm here",
  "I can't find your house",
  "Im coming",
  "Be there soon"
]
```