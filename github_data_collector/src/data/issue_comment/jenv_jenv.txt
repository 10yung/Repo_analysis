I am currently facing this issue where I have followed the instructions to setup my jenv but I'm runbning into this error:

`[ERROR]	JAVA_HOME variable already set, scripts that use it directly could not use java version set by jenv
[ERROR]	Java binary in path is not in the jenv shims.
[ERROR]	Please check your path, or try using /path/to/java/home is not a valid path to java installation.
	PATH : /usr/local/Cellar/jenv/0.5.2/libexec/libexec:/Users/--/.nvm/versions/node/v10.17.0/bin:/Users/--/.nodenv/shims:/opt/apache-maven-3.6.3/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/apache-maven-3.6.3/bin:/usr/local/apache-maven-3.6.3/bin
[ERROR]	Jenv is not loaded in your zsh
[ERROR]	To fix : 	cat eval "$(jenv init -)" >> /Users/--/.zshrc`

I've ran the command `echo 'eval "$(jenv init -)"' >> ~/.bash_profile` but that also doesn't seem to resolve my issue. 

My environment variables are set to these values:
$PATH --> 
`/Users/--/.nvm/versions/node/v10.17.0/bin:/Users/--/.nodenv/shims:/opt/apache-maven-3.6.3/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/apache-maven-3.6.3/bin:/usr/local/apache-maven-3.6.3/bin`

$JAVA_HOME -->
`/Users/--/.jenv/versions/oracle64-13.0.1`

https://github.com/jenv/jenv/blob/2b100b0bc2657abe3be8d337400fa961ab1d5825/libexec/jenv-add#L100

I'm not a bash guru, but I actually got this working in GitBash.
And google told me that use single `=` when using single square brackets `[ ]` in if/test and double `=` when using double square brackets `[[ ]]`

This however made it fail at https://github.com/jenv/jenv/blob/2b100b0bc2657abe3be8d337400fa961ab1d5825/libexec/jenv-add#L103

So going with things that has worked before I change it to 
```
if `"${JENV_JAVAPATH}"/bin/java -version 2>&1 | grep -q "64-Bit"`; then
```

As a side note, it would be awesome if there was a short version with platform like `1.8-32bit` and that `1.8-64bit`
```
[root@localhost .jenv]# jenv versions
/usr/local/bin/.jenv/libexec/jenv-version-file-read: line 23: /dev/fd/62: No such file or directory
```
```
[root@localhost .jenv]# ll /
total 60
lrwxrwxrwx.   1 root root    7 Jul 25 09:07 bin -> usr/bin
dr-xr-xr-x.   2 root root 4096 Jul 25 09:07 boot
drwx------.   3 root root 4096 Dec 28 19:44 data
drwxr-xr-x.  14 root root 4140 Dec 27 18:22 dev
drwxr-xr-x.  57 root root 4096 Dec 28 18:36 etc
drwxr-xr-x.   2 root root 4096 Jul 25 09:07 home
lrwxrwxrwx.   1 root root    7 Jul 25 09:07 lib -> usr/lib
lrwxrwxrwx.   1 root root    9 Jul 25 09:07 lib64 -> usr/lib64
drwx------.   2 root root 4096 Oct 23 23:00 lost+found
drwxr-xr-x.   2 root root 4096 Jul 25 09:07 media
drwxr-xr-x.   2 root root 4096 Jul 25 09:07 mnt
drwxr-xr-x.   2 root root 4096 Jul 25 09:07 opt
dr-xr-xr-x. 487 root root    0 Jan  1  1970 proc
dr-xr-x---.   4 root root 4096 Dec 28 19:34 root
drwxr-xr-x.  14 root root 4096 Dec 27 18:59 run
lrwxrwxrwx.   1 root root    8 Jul 25 09:07 sbin -> usr/sbin
drwxrwx---.  52 root 9997 4096 Dec 27 21:28 sdcard
drwxr-xr-x.   2 root root 4096 Jul 25 09:07 srv
dr-xr-xr-x.  16 root root    0 Dec 28 18:53 sys
drwxrwxrwt.   3 root root 4096 Dec 28 19:44 tmp
drwxr-xr-x.  12 root root 4096 Oct 23 23:01 usr
drwxr-xr-x.  18 root root 4096 Oct 23 23:01 var
```
maybe that's cause root user has no permission on /dev
```
[root@localhost .jenv]# ls /dev/
ls: cannot open directory '/dev/': Permission denied
```
I wanna know how to make it right when running . change which file ? 
cause seen by the error message `line 23: /dev/fd/62: No such file or directory`, there's just a `fi` in line 23.
Jenv won't allow adding GraalVM CE 19.3.0 (which is based on Java 11) and skips the installation with the following warning.

```
$ jenv add ~/install/graalvm/graalvm-ce/Contents/Home                                                                             
 openjdk64-11.0.5 already present, skip installation
 11.0.5 already present, skip installation
 11.0 already present, skip installation
```

The existing `11.0.5` is the openjdk one, not the graalvm.

Since a JDK installation generally generates multiple version strings, I find it helpful to remove multiple of them with a single command.
on Ubuntu 16.04

I need to use two different JDK8s with same version 1.8.0.222
(to check and compare performance and etc)

1st Ubuntu default JDK8
(install by apt)
```
$ sudo apt-get install openjdk-8-jdk
$ jenv add /usr/lib/jvm/java-8-openjdk-amd64/
  1.8 added
  1.8.0.222 added
  openjdk64-1.8.0.222 added
```
2nd Amazon Corretto JDK8
(install by manual)
```
$ tar -zxf amazon-corretto-8.222.10.1-linux-x64.tar.gz -C /usr/lib/jvm
$ jenv add /usr/lib/jvm/amazon-corretto-8.222.10.1-linux-x64/
 openjdk64-1.8.0.222 already present, skip installation
 1.8.0.222 already present, skip installation
 1.8 already present, skip installation
```

Please, don't say that same version is same JDK8.
(I don't want to tell details of how different each one by implementation)

Is it possible to  [ jenv add different openjdk with same version ] ?
For example, 
If jenv has alias option (I suppose that it is existed even it is not),
then 
```
$ jenv add /usr/lib/jvm/amazon-corretto-8.222.10.1-linux-x64/ alias corretto-8
  corretto-8 1.8 added
  corretto-8 1.8.0.222 added
  corretto-8 openjdk64-1.8.0.222 added
```
Hello, this is related to #223 and #254 . I'm trying to think how to solve this in a consistent way.

I found a sort of limit within jEnv; the "version" that we need to specify is either vague or too implementation-dependent. Example on my current Linux system:

```
  system
* 11.0 (set by JENV_VERSION environment variable)
  11.0.4
  1.8
  1.8.0.221
  1.8.0.222
  openjdk64-11.0.4
  openjdk64-1.8.0.222
  oracle64-1.8.0.221
```

So, if I say "jenv shell 11.0" it will switch to my ``` openjdk64-11.0.4```, which is actually adoptopenjdk with hotspot.

Now, what I'd really like to have is a sort of semantics, so that each jdk implementation could provide some sort of categories or tags or "meta-version"; example from the versions above:

```
openjdk64-11.0.4      -> provides: jdk-11, openjdk-11, adoptopenjdk-11
openjdk64-1.8.0.222   -> provides: jdk-8, openjdk-8, adoptopenjdk-8
oracle64-1.8.0.221    -> provides: jdk-8, oraclejdk-8
```

This is somewhat similar to what happens with many packages/metapackages on various linux distributions, and/or with the update-alternatives approach.

As a user, if I have more than one implementation providing jdk-8, I can choose which one is the default.
Then in the ```.java-version``` on my project I can just use ```jdk-8``` if I want to use version 8, or things like ```oraclejdk-8``` if I know there's an hard dependency on the Oracle JDK version. We could also use a 'cascading' .java-version that supports multiple versions.

Currently, AFAIK, setting such meta-aliases is something manual (unless it's the first jdk for a version which is picked up by jenv), and it's very easy for somebody to do a mistake like ```jenv local oracle64-1.8.0.221``` and then committing such file.

The rationale is: for most projects, the main Java API should be enough. 8, 9, 10, 11 - I mostly don't care whether somebody is using 8.0.100 or 8.0.200, or whether they're using a Oracle or some OpenJDK distro. I'd like to address THAT easily.

For projects with additional restrictions (vendor? minimum revision? jre implementation?) there should a way to specify that.

This is a bit of brainstorm... thoughts?


I don't know whether is a bug or not.

if login using `su - <user>` e.g. `su - root` then `jenv` won't work. `login <user>` then enter password will works(of course it works...).

run `jenv doctor` and the error is

```
[OK]	No JAVA_HOME set
[ERROR]	Java binary in path is not in the jenv shims.
[ERROR]	Please check your path, or try using /path/to/java/home is not a valid path to java installation.
	PATH : /root/.jenv/libexec:/root/.jenv/bin:/usr/local/maven/maven/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
[ERROR]	Jenv is not loaded in your bash
[ERROR]	To fix : 	cat eval "$(jenv init -)" >> /root/.bash_profile
```
For macOS and the Homebrew package manager, get the installation
directory from the `brew --prefix jenv` command instead of
deriving the path with `abs_dirname()`.

This will hopefully address the concerns I raised in https://github.com/jenv/jenv/issues/260