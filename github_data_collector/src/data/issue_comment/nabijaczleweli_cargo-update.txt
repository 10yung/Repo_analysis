To install on macOS, first it was failing because I only had OpenSSL 9.8.0, and once I installed OpenSSL via brew, it worked fine.

```shell
calebjasik@Calebs-MacBook-Pro ~ %   export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
  export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"
calebjasik@Calebs-MacBook-Pro ~ % cargo install cargo-update
```

I successfully installed it and ran it, just wanted to provide a success story for macOS. It wasn't entirely clear from the README why it wasn't working other than OpenSSL being the culprit
I think it would be a good idea to always update cargo-update first when running `cargo install-update --all`.
Provide friendly experience for people using `rustup override`.

- `set` to modify
- `unset` to remove from config
- `list` to list existing config

Personal expected behavior.

- if the item set-ed is the default, remove the config rather than showing `Default features  true`
- some deprecated crate like `clippy` should be removed from config, alternative to `rustup override unset --nonexistant` would be useful
- list all overrides (took me some time to figure out the configuration in `~/.cargo/.install_config.toml` by reading the source code)

If this feature is useful though it might introduce breaking change, I can propose solution for it.
```sh
$ cargo install --git https://github.com/redox-os/ion
# wait for repo to update

$ cargo install-update -ag
Updating ion-shell from https://github.com/redox-os/ion
    Updating git repository `https://github.com/redox-os/ion`
error: could not find `ion-shell` in https://github.com/redox-os/ion
```
I'm not sure what the error is, manually running  `cargo install --git https://github.com/redox-os/ion  --force` does not throw any error for me. :/
Hey there!

This is likely a bug in my project, rather than a bug in cargo-update, but I wanted to ask some advice. Currently, here's a failing build: https://ci.appveyor.com/project/steveklabnik/kernel/build/job/q0ntqfgte41r529a

```text
  = note: C:\Users\appveyor\AppData\Local\Temp\1\cargo-install.NrnbniSQAEoB\release\deps\liblibgit2_sys-a5d90d29dc2660db.rlib(diff_print.c.obj):diff_print.c:(.text$git_diff_print_callback__to_file_handle+0x5b): undefined reference to `__imp___acrt_iob_func'
          C:\Users\appveyor\AppData\Local\Temp\1\cargo-install.NrnbniSQAEoB\release\deps\liblibgit2_sys-a5d90d29dc2660db.rlib(util.c.obj):util.c:(.text$printf+0x29): undefined reference to `__imp___acrt_iob_func'
          C:\Users\appveyor\AppData\Local\Temp\1\cargo-install.NrnbniSQAEoB\release\deps\liblibgit2_sys-a5d90d29dc2660db.rlib(util.c.obj):util.c:(.text$printf.constprop.3+0x25): undefined reference to `__imp___acrt_iob_func'
          C:\Users\appveyor\AppData\Local\Temp\1\cargo-install.NrnbniSQAEoB\release\deps\liblibgit2_sys-a5d90d29dc2660db.rlib(util.c.obj):util.c:(.text$printf.constprop.4+0x25): undefined reference to `__imp___acrt_iob_func'
          C:\Users\appveyor\AppData\Local\Temp\1\cargo-install.NrnbniSQAEoB\release\deps\liblibgit2_sys-a5d90d29dc2660db.rlib(cache.c.obj):cache.c:(.text$printf+0x29): undefined reference to `__imp___acrt_iob_func'
```

I see that in your appveyor.yml, you are installing some stuff. Are users expected to do that too? What stuff should I add, specifically?

Thanks!
Especially for reproducable CI builds, it would be useful to be able to specify the desired version range to install-update to. Currently, if I want to get updates within a semver range, my only option is to `cargo install --version ^0.5 --force tarpaulin` (to pick an example). I'd like to be able to `cargo install-update --allow-no-update --version ^0.5 tarpaulin` and let install-update handle not reinstalling it if it's been cached.

## Design

A new `--version` option is added. It takes a [`VersionReq`](https://docs.rs/semver/0.9.0/semver/struct.VersionReq.html) specified in the same format as `cargo-install`'s `--version` option. If `--version` is specified, exactly one package must be specified.

If the installed version is the same as the latest published version within the specified version requirement, no action is taken. If a later version is available, it is installed by providing the `--version` option to `cargo-install`.

## Implementation

(Note, I haven't seen how `cargo-install-update` is implemented, so I'm trying to keep this high-level enough to be applicable.)

Add a new `--version` option. This option takes an object of type [`semver::VersionReq`](https://docs.rs/semver/0.9.0/semver/struct.VersionReq.html). For _full_ compatibility with `cargo-install`, it should be attempted to parse as an exact `semver::Version` if it doesn't start with one of `=`, `>`, `<`, `~`, or  `^`. This can be decided for or against externally to what `cargo-install` does, as this is a separate command with different meaning.

When this `--version` option is present, fail early with an error message if more than one package are provided as trailing arguments.

Rather than determine the latest semver version as the target version, first filter the list of available versions on the version requirement provided, then select the latest version. Proceed normally with the new target version.

This may require renaming the `Latest` column to `Target` or something similar when `--version` is provided.
Hello,

On installing i got this:

error: failed to compile `cargo-update v1.4.0`, intermediate artifacts can be found at `/tmp/cargo-install.JpEXDBLLIpMP`

How to fix this?

root@chip:~# cargo --version
cargo 0.23.0 (61fa02415 2017-11-22)
One feature I've wondered about for awhile would be to have parallel update tasks running. I have a very powerful desktop, with a 8-core/16-thread R7 1700X processor. When there are half a dozen packages to be updated, a large portion of the update process is spent in a single thread during the final stages of each package. Since only one update happens at a time, these final stage processes are sequential, making the update process very slow compared to what it could be.

If I could choose to run multiple package updates in parallel, then their final, sequential stage would run in parallel, greatly reducing the time to do the updates.

My preferred approach would be to naively run the specified number of package updates in parallel, allowing the operating system to sort out who gets access to the processor, but an approach that you might find more reasonable would be to artificially restrict each package update to a fraction of the processor. With `cargo install-update -a -j4`, we could have 4 update jobs running in parallel. On a 16-thread machine, each of these 4 jobs could be run with `cargo install -j4 ...` to equally divide the processor threads among the update tasks.

If this were to be implemented, it would be nice to have an option or sentinel value to just start _all_ jobs simultaneously, so I don't have to count up how many updates need to be done and supply that number to the parameter.
I see that this was discussed previously in #10 and #30 but as far as I can tell, it was never coherently explained why cargo-update needs to do this differently.

Synopsis of previous thread and some points of my own:

- [The Cargo FAQ is very explicit about when Cargo.lock is supposed to be checked in.](http://doc.crates.io/faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries) It writes:

    > It is recommended that all binaries check in their Cargo.lock.

    The reasons are explained in the link.

- The rebuttal to this point in https://github.com/nabijaczleweli/cargo-update/issues/10#issuecomment-258639333 was:

    > \<nabijaczleweli> But this is a library

- After being pointed out that the crate does contain binaries, the follow-up was:

    > \<nabijaczleweli> think of the exec like an example, which it basically is (and should be)

    While you may see it this way, I haven't found any evidence that any code anywhere uses cargo-update as a library. On crates.io there are [zero crates that depend on cargo-update](https://crates.io/crates/cargo-update/reverse_dependencies). On GitHub there are [zero Cargo.toml manifests that depend on cargo-update](https://github.com/search?l=TOML&q=cargo-update&type=Code). Everybody only uses the binaries.

- In https://github.com/nabijaczleweli/cargo-update/issues/30#issue-228598503 it was pointed out that adding Cargo.lock does not affect how this crate is used as a library. Quoting again from the same Cargo FAQ:

    > Users dependent on the library will not inspect the libraryâ€™s Cargo.lock (even if it exists).

    Cargo will use the lockfile for building the binary, while crates that depend on the library will ignore the lockfile. This means we get all the benefits of shipping a Cargo.lock with an exclusively binary crate.