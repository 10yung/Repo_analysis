Often times, especially with mock / test data, it is handy to `ORDER BY rand()` or `SELECT rand() AS someName`.

We have already implemented this functionality for MySQL's rand() function and would do it for others if we are certain of their syntax, etc.

We can submit a pull request for this feature, but it is dependent on some of our other pull requests that have not been merged yet, so please let me know how to proceed.


I took some time to separate and organize into pull requests some of my team's work on Squash that we thought you might like. We hope these features are useful and are happy to answer any questions where you have them.

We closed a previous issue regarding generalizing `FunctionExpression` implementations as our work already includes this.

Thank you

## Description
Adds common support for the SQL 92 case expression. Expressions of both common formats are supported.

## Supported SQL
### CASE With Primary Operand / Condition
SQL:
```sql
CASE (yesOrNo)
WHEN ('yes') THEN 1
ELSE 0
END
```

### CASE Without Primary Operand / Condition
```sql
CASE
WHEN (yesOrNo = 'yes') THEN 1
WHEN (yesOrNo = 'no') THEN 0
ELSE -1
END
```
## Kotlin Example
Taken from unit tests.
```kotlin
/*
 * Note the use of the word "Clause" to avoid reserved words.
 */
select(
	case<String>(literal(5)) {
		whenClause(literal(6)).thenClause(literal("false"))
		whenClause(literal(5)).thenClause(literal("true"))
		whenClause(literal(4)).thenClause(literal("false"))
		elseClause(literal("false"))
	}
)
```

## Testing
A basic test case was added for this functionality, but could be improved to include more varying conditions, though this may not be necessary because it is ultimately using `Expression<*>`s for most functionality related to the conditions and values.

> Edited to include a kotlin example from unit tests
## Description
This feature intends to generalize the creation of common `FunctionExpression` implementations within dialects. It introduces a `GeneralFunctionExpression` class for functions that simply need a name and one value, which could be used by any dialects to quickly add functions, particularly aggregates.

As such, this pull request also includes the average() function as an addition to the `BaseSQLDialect`

## Testing
Unit tests were added for the base aggregate functions, however, some adjustment was required to make it work generically for all databases as the types returned by the databases for an aggregate are not all the same. Some returned a Long vs a Double for the average() function for example.
This feature adds a computed default property to columns such that Squash can execute any logic required by the developer to generate the default value for a column.

## Example
One use case for this feature would be generating predictable identity columns (as opposed to simply using auto_increment in MySQL). It is common these days to use libraries like Twitter Snowflake or Flickr's ticket server to create primary keys and this feature serves to assist in that.
In an effort to cleanup the deprecation warnings, we replaced calls to Class.newInstance() with Class.getConstructor().newInstance()
```
val dbConnection = PgConnection.create("jdbc:postgresql://localhost:5432/mydb")
val transaction = dbConnection.createTransaction()
update(TestEntity).set(
    TestEntity.name, "BLEH ${Random().nextInt()}"
).where(TestEntity.id eq 1).executeOn(transaction)
transaction.commit()
```

This causes a postgres error:

```
Cannot commit when autoCommit is enabled.
```

C3P0, Hikari and regular JDBC allows you to turn off autocommit on the connection itself.

Where would be a reasonable place to add such a property, on PgConnection and its parent classes themselves?
```
val dbConnection = PgConnection.create(
    "jdbc:postgresql://localhost:5432/mydb", 
    ConnectionOptions(autoCommit = false
))
```

The workaround for now is to switch off autocommit on the DB level which is not always an option when using a DB hosted by someone else.

This happens on Postgres, haven't tried it on other databases.

I create a test table, notice the `.default("TEST123")` on the name-column:

```
    object TestEntity : TableDefinition(name = "test") {
        val id = integer("id").autoIncrement().primaryKey()
        val name = varchar("name", 50).default("TEST123")
    }
```

Now when I try and use this TableDefinition to generate a scema:

```
val trans = DatabaseHandler.createTransaction()
trans.databaseSchema().create(listOf(TestEntity))
```

I get the following error:

```
Exception in thread "main" org.postgresql.util.PSQLException: ERROR: there is no parameter $1
CREATE TABLE IF NOT EXISTS test (id SERIAL NOT NULL, name VARCHAR(50) NOT NULL DEFAULT ?, CONSTRAINT PK_test PRIMARY KEY (id))
Arguments: [SQLArgument(index=0, value=TEST123)]

    at org.jetbrains.squash.drivers.JDBCTransaction.executeStatement(JDBCTransaction.kt:87)
    at org.jetbrains.squash.schema.DatabaseSchemaBase.create(DatabaseSchemaBase.kt:12)
    at Tables.main(Tables.kt:14)
Caused by: org.postgresql.util.PSQLException: ERROR: there is no parameter $1
    at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2440)
    at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2183)
    at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:308)
    at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:441)
    at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:365)
    at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:143)
    at org.postgresql.jdbc.PgPreparedStatement.execute(PgPreparedStatement.java:132)
    at org.jetbrains.squash.drivers.JDBCTransaction.executeStatement(JDBCTransaction.kt:75)
    ... 2 more
```





At the moment
```
from(Citizens)
    .innerJoin(Cities) { Cities.id eq Citizens.cityId }
    .select(Citizens.name, Cities.name)
```
the criteria can be deduced automatically
```
from(Citizens)
    .innerJoin(Cities)
    .select(Citizens.name, Cities.name)
```

Or maybe even implicit join like in JOOQ https://blog.jooq.org/2018/02/20/type-safe-implicit-join-through-path-navigation-in-jooq-3-11/
In some applications, you donâ€™t want to, or you are not allowed to permanently remove a record from the database. But you still need to remove or hide records which are no longer active. One example could be a user account which you want to keep because it is linked to other business objects which are still used.

Typical story: after an entity is marked with `deleted=true`, it should not be visible anywhere, except specially chosen places.