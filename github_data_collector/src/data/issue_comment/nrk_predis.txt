Added [**ZPOPMAX command**](https://redis.io/commands/zpopmax).

Related to issue #592

Example of usgae:
```php
$client = new \Predis\Client('tcp://127.0.0.1:6379');

$values = array(
    'one' => 1,
    'two' => 2,
    'three' => 3,
    'four' => 4,
);

$client->zadd('myzset', $values);

# $popedValues = $client->zpopmax('myzset');
# With count specified
$count = 2;
$popedValues = $client->zpopmax('myzset', $count);

print_r($popedValue);
```
**I would like to start my contribution** to this project by adding support for [**ZPOPMAX command**](https://redis.io/commands/zpopmax) available since Redis 5.0.


I have using predis (v1.1.1) with symfony for caching purpose and have sometimes such error:

```json
{
    "class": "Symfony\\Component\\Debug\\Exception\\OutOfMemoryException",
    "message": "Error: Allowed memory size of 33554432 bytes exhausted (tried to allocate 528384 bytes)",
    "code": 0,
    "file": "..../vendor/predis/predis/src/Connection/StreamConnection.php:391"
}
```

Reffering on this row: https://github.com/nrk/predis/blob/v1.1.1/src/Connection/StreamConnection.php#L391

Do i need to suspect predis? or is it some server error?




Hi there,

I have 3 container on docker, the first for my php application, the second for redis, the third for nginx.

when I try to ping redis from my php container through a php file, it return me this warning:

> *Uncaught Predis\NotSupportedException: Cannot use 'PING' over clusters of connections.*

this is my php script:

```
$this->redis_conn = false;

$basepath = $_SERVER['DOCUMENT_ROOT'];
require ($basepath . $this->vendor_dir . self::PREDIS) . 'src/Autoloader.php';
Predis\Autoloader::register();

try {
        $options = array();
        $this->redis_conn = new Predis\Client(array($this->database_scheme, $this->database_host, $this->database_port, $options));
        $ping_conn = $this->redis_conn;

        echo $ping_conn->ping();

} catch (Predis\Connection\ConnectionException $e) {
         trigger_error("Database connection failed: " . $e->getMessage(), E_USER_WARNING);
         return false;
}

return $this->redis_conn;
```

There is a way to solve this issue and to check the redis connection?

thanks all.

I bet this won't sound surprising to many long-time users of this library at this point but the time to call for help from the community has finally come, albeit a bit late I guess. 

Just a few words on why we've reached this point. Predis has always been mostly a one-man project aside from a few good PRs and various kinds of contributions for which I'm still thankful after years. This didn't pose much issues at least until I started having less and less free time to dedicate to my opensource activity which basically amounted to zero in the last 18 months. Truth to be told part of the problem is also that I don't have the same motivation I had a few years ago to maintain such a library, but I hated to admit it. That said, if there's one thing that fueled my reluctance to call for help is that I've always been quite meticulous with my work (which doesn't mean being perfect, whatever that means) but many PRs I received in the past were admittedly sloppy, with no care for the coding style adopted by the project, glaring errors, conflicts with the overall design of the library or missing tests just to name the most striking examples of what I mean. 

So what now? Basically I'm looking for contributors that are seriously interested to help with maintaining Predis and that are willing to strive for the same meticulous approach. I don't expect people rushing here to take up on such task, the fact that Predis is a pure-PHP implementation of the Redis protocol surely attracted critics and in the meanwhile PhpRedis matured so much in terms of features and stability so there's probably less need for it, but I don't want to reach the point of having to mark this project as abandoned because I think it still has its own place in the PHP + Redis ecosystem. Obviously I'll try to help as much as possible especially when there are doubts about Predis internals and the overall design of the library, just don't take readiness for granted due to limited time.

The most urgent task is to rank open issues and fix them to push a new relase in the v1.1 branch, some open PRs address a few of these issues but they probably need some work. At first, contributors willing to help should work on their own forks to polish the code before submitting proper PRs for fixes, but if any currently open PR indeed doesn't need anything more than a merge because it passess the test suite and doesn't break anything else then let me know and I'll merge it ASAP. I may consider giving access to the main repository to contributors that earned my trust, I guess you undestand that I cannot do such a thing immediatly.

The master branch is meant to become v2.0, but since it diverged quite a lot from v1.1 most fixes cannot be easily merged. At first I intended to maintain both v1.1 and master-to-be-v2.0 but in retrospect I guess that plan actually backfired so now the plan is to just fix v1.1 for both implementation bugs and compatiblity issues with newer PHP versions, maybe a few new Redis commands, and leave it at that. On the master branch, aside from applying the same fixes, we should drop support once and for all for PEAR and older PHP versions and rework parts of code that could benefit from new features introduced in PHP 7 before implementing anything new.

I'm not sure how it will go, but let's discuss how to make it work. I'd really prefer to discuss this publicly but if you need to contact me privately then go ahead.
During recent packet analysis, we determined command writes to the server were not being coalesced as often as we expected.  In particular, when sending a succession of pipelined requests on a new connection, we often saw the commands going out in multiple packets rather than a single full one.  I suspect this is due (in part) to Nagle's algorithm not having sufficient requests on the new connection for the heuristic to activate.

To improve performance, I suggest adding a write buffer to `StreamConnection::write()`.  All bytes written would be stored (appended) to an internal buffer.  The write buffer is only flushed to the server when:

* a `read()` is performed,
* `disconnect()` is called,
* or in `write()` when a tipping point is reached in the number of bytes buffered (say, 64K)

We implemented this change using a custom connection `Factory` that produces subclasses of `StreamConnection` and saw immediate improvements in reducing the number of packets transmitted and overall command execution time.
Hi

Fix error message check for new version redis and add new test for check invalid database name
Hello,

We have the simple source code like this: 
```
$this->connection()->setex($this->prefix.$key, 15, 1);
$value = $this->connection()->get($this->prefix.$key); // $value is null
```
The value in the redis is nil too.

I try to use redis command `SETEX 15 1 ` it works fine.

My predis version: 1.1.1
Redis version: 3.2.12 (Centos 7)

I hope to hear from you at the earliest!
Wrong annotation for method spop in ClientInterface. Annotation says it returns string, but it returns array.