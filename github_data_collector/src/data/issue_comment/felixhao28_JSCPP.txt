It seems to me that there is an error with uninitialized arrays. Elements should not be initialized to 0 as is currently the case seems to me.
For example :
#include <stdio.h>

int main() {
    float tab[2];
    for(int i = 0; i < 2; i++){
        printf("%f, ", tab[i]);
    }
    return 0;
}
gives 0.00000, 0.00000 instead of NaN, NaN.

The C99 standard says that "if an object that has an automatic storage duration is not explicitly initialized, its value is undetermined." I think it's the same in C++ (or not ?).





I am working with JSCPP within browser. The demo has a `debug.js`. Not sure how to use it.
Hi Felix
In the code below there should be an overflow as the type used is a short, but it appears that the calculation is done as an int?
thanks
Bill

```cpp
#include <iostream>
using namespace std;
#include <stdio.h>

unsigned short a = 900; //short is a 16bit type
unsigned char p =0;

int main() {
  p = (a*100)/1000;
  printf("a:%d\n",a);
  printf("p:%d\n",p);
  return 0;
}
```
我想用pegjs解析模板语法，比如 vecotr<int> v; 改了一下文法文件但是 < 始终被识别为小于符号。可以大概提供下思路吗，谢谢🙏
I would like to ask if there could be published a single file/minified version of this lib with every update, because i'm trying to use it on the web, and installing/finding a way to unify the whole lib into a single file, using node, always causes problems to me, for some reason.

That if the online demo doesn't already use the last version avaliable(Could someone inform me about that?). In that case, I might just use it.

I was wondering if we could provide better display values, after having a look on the code I think there could be done with small adjustments.

-  Is there any straightforward solution to provide a better display for multidimensional arrays? So far, starting from 2D the display value is: [...] for each element. There is a parameter which stops the recursion after first dimension, are any other sections which are intersecting?
- Could the values from pointers include (if not an actual address) the name of the variable being pointed?
- Functions are being represented as $[object], we could use a suggestive placeholder.




As referred to from:  https://github.com/viebel/klipse/issues/300

Code that is invalid and should not compile is instead being executed and run up until the point in the source code that it fails.

The linked issue contains of note:

> I was attempting to demonstrate C++ type errors that happen at compile time in a demonstration post using klipse, however the typing error seemed to happen at run-time instead of parsing/compilation time as prior lines of code were run and output information before the typing error was hit, which completely destroyed my argument for C++ that catching type errors at compile-time prior to run-time helped prevent classes of errors before the code is executed. ^.^;

> Just go to any of the C++ fields at:  http://blog.overminddl1.com/posts/programming-language-differences-compilation/
> 
> Then input:
> 
> ```c++
> #include <iostream>
> using namespace std;
> int main() {
>   char *hw = "Hello World!";
>   cout << hw << endl;
>   cout << 2 * hw << endl;
>   return 0;
> }
> ```
> 
> I'd expect it to just print out:
> 
> ```text
> 6:11 unsigned int does not support * on char[13]
> ```
> 
> Instead it prints:
> 
> ```text
> Hello World!
> 
> 6:11 unsigned int does not support * on char[13]
> ```