
This PR changes the build badges to SVG for sharper readability âœ¨

PS: Also removes a `gemnasium` badge, since that service has ben disontinued.
As we had a Nominatim custom instance, we needed to set a custom API server host (other than https://nominatim.openstreetmap.org/).
I also updated readme. Feel free to tell me if I have anything to change in unit testing...
If you set `Geokit::Geocoders::provider_order` or `Geokit::Geocoders::ip_provider_order` to `:fcc`, it blows up because https://github.com/geokit/geokit/blob/master/lib/geokit/multi_geocoder.rb#L66 camel-cases the class provider name to FccGeocoder even though the name of the class is actually FCCGeocoder.
After the failed attempt with #239, now we did some changes that enable the support to Ruby v2.4, v2.5, and v2.6.

This PR includes:
- Bump to a newer version of `Webmock`
- Fix some expectations failing due to case sensitiveness with non-ASCII characters
- Drop testing on Travis to no longer maintained Ruby versions
- Add testing on Travis to maintained Ruby versions
- Add non-blocking testing on Travis to Ruby head version
# Why

there is add all method but first method is not assigned.

## now

```
Geokit::Geocoders::GoogleGeocoder.api_key = api_key
res = Geokit::Geocoders::GoogleGeocoder.do_reverse_geocode(lonlan)
p res.all.first.full_address
```

## expect

```
Geokit::Geocoders::GoogleGeocoder.api_key = api_key
res = Geokit::Geocoders::GoogleGeocoder.do_reverse_geocode(lonlan)
p res.first.full_address
```
The documentation specifies you can set a global wait time with 
```
Geokit::Geocoders::request_timeout = 3
```

However it would be nice to be able to specify this on a per request basis. In certain situations the acceptable wait time for a request is higher than others.  For example, if I want to attempt to locate a user based on their ip with IpGeocoder when a user first visits my application, I would think the acceptable wait time is a lot less than if the application tries to geolocate an address after a form submission.  It would be nice if the geocode method accepted an arg to have a custom timeout time for a specific request.  

```
Geokit::Geocoders::IpGeocoder.geocode('xxx.xxx.xxx.xxx', request_timeout: 1)
```
Hi,
I'm using the geokit gem to determine if a polygon contains a point or not. Somehow if a point is close to the border of a large polygon (500 coordinates), geokit says it is not included, even if it is included.

To reproduce the error see the following example:

Link to an image of the polygon and the point:
[https://ibb.co/23spTTm](url)

Link to the polygon:
[https://api.myjson.com/bins/16qxtm](url)

And the Point looks like this: `{
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Point",
        "coordinates": [
          10,
          51
        ]
      }
    }`

I'm using geokit gem to determine if polygon contains point or not. Faced with geokit issue: point is obviously inside polygon while geokit says it is not. I need help how to manage with geokit to make it work properly. See picture & code attached. 

``` 
$ ruby --version
ruby 2.4.0rc1 (2016-12-12 trunk 57064) [x86_64-linux]
$ gem list geokit
*** LOCAL GEMS ***
geokit (1.13.1)
```
Code:
```
require 'geokit'
region = Geokit::Polygon.new([
  Geokit::LatLng.new(70.306600, 170.932572),
  Geokit::LatLng.new(70.389399, -157.577565),
  Geokit::LatLng.new(56.092566, -156.839521),
  Geokit::LatLng.new(58.230582, 170.194528)
])
region.contains? Geokit::LatLng.new(64.819631, -173.896530)
```
Result:
```
$ irb
2.4.0-rc1 :001 > require 'geokit'
 => true 
2.4.0-rc1 :002 > region = Geokit::Polygon.new([
2.4.0-rc1 :003 >         Geokit::LatLng.new(70.306600, 170.932572),
2.4.0-rc1 :004 >         Geokit::LatLng.new(70.389399, -157.577565),
2.4.0-rc1 :005 >         Geokit::LatLng.new(56.092566, -156.839521),
2.4.0-rc1 :006 >         Geokit::LatLng.new(58.230582, 170.194528)
2.4.0-rc1 :007?>     ])
 => #<Geokit::Polygon:0x000000020a2150 @points=[#<Geokit::LatLng:0x000000020a2218 @lat=70.3066, @lng=170.932572>, #<Geokit::LatLng:0x000000020a21f0 @lat=70.389399, @lng=-157.577565>, #<Geokit::LatLng:0x000000020a21c8 @lat=56.092566, @lng=-156.839521>, #<Geokit::LatLng:0x000000020a21a0 @lat=58.230582, @lng=170.194528>, #<Geokit::LatLng:0x000000020a2218 @lat=70.3066, @lng=170.932572>]> 
2.4.0-rc1 :008 > region.contains? Geokit::LatLng.new(64.819631, -173.896530)
 => false 

```
Here is a piece of screenshot with polygon bounds and point inside it:
![](https://i.imgur.com/KdTPhw3.jpg)![][1]

I have some issues on the endpoint and heading methods that seems to send incorrect results.

For exemple the heading between 2 points are not exactly -180 degrees if you go from point A to point B and point B to point A : 
``` ruby
p1 = Geokit::LatLng.new(48.571182027451826, -0.4402671592964547)
p2 = Geokit::LatLng.new(48.525939287181586, -0.3230002328606039)

p1.heading_from(p2)                                             
=> 300.2778935811772

p2.heading_from(p1)             
=> 120.19000000000386
```
