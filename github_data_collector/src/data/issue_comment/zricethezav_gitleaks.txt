**Describe the bug**
At some point between `2.1.0` and `3.1.0`, the way repo configurations interacted with the base configuration changed. Previously the repo configuration was merged into the global config. For example, you could have a base set or rules and whitelists configured globally but for individual repos you could have explicit whitelists or rules that may apply. Now, the repo configuration is taken whole sale leaving the global configuration behind. While I can understand the need for this I did like having the previous behavior. Maybe behind a command line option.

**To Reproduce**
Add both `--config` and `--repo-config` to a scan and you will only see `--repo-config` things happen.

**Expected behavior**
Have some ability to merge what is in `--config` and `--repo-config` similar to the previous behavior.

**Screenshots**
N/A

**Basic Info (please complete the following information):**
 - OS: Docker container
 - Gitleaks Version: `3.1.0`

**Additional context**
N/A

cc @zricethezav

When running organization scan, all values of `repo` field were empty (fille with dot ".") because `repo.Manager.Opts.Repo` was empty. Now when cloning we chck if scan is run for organization and if so, don't set `repo.Name` which is already set correctly. 
in new version prompt" repository does not exist" when want to use audit organization
Added gosec based security-scan to makefile and docker.

Issue suggestion - https://github.com/zricethezav/gitleaks/issues/310
Thanks for this excellent project!

Can I suggest adopting a linter/security checker such as [gosec](https://github.com/securego/gosec) as part of the dev/CI flow?

The latest scan report attached for reference. There are some medium issues reported which could be considered low. However, there are some low issues reported regarding some missing error handling case which could be considered as technical debt.

[results.json.txt](https://github.com/zricethezav/gitleaks/files/3937145/results.json.txt)

**FEATURE-REQUEST:**

When the repo is very big then the scan takes quite long. See output below:

```
time gitleaks --repo-path=.
INFO[2019-11-28T13:15:15+01:00] No leaks detected. 1806 commits audited in 38 seconds 508 milliseconds 543 microseconds
real	0m38.548s
```

When I could specify how many commits (i.e. last 10 commits) should be scanned would make this kinda scan a lot faster.


Since version 3 got released, the --depth option is no longer available.
how can I achieve that functionality in V3?
I noticed that the AWS example key is mentioned in a few places in your docs. But I was curious why this was not whitelisted by default in the tool? I've included a PR for this but I assume you're already not including this for a good reason, so you can close this one if you want, but it would be good to understand why this is.
I just updated gitleaks for the first time since around August and using the latest version, the `--exclude-forks` flag doesn't exist anymore. Is there any other way I can achieve this effect?
It seems that currently GitLeaks uses GoLang regex.FindString value against a single line of code.
https://github.com/zricethezav/gitleaks/blob/f3360cbf66be167c29aaa55f08cb0c1a5ce4575a/src/utils.go#L119

That does not seem to work against JSON based configuration like this:
```
"myUsername": {
    "value": "some-username"
},

"myPassword": {
    "value": "some-password"
 },
```

Regexp not ideal, looks somewhat like this:
```
\"[a-zA-Z:0-9_.]*(?i:username)[a-zA-Z:0-9_.]*\"{1}\s*:\s*\{\n\s*\"value\"\s*:\s*\"(\S{5,})\"\s*\n\s*\}
```

Can be tested here:
* https://regex-golang.appspot.com/assets/html/index.html
* https://regex101.com/

![image](https://user-images.githubusercontent.com/3785585/68849242-d2cc2500-0725-11ea-8d64-e5bd57986a4c.png)


I might be missing something but cannot find a way to get GitLeaks capture such configs. Regexps seem to be ok while testing on the test dataset. With line by line execution, we have a single line which looks like `"value": "some-password"` - not enough to make an informed decision if this is a secret or not.

Can rules be improved to support optional multi-line regexp execution?

Also relates to the following suggestion. It we had capturing group value extraction, then we would be able to factor entropy value of the captured secret which in turn can be a workaround to handle multi-line secrets better.
* Support capturing groups as a rule match value #280