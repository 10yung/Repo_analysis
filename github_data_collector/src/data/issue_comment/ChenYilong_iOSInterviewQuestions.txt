# [iTeaTime(技术清谈)]( https://github.com/ChenYilong/iOSInterviewQuestions/issues/127)【-005期】【代号：赤壁】



----------


![](http://ww2.sinaimg.cn/large/006tNc79ly1g4x1lrjkpuj31sr0q2tc0.jpg)


----------



# 大话人工智能：从赤壁之战到神经网络

![](http://ww4.sinaimg.cn/large/006tNc79gy1g4uv9gffeej312w0m80zs.jpg)

<!--- 

![](http://ww1.sinaimg.cn/large/006tNc79gy1g4usetxe17j30ub0gt0uq.jpg)


-->


> ⚠️⚠️⚠️warning：本文涉及“开车”内容，部分内容可能令你不适，更适合22岁以上具有独立思考的男性阅读。

本文也是《深度学习的数学》的读后感，后文也会介绍这本书。

这是 [**iTeaTime（读作：IT Time，中文名：技术清谈）**]( https://github.com/ChenYilong/iOSInterviewQuestions/issues?q=is%3Aissue+is%3Aopen+label%3Anote)  第一次涉及人工智能的话题，所以谈得比较浅，后续还有有人工智能相关的话题，会谈得深一点。


## 引言


如果你问女朋友“是否听过神经网络、深度学习”，她可能会说”没有“。

但是当你问她“是否听过人工智能”，她八成说听过。如果还说没有，那就拿出大杀器--”围棋人机大战“。

人工智能的一个特点便是：

>  人工智能一旦在某一个领域超越人类，人类将永远无法反超。

人工智能之所以能如此智能，便完全来自于7乘24小时的深度学习。深度学习灵感最初是来自于仿生学，仿的是大脑的运作规律。在人工智能中，堪比大脑的部分正是神经网络。

本文将从赤壁之战讲到神经网络，带你打开人工智能的大门，一睹深度学习的真容。

![](http://ww2.sinaimg.cn/large/006tNc79gy1g4usmtf45ej30sg0lcjso.jpg)


### 从赤壁之战到简单神经网络结构

话说，赤壁之战激战正酣，然而有趣的是：我们故事里的三位男主--魏蜀吴三国统帅却都在一个微信群中，也没人退群。似乎这个群里正在进行着某种不可告人的交易。

下图就是这个“赤壁之战微信群”的群关系。

![](http://ww2.sinaimg.cn/large/006tNc79gy1g4usn8jxqhj30sg0lcn1m.jpg)



群里还埋伏有两名战地记者，同时也是当代著名的战略家： Tom 和 Jerry ，这对欢喜冤家，他们都想挖掘赤壁里两性相关故事，但就是这样一个细分领域，他们俩儿研究的题材却“截然不同”：一个是爱情、一个是基情。

群里有12位草民，他们并不属于魏蜀吴任何一个阵营，却“唯钱是从”，他们最感兴趣的是领赏、抢红包。他们可以是魏蜀吴三家任意一家的手下。

但12人中也分为三类，他们各自打听到了魏蜀吴三国统帅其中一位的兴趣，于是默默记下并格外关注此类型佳人。

魏蜀吴三国统帅在群里，一直想悬赏寻找一个佳人晚上来临幸。要求草民们随时留意。

此时群里新来了一个神秘人，没人知道神秘人身份，随着12名手下在群里的欢迎词，还有魏蜀吴三国统帅的上线，以及三位男主各自的活跃程度，群里炸了锅。

Tom 和 Jerry 两位八卦记者，马上嗅到了新闻的味道。马上炮制10w+网文。

而本文的读者，作为吃瓜群众，你最想知道的可能就是神秘人的性别，所以从 Tom 和 Jerry 的网文中你就可以清晰地判断出。

上面出现的种种人物，可谓是“各怀鬼胎”，下图描述了每个人的兴趣点：

![](http://ww4.sinaimg.cn/large/006tNc79gy1g4usidfq45j30sg1jkahe.jpg)


神秘人出现时，12位手下“盲人摸象”猜测神秘人的身份：

![](http://ww1.sinaimg.cn/large/006tNc79gy1g4uso4ostoj30sg0lcdoz.jpg)

12位手下每个人描述的都是同一个人，说的都是“部分正确的”，但是他们的描述全都是出于自己的猜测，
同时也存有侥幸心理，他们也在赌自己描述的关键词，能命中某一位男主，以此来邀功拿到赏赐。这几个手下含糊其辞，却煞有介事的描述，非常类似“谁是卧底 （快乐大本营游戏）”的规则。


上图也描述了典型的三层神经网络的基本构成为：Layer L1是输入层，Layer L2是隐含层，Layer L3是输出层。

当我们不考虑对内部结构进行细化，我们可以称这种为简单神经网络结构。

我在这里构建的场景，左侧列出了简单神经网络结构，右侧为了能形象说明各个层级的作用，我拿赤壁之战的三个男主进行了类比。

这个类比，可能比较荒诞不经，那么我们就举一个正经的例子，比如：让神经网络判断一个在12格中手写的数字是0还是1。

这时

故事 | 神经网络概念对应
:-------------:|:-------------:
输入层的12个手下 | 与手写输入的12格一一对应，主要负责进行信息录入。
12位手下盲人摸象 | 指对0或1的局部特征进行匹配，一旦局部特征匹配成功就会变得兴奋。
隐藏层，三位男主静静等待12位手下各自兴奋，然后观察关系比较好的手下的表现，激发自己的兴趣。| 就对应于12格特征匹配率中，看哪一个数字的特征匹配度更高，隐藏层的对应的神经单元就被激活。
输出层观察男主，写男主与美女的爱情故事，或者写男主的基情故事。| 就对应于输出层的神经单元被隐藏层的某一个数字对应的神经单元激活。

注：简单神经网络结构示意图的探讨还未涉及卷积神经网络，卷积的概念后文会进行讨论。

简单神经网络结构中，输入层主要作用就是盲人摸象，隐藏层主要作用就是静静等待输入层的信息。

### 从赤壁之战到卷积神经网络结构

随着时代的变迁，封建制度更加完善，帝王的帮手也越来越多，他们已经不满足于守株待兔，而是组织人力主动出击。于是就有了更加细化的“卷积神经网络结构”。

而且似乎上个故事里只捕风捉影操作信息还是不太形象，为了让类比更形象，这个故事里我们就开始直接用“抓人”来代替“捕获信息”的设定。

下图描述了该结构的特点：

![](http://ww2.sinaimg.cn/large/006tNc79gy1g4usl4csrhj30sg0wfgt1.jpg)

我们可以看到，主要是隐藏层发生了变化，由简单的一层，变为了 ”卷积操作+卷积层+池化层“的架构，
同时我在图里把输入层的作用也弱化了。

以猴哥为首的锦衣卫，凭借自己”火眼金睛“的特异功能，主动出击。主动在输入层中开启人脸扫描，马上把潜在的群友，按照”宁可错杀不可放过“的原则统统抓起来，押往东厂。

东厂会对锦衣卫押送过来的人进行精选，精选的方式有很多，比如挑选最符合帝王喜好的那一位，直接押送铜雀台。

后续流程和简单神经网络就保持一致。唯一的区别就是，Tom 和 Jerry 不再需要看各位男主的兴奋程度来推测，而是直接从铜雀台进行判断就可以了。

在这个故事中我们引出了“卷积神经网络结构”，如果说简单神经网络结构中输入层主要作用就是盲人摸象，隐藏层主要作用就是静静等待输入层的信息。

那么卷积神经网络结构中，隐藏层就要更为活跃，隐藏层成立了卷积层和池化层，并有个卷积操作用来主动出击。


故事 | 神经网络概念对应
:-------------:|:-------------:
锦衣卫的火眼金睛扫描| 对应于卷积操作
东厂 | 对应于卷积层，用来存放卷积操作的结果。
铜雀台 | 对应于池化层，用来对卷积层的结果进行进一步提炼，提炼的方法有很多种，最常见的是最大池化。
挑选最符合帝王喜好的那一位，直接押送铜雀台 | 最大池化 



## 深度学习的数学读后感

以上的故事是《深度学习的数学》这本书里我提炼出来并进一步演绎的故事。下面也介绍也这本书。



## 本书介绍

本书属于计算机类图书：

 - 划分类别：科普类
 - 易读性：五星
 - 专业性：三星
 - 观点创新性：三星
 - 实体图书质量：四星
 - 综合推荐等级：四星

 - 个人推荐等级：三星半

本文是一篇“《深度学习的数学》读后感”，书籍作者毕业于数学系，对数学研究颇深，全书虽然是深度学习，却没有一行代码，读完不禁让人手痒，无处施展，于是作者独辟蹊径，给了一种使用 Excel 来“体验”的途径，不过整体体验欠佳，本来以为会使用复杂的函数，结果均为简单的加减乘除。但是也能从侧面进行理论验证，也算一种动手实践途径。作用和示意图一样，是理论文字版本的另一种演绎。如果理论你已经完全掌握，那么 Excel 的环节可能有点鸡肋。如果理论你根本读不下去，那么 Excel 的环节会很有帮助。

作者文中涉及计算机知识非常少，几乎没有深入探讨，每次提到都是浅尝辄止，只起到注解作用。所以本文会添加很多计算机相关的延伸阐述。

本文术语一览：

缩写 | 术语 | 含义
:-------------:|:-------------:|:-------------:
dl / DL |  deep learning  | 深度学习
DP |  BackPropagation | 反向传播算法 


### 深度学习概念

如果给你下面几个关键词，你会怎么造句？

- 学习
- 预测
- 误差
- 代价

我先来一个：

学习，比如学开车漂移，终极目标就是人车合一。
所谓人车合一，就是开车前的预想与实际操作的误差最小。所有的误差积累起来就是代价，比如翻车。
所谓漂移出神入化，就是零误差，无代价。

上面造句的内容，其实也引出了《深度学习的数学》这本书里的核心概念。

### 误差反向传播法的必要性

#### 递推在计算机上的复杂度优势造就了误差反向传播法

学习过深度学习一定绕不开 BP（反向传播法）的概念，那么为什么是？

选择反向传播而非前向传播，用一句话来总结原因：

> 计算机擅长递推关系式。（见2-2节）

我们说一个算法“性能”优越，大部分场景讲的是时间复杂度。说计算机擅长递推关系式，是因为通常这个算法时间复杂度更低。

参考 “求斐波那契数列之和” 这个问题，实现方法中，可以分为for in 循环累加和递推关系式等几种方式。
使用递推关系式进行计算的时间复杂度明显优于其他方式，是比较典型的用空间换取时间的策略。

> 正是递推在计算机上的复杂度优势，造就了误差反向传播法。


//*one more thing*

<!--- 

### 激活函数

Q：激活函数不就是一个函数吗？激活一词怎么理解？

A：因为该函数的作用就是用他的取值来决定是否能激活神经元。

### 内积外积

外积 wedge product 音译
内积 comer/scalar product 

###  神经单元误差
 
神经单元误差是误差反向传播法的基础。

实际的含义为：

回归分析平方误差与加权输入的关系。
 
那么问题来了。
 
 误差反向传播法的特点就是将繁杂的导数计算替换为数列的递推。
 
Q：为什么用导数来表示神经单元误差？导数与误差是什么关系？

A： 导数能表示曲线的斜率，而误差的最小值就是斜率为0时。所以用导数来表示误差，可以方便表示：
当值越大，那么误差就越大。当导数为零时，误差也为零。


-->




 
----------

 <p align="center">
One more thing...
 </p>
 <p align="center">
【非礼勿视】以下为彩蛋部分，建议28岁以上男性观看
 </p>

----------



![enter image description here](https://img.gsdlcn.com/uploads/allimg/190507/1-1Z50F04014.jpg)

//*one more thing*

<!--- 

![](http://ww3.sinaimg.cn/large/006tNc79ly1g39g8poh1lj30q9126ahs.jpg)


-->

<!--- 
![](http://ww4.sinaimg.cn/large/006tNc79ly1g39fzhrzkqj30rs14i44j.jpg)
-->


//*one more thing*

<!--- 

![enter image description here](http://t1.hxzdhn.com/uploads/tu/bj/tp/714/19.jpg)


-->
<!--- 
![](http://ww1.sinaimg.cn/large/006tNc79ly1g39g0qi80cj30q913dgwf.jpg)
-->


# 技术清谈【-004期】【代号：星际穿越】


![](http://ww2.sinaimg.cn/large/006tNc79ly1g3kjpe5n3wj31c00u0npd.jpg)

----------

本期特辑：hybrid、跨平台特辑
本期出品人：微博@iOS程序犭袁 

注：题目难度五星为满分，各个类目下题目从易到难依次排列。

----------


<!--- 

<p align="center">
<a href=""><img src="https://img.shields.io/badge/pod-v1.21.x-brightgreen.svg"></a>
<a href=""><img src="https://img.shields.io/badge/Swift-compatible-orange.svg"></a>
<a href=""><img src="https://img.shields.io/badge/platform-iOS%207.0%2B-ff69b5152950834.svg"></a>
<a href="https://github.com/ChenYilong/CYLTabBarController/blob/master/LICENSE"><img src="https://img.shields.io/badge/license-MIT-green.svg?style=flat"></a>
</p>

-->

<p align="center">
<a href="https://github.com/ChenYilong/iOSBlog/releases.atom"><img src="https://img.shields.io/badge/RSS feed (full text feed)-订阅我的博客更新-yellow.svg"></a>
</p>
<p align="center">
<a href="https://github.com/ChenYilong/iOSBlog/issues/21"><img src="https://img.shields.io/static/v1.svg?label=QQ%E3%80%81Telegram%20Group&color=blue&message=%E7%82%B9%E5%87%BB%E8%8E%B7%E5%8F%96QQ%E3%80%81Telegram%E7%BE%A4%E4%BF%A1%E6%81%AF&color=green"></a>
</p>


<p align="center">
<a href="https://twitter.com/stevechen1010"><img src="https://img.shields.io/twitter/url/http/shields.io.svg?style=social&maxAge=2592000"></a>
<a href="http://weibo.com/luohanchenyilong"><img src="http://i67.tinypic.com/wbulbr.jpg"></a>
</a><a href="https://t.me/iosobjc"><img src="http://i66.tinypic.com/of2hbn.jpg"></a></a> 
</p>

----------


## hybrid 类 【easy级别】

![](http://ww4.sinaimg.cn/large/006tNc79ly1g3kja0hff3j31hc0u0n7s.jpg)

----------

1【问题】【iOS】【hybrid】请阐述 JavaScriptCore 与 WebCore 工作过程中与线程的关系，阐述基于这种关系，对 JS 与 native 交互的影响，阐述解决优化。

【难度】🌟
【出题人】 微博@iOS程序犭袁


----------


2【问题】【iOS】【Android】【hybrid】嵌入 native 的 web 页面，其 dom 的 localStorage 操作，在 iOS 的沙盒环境下的，阐述使用场景与限制或优势。基于局限，有无替代方案或者优化建议。

【难度】🌟🌟
【出题人】 微博@iOS程序犭袁



----------

3【问题】【iOS】【hybrid】阐述 UIWebView 迁移到 WKWebView 的原因，以及有无遇到阻力，如何解决？

【注】work around 方案也可以。
【难度】🌟🌟
【出题人】 微博@iOS程序犭袁

----------

4【问题】【iOS】【Android】【hybrid】如何用  `js` 创建一个原生的  `Label` 居中显示到某个  `ViewController`/ `activity`   上，可以通过  `JS`  修改  `Label`  的 text 属性，iOS版本代码如下：

 ```Swift
var label = new Label();
label.text("Lefe_x");

// view 为 App 当前显示的 ViewController 的 view，通过 js 获取。
label.addToSuperView(view);
 ```

【难度】🌟🌟🌟
【出题人】 百度阅读-Lefe_x

----------

5【问题】【iOS】【Android】【hybrid】阐述 H5 秒开方案，从 Web 层，和native层分别阐述。

【难度】🌟🌟🌟
【出题人】 微博@iOS程序犭袁

----------

6【问题】【iOS】【hybrid】iOS 中如何低成本实现 WebRTC 功能，你的方案，请罗列有什么限制，主要从以下角度分析：

 - 与其他平台相比
 - 与常规native功能相比

【难度】🌟🌟🌟
【出题人】 微博@iOS程序犭袁

----------

7【问题】【iOS】【Android】【hybrid】请阐述下 app 开发者如何保证用户访问的页面是安全页面，如何保证自己的网站，嵌入到 native 的 WebView 中，不会被劫持、被 js 注入。

参考场景：

 - PC端的Chrome在遇到非HTTPS页面时可以报警告，但很少见 native 应用中报这些错误。


【难度】🌟🌟🌟
【出题人】 微博@iOS程序犭袁


----------

8【问题】【iOS】【hybrid】跨平台方案中，如何截取特定 div 标签，并保存为一张图片。跨平台语言不限：RN、Weex。

场景参考招商银行-掌上生活，发送电影卡邀请函。

【难度】🌟🌟🌟🌟
【出题人】 微博@iOS程序犭袁

----------

9【问题】【iOS】【hybrid】针对 RN 开发人员不熟悉native开发的情况下，会出现很多操作，比如绘制一个3000px的cell，cell重用符号滥用，在scrollView上强行拼view而不用tableView，等等，针对这些情况，你作为一个native的开发，怎么避免或者及时预警？

【难度】🌟🌟🌟🌟
【出题人】 大灰灰-平安-iOS-上海

----------

## 常规类

![](http://ww1.sinaimg.cn/large/006tNc79ly1g3kk87fp8sj31hc0u0b29.jpg)

----------

10【问题】【iOS】如何设计一个圆形的按钮,点击区域也是圆形的?
【难度】🌟
【出题人】 微博@iOS程序犭袁

----------

11【问题】【计算机基础】16进制的  `FF+2` 后等于什么，有哪几种情况?
【难度】🌟
【出题人】 微博@iOS程序犭袁

----------


12【问题】【iOS】【C】AB线程执行到一半去执行C线程,用Objective-C/Swift和C各自怎么实现。给出代码示例。
【难度】🌟🌟🌟
【出题人】 微博@iOS程序犭袁

----------

13【问题】【算法】给出10W条人和人之间的朋友关系,求出这些朋友关系中有多少个朋友圈(如AB、BC、DE、E
F,这4对关系中存在两个朋友圈),并给出算法的时间复杂度。
【难度】🌟🌟
【出题人】 微博@iOS程序犭袁

----------


## hybrid 类 【medium级别】

![](http://ww2.sinaimg.cn/large/006tNc79ly1g3kjbq9c2yj31c00u015f.jpg)


----------

14【问题】如何自定义 Web 使用的 UserAgent ?

【难度】🌟🌟🌟
【出题人】 颜-物灵-iOS



//*one more thing*

* 比较通用的方法, 适用于 WKWebView 或者 UIWebview.

<!--- 

```swift
 /* 设置全局 UserAgent.

     注意:

     1.   此处设置了全局 UserAgent,但是并不会影响到 API 接口的访问.
          API 访问使用的 Alamofire 库,有自己的 defaultHTTPHeaders 来控制默认的 UA,
          并且支持使用自定义 Header 来定制 UA 的格式.

     2.  此方法必须在 Webview 初始化之前调用,否则 Webview 第一次加载时获取不到自定义的 UA.
     */
    fileprivate func setupGlobalWebviewUserAgent() {
 
        let originalUserAgentKey = "WebOriginalUserAgentKey" // 存储原始UA的KEY.

        var originalUserAgent:String? = UserDefaults.standard.string(forKey: originalUserAgentKey)

        if originalUserAgent == nil {
            let webview = UIWebView()

            if let webOriginalUserAgent = webview.stringByEvaluatingJavaScript(from: "navigator.userAgent") {
                /* 存储下原始的 UA. 避免多次进入 Webview 时,重复多次添加自定义 UA. */
                UserDefaults.standard.register(defaults: Dictionary(dictionaryLiteral: (originalUserAgentKey, webOriginalUserAgent)))

                originalUserAgent = webOriginalUserAgent
            }
        }

        completeUserAgent = originalUserAgent?.appending(customUserAgent) ?? originalUserAgent ?? ""
        
        if #available(iOS 9.0, *) {// iOS 9 以后,就使用新的 API 设置方法,不再直接全局修改.
            /* 旧版的UserAgent偏好设置要移除. iOS11.3之后, WKWebview第一次请求会优先使用 偏好设置中的 UserAgent.
             */
            UserDefaults.standard.remove("UserAgent")
            return
        } else{
            let dictionary = Dictionary(dictionaryLiteral: ("UserAgent", completeUserAgent))
            UserDefaults.standard.register(defaults: dictionary)
        }
    }
```


* iOS9 之后, WKWebview 最好使用新的 API, 不然部分系统适配会有问题,可能拿不到自定义的 UserAgent.

```swift
        if #available(iOS 9.0, *) {
            self.webview.userAgent
        }
```

-->




----------

15【问题】嵌套进native的 web 页面，如何展示用户相册图片?

【难度】🌟🌟🌟
【出题人】 颜-物灵-iOS



//*one more thing*

<!--- 

 (思路供参考.我验证过,可行)

* 调用系统相册, 从用户手机获取图片 assetId. (native)
* 根据 assetId,  找到对应图片,根据方向信息, 正确旋转图片后, 以缩略图形式,存储到沙盒缓存目录.(native)
* 将 assetId 传递给 web,未来用作 图片原图 "路径"; 将缩略图地址,传给 web,用作直接展示到UI上的缩略图地址.(native -> web)
* 使用 <image> 标签,显示缩略图,  正常显示,需要在图片路径前拼接 "file://"(web)
* 根据需要,将 assetId 回传给 native, 以完成进一步的后续交互, 如自定义图片裁剪,上传高清图等.(web -> native)

-->


----------


16【问题】 如何实现 ReactNative 代码的动态更新?

【难度】🌟🌟🌟
【出题人】 颜-物灵-iOS

//*one more thing*

<!--- 

(思路供参考.我验证过,可行)


* 将 ReactNative 引擎, 正确引入项目中.
* 配置 main.bundle 代码路径时, 路径支持动态根据server配置获取.
* 有新更新, 本地打包生成 main.bundle, 并通过 Server 下发给 App.


-->


----------


 17【问题】【 Lua 实现 App 动态化方案】如何在 iOS 项目中,集成 luajit, 实现特定业务逻辑的动态更新.

【难度】🌟🌟🌟
【出题人】 颜-物灵-iOS



//*one more thing*

<!--- 

(仅供讨论, 个人对 lua 比较钟爱, 获取能找到更多的小伙伴)

简单描述下: lua 最吸引我的一点是: 它可以真正 "同步" 地 和 native API 在同一线程中 高效通信.  这一点, 是 JS, Flutter , 不太容易做到的一点.

* 引入: 基于源码编译 luajit 为 .a, 引进项目中.(极小, 不到300kb, 就可以集成一个独立的完整的脚本引擎)
* 通过 C 文件, 桥接 lua 和 objc. lua 可以指定暴露给 native 的方法, native 也可以根据需要暴露一些常用的安全性要求不高的方法, 如 文件管理相关的 API.
* lua 源文件中,编辑为字节码文件, 通过 Server 下发给 App. App 根据特定逻辑,加载指定的 lua 文件,来实现特定业务的动态管理.



-->


----------

 18  【问题】【iOS】【hybrid】调用 js 绘图库的情况下，调用 js 绘图通过以下方式调用会出现什么情况, 该怎么解决

 ```Objective-C
- (void)webViewDidFinishLoad:(UIWebView *)webView {
     // 调用 js 绘图
}

 ```

// 或者

 ```Objective-C
- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation {
    // 调用 js 绘图
}
 ```



【难度】🌟🌟
【出题人】 PlutoY-广州YY

----------


19  【问题】【iOS】【hybrid】WKWebView 加载本地文件如何做兼容？

【难度】🌟🌟
【出题人】PlutoY-广州YY


----------




Posted by [微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)  
原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)
<p align="center"><a href="http://weibo.com/u/1692391497?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/1692391497/b46c844b/1.png"/></a></a>


----------

 <p align="center">
One more thing...
 </p>
 <p align="center">
【非礼勿视】以下为彩蛋部分，建议28岁以上男性观看
 </p>

----------




![](https://ws2.sinaimg.cn/large/006tNc79ly1g31yzzirxdj31900u018o.jpg)





![](https://ws3.sinaimg.cn/large/006tNc79ly1g31z1hbgzcj31b40u07g9.jpg)

<!--- 




//*one more thing*


![](https://ws4.sinaimg.cn/large/006tNc79ly1g31z0andosj31az0u0ak0.jpg)

![](https://ws4.sinaimg.cn/large/006tNc79ly1g31z13fmnxj31ar0u0dro.jpg)
![](https://ws3.sinaimg.cn/large/006tNc79ly1g31z1s2jvzj31b30u0k3k.jpg)

-->


# [iTeaTime(技术清谈)]( https://github.com/ChenYilong/iOSInterviewQuestions/issues/127)【000期】【代号：技术清谈】

----------


<!--- 

<p align="center">
<a href=""><img src="https://img.shields.io/badge/pod-v1.21.x-brightgreen.svg"></a>
<a href=""><img src="https://img.shields.io/badge/Swift-compatible-orange.svg"></a>
<a href=""><img src="https://img.shields.io/badge/platform-iOS%207.0%2B-ff69b5152950834.svg"></a>
<a href="https://github.com/ChenYilong/CYLTabBarController/blob/master/LICENSE"><img src="https://img.shields.io/badge/license-MIT-green.svg?style=flat"></a>
</p>

-->

<p align="center">
<a href="https://github.com/ChenYilong/iOSBlog/releases.atom"><img src="https://img.shields.io/badge/RSS feed (full text feed)-订阅我的博客更新-yellow.svg"></a>
</p>
<p align="center">
<a href="https://github.com/ChenYilong/iOSBlog/issues/21"><img src="https://img.shields.io/static/v1.svg?label=QQ%E3%80%81Telegram%20Group&color=blue&message=%E7%82%B9%E5%87%BB%E8%8E%B7%E5%8F%96QQ%E3%80%81Telegram%E7%BE%A4%E4%BF%A1%E6%81%AF&color=green"></a>
</p>


<p align="center">
<a href="https://twitter.com/stevechen1010"><img src="https://img.shields.io/twitter/url/http/shields.io.svg?style=social&maxAge=2592000"></a>
<a href="http://weibo.com/luohanchenyilong"><img src="http://i67.tinypic.com/wbulbr.jpg"></a>
</a><a href="https://t.me/iosobjc"><img src="http://i66.tinypic.com/of2hbn.jpg"></a></a> 
</p>


----------


![](http://ww2.sinaimg.cn/large/006tNc79ly1g4x1lrjkpuj31sr0q2tc0.jpg)


----------


i组织来源
----------

英文名：iTeaTime
中文名：技术清谈/i组织来源

i组织来源：最初来自“iOS开发-多线程交流”的微信群，最后演变为“iTeaTime(技术清谈)”群，此群500人已满，不再加人。


往期清谈汇总
----------
 

- [《技术清谈--已发布，附带答案》]( https://github.com/ChenYilong/iOSInterviewQuestions/issues?q=is%3Aissue+is%3Aopen+label%3Awiki) 
-  [《技术清谈--未发布，不一定附带答案》]( https://github.com/ChenYilong/iOSInterviewQuestions/issues?q=is%3Aissue+is%3Aopen+label%3Anote ) 


中文名：技术清谈
----------


就是“清谈误国，实干兴邦”里的“清谈”，群里讨论的技术，不考虑生产力。如果我们讨论的技术刚好有生产力，那就太幸运了。绝对算是彩蛋了。

引用 《清談- 维基百科》 的解释：

> 清谈，又称清言，流行于魏晋时期。汉末黄巾之乱，中央政权瓦解，地方势力抬头，儒家经典随之衰落，乱世之中，老庄思想逐渐抬头，一般文人不谈俗事，不谈民生，祖述老庄立论，大振玄风，最常谈的是《周易》、《老子》、《庄子》称为“三玄”。何晏、王弼、夏侯玄、王衍、郭象等人皆有辩才。何晏“好老庄言”，认为“天地万物，皆以无为为本”，和夏侯玄、王弼等倡导玄学，成为一时风气，往往废寝忘食，甚至可以把人累病谈死。“当时名士清谈，特如斗智。”是后世国学大师钱穆对当时清谈的叙述。

用于表明，我们讨论的问题，用于探究问题的本质，远离功利目的，以技术讨论过程的乐趣为主。


英文名：iTeaTime
----------

> IT + TeaTime = iTeaTime

 谐音 IT Time，意义为 It's tea-time for IT Gossip. 与中文名意义相近，取清谈之意。
 


 Tea Time 原意为茶话时间，茶歇时间，就是没事闲聊，讨论技术，偶尔水水群放松下。与此群清谈之风相近。



技术清谈 slogan
----------

热情让技术更严谨，
技术让优异更稳定。

形式
----------

三策三答，问答形式。

其他
----------

提出问题的能力，远胜于搜索答案、收集知识的能力。能提出问题，就证明你已经掌握一半了。这便是主动思考与被动思考的区别。



壁纸
----------


横屏字-light mode 壁纸-WeChat微信版 |横屏字-light mode 壁纸 | 横屏字-dark mode 壁纸
:-------------:|:-------------:|:-------------:
![](http://ww3.sinaimg.cn/large/006tNc79gy1g4z7uvs8vxj30u01sxgls.jpg) |![](http://ww4.sinaimg.cn/large/006tNc79gy1g4z9ufbu6rj30u01sxaaa.jpg)|  ![](http://ww2.sinaimg.cn/large/006tNc79gy1g4z9fdknxlj30u01sx74m.jpg)



微信聊天背景
--------------------------------------------


`群专属壁纸-第06版（绝对不挡群昵称版本+适配非齐刘海版本+适配iPhoneX版本）.jpg`

竖屏字- light mode | 竖屏字- dark mode  | 居中版本
:-------------:|:-------------:|:-------------:
![](http://ww4.sinaimg.cn/large/006tNc79gy1g4zfxzti30j30u01sxjrq.jpg) |   ![](http://ww4.sinaimg.cn/large/006tNc79gy1g4zfy9mjaoj30u01sx3yy.jpg)| ![](http://ww2.sinaimg.cn/large/006tNc79gy1g4zfxm6cvwj30u01sxmzx.jpg)



#  [iTeaTime(技术清谈)]( https://github.com/ChenYilong/iOSInterviewQuestions/issues/127)【-003期】【代号：模仿游戏之窃听风云】


----------

![](http://ww4.sinaimg.cn/large/006tNc79ly1g4wvr2s23oj31sr0q242m.jpg)

<!--- 

![](http://ww2.sinaimg.cn/large/006tNc79ly1g4wvsss7rkj31rx0p4whk.jpg)


-->

----------



![](http://ww3.sinaimg.cn/large/006tNc79ly1g39f83p8i9j31hc0u0b13.jpg)



![](https://ws2.sinaimg.cn/large/006tNc79ly1g33rqh0fvvj30m80irdhc.jpg)


----------

本期特辑：iOS应用安全与逆向之攻防技能
本期出品人：微博@iOS程序犭袁 
本期出题人（排名不分先后）： 

- molon-杭州
- Leo-磊子@微链客
- 鹅喵-便利蜂移动端
- SAGESSE-iOS-深圳
- 风扬-拍拍贷-SOi

注：题目难度五星为满分，以下题目从易到难依次排列。

----------



## 逆向类



![](http://ww2.sinaimg.cn/large/006tNc79ly1g3bcivd3zij315o0rs11o.jpg)

----------



1【问题】【逆向】为什么我们可以在应用编译好之后还能通过 hack 手段塞入一些额外逻辑，原理是什么？


//*one more thing*

<!--- 
【提示】文件结构，链接库相关
-->


【难度🌟】【出题人：molon-杭州】

----------

2【问题】【逆向】【C】【Objective-C】【ios】逆向C语言应用时，看到的堆栈信息有可读的函数名也有不可读的函数地址，为什么呢？那在逆向 Objective-C 应用时，为什么就能实现看到绝大多数可读函数名？
【难度🌟】【出题人：molon-杭州】

/*one more thing*/

<!--- 

【提示】 链接库导出函数，符号信息以及OC的语言特性相关


-->

----------

3【问题】【iOS】
针对iOS应用逆向的常规手段而言，
回答问题：

- 如何判断我们的 APP 被逆向软件注入，被 hook/hack 了？
- 如何加固防止别人破解我们的 APP ？
- 请给出加固的方法，并阐述其原理。

【难度🌟🌟】【出题人：Leo-磊子@微链客 和 molon-杭州】

----------

4【问题】【iOS】App 如何加壳，破壳？AppStore下载的包为何需要砸壳？
【难度🌟🌟】【出题人：SAGESSE-iOS-深圳 和 风扬-拍拍贷-SOi】

----------

5【问题】【iOS】常见的反调试手段有哪些？
【难度🌟🌟】【出题人：鹅喵-便利蜂移动端】
 
----------

6【问题】【iOS】【验证码】【逆向】某应用的注册验证码接口为了避免恶意滥用，对 POST 数据进行了加密，那倘若我们是攻击者，要通过逆向手段破解这种防护手段保证攻击的持续进行，应该从哪着手呢？
【难度🌟🌟】【出题人：molon-杭州】

/*one more thing*/

<!--- 
2星 (fishhook CCCrypt方法着手破解加密方式。 或者直接不破，在加密前就构造数据，让应用自己爱怎么加密就怎么加密。)
-->

----------

7【问题】【iOS】【验证码】【逆向】如果遇到上述的攻击者，应用开发者还能有什么额外手段去增强防护呢？说到底，解决验证码接口攻击的最终并且一定有效的手段应该是什么呢?
【难度🌟🌟】【出题人：molon-杭州】

----------

8 【问题】【逆向】因为逆向的强大，应用在攻击者手中终归玩物，那网络应用开发者在与其对抗的过程中最大的优势是什么呢？
【难度🌟🌟🌟】【出题人：molon-杭州】

 ----------

9【问题】【汇编】arm64位系统里的通用寄存器有多少个，分别是干什么的？什么是状态寄存器？
【难度🌟🌟🌟】【出题人：风扬-拍拍贷-SOi】
 
----------

## 常规类





![](https://ws1.sinaimg.cn/large/006tNc79ly1g33rlxyjisj31hc0sb7cp.jpg)





----------

10【问题】【iOS】罗列出几个你能立马从崩溃堆栈中识别出的崩溃类型特征，给出调试方法，重点介绍如何调试 `BAD_ACCESS` 错误。
【难度🌟🌟】【出题人 微博@iOS程序犭袁】

----------


11【问题】【iOS】组件化中，拆库时遇到递归调用问题﻿，如何解决。
【 难度🌟🌟🌟】

/*one more thing*/

<!--- 

依赖倒置原则，加一层接口完事

第2个应该问的是组件化的 。

感觉是想问符号化

atos啥的

-->

----------


12【问题】【iOS】评价下以下代码：

 ```Objective-C
if (Thread.isMainThread) {
            self.doSomething();
        } else {
            DispatchQueue.main.sync {
                self.doSomething();
            }
        }

func doSomething() {
    print("\(Thread.current.isMainThread)")
    }
 ```
【 难度🌟🌟】【出题人 微博@iOS程序犭袁】

----------

13【问题】【iOS】使用 CoreText API绘制文字“我是中国人”,要求字体大小18、颜色:“我是”黑色,“中国人“红色。【 难度🌟🌟🌟】

//*one more thing*

<!--- 

【答案】

[Z9527]:

 ```Objective-C
@Elon-阿里-北京iOS  CGContextRef context = UIGraphicsGetCurrentContext();
    
    /* 翻转坐标系*/
    CGContextSetTextMatrix(context, CGAffineTransformIdentity);
    CGContextTranslateCTM(context, 0, self.bounds.size.height);
    CGContextScaleCTM(context, 1.0, -1.0);
    
    NSMutableAttributedString *attrString = [[NSMutableAttributedString alloc] initWithString:@"我是中国人" attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:18]}];
    [attrString addAttribute:NSForegroundColorAttributeName value:[UIColor blackColor] range:NSMakeRange(0, 2)];
    [attrString addAttribute:NSForegroundColorAttributeName value:[UIColor redColor] range:NSMakeRange(2, 3)];
    
    CTFramesetterRef frameSetter = CTFramesetterCreateWithAttributedString((CFAttributedStringRef)attrString);
    CGPathRef path = CGPathCreateWithRect(CGRectMake(0, 0, self.bounds.size.width, self.bounds.size.height), NULL);
    CTFrameRef frame = CTFramesetterCreateFrame(frameSetter, CFRangeMake(0, [attrString length]), path, NULL);
    
    /* 绘制文本*/
    CTFrameDraw(frame, context);
    
    CFRelease(frame);
    CFRelease(path);
    CFRelease(frameSetter);
 ```

-->



----------

14【问题】【iOS】组件化拆分里边string的category拆分成几个类，以什么纬度拆的，除了string外其他category有几个类，分别是做什么的
【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】

----------


15【问题】【iOS】CoreData中几个核心概念及关系阐述下，第三方库 MagicRecord 的读写操作是在什么线程中执行的？为何有人如此讨厌使用CoreData，CoreData适合什么样的项目？CoreData如何进行数据库更新操作？【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】


----------

Posted by [微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)  
原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)
<p align="center"><a href="http://weibo.com/u/1692391497?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/1692391497/b46c844b/1.png"/></a></a>

----------


 <p align="center">
One more thing...
 </p>
 <p align="center">
【非礼勿视】以下为彩蛋部分，建议28岁以上男性观看
 </p>

----------


![](http://ww4.sinaimg.cn/large/006tNc79ly1g39hd5w01mj31e80u0qby.jpg)






#  [iTeaTime(技术清谈)]( https://github.com/ChenYilong/iOSInterviewQuestions/issues/127)【-002期】【代号：模仿游戏之寻龙诀】


----------

![](http://ww4.sinaimg.cn/large/006tNc79ly1g4wvr2s23oj31sr0q242m.jpg)

<!--- 

![](http://ww2.sinaimg.cn/large/006tNc79ly1g4wvsss7rkj31rx0p4whk.jpg)


-->

----------


![](https://ws1.sinaimg.cn/large/006tNc79ly1g3486qe19oj31c00u04kb.jpg)

----------

本期特辑：iOS应用安全与逆向之基础原理
本期出品人：微博@iOS程序犭袁 
本期代号：模仿游戏之寻龙诀
本期出题人（排名不分先后）： 

- 风扬-拍拍贷-SOi
- SAGESSE-iOS-深圳
- 鹅喵-便利蜂移动端
- 微博@iOS程序犭袁 

注：题目难度五星为满分，各个类目下题目从易到难依次排列。

----------


## 逆向类


![](https://ws1.sinaimg.cn/large/006tNc79ly1g347ziq33pj30u00uq1iy.jpg)

----------
1【问题】【iOS】对称加密有哪些？描述其原理。
【难度🌟】【出题人：风扬-拍拍贷-SOi】

----------

2【问题】【iOS】随便找一个正在运行的程序，给  `objc_msgSend`  下符号断点。程序断下之后，写一条 lldb 指令打印当前调用方法的  `selector` 
【难度🌟🌟】【出题人：鹅喵-便利蜂移动端】

【回答】
要看具体 cpu 架构
读取第二个参数对应的寄存器：

 `objc_msgSend`  两个固定参数， `selector` 第二个，存放在 `x0` 、 `x1` 寄存器中。

【SAGESSE-iOS-深圳】给出答案：
 
平台 | x86_64 |  arm | 通用的
:-------------:|:-------------:|:-------------:|:-------------:
命令 |  `po (char*)$rsi`  |  `po (char*)$x1`  |  `po (char*)$arg2` 
参考 | [《x86-64传参规则》]( https://blog.csdn.net/Maxmalloc/article/details/82959801 )  |  [《ARM子函数定义中的参数放入寄存器的规则》]( https://blog.csdn.net/guiguzi1110/article/details/43338803 ) | 所谓通用，是指在 `arm` 和在 `x86_64` 下用 `po (char*)$arg2` 都能得到预期效果。 `$arg1`-`$argN` 是第1到第n，无论什么框架和约定(lldb处理过了)，：arg1 到 argN 是 Xcode9/10 添加的功能，在 Xcode8 或者之前需要用 `rsi` 和 `x1` 。


【鹅喵-便利蜂移动端】写成 `x/s $arg2` 也行， `x/s` 比较好打   `po (char*)$arg2` 或者   `po x/s $arg2` 。

/*one more thing*/

<!--- 

https://blog.csdn.net/Maxmalloc/article/details/82959801

-->

上述讨论与调用约定有关，相关概念：
 `rdi` 、 `rsi` 、 `rdx` 、 `rcx` 、 `r8` 、 `r9` 


参考文档：


 - [**Friday Q&A 2011-12-23: Disassembling the Assembly, Part 2**]( https://www.mikeash.com/pyblog/friday-qa-2011-12-23-disassembling-the-assembly-part-2.html ) 
 -  [**How to read registers: RAX, RBX, RCX, RDX, RSP. RBP, RSI, RDI in C or C++?**]( https://stackoverflow.com/questions/20575739/how-to-read-registers-rax-rbx-rcx-rdx-rsp-rbp-rsi-rdi-in-c-or-c ) 
 -  [**Assembly Register Calling Convention Tutorial**]( https://www.raywenderlich.com/615-assembly-register-calling-convention-tutorial ) 
 -  [**6. Advanced gdb Features**]( http://www.unknownroad.com/rtfm/gdbtut/gdbadvanced.html ) 
 
 
----------

3【问题】【iOS】应用中使用了一个外部动态库的符号，这个符号的具体实现被查找了几次？为什么？
【难度🌟🌟🌟】【出题人：鹅喵-便利蜂移动端】
 
 
 【提示】看过 `fishhook` 原理应该都知道 `lazy symbol binding`。

----------

4【问题】【iOS】Objective-C 和 C 在 iOS 中的区别，
尝试从以下角度分析两者区别：

 - 汇编角度
 - 系统加载两者的区别
 - 存储区别

【难度🌟🌟🌟】【出题人：风扬-拍拍贷-SOi】

/*one more thing*/

<!--- 

【提示】这个是逆向和正向最典型的题目之一，也是我之前做正向开发的时候最常问人家的一个问题，很开放，可以由浅入深可以到很底层，也是由动态到静态的一道题。题目比较常见，但是从来没有一个人能在正面面试中回答上来。逆向题目，一般没什么场景，都是考察一些基础的知识点，都是逆向的基础，主要看的是玩没玩过汇编、Mach-O熟悉不熟悉。
-->

【出题人提示】
汇编角度：  汇编调用OC和C的过程分别是什么
2、加载区别：
 OC：消息转发  
 自定义C函数：直接调用地址
 系统C函数：共享缓存库
3、存储区别：MochO-中存储的区别 

//TODO:  待讨论部分
第二点感觉覆盖不全，自己写的C代码就是调用库了吧？

【答案】



1. OC 是 C 的超集，在 C 的基础上加入了面向对象编程范式的支持，为了支持这一范式，需要运行时支持。所以方法调用会在编译期转换为对运行时函数的调用，例如 objc_msgSend 系列函数。ARC 内存管理也需要运行时的支持，在编译期会自动插入对应调用。
2. 所有包含了 OC 代码的可执行文件会依赖 libobjc.A.dylib，这个动态库中包含了处理嵌入在可执行文件内辅助运行时运行的一些数据结构（例如加载类、方法列表、+load的执行等）的函数。libobjc.A.dylib 在被 dyld 加载时会向 dyld 注册一个映像加载的钩子函数，使得被动态载入的可执行文件同样可以被 libobjc.A.dylib 预处理。
3. 类与方法列表、CFString 对象等数据，被存放在了可执行文件中，例如各种 __objc 开头的区段。
内存布局方面，除了 TaggedPointer、通过各种方式 bridge 过来的其他库中创建的之外的对象，都只能通过 alloc 在堆上分配内存


----------

5【问题】【汇编】arm64位系统里的通用寄存器有多少个，分别是干什么的？什么是状态寄存器？
【难度🌟🌟🌟】【出题人：风扬-拍拍贷-SOi】
 
----------

6【问题】【iOS】动态下发一个经过苹果签名的动态库是否可以加载(允许使用dlopen), 为什么？ 
【难度🌟🌟🌟🌟】【出题人：SAGESSE-iOS-深圳】

【出题人提示】
1: 首先，动态下载肯定不在bundle里， 只能在沙盒里面
2: 从题目条件得知是经过苹果签名的，所以代码签名这一步是通过的
3: 可以通过lldb测试

----------

7【问题】【iOS】iOS 是如何通过代码签名确保应用安全的？ 
【难度🌟🌟🌟🌟】【出题人：SAGESSE-iOS-深圳】

----------

8【问题】【iOS】分别给 objc_msgSend 和你要调用的方法下符号断点，第一次断下的时候可以在调用栈中看到 objc_msgSend。第二次断下的时候，调用栈里只有你要调用的方法了。objc_msgSend 哪儿去了？
 【难度🌟🌟🌟🌟】【出题人：鹅喵-便利蜂移动端】

【提示】其实是想讨论一下如何控制堆栈平衡以及 `backtrace` 背后的原理：
  
  1. 调试器中看到的调用栈是怎么来的
  2. 如何通过汇编做到不带栈帧的调用


【答案】

跳板函数/蹦床函数/trampoline function 正解。

首先，如果用了 bl 指令的话 lr 里面会存储返回地址的，但是串成串还要靠栈帧结构。
 `x86_64` 有个一个 `rbp` , 每一次 call 都会压入 `rbp` , 就会形成一帧帧调用栈, 然后通过 `rbp` 可以朔到最开始。所以展示 `backtrace` 只要遍历栈帧就可以了，首个栈帧靠 ip 确定。

普通的函数是call调用, 而objc_msgSend 是长跳转(jump)，估计是为了减轻栈溢出的压力, 另外尾递归也是长跳转



----------

Q-A环节
Q：[腾讯-刘翅鹏]第8题是指定cachelookup吗？
A：[鹅喵-便利蜂移动端]不是，CacheLookup 里面应该是顺带做了这个事

![](http://ww4.sinaimg.cn/large/006tNc79ly1g39139oekoj31hf0u0nd3.jpg)
 
 参考 [《[腾讯-刘翅鹏]的笔记》]( https://chipengliu.github.io/2019/04/07/objc-msg-armd64/ ) 



Q：是否如下图所言：
![](http://ww2.sinaimg.cn/large/006tNc79ly1g3919114gcj31bm0mewm1.jpg)

A：
[鹅喵-便利蜂移动端]是的，不过 cdecl 调用约定是被调用者清理栈空间，所以纯汇编写的时候要注意平衡

A：【欧阳大哥】上面那个红框中的结论有待商榷吧。
如果函数调用发生在最后一条指令时不能用bl而只用用b的原因是因为：执行bl指令时会把当前指令的下一条指令保存到LR寄存器中。问题是因为这是最后一条指令了，下一条指令是一条未知指令，所以如果仍然用bl指令的话，那么函数返回时所跳转的地址将可能是一条无效的地址了。。而不是所谓的栈溢出的现象。

Q:[SAGESSE-iOS-深圳] 我突然想到个问题，栈顶的第一个条数据是rbp吗,
A:[鹅喵-便利蜂移动端]应该是栈上最后一个申请的变量，rbp 是当前栈帧的顶端，所以函数退出清理栈的时候不需要记住你申请了多少栈空间，只要 movq %rbp, %rsp 就可以了。*(rbp + 8) 是上个栈帧的 rbp。



 ```Objective-C
*(void*)($rbp + 0) 上一个栈帧的地址
*(void*)($rbp + 8) 返回地址


 ```
 
然后通过返回地址可以就可得到函数的信息

![](http://ww4.sinaimg.cn/large/006tNc79ly1g39ce0wuv3j31yy0ms4qp.jpg)


Q: 也就是说：第一个调用的函数，当前栈的rbp是啥？ `*(rbp)` 。

A:  刚才调试了一下，是个0.

Q-A结束

----------

----------


-  [《深入iOS系统底层之程序中的汇编代码》]( https://www.jianshu.com/p/f649285668cd?utm_campaign=hugo&utm_medium=reader_share&utm_content=note&utm_source=weixin-timeline&from=timeline&isappinstalled=0 ) 
-   [《深入iOS系统底层之函数调用》](https://juejin.im/post/5ce1fe36e51d451075366ef1) 

## 常规类



----------


9【iOS】kengny 是一名产品经理，他们的 app 是一款类似美团的产品，最近他和一些店家进行了PY交易，要求用户到他们家店附近的时候，立即收到通知。
小地和大风哥，会上听到需求后，小地立即说：这个需求做不了。大风哥会上没说话，产品经理说，明天上线，怎么实现我不管，散会。

会后，大风哥悄悄说对小地说要做也可以，可以这样做：_______。

请补充填空，要求给出详细理由，包括技术实现细节，如有必要贴出示例代码。

【 难度🌟】【出题人 微博@iOS程序犭袁】




已知 iOS 定位方法有：GPS定位、基站蜂窝定位、Wi-Fi定位等多种定位方法，

精准度优先级可以为：

- 首选是 GPS，
- 然后是 GPRS（IP 和 routetrace ），蜂窝网络进行 routetrace 可以获取到第一个接入点
- 然后是 Wi-Fi（IP 和 routetrace 和附近的 Wi-Fi 名），SSID 名的优先级比较低，主要是靠routetrace
- 然后是附近的蓝牙设备

如果结合以上多种定位方法，这四个方案是同时的，组合起来可有效命中率。


蓝牙相关的例子：
好多超市有蓝牙定位，还有商场的室内定位，都是基于蓝牙

还有基于Apple设备蓝牙配对效果的：

![](http://ww3.sinaimg.cn/large/006tNc79ly1g392cpo9m4j318q0s841b.jpg)

![](http://ww3.sinaimg.cn/large/006tNc79ly1g392d3umf0j31ai0fmtcw.jpg)

其中Wi-Fi SSID部分注意事项：


即使申请了权限，也只能在系统的Wi-Fi列表里获取所有Wi-Fi信息，APP内好像也是不能获取的。

正如 [《iOS NetworkExtension 框架使用笔记》]( https://blog.csdn.net/i374711088/article/details/51655526 ) 所说：

> ps1:如果你运行完,没看到打印。心想被坑了,那就拿
起你的手机进入到设置,打开【无线局域网】设置页
面。这时候你再看看控制
ps2:苹果这么搞也是不好玩,还要进入到他自己的设置
页面才能获取wifi列表,坑一~

此类的APP也是有引导用户这么做的，第一次不行，需要重新进一次吧：
而且有人反应该权限现在申请好像比较难，周期较长，半个月还不一定能申请好。



 ![](http://ww2.sinaimg.cn/large/006tNc79ly1g392n64xkjj30u01sz7wi.jpg)
 
 
涉及的API：

 -  [**Apple-Developer-Documentation-API-NEHotspotHelper**](https://developer.apple.com/documentation/networkextension/nehotspothelper) 
 
GPS 部分采用地理围栏相关的API：

适合横向的大范围坐标，但比如写字楼、商场等纵向的情景，纯定位不是很理想。需要借助其他措施。

- [**Apple-Developer-Documentation-API-Monitoring the User's Proximity to Geographic Regions**](https://developer.apple.com/documentation/corelocation/monitoring_the_user_s_proximity_to_geographic_regions) 
- [**Apple-Developer-Documentation-API-UNLocationNotificationTrigger**](https://developer.apple.com/documentation/usernotifications/unlocationnotificationtrigger) 


UNLocationNotificationTrigger 部分的限制：

> Region-based notifications aren't always triggered immediately when the edge of the boundary is crossed. The system applies heuristics to ensure that the boundary crossing represents a deliberate event and is not the result of spurious location data. For more information about the heuristics that are applied, see Monitoring the User's Proximity to Geographic Regions.



----------

10【问题】【C++】以下输出结果是什么？分析原因

 ```C++

class A{

public:
int m;
void foo1(){ cout<<“hello”<<endl;}
void foo2(){cout << “hello”<< m <<endl;}
virtual void foo3(){cout << “hello”<<endl;}

};

A*p =NULL;
p->foo1();
p->foo2();
p->foo3();
 ```
 
  【难度🌟🌟】【出题人：欧阳大哥-美团-北京】





【答案】

【SAGESSE-iOS-深圳】：

错误分析:
foo1和foo2是静态成员函数，调用时编译器会直接生成调用地址, 因为不会访问this指针所以调用不会出现问题；但foo2有访问成员m的操作，这就需要访问this指针了所以会出现段错误; foo3因为是虚函数，所以需要访问虚表，但this是空指针，所以调用也会出现段错误; 

输出结果:

因为c++是一个跨平台的语言，在每个平台的 STL 实现都有可能不一样，所以输出结果会有所不同。
在foo2中的 `cout << "hello" << m <<endl;` 会被拆分成:

 ```C
cout << "hello";
cout << m;
cout << endl;
 ```

当执行到 `cout << m;` 时，会因为 `this->m` 而发生段错误，这时的 `"hello"` 到底有没有输出呢?

第一种情况: 在 Xcode 中直接运行，这时 `stdout` 直接输出到 Xcode 的控制台，它的输出是即时的, 所以有溃之前就己经输出，所以最终输出结果是

 ```Objective-C
hello
hello
段错误
 ```

第二种情况: 在 Xcode 中编译，然后在终端中运行，这时输出不是即时的，写入的数据是缓存在内存里，只有当调用 `endl(flush)` 时才会真正的去写入文件(io)，所以最终输出结果是

 ```Objective-C
hello
段错误
 ```


以下为其他同学的讨论部分：

//TODO:  待系统整理

[鹅喵-便利蜂移动端]:


 ```Objective-C
hello
hello
段错误
 ```


原因：[鹅喵-便利蜂移动端]cpp的方法调用等价于method(this,args...)，只要不访问成员变量或vtable就不会崩


[SAGESSE-iOS-深圳]foo1和foo2是静态成员函数，调用时编译器会直接生成调用地址, foo3因为是虚函数，所以需要访问虚表，但p是空指针，所以会直接段错误, 顺便一提如果foo1和foo2有访问成员m的操作结果又不一样了


【Never-成都-太合乐动-iOS】：
foo1 和 foo2 直接地址 调用
![](http://ww2.sinaimg.cn/large/006tNc79ly1g392yqiz2cj31a40eyafa.jpg)


【yx@美团北京】：
foo2的hello确实也能正常输出 一直到尝试访问m实例变量挂了
![](http://ww4.sinaimg.cn/large/006tNc79ly1g392zizw8cj31ca0t2tif.jpg)


看你用的g++ 编译器的行为可能不一样

编译器不重要，实现在STL库里面

xcode debugger的控制台输出是即时的


实测没有
重点是没有执行到endl


 ```Objective-C
cout << "hello";
cout << m;
cout << endl;
 ```

foo3 因为是虚函数 会牵扯到 虚表操作

Xcode 可以输出，xcode debugger帮助flush了。
 `std::endl` 一定会刷，其他情况一般不会立即刷。

![](http://ww2.sinaimg.cn/large/006tNc79ly1g390rn7jq2j313t0u0qgm.jpg)

![](http://ww4.sinaimg.cn/large/006tNc79ly1g390rzlykwj30ho0ayaan.jpg)

![](http://ww4.sinaimg.cn/large/006tNc79ly1g390s5xfr6j30du0acgmt.jpg)

以下为不同环境的输出结果：

![](http://ww2.sinaimg.cn/large/006tNc79ly1g390lcz15ej30se0oigqa.jpg)
![](http://ww2.sinaimg.cn/large/006tNc79ly1g390suqbqgj31d60qaqga.jpg)
![](http://ww4.sinaimg.cn/large/006tNc79ly1g390t0pngkj31em0u0k22.jpg)


----------

11【iOS】CoreData中几个核心概念及关系阐述下，第三方库 MagicRecord 的读写操作是在什么线程中执行的？为何有人如此讨厌使用CoreData，CoreData适合什么样的项目？【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】

----------

12【iOS】kengny 是一名产品经理，他平时有两大爱好：第一，到处在各类群里求买企业证书，第二，运营着一款小成本的视频 app，迫于成本压力，一般只会有两个人参演。他向大风哥提出需求，说希望能够在用户退到后台后，上传日志记录用户什么时候进入的后台，便于记录用户使用时长。并要求退到后台后依然能够下载小视频，这样用户上班点击下载按钮，回到家躺床上打开 APP 就能看了。并且要求把后台下载成功率定为大风哥的KPI。

如果你是大风哥，你将如何应对。必要时贴出示例代码。

【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】



【答案】

关于后台下载，我们研究的时候，很有必要把 iOS7 和 iOS7 之后的方案分清楚。
因为即使是现在，我们的 APP 最低版本都是iOS9+，但现在网上很多答案都还是iOS7之前的方案，给读者产生了混淆与误导。

现在分几个部分解答：

 - iOS7前的陈旧方案
 - 大文件后台下载，用 [**Background Transfer service**]( https://developer.apple.com/documentation/foundation/url_loading_system/downloading_files_in_the_background ) 特性，涉及iOS11的新API，让请求等待网络正常后再自动尝试。
 - 小文件后台下载，用 BAR （ Background App Refresh）或 Remote notification


### iOS7前的陈旧方案

iOS7 之前后台下载方案十分不灵活，现在已经基本不再使用。下面做下介绍：

- 使用 `beginBackgroundTaskWithExpirationHandler` 函数，向系统申请最多10分钟来执行需要后台运行的操作
- 将 App 的后台运行模式设置为 audio 、VOIP、location、Newstand 等，无限制的在后台运行。


下面做下详细介绍：

（一）使用 `beginBackgroundTaskWithExpirationHandler` 函数，向系统申请一段时间来执行需要后台运行的操作，这种方法的缺点是，后台操作最多只能运行10分钟，超过10分钟之后App会休眠。使用这种方法需要APPNAME-info.plist中设置 `Application does not run in background` 为NO，然后在适当的时间调用 `beginBackgroundTaskWithExpirationHandler` 函数。


（二）将 App 的后台运行模式设置为 audio 、VOIP、location、Newstand 等，无限制的在后台运行。修改 `info.plist` -> `requried background modes`-> `App plays audio or streams audio/video using AirPlay` , 进入后台，播放无声音乐。前台后台一套下载流程，下载完成，更新数据；下载失败，重新下载尝试。这种方案审核风险较大，不建议使用。因为审核时是可以通过静态分析知道使用了哪些API的，如果一个程序本来就不是音乐类的，却使用了播放音乐的API后台播音乐，有可能就被拒绝，如果想要绕过这个限制，可以向APP增加播放音乐的功能，但这样实际是增加了无用功能。

总结：

第二种，只有极少数 APP 能够用到，一般 APP 无法使用；第一种，运行时间无法保证，无法进行下载恢复等操作，毫无实用性可言。故现在已经很少 APP 在使用上述方式。下面介绍更为实用的方案：

###  用 [**Background Transfer service**]( https://developer.apple.com/documentation/foundation/url_loading_system/downloading_files_in_the_background ) 特性实现大文件后台下载

注意： `NSURLSession` 是一个类蔟，不同系统版本实现上是有差异的。很多都要亲自实验一下，而且不同系统版本的行为也不太一样。建议不仅要阅读文档，而且要多多尝试调试。

当 App 使用了 [**Background Transfer service**]( https://developer.apple.com/documentation/foundation/url_loading_system/downloading_files_in_the_background )特性后，可以将一个下载任务交给系统的独立进程去下载，不管App在前台、休眠、以及crash，下载过程都在进行，因为是系统的独立进程在为App进行下载。

基本步骤：

使用 [`backgroundSessionConfigurationWithIdentifier:` ]( https://developer.apple.com/documentation/foundation/nsurlsessionconfiguration/1407496-backgroundsessionconfigurationwi ) 初始化的 configure 初始化一个后台下载使用的 session。
实现 [`NSURLSessionDelegate`]( https://developer.apple.com/documentation/foundation/nsurlsessiondelegate?language=objc ) 、 [`NSURLSessionTaskDelegate`]( https://developer.apple.com/documentation/foundation/nsurlsessiontaskdelegate)   、  [`NSURLSessionDownloadDelegate`]( https://developer.apple.com/documentation/foundation/nsurlsessiondownloaddelegate?language=objc ) 中的
  [`URLSession:task:didCompleteWithError:`]( https://developer.apple.com/documentation/foundation/nsurlsessiontaskdelegate/1411610-urlsession ) , 
[`URLSession:downloadTask:didFinishDownloadingToURL:`]( https://developer.apple.com/documentation/foundation/nsurlsessiondownloaddelegate/1411575-urlsession?language=objc) ,   [`urlSessionDidFinishEvents(forBackgroundURLSession:)`]( https://developer.apple.com/documentation/foundation/urlsessiondelegate/1617185-urlsessiondidfinishevents )  和其他业务需求的 protocol
实现 [`application:handleEventsForBackgroundURLSession:completionHandler:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622941-application?language=objc) 方法。


点击下载,创建 task 对象并开始：
  

 ```Objective-C
NSURLSessionDownloadTask *downloadTask = [ session downloadTaskWithRequest:[NSURLRequest requestWithURL: downloadURL];
 ```
  
后台下载成功调用相关代理方法，实现数据和 UI 更新；下载失败从 error 中查找 resumeData，重新开始下载。

----------

QA环节：

Q：下载能控制退到后台的下载速度么，在后台慢慢下，打开在前台全速

A：有的，configureation 里面有一个属性值 discretionary，就是控制的，在后台不占用设备性能的情况下进行下载。


Q：如果在前台，设了这个discretionary的值有用么，也会被系统控制下载速度？

A：没用了，里面强调的是 allows background tasks，如果需要具体限速的数值的话，是没有的，需要自己实现了。限速如果实现，应该是类似断点续传的思路。用suspend和resume做。


Q：后台下载是要用户开的吧？关掉了就只能用播放音乐了。URLSessionDownloadTask 和后台刷新开关有没有关系?

A：URLSessionDownloadTask 和后台刷新开关没有关系。同时，后台下载跟应用的进程没有关系了，是系统做维护的。，用第一种方案也是可以实现，即使用户手动关闭的app，最终也是可以下载成功的，但也不是说还会继续后台下载。

![](http://ww4.sinaimg.cn/large/006tNc79ly1g38slb1l2sj31g20580u8.jpg)

 ```Objective-C
@property(getter=isDiscretionary) BOOL discretionary;
 ```

([**Apple-Developer-Documentation-API-NSURLSessionConfiguration-discretionary**](https://developer.apple.com/documentation/foundation/nsurlsessionconfiguration/1411552-discretionary?language=objc) )

此属性设置为 YES 时，系统根据当前性能自动处理后台任务的优先级，以获得最佳性能 (仅background session有效)。根据文档可知：`allowsCellularAccess` 和 `discretionary` 被用于节省通过蜂窝连接的带宽。建议在使用后台传输的时候，使用 `discretionary` 属性，而不是 `allowsCellularAccess` 属性，因为它会把 Wi-Fi 和电源可用性考虑在内。

QA环节结束

----------


用户主动关闭的app，会保存 `resumedata` ，在后面启动的时候调用`didCompleteWithError`方法，  `error` 里有`resumedata`，可以持续下载。
这里有一个缺点就是，iOS11之前，如果因为没有网络导致系统下载失败了，系统即使唤醒了App，App也是没有办法下载的，然后App会进入休眠，即使后面有了网络，系统也不会继续下载，因为只要系统向App发出了失败的信号，除非App 调用resume函数来恢复下载过程，系统是不会自己恢复下载的。这里就需要用到本文提到的BAR （ Background App Refresh）模式，让App过一段时间被系统唤醒，然后App就可以去检查网络，当有网时恢复下载过程，恢复下载的原理类似于断点下载。

iOS11之后，可以采用下面API进行：

#### URLSession Adaptable Connectivity API

iOS11的重大更新，可以通过 `urlSession(_:taskIsWaitingForConnectivity:)`  让请求等待网络正常后再自动尝试。

![](https://ws2.sinaimg.cn/large/006tNc79gy1fjoxl26swrj315o0n6q3o.jpg)


#### URLSessionTask Scheduling API

通过  `URLSessionTask Scheduling API`  可以在 App 没有运行的时候下载内容，而手机也会结合实际电量，使用状态去决定是否执行。

![](https://ws2.sinaimg.cn/large/006tNc79gy1fjoxl1y1z1j315o0n9wfy.jpg)

参考：

-  [《iOS11开发新特性之网络部分》]( https://github.com/ChenYilong/iOS11AdaptationTips/issues/24 ) 
-  [《iOS后台下载功能（收集）》]( https://juejin.im/post/5a30eec66fb9a044ff3174b9 ) 
- 可以参考开源库方案 [**Tiercel**]( https://github.com/Danie1s/Tiercel ) 

 

###  用 BAR （ Background App Refresh）或 Remote notification 实现小文件后台下载

在iOS7以后，系统增加了两种后台的模式，一种是 Background fetch ，另一种是Remote notification，可以用于小文件下载。


**BAR （ Background App Refresh）**：

之前讨论的方案，跟后台刷新没有关系的，没有使用 `performFetchWithCompletionHandler` 相关的功能

注意：BAR （ Background App Refresh）相关的，用户没有主动kill掉的app才会有 BAR 功能。
具体用法参考：

-  [**Apple-Developer-Documentation-API-Updating Your App with Background App Refresh**](https://developer.apple.com/documentation/uikit/core_app/managing_your_app_s_life_cycle/preparing_your_app_to_run_in_the_background/updating_your_app_with_background_app_refresh) 
-  [How to run code when your app is terminated]( https://www.hackingwithswift.com/example-code/system/how-to-run-code-when-your-app-is-terminated ) 
-   [**What is actaully the value of UIApplicationBackgroundFetchIntervalMinimum?**]( https://stackoverflow.com/questions/30166100/what-is-actaully-the-value-of-uiapplicationbackgroundfetchintervalminimum ) 
-   [GitHub-nextCloud-iOSClient-AppDelegate.m]( https://github.com/nextcloud/ios/blob/master/iOSClient/AppDelegate.m ) 

 

**Remote notification**：

在iOS7以前，当系统收到推送消息后，会立即弹出消息提示用户，用户点击消息之后，就可以启动App，然后加载数据。使用了这种新的后台模式之后，当系统收到推送消息之后，会唤醒App，给App一个机会执行一部分操作，等操作之后才提醒用户，而且还支持 silent 模式，即执行完操作之后，完全不对用户做任何提醒，默默的就在后台把活干完了，此功能需要用户开启推送权限。


----------


13【iOS】大风哥负责企业内部员工 APP 的iOS开发工作，产品经理 kengny 老师通知说，老板要求，发布2.0，对员工数据进行更新，在 iOS 原有数据库基础上，增加一个字段，用于记录用户 “是否是兄弟”。该字段只有老板有操作权限，如果打开APP后，发现不是兄弟，就弹出离职申请页面。服务端得知填写完成后，会发送指令要求手机原地爆炸。如果不能爆炸的话，远程删除APP，或将手机初始化也可以。

如果你是大风哥你将如何应对。要求数据库操作贴出示例代码，数据库类型不限。

【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】



----------

14【算法】请通过编程实现大数(亿位)的相加减乘除。(不限语言)
【 难度🌟🌟🌟】【出题人 消摇-金融-深圳iOSqp】
【提示】用人算的思路让电脑去算。


/*one more thing*/

<!--- 

 M.W-不知名小作坊-iOS-北京：@颜魏-大世纪-深圳iOS  应该不是，用字符串和数组可以实现大数的加减
 颜魏-大世纪-深圳iOS：弱弱的问句第6题是用NSDecimalNumber去做计算吗
 


-->


多人提供答案：

[Lefex]提供以下答案：

 [《图解一道面试题 - 大数相加减乘除》]( https://mp.weixin.qq.com/s/icJ1JzG4u9TC-ZPvST3rBQ ) 
 
【SAGESSE-iOS-深圳】提供以下答案：

Swift版本：


除法使用移位减实现，不过会这么复杂是因为是以二进制保存的数：


 ```Swift
static func + (lhs: XCNumber, rhs: XCNumber) -> XCNumber {
        var cf = 0
        var result = XCNumber()
        for pos in 0 ..< max(lhs.integers.count, rhs.integers.count) {
            let rax = lhs[pos] + rhs[pos] + cf
            result[pos] = rax
            cf = rax &>> XCNumber.nbits
        }
        let maximum = (lhs[.max] + rhs[.max] + cf) & XCNumber.mask
        result.isSigned = maximum & 0x80 != 0 // 最高位的值是否为1, 如果为1说明结果是负数
        if maximum != 0 {
            result.integers.append(.init(truncatingIfNeeded: maximum)) // 如果是结果是非负数，需要保存进位
        }
        return result
    }
    static func - (lhs: XCNumber, rhs: XCNumber) -> XCNumber {
        return lhs + -rhs
    }
    static func * (lhs: XCNumber, rhs: XCNumber) -> XCNumber {
        guard !lhs.isZero && !rhs.isZero else {
            return XCNumber() // 如果任何一个数为0都不需要计算
        }
        return XCNumber.calculator(lhs, rhs) { lhs, rhs in
            var result = XCNumber()
            for row in 0 ..< rhs.integers.count {
                var cf = 0
                var pos = row
                for column in 0 ..< lhs.integers.count {
                    let rax = result[pos] + lhs[column] * rhs[row] + cf
                    result[pos] = rax
                    pos += 1
                    cf = rax &>> XCNumber.nbits
                }
                while cf != 0 {
                    let rax = result[pos] + cf
                    result[pos] = rax
                    pos += 1
                    cf = rax &>> XCNumber.nbits
                }
            }
            return result
        }
    }
    static func / (lhs: XCNumber, rhs: XCNumber) -> XCNumber {
        guard !rhs.isZero else {
            fatalError("0不能作为除数")
        }
        guard !lhs.isZero else {
            return XCNumber() // 如果被除数为0, 不需要处理
        }
        return XCNumber.calculator(lhs, rhs) { lhs, rhs in
            var bit = lhs.integers.count * 8 - 1 // 因为是小于count * 8
            var result = XCNumber()
            var remainder = XCNumber(lhs)
            var divisor = rhs << bit  // 移动到最左边(乘N)
            while bit >= 0 {
                if divisor <= remainder {
                    result.set(1, at: bit) // 直接设置比特位
                    remainder -= divisor
                }
                bit = bit - 1
                divisor = divisor >> 1 // 向右移动(恢复)
            }
            return result
        }
    }
 ```

 
[李胜运-齐数-上海小程序]提供的JS版本，仅仅实现了正数的加 乘。
 
 //TODO:  待完善。
 
 
 ```Objective-C
function mergeStr(strA, strB, isIntegerPart){
   let arrA = strA ? strA.split("") : [0];
   let arrB = strB ? strB.split("") : [0];
   let shotArr = arrA.length > arrB.length ? arrB : arrA;
   let longArr = arrA.length <= arrB.length ? arrB : arrA;
   while(shotArr.length < longArr.length){
    if (isIntegerPart) {
     shotArr.unshift("0");
    } else {
     shotArr.push("0");
    }
   }

   let carry = 0;
   let sumArr = [];
   for(let i = longArr.length-1; i >=0; i--){
    let numA = Number(shotArr[i]);
    let numB = Number(longArr[i]);
    let sum = numA + numB + carry;
    sumArr.unshift(sum % 10);
    carry = Math.floor(sum / 10);
   }

   return {
    sumStr : sumArr.join(""),
    carry  : carry
   }
  }
  function add(strA, strB){
   let arrA = strA.split(".");
   let arrB = strB.split(".");
   let intrgerPartObj = mergeStr(arrA[0], arrB[0], true);
   let decimalPartObj = mergeStr(arrA[1], arrB[1], false);

   let carryStr = intrgerPartObj.carry ? intrgerPartObj.carry : "";
   let intrgerPart = carryStr + intrgerPartObj.sumStr;
   let carryIntrgerPartObj = mergeStr(intrgerPart, String(decimalPartObj.carry), true)
   carryStr = carryIntrgerPartObj.carry ? carryIntrgerPartObj.carry : "";

   let decimalPartStr = decimalPartObj.sumStr == "0" ? "" : "." + decimalPartObj.sumStr
   let res = carryStr + carryIntrgerPartObj.sumStr + decimalPartStr;
   return res;
  }


  function mul(strA, strB){
   let pointA =  strA.indexOf(".") == -1 ? 0 : strA.length - 1 - strA.indexOf(".");
   let pointB =  strB.indexOf(".") == -1 ? 0 : strB.length - 1 - strB.indexOf(".");
   let allPoint = pointA + pointB;
   let arrA = strA.replace(".", "").split("");
   let arrB = strB.replace(".", "").split("");
   let shotArr = arrA.length > arrB.length ? arrB : arrA;
   let longArr = arrA.length <= arrB.length ? arrB : arrA;
   while(shotArr.length < longArr.length){
    shotArr.unshift("0");
   }
   
   let all = [];
   for(let i = longArr.length-1; i >=0; i--){
    let sumArr = [];
    let carry = 0;
    for(let count = 0; count < longArr.length - i - 1; count++){
     sumArr.unshift("0");
    }
    for(let j = shotArr.length - 1; j >= 0; j--){
     let numA = Number(shotArr[i]);
     let numB = Number(longArr[j]);
     let sum = numA * numB + carry;
     sumArr.unshift(sum % 10);
     carry = Math.floor(sum / 10);
    }
    if (carry) {
     sumArr.unshift(carry);
    }
    all.push(sumArr.join(""));
   }

   var res = "0"
   for(let i = 0; i < all.length; i++){
    res = add(res, all[i]);
   }
   
   let resArr = res.split("");
   if (allPoint > 0) {
    while (allPoint >= resArr.length) {
     resArr.unshift("0");
    }
    resArr.splice(resArr.length - allPoint, 0, ".");
   }
   // return resArr.join("");
   return resArr.join("").replace(/^0+/g, "").replace(/^\./g, "0.");
   
  }



  console.log(mul("61", "1.0"))
  console.log(mul("88", "10.3"))
  console.log(mul("0.88", "0.103"))
  console.log(mul("12323736.453", "10.03"))
  console.log(mul("11111111", "55555555"))
  console.log(mul(".10", "13"))
  console.log(add("21.1233", "23.5"));
  console.log(add(".33", "5.5"));
  console.log(add("8.000", "23.5"));
  console.log(add("21.1233", "23.5"));
  console.log(add("999999999999999999999", "999999999999999999999"));
 ```

![](http://ww1.sinaimg.cn/large/006tNc79ly1g391sxz3qij30ru088dhw.jpg)
![](http://ww4.sinaimg.cn/large/006tNc79ly1g391t6rtp2j30rs0g141v.jpg)
![](http://ww4.sinaimg.cn/large/006tNc79ly1g391tbi6umj30rr0bwwgo.jpg)

//TODO:  未完待续


 ----------



15 【iOS】多线程操作中，读写操作一定要在同一线程中执行吗？给出原因，并至少给出两种场景佐证你的观点，以及实现方法。【难度🌟🌟】【出题人 微博@iOS程序犭袁】

----------

16 【iOS】一个app中可能会产生几个 Autorelease Pool ， Autorelease Pool 中的临时对象，何时会被dealloc 。给出原因。【难度🌟🌟】【出题人 微博@iOS程序犭袁】

----------

 17【iOS】For in 循环中频繁创建临时变量的场景下，如何使用 Autorelease Pool 优化， 着重讲下你放置pool的位置，以及这些临时变量的生命周期改变。并给出原因。【难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】 
 
----------


 18【算法】【iOS】在一个字典中含有，字符串，字典，数组。层层嵌套，可能十几层。现在想知道任意节点Value中是否含有某个字符串。【 难度🌟🌟🌟🌟】【出题人 BM-成都iOS】
【提示】广度优先，深度优先，为非常朴素的暴力搜索。
暴力搜索也有策略的，看到数组、字典就展开, 这是 深度优先
看到数据、字典先记下来，等这一层所有节点都查完了再展开下一层的，这是广度优先。从数据结构来分析，深度优先是维护一个栈，广度优先是维护一个队列

----------

 <p align="center">
One more thing...
 </p>
 <p align="center">
【非礼勿视】以下为彩蛋部分，建议28岁以上男性观看
 </p>


----------

 ![](https://ws4.sinaimg.cn/large/006tNc79ly1g31j5mlt7dj31as0u0qnx.jpg)


/*one more thing*/

<!--- 

![enter image description here](http://m1.biz.itc.cn/pic/new/n/12/67/Img8106712_n.jpg)


-->


#  [iTeaTime(技术清谈)]( https://github.com/ChenYilong/iOSInterviewQuestions/issues/127)【008期】【代号：超人】

----------

![](http://ww4.sinaimg.cn/large/006tNc79ly1g4wvr2s23oj31sr0q242m.jpg)

<!--- 

![](http://ww2.sinaimg.cn/large/006tNc79ly1g4wvsss7rkj31rx0p4whk.jpg)


-->

----------


出题:微博@iOS程序犭袁
本期代号：超人

----------

![enter image description here](http://getwallpapers.com/wallpaper/full/e/7/d/1521642-download-free-dark-superman-wallpaper-1920x1200.jpg)

从未被讨论过的问题，不公布答案。顺延到下一期。只要讨论过，答案不正确也会提供答案。下面将讨论过的问题公布答案：

下列题目可能出现以下虚拟的程序员，非实指：
- 小地
- 大风哥


----------




1 【问题】【iOS】猜想系统 `isEqual` 函数的实现原理，并给出代码实现。要求能通过以下用例。
 

用例一：

 ```Objective-C
    NSMutableString *s1 = [NSMutableString stringWithString: @"大风, 哥"];
    NSMutableString *s2 = [NSMutableString stringWithFormat: @"%@, %@", @"大风", @"哥"];
    BOOL equal = [s1 isEqual: s2]; // 要求返回YES

 ```

用例二：


 ```Objective-C
    CYLCustomizeClass *customizeObject1 = ...;
    CYLCustomizeClass *customizeObject2 = ...;
    BOOL equal = [customizeObject1 isEqual: customizeObject2]; // 要求返回YES
 ```
 
 
  【提示1】考虑父类、子类同时实现了该方法的情况。
  【提示2】假设你的类结构包括以下元素，那么  `cache` 部分可以不用比较：
  
 ```Objective-C
        NSString *_name;
        NSMutableDictionary *_cache;
        int _length;
        char *_data;
 ```


 
 【 难度🌟🌟🌟🌟】【出题人 微博@iOS程序犭袁】
【提示】和006期，suuny出的题有联系，也跟 NSString 底层实现有关。


----------

2 【iOS】请给出下列代码的输出结果，并给出分析。如果有多种可能性需求进行列举，不确定性也要说明。


 ```Objective-C
   override func viewDidLoad() {
        super.viewDidLoad()
        DispatchQueue.global().async {
            print("print 1, thread: \(Thread.current.isMainThread)");
        }
        
        DispatchQueue.global().async {
            print("print 2, thread: \(Thread.current.isMainThread)");
        }
        DispatchQueue.global().async {
            print("print 3, thread: \(Thread.current.isMainThread)");
        }
        DispatchQueue.global().sync {
            print("print 4, thread: \(Thread.current.isMainThread)");
        }
    }
  
 ```
 

【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】
【提示】没看过源码，只看文档，基本答错，这是一道送命题。

----------


3【问题】【iOS】参考代码注释内容：

![](https://ws2.sinaimg.cn/large/006tNc79ly1g33164vyx2j30x0082762.jpg)
 
 
 ```Objective-C
int main(int argc, const char * argv[]) { 
NSArray *array = @[@"Hello", @"World"];
//在这里插入代码(一行最好)
//在不创建新的数组的情况下将 array变成@[@"Goodbye", @"World"]
NSLog(@"%@", array);
return 0; 
}
 ```
 
 
 【 难度🌟🌟🌟🌟】【出题人 孙源Sunny@dd】
 
----------

4 【iOS】kengny 是一名产品经理，他平时有两大爱好：第一，到处在各类群里求买企业证书，第二，运营着一款小成本的视频 app，迫于成本压力，一般只会有两个人参演。他向大风哥提出需求，说希望能够在用户退到后台后，上传日志记录用户什么时候进入的后台，便于记录用户使用时长。并要求退到后台后依然能够下载小视频，这样用户上班点击下载按钮，回到家躺床上打开 APP 就能看了。并且要求把后台下载成功率定为大风哥的KPI。

如果你是大风哥，你将如何应对。必要时贴出示例代码。

【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】

----------

5【iOS】kengny 是一名产品经理，他们的 app 是一款类似美团的产品，最近他和一些店家进行了PY交易，要求用户到他们家店附近的时候，立即收到通知。
小地和大风哥，会上听到需求后，小地立即说：这个需求做不了。大风哥会上没说话，产品经理说，明天上线，怎么实现我不管，散会。

会后，大风哥悄悄说对小地说要做也可以，可以这样做：_______。

请补充填空，要求给出详细理由，包括技术实现细节，如有必要贴出示例代码。

【 难度🌟】【出题人 微博@iOS程序犭袁】

----------

6【iOS】大风哥负责企业内部员工 APP 的iOS开发工作，产品经理 kengny 老师通知说，老板要求，发布2.0，对员工数据进行更新，在 iOS 原有数据库基础上，增加一个字段，用于记录用户 “是否是兄弟”。该字段只有老板有操作权限，如果打开APP后，发现不是兄弟，就弹出离职申请页面。服务端得知填写完成后，会发送指令要求手机原地爆炸。如果不能爆炸的话，远程删除APP，或将手机初始化也可以。

如果你是大风哥你将如何应对。要求数据库操作贴出示例代码，数据库类型不限。

【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】



----------

7【算法】请通过编程实现大数(亿位)的相加减乘除。(不限语言)
【 难度🌟🌟🌟】【出题人 消摇-金融-深圳iOSqp】
【提示】用人算的思路让电脑去算。
 弱弱的问句第6题是用NSDecimalNumber去做计算吗"
 
 M.W-不知名小作坊-iOS-北京：@颜魏-大世纪-深圳iOS  应该不是，用字符串和数组可以实现大数的加减
 颜魏-大世纪-深圳iOS：弱弱的问句第6题是用NSDecimalNumber去做计算吗
 
 ----------

8 【iOS】CoreData中几个核心概念及关系阐述下，第三方库 MagicRecord 的读写操作是在什么线程中执行的？【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】

----------

9 【iOS】在一个字典中含有，字符串，字典，数组。层层嵌套，可能十几层。现在想知道任意节点Value中是否含有某个字符串。【 难度🌟🌟】【出题人 BM-成都iOS】
【提示】与广度优先排序，深度优先 排序。


----------

10 【iOS】多线程操作中，读写操作一定要在同一线程中执行吗？给出原因，并至少给出两种场景佐证你的观点，以及实现方法。【难度🌟🌟】【出题人 微博@iOS程序犭袁】

----------

11 【iOS】一个app中可能会产生几个 Autorelease Pool ， Autorelease Pool 中的临时对象，何时会被dealloc 。给出原因。【难度🌟🌟】【出题人 微博@iOS程序犭袁】

----------

12 【iOS】For in 循环中频繁创建临时变量的场景下，如何使用 Autorelease Pool 优化， 着重讲下你放置pool的位置，以及这些临时变量的生命周期改变。并给出原因。【难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】 


----------

Posted by [微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)  
原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)
<p align="center"><a href="http://weibo.com/u/1692391497?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/1692391497/b46c844b/1.png"/></a></a>



----------

 <p align="center">
One more thing...
 </p>
 <p align="center">
【非礼勿视】以下为彩蛋部分，建议28岁以上男性观看
 </p>

----------



![image](https://ws3.sinaimg.cn/large/006tNc79ly1g311hw6id6j30u016e7wh.jpg)

![](https://ws4.sinaimg.cn/large/006tNc79ly1g331u0b06zj30u017r4qp.jpg)
/*one more thing*/

<!--- 

![](https://ws3.sinaimg.cn/large/006tNc79ly1g331tj9ivaj30u017okjl.jpg)

-->



# [iTeaTime(技术清谈)]( https://github.com/ChenYilong/iOSInterviewQuestions/issues/127)【007期】【代号：蝙蝠侠】


出题:微博@iOS程序犭袁 和他的小伙伴们
本期代号：蝙蝠侠

![enter image description here](http://getwallpapers.com/wallpaper/full/4/5/9/23291.jpg)


下列题目可能出现以下虚拟的程序员，非实指：

- 小地
- 大风哥
- kengny 老师 


----------

【今日话题】如何看到小程序的跨平台方案，比如：美团App内置Flutter引擎容器可以跑微信小程序，DCloud出了跨平台uni-app方案，一次编写，导出多个小程序版本发布。还没京东也出了自己的跨平台方案。你是否看好这些平台？


----------

1 【iOS】kengny 是一名产品经理，他平时有两大爱好：第一，到处在各类群里求买企业证书，第二，运营着一款小成本的视频 app，迫于成本压力，一般只会有两个人参演。他向大风哥提出需求，说希望能够在用户退到后台后，上传日志记录用户什么时候进入的后台，便于记录用户使用时长。并要求退到后台后依然能够下载小视频，这样用户上班点击下载按钮，回到家躺床上打开 APP 就能看了。并且要求把后台下载成功率定为大风哥的KPI。

如果你是大风哥，你将如何应对。必要时贴出示例代码。

【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】

----------

2【iOS】kengny 是一名产品经理，他们的 app 是一款类似美团的产品，最近他和一些店家进行了PY交易，要求用户到他们家店附近的时候，立即收到通知。
小地和大风哥，会上听到需求后，小地立即说：这个需求做不了。大风哥会上没说话，产品经理说，明天上线，怎么实现我不管，散会。

会后，大风哥悄悄说对小地说要做也可以，可以这样做：_______。

请补充填空，要求给出详细理由，包括技术实现细节，如有必要贴出示例代码。

【 难度🌟】【出题人 微博@iOS程序犭袁】

----------

3【iOS】大风哥负责企业内部员工 APP 的iOS开发工作，产品经理 kengny 老师通知说，老板要求，发布2.0，对员工数据进行更新，在 iOS 原有数据库基础上，增加一个字段，用于记录用户 “是否是兄弟”。该字段只有老板有操作权限，如果打开APP后，发现不是兄弟，就弹出离职申请页面。服务端得知填写完成后，会发送指令要求手机原地爆炸。如果不能爆炸的话，远程删除APP，或将手机初始化也可以。

如果你是大风哥你将如何应对。要求数据库操作贴出示例代码，数据库类型不限。

【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】



----------

6【算法】请通过编程实现大数(亿位)的相加减乘除。(不限语言)
【 难度🌟🌟🌟】【出题人 消摇-金融-深圳iOSqp】
 
 ----------

8 【iOS】CoreData中几个核心概念及关系阐述下，第三方库 MagicRecord 的读写操作是在什么线程中执行的？【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】

----------

9 【iOS】在一个字典中含有，字符串，字典，数组。层层嵌套，可能十几层。现在想知道任意节点Value中是否含有某个字符串。【 难度🌟🌟】【出题人 BM-成都iOS】

----------

11 【iOS】多线程操作中，读写操作一定要在同一线程中执行吗？给出原因，并至少给出两种场景佐证你的观点，以及实现方法。【难度🌟🌟】【出题人 微博@iOS程序犭袁】

----------

12 【iOS】一个app中可能会产生几个 Autorelease Pool ， Autorelease Pool 中的临时对象，何时会被dealloc 。给出原因。【难度🌟🌟】【出题人 微博@iOS程序犭袁】

----------

13 【iOS】For in 循环中频繁创建临时变量的场景下，如何使用 Autorelease Pool 优化， 着重讲下你放置pool的位置，以及这些临时变量的生命周期改变。并给出原因。【难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】 


14题 Autorelease Pool 方法走完了，才会对里面的临时对象做一次release操作，当临时对象引用计数为0时，才会dealloc
从后往前release

----------

Posted by [微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)  
原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)
<p align="center"><a href="http://weibo.com/u/1692391497?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/1692391497/b46c844b/1.png"/></a></a>



----------

 <p align="center">
One more thing...

【非礼勿视】以下为彩蛋部分，建议28岁以上男性观看
 </p>

----------



![enter image description here](https://ws2.sinaimg.cn/large/006tNc79ly1g2wke29wtxj30ks0xcjuk.jpg)


![enter image description here](https://pbs.twimg.com/media/DqTMFwcUcAASsKl.jpg)

![enter image description here](https://pbs.twimg.com/media/DnHHlJtU0AAdqIc.jpg)

/*one more thing*/

<!--- 

![enter image description here](https://pbs.twimg.com/media/DnHHlJuV4AAfjVY.jpg)


-->



# [iTeaTime(技术清谈)]( https://github.com/ChenYilong/iOSInterviewQuestions/issues/127)【006期】【代号：布加迪】


----------

![](http://ww4.sinaimg.cn/large/006tNc79ly1g4wvr2s23oj31sr0q242m.jpg)

<!--- 

![](http://ww2.sinaimg.cn/large/006tNc79ly1g4wvsss7rkj31rx0p4whk.jpg)


-->

----------


出题:微博@iOS程序犭袁 和他的小伙伴们
本期代号：布加迪


![enter image description here](http://getwallpapers.com/wallpaper/full/e/4/0/495535.jpg)

----------

【今日话题】： 你如何看待张小龙的预言：未来2年内,小程序将取代80%的App市场。每次都能听到“2岁多的小程序，终于又双叒迎来了“春天”？”的声音，似乎native每天都在冬天，你会因为市场的影响而更新技术栈，或者调整编程的百分比，为前端多多增加百分比吗？未来前端在你的占比中多少比较合适？

----------



1.【问题】【iOS】参考代码注释内容：

 ```Objective-C
int main(int argc, const char * argv[]) {
    //在这里插入一行代码,使下面的代码输出 "Goodbye World"
    NSLog(@"Hello World");
    return 0;
}
 ```


【 难度🌟🌟🌟🌟】【出题人 孙源Sunny@dd】

【答案】



## 几种 tricky 版本：

### 重定义 NSLog 

以下几种宏定义皆可：

 ```Objective-C
    #define NSLog(FORMAT, ...) fprintf(stderr, "Goodbye World\n")
    #define NSLog(x) printf("Goodbye World\n")
    #define NSLog NSLog(@"Goodbye World");
 ```


[鹅喵-便利蜂移动端]:

 ```Objective-C
void(ˆNSLog)(id)=(id _){CFLog(0, CFSTR("Goodbye World"));};
 ```

### 利用编译器的注释特性

[鹅喵-便利蜂移动端]:

 ```Objective-C
NSLog("Goodbye World"); //\
NSLog(@"Hello World"); 
 ```
 
下面着重介绍两种，更有技术含量的版本：

## 深入理解 NSString 

`NSString` 的内存分配实际是很复杂的，可能分配在栈区、堆区、常量区。

我们常常以为@"foo"，这样的字符串是常量区（也称为常量存储区或 `_TEXT` 区。），运行时不能改，内存区域映射都是 dyld 干的。

其实我们可以简单理解为 `NSString` 是一个 map 结构，**key 存在常量区，的确无法修改，但是 value 是一个静态变量**，我们可以运行时修改。


## 常量字符串的内存复制方案

[molon-杭州]提供思路：

首先 Objective-C 中任何两个相同字符串值的声明，即使是存储在不同的变量名中，也是指向同一个对象。

常量区的变量内存地址是连续的。

而常量字符串的指针在 `CFString` 段里面，内存复制的话只复制 CFString 的 size 就够了。
 
直接操作内存就可修改，只要有权限，内存当中的任何地方都能操作。程序运行起来，可以理解为其汇编代码也是写入内存的。你想靠修改对应位置，塞入汇编代码，修改运行中逻辑都可以。很多计算机病毒就是这么做的。但是一般操作系统提供的 API 会做一定的权限控制，例如不能修改其他进程的，等等，但是只要你能提权也是可以操作，很多外挂、破解基本上都是这么个原理。相对来说， Objective-C 反而显得不安全，对 hook 的亲和力太特么强。像其他语言一般还需要用内联汇编去做层 inline hook，控制堆栈平衡等，而 Objective-C 却没有。

比如如果逆向以下代码：

 ```Objective-C
int main(int argc, const char * argv[]) {

    NSString *a = @"Hello world";
    NSString *b = @"bye";
    memmove((void *)(@"Hello world"),(void *)(@"Goodbye world"),17);//此处17为随意填写，并无特定含义，请查看下文完整的取值计算方案。
    NSString *c = @"ok";

    NSLog(@"Hello world");
    NSLog(@"ok");
    NSLog(@"bye");
    return 0;
}
 ```

那么，下图红框部分即为 Objective-C 的常量区:

（逆向结果由[molon-杭州]提供）

![enter image description here](https://ws4.sinaimg.cn/large/006tNc79ly1g30545onkrj31fi0u0aff.jpg)

常量区：

![enter image description here](https://ws4.sinaimg.cn/large/006tNc79ly1g300tlv801j311409ejw3.jpg)


然后这个常量区 `CFString` 里对应的 `char`指针对应的那块内存区域也是连续的。

上述代码中 `memmove` 拷贝的是 `CFString` 的内容，不是这块区域的。

首先从`<CoreFoundation/CFString.h>` 可以查看 `CFString` 结构体，

可以发现其大小跟 CPU 架构有关，结构并不简单，而且 `__CFConstStr` 属于内部 API 无法访问，所以我们可以模仿重新定义一个类似的结构：

以下方案由[Never-成都iOS]提供：

 ```Objective-C
#import <Cocoa/Cocoa.h>

struct CYLConstStr {
    struct {
        uintptr_t _cfisa;
        uint32_t _swift_strong_rc;
        uint32_t _swift_weak_rc;
        uint8_t _cfinfo[4];
        uint8_t _pad[4];
    } _base;
    uint8_t *_ptr;
#if defined(__LP64__) && defined(__BIG_ENDIAN__)
    uint64_t _length;
#else
    uint32_t _length;
#endif
};

int main(int argc, const char * argv[]) {
    //在这里插入一行代码,使下面的代码输出 "Goodbye World"
    memmove((void *)(@"Hello World"), (void *)(@"Goodbye World"), sizeof(struct CYLConstStr));
    NSLog(@"Hello World");
    return 0;
}
 ```

运行结果：

![enter image description here](https://ws4.sinaimg.cn/large/006tNc79ly1g304fxd4rdj312o0u043g.jpg)

参考文献：
 
-   [《memcpy的内存重叠问题》]( https://my.oschina.net/zidanzzg/blog/812887 ) 
-   [《迅雷面试题:memcpy和memmove的区别》]( https://blog.csdn.net/zdl1016/article/details/8680864 ) 
-    [《手把手教你栈溢出从入门到放弃（上）》]( https://zhuanlan.zhihu.com/p/25816426 ) 
-   [《一个sizeof引发的血案》]( https://zhuanlan.zhihu.com/p/26815897 ) 

 
## 修改 CFString `__DATA` 段 方案

[孙源Sunny@dd] 提供思路：

`cstring` 存在 `__TEXT` ，是不可变区域，`CFString` 存在 `__DATA`，可以修改，该情况与修改 `static` 变量没什么区别。
 
 `CFString` 在 `__DATA` 端我觉得原因是它的结构里有个 isa 指针指向了  `__CFConstantStringClassReference` ，这种在编译时无法确定，得在动态链接时才知道这个地址并赋值上去。
 
根据 [WWDC 2016 - Session 406-Optimizing App Startup Time]( https://developer.apple.com/videos/play/wwdc2016/406 ) 的说明：

![enter image description here](https://ws3.sinaimg.cn/large/006tNc79ly1g30b50lo92j31c00u0jv6.jpg)
 
 
 可知：
 
 区域 | 作用
 :-------------:|:-------------:
 `__TEXT` ，是不可变区域，`CFString` 存在 `__DATA`，可以修改，该情况与修改 `static` 变量没什么区别。
 
 `CFString` 在 `__DATA` 端我觉得原因是它的结构里有个 isa 指针指向了  `__CFConstantStringClassReference` ，这种在编译时无法确定，得在动态链接时才知道这个地址并赋值上去。
 
根据 [WWDC 2016 - Session 406-Optimizing App Startup Time]( https://developer.apple.com/videos/play/wwdc2016/406 ) 的说明：

![enter image description here](https://ws3.sinaimg.cn/large/006tNc79ly1g30b50lo92j31c00u0jv6.jpg)
 
 
 可知：
 
 区域 | 作用
 :-------------:|:-------------:
 `__DATA` | 头文件，代码，只读常量
`__DATA` | 所有可读写内容（全局变量、静态变量等等）

举例说明 `NSString`、`_TEXT` 与 `_DATA` 三者的关系，


比如 [《iOS控制代码段大小的一些经验》]( http://www.iqiyi.com/common/20171130/d9534cf00c408f06.html ) 一文中提到：

如果定义一个 `NSString` 数组，元素数量庞大，可能会导致 `__TEXT` 代码段非常大。仅仅下面的代码，生成的目标文件大小就可以达到 89.51KB。具体原因并不是字符串的总字节数多，而是元素数量大，中间的取值指令过多。
代码：

![enter image description here](http://pic2.iqiyipic.com/common/20171130/12.jpg)

用到的宏定义：

![enter image description here](http://pic1.iqiyipic.com/common/20171130/13.jpg)

尽管编译器只在text段的字符常量区生成一份字符，多次使用不会增加字符常量区的大小，但是会增加 `__TEXT` 段代码的大小，使用 MachOView 工具查看可执行文件，结果如下图：

![enter image description here](http://pic3.iqiyipic.com/common/20171130/14.jpg)

cstring 只有一份，多次调用不会存在多份，但是再通过反编译查看调用语句：


![enter image description here](http://pic2.iqiyipic.com/common/20171130/15.jpg)

调用的函数会转变成上图的指令，可以看到是从字符常量区取到 rax, 再取到栈空间。这样一个一个的取，由于有非常多个字符串，那么相应的指令就会存在非常多，导致调用函数的代码段变得非常大。而且这样会非常浪费栈空间。


总结就是：

在使用 `NSString` 时，`cstring` 只有一份，多次调用不会存在多份，但调用的函数中间还有一步指令，是从字符常量区取到 `rax`, 再取到栈空间，rax对应的值保存在 `_DATA` 中。

上面的题目，修改的就是 `_DATA` 中的值。




cstring 才是 __TEXT
cfstring 是 `__DATA`


`CFString` 在 `__DATA` 端我觉得原因是它的结构里有个 `isa` 指针指向了 `__CFConstantStringClassReference`，这种在编译时无法确定，得在动态链接时才知道这个地址并赋值上去.


[鹅喵-便利蜂移动端]提供代码实现:

 ```Objective-C
int main(int argc, const char * argv[]) {
    typedef struct STR {
        size_t padding[2];
        char const *s;
        size_t len;
    }STR;
    STR *str =(STR *)@"Hello World";
    str->s = "GoodBy World";
    NSLog(@"Hello World");
    return 0;
}
 ```


![enter image description here](https://ws3.sinaimg.cn/large/006tNc79ly1g302uf90z1j310a0p6gos.jpg)

一行代码模式：

 ```Objective-C
// 改 cstring 的方式
int main(int argc, char **argv) {
  typedef struct STR { size_t padding[2]; char const *s; size_t len;} STR; STR *goodbye = (STR*)@"Hello World"; goodbye->s = "Goodbye World"; goodbye->len = 13;
  NSLog(@"Hello World");
  return 0;
}
 ```

运行结果：

![enter image description here](https://ws4.sinaimg.cn/large/006tNc79ly1g301bcdev1j31f20u041o.jpg)

Apple 的 opensource 的 CF 是 CFLite，跟生产环境的不一样，可以参考其 README 说明：


Apple 的 opensource 版本：

![enter image description here](https://ws2.sinaimg.cn/large/006tNc79ly1g301gbp4p3j30y60jmjvx.jpg)

生产环境版本：

![enter image description here](https://ws3.sinaimg.cn/large/006tNc79ly1g301h6vkxcj30vg06s3zg.jpg)


----------


2【iOS】有没有办法通过提供的ipa包然后判断出是支持ipad还是iphone，还是都支持。【 难度🌟🌟】【出题人 SuperDanny-轩宇-珠海iOS】


把IPA解压，包内容的info.plist有个UIDeviceFamily，值=1是iPhone，=2是iPad，=1,2是都支持

 ```Objective-C
/usr/libexec/PlistBuddy -c 'Print :UIDeviceFamily' xxx.app/Info.plist
 ```

![enter image description here](https://ws4.sinaimg.cn/large/006tNc79ly1g30dxf34wkj32600nkaed.jpg)

[鹅喵-便利蜂移动端][M.W-不知名小作坊-iOS-北京]回答正确


----------

3 【算法】使用熟悉的编程语言，编写一个函数，要求输入与以下列表相似的结构，则返回值为true，否则为false。【注意】输入字符串无限制，英文字符、标点符号均无需特殊处理，与中文一样视为作完整字符。

 -  上海自来水来自海上
 -  黄山落叶松叶落山黄
 -  山东落花生花落东山
 -  山西悬空寺空悬西山
 -  湖南过路车路过南湖

【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】

【提示】算法实际为回文算法，题目主要在于边界情况处理，在函数顶端要有判空等操作。可自行搜索，下面提供群里提供的答案，如有瑕疵可以指正。

【答案】


python3 的，天生编码支持好，递归做法：

 

 ```python3
def check_re(str):
 if not str:
  return True
 if str[0] != str[-1]:
  return False
 else:
  return check_re(str[1:-1])

 print(check_re("asdffdsa) //True
 print(check_re("asdfdsa)) //True
 print(check_re("上海自来水来自海上)) //True
 print(check_re(黄山落叶松叶落山黄")) //True
 print(check_re("山东落花生花落东山")) //True
 print(check_re("山西悬空寺空悬西山") //True
 print(check_re("湖南过路车路过南湖")) //True
 print(check_re("123456")//False

 ```

jS版本：

 ```Objective-C
function judgeIsPalindrome (str) {
if (null == str || str.length < 2) {
return 'false';
 } else {
if (str.split(""). reverse().join("")= str) {
return 'true';
} else {
return 'false';
}
}
}
console.log(judgeIsPalindrome('🍎🍌🍇🍇🍌🍎'));
console. log(judgeIsPalindrome('abccba'));
 ```

输出结果：

![enter image description here](https://ws4.sinaimg.cn/large/006tNc79ly1g300cvwotcj30z40t4dk3.jpg)



另一 java 版本：

 ```Objective-C
// still 3 
 public static boolean isPalindrome(String s) {
  if (s == null) return false;
  int left = 0; int right = s.length()-1;
  while (left < right) {
   if (s.charAt(left) == ' ') left++;
   else if (s.charAt(right) == ' ') right--;
   else if (s.charAt(left) != s.charAt(right)) return false;
   left++;
   right--;
  }
  return true;
 }
 ```

[Jenny]回答。



边界情况，可酌情添加，为加分项目：

 - 字符里面也许应该排除一下 ZWJ 组合 emoji 
 - 不考虑 unicode 组合字的话，Pokémon 这种字倒过来就会变成 noḿekoP，注音符号跑偏了，所以至少是标准库或第三方库要有良好的 unicode 支持 (鹅喵-便利蜂移动端)

----------

4.【算法】要求使用熟悉的编程语言，编写一个函数，要求输入任意字符串，都能返回对称结构的字符串。【注意】输入字符串无限制，英文字符、标点符号均无需特殊处理，与中文一样视为作完整字符。

举例：

输入的原始字符串：

 - 走马灯灯马走灯熄马停步

输出的字符串：

- 走马灯灯马走

【 难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】


【答案】 详细可以搜：最长回文子串算法。

下面是一种时间复杂度为 O（n^2）的写法，并非最优解，最优解为 Manacher 算法， 时间复杂度O(n), 空间复杂度O(n)，可自行搜索。：


 ```Objective-C
public static void main(String[] args) {
        // write your code here
        String str = "步停马熄灯走马灯灯马走你";
        String str1 = "qqqqbcddcbasf";
        String str2 = "abcdeff";
        String str3 = "11118889999888";
        String str4 = "5544334433111";

        System.out.println(getStr(str));
        System.out.println(getStr(str1));
        System.out.println(getStr(str2));
        System.out.println(getStr(str3));
        System.out.println(getStr(str4));
    }

    static String getStr(String source) {
        if (source == null || source.length() < 1) {
            return "\n";
        }
        for (int i = source.length() / 2; i > 0 ; i--) {
            StringBuilder builder = new StringBuilder();
            builder.append(String.join("", Collections.nCopies(i, "(.)")));
            for (int j = i; j > 0; j--) {
                builder.append("\\" + j);
            }
            String patternStr = builder.toString();
            Pattern pattern = Pattern.compile(patternStr);
            Matcher m = pattern.matcher(source);
            if (m.find()) {
                return m.group(0);
            }
        }
        return "\n";
    }
 ```



----------

5【iOS】看下面的方法执行完之后 ViewController 会被销毁吗，ViewController 的 view 会被销毁吗?为什么?

 ```Objective-C
- (void)addViewController { 
UIViewController *viewController = [[UIViewContrnller alloc] init];
[self.view addSubview: viewController.view]; 
}
…
 ```

【 难度🌟🌟】【出题人 Saber-ios-望京】


【答案】view被引用，vc没被引用，所以VC被销毁，view不销毁。

详细解释：
vc引用view，view对vc无引用。 vc在view在，view在与vc可不在。vc为局部变量，方法结束后直接销毁；vc.view被添加在self.view上，所以不会被销毁.


----------

6【iOS】请给出以下代码的输出结果：

 ```Objective-C
NSArray *array = @[@"1"]; 

NSMutableArray *mutableArray = [[NSMutableArray alloc] initWithObjects:@"123’, nil];

 void(ˆblock)(void) = ˆ{ 
NSLog(@"array %@",array); 
NSLog(@"mutableArray %@",mutableArray);
};
 array = @[@"2"]; 
[mutableArray add0bject:@"456"];
 block(); 

 ```
【 难度🌟】【出题人 微博@iOS程序犭袁 】

【答案】

> array 1 
mutableArray 123，456

 参考： [《iOS中__block 关键字的底层实现原理》]( https://www.jianshu.com/p/404ff9d3cd42 ) 
 

----------

7【问题】【iOS】segment 页面如何进行内存优化。需求描述：segment一次性把所有页面加载出来会导致内存爆增。几个segment 子页面的图片都是高清大图。【难度🌟🌟🌟】【出题人：中鼎iOS攻城狮】


下面答案由【BM-成都iOS】提供：

   题目主要有2个核心：1.多个页面 2.高清大图

   针对多个页面，用lazy的形式，用时加载就好了。所以题目主要是讨论高清大图。

   - 如果是作为面试题回答：

     苹果方法针对超大图片示例：[点击查看](https://developer.apple.com/library/archive/samplecode/LargeImageDownsizing/Introduction/Intro.html#//apple_ref/doc/uid/DTS40011173-Intro-DontLinkElementID_2)

     主要是2个方向：1.是压缩高清大图导致的内存暴增。2.是现实高清大图导致的内存暴增。(相关资料自行谷歌，太多太杂。)

     <http://blog.cnbang.net/tech/2578/>

   - 如果是作为项目回答：

     1. 几乎现在90%的后台服务器都使用的第三方云服务器。资源都是存在对应的云服务器的对象存储器中。

     2. 几乎所有的对象存储器都支持在线图片处理。(水印，缩放，格式转换等。)：

        所以正常开发的标准形式为：服务器下发高清的大图地址，客户端根据控件形式预估使用图片的大小。比如用户上传了一张2000像素的图片作为头像，而你当前只是渲染一个可能30像素左右的头像，那你应该直接使用第三方对象存储器的参数渲染一张50左右像素的图片就完全足够使用了。

        <https://helpcdn.aliyun.com/document_detail/44688.html?spm=a2c4g.11186623.6.1321.516e2e93zb9HsP>

        以阿里oos对象存储为例的图像缩放文档

        3. 针对图像的格式进行优化。

        使用webp格式，具体的对比：<https://aotu.io/notes/2016/06/23/explore-something-of-webp/index.html>

        也可以使用在线接口返回webp的图片：文档如下：<https://helpcdn.aliyun.com/document_detail/44703.html?spm=a2c4g.11186623.6.1336.cd4b35a8Hg5ETw>

     理论上只要作为这3点，在正常显示高清大图都不会出现什么问题。

   作为另外一个补充：

   关于高清大图上传问题。

   1. 理论应该尽可能还原用户创造的原始数据。比如用户上传一个头像，虽然现实控件只有100像素。但是理论上不应该客户端直接把图片压缩了上传给服务器，万一以后这张头像会作为背景图呢？

   2. 关于流程问题。很多对于资源类型的上传直接使用后台接口上传data。

      但是有一个问题是，整个过程是这样的：1.客户端上传data给后台主机。2.主机拿到图片上传到对象服务器。3.对象服务器给主机回调。4.主机给客户端上传结果回调。(举例一个栗子：3个角色，你，财务，人事。(事情是核对你的工资是否正确)  难道不觉得这样的一个流程很傻逼么？流程：财务给你发工资，然后你拿到钱，找人事问应该给你发多少，如果发错了，你再找财务说给你发错了，重新核对。 过程完全可以优化为：财务向人事核对工资是否正确，然后给你发工资

      所以，整个过程的标准流程为：向服务器请求token，Bucket，路径等一系列参数。由客户端直接向对象存储器上传，上传成功以后请求接口告知主机上传成功。在这个过程中，主流的对象存储器的sdk都有断点续传等乱七八糟的优化。会一定范围内解决上传内存暴增情况
      

----------

Posted by [微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)  
原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)
<p align="center"><a href="http://weibo.com/u/1692391497?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/1692391497/b46c844b/1.png"/></a></a>



----------

 <p align="center">
One more thing...
 </p>
 <p align="center">
【非礼勿视】以下为彩蛋部分，建议28岁以上男性观看
 </p>

----------



![image](https://user-images.githubusercontent.com/2911921/57426727-fbdd9b80-7252-11e9-9f1e-0e403d56b5ca.png)


# [iTeaTime(技术清谈)]( https://github.com/ChenYilong/iOSInterviewQuestions/issues/127)【005期】【代号：变形金刚-擎天柱】

----------

![](http://ww4.sinaimg.cn/large/006tNc79ly1g4wvr2s23oj31sr0q242m.jpg)

<!--- 

![](http://ww2.sinaimg.cn/large/006tNc79ly1g4wvsss7rkj31rx0p4whk.jpg)


-->

----------


出题:微博@iOS程序犭袁

本期代号：变形金刚-擎天柱

----------


<!--- 

<p align="center">
<a href=""><img src="https://img.shields.io/badge/pod-v1.21.x-brightgreen.svg"></a>
<a href=""><img src="https://img.shields.io/badge/Swift-compatible-orange.svg"></a>
<a href=""><img src="https://img.shields.io/badge/platform-iOS%207.0%2B-ff69b5152950834.svg"></a>
<a href="https://github.com/ChenYilong/CYLTabBarController/blob/master/LICENSE"><img src="https://img.shields.io/badge/license-MIT-green.svg?style=flat"></a>
</p>

-->

<p align="center">
<a href="https://github.com/ChenYilong/iOSBlog/releases.atom"><img src="https://img.shields.io/badge/RSS feed (full text feed)-订阅我的博客更新-yellow.svg"></a>
</p>

<p align="center">
<a href="https://github.com/ChenYilong/iOSBlog/issues/21"><img src="https://img.shields.io/static/v1.svg?label=QQ%E3%80%81Telegram%20Group&color=blue&message=%E7%82%B9%E5%87%BB%E8%8E%B7%E5%8F%96QQ%E3%80%81Telegram%E7%BE%A4%E4%BF%A1%E6%81%AF&color=green"></a>
</p>


<p align="center">
<a href="https://twitter.com/stevechen1010"><img src="https://img.shields.io/twitter/url/http/shields.io.svg?style=social&maxAge=2592000"></a>
<a href="http://weibo.com/luohanchenyilong"><img src="http://i67.tinypic.com/wbulbr.jpg"></a>
</a><a href="https://t.me/iosobjc"><img src="http://i66.tinypic.com/of2hbn.jpg"></a></a> 
</p>

----------


![enter image description here](http://getwallpapers.com/wallpaper/full/6/b/8/1522210-widescreen-optimus-prime-vs-megatron-wallpaper-1920x1080.jpg)

从未被讨论过的问题，不公布答案。顺延到下一期。只要讨论过，答案不正确也会提供答案。下面将讨论过的问题公布答案：


今天会从没有修改马甲（马甲格式为【昵称+地区/公司/职位】）的同学中随机抽取几位幸运儿，送出飞机票若干张。待会儿我出题，回答任意一道即可，别人回答过的，不能再回答，交卷时间为出题日第二天20点。因为是自己出的题，大部分网上没有答案。可以讨论，没点名同学，抢答正确后，请自觉补充同类型问题一道供点名同学回答。题目能够精准筛选非技术同学即可，不需要很难。

----------

1 【问题】【算法】缓存操作进行优化的措施中，有没有迎合用户“喜旧厌新”的算法技巧，可谓是缓存界的“断舍离”算法？也即：那些过去经常被访问的，将来也很可能被访问，优先级提高。那些长时间不被访问的，直接删了就好。描述下算法的实现原理。给出工作中至少两个使用场景。【 难度🌟】【出题人 微博@iOS程序犭袁】
【答案】LRU彻汰策略，应用场景比如iOS的两个常用库：Lottie、YYCache。

----------


2 【问题】【在IM开发中】app 接收到一个message，上层UI刷新一次，要求考虑到CPU和电量消耗，解决短时间内接收到很多条消息的问题。怎么解决？有几种方案？【出题人：远之²³³³-free zone-北】【 难度🌟🌟】
【答案】

  方案一：利用联结(在异步线程上调用dispatch_source_merge_data后，就会执行 dispatch source 事先定义好的handler）、DISPATCH_SOURCE_TYPE_DATA_ADD，将刷新UI的工作拼接起来，短时间内做尽量少次数的刷新。

  方案二：自己实现队列、确定一个合适的时间阈值，在阈值时间到达时、主动取消息或者被动接受消息，最后刷新UI，达到消息限流的作用。举例：假设我们消息的获取都是通过长连接推送过来的，而不是主动拉取的。可以用消息队列来做，消费者定期去队列取数据进行数据展示。
或者假设前一条 消息和后一条消息间隔只在0.2s以内，就可以认为是频繁收到消息。然后把这0.2s内的消息刷新相关操作，比如做个动画效果。

----------

3 描述：如图label1在containerView上，containerView、label2在cell.contentView上
问题：label1与label2的字数不固定，需求是，无论label2字数多少，label1都不能被拉伸或者压缩：【 难度🌟🌟🌟】【出题人：记忆、搁浅】

![Pasted Graphic 3](https://user-images.githubusercontent.com/2911921/57273314-df622780-70c9-11e9-87cf-172c0d8d02f3.jpg)


效果图见：


![Pasted Graphic 4](https://user-images.githubusercontent.com/2911921/57273320-e5f09f00-70c9-11e9-8d79-40bc1169ed08.jpg)


【答案】需要给label1设置一下优先级，设置平行的的Content compression resistance priority。

系统 Autolayout 参考 ：
- [**Apple-Documentation-UIView-setContentHuggingPriority(_:for:)**]( https://developer.apple.com/documentation/uikit/uiview/1622485-setcontenthuggingpriority ) 

Masonry 参考以下属性：

 ```Objective-C
    static const MASLayoutPriority MASLayoutPriorityRequired = UILayoutPriorityRequired;
    static const MASLayoutPriority MASLayoutPriorityDefaultHigh = UILayoutPriorityDefaultHigh;
 ```

图形化操作见以下动图：

![1557371233399](https://user-images.githubusercontent.com/2911921/57424621-dc427500-724a-11e9-93b3-1b29549a41e8.gif)

----------

4 【计算机常识】如果你一直在用GitLab开发，现在公司要切换到GitHub开发，可以两个邮箱不一样，你自己的提交记录，GitHub无法识别，签到数据也没了，请问如何让GitHub能够识别你整个仓库中所有的提交记录。【难度🌟🌟】【出题人 微博@iOS程序犭袁】
【注】“签到数据”指的是下图：
![image](https://user-images.githubusercontent.com/2911921/57293454-5d88f300-70f7-11e9-9818-7325622aaf15.png)
【答案】参考：
 -  [《 Git 实战手册(一): 批量修改log中的提交信息》]( https://www.cnblogs.com/geyouneihan/p/9600721.html  ) 
 -  [《使用git迁移git项目并保留提交记录》]( https://yq.aliyun.com/articles/675073?utm_content=m_1000028591 ) 


----------

Posted by [微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)  
原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)
<p align="center"><a href="http://weibo.com/u/1692391497?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/1692391497/b46c844b/1.png"/></a></a>



----------

 <p align="center">
One more thing...
 </p>
 <p align="center">
【非礼勿视】以下为彩蛋部分，建议28岁以上男性观看
 </p>

----------


![image](https://user-images.githubusercontent.com/2911921/57273677-4cc28800-70cb-11e9-8000-7ed13889ade4.png)





#  [iTeaTime(技术清谈)]( https://github.com/ChenYilong/iOSInterviewQuestions/issues/127)【004期】【代号：林肯】

----------

![](http://ww4.sinaimg.cn/large/006tNc79ly1g4wvr2s23oj31sr0q242m.jpg)

<!--- 

![](http://ww2.sinaimg.cn/large/006tNc79ly1g4wvsss7rkj31rx0p4whk.jpg)


-->

----------


出题：微博@iOS程序犭袁
本期代号：林肯


----------


<!--- 

<p align="center">
<a href=""><img src="https://img.shields.io/badge/pod-v1.21.x-brightgreen.svg"></a>
<a href=""><img src="https://img.shields.io/badge/Swift-compatible-orange.svg"></a>
<a href=""><img src="https://img.shields.io/badge/platform-iOS%207.0%2B-ff69b5152950834.svg"></a>
<a href="https://github.com/ChenYilong/CYLTabBarController/blob/master/LICENSE"><img src="https://img.shields.io/badge/license-MIT-green.svg?style=flat"></a>
</p>

-->

<p align="center">
<a href="https://github.com/ChenYilong/iOSBlog/releases.atom"><img src="https://img.shields.io/badge/RSS feed (full text feed)-订阅我的博客更新-yellow.svg"></a>
</p>

<p align="center">
<a href="https://github.com/ChenYilong/iOSBlog/issues/21"><img src="https://img.shields.io/static/v1.svg?label=QQ%E3%80%81Telegram%20Group&color=blue&message=%E7%82%B9%E5%87%BB%E8%8E%B7%E5%8F%96QQ%E3%80%81Telegram%E7%BE%A4%E4%BF%A1%E6%81%AF&color=green"></a>
</p>


<p align="center">
<a href="https://twitter.com/stevechen1010"><img src="https://img.shields.io/twitter/url/http/shields.io.svg?style=social&maxAge=2592000"></a>
<a href="http://weibo.com/luohanchenyilong"><img src="http://i67.tinypic.com/wbulbr.jpg"></a>
</a><a href="https://t.me/iosobjc"><img src="http://i66.tinypic.com/of2hbn.jpg"></a></a> 
</p>

----------

![](http://getwallpapers.com/wallpaper/full/0/3/2/1518585-abe-lincoln-wallpaper-2560x1440-for-tablet.jpg)

从未被讨论过的问题，不公布答案。顺延到下一期。只要讨论过，答案不正确也会提供答案。下面将讨论过的问题公布答案：


今天会从没有修改马甲（马甲格式为【昵称+地区/公司/职位】）的同学中随机抽取几位幸运儿，送出飞机票若干张。待会儿我出题，回答任意一道即可，别人回答过的，不能再回答，交卷时间为出题日第二天20点。因为是自己出的题，大部分网上没有答案。可以讨论，没点名同学，抢答正确后，请自觉补充同类型问题一道供点名同学回答。题目能够精准筛选非技术同学即可，不需要很难。

----------

 1【问题】【编程基础】如何用一行代码，互换两个变量的值，且不产生第三个变量。

【方法一】【啥玩意儿啊-iOS-北京，提供答案】利用Swift元组特性：
可以在定义的同时就取出元祖中的值
// 相当于同时定义了三个变量
let (name, age, score) = (“a”, 30, 99.9)

根据这一特性，我们可以这样互换值：
(a, b) = (b, a)

【方法二】【消摇提供答案】
   (a = a ^ b) && (b = a ^ b) && (a = a ^ b)   或者这样 a = a ^ b;  b = a ^ b; a = a ^ b;

(a = a + b) && (b = a - b) && (a = a - b)
(a = a x b) && (b = a / b) && (a = a / b)

【方法三】【消摇提供答案】
a = ( a + b ) - b * ( b = a );


----------

 2【问题】【iOS】如何给view同时加上圆角和阴影？至少给出两种实现方法，使用到的API越高级越好。
【提示】两种方法，答案提示：UIBezierPath，和iOS11 layer有个新的方法
【答案】iOS11的layer是maskedCorners，CACornerMask。

----------

3【问题】【计算机常识】在开发中，我们在重连等场景中，为避免造成过度的资源消耗，我们常常把重试的时间间隔做递增处理，有时是指数级增长方式，比如第1次与第二次时间间隔为2秒，第二次与第三次时间间隔为4秒，然后是8秒，我们有时也按照1，3，5这样的规律递增。这种编程技巧的名称是什么？

【答案】指数退避算法。


----------

4 【问题】【算法】《易传·系辞上传》：“易有太极，是生两仪，两仪生四象，四象生八卦。”，这句话结合下面的几张图，与计算机数据结构中的哪个概念更为相近，描述该概念，越详细越好。问题如下：
六十四卦所在结构中节点数是多少？
六十四卦中的任意一卦，在上述数据结构体系中对应的概念叫什么？
六十四卦中的任意一卦的高度与深度分别是多少？
“完全” 与 “满” 用哪一个，形容下面的图片更为贴切？


![14153248314177 jpg](https://user-images.githubusercontent.com/2911921/57230297-99b24a00-704a-11e9-84d5-36d94cedee5c.gif)

![v2-30f016d2570d0f3717312be92922fb9c_r](https://user-images.githubusercontent.com/2911921/57230491-0af1fd00-704b-11e9-8448-e53a8ec52f92.jpg)







【答案】总体是二叉树，高度是 0 深度是7，节点数是 2ˆ7-1， 满二叉树。参考下图：

![image](https://user-images.githubusercontent.com/2911921/57230539-2826cb80-704b-11e9-9816-f3a99fd567e0.png)


----------

5【问题】【hybrid-app】js与native交互中，js如何调用native方法，native如何调js方法，借助的中间foundation叫什么。给出核心步骤对应函数，重点给出前端和native需要约定联调的部分。【难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】
【提示】推荐 [《一本走心的 JS-Native 交互电子书》](https://github.com/lefex/DSA/issues/16) 。
【答案】【群成员闪舞提供】
native 能直接调用 js
[webView stringByEvaluatingJavaScriptFromString:javascriptCommand];    

js 不能直接调用 native 的方法，但是可以间接的通过一些方法来实现。可以利用 UIWebView 的 webView: shouldStartLoadWithRequest: navigationType: 代理方法来做。 WKWebView 中可以通过 webView: decidePolicyForNavigationAction: decisionHandler:

要想触发native 的 webView: shouldStartLoadWithRequest: navigationType方法，可以通过下面两种形式：
1.创建 iframe 标签
2.设置 window 的 location

核心步骤：
1. native 加载 html，其中的 script 标签里（也就是 js 代码）， js 创建 iframe 标签，并设置它的 src 属性为 wvjbscheme://__BRIDGE_LOADED__，并且把回掉放到一个数组里
2.在 webView: shouldStartLoadWithRequest: navigationType 方法中拦截 wvjbscheme://__BRIDGE_LOADED__，并加载本地（桥中）的 js
3.本地（桥） js 创建隐藏的 iframe 标签并且修改 src 为 wvjbscheme://__WVJB_QUEUE_MESSAGE__，这样就又能在 webView: shouldStartLoadWithRequest: navigationType 拦截了。


----------

6【问题】【iOS】猜想dequeueReusableCellWithIdentifier的实现是怎样的，给出示例代码。注意边界条件：相邻cell的identifier相等时。你的实现中该函数的时间复杂度是多少。为什么？【难度🌟🌟🌟🌟】【出题人 微博@iOS程序犭袁】
cell复用机制的实现猜想，见 [GitHub-Chameleon](https://github.com/BigZaphod/Chameleon/blob/84605ede274bd82b330d72dd6ac41e64eb925fd7/UIKit/Classes/UITableView.m#L718) ：


 ```Objective-C
- (UITableViewCell *)dequeueReusableCellWithIdentifier:(NSString *)identifier
{
    for (UITableViewCell *cell in _reusableCells) {
        if ([cell.reuseIdentifier isEqualToString:identifier]) {
            UITableViewCell *strongCell = cell;
            
            // the above strongCell reference seems totally unnecessary, but without it ARC apparently
            // ends up releasing the cell when it's removed on this line even though we're referencing it
            // later in this method by way of the cell variable. I do not like this.
            [_reusableCells removeObject:cell];

            [strongCell prepareForReuse];
            return strongCell;
        }
    }
    
    return nil;
}
 ```


时间复杂度为： O(n)

注意：

`NSArray` / `NSMutableArray`

`containsObject:`，`containsObject:`，`indexOfObject*`，`removeObject:` 会遍历里面元素查看是否与之匹对，所以复杂度等于或大于 O(n)。

这里 `_reusableCells` 使用的是`NSMutableSet`，而
`NSSet` / `NSMutableSet` / `NSCountedSet`

这些集合类型是无序没有重复元素。这样就可以通过 hash table 进行快速的操作。比如 addObject:, removeObject:, containsObject: 都是按照 O(1) 来的。需要注意的是将数组转成 Set 时会将重复元素合成一个，同时失去排序。



加之 for 循环，可以得到复杂度计算结果。


参考：[《深入剖析 iOS 性能优化》](https://ming1016.github.io/2017/06/20/deeply-ios-performance-optimization/)

----------

7【问题】如图：用autolayout做下横竖屏适配：【难度🌟🌟🌟】【出题人 微博@iOS程序犭袁】


里面：蓝色是父视图，子视图是Label和图片，图片可拉伸。Label和图片总是相对居中显示。
对图片顶端，label底端，拉伸，水平总是居中。


<img width="847" alt="Screenshot 2019-04-26 at 8 56 03 PM" src="https://user-images.githubusercontent.com/2911921/57230601-4a204e00-704b-11e9-9fea-6bd4de2e351a.png">


【答案】把两个子视图，包一层View，不一定是StackVIew，也可以是普通View，内部搞好约束，top、left、bottom、right。再对中间层view做水平、垂直居中操作即可。

类似前端方案：【十代-小公司-泉州iOS提供】
使用  [**FlexLib**]( https://github.com/zhenglibao/FlexLib ) 框架：

![Pasted Graphic 1](https://user-images.githubusercontent.com/2911921/57230611-50aec580-704b-11e9-86cc-69252098c22d.png)
![Pasted Graphic 2](https://user-images.githubusercontent.com/2911921/57230617-55737980-704b-11e9-8186-d3d0a022b8b6.png)



----------


Posted by [微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)  
原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | [Creative Commons BY-NC-ND 3.0](http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh)
<p align="center"><a href="http://weibo.com/u/1692391497?s=6uyXnP" target="_blank"><img border="0" src="http://service.t.sina.com.cn/widget/qmd/1692391497/b46c844b/1.png"/></a></a>



----------

 <p align="center">
One more thing...
 </p>
 <p align="center">
【非礼勿视】以下为彩蛋部分，建议28岁以上男性观看
 </p>

----------


![image](https://user-images.githubusercontent.com/2911921/57292671-e6eaf600-70f4-11e9-91d1-4602d9bec00b.png)


