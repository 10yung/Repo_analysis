Minor code cleanup, added CI steps to circleci config and added release steps in `scripts/release.sh`

**Note**: changed bellman to point to [9e35737](https://github.com/matter-labs/bellman/commit/9e35737209d4afc2e69af1e0d7cbe6d02e32aecf) as there is a breaking change in latest bellman commit.
Hi team!

I've been trying to split my code up into neat modules. Modules make code more re-usable and all that good stuff.

In some cases, I'm effectively 'outsourcing' some equality checks to other modules. Therefore it feels sensible to not repeat any equality check in the calling function. But then I get an error that `Assertion statements should be an equality check`.

**Example**: (I haven't checked whether this compiles, I'm just trying to give a minimal example):

Basic example WITHOUT outsourcing the equality check:
main-file.zok:
```
main ( field a, private field b, private field c ) -> ():
    a == b * c
    return
```
^^^ this works

The same example WITH outsourcing the equality check:
main-file.zok:
```
import "./common/check-multiplication.zok" as checkMultiplication
main ( field a, private field b, private field c ) -> ():
    checkMultiplication(a, b, c) // this line fails
    return
```

check-multiplication.zok:
```
main ( field a, private field b, private field c ) -> ():
    a == b * c
    return
```

^^^ this would fail, with:

`'not yet implemented: Assertion statements should be an equality check, found checkMultiplication(a, b, c)'`


I could modify this by returning a `1` from the `check-multiplication.zok` file, but this isn't ideal (because the `check-multiplication.zok` file contains a valid function).

What would be ideal, is permitting checkMultiplication(a, b, c) as a standalone line, because it contains the relevant equality checks.
- Add instructions for MacOS
- Remove `WITH_LIBSNARK` distinction


Hello I'm a beginner learning zokrates. 

I want to make a circuit that can verify that you know the secret key that matches the public key. The below circuit is implemented using ProofOfOwnership library, but it does not work successfully.  

The ethereum secret key and public key for testing
secret key: 
public key:  

test.zok code
```
import "ecc/proofOfOwnership.zok" as proofOfOwnership
import "ecc/babyjubjubParams.zok" as context

def main(field[2] pk, private field sk) -> (field):
  //prove the public key
  context = context()
  proofOfOwnership(pk, sk, context) == 1
  return 1
```

test.js code
```
const util = require('ethereumjs-util')
const crypto = require('crypto');
const BN = require('bn.js');
const SCALING_FACTOR = new BN('1000000000000000000');

function printZokratesCommand(params) {
  let cmd = 'zokrates compute-witness -a '
  params.forEach(p => {
    cmd += `${new BN(p, 16).toString(10)} `
  })
  console.log(cmd);
}

function getCreateNoteParams(_pubKey, _secKey) {
  let pubKey = new BN(_pubKey, 16).toString(16);
  let secKey = new BN(_secKey, 16).toString(16);
  let privateParams = [pubKey.slice(0,64), pubKey.slice(64), secKey];
  printZokratesCommand(privateParams);
}

getCreateNoteParams(
  '13ec8d3dcdac87a3a528694902294be0770c968bd0bc9a5a7571f9466010240940791f9450a818b6aa71f031eff7aceadc66b53d52b59786a19446e48a9bd57f', // pk
  '0x7abcea3f35fa4229874e55bb29a0da13700de365e2b6e4d41edbb718519089c', // sk
)
```

"Zokrates compute witness -a ~" fails when testing.
![image](https://user-images.githubusercontent.com/20852734/70231008-dee35980-179c-11ea-97be-c248062aaf67.png)

I want to know why the error occurs. The public key and secret key is normal.
I found that "ZoKrates/zokrates_stdlib/tests/tests/ecc/proofOfOwnership.zok" example uses "ecc/babyjubjubParams" as context. and the tested pk&sk is created using "https://github.com/Zokrates/pycrypto".  However, the pyCrypto creates a different public key when using the same secret key.  

How can I solve the problem? What is my fault?

Thanks. 


Hi!

Looking at the sha256 code in stdlib it uses a special `EMBED` import, which I'm guessing is a compiler intrinsic?

I'm interested in doing sha512hmac in zokrates, since I want to try and make a zkp that if PK1 came from a BIP32 HD seed, then given a chain-code, so does PK2. Maybe this isn't even possible? It was just a quick idea and I went looking for sha512 as the first thing
The future example should contait structs in it.
Hi team! I was just exploring doing 'triangular' for loops, in order to ensure a list contains only unique values:

What I'd like to do is the following 'triangular' nested for loop. Notice how the second loop has lower bound `i`:

```
// check for duplicates
def main(field[256] values) -> ():
    field acc = 1
    for field i in 0..256 do
        for field j in i..256 do
            acc = acc * (values[j] - values[i])
            isNotZero(acc) == 1
        endfor
    endfor

    return
```

This (understandably) fails, because `i` is variable: `thread 'main' panicked at 'not yet implemented: For loop bounds should be constants, found i', zokrates_core/src/absy/from_ast.rs:288:18`

However, in the above code, it's clear that the nested loop's bounds aren't dynamic, because `i` isn't changed within the loop. Therefore, this ought to be allowable.

Are there plans to allow such syntax in future?
Hello,

I have an `invalid opcode` when calling the `verifyTx` method of a verifier contract generated by zokrates. 
My use case is quite complicated, so I repeated the operation with a simple program to isolate the problem:

- I define the following zokrates file `test.zok`:

```
def main(private field secret, field input) -> (field):
    return secret+input
```

- Then I run `zokrates compile -i test.zok`, `zokrates setup`, `zokrates export-verifier`.

- In a terminal I run  `ganache-cli`.

- I then launch Remix IDE, set up the environment to connect to the running `ganache-cli` with the Web4 Provide, import the `verifier.sol`, compile it and deploy it.

- I run `zokrates compute-witness -a 1 2`, and `zokrates generate-proof`.

- In remix, I call the `verifyTx` method of the previously deployed verifier, with the values from `proof.json` as inputs.

I get the following : `transact to Verifier.verifyTx errored: VM Exception while processing transaction: invalid opcode` 

When I use Remix with the `Javascript VM` environment, instead, the error doesn't show up.

Some versions for reproducibility:
- ZoKrates 0.5.0
- Ganache CLI v6.7.0 (ganache-core: 2.8.0)
- Remix compiler 0.5.11+commit.c082d0b4