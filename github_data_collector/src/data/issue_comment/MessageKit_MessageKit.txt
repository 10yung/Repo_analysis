![IMG_0130](https://user-images.githubusercontent.com/42661903/71859992-f8751980-312b-11ea-958c-0d911ce15286.PNG)

Steps to Reproduce:
Download the latest MessageKit
Open ChatExample.xcworkspace
pod install
Build and run on your phone (code signing required)

On the Example App, navigate to any Example
Attempt to send an memoji (memoji keyboard required)
Upon selecting a memoji, the image will be sent to the MessageInputBar

MessageKit v. 3.0.0
on iPhone 11 running iOS 13.3
Swift 5
Hello there,
Please what would be the best to add a quoted view like on the image below. I tried to copy the code of the default text view and add a vertical stack view with no success.

Cheers

![QuotedView](https://user-images.githubusercontent.com/2421746/71782394-b89e1d00-2fd9-11ea-8abd-63f4414e413a.png)

- MessageKit 3.0.0
- iOS 13.3
- swift 4.2
- iPhone X

if VC will show in sheet mode after small drag the VC then bottom view (where is input bar, send button and etc) - is hiding, how can I fix that ? I try to debug and after dragging VC is calling method viewWillDisappear  and handleKeyboardDidChangeState but there didn't change bottom view position. Can u help me ?
- What version of MessageKit are you using? **Last development branch**
- What version of iOS are you running on? **13.3**
- What version of Swift are you running on? **Swift 4.2**
- What device(s) are you testing on? Are these simulators? **All devices**
- Is the issue you're experiencing reproducable in the example app? I have no idea.

```swift
                            self.messagesCollectionView.messagesDataSource = self
                            self.messagesCollectionView.messagesLayoutDelegate = self
                            self.messagesCollectionView.messagesDisplayDelegate = self
                            self.messagesCollectionView.messageCellDelegate = self
                            
                            if let layout = self.messagesCollectionView.collectionViewLayout as? MessagesCollectionViewFlowLayout {
                                layout.textMessageSizeCalculator.outgoingAvatarSize = .zero
                                //layout.textMessageSizeCalculator.incomingAvatarSize = .zero
                            }
                            self.messagesCollectionView.reloadData()
                            self.messagesCollectionView.scrollToBottom()
                            
                            self.messageInputBar.delegate = self
                            self.messageInputBar.inputTextView.delegate = self
```

When I was on iOS 12 the delegate was called correctly but with ios13 it's not
I can't click the 'sendButton' even if the user interaction is enabled and I don't got any delegate of cell like avatar click or cell click

- What version of MessageKit are you using?
3.0.0
- What version of iOS are you running on?
13.3, MacOS 10.15.1
- What version of Swift are you running on?
Swift 5.1
- What device(s) are you testing on? Are these simulators?
MacBook Pro 16''
- Is the issue you're experiencing reproducable in the example app?
Yes, there is no text input possible
![Screenshot 2019-12-19 at 17 50 43](https://user-images.githubusercontent.com/48917328/71192601-e4ef3500-2288-11ea-9604-99f3eac73fb1.png)

I have a collection view inside a custom cell that I created inherited by 
```swift
MessageContentCell
```
inside his cell I put a button, but buttons or cell selections are not triggered when I tap on them.

I also ovverride the methods headles like that:
```swift
    /// Used to handle the cell's contentView's tap gesture.
    /// Return false when the contentView does not need to handle the gesture.
    open override func cellContentView(canHandle touchPoint: CGPoint) -> Bool {
        return true
    }
    
    override func handleTapGesture(_ gesture: UIGestureRecognizer) {
        let touchLocation = gesture.location(in: self)

        switch true {
        case collectionView?.frame.contains(touchLocation):
            for (index, _) in items.enumerated() {
                if let cell = collectionView?.cellForItem(at: IndexPath(item: index, section: 0)) {
                    if cell.frame.contains(touchLocation) {
                        cell.point(inside: touchLocation, with: nil)
                    }
                }
            }
            break
        default:
            delegate?.didTapBackground(in: self)
        }
    }
    
    override func gestureRecognizerShouldBegin(_ gestureRecognizer: UIGestureRecognizer) -> Bool {
        let point = gestureRecognizer.location(in: collectionView)
        let indexPath = collectionView?.indexPathForItem(at: point)
        return indexPath == nil
    }
```

but it doesn't work

Please any help?


What does this implement/fix? Explain your changes.
---------------------------------------------------
When disabling MessageKit's input bar by returning `nil` for `inputAccessoryView` in `MessagesViewController`, this causes the method `requiredInitialScrollViewBottomInset()` to always return `0`. This shouldn't the case as it causes the property `additionalBottomInset` to be completely ignored. I noticed this issue as I currently handle adding `InputBarAccessoryView` into view myself due to wanting tab bar support.

Does this close any currently open issues?
------------------------------------------
Not that I'm aware of.


Any relevant logs, error output, etc?
-------------------------------------
Nope.

Any other comments?
-------------------
Nope.

Where has this been tested?
---------------------------
**Devices/Simulators:** iPhone XS, iPad Air 2

**iOS Version:** 12.1, 13.1

**Swift Version:** 4.2

**MessageKit Version:** 3.0.0



We are receiving keyboard notifications from child modal view controllers, this
is a fix to ensure that this doesn't happen. 

This was causing issues where messages were clipped by the input accessory view, because the bottom offset was incorrect.

<!--
Thanks for sending a pull request! Please make sure you click the link above to view the contribution guidelines, then fill out the blanks below.
-->

What does this implement/fix? Explain your changes.
---------------------------------------------------
Stops the keyboard handling when it comes back from a modal view controller on iOS 13

Does this close any currently open issues?
------------------------------------------
Not that I know of.


Any relevant logs, error output, etc?
-------------------------------------
<!--
If the logs is quite long, please paste to https://ghostbin.com/ and insert the link here.
-->

Any other comments?
-------------------
I can provide a video/screenshot of the fix if you want.

Where has this been tested?
---------------------------
**Devices/Simulators:** Devices + Simulator

**iOS Version:** 13

**Swift Version:** 5.0

**MessageKit Version:** 3.0.0



<!--
Thanks for sending a pull request! Please make sure you click the link above to view the contribution guidelines, then fill out the blanks below.
-->

What does this implement/fix? Explain your changes.
---------------------------------------------------
Fixes docs to be inline with the API


<!--
Thanks for sending a pull request! Please make sure you click the link above to view the contribution guidelines, then fill out the blanks below.
-->

What does this implement/fix? Explain your changes.
---------------------------------------------------
Fixes some incorrectly used `@available` annotations which did not properly signal to the compiler and user that the method/class/variable was deprecated/obsoleted.

Namely, this PR will correctly obsolete:
- `MessageInputBar`
- `MessageInputBarDelegate`

and will deprecate
- `Sender`
- `Sender.id`
- `Sender.init(id: String, displayName: String)`

as previously intended.

The reason they were not working was that the deprecated/obsoleted version marker was using the _MessageKit_ library version, however `@available` expects a Swift language version. This change simply removes the version number as the deprecations and obsoletions do not depend on the Swift language version.

Does this close any currently open issues?
------------------------------------------
Not to my knowledge

Any relevant logs, error output, etc?
-------------------------------------
<!--
If the logs is quite long, please paste to https://ghostbin.com/ and insert the link here.
-->
No

Any other comments?
-------------------
This PR will cause a small however *breaking change* to users who are still using in their code either
- `MessageInputBar`, or
- `MessageInputBarDelegate`

I assume this is OK since the code was there with the _intent_ to obsolete these all along, it just did not work properly.

Where has this been tested?
---------------------------
**Devices/Simulators:** … Simulator

**iOS Version:** … 13

**Swift Version:** … 5.0

**MessageKit Version:** 3.0.0

Note that this is a purely compile-time change, it has no runtime effects. Hence, it was tested to compile under the correct API usage and tested not to compile under incorrect API usage (example: using an obsoleted class). However I don't believe these is any way to actually write tests into the library to ensure a class/method/etc is deprecated or obsoleted.