So, I need to pass props to the creation of my store, so I can use those props to derive the initial store state. Which means I have to create the store within the component itself, so I have access to its props. But that initialises a new store each time it's called.

Is there a way to create a store from within the component without it creating a new store each time? Or perhaps a better way to set initial state of the store from a component's props?

thx
Recently I have a use case where I need to add event listener in response to state change, using `subscribe`. Currently there is no idiomatic way to remove those listeners.

Currently I'm doing it like so, but it doesn't feel right.

```js
let listener
subscribe(
  someState => {
    window.removeEventListener('click', listener)
    
    listener = () => console.log(someState)
    
    window.addEventListener('click', listener)
  },
  selector
```

I guess an API similar to React's `useEffect` with cleanup function would do the trick?

This also applies to `setInterval` and `setTimeout`.
When updating from 1.0.7 to 2.2.1, I lose the tracking of all actions in the Redux devtools:

## 2.2.1
![image](https://user-images.githubusercontent.com/2037851/68097209-a2e47c80-fef0-11e9-9495-0830ef579b87.png)

## 1.0.7
![image](https://user-images.githubusercontent.com/2037851/68097276-1b4b3d80-fef1-11e9-89db-4f67f84c5867.png)

The app works just fine and the store updates correctly when using the app, it just doesn't log out the commits any more.

Using it like:

```ts
import create, { StateCreator } from 'zustand'
import { devtools } from 'zustand/middleware'

export const DefaultStoreState: DefaultStateGetters = {
  lastDataUpdate: new Date(),
  loading: false,
  showDrawer: false,
  message: null,
  ...
}

const store: StateCreator<DefaultState> = (set, get) => ({
  ...DefaultStoreState,
  ...
})

export const [useStore, Store] = create<DefaultState>(devtools(store, 'WACHS App Store'))
```

Any pointers would be appreciated. Let me know if you need more detail and I will update this post.

Cheers & thanks
Patrik
Using immer and redux middlewares. 

i want to replace initial state with new state, but as zustand merges with ``set``, then it is quite impossible. 

```
defaultState  = {
  isLoading: false,
}
```

replace state with redux middleware:
From immer doc:
```
case "loadUsers":
            // OK: we return an entirely new state
            return action.payload
```

This should replace state entirely but ``isLoading`` is still present. How to replace entire state ?

or if i ``return {}`` then all old values are still in place

Tried different ways. immer middleware / using immer in redux middleware for set / added immer to reducer.. But was still unable to do it


Let's collect some,

- [ ] Concurrent React, are we ready for it?
- [ ] Simpler API?

currently

```jsx
const [useStore, api] = create(set => ({ set, count: 0 }))

const count = useStore(state => state.count)

const count = api.getState().count
const unsub = api.subscribe(count => console.log(count), state => state.count)
api.setState({ count: 1 })
```

why not

```jsx
const useStore = create(set => ({ set, count: 0 }))

const count = useStore(state => state.count)

const count = useStore.getState().count
const unsub = useStore.subscribe(count => console.log(count), state => state.count)
useStore.setState({ count: 1 })
```

vanilla users wouldn't name it "useStore"

```jsx
const api = create(set => ({ set, count: 0 }))
const count = api.getState().count
```

it would mean we're now api compatible with redux without doing much.

with a little bit of hacking it could also be made backwards compatible by giving it a iterable property. i've done this before with three-fibers useModel which returned an array once, but then i decided a single value is leaner.

@JeremyRH 
First of all, thanks a lot for this library. I very much enjoy its simplicity.

I'm trying to create a finite state machine middleware based on `zustand` and would love to seek some feedback. Is there anything I need to look out for in particular?

Here's the implementation.

```js
const defaultUpdater = (state, data) => ({ ...state, ...data })

const machine = (stateChart, initialData, updater = defaultUpdater) => (
  set,
  get,
  api
) => {
  api.transition = (action, data) =>
    set(currentState => {
      const nextState = stateChart.states[currentState.state].on[action]

      return nextState
        ? {
            ...updater(currentState, data),
            state: nextState
          }
        : currentState
    })

  return {
    transition: api.transition,
    state: stateChart.initialState,
    ...initialData
  }
}
```

And this is example usage.

```js
const IDLE = 'idle'
const ERROR = 'error'
const LOADING = 'loading'

const FETCH = 'fetch'
const FETCH_SUCCESS = 'fetch_success'
const FETCH_ERROR = 'fetch_error'

const stateChart = {
  initialState: IDLE,
  states: {
    [IDLE]: {
      on: {
        [FETCH]: LOADING
      }
    },
    [ERROR]: {
      on: {
        [FETCH]: LOADING
      }
    },
    [LOADING]: {
      on: {
        [FETCH_SUCCESS]: IDLE,
        [FETCH_ERROR]: ERROR
      }
    }
}

const [useStore, { transition }] = create(machine(stateChart, { todos: [] }))

transition(FETCH_SUCCESS, { todos: [...] })
```
Please, review https://github.com/zerobias/effector and https://github.com/artalar/reatom
I'm trying to use immer in api setState, but unable to overwrite it
This doesn't seems to work:

```const immer = config => (set, get, api) =>
  config(fn => set(produce(fn)), get, {
    ...api,
    setState: fn => api.setState(produce(fn)),
  });
```
Hello,

Is there a technical limitation that would explain why there are no automatic typings of the store ? 
I'm trying to debug my application to make sure there's no mutation issues.
Back in redux days I could use a middleware to detect it.
Does anyone have any insights on how to add middleware to zustand to detect mutation issues?