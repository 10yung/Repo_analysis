Need I say more? üòÅü§ò

![image](https://user-images.githubusercontent.com/350918/70282092-24178380-17bd-11ea-9c71-4edac165230f.png)

Hoping this is the best place to ask.

I'm trying to run Satriani from the command line

I followed the steps in the read me 

When I pass node rockstar input.rock

I get the following error.

``throw err;
    ^

Error: Cannot find module 'readline-sync'
    at Function.Module._resolveFilename (module.js:547:15)
    at Function.Module._load (module.js:474:25)
    at Module.require (module.js:596:17)
    at require (internal/module.js:11:18)
    at Object.<anonymous> (/home/matt/Documents/rockstar/satriani/rockstar.js:3:20)
    at Module._compile (module.js:652:30)
    at Object.Module._extensions..js (module.js:663:10)
    at Module.load (module.js:565:32)
    at tryModuleLoad (module.js:505:12)
    at Function.Module._load (module.js:497:3)
``

I'm aware readline-sync is a module of npm so I made sure I had it installed and updated and I do not sure how to progress this.
I couldn't see any kind of data collection like lists or array.

could we possibly get those added to rockstar?
I recently created a Java Package that could make Java read more like Rockstar using objects. I am unsure if this counts as a contribution. 

eg. 
Tommy.is_("Nothing");
while(Tommy.isnt(Eve) {
    I.build(Tommy, "up again");
}
I.scream(Tommy);

more at https://github.com/LivelyCarpet87/JavaLikeRockstar
uses the [Newton / Euler Convergence Transformation](https://en.wikipedia.org/wiki/Approximations_of_œÄ#Other_classical_formulae) to approximate¬†œÄ¬†to any precision a float can handle.

Doesn't use "let..be" syntax because I wanted it to work at https://palfrey.github.io/maiden/

If "this" were treated the same as "the", I'd be tempted to make it "this song".
In Rockstar, we have these marvellous functions that take parameters, just like this:
```
scale takes X, Y and Z
give back X times Y plus Z

say scale taking 1, 2, and 3 (output: "5")
```
However, it is not possible to define a function that accepts zero parameters. In this proposal I recommend a syntax for this. Currently there's no much need for them, but hopefully in the future we can use them more extensively.

The proposal is simple:
* in the method declaration we declare `takes nothing` (or other alias for `null` value like `nowhere` or `nobody`)
* in the method call we simply leave the `taking` part off. Technically the function name behaves like if it was a variable - if there is a function defined with that name, we can call the function, otherwise we need to access the variable. (The function names should have priority over the variables)

An example:
```
Let the sequence be 0

next takes nothing                (parameterless method declaration)
Build the sequence up
give back the sequence 

say next                          (output: "1")
the hunter says " elephants"
say next plus the hunter          (output: "2 elephants")
say next of 2                     (output: "6")
say next minus next               (output: "-1")
```

Currently I'm working on an OOP extension proposal, and this feature is necessary for the accessors - at least it would ease the way to write them.  So, in the future functions will be able to access more than the global variables - and there will be much more parameterless (getter) functions than at this moment.

The regular expression for "a single quote followed by a lowercase 's' and one or more whitespace characters" should be `'s\s+`; `\W` is a "non word character", i.e. anything but alphanumerics, underscore and a few others).

How about adding a package system in rockstar. So we can implement the array feature like one in python. Write program in C for list operations and use rockstar functions to do the operations. For example:

1. First there would be some syntax to import the package   
`We need <package_name> as <custom_identifier>`

2. Create an instance of what we imported with normal assignment operation
`<new_identifier> is <custom_identifier> `
or
`<new_identifier> is <custom_identifier>  taking <initials_parameters>`

3. Now operate on the instance
`<new_identifier> taking <operation_name> and <operand/s>`

For lists it would look something like   
`We need peace as the saviour`
`the winter is the saviour`
`the winter taking "append" and "okay"`

This code initializes the the winter as a list with 'okay'.
All the other operations can be done similarly.

This can be implemented in the interpreter I made.
I seem to have written a [rockstar quine](https://github.com/hapaxlego/rock_wine) (probably the first one that doesn't use arrays). To be honest roskstar is not my first programming language or the one I'm most familiar with, so I wanted some more experienced programmers to check it and have some fun before adding it to Rosetta.
The minimalistic version should be almost readable, the idiomatic adds some poetic numeral literals and a workaround for a misleading joke. I guess the trailing spaces and comments handling could lead to some problems. I had some trouble with uppercase It (seems expected behavior) and replaced an If/Else inside a function with two Ifs to make it work on both rocky and the website (probably related to #190). Feel free to add it to the examples. Sorry for all the edits, hope this didn't cause too much trouble.