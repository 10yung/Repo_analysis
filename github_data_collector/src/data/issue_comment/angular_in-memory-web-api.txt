**clickToDelete() method**
 clickToDelete(activityId: string){
    this.activityService.deleteActivity(activityId).subscribe(act=>{
      this.getActivities();
      this.deleteInfo= true;
      this.dataSaved= false;
    });
  }

**getAllActivities() method**
getActivities(){
  this.activityService.getAllActivity().subscribe((data: Activity[] )=>{
    this.activities = data;
    console.log(this.activities);
  });
}
**CMS cervice class /getAllactivity method**
getAllActivity():Observable<Activity[]>{
    return this.http.get<Activity[]>(this.activityUrl);
  }
**this is delete method which is in CMS service**
deleteActivity(activityId: string):Observable<Activity>{
    let httpHeaders = new HttpHeaders().set('Content-type','application/json');
    let options={
      headers:httpHeaders
    };
    return this.http.delete<Activity>(this.activityUrl+"/"+activityId);
  }
**Service Class**
![Screenshot (443)](https://user-images.githubusercontent.com/42120881/71612553-34a5f880-2bc7-11ea-8511-29004e668854.png)
**Activity.ts**
![Screenshot (444)](https://user-images.githubusercontent.com/42120881/71612561-412a5100-2bc7-11ea-8ff5-04a2d5a9154e.png)

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.12 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.12...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.12&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/angular/in-memory-web-api/network/alerts).

</details>
check **_updateHotel()_** method in hotel.service.ts file and  **_onUpdateHotel()_** method in hotel-edit.component.ts file. the problem is when i am trying to update a single hotel using  **_onUpdateHotel()_** method i am getting **error: "Missing 'hotels' id**" what i am doing wrong?

**hotel.service.ts file**
```
import { Injectable } from '@angular/core';
import { HotelModel } from "./hotel.model";
import {Observable, of, Subject} from "rxjs/index";
import {HttpClient, HttpHeaders} from "@angular/common/http";
import {catchError, map, tap} from "rxjs/internal/operators";

@Injectable({
  providedIn: 'root'
})
export class HotelService {
  private hotelsUrl = 'api/hotels';  // URL to web api
  private hotels: HotelModel[] = [];
  constructor(private http: HttpClient) { }

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  getHotels():Observable<HotelModel[]>{
    return this.http.get<HotelModel[]>(this.hotelsUrl).pipe(
      catchError(this.handleError<HotelModel[]>('get hotels', []) )
    )
  }

  getHotel(id: number | string){    // or you can go 2nd method which is just below
    return this.getHotels().pipe(
      map((hotels:HotelModel[]) => hotels.find(hotel => hotel.id === +id ))
    );
  }

  updateHotelInDetailSection(hotel:HotelModel):Observable<any>{
    return this.http.put(this.hotelsUrl, hotel, this.httpOptions).pipe(
      catchError(this.handleError<any>('update hotel'))
    )
  }

  updateHotel(id:number, hotel:HotelModel):Observable<any>{
    const url = `${this.hotelsUrl}/${id}`;
    return this.http.put<HotelModel>(url, hotel, this.httpOptions).pipe(
      tap(updatedHotel => console.log('hotel updated', url)),
      catchError(this.handleError<any>('updateHotel'))
    )
  }


  private handleError<T> (operation = 'operation', result?: T) {
  return (error: any): Observable<T> => {
    console.error(error); // log to console instead
    return of(result as T);
    };
  }

}
```

**hotel-edit.component.ts file**

```
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from "@angular/forms";
import { HotelService} from "../hotel.service";
import {ActivatedRoute, ParamMap, Params, Router} from "@angular/router";
import { switchMap } from "rxjs/internal/operators";
import { HotelModel } from "../hotel.model";

@Component({
  selector: 'app-hotel-edit',
  templateUrl: './hotel-edit.component.html',
  styleUrls: ['./hotel-edit.component.css']
})
export class HotelEditComponent implements OnInit {
  hotelEditForm:FormGroup;
  editMode;
  id:number;
  hotel:HotelModel;
  constructor(
              private fb: FormBuilder,
              private hotelService:HotelService,
              private route:ActivatedRoute,
              private router:Router,

              ) { }

  ngOnInit() {
    this.route.params.subscribe(
      (params: Params) => {
        this.id = +params['id'];
        this.editMode = params['id'] != null;
        this.initHotelForm()
    }
    );

    this.hotelEditForm = this.fb.group({
    name:[''],
    price:[''],
    imagePath:[''],
    description:[''],
    city:[''],
    address:['']
  })
  }

  private initHotelForm(){
    let hotelName = '';
    let hotelPrice:number=null;
    let hotelImagePath = '';
    let hotelDescription = '';
    let hotelCity = '';
    let hotelAddress = '';

    if(this.editMode){
       this.hotelService.getHotel(this.id).subscribe(data => {
         const hotel = data;
         hotelName = hotel.name;
         hotelPrice = hotel.price;
         hotelImagePath = hotel.imagePath;
         hotelDescription = hotel.description;
         hotelCity = hotel.city;
         hotelAddress = hotel.address;


       this.hotelEditForm.controls['name'].setValue(hotelName);
       this.hotelEditForm.controls['imagePath'].setValue(hotelImagePath);
       this.hotelEditForm.controls['price'].setValue(hotelPrice);
       this.hotelEditForm.controls['description'].setValue(hotelDescription);
       this.hotelEditForm.controls['address'].setValue(hotelCity);
       this.hotelEditForm.controls['address'].setValue(hotelAddress);

      });
    }
  }
  onUpdateHotel(){
    if(this.editMode){
      this.hotelService.updateHotel(this.id, this.hotelEditForm.value).subscribe(()=>
        this.router.navigate(['/hotels'], { relativeTo: this.route })
      )
    }
  }

}

```


Hi My collection is an Array of items. 

I'm unable to post array back to collection.. it adds an array to the collection instead?.

Our API  back ends work with batch update flow instead off updating individual items so i need to be able to post an array of items. Does anybody have any suggestions?

Thanks
Please provide a simple example of constructing a valid response in a method interceptor.

The ticket #44 refers to something that apparently has been moved, and the example in the README is very general, succinct and I find it not helpful at all.
I'm constanly getting 404 on requests like GET `/my-fruits`
THis is my class

export class FakeMemoryDbImplService {



  SERVER_URL: string = "http://localhost:8080/api/";
  constructor(private httpClient: HttpClient) { }

  public getLocations() : Observable<Location[]> {
    return this.httpClient.get<Location[]> (this.SERVER_URL + 'locations');
  }
}

and when i am trying to call it using 

export class LocationComponent {

  onLocationsDisplay() {
    this.dbservice.getLocations().subscribe((data: Location[]) => {
      console.log(data);
    });
  }
}

it creates me a new object. What could be the issue?
I used to be able to write the imports like this:
```
imports: [
	CommonModule,
	HttpClientModule,
	HttpClientInMemoryWebApiModule.forRoot(MockDataApi, { dataEncapsulation: false })
],
```

Now, since version "0.7.0", it has to be written like this, which when done, you can no longer use the "passThru" option  because now the standard WebApi won't exist while "mocking=true":
```
imports: [
		CommonModule,
		env.useMockData ? HttpClientInMemoryWebApiModule.forRoot(MockDataApi, { dataEncapsulation: false }) : HttpClientModule,
],
```

If I try to do the first way above, I get this error every time:
> Cannot instantiate cyclic dependency! HttpClient ("[ERROR ->]"): in NgModule AppModule in ./AppModule@-1:-1

https://github.com/angular/in-memory-web-api/blob/b71d39fd48cf189c831603e3ae8fd954216ce2ef/src/app/hero.service.ts#L3