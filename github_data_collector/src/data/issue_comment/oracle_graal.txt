Not sure if this is the right place to ask this question. However, does Graal's JIT Compiler have the corresponding flag to C2's AutoBoxCacheMax? If not, is there any plan to enable it in Graal? Thank you!
I tried building my app (https://github.com/dubbadhar/gramophy) with the following changes :
1. Removing jnativehook library
2. Removing awt usage
Build was successful, then when i start to play any media file, it just doesnt proceed. `mediaPlayer.setOnError(...)` isn't triggered, and its not in `READY` state either. No stack trace is shown as well.

pom.xml : 
```
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.github.dubbadhar</groupId>
    <artifactId>Gramophy</artifactId>
    <version>2020</version>


    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <javafx.version>13</javafx.version>
        <client.plugin.version>0.1.11</client.plugin.version>
        <mainClassName>Gramophy.Main</mainClassName>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
            <version>13</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>13</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-media</artifactId>
            <version>13</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>13</version>
        </dependency>

        <dependency>
            <groupId>com.jfoenix</groupId>
            <artifactId>jfoenix</artifactId>
            <version>9.0.8</version>
        </dependency>

        <dependency>
            <groupId>com.mpatric</groupId>
            <artifactId>mp3agic</artifactId>
            <version>0.9.1</version>
        </dependency>

        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20190722</version>
        </dependency>

        <dependency>
            <groupId>io.github.typhon0</groupId>
            <artifactId>AnimateFX</artifactId>
            <version>1.2.1</version>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-swing</artifactId>
            <version>13</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <release>11</release>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.3</version>
                <configuration>
                    <mainClass>${mainClassName}</mainClass>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.gluonhq</groupId>
                <artifactId>client-maven-plugin</artifactId>
                <version>${client.plugin.version}</version>
                <configuration>
                    <!-- Uncomment to run on iOS: -->
                    <!-- <target>ios</target> -->
                    <graalvmHome>/home/dubbadhar/graalvm/</graalvmHome>
                    <reflectionList>
                        <list>javafx.fxml.FXMLLoader</list>
                        <list>Gramophy.dashController</list>
                        <list>javafx.scene.control.Button</list>
                        <list>javafx.scene.control.Label</list>
                        <list>com.jfoenix.controls.JFXButton</list>
                        <list>com.jfoenix.controls.JFXMasonryPane</list>
                        <list>com.jfoenix.controls.JFXSpinner</list>
                        <list>javafx.geometry.Insets</list>
                        <list>javafx.scene.control.Label</list>
                        <list>javafx.scene.control.ListView</list>
                        <list>javafx.scene.CacheHint</list>
                        <list>javafx.scene.paint.Paint</list>
                        <list>javafx.scene.control.ScrollPane</list>
                        <list>javafx.scene.control.ScrollPane$ScrollBarPolicy</list>
                        <list>com.jfoenix.controls.JFXButton$ButtonType</list>
                        <list>javafx.scene.control.Slider</list>
                        <list>javafx.scene.image.Image</list>
                        <list>javafx.scene.image.ImageView</list>
                        <list>javafx.scene.layout.Priority</list>
                        <list>javafx.scene.layout.AnchorPane</list>
                        <list>javafx.scene.layout.HBox</list>
                        <list>javafx.scene.layout.Region</list>
                        <list>javafx.scene.layout.StackPane</list>
                        <list>javafx.scene.layout.VBox</list>
                        <list>javafx.scene.text.Font</list>
                        <list>javafx.scene.control.TextField</list>
                    </reflectionList>
                    <mainClass>${mainClassName}</mainClass>
                </configuration>
            </plugin>

        </plugins>
    </build>

    <pluginRepositories>
        <pluginRepository>
            <id>gluon-releases</id>
            <url>http://nexus.gluonhq.com/nexus/content/repositories/releases/</url>
        </pluginRepository>
    </pluginRepositories>
</project>
```

But overall the app itself starts in a jiffy, and i really love it.
JavaFX Version : 13
My native image fails at run-time with the following:
```
2020-01-17 02:40:08,941 INFO  [com.dat.pow.LanderResource] (vert.x-worker-thread-5) Could not 
connect to cassandra
java.lang.IllegalArgumentException: Error instantiating class AtomicTimestampGenerator (specified by advanced.timestamp-generator.class): com.kenai.jffi.Foreign.invokeN2O1(JJJJLjava/lang/Object;III)J [symbol: Java_com_kenai_jffi_Foreign_invokeN2O1 or Java_com_kenai_jffi_Foreign_invokeN2O1__JJJJLjava_lang_Object_2III]
	at com.datastax.oss.driver.internal.core.util.Reflection.buildFromConfig(Reflection.java:236)
	at com.datastax.oss.driver.internal.core.util.Reflection.buildFromConfig(Reflection.java:94)
	at com.datastax.oss.driver.internal.core.context.DefaultDriverContext.buildTimestampGenerator(DefaultDriverContext.java:363)
	at com.datastax.oss.driver.internal.core.util.concurrent.LazyReference.get(LazyReference.java:55)
	at com.datastax.oss.driver.internal.core.context.DefaultDriverContext.getTimestampGenerator(DefaultDriverContext.java:732)
	at com.datastax.oss.driver.internal.core.session.DefaultSession$SingleThreaded.init(DefaultSession.java:327)
	at com.datastax.oss.driver.internal.core.session.DefaultSession$SingleThreaded.access$1000(DefaultSession.java:280)
	at com.datastax.oss.driver.internal.core.session.DefaultSession.lambda$init$0(DefaultSession.java:126)
	at io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)
	at io.netty.util.concurrent.PromiseTask.run(PromiseTask.java:73)
	at io.netty.channel.DefaultEventLoop.run(DefaultEventLoop.java:54)
	at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:834)
	at com.oracle.svm.core.thread.JavaThreads.threadStartRoutine(JavaThreads.java:497)
	at com.oracle.svm.core.posix.thread.PosixJavaThreads.pthreadStartRoutine(PosixJavaThreads.java:193)
Caused by: java.lang.UnsatisfiedLinkError: com.kenai.jffi.Foreign.invokeN2O1(JJJJLjava/lang/Object;III)J [symbol: Java_com_kenai_jffi_Foreign_invokeN2O1 or Java_com_kenai_jffi_Foreign_invokeN2O1__JJJJLjava_lang_Object_2III]
	at com.oracle.svm.jni.access.JNINativeLinkage.getOrFindEntryPoint(JNINativeLinkage.java:145)
	at com.oracle.svm.jni.JNIGeneratedMethodSupport.nativeCallAddress(JNIGeneratedMethodSupport.java:57)
	at com.kenai.jffi.Foreign.invokeN2O1(Foreign.java)
	at com.kenai.jffi.Invoker.invokeN2(Invoker.java:1038)
	at com.datastax.oss.driver.internal.core.os.Native$LibCLoader$LibC$jnr$ffi$2.gettimeofday(Unknown Source)
	at com.datastax.oss.driver.internal.core.os.Native.currentTimeMicros(Native.java:57)
	at com.datastax.oss.driver.internal.core.time.NativeClock.fetchTimeMicros(NativeClock.java:74)
	at com.datastax.oss.driver.internal.core.time.NativeClock.<init>(NativeClock.java:57)
	at com.datastax.oss.driver.internal.core.time.Clock.getInstance(Clock.java:41)
	at com.datastax.oss.driver.internal.core.time.MonotonicTimestampGenerator.buildClock(MonotonicTimestampGenerator.java:109)
	at com.datastax.oss.driver.internal.core.time.MonotonicTimestampGenerator.<init>(MonotonicTimestampGenerator.java:43)
	at com.datastax.oss.driver.internal.core.time.AtomicTimestampGenerator.<init>(AtomicTimestampGenerator.java:52)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:490)
	at com.datastax.oss.driver.internal.core.util.Reflection.buildFromConfig(Reflection.java:229)
	... 16 more
```

I'm running:
```
openjdk version "11.0.6" 2020-01-14
OpenJDK Runtime Environment GraalVM CE 19.3.1 (build 11.0.6+9-jvmci-19.3-b07)
OpenJDK 64-Bit Server VM GraalVM CE 19.3.1 (build 11.0.6+9-jvmci-19.3-b07, mixed mode, sharing)
```

Given that JNI is in the stacktrace:
> 	at com.oracle.svm.jni.access.JNINativeLinkage.getOrFindEntryPoint(JNINativeLinkage.java:145)
 

and because I was hitting some other issues with reflection, I did run the dynamic analysis agent using `-agentlib:native-image-agent=config-output-dir=` and pointed to the files in my image build:

    -H:ReflectionConfigurationFiles=../../reflection-config/reflect-config.json
    -H:+JNI
    -H:JNIConfigurationFiles=../../reflection-config/jni-config.json -


But I'm still hitting the error, any ideas would be appreciated!
Recently with Quarkus I was tasked to debug a problem that manifested itself like this:

```
Fatal error: com.oracle.graal.pointsto.util.AnalysisError$ParsingError: Error encountered while parsing com.oracle.svm.reflect.ClassLoader_defineClass_c6c343b4d6dc22ca64eb2d8503b13ac9c340dcb3.invoke(java.lang.Object, java.lang.Object[]) 
Parsing context:
	parsing java.lang.reflect.Method.invoke(Method.java:498)
	parsing javax.enterprise.util.AnnotationLiteral.invoke(AnnotationLiteral.java:288)
	parsing javax.enterprise.util.AnnotationLiteral.getMemberValue(AnnotationLiteral.java:276)
	parsing javax.enterprise.util.AnnotationLiteral.hashCode(AnnotationLiteral.java:246)
	parsing java.util.concurrent.CopyOnWriteArrayList.hashCode(CopyOnWriteArrayList.java:1062)
	parsing org.graalvm.collections.EconomicMapImpl.getHashIndex(EconomicMapImpl.java:414)
	parsing org.graalvm.collections.EconomicMapImpl.putHashEntry(EconomicMapImpl.java:577)
	parsing org.graalvm.collections.EconomicMapImpl.put(EconomicMapImpl.java:451)
	parsing org.graalvm.collections.EconomicMap.putAll(EconomicMap.java:84)
	parsing org.graalvm.collections.EconomicMapImpl.<init>(EconomicMapImpl.java:183)
	parsing org.graalvm.collections.EconomicMapImpl.create(EconomicMapImpl.java:158)
	parsing org.graalvm.collections.EconomicMap.create(EconomicMap.java:171)
	parsing org.graalvm.compiler.options.ModifiableOptionValues.update(ModifiableOptionValues.java:93)
	parsing com.oracle.svm.core.option.RuntimeOptionParser.parse(RuntimeOptionParser.java:164)
	parsing com.oracle.svm.core.option.RuntimeOptionParser.parseAndConsumeAllOptions(RuntimeOptionParser.java:76)
	parsing com.oracle.svm.jni.functions.JNIInvocationInterface$Exports.JNI_CreateJavaVM(JNIInvocationInterface.java:151)
	parsing com.oracle.svm.core.code.IsolateEnterStub.JNIInvocationInterface$Exports_JNI_CreateJavaVM_8df18e9ea6eb1ed7b1c899a0bbc578da0e2cc0ad(generated:0)

	at com.oracle.graal.pointsto.util.AnalysisError.parsingError(AnalysisError.java:138)
	at com.oracle.graal.pointsto.flow.MethodTypeFlow.doParse(MethodTypeFlow.java:327)
	at com.oracle.graal.pointsto.flow.MethodTypeFlow.ensureParsed(MethodTypeFlow.java:300)
	at com.oracle.graal.pointsto.flow.MethodTypeFlow.addContext(MethodTypeFlow.java:107)
	at com.oracle.graal.pointsto.DefaultAnalysisPolicy$DefaultVirtualInvokeTypeFlow.onObservedUpdate(DefaultAnalysisPolicy.java:191)
	at com.oracle.graal.pointsto.flow.TypeFlow.notifyObservers(TypeFlow.java:343)
	at com.oracle.graal.pointsto.flow.TypeFlow.update(TypeFlow.java:385)
	at com.oracle.graal.pointsto.BigBang$2.run(BigBang.java:511)
	at com.oracle.graal.pointsto.util.CompletionExecutor.lambda$execute$0(CompletionExecutor.java:171)
	at java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1402)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
Caused by: com.oracle.svm.hosted.substitute.DeletedElementException: Unsupported method java.lang.ClassLoader.defineClass(String, byte[], int, int) is reachable: The declaring class of this element has been substituted, but this element is not present in the substitution class
To diagnose the issue, you can add the option --report-unsupported-elements-at-runtime. The unsupported element is then reported at run time when it is accessed the first time.
	at com.oracle.svm.hosted.substitute.AnnotationSubstitutionProcessor.lookup(AnnotationSubstitutionProcessor.java:183)
	at com.oracle.graal.pointsto.infrastructure.SubstitutionProcessor$ChainedSubstitutionProcessor.lookup(SubstitutionProcessor.java:128)
	at com.oracle.graal.pointsto.infrastructure.SubstitutionProcessor$ChainedSubstitutionProcessor.lookup(SubstitutionProcessor.java:128)
	at com.oracle.graal.pointsto.meta.AnalysisUniverse.lookupAllowUnresolved(AnalysisUniverse.java:397)
	at com.oracle.graal.pointsto.meta.AnalysisUniverse.lookup(AnalysisUniverse.java:377)
	at com.oracle.graal.pointsto.meta.AnalysisUniverse.lookup(AnalysisUniverse.java:75)
	at com.oracle.graal.pointsto.infrastructure.UniverseMetaAccess.lookupJavaMethod(UniverseMetaAccess.java:93)
	at com.oracle.graal.pointsto.meta.AnalysisMetaAccess.lookupJavaMethod(AnalysisMetaAccess.java:66)
	at com.oracle.graal.pointsto.meta.AnalysisMetaAccess.lookupJavaMethod(AnalysisMetaAccess.java:39)
	at com.oracle.svm.reflect.hosted.ReflectionSubstitutionType$ReflectiveInvokeMethod.buildGraph(ReflectionSubstitutionType.java:511)
	at com.oracle.graal.pointsto.meta.AnalysisMethod.buildGraph(AnalysisMethod.java:319)
	at com.oracle.graal.pointsto.flow.MethodTypeFlowBuilder.parse(MethodTypeFlowBuilder.java:185)
	at com.oracle.graal.pointsto.flow.MethodTypeFlowBuilder.apply(MethodTypeFlowBuilder.java:340)
	at com.oracle.graal.pointsto.flow.MethodTypeFlow.doParse(MethodTypeFlow.java:310)
	... 12 more
```

Immediately the team was confused, because it is not clear that the generated class `com.oracle.svm.reflect.ClassLoader_defineClass_c6c343b4d6dc22ca64eb2d8503b13ac9c340dcb3` is a generated implementation of a `Method` invoker.  So realizing that is step one.

The next problem was that it's nearly impossible to know what was acquiring the `Method` object corresponding to the method in question.  The call tree gives no clues because it only shows calls to e.g. `Class.getDeclaredMethod(s)` which of course happen all over the place.  An exhaustive search of each call site is not practical.

The solution therefore was to attach a debugger to the `native-image` process, with breakpoints set at every point in the JDK which can produce a `Method` object.  The breakpoint was configured to trigger only on the class and (where possible) method in question.  Then the call stack was inspected at each "hit" to acquire the list of possibilities, excluding the few calls from the SVM classes themselves.  The "interesting" results were found by examining local variables in `com.oracle.svm.hosted.snippets.ReflectionPlugins#processGetMethod`, which is also very non-obvious.

Finally, substitutions are tried for each site, with rebuilds to see if the problem was solved.

This is definitely not optimal.  The call didn't appear on the call graph, and there's no heap analysis available either.  It would be nice if there were some better way to debug situations like these.
I tried to build the bundle jar built in the project [jersey-http2-jetty-connector](https://github.com/nhenneaux/jersey-http2-jetty-connector/tree/master/jersey-http2-jetty-bundle) using `mvn clean verify  -DskipTests -DskipDepCheck` command.
## First I tried without any option.
`native-image -jar jersey-http2-jetty-connector/jersey-http2-jetty-bundle/target/jersey-http2-jetty-bundle-*-bundle.jar`
It failed and I got the following error.
```
Caused by: com.oracle.svm.hosted.substitute.DeletedElementException: Unsupported method java.lang.ClassLoader.defineClass(String, byte[], int, int, ProtectionDomain) is reachable: The declaring class of this element has been substituted, but this element is not present in the substitution class
To diagnose the issue, you can add the option --report-unsupported-elements-at-runtime. The unsupported element is then reported at run time when it is accessed the first time.
```
## So I tried with `--report-unsupported-elements-at-runtime`
I got the following warnings.
`Warning: Image 'jersey-http2-jetty-bundle-1.0.0-bundle' is a fallback image that requires a JDK for execution (use --no-fallback to suppress fallback image generation).`
`Error: com.oracle.graal.pointsto.constraints.UnresolvedElementException: Discovered unresolved method during parsing: org.slf4j.impl.StaticMarkerBinder.getSingleton(). To diagnose the issue you can use the --allow-incomplete-classpath option. The missing method is then reported at run time when it is accessed the first time.
`
## Then with `--allow-incomplete-classpath`
The build succeed, however when I try to run the native bundle it fails with the following error.
```
$ ./jersey-http2-jetty-bundle-1.0.0-bundle
Exception in thread "main" java.lang.AssertionError: Spi class not found
	at java.security.Security.getSpiClass(Security.java:684)
	at java.security.Security.getImpl(Security.java:700)
	at java.security.KeyStore.getInstance(KeyStore.java:875)
	at com.github.nhenneaux.jersey.http2.jetty.bundle.JettyServer$TlsSecurityConfiguration.getKeyStore(JettyServer.java:150)
	at com.github.nhenneaux.jersey.http2.jetty.bundle.Bootstrap.main(Bootstrap.java:11)
Caused by: java.lang.ClassNotFoundException: java.security.KeyStoreSpi
	at com.oracle.svm.core.hub.ClassForNameSupport.forName(ClassForNameSupport.java:60)
	at java.lang.Class.forName(DynamicHub.java:1184)
	at java.security.Security.getSpiClass(Security.java:680)
	... 4 more
```

Do you have any idea why I got the error `java.lang.ClassNotFoundException: java.security.KeyStoreSpi`?

Thanks for your help 
The `mx gate` under Windows needs some (a lot?) of work.  It looks like it is flagging the line-endings for every single line in the source which makes it difficult to determine what else might be going on.

If anyone would like to help me interpret some of this Travis CI build log, and point me in some directions, then I'd be happy to piddle away at it.

Thank you.

**BUILD LOG:** 
[log[1].txt](https://github.com/oracle/graal/files/4071494/log.1.txt)

https://travis-ci.com/veganaize/graal/builds/144674485
The ICC_Profile under sun.java2d.cmm.profiles like sRGB.pf are not loaded at compile time. 

setting:
-H:IncludeResources=.*\.pf$ \
-H:IncludeResources=.*/*.pf$ \

has no effect, and -H:Log=registerResource: shows they are not loaded.
I've set the following in my maven script:
                        <arg>--add-opens</arg>
                        <arg>java.desktop/sun.java2d.cmm.profiles=${artifactId}</arg>
                        <arg>--add-opens</arg>
                        <arg>java.desktop/sun.java2d.cmm.profiles=ALL-UNNAMED</arg>

and tested with the following code:

`2020-01-16 12:16:35.521 BUGFIX[46285:1084366] Starting Gluon VM...
BugTester: TEST getResource BEGIN
BugTester: TEST Profile.class.getResource("sRGB.pf") returns url = null
BugTester: TEST Profile.class.getResource("profiles/sRGB.pf") returns url = null
BugTester: TEST BugTester.class.getResource("sRGB.pf") returns url = null
BugTester: TEST BugTester.class.getResource("profiles/sRGB.pf") returns url = null
BugTester: TEST Profile.class.getResourceAsStream("sRGB.pf") returns s = null
BugTester: TEST Profile.class.getResourceAsStream("profiles/sRGB.pf") returns s = null
BugTester: TEST BugTester.class.getResourceAsStream("sRGB.pf") returns s = null
BugTester: TEST BugTester.class.getResourceAsStream("profiles/sRGB.pf") returns s = null
BugTester: TEST BugTester.class.getResource("sun/java2d/cmm/profiles/sRGB.pf") returns url = null
BugTester: TEST BugTester.class.getResourceAsStream("sun/java2d/cmm/profiles/sRGB.pf") returns s = null
BugTester: TEST ClassLoader.getPlatformClassLoader().getResource("sun/java2d/cmm/profiles/sRGB.pf") returns url = null
BugTester: TEST ClassLoader.getPlatformClassLoader().getResource("sRGB.pf") returns url = null
BugTester: TEST ClassLoader.getSystemClassLoader().getResource("sun/java2d/cmm/profiles/sRGB.pf") returns url = null
BugTester: TEST ClassLoader.getSystemClassLoader().getResource("sRGB.pf") returns url = null
BugTester: TEST ClassLoader.getSystemResource("sun/java2d/cmm/profiles/sRGB.pf") returns url = null
BugTester: TEST ClassLoader.getSystemResource("sRGB.pf") returns url = null
BugTester: TEST ClassLoader.getSystemResourceAsStream("sRGB.pf") returns s = null
BugTester: TEST ClassLoader.getSystemResourceAsStream("sun/java2d/cmm/profiles/sRGB.pf") returns s = null
BugTester: TEST getResource END
2020-01-16 12:16:35.523 BUGFIX[46285:1084366] Started Gluon VM...`

The only workarround I could find, is to include the profiles under sun.java2d.cmm.profiles into my project directly.
ATM, our GraalVM Windows release is special. There is no `gu` tool and `native-image` is not provided as proper add-on. Instead native-image is somewhat part of the default but unfortunately only deployed as cmd-script that calls the driver as java application instead of having a real `native-image.exe`.
I try to create an extention for cxf on quarkus project and I have an issue with substitution with this keyword.
I found no doc about such a case and it seems odd that "this" is treated as a field because I cannot substitute it.

dispatch function have the following signature
`public HttpServerExchange dispatch(HttpHandler handler)`

class UndertowHTTPHandler implements HttpHandler and I want to use this keyword in substitution.
but I get:


```
com.oracle.svm.core.util.UserError$UserException: One of @Delete, @Alias, or @Inject must be used: final io.quarkus.cxf.runtime.graal.Substitutions io.quarkus.cxf.runtime.graal.Substitutions$Substitute_UndertowHTTPDestination.this$0
	at com.oracle.svm.core.util.UserError.abort(UserError.java:65)
	at com.oracle.svm.core.util.UserError.guarantee(UserError.java:86)
	at com.oracle.svm.hosted.substitute.AnnotationSubstitutionProcessor.handleFieldInAliasClass(AnnotationSubstitutionProcessor.java:356)
	at com.oracle.svm.hosted.substitute.AnnotationSubstitutionProcessor.handleAliasClass(AnnotationSubstitutionProcessor.java:304)
	at com.oracle.svm.hosted.substitute.AnnotationSubstitutionProcessor.handleClass(AnnotationSubstitutionProcessor.java:274)
	at com.oracle.svm.hosted.substitute.AnnotationSubstitutionProcessor.init(AnnotationSubstitutionProcessor.java:230)
```


In order that this respect the interface, I have add implements HttpHandler. So this can be used.

Here is the substitution I use:

```
@TargetClass(className = "org.apache.cxf.transport.http_undertow.UndertowHTTPHandler")
    public final class Substitute_UndertowHTTPHandler implements HttpHandler {
        @Substitute
        public void handleRequest(HttpServerExchange undertowExchange) throws Exception {
            try {
                // perform blocking operation on exchange
                if (undertowExchange.isInIoThread()) {
                    undertowExchange.dispatch(this);
                    return;
                }
            }
        }
    }
}
```

Original Executable.parseParameterAnnotations can access not supported
method java.lang.Class.getConstantPool. And Executable.parseParameterAnnotations could be reached by reflection calls. 

This patch can fix issue https://github.com/oracle/graal/issues/2062 
