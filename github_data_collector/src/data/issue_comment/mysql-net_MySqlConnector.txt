At https://stackoverflow.com/questions/59755394/add-record-to-mysql-always-raises-input-string-was-not-in-a-correct-format-er a user posts this exception from having a malformed connection string:

```
System.FormatException
           at System.Number.StringToNumber(ReadOnlySpan`1 str, NumberStyles options, NumberBuffer&amp; number, NumberFormatInfo info, Boolean parseDecimal)
           at System.Number.ParseUInt32(ReadOnlySpan`1 value, NumberStyles options, NumberFormatInfo numfmt)
           at System.String.System.IConvertible.ToUInt32(IFormatProvider provider)
           at System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)
           at MySql.Data.MySqlClient.MySqlConnectionStringValueOption`1.ChangeType(Object objectValue) in C:\projects\mysqlconnector\src\MySqlConnector\MySql.Data.MySqlClient\MySqlConnectionStringBuilder.cs:line 703
           at MySql.Data.MySqlClient.MySqlConnectionStringValueOption`1.GetValue(MySqlConnectionStringBuilder builder) in C:\projects\mysqlconnector\src\MySqlConnector\MySql.Data.MySqlClient\MySqlConnectionStringBuilder.cs:line 674
           at MySqlConnector.Core.ConnectionSettings..ctor(MySqlConnectionStringBuilder csb) in C:\projects\mysqlconnector\src\MySqlConnector\Core\ConnectionSettings.cs:line 39
           at MySqlConnector.Core.ConnectionPool.GetPool(String connectionString) in C:\projects\mysqlconnector\src\MySqlConnector\Core\ConnectionPool.cs:line 405
           at MySql.Data.MySqlClient.MySqlConnection.OpenAsync(Nullable`1 ioBehavior, CancellationToken cancellationToken) in C:\projects\mysqlconnector\src\MySqlConnector\MySql.Data.MySqlClient\MySqlConnection.cs:line 292
           at MySql.Data.MySqlClient.MySqlConnection.Open() in C:\projects\mysqlconnector\src\MySqlConnector\MySql.Data.MySqlClient\MySqlConnection.cs:line 280
           at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenDbConnection(Boolean errorsExpected)
           at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open(Boolean errorsExpected)
           at Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlRelationalConnection.Open(Boolean errorsExpected)
           at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction(IsolationLevel isolationLevel)
           at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction()
           at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(IEnumerable`1 commandBatches, IRelationalConnection connection)
           at Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(IList`1 entries)
           at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(IList`1 entriesToSave)
           at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(DbContext _, Boolean acceptAllChangesOnSuccess)
           at Pomelo.EntityFrameworkCore.MySql.Storage.Internal.MySqlExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
           at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChanges(Boolean acceptAllChangesOnSuccess)
           at Microsoft.EntityFrameworkCore.DbContext.SaveChanges(Boolean acceptAllChangesOnSuccess)
           at Microsoft.EntityFrameworkCore.DbContext.SaveChanges()
```

This is not an easy exception message or call stack to understand. It would be better to have a message such as "{x} is not a valid value for the {y} connection string option".
[Connector/NET 8.0.19 introduces](https://dev.mysql.com/doc/relnotes/connector-net/en/news-8-0-19.html) a new format for the `Server` connection string option:

```
// Example with priority
server=(address=192.10.1.52:3305,priority=60),(address=localhost:3306,priority=100);

// Example without priority and with multiple ports
host=10.10.10.10:3306,192.101.10.2:3305,localhost:3306;uid=test;password=xxxx;
```

Specifying multiple hosts with the same priority is equivalent to `LoadBalance.Random`; specifying different priorities is equivalent to `LoadBalance.FailOver` (in descending order of priority).

This is a superset of MySqlConnector's current multiple-server option, because a) a port can be specified for each server; b) a mix of `Failover` and `Random` behaviour can be obtained by specifying different or the same priority values.

It appears that `address` and `priority` must appear in exactly that order, and that `priority` must be specified for all or no hosts.
Connector/NET 8.0.19 adds [`tlsversion`](https://dev.mysql.com/doc/connector-net/en/connector-net-8-0-connection-options.html). It's a comma-delimited list of TLS protocol versions to support, defaulting to `Tlsv1,Tlsv1.1,Tlsv1.2,Tlsv1.3`.
Hi there,

I am facing with invalid operation exception when I use the same connection in multiple async methods. The error message is `Cannot set MySqlCommand.CommandText when there is an open DataReader for this command; it must be closed first.`.

The simplified version off my code is as follows.

```csharp
class Name
{
    public async Task MainMethod()
    {
        using var connection = new MySqlConnection(ConnectionString);
        await connection.OpenAsync();
        using var transaction = connection.BeginTransaction(ReadUncommitted)

        if(await IsValid(connection, transaction))
        {
            // Some logic
            await Save(connection, transaction);
        }

        transaction.Commit();
        connection.Close()
    }

    private async Task<bool> IsValue(MySqlConnection connection)
    {
        var command = connection.CreateCommand();
        command.CommandText = "Select Count(*) From Table Where Condition";

        var count = (int) await command.ExecuteScalarAsync();

        return count == 0;
    }

    private async Task Save(MySqlConnection connection)
    {
        var command = connection.CreateCommand();
        // Error happens in the following line
        command.CommandText = "Update Table ....";

        await command.ExecuteNonQueryAsync();
    }
}
```

Due to this [issue](https://github.com/mysql-net/MySqlConnector/issues/554) I learned that I may not use a connection in multiple threads or use it in parallel tasks. But my code is not multi-threading although I use async-await.
  Hi,

    I'm using this library along with the NLog connector to log database info. (.Net Core 3.1).  Everything is working great, but you don't seem to be logging the full un-tokenized string.  ie:  If i have a query:
select companyName from company where companyId = @companyId

   when i execute the query (with MySqlConnector log settings set to Debug), all i get is this line in the log:

`2019-12-27 14:58:18,525 [DEBUG] [4] MySqlConnector.Logging.LoggerExtensions.Debug - Session1.5 Preparing command payload; CommandText: select companyName from company where companyId = @CompanyId`

That's not really helpful when the query is not returning something it shouldn't be.  It would be great if you could log the full statement after the tokens are replaced like:

`2019-12-27 14:58:18,525 [DEBUG] [4] MySqlConnector.Logging.LoggerExtensions.Debug - Session1.5 Preparing command payload; CommandText: select companyName from company where companyId = 12345`

   Is there a way to get this to log and i'm just missing it?  If not, can you add this feature at some point in the future?  And is there a way for me to pull the full query string from the MySqlCommand object so i can log it myself?

Thanks,
Joe

> When the `IDbCommand.CommandType` property is set to `TableDirect`, the `IDbCommand.CommandText` property should be set to the name of the table to be accessed. The user may be required to use escape character syntax or include qualifying characters if any of the tables named contain any special characters.

The `SqlClient` packages don't appear to support this enumeration value; others just implement it as `$"SELECT * FROM {CommandText}"`, which seems simple enough.
From https://github.com/npgsql/npgsql/issues/1580

`EnlistTransaction(null)` should throw `InvalidOperationException` if the current transaction is still active, but should unenlist the connection from the transaction if the transaction has completed.
A recent integration test suite failed with:

```
SideBySide.CancelTests.CancelBatchBeforeRead [SKIP]
  ! SideBySide.CancelTests.CancelBatchBeforeRead [1ms]
The active test run was aborted. Reason: Test host process crashed : Unhandled exception. System.InvalidOperationException: This MySqlConnection is already in use. See https://fl.vu/mysql-conn-reuse
   at MySqlConnector.Core.ServerSession.StartQuerying(ICancellableCommand command) in /home/vsts/work/1/s/src/MySqlConnector/Core/ServerSession.cs:line 229
   at MySqlConnector.Core.CommandExecutor.ExecuteReaderAsync(IReadOnlyList`1 commands, ICommandPayloadCreator payloadCreator, CommandBehavior behavior, IOBehavior ioBehavior, CancellationToken cancellationToken) in /home/vsts/work/1/s/src/MySqlConnector/Core/CommandExecutor.cs:line 58
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQueryAsync(IOBehavior ioBehavior, CancellationToken cancellationToken) in /home/vsts/work/1/s/src/MySqlConnector/MySql.Data.MySqlClient/MySqlCommand.cs:line 230
   at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery() in /home/vsts/work/1/s/src/MySqlConnector/MySql.Data.MySqlClient/MySqlCommand.cs:line 74
   at MySqlConnector.Core.StandardEnlistedTransaction.OnRollback(Enlistment enlistment) in /home/vsts/work/1/s/src/MySqlConnector/Core/StandardEnlistedTransaction.cs:line 49
   at MySqlConnector.Core.EnlistedTransactionBase.System.Transactions.IEnlistmentNotification.Rollback(Enlistment enlistment) in /home/vsts/work/1/s/src/MySqlConnector/Core/EnlistedTransactionBase.cs:line 40
   at System.Transactions.VolatileEnlistmentAborting.EnterState(InternalEnlistment enlistment)
   at System.Transactions.VolatileEnlistmentActive.InternalAborted(InternalEnlistment enlistment)
   at System.Transactions.TransactionStateAborted.EnterState(InternalTransaction tx)
   at System.Transactions.TransactionStateActive.Rollback(InternalTransaction tx, Exception e)
   at System.Transactions.EnlistableStates.Timeout(InternalTransaction tx)
   at System.Transactions.Bucket.TimeoutTransactions()
   at System.Transactions.BucketSet.TimeoutTransactions()
   at System.Transactions.TransactionTable.ThreadTimer(Object state)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)
```

At first glance, it appears that an active connection is being used to issue a `ROLLBACK` command. This will fail if the connection is already being used to execute a query.

To make it work, we would need to cancel the command (i.e., issue `KILL QUERY x` on a separate connection), wait for the first connection to become idle, then execute the ROLLBACK. This could be done either by blocking, or perhaps by setting a "pending rollback" flag on the connection (that is executed when any existing command finishes running).
Split from #397 and https://github.com/mysql-net/MySqlConnector/issues/397#issuecomment-407291572.

`MySqlCommand.Prepare()` should support `CommandType.StoredProcedure`; it currently fails.

Note that prepared stored procedures can natively return output parameters (without executing a separate `SELECT` statement); this will need to be supported. See https://github.com/mysql-net/MySqlConnector/issues/231#issuecomment-560527633 and example code here: https://dev.mysql.com/doc/refman/5.7/en/c-api-prepared-call-statements.html
If the MySqlConnection.Open method is called when the LAN cable is disconnected, it will stop for a long time.

[OS] Windows10
[DLL] MySqlConnector 0.61.0
[Framework] .NET Core 2.1

[TestCode]
```
using System;
using System.Diagnostics;
using MySql.Data.MySqlClient;

namespace MySqlConnectorTest
{
    class Program
    {
        static void Main(string[] args)
        {
            var timeFormat = "yyyy/MM/dd HH:mm:ss.fff";
            var builder = new MySqlConnectionStringBuilder();
            builder.Server = "testserver";
            builder.Database = "mydb";
            builder.Port = 3306;
            builder.UserID = "user";
            builder.Password = "password";
            builder.ConnectionTimeout= 5;
            builder.DefaultCommandTimeout = 5;
            var conStr = builder.ToString();
            Debug.WriteLine("conStr:" + conStr);

            while (true)
            {
                try
                {
                    using (var con = new MySqlConnection(conStr))
                    {
                        Debug.WriteLine("Open Start:" + DateTime.Now.ToString(timeFormat));
                        con.Open();
                        Debug.WriteLine("Open End:" + DateTime.Now.ToString(timeFormat));
                        using (var cmd = con.CreateCommand())
                        {
                            cmd.CommandText = "select now(3)";
                            cmd.ExecuteScalar();
                        }
                        con.Close();
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("Catch Exception:" + DateTime.Now.ToString(timeFormat));
                    Debug.WriteLine(ex.ToString());
                }
                System.Threading.Thread.Sleep(1000);
            }
        }
    }
}
```

[Result]
[result.txt](https://github.com/mysql-net/MySqlConnector/files/3868919/result.txt)
