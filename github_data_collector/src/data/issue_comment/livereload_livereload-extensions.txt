<img width="421" alt="c6dsxixxmy" src="https://user-images.githubusercontent.com/769083/45660063-2eb90080-bac5-11e8-84c7-fa1046ab4332.png">


When I go on [the firefox page of the plugin](https://addons.mozilla.org/fr/firefox/addon/livereload/) it says than the addon is not compatible with Quantum.

How is it possible to make it working with Quantum?
As reported in #47, Firefox 57 no longer supports the old extension format (i.e. `.xul` and friends). As a result, we need to move to web extensions which are 1:1 with Chrome extensions. In this PR:

- Copy/pasted/tweaked Chrome extension into Firefox web extension
- Updated compile/deploy script
- Fixes #47 

**Notes:**

This was relatively straightforward; mostly replacing `chrome` with `browser` makes it work. One sticking point was the deprecated `tabs.onSelectionChanged` API but that was easily resolved with its counterpart `tabs.onActivated`:

https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/tabs/onSelectionChanged

**Relevant links:**

- https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Porting_a_Google_Chrome_extension
- https://developer.mozilla.org/en-US/Add-ons/WebExtensions#Firefox_workflow
Can this extension be developed for / [ported to](https://docs.microsoft.com/en-us/microsoft-edge/extensions/guides/porting-chrome-extensions) Microsoft Edge, to complete support for all major web browsers?
Firefox 57 will be released shortly. Firefox 57 will only work with WebExtensions extensions. 
So, please release the WebExtensions version of LiveReload.
The feedback site[1] mentions that 'Browser extensions always use port 35729' and, I am assuming, always on localhost.

It would be *nice* if the extension (Chrome, Firefox, .., any one at least?) had host:port configurable, with a user interface.

I am sure there are many cases when this is useful. Let me include one such example because I can:
Sometimes with VM based development setup such as VVV for WordPress[2] it is natural to run the guard-livereload server inside the VM. Perhaps VVV[2] would add an option to automatically set up and start guard-livereload inside the VM once this issue is resolved.

[1] http://feedback.livereload.com/knowledgebase/articles/195869-how-to-change-the-port-number-livereload-listens-o
[2] https://github.com/varying-vagrant-vagrants/vvv/
This project is dead?

[livereload.com](http://livereload.com/) says

> The browser extensions and livereload.js are under MIT. If you find a nice generic class or a piece of code you'd like to reuse, I will probably be happy to release it under MIT.

but I cannot find license specified anywhere in the source code.

So, questions are:
- Is it said anywhere in the repo that source is under the MIT?
- If not, shouldn't it be specified in source?

Thanks.

Making the livereload.js resource URL protocol-relative. This adds support for running livereload on https.
