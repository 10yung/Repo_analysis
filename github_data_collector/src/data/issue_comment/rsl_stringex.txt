<img width="702" alt="screenshot 2018-11-28 22 53 23" src="https://user-images.githubusercontent.com/154463/49204335-6dd6be00-f360-11e8-9586-7638d1462688.png">

will able to update/reinitialize the `url` database column with existing data.
Current scope implementation fails if one or more of the scope attribute values is nil.

One may want to use nullable values as scope parameters when using stringex/acts_as_url in combination with a 'soft-delete' solution such as https://github.com/JackDanger/permanent_records

In this case, 'live' records will have a nil value for the deleted_at column, but deleted records will have a specific value. By including the deleted_at column in the acts_as_url scope, one can ensure that url slugs for live records will be unique, while also avoiding having 'deleted' records polluting the available URL space.

We're using stringex 2.7.1 in a Rails project and noticed that dollar signs come through with the `acts_as_url` plugin and `.to_url` string method if they're multiples or not preceding numbers. 

Two examples, one with $ signs and one with a list of reserved URI characters.

First, variations on the $ sign: 

```ruby
"1$ item".to_url    # => "1$-item"
"$1 item".to_url    # => "1-dollars-item"
"$1$ item".to_url   # => "$1$-item"
"$$1 item".to_url   # => "$$1-item"
"$1 $item".to_url   # => "1-dollars-$item"
"$ 1 item".to_url   # => "dollars-1-item"
"1 $ item".to_url   # => "1-dollars-item"
"1 $$ item".to_url  # => "1-$$-item"
"1 $$$ item".to_url # => "1-$$$-item"
```

Second, with a list of reserved characters taken from the [URI RFC](https://tools.ietf.org/html/rfc3986#page-12):

```ruby 
irb> %w(: / ?  #  [  ]  @ !  $  &  '  (  )  *  +  ,  ;  =).each {|c| puts "a #{c}#{c} b".to_url }
a-b
a-slash-slash-b
a-b
a-number-number-b
a-b
a-b
a-at-at-b
a-b
a-$$-b
a-and-and-b
a-b
a-b
a-b
a-star-star-b
a-plus-plus-b
a-b
a-b
a-equals-equals-b
```

Not sure if it's intentional but it breaks some of our routes that have been constraining the parameter provided by `acts_as_url` with `/[0-9A-Za-z\-\.]+/`, which worked fine up until this point. 

If it's not a bug, can you recommend a better constraint or the set of characters that are allowed through `.to_url`?

Thanks!
As demonstrated in `test_handling_duplicate_urls_with_limits`, where the `:limit` is given as 13, but the resulting string is 15 characters long.

I'm happy to work on a fix to address this.
stringex leaves empty field for url if there is no name value provided. In versions before there was "-:id" value for `url` field, where name value was nil

Is it posible to turn of conversation of symbols to words in url? Like an example by default stringex is converting "."=>"dot", "/"=>"slash" and etc...

Thank you!!

I have a Company model, with fields name and slug:

```
class Company < ActiveRecord::Base
  acts_as_url :name, url_attribute: :slug
end
```

For new records, the gem converts asian characters to phonetic letters fine. Now I'm just trying to do the same for all of the existing records in our database.

For example here's one existing record we want to fix the slug for:

```
[1] pry(main)> Company.last.name
=> "Working 你好"

[2] pry(main)> Company.last.slug
=> "----"
```

After running the `initialize_urls` method, I expect the slug to be updated with the phonetic letters, but they don't change.

Here's the rake task that starts off the process:

```
# Rake task that iterates through all of the Companies in the database
# and regenerates their slug values from their name attribute.
task regenerate_company_slugs: :environment do
  Company.initialize_urls
end
```

Some translations could use inflection, e.g. 1 prosentti (1 percent) vs 100 prosentti**a** (100 percent), but this should at least be better than no translations at all.

**Premise**

We have a scenario where there might be 1000 records in database with the same title. When saving the 1001st one, currently acts_as_urls loads 1000 records to see which number it should append to the end of the url slug. Naturally this causes some issues with memory when there are lots of records.

**Changes made**

This PR changes it so that only the url slugs are loaded into the memory rather than complete objects.

**Few notes:**
- I'm not really familiar with the codebase but all current tests seem to pass
- Issue #176 is somewhat related, but this does not solve the problem mentioned regarding fetching _all_ records.
