# Description
This replaces a mvi'ish implementation of a movie search with a reusable implementation of [MVI](http://hannesdorfmann.com/android/model-view-intent).

# Considerations
First things first, this is the first iteration. There is lot's of room for improvements in our implementation of the pattern and for covering more use cases like screen orientation, one time events like (navigation, dialogs, etc.).

Furthermore, this PR introduces [documentation](https://github.com/novoda/android-demos/blob/0dd91deb2b29216dea51a03d73a774ba711c2163/ModelViewIntentSample/readme.md) around our implementation of MVI and the different [components](https://github.com/novoda/android-demos/blob/0dd91deb2b29216dea51a03d73a774ba711c2163/ModelViewIntentSample/core/src/main/java/com/novoda/movies/mvi/search/MVI.kt).

In the previous implementation, the `SearchResultsViewable` and `SearchInputViewable` did expose callbacks for user actions and methods to render a view state.
The `SearchResultsPresenter` did register for these callbacks and forwarded the user actions to the `SearchResultsModel`. Furthermore, it observed the state from that model, mapped it to a view-state and forwarded this to the above-mentioned views. 
The `SearchResultsModel` was responsible to implement the business rules and to expose a stream of state changes according to them.

We replaced the views with a single `MVIView<SearchAction, SearchState>` which exposes an `Observable<Action>` and renders a `SearchState`.
Furthermore, we moved all the business logic into the `SearchMiddleware<SearchAction, SearchState, SearchChanges>`, which exposes an `Observable<SearchChanges>`.
These `SearchChanges` are then observed by the `SearchReducer`, which maps them to a `SearchState`.
And finally, we introduced the `BaseStore<Action, State, Change>` as a use case agnostic class, which collaborates with the above components to connect the different data streams.

# Data Flow
| High-level Diagram|Sequence Diagram|
|----|----|
|![MainView](https://user-images.githubusercontent.com/1046688/61949720-071baa00-afac-11e9-96e1-4e68c5b0844e.png)| ![Untitled](https://user-images.githubusercontent.com/1046688/61949761-20245b00-afac-11e9-94ab-bf51764b6cca.png) |

# Paired with
@gbasile @zegnus @lgvalle @Michal-Novoda

Add functionality to demonstrate how this architecture would handle network errors (consider retry)
Add functionality to demonstrate how Analytics would work in this sample
This PR adds checkout screens, so that we can add a full end-to-end shopping flow test.
Still work in progress as the app can't run.
There is an issue in `App.kt` where `DaggerAppComponent` isn't being recognised. Possibly just a configuration issue.

