I have a brickfile that reads and plots with raster, but not with terra.
The problem disappears when I write again to disk and reload.
This works, regardless of whether I `writeRaster` from `raster` or `terra`.
I cannot reproduce it with a standard brickfile (`?raster::writeRaster`) and therefore I include a link to the file that gives the problem.

```
# files: https://drive.google.com/open?id=186b5L9NNpRznHu3z9KlQYGCctmuJNbaH
soy=terra::rast("varsbrick.grd")
plot(soy)  # crashes rstudio session

soys=raster::brick("varsbrick.grd")
plot(soys)  # works

terra::writeRaster(soy,filename="test",overwrite=T)
tt=rast("test")  
plot(tt)    # works
```
sessionInfo:

```
> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     LC_MONETARY=nl_NL.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=nl_NL.UTF-8       LC_NAME=C                  LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=nl_NL.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] terra_0.4-1         docstring_1.0.0     rasterVis_0.47      latticeExtra_0.6-29 lattice_0.20-38     maptools_0.9-9      spatstat_1.62-2     rpart_4.1-15       
 [9] nlme_3.1-143        spatstat.data_1.4-0 foreach_1.4.7       data.table_1.12.8   raster_3.0-7        sp_1.3-2           

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3            compiler_3.6.2        RColorBrewer_1.1-2    iterators_1.0.12      tools_3.6.2           goftest_1.2-2         viridisLite_0.3.0    
 [8] mgcv_1.8-31           png_0.1-7             rlang_0.4.2           Matrix_1.2-18         rgdal_1.4-7           parallel_3.6.2        hexbin_1.28.0        
[15] xml2_1.2.2            stringr_1.4.0         roxygen2_7.0.2        spatstat.utils_1.15-0 grid_3.6.2            R6_2.4.1              jpeg_0.1-8.1         
[22] foreign_0.8-74        pacman_0.5.1          polyclip_1.10-0       purrr_0.3.3           magrittr_1.5          deldir_0.1-23         tensor_1.5           
[29] codetools_0.2-16      splines_3.6.2         abind_1.4-5           stringi_1.4.3         zoo_1.8-6     
```

I'd rather like to be able to use general SDS strings, and not just file names. 

I tried out a naive approach, here in rasterFromFile.cpp: 

```
bool SpatRaster::constructFromFile(std::string fname) {


	if (!file_exists(fname)) {
#ifdef useGDAL
	  return constructFromFileGDAL(fname);
#endif // useGDAL
	}
```

And that works fine - and returns a reasonable error if it's not a valid SDS -  but it's not clear to me how the cascade of checks should go. Can it catch the error from GDAL and *then* check if it's not a file? 


Example: 

```R
sds <- vapour::vapour_sds_names(system.file("extdata/gdal/sds.nc", package = "vapour", mustWork = TRUE) )
> rast(sds$subdataset[2])
class       : SpatRaster 
dimensions  : 61, 87, 1  (nrow, ncol, nlyr)
resolution  : 1, 1  (x, y)
extent      : 0.5, 87.5, 0.5, 61.5  (xmin, xmax, ymin, ymax)
coord. ref. :  
data source : NETCDF:"/usr/local/lib/R/site-library/vapour/extdata/gdal/sds.nc":vv2 
names       : sds 
```

Hi there, comparing speeds between the raster and terra packages - and terra is awesome. I have a large raster mask (land cover of value 1, and the rest are NA) and am failing to convert the raster to a vector and dissolve it. 

Here is a reproducible example of the `raster` workflow that works just fine: 

```
library(raster)
r1 <- raster(ncol = 10, nrow = 10)
values(r1) <- round(runif(ncell(r1), 0, 1))
p1 <- rasterToPolygons(r1, fun=function(x){x==1}, dissolve = T, na.rm = T)
```

And using `terra`, when I use `as.polygons()`, the example works, but it does not work when `values = true`, RStudio crashes immediately. Also it doesn't seem that there is no dissolve option in `as.polygons()`, like there was in the raster package above. 

```
library(terra)
r1 <- rast(ncol = 10, nrow = 10)
values(r1) <- round(runif(ncell(r1), 0, 1))
p1 <- as.polygons(r1, values = T)
```

Thanks for your insights 
Hi,
I tried the example in the documentation and got this error:
```
> library(terra)

terra 0.1.6
This is an early version of the "terra" package, for evaluation only

> r <- rast(ncols=36, nrows=18, xmn=0)
> values(r) <- runif(ncell(r)) 
> 
> # 3x3 mean filter
> r <- focal(r, w=matrix(1/9,nrow=3,ncol=3), fun=mean) 
Error in x@ptr$focal(w, fillvalue, na.rm, fun = 3, filename, overwrite) : 
  could not find valid method
Error in .local(x, ...) : focal error
```