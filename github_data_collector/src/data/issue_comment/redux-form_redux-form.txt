Hello. #4020 provided a wrong fix, initialization and reinitialization is broken today. It is easy to fix it by refactoring `connector` and `initIfNeeded`. I've tried to keep the same terminology, so refactoring should be obvious for project developers.

Fixes #4069 and #4020.

**Are you submitting a bug report or a feature request?**
bug report

**What is the current behavior?**
my form has a field array of another field array of 4 fields as Select.
when I'm changing the value of the first select, other selects options should change as well, but for some reason the form not re-render after I'm changing the value of the 2nd select.
(the redux state is changed, I'm watching it in the dev-tools).

**What is the expected behavior?**
after the state changed, the form should be re-render

**What's your environment?**
 v8.2.0
material-ui v4.8.1

it happens after I upgraded material ui from v3.0.1 to v4.8.1

any ideas?

thanks
## environment 
"jest": "24.9.0",
"redux": "4.0.4",
"redux-form": "8.2.6",
"react": "16.9.0",
"react-redux": "7.1.1",
"react-dom": "16.9.0",
nodejs version v10.15.0

## error log
```
<--- Last few GCs --->

[5438:0x102645000]    29948 ms: Mark-sweep 1395.2 (1425.0) -> 1394.7 (1425.5) MB, 1228.4 / 0.0 ms  (average mu = 0.095, current mu = 0.024) allocation failure scavenge might not succeed
[5438:0x102645000]    30917 ms: Mark-sweep 1395.9 (1426.0) -> 1395.3 (1426.0) MB, 953.2 / 0.0 ms  (average mu = 0.062, current mu = 0.017) allocation failure scavenge might not succeed


<--- JS stacktrace --->

==== JS stack trace =========================================

    0: ExitFrame [pc: 0x28b5fdfdbe3d]
    1: StubFrame [pc: 0x28b5fdfdd3c6]
Security context: 0x1e44bcc1e6e1 <JSObject>
    2: printComplexValue(aka printComplexValue) [0x1e4471745081] [/Users/georgexie/workspace/projects/active/facility-ui-app/node_modules/pretty-format/build/index.js:~192] [pc=0x28b5fe2630f9](this=0x1e44395026f1 <undefined>,val=0x1e44f0719df9 <FiberNode map = 0x1e44f88b50b1>,config=0x1e447a03abf9 <Object map = 0x1e44384...

FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory
 1: 0x10003b125 node::Abort() [/Users/georgexie/.nvm/versions/node/v10.15.0/bin/node]
 2: 0x10003b32f node::OnFatalError(char const*, char const*) [/Users/georgexie/.nvm/versions/node/v10.15.0/bin/node]
 3: 0x1001a8e85 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [/Users/georgexie/.nvm/versions/node/v10.15.0/bin/node]
 4: 0x1005742a2 v8::internal::Heap::FatalProcessOutOfMemory(char const*) [/Users/georgexie/.nvm/versions/node/v10.15.0/bin/node]
 5: 0x100576d75 v8::internal::Heap::CheckIneffectiveMarkCompact(unsigned long, double) [/Users/georgexie/.nvm/versions/node/v10.15.0/bin/node]
 6: 0x100572c1f v8::internal::Heap::PerformGarbageCollection(v8::internal::GarbageCollector, v8::GCCallbackFlags) [/Users/georgexie/.nvm/versions/node/v10.15.0/bin/node]
 7: 0x100570df4 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [/Users/georgexie/.nvm/versions/node/v10.15.0/bin/node]
 8: 0x10057d68c v8::internal::Heap::AllocateRawWithLigthRetry(int, v8::internal::AllocationSpace, v8::internal::AllocationAlignment) [/Users/georgexie/.nvm/versions/node/v10.15.0/bin/node]
 9: 0x10057d70f v8::internal::Heap::AllocateRawWithRetryOrFail(int, v8::internal::AllocationSpace, v8::internal::AllocationAlignment) [/Users/georgexie/.nvm/versions/node/v10.15.0/bin/node]
10: 0x10054d054 v8::internal::Factory::NewFillerObject(int, bool, v8::internal::AllocationSpace) [/Users/georgexie/.nvm/versions/node/v10.15.0/bin/node]
11: 0x1007d4f24 v8::internal::Runtime_AllocateInNewSpace(int, v8::internal::Object**, v8::internal::Isolate*) [/Users/georgexie/.nvm/versions/node/v10.15.0/bin/node]
12: 0x28b5fdfdbe3d
13: 0x28b5fdfdd3c6
```

## my code
TestForm.js
```
import React from 'react';
import { reduxForm, Field } from 'redux-form';

const SimpleForm = props => {
  const { handleSubmit, pristine, reset, submitting } = props;
  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>First Name</label>
        <div>
          <Field
            name="firstName"
            component="input"
            type="text"
            placeholder="First Name"
          />
        </div>
      </div>
      <div>
        <label>Last Name</label>
        <div>
          <Field
            name="lastName"
            component="input"
            type="text"
            placeholder="Last Name"
          />
        </div>
      </div>
      <div>
        <label>Email</label>
        <div>
          <Field
            name="email"
            component="input"
            type="email"
            placeholder="Email"
          />
        </div>
      </div>
      <div>
        <label>Sex</label>
        <div>
          <label>
            <Field name="sex" component="input" type="radio" value="male" />{' '}
            Male
          </label>
          <label>
            <Field name="sex" component="input" type="radio" value="female" />{' '}
            Female
          </label>
          <label>
            <Field name="sex" component="input" type="radio" value="other" />{' '}
            Other
          </label>
        </div>
      </div>
      <div>
        <label>Favorite Color</label>
        <div>
          <Field name="favoriteColor" component="select">
            <option />
            <option value="ff0000">Red</option>
            <option value="00ff00">Green</option>
            <option value="0000ff">Blue</option>
          </Field>
        </div>
      </div>
      <div>
        <label htmlFor="employed">Employed</label>
        <div>
          <Field
            name="employed"
            id="employed"
            component="input"
            type="checkbox"
          />
        </div>
      </div>
      <div>
        <label>Notes</label>
        <div>
          <Field name="notes" component="textarea" />
        </div>
      </div>
      <div>
        <button type="submit" disabled={pristine || submitting}>
          Submit
        </button>
        <button type="button" disabled={pristine || submitting} onClick={reset}>
          Clear Values
        </button>
      </div>
    </form>
  );
};

export default reduxForm({
  form: 'simple', // a unique identifier for this form
})(SimpleForm);

// If export this, everything is fine.
// export default function FF() {
//   return <div>test</div>;
// }
```

TestForm.test.js

```
import React from 'react';
import { mount } from 'enzyme';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import TestForm from './TestForm';

it('should render component properly', () => {
  const wrapper = mount(
    <Provider store={createStore(() => ({}))}>
      <TestForm />
    </Provider>,
  );
  expect(wrapper).toMatchSnapshot();
});

```
### Subject of the issue

When mounting, if the first field in a form has a name that is also a valid integer, instead of registering the field, the `registeredField` array itself is expanded to a length corresponding to the name of the field. For instance - if the field's name is string `'123456789'`, the `registeredFields` array is a length of `123456789`. Because this can accidentally create massive arrays, this can lock up tabs and crash applications.

### Your environment

- **OS**: MacOS 10.14.6
- **Packages**: 
```json    
{
    "redux": "^4.0.4",
    "redux-actions": "^2.6.5",
    "redux-form": "^8.2.4",
    "redux-form-input-masks": "^2.0.1",
    "redux-raven-middleware": "^1.2.0",
    "redux-thunk": "^2.3.0"
}
```

- **Env**: 
Node v10.16.3
npm 6.13.1

This issue was only found in FireFox V71. It cannot be reproduced in Chrome.

### Steps to reproduce

Name the first Field in a form a large number.

### Expected behaviour

The form should load.

### Actual behaviour

The tab crashes because of a giant array that is not iterable in a timely manner.

### Other information

I will add an example to this later today after I'm out of work, and will try to reproduce in master. If I can, and this is indeed deemed an issue, I'll see if I can make a pull-request to fix tonight.
### Are you submitting a **bug report** or a **feature request**?
Bug report

### What is the current behavior?
The form was configured with the flag **destroyOnUnmount = false**. After dispatch destroy action, the form is removed from the store, but after unmounting it was recreated in store (empty object)


 
![screenshot 1](https://user-images.githubusercontent.com/16816506/71484111-61e35700-2813-11ea-9d5f-56252496a8ea.png)
![screenshot 2](https://user-images.githubusercontent.com/16816506/71484136-7b849e80-2813-11ea-8797-8e9bb679c1f7.png)


### What is the expected behavior?
The destroyed form must not be recreated in the store

### Sandbox Link
[example](https://codesandbox.io/s/redux-form-destroy-m7no6)

### What's your environment?
<!-- Include Redux Form version, OS/browser affected, Node version, etc. -->
Redux-Form: 8.2.6
React: 16.8.6
Redux: 4.0.4
### Other information


### Are you submitting a **bug report** or a **feature request**?
bug report
<!-- For support request, please use Stack Overflow instead. This issue tracker is reserved for bugs and features. -->



### What is the current behavior?
I have a <FieldArray name="items"> of 2 items, say Item1 and Item2. After I remove Item2, the  Items values changed to only Item1, which is good, **however**, syncErrors are not updated accordingly


### What is the expected behavior?
when `fields.remove` is invoked, syncError should be uploaded as well, along with value

### Sandbox Link
should be easy to reproduce. didn't create a sandbox for that


### What's your environment?
8.2.6



**Issue**

I'm trying to extract my Fields to a external package to use in another project.
But the same Field that works inside the project, caught this error (Uncaught Error: Field must be inside a component decorated with reduxForm()) when I import it from the external package. And I'm sure that it's inside a reduxForm and the imports and package are correct because I had other components working right, I just changed this:

import InputField from './fields/core/InputField';
for this:
import { InputField } from 'mypackage';

I already had problems trying to extract some connected redux components but I solved changing my webpack configs like described here:
https://github.com/facebook/create-react-app/issues/6027

But I don't found anything related to this field problem!

**My environment**
"react": "16.8.6",
"react-redux": "7.0.3",
"redux": "4.0.1",
"redux-form": "8.2.6",
Redux-Form is a brilliant library, but I'm worried that its use will wane and it will eventually not be maintained.  Why is there a "death note" on the GitHub page advising people not to use it?  Couldn't this be replaced with something more positive, which explains how it overcomes the limitations of these other libraries?

### What is the expected behavior?
Not advising potential users to use another library, but rather explaining the benefits of this one.

### Are you submitting a **bug report** or a **feature request**?
**bug report**


### What is the current behavior?
My app throws `Invariant Violation: Maximum update depth exceeded...` when using `FieldArray` with `validate` props in versions `>7.4.0`

### What is the expected behavior?
Be able to use FieldArray with custom validator.

### Sandbox Link
Working example:
https://codesandbox.io/s/redux-form-3640-cp59b
Error:
https://codesandbox.io/s/redux-form-3640-7dy2y

### What's your environment?
```
"react": "16.9.0",
"react-dom": "16.9.0",
"react-redux": "5.1.0",
"redux": "4.0.0",
"redux-form": "8.2.3"
```

This probably doesn't effect many users but we are bundling the UMD build of this library and I noticed that the `dist/redux-form.js` was very large and included the `eval()` sourcemaps. From looking at other popular open source `react` libraries it looks like shipping `eval()` sourcemaps is not common. Thanks!