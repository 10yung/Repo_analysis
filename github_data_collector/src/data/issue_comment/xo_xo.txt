It only generated a sql which has only one column in primary keys. After I Looked at code, it seemed a bug in the func (tl TypeLoader) LoadTableIndexes

Ex:

CREATE TABLE `multi_column_pk` (
  `root_id` bigint(20) NOT NULL,
  `parent_id` bigint(20) NOT NULL,
  `child_id` bigint(20) NOT NULL,
  PRIMARY KEY (`root_id`,`parent_id`,`child_id`),
  KEY `ichild_id` (`child_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4



// Generated from index 'multi_column_pk_child_id_pkey'.
func MultiColumnPKByChildID(ctx context.Context, db XODB, childID int64) (*MultiColumnPK, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`root_id, parent_id, child_id ` +
		`FROM multi_column_pk ` +
		`WHERE child_id = ?`

	// run query
	XOLog(sqlstr, childID)
	rk := RelatedKnode{
		_exists: true,
	}

	err = db.QueryRow(ctx, sqlstr, childID).Scan(&rk.RootID, &rk.ParentID, &rk.ChildID)
	if err != nil {
		return nil, err
	}

	return &rk, nil
}
I have a Custom defined search query -- 

```sql
SELECT
  count(*) as repeated
FROM . . . 
```

However, the `xo` generated Go code turns `count(*)` as string:

```go
// GENERATED BY XO. DO NOT EDIT.

// Custom defined search query MyCount
type MyCount struct {
	Repeated string // repeated
}
```

What I'm missing? What's the workaround/solution? Thx

I have some stored procedures in my schema. Xo detects and generates code for them, but the code appears to use positional variables (v0, v1, ...) rather than the parameter names. Is there an option Iâ€™m missing? Would it be possible to get the names using templates?
I just try `--custom-type-package=abc` and realized that XO DOES NOT recognize `int8` as a known type in Go.
Then field `ColumnX int8` was generated as `ColumnX abc.int8` ðŸ˜¢ 
Please add this to `KnownTypeMap`.
A small change in `MsParseType` function to support Nullable Datetime types.
I have no idea if there was a reason to not include it since the beginning.
This small and simple change allows access to know if a field is a foreign key or not in a custom template.

For example:
`
{{range .Fields}} 
{{if .Col.IsForeignKey}} {{ .Name}} {{end}}
{{end}}
`
https://github.com/xo/xo/issues/203

In addition, if two tables have similar names, `user_type` and `user_types` for example, two structs with the same name will be generated with different fields. So sad!

This PR will fix this.
https://github.com/xo/xo/issues/155

It's necessary to be able to add more custom tag to fields of table struct.
It's not just about sqlx, but also other custom marshal/unmarshal lib as well.

### Example: Custom Tags -- adding multiple custom tags to fields of table struct
Sometime you want to add one (or many) custom tag(s) to fields of table struct (for compatible with other lib, [sqlx](https://github.com/jmoiron/sqlx) for instance),
and this option can help you to do that.
```bash
# usage example
$ xo pgsql://user:pass@host/db -o models --custom-tags db abc
```
Then in `user.xo.go`, you will get:
```go
type User struct {
    ID uint64 `json:"id" db:"id" abc:"id"` // id
    LastName string `json:"last_name" db:"last_name" abc:"last_name"` // last_name
}
// other source code
```
Closes #115
Closes #130
I have a table named "quota", and xo automatically generates a struct called "quotum", which makes me confused because all other singular nouns are kept in original form. So this is a bug, or a feature?