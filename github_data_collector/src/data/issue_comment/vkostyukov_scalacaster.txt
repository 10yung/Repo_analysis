```
  /**
   * Converts this tree into the string representation.
   *
   * Time - O(n)
   * Space - O(log n)
   */
  override def toString: String = 
    if (isEmpty) "."
    else "{" + left + value + right + "}"
```

hi, I learned a lot from your code. thanks.
IN the `Tree` data structure, the `toString` method is not  visual friendly. why not just paint a tree use diagram.
When the pattern is larger than the string, the code returns a -1.

I've also fixed [#36 ](https://github.com/vkostyukov/scalacaster/issues/36#issue-486427969) which was caused when hss was assigned a negative value.
`matchRabinKarp( "\"123456\"", "123456") ` = -1
`matchRabinKarp( "\"aaaaaa\"", "aaaaaa") ` = -1
`matchRabinKarp( "??????\"beebop\"??????????????", "beebop") ` = -1

` (6 until 60 by 6).map( n => matchRabinKarp("\"" + "c"*n + "\"", "c"*n ))` = Vector( -1, -1, ... -1 )

- [x] used a pattern matching structure to verify the elements are not invalid
- [x] indented the first function to make the whole thing more readable

Checking the [isPalindrome](https://github.com/vkostyukov/scalacaster/blob/master/src/primitive/Strings.scala)... The classic algorithms are expressed as an "character-by-character algorithm", and is fine. Is oriented to a [low-level view](https://en.wikipedia.org/wiki/Low-level_programming_language) of algoritms and data-structures.


Another classic manner to view pattern-recognition algoritms in strings, is to express it by [regular expression](https://en.wikipedia.org/wiki/Regular_expression)

* `isPalindrome()` by  "anchored recursive" regular expression  `^((.)(?:(?1)|.?)\2)$`

* `containsPalindrone()` by recursive regular expression, supposing only letters `(\w)(?:(?R)|\w?)\1` 

It is a good view from a first  [abstraction layer](https://en.wikipedia.org/wiki/Abstraction_(software_engineering)) of strings... And **is also classic**.

----

The best layer for an algorithm perhaps is where the simplest and faster algorithm is expressed.  It is also  "classic".  In the `isPalindrome()` an intermediary layer of abstraction, the ideal to express the same algorithm,  is by use the `string.reverse()` method to compare strings.


Strings.longestCommonSubstring gives incorrect results if the first string is shorter than the second one, because it only scans until the length of the first string:

object Strings {
...

  def longestCommonSubstring(a: String, b: String) : String = {
    def loop(m: Map[(Int, Int), Int], bestIndices: List[Int], i: Int, j: Int) : String = {
      **if (i > a.length) {**
        b.substring(bestIndices(1) - m((bestIndices(0),bestIndices(1))), bestIndices(1))
...

Doesn't work:
scala> val lcs = Strings.longestCommonSubstring("the price Is right", "right on!")
lcs: String = ri

Works correctly:
scala> val lcs = Strings.longestCommonSubstring("right on!", "the price is right")
lcs: String = right

