# PR Summary

Enable support for EditorConfig in OmniSharp.

## PR Context

OmniSharp has this support since omnisharp-roslyn v1.33.0:

* https://github.com/OmniSharp/omnisharp-roslyn/blob/master/CHANGELOG.md#1330---2019-07-01
* #7357
* https://github.com/OmniSharp/omnisharp-roslyn/pull/1526

## PR Checklist

- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
    - Use the present tense and imperative mood when describing your changes
- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).
    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.
- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**
    - [x] None
    - **OR**
    - [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)
        - Experimental feature name(s): <!-- Experimental feature name(s) here -->
- **User-facing changes**
    - [x] Not Applicable
    - **OR**
    - [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
        - Issue filed: <!-- Number/link of that issue here -->
- **Testing - New and feature**
    - [x] N/A or can only be tested interactively
    - **OR**
    - [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)
- **Tooling**
    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.
    - **OR**
    - I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:
        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).
        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.
        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).
        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).

# Steps to reproduce

```powershell
PS D:\> New-Item 7n
```

# Expected behavior

(and current behavior in PS 6)

```none
    Directory: D:\

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           1/18/2020  1:24 PM              0 7n
```

# Actual behavior

A file with an unexpected name is created.

```none
    Directory: D:\

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           1/18/2020  1:24 PM              0 7
```

# Environment data

```none
Name                           Value
----                           -----
PSVersion                      7.0.0-rc.2
PSEdition                      Core
GitCommitId                    7.0.0-rc.2
OS                             Microsoft Windows 10.0.18363
Platform                       Win32NT
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0…}
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
WSManStackVersion              3.0
```

----------

When the other numeric types are used as an argument, PS wraps them inside a `[psobject]` if their numeric and string representations differ so that PS can extract the original string if needed later (e.g. if it's bound to a `[string[]]` parameter as with `New-Item` above.) Thus `New-Item 7ul` works as expected, but `New-Item 7n` does not.

I'm sorry but I don't know how/where this happens in the code though....

Mentioning @vexx32 because I believe they created the BigInt type-suffix support (thanks!).
$module:var display variable 'var' in module we can use The ExecutionContext variable to display 'var' variable but modifier $module: is better

**step to reproduce:**
```

$m = new-module {
  $var = 'in module'
} | ipmo -force -PassThru

$var = 'in script'

$sb={
 $var = 'in scriptblock'
 Write-Host $local:var 
 Write-Host $script:var 
 Write-Host $module:var
}

&$sb 

```
**===output===**

```
in scriptblock
in script
in module
```
<!--

For Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:
Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)

This repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.

- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)
- Search the existing issues.
- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).
- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).

-->

Hi, I want to see verbose messages using `Test-DscConfiguration` with `-Verbose` switch.

Thanks.

# Steps to reproduce

```powershell
Test-DscConfiguration -ComputerName $env:COMPUTERNAME -Verbose
```

# Expected behavior

```none
PS > Test-DscConfiguration -ComputerName $env:COMPUTERNAME -Verbose
VERBOSE: Perform opetation 'Invoke CimMethod' with following parameters, ''methodName' = TestConfiguration, 'className' = MSFT_DSCLocalConfigurationManager,'namespaceName' = root/Microsoft/Windows/DesiredStateConfiguration'
VERBOSE: An LCM method call arrived from coputer 'MyComputer' with user sid S-1-5-21-**********-*********...
VERBOSE: [MyComputer]: LCM:  [ Start  Test            ]
VERBOSE: [MyComputer]: LCM:  [ Start  Resource   ] [[File]]FileCopyInstance1]
....
VERBOSE: Operation 'Invoke CimMethod' Complete.
True
VERBOSE: Time taken for configuration job to complete is 0.299 seconds
```

# Actual behavior

```none
PS > Test-DscConfiguration -ComputerName $env:COMPUTERNAME -Verbose
True
```

# Environment data

<!-- provide the output of $PSVersionTable -->

```none
Name                           Value
----                           -----
PSVersion                      7.0.0-rc.2
PSEdition                      Core
GitCommitId                    7.0.0-rc.2
OS                             Microsoft Windows 10.0.18363
Platform                       Win32NT
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0…}
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
WSManStackVersion              3.0
```

<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->

https://github.com/PowerShell/PowerShell/pull/9134 changed the `ClrVersion` parameter property on `New-ModuleManifest` to `CLRVersion`. To prevent portability issues with PowerShell tooling, this PR changes it back.

<!-- Summarize your PR between here and the checklist. -->

## PR Context

See https://github.com/PowerShell/PowerShell/issues/11619.

## PR Checklist

- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
    - Use the present tense and imperative mood when describing your changes
- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).
    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.
- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**
    - [x] None
    - **OR**
    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)
        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->
- **User-facing changes**
    - [x] Not Applicable
    - **OR**
    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
        - [ ] Issue filed: <!-- Number/link of that issue here -->
- **Testing - New and feature**
    - [x] N/A or can only be tested interactively
    - **OR**
    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)
- **Tooling**
    - [ ] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.
    - **OR**
    - [x] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:
        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).
        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.
        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).
        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).

<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->

https://github.com/PowerShell/PowerShell/pull/11312 changed the `SetBreakpoint()` API in a breaking way. This PR restores the original API while continuing to make the new one available.

Tooling will be impacted by not crashing when targeting the `SetBreakpoints` API across PowerShell versions.

**NOTE** #11312 adds default parameters to other APIs (not broken since they were only added in the 7.0 timeframe). For compatibility it would be favourable to turn those into overloads instead.

Services https://github.com/PowerShell/PowerShell/issues/11619.

## PR Checklist

- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
    - Use the present tense and imperative mood when describing your changes
- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).
    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.
- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**
    - [x] None
    - **OR**
    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)
        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->
- **User-facing changes**
    - [x] Not Applicable
    - **OR**
    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
        - [ ] Issue filed: <!-- Number/link of that issue here -->
- **Testing - New and feature**
    - [x] N/A or can only be tested interactively
    - **OR**
    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)
- **Tooling**
    - [ ] I have considered the user experience from a tooling perspective and don't believe tool ing will be impacted.
    - **OR**
    - [x] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:
        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).
        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.
        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).
        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).

<!--

For Windows PowerShell 5.1 issues, suggestions, or feature requests please use the following link instead:
Windows PowerShell [UserVoice](https://windowsserver.uservoice.com/forums/301869-powershell)

This repository is **ONLY** for PowerShell Core 6 and PowerShell 7+ issues.

- Make sure you are able to repro it on the [latest released version](https://github.com/PowerShell/PowerShell/releases)
- Search the existing issues.
- Refer to the [FAQ](https://github.com/PowerShell/PowerShell/blob/master/docs/FAQ.md).
- Refer to the [known issues](https://docs.microsoft.com/powershell/scripting/whats-new/known-issues-ps6?view=powershell-6).

-->
I try to upgrade from RC.1 to RC.2 using snap but is not available.

# Steps to reproduce
In Linux Ubuntu 18.04.
Remove PowerShell
```Linux
sudo snap remove powershell-preview 
sudo snap install powershell-preview --classic

```
Also try:
```
sudo snap refresh powershell-preview --classic
```

# Expected behavior
To open PowerShell 7 RC.2

```none

```

# Actual behavior
Opens PowerShell 7 RC.1
```none

```

# Environment data

<!-- provide the output of $PSVersionTable -->
Linux OS - 18.04

```none

```
![PRC@_2020-01-17_17-01-03](https://user-images.githubusercontent.com/19892435/72650444-8f24b000-394e-11ea-9bf1-c54e1d554d87.png)

Bumps [NJsonSchema](https://github.com/RicoSuter/NJsonSchema) from 10.1.3 to 10.1.4.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/RicoSuter/NJsonSchema/releases">NJsonSchema's releases</a>.</em></p>
<blockquote>
<h2>NJsonSchema v9.12.0 (Build-1852)</h2>
<ul>
<li>Bug fixes</li>
</ul>
<h2>NSwag v9.11.0 (Build 1849)</h2>
<p>Possible <strong>breaking changes</strong>:</p>
<ul>
<li>Inline dictionary or array inheritance (<a href="https://github-redirect.dependabot.com/RicoSuter/NJsonSchema/issues/785">#785</a>)</li>
<li>Improve allOf inheritance support (<a href="https://github-redirect.dependabot.com/RicoSuter/NJsonSchema/issues/783">#783</a>)</li>
</ul>
<h2>NSwag v9.10.75 (Build 1848)</h2>
<p><strong>DO NOT USE THIS RELEASE!</strong></p>
<h2>NSwag v9.10.74 (Build 1847)</h2>
<p>Changes:</p>
<ul>
<li>Improve range attribute handling, closes <a href="https://github-redirect.dependabot.com/RicoSuter/NJsonSchema/issues/775">#775</a></li>
<li>Add exception docs, closes <a href="https://github-redirect.dependabot.com/RicoSuter/NJsonSchema/issues/776">#776</a></li>
<li>Fix XmlDocumentationExtensions deadlock (<a href="https://github-redirect.dependabot.com/RicoSuter/NJsonSchema/issues/780">#780</a>)</li>
<li>Use allOf for all schemas in inheritance (<a href="https://github-redirect.dependabot.com/RicoSuter/NJsonSchema/issues/733">#733</a>)</li>
</ul>
<h2>NSwag v9.10.73 (Build 1846)</h2>
<p>No release notes provided.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href="https://github.com/RicoSuter/NJsonSchema/commits">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=NJsonSchema&package-manager=nuget&previous-version=10.1.3&new-version=10.1.4)](https://dependabot.com/compatibility-score.html?dependency-name=NJsonSchema&package-manager=nuget&previous-version=10.1.3&new-version=10.1.4)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in the `.dependabot/config.yml` file in this repo:
- Update frequency
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
I've run an analysis comparing public APIs available in PowerShell 6.2.3 vs 7.0.0-rc.2 and there are some public APIs that are missing.

While this is in many cases intentional, and likely to not be an issue, some may affect programs and tools trying to link against multiple versions of PowerShell (modules and some hosts). Trying to reference such an API would cause a sudden crash in one of these tools (the hard part being that the point at which the crash occurs may be hard to control).

I'm still refining the analysis, but here is a list of classes and members that have been removed:

## Types

- ~~`System.Management.Automation.PSJobProxy`~~ [Workflow]
- ~~`System.Management.Automation.PSChildJobProxy`~~ [Workflow]
- ~~`System.Management.Automation.JobDataAddedEventArgs`~~ [Workflow]
- `System.Management.Automation.PowerShellStreamType` (arguably workflow, but has generic name and namespace. Removed in https://github.com/PowerShell/PowerShell/pull/10083).
- ~~`System.Management.Automation.WorkflowInfo`~~ [Workflow]
- `System.Management.Automation.Runspaces.PSSessionType` (arguably workflow, but possibly worth restoring with single value depending on how it's used)

## Fields

- ~~`System.Management.Automation.CommandTypes::Workflow`~~ [Workflow]
- ~~`System.Management.Automation.PSEngineEvent::WorkflowJobStartEvent`~~ [Workflow]
- ~~`System.Management.Automation.ModuleType::Workflow`~~ [Workflow]
- ~~`System.Management.Automation.Internal.DebuggerUtils::SetVariableFunction`~~ [Internal]
- ~~`System.Management.Automation.Internal.DebuggerUtils::RemoveVariableFunction`~~ [Internal]
- ~~`System.Management.Automation.Internal.DebuggerUtils::GetPSCallStackOverrideFunction`~~ [Internal]
- ~~`System.Management.Automation.Internal.PSMonitorRunspaceType::WorkflowInlineScript`~~ [Internal/Workflow]

## Methods and constructors (captures events and properties)

- ~~``Microsoft.PowerShell.DesiredStateConfiguration.Internal.DscClassCache::ImportClasses(System.String,System.Tuple`2[System.String,System.Version],System.Collections.ObjectModel.Collection`1[System.Exception])``~~ [Internal]
- ~~``Microsoft.PowerShell.DesiredStateConfiguration.Internal.DscClassCache::GetCachedClasses()``~~ [Internal]
- ``Microsoft.PowerShell.Commands.NewModuleManifestCommand::get_ClrVersion()`` **See https://github.com/PowerShell/PowerShell/pull/11623**
- ``Microsoft.PowerShell.Commands.NewModuleManifestCommand::set_ClrVersion(System.Version)`` **See https://github.com/PowerShell/PowerShell/pull/11623**
- ~~``Microsoft.PowerShell.Commands.RegisterPSSessionConfigurationCommand::get_SessionType()``~~ [Workflow]
- ~~``Microsoft.PowerShell.Commands.RegisterPSSessionConfigurationCommand::set_SessionType(System.Management.Automation.Runspaces.PSSessionType)``~~ [Workflow]
- ``Microsoft.PowerShell.Commands.InternalSymbolicLinkLinkCodeMethods::GetTarget(System.Management.Automation.PSObject)`` (arguably internal, but not internally namespaced. Return type changed in https://github.com/PowerShell/PowerShell/pull/8789)
- ``System.Management.Automation.Debugger::SetBreakpoints(System.Collections.Generic.IEnumerable`1[System.Management.Automation.Breakpoint])`` **See https://github.com/PowerShell/PowerShell/pull/11622**
- ~~``System.Management.Automation.PowerShell::AsJobProxy()``~~ [Workflow]
- ``System.Management.Automation.ScriptBlock::set_IsFilter(System.Boolean)`` **Formerly threw InvalidOperationException. Should assess whether this is considered breaking. Changed in https://github.com/PowerShell/PowerShell/pull/9732**
- ``System.Management.Automation.ScriptBlock::set_IsConfiguration(System.Boolean)`` **Formerly threw InvalidOperationException. Should assess whether this is considered breaking. Changed in https://github.com/PowerShell/PowerShell/pull/9732**
- ~~``System.Management.Automation.PSModuleInfo::get_ExportedWorkflows()``~~ [Workflow]
- ``System.Management.Automation.Tracing.Tracer::EndpointRegistered(System.String,System.String,System.String)`` **Removed in https://github.com/PowerShell/PowerShell/pull/9618**
- ~~``System.Management.Automation.Internal.DebuggerUtils::GetWorkflowDebuggerFunctions()``~~ [Internal/Workflow]

I'll continue this analysis to look into custom attributes
<!-- Anything that looks like this is a comment and can't be seen after the Pull Request is created. -->

# PR Summary

A few test fixes so tests run cleaner on raspbian
<!-- Summarize your PR between here and the checklist. -->

## PR Context

<!-- Provide a little reasoning as to why this Pull Request helps and why you have opened it. -->

## PR Checklist

- [x] [PR has a meaningful title](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
    - Use the present tense and imperative mood when describing your changes
- [x] [Summarized changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] [Make sure all `.h`, `.cpp`, `.cs`, `.ps1` and `.psm1` files have the correct copyright header](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
- [x] This PR is ready to merge and is not [Work in Progress](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---work-in-progress).
    - If the PR is work in progress, please add the prefix `WIP:` or `[ WIP ]` to the beginning of the title (the `WIP` bot will keep its status check at `Pending` while the prefix is present) and remove the prefix when the PR is ready.
- **[Breaking changes](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#making-breaking-changes)**
    - [x] None
    - **OR**
    - [ ] [Experimental feature(s) needed](https://github.com/MicrosoftDocs/PowerShell-Docs/blob/staging/reference/6/Microsoft.PowerShell.Core/About/about_Experimental_Features.md)
        - [ ] Experimental feature name(s): <!-- Experimental feature name(s) here -->
- **User-facing changes**
    - [x] Not Applicable
    - **OR**
    - [ ] [Documentation needed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#pull-request---submission)
        - [ ] Issue filed: <!-- Number/link of that issue here -->
- **Testing - New and feature**
    - [ ] N/A or can only be tested interactively
    - **OR**
    - [ ] [Make sure you've added a new test if existing tests do not effectively test the code changed](https://github.com/PowerShell/PowerShell/blob/master/.github/CONTRIBUTING.md#before-submitting)
- **Tooling**
    - [x] I have considered the user experience from a tooling perspective and don't believe tooling will be impacted.
    - **OR**
    - [ ] I have considered the user experience from a tooling perspective and enumerated concerns in the summary. This may include:
        - Impact on [PowerShell Editor Services](https://github.com/PowerShell/PowerShellEditorServices) which is used in the [PowerShell extension](https://github.com/PowerShell/vscode-powershell) for VSCode (which runs in a different PS Host).
        - Impact on Completions (both in the console and in editors) - one of PowerShell's most powerful features.
        - Impact on [PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer) (which provides linting & formatting in the editor extensions).
        - Impact on [EditorSyntax](https://github.com/PowerShell/EditorSyntax) (which provides syntax highlighting with in VSCode, GitHub, and many other editors).
