1. Issue #35 was caused by JSON Value ToString implementation, as only quoted string is a valid json value.
2. I was load-testing my service at highest rps, and when I got 404 or 500 errors drill panicked. I think 
better behaviour is to fail iteration and count failures. For now I handled this with making default "" value, but I can handle it better later
Currently Assign seems to miss an regexp feature. I need to extract a variable from json embedded into an html document.
Is there something existing?
There are times when it's useful to ignore cookies being sent from the server.
I tried building and using drill on Windows, with `cargo install`, for a particular client where I needed to use their SoE desktop in a quick project.

The colour-printing code didn't work right; I got ANSI escape codes printed literally on the terminal. This was running in VScode, with either powershell or git bash. I got the same in the powershell gui window. I set CLICOLOR=0 and got on with the task, but I wanted to come back and fix the problem so I could leave them with a working setup.

I then cloned the repo, but to my surprise `cargo run` showed the colours correctly. Invoking the same executable from `target/release/drill.exe` printed ANSI codes again!

The windows console doesn't interpret ANSI codes by defaut, and needs a console API call to set it into the appropriate mode. It turns out, `cargo` uses this mode, and leaves it active when invoking the program via `cargo run`.

The below patch fixes, or at least works around the problem.

```diff
diff --git a/src/main.rs b/src/main.rs
index 2164af2..3db592b 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -35,6 +35,8 @@ fn main() {
   let no_check_certificate = matches.is_present("no-check-certificate");
   let quiet = matches.is_present("quiet");
   let nanosec = matches.is_present("nanosec");
+  #[cfg(windows)]
+  let _ = control::set_virtual_terminal(true);
 
   let begin = time::precise_time_s();
   let list_reports_result = benchmark::execute(benchmark_file, report_path_option, no_check_certificate, quiet, nanosec);
```

Note: I'm a very infrequent Windows user, and this was my first time trying Rust on Windows. Unfortunately I didn't have a chance to fully test this change in all combinations while on site, so it might still misbehave in the case of redirected output or some other situation. See the comments at the top of https://github.com/mackwic/colored/blob/master/src/control.rs for more detail; there may be more that needs to be done to properly set up the windows console. That's one reason I've given a code example as a diff rather than a PR. 

Big hat-tip to @retep998 for pointing out the console-mode api, I was well down the wrong rabbit-hole looking at differences in other environment variables between the two invocation methods.
When assigning a JSON response, string variable will be surrounded by double quotes and unusable in request url

e.g. assigning to `test` : `{ "id": "abc" }`, using `test.id` for next request as follow `url: /test/{{ test.id }}` will generate the request `http://example.com/test/"abc"` instead of `http://example.com/test/abc`

reproducible example, benchmark file
```yml
---

threads: 1
base: 'https://jsonplaceholder.typicode.com'
iterations: 1
rampup: 0

plan:
  - name: todos1
    request:
      url: /todos/1
    assign: todo
  - name: example
    request:
      url: http://example.com/{{ todo.title }}
```
result
```bash
Threads 1
Iterations 1
Rampup 0
Base URL https://jsonplaceholder.typicode.com

todos1                    https://jsonplaceholder.typicode.com/todos/1 200 OK 246ms
example                   http://example.com/"delectus aut autem" 404 Not Found 345ms
```

(this example doesn't really make sense as title has spaces, but it's to illustrate with publicly available api)

versions:
`rustc 1.35.0 (3c235d560 2019-05-20)`
`drill 0.5.0`

![image](https://user-images.githubusercontent.com/5871626/54755794-0c747c80-4be7-11e9-9431-f1c390d52621.png)

config: 
```
threads: 16
base: 'http://localhost:8080'
iterations: 1000
rampup: 2

plan:
  - name: json
    request:
      url: /json
```

result:
```
./target/release/drill --benchmark benchmark.yml --stats -q
Threads 16
Iterations 1000
Rampup 2
Base URL http://localhost:8080


json                      Total requests            16000
json                      Successful requests       16000
json                      Failed requests           0
json                      Median time per request   3ms
json                      Average time per request  5ms
json                      Sample standard deviation 5ms

Concurrency Level         16
Time taken for tests      21.4 seconds
Total requests            16000
Successful requests       16000
Failed requests           0
Requests per second       746.78 [#/sec]
Median time per request   3ms
Average time per request  5ms
Sample standard deviation 5ms
```

run same benchmark with ab:
```
ab -n 16000 -k -c 16 http://localhost:8080/json
This is ApacheBench, Version 2.3 <$Revision: 1807734 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient)
Completed 1600 requests
Completed 3200 requests
Completed 4800 requests
Completed 6400 requests
Completed 8000 requests
Completed 9600 requests
Completed 11200 requests
Completed 12800 requests
Completed 14400 requests
Completed 16000 requests
Finished 16000 requests


Server Software:        wizzardo
Server Hostname:        localhost
Server Port:            8080

Document Path:          /json
Document Length:        27 bytes

Concurrency Level:      16
Time taken for tests:   0.497 seconds
Complete requests:      16000
Failed requests:        0
Keep-Alive requests:    16000
Total transferred:      2832000 bytes
HTML transferred:       432000 bytes
Requests per second:    32195.81 [#/sec] (mean)
Time per request:       0.497 [ms] (mean)
Time per request:       0.031 [ms] (mean, across all concurrent requests)
Transfer rate:          5565.10 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.0      0       2
Processing:     0    0   1.6      0      41
Waiting:        0    0   1.5      0      41
Total:          0    0   1.6      0      41

Percentage of the requests served within a certain time (ms)
  50%      0
  66%      0
  75%      0
  80%      1
  90%      1
  95%      2
  98%      4
  99%      6
 100%     41 (longest request)

```
Hey,

This isn't necessarily a merge-ready pull request, but here's my initial implementation of websocket support. The code itself should be pretty straightforward, though there are a few questions around how to handle return values from websocket messages (which could be a relatively common scenario) and how the syntax should look like in the benchmark file.

Currently I use this for the benchmark definition:

```
threads: 4
base: <url>
iterations: 5

plan:
  - name: Websocket test
    websocket_message:
      url: <url>
      data: '{"something":"1", "something_else": "598ae069b90d683653bb9519"}'
```

This way the same plan can mix both HTTP and WS. e.g. Artillery makes it so that you define an engine for a test scenario that might be either HTTP or WS.

At the moment this code works and I've successfully used it to test our backends (so we've now used Drill against software running in production). I've also cleaned it up from warnings, so it's merge-ready once the format for WS messages is finalized.