Hello, recently I'm having another issue, while creating a new user/role, I would like to assign some default rights for it.

We can definitly call multiple times `addPolicy` but it cannot guarantee that all the default policies have been added, I'm risking having an `invalid user` in that case.

So I'm thinking if we could have some wrappers like `addPolicies`, `removePolicies`.

`addPolicies` returns `Promise<true>` only if all the policies have been added, if one of them fails then it cancels this operation (remove the ones have been added)

`removePolicies` is similar.
I'm trying to create an app where end users can create ABAC policies for resources in my app via a custom UI. In a nutshell, all attributes would be predefined by me for use in the app and the user would go to the custom UI and select attributes based on the subject, action, resource, and time.
Can Casbin support such a system? I've been digging into Casbin trying to fully grasp how to use it with ABAC and I feel like the static models would hinder such an endeavor since (from my understanding) the static model contains the actual logic and seem to be using dot notation to access the attributes on the argument objects.
```
Hi,

Thanks for the nice access control package.

I have a use case where we wanted to tell the client side that they don't have access to the following attribute when they try to access it. But right now the AC only check the roles and allow to filter the attribute, in other words, "gracious" style.

Is there a function for me to inform the roles that their access is denied because they requested the attributes that they don't have access.

Right now I think I can compare the attributes pre and post filter if it's not equal, I can throw an error but this will require me to do the same checking like the filter if I want to know which attributes that they don't have access.
```

@rained23 , you can try Casbin to implement it.
> I'm implementing a new model for accounts and users in our application. We're now extending it so that users have roles in organizations ("teams)". So I might be an admin on one team and a user on another. I also see the use for having roles that are a step above all teams, where they are admins over all teams (might be called "Superadmin").

@maxpaj, Node-Casbin supports the ``RBAC with domains`` model, see here: https://github.com/casbin/node-casbin#examples. In this model, domain can also be called tenant, or organization as you said. The roles are assigned within a domain context.

> Basically what we want is a model that is modular enough so that we can cover a lot of cases.

You can mix the RBAC model with other models like ACL, ABAC, RESTful. it's more flexible than other available auth libraries.