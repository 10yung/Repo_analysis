1. Clone this project
2. Open intellij 2019.3
3. Tap "edit configurations"
4. Tap kotlin
5. Specify backend module.
6. Attempt to select "Main Class"

No options show for a valid main class.
https://github.com/JetBrains/kotlinconf-app/blob/d56c3383d52dfdc32ba449d8daf9b9f633dd1d08/backend/src/org/jetbrains/kotlinconf/backend/Main.kt#L73

It seems like `index.html` was forgotten. 
Sometimes internet can be unavailable (on the way to)/overloaded (at a venue), so it would be nice to allow changing user preferences, namely bookmarks and votes, offline and synchronize them to the server later when connection becomes available.
KotlinConf gives a plenty of interesting talks, so that it's impossible to watch them all being at the place. 

It would be nice to mark the talks that I want to watch after the conference when their videos become available and to get a (single) notification about that fact.

Currently we have a flag that represents a bookmarked talk, but it's impossible to distinguish the talks I already watched and those that I still want to watch.


Use case:
- as a user I browse kotlinconf.com before the conference and mark talks as favorites. 
- then I install ConfApp and scan QR-code displayed on the site to establish a link between my app account and website session.
- after that all favorites are now synchronized between site and app. If I make changes in favorites and vote for talks, it is immediately reflected on the site.
- after the conference I can browse my favorites on the site again, for example to watch published talks I was not able to attend at the conference and to vote for them.

In the [docs](https://kotlinlang.org/docs/reference/building-mpp-with-gradle.html#target-shortcuts), it's stated that you can use `ios` as a target shortcut instead of individually defining each architecture for the target but in this example, it gets defined individually.

Is using this the preferred way rather than using the shortcut?
Add Vietnamese to the application to support developers and events in Vietnam.
This repo serves as a prime example to people.  Now that the Kotlin DSL for Gradle is fully implemented, wouldn't it be good to use it here?  That makes it even more Kotlin everywhere.
![image](https://user-images.githubusercontent.com/9211902/55379518-eee0d480-554f-11e9-91dd-9429e2bcda69.png)

Added local.properties and ran ./gradlew build
I have the following error


Kotlin Multiplatform Projects are an experimental feature.
Target 'ios' for platform ios_x64 is ignored during build on this mingw_x64 machine. You can build it with a mac

FAILURE: Build failed with an exception.

* Where:
Build file 'D:\MY_UNIVERSE\ws\github_ws\JetBrains\kotlinconf-app\android\app\build.gradle' line: 31

* What went wrong:
A problem occurred evaluating project ':android:app'.
> Could not get unknown property 'MAPBOX_ACCESS_TOKEN' for ProductFlavor_Decorated{name=local, dimension=null, mVersion=null, renderscriptTargetApi=null, renderscriptSupportModeEnabled=null, renderscriptSupportModeBlasEnablenabled=null, versionCode=null, versionName=null, applicationId=null, testApplicationId=null, testInstrumentationtrumentationRunner=null, testInstrumentationRunnerArguments={}, testHandleProfiling=null, testFunctinfig=null, monalTest=null, signingConfig=null, resConfig=null, mBuildConfigFields={API_URL=com.android.builder.internal.ClassFieldImpl@f1a41eac}, mResValues={}, mProguardFiles=[], mConsumerProguardFiles=[], mManifestPlaceholders={}, mWearAppUnbundled=null} of type com.android.build.gradle.internal.dsl.ProductFlavor.