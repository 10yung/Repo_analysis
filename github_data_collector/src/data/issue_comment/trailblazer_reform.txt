First step to v 3.x, drop compatibility with dry-v < 1.x
We will start writing Reform 3 once the Trailblazer 2.1 release along with the new website and PRO launch is out. This issue is in a state of flux, defining the planned API.

For a discussion about why I really want to abandon Reform 2.x, here's a talk that summarizes it: https://www.youtube.com/watch?v=6eXDAQpaUV8

### Design keys

* Immutability: never again will we make that mistake and provide an API that allows changing an object once it's created.
* Reduced internal complexity: we probably won't need Representable for parsing anymore.
* Coercion/typing: use `Dry::Struct`s that are orchestrated via a simplified twin.

## validate

```ruby
result = Form.validate(form, params)
```
Fills out the form, and runs the validations. The filled-out form is somehow in `result`.

### Fill-out

We used to have pre-populators to fill-out a form before its validation. Some people even used `Form#validate` multiple times :woman_facepalming:. The problem here was that this will also run coercion, which is often not wanted and *wrong*! (e.g. when you serialized the already validated data and then want to display a "correct me" form).

```ruby
Form.fill_out(form, data)
```

This bypasses validation and coercion.

```ruby

```


```ruby

```
Calling `DrySchema.messages` will return errors messages + hints - the solution here is to call `DrySchema.errors`

This should fix: https://github.com/trailblazer/reform/issues/444
### Complete Description of Issue

2.2.4 is latest non-pre-release version on https://rubygems.org/gems/reform

![image](https://user-images.githubusercontent.com/14151/50715607-ee10d300-1032-11e9-9ce6-ecbed383230c.png)

which means Gemfiles that don't explicitly request 2.3.0.rc1 are still getting 2.2.4 even though 2.3 has bug fixes and improvements that users want, and even though the changelog for 2.3.0 says "You can upgrade from 2.2.0 without worries." :smile: 

### Expected behavior

```
⟫ gem install reform
Successfully installed reform-2.3.0
1 gem installed
```

### Actual behavior

```
⟫ gem install reform
Successfully installed reform-2.2.4
1 gem installed
```

Hello,

Sorry if it's implemented elsewhere, I tried to find but didn't find, that's why I wrote a test case / drafted implementation so we can discuss.

**Problem:**
When have an API, errors for collections are not indexed, so not sure about what element caused the error. Rails has implemented this behavior on https://github.com/rails/rails/pull/19686

Trying to set this configuration on my app, I wasn't successful, so implemented on Reform

**Solution:**
1. Add one test for exactly the indexed errors, making the default, the non indexed behavior
2. On `Reform::Contract::Result::Errors` if not using indexed errors, keep the usual behavior, else collect all the messages, but organized indexing for collections on the errors hash

TODO: @apotonick I know this class variable for configuration is stupid hahaha just wanted a _fast 
 switch_  for the test case, would it good how? as a feature?
Hi there!

Thanks for writing a great library! I'm using Reform to a manage a collection of nested forms from a parent form. My parent form looks like:

```ruby
class GlobalVisitor::SaveForm < ApplicationForm
  property :token
  collection(
    :company_visitors,
    populator: :company_visitor!,
    form: Visitor::CreateForm,
  )

  validation do
    required(:token).filled
  end

  private

  def company_visitor!(fragment:, as:, collection:, **)
    form = collection.find { |model| model.company_id == fragment[:company_id] }
    form ? form : collection.append(model.company_visitors.build(company_id: fragment[:company_id]))
  end
end
```

I've noticed that if I have many `company_visitors`, all of them get validated and saved during the process of saving the `GlobalVisitor::SaveForm`, even if my `company_visitors` parameters do not reference any existing objects and my `populator` returns a new instance.

I am trying to find a way to configure my collection, such that it only contains the relevant items based on the incoming parameters. Or a way to exclude the items that are not being updated from being validated/saved. For a parent object that has many collection items, it results in quite a bit of unneeded work, when we know at the time of validation the subset of the collection we need to process. Any advice on how to go about this?

Thanks!

As per @apotonick's request in #410 here is a PR to start the conversation about changes to Reform.

A couple things I noticed as I went through this.
- `#failure?` did not actually return a boolean value. It just returned whatever was in `@failure`. Since a new `#failure` method was being added, I updated `#failure?` to be more consistent with the expectation of a `?` method.
-  Is the `result.rb` line 9 is correct behavior? Should it instead be a `map`? As it is now, it's just going to find the first failure of the combined lists. Couldn't there be multiple?

Hi. this might be interpreted as a usability issue with the library, but I don't want to create an account with gitter, as it requests for too much information from my github account, making it difficult to join. If I may be so bold to suggest smth, a mailing list would have a lower barrier of entry. 

### Complete Description of Issue

I'm using reform contracts in the context of trailblazer for schema validation of a REST API. I've seen that unexpected properties being sent in a JSON payload will just be "cleared out", instead of generating an error. It has been said to me that this mimmicks the behaviour of rails strong parameters, which will also remove unexpected input, so I don't really have an issue with that. But I'd like to opt-in on different behaviour, i.e. fail the validation and generate errors like "Unexpected attribute" for wrong input. An example would be this kind of payload:

```json
{"user": {"firzt_name": "John", "last_name": "Doe"} }
```

In this case, I'd like to generate an error for the `firzt_name` key, as the contract only states the `first_name` and `last_name` properties. 

Is this actually configurable? Or is it completely missing? 

I’ve got some problems with dry validation translations into the Reform::Form. 
I have some contracts with the following configuration
```
class New < Reform::Form
.
.
.
 configure do
        config.messages = :i18n
        config.namespace = :administration_project_type
      end
.
.
.
```
```
class New < Reform::Form
.
.
.
configure do
        config.messages = :i18n
        config.namespace = :administration_job_title
      end
.
.
.
```
I also have some tests for those that go like this
```
it "project type must be filled" do
      subject.name = nil
      subject.valid?
      expect(subject.errors[:name]).to include("Project type must be filled")
    end
```
   
```
it "job title must be filled" do
      subject.name = nil
      subject.valid?
      expect(subject.errors[:name]).to include("Job Title must be filled")
    end
```

My locales look like this
```
en:
  errors:
    rules:
      administration_project_type:
        rules:
          name:
            filled?: "Project type must be filled"
            unique_name?: "Project type name must be unique"
```
```
en:
  errors:
    rules:
      administration_job_title:
        rules:
          name:
            filled?: "Job Title must be filled"
            unique_name?: "Job Title name must be unique"
```
I’m testing with Rspec. If I am to run the tests separately, they work fine. But when I run all tests, then I get errors such as
```
4) Administration::JobTitle::Contract::New validation job title must be filled
     Failure/Error: expect(subject.errors[:name]).to include("Job Title must be filled")
       expected ["Project subtype must be filled"] to include "Job Title must be filled"
     # ./spec/concepts/administration/job_title/contract/new_spec.rb:15:in `block (3 levels) in <top (required)>'
```
```
7) Administration::ProjectType::Contract::New validation project type must be filled
     Failure/Error: expect(subject.errors[:name]).to include("Project type must be filled")
       expected ["Project subtype must be filled"] to include "Project type must be filled"
     # ./spec/concepts/administration/project_type/contract/new_spec.rb:15:in `block (3 levels) in <top (required)>
```

I had my Reform form working with one nested model, but I need that model to contain another nested model. A tutorial has_many steps, a step has_many images. Here's my attempt:
```
class TutorialForm < Reform::Form

  collection :steps, populator: :step_populator! do
    property :title
    property :body
    validates :title, presence: true
    validates :body, presence: true
    collection :images, populator: :image_populator! do
      property :image
      validates :image, presence: true
    end
  end

  def step_populator!(collection:, index:, **)
    if (item = collection[index])
      item
    else
      collection.insert(index, Step.new)
    end
  end

  def image_populator!(collection:, index:, **)
    if (item = collection[index])
      item
    else
      collection.insert(index, Image.new)
    end
  end
end
```

Is this totally wrong? It's not working at the moment.