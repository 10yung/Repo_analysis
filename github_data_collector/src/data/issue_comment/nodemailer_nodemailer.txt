Hello,

I'm not sure if it is a bug or I'm just using bad declarations. I didn't find anything about this in you documentation or stack overflow. But the problem is:

I'm trying to pass options to createTransport 
```
{
      pool: true,
      maxConnections: 1,
      maxMessages: 5,
      host: 'host',
      port: 2525,
      auth: ...
}
```
I had an error that provided object doesn't match with Transport object...

So I found SMTPPool.Options in you documentation.

Then I had an error that type Boolean is not assignable to type true. It was weird, so I went to SMTPPool.Options declaration and found this:

```
interface Options extends MailOptions, TransportOptions, SMTPConnection.Options {
        /** set to true to use pooled connections (defaults to false) instead of creating a new connection for every email */
        pool: true;
        service?: string;
        getSocket?(options: Options, callback: (err: Error | null, socketOptions: any) => void): void; // TODO http.ClientRequest?
        url?: string;
        /** the count of maximum simultaneous connections to make against the SMTP server (defaults to 5) */
        maxConnections?: number;
        /** limits the message count to be sent using a single connection (defaults to 100). After maxMessages is reached the connection is dropped and a new one is created for the following messages */
        maxMessages?: number;
        /** defines the time measuring period in milliseconds (defaults to 1000, ie. to 1 second) for rate limiting */
        rateDelta?: number;
        /** limits the message count to be sent in rateDelta time. Once rateLimit is reached, sending is paused until the end of the measuring period. This limit is shared between connections, so if one connection uses up the limit, then other connections are paused as well. If rateLimit is not set then sending rate is not limited */
        rateLimit?: number;
    }
```
**Notice that type of a pool is true**

Is it some deprecated interface? Should I use other interface for options with pools?

I'm using:
@types/nodemailer 6.4.0
nodemailer 6.4.2

Thanks

Dima
hello
let transporter = mailer.createTransport({
            host: "domain-com.mail.protection.outlook.com", // hostname
            secureConnection: false,
            port: 25, // port for secure SMTP
            auth: {
                user: "user@domain.com",
                pass: "xxxxxx" 
            },
            debug: true,
            logger: true,
            ignoreTLS: true,
        });
    
        let info = await transporter.sendMail({
            from: 'user@domain.com',
            to: 'user2@domain.com',
            subject: "Registration Confirmation",
            text: "Registration Confirmation",
            html: 
        }


It gets stuck after this:

 EHLO [127.0.0.1]
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] S: 250-HK2APC01FT020.mail.protection.outlook.com Hello [115.110.155.29]
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] S: 250-SIZE 157286400
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] S: 250-PIPELINING
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] S: 250-DSN
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] S: 250-ENHANCEDSTATUSCODES
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] S: 250-STARTTLS
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] S: 250-8BITMIME
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] S: 250-BINARYMIME
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] S: 250-CHUNKING
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] S: 250 SMTPUTF8
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] SMTP handshake finished
[server] [2020-01-10 07:15:38] INFO  Sending message 
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] C: MAIL FROM:<user@domain.com>
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] S: 250 2.1.0 Sender OK
[server] [2020-01-10 07:15:38] DEBUG [nt6W0tdhYoA] C: RCPT TO:<user2@domain.com>
