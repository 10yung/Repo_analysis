Need to be able to set the configuration for SQLite database to MULTITHREAD. Currently not available in this RSQLite API. But is available in the C API: https://www.sqlite.org/capi3ref.html#sqliteconfigmultithread

Can you port this MULTITHREAD option to RSQLite please?
`dbAppendTable()` is very slow on a file. It is fast for the in-memory DB. 

``` r

tab <- pkgcache::meta_cache_list()

## Remove the list columns
tab <- tab[, !sapply(tab, is.list)]
dim(tab)
#> [1] 35359    31

con <- DBI::dbConnect(RSQLite::SQLite(), tempfile(), create = TRUE)
system.time(DBI::dbWriteTable(con, "pkgs", tab))
#>    user  system elapsed 
#>   0.162   0.043   0.211
dim(DBI::dbReadTable(con, "pkgs"))
#> [1] 35359    31
rm(con)

con2 <- DBI::dbConnect(RSQLite::SQLite(), tempfile(), create = TRUE)
DBI::dbCreateTable(con2, "pkgs", tab)
dim(DBI::dbReadTable(con2, "pkgs"))
#> [1]  0 31
system.time(DBI::dbAppendTable(con2, "pkgs", tab))
#>    user  system elapsed 
#>   1.122  11.886  15.088
dim(DBI::dbReadTable(con2, "pkgs"))
#> [1] 35359    31
```

<sup>Created on 2019-12-23 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
Prepare for release: 
 
* [x] Check [current CRAN check results](https://cran.rstudio.org/web/checks/check_results_RSQLite.html) 
* [x] `devtools::check()` 
* [x] `devtools::check_win_devel()` 
* [x] `rhub::check_for_cran()` 
* [x] `rhub::check(platform = 'ubuntu-rchk')` 
* [x] `rhub::check_with_sanitizers()` 
* [x] `revdepcheck::revdep_check(num_workers = 4)` 
* [x] Update `cran-comments.md` 
* [x] [Polish NEWS](https://style.tidyverse.org/news.html#news-release) 
* [x] Review pkgdown reference index for, e.g., missing topics 
 
Submit to CRAN: 
 
* [x] `usethis::use_version('patch')` 
* [ ] `devtools::submit_cran()` 
* [ ] Approve email 
 
Wait for CRAN... 
 
* [ ] Accepted :tada: 
* [ ] `usethis::use_github_release()` 
* [ ] `usethis::use_dev_version()` 

I would like to utilize sqlite3_busy_handler() and squlite3_busy_timeout() to check if a database is locked and to retry RSQLite::dbWriteTable once the database is no longer locked. Is there any implementation of this in RSQLite? 
What would it take so enable/support/configure RSQLite to allow using `generate_series` (see [The generate\_series Table\-Valued Function](https://www.sqlite.org/series.html)) 

Trying after `remotes::install_github("r-dbi/RSQLite#273")` results as follows:
 
```
dbExecute(db,'SELECT value FROM generate_series(5,100,5)')
Error in result_create(conn@ptr, statement) : 
  no such table: generate_series
In addition: Warning message:
Closing open result set, pending rows 
```

It was suggested to me that requesting this is the key to:  [enabling SQLite's generate\_sequence to be used in R's sqldf library under MS windows](https://stackoverflow.com/questions/53568665/enabling-sqlites-generate-sequence-to-be-used-in-rs-sqldf-library-under-ms-win)

Presumably an approach is similar to https://github.com/r-dbi/RSQLite/pull/266 only with [this source](https://www.sqlite.org/src/artifact/0c97f63378fddc9f)...???
https://github.com/r-dbi/RSQLite/issues/151#issuecomment-405058062
@hadley [suspects](https://github.com/tidyverse/dplyr/issues/3615#event-1669631234) you are to blame for https://github.com/tidyverse/dplyr/issues/3615 so I'm opening this here. :wink:

---
In short: I ran out of disk space writing a tibble to a local SQLite database and got the error

```
Error in result_create(conn@ptr, statement) :
  cannot rollback - no transaction is active
```

which was not particularly helpful to understand that the problem was a full disk. :wink:
and update DBI documentation.
hi, if i'm understanding things correctly, any values that match `sep=` inside a quoted field will derail a `dbWriteTable()` import from a file connection?


	library(DBI)
	tf <- tempfile()

	x <- c( '"header1","header2"' , '"one,two","three"' )
	writeLines( x , tf )
	db <- dbConnect( RSQLite::SQLite() )

	# works as expected
	read.csv( tf )

	# fails
	dbWriteTable( db , 'x' , tf )


and delimited files with quotes carry those quotes into the column values..  thanks for considering this!

	y <- c( '"header1","header2"' , '"onetwo","three"' )
	writeLines( y , tf )
	dbWriteTable( db , 'y' , tf )

	# with quotes
	dbReadTable( db , 'y' )[1,1]

	# without quotes
	read.csv( tf )[1,1]


I found the hard way that SQLite does not support date types. This discovery could have been short circuited had RSQLite given me useful information when I attempted to use **dbWriteTable** with a dataframe that had a POSIXlt type. The error message I get is:
```
Error in rsqlite_bind_rows(rs@ptr, value) : 
  Parameter 2 does not have length 11.
```

To make sense of this, you'd have to be intimately familiar with RSQLite's innards. That error is almost absent on Google, even when omitting the digits. Finding **rsqlite_bind_rows** in the appropriate .cpp file in this repository shed no useful light on the issue. Had I not stumbled across the answer in an unrelated exploration, problem diagnosis would have taken a long time.

Throw us a bone: if the data type in my dataframe is why the data can't be saved, please let me know this.