Hi, I have a simple .haml file in rails:

```haml
- title = "<b>The dog</b> ate her cat's lunch"

.js-tooltip{title: title}
  Dog 1
.js-tooltip{title: title.html_safe}
  Dog 2
```

When observing the source code, the first `<div>` gets transformed and escaped properly and behaves as expected:
```html
<div class='js-tooltip' title='&lt;b&gt;The dog&lt;/b&gt; ate her cat&#39;s lunch'>
  Dog 1
</div>
```
![image](https://user-images.githubusercontent.com/1632140/62115502-d80d7d00-b2b8-11e9-95b3-c2b74c2bd75f.png)

However, the second `<div>` gets transformed and escaped poorly, leading to an unfortunate accident that could have been avoided:
```html
<div class='js-tooltip' title='<b>The dog</b> ate her cat's lunch'>
  Dog 2
</div>
```
![image](https://user-images.githubusercontent.com/1632140/62115582-f4111e80-b2b8-11e9-8be8-991580daa4d8.png)

It seems that haml-rails doesn't properly deal with `ActiveSupport::SafeBuffer` in element attributes (this bug doesn't occur when using `= title`). 

Let me know if I can provide more info or examples!
Maybe this is better reported here than in haml/haml#1014

On haml 5.1.1 and haml-rails 2.0.1, all text in .text.haml files is html escaped. Using `escape_filter_interpolations` doesn't seem to help. This seems to be related: rails/rails#8235

Is there any way to disable escaping on text.haml files altogether?

```
%h1 Foos
:erb
  <%= "test" %>
:erb
  <%= "test" %>
```

Expected Result:
test is printed twice.

Actual Result: 
test is printed three times.

The more times you use the ERB filter the more times it repeats all previous :erb filter content.

Running this view through haml on the command line produces the intended result, so I believe this is an issue with the way haml interacts with rails.

Produced this result by using only rails new rails_test and then adding the haml-rails and haml gems to the Gemfile and scaffolding a foos_controller.

From Gemfile.lock:


    haml (5.1.1)
      temple (>= 0.8.0)
      tilt
    haml-rails (1.0.0)
      actionpack (>= 4.0.1)
      activesupport (>= 4.0.1)
      haml (>= 4.0.6, < 6.0)
      html2haml (>= 1.0.1)
      railties (>= 4.0.1)

    rails (5.2.3)
      actioncable (= 5.2.3)
      actionmailer (= 5.2.3)
      actionpack (= 5.2.3)
      actionview (= 5.2.3)
      activejob (= 5.2.3)
      activemodel (= 5.2.3)
      activerecord (= 5.2.3)
      activestorage (= 5.2.3)
      activesupport (= 5.2.3)
I was trying to use the `haml:erb2haml` task inside a Rails Application Template and the task was not recognizing or honoring my ENV vars set on the CLI.

This PR changes the ENV checks a little bit to make it compatible with executing inside a Rails App Template.

I also added a new ENV var for `HAML_RAILS_OVERWRITE_HAML` to control the other user prompt of asking wether to overwrite existing haml files.

I'm using it like this from inside a rails app template
```
HAML_RAILS_DELETE_ERB=true HAML_RAILS_OVERWRITE_HAML=false rails haml:erb2haml
```
Pipes `|` on converted Devise views? How can I prevent this? Or is there some reason I'm not understanding? Because I have to go through and delete them every time...

<img width="707" alt="screen shot 2019-02-04 at 11 44 01 am" src="https://user-images.githubusercontent.com/6557296/52226662-352cf680-2873-11e9-94a7-493d1d32a36e.png">

Followed the [installation](https://github.com/indirect/haml-rails#converting-rails-application-layout-file-to-haml-format) guide for haml-rails.

```
$ bundle exec rails generate haml:application_layout convert
Running via Spring preloader in process 17003
Could not find generator 'haml:application_layout'. Maybe you meant 'application_record', 'integration_test' or 'migration'
Run `rails generate --help` for more options.
```
Took a while to sort this out, so it would be nice to add something to the read me.

In a Rails 5.2 project I previously had just

    gem 'haml_rails'

in my Gemfile, it was happily generating haml for new views. But I didn't have the erb to haml converter so I upgraded to 

    gem "haml-rails", "~> 1.0"

Which provided the utililty to convert my application layout to haml. But it also completely busted view generation so that when I scaffold a new model I now get this error 

    Could not load generator "generators/haml/scaffold/scaffold_generator". Error: uninitialized constant 
    Haml::Rails::Generators.

I commented out the line in config/application.rb

     config.generators do |g|
         g.template_engine :haml

which was there before when I was just using ` gem 'haml_rails'` as the newer ` gem "haml-rails", "~> 1.0"` shouldn't need it (that's the main point of the updated gem). But was still broken.

Finally after a lot of head scratching and wasted time I realised that `haml-rails` might not be a direct descendent of `haml_rails` and simply doesn't upgrade cleanly. So I had to remove 'haml_rails' from my installed gems and remove the lib/generators directory which had haml templates and generators in it. 

It now works, but.. that lib/generators was incredibly useful because it had templates I could edit to get new views as I wanted them. e.g `form_with` or `boostrap_form_with`. 

It would be nice to take the code for templates from `haml_rails`, an old dead project, and use it in `haml-rails` so that users could have editable templates.


Can we please start using a changelog? 

Working through commits is a difficult way to review changes. Having a changelog with a concise list of updates will be very helpful in updating the gem.
I am in the process of upgrading an old applications base libraries.  Currently I am at Rails 4.2.6.  haml-rails has been constrained to version '~> 0.5.3' which works.  However, when I take the version constraint off and let bundler bring in the latest version I get the error

NameError: undefined method `precompiled_method_return_value' for class `Haml::Compiler'

when I run my test suite.   Am I stuck on version 0.5.3 until I get to a newer rails?  If so, what version of rails can I start letting haml-rails version float to the latest?
Making scaffold generate form_with if Rails 5.1+.
Please reference [this post](https://github.com/rails/rails/issues/25197).

Thanks.