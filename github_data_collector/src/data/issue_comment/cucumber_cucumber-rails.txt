## Summary

In rails 6 application are now generated by default with `config.cache_classes = false` (see https://github.com/rails/rails/commit/65344f254cde87950c7f176cb7aa09c002a6f882). That generates a warning from cucumber-rails:

https://github.com/cucumber/cucumber-rails/blob/86a7f1f3f4943aae91239990b446f17699a769eb/lib/cucumber/rails.rb#L16-L20

## Expected Behavior

Adding cucumber-rails to a default rails app should ideally not create a warning.

## Current Behavior

A warning is printed when loading cucumber-rails. I think the real question is if that warning is still relevant? It's several years old by now.
Fixes #454

## Summary

We want to be compatible with current Ruby versions. 2.7 is not yet in the matrix. It could be.

## Expected Behavior

- Have 2.7 in CI matrix
- No Ruby 2.7 warnings from the test suite
- All tests pass (or, no tests fail due to 2.7)

## Current Behavior

- Does not have Ruby 2.7 in the test matrix

## Possible Solution

- Extend the matrix.

## Context & Motivation

Rails is moving forwards with their warnings-removal work for 2.7. This is a Rails plugin. Would be nice to move in the same direction.


In multiple places alias method chaining is used instead of prepend. Since cucumber-rails doesn't work with version of Ruby prior to 2.0, these should be updated to the more semantically correct prepend.
## Summary

Draft attempt at making Cucumber 4 work on cucumber rails

## How Has This Been Tested?

CI

## Screenshots (if appropriate):

## Types of changes

<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue).
- [x] New feature (non-breaking change which adds functionality).
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected).

## Checklist:

<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [ ] I've added tests for my code.
- [x] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.

## Summary

Fixes #446 

## How Has This Been Tested?

<!--- Please add tests for changes to the code, otherwise we probably won't merge it -->

<!--- Please describe in detail how you tested your changes. -->
<!--- Include details of your testing environment, tests ran to see how -->
<!--- your change affects other areas of the code, etc. -->

## Types of changes

- [x] Bug fix (non-breaking change which fixes an issue).
- [ ] New feature (non-breaking change which adds functionality).
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected).

## Checklist:

<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [ ] I've added tests for my code.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.

## Summary

I am working on a project where MiniTest and `rspec-mocks`, `rspec-expectations` are both available in the Gemfile. However we have RSpec disabled as we do not use RSpec assertions in Cucumber. This is causing an issue with `cucumber-rails` where it tries to load RSpec expectations and matchers regardless of them being necessary.

## Expected Behavior

Tests run fine without RSpec getting loaded when the Gemfile has `require: false` for those libraries.

## Current Behavior

`assert_equal` with capybara fails due to `rspec-expectations` changing its behavior from vanilla `minitest`.

## Possible Solution

Changing line the [lib/rspec.rb](https://github.com/cucumber/cucumber-rails/blob/master/lib/cucumber/rails/rspec.rb#L5-L22) file to check for `defined?(RSpec::Mock)` would allow for these two libraries to co-exist without causing a conflict.

Minor tidy to method to improve linting and use new syntax

## Expected Behavior

Should use new ruby 2.3+ syntax

## Current Behavior

Use Ruby 1.9 or older syntax

## Possible Solution

Update syntax

## Summary

Cucumber-rails generates `script/cucumber`, but recent versions of Rails put helpers scripts in `bin/`. Cucumber-rails should do the same.

## Expected Behavior

Upon installing cucumber-rails, there's a file `bin/cucumber` for running the scenarios.

## Current Behavior

Instead, there's a file called `script/cucumber`.

## Possible Solutions

1. Change the target location of `script/cucumber` to `bin/cucumber`.
2. Depend on `spring-commands-cucumber` and have that generate `bin/cucumber`

There are probably other options. We can see how `rspec-rails` does things.

## Context & Motivation

It's an annoyance to have to move this file manually or install `spring-commands-cucumber` myself.