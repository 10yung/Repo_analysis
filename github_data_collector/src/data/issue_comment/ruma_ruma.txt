This is a relatively naive implementation that does the same iteration over files but with `/etc/ruma` prepended to the path if none were found in the local directory.

Note that the type of `config_path` has been changed from `Path` to `PathBuf` to allow for joining the directory with the file name. This could be avoided by simply adding the absolute path of each potential file in `etc` to `DEFAULT_CONFIG_FILES`, but I considered that a bit *too* hardcoded.

Additionally, I changed `DEFAULT_CONFIG_FILES` from a `static` to a `const` as it's my understanding that it's best practice to use `const` when possible.

Should close #196.
I've just come into the matrix world and would like to contribute to home server development.

From the look of it, Dendrite seems to be the defacto next-gen homeserver to supercede Synapse; there seems to be more activity on the project and it's affiliated with the official matrix team as well. However, personally I like Rust a bit more as a language and after reading some of the design documents on Dendrite, I'm also not super convinced by their ambitions on event based architecture.

What's ruma's current status and have you considered its position wrt. Dendrite in future? In particular, I would be interested to know how it would differentiate from Dendrite. Otherwise I feel like it might be better to concentrate effort on developing a reliable homeserver.
It would be a nice addition if ruma would also look for a config file in `/etc` or `/etc/ruma` or similar, as it would make the server setup less dependent on the servers working directory, and is also standard behaviour for a "well-behaved" unix service.
I've been trying to think of ways to work on the project while we wait for async/await and the async library ecosystem to settle, and it occurred to me that there's never been any explicit statement of the goals of the project. It often comes up in discussions over Matrix and Twitter, but it'd be useful to have written down, both as a way to guide us during development and as a place to refer to people asking about the project.

---

Here are my initial thoughts about the project's goals:

## What Ruma is

* A fully functional, interoperable Matrix homeserver with federation.
* A Rust library for consuming the Matrix APIs.
* A suite of libraries for building Rust software that integrates with Matrix.

## Product focus

* Scale: the homeserver should support both small and large scale deployments.
* Performance: the homeserver should run with a minimum of memory and CPU load.
* Stability: Ruma software should minimize the possibility of unrecoverable runtime errors.

## Improving the ecosystem

* Spec compliant: Ruma should be a forcing function for completeness and correctness of the Matrix spec. All information needed to implement Ruma should be unambiguously explained in the spec. Whenever implementation would require looking at the details of an existing implementation, the spec should be improved to clarify instead.
* Rust maturity: Ruma should be a proving ground for the suitability of Rust. The needs of the project should provide feedback upstream to the developers of Rust and Rust libraries to improve and stabilize.

---

I'd love to hear other people's thoughts about what they'd like Ruma to focus on.
Feedback about the organization and wording of the above goals would be appreciated, too!
Hi there :)

I am sure you all are aware about the situation as following: 

1) A specific group is on Slack or another proprietary service. 
2) A specific amount of users (and potential users) prefer an open source solution.
3) A bot system tends to clutter the interface and needs the confirmation of the community leadership.
4) A community leader often decides to do nothing, since he/she is scared to split the community. 

Another issue is, that Matrix is decentralized instead of distributed.

This solution is pretty naive, since my insight into the internals are quite shortsighted: 

1) Ship a Docker container with puppets included. 
2) Consider to add a GUI in order to setup the credentials. 
3) Use Ruma in order to let each user host its own instance. 

This provides open interaction with the existing proprietary solutions. 

The integration with Slack and Co happens completely independent and is native in the experience. 

I am pretty sure that there are some hardcore issues since it would be probably already the preferred deployment method, I guess? 

So I post this primarily to get the answer: Why? :smile:
I'm creating this issue as a place to keep track of the things in the Rust and Matrix ecosystems that are completely blocking or slowing the progress of Ruma (the homeserver as well as supporting libraries.) We can use it to track the status of these blockers and as a place to link people wondering about the status of the project.

### Rust (blocking implementation)

* ~Release of [http](https://github.com/carllerche/http): blocks the use of these shared HTTP types being used in [ruma-api](https://github.com/ruma/ruma-api), the integration of these types in [hyper](https://github.com/hyperium/hyper), and the integration of these types in downstream web frameworks we'd consider using, such as [Gotham](https://github.com/gotham-rs/gotham), [Rocket](https://github.com/SergioBenitez/Rocket), a renewed version of [Iron](https://github.com/iron/iron), or something we build ourselves on Hyper~
* ~Adoption of the http crate in hyper ([tracking issue](https://github.com/hyperium/hyper/issues/1317)): blocks adoption of an http-crate-based hyper in web frameworks we might want to use~
* ~Adoption of the http crate in an async web framework: blocks our ability to use an http-crate-based ruma-api with said web framework~
* ~Stabilization of async/await ([RFC 2033](https://github.com/rust-lang/rfcs/pull/2033), [tracking issue](https://github.com/rust-lang/rust/issues/43122)): blocks ergonomic use of async code~
* Choosing a web framework once they all support async/await

### Rust (blocking stabilization/release)

* ~Stablization of impl Trait ([RFC 1522](https://github.com/rust-lang/rfcs/pull/1522), [RFC 1951](https://github.com/rust-lang/rfcs/pull/1951), and [RFC 2071](https://github.com/rust-lang/rfcs/pull/2071), [tracking issue](https://github.com/rust-lang/rust/issues/34511)): blocks ergonomic, performant use of async code. Note: Part of impl Trait has been stabilized, but it's not yet usable in traits.~
* ~Stabilization of the `TryFrom` and `TryInto` traits ([RFC 1542](https://github.com/rust-lang/rfcs/pull/1542), [tracking issue](https://github.com/rust-lang/rust/issues/33417)): blocking stable use of fallible type conversions; used in several places in Ruma~
* ~Stabilization of procedural macros ([RFC 1566](https://github.com/rust-lang/rfcs/pull/1566),
 [tracking issue](https://github.com/rust-lang/rust/issues/38356)): blocking stabilization of [ruma-api-macros](https://github.com/ruma/ruma-api-macros), and in turn [ruma-client-api](https://github.com/ruma/ruma-client-api), plus planned ruma-api crates like ruma-federation-api~

### Matrix (blocking implementation)

* ~Client-server API specification r0.3.0 (or whatever the release after r0.2.0 ends up being): blocks some aspects of progress on the client-server API, notably end-to-end encryption support~
* ~A stable release of the server-server API specification: blocks ruma-federation-server~
* ~A stable release of the application service API specification: blocks future application services in Rust using Ruma libraries~
* ~A stable release of the identity service API specification: blocks a future identity service in Rust using Ruma libraries~
* ~A stable release of the push gateway API specification: blocks a future push gateway in Rust using Ruma libraries~

### Matrix (blocking stabilization/release)

This is just a list of issues we've opened against the Matrix spec in the process of building Ruma. It includes places where things are wrong/misleading/undocumented. At least some of these are likely to be resolved in new versions of the specs listed above.

* ~[the GET form of /login has gone missing from swagger and spec](https://github.com/matrix-org/matrix-doc/issues/677)~
* ~[/search spec says the only possible JSON body parameter is `search_categories`, but the example also has `order_by` and `groupings`](https://github.com/matrix-org/matrix-doc/issues/644)~
* [Document all event keys shown in examples](https://github.com/matrix-org/matrix-doc/issues/684)
* [Spec is unclear about what is stored in the content repository](https://github.com/matrix-org/matrix-doc/issues/772)
* ~[Spec does not explain the values of string keys in the /search's response](https://github.com/matrix-org/matrix-doc/issues/773)~
* ~[Handling the reason field in kick and ban endpoints](https://github.com/matrix-org/matrix-doc/issues/798)~
* [Explain the bind_email parameter to the registration endpoint better](https://github.com/matrix-org/matrix-doc/issues/662)
* ~[Enumerate all events created when a room is created](https://github.com/matrix-org/matrix-doc/issues/681)~
* [Document event size errors](https://github.com/matrix-org/matrix-doc/issues/679)
* [Provide a full reference of all the different error codes](https://github.com/matrix-org/matrix-doc/issues/603)
* [Grammar for completely opaque APIs](https://github.com/matrix-org/matrix-doc/issues/666)
* [Grammar for room IDs and event IDs](https://github.com/matrix-org/matrix-doc/issues/667)
* [Document grammar for device IDs](https://github.com/matrix-org/matrix-doc/issues/1257)
* [Document semantics/guarantees around transaction IDs](https://github.com/matrix-org/matrix-doc/issues/699)
* ~[Explain the rationale for /account/password authentication](https://github.com/matrix-org/matrix-doc/issues/680)~
* ~[search API lies and claims that it takes a v2 filter](https://github.com/matrix-org/matrix-doc/issues/598)~
* ~[Specify format of origin_server_ts](https://github.com/matrix-org/matrix-doc/issues/2064)~ Superceded by: ~[Timestamp time zone?](https://github.com/matrix-org/matrix-doc/issues/1468)~
* ~[Presence list API response does not match m.presence schema](https://github.com/matrix-org/matrix-doc/issues/2065)~
* ~[StrippedState schema is inconsistent](https://github.com/matrix-org/matrix-doc/issues/2066)~


Currently we fetch the whole room timeline and then we discard events based on the timeline limit.
- `GET /rooms/:room_id/state/:event_type` #12
- `GET /rooms/:room_id/state/:event_type/:state_key` #11
