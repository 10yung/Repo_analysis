Many times when trying to sort out errors in return types, the output is a mess. It comes back as a big long tooltip that says language like ...19 more | undefined;SomeTypeError. Reasoning about this is so difficult. I often even wish i could copy and paste, I actually take a screenshot and try to read this output because i can't even select copy and past from the tooltip

Please.
I'm not sure if something changed recently, but I'm trying to use this package with language-babel and the init screen no longer seems to be working. I know atom also recently updated, but wanted to check here as well.

```
do (grammarPackageImUsing = "language-babel") ->
  atom.packages.onDidTriggerActivationHook "#{grammarPackageImUsing}:grammar-used", ->
    atom.packages.triggerActivationHook 'language-typescript:grammar-used'
```
- [x] All compiled assets are included (atom packages are git tags and hence the built files need to be a part of the source control)

This feature is about check errors from related files by cursor position in design time. It using several protocols of tsserver:
- `navtree`:  NavTree request for find a semantic node
- `references`: Find references request for search related files
- `updateOpen`: Request to synchronize list of open files with the client(should require before getting diagnostics)
- `semanticDiagnosticsSync`: Synchronous request for semantic diagnostics

Way use sync protocol?
1. `geterr` command is does not guarantee the response of all files. It should be necessary synchronized list of open(and closed) files between the Atom.
2. Handle for error messages for `triggerFile`. It is recognize for currently opened file in editor with working on `ChecklistResolver`
3. Doesn't need diagnostics of syntactic and suggestion because saved(or not opened) files are passed already(`getter` command will always get diagnostics syntactic and suggestion)
4. And much faster response then `geterr` command.

This PR is recreated for resolve sync state of open/close/change of files between Atom editor and external modifier. #1533 
- [x] All compiled assets are included (atom packages are git tags and hence the built files need to be a part of the source control)

When this option enabled, It will be report all problems in current project when on file saved.
My team's projects use two spaces of indentation in all source files, so it would be nice if we could set this same level of indentation for the tooltips that appear with types.
VSCode allows customising the location of TypeScript thanks to [`typescript.tsdk`](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions). Could the same be possible for `atom-typescript`? After digging in the sources I've noticed that there is an [automatic detection](https://github.com/TypeStrong/atom-typescript/blob/896e85275859979a24f83f7ace24b20464ef7064/lib/client/clientResolver.ts#L124), but in my users' case TypeScript is located outside of the `node_modules` folder.
When i click into a path like this, i do not jump into the source.
```ts
 '@some-app/app/app-context';
```
It would be great to hide tooltips, because they are very annoying and overlay autocompletion.
I've tried different options in settings (like increasing delay and so on), but nothing helped.
Maybe it's not tooltip, but there are no other options in settings.

<img width="1416" alt="screenshot 2018-12-18 at 13 53 49" src="https://user-images.githubusercontent.com/555146/50142744-a8cb7200-02cc-11e9-9774-7eabfef5c274.png">

It'd be nice to make the tooltip stay when hovering over it, and to disappear when the mouse leaves, similar to linter-ui-default or with atom-ide tooltips.

Then we can make the text selectable (which is super useful for copying type identifiers, etc). We could also make type identifiers clickable to take us to the definitions.
## Some context

I made a function that takes an interface with 5 properties as an argument.
```ts
interface MyInterface {
    readonly myProperty : string
    readonly anotherProperty: number
    optionalProperty1?: number[]
    optionalProperty2?: number
    // I can have some comments to describe this property in great detail
    lastProperty: string
}

function interfaceConsumer(myVariable: MyInterface): string {

    /* some code here */

    return ""
}
```

TS knows everything about that interface, it shows hints about expected properties and would warn me when in function arguments I create an object not compatible with the interface.
![TS shows hints for interface properties](https://i.imgur.com/IW9nFSJ.png)
![TS warns when object does not conform to the interface](https://i.imgur.com/rzMiE8v.png)

So can I have a way to autocomplete that interface in function parameters?
I could copy-paste interface declaration, sure, but it's not the same and I would need to add commas, remove additional metadata or comments I might have there.

## What would it look like?

![Simulated experience with TS interface template autocompletion](https://i.imgur.com/Qo3qhJS.gif)

```ts
interfaceConsumer({
     myProperty       : string
    ,anotherProperty  : number
    ,optionalProperty1: number[] // ?
    ,optionalProperty2: number // ?
    ,lastProperty     : string
})
```

- Leading commas and alignment are my personal preferences of course.
- Having types as initial "values" is quite crucial though: it's important to have there something invalid so that user does not leave a value unmodified by accident and having type information inserted could be handy IMO.
- Dropping information about optional arguments doesn't look like a good idea, so I'd insert it back with trailing comment.

## The question

Can I have such interface autocompletion experience now?
Tell me if there are plugins/hotkeys/workflows I'm not aware of that would let me have this experience. 