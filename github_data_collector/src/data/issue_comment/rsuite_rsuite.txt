
### Versions
| package  | version |
| -------- | ------- |
| `react`  | `16.12.0` |
| `rsuite` | `4.2.0` |


### What is the expected behavior?

When an AutoComplete item is selected using the enter key, the `onSelect` handler is passed the selected data item

### What is the current behavior?

When an AutoComplete item is selected using the enter key, the `onSelect` handler is passed `undefined`

### What are the steps to reproduce?

1. Mount an AutoComplete component with some data and an `onSelect` handler
2. Focus the AutoComplete
3. Trigger the menu
4. Use the down arrow to select an item
5. Press the enter key to select to select the targeted item

### Versions
<!-- 
Please tell our you using react version and rsuite version.
请提供你正在使用的 react 版本和 rsuite 版本。
-->
| package  | version |
| -------- | ------- |
| `react`  | `16.10.1` |
| `rsuite` | `4.2.0` |
| `@babel/cli` | `7.5.5` |
| `webpack` | `4.39.0` |
| `babel-preset-rsuite` | `4.0.0` |


### What is the expected behavior?

期望是组件按需加载



### What is the current behavior?

使用babel-preset-rsuite时，组件并没有按需加载
```javascript
// .babelrc.js
presets: [
  ["rsuite", { "style": true }],
  [
    '@babel/preset-env',
    {
      modules: false,
    },
  ],
  '@babel/preset-react',
  '@babel/preset-typescript',
],

// index.js
import { Input, Button } from 'rsuite'; // 不起作用

```
在使用手动引入时

```javascript

// index.jsx
import Input from 'rsuite/lib/Input';
import 'rsuite/lib/Input/styles';
import Button from 'rsuite/lib/Button';
import 'rsuite/lib/Button/styles';
// 有效
```

**以上是使用webpack打包，使用webpack-bundle-analyzer插件分析得出的结果**

### Versions
<!-- 
Please tell our you using react version and rsuite version.
请提供你正在使用的 react 版本和 rsuite 版本。
-->
| package  | version |
| -------- | ------- |
| `react`  | `16.12.0` |
| `rsuite` | `4.2.0` |

### What is the current behavior?

Hello, thanks for this fantastic library.
Some classes have generic names like `.hidden`, which interfere with other projects such as tailwindcss. The markup for `.hidden` is
```
.hidden {
    display: none !important;
}
```
So it's not even possible to override it.

### What is the expected behavior?

It would be great if every class names were prefixed with `rs-` just like most classes.
`.hidden` -> `.@{ns}hidden`

### What are the steps to reproduce?

Try and use media queries with the `.hidden` class:

```
@media only screen and (max-width: 600px) {
  .hidden {
    display: block;
  }
}
```

It won't work.

<!--
Clear and concise reproduction instructions are important for us to be able to triage your issue in a timely manner.
简洁清晰的重现步骤能够帮助我们更迅速地定位问题所在。

Please fork this example, reproduce the problem you are issue.
请 fork 这个例子，复现你的问题。
https://codesandbox.io/s/5vq6zo2z5l
-->


### Any additional comments? (optional)

<!--
e.g.some background/context of how you ran into this bug.
比如：遇到这个 bug 的业务场景、上下文。
-->

Hi,

I want to use Rsuite with some css-in-js library (styled-components), is there a way of theming both with the same theme ?
And have you thought about going to replace less with some css-in-js library ?

Thanks

查看gif

![2020-01-15_10-18-04 (1)](https://user-images.githubusercontent.com/22113151/72399244-88484280-3780-11ea-86c0-a10362905e69.gif)




### What problem does this feature solve?

It's really helpful to have the [spec guides](https://rsuitejs.com/design/default/index.html) available (which I assume is exported from [sketch-measure](https://github.com/utom/sketch-measure)), but it would be even better to have the source file available for mocking up designs. Especially when trying to choose a framework to start with before any front-end implementation. Are there any plans to release this?

Thanks for the awesome library!

### Versions

| package  | version |
| -------- | ------- |
| `react`  | `16.8.4` |
| `rsuite` | `4.2.0` |


### What is the expected behavior?
React Suite adheres to `script-src` CSP without requiring `unsafe-eval`


### What is the current behavior?
React Suite violates `script-src` CSP due to the use of `new Function("return this;")`


### What are the steps to reproduce?
1. Build a project that includes an React Suite component (e.g. Popover)
2. Serve the project with the CSP header `Content-Security-Policy="script-src 'self' cdn.jsdelivr.net;"` (alternatively, the source `index.html` can include the meta tag `<meta http-equiv="Content-Security-Policy" content="script-src 'self' cdn.jsdelivr.net;">`)
3. Watch the world burn. Also, the project won't load due to a CSP violation (in Chrome at least)


### Any additional comments? (optional)
The culprit appears to be the `prefix` util which uses the `global = new Function("return this;")()` pattern to ensure the correct global scope is accessed, regardless of execution environment when checking for a custom CSS prefix.

It looks like this was introduced in the [migration from flow to typescript](https://github.com/rsuite/rsuite/blob/1ff9584e8627b9e85c8c96789646e45ff1852ffb/src/utils/prefix.ts). It would be interesting to know why the global scope coercion needed to be employed, as the previous version of the file didn't contain it (supposedly relying upon webpack's `definePlugin` up until this point).

Finally, thanks for creating the great set of cohesive components that is React Suite and sharing it with the world 💯 
