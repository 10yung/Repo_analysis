This code compiles without issue, where `generatedEvents` is of type `[EKEvent]` and `eventStore` is an `EKEventStore`:

```swift
for thisEvent in generatedEvents {
    let result = Result(try eventStore.save(thisEvent, span: .thisEvent, commit: false))
    print(result)
}
```

However, when I rewrite it as a map (to generate an array of `Result`s):

```swift
let results = generatedEvents.map { thisEvent -> Result<(), AnyError> in
    let result = Result(try eventStore.save(thisEvent, span: .thisEvent, commit: false))
    print(result)
    return result
}
```

I receive the compiler error:

> Call can throw, but it is not marked with 'try' and the error is not handled

However, looking at the `Result` initializer, it looks like the error *is* handled in a `do`/`catch` block.
- references swift 2
- references `materialize`/`dematerialize` which are deprecated
I have a few situations where I need to convert a Result to a common type, and looking at other languages `fold` seems to exist.

Essentially, this:


```swift
public extension Result {

    /// Convert either a success or failure into type `U`
    public func fold<U>(success: (Value) throws -> U, failure: (Error) throws -> U) rethrows -> U {
        switch self {
        case .success(let value): return try success(value)
        case .failure(let error): return try failure(error)
        }
    }
}
```

Good idea / bad idea?
I'm pretty new to using Result, so perhaps this is possible by another concise means.

A variant of `dematerialize` that doesn't `throw` if the error type is `NoError` would be nice to have. I typically avoid `try!` throughout my code, and use SwiftLint to warn against its use. My options here are to use a magic comment to disable the SwiftLint rule, or `do/catch` - neither is particularly appealing. Thoughts?
When using Result in my project, I needed to use `init(attempt:)` in several places but I wanted to use my own wrapper for arbitrary `Error`s. The existing initializer only works with `AnyError`, so I've modified the code to allow using any `Error` which conforms to the `ErrorInitializing` protocol.
Hi, I have another `Result` structure in my code and it's conflicting with this one.
How can I use `Result.Result` for this enum?
I'm getting the error `Reference to generic type 'Result' requires arguments in <...>` as if it thinking it's the enum, not the namespace.
Thanks for the work on this type. I try to replace Swift `throws` with `Result` in one of my projects, but on every higher order function I'm stopped. The project depends on the behavior of `map` and that it's `transform` function can throw. So I wrote a map that can do this with `Result`. Here is my implementation (not that functional):

```swift
extension Sequence {
    
    /// Returns an array containing the results of mapping the given closure
    /// over the sequence's elements.
    ///
    /// - Parameter transform: A mapping closure. `transform` accepts an
    ///   element of this sequence as its parameter and returns a transformed
    ///   value of the same or of a different type wrapped in a `Result`.
    /// - Returns: A `Result` containing an array of the transformed elements of this
    ///   sequence or the error of the first `failure` that occured by applying `transform`.
    func tryMap<T, E>(transform: (Self.Iterator.Element) -> Result<T, E>) -> Result<[T], E> {
        
        var transformedElements = [T]()
        for element in self {
            switch transform(element) {
            case .success(let transformed):
                transformedElements.append(transformed)
            case .failure(let error):
                return .failure(error)
            }
        }
        return .success(transformedElements)
        
    }
    
}
```

So without a `Result` version of all these standard library functions that can throw I doubt that I can use the `Result` type to it's full extend. Is there some library that can help me out here?
MapFilter: Return a array of `V` by applying transform to all elements
of array 'U' and filtering out failure ones

MapM: Return a Result with an array of `V`s if all Results of applying
`transform` are `Success`es or return the error of the first `Failure`

We’ve had a few PRs along the lines of #123, where someone has submitted a scratch for a not-uncommon itch. We’ve been turning them down—mostly—thus far, but maybe we should instead be finding them a better home.

As I understand it, this is the sort of thing that `git`’s [`contrib` dir](https://git.kernel.org/cgit/git/git.git/tree/contrib/README) exists to enable. Maybe we should consider something similar. Some ideas:
- a `Contrib` (sub?)framework encapsulating conveniences and experiments
- a section of the readme linking to gists with these things
- just including them in the framework and being done with it

Not sure how well this would work in practice but hopefully we can come up with something that's better than doing it manually at every call-site.
