For my game, it needs the RTT to a client in order to roll back the hitboxes properly. I noticed this feature is missing or not obvious to get. It is common in many other networking libraries, like in the old UNET transport and also Lidgren.
I followed the NetCode tutorial step-by-step. 
When I build a standalone build, the NetCode systems don't get started because of [DisableAutoCreation].

[Error log](https://hastebin.com/qazojemaja.sql)
(sorry if the issue submission is bad, it's my first time)
I found a small bug in Ghost Collection Authoring Component. It use the project name as a name prefix for the code generation and my project name was "Getting started with NetCode". So yeah the code has space in the class signature and couldn't compile.

I solved it by simply changing the name prefix for "GettingStartedWithNetCode". Like I say, nothing too big but I thought I should mention it.

Maybe a warning, an error or change the space for a _ in generated code.
In the Install-description are written you have to open the Editor from the Version 2019.1.0f1 or later and then you can find the Package in the Package Manager under 'Unity Transport' include the preview option. I had look in the Version 2019.1.0f2 and 2019.3.0b4 of the package-manger and can't find the Package.
Is it possible to edit the JSON File to include the Unity Transport or is it renamed?
Please add so you can specify priority instead or as well to the hierarchical rule that currently exists.

To add more worlds I have currently made a custom bootstrap (extended the supplied one) and with editorscript which clones the netcode, modifies, and adds additional simulation groups for new worlds. ( I had to copy and modify to be able to modify the ClientSimulationSystemGroup or NetworkStreamReceiveSystem to add additional netcode in the client world - so I decided to copy everything and put it under my own namespace)

I want to keep the netcode in my project to be able to check for updates and simply use my script to redo my generation of worlds, but the ICustomBootstrap crashes since it has two of them that are not in hierarchy.

I would ask to add either some encapsulation of a define, or another attribute to add that can have a priority.
This [tutorial](https://docs.unity3d.com/Packages/com.unity.netcode@0.0/manual/getting-started.html) states: 

> Then, in the Inspector, add the Ghost Authoring Component to the Prefab. In this component, select Update Component List to update the list of components.

However, pressing this button crashes the editor immediately, with no errors. I have replicated this on two separate Macs. 

Pressing the 'Generate code' button beforehand seems to resolve the issue. It would be helpful if the tutorial reflected this. 
Trying to use the new terrain tools (version 2.0.2) in this project and running into this issue. 

I assume that it will be fixed in the future as terrain is outside the scope of the current feature set of NetCode.

```
ArgumentException: An item with the same key has already been added. Key: UnityEditor.Experimental.TerrainAPI.PaintHeightTool
System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) (at <437ba245d8404784b9fbab9b439ac908>:0)
System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) (at <437ba245d8404784b9fbab9b439ac908>:0)
Unity.NetCode.Editor.GhostAuthoringComponentEditor.GenerateGhost (Unity.NetCode.GhostAuthoringComponent ghostInfo) (at Library/PackageCache/com.unity.netcode@0.0.4-preview.0/Editor/GhostAuthoringComponentEditor.cs:443)
Unity.NetCode.Editor.GhostAuthoringComponentEditor.OnInspectorGUI () (at Library/PackageCache/com.unity.netcode@0.0.4-preview.0/Editor/GhostAuthoringComponentEditor.cs:272)
UnityEditor.UIElements.InspectorElement+<>c__DisplayClass55_0.<CreateIMGUIInspectorFromEditor>b__0 () (at /Users/builduser/buildslave/unity/build/Editor/Mono/Inspector/InspectorElement.cs:521)
UnityEngine.GUIUtility:ProcessEvent(Int32, IntPtr) (at /Users/builduser/buildslave/unity/build/Modules/IMGUI/GUIUtility.cs:187)
```

I am trying to write LAN server discovery code to use for creating a mobile "controller" app
for a Desktop unity project.
ReliableSequencedPipelineStage.Send method is leak,

needUpdate = true   -> Memory Leak
needUpdate = false  -> Not Memory Leak

but, if needUpdate is false, it ssem not to work Reliable UDP. I can't fix the Pipeline ...
For users to seriously consider and adopt the new multiplayer stack, better documentation is needed.

Having a minimal example and ping/pong isn't enough, and the full FPSSample project is too complex.

Documentation should be written for:
- Common example use-cases (player movement, shooting)
- API documentation (what features are available? how do I use them?)
- Getting started (more than just minimal example)
- UNet transition (concepts, example migration for simple project)

The current Unity multiplayer landscape is hard to navigate as an outsider. UNet is deprecated but it's not clear that this replaces it since it is missing so much documentation and doesn't look like is being used at scale yet.

Additionally, issues and pull request should be addressed faster. Support is important for a core project like this