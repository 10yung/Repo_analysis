There is an excel workbook contains date value 43318.1247685135 or  43609.9708065236 , displayed as 2018/8/6 2:59 and 2019/5/24 23:17 in the cells.  Try to read this workbook via xlwings v0.17.0 and pywin32 v227 , using following code:

```
import xlwings as xw
ws = xw.Book('d:/demo1.xlsx').sheets[0]
print( ws.range('b2:b3').value )
```
Then got such error prompts:
```

> Traceback (most recent call last):
>   File "D:/pycharm/test/p/mypackage/e.py", line 3, in <module>
>     print( ws.range('b2:b3').value )
>   File "D:\pycharm\b\venv\lib\site-packages\xlwings\main.py", line 1543, in value
>     return conversion.read(self, None, self._options)
>   File "D:\pycharm\b\venv\lib\site-packages\xlwings\conversion\__init__.py", line 26, in read
>     pipeline(ctx)
>   File "D:\pycharm\b\venv\lib\site-packages\xlwings\conversion\framework.py", line 63, in __call__
>     stage(*args, **kwargs)
>   File "D:\pycharm\b\venv\lib\site-packages\xlwings\conversion\standard.py", line 68, in __call__
>     c.value = c.range.raw_value
>   File "D:\pycharm\b\venv\lib\site-packages\xlwings\main.py", line 1164, in raw_value
>     return self.impl.raw_value
>   File "D:\pycharm\b\venv\lib\site-packages\xlwings\_xlwindows.py", line 725, in raw_value
>     return self.xl.Value
>   File "D:\pycharm\b\venv\lib\site-packages\xlwings\_xlwindows.py", line 116, in __getattr__
>     v = getattr(self._inner, item)
>   File "D:\pycharm\b\venv\lib\site-packages\win32com\client\dynamic.py", line 516, in __getattr__
>     ret = self._oleobj_.Invoke(retEntry.dispid,0,invoke_type,1)
> ValueError: microsecond must be in 0..999999
> 
```

Solution: Down grade pywin to v225 or lower version, there is no problem with these values.

Have tested the case on four computers, all got same conclusion.

Error in pywin v227 :
![227](https://user-images.githubusercontent.com/28107350/72496683-583c8600-37f8-11ea-80c7-6de95d3f3e36.PNG)


OK in pywin v225:
![1](https://user-images.githubusercontent.com/28107350/72496580-03007480-37f8-11ea-83d9-d7a2ed1cc09a.PNG)

This is a feature request (also open to helping contribute) to add touch input to the pywin32 API.
It appears there is an equivalent input method to [mouse_event](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mouse_event), [InjectTouchInput](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-injecttouchinput) which would allow pywin32 to emulate touch. This would enable actions like auto-open of the on-screen keyboard on touch.
Services created against pywin32 release 227 are broken in virtualenv under python 3.8.1's new DLL security policy (https://docs.python.org/3.8/library/os.html#os.add_dll_directory). It looks similar to the issue addressed in https://github.com/mhammond/pywin32/issues/1439. Any attempt to launch services report unable to find *pywintypes38.dll*.

So far, the best solution we've found is to copy the *.dlls from the site-packages `pywin32_system` folder into the site-packages `win32` folder.
Hi,

Can you add support to ARM64 architecture?

I tried to compile it but it failed for me with the below message:
LINK : fatal error LNK1355: invalid base address 0x1E7A0000; ARM64 image cannot have base address below 4GB

Thanks,
Sofian.
There's an implicit relative import in adsi's __init__.py that makes that subpackage unimportable on Python 3.

For reasons that are non-obvious, the 2to3 build step isn't always fixing this automatically. The Py3k wheels for 225 are correctly rewritten to use an explicit relative import, but 224, 226 and 227 have unchanged source code and fall over.

As pywin32 no long supports Python 2.4, it should be fine to just do the same fix in the source code itself.
I got the following warning running pywin32 on python 3.8:

```
C:\Users\user\AppData\Local\Programs\Python\Python38\lib\site-packages\win32com\client\makepy.py:369: SyntaxWarning: "is not" with a literal. Did you mean "!="?
  if path is not '' and not os.path.exists(path):
```

It seems it should be:
`if path != '' and not os.path.exists(path):`
Today I updated some packages in my Anaconda (Python 3.7.3, 64-bit, Windows 10) environment and some things broke in my application.

### Version of Python and pywin32

While trying to find the problem, I noticed that the pywin32 package had been updated in the conda repositories from version 223 to 227. While inspecting further, I installed version 225 from conda-forge and the problem persisted. It only got back to normal when downgrading again to version 223 from the main repository.

### Steps to reproduce the problem:

The problem occurs when using SAP's GUI Scripting API to automate the UI. In particular, the first problem I met was when marking a checkbox.

With the SAP Logon window open, run:
```python
from win32com.client import Dispatch, GetObject
# Session setup

objRotSAPGUI = GetObject("SAPGUI")
application = objRotSAPGUI.GetScriptingEngine
session = application.Connections[0].Sessions[0]

session.StartTransaction("IW29")
session.findById("wnd[0]/usr/chkDY_OFN").Selected = True  # This fails!
```

### Expected behavior and actual behavior:

The last line was running without problems before the update. Now it errs with the following traceback:
```python-traceback
Traceback (most recent call last):

  File "<ipython-input-15-6aba7caa6de9>", line 1, in <module>
    session.findById("wnd[0]/usr/chkDY_OFN").Selected = True  # Aberto

  File "C:\Users\u5fs\papps\anaconda3\lib\site-packages\win32com\client\dynamic.py", line 559, in __setattr__
    self._oleobj_.Invoke(entry.dispid, 0, invoke_type, 0, value)

com_error: (-2147352562, 'Número de parâmetros inválido.', None, None)
```
My system is in Portuguese. The error message roughly translates to "Invalid number of parameters".

Further tests indicate that:

* I can read the property fine:

```python
>>> session.findById("wnd[0]/usr/chkDY_OFN").Selected
True
```

* I can update the parameter if I use lowercase:

```python
>>> session.findById("wnd[0]/usr/chkDY_OFN").selected = True  # No error
```

The API documentation I was using states that the property name should start with upper case, though I know some problems like this are relatively common:

![image](https://user-images.githubusercontent.com/7624997/71493260-0f5a6880-281c-11ea-8d7c-c01a5894a6c2.png)
Unfortunately, [some newer online documentation](https://wiki.scn.sap.com/wiki/display/Img/Scripting+API#ScriptingAPI-GuiToggleControl) also suggests that the property name may start with lowercase.

So, is this a regression in pywin32 or is it something that was flexible before but is now more strict (in which case I might have to change all my code to conform)?

Hello,

First of all, thank you very much for this project: Very useful.

It seems these following **_InfoLevel_** are not implemented in **_win32service.QueryServiceConfig2_**:
- SERVICE_CONFIG_TRIGGER_INFO
- SERVICE_CONFIG_LAUNCH_PROTECTED
- SERVICE_CONFIG_PREFERRED_NODE

I suppose there is the same problem for _win32service.QueryServiceConfig2_.

Do you know if these features will be implemented soon (at least partially)?

I'm using the version 227 of pywin32.

I have seen this issue open here too:
https://stackoverflow.com/questions/46916726/python-win32service-getting-triggered-startup-information-for-service/47264647

More details:
[https://docs.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-queryserviceconfig2a](https://docs.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-queryserviceconfig2a)
Hi!
I pip-installed pywin32 on my machine, and everything works fine. I tried it in a virtualenv, and I get this error when importing pywintypes:
`ModuleNotFoundError: No module named 'pywintypes'`

I should also note that `pip show pywin32` shows it is installed (also inside the virtualenv), and the dll does exist inside `...\myvenv\Lib\site-packages\pywin32-227-py3.8-win-amd64.egg\pywin32_system32\pywintypes38.dll`

Python 3.8.0 64-bit on Windows 10 x64
pywin32 227
virtualenv 16.7.9

Possibly related: https://github.com/mhammond/pywin32/issues/1327 (though it seems a different issue to me)

Thanks!!
We are developing a Python automation on top of our company’s software which supplies some COM Interfaces.

When trying to send a COM Object to some functions, an “address access” error is raised in the server because the pointer parameter to the object’s interface is being sent with an offset. This problem only happens when using pythoncom. I think this may be a PythonCOM restriction/bug because if these same problematic examples are replicated in VB, they run without any problem.

My guess is that this error is being generated in the parameter conversion mechanism of pythoncom (MakeVariantToObj), where the reference pointer to the proper interface of the expected object parameter is lost, and somehow replaced by one of its inherited IDispatch or IUnknown causing the pointer to be off by an offset. 

For example, running the following code from Python:
`App.RootNode.CreateStringNode("TestName", App.RootNode, 0, 0, 0)`

Where:
1.	App is a COM Object for the main application returned by win32com.client.Dispatch.
2.	RootNode is a property of App, which returns a DataNode COM object.
3.	CreateStringNode is a DataNode method with the following header: 
    `function CreateStringNode(const Name: WideString; const Owner: LWDataNode; XDim: Integer; YDim: Integer; Attributes: LWDataNodeAttributes): LWDataNode; safecall;`
4.	Owner parameter is declared as VT_UNKNOWN in the makepy generated InvokeTypes for CreateStringNode.

Has the following results when debugged in the server:

1. first Get_RootNode returns: TLWIDataNode($D4D4530) as ILWDataNode
2. second Get_RootNode returns: TLWIDataNode($D4D4578) as ILWDataNode
3. CreateStringNode is called on: TLWIDataNode($D4D4530) as ILWDataNode
4. Owner param in CreateStringNode is: TLWIDataNode($D4D4568) as ILWDataNode

As you can see, the pointer sent as parameter has an offset of 0x10.

Not all functions which receive a COM Object as parameter fails. The difference we found between problematic and non-problematic functions is how the parameter is being defined. Along the lines of the previous example, non-problematic functions which also receive a DataNode as parameter define it as LWDataNode*. While problematic functions define the parameter as LWDataNode only, no pointer.

If this Issue evolves, we can work on a Demo server, which replicates this behavior so you can run proper tests. Also, I can post more examples of problematic and non-problematic functions.

Windows Version: Windows 10 - 1809
Python Version: 3.7.2
pywin32 Version: 225

