1.

I created new Voter in _src\Menu\Voter_ directory. I was surprised that I didn't have to register that voter as a service in services.yaml. Voter just started to work without any other action from my side. Is it normal behaviour because I used _menu_ directory name which is the directory of the bundle? 

2.

My Voter was added before default one to the matcher's voters array. I would like to change the order of voters that my voter would be the last one. Is it possible? If not can I (I mean is it good solution) just create new class and extends _Knp\Menu\Matcher\Matcher_ class to overwrite constructor and reverse order of already added voters?
This Pull Request introduce a new feature to allow specifying the priority of providers during the registration of a new provider when this one has been tagged. (Similar has voters)

So, a developer will now be able to write something like:
```yaml
services:
  app.menu_provider:
        class: AppBundle\Provider\CustomMenuProvider
        arguments:
          - @knp_menu.factory
        tags:
          - { name: knp_menu.provider, priority: 20 }
```
Hi. 
I have problem with integration custom knpmenu template in Symfony 4.2. I still get this message: 
**Attempted to call an undefined method named "macro_attributes" of class "__TwigTemplate_46b504049d303cbba60b9082144af113b977223be17dc1e45f9421ff99d7f8d3".**

Can anybody help me? 

This is my template: 
```
{% extends 'knp_menu.html.twig' %}
{% block item %}
    {% import _self as knpmenu %}
    {% if item.displayed %}
        {%- set attributes = item.attributes %}
        {%- set is_group = attributes.group|default(false) %}
        {%- set is_header = attributes.header|default(false) %}
        {%- set divider_prepend = attributes.divider_prepend|default(false) %}
        {%- set divider_append = attributes.divider_append|default(false) %}
        {%- set class = is_header ? 'header' : 'item' %}

        {# hide empty groups #}
        {%- if not (is_group and item.hasChildren == false) -%}
            {# unset bootstrap specific attributes #}
            {%- set attributes = attributes|merge({'group': null, 'header': null, 'divider_prepend': null, 'divider_append': null, 'class': class }) %}

            {#{%- if divider_prepend %}#}
                {#{{ block('dividerElement') }}#}
            {#{%- endif %}#}

            {# building the class of the item #}
            {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
            {%- if matcher.isCurrent(item) %}
                {%- set classes = classes|merge([options.currentClass]) %}
            {%- elseif matcher.isAncestor(item, options.depth) %}
                {%- set classes = classes|merge([options.ancestorClass]) %}
            {%- endif %}
            {%- if item.actsLikeFirst %}
                {%- set classes = classes|merge([options.firstClass]) %}
            {%- endif %}
            {%- if item.actsLikeLast %}
                {%- set classes = classes|merge([options.lastClass]) %}
            {%- endif %}

            {# building the class of the children #}
            {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
            {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}

            {# adding classes for group #}
            {%- if is_group %}
                {#{%- set classes = classes|merge([]) %}#}
                {%- set childrenClasses = childrenClasses|merge(['nav nav-second-level']) %}
            {%- endif %}

            {# putting classes together #}
            {%- if classes is not empty %}
                {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
            {%- endif %}
            {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}

            {# displaying the item #}
            <li{{ knpmenu.attributes(attributes) }}>
                {%- if is_group %}
                    {{ block('groupElement') }}
                {%- elseif is_header %}
                    {{ block('headerElement') }}
                {%- elseif item.uri is not empty and (not item.current or options.currentAsLink) %}
                    {{ block('linkElement') }}
                {%- else %}
                    {{ block('spanElement') }}
                {%- endif %}
                {# render the list of children#}
                {{ block('list') }}
            </li>

            {%- if divider_append %}
                {{ block('dividerElement') }}
            {%- endif %}
        {%- endif %}
    {% endif %}
{% endblock %}

{% block dividerElement %}
    {% if item.level == 1 %}
        <li class="divider-vertical"></li>
    {% else %}
        <li class="divider"></li>
    {% endif %}
{% endblock %}

{% block linkElement %}
    <a href="{{ item.uri }}"{{ knpmenu.attributes(item.linkAttributes) }}>
        {% if item.extra('icon') is not empty %}
            <i class="{{ item.extra('icon') }} fa-fw"></i>
        {% endif %}
        <span> {{ block('label') }}</span>
    </a>
{% endblock %}

{% block spanElement %}
    <span {{ knpmenu.attributes(item.labelAttributes) }}>
        {% if item.extra('icon') is not empty %}
            <i class="{{ item.extra('icon') }} fa-fw"></i>
        {% endif %}
        {{ block('label') }}
    </span>
{% endblock %}

{% block headerElement %}
    <li class="nav-header">
        <div class="dropdown profile-element">
            <span {{ knpmenu.attributes(item.labelAttributes) }}>
                {#{% if item.extra('icon') is not empty %}#}
                    {#<i class="{{ item.extra('icon') }} fa-fw"></i>#}
                {#{% endif %}#}
                {{ block('label') }}
            </span>
        </div>
    </li>
{% endblock %}

{% block groupElement %}
    {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}
    {%- set attributes = item.linkAttributes %}
    {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}

    <a href="#"{{ knpmenu.attributes(attributes) }}>
        {% if item.extra('icon') is not empty %}
            <i class="{{ item.extra('icon') }} fa-fw"></i>
        {% endif %}
        <span class="nav-label">{{ block('label') }}</span> <span class="fa arrow"></span></a>
{% endblock %}

{% block label %}{{ item.label|trans }}{% endblock %}
```

I'm having a really hard time creating a simple bootstrap navbar with a dropdown.  

There are LOTS of webpages that describe how to do it, but I haven't had any luck with any solution, except to use MopaBootstrapBundle, which seems like overkill for just a navbar.

In the same way that Symfony forms has a few built-in options (bootstrap_3_horizontal, etc.), I basically want to simply set the twig theme and then configure the top navbar, side navbar, etc.

Part of the confusion is how many options there are.  Many of them examples on the web add the class and attributes in the menu creation, but that seems like a very bad practice, to lock in that a menu item is of the navbar-item class.  That'd make more sense when rendering the menu (from the twig template).

Regardless, despite hours of hacking I'm unable to get a simple bootstrap navbar or sidebar menu working.  Can anyone point me to a working example of a navbar with dropdown that includes  a MenuBuilder class, the html/twig that renders it?  


HI,

I'm using JMSTranslationBundle (1.4.3)  on a Symfony 3.4 project to extract and manage my translation, but it seems that it does not extract the menu labels from KNPMenu (2.2.1) when set up as a service... Can you help please?

Here is my JMS config 

```
jms_translation:
    configs:
        app:
            dirs: ["%kernel.root_dir%/Resources/views", "%kernel.root_dir%/../src"]
            output_dir: "%kernel.root_dir%/Resources/translations"
            excluded_names: ["*TestCase.php", "*Test.php"]
            excluded_dirs: [cache, data, logs]
```

And my Menu.php service

```
<?php

namespace AppBundle\Service;

use Knp\Menu\FactoryInterface;

/**
 * Class Menu
 * @package AppBundle\Menu
 */
class Menu
{
    /**
     * @var FactoryInterface
     */
    private $factory;

    /**
     * Menu constructor.
     * @param FactoryInterface $factory
     */
    public function __construct(FactoryInterface $factory)
    {
        $this->factory = $factory;
    }

    /**
     * @return \Knp\Menu\ItemInterface
     * @throws \InvalidArgumentException
     */
    public function createMainMenu()
    {
        $menu = $this->factory->createItem('root');
        $menu->setChildrenAttribute('class', 'navbar-nav ml-auto');

        $menu->addChild('menu.home', [
            'route' => 'index'
        ])->setAttribute('class', 'nav-item')->setExtra('translation_domain', 'menu');
        $menu['menu.home']->setLinkAttribute('class', 'nav-link');

        $menu->addChild('menu.projects', [
            'route' => 'projects',
            'extras' => [
                'routes' => [
                    [
                        'route' => 'project'
                    ],
                ],
            ],
        ])->setAttribute('class', 'nav-item')->setExtra('translation_domain', 'menu');
        $menu['menu.projects']->setLinkAttribute('class', 'nav-link');

        $menu->addChild('menu.contact', [
            'route' => 'contact'
        ])->setAttribute('class', 'nav-item')->setExtra('translation_domain', 'menu');
        $menu['menu.contact']->setLinkAttribute('class', 'nav-link');

        return $menu;
    }
}

```

I cannot get the keys for `menu.home`, `menu.projects`, `menu.contact`
This interface allows defining the menu names from the class itself instead of having to define them in the service definition. This is similar to the event subscriber vs event listener system in Symfony.
The benefit of this interface is that the service definition can rely on autoconfiguration to register everything, which fits very well with the Flex way.

TODOs:
- [ ] write tests
Hello,

I installed knp_menu_bundle as described in the doc.

I use it as service as it's needed in SF4.

I `use ContainerAwareTrait;`

But if i try to call container as described in the doc for geting entityManager, i get :
```PHP
$em = $this->container->get('doctrine')->getManager();
// returns : Call to a member function get() on null
```

Did i forgot something or is ContainerAwareTrait incompatible with SF4 ?
Solution for issue #382 
| Q                | A
| ---------------- | -----
| Bug report?      | no
| Feature request? | yes
| BC Break report? | no

It would be nice to be able to disable registering of the default RouteVoter provided by knp.

Example situation is when one has really complex menu structure and performance optimized voter for it, but default RouteVoter is always called for every item, when user voter returns null, because for some reason can not decide about given item (another user voter exists e.g).

Fix [deprecation message](https://github.com/symfony/symfony/blob/020664e1efbf8a81dbcc0f7b9dcbfa9ac58c0ed7/src/Symfony/Component/HttpKernel/Kernel.php#L237) introduced in Symfony 3.4

My attempt to push a new branch to issue a new PR was denied and so here might be the tiny change required.

```
--- a/src/Provider/BuilderAliasProvider.php
+++ b/src/Provider/BuilderAliasProvider.php
@@ -101,7 +101,7 @@ class BuilderAliasProvider implements MenuProviderInterface
             $logs = array();
             $bundles = array();
 
-            $allBundles = $this->kernel->getBundle($bundleName, false);
+            $allBundles = $this->kernel->getBundle($bundleName);
 
             // In Symfony 4, bundle inheritance is gone, so there is no way to get an array anymore.

```