<!--- Provide a general summary of the issue in the Title above -->

## Current Behavior
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->
Using -IncludePesterOutput outputs both the Pester output and the modules's default output.

## Expected Behavior
<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->
In many cases, I only want the Pester output.
## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->
Add a parameter to exclude the module's output:
Add a -Quiet param
Add a -NoDefaultOutput param
Add a -IncludePesterOutputExclusive param
etc.
## Steps to Reproduce (for bugs)
<!--- Provide a link to a live example, or an unambiguous set of steps to -->
<!--- reproduce this bug. Include code to reproduce, if relevant -->
1.
2.
3.
4.

## Context
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->

## Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->
* Module version used:
* Operating System and PowerShell version:
So is the intended use of this to have automated tests of automated configuration changes? So say you make some changes to your DSC or whatever configuration and check it in. System would then spin up some nodes with new DSC changes and use OVF to test those changes. Is something similar to that the scenario where I would use this or am I getting this wrong. Thanks.

The `Get-TestFromScript` function uses the method call `SafeGetValue()` against `[AST]` types. This method does not appear to be available in PSv4 consoles. I also don't see the need to call this method for the logic being performed.

## Current Behavior
Method invocation failed because [System.Management.Automation.Language.ArrayLiteralAst] does not contain a method named 'SafeGetValue'.

## Possible Solution
Extract tags with `$tagElements.Elements.Value`, instead of `$tagElements.SafeGetValue()`
https://github.com/PowerShell/Operation-Validation-Framework/blob/0bc93ef8582a8bf66a8899f9295d30aa3d921f68/OperationValidation/Private/Get-TestFromScript.ps1#L43
https://github.com/PowerShell/Operation-Validation-Framework/blob/0bc93ef8582a8bf66a8899f9295d30aa3d921f68/OperationValidation/Private/Get-TestFromScript.ps1#L48

## Steps to Reproduce (for bugs)
1. Build an OVF module with a Simple or Comprehensive test .ps1
1. Add a tag or multiple tags to the Describe's `-Tag` parameter
2. Make the module discoverable by PSModulePath
2. In a Powershell v4 console, execute the following command:
`Get-OperationValidation`
### Output:
``` Powershell
Method invocation failed because [System.Management.Automation.Language.ArrayLiteralAst] does not contain a method
named 'SafeGetValue'.
At C:\Program Files\WindowsPowerShell\Modules\OperationValidation\Private\Get-TestFromScript.ps1:48 char:21
+                     $item.Tags = $tagElements.SafeGetValue()
+                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : MethodNotFound
```

## Context
Attempting to write and use OVF modules in my server environment, and do not currently have PSv5.1 installed.

## Your Environment
* Module version used: 1.1.0
* Operating System and PowerShell version: Windows Server 2008 R2 Datacenter

<!--- Provide a general summary of the issue in the Title above -->

## Current Behavior
Get-OperationValidation -path . checks any child directories in the current directory for the presence of a Diagnostics directory therein.
Get-OperationValidation -path .\MyModule does NOT seem to check in MyModule for the presence of a Diagnostics directory.


## Expected Behavior
It seems more consistent with PowerShell to accept being pointed to a specific Module directory (.\MyModule), and return the info for the tests found within .\MyModule\Diagnostics.



## Context
Developing tests in modules not in the $PSModulePath.

## Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->
* Module version used:
2.2.1
* Operating System and PowerShell version:
Win10 1709
PowerShell 5.1

I get that having logical comparisons in typical unit tests isn't a good idea,

ie a totally crappy example:

```
if ($name.StartsWith("blahblahblah")) {
    it "something" {
        $name | should match "blah*"
    }
}
else {
	it "blah" {
		$name | should match "foo*"
	}
}
```

which I could also do with a single regex ie: blah.*|foo.* - however this would allow for wrong 'combinations'

but I have specific whole comprehensive tests that I dont want to run in a cloud based test but do in a on prem test and I also have the odd test where I expect different results based on the name of the machine. I also want to use the same set (module) of tests..


Thoughts on how to do this?

- conditional logical
- conditional logic by means of a function to do the verification which has its own tests?
- Name the tests and then only execute tests with a specific naming convention?

Thanks

David
The Readme states about `Get-OperationValidation` to use `c:\temp\Modules\AddNumbers` this hides the fact, that the Path _must be_ part of a module search path. That should at least be mentioned. 
Or consider allowing a "LiteralPath" instead of the "ModulePath"
The following results in no output:

`Invoke-OperationValidation -ModuleName tervisactivedirectory -IncludePesterOutput`

File Simple.tests.ps1 in TervisActiveDirectory\Diagnostics\Simple
```
$ADUsers = Get-ADUser -Filter * -SearchBase "OU=Departments,DC=tervis,DC=prv" -Properties HomeDirectory, Manager, EmployeeID

foreach ($ADUser in $ADUsers) {
    Describe "Active Directory User $($ADUser.Name) ($($ADUser.samaccountname))" {
        It "Has an employee ID" {
            $ADUSer.EmployeeID | Should Not BeNullOrEmpty
        }

        It "Has a manager set" {
            $ADUSer.Manager | Should Not BeNullOrEmpty
        }
    }
}
```

Running directly Invoke-Pester without using OVF works and results in the output of the pester tests with the Describe statement dynamically including the name of the AD user being tested.

I think the problem is with line [375 of OperationValidation.psm1](https://github.com/PowerShell/Operation-Validation-Framework/blob/master/Modules/OperationValidation/OperationValidation.psm1#L375):
`$testResult = Invoke-pester -Path $ti.FilePath -TestName $tName -quiet:$quiet -PassThru`

The $tName variable contains "Active Directory User $($ADUser.Name) ($($ADUser.samaccountname))" and pester isn't able to find and run that named test.

Trying to run a Operation Validation Test on a freshly installed Ubuntu 16.04.1 Server with Powershell version v6.0.0-alpha.14 installed using the instructions from here: https://github.com/PowerShell/PowerShell/blob/master/docs/installation/linux.md#ubuntu-1604
 causes the following error:
ParameterValidationArgumentException: EmptyStringNotAllowed: New-OperationValidationResult
The example is now to search for Notepad, which only exists on Windows machines.

Is there an example that is cross-platform?
Hello!

I'm a novice when it comes to this stuff so let me get that out of the way up front.

I understand the concept of testing code. I understand how Pester achieves that for PowerShell. I understand what a PowerShell Module is (admittedly I might not understand the full scope of modules). I think I understand what OVF is supposed to do. What I _don't_ understand is why the example is the way it is.

In the example there's a module called AddNumbers. Yet, the Pester tests created to run against that module are things like firewall rules for TCP ports. I don't see how those have anything to do with each other.

If I wanted to validate the operation of my network (e.g. check that a service on my Exchange server was running) what kind of module would I be making? I feel like I would just skip straight to the Pester tests and run those. What kind of function would be in a module that I would write a Pester test against to achieve my goal of validating the operation of Exchange?

Perhaps a better example would be a module that was _actually_ related to testing TCP ports and not adding numbers??
