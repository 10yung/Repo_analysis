我的排序需求是这样的：文档中有个热度值字段，如果两个文档之间的评分在20%之内，则按热度值排序，否则按评分排序，这样的排序如何实现？
select *  from account A JOIN department D On A.deptno=D.deptno WHERE D.dname IN ('accounting','sales','research','management') AND A.lastname IN ('reddy') AND D.deptno IN (select deptno from department where deptno IN (select age from dog where age=10))

{
  "size": 0, 
  "query": {
    "nested": {
      "path": "car",
      "query": {
        "regexp":{
          "car.type": {
				"value": "比亚迪"
          }
        }
      }
    }
  }
  , "aggs": {
    "nested":{
      "nested": {
        "path": "car"
      },
      "aggs": {
        "filter_term": {
          "filter": {
              "regexp":{
                "car.type": {
      				"value": "比亚迪"
              }
            }
          },
           "aggs": {
            "fun":{
                "terms": {
                  "field": "car.type",
                  "size": 3
              }
            }
          }
        }
      }
    }
  }
}

请问有提供直接把sql转成对应dsl的方法吗，类似toDSL(string sql)。

我查看issues中有提到这种方法
`Settings settings = Settings.builder().put("client.transport.sniff", false).build();
TransportClient client = new PreBuiltTransportClient(settings)
				.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("localhost"), 9300));
SearchDao searchDao = new SearchDao(client);
SqlElasticRequestBuilder requestBuilder = searchDao.explain(sql).explain();`


但是需要先连接es服务器，有没有不用连接服务器的方式呢？
![image](https://user-images.githubusercontent.com/20435011/71356402-15064300-25bd-11ea-8964-e0d25696fbab.png)
SELECT  sheetType FROM (SELECT id,sheetType  from  bjctsheet_index_19_11)执行时报错
执行explain时报错，search是正常的
![image](https://user-images.githubusercontent.com/20435011/71060070-797d6880-219f-11ea-9453-815c03cfd935.png)

6.2.4 支持对nested 类型字段中的熟悉进行查询么？
I use scroll id like this
`SELECT  /*! USE_SCROLL("DnF1ZXJ5VGhlbkZldGNo8AEAAAAAAEYDbBY2eC1INW9YZFEtMllQYW5uTExNQjlnAAAAAAA3Ue0WTDJ3enNfdWhRVENwVU40TXVhWmdIQQAAAAAARgNuFjZ4LUg1b1hkUS0yWVBhbm5MTE1COWcAAAAAAEYDbRY2eC1INW9YZFEtMllQYW5uTExNQjlnAAAAAAA8f6YWVTVDWmpCU1ZRdTJkRkRlMTlNMHB5dwAAAAAAMWKDFl81cEJ2dWFKUlBDVE1kbHNjYnBCR2cAAAAAADF0eBZFSEJEZDlaa1JUU3ZXcTM4MS1HbUVRAAAAAAA42OoWUlhlSzJ3bDVTaXVGNEY0ZlpvZDB4ZwAAAAAAMXR3FkVIQkRkOVprUlRTdldxMzgxLUdtRVEAAAAAAKMs",30000)*/ * FROM xx`
return err  
error": {
    "root_cause": [
      {
        "type": "number_format_exception",
        "reason": "For input string: \"DnF1ZXJ5VGhlbkZldGNo8AEAAAAAAEYCnxY2eC1INW9YZFEtMllQYW5uTExNQjlnAAAAAAA3UUMWTDJ3enNfdWhRVENwVU40TXVhWmdIQQAAAAAARgKeFjZ4LUg1b1hkUS0yWVBhbm5MTE1COWcAAAAAAEYCoBY2eC1INW9YZFEtMllQYW5uTExNQjlnAAAAAAA8fu4WVTVDWmpCU1ZRdTJkRkRlMTlNMHB5dwAAAAAAMWH4Fl81cEJ2dWFKUlBDVE1kbHNjYnBCR2cAAAAAADFz4xZFSEJEZDlaa1JUU3ZXcTM4MS1HbUVRAAAAAAA42EUWUlhlSzJ3bDVTaXVGNEY0ZlpvZDB4ZwAAAAAAMXPiFkVIQkRkOVprUlRTdldxMzgxLUdtRVEAAAAAAKMraxYyRko3UFRFcFJtSzZzNXhDWUN2WXl3AAAAAAA3UUYWTDJ3enNfdWhRVENwVU40TXVhWmdIQQAAAAAAMWH6Fl81cEJ2dWFKUlBDVE1kbHNjYnBCR2cAAAAAADFz5hZFSEJEZDlaa1JUU3ZXcTM4MS1HbUVRAAAAAAA3UUUWTDJ3enNfdWhRVENwVU40TXVhWmdIQQAAAAAAN1FHFkwyd3pzX3VoUVRDcFVONE11YVpnSEEAAAAAADFz5BZFSEJEZDlaa1JUU3ZXcTM4MS1HbUVRAAAAAAAxc-UWRUhCRGQ5WmtSVFN2V3EzODEtR21FUQAAAAAAN1FEFkwyd3pzX3VoUVRDcFVONE11YVpnSEEAAAAAADFh-RZfNXBCdnVhSlJQQ1RNZGxzY2JwQkdnAAAAAAA32k8WSVJHMklFUl9UQVdQVzc1NnZtT1ZyZwAAAAAAoytsFjJGSjdQVEVwUm1LNnM1eENZQ3ZZeXcAAAAAADfaUBZJUkcySUVSX1RBV1BXNzU2dm1PVnJnAAAAAAA32k4WSVJHMklFUl9UQVdQVzc1NnZtT1ZyZwAAAAAAN9peFklSRzJJRVJfVEFXUFc3NTZ2bU9WcmcAAAAAADdRSBZMMnd6c191aFFUQ3BVTjRNdWFaZ0hBAAAAAABGAqEWNngtSDVvWGRRLTJZUGFubkxMTUI5ZwAAAAAAPH7vFlU1Q1pqQlNWUXUyZEZEZTE5TTBweXcAAAAAADfaUxZJUkcySUVSX1RBV1BXNzU2dm1PVnJnAAAAAAAxc-