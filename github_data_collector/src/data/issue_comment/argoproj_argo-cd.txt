Checklist:

* [X] I've searched in the docs and FAQ for my answer: http://bit.ly/argocd-faq.
* [X] I've included steps to reproduce the bug.
* [X] I've pasted the output of `argocd version`.

**Describe the bug**
When using Argo-CD to create subscriptions to operators from operator-hub, Argo only tracks the objects used for the subscription (i.e. a subscription, operatorgroup and then tracks these objects (and the installPlan that the subscription creates). However it doesn't detect any of the other objects that are also generated (clusterserviceversion, deployments, pods, etc.). What logic determines what objects are picked up? Are there labels that can be applied to these generated objects via a hook to have them included?

A clear and concise description of what the bug is.

I would like to see all objects that are generated by my application so that I have a full picture of my deployment

**To Reproduce**

Apply the following configuration in a cluster running Operator Lifecycle Manager:

**operator-group**:
```
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: my-operatorgroup
  namespace: my-namespace
spec:
  targetNamespaces:
  - my-namespace
```

**subscription**:
```
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  annotations:
    argocd.argoproj.io/sync-options: Validate=false
  name: opendatahub
  namespace: my-namespace
spec:
  channel: alpha
  installPlanApproval: Automatic
  name: opendatahub-operator
  source: community-operators
  sourceNamespace: openshift-marketplace
```

Once this has been applied, you'll notice that the operatorgroup and subscription are tracked, as well as a generated installPlan. However no other objects (i.e. the operator deployment or pods) are detected/tracked.

**Expected behavior**

I would like to see all objects that are generated by my application.

**Screenshots**
N/A

**Version**

```shell
argocd: v1.3.6+89be1c9
  BuildDate: 2019-12-10T22:48:19Z
  GitCommit: 89be1c9ce6db0f727c81277c1cfdfb1e385bf248
  GitTreeState: clean
  GoVersion: go1.12.6
  Compiler: gc
  Platform: darwin/amd64
argocd-server: v1.3.6+89be1c9
  BuildDate: 2019-12-10T22:47:48Z
  GitCommit: 89be1c9ce6db0f727c81277c1cfdfb1e385bf248
  GitTreeState: clean
  GoVersion: go1.12.6
  Compiler: gc
  Platform: linux/amd64
  Ksonnet Version: v0.13.1
  Kustomize Version: Version: {Version:kustomize/v3.2.1 GitCommit:d89b448c745937f0cf1936162f26a5aac688f840 BuildDate:2019-09-27T00:10:52Z GoOs:linux GoArch:amd64}
  Helm Version: v2.15.2
  Kubectl Version: v1.14.0
```

**Logs**
N/A

# Summary

The input box (during creation and edit of an app using a custom config plugin) for `ENV` vars is a simple input. When multi-line values are input the rendering is bad visually (non-edit mode) and during edit it's very cumbersome.

# Motivation

Writing a custom configuration plugin which will have `ENV` vars that could potentially be quite large blocks yaml etc.

# Proposal

Change inputs to textareas.

Example snippet to illustrate the issue:

```
...
  plugin:
    name: helmfile
    env:
      - name: KUBE_VERSION
        value: '1.16'
      - name: HELMFILE_HELMFILE
        value: |-
          repositories:
          - name: stable
            url: https://kubernetes-charts.storage.googleapis.com
          - name: elastic
            url: https://helm.elastic.co
          - name: influx
            url: http://influx-charts.storage.googleapis.com
          - name: kiwigrid
            url: https://kiwigrid.github.io
          releases:
          - name: grafanatwo
            namespace: monitoring
            chart: stable/grafana
            set:
            - name: adminPassword
              value: admin
            - name: persistence.enabled
              value: true
            - name: ingress.enabled
              value: true
            - name: ingress.hosts[0]
              value: grafana.example.com
            - name: ingress.annotations.kubernetes\.io/ingress\.class
              value: traefik-internal
            - name: grafana\.ini.auth.disable_login_form
              value: true
            - name: grafana\.ini.auth\.anonymous.enabled
              value: true
            - name: grafana\.ini.auth\.anonymous.org_role
              value: Admin
...
```
# Summary

Set the `ENV` vars so plugins can have access to the required data during rendering processes.

# Motivation

I'm building a custom `helmfile` integration which invokes `helm` behind the scenes. To sanely invoke the commands I'll need access to the data that's appropriate to a given cluster.

# Proposal

Just set the vars in the execution environment of the `init` and `generate` phases.
# Summary

Connections to eks clusters should use the aws cli to get the connection token instead of aws-iam-authenticator. aws-iam-authenticator hasn't released in over 6 months and thus still does not support OIDC based IAM role assumption as described here https://aws.amazon.com/blogs/opensource/introducing-fine-grained-iam-roles-service-accounts/

# Motivation

We're setting up an argocd instance in a tools EKS cluster and we want it to connect to other EKS clusters via IAM. The aws-iam-authenticator doesn't pick up the AWS_WEB_IDENTITY_TOKEN_FILE environment variable. Master of aws-iam-authenticator pulls in an updated SDK version that should work, but it's not released yet and it doesn't seem like they will release any time soon. The AWS cli seems to be better supported and more frequently updated.

# Proposal

Replace aws-iam-authenticator with aws cli.
Checklist:

* [x] I've searched in the docs and FAQ for my answer: http://bit.ly/argocd-faq.
* [x] I've included steps to reproduce the bug.
* [x] I've pasted the output of `argocd version`.

**Describe the bug**

When you have two different Application objects, each of which is managing the other's Application, then argo-cd thinks that both are in a degraded state, even though neither is.

It may sound like an unusual setup, but I'm bootstrapping my cluster.  My argo-cd application contains the "App of Apps" root, and the root contains the definition for the argo-cd application.  This way, all I have to manually install is the argo-cd application, and the rest builds itself up.

**To Reproduce**

It's super simple to setup with one repository and two subpaths like so:
```
~/repo
├── first
│   ├── resources.yaml
│   └── second-application.yaml
└── second
    ├── other_resources.yaml
    └── first-application.yaml
```

**Expected behavior**

Ideally, argo-cd would be able to safely detect the loop (by marking apps and choosing not to redescend), but if you want to declare this as non-supported, I would understand that choice.



**Version**

```shell
penguin:~$ argocd version
argocd: v1.3.6+89be1c9
  BuildDate: 2019-12-10T22:46:45Z
  GitCommit: 89be1c9ce6db0f727c81277c1cfdfb1e385bf248
  GitTreeState: clean
  GoVersion: go1.12.6
  Compiler: gc
  Platform: linux/amd64
argocd-server: v1.3.6+89be1c9
  BuildDate: 2019-12-10T22:47:48Z
  GitCommit: 89be1c9ce6db0f727c81277c1cfdfb1e385bf248
  GitTreeState: clean
  GoVersion: go1.12.6
  Compiler: gc
  Platform: linux/amd64
  Ksonnet Version: v0.13.1
  Kustomize Version: Version: {Version:kustomize/v3.2.1 GitCommit:d89b448c745937f0cf1936162f26a5aac688f840 BuildDate:2019-09-27T00:10:52Z GoOs:linux GoArch:amd64}
  Helm Version: v2.15.2
  Kubectl Version: v1.14.0
```


close: https://github.com/argoproj/argo-cd/issues/2929

I upgraded Go to the latest version.
https://golang.org/doc/devel/release.html#go1.13

```shell
$ git grep -E "1\.12\.6"
# No hits

$ git grep -E "1\.13\.6"
.circleci/config.yml:          name: Install Golang v1.13.6
.circleci/config.yml:            go get golang.org/dl/go1.13.6
.circleci/config.yml:            [ -e /home/circleci/sdk/go1.13.6 ] || go1.13.6 download
.circleci/config.yml:            echo "export PATH=/home/circleci/sdk/go1.13.6/bin:\$PATH" | tee -a $BASH_ENV
.circleci/config.yml:            - /home/circleci/sdk/go1.13.6
Dockerfile:FROM golang:1.13.6 as builder
Dockerfile:FROM golang:1.13.6 as argocd-build
hack/Dockerfile.dev-tools:FROM golang:1.13.6 as builder
```

Checklist:

* [x] this does not need to be in the release notes
* [x] The title of the PR states what changed and the related issues number (used for the release note).
* [x] I've updated both the CLI and UI to expose my feature, or I plan to submit a second PR with them.
* [x] I've signed the CLA and my build is green ([troubleshooting builds](https://argoproj.github.io/argo-cd/developer-guide/ci/)). 

Checklist:

* [+] I've searched in the docs and FAQ for my answer: http://bit.ly/argocd-faq.
* [+] I've included steps to reproduce the bug.
* [+] I've pasted the output of `argocd version`.

**Describe the bug**

ArgoCD is crashing when a broken csv policy is applied. 
If ArgoCD is configured to track itself from the git, then the fix of the policy will not be applied because `argocd-server` crashed and not receiving any updates. Only manual `kubectl apply` will help to recover argocd-server.

**To Reproduce**
apply the argocd-rbac-cm ConfigMap with a broken policy.csv
For Example:
```
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-rbac-cm
data:
  policy.default: role:none
  policy.csv: |
    g, maxim.tacu@example.com role:admin 

  scopes: '[email]'
```
A **comma** is missing after the email in the example above!

**Expected behavior**
A policy csv syntax checker would be **NICE TO HAVE** in argocd before applying it.
In case if a broken policy is pushed, the best way would be to discard policies to `none` or `readonly` for everyone until a new fix will be released/pushed to the repo which is tracked by argocd and applied by itself without any manual intervention.

**Version**
Currently we just upgraded to the latest one, but all versions are affected.
```shell
$ argocd version
argocd: v1.4.0-rc1+5af52f6
  BuildDate: 2020-01-13T17:19:43Z
  GitCommit: 5af52f66988ad8fa0d6b977d7f5aedcdb9f5a521
  GitTreeState: clean
  GoVersion: go1.12.6
  Compiler: gc
  Platform: linux/amd64
argocd-server: v1.4.0-rc1+5af52f6
  BuildDate: 2020-01-13T17:22:26Z
  GitCommit: 5af52f66988ad8fa0d6b977d7f5aedcdb9f5a521
  GitTreeState: clean
  GoVersion: go1.12.6
  Compiler: gc
  Platform: linux/amd64
  Ksonnet Version: v0.13.1
  Kustomize Version: Version: {Version:kustomize/v3.2.1 GitCommit:d89b448c745937f0cf1936162f26a5aac688f840 BuildDate:2019-09-27T00:10:52Z GoOs:linux GoArch:amd64}
  Helm Version: v2.15.2
  Kubectl Version: v1.14.0

```

**Logs**
Argocd-server crash logs:
```
panic: grouping policy elements do not meet role definition

goroutine 149 [running]:
github.com/casbin/casbin/model.(*Assertion).buildRoleLinks(0xc00008ef00, 0x254f180, 0xc0005d6700)
	/go/src/github.com/casbin/casbin/model/assertion.go:43 +0x4bd
github.com/casbin/casbin/model.Model.BuildRoleLinks(0xc0004fd020, 0x254f180, 0xc0005d6700)
	/go/src/github.com/casbin/casbin/model/policy.go:26 +0xd4
github.com/casbin/casbin.(*Enforcer).BuildRoleLinks(0xc0007c2d90)
	/go/src/github.com/casbin/casbin/enforcer.go:296 +0x58
github.com/casbin/casbin.(*Enforcer).LoadPolicy(0xc0007c2d90, 0x0, 0x0)
	/go/src/github.com/casbin/casbin/enforcer.go:220 +0xa0
github.com/argoproj/argo-cd/util/rbac.(*Enforcer).SetUserPolicy(...)
	/go/src/github.com/argoproj/argo-cd/util/rbac/rbac.go:162
github.com/argoproj/argo-cd/util/rbac.(*Enforcer).syncUpdate(0xc00008f020, 0xc0008c0280, 0xc0008991d0, 0x0, 0x0)
	/go/src/github.com/argoproj/argo-cd/util/rbac/rbac.go:236 +0x143
github.com/argoproj/argo-cd/util/rbac.(*Enforcer).RunPolicyLoader(0xc00008f020, 0x252d5c0, 0xc0005d8400, 0xc0008991d0, 0x0, 0x0)
	/go/src/github.com/argoproj/argo-cd/util/rbac/rbac.go:183 +0x1ac
github.com/argoproj/argo-cd/server.(*ArgoCDServer).rbacPolicyLoader(0xc0004d2a00, 0x252d5c0, 0xc0005d8400)
	/go/src/github.com/argoproj/argo-cd/server/server.go:387 +0x7f
created by github.com/argoproj/argo-cd/server.(*ArgoCDServer).Run
	/go/src/github.com/argoproj/argo-cd/server/server.go:276 +0x80c
```


# Summary

ArgoCD automatically refreshes every 3 minutes. IMO it would be a great improvement to make this schedule configurable via the Helm chart's `values.yaml`. 

# Motivation

Configuring a shorter schedule time could lead to shorter feedback cycles for developers without the need to implement a webhook, e.g. if your repository solution is not supported by Argo CD (yet).

# Proposal

I would love to see this beeing configured via the Argo CD Helm chart's `values.yaml`.
# Summary

Maybe a spinning wheel or something to indicate that a request is inflight
