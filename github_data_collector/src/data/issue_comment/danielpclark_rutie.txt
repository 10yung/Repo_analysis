I feel like I must be overlooking something, but I ran across this while writing some tests. I tried whittling it down to find the breaking point; some of these panic (`signal: 11, SIGSEGV: invalid memory reference`); some don't:

```rust
// Panic
let i = std::i64::MIN;  // -9223372036854775808
let _ = Integer::new(i);

// Panic
let i = std::i64::MIN + std::u32::MAX as i64; // -9223372032559808513
let _ = Integer::new(i);

// Panic
let i = std::i64::MAX;  // 9223372036854775807
let _ = Integer::new(i);

// Panic
let i = std::i64::MAX - 1;
let _ = Integer::new(i);

// Ok
let i = (std::i32::MAX as i64) + 1; // 2147483648
let _ = Integer::new(i);

// Panic
let i = (std::i32::MIN as i64).pow(2); // 4611686018427387904
let _ = Integer::new(i);

// Ok! Looks like this is a threshold on the positive end.
let i = (std::i32::MIN as i64).pow(2) -  1;
let _ = Integer::new(i);

// Ok!
let i = (std::i32::MIN as i64).pow(2) * -1; // -4611686018427387904
let _ = Integer::new(i);

// Panic; looks like the -1 here is where it fails, at least on the negative end
let i = (std::i32::MIN as i64).pow(2) * -1 - 1;  // -4611686018427387905
let _ = Integer::new(i);
```

Ruby version: `ruby 2.6.2p47 (2019-03-13 revision 67232) [x86_64-darwin18]`
Rust version: `rustc 1.39.0 (4560ea788 2019-11-04)`

If this is a Ruby limitation (only handling values in between 32- and 64-bit int types), I'm not sure what a reasonable solution would be, but it at least seems worth documenting.
Hi there,

I'm just getting my feet wet with Rust/Rutie, so its entirely possible that this patch is nonsensical.  Also, I'm not sure if I have put things in the right place, etc. Happy to make any changes you consider necessary!

First, because Ruby < 2.5 has a different implementation of `rb_eql`, I've added a bunch of `cfg` directives to `build.rs`, so that functions can be defined conditional on the Ruby version.  This means that the faster `is_eql` function is only used on Ruby 2.5+. Presumably I should document these somewhere, but I haven't done this.  The remaining changes are:

- `Object::equals` is now a wrapper around the `rb_equal` C function;
- `Object::is_eql` is now a wrapper around the `rb_eql` C function on Ruby 2.5+;
- `Object::is_equal` simply performs an `==` comparison on the underlying values, which is the same behaviour as the `rb_obj_equal` C function.

I need `Integer` to support `u128` (https://doc.rust-lang.org/std/primitive.u128.html). I saw somewhere that `Integer` is merged between `Fixnum` and `Bignum`. So the only limitation seems to be the Rust API. I can open a PR if you would like! Tell me.

Thanks for the awesome project :-)!
I have a bizarre issue and was hoping you might be able to shed some light on it. I have a project that I'd like to use the rouge syntax highlighter with, so I'm using rutie to interop with ruby.

In all my tests before integrating the code into my main project, rutie + rouge was working fine. I `VM::init()` and `VM::init_loadpath()` and then eval a small ruby file I wrote and use the class inside of it to interact with rouge, and that all works.

However, when I moved this code into my main project, a most peculiar error occurs: the title of this issue. So, in my main project, I added the below to the very start of `main()`.

```rust
rutie::VM::init();
rutie::VM::init_loadpath();
eprintln!("{:#?}", rutie::Encoding::find("utf-8"));
eprintln!("{:#?}", rutie::Encoding::find("ascii-8bit"));
eprintln!("{:#?}", rutie::Encoding::find("us-ascii"));
```

Surprisingly, utf-8 and us-ascii both exist, but ascii-8bit does not.

This appears to be an issue specifically with the way my binary is compiled, as different ruby versions and different environments (this is being run in a docker container, but building running the binary on my actual computer results in the same) produce the same error. When I run that snippet above in a plain project with just a rutie dependency and no other code, it works fine.

Note that running the binary in the docker container will exhibit the error, but I can also start `irb` in the same container and verify that the `ascii-8bit` encoding works fine, so I'm pretty baffled.

- [Where the error occurs in the main project](https://github.com/jkcclemens/paste/blob/feat/server-highlight/webserver/src/main.rs#L114)
- [Where the error occurs in the interop crate](https://gitlab.com/jkcclemens/paste_rouge/blob/master/src/lib.rs#L19)
  - Note that this error doesn't occur if you add a binary to this crate and run it. It works as intended.

Is there something that could be happening during compilation or linking that could be screwing this up? That's all I can think at this point, considering it's just *this* binary that is afflicted (and across platforms). Maybe it's something completely different! Hopefully you have some input I haven't thought of.
The Ruby C method `rb_proc_new` was created to [“make Proc from C function”](https://github.com/ruby/ruby/commit/b664645ddc5dc0d1dceb0b0f4a9710f0ce5a0c29).  This means we can also make a `Proc` from a Rust function.

The method signature is as follows in C:

```c
VALUE
rb_proc_new(VALUE (*func)(ANYARGS) /* VALUE yieldarg[, VALUE procarg] */, VALUE val)
{ /* ... */ }
```

Which means  the Rust representation may be one of the following:

```rust
pub fn rb_proc_new(func: CallbackPtr, val: Value) -> Value;
```

```rust
pub fn rb_proc_new(func: extern fn(Value, Option<Value>) -> Value, val: Value) -> Value;
```

I would like someone who has a more intimate knowledge of using FFI callback pointers in Rust to help create this and allow us to use Rust closures as Ruby procs.
The Windows test suite runs but many to most of the tests now time out in windows.  Even though a Ruby dependency `libgmp-10.dll` is in the path the linker is having issues linking with it.  I have put forth my best efforts to making Rutie work for Windows.  If you have a better understanding of linkers and dependencies and would like to see full Windows support please help with this issue.
When choosing to compile with `RUBY_STATIC` flag the test for `class::vm::VM::init_loadpath` fails.
When choosing to compile with `RUBY_STATIC` flag the test for `class::string::RString::is_valid_encoding` fails.
When choosing to compile with `RUBY_STATIC` flag the test for `class::string::RString::from_bytes` fails.
Related issues:

- [ruru](https://github.com/d-unseductable/ruru/issues/75)
- [helix](https://github.com/tildeio/helix/issues/50)

> If we:
> heap allocate a struct-based helix object (e.g. Duration::new)
> GC runs
> It will GC the Ruby object associated with the helix object, because the GC couldn't see the VALUE pointer on the stack
