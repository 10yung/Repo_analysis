Thank you for your work on Spring. It's saved me a lot of seconds over the years :)

I encountered an incompatibility with rails/spring when I was installing a working with a new gem dry-monads

Repro repo: https://github.com/johnmaxwell/spring_dry_monads_break
dry-monads ticket: https://github.com/dry-rb/dry-monads/issues/115

The issue is that dry-monads raises an Error with a frozen, empty array for the backtrace, and Spring's patched raise attempts to sanitize the backtrace without checking if it is frozen. This causes an error: can't modify frozen Array (FrozenError)

https://github.com/dry-rb/dry-monads/blob/11ca509889044ea75eb7d21e2a8f1691295de92e/lib/dry/monads/do.rb#L134 
https://github.com/rails/spring/blob/ee687859008e947bc905b95121e306e2948d31c9/lib/spring/application.rb#L305

Does it make sense to check that the backtrace isn't frozen before attempting sanitization?

Spring 2.1.0
Rails 6.0.1
Ruby 2.6.5
dry-monads: 1.3.2
I suddenly starting running into an issue today on my Rails project where all commands I run that use `spring` as a preloader, such as `rspec` or `rake` fail due to an error similar to this:

```
objc[8689]: +[__NSCFConstantString initialize] may have been in progress in another thread when fork() was called.
objc[8689]: +[__NSCFConstantString initialize] may have been in progress in another thread when fork() was called. We cannot safely call it or ignore it in the fork() child process. Crashing instead. Set a breakpoint on objc_initializeAfterForkError to debug.
```

This happened right after I upgraded all my Homebrew packages on my Mac machine (Mac OS 10.15.1). I can verify that I was not running into this issue on my machine before I upgraded my Homebrew packages, which rules out the issue being due to an application code change. I can also note that I have deduced this to be a Spring issue because I don't run into this error when I run these commands with Spring disabled, via the `DISABLE_SPRING=1` variable.

I'm guessing that one of the upgrades from one of my Homebrew packages is serving as a catalyist for this bug to manifest. I'm unsure of how to track this down myself. [Here's my list of Homebrew packages](https://gist.github.com/ecbrodie/fd3ccb8aa633614cf71c165f98b22a55), maybe it'll be useful.

In the meanwhile, I'm using an environment variable workaround I've commonly seen in Google searches, [such as from this post](https://stackoverflow.com/a/53404317/814576), to disable this MacOS check.
Hi
I have rails 6 app deployed using:

``` bundle install --deployment --without=development test --quiet --path=... --gemfile=.../build/Gemfile ```

yet, running the rails console:

```
rails c
Running via Spring preloader in process 19088
WARNING: Spring is running in production. To fix this make sure the spring gem is only present in `development` and `test` groups in your Gemfile and make sure you always use `bundle install --without development test` in production
Loading production environment (Rails 6.0.1)
irb(main):001:0> 
```
uses spring, yet spring is defined in the development section of Gemfile, not production.

```
group :development do
  # Access an interactive console on exception pages or by calling 'console' anywhere in the code.
  gem 'web-console', '>= 3.3.0'
  gem 'listen', '>= 3.0.5', '< 3.2'
  gem 'spring'
  gem 'spring-watcher-listen', '~> 2.0.0'
  gem 'spring-commands-rspec'
  gem 'spring-commands-rubocop'
```
why is this so?
if i install google/cloud/firestore i get a threading fault.

## Environment details
  - OS: Mac OS Catalina 10.15
  - Ruby version: ruby-2.4.5
  - Gem name and version: google-cloud-firestore (1.1.0)


#### Steps to reproduce
  1.  install rails (5.2.3)
  2. install spring (2.1.0)
  3. rails c
#### Code example

```ruby
  require "google/cloud/firestore"
  
  firestore = Google::Cloud::Firestore.new(
    project_id: 'project_id',
    credentials: "/path.json"
  )

  city_ref = firestore.doc "cities/LA"

  data = {
    name:    "Los Angeles",
    state:   "CA",
    country: "USA"
  }

  city_ref.set data
```

#### Full backtrace

```sh
2.4.5 :019 >     city_ref.set data
objc[17615]: +[__NSCFConstantString initialize] may have been in progress in another thread when fork() was called.
objc[17615]: +[__NSCFConstantString initialize] may have been in progress in another thread when fork() was called. We cannot safely call it or ignore it in the fork() child process. Crashing instead. Set a breakpoint on objc_initializeAfterForkError to debug.
```


Bump the Ruby versions used by Travis CI. Also update from Rails 6.0.0.rc1 to 6.0.0.

If I create a skeleton Rails API application, and then remove ActiveRecord from the application, spring still tries to load AR which ultimately fails and prevents generators etc. from working.

This is a regression in Rails 6 - in Rails 5.2 everything works as expected.

I created two applications, which are identical except for version of Rails used.

https://github.com/p-mongo/tests/tree/master/spring-ar-sqlite-5
https://github.com/p-mongo/tests/tree/master/spring-ar-sqlite-6


Generate the app:

    rails new --api spring-ar-sqlite-6
    cd spring-ar-sqlite

Edit `Gemfile`, removing reference to `sqlite`.

Edit `config/application.rb`, commenting out ActiveRecord and ActiveStorage:

    #require "active_record/railtie"
    #require "active_storage/engine"

Run:

    rails g controller foo

Result:

    butler% rails g controller foo
    /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/2.6.0/bundler/rubygems_integration.rb:408:in `block (2 levels) in replace_gem': Error loading the 'sqlite3' Active Record adapter. Missing a gem it depends on? sqlite3 is not part of the bundle. Add it to your Gemfile. (LoadError)
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activerecord-6.0.0/lib/active_record/connection_adapters/sqlite3_adapter.rb:13:in `<main>'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `require'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `block in require_with_bootsnap_lfi'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/loaded_features_index.rb:92:in `register'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in `require_with_bootsnap_lfi'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/zeitwerk-2.2.0/lib/zeitwerk/kernel.rb:23:in `require'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activerecord-6.0.0/lib/active_record/connection_adapters/connection_specification.rb:170:in `spec'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activerecord-6.0.0/lib/active_record/connection_adapters/abstract/connection_pool.rb:1044:in `establish_connection'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activerecord-6.0.0/lib/active_record/connection_handling.rb:51:in `establish_connection'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activerecord-6.0.0/lib/active_record/railtie.rb:201:in `block (2 levels) in <class:Railtie>'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activesupport-6.0.0/lib/active_support/lazy_load_hooks.rb:72:in `class_eval'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activesupport-6.0.0/lib/active_support/lazy_load_hooks.rb:72:in `block in execute_hook'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activesupport-6.0.0/lib/active_support/lazy_load_hooks.rb:62:in `with_execution_control'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activesupport-6.0.0/lib/active_support/lazy_load_hooks.rb:67:in `execute_hook'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activesupport-6.0.0/lib/active_support/lazy_load_hooks.rb:52:in `block in run_load_hooks'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activesupport-6.0.0/lib/active_support/lazy_load_hooks.rb:51:in `each'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activesupport-6.0.0/lib/active_support/lazy_load_hooks.rb:51:in `run_load_hooks'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activerecord-6.0.0/lib/active_record/base.rb:327:in `<module:ActiveRecord>'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activerecord-6.0.0/lib/active_record/base.rb:27:in `<main>'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `require'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `block in require_with_bootsnap_lfi'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/loaded_features_index.rb:92:in `register'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in `require_with_bootsnap_lfi'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/zeitwerk-2.2.0/lib/zeitwerk/kernel.rb:23:in `require'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/spring-2.1.0/lib/spring/application.rb:370:in `active_record_configured?'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/spring-2.1.0/lib/spring/application.rb:287:in `disconnect_database'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/spring-2.1.0/lib/spring/application.rb:111:in `preload'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/spring-2.1.0/lib/spring/application.rb:157:in `serve'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/spring-2.1.0/lib/spring/application.rb:145:in `block in run'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/spring-2.1.0/lib/spring/application.rb:139:in `loop'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/spring-2.1.0/lib/spring/application.rb:139:in `run'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/spring-2.1.0/lib/spring/application/boot.rb:19:in `<top (required)>'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'
            from /home/sandbox/.rbenv/versions/2.6.5/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'
            from -e:1:in `<main>'

Out-of-the box, spring needs custom configuration of the `SPRING_APPLICATION_ID` env var to support dual-booting different Gemfiles. This is because the generated `application_id` only takes into account the `RUBY_VERSION` and the `project_root` path.

Would it be a welcome PR to change the current `application_id` generation to use the Gemfile lockfile path instead of the `project_root` path? This would allow Spring to support multiple gemfiles without custom config, as it will start a spring server for each `Gemfile`:

```diff
def application_id
- ENV["SPRING_APPLICATION_ID"] || Digest::MD5.hexdigest(RUBY_VERSION + project_root.to_s)
+ ENV["SPRING_APPLICATION_ID"] || Digest::MD5.hexdigest(RUBY_VERSION + Bundler.default_lockfile.to_s)
end
```

---

For developers wanting to support this today, you can set `SPRING_APPLICATION_ID` in `bin/spring` by adding the lines shown below.

File: `bin/spring`

```diff
#!/usr/bin/env ruby

# This file loads Spring without using Bundler, in order to be fast.
# It gets overwritten when you run the `spring binstub` command.

unless defined?(Spring)
  require 'rubygems'
  require 'bundler'

+ # The default application_id generated by Spring::Env#application_id
+ # does not support booting with different Gemfiles. The default
+ # value is `Digest::MD5.hexdigest(RUBY_VERSION + project_root.to_s)`
+ # Here, we set the SPRING_APPLICATION_ID env var to customize the
+ # application_id so it takes the current gemfile into account, to
+ # support booting with different Gemfiles.
+ def configure_spring_for_multiple_gemfiles
+   require 'digest/md5'
+   ENV["SPRING_APPLICATION_ID"] = Digest::MD5.hexdigest(RUBY_VERSION + Bundler.default_lockfile.to_s)
+ end
+ configure_spring_for_multiple_gemfiles
+
  lockfile = Bundler::LockfileParser.new(Bundler.default_lockfile.read)
  spring = lockfile.specs.detect { |spec| spec.name == 'spring' }
  if spring
    Gem.use_paths Gem.dir, Bundler.bundle_path.to_s, *Gem.path
    gem 'spring', spring.version
    require 'spring/binstub'
  end
end

```

To check this is working, perform the following steps:

1. Kill all current spring servers: Running `bin/spring stop` and `pkill -9 spring` should do it.
2. Run a rails console using the default `Gemfile`: `bin/rails c`. Check the `Rails.version` is as expected for `Gemfile`.
3. Run another rails console, using a non-default `Gemfile`: `BUNDLE_GEMFILE=Gemfile_next bin/rails c`. Check the `Rails.version` is as expected for `Gemfile`.
4. Run `bin/spring status`. This should show a spring development env running. Note the process ids.
5. Run `BUNDLE_GEMFILE=Gemfile_next bin/spring status`. This should show another spring development env running, but the process ids **should be different** to those noted in the previous step.

To ensure the above config isn't accidentally deleted from `bin/spring` (say when the binstub is regenerated), in `config/spring.rb` add the following:

```rb
Spring.after_fork do
  require 'digest/md5'
  expected_spring_application_id = Digest::MD5.hexdigest(RUBY_VERSION + Bundler.default_lockfile.to_s)
  if ENV["SPRING_APPLICATION_ID"] != expected_spring_application_id
    raise "Spring is misconfigured! Check bin/spring defines and calls `configure_spring_for_multiple_gemfiles`"
  end
end
```
I have a Rails 6 app and when using zeitwerk autoloader mode, it looks like Spring is adding all the rb-files to the watch list. So every change in any file triggers full spring restart. In classic mode, there is no such issue. I just add `config.autoloader = :classic` to application.rb and it stops restarting spring server on every change.

Here are the logs in zeitwerk mode:
```
started on /var/folders/qk/rfns1ml107b19r47z45l1dch0000gn/T/spring-501/92640e3e802293c883d0acfcd709d0d4
[2019-09-14 13:10:03 +0300] [6675] [server] accepted client
[2019-09-14 13:10:03 +0300] [6675] [server] running command rspec
[2019-09-14 13:10:03 +0300] [6675] [application_manager:test] child not running; starting
[2019-09-14 13:10:03 +0300] [6662] [client] sending command
[2019-09-14 13:10:03 +0300] [6678] [application:test] initialized -> running
[2019-09-14 13:10:04 +0300] [6678] [application:test] got client
[2019-09-14 13:10:04 +0300] [6678] [application:test] preloading app
[2019-09-14 13:10:07 +0300] [6678] [watcher:test] watcher: add: <here goes the list of all rb-files in the project>
```

I wonder, why is it adding all that files.
Spring 2.0.2 on OpenBSD (which might be the cause of us seeing the race condition due to its slowness).

```ruby
vendor/bundle/ruby/2.3/gems/spring-2.0.2/lib/spring/client/run.rb:26:in `initialize': Connection refused - connect(2) for /var/run/spring/103b87e8a42dc3cc7a9ec24c7d7e65f1 (Errno::ECONNREFUSED)
        from vendor/bundle/ruby/2.3/gems/spring-2.0.2/lib/spring/client/run.rb:26:in `open'
        from vendor/bundle/ruby/2.3/gems/spring-2.0.2/lib/spring/client/run.rb:26:in `connect'
        from vendor/bundle/ruby/2.3/gems/spring-2.0.2/lib/spring/client/run.rb:57:in `cold_run'
        from vendor/bundle/ruby/2.3/gems/spring-2.0.2/lib/spring/client/run.rb:33:in `rescue in call'
        from vendor/bundle/ruby/2.3/gems/spring-2.0.2/lib/spring/client/run.rb:30:in `call'
        from vendor/bundle/ruby/2.3/gems/spring-2.0.2/lib/spring/client/command.rb:7:in `call'
        from vendor/bundle/ruby/2.3/gems/spring-2.0.2/lib/spring/client/rails.rb:24:in `call'
        from vendor/bundle/ruby/2.3/gems/spring-2.0.2/lib/spring/client/command.rb:7:in `call'
        from vendor/bundle/ruby/2.3/gems/spring-2.0.2/lib/spring/client.rb:30:in `run'
        from vendor/bundle/ruby/2.3/gems/spring-2.0.2/bin/spring:49:in `<top (required)>'
        from vendor/bundle/ruby/2.3/bin/spring:22:in `load'
        from vendor/bundle/ruby/2.3/bin/spring:22:in `<main>'
```

There seems to be some race condition that the socket file already exists, but does not answer yet:

```ruby
      def cold_run
        boot_server
        connect  # <- error occurs here, server "should" already be booted
        run
      end
```

I would guess that something like this in https://github.com/rails/spring/blob/a9473e925e91b9d5844e10efdbb02a8c858aaed1/lib/spring/client/run.rb#L81 would help:

```ruby
        until env.socket_path.exist? && socket_ready?
```

with a suitable implementation of socket_ready?, e.g.
```ruby
      def socket_ready?        
        begin
          socket = UNIXSocket.open(env.socket_name)
        rescue Errno::ECONNRESET, Errno::ECONNREFUSED
          return false
        ensure
          socket && socket.close
        end
        true
      end
```

Related: it might be helpful in cases like this (i.e. hard to reproduce) to be able to always log the output of the spring server, not only when started manually. E.g. something like https://github.com/rails/spring/blob/a9473e925e91b9d5844e10efdbb02a8c858aaed1/lib/spring/client/run.rb#L76 :

```ruby
        pid     = Process.spawn(gem_env, env.server_command, out: env.log_name)
```

Do you want a pull request for one or both of these issues?
```
WARNING: V8 isolate was forked, it can not be disposed and memory will not be reclaimed till the Ruby process exits.
Traceback (most recent call last):
	15: from bin/rails:3:in `<main>'
	14: from bin/rails:3:in `load'
	13: from /Users/plentz/src/github.com/xxx/xxx/bin/spring:20:in `<top (required)>'
	12: from /opt/rubies/2.5.5/lib/ruby/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:54:in `require'
	11: from /opt/rubies/2.5.5/lib/ruby/site_ruby/2.5.0/rubygems/core_ext/kernel_require.rb:54:in `require'
	10: from /Users/plentz/.gem/ruby/2.5.5/gems/spring-2.0.2/lib/spring/binstub.rb:31:in `<top (required)>'
	 9: from /Users/plentz/.gem/ruby/2.5.5/gems/spring-2.0.2/lib/spring/binstub.rb:31:in `load'
	 8: from /Users/plentz/.gem/ruby/2.5.5/gems/spring-2.0.2/bin/spring:49:in `<top (required)>'
	 7: from /Users/plentz/.gem/ruby/2.5.5/gems/spring-2.0.2/lib/spring/client.rb:30:in `run'
	 6: from /Users/plentz/.gem/ruby/2.5.5/gems/spring-2.0.2/lib/spring/client/command.rb:7:in `call'
	 5: from /Users/plentz/.gem/ruby/2.5.5/gems/spring-2.0.2/lib/spring/client/rails.rb:24:in `call'
	 4: from /Users/plentz/.gem/ruby/2.5.5/gems/spring-2.0.2/lib/spring/client/command.rb:7:in `call'
	 3: from /Users/plentz/.gem/ruby/2.5.5/gems/spring-2.0.2/lib/spring/client/run.rb:35:in `call'
	 2: from /Users/plentz/.gem/ruby/2.5.5/gems/spring-2.0.2/lib/spring/client/run.rb:42:in `warm_run'
	 1: from /Users/plentz/.gem/ruby/2.5.5/gems/spring-2.0.2/lib/spring/client/run.rb:62:in `run'
/Users/plentz/.gem/ruby/2.5.5/gems/spring-2.0.2/lib/spring/client/run.rb:117:in `verify_server_version': undefined method `chomp' for nil:NilClass (NoMethodError)
```