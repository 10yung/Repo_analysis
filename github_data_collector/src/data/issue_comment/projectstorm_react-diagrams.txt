Is it possible to customize the shape and content of a node ?
And also, where can I found true documentation about this project.
From myself, Video 1 of bug: https://files.gitter.im/projectstorm/react-diagrams/a9Lz/Screen-Recording-2020-01-15-at-15.47.34.mov

Process for video 1:
-I first show that under normal circumstances, links from outport to outport, as well as loose links, are forbidden.
-I then execute a MOUSE_UP out of the Canvas, we can see that the DragNewLinkState is maintained, even though it shouldn't be.
-I then show that even clicking on a port (new MOUSE_DOWN without a Canvas-valid MOUSE_UP happening beforehand), this actually creates a loose link.
-I try to delete it the loose link, my software crashes (this is not projectstorm's problem, but my underlying model: a loose link doesn't create a correct data structure, and there is an unhandled null on the target port, basically).

The issue is the survival of the DragNewLinkState in a broken way, when MOUSE_UP happens out of canvas.


From Renato Bohler, Video 2 of bug: https://files.gitter.im/projectstorm/react-diagrams/TXhg/Peek-15-01-2020-13-44.gif

Two loose links are created:
- One from source port to the point of the target port, but the link is not actually connected to the target port.
- Another from the target port to point (0,0), seems to be the same issue as #520 (perhaps the difference here, in the creation of this second loose link, is that loose links are forbidden for the software behind video 1, but not video 2)

Process:
- clicked, hold and dragged any source port;
- released click outside of canvas;
- clicked on any target port.

It seems that two consecutive MOUSE_DOWN actions are causing troubles on DragNewLinkState logic, just a guess.

I am trying to use hook to set up engine.

File : AppDiagram.js
```
import React, {useEffect, useState} from 'react';
import createEngine, { DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';

import { CanvasWidget } from '@projectstorm/react-canvas-core';
import './AppDiagram.css';

const AppDiagram = () => {

  function getDefaultEngine() {

    var engine = createEngine();
    var model = new DiagramModel();
    engine.setModel(model);
    return engine;

  }
  
  const [engine, setEngine] = useState(getDefaultEngine());
  
  const buildEngine = () => {
    //1) setup the diagram engine
    var engine = createEngine();

    //2) setup the diagram model
    var model = new DiagramModel();

    //3-A) create a default node
    var node1 = new DefaultNodeModel('Node 1', 'rgb(0,192,255)');
    var port1 = node1.addOutPort('Out');
    node1.setPosition(100, 100);

    //3-B) create another default node
    var node2 = new DefaultNodeModel('Node 2', 'rgb(192,255,0)');
    var port2 = node2.addInPort('In');
    node2.setPosition(400, 100);

    //3-C) link the 2 nodes together
    var link1 = port1.link(port2);

    //4) add the models to the root graph
    model.addAll(node1, node2, link1);

    //5) load model into engine
    engine.setModel(model);
    setEngine(engine);
    
  }
  
  useEffect(() => {
    buildEngine();
  },[]);
  
	return (
    <div>
      <CanvasWidget engine={engine} className="canvas"/>
    </div>
	);  
}

export default AppDiagram;
```
I got the two nodes draw.
However, when I tried to drag the nodes. It's very slow and almost not response.
I were building a kind of complicated app with list of nodes to drag into diagram.
Each node came with some attributes. 
Serialized to save and derserialized back from database.
with context/redux, I sorted out all messes and almost done. But, I just found both useState, useReducer kill the performance.


Hi guys! There is a way to disable all interactions except move, pane or zoom? Thanks!
Hey guys! The issue which this PR fixed https://github.com/projectstorm/react-diagrams/pull/482 is still persist for drag and drop functionality (you can check it also in storybook). Could you please help with this? Thanks

Used latest versions for library such as
    "@projectstorm/react-canvas-core": "^6.0.1-beta.7",
    "@projectstorm/react-diagrams": "^6.0.1-beta.7",
    "@projectstorm/react-diagrams-core": "^6.0.1-beta.7",
Can't resolve `@emotion/core' in '***\node_modules\@projectstorm\react-canvas-core\dist`

should '@emotion/core' be added to the packages for react-canvas-core, or is there a reason for keeping it clean? I understand that devs may choose to use other ways of styling, but the package falls over without it.

https://github.com/projectstorm/react-diagrams/blob/469dbc00aff2161ef48da210649971deeec066d8/packages/react-canvas-core/package.json#L31-L38

related: https://github.com/projectstorm/react-diagrams/issues/438 https://github.com/projectstorm/react-diagrams/issues/460#issuecomment-549390814_
incase of mutating diagrams the window scrolls to the top automatically

Is there a possibility to have 2 input nodes share a link with overlapping segments being 1 link and the split point being different link?

![image](https://user-images.githubusercontent.com/8672758/71564198-c0564280-2a6a-11ea-9224-ef322760c0fe.png)

I am trying to do process flow diagram and divide the links into segments.
I have a strange problem 
I have a react front-end with antd integrated.

I tried creating a view, by following the instructions at https://projectstorm.gitbook.io/react-diagrams/getting-started/using-the-library

1. link.addLabel('Hello World!'); - doesn't compile . It complains saying link.addLabel is not a function

2. So, I comment out that line.. and then it stops complaing. 

But now I have a strange problem - the <CanvasWidget /> mounts but the node 1 and node 2 are not displayed. They are present in the DOM though! See attached image

![react-storm-error](https://user-images.githubusercontent.com/7342520/71497178-091cba00-2825-11ea-9159-43618ca4eea2.png)



