Currently I just see [how to set the network *mode*](https://github.com/newrelic/centurion#network-modes). Is it possible to [add the container to some networks with](https://docs.docker.com/engine/tutorials/networkingcontainers/#add-containers-to-a-network) it as well?

So something that would result in parameters like `--net=batman --net=banana`?
Currently, when a rolling deploy errors during the process of stopping an existing container and spinning up the new one, the deploy stops and exits by raising that error. The longer the list of servers you're deploying to, the more of a pain it is to determine which servers did and did not successfully deploy, and you're left in an inconsistent state.

This PR adds an option, `rolling_deploy_on_docker_failure` that defaults to `:exit`, which preserves the existing behavior. When set to `:continue`, Centurion will try to deploy to every host on its list and keep a running collection of the errors it encounters along the way. When all the servers are done, it will raise a single error with a concatenation of all the error messages it encountered. This should:

- Ensure hosts that are healthy at the time of deploy get deployed to, regardless of the health of other hosts in the list.
- Make it easier to see at the end of the deploy failure which hosts are unhealthy and still running the old container.
The `deploy:repair` task is not only undocumented, but uses a naive invocation of `#http_status_ok?`:
```
unless method(:http_status_ok?).call(server, port, fetch(:status_endpoint, '/'))
```

Users with custom health checks can't avail themselves of this useful task.
This resolves merge conflicts in #124 in preparation for merge in 1.9.
This is a Good Thing™ when we're talking about `rolling_deploy` but a Bad Thing™ when we're talking about `deploy` because it causes the service to be down longer than necessary. The `deploy` task call `stop_containers` from a `DockerHostGroup.each_in_parallel` call instead. 

Relates to #173 though that approach should not be used. 

cc @johannespetzold @ean5533
Hi! 
I'm trying to deploy using an private docker/registry-2.0 (docker-distribution) 

Have I misconfigured my registry or is there simply no support for /v2/ api yet?

```
$ centurion -p myApp -e production 
** Invoke environment:production (first_time)
** Invoke environment:common (first_time)
** Execute environment:common
** Execute environment:production
** Invoke centurion:setup (first_time)
** Invoke centurion:clean_environment (first_time)
** Execute centurion:clean_environment
** Execute centurion:setup
** Invoke list (first_time)
** Execute list
** Invoke list:tags (first_time)
** Execute list:tags
GET: "https://registry.mydomain.com/v1/repositories/myapp/tags"
E, [2015-09-21T11:42:34.014356 #4959] ERROR -- : Couldn't communicate with Registry: #<Excon::Response:0x0000000195d188 @data={:body=>"<html>\r\n<head><title>404 Not Found</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>404 Not Found</h1></center>\r\n<hr><center>nginx/1.9.4</center>\r\n</body>\r\n</html>\r\n", :headers=>{"Server"=>"nginx/1.9.4", "Date"=>"Mon, 21 Sep 2015 09:51:43 GMT", "Content-Type"=>"text/html", "Content-Length"=>"168", "Connection"=>"keep-alive"}, :status=>404, :status_line=>"HTTP/1.1 404 Not Found\r\n", :reason_phrase=>"Not Found"}, @body="<html>\r\n<head><title>404 Not Found</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>404 Not Found</h1></center>\r\n<hr><center>nginx/1.9.4</center>\r\n</body>\r\n</html>\r\n", @headers={"Server"=>"nginx/1.9.4", "Date"=>"Mon, 21 Sep 2015 09:51:43 GMT", "Content-Type"=>"text/html", "Content-Length"=>"168", "Connection"=>"keep-alive"}, @status=404, @remote_ip="x.x.x.x", @local_port=39801, @local_address="x.x.x.x">
```

Note: 
If i do try to replace the v1 to a v2 and visit the link manually:
`https://registry.mydomain.com/v2/repositories/myapp/tags`
I do indeed get to the place i should be, instead of a 404.

Some saas analytics platforms, like New Relic, have an API that can be called during deployment of new versions.  I think it would be cool if centurion had support for something like this.  Maybe just a method that could be overridden to make the API call at start or end of deployment?

We need to override the deployment stages to allow centurion to enable controlled container shutdown during a deploy.

For example, we have a service container that is running a set of background tasks.  On a deploy, we need centurion to notify the service that a shutdown is requested.  Then, centurion should monitor a status endpoint until the service indicates that all background processes have terminated.  At that time, centurion will be clear to bring down the container and deploy the new image.

Centurion's rolling_deploy action iterates over the hosts: for each, it kills the old container, starts a new one, then waits for the new one to successfully health-check before moving on. With this paradigm, you clearly need to have at least two hosts running something to maintain uptime.... but if the second host is already down for some reason, having only two instances means deploying (or running a migration command) will blindly take your only other instance down.

Rolling deploy (and also anywhere we pick a host to do something on) ought to look for any "down" hosts and deploy to them first.

In my rake file I would like to not specify the host_port value even if my container exposes a port. Is this possible? When I leave out that line I get the following error - 

```
I, [2014-07-29T11:57:55.717050 #57151]  INFO -- : ----- Connecting to Docker on bld-docker-01 -----
/Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/centurion/deploy_dsl.rb:46:in `public_port_for': undefined method `values' for nil:NilClass (NoMethodError)
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/centurion/deploy.rb:9:in `stop_containers'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/tasks/deploy.rake:40:in `block (3 levels) in <top (required)>'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/centurion/deploy_dsl.rb:7:in `call'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/centurion/deploy_dsl.rb:7:in `block (2 levels) in on_each_docker_host'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/centurion/docker_server_group.rb:20:in `call'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/centurion/docker_server_group.rb:20:in `block in each'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/centurion/docker_server_group.rb:18:in `each'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/centurion/docker_server_group.rb:18:in `each'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/centurion/deploy_dsl.rb:7:in `block in on_each_docker_host'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/centurion/deploy_dsl.rb:6:in `tap'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/centurion/deploy_dsl.rb:6:in `on_each_docker_host'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/tasks/deploy.rake:40:in `block (2 levels) in <top (required)>'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:228:in `call'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:228:in `block in execute'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:223:in `each'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:223:in `execute'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:166:in `block in invoke_with_call_chain'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/monitor.rb:211:in `mon_synchronize'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:159:in `invoke_with_call_chain'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:152:in `invoke'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/capistrano_dsl.rb:88:in `invoke'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/tasks/deploy.rake:7:in `block in <top (required)>'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:228:in `call'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:228:in `block in execute'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:223:in `each'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:223:in `execute'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:166:in `block in invoke_with_call_chain'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/monitor.rb:211:in `mon_synchronize'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:159:in `invoke_with_call_chain'
    from /Users/pairing/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/rake/task.rb:152:in `invoke'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/lib/capistrano_dsl.rb:88:in `invoke'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/gems/centurion-1.0.10/bin/centurion:74:in `<top (required)>'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/bin/centurion:23:in `load'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/bin/centurion:23:in `<main>'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/bin/ruby_executable_hooks:15:in `eval'
    from /Users/pairing/.rvm/gems/ruby-2.0.0-p353/bin/ruby_executable_hooks:15:in `<main>'
```
