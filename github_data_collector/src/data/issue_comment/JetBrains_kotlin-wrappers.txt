It seems impossible for me to use existing React component without some "raw" method.

E.g. I try to use [Material Icons](https://material-ui.com/components/material-icons/). In JS they are used like:
```javascript
import AccessibleIcon from '@material-ui/icons/Accessible';
import React from 'react';

export function Test() {
  return <AccessibleIcon>;
}
```

but how to do it in Kotlin?
```kotlin
package test

import react.*
import react.dom.*

fun RBuilder.test() {
    raw {
        +"<AccessibleIcon>"
    }
}
```

I don't know how to define component (wrapper) for existing imported React component either. All examples create only new components.
I try to implement the following React.js example in Kotlin JS:

![React.js hook sample](https://miro.medium.com/max/800/0*A25LKRTLZDF2afeQ.png)

My implementation doesn't seem to be perfect because after 2 seconds it is rendered at 0 FPS and totally kills Chrome :D
Do you have any idea what am I doing wrong?

```
fun main() {
    render(document.getElementById("container")) {
        div {
            child(MouseWatcher)
        }
    }
}

data class MousePosition(val x: Int, val y: Int)

fun useMousePosition(): MousePosition {
    val (position, setPosition) = useState(MousePosition(0, 0))

    fun handleMouseMove(e: Event) {
        e as MouseEvent // TODO It doesn't compile with parameter type of MouseEvent
        setPosition(MousePosition(e.clientX, e.clientY))
    }

    useEffectWithCleanup {
        window.addEventListener("mousemove", ::handleMouseMove);
        { window.removeEventListener("mousemove", ::handleMouseMove) }
    }

    return position
}

val MouseWatcher = functionalComponent<RProps> {
    val p = useMousePosition()
    span {
        +"${p.x}, ${p.y}"
    }
}
```

Besides, I need some help fixing the TODO as well...
I'm currently trying to implement Redux Advanced Example (the one that uses Reddit API to fetch post titles) and I can'f for the life of me figure out how to add `redux-thunk` to the project (and how to work with middleware in general. My experience with JS, React, Redux and web-development in general is almost non-existent so I would greatly appreciate if you pointed me to some **_kotlin_** specific guide or gave a "for dummies" explanation. Thanks in advance. 
kotlins-css adds amp. 

https://test.html?name1=value1&name2=value2 
-> 
https://test.html?name1=value1&ampname2=value2

import kotlinx.html.a
import kotlinx.html.body
import kotlinx.html.html
import kotlinx.html.stream.appendHTML
import org.amshove.kluent.`should contain`
import org.amshove.kluent.`should not contain`
import org.junit.jupiter.api.Test

class HtmlTests {

    @Test
    fun `when a(a&b) then a href=a&b`() {

        val getUrl = "https://test.html?name1=value1&name2=value2"

        val a = StringBuilder().apply {
            appendHTML().html {
                body {
                    a(getUrl)
                }
            }
        }

        println(a)

        a.`should not contain`("&amp")
        a.`should contain`(getUrl)

    }

}
Given that Material-UI is the most popular material design library for react, it might be nice to add an official wrapper. I'm happy to work on this. Would this repository be an appropriate place of this wrapper?
I am not super familiar with the Javascript ecosystem (which is why I'm using Kotlin) so please forgive me if I'm being idiotic.

I ran across the same issue described in #93 and I am wondering why this project targets `commonjs`?

Wouldn't it make more sense to target `UMD` so it can be consumed both by node/compile time tools as well as be consumed directly in the browser for those of us that are using pure gradle/kotlin2js build pipelines?

My understanding is that `UMD` is universal and works with both `commonjs` and `AMD` projects.

Am I missing some case where this will break? It would be great if that use case could work out of the box too.
The KotlinConf app no longer uses KotlinJS or React.  Please remove the reference to it in the README or link to an older revision that did.
Component (and RComponent) have generic bounds for props and state to be `RProps` and `RState`. This is unnecessarily tight and obviously prevents types that does not implement the interfaces from being used as props (or state for that matter although I cannot image such use case at hand).

The concrete use case I have is that my types come from another (kotlin common) module and as such cannot be made to implement `RProps`

As an experiment I have tried to do this myself and it seems that not much relies on this behavior. I have not yet verified if this is enough to solve my use case, **but I ask here because I want to know what the odds are this change to be implemented.**

```
Index: kotlin-react/src/main/kotlin/react/Imports.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- kotlin-react/src/main/kotlin/react/Imports.kt	(revision d94019ba3dae64fd4c1afb3644d8f2ffcfa3f8c1)
+++ kotlin-react/src/main/kotlin/react/Imports.kt	(date 1567069801345)
@@ -21,8 +21,8 @@
     fun toArray(children: Any?): Array<out Child>
 }
 
-abstract external class Component<P : RProps, S : RState>(
-    props: RProps = definedExternally
+abstract external class Component<P : Any, S : Any>(
+    props: P = definedExternally
 ) {
     open val props: P
     var state: S
Index: kotlin-react/src/main/kotlin/react/ReactComponent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- kotlin-react/src/main/kotlin/react/ReactComponent.kt	(revision d94019ba3dae64fd4c1afb3644d8f2ffcfa3f8c1)
+++ kotlin-react/src/main/kotlin/react/ReactComponent.kt	(date 1567069659215)
@@ -84,7 +84,7 @@
     return fn
 }
 
-abstract class RComponent<P : RProps, S : RState> : Component<P, S> {
+abstract class RComponent<P : Any, S : Any> : Component<P, S> {
     constructor() : super() {
         state = jsObject { init() }
     }
@@ -98,7 +98,7 @@
     open fun S.init(props: P) {}
 
     fun RBuilder.children() {
-        props.children()
+        (props as RProps).children()
     }
 
     abstract fun RBuilder.render()
```

Bellow code is a slight modification of this [react hook example](https://github.com/JetBrains/kotlin-wrappers/pull/121#issue-299773226).

```
interface Labels : RProps {
    val counterLabel: String
    val buttonLabel: String
}

val renderCount = functionalComponent<Labels> { props ->

    val (count, setCount) = useState(0)

    useEffect {
        console.log("useEffect $count")
    }

    +"${props.counterLabel} $count"

    button {
        attrs {
            onClickFunction = {
                setCount(count + 1)
            }
        }
        + props.buttonLabel
    }
}

fun RBuilder.renderCount(labels: Labels) {
    child(renderCount, labels)
}
```
When rendering the component **props.buttonLabel** is **undefined**.
I'm trying to use an external component that I have imported as such:

```kotlin
@file:JsModule("react-transition-group")
package react_transition_group

import react.RClass

external val Transition : RClass<dynamic>
```

This component expects a function child (see its doc here: http://reactcommunity.org/react-transition-group/transition).

So, I can use it, but how do I give it a child function?

```kotlin
Transition {
    // How do I pass a child function?>
}
```

I've tried `childList += { trState: String -> ... }` but this yields a React error: "Invariant Violation: Objects are not valid as a React child (found: object with keys {}). If you meant to render a collection of children, use an array instead."