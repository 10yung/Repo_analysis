Is there a way to put an HTML footer so that it only appears on the last page, yet sticks to the bottom of the last page (without overlapping the page body)? The `<footer>`/`position:fixed` method puts it on all pages.
Hey!

Awesome project here - spectacular work.

Unfortunately, I've run into an issue with font-weights and I can't seem to resolve it. I'm working with a font that has several weights available (400, 500, 700), but the 500 weight does not appear to be used in the pdf output of WeasyPrint. It seems to fall back to the 400. When I open an HTML document in Chromium/Firefox, the 500 weight font is definitely rendering. I've gone through the older issues related to font, but didn't come across anything that seemed to be related.

I've downloaded these three fonts:
  - http://tug.ctan.org/fonts/roboto/opentype/Roboto-Regular.otf
  - http://tug.ctan.org/fonts/roboto/opentype/Roboto-Medium.otf
  - http://tug.ctan.org/fonts/roboto/opentype/Roboto-Bold.otf

and placed them in a `/fonts` folder. This is the HTML/CSS I'm using:

```html
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        @font-face {
            font-family: "Roboto";
            font-style: normal;
            font-weight: 400;
            src: url(fonts/Roboto-Regular.otf) format("opentype");
        }

        @font-face {
            font-family: "Roboto";
            font-style: normal;
            font-weight: 500;
            src: url(fonts/Roboto-Medium.otf) format("opentype");
        }

        @font-face {
            font-family: "Roboto";
            font-style: normal;
            font-weight: 700;
            src: url(fonts/Roboto-Bold.otf) format("opentype");
        }

        p:before {
            content: 'Bacon ipsum dolor amet sausage rump tongue';
        }

        body {
            font: 16px serif;
        }

        .normal {
            font-family: 'Roboto';
            font-weight: 400;
        }

        .medium {
            font-family: 'Roboto';
            font-weight: 500;
        }

        .bold {
            font-family: 'Roboto';
            font-weight: 700;
        }
    </style>
</head>
<body>
<p></p>
<p class="normal"></p>
<p class="medium"></p>
<p class="bold"></p>
</body>
</html>
```

And here's the output of `weasyprint -i`:

```bash
System: Linux
Machine: x86_64
Version: #34~18.04.2-Ubuntu SMP Thu Oct 10 10:36:02 UTC 2019
Release: 5.0.0-32-generic

WeasyPrint version: 51
Python version: 3.7.4
Cairo version: 11510
Pango version: 14014
CairoSVG version: 2.4.2
```

Thanks in advance!
Hello,
Thanks for your job. 

It works fine with WeasyPrint==49.

This is the error with version 50 and 51 : 
```
AttributeError: 'TableRowGroupBox' object has no attribute 'index'
  File "django/core/handlers/exception.py", line 41, in inner
    response = get_response(request)
  File "django/core/handlers/base.py", line 217, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "django/core/handlers/base.py", line 215, in _get_response
    response = response.render()
  File "django/template/response.py", line 107, in render
    self.content = self.rendered_content
  File "django_weasyprint/views.py", line 87, in rendered_content
    document = self.get_document()
  File "django_weasyprint/views.py", line 80, in get_document
    return html.render(self.get_css(base_url, url_fetcher))
  File "weasyprint/__init__.py", line 168, in render
    font_config)
  File "weasyprint/document.py", line 393, in _render
    [Page(page_box, enable_hinting) for page_box in page_boxes],
  File "weasyprint/document.py", line 393, in <listcomp>
    [Page(page_box, enable_hinting) for page_box in page_boxes],
  File "weasyprint/layout/__init__.py", line 126, in layout_document
    pages = list(make_all_pages(context, root_box, html, pages))
  File "weasyprint/layout/pages.py", line 804, in make_all_pages
    page, resume_at = remake_page(i, context, root_box, html)
  File "weasyprint/layout/pages.py", line 743, in remake_page
    page_number, page_state)
  File "weasyprint/layout/pages.py", line 554, in make_page
    positioned_boxes, adjoining_margins)
  File "weasyprint/layout/blocks.py", line 63, in block_level_layout
    page_is_empty, absolute_boxes, fixed_boxes, adjoining_margins)
  File "weasyprint/layout/blocks.py", line 77, in block_level_layout_switch
    page_is_empty, absolute_boxes, fixed_boxes, adjoining_margins)
  File "weasyprint/layout/blocks.py", line 130, in block_box_layout
    absolute_boxes, fixed_boxes, adjoining_margins)
  File "weasyprint/layout/blocks.py", line 507, in block_container_layout
    absolute_boxes, fixed_boxes, adjoining_margins)
  File "weasyprint/layout/blocks.py", line 63, in block_level_layout
    page_is_empty, absolute_boxes, fixed_boxes, adjoining_margins)
  File "weasyprint/layout/blocks.py", line 77, in block_level_layout_switch
    page_is_empty, absolute_boxes, fixed_boxes, adjoining_margins)
  File "weasyprint/layout/blocks.py", line 130, in block_box_layout
    absolute_boxes, fixed_boxes, adjoining_margins)
  File "weasyprint/layout/blocks.py", line 552, in block_container_layout
    new_children, absolute_boxes, fixed_boxes)
  File "weasyprint/layout/blocks.py", line 818, in find_earlier_page_break
    child.children, absolute_boxes, fixed_boxes)
  File "weasyprint/layout/blocks.py", line 818, in find_earlier_page_break
    child.children, absolute_boxes, fixed_boxes)
  File "weasyprint/layout/blocks.py", line 809, in find_earlier_page_break
    resume_at = (children[index].index, None)
```

And this is the breadcrumbs: 
```
django.template Exception while resolving variable 'additional' in template 'admin/filter.html'.
django.template Exception while resolving variable 'date_range_filter' in template 'admin/softdeletable_change_list_import_export.html'.
django.template Exception while resolving variable 'errors' in template 'admin/softdeletable_change_list_import_export.html'.
django.template Exception while resolving variable 'is_multipart' in template 'admin/softdeletable_change_list_import_export.html'.
django.template Exception while resolving variable 'non_field_errors' in template 'admin/softdeletable_change_list_import_export.html'.
django.template Exception while resolving variable 'separator' in template 'admin/softdeletable_change_list_import_export.html'.
sqlqueries Request Time: 1.021 seconds
gunicorn.error GET /app/documents/xxx/xxx/pdf/
query SELECT typarray FROM pg_type WHERE typname = 'citext'
query [Filtered]
PDFView : model_name : mymodel
django.template exception while resolving variable 'title' in template 'documents/doc_pdf.html'.
django.template Exception while resolving variable 'showsidebar' in template 'documents/doc_pdf.html'.
django.template Exception while resolving variable 'enable_eco_tax' in template 'documents/doc_pdf.html'.
weasyprint.progress Step 1 - Fetching and parsing HTML - HTML string
weasyprint.progress Step 2 - Fetching and parsing CSS - CSS string
weasyprint Ignored `-moz-column-count: 2` at 702:7, prefixed selectors are ignored.
weasyprint Ignored `-moz-column-gap: 10px` at 703:7, prefixed selectors are ignored.
weasyprint Ignored `-webkit-column-count: 2` at 704:7, prefixed selectors are ignored.
weasyprint Ignored `-webkit-column-gap: 10px` at 705:7, prefixed selectors are ignored.
weasyprint.progress Step 2 - Fetching and parsing CSS - CSS string
weasyprint.progress Step 3 - Applying CSS
weasyprint.progress Step 4 - Creating formatting structure
weasyprint.progress Step 5 - Creating layout - Page 1
exception AttributeError: 'TableRowGroupBox' object has no attribute 'index'
```
On Django 1.11.27 and django-weasyprint==0.5.5

Just to let you now:

print-css.rocks now includes Weasyprint (currently without having checked and value the test results). But feel free to test the Weasysprint results compared to other tools.
I  have changed some terms that makes the description in the documentation vague. and fix some typo errors to make the documentation
easy to understand for all language backgrounds.
We have a forward proxy to get access to the internet, when I try to load raw html and write to a png it goes through and tries to access all the various URL's which proceed to timeout because proxy settings are not configured. There is mention of the URL fetchers and using a custom one, however the documentation does not provide guidance on how to configure proxy details in one. How can I configure proxy details to get this to work?
Using WeasyPrint==51, in a 2-column layout, write_pdf() causes an infinite loop when (page-)break-before: always; is applied to more than 1 block:

```
<!DOCTYPE html>
<html>
  <head>
    <style type="text/css">
      .content {
        columns: 2;
      }

      .page-break {
        break-before: always;
      }
    </style>
  </head>

  <body>
    <div class="content">
      <div>Page 1, column 1</div>
      <div class="page-break">Page 1, column 2</div>
      <div class="page-break">Page 2, column 1</div>
    </div>
  </body>
</html>
```

The same error happens for versions 48, 49 and 50. WeasyPrint==47 works fine. Leaving the second page-break block away, the pdf renders.
Includes commits from @Afoucaul’s #985, fixes #61.

We have a lot of work:
- [ ] Allow users to type something else than ASCII characters.
- [ ] Use the real font used for the input rendering.
- [ ] Allow users not to include PDF inputs, using a CLI/API option.
- [ ] Handle more input types (and don’t crash when meeting an unknown one).
- [ ] Add tests (of course!).
If I add a bit of top margin to a div with multiple columns it jumps to the next page. Here's a minimal test case:

```
<!DOCTYPE html>
<html lang="en">
  <head>
  <title>NEWS</title>
  <meta charset="utf-8">
  <style>
    #columns {
      column-count: 4;
      margin-top: 1em;
    }
    .bigdiv {
      font-size: 36pt;
    }
  </style>
  </head>
  <body>
    <h1>head</h1>
    <div id="columns">
      <div class="bigdiv">these these these</div>
      <div class="bigdiv">big</div>
      <div class="bigdiv">divs</div>
      <div class="bigdiv">should</div>
      <div class="bigdiv">run</div>
      <div class="bigdiv">to</div>
      <div class="bigdiv">the </div>
      <div class="bigdiv">next</div>
      <div class="bigdiv">page</div>
      <div class="bigdiv">these</div>
      <div class="bigdiv">big</div>
      <div class="bigdiv"><img src="file:///tmp/100x400px.png" /></div>
      <div class="bigdiv">divs</div>
      <div class="bigdiv"><img src="file:///tmp/100x400px.png" /></div>
      <div class="bigdiv">should</div>
      <div class="bigdiv"><img src="file:///tmp/100x400px.png" /></div>
      <div class="bigdiv">run</div>
      <div class="bigdiv"><img src="file:///tmp/100x400px.png" /></div>
      <div class="bigdiv">to</div>
      <div class="bigdiv"><img src="file:///tmp/100x400px.png" /></div>
      <div class="bigdiv">the </div>
      <div class="bigdiv"><img src="file:///tmp/100x400px.png" /></div>
      <div class="bigdiv">next</div>
      <div class="bigdiv"><img src="file:///tmp/100x400px.png" /></div>
      <div class="bigdiv">page</div>
      <div class="bigdiv"><img src="file:///tmp/100x400px.png" /></div>
    </div>
  </body>
</html>
```
![100x400px](https://user-images.githubusercontent.com/1779453/71310672-1990f700-2417-11ea-92d9-5f5763fd8015.png)
[columntest.pdf](https://github.com/Kozea/WeasyPrint/files/3991577/columntest.pdf)


It's not critical, as I can work around this by simply adding an empty div with the height I want.
I am unable to render iframe content with WeasyPrint, and see no references in the documentation (or many in the code) in regards to handling of iframes. This is similar to a previous issue (https://github.com/Kozea/WeasyPrint/issues/840) that was closed without resolution. 

I have attempted (https://github.com/Kozea/WeasyPrint/issues/840#issuecomment-478487626) to follow the guidance of the author by ensuring the iframe tag has appropriate style defining explicit height/width, and used a static document with no JS for both the src and srcdoc attributes of the iframe to no avail. Please provide example code or guidance in regard to rendering iframes. 

```
>>> print(cairo.cairo_version())
11600

pip freeze:
cairocffi==1.1.0
CairoSVG==2.4.2
cffi==1.13.2
cssselect2==0.2.2
defusedxml==0.6.0
html5lib==1.0.1
pbr==4.2.0
Pillow==6.2.1
pycparser==2.19
Pyphen==0.9.5
six==1.11.0
stevedore==1.29.0
tinycss2==1.0.2
virtualenv==16.0.0
virtualenv-clone==0.3.0
virtualenvwrapper==4.8.2
WeasyPrint==50
webencodings==0.5.1
```

Test HTML

```
<!doctype html>
<html>
<style>
body iframe {
   width: 720px;
   height: 720px;
}
</style>
<body>
<iframe srcdoc="<html><body><b>XXX</b></body></html>"><b>YYY</b></iframe>
</body>
</html>
```

Expected output (as rendered in browser):

![image](https://user-images.githubusercontent.com/6414463/71088394-32d74080-2196-11ea-97bf-83cfe5c59513.png)

Actual output (as rendered in PDF):

![image](https://user-images.githubusercontent.com/6414463/71088470-674afc80-2196-11ea-9e37-3e5c2c11cac5.png)
