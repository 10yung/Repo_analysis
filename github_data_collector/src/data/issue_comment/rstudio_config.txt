Unnamed lists can now be overriden by another config section (fix https://github.com/rstudio/config/issues/24)
When I use sequences of mappings in YAML format (see example 2.4 on https://yaml.org/spec/1.2/spec.html#id2759963) I can't override this array in another config section. Sequences of mappings from YAML are represented as unnamed lists in R.

Here is a simple example (**section2** values are not overriden with `conf2`):

``` r
library(yaml)
library(tidyverse)
#> Warning: package 'ggplot2' was built under R version 3.6.1
#> Warning: package 'tidyr' was built under R version 3.6.1
#> Warning: package 'dplyr' was built under R version 3.6.1

conf1 <- yaml::yaml.load("
  param1: 123
  param2: 123
  section1:
    param1: test
    param2: 4
    params3: 8
  section2:
    - key: 1
      value: test1
    - key: 2
      value: test2
    - key: 3
      value: test3
")

conf2 <- yaml::yaml.load("
  param1: 456
  section1:
    param1: test_override
    param2: 8
  section2:
    - key: 4
      value: test4
    - key: 5
      value: test5
")

config::merge(conf1, conf2) %>%
  glimpse()
#> List of 4
#>  $ param2  : int 123
#>  $ section1:List of 3
#>   ..$ params3: int 8
#>   ..$ param1 : chr "test_override"
#>   ..$ param2 : int 8
#>  $ section2:List of 3
#>   ..$ :List of 2
#>   .. ..$ key  : int 1
#>   .. ..$ value: chr "test1"
#>   ..$ :List of 2
#>   .. ..$ key  : int 2
#>   .. ..$ value: chr "test2"
#>   ..$ :List of 2
#>   .. ..$ key  : int 3
#>   .. ..$ value: chr "test3"
#>  $ param1  : int 456
```

<sup>Created on 2019-10-11 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

The `attr(,"config")` always points to the `name` requested, regardless of inheritance or use of the "default" value. If inherited, then there is the `$inherits` value in the list, but if the name is not found then the default entry is returned with no indication that it is being used.

Short of using `names(yaml::yaml.load_file("..."))`, is there a way to determine if the named account is not present?

```r
config::get(config = "", file = authfn, use_parent = FALSE)
# $inherits
# [1] "localpg"
# attr(,"config")
# [1] ""
# attr(,"file")
# [1] "C:\\Users\\r2\\.config.yml"
```

Perhaps something like `attr(,"defaultused") <- TRUE` could be a simple start. An extreme solution might provide a vector of inherited names:

```yaml
default:
  user: joe
bob:
  user: bob
def1:
  inherits: bob
def2:
  inherits: def1
def3:
  inherits: def2
```

```r
config::get(config = "def3", file = authfn, use_parent = F)
# $user
# [1] "bob"
# $inherits
# [1] "def2"
# attr(,"config")
# [1] "def3"
# attr(,"file")
# [1] "C:\\Users\\r2\\.config.yml"
# attr(,"inherited")
# [1] "def2" "def1" "bob"
```

(I realize having the default value is important, and that one intent is for it to always return *something* if the file is present and the file is structured correctly with at least a `default:` entry. I'm not suggesting changing that.)
My team is successfully using {config} to stay on top of different client configurations and we're loving it! Especially the inheritance feature is awesome and saves a lot of typing.

Now we were wondering if there is any way to specify values that are referencing other values within the same YAML script. 

The use case behind it is to have a single point of truth for **all** configs as opposed to defining dynamic/linked configs in some other R function(s) (where they might easily be overlooked at some point).

We thought about something like

```
production:
  trials: 30
  cores: !expr config::get("trials") / 10
```

or ideally:

```
production:
  trials: 30
  cores: !expr trials / 10
```
Reproduction steps:

1. Create a new rmarkdown document or shiny application containing the following:
```r
library(config)
c <- config::get()
cat(paste(c$foo, config::is_active('irrelevant')))
```
2. Create a new `config.yml` file in the content's folder:
```yaml
default:
    foo: bar

development:
    foo: development

irrelevant:
    foo: !expr BRRR::skrrrahh(sound = 26)
```
3. Run the content

#### Expected:

Standard output contains "bar", or "development" if `R_CONFIG_ACTIVE` is set to `development`, followed by FALSE.

#### Actual:

`Error in loadNamespace(name) : there is no package called ‘BRRR’`

-------

4. Now install https://github.com/brooke-watson/BRRR using `devtools::install_github('brooke-watson/BRRR')`

5. Run the content

#### Expected:

quiet

#### Actual:

Gucci Mane is played through the speakers irrespective of `R_CONFIG_ACTIVE`'s value.

"bar" or "development" is printed, followed by "FALSE", proving that `irrelevant` is not the config selected.
Would you be open/interested in a PR introducing new YAML types for encrypted `config` values?

See eg https://github.com/daroczig/dbr/blob/master/R/config.R#L32

![image](https://user-images.githubusercontent.com/495736/43737085-4f6531d0-99c0-11e8-9ce1-263f86d18933.png)

(Image source: http://bit.ly/user2018-dbr)

^^ Although that only supports Amazon KMS for now, but extending it with new types would be similarly easy. This way I could drop the custom functions from my `dbr` pkg and use `config`.
Given that there isn't a global standard for yml file structures, this should not be a dependency for reading a config file.

I'd suggest replacing line 58 with`  default_config <- config_yaml[[config]]` to have it check for the presence of the specified config, in the case that `R_CONFIG_ACTIVE` is specified as a value other than default or that a user specifies a config in the function call.

While this would work, I think re-writing that block to more specifically check for `config` as defined in the function call "default" or otherwise, as this step pretty intently looks _strictly_ for "default".

Also, the documentation specifies `R_CONFIG_NAME` as the environment variable. It looks like this feature was not fully implemented in @jjallaire's branch.

Happy to (attempt) to make this change.
I've managed to change all function names so I can use them without clash problem with base::get and base::merge functions.

I'm aware that this changes break the package usage, but I thought it was a change worth sharing with upstream. Even in R studio using this package is problematic in loaded inside an .rprofile 

I've also found a little bug in directory navigation under Linux and R 3.3. The fixes is included in this pull request. If you prefer I can commit that separately 
This causes R to produce the error
`Error during wrapup: evaluation nested too deeply: infinite recursion / options(expressions=)?`

and then get stuck in an infinite error producing loop with the error
`Error in yaml.load(paste(readLines(input, encoding = "UTF-8"), collapse = "\n"),  :`

This is not unexpected but it would be nicer if the `get` function could handle this situation and return `my_config_value` instead of producing an error. Better yet would be special syntax like `<my_config_value>` to tell `!expr` to look for this value in the same config.yaml file.

This feature might be overkill though.
I'm not sure if this is a good idea, but I'll throw it out here: What if `config::get()` could take named dots arguments and evaluate them in `!expr` expressions in config.yml files? This would provide a useful way to add context dependence to configuration without using environment variables.

A practical example: `sparklyr::spark_connect()` calls `sparklyr::spark_config()` which in turn calls `config::get()`. Say you wanted to specify Spark configuration parameters in config.yml, but make them dependent on the `master` argument to `spark_connect()`. If the `master` argument was passed through in the dots to `config::get()`, then you could have a config.yml file like this:

``` yaml
default:
  some.setting: !expr ifelse(master == "local", "foo", "bar")
```