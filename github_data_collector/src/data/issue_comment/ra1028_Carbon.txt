## Checklist
- [x] Reviewed the [README](https://github.com/ra1028/Carbon/blob/master/README.md) and [documents](https://ra1028.github.io/Carbon).  
- [x] Searched [existing issues](https://github.com/ra1028/Carbon/issues) for ensure not duplicated.  

Hey @ra1028 ðŸ‘‹ 
First of all, congrats on such a great project! I've been playing with `Carbon` lately and I think I managed to find a nasty issue with `UITableView` section headers or maybe I'm doing something wrong ðŸ¤” 

## Expected Behavior
Show all section headers and allow self-sizing

## Current Behavior
* First section header is not displayed
* Self-sizing doesn't seem to work

## Detailed Description (Include Screenshots)
* Expected (with standard `UITableView` code)
<img width="545" alt="Screenshot 2019-11-14 at 10 43 59" src="https://user-images.githubusercontent.com/26525777/68850546-20b43f00-06cc-11ea-8239-cbebf9bcabeb.png">

* What I get with Carbon
<img width="545" alt="Screenshot 2019-11-14 at 10 43 57" src="https://user-images.githubusercontent.com/26525777/68850565-290c7a00-06cc-11ea-885c-5003b445baab.png">

## Sample Project: 
[Test.zip](https://github.com/ra1028/Carbon/files/3846089/Test.zip)



## Environment
- Carbon version: What's currently in `master`

- Swift version: 5.1

- iOS version: 13.2

- Xcode version: 11.2

- Devices/Simulators: iPhone 11 Pro

- CocoaPods/Carthage version: Not applicable (Swift Package Manager)

## Checklist
- [x] Reviewed the [README](https://github.com/ra1028/Carbon/blob/master/README.md) and [documents](https://ra1028.github.io/Carbon).  
- [x] Searched [existing issues](https://github.com/ra1028/Carbon/issues) for ensure not duplicated.  

## Expected Behavior
Being able to set `AnyComponent` or `ViewNode` as `tableView.tableFooterView` so it always sticks to the bottom no matter how many cells are displayed.

## Current Behavior
Seems like currently there is no way to set a footer of the whole table view, only within a section:
```swift
renderer.render {
      Section(
        id: "XXX",
        cells: [
          ...,
         ...
        ],
       footer: <FOOTER>
      )
}
```

## Detailed Description (Include Screenshots)
Thanks a lot for the framework. I was curious whether there is way to attach a view to the bottom of the screen using `ViewNode` or `AnyComponent` irregardless of the number of displayed cells (so the spacing between this component and `BottomLayoutGuide` is always fixed). 

## Environment
- Carbon version:
1.0.0-rc.5
- Swift version:
5.0
- Xcode version:
11.1

Hello, 

I'm making a fairly complexe UITableView, and I have some weird behaviours. 
As I scroll down, mostly no problem. As I scroll up I get really weird behaviours, like blank space (missing components?) and wrongly sized component. 

Here is two images, one normal and one as I scroll up. 
![IMG_0496](https://user-images.githubusercontent.com/535509/67415058-92650580-f5c4-11e9-9ed3-3688e7a2173a.PNG)
![IMG_0495](https://user-images.githubusercontent.com/535509/67415057-92650580-f5c4-11e9-9ab0-73755bd16ac5.PNG)

Here is some code, this is a big project, it would be very hard for me to extract and isolate this code to make a self contain package in order to reproduce it. 
But maybe something is wrong in my approach. 

Here is my datasource
<img width="1034" alt="Screenshot 2019-10-23 at 18 41 18" src="https://user-images.githubusercontent.com/535509/67415151-ca6c4880-f5c4-11e9-851a-a803d9fc4e4b.png">

And also the code of one of my component as an example

```Swift
struct ReadingActivityQuoteComponent: IdentifiableComponent {
    let quote: Quote?
    let isTop: Bool
    
    var id: String {
        quote?.id ?? "quoteLoading"
    }
    
    class View: UIView {
        var quote: Quote? {
            didSet {
                render()
            }
        }
        
        var isTop: Bool = false {
            didSet {
                if isTop {
                    cardView.maskedCorners = [.topLeft, .topRight]
                } else {
                    cardView.maskedCorners = []
                }
            }
        }
        
        let quoteLabel = QuoteDarkerLeft(frame: .zero)
        let cardView = CardView(frame: .zero)
        
        init() {
            super.init(frame: CGRect.zero)
            
            cardView.maskedCorners = []
            
            quoteLabel.showAnimatedGradientSkeleton()
            quoteLabel.numberOfLines = 0
        
            addSubview(cardView)
            cardView.addSubview(quoteLabel)

            
            constrain(self, cardView, quoteLabel) { parent, card, quote in
                card.top == parent.top
                card.left == parent.readableContentGuide.left + 12
                card.right == parent.readableContentGuide.right - 12
                card.bottom == parent.bottom
                
                quote.top == card.top + 12
                quote.left == card.left + 12
                quote.right == card.right - 12
                quote.bottom == card.bottom - 12
            }
        }
        
        required init?(coder: NSCoder) {
            fatalError("init(coder:) has not been implemented")
        }
        
        func render() {
            quoteLabel.hideSkeleton()
            quoteLabel.text = quote?.text
        }
    }
    
    func renderContent() -> ReadingActivityQuoteComponent.View {
        View()
    }
    
    func render(in content: ReadingActivityQuoteComponent.View) {
        content.quote = quote
        content.isTop = isTop
    }
}

```

Coming from a lot of SwiftUI lately, Carbon is really awesome to use in the UIKit world. But I'm having quite some issues right now. 
Again, I have no idea if my architecture is wrong or if I'm hitting some underlying Carbon or UITableView related bugs. 
I'm self sizing every component with auto layout using Cartography. 

## TODO
- [x] Enable self-sizing
- [ ] Add `ReferenceSizeComponentWrapper`.
- [ ] Remove `Component.intrinsicContentSize(for:)` added in RC5
- [ ] Add or remove tests.
- [ ] Update README and docs

## Checklist
- [ ] All tests are passed.  
- [ ] Added tests.  
- [ ] Documented the code using [Xcode markup](https://developer.apple.com/library/mac/documentation/Xcode/Reference/xcode_markup_formatting_ref).  
- [ ] Searched [existing pull requests](https://github.com/ra1028/Carbon/pulls) for ensure not duplicated.  

## Description
<!--- Describe your changes in detail -->
SwiftUI can't support self-sizing, but we can one approach that calculating the size of content at the appearing event with GeometryReader in background.

## Related Issue
<!--- This project only accepts pull requests related to open issues -->
<!--- If suggesting a new feature or change, please discuss it in an issue first -->
<!--- If fixing a bug, there should be an issue describing it with steps to reproduce -->
<!--- Please link to the issue here: -->
N/A

## Motivation and Context
<!--- Why is this change required? What problem does it solve? -->
<!--- If it fixes an open issue, please link to the issue here. -->
Further clear and intuitive API for the Carbon component in the SwiftUI.

## Impact on Existing Code
<!--- Tell us the impact on existing code as far as you understand. -->
Remove `Component.intrinsicContentSize(for:)` added in RC5

## Screenshots (if appropriate)

```swift
struct KyotoTop_Previews: PreviewProvider {
    static var previews: some View {
        KyotoTop()
    }
}
```

<img width="200" src="https://user-images.githubusercontent.com/7347118/67413814-d70c9300-f5fc-11e9-9102-d80dde80ee28.png"> <img width="200" src="https://user-images.githubusercontent.com/7347118/67487947-cc5c0780-f6a9-11e9-972a-23f652af7e4d.gif">

