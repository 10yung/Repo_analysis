None
**What happened?**:
pachd 1.9.11 failed to start up on an OpenShift environment where pachd does not run as root, because the githook server is hard-coded to use port 999 and that port is privileged.

**What you expected to happen?**:

Attempted to configure the githook server using the api-git-port key in the spec for pachd to 1999, but that had no effect. 

````
               {
                "name": "api-git-port",
                "containerPort": 999,
                "protocol": "TCP"
              },
```
There appears to be a missing corresponding environment variable for setting the port?

**How to reproduce it (as minimally and precisely as possible)?**:

1. Use a privilege-limited k8s environment, like OpenShift
2. Deploy Pachyderm using our recommendations: https://docs.pachyderm.com/latest/deploy-manage/deploy/openshift/, in particular setting `WORKER_USES_ROOT` to `false`.  Modify all ports to be above 1024.
3. Note that pachd crashes with a `permission denied` on port 999 for the githook server

**Anything else we need to know?**:

**Environment?**:
- Kubernetes version (use `kubectl version`): OpenShift 
- Pachyderm CLI and pachd server version (use `pachctl version`): 1.9.11
- Cloud provider (e.g. aws, azure, gke) or local deployment (e.g. minikube vs dockerized k8s): on premisies
- OS (e.g. from /etc/os-release):
- Others:

**What happened?**: `pachctl` [now checks the ClusterID of the cluster it's communicating with](https://github.com/pachyderm/pachyderm/pull/4442) to ensure its not communicating with a different cluster than intended. In a few cases, I've now seen the issue where it's reporting an unexpected ClusterID when it shouldn't, producing errors like this:

```
error connecting to pachd: connected to the wrong cluster (context cluster ID = "f19b780a736c4286bc0ea929bb4e79a4" vs reported cluster ID = "8080955e8ac54bc19a67af3f7a33e781")
```

The dev reset script and and re-deploys will appropriately scrub the context's ClusterID, however there appears to be other cases where the ClusterID is not scrubbed. I'm not sure where yet.

**Workaround**: If you are currently facing this issue:

1) Open your pachyderm config file. By default it's at `~/.pachyderm/config.json`, but may be overridden via the `PACH_CONFIG` environment variable.

2) Remove the `cluster_id` entry in your active context's config.


If you change the context while inside the pachctl shell, the prompt still shows the old context. For example, I had `aws-4` set as a context, and I ran `pachctl config set active-context`. It seems that the context was switched, but the prompt remains `aws-4` (see the screenshot.) Also, you can preview the list of contexts in from the `pachctl shell`.

![Screen Shot 2020-01-15 at 1 06 11 PM (2)](https://user-images.githubusercontent.com/5317992/72471951-7c687a80-3798-11ea-984e-024634da6d16.png)
![Screen Shot 2020-01-15 at 1 10 50 PM (2)](https://user-images.githubusercontent.com/5317992/72472062-b33e9080-3798-11ea-9876-80d78d0f0f5b.png)

If this is by design, should we mention this a limitation?

**Environment?**:
- Kubernetes version (use `kubectl version`):
- Pachyderm CLI and pachd server version (use `pachctl version`):
- Cloud provider (e.g. aws, azure, gke) or local deployment (e.g. minikube vs dockerized k8s):
- OS (e.g. from /etc/os-release):
- Others:
Right now, `make doc` both generates the docs for `pachctl` (outputting markdown) and copies our existing markdown from `docs/master` to `docs/1.9.x` (or whatever the latest release is) as part of our release process. We'd like change it in a few ways:
* `pachctl` docs for `master` should be generated dynamically in `netlify`. That way the only time we have to run `make doc` should be right before a release, reducing the number of people who need to run it
  * To make sure we preserve `pachctl` docs describing old releases, `make doc` should generate the `pachctl` docs for `master` and then copy them into the `1.9.x` (/latest) folder (and then remove them from `master` again) as part of our release process. Post-release, Netlify will still be responsible for the `pachctl` docs in `master`, but this way the docs in `1.9.x` are frozen at release time.
* As part of our current release process, we need to update nav in the `mkdocs-<version>.yaml` file with the list of pachctl files manually. This should be done automatically by `make doc`
* Ideally, `make doc` should run in a docker container, so that it works on macOS (BSD sed is quite different from GNU sed, so `etc/build/doc` almost, but doesn't quite, work on macOS. In fact, ideally we should be able to do Pachyderm releases from a mac.
* To avoid confusion, I think we should rename `make doc` and `make doc-custom` to `make release-docs` and `make custom-release-docs`, so that it's clear that it should only have pre-release logic. Currently we need to use it to update our `pachctl` docs between releases, which conflicts with other parts our `make doc` process that expects the repo in which it's run to be in a pre-release state
Currently, the [installation instructions](https://docs.pachyderm.com/latest/getting_started/local_installation/) don't include instructions for installing terminal completions. These instructions are necessary because [it's not possible to automatically install the completions.](https://github.com/pachyderm/pachyderm/issues/2371)

See the [kubectl installation docs](https://kubernetes.io/docs/tasks/tools/install-kubectl/#optional-kubectl-configurations) for an example docs on how to install completion and ensure the completions are functional in bash/zsh. Our installation instructions would be almost identical, except we offer some utility functionality to help install the completions, via the `--install` and `--path` flags for `pachctl completion bash` and `pachctl completion zsh`.

Blocked by #4494, which adds zsh completion and changes the completion command line syntax.
Closes #3035 

Docs issue: https://github.com/pachyderm/pachyderm/issues/4495
**What happened?**:
While using `pachctl shell`, I typed `list file` and selected a repository from the list. I did not select a branch and then pressed `DELETE` a few times to go back to the @ sign after the repo name. And then the shell crashed with the following error:

```
E0110 15:09:26.863935    5072 portforward.go:385] error copying from local connection to remote stream: tls: use of closed connection
context:(aws-4) >>> list file test3@ panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x10 pc=0x2400755]

goroutine 1 [running]:
github.com/pachyderm/pachyderm/src/server/cmd/pachctl/shell.FileCompletion(0x0, 0x0, 0xc00046389a, 0x6, 0x0, 0x0, 0x0)
	src/server/cmd/pachctl/shell/completions.go:98 +0x875
github.com/pachyderm/pachyderm/src/server/cmd/pachctl/shell.(*shell).suggestor(0xc00002a910, 0xc000463890, 0x10, 0x10, 0x0, 0x9, 0x10)
	src/server/cmd/pachctl/shell/shell.go:92 +0x490
github.com/c-bata/go-prompt.(*CompletionManager).Update(...)
	/home/jdoliner/go/pkg/mod/github.com/c-bata/go-prompt@v0.2.3/completion.go:69
github.com/c-bata/go-prompt.(*Prompt).Run(0xc000031c00)
	/home/jdoliner/go/pkg/mod/github.com/c-bata/go-prompt@v0.2.3/prompt.go:95 +0x6a6
github.com/pachyderm/pachyderm/src/server/cmd/pachctl/shell.(*shell).run(0xc00002a910)
	src/server/cmd/pachctl/shell/shell.go:124 +0x122
github.com/pachyderm/pachyderm/src/server/cmd/pachctl/shell.Run(...)
	src/server/cmd/pachctl/shell/shell.go:129
github.com/pachyderm/pachyderm/src/server/cmd/pachctl/cmd.PachctlCmd.func3(0x3e03868, 0x0, 0x0, 0xc000485c90, 0xc000485cb8)
	src/server/cmd/pachctl/cmd/cmd.go:454 +0x56
github.com/pachyderm/pachyderm/src/server/pkg/cmdutil.RunFixedArgs.func1(0xc00026c280, 0x3e03868, 0x0, 0x0)
	src/server/pkg/cmdutil/cobra.go:24 +0x135
github.com/spf13/cobra.(*Command).execute(0xc00026c280, 0x3e03868, 0x0, 0x0, 0xc00026c280, 0x3e03868)
	/home/jdoliner/go/pkg/mod/github.com/spf13/cobra@v0.0.6-0.20191202130430-b04b5bfc50cb/command.go:833 +0x2aa
github.com/spf13/cobra.(*Command).ExecuteC(0xc00058fb80, 0x0, 0x0, 0xc000485e30)
	/home/jdoliner/go/pkg/mod/github.com/spf13/cobra@v0.0.6-0.20191202130430-b04b5bfc50cb/command.go:917 +0x2fb
github.com/spf13/cobra.(*Command).Execute(...)
	/home/jdoliner/go/pkg/mod/github.com/spf13/cobra@v0.0.6-0.20191202130430-b04b5bfc50cb/command.go:867
main.main.func1(0x0, 0x0)
	src/server/cmd/pachctl/main.go:20 +0x55
main.main()
	src/server/cmd/pachctl/main.go:21 +0xbc
```
<img width="1287" alt="Screen Shot 2020-01-10 at 3 09 57 PM" src="https://user-images.githubusercontent.com/5317992/72192739-80248780-33bb-11ea-99d9-0bae2c427ecc.png">

**What you expected to happen?**:
To be able to get back to the list of branches without shell crashing.
**How to reproduce it (as minimally and precisely as possible)?**:

1. Create two repos with a branch.
1. Enter the shell.
1. Select `list` from the dropdown.
1. Select file.
1. Select a repo and press spacebar. Because you haven't selected a branch, you can still select another repo.
1. Select another repo.
1. Try to delete the second repo by pressing DELETE/BACKSPACE.


**Anything else we need to know?**:

**Environment?**:
- Kubernetes version (use `kubectl version`): 1.16
- Pachyderm CLI and pachd server version (use `pachctl version`): 1.9.10
- Cloud provider (e.g. aws, azure, gke) or local deployment (e.g. minikube vs dockerized k8s):
- OS (e.g. from /etc/os-release):
- Others:

None