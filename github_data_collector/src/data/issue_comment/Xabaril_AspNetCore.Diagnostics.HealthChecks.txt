I would like to be able to set what topic the health check is producing messages to.
I use Sentry and every time I have an UnHealthy in my project it generates an entry, which causes an overload in it, is there any way to avoid it?
Greetings

I have noticed that the methods (AddKey, AddCertificate) within the AzureKeyVaultOptions class are not available in the NugetPackage release 2.2.0 is it possible to get a release for this?

Thanks
Im working with one of your samples and I cant make the timeline to work. The ui loads fine, but the timeline appears empty. I've tried working this out with the "HealthCheckDatabaseConnectionString" but that doesn't appear to be the problem. 
Builds on top of #387 to fully resolve #351. However, this PR introduces potentially breaking changes, while #387 can safely be merged as-is.
[SkyAPM-dotnet](https://github.com/SkyAPM/SkyAPM-dotnet) is the .NET/.NET Core instrument agent for Apache SkyWalking.

Also use DiagnosticSource Listener to implement. 
This is a little step in the right direction in terms of #351. It is not a breaking change, and it still doesn't fully resolve the issue, but it reduces the `BuildServiceProvider` calls by one at least.

I will make an additional PR later for the rest.
When using `AddDiskStorageHealthCheck`, `setup` argument allow us to add several drive limit  checks through `AddDrive`:

``` csharp
healthCheckBuilder.AddDiskStorageHealthCheck(diskOptions =>
{
    diskOptions.AddDrive(driveName: "c:\\", 100);
    diskOptions.AddDrive(driveName: "f:\\", 300);
});
```

but `DiskStorageHealthCheck.CheckHealthAsync` implementation stops from the first non-compliance ([source code](https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/blob/55a2915506fc2c9c3c8eda639913d55b795b1959/src/HealthChecks.System/DiskStorageHealthCheck.cs#L32)).

In the case where multiple disks have exceeded the threshold, only first one is reported to `ResponseWriter` provided to `UseHealthChecks`.

It would be desirable to be able to report each non-conformance (for exemple using multiple lines in the description) rather than let an administrator discover them in several tries.

This behavior would also be aligned with the general behavior where each registered `IHealthCheck` are checked regardless of the result of the previous one.

This could be made opt-in with a bool CheckAllDrives in `DiskStorageOptions`

I know I can use:
``` csharp
healthCheckBuilder.AddDiskStorageHealthCheck(
    setup: diskOptions =>diskOptions.AddDrive(driveName: "c:\\", 100),
    name: "diskstorage " +  "c:\\");

healthCheckBuilder.AddDiskStorageHealthCheck(
    setup: diskOptions =>diskOptions.AddDrive(driveName: "f:\\", 00),
    name: "diskstorage " +  "f:\\");
```
but the hierarchical approach seems to be more elegant than flat one.
I'm using .net core 2.2.
The health endpoint works well and returns json as expected but ui gives an empty page and in the console I see the error: File: healthchecks-bundle.js, Line: 1, Column: 4388.  ("Uncaught SyntaxError: Unexpected token {" in .healthchecks-bundle.js:1.)
I work in a closed environment (I.E No internet connection).

Startup.cs

      public class Startup{
          public Startup(IConfiguration configuration)
          {
                Configuration = configuration;
          }

          public IConfiguration Configuration { get; }

          // This method gets called by the runtime. Use this method to add services to the container.
         public void ConfigureServices(IServiceCollection services)
         {
               services.AddDbContext<Model>(options => 
                     options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

             // Health checks services
             services
                 .AddHealthChecks()
                .AddMemoryHealthCheck("memory")
               .AddSqlServer(Configuration["ConnectionStrings:DefaultConnection"]);

        services.AddHealthChecksUI();    
        services.AddMvc();
      }

    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
    public void Configure(IApplicationBuilder app, IHostingEnvironment env)
    {
        if (env.IsDevelopment())
        {
            //app.UseBrowserLink();
            app.UseDeveloperExceptionPage();
        }
        else
        {
            app.UseExceptionHandler("/Home/Error");
        }

        app.UseHealthChecks("/health", new HealthCheckOptions
        {
            Predicate = _ => true,
            ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse
        });
        app.UseHealthChecksUI(setup =>
            {
                setup.UIPath = "/health-ui";
            });
            //Also tried: app.UseHealthChecksUI();

         app.UseMvc(routes =>
         {
             routes.MapRoute(
                 name: "default",
                 template: "{controller=Home}/{action=Index}/{id?}");

             routes.MapRoute(
                 name: "defaultApi",
                 template: "api/{controller=MyController}/{action=Get}/{value?}");
         });   } }

appsettings.json

      {
          "HealthChecksUI": {
                "HealthChecks": [
                 {
                      "Name": "HealthChecksService",
                      "Uri": "http://localhost:42008/health"
                  }
                ],
           "Webhooks": [],
           "EvaluationTimeInSeconds": 10,
           "MinimumSecondsBetweenFailureNotifications": 60
        } }

I also tried using HealthChecks-UI since few articles online used this instead of HealthChecksUI.

**Any idea? I'm desperate** :-(
