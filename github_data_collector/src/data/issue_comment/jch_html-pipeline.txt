Including, but not necessarily limited to:

* [`address`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address)
* [`article`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article)
* [`aside`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside)
* [`footer`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer)
* [`header`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header)
* [`main`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main)
* [`section`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section)

and maybe [`nav`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav)?

I don’t know if I need to make the case for the value and safety of these tags? Personally I just really ❤️ semantic markup, it makes my :neckbeard: self happy. But if anyone asks “why” I’ll dig up some good links to make the case.

Thanks!
Would you be open to a pull request to add a @team_mention_filter? It would be a close duplicate of the (user) [@mention_filter](https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/%40mention_filter.rb) but search for the @org/team pattern instead.
If you use some markup like this:

~~~
`aaaaa`
-------

bbbbb
~~~

I would expect this result:

~~~
#aaaaa
~~~

however what is generated is:

~~~
#codeaaaaacode
~~~

https://github.com/jch/html-pipeline/blob/af66272dc34e13f48fff97c3b7b42e64e82877f2/lib/html/pipeline/toc_filter.rb#L28-L64
Seems no reason for it

please and thank you!
`cellpadding` & `cellspacing` table attributes are not supported in HTML5. 

Should they be removed from whitelist?

https://github.com/jch/html-pipeline/blob/642e9226929fa667e3513233c130186195880b24/lib/html/pipeline/sanitization_filter.rb#L59
`align="..."` is deprecated and the non-deprecated alternative is using CSS. however, the sanitation filter strips inline CSS. There should be an exception for this.

If this issue is not fixed, github/markup#163 can never be fixed (it has been closed without proper reason and should be open), and github/markup#1222 can never be finished.
This refactor extracts methods for building a table of contents. The purpose of the refactor is to make it easier for third-party developers to use this class, subclass it, and override the building methods.
Replace sequences of punctuation/spaces in one sweep rather than delete punctuation, and then replace spaces. As it stands, "Foo&Bar" becomes "foobar" and "Foo & Bar" becomes "foo--bar".
Copying emojis from Github and pasting them into Unicode-aware applications that do not support (proprietary) short codes with colons is currently broken.

In [emoji_filter.rb](https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/emoji_filter.rb#L90):

```` ruby
      # Default attributes for img tag
      def default_img_attrs(name)
        {
          "class" => "emoji".freeze,
          "title" => ":#{name}:",
          "alt" => ":#{name}:",
          "src" => "#{emoji_url(name)}",
          "height" => "20".freeze,
          "width" => "20".freeze,
          "align" => "absmiddle".freeze,
        }
      end
````

The alternative textual representation of an image of a Unicode emoji is of course the emoji itself! Therefore, line 90 should read something like this: `"alt" => "#{code}",` or `"alt" => "#{emoji_code(name)}",`, probably using [`unicode_aliases.first`](https://github.com/github/gemoji/blob/master/lib/emoji/character.rb#L37) from gemoji. 

Custom "emojis" should probably use ``#{name}` without colons.

My ruby-fu is sadly not up for the task, so I'm not providing a PR.
I'm currently looking at various options for producing code difference (side-by-side/inline) with syntax highlighting (based on language). One option I'm using for most of my needs is Redcarpet/Coderay with Diffy, but I am sanitizing the intermediate html, produced by either of the   layers (difference/highlighting) first, before putting the next layer, so looking for a cleaner way. Also the results are not that great when it comes to viewing. So just dropping this as an issue here, as the Readme suggests, for a filter.