Doing some cursory Googling, this still seems to be the best 'nice node repl' around, but the last code push was like 2016, and there are a bunch of outdated package warnings when using it:
```
warning nesh > lodash-node@3.10.2: This package is discontinued. Use lodash@^4.0.0.
warning nesh > intdoc > lodash-node@3.1.0: This package is discontinued. Use lodash@^4.0.0.
warning nesh > babel-core > minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue
```

I figure before I fall in love with it.. is there any chance of it actually being currently maintained? And/or, are there more active alternatives you would point me to instead?
![image](https://user-images.githubusercontent.com/29718037/29282214-de96659e-80d6-11e7-8bf2-e317a9389a58.png)

Git-bash Windows 10 

TERM is xterm. Changing to cygwin didn't fix it. Cursor up does work correctly if Nesh is launched via powershell. 
```
$ cat ./src/storage.js 

export const sqrt = Math.sqrt;
export function square(x) {
    return x * x;
}
export function diag(x, y) {
    return sqrt(square(x) + square(y));
}
```

OK this is a pretty basic object. I'll try to import it:  

```
~/projects/StarsApp @ Magni (jcollum) 
$ nesh -b
Babel 5.8.38 on Node v7.8.0
Type .help for more information
babel> import './src/storage';
TypeError: Cannot read property 'error' of undefined
    at OptionManager.mergeOptions (/Users/jcollum/.nvm/versions/node/v7.8.0/lib/node_modules/nesh/node_modules/babel-core/lib/transformation/file/options/option-manager.js:126:28)
    at OptionManager.addConfig (/Users/jcollum/.nvm/versions/node/v7.8.0/lib/node_modules/nesh/node_modules/babel-core/lib/transformation/file/options/option-manager.js:107:10)
    at OptionManager.findConfigs (/Users/jcollum/.nvm/versions/node/v7.8.0/lib/node_modules/nesh/node_modules/babel-core/lib/transformation/file/options/option-manager.js:168:35)
    at OptionManager.init (/Users/jcollum/.nvm/versions/node/v7.8.0/lib/node_modules/nesh/node_modules/babel-core/lib/transformation/file/options/option-manager.js:229:12)
    at compile (/Users/jcollum/.nvm/versions/node/v7.8.0/lib/node_modules/nesh/node_modules/babel-core/lib/api/register/node.js:117:22)
    at normalLoader (/Users/jcollum/.nvm/versions/node/v7.8.0/lib/node_modules/nesh/node_modules/babel-core/lib/api/register/node.js:199:14)
    at Object.require.extensions.(anonymous function) [as .js] (/Users/jcollum/.nvm/versions/node/v7.8.0/lib/node_modules/nesh/node_modules/babel-core/lib/api/register/node.js:216:7)
    at Module.load (module.js:488:32)
    at tryModuleLoad (module.js:447:12)
    at Function.Module._load (module.js:439:3)
```

Key line: 

`TypeError: Cannot read property 'error' of undefined
    at OptionManager.mergeOptions (/Users/jcollum/.nvm/versions/node/v7.8.0/lib/node_modules/nesh/node_modules/babel-core/lib/transformation/file/options/option-manager.js:126:28) ` 

I'm not sure what I'm doing wrong. The error isn't much help. 
es6/7 features are much better than coffescript

we could try to use this: https://github.com/decaffeinate/decaffeinate

It's always reproducible on my machine. I tried to reproduce it with other code but failed. Currently the exact reproducible code is:

```javascript
function construct(f) {
let newObject = Object.create(f.prototype);
newO
```

The nesh will crash when you press tab key right after the "newO". Here's the screenshot:

![image](https://cloud.githubusercontent.com/assets/3524125/20843895/4f21bda0-b88b-11e6-8d88-69dc8c14151e.png)

Installed nesh using
`npm install -g nesh`
Warnings were returned, but no errors

Running `nesh --plugins` returns the following error:

`$ nesh --plugins
/data/data/com.termux/files/usr/lib/node_modules/nesh/lib/nesh.js:173                                 return callback("Could not find plugin '" + name + "': " + e + "!");
                                                                   ^

RangeError: Maximum call stack size exceeded
    at Object.nesh.loadPlugin (/data/data/com.termux/files/usr/lib/node_modules/nesh/lib/nesh.js:173:68)
    at /data/data/com.termux/files/usr/lib/node_modules/nesh/lib/plugins/autoload.js:61:21      at exports.setup (/data/data/com.termux/files/usr/lib/node_modules/nesh/lib/plugins/autoload.js:74:9)                                                                                   at callPluginMethod (/data/data/com.termux/files/usr/lib/node_modules/nesh/lib/nesh.js:70:14)
    at Object.nesh.loadPlugin (/data/data/com.termux/files/usr/lib/node_modules/nesh/lib/nesh.js:185:14)
    at /data/data/com.termux/files/usr/lib/node_modules/nesh/lib/plugins/autoload.js:61:21      at exports.setup (/data/data/com.termux/files/usr/lib/node_modules/nesh/lib/plugins/autoload.js:74:9)                                                                                   at callPluginMethod (/data/data/com.termux/files/usr/lib/node_modules/nesh/lib/nesh.js:70:14)
    at Object.nesh.loadPlugin (/data/data/com.termux/files/usr/lib/node_modules/nesh/lib/nesh.js:185:14)
    at /data/data/com.termux/files/usr/lib/node_modules/nesh/lib/plugins/autoload.js:61:21  $`

https://github.com/building5/node-promirepl :heart:

I'll probably write a PR for this, since it's just mostly <s>copying</s>forking their code, and can be completely optional via the `.promise` togglability

Hey,
I'm using a 3rd-party plugin of sublime text 3 ,named "worksheet".
It can do inline evaluation code such as nodejs,etc.
By given the following params,it works(running on a js file located at **D:\ drive** on **Windows10X64**):
`{  
    "worksheet_languages": {

```
    "JavaScript (Babel)": {
        "cmd": "nesh -b ",
        "prompt": ["babel> ", "\\.\\.+ "],
        "ignore": ["^\\n"]
    }        
}
```

}`

However, everytime I run this evaluation,it will give me a warning that
`Error in plugin history:
// > Error: ENOENT: no such file or directory, open 'D:\Users\mzvast\.babel_history'
`
If I copy the js file to **C:\ drive** ,then everything is fine.
So,It seem the nesh not getting the process.env.HOME right.
Then,I set a symlink from C:\Users\mzvast.babel_history to D:\Users\mzvast.babel_history,everything is fine again.

But this is hacking,Not a solution.So anyone encountered this issue?Help me figure it out,thx~

I understand current implementation of history is by lines only; same as in bash or python REPL; but came from python world, I usually use ipython (which is a 3rd party pip package) instead of the default python shell that provides additional features like history persistence, and this nice feature: multi lines editing in history

if node doesn't want to improve its default REPL shell line editing experience, I would wish this nice feature can be done by some 3rd party project like this Node Enhanced Shell, or by a plugin

``` console
âž¸ ~/.local/bin/ipython
Python 2.7.10 (default, Oct 14 2015, 16:09:02) 
Type "copyright", "credits" or "license" for more information.

IPython 4.1.1 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: def fibonacci(n):
   ...:     a, b = 1, 1
   ...:     while a < n:
   ...:         a, b = a+b, a
   ...:     return a
   ...: 

In [2]: fibonacci(3)
Out[2]: 3

In [3]: fibonacci(4)
Out[3]: 5

In [4]: fibonacci(18)
Out[4]: 21

In [5]: def fibonacci(n):                  <= here is brought by arrow up key, it can find back multi lines for editing
    a, b = 1, 1
    while a < n:
        a, b = a+b, a
    return a
```
