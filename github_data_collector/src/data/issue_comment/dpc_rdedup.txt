Would it be possible to create a [Homebrew](https://brew.sh/) formula for rdedup? Maybe it would be possible to use formulas of other Rust-based projects as a starting point. The build steps for macOS seem to be documented in #136.
Can it be used to backup filesystem images (e.g. LVM2 snapshots), for them to be read-only-mounted later (without extracting fully)?
While experimenting with rdedup on my RAM limited VPS I noticed that the init and load commands used around 1GB of memory. This caused the program to swap which made it rather slow. `rdedup store` does not suffer from the issue and is basically instant.

I ran `/usr/bin/env time -v rdedup -vvv init` on my desktop. -vvv didn't seem to reveal anything enlightening, but time showed that the program had a lot of page faults:
```
Maximum resident set size (kbytes): 1054192
Average resident set size (kbytes): 0
Major (requiring I/O) page faults: 0
Minor (reclaiming a frame) page faults: 262849
```
I'm running rdedup 3.1.1, and both machines are on NixOS 19.03.
Dear Dawid,
Could you be so kind to generate ```.exe``` for the rest of us who are mere Windows users w/o compiler?
Trying to backup a Maildir I'm seeing quite a few of these lines in the logs:

```
thread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: "No such file or directory" }', libcore/result.rs:945:5
```
It would be helpful to include the filename in the panic messages so this gets easier to debug.

I'm using rdup with rdedup like the README example shows. Has someone verified that filenames with spaces and special characters are handled correctly?

EDIT: I just noticed that I'm on a rather old rdedup version: 3.0.1
https://github.com/gyscos/zstd-rs/issues/34#issuecomment-317664657
The main first point of contact for new users is https://github.com/dpc/rdedup - and the rendering of the README.md which is automatically shown.  Adding some content from https://github.com/dpc/rdedup/wiki/My-original-use-case-(old-README.md) would get the message over more clearly, e.g. the unique features of rdedup such as the ability to securely backup multiple hosts with compression and de-duplication, whilst still having all hosts be "write only"...
Hi,

It seems rdedup-lib uses a version of the base64 library which is vulnerable to security issues. Please refer to https://github.com/RustSec/advisory-db/blob/master/Advisories.toml#L53 .

patch commit : https://github.com/alicemaz/rust-base64/commit/24ead980daf11ba563e4fb2516187a56a71ad319
patched version : [">= 0.5.2"]
used version : base64 = "0.4.0"

This is done using crates.io data. Feel free to close this issue if it's not relevant.

Thanks 
Would you also like to implement some error correction code like e.g. *Reed-Solomon*.  There's already a mature [crate](https://crates.io/crates/reed-solomon) in crates.io?

*Bup* ist doing it by just running the `par2` tool over the archive, but I don't like this approach.


* `writev` - doesn't seem to make a difference
* `fallocate` - maybe? blocked on https://github.com/nix-rust/nix/issues/596
* `O_DIRECT` - to prevent cache pollution? or `fadvise`?