As per title, Swave website is inaccessible.
While the documentation already contains a few hopefully interesting ["show-off" examples](http://swave.io/usage/show-off/overview.html) we can always use more.

This ticket serves as a "standing" issue to provide a ticket number that can be used in PRs contributing more examples.
It'd be great if all code examples on http://swave.io would be fully linked in a way that allows one to simply click on the identifier of a transformation to get to the respective documentation page.

Once we get #19 done, and their is already a complete (automatic) index of all transformations available, it shouldn't be too hard to hook into the `@@snip` directive, identify all transformation identifiers and inject the respective links.
Adding / renaming / removing transformations currently requires a manual update of the various index locations from where the transformation page is being referenced.

Once https://github.com/lightbend/paradox/issues/35 is resolved it should be possible to write a custom paradox directive which parses the transformation sources and generates the respective documentation indices automatically.
We currently don't run all tests on travis because the tests tagged as `NotOnTravis` aren't stable enough due to timing issues. Apart from having no build status info for the respective logic our test coverage data are therefore incorrect (too low).

The task here is to tweak the `NotOnTravis` tests until they run smoothly on Travis and then remove the `NotOnTravis` tags.

Solution (after the release of version 1.0!):
Integrate the [sbt-mima-plugin](https://github.com/typesafehub/migration-manager/wiki/Sbt-plugin) into the build in order to be able to properly manage binary compatibility.
See, for example, the shapeless build for inspiration.

Especially synchronous pipelines/graphs, which don't need to dispatch onto any Executors (which aren't readily available in a non-JVM environment), should work nicely with scala.js.

Solution: enable scala.js support by modifying the build setup and properly separating dependencies.

Problem:
Users have very little information on
- the core entry points to the API
- the exact mechanics of each of the available stream operations
- the inner workings / limitations / guidelines

Additionally contributors don't have any (technical) information on the best process for contributing, especially with regard to adding new operations.

Proposed solution:
Put up http://swave.io and add proper documentation. :)
