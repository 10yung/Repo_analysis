<!--
⚠️ If you do not respect this template, your pull request will be closed.
⚠️ Your pull request title should be short detailed and understandable for all.
⚠️ Also, please add it in the CHANGELOG file under Unreleased section.
⚠️ If your pull request fixes an open issue, please link to the issue.

✅ I have added the tests to cover my changes.
✅ I have updated the documentation accordingly.
✅ I have read the CONTRIBUTING document.
-->

### Summary



### Details and comments



I could not access the image in the algorithms description. It looks to me as follows:

![image](https://user-images.githubusercontent.com/13523003/72339309-54a8e200-36c6-11ea-924d-2473584d674d.png)

<!--
⚠️ If you do not respect this template, your pull request will be closed.
⚠️ Your pull request title should be short detailed and understandable for all.
⚠️ Also, please add it in the CHANGELOG file under Unreleased section.
⚠️ If your pull request fixes an open issue, please link to the issue.

✅ I have added the tests to cover my changes.
✅ I have updated the documentation accordingly.
✅ I have read the CONTRIBUTING document.
-->

### Summary
URL of QISKit Community Tutorial (https://github.com/Qiskit/qiskit-tutorials/tree/master/community/games) broken in Quantum-Coin-Game.ipynb

-> update it to https://github.com/Qiskit/qiskit-community-tutorials/tree/master/games


### Details and comments
related to issue  #57

URL of QISKit Community Tutorial (https://github.com/Qiskit/qiskit-tutorials/tree/master/community/games) broken in Quantum-Coin-Game.ipynb

-> update it to https://github.com/Qiskit/qiskit-community-tutorials/tree/master/games
### Summary

Add simple examples to simulate locally.
Add two data set files.

### Details and comments

The scripts come from my bachelor thesis in physics, in which I ran some tests, using FF-QRAM routine by Park et al. (2019) to enhance the distance based classifier proposed by Schuld et al. (2017). 
### Summary
I added two new script to the qis_intro section, one on basis gate decomposition of arbitrary single-qubit unitary operators and their respective controlled versions, and another for two-qubit unitary operators.


### Details and comments
In the first script, I write new functions that find the parameters of a u3 gate and the ZYZ decomposition to implement a given arbitrary 2x2 unitary matrix. I also write functions that convert these circuits into the controlled version of the original gate. I test all functions using randomly generated 2x2 unitary matrices.

In the second script, I explain the KAK method on which most two-qubit basis gate decompositions are based, apply the Qiskit built-in function two_qubit_cnot_decompose to find the basis gate decomposition of an arbitrary 4x4 unitary gate and also write a function that generates its controlled version via diagonalization. Again, I test all methods used via randomly generated 4x4 unitaries.

I added the relevant figures for both scripts to the qis_intro folder.


<!--
⚠️ If you do not respect this template, your pull request will be closed.
⚠️ Your pull request title should be short detailed and understandable for all.
⚠️ Also, please add it in the CHANGELOG file under Unreleased section.
⚠️ If your pull request fixes an open issue, please link to the issue.

✅ I have added the tests to cover my changes.
✅ I have updated the documentation accordingly.
✅ I have read the CONTRIBUTING document.
-->

### Summary
This PR adds a tutorial notebook to introduce the usage of the new implementation of the [adaptive VQE algorithm](https://github.com/Qiskit/qiskit-aqua/pull/685).


### Details and comments
~~This should not be merged before Qiskit/qiskit-aqua/pull/685 is merged because it depends on the new features of that PR.~~

I would like to give credits to @arsenyko who cleaned up the notebook and extended it a lot since we worked on this project at Qiskit Camp 2019: qiskit-community/qiskit-camp-europe-19/issues/39


<!--
⚠️ If you do not respect this template, your pull request will be closed.
⚠️ Your pull request title should be short detailed and understandable for all.
⚠️ Also, please add it in the CHANGELOG file under Unreleased section.
⚠️ If your pull request fixes an open issue, please link to the issue.

✅ I have added the tests to cover my changes.
✅ I have updated the documentation accordingly.
✅ I have read the CONTRIBUTING document.
-->

### Summary



### Details and comments



Hi,

We have recently proposed a game that can be played on a quantum computer here: [QuantumPoker](https://github.com/sintefmath/QuantumPoker) (incuding jupyter notebooks).
We would like to contribute this game to your games section as well. If you think this is a good idea, please tell us what we should do.

Kind regards,
Franz
This code was taken from [here](https://github.com/Qiskit/qiskit-tutorials/blob/7bc40e964dec2a37ac5915c3b84c01af9c2ef754/community/terra/fourier_transform.ipynb) I changed some import statements because they were outdated and now the qft is returning 111 instead of 001 for inputs of all 0's. The output for qft3.quasm reads:
`OPENQASM 2.0;
include "qelib1.inc";
qreg q0[3];
creg c0[3];
h q0[0];
u1(3.14159265358979) q0[0];
h q0[1];
u1(1.57079632679490) q0[1];
h q0[2];
u1(0.785398163397448) q0[2];
h q0[0];
cu1(1.57079632679490) q0[1],q0[0];
h q0[1];
cu1(0.785398163397448) q0[2],q0[0];
cu1(1.57079632679490) q0[2],q0[1];
h q0[2];
measure q0[0] -> c0[0];
measure q0[1] -> c0[1];
measure q0[2] -> c0[2];
` 
As oppose to the original: 
`
OPENQASM 2.0;
include "qelib1.inc";
qreg q0[3];
creg c0[3];
h q0[0];
u1(-3.14159265358979) q0[0];
h q0[1];
u1(-1.57079632679490) q0[1];
h q0[2];
u1(-0.785398163397448) q0[2];
h q0[0];
cu1(1.57079632679490) q0[1],q0[0];
h q0[1];
cu1(0.785398163397448) q0[2],q0[0];
cu1(1.57079632679490) q0[2],q0[1];
h q0[2];
measure q0[0] -> c0[0];
measure q0[1] -> c0[1];
measure q0[2] -> c0[2];
`
I believe the problem is here but I cant seem to solve it, if anyone could help that would be great, thanks!
```
`import math

# importing Qiskit
from qiskit import Aer, IBMQ
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, execute
from qiskit.providers.ibmq import least_busy

# useful additional packages 
from qiskit.tools.jupyter import *
from qiskit.tools.visualization import plot_histogram
provider = IBMQ.load_account()`


  # """n-qubit input state for QFT that produces output 1."""
`def input_state(circ, q, n):
    for j in range(n):
        circ.h(q[j])
        circ.u1(math.pi/float(2**(j)), q[j]).inverse()

def qft(circ, q, n):
  # """n-qubit QFT on q in circ."""
    for j in range(n):
        for k in range(j):
            circ.cu1(math.pi/float(2**(j-k)), q[j], q[k])
        circ.h(q[j])`
`q = QuantumRegister(3)
c = ClassicalRegister(3)
qft3 = QuantumCircuit(q, c)

input_state(qft3, q, 3)
qft(qft3, q, 3)
for i in range(3):
    qft3.measure(q[i], c[i])
print(qft3.qasm())`
`# run on local simulator
backend = Aer.get_backend("qasm_simulator")

simulate = execute(qft3, backend=backend, shots=1024).result()
simulate.get_counts()`
`%%qiskit_job_status

# Use the IBM Quantum Experience
backend = least_busy(IBMQ.backends(simulator=False))
shots = 1024

job_exp = execute(qft3, backend=backend, shots=shots)`
`results = job_exp.result()
plot_histogram(results.get_counts())`
```