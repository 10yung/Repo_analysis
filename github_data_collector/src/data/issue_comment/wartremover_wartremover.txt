I went through a warning with the following code snippet:

```scala
  trait One[F[_]] {}

  trait Two[F[_], A] {
    val arg: String
  }

  trait TypeClass1[F[_]] {
    def capability1: F[String]
  }

  object TypeClass1 {
    implicit val optionTC1: TypeClass1[Option] = new TypeClass1[Option] {
      def capability1: Option[String] = None
    }
  }

  def buildTwo[F[_]: TypeClass1](
      buildingArg: String
  ): Two[F, Two[F, One[F]]] =
    new Two[F, Two[F, One[F]]] {
      val arg: String = buildingArg
    }

  def myTwo: Two[Option, Two[Option, One[Option]]] =
    buildTwo("test")
```

During compilation, this warning is triggered:
```
[warn] Main.scala:35:5: [wartremover:Any] Inferred type containing Any: [+A]Option[A]
[warn]     buildTwo("test")
[warn]     ^
[warn] one warning found
[success] Total time: 1 s, completed 23 d√©c. 2019 23:01:31
```

I don't get this error when disabling the `wartremoverWarnings ++= Warts.unsafe` line in my `build.sbt`. I'm guessing I get this warning because the type parameter `A` of `[+A]Option[A]` is inferred to `Any`.  Is there a way to avoid this warning  without using `suppressWarning` annotation ? 
`java.nio.Path#toString` is the correct way to get the String representation, as explained by the javadoc (Path overrides toString).

https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html#toString--

Still, `ToString` fails.
- Severity: Blocker

- How to reproduce:

When using with scala-maven-plugin, The option NonUnitStatement cannot be disabled:

The following plugin configuration:


      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>3.3.1</version>
        <executions>
          <execution>
            <id>scala-compile-first</id>
            <phase>process-resources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>scala-test-compile-first</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <scalaVersion>${scala.version}</scalaVersion>
          <scalaCompatVersion>${scala.binary.version}</scalaCompatVersion>
          <recompileMode>incremental</recompileMode>
          <useZincServer>true</useZincServer>
          <!--https://tpolecat.github.io/2017/04/25/scalac-flags.html-->
          <args>
            <arg>-target:jvm-${java.version}</arg>
            <arg>-unchecked</arg>
            <arg>-deprecation</arg>
            <arg>-feature</arg>
            <arg>-g:vars</arg>
            <!--<arg>-language:existentials</arg> &lt;!&ndash; often used in project &ndash;&gt;-->

            <arg>-encoding</arg>
            <arg>UTF-8</arg>
            <arg>-language:_</arg>
            <arg>-Xfatal-warnings</arg>
            <arg>-Xlint</arg>
            <arg>-Yno-adapted-args</arg>
            <arg>-Ywarn-dead-code</arg> <!--,        // N.B. doesn't work well with the ??? hole -->
            <arg>-Ywarn-numeric-widen</arg>
            <arg>-Ywarn-value-discard</arg>
            <arg>-Xfuture</arg>
<!--            <arg>-Ywarn-unused-import</arg>-->
            <arg>-Ypartial-unification</arg>
            <arg>-Ywarn-numeric-widen</arg>        <!--      // Warn when numerics are widened. -->
            <arg>-Ynon-unit-statement</arg>
            <arg>-P:wartremover:only-warn-traverser:org.wartremover.warts.Unsafe</arg>
          </args>

          <javacArgs>
            <javacArg>-source</javacArg>
            <javacArg>${java.version}</javacArg>
            <javacArg>-target</javacArg>
            <javacArg>${java.version}</javacArg>
          </javacArgs>

          <compilerPlugins>
            <compilerPlugin>
              <groupId>org.wartremover</groupId>
              <artifactId>wartremover_${scala.binary.version}</artifactId>
              <version>2.2.1</version>
            </compilerPlugin>

            <compilerPlugin>
              <groupId>com.olegpy</groupId>
              <artifactId>better-monadic-for_${scala.binary.version}</artifactId>
              <version>0.2.4</version>
            </compilerPlugin>
          </compilerPlugins>
          <excludes>
            <exclude>**/.ipynb_checkpoints/*</exclude>
          </excludes>
        </configuration>
      </plugin>

Will simply yield the following error information:

`[ERROR] bad option: '-Ynon-unit-statement'`

Many test cases rely on this feature, it has to be enabled before other features can be invoked.
Wart remover detects an Any Type where it should not when using traverse from cats on eithers.

Here's a minimal example:

```
import cats.implicits._
val b: List[Either[String, Int]] = List("failed".asLeft[Int], 2.asRight[String])
val c: Either[String, List[Int]] = b.sequence
```

gives 

```
[wartremover:Any] Inferred type containing Any 
[error]     val c: Either[String, List[Int]] = b.sequence
[error]                                          ^
```

I'm using Scala 2.12.8 and wartremover 2.4.2.
`Any` and `Nothing` fail on `Json.reads` macro for case classes with more than one param. On Scala 2.12 same code compiles fine.

Build settings:

```sbt
scalaVersion := "2.13.0"
libraryDependencies += "com.typesafe.play" %% "play-json" % "2.7.4"
wartremoverErrors in (Compile, compile) ++= Warts.all
```

Example code:

```scala
import play.api.libs.json._

final case class Greeting(id: Long, greeting: String)

object Greeting {
  implicit val reads: Reads[Greeting] = Json.reads[Greeting]
}
```

Error:

```
[error] [wartremover:Any] Inferred type containing Any
[error]   implicit val reads: Reads[Greeting] = Json.reads[Greeting]
[error]                                                   ^
```

Output of `-Xprint:typer` for the part which is presumably responsible for this:

```scala
scala 2.13: val underlying: play.api.libs.json.Reads[example.Greeting] = play.api.libs.functional.syntax.`package`.toFunctionalBuilderOps[play.api.libs.json.Reads, Long](play.api.libs.json.JsPath.\(json.this.JsonConfiguration.default[play.api.libs.json.Json.MacroOptions](MacroOptions.this.Default.macroOptionsDefault).naming.apply("id")).read[Long](json.this.Reads.LongReads))(functional.this.FunctionalCanBuild.functionalCanBuildApplicative[[A]play.api.libs.json.Reads[A]](json.this.Reads.applicative(json.this.JsResult.applicativeJsResult))).and[String](play.api.libs.json.JsPath.\(json.this.JsonConfiguration.default[play.api.libs.json.Json.MacroOptions](MacroOptions.this.Default.macroOptionsDefault).naming.apply("greeting")).read[String](json.this.Reads.StringReads)).apply[example.Greeting](((id: Long, greeting: String) => Greeting.apply(id, greeting)))(json.this.Reads.functorReads(json.this.Reads.applicative(json.this.JsResult.applicativeJsResult)));
scala 2.12: val underlying: play.api.libs.json.Reads[example.Greeting] = play.api.libs.functional.syntax.`package`.toFunctionalBuilderOps[play.api.libs.json.Reads, Long](play.api.libs.json.JsPath.\(json.this.JsonConfiguration.default[play.api.libs.json.Json.MacroOptions](MacroOptions.this.Default.macroOptionsDefault).naming.apply("id")).read[Long](json.this.Reads.LongReads))(functional.this.FunctionalCanBuild.functionalCanBuildApplicative[play.api.libs.json.Reads](json.this.Reads.applicative(json.this.JsResult.applicativeJsResult))).and[String](play.api.libs.json.JsPath.\(json.this.JsonConfiguration.default[play.api.libs.json.Json.MacroOptions](MacroOptions.this.Default.macroOptionsDefault).naming.apply("greeting")).read[String](json.this.Reads.StringReads)).apply[example.Greeting]({((id: Long, greeting: String) => Greeting.apply(id, greeting))})(json.this.Reads.functorReads(json.this.Reads.applicative(json.this.JsResult.applicativeJsResult)));
```



When running through command line (with maven) I am only able to specify `-P:wartremover:only-warn-traverser:org.wartremover.warts.Unsafe`. While more expansive options like AllBut would be nice to have, I think at the very least I should be able to specify all by running with `-P:wartremover:only-warn-traverser:org.wartremover.warts.All`, but this fails as it does not exist. Thank you.
the following test passes on scala `2.12.8`, but fails on scala `2.13.0-RC1`
```
  test("string interpolation is allowed") {
    val b: Boolean = true
    val result = WartTestTraverser(StringPlusAny) {
      s"$b"
    }
    assertEmpty(result)
  }
```
Feature Request:

I am working on a horrible codebase and if I run Wartremover on the whole codebase, the thing will blow up with thousands of warnings and errors. Is there a way for me to run Wartremover just on a single file or class in the codebase at a time so that I fix the issues one file at a time?

```
Compile / wartremoverWarnings ++= Warts.unsafe.filterNot(Set(Wart.NonUnitStatements).contains)
```
^^^ Is there a better way to exclude certain Warts? Not a SBT Ninza, so if it's something obvious, please, humor me.
# Why is this useful

Given the code below, the code passed to  the `map` function should never be evaluated when supplied a None:

```
      (None: Option[Int]).map {
        println("I am called!")
        _ + 1
      }
```

The above prints out: "I am called!"

The code between the `{` and the function `_ + 1` is evaluated eagerly before testing whether the Option is a None. We have supplied a block to where a  function is to be supplied and the block is evaluated and as long as it returns a function at the end. This can lead to unexpected errors.

Contrast this with supplying a function to the `map` function with a None:

```
      (None: Option[Int]).map { x =>
        println("I am not called")
        x + 1
      }
```

In the above case "I am not called!" is never printed because we are mapping over a None.