See [comment](https://github.com/guardian/play-googleauth/pull/66#issuecomment-419874788)
Hi, I've just tried running `gu-who` against [a test organisation](https://github.com/MOJ-gu-who-test) both through https://gu-who.herokuapp.com and through a test instance I spun up myself on Heroku, and both error when trying to audit that organisation (URL: `https://gu-who.herokuapp.com/audit/MOJ-gu-who-test`) despite the app being granted the correct permissions, whether when using a pre-generated access token or using GitHub login.

The error page says “This exception has been logged with id 781o327gn.” (or similar; the ID is different every time).

Do you have any suggestions for what I might do to resolve this?
There should be logic that requires the sponsor username to be different than the sponsored username.  You shouldn't be able to sponsor yourself!
It seems like they are not validated?

What happened was:
1. the member was flagged as having all 3 issues
2. the member has addressed 2fa and full name
3. the member was changed to outside collaborator and added to users.txt at the same time
4. after running gu-who the issue was not closed


The comment was added:

```
Removing @... from organisation. These were the outstanding requirements:
```

In my case the app always times out with this message on the page:

```
Application Error
An error occurred in the application and your page could not be served. Please try again in a few moments.
If you are the application owner, check your logs for details.
```

The logs are ok, the actual audit is successful and all the issues are created/updated.

The timeout is 30 sec and according to [docs](https://devcenter.heroku.com/articles/request-timeout) it is not configurable.

The solution is to serve page first and then dynamically serve results.

Or at least start sending the static page heading and once the results are ready finish sending the page - it would increase the timeout by 55 sec.

I ran this against my organization, thinking it would be awesome. It was. It sent out hundreds of emails to our users - sometimes multiple, depending upon if they setup bots - which means that now everyone is upset at me.

We should instead:
- have a big shiny warning if the file doesn't exist
- fail if the person authenticating isn't on that list (they should be!)
- fail if the list of users in the users.txt doesnt match at least some percentage (25?) of users in the org
- straightup-bomb out if an env var doesnt exist to override the above.

We are planning to use this @18F, and even though we've done some testing in a sandbox organization, it would be nice to see what the bot would do against our real org. Would be great to have a test/no-op option, where it (for example) prints out all of the issues it would file and the users it would kick out, without actually doing so. I've never done any Scala, but could possibly hack on this a bit if there's interest.

/cc @jgrevich

Took a bit of digging to find [the grace period](https://github.com/guardian/gu-who/blob/master/app/lib/TerminationSchedule.scala) in the code...a few ideas, in order of importance:
- Mention the amount of time in the README
- Make the amount of time configurable
- Make different grace periods for the different infractions. In other words, not having 2FA enabled is a security issue, whereas not having a full name isn't a _huge_ deal. Totally understand if you want to keep things simple and not do this one.

Thanks!

/cc @jgrevich
