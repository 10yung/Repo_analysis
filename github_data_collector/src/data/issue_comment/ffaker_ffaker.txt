We have an issue when testing the deletion of an account. We test for:

`expect(page).not_to have_content child.first_name`

Even upon a successful request the test fails because the page contains a form with a country list containing "Dominica" which is also the `child.first_name` generated by:

`FFaker::Name.first_name`

The failure is of course random and occurs when the randomly generated name matches the country name. 
I didn't track it but making a note here that animals us doesn't work, I am using 5 others in place of animal currently

I did a run without & without plurals of both.

When I'm done with my other stuff - I'll try poking it more ...
How is possible to define a minimum and maximum length of user login generated by

```ruby
FFaker::InternetSE.login_user_name
````
Some postcodes generated with `FFaker::AddressUK.postcode` are invalid.

I noticed since I got some random errors on CI, in models with validations from gem: https://github.com/dgilperez/validates_zipcode

For example: `XX7 7PE`.

You can also check that this is indeed an invalid UK postcode in here: https://postcodes.io/

Afaik the most up-to-date regex is: http://i18napis.appspot.com/address/data/GB
This pr adds the irish variant to the `Animal` module. This includes changes from adding `LoremIE` that haven't been merged yet. 
Hi,

I'm using FFaker to generate fake datas and [`telephone_number`](https://github.com/mobi/telephone_number) for phone number validation.  
But I often have errors from `FFaker::PhoneNumberXX.unique.international_mobile_phone_number` when I ask for validation.

I made test on: 
- `FFaker::PhoneNumberAU`
- `FFaker::PhoneNumberBR`
- `FFaker::PhoneNumberCU`
- `FFaker::PhoneNumberDA`
- `FFaker::PhoneNumberDE`

Then I tried with `FFaker::PhoneNumberID` and this one works. I didn't try the others for now.

My validator is:
```ruby
class User < ApplicationRecord
  before_validation :format_phone_number
  ...

  def format_phone_number
    telephone_number = TelephoneNumber.parse(phone_number)

    if telephone_number.valid?
      self.phone_number = telephone_number.e164_number
    else
      errors.add(:phone_number, "Phone number invalid")
    end
  end
```

Does it something we could improve on FFaker?
I recently stumbled across this gem, and noticed that you are using a custom implementation of `Faker::String.from_regexp` to generate strings from a regular expression:

https://github.com/ffaker/ffaker/blob/49d2226a0e8fb5faa0c27fce7047106a3929baa3/lib/ffaker/string.rb#L19-L28

This implementation is OK for the basics, but is *far* from comprehensive! There is [an open issue](https://github.com/ffaker/ffaker/issues/317) about one such bug, and [another open issue](https://github.com/ffaker/ffaker/issues/199) that's apparently unresolved.

The regexp language is vast and complicated; solving this problem for all possible regular expressions is far from easy. However, [this library](https://github.com/tom-lord/regexp-examples) provides a much more complete solution. For backwards compatibility, you could implement this as:

```
module FFaker
  module String
    def self.from_regexp(exp)
      puts 'Warning: FFaker::String.from_regexp is deprecated. Use exp.random_example'
      exp.random_example
    end
  end
end
```

There are a couple of potential minor issues we could discuss before dropping in this replacement (e.g. `Regexp#random_example` could be a refinement instead of a global class extension?), but more the most part it should be a very simple change.
Hi, 

I occasionally run into the situation where I need to return a random name that meets some condition (i.e. has a length > 2 for autocomplete).

I was thinking of putting up a PR that changes the name methods to take and optional block and will return the first value that matches a predicate. Would this be a welcome feature?
Seems like this is a problem inherited from Faker, but it's the only thing preventing me from using this awesome feature.
Currently the ones it generates usually don't pass the [check digit test](https://en.wikibooks.org/wiki/Vehicle_Identification_Numbers_(VIN_codes)/Check_digit).