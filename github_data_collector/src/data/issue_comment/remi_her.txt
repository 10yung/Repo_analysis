We've noticed performance issues when profiling slow actions. Significant time is spent in HashWithIndifferentAccess.

Also, HashWithIndifferentAccess is the only reason ActiveSupport is required.
Her proxy nil objects and we can't use &.method to protect application to raise exceptions when object is null. 

For example we have 2 models Product + Brand

```
{
  name: "Product"
  brand: null
}

class Product 
  include Her::Model
  belongs_to :brand
end

class Brand
  include Her::Model
end

```

```
product = Product.first
product.brand == nil #=> true
product.brand.__id__ == nil.__id__ #=> false

product.brand&.name #=> Exception

NoMethodError: undefined method `name' for nil:NilClass
from /Users/madmax/.rbenv/versions/2.6.3/lib/ruby/gems/2.6.0/gems/her-1.0.3/lib/her/model/associations/association_proxy.rb:11:in `name'
```


For temporary solution we use .try method. 
We've hit a problem on a project where the functionality of `ActiveModel::Dirty` has changed, such that the following no longer works for a Her-backed model:

```
foo = SomeModel.find(1)
foo.title # returns a string
foo.title = 'bar'
foo.restore_title! #should restore the title; actually fails because foo.title is a String and Rails 6 expects it to respond to `original_value`.
```

Haven't done enough digging to determine the best course of action for fixing, yet.
Hi,
Her is a terrific gem that we use with multiple repos at our company. One of the constant complaints from people who join our org is that its really hard to search for issues or get support using tools like Google/SO cause the keywords are *extremely* generic... e.g. "her model" "her ruby model", "ruby her". In fact, we have seen that the wiki/readme that contains a link to this repo is visited ~18 times a month solely for the purpose of getting to this repo since its so hard to reach it from google if you dont remember the keyword "remiprev".

Is there any possibility at all of changing the name from her to something more specific? like maybe "HerORM" or "HerRubyORM" or even just "rubygem-her" ?

More examples of searches that return nothing relevant in the first page:
```
"her model doesnt connect to endpoint"
"her model doesnt load"
```

Adding "ORM" to the search term directs to this repo, but still no useful SO/blogs etc:
```
her orm doesnt connect to endpoint
her orm model doesnt load
```
Am I just completely missing something, or do scopes just not work on JsonApi models?

I have the following setup:
```
class TwitterProfile
  include Her::JsonApi::Model
  use_api TWITTER_API
  collection_path 'profiles'
  type :profiles
  has_many :tweets
  has_many :favorites
  has_many :followers
  has_many :engagement_data, class_name: 'TwitterEngagement'
  ...
end
```

```
class TwitterEngagement
  include Her::JsonApi::Model
  use_api TWITTER_API
  type :engagement_data
  belongs_to :twitter_profile

  scope :retweets, -> { where(type: 'retweets') }
  scope :mentions, -> { where(type: 'mentions') }
  scope :favorites, -> { where(type: 'favorites') }
end
```

***Note, this is not hitting the actual twitter API, but rather my own server where we have some aggregated data, thus the "TwitterEngagement"

When I call 
`twitter_profile.engagement_data.retweets`
I get an error:
```
NoMethodError: undefined method `retweets' for []:Her::Collection
from /Users/johnhenderson/.rvm/gems/ruby-2.5.0@stacked-sports/gems/her-1.1.0/lib/her/model/associations/association_proxy.rb:11:in `retweets'
```

But if I pass the scope as an actual predicate:
`twitter_profile.engagement_data.where(type: 'retweets')`
I get an array as expected:
```
[#<TwitterEngagement(twitter_engagements/2019-04-21-945481977355833344) date="2019-04-21" profile_id=945481977355833344 count=1 id="2019-04-21-945481977355833344" twitter_profile=#<TwitterProfile(profiles/951230800355254272) name="Justin Houston💰!" screen_name="justnhouston" profile_image="https://pbs.twimg.com/profile_images/10955328872715..." bio="| 4⭐️LB | | FEAR NO MAN | | Instagram @mr.jrich |" id=951230800355254272>>,
 #<TwitterEngagement(twitter_engagements/2019-04-24-1065433729990946818) date="2019-04-24" profile_id=1065433729990946818 count=1 id="2019-04-24-1065433729990946818" twitter_profile=#<TwitterProfile(profiles/951230800355254272) name="Justin Houston💰!" screen_name="justnhouston" profile_image="https://pbs.twimg.com/profile_images/10955328872715..." bio="| 4⭐️LB | | FEAR NO MAN | | Instagram @mr.jrich |" id=951230800355254272>>,
 #<TwitterEngagement(twitter_engagements/2019-04-25-1065433729990946818) date="2019-04-25" profile_id=1065433729990946818 count=1 id="2019-04-25-1065433729990946818" twitter_profile=#<TwitterProfile(profiles/951230800355254272) name="Justin Houston💰!" screen_name="justnhouston" profile_image="https://pbs.twimg.com/profile_images/10955328872715..." bio="| 4⭐️LB | | FEAR NO MAN | | Instagram @mr.jrich |" id=951230800355254272>>,
 #<TwitterEngagement(twitter_engagements/2019-05-01-1718568486) date="2019-05-01" profile_id=1718568486 count=1 id="2019-05-01-1718568486" twitter_profile=#<TwitterProfile(profiles/951230800355254272) name="Justin Houston💰!" screen_name="justnhouston" profile_image="https://pbs.twimg.com/profile_images/10955328872715..." bio="| 4⭐️LB | | FEAR NO MAN | | Instagram @mr.jrich |" id=951230800355254272>>]
```
Is there any way to override how attributes are set at the class-level, without Faraday middleware? I have a few non-restful endpoints that I would like to wrap. I can override the response middleware, but that would override it on my other classes as well.

Sorry for all the posts but I'm loving Her and just want to see it keep getting better.

I checked all the Issues and don't see this.  Is there support for association extensions?  For example:

```
class User
   has_many :addresses do 
     def count 
        # custom get that doesn't return all the records first and then add the array
     end
   end
end
```

so ```@user.addresses.count``` would use the defined count instead of doing what it appears now, which is:

1. Hit the User endpoint
2. If response includes addresses, return those, if not, hit the addresses endpoint
3. return the count of the array


`after_find` is being called twice, after find. seeing this from 1.0.0 up to 1.0.3.
Right now the `after_save` and other related callbacks are cancelled if an error is returned.  This creates an issue if we are trying to catch these situations and act on them in our models.

For example, I'd like to call this after attempting to save in Rails 5:

```
 def check_for_errors
    if self.response_errors.any?
      self.response_errors.each do |attribute, errors|
        errors.each do |error|
          self.errors.add(attribute, error)
        end
      end
    end
  end
```

to convert the `response_errors` into Rails errors but cannot because of this issue.