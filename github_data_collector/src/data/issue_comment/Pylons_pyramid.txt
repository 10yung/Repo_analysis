
I'm posting this on the main pyramid tracker, but it concerns code in the pyramid docs and the pyramid cookiecutter.

The `naming_convention` in the starter template and pyramid docs which is sent to SqlAlchemy is "inadequate" and undergoing a change upstream.  I'm opening a ticket here now, just in case others experience this issue before the fix is released.

https://github.com/Pylons/pyramid-cookiecutter-starter/blob/latest/%7B%7Bcookiecutter.repo_name%7D%7D/%7B%7Bcookiecutter.repo_name%7D%7D/sqlalchemy_models/meta.py#L4-L13

The issue: using this setup will create errors in Sqlite and Mysql if the user declares a Boolean or Enum column. On these backends, SqlAlchemy generates a CHECK constraint to enforce the data type when the database is initialized; however the template for "ck_" requires a "constraint_name" to be provided.  Advanced users will know this can be declared in the column definition, but most users will not know this and just see an exception that is not very helpful.

A fix in SqlAlchemy and Alembic is underway
`1.9-branch` is starting to fail now. See https://travis-ci.org/Pylons/pyramid/jobs/562427247 and #3183. I'm not sure what to do about it.
Reference:  https://github.com/wichert/pyramid_authstack

I've found it very useful to have multiple authentication methods in my pyramid applications, I always used `pyramid_authstack` for this purpose. 
After talking with Wichert he was enthusiastic to the idea of making it core pyramid auth.
In my opinion it would make sense to have an out-of-the box option to have stackable policies.

This addition would not require any changes to pyramid tutorial, just documentation of new policy + some mentions in authentication section.

Alternatives include Mozilla's https://github.com/mozilla-services/pyramid_multiauth - however `pyramid_authstack` is a simple implementation that is easy to understand and reason about so I would consider it as the primary candidate for implementation.
When we remove the page on scaffolds (`docs/narr/scaffolding.rst`), we need to set up a redirect to `docs/narr/cookiecutters.rst` in the `docs.pylonsproject.org` nginx configuration for the master branch, latest, and stable.

- [x] master
- [ ] latest
- [ ] stable

Example for master:

```nginx
    location /projects/pyramid/en/master/narr/scaffolding.html {
        return 301 $scheme://$host/projects/pyramid/en/master/narr/cookiecutters.html;
    }
```
See https://github.com/Pylons/pyramid/pull/3406#pullrequestreview-170163683
This is a placeholder for supporting whatever becomes the successor to `pip` and managing virtual environments in Pyramid, including `poetry`, `flit`, and `pipenv`. Please add to it.

## Questions

1. [How and where to install `SUCCESSOR`](https://docs.pipenv.org/install/)?
2. Where does installation of `SUCCESSOR` fit into our [current installation documentation](https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/install.html)?
3. Are there any features of `SUCCESSOR` that we would use beside installation of packages ~~and distribution of an app~~?
4. What would happen to the environment variable `$VENV` in most of our commands?
5. How do we deal with features in `setup.py` only, specifically entry points of `console_scripts` and `paster.app_factory`?
6. What will we do with the scaffolds and `pcreate`?
7. Should we remove instructions for how to make a distributable Pyramid application, and replace it with references to suggested tools?
8. Assuming a rewrite of commands for `SUCCESSOR`, do we retain or remove Windows commands for everything except installation and setup of an environment, with a disclaimer that it is up to the user to know how to translate Unix commands to their platform of choice? Refs: https://github.com/Pylons/pyramid/issues/3260#issuecomment-384217118

## Things to update

1. Documentation wherever `pip` is used.
2. Pyramid's packaging related files, including `setup.py`.
3. Pyramid cookiecutters.

## References
1. Poetry: https://github.com/sdispater/poetry
2. Summary article about pipenv: https://realpython.com/pipenv-guide/
See https://bitbucket.org/pypy/pypy/issues/2685/regression-with-pyramid-zopeinterface#comment-40776650

Temporary patch: https://github.com/Pylons/pyramid/pull/3183
Replicate Pyramid's `scaffolds/tests.py` to run on the Pyramid cookiecutters:
- [ ] https://github.com/Pylons/pyramid-cookiecutter-starter
- [ ] https://github.com/Pylons/pyramid-cookiecutter-alchemy
- [ ] https://github.com/Pylons/pyramid-cookiecutter-zodb

Although more work, we should have tests in both Pyramid and each cookiecutter to run against Pyramid's master branch.
I am opening this item here for discussion. 

When building small scale websites, most views have only one route to them in the form of simple path. Having a separate call for `@view_config` or `add_view()` and then `add_route()` is often unnecessary.

These could be combined to one `@route_and_view_config` decorator.

Example ``views.py``:

```python

    @routed_view("/", route_name="home")
    def home(request: Request):
        """Our little webby site landing page"""
        content = """
                  (__)                     )__(                vv    vv
                  (oo)                     (oo)                ||----||  *
           /-------\/               *-------\/                 ||     | /
          / |     ||               / |     ||                 /\-------/
         *  ||----||              /  ||----||                (oo)
            ^^    ^^                 vv    vv                (~~)

         American Cow              Polish Cow            Australian Cow
        """
        return Response(content_type="text/plain", body=textwrap.dedent(content), charset="utf-8")

    @routed_view("/awesome", renderer="funky.pt")
    def awesome(request: Request):
        # view_name automatically set to awesome
        # route_name automatically set to awesome

```

Then in `__init__`:

```python
from . import views

config.scan(views)  # Will add route and views
```

**Motivation**

* All view related configuration in one place, the decorator, instead of being split between `@view_config` in `views.py` and `add_route` in `__init__.py`

* Make development and maintenance easier, especially for newcomers who can get away with less lines and less questions

* Feature parity with Flask

**Existing implementations**

* `@simple_route` in Websauna (based on latter) https://websauna.org/docs/api/websauna.system.core.route.html?highlight=simple_route#websauna.system.core.route.simple_route

* Original `tomb_routes` package https://github.com/TombProject/tomb_routes 

**Resolving issue between route priorization**

In earlier IRC coffee table discussion people have noted that there should be some sort of weight (integer) added to routes, so that routes scanned in different order can be resolved in correct order. Is see this as unnecessary complication to be implemented, but instead suggest to resolve this through documentation. Only use `@route_and_view` for simple cases. If there are competing routes and view configurations then it is suggested to use calls to `add_route` and `add_view` explicitly instead of `@route_and_view` approach. 

**Suggested signature**

```python
def routed_view_config(func,
                       pattern,
                       route_name=None,
                       view_name=None,
                       factory=None,
                       renderer=None,
                       **kwargs):
    """ A function :term:`decorator` allowing a
    developer to create simple view and corresponding routing configuration.

    This is a :term:`configuration decoration` that
    wraps a :term:`view callable` function and configures
    view and routing arguments for it. The module providing the view
    function must be scanned via :py:meth:`pyramid.config.Configurator.scan`.

    This decorator is intended to be used with
    :ref:`URL dispatch views <_urldispatch_chapter>`
    only. For traversable views you should use
    :py:func:`pyramid.view.view_config`.

    **Minimal usage example**

    For example, this code could in a module ``myapp.views.py``:

    .. code-block:: python

      from pyramid.view import routed_view_config


      @routed_view_config('/')
      def home(request):
          return 'OK'

    Then in ``__init__.py`` or similar place where you set up your
    Pyramid application you need to:

    .. code-block:: python

        config.scan('myapp.views')

    **Rendering views with templates**

    Pass ``renderer``:

    .. code-block:: python

      from pyramid.view import routed_view_config

      @routed_view_config('/', renderer="info.pt")
      def info(request):
          return {"project_name": "Foobar"}

    .. warning::

        ``routed_view_config`` does not handle multiple routes and
        multiple views. An exception is raised in the case there
        are conflicting routes.

    .. seealso::

        :py:meth:`pyramid.config.Configurator.add_route`

        :py:meth:`pyramid.config.Configurator.add_view`

        :py:func:`pyramid.view.view_config`

    Below is a description of most commonly used arguments. Any other arguments through ``kwargs``
    pattern are passed to :py:meth:`pyramid.config.Configurator.add_view`.

    :param pattern:
        Required. Equals to ``pattern`` in :py:meth:`pyramid.config.Configurator.add_route`.
        This can be a simple path like ``/my-view`` or one with the items like ``/my-location/{item}``.
        For item usage see :ref:`matchdict`.

    :param view_name:
        Optional. If ``view_name`` is not given the function name is used.
        Equals to ``name`` in :py:meth:`pyramid.config.Configurator.add_view`

    :param route_name:
        Optional. If ``route_name`` is not given the function name is used.
        Equals to ``name`` in :py:meth:`pyramid.config.Configurator.add_route`.

    :param renderer:
        Optional. View renderer. Usually a template name.
        Equals to ``add_view`` in :py:meth:`pyramid.config.Configurator.add_view`.

    :param factory:
        Route factory.
        Optional. Equals to ``factory`` in :py:meth:`pyramid.config.Configurator.add_route`.

    :param decorator:
        View decorator.
        Optional. Equals to ``decorator`` in :py:meth:`pyramid.config.Configurator.add_view`

    :param permission:
        Permission name required to access the view.
        Optional. Equals to ``permission`` in :py:meth:`pyramid.config.Configurator.add_view`.

    :raise ConflictingRouteConfiguration:
        In the case there is already a route registered with a same name.

    """
    pass
```


Hi,

I just started using Pyramid few weeks ago and it also took that time to set up i18n with gettext. My setup: Python 3.5, chameleon templates and gettext. Ubuntu and Arch as dev environment and PyCharm as IDE. I added translation to templates first and code later. Here's some struggles I had. 

### Issues with `setup.py extract_messages`

I added 
```
message_extractors = { 'myapp': [
    ('**.py', 'python', None ),
    ('**.pt', 'chameleon', None ),
    ('static/**', 'ignore', None),
    ]}
```
To `setup.py` as was stated in manual. Running `$VENV/bin/setup.py extract_messages` couldn't find chameleon extractor. I tried xml, lingua_chameleon, lingua_xml and lingua.xml, lingua.chameleon, etc. All sorts of combinations. I couldn't find a way to list those extractors. I also tried `setup.cfg` approach.

So first suggestion: don't give extractor not found as error. Either list the possible extractors or give instructions how to list them.

Later I found that according to [this message](http://stackoverflow.com/a/30287865/71964) in SO the extraction method has been changed somewhere in or before **2015**.

I abandoned `setup.py extract_messages` and moved to `$VENV/bin/pot-create`.

### Issues with `$VENV/bin/pot-create`
I ran `$VENV/bin/pot-create --output myapp/locale/default.pot myapp`.
Error: Nothing found. Hmm. And the `.pot` file is completely empty. Next try: 
`strace -e trace=open $VENV/bin/pot-create --output myapp/locale/default.pot myapp`
Ok, it **is** scanning `.py` and `.pt` files from right locations.

First suggestion: Please list scanned files while `pot-create` is running or add `--verbose` or other parameter to give this information. I got the impression that it was doing nothing.

I found that the issue was missing `i18n:domain="myapp"` attribute in the templates. After that strings started to appear to the `default.pot`.

I created my first translation and I could change to it through `pyramid.default_locale_name` in the `.ini` file. Finally some progress.

### Issues with changing language from URL
Next thing I wanted to change language based on URL. For example `/fi/home`, `/en/home`, etc. And without adding `{language}` parameter to `add_route()`. This route pattern is **very common** in many web frameworks and there's example(s) how to implement it and it's usually documented in URL routing and/or i18n section. I think it should be added to i18n documentation. I couldn't figure out even where to start how to implement it so I went to IRC for help.

I got help from Mikko Ohtamaa and Michael Merickel and here's the current implementation:
Include file:
```
"""
Enable language in URL
"""

from pyramid.request import Request

import logging

log = logging.getLogger(__name__)


def add_localized_route(config, name, pattern, factory=None, pregenerator=None, **kw):
    """Create path language aware routing paths.
    Each route will have /{lang}/ prefix added to them.
    Optionally, if default language is set, we'll create redirect from an URL without language path component to the URL with the language path component.
    """
    orig_factory = factory

    def wrapper_factory(request: Request):
        lang = request.matchdict['lang']
        # determine if this is a supported lang and convert it to a locale,
        # likely defaulting to your default language if the requested one is
        # not supported by your app
        request.path_lang = lang
        request.locale_name = lang

        if orig_factory:
            return orig_factory(request)

    orig_pregenerator = pregenerator

    def wrapper_pregenerator(request: Request, elements, kw):
        if 'lang' not in kw:
            # not quite right but figure out how to convert request._LOCALE_ back into a language url
            kw['lang'] = request.locale_name
        if orig_pregenerator:
            return orig_pregenerator(elements, kw)
        return elements, kw

    if pattern.startswith('/'):
        new_pattern = pattern[1:]
    else:
        new_pattern = pattern

    new_pattern = '/{lang}/' + new_pattern

    # Language-aware URL routed
    config.add_route(name, new_pattern, factory=wrapper_factory, pregenerator=wrapper_pregenerator, **kw)


def includeme(config):
    """
    Load
    """
    config.add_directive('add_localized_route', add_localized_route)
    log.debug("included %s", __name__)
```

This wouldn't work with `'add_route'` (changing `'add_localized_route'` -> `'add_route'`) so existing routes had to be changed to:

```
    config.add_localized_route('home', '/')
    config.add_localized_route('login', '/login')
    config.add_localized_route('logout', '/logout')
    ...
``` 

Going to `/` would give error so I had to add some 404 logic:
```
@notfound_view_config(renderer='templates/404.pt')
def notfound(request: Request):
    if request.path == "/" or request.path.count('/') == 1:
        """
        Redirect to default language
        """
        import pyramid.httpexceptions as exc
        from pyramid.threadlocal import get_current_registry
        # You could also read the browser's accept-language headers here
        deflang = get_current_registry().settings['pyramid.default_locale_name']
        redirect = "/" + deflang + "/"
        return exc.HTTPFound(location=redirect)

    request.response.status = 404
    return {}
```

Custom layout would die because it lost the matchdict['lang'] var generated by `add_localized_route()` this fixed it in the `__init__.py` before `main()`:
```
@subscriber(NewRequest)
def ReqLanguage(event: NewRequest):
    """
    Read language code from URL and set it to request object
    """
    request = event.request.path
    if request.count("/") >= 2 and len(request) >= 4:
        event.request.locale_name = request[1:].split("/", 1)[0]
```

### Issues with gettext domains and paths
Now I had translations changing with URL correctly and templates with stuff like
`<a class="navbar-brand" href="/" tal:attributes="href request.route_path('home')" i18n:translate="">Home</a>` worked fine and language was added automatically without touching anything.

Now I started to implement login and there were the first translatable strings (error messages) in the code. I don't remember all the details but it was either `pot-create` didn't find the translations from the `.py` files or those translations weren't transferred to `.mo` file during compile. The problem was fixed with just changing the `.po` and `.mo` filename to `messages.(po|mo)`, because I found from the internal code that `messages` was the default translation domain.

I couldn't find any `.ini` or `config.` parameters to change default domain. I think this should be configurable.

I also found that if `.pt` had just `i18n:domain=""` `pot-create` couldn't find the translations, but as long as the i18n:domain was just _something_ the translation were found.

The `<language>/LC_MESSAGES/` directory seems to be also hard-coded. What other frameworks I've used I had no problems just using `myapp/locale/<language>.(po|mo)`.

I hope this helps to improve i18n docs and future code/modules and making i18n more dynamically configurable.

Some issues may not be directly Pyramid related because I don't yet know what's belonging to what :)