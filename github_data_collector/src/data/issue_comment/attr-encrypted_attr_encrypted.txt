When defining multiple attributes in a single `attr_encrypted` definition, all of the attributes should have methods such as `"#{attr}_changed?"` and `"#{attr}_was"` defined.

Currently only the last attribute is popped from the array, and methods for all other attributes are not created.

For example:

```
attr_encrypted :name, :email

email_was # => defined
email_changed? # => defined

name_was # => not defined
name_changed? # => not defined
```
Refer https://github.com/attr-encrypted/attr_encrypted/pull/359
Binary type for attribute was getting changed to Value type for Rails 5.1 due to this, so passing type to attribute api.

**Please note:**
After the above fix Unit tests were failing as the tables did not exist in database.
Fixed unit tests, the tables need to be present in DB before the ActiveRecord classes are loaded as `attr_encrypted` call internally uses `columns_hash` to identify the attribute type.

I have a column encrypted by `attr_encrypted`, let's call this column `data`. I also have a custom Marshaler that loads/dumps data in the column.

```rb
attr_encrypted :data, marshal: true, marshaler: CustomMarshal
```

A problem arises if I try to immediately decrypt a column that I have set using `attr_encrypted`. It returns the value I've set, but this value hasn't gone through the CustomMarshal when I expect that it would.

```rb
# abc is the record

new_value = [{hello: 'how are you doing'}]

# CustomMarshal.dump is called; this works like I expect it to.
abc.data = new_value 

# Fails: abc.data has gone through the marshaler – new_value hasn't
expect(abc.data).to_not eq(new_value)

# Fails: forcing new_value through the marshaler should make it equal abc.data
marshalled_value = CustomMarshal.dump(new_value)
expect(abc.data).to eq(CustomMarshal.load(marshalled_value))

# Passes: the above tests will pass if I reload the record
abc.reload
expect(abc.data).to_not eq(new_value)
expect(abc.data).to eq(CustomMarshal.load(marshalled_value))
```

[The culprit could be this line, but it looks like this behavior is intentional.](https://github.com/attr-encrypted/attr_encrypted/blob/11df93aef14c661dd0c03169d382a0412f93124e/lib/attr_encrypted.rb#L168) Are my expectations here wrong? I feel like if I set a custom marshaler in the options, it should always use the marshaler to load and dump the values. Otherwise, after I set the attribute on the record, I have to explicitly reload it for the marshaller to actually work.
See #312

I couldn't figure out how to stub `defined?(Encoding)` for coverage... sorry. Seems like that's always included in standard Ruby? I did some googling but couldn't find an answer
Yesterday everything was ok, we made a deploy we did not update anything of the gem, no version and not the secret_key and we are getting this error can someone help me
e19445a introduced marking
`attr_encrypted` attributes as virtual attributes to avoid an ActiveRecord
deprecation warning in AR 5.1.  This had the side effect of exposing
the decrypted versions of the attributes in
`ActiveRecord::Base#attributes`.  This is problematic since the method
is leveraged for things like `#as_json` and `respond_with`, meaning a
user could inadvertely expose sensitive info with an action like:

```
  def show
    respond_with @user
  end
```

Closes #353
When upgrading an application from Rails 5.0.7.2 to 5.1.7, I noticed that decrypted fields that used to be filtered out of our JSON responses are now included.

I believe this was caused by #263, if I comment out this line, the secrets stay secret. https://github.com/attr-encrypted/attr_encrypted/blob/11df93aef14c661dd0c03169d382a0412f93124e/lib/attr_encrypted/adapters/active_record.rb#L56

My theory is that this is enabled because the field is now in `attributes`, which is enumerated when ActiveRecord creates a `serializable_hash` of a model.

https://github.com/rails/rails/blob/66cabeda2c46c582d19738e1318be8d59584cc5b/activemodel/lib/active_model/serialization.rb#L126
i use you gem in my rails project; however meet some problems;
first i generate user model by type 'rails g model user encrypted_password:string' command; then modify user.rb configure by add attr_encrypted :user, :key => "12345678912345678912345678914712123456"; last i start rails console and type 'user=User.new; user.password=123' command and console throw such error NoMethodError: undefined method `encrypted_password_iv', appreciate for your help
When rails user model have scope returning only some columns hirb started to return errors
```
User.brief
  User Load (3.0ms)  SELECT "users"."id", "users"."email", "users"."firstname", "users"."lastname", "users"."on_commission", "users"."username", "users"."updated_at", "users"."created_at" FROM "users"
Hirb Error: missing attribute: encrypted_otp_secret
```
From what I understand attr_encrypted, is adding some sort of callbacks to attached model which couses hirb-error
after same investigation I've added:
` return unless self.respond_to?(encrypted_attribute_name)`
to:
```
define_method(attribute) do
        instance_variable_get("@#{attribute}") || instance_variable_set("@#{attribute}", decrypt(attribute, send(encrypted_attribute_name)))
      end
```
Which solved my problem but I'm not sure if this is really the correct place for that