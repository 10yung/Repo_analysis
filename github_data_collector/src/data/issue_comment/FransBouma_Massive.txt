The primarykey type must be int? The data has been inserted into the database, but there is still an error.
((IDictionary<string, object>)toInsert)[this.PrimaryKeyField] = Convert.ToInt32(cmd.ExecuteScalar());
The readme makes an introduction or lightly touches on the getting started with massive. However, it begins with 

> Code Please
> -----------
> Let's say we have a table named "Products". You create a class like this:
> 
> ```csharp
> public class Products:DynamicModel {
> 	//you don't have to specify the connection - Massive will use the first one it finds in your config
> 	public Products():base("northwind", "products","productid") {}
> }
> ```
> 
> You could also just instantiate it inline, as needed:
> 
> ```csharp
> var tbl = new DynamicModel("northwind", tableName:"Products", primaryKeyField:"ProductID");
> ```
> 
> Or ignore the object hierarchy altogether:
> 	
> ```csharp
> Massive.DB.Current.Query(...);
> ```

But only towards the end, at the bottom, does it ever mention:

> Factory Constructor
> -------------------
> One thing that can be useful is to use Massive to just run a quick query. You can do that now by using "Open()" which is a static builder on DynamicModel:
> 
> ```csharp
> var db = Massive.DynamicModel.Open("myConnectionStringName");
> ```
> 
> You can execute whatever you like at that point.

As if it were an `"Oh yeah! We forgot to mention..."` My suggestion is to incorporate this sooner or closer to the top, as part of the intro. Possibly if they are not the same thing (which, why wouldnt they be?... idk, it's separated and placed towards the bottom for who knows what reason) provide use-examples to clarify it's design or best case scenario. To me, this `var db = ...` is the norm, and what i normally look for when messing around with database. But then again, that's why i'm here, and why this tool is so useful. It's because it caters to those who perform inline sql, on a per use basis. Why not give us that little bone at the start of the introductions, rather than towards the end of that major `tl;dr`? 

Since we're all trying to find ways to streamline productivity, it would be a disappoint for me to have missed that part hidden, even way after `insert` and `update`. I could've potentially been stuck rewriting lines and lines of code, it werent abundantly clear that _`hey, maybe i can use something i'm already familiar with`_
I tracked the problem down to the fact that the code doesn't reach the else block in Massive.Shared.PerformInsert, which retrieves the identity value. This is because the _primaryKeyFieldSequence value is an empty string. The source of that value is _defaultSeqencyName in Massive.Sqlite. **Setting that value to _any_ non-empty string results in the primary key property being set on the inserted object as expected.** From my perspective this is a work-around and probably even a hack, but I don't know what _primaryKeyFieldSequence is supposed to do (despite code comments that explain it). I also don't know if this functionality is covered by unit tests. I'll check when I further investigate the table Schema-property issue I recently posted. I just wanted to post this issue and work-around right away.
The function is not recognized by SQL Server Compact. [ Name of function = CONCAT,Data type (if known) = ].
I have updated the code which I submitted as PR #281 so that it supports stored procedure and function calls in Oracle. (Only my own copy. As of now I haven't updated the PR and I haven't made a new PR.)

```csharp
    var db = new DynamicModel("Scott.ConnectionString.Oracle (ODP.NET)");
    dynamic procResult = db.ExecuteProcedure("findMin", new { x = 1, y = 3 }, outParams: new { z = 0 });
    dynamic fnResult = db.ExecuteFunction("findMax", new { x = 1, y = 3 }, returnParams: new { returnValue = 0 });
    dynamic squareResult = db.ExecuteProcedure("squareNum", ioParams: new { x = 4 });
```

These work. The return value (procResult.z, fnResult.returnValue, squareResult.x) is an int, in all cases.

I was never aiming to support things like cursor results in Oracle(!) - I'm not sure that would ever really have a place in Massive.

I am (and was) aiming to add handy, lightweight support for calls to ExecuteNonQuery for CommandType.StoredProcedure, with support for parameter names and directions.

As I expected, and hoped, this basically just involved (installing Oracle XE; getting it working; getting the Massive Oracle tests working; and then) some minor changes to Massive.SP.cs (which was always meant to be DB agnostic code), and porting the (equally minor) parameter name and direction support from SQL Server file to the Oracle file as well.

The new code also supports #263:

```csharp
    var db = new DynamicModel("Scott.ConnectionString.Oracle (ODP.NET)");
    dynamic intResult = db.ExecuteSqlBlock("begin :a := 1; end;", outParams: new { a = 0 });
    dynamic dateResult = db.ExecuteSqlBlock("begin :d := SYSDATE; end;", outParams: new { d = DateTime.MinValue });
```

These work. The return types for intResult.a and dateResult.d are correct (int and DateTime respectively).

As in the original PR, all typing is done implicitly, as Massive already does it. In the case of output parameters, this requires a(n otherwise unnecessary) placeholder value of the desired type.
The version of `Single()` at line 509 of Massive.Shared.cs with signature `public virtual dynamic Single(string where, params object[] args)` does not support a `columns` argument.

This would actually be very useful to have. I think so because I needed it in the project I'm working on, and added it for myself and used it a lot, and I think so because `All()` supports columns, and the other explicit version of `Single()` supports columns, and all the rather cryptic variants of `Single()` which are dynamically supported by `TryInvokeMember` support `columns`.

It's easy to add an optional `columns` param, with default value `*` to this method (which is what I did), and this would link against existing code, but I think from your contribution guidelines it should be added as another new method.
The method TryInvokeMember is currently handling way too much and the interface of the method is very limiting, so adding additional elements to the method, like arguments for a where clause, leads to problems which are hard to solve. 

If each method which is currently handled by the method is moved to its own method like we have now as e.g. Single, it's more manageable and each method can then also receive the right arguments properly. 

See #279 
Hi,

Looking at these two lines, it looks like the code assumes identities will be Int32s. So this would fail if instead, it's an Int64 for example.

https://github.com/FransBouma/Massive/blob/v2.0/src/Massive.Shared.cs#L1053
https://github.com/FransBouma/Massive/blob/v2.0/src/Massive.Shared.cs#L1066

Hi, I've been trying to port Massive to .net core, still some work to be done, since there are a lot of base classes missing. Would be good to see a port of that in this repo.

Very helpful MicroORM so far, but it seems that there is no support for output bind variables at all for oracle, the simplest example: `BEGIN :0 := 333; END;` won't do a thing, it seems that all bind variables are set as input.
Is there even a possible way for an elegant implementation for output bind variables for oracle ?
