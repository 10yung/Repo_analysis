Hello, this `chroot()` wrapper appears to ignore the `rootfs` parameter. Is this an accidental oversight?

https://github.com/opencontainers/runc/blob/709377ca558df88ea538852c9310b700f140fc9b/libcontainer/rootfs_linux.go#L857

Thanks
Fix #2166 

Added conversion for cpu.weight v2 from cpu.shares

Signed-off-by: Boris Popovschi <zyqsempai@mail.ru>
Fix #2211 

Properly convert blkioWeight to io.weight

Signed-off-by: Boris Popovschi <zyqsempai@mail.ru>
io.weight is not properly converted from BlockIOWeight in https://github.com/opencontainers/runc/blob/master/libcontainer/cgroups/fs2/io.go#L20

According to the `crun spec` https://github.com/containers/crun/blob/master/crun.1.md#blkio-controller it should be recalculated.
Fix #2164 

Exchanged deprecated systemd resources with the appropriate for cgroupv2

Signed-off-by: Boris Popovschi <zyqsempai@mail.ru>
The basic support for cgroup2 has been already in place, but there are still some leftover tasks toward declaring production-ready:

- [ ] [feature: support systemd user-instance for rootless mode (as in crun)](https://github.com/opencontainers/runc/issues/2163)
- [ ] [bug: `cpu.shares` is broken](https://github.com/opencontainers/runc/issues/2166): PR https://github.com/opencontainers/runc/pull/2213
- [ ] [bug: io.stat: MAJ:MIN parsing order is wrong](https://github.com/opencontainers/runc/issues/2191): PR https://github.com/opencontainers/runc/pull/2192
- [ ] [bug: io.weight is not converted from BlockIOWeight](https://github.com/opencontainers/runc/issues/2211): PR https://github.com/opencontainers/runc/pull/2212
- [ ] [refactor: systemd driver should not use deprecated options](https://github.com/opencontainers/runc/issues/2164): PR https://github.com/opencontainers/runc/pull/2210
- [ ] CI: enable integration test (rootful)
- [ ] CI: enable integration test (rootless+systemd)
- [ ] declare production-ready
https://github.com/opencontainers/runc/pull/2198 disabled `TestUsernsCheckpoint` and `TestCheckpoint` in ` libcontainer/integration/checkpoint_test.go` because Ubuntu kernel  (used in Travis) has been broken recently: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1857257

We should reenable these tests when the kernel gets fixed


mount(2) will blindly follow symlinks, which is a problem because it
allows a malicious container to trick runc into mounting /proc to an
entirely different location (and thus within the attacker's control for
a rename-exchange attack).

This is just a hotfix (to "stop the bleeding"), and the more complete
fix would be finish libpathrs and port runc to it (to avoid these types
of attacks entirely, and defend against a variety of other /proc-related
attacks). It can be bypased by someone having "/" be a volume controlled
by another container.

Fixes: CVE-2019-19921
Fixes #2197
Signed-off-by: Aleksa Sarai <asarai@suse.de>
Resolve #2204.

Signed-off-by: mYmNeo <thomassong2012@gmail.com>
It's first seen in a kubernetes cluster with docker as container runtime. Our users reported that in some situation their bash script failed with message `can't create /dev/null: Operation not permitted`. But `/dev/null` is default device with permission `rwm`, After digging some logs, we found that it can be reproduced in runc by following steps.

1. Run a runc container like "busybox". Suppose this container is called A
2. run `while true;do echo >/dev/null;done` in container
3. runc update --cpu-share 1024 A
4. You will see `sh: can't create /dev/null: Operation not permitted`

The problem is located at https://github.com/opencontainers/runc/blob/master/libcontainer/cgroups/fs/devices.go#L28. By default, if runc wants to allow some devices, it'll first deny all devices then allow specific devices. It's OK when launching a new container, but if you update   the resource of a container, it'll make a change that allowed devices becomes denied first, then allowed, during this period, user app will get `xxx Operation not permitted` error message.

