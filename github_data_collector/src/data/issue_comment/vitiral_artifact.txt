The link to the flash card challenge under "Starting Your Project" is:
http://wiki.openhatch.org/Flash_card_challenge

And it should be: 
https://wiki.openhatch.org/wiki/Flash_card_challenge
I have done a rewrite (and reimagining) of artifact. I wrote it in python. The rewrite is NOT compatible with this version, think of it as 3.0 beta.

You can view the rewrite here: https://github.com/vitiral/artifact_py

- Usage of `where` on windows rather than `which`
- Slicing of Extended-Length Paths using regex on windows as a workaround to `std::process::Command.current_dir` not accepting them
Hello,

I'm interested in using Artifact for a project, but I'm developing on Windows. I downloaded the source and have attempted to compile - both mdbook and cargo-web are installed, but even with both of them in place, any post-2.0 release of artifact fails to build with the following error:
```
   Compiling artifact_lib v0.1.0 (C:\Users\Josh\Documents\GitHub\artifact\artifact-lib)
error: failed to run custom build command for `artifact-app v2.1.0 (C:\Users\Josh\Documents\GitHub\artifact\artifact-app)`

Caused by:
  process didn't exit successfully: `C:\Users\Josh\Documents\GitHub\artifact\target\release\build\artifact-app-725f2e4ceebe7093\build-script-build` (exit code: 101)
--- stdout
Build Script Started
Checking dependencies

--- stderr
thread 'main' panicked at 'which/where doesn't exist: Os { code: 2, kind: NotFound, message: "The system cannot find the file specified." }', src\libcore\result.rs:999:5
note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.

warning: build failed, waiting for other jobs to finish...
error: build failed
```
The backtrace seemed pretty long and unhelpful. The most prominent note in it was several occurences of `unresolved external symbol emscripten_asm_const_int`. If someone is willing to point me in the right direction, I'd love to do what needs to get done to get this working.
I tried to `cargo install artifact-app` in order to update artifact only to realize it tried to build v1.0.1 (which failed btw), and that the artifact crates available were super old. How come? Maybe you should just drop the `cargo install` from the tutorial.

I then realized that I originally just installed the binaries.

While I'm there, latest release v2.1.5 panics when I just invoke `art` with no argument, I guess it should probably display some help info.

```
--- stdout
Build Script Started
Checking dependencies
ERROR: Missing binary dependencies, their binaries must be put in target/deps/
  mdbook

```

This is not how it should work, obviously.
See #263 

https://github.com/vitiral/artifact/pull/263#issuecomment-471342106
Right now the tutorial uses WAY more detail than would actually be used in a project. To avoid pushing users into a pitfall of over-specifying their project I need to be more upfront in the docs that the highly specific nature is for demonstration, but not a representation of how an actual project would be specified.
The latest version available on scoop is 1.0.1
[reddit post](https://www.reddit.com/r/rust/comments/9wvtoj/lifeguard_v060_an_object_pool_manager_in_rust/)

Artifact does a fair amount of allocations/dropping of values. `lifeguard` scratches an itch that I've had for a while to try to avoid the performance impact.