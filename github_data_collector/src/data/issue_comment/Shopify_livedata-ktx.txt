Code from https://github.com/Shopify/livedata-ktx/blob/master/livedata-ktx/src/main/java/com/shopify/livedataktx/PublishLiveDataKtx.kt:

```
   override fun observe(owner: LifecycleOwner, observer: Observer<in T>) {
        val observeSinceVersion = version
        val wrapper = observerWrappers.getOrElse(observer, Observer {
            if (!isPublish || version > observeSinceVersion) {
                observer.onChanged(it)
            }
        })
        observerWrappers.putIfAbsent(observer, wrapper)
        super.observe(owner, wrapper)
    }

    override fun observeForever(observer: Observer<in T>) {
        val observeSinceVersion = version
        val wrapper = observerWrappers.getOrElse(observer, Observer {
            if (!isPublish || version > observeSinceVersion) {
                observer.onChanged(it)
            }
        })
        observerWrappers.putIfAbsent(observer, wrapper)
        super.observeForever(wrapper)
    }

    override fun removeObserver(observer: Observer<in T>) {
        observerWrappers.get(observer)?.let { super.removeObserver(it) }
        observerWrappers.removeIfPresent(observer)
    }
```

When we call `observeForever()`, all looks good and calling `removeObserver()` with same `Observer` working as expected.

But if we call `observe()` and later lifecycle move to Destroyed state, system call `removeObserver()` with wrapped `Observer`, and we try to find it in `observedWrappers` among non-wrapped observers. Pair instances with weak references to observers just accumulated in array until livedata instance not GCed.

I don't know clear solution of this problem, suppose we can check wrapped and non-wrapped observers both when removing. 
Overload resolution ambiguity all this function match

fun <T, R> LiveData<T>.map(mapper: (T?) -> R?): LiveData<R> = createMediator(this, MapExt<T, R>(mapper))
fun <T, R> SupportMediatorLiveData<T>.map(mapper: (T) -> R): SupportMediatorLiveData<R> = createMediator(this, MapExt<T, R>({
    return@MapExt mapper(it!!)!!
}))

Shows error on using map extension function chaos in choosing map function .
No more need to specify explicitly LiveData's nullability by 'toKtx' or 'toNullableKtx' functions, the compiler will do this job.
There are places where `MutableLiveData` is required, for example in two way data binding. It may be better to make `MutableLiveDataKtx` a subtype of `MutableLiveData` as these dependencies are hard to change. Downside of this will be code duplication and the fact that `MutableLiveDataKtx` would not be subtype of `LiveDataKtx` anymore. I can make a pull request if you consider this as a good idea.