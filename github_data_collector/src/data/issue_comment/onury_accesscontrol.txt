Hello guys,
As to me roles are handled(passed) as array, for instance AccessControl.hasRole iterates over array, and it's not a single place. 

Amount of roles can be 10 or 100 or what ever(at least in my case). It's performance goal for sure.
I believe that roles shall be handled as Object, in this case no need to iterate and shall be O(1).

It's not necessarily a bug but  have to be reviewed at least.
Hi there, loving your work! I am however running into an issue with the `permission.filter()` function. It seems ES6's native implementation of filter() is called when a `Permission` object is passed through the app with `res.locals.permission`. Which means that if I try to do this: `res.json(res.locals.permission.filter(req.user));` it returns an empty object.

My models are defined as `.readOwn('user', [ 'name', 'email', 'phone' ])`, and according to the documentation I should expect just the name, email and phone as a response.
Hello @onury ,Great work here. I want to use this in production and I am requesting to know how the library persists data please.
I found your work very interesting and I am very enthusiastic to learn from you, I followed the Access Control documentation and I found that there are some mistakes in the code snippets in the documentation which can be confusing for someone who is new to javascript. please if you can review your code snippets once that would be great.
![Annotation 2019-10-31 105139](https://user-images.githubusercontent.com/22614040/67921367-6e5d8180-fbcd-11e9-99de-ea9f68cdbfab.png)
 
like in this snippets I found console.log is wrong so if you could fix this small issue I will be pleased 
Hello,

Great work @onury !
I am going to implement accesscontrol in my company express.js APIs.
It matches pretty much exactly what we need.

We were also wondering if this could be used in our Vue apps ? 
I don't see any reason not to but I would like your advice on this.

We would have an API returning basically the whole grants array and then using accesscontrol to facilitate the process of displaying what the connected user has access to.

Would that work or am I missing something ?
probably `filtered` was intended
@onury Thanks for your awesome package. I have a question how can I use your package for **identity based access control** e.g an admin should be able to edit all profiles **except of another admin**.
Looks like this shouldn't have the duplicate `..`

https://github.com/onury/accesscontrol/blob/c91eb6796b4a0e127a99b26f2fceb54d1f3353d4/src/AccessControl.ts#L74
Hi,

Thanks for the nice access control package.

I have a use case where we wanted to tell the client side that they don't have access to the following attribute when they try to access it. But right now the AC only check the roles and allow to filter the attribute, in other words, "gracious" style. 

Is there a function for me to inform the roles that their access is denied because they requested the attributes that they don't have access.

Right now I think I can compare the attributes pre and post filter if it's not equal, I can throw an error but this will require me to do the same checking like the filter if I want to know which attributes that they don't have access.
Hi.

I'm using a middleware grouping role permissions, i got permissions, attributes and role except action. 

```
/**
   * Middleware to grant or deny products creation.
   *
   * @param {Request} req
   * @param {Response} res
   * @param {Function} next
   */
  static async canCreateProducts (req, res, next) {
    const permission = User.canCreateProducts(req.acl.role)
    console.log({ permission: permission.action })
    if (permission.granted) {
      req.acl = { ...(req.acl || {}), ...permission.attributes }
      next()
    } else {
      res.boom.forbidden()
    }
  }
```