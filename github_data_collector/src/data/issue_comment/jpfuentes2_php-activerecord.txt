PHP 7.4 deprecates reversed order of arguments for implode function. This fixes deprecation notice.
I discovered this awhile ago. I patched my local copy to resolve the matter by extending the options in a backwards compatible way. I hope this will become part of the official source. See attached file. [multibyte.txt](https://github.com/jpfuentes2/php-activerecord/files/3535523/multibyte.txt)

I suggest to move the project's website to github pages infrastructure
It'll improve uptime and integrated with CI a simple push can update the project

Motivation:
https://github.com/jpfuentes2/php-activerecord/issues/507
- Fixed count() error in php 7.2
- Added php 7.2 on trevis tests
- Fix count() errors on phpunit tests
- Change travis test php 5.3 to Precise, because now is necessary explicitly stay on Precise. See warning note in the last travis builder of PHP 5.3.
It looks like, this project is inactive for more than 1 year. I really like this library, very straight forward, minimal features. Only missing part is the migration. I am not here to argue about anything.

## What I want to do is, I want to continue the project as a new repo in github.

Is anybody here to help me to make decision.

1. Is version 1.2.0 (latest version) is stable enough to use in large scale application? I mean, can there be any known security issue?

2. Do I need to change directory structure? suppose, I convert to psr-4. Is current directory structure will reduce performance?

Please share what you think. Thanks.
1. $args is always an array from func_get_args()

2. static::find_by_pk() expects $args to be an array

So why are we trying to change $args from an array into a ... non-array?

This fixes the countable error in PHP 7.2 #588 #596 
Issue #598 
Greetings. 

According to the EER Diagram and the Classes below, how can I produce the Query A? 
Can we push the Solution B to better use the joins array? 

**EER Diagram** 
![eer](https://user-images.githubusercontent.com/21157994/47998569-f73efb80-e0e6-11e8-8fc2-bc951903a6eb.jpg)


**Classes**

```
Class Customer extends ActiveRecord\Model
{
	static $has_many = array(array(‘order’), array(‘product’, ‘through’ => ‘order’));
}
Class Order extends ActiveRecord\Model
{
	static $belongs_to = array(array(‘customer’, 'foreign_key' => 'customerid'), array(‘‘product’, 'foreign_key' => 'productid'));
}
Class Product extends ActiveRecord\Model
{
	static $has_many = array(array(‘order’), array(‘customer’, ‘through’ => ‘order’));
}
```

**Call**
```
Customer::all(array('select' => 'customer.name, GROUP_CONCAT(product.name)', 
		    'joins' => array('order','product')));
```

**Query A**
SELECT customer.name, product.name, product.value, order.date 
FROM customer
JOIN order ON customer.customerid = order.customerid 
JOIN product ON product.productid = order.productid

**Solution B**
+ Add to lib/Relationship.php (line 348)
```
if(isset($this->options['through'])) 
{ 
    $through_table = Table::load($this->options['through']); 
    $from_table_name = $through_table->get_fully_qualified_table_name(); 
}
```
Regards,
for a long time phpactiverecord is outdated, but I use it in several projects, what other platform do you recommend to migrate?
The current version of PHP ActiveRecords works in PHP 7.2, but generates several warnings related to count(). In PHP 7.2 this function now triggers a warning when attempting to count a non-countable type. The warning message is as follows:

> Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

These can be very annoying for projects who are keen on keeping their error logs clean and their server disk space from running out. This is an especially large problem because one request can trigger hundreds of these warnings.

Another reason to fix these warnings is that in development environments, PHP warnings are often shown in the output.

