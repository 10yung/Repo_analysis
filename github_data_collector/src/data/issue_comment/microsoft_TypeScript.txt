This test run was triggerd by a request on https://github.com/Microsoft/TypeScript/pull/33716 
Please review the diff and merge if no changes are unexpected.
You can view the build log [here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=60889&_a=summary).

cc @microsoft/typescript 
<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->
<!--
Half of all issues filed here are duplicates, answered in the FAQ, or not appropriate for the bug tracker.

Please help us by doing the following steps before logging an issue:
  * Search: https://github.com/Microsoft/TypeScript/search?type=Issues
  * Read the CONTRIBUTING guidelines: https://github.com/Microsoft/TypeScript/blob/master/CONTRIBUTING.md
  * Read the FAQ: https://github.com/Microsoft/TypeScript/wiki/FAQ
-->

<!-- If you have a QUESTION:
   THIS IS NOT A FORUM FOR QUESTIONS.
   Ask questions at http://stackoverflow.com/questions/tagged/typescript
    or https://gitter.im/Microsoft/TypeScript
-->

<!-- If you have a SUGGESTION:
  Most suggestion reports are duplicates, please search extra hard before logging a new suggestion.
  See https://github.com/Microsoft/TypeScript-wiki/blob/master/Writing-Good-Design-Proposals.md
-->

<!-- If you have a BUG:
  Please fill in the *entire* template below.
-->

<!-- Please try to reproduce the issue with `typescript@next`. It may have already been fixed. -->
**TypeScript Version:**  3.0.0-dev.201xxxxx

<!-- Search terms you tried before logging this (so others can find this issue more easily) -->
**Search Terms:** 
typos, string, lib, es2015.symbol.wellknown

-----

I've wiped the majority of the template since this is a typo report.
I was originally going to just make a PR but the template had:

> * [ ] There is an associated issue in the `Backlog` milestone (**required**)

The typo itself is that `String#match` in `lib.es2015.symbol.wellknown` has it's param description pasted in the middle of it's method description:

https://github.com/microsoft/TypeScript/blob/d2c5d54242c69effbed0ebb27033047e0c995589/src/lib/es2015.symbol.wellknown.d.ts#L209-L212

My PR replaced it with "with a regular expression" - Let me know what the correct way to proceed with this is 🙂 
This test run was triggerd by a request on https://github.com/Microsoft/TypeScript/pull/36293 
Please review the diff and merge if no changes are unexpected.
You can view the build log [here](https://typescript.visualstudio.com/TypeScript/_build/index?buildId=60878&_a=summary).

cc @ahejlsberg

```
export const ON_FIXED_PARAMETERS_SELECTED = 'ON_FIXED_PARAMETERS_SELECTED'
```

Turns into:

```
export reflect ON_FIXED_PARAMETERS_SELECTED
```

The reflect keyword could be something else ... 


<!--
Please try to reproduce the issue with the latest published version. It may have already been fixed.
For npm: `typescript@next`
This is also the 'Nightly' version in the playground: http://www.typescriptlang.org/play/?ts=Nightly
-->
**TypeScript Version:**  3.7.2 & Nightly (2020-01-18)

**Search Terms:** optional chaining, default parameters, `_a is not defined`

**Code**

```ts
const a = (): { d: unknown } | undefined => undefined;
((b = a()?.d) => {})();
```

**Expected behavior:**

This should run without error.

**Actual behavior:**

This throws an error: `ReferenceError: _a is not defined`

**Playground Link:** [link](https://www.typescriptlang.org/play/?ts=3.8.0-dev.20200117&ssl=1&ssc=1&pln=2&pc=25#code/MYewdgzgLgBAhjAvDAFASgFwwN4wCZYCuYA1mCAO5gwC+MAPjMXgKYBmAlmC3kgHxMwrTtzwBuAFAoUAIyTx0AfgB0eNPxy006MUA)

**Related Issues:** n/a

Here's the code it compiles to now for illustration:

```js
"use strict";
const a = () => undefined;
((b = (_a = a()) === null || _a === void 0 ? void 0 : _a.d) => { var _a; })();
```

This error happens because `_a` is used before it's defined. TypeScript adds a `var _a;` inside the function body, but because the assignment occurs in the parameter `_a` is not in scope and the assignment fails. I'm not sure what the preferred solution would be here. I solved it in decaffeinate [by using a helper function](https://decaffeinate-project.org/repl/#?useCS2=false&useJSModules=false&loose=true&evaluate=true&stage=full&code=a%20%3D%20()%20%3D%3E%20undefined%0A((b%20%3D%20a()%3F.d)%20%3D%3E%200)()), though I never really liked that solution.
This is a dupe of #11333, but that issue was marked as closed/fixed (and locked... why?). It's not. It should be reopened and _actually_ fixed. It's also unrelated to 'npm link'.


**IMPORTANT**:

my `e:\work` directory is a JUNCTION point to `y:\work`


node: 13.5.0
npm: 6.13.4
tsc:  3.7.5

index.ts:

````
/// <reference path="node_modules/@types/youtube/index.d.ts" />
````

package.json:

````
{
  "name": "junction-bug",
  "scripts": {
    "tsc": "tsc index.ts"
  },
  "devDependencies": {
    "@types/youtube": "0.0.38",
    "typescript": "^3.7.5"
  }
}
````

**NOTE**: There is NO reference to 'y:' in any of my project's files, nor in any of npm's files. `tsc` is erroneously converting relative paths to absolute paths on the destination drive. look for references to `y:\` in the output below:

````
e:\work\junction-bug>dir e:\ | findstr work
04/19/2016  09:02 AM    <JUNCTION>     work [y:\work]

e:\work\junction-bug>npm i
...
e:\work\junction-bug>findstr /s /i /c:"y:\\" *

e:\work\junction-bug>npm run tsc

> junction-bug@ tsc E:\work\junction-bug
> tsc index.ts

node_modules/@types/youtube/index.d.ts:16:1 - error TS6200: Definitions of the following identifiers conflict with those in another file: UNSTARTED, ENDED, PLAYING, PAUSED, BUFFERING, CUED, InvalidParam, Html5Error, VideoNotFound, EmbeddingNotAllowed, EmbeddingNotAllowed2, AlwaysVisible, HideAllControls, HideProgressBar, NoAutoPlay, AutoPlay, UserDefault, ForceOn, ProgressBarColor, Hide, ShowLoadPlayer, ShowDelayLoadPlayer, Enable, Disable, Show, ListType, ListTypePlayer, ListTypeSearch, ListTypeUserUploads, SinglePlay, Loop, Full, Modest, Fullscreen, Inline, SuggestedVideoQuality, VideoQualityDefault, VideoQualitySmall, VideoQualityMedium, VideoQualityLarge, VideoQualityHD720, VideoQualityHD1080, VideoQualityHighRes, Player

16 declare namespace YT
   ~~~~~~~

  y:/work/junction-bug/node_modules/@types/youtube/index.d.ts:16:1
    16 declare namespace YT
       ~~~~~~~
    Conflicts are in this file.

y:/work/junction-bug/node_modules/@types/youtube/index.d.ts:16:1 - error TS6200: Definitions of the following identifiers conflict with those in 
another file: UNSTARTED, ENDED, PLAYING, PAUSED, BUFFERING, CUED, InvalidParam, Html5Error, VideoNotFound, EmbeddingNotAllowed, EmbeddingNotAllowed2, AlwaysVisible, HideAllControls, HideProgressBar, NoAutoPlay, AutoPlay, UserDefault, ForceOn, ProgressBarColor, Hide, ShowLoadPlayer, ShowDelayLoadPlayer, Enable, Disable, Show, ListType, ListTypePlayer, ListTypeSearch, ListTypeUserUploads, SinglePlay, Loop, Full, Modest, Fullscreen, Inline, SuggestedVideoQuality, VideoQualityDefault, VideoQualitySmall, VideoQualityMedium, VideoQualityLarge, VideoQualityHD720, VideoQualityHD1080, VideoQualityHighRes, Player

16 declare namespace YT
   ~~~~~~~

  node_modules/@types/youtube/index.d.ts:16:1
    16 declare namespace YT
       ~~~~~~~
    Conflicts are in this file.


Found 2 errors.

````

**Related Issues:** 113333

Fixes #36147.
<!--
Thank you for submitting a pull request!

Please verify that:
* [ ] There is an associated issue in the `Backlog` milestone (**required**)
* [ ] Code is up-to-date with the `master` branch
* [ ] You've successfully run `gulp runtests` locally
* [ ] There are new or updated unit tests validating the change

Refer to CONTRIBUTING.MD for more details.
  https://github.com/Microsoft/TypeScript/blob/master/CONTRIBUTING.md
-->

Fixes #35629


Open issues:
1. [ ] How to handle interfaces that can't be implemented in JS, for example those with index signatures
2. [ ] Fix code fix that implements missing interface members (currently it does not show up, but it would be nice if it worked for JS as well)
3. [ ] Add more tests

@sandersn For 1 I would suppress these errors for JS.  For 2, do you think it is worth showing the fix?  Also maybe we could have a typescript-bot pack of this so @TimvdLippe can maybe give it a try. 

One issue, unrelated to `@implements` necessarily, is that method in the classes used as interfaces in @TimvdLippe example don't have any return statement, so any return type will cause an error. Support for `@abstract` was taken out of the scope of #35629, but maybe adding support for `@abstract` could be useful to suppress these errors. Using `@ts-ignore` might also be a simpler workaround. 

Follow-up on #36290 and #36001 
There are more to come.