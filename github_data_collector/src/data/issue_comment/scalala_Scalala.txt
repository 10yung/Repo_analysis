Thanks so much for Scalala.

Then proguard target will work properly with Java 7.

Scalala version:
<dependency>
  <groupId>org.scalala</groupId>
  <artifactId>scalala_2.9.1</artifactId>
  <version>1.0.0.RC2</version>
</dependency>

Scala version:
<scala.version>2.9.1</scala.version>

I get NullPointerException error on calling 'hist(ratingHistVec, 100)' in a loop every 100ms-1s. The ratingHistVec object is a vector of double numbers.

Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
    at org.jfree.chart.plot.XYPlot.drawRangeGridlines(XYPlot.java:3920)
    at org.jfree.chart.plot.XYPlot.draw(XYPlot.java:3245)
    at org.jfree.chart.JFreeChart.draw(JFreeChart.java:1235)
    at org.jfree.chart.ChartPanel.paintComponent(ChartPanel.java:1668)
    at javax.swing.JComponent.paint(JComponent.java:1029)
    at javax.swing.JComponent.paintChildren(JComponent.java:862)
    at javax.swing.JComponent.paint(JComponent.java:1038)
    at javax.swing.JComponent.paintChildren(JComponent.java:862)
    at javax.swing.JComponent.paint(JComponent.java:1038)
    at javax.swing.JComponent.paintChildren(JComponent.java:862)
    at javax.swing.JComponent.paint(JComponent.java:1038)
    at javax.swing.JLayeredPane.paint(JLayeredPane.java:567)
    at javax.swing.JComponent.paintChildren(JComponent.java:862)
    at javax.swing.JComponent.paintToOffscreen(JComponent.java:5131)
    at javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(RepaintManager.java:1479)
    at javax.swing.RepaintManager$PaintManager.paint(RepaintManager.java:1410)
    at javax.swing.RepaintManager.paint(RepaintManager.java:1224)
    at javax.swing.JComponent.paint(JComponent.java:1015)
    at java.awt.GraphicsCallback$PaintCallback.run(GraphicsCallback.java:21)
    at sun.awt.SunGraphicsCallback.runOneComponent(SunGraphicsCallback.java:60)
    at sun.awt.SunGraphicsCallback.runComponents(SunGraphicsCallback.java:97)
    at java.awt.Container.paint(Container.java:1780)
    at java.awt.Window.paint(Window.java:3375)
    at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:796)
    at javax.swing.RepaintManager.paintDirtyRegions(RepaintManager.java:713)
    at javax.swing.RepaintManager.seqPaintDirtyRegions(RepaintManager.java:693)
    at javax.swing.SystemEventQueueUtilities$ComponentWorkRequest.run(SystemEventQueueUtilities.java:125)
    at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)
    at java.awt.EventQueue.dispatchEvent(EventQueue.java:597)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)
    at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)
    at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)
    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)
    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)
    at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)

Hi,
I need to extend scalala to work with class BigDecimal. I implemented an implicit object for Scalar[BigDecimal] and a lot of implicit objects for the different operators, but since the trait DefaultArrayValue is sealed, I cannot define an object of class  DefaultArrayValue without changing the scalala source code. Why is this trait sealed? Wouldn't be better to make it non-sealed?

If I do:

val m1 = DenseMatrix.rand(10,10)
val m2 = DenseMatrix.rand(10,10)
m1 \* m2 

I get:

TransA must be 111, 112 or 113, but is set to -1TransB must be 111, 112 or 113, but is set to -1Parameter 2 to routine cblas_dgemm was incorrect
ERROR in F2J JNI: getTrans() got n

and then JVM crashes silently. I have no trouble running MTJ or jblas code. Any ideas?

Hi,
I've updated the build to use Scala 2.9.2 instead of 2.9.1.

At the moment it is only cross-built to 2.9.2 and 2.8.2 (as previously), as I did not think 2.9.1 was required anymore given that 2.9.x should be binary compatible. However if you want to keep a 2.9.1 cross-build, let me know and I'll add it to another pull request assuming you reject this.

While doing some basic linear regression in my program (it calculates the parameter matrix ok but then) I get results like this:

ERROR: Second call to constructor of static parser.  You must
neurogenesis.doubleprecision.NeuralEvolver@2fe93820: caught java.lang.ErrorERROR: Second call to constructor of static parser.  You must
       either use ReInit() or set the JavaCC option STATIC to false
       during parser generation.

neurogenesis.doubleprecision.NeuralEvolver@78dde50e: caught java.lang.Error
java.lang.Error
    at org.j_paine.formatter.FormatParser.<init>(FormatParser.java:353)
    at org.j_paine.formatter.FormatParser.<init>(FormatParser.java:346)
    at org.j_paine.formatter.Parsers.<init>(Formatter.java:1748)
    at org.j_paine.formatter.Parsers.theParsers(Formatter.java:1739)
    at org.j_paine.formatter.Format.<init>(Formatter.java:177)
    at org.j_paine.formatter.Formatter.<init>(Formatter.java:30)
    at org.netlib.util.Util.f77write(Util.java:429)
    at org.netlib.err.Xerbla.xerbla(err.f)

It was working alright just a few days ago. I only made some minor changes which I think are unrelated to the trouble so I have no idea what happened and haven't yet figured how I can compile that parser with the suggested option to see if it fixes the error. Anyone here have ideas?

The use of horzcat below when the result is not a square matrix:

``` scala
val vvc: DenseMatrix[Int] =
      DenseVectorCol.horzcat[Int](DenseVectorCol(1,4,7),
                                  DenseVectorCol(2,5,8))
```

results in the exception below:

``` scala
scalala.tensor.domain.DomainException: Incompatible domain: IndexDomain(3) for IndexDomain(2)
     at scalala.tensor.DomainFunction$class.checkDomain(DomainFunction.scala:54)
     at scalala.tensor.dense.DenseVectorCol.checkDomain(DenseVector.scala:442)
     at scalala.tensor.dense.LowPriorityDenseImplicits$CanJoinDenseWithNonDense.joinAll(DenseVector.scala:111)
     at scalala.tensor.dense.LowPriorityDenseImplicits$CanJoinDenseWithNonDense.joinAll(DenseVector.scala:106)
     at scalala.tensor.mutable.TensorImplicitsLevel1$$anon$4.apply(Tensor.scala:198)
     at scalala.tensor.mutable.TensorImplicitsLevel1$$anon$4.apply(Tensor.scala:194)
     at scalala.operators.MutableNumericOps$class.$colon$eq(Ops.scala:199)
     at scalala.tensor.dense.DenseVectorCol.$colon$eq(DenseVector.scala:442)
     at scalala.tensor.dense.DenseVectorColConstructors$$anonfun$horzcat$4.apply(DenseVector.scala:625)
     at scalala.tensor.dense.DenseVectorColConstructors$$anonfun$horzcat$4.apply(DenseVector.scala:624)
     at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:60)
     at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:44)
     at scalala.tensor.dense.DenseVectorColConstructors$class.horzcat(DenseVector.scala:624)
     at scalala.tensor.dense.DenseVectorCol$.horzcat(DenseVector.scala:644)
     at .<init>(<console>:36)
     at .<clinit>(<console>)
     at .<init>(<console>:11)
     at .<clinit>(<console>)
     at $print(<console>)
     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
     at java.lang.reflect.Method.invoke(Method.java:597)
     at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.call(IMain.scala:704)
     at scala.tools.nsc.interpreter.IMain$Request.loadAndRun(IMain.scala:914)
     at scala.tools.nsc.interpreter.IMain.loadAndRunReq$1(IMain.scala:546)
     at scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:577)
     at scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:543)
     at scala.tools.nsc.interpreter.ILoop.reallyInterpret$1(ILoop.scala:694)
     at scala.tools.nsc.interpreter.ILoop.interpretStartingWith(ILoop.scala:745)
     at scala.tools.nsc.interpreter.ILoop.reallyInterpret$1(ILoop.scala:712)
     at scala.tools.nsc.interpreter.ILoop.interpretStartingWith(ILoop.scala:745)
     at scala.tools.nsc.interpreter.ILoop.command(ILoop.scala:651)
     at scala.tools.nsc.interpreter.ILoop.processLine$1(ILoop.scala:542)
     at scala.tools.nsc.interpreter.ILoop.loop(ILoop.scala:550)
     at scala.tools.nsc.interpreter.ILoop.process(ILoop.scala:822)
     at scala.tools.nsc.interpreter.ILoop.main(ILoop.scala:851)
     at xsbt.ConsoleInterface.run(ConsoleInterface.scala:57)
     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
     at java.lang.reflect.Method.invoke(Method.java:597)
     at sbt.compiler.AnalyzingCompiler.call(AnalyzingCompiler.scala:57)
     at sbt.compiler.AnalyzingCompiler.console(AnalyzingCompiler.scala:48)
     at sbt.Console.console0$1(Console.scala:23)
     at sbt.Console$$anonfun$apply$2$$anonfun$apply$1.apply$mcV$sp(Console.scala:24)
     at sbt.TrapExit$.executeMain$1(TrapExit.scala:33)
     at sbt.TrapExit$$anon$1.run(TrapExit.scala:42)
```

Looking at line 623 of DenseVector:

``` scala
val result = DenseMatrix.zeros[V](vectors.size, size)
```

When I changed the above line to:

``` scala
val result = DenseMatrix.zeros[V](size, vectors.size)
```

The result became:

``` scala
res45: scalala.tensor.dense.DenseMatrix[Int] =
1  2 
4  5 
7  8 
```

If that is the right fix, let me know how you want the patch submitted (I am new to git and github).

I tried to follow the instructions on the wiki(https://github.com/scalala/Scalala/wiki/QuickStart), but couldn't build it, because 1.0.0.RC3-SNAPSHOT isn't in the http://scala-tools.org/repo-snapshots/org/scalala/scalala_2.9.1/.

This is really just a repost from the google group but since noone has answered in quite a long time and I feel that this might be an issue, please let me ask the following question:

While I'm probably not seeing the wood for the trees, I'm somehow confused with Library.sum for matrices or, more specifically, its result. For 

`val foo = DenseMatrix((1,2,3), (4,5,6))`

I'd expect

`sum(foo, Axis.Horizontal)`

to return the sum _along the horizontal axis_, i.e. some `VectorCol(6, 15)`. The same applies to the vertical sum, only vice versa. However, the horizontal and vertical axes seem to be swapped, hence `sum(foo, Axis.Horizontal)` returns some `VectorRow(5,7,9)`.

So my question is whether this is the desired behaviour as I would have expected the contrary. Maybe this is due to the fact that English is a foreign language for me and I'm mixing up the meaning of summing "along" the horizontal or vertical axis (not mocking here, I really think I might have misunderstood the meaning)?

Regards,
Alexander
