I was going throught the case studies for `coconut` tutorial and tried using `addpattern` 

```python
def factorial(0) = 1

addpattern def factorial(n is int if n > 0) =
    """Compute n! where n is an integer >= 0."""
    n * factorial(n - 1)

# Test cases:
-1 |> factorial |> print  # MatchError
0.5 |> factorial |> print  # MatchError
0 |> factorial |> print  # 1
3 |> factorial |> print  # 6
```

Now compiling with `coconut fact.coco --mypy` yielded 

```
CoconutWarning: missing __init__.coco in package: '...'
Compiling         fact.coco ...
Compiled to       fact.py .
fact.py:39: error: Name 'factorial' already defined on line 23
Found 1 error in 1 file (checked 1 source file)
Exiting due to MyPy error.
```

The code runs and all but I want to know if this is expected and desired output from `mypy`?
This adds a `no-wrap` flag to the compiler to disable wrapping typedefs to resolve #514 

I'm a bit mixed about the name of the flag, I feel like it's too ambiguous and I'm very much open to changing it.
When Coconut has to do something that will obviously break type-checking (outside of the header) it should automatically add `type: ignore` comment.
I tried to do something similar to this:
```
def some_expensive_function(a) = a*10

def f(a) = (c:=some_expensive_function(a)) :: f(c)
```

but it compiles to code which throws:
>SyntaxError: assignment expression cannot be used in a comprehension iterable expression


Hi!

I'm trying to find out how to run coconut environment in Google Colab. If there is anyone who succeeded in the work, please share your experience. 
Thank you in advance.
Jin
When compiling to Python with target set to any version above 3.x the type hints for functions and variables get wrapped in single quotes. This breaks functionality with some libraries which rely on type hints such as pydantic.

I first noticed it with `Coconut: Version 1.4.1 [Ernest Scribbler] running on Python 3.7.4` but tested it out on the online interpreter with Python `3.3` `3.4` `3.5` and `3.6` with the same results.

Based on the documentation at https://coconut.readthedocs.io/en/master/DOCS.html#enhanced-type-annotation it looks like it should be possible to use standard `3.5` type annotation syntax. 

For context I was originally testing to see if I could use coconut with fastapi.
Thanks to Microsoft's language server protocol there are tons of opensource implementation of [LSP ](https://langserver.org/) in other languages (there are even two implementations for python).

I would like to start a discussion on how it would look like for Coconut. Also what about static code analysis like flake8 or pylint, what would that look like?
Should compile
```python
addpattern def f(...) = ...
```
into
```python
def _unique_name_(...) = ...
f = addpattern(f)(_unique_name_)
```
when there are no additional decorators.
Should do the same thing Coconut does internally.
The setup and teardown is horrendous if you call `parallel_map` multiple times. We should just use the same pool for all calls.