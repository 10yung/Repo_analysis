I am developer who has Linux. But want to build for  iOS apps. How could I use Mainframer to build for iOS from my local machine ?
Hey, so Im setting up the 3.x version of mainframer, and notice that the ignore.yml is not respected by mainframer. Looking further, I noticed that `Ignore::from_working_dir()` uses three different files, unlike what is specified in the Readme.
Although I can go in myself and modify the changes, is this the approach the tool will take henceforth ? Is there a board / scope of work for 3.x  that I could possibly help out with as well?
Thanks !
`mainframer` is really long thing to type, coworkers of mine usually alias it to `m`, I think `mf` can be a good option in the middle, similarly to how `ripgrep` is `rg`

@ming13 wdyt?
We can run rsync in `dry-run` mode and then run rsync in parallel against resulting files/dirs, might end up being faster.

Just an idea.
The instructions indicate that I can install `mainframer` from Brew (https://github.com/buildfoundation/mainframer/blob/3.x/docs/getting-started/local-machine.md#macos).

However, the tap `https://github.com/buildfoundation/homebrew-tap` looks like it's a private repo? 

```
 brew tap buildfoundation/homebrew-tap
==> Tapping buildfoundation/tap
Cloning into '/usr/local/Homebrew/Library/Taps/buildfoundation/homebrew-tap'...
...
fatal: Authentication failed for 'https://github.com/buildfoundation/homebrew-tap/'
Error: Failure while executing; `git clone https://github.com/buildfoundation/homebrew-tap /usr/local/Homebrew/Library/Taps/buildfoundation/homebrew-tap --depth=1` exited with 128.
```
Not really an Issue but Xcode builds are slow this would be amazing for Xcode!
Thanks 
# @[enhancement](/buildfoundation/mainframer/labels/enhancement)  l

When hitting Control + C it is not correctly "propagated" to the remote machine. While the build stops locally the processes are still running on the remote machine.


Context: https://twitter.com/artem_zin/status/1067842525317148672

>heh, @\arturdryomov asked if we should rewrite Mainfraimer in Swift, I said it brings giant runtime and indeed as we checked with @\kastiglione, a simple Swift CLI binary is ~10 MB and ~6.5 after strip Mainframer (Rust, release build) is around 725K, 479K after strip
Right now we fully rely on `~/.ssh/config` implicitly processed by `ssh` and the fact that default port is `22`, adding it on our config level will allow project-specific overrides as part of #213.
Right now we rely on `~/.ssh/config` implicitly processed by `ssh`, adding it on our config level will allow project-specific overrides.

Right now it's also possible to set user as part of `remote_machine` like that `user@computer`, which is fine I guess, but should be separate for better project-level override support as part of #213.