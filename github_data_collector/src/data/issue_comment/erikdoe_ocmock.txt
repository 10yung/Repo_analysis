When using `OCMVerifyAll` with OCMock 3.5 I'm seeing a compile-time error. The object in question is an `OCMProtocolMock`, though an `OCMClassMock` did the same thing.
Request to provide support for the swift package.
At WWDC 2019, Apple announced Xcode integration with Swift Package Manager. It would be great to be able to use it with OCMock.
Hi, I'm seeing occasional unit test failures when running tests via `xcodebuild`. These tests all fail with the same error (see below)

I cannot reproduce when running unit tests via the Xcode UI and re-running the test suite typically yields no errors. 

**Xcode Version**: 10.1
**`xcodebuild` command**: 
**OCMock Version**: 3.4.3
```
xcodebuild -workspace "<workspace>" -scheme "<unit test scheme>" -sdk appletvsimulator -destination 'platform=tvOS Simulator,name=Apple TV,OS=11.4' clean test || exit 1
```
**Additional Context**:
Most of the test classes which exhibit these failures have mocking calls related to `NSDictionary` such as 
`OCMPartialMock([NSMutableDictionary dictionary])` or `OCMClassMock([NSDictionary class])`

**Error**:
```
2019-01-28 22:54:50.228494-0800 xctest[35517:994001] +[__NSDictionaryM ocmock_replaced_ocmock_replaced___new:::::]: unrecognized selector sent to class 0x10fb6e3f0
2019-01-28 22:54:50.241866-0800 xctest[35517:994001] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '+[__NSDictionaryM ocmock_replaced_ocmock_replaced___new:::::]: unrecognized selector sent to class 0x10fb6e3f0'
*** First throw call stack:
(
	0   CoreFoundation                      0x000000010f8a6a56 __exceptionPreprocess + 294
	1   libobjc.A.dylib                     0x000000010ef3c031 objc_exception_throw + 48
	2   CoreFoundation                      0x000000010f927b24 +[NSObject(NSObject) doesNotRecognizeSelector:] + 132
	3   CoreFoundation                      0x000000010f829108 ___forwarding___ + 1432
	4   CoreFoundation                      0x000000010f828ae8 _CF_forwarding_prep_0 + 120
	5   CoreFoundation                      0x000000010f82a53c __invoking___ + 140
	6   CoreFoundation                      0x000000010f82a3f4 -[NSInvocation invoke] + 308
	7   OCMock                              0x00000001250332a4 -[OCClassMockObject forwardInvocationForClassObject:] + 244
	8   CoreFoundation                      0x000000010f828e68 ___forwarding___ + 760
	9   CoreFoundation                      0x000000010f828ae8 _CF_forwarding_prep_0 + 120
	10  CoreFoundation                      0x000000010f82a53c __invoking___ + 140
	11  CoreFoundation                      0x000000010f82a3f4 -[NSInvocation invoke] + 308
	12  OCMock                              0x00000001250332a4 -[OCClassMockObject forwardInvocationForClassObject:] + 244
	13  CoreFoundation                      0x000000010f828e68 ___forwarding___ + 760
	14  CoreFoundation                      0x000000010f828ae8 _CF_forwarding_prep_0 + 120
	15  CoreFoundation                      0x000000010f7b6cd4 -[__NSPlaceholderDictionary initWithCapacity:] + 116
	16  Foundation                          0x000000010e800ec2 -[NSKeyedArchiver _initWithOutput:] + 390
	17  Foundation                          0x000000010e8b1563 -[NSKeyedArchiver(NSKeyedArchiverSecureCodingInitializers) initRequiringSecureCoding:] + 33
	18  Foundation                          0x000000010e8b15ce +[NSKeyedArchiver(NSKeyedArchiverSecureCodingInitializers) archivedDataWithRootObject:requiringSecureCoding:error:] + 76
	19  DTXConnectionServices               0x000000011ced95a4 _withSerializedObject + 107
	20  DTXConnectionServices               0x000000011ced98f1 -[DTXMessage initWithInvocation:] + 530
	21  DTXConnectionServices               0x000000011cec26ee -[DTXProxyChannel _sendInvocationMessage:] + 141
	22  CoreFoundation                      0x000000010f828e68 ___forwarding___ + 760
	23  CoreFoundation                      0x000000010f828ae8 _CF_forwarding_prep_0 + 120
	24  XCTest                              0x000000010ee3dcb7 -[XCTRunnerIDESession logDebugMessage:] + 94
	25  XCTest                              0x000000010edb2d11 __32-[XCTestDriver logDebugMessage:]_block_invoke + 113
	26  libdispatch.dylib                   0x0000000112f876cb _dispatch_call_block_and_release + 12
	27  libdispatch.dylib                   0x0000000112f88709 _dispatch_client_callout + 8
	28  libdispatch.dylib                   0x0000000112f90142 _dispatch_queue_serial_drain + 735
	29  libdispatch.dylib                   0x0000000112f9093f _dispatch_queue_invoke + 321
	30  libdispatch.dylib                   0x0000000112f92c88 _dispatch_root_queue_drain + 473
	31  libdispatch.dylib                   0x0000000112f92a51 _dispatch_worker_thread3 + 119
	32  libsystem_pthread.dylib             0x00000001134ad6dd _pthread_wqthread + 619
	33  libsystem_pthread.dylib             0x00000001134ad405 start_wqthread + 13
)
```
Hello, I am using OCMock and trying to create a mock object of type, NSData, and run the following line.
`id dataMock = OCMClassMock([NSData class])`

I have the All Exceptions breakpoint set up, and whenever I tried to run the test, it throws an exception with this stack trace:
![image](https://user-images.githubusercontent.com/4283148/50484965-368c1900-09c1-11e9-9d03-3d490117d698.png)

The selector that causes this is issue for me is NSData's `dataWithCPPData:copy:`.

I have found a similar issue, #107 , that does address the same type of issue that I am seeing here, however with a different data type, and is addressed in the version of OCMock I am running (3.4.3). The main difference between the issue I am seeing and the issue linked, is the data type and the selector in the stack trace that throws the exception.

I am currently using OCMock version 3.4.3 and running Xcode 10.1 on macOS Mojave 10.14.1. I have tested this on iOS 11.4 and 12.1.

Thank you.
Hi Erik, I'm working on a branch of OCMock to add additional quality checks to the project ([ASan](https://developer.apple.com/documentation/code_diagnostics/address_sanitizer), [TSan](https://developer.apple.com/documentation/code_diagnostics/thread_sanitizer), & [UBSan](https://developer.apple.com/documentation/code_diagnostics/undefined_behavior_sanitizer)). While working on implementing these additional checks when running the unit tests, they uncovered some issues.

### TSan Issues
The thread sanitizer found 5 tests involving notification mock objects that all failed with the same error: when verify is called on the mock, you end up with a `Thread 1: EXC_BAD_ACCESS (code=EXC_I386_GPFLT)`. TSan is indicating that there is a memory read error, so I'm wondering if the notification mock is either in the process of being released or is already released since `OCObserverMockObject` has the `autoRemoveFromCenter:` concept.

```
Test Case '-[OCMockObjectMacroTests testSetsUpNotificationPostingAndNotificationObserving]' started.
ThreadSanitizer:DEADLYSIGNAL
==33509==ERROR: ThreadSanitizer: SEGV on unknown address 0x000000000000 (pc 0x000109c0efa7 bp 0x7ffee7d2d750 sp 0x7ffee7d2d488 T121810)
==33509==The signal is caused by a READ memory access.
==33509==Hint: address points to the zero page.
    #0 objc_retain <null>:525056192 (libobjc.A.dylib:x86_64+0x16fa6)

==33509==Register values:
rax = 0x0000000000000000  rbx = 0x00007b540005dfc0  rcx = 0x000000000000010c  rdx = 0x000000010cbaa380  
rdi = 0x4000000000000000  rsi = 0x0000000000000000  rbp = 0x00007ffee7d2d750  rsp = 0x00007ffee7d2d488  
 r8 = 0x0000000000000001   r9 = 0x0000000000000001  r10 = 0x0000000000000000  r11 = 0x0000000000000000  
r12 = 0x00007b10001cb740  r13 = 0x00007b540005de80  r14 = 0x00007b10001cb748  r15 = 0x00007b080001fac0  
ThreadSanitizer can not provide additional info.
SUMMARY: ThreadSanitizer: SEGV (libobjc.A.dylib:x86_64+0x16fa6) in objc_retain
==33509==ABORTING


Test Case '-[OCMockObjectMacroTests testNotificationObservingWithUserInfo]' started.
ThreadSanitizer:DEADLYSIGNAL
==33672==ERROR: ThreadSanitizer: SEGV on unknown address 0x000000000000 (pc 0x000106896fa7 bp 0x7ffeeb0a5750 sp 0x7ffeeb0a5568 T122943)
==33672==The signal is caused by a READ memory access.
==33672==Hint: address points to the zero page.
    #0 objc_retain <null>:475863232 (libobjc.A.dylib:x86_64+0x16fa6)

==33672==Register values:
rax = 0x0000000000000000  rbx = 0x00007b540005bf40  rcx = 0x000000000000010c  rdx = 0x0000000109832380  
rdi = 0x4000000000000000  rsi = 0x0000000000000000  rbp = 0x00007ffeeb0a5750  rsp = 0x00007ffeeb0a5568  
 r8 = 0x0000000000000001   r9 = 0x0000000000000001  r10 = 0x0000000000000000  r11 = 0x0000000000000000  
r12 = 0x00007b10001cd400  r13 = 0x00007b540005be00  r14 = 0x00007b10001cd408  r15 = 0x00007b080001eaa0  
ThreadSanitizer can not provide additional info.
SUMMARY: ThreadSanitizer: SEGV (libobjc.A.dylib:x86_64+0x16fa6) in objc_retain
==33672==ABORTING


Test Case '-[OCObserverMockObjectTest testAcceptsExpectedNotification]' started.
ThreadSanitizer:DEADLYSIGNAL
==33854==ERROR: ThreadSanitizer: SEGV on unknown address 0x000000000000 (pc 0x000109953fa7 bp 0x7ffee7fe8750 sp 0x7ffee7fe8628 T124339)
==33854==The signal is caused by a READ memory access.
==33854==Hint: address points to the zero page.
    #0 objc_retain <null>:527243456 (libobjc.A.dylib:x86_64+0x16fa6)

==33854==Register values:
rax = 0x0000000000000000  rbx = 0x00007b5400086240  rcx = 0x000000000000010c  rdx = 0x000000010c8ef380  
rdi = 0x4000000000000000  rsi = 0x0000000000000000  rbp = 0x00007ffee7fe8750  rsp = 0x00007ffee7fe8628  
 r8 = 0x0000000000000001   r9 = 0x0000000000000001  r10 = 0x0000000000000000  r11 = 0x0000000000000000  
r12 = 0x00007b10001d0900  r13 = 0x00007b5400086100  r14 = 0x00007b10001d0908  r15 = 0x00007b080001fa40  
ThreadSanitizer can not provide additional info.
SUMMARY: ThreadSanitizer: SEGV (libobjc.A.dylib:x86_64+0x16fa6) in objc_retain
==33854==ABORTING


Test Case '-[OCObserverMockObjectTest testAcceptsExpectedNotificationWithSpecifiedObjectAndUserInfo]' started.
ThreadSanitizer:DEADLYSIGNAL
==34033==ERROR: ThreadSanitizer: SEGV on unknown address 0x000000000000 (pc 0x000101f27fa7 bp 0x7ffeefa14750 sp 0x7ffeefa145f8 T125537)
==34033==The signal is caused by a READ memory access.
==34033==Hint: address points to the zero page.
    #0 objc_retain <null>:394086592 (libobjc.A.dylib:x86_64+0x16fa6)

==34033==Register values:
rax = 0x0000000000000000  rbx = 0x00007b54000765c0  rcx = 0x000000000000010c  rdx = 0x0000000104f63380  
rdi = 0x4000000000000000  rsi = 0x0000000000000000  rbp = 0x00007ffeefa14750  rsp = 0x00007ffeefa145f8  
 r8 = 0x0000000000000001   r9 = 0x0000000000000001  r10 = 0x0000000000000000  r11 = 0x0000000000000000  
r12 = 0x00007b10001d0a40  r13 = 0x00007b5400076480  r14 = 0x00007b10001d0a48  r15 = 0x00007b080001ea80  
ThreadSanitizer can not provide additional info.
SUMMARY: ThreadSanitizer: SEGV (libobjc.A.dylib:x86_64+0x16fa6) in objc_retain
==34033==ABORTING

Test Case '-[OCObserverMockObjectTest testChecksNotificationNamesCorrectly]' started.
ThreadSanitizer:DEADLYSIGNAL
==34211==ERROR: ThreadSanitizer: SEGV on unknown address 0x000000000000 (pc 0x0001094acfa7 bp 0x7ffee848f750 sp 0x7ffee848f608 T126770)
==34211==The signal is caused by a READ memory access.
==34211==Hint: address points to the zero page.
    #0 objc_retain <null>:522000576 (libobjc.A.dylib:x86_64+0x16fa6)

==34211==Register values:
rax = 0x0000000000000000  rbx = 0x00007b5400056a40  rcx = 0x000000000000010c  rdx = 0x000000010c448380  
rdi = 0x4000000000000000  rsi = 0x0000000000000000  rbp = 0x00007ffee848f750  rsp = 0x00007ffee848f608  
 r8 = 0x0000000000000001   r9 = 0x0000000000000001  r10 = 0x0000000000000000  r11 = 0x0000000000000000  
r12 = 0x00007b10001d09c0  r13 = 0x00007b5400056900  r14 = 0x00007b10001d09c8  r15 = 0x00007b080001fb20  
ThreadSanitizer can not provide additional info.
SUMMARY: ThreadSanitizer: SEGV (libobjc.A.dylib:x86_64+0x16fa6) in objc_retain
==34211==ABORTING
```

### UBSan Issue
The undefined behavior sanitizer found 1 test that exposed a nullability issue in `setupForwarderForSelector:` in `OCPartialMockObject`.  The `testStubsMethodImplementation` test in `OCMockForwardingTargetTests` indicates that when the forwarder is being setup, the `originalMethod` is nil, so when you pass that to `method_getImplementation`, that is not allowed since the method parameter is marked explicitly as nonnull. I'm wondering if you need to return early there or do something similar to a few lines below where you are checking if the type encoding is null.
<img width="2160" alt="screen shot 2018-10-17 at 8 27 27 am" src="https://user-images.githubusercontent.com/408449/47090791-331e2980-d1e9-11e8-8d4f-e371e8e16e35.png">


I'd be happy to fix these on my branch where I'm adding these checks in, but I'm unsure of the correct solution.
I've noticed that usually when I Cmd-click to learn more about some OCMock method/macro, I get a header with very little comments.
This issue happens all the time when I stub a mock object and use `andReturn` with this mock object or use `OCMArg` with reference to this mock object.

Example with singleton stubbing:
```
id singletonClassMock = OCMClassMock([Singleton class]);
OCMStub(ClassMethod([singletonClassMock shared])).andReturn(singletonClassMock);
```
`dealloc` is never called as well as `stopMocking`

Example with `OCMArg` stubbing:
```
OCMStub([mock methodWithBlock:([OCMArg invokeBlockWithArgs:mock, nil])]);
```

So we have memory leaking here and should manually call `stopMocking` to prevent unexpected behavior.

Is there any way to fix this problem?

Thanks!
Hi Erik,

Now that OCMock retains arguments passed to mocks, I’m unable to test dealloc logic for objects whose references are retained by mocks.

Is it possible to enable "legacy" behavior on a per-mock basis, such as adding a method on OCMockObject that skips retention ("noRetainObjectArgs") or releases arguments ("releaseObjectArgs")? Happy to contribute if either seems reasonable.

Thanks,

Alan
When using `OCMPartialMock` to mock a `UIView` that has been inserted in the view hierarchy (passed to `-addSubView:` of some other view), then the app crashes in `NSInvocation` `-dealloc`. This can be reproduced with the following test:

````objc
- (void)testDealloc
{
    UIView* view1 = [[UIView alloc] initWithFrame:CGRectZero];
    UIView* view2 = [[UIView alloc] initWithFrame:CGRectZero];
    [view1 addSubview:view2];
    id viewMock = OCMPartialMock(view2);
    NSLog(@"silence warning: Unused variable 'viewMock', %p", (__bridge void*)viewMock);
}
````

To test, just paste this in `iOS9ExampleTests.m`, build with Xcode 9.0, and run the tests on iPhone 6s 10.0 simulator, and you'll have a crash with the following callstack:

````
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=EXC_I386_GPFLT)
    frame #0: 0x000000010f7d6d2b libobjc.A.dylib`objc_release + 11
    frame #1: 0x000000010fdb920e CoreFoundation`common_removeAllObjects + 254
    frame #2: 0x000000010fc968c3 CoreFoundation`-[__NSArrayM dealloc] + 19
    frame #3: 0x000000010f7d7b12 libobjc.A.dylib`objc_object::sidetable_release(bool) + 212
    frame #4: 0x000000010f7d20c3 libobjc.A.dylib`_object_remove_assocations + 375
    frame #5: 0x000000010f7cd4ea libobjc.A.dylib`objc_destructInstance + 141
    frame #6: 0x000000010f7cd510 libobjc.A.dylib`object_dispose + 22
    frame #7: 0x000000010fce911b CoreFoundation`-[NSInvocation dealloc] + 139
    frame #8: 0x000000010f7d7b12 libobjc.A.dylib`objc_object::sidetable_release(bool) + 212
    frame #9: 0x000000010fdb920e CoreFoundation`common_removeAllObjects + 254
    frame #10: 0x000000010fc968c3 CoreFoundation`-[__NSArrayM dealloc] + 19
    frame #11: 0x000000010f7d7b12 libobjc.A.dylib`objc_object::sidetable_release(bool) + 212
  * frame #12: 0x000000011e9fb2c1 iOS9ExampleTests`-[OCMockObject dealloc](self=0x000064800009b120, _cmd=<unavailable>) at OCMockObject.m:113 [opt]
    frame #13: 0x000000011e9f92e0 iOS9ExampleTests`-[OCClassMockObject dealloc](self=0x000064800009b120, _cmd=<unavailable>) at OCClassMockObject.m:40 [opt]
    frame #14: 0x000000011e9fdda0 iOS9ExampleTests`-[OCPartialMockObject dealloc](self=0x000064800009b120, _cmd=<unavailable>) at OCPartialMockObject.m:44 [opt]
    frame #15: 0x000000010f7d7b12 libobjc.A.dylib`objc_object::sidetable_release(bool) + 212
    frame #16: 0x000000010f7d81d1 libobjc.A.dylib`(anonymous namespace)::AutoreleasePoolPage::pop(void*) + 715
    frame #17: 0x000000011b70e999 XCTest`__24-[XCTestCase invokeTest]_block_invoke + 671
    frame #18: 0x000000011b756f45 XCTest`-[XCUITestContext performInScope:] + 183
    frame #19: 0x000000011b70e6ef XCTest`-[XCTestCase invokeTest] + 141
    frame #20: 0x000000011b70f6b0 XCTest`__26-[XCTestCase performTest:]_block_invoke.369 + 42
    frame #21: 0x000000011b75bc4b XCTest`+[XCTContext runInContextForTestCase:block:] + 163
    frame #22: 0x000000011b70f04c XCTest`-[XCTestCase performTest:] + 608
    ...
````

This used to work with revision https://github.com/erikdoe/ocmock/commit/f03b3cc126edc8d6a2d4466d227fb41a1b2c2a14 but fails with the most recent revision from github. Using `git bisect`, I've found that this was introduced by https://github.com/erikdoe/ocmock/commit/bf6f59ad28e48f804fc063fcd9d7e691144f48cc (reland of https://github.com/erikdoe/ocmock/commit/982c6f7a106bd4dad0ff49e4a281b28c6d2600f5 with compilation fixes, this version also fails with the same error when the compilation is fixed).

The crash happens in `OCMockObject` `-dealloc` method when sending the `-release` signal to `invocations` ivar. This release the object side-table used to store the association created by `-retainObjectArgumentsExcluding:` so I suspect that the bug is present in that method (or maybe the bug was always there bug never visible due to the object cycle this method is trying to prevent).


