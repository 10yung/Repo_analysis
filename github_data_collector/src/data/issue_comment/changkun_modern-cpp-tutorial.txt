## 说明

正则表达式中，选择应该是 `|`， 这里应该是个笔误。

```
   p8  amzed -> amazed?

  p10 Deprecation is not completely unusable, it is only intended to imply that programmers
      will disappear from future standards and should be avoided.
 -> I am not a native English speaker, but I think "programmers" above should be
         "features" or something like this.

  p10 cpp char *str = "hello world!"; // A deprecation warning will appear
      -> Isn't "cpp" unnecessary (and wrong)?

  p12 (CXX)(SOURCE_CXX) (OBJECT SC )(LDFLAGS_COMMON) -o (TARGET)clean : rm − rf ∗ .o(
      TARGET) -> I think "clean" make target should be on a separate line. Plus, $ should
      prefix the parentheses, like $(CXX).


 p16 so even if this behavior is in most compilers Both support, but
     -> so even if this behavior is supported by most compilers, but

 p16 This keyword explicitly tells the compiler that it should verify that len_foo should be
     a compile time. Constant expression. -> a compile time constant expression.

 p17 which causes us to rename the other when we need to traverse the entire std::vectors
     again. A variable. -> I guess "A variable" should be deleted or appended earlier "rename the other
     variable when".

 p18 which is The initialization of class -> which is the initialization of class
     (Note that this kind of abrupt capitalisations are fairly common.)

 p32 Line 15 // inhereit constructor => inheritance constructor

 p36 but you don’t want to use a function to name a function -> I guess the following is
     better/more correct: "but you don’t want to use name to call a function"

 p36 for the things in [catch list] -> for the things in [capture list]

 p39 Although this part of the standard library is part of the standard library =>
     I guess the following is better/more correct:
     Although the features are part of the standard library and not found in runtime,

 p41 that is, A value => that is, a value

 p42 Line 24: // string,string,string, => string,string,string,string

 p45 reference contraction rule => I guess "reference collapsing rule" is a better name.

 p53 except for std::pair There seems to be => there (Not capital T).

 p55 , eliminating the display call delete, => , eliminating to call delete,

 p57 Line 35: "p2 was destroied" => "p2 was destroyed"

 p57 Line 40: destroied => destroyed

 p58 Line 11: destroied => destroyed

 p58 Line 18: destroied => destroyed

 p58 no The way => no way

 p59 Figure 2: Untranslated word, Chinese?

 p66 std::lock_gurad => std::lock_guard

 p66 RAII guarantees the exceptional security of the code while losing the simplicity of the code.
     => I guess here you are promoting RAII and the following is better:
     RAII guarantees the exceptional security of the code while keeping the simplicity of the code.

 p69 notd_one() of std ::condition_variable is used to wake up a thread =>
     notify_one() of std ::condition_variable is used to wake up a thread

 p71 Intuitively, a = 5;int2seems => Intuitively, a = 5; seems
```

Many thanks to Oguz Kupusoglu.
<!-- English Version -->

## Motivation

Please briefly describe your motivation.

## Requirements

Please list all of your suggestions.

---

<!-- 中文版 -->

## 动机

请描述你提交内容建议的动机。

## 需求说明

请描述你提交内容建议的详单，例如具体是增加哪个知识点的说明。
resolve #issue_id

<!-- English Version -->

## Description

Please describe the motivation of this pull request, and what problem was solved in this PR.

## Change List

- Fix typo error of XXX
- Add description regarding XXX feature
- Resolve error content of XXX

## Reference

Please add reference if necessary

---

<!-- 中文版 -->

## 说明

此处详细说明 PR 的动机是什么、解决了什么样的问题。

## 变化箱单

- 修复了 XXX 的 typo 错误
- 增加了 XXX 相关的说明
- 解决了关于 XXX 的描述性错误

## 参考文献

如果有请注明

需要支持以下内容：

- 语言级 bug 与修订

+ [ ] 类型系统改进 [Type Punning](https://github.com/CppCon/CppCon2017/blob/master/Presentations/Type%20Punning%20In%20C%2B%2B17%20-%20Avoiding%20Pun-defined%20Behavior/Type%20Punning%20In%20C%2B%2B17%20-%20Avoiding%20Pun-defined%20Behavior%20-%20Scott%20Schurr%20-%20CppCon%202017.pdf)
+ [x] 弃用和删除的功能
   - register
   - std::auto_ptr --> std::unique_ptr
   - std::random_shuffle
   - std::bind1st, std::bind2nd, ...

- 语言增强

+ [x] 结构化绑定 Structured bindings
+ [x] 新的控制结构 `constexpr` if
+ [x] 编译时条件语句 Compile-time conditional statements
+ [ ] 新的聚合规则
+ [ ] 强制性 RVO 和复制 elision, Guaranteed copy elision
+ [ ] Unary `static_assert`
+ [ ] 嵌套命名空间 Nested namespace deinitions
+ [ ] inline 变量 `inline` variables
+ [ ] `constexpr` 改进, constexpr lambda

- 模板增强

+ [x] 折叠表达式 Fold expressions
+ [x] 类模板参数推导 Class template deduction
+ [x] variadic templates fold
+ [x] `auto` non-type template parameters
+ [ ] ~~Preprocessor predicate for header testing~~

- 容器
+ [ ] `std::string_view`, `std::byte`  加入 container 容器一章
+ [x] `std::any`, `std::variant`, `std::optional` 加入 container 容器一章
+ [ ] [容器改进](http://en.cppreference.com/w/cpp/container)

- 线程
+ [x] [thread 并行 STL 算法]( http://www.modernescpp.com/index.php/c-17-new-algorithm-of-the-standard-template-library)
+ [x] `std::shared_mutex`, `atomic<T>::is_always_lockfree`,  `scoped_lock<Mutexes...>`

- 文件系统
+ [x] [文件系统库, 专门用一章来讲解](http://en.cppreference.com/w/cpp/filesystem, http://www.bfilipek.com/2017/08/cpp17-details-filesystem.html)

- 数学库
+ [ ] [对机器学习的影响 Math special functions](http://en.cppreference.com/w/cpp/numeric/special_math)

- 其他特性

+ [ ] Polymorphic allocators and memory resources
+ [ ] Aligned `new`
+ [ ] Improved insertion and splicing for associative constrainers
+ [ ] Boolean logic metafunctions
...

- 展望 C++20
+ [x] concept
+ [x] module
+ [x] coroutine
+ [x] Ranges