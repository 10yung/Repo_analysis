I'm very interested in a bit of feedback on naming for the Jedi API. So cc'ing a few people, so I might get answers (@blueyed @dbrgn)

Currently the `Script` names are `completions`, `goto_assignments`, `goto_definitions`, `call_signatures` and `names.

Now I want to clean this up a bit. The new names will be

- complete
- goto  (goes to a name's definition)
- infer  (inferres types for any statement)
- help  (basically a goto with more documentation information)
- get_context (returns the current context)
- find_signatures? (returns signatures of the call a user is currently in)
- list_names? (returns all names/definitions of a Python file)

Especially `find_signatures` and `list_names` are a bit long and also not very nice. I'm considering naming them just `signatures` and `names`, but those are not verbs, so I'm a bit conflicted.

So looking for opinions. What are the best names?
`def annotated_decorator(fn: Callable[[...], R]) -> Callable[[...], R]:`

works, but

`def annotated_decorator(fn: Callable[..., R]) -> Callable[..., R]:`

doesn't

See https://github.com/davidhalter/jedi/issues/1425#issuecomment-574395580_
code:
```
import jedi

script = jedi.Script('''from tkinter import Tk
root = Tk()
root.geometr''')

for c in script.completions():
    print(c.goto())
```
output:
```
[<Definition full_name='tkinter.Wm.geometry', description='geometry = wm_geometry'>]
```

Should be get wm_geometry definition?

And `jedi\api\classes.py`, `jedi\api\__init__.py` _goto function param should be consistent?
miss `'follow_builtin_imports`, `follow_imports`.
```
Traceback (most recent call last):
  File "1.py", line 8, in <module>
    print(c.goto(follow_imports=True))
  File "E:\Downloads\jedi\api\classes.py", line 361, in goto
    return self._goto(**kwargs)
TypeError: _goto() got an unexpected keyword argument 'follow_imports'
```
The PR is related to https://github.com/davidhalter/jedi/issues/1401
Knowing that jedi has type inference capabilities, is it possible to add a way to filter out invalid signatures, e.g:
```python
from typing import overload

@overload
def f(x: str, y: int): ...
@overload
def f(x: str, y: bool): ...
@overload
def f(x: list, y: bool): ...

def f(x, y):
    pass
```
```python
f(
```
should return all signatures
```python
f("Hello", 
```
The last signature is dropped
```python
f([],
```
Only the last signature is returned.

Related to #1416.
This is a follow up to https://github.com/davidhalter/jedi/issues/1458.

General goals/ideas:
- Interpreter should use `__annotations__` of the object it is trying to auto complete on (mostly functions for now).
  - This should work already, 1c62ecb extends this so [PEP 563](https://www.python.org/dev/peps/pep-0563) annotations should work too. There are still some [pitfalls](https://www.python.org/dev/peps/pep-0563/#runtime-annotation-resolution-and-type-checking), but this should be strictly better than the current implementation 
- If a `-stub` package is available there should be the option for the completer to use this instead of what the object provides.
  - First this should work for any typical stub package that is installed in the used virtualenv and for `.pyi` files in the actual module.
  - There are two extremes here that I have actually encountered and have some interest in covering. I think the latter is better and is also useful in general.
     - An RPC implementation that wants to lie about the annotations of the object (based on the annotations of the remote object)
     - the possibility to force that all completion for a module happens based on local stub files, which would be applied based on the bridged fake type and not the true type (RPC object) of the object so no RPC calls need to happen for completion.
 
Current Todos:
- [x] Handle PEP 563 annotations
- [ ] Test for PEP 563 annotations
- [ ] Decide on general implementation for  annotations in `.pyi` files next to `.py` files
- [ ] Decide on general implementation for  annotations in separate `-stub` package

Questions:
I do not have a good high level concept of the jedi architecture yet. The first issue is where the stub based inference happens for Script contexts, how much of this can be used for Interpreter contexts and if that requires refactoring to move code out of the interpreter context so it can be shared.
<!-- Please search existing issues to avoid creating duplicates. -->

## Environment data

- VS Code version: 1.40.2
- Extension version (available under the Extensions sidebar): 2019.11.50794 
- OS and version: Pop!_OS 18.04 (Ubuntu)
- Python version (& distribution if applicable, e.g. Anaconda): 3.6.9
- Type of virtual environment used (N/A | venv | virtualenv | conda | ...): virtualenvwrapper
- Relevant/affected Python packages and their versions: pybullet 2.5.5
- Jedi or Language Server? (i.e. what is `"python.jediEnabled"` set to; more info #3977): Jedi is enabled

## Expected behaviour

IntelliSense code suggestions work after importing packages. This problem was apparently fixed in https://github.com/microsoft/vscode-python/issues/3599

## Actual behaviour

IntelliSense code suggestions stop working after importing pybullet and linting.

## Steps to reproduce:
[**NOTE**: Self-contained, minimal reproducing code samples are **extremely** helpful and will expedite addressing your issue]

Install numpy

`pip install numpy`

In a test file: 

```
import numpy as np

foo = np.zeros((1,1), dtype=np.uint8) 

```

IntelliSense performs auto-completion suggestions.

Install pybullet
`pip install pybullet==2.5.8`

```
import numpy as np
import pybullet as pb

foo = np.zeros((1,1), dtype=np.uint8) 
print(pb.__name__)
```
IntelliSense does not work with either package.


<!--
Note: If you think a GIF of what is happening would be helpful, consider tools like https://www.cockos.com/licecap/, https://github.com/phw/peek or https://www.screentogif.com/ .
-->

## Logs
Output for `Python` in the `Output` panel (`View`â†’`Output`, change the drop-down the upper-right of the `Output` panel to `Python`)

```
##########Linting Output - pylint##########
************* Module test
1,18,convention,trailing-whitespace:Trailing whitespace
5,0,convention,missing-final-newline:Final newline missing
1,0,convention,missing-module-docstring:Missing module docstring

------------------------------------------------------------------
Your code has been rated at 2.50/10 (previous run: 0.00/10, +2.50)
```



### Problem
Currently annotation strings for parameters of compiled functions are created directly from annotation objects by means of `str()`. This leads to noisy annotations that are shown to user: `clip: <class 'vapoursynth.VideoNode'>, width: typing.Union[int, NoneType]=None`. Just two of them may look fine, but few dozens of them are definitely not.
### Desired output
Annotations for parameters of compiled functions as if they had sources. Using example above, I believe it should be as following: `clip: VideoNode, width: Optional[int]`
### Proposed solution
This is just a proof-of-concept of desired output to be achievable without (much) hacking.

It tries to be as compatible as possible with the rest of codebase, so it's (a bit) ugly. One more reason why there's no best solution for this is that any attempt to subscript `Optional` leads to `Union[..., NoneType]`.

Going to the hacking side, I checked that even though `Union.__origin__` and `Union.__args__` aren't documented, they are available on every CPython since 3.5. And of course, I'd like to use `get_origin()` and `get_args()` that are available since 3.8.

I'm not familiar with how things are done in jedi codebase and probably missing something, so I'm looking forward to your feedback and working further on this PR accordingly.
easy to reproduce with this snippet. Change to your filepath obviously:
```python
import jedi  # 0.15.1

DOC = """
class B:
    def __init__(self):
        self.z = 5
"""
DOC_URI = "file:///home/m-panarin/Desktop/test_files/reproduce_jedi/file.py"


if __name__ == '__main__':
    # will contain 4 definitions: class B, def __init__, self, z
    all_names = jedi.api.names(
        source=DOC,
        path=DOC_URI,
        definitions=True,
        all_scopes=True,
        references=False,
    )
    assert all_names[-1].name == "z"
    assert all_names[-1].parent().name == "__init__"
    # so __init__ is a parent of z
    # BUUUUUUT

    assert all_names[1].name == "__init__"
    # this fails as it only contains 'self'
    assert sorted([x.name for x in all_names[1].defined_names()]) == sorted(["self", "z"])

    # another issue I found: repr fails for `self` definitions
    # this print will trigger an exception
    # print(all_names[1].defined_names())
```
### _**Possible enhancement**_

@marius-nicolae commented on [Sat Sep 14 2019](https://github.com/microsoft/vscode-python/issues/7397)

<!-- Please search existing issues to avoid creating duplicates. -->
Hi,

First of all, thank you, for your wonderful work. I like VS Code a lot but there is an issue I'd like to report. 

Usually, in Python modules, there are classes definitions with methods references but without calls with actual types. In this case, when trying to go to a method definition the VS Code displays a "No definition found for '<method_name>'" message as opposed to Pycharm which displays a menu with all possible methods definitions. Even if the Python file contains calls with actual objects the VS Code will go the first definition even if there are multiple possibilities.

## Environment data
Version: 1.38.1
Commit: b37e54c98e1a74ba89e03073e5a3761284e3ffb0
Date: 2019-09-11T13:30:08.229Z
Electron: 4.2.10
Chrome: 69.0.3497.128
Node.js: 10.11.0
V8: 6.9.427.31-electron.0
OS: Linux x64 4.15.0-58-generic

- Extension version (available under the Extensions sidebar): ms-python.python-2019.9.34911
- OS and version: Xubuntu 18.04
- Python version (& distribution if applicable, e.g. Anaconda): 3.6.8 64 bits
- Type of virtual environment used (N/A | venv | virtualenv | conda | ...): N/A
- Relevant/affected Python packages and their versions: XXX
- Jedi or Language Server? (i.e. what is `"python.jediEnabled"` set to; more info #3977): Jedi enabled

## Expected behaviour

VS Code should display a menu with all possible method definitions, with the ones defined in the current .py file on top

## Actual behaviour

Displays a "No definition found for '<method_name>'" message in case no calls with actual objects are found in the current file or goes to the first implementation otherwise


## Steps to reproduce:
1. Unpack the attached archive - [test.tar.gz](https://github.com/microsoft/vscode-python/files/3612536/test.tar.gz)
2. Open the project folder
3. Open to the Test/test.py file
4. F12 on the Foo method reference from line 10

More details, on the attached animated gif.
![Go to method definition-2019-09-14 11-13](https://user-images.githubusercontent.com/28258950/64905958-416e1180-d6e8-11e9-9af5-ea0ef287932d.gif)

