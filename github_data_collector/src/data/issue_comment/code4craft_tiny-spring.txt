    作者你好. 在学习该项目的期间, 我发现创建的 bean 都是直接被缓存在了 bean definition 中, 需要的时候也从里面获取. 也就是说, 一个类型的 bean 只会被创建一次, 所有的 bean 默认都是 spring 的 singleton ? 那如果我想提供 prototype 这个属性, 用来支持每次创建一个新的 bean. 一种可行的做法是不是新引入一个类, override `getBean()` 方法, 每次都根据相应的 bean definition 新创建一个实例就可以了?
jdkproxy invoke 判断有bug  导致jdk的动态代理后置处理器没有打印时间
![微信图片_20190702151132](https://user-images.githubusercontent.com/7402659/60491782-23ddfe00-9cdc-11e9-834c-dd62ed3e4421.png)
![微信图片_20190702151208](https://user-images.githubusercontent.com/7402659/60491796-293b4880-9cdc-11e9-8b9d-b9b1828e562a.png)
应该是if (advised.getMethodMatcher() == null
				||advised.getMethodMatcher().matches(method, advised.getTargetSource().getTarget().getClass())) 
AutoProxyCreator类，源码41行，return advisedSupport.getProxy();
初次匹配生成动态代理之后直接返回了，无法支持多个Advisor增强；
为便于拓展，应改为：
bean=advisedSupport.getProxy();


https://blog.csdn.net/w8253497062015/article/details/90274387
testClassFilter()这个测试方法不论expression给什么包，都能匹配到类。
testMethodInterceptor()我自己写的版本无法匹配到方法
…ieldException: helloWorldService
作者用来做测试用的类HelloWorldService里面只有简单的一个字段String text;这时候从tinyioc.xml中解析后的属性为字符串型，利用反射将解析后的tinyioc.xml中的属性”text“属性注入是没问题的，但是如果我用来做测试的类有其他类型的成员变量，比如我要测试的对象是User,有一个类型为Integer的age成员变量，这时候从xml解析出来的属性由于全都是String型，用反射向User中的age注入属性会报java.lang.IllegalArgumentException类型转换异常。
反正总结起来的问题就是作者测试用的类只能注入String类型的字段，其他类型好像注入不了。
AbstractBeanFactory类中：
@override
public Object getBean(String name) throws Exception {
BeanDefinition beanDefinition = beanDefinitionMap.get(name);
if (beanDefinition == null) {
throw new IllegalArgumentException("No bean named " + name + " is defined");
}
Object bean = beanDefinition.getBean();
if (bean == null) {
bean = doCreateBean(beanDefinition);
bean = initializeBean(bean, name);
**beanDefinition.setBean(bean);** 
}
return bean;
}

beanDefinition.setBean(bean);上面这行代码在原代码中没有这一行导致生成的对象非代理对象，aop不生效。但是加上之后循环引用有个问题。
A B两个类相互引用
假如AB 按顺序加载 那么调用的方法步骤为
A ->doCreateBean(beanDefinition);
B ->doCreateBean(beanDefinition);
B.setA(A) //此A为提前暴露在beanDefinitionMap中的A
B ->initializeBean(bean, name);
A.setB(B); //此时B为jdk生成的动态代理对象。
A ->initializeBean(bean, name);

以上步骤执行完成之后，A中的B是代理对象，但是B中的A还是提前暴露的对象，并没有更新成代理对象。这样的话引用就不一致了。不知道有什么办法可以解决这个问题吗。
