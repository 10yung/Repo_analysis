We need a Dockerfile which can build everything, especially the webgl stuff.
According to Android Studio, this makes `gltf-viewer` Java usage go from 18 MB to 6 MB.
Remove ~30 LOC without losing any functionality.
Fixes #1510

Previously we were using defines such as `__IPHONE_OS_VERSION_MAX_ALLOWED` to determine feature support, but this define is strictly tied to the SDK version. We always build against the latest iOS SDK, so instead we need to check for certain feature support at runtime. This way, Filament binaries can be used across multiple iOS versions.

I've set the minimum iOS version for Filament's Metal backend to 12.0 for now, but I plan to revisit in the future, lowering it to perhaps 11.0 or 10.0.
Clients should be prevented from allocating unused buffer slots because
uploading to an unused slot triggers undefined behavior in the backend.

Motivated by #2042
New release v1.4.4 uses enums such as MTLPixelFormatASTC_4x4_HDR only available on iOS 13.
I use Xcode 11 to build v1.4.4 for the iOS platform. (Xcode 11 will automatically set min deploy target to iOS 13)
But v1.4.4 SDK crashes on iOS 10 iPhone 6s.
------------------------------------------------------------------------------
    0   dyld                            0x0000000105de8264 __abort_with_payload + 8
    1   dyld                            0x0000000105de78a4 abort_with_payload_wrapper_internal + 100
    2   dyld                            0x0000000105de78d4 fcntl + 0
    3   dyld                            0x0000000105da88f4 dyld::fastBindLazySymbol+ 18676 (ImageLoader**, unsigned long) + 0
    4   dyld                            0x0000000105da8a10 dyld::fastBindLazySymbol+ 18960 (ImageLoader**, unsigned long) + 284
    5   libdyld.dylib                   0x00000001d9446bb0 dyld_stub_binder + 60
------------------------------------------------------------------------------
Main reason is backend.a is build by Xcode 11 (min-ios-verions is iOS 13.x).
 "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld" -demangle -lto_library /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libLTO.dylib -dynamic -arch arm64 **-iphoneos_version_min 13.2.0** -syslibroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/**iPhoneOS13.2**.sdk 

I believe if we set IPHONEOS_DEPLOYMENT_TARGET to 10.0,  everything will be fine on iOS 10.

**Describe the solution you'd like**
Provide a way to set CMake min iOS deploy system.

**Describe alternatives you've considered**
Where can I change the iphoneos_version_min? I'm not familiar with CMake.

**OS and backend**
only on iOS

Replace with forward declarations if needed and includes in .cpp that
now need them.
The idea here is to have our headers have the least amount of impact as
possible on our clients (e.g. compilation time).
**Describe the bug**
When trying to run from Android Studio on a relatively old device [Sony Xperia Z3](https://www.gsmarena.com/sony_xperia_z3-6539.php) (runs Android 6.0 and supports OpenGL ES 3.0), the sample crash with the following stacktrace. 

```
java.lang.UnsatisfiedLinkError: dlopen failed: cannot locate symbol "__aeabi_memmove8" referenced by "/data/app/com.google.android.filament.ibl-1/lib/arm/libfilament-jni.so"...
        at java.lang.Runtime.loadLibrary(Runtime.java:372)
        at java.lang.System.loadLibrary(System.java:1076)
        at com.google.android.filament.Filament.<clinit>(Filament.java:22)
        at com.google.android.filament.Filament.init(Filament.java:30)
        at com.google.android.filament.ibl.MainActivity.<clinit>(MainActivity.kt:41)
        at java.lang.Class.newInstance(Native Method)
        at android.app.Instrumentation.newActivity(Instrumentation.java:1068)
```

**To Reproduce**
Steps to reproduce the behavior:
1. `./build.sh -p desktop -i release`
2. `./build.sh -p android release`
3. `./gradlew :samples:sample-hello-triangle:installDebug`

**Expected behavior**
Application runs normally


**Smartphone (please complete the following information):**
 - Device: Sony Xperia Z3 
 - OS: Android 6.0

**Additional context**
The same sample runs on a newer device (Samsung S10e), and AVD (after forcing it to use OpenGL ES 3.0).

Note: Using the latest master.
