is it possible to output the qr code as an svg file?
I've been using this software in a project for a year now.
Your software is high quality.
I can't release the version I am using, because I made many Lexidor specific assumptions.
However, I like this package so much, that I decided to port it a second time and give back to you.

[Hacklang](https://hacklang.org)
[HHVM](https://hhvm.com)

https://github.com/kazuhikoarase/qrcode-generator/blob/2000d1d2fb3537e4ca8ffd89fc96ed94e31fdffc/js/README.md#adddatadata-mode--void

`data` arg seems to be string. Can i pass an Uint8Array? That would bypass this line:
https://github.com/kazuhikoarase/qrcode-generator/blob/1379cf547fbc9abdc69acf1eb2bbaaae87dc94d0/js/qrcode.js#L1696
"TypeScript Declaration File" correction.
so it is used:
const qr: QRCode = qrcode.default(this.qrVersion, this.errorCorrectionLevel);
Some issues with the code:
1) To avoid a pass-by-reference warning in php 7, in the function addData the case-statement should be something like this (the "new" as a separate call):
```
        case QR_MODE_NUMBER :
	    $d = new QRNumber($data);
            $this->addDataImpl($d);
            break;

        case QR_MODE_ALPHA_NUM :
	    $d = new QRAlphaNum($data);
            $this->addDataImpl($d);
            break;

        case QR_MODE_8BIT_BYTE :
	    $d = new QR8BitByte($data);
            $this->addDataImpl($d);
            break;

        case QR_MODE_KANJI :
	    $d = new QRKanji($data);
            $this->addDataImpl($d);
            break;
```
2) When coding a string like `https://my.url.site/events/?eme_check_attendance=1&eme_pmt_rndid=5c4ac78bdaef8_8a5fe7041234573e19e7f9db6ba4fe38`
I got an error:
PHP Fatal error:  code length overflow. (988]72) in qrcode.php on line 362
(I find the 988 very weird, and the 72 very small). I use this as a call:
`$qr = QRCode::getMinimumQRCode($my_example_url,QR_ERROR_CORRECT_LEVEL_H);`
Is this a bug?
Hello, I'd like to request that you add support for importing this library using native ES modules, like so:

```js
import qrcode from 'https://unpkg.com/qrcode-generator/qrcode.js';
```

I would benefit from this when experimenting with QR codes locally, without a build process.

I would have created a pull request, but I am not sure how to feature detect and export the library. Theoretically all you need to do is to add `export default { ... }`, but in browsers where ES native modules are not supported yet, this would have caused an error to be thrown. At the same time, `export` cannot be stated conditionally, so feature detection for native ES modules and then export doesn't seem to be possible.

I know you are not using a build process, so I am not going to suggest you create two variants, one with ES module support and one without, because this is not a pressing issue at all (can always just use `script` and find what I need on `window.qrcode`), but I am interested if you have any thoughts on how this could be achieved without introducing a build process.


```php
echo $qrcode->toHtml();
echo $qrcode->toSvg(5);
According to the typings from [qrcode.d.ts](https://github.com/kazuhikoarase/qrcode-generator/blob/master/js/qrcode.d.ts), I should be able to do the following since the export is an instance of the `QRCodeFactory` interface which has the call signature `(typeNumber: TypeNumber, errorCorrectionLevel: ErrorCorrectionLevel) : QRCode;`:

```typescript
import * as qrGenerator from 'qrcode-generator';

function myFunc() {
  const qr = qrGenerator(0, 'H');
  qr.addData('Hello, world!');
  qr.make();
}
```

However, the typescript compiler returns:

```
Error: Cannot call a namespace ('qrGenerator')
```

Alternatively, using `qrcode` like this compiles without a hitch:

```typescript
import * as qrGenerator from 'qrcode-generator';

function myFunc() {
  const qr = qrcode(0, 'H');
  qr.addData('Hello, world!');
  qr.make();
}
```

But it throws a runtime error:

```
Uncaught ReferenceError: qrcode is not defined
```
Added a parameter for function `renderTo2dContext()` to render the qrcode to designated position in canvas context instead of the left top corner
```
renderTo2dContext(context: CanvasRenderingContext2D, cellSize?: number, position?: {x: number, y: number}): void;
```