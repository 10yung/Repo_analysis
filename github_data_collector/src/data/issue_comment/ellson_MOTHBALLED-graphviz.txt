Apologies if posting here is inappropriate.

This has also been posted at https://gitlab.com/graphviz/graphviz/issues/1431.

I've developed a web application for interactive visual editing of graphs described in the DOT language that I'm looking for beta tester for. A few feature highlights:

* Insert node shapes by click or drag-and-drop.
* Draw edges between nodes.
* Select nodes and edges by click or by area drag and mark them in the text editor.
* Delete selected nodes and edges.
* Cut/Copy-and-paste a selected node.

Try it live at http://magjac.com/graphviz-visual-editor/.

See the [README](https://github.com/magjac/graphviz-visual-editor/blob/master/README.md) for more features.

Any feedback in the form of bug reports or enhancement requests is welcome as [issues](https://github.com/magjac/graphviz-visual-editor/issues). For questions, discussion and other feedback, please contact me at the [d3-graphviz Slack channel #graphviz-vis-editor](https://join.slack.com/t/d3-graphviz/shared_invite/enQtMzMwODQzMDI5MDA5LTExYTgyYThhNzI3YjJlODRiMzQ3MWM3YWI5ZjAyMTI2MmI4YWIwMDM4ZmY5MDQzNjkzMDY4YTRmMTU1YzIzNTY).

Has anyone used Graphviz to produce railroad diagrams from BNF?

I do turn the BNF into a tree using [Graphviz via Perl](https://savage.net.au/Perl-modules/html/marpax.grammar.graphviz2/) but that's not quite what I want.

On the web I found [things like](http://bottlecaps.de/rr/ui) and this [discussion](https://stackoverflow.com/questions/796824/tool-for-generating-railroad-diagram-used-on-json-org)

The latter refers to JS code, and Wikipedia refers to these sorts of packages too of course. 
Executing the "dot.exe test_not_ok.dot" command results in the following error message: 

**Error: syntax error in line 8**

However, executing the "dot.exe test_ok.dot" command results in no error.  

The difference between the test_ok.dot and the test_not_ok.dot files is the additional white space in line 8.
![screenshot](https://user-images.githubusercontent.com/20393472/31653733-efd02942-b323-11e7-968f-da0bb68c3d75.png)

I am using Graphviz  version 2.38.0 (20140413.2041) on Windows.




graphviz version 2.40.1 is installed as a macos high sierra brew bottle application. Running SchemaSpy.jar with -renderer :quartz causes the "dot" command to crash.

## **Following is the output for dot -v** 

dot - graphviz version 2.40.1 (20161225.0304)
libdir = "/usr/local/Cellar/graphviz/2.40.1/lib/graphviz"
Activated plugin library: libgvplugin_dot_layout.6.dylib
Using layout: dot:dot_layout
Activated plugin library: libgvplugin_core.6.dylib
Using render: dot:core
Using device: dot:dot:core
The plugin configuration file:
/usr/local/Cellar/graphviz/2.40.1/lib/graphviz/config6
was successfully loaded.
render	: cairo dot dot_json fig gd json json0 map mp pic pov ps quartz svg tk vml vrml xdot xdot_json
layout	: circo dot fdp neato nop nop1 nop2 osage patchwork sfdp twopi
textlayout	: textlayout
device	: bmp canon cgimage cmap cmapx cmapx_np dot dot_json eps exr fig gd gd2 gif gv icns ico imap imap_np ismap jp2 jpe jpeg jpg json json0 mp pct pdf pic pict plain plain-ext png pov ps ps2 psd sgi svg svgz tga tif tiff tk vml vmlz vrml wbmp xdot xdot1.2 xdot1.4 xdot_json
loadimage	: (lib) bmp eps gd gd2 gif jpe jpeg jpg pdf png ps svg xbm

## **Got the below stack backtrace:**

org.schemaspy.util.Dot$DotFailure: 'dot -Tpng:quartz ./diagrams/OrgAddress.1degree.dot -o./diagrams/OrgAddress.1degree.png -Tcmapx' failed with return code 134
Table -> OrgAddress
.dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: *** First throw call stack:
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: (
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 0 CoreFoundation 0x00007fff4bc0d0fb __exceptionPreprocess + 171
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 1 libobjc.A.dylib 0x00007fff724fbc76 objc_exception_throw + 48
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 2 CoreFoundation 0x00007fff4bca5b74 +[NSObject(NSObject) doesNotRecognizeSelector:] + 132
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 3 CoreFoundation 0x00007fff4bb83510 forwarding + 1456
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 4 CoreFoundation 0x00007fff4bb82ed8 _CF_forwarding_prep_0 + 120
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 5 CoreFoundation 0x00007fff4bb20ad4 CFStringCompareWithOptionsAndLocale + 68
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 6 ImageIO 0x00007fff4e437238 _ZN17IIO_ReaderHandler15readerForUTTypeEPK10__CFString + 52
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 7 ImageIO 0x00007fff4e40c236 _ZN14IIOImageSource14doBindToReaderEv + 422
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 8 ImageIO 0x00007fff4e40c821 _ZN14IIOImageSource18createImageAtIndexEmP13IIODictionary + 39
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 9 ImageIO 0x00007fff4e3fa60e CGImageSourceCreateImageAtIndex + 237
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 10 libgvplugin_quartz.6.dylib 0x00000001043b6b53 quartz_loadimage_quartz + 240
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 11 libgvc.6.dylib 0x0000000103d8f349 gvloadimage + 265
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 12 libgvc.6.dylib 0x0000000103d8e395 gvrender_usershape + 978
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 13 libgvc.6.dylib 0x0000000103da4e6a emit_html_tbl + 1298
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 14 libgvc.6.dylib 0x0000000103da4dd8 emit_html_tbl + 1152
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 15 libgvc.6.dylib 0x0000000103da48a4 emit_html_label + 436
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 16 libgvc.6.dylib 0x0000000103db1d8a emit_label + 57
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 17 libgvc.6.dylib 0x0000000103dbb8bc poly_gencode + 2018
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 18 libgvc.6.dylib 0x0000000103dc7c9c emit_node + 1034
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 19 libgvc.6.dylib 0x0000000103dc691e emit_graph + 4594
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 20 libgvc.6.dylib 0x0000000103dcbcdf gvRenderJobs + 4773
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 21 dot 0x0000000103d86d62 main + 701
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 22 libdyld.dylib 0x00007fff730ea145 start + 1
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: 23 ??? 0x0000000000000005 0x0 + 5
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: )
dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx: libc++abi.dylib: terminating with uncaught exception of type NSException
org.schemaspy.util.Dot$DotFailure: 'dot -Tpng:quartz ./diagrams/ImagingStudy.1degree.dot -o./diagrams/ImagingStudy.1degree.png -Tcmapx' failed with return code 134


Why the rename of the repository into ![image](https://user-images.githubusercontent.com/1030961/30905473-30a989fe-a375-11e7-80d2-73e7f4cf1273.png) ?

I'm writing application code that does some graph computations before lay-outing anything. I create subgraph structures to do these computations and manipulations. This often has the following form: 

1. Create a subgraph that contains the entire graph.
2. Remove some nodes.
3. Perform some domain specific graph search algorithms.
4. Remove the temporary subgraph again.

This is done very often. The results are aggregated into a new graph, which is then being layed-out by dot.

According to some profiling, the major performance bottleneck is caused by step 1.
(The next most critical bottleneck is step 4)

I currently use the following code to create such a subgraph. Are there faster ways to do it?

```
Agraph_t* clone_g_to_subg(Agraph_t* from, char* name)
{
    auto result = agsubg(from, name, 1);

    auto node = agfstnode(from);
    while (node)
    {
        agsubnode(result, node, 1);
        auto edge = agfstedge(from, node);
        while (edge)
        {
            agsubedge(result, edge, 1);
            edge = agnxtedge(from, edge, node);
        }
        node = agnxtnode(from, node);
    }

    return result;
}
```

[testtransafe.txt](https://github.com/ellson/MOTHBALLED-graphviz/files/1331067/testtransafe.txt)
Hello!
I have been using DOT for about 3 years and never ran across anything like this.   I have a relatively simple drawing that gives me the following warning  when I try to draw/connect 2 objects...

Warning: Unable to reclaim box space in spline routing for edge "managetesttransafep10jax" -> "testtransafep10jax". Something is probably seriously wrong. 
 
Line 76 is the problem line (currently commented out).  

I've attached the dot code.  Is this a bug or am I just missing something really simple?

Rob .
It is stated in the CGraph manual that the library is not threadsafe. To what extent is this true?

Suppose a graph structure has been created.  If then multiple threads are accessing this graph, but without making any modifications to the graph, would this give any problems?
The following graph gives a segfault when doing a dot layout. (tested with windows 7)

```dot
digraph "Graph 76b00d8f-11c3-463d-ad26-29f5d68c9008" {
	graph [ nodesep=0.03 ];
	node [ shape=point ];
	subgraph "rank-target" {
		graph [rank=same];
		"A";
		"B";
		"X";
	}
	"A" -> "X";
	"B" -> "X";
}
```

```
$ cat dump.dot | ./dot.exe -Tsvg -O
Segmentation fault
```

When increasing the `nodesep` to `0.4`, the following messages appear.

```
$ cat dump.dot | ./dot.exe -Tsvg -O
libpath/C:\Users\Chiel.tenBrinke\Projects\graphviz\lib\pathplan\shortest.c:324: triangulation failed
libpath/C:\Users\Chiel.tenBrinke\Projects\graphviz\lib\pathplan\shortest.c:207: cannot find triangle path
Warning: Unable to reclaim box space in spline routing for edge "A" -> "X". Something is probably seriously wrong.
```

According to http://www.graphviz.org/doc/info/attrs.html#a:nodesep, the minimum value is only `0.2`.
I'd like to contribute an output format that produces ASCII diagrams. However, I'm not really sure where to begin with the Graphviz codebase, or what to use as an example or starting point. Would someone be able to point me in the right direction?