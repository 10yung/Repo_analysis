My program needs users to input the grammar and then parse another input data.

So I need to build a parser from a grammar string which user inputed, like this:

```
let parser = ParserFactory::build("number = { ASCII_DIGIT+ } ");
let pairs = parser::parse("number", "123 456").unwrap_or_else(|e| panic!("{}", e));
```

How can I do this?
For my reStructuredText project, I’d like to generalize a syntax construct called directive

```rst
.. directive-name:: argument

   indented
   block
````

Both arguments and blocks are either reStructuredText or something else, depending on the directive. E.g. in the following case both argument and the block are plain text (dedent the block and done):

```rst
.. code:: python

   def foo(): pass
```

This directive on the other hand has no arguments and a rST-formatted block:

```rst
.. note::

   I have *italic* text

   .. code::

      And nested syntax
```

My question:

I store the indentation in the stack. Do I have to copy and trim the text to be able to parse it, or is there a way to modify a parser’s stack before letting it do its thing?
I am working in a Node.js based WASM project, I would like tell Pest about my grammar, unfortunately the grammar cannot be opened for whatever reason. I can pass files into my lex() function as a WASM export.

I know that the Pest website runs a WASM version with dynamic grammar so this most be possible, although I cant find the Rust src's for it.

How do I derive grammar as a string but not using `grammar` or `grammar_inline`.

Note that I am a Rust beginner.
With `src/pest.rs` having:
```rust
use pest_derive::*;

#[derive(Parser)]
#[grammar = "grammar.pest"]
pub struct Parser;
```

on `pest_derive v2.1.0` and `pest v2.1.0`/`pest v2.1.2` (same error on both versions), it returns the following errors:

```
error[E0433]: failed to resolve: could not find `iterators` in `pest`
 --> src/pest.rs:4:10
  |
4 | #[derive(Parser)]
  |          ^^^^^^ could not find `iterators` in `pest`

error[E0433]: failed to resolve: could not find `error` in `pest`
 --> src/pest.rs:4:10
  |
4 | #[derive(Parser)]
  |          ^^^^^^ could not find `error` in `pest`

error[E0433]: failed to resolve: could not find `Atomicity` in `pest`
 --> src/pest.rs:4:10
  |
4 | #[derive(Parser)]
  |          ^^^^^^ could not find `Atomicity` in `pest`

error[E0433]: failed to resolve: could not find `unicode` in `pest`
 --> src/pest.rs:4:10
  |
4 | #[derive(Parser)]
  |          ^^^^^^ could not find `unicode` in `pest`

error[E0404]: expected trait, found struct `pest::Parser`
 --> src/pest.rs:4:10
  |
4 | #[derive(Parser)]
  |          ^^^^^^ not a trait

error[E0412]: cannot find type `ParserState` in module `pest`
 --> src/pest.rs:4:10
  |
4 | #[derive(Parser)]
  |          ^^^^^^ not found in `pest`

error[E0412]: cannot find type `ParseResult` in module `pest`
 --> src/pest.rs:4:10
  |
4 | #[derive(Parser)]
  |          ^^^^^^ not found in `pest`

error[E0425]: cannot find function `state` in module `pest`
 --> src/pest.rs:4:10
  |
4 | #[derive(Parser)]
  |          ^^^^^^ not found in `pest`

```

This miiight be related to #129
Say a piece of code:
```
#[derive(Debug)]
pub enum Expr {
    Number(i32),
    Op(Box<Expr>, Opcode, Box<Expr>),
}

#[derive(Debug)]
pub enum Opcode {
    And, Or
}

let code = "(123,234);(234,(345,(1,2),23)),789";
```

I want to parse `code` as the result:

```
Op(Op(Op(Number(123), And, Number(234)), Or, Op(Number(234), And, Op(Op(Number(345), And, Op(Number(1), And, Number(2))), And, Number(23)))), And, Number(789))
```

I can use lalrpop-script like this:
```
use std::str::FromStr;
use crate::{Expr, Opcode};

grammar;

pub Expr: Box<Expr> = {
    Expr ExprOp Term => Box::new(Expr::Op(<>)),
    Term,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    "(" <Expr> ")"
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

ExprOp: Opcode = {
    ";" => Opcode::Or,
    "," => Opcode::And,
};
```

But the same code written in pest-script:
```
expr = { (expr ~ operator ~ term) | term }
term = { num | ("(" ~ expr ~ ")") }
operator = { "," | ";" }
num = { ASCII_DIGIT+ }
```

Will throw an error:
```
rule expr is left-recursive (expr -> expr); pest::prec_climber might be useful in this case
```

I have found the all-hand-written calculator in `pest/test`, so must I written like that if I want to deal with the `left-recursive` problem? Any better idea?
I like the [online grammar editor]( https://pest.rs/#editor) much. I use it to draft my little languages.. but it's not very convenient to use because it's small.

Is there a wider editor somewhere else on the internet? Or would it be possible to just make those 3 input frames resizable?
`PUSH(PEEK)` is currently [undocumented behavior](https://pest.rs/book/grammars/syntax.html#the-stack-wip)

Currently, pest is the slowest parser in the chart on the website. For people who aren't used to thinking in terms of absolute numbers and have no experience with Nom or Serde, that leaves the impression that Pest is slow.

It'd be a good idea to include at least one comparable well-known parser generator from another language on that chart to give people a more intuitive frame of reference. (Something like ANTLR or Parsec)
I'm trying to use pest to parse a C-like language, and I'm having trouble creating a low-precedence right-associative ternary operator and having it play nicely with a precedence climber for binary operations. My current grammar includes:
```rust
expr = { term ~ (binop ~ term)* | ternary }
term = _{ boolconst | intconst | ident | "(" ~ expr ~ ")" | unaryexp }
unaryexp = { unop ~ term }
ternary = { term ~ "?" ~ term ~ ":" ~ term }
```
and I'm using PrecClimber on expr. Do you have any suggestions?
I've been working on a [project](https://github.com/Nadrieril/dhall-rust) with a [fairly large grammar](https://github.com/dhall-lang/dhall-lang/blob/781961f4694667667f093d28e7b35569c67678c4/standard/dhall.abnf) for a while now, and in the process I've had to write and maintain code to convert the output of pest parsing to the actual AST I need in my project. I started out with a bunch of ad-hoc macros to help with dealing with the `Pair` API, but after a lot of iteration I got to a nice design that I thought could be of use for others.
(I did have a look at `pest-ast`, but I couldn't find basic documentation, and it was too rigid for my use-case)

So I made it into a crate, called [pest_consume](https://crates.io/crates/pest_consume). It uses procedural macros and works on stable Rust. It is flexible, and makes code that is IMHO easy to write, read, and update when the grammar changes.

I thought I'd advertise it here because I feel it neatly complements pest to make writing parsers a great experience. Also, since there has been discussion around changing the pest API for pest3, I propose this design as something that has worked for me on a large project.

I'd be excited to hear what you guys think about it, if the docs are clear enough and if you think you may want to use it in your project ! If the pest devs like it, maybe this crate could be mentioned in the pest docs ?