I hope there will be a timer so that it will remind me to take a break every 20 mins or any time. Thank you very much.
I have a Windows 10 Pro 64 bit. I have installed both .NET Core Runtime x86 and x64. And I still can't run LightBulb. No reaction at all, even if I try to launch it from a CMD it still doesn't print anything. I've tried to compile it myself but this was the result:

```
The call is ambiguous between the following methods or properties: 'LightBulb.Internal.Extensions.AddRange<T>(System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>)' and 'Tyrrrz.Extensions.CollectionExtensions.AddRange<T>(System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>)'	LightBulb	C:\Users\rabbit\Source\Repos\LightBulb\LightBulb\Services\RegistryService.cs	


The call is ambiguous between the following methods or properties: 'LightBulb.Internal.Extensions.OpenInBrowser(System.Uri)' and 'Tyrrrz.Extensions.UriExtensions.OpenInBrowser(System.Uri)'	LightBulb	C:\Users\rabbit\Source\Repos\LightBulb\LightBulb\ViewModels\RootViewModel.cs	
```
Hello,
can you add the "wake up" function like the "f.lux" program does?
another nice feature is the "take a break from pc" warning as does the "eye saver" program.
With these changes Lightbulb will be the best program in the world!
best regards
Anaru
### Problem
Since the release of 2.0 I've read on several occasions how people presumably follow the instructions yet fail to launch the app succesfully or end up with _(for non-devs)_ cryptic error logs. Upon taking a closer look, there seems to be a misunderstanding in the actual software dependency, which at least partly can be credited to Microsoft's constant change of the naming convention in their software packages.

Most people unfortunately skim over guides/readmes rather than reading patiently, _(which seems to be a side-effect of today's informational overload and the subsequent decrease of attention span)_, only to end up with the wrong installation of dependency packages and blame the software or even the developer.

![NET Runtime Packages Installed](https://s.put.re/8gv6MoSp.png)

---

### Explanation
In order to run LightBulb 2.0, the intstructions explicitly suggest to install "**NET Core runtime for desktop apps**", which is semantically correct but can be easily confused with the baseline package due to the capitalization rules of the words in the name, ie. easily mistaking it for "**NET Core runtime**", which according to Microsoft is for running console applications only.

Whereas the [wiki article](https://github.com/Tyrrrz/LightBulb/wiki/How-to-install-.NET-Core-runtime) directly links to the "**NET Core Desktop Runtime**" download page, which according to Microsoft is the one required to run desktop apps (or console apps).

Ideally this wouldn't be a problem at all if everyone just followed the wiki article's link. For various reasons like the lack of software understanding, lack of attention, language barrier, naming confusion et cetera this is not the case and often results in a bad user experience and subsequent dismissal of the software. I think this can be resolved with rather simple tweaks.

Source: https://dotnet.microsoft.com/download/dotnet-core/current
![NET Runtime Packages](https://s.put.re/4bsfMt8f.png)

---

### Suggestion
Looking forward to run that one app everyone is talking about, only to fail right from the get-go can be ultminately frustrating - even more so if you are not a techie person. For the sake of clarity and in order to make this easier for everyone incl. absolute PC newbies or simply people who skim over guides _(which seem to be a wide-spread phenomenon)_, I suggest to change every text occurence of  **`NET Core runtime`** and **`NET Core runtime for desktop apps`** to **`NET Core Desktop Runtime`**, as suggested by the chosen name on Microsoft's own download page.

Thanks for reading!
_Edit: a word._
Hi,

A nice feature to have would be to add a parameter to shift the sunset/sunrise timing (grabbed from internet) by a given amount of minutes.

For instance : the transition duration is 45 minutes, the shift is 20 minutes. Then : 

- the gamma 'up' transition begins 20 minutes before sunset and ends 25 minutes after
- the gamma 'down' transition starts 20 minutes before sunrise and ends 25 minutes after.

Or it could be better (??) if : 
- the gamma 'up' ends 20 minutes after sunrise and starts 25 minutes before
- the gamma 'down' ends 20 minutes before sunset and starts 25 minutes before.

This way, transition start when sky light already changes / artificial light is already active, but sun is not officially 'rised' or 'set'. With the current version, transitions are always lagging behind true sky changes and are happening a tad too late.
A minor thing, but would be appreciated to be able to select 12 or 24 hour clock.
I think many people, who run the app for the first time and take a look at the gamma values have no clue, why it is, that you chose 6600k for the day-time and 3900k for the night-time, and what to do about them. B̶u̶t̶ ̶i̶f̶ ̶t̶h̶e̶y̶ ̶d̶a̶r̶e̶ ̶t̶o̶ ̶f̶i̶d̶d̶l̶e̶ ̶a̶r̶o̶u̶n̶d̶ ̶w̶i̶t̶h̶ ̶i̶t̶,̶ ̶t̶h̶e̶y̶ ̶m̶a̶y̶ ̶e̶n̶d̶ ̶u̶p̶ ̶w̶i̶t̶h̶ ̶a̶ ̶m̶e̶s̶s̶y̶ ̶r̶e̶s̶u̶l̶t̶,̶ ̶n̶o̶t̶ ̶k̶n̶o̶w̶i̶n̶g̶ ̶h̶o̶w̶ ̶t̶o̶ ̶r̶e̶t̶u̶r̶n̶ ̶t̶o̶ ̶t̶h̶e̶ ̶d̶e̶f̶a̶u̶l̶t̶ ̶(̶w̶i̶t̶h̶o̶u̶t̶ ̶r̶e̶i̶n̶s̶t̶a̶l̶l̶i̶n̶g̶)̶,̶ ̶w̶h̶i̶c̶h̶ ̶i̶s̶ ̶a̶ ̶b̶a̶d̶ ̶t̶h̶i̶n̶g̶,̶ ̶i̶f̶ ̶y̶o̶u̶ ̶w̶a̶n̶t̶ ̶t̶o̶ ̶m̶a̶k̶e̶ ̶y̶o̶u̶r̶ ̶a̶p̶p̶ ̶a̶s̶ ̶u̶s̶e̶r̶ ̶f̶r̶i̶e̶n̶d̶l̶y̶ ̶a̶s̶ ̶p̶o̶s̶s̶i̶b̶l̶e̶.̶.̶.̶

Please consider presets:

Presets would make this much easier to handle AND to grasp. If you take a look at your biggest "competitor" on the "market" (f.lux) which I'm sure you did, they did a great job by creating different presets named in a way, that is somewhat graspable, compared to a bunch of numbers you at least have a fair idea about "what" and "what for" (https://care-eyes.com/wordpress/wp-content/uploads/2019/05/fl_types.png).

I'd highly recommend to add a little wiki- or FAQ-, explanatory-text- button within your apps main window, to give the user easy access to understanding the numbers you have chosen to set as default and what the pros and cons are, and how they compare with the kelvin spectrum that sorround us by nature, like: sunset, daytime, candle-light, etc (https://en.wikipedia.org/wiki/Color_temperature). 

It sure can't hurt to add a little explanation about the circadian rhythm and why it is beneficial for the user to run this beautiful app of yours.

I'd also consider giving the user the "power" to create "custom" presets.
I think the hurdance to use you app has become quite huge, and this is one thing I'd like to point out:

The user is "forced" to install .NET Core Runtime. Which I have to admit, as an hardcore pc user and windows enthusiast, never crossed my way, and I've been using Windows since 3.1. So my guess would be, that most "customers" won't recognize nor know of this tool and therefore distrust it (at least a tiny bit, because humans don't trust stuff that is totally new or unknown to them), even so it comes from Windows. Plus, you do not tell your users, which installers to choose (x68, x64) so they have to figure that one out for themselves too and since you don't offer an "please-install-everything-inside-before-you-launch-the-app"-bundle, you risk losing plenty of users at this early stage of the process already. Most users won't find their way to your github page nor will they read the "important note, that they have to install it" and thus end up with a non launching .exe file. It sure would be helpful if the .exe would create a popup if it failed to find .NET Core Runtime with further instructions written, to let the user know what to do next, and why it is, that the app won't launch at all.
After switching to .NET Core 3.0, the tray icon is now seemingly rendered with lower color range.
Most likely an issue because TrayIcon package is still on .NET Fx. Tracked here: https://github.com/hardcodet/wpf-notifyicon/issues/4
I found this because I prefer open-source applications, and discovered [This reddit post](https://www.reddit.com/r/osugame/comments/5rpq1q/lightbulb_gamingfriendly_flux_alternative/) explaining why it's better for gaming. As a gamer, it was a simple choice for me.

But, a lot of gamers still use other apps which are not as good for them.

I think it would be good to put something in readme.md, which explains the performance advantages of LightBulb.