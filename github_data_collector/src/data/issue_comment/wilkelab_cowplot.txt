A follow up on [this SO question](stackoverflow.com/questions/32288199) two years later, maybe a feature request if you agree on its usefulness.  

Sometimes plots require fixed aspect ratio, e.g.  ternary plots when the coordinate space triangle has to be regular. It would be very useful if `cowplot::plot_grid` can define  `rel_widths` or `rel_height` automatically in order to scale and align the plots. Consider the example below:

``` r
library(tidyverse)
library(ggtern)
#> Registered S3 methods overwritten by 'ggtern':
#>   method           from   
#>   +.gg             ggplot2
#>   grid.draw.ggplot ggplot2
#>   plot.ggplot      ggplot2
#>   print.ggplot     ggplot2
#> --
#> Remember to cite, run citation(package = 'ggtern') for further info.
#> --
#> 
#> Attaching package: 'ggtern'
#> The following objects are masked from 'package:ggplot2':
#> 
#>     %+%, aes, annotate, calc_element, ggplot, ggplot_build,
#>     ggplot_gtable, ggplotGrob, ggsave, layer_data, theme,
#>     theme_bw, theme_classic, theme_dark, theme_gray, theme_light,
#>     theme_linedraw, theme_minimal, theme_void
library(cowplot)
#> 
#> ********************************************************
#> Note: As of version 1.0.0, cowplot does not change the
#>   default ggplot2 theme anymore. To recover the previous
#>   behavior, execute:
#>   theme_set(theme_cowplot())
#> ********************************************************

set.seed(911)

df <- crossing(id = LETTERS[1:4],
               obs = 1:10) %>%
    mutate(x = runif(40),
           y = runif(40),
           z = runif(40)) %>%
    pivot_longer(x:z) %>%
    group_by(id, obs) %>% 
    mutate(value = value %>% prop.table) %>% 
    pivot_wider()

simple <- df %>% 
    ggtern(aes(x, y, z = z, color = id)) +
    geom_path(size = 1)+
    theme_bluedark()

faceted <- simple + facet_wrap(~id, ncol = 2)
    

plot_grid(simple, faceted, align = 'h', axis = 'tb')
```

![](https://i.imgur.com/Xw1bFT4.png)

``` r

plot_grid(simple, faceted, ncol = 1, align = 'v', axis = 'tb')
```

![](https://i.imgur.com/0M5VQW9.png)

<sup>Created on 2019-12-21 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
I would like to add the marginal plots to a gglot2 object, so the axis match. However, I could not manage it with the insert_xaxis_grob and axis_canvas.

A very simple example

The major plot:
```
p01 <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
  geom_point() +
  theme_cowplot()
```

The margin, with facet_grid
```
p05 <- axis_canvas(p01, axis = "x") +
  geom_histogram(data = iris, aes(Sepal.Length), alpha = 0.8) +
  scale_color_manual(values = RColorBrewer::brewer.pal(4, "Set2")) +
  scale_fill_manual(values = RColorBrewer::brewer.pal(4, "Set2")) +
  facet_grid(vars(Species))
```


![Screenshot from 2019-12-03 09-39-11](https://user-images.githubusercontent.com/4980631/70034087-ee05b400-15b0-11ea-8727-dc1566e2b1e1.png)

combined_plot <- insert_xaxis_grob(p01, p05, position = "bottom")
it gives the warning:
> 
> stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> Warning messages:
> 1: Removed 6 rows containing missing values (geom_bar). 
> 2: In get_panel(grob) :
>   Multiple panels found; returning the first one. Select a panel with `panel` or return all with `return_all = TRUE`.
> 
and indeed only the first one is used.

![Screenshot from 2019-12-03 09-38-51](https://user-images.githubusercontent.com/4980631/70034127-fa8a0c80-15b0-11ea-91d0-ccbe476f3ff4.png)

Any suggestions to add more than one marginal plots on the axis, as I would like to compare the distribution between different groups.

Thanks very much.

I am trying to draw a few transparent images over my ggplot. I wish to position the transparent image at the very bottom left of the plot. I used x = 0 and y = 0 to position this transparent image. However draw_image() somehow does not recognise transparency and instead positions the bottom left corner of the entire image at those co-ordinates (first plot below).

To try and improve this, I tried the image_trim function of the magick package. However, even here the left-most part (in this case the blue dice) is not quite at x = 0 (second plot below). I understand there is an hjust option, but I am running this operation for hundreds of images and cannot define the hjust in every case.

Is there a way of getting the true left most edge of a transparent image to x = 0?

Thank you

``` r
library(cowplot,quietly = T)
#> 
#> ********************************************************
#> Note: As of version 1.0.0, cowplot does not change the
#>   default ggplot2 theme anymore. To recover the previous
#>   behavior, execute:
#>   theme_set(theme_cowplot())
#> ********************************************************
library(ggplot2,quietly = T)

##basic version
ggplot(data.frame(x = 0:3, y = 0:3), aes(x, y)) +
  geom_point(size = 3) + 
  draw_image("https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png",x=0,y=0)
```

![](https://i.imgur.com/jA1vRaH.png)

``` r

##trimmed version
img <- magick::image_read("https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png")
img <- magick::image_trim(img)

ggplot(data.frame(x = 0:3, y = 0:3), aes(x, y)) +
  geom_point(size = 3) + 
  draw_image(img,x=0,y=0)
```

![](https://i.imgur.com/JwUPyL1.png)

<sup>Created on 2019-08-29 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
It would be nice to be able to check programmatically if a given ggplot is a `plot_grid` and what layout it has.

As-is, you basically have to try if any of the elements is a `GeomDrawGrob` and then painstakingly reassemble the layout from `geom_params$xmin/xmax/...`.

This would be useful to write an alternative to `save_plot` that infers the number of rows/columns using abovementioned metadata or information from facets.
**Brief description of the problem or desired feature.**
Using `stamp()` and its variants don't produce the characteristic bar on the right hand side of the plot as in the [examples](https://wilkelab.org/cowplot/reference/stamp.html). The examples also seem to reflect old behavior where `theme_cowplot()` would be set as the default theme.

To reproduce, run the code from the online examples:
```{r}
p <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_point(aes(color = factor(Petal.Width)))

stamp_bad(p + guides(color = "none"))
```
![example](https://user-images.githubusercontent.com/38229299/62801248-50dbb880-bab3-11e9-8edc-30823dec4c35.png)

If the user wants to draw a compound plot with a shared legend, it needs to manually extracted the legend and add it to the compound figure. A nicer interface would be to add an option to `plot_grid` to request a shared legend ([akin to the `ggarrange` function of `ggpubr`](https://rpkgs.datanovia.com/ggpubr/reference/ggarrange.html)).
It would be nice if we could place plots onto the canvas at an angle. This should be possible with viewports, as long as we don't insist on proper clipping.
I'm opening another issue in order to keep the request for (semi-automatically) handling vertical whitespace. This was basically reported in #40 and #49 but both of those are closed now while the feature doesn't really exist. Only manual workarounds. In my particular case I have four plots in one column and four rows with only the last plot having horizontal axis tick labels. So the whitespace between the other plots is very pronounced.

I will play around with the margins manually but I think this feature would be a great addition!

------
I find cowplot very useful in most situations but got a bit exasperated by simply trying to fit a graph of one column width under a row with two columns/graphs. Just felt it should be possible to define number of rows and to reference each one individually, in order to define the number of columns in that row.
Many thanks and best wishes
I```{r}
# insert reprex here
```
Sometimes I want to scale text objects differently to everything else once I have a plot.

Is it feasible to have a scale_text argument that would overwrite scale for text objects only? `annotate(geom = "text",...)`, `axis.text`, `axis.title`, `title`, etc