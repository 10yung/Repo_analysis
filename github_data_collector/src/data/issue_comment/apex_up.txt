For static and dynamic apps.
## Prerequisites

* [x] I am running the latest version. (`up upgrade`)
* [x] I searched to see if the issue already exists.
* [x] I inspected the verbose debug output with the `-v, --verbose` flag.
* [ ] Are you an Up Pro subscriber?

## Description
It would be great to add regex capabilities to redirects like so:
```
redirects: {
  "/folder/:slug(regexhere)": {
    "location": "https://.../:slug",
    "status": 301
  }
}
```

The pricing doesn't look great, but it should at least be an option.
Basically it's API GW without all the over-engineered bits that are trivial to do within your application itself.

- https://aws.amazon.com/blogs/compute/announcing-http-apis-for-amazon-api-gateway/
Currently you can't define these per-stage, only with `up env ...`. Ideally you can define them in the stage, and at the root level and they merge.

I'm not sure if precedence should be given to `up env`'s, or the up.json but probably the up.json would be the most clear?
## Prerequisites

* [x] I am running the latest version. (`up upgrade`)
* [x] I searched to see if the issue already exists.
* [x] I inspected the verbose debug output with the `-v, --verbose` flag.
* [ ] Are you an Up Pro subscriber?

## Description

I'd like to use the same domain for multiple apps, just different paths. Hope this is possible :+1: 

I'm getting this error, 

```
ApiDomainProduction: beta.example.co already exists in stack arn:aws:cloudformation:eu-north-1:-1:stack/dashboard/398f7f00-fed7-11e9-68b8-06cb12623298
```

## Steps to Reproduce

Have at least two apps like

```
{
  "name": "app",
  "stages": {
    "beta": {
      "domain": "beta.example.co",
      "zone": "beta.example.co",
      "path": "/app"
    }
  }
}
```

and


```
{
  "name": "api",
  "stages": {
    "beta": {
      "domain": "beta.example.co",
      "zone": "beta.example.co",
      "path": "/api"
    }
  }
}
```

And so forth. Then run `up stack plan -v` & `up stack apply -v` - even thought the `verbose`-flag doesn't work for `apply` :thinking: 

## Love Up?

Yes! Definitely, it's super awesome. Just need to know how to do this, and then I'll - hopefully - be able to purchase pro :cupid: 

See https://github.com/apex/up/issues/782 for more details.
## Prerequisites

* [x] I am running the latest version. (`up upgrade`)
* [x] I searched to see if the issue already exists.
* [x] I inspected the verbose debug output with the `-v, --verbose` flag.
* [ ] Are you an Up Pro subscriber?

## Description

TLDR: in the `javaGradle` support in `runtimes.go`, both the build and clean hooks should check for the availability of the gradle wrapper.

See https://github.com/apex/up/blob/c5f75ffec627c805a356b0c5cb47a0f4f3591875/config/runtimes.go#L95

The default clean hook fails for my project.  In particular, my project is a Java Gradle project with the Gradle wrapper installed.  I also have a local Gradle installation which is a different version than the wrapper.  Due to https://github.com/johnrengelman/shadow/issues/287 , the project fails when running with the locally installed version of Gradle, but works when the wrapper is used.  By default, up is currently using the wrapper for build, but the locally installed Gradle for clean.

## Steps to Reproduce

With a project that uses Gradle and has the wrapper installed, run `up deploy -v` and see that the clean didn't use the Gradle wrapper.

## Love Up?

Please consider signing up for Up Pro (https://up.docs.apex.sh/#guides.subscribing_to_up_pro) or donating via https://opencollective.com/apex-up/donate.

## Slack

Join us on Slack https://chat.apex.sh/

## Prerequisites

* [x] I am running the latest version. (`up upgrade`) `v1.3.0`
* [x] I searched to see if the issue already exists.
* [x] I inspected the verbose debug output with the `-v, --verbose` flag.
* [ ] Are you an Up Pro subscriber?

## Description

First ever deploy ends in panic and all hell breaks loose. In short I used the AWS execution role name (`foobar`) instead of its ARN (`arn:aws:iam::990099999999:role/foobar`).

Error message `panic: runtime error: index out of range` was not helpful, had to fish out source code and realize that it expects semicolon in role, which lead me to the usage of actual ARN.

Failing line in your codebase: https://github.com/apex/up/blob/master/platform/lambda/lambda.go#L945

## Steps to Reproduce

- `app.js`
```
const http = require('http')
const { PORT = 3000, UP_STAGE } = process.env
http.createServer((req, res) => {
  res.end('Hello World from ' + UP_STAGE)
}).listen(PORT)
```
- `up.json`
```
{
  "name": "fancy-api",
  "profile": "apex_up",
  "regions": ["eu-west-1"],
  "lambda": {
    "role": "foobar"
  }
}
```

Then run `$ up -v`

### Stacktrace

```
$ up -v
     5ms     DEBU up version 1.3.0 (os: darwin, arch: amd64)
     0s      DEBU inferred runtime type=node
   РаІ 0s      DEBU 1 regions from config
     29ms    DEBU 1 regions from config
     0s      DEBU event deploy map[commit:f2607e7 stage:staging]
     0s      DEBU event platform.build map[]
     0s      DEBU hook prebuild is not defined
     0s      DEBU event hook map[hook:[] name:build]
     3ms     DEBU hook "build" command ""
     0s      DEBU event hook.complete map[duration:3.470089ms hook:[] name:build]
     124ms   DEBU injecting proxy
     0s      DEBU open
     1ms     DEBU add _proxy.js: size=1955 mode=-rwxr-xr-x
     0s      DEBU add app.js: size=169 mode=-rwxr-xr-x
     0s      DEBU add byline.js: size=4710 mode=-rwxr-xr-x
     215ms   DEBU add main: size=14197271 mode=-rwxr-xr-x
     0s      DEBU add up.json: size=118 mode=-rwxr-xr-x
     0s      DEBU stats dirs_filtered=0 files_added=5 files_filtered=0 size_uncompressed=14 MB
     3ms     DEBU close
     0s      DEBU event platform.build.zip map[duration:343.736943ms files:5 size_compressed:6848636 size_uncompressed:14204223]
     1ms     DEBU removing proxy
     0s      DEBU hook postbuild is not defined
     0s      DEBU event platform.build.complete map[duration:348.694094ms]
     0s      DEBU hook predeploy is not defined
     0s      DEBU hook deploy is not defined
     0s      DEBU using role from config foobar
     0s      DEBU event platform.deploy map[commit:f2607e7 region:eu-west-1 stage:staging]
     285ms   DEBU fetching function config region=eu-west-1
     0s      DEBU event platform.function.create map[commit:f2607e7 region:eu-west-1 stage:staging]
   Рад 0s     panic: runtime error: index out of range

goroutine 9 [running]:
github.com/apex/up/platform/lambda.(*Platform).getAccountID(...)
	/Users/tj/dev/src/github.com/apex/up/platform/lambda/lambda.go:945
github.com/apex/up/platform/lambda.(*Platform).getS3BucketName(0xc00006a180, 0x1d88c3d, 0x9, 0x0, 0x0)
	/Users/tj/dev/src/github.com/apex/up/platform/lambda/lambda.go:939 +0x150
github.com/apex/up/platform/lambda.(*Platform).createBucket(0xc00006a180, 0x1d88c3d, 0x9, 0xc0002b8900, 0xc00035fcc0)
	/Users/tj/dev/src/github.com/apex/up/platform/lambda/lambda.go:841 +0x125
github.com/apex/up/platform/lambda.(*Platform).createFunction(0xc00006a180, 0xc0001260c8, 0xc0001260b8, 0xc0000d4230, 0x1d88c3d, 0x9, 0x1d8715c, 0x7, 0xc00028dba0, 0x7, ...)
	/Users/tj/dev/src/github.com/apex/up/platform/lambda/lambda.go:533 +0x5d
github.com/apex/up/platform/lambda.(*Platform).deploy(0xc00006a180, 0x1d88c3d, 0x9, 0x1d8715c, 0x7, 0xc00028dba0, 0x7, 0xc00028dbc0, 0xd, 0x1, ...)
	/Users/tj/dev/src/github.com/apex/up/platform/lambda/lambda.go:519 +0x81d
github.com/apex/up/platform/lambda.(*Platform).Deploy.func1(0x8, 0x1dc79e8)
	/Users/tj/dev/src/github.com/apex/up/platform/lambda/lambda.go:162 +0xd5
github.com/golang/sync/errgroup.(*Group).Go.func1(0xc000094120, 0xc0001280c0)
	/Users/tj/dev/pkg/mod/github.com/golang/sync@v0.0.0-20170927054112-8e0aa688b654/errgroup/errgroup.go:58 +0x57
created by github.com/golang/sync/errgroup.(*Group).Go
	/Users/tj/dev/pkg/mod/github.com/golang/sync@v0.0.0-20170927054112-8e0aa688b654/errgroup/errgroup.go:55 +0x66
```
Lambda pulls in copies of your S3 zip files, and has a 75gb limit, so we have to remove old versions.