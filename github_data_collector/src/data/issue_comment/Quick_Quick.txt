- [x] I have read [CONTRIBUTING](https://github.com/Quick/Quick/blob/master/CONTRIBUTING.md) and have done my best to follow them.

### What did you do?

Prepend "x" on describe("...") {}

### What did you expect to happen?

The describe closure is marked as pending, and all examples within the closure is disabled.

### What actually happened instead?

Compilation error: missing argument for parameter 'flags' in call.

### Environment

List the software versions you're using:

 - Quick: v2.2.0
 - Nimble: v8.0.2
 - Xcode Version: 11.3
 - Swift Version: 5.1
 - Swift Package Manager *5.1.0*

### Project that demonstrates the issue

```swift
class TestSpec: QuickSpec {
    override func spec() {
        xdescribe("...") {}
    }
}
```

---

Source code regarding this issue: https://github.com/Quick/Quick/blob/master/Sources/Quick/DSL/DSL.swift#L201

I'd like to pr. I'm just checking here to make sure I'm not missing something obvious.

Disabling a `describe` or a `context` by prefixing them with x, like `xdescribe` and `xcontext` would generate a compilation error complaining about a missing flags param, contrary to `it`/`xit`, `fdescribe` or `fcontext`.
With this PR the following will compile:
```swift
xdescribe("some description") {
    xcontext("some context description") {
         it("will not be run...") { fail() }
    }
}
```
This PR adds a default value to the flags parameter in DSL.swift and also corresponding tests in PendingTests.swift.
- [ ] I have read [CONTRIBUTING](https://github.com/Quick/Quick/blob/master/CONTRIBUTING.md) and have done my best to follow them.

### What did you do?

I tried to generate the tvOS framework by using "Carthage update --platform tvOS" but it did not generate arm64 modules 

**Error populated is :**
 Could not find module 'Quick' for target 'arm64-apple-tvos'; found: x86_64-apple-tvos-simulator, x86_64

### What did you expect to happen?

I want the Quick framework to be generated along with arm 64 files

### What actually happened instead?
It generated **Quick or Nimble** framework on using Carthage only the simulator files 

Please replace this with what happened instead.

### Environment

List the software versions you're using:

 - Quick: 2.2.0
 - Nimble: 8.0.4
 - Xcode Version: 11.3.1
 - Swift Version: XCode default

Please also mention which package manager you used and its version. Delete the
other package managers in this list:

 - Carthage: 0.34.0

[Archive.zip](https://github.com/Quick/Quick/files/4063740/Archive.zip)

The project should be [short, self-contained, and correct example](http://sscce.org/).

iOS SDK 13.0 (Xcode 11) does not call `UIViewController.viewDidAppear()` anymore when calling  ` viewController.beginAppearanceTransition()` and `UIViewController.endAppearanceTransition()` when testing views directly.  This looks like a behavior change not directly related to Quick, but think the docs need to be updated.

See https://github.com/Quick/Quick/issues/941.

 - [ ] Does this have tests?
 - [X] Does this have documentation?
 - [ ] Does this break the public API (Requires major version bump)?
 - [ ] Is this a new feature (Requires minor version bump)?

No behaviour was changed, this PR only adds documentation.
Fixes #890 

- [x] I have read [CONTRIBUTING](https://github.com/Quick/Quick/blob/master/CONTRIBUTING.md) and have done my best to follow them.

### What did you do?

We noticed that xcpretty was not capturing results of QuickSpec expectations for our XCUITests. It was reporting tests failed in spec summary, but not for individual tests. Further comparison of logs with XCTest with QuickSpec showed that lines like "Assertion Failure: SomeSpec.swift:64: expected to ..."  were missing from output.

### What did you expect to happen?

We expected this lines to be in the spec.


### What actually happened instead?

No assertions in log.

### Environment

List the software versions you're using:

 - Quick: 2.2.0
 - Nimble: 8.0.4
 - Xcode Version: 10.3 / 11.2.1
 - Swift Version: 5.0 / ...

Please also mention which package manager you used and its version. Delete the
other package managers in this list:

 - Carthage: 0.33.0

### Project that demonstrates the issue

None.



### Notes & Fix
What we actually found that `recordFailure` method was executed not on a current spec. Following fix did help to get assertions in log:
```
extension QuickSpec {
    open override func recordFailure(withDescription description: String, inFile filePath: String, atLine lineNumber: Int, expected: Bool) {
        if self != QuickSpec.current {
            QuickSpec.current.recordFailure(withDescription: description, inFile: filePath, atLine: lineNumber, expected: expected)
        } else {
            super.recordFailure(withDescription: description, inFile: filePath, atLine: lineNumber, expected: expected)
        }
    }
}
```

Is it something that other users seeing? Should we contribute this into Quick?
This adds filtering support for single-test-case executions of Quick tests. Although this is not super convenient in the Xcode UI, clicking the (X) after a failure will now execute only the failing test. This can also be done via command-line tests, which increases the usefulness for a CI system that e.g. can retry specific tests.

When a non-Quick class is asked to selectively test e.g. `SomeClass/some_specific_function` the default behavior of using `QuickTestSuite` to generate the suites will cause it to execute every test function, rather than just the selected ones. This change fixes this behavior by using the non-Swizzled variant of test suite selection when working against non-Quick selected tests.
- [x] I have read [CONTRIBUTING](https://github.com/Quick/Quick/blob/master/CONTRIBUTING.md) and have done my best to follow them.

### What did you do?

Attempted to disable a Quick test.  I also disabled an XCTest to ensure this was a Quick bug and not just Xcode.

### What did you expect to happen?

I expected that the test file would not run

### What actually happened instead?

All the disabled tests still ran on the disabled QuickSpec, but none of the tests ran on the disabled XCTest.

I am able to use `xdescribe` to disable this test for the time being, but ideally we should be able to disable tests in the scheme.

### Environment

List the software versions you're using:

 - Quick: 2.2.0
 - Nimble: 8.0.1
 - Xcode Version: Version 11.2 (11B52)
 - Swift Version: `Xcode Default

Please also mention which package manager you used and its version. Delete the
other package managers in this list:

 - Carthage: 0.33.0

- [x] I have read [CONTRIBUTING](https://github.com/Quick/Quick/blob/master/CONTRIBUTING.md) and have done my best to follow them.

### What did you do?

I'm integrating Quick into a codebase where I need to define the Xcode module/framework manually. As part of that, I'm roughly following the `.podspec` to produce results. Part of this investigation yielded an issue: I couldn't get the Quick Objective-C files to be able to see the `World` class from Swift.

This is because `internal` Swift classes are [_not_ accessible](https://developer.apple.com/documentation/swift/imported_c_and_objective-c_apis/importing_swift_into_objective-c), even within the same module:
> Because the generated header is part of the framework’s public interface, only declarations marked with the public or open modifier appear in the generated header for a framework target. Methods and properties that are marked with the internal modifier and declared within a class that inherits from an Objective-C class are accessible to the Objective-C runtime.

Your reaction might be: but clearly Quick is doing that right now, and it compiles fine!

It took me all day, but I finally narrowed down the "why": Quick is asking for [extension-only API](https://github.com/Quick/Quick/blob/87c48488f1874132b164c33839b05f76e7cd0d8c/Quick.podspec#L37) which exposes an [underlying bug in the compiler](https://github.com/apple/swift/blob/489c80a4d465a4aaaeff034af74c3f7b3a89bc74/lib/FrontendTool/FrontendTool.cpp#L1214-L1217) which causes internal Swift things to be available in the `Quick-Swift.h` file.

You can reproduce this issue by disabling the extension-only flag in the Xcode project (set `APPLICATION_EXTENSION_API_ONLY` to `NO`) and it'll stop compiling, unable to find `World`:

```
…/Sources/QuickObjectiveC/QuickSpec.m:30:27: Use of undeclared identifier 'World'; did you mean 'bold'?
```

I recommend you take a look at how the bridging is working here so that you're not stuck scrambling to get this to work once the underlying bug is resolved. You can likely use the fact that internal properties and methods are still available to get the kind of segregation you're looking for.

### Environment

List the software versions you're using:

 - Quick: 87c48488f1874132b164c33839b05f76e7cd0d8c
 - Nimble: n/a
 - Xcode Version: 11.1/11.2
 - Swift Version: Xcode Default
I'm playing around with runtime test generation and found that I'm able to create tests with namespaces and punctuation character in method name.
In same time Quick uses `QCKObjCStringUtils.c99ExtendedIdentifier(...)` to remove such characters.
Could you share why it is important?