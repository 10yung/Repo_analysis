Bitmaps now compressed (like the other fonts), to fix the bounding box problem, because non-compressed the calculated text width were wrong. Additional advantage is that it needs less program space.

#266

- Arduino board:  Arduino NANO version 3

- Arduino IDE version:  1.8.10

- Other HW, SW and/or environment dependencies when bugs found:
    Win 10 
    128x128 1.5-in OLED color display w SSD1351 chip, from Banggood, product 1384079
    SPI can be HW or bit-banged- the bugs are not related to the SPI interface or its speed 
    Adafruit-GFX ver 1.5.6 and later
    Adafruit-SSD1351 version 1.2.2

Bugs found:
   1.  In Adafruit-GFX.cpp, the method drawCircleHelper has no effect:  
        no pixels are written, in any color, in any quadrant
   Root cause:
        In Adafruit_GFX.cpp, version 1.5.6, about line 403:
             Missing startWrite() and endWrite calls around code.

   2.  Similarly, method fillCircleHelper has no effect:  no pixels are written, in any color
   Root cause:  same as above:  missing startWrite/endWrite around code.

   After fixing the above two problems, the following additional bugs became visible, when 
   trying to refresh/overwrite certain quadrants of a dial gauge:

   3.  In method fillCircleHelper
    The quadrant (corner) arguments are misapplied, produce incorrect results.
    For example, 
              a command to fill quadrant 1 fills both 1 and 4
              a command to fill quadrant 2 fills both 2 and 3

    To clarify quadrants, I define them as follows, for a circle with zero degrees on the right:
          quadrant 1 = sector from 180 degrees to 90 degrees
          quadrant 2 = sector from 90 degrees to 0 degrees
          quadrant 3 = sector from 360 degrees to 270 degrees
          quadrant 4 = sector from 270 degrees to 180 degrees

  4. Also in method fillCircleHelper, there is a vertical artifact which the fill algorithm cannot remove.  That is, in the example sketch, if the dial gauge succeeds in drawing a 90-degree needle, I cannot "erase" it (over-write it) with the background color using the fillCircleHelper method.   I can only do so with a fillRectangle command.  See the attached sketch.

Other testing done:
I checked later library versions, and, for my SSD1351 display and sketch, backward compatibility got worse, not better.

I have attached a sketch which triggers or demonstrates the above defects.  It is called oled_AF_GFx_1_5_7_bugs.ino.

I have also attached a photo which shows #3 and #4 above.

Best regards, Tealok2

![AF-GFX_1_5_7_bugs](https://user-images.githubusercontent.com/11713350/71749466-c9605e80-2e32-11ea-920b-947fa7b25527.JPG)


[oled_AF_GFx_bugs_1_5_7.txt](https://github.com/adafruit/Adafruit-GFX-Library/files/4020905/oled_AF_GFx_bugs_1_5_7.txt)

 
I'm basically looking for some drawing functions to create an image where no display is involved (the image is intended to be transferred via a webserver running on my board).

So my question: is the Ada-GFX-lib able to use a drawing buffer of a given size without any hardware involved, draw some things on that buffer and then provide the resulting image data for further processing?

Thanks!


I have been testing the **Adafruit_GFX_Button** function and I noticed that the button label cannot exceed 9 characters. I have changed the library to allow a greater range using the **strcpy()** function instead of **strncpy()**.
Nestor Palomeque.
The changes are tested well, see the example.
https://www.avdweb.nl/arduino/hardware-interfacing/ili9341-tft
Signed-off-by: Agha Saad Fraz <agha.saad04@gmail.com>
I have to document this library while working as a technical writer for Arduino in GSoD.
I have done the following steps

Followed writing standards
Added Description
Added Requirements section
Added Installation steps
Added Features
Added functions
Added example
Added contributing heading and its file
Added credits
Referenced external resources
Hello,
I've created an extension to the drawButton() method to allow the use of custom fonts for the button labels. Without these changes the labels were not placed correctly inside the buttons (i.e. in the center) when setting a custom font.
This extension (files Adafruit_GFX.cpp and Adafruit_GFX.h) are currently commited to my local clone.
Is there a branch where I could push it to, for review and the integration in the library ?

Hello GFX maintainers,

This request is related to this comment

https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp#L1136

The rationals for supporting background painting also for custom fonts are

1. Custom fonts are important because of the limited size availability of the built in font (no real size scaling, just pixel replication)

2. The comment assumes that custom fonts are not monospace. Custom fonts can be monospace if the user choses so.

3. Even for non monospace fonts, being consistent with the native fonts and painting the background is more intuitive. The user still has the option of setting text_color == bg_color for the 'leave background as is' affect, similar to the native font.

Please reconsider this decision and provide a way to overwrite custom fonts backgrounds. It's much better than the alternative of using the tiny native font or forking this library. 

If you are concerned about backward compatibility, a compile time conditional '#define OVERWRITE_CUSTOM_FONTS_BACKGROUND' should do the trick. 

Thanks.
Wanted to display glyphs from font.h files generated from UTF-8 font.ttf files.
Found some discussions in #185 suggesting the use of iso-8859-x chars, which IMHO is not a good idea (one needs to find a proper tool to convert UTF-8 .ttf files to iso first, then generate the font.h files, that will be still larger than the ASCII font.h files boundled with the library. Even in that case you might end up not beeing able to display a glyph if your iso-8859-x coded font did contain it. Of course a font.h generated from a UTF-8 .ttf will need more memory, but it's 2019 and newer boards tend to have a right amount of memory).

While looking for a solution i also found #200 from Bodmer who also provided me some help. He forked V1.3.6 and modified it but that version does not compile on my board... and since that version even the code has been reordered here in master branch...

So i ended up comparing Bodmer's modified version with the original master and as result here is my PR that enables UTF-8 with custom made fonts, while not changing anything with the default fonts.
UTF-8 support is turned off by default ensure not breaking anything on boards with few ram, you only have to enable it by adding   `display.utf8()`  to the sketch.

Tested with a MAX32630FTHR and 2.13" Flexible Monochrome eInk / ePaper Display.
For generating UTF-8 font.h files #185 is also needed


Please test on other board/display combinations and merge ;-)