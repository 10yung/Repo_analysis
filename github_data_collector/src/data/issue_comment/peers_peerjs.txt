Thanks for this awesome bit of work you've put together.

I have an electron/node app running on localhost (laptop) and a react native app running on my mobile ([using this](https://www.npmjs.com/package/react-native-peerjs))

Both can get an ID from either your server or one that I run locally, no problems there.

Using `peer.call(mobileId, stream);` on my laptop. This ends up triggering the `mobPeer.on('call', function(call) {` as expected.

However, the `call.on('stream', function(stream) {` never gets executed, no matter what I seem to do. Any help would be appreciated.

**Electron Project (laptop):**

```
let mobileId = doc.data().mobileId;
let conn = webPeer.connect(mobileId);
conn.on('open', function() {

    const call = webPeer.call(mobileId, stream);
    
    call.on('stream', function(mobStream){
        console.log("Got null stream", mobStream)
    });
});
```

**React Native code:**

```
const mobPeer = new Peer({
    host: ipv4, secure: false, port: 8090, path: '/peer',
});

mobPeer.on('error', function(err) {
    console.log("MOB CONN ERROR", err);
})

mobPeer.on('open', function(id) {
    console.log("mobile id", id)
    // I send ID to database here for electron app to find
});

mobPeer.on('call', function(call) {
    console.log("Web calling"); // this works fine

    call.answer(null);
    call.on('stream', function(stream) {
        console.log('stream from desktop') // this never runs
    });
});
```
The newest version of Edge uses Chromium and supports the same level of WebRTC features that Chrome does:

https://developer.microsoft.com/en-us/microsoft-edge/platform/status/rtcdatachannels/?filter=f3f0000bf&search=rtc&q=data%20channels
Wondering if binary pack/unpack is mandatory with the latest browser implementations of WebRTC serialization? 

As I am working on the Python client port I noticed that the binary pack dependency would also have to be ported. In the meanwhile it seems like more recent peer libraries like simple-peer rely on the default serialization standard which simplifies cross language portability. 

Does it make sense to make binary packing optional? 

Branching off issue peers/peerjs-server#48.

I understanding that other languages are not currently a priority for the core peerjs team. 
Just in case anyone else is interested in the topic and wants to help, I started working on a [Python port](https://github.com/ambianic/peerjs-python) with the intention to contribute it back to the main peerjs project. 

Using a very simple example from peerjs.com between two peers.

```javascript
var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
peer.on('call', function(call) {
  getUserMedia({video: true, audio: true}, function(stream) {
    call.answer(stream); // Answer the call with an A/V stream.
    call.on('stream', function(remoteStream) {
      // Show stream in some video/canvas element.
     console.log('Received stream', remoteStream);
    });
  }, function(err) {
    console.log('Failed to get local stream' ,err);
  });
});
```

call.on('stream') always receives two same remote streams.

Here is a screen shot. 

![issue](https://user-images.githubusercontent.com/17129052/71069412-580d8400-2181-11ea-8f42-76e1c73837bf.png)


Is it a known issue?

Thanks
I've been successful in testing peerjs from one localhost browser window to another, but when trying to connect via a different computer on the same LAN (connected to the same wifi network), I'm not able to create a successful webrtc connection.

I'm able to successfully connect to the peer server in both cases, however when trying to connect over the LAN, no offer (or corresponding answer) is given.

My code:

server.js: https://pastebin.com/bmbScpGr
client.html: https://pastebin.com/8NXLAVyg

Run the clients by

1. loading the listener http://hostname:9001/client.html#1 (on the machine where the server is listening), then
2. loading the connector http://hostname:9001/client.html#2 (on the separate LAN machine)

The relevant (non-heartbeat) websocket frames (note the listener is named "1" and the connector is named "2") in chronological order:

**Listener receive ðŸ¡‡:** {"type":"OPEN"}

**Connector receive ðŸ¡‡:** {"type":"OPEN"}

**Connector send ðŸ¡…:** 

```
{"type":"CANDIDATE",
 "payload":{
   "candidate":{
     "candidate":"candidate:4033732497 1 udp 2113937151 192.168.0.104 35946 typ host generation 0 ufrag wLaA network-cost 999",
     "sdpMid":"0",
     "sdpMLineIndex":0
    },
    "type":"data",
    "connectionId":"dc_tyctyod1ak"
  },
  "dst":"1"
}
```

**Connector send ðŸ¡…:** 

```
{"type":"CANDIDATE",
 "payload":{
   "candidate":{
     "candidate":"candidate:842163049 1 udp 1677729535 76.102.26.97 35946 typ srflx raddr 192.168.0.104 rport 35946 generation 0 ufrag wLaA network-cost 999",
     "sdpMid":"0",
     "sdpMLineIndex":0
   },
   "type":"data",
   "connectionId":"dc_tyctyod1ak"
 },
 "dst":"1"
}
```

**Listener receive ðŸ¡‡:** 

```
{"type":"CANDIDATE",
 "src":"2",
 "dst":"1",
 "payload":{
   "candidate":{
     "candidate":"candidate:4033732497 1 udp 2113937151 192.168.0.104 35946 typ host generation 0 ufrag wLaA network-cost 999",
     "sdpMid":"0",
     "sdpMLineIndex":0
   },
   "type":"data",
   "connectionId":"dc_tyctyod1ak"
 }
}
```

**Listener receive ðŸ¡‡:** 

```
{"type":"CANDIDATE",
 "src":"2",
 "dst":"1",
 "payload":{
   "candidate":{
     "candidate":"candidate:842163049 1 udp 1677729535 76.102.26.97 35946 typ srflx raddr 192.168.0.104 rport 35946 generation 0 ufrag wLaA network-cost 999",
     "sdpMid":"0",
     "sdpMLineIndex":0
   },
   "type":"data",
   "connectionId":"dc_tyctyod1ak"
 }
}
```

I noticed that in the successful localhost test, the first thing the connector does is make an OFFER, however no OFFER is given at all in the unsuccessful LAN test. This is the offer given in the successful test:

```
{"type":"OFFER","payload":{"sdp":{"type":"offer","sdp":"v=0\r\no=- 1760611217932831082 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\na=group:BUNDLE 0\r\na=msid-semantic: WMS\r\nm=application 9 UDP/DTLS/SCTP webrtc-datachannel\r\nc=IN IP4 0.0.0.0\r\na=ice-ufrag:6enJ\r\na=ice-pwd:bmkMAiyGXd9k/TbN+gYoL39K\r\na=ice-options:trickle\r\na=fingerprint:sha-256 85:C6:63:EA:F7:DE:12:30:A5:8B:3A:C5:13:AC:78:91:E9:6A:41:4F:B8:C4:0A:94:67:E6:D4:2A:27:F7:A8:91\r\na=setup:actpass\r\na=mid:0\r\na=sctp-port:5000\r\na=max-message-size:262144\r\n"},"type":"data","connectionId":"dc_dd4m7huxvz","browser":"Chrome","label":"dc_dd4m7huxvz","serialization":"binary"},"dst":"1"}
```

Another thing I noticed is that the candidate sent by the connector is slightly different (and there's only one instead of two) - there's the string `5ca864aa-cd92-4296-b875-6d8ed2303d43.local` instead of an IP address `192.168.0.104`:

```
{"type":"CANDIDATE","payload":{"candidate":{"candidate":"candidate:1840965416 1 udp 2113937151 5ca864aa-cd92-4296-b875-6d8ed2303d43.local 59461 typ host generation 0 ufrag 6enJ network-cost 999","sdpMid":"0","sdpMLineIndex":0},"type":"data","connectionId":"dc_dd4m7huxvz"},"dst":"1"}
```

Note that I also tried the reverse (loading the listener on the separate machine and the connector on the same machine as the peerjs server), which also didn't work. The websocket frames were a bit more complex tho.

Does anyone know what might be going on here? I figured a test over a LAN should be just as easy as a local demo, since there's no NAT to traverse.
I'd like to build a node.js system that uses web rtc, but I'm noticing that this library doesn't support node.js. Are there any plans to support node.js?
After I end the call, the call.on('close') method executes after a delay of a few seconds. This is on my localhost development environment. I tried using both the default STUN ICE server from the peerJS docs (stun.l.google.com:19302) AS well as my own STUN server that I've set up with coturn. Yet no difference and same delay, no matter what. Delay exists in both Chrome and Firefox.

I've also noticed that regardless of if I use my own stun server address or google's, the same ICE candidates ip address (92.84.33.39) appears with both cases - as can be seen in the picture below.

<img width="956" alt="Screenshot 2019-12-10 at 16 10 04" src="https://user-images.githubusercontent.com/2426841/70536959-5ed83d80-1b68-11ea-89e1-762bfebb76ac.png">

What is causing the delay and how can it be fixed, any ideas? @kidandcat  

(As a side note, DataConnection, that is sending and receiving messages/data between the two peers does not have any delay at all.)

Thanks in advance.
Hello,

I have tried the Combining with existing express app example and it didnt work on my iphone 10.
I always get the error message "Error: Lost connection to server"

my code is this:

const express = require('express');
const app = express();
const ExpressPeerServer = require('peer').ExpressPeerServer;

 var server = require("https").createServer({
      key: fs.readFileSync('server.key'),
      cert: fs.readFileSync('server.cert')
    },expressApp);
const peerserver = ExpressPeerServer(server, options);

app.use('/peerjs', peerserver);

server.listen(443);

frontend:
var peer = new Peer("peer", signalingServer);
var errorFn = e => {
            alert(e); //PROBLEM ios Error: lost connection to server
        };
  peer.on("error", errorFn);
const signalingServer = {
  host: '192.168.1.10',
  port: 443,
  key:'peerjs',
  path: '/peerjs'
 },
debug: 3
};

My caller never has connection open status on the call object created from making a call.

    // Attempts to make a call to the peer
            callPeer(){
                let t = this;
                navigator.mediaDevices.getUserMedia({ audio: true})
                    .then((stream) => {
                        let call = t.peer.call(t.callee.id.trim(), stream);

                        // Logs
                        console.log(stream);
                        console.log(call);

                        //inserting our stream to the video tag
                        let audio = document.querySelector('audio');
                        audio.src = window.URL.createObjectURL(stream);

                        call.on('stream', (remoteStream) => {
                            console.log('EVENT: call => stream'); // Never logs
                            console.log(remoteStream); // Never logs
                        });
                    }, (err) => {
                        console.log(err);
                    })
            },

            // Initializes the open event listeners, this is more for the callee side of things
            initOpenListeners(){
                let t = this;

                this.peer.on('open', function(id) {
                    t.myId = id;
                });

                this.peer.on('call', (call) => {
                    navigator.mediaDevices.getUserMedia({ audio: true})
                        .then((stream) => {
                        call.answer(stream);

                        // Logs
                        console.log(stream);
                        console.log(call);

                        //inserting our stream to the video tag
                        let audio = document.querySelector('audio');
                        audio.src = window.URL.createObjectURL(stream);

                        // Answer the call, providing our mediaStream
                        call.on('stream', (remoteStream) => {
                            console.log('EVENT: call => stream'); // Never logs
                            console.log(remoteStream); // Never logs
                        })
                    });
                });
            },

Everything else works, calls are activated (when I make a call the other user receives it) but neither calle / caller ever has their stream event fired.