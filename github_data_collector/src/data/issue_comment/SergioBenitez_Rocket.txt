## Feature Request

It just took me about half an hour to find out how to define a custom 404 handler. I was trying to get a `#[get("/<path..>")]` route to work for that, and the only reason it didn't work is because I also had another, high-priority catch-all `NamedFile` route. Finally, I found out through [this issue](https://github.com/SergioBenitez/Rocket/issues/1148) that I could just write `#[catch(404)]` and where that is documented.

I had previously looked at all the routing docs I found because that's where I expected this to be documented. I think it would be very useful to link to the error catchers docs from the routing overview, and maybe also the more detailed routing page, to avoid this happening to other people too. Or maybe the error catching section could be moved up to immediately after the routing section, that would also make it much easier to discover.
Shows how to handle parameter renaming for the next person that is looking for it (Closes #1203 )
The feedback and compile time errors in Rocket are excellent - they've saved me lots of time already.

I did loose a chunk of time wondering why the url wasn't matching when I was trying to invoke it and it was because the ContentType was different.

It would be _most excellent_ if rocket in development mode could say the closest matching url was to the console and why it failed to match.

It's already a pleasure to work with, but that would make rocket extremely easy to use.
Doing the commit directly to the `async` branch, since it seems the most up to date one :)

I upgraded most of the dependencies. This also fixes #1195. This does not upgrade mongodb, for the reasons explained in #1189. I didn't upgrade `time`, because it requires a fundamental change on how `cookie` works, and I didn't upgrade `rusqlite` and its `r2d2` crate because `diesel` does not support it yet.

I didn't upgrade `percent-encoding` because `Rocket` depends on a trait that no longer exists in the new version, and I didn't have the time to fully understand our use and do a proper upgrade.

`compiletest_rs` drops the `stable` feature (it still exists but does nothing), so I removed it.

I also ran `rustfmt` on the files I modified.
Hello Sergio,
I have been working on a new SQL query builder / ORM for Rust for the last 9 month (Toql). I have never announced it and would like to do so together with a big update on crates.io.

I like Rocket and I've done nice integration with it, so that Toql requests are smooth. 
My problem is that I need at least MySQL 15 (query column types) to do my magic. On crates.io rocket_contrib v0.4.2 depends on ^14. In your Git repo however the version is updated to 15.

Do you have any plans to update the version on crates.io?

(On my machine I have a Git dependency to Rocket. So no probs for me, but I can't push on crates.io with a Git depedency).

Have a nice week
Roy

Ref: [Toql](https://github.com/roy-ganz/toql) (Heavily outdated version)

Hello,

Bug reports _must_ include:

  1. The version of Rocket you're using. Ensure it's the latest, if possible.

0.4.2, rustc --version
rustc 1.42.0-nightly (0de96d37f 2019-12-19)

  2. The operating system (distribution and version) where the issue occurs.

OSX 10.5.2
  3. A brief description of the bug that includes:
    * The nature of the bug.

FromData and FromDataSimple ask (status, Error) for Failure. As far as I can see the Error is not populated any where.

    * When the bug occurs.
    * What you expected vs. what actually happened.

It would be good to get Error output to up to default catcher response Outputs.

  4. How you uncovered the bug. Short, reproducible tests are especially useful.

Simplest FromDataSimple Guard do not show Error any where, not even debug level logs.

  5. Ideas, if any, about what Rocket is doing incorrectly.

Rocket  transforms rocket::request::Outcome to rocket::Outcome and just drops the addition E info all together.
It would be very convenient if the Error info could be populated from data parsers to above levels. Now I need to do FromDataSimple functionality in post route fn itself.

I'm using rocket 0.4.2, and rocket_contrib::serve, on Ubuntu Linux 18.04.3 LTS and rust 1.42.0-nightly.

I'm using StaticFiles to serve a directory `static/` containing two files: `index.html` and `app.js`, with
```
.mount("/static", StaticFiles::from("static"))
```
The file `index.html` includes the line
```
 <script src="app.js" type="text/javascript"></script>
```

If I visit http://localhost:8000/static/ in my browser, it loads my index page and the application script as expected:
```
GET /static/ text/html:
    => Matched: GET /static [10]
    => Outcome: Success
    => Response succeeded.
GET /static/app.js:
    => Matched: GET /static/<path..> [10]
    => Outcome: Success
    => Response succeeded.
```

However, if I visit http://localhost:8000/static instead, it loads my index page but fails to load the application script. The Rocket logs show this:
```
GET /static text/html:
    => Matched: GET /static [10]
    => Outcome: Success
    => Response succeeded.
GET /app.js:
    => Error: No matching routes for GET /app.js.
    => Warning: Responding with 404 Not Found catcher.
    => Response succeeded.
```

I expected the page to load correctly, whether it was requested with `static/` or `static`. Actually, it only loads corectly if `static/` is used; if `static` is used all relative URLs are interpreted relative to the parent directory rather than the static directory.

I would prefer Rocket to respond to a request for `static` with a 301 redirect to `static/`. In general, if the request does not have a trailing slash but the matching file is a directory, issue a redirect to the request URI with a trailing slash appended.

Thanks.
# Summary

One thing that's always been discussed after adding database pooling support as a first-class structure in `rocket_contrib` has been supporting transactional database tests (or some other facility for easy testing that doesn't require writing user code to rollback database changes). We've had user reports (#697) where they're unable to write integration tests with transactions because the data is rolled back before they can make assertions.

This is going to serve as a tracking issue to allow for the discussion of implementation and the expectations of such a solution. I'll update this origin message as the conversation evolves to summarize the discussion.

# Prior Art

Prior art that I've researched has primarily come from the Rails framework. ActiveRecord allows for transactional fixture loading and data manipulation. However, given its integration with testing frameworks like `rspec`, they're able to make data assertions before the data is rolled back.

# Previous Attempt(s) and outcomes

I've made a previous attempt at implementing this based on @jebrosen's suggestion that we allow a connection-customizing callback be added to a database pool. This callback would initiative a transaction before passing the connection to the handler. It would then roll the transaction back when the connection was returned to the pool (on `Drop`) and the database would be restored to a pristine state.

The chief pitfall with this approach is that the transaction terminates at the end of the handler, not the end of the test and thus does not allow for assertions that require database interaction. Having a connection-customizing callback may be useful for other reasons, though, but it doesn't solve this particular problem.

[Here's a link to that attempt](https://github.com/ELD/Rocket/tree/db-custom-method)

# Next Steps

So, I propose that we start a discussion where we can clarify expectations of such a feature and how such a feature could work. This hopefully drives out finer grained items that can guide implementation.
Current Tera version (0.11) in contrib is nearly 1 year old and there are missing features, which are present in Tera documentation. 
Because of this, it's difficult to know what is available and not.

As an example, I'm getting this error:    ` => Error: Filter 'float' not found`
The filter `float` is present in standard Tera doc, but not in the (oldish) version Rocket uses.

Is there a plan to bump Tera version to current one?

I recently started learning rocket, and hit an obstacle with sessions - there are cookies and shared state, but no built-in session support. Unless I somehow missed it? 

Session is used to hold data between requests coming from the same client, using a session cookie as an identifier. It's a really useful feature, especially as a building block for user authentication.

..so I went ahead and built a generic session store with a fairing: https://crates.io/crates/rocket_session

I want to ask if this is something you might want to add to the contrib crate, or I should rather keep it as a separate crate, like it is now. I'm not sure how you'd write unit tests for something like this, beyond checking that it compiles.