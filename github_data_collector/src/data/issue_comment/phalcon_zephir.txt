On the latest Phalcon (4.0.2) we have a few compile warnings. One is already logged #653 
But we also have the following warnings:
```
/private/tmp/pear/temp/phalcon/phalcon.zep.c:6454:67: warning: format specifies type 'long' but the argument has type 'zend_ulong' (aka 'unsigned long long') [-Wformat]
                                zend_error(E_NOTICE, "Undefined index: %ld in %s on line %d", uidx, file, line);
                                                                       ~~~                    ^~~~
                                                                       %llu
/private/tmp/pear/temp/phalcon/phalcon.zep.c:42061:65: warning: incompatible pointer types passing 'zend_ulong *' (aka 'unsigned long long *') to parameter of type 'unsigned long *' [-Wincompatible-pointer-types]
                                                        replace = phalcon_replace_marker(1, paths, replacements, &position, cursor, marker);
                                                                                                                 ^~~~~~~~~
/private/tmp/pear/temp/phalcon/phalcon.zep.c:41929:89: note: passing argument to parameter 'position' here
zval *phalcon_replace_marker(int named, zval *paths, zval *replacements, unsigned long *position, char *cursor, char *marker)
                                                                                        ^
/private/tmp/pear/temp/phalcon/phalcon.zep.c:42095:65: warning: incompatible pointer types passing 'zend_ulong *' (aka 'unsigned long long *') to parameter of type 'unsigned long *' [-Wincompatible-pointer-types]
                                                        replace = phalcon_replace_marker(0, paths, replacements, &position, cursor, marker);
                                                                                                                 ^~~~~~~~~
/private/tmp/pear/temp/phalcon/phalcon.zep.c:41929:89: note: passing argument to parameter 'position' here
zval *phalcon_replace_marker(int named, zval *paths, zval *replacements, unsigned long *position, char *cursor, char *marker)
                                                                                        ^
/private/tmp/pear/temp/phalcon/phalcon.zep.c:42121:64: warning: incompatible pointer types passing 'zend_ulong *' (aka 'unsigned long long *') to parameter of type 'unsigned long *' [-Wincompatible-pointer-types]
                                                replace = phalcon_replace_marker(0, paths, replacements, &position, cursor, marker);
                                                                                                         ^~~~~~~~~
/private/tmp/pear/temp/phalcon/phalcon.zep.c:41929:89: note: passing argument to parameter 'position' here
zval *phalcon_replace_marker(int named, zval *paths, zval *replacements, unsigned long *position, char *cursor, char *marker)
```


Hi,

I'm in the process of porting my colour logger to a php extension.

**Zephir snippet (Logger.zep):**
```
namespace Terah\Logger;

class Logger
{
    public static function toRed(string strText) -> string
    {
            return "\e[0;31m" . strText . "\e[0m";
    }
}
```

**PHP Snippet: (test.php)**
```
<?php

use Terah\Logger\Logger;

class TestLogger extends Logger
{

    public static function toRed(string $strText) : string
    {
        return "\e[0;31m" . $strText . "\e[0m";
    }


    public static function fixToRed(string $strText)
    {
        $data           = parent::toRed($strText);

        return str_replace("\\e", "\e", $data);
    }

}


echo Logger::toRed('Logger::toRed with a \ or \\ ') . PHP_EOL;
echo TestLogger::toRed('TestLogger::toRed with a \ or \\ ') . PHP_EOL;
echo TestLogger::toRed('TestLogger::fixToRed with a \ or \\ ') . PHP_EOL;
```

**Output**
```
root@9b3df97de4ea:/src/src/terah/terah#/root/.composer/vendor/bin/zephir --version
Zephir 0.12.15 by Andres Gutierrez and Serghei Iakovlev (source)

root@9b3df97de4ea:/src/src/terah/terah# php -v
PHP 7.3.7 (cli) (built: Jul 17 2019 22:25:08) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.3.7, Copyright (c) 1998-2018 Zend Technologies
    with Xdebug v2.9.0, Copyright (c) 2002-2019, by Derick Rethans

root@9b3df97de4ea:/src/src/terah/terah# php test.php 
\e[0;31mLogger::toRed with a \ or \ \e[0m
TestLogger::toRed with a \ or \  <= this is red
TestLogger::fixToRed with a \ or \  <= this is red

```

I'd expect zephir to behave the same as PHP where it doesn't echo the extra backslashes.




Hi,

I wrote this method which works correctly:
```
public function getWords(array strings) -> array {
    var pdo = this->pdo;
    var words = array_map(function(a) use (pdo) {
            let a = preg_replace("/^(j|m|s|t|l|qu|c|d|n)\'$/i", "$1e", a);
            return pdo->quote(trim(mb_strtolower(a)));
    }, strings);
    return words;
}
```
But I get this warning when compiling :
```
 Warning: Variable "pdo" assigned but not used in Nlp\Dictionary\Dictionary::getWords in C:\var\www\html\phpext\nlp\nlp\Dictionary\dictionary.zep on line 306 [unused-variable]

          var pdo = this->pdo;

        ---------------------^
```
How to avoid it?

as you can see, the variable 'pdo' is used in the **_use_** language construct ... `function(a) use (pdo)`

Thanks for your help
It would be great if we can get support for variadic functions using the `...` operator (same as in PHP) instead of relying on `func_get_args()`

This will greatly help when calling methods that accept different number of parameters (see `PDO::query()` for instance)

From the PHP manual = example:

```php
function f($req, $opt = null, ...$params) {
    // $params is an array containing the remaining arguments.
    printf('$req: %d; $opt: %d; number of params: %d'."\n",
           $req, $opt, count($params));
}
```

```
f(1);
f(1, 2);
f(1, 2, 3);
f(1, 2, 3, 4);
f(1, 2, 3, 4, 5);
```
Greetings Phalcon/Zephir team,

The multiply, divide, add, subtract, greater, greater equal, less, and less equal tests starting [here](https://github.com/RubixML/Tensor/blob/master/tests/ColumnVectorTest.php#L74) fail when the [Tensor](https://github.com/RubixML/Tensor) extension is compiled with `"internal-call-transformation: true"`. They do not fail when the extension is compiled without the optimization.

It looks like what's happening is that the non-static child methods on [ColumnVector](https://github.com/RubixML/Tensor/blob/master/src/ColumnVector.php) that overload the parent's ([Vector](https://github.com/RubixML/Tensor/blob/master/src/Vector.php)) methods are not being called. Instead the parent method is being called with the same method signature. This explains why the result is erroneous for multiplication, addition, etc. with a column vector (i.e. test fail) but is correct for a row vector.
```out
In BitwiseBaseOperator.php line 87:
                                               
  [ErrorException]                             
  A non well formed numeric value encountered
```
```php
return new CompiledExpression('int', $expression['left']['value'] << $expression['right']['value'], $expression);
// <--  \hexdec($expression['left']['value']) '0xffffffff'
```
Zephir
```zephir
	public static function pack64( value )
	{
		var highmap;
		let highmap = 0xffffffff << 32; // <- error
		return highmap;
	}
```
`[ERROR] Syntax error in /xxx/test/test/debug.zep on line 9`
```zephir
namespace Test;

class Debug
{
	public static function decodes(b32)
	{
		var len,i,binary;
		let len = strlen(b32);
		for i in range(0, len-1) { // <-- error
		}
		return binary;
	}
}
```
In int64,
Type error
```c
#define zephir_get_numberval(z) (Z_TYPE_P(z) == IS_LONG ? Z_LVAL_P(z) : zephir_get_doubleval(z))


zval tmp, op1, op2;

ZVAL_LONG(&op1, 1000000000000000000);
ZVAL_LONG(&op2, 12);
ZVAL_LONG(&tmp, Z_LVAL(op1) + zephir_get_numberval(&op2));
zend_printf("\n value=%lld \n", Z_LVAL(tmp)); // <- this error value=1000000000000000000

ZVAL_LONG(&tmp, Z_LVAL(op1) + (zend_long)zephir_get_numberval(&op2));
zend_printf("\n value=%lld \n", Z_LVAL(tmp)); // <-- this right

ZVAL_LONG(&tmp, Z_LVAL(op1) + Z_LVAL_P(&op2));
zend_printf("\n value=%lld \n", Z_LVAL(tmp)); // <- this right value=1000000000000000012
```

Bracket priority error
```zephir
var hmac = [
    195,  27, 216, 98, 57, 79,  54, 206,  194,  54,  232,
    46,   121, 107,  161,  141,  244, 185, 154,  78
], offset;
let offset = 14;
let code = (hmac[offset + 0] & 0x7F) << 24 | (hmac[offset + 1] & 0xFF) << 16 | (hmac[offset + 2] & 0xFF) << 8 | (hmac[offset + 3] & 0xFF);
// code = 562951353
```
```c
ZVAL_LONG(&code, (((((((((zend_long) (zephir_get_numberval(&_11)) & 0x7F)) << 24) | (((zend_long) (zephir_get_numberval(&_12)) & 0xFF))) << 16) | (((zend_long) (zephir_get_numberval(&_13)) & 0xFF))) << 8) | (((zend_long) (zephir_get_numberval(&_14)) & 0xFF)))); // <- this error
// must change to that
ZVAL_LONG(&code, ( (zephir_get_numberval(&_11) & 0x7F) << 24) | ((zephir_get_numberval(&_12) & 0xFF) << 16) | ((zephir_get_numberval(&_13) & 0xFF) << 8) | (zephir_get_numberval(&_14) & 0xFF)); // <- right
```
@sergeyklay Example:
```zephir
public static function decodes(b32) {
		var b32;
		let b32 = strtoupper(b32);
		return strlen(b32);
}
```
generate error code:
```c
PHP_METHOD(Mytest_Debug, decodes) {

	zephir_method_globals *ZEPHIR_METHOD_GLOBALS_PTR = NULL;
	zval b32, b32_sub, _0;
	zval *this_ptr = getThis();

	ZVAL_UNDEF(&b32);
	ZVAL_UNDEF(&b32_sub);
	ZVAL_UNDEF(&_0);

	ZEPHIR_MM_GROW();
	zephir_fetch_params(1, 1, 0, &b32);

	ZEPHIR_SEPARATE_PARAM(b32);


	ZEPHIR_INIT_VAR(&_0);
	zephir_fast_strtoupper(&_0, &b32);
	ZEPHIR_CPY_WRT(&b32, &_0);
	RETURN_MM_LONG(zephir_fast_strlen_ev(&b32));

}
```
Use development
I tried a slightly customized version of EagerLoading from the incubator with the current Phalcon 4.0.x branch. Everything works very well, but in some cases I got SEGFAULT errors.

I noticed, that there are strange `= null` lines before passing the actual values in some cases.

I thought that this must have been done like this to avoid bugs in the earlier versions, but in the end, **I had to add another of this** (`= null`) **to avoid the SEGFAULT error.**
```php
if ($isSingle) {
	$record->{$alias} = null; // I had to add this line
	$record->{$alias} = empty($records) ? null : $records[0]; // The SEGFAULT happens here
} else {
	if (empty($records)) {
		$record->{$alias} = null; // This was already here
		$record->{$alias} = [];
	} else {
		$record->{$alias} = $records;

		if (static::$isPhalcon2) {
			$record->{$alias} = null; // This was already here also
			$record->{$alias} = $records;
		}
	}
}
```
https://github.com/phalcon/incubator/blob/4883d9009a9d651308bfc201a0e9440c0ff692e2/Library/Phalcon/Mvc/Model/EagerLoading/EagerLoad.php#L195-L209

This is the backtrace I got.

Before the error occurs, these are the values:
```
$alias = 'language';
$records = new Languages(); // extends Mvc\Model
```
I actually changed `$records[0]` to `new Languages()` and the error remains.
I tried removing everything from the initialization of that model, didn't help.
But if I change `new Languages` to any other model, it works well.

```
#0  zend_mm_alloc_small (bin_num=6, size=56, heap=0x7fad6a400040) at ./Zend/zend_alloc.c:1289
#1  _emalloc_56 () at ./Zend/zend_alloc.c:2428
#2  0x00005619f351e532 in zend_array_dup (source=0x7fad379b9e6f) at ./Zend/zend_hash.c:1924
#3  0x00007fad4eec9a31 in zephir_update_property_zval (object=0x7fff453537b0, property_name=0x7fad50d794a3 "related", property_length=7, value=0x7fff45353780) at /cphalcon/ext/kernel/object.c:622
#4  0x00007fad4f59fe7b in zephir_init_properties_Phalcon_Mvc_Model (class_type=0x7fad38fa8440) at /cphalcon/ext/phalcon/mvc/model.zep.c:10452
#5  0x00005619f350ebdb in object_and_properties_init (arg=arg@entry=0x7fad6a421870, class_type=class_type@entry=0x7fad38fa8440, properties=properties@entry=0x0) at ./Zend/zend_API.c:1335
#6  0x00005619f350ecd7 in object_init_ex (arg=arg@entry=0x7fad6a421870, class_type=class_type@entry=0x7fad38fa8440) at ./Zend/zend_API.c:1343
#7  0x00005619f358c554 in ZEND_NEW_SPEC_CONST_UNUSED_HANDLER () at ./Zend/zend_vm_execute.h:8829
#8  0x00005619f35959e4 in execute_ex (ex=0x7fad6a400040) at ./Zend/zend_vm_execute.h:56311
#9  0x00005619f34ff4e3 in zend_call_function (fci=0x7fff45353b90, fci_cache=<optimized out>) at ./Zend/zend_execute_API.c:756
#10 0x00007fad4eedbc51 in zephir_call_user_function (object_pp=0x7fff453541b0, obj_ce=0x7fad37b3d380, type=zephir_fcall_method, function_name=0x7fff45353e10, retval_ptr=0x7fff45354160, cache_entry=0x0, cache_slot=0,
    param_count=3, params=0x7fff453541f0) at /cphalcon/ext/kernel/fcall.c:378
#11 0x00007fad4eedc5fe in zephir_call_class_method_aparams (return_value=0x7fff45354160, ce=0x7fad37b3d380, type=zephir_fcall_method, object=0x7fff453541b0, method_name=0x7fad6a5fa2b8 "afterexecuteroute", method_len=17,
    cache_entry=0x0, cache_slot=0, param_count=3, params=0x7fff453541f0) at /cphalcon/ext/kernel/fcall.c:516
#12 0x00007fad4f2cc271 in zim_Phalcon_Events_Manager_fireQueue (execute_data=0x7fad6a421540, return_value=0x7fff45354ac0) at /cphalcon/ext/phalcon/events/manager.zep.c:539
#13 0x00005619f34ff3ad in zend_call_function (fci=0x7fff453544c0, fci_cache=<optimized out>) at ./Zend/zend_execute_API.c:770
#14 0x00007fad4eedbc51 in zephir_call_user_function (object_pp=0x7fad6a4214d0, obj_ce=0x7fad6a41e240, type=zephir_fcall_method, function_name=0x7fff45354740, retval_ptr=0x7fff45354ac0, cache_entry=0x7fff45354390, cache_slot=231,
    param_count=2, params=0x7fff45354b40) at /cphalcon/ext/kernel/fcall.c:378
#15 0x00007fad4eedc5fe in zephir_call_class_method_aparams (return_value=0x7fff45354ac0, ce=0x7fad6a41e240, type=zephir_fcall_method, object=0x7fad6a4214d0, method_name=0x7fad50626c92 "firequeue", method_len=9, cache_entry=0x0,
    cache_slot=231, param_count=2, params=0x7fff45354b40) at /cphalcon/ext/kernel/fcall.c:516
#16 0x00007fad4f2cab09 in zim_Phalcon_Events_Manager_fire (execute_data=0x7fad6a4214b0, return_value=0x7fad6a421490) at /cphalcon/ext/phalcon/events/manager.zep.c:441
#17 0x00005619f359bc4e in ZEND_DO_FCALL_SPEC_RETVAL_USED_HANDLER () at ./Zend/zend_vm_execute.h:1106
#18 execute_ex (ex=0x7fad6a400040) at ./Zend/zend_vm_execute.h:55497
#19 0x00005619f34ff4e3 in zend_call_function (fci=0x7fff45354ed0, fci_cache=<optimized out>) at ./Zend/zend_execute_API.c:756
#20 0x00007fad4eedbc51 in zephir_call_user_function (object_pp=0x7fff45356b80, obj_ce=0x7fad6a41e240, type=zephir_fcall_method, function_name=0x7fff45355150, retval_ptr=0x7fff45356ff0, cache_entry=0x7fff45354da0, cache_slot=0,
    param_count=3, params=0x7fff45357110) at /cphalcon/ext/kernel/fcall.c:378
#21 0x00007fad4eedc5fe in zephir_call_class_method_aparams (return_value=0x7fff45356ff0, ce=0x7fad6a41e240, type=zephir_fcall_method, object=0x7fff45356b80, method_name=0x7fad4fc8bd41 "fire", method_len=4,
    cache_entry=0x7fff453553a0, cache_slot=0, param_count=3, params=0x7fff45357110) at /cphalcon/ext/kernel/fcall.c:516
#22 0x00007fad4f016d2b in zim_Phalcon_Dispatcher_AbstractDispatcher_dispatch (execute_data=0x7fad6a421390, return_value=0x7fff45358a20) at /cphalcon/ext/phalcon/dispatcher/abstractdispatcher.zep.c:791
#23 0x00005619f34ff3ad in zend_call_function (fci=0x7fff453573d0, fci_cache=<optimized out>) at ./Zend/zend_execute_API.c:770
#24 0x00007fad4eedbc51 in zephir_call_user_function (object_pp=0x7fff45358990, obj_ce=0x7fad37b3d980, type=zephir_fcall_method, function_name=0x7fff45357650, retval_ptr=0x7fff45358a20, cache_entry=0x0, cache_slot=0,
    param_count=0, params=0x7fff45358d00) at /cphalcon/ext/kernel/fcall.c:378
#25 0x00007fad4eedc5fe in zephir_call_class_method_aparams (return_value=0x7fff45358a20, ce=0x7fad37b3d980, type=zephir_fcall_method, object=0x7fff45358990, method_name=0x7fad50ccb4bf "dispatch", method_len=8, cache_entry=0x0,
    cache_slot=0, param_count=0, params=0x7fff45358d00) at /cphalcon/ext/kernel/fcall.c:516
#26 0x00007fad4f4c87f3 in zim_Phalcon_Mvc_Application_handle (execute_data=0x7fad6a421330, return_value=0x7fad6a421320) at /cphalcon/ext/phalcon/mvc/application.zep.c:385
#27 0x00005619f359bc4e in ZEND_DO_FCALL_SPEC_RETVAL_USED_HANDLER () at ./Zend/zend_vm_execute.h:1106
#28 execute_ex (ex=0x7fad6a400040) at ./Zend/zend_vm_execute.h:55497
#29 0x00005619f359c3f3 in zend_execute (op_array=op_array@entry=0x7fad6a480000, return_value=0x0, return_value@entry=0x7fad6a476e00) at ./Zend/zend_vm_execute.h:60889
#30 0x00005619f350d232 in zend_execute_scripts (type=type@entry=8, retval=0x7fad6a476e00, retval@entry=0x0, file_count=1782714752, file_count@entry=3) at ./Zend/zend.c:1568
#31 0x00005619f34ad2c0 in php_execute_script (primary_file=0x7fff4535b390) at ./main/main.c:2639
#32 0x00005619f336692b in main (argc=<optimized out>, argv=<optimized out>) at ./sapi/fpm/fpm/fpm_main.c:1950
```

If this doesn't help, I'll try to reproduce this issue in a clean example, but it seems like a pretty time consuming task to do so.

PHP 7.3.11-1+ubuntu18.04.1
Phalcon current 4.0.x branch
Zephir 0.12.12