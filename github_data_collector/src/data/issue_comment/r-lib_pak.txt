That include all dependencies, for easy installation.
From https://github.com/r-lib/pkgdepends/issues/151
Hi,

I'm hoping to use this package as the engine for [checkpoint](/RevolutionAnalytics/checkpoint). Among other things, it should be a huge improvement over screen-scraping the printout of a `system2` call to detect the outcome of an install.

While it's on CRAN, the "experimental" lifecycle badge leads me to believe that it isn't quite mature yet. Would you be able to provide at least a rough idea of when pak will be ready for production usage?
`?pak_install` does not document the specifications available in `pkg`.
At Jim's suggestion, I moved this issue from https://github.com/jimhester/archive to here.

```
> pak::pkg_install("jimhester/archive")
ℹ Checking for package metadata updates
✔ Downloaded metadata files, 903.21 kB in 1 files.                                                                                                                             
✔ Updating metadata database                                                                                                                                                   
✔ Using cached package metadata                                                                                                                                                
                                                                                                                                                                               
→ Will install 1 packages:
  jimhester/archive
  
→ Will update 1 packages:
  tidyverse/glue
  
→ Will not update 15 packages.

! Package(s) `glue` are already loaded, installing them may cause
  problems. Use `pkgload::unload()` to unload them.

→ Will download 2 packages with unknown size.

? Do you want to continue (Y/n) Y

Error: callr subprocess failed: Failed to download archive from `https://api.github.com/repos/jimhester/archive/zipball/09754896e63a96f928aaacf9528589caba7d6128`.
```

Installed libarchive with Homebrew directly.
`pak::pkg_install("jimhester/archive")` failed with same error.
However, `remotes::install_github("jimhester/archive")` succeeded.
Seen on the website
![image](https://user-images.githubusercontent.com/6791940/67007016-c1700880-f0e6-11e9-938c-09cdd426a8d4.png)

I think the website was not rebuilt correctly after readme modification in 7a69eaa18b7a250d044e9c6e948ff8930823a314
https://github.com/r-lib/pak/blob/00f4bd509a6f9145973b376d9c2bdcea652b0119/README.Rmd#L33-L35
https://github.com/r-lib/pak/blob/00f4bd509a6f9145973b376d9c2bdcea652b0119/docs/index.html#L83

Installing using `pak` inside a docker container fails with error `Error: callr subprocess failed: Failed to download abind from 'https://demo.rstudiopm.com/cran/__linux__/bionic/latest/src/contrib/abind_1.4-5.tar.gz'.` The link is valid for the correct tarball.

Installing using `utils::install.packages` works fine. 

Dockerfile below reproduces.

```
# Setup --------
FROM ubuntu:bionic

ARG R_VERSION=3.6.1
ARG R_REPO='https://demo.rstudiopm.com/cran/__linux__/bionic/latest'

# Install R -------------------------------------------------------------------#

RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl \
    gdebi

RUN curl -O https://cdn.rstudio.com/r/ubuntu-1804/pkgs/r-${R_VERSION}_1_amd64.deb && \
    DEBIAN_FRONTEND=noninteractive gdebi --non-interactive r-${R_VERSION}_1_amd64.deb

RUN ln -s /opt/R/${R_VERSION}/bin/R /usr/local/bin/R && \
    ln -s /opt/R/${R_VERSION}/bin/Rscript /usr/local/bin/Rscript

RUN echo "options(\"repos\" = c(RSPM = \"${R_REPO}\"), \"HTTPUserAgent\" = \"R/${R_VERSION} R (${R_VERSION} x86_64-pc-linux-gnu x86_64-pc-linux-gnu x86_64-pc-linux-gnu)\");" >> \
	/opt/R/${R_VERSION}/lib/R/etc/Rprofile.site

# works
RUN /opt/R/${R_VERSION}/bin/R -e "utils::install.packages('pak')"
# fails
RUN /opt/R/${R_VERSION}/bin/R -e "pak::pkg_install('abind')"
# works
RUN /opt/R/${R_VERSION}/bin/R -e "utils::install.packages('abind')"
```


I keep base and recommended packages in the default library and everything else in a user library:

``` r
.libPaths()
#> [1] "/Users/jenny/Library/R/3.6/library"                            
#> [2] "/Library/Frameworks/R.framework/Versions/3.6/Resources/library"
```

<sup>Created on 2019-10-01 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9000)</sup>

`pak::pkg_install()` regularly wants to install a second instance of, e.g. recommended packages, into my user library.

Example from today:

``` r
> pak::pkg_install("pkgdown")
ℹ Checking for package metadata updates
✔ All 12 metadata files are current.                                              
✔ Using session cached package metadata                                           
✔ Using cached package metadata                                                   

→ Will install 1 packages:
  MASS
  
→ Will not update 52 packages.

→ Will download 1 CRAN packages (1.18 MB).

? Do you want to continue (Y/n) y
✔ Installed MASS 7.3-51.4  [81ms]                                                 
✔ 1 + 52 pkgs | kept 45, updated 0, new 1 | downloaded 1 (1.18 MB) [4.7s]         
> library(MASS)

Attaching package: 'MASS'

The following object is masked from 'package:dplyr':

    select

> searchpaths()
 [1] ".GlobalEnv"                                                              
 [2] "/Users/jenny/Library/R/3.6/library/MASS"
...
```

Prior to this MASS was installed, only once, in the default library. And the version was current.

This makes me hesitant to use pak, as it feels like it will gradually install 2nd copies of ?all? the recommended packages into my user library, whereas I'd rather have just one copy, in the default library.
I've installed the official R installers for macOS for 3.5.3, 3.6.1 and R-devel.

Whenever I try to use `pak` on v3.6.1 I get a segfault

```r
pak::pkg
 *** caught segfault ***
address 0x18, cause 'memory not mapped'

Traceback:
 1: dyn.load(dll_file)
 2: load_private_package("ps", create = create)
 3: load_private_packages(create = FALSE)
 4: doTryCatch(return(expr), name, parentenv, handler)
 5: tryCatchOne(expr, names, parentenv, handlers[[1L]])
 6: tryCatchList(expr, classes, parentenv, handlers)
 7: tryCatch({    check_for_private_lib()    load_private_packages(create = FALSE)    new_remote_session(create = FALSE)}, error = function(e) e)
 8: try_new_remote_session()
 9: fun(libname, pkgname)
10: doTryCatch(return(expr), name, parentenv, handler)
11: tryCatchOne(expr, names, parentenv, handlers[[1L]])
12: tryCatchList(expr, classes, parentenv, handlers)
13: tryCatch(fun(libname, pkgname), error = identity)
14: runHook(".onLoad", env, package.lib, package)
15: loadNamespace(name)
16: getNamespace(ns)
17: asNamespace(ns)
18: getNamespaceExports(prefix)
19: unique(c(getNamespaceExports(prefix), if (prefix != "base") names(getNamespaceInfo(prefix,     "lazydata"))))
20: doTryCatch(return(expr), name, parentenv, handler)
21: tryCatchOne(expr, names, parentenv, handlers[[1L]])
22: tryCatchList(expr, classes, parentenv, handlers)
23: tryCatch(unique(c(getNamespaceExports(prefix), if (prefix !=     "base") names(getNamespaceInfo(prefix, "lazydata")))), error = identity)
24: specialOpCompletionsHelper(op, suffix, prefix)
25: specialCompletions(text, spl)
26: .completeToken()

```

<details>
<summary>SessionInfo</summary>

sessionInfo()
R version 3.6.1 Patched (2019-08-30 r77101)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Mojave 10.14.6

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] teamtools_0.1.0 gert_0.2        colorout_1.2-2  usethis_1.5.1

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.2      crayon_1.3.4    sys_3.3         git2r_0.26.1
 [5] magrittr_1.5    credentials_1.1 pillar_1.4.2    rlang_0.4.0
 [9] fs_1.3.1        tools_3.6.1     glue_1.3.1      purrr_0.3.2
[13] compiler_3.6.1  parallel_3.6.1  askpass_1.1     pkgconfig_2.0.2
[17] openssl_1.4.1   tibble_2.1.3


</details>

I just stumble on behavior I was not expecting from experiences with remotes.

With `remotes` we can do 
```r
remotes::update_packages("chromote")
```
and it will update a github package if this is the one installed, without explicitly providing `rstudio/chromote`

With `pak`, 
```r
pak::pkg_install("chromote", upgrade = T)
```
does not offer to update the package says nothing about the package. 

However, 
```r
pak::pkg_install("rstudio/chromote", upgrade = T)
```

If this behavior to be explicit differs from `remotes` on purpose, there is nothing here and this can be closed. 