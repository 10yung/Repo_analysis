Using a style of : _-$*`` #,##0.00_-;-$* #,##0.00_-;_-$* "-"??_-;_-@_- gets converted in numberFormatStandardized to: _-\$*\ #,##0.00_-;-\$*\ #,##0.00_-;_-\$*\ "-"??_-;_-@_- and causes slashes to be visible in the cell. Changing line 811 to $escaped.= $c; instead of $escaped.= "\\".$c; fixed it. 

Not sure what the intended purpose of escaping those characters was but it breaks custom formats. 


@mk-j  How to download file in post method without saving file at server?
If I add a style like this:

`$styles1 = array( array(),['border'=>'left,top,bottom'],['border'=>'top,bottom'],['border'=>'top,bottom,right']);
$writer->writeSheetRow('Iota-5', $row, $styles1);
`

MS Excel refuses to load the xlsx file while LibreOffice opens the xlsx file correctly.
If I remove the $style1 from the code like this:

`$writer->writeSheetRow('Iota-5', $row);`
 
Both MS Excel and LibrOffice load correctly.
The rows are 3 cells wide.
I need to use R1C1 notation for a particular formula, but excel errors and removes the formula when the spreadsheet opens. Ive tried the simplest test I could and it didn't work "=C[-1]" any thoughts?
in BuildworkbookXML, the sheetname output (when auto_filter set) wraps the sheetname in single quotes but doesn't double up on any single quotes contained in the name
and (I may be wrong? but I think that) the localSheetId needs to be incremented for each sheet,
$i=0;
foreach($this->sheets as $sheet_name=>$sheet) {
			if ($sheet->auto_filter) {
				$sheetname = (str_replace("'", "''", self::sanitize_sheetname($sheet->sheetname));	// special case ; single quotes need to be doubled up
				$workbook_xml.='<definedName name="_xlnm._FilterDatabase" localSheetId="'.($i).'" hidden="1">\''.self::xmlspecialchars($sheetname).'\'!$A$1:' . self::xlsCell($sheet->row_count - 1, count($sheet->columns) - 1, true) . '</definedName>';
				$i++;	
			}
		}

When you consider implementing repeatCols/repeatRows/Print_Titles, they will also need to handle single quotes in the same way.
Having generated an xlsx from code (mimetype detected as application/zip) and also creating one in Excel (mimetype detected as application/vnd.openxmlformats-officedocument.spreadsheetml.sheet), writing the files in this order will fix it:

                                $zip->addFromString("[Content_Types].xml"     , self::buildContentTypesXML() );

                                $zip->addEmptyDir("_rels/");
                                $zip->addFromString("_rels/.rels", self::buildRelationshipsXML());

                                $zip->addEmptyDir("xl/");
                                $zip->addFromString("xl/workbook.xml"         , self::buildWorkbookXML() );
                                $zip->addEmptyDir("xl/_rels/");
                                $zip->addFromString("xl/_rels/workbook.xml.rels", self::buildWorkbookRelsXML() );

                                $zip->addEmptyDir("xl/worksheets/");
                                foreach($this->sheets as $sheet) {
                                                $zip->addFile($sheet->filename, "xl/worksheets/".$sheet->xmlname );
                                }
                                $zip->addFile($this->writeStylesXML(), "xl/styles.xml" );  //$zip->addFromString("xl/styles.xml"           , self::buildStylesXML() );

                                $zip->addEmptyDir("docProps/");
                                $zip->addFromString("docProps/core.xml", self::buildCoreXML());
                                $zip->addFromString("docProps/app.xml" , self::buildAppXML() );

As "headings" are cells just like data - they should be able to contain duplicated text!

eg.
	$aCols=[];
	$aCols['column']='@';
	$aCols['column']='@';	// durh ; obviously
	$aCols['column']='@';	// durh ; obviously
	$aData=['data','data','data'];
	$o=new XLSXWriter();
	$o->writeSheetHeader('sheet', $aCols);
	$o->writeSheetRow('sheet', $aData);
	$o->writeToFile('../public/test.xlsx');

Maybe a new function that uses the array without keys, eg.
	$aCols=[];
	$aCols[]=['title'=>'column', 'format'=>'@'];
	$aCols[]=['title'=>'column', 'format'=>'@'];
	$aCols[]=['title'=>'column', 'format'=>'@'];
	$aData=['data','data','data'];
	$o=new XLSXWriter();
	$o->writeSheetHeadings('sheet', $aCols);
	$o->writeSheetRow('sheet', $aData);
	$o->writeToFile('../public/test.xlsx');

I've faced with needs to explicitly set column types, so I've decided to separate set column types method and set header method. Because it was impossible, for example, set types for columns with the same names. See `ex12-column-types.php`.
Hello.
I need to create a file with a huge number of columns and set the width for all of them. When forming a file with more than 1024 columns, I get an error when opening the file "Excel found unreadable content in '[filename].xls'. Do you want to recover the contents of this workbook? If you trust the source of this workbook, click Yes."

Most likely, this is due to this code, because if I increase the `max` parameter in this line, then everything works for me.

https://github.com/mk-j/PHP_XLSXWriter/blob/39101b730210faae9dc47260a207a0823d6d7479/xlsxwriter.class.php#L181
No need to count columns to merge cells anymore.

The old merge cell way:
`$writer->markMergedCell($sheet1, $start_row=0, $start_col=0, $end_row=0, $end_col=4);`

The new one:
`$writer->mergeCells($sheet1, 'A1:E1');`

