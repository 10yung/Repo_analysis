As far as I can see, jwt-scala is not useful if you have more than one secret/key. Possibilities for this include:

* Secret rotation - it's a good practice to regularly rotate secrets, to do this, you need to concurrently accept tokens signed with both old and new secrets for the period of time where you start using the new secret, but there are tokens signed by the old secret that haven't yet expired.
* Per issuer secrets. You may have multiple services issuing JWTs, each with their own public/private key pair.

Ideally, information about which secret is being used should be in the JWT itself, for example, the `iss` claim may contain an identifier for the issuer, and the public key used to verify the signature for that issuers JWTs would be selected by inspecting that. To support this, the signature for decoding would have to be something in the form of `JwtClaim => Secret`.

Of course, this could be achieved by first decoding the claim without passing a secret and setting the signature option to false, reading the issuer, selecting a secret, and then decoding again with the secret, but then you're unnecessarily decoding the jwt twice.
All these libraries are vulnerable under DoS/DoW attacks which exploit O(n^2) complexity of Scala's HashMap construction when all keys have 0 hash code or Java's BigInteger/BigDecimal parsing from the decimal representation.

Here are PRs with code and instructions to reproduce:
https://github.com/plokhotnyuk/jsoniter-scala/pull/325
https://github.com/plokhotnyuk/jsoniter-scala/pull/173
https://github.com/plokhotnyuk/jsoniter-scala/pull/172
https://github.com/plokhotnyuk/jsoniter-scala/pull/325


