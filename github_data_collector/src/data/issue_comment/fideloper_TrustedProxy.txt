
Hi!

I'm running 2 laravels behind an IBM Load Balancer and i cant get Trustedproxy to work. I've tried all the configs mentioned in previous issues but i cant make it work. 

thanks!


Hi, I recently upgrade one application from Laravel 5.2 to Laravel 5.7
Before the upgrade I was using this library (v3.3) with the configuration below
```php
    'proxies' => '**',
...
    'headers' => [
        (defined('Illuminate\Http\Request::HEADER_FORWARDED') ? Illuminate\Http\Request::HEADER_FORWARDED : 'forwarded') => null,
        Illuminate\Http\Request::HEADER_CLIENT_IP    => 'X_FORWARDED_FOR',
        Illuminate\Http\Request::HEADER_CLIENT_HOST  => null,
        Illuminate\Http\Request::HEADER_CLIENT_PROTO => 'X_FORWARDED_PROTO',
        Illuminate\Http\Request::HEADER_CLIENT_PORT  => 'X_FORWARDED_PORT',
    ]
```

After the upgrade, I added the TrustProxies middleware below

```php
<?php

namespace App\Http\Middleware;

use Fideloper\Proxy\TrustProxies as Middleware;
use Illuminate\Http\Request;

class TrustProxies extends Middleware
{
    /**
     * The trusted proxies for this application.
     *
     * @var array
     */
    protected $proxies = '**';

    /**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */
    protected $headers = Request::HEADER_X_FORWARDED_AWS_ELB;
}
```

The issue I am having might not be related to this, but basically after the upgrade
```php
$request->ip() // the ec2 ip
$request->ips() // [ec2 ip, client ip]
```
It seems the order or the ips is inverted, I should be getting first the client ip, then any other ip.

Is this a configuration issue on my side or is there anything else I am missing?
Hi,

I followed the installation but wonder how to be sure this is installed correctly?

Is there any way to check if all setups are fine?

Thanks.
Hi,

Prior to 4.0, i could do something like this in config/trustproxy.php :

    'headers' => [
        (defined('Illuminate\Http\Request::HEADER_FORWARDED') ? Illuminate\Http\Request::HEADER_FORWARDED : 'forwarded') => 'FORWARDED',
        Illuminate\Http\Request::HEADER_CLIENT_IP    => 'X_FORWARDED_FOR',
        Illuminate\Http\Request::HEADER_CLIENT_HOST  => 'X_FORWARDED_HOST',
        Illuminate\Http\Request::HEADER_CLIENT_PROTO => 'X_FORWARDED_PROTO_CUSTOM',
        Illuminate\Http\Request::HEADER_CLIENT_PORT  => 'X_FORWARDED_PORT_CUSTOM',
    ]

But with 4.0 i can't find a way to specify custom names for  HEADER_CLIENT_PORT and HEADER_CLIENT_PROTO

Does someone know how to deal with this issue ?

thx


Our setup has multiple LB IP addresses, first a local one 10.\* and then a public one 130.\*. Lastly the users IP. This means that TrustedProxy should filter out 10.* and 130.*, but no matter what I do, it only filters out the first IP.

Everything worked correctly in version 3.\*, but after upgrading to 4.\*, it stopped working. Doesn't TrustedProxy support multiple layers of load balancers anymore?

Our environment is Google Cloud Platform with Laravel 5.6 and PHP 7.1.
This is not an issue, but it took me a while to get the config right before it started working properly using Laravel 5.4 behind an Amazon Web Services Application Load Balancer.
 
I thought I would post it, in case anyone else was having problems getting it to work.

config/trustedproxy.php

````
<?php

return [

    'proxies' => [
        '172.18.173.192',
        '172.18.171.242'
    ],

    'headers' => [
        (defined('Illuminate\Http\Request::HEADER_FORWARDED') ? Illuminate\Http\Request::HEADER_FORWARDED : 'FORWARDED') => null,
        \Illuminate\Http\Request::HEADER_X_FORWARDED_FOR    => 'X_FORWARDED_FOR',
        \Illuminate\Http\Request::HEADER_X_FORWARDED_HOST   => 'X_FORWARDED_HOST',
        \Illuminate\Http\Request::HEADER_X_FORWARDED_PORT   => 'X_FORWARDED_PORT',
        \Illuminate\Http\Request::HEADER_X_FORWARDED_PROTO  => 'X_FORWARDED_PROTO',
    ],

];
````

Naturally change the proxies for your ALB IPs.



Hi Chris,

I'm upgrading to laravel 5.5 and a bit confused about how to install.
You link to the laravel docs section on trusted proxy and instructions there.

However, in my new laravel 5.5 installation, I have a file config/trustedproxy.php in which I have set as before, but I also now have TrustProxies middleware in laravel 5.5

Is one of these files redundant?  What I have done is set up config/trustedproxy as I did in laravel 5.3, but should I also configure the middleware (I'm using Heroku), or do I need to do both?

I'm mentioning this because you simply reference the laravel docs on how to install on 5.5, and, coming from 5.3, I'm still a little confused as to how to setup.

I think I must have done php artisan:vendor publish on your trusted proxy, on laravel 5.5
Perhaps I should not have run that and should now delete the file in config?

Just mentioning in case others might also be confused.

Thanks. 
This seems like an excellent package!

Is there a way to easily enable/disable based on the env? For example, a config option like:

```
    'enable_env' => [
        'staging', 'prod-blue', 'prod-green'
    ],
```

This would, of course, enable in staging, as well as the prod blue/green cluster, while keeping disabled in dev, local, testing, etc.

Likewise, it could also be set with something like this which would allow it to be set by the server env var
```
'enable_proxy_config' => $_SERVER['use_proxy'] ?? false,
```

Perhaps these options could be both used, using `enable_env` settings unless `enable_proxy_config` is set, at which point, the boolean in `enable_proxy_config` would be used.

Or, perhaps I am misunderstanding the purpose of the package, and there's no reason I would need to disable in a local direct-access DEV env?

If this doesn't currently exist, I'd be open to writing a PR for it. Let me know your thoughts. 