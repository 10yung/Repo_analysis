- `FCModel.h` imports "FMDatabase.h" already (maybe we can use `@class FMDatabase;` in `FCModel.h`, and keep it in `FCModel.m`?).

- `FMDatabaseAdditions.h` seems not needed in `FCModel.m`.
Note: This warning comes from `FMDB.framework`, its related commit sha [`07e0362`](https://github.com/ccgus/fmdb/commit/07e0362) (23 May, 2017).
"continue" statement forces loop condition re-evaluation - while(conflict), this "conflict" value is initialized to false and does not change inside of loop body (loop will repeat itself only if condition is true, but condition is hardcoded false and will exit after first iteration) - loop will execute only once even if non unique primary key was generated, which will result in a sqlite crash (unique pk assertion failure)
asynchronously saving may be useful in some cases.
If you just follow the README blindly the code won't work with swift. 

NSClassFromString has a diffent behavior if it's called on an Objective-C class or a Swift class.
For the while and do...while loops, continue statement causes the program control pass to the conditional test - 'conflict' which is initialized to NO and never changed elsewhere. 
```
                    BOOL conflict = NO;
                    int attempts = 0;
                    do {
                        attempts++;
                        NSAssert1(attempts < 100, @"FCModel subclass %@ is not returning usable, unique values from primaryKeyValueForNewInstance", NSStringFromClass(self.class));
                        
                        id newKeyValue = [self.class primaryKeyValueForNewInstance];
                        if ([self.class instanceFromDatabaseWithPrimaryKey:newKeyValue]) continue; // already exists in database
                        [self setValue:newKeyValue forKey:key];
                    } while (conflict);
```
Sometimes I would like use left join and use resultDictionariesFromQuery: get the raw value, then need to use this value to create an instance existing in db, I think it needs this method to create...
Any schedule to support Carthage?
- (void)insertObj
{
    // Put some data in the table if there's not enough
    NSArray *allColors = [Color allInstances];
    NSUInteger numPeople = [Person numberOfInstances];
    NSTimeInterval date1 = [NSDate.date timeIntervalSince1970];
    NSLog(@"date1:%f",date1);
    while (numPeople < 1000) {
        Person *p = [Person new];
        [p save:^{
            p.name = [@"xiaohong" stringByAppendingString:[@(numPeople) stringValue]];//[RandomThings randomName];
            NSInteger num = numPeople;
            if (num >= allColors.count) {
                num = arc4random() % allColors.count;
            }
            Color *color = allColors[num];
            p.color = color;
        }];
        
        numPeople++;
    }
    NSLog(@"date2:%f",[NSDate.date timeIntervalSince1970]);
}

the output result ：
2017-07-10 15:13:43.624140 FCModelTest[14829:3666710] date1:1499670823.624041
2017-07-10 15:13:58.527835 FCModelTest[14829:3666710] date2:1499670838.527774

so it takes  about 15s when I save 1000 datas， Is there anything wrong ？thanks for help~
I finally caught this issue in the debugger.   Hoping you might be able to help.

I have attached schema, log output, query, values, and stack trace.

[stacktrace_debug.txt](https://github.com/marcoarment/FCModel/files/487718/stacktrace_debug.txt)
