Hello, how are you?
I want to ask for guidance on what I want to achieve if it's possible. Until now I use Joi to validate the requests my server receives.
This week I set up a new TS project from scratch and use io-ts to declare my interfaces. I want to use that interfaces as a single source of truth but also I want to kind of "extends" those declarations to validate the requests like I do with Joi. For example some number.min(10).max(20).

Pseudocode:
```javascript
// types.ts
export const IUserInput = t.interface(
  username: t.string(),
  password: t.string(),
);

// Middleware to validate the input request
const UserInputValidate = {
  username: IUserInput.username.min(3),
  password: IUserInput.password.min(8).max(128),
}
```
Regarding the simple pseudocode example, it would apply for validations of arrays or even custom validations, like an array of unique values.
My goal is to have that one source of truth and avoid "rewriting as much code as possible" for those exact validations. I have been surfing the io-ts and related libraries but I didn't find some clear way to achieve something like I want.

Let me know if you have questions on my doubt. If you can guide me to the right path to use this awesome library to perform exact/custom validations would be nice!

Best regards.
## ðŸš€ Feature request

### Current Behavior

No `bigint` codec.

### Desired Behavior

Having a `bigint` codec available, like there's for other primitives (`string`, `number`, etc.).

### Suggested Solution

Add a `bigint` codec to the library.

### Who does this impact? Who is this for?

People who would like to implement codecs on top of bigint, or at least that's my case.

### Describe alternatives you've considered

Using my own implementation.

### Your environment

| Software   | Version(s) |
| ---------- | ---------- |
| io-ts      | 2.0.0 |
| fp-ts      | 2.0.5 |
| TypeScript | 3.5.3 |
| Node | 13.6.0 |

I see that function types are deprecated [since 1.8.3](https://github.com/gcanti/io-ts/commit/f64320dccebdf760e29fefbbef43154c59e2df65). 

I often use io-ts in libraries to ensure that passed configuration is valid even if consumer is not using typescript, and if not fail with a clean error early. 

For this usage, having the Function type available is handy.

So I am curious what is the reason for deprecating the Function type ? And is it likely to be removed in future (in which case I'll probably need to publish a library that exports this).
I am using `io-ts` in a project with a complex data model, and I'm experiencing severe performance issues with the TypeScript compiler. I'm wondering if there is a way to help the compiler out and simplify the types, without sacrificing correctness or copy-pasting code.

Essentially, the data model is a structured definition of form fields and corresponding mathematical computations. The definitions essentially consist of UI properties, calculation metadata, and an array of fields. The fields themselves are a tagged union type of several intersection types; there is a `BaseField` and various fields that extend it, each with required and optional properties. I serve these form definitions to my UI over REST, and I'm using `io-ts` to validate the schema.

The problem is that the generated type output from `io-ts` appears to be right at the edge of what TypeScript can handle. Either that, or I'm doing something stupid and I don't see it. I have reached a complexity level where the TypeScript compiler hangs indefinitely, sucks up all my CPU and makes all my computer fans kick on.

Here is the definition of my CalculatorField type,:
```
export declare const CalculatorFieldC: t.UnionC<[t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    name: t.StringC;
    variable: t.StringC;
    type: t.StringC;
}>, t.PartialC<{
    columns: t.NumberC;
    row: t.NumberC;
}>]>, t.TypeC<{
    type: t.LiteralC<"integer">;
}>, t.PartialC<{
    initial_value: t.RefinementC<t.NumberC>;
    placeholder: t.StringC;
}>]>, t.IntersectionC<[t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    name: t.StringC;
    variable: t.StringC;
    type: t.StringC;
}>, t.PartialC<{
    columns: t.NumberC;
    row: t.NumberC;
}>]>, t.TypeC<{
    type: t.LiteralC<"dropdown">;
}>, t.PartialC<{
    initial_value: t.StringC;
}>]>, t.TypeC<{
    options: t.ArrayC<t.StringC>;
}>, t.PartialC<{
    groups: t.RecordC<t.StringC, t.ArrayC<t.StringC>>;
}>]>, t.IntersectionC<[t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    name: t.StringC;
    variable: t.StringC;
    type: t.StringC;
}>, t.PartialC<{
    columns: t.NumberC;
    row: t.NumberC;
}>]>, t.TypeC<{
    type: t.LiteralC<"dropdown-or-custom">;
    custom_input_option: t.StringC;
    custom_input_field: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
        name: t.StringC;
        variable: t.StringC;
        type: t.StringC;
    }>, t.PartialC<{
        columns: t.NumberC;
        row: t.NumberC;
    }>]>, t.TypeC<{
        type: t.LiteralC<"integer">;
    }>, t.PartialC<{
        initial_value: t.RefinementC<t.NumberC>;
        placeholder: t.StringC;
    }>]>;
}>, t.PartialC<{
    initial_value: t.StringC;
}>]>, t.TypeC<{
    options: t.ArrayC<t.StringC>;
}>]>, t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    name: t.StringC;
    variable: t.StringC;
    type: t.StringC;
}>, t.PartialC<{
    columns: t.NumberC;
    row: t.NumberC;
}>]>, t.TypeC<{
    type: t.LiteralC<"origin-destination">;
}>]>]>;
```

Obviously, that's not a handwritten definition, it's the composed result of the various component types.

This type itself does not have problems. However, in my UI, I use the same type to represent the state of the form in the UI. The UI state is an intersection of the Field union type and a `value`, which is a union (`string | number | null`).

Defining the following type causes VSCode to stop processing types and causes webpack to hang indefinitely:

```
const CalculatorFieldStateC = t.intersection([
  CalculatorFieldC,
  t.type({
    value: t.union([t.string, t.number, t.null])
  })
])
```

Any ideas? Am I doing something stupid and causing an infinite loop without seeing it? Is there a way to collapse these types, without declaring the full type of every Field by hand?

I can workaround the problem in the UI; I was only defining the above codec to validate state after rehydrating it from browser storage (since the structure is likely to change between versions of the app). However, the complexity of these fields is only going to increase as the app grows, with more field types, etc.

The structure stored in the database actually extends from the above Field type, because the database contains coefficients and other information that the server uses to perform the calculations that the UI doesn't see. It would be an absolute disaster to declare all of the necessary types separately.

I'd appreciate any help.
Can I somehow reuse already existing TS types to use it at runtime? 
For instance, I have TS type
```
type TUser = {
  id: string;
  name: string;
}
```

and I would like to get something like that

```
t.type({
  id: t.string,
  name: t.string
});
```

My point is I want to use io-ts in an existing project, and I would not like to rewrite all types.
### Current Behavior

```ts
const C = t.intersection([
	t.record(t.literal('funky'), t.string),
	t.record(t.string, t.unknown)
])

type C_ = t.TypeOf<typeof C>

/*
type C_ = {
    funky: string;
} & {
    [x: string]: unknown;
}
*/

const lit: C_ = {
	funky: 'key',
	more: 'nope'
} // Compiles fine


C.decode({
	funky: 'hey',
	more: 'nope'
}) // Left
```

### Expected behavior

```ts
C.decode({
	funky: 'hey',
	more: 'nope'
}) // Right
```

<!-- PLEASE FILL THIS OUT -->

| Software   | Version(s) |
| ---------- | ---------- |
| io-ts      | 2.0.1           |
| fp-ts      | 2.1.2      |
| TypeScript | 3.7.2       |

Currently, you can't create an `exact` `recursion` type.
 
`RecursiveType` doesn't satisfy the `HasProps` type, even if the type it's wrapping does. This is easy to fix by adding a `HasPropsRecursive` type to `HasProps` and then extending `getProps` to `return getProps(codec.type)` for recursive codecs.

But now we have another problem: calling `exact` on a `RecursiveType` forces the lazy evaluation that makes `RecursiveType` work. This causes issues if you're trying to have the `exact` be part of the recursion. For example, this fails because the function runs before `T` is defined:
```
const T = t.exact(t.recursion('T', () => t.partial({ rec: T })))
```

I fixed this by having `exact` delay its evaluation of `props` until forced by someone calling `validate` or `encode` on the result. I added some tests with a few more examples of things that didn't work before this pullreq.


Also, I bumped the version to 2.1.0 since I needed an `@since` for the new types.
## ðŸš€ Feature request

### Current Behavior

We get an error that describes the error with respect to the type

### Desired Behavior

Given a stringified version of the input, provide a line/column position  to allow us to provide "syntax error highlighting"

### Suggested Solution

An optional flag to include a line/column

The flag might have params for the whitespace assumed for the stringified input

### Who does this impact? Who is this for?

People who are using io-ts to validate JSON input fields


Sorry if this does not fit the exact issue type format.

I'm struggling to find a way to cleanly use a type that is built from an io-ts definition which respects the nature of the way io-ts works where it WILL allow additional properties, but will simply ignore them (or strip them, if `exact` is used). Especially when it comes to more deeply nested structures.

For example we have some database entities, which almost totally match what we define in our io-ts contracts, however they do have some additional properties. We want to be able to emit these entities as validated by io-ts, however we get pushback from the interfaces built with io-ts if those additional properties are present (despite that not being the actual behavior of io-ts itself.

Any suggestions or examples you all have that could get me a type which more closely matches how io-ts decode works?
## ðŸ“– Documentation

Hi, I'm revisiting io-ts after being away for a while. I'm experimenting with it in an express app and I'm not sure of the best code style approach. Here's an example:

```ts
import {Router} from 'express'
import ash from 'express-async-handler'
import {isLeft} from 'fp-ts/lib/Either'
import * as t from 'io-ts'

const ID = t.brand(
	t.number,
	(i: any): i is t.Branded<number, {readonly ID: unique symbol}> =>
		Number.isSafeInteger(i) && i >= 1,
	'ID'
)

type ID = t.TypeOf<typeof ID>

const router = Router()

router.get('/:id', ash(async (req, res) => {
	const idResult = ID.decode(Number(req.params.id))
	if (isLeft(idResult)) {
		return res.status(HttpStatus.BAD_REQUEST).json({
			message: 'Invalid User ID'
		})
	}
	const id = idResult.right
	const userResult = await getUserByID(id)
	return isRight(userResult)
		? res.json(userResult.right)
		: res.status(HttpStatus.NOT_FOUND).json({
			message: 'User not found for this ID'
		})
}))
```

I looked at using `pipe` and `fold`, but the code seems to get very verbose and very indented. I also needed to use async callbacks... I wasn't sure if errors would be caught properly by Express. Is there a better way to write this?
