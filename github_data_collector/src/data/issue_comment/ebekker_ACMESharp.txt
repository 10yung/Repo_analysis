Hi since let's encrypt went to acme v2 the registration does not work and I get this error: 

**New-ACMERegistration : Account creation on ACMEv1 is disabled. Please upgrade your ACME client to a version that
supports ACMEv2 / RFC 8555. See https://community.letsencrypt.org/t/end-of-life-plan-for-acmev1/88430 for details.**

Any idea if there is another method to registre using ACMe v2?
Hi I've been trying to automate the renewal of my ADFS certificate using a script from [https://github.com/jeremymcgee73/PowershellScripts/blob/master/New-ADFSLetsEncryptCert/New-ADFSLetsEncryptCert.ps1](url) 
But the issue I have is that I dont seem to have any DNS handlers I just have 1 and thats the manual one.
`PS C:\Scripts> Get-ACMEChallengeHandlerProfile -ListChallengeHandlers
manual`

i have done the following 
```pwsh
Install-Module -Name ACMESharp.Providers.DNSMadeEasy
Enable-ACMEExtensionModule ACMESharp.Providers.DNSMadeEasy
import-module ACMESharp.Providers.DNSMadeEasy `
```
But i still cant get the list to show DNSME in the list.

Can anyone help i have the following version installed on a Windows server 2016 instance
`PS C:\Scripts> Get-Module ACMESharp | select Version

Version
-------
0.9.1.326`

Thanks

Simon
I made a mistake in #369 which meant that the [documentation](https://pkisharp.github.io/ACMESharp-docs/ext_docs/installers/iis.html) would have reported KeepExistingSslFlags as Force.
This is now corrected.

Also amended indents to use tabs instead of spaces, so my changes line up when viewed in GitHub.


## Environment
OS: Windows 2012 R2
Powershell: 5.1
Webserver: IIS

## Description

Trying to automate my IIS server certificate using this ACME client. I followed the [docs](https://pkisharp.github.io/ACMESharp-docs/Quick-Start.html) (including all the validation steps) up to the command `Complete-ACMEChallenge`:

### The Exact Command

```
Complete-ACMEChallenge -IdentifierRef portal -ChallengeType http-01 -Handler iis -HandlerParameters @{WebSiteRef = 'Portal'}
```

### The Error

```
Complete-ACMEChallenge : unresolved site for given site reference
At line:1 char:1
+ Complete-ACMEChallenge -IdentifierRef portal -ChallengeType http-01 - ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Complete-ACMEChallenge], InvalidOperationException
    + FullyQualifiedErrorId : System.InvalidOperationException,ACMESharp.POSH.CompleteChallenge
```


Looks like the `iis` handler can't find my IIS site `Portal` but if I do `Get-Website` I get the following:

```
Name             ID   State      Physical Path                  Bindings
----             --   -----      -------------                  --------
Portal           2    Started    C:\inetpub\wwwroot             https *:443: sslFlags=0
```

Any idea what am I doing wrong ?
We are using ACME sharp for generating Let's encrypt certificate. We are trying to use some kind of security vulnerability check for our code and we found this  'BouncyCastle.Crypto-1.7.4137.9688.dll'
have some time of vulnerability in it. So it could be nice if this can be updated to 1.8.
I am trying to implement an auto-renewal cert on my Azure Application Gateway using the info from the blog post below:

[https://intelequia.com/blog/post/1012/automating-azure-application-gateway-ssl-certificate-renewals-with-let-s-encrypt-and-azure-automation](url)

When trying to implement the actual auto-renewal piece which is done using an Azure Automation Runbook (PowerShell), I ran into an issue. I tried using the Runbook as is and while the test run `Completed` it actually failed to do the job. In an effort to figure out why it had failed, I copied the Runbook locally and stepped thru the code a section at a time. Below is the block of code that I worked thru:

    Initialize-ACMEVault
    New-ACMERegistration -Contacts mailto:$EmailAddress -AcceptTos
    $AliasDns = "certificateAlias"
    New-ACMEIdentifier -Dns $domain -Alias $AliasDns
    (Complete-ACMEChallenge $AliasDns -ChallengeType http-01 -Handler manual).Challenge
    $http01 = (Update-ACMEIdentifier $AliasDns -ChallengeType http-01).Challenges | Where- Object {$_.Type -eq "http-01"}
    
    # Add file blob to check DNS
    $tmpPath = $env:TEMP + "\"
    $pfxfile = $tmpPath + "certificate.pfx"
    $FileContentStrIndex = $http01.HandlerHandleMessage.IndexOf("File Content:")
    $FileContentSegments = $http01.HandlerHandleMessage.Substring($FileContentStrIndex + 15).Split(".")
    $FileContentSegments[1] = $FileContentSegments[1].Substring(0, 
    $FileContentSegments[1].IndexOf("]"))
    $filePath = $tmpPath + $FileContentSegments[0]
    $fileContent = $FileContentSegments[0] + "." + $FileContentSegments[1]
    Set-Content -Value $fileContent -Path $filePath
    
    $blobName = ".well-known\acme-challenge\" + $FileContentSegments[0]
    $storageAccount = Get-AzureRmStorageAccount -ResourceGroupName 
    $STResourceGroupName -Name $storageName
    $ctx = $storageAccount.Context
    set-azurestorageblobcontent -File $filePath -Container "public" -Context $ctx -Blob $blobName
    
    Submit-ACMEChallenge $AliasDns -ChallengeType http-01 -Force
    Update-ACMEIdentifier $AliasDns

When I ran the last line, the resultant output showed a `Status` of `invalid`. Looking thru the code, I checked to make sure the file did get created and uploaded to the Azure Storage Account. I also checked that I could access the file from a browser using the URL that LE would use. The only thing I though was maybe the file was not in ASCII format and that was causing the issue. Being a newbie to LE and ACME...I tried to re-create the file ensuing it was in ASCII format and re-run the `Update-ACMEIdentifier` line again. Doing that I learned that once an Identifier goes `invalid`...it's lifespan is over and I need to start over. I just don't know how to start over from here. When I try to run the `New-ACMEIdentifier` line again...it give me the error `An item with the same key has already been added`.

For additional information, below is an image of the error thrown when I tested the Runbook using the Automation Account:

![image](https://user-images.githubusercontent.com/16844071/55832741-33d2b100-5ae4-11e9-801c-0685ab459cec.png)

I've been following the [quickstart guide](https://pkisharp.github.io/ACMESharp-docs/Quick-Start).

All works fine until I get to the complete-challenge step:

PS` C:\vault2> Complete-ACMEChallenge -IdentifierRef home -ChallengeType http-01 -Handler iis -HandlerParameters @{ WebSiteRef = 'MyExampleSite' }
Complete-ACMEChallenge : Retrieving the COM class factory for component with CLSID
{2B72133B-3F5B-4602-8952-803546CE3344} failed due to the following error: 80040154 Class not registered (Exception
from HRESULT: 0x80040154 (REGDB_E_CLASSNOTREG)).
At line:1 char:1
+ Complete-ACMEChallenge -IdentifierRef home -ChallengeType http-01 -Ha ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Complete-ACMEChallenge], COMException
    + FullyQualifiedErrorId : System.Runtime.InteropServices.COMException,ACMESharp.POSH.CompleteChallenge

Now, having no experience with powershell this is more than a little hard to debug.  And nowhere in the user guide is a problem like this mentioned.  Google seems to think that either a component is missing or unregistered.

I'd like some help with this issue, but even more than that the error output of this and all the acmesharp programs could really use work.
When getting a certificate I have tried lowercase and uppercase 
e.g.
`New-ACMEIdentifier -Dns myserver.example.com -Alias dns1`
`New-ACMEIdentifier -Dns MYSERVER.EXAMPLE.COM -Alias dns2`

When I download the certificate it is always lowercase

I've tried adding dns2 as an alternative, but the certificate issued still has lowercase.

You probably wonder why I care about case. We are using the certificate for remote desktop services (RDS). When you setup RDS it always capitalizes the FQDN's. When you try to remote the server it tries to confirm if the remote computer is the same as the certificate. If the case is not the same you get a warning.

Is there anyway to get the certificate issued to an all upppercase FQDN?
https://pkisharp.github.io/ACMESharp-docs/User-Guide.html

Indicates that the ACME Vault is to be initialized with the function `Initialize-ACMESharp` which PowerShell complains doesn't exist. After some googling around and head scratching I discover the quick start guide lists a different function `Initialize-ACMEVault`. That works and I was able to continue setting up ACMESharp. We get the doc fixed?
When using Install-Certificate, and where fresh bindings ARE created, the SslFlags are not set. This results in a binding being created without the "Require Server Name Indication" checkbox set.

On a system that hosts multiple websites, this is a disaster, because if you then subsequently Install-Certificate into a new site, both of these non-SNI bindings get allocated the new certificate. Obviously this breaks websites if their SslFlags aren't right.

If you look in the code for IisHelper, you can see that the Add for the binding uses a 3 parameter overload, but I have read something that suggests that there is a 4 parameter overload that exists in libraries that come with later windows OS distributions. The UpdateBinding function in the helper looks like it would set the appropriate flags but damage to the server would already have been done.

Regards,

Mark