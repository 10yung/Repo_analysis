I've copied and pasted the wrong syntax multiple times throughout years wondering why it doesn't work.
Nobody should waste time due to a typo :)
I've been working on an automated lint error fixer. Basically it takes the output from Coffeelint and programmatically fixes the errors when possible (e.g. for errors like no_unnecessary_fat_arrows where the intent is obvious and the fix is simple).

This change enables the automated fixer, which relies on this fine-grain error location data. I also add 'expected' and 'actual' indentation information, which is useful in fixing indentation errors.

I had to add location manually to each AST rule, since the rule itself is responsible for recursing into the AST. On the other hand, we can inject location data for all token based linters in the lexical_linter.coffee file.

I could create a separate pull request for my fixer script, which currently supports fixes for the following error types:
- indentation
- no_trailing_whitespace
- no_trailing_semicolons
- no_unnecessary_double_quotes
- space_operators
- spacing_after_comma
- colon_assignment_spacing
- no_unnecessary_fat_arrows
- arrow_spacing

Hello,

I noticed that the “; context: …” string printed by the `checkstyle` reporter might not list a context, which can make the error messages look awkward.

e.g., error messages like this will be printed:

```
Line contains tab indentation; context: 
```

Is there a reason “; context: ” is always printed there?  It made me think that the tool was broken at first.

Assuming that string isn’t serving a purpose when it’s blank, this PR removes it in that case.

Also, can this please be backported to `coffeelint@1` and published under `1.16.3` branched from the last `@1` release?  Our projects still use CoffeeScript 1 and `coffeelint@2` seems to have a rough time with our files because of that, so I would need the change deployed on version 1 in order to use it via the usual NPM channel.

Thanks,
Jackson
https://downforeveryoneorjustme.com/www.coffeelint.org
example code that hangs the browser tab on http://www.coffeelint.org/:
```coffee
###
  test
```

The no_throwing_strings rule does not trigger when using round brackets.

Consider the following code:
```coffeescript
test ->
  throw 'moo'  # Lint fails (correct)
```
```coffeescript
test ->
  throw('moo')  # Lint passes (incorrect)
```
```coffeescript
test ->
  throw ('moo')  # Lint passes (incorrect)
```

This is strange because the resulting javascript is the same:
```js
test(function() {
  throw 'moo';
});
```
### 1. Summary

It would be nice, if coffeelint will support YAML configuration files. `coffeelint.yaml` for example.

### 2. Argumentation

I think, JSON — bad idea. Main reason — I can't write comments, why I use those or other options. Another arguments:

+ [**JSON as configuration files: please don't**](https://arp242.net/weblog/json_as_configuration_files-_please_dont)

See also [**related issue**](https://github.com/DavidAnson/markdownlint/issues/118).

Thanks.
Thank-you so much for Coffee-Lint, I love it!
Just one small request...

The following code gives the "Fat Arrow" warning for "do_it_twice", but this is incorrect.
The function is already bound to the right object.
In fact, the fat arrow cannot be used here at all -- it will break the code!
The linter should detect that a function is being assigned to an object attribute and not suggest using the fat arrow.
```

do_it = -> console.log "doing it..."

my_thing = 

	do_it_once:->
		do_it()

	do_it_twice:->
		@do_it_once()
		@do_it_once()

my_thing.do_it_twice()
```

We have a large coffeescript code base, and had `no_tabs` enabled, but hadn't gotten around to enabling `no_trailing_whitespace`.  I was a bit surprised to learn that there were tabs at the end of lines that coffeelint hadn't caught in the code base.

I see that the `no_tabs` rule is conservative because `no_trailing_whitespace` catches this situation, so feel free to reject.

Thanks for keeping this project going, Shuan!