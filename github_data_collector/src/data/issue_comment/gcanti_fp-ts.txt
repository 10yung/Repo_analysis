## üìñ Documentation

Here https://gcanti.github.io/fp-ts/modules/Option.ts.html it's not obvious, how Option helps with unsafe array or object index access. The missing piece is usage of lookup function, which returns Option, which forces developers to handle both cases. The more rare case is `const foo: A | null = null` which TypeScript can fail to correctly recognize as nullable as well. I don't have a simple example of that, but it just happens to me. The rule of thumb is not using index access nor null nor undefined, which could be mentioned as well.
## üìñ Question

Once some custom data type are defined,

```
declare module 'fp-ts/lib/HKT' {
  interface URItoKind<A> {
    EitherThrowableOr: EitherThrowableOr<A>
    Test: Test<A>
  }
}
```

Those are permanently added to `URItoKind<A>` during the project.

That means `URIS` namespace is polluted.

Then I cannot use the same name as I have already defined for other data types.

(Kind of intrinsic data types, such as `EitherThrowableOr`, are likely to be reused, but `Test` are not.)

What if someone try to use `Test` again for another data type that he define?

So I think the name `Test` is not proper for custom data type.

## Suggestion

To avoid this URI name collision, a naming convention for data types is needed.

Let me hear your wisdom.

Thank you.
## üêõ Bug report

### Current Behavior

[Reduced test case](https://github.com/OliverJAsh/tree-shaking-test/tree/fp-ts-ord-rollup)

`src/index.js`:

```ts
import { max } from "fp-ts/es6/Ord";
console.log(max);
```

`rollup.config.js`:

```js
import resolve from "@rollup/plugin-node-resolve";

export default {
  input: "src/index.js",
  output: {
    file: "target/rollup.js",
    format: "cjs"
  },
  plugins: [resolve()]
};
```

`package.json`:

```json
{
  "dependencies": {
    "fp-ts": "^2.0.0",
    "@rollup/plugin-node-resolve": "^7.0.0",
    "rollup": "^1.29.0"
  }
}
```

Then run `rollup -c rollup.config.js`.

### Expected behavior

The output of rollup should not include lots of unused code:

```js
'use strict';

/**
 * The `Ord` type class represents types which support comparisons with a _total order_.
 *
 * Instances should satisfy the laws of total orderings:
 *
 * 1. Reflexivity: `S.compare(a, a) <= 0`
 * 2. Antisymmetry: if `S.compare(a, b) <= 0` and `S.compare(b, a) <= 0` then `a <-> b`
 * 3. Transitivity: if `S.compare(a, b) <= 0` and `S.compare(b, c) <= 0` then `S.compare(a, c) <= 0`
 *
 * See [Getting started with fp-ts: Ord](https://dev.to/gcanti/getting-started-with-fp-ts-ord-5f1e)
 *
 * @since 2.0.0
 */
/**
 * Take the maximum of two values. If they are considered equal, the first argument is chosen
 *
 * @since 2.0.0
 */
function max(O) {
    return function (x, y) { return (O.compare(x, y) === -1 ? y : x); };
}

console.log(max);
```

### Actual behaviour

The output of rollup includes lots of unused code:

<details>
<summary>Show code snippet</summary>

```js
'use strict';

/**
 * @since 2.0.0
 */
/**
 * @since 2.0.0
 */
function identity(a) {
    return a;
}

var isFunctor = function (I) { return typeof I.map === 'function'; };
var isContravariant = function (I) { return typeof I.contramap === 'function'; };
var isFunctorWithIndex = function (I) { return typeof I.mapWithIndex === 'function'; };
var isApply = function (I) { return typeof I.ap === 'function'; };
var isChain = function (I) { return typeof I.chain === 'function'; };
var isBifunctor = function (I) { return typeof I.bimap === 'function'; };
var isExtend = function (I) { return typeof I.extend === 'function'; };
var isFoldable = function (I) { return typeof I.reduce === 'function'; };
var isFoldableWithIndex = function (I) { return typeof I.reduceWithIndex === 'function'; };
var isAlt = function (I) { return typeof I.alt === 'function'; };
var isCompactable = function (I) { return typeof I.compact === 'function'; };
var isFilterable = function (I) { return typeof I.filter === 'function'; };
var isFilterableWithIndex = function (I) {
    return typeof I.filterWithIndex === 'function';
};
var isProfunctor = function (I) { return typeof I.promap === 'function'; };
var isSemigroupoid = function (I) { return typeof I.compose === 'function'; };
var isMonadThrow = function (I) { return typeof I.throwError === 'function'; };
function pipeable(I) {
    var r = {};
    if (isFunctor(I)) {
        var map = function (f) { return function (fa) { return I.map(fa, f); }; };
        r.map = map;
    }
    if (isContravariant(I)) {
        var contramap = function (f) { return function (fa) { return I.contramap(fa, f); }; };
        r.contramap = contramap;
    }
    if (isFunctorWithIndex(I)) {
        var mapWithIndex = function (f) { return function (fa) { return I.mapWithIndex(fa, f); }; };
        r.mapWithIndex = mapWithIndex;
    }
    if (isApply(I)) {
        var ap = function (fa) { return function (fab) { return I.ap(fab, fa); }; };
        var apFirst = function (fb) { return function (fa) {
            return I.ap(I.map(fa, function (a) { return function () { return a; }; }), fb);
        }; };
        r.ap = ap;
        r.apFirst = apFirst;
        r.apSecond = function (fb) { return function (fa) {
            return I.ap(I.map(fa, function () { return function (b) { return b; }; }), fb);
        }; };
    }
    if (isChain(I)) {
        var chain = function (f) { return function (ma) { return I.chain(ma, f); }; };
        var chainFirst = function (f) { return function (ma) { return I.chain(ma, function (a) { return I.map(f(a), function () { return a; }); }); }; };
        var flatten = function (mma) { return I.chain(mma, identity); };
        r.chain = chain;
        r.chainFirst = chainFirst;
        r.flatten = flatten;
    }
    if (isBifunctor(I)) {
        var bimap = function (f, g) { return function (fa) { return I.bimap(fa, f, g); }; };
        var mapLeft = function (f) { return function (fa) { return I.mapLeft(fa, f); }; };
        r.bimap = bimap;
        r.mapLeft = mapLeft;
    }
    if (isExtend(I)) {
        var extend = function (f) { return function (wa) { return I.extend(wa, f); }; };
        var duplicate = function (wa) { return I.extend(wa, identity); };
        r.extend = extend;
        r.duplicate = duplicate;
    }
    if (isFoldable(I)) {
        var reduce = function (b, f) { return function (fa) { return I.reduce(fa, b, f); }; };
        var foldMap = function (M) {
            var foldMapM = I.foldMap(M);
            return function (f) { return function (fa) { return foldMapM(fa, f); }; };
        };
        var reduceRight = function (b, f) { return function (fa) { return I.reduceRight(fa, b, f); }; };
        r.reduce = reduce;
        r.foldMap = foldMap;
        r.reduceRight = reduceRight;
    }
    if (isFoldableWithIndex(I)) {
        var reduceWithIndex = function (b, f) { return function (fa) {
            return I.reduceWithIndex(fa, b, f);
        }; };
        var foldMapWithIndex = function (M) {
            var foldMapM = I.foldMapWithIndex(M);
            return function (f) { return function (fa) { return foldMapM(fa, f); }; };
        };
        var reduceRightWithIndex = function (b, f) { return function (fa) {
            return I.reduceRightWithIndex(fa, b, f);
        }; };
        r.reduceWithIndex = reduceWithIndex;
        r.foldMapWithIndex = foldMapWithIndex;
        r.reduceRightWithIndex = reduceRightWithIndex;
    }
    if (isAlt(I)) {
        var alt = function (that) { return function (fa) { return I.alt(fa, that); }; };
        r.alt = alt;
    }
    if (isCompactable(I)) {
        r.compact = I.compact;
        r.separate = I.separate;
    }
    if (isFilterable(I)) {
        var filter = function (predicate) { return function (fa) {
            return I.filter(fa, predicate);
        }; };
        var filterMap = function (f) { return function (fa) { return I.filterMap(fa, f); }; };
        var partition = function (predicate) { return function (fa) {
            return I.partition(fa, predicate);
        }; };
        var partitionMap = function (f) { return function (fa) { return I.partitionMap(fa, f); }; };
        r.filter = filter;
        r.filterMap = filterMap;
        r.partition = partition;
        r.partitionMap = partitionMap;
    }
    if (isFilterableWithIndex(I)) {
        var filterWithIndex = function (predicateWithIndex) { return function (fa) { return I.filterWithIndex(fa, predicateWithIndex); }; };
        var filterMapWithIndex = function (f) { return function (fa) {
            return I.filterMapWithIndex(fa, f);
        }; };
        var partitionWithIndex = function (predicateWithIndex) { return function (fa) { return I.partitionWithIndex(fa, predicateWithIndex); }; };
        var partitionMapWithIndex = function (f) { return function (fa) {
            return I.partitionMapWithIndex(fa, f);
        }; };
        r.filterWithIndex = filterWithIndex;
        r.filterMapWithIndex = filterMapWithIndex;
        r.partitionWithIndex = partitionWithIndex;
        r.partitionMapWithIndex = partitionMapWithIndex;
    }
    if (isProfunctor(I)) {
        var promap = function (f, g) { return function (fa) { return I.promap(fa, f, g); }; };
        r.promap = promap;
    }
    if (isSemigroupoid(I)) {
        var compose = function (that) { return function (fa) { return I.compose(fa, that); }; };
        r.compose = compose;
    }
    if (isMonadThrow(I)) {
        var fromOption = function (onNone) { return function (ma) {
            return ma._tag === 'None' ? I.throwError(onNone()) : I.of(ma.value);
        }; };
        var fromEither = function (ma) {
            return ma._tag === 'Left' ? I.throwError(ma.left) : I.of(ma.right);
        };
        var fromPredicate = function (predicate, onFalse) { return function (a) { return (predicate(a) ? I.of(a) : I.throwError(onFalse(a))); }; };
        var filterOrElse = function (predicate, onFalse) { return function (ma) { return I.chain(ma, function (a) { return (predicate(a) ? I.of(a) : I.throwError(onFalse(a))); }); }; };
        r.fromOption = fromOption;
        r.fromEither = fromEither;
        r.fromPredicate = fromPredicate;
        r.filterOrElse = filterOrElse;
    }
    return r;
}

/**
 * The `Ord` type class represents types which support comparisons with a _total order_.
 *
 * Instances should satisfy the laws of total orderings:
 *
 * 1. Reflexivity: `S.compare(a, a) <= 0`
 * 2. Antisymmetry: if `S.compare(a, b) <= 0` and `S.compare(b, a) <= 0` then `a <-> b`
 * 3. Transitivity: if `S.compare(a, b) <= 0` and `S.compare(b, c) <= 0` then `S.compare(a, c) <= 0`
 *
 * See [Getting started with fp-ts: Ord](https://dev.to/gcanti/getting-started-with-fp-ts-ord-5f1e)
 *
 * @since 2.0.0
 */
/**
 * @since 2.0.0
 */
var URI = 'Ord';
// default compare for primitive types
var compare = function (x, y) {
    return x < y ? -1 : x > y ? 1 : 0;
};
function strictEqual(a, b) {
    return a === b;
}
/**
 * @since 2.0.0
 */
var ordNumber = {
    equals: strictEqual,
    compare: compare
};
/**
 * Take the maximum of two values. If they are considered equal, the first argument is chosen
 *
 * @since 2.0.0
 */
function max(O) {
    return function (x, y) { return (O.compare(x, y) === -1 ? y : x); };
}
/**
 * @since 2.0.0
 */
function fromCompare(compare) {
    var optimizedCompare = function (x, y) { return (x === y ? 0 : compare(x, y)); };
    return {
        equals: function (x, y) { return optimizedCompare(x, y) === 0; },
        compare: optimizedCompare
    };
}
/**
 * @since 2.0.0
 */
var ord = {
    URI: URI,
    contramap: function (fa, f) { return fromCompare(function (x, y) { return fa.compare(f(x), f(y)); }); }
};
var contramap = pipeable(ord).contramap;
/**
 * @since 2.0.0
 */
var ordDate = ord.contramap(ordNumber, function (date) { return date.valueOf(); });

console.log(max);
```
</details>

### Reproducible example

### Suggested solution(s)

Add annotations/comments to indicate no side effects, e.g. in `fp-ts/es6/Ord.js`:

```diff
-var contramap = pipeable(ord).contramap;
+var pipeableResult = /*#__PURE__*/pipeable(ord);
+var contramap = pipeableResult.contramap;
 export { 
 /**
  * @since 2.0.0
  */
 contramap };
 /**
  * @since 2.0.0
  */
-export var ordDate = ord.contramap(ordNumber, function (date) { return date.valueOf(); });
+export var ordDate = /*#__PURE__*/ord.contramap(ordNumber, function (date) { return date.valueOf(); });
```

This fixes the issue when using Rollup. [Reduced test case](https://rollupjs.org/repl/?version=1.29.0&shareable=JTdCJTIybW9kdWxlcyUyMiUzQSU1QiU3QiUyMm5hbWUlMjIlM0ElMjJtYWluLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMmltcG9ydCUyMCU3QiUyMGlkZW50aXR5JTIwJTdEJTIwZnJvbSUyMCU1QyUyMi4lMkZ0ZXN0JTVDJTIyJTNCJTVDbmNvbnNvbGUubG9nKGlkZW50aXR5KSUzQiUyMiUyQyUyMmlzRW50cnklMjIlM0F0cnVlJTdEJTJDJTdCJTIybmFtZSUyMiUzQSUyMnRlc3QuanMlMjIlMkMlMjJjb2RlJTIyJTNBJTIyZXhwb3J0JTIwY29uc3QlMjBpZGVudGl0eSUyMCUzRCUyMHglMjAlM0QlM0UlMjB4JTNCJTVDbiU1Q25jb25zdCUyMG15RnVuY3Rpb24lMjAlM0QlMjBJJTIwJTNEJTNFJTIwJTdCJTVDbiUyMCUyMGNvbnN0JTIwciUyMCUzRCUyMCU3QiU3RCUzQiU1Q24lMjAlMjBpZiUyMCh0eXBlb2YlMjBJLm1hcCUyMCUzRCUzRCUzRCUyMCU1QyUyMmZ1bmN0aW9uJTVDJTIyKSUyMCU3QiU1Q24lMjAlMjAlMjAlMjByLm1hcCUyMCUzRCUyMCgpJTIwJTNEJTNFJTIwJTdCJTdEJTNCJTVDbiUyMCUyMCU3RCU1Q24lMjAlMjByZXR1cm4lMjByJTNCJTVDbiU3RCUzQiU1Q24lNUNuY29uc3QlMjByZXN1bHQlMjAlM0QlMjAlMkYqJTIzX19QVVJFX18qJTJGbXlGdW5jdGlvbiglN0IlN0QpJTNCJTVDbiUyMiUyQyUyMmlzRW50cnklMjIlM0FmYWxzZSU3RCU1RCUyQyUyMm9wdGlvbnMlMjIlM0ElN0IlMjJmb3JtYXQlMjIlM0ElMjJjanMlMjIlMkMlMjJuYW1lJTIyJTNBJTIybXlCdW5kbGUlMjIlMkMlMjJhbWQlMjIlM0ElN0IlMjJpZCUyMiUzQSUyMiUyMiU3RCUyQyUyMmdsb2JhbHMlMjIlM0ElN0IlN0QlN0QlMkMlMjJleGFtcGxlJTIyJTNBbnVsbCU3RA==).

Note this does not fix the issue with webpack, for some reason: https://github.com/webpack/webpack/issues/10253

### Additional context

<!-- Add any other context about the problem here.  -->

### Your environment

Which versions of fp-ts are affected by this issue? Did this work in previous versions of fp-ts?

<!-- PLEASE FILL THIS OUT -->

| Software   | Version(s) |
| ---------- | ---------- |
| fp-ts      |  See above          |
| TypeScript |  See above          |

This PR will add the following modules:

- `ReadonlyArray` (done)
- `ReadonlyNonEmptyArray` (done)
- `ReadonlySet` (done)
- `ReadonlyMap` (done)
- `ReadonlyRecord` (done)
- `ReadonlyTuple` (done)
- other?

The goal is to obtain drop-in replacements for the mutable counterparts (with some exceptions, see the notes below).

Notes:

- `ReadonlyArray`
  - didn't port `copy`, seems useless
- `ReadonlyNonEmptyArray`
  - didn't port `copy`, seems useless
  - renamed `fromArray` to `fromNonEmptyArray`
- `Semigroup`
  - changed `fold`'s signature in order to support readonly arrays
- `Monoid`
  - changed `fold`'s signature in order to support readonly arrays
- `ReadonlyMap`
  - renamed `toArray` to `toReadonlyArray`
- `ReadonlyRecord`
  - renamed `toArray` to `toReadonlyArray`
- `ReadonlySet`
  - renamed `toArray` to `toReadonlyArray`  
  - renamed `subset` to `isSubset`

## üöÄ Feature request

I'm sorry I'm beginner.

To get familiar with fp-ts,
I'm trying to convert and rewrite some tagless-final examples written in Scala into one using fp-ts.
(Here is an example: https://github.com/amitayh/functional-testing-tagless-final)

I have not succeed with it yet. Some features in fp-ts are still confusing to me.

### Current Behavior

- In the Document, `Modules` only provide APIs. Just few of them provide usage examples.
- Describing how to write the tagless-final style, only with `fp-to-the-max-ii.ts` is not enough.

### Desired Behavior

- Providing usage examples in the document will be very helpful to beginners.
- Provide more usage examples.

### Suggested Solution

- Add kind of `Document / Recipes / Migrate from Scala with cats`
- Provide more guide and examples of how to use HKT, Kind<>. (No paper, no theory.)

### Who does this impact? Who is this for?

For beginners who just get interested in fp-ts.

### Describe alternatives you've considered

> Add usage example to each item in the modules.

#### getReaderM (function)

Add explanatory description here...

##### Signature

`export function getReaderM<M>(M: Monad<M>): ReaderM<M> { ... }`

##### Usage

```
import * as RT from 'fp-ts/lib/ReaderT'
import * as R from 'fp-ts/lib/Reader'

// Describe what it is doing...
RT.getReaderM(R.Reader).fromReader(env => ...)
```

### Additional context

N/A

### Your environment

| Software | Version(s) |
| --- | --- |
| fp-ts | 2.3.1 |
| TypeScript | 3.7.4 |

## üêõ Bug report

### Current Behavior

The following file, when processed by a bundler (rollup, webpack etc), will include the fp-ts Either module twice, once the es6 version and once the lib version.

```
import { right } from "fp-ts/es6/Either";
import { _right } from "monocle-ts/es6/Either";

console.log(right(42), _right(right(42)));
```

Why? Because the Either module from monocle imports `fp-ts/lib/Either`, even if itself was imported through `monocle-ts/es6/Either`.

### Expected behavior

The fp-ts Either module should appear only once in the output.

### Reproducible example

Save the above example as `input.js`, and bundle using the following rollup config:

```
import commonjs from "rollup-plugin-commonjs";
import nodeResolve from "rollup-plugin-node-resolve";

export default {
  input: "input.js",
  output: { file: "output.js", format: "cjs" },
  plugins: [nodeResolve({}), commonjs({})]
};
```

The resulting file will be 144KB, and contain a lot of unnecessary code because rollup can't threeshake commonjs modules.

If I edit the monocle-ts package contents to always import from fp-ts/es6/ instead of fp-ts/lib/, then the size drops to 50K

### Suggested solution(s)

The only solution I'm aware of is this: Every module that the user is expected to import in their code has to be a folder, and that folder must contain a package.json which provides pointers to the entry points (`main` being the commonjs entry point, and `module` being the ES6 module entry point).

In other words, in any import statement `import ‚Ä¶ from "SOMEMODULE"`, the "SOMEMODULE" must refer to a folder with its own package.json, ie. `node_modules/SOMEMODULE/package.json`. If SOMEMODULE contains path separators, same applies, eg. `import ‚Ä¶ from 'fp-ts/Either'` -> `node_modules/fp-ts/Either/package.json`.


### Additional context

The `@material-ui/core` package solves this in the way I described. You can have a look at the contents of their package here: https://unpkg.com/browse/@material-ui/core@4.8.0/.

Every direct subfolder of this package is allowed to be imported. As you drill down to the subfolders, you'll see a package.json en every one (eg. https://unpkg.com/browse/@material-ui/core@4.8.0/Avatar/package.json).

There are a few gotchas around tree shaking, so it would be useful to document these somewhere. This applies to other libraries in the fp-ts ecosystem, such as monocle-ts.

Below is my understanding. Is this correct? If so, perhaps we could add this to the docs.

Tree shaking works out of the box, automatically thanks to the `module` field in `package.json`.

```ts
import { option } from 'fp-ts';
```

This will end up importing `fp-ts/es6/index.js` (rather than `fp-ts/lib/index.js`).

Caveat: when importing sub modules however, you must remember to import from the `es6` folder:

```diff
-import * as O from 'fp-ts/lib/Option';
+import * as O from 'fp-ts/es6/Option';
```

Caveat: [libraries such as io-ts import from the `lib` folder](https://github.com/gcanti/io-ts/blob/03aa922ce76c80e67a36622cfb53744f33540687/src/index.ts#L1), not the `es6` folder. This means that tree shaking will not be able to work, for example when using the following import:

```ts
import * as t from 'io-ts';
```

The solution is to use [webpack's `resolve.alias` configuration](https://webpack.js.org/configuration/resolve/#resolvealias):

```js
module.exports = {
  //...
  resolve: {
    alias: {
      'fp-ts/lib': 'fp-ts/es6'
    }
  }
};
```

In the case of using other libraries such as fp-ts-rxjs, it may also be necessary to create aliases for them too.
## üöÄ Feature request

### Current Behavior

At the moment we need to write a ton of overloading boilerplate for HKT-generic function:
```typescript
import { Functor, Functor1, Functor2, Functor2C, Functor3, Functor4 } from 'fp-ts/lib/Functor';
import { HKT, Kind, Kind2, Kind3, Kind4, URIS, URIS2, URIS3, URIS4 } from 'fp-ts/lib/HKT';

export function mapTwice<F extends URIS4>(
	F: Functor4<F>,
): <S, R, E, A>(fa: Kind4<F, S, R, E, A>, f: (a: A) => A) => Kind4<F, S, R, E, A>;
export function mapTwice<F extends URIS3>(
	F: Functor3<F>,
): <R, E, A>(fa: Kind3<F, R, E, A>, f: (a: A) => A) => Kind3<F, R, E, A>;
export function mapTwice<F extends URIS2>(F: Functor2<F>): <E, A>(fa: Kind2<F, E, A>, f: (a: A) => A) => Kind2<F, E, A>;
export function mapTwice<F extends URIS2, E>(
	F: Functor2C<F, E>,
): <A>(fa: Kind2<F, E, A>, f: (a: A) => A) => Kind2<F, E, A>;
export function mapTwice<F extends URIS>(F: Functor1<F>): <A>(fa: Kind<F, A>, f: (a: A) => A) => Kind<F, A>;
export function mapTwice<F>(F: Functor<F>): <A>(fa: HKT<F, A>, f: (a: A) => A) => HKT<F, A>;
export function mapTwice<F>(F: Functor<F>): <A>(fa: HKT<F, A>, f: (a: A) => A) => HKT<F, A> {
	return (fa, f) => F.map(F.map(fa, f), f);
}
```

Evenmore the signature's missing overloads for missing `Functor3C` and `Functor4C`. And possibly overloads for other constrained functors, not only by the `E` type arg.

That's _ugly_.

### Desired Behavior

We want a clean and concise solution for writing fully generic functions like:
```typescript
export function mapTwice<F extends URIS>(
  F: Functor<F>
): <S, R, E, A>(fa: Kind<F, S, R, E, A>, f: (a: A) => A) => Kind<F, S, R, E, A> {
  return (fa, f) => F.map(F.map(fa, f), f)
}
```
Important thing is that we would also like to automate "currying" of typeclasses (no `*C` names).

### Suggested Solution

I've been playing with fp-ts for a while and got the following:
```typescript
//#region HKT
interface URItoKind<S, R, E, A> {}
type URIS = keyof URItoKind<unknown, unknown, unknown, unknown>
type Kind<URI extends URIS, S, R, E, A> = URI extends URIS ? URItoKind<S, R, E, A>[URI] : never
interface Auto {
  readonly Auto: unique symbol
}
type Or<A, B> = A extends Auto ? B : A
//#endregion

//#region abstract
interface Functor<F extends URIS, FS = Auto, FR = Auto, FE = Auto> {
  readonly URI: F
  readonly map: <S, R, E, A, B>(
    fa: Kind<F, Or<FS, S>, Or<FR, R>, Or<FE, E>, A>,
    f: (a: A) => B
  ) => Kind<F, Or<FS, S>, Or<FR, R>, Or<FE, E>, B>
}
//#endregion

//#region ADT
interface URItoKind<S, R, E, A> {
  Either2: Either<E, A>
}
type Either<E, A> = { tag: 'Left'; left: E } | { tag: 'Right'; right: A }
const functorEither: Functor<'Either2'> = {
  URI: 'Either2',
  map: (fa, f) => (fa.tag === 'Left' ? fa : { tag: 'Right', right: f(fa.right) })
}

interface Semigroup<A> {
  readonly concat: (x: A, y: A) => A
}
function getValidation<E>(S: Semigroup<E>): Functor<'Either2', Auto, Auto, E> {
  return {
    URI: 'Either2',
    map: functorEither.map
  }
}
//#endregion

//#region test
const mapTwice = <F extends URIS, FS, FR, FE>(F: Functor<F, FS, FR, FE>) => <S, R, E, A>(
  fa: Kind<F, Or<FS, S>, Or<FR, R>, Or<FE, E>, A>,
  f: (a: A) => A
): Kind<F, Or<FS, S>, Or<FR, R>, Or<FE, E>, A> => F.map(F.map(fa, f), f)

const semigroupString: Semigroup<string> = {
  concat: (x, y) => x + y
}
const f = (n: string): string => n.toUpperCase()
const test1 = mapTwice(functorEither)({ tag: 'Left', left: '1' }, f) // Ok - Either<string, string>
const test2 = mapTwice(functorEither)({ tag: 'Left', left: 1 }, f) // Ok - Either<number, string>
const v = getValidation(semigroupString)
const test3 = mapTwice(v)({ tag: 'Left', left: '34' }, f) // Ok - Either<string, string>
const test4 = mapTwice(v)({ tag: 'Left', left: 34 }, f) // Error - number is not assignable to string

const test5 = mapTwice(functorEither)({ tag: 'Left', left: Symbol() }, () => '123') // Ok - Either<symbol, string>
const test6 = mapTwice(getValidation(semigroupString))({ tag: 'Left', left: '34' }, f) // Ok - Either<string, string>

const semigroupSymbol: Semigroup<Symbol> = {
  concat: (x, y) => Symbol('concat')
}
const validationSymbol = getValidation(semigroupSymbol)
const test7 = validationSymbol.map({ tag: 'Left', left: Symbol() }, f) // Ok - Either<Symbol, string>
const test8 = validationSymbol.map({ tag: 'Left', left: 'foo' }, f) // Error - string is not assignable to Symbol
const test9 = mapTwice(validationSymbol)({ tag: 'Left', left: Symbol() }, f) // Ok - Either<Symbol, string>
const test10 = mapTwice(validationSymbol)({ tag: 'Left', left: 'foo' }, f) // Error - string is not assignable to Symbol
//#endregion
```

<!-- Suggest a solution that the community/maintainers/you may take to enable the desired behavior  -->

<!-- NOTE: Feature Requests without suggested solutions may not be addressed or treated with the same level of urgency as those that have suggested solutions. -->

### Who does this impact? Who is this for?

All users of `fp-ts` especially library authors.

<!-- Who is this for? All users? TypeScript users? Beginners? Advanced? Yourself? People using X, Y, X, etc.? -->

### Describe alternatives you've considered

None

### Additional context

Described approach means that there's a single dictionary left and a single version of a typeclass. There's no sensible profit in maintaining separate versions like `HKT`, `Kind`, `Kind2`, `Monad`, `MonadC` etc. It also means that a typeclass supports constrained arguments out of the box.

### Your environment

| Software   | Version(s) |
| ---------- | ---------- |
| fp-ts      | 2.2.0      |
| TypeScript | 3.7.2      |

**The problem**

```ts
// example from https://github.com/natefaubion/purescript-checked-exceptions

import * as E from 'fp-ts/lib/Either'
import { pipe } from 'fp-ts/lib/pipeable'

type HttpError = 'HttpError'
declare function get(url: string): E.Either<HttpError, string>
type FsError = 'FsError'
declare function write(path: string, content: string): E.Either<FsError, void>

type Err = HttpError | FsError

const program = pipe(
  get('http://purescript.org'), // error: Type '"HttpError"' is not assignable to type '"FsError"'
  E.chain(content => write('~/purescript.html', content))
)
```

This is because `E.chain` is inferred as

```ts
//                                                                   relevant type here ---v
chain<"FsError", string, void>(f: (a: string) => E.Either<"FsError", void>): (ma: E.Either<"FsError", string>) => E.Either<"FsError", void>
```

**Solutions?**

1) explicit cast

```ts
const writeE1: (path: string, content: string) => E.Either<Err, void> = write

const program1 = pipe(
  get('http://purescript.org'),
  E.chain(content => writeE1('~/purescript.html', content))
)
```

2) explicit `mapLeft`

```ts
const widen = E.mapLeft<Err, Err>(e => e)

const program2 = pipe(
  get('http://purescript.org'),
  E.chain(content =>
    pipe(
      write('~/purescript.html', content),
      widen
    )
  )
)
```

3) lifting with `flow` and `mapLeft`

```ts
import { flow } from 'fp-ts/lib/function'

const writeE2 = flow(
  write,
  widen
)

const program3 = pipe(
  get('http://purescript.org'),
  E.chain(content => writeE2('~/purescript.html', content))
)
```

4) defining a `chain` overload that combines the error types

```ts
const flatMap: <E2, A, B>(
  f: (a: A) => E.Either<E2, B>
) => <E1>(ma: E.Either<E1, A>) => E.Either<E1 | E2, B> = E.chain as any

const program4 = pipe(
  get('http://purescript.org'),
  flatMap(content => write('~/purescript.html', content))
)
```

Others?