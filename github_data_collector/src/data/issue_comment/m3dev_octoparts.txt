Might be neat to try implementing the client as a [Fetch](https://github.com/47deg/fetch) datasource to take advantage of client-side batching, caching, and deduping.
Currently based on 2.6-M5. 2.6 proper should be due out soon.

- [x] Flyway Play 2.6 support ( __causes test failures__ )
  - [x] Fix migration failures
- [x] Kenshoo Metrics 2.6 support (may need to do our own). Currently pending https://github.com/kenshoo/metrics-play/pull/67
- [x] Swagger support (currently completely broken.)
I noticed this project depends on some dead zipkin assets. If interested, I could help guide on how to get onto the maintained codebase. This would include broader features than before (ex alternatives to scribe and json encoding of spans).

Let me know!

I get this intermittently, and only in the vagrant machine (which is naturally slower). I've experienced this before in other projects, and it is due to Scalatest's remarkably low default timeout of 150ms for a Future. I've never found a great solution to this problem other than increasing the scale factor when running tests, but am open to suggestions.

```
[info] RichFutureWithTiming
[info] - should not start measuring too early *** FAILED ***
[info]   A timeout occurred waiting for a future to complete. Queried 11 times, sleeping 15 milliseconds between each query. (RichFutureWithTimingSpec.scala:43)
[info]   org.scalatest.concurrent.Futures$FutureConcept$$anon$1:
[info]   at org.scalatest.concurrent.Futures$FutureConcept$class.tryTryAgain$1(Futures.scala:546)
[info]   at org.scalatest.concurrent.Futures$FutureConcept$class.futureValue(Futures.scala:558)
[info]   at org.scalatest.concurrent.ScalaFutures$$anon$1.futureValue(ScalaFutures.scala:74)
[info]   at org.scalatest.concurrent.Futures$class.whenReady(Futures.scala:684)
[info]   at com.m3.octoparts.future.RichFutureWithTimingSpec.whenReady(RichFutureWithTimingSpec.scala:9)
[info]   at com.m3.octoparts.future.RichFutureWithTimingSpec$$anonfun$1.apply$mcV$sp(RichFutureWithTimingSpec.scala:43)
[info]   at com.m3.octoparts.future.RichFutureWithTimingSpec$$anonfun$1.apply(RichFutureWithTimingSpec.scala:14)
[info]   at com.m3.octoparts.future.RichFutureWithTimingSpec$$anonfun$1.apply(RichFutureWithTimingSpec.scala:14)

... snip ...
```

Currently the main documentation site doesn't have a section talking about how to customise authentication. It should be addressed by adding such a section.

Might make sense to do this after the upgrade to 2.4 since that mechanism is going to change completely.

## Problem

When back-end API developers want to do some integration tests for their application working with other front-end services, they need to set up ALL of them. Having more easy way for such testing can reduces yak-shaving task to set up other systems and also reduces integration errors. 
## Solution

Make Octoparts to use arbitrary HTTP/S proxy which is specified in every PartsRequests
- Extend PartsRequest to have some information about HTTP/S proxy 
  - ex. some Id for Octoparts' proxy definition or hostname:port
- Front end systems should set this information by using HTTP Header which refers proxy information
  - ex: X-Octoparts-Proxy-Id 
- Octoparts will use specified HTTP/S Proxy to call other service providers
- Developer can can change its service host  by proxy's settings (shared proxy for each envirionment set or his local proxy)
- Never enabled on production environment

Large setups of Octoparts with many parts and many settings with widely used API endpoints can lead to erroneous or harmful changes, the length of time and impact of which is hard to ascertain without an auditing trail.

Example:
Local contents is set on an endpoint temporarily to fix an issue, and is accidentally left turned on. It's useful to know: when was this set and by whom, to know the impact, and to get a story of what might have happened.

Might be a good candidate for the use of this: http://clarkdave.net/2015/02/historical-records-with-postgresql-and-temporal-tables-and-sql-2011/

Adding alert mail groups will avoid copy+paste of alert mail per part.

日本語環境下でOctoparts管理画面において、ブラウザの幅が1200px〜1400pxぐらいの時にメニューが2行になり、ページ先頭にあるボタン(ex. スレッドプール設定一覧のスレッドプール設定登録ボタン, キャッシュグループ一覧のキャッシュグループ登録ボタン)を覆い隠してしまう。

It would be nice if Octopart parameters could be registered with default argument values.

Use case: "Accept" header that defaults to "application/json" would be handy.
