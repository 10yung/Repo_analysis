This packages aims to keep the namespace as clean as possible, making it possible to only import functions that will later be used by the user explicitly. This reduces name clashes in the namespace, and keeps the program namepsace tidy rather than messy. Would it be possible to apply to join tidyverse?
I love the import package when it comes to pulling a single function from sometimes very large packages without polluting the namespace.

However, a pretty common use case ([which i'm not the only one facing](https://stackoverflow.com/questions/38296071/remove-or-exclude-one-function-from-imported-package)) is that I'm using a package I like, but it happens to have one function that conflicts with a very important other function.

So, what I would love to have is something like:

`import::from_excluding(nicepackage,conflictingfunction)`

Workarounds exist of course, including creating elaborate orderings of package import statements, but all solutions I've found, including those presented in the link above, seem very inferior to the solution I propose, which I'm kind of hoping would not be a big extension to the import package.
Fixes issue with `import::here`: https://github.com/smbache/import/issues/21
Unfortunately, I don't know exactly which change corresponds to this behavior, but on the current github version (nominally 1.1.1), this fails:
```R
 > tempf <- function() { import::here("%>%", .from = "magrittr"); 1:10 %>% rev }
 > tempf()
 Error in 1:10 %>% rev (from #1) : could not find function "%>%"
 > packageVersion("import")
 [1] ‘1.1.1’
```
When I revert to 1.1.0 via CRAN, that basic test succeeds:
```R
 > tempf <- function() { import::here("%>%", .from = "magrittr"); 1:10 %>% rev }
 > tempf()
  [1] 10  9  8  7  6  5  4  3  2  1
 > packageVersion("import")
 [1] ‘1.1.0’
```
No other package or R version (3.5.1) changes between these two tests.

I suppose I could walk back along each commit to try to find the point at which this behavior changed ... just let me know if you'd like that help and I can do some commit-based testing.

Cheers!
This makes it easier to run the same code on multiple machines, while still maintaining strictness where necessary. See also #10.

Importantly, the default behavior of this package should be _exactly the same_, as is the behavior when `.library` is set explicitly.
Just wondering if the new import functionality will make its way to CRAN? I really like the feature of being able to use R scripts as imports. 

My use case: I am using checkpoint for package management, so the dependence is on CRAN; but precisely because of this dependence, working with the universe _outside_ CRAN (/MRAN) is somewhat frustrating. The solution I've been using is https://github.com/wahani/modules which is perfectly fine, but I like the all in one solution offered by this package.
Hi!

I’m a fan of https://github.com/thomasp85/patchwork

It defines functions like `-.ggplot` which I’d like to import. I need to use `import:::from` for this, which seems unintuitive: when the patchwork package is attached, I can use those functions, so why would I need to use private accession syntax?
Hello,

Thanks for this package, lately it's become an integral part of my workflow. 

Usually, I use `import` to import some specific objects from R scripts that otherwise would pollute my global environment. One issue I've run into is that if I do `import::here(my_obj, .from = 'path/to/script.R')`, the script is actually sourced in working directory `path/to/`. Would it be possible to give an option to disable this behavior? I'm currently organizing all the scripts within a project to assume the same working directory, but organize the scripts in nested folders as appropriate. Having an ability to set `chdir = FALSE` would be very usefully.  Ideally the default could be something like `getOption("import.chdir", TRUE)`.
Hi! Great package. One thing i'm missing or haven't understand how to do is to avoid import code from one file to another one. In python I can use the `if __name__ == “__main__”` construct. Is something similar available here? Thanks.
I am trying to import a function for a module, where the the module path is in a variable. This does not work, as the variable is interpreted as a package instead of a string pointing to the module's file. In particular, doing this does not work:
path_to_module <- "~/repos/R/my_repo/my_module.R"
import::from(.from=path_to_module, my_function, .into="")

Is there an easy way to go around this restriction?