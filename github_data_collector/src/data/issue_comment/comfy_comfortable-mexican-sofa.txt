### Summary

Redactor 1 was built on top of jQuery 1.x, Rails 5.2 pulls jQuery 3. jQuery 3 has removed the jQuery.size() function which is used by Redactor 1. This PR reimplements jQuery.size() as part of the assets.

The 1.13 branch gemspec didn't limit the maximum version of bootstrap_form, as a consequence installing/updating 1.13 could pull newer version of bootstrap_form that depends on BS4, which would break the layout of custom controllers that are reusing the CMS backend
*Note:* For general questions and feature requests please leave a message
on Gitter: https://gitter.im/comfy/comfortable-mexican-sofa

### Expected behavior
I have a certain styling I want to apply to all <p> elements for a layout. For example, I want to add line-height: 10px to the content by doing this:

```
<div class='ui centered grid'>
  <div class='ui row'>
		<div class='ten wide column'>
      <div class='card' style='line-height:10px'>
        {{ cms:wysiwyg content }}
      </div>
    </div>
  </div>
</div>
```

However, this is not affecting all the <p> components because the styling is being added to the div component. So I was wondering if there was a way to import a styling .css file for that layout to apply to all <p> elements

### System configuration
**Rails version**:
Rails 5.2.2

**CMS version**:
2.0.0

**Ruby version**:
Ruby 2.5.1

### Summary

When @glebm converted these files from CoffeeScript to JavaScript, he used ES6. These files break on older browsers like IE 11.

I transpiled them to ES5 using babel.

I think sticking to ES5 is a better solution than adding babel gem dependency complexity.
I haven't (yet?) updated Plupload to its latest version 3.1.2 but the contained polyfill is a little more up to date.
use original name, mentioned error-causing PR (https://github.com/RubaXa/Sortable/pull/1154) was merged into 1.8.0-rc1.
use original file names for pretty_text_diff and diff_match_patch, comment source urls (for later updates)
Update CodeMirror (and used plugins) to latest version 5.48.2
### Summary

When CMS is included in a rails 6 parent app the after_save callback on the file model causes an endless callback loop that runs until a stack level too deep error is returned. And the file is not successfully uploaded/saved.

I reviewed the change logs for active storage and didn't see anything that seemed relevant. I suspect there is a change in the behavior in there somewhere and I just failed to find it.

Moving the callback to a `before_save` resolves the issue. tests continue to pass on 5.2 with the change.

the repeating stack is:
```
  /home/tongboy/comfortable-mexican-sofa/app/models/comfy/cms/file.rb:54:in `process_attachment'
activesupport (6.0.0.rc2) lib/active_support/callbacks.rb:429:in `block in make_lambda'
activesupport (6.0.0.rc2) lib/active_support/callbacks.rb:239:in `block in halting_and_conditional'
activesupport (6.0.0.rc2) lib/active_support/callbacks.rb:518:in `block in invoke_after'
activesupport (6.0.0.rc2) lib/active_support/callbacks.rb:518:in `each'
activesupport (6.0.0.rc2) lib/active_support/callbacks.rb:518:in `invoke_after'
activesupport (6.0.0.rc2) lib/active_support/callbacks.rb:136:in `run_callbacks'
activesupport (6.0.0.rc2) lib/active_support/callbacks.rb:827:in `_run_save_callbacks'
activerecord (6.0.0.rc2) lib/active_record/callbacks.rb:328:in `create_or_update'
activerecord (6.0.0.rc2) lib/active_record/timestamp.rb:129:in `create_or_update'
activerecord (6.0.0.rc2) lib/active_record/persistence.rb:470:in `save'
activerecord (6.0.0.rc2) lib/active_record/validations.rb:46:in `save'
activerecord (6.0.0.rc2) lib/active_record/transactions.rb:315:in `block in save'
activerecord (6.0.0.rc2) lib/active_record/transactions.rb:375:in `block in with_transaction_returning_status'
activerecord (6.0.0.rc2) lib/active_record/connection_adapters/abstract/database_statements.rb:275:in `transaction'
activerecord (6.0.0.rc2) lib/active_record/transactions.rb:212:in `transaction'
activerecord (6.0.0.rc2) lib/active_record/transactions.rb:366:in `with_transaction_returning_status'
activerecord (6.0.0.rc2) lib/active_record/transactions.rb:315:in `save'
activerecord (6.0.0.rc2) lib/active_record/suppressor.rb:44:in `save'
activerecord (6.0.0.rc2) lib/active_record/persistence.rb:621:in `block in update'
activerecord (6.0.0.rc2) lib/active_record/transactions.rb:375:in `block in with_transaction_returning_status'
activerecord (6.0.0.rc2) lib/active_record/connection_adapters/abstract/database_statements.rb:275:in `transaction'
activerecord (6.0.0.rc2) lib/active_record/transactions.rb:212:in `transaction'
activerecord (6.0.0.rc2) lib/active_record/transactions.rb:366:in `with_transaction_returning_status'
activerecord (6.0.0.rc2) lib/active_record/persistence.rb:619:in `update'
activestorage (6.0.0.rc2) lib/active_storage/attached/one.rb:32:in `attach'
```

Please let me know if I can add any further tests or anything else. Thanks for the great gem!
When opening the file manager overlay via the "burger"-button next to its name in the menu, drag and drop-reordering via the same icons before each file does not work. When using the file manager outside the overlay, it works fine.

Most probably a missing javascript/handler initialization.

Comfy 2.0.18 on Rails 5.2.3
It is useful to be able to put the CMS in a separate database, and for this being able to configure the superclass of the Comfy models is necessary, regardless of which mechanism of multi-database support one chooses.
