## Description
lint: enable file_name rule to fix warning 
project: rename files to comply to swiftlint file_name rule
docs: update documentation

## Checklist
- [x] this PR is based on develop or a 'develop related' branch
- [x] the commits inside this PR have explicit commit messages
- [x] the Jazzy documentation has been generated (if needed -> Jazzy RxFlow)

Now that apple has released SwiftUI & Combine are there any initiatives to port this project from RxSwift to Combine?
The functionality I'm attempting to achieve is have my view model (as a Stepper) conditionally emit the next step as it's loaded. Logically it seems the way to do this would be to `accept` my step in `readyToEmitSteps` so that I know the subscriber (coordinator) is listening for steps. 

It works fine if an Rx network request is fired off and `steps.accept` is called in `onSuccess/onError`. It also works if I wrap `steps.accept` in `DispatchQueue.main.async`. So I presume this is because the streams in `FlowCoordinator` aren't fully initialized yet?

I'll admit I got a little lost trying to read through those stream initialization statements, and I particularly was confused by `readyToEmitSteps` being called twice. https://github.com/RxSwiftCommunity/RxFlow/blob/44ddcb75fa0e788c70e1809c3fc506bf30e92447/RxFlow/FlowCoordinator.swift#L101
https://github.com/RxSwiftCommunity/RxFlow/blob/44ddcb75fa0e788c70e1809c3fc506bf30e92447/RxFlow/FlowCoordinator.swift#L153

Is the functionality I'm experiencing the desired functionality? And if so, would you mind explaining it to me?
I've been browsing the source code and I noticed usage of `objc_getAssociatedObject` and `objc_sync_enter`. However, whichever thing get's put into the latter is not even necessarily an NSObject. I was wondering, is it, like, just old and that's why we have these artifacts?
I reviewed issues history and see many discussions about `UIPageViewController`. However, I would like to raise that question again.

Here is a sample project: https://github.com/MortyMerr/RxFlowBug

After changing active controller (swipe left, swipe right) steps are not being handled. Obviously, it's because of `rxDismissed` behavior

If you think this is ok, please feel free to close the issue. 
IMO this is unexpected behavior, it can confuse users. Moreover, it was working with 1.6.0 and multiple NextFlowItem
I am trying to use `.multiple(flowContributor:)`, but it blocks steps. I have to use `CompositeStepper` as a hack.

The main advantage of RxFlow for me is that unexpected steps won't be handled. If `ViewController` is hidden, its steps should be blocked. However, with `CompositeStepper` i can't achieve these guarantees. 

What do you think? 
why rxflowdemo has a black screen after launchScreen?

in my project, I found there is a black screen after launchScreen, so I checked rxflowdemo and found same problem in the demo.
Hi @twittemb,

I'm looking to try out RxFlow (looks very promising). To this end I've created an extremely simple, two-flow app (each flow having a single screen defined in separate storyboards). Each flow-screen is a plain-old-UIViewController. There is a button on the initial flow-screen; when the user taps this I want to send them to the second flow (no further navigation required after this point, just trying to get the most basic of actions wired up for now).

I've read the docs, perused the demo app, and examined the source code - but I just cannot seem to get this simplest of configurations working. I currently have my code wired up as such [here](https://gist.github.com/TheFalseFriend/f7de0246b1e4e4fc37d6ca3400d57ef3) (general wiring) and [here](https://gist.github.com/TheFalseFriend/ca62b331c1b38b8b4c6ba201f8c6741a) (app delegate bootstrap).

As for the actual invocation of the SecondFlowRequired step: the view controller for the first flow's single screen has an instance of AppStepper set at creation time (i.e. `var stepper = AppStepper()` in UIViewController class body). I have an IBAction wired up to the button on the home screen that calls `self.stepper.toSecondFlow()`. 

While the app builds and runs, and presents the first screen/(flow?), absolutely nothing happens when I tap the IB-wired button that should send me to the other flow I've defined. It's like the stepper is just having no effect, failing silently.

Nobody seems to have had similar issues starting out so I _must_ be missing something here (I'm new to Swift, and iOS development in general). 

Any help you can give much appreciated!

Best
If you present a UIViewController and from that screen you make a step which change flow will create a memory leak by holding the NavigationController with full stack of ViewController within it. That flow is deallocated but the navigation controller and other view controller still exists on memory. 
I got problem with tab bar controller. when i use only one tab it works fine but when i use two tabs the object viewmodel  in viewcontroller is nil. The problem happens when i migrate from 1.x.x to 2.0.0.
Here my code:

AppDelegate
```
let dashboardFlow = DashboardFlow(dependency: DependencyRegistry())
    
    guard let window = self.window else { return true }
    
    Flows.whenReady(flow1: dashboardFlow, block: { [unowned window] (flowRoot) in
      window.rootViewController = flowRoot
      window.makeKeyAndVisible()
    })
    self.coordinator.coordinate(flow: dashboardFlow, with: OneStepper(withSingleStep: AppStep.dashboard))

```

DashboardFlow

```
fileprivate func navigateToDashboard() -> FlowContributors {
    let homeFlow = HomeFlow(dependency: dependency)
    let secondFlow = SecondFlow(dependency: dependency)
    
    Flows.whenReady(flow1: homeFlow, flow2: secondFlow) { [unowned self] (root1: UINavigationController, root2: UINavigationController) in
      
      
      let homeItem = UITabBarItem(title: "Home", image: UIImage(named: "home"), selectedImage: nil)
      
      let homeItem2 = UITabBarItem(title: "Second", image: UIImage(named: "home"), selectedImage: nil)
      
      root1.tabBarItem = homeItem
      root2.tabBarItem = homeItem2
      
      self.rootViewController.setViewControllers([root1, root2], animated: false)
    }
    
    return .multiple(flowContributors: [
      .contribute(withNextPresentable: homeFlow, withNextStepper:OneStepper(withSingleStep: Homestep.home)),
      .contribute(withNextPresentable: secondFlow, withNextStepper: OneStepper(withSingleStep: Homestep.home))
      ])
  }
```

View Controller

```
class ViewController: UIViewController {
  
  var viewModel: ViewModel!

  override func viewDidLoad() {
    super.viewDidLoad()
    
    print("ViewModel \(viewModel.title)")
   
  }
}


```

viewModel.title is nil 

Hi, are there any suggestions how to use flows with UIPageViewController? 
Currently (develop branch), `rxDismissed ` is called and flow does not listen for steps any more (just scroll to the end to get `rxDismissed` called and then scroll back to first view).
For example DashboardFlow from Demo app:

```
let rootViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)
var vcs: [UIViewController] = []
private func navigateToDashboard() -> FlowContributors {
        let wishlistStepper = WishlistStepper(preferencesServices: self.services.preferencesService)
        let wishlistStepper2 = WishlistStepper(preferencesServices: self.services.preferencesService)
        let wishlistStepper3 = WishlistStepper(preferencesServices: self.services.preferencesService)
        let wishlistStepper4 = WishlistStepper(preferencesServices: self.services.preferencesService)
        let wishlistStepper5 = WishlistStepper(preferencesServices: self.services.preferencesService)

        let wishListFlow = WishlistFlow(withServices: self.services, andStepper: wishlistStepper)
        let wishListFlow2 = WishlistFlow(withServices: self.services, andStepper: wishlistStepper2)
        let wishListFlow3 = WishlistFlow(withServices: self.services, andStepper: wishlistStepper3)
        let wishListFlow4 = WishlistFlow(withServices: self.services, andStepper: wishlistStepper4)
        let wishListFlow5 = WishlistFlow(withServices: self.services, andStepper: wishlistStepper5)
        let watchedFlow = WatchedFlow(withServices: self.services)

        Flows.whenReady(flows: [wishListFlow, wishListFlow2, wishListFlow3, wishListFlow4, wishListFlow5, watchedFlow]) {[unowned self](roots) in
            roots[0].title = "Wishlist"
            roots[1].title = "Watched"
            roots[2].title = "Wishlist"
            roots[3].title = "Wishlist"
            roots[4].title = "Wishlist"
            roots[5].title = "Wishlist"
            self.vcs = [roots[0], roots[1], roots[2], roots[3], roots[4], roots[5]]
            self.rootViewController.setViewControllers([roots[0]], direction: .forward, animated: false, completion: nil)
        }

        return .multiple(flowContributors: [.contribute(withNextPresentable: wishListFlow,
                                                        withNextStepper: wishlistStepper),
                                            .contribute(withNextPresentable: wishListFlow2,
                                                        withNextStepper: wishlistStepper2),
                                            .contribute(withNextPresentable: wishListFlow3,
                                                        withNextStepper: wishlistStepper3),
                                            .contribute(withNextPresentable: wishListFlow4,
                                                        withNextStepper: wishlistStepper4),
                                            .contribute(withNextPresentable: wishListFlow5,
                                                        withNextStepper: wishlistStepper5),
                                            .contribute(withNextPresentable: watchedFlow,
                                                        withNextStepper: OneStepper(withSingleStep: DemoStep.movieList))])
    }
}

extension DashboardFlow: UIPageViewControllerDataSource {
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {
        if let current = vcs.enumerated().filter({ $0.element === viewController }).first?.offset, vcs.indices.contains(current + 1) {
            return vcs[current + 1]
        }
        return nil
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {
        if let current = vcs.enumerated().filter({ $0.element === viewController }).first?.offset, vcs.indices.contains(current - 1) {
            return vcs[current - 1]
        }
        return nil
    }
}```
