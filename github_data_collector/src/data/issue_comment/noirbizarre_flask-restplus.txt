Hello everyone,

It has now been almost a year since we first started discussions about the future of Flask-RESTPlus in #593.

During the past months, a few of us have been granted maintainers access on github: @SteadBytes, @j5awry, @a-luna and myself. Unfortunately, we never had access to the Flask-RESTPlus Pypi project, hence we have never been able to release any new version.

This situation led us to fork the project under a different name so we can move forward.

The new project name is [flask-restx](https://github.com/python-restx/flask-restx) and it will be handled by the [python-restx](https://github.com/python-restx) organization.


We are at the early stages and we still have a lot of setup/organization to do, such as CI, renaming, copyright checking, etc.

Our current milestone is to deliver the equivalent of the v0.14.0 that has been discussed in #743 
After that, we will start migrate issues and PR that are still relevant and build a roadmap.

We'll let you know here when things are ready.
Import `OrderedDict` from `collections` instead of `collections.abc`.

Fix issue https://github.com/noirbizarre/flask-restplus/issues/766.

Note that I haven't included the change to the CHANGELOG since this issue was created in the current version and there is already a change note about import compatibility with Python 3.7/3.8.
I have defined model as below. The field **sample_received_date** is required and required valid format as shown below.

new_order = api.model('NewPGxOrder', {   
    'provider_id': fields.String(required=True, min_length=1, max_length=100),
    'patient_id': fields.String(required=True, min_length=1, max_length=100),
    'sample_id': fields.String(required=True, min_length=1, max_length=100),
    'sample_received_date': fields.Date(required=True, dt_format='iso8601', example="2012-01-01"),
})
Below is the resource
@api.route('/orders')
class OrdersList(Resource):
    @api.doc('new_order')
    @api.response(200, Order Info returned', model=order_response)
    @api.expect(new_order, validate=True)
    def post(self):
        """Create  Order"""
        return {"data": []}

It is validating properly for all fields.
Even date is validated as required field, but not so far as the given format(2012-01-01).
I have mentioned format as dt_format="iso8601".

**If i pass date other than the format still it is not giving the error**
`OrderedDict` should be imported from `collections` instead of `collections.abc`.

For example:

https://github.com/noirbizarre/flask-restplus/blob/9232e1a6599621e97223e1915c9b414c92faf2cc/flask_restplus/model.py#L8-L12

When trying to import it gives the following error:

```
>>> from collections.abc import OrderedDict
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: cannot import name 'OrderedDict' from 'collections.abc'
```

I have manually tested it on Python versions: 2.7, 3.4, 3.5, 3.6, 3.7 and 3.8.

The current code is not failing because of the `try-except`.

For tracking purposes, this change was made on PR https://github.com/noirbizarre/flask-restplus/pull/732 and is related to issue https://github.com/noirbizarre/flask-restplus/issues/727.

Can I submit a PR to solve this issue?
Adding a global error handler using @api.errorhandler doesn't seem to have any effect. The error handler code is not triggered when an exception happens.

### **Code**

```python
from flask import Flask
from flask_restplus import Api, Resource

app = Flask(__name__)
api = Api(app)

@api.errorhandler
def default_error_handler(error):
    return {'message': str(error)}, getattr(error, 'code', 500)

@api.route('/fail')
class Fail(Resource):
    def get(self):
        raise Exception("Test exception")

app.run(debug=True)

```

### **Repro Steps** 
1. Run the above server code.
2. GET /fail

### **Expected Behavior**
HTTP 500 with JSON output:
```
{ "message": "Test exception" }
```

### **Actual Behavior**
HTTP 500 with HTML error page:
```
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>Exception: Test exception // Werkzeug Debugger</title>
...
```

### **Environment**
- Python 3.7.4
- Flask 1.1.1
- Flask-RESTPlus 0.13.0

Attempting to return the following data structure to the user and document properly in swagger:

```
{ 'dynamic_key_1': ['string1', 'string2'], 'dynamic_key_2': ['string3]', ... }
```

i.e. a dictionary with dynamic keys, where values are a list of strings.

Using the example from [here](https://flask-restplus.readthedocs.io/en/latest/marshalling.html#wildcard-field) can get simple dynamic key data structure to work (see /test1), however, can't get it to work with lists (see /test2)

In particular, Swagger will render appropriately for /test2, however when I attempt to execute the request I hit an error (see stacktrace).

Based on this [merge](https://github.com/noirbizarre/flask-restplus/pull/739), seems like it should be doable, but can't figure out for the life of me! Help greatly appreciated!

### **Code**

```
from flask import Flask
from flask_restplus import Api, Resource, fields

app = Flask(__name__)
api = Api(app)

# Render a dictionary with wildcard keys and strings for values
# WORKS
wild_1 = fields.Wildcard(fields.String)
wildcard_model_1 = api.model('wildcard model', {'*': wild_1})

@api.route('/test1')
class test1(Resource):
    @api.marshal_with(wildcard_model_1)
    def get(self):
        return {'John': 12, 'bob': 42, 'Jane': '68'}


# Render a dictionary wtih wildcard keys and lists of strings for values
# FAILS
wild_2 = fields.Wildcard(fields.List(fields.String))
wildcard_model_2 = api.model('wildcard model', {'*': wild_2})


@api.route('/test2')
class test2(Resource):
    @api.marshal_with(wildcard_model_2)
    def get(self):
        return {'John': ['field1'], 'bob': ['field2'], 'Jane': ['field3']}


if __name__ == '__main__':
    app.run(debug=True)

```

### **Error Messages/Stack Trace**
```
Traceback (most recent call last):
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask/app.py", line 2463, in __call__
    return self.wsgi_app(environ, start_response)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask/app.py", line 2449, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask_restplus/api.py", line 584, in error_router
    return original_handler(e)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask/app.py", line 1866, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask/_compat.py", line 38, in reraise
    raise value.with_traceback(tb)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask/app.py", line 2446, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask/app.py", line 1951, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask_restplus/api.py", line 584, in error_router
    return original_handler(e)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask/app.py", line 1820, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask/_compat.py", line 38, in reraise
    raise value.with_traceback(tb)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask/app.py", line 1949, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask/app.py", line 1935, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask_restplus/api.py", line 325, in wrapper
    resp = resource(*args, **kwargs)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask/views.py", line 89, in view
    return self.dispatch_request(*args, **kwargs)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask_restplus/resource.py", line 44, in dispatch_request
    resp = meth(*args, **kwargs)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask_restplus/marshalling.py", line 256, in wrapper
    return marshal(resp, self.fields, self.envelope, self.skip_none, mask, self.ordered)
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask_restplus/marshalling.py", line 92, in marshal
    value == field.container.format(field.default):
  File "/Users/daniel.e.lewis/Documents/MyWizard/TG/aaam-ticketguru-flask/playground/flask-RestPlus/env/lib/python3.7/site-packages/flask_restplus/fields.py", line 287, in format
    for idx, val in enumerate(value)
TypeError: 'NoneType' object is not iterable
```

### **Environment**
- Python version: 3.7
- Fresh environment, only run `pip install flask flask_restplus`:

aniso8601==8.0.0
attrs==19.3.0
Click==7.0
Flask==1.1.1
flask-restplus==0.13.0
importlib-metadata==1.3.0
itsdangerous==1.1.0
Jinja2==2.10.3
jsonschema==3.2.0
MarkupSafe==1.1.1
more-itertools==8.0.2
pyrsistent==0.15.6
pytz==2019.3
six==1.13.0
Werkzeug==0.16.0
zipp==0.6.0

I am trying to use send_from_directory with RESTPlus and it looks as thought it is ignoring the path I am giving it in the first argument (code greatly simplified down to basics):

```
@api.route('/missions/<path:file_name>')
@api.param('file_name', 'The file to download')
class MissionFile(Resource):
    def get(self, file_name):
        return send_from_directory('./data', file_name, as_attachment=True)
```

I get the following response:

```
{
  "message": "The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again. You have requested this URI [/files/missions/mission1.json] but did you mean /files/missions/<path:file_name> or /files/missions or /files/missions/upload ?"
}
```
It seems to be using the resource URI and not the path I am explicitly setting. I have also tried providing an absolute path as well to no avail.

Would it be possible to support this other way of file upload?
I am not sure if this is some standard but I ran into this by using React-Admin file upload which support Drag and drop fileupload:
https://marmelab.com/react-admin/DataProviders.html#decorating-your-data-provider-example-of-file-upload: it sents the Image via JSON instead of "normal?" file upload.

### **Code**
I now handle it with this code in my view:

```python
data = request.get_json()
image_mime, image_base64 = data["image_1"]["src"].split(",")
image = base64.b64decode(image_base64)
```
The result is that the swagger specs are not in sync regarding how this endpoint should be used.

I think that with some guidance I can boil up a PR: if it's possible at all to do this under the OpenAPI specification.
When using a model that has an attribute of the same type, and a circular reference occurs, swagger does not render the documentation. This was a fix found in a post from @edwardfung123 <<https://github.com/noirbizarre/flask-restplus/issues/190#issuecomment-267533259>>

@edwardfung123 thanks for your post!
When doing PUT or DELETE requests with int data, I randomly (~ 6 times out of 10) get a type error stating that 'int' object is not iterable. The only similar issue I could find was submitted on the flask-restful git repository (https://github.com/flask-restful/flask-restful/issues/598) and it was closed in 2016, stating that it has been fixed in their 0.3.5 version. 
Being new to flask-restplus I am not sure whether I messed up something that I just cannot see.

This is the code for all the CRUD operations:

### **Code**

```python
from server import get_api
from flask_restplus import Resource, fields
from flask import request

from server.repositories.ComicsRepository import ComicsRepository

# server instance access
api = get_api()

# namespace setup
ns_comics = api.namespace('comics', description='Operations related to comics')

# Comic model definition
comic_model = api.model('Comic', {
		'name': fields.String(description='Comic name', required=True),
		'content': fields.String(description='Comic content', required=True)
                 })

# Comics repository instantiation
comics_repo = ComicsRepository(logger=api.app.logger)

@ns_comics.route("/")
@api.response(404, 'Comic not found')
class ComicCollection(Resource):
	def get(self):
		return comics_repo.get_all(), 200

	@api.expect(comic_model)
	def post(self):
		new_comic = request.json
		comic = comics_repo.add_comic(new_comic)
		return {'comic': comic}, 201

@ns_comics.route("/<int:resource_id>")
@api.response(404, 'Comic not found.')
@api.response(200, 'Success')
class CommicItem(Resource):
	def get(self, resource_id):
		comic = comics_repo.get_comic(resource_id)
		
		return comic, 200 if comic else None, 404

	@api.response(204, 'Comic successfully updated')
	@api.expect(comic_model)
	def put(self, resource_id):
		updated = comics_repo.update_comic(resource_id, request.json)

		return updated, 204 if updated else None, 404

	@api.response(204, 'Comic successfully deleted')
	def delete(self, resource_id):
		success = comics_repo.delete_comic(resource_id)

		return None, 204 if succes else None, 404
```

The error is thrown before the put method in the ComicItem class is reached. Tried doing PUT and DELETE calls from both the Swagger interface and Postman as well, with the same result. GET and POST requests work 100% of the time.

### **Stack Trace**

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2463, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2449, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask_restplus/api.py", line 584, in error_router
    return original_handler(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1866, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python3.6/site-packages/flask/_compat.py", line 38, in reraise
    raise value.with_traceback(tb)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2446, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1951, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.6/site-packages/flask_restplus/api.py", line 584, in error_router
    return original_handler(e)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1820, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python3.6/site-packages/flask/_compat.py", line 38, in reraise
    raise value.with_traceback(tb)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1949, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 1935, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/usr/local/lib/python3.6/site-packages/flask_restplus/api.py", line 329, in wrapper
    return self.make_response(data, code, headers=headers)
  File "/usr/local/lib/python3.6/site-packages/flask_restplus/api.py", line 350, in make_response
    resp = self.representations[mediatype](data, *args, **kwargs)
  File "/usr/local/lib/python3.6/site-packages/flask_restplus/representations.py", line 28, in output_json
    resp.headers.extend(headers or {})
  File "/usr/local/lib/python3.6/site-packages/werkzeug/datastructures.py", line 1091, in extend
    for key, value in iterable:
TypeError: 'int' object is not iterable

### **Environment**
- Python version: 3.6
- Flask version: 1.1.1
- Flask-RESTPlus version: 0.13.0

![screen1](https://user-images.githubusercontent.com/33522926/70240303-a8deaf00-1775-11ea-8238-f90143b53c01.png)
![screen2](https://user-images.githubusercontent.com/33522926/70240312-ac723600-1775-11ea-815a-830a0960d911.png)

Any suggestion would be greatly appreciated.