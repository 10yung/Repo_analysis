Hi everyone, could you please, help me I am using 'Alamofire',  '5.0.0-beta.3' and my main task is make to conect via https and use SSL, as I show below I have found the code  on the internert, but I could not find object ServerTrustPolicy. Where can I find it?

```
// Your hostname and endpoint
let hostname = "YOUR_HOST_NAME"
let endpoint = "YOUR_ENDPOINT"
let cert = "YOUR_CERT" // e.g. for cert.der, this should just be "cert"

// Set up certificates
let pathToCert = Bundle.main.path(forResource: cert, ofType: "der")
let localCertificate = NSData(contentsOfFile: pathToCert!)
let certificates = [SecCertificateCreateWithData(nil, localCertificate!)!]

// Configure the trust policy manager
let serverTrustPolicy = ServerTrustPolicy.pinCertificates(
    certificates: certificates,
    validateCertificateChain: true,
    validateHost: true
)    
let serverTrustPolicies = [hostname: serverTrustPolicy]
let serverTrustPolicyManager = ServerTrustPolicyManager(policies: serverTrustPolicies)

// Configure session manager with trust policy
afManager = SessionManager(
    configuration: URLSessionConfiguration.default,
    serverTrustPolicyManager: serverTrustPolicyManager
)


afManager.request(endpoint, method: .get).responseJSON { response in
    debugPrint("All Response Info: \(response)")
}
```
Add toc for advanced usage document

I'm implementing an app using Alamofire as the networking framework to communicate with the REST API services, and the authentication system we use is the Basic Auth by matching the username and password with the server. I tried to renew the session using the adapter and retrier to post the authentication request again to the server, but it doesn't work. I'm new to Swift and I have no idea since I'm asked to fit with the Basic Auth but most of the web services use the OAuth systems.

## Alamofire Environment

**Alamofire version:** 4.7
**Xcode version:** 10.1
**Swift version:** 4.2
**Platform(s) running Alamofire:** iOS
**macOS version running Xcode:** High Sierra

## Demo Project

The helper class of the request adapter is written as follow:

```swift
class APIRequestAdapter: RequestAdapter, RequestRetrier {
    private typealias RefreshCompletion = (_ succeeded: Bool, _ userId: Int?) -> Void
    
    private let lock = NSLock()
    
    private var username: String
    private var password: String
    
    private var isRefreshing = false
    private var requestsToRetry: [RequestRetryCompletion] = []
    
    var headers: HTTPHeaders = [:]
    
    var userId: Int? = nil

    // Session ID for user authentication - It expires for every 30 minutes inactivity.
    var sessionId: String? = nil
    var newSessionId: String? = nil
    
    // MARK: - Initialization
    
    public init(username: String, password: String) {
        self.username = username
        self.password = password
    }
    
    // MARK: - RequestAdapter
    
    func adapt(_ urlRequest: URLRequest) throws -> URLRequest {
        var urlRequest = urlRequest
        
        let loginString = String(format: "%@:%@", self.username, self.password)
        let loginData = loginString.data(using: String.Encoding.utf8)!
        let base64LoginString = loginData.base64EncodedString()
        
        if let urlString = urlRequest.url?.absoluteString, urlString.hasPrefix(serverConstant.BASE_URL) {
            urlRequest.httpMethod = "POST"
            urlRequest.setValue("Basic \(base64LoginString)", forHTTPHeaderField: "Authorization")
            urlRequest.setValue("application/json", forHTTPHeaderField: "Content-Type")
            return urlRequest
        }
        return urlRequest
    }
    
    
    // MARK: - RequestRetrier
    
    func should(_ manager: SessionManager, retry request: Request, with error: Error, completion: @escaping RequestRetryCompletion) {
        lock.lock() ; defer { lock.unlock() }
        
        if let response = request.task?.response as? HTTPURLResponse, response.statusCode == 401 {
            requestsToRetry.append(completion)
            
            if !isRefreshing {
                refreshTokens { [weak self] succeeded, userId in
                    guard let strongSelf = self else { return }
                    
                    strongSelf.lock.lock() ; defer { strongSelf.lock.unlock() }
                    
                    if let userId = userId {
                        strongSelf.userId = userId
                    }
                    
                    strongSelf.requestsToRetry.forEach { $0(succeeded, 0.0) }
                    strongSelf.requestsToRetry.removeAll()
                }
            }
        } else {
            completion(false, 0.0)
        }
    }
    
    // MARK: - Private - Refresh Tokens
    
    private func refreshTokens(completion: @escaping RefreshCompletion) {
        print("[DEBUG] Refresh Sessions.")
        
        guard !isRefreshing else { return }
        isRefreshing = true
        
        let urlString = serverConstant.BASE_URL + "/auth"
        let parameters: Parameters=["username":username,
                                    "password":password]
        
        if let authorizationHeader = Request.authorizationHeader(user: username, password: password) {
            headers[authorizationHeader.key] = authorizationHeader.value
        }
        
        BackgroundManager.shared.manager.request(urlString, method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: headers).responseJSON { [weak self] response in
            guard let strongSelf = self else { return }
            if
                let json = response.result.value as? [String: Any],
                let userId = json["id"] as? Int
            {
                print("[DEBUG] Renew completed for user \(userId).")
                completion(true, userId)
            } else {
                print("[DEBUG] Error - Failed to renew session.")
                completion(false, nil)
            }
            strongSelf.isRefreshing = false
        }
    }
}
```

The server URL is the API base URL, for example `https://www.myweb.com/api/v1`.
Hello !
I was going through Alamofire's documentation to find support for Path Encoding support but after searching I found out that it currently does not support this by default, since I supervise both Android / iOS development this is a key feature that I've found in a library called Retrofit (which is the counterpart for Alamofire in android) and it's missing here.

## What did you do?

Tried to use path encoding

## What did you expect to happen?

To find support for path encoding

## What happened instead?

I didn't find path encoding support

## Alamofire Environment

**Alamofire version: Any
**Xcode version: Any
**Swift version: Any
**Platform(s) running Alamofire: iOS
**macOS version running Xcode: Any

I've rolled my own PathEncoding which is basically this short 16-line struct that implements ParameterEncoding.

```Swift
struct PathEncoding: ParameterEncoding {
    
    public static var `default`: PathEncoding { return PathEncoding() }
    
    func encode(_ urlRequest: Alamofire.URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {
        guard let parameters = parameters else { return try urlRequest.asURLRequest() }
        var urlRequest = try urlRequest.asURLRequest()
        if var url = urlRequest.url?.absoluteString.removingPercentEncoding {
            for parameter in parameters {
                url = url.replacingOccurrences(of: "{\(parameter.key)}", with: "\(parameter.value)")
            }
            guard let url = URL(string: url) else { return try urlRequest.asURLRequest() }
            urlRequest.url = url
        }
        return urlRequest
    }

}
```

The idea is that the url has to contain the parameters in curly braces I.E:

```
https://google.com/{someId}
```

Then parameters dictionary will need to be filled with the same exact keys from the URL.

```Swift
request("https://www.google.com/{someId}".addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!, method: .get, parameters: ["someId": "123"], encoding: PathEncoding.default, headers: nil)
```

The path encoder will then decode the encoded url (since Alamofire will encode it automatically if URLRequestConveritble is used or the user will have to specifically do .addingPercentEncoding or Alamofire will fail to create the curl command)

And finally it's going to replace each parameter with its correspondent value from the parameters dictionary and the result request will be something like this

<img width="470" alt="Screen Shot 2019-12-16 at 11 52 11" src="https://user-images.githubusercontent.com/45688300/70897036-8876e600-1ffa-11ea-9ffc-0423af140d1f.png">
  
Thanks !
We have faced the following crash & we didn't have steps for it. 

<img width="1106" alt="Screen Shot 2019-12-12 at 11 20 53 AM" src="https://user-images.githubusercontent.com/3489494/70699406-be059180-1cd1-11ea-8bdf-1351cc795033.png">


## Alamofire Environment
**Alamofire version: 4.9.0
**Xcode version: 10.3
**Swift version: 4
**Platform(s) running Alamofire: iOS 


### Issue Link :link:
<!-- What issue does this fix? If an issue doesn't exist, remove this section. -->
#1839 #2431 
### Goals :soccer:
<!-- List the high-level objectives of this pull request. -->
<!-- Include any relevant context. -->
There is no real specification for how to URL encode collection parameters like arrays and
dictionaries.

For  `["foo": ["a", 1, true, ["bar": 2], ["qux": 3],  ["quy": ["quz": 3]]]]`

1. default `.brackets` encode is:

` foo[]=a&foo[]=1&foo[]=1&foo[][bar]=2&foo[][qux]=3&foo[][quy][quz]=3`

2. `.noBrackets` encode is: 

`foo=a&foo=1&foo=1&foo[bar]=2&foo[qux]=3&foo[quy][quz]=3`

3. [jQuery](https://api.jquery.com/jQuery.param/#example-1) >=1.4 and Node.js package  [query-string](https://www.npmjs.com/package/query-string) provide index style. 

`foo[0]=a&foo[1]=1&foo[2]=1&foo[3][bar]=2&foo[4][qux]=3&foo[5][quy][quz]=3`

### Implementation Details :construction:
<!-- Explain the reasoning behind any architectural changes. -->
<!-- Highlight any new functionality. -->
A new `ArrayEncoding` enumeration is added to `URLEncoding`. The cases are `.brackets` and `.noBrackets` and `.index `
The `arrayEncoding` passed to `init` is used to control the array key serialization in `URLEncoding.queryComponents`.

### Testing Details :mag:
<!-- Describe what tests you've added for your changes. -->
The new tests are named like the existing tests, with an appended suffix:

- `testURLParameterEncodeArrayNestedDictionaryValueParameterWithIndex`

tests pass.

**iOS, Swift**

Whenever I kill app when API is going on then when I launch application once again then app crashes for as loon as I try to open it. I have to delete app and install it again.

Below is the line from RequestTaskMap swift file where app crashes:
`fatalError("RequestTaskMap consistency error: no request corresponding to task found.")
`
Error:

Fatal error: RequestTaskMap consistency error: no request corresponding to task found.: file 

> /Users/itgurusoftware/Documents/Project/Pods/Alamofire/Source/RequestTaskMap.swift, line 61

Tried to Invalidate Alamofire sessions and tried to cancel requests too on applicationWillTerminate method but still issue persists.
FatalError: dataTask received data for incorrect Request subclass nil: SessionDelegate.swift

* [ ] I've read, understood, and done my best to follow the [*CONTRIBUTING guidelines](https://github.com/Alamofire/Alamofire/blob/master/CONTRIBUTING.md).

## What did you do?

We distributed our app using Alamofire for network requests

## What did you expect to happen?

No crashes initiated by Alamofire

## What happened instead?

Users of our application catch Alamofire crashes in SessionDelegate extension: https://github.com/Alamofire/Alamofire/blob/5.0.0-rc.2/Source/SessionDelegate.swift#L214

**Crashlytics Stack Trace:**
Alamofire
`$s9Alamofire15SessionDelegateC03urlB0_8dataTask10didReceiveySo12NSURLSessionC_So0i4DataF0C10Foundation0J0VtF`
```
#9. Crashed: org.alamofire.session.rootQueue
0  libswiftCore.dylib             0x1c6100b18 specialized _assertionFailure(_:_:file:line:flags:) + 444
1  libswiftCore.dylib             0x1c5ee7f20 _assertionFailure(_:_:file:line:flags:) + 36
2  Alamofire                      0x10552c820 $s9Alamofire15SessionDelegateC03urlB0_8dataTask10didReceiveySo12NSURLSessionC_So0i4DataF0C10Foundation0J0VtF + 672
3  Alamofire                      0x10552c8a0 $s9Alamofire15SessionDelegateC03urlB0_8dataTask10didReceiveySo12NSURLSessionC_So0i4DataF0C10Foundation0J0VtFTo + 124
4  CFNetwork                      0x1bbcdcd80 _CFNetworkHTTPConnectionCacheSetLimit + 194712
5  Foundation                     0x1b8c7fa54 __NSBLOCKOPERATION_IS_CALLING_OUT_TO_A_BLOCK__ + 24
6  Foundation                     0x1b8b81538 -[NSBlockOperation main] + 104
7  Foundation                     0x1b8c81db0 __NSOPERATION_IS_INVOKING_MAIN__ + 24
8  Foundation                     0x1b8b811b4 -[NSOperation start] + 740
9  Foundation                     0x1b8c827dc __NSOPERATIONQUEUE_IS_STARTING_AN_OPERATION__ + 24
10 Foundation                     0x1b8c8229c __NSOQSchedule_f + 184
11 libdispatch.dylib              0x1b856239c _dispatch_block_async_invoke2 + 144
12 libdispatch.dylib              0x1b8555fd8 _dispatch_client_callout + 20
13 libdispatch.dylib              0x1b855c450 _dispatch_lane_serial_drain + 568
14 libdispatch.dylib              0x1b855ce7c _dispatch_lane_invoke + 368
15 libdispatch.dylib              0x1b8565f20 _dispatch_workloop_worker_thread + 580
16 libsystem_pthread.dylib        0x1b85bba94 _pthread_wqthread + 280
17 libsystem_pthread.dylib        0x1b85c1c7c start_wqthread + 8
```

## Alamofire Environment

**Alamofire version:** 5.0.0-rc.2
**Xcode version:** 11.1
**Swift version:** 5.1
**Platform(s) running Alamofire:** iOS
**macOS version running Xcode:** macOS Catalina 10.15

## Demo Project

Unfortunately I haven't repeatable test case to reproduce this crash
* [x] I’ve read, understood, and done my best to follow the [*CONTRIBUTING guidelines](https://github.com/Alamofire/Alamofire/blob/master/CONTRIBUTING.md).

## What did you do?

I just updated to the non-beta version of Xcode 11.2. I opened a project I was working on and Xcode threw the error `Module compiled with Swift 5.1 cannot be imported by the Swift 5.1.2 compiler.` for Alamofire. I’m using Carthage as my package manager.

## What did you expect to happen?

Since Swift 5.1, which has module stability, this shouldn’t be happening. Frameworks compiled with Swift 5.1 should work no problem with newer versions of Swift.

## What happened instead?

 I am getting an error `Module compiled with Swift 5.1 cannot be imported by the Swift 5.1.2 compiler.` for Alamofire.

## Alamofire Environment

**Alamofire version:** 4.9.1
**Xcode version:** 11.2 (11B52)
**Swift version:** 5.1.2
**Platform(s) running Alamofire:** iOS
**macOS version running Xcode:** 10.14.6 (18G103)

## Demo Project

**To reproduce:** run `carthage update --platform iOS` on a project with Xcode 11.1 and then open the project in Xcode 11.2.

## Possible solution

According to [this stackoverflow question](https://stackoverflow.com/questions/58654714/module-compiled-with-swift-5-1-cannot-be-imported-by-the-swift-5-1-2-compiler) `BUILD_LIBRARY_FOR_DISTRIBUTION = YES;` has to be set in Alamofire’s `project.pbxproj` file.

```
func upload(_ uploadable: UploadRequest.Uploadable,
                with convertible: URLRequestConvertible,
                interceptor: RequestInterceptor?,
                fileManager: FileManager) -> UploadRequest {
        let uploadable = Upload(request: convertible, uploadable: uploadable)

        return upload(uploadable, interceptor: interceptor, fileManager: fileManager)
    }
```
why this method access Control is `internal`, I need `open`  access Control to when i using Alamofire to custom design my business network, i don't know why ? 