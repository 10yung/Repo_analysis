Let's assume I have a commit message like this

```
 Updates Contribution Tests - ehrbase/project_management#56

- added missing check steps
- moved required test-data-sets in dedicated subfolder
- repored discored bugs
- tagged failing tests/steps and linked to Github issues (traceability)
```

Is there a cli option to show more than just the first line in git standup output?

Cheers
Fix #108
I would like to use git standup to create a weekly summary of the various repositories I worked at, but only for the `master` branch. This way I can forward my colleagues a list of things that went live in the recent week.
### Description

git-standup does not properly handle paths that include spaces in directory names, e.g. `/path/to/my awesome stuff/`.

### Steps to Reproduce

1. Install git-standup: `npm i -g git-standup`
2. Create a git repository in a path that features a space:
```
$ cd /mnt/external\ drive/
$ mkdir test-repo
$ cd test-repo
$ git init
Initialized empty Git repository in /mnt/external\ drive/test-repo/.git/
```
3. Attempt to run `git standup`:
```
$ git standup
/usr/local/bin/git-standup: line 251: cd: drive/test-repo: No such file or directory
```
**Expected Behavior:** The utility should correctly parse paths with spaces and not assume that spaces will not be used.

**Actual Behavior:** git-standup appears to split the path of the current working directory on space characters and use the `length - 1`th element of the split result instead of the entire path.

**Reproduces how often:** 100%

### Additional Information

This issue has been reproduced on CentOS Linux and macOS 10.14 Mojave with git-standup v2.3.1.
Sometimes, I forget to note the time when I worked / what I did that day. I use git-standup to see what I did on that day, but I can't see the time.

Could you add the local time like this:

```
8cd361b 08:21 ENH: Added foo feature (13 days ago) <Martin Thoma>
a924f92 12:34 BUG: Fixed bar bug (13 days ago) <Martin Thoma>
e592ccf 17:59 MAINT: Update blub (13 days ago) <Martin Thoma>
```
This is great, thanks Kamran. Only issue I'm facing here is that any rebased appear twice, whilst temporary WIP commits also show up though they no longer exist. Currently my `git standup` command shows this:

<img width="327" alt="Screenshot 2019-04-04 at 10 13 29" src="https://user-images.githubusercontent.com/1713859/55544138-5b7be080-56c2-11e9-8170-2713a3760a5b.png">

Is there a way to either:

1) Only show commits that still exist, by checking to see if the commit hash is present in any of the `origin` branches. Could maybe include a `git fetch` to make sure it's up to date (though may be an undesired side effect for some).
2) If that's not possible, could it filter and only show the latest commit with the same commit message? So if you have `add .vim to .gitignore` committed twice due to a `commit --amend` or `rebase` it'd be great to be able to pass a flag that hides the repeated ones.

Ideally #1 would work best, as it would hide WIP commits too and seems to solve the problem closer to the root of the issue, but #2 would be a decent 80% fix towards making this more usable with those of us who rebase.
I find myself often specifying a range of 1 day, for example: 

- `git standup -A "2019-03-01" -B "2019-03-02"`
- `git standup -d 5 -u 4`

Would be nice to be able to pass in a date and have only the commits for that day returned.
I _love_ this project, and I use it daily. In this daily usage, I've identified just one possible improvement: the addition of the branch name to the commit message. I work in multiple branches for different features, and need to reference the branch name in my daily standup. If `git standup` included a flag that enabled outputting the branch name before the commit (i.e. `[branch_name] Commit message`), I (and hopefully others) may be able to rely on `git standup` even more comprehensively.

Is this possible today and I've just missed it?
My user home directory `~` is a Git Repository https://github.com/vanniktech/config-home
I ignore everything except a few dot files and some directories. 

Inside `~/dev/` I've got all of my other Git projects. Running inside `~/dev/` works fine but when running inside `~` git standup does not work corectly and says I've done nothing.

Would it be possible to still go the directory depth down even if the directory that you are currently in is a git repository?
Running git-standup like this gives non-colored output:
``watch -c git standup -m 3

I've no idea if someone else is using the application this way. For me it's useful to have a constantly updating list of commits.