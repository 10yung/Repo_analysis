

## Problem description

Whenever stepping into code via `step`, once it gets into a vendor gem, such as anything in rails, it makes the debugger more of a pain because the only thing I care about while debugging is issues in my code. It would be nice to have a config option to be able to ignore all gems when debugging

## Expected behavior

Do not debug vendor gems

## Actual behavior

Debugs vendor gems

With `no_exit_prompt` setting byebug will always quit immediately when `q` is pressed.

Resolves #404 
I'm hoping this will fix longstanding "can't see what I'm typing" issues.

Fixes #63.
Fixes #488.
## Problem description

The following code is running in a pod in kubernetes:
```
require 'byebug/core'
...
def exec
    remote_byebug('0.0.0.0', 3111) if debug
    ...
end
...
```

## Actual behavior

When executing this code with debug flag set to true, byebug waits for connection to port 3111 and I can attach to it by doing **byebug -R 3111** when exec into the pod (as expected). However, when I interrupt the byebug connection (cmd + c for example) and execute the code again, byebug does not wait for connection and just continues executing.

## Expected behavior

I figured what is required in order for it to stop at that point again is not to interrupt the connection, that is: keep **byebug -R 3111** alive.

Is there a way to have byebug always wait for the connection regardless of it being interrupted previously?

## Steps to reproduce the problem

Have the remote debugger setup in a pod and execute code in that pod for the first time. Then, after interrupting the byebug connection, execute again.

Thanks.




The byebug guide at https://github.com/deivid-rodriguez/byebug/blob/master/GUIDE.md has a link to "https://github.com/deivid-rodriguez/byebug/blob/master" titled  "See Byebug.start with a block."
This is a dead link now, but where was it meant to be linked to?
## Problem description


Having a way to generate the .byebug_history at a different location saves
us from having to .gitignore it


Related 
https://stackoverflow.com/questions/45096761/how-do-you-change-byebug-history-location

I would like to execute one (or more) ruby commands when byebug starts:

`RSpec.configure { |config| config.fuubar_auto_refresh = false } if RSpec`

Byebug does not appear to support that (https://github.com/thekompanee/fuubar#disabling-auto-refresh).

This seems like a substantial feature.  Is there a workaround?

I would imagine a file like `.byebug_hook` and maybe a command `source <filename>`.  There are times when I would like to execute substantial blocks of ruby code, too...


Let me open this issue as a way to exchange impressions about this.

[Zeitwerk](https://github.com/fxn/zeitwerk) listens to `:class` events to load what the project calls "explicit namespaces" (see why at [this moment](https://youtu.be/ulCBLpCU6aY?t=2087) in my talk in RailsConf), but within a Byebug session, these events are not emitted.

Does Byebug need specifically to disable `:class` events, or could it disable others and preserve this one? If it needs them, could it be a way to make both projects compatible?

Right now, Rails 6 applications with common defaults have this gotcha, for example.