I first went for QEMU to run test programs, but I was not able to build the loader...
```
[hikari@atlantis loader]$ cargo xbuild --target x86_64-unknown-hermit-loader.json
    Updating crates.io index
   Compiling core v0.0.0 (/home/hlab/hikari/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore)
   Compiling compiler_builtins v0.1.24
   Compiling rustc-std-workspace-core v1.99.0 (/home/hlab/hikari/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/tools/rustc-std-workspace-core)
   Compiling alloc v0.0.0 (/tmp/xargo.0B51MgwlFncp)
    Finished release [optimized] target(s) in 24.39s
  Downloaded bitflags v1.0.4
  Downloaded x86 v0.20.0
  Downloaded raw-cpuid v6.1.0
  Downloaded cc v1.0.46
   Compiling semver-parser v0.7.0
   Compiling cc v1.0.46
   Compiling x86 v0.20.0
   Compiling bitflags v1.0.4
   Compiling rusty-loader v0.2.5 (/home/hlab/hikari/rusty-hermit/loader)
   Compiling multiboot v0.3.0
   Compiling semver v0.9.0
   Compiling rustc_version v0.2.3
error: failed to run custom build command for `rusty-loader v0.2.5 (/home/hlab/hikari/rusty-hermit/loader)`

Caused by:
  process didn't exit successfully: `/home/hlab/hikari/rusty-hermit/loader/target/debug/build/rusty-loader-c19c1aeae5788de3/build-script-build` (exit code: 101)
--- stderr
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: "No such file or directory" }', build.rs:8:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

warning: build failed, waiting for other jobs to finish...
error: build failed
```
Same problem for Win10 and Ubuntu 18.04.

I also gave uhyve a try, but it hangs without giving any output...
```
[hikari@atlantis hello_world]$ sudo ~/.cargo/bin/uhyve target/x86_64-unknown-hermit/debug/hello_world
^C
```
(I had to run it as sudo since otherwise there will be a permission error)

The readme doesn't mention anywhere that the described steps are Linux-only.

I suspect this is the actual reason that
```
cargo build -Z build-std=std,core,alloc,panic_abort --target x86_64-unknown-hermit
```
fails for me on macOS 10.15.2 (Catalina) with
```
running: "cc" "cc" "-O1" "-ffunction-sections" "-fdata-sections" "-fPIC" "-m64" "-I" "src/libbacktrace" "-I" "/Users/moritz/code/rust-unikernel/target/x86_64-unknown-hermit/debug/build/backtrace-sys-40bab59e68f76f0a/out" "-fvisibility=hidden" "-DBACKTRACE_ELF_SIZE=64" "-DBACKTRACE_SUPPORTED=1" "-DBACKTRACE_USES_MALLOC=1" "-DBACKTRACE_SUPPORTS_THREADS=0" "-DBACKTRACE_SUPPORTS_DATA=0" "-DHAVE_DL_ITERATE_PHDR=1" "-D_GNU_SOURCE=1" "-D_LARGE_FILES=1" "-Dbacktrace_full=__rdos_backtrace_full" "-Dbacktrace_dwarf_add=__rdos_backtrace_dwarf_add" "-Dbacktrace_initialize=__rdos_backtrace_initialize" "-Dbacktrace_pcinfo=__rdos_backtrace_pcinfo" "-Dbacktrace_syminfo=__rdos_backtrace_syminfo" "-Dbacktrace_get_view=__rdos_backtrace_get_view" "-Dbacktrace_release_view=__rdos_backtrace_release_view" "-Dbacktrace_alloc=__rdos_backtrace_alloc" "-Dbacktrace_free=__rdos_backtrace_free" "-Dbacktrace_vector_finish=__rdos_backtrace_vector_finish" "-Dbacktrace_vector_grow=__rdos_backtrace_vector_grow" "-Dbacktrace_vector_release=__rdos_backtrace_vector_release" "-Dbacktrace_close=__rdos_backtrace_close" "-Dbacktrace_open=__rdos_backtrace_open" "-Dbacktrace_print=__rdos_backtrace_print" "-Dbacktrace_simple=__rdos_backtrace_simple" "-Dbacktrace_qsort=__rdos_backtrace_qsort" "-Dbacktrace_create_state=__rdos_backtrace_create_state" "-Dbacktrace_uncompress_zdebug=__rdos_backtrace_uncompress_zdebug" "-Dmacho_get_view=__rdos_macho_get_view" "-Dmacho_symbol_type_relevant=__rdos_macho_symbol_type_relevant" "-Dmacho_get_commands=__rdos_macho_get_commands" "-Dmacho_try_dsym=__rdos_macho_try_dsym" "-Dmacho_try_dwarf=__rdos_macho_try_dwarf" "-Dmacho_get_addr_range=__rdos_macho_get_addr_range" "-Dmacho_get_uuid=__rdos_macho_get_uuid" "-Dmacho_add=__rdos_macho_add" "-Dmacho_add_symtab=__rdos_macho_add_symtab" "-Dmacho_file_to_host_u64=__rdos_macho_file_to_host_u64" "-Dmacho_file_to_host_u32=__rdos_macho_file_to_host_u32" "-Dmacho_file_to_host_u16=__rdos_macho_file_to_host_u16" "-o" "/Users/moritz/code/rust-unikernel/target/x86_64-unknown-hermit/debug/build/backtrace-sys-40bab59e68f76f0a/out/src/libbacktrace/elf.o" "-c" "src/libbacktrace/elf.c"
cargo:warning=src/libbacktrace/elf.c:43:10: fatal error: 'link.h' file not found
cargo:warning=#include <link.h>
cargo:warning=         ^~~~~~~~
cargo:warning=1 error generated.
exit code: 1
```

If the above is expected on non-Linux platforms – see [this issue in `backtrace-sys`](https://github.com/rust-lang/backtrace-rs/issues/105) – I suggest adding a note to the `README.md` that the instructions in there are Linux-only.

Or adding instructions how to install a toolchain that alleviates it for non-Linux platforms.
[Citation](https://github.com/qemu/qemu/blob/master/docs/microvm.rst):

> microvm is a machine type inspired by Firecracker and constructed after its machine model.
> It's a minimalist machine type without PCI nor ACPI support, designed for short-lived guests. microvm also establishes a baseline for benchmarking and optimizing both QEMU and guest operating systems, since it is optimized for both boot time and footprint.

Conseqeuntly, it is a interesting platform for RustyHermit and should be supported


- cleanup of internal repo
- integration into the current master branch
Build a bootable image with [bootimage](https://github.com/rust-osdev/bootimage). Bootimage use a boot loader, which is better maintained in comparison to our own.
Docker is cool. Nevertheless there should be a guide on how to install without docker
