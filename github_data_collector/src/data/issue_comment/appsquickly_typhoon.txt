Storyboard inject is not working in swift. Always I'm getting null.

I have created two Assembiles (Application and Presentation) and added into plist.

```
//
//  Application.swift
//

import UIKit
import Typhoon

class Application: TyphoonAssembly {

    func appDelegate() -> AnyObject {
        return TyphoonDefinition.withClass(AppDelegate.self, configuration: { definition in
            definition!.injectProperty(#selector(setter: AppDelegate.homeStoryboard), with: self.homeStoryboard())
            definition!.injectProperty(#selector(setter: AppDelegate.loginStoryboard), with: self.loginStoryboard())
        }) as AnyObject
    }



    
    @objc func homeStoryboard() -> AnyObject {
        return TyphoonDefinition.withClass(TyphoonStoryboard.self, configuration: { (definition) in
            definition?.useInitializer(#selector(TyphoonStoryboard.init(name:factory:bundle:)), parameters: { initializer in
                initializer!.injectParameter(with: "Home")
                initializer!.injectParameter(with: self)
                initializer!.injectParameter(with: Bundle.main)
            })
        }) as AnyObject

    }
    
    
    @objc func loginStoryboard() -> AnyObject {
        return TyphoonDefinition.withClass(TyphoonStoryboard.self, configuration: { (definition) in
            definition?.useInitializer(#selector(TyphoonStoryboard.init(name:factory:bundle:)), parameters: { initializer in
                initializer!.injectParameter(with: "Login")
                initializer!.injectParameter(with: self)
                initializer!.injectParameter(with: Bundle.main)
            })
        }) as AnyObject
        
    }

    @objc func aboutStoryboard() -> AnyObject {
        return TyphoonDefinition.withClass(TyphoonStoryboard.self, configuration: { (definition) in
            definition?.useInitializer(#selector(TyphoonStoryboard.init(name:factory:bundle:)), parameters: { initializer in
                initializer!.injectParameter(with: "About")
                initializer!.injectParameter(with: self)
                initializer!.injectParameter(with: Bundle.main)
            })
        }) as AnyObject
        
    }

    
}

```

```
//
//  Presentation.swift
//

import UIKit
import Typhoon

class Presentation: TyphoonAssembly {

     private var application: Application!
    
    func sideMenuViewController() -> SideMenuViewController? {
        return TyphoonDefinition.withClass(SideMenuViewController.self, configuration: { (definition) in
            definition?.injectProperty(#selector(setter: SideMenuViewController.homeStoryboard), with: self.application.homeStoryboard)
             definition?.injectProperty(#selector(setter: SideMenuViewController.aboutStoryboard), with: self.application?.aboutStoryboard)
          
        }) as? SideMenuViewController
    }
    
    func homeViewController() -> HomeViewController? {
        return TyphoonDefinition.withClass(HomeViewController.self, configuration: { (definition) in
            
        }) as? HomeViewController
    }
    
    func aboutViewController() -> AboutViewController? {
        return TyphoonDefinition.withClass(AboutViewController.self, configuration: { (definition) in
            
        }) as? AboutViewController
    }
    
    
}

```

```
//
//  AppDelegate.swift
//

import UIKit
import SlideMenuControllerSwift

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {

    var window: UIWindow?
   @objc var  homeStoryboard  : AnyObject?
    @objc var loginStoryboard : AnyObject?

    fileprivate func createMenuView() {
   
        let homeViewController =  homeStoryboard?.instantiateViewController(withIdentifier: "HomeViewController") as! HomeViewController
        let sideMenuViewController = homeStoryboard?.instantiateViewController(withIdentifier: "SideMenuViewController") as! SideMenuViewController
        
        let nvc: UINavigationController = UINavigationController(rootViewController: homeViewController)
        UINavigationBar.appearance().tintColor = UIColor.white
        UINavigationBar.appearance().barTintColor = UIColor.darkGray
        
        sideMenuViewController.homeViewController = nvc
        
        
        let slideMenuController = ExSlideMenuController(mainViewController:nvc, leftMenuViewController: sideMenuViewController)
        SlideMenuOptions.contentViewScale = 1
        slideMenuController.delegate = homeViewController as? SlideMenuControllerDelegate
        self.window?.backgroundColor = UIColor(red: 236.0, green: 238.0, blue: 241.0, alpha: 1.0)
        self.window?.rootViewController = slideMenuController
        self.window?.makeKeyAndVisible()
        
    }
    
    func logout() {
        let loginViewController = loginStoryboard?.instantiateViewController(withIdentifier: "Login") as? LoginViewController
    
        if self.window?.rootViewController?.presentedViewController != nil {
            self.window?.rootViewController?.dismiss(animated: false)
        }
        
        if let loginViewController = loginViewController {
            self.window?.rootViewController?.present(loginViewController, animated: false, completion: nil)
        }
    }

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        self.createMenuView()
        return true
    }

    func applicationWillResignActive(_ application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
    }

    func applicationDidEnterBackground(_ application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    }

    func applicationWillEnterForeground(_ application: UIApplication) {
        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
    }

    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
    }

    func applicationWillTerminate(_ application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
    }


}


```

How inject storyboard in swift. Why homestory board object is getting null in AppDelegate?

I'm having an issue with the sample app see [comment](https://github.com/appsquickly/typhoon-example/issues/33#issuecomment-487190583)

And while trying to investigate further and see if I could fixed I noticed that the TyphoonAssemblyBuilderTests that are responsible for checking the piece of code that throws the exception are not being run.
When installed through Carthage
	Task failed with exit code 65:
	/usr/bin/xcrun xcodebuild -project /Users/alekzernov/Downloads/enegyhouserev2.0/Carthage/Checkouts/Typhoon/Typhoon.xcodeproj -scheme Typhoon -configuration Release -derivedDataPath /Users/alekzernov/Library/Caches/org.carthage.CarthageKit/DerivedData/9.4_9F1027a/Typhoon/4.0.5 -sdk iphonesimulator -destination platform=iOS\ Simulator,id=1D1D025C-9F81-4183-B247-1F69285384B6 -destination-timeout 3 ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES build (launched in /Users/alekzernov/Downloads/enegyhouserev2.0/Carthage/Checkouts/Typhoon)
help me please
Hi,

I'm trying to use Typhoon in the iMessage Extension of IOS with partial luck. Only manual integration works, plist integration doesn't. This issue is pretty similar to https://github.com/appsquickly/Typhoon/issues/352 and it looks like you fixed it but for some reason my class properties don't get injected automatically even though I followed the instructions on your docs. Here's a link to the sample project I created:
https://github.com/lirantzairi/TestIMessages
It's a simple project containing two targets:
* Host app. If you run it you see that automatic injection works.
* Extension app. If you run it you see that automatic injection doesn't work - the property "myClass" doesn't get injected and remains nil.
Can you please help me understand where the issue is?

Thanks,
Liran.

I am trying to [modularize](https://github.com/appsquickly/typhoon/wiki/modularizing-assemblies) my Assembly files per the instructions, but it doesn't seem to be working when I have a base Assembly class written in Objective C that's being accessed by another Assembly written in Swift. The injected assembly isn't nil, but I get a EXC_BAD_ACCESS error when I try to pull anything off of it.

Is this a known limitation, or am I doing something explicitly wrong?

I'm currently using Typhoon v4.0.3. When I was previously using 3.1.6, this seemed to work.

Here is my code for reference:

ObjC Assembly:
```
@interface CoreComponents : TyphoonAssembly

@implementation CoreComponents

-(Preferences*) preferences {
    return [TyphoonDefinition withClass:[Preferences class] configuration:^(TyphoonDefinition *definition) {
        [definition useInitializer:@selector(getInstance)];
    }];
}
```


Swift Asssembly:
```
public class DeviceComponents: TyphoonAssembly {

    public var coreComponents: CoreComponents!

    public dynamic func peripheralManager() -> Any! {
        return TyphoonDefinition.withClass(PeripheralManager.self, configuration: { definition in
            definition!.useInitializer(#selector(PeripheralManager.init(preferences:))) { initializer in
                initializer!.injectParameter(with: self.coreComponents.preferences())
            }
        })
    }
}
```
Steps to repro: 

In header: 
```objc
@property (strong, nonatomic, readonly) ApplicationAssembly *assembly; 
```

In impl: 
```objc
- (ProfilePreviewHelper *)profilePreviewHelper
{
    return [TyphoonDefinition withClass:[ProfilePreviewHelper class] configuration:^(TyphoonDefinition *definition) {
        [definition injectProperty:@selector(assembly)];
        [definition injectProperty:@selector(profileService)];
        [definition injectProperty:@selector(rootController) with:[self.assembly rootController]];
        [definition injectProperty:@selector(candidatesService)];
        definition.scope = TyphoonScopeWeakSingleton;
    }];
}
```

.  . . when no TyphoonConfigFile key is set, otherwise use that. 
Hi! 

It seems that plist automatic activation doesn't work in share extension, since the extension doesn't have an app delegate and the swizzled method is never being called.

Are there any plans to add a support for the Typhoon in the extensions?

Thanks!
Hi,

I've tried to use the new 4.0.2 release but there were some API changes that I cannot understand. Some of them cause the app to crash.

Here goes a list of issues:

**TyphoonAssemblyActivator was deprecated.** 

Some of our assemblies are not listed in the plist file and thus, we have the following code to manually activate them.

```
@interface FactoryAssembly : TyphoonAssembly

@end
@implementation FactoryAssembly

- (id) init {
    self = [super init];
    
    if (self) {
        [self activate];
    }
    
    return self;
}

@end

@implementation FactoryAssembly

- (id) init {
    self = [super init];
    
    if (self) {
        [self activate];
    }
    
    return self;
}

@end
```

After checking the docs it was not clear how to refactor this. Could you please provide some more insights here ?

**Plist activation + Modularizing Assemblies**

The order used when declaring the assemblies in the plist file was not relevant until now. However, with this new version it has changed somehow.

```
@interface SupportStoryboardViewFactoryAssembly  : TyphoonAssembly<SupportStoryboardViewFactoryProtocol>

@property(nonatomic, strong, readonly) ServiceAssembly                          *serviceAssembly;
@property(nonatomic, strong, readonly) CommonStoryboardViewFactoryAssembly      *commonStoryboardFactoryAssembly;

@end
```

If serviceAssembly is declared after SupportStoryboardViewFactoryAssembly the following code will crash:

```
- (id<HelpCenterArticleDetailsViewModelProtocol>) helpCenterArticleDetailsViewModel:(NSString *) articleID
{
    return [TyphoonDefinition withClass:[HelpCenterArticleDetailsViewModel class] configuration:^(TyphoonDefinition *definition)
            {
                [definition useInitializer:@selector(initWithSupportService:inesService:supportAssembly:settingsService:articleID:) parameters:^(TyphoonMethod *initializer) {
                    [initializer injectParameterWith:[self->_serviceAssembly supportService]];
                    [initializer injectParameterWith:[self->_serviceAssembly inesService]];
                    [initializer injectParameterWith:self];
                    [initializer injectParameterWith:[self->_serviceAssembly settingsService]];
                    [initializer injectParameterWith:articleID];
                }];
            }];
}
```

Moving ServiceAssembly before SupportStoryboardViewFactoryAssembly solves the issue. Still, due to circular dependencies I cannot follow this approach. 

Any ideas how to handle this ?

Thanks in advance,


TyphoonStoryboard does not support NSStoryboard on OSX (MacOS)