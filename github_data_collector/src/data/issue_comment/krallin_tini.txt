Please put the defined parameters (from https://github.com/krallin/tini/blob/3c5368682eb238d2177bfef98f9ac4bbc28aa9a0/src/tini.c#L238 onwards) also in the README.md in a concise table.

Can ` -e EXIT_CODE` be repeated?

Signed-off-by: Dominic Yin <yindongchao@inspur.com>

Add support for mips64el ; )
* add `-R {A|F}` option to emulate `docker --restart always/on-failure` behavior

**REASON FOR CHANGE:**
The tini-based container could be run via non-docker container runtime (e.g. containerd, cri-o or raw runC), which may not support the "xxx --restart always/on-failure" behavior.
This change adds the restarts capability straight into the `tini` code.
When `TINI_MINIMAL` was defined, the error message read "To fix the problem, or set the environment [...]".
@krallin I was wondering if you would be willing to back “port” some of the releases for `s390x` and ` ppc64le`? Some projects I found are still using dated versions of Tini, like `v0.14.0` and `v0.15.0`, but no binaries exist for `s390x` and `ppc64le`. This makes it hard to get other open source projects to support `s390x` and `ppc64le` since now it requires them to add in the functionality of manually building Tini. 

Would you be willing to release the binaries and push them to the GitHub release page? The most dated version I saw was `v0.14.0`. So ideally, if you could push binaries for architectures at  `v0.14.0` and ` v0.15.0`, that would be amazing! 

When I am exec-ing the mysqld inside entrypoint.sh the zombie process occurs.  Without exec-ing I always get an extra process that is shell as immediate child of tini and mysqld as the child of that shell. Am I doing something wrong ? 

Dockerfile
```
COPY entrypoint.sh /
ENTRYPOINT ["tini", "-g", "--"]
EXPOSE 3306

CMD ["/entrypoint.sh"]
```

entrypoint.sh
```
#!/bin/sh
set -ex
mkfifo /tmp/mysqld.init
echo 'CREATE DATABASE IF NOT EXISTS test;' > /tmp/mysqld.init &
exec mysqld --init-file="/tmp/mysqld.init"
```

top
 ```
PID  PPID USER     STAT   VSZ %VSZ CPU %CPU COMMAND
    6     1 mysql    S     383m  19%   0   0% mysqld --init-file=/tmp/mysqld.init
   41     0 root     R     1532   0%   0   0% top
    1     0 root     S      764   0%   1   0% tini -g -- /entrypoint.sh
    8     6 root     Z        0   0%   1   0% [entrypoint.sh]
```


I also tried tini as subreaper. Something like below inside entrypoint.sh, but tini itself become zombie. Without a control operator `&` it works fine. 
`tini -s -vvv -- sleep 60 &`
And here is the output I get.
```
[TRACE tini (7)] Registered as child subreaper
[INFO  tini (7)] Spawned child process 'sleep' with pid '8'
....................................................
[TRACE tini (7)] No child to reap
[TRACE tini (7)] No child to reap
[TRACE tini (7)] No child to reap
[DEBUG tini (7)] Received SIGCHLD
[DEBUG tini (7)] Reaped child with pid: '8'
[INFO  tini (7)] Main child exited normally (with status '0')
[TRACE tini (7)] No child to wait
[TRACE tini (7)] Exiting: child has exited
```
Adds support to tini for implementing post processing commands. These commands can be used to run clean up procedures, or remap exit codes.
This is an improvement recommendation to make tini-static-i386 smaller by linking it against an alternative libc (uClibc, musl etc.). File size can go down to as low as 42 kB.

For example, using xstatic to link against uClibc (compiled with gcc-7.3.0 on a Linux amd64 system):

```
$ git clone https://github.com/krallin/tini
$ cd tini
$ wget http://pts.50.hu/files/pts-xstatic/pts-xstatic-latest.sfx.7z
$ chmod +x ./pts-xstatic-latest.sfx.7z
$ ./pts-xstatic-latest.sfx.7z -y
$ rm -f ./pts-xstatic-latest.sfx.7z
$ touch tiniConfig.h
$ pts-xstatic/bin/xstatic gcc -s -Os -W -Wall -I. -DPR_SET_CHILD_SUBREAPER=36 -DPR_GET_CHILD_SUBREAPER=37 -DTINI_VERSION='"xstatic"' -DTINI_GIT='""' -o tini src/tini.c 
$ file tini
tini: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, stripped
$ ls -l tini
-rwxr-xr-x 1 pts pts 41580 Apr 26 15:44 tini
```

xstatic can be integrated to other build workflows (e.g. make, cmake): just use `xstatic gcc` instead of `gcc`. Read more about xstatic on https://github.com/pts/pts-clang-xstatic/blob/master/README.pts-xstatic.txt .
Hi,

Thank you for tini !

During my tests with Docker, I noticed tini:
 - starts the process given as the argument as the "first child"
 - forwards received signals to the "first child" only (or the sub-process branch if -g is used)
 - returns the exit code of the "first child"

In the case where some process has been orphaned and adopted by tini, is it possible to make tini forward signals to these running child processes as well ?

I noticed on an Ubuntu VM, that traditional init seems to ask "all remaining processes to terminate" by sending SIGTERM. I'd like to reproduce this behaviour in order to gracefully stop every child process, even adopted ones.

Thank you for your help.
Some container-based programs can do an inline reload when a
config file (particularly those mounted on a Volume) changes, but
need to be signalled. For a local docker, we can do docker kill
and let the signal pass through tini, but on a scheduler, like
Kubernetes, we either have to run commands in each container or
delete and recreate the containers (as per the replication-group
strategy).

With this patch, we can run something like prometheus or fluentd
in containers, and be able to use kubernetes to push updates,
with the relevant program auto-reloading, without the need for a
side-bar watcher, making tini a little bit more like a "supervisor".