We're using enumeratum successfully when dealing with enum values, both with Circe and with Quill. We define something like this:

```
sealed abstract class TopicType(val value: String) extends StringEnumEntry
  object TopicType extends StringEnum[TopicType] with StringCirceEnum[TopicType] with StringQuillEnum[TopicType] {
    object Info extends TopicType("info")
    object Warning extends TopicType("warning")

    val values: immutable.IndexedSeq[TopicType] = findValues
  }

  // case class representing our MySQL payload table 
  case class Payload(id: String, topic: TopicType)
```

and use Payload when decoding / encoding mysql and json using Quill and Circe. With Quill and MySQL this works fine with the following table:

```
create table payload(
    id varchar(36) not null primary key,
    topic_type enum ('info', 'warning')  not null
)
```

However, I cannot for the life of me figure out how to make this work when using optional fields for our enumeratum type.

We want to be able to use the payload class like this:

```
   case class Payload(id: String, topic: Option[TopicType])
```

When trying to use an optional topic and read from our database using Quill with :

```
...
run {
   query[Payload].filter(payload => payload.id == lift(someId))
}
```

we get:

```
java.util.NoSuchElementException: null is not a member of ValueEnum (warning, info) (ValueEnum.scala:58)
```

Same thing happens if I do a `leftJoin` to a table that holds an `Enum` in it, e.g.:

```
case class Payload(id: String)
case class PayloadData(payloadId: String, topic: TopicType)
run {
        query[Payload]
          .leftJoin(query[PayloadData])
          .on((p, pd) => p.id == pd.payloadId)
      }
```



Could it be that we need to specify some custom decoder / encoder to handle options / null values?
Passing an invalid name to `namesToValuesMap` returns an unhelpful NoSuchElementException with no message to indicate what the invalid value was
```
> domain.DocType.namesToValuesMap("Greg")
java.util.NoSuchElementException
  at scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:569)
  at scala.collection.immutable.HashMap.apply(HashMap.scala:132)
  ... 36 elided
```
Compare to `withName` which gives a much nicer message, but this doesn't help as `enumeratum-slick` uses `namesToValuesMap`, so you could optionally consider this as a bug in `SlickEnumColumnSupport`.


```
[warn] (Emitted value instead of an instance of Error) Cannot find source file '../../../../../../../../../../lloyd/Documents/skala/enumeratum/enumeratum-core/src/main/scala/enumeratum/EnumEntry.scala': Error: Can't resolve '../../../../../../../../../../lloyd/Documents/skala/enumeratum/enumeratum-core/src/main/scala/enumeratum/EnumEntry.scala' in '/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main'
[warn] NonErrorEmittedError: (Emitted value instead of an instance of Error) Cannot find source file '../../../../../../../../../../lloyd/Documents/skala/enumeratum/enumeratum-core/src/main/scala/enumeratum/EnumEntry.scala': Error: Can't resolve '../../../../../../../../../../lloyd/Documents/skala/enumeratum/enumeratum-core/src/main/scala/enumeratum/EnumEntry.scala' in '/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main'
[warn]     at emitWarning (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/webpack/lib/NormalModule.js:116:16)
  [warn]     at /Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/source-map-loader/index.js:65:7
  [warn]     at onError (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/Resolver.js:65:10)
  [warn]     at loggingCallbackWrapper (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)
  [warn]     at runAfter (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/Resolver.js:158:4)
  [warn]     at innerCallback (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/Resolver.js:146:3)
  [warn]     at loggingCallbackWrapper (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)
  [warn]     at next (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/tapable/lib/Tapable.js:252:11)
  [warn]     at /Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/UnsafeCachePlugin.js:40:4
  [warn]     at loggingCallbackWrapper (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)
  [warn]     at runAfter (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/Resolver.js:158:4)
  [warn]     at innerCallback (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/Resolver.js:146:3)
  [warn]     at loggingCallbackWrapper (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)
  [warn]     at next (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/tapable/lib/Tapable.js:252:11)
  [warn]     at innerCallback (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/Resolver.js:144:11)
  [warn]     at loggingCallbackWrapper (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)
  [warn]     at next (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/tapable/lib/Tapable.js:249:35)
  [warn]     at resolver.doResolve.createInnerCallback (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js:44:6)
  [warn]     at loggingCallbackWrapper (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)
  [warn]     at afterInnerCallback (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/Resolver.js:168:10)
  [warn]     at loggingCallbackWrapper (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)
  [warn]     at next (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/tapable/lib/Tapable.js:252:11)
  [warn]     at afterInnerCallback (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/Resolver.js:168:10)
  [warn]     at loggingCallbackWrapper (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)
  [warn]     at next (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/tapable/lib/Tapable.js:252:11)
  [warn]     at runAfter (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/Resolver.js:158:4)
  [warn]     at innerCallback (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/Resolver.js:146:3)
  [warn]     at loggingCallbackWrapper (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)
  [warn]     at next (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/tapable/lib/Tapable.js:252:11)
  [warn]     at runAfter (/Users/dev/Code/Scala/scalajs-project/client/target/scala-2.12/scalajs-bundler/main/node_modules/enhanced-resolve/lib/Resolver.js:158:4)
```
I think that
`  val profile: slick.jdbc.Profile`

has changed, it is not found.  Also, when extending from SlickEnumSupport, many other slick implicit mappings are no longer found.

Is it possible to check if an update is needed to the slick integration part of the README? 
My frontend expects enums to be in the style of JAVA_ENUMS. 

the current converters didn't do the trick for me, so I created this one: 
```
import enumeratum.{Enum, EnumEntry}
import play.api.libs.json._

trait PlayFromToJavaEnum[A <: EnumEntry] { self: Enum[A] =>

  def entryNameToEnumName(in: String): String = {
    (in.charAt(0) + in.substring(1).replaceAll("([A-Z])", "_$1")).toUpperCase()
  }

  /*
   * Map of [[A]] object names to [[A]]s
   */
  lazy val nameLikeEnumToValueMap: Map[String, A] =
    values.map(v => entryNameToEnumName(v.entryName) -> v).toMap

  /**
    * Optionally returns an [[A]] for a given name assuming the value is upper case
    */
  def withNameLikeJavaEnumOnlyOption(name: String): Option[A] =
    nameLikeEnumToValueMap.get(name)

  def readsJavaEnumLikeOnly(enum: Enum[A]): Reads[A] = {
    case JsString(s) =>
      withNameLikeJavaEnumOnlyOption(s) match {
        case Some(obj) => JsSuccess(obj)
        case None      => JsError("error.expected.validenumvalue")
      }
    case _ => JsError("error.expected.enumstring")
  }

  def writesJavaEnumLikeOnly(enum: Enum[A]): Writes[A] = v => JsString(entryNameToEnumName(v.entryName))

  implicit val jsonFormat: Format[A] = Format(readsJavaEnumLikeOnly(self), writesJavaEnumLikeOnly(self))
}
```

Not sure this is worth to be included in the main distribution? or if u see issues with it? 
Would be happy about a discussion 
I couldn't find any examples of how to implement inheritance beyond the Animals test but that didn't look complete.

This appears to work but I just wanted to check this is the correct approach?

Thanks for the library!

```import enumeratum._

sealed trait Greeting extends EnumEntry

object Greeting extends Enum[Greeting] {

  val values = findValues ++ CasualGreeting.values ++ PoliteGreeting.values
}

object CasualGreeting extends Enum[Greeting] {
  val values = findValues

  case object Hey extends Greeting
}

object PoliteGreeting extends Enum[Greeting] {
  val values = findValues

  case object Hello extends Greeting
}

println(Greeting.withName("Hello"))
println(Greeting.withName("Hey"))
Hi,

I'm using akka-http with SprayJsonSupport, it would be awesome to add spray json support out of box.
`Enum` gives you `withName` which throws, whether you like it or not.  It also gives you "safe" versions but it discourages you from using them because they have longer names.

It would be nice to be able to make the opposite choice:  to have only the safe methods.  E.g.
```
  def withName(name: String): Try[A]
```
and variants.  Or `Option` not `Try`.

People who really want to "force" the `Try` could call `Foo.withName("bar").get` which would be visible to e.g. wartremover in user code.

I ran into an issue with ValueEnumMacros, I want to write something like this with binary notation. It was important for me to make sure all of them are different and form an enumeration, but seeing the binary values is important. I don't want to write them as base 10 integers.

```scala
sealed abstract class MacroEval(val value: Int) extends IntEnumEntry

case object MacroEval extends IntEnum[MacroEval] {
  import spire.syntax.literals.radix._

  case object Zero   extends MacroEval(x2"0")
  case object One    extends MacroEval(x2"1")
  case object Two    extends MacroEval(x2"10")

  val values = findValues
}
```

The `x2"010101"` notation is done with macros from Spire and expands into a integer at compile time. Except it won't work with Enumeratum as is because the macros for ValueEnum won't evaluate the expression they receive and rather expect a Literal.

I implemented something that seems to not break stuff and work for my use case. I had to mess with the SBT build a bit. I don't understand why the sub projects depend on external binaries and not the code. It would be nice to have some pointer on how to develop on the project.

Anyway, I wanted to post something that works and can be tested. Let me know what you think. Before merging I will revert those changes off course.
Hey!

Nice project!
I would like to have a bit of syntactic sugar: it would be nice to select the value field by an annotation to avoid the overhead of overriding the `value` method. Here is an example:

```
sealed abstract class Code(@Value val value: Int, val door: String) extends IntEnumEntry
```
Is it realizable?