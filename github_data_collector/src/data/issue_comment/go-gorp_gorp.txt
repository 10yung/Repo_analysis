Without this change, the test will run with gorp v2.2.0.
This PR is for correcting #408 .

The conditions for using the default value specified in the tag have been modified as follows.

### before

If there is a default value specified by the tag, always insert it.

### this fix

Only if the specified value is nil or Zero value, if there is a default value specified by the tag, it is inserted.


# Procedure and issue

[This](https://gist.github.com/kemokemo/c58d06201814c30def3613447a7405ac) is a sample.

1. Insert
```go
err = dbmap.Insert(&Comment{Name: "bob", Text: "Hello"})
```
2. Instead of “bob” specified at the time of Insert, “No Name” specified as a default value by a tag is inserted into Name.

<img width="786" alt="スクリーンショット 2019-11-03 23 13 36" src="https://user-images.githubusercontent.com/12206485/68086454-9b40bb80-fe8f-11e9-9adb-60de6289b5e8.png">

# Environment

My operating environment is as follows.

* OS: macOS Catalina 10.15.1
* Go: Ver. 1.13.4
* gorp: [03c0a1b](https://github.com/go-gorp/gorp/commit/03c0a1b1694b62e7517bd2282d485bae5d9cd314)
* DB: PostgreSQL Ver. 12.0-2 on docker

# Memo

This behavior seems to be related to the #209 .
Could be considered a way to supersede #406

Adds a Cache interface + uses it in `columnToFieldIndex`.  This can be simply backed by ` &sync.Map{}`, or a more complex cache library like [ristretto](https://github.com/dgraph-io/ristretto).  No new deps, but still gets the same category of performance increases described in #406
Recommended to use arrays instead of varargs, as the computer may struggle with the inefficiency of 3,000+ value vararg function calls.
* QuerySuffix should be empty string
* Fixes oracle data types
The issue #394 raises a very typical use case for fields that are not physically present in the table as a column, however, they are computed on reads.

For example, if I want to have a `full_name` property populated in ` type User struct { f_name string, s_name string, full_name string}` for a table `User = { f_name, s_name }` the query
```
dbMap.SelectOne(&user, 
"select f_name, s_name, concat(f_name, s_name) full_name" from user...)
```
will successfully map the result as expected, however, the **inserts will fail**.

If I ignore `full_name` field via `db:"-"`, inserts will work as expected, but **reads will raise `NoFieldInTypeError`**. Despite this is a "non-fatal error", it breaks the old codebase that expects no errors.

This change introduces a new field Tag `"readonly"` that behaves exactly as a transient field (`db.go#readStructColumns` maps such column to `ColumnMap` with `Transient=true`) , except `gorp.go#columnToFieldIndex` won't skip it for mapping select results.

Tested locally with postgres db.

@nelsam @hinet
sql parameters for mssql, `'@p1', '@p2', ... '@pN',` on `func (d SqlServerDialect) BindVar`
SQL execution error occurs on using from "rubenv/sql-migrate".
The error message is below:
`Incorrect syntax near the keyword '?'`

It would be appreciated fixing to return sql parameters for "denisenkom/go-mssqldb".
```
func (d SqlServerDialect) BindVar(i int) string {
	//return "?"
	return fmt.Sprintf("@p%d", i+1)
}
```

Thank you for your hard work.
Example:

```golang
package main

import (
	"database/sql"
	"fmt"

	_ "github.com/lib/pq"

	"gopkg.in/gorp.v2"
)

type Foo struct {
	ID  int64  `db:"id,primarykey"`
	Bar string `db:"bar"`
}

func main() {
	db, _ := sql.Open("postgres", "postgresql://...")

	dbMap := gorp.DbMap{Db: db, Dialect: gorp.PostgresDialect{}}
	dbMap.AddTableWithName(Foo{}, "foo").SetKeys(true, "ID")
	foo, err := dbMap.Get(Foo{}, 999) // There is no row corresponding to id = 999
	fmt.Println(foo, err) // The output will be nil, nil
}
```

`DbMap.Get()` returns `(nil, nil)` if no row is found.
I think it should returns `(nil, error)` if gorp cannot find any record.

Is this a bug?
or is there any reason?