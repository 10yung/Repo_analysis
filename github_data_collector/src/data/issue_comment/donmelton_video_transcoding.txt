I use Plex DVR with an HDHomeRun and the files are stored as MPEG2 videos. These files are huge so I want to transcode to m4v. Default and --quick (both with --m4v) seemed to produce good results on a 3 hour 1080p original. Quick was obviously way faster. File size went from 18GB to 5GB.

Just wondering there are settings that might get that file smaller or encode it faster.
I have installed dependencies with `Homebrew 2.2.0`.

However, I get the following error when I run **transcode-video**:
`user$  transcode-video --scan /Volumes/BLURAY_DISC`
`/usr/local/bin/transcode-video: HandBrakeCLI not available`

I have installed both the Formula `handbrake 1.3.0` and the Cask `handbrake 1.2.2`.
Hello,

Have you considered using [VMAF](https://github.com/Netflix/vmaf) and/or compressibility check in your framework?

The workflow that I have in mind is this one:

1. Choose a vmaf quality that is acceptable for you. 80%? 60%?

1. encode a small part of the original video (5% of the video in 30 seconds clips, spread equally to all video) in crf x

2. calculate vmaf of that clip, if the vmaf is high, then increase crf in order to decrease bitrate and go to step 1. If the vmaf is low, then decrease crf in order to increase bitrate and go to step 1. If the vmaf quality is ok, then you have your crf value for that video that wastes no bitrate.

1. Encode the whole video and inspect or vmaf it.
There may be a super simple solution to this that I'm not seeing, so my apologies if so. 

Since updating to a more recent version, when using Notepad on Windows, all logs are missing formatting making them difficult to read (Essentially all line breaks are missing). Opening the log in virtually any other text editor shows the correct formatting intact.

Is there anything I can do so log files retain formatting when opened in Notepad? The older version of video_transcoding I was using was before #213, so I'm wondering if that change made the difference?
It's been quite a while since I'd updated my video-transcoding gem or any of the tools it was using. I did a big run through today and see this pop up at the beginning of my logs:

> Cannot load nvEncodeAPI64.dll
Cannot load nvEncodeAPI64.dll
Cannot load nvEncodeAPI64.dll
Cannot load nvEncodeAPI64.dll

I'm in a Windows environment.

I'm not using hardware encoding, but I take it this relates to that? Anything to be concerned over? 

Log attached here:
[Stabbing Melons with Director Alexandre O. Philippe.mkv.log](https://github.com/donmelton/video_transcoding/files/3364141/Stabbing.Melons.with.Director.Alexandre.O.Philippe.mkv.log)

Hi @donmelton 
I have an official question! When adding (not burning) subtitles, is there a way to have the "title" field copied as well? I don't see it in the help or readme. With anime in particular you often have multiple English subtitles: studio, improved Disney re-release, and "signs" with subs only for relevant in-movie signs. Using ` --add-subtitle all` works as expected but the detailed names aren't copied over so it isn't clear which English sub is which.

Is there a way to do this today, or can I submit a feature request to copy existing subtitle descriptions when the `--add-subtitle` switch is called?

Thanks!

Here are mediainfo examples.

Source:
```
Text #1
ID                                       : 4
Format                                   : PGS
Muxing mode                              : zlib
Codec ID                                 : S_HDMV/PGS
Codec ID/Info                            : Picture based subtitle format used on BDs/HD-DVDs
Duration                                 : 2 h 2 min
Bit rate                                 : 22.7 kb/s
Count of elements                        : 2012
Stream size                              : 19.9 MiB (0%)
Title                                    : Ghibli
Language                                 : English
Default                                  : No
Forced                                   : No

Text #2
ID                                       : 5
Format                                   : PGS
Muxing mode                              : zlib
Codec ID                                 : S_HDMV/PGS
Codec ID/Info                            : Picture based subtitle format used on BDs/HD-DVDs
Duration                                 : 1 h 59 min
Bit rate                                 : 25.8 kb/s
Count of elements                        : 1778
Stream size                              : 22.1 MiB (0%)
Title                                    : Disney
Language                                 : English
Default                                  : Yes
Forced                                   : Yes

Text #3
ID                                       : 6
Format                                   : PGS
Muxing mode                              : zlib
Codec ID                                 : S_HDMV/PGS
Codec ID/Info                            : Picture based subtitle format used on BDs/HD-DVDs
Duration                                 : 2 h 1 min
Bit rate                                 : 28.2 kb/s
Count of elements                        : 2178
Stream size                              : 24.4 MiB (0%)
Title                                    : SDH
Language                                 : English
Default                                  : No
Forced                                   : No
```

and transcoded:
```
Text #1
ID                                       : 4
Format                                   : PGS
Codec ID                                 : S_HDMV/PGS
Codec ID/Info                            : Picture based subtitle format used on BDs/HD-DVDs
Duration                                 : 2 h 4 min
Language                                 : English
Default                                  : No
Forced                                   : No

Text #2
ID                                       : 5
Format                                   : PGS
Codec ID                                 : S_HDMV/PGS
Codec ID/Info                            : Picture based subtitle format used on BDs/HD-DVDs
Duration                                 : 2 h 1 min
Language                                 : English
Default                                  : No
Forced                                   : No

Text #3
ID                                       : 6
Format                                   : PGS
Codec ID                                 : S_HDMV/PGS
Codec ID/Info                            : Picture based subtitle format used on BDs/HD-DVDs
Duration                                 : 2 h 1 min
Language                                 : English
Default                                  : No
Forced                                   : No
```

# Proposal to change default surround audio format and bitrate

Let me just cut to the chase...:) I propose that the default 5.1 surround audio format and bitrate of `transcode-video` be changed from Dolby Digital (AC-3) at 640 Kbps to Dolby Digital _Plus_ (DD+ or E-AC-3) at 384 Kbps.

What!?

It _is_ inevitable that our default surround audio format and bitrate will change. The only question is when. And I want to do that sooner rather than later.

Please remember that I'm only proposing that we change the default. Not to somehow disallow AC-3 at 640 Kbps. I'm not _completely_ insane. :)

AC-3 is an ancient audio compression format, even older than MP3. Achieving transparency with it requires using close to its maximum bitrate of 640 Kbps. And that bitrate is more that 10% of our target video bitrate for 1080p content. That's just crazy.

What's even crazier is when you consider that, by default, each surround track is duplicated, i.e. `transcode-video` creates two output tracks, one in 5.1 AC-3 track at 640 Kbps and one in stereo AAC track at 160 Kbps. And that's a combined bitrate of over 13% of our 1080p target.

While this strategy _is_ "portable," it has never been a good way to achieve my original "smaller" goal for the project. :/

So, our audio footprint needs to get smaller. And wouldn't it be nice if we could do that and improve quality at the same time?

I had hoped that we could transition to multichannel AAC audio since HandBrake and FFmpeg can already create 7.1 channels with it. But, other than desktop PCs, native 5.1 AAC support is only available on some Android-based devices while 7.1 support is essentially non-existant. :(

And it's clear that the PC, mobile device, TV and home theater industries are now supporting DD+ decoding or passthrough pretty much everywhere. In fact, that transition has already happened. So DD+ it is.

It's also clear that streaming services prefer DD+ as their surround format. In fact, Netflix uses DD+ exclusively for surround audio. They won't even serve up AC-3.

Which means those media files with surround audio that you "acquired" from your Uncle Torrance (you know who I mean!) are in DD+ format. :)

Why is DD+ so popular? Because you can get as good or even better quality with DD+ at half the bitrate of AC-3.

Did you know that all the streaming services use 5.1 DD+ at only 192 Kbps as their default, stepping up to 384 Kbps if you have a better connection and sometimes 640 Kbps if you have  bandwith for video at 10 Mbps or more?

Here are the (more or less merged) surround bitrate guidelines from [Apple](https://developer.apple.com/documentation/http_live_streaming/hls_authoring_specification_for_apple_devices#//apple_ref/doc/uid/TP40016596-CH2-SW1) and [Roku](https://sdkdocs.roku.com/display/sdkdoc/Audio+and+Video+Support) for AC-3 and DD+:

Channels | AC-3 | DD+
--- | --- | ---
5.1 (surround) | 384 Kbps | 192 Kbps
7.1 (surround) | - | 384 Kbps
Nominally 16 (with Dolby Atmos) | - | 384-768 Kbps

Obviously the other reason for DD+'s popularity is Dolby Atmos support, which is unavailable in AC-3.

Anyway, DD+ at 384 Kbps seems to be the sweet spot, the best compromise between size and quality. And my own testing confirms that. It sounds just as good or better than AC-3 at 640 Kbps to me.

In fact, if I re-transcode a DD+ track at 384 Kbps to AC-3 at 640 Kbps, I'm hard pressed to tell the difference between that and an original AC-3 track at 640 Kbps. Which means I'm not even worried about any possible dynamic re-transcoding by my Plex Media Server.

Here's how I would describe this proposed change within the built-in `--help` output of `transcode-video`:


```
    --ac3-encoder ac3|eac3
                    set AC-3 audio encoder (default: eac3)
    --ac3-bitrate 384|448|640|768|1536
                    set AC-3 surround audio bitrate
                      (default for ac3: 640; default for eac3: 384)
```

So, to get the current behavior, only `--ac3-encoder ac3` would be required on the command line. Thus making the transition easier.

Please try to create some audio yourself with DD+ at 384 Kbps and see how it sounds. I tested on multiple stereo and surround systems as well as high-quality stereo headphones using passthrough and even dynamic re-transcoding by Plex or explicit re-transcoding at the command line.

I would love to hear from @samhutchins, @JMoVS, @khaosx, @klogg416, @rhapsodians, @damorrison, @vr8hub, @dkoenig01, @ericcardenas, @arikalish, @RodBrown1988, @chrispoole643, @elliotclowes and anyone else from our various audio threads over the years or elsewhere about this proposal. Thanks!
# Need help evaluating "one weird trick" to improve AVBR ratecontrol

I need help evaluating an enhancement to my average variable bitrate (AVBR) ratecontrol system, i.e. the new `--avbr` option.

Considering how much some of you really like AVBR and think it's on par with or even better than my special, or default, ratecontrol system, why does it even need enhancement?

Well, there is one situation where I think AVBR can sometimes choose too low of a bitrate to render a portion of video. This is _after_ a prolonged spike in bitrate due to exceptionally noisy content.

To be fair to AVBR, this problem is not even perceptible most of the time to most users. You really have to be looking up close to see it. For me, my I need to be less than two feet away from my Retina 5K iMac. And it's not really an issue at all when I'm watching my 80-inch HDTV from across the room.

But I'm a perfectionist. :)

A good way to demonstrate the problem is by transcoding an episode of "Game of Thrones" or any other TV show prefaced with that annoying animated HBO "static" logo.

While AVBR will render the logo sequence perfectly, the scene immediately following it can seem... less than perfect. Mind you, it won't exhibit blockiness, color banding or artifacts but it might not look quite as sharp as the rest of the video.

And this lack of sharpness only lasts for a few seconds before everything is back to normal.

For a "Game of Thrones" episode, this isn't much of an issue because usually the logo is followed my the main title sequence and any reduction in bitrate is not apparent.

But for those episodes with a "cold open," this might be more noticeable. For example, the first episodes of seasons 1 and 7, "Winter Is Coming" and "Dragonstone."

You can also see this problem in the scene immediately following the digital dream sequence from chapter 3 of "Prometheus (2012)" that @samhutchins loves to test. Again, that noisy dream sequence is rendered perfectly. But afterwards things are not as sharp for a few seconds.

There might be other instances of this issue but I haven't been able to find any after transcoding over 700 videos using AVBR.

So, why does this happen at all?

AVBR is a variable bitrate system. That's what the "V" in the abbreviation indicates. :) But it's also an average bitrate system. And while variability allows it to render those extremely noisy scenes well, sticking to the average can cause the bitrate in quiet scenes following that extreme noise to dip below desired levels.

To be clear, the magic sauce that I already added to AVBR, disabling Macroblock-tree ratecontrol, significantly reduces wild swings in bitrates. But it might not always be enough as these examples I've described demonstrate.

Fortunately, I've discovered "one weird trick" which can fix this problem. :)

However, I can't just include this new trick in AVBR by default. :( Because there's one video I've found where applying it looks much worse. And there are probably others.

Here's how you can apply the "one weird trick" yourself:

```
transcode-video --avbr --encoder-option qcomp=0  "/path/to/Movie.mkv"
```

So, what the Sheol is that `--encoder-option qcomp=0` voodoo? Simple. It's just manipulating the quantizer curve compression factor. :) Let me explain...

Ordinarily the `qcomp` setting within the x264 encoder doesn't have much affect on output because Macroblock-tree ratecontrol is used instead of `qcomp` for weighting frame quality based on complexity. But because I've already disabled the MB-tree in AVBR, `qcomp` has a big impact.

The default value of `qcomp` is `0.6` (or 60 percent) and its valid value range is between `0` and `1` (or 100 percent).

Setting `qcomp` to `0` effectively means that x264 shouldn't evaluate complexity to assess frame quality. This further reduces bitrate variability.

And for those "Game of Thrones" episodes, everything looks great with `qcomp=0`. Both the noisy HBO logo and any video immediately after or even later. It's all good.

And that dark scene in "Prometheus (2012)" after the noisy dream sequence looks perfect with `qcomp=0`. However, the dream sequence itself is doesn't looks quite as good. You can't have everything.

What about that one video that looks much worse? Apply `qcomp=0` to the movie "Lock, Stock and Two Smoking Barrels (1998)" and... Jiminy! It really looks awful.

And while `qcomp=0.4` (a setting of 40 percent) still looks OK with "Lock, Stock and Two Smoking Barrels (1998)," it's not enough of an improvement with the other cases to be worth including as a default in AVBR.

So, why am I telling you all this?

Mostly so you can know about the trick yourselves if you want to use it.

But also I would like advice on whether I should wrap the `--encoder-option qcomp=0` voodoo in some clever (and much shorter) option name for others to use. Or should I just document this stuff in the "README" file or our eventually arriving Wiki?

I would love to hear from @samhutchins, @elliotclowes, @khaosx and anyone else who commented on the original AVBR issue #248, as well as our usual gang of commenters like @JMoVS, @klogg416, @vr8hub, @damorrison, @rhapsodians and anyone else who has an opinion.

Thanks in advance!
Long ago in a galaxy far, far away… (It was a few days and it was here, but that doesn't have the same _je ne sais quoi._)

… you showed me a sample (handbuilt) log and remux command. I have some questions about the remux command.

I'm asking because I don't know the ins and outs of any of the third-party players (VLC, Plex, Kodi, mpv, etc.), because I've always used iTunes here-to-date. I'm just trying to determine what is personal preference vs what is needed/suggested/works better with various players.

````
File 'MARVEL'S AVENGERS- INFINITY WAR - BLU-RAY_t00.mkv': container: Matroska
Track ID 0: video (MPEG-4p10/AVC/h.264)
Track ID 1: audio (FLAC) (English DTS-HD MA lossless conversion)
Track ID 2: audio (DTS) (English DTS core of DTS-HD MA)
Track ID 3: audio (AC-3) (English) AD
Track ID 4: audio (AC-3)
Track ID 5: audio (AC-3)
Track ID 6: audio (AC-3)
Track ID 7: audio (AC-3) (English) Commentary
Track ID 8: subtitles (HDMV PGS) (English) SDH
Track ID 9: subtitles (HDMV PGS)
Track ID 10: subtitles (HDMV PGS)
Track ID 11: subtitles (HDMV PGS)
Track ID 12: subtitles (HDMV PGS) (English) Commentary SDH
Track ID 13: subtitles (HDMV PGS) (French) Commentary
Track ID 14: subtitles (HDMV PGS) (Spanish) Commentary
Track ID 15: subtitles (HDMV PGS) (Portuguese) Commentary
Track ID 16: subtitles (HDMV PGS) (English) Forced
Track ID 17: subtitles (HDMV PGS) (French) Forced
Track ID 18: subtitles (HDMV PGS) (Spanish) Forced
Track ID 19: subtitles (HDMV PGS) (Portuguese) Forced
Chapters: 20 entries

mkvmerge --output 'Avengers_ Infinity War (2018).mkv'
         --track-order 0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:16,0:8,0:9… (and so on)
         --compression -1:none
         --title ''
         --default-track 0
         --default-track 16
         --forced-track 16
         --track-name 3:AD
         --track-name 7:Commentary
         --subtitle-tracks 16,8,9,10,11,12,13,14,15,17,18,19
         --track-name 16:Forced
         --track-name 8:SDH
         --track-name 12:'Commentary SDH'
         --track-name 13:Commentary
         --track-name 14:Commentary 
         --track-name 15:Commentary 
         --track-name 17:Forced 
         --track-name 18:Forced 
         --track-name 19:Forced 
         --no-chapters "MARVEL'S AVENGERS- INFINITY WAR - BLU-RAY_t00.mkv" 
         --chapters "MARVEL'S AVENGERS- INFINITY WAR - BLU-RAY_t00.mkv.chapters.xml"
````

1. Why no title?
2. Was there a reason you didn't specify the language as part of --track-name on the tracks (both audio and video) where it was non-English?
3. You don't use the chapters in the original MKV and specify it externally here. Was there a reason you didn't specify them in MakeMKV when building the gen1 .mkv? And I'm curious why you're specifying them at all, since you told me in the next message that messing with chapter names led to madness and not the good kind. 
4. You move the forced (lang) track to the front of the subtitle track line, in addition to specifying it as a default track and a forced track. Does moving it matter when you do the other two, or do some players need it to be physically first as well?

Thanks for the education. I'm dumping some of the space my high school calculus takes up in my brain to make room for all this. So far the calculus was easier.
I think I know the answer to this, but just making sure.

For movies that vary their perspective, e.g. Dark Knight, I assume we shouldn't crop at all when transcoding. Correct?

(I did a few searches here and couldn't find anything; I did find a reference to Dark Knight and Grand Budhapest Hotel in an old issue where --no-constrain-crop was made the default, but it didn't reference specifically what to do with them.)