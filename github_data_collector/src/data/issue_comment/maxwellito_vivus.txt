I'm having some trouble with the [animate fill hack](https://github.com/maxwellito/vivus/blob/master/hacks.md). When using the hack with scenario and data-duration, the finished class is also delayed, and I can't control this delay.

**JS**
`new Vivus(
    'back2',
    {
        type: 'scenario'
    },
    function (obj) {
        obj.el.classList.add('finished');
    }
);`

**HTML/SVG**
`<path data-duration="50" data-start="100"></path>`

[See example here](https://youtu.be/M2B3wuf3hC8)
**Vivus version**:
Vivus Instant & 0.4.4
**Browser**:
Chrome
**Steps to reproduce it**:
Use an SVG with sharp angle (produced from Illustrator) in Vivus 

**Reproduced Issue**:
https://jsfiddle.net/2t1kb9yr/
Â»Note the top left corner of the left-most part of the "U", and you'll see the break in the corner. 

I might be just missing something, but I couldn't find anywhere how to make a more compliant SVG or a setting to pass into Vivus. Thank you for making something so awesome for everyone to use.

![Screen Shot 2019-08-26 at 4 50 58 PM](https://user-images.githubusercontent.com/22450894/63726045-bead1180-c821-11e9-8d2e-58428b270422.png)

### After animating with vivus, some lines appear to be thicker than others.

When i disable the plugin or watch it in firefox. Everything looks normal.

For a problem, please fill the following:

**Vivus version**: current ( 0.4.4 )

**Browser**: Chrome, MacOSX

**Steps to reproduce it**: Open attachement and put it into an object and animate it.

Screenshot:
![Bildschirmfoto 2019-05-06 um 12 28 01](https://user-images.githubusercontent.com/5037624/57220163-94c5aa00-6ffa-11e9-8092-e134ae5462dc.png)



[Files.zip](https://github.com/maxwellito/vivus/files/3147502/Files.zip)


Hi,
now we have many monitors with many refresh rates going up to 144hz and beyond.
I've made some icons and the animations on them runs faster on 144hz monitor than on 60hz.|
Will it be possible to limit FPS by skipping frames if there are more than desired value e.g 60?

It could be done like this:
https://codepen.io/rishabhp/pen/XKpBQX

Desired fps could be provided in vivus object options.
### Please define your problem or issue as clear as possible.

For a problem, please fill the following:

**Vivus version**: all

**Browser**: all

**Steps to reproduce it**: 
1) A standard fill won't get animated, but...
2) Convert the fill to a path-based pattern (easy, see below and see the jsFiddle) and it *will* be nicely animated by Vivus

note: although changing the fill method is relatively easily done enough by hand, vivus has the capability to be used by regular people (not SVG experts) for whom this task is really too much.  This capability could be added to vivus to automatically do the conversion for them, see JSFiddle and below for what is involved.

**JSFiddle link (or similar platform)**:
http://jsfiddle.net/davea0511/Lg376abm/

*No personal website will be allowed, only sandboxed platform where the code is isolated and can be hacked.*

*[note]*
I apologize for not doing the parsing code to make this automatic in vivus.  I'm not a programmer, but a total hack and I'd probably screw everything up.  I just kind of fell into this solution and thought it worth sharing.  To do it all you need is to change the fill to work like so:

    <pattern id="pathFill1" patternUnits="userSpaceOnUse" width="2" height="30" >
        <path stroke=[fill color] d="M 1,0 l 0,30" stroke-width="2"/>
    </pattern>
    <path fill="url(#pathFill1)" ...>

just add this code, and put a variable in there for [fill color]

Pattern notes:
1)  I used a pattern height of 30, but if set to something big like 200 the animation will be one long fill instead of looking like closing blinds.  
2) I used a pattern width of 2, but it doesn't matter so long as the path stroke origin is half of the width, and the stroke-width must be the same as the pattern width, or more.  Perhaps a wider width will be easier on the browser?  like width="100", d="M 50 ...", stroke-width=100? I don't know.  Just a thought.
3) Combinations of pattern sizes and path stroke definitions create some pretty cool patterns, plaid for example, if you wanted that, or diamonds or dots.  Not sure how useful this is ... but there it is.

*[/note]*

When a Vivus element is in a scroll container using `overflow: auto` it will not appear because [`isInViewport`](https://github.com/maxwellito/vivus/blob/master/src/vivus.js#L647) uses `document` as the only possible scroll container.

This could be solved by allowing the settings object to specify a `scrollContext` for the SVG, or maybe allowing an option to disable `isInViewport` check.

Hello Maxwellito !

First thanks for your lib, it works well and that's nice !
I was playing around with some SVG when i found a path element in some random SVG used only to fill areas: the stroke attribute was set to "none".
This is breaking the animation when the `oneByOne` option is used because you have to wait for the invisible path to finish before going on.

I made a very simple modification to remove paths that have stroke set to none. Do you think it would be interesting to add this ? ( I can make a P.R. if you want)

``` javascript
Vivus.prototype.mapping = function () {
  var i, paths, path, pAttrs, pathObj, totalLength, lengthMeter, timePoint;
  timePoint = totalLength = lengthMeter = 0;
  paths = this.el.querySelectorAll('path');

 // START: Added part
  var cleanPaths = [];
  for (i = 0; i < paths.length; i++) {
    path = paths[i];
    if(path.getAttribute("stroke") === "none"){
      continue;
    }
    cleanPaths.push(path);
  }
  paths = cleanPaths;
// END: Added part

  for (i = 0; i < paths.length; i++) {
    path = paths[i];
    pathObj = {
      el: path,
      length: Math.ceil(path.getTotalLength())
    };
  ...
};
```
