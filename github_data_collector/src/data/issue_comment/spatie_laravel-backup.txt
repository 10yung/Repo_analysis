 Class 'League\CommonMark\Environment' not found (View: /home/videocyp/app/vendor/laravel/framework/src/Illuminate/Mail/resources/views/html/footer.blade.php) {"exception":"[object] (Facade\\Ignition\\Exceptions\\ViewException(code: 0): Class 'League\\CommonMark\\Environment' not found (View: /home/videocyp/app/vendor/laravel/framework/src/Illuminate/Mail/resources/views/html/footer.blade.php) at /home/videocyp/app/vendor/laravel/framework/src/Illuminate/Mail/Markdown.php:103)
Hello, i have a Laravel v6.9.0 and Spatie Backup 6.7.6, then configured on the provider with something like this:
`
 BackupHasFailed::class => [ 'App\Listeners\BackupExecutionEventHandler@failed' ],

`
I started the backup with the command and it fail on the notification, this because i have no email configuration; this is something i expected. What i didn't expected is that if i get an error the error event isn't fired, any ideas? Other events like BackupZipWasCreated work as expected.

Thanks

My backups stopped working after running composer update.

I am using mysqldump 10.17 and PHP  7.3.12 on Centos 7.6

Can you help me?

This is the error I am getting:

`Backup failed because The dump process failed with exitcode 2 : Misuse of shell builtins : .
#0 /var/www/html/production-manager/vendor/spatie/db-dumper/src/DbDumper.php(246): Spatie\DbDumper\Exceptions\DumpFailed::processDidNotEndSuccessfully(Object(Symfony\Component\Process\Process))
#1 /var/www/html/production-manager/vendor/spatie/db-dumper/src/Databases/MySql.php(190): Spatie\DbDumper\DbDumper->checkIfDumpWasSuccessFul(Object(Symfony\Component\Process\Process), '/var/www/html/p...')
#2 /var/www/html/production-manager/vendor/spatie/laravel-backup/src/Tasks/Backup/BackupJob.php(250): Spatie\DbDumper\Databases\MySql->dumpToFile('/var/www/html/p...')
#3 [internal function]: Spatie\Backup\Tasks\Backup\BackupJob->Spatie\Backup\Tasks\Backup\{closure}(Object(Spatie\DbDumper\Databases\MySql), 'mysql')
#4 /var/www/html/production-manager/vendor/laravel/framework/src/Illuminate/Support/Collection.php(638): array_map(Object(Closure), Array, Array)
#5 /var/www/html/production-manager/vendor/spatie/laravel-backup/src/Tasks/Backup/BackupJob.php(253): Illuminate\Support\Collection->map(Object(Closure))
#6 /var/www/html/production-manager/vendor/spatie/laravel-backup/src/Tasks/Backup/BackupJob.php(167): Spatie\Backup\Tasks\Backup\BackupJob->dumpDatabases()
#7 /var/www/html/production-manager/vendor/spatie/laravel-backup/src/Tasks/Backup/BackupJob.php(143): Spatie\Backup\Tasks\Backup\BackupJob->createBackupManifest()
#8 /var/www/html/production-manager/vendor/spatie/laravel-backup/src/Commands/BackupCommand.php(52): Spatie\Backup\Tasks\Backup\BackupJob->run()
#9 [internal function]: Spatie\Backup\Commands\BackupCommand->handle()
#10 /var/www/html/production-manager/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(32): call_user_func_array(Array, Array)
#11 /var/www/html/production-manager/vendor/laravel/framework/src/Illuminate/Container/Util.php(36): Illuminate\Container\BoundMethod::Illuminate\Container\{closure}()
#12 /var/www/html/production-manager/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(90): Illuminate\Container\Util::unwrapIfClosure(Object(Closure))
#13 /var/www/html/production-manager/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php(34): Illuminate\Container\BoundMethod::callBoundMethod(Object(Illuminate\Foundation\Application), Array, Object(Closure))
#14 /var/www/html/production-manager/vendor/laravel/framework/src/Illuminate/Container/Container.php(590): Illuminate\Container\BoundMethod::call(Object(Illuminate\Foundation\Application), Array, Array, NULL)
#15 /var/www/html/production-manager/vendor/laravel/framework/src/Illuminate/Console/Command.php(202): Illuminate\Container\Container->call(Array)
#16 /var/www/html/production-manager/vendor/symfony/console/Command/Command.php(255): Illuminate\Console\Command->execute(Object(Symfony\Component\Console\Input\ArgvInput), Object(Illuminate\Console\OutputStyle))
#17 /var/www/html/production-manager/vendor/laravel/framework/src/Illuminate/Console/Command.php(189): Symfony\Component\Console\Command\Command->run(Object(Symfony\Component\Console\Input\ArgvInput), Object(Illuminate\Console\OutputStyle))
#18 /var/www/html/production-manager/vendor/spatie/laravel-backup/src/Commands/BaseCommand.php(16): Illuminate\Console\Command->run(Object(Symfony\Component\Console\Input\ArgvInput), Object(Symfony\Component\Console\Output\ConsoleOutput))
#19 /var/www/html/production-manager/vendor/symfony/console/Application.php(1011): Spatie\Backup\Commands\BaseCommand->run(Object(Symfony\Component\Console\Input\ArgvInput), Object(Symfony\Component\Console\Output\ConsoleOutput))
#20 /var/www/html/production-manager/vendor/symfony/console/Application.php(272): Symfony\Component\Console\Application->doRunCommand(Object(Spatie\Backup\Commands\BackupCommand), Object(Symfony\Component\Console\Input\ArgvInput), Object(Symfony\Component\Console\Output\ConsoleOutput))
#21 /var/www/html/production-manager/vendor/symfony/console/Application.php(148): Symfony\Component\Console\Application->doRun(Object(Symfony\Component\Console\Input\ArgvInput), Object(Symfony\Component\Console\Output\ConsoleOutput))
#22 /var/www/html/production-manager/vendor/laravel/framework/src/Illuminate/Console/Application.php(93): Symfony\Component\Console\Application->run(Object(Symfony\Component\Console\Input\ArgvInput), Object(Symfony\Component\Console\Output\ConsoleOutput))
#23 /var/www/html/production-manager/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php(131): Illuminate\Console\Application->run(Object(Symfony\Component\Console\Input\ArgvInput), Object(Symfony\Component\Console\Output\ConsoleOutput))
#24 /var/www/html/production-manager/artisan(37): Illuminate\Foundation\Console\Kernel->handle(Object(Symfony\Component\Console\Input\ArgvInput), Object(Symfony\Component\Console\Output\ConsoleOutput))
#25 {main}
Backup failed because: The dump process failed with exitcode 2 : Misuse of shell builtins : .
`
When passing the "socket" option in "dump" section of the mysql part in database.php the host part will not be ignored. Now it does, so socket connection is possible.
I need to create auto-backup of 2 databases not LARAVEL applications. And put them either in 2 different archives or in 1 archive?
Trying to backups but it is failing with the next error:

`Starting backup...
Dumping database [**********]...
Backup failed because The dump process failed with exitcode 1 : General error : sh: line 0: fg: no job control
Usage: mysqldump [OPTIONS] database [tables]
OR     mysqldump [OPTIONS] --databases [OPTIONS] DB1 [DB2 DB3...]
OR     mysqldump [OPTIONS] --all-databases [OPTIONS]
For more options, use mysqldump --help
.`

Any ideas how to fix that? Config is correct and running mysql dump manually it works.
When I try to run a backup for my mariadb database I get the following error message:

The dump process failed with exitcode 2 : Misuse of shell builtins : mysqldump: Got error: 2002: "Can't connect to MySQL server on '127.0.0.1' (115)" when trying to connect

In my .env file I have set DB_SOCKET=/var/run/mysqld/mysqld.sock which works in my application.
Hi

i need to help please , when i run backup command on local host the db is exported empty but on host it's ok 

i need the backup to run on localhost important

* i use this code in laravel controller
Artisan::call('db:backup');
First of all, thank you for this great package.
It makes me sleep better at night.
The backups work great so far, but I'm struggling to exclude non-specific directories.

For example, I'm als using your media-library package.
In my backups, I'd like to include my original images, but exclude all conversions.
These conversions take up a lot of space and can easily be regenerated.

In my setup, conversions are saved in a subdirectory named 'conversions' per image.
So far I've not been able to exclude those, without specifying each directory separately.

What do I have to add to the exclude array to achieve this?
**Setup**

In our setup we have one shared `main` schema and then each tenant has their own schema `tenant_slug`.

I would like to store the backups in a subfolder for each tenant. So my ideal structure in the S3 bucket is:

```
App-staging(main folder)
  Main
    main.sql
  Tenant_1
    tenant_1.sql
  Tenant 2
    tenant_2.sql
App-production(main folder)
  Main
    main.sql
  Tenant_1
    tenant_1.sql
  Tenant 2
    tenant_2.sql
```

In order to accomplish this I hacked a bit. I set the `root` in my `filesystems` config to my APP_NAME, which take cares of the top level folder:

```
's3-backup' => [
            'driver' => 's3',
            'key' => env('AWS_KEY'),
            'secret' => env('AWS_SECRET'),
            'region' => env('AWS_REGION'),
            'bucket' => env('AWS_BACKUP_BUCKET'),
            'root' => env('APP_NAME')
        ],
```

Then I made a custom BackupDB commant (`php artisan backup:run-tenants`) that dynamically switches out the `backup.backup.name` in order to create the subfolders.

```
  public function handle()
    {
        config(['backup.backup.name' => "main"]);

        $this->call('backup:run', [
            '--filename' => 'main-' . Carbon::now()->format('Y-m-d-H-i-s') . '.zip',
            '--only-db' => true,
            '--db-name' => ['main']
        ]);

        $customers = Customer::all();

        foreach ($customers as $customer) {

            $customer->connect();

            config(['backup.backup.name' => "{$customer->slug}"]);

            Artisan::call('config:clear');
            
            $this->call('backup:run', [
                '--filename' => $customer->slug . '-' . Carbon::now()->format('Y-m-d-H-i-s') . '.zip',
                '--only-db' => true,
                '--db-name' => ['tenant']
            ]);
        }
    }
```

This correctly saves my backups into this folder structure:

```
App-staging(main folder)
  Main
    main.sql
  Tenant_1
    tenant_1.sql
  Tenant 2
    tenant_2.sql
App-production(main folder)
  Main
    main.sql
  Tenant_1
    tenant_1.sql
  Tenant 2
    tenant_2.sql
```

**Problem**

However, the problem comes when I try to `cleanup`. I cannot figure out a smart way to dynamically switch out directories in my custom Cleanup strategy. That already comes with an injected `BackupCollection` made from a `BackupDestination`. 

Do you have a suggestion on implementing subfolder storage and cleanup in a good way? :)  