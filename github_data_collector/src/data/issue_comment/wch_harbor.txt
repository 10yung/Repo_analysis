First of all, thank you for your work on this package!

I am trying to run docker containers that require environmental variables. In bash, the command would be something like `docker run --env SOME_VARIABLE_1=some_value_1 --env SOME_VARIABLE_2=some_value_2 my_docker_image`. However, I am strugling to make this work in `harbor`. I've tried the versions below to no avail. Is this supported? Where am I going wrong?

```
harbor::docker_run(
  image = 'my_docker_image',
  docker_opts = c(
    'SOME_VARIABLE_1' = 'some_value_1',
    'SOME_VARIABLE_2' = 'some_value_2')
  capture_text = TRUE)

harbor::docker_run(
  image = 'my_docker_image',
  docker_opts = '--env SOME_VARIABLE_1=some_value_1 --env SOME_VARIABLE_2=some_value_2)
  capture_text = TRUE)
```
Thanks a lot in advance for your help
Moving the discussion started in #10 to here. Some examples of using the Unix socket API using `curl`:

    library(curl)
    library(jsonlite)
    library(openssl)

    docker_auth <- function(username=Sys.getenv("DOCKER_USERNAME"),
                            password=Sys.getenv("DOCKER_PASSWORD"),
                            email=Sys.getenv("DOCKER_EMAIL"),
                            server_address=Sys.getenv("DOCKER_REGISTRY"),
                            encode=TRUE) {

      toJSON(
        list(
          username=unbox(username),
          password=unbox(password),
          email=unbox(email),
          auth=unbox(""),
          serveraddress=unbox(server_address)
        )
      ) -> auth_json

      if (encode) auth_json <- openssl::base64_encode(auth_json)

      auth_json

    }

    docker_handle <- function(verbose=FALSE) {
      h <- curl::new_handle()
      h <- curl::handle_reset(h)
      h <- curl::handle_setopt(h, UNIX_SOCKET_PATH = "/var/run/docker.sock")
      h <- curl::handle_setopt(h, VERBOSE = verbose)
      h <- curl::handle_setheaders(h,
                                   `Content-Type` = "application/json",
                                   `X-Registry-Auth` = docker_auth())
      h
    }

    # Auth check ------------------------------------------------------------------------
    h <- docker_handle(TRUE)
    handle_setopt(h, copypostfields = docker_auth(encode=FALSE))
    res <- curl_fetch_memory(url = "http://v1.26/auth", handle = h)
    str(fromJSON(rawToChar(res$content)))

    # Docker info -----------------------------------------------------------------------
    h <- docker_handle()
    res <- curl_fetch_memory(url = "http://v1.26/info", handle = h)
    str(fromJSON(rawToChar(res$content)))

    # Docker version --------------------------------------------------------------------
    h <- docker_handle()
    res <- curl_fetch_memory(url = "http://v1.26/version", handle = h)
    str(fromJSON(rawToChar(res$content)))

    # Docker ping -----------------------------------------------------------------------
    h <- docker_handle()
    res <- curl_fetch_memory(url = "http://v1.26/_ping", handle = h)
    cat(rawToChar(res$content))

    # Data usage ------------------------------------------------------------------------
    h <- docker_handle()
    res <- curl_fetch_memory(url = "http://v1.26/system/df", handle = h)
    str(fromJSON(rawToChar(res$content)))

    # List images -----------------------------------------------------------------------
    h <- docker_handle()
    res <- curl_fetch_memory(url = "http://v1.26/images/json", handle = h)
    str(fromJSON(rawToChar(res$content)))

    # Search images ---------------------------------------------------------------------
    h <- docker_handle()
    res <- curl_fetch_memory(url = "http://v1.26/images/search?term=alpine&limit=10", handle = h)
    str(fromJSON(rawToChar(res$content)))

    # Pull an image ---------------------------------------------------
    h <- docker_handle(verbose = TRUE)
    handle_setopt(h, copypostfields = '')
    res <- curl_fetch_memory(url = "http://v1.26/images/create?fromImage=alpine&tag=latest", handle = h)
    cat(rawToChar(res$content))

    # List running containers -----------------------------------------------------------
    h <- docker_handle()
    res <- curl_fetch_memory(url = "http://v1.26/containers/json", handle = h)
    str(fromJSON(rawToChar(res$content)))

    # all: true/false
    # limit: int
    # size: true/false
    # filters: json
    h <- docker_handle()
    res <- curl_fetch_memory(url = "http://v1.26/containers/json", handle = h)
    str(fromJSON(rawToChar(res$content)))

    # Inspect a container ---------------------------------------------------------------

    # size: true/false
    h <- docker_handle(verbose = TRUE)
    res <- curl_fetch_memory(url = "http://v1.26/containers/b834259b9e9ed70cd00a43c9a539ab0601dab68a5966e531fea76ec91bc76940/json", handle = h)
    str(fromJSON(rawToChar(res$content)))

    # List container processes ----------------------------------------------------------

    # ps_args: string
    h <- docker_handle(verbose = TRUE)
    res <- curl_fetch_memory(url = "http://v1.26/containers/b834259b9e9ed70cd00a43c9a539ab0601dab68a5966e531fea76ec91bc76940/top", handle = h)
    str(fromJSON(rawToChar(res$content)))

    # Get container logs ----------------------------------------------------------------

    # follow: true/false
    # stdout: t/f
    # stderr: r/f
    # since: int
    # timestamps: t/f
    # tail: string
    h <- docker_handle(verbose = TRUE)
    res <- curl_fetch_memory(url = "http://v1.26/containers/b834259b9e9ed70cd00a43c9a539ab0601dab68a5966e531fea76ec91bc76940/logs?stdout=true&stderr=true", handle = h)
    cat(rawToChar(res$content[res$content > 0x09]))


    # Run a container -------------------------------------------------------------------
    h <- docker_handle()
    handle_setopt(h, copypostfields = '{"Image": "alpine", "Cmd": ["echo", "hello world"]}')
    res <- curl_fetch_memory(url = "http:/v1.26/containers/create", handle = h)
    str(fromJSON(rawToChar(res$content)))

I was looking at the source code of harbor to figure out why splashr wasn't working and  - I don't know if it's a good idea or not, but throwing it out there - I was wondering if it would be easier for debug & sanity check within functions to use R6 classes?

The structure for opening a docker would be something like `boat <- harbor$new('NameOfTheDocker')`

Other packages (let's say harbor) having dependency on harbor would also be R6 class being sub-class of the `harbor` class, for example:

```
splash <- R6Class('splash', 
inheritance = harbor::harbor, 
public = list(
initialize =  function(host = harbor::localhost) {
  harbor::docker_run(host,
                     image = "scrapinghub/splash",
                     detach = TRUE,
                     docker_opts = c("-p", "5023:5023",
                                     "-p", "8050:8050",
                                     "-p", "8051:8051"))
},
...
)
```


I forked the repo and will try to get a crack at it tonight, but if @hrbrmstr think it's a bad idea, I'll just let it go :) !

Cheers
Just keeping this https://github.com/hrbrmstr/splashr/issues/3 here for tracking purposes.
- [ ] Update README
- [ ] Remove `analogsea` as a dependency
- [ ] Go through the various "cloud" R pkgs and see which ones use an API for container ops and which ones just use `ssh`. The ones that use `ssh` should prbly just use the new built-in `ssh` host object.
- [ ] Make an example S3 host class for an API example in ^^
- [ ] Create a small library of useful "install" / "run" / "stop" functions (like `splashr`'s `docker.r`)
- [ ] Tests

@wch any plans to send this to CRAN?  I was thinking of getting `analogsea` to CRAN soon. We don't use `harbor` yet, but we could more easily if on CRAN 

@sckott just told me about this package via the thread on https://github.com/hadley/devtools/issues/710 Do you think it would make sense to have those four functions mentioned in that thread (or ones like them) in this package?
