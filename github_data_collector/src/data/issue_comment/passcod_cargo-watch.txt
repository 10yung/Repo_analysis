Howdy! This is the build failure I unfortunately get on OpenBSD 6.6-current
```
   --> /home/gigavinyl/.cargo/registry/src/github.com-1ecc6299db9ec823/nix-0.15.0/src/sys/statfs.rs:110:9
    |
109 |     pub fn optimal_transfer_size(&self) -> i32 {
    |                                            --- expected `i32` because of return type
110 |         self.0.f_iosize
    |         ^^^^^^^^^^^^^^^ expected i32, found u32
help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit
    |
110 |         self.0.f_iosize.try_into().unwrap()
    |

error[E0308]: mismatched types
   --> /home/gigavinyl/.cargo/registry/src/github.com-1ecc6299db9ec823/nix-0.15.0/src/sys/statfs.rs:391:9
    |
390 |     pub fn files_free(&self) -> i64 {
    |                                 --- expected `i64` because of return type
391 |         self.0.f_ffree
    |         ^^^^^^^^^^^^^^ expected i64, found u64
```
there appears to be newer versions of the `nix` package. Perhaps that's a place to start?
I've tried to use `cargo-watch` in my project.
As I'm using docker-compose for my database, there is a folder which is only accessible by root with my configuration which is also in `.gitignore`. I also tried to exclude this directory with the `ignore`-argument.

However, when executing `cargo-watch` I'm getting this error:

```
Error: I/O error: Permission denied (os error 13)
```

I think that the tool should also run with such files/folders inside my project.
I've fixed it temporarly with `chmod -R 777` but I don't think that is the way to go.

If this issue is accepted to be fixed I would be happy to contribute that part :+1: 


debug output:

```
$ cargo watch --debug -x run
>>> Load Git/VCS ignores: true
>>> Default ignores: ["*/.DS_Store", "*.sw?", "*.sw?x", "#*#", ".#*", ".*.kate-swp", "*/.hg/**", "*/.git/**", "*/.svn/**", "*.db", "*.db-*", "*/*.db-journal/**", "*/target/**"]
>>> All ignores: ["*/.DS_Store", "*.sw?", "*.sw?x", "#*#", ".#*", ".*.kate-swp", "*/.hg/**", "*/.git/**", "*/.svn/**", "*.db", "*.db-*", "*/*.db-journal/**", "*/target/**"]
>>> File updates debounce: 0.5 seconds
>>> Commands: ["cargo run"]
>>> Watches: ["."]
>>> Watchexec arguments: Args { cmd: ["cargo run"], paths: ["."], filters: [], ignores: ["*/.DS_Store", "*.sw?", "*.sw?x", "#*#", ".#*", ".*.kate-swp", "*/.hg/**", "*/.git/**", "*/.svn/**", "*.db", "*.db-*", "*/*.db-journal/**", "*/target/**"], clear_screen: false, signal: None, restart: true, debounce: 500, debug: true, run_initially: true, no_shell: false, no_vcs_ignore: false, no_ignore: false, once: false, poll: false, poll_interval: 500 }
*** glob converted to regex: Glob { glob: "target/**", re: "(?-u)^target(?:/?|/.*)$", opts: GlobOptions { case_insensitive: false, literal_separator: true, backslash_escape: true }, tokens: Tokens([Literal('t'), Literal('a'), Literal('r'), Literal('g'), Literal('e'), Literal('t'), RecursiveSuffix]) }
*** glob converted to regex: Glob { glob: "**/*.rs.bk/**", re: "(?-u)^(?:/?|.*/)[^/]*\\.rs\\.bk(?:/?|/.*)$", opts: GlobOptions { case_insensitive: false, literal_separator: true, backslash_escape: true }, tokens: Tokens([RecursivePrefix, ZeroOrMore, Literal('.'), Literal('r'), Literal('s'), Literal('.'), Literal('b'), Literal('k'), RecursiveSuffix]) }
*** glob converted to regex: Glob { glob: "**/db/**", re: "(?-u)^(?:/?|.*/)db(?:/?|/.*)$", opts: GlobOptions { case_insensitive: false, literal_separator: true, backslash_escape: true }, tokens: Tokens([RecursivePrefix, Literal('d'), Literal('b'), RecursiveSuffix]) }
*** glob converted to regex: Glob { glob: "**/world.txt/**", re: "(?-u)^(?:/?|.*/)world\\.txt(?:/?|/.*)$", opts: GlobOptions { case_insensitive: false, literal_separator: true, backslash_escape: true }, tokens: Tokens([RecursivePrefix, Literal('w'), Literal('o'), Literal('r'), Literal('l'), Literal('d'), Literal('.'), Literal('t'), Literal('x'), Literal('t'), RecursiveSuffix]) }
*** glob converted to regex: Glob { glob: "**/.env/**", re: "(?-u)^(?:/?|.*/)\\.env(?:/?|/.*)$", opts: GlobOptions { case_insensitive: false, literal_separator: true, backslash_escape: true }, tokens: Tokens([RecursivePrefix, Literal('.'), Literal('e'), Literal('n'), Literal('v'), RecursiveSuffix]) }
*** built glob set; 0 literals, 0 basenames, 0 extensions, 0 prefixes, 0 suffixes, 0 required extensions, 5 regexes
*** Loaded "/home/maex/projects/own/cronjob-as-a-service/.gitignore"
*** Adding ignore: "*/.DS_Store"
*** Adding ignore: "*.sw?"
*** Adding ignore: "*.sw?x"
*** Adding ignore: "**/#*#"
*** Adding ignore: "**/.#*"
*** Adding ignore: "**/.*.kate-swp"
*** Adding ignore: "*/.hg/**"
*** Adding ignore: "*/.git/**"
*** Adding ignore: "*/.svn/**"
*** Adding ignore: "*.db"
*** Adding ignore: "*.db-*"
*** Adding ignore: "*/*.db-journal/**"
*** Adding ignore: "*/target/**"
*** glob converted to regex: Glob { glob: "*.sw?", re: "(?-u)^.*\\.sw.$", opts: GlobOptions { case_insensitive: false, literal_separator: false, backslash_escape: true }, tokens: Tokens([ZeroOrMore, Literal('.'), Literal('s'), Literal('w'), Any]) }
*** glob converted to regex: Glob { glob: "*.sw?x", re: "(?-u)^.*\\.sw.x$", opts: GlobOptions { case_insensitive: false, literal_separator: false, backslash_escape: true }, tokens: Tokens([ZeroOrMore, Literal('.'), Literal('s'), Literal('w'), Any, Literal('x')]) }
*** glob converted to regex: Glob { glob: "**/#*#", re: "(?-u)^(?:/?|.*/)\\#.*\\#$", opts: GlobOptions { case_insensitive: false, literal_separator: false, backslash_escape: true }, tokens: Tokens([RecursivePrefix, Literal('#'), ZeroOrMore, Literal('#')]) }
*** glob converted to regex: Glob { glob: "**/.#*", re: "(?-u)^(?:/?|.*/)\\.\\#.*$", opts: GlobOptions { case_insensitive: false, literal_separator: false, backslash_escape: true }, tokens: Tokens([RecursivePrefix, Literal('.'), Literal('#'), ZeroOrMore]) }
*** glob converted to regex: Glob { glob: "*/.hg/**", re: "(?-u)^.*/\\.hg(?:/?|/.*)$", opts: GlobOptions { case_insensitive: false, literal_separator: false, backslash_escape: true }, tokens: Tokens([ZeroOrMore, Literal('/'), Literal('.'), Literal('h'), Literal('g'), RecursiveSuffix]) }
*** glob converted to regex: Glob { glob: "*/.git/**", re: "(?-u)^.*/\\.git(?:/?|/.*)$", opts: GlobOptions { case_insensitive: false, literal_separator: false, backslash_escape: true }, tokens: Tokens([ZeroOrMore, Literal('/'), Literal('.'), Literal('g'), Literal('i'), Literal('t'), RecursiveSuffix]) }
*** glob converted to regex: Glob { glob: "*/.svn/**", re: "(?-u)^.*/\\.svn(?:/?|/.*)$", opts: GlobOptions { case_insensitive: false, literal_separator: false, backslash_escape: true }, tokens: Tokens([ZeroOrMore, Literal('/'), Literal('.'), Literal('s'), Literal('v'), Literal('n'), RecursiveSuffix]) }
*** glob converted to regex: Glob { glob: "*.db-*", re: "(?-u)^.*\\.db\\-.*$", opts: GlobOptions { case_insensitive: false, literal_separator: false, backslash_escape: true }, tokens: Tokens([ZeroOrMore, Literal('.'), Literal('d'), Literal('b'), Literal('-'), ZeroOrMore]) }
*** glob converted to regex: Glob { glob: "*/*.db-journal/**", re: "(?-u)^.*/.*\\.db\\-journal(?:/?|/.*)$", opts: GlobOptions { case_insensitive: false, literal_separator: false, backslash_escape: true }, tokens: Tokens([ZeroOrMore, Literal('/'), ZeroOrMore, Literal('.'), Literal('d'), Literal('b'), Literal('-'), Literal('j'), Literal('o'), Literal('u'), Literal('r'), Literal('n'), Literal('a'), Literal('l'), RecursiveSuffix]) }
*** glob converted to regex: Glob { glob: "*/target/**", re: "(?-u)^.*/target(?:/?|/.*)$", opts: GlobOptions { case_insensitive: false, literal_separator: false, backslash_escape: true }, tokens: Tokens([ZeroOrMore, Literal('/'), Literal('t'), Literal('a'), Literal('r'), Literal('g'), Literal('e'), Literal('t'), RecursiveSuffix]) }
*** built glob set; 0 literals, 0 basenames, 1 extensions, 0 prefixes, 1 suffixes, 1 required extensions, 10 regexes
Error: I/O error: Permission denied (os error 13)
```
Environment:

```bash
$ uname -a
Darwin zizheng-mbp 18.7.0 Darwin Kernel Version 18.7.0: Tue Aug 20 16:57:14 PDT 2019; root:xnu-4903.271.2~2/RELEASE_X86_64 x86_64

$ rustup -Vv
rustup 1.19.0 (2af131cf9 2019-09-08)

$ rustc -Vv
rustc 1.37.0 (eae3437df 2019-08-13)
binary: rustc
commit-hash: eae3437dfe991621e8afdc82734f4a172d7ddf9b
commit-date: 2019-08-13
host: x86_64-apple-darwin
release: 1.37.0
LLVM version: 8.0

$ cargo -Vv
cargo 1.37.0 (9edd08916 2019-08-02)
release: 1.37.0
commit-hash: 9edd089168f8795b3890bc3daf5b99f03e9f8765
commit-date: 2019-08-02
```

I tried to install cargo-watch to use it with rust-analyzer, but got this error:
```bash
$ cargo install cargo-watch
    Updating crates.io index
  Installing cargo-watch v7.2.1
   Compiling memchr v2.2.1
   Compiling libc v0.2.62
   Compiling bitflags v1.1.0
   Compiling lazy_static v1.4.0
   Compiling log v0.4.8
   Compiling unicode-width v0.1.6
   Compiling quick-error v1.2.2
   Compiling same-file v1.0.5
   Compiling cfg-if v0.1.9
   Compiling nix v0.13.1
   Compiling regex-syntax v0.6.12
   Compiling fnv v1.0.6
   Compiling void v1.0.2
   Compiling termcolor v1.0.5
   Compiling ansi_term v0.11.0
   Compiling vec_map v0.8.1
   Compiling strsim v0.8.0
   Compiling glob v0.2.11
   Compiling thread_local v0.3.6
   Compiling humantime v1.3.0
   Compiling walkdir v2.2.9
   Compiling term_size v0.3.1
   Compiling fsevent-sys v2.1.0
   Compiling atty v0.2.13
   Compiling filetime v0.2.7
   Compiling aho-corasick v0.7.6
   Compiling bstr v0.2.8
   Compiling env_logger v0.5.13
   Compiling textwrap v0.11.0
   Compiling fsevent v0.4.0
error[E0308]: mismatched types
   --> /Users/zizheng/.cargo/registry/src/github.com-1ecc6299db9ec823/fsevent-0.4.0/src/lib.rs:171:17
    |
171 |         retain: cf::NULL,
    |                 ^^^^^^^^ expected enum `std::option::Option`, found *-ptr
    |
    = note: expected type `std::option::Option<extern "C" fn(*const std::ffi::c_void) -> *const std::ffi::c_void>`
               found type `*mut std::ffi::c_void`

error[E0308]: mismatched types
   --> /Users/zizheng/.cargo/registry/src/github.com-1ecc6299db9ec823/fsevent-0.4.0/src/lib.rs:172:27
    |
172 |         copy_description: cf::NULL,
    |                           ^^^^^^^^ expected enum `std::option::Option`, found *-ptr
    |
    = note: expected type `std::option::Option<extern "C" fn(*const std::ffi::c_void) -> *const *mut std::ffi::c_void>`
               found type `*mut std::ffi::c_void`

error[E0063]: missing field `release` in initializer of `fsevent::FSEventStreamContext`
   --> /Users/zizheng/.cargo/registry/src/github.com-1ecc6299db9ec823/fsevent-0.4.0/src/lib.rs:168:5
    |
168 |     fs::FSEventStreamContext {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ missing `release`

error[E0308]: mismatched types
   --> /Users/zizheng/.cargo/registry/src/github.com-1ecc6299db9ec823/fsevent-0.4.0/src/lib.rs:276:17
    |
276 |                 cb,
    |                 ^^ expected fn pointer, found *-ptr
    |
    = note: expected type `extern "C" fn(*mut std::ffi::c_void, *mut std::ffi::c_void, usize, *mut std::ffi::c_void, *const std::ffi::c_void, *const std::ffi::c_void)`
               found type `*mut _`

error: aborting due to 4 previous errors

Some errors have detailed explanations: E0063, E0308.
For more information about an error, try `rustc --explain E0063`.
error: Could not compile `fsevent`.
warning: build failed, waiting for other jobs to finish...
error: failed to compile `cargo-watch v7.2.1`, intermediate artifacts can be found at `/var/folders/_m/bfz4sy015x73vnw1nh5kb8cn_jdvwl/T/cargo-installfiggAr`

Caused by:
  build failed
```

But the installation completed successfully on Linux.
Hi there!

`ripgrep` uses an `.ignore` file as well as a `ripgrep`-specific ignore file `.rgignore` in addition to the `.gitignore` for filtering out files to focus on. I'm currently using the ignore functionality but I would like to encode this as part of projects so others can benefit from the ignore but can't easily add it to the `.gitignore` since we need to commit a portion of the ignored files to version control. How hard would this be to add? 

Thanks for the great tool!
When using the `ctrlc` crate to intercept Ctrl-C it doesn't work when running my exe through `cargo watch -x run` (my ctrlc handler won't get executed).

https://github.com/rust-lang/cargo/issues/4575
Hi!

I've been using `cargo-watch` since I started using Rust and I'm really really loving it. Thank you so much for all of your work so far.

Currently I'm building a library, and I'm also building a server that uses that library. I work on both simultaneously occasionally, and sometimes the library crashes the server, which I'm hot reloading with `cargo watch`. When I update code in the library, it doesn't cause the server to hot reload. This makes sense to me - a dependency, even local, changing shouldn't cause a sudden reload (in my opinion) unless I'm explicitly watching it. 

_However_, it'd be cool to reload the watched code at any point in time, by pressing a key like `r` or `<spacebar>` in the terminal or something. Feels like it's something that might be useful to others as well. Also, if you're interested, I'd love to contribute the code for this if you can point me in the right direction.

Thanks!
It would be nice to be able to configure default `-w` and `-i` directories so that I don't have to include them with every command.

This is getting complicated:

```
cargo watch -w Cargo.toml -w examples -w src -w templates -c -x "run --example readme_example_2"
```
It's useful to have a capability to take local dependencies (with paths) into accounts.
It's not the same #52, it's about watching for deps like these:

```
[dependencies]
dep1 = { path = "../libs/dep1" }
depN = { path = "../libs/depN" }
```
... uhm, I'm not getting it. ^^

On Linux I would do this
```bash
$cargo watch -x 'run -- query "elvis presly"'
[Running cargo run -- query "elvis presly"]
```

Or 
```bash
$cargo watch -x "run -- query \"elvis presly\""
[Running cargo run -- query "elvis presly"]
```

It's working as expected.

Now on Windows I can't get nested quotes with cargo-watch.
```posh
>cargo watch -x 'run -- query "elvis presly"'

error: Found argument 'presly' which wasn't expected, or isn't valid in this context

USAGE:
    cargo watch [FLAGS] [OPTIONS]
```

Or 

```posh
>cargo watch -x 'run -- query \"elvis presly\"'
[Running 'cargo run -- query \"elvis presly\"']
```

Note, that the inner escapes `\"` are not stripped..

Also Powershell-Escapes (and combinations) don't work

```posh
>cargo watch -s 'cargo run -- query `"elvis presly`"'

error: Found argument 'presly`' which wasn't expected, or isn't valid in this context

USAGE:
    cargo watch [FLAGS] [OPTIONS]
```

Changes to .gitignore are only effective after restart, e.g. if I have `cargo watch -x run` running and then I add a file (that I'm going to create) to .gitignore, and then create the file, it will abort and retrigger `cargo run`, also for every time I save that file, even though it's now in .gitignore and should be ignored by cargo-watch. This means there is no way to create new files that should be ignored without interrupting the currently running process :/

I'd prefer if cargo-watch would reload the .gitignore file's contents when it changes so that the changes are effective from then on, without having to abort my currently running process & restart `cargo watch -x run`.