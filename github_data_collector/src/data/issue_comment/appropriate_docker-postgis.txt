I'm using `mdillon/postgis:1`.

I then install pg_config while in the container
`apt-get update && apt-get --yes install libpq-dev`

I then run `pg_config` and get the following.
`PKGLIBDIR = /usr/lib/postgresql/12/lib`

That's not a valid path and instead I expect to see the following.  
`PKGLIBDIR = /usr/lib/postgresql/11/lib`

Any suggestions on how to fix this?

From docs
> **istemplate**
>  If true, then this database can be cloned by any user with CREATEDB privileges; if false (the default), then only superusers or the owner of the database can clone it.

I suggest using `IS_TEMPLATE` param where possible to make init-db script simpler and complaint
with postgres security best practices on not editing `pg_database` directly
Hey guys, I am using this image to fiddle with GitLab CI/CD implementation. My `.gitlab-ci.yml` file looks like this:

```yaml
test:
  image: python:3.7.5
  services:
    - name: mdillon/postgis:11
      alias: postgres
    - name: redis:latest
  script:
    - apt-get update
    - pip install -U pip setuptools
    - pip install -r requirements_dev.txt
    - pytest -x --strict
  variables:
    POSTGRES_DB: testdb
    POSTGRES_USER: xxx
    POSTGRES_PASSWORD: xxx
    PGPASSWORD: xxx
    REDIS_HOST: redis
    REDIS_PORT: 6379
```

However, once tests start running, I'm getting following error which only happens inside CI/CD pipeline with this image:

```
statement = 'SELECT users.password AS users_password, users.created_at AS users_created_at, users.updated_at AS users_updated_at, ...ND users.id = user_followers.follows_id AND user_followers.state = %(state_1)s ORDER BY user_followers.updated_at DESC'
parameters = {'param_1': 3, 'state_1': 'yes'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7f8a2dce4490>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.NotSupportedError: (psycopg2.errors.FeatureNotSupported) input of anonymous composite types is not implemented
E       LINE 3: ...r_followers.follows_id AND user_followers.state = 'yes' ORDE...
E                                                                    ^
```

Does anyone have an idea about whats going on? It seems to have problems with ENUM PostgreSQL types, but I am not sure on how to debug or fix this. I am not able to reproduce this error outside of the container.
A handful of packages, namely `gdal-dev`, `geos-dev`, and `proj-dev` (and their non-dev dependencies) were moved from `testing` to `community`. Changing the `apk add` commands to use the correct repository, `http://dl-cdn.alpinelinux.org/alpine/edge/community`, instead of `http://dl-cdn.alpinelinux.org/alpine/edge/testing` fixes the issues.

This is likely because of something that was brought up in the [mailing list](https://lists.alpinelinux.org/~alpine/devel/%3C661e0b45-63ff-a180-de21-afa353f72806%40gmx.de%3E), though I haven't been able to find any further discussion after that thread.
> E: Version '2.5.2+dfsg-1~exp1.pgdg90+1' for 'postgresql-11-postgis-2.5' was not found
> E: Version '2.5.2+dfsg-1~exp1.pgdg90+1' for 'postgresql-11-postgis-2.5-scripts' was not found
> E: Version '2.5.2+dfsg-1~exp1.pgdg90+1' for 'postgis' was not found

I do not understand what means a '+dfsg-1~exp1.pgdg90+1' addition. What can I do wrong? Or maybe this version is not supported now?
- adding Postgis 3.0 for Postgres 11 (2.5 did not work anymore, maybe due to Ubuntu update?)
- adding Postgis 3.0 for Postgres 12

A bit of background, I'm running a restore against an old dump of a PostGIS database.

# Original Error
```
pg_restore: [archiver (db)] Error while PROCESSING TOC:
pg_restore: [archiver (db)] Error from TOC entry 2; 3079 16415 EXTENSION postgis 
pg_restore: [archiver (db)] could not execute query: ERROR:  could not open extension control file "/usr/share/postgresql/11/extension/postgis.control": No such file or directory
    Command was: CREATE EXTENSION IF NOT EXISTS "postgis" WITH SCHEMA "public";
```

# Reproduction Steps
1. Create an `mdillon/postgis:11-alpine` container to act as the database. We'll call this the `db` container.
2. Create another `mdillon/postgis:11-alpine` container to act as the `pg_restore` executor. We'll call this one `executor`.
3. Create a simple sql file with the line `CREATE EXTENSION IF NOT EXISTS "postgis" WITH SCHEMA "public";`
4. Run `pg_restore` with this sql file on the `executor`, pointing to `db`.

# Terrible Solution Incoming...
I can work around this by manually moving all of the files under `/usr/local/share/postgresql/` to a new directory: `/usr/local/share/postgresql/11`.


I'm not too familiar with how these directories are laid out or anything, but it seems to me that they should be versioned (even if there is only one version present on the image).
This is based on https://github.com/appropriate/docker-postgis/pull/142.
proj is built with g++ and libstdc++ from edge, so the same version need
to be installed for it to work.

It compiles and runs, but I didn't test it thoroughly yet.
I'm going to try importing an OSM extract to test it.
Trying to build the dockerfile located at [11-2.5/alpine/Dockerfile](https://github.com/appropriate/docker-postgis/blob/master/11-2.5/alpine/Dockerfile) (after fixing #146) causes an error while compiling postgis:

```
configure: error: could not find libproj - you may need to specify the directory of a PROJ.4 installation using --with-projdir
```

Proj is currently only available on edge, in the future it might be available on the community tree, but for now installing every dependency from edge fixes the issue.