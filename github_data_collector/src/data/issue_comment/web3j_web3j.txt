### What does this PR do?
Adds unit test functionality in Kotlin in the codegen module. This is required for the CLI

### Where should the reviewer start?
All changed files

### Why is it needed?
To eventually be able to generate new web3j projects in kotlin.


### What does this PR do?
Update version in README

### Where should the reviewer start?
README file

### Why is it needed?
4.5.12 release

I got a broken test when updating from 4.2.0 to 4.5.11.

Every types encoding/decoding is fine but not int40, passing a negative value to encode and then read it back is not working.

Example :

I got a smart contract with the method :

    function passAndGetBackInt40(int40 _value) public view returns (int40) {
        return _value;
    }

When I call it I pass the value "-25" encoded and it must return the same decoded value.
It work for int8, int16, int24 and int32 but for a unknown reason it do not return -25 anymore for int40, but it return "1099511627751".

Any idea/fix on that? can someone give a try? I think something has break in the latest releases.

I made a wallet and try to subscribe like this:
```Kotlin
val address = getMyAddress()
web3j.transactionFlowable().subscribe({ tx ->
                    if (tx.from == address || tx.to == address) {
                        postValue(tx)
                        Log.i("my", "from=${tx.from},to=${tx.to},myAddress=$address")
                    } else {
                        Log.d("others", "from=${tx.from},to=${tx.to},myAddress=$address")
                    }
                }, { t -> t.printStackTrace() })
```
When I run it,I found that the `others` tag always log but `my` tag never showed.Of course I start it before transfer test.
where I dit wrong?

# PrivateTransactionReceipt declares new fields instead of inheriting them
PrivateTransactionReceipt declares again the following fields instead of inheriting them:
private final String contractAddress;
private final String from;
private final String to;
private final List logs;
private final String transactionHash;
private final String status;

This creates two copies of the same field for the superclass (TransactionReceipt) & subclass (PrivateTransactionReceipt), and creates various issues.

## Steps To Reproduce
Calling privateTransactionReceipt.isStatusOk()

### Expected behavior
Result should be evaluated by the actual receipt status

### Actual behavior
Result will always be true because superclass's status is always null, even though subclass status is not.

## Environment
Running Besu 1.31 Quickstart network.


geth version 1.9.8-unstable
solidity code:

> pragma solidity >=0.4.22 <0.6.0;
> pragma experimental ABIEncoderV2;
> 
> contract testzn {
>     
>     function test1() public view returns(string[] memory keys, string[] memory values) 
>     {
>         keys = new string[](2);
>         values = new string[](2);
>     
>         keys[0] = "在执行案件";
>         values[0] = "没有记录";
>     
>         keys[1] = "zaizhixinganjian";
>         values[1] = "meiyoujilu";
>     }
>       
>     function test2(string[] memory keys ,string[] memory values) public view returns( string[] memory ,string[] memory) 
>     {
>        
>         return (keys,values);
>     }
>     
>      function test3() public view returns(string[] memory ,string[] memory ) 
>     {
>        string[] memory   keys = new string[](2);
>        string[] memory  values = new string[](2);
>     
>         keys[0] = "在执行案件";
>         values[0] = "没有记录";
>     
>         keys[1] = "zaizhixinganjian";
>         values[1] = "meiyoujilu";
>         return (keys,values);
>     }
>     
>     
> }


i call the test2 when i use param ["中","国"],["你","好"] return error ，as img
![image](https://user-images.githubusercontent.com/7055328/71233438-8b424580-2330-11ea-9fb2-fc0aaa6f8f0c.png)
我经过解析java逻辑 对照参数发现 结果如下：
![image](https://user-images.githubusercontent.com/7055328/71233482-add45e80-2330-11ea-8a83-9cf99586b6d3.png)

i found when i read the array firt element must forward 128 offset，i can get right char ,
![image](https://user-images.githubusercontent.com/7055328/71233542-e3794780-2330-11ea-92af-efcb9a23b93f.png)



i have a bad idea ,if i want back ["1","2","3"]  in Contract, i use ["0","1","2","3"] instead,    i give up "0"  when i get it in java.

but  when i use a long array param for test , i get other error 


Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 0
	at java.util.Collections$EmptyList.get(Collections.java:4454)
	at test.x.SampleContract$6.call(SampleContract.java:89)
	at test.x.SampleContract$6.call(SampleContract.java:1)
	at org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:42)
	at test.x.QklUtil.getJzywHc(QklUtil.java:140)
	at test.x.QklUtil.main(QklUtil.java:221)


if i use it the wrong way??


# _Bug_title_
The signature of contract function verifyTx(**uint[2][2]** memory a, uint b) will be converted to verifyTx(**staticarray2[2]**,uint256) at runtime. 
Thus the method ID of verifyTx(...) is incorrect, and then the transaction input data to run verifyTx(...) is incorrect. Hence the transaction fails.

## Steps To Reproduce
1. Generate wrapper class with web3j util for following cotranct.

pragma solidity ^0.6.0;
contract Verifier {
  uint counter = 0;
  function verifyTx(uint[2][2] memory a, uint b) public returns (bool r) {
    counter = b;
    return true;
  }
  function get() public view returns (uint) {
    return counter;
  }
}

2. Deploy this contract and run function verifyTx(...). 

### Expected behavior
The transaction to run function verifyTx(...) succeeds.

### Actual behavior
The transaction fails with errors:
Exception in thread "main" org.web3j.protocol.exceptions.TransactionException: Transaction has failed with status: 0x0. Gas used: 23378. (not-enough gas?)
	at org.web3j.tx.Contract.executeTransaction(Contract.java:372)
	at org.web3j.tx.Contract.executeTransaction(Contract.java:345)
	at org.web3j.tx.Contract.executeTransaction(Contract.java:339)
	at org.web3j.tx.Contract.executeTransaction(Contract.java:334)
	at org.web3j.tx.Contract.lambda$executeRemoteCallTransaction$3(Contract.java:401)
	at org.web3j.protocol.core.RemoteCall.send(RemoteCall.java:42)
	at com.yongyang.app.DeployVerifier.deployContract(DeployVerifier.java:90)
	at com.yongyang.app.DeployVerifier.main(DeployVerifier.java:43)


## Environment
- Web3j 4.5.11
- Java 64-Bit Server VM (build 25.231-b11, mixed mode)
- Ubuntu 18.04 x64


## Additional context
When debugging, I saw org.web3j.abi.FunctionEncoder.buildMethodSignature(...) returns `verifyTx(staticarray2[2],uint256)`, which is incorrect.



Does web3j now supports EIP 2304: Multichain address resolution for ENS ?

I can't see any document to describe that.



### What does this PR do?
*required*

### Where should the reviewer start?
*required*

### Why is it needed?
*required*


# _Issue_title_
Set the polling interval in Web3j.build not work for abi generated contract instance.

## _Issue_description_
First I tried to build a web3j instance with the default build method. When I use the generated contract class to make a contract call, it took about 15 seconds to get the transaction receipt.
Then I tried to use Web3j.build(url, 500L,...) to build the instance, but it didn't work.
Last, I tried to load the contract instance with a custom transaction manager:

`final TransactionManager txManager = new RawTransactionManager(this.web3j,
                this.credentials, -1L, 20, 500L); contractInstance.load(address, web3j, txManager, gasProvider)
`
then I can get the transaction receipt will quickly.


## _Issue_context_
Ethereum Client: Hyperledger Besu 1.3.5
Web3j: 4.5.7

