A common hack is to use `#filename` to locate resources living alongside the source files. When swift-sh moves the script source to its cache, this doesn't work anymore.

Idea: Instead of copying the script itself, could you still point to the original file in the Package.swift, e.g.:
```
    .target(name: "main", dependencies: ["cows"], 
            path: "/Users/helge/dev/scripts/", 
            sources: ["blub.swift"])
```
I think that would be very useful regardless?
I'm in a situation where I have to create an executable out of a script to distribute it among my coworkers who don't have the development environment set up. I'm wondering whether this would be helpful in general and whether adding this functionality to `swift-sh` would be desired?
Today, I researched a way for handling helper scripts for my Mac application. I tested all three major players (swift-sh, Marathon, Beak) and I like the approach of swift-sh the most. Especially the shebang and the idea of _editing out_ into Xcode while working on the script without having to maintain the Xcode project afterwards.

Unfortunately, there have been also two issues which bother me a bit. The first one being the management of the Homebrew formula which I described in mxcl/homebrew-made#4. The second one is the inability to get the autocompleting in Xcode working.

Here are the steps I've performed. First, I installed the tool from source (version 1.12.0):
```bash
$ git clone https://github.com/mxcl/swift-sh.git
$ cd swift-sh
$ swift build -c release
$ cp .build/
$ cp .build/release/swift-sh "/Applications/Xcode 10.2.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/"
$ cp .build/release/swift-sh-edit "/Applications/Xcode 10.2.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/"
```

Then I created a sample script from the README:
```bash
$ cat <<EOF > script
#!/usr/bin/swift sh
import PromiseKit // @mxcl ~> 6.5
print(Promise.value("Hi!"))
EOF
$ chmod u+x script
$ ./script
# => Promise("Hi!")
```

So far everything worked smoothly, so I tried to edit the script in Xcode 10.2 using `$ swift sh edit script`. Xcode opened but no matter which scheme I selected the autocompletion didn't work. The `script` scheme allowed me to run the script and the `script-completion` scheme behaved very strangely showing errors complaining about `script` not being `main.swift`. Below are some screenshots showing the problem.

@mxcl I must be missing something. Could you please give me a hint regarding what I'm doing wrong?

<img width="1218" alt="xcode-scheme-script" src="https://user-images.githubusercontent.com/533299/58356686-73791080-7e78-11e9-8a57-ad4cd663b626.png">
<img width="1218" alt="xcode-scheme-script-completion" src="https://user-images.githubusercontent.com/533299/58356693-78d65b00-7e78-11e9-80df-9cc5a9e6f2fb.png">
It's possible that Package.swift is re-written but `swift-build` doesnâ€™t rebuild the resulting binary, this leads to us always running `swift-build` which delays script execution by ~120ms.

Also (unrelated) we should be faster that we currently are (when cache is valid and respected), worth trying to figure out why that is.
```swift
#!/usr/bin/swift sh

import Basic     // https://github.com/apple/swift-package-manager.git ~> 0.2.1
import Utility   // https://github.com/apple/swift-package-manager.git ~> 0.2.1
```

yields

```
Fatal error: Duplicate values for key: 'SwiftPM'
```
Most notably with stdin, if two are run that generate to the same cache location from eg. different terminals at the same time, it's a race condition.
Would be another thing that `/usr/bin/env swift-sh` would not be able to use, so we should perhaps also support this via a symlink of `swift-sh` to `swift-sh-runloop` or something better.
We should at least emit a warning if there is a script called `eject` in the and the command was called with `swift sh eject`.

The workaround would be `swift sh ./eject` or `swift sh -- eject`, neither is ideal, really we're being naughty by having an ambiguous command spec.

Whatever, we should detect if we're being called via the shebang and always do the script that way.
And when copying remove executable bit.
Strictly should be able to do this too.