![image](https://user-images.githubusercontent.com/418820/72489836-65855f00-3850-11ea-927f-01eb939f6a7b.png)

- 1、之前的装饰器调整，为了配合未来的 faas/orm 等其他场景
- 2、AOP 能力
- 3、基于 ioc 的插件扩展能力
- 4、其他底层的变动，比如 egg3
<!--
Thank you for reporting an issue.

1. It's RECOMMENDED to submit PR for typo or tiny bug fix.
2. If this's a FEATURE request, please provide: details, pseudo codes if necessary.
3. If this's a BUG, please provide: course repetition, error log and configuration. Fill in as much of the template below as you're able.
4. It will be nice to use `egg-init --type=simple bug` to provide a mini GitHub repository which can reproduce the issue.

感谢您向我们反馈问题。

1. 提交问题前，请先阅读 https://eggjs.org/zh-cn/faq.html
2. 我们推荐如果是小问题（错别字修改，小的 bug fix）直接提交 PR。
3. 如果是一个新需求，请提供：详细需求描述，最好是有伪代码实现。
4. 如果是一个 BUG，请提供：复现步骤，错误日志以及相关配置，并尽量填写下面的模板中的条目。
5. 如果可以，请使用 `midway-init` 提供一个最小可复现的代码仓库，方便我们排查问题。
6. 扩展阅读：[如何向开源项目提交无法解答的问题](https://zhuanlan.zhihu.com/p/25795393)
-->

* **Node Version**:v12.13.0
* **Egg Version**:
* **Plugin Name**:
* **Plugin Version**:
* **Platform**:
* **Mini Showcase Repository**:https://github.com/SuperHuangXu/midway-demo.git

<!-- Enter your issue details below this comment. -->

在这个Mini Showcase Repository中，为什么home路由不起作用，user路由却可以生效？

### 背景
* 结合 IoC 的能力，提供便捷框架扩展方式

### 方案
#### 模块化扩展方式

![image](https://user-images.githubusercontent.com/589831/70627207-c07bd300-1c60-11ea-9b6e-ec0ae77c46c6.png)

* 新增 midway.plugin.js 文件

```JSON
{
  // 单个扩展模块
  "xxx扩展": {
    "enable": true,
    "package": "midway-xxx扩展"
  }
}
```

* midway-bin 
  * 扩展脚手架
  ```
  xxx扩展
    dist
      index.ts
    src
      index.ts
    test
      index.ts
    ioc.json
    package.json
  ```
  * 构建扩展模块时生成 ioc.json，存储扫描目录(需要区分 src、dist 目录)

  ```JSON
  { "dirs": ["xxx/xxx", "ttt"], "files": ["xxx", "sss"] }
  ```

* 扩展模块需要依赖 midway-core、midway-decorator
  * 新增生命周期装饰器
    * willReady，支持 priority，在应用 ready 时期调用执行
    * willStop，应用停止时执行
  * middleware 装饰器
    * controller、get、post、put 等这些装饰器参数中传入的 middlewares 不够优雅，而且无法被用来做全局 middleware
    * 使用该装饰器，同时支持以路径作为参数，这样可以用来作为全局 middleware 或者相应路径的 middleware
  * 使用 provide 等现有装饰器
* midway-loader
  * 获取 midway.plugin.js 中配置的扩展模块，load 时加载扩展模块中 ioc.json 中的目录文件

* context 方法增强 
  * ctx.requestContext.getAsync('myService') -> ctx.getRequestContextInstance('myService')
  * ctx.applicationContext.getAsync('myService') -> ctx.getApplicationContextInstance('myService')

#### 非模块化扩展
* 直接在当前应用中使用装饰器、相关类即可

### 举例

* willReady

```TypeScript
@priority(-1)
@willReady()
@provide()
class XxxWillReadyClass {
  @inject()
  xxx; // 注入 xxx
  @inject()
  db; // 注入 db

  @init()
  async initialize() {
    // 执行 xxx 的函数
    await this.xxx.doSomething();
    
    // 执行 db 连接
    await this.db.connect();
  }

}
```

* willStop

```TypeScript
@willStop()
@provide()
class XxxWillStopClass {
  @inject()
  db; // 注入 db
  
  @init()
  async initialize() {
    // 关闭数据库连接
    await this.db.close();
  }
}
```

* middleware

```TypeScript
// '/xxx' 表示匹配该路径规则后执行当前 middleware
// 如果路径为空表示全局 middleware
@middleware('/xxx')
@provide()
class XxxMiddlewareClass implements WebMiddleware {

  @inject()
  myService;  // 由于中间件实例属于单例，这个实例即使注入也无法获取到 ctx

  resolve(): Middleware {
    return async (ctx, next) => {
      // 必须通过从请求作用域中获取对象的方式，来绑定上下文
      ctx.service = await ctx.getRequestContextInstance('myService');
      await next();
    };
  }

}
```

### 相关 issue

#369 
#349 
#203 
目前可以通过 egg-swagger-doc 插件，以写注释的方式来生成 swagger doc。但是和路由装饰器有重复。

例如：
```js
  /**
   * @summary 获取用户
   * @description 根据用户ID获取用户详情
   * @operationId xxxx
   * @router get /api/users/{userId}
   * @request path number userId 用户ID
   * @response 200 userInfo 用户详情
   */
  @get('/users/:userId')
  async get(ctx: Context): Promise<void> {
    ctx.body = await this.userService.get(ctx.params.userId);
  }
```
其中 `router` 注释和路由装饰器 `get` 表达的信息是冗余的。

期望支持通过装饰器来编写文档，类似 https://github.com/nestjs/swagger

### 问题

- 1、装饰器本身可能会和内部框架导出的方法冲突
- 2、egg 的定义可能会和 midway 的冲突
- 3、装饰器是否需要领域划分，职责分明

### 方案

第一种，依旧使用上层包导出装饰器，用固定子目录承载装饰器


```ts
// midway for web(egg) 场景
import { get } from 'midway/decorator';
import { Application } from "midway/egg";

// midway for faas
import { func } from '@midwayjs/faas/decorator';
```

第二种，单独包作用域，不过用户就得再引一个包了


```ts
// midway for faas
import { get, post } from '@midwayjs/decorator/web';
import { func } from '@midwayjs/decorator/faas';
```


请教大神，midway如何调用Java的dubbo服务？注册中心是zookeeper。 @czy88840616 
* **Node Version**: v10.16.0
* **Midway Version**: 1.0.0

遇到的问题：

使用 controller 定义的路由，无法使用 **app.url**，**helper.urlFor**，**helper.urlPath**，**ctx.router.url** 等方式获取其他 controller 的定义路由

业务场景：

1. 登陆类应用：需要登陆的页面，定义公共的中间件发现未登陆跳转到登陆页面
2. 不同模块之间的跳转，因为前置中间件的不一样，分模块编写

期望实现类似 flask 的 blueprint 的功能

**Blueprint**

```python
from flask import Blueprint

admin = Blueprint('admin', __name__)

@admin.route('/')
def index(page):
    pass

// 获取静态资源路径
url_for('admin.static', filename='style.css')

// 获取后台首页地址
url_for('admin.index')
 
// 蓝图内部获取路径
url_for('.index')
```

**Controller**

```javascript
import { provide, priority, controller, get } from 'midway'

@provide()
@priority(-1)
@controller('/', {
  name: 'index'
})
export class IndexViewController {
 
  @get('/', { middleware: ['initialize'], routerName: 'home' })
  async index(ctx: Context): Promise<void> {
   
  }
}

// 获取首页地址
ctx.router.url('index.home')
```

















Midway 是一个开放的社区，可以向我们提交你的想法，问题，我们会尽可能来帮助大家。

## Issue

请在提问题的时候，尽可能描述你的问题，尽可能详细的截图或者提交能够复现的仓库。

## 想法和需求

你可以在这里提交你的想法，虽然不一定能实现，但是也能有不错的讨论，指不定能有很不错的 feature 产生。

## 文章和推广

如果你写了一篇文章，不管是否软文，你希望被我们看到或者推广，都可以投稿到我们的知乎专栏。https://zhuanlan.zhihu.com/midwayjs
npm 6.11.3
node v12.9.1
peer dependenies
![image](https://user-images.githubusercontent.com/54894402/65499877-ebbc1500-def0-11e9-812b-b86618f35b81.png)

在package.json 中加了 peerDependencies, remove node_modules 也没有成功。

