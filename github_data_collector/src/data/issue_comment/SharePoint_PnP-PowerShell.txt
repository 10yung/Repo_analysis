### Reporting an Issue or Missing Feature

@ToddKlindt and I have been using the module to do some migrations along with Sharegate's PowerShell module. It's fantastic what we've been able to accomplish, if I may be so bold. 

We've built a module (.psm1 file) with a bunch of functions we use to drive the migrations. In many of the functions, the Begin block does connections to common locations. Those connections may have been created already by other functions, but we don't want to make that assumption, because we may call the functions independently. We could build some logic into each function, but it would be redundant. Instead, I've put together a `Resolve-Connection` function that adds new connections to an array and plucks them back out if they already exist.

``` powershell
Resolve-Connection -Url $Url -Credentials $Credentials
```

We're calling some of those those functions many times in `foreach` loops. It would be great if we could cache connections wherever we make them so we wouldn't incur the overhead every time we enter one of the functions.

Thinking it through, it seems it could work by adding a `-Cache` switch to `Connect-PnPOnline`, like so:

``` powershell
$newConnection = Connect-PnPOnline -Cache -Url $Url -Credentials $Credentials -ReturnConnection
```
The `-Cache` switch would basically be saying: "Save this connection based on the Url and Credentials. If I ask for it again, send me the cached version - I don't need to reconnect."

If the `-Cache` switch wasn't there, everything would work as it always has.

This may not prove useful to a lot of people, but in situations where we've got lots of iteration, it could potentially decrease execution time considerably, as well as reducing some of the load on the servers.



### Which version of the PnP-PowerShell Cmdlets are you using?
- [ ] PnP PowerShell for SharePoint 2013
- [ ] PnP PowerShell for SharePoint 2016
- [X] PnP PowerShell for SharePoint 2019
- [ ] PnP PowerShell for SharePoint Online

### How did you install the PnP-PowerShell Cmdlets? 
- [ ] MSI Installed downloaded from GitHub
- [X] Installed through the PowerShell Gallery with Install-Module
- [ ] Other means


## Reporting an Issue or Missing Feature
The returned object for Group using Get-PnPUnifiedGroup is missing SiteUrl. This happens when I delete a group and then restore the group. After restoration, the site url is not retrieved and gives an unknown error found. Below is a screenshot of the issue. 

![image](https://user-images.githubusercontent.com/11584558/72484138-6a99dc80-3857-11ea-89c7-69b3755ec335.png)

However, when the same group is accessed via Exchange Online PowerShell, the SharePointSiteUrl
is populated fine.

![image](https://user-images.githubusercontent.com/11584558/72484035-1b53ac00-3857-11ea-94cd-0ec2a5f75bba.png)

### Expected behavior 
The object returned by Get-PnPUnifiedGroup should provide the SiteUrl

### Actual behavior 
There is an unspecified error found on the site Url. 

### Steps to reproduce behavior
Steps:
1. Create a group
2. Then delete the group in SharePoint admin center
3. Then restore the group from SharePoint admin center from Recycle bin
4. Use Azure AD app with application permissions to connect to MS Graph in PnP PowerShell. Then do Get-PnPUnifiedGroup and check the siteurl property

### Which version of the PnP-PowerShell Cmdlets are you using?
- [ ] PnP PowerShell for SharePoint 2013
- [ ] PnP PowerShell for SharePoint 2016
- [X] PnP PowerShell for SharePoint Online

### What is the version of the Cmdlet module you are running?
3.16.1912.0

### How did you install the PnP-PowerShell Cmdlets? 
- [ ] MSI Installed downloaded from GitHub
- [X] Installed through the PowerShell Gallery with Install-Module
- [ ] Other means



#### Category
- [ ] Question
- [ ] Typo
- [x] Bug
- [ ] Additional article idea


#### Expected or Desired Behavior

When using PnP Powershell with application permissions (and authentication using certificate) adding a file to a document library using Add-PnpFile should work without error if "Sites.ReadWrite.All" permissions are given and consented.

#### Observed Behavior

In the described setup I get "Access denied." when trying to upload a file into the library when there are only "Sites.ReadWrite.All" permissions. Using "Sites.FullControl.All" it works.

#### Steps to Reproduce

Create a certificate as described here: https://github.com/SharePoint/PnP-PowerShell/tree/master/Samples/SharePoint.ConnectUsingAppPermissions
but add only "Sites.ReadWrite.All" application permissions. Give admin consent.

```
Write-Host "1. Login"
Connect-PnPOnline -CertificateBase64Encoded "<BASE64ENCODEDPFX>" -Tenant contoso.onmicrosoft.com -ClientId "<CLIENTID>" -Url https://contoso.sharepoint.com/sites/common -Verbose

Write-Host "2. Try to get web"
$w = Get-PnPWeb
Write-Host "Web:" $w.Id

Write-Host "3. Try to read the library"
Get-PnPList -Identity "Documents"

$SPFolderName = "Documents"
# Upload template list
Write-Host "4. Upload file to Location:" $SPFolderName
$te = Add-PnPFile -Path ".\test.txt" -Folder $SPFolderName -Verbose

Write-Host "5. Logout"
Disconnect-PnPOnline
```

Result is:
```
1. Login
AUSFÃœHRLICH: PnP PowerShell Cmdlets (3.17.2001.2): Connected to https://contoso.sharepoint.com/sites/common

2. Try to get web
Web: a8f89658-c5e2-4180-8592-3f0743fff9a2

3. Try to read the library
Title     Id                                   Url
-----     --                                   ---
Documents 84b4076c-4d1b-4232-bba6-b5685611cfbd /sites/common/Shared Documents

4. Upload file to Location: Documents
Add-PnPFile : Access denied. You do not have permission to perform this action or access this resource.
In C:\temp\testupload.ps1:22 Zeichen:7
+ $te = Add-PnPFile -Path ".\test.txt" -Folder $SPFolderName -Verbose
+       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : WriteError: (:) [Add-PnPFile], ServerUnauthorizedAccessException
    + FullyQualifiedErrorId : EXCEPTION,SharePointPnP.PowerShell.Commands.Files.AddFile
	
5. Logout
```

Reading the web and the library works, but uploading files failes. Why? I was also able to add Listitems to a custom list using this permissions.

Then give the application "Sites.FullControll.All" permissions and consent. --> Works without changes to the code!

Why is FullControl needed for the upload? Using "Sites.ReadWrite.All" should be sufficient. Or am I wrong?

Please let me know if something is missing in my issue.

Could be related to this comment: https://github.com/SharePoint/sp-dev-docs/issues/4500#issuecomment-550055901

Best regards
Tobias
### Reporting an Issue
As of January 10, 2020 the Cmdlet Get-PnPFolder stopped working.

### Expected behavior 
Using the cmdlet $folder = Get-PnPFolder -RelativeUrl $url I used to get a folder reference to the folder object to be able to process files in that folder using the following code:

> $folder = Get-PnPFolder -RelativeUrl $url
$total = $folder.Files.Count
For ($i = 0; $i -lt $total; $i++) {
    $file = $folder.Files[$i]
    Write-Host "Downloading " $file.Name
    Get-PnPFile -ServerRelativeUrl $file.ServerRelativeUrl -Path $destinationfolder -FileName $file.Name -AsFile
    $target=$url + "/" + $movefolder + "/" + $file.Name
    Move-PnPFile -ServerRelativeUrl $file.ServerRelativeUrl -TargetUrl $target -Force
}

### Actual behavior 
The cmdlet fails with the following error:

> Get-PnPFolder : Method not found: '!!0[] System.Array.Empty()'.
At line:1 char:11
+ $folder = Get-PnPFolder -Url $url
+           ~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : WriteError: (:) [Get-PnPFolder], MissingMethodException
    + FullyQualifiedErrorId : EXCEPTION,SharePointPnP.PowerShell.Commands.Files.GetFolder

### Which version of the PnP-PowerShell Cmdlets are you using?
- [  ] PnP PowerShell for SharePoint 2013
- [  ] PnP PowerShell for SharePoint 2016
- [X] PnP PowerShell for SharePoint Online

### What is the version of the Cmdlet module you are running?
3.17.2001.2 (problem existed before updating)

### How did you install the PnP-PowerShell Cmdlets? 
- [  ] MSI Installed downloaded from GitHub
- [X] Installed through the PowerShell Gallery with Install-Module
- [  ] Other means


Resubmit of PR #2213 
Resubmit of PR #2245 containing new functionality to access the Unified Audit Logs of Office 365
### Reporting an Issue or Missing Feature
Add-PnPFolder -Name "test ##" -Folder "Documents" not working
Apply-PnPProvisioningTemplate with xml template containing folders with # character

Working with :
$docList = Get-PnPList "Documents"
$rootFolder = $docList.RootFolder
$rootFolder.Folders.Add("Test ###")
Invoke-PnPQuery

### Expected behavior 
Working on PnP commands

### Actual behavior 
Error : Add-PnPFolder : The argument must be a single folder name and cannot contain path characters.

### Steps to reproduce behavior
Use above commands

### Which version of the PnP-PowerShell Cmdlets are you using?
- [ ] PnP PowerShell for SharePoint 2013
- [ ] PnP PowerShell for SharePoint 2016
- [X] PnP PowerShell for SharePoint Online

### What is the version of the Cmdlet module you are running?
3.15.1911.0

### How did you install the PnP-PowerShell Cmdlets? 
- [ ] MSI Installed downloaded from GitHub
- [X] Installed through the PowerShell Gallery with Install-Module
- [ ] Other means


## Type ##
- [ ] Bug Fix
- [X] New Feature
- [ ] Sample

## Related Issues? ##
N/A

## What is in this Pull Request ? ##
Adding HostProperties support to Add-PnPCustomAction using -ClientSideComponentProperties argument. See https://docs.microsoft.com/en-us/sharepoint/dev/spfx/extensions/basics/preallocated-space-placeholders for documentation on what this can be utilized for.

Depends on https://github.com/SharePoint/PnP-Sites-Core/pull/2526 to be merged first in PnP Sites Core.


Lines 14 to 41 of https://github.com/SharePoint/PnP-PowerShell/blob/master/Commands/Navigation/RemoveNavigationNode.cs

Contains the examples to use the cmdlet, but some of the examples use obsolete syntax.  While they technically work at the moment (with a warning), the docs.microsoft.com page for this cmdlet omits the obsolete parameters, which means the examples use effectively undocumented syntax: https://github.com/MicrosoftDocs/office-docs-powershell/blob/master/sharepoint/sharepoint-ps/sharepoint-pnp/Remove-PnPNavigationNode.md

Example 2 uses syntax "Get-PnPNavigationNode -QuickLaunch", this could be replaced with:
2. "Get-PnPNavigationNode -Location QuickLaunch"

Examples 3 and 4 use Remove-PnPNavigationNode -Title and -Location, the simplest replacements I know of for these would be:

3. Get-PnPNavigationNode -Location QuickLaunch | Where-Object { $_.Title -eq "Recent" } | Remove-PnPNavigationNode
4. Get-PnPNavigationNode -Location ToNavigationBar | Where-Object { $_.Title -eq "Home" } | Remove-PnPNavigationNode -Force

Since the parameters to Remove-NavigationNode have been simplified from when these examples were written, it might not actually be necessary to have both examples 3 and 4.  Example 3 could be removed.
###Notice: many issues / bugs reported are actually related to the PnP Core Library which is used behind the scenes. Consider carefully where to report an issue:###

1. **Are you using ```Apply-SPOProvisioningTemplate``` or ```Get-SPOProvisioningTemplate```**? The issue is most likely related to the Provisioning Engine. The Provisioning engine is _not_ located in the PowerShell repo. Please report the issue here: https://github.com/officedev/PnP-Sites-Core/issues.
2. **Is the issue related to the cmdlet itself, its parameters, the syntax, or do you suspect it is the code of the cmdlet that is causing the issue?** Then please continue reporting the issue in this repo.
3. **If you think that the functionality might be related to the underlying libraries that the cmdlet is calling** (We realize that might be difficult to determine), please first double check the code of the cmdlet, which can be found here: https://github.com/OfficeDev/PnP-PowerShell/tree/master/Commands. If related to the cmdlet, continue reporting the issue here, otherwise report the issue at https://github.com/officedev/PnP-Sites-Core/issues

### Reporting an Issue or Missing Feature
Reporting an issue

### Expected behavior 
When applying the provisioning template, I am expecting the list's field to be overridden with any new field types or changes.

### Actual behavior 
The field is skipped if the field is found but the type does not match. 

### Steps to reproduce behavior
Please include complete code samples in-line or linked from [gists](https://gist.github.com/)
To reproduce this behavior, I have created a list in two different environments, a model site and a target site. I extracted the template.xml from the model site and applied it to the target site. then changes were made to one of the fields on the model site. the field was changed from checkbox to drop-down menu. The field is still of type "choice". I then extracted a new template from the model site with the changes made and tried applying to the target site. this is when the field was skipped over and no changes were applied to the target site on the field that was updated.

below is the code involved in 

portion of template.xml that changed format from checkbox to drop-down:
`<Field Name="SourcePermissions" FromBaseType="FALSE" Type="Choice" DisplayName="SourcePermissions" Required="TRUE" EnforceUniqueValues="FALSE" Indexed="FALSE" Format="Dropdown" FillInChoice="FALSE" ID="{487b3e3c-c13a-4e45-b0f8-f7ab75c91b78}" Version="3" StaticName="SourcePermissions" SourceID="{{listid:Subscriptions}}" ColName="nvarchar10" RowOrdinal="0" CustomFormatter="">
<Default>All ITA</Default>
<CHOICES>
    <CHOICE>All ITA</CHOICE>
    <CHOICE>HCHB</CHOICE>
  </CHOICES>
</Field>`

applying the template:
`Write-Host "Started applying template"
Set-Culture -CultureInfo en-us
Apply-PnPProvisioningTemplate -Path "$env:SYSTEM_DEFAULTWORKINGDIRECTORY/_CI/sharepoint/template.xml" -Connection $newSiteConnection
Write-Host "Finished applying template"`

message recieved:
![image](https://user-images.githubusercontent.com/47759576/71907461-18133e80-313a-11ea-91c3-3cfda3b19f3d.png)


### Which version of the PnP-PowerShell Cmdlets are you using?
- [ ] PnP PowerShell for SharePoint 2013
- [ ] PnP PowerShell for SharePoint 2016
- [x] PnP PowerShell for SharePoint Online

### What is the version of the Cmdlet module you are running?
SharePointPnPPowershellOnline - version 3.14.19

### How did you install the PnP-PowerShell Cmdlets? 
- [ ] MSI Installed downloaded from GitHub
- [ ] Installed through the PowerShell Gallery with Install-Module
- [x] Other means

