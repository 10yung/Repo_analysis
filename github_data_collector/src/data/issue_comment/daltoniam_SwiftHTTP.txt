Hi,

I tried implementing the SSL Pinning configuring the DER certification into the bundle. 

I'm getting an error

<1> load failed with error Error Domain=NSURLErrorDomain Code=-999 "cancelled"

_NSURLErrorFailingURLSessionTaskErrorKey=LocalDataTask <FADE5596-6EB4-463F-85A5-CA5C052125A4>.<1>, NSLocalizedDescription=cancelled} [-999]
2019-03-02 09:33:07.177513+0530 aaa[6110:2098149] Task <FADE5596-6EB4-463F-85A5-CA5C052125A4>.<1> finished with error - code: -999

Please help on this.
Its better to have array indexes in query parameter names, such as:
`swifthttp.com?array[0]=value1&array[1]=value2`

It fixes an issue when a GET request contains nested arrays, like the one below:

```Swift
let dict: [String : Any] = [
    "boundingbox": [["coord1", "coord2"]]
]
```
Currently `Array.createPairs` produces names without indexes:
`swifthttp.com?boundingbox[][]=coord1&boundingbox[][]=coord2`
Which causes `boundingbox` query parameter 2 root elements, as seen below

```
Array (
    [0] => Array (     // 1st Element
        [0] => coord1
    )
    [1] => Array (     // 2nd Element
        [0] => coord2
    )
)
```

With this change we will have following URL:
`swifthttp.com?boundingbox[0][0]=coord1&boundingbox[0][1]=coord2`

Now server reads the array properly as 1 root element, as seen below
```
Array (
    [0] => Array (
        [0] => coord1
        [1] => coord2
    )
)
```
OperationQueue has better task management than HTTPQueue.
is there any way to retry a task or i have to implement it by my self? i mean retry a task after receiving  the response  :
 
```
//handle task finishing
      public func urlSession(_ session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?) {
          guard let resp = responseForTask(task) else { return }
          resp.error = error as NSError?
          if let hresponse = task.response as? HTTPURLResponse {
            resp.headers = hresponse.allHeaderFields as? Dictionary<String,String>
            resp.mimeType = hresponse.mimeType
            resp.suggestedFilename = hresponse.suggestedFilename
            resp.statusCode = hresponse.statusCode
            resp.URL = hresponse.url
        }
        
        if let code = resp.statusCode, code > 299 {
            //-1001//
            resp.error = createError(code)
        }
        if let handler = resp.completionHandler {
            handler(resp)
        }
        
        removeTask(task)
    }
```
I am trying to build SwiftHTTP files directly in my project (ie. without a separate SwiftHTTP project) to work around some bundling issues. I am using Xcode 9.4.1.

I get the following compilation error:
`Ambiguous use of 'init(urlString:parameters:headers:cachePolicy:timeoutInterval:)'`
in [Operation.swift:275](https://github.com/daltoniam/SwiftHTTP/blob/754859eda86630ae8e56c49d06eb407b5815317f/Source/Operation.swift#L275)

This exact chunk is the problem: `URLRequest(urlString: url, headers: headers)`

How can I refactor this piece to make it build?
Thanks
Hello. I'm trying to post a JSON array of objects to a server. I'm pretty sure that server side works perfectly because I'm interacting with it using android app I have created. I'd be very appreciate if you could help to solve the problem I have with creating the same app on iOS using swift+swithttp.

Here is the method I'm parsing an object to array[string: any].

    public func toDictionary() -> [String: Any] {
        var itemDic = [String: Any]()
        
        itemDic["UserId"] = UserId
        itemDic["SelectedItems"] = getSelectedItems()
        
        return itemDic
    }

    private func getSelectedItems() -> [[String: Any]] {
        var array = [[String: Any]]()
        
        for item in getSelectedItems {
            array.append(item.toDictionary())
        }

        return array
    }

When I print toDictionary() result I can see in console the following output:
["UserId": 110021, "SelectedItems": [["AnswerId": 2, "ItemId": 1], ["AnswerId": 2, "ItemId": 4], ["AnswerId": 2, "ItemId": 7]]]

Here is the code how I post the object to the server
HTTP.POST(ServerApi.REPORT, parameters: model.toDictionary()) { response in
            //process response
        }

The UserId parameter is receiving but the SelectedItems always empty. Can you help me to undestend why this is happen and how can I fix it?

Thank you!!

this also fixes #295
I'm using the following code to upload an image in base64 format and I would like to track that upload's progress:

    var r  = URLRequest(url: URL(string: apiURL+"images")!)
    r.httpMethod = "POST"
    r.setValue("multipart/form-data", forHTTPHeaderField: "Content-Type")
    r.setValue(accessToken, forHTTPHeaderField: "Authorization")
    r.httpBody = {
        var body = Data()
        let boundary = "Boundary-\(UUID().uuidString)"
        let boundaryPrefix = "--\(boundary)\r\n"
        
        for (key, value) in ["file": imageData] {
            body.append(string: boundaryPrefix)
            body.append(string: "Content-Disposition: form-data; name=\"\(key)\"\r\n\r\n")
            body.append(string: "\(value)\r\n")
        }
        body.append(string: "\r\n")
        body.append(string: "--".appending(boundary.appending("--")))
        
        return body
    }()
    let task = HTTP(r)
    task.progress = { progress in
        print(progress)
    }
    task.run { (response) in
        print(response.text)
    }

What this prints:

    1.0
    -30.0
    "{some json}"

Do you know why that is? The image's size is 1.5mB, and my upload speed is around 300kB/s so it can't be at 1 immediately, not to speak about the progress of `-30`...

Thanks!
Hey,  
I'm trying to upload a file as follows:

    guard let imageData = UIImageJPEGRepresentation(image) else { return }
    let headers = ["Authorization": Data.accessToken, "Content-Type": "multipart/form-data", "Accept": "application/vnd.api+json"]
    let parameters: [String: Any] = [
        "file": Upload(data: imageData, fileName: "img", mimeType: "image/jpeg")
    ]
    HTTP.POST("my-url...", parameters: parameters, headers: headers, completionHandler: completion)

... but the backend doesn't receive the image.

May this be caused by the library? Does it work for anyone else?
First off, thanks for this awesome library!

I want to pass the following dictionary as get parameter:

    ["param1": 1, "param2": ["a"]]

When passing only non-array values, such as `["param1": 1]`, it works just fine. But when I pass an array of strings, the parameters are converted to a url as follows:

    ?param2%5B%5D=a&page=1&param1=1

...manually making this more legible:

    ?param2[]=a&param1=1

...whereas it obviously should be:

    ?param2=[a]&param1=1

(note the brackets after `param2`).

A similar thing happens when trying to code the string array myself by escaping quote chars and then manually adding the parameters in the URL directly:

    let urlAppendix = "?param2=[\"\(a)\"]&param1=1"

The response will actually not have any data at all: the URL is nil, the text & data is empty...

Any idea why this is not working properly? Do I need to do anything differently?