These two images show how to reproduce the problem.

![2020-01-17 11_31_31-üè° üòÄ CoCalc Omnibase - CoCalc](https://user-images.githubusercontent.com/1276278/72640633-23761f00-391d-11ea-90b4-c217cd73a5ef.png)

![2020-01-17 11_31_45-üè° üòÄ CoCalc Omnibase - CoCalc](https://user-images.githubusercontent.com/1276278/72640646-28d36980-391d-11ea-9a15-15ee25db9e68.png)


SOLUTION: Why not use **exactly** the same code to render the preview as actual messages?


# Description
This exposes the current version of sage to the webapp. For now, it just shows up in the settings config panel, but later we can use it to show some additional info in the worksheet for 9.0.

# Testing Steps
I tested the combination of new project and new webapp, and also current project code (that version info is absent) and new webapp.

# Relevant Issues

### [Checklist](https://github.com/sagemathinc/cocalc/wiki/PR-Checklist):
- [ ] Run eslint on new and edited files
- [ ] All new code is actually used.
- [ ] Non-obvious code has some sort of comments.

Front end:
- [ ] Restart at least one project and check its `~/.smc/local_hub/local_hub.log`
- [ ] Completely restart Webpack with `./w` in `/src`
- [ ] Completely restart the hub by killing and restarting `./start_hub.py` in `/src/dev/project`
- [ ] Screenshots if relevant.

 `active_file_sort` returns new javascript object every time it's called. That means you can't check if it's the same value (without looking deeper), defeating any performance optimizations that using immutable.js is all about.

Related: #4325
The selectors are only used in `Store.get` right now. 

Solution:
Change store.getIn to use `this.get` for the first argument of the traversal array.
# Description

* change the link at the top left to stay on the landingpage
* emphasize teaching on jupyter page

# Testing Steps
pages build, not much to check. I hope language & spelling is ok.

# Relevant Issues

### [Checklist](https://github.com/sagemathinc/cocalc/wiki/PR-Checklist):
- [ ] Run eslint on new and edited files
- [ ] All new code is actually used.
- [ ] Non-obvious code has some sort of comments.

Front end:
- [ ] Restart at least one project and check its `~/.smc/local_hub/local_hub.log`
- [ ] Completely restart Webpack with `./w` in `/src`
- [ ] Completely restart the hub by killing and restarting `./start_hub.py` in `/src/dev/project`
- [ ] Screenshots if relevant.

 IPython.display.Audio works fine on small sounds but fails on large ones, because they are so large.  In cocalc-Jupyter we support large images by replacing them in the underlying document by their sha1 hash, then storing the actual image in a backend sqlite database.   We need to implement something similar for sound files.  

Here's an example to reproduce the problem.   It works fine if the sound length is short (say 1 second) but fails if the length is longer (e.g., 2 second or more):

```
import scipy.io.wavfile as wav
import IPython.display as ipd
import numpy as np

duration = 1   # duration = 2 fails
DEFAULT_RATE = 44100
nsamples = int(DEFAULT_RATE*duration)
w = 880
t = np.linspace(0, duration, nsamples)
f = np.sin(w*2*np.pi*t)
ipd.Audio(f, rate=DEFAULT_RATE)
```

---

# WORKAROUNDS:

1. Write the sound to a file and link to that file.  Here's an example of at least how you can write a sound (of any size -- even a gigabyte) to a file, then link to it.  This continues the above example:
```
from scipy.io import wavfile
amplitude = np.iinfo(np.int16).max
wavfile.write('foo.wav', DEFAULT_RATE, (amplitude*f).astype('int16'))
ipd.FileLink("foo.wav")
```

This will work equally in CoCalc-jupyter, and also in classical Jupyter.  In Cocalc-jupyter it will properly open the wav file in another tab and show the player.

2. Use Jupyter classic or JupyterLab.

REQUESTED BY: Nicolas Nytko
I disabled email verification for cocalc, since there seemed to be  [tons of bugs](https://github.com/sagemathinc/cocalc/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+verification),  and we didn't really, *really* need it for anything.

This  needs to be fixed since we now have limited site license functionality, which depends on an email address. 

Regarding how it works, I think we should:

- automatically count email addresses that come from single sign on (google, etc.) profiles as valid.
- only have the validation flow for other emails.

Also, a lot of attempts to validate will fail due to the messages being labeled as spam, since we know that happens already with password reset messages.  That said, lots of other sites have working email verification... so how does it work without being broken?
 
this is purely cosmetic: in a files listing of a project, the `__pycache__` subdirectory is for cached python3 files. we should mask them like other temp/cached files.
See this comment in smc-webapp/course/common/FoldersToolBar.tsx

```
 - this code is buggy since the SearchInput component below is NOT controlled,
   but some of the code assumes it is, which makes no sense.
   E.g., there is a clear_search prop that is passed in, which is
   nonsense, because the state of the search is local to the
   SearchInput. That's why the calls to clear
   the search in all the code below are all broken.
```
My fix for #4265 doesn't really work...

1. Open a jupyter notebook
2. Switch the frame to RAW Json editor (or split and show that)
3. You may just seeing loading until you actually change the live jupyter notebook in some way.   

I.e., the initial update doesn't seem to cause the loading to go away.  Ugh.