Error output

```
🚀  Starting to generate project SmartAPI...
👉  Removing any previous temporary folder...
✅  Done
👉  Making temporary folder (/Users/Amadeu/Developer/swiftplate_temp)...
✅  Done
👉  Making a local clone of the SwiftPlate repo...
✅  Done
👉  Copying template folder...
✅  Done
👉  Removing temporary folder...
✅  Done
👉  Filling in template...
An error was encountered 🙁
Error: Error Domain=NSCocoaErrorDomain Code=264 "The file “A.cpython-36.pyc” couldn’t be opened because the text encoding of its contents can’t be determined." UserInfo={NSFilePath=/Users/Amadeu/Developer/AREPL-vscode/test/manualAreplTests/__pycache__/A.cpython-36.pyc}
```

My first pull request.  It's quite simple .. I hope I'm following the right protocol for this ..
Ask to create folder if it doesn’t exist instead of throwing an error
If I will generate project using `swiftplate` there isn't path attribute in target in Package.swift. Because of that I am unable to install framework as dependency through package manager.

After adding `path: "Sources"` installation is possible.

Source https://github.com/apple/swift-evolution/blob/master/proposals/0162-package-manager-custom-target-layouts.md
License year updated
I have this error when trying to do  `swiftplate -r ./swiftplate`:

```
🚀  Starting to generate project Test...
👉  Removing any previous temporary folder...
✅  Done
👉  Making temporary folder (Test/swiftplate_temp)...
✅  Done
👉  Making a local clone of the SwiftPlate repo...
✅  Done
👉  Copying template folder...
An error was encountered 🙁
Error: Error Domain=NSCocoaErrorDomain Code=260 "The folder “Template” doesn’t exist." UserInfo={NSFilePath=Test/swiftplate_temp/SwiftPlate/Template, NSUserStringVariant=(
    Folder
), NSUnderlyingError=0x7f926940afa0 {Error Domain=NSOSStatusErrorDomain Code=-43 "fnfErr: File not found"}}
```

Maybe I'm missing something ? 🤔 
It work well without the option -r 
I use cookiecutter and my [custom template](https://github.com/artemnovichkov/swift-project-template) for project generation. I guess you have the same problem - it's very hand to update or create a new template. How you do it? It would be great if you add a command for template generation based on existing project. I want to write a script for it, but if you have a plan for it, I'll wait 😃
Will be good a feature where the users could choose the schemes to be generated in the xcode project.

One solution is by command line argument. For example:
```
swift swiftplate/main.swift  # create all schemes (iOS, macOS, watchOS, tvOS)
swift swiftplate/main.swift  --ios # create schemes only for iOS
swift swiftplate/main.swift  --ios --tvos # create schemes only for iOS and tvOS
```


Couple of things here:

1. Added an optional folder for storing things that aren't part of the copy-paste template unless you opt into them via the prompts. 
1. Added a prompt about using Cocoapods in general - provides a file ready for dependencies to be added and initialises the workspace.
1. Added a prompt about using Quick and Nimble via Cocoapods - uses an alternative starting podfile.
1. Added those dependencies to the package manager file if you opt into Q+N.

That last point creates a slight problem if you want to test via `swift test` you'll end up having those dependencies included when you `swift build` as well, which isn't ideal. It's a known issue for SPM that's being worked on (I'm not completely across the status tho). I've included it here by default because it means this can hit all platforms, but people can also delete it if they're happy to just test through Xcode. If you merge this PR I'll create an issue to track that.
Hi John, I think this project is great and I'm looking at things that would take even more steps away from the average developer's initial workflow.

This is a TravisCI + Fastlane combo, which in my experience it works a treat for simplifying the commands needed to build and test (without even getting into all the other delivery related goodies that are on offer). As you can see in the travis config, the advantage of using Fastlane for this purpose is that the entry point is dead simple and should make it easy to add other CI services as well.

Specifically the Fastlane script exercises all 3 test targets and also builds the watch one. If someone wants to remove a target because they're not supporting it they just delete the relevant `scan` step. Any more iOS devices can be easily added and I've left some examples commented out.

Lemme know what you think!