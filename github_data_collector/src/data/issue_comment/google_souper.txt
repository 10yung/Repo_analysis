
This PR adds support for synthesizing freeze instruction.

Before we forget about it, let me file an issue for this.

```
 case Inst::FShl: {
      auto NewKB0 = concatKnownBits(KB0, KB1);
      if (KB2.isConstant()) {
        auto Shift = KB2.getConstant().urem(I->Width);
        NewKB0.Zero = NewKB0.Zero.shl(Shift);
        NewKB0.One = NewKB0.One.shl(Shift);
        Result = NewKB0.trunc(I->Width);
      } else {
```

This code in AbstractInterpreter.cpp looks incorrect. 

LangRef for fshl:
"and the most significant bits are extracted to produce a result"

And trunc removes the most significant bits. LangRef for trunc says:
"The ‘trunc’ instruction truncates the high order bits in value "
The getValue() in Pass.cpp can't tell whether a value comes from existing values from LHS or from the newly synthesized instructions. The getValue() creates a new LLVM value for each instruction in RHS, even when the instruction is harvested as cand from LHS. This brings the dup instructions in the result IR. When the cand contains phi, souper crashes.

I'll get it fixed soon.
Hi,
The `getValue` function in souperPass (lib/Pass/Pass.cpp) try to recursively generate corresponding LLVM IR instructions for a fragment of souper IR. However, in the case where it try to [handle two-operand souper Inst](https://github.com/google/souper/blob/master/lib/Pass/Pass.cpp#L241), it doesn't close the case with a *break* statement.
Thus, if an operand Inst is not supported (i.e. cannot be handled by [the inner switch](https://github.com/google/souper/blob/master/lib/Pass/Pass.cpp#L246)), the control flow will fall through to [next case](https://github.com/google/souper/blob/master/lib/Pass/Pass.cpp#L323), which performs an out-of-bound operand access and crash the program.
Hi,
In SouperPass, if a RHS replacement already has Origins (i.e. associated LLVM Values), the pass will try to reuse it. Before applying the replacement LLVM Instructions, it will [check if the Instructions dominate our replacement point](https://github.com/google/souper/blob/master/lib/Pass/Pass.cpp#L185).
However, if it fails, it will just bail out the whole process and return an replacement failure. I'm wondering if we can simply create another LLVM instruction (and attach to the corresponding Souper Inst) that dominates the replacement point instead.
Thank you.
Hi,
From implementation of `souper::SolveCandidateMap`, which is used by the `souper` command line tool, we know that upon catching error returning from solver, the function will just bail out by returning false ([code](https://github.com/google/souper/blob/master/lib/Tool/CandidateMapUtils.cpp#L89)).
However, in `SouperPass`, it will bail out the entire process only if the error returning from solver is neither timed out nor "value too large" ([code](https://github.com/google/souper/blob/master/lib/Tool/CandidateMapUtils.cpp#L89)). 
Is there any specific reason behind this difference? Do you think it's a good idea to make error handling be consistent in these two places?
We got two ExprBuilders, one is https://github.com/google/souper/blob/f80c7990ef83d0eec529deabbbbd53a08929cb04/include/souper/Extractor/ExprBuilder.h#L24

and one is 
https://github.com/google/souper/blob/f80c7990ef83d0eec529deabbbbd53a08929cb04/lib/Extractor/Candidates.cpp#L117

This might cause confusion. I would suggest renaming the second ExprBuilder to  InstBuilder.
- Alive2 requires `re2c`
Alive2 prerequisites: https://github.com/AliveToolkit/alive2/blob/7ac7142492cb67c8948d454c4a73bb0740976cf3/README.md#prerequisites; it is installed in the souper Dockerfile too: https://github.com/google/souper/blob/f80c7990ef83d0eec529deabbbbd53a08929cb04/Dockerfile#L9
- `llvm` is pulled down via `svn`
https://github.com/google/souper/blob/f80c7990ef83d0eec529deabbbbd53a08929cb04/build_deps.sh#L67

Solution: add `re2c` and `svn` to the prerequisites documented in the README.