Unsure of the following issue's reproducibility, but line **74** of **server.R** file through an error when using anomalyData2()$plot.

Rewriting the plot functionality using base R plot() seemed to fix this (but unsure whether it changes the intended visualization formatting), i.e.:

`anomalyData2()$plot` to `plot(anomalyData2())`
Running ga-dashboard-demo, I was getting an error at line **178** of **server.R**: the zoo() object created was expecting a DataFrame instead of a tibble. See the following related StackOverflow post:
https://stackoverflow.com/a/42645170

Though perhaps not the best solution, under line **178** of **server.R**, I added an explicit coercion to DataFrame:

`agg_data <- as.data.frame(agg_data)`
Using ga-dashboard-demo, I was getting an error in the server.R file of using an atomic object where a DataFrame was expected ('$ is invalid for atomic vector' error). Upon debugging, I discovered removing '$anoms' from lines **79** and **173** of server.R file fixes this.

Within the two functions renderDygraph() and renderDataTable(), we want object 'anomalies' to be a data.frame and not an atomic vector since, later in those functions, we call anomalies$timestamp and anomalies$anoms. If we define anomalies <- anomalyData2()$anoms, it will only keep the column 'anoms' in memory and we won't be able to retrieve $timestamp within the function.
The AnomalyDetection package as installed directly from the Twitter GitHub repo (linked within the code) causes an error when plotting the result of AnomalyDetectionTs (line 86 of functions.R) on the UI.R side since ggplot2 expects POSIXct objects rather than POSIXlt. The coercion happens under the hood of the AnomalyDetectionTs function.

To avoid this, install the following fork to avoid the implicit conversion (worked for me, haven't noticed any impact from the fork on the rest of the code):
devtools::install_github("hrbrmstr/AnomalyDetection")
From John:

Thanks for the clarification, I actually saw that the month function wasn't working correctly. I corrected it by modifying  the "lag_one_total/lag_two_total" code. 
Here's an example of the modified code below:

``` r
  lag_one_total <- sum(data[data$period == lag_one_period &
                              year(data$date) == year(lag_time(time_period, 1)),2], 
                       na.rm=T)
```

By the way does the "now_period" variable serve any function? I can't seem to find its use. Also the "diff_period" variable seems to have an incomplete formula for % difference. Personally I prefer to use the formula for % change.
