root@niuyuling:/mnt/c/Users/niuyuling/Desktop/libini# ../c/c test.c  -L./ -lini -static
/usr/bin/ld: /tmp/cc3AcSun.o: in function `main':
test.c:(.text.startup+0x21): undefined reference to `getinikeystring'
/usr/bin/ld: test.c:(.text.startup+0x5f): undefined reference to `getinikeystring'
/usr/bin/ld: test.c:(.text.startup+0x9a): undefined reference to `getinikeyint'
/usr/bin/ld: test.c:(.text.startup+0xdd): undefined reference to `getinikeylong'
/usr/bin/ld: test.c:(.text.startup+0x121): undefined reference to `getinikeyfloat'
/usr/bin/ld: test.c:(.text.startup+0x170): undefined reference to `putinikeystring'
/usr/bin/ld: test.c:(.text.startup+0x18d): undefined reference to `getinikeystring'
/usr/bin/ld: test.c:(.text.startup+0x1cd): undefined reference to `getinikeystring'
collect2: error: ld returned 1 exit status
root@niuyuling:/mnt/c/Users/niuyuling/Desktop/libini#


root@niuyuling:/mnt/c/Users/niuyuling/Desktop/libini# ../c/c 'test.c  -L./ -lini -static'
/usr/bin/ld: 找不到 -lini
collect2: error: ld returned 1 exit status
root@niuyuling:/mnt/c/Users/niuyuling/Desktop/libini#

可不可以支持多文件或者链接库文件
Can I support multiple files or link library files?
A better "shebang" would be
```
///bin/true; /usr/bin/c "$0" "$*"; exit $?
```
as it would keep file compileable with normal `gcc` invocation. See example of this [here](https://github.com/yugr/gcc-interp/blob/f64596f81fe4a05590d31598c89452834cbe9b74/gcci#L126) (also [discussion](https://stackoverflow.com/questions/7707178/whats-the-appropriate-go-shebang-line) on StackOverflow).
It would be great to be able to pipe into `c` : 
```sh
cat file.c | c
```
```sh
c < file.c
```
This would allow the use of tools that compile into c such as [awib](https://github.com/matslina/awib).
I am not sure if you have much interest in this, but I found that this method of creating id is no less reliable and faster as well as cheaper.

I must admit I have not done exhaustive testing, but if you find this interesting I am happy to do a good bit more validation. In my limited testing it has been reliable.

Ran a few comparisons just so there's something I can show. The only difference is this changeset.

These are my two test scripts...
```
#!/bin/sh
echo "*** Run 1000 iterations new method ***"
for i in `seq 0 999`; do
    /home/ubuntu/bin/c.new "redis-h1get.c -ggdb -Wall -I/usr/include/hiredis `pkg-config --libs --cflags hiredis`" h1 tags > /dev/null
done
echo "*** Done running new method ***"
```

```
#!/bin/sh
echo "*** Run 1000 iterations original method ***"
for i in `seq 0 999`; do
    /home/ubuntu/bin/c "redis-h1get.c -ggdb -Wall -I/usr/include/hiredis `pkg-config --libs --cflags hiredis`" h1 tags > /dev/null
done
echo "*** Done original method ***"
```

```
*** Run 1000 iterations new method ***
*** Done running new method ***
3.56user 6.32system 0:38.73elapsed 25%CPU (0avgtext+0avgdata 3280maxresident)k
0inputs+16000outputs (0major+2885064minor)pagefaults 0swaps

*** Run 1000 iterations new method ***
*** Done running new method ***
3.48user 6.51system 0:38.55elapsed 25%CPU (0avgtext+0avgdata 3304maxresident)k
0inputs+16000outputs (0major+2890112minor)pagefaults 0swaps


*** Run 1000 iterations original method ***
*** Done original method ***
17.10user 19.30system 1:02.29elapsed 58%CPU (0avgtext+0avgdata 8440maxresident)k
0inputs+112000outputs (0major+3196581minor)pagefaults 0swaps

*** Run 1000 iterations original method ***
*** Done original method ***
16.76user 20.06system 1:01.91elapsed 59%CPU (0avgtext+0avgdata 8420maxresident)k
0inputs+112000outputs (0major+3196095minor)pagefaults 0swaps
```
Thanks!
hello man can you help me in C ?
i now how to extract **ANCII** chars and **concaternate** them..
what i need to know its how can i **execute** that ancii string after concaternation ..

example:
1º i what to extract the string whoami from ancii chart
2º concaternate the chars to build whoami command
3º and execute the string concaternated ..

this code does allmost everything..
it extracts the chars, concaternate them ...
but it only **prints** the string ..
but i dont what to **print** ..i want to **execute** ..


```
#include <stdio.h>
#include <string.h>

  int main(void)
    {
      /* variable declarations */
      char a = 119;  /* ancii character w */
      char b = 104;  /* ancii character h */
      char c = 111;  /* ancii character o */
      char d = 97;   /* ancii character a */
      char e = 109;  /* ancii character m */
      char f = 105;  /* ancii character i */
 
      /* concaternate and transform decimal values to ancii chars using putchar */
      //char command = putchar('a');putchar('b');putchar('c');putchar('d');putchar('e');putchar('f');

      /* execute command using system() */
      int system(char command);
        system(command);
    }

```
I got your script working on freebsd with multiple parameters using this as my first line

#!/usr/bin/env -S c "-I/usr/local/include/ -g -L/usr/local/lib/mysql/ -lmysqlclient --"

might be worth mentioning in the readme
Hi, I noticed that depending upon what I pass to C sometimes result is not what I expect. Having looked at `https://github.com/ryanmjacobs/c/blob/master/c#L54` I am a bit confused and thought it is worth raising this question. I see that here instead of trying to process all command line arguments, we there is a `for arg in $1`, which even if we do a shift later won't mean that this for look is going to run more than once. I assumed that maybe that should have been `$@`, but it would break some of this logic also.

Anyway, I think my question, since there are not comments there to help me understand, is whether or not this loop at line 54 was meant to be gone through more than once. If so, I think there may be problems with it.

Thanks!
None
it would be great to have a `--debug` flag to launch `gdb`
