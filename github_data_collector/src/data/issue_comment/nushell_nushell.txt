**Is your feature request related to a problem? Please describe.**
No, just the ergonomics of shortened flags

**Describe the solution you'd like**
Instead of having to type `--help` or `--full`, it would be much more convenient to just use `-h` or `-f` respectively. Outside of convenience, this would mimic previous shells allowing easier/faster adoption by new users and also make it easy to port commands as plugins if a user desired.
Additionally, the flags should be able to be contracted together so instead of having to type `cmd -<a> -<b> -<c>` one could enter `<cmd> -<abc>` providing yet more ergonomics and further mimicking existing shells.

**Describe alternatives you've considered**
The only other option I know of would be to leave it as it is with just long-form flags.

**Problem**
When you end up with a table of primitive data, it is not possible to sort it anymore.

Example:

```
❯ ls | get name
━━━━┯━━━━━━━━━━━━━
 #  │ <value> 
────┼─────────────
  0 │ Cargo.toml 
  1 │ LICENSE.md 
  2 │ Cargo.lock 
  3 │ cli 
  4 │ README.md 
  5 │ .gitignore 
  6 │ .git 
━━━━┷━━━━━━━━━━━━━
```

It is not possible to sort on the column `<value>`. You have to `wrap` the data to make it sortable again:

```
❯ ls | get name | wrap foo | sort-by foo
...
```

**Solution**
Adapt `sort-by` to support sorting primitive data.
This can be done by allowing not specifying a column to sort by. In this case it should sort on the first column of the data.

**Note:** this will also work for regular tables, in this case the table will be sorted by the first column, which seems reasonable.

**Alternative solutions**
Add a new command `sort` specifically for sorting primitive data.

But having a command `sort-by` and `sort` which you should use depending on the kind of data you are processing seems confusing.
It would make more sense to (eventually) rename `sort-by` to `sort` and provide an option `sort --by` (as proposed by @jonathandturner  on Discord).

When using `ls` command, the list of files is numbered from `0` instead of `1`. Fix the list to start from 1
**Describe the bug**
The parser panics if you try to parse `f();`

**To Reproduce**
Steps to reproduce the behavior:
1. type `f();`
2. Hit enter
3. 

**Expected behavior**
Parser should never crash

**Screenshots**

![image](https://user-images.githubusercontent.com/547158/72550911-a5078600-38f8-11ea-9a49-c246b0b44f73.png)
```

**Configuration (please complete the following information):**
 - OS: Windows
 - Version: 0.8.1
 - Optional features: Stable


**Describe the bug**
On Windows (either the regular shell or Windows Terminal Preview) none of the keyboard-based `paste` hotkeys work. Only the mouse one.

**To Reproduce**
Steps to reproduce the behavior:
1. Copy text to the clipboard
1. Run `nu.exe`
2. Press `Shift+Insert` or `Ctrl+V`

**Expected behavior**
The text from the clipboard is written where the cursor currently is in the nu shell.

**Configuration (please complete the following information):**
 - OS: Windows 10
 - Version 1909 (Build 18363.592)

Both `Shift+Insert` and `Ctrl+V` work in other shell on Windows. Both in the default shell window and the new Windows Terminal. But for nu, it seems that the only way to paste is using the right-mouse-button. 

**Describe the bug**
If I run `from-ssv` on an empty table (i.e. only the headers are present) it returns an error. I would expect to see a table without rows.

**To Reproduce**
Steps to reproduce the behavior:
1. Find a command that outputs an empty table, `docker ps` in my case:
```
❯ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

```
2. Pipe it into `from-ssv`:
```
❯ docker ps | from-ssv
error: Could not parse as SSV
- shell:1:20
1 | docker ps | from-ssv
  |             ^^^^^^^^ input cannot be parsed ssv
- shell:1:20
1 | docker ps | from-ssv
  | ------ value originates from here

```

**Expected behavior**
I would expect `from-ssv` to display an empty table:

```
❯ docker ps | from-ssv
━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━
 CONTAINER ID │ IMAGE           │ COMMAND        │ CREATED        │ STATUS        │ PORTS           │ NAMES 
──────────────┼─────────────────┼────────────────┼────────────────┼───────────────┼─────────────────┼─────────────────
━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━

```

**Screenshots**
N/A

**Configuration (please complete the following information):**
 - macOS Catalina
 - nu 0.8.0

**Describe the bug**
Changing directory to a folder with a dot in the name results in a parse error.

**To Reproduce**
Steps to reproduce the behavior:
1. mkdir trying.this.out
2. cd trying.this.out/
3. See the parse error.

**Expected behavior**
That the directory name is parsed correctly and the current directory changed.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Configuration (please complete the following information):**
 - OS: OSX
 - Version 0.8.0

As in #491: the workaround with enclosing the folder name in quotes works, although not convenient. (e.g. `cd "trying.this.out"` works.)
**Is your feature request related to a problem? Please describe.**
When using bash or zsh on Mac, running `ls` in a folder that contains symlinks will display the symlinks as such: 

```
.zprofile -> /Users/josephlyons/.dotfiles/files/.zprofile
```

nushell does not seem to show where the symlink points, which seems to be a vital piece of information for a symlink.

**Describe the solution you'd like**
It would be great if nushell could (somehow) indicate what file the symlink is pointing to.

**Describe alternatives you've considered**
I have no alternatives to this, other than using `^ls -la`.

If this is already possible or there is an additional command I missed, I apologize, and would appreciate hearing about it.  Thanks.

**Describe the bug**
According to https://github.com/nushell/nushell/issues/859#issuecomment-570910178 `clear` should now work on Windows, but it isn't available for me.

**Screenshots**
![Screenshot 2020-01-14 01 25 35](https://user-images.githubusercontent.com/2467194/72303236-d1a76d80-366c-11ea-8cea-15a75379a0ab.png)

**Configuration (please complete the following information):**
 - OS: Windows
 - Version 0.8.0

__Notes__
`C-l` *does* work as expected however.
**Describe the bug**
We currently list every column name in inner row. For long rows, this can get quite large

**To Reproduce**
Steps to reproduce the behavior:
1. open a toml/json file with large inner rows

**Expected behavior**
Abbreviate the inner row headers

**Screenshots**
```
 19 │ devDependencies │ [row @azure/abort-controller @microsoft/api-extractor
    │                 │ @rollup/plugin-commonjs @rollup/plugin-json @rollup/plugin-
    │                 │ multi-entry @rollup/plugin-node-resolve
    │                 │ @rollup/plugin-replace @types/express @types/jws @types/mocha
    │                 │ @types/node @types/qs @types/uuid @typescript-eslint/eslint-
    │                 │ plugin @typescript-eslint/parser
    │                 │ assert cross-env eslint express inherits karma karma-chrome-
    │                 │ launcher karma-coverage karma-env-preprocessor
    │                 │ karma-junit-reporter karma-mocha karma-mocha-reporter karma-
    │                 │ remap-coverage mocha mocha-junit-reporter mocha-multi
    │                 │ open prettier puppeteer rimraf rollup rollup-plugin-sourcemaps
    │                 │ rollup-plugin-terser rollup-plugin-visualizer typescript util]
```

