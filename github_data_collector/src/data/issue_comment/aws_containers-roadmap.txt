Whenever a user utilises the ECS Console to create a new task definition using the 'JSON' representation, the ECS console escapes ‚Äú\‚Äù when entered in values of task definitions.
It is no longer possible to enter valid JSON values containing newlines into the ENV (\n) of a task definition via the console because the form fields are only single line text fields which don't support newlines.  This has been an issue for many months. 

Creating the task definition with new lines (\n) via the SDK or CLI is working (the backslash "\\" is not escaped).  

Whenever I tried to introduce a new line within the 'Environment' portion, the console escapes the backslash, so as result, it converts a newline (\n) into (\\\n) escaping the backslash.  


**Which service(s) is this request for?**
This could be Fargate, ECS

Right now, it looks like the image being run is a constant `AgentImageName = "amazon/amazon-ecs-agent:latest"`.  It'd be useful if this could be changed with an environment variable or something so that it's simpler to test and use custom forks of the agent.

**Tell us about your request**
Support for blue/green deployments of ECS/Fargate in AppMesh

**Which integration(s) is this request for?**
Fargate, ECS

**Tell us about the problem you're trying to solve. What are you trying to do, and why is it hard?**
We need to implement blue/green deployment for our containers running inside AppMesh.
Recently support has been added in CodeDeploy to perform blue/green in ECS/Fargate  [(link)](https://aws.amazon.com/blogs/devops/use-aws-codedeploy-to-implement-blue-green-deployments-for-aws-fargate-and-amazon-ecs/). This however is based around Load Balancers and Target Groups. We would like this support to include AppMesh routing as well.

**Are you currently working around this issue?**
Using custom scripts to perform deployments.

<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a üëç [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave "+1" or "me too" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

**Tell us about your request**

Fargate for ECS has FireLens, a managed observability experience built around the open source projects Fluentd and Fluent Bit. [AWS for Fluent Bit](https://github.com/aws/aws-for-fluent-bit) provides a lightweight solution for AWS customers to process and ship telemetry data to many destinations. 

We are evaluating ways in which we can make it easy, simple, and reliable to use AWS for Fluent Bit on EKS Fargate.

**Which service(s) is this request for?**
EKS Fargate

<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a üëç [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave "+1" or "me too" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

**Tell us about your request**
FireLens has been [demonstrated to be a fairly reliable log solution](https://aws.amazon.com/blogs/containers/under-the-hood-firelens-for-amazon-ecs-tasks/).

That being said, FireLens could go farther on Fargate, become more managed and provide greater assurances of reliability. The Fargate platform has unique challenges because containers are ephemeral. Currently, the FireLens container is just another container in the Task, and when the Task stops is gets a standard 30 second Sigterm to SigKill timeout. Furthermore, in the unlikely case that Fluentd/Bit goes down, all logs would be lost because Fargate containers are ephemeral.

Ideally, AWS could provide two features for FireLens on Fargate to improve reliability:

1. Enable a file buffer for the Fluentd/Bit FireLens container, and restart the container if it goes down. Failures in the FireLens container would not stop a task, and logs would be preserved between stops and re-starts.
2. Build a more robust mechanism than the built in Sigterm-SigKill timeout for the FireLens container. Ideally, after a task stops the FireLens container would be given sufficient time to send all logs/data (up to a reasonable timeout measured in minutes). This might require changes to Fluent Bit. That way, when your task stops, all logs/data would be retrieved. (Note that providing a hard guarantee/promise around reliability is almost certainly impossible).

<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a üëç [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave "+1" or "me too" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

**Tell us about your request**
At the moment, users often run 2 - 3 side cars or daemons for observability. Fluent Bit/FireLens takes care of logs, but then you need a metrics agent and a tracing agent. This proliferation of agents adds management overhead.

We are evaluating turning Fluent Bit into a more general observability solution. The community is already working on a [Statsd input support](https://github.com/fluent/fluent-bit/pull/1756).

This idea is very early-stage; please give us your thoughts and let us know if you think it would be valuable.

**Which service(s) is this request for?**
Fargate, EKS, ECS



<!--- Please keep this note for the community --->

### Community Note

* Please vote on this issue by adding a üëç [reaction](https://blog.github.com/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) to the original issue to help the community and maintainers prioritize this request
* Please do not leave "+1" or "me too" comments, they generate extra noise for issue followers and do not help prioritize the request
* If you are interested in working on this issue or have submitted a pull request, please leave a comment

<!--- Thank you for keeping this note for the community --->

**Tell us about your request**

Newer versions of Amazon ElasticSearch Service require Sigv4 auth with valid AWS credentials. Fluent Bit has an output plugin for ES, but it does not support Sigv4 auth.

Many customers have asked for the ability to send logs directly to Amazon ES. This applies to FireLens users and EKS users who run Fluent Bit as a daemonset. 



**Tell us about your request**
Support for Kubernetes 1.17 in Amazon EKS

[Upstream Release timing](https://github.com/kubernetes/sig-release/tree/master/releases/release-1.17)
[Changelog](https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.17.md)
EDIT: as @ronkorving, image caching is available for EC2 backed ECS. I've updated this request to be specifically for Fargate.

What do you want us to build?
I've deployed scheduled Fargate tasks and been clobbered with a high data transfer fees pulling down the image from ECR. Additionally, configuring a VPC endpoint for ECR is not for the faint of heart. The doc is horrific.

It would be much more pleasant if there were a (hidden is fine) resource local to the instance where my containers run which could be used to load my docker images.

**Which service(s) is this request for?**
Fargate and ECR.

**Tell us about the problem you're trying to solve. What are you trying to do, and why is it hard?**
I shouldn't be charged for pulling a Docker image every time my scheduled Fargate task runs. It leaves a bad taste in my mouth. :)
In all honesty, I feel like I'm being ripped off. I love Fargate but this is unpleasant. On that note the VPC endpoint doc should be better too. These are the kinds of usability issues that destroy the whole notion of "serverless" (Fargate being a serverless container orchestrator). I really don't want to have to deal with these kinds of details.

**Are you currently working around this issue?**
This was for a personal project, I instead just deployed an EC2 instance running a cron job, which is not my preference. I would prefer being able to use Docker and the ECS/Fargate ecosystem.


I have "FARGATE_SPOT" as my default capacity provider for the ECS cluster and all the services. However, when I run aws ecs deploy it deploys fine but the launch type for the new tasks are just set to "FARGATE" instead of "FARGATE_SPOT". 

I have blue/green as my deployment type