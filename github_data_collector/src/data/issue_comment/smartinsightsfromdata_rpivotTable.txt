Possible fix to #109

I realize the new code is a little bit more verbose but I hope it makes cleaner as well.

Note that we can skip `structable` and `data.table` classes when making new methods thanks to inheritance (`structable` inherits from `ftable` and `data.table` from `data.frame`).
I would like to extend `rpivotTable()` for a my custom class (derived from data.frame) where some parameters (such as dimension for rows and columns) are predefined and user does not need to specify them. Currently one has to write ugly wrappers such as `rpivotTableFromMyClass()` to do the trick. 

It would be wonderful if we could just use S3 methods dispatch.
I want to have my rpivotTable aligned to left side of the screen ignoring template setting. Due to the `html_output` template things like `<div align="left">` does not work. Defining styles as the beolw works, but AFAIU the problem is it overrides rpivotTable styles provided to function call, like `height="100%"`, which makes the table overlaying on the text which is normally below the table, when mentioned style is not added.
```
<style>
.rpivotTable{
  position: absolute;
  left: 10px;
}
</style>
```

Is there any way to simply append those styling attributes to achieve the left alignment?
closes #104 
It also renames `sorter` argument to `sorters` to match its name documented in vignette, and to match the name of arg in js library. Should not cause any break because of R's argument partial matching feature.
Using factor is nice when you want to have ordered your strings, and is being used commonly in plotting libraries/functions. I don't see reason why pivot table should behave differently.
Below example shows that order of levels is ignored. This feature request is about ordering those `rows`/`cols` entries according to order of factor levels.
```r
df = data.frame(name = factor(c("b","a","b","b","a"), levels=c("b","a")),
                grp = factor(c("x","x","y","y","y"), levels=c("y","x")),
                val = 1:5)
rpivotTable(df,
            rows = "name",
            cols = "grp",
            aggregatorName = "Average",
            vals = "val")
```
factor levels could automatically populate `sorters` argument.
Hi, Im trying to use your package in my app but unfortunally it seems there is a bug. 
First a short introduction in the problem and my app:
The app uses an login interface for authentification. If the user input was valid the ui changes from login to dashboard view. One part of the dashboar is the pivottable. Up to here everythinkg works fine but if I click on the logout button and login again, the pivottable does not show up anymore. I'm trying to fix that issue since days. First I thought that my code is not working  properly but if I replace the pivottable with some other reactive output everthing is working fine. Only when I include the pivottable in the server all reactive outputs are no longer displayed.
The following code is just a snipped of my app. 

Would be very grateful for help!

```r
if (!require("pacman")) install.packages("pacman")
pacman::p_load(shiny, shinyBS, shinydashboard, shinyjs, dplyr,RMySQL,pool,rpivotTable)

#devtools::install_github(c("ramnathv/htmlwidgets", "smartinsightsfromdata/rpivotTable"))


mydata <- data.frame(
  product = c('A','B','C','A','B','C','A','B','C'),
  sold = c(5, 10, 15, 7, 6, 5, 9, 3, 1),
  date = as.Date(c('2010-01-01','2010-01-01','2010-01-01','2010-01-02','2010-01-02','2010-01-02','2010-01-03','2010-01-03','2010-01-03'))
)

user_data <- data.frame(
  user = c("Andreas", "Sascha", "Tobias"),
  password = c("123","123","123"), 
  permissions = c("admin","admin","admin"),
  name = c("Andreas", "Sascha", "Tobias"),
  stringsAsFactors = FALSE,
  row.names = NULL
)

ui <- dashboardPage(
  
  # Dashboardheader
  dashboardHeader(uiOutput("header")),
  
  # Dashboardsidebar
  dashboardSidebar(collapsed = TRUE,
                   sidebarMenu(id = "sidebar", sidebarMenuOutput("sidebar"))),
  
  # Dashboardbody
  dashboardBody(
    
    # Turn shinyjs on
    shinyjs::useShinyjs(),
    
    uiOutput("body")
  )
)

server <- function(input, output) {
  values <- reactiveValues()
  # reactive value to trigger the body, sidebar, header of dashboard depending on the login-state 
  values$login <- FALSE
  
  # header of login-Module (nothing in it)
  login_header <- function(){
  }
  
  # header if user is logged in
  auth_header <- function(){
    fluidRow(
      column(12,actionButton("logout_button","Logout",class = "btn-danger", style = "color: white; border-color: #d73925; background: #dd4b39")))
  }
  
  # Sidebar of login-Module (empty)
  login_sidebar <- function(){
    sidebarMenu()
  }
  
  # Sidebar if user is logged in 
  admin_sidebar <- function(){
    
    sidebarMenu(
      menuItem("Home", tabName = "home", icon = icon("home"))
    )
  }
  
  # Body if user is logged in 
  admin_body <- function(){
    tabItems(
      # Body for "Startseite" menuItem  
      tabItem(tabName = "home",class = "active",
              dateRangeInput('dateRangeInput',
                             label = 'Date',
                             start = as.Date(max(mydata$date))-2, 
                             end = as.Date(max(mydata$date)),
                             min = as.Date(min(mydata$date)),
                             max = as.Date(max(mydata$date)),
                             format = "yyyy-mm-dd",
                             language = "de"),
              
              fluidRow(
                tabBox(width = 8,
                       tabPanel("Tabelle", rpivotTableOutput("pivotTable",width = "100%", height = "100%"))
                )
              )
      )
    )
  }
  
  # Body of login-Module
  login_body <- function(){
    div(id = "panel", style = "width: 500px; max-width: 100%; margin: 0 auto; padding: 20px;",
        wellPanel(
          tags$h2("LogIn", class = "text-center", style = "padding-top: 0;"),
          
          textInput("user_name", shiny::tagList(shiny::icon("user"), "Username")),
          
          passwordInput("password", shiny::tagList(shiny::icon("unlock-alt"), "Password")),
          
          div(
            style = "text-align: center;",
            actionButton("login_button","LogIn"))
        ),
        
        shinyjs::hidden(
          div(id = "error",
              tags$p("Wrong Password or Username",
                     style = "color: red; font-weight: bold; padding-top: 5px;", class = "text-center"))
        )
    )
  }
  
  
  observeEvent(input$login_button,{
    username_input = input$user_name
    pw_input = input$password
    
    # get pw of user_name stored in user_data
    pw <- user_data%>%
      filter(user==username_input)%>%
      select(password)%>%
      as.character()
    
    # if input pw matches pw stored in db set login to true
    if(pw_input==pw){
      values$login <- TRUE
    }
    # else show error
    else{
      shinyjs::toggle(id = "error", anim = TRUE, time = 1, animType = "fade")
      shinyjs::delay(5000, shinyjs::toggle(id = "error", anim = TRUE, time = 1, animType = "fade"))
    }
  })
  
  
  observeEvent(values$login,{
    # if login-data was valid show dashboard
    if(values$login){
      output$header <- renderUI(auth_header())
      output$body <- renderUI(admin_body())
      output$sidebar <- renderMenu(admin_sidebar())
      shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
    }
    # else show login module
    else{
      output$body <- renderUI(login_body())
      output$header <- renderUI(login_header())
      output$sidebar <- renderMenu(login_sidebar())
      shinyjs::addClass(selector = "body", class = "sidebar-collapse")
    }
  })
  
  # set login to false if user clicks on logout -> go back to login module (see obsereEvent(values$login))
  observeEvent(input$logout_button,{
    values$login <- FALSE
  })
  
  # ----------------------------------------------------------------------
  #     Pivot Tabelle
  # ----------------------------------------------------------------------
  output$pivotTable <- renderRpivotTable({

  pivot_data <-mydata%>%
      filter(date >= input$dateRangeInput[1] & date <= input$dateRangeInput[2])%>%
      select(product,sold,date)

    rpivotTable(
      data = pivot_data, rows = "product",cols="date", vals = "sold",
      aggregatorName = "Sum", rendererName = "Table",
      subtotals = FALSE)
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
```
R packages that can be used in Shiny typically provide simple methods of escaping html. For example, in rHandsonTable, kable, rFullCalendar you simply set a escape flag to true or false. Please provide an option to escape html in rPivotTable.
Thank you.

Example:

df <- data.frame(Col1 = c("&lt;b&gt;Cat&lt;/b&gt;","Dog","&lt;b&gt;Ferret&lt;/b&gt;"), Col2 = c(1,2,3), Col3 = c("a","b","b"))

rpivotTable(df,rows = c("Col2"),cols = c("Col3"),vals = "Col1",aggregatorName = "Last",rendererName = "Table")



I use rpivottable on several (rmarkdown) web pages. 
I have seen [an example here](https://pivottable.js.org/examples/save_restore.html) of saving/restoring table configuration to cookie. 
Since I am not good in javascript, I would like to ask if it is possible to add two buttons on top of the table control, allowing the users to save/load their preferred table configurations. Could you provide the code to achieve that.
Thanks.  

Thank you for the great work, 

I want to know how to add 'TVS Export' to the renders list. 

Dear Team,

I am in need of some code modification so that my Date column is in reverse order, so most recent dates to past dates. Below is what I tried, however this just shows the two dates first not necessarily this as a range from 2019-01-31 to 2010-01-31. Any solution would really help if you have any time to help.

df is the dataframe

rpivotTable(df, rows=c("ForecastGroup","Date"),
                    cols=c("Region"), aggregatorName="Sum",
                    rendererName = "Table", vals="Tons",
                    sorters=
                                   "function(attr) {
                                         var sortAs = $.pivotUtilities.sortAs;
                                         if (attr == \"Date\") 
                                            { return sortAs([\"2019-01-31\", \"2010-01-31\"]); }
                                     }"
)

Thanks,