Looks like 17.0.0 release broke routing.

This code doesn't work as expected any more: https://github.com/Novage/wt-tracker/blob/b6c34fb3d16f63dd12bed6be74050b447aceb3c0/lib/run-uws-tracker.ts#L89

I want to serve index "/", "/stats.json" and 404 for all other requests "/*".

But when I add "/*" route all other routes stop working.
Some PDF or something nice based on the comments in the code.
You probably shouldn't have to specify all callbacks in a websocket behavior for it not to crash
When using `TemplatedApp.publish()` it does publish to all as it should but when using `WebSocket.publish()` there should be an ability to make it so it ignores this specific WebSocket when publishing. It would be very useful for me in many cases like when a client sends data about his position there is no need to send it back to him just the other clients.
Hi, I'm using Websocket-sharp in my Unity game as client that is connecting to a uWebsocket backend server.
We want to enable Per-message Compression for this connection but the problem is that when I enable compression in client the server refuses the request from the client. 

We also reproduced this issue with [ws library in node js](https://github.com/websockets/ws) as backend with its provided example configuration, but the problem persists. When we set serverMaxWindowBits in ws library to default negotiated value, the client can connect to the server properly.

Now my question is, Is there any way that we can control this serverMaxWindowBits in uWebsockets? 


uWebSocket 16.4
CentOS 7
Node js 10.17

Thanks.
Is there any best practice for implementing websockets authorization with uWS? 
In previous versions of the library it was possible to check a bearer token in the req.headers of the initial HTTP request before upgrading to websockets, then respond with status 401 oer whatever. Is this still possible somehow? currently I am doing the authorization in the ws callback like this:
```ts
app
  .ws("/*", {
    /* Options */
    compression: CompressOptions.SHARED_COMPRESSOR,
    maxPayloadLength: 16 * 1024 * 1024,
    idleTimeout: 10,
    open: (ws, req) => {
      console.log("A WebSocket connected via URL: " + req.getUrl() + "!");

      console.log(ws, req.getHeader("authorization"));

      const authorization = req.getHeader("authorization");

      if (authorization) {
        const token = authorization.split(" ")[1];
        if (token) {
          ws.userId = getUserIdFromToken;
          if(ws.userId) {
             return;
        }
      }
      // 404 is not a valid websocket error code
      ws.end(404, "Unauthorized");
    },
```
Problem is that there are not suitable standard websocket error codes that express missing authorization or similar. Also it is not as clean as just doing the authorization before even starting the ws connection.


I am using dart websockets:

**Dart:**
```
  bool connect() {
    _channel = IOWebSocketChannel.connect("ws://$_serverHost:$_serverPort/",
        headers: {"user": "any"}, pingInterval: Duration(seconds: 6) );
    _channel.sink.add("connected!");
    _channel.stream.listen((onData){
      print(onData);
    });
    return true;
  }
```
**C++:**
```
void Server::Start() {
  /* ws->getUserData returns one of these */
  struct PerSocketData {
    std::string *userName;
  };
  /* Simple echo websocket server, using multiple threads */
  std::vector<std::thread *> threads(std::thread::hardware_concurrency());

  std::transform(
      threads.begin(), threads.end(), threads.begin(),
      [](std::thread *t) {
        return new std::thread([]() {
          /* Very simple WebSocket echo server */
          uWS::App()
              .ws<PerSocketData>(
                  "/*", {/* Settings */
                         .compression = uWS::SHARED_COMPRESSOR,
                         .maxPayloadLength = 16 * 1024,
                         .idleTimeout = 10,
                         .maxBackpressure = 1 * 1024 * 1204,
                         /* Handlers */
                         .open =
                             [](auto *ws, auto *req) {
                               PerSocketData *data = (PerSocketData *)ws->getUserData();
                               //data = new PerSocketData;
                               data->userName = new std::string(req->getHeader("user"));
                               std::cout << *data->userName <<" se conectou!" << std::endl;
                             },
                         .message =
                             [](auto *ws, std::string_view message,
                                uWS::OpCode opCode) {
                               std::cout << message << std::endl;
                             },
                         .drain =
                             [](auto *ws) {
                               // Check getBufferedAmount here
                               std::cout << "drain" << std::endl;
                             },
                         .ping =
                             [](auto *ws) {
                               std::cout << "ping" << std::endl;
                             },
                         .pong =
                             [](auto *ws) {
                               //
                               std::cout << "pong" << std::endl;

                             },
                         .close =
                             [](auto *ws, int code, std::string_view message) {
                               //
                               PerSocketData *data = (PerSocketData *)ws->getUserData();
                               std::cout << *data->userName << " desconectado!" << std::endl;
                              delete data->userName;
                             }})
              .listen(9001,
                      [](auto *token) {
                        if (token) {
                          std::cout << "Thread " << std::this_thread::get_id()
                                    << " listening on port " << 9001
                                    << std::endl;
                        } else {
                          std::cout << "Thread " << std::this_thread::get_id()
                                    << " failed to listen on port 9001"
                                    << std::endl;
                        }
                      })
              .run();
        });
      });

  std::for_each(threads.begin(), threads.end(),
                [](std::thread *t) { t->join(); });
}
```

but ping / pong is not working correctly. When the client sends ping the event is not called on the server;



I implemented the CompressorOptions (#926) now for the dedicated-compressor (not for the shared one). Please check if it fits your requirements.

By the way: The negotiation of permessage-deflate options (like max-window-bits) does not need to be changed here - as theese are just hints (which are currently ignored anyway). The actual negotiation of deflate-options is done inside the zlib-protocol. (At least in 0.14 we patched just the deflateInit2() params and it runs fine in production :-))

I also renamed CompressOptions -> CompressorType in a separate commit - to avoid naming confusion.
But it's an incompatible change maybe - it's just a proposal :-)

By the way: I added the new option also to the examples - as in C++<=17 all members have to be initialized. What's your plan here for the future? Just wait for C++20, where you can initialize specific members only? :-)
To optimize memory usage when using DEDICATED_COMPRESSOR it would be nice to make the hardcoded values for `deflateInit2()` in https://github.com/uNetworking/uWebSockets/blob/master/src/PerMessageDeflate.h#L69 configurable.

Is it worthwhile to write a pull-request for that? I can try to add the options to WebSocketBehavior struct?

Example: Currently we use `windowBits = -11, memLevel = 3` with almost the same compression ratio for simple JSON messages ... but reduced zlib RAM usage to ~12-16 KB / client, instead of 300 KB (important when having ~25.000 connections ;-))
Is there a `tryWrite` method like `tryEnd` or can there be?

difference with `tryEnd` being it won't require size argument when writing, but will give backpressure handling capability.

Example usage:

```js
    readStream.on('data', (buffer) => {
      const chunk = buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength),
        lastOffset = res.getWriteOffset();

      // First try
      const ok = res.tryWrite(chunk);

      if (!ok) {
        // pause because backpressure
        readStream.pause();

        // Save unsent chunk for later
        res.ab = chunk;
        res.abOffset = lastOffset;

        // Register async handlers for drainage
        res.onWritable((offset) => {
          const ok = res.tryWrite(res.ab.slice(offset - res.abOffset));
          if (ok) {
            readStream.resume();
          }
          return ok;
       });
      }
    });
    readStream.on('end', () => res.end());
```

or are there are alternatives?