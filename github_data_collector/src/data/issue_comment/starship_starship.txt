Adding two new configuration settings: `show_namespace` and `show_context` which let user manage Kubernetes module display. 

Both settings matter only if namespace is known (if not, we show context name and that's it) and simply enable/disable appropriate segments. So by default (with both set to true) we get `context (namespace)` but we setting one of those to false we can get `context` or `namespace`.

This in particular resolves https://github.com/starship/starship/issues/839 

Warning: this is my first contact with Rust, after briefing some book yesterday.
Enjoy!

<!--
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                                This issue has been pre-populated with your system's configuration
                                                      ‚ô• Thank you for submitting a bug report ‚ô•
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
-->
    
## Bug Report

#### Current Behavior
<!-- A clear and concise description of the behavior. -->
Prompt is not showing glyphs, instead it shows the square box with question mark.
<img width="350" alt="Screen Shot 2020-01-17 at 12 38 23 PM" src="https://user-images.githubusercontent.com/484084/72633373-4f49d280-3926-11ea-9cf5-6c12a467bb1c.png">
Even though iTerm is setup to use a font that has glyphs
<img width="589" alt="Screen Shot 2020-01-17 at 12 38 13 PM" src="https://user-images.githubusercontent.com/484084/72633361-4bb64b80-3926-11ea-9c82-238c061d915d.png">
<img width="155" alt="Screen Shot 2020-01-17 at 12 35 11 PM" src="https://user-images.githubusercontent.com/484084/72633210-fb3eee00-3925-11ea-9e29-4023c021e8a8.png">
and starship configuration explicitly calls this glyph in the git_branch module

#### Expected Behavior
<!-- A clear and concise description of what you expected to happen. -->
I would expect to show the git branch glyph instead.

#### Additional context/Screenshots
<!-- Add any other context about the problem here. If applicable, add screenshots to help explain. -->

#### Possible Solution
<!--- Only if you have suggestions on a fix for the bug -->

#### Environment
- Starship version: 0.33.0
- fish version: fish, version 3.0.2
- Operating system: Mac OS 10.14.6
- Terminal emulator: iTerm.app 3.3.7

#### Relevant Shell Configuration

```bash
eval (starship init fish)
```

#### Starship Configuration

```toml
# Replace the "‚ûú" symbol in the prompt with "‚ùØ"
[git_branch]
symbol = /uniE725
```
<!--- Provide a general summary of your changes in the Title above -->
<!--- To help with semantic versioning the PR title should start with one of the conventional commit types. -->
<!--- The conventional commit types for Semantic PR are: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert -->

#### Description
<!--- Describe your changes in detail -->

#### Motivation and Context
<!--- Why is this change required? What problem does it solve? -->
<!--- If it fixes an open issue, please link to the issue here. -->
reqwest is quite a heavy dependency in terms of file size and pulls in a lot of async related dependencies (tokio) despite starship only using the blocking API.
By replacing reqwest with ureq binary size on windows release builds is reduced by ~30%.

#### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

#### Screenshots (if appropriate):

#### How Has This Been Tested?
<!--- Please describe in detail how you tested your changes. -->
<!--- Include details of your testing environment, tests ran to see how -->
<!--- your change affects other areas of the code, etc. -->
- [ ] I have tested using **MacOS**
- [x] I have tested using **Linux**
- [x] I have tested using **Windows**

#### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [ ] I have updated the documentation accordingly.
- [ ] I have updated the tests accordingly.

<!--
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                                ‚ö†Ô∏è IMPORTANT: Please run the following command to create an issue:
                                                                         
                                                                            starship bug-report

                                      An issue will be pre-populated with your system's configuration, 
                                                          making the process a whole lot quicker üòä
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
-->

## Bug Report

#### Current Behavior

Same as described in issue #771 

#### Expected Behavior

Same as described in issue #771

#### Additional context/Screenshots

No error with version 0.32.2, with other newests versions, the issue occurs.

#### Environment
- Starship version: 0.33.1
- Shell type: bash
- Shell version: `GNU bash, version 5.0.11(1)-release (x86_64-pc-linux-gnu)`
- Shell plugin manager: bash-it
- Terminal emulator: Tilix
- Operating system: Debian Testing

#### Relevant Shell Configuration
https://github.com/edubxb/dotfiles/blob/master/.bashrc

#### Starship Configuration
https://github.com/edubxb/dotfiles/blob/master/.config/starship.toml
*This is likely non-trivial, but I decided to raise it as the functionality could be interesting.*

I *sometimes* use kubernetes. Frequently enough to enable kubernetes module, but ‚Ä¶ by far not always. I would be much happier if kubernetes module was disabled by default, but magically activated (in given terminal) once I issue ``kubectl``, ``helm``, or ``oc`` (as it proves my intent to enter my cloudy hat for some time).

Similar theme could be related to other modules. ``aws`` comes to mind immediately but even python version starts being interesting once I do anything pythonic (python, pip, conda‚Ä¶ ‚Äì even if current dir doesn't contain any trigger). Memory module could show up if I happen to issue top/htop/free, etc.

I see some possible ways to achieve similar functionality, draft ideas below.

**Dynamic per-terminal configuration context**

From the user point of view I imagine it as sth like:
```
starship config-here enable kubernetes
starship config-here disable python
```
(of course options can be named differently and maybe provided by separate binary). 
Not exactly sure about best way to implement it, but some ideas:

1. ``starship config-here`` updates ``/run/starship/¬´some-id-of-this-sessionl¬ª/config.toml`` (or sth similar in ``/tmp`` if ``/run`` doesn't work). During prompt generation ``starship`` checks for those settings and uses them. Both sides must somehow agree on what the ¬´this-session-id¬ª is, shell pid could probably serve.

2. ``starship-config-here`` is just a shell function which sets some environment variable(s) (``_STARSHIP_CONFIG_‚Ä¶``). Actual starship triggers some shell callback asking for their values (maybe calls shell function ``_give_me_this_session_settings ¬´target¬ª`` or maybe does brute ``echo $_STARSHIP_CONFIG > ¬´target¬ª``, where ¬´target¬ª is pipe/socket/tempfile ready to grab the data)

This functionality lone could be sufficient to achieve my main goal with some scripting around (like aliasing kubectl to ``starship config-here enable kubernetes && /actual/kubectl``). And  seems useful in general, even for ‚Äûplay with starship‚Äù  game (enable this, disable that, contemplate effects without the need to restart shell).

**Changing state according to the commands executed**

It would be great if I could write in starship.toml
```
[kubernetes]
disabled = true
enable_after_command = ["kubectl", "oc", "helm"]
```
I am not quite sure whether this is possible (is starship able to inspect which command user just executed or is to execute - that's mostly q whether prompt callbacks see ``BASH_COMMAND`` and similar vars?) but if so, would be great. 

Apart from accessing command itself, it also requires keeping some state, preferably sharing the way with commands from pkt 1 (so one could later use explicit command to disable if he or she likes so).

If such mechanism appears, I also imagine extending it to more "switchy" behaviours in the future, so various commands could enable "general flavor" of the current terminal, disabling unrelated modules (I used python or pip - fine, let's see pyver, check for venvs and even signal PYTHONPATH contents, but disable rust-related things; I called kubectl - fine, let's disable most local modules including that python and show mostly things about remote cluster for some time; etc). But this is just a rough idea, which could be more confusing than useful.
_Thank you for creating starship, I started using it recently and I am already in love‚Ä¶_

Would it be possible to make kubernetes note more compact? I am using openshift, and in my case prompt after activating kubernetes module looks like
```
‚ò∏ dev-marcin-various/openshift-myorg-local:8443/marcin (dev-marcin-various) 
srcs/azte_apps/api 
üïô[11:01:55] ‚ùØ 
```
(I already relocated kubernetes module to separate line via `prompt_order`). Here I use openshift instance on `openshift.myorg.local:8443`, my username is `marcin`, and namespace (or rather project, in openshift flavor) is `dev-marcin-various`.

Suggestions:

1. I'd be fairly happy with sole namespace (even if I use multiple kubernetes instances and users, I usually don't reuse namespace names). So my specific case would likely be resolved by sth like
    ```
    [kubernetes]
    show_namespace = true
    show_user = false
    show_host = false
    ```
    (or configurable format string, or anything similar, what would let me limit output in this very case to ``‚ò∏ dev-marcin-various``).

2. For more advanced cases (of people using plenty of kubernetes instances), I imagine it could make sense to predefine some aliases (so one could somehow write in his toml rules like _replace ``openshift-myorg-local:8443/marcin`` with ``myorgos``_).  But maybe that's overkill‚Ä¶



## Feature Request

#### Is your feature request related to a problem? Please describe.
<!-- A clear and concise description of what the problem is. Ex. I have an issue when [...] -->

#793 and #810 show that sometimes, the `curl` install fails due to permissions issues.

#### Describe the solution you'd like
<!-- A clear and concise description of what you want to happen. Add any considered drawbacks. -->

Modify the install script so that it will escalate privileges if they are needed.

#### Describe alternatives you've considered
<!-- A clear and concise description of any alternative solutions or features you've considered. -->

Modify install instructions to use `sudo` in the shell command. While this is arguably simpler for both us and the user, I prefer to explicitly explain what we need escalated privileges for.
## Bug Report

#### Current Behavior
Only with `line_break` disabled cursor location shifts when tab completion. For example `ls<TAB>` will leave the prompt as follow:
![starship01](https://user-images.githubusercontent.com/212279/72383494-78dee000-3713-11ea-8d34-d3d21159510a.png)
The `ls` pointed by the arrow was not manually inserted and the `<BACKSPACE>` is able to delete only the two character inserted leaving the PROMPT as follow:
![starship02-after_backspace_to_the_beginning](https://user-images.githubusercontent.com/212279/72383832-2a7e1100-3714-11ea-9d8b-444136057ce4.png)

#### Expected Behavior
Prompt should not interfere with TAB-completion also when `line_break` module is disabled.

#### Environment
- Starship version: 0.33.0
- zsh version: zsh 5.7.1 (x86_64-debian-linux-gnu)
- Operating system: Debian testing
- Terminal emulator: <unknown terminal> <unknown version>

#### Relevant Shell Configuration
I'm able to reproduce the issue using this minimal `zshrc`:
```bash
export PATH=~/.cargo/bin:$PATH  # for starship itself
eval "$(starship init zsh)"
```

#### Starship Configuration

```toml
add_newline = false

[directory]
truncation_length = 8
style = "cyan"

[git_status]
staged.style = "green"
staged_count.enabled = true
staged_count.style = "green"

# Issue https://github.com/starship/starship/issues/290 seems to be
# reproducible disabling line_break.
[line_break]
disabled = true

```
## Bug Report
Gradle project files can be renamed to something besides `build.gradle`: http://www.developerphil.com/renaming-your-gradle-build-files/

This causes the java detection to fail.

#### Current Behavior
No java version identified

#### Expected Behavior
java version displayed in the prompt

#### Possible Solution
instead of relying on `build.gradle`, look for any file `*.gradle`.
