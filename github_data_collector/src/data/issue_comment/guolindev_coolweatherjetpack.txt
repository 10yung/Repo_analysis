`
 private suspend fun <T> Call<T>.await(): T {
        return suspendCoroutine { continuation ->

            enqueue(object : Callback<T> {
                override fun onFailure(call: Call<T>, t: Throwable) {
                    continuation.resumeWithException(t)
                }

                override fun onResponse(call: Call<T>, response: Response<T>) {
                    val body = response.body()
                    if (body != null) continuation.resume(body)
                    else continuation.resumeWithException(RuntimeException("response body is null"))
                }
            })


            /* val execute = execute()
            if (execute.isSuccessful){
                val body = execute.body()
                body?.let { continuation.resume(body) }
            }else{
                continuation.resumeWithException(Throwable(execute.message()))
            }*/

        }
    }
`
郭神,想请教一下这里为啥使用异步请求. 因为这里是在IO线程执行的. 我尝试了一下把这里改成同步执行也可以. 改成同步执行,唯一的不足之处就是:无法准确的获取onFailure的信息.  所以想请教一下是处于啥方面考虑然后使用异步执行的,
每次下拉刷新所有的天气数据都会发生改变,就像换了一个城市一样
问下 ChooseAreaBindingImpl 这个类是怎么生成的，是在build目录里的，我不太明白是怎么生成的，还是继承于ChooseAreaBinding的，多谢

可以提供一个java版的mvvp吗
