
I am faceing this issue in when i had updtae project gradle **2.2.1 to 3.1.3** 
Cannot choose between the following configurations of project :library:
  - debugApiElements
  - debugRuntimeElements
  - releaseApiElements
  - releaseRuntimeElements
All of them match the consumer attributes:
  - Configuration 'debugApiElements':
      - Found com.android.build.api.attributes.BuildTypeAttr 'debug' but wasn't required.
      - Found com.android.build.api.attributes.VariantAttr 'debug' but wasn't required.
      - Found com.android.build.gradle.internal.dependency.AndroidTypeAttr 'Aar' but wasn't required.
      - Found org.gradle.usage 'java-api' but wasn't required.
  - Configuration 'debugRuntimeElements':
      - Found com.android.build.api.attributes.BuildTypeAttr 'debug' but wasn't required.
      - Found com.android.build.api.attributes.VariantAttr 'debug' but wasn't required.
      - Found com.android.build.gradle.internal.dependency.AndroidTypeAttr 'Aar' but wasn't required.
      - Found org.gradle.usage 'java-runtime' but wasn't required.
  - Configuration 'releaseApiElements':
      - Found com.android.build.api.attributes.BuildTypeAttr 'release' but wasn't required.
      - Found com.android.build.api.attributes.VariantAttr 'release' but wasn't required.
      - Found com.android.build.gradle.internal.dependency.AndroidTypeAttr 'Aar' but wasn't required.
      - Found org.gradle.usage 'java-api' but wasn't required.
  - Configuration 'releaseRuntimeElements':
      - Found com.android.build.api.attributes.BuildTypeAttr 'release' but wasn't required.
      - Found com.android.build.api.attributes.VariantAttr 'release' but wasn't required.
      - Found com.android.build.gradle.internal.dependency.AndroidTypeAttr 'Aar' but wasn't required.
      - Found org.gradle.usage 'java-runtime' but wasn't required.

As "compile" is going to be deprecated end-2018, this PR replaces with "implementation" that is the new usage.
thanks nice work :)
First of all, nice library and great animation. However, I think the interpolators at the moment is created based on some pre-calculated constants. For example, in `ActionBarInterpolator`:

```
   private static final float FIRST_BOUNCE_PART = 0.375f;
   private static final float SECOND_BOUNCE_PART = 0.625f;
   @Override
   public float getInterpolation(float t) {
       if (t < FIRST_BOUNCE_PART) {
           return (-28.4444f) * t * t + 10.66667f * t;
       } else if (t < SECOND_BOUNCE_PART) {
           return (21.33312f) * t * t - 21.33312f * t + 4.999950f;
       } else {
           return (-9.481481f) * t * t + 15.40741f * t - 5.925926f;
       }
   }
```

The constants used in `getInterpolation` (e.g., -28.4444f) are pre-calculated based on the values of `FIRST_BOUNCE_PART` and `SECOND_BOUNCE_PART`. If either or both of these values are changed, the constant values need to be recalculated.

This limit users of this library from changing the value of `FIRST_BOUNCE_PART` and/or `SECOND_BOUNCE_PART` to whatever they want because if they change these values, they have to do their own math to work out formulas for the interpolators.

So I think it would be nicer to provide generic formulas for interpolators with perhaps `FIRST_BOUNCE_PART` and `SECOND_BOUNCE_PART` are variables to avoid users being worrying about the formulas themselves.

What do you think?


I know that this is not an issue, but i would really appreciate if you give  me this information.
Thank you!
First of all, this library is great :). When do you plan to implement handling right-to-left layouts functionality? It is just changing GUILLOTINE_CLOSED_ANGLE constant to positive value