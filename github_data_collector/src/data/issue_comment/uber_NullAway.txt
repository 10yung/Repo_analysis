Thank you for contributing to NullAway!

Please note that once you click "Create Pull Request" you will be asked to sign our [Uber Contributor License Agreement](https://cla-assistant.io/uber/NullAway) via [CLA assistant](https://cla-assistant.io/).

Before pressing the "Create Pull Request" button, please provide the following:

  - [ ] A description about what and why you are contributing, even if it's trivial.
      I fixed by printing the inner class as well as the field name (e.g. Bar.foo) whenever the field is not from the outermost class in the file.
  - [ ] The issue number(s) or PR number(s) in the description if you are contributing in response to those.
   Trying to solve #365 

  - [ ] If applicable, unit tests.
     I fixed unit tests.
Add support for [JEP 359: Records (Preview)](https://openjdk.java.net/jeps/359) to NullAway.

This depends on [upstream support in Checker Framework](https://github.com/typetools/checker-framework/issues/3014).

I don't think that support for records in Error Prone is strictly required.  There are bug patterns that will throw exceptions or print incorrect warnings when compiling code with records.  However, since those bug patterns can be disabled, I don't think that NullAway depends on those issues being fixed in the same way it depends on the issues in Checker Framework being fixed.

As I mentioned in the upstream issue, my modified copy of NullAway is giving me useful feedback about records.

```java
record Foo(String a, @Nullable String b) {}
```

```java
Foo x = new Foo(null, ""); // error because `a` is non-null
Foo y = new Foo("", null); // ok
System.out.println(y.a().length()); // ok
System.out.println(y.b().length()); // error because `b` is nullable
```

That's a toy example, but it's also working with real examples.  I changed all of my record-like classes in one project to be actual records -- 30 classes or so with a mix of nullable and non-null properties -- and the compile-time feedback regarding nulls seems to be as good as it was before.  If I introduce an error like removing a null check on a property of a record before dereferencing that property, NullAway correctly identifies the error.

To give a sense of scope, these are the changes I made to NullAway to get there.

```diff
diff --git a/nullaway/src/main/java/com/uber/nullaway/NullAway.java b/nullaway/src/main/java/com/uber/nullaway/NullAway.java
index a600c5d..bf71b88 100644
--- a/nullaway/src/main/java/com/uber/nullaway/NullAway.java
+++ b/nullaway/src/main/java/com/uber/nullaway/NullAway.java
@@ -1441,7 +1441,10 @@ public class NullAway extends BugChecker
     // set of all non-null instance fields f such that *some* constructor does not initialize f
     Set<Symbol> notInitializedInConstructors;
     SetMultimap<MethodTree, Symbol> constructorInitInfo;
-    if (entities.constructors().isEmpty()) {
+    if (classSymbol.getKind().name().equals("RECORD")) {
+      constructorInitInfo = null;
+      notInitializedInConstructors = ImmutableSet.of();
+    } else if (entities.constructors().isEmpty()) {
       constructorInitInfo = null;
       notInitializedInConstructors = entities.nonnullInstanceFields();
     } else {
@@ -1809,6 +1812,10 @@ public class NullAway extends BugChecker
           // do nothing
           break;
         default:
+          if (memberTree.getKind().name().equals("RECORD")) {
+            // do nothing
+            break;
+          }
           throw new RuntimeException(
               memberTree.getKind().toString() + " " + state.getSourceForNode(memberTree));
       }
@@ -2021,6 +2028,9 @@ public class NullAway extends BugChecker
       case ANNOTATION_TYPE:
         return false;
       default:
+        if (kind.name().equals("RECORD")) {
+          return false;
+        }
         return true;
     }
   }
```

Not too bad, right?  I'm sure that I've missed corner cases and there'll be more to it, but for the most part it seems like records can be treated like regular classes.
See #368 for further discussion.  There we added a bailout check to avoid a crash, but we should understand what is going on here.

/cc @shas19 
Use @Present annotation on the return of the method that is assuredly returning a non-empty optional.
Following test should pass. 

```
  @Test
  public void OptionalEmptinessPresentTest() {
    compilationHelper
        .setArgs(
            Arrays.asList(
                "-d",
                temporaryFolder.getRoot().getAbsolutePath(),
                "-XepOpt:NullAway:AnnotatedPackages=com.uber",
                "-XepOpt:NullAway:UnannotatedSubPackages=com.uber.lib.unannotated",
                "-XepOpt:NullAway:CheckOptionalEmptiness=true"))
        .addSourceLines(
            "TestNegative.java",
            "package com.uber;",
            "import com.google.common.base.Optional;",
            "rg.checkerframework.checker.optional.qual.Present",
            "import com.google.common.base.Function;",
            "public class TestNegative {",
            "  class ABC { ",
            "       @present Optional<Object> getTheOptional(int x){",
            "           if(x != 0){",
            "             return Optional.of(new Object());",
            "           }",
            "       return Optional.of(new Object());",
            "       }",
            "  }",
            "  void foo() {",
            "      ABC abc = new ABC();",
            "      // no error since @present annotation on the invoked method",
            "       abc.getTheOptional(5).get().toString();",
            "      }",
            "    }",
            "}")
        .doTest();
  }
```
Consider the code in a `Foo.java` file:

```
class Foo {
   @Nullable 
   private Object foo;
   ...
   private static class Bar {
      private Object foo;
      ...
   }
}
```

Currently, if `Bar.foo` is not properly initialized, the user will get an error like:

```
Foo.java:XX: error: [NullAway] @NonNull field foo not initialized
    private Object foo;
```

With only the line number `XX` giving any indication that this refers to `Bar.foo`, not `Foo.foo`. Given the file name, the user will naturally check `Foo.foo`, see it's `@Nullable` and be confused/lose confidence in the tool, even though the warning is legitimate for `Bar.foo`.

This is a rare corner case, but it is bad UX, and could be fixed by printing the inner class as well as the field name (e.g. `Bar.foo`) whenever the field is not from the outermost class in the file.

This is low priority, but would be an excellent "first issue" for someone dipping their toes in NullAway ðŸ˜„ 
In 0.7.8 it's not quite smart enough to follow this 

```
    public AppEngineWebXmlProjectStageConfiguration build() {
      Preconditions.checkState(sourceDirectory != null, "No source directory supplied");
      Preconditions.checkState(stagingDirectory != null, "No staging directory supplied");

      return new AppEngineWebXmlProjectStageConfiguration(
          this.sourceDirectory,
          this.stagingDirectory,
          this.dockerfile,
          this.enableQuickstart,
          this.disableUpdateCheck,
          this.enableJarSplitting,
          this.jarSplittingExcludes,
          this.compileEncoding,
          this.deleteJsps,
          this.enableJarClasses,
          this.disableJarJsps,
          this.runtime);
    }
```

That is, in a Builder inner class I'm using Preconditions.checkState (from Guava) instead of Preconditions.checkNotNull because an IllegalStateException is slightly more appropriate here than a NullPointerException. Whatever the exception type, though, the return line can't be reached when sourceDirectory or stagingDirectory are null. However Nullaway thinks these can be reached in that case.

  - [X ] If you think you found a bug, please include a code sample that reproduces the problem. A test case that reproduces the issue is preferred. A stack trace alone is ok but may not contain enough context for us to address the issue.

  - [ X] Please include the library version number, including the minor and patch version, in the issue text.

Found this false positive in the code while using. 

```
  class Aclass {

      class Name {
          @Nullable String firstName;
          @Nullable String lastName;
          @Nullable String middleName;
      }

      @Contract("null -> true")
      public boolean isBlank(@Nullable String string) {
          return string == null || string.trim().length() == 0;
      }

      private Observable<Integer> filterThenMap(Observable<Name> observable) {
          return observable
                  .filter(name -> !isBlank(name.firstName) && name.middleName!=null)
                  .filter(name -> name.lastName!=null)
                  .map(name -> name.firstName.length());
      }
  }
```
This gives ` warning: [NullAway] dereferenced expression name.firstName is @Nullable` at
                     `.map(name -> name.firstName.length());`


Can nullaway check the default package, i.e. in the top directory of the class path?

Neither -XepOpt:NullAway:AnnotatedPackages="",foo nor -XepOpt:NullAway:AnnotatedPackages=,foo seem to work
Let's consider the following example

```java
import org.javamoney.moneta.spi.DefaultNumberValue;

import javax.annotation.Nullable;
import javax.money.CurrencyUnit;
import javax.money.Monetary;
import javax.money.NumberValue;
import java.math.BigDecimal;
import java.util.*;
import java.util.stream.Collectors;

class Scratch
{

    public static void main(String[] args)
    {
        CurrencyUnit czkCurrency = Monetary.getCurrency("CZK");

        List<PriceVersion> prices = Arrays.asList(
            new PriceVersion(
                PriceType.EX_FACTORY,
                null,
                czkCurrency
            ),
            new PriceVersion(
                PriceType.EX_FACTORY,
                DefaultNumberValue.of(new BigDecimal("10")),
                czkCurrency
            )
        );

        prices.stream()
            .filter(price -> price.getValue() != null)
            .collect(Collectors.toMap(
                PriceVersion::getType,
                price -> price.getValue().numberValue(BigDecimal.class)
            ));
    }

    public static final class PriceVersion
    {

        private PriceType type;

        @Nullable
        private NumberValue value;

        private CurrencyUnit currency;

        public PriceVersion(final PriceType type, @Nullable final NumberValue value, final CurrencyUnit currency)
        {
            this.type = type;
            this.value = value;
            this.currency = currency;
        }

        public PriceType getType()
        {
            return type;
        }

        @Nullable
        public NumberValue getValue()
        {
            return value;
        }

        public CurrencyUnit getCurrency()
        {
            return currency;
        }

    }

    public enum PriceType
    {

        EX_FACTORY,

    }

}
```

the NullAway reports

> [NullAway] dereferenced expression price.getValue() is @Nullable

Which is correct, but I've previously checked that it's not and now it would be cumbersome to check again just to make "the compiler" happy.

Is basic control flow analysis of streams out of scope of this lib or would it make sense to support?

<details>
 <summary>maven: effective pom</summary>

```xml
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.8.1</version>
    <configuration combine.self="append">
        <compilerId>javac-with-errorprone</compilerId>
        <forceJavacCompilerUse>true</forceJavacCompilerUse>
        <source>1.8</source>
        <target>1.8</target>
        <compilerArgs combine.self="override">
            <arg>-Werror</arg>
            <arg>-Xlint:all,-fallthrough,-processing,-serial,-classfile</arg>
            <arg>-parameters</arg>
            <arg>-XDcompilePolicy=simple</arg>
            <arg>-XepDisableWarningsInGeneratedCode</arg>
            <arg>-XepOpt:Immutable:KnownImmutable=javax.money.CurrencyUnit</arg>
            <arg>-Xep:ConstantField:WARN</arg>
            <arg>-Xep:ClassName:WARN</arg>
            <arg>-Xep:DivZero:WARN</arg>
            <arg>-Xep:EmptyIf:WARN</arg>
            <arg>-Xep:IterablePathParameter:WARN</arg>
            <arg>-Xep:LongLiteralLowerCaseSuffix:WARN</arg>
            <arg>-Xep:AnnotationPosition:WARN</arg>
            <arg>-Xep:EmptyTopLevelDeclaration:WARN</arg>
            <arg>-Xep:EqualsBrokenForNull:WARN</arg>
            <arg>-Xep:FunctionalInterfaceClash:WARN</arg>
            <arg>-Xep:InvalidInlineTag:WARN</arg>
            <arg>-Xep:InvalidParam:WARN</arg>
            <arg>-Xep:MissingDefault:WARN</arg>
            <arg>-Xep:NonCanonicalStaticMemberImport:WARN</arg>
            <arg>-Xep:PrimitiveArrayPassedToVarargsMethod:WARN</arg>
            <arg>-Xep:RedundantOverride:WARN</arg>
            <arg>-Xep:RedundantThrows:WARN</arg>
            <arg>-Xep:StaticQualifiedUsingExpression:WARN</arg>
            <arg>-Xep:StringEquality:WARN</arg>
            <arg>-Xep:UnusedException:WARN</arg>
            <arg>-Xep:ConstantField:WARN</arg>
            <arg>-Xep:MultiVariableDeclaration:WARN</arg>
            <arg>-Xep:MultipleTopLevelClasses:WARN</arg>
            <arg>-Xep:MultipleUnaryOperatorsInMethodCall:WARN</arg>
            <arg>-Xep:PrivateConstructorForUtilityClass:WARN</arg>
            <arg>-Xep:UngroupedOverloads:WARN</arg>
            <arg>-Xep:NullAway:ERROR</arg>
            <arg>-XepOpt:NullAway:AnnotatedPackages=com.cogvio</arg>
            <arg>-XepOpt:NullAway:TreatGeneratedAsUnannotated=true</arg>
            <arg>-XepOpt:NullAway:AcknowledgeRestrictiveAnnotations=true</arg>
            <arg>-XepOpt:NullAway:KnownInitializers=org.springframework.beans.factory.InitializingBean.afterPropertiesSet</arg>
            <arg>-XepOpt:NullAway:ExcludedFieldAnnotations=javax.persistence.PersistenceContext,org.springframework.beans.factory.annotation.Autowired</arg>
        </compilerArgs>
        <annotationProcessorPaths combine.self="append">
            <path>
                <groupId>com.uber.nullaway</groupId>
                <artifactId>nullaway</artifactId>
                <version>0.7.5</version>
            </path>
        </annotationProcessorPaths>
        <showWarnings>true</showWarnings>
    </configuration>
    <dependencies>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-compiler-javac-errorprone</artifactId>
            <version>2.8.5</version>
          </dependency>
          <dependency>
            <groupId>com.google.errorprone</groupId>
            <artifactId>error_prone_core</artifactId>
            <version>2.3.3</version>
          </dependency>
          <dependency>
            <!-- this only adds our custom LibraryModels -->
            <groupId>com.cogvio.pm</groupId>
            <artifactId>build-tools-nullaway</artifactId>
            <version>0.0.1-SNAPSHOT</version>
          </dependency>
        </dependencies>
    </dependencies>
</plugin>
```

</details>

 I am using nullaway version 0.7.5 and When i am trying to exclude the package **"in.demo.myapp.models & in.demo.myapp.models.dao"** not working.

Sample code: 

`tasks.withType(JavaCompile) {
    if (!name.toLowerCase().contains("test")) {
        options.compilerArgs += ["-Xep:NullAway:ERROR",
                                 "-XepOpt:NullAway:AnnotatedPackages=in.demo.myapp",
                                 "-XepOpt:NullAway:UnannotatedSubPackages=in.demo.myapp.models"]
    }
}`