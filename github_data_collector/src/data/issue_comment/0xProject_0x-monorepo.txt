## Description

<!--- Describe your changes in detail -->

## Testing instructions

<!--- Please describe how reviewers can test your changes -->

## Types of changes

<!--- What types of changes does your code introduce? Uncomment all the bullets that apply: -->

<!-- * Bug fix (non-breaking change which fixes an issue) -->

<!-- * New feature (non-breaking change which adds functionality) -->

<!-- * Breaking change (fix or feature that would cause existing functionality to change) -->

## Checklist:

<!--- The following points should be used to indicate the progress of your PR.  Put an `x` in all the boxes that apply right now, and come back over time and check them off as you make progress.  If you're unsure about any of these, don't hesitate to ask. We're here to help! -->

-   [ ] Prefix PR title with `[WIP]` if necessary.
-   [ ] Add tests to cover changes as needed.
-   [ ] Update documentation as needed.
-   [ ] Add new entries to the relevant CHANGELOG.jsons.

## Description

In certain scenarios, asset-swapper's `bestQuoteInfo` price could actually be way off. This is most noticeable with large fills, when there's a sizable bridge order at the end of the quote, and a nonzero slippage buffer. 

The reason this happens is because, during optimization, we collapse the DEX samples into a single bridge order, flattening the prices of the samples into a single constant price, which is the average price of all the samples. When we have a slippage buffer, this collapsed bridge order is at the average price of the worst case fill, because the bridge orders are generated to accommodate it.

To get the real best-case quote, we need to compute the integral over the price curve. We can approximate this by just computing the fill over the nested samples, effectively treating the bridge order as a collection of sub-orders at different prices.

*Note:* This only affected the quote price. The order would actually fill at the correct rate.

### Results
One particularly vulnerable pair is ETH/SNX, because the quote is almost always either *just* kyber or uniswap. After this change, we see a **+2%** improvement on this quote (at $100k).

I also simulated mainnet fills on $10-$50,000 buys and sells on combinations of ETH, USDC, DAI, and FOAM (ikr).  Out of 84 fills, the median *realized* fill price was 0.037% less than the best quote price (the mean was 0.034%). So, this improved calculation seems to be fairly close to reality.

## Testing instructions

<!--- Please describe how reviewers can test your changes -->

## Types of changes

<!--- What types of changes does your code introduce? Uncomment all the bullets that apply: -->

<!-- * Bug fix (non-breaking change which fixes an issue) -->

<!-- * New feature (non-breaking change which adds functionality) -->

<!-- * Breaking change (fix or feature that would cause existing functionality to change) -->

## Checklist:

<!--- The following points should be used to indicate the progress of your PR.  Put an `x` in all the boxes that apply right now, and come back over time and check them off as you make progress.  If you're unsure about any of these, don't hesitate to ask. We're here to help! -->

-   [ ] Prefix PR title with `[WIP]` if necessary.
-   [ ] Add tests to cover changes as needed.
-   [ ] Update documentation as needed.
-   [ ] Add new entries to the relevant CHANGELOG.jsons.

## Description

Fixed name of the function in the contract-addresses package.

## Testing instructions

N/A

## Types of changes

* Bug fix (non-breaking change which fixes an issue)

## Checklist:

-   [ ] Prefix PR title with `[WIP]` if necessary.
-   [ ] Add tests to cover changes as needed.
-   [ ] Update documentation as needed.
-   [ ] Add new entries to the relevant CHANGELOG.jsons.

https://cn.etherscan.com/address/0xa3ac9844514b96bb502627ca9dceb57c4be289e3#code

Can you upload the source code to Etherscan ? It can help me to debug. 
I tried uploading but i don't know what version of solidity.

## Description

<!--- Describe your changes in detail -->
This PR introduces a benchmarking directory and a benchmark script to calculate the maximum size of a specific type of NFT order (the type used by TokenTrove). 

## Testing instructions
To run these benchmarks accurately, the contracts need to be recompiled using the `constantinople` EIP schedules. Additionally, the web3 provider will also need to be configured to use `constantinople`. 
<!--- Please describe how reviewers can test your changes -->

## Types of changes

<!--- What types of changes does your code introduce? Uncomment all the bullets that apply: -->

<!-- * Bug fix (non-breaking change which fixes an issue) -->
* New feature (non-breaking change which adds functionality)

<!-- * Breaking change (fix or feature that would cause existing functionality to change) -->

## Checklist:

<!--- The following points should be used to indicate the progress of your PR.  Put an `x` in all the boxes that apply right now, and come back over time and check them off as you make progress.  If you're unsure about any of these, don't hesitate to ask. We're here to help! -->

-   [ ] Prefix PR title with `[WIP]` if necessary.
-   [ ] Add tests to cover changes as needed.
-   [ ] Update documentation as needed.
-   [ ] Add new entries to the relevant CHANGELOG.jsons.

## Expected Behavior

Calling devUtils.getOrderRelevantState() on a MAP order where one or more of the tokens in the order doesn't belong to the maker should return as Unfillable. Functions/tools that rely on order state working properly should flag this order as unfillable.

## Current Behavior

The orderstate of the order is 3 (fillable). The functions/tools that rely on the order state to be marked properly fail to report the order as unfillable (mesh, etc.).

## Steps to Reproduce (for bugs)

Example MAP order that should fail attached

## Your Environment
"0x.js": "^9.0.0",
"@0x/contract-wrappers": "^13.1.0",
## Description

Yarn build gets warnings from devnet and verdaccio directories about lack of .json on a mac.

## Testing instructions

yarn build

## Types of changes

<!--- What types of changes does your code introduce? Uncomment all the bullets that apply: -->

<!-- * Bug fix (non-breaking change which fixes an issue) -->

<!-- * New feature (non-breaking change which adds functionality) -->

<!-- * Breaking change (fix or feature that would cause existing functionality to change) -->

* Added 2 package.json to suppress yarn warnings 

## Checklist:

<!--- The following points should be used to indicate the progress of your PR.  Put an `x` in all the boxes that apply right now, and come back over time and check them off as you make progress.  If you're unsure about any of these, don't hesitate to ask. We're here to help! -->

-   [ x] Prefix PR title with `[WIP]` if necessary.
-   [x ] Add new entries to the relevant CHANGELOG.jsons.

## Description

The bug is explained in https://github.com/0xProject/0x-monorepo/issues/2285

I'm also affected and this PR is implementing my proposed fix - remove spaces from function signature to guarantee the match. There could be better fix for this "hack", but I'm just ensuring that the bug don't affect my workflow anymore.

## Types of changes

* Bug fix (non-breaking change which fixes an issue)

## Description

To discover the price of certain pairs we need an efficient way to perform multiple quote samples at once.

Initial investigation:

```typescript
await sampler
    .queryBatchOrdersAndSampleBuys(
        _.times(times, i => orders),
        _.times(times, i => orders.map(o => o.signature)),
        [
            SOURCE_TO_ADDRESS[ERC20BridgeSource.Eth2Dai],
            SOURCE_TO_ADDRESS[ERC20BridgeSource.Uniswap],
        ],
        [new BigNumber('1000000000000000000')],
    )
    .callAsync();
```



We query with 16 Native orders for each asset pair. 

**Note**:

* it's possible we will have more and less orders in the real world and will need to batch based on the Native orders.
* we're only querying for 1 asset amount
* this queries the same orders multiple times, our ABI encoder may optimize this and the results will not be as accurate as real world testing. This also excludes Kyber as it is buying.

```
16 'orders'
query 1: 1643.028ms
query 1: 1617.886ms
query 1: 1630.122ms
query 1: 1924.910ms
query 1: 1665.817ms
query 1: 1523.556ms
done 1

query 20: 1936.026ms
query 20: 1873.733ms
query 20: 1631.222ms
query 20: 1681.635ms
query 20: 1694.278ms
query 20: 1848.476ms
done 20

query 40: 1908.213ms
query 40: 2097.256ms
query 40: 1911.376ms
query 40: 1886.049ms
query 40: 2103.286ms
query 40: 1846.552ms
done 40

query 80: 2300.164ms
query 80: 2530.159ms
query 80: 2365.349ms
query 80: 3428.551ms
query 80: 2612.497ms
query 80: 3319.264ms
done 80

query 160: 3940.097ms
query 160: 3531.208ms
query 160: 3800.738ms
query 160: 3716.978ms
query 160: 4308.913ms
query 160: 4676.135ms
done 160

query 320: 8395.693ms
query 320: 8389.707ms
query 320: 6770.865ms
query 320: 6132.578ms
query 320: 8007.835ms
query 320: 8511.705ms
done 320
```

So in the initial investigation we can query 320 distinct asset pairs in 6-8 seconds. We currently have ~62 tokens in 0xApi metadata and would likely only consider a few base pairs (WETH, DAI). Currently we'd be looking at ~120 asset pairs which can be served in under 5 seconds. 
