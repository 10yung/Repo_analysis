ref #470
Ref: #167 which is closed
previously, we only closed connections when there are no errors.
when we hit errors while executing, we saw misleading zlib errors where instead it was just the ssh command failing.
so lets always close connections to avoid those errors.

Fix for https://github.com/capistrano/sshkit/pull/343. 
@mattbrictson 
```
host = SSHKit::Host.new(hostname: "localhost")
SSHKit::Coordinator.new([host]).each { capture "sh", "-c", "touch 1 && echo 1" }.first.value
```

this should execute "sh -c touch\ 1 \&\&\ echo\ 1" and not `sh -c touch 1` and `echo 1`
... same issue for directories/users/groups
... also making user and group use the same form of escaping
... I'm pretty sure `nohup` should also do `sh -c` to avoid funky issues

/fyi @eatwithforks @adammw @jonmoter this is why we saw crazy issues :D

... cap-devs, please let me know if this looks correct, or if I understood something wrong
According to the doc one can pass a Hash or a Proc as a
:interaction_handler option, but only Hashes were wrapped into a
MappingInteractionHandler.

Fix this and add a test.
Hi, I'm currently unable to use the ProxyJump config with sshkit, due to this issue:

https://github.com/net-ssh/net-ssh/issues/587

sshkit will override Net::SSH.default_files here:

https://github.com/capistrano/sshkit/blob/158c2867071e015a117e188d1a0ee7b579c9b24e/lib/sshkit/backends/netssh.rb#L13

By the way, is there any reasons to do that instead of something simpler like:

```ruby
Net::SSH::Config.default_files << File.join(Dir.pwd, '.ssh/config')
```

Either way, net-ssh doesn't work the same way when the :config option is used in Net::SSH.start and when passed to default_files, as you could see in the issue I mentioned above.

Currently I'm in a rush to try to meet some tight deadlines for a new project I started and it will last a few months at least. If I were to find some time to contribute it would be more likely to provide some patch to sshkit to use the :config option instead of overriding `default_files` as it seems a simpler/quicker change for someone new to both projects, in my opinion. Before I do so, I'd like to check on your opinion. Is there anyone here that is comfortable with net-ssh source and would be willing to contribute to it by providing the "-F" option to the ssh client for each of those default_files? Otherwise, would you be willing to accept a patch that would change the current approach in sshkit so that this default configuration would be passed to the :config option instead of overriding `default_files`?

Thanks for your time to read all of this :)
I'm having a lot of trouble using the `as` syntax. I realize this is more of a support request than a bug report, but the results of this might go into the documentation.

What doesn't work:

```
task :clear_cache do
    on roles :app do
        as :web1 do
           within shared_path do
              execute :rm, '-rf', 'src/cache/twig'
           end
        end
    end
end
```

However, this works:

```
task :clear_cache do
    on roles :app do
        within shared_path do
            execute :sudo, '-u', 'web1', :rm, '-rf', 'src/cache/twig'
        end
    end
end
```

My sudoers file looks like this:

```
Cmnd_Alias              CLEAR_CACHE = /usr/bin/whoami, /bin/rm -rf src/cache/twig
Defaults!CLEAR_CACHE    !requiretty
david                   ALL=(web1) NOPASSWD: CLEAR_CACHE                                   
```

I've been trying to use the debug log level in both capistrano and sshkit to figure out what the difference is between these two, more specifically how the `as` syntax executes the command, but all I ever got was:

```
** Invoke clear_cache (first_time)
** Execute clear_cache
00:00 clear_cache
      01 rm -rf src/cache/twig
      01 sudo: no tty present and no askpass program specified
cap aborted!
SSHKit::Runner::ExecuteError: Exception while executing as david@remote-host: rm exit status: 1
rm stdout: Nothing written
rm stderr: sudo: no tty present and no askpass program specified
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/runners/parallel.rb:15:in `rescue in block (2 levels) in execute'
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/runners/parallel.rb:11:in `block (2 levels) in execute'
SSHKit::Command::Failed: rm exit status: 1
rm stdout: Nothing written
rm stderr: sudo: no tty present and no askpass program specified
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/command.rb:100:in `exit_status='
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/backends/netssh.rb:165:in `execute_command'
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/backends/abstract.rb:141:in `block in create_command_and_execute'
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/backends/abstract.rb:141:in `tap'
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/backends/abstract.rb:141:in `create_command_and_execute'
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/backends/abstract.rb:74:in `execute'
/home/kwisatz/1024/projects/a_project/Capfile:35:in `block (4 levels) in <top (required)>'
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/backends/abstract.rb:85:in `within'
/home/kwisatz/1024/projects/a_project/Capfile:34:in `block (3 levels) in <top (required)>'
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/backends/abstract.rb:112:in `as'
/home/kwisatz/1024/projects/a_project/Capfile:33:in `block (2 levels) in <top (required)>'
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/backends/abstract.rb:29:in `instance_exec'
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/backends/abstract.rb:29:in `run'
/home/kwisatz/1024/projects/a_project/.vendor/bundle/ruby/2.4.0/gems/sshkit-1.13.1/lib/sshkit/runners/parallel.rb:12:in `block (2 levels) in execute'
Tasks: TOP => clear_cache
```

How can I see what __exact__ command sshkit is running when using `as` ? I'd presume that it doesn't correspond to what I allowed in the sudoers file.
There have been multiple requests to set an upper limit on the number of `git` operations that are executed in parallel in the default Capistrano git strategy. Similarly, users are also asking for a limit on the number of parallel `bundle install` executions in `capistrano-bundler`.

What these tasks have in common is that they all use the default `:parallel` runner provided by SSHKit. When using Capistrano to deploy to a large number of servers, firing off these operations to all servers in parallel can overload shared resources like a git server or private gem repository.

Rather than implement rate limiting for each SCM, capistrano-bundler, etc., I feel like a more general solution should be provided by SSHKit itself.

My proposal would be to change the implementation of the `:parallel` runner to essentially be a subclass of the `:groups` runner, except with defaults of `wait: 0` and `limit: INFINITY`. Then, if a user wants to limit the amount of parallelization, they could simply do this:

```ruby
# Limit the default :parallel runner to 10 threads
SSHKit.config.default_runner_config = { limit: 10 }
```

If sharing implementation and configuration keys between `:parallel` and `:groups` is too confusing, then perhaps the `:parallel` runner could use a different configuration key (but to the same effect):

```ruby
# Limit the default :parallel runner to 10 threads
SSHKit.config.default_runner_config = { threads: 10 }
```

Thoughts?

See also:

* https://github.com/capistrano/capistrano/pull/1957
* https://github.com/capistrano/capistrano/issues/1058
* https://github.com/capistrano/bundler/issues/94
* https://github.com/capistrano/bundler/pull/93
Using sshkit 1.11.1 via Capistrano 3.4.0. 

I'd like to do an `execute`, but get streaming output to the console as it appears from the execute. For me, `execute` seems to have no output. `capture` can capture output (that you can write out), but only once it's all done, not streaming. 

Looking at the sshkit README, I think I could write my own `interaction_handler` to do this, not because I actually want any interaction, just to capture and write to console the output as it happens. 

But it seems like there's probably a built-in way to do this I'm not finding?
transfer_summarizer produces a warning for files of size zero:

```
Error calculating percentage 0/0, is foo empty?
```

My feeling is that this warning is excessive as it implies that a file of size 0 is some kind of problem.  Sshkit's output would be a bit less noisy if it just special-cased the percentage for files of size zero as 100%.