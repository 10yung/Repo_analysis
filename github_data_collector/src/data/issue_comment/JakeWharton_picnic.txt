Supplementary characters require 2 java/ kotlin
chars to store but are rendered as a single
character. This caused problems for a lot of
places that assumed length = number of chars.

Replaced the buffer in TextSurface to be an array
of codepoints (int) rather than a plain String (which
would have an undefined length if surrogate pairs are
used). Iterate through the codepoints rather than chars.

Note this is more consistent but not necessarily
always better than to measuring these as 2 chars.
Text measurement is complicated and I'll add more
context to #4

Another note: I think some of these APIs only work on kotlin
JVM which may be a problem for #8 but should be simple to
port if needed (http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/dc4322602480/src/share/classes/java/lang/Character.java)
There's nothing JVM-specific
Either by package or by artifact, or both. The DSL really pollutes the namespace in javadoc.
`SimpleTextLayout` naively assumes `char` count is width

