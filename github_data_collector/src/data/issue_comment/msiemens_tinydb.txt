AFAIK right now it's not possible to used `doc_id` in `Query` logic? I'd like to retrieve any document where `doc_id > 10` but neither `where` nor `Query` objects support this logic:

```python
db.count(Query().doc_id > 10)
0
db.count(where('doc_id') > 10)
0
db.count(Query().doc_id)
0
```

Am I missing something?

When having a huge amount of data, the process of reading that file every time the read-method is called takes time. My idea is to keep track if the file has been modified and if so read it again. If not, read from cache. This improves performance a lot and helps keep disk I/O down.

I've forked TinyDB and tried to come up with a solution myself, but it turns out it's harder than it looks. When storing dictionaries to cache them, it keeps a reference. So whenever data is modified by the end-user (after requesting the read-method), the changes are reflected in the cache. One way to solve this is returning the cached data with copy.deepcopy, but that takes a long time on bigger databases, which ends up being longer than straight up reading the whole file again, making the cache meaningless.

I've  looked online and found that json.loads(json.dumps)) in fact does the same thing but faster and it turns out it's doing it's job, but still find that it's making the overall experience slow. I was wondering if anyone got any ideas on how to make TinyDB perform faster without compromising being able to modify the read data.
Here is a behaviour that I wasn't expecting : 
```

Python 3.7.5 (default, Nov 20 2019, 09:21:52) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.1 -- An enhanced Interactive Python. Type '?' for help.
PyDev console: using IPython 7.10.1

Python 3.7.5 (default, Nov 20 2019, 09:21:52) 
[GCC 9.2.1 20191008] on linux
In[2]: from tinydb import TinyDB, Query
In[3]: db = TinyDB("/tmp/testing.json")
In[4]: name = Query()
In[5]: db.insert({'name': 'myitem', 51: 42})
Out[5]: 1
In[6]: db.search(name.name == 'myitem')
Out[6]: [{'name': 'myitem', '51': 42}]
```
Note the key `51` being implicitely stringified to `'51'`.

After this code : 
```
cat /tmp/testing.json
{"_default": {"1": {"name": "myitem", "51": 42}}}
```

Is that expected ?
What should I do if I want to be able to have more than strings as dictionary key ?

Hello,
I am looking for some thoughts on a Tinydb extension that i am mulling over how to implement.  Considering there is an active discussion about ideas for a 4.0 #284 I thought this might be a good time to bring it up. 

To start off with here is a quick description of what I am doing in my application that I am interested in integrating directly into a TinyDB extension. Currently I have a DB of a size that is on the upper end of what TinyDB is recommended for. In that DB i have a particular field that is used very often in DB "queries". The values of that field are not guaranteed to be unique, however the number of entries that share that same value will always be small relative to the number of entries in the DB. Additionally the values associated with the field are sort-able. To speed up my application i have been pulling the entries out of the DB and creating a [SortedCollection](https://code.activestate.com/recipes/577197-sortedcollection/) sorted by that particular field and I maintain the state of that collection along with every database modification, kind of like smart-cache. Then when I get to a point where i would normally perform a query on that field (or a combination of that field and something else), i use the sorted collection for faster lookup.

What I am trying to figure out is what would be the best way to integrate this behavior into TinyDB, so that it can be done transparently with the query interface. To start i know i would need to create a TableClass to implement the management and usage of the sorted "Index(s)". There also must be some way of specifying which field(s) should be indexed, either statically at the creation of the database object or dynamically based on the query being used. I am considering whether or not it makes sense to subclass the Query class so that the index is only used for a specific type of query. 

Finally I need a way to determine, within each query consuming call, whether the query can be performed on an index or must be done on the database directly. I am imagining that I would need to do something like decomposing the query "path" to determine if it is a direct query of an indexed field or if it is a top level AND of a query on that field and something else. I think those are the only cases that would work, a top level OR definitely wouldn't.

I am interested to here any thoughts anyone might have on the feasibility of this kind of extension, how i might go about implementing it, or anything i may have missed. Despite having gotten this far, and created a few simple customization to TinyDB, I am still very new to this library and python in general. Any assistance would be greatly appriciated. 
Lately, I've been thinking about how to move TinyDB forward and what the next steps are. And the more I thought about it, the more I became convinced, that TinyDB needs a v4.0.0.

# Motivation

Why would we want a TinyDB v4.0? Why introducing a backwards-incompatible releases? In my view, the reasons to publish a new major release is threefold:

- Remove deprecated functionality that's been waiting to be removed for more than two years now.
- Fix design issues that have been introduced by a lack of vision for extension mechanisms in TinyDB.
- Simplify the architecture in order to fix other issues that cannot be solved without breaking backwards compatibility.

To elaborate on these reasons:

## Deprecations

TinyDB is 6 years old now. The first stable release (v1.0.0) was published in July 2013. A year later in September 2014 there has been a major release (v2.0.0) that changed the data format and improved the API. Again a year later in November 2015, the next major release (v3.0.0) cleaned up the query language architecture and started moving non-core functionality to external packages.

Version 3.0.0 is now almost 4 years old. In the meantime TinyDB continued to evolve, including shifting the terminology from elements to documents in v3.6.0 and the deprecation of `ujson` support. Both of these changes have been major cleanups, but there hasn't been a major release of TinyDB that would actually get rid of the deprecated features. This results in cluttered code which makes it harder to understand the TinyDB software design/architecture.

In addition, Python 2, which TinyDB supports, will reach its end of life at the end of 2019. As TinyDB has quite a few places where it has to do extra work to support both Python 2 and 3 from the same code base, dropping Python 2 support would simplify the code even further.

TinyDB v4.0.0 would simplify the source code by removing deprecated features and in turn make it easier to understand the source and to develop one's own extensions. In addition, only Python 3 would be supported.

## Extension Mechanisms

Right from the start, there have been two ways to extend TinyDB: Custom Storages and Custom Middlewares. As the popularity and usage of TinyDB increased, so did requests to make it possible to extend other parts of TinyDB. Thus, Custom Table Classes and Custom Storage Proxy Classes have been added. In addition, mechanisms to modify the default table class name and parameters as well as the default storage class have been introduced. As as result there are no less than seven places where TinyDB's behaviour can be modified.

Except for the first two, all extension mechanisms have been introduced as a result of user requests. At the time of each request, it seemed to be the best option to follow the path of least resistance when adding a new extension mechanism, refraining from any soft of breaking changes. But looking back it is apparent, that there was no real concept of how extending TinyDB should work *in general.*

TinyDB v4.0.0 would remove all extension mechanisms except for Custom Storages. All other extension mechanisms would be replaced by a unified extension concept as detailed below.

## Architecture & API

To be honest, I'm not particularly proud about TinyDB's internal software architecture. As TinyDB evolved gradually, often simplicity of the software architecture was neglected. Now we're in a state, where there's a lot of unneeded indirection. Data access uses up to 5 classes, two of which are some form of proxy class: `TinyDB` → `Table` → `StorageProxy` → `DocumentProxy` → `Storage`. This makes TinyDB's source code complicated and also impacts performance (see #250). Fixing these design issues requires rearchitecting TinyDB. But this in turn requires breaking backwards compatibility as some extension mechanisms rely on the old software architecture.

Additionally, there's been discussion about inconsistencies in TinyDB's API regarding purging data (see #103). Removing these inconsistencies would break backwards compatibility.

TinyDB v4.0.0. would simplify the internal software architecture and remove inconsistencies from its API, making it easier to understand how TinyDB works and thus making it easier to extend.

# Proposals

## Deprecations

For the reasons outlined above, I propose to

- Put TinyDB v3 into maintenance mode, implementing only bug fixes but not adding new features,
- Remove all deprecated features,
    - Remove Element/Element ID APIs (following #158),
    - Fix [Two test failures when `ujson` installed](https://github.com/msiemens/tinydb/issues/262) (#262), and
- Drop Python 2 support

## Extension Mechanisms

I propose to replace all existing extension mechanisms with Custom Storages and Inheritance. Custom Storages continue to be a useful extension mechanism that is difficult to replicate by other means. In addition to Custom Storages, the main way to extend TinyDB and to modify its behaviour would be inheritance – to create subclasses of TinyDB. A famous example of this approach is [Flask](https://flask.palletsprojects.com/en/1.1.x/becomingbig/#subclass):

> The Flask class has many methods designed for subclassing. You can quickly add or customize behavior by subclassing Flask (see the linked method docs) and using that subclass wherever you instantiate an application class.

In addition, the Flask docs state:

> As you grow your codebase, don’t just use Flask – understand it. Read the source. Flask’s code is written to be read; its documentation is published so you can use its internal APIs. Flask sticks to documented APIs in upstream libraries, and documents its internal utilities so that you can find the hook points needed for your project.

With the new extension approach, TinyDB would aim to follow the same path: Instead of adding new extension mechanisms endlessly, users would be encouraged to subclass `TinyDB` and other classes in order to modify, how TinyDB fetches the last ID, how it calculates the next ID, how the default table name is determined, and other behaviours.

Implementing this requires making useful internal TinyDB methods part of the public API and documenting them in a way that makes it easy to overload them with custom behaviour. The documentation should provide examples of what types of extensions are possible by subclassing. Also, the source code itself should have its code comments reworked to make it easy to understand how TinyDB works from the first reading of the source code (based on ideas like [literate programming](https://en.wikipedia.org/wiki/Literate_programming)).

The main challenge of implementing this approach is to find the right balance of how much of TinyDB's internal methods should become part of the public API. Making too few methods part of the public API makes it difficult to modify all aspects of TinyDB's behaviour. But making too many methods part of the public API makes it difficult to continue to evolve TinyDB without breaking the existing API and existing extensions and in addition cluttering the public API too much.

My approach regarding which methods to include in the public API would be to be conservative and – at first – include too few methods rather than too many. The reason behind this is that it's possible to move more methods to the public API after the fact without breaking the existing API whereas the opposite would break existing usage.

## Architecture & API Changes

I propose to simplify to rearchitect TinyDB to use the following classes:

- `TinyDB` class
    - Create and manage tables
    - Forward calls to the default table
- `Table` class
    - Receive a storage instance from the `TinyDB` class
    - Modify table data
    - Cache query results to avoid unneeded I/O
- `Storage` class
    - Read and write data to a storage
- `Query` class
    - Provide searching and filtering
- `Document` class
    - Provide a thin wrapper around stored data that remembers the document's ID

There may be additional internal classes (such as the `QueryImp` and `LRUCache` classes we currently have), the classes outlined above should do the lion share of the work for TinyDB. All in all, the new architecture should provide a clear separation of concerns and responsibilities. Simplifying the architecture in this way would allow to fix issue #250 (StorageProxy read performance is abysmal). Also, a simple architecture makes it easy to understand how TinyDB works which in turn would impact how easy it is to extend TinyDB using inheritance (see above). In other words: Having a simpler architecture should make it easier to extend TinyDB.

In addition to architecture changes, I propose to also simplify TinyDB's API. For one thing, we could fix issue #103 (Inconsistency with purge functions) by making function names consistent between the `TinyDB` and `Table` classes. For another thing, I would propose to remove the `write_back` method as it complicates the API, probably is rarely used and can be implemented by subclassing, if needed. Also, I would like to make `process_elements` part of the internal API again as it's a core method of how data is manipulated and probably should not be modified by subclassing.

# Feedback Requested

If you have thoughts, questions, comments or ideas regarding a possible TinyDB v4.0.0, especially regarding the proposals outlined above, feel free to comment and discuss on this issue 🙂
When ujson is installed, there are two errors in the test suite.
```
[   51s] =================================== FAILURES ===================================
[   51s] _______________________________ test_json_kwargs _______________________________
[   51s] 
[   51s] tmpdir = local('/tmp/pytest-of-abuild/pytest-0/test_json_kwargs0')
[   51s] 
[   51s]     def test_json_kwargs(tmpdir):
[   51s]         db_file = tmpdir.join('test.db')
[   51s] >       db = TinyDB(str(db_file), sort_keys=True, indent=4, separators=(',', ': '))
[   51s] 
[   51s] tests/test_storages.py:35: 
[   51s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[   51s] tinydb/database.py:165: in __init__
[   51s]     self._table = self.table(default_table)
[   51s] tinydb/database.py:196: in table
[   51s]     table = table_class(self._cls_storage_proxy(self._storage, name), name, **options)
[   51s] tinydb/database.py:302: in __init__
[   51s]     data = self._read()
[   51s] tinydb/database.py:409: in _read
[   51s]     return self._storage.read()
[   51s] tinydb/database.py:96: in read
[   51s]     self._storage.write(raw_data)
[   51s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[   51s] 
[   51s] self = <tinydb.storages.JSONStorage object at 0x7f661e42b910>
[   51s] data = {'_default': {}}
[   51s] 
[   51s]     def write(self, data):
[   51s]         self._handle.seek(0)
[   51s] >       serialized = json.dumps(data, **self.kwargs)
[   51s] E       TypeError: 'separators' is an invalid keyword argument for this function
[   51s] 
[   51s] tinydb/storages.py:112: TypeError
[   51s] ___________________________ test_insert_invalid_dict ___________________________
[   51s] 
[   51s] tmpdir = local('/tmp/pytest-of-abuild/pytest-0/test_insert_invalid_dict0')
[   51s] 
[   51s]     def test_insert_invalid_dict(tmpdir):
[   51s]         path = str(tmpdir.join('db.json'))
[   51s]     
[   51s]         with TinyDB(path) as _db:
[   51s]             data = [{'int': 1}, {'int': 2}]
[   51s]             _db.insert_multiple(data)
[   51s]     
[   51s]             with pytest.raises(TypeError):
[   51s] >               _db.insert({'int': {'bark'}})  # Fails
[   51s] E               Failed: DID NOT RAISE <type 'exceptions.TypeError'>
[   51s] 
```

Builds at https://build.opensuse.org/package/show/home:jayvdb:py-new/python-tinydb