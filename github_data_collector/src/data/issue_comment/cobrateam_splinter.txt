I am attempting to shift my automation at work from Selenium to Splinter. As part of this, I have chosen to utilize the pytest-selenium plugin for better QOL. Unfortunately, it appears that Splinter is raising an UnboundLocalError when run from a Docker container, not when running from command line. This error is raised at line 68 in browser.py within the Splinter library.

Any thoughts on what could be happening here? 

```
splinter_webdriver = 'chrome', retry_count = 3

    def get_browser(splinter_webdriver, retry_count=3):
        kwargs = get_args(driver=splinter_webdriver,
                          download_dir=splinter_file_download_dir,
                          download_ftypes=splinter_download_file_types,
                          firefox_pref=splinter_firefox_profile_preferences,
                          firefox_prof_dir=splinter_firefox_profile_directory,
                          remote_url=splinter_remote_url,
                          executable=splinter_webdriver_executable,
                          headless=splinter_headless,
                          driver_kwargs=splinter_driver_kwargs)
        try:
            return splinter_browser_class(
                splinter_webdriver, visit_condition=splinter_browser_load_condition,
                visit_condition_timeout=splinter_browser_load_timeout,
>               wait_time=splinter_wait_time, **kwargs
            )

/usr/local/lib/python3.6/site-packages/pytest_splinter/plugin.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = ('chrome',), kwargs = {'headless': True, 'wait_time': 5}
visit_condition = <function splinter_browser_load_condition.<locals>.<lambda> at 0x7ff49aaaf048>
visit_condition_timeout = 10

    def Browser(*args, **kwargs):
        """Emulate splinter's Browser."""
        visit_condition = kwargs.pop('visit_condition')
        visit_condition_timeout = kwargs.pop('visit_condition_timeout')
>       browser = splinter.Browser(*args, **kwargs)

/usr/local/lib/python3.6/site-packages/pytest_splinter/plugin.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

driver_name = 'chrome', retry_count = 3, args = ()
kwargs = {'headless': True, 'wait_time': 5}
driver = <class 'splinter.driver.webdriver.chrome.WebDriver'>

    def Browser(driver_name="firefox", retry_count=3, *args, **kwargs):
        """
        Returns a driver instance for the given name.
    
        When working with ``firefox``, it's possible to provide a profile name
        and a list of extensions.
    
        If you don't provide any driver_name, then ``firefox`` will be used.
    
        If there is no driver registered with the provided ``driver_name``, this
        function will raise a :class:`splinter.exceptions.DriverNotFoundError`
        exception.
        """
    
        try:
            driver = _DRIVERS[driver_name]
        except KeyError:
            raise DriverNotFoundError("No driver for %s" % driver_name)
    
>       return get_driver(driver, *args, **kwargs)

/usr/local/lib/python3.6/site-packages/splinter/browser.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

driver = <class 'splinter.driver.webdriver.chrome.WebDriver'>, retry_count = 3
args = (), kwargs = {'headless': True, 'wait_time': 5}, _ = 2

    def get_driver(driver, retry_count=3, *args, **kwargs):
        """Try to instantiate the driver.
    
        Common selenium errors are caught and a retry attempt occurs.
        This can mitigate issues running on Remote WebDriver.
    
        """
        for _ in range(retry_count):
            try:
                return driver(*args, **kwargs)
            except (IOError, HTTPException, WebDriverException, MaxRetryError) as e:
                pass
    
>       raise e
E       UnboundLocalError: local variable 'e' referenced before assignment

/usr/local/lib/python3.6/site-packages/splinter/browser.py:68: UnboundLocalError
```

Dockerfile I am using:

```
FROM python:3.6-slim-buster

# Set working directory
WORKDIR /python/tests/automation/

# Install third-party dependencies
RUN pip install pipenv

COPY Pipfile .
COPY Pipfile.lock .
RUN pipenv install --system --deploy --ignore-pipfile

# Copy automation data and configuration
COPY . .

# Clear .pyc files for conftest.py import
RUN find . -name *.pyc -delete

# Install Google Chrome
RUN apt-get update && \
    apt-get install -y wget dpkg && \
    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
    dpkg -i google-chrome-stable_current_amd64.deb; apt-get -fy install

RUN webdriverdownloader chrome

RUN pytest -m splinter
```
It looks like Browser is taking `retry_count` as an argument
which is never used. Fixed by adding it to get_driver.
- Add CookieManager.delete_all() method
- Standardize the init phase for CookieManager subclasses
- Remove ability to send a list to CookieManager.add(). This was undocumented and having an argument that takes multiple types seems like a bad idea.
- Rewrite CookieManager.add() to accept arguments for cookie parameters instead of a dict with a key/value for name and value parameters.

The change to CookieManager.add() is incompatible with the current function signature, unfortunately.

Note that flask does not use the samesite parameter, and zope does not use httponly and samesite parameters.

Fixes #307, #388, and probably #743, but it needs to be tested.



When using screenshot function under splinter.driver.webdriver.WebDriverElement I get the following error: 

'''

        def screenshot(self, name='', suffix=".png", full=False):
            name = name or ''
            (fd, filename) = tempfile.mkstemp(prefix=name, suffix=suffix)
            # don't hold the file
            os.close(fd)
    
            if full:
                self.parent.full_screen()
            target = self.screenshot_as_png()
           > self.parent.recover_screen()
           E       AttributeError: 'WebDriverElement' object has no attribute "recover_screen"
'''

I believe it's because of the refactored function "_find" in .../Webdriver/init.py. When WebDriverElement calls the "_find" function, it instantiates the object using "self" on line 254 



    def _find(self, finder, selector):
  
         [...]

        if elements:
            elem_list = [self.element_class(element, self) for element in elements]

        return elem_list


and self, type WebDriverElement, is passed to become the parent of that element. And that's when the error occurs because the screenshot function expects self.parent to be of type WebDriver that has 'recover_screen' function.

This was working before because parent was always type "WebDriver". This can be seen in find_by methods in WebDriverElement. For example, looking at older code (ver 11), you can see that 'WebDriverElement.find_by_xpath' passes the parent instead of self to instantiate.


    def find_by_xpath(self, selector, original_find=None, original_query=None):
        elements = ElementList(self._element.find_elements_by_xpath(selector))
        return ElementList(
            [self.__class__(element, self.parent) for element in elements],
            find_by="xpath",
            query=selector,
        )

Quick solution is to pass the parent instead of self in "_find" function when self is of type WebDriverElement but I do not know the code enough and may cause more issues.

Another possible solution is to implement the the missing functions that was expected for "WebDriver" such as  "recover_screen", "full_screen" for WebDriverElement class.

Let me know if any of the solution above is good and I'll create a pull request for it.
Hello, 
I am using Django with LiveServerTestCase. I was trying to load my chrome driver with a cookie that preloads a user session cookie. 
for example:
` cookie = {'path': '/', 'value': '9gl4p7wlrtgkw3dfer1vi2jievkks8f1', 'name': 'sessionid'}`
however, the cookie doesn't load properly, and the user is not logged in when i run 
```
browser.cookies.add(cookie)
browser.reload()
```
When I inspected the code at [splinter/driver/webdriver/cookie_manager.py](https://github.com/cobrateam/splinter/blob/master/splinter/driver/webdriver/cookie_manager.py) I found that the way cookies are added is by 
```
for key, value in cookies.items():
            self.driver.add_cookie({"name": key, "value": value})
```
resulting 
```
{'name': 'path', 'value': '/'}
{'name': 'value', 'value': '9gl4p7wlrtgkw3dfer1vi2jievkks8f1'}
{'name': 'name', 'value': 'sessionid'}
```
which didnt really work.
I have revised the add function such that a cookie dict is added as a whole using Selenium `add_cookie` function. 
This is the new function:
```
def add(self, cookies):
    if isinstance(cookies, list):
        for cookie in cookies:
            self.driver.add_cookie(cookie)
            return
    self.driver.add_cookie(cookies)
```

Hope this helps

When I want to visit url by splinter browser.visit(url),  spanish characters, like á , è , ñ, etc, usually change into window-1252 encoding, thus the url couldn't be visited. 

For example, I visit the url: 'https://bm.linkedin.com/pub/angello-infante-sánchez/48/8a0/863'
browser changed it to: https://www.linkedin.com/public-profile/pub/angello-infante-s%E1nchez/48/8a0/863 , and linkedin response "Page not found", but if I manually replace the '%E1' into ' á ' , it exist.

Maybe it's not the problem of splinter but Chrome, but how do I fix this problem, as it really bothered me for days and couldn't be solved, thanks all.
https://github.com/wkeeling/selenium-wire

Looks awesome logs the http(s) requests.
```
# fails! probably Splinter 0.11.0 error
# selEl.select(opt.value) <============= FAILS, will set the 1-st select in fieldset, regardless we have in selEl only the 2nd one

ie. in code bellow we cannot select 'impact'. Regardless only 'impact' is selected, .select() changes always 'criticity'.

this replacement directly with webdriver works well:
    from selenium.webdriver.support.ui import Select
    select = Select(self.br.driver.find_element_by_name(selEl.first['name']))
    select.select_by_value(opt.value)  # or .select_by_visible_text('Banana')

class VyjimkyAdmin(admin.ModelAdmin):
    form = VyjimkyForm
    fieldsets = [
        (_("Vyjimky"), {
            'fields': ("vyjimka_id",
                       "name",
                       "reason",
                       ("criticity", "impact", "scope"))
        }),

```
When I run the given Google example on Linux i get the following (python3.6)

```
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/splinter/element_list.py", line 42, in __getitem__
    return self._container[index]
IndexError: list index out of range

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/splinter/element_list.py", line 76, in __getattr__
    return getattr(self.first, name)
  File "/usr/local/lib/python3.6/dist-packages/splinter/element_list.py", line 57, in first
    return self[0]
  File "/usr/local/lib/python3.6/dist-packages/splinter/element_list.py", line 46, in __getitem__
    self.find_by, self.query
splinter.exceptions.ElementDoesNotExist: no elements could be found with name "btnG"

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/splinter/element_list.py", line 79, in __getattr__
    return getattr(self._container, name)
AttributeError: 'list' object has no attribute 'click'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "splinter_test.py", line 6, in <module>
    browser.find_by_name('btnG').click()
  File "/usr/local/lib/python3.6/dist-packages/splinter/element_list.py", line 83, in __getattr__
    self.__class__.__name__, name
AttributeError: 'ElementList' object has no attribute 'click'

```

I did an inspect on the google website and it seems the button is called 'btnK' so I changed it to that but now get this
```
selenium.common.exceptions.ElementNotInteractableException: Message: Element <input class="gNO89b" name="btnK" type="submit"> could not be scrolled into view
```