Hi,

I've encountered an issue with the 2.5.3 release, after upgrading it from 2.3.1.

If we're generating an URL, the returned URL is missing the leading HTTP/HTTPS scheme. With that, the generated URL will be appended to the current URL from the browser instead of correctly redirect to the generated URL.

Example:

```
url = Routing.generate('base', {
    'itemId': 1234
});
console.log(url);
```
> test.domain.de/base/1234

instead of 

> http://test.domain.de/base/1234

If I set the generated URL to a link or just redirect via javascript

```
window.location.href = url;
```

The browser will try to reach this url:

> http://test.domain.de/base/test.domain.de/base/1234

Reverting back to release to 2.3.1 or manually add the missing schema fixed the issue for now.

```
window.location.href = schema + "//" + url;
```

Thank you for creating and maintaining this bundle, it's highly appreciated.
See #371, it should probably be fixed by overriding the host when it is not configured but it needs a bit of study.
When I generate a JSON file of routes (`bin/console fos:js-routing:dump --format=json --target=public/js/fos_js_routes.json`), I got an issue with the scheme.

When i set a global scheme in my parameter,  the scheme is not in my json file
```
# config/services.yaml
parameters:
    router.request_context.scheme: 'https'
    asset.request_context.secure: true
```

When i force the scheme in the annotations file, for all controlles (or one specific controller)  the scheme is not in my json file
```
# config/routes/annotations.yaml
controllers:
    resource: '../src/Controller/'
    type: annotation
    defaults:
        schemes: [https]
```

If i specify the scheme in the Route annotation `@Route("/login", name="login", schemes={"https"})`, it does works and the scheme is in my json file.

The thing is i do not want to specify scheme route by route, i'd rather do it globally (in parameters.yaml or annotations.yaml) becauce it allow me to set different scheme by env (http in local, https in production...). Is there a way to set a global scheme in my dump json ?
My FOSJSRouting version is 2.4.0
Symfony version : 4.3

Route definition

```yaml
test_route:
    path: /test/{required1}/{required2}/{optional}
    defaults:
        _controller: '\Some\Class::method'
        optional: 0
    requirements:
        optional: \d+
        required1: \d+
        required2: \d+
    methods:
        - GET
    options:
        expose: true
```

translated into this

```javascript
fos.Router.setData({
    "base_url": "",
    "routes": {
        "test_route": {
            "tokens": [
                ["variable", "\/", "\\d+", "optional"],
                ["variable", "\/", "\\d+", "required2"],
                ["variable", "\/", "\\d+", "required1"],
                ["text", "\/test"]
            ],
            "defaults": {
                "optional": 0
            },
            "requirements": {
                "optional": "\\d+",
                "required1": "\\d+",
                "required2": "\\d+"
            },
            "hosttokens": [],
            "methods": ["GET"],
            "schemes": []
        }
    },
    "prefix": "",
    "host": "localhost",
    "port": "",
    "scheme": "http",
    "locale": "ru"
});
```

Cases:
```
Execute: Routing.generate('test_route')
Expected result: "Uncaught Error: The route "test_route" requires the parameter "required1" (or required2)
Actual result: "/test"

Execute: Routing.generate('test_route', {required1: 1})
Expected result: "Uncaught Error: The route "test_route" requires the parameter "required2"
Actual result: "/test/1"
```

Works as expected when setting an optional parameter:
```
Execute: Routing.generate('test_route', {optional: 1})
Expected result: "Uncaught Error: The route "test_route" requires the parameter "required1" (or required2)
Actual result: "Uncaught Error: The route "test_route" requires the parameter "required2"
```

--------

Setting `optional = false` by default here https://github.com/FriendsOfSymfony/FOSJsRoutingBundle/blob/master/Resources/public/js/router.js#L293 fixes my issue, although I haven't tested other cases yet and not quite sure what is the purpose of this variable at all.
Hey there,

I just figured out that calling the `fos_js_routing_js` will trigger a cache write in the `%kernel.project_dir%/var/cache/%kernel.environment%/fosJsRouting` directory (which doesn't exist in case of a cache miss).

This has 2 drawbacks:
- Routes have to be computed during the user's request, which can impact performance even if it should be done only 1 time per deployment
- The system user running the PHP SAPI [may not have writing permissions on the cache directory](https://github.com/symfony/symfony-docs/issues/11733).

Why not implementing a [`Symfony\Component\HttpKernel\CacheWarmer\WarmableInterface`](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/CacheWarmer/WarmableInterface.php) service which would hook on the `cache:clear` and the `cache:warmup` commands to write everything needed during deployment and/or cache clear/warmup? 

Pre-requisites are prior knowledge of all the locales used but this can be achieved through the bundle configuration.

What are your thoughts?
Solution proposed in https://github.com/symfony/webpack-encore/issues/97#issuecomment-390886376 no longer works.
It works as expected until i configure babel with runtime generator and corejs to support async/await and generators
```
import "core-js/stable";
import "regenerator-runtime/runtime";
```
as detailed here https://github.com/zloirock/core-js/blob/master/docs/2019-03-19-core-js-3-babel-and-a-look-into-the-future.md

My Routing wrapper: Routing.js
```
const Routing = require('../../../../vendor/friendsofsymfony/jsrouting-bundle/Resources/public/js/router.js')
const routes = require('../../../../web/js/fos_js_routes.json')

Routing.setRoutingData(routes)
module.exports = Routing
```

webpack encore config:
```
.configureBabel(
    function(babelConfig) {
      babelConfig.plugins.push('@babel/plugin-proposal-object-rest-spread')
      babelConfig.plugins.push('@babel/plugin-syntax-import-meta')
      babelConfig.plugins.push('@babel/plugin-proposal-json-strings')
      babelConfig.plugins.push('@babel/plugin-proposal-class-properties')
      babelConfig.plugins.push('@babel/plugin-transform-react-jsx-source')
    },
    { useBuiltIns: 'usage', corejs: 3 },
  )
```


when i load the page i get an error 
**"root is undefined"** 
which refers to:
`root.Routing = routing.Routing;` router.js line 13
Hello,

When I deploy my Symfony application to production server and try to cache clear, I receive the following error: 

Failed to remove file "/project/var/cache/pro~/fosJsRouting/data.json": unlink(/project/var/cache/pro~/fosJsRouting/data.json): Permission denied. 

If I see the permissions, I noticed cache folder has been created with user/group: www-data

How can I solve it?
Those are dictionaries from string to string, so they should be serialised as `{}` when empty while they are serialised as `[]`.
I got an error when i try to generate a route with localized path :
 ```
shop_article:
  controller: App\Controller\ShopController::showArticle
  path:
    fr: boutique/article/{slug}-{id}
    en: shop/article/{slug}-{id}
    de: shop/artikel/{slug}-{id}
  requirements:
    slug: .+
    id: \d+
  options:
    expose: true
```
if I remove all the localized path and keep only one like that
```path: shop/article/{slug}-{id}```
, it's working. What am I doing wrong?
Hello,
I got a little problem using FosJsRoutingBundle.

When i call the router inside a Controller (let's says DashboardController) : 
`$this->get('router')->getContext()->getHost()` => staging.domain.com, that's ok

When I look into 'routing.js' host are : ec2-XX-XX-XXX-XXX.eu-west-3.compute.amazonaws.com

When I look into the code behind routing.js I see it's take router in service argument. (only diff√©rence I see between my call with get() and the Controller behind routing.js).

Any ideas ?

Many thanks for your help.
