#### Report an Issue / Request a Feature

I'm submitting a (Check one with "x") : 
- [x] bug report 
- [ ] feature request

***

##### Issue Severity Classification - 

(Check one with "x") : 
- [ ] 1 - Severe
- [ ] 2 - Moderate
- [x] 3 - Low

<!--
1. Severe - `ProjectTemplate` is unable to operate or caused other critical software to fail and there is no acceptable way to work around the problem. This condition requires an immediate solution.
2. Moderate - Significant impact.  `ProjectTemplate` is usable but is limited. Work around exists, but requires significant effort. Incomplete/incorrect documentation, poor or unexplained log messages where no clear error was evident, side effect is observed which does not significantly harm operations etc.
3. Low - Minimal impact. Issue is an annoyance, but I can get work done. This indicates the problem causes little impact on operations or that a reasonable circumvention to the problem has been implemented. Usability quirks, requires minor documentation updates, or could be enhance with some minor changes to the function.
-->

##### Expected Behavior

When following [the guide](http://projecttemplate.net/mastering.html) on unit testing the flow of script should include load.project() prior to stub.tests() or will return an error:
```
> library('ProjectTemplate')
> create.project()
> setwd('new-project')
> stub.tests()
Generating stub tests in tests/autogenerated.R:
Error in get("config", envir = .TargetEnv) : object 'config' not found
```

##### Current Behavior

Returns error if steps are followed in order. 

##### Steps to Reproduce Behavior

As above
 
##### Possible Solution

include `load.project()` in the example code/output to [the guide](http://projecttemplate.net/mastering.html)
#### Report an Issue / Request a Feature

I'm submitting a (Check one with "x") : 
- [x] bug report 
- [ ] feature request

***

##### Issue Severity Classification - 

(Check one with "x") : 
- [ ] 1 - Severe
- [ ] 2 - Moderate
- [x] 3 - Low

<!--
1. Severe - `ProjectTemplate` is unable to operate or caused other critical software to fail and there is no acceptable way to work around the problem. This condition requires an immediate solution.
2. Moderate - Significant impact.  `ProjectTemplate` is usable but is limited. Work around exists, but requires significant effort. Incomplete/incorrect documentation, poor or unexplained log messages where no clear error was evident, side effect is observed which does not significantly harm operations etc.
3. Low - Minimal impact. Issue is an annoyance, but I can get work done. This indicates the problem causes little impact on operations or that a reasonable circumvention to the problem has been implemented. Usability quirks, requires minor documentation updates, or could be enhance with some minor changes to the function.
-->

##### Expected Behavior

When following [the guide](http://projecttemplate.net/mastering.html) to add a path to the philapd.db file I created in PhilaPD/database I expected the quoted string "database/philapd.db" to be a reasonable value for the dbname argument to locate the database, as this is the convention for most path-to-object scripts in R. Instead I needed to unquote the string to database/philapd.db.

##### Current Behavior

With the path in quotes the load.project() functions ends with: 
```
Error: Could not connect to database:
unable to open database file
```

##### Steps to Reproduce Behavior

Follow guide, create a folder called database and place the database file in there. Create the same sql file but with dbname as "database/philapd.db". 

```
type: sqlite
dbname: "database/philapd.db"
table: *
```

##### Version Information

R 3.6.2
R studio 1.2.5.034
ProjectTemplate 0.9

##### Possible Solution

If escape keys a required to unquote the quotes can a grepl assist for the sql reader function?
#### Report an Issue / Request a Feature

I'm submitting a (Check one with "x") : 
- [ ] bug report 
- [x] feature request

***

##### Issue Severity Classification - 

(Check one with "x") : 
- [ ] 1 - Severe
- [ ] 2 - Moderate
- [x] 3 - Low

##### Expected Behavior

I have a lot of files in `/src`.
When I run them all (`run.project`) the output gets very messy since the same information repeats from `load.project` in every file.
Therefore, I usually start my scripts with `suppressMessages({library(ProjectTemplate); load.project()})`

It would be nice however if I could omit `suppressMessages` here. It is sometimes nice to get the output when running individual script files. 
But then it would be nice to have an argument like "quiet" or "verbose" to use in `run.project` for the same behanviour.

##### Current Behavior
A lot of output that is hard to grasp.

##### Steps to Reproduce Behavior

`run.project()`

##### Version Information
R: 3.6.1
ProjectTemplate: 0.9.0
#### Report an Issue / Request a Feature

I'm submitting a : 
- [x] feature request

***

##### Issue Severity Classification - 
  
- [x] 3 - Low


##### Expected Behavior
If I have an R Notebook (.Rmd) in the `/reports` subfolder or the `/src` subfolder, and in that document I call

```r
library(ProjectTemplate)
load.project()
```
then this should load the project.

##### Current Behavior


Calling the exact same code from a `.R` file and a `.Rmd` file (in RStudio) has different behaviour.  The former works, the latter does not.  This is because the latter always runs code in the files parent directory.

##### Steps to Reproduce Behavior

Create a new ProjectTemplate project
Create a new "R Notebook" document, and save it in the `/reports` subfolder.
In the first chunk, include:

```r
library(ProjectTemplate)
load.project()
```

##### Version Information

R 3.5.3
ProjectTemplate 0.9.0
RStudio 1.1.463

##### Possible Solution

Currently, the `load.project()` function fails if it is not run from the correct folder.
Would it be possible to add an argument to the `load.project` function where the user can specify the path to the project folder, defaulting to `getwd()`?

Alternatively, the package `rprojroot` has functionality to explore the file system by successively checking each parent folder to see if a condition is met - can `load.project()` use this to find the `ProjectTemplate` project folder, assuming it is a parent of the current working folder?

Maybe I've misunderstood.

In the "depends" list in the "cache" function, when I put in a variable that does not exist (generally by accident), the error I get is
"Error in if (nrow(depends.hash) >= 1) { : argument is of length zero"

Unless you know the mistake you've made, its hard to tell from this error message that you've made a typo in the your "depends" variables. Would probably save some head scratching if the error was something more like 
"Error, variable "x" in dependencies is not found in the current environment"

PS: Here is some code that will generate the error for me:
cache("new_var", {
  x <- 56
}, depends = c("old_var"))
#### Report an Issue / Request a Feature
Autoloading data creates a cache entry with the name `data` instead of the name of the dataset

I'm submitting a (Check one with "x") : 
- [x] bug report 
- [ ] feature request

***

##### Issue Severity Classification - 

(Check one with "x") : 
- [ ] 1 - Severe
- [x] 2 - Moderate
- [ ] 3 - Low

<!--
1. Severe - `ProjectTemplate` is unable to operate or caused other critical software to fail and there is no acceptable way to work around the problem. This condition requires an immediate solution.
2. Moderate - Significant impact.  `ProjectTemplate` is usable but is limited. Work around exists, but requires significant effort. Incomplete/incorrect documentation, poor or unexplained log messages where no clear error was evident, side effect is observed which does not significantly harm operations etc.
3. Low - Minimal impact. Issue is an annoyance, but I can get work done. This indicates the problem causes little impact on operations or that a reasonable circumvention to the problem has been implemented. Usability quirks, requires minor documentation updates, or could be enhance with some minor changes to the function.
-->

##### Expected Behavior
`load.project()` creates a cache entry for every file in `data/` with the corresponding name of the file in `data/`
<!-- What do you think should happen? -->

##### Current Behavior
`load.project()` creates a cache entry with the name `data` , ignoring the original name of the file in `data/`
<!-- What currently happens? -->

##### Steps to Reproduce Behavior

<!-- How can we reproduce the behavior? -->

`load.project()` with a file in `data/`

<!-- OPTIONAL -->
 
##### Screenshots
![grafik](https://user-images.githubusercontent.com/32334619/51839955-fe069480-230a-11e9-9a31-60dd8c4f5e0b.png)

<!-- Insert screenshots here -->

##### Version Information

```r
          Package           Version 
"ProjectTemplate"           "0.8.2" 
```
R version 3.5.1
<!-- What are the versions of R, ProjectTemplate, and other dependencies? -->

##### Possible Solution
-/-
<!-- Any ideas how to solve the problem? -->

Best regards,
@AljoLe
#### Report an Issue / Request a Feature

I'm submitting a (Check one with "x") : 
- [ ] bug report 
- [x] feature request

***

##### Issue Severity Classification - 

(Check one with "x") : 
- [ ] 1 - Severe
- [x] 2 - Moderate
- [ ] 3 - Low

##### Expected Behavior

When a file in `data/` is changed but the resulting variable exists in the cache the file is not reloaded.

##### Current Behavior

Currently caching of the data is only done after the variable is loaded into memory, and cached variables are not reloaded if the original file was changed.

##### Version Information

<!-- What are the versions of R, ProjectTemplate, and other dependencies? -->

##### Possible Solution

Update the `cache` function to also include a `file` argument, similar to the `depends` argument. If the digest of the file has changed reload the file and rebuild the cache. This could be done inside the reader as follows (using the 1.0 reader signature):

```R
csv.reader <- function(file.name, variable.name, ...) {
    cache(variable.name,
          CODE = {
              read.csv(file.name, ...)
          },
          file = file.name
    )
}
```

This way assigning the variable in global namespace is left to `cache`, the `CODE` argument is evaluated as it is normally inside the `cache` function, and is only updated if the dependency in the `file` argument changed.

How do you guys feel about this?
I think that ProjectTemplate should be a solid and reliable basis for building data analysis projects. 

If a user creates a project with a set of data import functions in place, we don't want that data analysis project to break six months or a year later because the data import rules have changed. We want ProjectTemplate to be a solid basis for building projects. For many years, ProjectTemplate has provided this solid basis.

Specifically, I think that **any change to data import rules should not break existing data analysis projects**. 

In contrast, 

* converting data.frames to tibbles breaks existing code
* converting to tidyverse data import functions breaks existing code (see post on [readcsv](https://github.com/KentonWhite/ProjectTemplate/issues/255), [tidyverse](https://github.com/KentonWhite/ProjectTemplate/issues/230)

As a general rule, data import functions have to make a wide range of choices around variable names, variable types, row names, na conversion, tibbles versus data.frames, strings/factors, use of meta-data and so on. 

Thus, the starting assumption should be that whenever you change a data import function, you will break existing code. If the tests are not breaking, it's more likely that the tests are not thorough enough.

That said, several new data import functions do offer benefits. readxl removes dependencies on java, perl, etc, readr is faster than read.csv.

## Possible resolutions
So, what happens if the ProjectTemplate community decides, for example, that `readxl` would be a better excel import function, because it does not require dependencies.

**Use project version number to choose data import function**. I suppose the code could have something conditional that looks at the `config$version`. Thus, any modification to the data import rules would involve having a condition so that the new import function only applies to projects with a later version.

**Implement a function like `archive.project()`**:  This could create some kind of localised version of ProjectTemplate in a folder in the project. I'm not quite sure how this would work.

Anyway, I don't really have the solution to this tension between improving data import functions and maintaining backwards compatibility. But I just thought I'd post this to emphasise the value of backwards compatibility and stability as a counterpoint to the desire to improve data import functions. 





**Stub bugreport, will append to later.**

While changing the reader signature a bug was introduced that the sheetnames were incrementally appended to the variable name, instead of to the workbook name. So a file `File.xlsx` with sheets `Sheet1` and `Sheet2` resulted in variable names `File.Sheet1` and `File.Sheet1.Sheet2`.

#### Report an Issue / Request a Feature

I'm submitting a (Check one with "x") : 
- [ ] bug report 
- [x] feature request

***

##### Issue Severity Classification - 

(Check one with "x") : 
- [ ] 1 - Severe
- [ ] 2 - Moderate
- [x] 3 - Low

<!--
1. Severe - `ProjectTemplate` is unable to operate or caused other critical software to fail and there is no acceptable way to work around the problem. This condition requires an immediate solution.
2. Moderate - Significant impact.  `ProjectTemplate` is usable but is limited. Work around exists, but requires significant effort. Incomplete/incorrect documentation, poor or unexplained log messages where no clear error was evident, side effect is observed which does not significantly harm operations etc.
3. Low - Minimal impact. Issue is an annoyance, but I can get work done. This indicates the problem causes little impact on operations or that a reasonable circumvention to the problem has been implemented. Usability quirks, requires minor documentation updates, or could be enhance with some minor changes to the function.
-->

##### Expected Behavior

An easy console driven method to quickly add libraries to `global.dcf`, which would utilize autocomplete for the package names.

##### Current Behavior

Today, as we work on the projects, adding a library to the `global.dcf` file is a manual process. When many `.R` files are open, and the open folder is different, it's a cumbersome workflow to open `global.dcf` and add the library name without any autocomplete option. (Results in spelling mistakes like I did today - `rtsne` instead of `Rtsne`.

##### Possible Solution

Something along the lines of the `devtools::use_package()` which can be called from command line as well as will autocomplete package names while typing <[read about it](https://www.rdocumentation.org/packages/devtools/versions/1.13.5/topics/use_package)>

Example usage: from the R console, call `ProjectTemplate::add_package(lattice)` changes the `global.dcf` from this:

```
...
load_libraries: TRUE
libraries: reshape2, plyr, tidyverse, stringr, lubridate
as_factors: TRUE
...
```
to this:
```
...
load_libraries: TRUE
libraries: reshape2, plyr, tidyverse, stringr, lubridate, lattice
as_factors: TRUE
...
```
If the package already exists in the list, then the user can be notified and no actions taken.