**Describe the bug**
Merry Christmas everybody. I have a question regarding BigchainDB. We have a setup of a cluster from 3 nodes where each has a Tendermint and MongoDB and they are connected.When in one of nodes on MongoDB Level a document is deleted, it does not recover itself. Is that possible to solve somehow?

**To Reproduce**
Install a cluster from several nodes, login to MongoDB directly, delete a document

**Expected behavior**
On the node where it happened, it should recover itself. 




Fixes #1738.

This should make the regex-based tests considerably more efficient, and more likely to find bugs - we've made a lot of internal improvements since 3.x :smile: 
## Problem statement
BigchainDB v2.0.0b9 has been around for quite a while. Recently we have updated
Tendermint supported version to v0.31.5 which has incompatible blockchain.
Despite the fact that we have defined instructions on chain migration, no one
expected to migrate to incompatible chain within patch version range. So there
is a demand for Tendermint v0.22.8 compatibility among BigchainDB users.

## Solution
bigchaindb-abci package was upgraded to support multiple API versions.
New configuration field stating tendermint version was added.

Make sure the title of this pull request has the form:

**Problem: A short statement of the problem.**

## Solution

A short statement about how this PR solves the **Problem**.

## Issues Resolved

What issues does this PR resolve, if any? Please include lines like the following (i.e. "Resolves #NNNN), so that when this PR gets merged, GitHub will automatically close those issues.

Resolves #NNNN
Resolves #MMMM

## BEPs Implemented

What [BEPs](https://github.com/bigchaindb/beps) does this pull request implement, if any?

**Describe the bug**
I cannot connect to my own mongo db.

**To Reproduce**
```
version: "3.5"

services:
  cs-mongodb:
    image: mongo:4.2
    container_name: cs-mongodb
    restart: always
    command: mongod
    environment:
      TZ: Europe/Paris
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: YGaBpWbEQw2Aghmkv4
    expose:
      - 27017
  bigchaindb:
    container_name: bigchaindb
    image: bigchaindb/bigchaindb:2.0.0
    environment:
      BIGCHAINDB_DATABASE_BACKEND: localmongodb
      BIGCHAINDB_DATABASE_HOST: cs-mongodb
      BIGCHAINDB_DATABASE_LOGIN: root
      BIGCHAINDB_DATABASE_PASSWORD: YGaBpWbEQw2Aghmkv4
      BIGCHAINDB_DATABASE_PORT: 27017
      BIGCHAINDB_SERVER_BIND: 0.0.0.0:9984
      BIGCHAINDB_WSSERVER_HOST: 0.0.0.0
      BIGCHAINDB_WSSERVER_ADVERTISED_HOST: bigchaindb
      BIGCHAINDB_TENDERMINT_HOST: tendermint
      BIGCHAINDB_TENDERMINT_PORT: 26657
  tendermint:
    container_name: tendermint
    image: tendermint/tendermint:v0.31.5
    entrypoint: ''
    ports:
      - "26656:26656"
      - "26657:26657"
    command: sh -c "tendermint init && tendermint node --consensus.create_empty_blocks=false --proxy_app=tcp://bigchaindb:26658"
    restart: always
```

**Expected behavior**
Connection can't be done, normally i use 
MONGO_URL=mongodb://root:YGaBpWbEQw2Aghmkv4@cs-mongodb:27017/bigchain?authSource=admin
it look because of https://api.mongodb.com/python/current/examples/authentication.html
authMechanism fail could we have option for that ?

**Logs or terminal output**
If applicable, add add textual content to help explain your problem.
`bigchaindb.backend.exceptions.ConnectionError: Authentication failed.`

**Additional context**
Add any other context about the problem here.

Is there a tutorial or how to in order to upgrade from 2.0.0b9 to 2.0.0 versions?

Thank you.
As we have talked in gitter I'm going to put a screenshot of the problem.

In the photo theres 2 nodes where I have dropped the DB (bigchaindb drop) and reset the node (tendermint unsafe_reset_validator).
On the node below I have set it to create empty blocks each 60seconds and its there where it pops up the error.

![Nodo Secret conn](https://user-images.githubusercontent.com/23051779/67861202-f1280300-fb1f-11e9-9288-5979dde3054e.png)

As you can see it doesnt create any blocks (I have waited 10min) and If i try to do a tx with the javascript driver it returns a nil pointer exception but thats another issue and it may be related to this.

Any help will be appreciated.

After command: sudo pip3 install bigchaindb==2.0.0b9
Output is: 
Traceback (most recent call last):
  File "/usr/local/bin/bigchaindb", line 6, in <module>
    from bigchaindb.commands.bigchaindb import main
  File "/usr/local/lib/python3.6/dist-packages/bigchaindb/__init__.py", line 12, in <module>
    from bigchaindb.core import App  # noqa
  File "/usr/local/lib/python3.6/dist-packages/bigchaindb/core.py", line 11, in <module>
    from abci.application import BaseApplication
  File "/usr/local/lib/python3.6/dist-packages/abci/__init__.py", line 2, in <module>
    from .server import ABCIServer
  File "/usr/local/lib/python3.6/dist-packages/abci/server.py", line 21, in <module>
    from .types_pb2 import Request
  File "/usr/local/lib/python3.6/dist-packages/abci/types_pb2.py", line 17, in <module>
    from github.com.tendermint.tendermint.crypto.merkle import merkle_pb2 as github_dot_com_dot_tendermint_dot_tendermint_dot_crypto_dot_merkle_dot_merkle__pb2
ModuleNotFoundError: No module named 'github.com.tendermint.tendermint'


Ubuntu version is: 18.04 LTS
Hi, creating an asset seems to work fine. 
Trying to transfer the created asset just send an HTTP request with no parameters which results in an 400 error:

```
{ message: 'HTTP Error: Requested page not reachable',
  status: '400 BAD REQUEST',
  requestURI: 'http://localhost:9984/api/v1/transactions?mode=commit' }
```


my program

```
const driver = require('bigchaindb-driver')

// BigchainDB server instance
const API_PATH = 'http://localhost:9984/api/v1/'
const conn = new driver.Connection(API_PATH)

// Create keypairs for actors.
const artDealer = new driver.Ed25519Keypair()
const owner = new driver.Ed25519Keypair()
const buyer = new driver.Ed25519Keypair()


//function to create an artwork
function createArtwork(artist, title, style, type, initialOwner,initialValue,comment){

    // Construct a transaction payload
    const tx = driver.Transaction.makeCreateTransaction(
        // Define the artwork to store
        {   artID: Math.random().toString(36).substr(2, 9), 
            artist: artist,
            title: title,
            style: style,
            type: type,
            initialOwner: initialOwner,
            initialValue: initialValue, 
            datetime: new Date().toString() 
        },

        // Metadata contains information about the transaction itself
        // (can be `null` if not needed)
        { 
            comment: comment 
        },

        // A transaction needs an output
        [ driver.Transaction.makeOutput(
                driver.Transaction.makeEd25519Condition(artDealer.publicKey))
        ],
        artDealer.publicKey
    )

    // Sign the transaction with private keys
    const txSigned = driver.Transaction.signTransaction(tx, artDealer.privateKey)

    // Send the transaction off to BigchainDB
    //const conn = new driver.Connection(API_PATH)

    conn.postTransactionCommit(txSigned)
        .then(retrievedTx => console.log('Artwork', retrievedTx.id, 'successfully registred into the blockchain. Transaction to be viewed trough following link: ',API_PATH,'transactions/',retrievedTx.id ))
    return txSigned
}



//transfer transaction
async function transferAsset(seller,buyer,assetTx,price) {
    
    //const conn = new driver.Connection(API_PATH)
    //conn.getTransaction(assetTx)

    const txTransferBuyer = driver.Transaction.makeTransferTransaction(
        // signedTx to transfer and output index
        [{ tx: assetTx, output_index: 0 }],

        [driver.Transaction.makeOutput(driver.Transaction.makeEd25519Condition(buyer.publicKey))],

        // metadata
        {   price: price,
            date: new Date().toISOString()
        }
        );

        //sign by seller
        txTransferBuyerSigned = driver.Transaction.signTransaction(txTransferBuyer, seller.privateKey);

        //send to blockchain

        conn.postTransactionCommit(txTransferBuyerSigned)

        //check new owner
        //console.log('Is Bob the owner?', txTransferBuyerSigned['outputs'][0]['public_keys'][0] == buyer.publicKey)
// Output: true

}


//program script
console.log("***** REGISTERING ARTWORK  ********")
artObject = createArtwork('FancyPainterName', 'hellopainting', 'modern', 'painting', owner.publicKey, 1000, 'geregistreerd door piet')
//console.log(art1)

//transfer tussen 'verkoper' 'koper' welk object en prijs

//console.log('owner')
//console.log(owner)
//console.log('buyer')
//console.log(buyer)
//console.log('artObject')
//console.log(artObject)
console.log("***** TRANSFERRING ARTWORK ********")
transferAsset(owner,buyer,artObject,2000)    
```




I am trying to create a new transaction on an amazon EC2 instance
http://3.121.196.233:9984/api/v1/ actually shows that the bigchainDB is running.
However, when I create a new transaction I get an internal server error.
Here is the error from the ec2 server:

> [2019-08-25 10:03:41,012] ERROR in app: Exception on /api/v1/transactions [POST][2019-08-25 10:03:41,012] ERROR in app: Exception on /api/v1/transactions [POST]
> Traceback (most recent call last):
>   File "/usr/lib/python3/dist-packages/urllib3/connection.py", line 141, in _new_conn
>     (self.host, self.port), self.timeout, **extra_kw)
>   File "/usr/lib/python3/dist-packages/urllib3/util/connection.py", line 83, in create_connection
>     raise err
>   File "/usr/lib/python3/dist-packages/urllib3/util/connection.py", line 73, in create_connection
>     sock.connect(sa)
> ConnectionRefusedError: [Errno 111] Connection refused
> 
> During handling of the above exception, another exception occurred:
> 
> Traceback (most recent call last):
>   File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 601, in urlopen
>     chunked=chunked)
>   File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 357, in _make_request
>     conn.request(method, url, **httplib_request_kw)
>   File "/usr/lib/python3.6/http/client.py", line 1239, in request
>     self._send_request(method, url, body, headers, encode_chunked)
>   File "/usr/lib/python3.6/http/client.py", line 1285, in _send_request
>     self.endheaders(body, encode_chunked=encode_chunked)
>   File "/usr/lib/python3.6/http/client.py", line 1234, in endheaders
>     self._send_output(message_body, encode_chunked=encode_chunked)
>   File "/usr/lib/python3.6/http/client.py", line 1026, in _send_output
>     self.send(msg)
>   File "/usr/lib/python3.6/http/client.py", line 964, in send
>     self.connect()
>   File "/usr/lib/python3/dist-packages/urllib3/connection.py", line 166, in connect
>     conn = self._new_conn()
>   File "/usr/lib/python3/dist-packages/urllib3/connection.py", line 150, in _new_conn
>     self, "Failed to establish a new connection: %s" % e)
> urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f1122512390>: Failed to establish a new connection: [Errno 111] Connection refused
> 
> During handling of the above exception, another exception occurred:
> 
> Traceback (most recent call last):
>   File "/usr/local/lib/python3.6/dist-packages/requests/adapters.py", line 449, in send
>     timeout=timeout
>   File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 639, in urlopen
>     _stacktrace=sys.exc_info()[2])
>   File "/usr/lib/python3/dist-packages/urllib3/util/retry.py", line 398, in increment
>     raise MaxRetryError(_pool, url, error or ResponseError(cause))
> urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=26657): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f1122512390>: Failed to establish a new connection: [Errno 111] Connection refused',))
> 
> During handling of the above exception, another exception occurred:
> 
> Traceback (most recent call last):
>   File "/usr/local/lib/python3.6/dist-packages/flask/app.py", line 1949, in full_dispatch_request
>     rv = self.dispatch_request()
>   File "/usr/local/lib/python3.6/dist-packages/flask/app.py", line 1935, in dispatch_request
>     return self.view_functions[rule.endpoint](**req.view_args)
>   File "/usr/local/lib/python3.6/dist-packages/flask_restful/__init__.py", line 458, in wrapper
>     resp = resource(*args, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/flask/views.py", line 89, in view
>     return self.dispatch_request(*args, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/flask_restful/__init__.py", line 573, in dispatch_request
>     resp = meth(*args, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/bigchaindb/web/views/transactions.py", line 98, in post
>     status_code, message = bigchain.write_transaction(tx_obj, mode)
>   File "/usr/local/lib/python3.6/dist-packages/bigchaindb/lib.py", line 95, in write_transaction
>     response = self.post_transaction(transaction, mode)
>   File "/usr/local/lib/python3.6/dist-packages/bigchaindb/lib.py", line 90, in post_transaction
>     return requests.post(self.endpoint, json=payload)
>   File "/usr/local/lib/python3.6/dist-packages/requests/api.py", line 116, in post
>     return request('post', url, data=data, json=json, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/requests/api.py", line 60, in request
>     return session.request(method=method, url=url, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/requests/sessions.py", line 533, in request
>     resp = self.send(prep, **send_kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/requests/sessions.py", line 646, in send
>     r = adapter.send(request, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/requests/adapters.py", line 516, in send
>     raise ConnectionError(e, request=request)
> requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=26657): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f1122512390>: Failed to establish a new connection: [Errno 111] Connection refused',))
> [2019-08-25 10:03:41] [ERROR] (bigchaindb.web.server) Exception on /api/v1/transactions [POST] (bigchaindb_webapi - pid: 1419)
> Traceback (most recent call last):
>   File "/usr/lib/python3/dist-packages/urllib3/connection.py", line 141, in _new_conn
>     (self.host, self.port), self.timeout, **extra_kw)
>   File "/usr/lib/python3/dist-packages/urllib3/util/connection.py", line 83, in create_connection
>     raise err
>   File "/usr/lib/python3/dist-packages/urllib3/util/connection.py", line 73, in create_connection
>     sock.connect(sa)
> ConnectionRefusedError: [Errno 111] Connection refused
> 
> During handling of the above exception, another exception occurred:
> 
> Traceback (most recent call last):
>   File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 601, in urlopen
>     chunked=chunked)
>   File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 357, in _make_request
>     conn.request(method, url, **httplib_request_kw)
>   File "/usr/lib/python3.6/http/client.py", line 1239, in request
>     self._send_request(method, url, body, headers, encode_chunked)
>   File "/usr/lib/python3.6/http/client.py", line 1285, in _send_request
>     self.endheaders(body, encode_chunked=encode_chunked)
>   File "/usr/lib/python3.6/http/client.py", line 1234, in endheaders
>     self._send_output(message_body, encode_chunked=encode_chunked)
>   File "/usr/lib/python3.6/http/client.py", line 1026, in _send_output
>     self.send(msg)
>   File "/usr/lib/python3.6/http/client.py", line 964, in send
>     self.connect()
>   File "/usr/lib/python3/dist-packages/urllib3/connection.py", line 166, in connect
>     conn = self._new_conn()
>   File "/usr/lib/python3/dist-packages/urllib3/connection.py", line 150, in _new_conn
>     self, "Failed to establish a new connection: %s" % e)
> urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f1122512390>: Failed to establish a new connection: [Errno 111] Connection refused
> 
> During handling of the above exception, another exception occurred:
> 
> Traceback (most recent call last):
>   File "/usr/local/lib/python3.6/dist-packages/requests/adapters.py", line 449, in send
>     timeout=timeout
>   File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 639, in urlopen
>     _stacktrace=sys.exc_info()[2])
>   File "/usr/lib/python3/dist-packages/urllib3/util/retry.py", line 398, in increment
>     raise MaxRetryError(_pool, url, error or ResponseError(cause))
> urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=26657): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f1122512390>: Failed to establish a new connection: [Errno 111] Connection refused',))
> 
> During handling of the above exception, another exception occurred:
> 
> Traceback (most recent call last):
>   File "/usr/local/lib/python3.6/dist-packages/flask/app.py", line 1949, in full_dispatch_request
>     rv = self.dispatch_request()
>   File "/usr/local/lib/python3.6/dist-packages/flask/app.py", line 1935, in dispatch_request
>     return self.view_functions[rule.endpoint](**req.view_args)
>   File "/usr/local/lib/python3.6/dist-packages/flask_restful/__init__.py", line 458, in wrapper
>     resp = resource(*args, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/flask/views.py", line 89, in view
>     return self.dispatch_request(*args, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/flask_restful/__init__.py", line 573, in dispatch_request
>     resp = meth(*args, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/bigchaindb/web/views/transactions.py", line 98, in post
>     status_code, message = bigchain.write_transaction(tx_obj, mode)
>   File "/usr/local/lib/python3.6/dist-packages/bigchaindb/lib.py", line 95, in write_transaction
>     response = self.post_transaction(transaction, mode)
>   File "/usr/local/lib/python3.6/dist-packages/bigchaindb/lib.py", line 90, in post_transaction
>     return requests.post(self.endpoint, json=payload)
>   File "/usr/local/lib/python3.6/dist-packages/requests/api.py", line 116, in post
>     return request('post', url, data=data, json=json, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/requests/api.py", line 60, in request
>     return session.request(method=method, url=url, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/requests/sessions.py", line 533, in request
>     resp = self.send(prep, **send_kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/requests/sessions.py", line 646, in send
>     r = adapter.send(request, **kwargs)
>   File "/usr/local/lib/python3.6/dist-packages/requests/adapters.py", line 516, in send
>     raise ConnectionError(e, request=request)
> requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=26657): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f1122512390>: Failed to establish a new connection: [Errno 111] Connection refused',))
> 
And here is the code to post the transaction
```
const postTransaction = async payload => {
  const Initial = new driver.Ed25519Keypair()
  try {
    const tx = driver.Transaction.makeCreateTransaction(
      payload,
      null,
      [
        driver.Transaction.makeOutput(
          driver.Transaction.makeEd25519Condition(Initial.publicKey)
        )
      ],
      publicKey
    )
    const txSigned = driver.Transaction.signTransaction(tx, Initial.privateKey)
    console.log(txSigned)
    const id = await conn.postTransactionCommit(txSigned)
    return id
  } catch (e) {
    console.log(e)
  }
}
```