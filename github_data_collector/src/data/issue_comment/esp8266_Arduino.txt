Compatibility to AVR Arduino is not premium in this case, as the very much out of spec defaults for the servo PWM timings cause my servos to RUN HOT and PERMANENTLY FAIL.
The defaults can be overridden, but they must be within public specification for unsuspecting initial use!

Still under investigation is the recently patched maximum servo count limit, 12 seems, from current experience with running fan controls and servos, too high - besides, where can one connect 12 servos to an ESP8266 default GPIOs? AFAIK the servo lib does not apply to I2C servo extension boards.

### Basic Infos

- [X] This issue complies with the [issue POLICY doc](https://github.com/esp8266/Arduino/blob/master/POLICY.md).
- [X] I have read the documentation at [readthedocs](https://arduino-esp8266.readthedocs.io/en/latest) and the issue is not addressed there.
- [ ] I have tested that the issue is present in current master branch (aka latest git).
- [X] I have searched the issue tracker for a similar issue.
- [ ] If there is a stack dump, I have decoded it.
- [X] I have filled out all fields below.

#### Platform

- Hardware:				ESP-8266
- Core Version:			2.6.1
- Development Env:		N/A
- Operating System:		N/A

### Settings in IDE

- N/A

### Problem Description

I was sent here from the Tasmoda wiki.
I am still investigating, but figured I would post while I worked on it.

I am using Tasmota-lite (v8.1) on a Gosund WP3. When I clear settings (RESET 5), the device gets a DHCP address, and seems to follow the server lease time (24h in my case). However, after the first lease renewal approx 12h later, it requests a lease approx every 5 minutes. Rebooting does not go back to the server config lease time, it immediately starts with the 5 minute renewals...

One weird thing may be that it send DHCPREQUEST and immediately a DHCPDISCOVER Then the handshake proceeds. It looks like it might be requesting a lease renewal (without going through the whole DORA process) but it doesnt wait long enough for the server to answer the initial request. The server ACKs the request, but the device has already sent the DISCOVER.

I have verified with wireshark that the lease time being sent to the device is correct. The device just seems to ignore it after the first renewal...

I am using dnsmasq (v2.80) on RaspberryPi running arch (Linux dns 4.19.76-1-ARCH #1 SMP PREEMPT Tue Oct 8 03:34:09 UTC 2019 armv7l GNU/Linux). My Tasmoda devices are the only one exhibiting this behavior. All over devices wait the standard "one half of lease time" to start requesting again. I have verified with wireshark that the devices are being given the proper initial lease time.
I suspect that not a lot of people are checking their DHCP logs (probably on a networking device) so not sure how many even know this is happening...


### [MCVE](https://stackoverflow.com/help/mcve) Sketch

```cpp

#include <Arduino.h>

void setup() {

}

void loop() {

}

```

### Debug Messages

```
Debug messages go here
```



### Basic Infos

- [X] This issue complies with the [issue POLICY doc](https://github.com/esp8266/Arduino/blob/master/POLICY.md).
- [X] I have read the documentation at [readthedocs](https://arduino-esp8266.readthedocs.io/en/latest) and the issue is not addressed there.
- [X] I have tested that the issue is present in current master branch (aka latest git).
- [X] I have searched the issue tracker for a similar issue.
- [X] If there is a stack dump, I have decoded it.
- [X] I have filled out all fields below.

#### Platform

- Hardware:			[ESP-12]
- Core Version:			[Core:2_6_3 SDK:2.2.2-dev(38a443e)]  (same issue with 2.6.2)
- Development Env:		[Platformio]
- Operating System:		[Windows]

### Settings in IDE

- Module:  			[Generic ESP8266 Module]
- Flash Mode:			[qio]
- Flash Size: 		        [4MB]
- lwip Variant:                   [v2 Lower Memory]
- Reset Method:		[nodemcu]
- Flash Frequency:	        [40Mhz]
- CPU Frequency:		[160MHz]
- Upload Using:		[SERIAL]
- Upload Speed:               [115200] (serial upload only)

### Problem Description

On some fielded units, I am getting an exception 9 after WiFi disconnect.  On a few units, it happens very frequently.  On most units, the same code is not taking an exception at all and my application connects/disconnects every 15 minutes.

This is a long standing defect.  The exception address in the current build (using core 2.6.3) is 0xx40207D00, but it looks like the same defect has been happening using 2.5.2 and earlier.  The exception address moves around of course, but always decodes to somewhere in ESP8266WiFiGeneric.cpp, and usually to code related to WiFi disconnect/shutdown (which is what is happening when the exception takes place).

Does anyone know what excvaddr means?  It has similar values across all of the exceptions in different Core versions: (0x02070231)

The stack trace is short and does not contain anything useful.  Consider the following stack trace shown in the debug output below.  It decodes as follows:

$ ./esp_addr2line 40207D00
C:\Users\david\.platformio\packages\framework-arduinoespressif8266@2.20602.191128\libraries\ESP8266WiFi\src/ESP8266WiFiGeneric.cpp:727

Which is in ```ESP8266WiFiGenericClass::shutdown (uint32 sleepUs, WiFiState* state)```
exception address is this line: ```state->crc = shutdownCRC(state);```

The message "Disconnected from AP\r\n" (see code below) is the last thing printed before the exception (i.e. my disconnect callback is being called).  

The rest of the exception stack trace is short and not useful (nothing decodes to useful text-space addresses).

### [MCVE](https://stackoverflow.com/help/mcve) Sketch

```cpp
void ICACHE_RAM_ATTR onSTADisconnected(WiFiEventStationModeDisconnected event_info) {
	if (connect_time) {
		// save disconnect time and reason
		disconnect_time = rtc_get();
		disconnect_reason = event_info.reason;
		disconnect_ssid = event_info.ssid;
		connect_time = 0;
		if (config_getDebug() & config_debug_wifi) {
			Serial.printf("Disconnected from AP\r\n");
		}
	}
}

// Registration done elsewhere, before WiFi.begin() is called
WiFi.onStationModeDisconnected(onSTADisconnected);

// Code that shuts down WiFi:
		wifi_station_dhcpc_stop();
		WiFi.mode(WIFI_OFF);

```
any thoughts would be much appreciated!


### Debug Messages

```

Disconnected from AP       <<<<<<<< output from my disconnect handler
--
Fatal exception 9(LoadStoreAlignmentCause):
epc1=0x40207d00, epc2=0x00000000, epc3=0x00000000, excvaddr=0x02070231, depc=0x00000000
 
Exception (9):
epc1=0x40207d00 epc2=0x00000000 epc3=0x00000000 excvaddr=0x02070231 depc=0x00000000
 
>>>stack>>>
 
ctx: sys
sp: 3ffffdc0 end: 3fffffb0 offset: 01a0
3fffff60:  401021c5 00000000 00000002 3ffefcd0
3fffff70:  3fffdc10 00000000 3fff3014 40261888
3fffff80:  40000f49 3fffdab0 3fffdab0 40000f49
3fffff90:  40000e19 40001878 00000002 3fffffb0
3fffffa0:  3fffff10 aa55aa55 000000c4 40105bd1
<<<stack<<<


```



signing.py:
Adding ", shell=True" to line 25 seams to correct an issue with signing a binary on windows. Someone would need to test whether that change brakes it on linux or other OSs.
Illustrates the use of SSE using ESP8266WebServer

*edit from maintainer:* closes #7008
A Hardware WDT Reset stack dump tool by Michael Hightower

This Sketch demonstrates the use of a tool that prints a stack dump after a Hardware WDT reset. After a Hardware Watchdog Timer reset, the module `hwdt_app_entry.cpp` writes a stack dump to the serial interface.

The goal was to have a file (`hwdt_app_entry.cpp`) that could be dropped into a sketch directory, then open the sketch project, build, upload, and debug.

Note, at the restart, the UART speed is set by the ROM to 115200 bps. This is the speed your serial device needs to be for displaying the dump. 

See `hwdt_app_entry.cpp` for more options and details.
This is a request for support of HTML5 Server Sent Events aka [Event Source](https://html.spec.whatwg.org/multipage/server-sent-events.html).
It allows e.g. to implement an event bus over HTML.

The required changes to the ESP8266WebServer library are absolutely minimal: zero impact on existing code and increase in code size/memory footprint of just few bytes (basically sizeof bool).

Essentially, the variable _bool keepCurrentClient_ which is currently hardcoded to _false_, becomes a protected class variable in the ESP8266WebServer class that can be modified via a new function called _keepCurrentClient(bool)_.  

To enable Server Sent Events/event subscription, it requires two web server instances, one being changed to keep the client socket/session (an event listener) open until disconnected. 
```	
ESP8266WebServer _server(port);
ESP8266WebServer _SSEserver(port + 1);
_server.begin();
_SSEserver.keepCurrentClient(true);
_SSEserver.begin();
```
Everything else can implemented in user code (event subscription, event bus keepalive messages, event payload etc.).
I have this currently working on a clean fork from master branch with just this one change.
Happy to post a PR (it's ready to post), if this is a reasonable request.
I can also contribute a working example, I suppose in the ESP8266WebServer examples section.

Thanks once again for this brilliant library and for taking the time to consider this request,
Ewald

### Basic Infos

- [ ] This issue complies with the [issue POLICY doc](https://github.com/esp8266/Arduino/blob/master/POLICY.md).
- [X] I have read the documentation at [readthedocs](https://arduino-esp8266.readthedocs.io/en/latest) and the issue is not addressed there.
- [X] I have tested that the issue is present in current master branch (aka latest git).
- [X] I have searched the issue tracker for a similar issue.
- [ ] If there is a stack dump, I have decoded it.
- [ ] I have filled out all fields below.

#### Platform

- Hardware:					[ESP-12]
- Core Version:			[latest git hash]
- Development Env:		[Arduino IDE]
- Operating System:		[Windows]

### Settings in IDE

- Module:  			[Wemos D1 mini r2]
- Flash Mode:			[qio]
- Flash Size: 		        [4MB]
- lwip Variant:                   [v2 Lower Memory]
- Reset Method:		[ck]
- Flash Frequency:	        [40Mhz]
- CPU Frequency:		[80Mhz]
- Upload Using:		[SERIAL]
- Upload Speed:               [115200]


### Problem Description
I have problem with WiFi UDP program with UDP Example. In the beginning Wemos is receiving UDP data. But after some minutes ( > 5 minutes ), Wemos is not receiving UDP data.
Any solution?

Thank You.

### Code
```
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>

const char* ssid = "********";
const char* password = "********";

WiFiUDP Udp;
unsigned int localUdpPort = 4210;  // local port to listen on
char incomingPacket[255];  // buffer for incoming packets
char  replyPacket[] = "Hi there! Got the message :-)";  // a reply string to send back


void setup()
{
  Serial.begin(115200);
  Serial.println();

  Serial.printf("Connecting to %s ", ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" connected");

  Udp.begin(localUdpPort);
  Serial.printf("Now listening at IP %s, UDP port %d\n", WiFi.localIP().toString().c_str(), localUdpPort);
}


void loop()
{
  int packetSize = Udp.parsePacket();
  if (packetSize)
  {
    // receive incoming UDP packets
    Serial.printf("Received %d bytes from %s, port %d\n", packetSize, Udp.remoteIP().toString().c_str(), Udp.remotePort());
    int len = Udp.read(incomingPacket, 255);
    if (len > 0)
    {
      incomingPacket[len] = 0;
    }
    Serial.printf("UDP packet contents: %s\n", incomingPacket);

    // send back a reply, to the IP address and port we got the packet from
    Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
    Udp.write(replyPacket);
    Udp.endPacket();
  }
}
```


#### Platform

- Hardware:				Wemos D1 mini
- Core Version:			2.6.3 (3d128e5c)

#### Problem Description

The [docs for WiFi.status()](https://arduino-esp8266.readthedocs.io/en/2.6.3/esp8266wifi/station-class.html#status) state

```
Function returns one of the following connection statuses:

WL_CONNECTED after successful connection is established
WL_NO_SSID_AVAIL in case configured SSID cannot be reached
WL_CONNECT_FAILED if password is incorrect
WL_IDLE_STATUS when Wi-Fi is in process of changing between statuses
WL_DISCONNECTED if module is not configured in station mode
```

The [code](https://github.com/esp8266/Arduino/blob/677007f481678c096aef9d86dd38ad9ef516bfee/libraries/ESP8266WiFi/src/ESP8266WiFiSTA.cpp#L633) just does a mapping from the return values of `wifi_station_get_connect_status()` to Arduino constants:

```
wl_status_t ESP8266WiFiSTAClass::status() {
    station_status_t status = wifi_station_get_connect_status();

    switch(status) {
        case STATION_GOT_IP:
            return WL_CONNECTED;
        case STATION_NO_AP_FOUND:
            return WL_NO_SSID_AVAIL;
        case STATION_CONNECT_FAIL:
        case STATION_WRONG_PASSWORD:
            return WL_CONNECT_FAILED;
        case STATION_IDLE:
            return WL_IDLE_STATUS;
        default:
            return WL_DISCONNECTED;
    }
}
```

IMHO the documentation and the code have the following issues:

1. `WL_NO_SSID_AVAIL` and `WL_CONNECT_FAILED`

From what I experienced, both states only happen with `setAutoReconnect(true)`. That's mostly an issue with the underlying esp8266 sdk, but I think the docs should at least state the fact. Also, looking at the code suggests that a wrong password isn't the only possible cause though I don't know under which circumstances `wifi_station_get_connect_status()` would return `STATION_CONNECT_FAIL`.

2. `WL_IDLE_STATUS`and `WL_DISCONNECTED`

I think the two status values are mixed up. The implementation should probably reflect the semantics of the [original Arduino library](https://www.arduino.cc/en/Reference/WiFiStatus), quoted below:

- `WL_IDLE_STATUS`: it is a temporary status assigned when `WiFi.begin()` is called and remains active until the number of attempts expires (resulting in `WL_CONNECT_FAILED`) or a connection is established (resulting in `WL_CONNECTED`);
- `WL_DISCONNECTED`: assigned when disconnected from a network;

But as it is implemented now, it's excatly the other way round: `WL_IDLE_STATUS` is reported before and after `WiFi.begin()` resp. `WiFi.disconnect()` are called and `WL_DISCONNECTED` in the time between the two calls before a connection has been made:

#### Demo sketch

Output:

```
Status before WiFi.begin(): WL_IDLE_STATUS
Status while connecting: WL_DISCONNECTED
Status after connecting: WL_CONNECTED
Status after WiFi.disconnect(): WL_IDLE_STATUS
```

```
#include <ESP8266WiFi.h>

#define SSID "xxx"
#define PW "xxx"

const char *wiFiStatus() {
  switch (WiFi.status()) {
    case WL_IDLE_STATUS:
      return "WL_IDLE_STATUS";
    case WL_CONNECTED:
      return "WL_CONNECTED";
    case WL_DISCONNECTED:
      return "WL_DISCONNECTED";
    default:
      return "Unhandled value";
  }
}

void setup() {
  Serial.begin(115200);

  WiFi.persistent(false);
  WiFi.setAutoConnect(false);
  WiFi.disconnect();

  Serial.printf("Status before WiFi.begin(): %s\n", wiFiStatus());

  WiFi.begin(SSID, PW);

  while (WiFi.status() != WL_CONNECTED) {
    Serial.printf("Status while connecting: %s\n", wiFiStatus());
    delay(5000);
  }

  Serial.printf("Status after connecting: %s\n", wiFiStatus());

  WiFi.disconnect();

  Serial.printf("Status after WiFi.disconnect(): %s\n", wiFiStatus());
}

void loop() {}
```

I'd be happy to prepare a PR, but I'd like to discuss the prefered solution first:

1. The obvious fix would be to swap the two symbols in the switch statement, but that would break backwards compatibilty with programs that rely on the current behaviour.

2. At very least the docs should be updated: I have the impression that for `WL_IDLE_STATUS` and `WL_DISCONNECTED` they try to represent what the implementation would be if it matched the definition of the original library, so if 1. isn't an option, then the annotations for these two values should be swapped.

3. The longer term goal should imho be to fix WiFi.status() to better represent the current state of the connection. That would include making `WL_NO_SSID_AVAIL` and `WL_CONNECT_FAILED` work with `setAutoReconnect(false)` and maybe add the currently unsupported state `WL_CONNECTION_LOST`. i won't promise anything :), but would such a PR be considered given that it would break backwards compatibility even more?