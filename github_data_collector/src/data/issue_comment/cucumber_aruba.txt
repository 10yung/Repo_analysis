## Summary

Event bus code seems complex. Let's make it as simple as possible.

## Context & Motivation

Unneeded complexity should be removed. The complexity of the event bus was just something I noticed at some point.
## Summary

Aruba exposes a large set of API methods into the test environment. It would be cleaner to access these through a dedicated object.

## Expected Behavior

Something like:

```ruby
  it "has some behavior" do
    aruba.write_file("foo.txt")
    aruba.run_command_and_stop("bar foo.txt")
    # ...
  end
```

## Current Behavior

```ruby
  it "has some behavior" do
    write_file("foo.txt")
    run_command_and_stop("bar foo.txt")
    # ...
  end
```

## Possible Solution

This needs to be changed in several steps:

1. Create object that provides these methods.
2. Implement currently exposed methods in terms of this object.
3. Deprecate direct use of exposed methods.
4. Remove exposed methods.

## Context & Motivation

Aruba's API is massive and testing it clearly is difficult because the methods are exposed to Aruba's specs as well. Also, exposing these through a real object makes it clearer for end users to see where the methods they call come from.
##  Summary

Improve Rubocop LineLength (And a few other minor styles)

## Details

Rebase and fix up an old PR fixing up some LineLength issues

## How Has This Been Tested?

CI

## Screenshots (if appropriate):

## Types of changes

<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] Refactoring (cleanup of codebase without changing any existing functionality)
- [ ] Update documentation

## Checklist:

NB: I've not updated the TODO as I want to standardise the TODO first by doing some additional cleanups and removing some patches around certain methods so we have a single source of truth

## Summary

Aruba warns when its API methods are called with an absolute path, but this warning is not very informative.

## Expected Behavior

When the user calls an Aruba API method with an absolute path, Aruba reports the file and line of the user code or cucumber step, so the user can fix it.

## Current Behavior

Aruba complains about `expand_path` being called, even if that happens through several steps inside Aruba's implementation.

## Steps to Reproduce (for bugs)

See https://github.com/colszowka/simplecov/blob/master/features/config_coverage_dir.feature#L22-L33 for an example of a scenario using an absolute file name.

## Context & Motivation

See https://github.com/cucumber/aruba/pull/687#issuecomment-570193558.
## Summary

Aruba's tests take too long. Especially on JRuby, but on MRI they're still take quite long. Let's make them faster.

## Possible Solutions

* Test edge cases as unit tests instead of using an end-to-end test. This will probably mean moving them from cucumber to rspec.
* Figure out a way to reduce indirection. Current feature tests often do a nested cucumber run, which itself does a nested run of some Ruby program.

## Steps to Reproduce (for bugs)

Look at [a typical Travis build](https://travis-ci.org/cucumber/aruba/builds/631370114).

## Context & Motivation

Development is slow when you need to wait that long for a build to finish.
## Summary

The current Dockerfile is outdated and the current support for development with Docker is too complex.

## Expected Behavior

* The Dockerfile is up-to-date and provides a Ruby version that is supported by Aruba
* The Dockerfile is easy to update for Aruba developers even if they do not use Docker every day
* The Dockerfile and docker-compose.yml are well documented and do not contain any mystery parts
* Developing with docker uses standard docker command line tools
* The Dockerfile uses an existing image provided by the Ruby community

## Current Behavior

* The Dockerfile is long and complex
* The Dockerfile builds its own Ruby
* The Dockerfile provides Ruby 2.3
* The Rakefile provides a complicated set of tasks to run tests with docker
* There is a docker-compose file, but it is only used to provide settings for the rake task, which thus duplicates docker-compose functionality

## Possible Solution

* Clean up Dockerfile, basing it on the `ruby:2.4` base image
* Provide clear instructions on how to use docker and/or docker-compose directly
* Remove docker-related rake tasks

## Context & Motivation

We're dropping support for Ruby 2.3 and I just noticed it is what is provided by the current Dockerfile.
<!-- These sections are meant as guidance for you. If something doesn't fit, you can just skip it. -->

## Summary

Stuff that should go into 1.0.0.

## Details

<!--- Describe your changes in detail -->

## Motivation and Context

<!--- Why is this change required? What problem does it solve? -->
<!--- If it fixes an open issue, please link to the issue here. -->

## How Has This Been Tested?

<!--- Please add tests for changes to the code, otherwise we probably won't merge it -->

<!--- Please describe in detail how you tested your changes. -->
<!--- Include details of your testing environment, tests ran to see how -->
<!--- your change affects other areas of the code, etc. -->

## Screenshots (if appropriate):

## Types of changes

<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Refactoring (cleanup of codebase without changing any existing functionality)
- [ ] Update documentation

## Checklist:

<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [ ] I've added tests for my code
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.

## Summary

Aruba console uses its own history file. I don't think it should.

## Expected Behavior

History for aruba console should be appended to the general IRB history.

## Current Behavior

Aruba console stores its history in `~/.aruba_history`.

## Possible Solution

Remove the code setting the relevant IRB options, as well as Aruba's configuration option.

## Context & Motivation

 Having this history separate makes it harder to re-use existing history from general IRB use. Other special-purpose consoles (e.g., `rails console`) also do not keep a separate history.
## Summary

When activating the blanket announcer with `@announce`, the `command_content` announcer announces the full binary file if the command happens to be a binary file. This is bad and shouldn't happen.

## Expected Behavior

When annotating a scenario with `@announce`, announced output should be useful for the developer.

## Current Behavior

When annotating a scenario with `@announce`, all announcers are activated. The `command_content` announcer is one of them. If the command is a binary (e.g., `ruby`), the full binary is output, filling the terminal with a large amount of garbage.


## Possible Solutions

1. Have the `command_content` not output binaries.
2. Do not include `command_content` in the announcers activated by `@announce`.

I think 1. is the best option, since it also removes the need for warnings about binaries in the documentation about the `command_content` announcer.

## Steps to Reproduce (for bugs)

1. Create a scenario annotated with `@announce`
2. Have the scenario run `ruby --version`
3. Run the scenario

## Context & Motivation

This came up while examining https://github.com/cucumber/aruba/issues/563, as mentioned in https://github.com/cucumber/aruba/pull/649#issuecomment-516865997.

## Your Environment

<!--- If you're reporting a bug, include as many relevant details about the environment you experienced the bug in -->
* Version used: master, maybe also still
* Operating System and version: Linux
## Summary

Using `append to file` cuke, shouldn't cause
```
syntax error, unexpected end-of-input, expecting keyword_end (SyntaxError)
```

## Expected Behavior

It wouldn't cause the error above

## Current Behavior

It does cause the error above. Code similar to this can be produced

```
def path_to(page_name)
    self.send(page_name.split(' ').push('path').join('_').to_sym)
  end

  Then('I should see {string}') do |text|
    expect(page).to have_content(text)
  endWhen('I go to the session establish page') do # This is the problematic line
  visit path_to('session establish')
end
```

## Possible Solution

Check for newline characters. If one isn't found, add one.
Adding an extra newline even in the worst circumstance, is just a bad style, but not adding one can occassionally cause issues concatenating `end` and `Given` or `When` for example.

## Steps to Reproduce (for bugs)

1. Use cuke `write to file`
2. Use cuke `append to file` in the same scenario with an identical path
3.
4.

## Context & Motivation

This is present in both scenario and background -> scenario contexts.

I've tagged this as a bug because it does feel something that shouldn't happen
