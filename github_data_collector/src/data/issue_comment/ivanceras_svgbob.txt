Can I revert an svg file(converted by svgbob) back to the original ascii text?

I'd like to create something like svgbob to generate tikz/pgf output suitable for inclusion in LaTeX documents, but haven't learned rust yet.  Does svgbob have an internal representation that then gets rendered as SVG such that all I'd need to replace would be the renderer?  Or is the input text parsed directly to SVG?
Everywhere except the drawing lines and characters.
Normally there is no gap between adjacent + and *, eg:

    --+*

but if the two are vertically aligned, there is a gap: 

      *----.
    --+ ab |
      | ab |
    --*----'
      +

also, when simply vertically align the two, * is treated as a character:

    |
    +
    *

Normally one CJK character equal two english character width, the following will be closed.

    +----+
    | 一 |
    +----+

If the line contains escape qutoe, the CJK character seems need 3 english character spaces to get
the shape closed.

    +--------+
    |"""一"""|
    +--------+

I am using svgbob 0.3.2.


Sometime a char is treated as diagram char when it was intended to be word char.

Example 1:
```
co-edit
single-person
```
Is rendered as:
![1](https://user-images.githubusercontent.com/6007292/57502278-9bfff700-731d-11e9-80e4-68a35f106f98.png)
The hyphen after `o` is treated as a horizontal line.

Example 2:
```
(some remark)

some text
(some remark)
some text
```
Is rendered as:
![2](https://user-images.githubusercontent.com/6007292/57502331-d79ac100-731d-11e9-8e3c-33385dc42459.png)
The open bracket between lines is rendered as a diagram which the close bracket is still rendered as text.
# Context

I'm building my blog on netlify. Netlify have no support of Rust yet.

Blog example: https://blog.tycoach.me/breaking-the-circular-deps-1

Compared the ugly looking diagram to my local version: 

![image](https://user-images.githubusercontent.com/13785185/54777153-f16b3200-4c11-11e9-81a8-3ee35f7fa8eb.png)

![image](https://user-images.githubusercontent.com/13785185/54776126-bd8f0d00-4c0f-11e9-935d-3a8638700563.png)

For sure, I will try to persuade netlify to support rust so i can cargo install, or at least let me use my own docker image for build. Else i can migrate from netlify to something else.
(As an hack i just extracted the svg from the diagram: https://github.com/tychota/blog/commit/7b40f1ccecf38d11f7493e3728f5d36f56fcd7da)

That being said, increasing the reach by supporting Node env seems an ok concern for me. 
If not, please close the issue.

## Ideas

### Solution 1: svgbob on npm as childprocess

- i can create a module that package binary with target `x86_64-unknown-linux-musl` and launch child process

Question:
- are you interesting of supporting it once created (added in the readme)
- what about the licence ? can I redistribute binary ?

### Solution 2: svgbob on npm as webassembly 

Given rust awesome of webassembly, maybe it is possible to build svgbob as webassembly

Question:
- have someone tried it
- if I try, can this become official ?  that will allow client side parsing of markdown with svgbob and thus increase adoption (like mermaid, which is build in gitlab markdown)
Please add release tags for your releases in the repository. It is not possible to package this application without proper release tags.
The shapes are all cramped together in one big path, and it is not possible for further styling.
This is requirement for issue #11 
Raising this out of [this thread][1] to not digress too much.

Should svgbob allow the ability to style nodes? It would be nice to be able to do it so that diagrams can be represented in text and still support colour. The ascii version of the diagram is not very readable with styling information included in each node. @ivanceras gave an example of using single letters to represent colour, but I foresee potential use cases for additional styling.

I've copied a bit of the post and edited it to see what it may look like:

```
 .---------.            .-----------.
( Alice {a} )  ---->   / Bob {b,c} /
 `---------'          '-----------'

 .---------.            .----------.
( Apple {a} )  ---->   / Ball {b} /
 `---------'          '----------'

# Legend:

a: { color: red }
b: { color: blue }
c: { opacity: 0.5 }
```

Also, what about people wanting to style lines? Maybe we leave that as a separate topic.

[1]: https://users.rust-lang.org/t/i-hacked-through-mdbook-and-pulldown-cmark-to-add-funky-features-for-writing-markdown-documents/10178