There are two warnings when compiling with GCC 7.4.1 or clang 5.0.1.

   1. warning: explicit by-copy capture of ‘this’ redundant with by-copy capture default
   2. warning: typedef ... locally defined but not used [-Wunused-local-typedefs]

This change removes [2] and it compacts the lambda capture clause in [1].

Issue this pull request references: #

Changes proposed in this pull request

 -
 -
 -
 

 * Compiler Used:
MSVC 2015
 * Operating System:
Windows 8
 * Architecture (ARM/x86/32bit/64bit/etc): 
X64 

### Expected Behavior 
I need to use couple of scripts in my application which have to use some global c++ functions to have access to c++ vars or other internal application things.  Because of that i've create singletone "Script manager" which maps global functions to chai in constructor. But then i'm using another ChaiScript instance it doesnot see the fucntion registered in "Script manager" instance of ChaiScript

### Actual Behavior 
Two instances of ChaiScript can't share functions.

### Minimal Example to Reproduce Behavior
                        ChaiScript chai;
			using PlainLog = void(*)(const std::string &);
			chai.add(fun(PlainLog(&my_stdout)), "log");
			chai.eval(R"(log("Hello World"))");
			ChaiScript anotherchai;
			anotherchai.eval(R"(log("Hello World from another script"))"); //throws exception
		


Hi,

Sorry to ask this question, but I genuinely want to know: Why would I use ChaiScript over other engines, such as V8?

Edit: Besides the fact that it's like impossible to get, build, and use V8 in a basic project...
```
mkdir tmp
cmake ..
make
```

results in `fatal error: string_view` missing at multiple places, if you build with only C++14 support.

> ChaiScript requires a C++14 compiler to build with support for variadic templates. It has been tested with gcc 4.9 and clang 3.6 (with libcxx). For more information see the build dashboard.

So the requirements should actually mention, that you need C++17 support.


Issue this pull request references: #481

Changes proposed in this pull request:

 - implemented unit test which is validating whether a lambda from Chaiscript could return a boolean value without throwing any exception,
 - the same test case is checking also whether lambda with boolean return value
could be called peacefully from Chaiscript.
 
After pull request #503 will be resolved, this test will pass; for now it's producing 2 failed checks:

```
/home/draghan/programming/ChaiScript/my/ChaiScript/cmake-build-debug/compiled_tests

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compiled_tests is a Catch v2.2.2 host application.
Run with -? for options

-------------------------------------------------------------------------------
Lambdas can return boolean
-------------------------------------------------------------------------------
/home/draghan/programming/ChaiScript/my/ChaiScript/unittests/compiled_tests.cpp:53
...............................................................................

/home/draghan/programming/ChaiScript/my/ChaiScript/unittests/compiled_tests.cpp:63: FAILED:
  CHECK_NOTHROW( result = chai_function() )
due to unexpected exception with message:
  bad any cast

/home/draghan/programming/ChaiScript/my/ChaiScript/unittests/compiled_tests.cpp:65: FAILED:
  CHECK( result == true )
with expansion:
  false == true

Hello World
Object_Copy_Count_Test()
Object_Copy_Count_Test(Object_Copy_Count_Test &&)
~Object_Copy_Count_Test()
~Object_Copy_Count_Test()
10
10
Test
15
15
making vector
adding config item
returning vector
St6vectorI25Returned_Converted_ConfigSaIS0_EE
Info: 1 0x1bfc240
num_iterations 5
something_else 10
a_string string
a_function 3
1.3
found at 1, 2
A
ok
5
===============================================================================
test cases:  51 |  50 passed | 1 failed
assertions: 190 | 188 passed | 2 failed


Process finished with exit code 2
```
When a script function returning a boolean is called from C++ code, ChaiScript tries to initialize a `Boxed_Number` with the returned value. A *bad any cast* exception is then raised.

The proposed modification checks if the return value is a (possibly *cv-ref* qualified) `bool`, before instantiating the `Boxed_Number` (leading to a `boxed_cast` instead).

I would like to start a discussion on how fibers could be added to ChaiScript if that is possible.

My biggest pain point as a user using it for a game is that ChaiScript is missing fibers/coroutines. Particularly, I am interested in stackful coroutines (such as those found in Wren language and Lua).

I would be happy to know about the changes needed, if any, and how difficult it would be to add this feature upstream in the future, whether having a dependency (optional) in Boost.coroutine2 or fiber is acceptable, etc.


 

### Expected Behavior 

```
var obj = from_json(myJsonStr)
obj.myField // <--- Should work
```

See here for more context: http://discourse.chaiscript.com/t/from-json-to-json/255

### Actual Behavior 

```
var obj = from_json(myJsonStr)
obj.myField // <--- Does not work
```

### Implementation

This implementation makes native field access work:

```
class JsonObject {
    var contents

    def JsonObject(string jsonStr) {
        this.contents = from_json(jsonStr)
    }

    def JsonObject(Map contents) {
        this.contents = contents
    }

    def method_missing(string name, Vector v)  {
        var field := this.contents[name]
        if (field.type_name() == "Map") {
            return JsonObject(field)
        }
        else {
            return field
        }
    }
}
```

Hi, I'd love to know when new updates are planned and which ones. Especially documentation and tool integration is dearly missing I think.

Do you have a roadmap maybe so we know what to expect? Or have you abandoned the project?
 * Compiler Used: MSVC
 * Operating System: Windows 10
 * Architecture (ARM/x86/32bit/64bit/etc): 64
 * Chaiscript version v6.0.0 (Just realized I didn't have the updated version)

Calling from C++ to Chaiscript (using std::function) is super slow. For example you want to process a 50 element array in Chaiscript but want the C++ code to iterate through it and call your Chaiscript function for each element. 

    ProcessList(fun(Thing)
    {
         // Does something with thing
        return true;   // Continues looping. 
    });

The C++ code might have an array of size 50 and calls that fun(Thing) for each element. This can get super expensive. 

It's faster to just copy the data into an array, pass it to Chaiscript, then process the list in Chaiscript. 
