```javascript
luxon.DateTime
  .local(2016, 10, 30, 3, 59)
  .setZone("Europe/Athens", {keepLocalTime: true})
  .plus({minutes: 1})
  .hour
//=> 4
```

> Daylight saving time 2016 in Greece began at 3:00 AM on
> Sunday, March 27
> and ended at 4:00 AM on
> Sunday, October 30
> All times are in Eastern European Time.

I expected the hour to be 3 -- am I doing something wrong? Thanks for any pointers.

PS: Was porting https://github.com/harrisiirak/cron-parser from `moment-timezone` to `luxon` (and this is is one of the tests that's failing: https://github.com/harrisiirak/cron-parser/blob/master/test/timezone.js#L149)
Hi,

I ran a quick benchmark (hopefully valid) after I noticed my app spending a lot of time in `hasSame`. If I understand it correctly, the only difference between `ts_a[unit] === ts_b[unit]` and `ts_a.hasSame(ts_b, unit)` is behavior with respect to timezones?

```js
> a = luxon.DateTime.local()
DateTime {ts: 1578612479954, _zone: LocalZone, loc: Locale, invalid: null, weekData: null, …}
> a.toISO()
"2020-01-10T00:27:59.954+01:00"
> start = window.performance.now()
> for (let ix = 0; ix < 100000; ix++) {
>   a.day === a.day;
> }
> console.log(window.performance.now() - start)
VM1059:5 2.7500000142026693
undefined
> start = window.performance.now()
> for (let ix = 0; ix < 100000; ix++) {
>   a.hasSame(a, 'day');
> }
> console.log(window.performance.now() - start)
VM1099:5 1911.0750000108965
undefined
```

Is it possible to speed up `hasSame` in the case of equal timezones?
## Description
If doing a calculation on `DateTime` with mixed algebraic signs leads to incorrect results. This is true for example when modifying dates in a way that the target month does not have 30 days or the target year is a leap-year.

## Example
```
// should be 2019-12-09, but is 2019-12-10
DateTime.fromISO('2020-01-08').plus({months: -1, days: 1})
```

## Analysis
Internally, the duration `{months: -1, days: 1}` is shifted to `months, days, milliseconds` and during that it is normalized. During normalization, the algebraic signs are changed and the resulting duration is `{months: 0, days: -29}`. It would be correct if the target month has 30 days, but December has 31 days.

Same issue for leap-years: `{years: -4, days: 1}` is converted to `{years: -3, days: -364}`, should be `days: -365` if the resulting year is a leap year.

## Reproducible example
https://codesandbox.io/s/sleepy-diffie-x761e

## Version
Tested with latest Luxon version (1.21.3)

## Workaround
Add units one by one in the right order: `DateTime.fromISO('2020-01-08').plus({months: -1}).plus({days: 1})`

![luxon_install_manual](https://user-images.githubusercontent.com/11506817/71882594-c4fdb380-315a-11ea-97ef-8ab36eaa0eb4.png)
While doing horizontal scroll in [this page](https://moment.github.io/luxon/docs/manual/install.html) content override with the left section.
This seems to be a bug?

```
const format = {
  weekday: 'long',
  hour: 'numeric',
  minute: '2-digit'
};

return dt.toLocaleString(format);
```

Expected output: **5:21**
Actual output: **05:21**

If `month` or `year` are added to the format object, or if `weekday` is removed, `hour` is correctly formatted as `numeric`.

Example: https://codesandbox.io/s/eager-merkle-ixlr9

On the website it's correctly linking to install.html.  On GitHub's markdown rendering, it yields a 404.
`DateTime.fromISO()` can't parse timezones containing seconds. Note that `DateTime.toISO()` can create such timezone strings; I believe `fromISO()` should be able to reverse `toISO()`.

Here's a brief example:

```
const { DateTime } = require('luxon')

// Toronto was UTC -5:17:32 from 1850-1894
// https://www.timeanddate.com/time/zone/canada/toronto?syear=1850
const dateString = '1891-05-08 00:00'
console.log('Original date string:   ', dateString)
const luxonDate = DateTime.fromFormat(dateString, 'yyyy-LL-dd HH:mm', {
  zone: 'America/Toronto'
})
console.log('ISO date via luxon:     ', luxonDate.toISO())
const fromISO = DateTime.fromISO(luxonDate)
console.log('fromISO(DateTime):      ', fromISO.invalid)
// truncate the timezone 
const fromISOTruncated = DateTime.fromISO(luxonDate.toISO().substring(0, 29))
console.log('fromISO(truncated):     ', fromISOTruncated.toISO())
```

Output:

```
Original date string:    1891-05-08 00:00
ISO date via luxon:      1891-05-08T00:00:00.000-05:17.53333333333336
fromISO(DateTime):       Invalid {
  reason: 'unparsable',
  explanation: `the input "1891-05-08T00:00:00.000-05:17.53333333333336" can't be parsed as ISO 8601`
}
fromISO(truncated):      1891-05-08T00:00:00.000-05:17
```

For what it's worth, `moment-timezone` throws an exception when the timezone has seconds, and miscalculates the ISO date to `1891-05-08T00:17:00-05:00` when they're truncated.
Value of HTML's `<input type="time">` have below patterns:

- `hh:mm`
- `hh:mm:ss`
- `hh:mm:ss.S`
- `hh:mm:ss.SS`
- `hh:mm:ss.SSS`

These are expressed in below regular expressions:

```
/^(\d{2}):(\d{2})(:(\d{2}))?(\.(\d{1,3}))?$/
```

cf. [HTML Standard](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-time-string)

## My idea
**Not tested**

```js
function fromHTMLTime (text) {
  const matched = text.match(/^(\d{2}):(\d{2})(:(\d{2}))?(\.(\d{1,3}))?$/)
  if (!matched) {
    return Duration.invalid('unparsable', `the input "${text}" can't be parsed as HTML time`)
  }
  const getValue = index => matched[index] ? Number(matched[index]) : 0
  const hours = getValue(1)
  const minutes = getValue(2)
  const seconds = getValue(4)
  const milliseconds = getValue(6)
  return Duration.fromObject({
    hours,
    minutes,
    seconds,
    milliseconds
  })
}
```

## Usage example
```html
<input type="time" id="time-form" value="13:30">
```

```js
const timeForm = document.getElementById('time-form')
const value = timeForm.value  // 13:30
const duration = Duration.fromHTMLTime(value)
```
https://github.com/moment/luxon/issues/604
Hi I noticed that in `android/app/build.gradle` there is an option for changing jsc

```diff
/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
 - def jscFlavor = 'org.webkit:android-jsc:+'
 + def jscFlavor = 'org.webkit:android-jsc-intl:+'
```
It seems we don't have to install jsc-android-buildscripts after react native 0.60.x

I changed and built it, it works well so far

It might be helpful if readme file can include this solution.
https://github.com/roadmanfong/luxon/blob/master/docs/install.md#react-native

Thanks