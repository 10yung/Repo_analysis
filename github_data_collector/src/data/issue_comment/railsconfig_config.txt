Since https://github.com/rubyconfig/config/pull/233 we're ignoring .local files in `test` environment, do the same in `cucumber` for consistency.
In production, I call `Settings.reload!`, after saving the new config in `settings.yml`. The settings seem updated only in the current process, but not for all other Passenger processes. I need to `touch tmp/restart.txt` to be sure that the configuration is up to date on all processes.

Others have had this problem? Any idea to solve?
https://hanamirb.org
Version 2.0.0

I'm trying to use the `use_env` setting, but was noticing the override wasn't working. On closer inspection, it appears as if all of my settings are loaded prior to the `Config.setup` block being executed. I verified this by checking it in the initializer:
```ruby
Config.setup do |config|
  config.const_name = 'Settings'
  config.use_env = true
  config.env_prefix = 'SETTINGS'
  config.env_separator = '__'
  config.env_converter = :downcase
  config.env_parse_values = true
end

puts ENV['SETTINGS__FOO']
# => baz

puts Settings.foo
# => bar

Settings.reload!

puts Settings.foo
# => baz
```

Has anyone else experienced this? I don't think it's due to any special setup for my particular app, but will try to spin up an example app to test.
Do you have any plans that `Config.load_files` support Hash or add `Config.load_hashes` ?

https://github.com/railsconfig/config/blob/2.0.0/lib/config/options.rb#L20
https://github.com/railsconfig/config/blob/2.0.0/lib/config.rb#L47

`Config::Options#add_source!` has been already supported Hash, but `Config.load_files` has not been supported Hash.
Fixes #198

I would expect `to_h` and `to_hash` to have the same behaviour, however looks like this gem only overrides the definition of `to_hash` and does not alias that definition with `to_h`.

```
>> Settings.elasticsearch.to_h
=> {:host=>"localhost", :log=>true, :test=>#<Config::Options test=true>}
>> Settings.elasticsearch.to_hash
=> {:host=>"localhost", :log=>true, :test=>{:test=>true}}
```

Happy to file a patch with the alias - just wanted to check this wasn't the desired behaviour.
Merging doesn't seem to work. Can someone investigate? My expectation after executing `merge!` is the `disable_farmer_deassignment` value to be returning true and NOT false. If you try this example in ruby, it returns `true` but not in the case below. 

Is this a bug or that's something expected?

```
[2] pry()> default_config.disable_farmer_deassignment
=> false
[3] pry()> region_config.disable_farmer_deassignment
=> true
[4] pry()> default_config.merge!(region_config)
=> #<Config::Options enforce_resting=false, assign=true, assign_only_ql_approved=true, deassign="daily", deassign_intraday_dnd=false, ensure_category_mix=true, warn=true, specialization=false, hunter_farmer=false, assigner_worth_property="predicted_gb_callable", regular_capacity_multiplier=7, outside_sales_capacity_multiplier=9, immediate_intraday=false, disable_farmer_deassignment=false
```
Hello, 

I found this problem with a specific combination of ENV variables like: 

```
BACKEND_DATABASE=development
BACKEND_DATABASE_USER=postgres
```

When iterating on the second env variable [lib/config/options.rb](https://github.com/railsconfig/config/blob/master/lib/config/options.rb#L62) raises  `no implicit conversion of Symbol into Integer` when trying to find `leaf[keys.last]` but leaf is a string containing `development`. 

My workaround for this is to make sure the ENV variables don't get into this form of nesting. 

```
BACKEND_DATABASE_NAME=development
BACKEND_DATABASE_USER=postgres
```

It's probably reasonable to require this form in the docs, as I wouldn't imagine how to create a structure where one of the keys contains both data and other keys. 