I'm trying to run codemod on my codebase and it is choking with:

```
Traceback (most recent call last):
  File "/home/ezyang/local/pytorch-tmp-env/bin/codemod", line 8, in <module>
    sys.exit(main())
  File "/home/ezyang/local/pytorch-tmp-env/lib/python3.7/site-packages/codemod/base.py", line 1025, in main
    run_interactive(**options)
  File "/home/ezyang/local/pytorch-tmp-env/lib/python3.7/site-packages/codemod/base.py", line 167, in run_interactive
    for patch in suggestions:
  File "/home/ezyang/local/pytorch-tmp-env/lib/python3.7/site-packages/codemod/base.py", line 442, in generate_patches
    lines = list(open(path))
  File "/home/ezyang/local/pytorch-tmp-env/lib/python3.7/codecs.py", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe3 in position 16: invalid continuation byt
```

It would be very nice if it told me what file had the bad encoding!
Is it possible to add an option to ignore binary files automatically rather than exiting?

For example,

```sh
codemod --ignore-binary foo bar
```

Currently, the only way to avoid stopping replacement at binary files is to specify all file extensions known to be text files although it's a kind of tedious. For example, I often do this:

```sh
codemod --extension ts,md,js,tsx,jsx,txt,json foo bar
```

This feature might be related to #105.
There is a v1.0.0 in PyPI.

And there is not a v1.0.0 in https://github.com/facebook/codemod/releases , so I can not quickly see where v1.0.0 is in the git history.

Can we get a new tagged release, ideally with recent commits for Python 3 test support.  I'd like to submit this into openSUSE package collection.

WIP at https://build.opensuse.org/package/show/home:jayvdb:py-new/python-codemod - the doctest pass on Python 3.7 (Tumbleweed), but emit a few deprecation warnings
I typically have to run `codemod` on several directories in my working repository with the `-d` option. I would run it in the root of my working repository, but it includes some large irrelevant files that slow `codemod` down. Is there a way to have it obey `.gitignore`?
This PR also has a small fix for Python 3 compatibility.
Iâ€™m using https://pythex.org with this search ` = \((.*)\) => {` and this string `Date.now = () => 1;` and it does not match. However, when using that in codemod it is matched. How can I tell codemod to respect the `{` character.

```
codemod -m -d lib --extensions js \
    ' = \((.*)\) => {' \
    '(\1) {'
```
I'm trying to use this package on windows. There's no mention of the dependency on curses and fcntl in the readme or in a requirements.txt/Pipfile.

I was able to get curses installed from [here](https://www.lfd.uci.edu/%7Egohlke/pythonlibs/#curses), but there's no fcntl on that page.

Here's the call I'm using that's asking for it:
```
$ codemod --extensions rb --count '(\s+)(get|delete|put)' ''
Traceback (most recent call last):
  File "C:\Users\CM022291\AppData\Local\Programs\Python\Python36\Scripts\codemod-script.py", line 11, in <module>
    load_entry_point('codemod==1.0.0', 'console_scripts', 'codemod')()
  File "C:\Users\CM022291\AppData\Local\Programs\Python\Python36\lib\site-packages\pkg_resources\__init__.py", line 565, in load_entry_point
    return get_distribution(dist).load_entry_point(group, name)
  File "C:\Users\CM022291\AppData\Local\Programs\Python\Python36\lib\site-packages\pkg_resources\__init__.py", line 2631, in load_entry_point
    return ep.load()
  File "C:\Users\CM022291\AppData\Local\Programs\Python\Python36\lib\site-packages\pkg_resources\__init__.py", line 2291, in load
    return self.resolve()
  File "C:\Users\CM022291\AppData\Local\Programs\Python\Python36\lib\site-packages\pkg_resources\__init__.py", line 2297, in resolve
    module = __import__(self.module_name, fromlist=['__name__'], level=0)
  File "C:\Users\CM022291\AppData\Local\Programs\Python\Python36\lib\site-packages\codemod-1.0.0-py3.6.egg\codemod\__init__.py", line 1, in <module>
    from codemod.base import *  # noqa
  File "C:\Users\CM022291\AppData\Local\Programs\Python\Python36\lib\site-packages\codemod-1.0.0-py3.6.egg\codemod\base.py", line 34, in <module>
    import codemod.terminal_helper as terminal
  File "C:\Users\CM022291\AppData\Local\Programs\Python\Python36\lib\site-packages\codemod-1.0.0-py3.6.egg\codemod\terminal_helper.py", line 11, in <module>
    import fcntl
ModuleNotFoundError: No module named 'fcntl'
```

Would it be possible to detect windows and use naive terminal handling in that case?
comma delimited list of directory and file globs to ignore a-la gitignore or ack would make this my number-one goto. 

My example is I'm in JS currently, so I want to be able to exclude things like `node-modules/`, `package-lock.json`, `build/`
This mostly only applies to usage as a library, although in principle one could hit it with a large multiline regexp.  It would be really nice if instead of just showing the entire removed block as red and the entire added block as green, codemod could show a more concise diff.  This would be especially useful for codemods that reorder lines, for example by moving a line up a few lines -- right now they show a big unreadable block of red and green, but they could just show a single red and a single green line.

(In an ideal world, they could even allow diff-splitting, like `git add -p`, but I don't think that's particularly compatible with the current `Patch` architecture.)
When making a large, mostly-straightforward codemod, clicking "enter" in rapid succession is the only tolerable modus operandi. 

Sometimes, I see things that look potentially problematic, but my feeble human brain doesn't detect this until my eager pinky has already pressed "enter". 

It would be nice to have a "b" (or maybe "u") shortcut to the previous diff and reevaluate. 

I'm not sure how straightforward that would be to implement ðŸ˜„ 