Using >8 JDK everything is working except dependency resolution:

```
[kscript] Resolving dependencies...
[kscript]     Resolving "org.openjsse:openjsse:1.1.0"...Exception in thread "main" java.lang.NoClassDefFoundError: org/ietf/jgss/GSSException
	at com.ning.http.client.providers.netty.NettyAsyncHttpProvider.<clinit>(NettyAsyncHttpProvider.java:177)
	at org.sonatype.aether.connector.async.AsyncRepositoryConnector.getDefaultProvider(AsyncRepositoryConnector.java:246)
	at org.sonatype.aether.connector.async.AsyncRepositoryConnector.getProvider(AsyncRepositoryConnector.java:241)
	at org.sonatype.aether.connector.async.AsyncRepositoryConnector.<init>(AsyncRepositoryConnector.java:154)
	at org.sonatype.aether.connector.async.AsyncRepositoryConnectorFactory.newInstance(AsyncRepositoryConnectorFactory.java:106)
	at org.sonatype.aether.impl.internal.DefaultRemoteRepositoryManager.getRepositoryConnector(DefaultRemoteRepositoryManager.java:346)
	at org.sonatype.aether.impl.internal.DefaultArtifactResolver.resolve(DefaultArtifactResolver.java:453)
	at org.sonatype.aether.impl.internal.DefaultArtifactResolver.resolveArtifacts(DefaultArtifactResolver.java:216)
	at org.sonatype.aether.impl.internal.DefaultArtifactResolver.resolveArtifact(DefaultArtifactResolver.java:193)
	at org.apache.maven.repository.internal.DefaultArtifactDescriptorReader.loadPom(DefaultArtifactDescriptorReader.java:281)
	at org.apache.maven.repository.internal.DefaultArtifactDescriptorReader.readArtifactDescriptor(DefaultArtifactDescriptorReader.java:186)
	at org.sonatype.aether.impl.internal.DefaultDependencyCollector.collectDependencies(DefaultDependencyCollector.java:191)
	at org.sonatype.aether.impl.internal.DefaultRepositorySystem.resolveDependencies(DefaultRepositorySystem.java:333)
	at com.jcabi.aether.Aether.fetch(Aether.java:228)
	at com.jcabi.aether.Aether.resolve_aroundBody2(Aether.java:180)
	at com.jcabi.aether.Aether$AjcClosure3.run(Aether.java:1)
	at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149)
	at com.jcabi.aspects.aj.MethodLogger.wrap(MethodLogger.java:208)
	at com.jcabi.aspects.aj.MethodLogger.ajc$inlineAccessMethod$com_jcabi_aspects_aj_MethodLogger$com_jcabi_aspects_aj_MethodLogger$wrap(MethodLogger.java:1)
	at com.jcabi.aspects.aj.MethodLogger.wrapClass(MethodLogger.java:136)
	at com.jcabi.aether.Aether.resolve(Aether.java:177)
	at com.jcabi.aether.Aether.resolve_aroundBody0(Aether.java:163)
	at com.jcabi.aether.Aether$AjcClosure1.run(Aether.java:1)
	at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149)
	at com.jcabi.aspects.aj.MethodLogger.wrap(MethodLogger.java:208)
	at com.jcabi.aspects.aj.MethodLogger.ajc$inlineAccessMethod$com_jcabi_aspects_aj_MethodLogger$com_jcabi_aspects_aj_MethodLogger$wrap(MethodLogger.java:1)
	at com.jcabi.aspects.aj.MethodLogger.wrapClass(MethodLogger.java:136)
	at com.jcabi.aether.Aether.resolve(Aether.java:156)
	at kscript.app.DependencyUtilKt.resolveDependenciesViaAether(DependencyUtil.kt:86)
	at kscript.app.DependencyUtilKt.resolveDependencies(DependencyUtil.kt:53)
	at kscript.app.KscriptKt.main(Kscript.kt:158)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)
	at org.jetbrains.kotlin.runner.AbstractRunner.run(runners.kt:61)
	at org.jetbrains.kotlin.runner.Main.run(Main.kt:110)
	at org.jetbrains.kotlin.runner.Main.main(Main.kt:120)
Caused by: java.lang.ClassNotFoundException: org.ietf.jgss.GSSException
	at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:436)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:588)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	... 38 more
```

A first bug was reported #233

jdk8 is 5 years old and some people prefer to use newer versions of jdk. 
I wrote a simple script with a simple dependency to 'com.opencsv:opencsv:4.6'.
I get the following error message:
```
[kscript] Resolving dependencies...
[kscript]     Resolving com.opencsv:opencsv:4.6...[kscript] [ERROR] Failed while connecting to the server. 
    Check the connection (http/https, port, proxy, credentials, etc.) of your maven dependency locators. 
    If you suspect this is a bug, you can create an issue on https://github.com/holgerbrandl/kscript
[kscript] [ERROR] Exception: org.sonatype.aether.resolution.DependencyResolutionException: 
    failed to load 'com.opencsv:opencsv:jar:4.6 (runtime)' from 
        [
            "maven (https://maven.<company>.net/content/groups/public, releases+snapshots) without authentication", 
            "maven (https://maven.<company>.net/content/groups/public, releases+snapshots) without authentication"
        ] into /Users/<my_user>/.m2/repository
```

Is it possible to have a clearer error message on what could be causing this, the repository urls work perfectly on maven and gradle, and I can't seem to find a reason for kscript to fail on resolving the dependencies.
Kscript doesn't interpret non-absolute URIs as being relative to a script when it's remotely executed, leading to exceptions like the following.

```
Exception in thread "main" java.lang.IllegalArgumentException: URI is not absolute
	at java.net.URI.toURL(URI.java:1088)
	at kscript.app.ResolveIncludesKt.resolveIncludes(ResolveIncludes.kt:39)
	at kscript.app.KscriptKt.main(Kscript.kt:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jetbrains.kotlin.runner.AbstractRunner.run(runners.kt:61)
	at org.jetbrains.kotlin.runner.Main.run(Main.kt:110)
	at org.jetbrains.kotlin.runner.Main.main(Main.kt:120)
```

kscript should, ideally, take `@file:Include("foo.kt")` statements and, if executed from a script invoked via `kscript https://foo.bar/baz/blah.kts` and interpret the `foo.kt` reference as `https://foo.bar/baz/foo.kt`

Given that #219 improved relative referencing of `@file:Include` it seems that this doesn't take into account remote invocations. 
This allows for running logic after the file include annotation.

For example: `kscript '@file:Include("file.kt"); myFunction()'`.
See https://hub.docker.com/r/serandel/kscript and https://github.com/serandel/kscript-docker
Command:

```
kscript --idea some-file.kts
```

Produces an IntelliJ project with a `build.gradle` in the root. Since we all love Kotlin, it may make sense to transition this to a `build.gradle.kts` now that's got first party support in Gradle.

Thanks for such a great project!
Without this, `kscript --help` takes 0.6 to 0.9 seconds.
With this, it takes 0.02 seconds ðŸŽ‰ 

This still needs to be integrated into the release script, but for now you can use it by running `./gradlew nativeImage`, then using the binary at `./build/graal/kscript-native`.
As discussed on #102, this PR processes KOTLIN_OPTS in kscript bash.

The kotlin code differences between #102 and this are:
- It is one commit 
- KOTLIN_OPTS processing code has been removed, and it is lazy operation for --package

Now, scripts using KOTLIN_OPTS can enjoy the startup time improvement by reusing the JVM at the expense of complex kscript bash script.

Running the package option with gradle 5.0 installed causes it to fail with the underlying gradle message.
```
Gradle does not allow passing null for the configuration action for CopySpec.from()
```
Note that the message was captured debugging.

With gradle 4.10.2, it worked fine.
The gradle build file created with `kotlin --idea [file.kt]` is as follows:

```groovy
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.70"
}

repositories {
    mavenLocal()
    jcenter()

}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    compile "org.jetbrains.kotlin:kotlin-script-runtime"

}

sourceSets.main.java.srcDirs 'src'
```
Is this version a fixed value? Is there a reasonable way of obtaining the latest stable version or prompting the user?

Perhaps raises the question of which Kotlin compiler version kscript should use ever. Would love to PR and work on this :)
