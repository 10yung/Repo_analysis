When working on libp2p-quic, I found many bugs that did not reproduce unless I ran the test case thousands of times.  This is not practical to do by hand, but is trivial to automate, so it might be beneficial for some tests.
Fixes #604.
Currently, reading from a stream in a closed connection can sometimes return `Blocked`, which makes no sense.
Is it possible to avoid using unbounded channels?  My attempts to do so have lead to intermittent deadlocks that I have not successfully been able to debug.
I've been working on this `H3` interop server to deploy on h3.stammw.eu.

I'm not sure we'll want to merge this into quinn as it may be out of scope?

The reasons why I think we need to separate h3 interop from the example code are:
- Interop already needs / will need a different set of features. For example transfer tests are based on urls like `https://example.com/100M`
- The example code will be kept simple
- It may be interesting to implement remote logging for people running their interop client against this endpoint. They could filter by IP or CID with a simple web app served via h1/h2.

~For the moment I'm stuck on a bug where requesting more than 1,6M  results in the client missing the tail of a `Data` frame. Receiving the start of a fresh Data frame instead.~

This PR also contains fixes for critical bugs in:
- data writing management
- parsing incomplete frame headers 
quinn-proto is difficult to use, and one of the reasons is that there is no example code provided outside of its own test cases.
Would it be possible for `quinn_proto` to support `#![no_std]`?
Quinn currently errors out if I try to connect to an IP address, presumably because webpki does not support them.  However, my code uses a custom certificate verifier that does not use webpki. 
Presently, every application write produces at least one stream frame. This can add significant bandwidth overhead for very small writes. While repeated very small writes are not optimal in any case, we should do better.

One approach would be to maintain a buffer of pending data for each open outgoing stream, from which stream frames can be computed on demand. For efficiency, a list of streams with nonempty buffers should also be maintained. A simple implementation could leave retransmits to the existing logic, while a more advanced one might take responsibility for those as well.
Allowing only idempotent methods to be sent before the handshake has finished.
And replace `.expect()` in `quinn_h3::client::Connecting::into_0rtt()` by a proper error type.