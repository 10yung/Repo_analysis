This PR upgrades commitlint packages to latest versions and drops `travis-cli` integration (as is not used).

commitlint config is getting upgraded to validate to use lerna-scopes in commit message
Simple enough.
Also adds support for optional call expressions
I'd like to propose new rule.

Description
Typing with array and object literals leads to loose typing. And make it hard to find all references to interface at project. Because literals has different types and no warning for this:

```ts
interface User {
  name: string
}

function validateUser(user: User) {}

const user = {name: 'John'}
validateUser(user);
```

If I want to find all references to User interface:
1. Find validateUser.
2. Find all usages validateUser.
3. Find objects passed to validateUser.

But if I rewrote code to
```ts
const user: User = {name: 'John'}
validateUser(user);
```

it requires from me only step 1.

My propose enforce object literal creation with types:
```ts
// Error - lacks typing, because literal type object has no explicit types
const a = {name: 'John'};
// Error - lacks typing for array and object inside it
const b = [{a: 1}]

// This warns if literalsAsArgument: false
validateUser({name: 'John'})

// This passes because const treat this as constant value
const c = {name: 'John'} as const

// This passes because of casting d to User
const d = {} as User
d.name = 'Jackie boy'

// This passes because of explicit type
const e: User = {name: 'Jill'}
```

Structural typing on the wild leads to error prone refactoring and usually this mistakes discovered on production, but not at compile time.
**DO NOT MERGE,**

This is branch contains so far only test scenarios for upcoming typescript 3.8.

---------------------

TODO:

- [ ] Private class properties: https://github.com/estree/estree/pull/180
- [ ] Private class method : https://github.com/estree/estree/pull/180
- [ ] Private class properties in tsx
- [ ] Export type
- [ ] Import type
- [x] Export as ns from: https://github.com/estree/estree/pull/205

Known issues:

- [ ] There is difference in range for `export * as ns` between babel and ts

fixes #1436
This change makes it so that the `RuleMetaData` interface has `docs` as an optional property. `docs` should not be required according to the eslint documentation.

From the eslint [docs](https://eslint.org/docs/developer-guide/working-with-rules#rule-basics):
"In a custom rule or plugin, you can omit docs or include any properties that you need in it."
<!--
If you have a problem with a specific rule, please begin your issue title with [rulename] to make it easier to search for.
I.e. "[no-unused-vars] False positive when fooing the bar"

Please don't ignore this template.

If you ignore it, we're just going to respond asking you to fill it out, which wastes everyone's time.
The more relevant information you can include, the faster we can find the issue and fix it without asking you for more info.
-->

<!--
Are you opening an issue because the rule you're trying to use is not found?
🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨
1) Check the releases log: https://github.com/typescript-eslint/typescript-eslint/releases
    -  If the rule isn't listed there, then chances are it hasn't been released to the main npm tag yet.
2) Try installing the `canary` tag: `npm i @typescript-eslint/eslint-plugin@canary`.
    - The canary tag is built for every commit to master, so it contains the bleeding edge build.
3) If ESLint still can't find the rule, then consider reporting an issue.
-->

**Repro**

<!--
Include a ***minimal*** reproduction case.
The more irrelevant code/config you give, the harder it is for us to investigate.
-->

```JSON
{
  "rules": {
    "@typescript-eslint/prefer-optional-chain": "warn"
  }
}
```

```TS
foo && foo.a && bar && bar.a
```

**Expected Result**

```ts
foo?.a && bar?.a
```

**Actual Result**

```ts
foo?.a && bar && bar.a
```

**Additional Info**

<!--
Did eslint throw an exception?

Please run your lint again with the --debug flag, and dump the output below.
i.e. eslint --ext ".ts,.js" src --debug
-->

**Versions**

| package                            | version |
| ---------------------------------- | ------- |
| `@typescript-eslint/eslint-plugin` | `2.16.0` |
| `@typescript-eslint/parser`        | `2.16.0` |
| `TypeScript`                       | `3.7.4` |
| `ESLint`                           | `6.8.0` |
| `node`                             | `13.5.0` |
| `npm`                              | `6.13.4` |

<!--
If you have a problem with a specific rule, please begin your issue title with [rulename] to make it easier to search for.
I.e. "[no-unused-vars] False positive when fooing the bar"

Please don't ignore this template.

If you ignore it, we're just going to respond asking you to fill it out, which wastes everyone's time.
The more relevant information you can include, the faster we can find the issue and fix it without asking you for more info.
-->

<!--
Are you opening an issue because the rule you're trying to use is not found?
🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨
1) Check the releases log: https://github.com/typescript-eslint/typescript-eslint/releases
    -  If the rule isn't listed there, then chances are it hasn't been released to the main npm tag yet.
2) Try installing the `canary` tag: `npm i @typescript-eslint/eslint-plugin@canary`.
    - The canary tag is built for every commit to master, so it contains the bleeding edge build.
3) If ESLint still can't find the rule, then consider reporting an issue.
-->

I didn't find the rule for eslint `comma-spacing`, it's a main reason to create this issue.

**Repro**

<!--
Include a ***minimal*** reproduction case.
The more irrelevant code/config you give, the harder it is for us to investigate.
-->

```TS
const MyComponent = <T,>(props: Props<T>) => { return <AnotherComponent {...props} /> }
```

**Expected Result**
I presume there should be a rule that replaces eslint `comma-spacing` rule and allow `,` for the next code: `<T,>`

**Actual Result**
There is no such rule :) 

**Additional Info**
This trick is needed for working together with TypeScript and React in `.tsx` file, otherwise compiler thinks it's a JSX/TSX code, not generic.

https://github.com/microsoft/TypeScript/issues/15713#issuecomment-499474386

<!--
Did eslint throw an exception?

Please run your lint again with the --debug flag, and dump the output below.
i.e. eslint --ext ".ts,.js" src --debug
-->

**Versions**

| package                            | version |
| ---------------------------------- | ------- |
| `@typescript-eslint/eslint-plugin` | `2.15.0` |
| `@typescript-eslint/parser`        | `2.15.0` |
| `TypeScript`                       | `3.7.4` |
| `ESLint`                           | `6.8.0` |
| `node`                             | `13.3.0` |
| `npm`                              | `6.13.6` |

Goal of this PR is simplify and speed up test run time. 

Setting up docker container in this case seems to be overkill that takes ~7min on CI to execute, (all other tests are executed in ~4min)

This change removes ~7min out of CI run

Notable changes: 
- docker is dropped from integration tests in favor of executing isolated commands.
- integration tests are executed on all specified node versions
There are a number of tools (like [`fork-ts-checker-webpack-plugin`](https://github.com/TypeStrong/fork-ts-checker-webpack-plugin#eslint)) that already manage a TS program, and that would like to integrate with ESLint as well.

Unfortunately, right now our parser is a black box - we create and manage the `Program`s we use, and our APIs only accept a file path, and file contents as input.

This, brings a problem of wasted memory, because the tool and our parser both create separate `Program`s.

We should look into creating an API which would "seed" the parser with a given program, using that program instead of creating its own.

I'd imagine something along the lines of:

```ts
import { seedParser } from '@typescript-eslint/typescript-estree';
import { CLIEngine } from 'eslint';
import { getProgram } from './my/local/project';

function lint(filePath: string) {
  const program = getProgram();
  seedParser(program);
  const engine = new CLIEngine(eslintOptions);
  engine.executeOnFiles(filePath);
}
```

---

cc @johnnyreilly - for `fork-ts-checker-webpack-plugin`.

Slightly related: #774

<!--
If you have a problem with a specific rule, please begin your issue title with [rulename] to make it easier to search for.
I.e. "[no-unused-vars] False positive when fooing the bar"

Please don't ignore this template.

If you ignore it, we're just going to respond asking you to fill it out, which wastes everyone's time.
The more relevant information you can include, the faster we can find the issue and fix it without asking you for more info.
-->

<!--
Are you opening an issue because the rule you're trying to use is not found?
🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨
1) Check the releases log: https://github.com/typescript-eslint/typescript-eslint/releases
    -  If the rule isn't listed there, then chances are it hasn't been released to the main npm tag yet.
2) Try installing the `canary` tag: `npm i @typescript-eslint/eslint-plugin@canary`.
    - The canary tag is built for every commit to master, so it contains the bleeding edge build.
3) If ESLint still can't find the rule, then consider reporting an issue.
-->

**Repro**

<!--
Include a ***minimal*** reproduction case.
The more irrelevant code/config you give, the harder it is for us to investigate.
-->

```JSON
{
  "rules": {
    "@typescript-eslint/prefer-optional-chain": ["error"]
  }
}
```

```TS
declare const a: { b: string | null } | null;
a !== null && a.b !== null && a.b.length > 0;
/*
^^^^^^^^^^^^^^^^^^^^^^^^^^ Prefer using an optional chain expression instead, as it's more concise and easier to read.
*/
```

**Expected Result**

```TS
a?.b != null && a.b.length > 0;
```

**Actual Result**

```TS
a?.b !== null && a.b.length > 0;
/*
                 ^ Object is possibly 'null'.
*/
```

**Additional Info**

<!--
Did eslint throw an exception?

Please run your lint again with the --debug flag, and dump the output below.
i.e. eslint --ext ".ts,.js" src --debug
-->

**Versions**

| package                            | version |
| ---------------------------------- | ------- |
| `@typescript-eslint/eslint-plugin` | `2.15.0` |
| `@typescript-eslint/parser`        | `2.15.0` |
| `TypeScript`                       | `3.7.3` |
| `ESLint`                           | `6.1.0` |
| `node`                             | `10.16.0` |
| `npm`                              | `6.9.0` |
