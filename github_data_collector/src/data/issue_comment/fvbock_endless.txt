- Avoid zombie processes, There is no wait subprocess state, which may lead to zombie process in subprocesses.
- Active termination to eliminate http.Serve error messages
modify example handler func name
Support Http2.0

I want to make a struct like this:

```
type App struct {
	Server *endless.endlessServer
	Router *gin.Engine
}

func (a *App) Initialize(config *config.Config) {
	a.Server = endless.NewServer(fmt.Sprintf(":%d", a.Config.Server.Port), a.Router)
}
```
Using this `struct`: https://github.com/fvbock/endless/blob/master/endless.go#L72

But it's give me error:

`cannot refer to unexported name *endless.endlessServer`

How can i that `endless` reference in my own `App` struct?
restart a server on a different port than the previous version was running on
Added additional SMTPDEndlessServer and SMTPDEndlessListener struct which wrap the SMTPD server implemented in github.com/rguliyev/smtpd instead of an HTTP server.
This error is printed whenever a SIGHUP is sent to an endless server. The server continues to run but this error is causing my program which calls endless to panic. Where is the error coming from?
I use systemd to manage go app.
config:
`ExecReload=/bin/kill -s HUP $MAINPID`

Because of pid change, systemd think process failed, and use ExecStart to start process.But process was started by endless, systemd think process start failed.

How can I use endless with systemd?
Hi, how to create a systemd init script for application using endless package ?

Thank you