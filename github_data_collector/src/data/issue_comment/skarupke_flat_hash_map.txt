Thanks for your great work. 

Did your design consider these issues?

https://www.freecodecamp.org/news/hash-table-attack-8e4371fc5261/
https://github.com/skarupke/flat_hash_map/blob/2c4687431f978f02a3780e24b8b701d22aa32d9c/bytell_hash_map.hpp#L52
I want to edit some sorce code and import it in my project.
Can I do it?
Line 1218 in flat_hash_map.hpp. why std::end - 1 and not just std::end?
There's a patch from [this StackOverflow](https://stackoverflow.com/questions/53469491/stdhash-no-type-named-hash-policy-when-running-skaflat-hash-map) answer which allows flat_hash_map to work with gcc < 5, which I've incorporated.

It'd be convenient to be able to use your repository as a submodule and have it work on those systems.

Thanks!

This has been included in some form [here](https://github.com/skarupke/flat_hash_map/pull/25).
currently when you iterate over the nodes in the map, the order they are returned is not the order the were inserted into the map in.

is there some easy tweak to ensure these orderings match up?
According to the C++ standard, all Associative Containers: The insert and emplace members shall not affect the validity of iterators and references to the container [26.2.6/9]. 
However I found that after insertion of of a list of element, some iterator values are invalidated.

Please find bellow code snippet to test this feature:

namespace xxx {
    typedef std::string key_t;
    typedef std::string value_t;

    typedef ska::flat_hash_map<key_t, value_t> map_t;
    //typedef std::map<key_t, value_t> map_t;
    typedef std::list<map_t::iterator> list_t;
}
...
    std::vector<string> keys(__MAX_SIZE__);
        generatKeys(keys);
...
         for (auto& key : keys) {
            std::pair < xxx::map_t::iterator, bool> ret = dict.insert(xxx::map_t::value_type(key, keys[rand() % __MAX_SIZE__]));

            if (ret.second) {
                list_items.push_back(ret.first);
            }
        }
        
        for (xxx::map_t::iterator iter = dict.begin(); iter != dict.end(); ++iter) {
       
            xxx::list_t::iterator findIter = std::find(list_items.begin(), list_items.end(), iter);
            
            if(findIter == list_items.end()) {
                cerr << "Item does not exist\n";
            } else {
                cerr << "Item exists\n";
            }
        }


[fastrange](https://github.com/lemire/fastrange) provides a fast method to map machine words to a given range.  This could be used as part of a hash policy.  I'm not certain that it would be faster than the existing Fibonacci hash policy, as it would require 128-bit arithmetic if size_t is 64 bits wide.
```
unordered_map.hpp:425:46: warning: performing pointer arithmetic on a null pointer has undefined behavior if the offset is nonzero [-Wnull-pointer-arithmetic]
        *new_buckets = EntryPointer(nullptr) + ptrdiff_t(1);
```

That line looks harmless to me, but undefined behavior should be avoided if at all possible.
