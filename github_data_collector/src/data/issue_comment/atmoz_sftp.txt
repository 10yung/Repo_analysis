## Proposal
**Use case. Why is this important?**
Docker Content Trust allows us to verify if the images downloaded are indeed the images that atmoz/sftp published. Security measures can be setup to only download signed images.

Is there any particular reason why signed images haven't been added, or is it simply a feature which hasn't been looked into yet?

https://docs.docker.com/engine/security/trust/content_trust/

First of all thank you for your great work! 

I face a problem where I want to add a second user to a subdirectory. Is this possible at all?

Example: 
user1: /home/user1/folder1/folder2
user2:/folder2/

User2 should only have access to folder2 and deeper. IIRC this is not possible because of the owndership of the root folder?

First of all thank you for this very useful image! It worked right out of the box.

 I have problems connecting to the container in my Jenkins pipeline. I created the container using foo:pass::::upload, and can connect from the server, but when I run my app within another container I get an auth error with the same user and pass. 

I get "
input_userauth_request: invalid user = foo [preauth]
Could not get shadow information for NOUSER " error

 This is probably due to sha keys, but is it possible to do this? For Instance to set stricthost key settings to no.
Since Windows does not support read-only permissions for Linux containers (see https://github.com/docker/compose/issues/6751) this change will ensure that the permissions are set correctly by the `entrypoint` script
Is it possible to add users without restarting / re-creating the docker container? If yes, how?

And: Is it possible to reload/refresh the public keys for all users at run-time? If yes, how?
I've prepared an debian-buster based build here if you'd like to test it: `hakandilek/sftp:debian-buster` See https://hub.docker.com/r/hakandilek/sftp/tags
I created a azure container instance using the atmoz image using the below yaml file.

Yaml File:
apiVersion: '2018-10-01'
location: westus2
name: sftp-test-group
properties:
  containers:
  - name: sftp
    properties:
      environmentVariables:
      - name: 'SFTP_USERS'
        value: 'username:dsdff$%4ed:1001'
      image: atmoz/sftp:latest
      command: ["/bin/sh", "-c", "chmod 600 /etc/ssh/ssh* && /entrypoint"] 
      ports:
      - port: 22
      resources:
        requests:
          cpu: 1.0
          memoryInGB: 2
      volumeMounts:
      - mountPath: /home/  
        name: sftpvolume
        readonly: false
      - mountPath: /etc/ssh/
        name: hostkey
  osType: Linux
  restartPolicy: OnFailure
  ipAddress:
    type: Public
    ports:
      - port: 22
    dnsNameLabel: sftp-test-group
  volumes:
  - name: sftpvolume
    azureFile:
      sharename: sftpfileshare
      readonly: false 
      storageAccountName: <>
      storageAccountKey: <>
  - name: hostkey
    secret:
      ssh_host_rsa_key: ''
      ssh_host_ed25519_key: ''
      sshd_config:  ''
tags: {}
type: Microsoft.ContainerInstance/containerGroups



Error Message:

ssh keys are mounted in /etc/ssh to a link file which has 0644 permission, because of that the ssh key is not getting loaded and unable to connect it from filezilla

Hey everybody,
I'm trying to mount host keys as Google kubernetes engine configmap and when I try to mount /etc/ssh for the file (tried /etc/ssh/ssh_host_rsa_key too) I get Read-only file system error message.

This is my configmap file: 

```
apiVersion: v1
data:
  ssh_host_rsa_key: |
    <my key>
kind: ConfigMap
metadata:
  name: ssh-host-rsa
  namespace: default
```

And this is my atmoz deployment yaml:

```
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  name: sftp
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: sftp
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: sftp
    spec:
      containers:
      - args:
        - client::::sftp
        env:
        - name: sftp
          value: "1"
        image: atmoz/sftp
        imagePullPolicy: IfNotPresent
        name: sftp
        ports:
        - containerPort: 22
          name: sftp
          protocol: TCP
        resources: {}
        securityContext:
          capabilities:
            add:
            - SYS_ADMIN
          procMount: Default
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /home/client/sftp
          name: sftp
        - mountPath: /home/client/.ssh/keys
          name: sftp-public-keys
        - mountPath: /etc/ssh
          name: ssh-host-ed25519
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 100
      terminationGracePeriodSeconds: 30
      volumes:
      - name: sftp
        persistentVolumeClaim:
          claimName: sftp-uat
      - configMap:
          defaultMode: 420
          name: sftp-public-keys
        name: sftp-public-keys
      - configMap:
          defaultMode: 420
          name: ssh-host-ed25519
        name: ssh-host-ed25519
```

Errors I get from the log:
```

"Saving key "/etc/ssh/ssh_host_rsa_key" failed: Read-only file system"
"/entrypoint: Error on line 72: ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N ''
```

Any idea somebody?
Got a weird issue happening and would love some help. I can connect externally via sftp but connections start dropping/files fail to transfer after some time. 
Here is my current docker-compose setup (within docker swarm):

version: '3'

services:
  sftp:
    image: atmoz/sftp
    volumes:
        - ftp:/home/foo/
        - ftp:/var/www/html
    ports:
        - "2222:22"
    command: foo:pass:1001
I can think of a few reasons why this maybe isn't possible (relying on a user directory?) but I'm wondering if there's any hack to do it. It seems like the mount doesn't allow for writes. I get the message "read-only file system" if I try messing with www directory's permissions.