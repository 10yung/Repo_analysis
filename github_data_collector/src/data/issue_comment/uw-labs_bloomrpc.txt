https://github.com/uw-labs/bloomrpc/issues/105

Looks like 1.3.2 never came out? I used brew to install it. So now I have to build it from source to get it fixed? ðŸ¤” 
Sometimes we use buffer as a response, but It is difficult to read a buffer.
So, I made this change to support buffer display as a plain string.
Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.0 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.0...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.0&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/uw-labs/bloomrpc/network/alerts).

</details>
Arch linux AUR install fails... would be better to offer a AppImage which is pre-built and mostly works across linux distros without a complex install process


Clicking the "View Proto" button begins to slide in a new view, but the UI resets itself before the transition finishes.

![bloom](https://user-images.githubusercontent.com/4573/71028023-70769380-20da-11ea-9b11-3003a8e19b44.gif)

This happens with any proto I try. The recording was made with the following:
```
syntax = "proto3";
package hello;

service HelloWorld {
  rpc SayHello(SayHelloRequest) returns (SayHelloResponse) {}
}

message SayHelloRequest{
  optional string name = 1;
}

message SayHelloResponse {
  optional string value = 1;
}
```

I'm using v1.3.2 built from source on OS X 10.14.6.
**here is my question:**
Every time we use bloomrpc to test a single grpc method, we have to input the rpc address and token. when we switch env from stagging env or development env or prod env, we need to do the same again, which is time wasting and boring. So, I wonder if you guys have plan to refactor those two parts to make it more handy? 

**here is what I thought:**
can we manage grpc address and meta input bar classify by env.  So, we can reuse the address and meta when we test a single  grpc method. 
just like postman does.

**end**
thanks for building such a useful tool.
I have a grpc request, which request params would be:

{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9***",
  "query": "{"username": "santa"}"
}

This can not be executed because BloomRPC giving error: Expected ', ' instead of 'u'

![Screen Shot 2019-11-27 at 7 45 21 PM](https://user-images.githubusercontent.com/33623944/69724539-b03b0280-114e-11ea-93d7-4c85c764c542.png)

How could I make it right?!
If ist works, depends where the import is placed.

This works:
syntax = "proto3";
option csharp_namespace = "grpcApp";
package MyTest;
import "google/protobuf/empty.proto";
service Service1 { ... }
service Service2 { ... }

This doesn't work for load by BloomRPC, but seems to be correct, if service1 doesn't need the import. My compiler works fine with it:
syntax = "proto3";
option csharp_namespace = "grpcApp";
package MyTest;
service Service1 { ... }
import "google/protobuf/empty.proto";
service Service2 { ... }



I'm getting a build failure while trying to execute `yarn install && ./node_modules/.bin/electron-rebuild` on master (873953c). tried previous tagged versions and I got a similar error.

Running on Manjaro linux, node version v12.13.0

```make: *** [gpr.target.mk:193: Release/obj.target/gpr/deps/grpc/src/core/lib/gpr/log_linux.o] Error 1
make: Leaving directory '/home/yarel/Downloads/bloomrpc/app/node_modules/bloomrpc-mock/node_modules/grpc/build'
gyp ERR! build error
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/home/yarel/Downloads/bloomrpc/node_modules/node-gyp/lib/build.js:262:23)
gyp ERR! stack     at ChildProcess.emit (events.js:210:5)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:272:12)
gyp ERR! System Linux 4.19.84-1-MANJARO ```

