Pipreqs does not seem to be able to infer the google-cloud-translate package from the import that is suggested in the package instructions (from google.cloud import translate).

#### Operating system and version
WSL 1.0 running Ubuntu on Windows 10 
Python 3.6.9

#### Steps to reproduce

1. Create new python file

2. Import google translate via:
```
from google.cloud import translate
```
3. run pipreqs
4. The package will not be found in the requirements.txt

A `numpy` subfolder in the project hides the `numpy` pypi package from `requirements.txt`, even if empty and non-functional.

Repro steps
-
```
mkdir temp
cd temp
echo import matplotlib > bug.py
echo import numpy >> bug.py
echo "print(numpy.__version__)" >> bug.py

py bug.py
pipreqs --print

mkdir numpy

py bug.py
pipreqs --print
```

Expected (after the second run)
-
```
matplotlib=...
numpy=...
```

Actual
-
```
matplotlib=...
```

Feature request: A cool new feature would be to also crawl Jupyter Notebooks for import statements.

Pipreqs was failing with UnicodeDecodeError without indicating the filename that caused the error. The root case was PipEnv's ".venv" folder was being processed.

This PR adds ".venv" to directories to ignore, and moves the code that reads the file to process inside the try/catch block in order to log the filename that caused the issue.

The file that caused the failure was:

`/Users/XXXXX/dev/XXXXX/.venv/lib/python3.7/site-packages/IPython/core/tests/nonascii.py`

and the terminal output was:

```
$ pipreqs --debug 
Traceback (most recent call last):
  File "/Users/XXXXX/dev/XXXXX/.venv/bin/pipreqs", line 10, in <module>
    sys.exit(main())
  File "/Users/XXXXX/dev/XXXXX/.venv/lib/python3.7/site-packages/pipreqs/pipreqs.py", line 470, in main
    init(args)
  File "/Users/XXXXX/dev/XXXXX/.venv/lib/python3.7/site-packages/pipreqs/pipreqs.py", line 409, in init
    follow_links=follow_links)
  File "/Users/XXXXX/dev/XXXXX/.venv/lib/python3.7/site-packages/pipreqs/pipreqs.py", line 122, in get_all_imports
    contents = f.read()
  File "/Users/XXXXX/dev/XXXXX/.venv/bin/../lib/python3.7/codecs.py", line 322, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb1 in position 81: invalid start bytedatetime64
```

Although pipreqs would have worked properly adding "--ignore .venv" flag, the user would not easily know where it was failing.

My environment is:
- MacOS 10.15.2
- Python 3.7.3
- pipreqs==0.4.10
Hi all,

I am trying to run pipreqs on my repository I run into a problem when I use the `--use-local` flag. I've checked the code and it seems that there is a small discrepancy between the two modes when trying to get a package that is in the `mapping` file. In my example I am missing the `scikit-learn` package, which is installed as `scikit-learn` but is imported as `sklearn`. Adding to the problem is the `sklearn` package on PyPi, which is deprecated. Of course you are familiar with this.

In the normal mode, where PyPi is being queried, the candidates are mapped to their respective counterpart: `sklearn` is mapped to `scikit-learn` (or `scikit_learn`). This works in the "online" mode where PyPi is queried. This fails in the `--use-local` mode because `get_locally_installed_packages()` returns the following for this package: 

```
'sklearn': {'version': '0.22', 'name': 'scikit_learn'}
```

In the following step, for the `--use-local` mode, it will check if it can find the package in the keys if this dict. But `sklearn` has been mapped to `scikit_learn` so it will not find it in the dict and it will return an empty `requirements.txt`. When I remove line 1024 from the `mapping` file, which contains `sklearn:scikit_learn`, then it works with the `--use-local` mode, but it fails with it. Without that flag, it will return a `requirements.txt` with two entries: `scikit-learn` and `sklearn`. Of course, this is unwanted behaviour.

I've make a hotfix for the `--use-local` flag, but I think the code should be aligned for both modes. 

My suggestion for the hotfix is to change the behaviour of the `get_import_local()` function from:

```python
def get_import_local(imports, encoding=None):
    local = get_locally_installed_packages()
    result = []
    for item in imports:
        if item.lower() in local:
            result.append(local[item.lower()])

    # removing duplicates of package/version
    result_unique = [
        dict(t)
        for t in set([
            tuple(d.items()) for d in result
        ])
    ]

    return result_unique
```

to

```python
def get_import_local(imports, encoding=None):
    local = get_locally_installed_packages()
    result = []
    for item in imports:
        for pkg, attributes in local.items():
            if item == pkg.lower() or item == attributes['name'].lower():
                result.append(local[pkg])
                break

    # removing duplicates of package/version
    result_unique = [
        dict(t)
        for t in set([
            tuple(d.items()) for d in result
        ])
    ]
    return result_unique
```

It seems that for `sklearn` the name and the pkg name are interchangeable, I assume this to happen in more packages, therefore a check if the import is in the keys or as the name of the package makes sense but I don't know much about the inner workings of pip, so any suggestions are welcome.

Let me know what you think.

I am working on a MacBook Pro with:
```
conda 4.7.10
python 3.7.4
pipreqs 0.4.8
```
This code shows how `colour-science==0.3.14` is detected as `colour==0.1.5`.

```
pip install colour-science==0.3.14
echo import colour > bug.py
echo "print(colour.__version__)" >> bug.py
python bug.py
pipreqs --print
```
ERROR: Failed on file: .\src\action\browser.py
Traceback (most recent call last):
  File "e:\installed_programs\continuum\anaconda2\lib\runpy.py", line 174, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "e:\installed_programs\continuum\anaconda2\lib\runpy.py", line 72, in _run_code
    exec code in run_globals
  File "E:\installed_programs\Continuum\Anaconda2\Scripts\pipreqs.exe\__main__.py", line 9, in <module>
  File "e:\installed_programs\continuum\anaconda2\lib\site-packages\pipreqs\pipreqs.py", line 396, in main
    init(args)
  File "e:\installed_programs\continuum\anaconda2\lib\site-packages\pipreqs\pipreqs.py", line 341, in init
    extra_ignore_dirs=extra_ignore_dirs)
  File "e:\installed_programs\continuum\anaconda2\lib\site-packages\pipreqs\pipreqs.py", line 91, in get_all_imports
    raise exc
  File "<unknown>", line 308
    record2json(os.path.join(config.biil_info_dir/today, f'{self.title}.json'), info=data, day=today)
                                                                            ^
SyntaxError: invalid syntax
This is close to #106 but I don't think that is resolved. I have the following setup:

Main
-fold1 - a.py
-fold2 - fold2.1 - b.py
           - fold2.2 - fold2.2.1 - c.py

if I do pipreqs in Main, the imports from b.py or c.py do not show up.
I needed to do separately pipreqs main/fold2 and main/fold2/fold2.2

add `apache-airflow` instead of `airflow` to requirements.txt.

See https://pypi.org/project/airflow/
For packages that import airflow, e.g.

```
Collecting airflow==0.6
  Downloading https://files.pythonhosted.org/packages/98/e7/d8cad667296e49a74d64e0a55713fcd491301a2e2e0e82b94b065fda3087/airflow-0.6.tar.gz
    ERROR: Command errored out with exit status 1:
     command: /opt/conda/envs/cortex/bin/python -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-596i9f46/airflow/setup.py'"'"'; __file__='"'"'/tmp/pip-install-596i9f46/airflow/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' egg_info --egg-base /tmp/pip-install-596i9f46/airflow/pip-egg-info
         cwd: /tmp/pip-install-596i9f46/airflow/
    Complete output (13 lines):
    running egg_info
    creating /tmp/pip-install-596i9f46/airflow/pip-egg-info/airflow.egg-info
    writing /tmp/pip-install-596i9f46/airflow/pip-egg-info/airflow.egg-info/PKG-INFO
    writing dependency_links to /tmp/pip-install-596i9f46/airflow/pip-egg-info/airflow.egg-info/dependency_links.txt
    writing top-level names to /tmp/pip-install-596i9f46/airflow/pip-egg-info/airflow.egg-info/top_level.txt
    writing manifest file '/tmp/pip-install-596i9f46/airflow/pip-egg-info/airflow.egg-info/SOURCES.txt'
    reading manifest file '/tmp/pip-install-596i9f46/airflow/pip-egg-info/airflow.egg-info/SOURCES.txt'
    writing manifest file '/tmp/pip-install-596i9f46/airflow/pip-egg-info/airflow.egg-info/SOURCES.txt'
    Traceback (most recent call last):
      File "<string>", line 1, in <module>
      File "/tmp/pip-install-596i9f46/airflow/setup.py", line 32, in <module>
        raise RuntimeError('Please install package apache-airflow instead of airflow')
    RuntimeError: Please install package apache-airflow instead of airflow
    ----------------------------------------
ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.
```