Based on #1895
**Short description of the issue**:

Run Unit test crash on methodizing class 'RxSwift.MainScheduler' 

**Expected outcome**:

  run unit test successfully

**What actually happens**:

  Run Unit test crash on methodizing class 'RxSwift.MainScheduler' 

**crash log and backtrace**:

```swift
objc[6727]: CLASS: realizing class 'RxSwift.MainScheduler' 0x124779ea8 0x1245f3750 #0 (swift)
objc[6727]: CLASS: realizing class 'RxSwift.SerialDispatchQueueScheduler' 0x12477a6c8 0x1245f5278 #0 (swift)
objc[6727]: CLASS: realizing class 'RxSwift.SerialDispatchQueueScheduler' (meta) 0x12477a690 0x1245f5208 #0 
objc[6727]: CLASS: methodizing class 'RxSwift.SerialDispatchQueueScheduler' (meta)
objc[6727]: CLASS: methodizing class 'RxSwift.SerialDispatchQueueScheduler' 
objc[6727]: CLASS: realizing class 'RxSwift.MainScheduler' (meta) 0x124779e70 0x1245f36c0 #0 
objc[6727]: CLASS: methodizing class 'RxSwift.MainScheduler' (meta)
objc[6727]: CLASS: methodizing class 'RxSwift.MainScheduler' 
(lldb) BT
error: 'BT' is not a valid command.
(lldb) bt
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x9)
    frame #0: 0x000000022a306f9c libswiftCore.dylib`swift_checkMetadataState + 380
    frame #1: 0x000000022a30a708 libswiftCore.dylib`bool findAnyTransitiveMetadata<checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_14&>(swift::TargetMetadata<swift::InProcess> const*, checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*)::$_14&) + 120
    frame #2: 0x000000022a30a600 libswiftCore.dylib`checkTransitiveCompleteness(swift::TargetMetadata<swift::InProcess> const*) + 100
    frame #3: 0x000000022a30b1f0 libswiftCore.dylib`swift::MetadataCacheEntryBase<(anonymous namespace)::SingletonMetadataCacheEntry, int>::doInitialization(swift::ConcurrencyControl&, swift::MetadataCompletionQueueEntry*, swift::MetadataRequest) + 264
    frame #4: 0x000000022a301820 libswiftCore.dylib`swift_getSingletonMetadata + 636
    frame #5: 0x00000001232e8d28 MyAppTests`type metadata accessor for MainScheduler at <compiler-generated>:0
    frame #6: 0x00000001232ea538 MyAppTests`ObjC metadata update function for MainScheduler at <compiler-generated>:0
    frame #7: 0x00000001fb7d9404 libobjc.A.dylib`realizeClassMaybeSwiftMaybeRelock(objc_class*, mutex_tt<false>&, bool) + 248
    frame #8: 0x00000001fb7cd958 libobjc.A.dylib`realizeAllClasses() + 100
    frame #9: 0x00000001fb7d08d8 libobjc.A.dylib`objc_copyClassList + 120
    frame #10: 0x000000011c290550 XCTest`+[XCTestCase(RuntimeUtilities) _allSubclasses] + 76
    frame #11: 0x000000011c290690 XCTest`+[XCTestCase(RuntimeUtilities) allSubclasses] + 24
    frame #12: 0x000000011c2262d4 XCTest`+[XCTestSuite _suiteForBundleCache] + 216
    frame #13: 0x000000011c228718 XCTest`-[XCTestSuite _initWithTestConfiguration:] + 508
    frame #14: 0x000000011c228f70 XCTest`+[XCTestSuite testSuiteForTestConfiguration:] + 56
    frame #15: 0x000000011c2a7814 XCTest`__44-[XCTTestRunSession runTestsAndReturnError:]_block_invoke + 104
    frame #16: 0x000000011c2a795c XCTest`__44-[XCTTestRunSession runTestsAndReturnError:]_block_invoke.84 + 108
    frame #17: 0x000000011c240b10 XCTest`-[XCTestObservationCenter _observeTestExecutionForBlock:] + 512
    frame #18: 0x000000011c2a7620 XCTest`-[XCTTestRunSession runTestsAndReturnError:] + 596
    frame #19: 0x000000011c20bdfc XCTest`-[XCTestDriver runTestsAndReturnError:] + 428
    frame #20: 0x000000011c292148 XCTest`_XCTestMain + 2400
    frame #21: 0x000000011bb657d4 libXCTestBundleInject.dylib`__RunTests_block_invoke_2 + 16
    frame #22: 0x00000001fc57e10c CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__ + 20
    frame #23: 0x00000001fc57da10 CoreFoundation`__CFRunLoopDoBlocks + 272
    frame #24: 0x00000001fc578a74 CoreFoundation`__CFRunLoopRun + 1024
    frame #25: 0x00000001fc578354 CoreFoundation`CFRunLoopRunSpecific + 436
    frame #26: 0x00000001fe77879c GraphicsServices`GSEventRunModal + 104
    frame #27: 0x0000000228b63b68 UIKitCore`UIApplicationMain + 212
  * frame #28: 0x000000010435b3f0 MyApp`main at AppDelegate.swift:14
```

**RxSwift/RxCocoa/RxBlocking/RxTest version/commit**

  _version or commit here_

**Platform/Environment**

  - [x] iOS


**How easy is to reproduce? (chances of successful reproduce after running the self contained code)**

  - [x] easy, 100% repro

**Xcode version**:

```
  Xcode 11.3 beta(11C24b)
```

**Installation method**:
  - [x] CocoaPods


**I have multiple versions of Xcode installed**:
  (so we can know if this is a potential cause of your issue)
  - [x] no

**Level of RxSwift knowledge**:
  (this is so we can understand your level of knowledge
    and formulate the response in an appropriate manner)
  - [ ] I have a significant code base

I get the following error, when trying to setup RxSwift using the Package.swift installation file:
```
nlykkei-mbp:rxswift nlykkei$ swift build
error: cyclic dependency declaration found: RxTestProject -> RxTestProject
```

How can I fix this? Everything works using CocoaPods.

```
nlykkei-mbp:rxswift nlykkei$ cat Package.swift 
// swift-tools-version:5.0

import PackageDescription

let package = Package(
  name: "RxTestProject",
  dependencies: [
    .package(url: "https://github.com/ReactiveX/RxSwift.git", from: "5.0.0")
  ],
  targets: [
    .target(name: "RxTestProject", dependencies: ["RxSwift", "RxCocoa"])
  ]
)
```

**Short description of the issue**:

I found a `throttle` bug.

```
_ = Observable<Void>.merge(Observable.just(()), Observable.just(()).delay(.milliseconds(500), scheduler: MainScheduler.instance))
	.throttle(.seconds(1), latest: false, scheduler: MainScheduler.instance)
	.debug("Doesn't Work")
	.subscribe()


_ = Observable<Void>.merge(Observable.just(()), Observable.just(()).delay(.milliseconds(500), scheduler: MainScheduler.instance))
	.throttle(.milliseconds(1000), latest: false, scheduler: MainScheduler.instance)
	.debug("works")
	.subscribe()
```

**Expected outcome**:

Each of the two observable chains above should emit a single next event.

**What actually happens**:

The "Doesn't Work" chain emits two events.

**RxSwift/RxCocoa/RxBlocking/RxTest version/commit**

5.0.0

**Platform/Environment**

  - [X] iOS
  - [ ] macOS
  - [ ] tvOS
  - [ ] watchOS
  - [ ] playgrounds

**How easy is to reproduce? (chances of successful reproduce after running the self contained code)**

  - [X] easy, 100% repro
  - [ ] sometimes, 10%-100%
  - [ ] hard, 2% - 10%
  - [ ] extremely hard, %0 - 2%

**Xcode version**:

```
11.1
```
**Installation method**:
  - [X] CocoaPods
  - [ ] Carthage
  - [ ] Git submodules

**I have multiple versions of Xcode installed**:
  (so we can know if this is a potential cause of your issue)
  - [ ] yes (which ones)
  - [X] no

**Level of RxSwift knowledge**:
  (this is so we can understand your level of knowledge
    and formulate the response in an appropriate manner)
  - [ ] just starting
  - [ ] I have a small code base
  - [X] I have a significant code base

## Background

Using with `TRACE_RESOURCES` option, `RecursiveLock` increases the resource count on initialization and decreases it on deallocation. But if you create a static lock instance, it will never get deallocated so the resource count will not decrease.

This PR introduces `StaticRecursiveLock` class that doesn't increase or decrease the resource count on initialization and deallocation.

## Discussion

Theoretically, the static instance is not deallocated so the resource count should not be decreased. But I think `Resources.total` is intended to be used for debugging unexpectedly retained objects.
This is blocked until we merge #2077. 

With function builders, we can enhance the standard initializer to get a nicer SwiftUI-like syntax, as follows:

```swift
self.disposeBag = DisposeBag { 
    thing.bind(to: otherThing)
    driver.drive(to: textField.rx.text)
    observable.debug("x").subscribe()
}
```
# Description

run demo, click the first row, navigate to `Example1_CustomizationUsingTableViewDelegate`

> 2019-10-02 23:37:03.091294+0800 Example[6933:116418] [TableView] Warning once only: UITableView was told to layout its visible cells and other contents without being in the view hierarchy (the table view or one of its superviews has not been added to a window). This may cause bugs by forcing views inside the table view to load and perform layout without accurate information (e.g. table view bounds, trait collection, layout margins, safe area insets, etc), and will also cause unnecessary performance overhead due to extra layout passes. Make a symbolic breakpoint at UITableViewAlertForLayoutOutsideViewHierarchy to catch this in the debugger and see what caused this to occur, so you can avoid this action altogether if possible, or defer it until the table view has been added to a window. Table view: <UITableView: 0x7f9dd2063600; frame = (-19.5 -146.5; 414 896); clipsToBounds = YES; autoresize = RM+BM; gestureRecognizers = <NSArray: 0x600001416af0>; layer = <CALayer: 0x600001a203c0>; contentOffset: {0, 0}; contentSize: {414, 0}; adjustedContentInset: {0, 0, 0, 0}; dataSource: <RxCocoa.RxTableViewDataSourceProxy: 0x600003e606c0>>

# Advice
修改`/RxCocoa/Common/DelegateProxyType.swift`中的
```Swift
object.layoutIfNeeded()
```
为
```Swift
if let tv = object as? UITableView {
    if tv.window != nil {
        object.layoutIfNeeded()
    }
} else {
    object.layoutIfNeeded()
}
```

I am referring to RxCocoa for macOS.

```
        disposable.insert(textField.rx.delegate             
            .methodInvoked(#selector(NSTextFieldDelegate.control(_:textView:doCommandBy:)))
            .asObservable()
            .map({ $0[2] as! Selector })
            .subscribe(onNext: { v in
                print(v)
            }))
```

The onNext function is not being called.

`rx.text` appears to be working.
## Description
This pull request exposed four new functions in `Maybe` trait, allow `Maybe` to be converted to `Single` and `Completable`.

## Motivation
I have encountered a limitation in RxSwift that I am not able to chain `Maybe` traits with `Single` and `Completable`. The example below demonstrate my use cases.
 
### Example
I have 3 function for getting and setting the objects.
```
func getInt() -> Single<Int>
func getInt2(_ id: Int) -> Single<Int>
func setInt(_ id: Int) -> Completable
```
This pull request enable us to do the following chaining.
```
getInt().filter { $0 == "" } // Single.filter coverts Single to Maybe trait
    .flatMapSingle(getInt2)
    .flatMapCompletable(setInt)
    .subscribe()
```

 
**Short description of the issue**:

Hi, I modify the last sample name "GitHub Search Repositories", i use willDisplayCell way to trigger  load next page and it's work
```
let loadNextPageTrigger: (Driver<GitHubSearchRepositoriesState>) -> Signal<GitHubCommand> =  { state in
            return state.flatMapLatest { [unowned self] state in
                guard !state.shouldLoadNextPage else {
                    return Signal.empty()
                }
                
                return self.collectionView.rx.willDisplayCell
                    .asSignal()
                    .filter({ (cell, indexPath)  in
                        indexPath.row == state.repositories.value.count - 10
                    })
                    .map { _ in return Signal.just(())}
            }
        }
```
But when i change tableView to CollectionView, trigger load next page,  the collectionView become empty. I am sure that has value when load next page. 

**Self contained code example that reproduces the issue**:
Sample, minimal project: https://github.com/healmax/RxSwiftCollectionViewLoadNextPage