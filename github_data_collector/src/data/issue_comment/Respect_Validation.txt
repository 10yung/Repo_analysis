```
try {
        $dict = ['name' => 42, 'year' => 42];

        v::keySet(
            v::key('name', v::stringType()),
            v::key('year', v::intVal()->between(10, 20)->in([12, 14])),
        )->assert($dict);
    } catch (NestedValidationException $e) {
        echo $e->getFullMessage();
    }
```

**Expected**
```
- All of the required rules must pass for { "name": 42, "year": 42 }
  - name must be a string
  - These rules must pass for year
    - year must be less than or equal to 20
    - year must be in { 12, 14 }
```

**Current**
```
- All of the required rules must pass for { "name": 42, "year": 42 }
  - name must be a string
  - These rules must pass for year
    - year must be less than or equal to 20
  - year must be in { 12, 14 }
```
` Validator::CurrencyCode()->validate('')`
The behavior of this validation changes from v1.1.29 to v1.1.31.

> valid-1.1.29: Validator::CurrencyCode()->validate('') RESULT : FALSE
> valid-1.1.31: Validator::CurrencyCode()->validate('') RESULT : TRUE
>

This should be documented somewhere, it took a while to find out.
How to pass the extra parameter to the $ruleName, like max($minValue, $inclusive = true), 
`v::keyValue('min_count', 'max', 'max_count')`
if I want to pass $inclusive as false, what should I do?
Refer: [PSR12](https://www.php-fig.org/psr/psr-12/#3-declare-statements-namespace-and-import-statements) 
Hi!

I have  an issue using the {{minValue}} and {{maxValue}} messages

I use as follows:
`v :: notEmpty () -> numeric () -> not (v :: negative ()) -> min (30) -> max (200);`

I pass errors to my class  translator by calling the translate method. The class translator works 100%, because using:
`v :: notEmpty () -> length (2);` - I expect to get a value of 2 in {{minValue}} and get it

But when using:
`v :: notEmpty () -> numeric () -> not (v :: negative ()) -> min (30) -> max (200); `
- I expect in {{minValue}} (as in the documentation for min) - 30, and in {{maxValue}} (as in the documentation for max) - 200, and then try to use {{minValue}} and {{maxValue} } in the text of the translation, similar to length, but instead I get: "The value has to be not more {{maxValue}}" or "The value has to be not less {{minValue}}"

Those these values ​​do not fall into the translator. What could be the problem?
My security scanner is giving me 18 suspicious code warnings from your code:

1. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/AbstractComposite.php

Found 1 issues.

The function eval called at line 116 column 24, which should be avoided whenever possible.

2. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/AbstractRelated.php

Found 1 issues.

The function eval called at line 57 column 21, which should be avoided whenever possible.

3. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/AbstractRule.php

Found 2 issues.

The function eval called at line 27 column 21, which should be avoided whenever possible.

The function eval called at line 37 column 23, which should be avoided whenever possible.

4. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/AbstractWrapper.php

Found 2 issues.

The function eval called at line 30 column 21, which should be avoided whenever possible.

The function eval called at line 32 column 41, which should be avoided whenever possible.

5. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/AllOf.php

Found 1 issues.

The function eval called at line 16 column 21, which should be avoided whenever possible.

6. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/Domain.php

Found 2 issues.

The function eval called at line 80 column 21, which should be avoided whenever possible.

The function eval called at line 105 column 25, which should be avoided whenever possible.

7. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/Each.php

Found 3 issues.

The function eval called at line 28 column 21, which should be avoided whenever possible.

The function eval called at line 39 column 43, which should be avoided whenever possible.

The function eval called at line 47 column 42, which should be avoided whenever possible.

8. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/Iterable.php

Found 1 issues.

The function eval called at line 13 column 5, which should be avoided whenever possible.

9. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/KeySet.php

Found 2 issues.

The function eval called at line 121 column 21, which should be avoided whenever possible.

The function eval called at line 125 column 24, which should be avoided whenever possible.

10. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/KeyValue.php

Found 2 issues.

The function eval called at line 67 column 21, which should be avoided whenever possible.

The function eval called at line 72 column 20, which should be avoided whenever possible.

11. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/NoneOf.php

Found 1 issues.

The function eval called at line 16 column 21, which should be avoided whenever possible.

12. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/Not.php

Found 1 issues.

The function eval called at line 38 column 21, which should be avoided whenever possible.

13. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/OneOf.php

Found 1 issues.

The function eval called at line 18 column 21, which should be avoided whenever possible.

14. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/Optional.php

Found 2 issues.

The function eval called at line 28 column 21, which should be avoided whenever possible.

The function eval called at line 34 column 24, which should be avoided whenever possible.

15. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/Sf.php

Found 1 issues.

The function eval called at line 56 column 21, which should be avoided whenever possible.

16. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/When.php

Found 3 issues.

The function eval called at line 44 column 21, which should be avoided whenever possible.

The function eval called at line 47 column 33, which should be avoided whenever possible.

The function eval called at line 50 column 29, which should be avoided whenever possible.

17. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Rules/Zend.php

Found 1 issues.

The function eval called at line 47 column 21, which should be avoided whenever possible.

18. File Location: /wp-content/plugins/tainacan/vendor/respect/validation/library/Validatable.php

Found 1 issues.

The function eval called at line 17 column 21, which should be avoided whenever possible.
This is my first PR, so apologies if I did something wrong. User RCooler has opened issue #820 and this PR is a small addition in PostalCode.php containg regex for Cayman Islands (KY).
Hi,
Within your **Message localization** last sentence states that 
> Note that getMessage() will keep the original message.

But when i apply translation even getMessage() returns the translated message.
Below is the sample code.
```PHP
<?php
namespace MyApp;

use Respect\Validation\Validator as v;
use Respect\Validation\Exceptions\ValidationException;
class Validation {

    public static function myTranslator(){
        return 'Translated Message : {{name}} must contain only letters (a-z) and some allowed chars are {{additionalChars}}';
    }

    public static function testVal($value){
        try{
            v::alpha('56')->notEmpty()->setName('Name ')->check($value);
        } catch(ValidationException $e){
	    $e->setParam('translator', '\MyApp\Validation::myTranslator');
            var_dump($e->getMessage());
            var_dump($e->getMainMessage());
        }
        return true;
    }
}
$res = Validation::testVal('John 7');
```
Even your original template contains extra double quotes around additionalchars variable.

Example:
```php 
 v::age($format='d/m/Y')->age(18)->validate('01/01/1996') // is false
```
the $format argument it's useful for validate the value format.

Example:
```php 
v::minimumAge(18, $format='d/m/Y')->validate('01/01/1996') // is true
```
the $format argument it's useful for format the value.
Changed regex for IL to allow 5 and 7 digits.
Reason: In 2013, after the introduction of the 7 digit codes, 5 digit codes were still being used widely.
https://en.wikipedia.org/wiki/List_of_postal_codes