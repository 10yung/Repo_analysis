
Is there anyway to import the functions defined in a free trait inside a module?
Say my module has this definition: `val algorithm: Algorithm` where Algorithm is a free monad. I can call the functions like `algorithm.sort(x)`. However, I'd like to import everything defined like `import algorithm._` and call functions like `sort(x)`. Is this possible?
Seems as if intelliJ is using  jdk 11,eventhough  in Project Structur I changed the SDK to jdk 8 already.

Console:

/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home/bin/java -agentlib:jdwp=transport=dt_socket,address=localhost:64076,suspend=n,server=y -Xdebug -server -Xmx1536M -Didea.managed=true -Dfile.encoding=UTF-8 -Didea.runid=2018.2.1+4-88400d3f -jar "/Users/jennifer/Library/Application Support/IdeaIC2018.3/Scala/launcher/sbt-launch.jar" idea-shell
Listening for transport dt_socket at address: 64076
error: error while loading package, Missing dependency 'object java.lang.Object in compiler mirror', required by /Users/jennifer/.sbt/boot/scala-2.10.4/lib/scala-library.jar(scala/package.class)
error: error while loading package, Missing dependency 'object java.lang.Object in compiler mirror', required by /Users/jennifer/.sbt/boot/scala-2.10.4/lib/scala-library.jar(scala/runtime/package.class)
scala.reflect.internal.MissingRequirementError: object java.lang.Object in compiler mirror not found.
	at scala.reflect.internal.MissingRequirementError$.signal(MissingRequirementError.scala:16)
	at scala.reflect.internal.MissingRequirementError$.notFound(MissingRequirementError.scala:17)
	at scala.reflect.internal.Mirrors$RootsBase.getModuleOrClass(Mirrors.scala:48)
	at scala.reflect.internal.Mirrors$RootsBase.getModuleOrClass(Mirrors.scala:40)
	at scala.reflect.internal.Mirrors$RootsBase.getModuleOrClass(Mirrors.scala:40)
	at scala.reflect.internal.Mirrors$RootsBase.getModuleOrClass(Mirrors.scala:61)
	at scala.reflect.internal.Mirrors$RootsBase.getClassByName(Mirrors.scala:99)
	at scala.reflect.internal.Mirrors$RootsBase.getRequiredClass(Mirrors.scala:102)
	at scala.reflect.internal.Definitions$DefinitionsClass.ObjectClass$lzycompute(Definitions.scala:264)
	at scala.reflect.internal.Definitions$DefinitionsClass.ObjectClass(Definitions.scala:264)
	at scala.reflect.internal.Definitions$DefinitionsClass.AnyRefClass$lzycompute(Definitions.scala:263)
	at scala.reflect.internal.Definitions$DefinitionsClass.AnyRefClass(Definitions.scala:263)
	at scala.reflect.internal.Definitions$DefinitionsClass.specialPolyClass(Definitions.scala:1120)
	at scala.reflect.internal.Definitions$DefinitionsClass.RepeatedParamClass$lzycompute(Definitions.scala:407)
	at scala.reflect.internal.Definitions$DefinitionsClass.RepeatedParamClass(Definitions.scala:407)
	at scala.reflect.internal.Definitions$DefinitionsClass.syntheticCoreClasses$lzycompute(Definitions.scala:1154)
	at scala.reflect.internal.Definitions$DefinitionsClass.syntheticCoreClasses(Definitions.scala:1152)
	at scala.reflect.internal.Definitions$DefinitionsClass.symbolsNotPresentInBytecode$lzycompute(Definitions.scala:1196)
	at scala.reflect.internal.Definitions$DefinitionsClass.symbolsNotPresentInBytecode(Definitions.scala:1196)
	at scala.reflect.internal.Definitions$DefinitionsClass.init(Definitions.scala:1261)
	at scala.tools.nsc.Global$Run.<init>(Global.scala:1290)
	at sbt.compiler.Eval$$anon$1.<init>(Eval.scala:141)
	at sbt.compiler.Eval.run$lzycompute$1(Eval.scala:141)
	at sbt.compiler.Eval.run$1(Eval.scala:141)
	at sbt.compiler.Eval.unlinkAll$1(Eval.scala:144)
	at sbt.compiler.Eval.evalCommon(Eval.scala:153)
	at sbt.compiler.Eval.eval(Eval.scala:96)
	at sbt.EvaluateConfigurations$.evaluateDslEntry(EvaluateConfigurations.scala:177)
	at sbt.EvaluateConfigurations$$anonfun$9.apply(EvaluateConfigurations.scala:117)
	at sbt.EvaluateConfigurations$$anonfun$9.apply(EvaluateConfigurations.scala:115)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
	at scala.collection.AbstractTraversable.map(Traversable.scala:105)
	at sbt.EvaluateConfigurations$.evaluateSbtFile(EvaluateConfigurations.scala:115)
	at sbt.Load$.sbt$Load$$loadSettingsFile$1(Load.scala:712)
	at sbt.Load$$anonfun$sbt$Load$$memoLoadSettingsFile$1$1.apply(Load.scala:717)
	at sbt.Load$$anonfun$sbt$Load$$memoLoadSettingsFile$1$1.apply(Load.scala:716)
	at scala.collection.MapLike$class.getOrElse(MapLike.scala:128)
	at scala.collection.AbstractMap.getOrElse(Map.scala:58)
	at sbt.Load$.sbt$Load$$memoLoadSettingsFile$1(Load.scala:716)
	at sbt.Load$$anonfun$loadFiles$1$2.apply(Load.scala:723)
	at sbt.Load$$anonfun$loadFiles$1$2.apply(Load.scala:723)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
	at scala.collection.AbstractTraversable.map(Traversable.scala:105)
	at sbt.Load$.loadFiles$1(Load.scala:723)
	at sbt.Load$.discoverProjects(Load.scala:734)
	at sbt.Load$.discover$1(Load.scala:545)
	at sbt.Load$.loadTransitive(Load.scala:574)
	at sbt.Load$.loadProjects$1(Load.scala:442)
	at sbt.Load$.loadUnit(Load.scala:446)
	at sbt.Load$$anonfun$18$$anonfun$apply$11.apply(Load.scala:281)
	at sbt.Load$$anonfun$18$$anonfun$apply$11.apply(Load.scala:281)
	at sbt.BuildLoader$$anonfun$componentLoader$1$$anonfun$apply$4$$anonfun$apply$5$$anonfun$apply$6.apply(BuildLoader.scala:91)
	at sbt.BuildLoader$$anonfun$componentLoader$1$$anonfun$apply$4$$anonfun$apply$5$$anonfun$apply$6.apply(BuildLoader.scala:90)
	at sbt.BuildLoader.apply(BuildLoader.scala:140)
	at sbt.Load$.loadAll(Load.scala:334)
	at sbt.Load$.loadURI(Load.scala:289)
	at sbt.Load$.load(Load.scala:285)
	at sbt.Load$.load(Load.scala:276)
	at sbt.Load$.apply(Load.scala:130)
	at sbt.GlobalPlugin$.build(GlobalPlugin.scala:33)
	at sbt.GlobalPlugin$.load(GlobalPlugin.scala:39)
	at sbt.Load$.loadGlobal(Load.scala:88)
	at sbt.Load$.defaultWithGlobal(Load.scala:63)
	at sbt.Load$.defaultLoad(Load.scala:34)
	at sbt.BuiltinCommands$.doLoadProject(Main.scala:481)
	at sbt.BuiltinCommands$$anonfun$loadProjectImpl$2.apply(Main.scala:475)
	at sbt.BuiltinCommands$$anonfun$loadProjectImpl$2.apply(Main.scala:475)
	at sbt.Command$$anonfun$applyEffect$1$$anonfun$apply$2.apply(Command.scala:58)
	at sbt.Command$$anonfun$applyEffect$1$$anonfun$apply$2.apply(Command.scala:58)
	at sbt.Command$$anonfun$applyEffect$2$$anonfun$apply$3.apply(Command.scala:60)
	at sbt.Command$$anonfun$applyEffect$2$$anonfun$apply$3.apply(Command.scala:60)
	at sbt.Command$.process(Command.scala:92)
	at sbt.MainLoop$$anonfun$1$$anonfun$apply$1.apply(MainLoop.scala:98)
	at sbt.MainLoop$$anonfun$1$$anonfun$apply$1.apply(MainLoop.scala:98)
	at sbt.State$$anon$1.process(State.scala:184)
	at sbt.MainLoop$$anonfun$1.apply(MainLoop.scala:98)
	at sbt.MainLoop$$anonfun$1.apply(MainLoop.scala:98)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:17)
	at sbt.MainLoop$.next(MainLoop.scala:98)
	at sbt.MainLoop$.run(MainLoop.scala:91)
	at sbt.MainLoop$$anonfun$runWithNewLog$1.apply(MainLoop.scala:70)
	at sbt.MainLoop$$anonfun$runWithNewLog$1.apply(MainLoop.scala:65)
	at sbt.Using.apply(Using.scala:24)
	at sbt.MainLoop$.runWithNewLog(MainLoop.scala:65)
	at sbt.MainLoop$.runAndClearLast(MainLoop.scala:48)
	at sbt.MainLoop$.runLoggedLoop(MainLoop.scala:32)
	at sbt.MainLoop$.runLogged(MainLoop.scala:24)
	at sbt.StandardMain$.runManaged(Main.scala:53)
	at sbt.xMain.run(Main.scala:28)
	at xsbt.boot.Launch$$anonfun$run$1.apply(Launch.scala:109)
	at xsbt.boot.Launch$.withContextLoader(Launch.scala:128)
	at xsbt.boot.Launch$.run(Launch.scala:109)
	at xsbt.boot.Launch$$anonfun$apply$1.apply(Launch.scala:35)
	at xsbt.boot.Launch$.launch(Launch.scala:117)
	at xsbt.boot.Launch$.apply(Launch.scala:18)
	at xsbt.boot.Boot$.runImpl(Boot.scala:56)
	at xsbt.boot.Boot$.main(Boot.scala:18)
	at xsbt.boot.Boot.main(Boot.scala)
[error] scala.reflect.internal.MissingRequirementError: object java.lang.Object in compiler mirror not found.
[error] Use 'last' for the full log.
Project loading failed: (r)etry, (q)uit, (l)ast, or (i)gnore? 
Some elements on the `sidebar-nav` (documentation area) do not appear as active when they are selected.
Good day! Interesting project, this is and has some nice integrations!

As a newbie I'm looking at http://frees.io/docs/integrations/play/ and as a potential user, I am confused as to what I can do with this. The example of 'Noop' and sending out a static result is a fairly uncommon use case. 

It would be nice if the Play integration example looked as comprehensive as that for http4s - http://frees.io/docs/integrations/http4s/
Example in https://github.com/slamdata/matryoshka/blob/master/tests/shared/src/test/scala/matryoshka/exp/package.scala

But also applies to other fixpoint types Mu and Nu and Cofree. Free integration would be nice too.
@raulraja could you review this PR please?

- Font color chart
- Opacity background chart
- Margin top/bottom canvas element
We will fix the styles that are in the optimization section of the charts.
Sometimes you want to run operation in parallel that depends on a previous result that may be an option, for example:

```scala
for {
  someOption <- op1
  val op2 = someOption.map(op2).getOrElse(FreeS.pure(()))
  val op3 = someOption.map(op3).getOrElse(FreeS.pure(()))
  _ <- (op2, op3).tupled
} yield ()
```

Currently you cannot do this as `FreeS.pure` returns `FreeS[F, A]` and not `FreeS.Par[F, A]`. For now I just wrote an additional utilities algebra with one of the operations being `pure` and that gives me the type that allows for parallelism.
```scala
trait CassandraAsyncContext{
  trait Quoted[T]{
    def query: String
  }
}
trait Context {
  val context: CassandraAsyncContext
}

@free trait CassandraAlgebra extends Context {
  def runSingle[T(q: context.Quoted[T]): FS[List[T]]
}
```
after macro generation, trait `Context` got removed.