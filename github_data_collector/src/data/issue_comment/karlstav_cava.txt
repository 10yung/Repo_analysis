The ncurses backend contains a call to `reset` during cleanup. `reset` contains this code:

```c
    if (settle) {
	(void) putc('\r', stderr);
	(void) fflush(stderr);
	(void) napms(1000);	/* Settle the terminal. */
    }
```

(https://github.com/enthought/ncurses-5.5/blob/master/progs/tset.c#L962)

The code dates back to (at least) 1979, and is there for physical terminals that needed time to reset. Terminal emulators don't have such a need, so resetting the screen ourselves by sending the appropriate codes (as per terminfo) would speed up Ctrl+C by (at least) 1 second.

I noticed the call to `reset` was added by [this commit](https://github.com/karlstav/cava/commit/8d73947696f30888e1b260520318a67d55d19c57#diff-b5cc6870fd48981b2eb151abf58d51e8R231). Would it be possible to get a bit more background on the change? The colors still remain messed up in `urxvt` with gradient + `reset` after exiting, but are fine without gradient even without the `reset`.

Hello,

I'm here from foobar2k + `foo_musical_spectrum` on windows. For the most part this does a fantastic job but there's something I really miss.

I found that fb2k + musical spectrum having the bins at each semitone worked particularly well for 'watching my music'. 

![image](https://user-images.githubusercontent.com/20903656/70025964-75ffb400-15d9-11ea-9d6a-0e92232bc910.png)

Something that I imagine wouldn't be too much work, but would be very nice, is to add a "Music mode" in config which  I envision as operating a bit like so:
```
[musical]

# whether to use 'musical' mode. This overrides bars, lower_cutoff_freq, and higher_cutoff_freq
; enabled = false

# the range of notes to create bars for (every semitone inbetween, inclusive)
; lowest_note = A1
; hightest_note = C9

; min_volume_dbfs = -60
; max_volume_dbfs = 0

; peaks = true
# how long to hold peak for, in ms
; peak_hold = 500
# Gravity in db/s^2
; peak_gravity = 50
```

I imagine an end result like this

```
 -20dB                                                                                    ▃
                                                                ▅                         █
                                                                █                       ▁ █
                                                                █                       ▁ █
                                                                █                       █ █
                                                                █                       █ █
 -30dB                                                          █                       █ █              	
                                                                █ ▅                     █ █ ▁
                                                                █ █                     █ █
                                                                █ █                     █ █ ▃
                                                                █ █                     █ █ █
                                                                █ █                     █ █ █            	
 -40dB                                                          █ █                     █ █ █       ▁     ▁     ▇                     ▂	        ▄ ▆
                                                    ▁           █ █                     █ █ █             █     █                     █         █ █
                                                              ▃ █ █                     █ █ █       ▁     █ ▃   █         ▃     ▅     █         █ █ ▅
                                                              █ █ █                     █ █ █       █     █ █   █ ▄       █ ▄   █     █     ▃   █ █ █
                                                              █ █ █                   ▇ █ █ █       █     █ █   █ █       █ █   █ ▃   █   ▄ █ ▄ █ █ █
                                                              █ █ █                   █ █ █ █       █   ▄ █ █   █ █     ▃ █ █   █ █ █ █ ▁ █ █ █ █ █ █ ▆
 -50dB          ▁                                     ▁       █ █ █                 ▆ █ █ █ █ ▁     █   █ █ █   █ █ ▃   █ █ █ ▇ █ █ █ █ █ █ █ █ █ █ █ █
              ▁   ▁                                           █ █ █           ▁ ▁   █ █ █ █ █ █ ▁   █   █ █ █ ▆ █ █ █   █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █
                ▄	▁ ▁               ▁                 ▁ █ █ █ ▅         █ █ ▆ █ █ █ █ █ █ █   █ ▄ █ █ █ █ █ █ █   █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █
              █ █       ▁           ▁             ▁ ▄       ▂ █ █ █ █         █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █
              █ █   ▄ ▁ ▇ ▁         ▆   ▃   ▅       █   ▆ ▄ █ █ █ █ █ ▅   ▃ ▇ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █
            ▁ █ █ ▂ █ █ █   ▁ ▃   ▂ █ ▂ █   █   ▂ ▆ █ █ █ █ █ █ █ █ █ █ ▅ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █
 -60dB  ▁ ▂ ▆ █ █ █ █ █ █ ▂ ▇ █ █ █ █ █ █ ▁ █ ▆ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █
        A   B C1  D   E F   G   A   B C2  D   E F   G   A   B C3  D   E F   G   A   B C4  D   E F   G   A   B C5  D   E F   G   A   B C6  D   E F   G   
```

Better low-frequency resolution would also be nice, but that's being discussed in #268

Thanks!

tecosaur
I have some problems running cava in tmux with urxvt-256. Let me give you my configs:

.Xresources:

```
URxvt*cursorUnderline: true
URxvt*scrollBar: false 
URxvt*internalBorder: 15
URxvt*externalBorder: 15
URxvt*buffered: true
URxvt*letterSpace: 0
URxvt*inheritPixmap: false
URxvt.termName: xterm-256color
  
#define font1         RobotoMono Nerd Font Mono
#define font2         DejaVu Sans Mono Nerd Font
#define font3         DejaVu Sans Mono Nerd Font
#define font4         DejaVu Sans Mono Nerd Font
  
URxvt*font:           xft:font1:pixelsize=18
```

cava-config:

```
## Configuration file for CAVA. Default values are commented out. Use either ';' or '#' for commenting.


[general]

# Smoothing mode. Can be 'normal', 'scientific' or 'waves'. DEPRECATED as of 0.6.0
mode = normal
 
# Accepts only non-negative values.
framerate = 144

# 'autosens' will attempt to decrease sensitivity if the bars peak. 1 = on, 0 = off
# new as of 0.6.0 autosens of low values (dynamic range)
# 'overshoot' allows bars to overshoot (in % of terminal height) without initiating autosens. DEPRECATED as of 0.6.0
autosens = 1
; overshoot = 20

# Manual sensitivity in %. Autosens must be turned off for this to take effect.
# 200 means double height. Accepts only non-negative values.
; sensitivity = 100

# The number of bars (0-200). 0 sets it to auto (fill up console).
# Bars' width and space between bars in number of characters.
bars = 0
bar_width = 2
bar_spacing = 1


# Lower and higher cutoff frequencies for lowest and highest bars
# the bandwidth of the visualizer.
# Note: there is a minimum total bandwidth of 43Mhz x number of bars.
# Cava will automatically increase the higher cutoff if a too low band is specified.
; lower_cutoff_freq = 50
; higher_cutoff_freq = 10000

# FFT buffer is set in the exponent of 2 and must be between 8 - 16, 8 = 256, 16 = 65536
# this is the audio buffer used to create the spectrum
# increasing the will improve the accuracy of the visualization, 
# but will also make it slower and increase CPU usage
# anything below 10 and above 13 is considered experimental. 
; FFTbufferSize = 12;



[input]

# Audio capturing method. Possible methods are: 'pulse', 'alsa', 'fifo', 'sndio' or 'shmem'
# Defaults to 'pulse', 'alsa' or 'fifo', in that order, dependent on what support cava was built with.
#
# All input methods uses the same config variable 'source'
# to define where it should get the audio.
#
# For pulseaudio 'source' will be the source. Default: 'auto', which uses the monitor source of the default sink
# (all pulseaudio sinks(outputs) have 'monitor' sources(inputs) associated with them).
# 
# For alsa 'source' will be the capture device.
# For fifo 'source' will be the path to fifo-file.
# For shmem 'source' will be /squeezelite-AA:BB:CC:DD:EE:FF where 'AA:BB:CC:DD:EE:FF' will be squeezelite's MAC address
method = pulse
; source = auto

; method = alsa
; source = hw:Loopback,1

; method = fifo
; source = /tmp/mpd.fifo

; method = shmem
; source = /squeezelite-AA:BB:CC:DD:EE:FF

; method = portaudio
; source = auto 


[output]

# Ouput method. Can be 'ncurses', 'noncurses' or 'raw'. 
# 'noncurses' is for systems that does not suport ncurses.
# 'raw' is an 8 or 16 bit (configurable via the 'bit_format' option) data
# stream of the bar heights that can be used to send to other applications.
# 'raw' defaults to 200 bars, which can be adjusted in the 'bars' option above.
method = ncurses

# Visual channels. Can be 'stereo' or 'mono'.
# 'stereo' mirrors both channels with low frequencies in center.
# 'mono' outputs left to right lowest to highest frequencies.
# 'mono_option' set mono to either take input from 'left', 'right' or 'average'.
channels = stereo
; mono_option = average

# Raw output target. A fifo will be created if target does not exist.
; raw_target = /dev/stdout

# Raw data format. Can be 'binary' or 'ascii'.
; data_format = binary

# Binary bit format, can be '8bit' (0-255) or '16bit' (0-65530).
; bit_format = 16bit

# Ascii max value. In 'ascii' mode range will run from 0 to value specified here
; ascii_max_range = 1000

# Ascii delimiters. In ascii format each bar and frame is separated by a delimiters.
# Use decimal value in ascii table (i.e. 59 = ';' and 10 = '\n' (line feed)).
bar_delimiter = 59
frame_delimiter = 10



[color]

# Colors can be one of seven predefined: black, blue, cyan, green, magenta, red, white, yellow.
# Or defined by hex code '#xxxxxx' (hex code must be within ''). User defined colors requires a
# terminal that can change color definitions such as Gnome-terminal or rxvt.
; background = black
; foreground = cyan

# Gradient mode, only hex defined colors are supported, background must also be defined in hex
# or remain commented out. 1 = on, 0 = off. Warning: for certain terminal emulators cava will
# not able to restore color definitions on exit, simply restart your terminal to restore colors.
gradient = 1
gradient_count = 2
gradient_color_1 = '#318893'
gradient_color_2 = '#d53679'



[smoothing]

# Percentage value for integral smoothing. Takes values from 0 - 100.
# Higher values means smoother, but less precise. 0 to disable.
integral = 0

# Disables or enables the so-called "Monstercat smoothing" with or without "waves". Set to 0 to disable. 
monstercat = 0
waves = 0

# Set gravity percentage for "drop off". Higher values means bars will drop faster.
# Accepts only non-negative values. 50 means half gravity, 200 means double. Set to 0 to disable "drop off".
; gravity = 100


# In bar height, bars that would have been lower that this will not be drawn.
; ignore = 0


[eq]

# This one is tricky. You can have as much keys as you want.
# Remember to uncomment more then one key! More keys = more precision.
# Look at readme.md on github for further explanations and examples.
; 1 = 1 # bass
; 2 = 1
; 3 = 1 # midtone
; 4 = 1
; 5 = 1 # treble
```

tmux-config:

```
set-option -g mouse on
set -g status off
set-option -g default-shell "/bin/bash"
set -g pane-border-style fg=black
set -g pane-active-border-style "bg=black fg=black"
set-option -g default-terminal "xterm-256color"
set-option -sa terminal-overrides ",xterm-256color:Tc"
# C-c: save into system clipboard (+). With preselection.
bind C-c choose-buffer "run \"tmux save-buffer -b %% - | xclip -i -sel clipboard\" \; run \" tmux display \\\"Clipboard \(+\) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\\" \" "
# C-v: copy from + clipboard.
bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer" \; run "tmux display \"Copied from \(+\) $(xclip -o -sel clipboard | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""

# C-d: save into selection clipboard (*). With preselection.
bind C-d choose-buffer "run \"tmux save-buffer -b %% - | xclip -i\" \; run \" tmux display \\\"Clipboard \(*\) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\\" \" "
# C-f: copy from * clipboard.
bind C-f run "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer" \; run "tmux display \"Copied from \(*\) $(xclip -o | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""
```

So, to the problem, running cava directly in urxvt, it works perfect:
[
![2019-11-25-134349_712x580_scrot](https://user-images.githubusercontent.com/10048240/69541681-0743aa80-0f8a-11ea-82dd-7a3c4e6fde86.png)
](https://imgur.com/8QCek27)

Running inside tmux:

![2019-11-25-134453_712x580_scrot](https://user-images.githubusercontent.com/10048240/69541707-132f6c80-0f8a-11ea-829b-8104894a13cf.png)

Just cannot get it to work in tmux, no matter what I do...
would like a mode for average amplitude (based on FFT)
Since Cava itself does a good deal of processing to make pretty spectrums, it'd be great to be able to more easily use this in other applications that want to display spectrums.

Currently this is possible by using the raw data from the `raw` output mode, but using standard streams can cause issues with buffering, and using Cava from the command-line requires you to create a config file to use it, meaning any application wanting to use Cava would have to manage the lifetime of whatever config files it creates.

Making Cava compilable into a library that can be loaded by other applications would make developing around it less tedious and feel a little more "static."
(This is a courtesy bug report from [glava](https://github.com/wacossusca34/glava), which currently shares a good deal of the PulseAudio input code from `input/pulse.c`)

It's possible to encounter output issues (dropped fragments resulting in broken audio data) due to hardware input overrunning PulseAudio's audio buffer. A simple fix would be to set the `maxlength` member in `pa_buffer_attr` to `(uint32_t) -1` in order for the server to select an appropriate buffer size.

In the same vein, it's possible to encounter some fairly serious latency issues depending on the output device. This is because the requested fragment size doesn't actually affect how PulseAudio samples from the underlying hardware, only the server's (intermediate) buffer.

While it's possible to work around this by using a null sink instead, an ideal solution would be to use `pa_stream_connect_record`'s `pa_stream_flags_t` flags argument to specify `PA_STREAM_ADJUST_LATENCY`. Unfortunately the `pa_simple` API doesn't expose this.
Is it planned anytime soon? Cava could be quite useful in JACK setup.
`Makefile.am` sets `cava_LDFLAGS` to:

    cava_LDFLAGS = -L/usr/local/lib -Wl,-rpath /usr/local/lib

The arguments to `-L` and `-rpath` should probably be set based on the configured installation prefix, rather than using `/usr/local/lib` all the time.

I would additionally suggest that the `Makefile` should not be setting `-rpath` in any case.

```
pkgname=cava
pkgver=0.6.0
pkgrel=1

```
I am experiencing some random tearing with Cava (it happens once every 10 seconds or so). Not experiencing this with any other application.

Someone have simular issues out there or perhaps know where to look for clues to identify what could be wrong?
When ran without gradient cava can use my current colorscheme for background and foreground colors, but with gradient it does not. It uses the colorscheme (without gradient enabled) without me doing anything special. Here's the releant part of my config file.

```
[color]

# Colors can be one of seven predefined: black, blue, cyan, green, magenta, red, white, yellow.
# Or defined by hex code '#xxxxxx' (hex code must be within ''). User defined colors requires a
# terminal that can change color definitions such as Gnome-terminal or rxvt.
; background = black
; foreground = cyan

# Gradient mode, only hex defined colors are supported, background must also be defined in hex
# or remain commented out. 1 = on, 0 = off. Warning: for certain terminal emulators cava will
# not able to restore color definitions on exit, simply restart your terminal to restore colors.
gradient = 1
; gradient_color_1 = '#0099ff'
; gradient_color_2 = '#ff3399'
```

Can it use the scheme currently in use in the terminal or is that not supported yet?