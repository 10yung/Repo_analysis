Hello there, making use of your great Modern Driver and BIOS Management utilities quite extensively.

I have a Dell 9010 that has the following BIOS flash utility - O9010A30.exe and no other files.

![image](https://user-images.githubusercontent.com/17290500/44859095-5a398f80-ac6b-11e8-9c24-96e0d494d35b.png)

Will try and have a look at script myself tomorrow
I have Windows 10 LTSB 2015 (Build 10240) installed on a Dell Latitude E5550. When I run Invoke-CMApplyDriverPackage.ps1 on this machine the packages are detected and downloaded from SCCM however the invocation of pnputil does not work as the command line parameters are different than on newer Windows 10 builds.

```
Microsoft PnP Utility
Usage:
------
pnputil.exe [-f | -i] [ -? | -a | -d | -e ] <INF name>
Examples:
pnputil.exe -a a:\usbcam\USBCAM.INF      -> Add package specified by USBCAM.INF
pnputil.exe -a c:\drivers\*.inf          -> Add all packages in c:\drivers\
pnputil.exe -i -a a:\usbcam\USBCAM.INF   -> Add and install driver package
pnputil.exe -e                           -> Enumerate all 3rd party packages
pnputil.exe -d oem0.inf                  -> Delete package oem0.inf
pnputil.exe -f -d oem0.inf               -> Force delete package oem0.inf
pnputil.exe -?                           -> This usage screen
```
In _Invoke-CMDownloadDriverPackage.ps1_  when queryingOSImageVersion can sometimes return a build
version with a revision such as "10.0.15063.**296**" when comparing with the  package in SCCM 
it will not match "10.0.15063.0" and therefore not find the package.
Please consider having Virtual machine models return 0 in **Invoke-CMDownloadDriverPackage.ps1**. Since no drivers are needed it would be nice for the TS to continue when testing the TS in a virtual environment.

    if ($ComputerSystemType -notin @("Virtual Machine", "VMware Virtual Platform", "VirtualBox", "HVM domU", "KVM")) {
    ...
    } else {
        Write-CMLogEntry -Value "Virtual machine model. No drivers required." -Severity 2 ; exit 0
    }
Was looking at the logs and noticed that here in Arizona this happens:
`Get-WmiObject -Class Win32_TimeZone | Select-Object -ExpandProperty Bias`
Gives us
-420

A negative value added to the end of the $Time string can not be parsed by the Cmtrace tool.

so on line 57 I added an Absolute Value Function to the result:
`$Time = -join @((Get-Date -Format "HH:mm:ss.fff"), "+", [math]::abs((Get-WmiObject -Class Win32_TimeZone | Select-Object -ExpandProperty Bias)))`

I have no idea if this is the right thing to do, I just know it's the quick fix I had to put in place, I'm sure you have a better answer.
Thank you for writing this script! I've been using it for a while now but for some reason a new behavior is present that confuses me:
```
$TSPackageID = $TSEnvironment.Value("_SMSTSPackageID")
$OSImageVersion = $WebService.GetCMOSImageVersionForTaskSequence($SecretKey, $TSPackageID)
```
returns: 

> Retrieved OS Image version from web service: 10.0.14393.0 6.1.7601.23392 6.1.7601.23572


then when it enters the switch for $OSName it always returns:

> Determined OS name from version: Windows 7

This is not accurate as a Windows 10 image has been applied. This triggers: 

> Package does not meet computer model and manufacturer criteria: Drivers - Lenovo X260 - Windows 10 x64 
Empty driver package list detected, bailing out

Any thoughts in what may cause this to always flag Windows 7? 