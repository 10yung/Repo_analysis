### Environment

  * OS Version: VM Win 10
  * Node.js Version: v12.10.0

### Actual behavior
glob.sync("path/with/a (parethesis)/*") doesn't work
glob.sync(glob.escapePath("path/with/a (parethesis)/*")) doesn't work
glob.sync("path/with/a \(parethesis\)/\*") doesn't works
glob.sync("path/with/a \\\\(parethesis)/\\*") doesn't works

glob.sync("path/with/a \\\\(parethesis)/*") works
glob.sync("path/with/a \\\\(parethesis)/\*") works
glob.sync("path/with/a *parethesis*/\*") doesn't works

![image](https://user-images.githubusercontent.com/7854818/72375693-520cb380-36eb-11ea-8bbc-88ec6dff7466.png)



### Expected behavior
glob.sync(glob.escapePath("path/with/a (parethesis)/*")) should works

### Steps to reproduce
do a simple glob.sync() with some parenthesis in the name folder

### Code sample

```js
options = {
  cwd: "//VBOXSVR/Documents",
  caseSensitiveMatch: false,
  onlyDirectories: false,
  onlyFiles: false
}
glob.sync(glob.escapePath('ARQUIVOS - EMPRESAS/INNOVAFATTO (MATRIZ SP)/FISCAL/2019/12.2019/iss*'), options)
```

### Environment

  * OS Version: macOS 10.14.6
  * Node.js Version: 10.15.3

### Actual behavior
`glob` throws a TypeError when called with an empty string, but rejects with a TypeError when argument is `undefined` or `null`

### Expected behavior
The behaviour should be consistent. Either all the TypeErrors should be thrown or put in a rejection branch.

### Steps to reproduce

  1. run fast-glob with an empty string
  2. compare output to a run with undefined or null

### Code sample

```js
import fg from 'fast-glob'

console.log(fg('')) // TypeError: Expected a non-empty string

console.log(fg(null)) // Promise <rejected> TypeError: Patterns must be a string or an array of strings
```

#### Source issues

* #239 
* #147 
* #196 
* #198 

#### Code

https://github.com/mrmlnc/fast-glob/blob/0f7cdcf895f64b9983e7c17cbff42359df0e5bf1/src/providers/stream.ts#L11-L27
The change in [3.0.0](https://github.com/mrmlnc/fast-glob/releases/tag/3.0.0) that changed it to only allow forward slash paths turned out to be a pain. Anywhere I use `fast-glob`, I now need to specially normalize paths on Windows.

Would be useful if `fast-glob` had a `.convertToGlob()` kinda method, with similar logic to https://github.com/sindresorhus/del/commit/01da91f548a318f33a82e9f09eb27f4e5c6cb94b#diff-168726dbe96b3ce427e7fedce31bb0bcR41-R53.

Maybe there could even be some kind of option to loosen `fast-glob`, when you don't need glob escaping, but do need to accept both file paths and globs, which is actually the majority of cases, at least for me.
Require Node.js 10.10+

https://nodejs.org/en/about/releases/
https://github.com/nodelib/nodelib/issues/48
Currently it is not possible to stop a sync glob task. Let's say I run a glob to see if any file exists (similar to `Array.some()`) then I currently have to do:

```
fg.sync('pattern').length > 0
```
but it means that I still create the result. Ideally I would be able to:

```
fg.sync('pattern', { maxMatches: 1 }).length === 1
```
where `.sync` would exit once it has found `maxMatches` matches.

### What is the purpose of this pull request?

For `objectMode` the base path of entry should be return, otherwise we can't get the base path through the results.

### What changes did you make? (Give an overview)

- add `base` property for `Entry`
- add `basePath` param for `EntryTransformer.getTransformer(basePath: string)`

### Environment

  * OS Version: macOS 10.14
  * Node.js Version: 8.11.4

### Actual behavior
The output of fast-glob contains duplicates when using non-normalized paths in patterns (like `./file.txt`).

### Expected behavior
Duplicates should be avoided.

### Steps to reproduce & code sample

Let's assume the working directory contains the following files: `file1.txt` and `file2.txt`

```js
fastGlob.sync(['*', './file1.txt'])
// returns ['./file1.txt', 'file2.txt', 'file1.txt']
// where I'm expecting ['file1.txt', 'file2.txt']
```

I just wanted to raise the issue, though I'm not sure if this is an actual bug or if it's wanted.

Cheers
### Environment

  * OS Version: Manjaro Linux x86_64
  * Node.js Version: v11.8.0

### Actual behavior

```shell
(node:22393) UnhandledPromiseRejectionWarning: Error: EACCES: permission denied
```

### Steps to reproduce and Code sample

```shell
.
├── dir
│   ├── one
│   │   ├── a
│   │   │   └── 1.js
│   │   └── b
│   │       └── 2.js
│   └── two [error opening dir]
├── dir2
│   └── one
│       ├── a
│       │   └── 1.js
│       └── b
│           └── 2.js
├── fast-glob.js
├── package.json
└── package-lock.json
```

```js
// fast-glob.js
const fg = require('fast-glob');
fg(['+(dir|dir2)/one/**/*']).then((entries) => console.log(entries));
```

```shell
$ node fast-glob.js
(node:22859) UnhandledPromiseRejectionWarning: Error: EACCES: permission denied, scandir '/home/keenwon/Test/fast-glob-test/dir/two'
(node:22859) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:22859) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

current user doesn't have permission to access `dir/two`:

```shell
total 8.0K
drwxr-xr-x 4 keenwon keenwon 4.0K 2月  13 17:37 one
dr-x------ 2 root    root    4.0K 2月  13 17:54 two
```

Assume the future method is called `isMatch(filePath, patterns, options)`

then I want to achieve the follow:

```
fastGlob.isMatch('./package.json', ['src/*.json'])
// return false
```

Note: A hidden requirement is I want to keep the ability to constraint the patterns under specify scope (aka `cwd`). Otherwise i could use `micromatch` directly.

guided from https://github.com/sindresorhus/globby/issues/93