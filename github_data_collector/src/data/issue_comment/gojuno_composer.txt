Is it possible to add parameters to support running some specified test classes instead of whole test packages
A configuration that works on Mac doesn't work on Windows. These are the calls we're doing:

On mac: `java -jar composer-0.6.0.jar --apk app/build/outputs/apk/spain/debug/app-spain-debug.apk --test-apk app/build/outputs/apk/androidTest/spain/debug/app-spain-debug-androidTest.apk`

On windows: `java -jar composer-0.6.0.jar --apk "app/build/outputs/apk/spain/debug/app-spain-debug.apk" --test-apk "app/build/outputs/apk/androidTest/spain/debug/app-spain-debug-androidTest.apk"`

On windows, it answers `Cannot parse test package from `aapt dump badging $APK` output.`

By the way, of course those apks are there üòÑ 
--ignore
I love that I can see full logcat output and find things that happened before my test started or other systems reported.

However, logcat on emulator and devices is super noisy. Would you consider to add some options to filter it? At least maybe to ignore all logs that are not related to tested app?
In a Gradle setting, it would be great to be able to have `exit 1` handled as I may make other tasks dependent on this. for example, I may want to run `testDebugComposer`

For example, I may define:

```groovy

project.task(testDebugCustomIntegrationTest, type: DefaultTask, dependsOn: [testDebugComposer, clearConnectedDevices])

project.task(clearConnectedDevices, type: ClearDevicesTask, dependsOn: testDebugComposer) {
  mustRunAfter testDebugComposer
}
```

`testDebugCustomIntegrationTest` is a task I've created so that developers can simply run `./gradlew testDebugCustomIntegrationTest` and have `testDebugComposer` run and then `clearConnectedDevices`.

Such set ups are helpful for CI so that I can ensure that each run will get a clean emulator.

having `testDebugComposer` makes it so that `clearConnectedDevices` even though I do `./gradlew testDebugCustomIntegrationTest --continue` 

I could get around it other ways, but those start to get more difficult to maintain in Gradle.
Minor bug,

https://github.com/gojuno/composer/blob/master/html-report/src/utils/convertTime.js

The return is

```
return mins + ':' + secs + '.' + ms;
```

If test runs take longer than an hour, you only see the `mm:ss.SS`
Fixes #154 

# Key points

- Application process crash during test run will now be considered as test failure
- After a crash - test run for the current device shard will complete (unless test orchestrator is enabled where crashes are isolated). This will then allow to wait until test runs for the other device shards complete and then compile a report at the end
- Previously - app crash would cause the composer test run to crash (which would then also skip generating any test result reports)
- This is also the same behaviour as is implemented in the default Gradle instrumentation test  tasks (`connectedAndroidTest`)

# Code changes

- ‚ö†Ô∏è Dropped the requirement to handle unordered output. 
  - Each device shard does execute tests one-by-one, in order, so why was this requirement implemented in the first place?
  - This allowed for simplifying the `asTests` method significantly and implementing this fix in a clean manner
- Will now parse and handle `INSTRUMENTATION_RESULT` log entries (key to catching app crash messages)
- Fixed a few test resource txt files as they contained invalid output

Hi people! Thank you so much for the tool!

I have a feature request - show logcat for the failed tests as well. Sometimes it would be handy. Right now I see screenshot and stacktrace only.

Best!
follow up to https://github.com/gojuno/commander/pull/28
obviously this would fail until that is published but figured I would post them round about the same time.

restating from the commander PR:
==========================
Sorry for the PR bomb, just trying to get some tickets going on the composer repo since they are now bubbling up to the gradle plugin repo as development seems to have slowed on commander/composer.

this is in support of:
gojuno/composer#16
gojuno/composer#150
gojuno/composer#160
trevjonez/composer-gradle-plugin#48
This might be a silly question, how exactly should composer be called after starting emulators with swarmer?

I'm finding that composer may fail to install my test APKs because the emulators are not given sufficient time for the package manager to become available:

`adb: failed to install path/to/test-apk: cmd: Can't find service: package`

My buildscript simply executes the swarmer and composer commands one after each other.

Here are the relevant parts from the command outputs:

```
[Thu Jun 13 15:54:08 2019]: Swarmer: - "My job is done here, took 35.873 seconds, startedEmulators: [Emulator(id=emulator-5556, name=test_emulator_1), Emulator(id=emulator-5554, name=test_emulator_2), Emulator(id=emulator-5558, name=test_emulator_3), Emulator(id=emulator-5560, name=test_emulator_4)], bye bye."
[Thu Jun 13 15:54:09 2019]: 4 connected adb device(s): [AdbDevice(id=emulator-5560, model=Android SDK built for x86, online=true), AdbDevice(id=emulator-5554, model=Android SDK built for x86, online=true), AdbDevice(id=emulator-5556, model=Android SDK built for x86, online=true), AdbDevice(id=emulator-5558, model=Android SDK built for x86, online=true)]
[Thu Jun 13 15:54:09 2019]: [emulator-5560] Installing apk... pathToApk = path/to/file.apk
[Thu Jun 13 15:54:09 2019]: [emulator-5556] Installing apk... pathToApk = path/to/file.apk
[Thu Jun 13 15:54:09 2019]: [emulator-5554] Installing apk... pathToApk = path/to/file.apk
[Thu Jun 13 15:54:09 2019]: [emulator-5558] Installing apk... pathToApk = path/to/file.apk
[Thu Jun 13 15:54:10 2019]: [emulator-5560] Error during installing apk: java.lang.IllegalStateException: Process [script, -F, /Users/_/AndroidStudioProjects/myproject/222639283763292.output, /Users/_/Library/Android/sdk/platform-tools/adb, -s, emulator-5560, install, -r, path/to/file.apk] exited with non-zero code 1 Script started on Thu Jun 13 15:54:09 2019
command: /Users/_/Library/Android/sdk/platform-tools/adb -s emulator-5560 install -r path/to/file.apk
Performing Streamed Install
adb: failed to install path/to/file.apk: cmd: Can't find service: package

Script done on Thu Jun 13 15:54:10 2019
```

Everything works fine if I simply wait to run composer manually.

I'm currently doing something like this as a workaround, would rather not do this if it's not necessary.

```sh
java -jar swarmer.jar start ...

service() {
  adb -s $1 shell service check $2
}

for serial in $(adb devices | tail -n +2 | cut -sf 1); do
  echo "[$(date +'%a %b %d %H:%M:%S %Z %Y')]: Waiting for package service to be available for emulator Emulator(id=$serial)"
  while [ "$(service $serial package)" != "Service package: found" ]; do
    sleep 1
  done
  while [ "$(service $serial mount)" != "Service mount: found" ]; do
    sleep 1
  done
done

java -jar composer.jar ...
```

update - the mount service is also required because package installation can also fail due to the storage manager not being available:

```
2019-06-17T01:11:07.8665540Z java.lang.NullPointerException: Attempt to invoke virtual method 'java.util.List android.os.storage.StorageManager.getVolumes()' on a null object reference
2019-06-17T01:11:07.8765600Z 	at com.android.internal.content.PackageHelper.resolveInstallVolume(PackageHelper.java:184)
2019-06-17T01:11:07.8865640Z 	at com.android.internal.content.PackageHelper.resolveInstallVolume(PackageHelper.java:148)
2019-06-17T01:11:07.8965290Z 	at com.android.internal.content.PackageHelper.resolveInstallVolume(PackageHelper.java:163)
2019-06-17T01:11:07.9066730Z 	at com.android.server.pm.PackageInstallerService.createSessionInternal(PackageInstallerService.java:501)
2019-06-17T01:11:07.9161410Z 	at com.android.server.pm.PackageInstallerService.createSession(PackageInstallerService.java:404)
2019-06-17T01:11:07.9261400Z 	at com.android.server.pm.PackageManagerShellCommand.doCreateSession(PackageManagerShellCommand.java:2415)
2019-06-17T01:11:07.9362160Z 	at com.android.server.pm.PackageManagerShellCommand.runInstall(PackageManagerShellCommand.java:907)
2019-06-17T01:11:07.9462890Z 	at com.android.server.pm.PackageManagerShellCommand.onCommand(PackageManagerShellCommand.java:158)
2019-06-17T01:11:07.9562360Z 	at android.os.ShellCommand.exec(ShellCommPerforming Streamed Install
```