Bug report from @qosmio: https://github.com/sorin-ionescu/prezto/pull/1771#issuecomment-575596417.

I'm unable to reproduce it and @qosmio hasn't yet confirmed or disconfirmed whether this fix works. It's a good idea to change the code this way in either case.

(As I mentioned in #1771, this `stty -ixon` call may have been added by mistake. It doesn't do what the comment suggest and is at least as likely to be harming users as helping them.)
`tar -caf` and `tar -xaf` both should work

### Description

As also mentioned in #1659, the completion module enables the completion system, but also loads completion functions. This means:
* Modules loaded before completion that use `complete` for their completions will have their definitions cleared.
* Modules loaded after completion will not have their completion functions installed.

I have a module that uses both (because of external completion scripts), which causes some completions to be lost.

### Expected behavior

To be able to use both `complete` and completion functions in the same module.

I believe completion functions of modules loaded later could be included if the collection of `fpath` elements is a separate step before the execution of the `init.zsh` files, so `fpath` is already finalized when the completion module is loaded. However, this conflicts with the removal of the entry from `fpath` if the module fails to load.

Alternatively, the completion module could be separated into two parts, one of which would be loaded early, and the other (`compinit`) late.

My current workaround is to call `compinit` again after all modules were loaded, but this seems wasteful.

### Actual behavior

Either `complete` or completion functions work.

### Steps to Reproduce

1. Create a module containing both a completion for terraform and a completion function.
  * init.sh:
    ```
    complete -o nospace -C $commands[terraform] terraform`
    ```
  * functions/_example:
    ```
    #compdef example
    
    function _example {
      _arguments '1: :(foo bar)'
    }
    ```

2. Either include the module before or after the completion module. Either the terraform or example completion will not work.

### Versions

  - Prezto commit: 7c94154dda2dfcf02515f1caf1e9dfe6d80b0350
  - ZSH version: zsh 5.7.1 (x86_64-ubuntu-linux-gnu)
  - OS information: Ubuntu 19.10

### Description
Many commands can generate zsh completions, which is very useful. Unfortunately, running many such commands slows down zsh startup. (A notable example is `pipenv`, which takes over a second.)

I have seen a number of zsh plugins/modules use a trick where they only generate the completion function if it does not exist, or the command binary is newer. I have generalized this mechanism in my own zsh customization module:

```zsh
local gendir="${0:h}/generated-functions"
fpath=("$gendir" $fpath)

# Generate a completion function
# usage: gencomp COMMAND ARGS...
# example: gencomp kubectl completion zsh
function gencomp() {
  gencompx '' "$@"
}

# Generate a completion function and add an extra line at the bottom of the file
# usage: gencompx LINE COMMAND ARGS...
# example: gencompx __start_helm helm completion zsh
function gencompx() {
  local tail="$1"
  shift
  (( $+commands[$1] )) || return
  local genfile="$gendir/_$1"
  if [[ ! $commands[$1] -ot "$genfile" ]]; then
    "$@" >! "$genfile"
    [[ "$tail" ]] && echo "$tail" >> "$genfile"
  fi
}
```

The `gencompx` function is used when the completion does not add a call to the function itself, otherwise you need to press tab twice the first time. The contents of the `generated-functions` directory is not committed to version control, obviously.

**Question:** does in make sense to include this mechanism in prezto itself? I'd be happy to provide a pull request.

Apart from that, any corrections or suggestions are also very welcome. I have not dived into zsh/prezto too deeply, so I might have missed an existing similar feature.
<!-- Please check if a similar issue already exists or has been closed before before opening your issue. -->

### Description
When I enabled [syntax-highlighting](https://github.com/sorin-ionescu/prezto/tree/master/modules/syntax-highlighting) module with all highlighters as described [here](https://github.com/sorin-ionescu/prezto/tree/master/modules/syntax-highlighting) the colours of commands are inverted. I got background green and foreground black for example on correct command. When I disabled all highlighters everything are working fine.

**UPD**: "root" highlighter is the problem. When I enabled all except it everything seems to be fine. But when I enabled it too, colours inverts.

### Expected behavior

It should use foreground green and black background colours on correct command, foreground red and black background and so on.

### Actual behavior

Colours are inverted.

### Steps to Reproduce

1. Install Prezto and reload the shell
2. Enable syntax-highlighting module at _~/.zpreztorc_ and reload the shell
3. Enable all highlighters at _~/.zpreztorc_ and reload the shell

### Versions

  - Prezto commit: e86200e7aad9d4ccbabd34222ffcded3f52c6f65
  - ZSH version: zsh 5.3.1 (x86_64-debian-linux-gnu)
  - OS information: Debian GNU/Linux 9.11 (stretch)

<!-- Please check if a similar issue already exists or has been closed before before opening your issue. -->

### Description
<!-- Provide a general description of the bug or feature -->

When using the cloud theme inside a git repo directory, and pressing `<tab>` to autocomplete a command, the first character of the command is repeated:
```
☁  setup [master] ⚡ lls
 -- external command --
ls         lsappinfo  lsbom      lskq       lsm        lsmp       lsof       lsvfs    
 -- shell function --
lssitepackages                              lsvirtualenv                              
 -- alias --
ls
 -- parameter --
LSCOLORS                                    LS_COLORS  
```


### Expected behavior

I expect to see `ls` not `lls`

<!-- What you expected to happen -->

### Steps to Reproduce

1. switch to a directory containing a git repo
2. `ls <tab>`

### Versions

  - Prezto commit: 5ebde1b171
  - ZSH version: zsh 5.7.1 (x86_64-apple-darwin18.2.0)
  - OS information: macOS Mojave 10.14.6 (18G1012)

prezto cloud theme

prezto modules

'environment' 'terminal' 'editor' 'history' 'directory' 'spectrum' 'utility' 'completion' 'prompt' 'git' 'history-substring-search'
<!-- Please check if a similar issue already exists or has been closed before before opening your issue. -->

### Description
<!-- Provide a general description of the bug or feature -->
When migrating from oh-my-zsh I lost my history and didn't initially understand why.

oh-my-zsh uses `.zsh_history` for history, see [lib/history.zsh](https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/history.zsh#L29)

### Expected behavior

By default, without configuration, I should be able to continue using my existing history file `.zsh_history`.

<!-- What you expected to happen -->

### Actual behavior

The prezto history modules defaults `HISTFILE` to `.zhistory`

<!-- What actually happened -->

### Steps to Reproduce


### Versions

  - Prezto commit: 2d6205e71404704eecc4f402e5b09d7cbd19bab7
  - ZSH version: zsh 5.7.1 (x86_64-apple-darwin18.2.0)
  - OS information: macOS 10.14.6



<!-- Please check if a similar issue already exists or has been closed before before opening your issue. -->

### Description
<!-- Provide a general description of the bug or feature -->

When using the `vi` keybindings with the editor module:
* ALT + left arrow moves to the previous word.
* ALT + right arrow doesn't move to the next word but alarms and prints `C`.

Occurs in vscode terminal and iterm2.

I have the following bindings:
```
$ bindkey | grep forward-word
"^[^[[C" vi-forward-word
"^[Oc" vi-forward-word
"^[[1;5C" vi-forward-word
"^[[5C" vi-forward-word
```

### Expected behavior

ALT + right arrow moves to the next word.

<!-- What you expected to happen -->

### Actual behavior

ALT + right arrow doesn't move to the next word but alarms and prints `C`.

<!-- What actually happened -->

### Steps to Reproduce

```
zstyle ':prezto:module:editor' key-bindings 'vi'
```
Then try and navigate forward using ALT + right arrow on a command line with multiple words 
 
### Versions

  - Prezto commit: 2d6205e71404704eecc4f402e5b09d7cbd19bab7
  - ZSH version: zsh 5.7.1 (x86_64-apple-darwin18.2.0)
  - OS information: macOS 10.14.6

Hey, when I type `$ git co <tab>`, I'd like to have only branches, not tags. Is there a way to do that?

Because: 

![image](https://user-images.githubusercontent.com/655838/68480365-e9a9dd80-0234-11ea-896c-edc5110f400f.png)

is annoying.

Thank you!
After installing coreutils via below command

`$> brew install coreutils`

'gls' and 'gdircolors' are available. So if I do below colors and directory dirs-first is working.

```
$> git diff
diff --git a/modules/utility/init.zsh b/modules/utility/init.zsh
index a2e5c2b..4400cf0 100644
--- a/modules/utility/init.zsh
+++ b/modules/utility/init.zsh
@@ -73,6 +73,12 @@ if zstyle -T ':prezto:module:utility' safe-ops; then
 fi

 # ls
+
+if is-callable 'gdircolors'; then
+  alias dircolors='gdircolors'
+  alias ls="${aliases[ls]:-gls}"
+fi
+
 if is-callable 'dircolors'; then
   # GNU Core Utilities

```
Can you check if coreutils has been installed ? 


