_Followup, couldn't reopen https://github.com/doctrine/common/pull/877_  
_I had to solve it anyway. It IMO improves current state. Feel free to close if not applicable._

- [x]  add tests
- [x]  test on production ready project

Currently, in ProxyGenerator there's support for generating simple (not triggering entity hydration) id getters in proxy class only for `return $this->identifier` 

```php
public function getId() { return $this->id; }
```
However, I also needed to support

```php
public function getId() { return MyId::new($this->id); }
```
and
```php
public function getId() { return new MyId($this->id); }
```

I saw this while trying to figure out https://github.com/doctrine/DoctrineBundle/issues/848. In this case, the autoloader was called to load a proxy for a mapped superclass. Since the file didn't exist, the `$notFoundCallback` was called to generate a proxy class. However, the `ProxyFactory` in ORM will skip over mapped superclasses and didn't create a class, but neither threw an exception.

This causes an error because the autoloader wrongly assumes that the file will be present, at least after invoking the `$notFoundCallback`: https://github.com/doctrine/common/blob/master/lib/Doctrine/Common/Proxy/Autoloader.php#L74. However, this assumption is wrong and should probably be checked, with an exception being thrown if no file was generated/found.
On PHP version 7.0 or newest automatically add scalar return type hints to magic methods for compatibility generated Proxy class with real entity.

More information: https://github.com/doctrine/common/issues/868
Hello,

I am using version `v2.10.0` with PHP `7.2.14`.

In entities I use trait `SmartObject` (https://doc.nette.org/en/2.4/smartobject) implements magic methods (for example `__isset()`) with scalar type hints.

I know new version of `ProxyGenerator` make proxy methods with type hints, but in magic methods not.

On runtime I get a PHP error: `Declaration of ShopUp\Database\Proxy\__CG__\ShopUp\UserAdvance\Entity\AdvanceUser::__isset($name) must be compatible with ShopUp\Security\Entity\User::__isset(string $name): bool`

Generated proxy class:

<img width="746" alt="Snímek obrazovky 2019-04-08 v 10 27 39" src="https://user-images.githubusercontent.com/4738758/55709584-f0dfe300-59e8-11e9-9795-acfd026484b9.png">

But in real entity is:

<img width="661" alt="Snímek obrazovky 2019-04-08 v 10 28 08" src="https://user-images.githubusercontent.com/4738758/55709611-01905900-59e9-11e9-9072-c056bca76a00.png">

Thank you for support.
In my application I am using the latest doctrine 2.x. Recently we found it necessary to also use the static function `Doctrine\Common\Util\ClassUtils::getRealClass(string $class)`. But this function is marked as deprecated.

I asked in [issue 826](https://github.com/doctrine/common/issues/826) what would be the alternative function to use. Then I got the response that there is no alternative to that function in doctrine 2.x.

This issue is about removing those depreaction notices, since I see no point in marking something as deprecated when the application programmers have nothing to replace it with.

See also comment  https://github.com/doctrine/common/issues/826#issuecomment-472627100
Test more variants of short identifier getter name case
The proposal is pretty simple: have no Common 3.0, instead split Common into smaller packages. We've already had discussion about this and Common 3.0 seems pretty much like relic and multiple components have already been split to their own packages.

Current proposal:

Component | Suggested action
-----|-----
Persistence | Move to new package doctrine/persistence (rename namespace to Doctrine\Persistence)
Proxy | To be dropped without replacement.
Reflection | Not really sure about this one, either move to doctrine/reflection or drop it.
Util/ClassUtils | Proxy-related methods are obsolete making the rest also pretty much obsolete - drop it
Util/Debug | Drop it or move to doctrine/debug.
Util/Dumper | Unsure about its usefulness (there already exist more advanced tools like Tracy or Symfony Dumper).
Util/Inflector | Already moved out, only BC.
ClassLoader | Already deprecated, drop it.
CommonException | ~
Comparable | I know no place where Comparable is used across Doctrine (is there any?) but it seems useful i.e. for ORM 3.0 - move it to doctrine/comparable.
EventArgs + EventManager + EventSubscriber | ~We've already discussed replacing it by i.e. Symfony's EventDispatcher - drop it if suitable replacement is selected,~ doctrine/event-manager.
Lexer | Already moved out, only BC.
NotifyPropertyChanged + PropertyChangedListener | These sound useful and are used in ORM so ~move it to doctrine/property-change-notifier (what a name!)~ doctrine/persistence.
Version | ~

Each new package would use PHP 7.2 (or even 7.1 where 7.2 has no benefit), follow CS and would be ported to typed code.

WDYT?
Handle the `__toString()` method special in generated proxy classes. It may not throw an error when loading the entity fails. Return some string instead.

### Reason

Throwing an exception in a __toString method triggers a fatal php error, aborting php (phpunit or whatever). When calling __toString() on a proxied entity which does not exist, this triggers an error. It is difficult to locate because a fatal error is triggered.

### how to fix

Could be fixed here
https://github.com/doctrine/common/blob/f8f359524f210710f11fe352ae23e0e655223c94/lib/Doctrine/Common/Proxy/ProxyGenerator.php#L761
or maybe in the initializer class.


The generated method should look similar to this:
```php
    public function __toString()
    {
        try {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);
        } catch (\Exception $e) { // php5
            return 'ERROR: '.$e;
        } catch (\Throwable $e) { // php7
            return 'ERROR: '.$e;
        }

        return parent::__toString();
    }
```

Maybe the returned string should be configurable somehow. Or a special method `toStringErrorGetString($e)` could be called if it exists.

### versions

doctrine/common version: 2.7.3
php version: 7.0.22

I have a system where proxies are stored in several different locations. The proxy autoloader system provides a perfectly reasonable way of dealing with this, but AbstractProxy::getProxyDefintion gets in the way: its behavior is based on the proxy autogenerate mode, and all the modes that deal with files `require` a specific file. In other words, I want to configure for AUTOGENERATE_NEVER, but _also_ just leave loading the proxy up to the autoloader.

An additional autogenerate mode that's just a no-op would accomplish this very simply.
On `doctrine/common v2.6.2` / `doctrine/dbal v2.5.5`

Say you have
```PHP
/**
 * @ORM\Entity(repositoryClass="UserRepository")
 * @ORM\Table(name="user")
 */
class User
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Post", mappedBy="user")
     */
    private $posts;
}
```
```PHP
/**
 * @ORM\Table(name="posts")
 */
class Post
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\User", inversedBy="posts")
     */
    private $user;

    /**
     * @ORM\Column(type="boolean", nullable=false, options={"default":0})
     */
    private $isHidden;
}
```

And say you get a user and want to take all the hidden posts:
`$user->getPosts()->matching(Criteria::create()->where(Criteria::expr()->eq('isHidden', true)))`
Well... nothing anywhere transforms the property name to the actual column name and you get doctrine trying to execute a query with an invalid column name.

`SQLSTATE[42S22]: Column not found: 1054 Unknown column 'te.isHidden' in 'where clause'`