This is a great tool! I came here when my notebooks weren't rendering on github,
but this is so much quicker! I wonder if this could be turned into a chrome extension?
Is anyone doing this?
I presume those are accessible via the API
There seem to be javascript issues with encoding/decoding base64 data with non-latin characters.
There are many things that could go wrong, add UI-visible error reporting:

- URL does not match what we need (see the regexp)
- data is not fetched from the API for some reason
- API limits are exhausted
This one is really broken in nbviewer.js

https://github.com/jupyter/nbformat/blob/master/nbformat/tests/test3.ipynb
As discovered in #28, we sometimes render multiple cell outputs, but we should always render just one. There is an ordering defined [in nbconvert](https://github.com/jupyter/nbconvert/blob/master/nbconvert/utils/base.py#L16), so we should check each when parsing the `data` field.

Before implementing this

1. let's check a few notebooks (from tests, see #33) and how they render before and after.
2. see if we can implement some of the mime types that are not yet supported (e.g. application/pdf?)
3. grep as many notebooks as possible and check their mime types - maybe there our some extra mime types out there
I'm not sure what the best course of action here is. Whether we should just care about DOM generation or if we should go full "screenshot testing" - using Selenium or Puppeteer.

The main reason is to test things like overflows in `pre`s and `img`s, multiple outputs, legacy versions etc. Things that tend to break with changes to the library code.
There is basic wrapping implemented in https://github.com/kokes/nbviewer.js/commit/1aa90456b239de2ef0e599f34363ac6556d460b4, but I'd like it to be extended to all `pre` elements - well, all but code inputs, which should overflow: scroll.

Also, make sure that the current CSS implementation is the most compatible one, there seems to be some contention about that.

something of math, such as formula, in tex are not renderd properly.

and something like description of matplotlib.pyplot's output <matplotlib.figure.Figure at 0xd4f9860> may be customized hidden.