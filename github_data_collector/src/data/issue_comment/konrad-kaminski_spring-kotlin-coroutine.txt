I see the project has a java method named `CoroutineUtils.runCoroutine`,so in my opinion,i can run a coroutine in java.But i tried and it failed without invoking the continuation callback.Here is my code:

```java
CoroutineUtils
                    .runCoroutine(context,
                            (scope, continuation) -> personMapperB.getName(name),
                            new Continuation<String>() {
                                @NotNull
                                @Override
                                public CoroutineContext getContext() {
                                    return context;
                                }

                                @Override
                                public void resumeWith(@NotNull Object o) {
                                    System.err.println(123445555);
                                }
                            });

So is it possible to invoke in java,if possible how can i do that?Thank you!!!

Build: 

````
...
plugins {
	id("org.springframework.boot") version "2.1.5.RELEASE"
	id("io.spring.dependency-management") version "1.0.7.RELEASE"
	kotlin("jvm") version "1.3.31"
	kotlin("plugin.spring") version "1.3.31"
}
...
dependencies {
	implementation("org.springframework.boot:spring-boot-starter-data-mongodb-reactive")
	implementation("org.springframework.boot:spring-boot-starter-webflux")
	implementation("org.springframework.kotlin:spring-webflux-kotlin-coroutine:0.3.7")
	implementation("org.springframework.kotlin:spring-data-mongodb-kotlin-coroutine:0.3.7")
	implementation("org.springframework.kotlin:spring-boot-autoconfigure-kotlin-coroutine:0.3.7")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0-M1")
	implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.3.0-M1")
}
...
````

Application configuration:

```
@Configuration
@EnableCoroutine
@EnableCoroutineMongoRepositories
class ApplicationConfiguration
```

Controller: 

```
@Document(collection = "person")
data class Person(@Id val id: String? = null, val name: String)

interface PersonRepository : CoroutineMongoRepository<Person, String>

data class PersonForm(val name: String)

@RestController
@RequestMapping("/persons")
class PersonController(private val personRepository: PersonRepository) {

    @GetMapping
    suspend fun find(): List<Person> = personRepository.findAll()

    @PostMapping
    suspend fun create(@RequestBody form: PersonForm): Person = personRepository.save(Person(name = form.name))

}
```

When I send either GET or POST request, server responds with "COROUTINE_SUSPENDED": 

```
GET http://localhost:8080/persons

HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Content-Length: 21
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
Pragma: no-cache
Expires: 0
X-Content-Type-Options: nosniff
X-Frame-Options: DENY
X-XSS-Protection: 1 ; mode=block
Referrer-Policy: no-referrer

"COROUTINE_SUSPENDED"

Response code: 200 (OK); Time: 9ms; Content length: 21 bytes
```

It looks like a problem with webflux coroutine because data are stored to database.

Opentracing use ThreadLocal to save the tracing scope, how to share it between coroutines using this lib? Any suggestion?
Currently the project is published to https://dl.bintray.com/konrad-kaminski/maven. Can this library be published to Maven Central?
When creating a bean with `@Scope("request")`, it won't work anymore within an asynchronous context. It would be nice if this would be supported from this library.
Just updated my coroutine package to `0.30.1` and now I am getting this exception:

```
Caused by: java.lang.IllegalAccessError: tried to access field kotlinx.coroutines.experimental.Dispatchers.Default from class org.springframework.kotlin.experimental.coroutine.context.CoroutineContexts
	at org.springframework.kotlin.experimental.coroutine.context.CoroutineContexts.defaultDispatcher(CoroutineContexts.kt:29)
	at org.springframework.kotlin.experimental.coroutine.context.CoroutineContexts$$EnhancerBySpringCGLIB$$f8f15d29.CGLIB$defaultDispatcher$0(<generated>)
	at org.springframework.kotlin.experimental.coroutine.context.CoroutineContexts$$EnhancerBySpringCGLIB$$f8f15d29$$FastClassBySpringCGLIB$$1814e945.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:365)
	at org.springframework.kotlin.experimental.coroutine.context.CoroutineContexts$$EnhancerBySpringCGLIB$$f8f15d29.defaultDispatcher(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
```

It might be a breaking change from coroutines itself but bug fixes they have are critical. 
I'm using Spring 4.3.9 and spring-kotlin-coroutine 0.2.2. What I want to achieve is make spring @Cacheable annotation work with suspend function, but I got the exception below:

```
java.lang.ClassCastException: org.springframework.kotlin.experimental.coroutine.cache.CoroutineSuspendedException cannot be cast to org.springframework.cache.interceptor.CacheOperationInvoker$ThrowableWrapper
  at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:374)
  at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:327)
  at org.springframework.kotlin.experimental.coroutine.cache.CoroutineCacheInterceptor.executeCoroutine(CoroutineCacheConfiguration.kt:112)
  at org.springframework.kotlin.experimental.coroutine.cache.CoroutineCacheInterceptor.invokeCoroutine(CoroutineCacheConfiguration.kt:100)
  at org.springframework.kotlin.experimental.coroutine.cache.CoroutineCacheInterceptor.invoke(CoroutineCacheConfiguration.kt:83)
  at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
  at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673)
  at com.alibaba.intl.trade.delivery.biz.external.fund.FundServiceGatewayImpl$$EnhancerBySpringCGLIB$$9570d4ab.getNysePaymentFulfilled(<generated>)
  at com.alibaba.intl.trade.delivery.biz.service.impl.DeliveryReadServiceImpl$prefetchShipmentTermAndPayData$paymentFulfilled$1.doResume(DeliveryReadServiceImpl.kt:318)
  at com.alibaba.intl.trade.delivery.biz.service.impl.DeliveryReadServiceImpl$prefetchShipmentTermAndPayData$paymentFulfilled$1.invoke(DeliveryReadServiceImpl.kt)
  at com.alibaba.intl.trade.delivery.biz.service.impl.DeliveryReadServiceImpl$prefetchShipmentTermAndPayData$paymentFulfilled$1.invoke(DeliveryReadServiceImpl.kt:43)
  at com.alibaba.intl.trade.delivery.biz.util.CoroutineUtilKt$async$1.doResume(CoroutineUtil.kt:28)
  at kotlin.coroutines.experimental.jvm.internal.CoroutineImpl.resume(CoroutineImpl.kt:54)
  at kotlinx.coroutines.experimental.DispatchedTask$DefaultImpls.run(Dispatched.kt:162)
  at kotlinx.coroutines.experimental.DispatchedContinuation.run(Dispatched.kt:26)
  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1147)
  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:622)
  at java.lang.Thread.run(Thread.java:834)
```
I am using `spring-boot-starter-quartz` for my scheduling-related needs, and adding `spring-kotlin-coroutine` to my projects make all Quartz Job creation fail with the following error:

```
org.quartz.SchedulerException: Job instantiation failed
	at org.springframework.scheduling.quartz.AdaptableJobFactory.newJob(AdaptableJobFactory.java:47) ~[spring-context-support-5.0.8.RELEASE.jar:5.0.8.RELEASE]
	at org.quartz.core.JobRunShell.initialize(JobRunShell.java:127) ~[quartz-2.3.0.jar:na]
	at org.quartz.core.QuartzSchedulerThread.run(QuartzSchedulerThread.java:392) [quartz-2.3.0.jar:na]
Caused by: java.lang.IllegalArgumentException: Parameter specified as non-null is null: method org.springframework.kotlin.experimental.coroutine.event.CoroutineApplicationEventPublisherAwareBeanPostProcessor.postProcessBeforeInitialization, parameter beanName
	at org.springframework.kotlin.experimental.coroutine.event.CoroutineApplicationEventPublisherAwareBeanPostProcessor.postProcessBeforeInitialization(CoroutineApplicationEventPublisherAwareBeanPostProcessor.kt) ~[spring-kotlin-coroutine-0.3.6.jar:na]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:416) ~[spring-beans-5.0.8.RELEASE.jar:5.0.8.RELEASE]
```

As Job beans are created by Spring+Quartz based on a classname, I do not have the option to name the beans.

Should `CoroutineApplicationEventPublisherAwareBeanPostProcessor` accept nullable parameters to fix this, or am I missing something?
Fixed missing passing of iterable to reactive repo on `deleteAll()` method call
Added missing **PUT**, **DELETE**, **PATCH**, **OPTIONS**, **HEAD** methods to router function, as well as **and**, **or** infixes and **not** operator.

Moved `CoroutineServerResponse` builder `build()` method from **body builder** to **header builder**, as building response shouldn't require to have a body, e.g. `CoroutineServerResponse.noContent().build()` 