Field `secretName` in `Ingress.TLS` should be optional, to reflect this [documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#ingresstls-v1beta1-extensions):

> Field is left optional to allow SSL routing based on SNI hostname alone.

`secretName` is currently required by this Scala client, which results in this JSON deserialization error:
```
akka.http.scaladsl.server.RejectionError: ValidationRejection({"obj.items[0].spec.tls[0].secretName":[{"msg":["error.path.missing"],"args":[]}]},Some(skuber.json.PlayJsonSupportForAkkaHttp$PlayJsonError: 
{"obj.items[0].spec.tls[0].secretName":[{"msg":["error.path.missing"],"args":[]}]}))
```
Hey Dave, 

Do you have an example of saving a configmap into a namespace that contains content like this...

```
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-config
  namespace: default
data:
  config.yaml: |
    namespaces:
      - default
    labels:
      - "app"
      - "owner"
```
You can remove a cluster from your kubectl configuration by running `kubectl config delete-cluster`, and this will succeed even if a context referring to that cluster exists. kubectl will then continue to work normally, as long as you don't try to use that context, only then will it fail.

Skuber in comparison fails to parse the configuration file, even if you don't use that context. I think Skuber should, like kubectl, be more tolerant than this, and only fail when a user attempts to use that context. The simplest thing would probably be for it to just ignore contexts whose clusters or users don't exist, but ideally, if you tried to use the context, it would give a more meaningful error message, roughly like `cluster "foo" not found for context "bar"`.
Is there a way to cancel already running request in skuber?

I do not have experience with Akka, maybe there's a straightforward solution assumming you know how Akka operates.


Would there be any interesst in supporting Openshift-Objects like DeploymentConfig, Routes?

I have just came across a case, and would like to understand the concept behind this as it seems odd to me.

The case I had was doing a status check for pods to see if there running or not. Now when the pod is not running and status check is done, an exception is thrown at KubernetesClientImpl.scala:648. Which means a failed future.

This is in particular to me is odd, because the call it self was successful (check if a pod has a status), but instead of returning an exception the status of the pod should be None with UNKNOWN.

To deal with the exception I did this:

`for {
        status <- pod.status
        phase <- status.phase
      } yield phase
    } recover {
      case err: K8SException if err.status.code.map(_ == 404).getOrElse(false) => None
    }`

None, in my case will be translated into UNKNOWN by the caller.

To clarify my question would it not be better to return an UNKNOWN status for a pod that is not found when doing a status check?
Hi all,
  The [tests](https://github.com/doriordan/skuber/blob/master/client/src/it/scala/skuber/ExecSpec.scala) don't show a way to determine when a command exec'd in a pod returns,  or what it's return status is.

Is there any way to a determine this?  Or could it be implemented?
Our workaround at the moment is reading `maybeStdout` & `maybeStderr` and waiting for it to stop producing for n seconds. Or to echo out some marker after any command runs so we know it's finished.

Thanks for any help.
There's a slight difference in Scale object in `autoscaling/v1` version where the `selector` field is a string instead of an object.
This results in `ValidationRejection` when you attempt to do any of the following calls:
`skuber.getScale[ReplicaSet]("myReplicaSet")`
`skuber.getScale[StatefulSet]("myStatefulSet")`

```
e => JsError(List((/status/selector,List(JsonValidationError(List(error.expected.jsobject),WrappedArray())))))

akka.http.scaladsl.server.RejectionError: ValidationRejection({"obj.status.selector":[{"msg":["error.expected.jsobject"],"args":[]}]},Some(skuber.json.PlayJsonSupportForAkkaHttp$PlayJsonError: {"obj.status.selector":[{"msg":["error.expected.jsobject"],"args":[]}]}))
	at skuber.json.PlayJsonSupportForAkkaHttp.$anonfun$unmarshaller$1(PlayJsonSupportForAkkaHttp.scala:79)
	at play.api.libs.json.JsError.recoverTotal(JsResult.scala:91)
	at skuber.json.PlayJsonSupportForAkkaHttp.read$1(PlayJsonSupportForAkkaHttp.scala:76)
	at skuber.json.PlayJsonSupportForAkkaHttp.$anonfun$unmarshaller$2(PlayJsonSupportForAkkaHttp.scala:83)
	at akka.http.scaladsl.util.FastFuture$.$anonfun$map$1(FastFuture.scala:23)
	at akka.http.scaladsl.util.FastFuture$.strictTransform$1(FastFuture.scala:41)
	at akka.http.scaladsl.util.FastFuture$.transformWith$extension1(FastFuture.scala:45)
	at akka.http.scaladsl.util.FastFuture$.map$extension(FastFuture.scala:23)
	at akka.http.scaladsl.unmarshalling.Unmarshaller.$anonfun$map$3(Unmarshaller.scala:26)
	at akka.http.scaladsl.unmarshalling.Unmarshaller.$anonfun$transform$3(Unmarshaller.scala:23)
	at akka.http.scaladsl.unmarshalling.Unmarshaller$$anon$1.apply(Unmarshaller.scala:58)
	at akka.http.scaladsl.unmarshalling.LowerPriorityGenericUnmarshallers.$anonfun$messageUnmarshallerFromEntityUnmarshaller$3(GenericUnmarshallers.scala:25)
	at akka.http.scaladsl.unmarshalling.Unmarshaller$$anon$1.apply(Unmarshaller.scala:58)
	at akka.http.scaladsl.unmarshalling.Unmarshal.to(Unmarshal.scala:25)
	at skuber.api.client.impl.KubernetesClientImpl.$anonfun$toKubernetesResponse$1(KubernetesClientImpl.scala:653)
	at scala.concurrent.Future.$anonfun$flatMap$1(Future.scala:307)
	at scala.concurrent.impl.Promise.$anonfun$transformWith$1(Promise.scala:41)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)
	at akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:92)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:85)
	at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:92)
	at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:41)
	at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:49)
	at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
	at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
	at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
	at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)
```
We generate access tokens to use with Kubernetes through a custom Vault (https://www.vaultproject.io/) interface. This interface just generates an AccessToken in a string that we then need to pass into Skuber to use, however the interface we implemented is custom and unique to our company, and so adding a pull request to Skuber to just implement a VaultAuth would not work.

Unfortunately, because TokenAuth (and AuthProviderAuth) is marked as a final case class, we cannot override these with our own custom VaultAuth provider. To get around this issue we end up having to call k8sInit for every interaction we need to do, so we can make sure to use fresh credentials.

```
  val credProvider = CustomVaultCredentialProvider(...)
  def k8s()(implicit a: ActorSystem, m: Materializer): KubernetesClient = {
    val k8sCluster = Cluster(
      server = clusterEndpoint,
      certificateAuthority = Some(Right(clusterCA))
    )
    val k8sContext = Context(
      k8sCluster,
      // This is where the token gets refreshed for skuber.
      TokenAuth(credProvider.refreshAccessToken().getTokenValue))
    )
    val k8sConfig = Configuration(
      clusters = Map("default" -> k8sCluster),
      contexts = Map("default" -> k8sContext),
      currentContext = k8sContext
    )
    k8sInit(k8sConfig)
  }

 // Do something with it
 k8s.get[JobList]...
```

I am requesting to make AccessTokenAuth subclassable from outside of skuber. That way we can implement a VaultTokenAuth extends AccessTokenAuth and have it work similarly to the existing GcpAuth.


Hey there. 
I have some code that looks like this:
```scala
def scaleDeployment(namespace: String, name: String, newScale: Int): Future[Scale] = {
  skuber.usingNamespace(namespace).getScale[Deployment](name).flatMap { scale =>
    val downscale = scale.withSpecReplicas(newScale)
    skuber.usingNamespace(namespace).updateScale[Deployment](name, downscale)
  }
}
```
calling this method with non-zero values in `newScale` works just fine. However, if I need to scale the deployment to 0 then Unmarshalling fails with the following error:
```
e => JsError(List((/spec/replicas,List(JsonValidationError(List(error.path.missing),WrappedArray())))))
akka.http.scaladsl.server.RejectionError
	at skuber.json.PlayJsonSupportForAkkaHttp.$anonfun$unmarshaller$1(PlayJsonSupportForAkkaHttp.scala:79)
	at play.api.libs.json.JsError.recoverTotal(JsResult.scala:91)
	at skuber.json.PlayJsonSupportForAkkaHttp.read$1(PlayJsonSupportForAkkaHttp.scala:76)
	at skuber.json.PlayJsonSupportForAkkaHttp.$anonfun$unmarshaller$2(PlayJsonSupportForAkkaHttp.scala:83)
	at akka.http.scaladsl.util.FastFuture$.$anonfun$map$1(FastFuture.scala:23)
	at akka.http.scaladsl.util.FastFuture$.strictTransform$1(FastFuture.scala:41)
	at akka.http.scaladsl.util.FastFuture$.transformWith$extension1(FastFuture.scala:45)
	at akka.http.scaladsl.util.FastFuture$.map$extension(FastFuture.scala:23)
	at akka.http.scaladsl.unmarshalling.Unmarshaller.$anonfun$map$3(Unmarshaller.scala:26)
	at akka.http.scaladsl.unmarshalling.Unmarshaller.$anonfun$transform$3(Unmarshaller.scala:23)
	at akka.http.scaladsl.unmarshalling.Unmarshaller$$anon$1.apply(Unmarshaller.scala:58)
	at akka.http.scaladsl.unmarshalling.LowerPriorityGenericUnmarshallers.$anonfun$messageUnmarshallerFromEntityUnmarshaller$3(GenericUnmarshallers.scala:25)
	at akka.http.scaladsl.unmarshalling.Unmarshaller$$anon$1.apply(Unmarshaller.scala:58)
	at akka.http.scaladsl.unmarshalling.Unmarshal.to(Unmarshal.scala:25)
	at skuber.api.client.impl.KubernetesClientImpl.$anonfun$toKubernetesResponse$1(KubernetesClientImpl.scala:651)
	at scala.concurrent.Future.$anonfun$flatMap$1(Future.scala:307)
	at scala.concurrent.impl.Promise.$anonfun$transformWith$1(Promise.scala:41)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)
	at akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:91)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:85)
	at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:91)
	at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)
	at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:44)
	at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
	at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
	at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
	at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)

```

It seems that k8s is omitting the 0 value in replicas which invalidates the Json object for Skuber. 

Is this a known issue (perhaps related to #48 )? Is there a workaround?

Thanks in advance
M