Resolves #465.
I find myself needing these extras to replace python operators that don't work well within pipelines. If maintainers would like I can submit a pull request.

```
def curried_ternary(condition, f_true, f_false):
    def inner(*args, **kwargs):
        return (
            f_true(*args, **kwargs)
            if condition(*args, **kwargs)
            else f_false(*args, **kwargs)
        )

    return inner

def star(function: Callable) -> Callable:
    return lambda x: function(*x)


@toolz.curry
def _assert_f_output_on_inp(f, inp):
    assert f(inp)


def assert_that(f):
    return curried.do(_assert_f_output_on_inp(f))


@toolz.curry
def contains(container, element):
    return element in container

@toolz.curry
def equals(x, y):
    return x == y
```
The [online docs](https://toolz.readthedocs.io/en/latest/index.html) are for version 0.9.0 while the latest release is 0.10.0. 

For example, the [API documentation](https://toolz.readthedocs.io/en/latest/api.html) contains no reference to the `compose_left` function.
Can you also publish universal Python wheel at releases? This should not be hard as the package is purely Python and this would just require adding additional `bdist_wheel` to `setup.py` building.

@pytoolz @mrocklin @jcrist @eriknw
Hello, I've noticed a surprising behavior of `first()` which can be well illustrated by:
```python
print(list(map(
    first,
    [[1,2,3], [], [1,2,3], [1,2,3]]
)))
```

I would expect this statement to raise an exception, because `first([])` normally raises an exception on an empty sequence. However, the exception is `StopIteration` which seems to interfere with `map` and stops its iteration.

What do you think about catching `StopIteration` in `first()` and re-raising a different exception, so it can propagate until explicitly caught? Which exception would be appropriate?
Python gives us *fold* as `functools.reduce`, which allows us to collapse a sequence into a single value. The dual to *fold* is *unfold*, which generates a sequence from an initial value. This PR introduces two generator functions for *unfold* called `unfold` and `unfold_`. The only difference between them is that the former takes a single function while the latter takes three. One may be more convenient than the other depending on the use case.

See "unfold" in,
- https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29
- https://en.wikipedia.org/wiki/Anamorphism

I've tested and documented both functions.
This is because you can't easily use a lambda to raise an exception, and sometimes the need arises to translate an exception X into exception Y when using `toolz.excepts`.
`attr_get` and `attr_pluck` work the same way as `get` and `pluck` on *objects* .

```python
class A(object):
    pass

a = A(); a.id = 1; a.name = "ABC"
attr_get("id", a)       # Same as a.id
>>> 1
```

This feature shall be useful not only to standard objects but also data containers such as `typing.NamedTuple` and `dataclasses.dataclass`.
Hey, I love toolz, but the one thin I've been missing is a possibility to create lambdas in a less verbose way. 
At some point I had installed a library (which I can't seem to find anymore) that created lambdas through the use of `_`. Eg `_ == x` was translated to: `lambda x: x == 3` but it had it's limits as something like `len(_)` would not work.

I wrote a function that takes a string, replaces percent signs by arguments and evals it:

```python
import re

def _f_single_arg(function):
    body = (function.replace('%%', '<!>')
                    .replace('%', '_0')
                    .replace('<!>', '%'))
    return eval('lambda _0: ' + body)

def f(function):
    """Translates the provided expression in string form into a lambda. 
    Any %<n> where <n> is a int will be used as nth
    argument (starting with 0). If only one argument is required,
    a % can be used. To escape a % sign use %%."""
    single_percent_match = re.search(r"%[^\d]|%$", function)
    if single_percent_match:
        return _f_single_arg(function)
    
    matches = re.findall(r"%(?P<n>\d+)", function)
    n_args = 0 if len(matches) == 0 else\
        max(int(match) for match in matches) + 1
    replace_tuples = [(f'%{n}', f'_{n}') for n in range(n_args)]
    new_body = function
    # Not very functional, but since this is python
    # I think it's pragmatic
    for tup in replace_tuples:
        new_body = new_body.replace(*tup)
    head = 'lambda ' + ', '.join(pluck(1, replace_tuples)) + ': ' \
        if n_args > 0 else 'lambda *_0: '
    return eval(head + new_body)
```

Trying it out:
```python
>>> f("%1")(0, "Hey")
"Hey"

>>> f('%')('Hey')
"Hey"

>>> f('"Hey"')(0, 1, 2)
"Hey"
```

I found this would fit one of my favorite libraries perfectly, what do you think about this?


Hi,

thank you for the great package! We use it happily in several projects. However, the latest release `0.10.0` broke some of our code. Specifically, in https://github.com/pytoolz/toolz/issues/397 in section 3.A there is explicitly written 

> This makes the above example work. However, this may break existing code.

And it indeed broke our code. It probably does not matter what the code was exactly. However, what matters is that we cannot rely on `toolz` versioning before it reaches `1.0.0` because until that you can, according to https://semver.org/#spec-item-4, change everything.

Isn't it already time to release version `1.0.0` and adhere to semver? Is there any plan towards version `1.0.0`?