Hello David! Thanks for your gem.

I'm trying to reach the total likes count in my controller's method:
`@length = Site.first.liked_by_count`

Alas, I get error:
`undefined method `liked_by_count' for #<Post:0x007fde4d4b2f98>`
Invoking the method from views is possible.

How to use 'liked_by_count' from controllers? Thanks.
Hey David,

Firstly, apologies that this is a question and not an issue, per se.

Thanks for the gem and the very informative, and humurous, article explaining the concepts. Well worth a tweet!

I'm looking to build a very simple product recommendation engine, where by buying a product the user 'likes' a product.

I would then, for other users, recommend products based on their purchased/liked product similarities.

Basically including the recommendation for other products AFTER they have purchased something themselves.. in follow up emails to be exact.

From my very basic understanding, is this an ok way to go about things?

My thinking is that I can build up recommendations over time, and have a good way to auto-recommend based on similar customer purchases compared to your own purchase.

Many thanks,
Bjorn

Let's say, for example, we are allowing users to rate songs and artists. I would like to be able to get a single, ordered list of recommendations for a user that includes both songs and artists based on the likelihood that the user will like it, regardless of its class. 

I would be willing to build the list myself by calling `recommended_songs` and `recommended_artists` and merging the lists if I could get the associated scores so I would know how to relate the top songs to the top artists. 

My `User` model `recommends :places`, but it already has an Active Record association for `recommended_places`, so I am forced to access Recommendable recommendations via:

``` ruby
user.send :recommended_for, Place
```

... which is a bit clunky. To avoid this, and other potential namespace collisions for existing model methods, I suggest supporting an optional `recommendable_` prefix on Recommendable finder methods, e.g.:

``` ruby
user.recommendable_recommended_places
```

Would be easy to implement -- we'd just need to add an optional check in the method regexes for the namespace. Existing finder methods would still work -- you'd only need to prepend recommendable_ if you had a namespace issue.

I recommend optimizing operations using redis internal functions.
1. sinterstore
2. lua scripting

Hey guys,

I wasn't sure if there is need in unit tests, because CalculationsTest covers all the functionality.

Please let me know if you have any feedback.

According to your docs and example page, this should work:

``` irb
irb(main):006:0> user.recommended_thing.where('published = true')
NoMethodError: undefined method `where' for #<Array:0x00000005d45788>
```

Likes, recommendations, queries all work, but scoping the `recommended_thing` balks out on the call due to an array being returned instead. How can I debug?

I came across [this](https://github.com/mattt/NSSortDescriptor-WilsonRank) repo lately from the very talented @mattt and thought it would be a useful addition to recommendable. From his page

> Sorting by positive vs. negative % alone gives undue advantage to items with fewer ratings, whereas sorting by total number of positive ratings makes it difficult for new items to break into the top.
> 
> Fortunately, there is a correct solution: use the lower bound of Wilson score confidence interval for a Bernoulli parameter.

Along with more info and a link to the math behind it.

None
When I dislike a course, it recommends it to similar users.

``` ruby
class user < ActiveRecord::Base
  has_many :courses
  recommends :course
end

user1.like(Course.find(2622))
user1.like(Course.find(2431))
user1.like(Course.find(1466))
user1.dislike(Course.find(315))

user2.like(Course.find(2622))
user2.like(Course.find(2431)
user2.recommended_courses.map{ |c| c.id }
 => [315, 1466]

user2.liked_course_ids
=> [2431, 2622]

user1.liked_course_ids
 => [1466, 2431, 2622]

user1.disliked_course_ids
 => [315]
```
