https://circleci.com/gh/javve/list.js/67


// it assumes: valueNames: [ 'name', 'born', {data: ['id']} ]
```
      var lst = document.getElementById('users')
            lst.addEventListener('click', onClick)
        }//()

        function onClick(el) {
            var selector = 'li'
            var iel = el.target.closest(selector)
            if(!iel) return
            var id = iel.getAttribute('data-id')
            console.log( id )
        }//()
```
//  I hope it helps someone. ps: there is polyfills for closest()
I would like to have the fuzzy search filter criteria not include commas in the logic. For example, I have a list that contains "Senior Developer - Boston"

If a user types this into the filter box the result does not show: "Developer, Boston"

Is there a way to have special characters excluded from filtering?
Hi, I'm having an issue where if I activate the select2 wrapping on some `<select>` tags that I'm using for filtering, the column sorts can no longer sort by ascending order. The initial sort by descending works

I'm activating the select2 on my `<select>` tags like this:

```
$(document).ready(function() {
    $('.filterSearch').select2();
    $('.filterSearch').on('change', applyFilters)
  })
```

My filter function looks like this:

```
function applyFilters (event) {
    peopleList.filter(function(item) {
      // Need to convert filterSelects : NodeList -> Array
      return Array.from(filterSelects).every((input) => {
        if (!input.value) return true
        const selectedValues = Array.from(input.selectedOptions).map(function(option) {return option.value})
        const loweredSearchValues = selectedValues.map(function (value) { return value.toLowerCase() })
        const loweredItemValue = item.values()[input.dataset.searchType].toLowerCase()
        return loweredSearchValues.some(function(searchVal) { return loweredItemValue.includes(searchVal) })
      })
    })
  }
```

My filter `<select>` elements look like this:

```
<td>
     <select data-search-type="tables-specialty" class="filterSearch" multiple="multiple">
       {% for specialty in specialties | sort() %}
         <option>{{ specialty }}</option>
       {% endfor %}
     </select>
</td>
```

My table headers which have the sort class look like this:

```
<th scope="col"><a href="#" class="text-muted sort" data-sort="tables-name">Name</a>
```

Any ideas?
Love the library! However, I was surprised to find no option for easily adding custom class attributes to a pagination item for styling purposes, e.g. instead of using only the default classes:
```html
<ul class="pagination">
    <li class="active">
        <a class="page" href="...">1</a>
    </li>
    ...
</ul>
```
I wanted to add some [Bootstrap class names](https://getbootstrap.com/docs/4.3/components/pagination/#disabled-and-active-states):
```html
<ul class="pagination">
    <li class="page-item active">
        <a class="page-link page" href="...">1</a>
    </li>
    ...
</ul>
```
This could be achieved by allowing tweaks to the following line in [pagination.js](https://github.com/javve/list.js/blob/master/src/pagination.js):
https://github.com/javve/list.js/blob/52afe2db0d018df3009acf49b6cbb56943b28024/src/pagination.js#L85
This could, for example, be achieved by adding two new options during list initialization, similar to the `paginationClass` option.
Sorting not persistent when doing pagination it remains its actual state when going to other pages
Is it possible to show items that have a classname ( e.g.  class="show-first" ) on top of the other  search results? 
Hey there
First of all, thanks for sharing list.js with us :-)

I'm trying to use MacthHeight on the list, when event 'updated' is triggert, where it look like that list content is not ready todo a match height on.
https://github.com/liabru/jquery-match-height

In the code i can se the refresh() function is triggert on event 'updated', should'n refresh() be triggert before event 'updated' ??

https://github.com/javve/list.js/blob/master/dist/list.js#L999-L1001

my code snippet:
```
var projectContainer = $('#projectlist');
projectContainer .find('.project-item').matchHeight({ byRow: true });

var projectListOptions = {
  valueNames: ['name', 'description', 'year', 'contractor', 'engineers', 'areasize', 'location'],
  page: 12,
  pagination: true
};

var projectList = new List('projectlist', projectListOptions);
projectList.on('updated', function () {
  console.log('updated');
  $.fn.matchHeight._update();
});
```




