Hello!
I found a warning in your library in the "DHT.cpp" file.
"comparison between signed and unsigned integer expressions"
I think that it can be fixed by replacing on line 29
`#define TIMEOUT -1`
 with
`#define TIMEOUT 0xffffffffUL`
or maybe 
`#define TIMEOUT UINT32_MAX`

 

Hello friends,

I am trying out this "DHT Sensor Library", and started off by using the "DHTtester" example.

The issue is related to this line of code:
https://github.com/adafruit/DHT-sensor-library/blob/428e115b57d172cc484d3bcf3f5d0519c2fb6ef1/examples/DHTtester/DHTtester.ino#L8

**TL;DR:** 
I think the `#include` directive here must be used with angle brackets (<>) rather than double quotes ("") to reduce the chance of surprises. If this is deemed unnecessary, kindly explain to me. Thanks.

**Details:**
Upon a quick inspection of the "DHTtester" example code, I noticed the library was included as:
`#include "DHT.h"`

That is, the `DHT.h` was included as a source file from current sketch directory rather than using angle brackets (<>) to include it as a standard header file as in:
`#include <DHT.h>`

Both versions compile fine for me (even when I have my sketch folder in another location). However I think the angle bracket version would be a better option as that would prevent any surprises, for example if the user somehow had another "DHT.h" file in their working sketch folder.

Furthermore, the other example which is "DHT_Unified_Sensor" uses angle brackets to include the `DHT.h` and other dependencies, as shown below:
https://github.com/adafruit/DHT-sensor-library/blob/428e115b57d172cc484d3bcf3f5d0519c2fb6ef1/examples/DHT_Unified_Sensor/DHT_Unified_Sensor.ino#L11

In conclusion, I think we should use angle brackets for "DHTtester" example. If this is however deemed unnecessary, I would be glad to get an explanation for that so I can learn from it.


Thanks for your hardwork and efforts to put together this library and many others.
Cheers.


This change sets _pullTime to a reasonable value if begin() isn't called.

It's arguably an error to not call begin(), but this used to work just fine in version 1.3.2. Right now, if you forget to call begin(), you just get bogus (or nan) values, and (with debugging enabled) DHT checksum errors.

With this change, if read() is called before begin() we'll print a helpful message if debugging is enabled, and continue with the default value of _pullTime.
Thank you for creating a pull request to contribute to Adafruit's GitHub code!
Before you open the request please review the following guidelines and tips to
help it be more easily integrated:

- **Describe the scope of your change--i.e. what the change does and what parts
  of the code were modified.**  This will help us understand any risks of integrating
  the code.

No functional changes - only a cast to remove warnings about comparisons between signed and unsigned integers and commenting out an unused parameter to suppress that warning.

- **Describe any known limitations with your change.**  For example if the change
  doesn't apply to a supported platform of the library please mention it.

No known limitations

- **Please run any tests or examples that can exercise your modified code.**  We
  strive to not break users of the code and running tests/examples helps with this
  process.

No functionality of the code was changed


The InterruptLock exists in cores/esp8266/interrupts.h in ESP8266 Arduino.

- This PR adds a simple preprocessor guard to elicit the redefinition of InterruptLock for the ESP8266 target.
DHT11 on D2 of TEENSY 3.5 powered with 5V or 3.3V not able to be read by this library or by idDHT11 library. Tried suggested fixes of changing pull-up delay time in declaration, but with no resolution.  Seems time scale related. idDHT11 library able to read for first few seconds then throws checksum errors continuously.

```
Retrieving information from sensor: Read sensor: OK
Humidity (%): 53.00
Temperature (oC): 24.00
Temperature (oF): 75.20
Temperature (K): 297.15
Dew Point (oC): 13.82
Dew Point Slow (oC): 13.85

Retrieving information from sensor: Read sensor: OK
Humidity (%): 54.00
Temperature (oC): 24.00
Temperature (oF): 75.20
Temperature (K): 297.15
Dew Point (oC): 14.11
Dew Point Slow (oC): 14.14

Retrieving information from sensor: Read sensor: OK
Humidity (%): 54.00
Temperature (oC): 24.00
Temperature (oF): 75.20
Temperature (K): 297.15
Dew Point (oC): 14.11
Dew Point Slow (oC): 14.14

Retrieving information from sensor: Read sensor: Error
Checksum error
Humidity (%): -1.00
Temperature (oC): -1.00
Temperature (oF): -1.00
Temperature (K): -1.00
Dew Point (oC): -1.00
Dew Point Slow (oC): -1.00
```
Code execution stalls when trying to initialize more than one DHT object dynamically.
```
    std::vector<DHT> am2301;
    for (uint8_t i = 0; i < 8; i++) {
        am2301.emplace_back(SENSORS[i], DHT_TYPE);
        am2301[i].begin();
    }
```
If the for loop is run just once, the code runs as it should, but on a second iteration, the code stalls at the `am2301.emplace_back(...)` line. The result is the same when using any other way to declare iterable objects, for example: 
```
    DHT **am2301;
    am2301 = new DHT* [8];
    uint8_t i;
    for (i=0; i<8; i++){
      am2301[i] = new DHT(SENSORS[i], DHT_TYPE);
      am2301[i]->begin();
    }
```
in which case it stalls at `am2301[i] = new DHT(SENSORS[i], DHT_TYPE);` on the second iteration.
I kindly request to reopen the issue #94 "ESP8266 and DHT22: NAN errors using libraries >= 1.2.0" as I do not find it is resolved yet and I have a justified reason for it. I am working on a Wemos D1 R2 board's interfacing with DHT22 sensor and as usual I have been getting the NaN errors using the given libraries. I went through all the given solutions given for issue #94 individually as well as combining, but no solution is working out for me. My Wemos D1 R2 board has nothing wrong as I have already accomplished a Data Acquisition with IoT project on it. I am not kind of a person who asks random questions. I try to solve the issue myself first. If I really find myself stuck up, I ask a question. I am being advised in issue #94 to go with other forums, but actually I would like to inform that this issue is studied, analyzed and approached the best way compared to other forums. Github has taught me never to give up, so I kindly request to reopen the issue #94 as I am the one who is still to be answered. 

Shaunak Agastya Vyas 
Hi,

I did some changes in order to avoid the blocking delay in the flow.

Basically I created a loop function that is called in the main loop.
It has an internal state machine for the operation. Clearly, the reading phase is done in a blocking way.

I tested it on my NodeMCU and WeMos board and it works fine.

I suggest to create a dedicated branch (like I did).
Maybe, in the future, a common solution (where the user can choise which method he prefers) can be done in order to get an unique library. 

Regards,
Salvo
In the ESP32 Arduino library, noInterrupts() is a nop, so interrupts
still occur while receiving a value. On my board there is at least one
interrupt every time we try to read a value, which messes up the
reading. Instead of counting cycles, use micros() to keep track of time.
This increases the success rate of receiving data to 90% or so.

A better fix would be to implement noInterrupts() for the ESP32, but
that looks a lot harder. The new code path is probably not suitable for
slower micros, but hopefully those use the __AVR code path anyway.

Thank you for creating a pull request to contribute to Adafruit's GitHub code!
Before you open the request please review the following guidelines and tips to
help it be more easily integrated:

I'm not sure this should be merged as-is, but I want it to be available to people who are running into the same problem.