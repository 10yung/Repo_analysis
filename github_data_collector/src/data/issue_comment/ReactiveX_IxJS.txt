**IxJS version:** 2.5.3

**Code to reproduce:**
`import { Iterable } from 'ix'` (for example)

Transpile with typescript 3.7.2 or 3.7.3 using tsconfig.json generated with `tsc --init`.

**Expected behavior:** 
For this to transpile successfully using typescript 3.7.2 and 3.7.3.

**Actual behavior:**
Produces two transpilation errors with typescript 3.7.2 or 3.7.3:
```
node_modules/ix/Ix.d.ts:5:10 - error TS2440: Import declaration conflicts with local declaration of 'GroupedIterable'.

5 import { GroupedIterable } from './iterable/groupby';
           ~~~~~~~~~~~~~~~

node_modules/ix/Ix.d.ts:6:10 - error TS2440: Import declaration conflicts with local declaration of 'GroupedAsyncIterable'.

6 import { GroupedAsyncIterable } from './asynciterable/groupby';
           ~~~~~~~~~~~~~~~~~~~~
 ```

**Additional information:**
The issue seems to be that the imported and exported names of `GroupedIterable` and `GroupedAsyncIterable` respectively are the same in Ix.d.ts. 

Renaming the imports with `as` in Ix.d.ts and using the renamed imports to create the exported declarations of `GroupedIterable` and `GroupedAsyncIterable` resolves the errors.
<!--
Thank you for raising your concerns, we appreciate your feedback and contributions to this repository.

Before you continue, consider the following:

If you have a "How do I do ...?" question, it is better for you and for us that this question is placed in [StackOverflow](http://stackoverflow.com/questions/tagged/ixjs) or some chat channel. This way, you are making it easier for others to learn from your experiences too.

These "Issues" are meant only for technical problems, bugs, and proposals related to the library.

If your issue is a bug, please follow the format below:
-->

**IxJS version:** 2.5.3

**Code to reproduce:**

```ts
const foo = AsyncIterableX.of(1).catchWith(err => AsyncIterableX.of('abc'))
const bar = AsyncIterableX.of(1).catchWith(err => { throw err })
```

**Expected behavior:**

Type of `foo` should be `AsyncIterableX<number | string>`, no compile error.
Type of `bar` should be `AsyncIterableX<number>`

**Actual behavior:**

`foo`: Compile error.
`bar`: `AsyncIterable<any>`.

**Additional information:**

`catchWith` needs to have a return type is the union of the function return and the input type.
<!--
Thank you for raising your concerns, we appreciate your feedback and contributions to this repository.

Before you continue, consider the following:

If you have a "How do I do ...?" question, it is better for you and for us that this question is placed in [StackOverflow](http://stackoverflow.com/questions/tagged/ixjs) or some chat channel. This way, you are making it easier for others to learn from your experiences too.

These "Issues" are meant only for technical problems, bugs, and proposals related to the library.

If your issue is a bug, please follow the format below:
-->

**IxJS version:**
2.5.3

**Code to reproduce:**

```
import * as aix from 'ix/asynciterable';

async function *xx() {
  yield {x: 3};
  yield {x: 2};
  yield {x: 1};
}

async function main() {
  console.log('max xx', await aix.toArray(aix.maxBy(
    xx(),
    ({x}) => x
  )));
}

main().catch(console.error);
```

**Expected behavior:**

The logged output is the array `[{x: 3}]

**Actual behavior:**

The output is the empty array `[]`.

**Additional information:**

The example code produces the expected output if `yield {x: 3}` is anything but the first yielded value.
https://github.com/tc39/proposal-iterator-helpers
with example implementation:
https://github.com/zloirock/core-js/blob/master/packages/core-js/proposals/iterator-helpers.js

**IxJS version:** 2.5.3 *(RxJS version: 6.5.2, Node.js version: 10.16.3)*

**Code to reproduce:** [debouncePipe.js](https://gist.github.com/michaelsbradleyjr/5abf097e9c2b99d101003d6c2cafb1ed)

**Expected behavior:**

When the script is run as-is:

```
$ node debouncePipe.js 
from: 3
batched: [ 3 ]
from: 5
from: 8
from: 9
batched: [ 5, 8, 9 ]
from: 12
batched: [ 12 ]
```

And that's what I expected when debouncing the Rx pipe.

Now, if line 32 is commented and 34 is uncommented, so that the pull pipe is debounced instead of the push pipe, I expect the results would be very similar.

**Actual behavior:**

With line 32 commented and 34 uncommented:

```
$ node debouncePipe.js
from: 1
batched: [ 1 ]
from: 3
from: 4
from: 5
from: 6
from: 8
from: 9
batched: [ 3, 4, 5, 6, 8, 9 ]
from: 10
from: 12
batched: [ 10, 12 ]
```

After running it several times, I find the output is consistent. Notice how `from: 5` is reported but it seems like there wouldn't have been enough time for the 50ms debounce to expire; the same goes for some of the other `from:`.

Do I need to think about this differently or is there a bug and/or performance problem in Ix's `debounce`?

**Additional information:**

The input signature of Rx's `debounce` is different from Ix's `debounce`. I'm aware there's a rewrite (#264) underway but on that branch debounce still takes a number directly.

Would it make sense for Ix's operator to be revised so that a user would supply e.g. `() => interval(50)`?
<!--
Thank you for raising your concerns, we appreciate your feedback and contributions to this repository.

Before you continue, consider the following:

If you have a "How do I do ...?" question, it is better for you and for us that this question is placed in [StackOverflow](http://stackoverflow.com/questions/tagged/ixjs) or some chat channel. This way, you are making it easier for others to learn from your experiences too.

These "Issues" are meant only for technical problems, bugs, and proposals related to the library.

If your issue is a bug, please follow the format below:
-->

**IxJS version:** 2.5.3

**Code to reproduce:**

**Expected behavior:**

**Actual behavior:**

IxJS does not compile with the updates that have been made to the standard library in Typescript 3.6, especially with the changes to Iterable types in 3.6 it appears. (Maybe especially there with `strictNullTypes` on because a lot of the places seem to be `SomeType | undefined is not assignable to SomeType`.)

**Additional information:**
https://github.com/ReactiveX/IxJS/blob/master/src/asynciterable/timeout.ts#L31

**IxJS version:** 2.5.3

**Code to reproduce:**
```ts
const ee = new EventEmitter();
try {
  const bar = await fromEvent(ee, 'foo').finally(() => void console.log('finally')).timeout(1000).take(1).toArray();
} catch (e) {
  console.log(e instanceof TimeoutError);
}
```

**Expected behavior:**
timeout returns the source iterator and therefore `finally` getting logged

**Actual behavior:**
timeout does not return the source iterator and therefore `finally` never gets logged

**Additional information:**
wrapping the whole while loop into a `try ... finally` works:
```ts
const it = this._source[Symbol.asyncIterator]();
try {
  while (1) {
    // ...
  }
} finally {
  await returnAsyncIterator(it);
}
```

also the timeout function is missing from `AsyncIterableX.prototype`
Given both **TypeScript** and **ClosureCompiler** have fixed `es2018` targeting, good to lock down `es2018` instead of `esnext`?
<!--
Thank you for raising your concerns, we appreciate your feedback and contributions to this repository.

Before you continue, consider the following:

If you have a "How do I do ...?" question, it is better for you and for us that this question is placed in [StackOverflow](http://stackoverflow.com/questions/tagged/ixjs) or some chat channel. This way, you are making it easier for others to learn from your experiences too.

These "Issues" are meant only for technical problems, bugs, and proposals related to the library.

If your issue is a bug, please follow the format below:
-->

**IxJS version:** 2.5.3

**Code to reproduce:**
```ts
Ix.Iterable.from("Hello World")
```

**Expected behavior:**
Returns an `Iterable<string>` of each character.

**Actual behavior:**
```ts
throw new TypeError('Input type not supported');
```

**Additional information:**
Culprit is here:
```js
function isIterable(x) {
  return exports.isObject(x) && exports.isFunction(x[Symbol.iterator]);
}
```
Hello, I'd love to use RxJS in NetSuite (which uses an ES5.1 compatible version of the Rhino JS engine behind the scenes).

I've tried several of the existing builds, but none seem to work. The most promising one for this ES5.1 /AMD compatible environment seemed to be `@reactivex/ix-es5-umd` but it fails when their loader tries to load it with (I also tried using `Ix.dom.js`:

> {"type":"error.SuiteScriptModuleLoaderError","name":"UNEXPECTED_ERROR","message":"missing : after property id (/SuiteScripts/Ix.dom.internal.js#220)","stack":[]}


**I realize ES5.1 is a bit old, but this is my ask for a build we can use in this environment** (an environment which I don't control.)

p.s. I also noticed references to `Symbol.iterator` in the ES5 build which isn't part of ES5 so that confuses me a bit. , so not sure if the ES5 build is polyfilling that or what.
