https://github.com/tylertreat/chan/blob/b4120abe5d642284182f04965e793cc918daf711/src/chan.c#L407

https://github.com/tylertreat/chan/blob/b4120abe5d642284182f04965e793cc918daf711/src/chan.c#L444

In the implementation of  `chan_select`, it first checks every channel to see if it can recv/send. After that it randomly select one and do the recv/send. 
What about if a channel can recv/send while checking but cannnot when really do it.
It seems the chan_select will block.

it would be great if there was a size param, so this library can be drop-in replaced with a compatible api for passing messages between processes.
I written a test which compares the number of transfered messages per millisec to the number of threads. I'm using a similar test for the lock-free iqueue.

The file is located at https://github.com/je-so/testcode/blob/master/chan_speed_test.c. I'd appreciate it if you would integrate it.

Currently, chan provides `chan_send` to send data by `void*` argument. But someone may want to send int/long/double/char etc.
How do you think? And I worry about someone may mistake to use chan and argument pointer. For example.

``` c
char buf[256];
while (!chan_is_closed(c)) {
  if (condition) {
    strcpy(buf, "doA");
  } else {
    strcpy(buf, "doB");
  }
  chan_send(c, p);
}
```

If the chan is possible to do buffering, the `buf` will be overwritten. It need to allocation new memory for each sending. My suggestion is adding new function like below.

``` c
chan_send_string(c, buf);
chan_recv_string(c);
chan_send_int(c, 3);
chan_recv_int(c);
chan_send_double(c, 4.5);
chan_recv_double(c);
```

This functions allocate new memory for the types. `chan_recv_int`, `chan_recv_double` is possible to free the memory automatically. `chan_recv_string` will be required to free memory by developers.

`chan_select` currently only supports non-blocking selects. It should also support blocking selects, maybe by passing in a flag.
