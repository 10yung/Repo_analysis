Hello, I need a help here when I used parameters inside routerLink its not move to the current browser language its keep me returned to the default , 
what I shall do here ?

[routerLink]="['/', notificationUrl]"
Angular 8
ngx-translate/core: 11.0.1
ngx-translate-messageformat-compiler: 4.5.0


We are using [ngx-translate-messageformat-compiler](https://github.com/lephyrus/ngx-translate-messageformat-compiler) along with ngx-translate to support translation of `Date` with accurate date format according to the current lang (among other things).
So we have some cases where we give just `Date` parameters to the `translate` pipe.
The `translate` pipe works fine the first time it is triggered but when the value of one parameter changes, the pipe does not update the value displayed anymore.

Here's an exemple :

html
```html
<div>{{ 'test' | translate:param }}</div>
```
json
```json
{
  "test": "This is a date : {myDate, date, short}"
}
```
component
```javascript
  public param = {myDate: new Date()};

  change(newDate: Date) {
    this.param = { myDate: newDate };
  }
```

As I said the date displayed in the html is not updated when the value of `this.param` changes because the method `change` is called with a different `Date`.
I'm pretty sure it's because of the start of the `transform` method of `TranslatePipe` :

translate.pipe.ts 
```javascript
  transform(query: string, ...args: any[]): any {
    if (!query || query.length === 0) {
      return query;
    }

    // if we ask another time for the same key, return the last value
    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {
      return this.value;
    }
```

The problem is the `equal` fonction (see [here](https://github.com/ngx-translate/core/blob/master/projects/ngx-translate/core/src/lib/util.ts)) which returns true for 2 different `Date` objects.

To force the pipe to see a difference between `args` and `this.lastParams` I can modify the code like this :
component
```javascript
  public param = {myDate: new Date(), myDateAsString: new Date().toISOString()};

  change(newDate: Date) {
    this.param = { myDate: newDate, myDateAsString: myDate.toISOString() };
  }
```
By doing this, the `equals` function see a difference between both param values (`args` and `this.lastParams`), because the comparison of the string values return false, and now the pipe works as expected.
But this is an ugly workaround.

The equals function should return false for 2 different Date objects in the first place.


I have a very weird problem in my app that uses ngx-translate. I am not sure if my error is caused by ngx-translate, but I am wondering if anyone has experienced anything similar.

In my app I have a questionnaire that is answered by many 100s of new users every week in different countries using different languages with ngx-translate. It works fine for most users, but occasionally it will show the text from ngx-translate files looking like it went through google translate or something. A Swedish sentence will still be in Swedish, but the language looks like it's written by a 5 year old. It shows text that does not exist in my app. It is still the same text as in the translation files, but it looks like it has gone through a bad translation service.

I am unable to reproduce the problem myself, but it keeps popping up for multiple users using different browser (seen in IE, Edge and Chrome).
## Current behavior
When in a lazy module a language is used that was not 'seen' yet in the app-module (so not seen in this.translate.use or this.translate.setDefaultLang) then the default language will be used when in the lazy module this.translate.use for that 'new' language is used.

## How do you think that we should fix this?
To be honest, I do not know. What I do know is a bypass.  In app.component.ts just make sure that ngx-translate saw all possible languages with something like
`this.assistsService.getLanguages().forEach(one => this.translate.setDefaultLang(one.id));`
Perhaps this bypass will help to find the problem.

## Minimal reproduction of the problem with instructions
I'm using ionic4 & angular8.  I do not know if both are required.

## Environment
package.json {
  "name": "public",
  "version": "0.0.1",
  "author": "Ionic Framework",
  "homepage": "https://ionicframework.com/",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^8.2.14",
    "@angular/cdk": "^8.2.3",
    "@angular/common": "~8.1.2",
    "@angular/core": "~8.1.2",
    "@angular/fire": "^5.2.3",
    "@angular/forms": "~8.1.2",
    "@angular/platform-browser": "~8.1.2",
    "@angular/platform-browser-dynamic": "~8.1.2",
    "@angular/router": "~8.1.2",
    "@capacitor/android": "^1.4.0",
    "@capacitor/core": "1.4.0",
    "@ionic-native/core": "^5.19.1",
    "@ionic-native/splash-screen": "^5.19.1",
    "@ionic-native/status-bar": "^5.19.1",
    "@ionic/angular": "^4.11.7",
    "@ngx-translate/core": "^11.0.1",
    "@ngx-translate/http-loader": "^4.0.0",
    "big-integer": "^1.6.48",
    "core-js": "^2.5.4",
    "firebase": "^7.6.1",
    "hammerjs": "^2.0.8",
    "ng2-pdf-viewer": "^6.0.2",
    "rxjs": "^6.5.4",
    "tslib": "^1.9.0",
    "zone.js": "~0.9.1"
  },
  "devDependencies": {
    "@angular-devkit/architect": "~0.801.2",
    "@angular-devkit/build-angular": "~0.801.2",
    "@angular-devkit/core": "~8.1.2",
    "@angular-devkit/schematics": "~8.1.2",
    "@angular/cli": "~8.1.2",
    "@angular/compiler": "~8.1.2",
    "@angular/compiler-cli": "~8.1.2",
    "@angular/language-service": "~8.1.2",
    "@capacitor/cli": "1.4.0",
    "@ionic/angular-toolkit": "^2.1.1",
    "@types/jasmine": "~3.3.8",
    "@types/jasminewd2": "~2.0.3",
    "@types/node": "~8.9.4",
    "codelyzer": "^5.0.0",
    "jasmine-core": "~3.4.0",
    "jasmine-spec-reporter": "~4.2.1",
    "karma": "~4.1.0",
    "karma-chrome-launcher": "~2.2.0",
    "karma-coverage-istanbul-reporter": "~2.0.1",
    "karma-jasmine": "~2.0.1",
    "karma-jasmine-html-reporter": "^1.5.1",
    "protractor": "~5.4.0",
    "ts-node": "~7.0.0",
    "tslint": "~5.15.0",
    "typescript": "~3.4.3"
  },
  "description": "An Ionic project"
}

I  doesn't work with firefox and chrome so I do not think the browser is in 'fault'..

Hi!
I'm trying to add translations to the new Angular9 app, but I've got strange behaviour with `translate` directive. While all of these work fine:
````html
<div>{{'MENU.INTEGRATION' | translate}}</div>
<div [translate]="'MENU.INTEGRATION'"></div>
<div translate>{{'MENU.INTEGRATION'}}</div>
````
I cannot get translation for 
````html
<div translate>MENU.INTEGRATION</div>
````
There is no error in the console, as if the translation doesn't work and the raw key is shown.

I'm using  `@ngx-translate/core: ^11.0.1`, and `Angular 9.0.0-rc.7` 
Here is some configuration info:

````json
// package.json
{
  "dependencies": {
    "@angular/animations": "~9.0.0-rc.7",
    "@angular/common": "~9.0.0-rc.7",
    "@angular/compiler": "~9.0.0-rc.7",
    "@angular/core": "~9.0.0-rc.7",
    "@angular/forms": "~9.0.0-rc.7",
    "@angular/platform-browser": "~9.0.0-rc.7",
    "@angular/platform-browser-dynamic": "~9.0.0-rc.7",
    "@ngx-translate/core": "^11.0.1",
    "tslib": "^1.10.0",
    "zone.js": "~0.10.2"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "~0.900.0-rc.7",
    "@angular-devkit/build-ng-packagr": "~0.900.0-rc.7",
    "@angular/cli": "~9.0.0-rc.7",
    "@angular/compiler-cli": "~9.0.0-rc.7",
    "@angular/language-service": "~9.0.0-rc.7",
    "codelyzer": "^5.1.2",
    "ng-packagr": "^9.0.0-rc.3",
    "protractor": "~5.4.0",
    "ts-node": "~7.0.0",
    "tslint": "~5.15.0",
    "typescript": "~3.6.4"
  }
}
````

````json
// tsconfig.json
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "module": "esnext",
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "es2015",
    "typeRoots": [
      "node_modules/@types"
    ],
    "lib": [
      "es2018",
      "dom"
    ],
    "paths": {
      "@core/*": ["projects/core/src/lib/*"],
      "components": [
        "dist/components"
      ],
      "components/*": [
        "dist/components/*"
      ]
    },
    "resolveJsonModule": true,
    "esModuleInterop": true
  },
  "angularCompilerOptions": {
    "fullTemplateTypeCheck": true,
    "strictInjectionParameters": true
  }
}

````
I want to write the ONE unit test for the whole project (not for one specified component) in order to check if there are any missing keys (in my .json file with all translations), which I pass through translation pipe ANYWHERE in the project. For example:

`<span>{{ 'FOO' | translate }}</span>`

If FOO key doesn`t exist in .json file, then the test should fail and (optionally) somehow return the list of missing keys. Is it possible to implement this feature in this way? Or at least in other comparable ways?
 
## Current behavior
Example is the best to explain:
If I have this key-value pair:
"NoRecordsWereFound": "No matching {{records}} were found for your search."

And I'm not providing the 'records' param in the HTML:
{{'NoRecordsWereFound' | translate}}

I see in the browser:
No matching {{records}} were found for your search.


## Expected behavior
I want to set a default value for 'records', in case of not providing one, let's say 'values',
so for previous example I'll get:
No matching values were found for your search.


## What is the motivation / use case for changing the behavior?
In case of missing the param value, instead of doing 2 *ngIfs for having the value, or for not having it, know for sure that default value will be taken instead.


## How do you think that we should implement this?
Maybe, by using the name of the param as the default value, for example:
"NoRecordsWereFound": "No matching {{records}} were found for your search.",
in the HTML will be simply (when no params provided):
No matching records were found for your search.

My question in StackOverflow for further info:
https://stackoverflow.com/questions/59518260/angular-ngx-translate-how-to-set-a-default-value-for-missing-param-in-translat

Thanks!
"userRegisterSuccess": "<strong>Registration Successful<strong><br> Please enter your email and password to start using Software",

this.toastService.success('auth.userRegisterSuccess'))
## Current behavior
Http failure with iPhone/IOS is being reported in our error logs. (using stacktrace)

<pre>
ERROR:
Http failure response for /assets/i18n/en.json: 0 Unknown Error

AGENT:
Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1
</pre>

## Expected behavior
No Http errors reported

## How do you think that we should fix this?
Perhaps setup the same environment and use same user agent to re-create the issue.

## Minimal reproduction of the problem with instructions
We have had this issue since converting to Angular 7 from AngularJS.   Only happens when site is browsed using IPhone/IOS and is possibly intermittent.  We have error reporting in place and the above is what gets reported.   Why the failure I do not know.

## Environment

<pre><code>
  "dependencies": {
    "@angular/animations": "~8.2.11",
    "@angular/cdk": "~8.2.3",
    "@angular/common": "~8.2.11",
    "@angular/compiler": "~8.2.11",
    "@angular/core": "~8.2.11",
    "@angular/forms": "~8.2.11",
    "@angular/material": "^8.2.3",
    "@angular/platform-browser": "~8.2.11",
    "@angular/platform-browser-dynamic": "~8.2.11",
    "@angular/router": "~8.2.11",
    "@ng-bootstrap/ng-bootstrap": "^5.1.1",
    "@ngx-translate/core": "^11.0.1",
    "@ngx-translate/http-loader": "^4.0.0",
    "angular-gtag": "^1.0.3",
    "bootstrap": "^4.3.1",
    "core-js": "^2.5.4",
    "express": "^4.17.1",
    "hammerjs": "^2.0.8",
    "jquery": "^3.4.1",
    "moment": "^2.24.0",
    "ng2-truncate": "^1.3.17",
    "ngx-bootstrap": "^3.2.0",
    "ngx-moment": "^3.4.0",
    "path": "^0.12.7",
    "popper.js": "^1.16.0",
    "pusher-js": "^5.0.2",
    "rxjs": "~6.5.3",
    "stacktrace-js": "^2.0.1",
    "tslib": "^1.9.0",
    "zone.js": "~0.9.1"
  },

Browser:
Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1
 
For Tooling issues:
- Node version: 10.16.0
- Platform:  Heroku Platform (Linux)

</code></pre>

## Current behavior
Translations returned as functions when I try to load them async.
<pre><code>this.translate.get('shared').subscribe(translations => {
    console.log(translations.key) // Function(d) { return 'Value' }
});</pre></code>

So I need to execute the key to access the value.
<pre><code>this.translate.get('shared').subscribe(translations => {
    console.log(translations.key()) // Value
});</pre></code>


## Expected behavior
<pre><code>this.translate.get('shared').subscribe(translations => {
    console.log(translations.key) // Value
});</pre></code>


This issue occurs when I use `TranslateMessageFormatCompiler` from `@ ngx-translate-messageformat-compiler`. But author (@lephyrus) said that his compiler couldn't affect compilation that way, so probably it's something with `.get()` method.

Also translations loaded by `.get()` doesn't react to language change if not loaded inside `.onLangChange`. Maybe I'm using it in wrong way?


## Minimal reproduction of the problem with instructions
[StackBlitz](https://stackblitz.com/edit/github-89xwvl)


## Environment

<pre><code>
ngx-translate version: 11.0.1
Angular version: 8.2.11
</code></pre>
