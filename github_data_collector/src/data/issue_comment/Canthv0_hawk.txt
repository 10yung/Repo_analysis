Thank you for the warning in the disclaimer that data is being collected.  Is it documented anywhere what data you are collected?  If not, would you consider doing that?
Hi,

We are seeing a potential issue with the User log extractions on the latest version of Hawk - it seems that it is only pulling the first few available days of logs from the Exchange logs for the user selected and not the full 90 days (for example at the time of writing, I am only getting 9/10/11/12/13 of October and nothing else - I'm sure there's further activity after this!) - the output logging shows:

[07/01/2020 15:53:31] - Searching Exchange Mailbox Audit Logs (this can take some time)
[07/01/2020 15:53:31] - Searching Range 10/09/2019 00:00:00 To 10/14/2019 00:00:00
[07/01/2020 15:53:47] - Found 397 Exchange Mailbox audit records.
[07/01/2020 15:53:47] - Writing Data to .\20200107_1547\...

Anyone else confirm please?

**EDIT**

It seems like something on the O365 back-end that has caused this issue - rolling back to an older version of Hawk has also produced the same problem now.

Also, the script seems to hang on "Looking Up Ip Address Locations" and then spits out a number of subsequent errors:

[07/01/2020 15:48:42] - Loading Networking functions from C:\Program Files\WindowsPowerShell\Modules\HAWK\1.15.0\System.Net.IPNetwork.dll                                                                                                       Invoke-WebRequest : The underlying connection was closed: An unexpected error occurred on a receive.                    At C:\Program Files\WindowsPowerShell\Modules\HAWK\1.15.0\Hawk.psm1:889 char:22                                         + ... MSFTJSON = (Invoke-WebRequest -uri ("https://endpoints.office.com/end ...                                         +                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                 + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebExc     eption                                                                                                                   + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand                                                                                                                               [07/01/2020 15:52:52] - Found 0 unique MSFT IPv6 address ranges                                                         [07/01/2020 15:52:52] - Found 0 unique MSFT IPv4 address ranges                                                         [07/01/2020 15:52:52] - Creating global variable $MSFTIPList                                                            Cannot index into a null array.                                                                                         At C:\Program Files\WindowsPowerShell\Modules\HAWK\1.15.0\Hawk.psm1:969 char:13                                         +             $test = [System.Net.IPNetwork]::Contains($MSFTIPList.ipv4 ...                                             +             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                     + CategoryInfo          : InvalidOperation: (:) [], RuntimeException                                                    + FullyQualifiedErrorId : NullArray                                    

***

*** Edit 2 ***

I've run the PowerShell command for Mailbox audit logging independently of Hawk and it works.

Thanks
Is it technically feasible for HAWK to pull RiskDetections such as those found in https://portal.azure.com/#blade/Microsoft_AAD_IAM/IdentityProtectionMenuBlade/RiskDetections, possibly through the Graph request below?  In environments that do not have UAL turned on, this is often the only historical logging of unauthorized sign-ins so it is of great value.

GET https://graph.microsoft.com/beta/riskDetections

The Search-UnifiedAuditLog command that gets generated seems to generate with dates and times in the local format. As a UK native our format of dd/mm/yyyy does not get accepted by that cmdlet, causing an error:

`Cannot process argument transformation on parameter 'EndDate'. Cannot convert value "19/09/2019" to type
"Microsoft.Exchange.ExchangeSystem.ExDateTime". Error: "String was not recognized as a valid DateTime."`

Is it possible to parse the JSON data in the Exchange_UAL_Audit_<user>.csv log file into seperate columns for ease of readability?

Thank you!!

Search-UnifiedAuditLog will only return 50k items.  If the search gets back >50k items we have two issues:

1) How do we get all of the items back and not just the 50K
2) Right now the return gets stuck in a loop and will keep trying to get back the 50k
I've come into scenarios where the ip's are not looked up and no converted_authentication_log file is generated. Is there a reason/criteria for when this occurs? In a compromised account today, a search over the past 10 days did run through and create the logs however a search for the past 120 days did not.
On a related note it would be good to be able to search for logs between X and Y days such as 80-90 days ago to get more details if you knew from other experience that an account was compromised around a certain date in the past.

Install-Module -Name HAWK
Produces error on multiple computers and nothing gets installed:
PackageManagement\Install-Package : The following commands are already available on this system:'Add-AzureADApplicationOwner,Add-AzureADDeviceRegisteredOwner,Add-AzureADDeviceRegisteredUser,Add-AzureADDirec
toryRoleMember,Add-AzureADGroupMember,Add-AzureADGroupOwner,Add-AzureADMSLifecyclePolicyGroup,Add-AzureADServicePrincipalOwner,Confirm-AzureADDomain,Connect-AzureAD,Disconnect-AzureAD,Enable-AzureADDirector
yRole,Get-AzureADApplication,Get-AzureADApplicationExtensionProperty,Get-AzureADApplicationKeyCredential,Get-AzureADApplicationLogo,Get-AzureADApplicationOwner,Get-AzureADApplicationPasswordCredential,Get-A
zureADApplicationProxyApplication,Get-AzureADApplicationProxyApplicationConnectorGroup,Get-AzureADApplicationProxyConnector,Get-AzureADApplicationProxyConnectorGroup,Get-AzureADApplicationProxyConnectorGrou
pMembers,Get-AzureADApplicationProxyConnectorMemberOf,Get-AzureADApplicationServiceEndpoint,Get-AzureADContact,Get-AzureADContactDirectReport,Get-AzureADContactManager,Get-AzureADContactMembership,Get-Azure
ADContactThumbnailPhoto,Get-AzureADContract,Get-AzureADCurrentSessionInfo,Get-AzureADDeletedApplication,Get-AzureADDevice,Get-AzureADDeviceConfiguration,Get-AzureADDeviceRegisteredOwner,Get-AzureADDeviceReg
isteredUser,Get-AzureADDirectoryRole,Get-AzureADDirectoryRoleMember,Get-AzureADDirectoryRoleTemplate,Get-AzureADDomain,Get-AzureADDomainNameReference,Get-AzureADDomainServiceConfigurationRecord,Get-AzureADD
omainVerificationDnsRecord,Get-AzureADExtensionProperty,Get-AzureADGroup,Get-AzureADGroupAppRoleAssignment,Get-AzureADGroupMember,Get-AzureADGroupOwner,Get-AzureADMSDeletedDirectoryObject,Get-AzureADMSDelet
edGroup,Get-AzureADMSGroup,Get-AzureADMSGroupLifecyclePolicy,Get-AzureADMSIdentityProvider,Get-AzureADMSLifecyclePolicyGroup,Get-AzureADOAuth2PermissionGrant,Get-AzureADObjectByObjectId,Get-AzureADServiceAp
pRoleAssignedTo,Get-AzureADServiceAppRoleAssignment,Get-AzureADServicePrincipal,Get-AzureADServicePrincipalCreatedObject,Get-AzureADServicePrincipalKeyCredential,Get-AzureADServicePrincipalMembership,Get-Az
ureADServicePrincipalOAuth2PermissionGrant,Get-AzureADServicePrincipalOwnedObject,Get-AzureADServicePrincipalOwner,Get-AzureADServicePrincipalPasswordCredential,Get-AzureADSubscribedSku,Get-AzureADTenantDet
ail,Get-AzureADTrustedCertificateAuthority,Get-AzureADUser,Get-AzureADUserAppRoleAssignment,Get-AzureADUserCreatedObject,Get-AzureADUserDirectReport,Get-AzureADUserExtension,Get-AzureADUserLicenseDetail,Get
-AzureADUserManager,Get-AzureADUserMembership,Get-AzureADUserOAuth2PermissionGrant,Get-AzureADUserOwnedDevice,Get-AzureADUserOwnedObject,Get-AzureADUserRegisteredDevice,Get-AzureADUserThumbnailPhoto,New-Azu
reADApplication,New-AzureADApplicationExtensionProperty,New-AzureADApplicationKeyCredential,New-AzureADApplicationPasswordCredential,New-AzureADApplicationProxyApplication,New-AzureADApplicationProxyConnect
orGroup,New-AzureADDevice,New-AzureADDomain,New-AzureADGroup,New-AzureADGroupAppRoleAssignment,New-AzureADMSGroup,New-AzureADMSGroupLifecyclePolicy,New-AzureADMSIdentityProvider,New-AzureADMSInvitation,New-
AzureADServiceAppRoleAssignment,New-AzureADServicePrincipal,New-AzureADServicePrincipalKeyCredential,New-AzureADServicePrincipalPasswordCredential,New-AzureADTrustedCertificateAuthority,New-AzureADUser,New-
AzureADUserAppRoleAssignment,Remove-AzureADApplication,Remove-AzureADApplicationExtensionProperty,Remove-AzureADApplicationKeyCredential,Remove-AzureADApplicationOwner,Remove-AzureADApplicationPasswordCrede
ntial,Remove-AzureADApplicationProxyApplication,Remove-AzureADApplicationProxyApplicationConnectorGroup,Remove-AzureADApplicationProxyConnectorGroup,Remove-AzureADContact,Remove-AzureADContactManager,Remove
-AzureADDeletedApplication,Remove-AzureADDevice,Remove-AzureADDeviceRegisteredOwner,Remove-AzureADDeviceRegisteredUser,Remove-AzureADDirectoryRoleMember,Remove-AzureADDomain,Remove-AzureADGroup,Remove-Azure
ADGroupAppRoleAssignment,Remove-AzureADGroupMember,Remove-AzureADGroupOwner,Remove-AzureADMSDeletedDirectoryObject,Remove-AzureADMSGroup,Remove-AzureADMSGroupLifecyclePolicy,Remove-AzureADMSIdentityProvider
,Remove-AzureADMSLifecyclePolicyGroup,Remove-AzureADOAuth2PermissionGrant,Remove-AzureADServiceAppRoleAssignment,Remove-AzureADServicePrincipal,Remove-AzureADServicePrincipalKeyCredential,Remove-AzureADServ
icePrincipalOwner,Remove-AzureADServicePrincipalPasswordCredential,Remove-AzureADTrustedCertificateAuthority,Remove-AzureADUser,Remove-AzureADUserAppRoleAssignment,Remove-AzureADUserExtension,Remove-AzureAD
UserManager,Reset-AzureADMSLifeCycleGroup,Restore-AzureADDeletedApplication,Restore-AzureADMSDeletedDirectoryObject,Revoke-AzureADSignedInUserAllRefreshToken,Revoke-AzureADUserAllRefreshToken,Select-AzureAD
GroupIdsContactIsMemberOf,Select-AzureADGroupIdsGroupIsMemberOf,Select-AzureADGroupIdsServicePrincipalIsMemberOf,Select-AzureADGroupIdsUserIsMemberOf,Set-AzureADApplication,Set-AzureADApplicationLogo,Set-Az
ureADApplicationProxyApplication,Set-AzureADApplicationProxyApplicationConnectorGroup,Set-AzureADApplicationProxyApplicationCustomDomainCertificate,Set-AzureADApplicationProxyApplicationSingleSignOn,Set-Azu
reADApplicationProxyConnector,Set-AzureADApplicationProxyConnectorGroup,Set-AzureADDevice,Set-AzureADDomain,Set-AzureADGroup,Set-AzureADMSGroup,Set-AzureADMSGroupLifecyclePolicy,Set-AzureADMSIdentityProvide
r,Set-AzureADServicePrincipal,Set-AzureADTenantDetail,Set-AzureADTrustedCertificateAuthority,Set-AzureADUser,Set-AzureADUserExtension,Set-AzureADUserLicense,Set-AzureADUserManager,Set-AzureADUserPassword,Se
t-AzureADUserThumbnailPhoto,Update-AzureADSignedInUserPassword'. This module 'AzureAD' may override the existing commands. If you still want to install this module 'AzureAD', use -AllowClobber parameter.
At C:\Program Files\WindowsPowerShell\Modules\PowerShellGet\1.0.0.1\PSModule.psm1:1809 char:21
+ ...          $null = PackageManagement\Install-Package @PSBoundParameters
+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception
    + FullyQualifiedErrorId : CommandAlreadyAvailable,Validate-ModuleCommandAlreadyAvailable,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage
Currently the IP address lookup code test all IP addresses and then determines if they belong to MSFT according to the MSFT JSON data from https://endpoints.office.com/endpoints/Worldwide?ClientRequestId=

This is resulting in queries being made to the GEO Location endpoint that are not needed.  If it is an MSFT Address we don't need to look up the location.

Should look to optimize this further.