it would be cool to be able to pass in the latex character to be used in the equation. sometimes it's useful to have `\hat{\beta}`, for example.

thanks
Hi there, great package!  Just a suggestion to add support for `quantreg::rq` objects.  

```r
library(equatiomatic)
library(quantreg)

# Fit a simple model
mod1 <- rq(mpg ~ cyl + disp, data = mtcars)

# Give the results to extract_eq
extract_eq(mod1)

# Error in UseMethod("extract_lhs", model) : 
#  no applicable method for 'extract_lhs' applied to an object of class "rq"
```
Hi 

I noticed that the `pkgdown` site is being created in travis deploying to gh-pages, but the it looks like the repo settings are still pointing to the docs folder in the master branch (if it is pointing to gh-pages then ignore this msg :) )

You can set it to gh-pages and remove the docs dir from the master, which will make cloning and `remotes::install_github` faster since they wont have to copy the heavyish subdirectory anymore.


I was wondering if this package should adopt a more standard glm notation (and this might dovetail with mixed models, zero inflation, and others) breaking models into parts.

For example

```
library(equatiomatic)

dat = data.frame(counts = c(18,17,15,20,10,20,25,13,12), 
                 treatment = gl(3,3), 
                 trials = 30)

glm.D93 <- glm(counts/30 ~  treatment, weights = dat$trials, family = binomial(), data = dat)

extract_eq(glm.D93)
```

Currently makes
![image](https://user-images.githubusercontent.com/757410/64546564-efe51180-d2f8-11e9-8244-0868772fa256.png)

But, often they're easier to express more fully - including showing the info about their error distribution, such as 

![image](https://user-images.githubusercontent.com/757410/64547515-b2818380-d2fa-11e9-9fab-b6190ac21d09.jpeg)

Referred via Twitter:

https://twitter.com/michael_chirico/status/1171070608660000768?s=20

Basically, I'm more accustomed to my coefficients being \beta_k, k={0,...,K} and \beta_0 the intercept (using `abline` is always a guessing game for me ðŸ˜…).

Can you think of a good API for allowing this sort of flexibility in the output?

Thanks in advance!

PS let me know if you'd like a fleshed out example -- I'm on mobile now but can come back to it from my machine later if so
Hi,
is there a way to somehow \label the equation?
Thank you!
Currently in multi-equation equations, each Î± term gets its own subscript, while the Î²s do not. Additionally, the Î±s are in reverse order (4 comes first; ends with 1)

```r
set.seed(1234)
  df <- data.frame(outcome = sample(LETTERS[1:5], 300, replace = TRUE),
                   categorical = sample(letters[1:3], 100, replace = TRUE),
                   continuous_1 = rnorm(300, 100, 1),
                   continuous_2 = rnorm(300, 50, 5))
  df$outcome <- ordered(df$outcome)

  model_ologit <- MASS::polr(outcome ~ ., data = df, Hess = TRUE)

  tex <- extract_eq(model_ologit)
```

```tex
$$
\log\left[ \frac { P( \text{A} \geq \text{B} ) }{ 1 - P( \text{A} \geq \text{B} ) } \right] = \alpha_{4} + \beta_{1}(\text{categorical}_{\text{b}}) + \beta_{2}(\text{categorical}_{\text{c}}) + \beta_{3}(\text{continuous\_1}) + \beta_{4}(\text{continuous\_2}) + \epsilon\\\log\left[ \frac { P( \text{B} \geq \text{C} ) }{ 1 - P( \text{B} \geq \text{C} ) } \right] = \alpha_{3} + \beta_{1}(\text{categorical}_{\text{b}}) + \beta_{2}(\text{categorical}_{\text{c}}) + \beta_{3}(\text{continuous\_1}) + \beta_{4}(\text{continuous\_2}) + \epsilon\\\log\left[ \frac { P( \text{C} \geq \text{D} ) }{ 1 - P( \text{C} \geq \text{D} ) } \right] = \alpha_{2} + \beta_{1}(\text{categorical}_{\text{b}}) + \beta_{2}(\text{categorical}_{\text{c}}) + \beta_{3}(\text{continuous\_1}) + \beta_{4}(\text{continuous\_2}) + \epsilon\\\log\left[ \frac { P( \text{D} \geq \text{E} ) }{ 1 - P( \text{D} \geq \text{E} ) } \right] = \alpha_{1} + \beta_{1}(\text{categorical}_{\text{b}}) + \beta_{2}(\text{categorical}_{\text{c}}) + \beta_{3}(\text{continuous\_1}) + \beta_{4}(\text{continuous\_2}) + \epsilon
$$
```

![image](https://user-images.githubusercontent.com/73663/60213778-71142880-9821-11e9-9df8-9ee60341dbc8.png)

I'm not 100% sure of the math behind thisâ€”does each equation get its own intercept while the Î²s are shared across the equations? (like, is the varying Î± that cut point thing?)

The order of the Î±s should probably go 1â€“4 instead of 4â€“1, at least, though. (unless that breaks convention? I hardly know anything about the math here)
Using `scale()` in a formula seems to cause an issue with the coefficient names:

``` r
library(equatiomatic)
mod1 <- lm(mpg ~ scale(cyl) + disp, mtcars)
extract_eq(mod1)
#> $$
#> \text{mpg} = \alpha + \beta_{1}() + \beta_{2}(\text{disp}) + \epsilon
#> $$
```

<sup>Created on 2019-06-21 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1)</sup>
I started a branch for dealing with ordered logistic regression via `MASS::polr`. I'm heading out of town through the end of the work week and won't have time to work on it more, but it might be worth taking a look. It works okay overall but the big issue currently is that the numerator and denominator are wrapped in `\text` and so I can't insert code like `\geq` easily. I don't think this should be a terrifically difficult fix, but it's something we should address. 

Here's how it looks currently

```r
library(magrittr)
library(rio)
library(equatiomatic)

d <- import("https://stats.idre.ucla.edu/stat/data/ologit.dta",
                 setclass = "tibble") %>%
	factorize()
m <- MASS::polr(apply ~ pared + public + gpa, data = d)
extract_eq(m)
```

<img width="1197" alt="Screen Shot 2019-06-19 at 12 06 53 PM" src="https://user-images.githubusercontent.com/10944136/59793280-ff6d3500-928a-11e9-9941-317f10fa660f.png">


On a side note, I was really happy with how little code actually had to be written to make this extension. I think we've set ourselves up well for future development.
This is mostly just a checklist of the more important models we might want to support with fancy math. In theory, these are all supported automatically with broom (though we might want to have a general catchall way to show non-fancy formulas):

- [x] Binary logistic (`glm(..., family = binomial(link = "logit"))`)
- [ ] Binary probit (`glm(..., family = binomial(link = "probit"))`)
- [ ] Ordered logistic (`MASS::polr(..., method = "logistic")` and `ordered::clm(..., link = "logit")`)
- [ ] Ordered probit (`MASS::polr(..., method = "probit")` and `ordered::clm(..., link = "probit")`)
- [ ] Multinomial logistic (`nnet::multinom()`)
- [ ] Survival regression (`survival::Surv()`)
- [ ] Multiple ANOVA (`stats::manova()`)
