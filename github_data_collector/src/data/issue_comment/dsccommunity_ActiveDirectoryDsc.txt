#### Pull Request (PR) description

This PR adds the AD `TombstoneLifetime` property to the `ADForestProperties` resource.

It also makes the following changes to the `ADForestProperties` resource:

- Allows clearing of the `ServicePrincipalNameSuffix` and `UserPrincipalNameSuffix` properties.
- Adds Integration tests.
- Refactors the unit tests.

#### This Pull Request (PR) fixes the following issues

- Fixes #548
- Fixes #349 
- Fixes #302 

#### Task list
<!--
    To aid community reviewers in reviewing and merging your PR, please take
    the time to run through the below checklist and make sure your PR has
    everything updated as required.

    Change to [x] for each task in the task list that applies to your PR.
    For those task that don't apply to you PR, leave those as is.
-->
- [x] Added an entry to the change log under the Unreleased section of the
      file CHANGELOG.md. Entry should say what was changed and how that
      affects users (if applicable), and reference the issue being resolved
      (if applicable).
- [x] Resource documentation added/updated in README.md.
- [x] Resource parameter descriptions added/updated in README.md, schema.mof
      and comment-based help.
- [x] Comment-based help added/updated.
- [x] Localization strings added/updated in all localization files as appropriate.
- [x] Examples appropriately added/updated.
- [x] Unit tests added/updated. See [DSC Community Testing Guidelines](https://dsccommunity.org/guidelines/testing-guidelines).
- [x] Integration tests added/updated (where possible). See [DSC Community Testing Guidelines](https://dsccommunity.org/guidelines/testing-guidelines).
- [x] New/changed code adheres to [DSC Community Style Guidelines](https://dsccommunity.org/styleguidelines).

<!-- Reviewable:start -->
---
This change isâ€‚[<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/dsccommunity/activedirectorydsc/549)
<!-- Reviewable:end -->

#### Details of the scenario you tried and the problem that is occurring

The ADForestProperties resource does not currently allow the `ServicePrincipalNameSuffix` and `UserPrincipalNameSuffix` to be cleared.

#### Verbose logs showing the problem

```powershell
PS> (Get-ADForest).UpnSuffixes
fabrikam.com

PS> Invoke-DscResource -Name ADForestProperties -ModuleName ActiveDirectoryDsc -Method Set `
    -Property @{ForestName='contoso.com';UserPrincipalNameSuffix=@('')} -Verbose

VERBOSE: Perform operation 'Invoke CimMethod' with following parameters, ''methodName' = Resourceset,'className' =
MSFT_DSCLocalConfigurationManager,'namespaceName' = root/Microsoft/Windows/DesiredStateConfiguration'.
VERBOSE: An LCM method call arrived from computer DC01-2019 with user sid
S-1-5-21-3553084080-2500667019-4197401787-500.
VERBOSE: [DC01-2019]: LCM:  [ Start  Set      ]  [[ADForestProperties]DirectResourceAccess]
VERBOSE: [DC01-2019]: LCM:  [ End    Set      ]  [[ADForestProperties]DirectResourceAccess]  in 1.3440 seconds.
VERBOSE: [DC01-2019]: LCM:  [ End    Set      ]    in  2.6720 seconds.
VERBOSE: Operation 'Invoke CimMethod' complete.

PS> (Get-ADForest).UpnSuffixes
fabrikam.com
```

#### Suggested solution to the issue

Modify the code to check for empty `ServicePrincipalNameSuffix` and `UserPrincipalNameSuffix` parameters and set the relevant `Set-AdForest` parameter to `$null`.

#### The operating system the target node is running

```
OsName               : Microsoft Windows Server 2019 Datacenter
OsOperatingSystemSKU : DatacenterServerEdition
OsArchitecture       : 64-bit
WindowsVersion       : 1809
WindowsBuildLabEx    : 17763.1.amd64fre.rs5_release.180914-1434
OsLanguage           : en-US
OsMuiLanguages       : {en-US}
```

#### Version and build of PowerShell the target node is running

```
Name                           Value
----                           -----
PSVersion                      5.1.17763.316
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.17763.316
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
```

#### Version of the DSC module that was used

5.0.0
#### Details of the scenario you tried and the problem that is occurring

I am trying to apply permissions to an OU and getting get an error when applying the configuration with `Start-DscConfiguration`

#### Verbose logs showing the problem

```
VERBOSE: Perform operation 'Invoke CimMethod' with following parameters, ''methodName' =
SendConfigurationApply,'className' = MSFT_DSCLocalConfigurationManager,'namespaceName' =
root/Microsoft/Windows/DesiredStateConfiguration'.
VERBOSE: An LCM method call arrived from computer AD01 with user sid S-1-5-21-3638333018-712442695-4229731031-1001.
VERBOSE: [AD01]: LCM:  [ Start  Set      ]
VERBOSE: [AD01]: LCM:  [ Start  Resource ]  [[ADUser]CRMInstallAccountUser]
VERBOSE: [AD01]: LCM:  [ Start  Test     ]  [[ADUser]CRMInstallAccountUser]
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Retrieving Active Directory user
'_crmadmin' (_crmadmin@contoso.local). (ADU0004)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Active Directory user '_crmadmin'
(_crmadmin@contoso.local) was NOT present. (ADU0008)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Creating connection to Active Directory
domain 'contoso.local'. (ADU0005)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Missing the type
'System.DirectoryServices.AccountManagement.PrincipalContext' from the PowerShell session. (ADCOMMON0044)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Adding the assembly
'System.DirectoryServices.AccountManagement' into the PowerShell session. (ADCOMMON0045)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Checking Active Directory user '_crmadmin'
password. (ADU0006)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] User 'Password' property is NOT in the
desired state. Expected '<Password>', actual '<Password>'. (ADU0009)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] User 'PasswordNeverExpires' property is NOT
 in the desired state. Expected 'True', actual ''. (ADU0009)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] User 'Ensure' property is NOT in the
desired state. Expected 'Present', actual 'Absent'. (ADU0009)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] User 'Enabled' property is NOT in the
desired state. Expected 'True', actual ''. (ADU0009)
VERBOSE: [AD01]: LCM:  [ End    Test     ]  [[ADUser]CRMInstallAccountUser]  in 0.4480 seconds.
VERBOSE: [AD01]: LCM:  [ Start  Set      ]  [[ADUser]CRMInstallAccountUser]
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Retrieving Active Directory user
'_crmadmin' (_crmadmin@contoso.local). (ADU0004)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Active Directory user '_crmadmin'
(_crmadmin@contoso.local) was NOT present. (ADU0008)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Adding Active Directory user '_crmadmin'.
(ADU0010)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Retrieving Active Directory user
'_crmadmin' (_crmadmin@contoso.local). (ADU0004)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Active Directory user '_crmadmin'
(_crmadmin@contoso.local) is present. (ADU0007)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Creating connection to Active Directory
domain 'contoso.local'. (ADU0005)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] The type
'System.DirectoryServices.AccountManagement.PrincipalContext' is already loaded into the PowerShell session.
(ADCOMMON0043)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Checking Active Directory user '_crmadmin'
password. (ADU0006)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Setting Active Directory user password.
(ADU0013)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Updating user property
'PasswordNeverExpires' with/to 'True'. (ADU0014)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Updating user property 'Enabled' with/to
'True'. (ADU0014)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Updating Active Directory user '_crmadmin'.
 (ADU0012)
VERBOSE: [AD01]: LCM:  [ End    Set      ]  [[ADUser]CRMInstallAccountUser]  in 0.5880 seconds.
VERBOSE: [AD01]: LCM:  [ End    Resource ]  [[ADUser]CRMInstallAccountUser]
VERBOSE: [AD01]: LCM:  [ Start  Resource ]  [[ADOrganizationalUnit]CRMGroupsOU]
VERBOSE: [AD01]: LCM:  [ Start  Test     ]  [[ADOrganizationalUnit]CRMGroupsOU]
VERBOSE: [AD01]:                            [[ADOrganizationalUnit]CRMGroupsOU] Retrieving OU 'CRM groups' from path
'DC=contoso,DC=local'. (ADOU0001)
VERBOSE: [AD01]:                            [[ADOrganizationalUnit]CRMGroupsOU] OU 'CRM groups' does not exist when it
should exist. (ADOU0009)
VERBOSE: [AD01]: LCM:  [ End    Test     ]  [[ADOrganizationalUnit]CRMGroupsOU]  in 0.0930 seconds.
VERBOSE: [AD01]: LCM:  [ Start  Set      ]  [[ADOrganizationalUnit]CRMGroupsOU]
VERBOSE: [AD01]:                            [[ADOrganizationalUnit]CRMGroupsOU] Retrieving OU 'CRM groups' from path
'DC=contoso,DC=local'. (ADOU0001)
VERBOSE: [AD01]:                            [[ADOrganizationalUnit]CRMGroupsOU] Creating OU 'CRM groups'. (ADOU0004)
VERBOSE: [AD01]: LCM:  [ End    Set      ]  [[ADOrganizationalUnit]CRMGroupsOU]  in 0.1080 seconds.
VERBOSE: [AD01]: LCM:  [ End    Resource ]  [[ADOrganizationalUnit]CRMGroupsOU]
VERBOSE: [AD01]: LCM:  [ Start  Resource ]  [[ADGroup]CRMPrivUserGroup]
VERBOSE: [AD01]: LCM:  [ Start  Test     ]  [[ADGroup]CRMPrivUserGroup]
VERBOSE: [AD01]:                            [[ADGroup]CRMPrivUserGroup] AD Group 'CRM01PrivUserGroup' was not found.
(ADG00010)
VERBOSE: [AD01]:                            [[ADGroup]CRMPrivUserGroup] AD Group 'GroupScope' is not correct. Expected
'Universal', actual ''. (ADG0011)
VERBOSE: [AD01]:                            [[ADGroup]CRMPrivUserGroup] AD Group 'Path' is not correct. Expected
'OU=CRM groups,DC=contoso,DC=local', actual ''. (ADG0011)
VERBOSE: [AD01]:                            [[ADGroup]CRMPrivUserGroup] Group membership is NOT in the desired state.
(ADG0002)
VERBOSE: [AD01]:                            [[ADGroup]CRMPrivUserGroup] AD Group 'Ensure' is not correct. Expected
'Present', actual 'Absent'. (ADG0011)
VERBOSE: [AD01]: LCM:  [ End    Test     ]  [[ADGroup]CRMPrivUserGroup]  in 0.1860 seconds.
VERBOSE: [AD01]: LCM:  [ Start  Set      ]  [[ADGroup]CRMPrivUserGroup]
VERBOSE: [AD01]:                            [[ADGroup]CRMPrivUserGroup] AD Group 'CRM01PrivUserGroup' was not found.
(ADG00010)
VERBOSE: [AD01]:                            [[ADGroup]CRMPrivUserGroup] Creating AD Group 'CRM01PrivUserGroup'.
(ADG0005)
VERBOSE: [AD01]:                            [[ADGroup]CRMPrivUserGroup] Adding '1' member(s) to AD group
'CRM01PrivUserGroup'. (ADG0003)
VERBOSE: [AD01]: LCM:  [ End    Set      ]  [[ADGroup]CRMPrivUserGroup]  in 0.2010 seconds.
VERBOSE: [AD01]: LCM:  [ End    Resource ]  [[ADGroup]CRMPrivUserGroup]
VERBOSE: [AD01]: LCM:  [ Start  Resource ]  [[ADObjectPermissionEntry]OUPermissions]
VERBOSE: [AD01]: LCM:  [ Start  Test     ]  [[ADObjectPermissionEntry]OUPermissions]
VERBOSE: [AD01]:                            [[ADObjectPermissionEntry]OUPermissions] Creating new AD: PSDrive.
(ADCOMMON0032)
VERBOSE: [AD01]:                            [[ADObjectPermissionEntry]OUPermissions] Object permission entry not found
on object 'OU=CRM groups,DC=contoso,DC=local'. (OPE0002)
VERBOSE: [AD01]:                            [[ADObjectPermissionEntry]OUPermissions] Object permission entry on object
'OU=CRM groups,DC=contoso,DC=local' is not in the desired state. (OPE0006)
VERBOSE: [AD01]: LCM:  [ End    Test     ]  [[ADObjectPermissionEntry]OUPermissions]  in 0.2470 seconds.
VERBOSE: [AD01]: LCM:  [ End    Set      ]
VERBOSE: Operation 'Invoke CimMethod' complete.
VERBOSE: Time taken for configuration job to complete is 2.446 seconds
01/15/2020 12:13:10 Testing DSC
VERBOSE: Perform operation 'Invoke CimMethod' with following parameters, ''methodName' = TestConfiguration,'className'
= MSFT_DSCLocalConfigurationManager,'namespaceName' = root/Microsoft/Windows/DesiredStateConfiguration'.
VERBOSE: An LCM method call arrived from computer AD01 with user sid S-1-5-21-3638333018-712442695-4229731031-1001.
VERBOSE: [AD01]: LCM:  [ Start  Compare  ]
VERBOSE: [AD01]: LCM:  [ Start  Resource ]  [[ADUser]CRMInstallAccountUser]
VERBOSE: [AD01]: LCM:  [ Start  Test     ]  [[ADUser]CRMInstallAccountUser]
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Retrieving Active Directory user
'_crmadmin' (_crmadmin@contoso.local). (ADU0004)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Active Directory user '_crmadmin'
(_crmadmin@contoso.local) is present. (ADU0007)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Creating connection to Active Directory
domain 'contoso.local'. (ADU0005)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] The type
'System.DirectoryServices.AccountManagement.PrincipalContext' is already loaded into the PowerShell session.
(ADCOMMON0043)
VERBOSE: [AD01]:                            [[ADUser]CRMInstallAccountUser] Checking Active Directory user '_crmadmin'
password. (ADU0006)
VERBOSE: [AD01]: LCM:  [ End    Test     ]  [[ADUser]CRMInstallAccountUser] True in 0.0460 seconds.
VERBOSE: [AD01]: LCM:  [ End    Resource ]  [[ADUser]CRMInstallAccountUser]
VERBOSE: [AD01]: LCM:  [ Start  Resource ]  [[ADOrganizationalUnit]CRMGroupsOU]
VERBOSE: [AD01]: LCM:  [ Start  Test     ]  [[ADOrganizationalUnit]CRMGroupsOU]
VERBOSE: [AD01]:                            [[ADOrganizationalUnit]CRMGroupsOU] Retrieving OU 'CRM groups' from path
'DC=contoso,DC=local'. (ADOU0001)
VERBOSE: [AD01]:                            [[ADOrganizationalUnit]CRMGroupsOU] OU 'CRM groups' exists and is in the
desired state. (ADOU0006)
VERBOSE: [AD01]: LCM:  [ End    Test     ]  [[ADOrganizationalUnit]CRMGroupsOU] True in 0.0620 seconds.
VERBOSE: [AD01]: LCM:  [ End    Resource ]  [[ADOrganizationalUnit]CRMGroupsOU]
VERBOSE: [AD01]: LCM:  [ Start  Resource ]  [[ADGroup]CRMPrivUserGroup]
VERBOSE: [AD01]: LCM:  [ Start  Test     ]  [[ADGroup]CRMPrivUserGroup]
VERBOSE: [AD01]:                            [[ADGroup]CRMPrivUserGroup] Retrieving group membership based on
'SamAccountName' property. (ADG0001)
VERBOSE: [AD01]: LCM:  [ End    Test     ]  [[ADGroup]CRMPrivUserGroup] True in 0.2930 seconds.
VERBOSE: [AD01]: LCM:  [ End    Resource ]  [[ADGroup]CRMPrivUserGroup]
VERBOSE: [AD01]: LCM:  [ Start  Resource ]  [[ADObjectPermissionEntry]OUPermissions]
VERBOSE: [AD01]: LCM:  [ Start  Test     ]  [[ADObjectPermissionEntry]OUPermissions]
VERBOSE: [AD01]:                            [[ADObjectPermissionEntry]OUPermissions] Object permission entry not found
on object 'OU=CRM groups,DC=contoso,DC=local'. (OPE0002)
VERBOSE: [AD01]:                            [[ADObjectPermissionEntry]OUPermissions] Object permission entry on object
'OU=CRM groups,DC=contoso,DC=local' is not in the desired state. (OPE0006)
VERBOSE: [AD01]: LCM:  [ End    Test     ]  [[ADObjectPermissionEntry]OUPermissions] False in 0.0620 seconds.
VERBOSE: [AD01]: LCM:  [ *FAILED*Compare  ]     Completed processing compare operation. The operation returned False.
VERBOSE: Operation 'Invoke CimMethod' complete.
VERBOSE: Time taken for configuration job to complete is 0.633 seconds
01/15/2020 12:13:11 Test failed


Stderr from the command:

Cannot find drive. A drive with the name 'AD' does not exist.
    + CategoryInfo          : ObjectNotFound: (AD:) [], CimException
    + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.GetAclCommand
    + PSComputerName        : AD01

The PowerShell DSC resource '[ADObjectPermissionEntry]OUPermissions' with SourceInfo
'C:\tmp\vagrant-shell.ps1::80::13::ADObjectPermissionEntry' threw one or more non-terminating errors while running the
Test-TargetResource functionality. These errors are logged to the ETW channel called
Microsoft-Windows-DSC/Operational. Refer to this channel for more details.
    + CategoryInfo          : InvalidOperation: (:) [], CimException
    + FullyQualifiedErrorId : NonTerminatingErrorFromProvider
    + PSComputerName        : AD01

The SendConfigurationApply function did not succeed.
    + CategoryInfo          : NotSpecified: (root/Microsoft/...gurationManager:String) [], CimException
    + FullyQualifiedErrorId : MI RESULT 1
    + PSComputerName        : AD01

Cannot find drive. A drive with the name 'AD' does not exist.
    + CategoryInfo          : ObjectNotFound: (AD:) [], CimException
    + FullyQualifiedErrorId : DriveNotFound,Microsoft.PowerShell.Commands.GetAclCommand
    + PSComputerName        : AD01

The PowerShell DSC resource '[ADObjectPermissionEntry]OUPermissions' with SourceInfo
'C:\tmp\vagrant-shell.ps1::80::13::ADObjectPermissionEntry' threw one or more non-terminating errors while running the
Test-TargetResource functionality. These errors are logged to the ETW channel called
Microsoft-Windows-DSC/Operational. Refer to this channel for more details.
    + CategoryInfo          : InvalidOperation: (root/Microsoft/...gurationManager:String) [], CimException
    + FullyQualifiedErrorId : NonTerminatingErrorFromProvider
    + PSComputerName        : AD01
```

#### Suggested solution to the issue

#### The DSC configuration that is used to reproduce the issue (as detailed as possible)

```PowerShell
Import-DscResource -ModuleName PSDesiredStateConfiguration
Import-DscResource -ModuleName ActiveDirectoryDsc -ModuleVersion 5.0.0

$domainName = "contoso.local";

Node $AllNodes.NodeName
{

    ADUser CRMInstallAccountUser
    {
        DomainName              = $domainName
        UserName                = $CRMInstallAccountCredential.GetNetworkCredential().UserName
        Password                = $CRMInstallAccountCredential
        PasswordNeverExpires    = $true
    }
    
    ADOrganizationalUnit CRMGroupsOU
    {
        Name = "CRM groups"
        Path = "DC=contoso,DC=local"
    }

    ADGroup CRMPrivUserGroup
    {
        GroupName           = "CRM01PrivUserGroup"
        MembersToInclude    = $CRMInstallAccountCredential.GetNetworkCredential().UserName
        GroupScope          = "Universal"
        Path                = 'OU=CRM groups,DC=contoso,DC=local'
        DependsOn           = "[ADOrganizationalUnit]CRMGroupsOU", "[ADUser]CRMInstallAccountUser"
    }
    
    ADObjectPermissionEntry OUPermissions
    {
        Ensure                              = 'Present'
        Path                                = 'OU=CRM groups,DC=contoso,DC=local'
        IdentityReference                   = 'contoso\CRM01PrivUserGroup'
        ActiveDirectoryRights               = 'GenericAll'
        AccessControlType                   = 'Allow'
        ObjectType                          = '00000000-0000-0000-0000-000000000000'
        ActiveDirectorySecurityInheritance  = 'All'
        InheritedObjectType                 = '00000000-0000-0000-0000-000000000000'
        DependsOn                           = "[ADGroup]CRMPrivUserGroup"
    }

}
```

#### The operating system the target node is running

OsName               : Microsoft Windows Server 2016 Standard Evaluation
OsOperatingSystemSKU : 79
OsArchitecture       : 64-bit
WindowsBuildLabEx    : 14393.0.amd64fre.rs1_release.160715-1616
OsLanguage           : en-US
OsMuiLanguages       : {en-US}

#### Version and build of PowerShell the target node is running

Name                           Value                                                                                                                        
----                           -----                                                                                                                        
PSVersion                      5.1.14393.0                                                                                                                  
PSEdition                      Desktop                                                                                                                      
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                      
BuildVersion                   10.0.14393.0                                                                                                                 
CLRVersion                     4.0.30319.42000                                                                                                              
WSManStackVersion              3.0                                                                                                                          
PSRemotingProtocolVersion      2.3                                                                                                                          
SerializationVersion           1.1.0.1

#### Version of the DSC module that was used

5.0.0
#### Pull Request (PR) description
Adds support for `msDS-ManagedServiceAccount` and `msDS-GroupManagedServiceAccount` objects to the ADGroup resource by patching the `Add-ADCommonGroupMember` function of ActiveDirectoryDsc.Common.

#### This Pull Request (PR) fixes the following issues
- Fixes #532 

#### Task list
<!--
    To aid community reviewers in reviewing and merging your PR, please take
    the time to run through the below checklist and make sure your PR has
    everything updated as required.

    Change to [x] for each task in the task list that applies to your PR.
    For those task that don't apply to you PR, leave those as is.
-->
- [ ] Added an entry under the Unreleased section in the CHANGELOG.md.
      Entry should say what was changed, and how that affects users (if applicable).
- [ ] Resource documentation added/updated in resource directory README.md.
- [ ] Resource parameter descriptions added/updated in schema.mof
      and comment-based help.
- [ ] Comment-based help added/updated.
- [ ] Conceptual help topic added/updated (cultureFolder\about_ResourceName.help.txt).
- [ ] Localization strings added/updated in all localization files as appropriate.
- [ ] Examples appropriately added/updated.
- [ ] Unit tests added/updated. See [DSC Resource Testing Guidelines](https://github.com/PowerShell/DscResources/blob/master/TestsGuidelines.md).
- [ ] Integration tests added/updated (where possible). See [DSC Resource Testing Guidelines](https://github.com/PowerShell/DscResources/blob/master/TestsGuidelines.md).
- [ ] New/changed code adheres to [DSC Resource Style Guidelines](https://github.com/PowerShell/DscResources/blob/master/StyleGuidelines.md) and [Best Practices](https://github.com/PowerShell/DscResources/blob/master/BestPractices.md).

<!-- Reviewable:start -->
---
This change isâ€‚[<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/dsccommunity/activedirectorydsc/533)
<!-- Reviewable:end -->

<!--
    Your feedback and support is greatly appreciated, thanks for contributing!

    ISSUE TITLE:
    Please prefix the issue title with the resource name, e.g.
    'ResourceName: Short description of my issue'

    ISSUE DESCRIPTION (this template):
    Please provide information regarding your issue under each header below.
    Write N/A under any headers that do not apply to your issue, or if the
    information is not available.

    NOTE! Sensitive information should be obfuscated.

    PLEASE KEEP THE HEADERS.

    You may remove this comment block, and the other comment blocks,
    but please keep the headers.
-->
#### Details of the scenario you tried and the problem that is occurring
<!--
    If you are having an issue with the old xActiveDirectory, please verify
    your scenario with the latest resources in the new ActiveDirectoryDsc
    module.
-->
We're using cross-forest service accounts, and we want to represent the configuration in PowerShell DSC. However, it looks like `msDS-GroupManagedServiceAccount` and `msDS-ManagedServiceAccount` are not supported in the `Add-ADCommonGroupMember` function in the ActiveDirectoryDsc.Common module.

#### Verbose logs showing the problem
```
VERBOSE: Perform operation 'Invoke CimMethod' with following parameters, ''methodName' = SendConfigurationApply,'className' =
MSFT_DSCLocalConfigurationManager,'namespaceName' = root/Microsoft/Windows/DesiredStateConfiguration'.
VERBOSE: An LCM method call arrived from computer SHASTALOCALDC with user sid S-1-5-21-3472425590-1118686215-1165301856-500.
VERBOSE: [SHASTALOCALDC]: LCM:  [ Start  Set      ]
VERBOSE: [SHASTALOCALDC]: LCM:  [ Start  Resource ]  [[ADGroup]dl1]
VERBOSE: [SHASTALOCALDC]: LCM:  [ Start  Test     ]  [[ADGroup]dl1]
VERBOSE: [SHASTALOCALDC]:                            [[ADGroup]dl1] Retrieving group membership based on 'DistinguishedName' property. (ADG0001)
VERBOSE: [SHASTALOCALDC]:                            [[ADGroup]dl1] Group membership is NOT in the desired state. (ADG0002)
VERBOSE: [SHASTALOCALDC]: LCM:  [ End    Test     ]  [[ADGroup]dl1]  in 0.1720 seconds.
VERBOSE: [SHASTALOCALDC]: LCM:  [ Start  Set      ]  [[ADGroup]dl1]
VERBOSE: [SHASTALOCALDC]:                            [[ADGroup]dl1] Group membership objects are in '1' different AD Domains. (ADG0013)
VERBOSE: [SHASTALOCALDC]:                            [[ADGroup]dl1] Retrieving group membership based on 'DistinguishedName' property. (ADG0001)
VERBOSE: [SHASTALOCALDC]:                            [[ADGroup]dl1] Updating AD Group 'MallardPermissions'. (ADG0006)
VERBOSE: [SHASTALOCALDC]:                            [[ADGroup]dl1] Retrieving group membership based on 'DistinguishedName' property. (ADG0001)
VERBOSE: [SHASTALOCALDC]:                            [[ADGroup]dl1] Adding '1' member(s) to AD group 'MallardPermissions'. (ADG0003)
Cannot validate argument on parameter 'Members'. The argument is null or empty. Provide an argument that is not null or empty, and then try the command again.
    + CategoryInfo          : InvalidData: (:) [], CimException
    + FullyQualifiedErrorId : ParameterArgumentValidationError,Microsoft.ActiveDirectory.Management.Commands.AddADGroupMember
    + PSComputerName        : localhost

VERBOSE: [SHASTALOCALDC]: LCM:  [ End    Set      ]  [[ADGroup]dl1]  in 1.1070 seconds.
The PowerShell DSC resource '[ADGroup]dl1' with SourceInfo 'C:\Users\Administrator\desktop\Test.ps1::31::9::ADGroup' threw one or more non-terminating errors while
running the Set-TargetResource functionality. These errors are logged to the ETW channel called Microsoft-Windows-DSC/Operational. Refer to this channel for more details.
    + CategoryInfo          : InvalidOperation: (:) [], CimException
    + FullyQualifiedErrorId : NonTerminatingErrorFromProvider
    + PSComputerName        : localhost

VERBOSE: [SHASTALOCALDC]: LCM:  [ End    Set      ]
The SendConfigurationApply function did not succeed.
    + CategoryInfo          : NotSpecified: (root/Microsoft/...gurationManager:String) [], CimException
    + FullyQualifiedErrorId : MI RESULT 1
    + PSComputerName        : localhost

VERBOSE: Operation 'Invoke CimMethod' complete.
VERBOSE: Time taken for configuration job to complete is 1.984 seconds
```
#### Suggested solution to the issue
Add `msDS-GroupManagedServiceAccount` and `msDS-ManagedServiceAccount` object types to the `Add-ADCommonGroupMember` function in [ActiveDirectoryDsc.Common](https://github.com/dsccommunity/ActiveDirectoryDsc/blob/6942331a80fa20fdb1c34fe104deca6c26f739d2/Modules/ActiveDirectoryDsc.Common/ActiveDirectoryDsc.Common.psm1#L1485-L1500):

```powershell
...

if ($memberObjectClass -eq 'computer')
{
    $memberObject = Get-ADComputer @commonParameters
}
elseif ($memberObjectClass -eq 'group')
{
    $memberObject = Get-ADGroup @commonParameters
}
elseif ($memberObjectClass -eq 'user')
{
    $memberObject = Get-ADUser @commonParameters
}
elseif ($memberObjectClass -eq 'msDS-ManagedServiceAccount')
{
    $memberObject = Get-ADServiceAccount @commonParameters
}
elseif ($memberObjectClass -eq 'msDS-GroupManagedServiceAccount')
{
    $memberObject = Get-ADServiceAccount @commonParameters
}

...
```

#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
```powershell
Configuration ADGroup_NewGroupMultiDomainMembers_Config
{
    Import-DscResource -ModuleName ActiveDirectoryDsc

    node localhost
    {
        ADGroup 'dl1'
        {
            GroupName           = 'MallardPermissions'
            GroupScope          = 'DomainLocal'
            Path                = 'OU=Groups,OU=LocalDomain,DC=shasta,DC=local'
            MembershipAttribute = 'DistinguishedName'
            Members             = @(
                'CN=srv-mallard,CN=Managed Service Accounts,DC=shasta,DC=cloud'
            )
        }
    }
}
```

#### The operating system the target node is running
<!--
    Please provide as much as possible about the target node, for example
    edition, version, build and language.
    On OS with WMF 5.1 the following command can help get this information.

    Get-ComputerInfo -Property @(
        'OsName',
        'OsOperatingSystemSKU',
        'OSArchitecture',
        'WindowsVersion',
        'WindowsBuildLabEx',
        'OsLanguage',
        'OsMuiLanguages')
-->
```
OsName               : Microsoft Windows Server 2019 Datacenter
OsOperatingSystemSKU : DatacenterServerEdition
OsArchitecture       : 64-bit
WindowsVersion       : 1809
WindowsBuildLabEx    : 17763.1.amd64fre.rs5_release.180914-1434
OsLanguage           : en-US
OsMuiLanguages       : {en-US}
```

#### Version and build of PowerShell the target node is running
<!--
    To help with this information, please run this command:
    $PSVersionTable
-->
```
Name                           Value
----                           -----
PSVersion                      5.1.17763.771
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.17763.771
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
```

#### Version of the DSC module that was used ('dev' if using current dev branch)
4.2.0.0
<!--
    Your feedback and support is greatly appreciated, thanks for contributing!

    ISSUE TITLE:
    Please prefix the issue title with the resource name, e.g.
    'ResourceName: Short description of my issue'

    ISSUE DESCRIPTION (this template):
    Please provide information regarding your issue under each header below.
    Write N/A under any headers that do not apply to your issue, or if the
    information is not available.

    NOTE! Sensitive information should be obfuscated.

    PLEASE KEEP THE HEADERS.

    You may remove this comment block, and the other comment blocks,
    but please keep the headers.
-->
#### WaitADDomain: fails if DC not ready
<!--
    If you are having an issue with the old xActiveDirectory, please verify
    your scenario with the latest resources in the new ActiveDirectoryDsc
    module.
-->

#### Verbose logs showing the problem
```
[EC2AMAZ-0J01R66]: LCM:  [ Start  Resource ]  [[WaitForADDomain]ForestWait]
[EC2AMAZ-0J01R66]: LCM:  [ Start  Test     ]  [[WaitForADDomain]ForestWait]
[EC2AMAZ-0J01R66]:                            [[WaitForADDomain]ForestWait] Determining the current state of the 
Active Directory domain 'tf-tf.local'. (WFADD0013)
[EC2AMAZ-0J01R66]:                            [[WaitForADDomain]ForestWait] Searching for a domain controller in the 
domain 'tf-tf.local'. (WFADD0001)
[EC2AMAZ-0J01R66]:                            [[WaitForADDomain]ForestWait] Impersonating the credentials 
'tf-tf\xxxxxxxxx' when looking for a domain controller. (WFADD0011)
[EC2AMAZ-0J01R66]:                            [[WaitForADDomain]ForestWait] Searching for a domain controller in the 
domain 'tf-tf.local'. (ADCOMMON0052)
[EC2AMAZ-0J01R66]:                            [[WaitForADDomain]ForestWait] The type 
'System.DirectoryServices.ActiveDirectory.DirectoryContext' is already loaded into the PowerShell session. 
(ADCOMMON0043)
[EC2AMAZ-0J01R66]:                            [[WaitForADDomain]ForestWait] Get a new Active Directory context of the 
type 'Domain'. (ADCOMMON0046)
[EC2AMAZ-0J01R66]:                            [[WaitForADDomain]ForestWait] The Active Directory context will target 
'tf-tf.local'. (ADCOMMON0047)
[EC2AMAZ-0J01R66]:                            [[WaitForADDomain]ForestWait] The Active Directory context will be 
accessed using the 'tf-tf\xxxxxxxxx' credentials. (ADCOMMON0048)
[EC2AMAZ-0J01R66]: LCM:  [ End    Test     ]  [[WaitForADDomain]ForestWait]  in 4.8180 seconds.
PowerShell DSC resource MSFT_WaitForADDomain  failed to execute Test-TargetResource functionality with error message: 
Exception calling "FindOne" with "1" argument(s): "Domain controller not found in the domain "tf-tf.local"." 
    + CategoryInfo          : InvalidOperation: (:) [], CimException
    + FullyQualifiedErrorId : ProviderOperationExecutionFailure
    + PSComputerName        : localhost
 
```
#### Suggested solution to the issue
Wait until the DC is ready

#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
I create new server and wait for DC to become ready to join the domain. If the DC is ready, server joins the domain without problem, but if WaitForADDomain runs when DC is being configured, the resource fails. During the next consistency check the server joins the domain as the DC is ready by that time (also proving the configuration is hopefully correct).
# insert configuration here
```
        WaitForADDomain ForestWait
        {
            DomainName = $InternalDomain
            WaitTimeout = 900
            Credential = $default_creds
            DependsOn = "[DNSServerAddress]DNS"
            WaitForValidCredentials = $true
        }
```
#### The operating system the target node is running
<!--
    Please provide as much as possible about the target node, for example
    edition, version, build and language.
    On OS with WMF 5.1 the following command can help get this information.

    Get-ComputerInfo -Property @(
        'OsName',
        'OsOperatingSystemSKU',
        'OSArchitecture',
        'WindowsVersion',
        'WindowsBuildLabEx',
        'OsLanguage',
        'OsMuiLanguages')
-->
```
OsName               : Microsoft Windows Server 2019 Datacenter
OsOperatingSystemSKU : DatacenterServerEdition
OsArchitecture       : 64-bit
WindowsVersion       : 1809
WindowsBuildLabEx    : 17763.1.amd64fre.rs5_release.180914-1434
OsLanguage           : en-US
OsMuiLanguages       : {en-US}
```
#### Version and build of PowerShell the target node is running
<!--
    To help with this information, please run this command:
    $PSVersionTable
-->
```
Name                           Value
----                           -----
PSVersion                      5.1.17763.771
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.17763.771
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
```
#### Version of the DSC module that was used ('dev' if using current dev branch)
4.2.0.0
<!--
    Your feedback and support is greatly appreciated, thanks for contributing!

    ISSUE TITLE:
    Please prefix the issue title with the resource name, e.g.
    'ResourceName: Short description of my issue'

    ISSUE DESCRIPTION (this template):
    Please provide information regarding your issue under each header below.
    Write N/A under any headers that do not apply to your issue, or if the
    information is not available.

    NOTE! Sensitive information should be obfuscated.

    PLEASE KEEP THE HEADERS.

    You may remove this comment block, and the other comment blocks,
    but please keep the headers.
-->
#### Details of the scenario you tried and the problem that is occurring
<!--
    If you are having an issue with the old xActiveDirectory, please verify
    your scenario with the latest resources in the new ActiveDirectoryDsc
    module.
-->

When using Ensure=Absent on ADComputer, if the computer object is not a leaf object, the delete fails. 

#### Verbose logs showing the problem

I'm running this in Ansible so the error message looks different, but should be the same message:

```
{"changed": false, "domain_controller": " ... ", "module_version": "4.2.0.0", "msg": "The directory service can perform the requested operation only on a leaf object The PowerShell DSC resource '[ADComputer]DirectResourceAccess' with SourceInfo '' threw one or more non-terminating errors while running the Set-TargetResource functionality. These errors are logged to 
the ETW channel called Microsoft-Windows-DSC/Operational. Refer to this channel for more details.", "reboot_required": false}
```

#### Suggested solution to the issue

Add **-Recurse** to the Remove-ADComputer command in MSFT_ADComputer.psm1. Does this have any undesired effect?

```powershell
elseif ($Ensure -eq 'Absent' -and $getTargetResourceResult.Ensure -eq 'Present')
{
    # User exists and needs removing
    Write-Verbose -Message (
        $script:localizedData.RemovingComputerAccount -f $ComputerName
    )

    $removeADComputerParameters = Get-ADCommonParameters @PSBoundParameters
    $removeADComputerParameters['Confirm'] = $false

    Remove-ADComputer @removeADComputerParameters **-Recurse** |
        Out-Null
}
```

#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
```powershell
Configuration ADComputer_AddComputerAccount_Config
{
    Import-DscResource -ModuleName ActiveDirectoryDsc

    node localhost
    {
        ADComputer 'CreateEnabled_SQL01'
        {
            ComputerName = 'DEV-K8S02WW-01'
            Ensure = 'Absent'
        }
    }
}
```

Ansible

```yaml
- name: Remove Active Directory computer object
  win_dsc:
    resource_name: ADComputer
    module_version: 4.2.0.0
    ComputerName: DEV-K8S02WW-01
    DomainController: "{{ domain_controller }}"
    Ensure: Absent
  loop:
    - dc1.lab.company.com
    - dc1.corp.company.com
  loop_control:
    loop_var: domain_controller
```

#### The operating system the target node is running
<!--
    Please provide as much as possible about the target node, for example
    edition, version, build and language.
    On OS with WMF 5.1 the following command can help get this information.

    Get-ComputerInfo -Property @(
        'OsName',
        'OsOperatingSystemSKU',
        'OSArchitecture',
        'WindowsVersion',
        'WindowsBuildLabEx',
        'OsLanguage',
        'OsMuiLanguages')
-->

```
OsName               : Microsoft Windows Server 2019 Standard
OsOperatingSystemSKU : StandardServerEdition
OsArchitecture       : 64-bit
WindowsVersion       : 1809
WindowsBuildLabEx    : 17763.1.amd64fre.rs5_release.180914-1434
OsLanguage           : en-US
OsMuiLanguages       : {en-US}
```

#### Version and build of PowerShell the target node is running
<!--
    To help with this information, please run this command:
    $PSVersionTable
-->

```
Name                           Value
----                           -----
PSVersion                      5.1.17763.771
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.17763.771
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
```

#### Version of the DSC module that was used ('dev' if using current dev branch)

4.2.0.0

There are some duplicated code that could be removed to simplify the resource.

Instead of calling `Get-ADObject` here we could instead call `Get-TargetResource`. 

https://github.com/PowerShell/ActiveDirectoryDsc/blob/c3c93ba1bc1b8168655cc971474dde277d7c9574/DSCResources/MSFT_ADServicePrincipalName/MSFT_ADServicePrincipalName.psm1#L95

Instead of having this code

https://github.com/PowerShell/ActiveDirectoryDsc/blob/c3c93ba1bc1b8168655cc971474dde277d7c9574/DSCResources/MSFT_ADServicePrincipalName/MSFT_ADServicePrincipalName.psm1#L108-L117

We could potentially move this code to the top of the function and make sure it also handles any duplicate accounts when `Ensure -eq 'Present'`.

https://github.com/PowerShell/ActiveDirectoryDsc/blob/c3c93ba1bc1b8168655cc971474dde277d7c9574/DSCResources/MSFT_ADServicePrincipalName/MSFT_ADServicePrincipalName.psm1#L135-L145
#### Details of the scenario you tried and the problem that is occurring
If the current value is not set (empty or null) the verbose message does not show a current value when testing the configuration.

#### Verbose logs showing the problem
```
VERBOSE: [DC01]: LCM:  [ Start  Set      ]
VERBOSE: [DC01]:                            [DSCEngine] Importing the module
C:\source\ActiveDirectoryDsc\DscResources\MSFT_ADReplicationSiteLink\MSFT_ADReplicationSiteLink.psm1 in force mode.
VERBOSE: [DC01]: LCM:  [ Start  Resource ]  [[ADReplicationSiteLink]Integration_Test]
VERBOSE: [DC01]: LCM:  [ Start  Test     ]  [[ADReplicationSiteLink]Integration_Test]
VERBOSE: [DC01]:                            [[ADReplicationSiteLink]Integration_Test] Importing the module MSFT_ADReplicationSiteLink in force mode.
VERBOSE: [DC01]:                            [[ADReplicationSiteLink]Integration_Test] Site: Integration3 not found in SitesIncluded. Current SitesIncluded:
Integration2, Integration1. (ADRSL0001)
VERBOSE: [DC01]:                            [[ADReplicationSiteLink]Integration_Test] Cost is not in desired state Current:  Desired: 20. (ADRSL0003)
VERBOSE: [DC01]:                            [[ADReplicationSiteLink]Integration_Test] Description is not in desired state Current:  Desired: Integration Test Site
Link. (ADRSL0003)
VERBOSE: [DC01]:                            [[ADReplicationSiteLink]Integration_Test] ReplicationFrequencyInMinutes is not in desired state Current:  Desired: 15.
(ADRSL0003)
VERBOSE: [DC01]: LCM:  [ End    Test     ]  [[ADReplicationSiteLink]Integration_Test]  in 0.4210 seconds.
VERBOSE: [DC01]: LCM:  [ Start  Set      ]  [[ADReplicationSiteLink]Integration_Test]
VERBOSE: [DC01]:                            [[ADReplicationSiteLink]Integration_Test] Importing the module MSFT_ADReplicationSiteLink in force mode.
VERBOSE: [DC01]:                            [[ADReplicationSiteLink]Integration_Test] Adding sites Integration1, Integration3 to site link
Integration1-Integration2. (ADRSL0005)
VERBOSE: [DC01]:                            [[ADReplicationSiteLink]Integration_Test] Performing the operation "Set" on target
"CN=Integration1-Integration2,CN=IP,CN=Inter-Site Transports,CN=Sites,CN=Configuration,DC=contoso,DC=com".
VERBOSE: [DC01]: LCM:  [ End    Set      ]  [[ADReplicationSiteLink]Integration_Test]  in 1.3200 seconds.
VERBOSE: [DC01]: LCM:  [ End    Resource ]  [[ADReplicationSiteLink]Integration_Test]
VERBOSE: [DC01]: LCM:  [ End    Set      ]
VERBOSE: [DC01]: LCM:  [ End    Set      ]    in  2.5940 seconds.
```
#### Suggested solution to the issue
This could be enhanced to handle `$null` values to get a more descriptive verbose message.

#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
The existing integration test can be used to see and resolve this issue. Snippet from the integration tests below.

```powershell
<#
    .SYNOPSIS
        Creates a brand new Site Link in AD Sites and Services.
#>
Configuration MSFT_ADReplicationSiteLink_CreateSiteLink_Config
{
    Import-DscResource -ModuleName 'ActiveDirectoryDsc'

    node $AllNodes.NodeName
    {
        ADReplicationSiteLink 'Integration_Test'
        {
            Name          = 'Integration1-Integration2'
            SitesIncluded = @('Integration1', 'Integration2')
            Ensure        = 'Present'
        }
    }
}

<#
    .SYNOPSIS
        Change the attributes of a SiteLink
#>
Configuration MSFT_ADReplicationSiteLink_SetAttributes_Config
{
    Import-DscResource -ModuleName 'ActiveDirectoryDsc'

    node $AllNodes.NodeName
    {
        ADReplicationSiteLink 'Integration_Test'
        {
            Name                          = 'Integration1-Integration2'
            SitesIncluded                 = @('Integration1', 'Integration3')
            Description                   = 'Integration Test Site Link'
            Cost                          = 20
            ReplicationFrequencyInMinutes = 15
            Ensure                        = 'Present'
        }
    }
}
```

#### The operating system the target node is running
n/a

#### Version and build of PowerShell the target node is running
n/a

#### Version of the DSC module that was used ('dev' if using current dev branch)
dev
#### Details of the scenario you tried and the problem that is occurring
If a group already have one member 'Guest' and then the group should enforce two members 'Guest' and 'Administrator' it looks like in the verbose log that it actually removes the 'Guest' as member and the re-adds it.

#### Verbose logs showing the problem
```
    Context When using configuration MSFT_ADGroup_EnforceMembersGroup5_Config
WARNING: It is not recommended to use domain credential for node 'localhost'. In order to suppress the warning, you can add a property named 'PSDscAllowDomainUser' with a value of $true to your DSC configuration data for node 'localhost'.
VERBOSE: Perform operation 'Invoke CimMethod' with following parameters, ''methodName' = SendConfigurationApply,'className' = MSFT_DSCLocalConfigurationManager,'namespaceName' = root/Microsoft/Windows/DesiredStateConfiguration'.
VERBOSE: An LCM method call arrived from computer DC01 with user sid S-1-5-21-530133819-3181352061-503517500-500.
VERBOSE: [DC01]: LCM:  [ Start  Set      ]
VERBOSE: [DC01]:                            [DSCEngine] Importing the module C:\source\ActiveDirectoryDsc\DscResources\MSFT_ADGroup\MSFT_ADGroup.psm1 in force mode.
VERBOSE: [DC01]: LCM:  [ Start  Resource ]  [[ADGroup]Integration_Test]
VERBOSE: [DC01]: LCM:  [ Start  Test     ]  [[ADGroup]Integration_Test]
VERBOSE: [DC01]:                            [[ADGroup]Integration_Test] Importing the module MSFT_ADGroup in force mode.
VERBOSE: [DC01]:                            [[ADGroup]Integration_Test] Retrieving group membership based on 'SamAccountName' property. (ADG0001)
VERBOSE: [DC01]:                            [[ADGroup]Integration_Test] Group membership is NOT in the desired state. (ADG0002)
VERBOSE: [DC01]: LCM:  [ End    Test     ]  [[ADGroup]Integration_Test]  in 0.4530 seconds.
VERBOSE: [DC01]: LCM:  [ Start  Set      ]  [[ADGroup]Integration_Test]
VERBOSE: [DC01]:                            [[ADGroup]Integration_Test] Importing the module MSFT_ADGroup in force mode.
VERBOSE: [DC01]:                            [[ADGroup]Integration_Test] Updating AD Group 'DscDistributionGroup1'. (ADG0006)
VERBOSE: [DC01]:                            [[ADGroup]Integration_Test] Retrieving group membership based on 'SamAccountName' property. (ADG0001)
VERBOSE: [DC01]:                            [[ADGroup]Integration_Test] Removing '1' member(s) from AD group 'DscDistributionGroup1'. (ADG0004)
VERBOSE: [DC01]:                            [[ADGroup]Integration_Test] Adding '2' member(s) to AD group 'DscDistributionGroup1'. (ADG0003)
VERBOSE: [DC01]: LCM:  [ End    Set      ]  [[ADGroup]Integration_Test]  in 1.1410 seconds.
VERBOSE: [DC01]: LCM:  [ End    Resource ]  [[ADGroup]Integration_Test]
VERBOSE: [DC01]: LCM:  [ End    Set      ]
VERBOSE: [DC01]: LCM:  [ End    Set      ]    in  2.1880 seconds.
VERBOSE: Operation 'Invoke CimMethod' complete.
```
#### Suggested solution to the issue
We should not remove members that are suppose to be members. We should only remove members not part of the `Members` property,

#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
```powershell
<#
    .SYNOPSIS
        Add and remove members from a group.
#>
Configuration MSFT_ADGroup_ModifyMembersGroup5_Config
{
    Import-DscResource -ModuleName 'ActiveDirectoryDsc'

    node $AllNodes.NodeName
    {
        ADGroup 'Integration_Test'
        {
            GroupName        = $Node.Group5_Name
            MembersToInclude = @(
                'Guest'
            )
            MembersToExclude = @(
                'Administrator'
            )

            Credential       = New-Object `
                -TypeName System.Management.Automation.PSCredential `
                -ArgumentList @(
                $Node.AdministratorUserName,
                (ConvertTo-SecureString -String $Node.AdministratorPassword -AsPlainText -Force)
            )
        }
    }
}

<#
    .SYNOPSIS
        Enforce members in a group.
#>
Configuration MSFT_ADGroup_EnforceMembersGroup5_Config
{
    Import-DscResource -ModuleName 'ActiveDirectoryDsc'

    node $AllNodes.NodeName
    {
        ADGroup 'Integration_Test'
        {
            GroupName  = $Node.Group5_Name
            Members    = @(
                'Administrator'
                'Guest'
            )

            Credential = New-Object `
                -TypeName System.Management.Automation.PSCredential `
                -ArgumentList @(
                $Node.AdministratorUserName,
                (ConvertTo-SecureString -String $Node.AdministratorPassword -AsPlainText -Force)
            )
        }
    }
}
```

#### The operating system the target node is running
n/a

#### Version and build of PowerShell the target node is running
n/a

#### Version of the DSC module that was used ('dev' if using current dev branch)
dev