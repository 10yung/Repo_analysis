Attempting to compile WDT against modern versions of Folly results in the following error when linking `wdtbin` (aliased to `wdt`).

```shell
libfolly4wdt.so: undefined reference to `folly::strlcpy(char*, char const*, unsigned long)'
```

It seems that the source files that define `folly::strlcpy`, namely `lang/CString.cpp` need to be included explicitly.

It also appears that this problem has already been addressed by [a fork of WDT](https://github.com/fran6co/wdt/commit/02f07aa31314148e66b4e7951144ac982cbdabd5).

Hi Guys,

I'm trying to build wdt inside a docker
here is my dockerfile.
```FROM ubuntu:latest
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y git
RUN git clone https://github.com/facebook/folly.git
RUN apt-get install -y libgoogle-glog-dev libboost-all-dev libdouble-conversion-dev libjemalloc-dev cmake gcc libssl-dev
RUN apt-get install -y g++
RUN git clone https://github.com/facebook/wdt.git
WORKDIR /wdt
RUN cmake ./ -DBUILD_TESTING=on
ENV CTEST_OUTPUT_ON_FAILURE=1
RUN make test
RUN make install `
I get the following error when building WDT on both Ubuntu > 18.xx and Fedora > 28. 

>Scanning dependencies of target wdt
[ 86%] Building CXX object CMakeFiles/wdt.dir/util/WdtFlags.cpp.o
[ 88%] Building CXX object CMakeFiles/wdt.dir/Wdt.cpp.o
[ 90%] Linking CXX shared library libwdt.so
[ 90%] Built target wdt
Scanning dependencies of target wdtbin
[ 93%] Building CXX object CMakeFiles/wdtbin.dir/wdtCmdLine.cpp.o
[ 95%] Building CXX object CMakeFiles/wdtbin.dir/util/WdtFlags.cpp.o
[ 97%] Building CXX object CMakeFiles/wdtbin.dir/Wdt.cpp.o
[100%] Linking CXX executable _bin/wdt/wdt
libfolly4wdt.so: undefined reference to `folly::strlcpy(char*, char const*, unsigned long)'
collect2: error: ld returned 1 exit status
CMakeFiles/wdtbin.dir/build.make:154: recipe for target '_bin/wdt/wdt' failed
make[2]: *** [_bin/wdt/wdt] Error 1
CMakeFiles/Makefile2:180: recipe for target 'CMakeFiles/wdtbin.dir/all' failed
make[1]: *** [CMakeFiles/wdtbin.dir/all] Error 2
Makefile:129: recipe for target 'all' failed
make: *** [all] Error 2

Packages installed on Ubuntu: cmake libjemalloc-dev libgoogle-glog-dev libboost-system-dev libdouble-conversion-dev openssl build-essential libboost-all-dev libssl-dev libgtest-dev

 Packages installed on Fedora: cmake boost-devel openssl jemalloc glog-devel double-conversion-devel make automake gcc gcc-c++ kernel-devel gtest-devel openssl-devel

Cmake output:
>-- The C compiler identification is GNU 7.4.0
-- The CXX compiler identification is GNU 7.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Boost version: 1.65.1
-- Found the following Boost libraries:
--   system
--   filesystem
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Found OpenSSL: /usr/lib/x86_64-linux-gnu/libcrypto.so (found version "1.1.1") 
-- Looking for posix_fallocate
-- Looking for posix_fallocate - found
-- Looking for sync_file_range
-- Looking for sync_file_range - found
-- Looking for posix_memalign
-- Looking for posix_memalign - found
-- Looking for posix_fadvise
-- Looking for posix_fadvise - found
-- Looking for clock_gettime
-- Looking for clock_gettime - found
-- Looking for memrchr
-- Looking for memrchr - found
-- Looking for pthread_atfork
-- Looking for pthread_atfork - found
-- Looking for C++ include linux/sockios.h
-- Looking for C++ include linux/sockios.h - found
-- Performing Test FOLLY_USE_LIBCPP
-- Performing Test FOLLY_USE_LIBCPP - Failed
-- Performing Test FOLLY_HAVE_WEAK_SYMBOLS
-- Performing Test FOLLY_HAVE_WEAK_SYMBOLS - Success
-- Configuring done
-- Generating done
-- Build files have been written to: /var/app/warp-cli/build/wdt/_build

This is a proposed fix for https://github.com/facebook/wdt/issues/194
Thanks for very nice tool, very useful.
wdt command-line tool lacks ability to accept data from stdin. I suspect that wdt library itself cannot accept input from stdin.
I do have a case when I need to avoid writing very large intermediate data set to a disk. It would be perfect if I can pipe data to wdt stdin. (I do produce data with high enough speed to saturate network link).
Seems to be solution would be to include wdt library and use wdt API. I have not look on API but pretty sure I will be able to feed wdt library with memory buffers and have them sent over to a remote file.
From other side, it would be much less involved approach if wdt command-line tool can accept data from stdin.
Please let me know if adding stdin to wdt is feasible. And, if it will be a PR, will it be accepted.

Having a subset of folly build with wdt makes packaging the library and utils difficult with package managers. Is it possible / supported to build against a full version of folly?

Relevant to https://github.com/Homebrew/homebrew-core/pull/39345

TITLE WAS: "Could folly (complete) be used rather than folly4wdt?"
These changes fix Travis-CI builds on macOS and partially on Linux.

The only thing left to do on Linux is https://github.com/facebook/wdt/issues/192

This pull request also requires https://github.com/facebook/wdt/pull/188
The tests have `::1` hardcoded as the loopback address. This is all well and good until you run tests in docker (without extra sysctl) or in Travis-CI Linux where ipv6 is disabled. It should probably try `127.0.0.1` if `::1` fails to cover those cases.