Hey, I'm using firenvim daily at work - I work on a platform which has script fields built in.
Is it possible for firenvim to recognize if it's js, html or css syntax in the text field I'm editing? The text fields in the platform looks exactly like the "Write" textfield here on github.

I would love this to work the way I want - as I don't want it to trigger on anything else than JS, HTML, CSS syntax in it.

How would I configure this?

Thanks.

Best,

J
The current renderer is pretty slow and is partially responsible for Firenvim's latency problem. This is because it uses the DOM, which isn't intended for this kind of use. Using the DOM made a lot of sense at the beginning of Firenvim because it reduced the amount of things to learn, however, now that I know most of what you need to know in order to write a Neovim GUI, it would make sense to rewrite it with performance in mind.

The new renderer should:
1) Support all current Neovim UI extensions
2) Be easy to maintain
3) Be fast

Supporting all current Neovim UI extensions from the start is important because it helps [avoid bugs](https://github.com/neovim/neovim/issues/11646#issuecomment-570074095) and will create part of the groundwork necessary for new, yet-to-come ui extensions. Easy maintenance is important because I have less and less motivation to work on Firenvim, I should thus reduce the maintenance burden for myself and make it easy for new contributors to hack on Firenvim. Being fast is the whole point of the rewrite and the only reason it would be ok to sacrifice speed is that an UI extension can't be implemented in an efficient way or that it would increase the maintenance burden. 

There are multiple technologies that could satisfy our needs:
- The Canvas2D API
- WebGL
- WebGPU

The canvas API is probably the easiest API to work with but also the slowest but it might be enough to reach 60fps (you can't go higher in a browser). An important point is that it has text-rendering functions (e.g. [fillText](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)), this would help a lot during development.
The WebGL approach would be more complex but provide more control. It doesn't provide text-rendering functions and thus would probably require to hack something by rendering text with Canvas2D first and then caching the glyphs and reusing the pixels in a WebGL context.
WebGPU isn't out yet but seems to be "WebGL but modeled on Vulkan rather than OpenGL". It would probably suffer from the same issues we have with WebGL.

[Neovim-e](https://github.com/coolwanglu/neovim-e) uses Canvas2D.
[Nyaovim](https://github.com/rhysd/NyaoVim) says it uses a canvas but I couldn't find the code.
[OniVim 1](https://github.com/onivim/oni) uses WebGL.
[Veonim](https://github.com/veonim/veonim) uses WebGL.
[Vv](https://github.com/vv-vim/vv) uses Canvas2D.

Overall, it seems that even though the Canvas approach seems simpler, the more polished UIs chose to use WebGL. This might indicate that Canvas2D isn't good enough.

One last thing to keep in mind is that some users probably use canvas-disabling extensions. Since Firenvim renders things in its own iframe it might not be affected, we need to figure out how these extension work and whether we'll need to implement a fallback to the DOM renderer or not.

I can probably use Pavel Fatin's excellent [typometer](https://pavelfatin.com/typometer/) to measure how fast the new renderer is compared to the old one.
Given stability issues (for example #329) in might be early for this, but as soon as it's considered stable I think the default mode should be to use the Firnvim provided web command line overlay by default. This would alleviate requests like #328 as well. As it is I don't think the feature is even discoverable enough for those that would want it to take advantage of it. Clearly those that weren't expecting it might want to force the other mode. I will probably tweak this on a per site basis (or preferably based on the available space), but it seems like a sensible default.
I'm trying to use the `'cmdline': 'firenvim'` option which makes the overall UI a lot nicer, but I'm having trouble making it usable. In particular it seems to cause the whole UI to choke on autocompletion (which works with the normal Neovim command line option). I'm using deoplete, and whenever it activates I get some flicker and then a garbage character in the buffer.

Demo:

Insert.

![image](https://user-images.githubusercontent.com/173595/71776601-5aefdd80-2fa5-11ea-9601-ca528ed35a85.png)

^^^ The above came from trying to type "Insert." in the Firenvim mode on this post with completion enabled. You can't see the garbage in Github's rendered version but if you view the source to this post it is there.
This doesn't seem to work on JIRA comments specifically.
And might be hard for you to access if you don't have currently already use JIRA. 
I'm not familiar with lua, but if you don't have access I can try and poke around and maybe with your help or context I can figure out the issue.

Steps to reproduce:
1. Go to a JIRA ticket
2. Make a new comment, type out anything.
3. Use `:x` to place the text into the comment box.

Expected:
Places text into box as usual.

Actual:
Page does a very quick refresh and nothing is placed into the box.

- OS Version: mac x86-64
- Browser Version: Google Inc. Chrome 79.0.3945.88
- Browser Addon Version: 0.1.17
- Neovim Plugin Version: 0.1.17
- What I tried to do:
- What happened:

If you try sending a twit or for private messages, firenvim doesn't work at all.
Thunderbird kind of supports webextensions:

https://thunderbird-webextensions.readthedocs.io/en/68/

It doesn't have a nativeMessaging API but it could be implemented as an experiment and maybe upstreamed:

https://firefox-source-docs.mozilla.org/toolkit/components/extensions/webextensions/basics.html#webextensions-experiments
This is my attempts to come up with something that makes Firenvim easier to configure and use on a per-site basis without making user's init.rc files look like spaghetti and while allowing Firenvim to evolve without breaking configs.

Fixes #267 and fixes #268 (or will by the time it comes out of draft mode).
I've been using setting the `markdown` filetype for _most_ sites that I use Firenvim on including ones that are not actually markdown. Whatsapp web and Slack for example have bastardized Markdown-ish syntax that isn't actually Markdown.

As I use Firenvim on more and more sites I'm starting to run into more cases where some unique filetype handling and syntax rules would be useful.

Off the top of my head my suggestion is to default all Firenvim files to a new filetype `firenvim` by default unless otherwise requested by the user (see #267 for a related improvement), and bundle a syntax file for that filetype that uses the buffer name to add per-site syntax highlighting. I would implement that by first parsing out the domain, then checking if a setup function for that domain exists and calling it if it does.

Besides being able to handle some common cases out of the box, this would provide the framework for users to override Firenvim's defaults and extend the behavior of vim on a given domain just a bit easier than it is now.
I think it's useful to sandbox the neovim instance started by firenvim, to add an additional layer of defense.
For Windows, I only know of Sandboxie (which recently announced they are open sourcing it).
For Linux, the following tech is relevant:
- firejail
- bubblewrap
- systemd-nspawn
- docker
- any other software based on containers
- VMs: will likely have too much overhead, but I'm listing them for completeness.

I'm currently using firejail on my machines, so I will try to write a firejail profile that grants read-only access to the neovim initialization files and plugins, and read-write access to the edited file.