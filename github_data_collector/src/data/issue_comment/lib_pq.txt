Hello...
I have tried a query to get all data with ALL query on sql but seems like pq doesn't support that query on bind parameter.
Query : 
`....
LIMIT $1 OFFSET $2`

`rows, err := db.QueryContext(ctx, query, "ALL", 0)`

i got this error : 
`pq: error in argument for $1: strconv.ParseInt: parsing \"ALL\": invalid syntax"`

will pq support feature to bind "ALL" to parameter ?

Hi,

I'm getting the below error when I run my code in docker image built off golang:1.13-stretch
pq: syntax error at or near "."

If I build and run it on my mac - it works fine.

Any help would be appreciated.

Thanks,
Monica

Hello!

I have been periodically seeing these errors in my application:

```
driver: bad connection
```

I investigated today and I found strange behaviour in this situation:

* I am in a transaction
* I have statement_timeout set to something non-zero
* The commit or rollback call hits the statement_timeout condition
* Afterwards, pinging (or maybe using the connection at all?) raises a bad connection error

I'm wondering if this is what should be happening given there is an error message available showing that the transaction failed.

Here is a program that demonstrates this: [https://play.golang.org/p/fYi3vNb3p7L](https://play.golang.org/p/fYi3vNb3p7L)

If you run this for a while (e.g. `while [ true ]; do ./foo ; done`), you will periodically see messages like this:

```
error committing: pq: canceling statement due to statement timeout
error pinging after commit failure: driver: bad connection
```

I am using lib/pq v1.2.0, Postgres 9.6.15, and Go 1.13.4.

What do you think?

Thank you!

The [scram](https://github.com/lib/pq/tree/master/scram) implementation has no unittests and ignores parts of the RFC (eg: the `m` field is supposed to trigger an authentication failure). This should be replaced with a fuller (and better tested) implementation. https://github.com/xdg-go/scram might be a candidate.
Whilst developing a go based web app in docker, using the Ping() function to check the connection works in a majority of cases, however.

When Postgres is provided on a network that does not support ICMP, or exposed via a v1/service in kubernetes, ping is not the best test and will fail. Some networks may also drop ICMP traffic causing the use of this function to throw errors.

Is there a better way to perform this that's more friendly to overlay networks or kubernetes services?



Was running the benchmarks and hit this:

```
panic: interface conversion: *pq.stmt is not driver.StmtQueryContext: missing method QueryContext

goroutine 61 [running]:
github.com/lib/pq.benchMockQuery(0xc0000f01c0, 0xc0000ca000, 0xc00005a0e0, 0x6d)
	/home/jake/zikaeroh/pq/bench_test.go:158 +0x144
github.com/lib/pq.BenchmarkMockSelectString(0xc0000f01c0)
	/home/jake/zikaeroh/pq/bench_test.go:110 +0x1f8
testing.(*B).runN(0xc0000f01c0, 0x1)
	/usr/lib/go/src/testing/benchmark.go:190 +0xcc
testing.(*B).run1.func1(0xc0000f01c0)
	/usr/lib/go/src/testing/benchmark.go:230 +0x64
created by testing.(*B).run1
	/usr/lib/go/src/testing/benchmark.go:223 +0x7d
exit status 2
```

All other benchmarks run fine.
What about MySQL Config analog?
https://godoc.org/github.com/go-sql-driver/mysql#Config

It could be helpful in case you need to build DSN on the fly.
Here is a small program to reproduce the race:
```go
func main() {
	databaseURL := os.Getenv("DATABASE_URL")
	pqconnector, err := pq.NewConnector(databaseURL)
	if err != nil {
		log.Fatal(err)
	}
	db := sql.OpenDB(pqconnector)

	const n = 2
	var wg sync.WaitGroup
	wg.Add(n)
	for i := 0; i < n; i++ {
		go func() {
			defer wg.Done()
			var now time.Time
			if err := db.QueryRowContext(context.Background(), `select now()`).Scan(&now); err != nil {
				log.Fatal(err)
			}
		}()
	}
	wg.Wait()
}
```
Run with the following commands:
```bash
go build -race -trimpath
DATABASE_URL="host=/path/to/postgresql/unix/socket/directory" ./pqrace
```
```
==================
WARNING: DATA RACE
Write at 0x00c00008c720 by goroutine 9:
  runtime.mapassign_faststr()
      runtime/map_faststr.go:202 +0x0
  github.com/lib/pq.dial()
      github.com/lib/pq@v1.2.0/conn.go:334 +0x6c9
  github.com/lib/pq.(*Connector).open()
      github.com/lib/pq@v1.2.0/conn.go:298 +0x295
  github.com/lib/pq.(*Connector).Connect()
      github.com/lib/pq@v1.2.0/connector.go:27 +0x50
  database/sql.(*DB).conn()
      database/sql/sql.go:1228 +0xa15
  database/sql.(*DB).query()
      database/sql/sql.go:1565 +0x76
  database/sql.(*DB).QueryContext()
      database/sql/sql.go:1547 +0xe4
  main.main.func1()
      database/sql/sql.go:1648 +0x12a

Previous read at 0x00c00008c720 by goroutine 10:
  runtime.mapaccess1_faststr()
      runtime/map_faststr.go:12 +0x0
  github.com/lib/pq.(*conn).handlePgpass()
      github.com/lib/pq@v1.2.0/conn.go:211 +0x21c
  github.com/lib/pq.(*Connector).open()
      github.com/lib/pq@v1.2.0/conn.go:296 +0x23f
  github.com/lib/pq.(*Connector).Connect()
      github.com/lib/pq@v1.2.0/connector.go:27 +0x50
  database/sql.(*DB).conn()
      database/sql/sql.go:1228 +0xa15
  database/sql.(*DB).query()
      database/sql/sql.go:1565 +0x76
  database/sql.(*DB).QueryContext()
      database/sql/sql.go:1547 +0xe4
  main.main.func1()
      database/sql/sql.go:1648 +0x12a

Goroutine 9 (running) created at:
  main.main()
      pqrace@/main.go:26 +0x15b

Goroutine 10 (running) created at:
  main.main()
      pqrace@/main.go:26 +0x15b
==================
==================
WARNING: DATA RACE
Read at 0x00c00008c720 by goroutine 10:
  runtime.mapaccess1_faststr()
      runtime/map_faststr.go:12 +0x0
  github.com/lib/pq.network()
      github.com/lib/pq@v1.2.0/conn.go:371 +0x71
  github.com/lib/pq.dial()
      github.com/lib/pq@v1.2.0/conn.go:331 +0x66
  github.com/lib/pq.(*Connector).open()
      github.com/lib/pq@v1.2.0/conn.go:298 +0x295
  github.com/lib/pq.(*Connector).Connect()
      github.com/lib/pq@v1.2.0/connector.go:27 +0x50
  database/sql.(*DB).conn()
      database/sql/sql.go:1228 +0xa15
  database/sql.(*DB).query()
      database/sql/sql.go:1565 +0x76
  database/sql.(*DB).QueryContext()
      database/sql/sql.go:1547 +0xe4
  main.main.func1()
      database/sql/sql.go:1648 +0x12a

Previous write at 0x00c00008c720 by goroutine 9:
  runtime.mapassign_faststr()
      runtime/map_faststr.go:202 +0x0
  github.com/lib/pq.dial()
      github.com/lib/pq@v1.2.0/conn.go:334 +0x6c9
  github.com/lib/pq.(*Connector).open()
      github.com/lib/pq@v1.2.0/conn.go:298 +0x295
  github.com/lib/pq.(*Connector).Connect()
      github.com/lib/pq@v1.2.0/connector.go:27 +0x50
  database/sql.(*DB).conn()
      database/sql/sql.go:1228 +0xa15
  database/sql.(*DB).query()
      database/sql/sql.go:1565 +0x76
  database/sql.(*DB).QueryContext()
      database/sql/sql.go:1547 +0xe4
  main.main.func1()
      database/sql/sql.go:1648 +0x12a

Goroutine 10 (running) created at:
  main.main()
      pqrace@/main.go:26 +0x15b

Goroutine 9 (running) created at:
  main.main()
      pqrace@/main.go:26 +0x15b
==================
==================
WARNING: DATA RACE
Write at 0x00c0000ba328 by goroutine 10:
  github.com/lib/pq.dial()
      github.com/lib/pq@v1.2.0/conn.go:334 +0x6e1
  github.com/lib/pq.(*Connector).open()
      github.com/lib/pq@v1.2.0/conn.go:298 +0x295
  github.com/lib/pq.(*Connector).Connect()
      github.com/lib/pq@v1.2.0/connector.go:27 +0x50
  database/sql.(*DB).conn()
      database/sql/sql.go:1228 +0xa15
  database/sql.(*DB).query()
      database/sql/sql.go:1565 +0x76
  database/sql.(*DB).QueryContext()
      database/sql/sql.go:1547 +0xe4
  main.main.func1()
      database/sql/sql.go:1648 +0x12a

Previous write at 0x00c0000ba328 by goroutine 9:
  github.com/lib/pq.dial()
      github.com/lib/pq@v1.2.0/conn.go:334 +0x6e1
  github.com/lib/pq.(*Connector).open()
      github.com/lib/pq@v1.2.0/conn.go:298 +0x295
  github.com/lib/pq.(*Connector).Connect()
      github.com/lib/pq@v1.2.0/connector.go:27 +0x50
  database/sql.(*DB).conn()
      database/sql/sql.go:1228 +0xa15
  database/sql.(*DB).query()
      database/sql/sql.go:1565 +0x76
  database/sql.(*DB).QueryContext()
      database/sql/sql.go:1547 +0xe4
  main.main.func1()
      database/sql/sql.go:1648 +0x12a

Goroutine 10 (running) created at:
  main.main()
      pqrace@/main.go:26 +0x15b

Goroutine 9 (running) created at:
  main.main()
      pqrace@/main.go:26 +0x15b
==================
Found 3 data race(s)
```