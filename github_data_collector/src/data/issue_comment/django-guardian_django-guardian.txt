using Dbeaver:
i tried to create some entries for user object permissions, i just could not from mysql client
Duplicate entry '3-64-1' for key 'guardian_userobjectpermi_user_id_permission_id_ob_b0b3d2fc_uniq'
![Screenshot_2020-01-16_17-01-52](https://user-images.githubusercontent.com/3405806/72541358-a8602a80-3882-11ea-809b-fe71d5d16dee.png)

but by running django, using the guardian assign_perm to add new entries, they simply are created without complaining about duplicates, surprisingly it should not be considered as duplicates when you just put different object_pk's for same user,same permission,same content_type


@ad-m Can you create a new release?  2.1.0 is not compatible with Django 3.0 due to django-guardian/django-guardian#649 and django-guardian/django-guardian#661.

I tried to simplify that by getting the release notes started.
I'm doing in a shell `UserObjectPermission.objects.all()` and getting an error about ContentTypes:
```
/env/lib/python3.7/site-packages/django/contrib/contenttypes/models.py in get_object_for_this_type(self, **kwargs)
    173         so code that calls this method should catch it.
    174         """
--> 175         return self.model_class()._base_manager.using(self._state.db).get(**kwargs)
    176
    177     def get_all_objects_for_this_type(self, **kwargs):
```
Hi,

thanks for your cool project! We (CC @TheRadialActive) have encountered a strange permission check problem that confused us, so we want to share it with you for your consideration.

If you set permission_required in the PermissionRequiredMixin to a generator, the evaluated list can be empty and access may be granted unconditionally (at least this is what we believed has happened to us). Maybe consider checking for generators and warn about this. Currently there is only an error if the type is not a string or Iterable. A generator is iterable, but can be dangerous to use. 
Here is how this can happen in Python:

```
>>> g = (x for x in range(3))
>>> type(g)
<class 'generator'>
>>> [i for i in g]
[0, 1, 2]
>>> [i for i in g]
[]
```

Hi,

I noticed (with @TheRadialActive) that if I use PermissionRequiredMixin with a list for permissions_required, the access will be granted only if all permissions are held by the user, due to the use of the all-reducer in get_40x_or_None, which uses all(). However, there are cases where it is interesting to verify if any of some permissions are held, which currently does not seem to be possible. Do you have any advice on this?  Duplicating the code and changing all to any is simple enough, but maybe there are other solutions already available, or you might want to add a way to configure this behaviour. Thanks!

See idea & limitation in #661 .
As mentioned below, `assign_perm` supports "bulk operations on either users/groups OR objects".
https://github.com/django-guardian/django-guardian/blob/05e8170b86a12294b749075ce23c8681a7810bb4/guardian/shortcuts.py#L95

However `remove_perm` only supports bulk operations on objects.

Is this intentional, and am I doing something wrong if I want to remove permission to an object from multiple users?

Are inline fields not supported in Django Admin with Guardian? 

```
class PhoneInline(admin.StackedInline):
    model = UserPhone
    extra = 1

class UserAdmin(GuardedModelAdmin):
    inlines=[PhoneInline]
    list_display = ('Username', 'FirstName', 'LastName')
    search_fields = ['Username','FirstName','LastName']
```

However the inline forms no longer appear. 
my code
```
from guardian.shortcuts import assign_perm
# when user_or_group is a queryset
assign_perm(perm=perm, user_or_group=queryset, obj=obj)
```
raise error
```
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/guardian/shortcuts.py", line 106, in assign_perm
    return model.objects.assign_perm_to_many(perm, user, obj)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/guardian/managers.py", line 106, in assign_perm_to_many
    return self.model.objects.bulk_create(to_add)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/models/query.py", line 474, in bulk_create
    ids = self._batched_insert(objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/models/query.py", line 1211, in _batched_insert
    self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/models/query.py", line 1186, in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/models/sql/compiler.py", line 1335, in execute_sql
    cursor.execute(sql, params)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/backends/utils.py", line 99, in execute
    return super().execute(sql, params)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/backends/utils.py", line 67, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/backends/utils.py", line 76, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/utils.py", line 89, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
  File "/Users/zuili/.pyenv/versions/env_nms/lib/python3.7/site-packages/django/db/backends/sqlite3/base.py", line 383, in execute
    return Database.Cursor.execute(self, query, params)
django.db.utils.IntegrityError: UNIQUE constraint failed: guardian_userobjectpermission.user_id, guardian_userobjectpermission.permission_id, guardian_userobjectpermission.object_pk
```
it's a bug or I should check uniqueness myself.

OS: macOS 10.14.5

```bash
$ python3 --version
Python 3.7.3

$ pip freeze
certifi==2019.6.16
chardet==3.0.4
Django==2.1.10
django-environ==0.4.5
django-rosetta==0.9.3
idna==2.8
microsofttranslator==0.8
polib==1.1.0
pytz==2019.1
requests==2.22.0
six==1.12.0
urllib3==1.25.3

$ sqlite3 --version
3.24.0 2018-06-04 14:10:15 95fbac39baaab1c3a84fdfc82ccb7f42398b2e92f18a2a57bce1d4a713cbaapl
```

In `example_project`:

```bash
$ ./manage.py runserver
django-guardian/example_project/settings.py:17: UserWarning: SQLite URL contains host component '.', it will be ignored
  DATABASES = {'default': env.db(default="sqlite://./example.db")}
```

Related: https://github.com/joke2k/django-environ/issues/187