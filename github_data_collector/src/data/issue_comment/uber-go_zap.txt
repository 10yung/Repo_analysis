Adds an extra public method that returns `[]Option` generated from the `Config`.

Rationale: our project uses zap's config but also performs additional manipulations on the generated options. For that, we need to access Options generated from the config. However, the current code layout doesn't allow that. Hence, a new intermediary-but-public method.

Please suggest alternative solutions if this is not acceptable.
We've had a few requests on how to change the level of a logger. With
the current APIs, it's not possible to reduce the log level (e.g., go
from Info to Debug), but it is possible to increase the level using
`WrapCore` with a custom filtering core.

Since it's a common request, I think we should add an option to make
this easy to use.

I want to make sure "increase" is part of the API to avoid confusion on
whether it can reduce the log level.

Fixes #774.
I'd like to create a new subLogger which only logs messages at the `WarnLevel` instead of the `InfoLevel` (which is desired for the rest of the application). I read the other issues about doing so, but they implied creating a new zapcore.

I do not want to create a new zapcore for my sublogger, because my logger's core has hooks which should still be used for the sublogger. So is there any way to create a sublogger which reuses my existent zapcore but only emits log messages at the WarnLevel+?


```go
stripeLogger := logger.
	With(zap.String("source", "stripe")).
	WithOptions(zap.WrapCore(/** Help **/))
stripe.Logger = zap.NewStdLog(stripeLogger)
```
> This feature can be implemented outside of zap by using `WrapCore` to decorate a core. The decorator can filter out entries (similar to your provided snippet).
> 
> Since this should be possible without changing zap, we likely won't build this into zap.

we hooked a custom a core, but **checkedEntry.Caller is undefined**.
then i check the zap code ,  i found the **caller is added after all core check** (log *Logger) check(lvl zapcore.Level, msg string)

we can invoke runtime.Caller again in out custom core,but i think it's not fine

how do we solve it? thank you


below is my custom core check method
![image](https://user-images.githubusercontent.com/50820046/69774816-f6857580-11d1-11ea-9fd4-0dedadb72dc4.png)

_Originally posted by @wanghaoyu1 in https://github.com/uber-go/zap/issues/766#issuecomment-559326261_
i appreciate zap'design very much, and like to use the hook function, we add a hook after error log print, we will send the error entry to sentry lib(a error detect system),but we find we can't get error obj from entry.
because err obj is important for logger, if can be added in the entry
Similar to the atomic log level, it would be really helpful if you could control the log output stream _after_ the logger is created. This is especially useful when building a client library that uses zap, but end users might want to do some additional customization like setting log level and output paths.
add new Option `HooksWithFields`.

It's similar with `Hooks`, but let hooks can access fields.

fully backward compatible.
A few people have expressed interest in having a TraceLevel added to Zap (Some mention of this in #680 and again in #747). This PR addresses that interest by introducing this logging level.
When logging a zero initialized time.Time struct the output is not consistent:

```go
zap.L().With("time", time.Time{}).Debug("zero time")
```
Will output the time: `1754-08-30T22:43:41.128654848Z` because calling `UnixNano()` then `Unix(0, nsec)` is not symetric in this case.
The correct output would be `0001-01-01 00:00:00 +0000 UTC` (with the same layout as above).

see https://gist.github.com/patdowney/b64a4fee790ac66dd1a2 that exhibit the issue.

Looking at zap.Time I was wondering why you don't pass the Time struct in the Interface field instead of converting to an integer. Maybe this is to avoid making a new reference to traverse for the GC ?

https://github.com/uber-go/zap/blob/425214515ff452748375576b20c82524849177c6/field.go#L180-L184

https://github.com/uber-go/zap/blob/badef736563f8135e0add3232b06f58656da03c8/zapcore/field.go#L141-L147

Hi, I'm Yevgeny Pats Founder of [Fuzzit](https://fuzzit.dev) - Continuous fuzzing as a service platform.

We have a free plan for OSS and I would be happy to contribute a PR if that's interesting.
The PR will include the following
- [go-fuzz](https://github.com/dvyukov/go-fuzz) fuzzers (This is generic step not-connected to fuzzit)
- Continuous Fuzzing of master branch which will generate new corpus and look for new crashes
- Regression on every PR that will run the fuzzers through all the generated corpus and fixed crashes from previous step. This will prevent new or old bugs from crippling into master.

You can see our basic example [fuzzitdev/example-go](https://github.com/fuzzitdev/example-go) and you can see an example of "in the wild" integration [google/syzkaller](https://github.com/google/syzkaller).

Let me know if this is something worth working on.

Cheers,
Yevgeny
