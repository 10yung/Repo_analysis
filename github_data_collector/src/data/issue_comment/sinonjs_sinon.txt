**Describe the bug**
when spying getter/setter, spy.get.wrappedMethod and spy.set.wrappedMethod are both undefined but spy.wrappedMethod is the original getter/setter whoever was written last (looks like an override).


**To Reproduce**
```var sinon = require("sinon")
var object = {
  get test() {
    return 1;
  },
  set test(value) {
  }
};

var stub = sinon.spy(object, "test",['get','set']);

console.log('1',stub.get.wrappedMethod)
console.log('2', stub.set.wrappedMethod)
console.log('3', stub.wrappedMethod)
stub.restore()
var stub = sinon.spy(object, "test",['set','get']);
console.log('4', stub.wrappedMethod)
```
results can be seen here https://runkit.com/embed/b9qjkhx4ufk7

**Expected behavior**
the first should be the original getter
the second should be the original setter
the third should be the undefined
the fourth should be the undefined

**Actual behavior**
the first is undefined
the second is undefined
the third is the original setter
the fourth is the original getter
Fixes #2182 

This is a tiny one but it means we can unblock @NoamDev over in DefinitelyTyped/DefinitelyTyped#41219.

There was a typo'd header too i fixed in there. If you want any more info adding to it, let me know.

cc @fatso83 
**Is your feature request related to a problem? Please describe.**
In #1557 we removed support for stubbing undefined properties, aligning the behavior with how sandbox stubbing worked. Later on we have made the sinon methods use a default sandbox to further align how the default methods and sandboxes worked.

Still, as the thread in #1537 show, this remains a sorely missed feature for some, and while we had good reasons for removing it, maybe we could appease the ones wanting it by making it an opt-in? It remains a quite useful feature in some cases.

**Describe the solution you'd like**
I suggest adding a config field to the sandbox to allow defining fields (fakes) that are not originally defined by the objects we insert the fake into. Something like `sinon.createSandbox({allowUndefined: true})`? (Totally not sure about the actual name of the prop, though ... `allowNonOwn`?)

Given

```javascript
var obj = {a: 1};
```
it should allow
```javascript
sinon.stub(obj, 'b').value(2); // not defined anywhere on the prototype chain
sinon.replace(obj, 'c', sinon.fake()); 
```

Related to this, but really a different case, is props on the prototype chain. As explained in the "Solution" paragraph in #2193 we deal with this differently today, depending on whether we use spies or fakes:

```
var parent = { foo: function() {} };
var child = Object.create(parent):

// disallowed
sinon.stub(child, 'foo');
// allowed
sinon.replace(child, 'foo', sinon.fake());
```

If we simplified the "undefined" and "props on an ancestor" problems into a single issue: props not defined by the object whose fields are being stubbed, we could align this behavior for our spies, stubs and fakes under a default non-permissive line and have an opt-in solution for those who want it. By default, you would then only be allowed to replace fields owned/defined by the object.

Having the opt-in for stubs and spies would not be a breaking change, but as the `sinon.replace` method today allows stubbing defined props owned by an ancestor it would be a breaking change to disallow this by default.

**Describe alternatives you've considered**
Two flags instead of one: `allowUndefinedProps` (props are not present anywhere on the prototype chain) and `allowShadowingFieldsOnPrototype` (to stub fields defined by ancestors). I don't really see the benefit, though.

Checking out https://sinonjs.org/releases/v8.0.2 I see that we do not have any release notes for v7 and v8 and what prompted the new major releases. We should do something about this.
#### Purpose (TL;DR)
This PR fixes issue #2084 by adding quotes to diff values if said values are strings, thus producing clearly distinct string representations and preventing the expected and actual values from being reduced to a single value.

#### Background (Problem in detail)
When the expected and actual values of an assertion do not match but they have the same string representation (for example the number 1234 and the string "1234"), the output does not show the difference, but reduces it to a single value. In this example, this output is produced:
```
expected spy to be called with arguments
<black>1234</black>
```
while this output was expected:
```
expected spy to be called with arguments
<red>1234</red>
<green>1234</green>
```

#### Solution
A solution was proposed in the ticket itself which was also implemented here: adding quotes around a diff value if the value in question is a string. This process is skipped if the value is undefined, not a string, or already wrapped in quotes.

An alternative solution was considered which involved adding a check for type differences without altering the output, though this might still produce confusing output if the string representations of a diff are the same without making it clear whether a value is a string or not. This situation can be seen in the expected output example above.

Instead, diffs are now displayed as follows, given the example where the string 1234 was expected but the number 1234 was found instead:
```
expected spy to be called with arguments
<red>1234</red>
<green>'1234'</green>
```

#### How to verify
1. Check out this branch
2. `npm install`
3. Run the test included with this PR

Thanks to #988 stub.wrappedMethod of a stub was exposed.
But, as long as this is not documented anywhere no one would use it.
I suggest you should document this feature.
Pay attention to the fact that the property is only defined when wrapping an existing method,
not when using sinon.stub() (with no parameters).
Bumps [puppeteer](https://github.com/GoogleChrome/puppeteer) from 1.20.0 to 2.0.0.
<details>
<summary>Release notes</summary>

*Sourced from [puppeteer's releases](https://github.com/GoogleChrome/puppeteer/releases).*

> ## v2.0.0
> ## Big changes
> 
> - Chromium 79.0.3942.0 (r706915)
> - Puppeteer now requires Node.js v8+; Node.js v6 is no longer supported
> - `page.screenshot` now clips elements to the viewport ([#5080](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5080))
> - New APIs:
>     - [`page.emulateTimezone(timezoneId)`](https://github.com/GoogleChrome/puppeteer/blob/v2.0.0/docs/api.md#pageemulatetimezonetimezoneid)
>     - [`page.emulateMediaType(type)`](https://github.com/GoogleChrome/puppeteer/blob/v2.0.0/docs/api.md#pageemulatemediatypetype) (superseding the old [`page.emulateMedia(type)`](https://github.com/GoogleChrome/puppeteer/blob/v2.0.0/docs/api.md#pageemulatemediatype) API)
>     - [`page.emulateMediaFeatures(features)`](https://github.com/GoogleChrome/puppeteer/blob/v2.0.0/docs/api.md#pageemulatemediatypetype)
> 
> ## API changes
> 
> - New API: [`page.emulateTimezone(timezoneId)`](https://github.com/GoogleChrome/puppeteer/blob/v2.0.0/docs/api.md#pageemulatetimezonetimezoneid) ([#4949](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/4949))
> - New API: [`page.emulateMediaType(type)`](https://github.com/GoogleChrome/puppeteer/blob/v2.0.0/docs/api.md#pageemulatemediatypetype) ([#5012](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5012))
> - Deprecated API: [`page.emulateMedia(type)`](https://github.com/GoogleChrome/puppeteer/blob/v2.0.0/docs/api.md#pageemulatemediatype) is now obsolete. Use [`page.emulateMediaType(type)`](https://github.com/GoogleChrome/puppeteer/blob/v2.0.0/docs/api.md#pageemulatemediatypetype) instead. ([#5012](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5012))
> - New API: [`page.emulateMediaFeatures(features)`](https://github.com/GoogleChrome/puppeteer/blob/v2.0.0/docs/api.md#pageemulatemediatypetype) ([#5012](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5012))
> 
> ## Raw notes
> 
> aa24697 - chore: mark version v2.0.0 ([#5078](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5078))
> 360c1b4 - test: add page.screenshot viewport clipping test ([#5079](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5079))
> 7f3e372 - docs(api): improve page.waitFor docs for the `options` object ([#5021](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5021))
> 8132b39 - test: remove duplicate code from an example ([#5072](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5072))
> 1248a19 - feat(api): add `page.emulateTimezone(timezoneId)` ([#4949](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/4949))
> a86363f - feat(api): add `page.emulateMedia{Type,Features}` ([#5012](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5012))
> 06dbb72 - chore: use map instead of plain object ([#5068](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5068))
> 81d2600 - feat(chromium): roll Chromium to r705776 ([#5058](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5058))
> 3773229 - fix: avoid unnecessary zero-delays in input code ([#4934](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/4934))
> 11ff374 - chore: drop Node.js v6 support ([#5045](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5045))
> c0ba8f9 - docs(troubleshooting): update Alpine Chromium versions ([#4980](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/4980))
> 2506169 - docs(contributing): mention manual docs/api updates ([#5023](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5023))
> 83c327a - docs(readme): correct Slack link
> 4c62e09 - fix(comment): fix typo in Launcher.js ([#4959](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/4959))
> 7dbb108 - docs(api): list Chromium version for Puppeteer v1.20.0 ([#5015](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5015))
> 5b34028 - chore: bump https-proxy-agent to mitigate a security issue ([#5016](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5016))
> dc57d03 - docs(api): clarify `type` method examples ([#5010](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5010))
> fff2737 - doc(contributing): clarify release instructions ([#4940](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/4940))
> 387a532 - chore: bump version to v1.20.0-post ([#4939](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/4939))
</details>
<details>
<summary>Commits</summary>

- [`aa24697`](https://github.com/puppeteer/puppeteer/commit/aa246973b96c36768bf3d4db0383f7101a1b4ee9) chore: mark version v2.0.0 ([#5078](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5078))
- [`360c1b4`](https://github.com/puppeteer/puppeteer/commit/360c1b4c7d5e54a3804dcae65b286fb4f2b35713) test: add page.screenshot viewport clipping test ([#5079](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5079))
- [`7f3e372`](https://github.com/puppeteer/puppeteer/commit/7f3e372b14abc0dc7792f48909c5066476caa4d1) docs(api.md): improve page.waitFor docs for the `options` object ([#5021](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5021))
- [`8132b39`](https://github.com/puppeteer/puppeteer/commit/8132b39a6c494b2e2ff7db6b5c062d787b2e8785) docs(api.md): remove duplicate code from an example ([#5072](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5072))
- [`1248a19`](https://github.com/puppeteer/puppeteer/commit/1248a19135fe54b8fe42e15435c11c3c8aa949d2) feat(api): add page.emulateTimezone(timezoneId) ([#4949](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/4949))
- [`a86363f`](https://github.com/puppeteer/puppeteer/commit/a86363fda695865ddc7c5eeb3c958f5c2da8e61b) feat(api): add page.emulateMedia{Type,Features} ([#5012](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5012))
- [`06dbb72`](https://github.com/puppeteer/puppeteer/commit/06dbb72c7338c201dc76842eb35004d03f26adc1) chore: use map instead of plain object ([#5068](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5068))
- [`81d2600`](https://github.com/puppeteer/puppeteer/commit/81d26002361f2485d4ae8a9758be25e65d4c1c01) feat(chromium): roll Chromium to r705776 ([#5058](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5058))
- [`3773229`](https://github.com/puppeteer/puppeteer/commit/3773229ac276a84a4de113e74290abc3bbf60499) fix: avoid unnecessary zero-delays in input code ([#4934](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/4934))
- [`11ff374`](https://github.com/puppeteer/puppeteer/commit/11ff374ca3e7d06a3be4278b85ccee73392354e7) chore: drop Node.js v6 support ([#5045](https://github-redirect.dependabot.com/GoogleChrome/puppeteer/issues/5045))
- Additional commits viewable in [compare view](https://github.com/GoogleChrome/puppeteer/compare/v1.20.0...v2.0.0)
</details>
<br />

[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=puppeteer&package-manager=npm_and_yarn&previous-version=1.20.0&new-version=2.0.0)](https://dependabot.com/compatibility-score.html?dependency-name=puppeteer&package-manager=npm_and_yarn&previous-version=1.20.0&new-version=2.0.0)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.

You can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
#### Purpose (TL;DR) - mandatory
Remove unneeded branch logic and improve docs.

 #### Background (Problem in detail)  - optional
When looking into a user question (#2155) it became obvious that the
it's not obvious at all that the docs for Lolex install config can be
used when trying to configure `useFakeTimers`.

For one, we added a prop, `config.global`, to Sinon's `useFakeTimers` config in #1935 that
was quite superfluous: it supported a use case that was already there using `config.target`!

In this PR, I remove some extra branching logic and also update the docs
to highlight the lolex docs and the `target` prop.

 #### How to verify - mandatory
1. `npm test`
1. `npm run build-docs`
https://github.com/sinonjs/sinon/issues/2062

 #### Purpose (TL;DR) - mandatory
<!--
> give a concise (one or two short sentences) description of what what problem is being solved by this PR
>
> Example: Fix issue #123456 by re-structuring the colour selection conditional in method `paintBlue`
-->
Improvement to stubs doc

<!--
 #### Background (Problem in detail)  - optional
-->
<!--
> When relevant, give a more thorough description of what the problem the PR is trying to solve. Examples of good topics for this section are:
> * Link to an existing GitHub issue describing the problem
> * Describing the problem in greater detail than the TL;DR section above
> * How you discovered the issue, if it's not already described as an issue on GitHub
> * Discussion of different approaches to solving this problem and why you chose your proposed solution
-->


<!--
 #### Solution  - optional
-->
<!--
> When contributing code (and not just fixing typos, documentation and configuration), please describe why/how your solution works. This helps reviewers spot any mistakes in the implementation.
>
> Example:
> "This solution works by adding a `paintBlue()` method"
> Then your reviewer might spot a mistake in the implementation, if `paintBlue()` uses the colour red.
-->
- Focus more on the basics of stubbing an object's function (stub pre-programmed to throw exception/return value)
- Less discussion on spies
- Provide very simple code to test as an example, instead of external library's (PubSub) code
- Show why restoration of a stub is necessary

 #### How to verify - mandatory
N.A. because no code change

 #### Checklist for author

- [x] `npm run lint` passes
- [x] References to standard library functions are [cached](https://github.com/sinonjs/sinon/pull/1523).

### Purpose - Add `firstArg` convenience property to fakes and spy calls.
Currently, we allow getting the last argument for spy calls and fakes. It would be nice to be able to get the first arg without doing `args[0]`. I couldn't find any open issues or feature requests for this.

### Solution

#### `spyCall.firstArg`

This property is a convenience for the first argument of the call.

```js
var spy = sinon.spy();
var date = new Date();

spy(date, 1, 2);

spy.lastCall.firstArg === date;
// true
```
#### `fake.firstArg`

This property is a convenient way to get a reference to the first argument passed in the last call to the fake.

```js
var f = sinon.fake();
var date1 = new Date();
var date2 = new Date();

f(date1, 1, 2);
f(date2, 1, 2);

f.firstArg === date2;
// true
```

 #### How to verify
1. Check out this branch
2. `npm install`
3. `npm test`

 #### Checklist for author

- [x] `npm run lint` passes
- [x] References to standard library functions are [cached](https://github.com/sinonjs/sinon/pull/1523).