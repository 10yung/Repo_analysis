in china 
build github.com/codegangsta/gin: cannot load gopkg.in/urfave/cli.v1: cannot find module providing package gopkg.in/urfave/cli.v1

Modify to the github package, which can be used by developers in China. 
Attempted these commands:
gin run main.go --immediate
gin run main.go -i
gin -i run main.go
gin --immediate run main.go 

Returns: 
Incorrect Usage: flag provided but not defined: -immediate

In gin --help:
   --immediate, -i               run the server immediately after it's built [$GIN_IMMEDIATE]
added go.mod and changed github.com/urfave/cli import
Since  github.com/urfave/cli started supporting go modules (and named the module  github.com/urfave/cli), it should be referenced by the new name to work when using GO111MODULE=on

https://github.com/codegangsta/gin/issues/154

Calling `go get github.com/codegangsta/gin` on version go1.12.5 darwin/amd64 returns: 

`build github.com/codegangsta/gin: cannot find module for path gopkg.in/urfave/cli.v1`
If the app being served is a HTTPS server, gin cannot connect to it.

Proposal: Add a `--tls` flag to indicate that the backend is a TLS listener
i got those error while access to url localhost:8080
```
2019/03/01 16:34:17 http: proxy error: dial tcp 127.0.0.1:3001: connect: connection refused
```
here my code
```
func handler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])
}

func StartService() {
	http.HandleFunc("/", handler)
	log.Fatal(http.ListenAndServe(":8080", nil))
}
```



This code allows the ability to build the gin binary outside of the working directory.  In some circumstances, this is very useful.  For example, when running docker on a windows instance, and the code for the container lives on a windows drive.  The windows OS will not allow the binary to be re-built as long as it is still running.  Therefore, building on a linux native folder inside the container is preferable.
my binary file named `disbursement`need args `run` to running.
example worked command without gin
`./disbursement run`

im try to use gin inside docker container
`gin --port=9000 --appPort=9000 --bin=disbursement run main.go run`
but i got error to tell fill the args

how can add **run** arg when run with gin
Incorrect output on Windows with VSCode and Cmder

Windows (with VSCode and Cmder) (not correct):
```
[gin] Building...
[gin] ←[97;32;1mBuild finished←[0m
[gin] Building...
[gin] ←[97;32;1mBuild finished←[0m
```

Linux (correct):
```
[gin] Building...
[gin] Build finished
[gin] Building...
[gin] Build finished
```

