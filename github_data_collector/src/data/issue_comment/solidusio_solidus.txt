**Description**

Now that v2.10 has been released, master will track 2.11 and CHANGELOG is prepared for the new version.

**Description**

By requiring rails/all Solidus was loading a bunch of unnecessary code
taking more time and consuming more memory. This change allows apps
that want to cherry-pick Rails frameworks to benefit from the more
attentive choice.

The list of frameworks I enabled for each component of Solidus comes from searching the subdir (e.g. `core/`) with this regular expression: `/\b(Action|Active|Application)[A-Z]/`.

**Checklist:**
- [x] I have followed [Pull Request guidelines](https://github.com/solidusio/solidus/blob/master/CONTRIBUTING.md#pull-request-guidelines)
- [x] I have added a detailed description into each commit message
- [x] I have updated Guides and README accordingly to this change (if needed)
- [x] I have added tests to cover this change (if needed)
- [x] I have attached screenshots to this PR for visual changes (if needed)

**Description**
Ref #3450 

This PR introduces `Spree::ApplicationRecord` class and makes every ActiveRecord model previously inheriting from `ActiveRecord::Base` inherit from it. 
To leverage the new hierarchy, an existing `Spree::Core::Permalinks` monkey patch on `ActiveRecord::Base` has been moved to `Spree::ApplicationRecord`.

This way Solidus is more compliant with Rails 5+ recommendations and the risk of unwanted side effects on `ActiveRecord::Base` is mitigated.

**Checklist:**
- [X] I have followed [Pull Request guidelines](https://github.com/solidusio/solidus/blob/master/CONTRIBUTING.md#pull-request-guidelines)
- [X] I have added a detailed description into each commit message

I am a new user. I cannot find a demo! 
Suggestion: Either put a demo on your website or have some kind of showcase so new user can see how it looks like.
Going through Heroku just to have a demo install is not adequate as many of us don't use Heroku.
**Description**
Loading decorators within `to_prepare` with `prepend` or `include`
ends up adding multiple copies of the decorator to the ancestors of
the decorated class. This typically causes trouble when using `super`
within methods or when changes done in `prepended` or `included` are
not idempotent.

Clearing dependencies also solves problems related to overwriting
constants and removed methods (i.e. when a method is removed by a
decorator, previous instances of the decorator that are still in the
ancestors list will still have that method defined and will intercept
calls to it).

**Checklist:**
- [x] I have followed [Pull Request guidelines](https://github.com/solidusio/solidus/blob/master/CONTRIBUTING.md#pull-request-guidelines)
- [x] I have added a detailed description into each commit message
- [x] I have updated Guides and README accordingly to this change (if needed)
- [x] I have added tests to cover this change (if needed)
- [x] I have attached screenshots to this PR for visual changes (if needed)

When I create a promotion that is automatically applied to all orders, I shouldn't be able to manage the promo codes for that promotion, since creating a code will result in the promotion getting into a broken state and failing validation.

**Solidus Version**:
2.9, but I guess it affects all versions

**To Reproduce**
1. Create a promotion that applies automatically
2. Click on View codes list
3. Click on Create promotion code
4. Create a new code

**Current behavior**
The promotion displays:
```
All orders will attempt to use this promotion

This promotion uses the promotion code: c
```
Furthermore, the promotion cannot be updated in any way, since it fails validation with the following error: "Apply Automatically Disallowed for promotions with a code".

**Expected behavior**
I shouldn't even be allowed to create the promo code.

**Screenshots**
<img width="485" alt="Screenshot 2020-01-09 14 57 06" src="https://user-images.githubusercontent.com/395073/72073498-56525e80-32f0-11ea-9bef-5808fc837682.png">
<img width="299" alt="Screenshot 2020-01-09 14 57 07" src="https://user-images.githubusercontent.com/395073/72073500-56525e80-32f0-11ea-8e89-39c759459331.png">

**Desktop (please complete the following information):**
N/A

**Smartphone (please complete the following information):**
N/A

**Additional context**
N/A
I get an error trying to clon a product from admin -> products

**Solidus Version**:
Last master version


1. Go to admin -> products
2. Click on  icon 'copy'

**Current behavior**
Get error : 
ActiveRecord::RecordInvalid in Spree::Admin::ProductsController#clone
Valudation failed: Images is not valid, Master images is not valid

**Expected behavior**
Clone product

**Desktop (please complete the following information):**
 - Heroku
 - Browser chrome

**Additional context**
I have the images connected to s3 with CDN

Hey folks,

I am looking for some insight here, perhaps you can help me. We ran into a case in production where an order shows up in the cart but upon trying to proceed with checkout, no order is found and the user is redirected back to the cart. 

This is fundamentally because in `Spree::OrdersController#edit`:
https://github.com/solidusio/solidus/blob/master/frontend/app/controllers/spree/orders_controller.rb#L42

```
@order = current_order || Spree::Order.incomplete.find_or_initialize_by(guest_token: cookies.signed[:guest_token])
```

However, in `Spree::CheckoutController#load_order`: 
https://github.com/solidusio/solidus/blob/master/frontend/app/controllers/spree/checkout_controller.rb#L136
``
@order = current_order
``

If we unpack `current_order` behavior further, you will see it uses a different query to load:
https://github.com/solidusio/solidus/blob/master/core/lib/spree/core/controller_helpers/order.rb#L86

```
order = Spree::Order.incomplete.lock(options[:lock]).find_by(current_order_params)
```

and

```
        def current_order_params
          { currency: current_pricing_options.currency, guest_token: cookies.signed[:guest_token], store_id: current_store.id, user_id: try_spree_current_user.try(:id) }
        end
```

In our specific case, the miss was happening because we had a state with the Order have a non-nil `user_id` and the query kept asking for `nil` because the other session did not exist. 

**Solidus Version**:
`master`

**To Reproduce**
I do not have all of the specific to reproduce but am hoping for some insightful discussion.

**Current behavior**
Orders and Checkout controllers load orders differently. 

**Expected behavior**
I would expect them to abide by the same business logic and am curious why that's not the case. I understand this behavior is inherited from a much older Spree release, but hoping folks have extra insight. 

Thanks, y'all!

**Description**

The guides are build with Middleman and served by Netlify. We do not need certain gems to make this work.

**Checklist:**
- [x] I have followed [Pull Request guidelines](https://github.com/solidusio/solidus/blob/master/CONTRIBUTING.md#pull-request-guidelines)
- [x] I have added a detailed description into each commit message

**Is your feature request related to a problem? Please describe.**

https://github.com/solidusio/solidus/issues/3448 outlined that it's quite common to have the need for a constant gross price across several countries when calculating VAT prices.

The current behavior of the vat prices calculator with tax rates that have the `included_in_price` value is:
- fix a net price amount (the actual default price of the variant)
- for each country requiring VAT (ones that have `included_in_price` tax rates in that variant's tax_category) create a price that is `net price amount * (1 + tax rate amount)`
- during the checkout, the VAT amount will not be added to the order total, it's already part of the price, but it will be shown as "already present" for taxing laws requirement.

There are stores that need to generate prices differently though. The fixed part should be the gross price amount, which should be identical in all countries. 

**Describe the solution you'd like**

We already provided a way to change with https://github.com/solidusio/solidus/pull/3451 but as @mamhoff [pointed out](https://github.com/solidusio/solidus/pull/3451#pullrequestreview-329851039), we could add this class in core allowing people to select it without adding any code. 

**Describe alternatives you've considered**

I was wondering if we can make this thing more granularly, allowing admin users to select which method to apply per tax rate or per country?
