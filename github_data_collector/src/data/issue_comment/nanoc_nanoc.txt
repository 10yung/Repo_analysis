I see that Markdown is supported:

https://nanoc.ws/doc/tutorial#write-pages-in-markdown

Is reStructuredText supported?

https://docutils.sourceforge.io/docs/user/rst/quickref.html
### Steps to reproduce

1. Run nanoc on a site using ruby 2.7, released December 2019

### Expected behavior

No change from Ruby 2.6.

### Actual behavior

Deprecation warnings from Ruby 2.7, most about other packages but a couple about nanoc itself. 

This is far from a serious problem (I don't even plan to migrate to 2.7 soon) but I thought putting the issues in record would be useful.

### Details

```
/Volumes/Cased/git/iay/iay/site/vendor/ruby/2.7.0/gems/cri-2.15.9/lib/cri/command_dsl.rb:243: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
/Volumes/Cased/git/iay/iay/site/vendor/ruby/2.7.0/gems/cri-2.15.9/lib/cri/command_dsl.rb:155: warning: The called method `option' is defined here
/Volumes/Cased/git/iay/iay/site/vendor/ruby/2.7.0/gems/cri-2.15.9/lib/cri/command_dsl.rb:220: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
/Volumes/Cased/git/iay/iay/site/vendor/ruby/2.7.0/gems/cri-2.15.9/lib/cri/command_dsl.rb:155: warning: The called method `option' is defined here
/Volumes/Cased/git/iay/iay/site/vendor/ruby/2.7.0/gems/json-2.1.0/lib/json/common.rb:156: warning: Using the last argument as keyword parameters is deprecated
/Volumes/Cased/git/iay/iay/site/vendor/ruby/2.7.0/gems/json-2.1.0/lib/json/common.rb:156: warning: Using the last argument as keyword parameters is deprecated
Loading site… /Volumes/Cased/git/iay/iay/site/vendor/ruby/2.7.0/gems/json-2.1.0/lib/json/common.rb:156: warning: Using the last argument as keyword parameters is deprecated
/Volumes/Cased/git/iay/iay/site/vendor/ruby/2.7.0/gems/json-2.1.0/lib/json/common.rb:156: warning: Using the last argument as keyword parameters is deprecated
done
/Volumes/Cased/git/iay/iay/site/vendor/ruby/2.7.0/gems/nanoc-core-4.11.14/lib/nanoc/core/compiler_loader.rb:35: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
/Volumes/Cased/git/iay/iay/site/vendor/ruby/2.7.0/gems/nanoc-core-4.11.14/lib/nanoc/core/compiler.rb:8: warning: The called method `initialize' is defined here
```
### Steps to reproduce

1. Add an <img> tag using srcset
2. Compile using relativize_paths

### Expected behavior

Expected not only the src attribute but also all the links in the srcset to be relativized.

### Actual behavior

Only the src attribute is relativized.

### Details

I wasn't able to get the selector parameter to work using srcset like I have done in the past for data-src. This is likely due to the fact that srcsets, unlike src, are a list of links and image sizes, and not just a single link.
### Steps to reproduce

Follow the steps in #1470. Then:

    $ cp ~/tmp/secondfile.png content
    $ nanoc
    $ rm content/secondfile.png
    $ nanoc show-data

### Expected behavior

We have removed a binary file. This should not cause another binary file to be invalidated.

### Actual behavior

It is!

### Details

This is the second problem I have in large projects. Adding new images is a fast operation, removing them is recompile everything hell! :fire:
### Steps to reproduce

```
$ nanoc create foobar && cd foobar
$ cp ~/tmp/blubb.png content
```

Add [thumbnailize_filter.rb](https://github.com/blinry/morr.cc/blob/master/lib/thumbnailize_filter.rb) to **lib/**.

Add the following to **Rules**:

```
compile "/**/*.{png,jpg,gif,svg}", :rep => :thumbnail do
    filter :thumbnailize, :width => 600
    write item.identifier + "-thumbnail.png"
end
```

Create a trivial **lib/helpers.rb**:

```
def foo
    "bar"
end
```

    $ nanoc
    $ echo >> lib/helpers.rb
    $ nanoc show-data

### Expected behavior

Nanoc figures out that the image does not depend on the content of **lib/helpers.rb**.

### Actual behavior

```
item /blubb.png, rep thumbnail:
  is outdated:
    - The code snippets have been modified since the last time the site was compiled.
```

### Details

This is becoming a problem in some of my larger projects, where I create *a lot* of thumbnails – changing something in the code snippets invalidates all of them, leading to a recompile of several minutes. Is there a way to tell nanoc that thumbnail generation only depends on **lib/thumbnailize_filter.rb**? Thanks! <3
### Steps to reproduce

1. Create a layout that pulls in some other items with `@items[item_identifier_string]` or `@items.find_all(some_item_glob)`.
2. Use that layout in two or more items.
3. Run `nanoc show-data`

### Expected behavior

`show-data` should list all the dependencies for all of the items.

### Actual behavior

`show-data` lists the dependencies for one of the items using that template. The other items are listed as depending on `(nothing)`.

### Details

Unsure if this is related or not, but the values given to `@items` originates from an `@item` property.  E.g. `@items.find_all("{#{@item[:array_of_item_identifiers].join(',')}}")` or `@items[@item[:thumbnail_item_identifier]]`.

Despite not showing in `show-data`, the dependency tracking works _most of the time_. Sometimes need to run `compile` a second time for an item using such a layout will recompile.

Update 1: The recompilation issue seems to only affect item properties from items with meta files.

Update 2: Recompilation issue separated into separate issue #1454.
### Steps to reproduce

1. Run `bundle exec nanoc live`
2. Modify a file
3. Save it

### Expected behavior

I think previously `nanoc live` used to log what it was doing, exactly like `nanoc compile` does. For example

```
      update  [0.00s]  output/foobar/index.html
```

### Actual behavior

Now I only get a `14:13:41 - INFO - Compilation succeeded.` line.
### Steps to reproduce

1. Create some items that links multiple times to different websites. (item1 links ten times to example.com, item2 links ten times to example.org, etc.)
2. Run` nanoc check elinks`

### Actual behavior

Nanoc sends requests in the order the links where discovered and ends up sending multiple requests to the same origin in a short amount of time. This can also happens when frequently linking to the same website from multiple items.

Results in HTTP 429 Too Many Requests rate-limiting responses.

### Expected behavior

Nanoc should avoid sending repeated requests to the same origin multiple times in a row. Introducing a delay between requests is undesirable, but shuffling all the collected links from all items in a way that spreads out requests to the same origins would be great. Not sure how to best do that, though.
This makes Nanoc compile items in parallel.

### Detailed description

The design:

*   For each outdated item rep, schedule its compilation in a fixed-size thread pool. The thread pool is of a fixed size, so that we can control the effective parallelism.

*   When an outdated item rep fails to be compiled due to a missing dependency, queue its compilation in a separate thread pool without a fixed size (called “extra” for now). This ensures that there cannot be a deadlock due to there not being enough threads. For each element in this “extra” thread pool, there is one item rep in either thread pool that is blocked because of an unmet dependency.

*   The `Resume` phase (now a bad name) notifies the coordinator of failed hard dependencies, while accessing snapshot contents will block until the content is available.

*   One main thread does the coordination through event handling. Eventually, this main thread will also do deadlock detection.

*   To detect deadlocks, Nanoc will record the source and target reps for each `compilation_suspended` notification, and build a graph. If it has cycles, there is a deadlock.

    The current implementation deals with item reps, but that is limited, because there are cases where this approach would detect a false deadlock. For example:

    * item reps R1 and R2
    * R1 has snapshot R1S1 and R1S2
    * R2 has snapshot R2S1 and R2S2
    * R1S2 depends on R2S1
    * R2S2 depends on R1S1

    R1S1 and R2S1 can be compiled without issue. Therefore, both R1S2 and R2S2 can also be compiled. The deadlock detector unfortunately currently detects a deadlock, however.

*   The parallelism in the `Write` phase is removed, as it no longer provides a benefit.

One interesting observation is that the changes are pretty limited:

* The `CompileReps` stage has lots of changes, because that is where the parallelism happens.
* Some stores have basic access mutexes now.
* The `Resume` phase needed only minor changes.
* The `ItemRepSelector` is now obsolete and removed.

### Future work

-   **The `Resume` phase:** It might be possible to remove the `Resume` phase. At the moment, it serves as a way of communicating hard dependencies, since it knows the source rep and the target rep (and target snapshot name), which might not be fully known elsewhere (e.g. the snapshot repo would only know the target rep and target snapshot name).

    The name `Resume` no longer matches the original intent. Perhaps `HardDependencyCatcher` might be a better name. But ideally, we’d get rid of it entirely…

-   **Shared mutable state:** The `dependency_store`, `snapshot_repo`, `compiled_content_cache`, and `outdatedness_store` are all mutable, and shared between threads. Access to them is controlled using mutexes. Rather than having shared mutable state, it might be better to allow the worker threads to communicate with the main thread and request data and modifications to data.

    The snapshot repo (which stores the already-compiled content) uses both mutexes _and_ futures: mutexes to prevent data races, and futures to block until certain content becomes available. The combination of mutexes _and_ futures is a little bizarre.

### To do

* [ ] Tests

* [x] Thread pool

* [ ] Deadlock detection — Thew new implementation can detect dependency cycles, but it will find dependency cycles that are fine (see above for details).

* [ ] Better duration recording — When one rep is blocked on another rep+snapshot, the time spent waiting is currently considered to be part of the rep that requested the content. I suppose it’s not technically _wrong_ for it to be this way, but it might be nice to have the old behavior.

### Related issues

nanoc/features#49