<!-- Please note we *won't* enable network access or allow
     the crate to write in read-only directories, to avoid
     compromising the security of docs.rs itself. -->

**Crate name:** jni-android-sys
**Build failure link:** https://docs.rs/crate/jni-android-sys/0.0.10/builds/212799

**Requested RAM limit:** 5GB
**Requested timeout:** As is (15 minutes)

**Why your crate needs the resource increases:**
rustdoc.exe alone uses 3.7GB of memory on windows, when executed via `cargo doc --no-deps --features "api-level-28 all force-define"`, as this crate includes generated source code to bind to the entire Android API.  While the build logs obliquely mention SIGKILL, I'm assuming this is from similar memory use on linux exceeding memory limits.

Previous builds have finished in approximately 10 minutes, so the default timeout at 15 is probably fine?
- Ignore yanked versions
- Ignore pre-release versions
- Add lots of tests

Note: this now queries `releases.version` instead of `crates.versions`
so that I have accessed to `releases.yanked`. This _shouldn't_ affect
behavior, but if a previous bug set `crates.versions` to something
different, it will no longer be seen.

Closes https://github.com/rust-lang/docs.rs/issues/223, closes https://github.com/rust-lang/docs.rs/issues/221

r? @pietroalbini
<!-- If you need a system dependency added for your crate to build,
consider making a PR to https://github.com/rust-lang/crates-build-env
instead of opening an issue here. There are detailed instructions for this at
https://github.com/rust-lang/docs.rs/wiki/Making-changes-to-the-build-environment
-->

**Crate name:** stm32f3-discovery
**Build failure link:** https://docs.rs/crate/stm32f3-discovery/0.1.2/builds/212158

**Additional details:**

Crates targeting ARM Cortex-M processors fail to build because docs.rs currently doesn't support the `thumbv*` targets.

This can be worked around by setting the default target to `x86_64-unknown-linux-gnu` per https://github.com/stm32-rs/stm32f3xx-hal/issues/46.

```toml
[package.metadata.docs.rs]
default-target = "x86_64-unknown-linux-gnu"
```

Possibly related to https://github.com/rust-lang/docs.rs/issues/343#issuecomment-525888748
e.g. https://docs.rs/actix-web/0.7.10 looks like a normal release while https://crates.io/crates/actix-web/0.7.10 shows that it's been yanked.

dockworker which is a docker client library.
Building this crate failed on docs.rs :(

**Crate name:**
dockworker

**Build failure link:**
https://docs.rs/crate/dockworker/0.0.15

**Additional details:**
On my local machine (Ubuntu 18.04 LTS), building succeeds.

Closes https://github.com/rust-lang/docs.rs/issues/552
This is coming from https://github.com/rust-lang/docs.rs/blob/master/src/web/rustdoc.rs#L312.

Somehow, there's a case where `req_path` has a `module` that's not the same as `target_name`, but also not a target. Maybe a renamed crate?

This is all the information I have from the logs:

<details><summary>backtrace</summary>

```
Jan 07 15:43:38 docsrs cratesfyi[417]: thread '<unnamed>' panicked at 'index out of bounds: the len is 4 but the index is 4', src/web/rustdoc.rs:312:53
Jan 07 15:43:38 docsrs cratesfyi[417]: stack backtrace:
... truncated ...
Jan 07 15:43:38 docsrs cratesfyi[417]:   14: core::panicking::panic_bounds_check
Jan 07 15:43:38 docsrs cratesfyi[417]:              at src/libcore/panicking.rs:96
Jan 07 15:43:38 docsrs cratesfyi[417]:   15: cratesfyi::web::rustdoc::rustdoc_html_server_handler
Jan 07 15:43:38 docsrs cratesfyi[417]:   16: <F as iron::middleware::Handler>::handle
Jan 07 15:43:38 docsrs cratesfyi[417]:   17: <alloc::boxed::Box<dyn iron::middleware::Handler> as iron::middleware::Handler>::handle
Jan 07 15:43:38 docsrs cratesfyi[417]:   18: <cratesfyi::web::routes::BlockBlacklistedPrefixes as iron::middleware::Handler>::handle
Jan 07 15:43:38 docsrs cratesfyi[417]:   19: <alloc::boxed::Box<dyn iron::middleware::Handler> as iron::middleware::Handler>::handle
Jan 07 15:43:38 docsrs cratesfyi[417]:   20: router::router::Router::handle_method
Jan 07 15:43:38 docsrs cratesfyi[417]:   21: <router::router::Router as iron::middleware::Handler>::handle
Jan 07 15:43:38 docsrs cratesfyi[417]:   22: iron::middleware::Chain::continue_from_handler
Jan 07 15:43:38 docsrs cratesfyi[417]:   23: <iron::middleware::Chain as iron::middleware::Handler>::handle
Jan 07 15:43:38 docsrs cratesfyi[417]:   24: <alloc::boxed::Box<dyn iron::middleware::Handler> as iron::middleware::Handler>::handle
Jan 07 15:43:38 docsrs cratesfyi[417]:   25: <cratesfyi::web::CratesfyiHandler as iron::middleware::Handler>::handle
Jan 07 15:43:38 docsrs cratesfyi[417]:   26: <iron::iron::RawHandler<H> as hyper::server::Handler>::handle
Jan 07 15:43:38 docsrs cratesfyi[417]:   27: hyper::server::Worker<H>::handle_connection
Jan 07 15:43:38 docsrs cratesfyi[417]:   28: hyper::server::listener::spawn_with::{{closure}}
Jan 07 15:43:38 docsrs cratesfyi[417]: note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
```

</details>
Most of these are partially addressed in https://github.com/rust-lang/docs.rs/pull/524https://github.com/rust-lang/docs.rs/pull/524, but it would be better to have unit tests.

Off the top of my head:

- proc macros should work (but only for default target because of bugs in cargo)
- all targets are built
- anything that's not only `bin` is built, including cdylib, rlib, etc.
- viewing source works
- building with docker-compose from scratch (no cache) works (expensive, doesn't need to be run on every commit)
    - including on hosts other than `x86_64-unknown-linux-gnu`
- renamed crates work (e.g. constellation-rs -> constellation)
- 'go to latest version' works and doesn't crash

This would make me much more comfortable fixing https://github.com/rust-lang/docs.rs/issues/544 and https://github.com/rust-lang/docs.rs/issues/459.
Same as #534 but now it doesn't crash when viewing source code.

r? @pietroalbini 