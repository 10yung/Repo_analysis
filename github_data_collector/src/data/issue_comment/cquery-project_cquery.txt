<!-- Please make sure the issue reproduces on the master branch -->
<!-- If you have an issue with project loading please include the output of `cquery --check <path>`; make sure to run cquery in your project directory -->
<!-- Consider doing a debug build, which has asserts enabled -->

I use cquery in neovim through [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim). I found whenever I open a file in a project `/site/home/xxx/project` (this is the project root), there are two separate folders created in the cache directory. One is `@site@home@xxx@project`. The other is `@@site@home@xxx@project`. (let's call them the `@-dir` and the `@@-dir`)

NOTE: In my system, `/home` is a symlink to `/site/home`. 

Some of the files inside these folders duplicates. Assume there is a file `/site/home/xxx/project/include/a.hpp`, two separate cache files exists: 
- `@site@home@xxx@project/include@a.hpp`
- `@@site@home@xxx@project/@home@xxx@project@include@a.hpp`  (NOTE: no `site` appeared in the filename)

with exactly the same content. When I query some definitions, both of them will popup in the list.

Is this the normal behavior? What are the differences between the two directories. 

cquery project seems to be no longer maintained by anyone. Perhaps we can have it archived and add a description suggesting users to choose alternatives? Could be a fork project like https://github.com/MaskRay/ccls or official one like https://clang.llvm.org/extra/clangd .



```
Undefined symbols for architecture x86_64:
  "std::__1::shared_timed_mutex::lock_shared()", referenced from:
      ImportManager::GetStatus(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in import_manager.cc.o
  "std::__1::shared_timed_mutex::unlock_shared()", referenced from:
      ImportManager::GetStatus(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in import_manager.cc.o
  "std::__1::shared_timed_mutex::lock()", referenced from:
      (anonymous namespace)::IndexMain_DoParse(DiagnosticsEngine*, WorkingFiles*, FileConsumerSharedState*, TimestampManager*, (anonymous namespace)::IModificationTimestampFetcher*, ImportManager*, IIndexer*) in import_pipeline.cc.o
      QueryDb_ImportMain(QueryDatabase*, ImportManager*, ImportPipelineStatus*, SemanticHighlightSymbolCache*, WorkingFiles*) in import_pipeline.cc.o
  "std::__1::shared_timed_mutex::unlock()", referenced from:
      (anonymous namespace)::IndexMain_DoParse(DiagnosticsEngine*, WorkingFiles*, FileConsumerSharedState*, TimestampManager*, (anonymous namespace)::IModificationTimestampFetcher*, ImportManager*, IIndexer*) in import_pipeline.cc.o
      QueryDb_ImportMain(QueryDatabase*, ImportManager*, ImportPipelineStatus*, SemanticHighlightSymbolCache*, WorkingFiles*) in import_pipeline.cc.o
  "std::__1::shared_timed_mutex::shared_timed_mutex()", referenced from:
      RunQueryDbThread(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in command_line.cc.o
      _DOCTEST_ANON_SUITE_2::Fixture::Fixture() in import_pipeline.cc.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
gmake[2]: *** [CMakeFiles/cquery.dir/build.make:2385: cquery] Error 1
gmake[1]: *** [CMakeFiles/Makefile2:100: CMakeFiles/cquery.dir/all] Error 2
```
Hi,

Raspberry Pi running Ubuntu 19.04:

-- The CXX compiler identification is GNU 8.3.0
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Using downloaded Clang
-- Downloading Clang 7.0.0 (https://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz) ...
-- Extracting downloaded Clang with CMake built-in tar ...
-- The C compiler identification is GNU 8.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Looking for pipe2
-- Looking for pipe2 - found
CMake Error at cmake/FindClang.cmake:95 (message):
  Error retrieving Clang resource directory with Clang executable.  Output:

   /home/richard/code/cquery/build/clang+llvm-7.0.0-x86_64-linux-gnu-ubuntu-14.04/bin/clang++: 1: /home/richard/code/cquery/build/clang+llvm-7.0.0-x86_64-linux-gnu-ubuntu-14.04/bin/clang++: ELF: not found

  
  /home/richard/code/cquery/build/clang+llvm-7.0.0-x86_64-linux-gnu-ubuntu-14.04/bin/clang++:
  2:
  /home/richard/code/cquery/build/clang+llvm-7.0.0-x86_64-linux-gnu-ubuntu-14.04/bin/clang++:
  Syntax error: ")" unexpected

Call Stack (most recent call first):
  CMakeLists.txt:108 (find_package)


-- Configuring incomplete, errors occurred!
See also "/home/richard/code/cquery/build/CMakeFiles/CMakeOutput.log".
make: *** No targets specified and no makefile found.  Stop.
make: *** No rule to make target 'install'.  Stop.

Obviously this is never going to work as the Raspberry Pi is an Arm architecture, so why is it trying to download and run the x86 version?

Thanks,
Richard.

Hi,

This is pretty frustrating to be honest, why is the build process downloading a compiler when it is already installed?

Ubuntu 19.04

The issue:
$ cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=release -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
-- The CXX compiler identification is GNU 8.3.0
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Using downloaded Clang
-- Downloading Clang 7.0.0 (https://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz) ...

But clang-7 is already installed:
$ apt policy clang-7
clang-7:
  Installed: 1:7.0.1-8
  Candidate: 1:7.0.1-8
  Version table:
 *** 1:7.0.1-8 500
        500 http://gb.archive.ubuntu.com/ubuntu disco/universe amd64 Packages
        100 /var/lib/dpkg/status

Why can't the build process just use the installed version?

Thanks,
Richard.

<!-- Please make sure the issue reproduces on the master branch -->
<!-- If you have an issue with project loading please include the output of `cquery --check <path>`; make sure to run cquery in your project directory -->
<!-- Consider doing a debug build, which has asserts enabled -->
Platform: win10
editor: vscode

Environment variables are listed below:
```
> set MSMPI
MSMPI_BENCHMARKS=C:\Program Files\Microsoft MPI\Benchmarks\
MSMPI_BIN=C:\Program Files\Microsoft MPI\Bin\
MSMPI_INC=C:\Program Files (x86)\Microsoft SDKs\MPI\Include\
MSMPI_LIB32=C:\Program Files (x86)\Microsoft SDKs\MPI\Lib\x86\
MSMPI_LIB64=C:\Program Files (x86)\Microsoft SDKs\MPI\Lib\x64\
```
And the `c_cpp_properties.json` is
```
{
    "configurations": [
        {
            "name": "Win32",
            "includePath": [
                "${workspaceFolder}/**",
                "${env:MSMPI_BIN}",
                "${env:MSMPI_INC}",
                "${env:MSMPI_LIB32}"
            ],
            "defines": [
                "_DEBUG",
                "UNICODE",
                "_UNICODE"
            ],
            "windowsSdkVersion": "10.0.17763.0",
            "compilerPath": "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64/cl.exe",
            "cStandard": "c11",
            "cppStandard": "c++17",
            "intelliSenseMode": "msvc-x64"
        }
    ],
    "version": 4
}
```
However, `cpptools` can pharse the environment variables  `${env:MSMPI_BIN}`, `${env:MSMPI_INC}` and `${env:MSMPI_LIB32}`, but `cquery` cannot.

The reason is that these environment variables have space within them, which is frequently occurred in Windows. I hope it could be fixed.

An apt repository would avoid the need for people to have to compile CQuery from source - easing the installation process and allowing for easier removal if they change their minds.
The text `(CLICK HERE)` was not clickable.
The following wiki page should probably be removed:
https://github.com/cquery-project/cquery/wiki/Getting-started

It only shows four letters: `unko`

The main repository page shows this text:
`>>> Getting started (CLICK HERE) <<<`
which links to:
https://github.com/cquery-project/cquery/wiki

The previous `Getting Started.md` wiki file was deleted in this commit:
```
More tidying up
@DaanDeMeyer DaanDeMeyer committed on Jul 28, 2018
7794ea9
```
https://github.com/cquery-project/cquery/wiki/_compare/8e8147af244d94f6afe5eb9f9daca82525c08bb8...7794ea94c0efc912ffa96e8a2e4163f3908f568b