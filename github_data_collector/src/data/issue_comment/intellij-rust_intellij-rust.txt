I want to inject language to a macros string, but there is no such option (https://www.jetbrains.com/help/clion/using-language-injections.html). 
![image](https://user-images.githubusercontent.com/25568730/72680086-d59d1a80-3ac6-11ea-8c05-9d97026c0461.png)
How may I do that?
Note, build for 201 platform:
* uses CLion as a dependency for `debugger` module instead of [`Native Debug`](https://plugins.jetbrains.com/plugin/12775-native-debugging-support) plugin because the second one is not published yet for 2020.1
* doesn't provide integration with [`Grazie`](https://plugins.jetbrains.com/plugin/12175-grazie/) plugin because it is not published for 2020.1 too
<!--
Hello and thank you for the issue!
If you would like to report a bug, we have added some points below that you can fill out.
Feel free to remove all the irrelevant text to request a new feature.
-->

## Environment

* **IntelliJ Rust plugin version:** 0.2.114.2828-193-nightly
* **Rust toolchain version:** 1.40.0 (73528e339 2019-12-16) x86_64-apple-darwin
* **IDE name and version:** IntelliJ IDEA 2019.3.1 Ultimate Edition (IU-193.5662.53)
* **Operating system:** macOS 10.15.2

![toml_deps_bug](https://user-images.githubusercontent.com/4854600/72539103-dc8e1800-388f-11ea-8547-a2bef2901720.gif)


## Problem description
Crate documentation line markers (provided by `CargoCrateDocLineMarkerProvider`) disappear sometimes on pushing `Enter` button.

## Steps to reproduce
Place caret before or after dependency in `Cargo.toml` and push `Enter` one or more times.


#### Before PR (`ignoreWithoutQuickFix` set to`true`) - default
![Screenshot from 2020-01-15 20-23-26](https://user-images.githubusercontent.com/16986685/72468957-9927a100-37de-11ea-86fd-1dcdd29e6bba.png)

#### Before PR (`ignoreWithoutQuickFix` set to `false`)
![Screenshot from 2020-01-15 20-23-54](https://user-images.githubusercontent.com/16986685/72468951-962cb080-37de-11ea-9f5f-30fd60103c00.png)

#### After PR
![Screenshot from 2020-01-15 20-26-01](https://user-images.githubusercontent.com/16986685/72468938-8a40ee80-37de-11ea-9ff0-6c646083efe1.png)

This PR is tested with experimental macro expansion engine enabled,
so this PR would probably make more sense to merge after making new engine the default

I removed `ignoreWithoutQuickFix` checkbox, it is my main issue with current implementation,
as it defeats one of the main purposes of the inspection which is to show references that cannot be resolved, for reasons more than just 'not imported'

Also previously this inspection could register problem for same PsiElement multiple times, this is fixed in PR

Due to `ignoreWithoutQuickFix` being removed several tests that assumed this variable was set
to true do not really make sense now, some were corrected.

This PR is WIP because it broke some tests in `AutoImportFixTest` and `AutoImportFixStdTest` and I'd like some feedback on the PR before fixing

There are also some failed tests in `RsBuildActionTest` and `CargoBuildManagerTest` not sure whether this is my fault

##  Environment

* **IntelliJ Rust plugin version:** 0.2.113.2150-193
* **Rust toolchain version:** 1.39.0 (4560ea788 2019-11-04) x86_64-unknown-linux-gnu
* **IDE name and version:** IntelliJ IDEA 2019.3.1 Community Edition (IC-193.5662.53)
* **Operating system:** Linux 5.4.3-arch1-1

## Problem description

IDEA hangs after adding `(` in multi-cursor mode.

## Steps to reproduce

Create a Rust project and write the following code:
```rust
fn get_data() -> &'static [(&'static str, u8)] {
    &[
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
    ]
}
```
The goal is to replace each `"a",` line with `("a", 0),`. Select all the relevant lines in multi-cursor mode. Place cursor right before the first `"`. Press `(`.
## Environment

* **IntelliJ Rust plugin version:** 0.2.114.2828-193-nightly
* **Rust toolchain version:** 1.39.0 (4560ea788 2019-11-04) x86_64-apple-darwin
* **IDE name and version:** CLion 2020.1 Snapshot (CL-201.3800)
* **Operating system:** macOS 10.15

## Problem description

Some methods (e.g. `into_iter`) are missing from completion on `itertools::GroupBy` once a closure is passed to `group_by` call.

## Steps to reproduce

```rust
extern crate itertools;

use itertools::Itertools;

fn foo(data: &str) {
    data.chars().group_by(|&chr| chr).into_i
}
```

try finish completion with `into_iter`:

<img width="609" alt="bad" src="https://user-images.githubusercontent.com/2500320/72362399-2a761500-3704-11ea-9520-3d86bb41954b.png">

without the closure:

<img width="784" alt="good" src="https://user-images.githubusercontent.com/2500320/72362407-2ea23280-3704-11ea-9dd4-1e0b9cfe5eee.png">
* provide `Attach Cargo Project` action for files (`Cargo.toml` and its parent dir) in project view
* provide editor notification that `Cargo.toml` doesn't belong to any cargo project with `Attach` action. The action creates new cargo project in project model without manual choice of directory

Related to #4813
## Environment

* **IntelliJ Rust plugin version:** 0.2.114.2826-193-nightly
* **Rust toolchain version:** 1.39.0 (4560ea788 2019-11-04) x86_64-apple-darwin
* **IDE name and version:** CLion 2020.1 Snapshot (CL-201.3671)
* **Operating system:** macOS 10.15

## Problem description

I usually write return/collect/... last when implementing a function/method, this way the plugin is constantly complaining about the wrong return type till the function is actually finished. This means the last function expression is underlined in red 99% of the time. Sometimes I even put a mock value in the end while coding just to see more meaningful errors hidden behind wrong type.

I would argue that's too harsh, why not highlighting the return type in the function signature as an error instead? This way it will be easier on eyes and still present.

<img width="808" alt="Screen Shot 2020-01-10 at 19 45 30" src="https://user-images.githubusercontent.com/2500320/72170406-e1f7e800-33e1-11ea-8299-bba5e3b89c4a.png">

Since 2020.1 plugins can be dynamic, i.e. can be installed without IDE restart. And it would be great to make IntelliJ Rust plugin dynamic.
To achieve it, we need to get rid of all components, use only dynamic extension points, mark own extension points as dynamic, etc.
Full documentation about dynamic plugins can be found [here](https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/dynamic_plugins.html)
<!--
Hello and thank you for the issue!
If you would like to report a bug, we have added some points below that you can fill out.
Feel free to remove all the irrelevant text to request a new feature.
-->

## Environment

* **IntelliJ Rust plugin version:** 0.2.114.2822-193-nightly
* **Rust toolchain version:** 1.42.0-nightly (0de96d37f 2019-12-19) x86_64-apple-darwin
* **IDE name and version:** IntelliJ IDEA 2019.3.2 Preview Ultimate Edition (IU-193.6015.11)
* **Operating system:** macOS 10.13.6
* **Macro expansion engine:** experimental

## Problem description
The plugin fails to infer an array size that is returned by `to_be_bytes` method of primitive integer types.
![image](https://user-images.githubusercontent.com/2539310/72117137-a0bdf480-335d-11ea-8b7d-1c63ae6669a2.png)

The main reason - at this moment plugin can't evaluate `mem::size_of::<T>()` expression that is used to declare array size.

For example, it's implementation of `to_be_bytes` method for `u8`:
```rust
pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {
    self.to_be().to_ne_bytes()
}
```

## Steps to reproduce
```rust
fn main() {
    let bytes = 1u16.to_be_bytes();
}
```

<!--
Please include as much of your codebase as needed to reproduce the error.
If the relevant files are large, please provide a link to a public repository or a [Gist](https://gist.github.com/).
-->            