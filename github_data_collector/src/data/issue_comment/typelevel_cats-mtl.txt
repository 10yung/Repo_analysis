Updates [org.typelevel:discipline-scalatest](https://github.com/typelevel/discipline-scalatest) [from 1.0.0-RC2 to 1.0.0-RC4](https://github.com/typelevel/discipline-scalatest/compare/v1.0.0-RC2...v1.0.0-RC4).
[Release Notes/Changelog](https://github.com/typelevel/discipline-scalatest/blob/master/CHANGELOG.md)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.typelevel", artifactId = "discipline-scalatest" } ]
```
</details>

labels: library-update, semver-pre-release
I'm trying to stack a WriterT and EitherT together - ultimately something like IO[Writer[Log, Either[Throwable, A]]]. The idea is that even in the event of an error the log up to that point should be maintained.

I have created a POC which uses a transformer stack of EitherT[WriterT[IO, Log, *], Throwable, *] and when I materialise the program it works as expected. The logs are present even in the event of an error. However FunctorListen seems to short circuit in the event of an error. Here is the code itself:

```scala
object POC extends IOApp {

  import cats.instances.vector._
  import cats.mtl.implicits._
  import cats.syntax.flatMap._
  import cats.syntax.functor._

  type Log = Vector[String]

  override def run(args: List[String]): IO[ExitCode] = {
    val name = getName[EitherT[WriterT[IO, Log, *], Throwable, *]]
    // this works even with a raised error so the stack itself is working
    name.value.written.flatTap(logs => IO(println(logs))).as(ExitCode.Success)
    // this won't work
    printLog(name).value.run.as(ExitCode.Success)
  }

  def printLog[F[_], A](fa: F[A])(implicit F: Sync[F], FL: FunctorListen[F, Log]): F[A] = {
    // this is never called when an error is raised
    fa.listen.flatMap { case (a, logs) => F.delay(println(logs)).as(a) }
  }

  def getName[F[_]](implicit F: Sync[F], FT: FunctorTell[F, Log], FR: FunctorRaise[F, Throwable]): F[String] = for {
    _ <- FT.tell(Vector("getting name ..."))
    a <- F.delay("bob")
    // Exception here means FunctorListen cant find any logs
    _ <- FR.raise(new Exception("boom!")): F[Unit]
  } yield a

}
```

I'm not sure if this is a problem with FunctorListen or FunctorRaise. It could be that FunctorRaise is raising an error at the IO level not the Either/EitherT
It can be convenient to allow a MonadState[F, S] to serve as an ApplicativeAsk[F, S]. We can think of the former constraint as the ability to read and update system state, and the latter as simply the ability to read it. If all we need is to read the state, the least privilege principle suggests that a ApplicativeAsk[F, S] constraint is preferable.

Traditionally, Reader monad is associated with reading outside configuration. However, IME it also works well to read the domain model of a stateful application, or some part thereof eg by the lensing techniques available in [meow-mtl](https://github.com/oleg-py/meow-mtl).

An example of value can be found in the [meow-mtl readme use case](https://github.com/oleg-py/meow-mtl/blame/master/README.md#L34)

This is a proposal to consider an opt-in extra derivation that provides an `ApplicativeAsk[F, S]` should a `MonadState[F, S]` instance be available. "Opt-in" rather than automatic because the Ask- and State-  may be unrelated, if `S`-type is something common like `Int`.
Updates [com.47deg:sbt-microsites](https://github.com/47deg/sbt-microsites) [from 0.9.7 to 1.0.0](https://github.com/47deg/sbt-microsites/compare/v0.9.7...v1.0.0).
[Release Notes/Changelog](https://github.com/47deg/sbt-microsites/blob/master/CHANGELOG.md)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.47deg", artifactId = "sbt-microsites" } ]
```
</details>

labels: semver-major
You know, I consider myself a reasonably advanced user of TravisCI and sbt, and it took me a zillion tries just to get a PR to build successfully. I still have no idea how to *release* anything. Some of those tries involved running sbt locally, having something fail, killing it, running *the same command again* and having it work.

I want to rip out a lot of the madness so that it's possible for third-parties to contribute without having to replicate what I did, because *I'm* not sure I can replicate what I did.
Hi all.

Bracket typeclass, that exists in cats-effect, doesn't work well with an effect that relies on FunctorRaise. 
I want to implement a clean-up logic in case of any error (raised either by MonadError or FunctorRaise).

Example:
```scala
import cats.data.EitherT
import cats.effect._
import cats.effect.syntax.bracket._
import cats.mtl._
import cats.mtl.implicits._

final case class AppError(reason: String)

class Service[F[_]: Sync: ApplicativeHandle[?[_], AppError]: FunctorRaise[?[_], AppError]] {

  def createActive: F[String] =
    create.bracketCase(uuid => makeActive(uuid)) {
      case (_, ExitCase.Completed)   => Sync[F].unit // There can be an error too
      case (uuid, ExitCase.Error(e)) => destroy(uuid)
      case (uuid, ExitCase.Canceled) => destroy(uuid)
    }

  def makeActive(uuid: String): F[String] = FunctorRaise[F, AppError].raise(AppError("Oops. Something went wrong"))
  def create: F[String]                   = Sync[F].pure("some uuid")
  def destroy(uuid: String): F[Unit]      = Sync[F].unit

}

object Service {

  def main(args: Array[String]): Unit = {
    type Effect[A] = EitherT[IO, AppError, A]
    val service = new Service[Effect]

    println(service.createActive.value.unsafeRunSync()) // Left(AppError("Oops. Something went wrong"))
  }

}
```

For sure this is the correct behavior of a Bracket typeclass and clean-up logic for a specific error can be managed inside the bracket:
```scala
create.bracketCase(uuid => makeActive(uuid).handleError[AppError](e => destroy(uuid) >> e.raise)) { ... }
```

But should there be an alternative Bracket that manages specific errors raised by FunctorRaise? For example, extended ADT can be used:
```scala
sealed trait ExitCase[+E1, +E2]
object ExitCase {
  final case object Completed                  extends ExitCase[Nothing, Nothing]
  final case class Error[E](cause: E)          extends ExitCase[E, Nothing]
  final case class UnhandledError[E](cause: E) extends ExitCase[Nothing, E]
  final case object Canceled                   extends ExitCase[Nothing, Nothing]
}
```


It has been mentioned on Gitter that such a function would be useful, especially for things like Ref that provide an atomic modify operation that allows returning a value depending on the previous state. Here it is.

It probably needs some laws, so I'll think about it and report back when I come up with something reasonable (will check what it looks like in Haskell world too).
I had a need for `Functor` on `ApplicativeAsk`, so I just went with it and looked at other possible implementations.

TODO:
- [ ] instances for other type classes
- [ ] law tests, obviously

Let me know if this looks like a nice thing to have :)
I noticed that even thought there is a cats-mtl Gitter channel, the Travis build notifications are going to the Cats Gitter channel instead. I don't have write permissions to this repo, so I can't see the right URL to fix it, but someone with permissions should be able to go to the cats-mtl Gitter channel, click the settings knobs on the upper right, click `Integrations` and set up a new webhook URL for Travis.

If you leave the URL hard-coded in the `.travis.yml` then you will still get notifications for builds on forks. Also I don't think that there's anything preventing anyone from copying the URL and sending build notifications for unrelated projects (though I don't know what their motive would be). See https://github.com/typelevel/cats/pull/2691 for how to easily transition to the preferred way of setting up these notifications.
Should address #80 for now.

StateIO uses a `Ref` to make state updates more performant.
A simple benchmark included in this PR shows this so far:

```
[info] Benchmark                              Mode  Cnt    Score    Error  Units
[info] StateBench.leftAssociatedBindSpecial  thrpt   10  297.506 ± 13.396  ops/s
[info] StateBench.leftAssociatedBindStateT   thrpt   10  107.687 ±  3.500  ops/s
```

next step might be to newtype it, to avoid boxing.