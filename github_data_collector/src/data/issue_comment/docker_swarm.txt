I did check that this didn't exist in open issues / couldn't find a roadmap which mentioned this.

I am using swarm to create a small (<20 containers, <10 service) backend, and would like to be able to view the logs as the service starts in a similar way to docker-compose up.  e.g. a collated or aggregated view of all the logs.

(If I'm not in the right place, or it's already been discussed and dismissed, please let me know :) )
<!-- Before filing an issue, double check that you're in the right repository.

This repository is only for issues related to the standalone Docker Swarm project.

Issues related to Docker 1.12+ Swarm Mode are filed under the repository:

  github.com/moby/moby

For further information, refer to Swarm Disambiguation in the README:

https://github.com/docker/swarm#swarm-disambiguation

-->

Environment:-

- Ubuntu 18.04
- Docker version 18.09.7, build 2d0083d
- image yogeshkathayat/node-ping which is a simple nodejs app running on a node-alpine build
- my current host IP: 10.255.8.21
- Ip that I want to ping: 10.255.8.53

My compose file:-
```
version: "3.3"
networks:
  basic:
services:
  ping-test:
    image: yogeshkathayat/node-ping
    deploy:
      replicas: 1
    networks:
      - basic
    ports:
      - "3000:3000"
```


Issue:-
I am not able to ping another host in the same local network from inside of the container,
if I remove `ports` section from my Compose file then it is working perfectly. but I want to expose the port to the outside world.

Steps:-

1. docker swarm init
2. docker stack deploy --compose-file docker-compose.yml ping
3. docker exec -it <containerid> /bin/bash  //go inside the container
4. ping host in the same subnet or network

Hi

What are the plans for swarm future?
Wiki is outdated, there are no public roadmaps. Is it a good technology for using in production right now/in next years?
Hello!
Some arguments of **docker service create** allow to use template like **{{.Node.ID}}**. But unfortunately node labels are not supported. What is the right way for a decision of this problem: I need to set the environment variables for every task.

For example:

`docker service create --env SOME_ENV="{{.Node.Labels.SOME_NODE_LABEL_VALUE}}"`

In this way, I need to configure docker service's task especially for every swarm's node.


When I'm adding a new node swarm is assigning the wrong ip to node

docker info
 Swarm: active
  NodeID: m4fm7zodif7vwmogm3drejzjg
  Is Manager: false
  Node Address: 198.50.170.172
  Manager Addresses:
   149.56.234.130:2377

docker node inspect --format '{{.Status.Addr}}' m4fm7zodif7vwmogm3drejzjg
158.69.54.40

When I do this in one of my servers, one of the images of the docker-compose is not correct (it is an outdated image):

`docker stack deploy -c docker-compose.yml builder`

But when I change its name, for example by executing the following command, then it works fine:

`docker stack deploy -c docker-compose.yml whatever`

I think it has to do with caching, but I've tried removing all images, all containers, swarms, services... I have even done docker system prune, but with no avail. I then decided to rename /var/lib/docker, uninstall everything from docker and install it again. By doing this I was able to finally make it work with the `builder` name.

I've tried the exact same thing in a different staging server from scratch (where I had no Docker beforehand) and using the first command everything goes fine, so I wonder what is going on and what I can do to fix this issue without having to uninstall docker whenever this happens.

I have saved the problematic /var/lib/docker in case it is helpful in order to find what the cause of the issue is.

Let me know if I should provide more information and thank you!
Is it possible to have `docker service rollback` rollback to the previous cached image? For instance, imagine an upstream change to the image tagged `latest` causes a service to break. Is it possible for the rollback to use the previous image even if it has the same tag?

Would be cool if this usecase was explained in the docs. I can see in the service inspect that the hash is saved with the image, so I thought it could be possible.

Thanks.
docker swarm version：18.06.3-ce
centos kernel：centos 7 —5.2.6-1.el7.elrepo.x86_64

[root@swarm01 dockercompose]# docker images
REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE
test                                 none            a61c6e66f501        6 days ago          208MB


`[root@swarm01 dockercompose]# docker service ps nice_test-gateway
ID                  NAME                 IMAGE                               NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS
os4u6uldcl97        nice_jic-gateway.1   172.19.0.11/test/test-gateway:2.0.0   swarm02             Running             Running 9 seconds ago                       
d0eibsmnjkp7        nice_jic-gateway.2   172.19.0.11/test/test-gateway:2.0.0   swarm03             Running             Running 9 seconds ago                       
bk0qdftdpwb3        nice_jic-gateway.3   172.19.0.11/test/test-gateway:2.0.0   swarm01             Running             Running 2 seconds ago`

Look,the image tag is none..why????

I'm working on *Docker Compose* locally and everything is fine. However, when I deploy it to the development server (the *Swarm cluster*), the app breaks (StackOverflow question [here](https://stackoverflow.com/questions/57143819/symfony-4-app-works-with-docker-compose-but-breaks-with-docker-swarm-no-login)).

I would like to understand what could change from Compose to Swarm ?

 - Docker version: `19.03.1`
 - API version: `1.40`

Hi,

I have initiated docker swarm master/worker on the same machine and deployed  Blackduck { docker-swarm]# docker stack deploy -c docker-compose.yml hub} however all the services are replicated and not started. Do I need to update any docker file?

Any help will be appreciated.

{code}`[root@tlvzephyr01 docker-swarm]# docker stack ls
NAME                SERVICES            ORCHESTRATOR
hub                 12                  Swarm




[root@tlvzephyr01 docker-swarm]# docker service ls
ID                  NAME                 MODE                REPLICAS            IMAGE                                                 PORTS
it766zoxo9fn        hub_authentication   replicated          0/1                 blackducksoftware/blackduck-authentication:2019.6.0
ovam5hna5vg1        hub_cfssl            replicated          1/1                 blackducksoftware/blackduck-cfssl:1.0.0
j5qc448k7ooz        hub_documentation    replicated          1/1                 blackducksoftware/blackduck-documentation:2019.6.0
liomdkbvziti        hub_jobrunner        replicated          0/1                 blackducksoftware/blackduck-jobrunner:2019.6.0
hgj2sr0jzcm0        hub_logstash         replicated          1/1                 blackducksoftware/blackduck-logstash:1.0.4
pnc92g7cmtgx        hub_postgres         replicated          0/1                 blackducksoftware/blackduck-postgres:1.0.7            *:55436->5432/tcp
6kqizhc4fbmo        hub_registration     replicated          1/1                 blackducksoftware/blackduck-registration:2019.6.0
khtjdy8vkux5        hub_scan             replicated          0/1                 blackducksoftware/blackduck-scan:2019.6.0
gpm3eg9ekdb1        hub_uploadcache      replicated          1/1                 blackducksoftware/blackduck-upload-cache:1.0.8
e8u0tc0mujor        hub_webapp           replicated          0/1                 blackducksoftware/blackduck-webapp:2019.6.0
d5sovlldp1gd        hub_webserver        replicated          0/1                 blackducksoftware/blackduck-nginx:1.0.7               *:443->8443/tcp
br2735hsjlwi        hub_zookeeper        replicated          1/1                 blackducksoftware/blackduck-zookeeper:1.0.0





[root@tlvzephyr01 docker-swarm]# docker ps
CONTAINER ID        IMAGE                                                 COMMAND                  CREATED             STATUS                             PORTS                          NAMES
f18e879bf1e2        blackducksoftware/blackduck-registration:2019.6.0     "docker-entrypoint.sh"   7 minutes ago       Up 7 minutes (healthy)                                            hub_registration.1.bxg6op5rerbjgow66a9ya545z
f750c664e9f9        blackducksoftware/blackduck-logstash:1.0.4            "/usr/local/bin/dock…"   10 minutes ago      Up 10 minutes (healthy)            4560/tcp, 5044/tcp, 9600/tcp   hub_logstash.1.wc1hfygfypifba9rym72r5opx
dcd782da78d0        blackducksoftware/blackduck-zookeeper:1.0.0           "docker-entrypoint.s…"   16 minutes ago      Up 16 minutes (healthy)            2181/tcp, 2888/tcp, 3888/tcp   hub_zookeeper.1.6y12hcmwb5nphjkdxgh0aw02l
61c19bed306c        blackducksoftware/blackduck-documentation:2019.6.0    "docker-entrypoint.s…"   25 minutes ago      Up 24 minutes (healthy)            8080/tcp                       hub_documentation.1.mqmrplmteg2r366c306a46i0n
a7cb2fd10a62        blackducksoftware/blackduck-authentication:2019.6.0   "docker-entrypoint.sh"   28 minutes ago      Up 28 minutes (health: starting)                                  hub_authentication.1.pyybu8ucpd9620ot39glssxep
23d0a1afab78        blackducksoftware/blackduck-cfssl:1.0.0               "docker-entrypoint.sh"   28 minutes ago      Up 28 minutes (healthy)            8888/tcp                       hub_cfssl.1.vdluu7nmdpoyr6ipiejmlppat
4418ada468db        blackducksoftware/blackduck-upload-cache:1.0.8        "/opt/blackduck/hub/…"   28 minutes ago      Up 28 minutes (healthy)            8086/tcp, 9443/tcp             hub_uploadcache.1.2n6zaj3kvrut4hlm1fzsgm0dq
3a3b2634d989        blackducksoftware/blackduck-scan:2019.6.0             "docker-entrypoint.sh"   28 minutes ago      Up 28 minutes (health: starting)                                  hub_scan.1.0ua7mj29n8m6pfqghtsu8jss0
`