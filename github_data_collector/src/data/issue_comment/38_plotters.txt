### What is the feature ?

Add support for bar graphs which are similar to histograms but slightly different ;-)

Examples for bar graphs:

![image](https://user-images.githubusercontent.com/11088935/71981203-263c8a00-3222-11ea-9774-6d65f9a6b92a.png) 

(image from https://www.mathsisfun.com/data/bar-graphs.html)

or 
![image](https://user-images.githubusercontent.com/11088935/71981136-07d68e80-3222-11ea-97e4-5e30eeca1ef5.png)


### (Optional) Why this feature is useful and how people would use the feature ?

It's similar to histograms but is more focused on categories/... and doesn't only work for continous data.


# Motivation
Since we got a bunch of backends now, and some backend such as cairo, piston, etc actually actually have a dependency to third-party crates which might be frequently update. 
This increase the maintain burden - we need to keep each depdency such as cairo up-to-dated on crates.io, otherwise it may cause some issue with the people who use the crate. (Especially for cairo, since mostly people will import gtk and cairo directly from their code.) 
But the core code isn't required so many update, so it's better to make them sperate

# What to do?
We should relocate the code such as cairo backend and piston backend to separate crate and make this repo a workplace 
- [ ] Refactor all the blockers
  - [ ] `FontTransform` should be moved to text style, `FontDesc::box_size` should be removed since it's broken with current anchor system
  - [ ] Add trait `BackendFont` as the abstracted font impl, thus backend is not relies on actual font implementation
- [ ] Decouple `drawing::backend` and make it a standalone crate
   - [ ] `RGBAColor`
   - [ ] `TextStyle`
   - [ ] `FontTransform`
   - [ ] `FontStyle`
   - [ ] Default rasterizer
   - [ ] `drawing::backend::*`
- [ ] Update the core crate to use the standalone `plotters-backend` crate
- [ ] Move `PistionBackend` and `CairoBackend` to its own crate (Depdends on `plotters-backend` crate`)

This is considered a breaking change and should ship with 0.3
### What is the feature ?

Add methods to `plotters::chart::MeshStyle` for configuring the grid spacing.

### (Optional) Why this feature is useful and how people would use the feature?

Basically it'd be useful for making grids for:

- timestamps, controlling the bold grid for days and light grid for hours, or bold grid for hours and light grid for minutes
- log scales, being able to draw irregularly spaced bold and light grids

### (Optional) Additional Information

Maybe a low level API that takes a function or iterator that controls the grid spacing is a good start.

I think [because of this](https://docs.rs/plotters/0.2.11/src/plotters/chart/mesh.rs.html#362) this isn't possible today, but I suspect more places would need changing.

### What is the feature ?
Use of slice as a discrete coordinate. We can do 
```rust
.build_ranged(["foo", "bar", "baz"], 0..100)
```

### What is the feature ?
Nested coordinate, which means it's a discrete coordinate but for each value, it attached another nested coordinate system on that. 

### (Optional) Why this feature is useful and how people would use the feature ?
While I make the PR for criterion, this idea comes out. Check out the following example for details:

![image](https://user-images.githubusercontent.com/3023614/68893683-e7d39480-06e2-11ea-9607-861f6db95241.png)

Each of the tick mark has a nested coordinate system ranged from -1.0 to +1.0 

### (Optional) Additional Information
Blockers: This would be blocked by this issue #80 . Unless we have a reasonable abstraction on discrete coordinate, this is tricky to accomplish.


- What is the feature ?

Now we just demonstrated it's possible draw plots on console without actually changing the API in [this example](https://github.com/38/plotters/blob/master/examples/console.rs).

But it seems we still needs to tweak something and make it a built-in backend.

- Why do you need the feature ?

Plotting in console may be very interesting for someone who use SSH which doesn't have a easy to access the image.

- What is the use case ? See above

- What is the feature ?

Currently, AreaSeries colors the area from Path/LineSeries to baseline. This is done with Polygon. It would be nice to have two different colors for areas above and below.

- Why do you need the feature ?

This makes some graphs much nicer to read.

- What is the use case ?

Market microstructure visualization

![Screenshot from 2019-10-29 15-55-25](https://user-images.githubusercontent.com/1768528/67804055-967da100-fa64-11e9-96cc-c25ea520fa01.png)


- Additional Information

Color buy volume GREEN.mix(0.1) and sell volume RED.mix(0.1)

We need some default global setting, such as default styles for different things, etc.

Hi,

what do you think about making the log base a parameter?

Cheers
Andy
I noticed that in some cases (when chart is pretty small), lets say secondary coord with relative height 0.15 of main area height, there is situation when no labels are showing up even if there is range of only 0.0...0.1 and we have only 2 (and more) different values (0.05, 0.1). When we have only 1 value its showing correctly, if more nothing...
`.y_labels(5/10)`