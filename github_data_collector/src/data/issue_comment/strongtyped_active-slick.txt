
Hello there.
is there any way that i can change the schema of the table that i am using on a per use.

for example 
```
users.schema = change schema before execution
users.fetchAll()
```

reason behind this is that i have a database that has multiple schemas that are identitcal
```
db
|__> schema1
|    |___> user
|    |___>...
|__>schema2
|    |___> user
|    |___>...
```

To create a 'DAO' class with active-slick, I need to extend a concrete JDBCProfileProfile e.g.

```
class CoffeeRepo extends EntityActions with H2ProfileProvider {...}
```

Is it possible in any way to support multiple DB types e.g. H2 for testing and Postgres for deployment? This is probably a general question for Slick rather than specifically for active-slick, but it's an issue that has troubled me since starting to look at Slick.

First of all: great api! I've spent half day implementing my own generic DAO but then I found yours :).

I have a question on your definition of EntityActions.idLens as defined like this in EntityActions:
def idLens: Lens[Entity, Option[Id]]

Wouldn't it be better to have it rather than this below (without Option)?
def idLens: Lens[Entity, Id]

Looking at your documentation on http://www.strongtyped.io/active-slick/ you use the Coffee example where id is optional. But I think this depends and should not be limited by your API. In your example you have this:

  object CoffeeRepo extends EntityActions with H2ProfileProvider {
...
    type Id = Int // 
...
    val idLens = lens { coffee: Coffee => coffee.id  } // 
                      { (coffee, id) => coffee.copy(id = id) }
...

In my case all my IDs are mandatory and not optional. Now I have to override idLens by this:
  val idLens = lens { entity: Entity => Option(entity.id )} //getter function
                    { (entity, id) => entity.copy(id = id.get)} //setter function

Thanks, Tai

Users often don't see the motivation for `JdbcProfileProvider`. 

A good example in the docs can be the usage of slick-pg and the cake pattern. 

delete and deleteById methods do an effective deletion. We could have a trait to change its behavior (like the OptimisticLocking) that implements logical deletion instead.

Current implementation requires a Id of type Option.
It would be better to let the users choose how they want to represent it.

