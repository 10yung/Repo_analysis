Hi i'm unable to share the C:\ driver although it shows up a password authentication mechanism. Typically we enter the org userid/password . Can you please confirm.

Thanks

PS Here is the error message :ERROR: for jupyter_jupyter_1  Cannot create container for service jupyter: b'Drive sharing failed for an unknown reason'
Cannot auto complete in the `juyter lab`, Unable to use shortcut keys `Tab+Shift`,Version 0.35.6ï¼Œ`Jupyter notebook` no problem.
lgo:
![image](https://user-images.githubusercontent.com/22066360/58789798-8ed6df00-8621-11e9-8e3c-168e03572d78.png)
python3:
![image](https://user-images.githubusercontent.com/22066360/58789900-cf365d00-8621-11e9-9a5e-32f23abb4d63.png)

`@yunabe/lgo_extension`  Click is invalid

![image](https://user-images.githubusercontent.com/22066360/58790627-57693200-8623-11e9-9e31-d7a74368f529.png)


(condaEnv) [root@hzv_content_embedding bin]# lgo kernel
F0423 10:32:17.532773   22023 kernel.go:301] Failed to create a server: Failed to read : open : no such file or directory
goroutine 1 [running]:
github.com/golang/glog.stacks(0xc0004c6000, 0xc0004300d0, 0x7a, 0xcc)
	/data/algorithm/src/github.com/golang/glog/glog.go:769 +0xd6
github.com/golang/glog.(*loggingT).output(0x5556b507eea0, 0xc000000003, 0xc000408370, 0x5556b5077f82, 0x9, 0x12d, 0x0)
	/data/algorithm/src/github.com/golang/glog/glog.go:720 +0x33c
github.com/golang/glog.(*loggingT).printf(0x5556b507eea0, 0xc000000003, 0x5556b4f613b8, 0x1d, 0xc0003dde28, 0x1, 0x1)
	/data/algorithm/src/github.com/golang/glog/glog.go:655 +0x14d
github.com/golang/glog.Fatalf(0x5556b4f613b8, 0x1d, 0xc0003dde28, 0x1, 0x1)
	/data/algorithm/src/github.com/golang/glog/glog.go:1148 +0x69
main.kernelMain(0xc000332108, 0x13, 0xc000334690)
	/data/algorithm/src/github.com/yunabe/lgo/cmd/lgo-internal/kernel.go:301 +0x200
main.main()
	/data/algorithm/src/github.com/yunabe/lgo/cmd/lgo-internal/main.go:206 +0x659
2019/04/23 10:32:17 lgo-internal failed: exit status 255
I install this project with go 1.12.1 on CentOS 7. while `lgo install` , I got a error:
```
2019/03/19 07:54:31 Install lgo to /home/jupyter/.lgopath
2019/03/19 07:54:31 Building libstd.so
2019/03/19 07:54:36 Building lgo core package
2019/03/19 07:54:41 Building third-party packages in $GOPATH
2019/03/19 07:54:41 Installing lgo-internal
# github.com/yunabe/lgo/cmd/lgo-internal
type..MO7lsdMr: missing section for relocation target type..FEeY9FdU
type..MO7lsdMr: reloc 8 (R_CALL) to non-elf symbol type..FEeY9FdU (outer=type..FEeY9FdU) 49 (SABIALIAS)
2019/03/19 07:54:48 Failed to build lgo-internal: exit status 2
```
google provides me no help. Is there something wrong with go 1.12.1?
@yunabe Thanks a lot for this project. I went through the original blog announcement, and was wondering whether any documentation currently discusses the way that this project is made possible, meaning, in terms of how you could take a compiled language, and make it act much like it is interpretable in Jupyter. If I followed correctly, you've not built your own custom interpreter mirroring the language spec / official go compiler, so I assume this project may be utilizing compiler features maybe initially meant for IDE and lately called "language server" development. 

Even if I happen to be so far correct, I am very happy to learn a bit more.

I'm happy to use this for data science together with gonum, if I can only understand a bit more about the architecture choices upfront, to avoid implied limitations an so forth ....

Thanks again for this project, and thanks in advance for your comments!!
We have stabilised the graph API in gonum, so I've taken up trying your graphprac-binder with the following URL https://mybinder.org/v2/gh/yunabe/graphprac-binder/master, however it doesn't build. Failing with (briefly because mybinder doesn't allow raw, copiable text logs to be see)
```
---> Running in 607a579ad9be
# gonum,org/v1/gonum/graph/formats/dot/internal/errors
/go/src/gonum.org/v1/gonum/graph/formats/dot/internal/errors/errors.go:34:11 undefined: strings.Builder
/go/src/gonum.org/v1/gonum/graph/formats/dot/internal/errors/errors.go:55:11 undefined: strings.Builder
```

So presumably the docker image has a <go1.10 standard library. Is there a more recent version?
I'm trying to install `lgo` and get the following error:

```bash
$ go get github.com/yunabe/lgo/cmd/lgo && go get -d github.com/yunabe/lgo/cmd/lgo-internal
$ lgo install

2019/03/09 12:41:38 Install lgo to /home/maxim/go/lgo
2019/03/09 12:41:38 Building libstd.so
# /tmp/go-build820042594/b194/libstd.so
Erratum 835769 found and fixed at "/tmp/go-link-237765660/000025.o", section 50, offset 0x0000113c.
Erratum 835769 found and fixed at "/tmp/go-link-237765660/000025.o", section 50, offset 0x000057c0.
Erratum 835769 found and fixed at "/tmp/go-link-237765660/000025.o", section 50, offset 0x0000fd88.
Erratum 835769 found and fixed at "/tmp/go-link-237765660/000025.o", section 50, offset 0x0000fedc.
Erratum 835769 found and fixed at "/tmp/go-link-237765660/000025.o", section 50, offset 0x0000113c.
Erratum 835769 found and fixed at "/tmp/go-link-237765660/000025.o", section 50, offset 0x000057c0.
Erratum 835769 found and fixed at "/tmp/go-link-237765660/000025.o", section 50, offset 0x0000fd88.
Erratum 835769 found and fixed at "/tmp/go-link-237765660/000025.o", section 50, offset 0x0000fedc.
2019/03/09 12:41:48 Building lgo core package
# /tmp/go-build086705797/b196/libstd.so
Erratum 835769 found and fixed at "/tmp/go-link-530501271/000025.o", section 50, offset 0x0000113c.
Erratum 835769 found and fixed at "/tmp/go-link-530501271/000025.o", section 50, offset 0x000057c0.
Erratum 835769 found and fixed at "/tmp/go-link-530501271/000025.o", section 50, offset 0x0000fd88.
Erratum 835769 found and fixed at "/tmp/go-link-530501271/000025.o", section 50, offset 0x0000fedc.
Erratum 835769 found and fixed at "/tmp/go-link-530501271/000025.o", section 50, offset 0x0000113c.
Erratum 835769 found and fixed at "/tmp/go-link-530501271/000025.o", section 50, offset 0x000057c0.
Erratum 835769 found and fixed at "/tmp/go-link-530501271/000025.o", section 50, offset 0x0000fd88.
Erratum 835769 found and fixed at "/tmp/go-link-530501271/000025.o", section 50, offset 0x0000fedc.
2019/03/09 12:42:02 Building third-party packages in $GOPATH
2019/03/09 12:42:02 Installing lgo-internal
# /tmp/go-build071371341/b214/libstd.so
Erratum 835769 found and fixed at "/tmp/go-link-376813173/000025.o", section 50, offset 0x0000113c.
Erratum 835769 found and fixed at "/tmp/go-link-376813173/000025.o", section 50, offset 0x000057c0.
Erratum 835769 found and fixed at "/tmp/go-link-376813173/000025.o", section 50, offset 0x0000fd88.
Erratum 835769 found and fixed at "/tmp/go-link-376813173/000025.o", section 50, offset 0x0000fedc.
Erratum 835769 found and fixed at "/tmp/go-link-376813173/000025.o", section 50, offset 0x0000113c.
Erratum 835769 found and fixed at "/tmp/go-link-376813173/000025.o", section 50, offset 0x000057c0.
Erratum 835769 found and fixed at "/tmp/go-link-376813173/000025.o", section 50, offset 0x0000fd88.
Erratum 835769 found and fixed at "/tmp/go-link-376813173/000025.o", section 50, offset 0x0000fedc.
# github.com/yunabe/lgo/cmd/lgo-internal
type..MO7lsdMr: reloc 10 (R_CALLARM64) to non-elf symbol type..FEeY9FdU (outer=type..FEeY9FdU) 49 (SABIALIAS)
2019/03/09 12:42:52 Failed to build lgo-internal: exit status 2
```

`go version` output:
```
go version go1.12 linux/arm64
```

`uname -a`:
```
Linux odroidc2 3.16.63-1-ARCH #1 SMP PREEMPT Sat Feb 23 12:06:13 MST 2019 aarch64 GNU/Linux
```

Hello!

Maybe a naive question after my lack of understanding of how a Jupyter cell execution works for a compiled programming language.

Is it possible to optimise each command execution, in avoid calling `go install` when there is no import in the executed cell? 

(this would provide as well a workaround for the issue of slowness in go versions > 1.9).
```
F0227 22:36:51.068979   18784 gojupyterscaffold.go:181] Failed to echo heartbeat request: interrupted system call
goroutine 7 [running]:
github.com/golang/glog.stacks(0xc4203b6e00, 0xc4204980a0, 0x72, 0x9d)
	/home/yunabe/local/gocode/src/github.com/golang/glog/glog.go:769 +0xd1
github.com/golang/glog.(*loggingT).output(0x86a0a0, 0xc400000003, 0xc4204162c0, 0x85fe9a, 0x14, 0xb5, 0x0)
	/home/yunabe/local/gocode/src/github.com/golang/glog/glog.go:720 +0x358
github.com/golang/glog.(*loggingT).printDepth(0x86a0a0, 0x3, 0x2, 0xc420363ef8, 0x1, 0x1)
	/home/yunabe/local/gocode/src/github.com/golang/glog/glog.go:646 +0x12c
github.com/golang/glog.FatalDepth(0x2, 0xc420363ef8, 0x1, 0x1)
	/home/yunabe/local/gocode/src/github.com/golang/glog/glog.go:1134 +0x5f
main.(*glogLogger).Fatal(0x7f935a3b1638, 0xc4203d2080, 0x39)
	/home/yunabe/local/gocode/src/github.com/yunabe/lgo/cmd/lgo-internal/kernel.go:291 +0xa0
github.com/yunabe/lgo/jupyter/gojupyterscaffold.loggerWrapper.Fatalf(0x8667a0, 0x7f935a3b1638, 0x58c621, 0x24, 0xc420363fa8, 0x1, 0x1)
	/home/yunabe/local/gocode/src/github.com/yunabe/lgo/jupyter/gojupyterscaffold/logger.go:51 +0x7d
github.com/yunabe/lgo/jupyter/gojupyterscaffold.(*Server).Loop.func1(0xc4203a8180)
	/home/yunabe/local/gocode/src/github.com/yunabe/lgo/jupyter/gojupyterscaffold/gojupyterscaffold.go:181 +0x131
created by github.com/yunabe/lgo/jupyter/gojupyterscaffold.(*Server).Loop
	/home/yunabe/local/gocode/src/github.com/yunabe/lgo/jupyter/gojupyterscaffold/gojupyterscaffold.go:178 +0x56
```
I need to install lgo on the whole system.

Therefore I set `$GOPATH` to `/usr/local/go` during installation, and `$LGOPATH` to `/usr/local/lgo`.

I set the right permissions for my user in `$LGOPATH`.

When the user try to execute `lgo run` with a composite `$GOPATH` (like `$HOME/go:/usr/local/go`, currently `/home/jovyan/go:/usr/local/go`), here's what happen:

```
>>> import "fmt"
can't load package: package github.com/yunabe/lgo/sess7b2274696d65223a313533363235363333373931303835323634357d/exec1: cannot find package "github.com/yunabe/lgo/sess7b2274696d65223a313533363235363333373931303835323634357d/exec1" in any of:
	/usr/lib/go-1.10/src/github.com/yunabe/lgo/sess7b2274696d65223a313533363235363333373931303835323634357d/exec1 (from $GOROOT)
	/home/jovyan/go/src/github.com/yunabe/lgo/sess7b2274696d65223a313533363235363333373931303835323634357d/exec1 (from $GOPATH)
	/usr/local/go/src/github.com/yunabe/lgo/sess7b2274696d65223a313533363235363333373931303835323634357d/exec1
E0906 17:52:22.197192    2650 main.go:153] Failed to build a shared library of github.com/yunabe/lgo/sess7b2274696d65223a313533363235363333373931303835323634357d/exec1: exit status 1
```

When I change the `$GOPATH` to `/usr/local/go` without colons, everything works again.

It's a bit annoying since my home is a Docker volume and `/usr/local/go` is what was setup during the docker build.

Would there be a way to keep both paths with `lgo`?