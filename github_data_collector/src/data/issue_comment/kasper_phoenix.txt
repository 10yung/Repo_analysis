- Version: 2.6.2
- macOS: 10.15.1

In the following code, `setFrame()` happens before `show()` even though it is written after.
```
Modal.build({
    duration: 1,
    animationDuration: 0,
    origin: function (mFrame) {return {x:0, y:0};},
    text: 'Some Text'
}).show();
Window.focused().setFrame(...);
```
It might not be so obvious because `setFrame` occurs so quickly. But I have an `animate` function that calls `setFrame` in quick succession using a series of intermediate frames. It's more apparent in that situation: `show` executes after all the `setFrame`s.
```
Modal.build(...).show();
animateSetFrame(...);

function animateSetFrame(window, origFrame, destFrame) {
    ... // a set loop of window.setFrame()
}
```
Interestingly, if I wrap setFrame in a zero-delay Timer, `show()` will fire before setFrame.
```
Modal.build(...).show();
new Timer(0, false, () => Window.focused().setFrame(...)); // or using animateSetFrame()
```

I don't mind refactoring my code and functions to account for the necessary Timers, but it will just make my code a lot less readable and easy to understand. I'm also wondering if I'm using the API incorrectly somehow, leading to these effects. In addition, the same things happen when I assign the `Modal` or `Timer` to a variable.
Am I able to launch Chrome, for example, holding `Fn+C`?

- Version: <latest>
- macOS: 10.14.6

I'm interested in getting environment variables - or at the very least the user's home directory - from within Phoenix. Could an implementation of node.js's `process.env` be added? I've had a look at #180 but I feel like there should be a better way considering the convention among APIs I've seen is to get the environment variables as they were when the program started.
- Version 2.6.2 (71)
- macOS: 10.14.5 (18F132)

The modal text is grey now. Could Modal support colored text?

expected:

```
Modal.build({
...
    text: 'Some <span color="red" size="10px">text</span> here.'
...
```

- Version: 2.6.2
- macOS: 10.15 Beta (19A487m) (Catalina)

<img width="532" alt="Screenshot 2019-06-25 at 09 57 17" src="https://user-images.githubusercontent.com/392513/60084560-aa6c6b80-972f-11e9-8916-0bde0329b89b.png">

I know macos 10.15 is in beta :-)

---
**Update:** I built the app from source and it works fine!
- Version: 2.6.2 (71)
- macOS: 10.14.4 (18E226)

Phoenix binds to a key press, ignoring the modifiers I pass, meaning pressing the key on its own (such as when trying to type this message) triggers my callback.

I'm using the following code:
```js
Key.on('p', ['command', 'control'], function () {
  Phoenix.notify('Hello there!');
});
```

Edit:
This code also behaves the same as above, binding to just the `p` alone:
```js
let keyHandler = new Key('p', ['command', 'control'], function () {
  Phoenix.notify('Hello there!');
});
```

---

I've worked it out at last, but there's nothing in `Console.app` to tell me what's going wrong, and [the docs] are unclear, stating:

> Modifiers: command (cmd), option (alt), control (ctrl) and shift (case insensitive)

I read this to mean both `command` and `cmd` are valid, when it appears that _only_ `cmd` is valid. I would expect invalid modifiers to throw an error, or for Phoenix to accept both `command` and `cmd` as modifiers.

[the docs]: https://github.com/kasper/phoenix/blob/master/docs/API.md#1-keys



Hey, I just got some general questions:

I'm interested in writing my own window manager in JavaScript. I'd like to be able to use phoenix as a library from a nodejs/electron context, as opposed to my code being evaluated from within phoenix. Something like this:

```js
const { Window } = require('phoenix');

const screen = Screen.main().flippedVisibleFrame();
const window = Window.focused();

if (window) {
  window.setTopLeft({
    x: screen.x + (screen.width / 2) - (window.frame().width / 2),
    y: screen.y + (screen.height / 2) - (window.frame().height / 2)
  });
}
```

Are there any plans to make phoenix available as an npm package like that?
This PR is adding popover for âŒ˜+click on window zoom button. 
![popover](https://user-images.githubusercontent.com/134304/51522358-d6f32300-1e31-11e9-97eb-d2622f54e491.png)
Buttons on popover would control window size mostly 1/2 of screen in 4 directions.

My initial idea was adding JS API to create that buttons but I decided to start with smaller steps. Also I'm not sure how fit such feature is for this project. 
Anyway, here's the list of potential improvements that I have or something that can be turned into must have:

- Align popover with window: make popover left edge of popover to match window left edge, just small visual improvement
- ~~Option to control should it focus/bring to front window on size change. Popover is not part of application it's directed to so target window is not activated on popover action.~~
- ~~Add option to control modifier key, right now it's hard coded to be command key, but I see use cases to remove any modifiers at all~~
- Develop JS API to manage popover icons

Last but not the least, I was thinking on turning `PHPopover` into singleton but I'm hesitating how much utility it'll have. 
 
Ever since upgrading to the latest MacOS, the modals have been appearing with 50% rounded corners, appearing as awkward ovals. 

![screen shot 2018-11-28 at 09 21 39](https://user-images.githubusercontent.com/12052767/49157986-1fd5a200-f2ef-11e8-9eee-9c87f7caf7f0.png)

I've looked around in the Wiki for some option to control the modal's appearance, but there doesn't seem to be any options for configuring the rounded corners. 

- Version: 2.6.2
- macOS: 10.14.1

Hey @kasper,

Is there a way to do that? I miss the [Stay in Front](https://stackoverflow.com/questions/46562995/xcode-9-1-simulator-stay-in-front-button-missing) feature of the iOS simulator, and I would love to recreate it with `Phoenix`.