In versions higher than 13.0.0, SocketIOStatus is always connecting after Object-C uses a custom namespace
according to the document https://socket.io/docs/client-api/#Event-%E2%80%98pong%E2%80%99, I expect the data in the following code should be the latency.

```
socket.on(clientEvent: .pong) { (data, _) in
    print("pong \(data)")
}
```

but I got the result:

```
pong []
```

does swift client support the latency information?

the socket.io-client-swift version is `15.1.0`
2020-01-07 17:54:27.618635+0800 yunbaolive[6978:1650011] [] nw_socket_handle_socket_event [C31.1:1] Socket SO_ERROR [61: Connection refused]
2020-01-07 17:54:27.619421+0800 yunbaolive[6978:1650166] [] nw_connection_get_connected_socket [C31] Client called nw_connection_get_connected_socket on unconnected nw_connection
2020-01-07 17:54:27.619502+0800 yunbaolive[6978:1650166] TCP Conn 0x282632880 Failed : error 0:61 [61]

my code:
` socketmanager = [[SocketManager alloc] initWithSocketURL:url config:@{@"log": @NO,@"compress":@YES,@"forceWebsockets":@YES,@"forcePolling":@YES,@"forceNew":@YES}];
    _ChatSocket = socketmanager.defaultSocket;
NSArray *cur = @[@{//@"username":[Config getOwnNicename],
                       @"uid":[Config getOwnID],
                       @"token":[Config getOwnToken],
                       @"liveuid":[dic valueForKey:@"uid"],
                       @"roomnum":[dic valueForKey:@"uid"],
                       @"stream":[dic valueForKey:@"stream"],
                       }];
    [_ChatSocket connect];
    [_ChatSocket on:@"connect" callback:^(NSArray* data, SocketAckEmitter* ack) {
        NSLog(@"socket connected");
        [_ChatSocket emit:@"conn" with:cur];
    }];
    [_ChatSocket on:@"disconnect" callback:^(NSArray* data, SocketAckEmitter* ack) {
        NSLog(@"socket.io disconnect---%@",data);
    }];
    [_ChatSocket on:@"error" callback:^(NSArray* data, SocketAckEmitter* ack) {
        NSLog(@"socket.io error -- %@",data);
    }];
    [_ChatSocket on:@"conn" callback:^(NSArray* data, SocketAckEmitter* ack) {
        NSLog(@"进入房间");
        [weakself getZombie];
        
        //第一次进入 扣费 ，广播其他人增加映票
        if ([_livetype isEqual:@"3"] || [_livetype isEqual:@"2"]) {
            //第一次进入 扣费 ，广播其他人增加映票
            if (justonce == 0) {
                [self addvotes:type_val isfirst:@"1"];
            }
        }
        
    }];`
what can I do? thanks.


**server version is 1.7.17

android use 0.8.3 has no error when disconnect

so which swift client version should be use to solve this issue?**

the server exception details:
java.lang.IllegalStateException: null
	at com.corundumstudio.socketio.protocol.PacketType.valueOf(PacketType.java:48) ~[netty-socketio-1.7.17.jar!/:?]
	at com.corundumstudio.socketio.protocol.PacketDecoder.readType(PacketDecoder.java:86) ~[netty-socketio-1.7.17.jar!/:?]
	at com.corundumstudio.socketio.protocol.PacketDecoder.decode(PacketDecoder.java:160) ~[netty-socketio-1.7.17.jar!/:?]
	at com.corundumstudio.socketio.protocol.PacketDecoder.decodePackets(PacketDecoder.java:142) ~[netty-socketio-1.7.17.jar!/:?]
	at com.corundumstudio.socketio.handler.InPacketHandler.channelRead0(InPacketHandler.java:65) ~[netty-socketio-1.7.17.jar!/:?]
	at com.corundumstudio.socketio.handler.InPacketHandler.channelRead0(InPacketHandler.java:36) ~[netty-socketio-1.7.17.jar!/:?]
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) ~[netty-transport-4.1.39.Final.jar!/:4.1.39.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) ~[netty-transport-4.1.39.Final.jar!/:4.1.39.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) ~[netty-transport-4.1.39.Final.jar!/:4.1.39.Final]
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352) ~[netty-transport-4.1.39.Final.jar!/:4.1.39.Final]
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:306) ~[netty-codec-4.1.39.Final.jar!/:4.1.39.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) ~[netty-transport-4.1.39.Final.jar!/:4.1.39.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) ~[netty-transport-4.1.39.Final.jar!/:4.1.39.Final]
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352) ~[netty-transport-4.1.39.Final.jar!/:4.1.39.Final]
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1421) ~[netty-transport-4.1.39.Final.jar!/:4.1.39.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) ~[netty-transport-4.1.39.Final.jar!/:4.1.39.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360) ~[netty-transport-4.1.39.Final.jar!/:4.1.39.Final]
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930) ~[netty-transport-4.1.39.Final.jar!/:4.1.39.Final]
	at com.corundumstudio.socketio.transport.WebSocketTransport.channelRead(WebSocketTransport.java:95) ~[netty-socketio-1.7.17.jar!/:?]
Can give Protobuf Demo?
I am experiencing many crashes similar to https://github.com/daltoniam/Starscream/issues/588 in my app. The Starscream maintainers claim in this issue that the crash is fixed due to their rewrite and release of version 4.0.0 (https://github.com/daltoniam/Starscream/pull/653).

This major release is incompatible with the current implementation of `socket.io-client-swift` and will require changes to this library. Additionally,  the new version of Starscream is incompatible with Objective-C.

Is there a desire from `socket.io-client-swift` to upgrade Starscream to 4.0.0? 
I am facing same issue, could you any one can help that issue
Socket push data is incomplete. I don't know whether it's a server problem or a client problem. It cause crash  when parsing. Please tell me how to solve it, Thank you!

Crash function : 
<img width="1599" alt="WeChat98b45eb1e87f2a07fe943b618926deff" src="https://user-images.githubusercontent.com/12163464/69856504-c66cce00-12c8-11ea-8870-f6f40731d873.png">

json data 446:42/gj,[\"joinInit\",{\"data\":{\"average\":\"2384\",\"last\":\"2376\",\"chgInterest\":\"-4\",\"contract\":\"WHMONTH01\",\"settle\":\"2384\",\"bid1p\":\"2375\",\"lowest\":\"2376\",\"percent\":\"-0.13%\",\"volume\":\"10\",\"preInterest\":\"232\",\"ask1v\":\"1\",\"loLimit\":\"2212\",\"preClose\":\"2376\",\"ask1p\":\"2390\",\"bid1v\":\"1\",\"highest\":\"2390\",\"interest\":\"228\",\"tickAt\":\"2019-11-29 14:59:42.000\",\"upLimit\":\"2"

The JSON data seems incomplete! It cause crash  when parsing. 


Lib version 15.2.0.

My use case is following:
```
manager = SocketManager(socketURL: myURL)
manager.connect()
.... upon connecting
print(manager.status) ///.connected
.... in about 5 seconds
manager.defaultSocket.emit("event", data)
```

I receive the following message in the log:
`"Tried emitting when not connected"`

Upon further debugging I noticed:
- default `SocketIOClient` has status `.notConnected`.
- this status is set by `SocketManager` in `private func _engineDidOpen(reason: String)`
- line 352 is where default socket is accessed
```
nsps["/"]?.didConnect(toNamespace: "/")
```

In my usecase `nsps["/"]` is nil. 
I believe it should have been
```
socket(forNamespace: "/").didConnect(toNamespace: "/")
```

As a workaround I just access default socket manually before executing `manager.connect()`
This seems to be doing the trick.

Let me know if I misused an API and what's the correct way of connecting to the socket?
If it's a bug I can submit a pull request.

Thanks,
Vlad
Dear development team:
Socket cannot be connected with the latest version, and all callback methods cannot be executed (success callback and failure callback cannot be monitored)
This question is very urgent. Please reply as soon as possible. Thank you very much