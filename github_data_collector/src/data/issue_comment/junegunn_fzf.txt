<!-- ISSUES NOT FOLLOWING THIS TEMPLATE WILL BE CLOSED AND DELETED -->

<!-- Check all that apply [x] -->

- [x] I have read through the manual page (`man fzf`)
- [x] I have the latest version of fzf
- [x] I have searched through the existing issues

## Info

- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish
    
## Problem / Steps to reproduce

1. Pipe in `rg --files | fzf` => Works fine.
2. set/export `FZF_DEFAULT_COMMAND='rg --files'` => Error
![image](https://user-images.githubusercontent.com/2559043/72667681-035d6300-39e4-11ea-8211-c9ced88f8682.png)

```console
(✓) 11:17:08 [~]
$ cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=18.04
DISTRIB_CODENAME=bionic
DISTRIB_DESCRIPTION="Pop!_OS 18.04 LTS"
(✓) 11:17:42 [~]
$ uname -a
Linux p5520 5.3.0-7625-generic #27~1576774585~18.04~c7868f8-Ubuntu SMP Thu Dec 19 20:37:47 UTC  x86_64 x86_64 x86_64 GNU/Linux
```


- [x] I have read through the manual page (`man fzf`)
- [x] I have the latest version of fzf
- [x] I have searched through the existing issues

## Info

- OS
    - [x] Linux
- Shell
    - [x] bash
    - [x] zsh
    
## Problem / Steps to reproduce

Does anyone have an ansible task to share for installing and configuring fzf?

I found that the apt package (for debian) does not work well, so it's not straightforward. So when installing fzf I need to use the git installation approach.

Also, fzf automatically modifies bashrx/zshrc and when using ansible this needs to be more carefully (or manually) controlled.

Any sample tasks appreciated.
- [x] I have read through the manual page (`man fzf`)
- [x] I have the latest version of fzf
- [x] I have searched through the existing issues

## Info

- OS
    - [x] Linux
- Shell
    - [x] bash
    - [x] zsh
    
## Problem / Steps to reproduce

I choose an option in a list (up and down keys), and then want to select it using the "small" enter key (the one on the right hand side of the keyboard, in the numeric keypad part).

But it doesn't do anything. I need to press the big/main enter key.

Unsure how to diagnose or fix this problem.
<!-- ISSUES NOT FOLLOWING THIS TEMPLATE WILL BE CLOSED AND DELETED -->

<!-- Check all that apply [x] -->

- [x] I have read through the manual page (`man fzf`)
- [x] I have the latest version of fzf
- [x] I have searched through the existing issues

## Info

- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [x] fish
    
## Problem / Steps to reproduce

Am using WSL2 running Ubuntu. After setting up fzf in fish and making sure it worked, the next instance after I reboot win10 (not shutting down WSL) fzf ceased to be recognised as a valid plugin.

I will then need to re-do ~/.fzf/install during which "Update fish_user_paths ... Failed". Screenshot below if it is of any help

![image](https://user-images.githubusercontent.com/47493375/72613066-84c3df80-3969-11ea-92e2-1b5402a491bc.png)

<!-- ISSUES NOT FOLLOWING THIS TEMPLATE WILL BE CLOSED AND DELETED -->

<!-- Check all that apply [x] -->

- [x] I have read through the manual page (`man fzf`)
- [x] I have the latest version of fzf
- [x] I have searched through the existing issues

## Info

- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Etc.
- Shell
    - [x] bash
    - [x] zsh
    - [ ] fish
    
## Problem / Steps to reproduce

Current implementation of fzf with vim will stretch current buffer above. How to keep the buffer that used with fzf separated or don't impact current/any buffer?

There's `clap.vim` but I don't like the way of `clap.vim` -- use much more resources and appear in center of screen.

I like the way fzf appear at the bottom and has less distraction compare to `clap.vim`.

The stretch issue with fzf+vim also cause distraction and not clean but more acceptable than `clap.vim` way.
This is a first pass at #1497, and will require some additional ideas/help (I am willing to provide).

The idea here is to allow targeting 18.04 for conservative farts like me. The snap model is also pretty neat.

Right now this is published under an intentionally `unofficial` name while I continue to sort out permissions and plugins locally. 

But there is another option available.  We can [request to publish this snap under classic confinement](https://forum.snapcraft.io/t/process-for-reviewing-classic-confinement-snaps/1460).  This is a much easier thing to do than piece together the necessary plugs one at a time and asking for auto-connect permissions but it isn't necessarily clear to me if `fzf` would qualify given the link above.  But right now `ripgrep` has `--classic` so I'm thinking it is achievable for `fzf` given a well-reasoned case.

Left to do (assuming there is no consensus around just going the `--classic` route):
- [ ] Identify additional plugs/permissions for `fzf` to work as intended
- [ ] have @junegunn reserve the `fzf` name on snapcraft
- [ ] publish edge release under official snapcraft name
- [ ] Request automatic connections to identified plugs (ideal user experience, imo no point to publication if users must create manual connections *after* installation).
- [ ] (probably) update CI to automatically publish snaps on release
- [ ] Publish first stable snap!

Thanks for an awesome tool @junegunn and contributors!
<!-- ISSUES NOT FOLLOWING THIS TEMPLATE WILL BE CLOSED AND DELETED -->

<!-- Check all that apply [x] -->

- [x] I have read through the manual page (`man fzf`)
- [x] I have the latest version of fzf
- [x] I have searched through the existing issues

## Info

- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish
    
## Problem / Steps to reproduce

1. Install fzf and bash integration
2. Type `vim **<TAB>`
3. No fuzzy completion, for me it just expands to the alphabetically first file in the current directory

On the other hand, it seems to be working for ssh, for instance.
Hello,

     I'm using Vim8.2 on Windows 10. I want to do some setting on _vimrc like below:

" -------------------------------------------- begin -------------------------------------
if has('win32')
    Plug 'junegunn/fzf', { 'dir': '$HOME/.fzf', 'do': './install.bat --all' }
else
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
endif
"-----------------------------------------------end ---------------------------------------

      It is recommend there is one file maybe call it "install.bat", which function is just like "install", can be released from the git respository. 
- [x] I have read through the manual page (`man fzf`)
- [x] I have the latest version of fzf
- [X] I have searched through the existing issues

## Info

- Versions
    - fzf 0.20.0
    - nvim 0.4.3
- OS
    - [x] Linux
    - [x] Mac OS X
- Shell
    - [x] bash
    - [x] zsh
    - [x] fish
    
## Problem / Steps to reproduce

So basically on both my machines (Linux and MacOS) using Fish on my mac and zsh on my linux neovim (not vim) shows this `#89b482' '--multi' '--prompt' '~/' --expect=ctrl-v,ctrl-x,ctrl-t --no-height > /var/folders/gh/63h_dqcs2n707qw4ps4j787m0000gn/T/nvimvtRckP/1;#FZF` upon excuting `:FZF` i don't know what causes it and it only happens in neovim (even with no plugins or setting changes applied)

## Interesting Find

After fiddling around a bit more i find that the issue seems to go if use vim plug to install fzf instead of 

```vim
set rtp+=/usr/local/opt/fzf
```

which works in vim but not in neovim, in neovim i had to use instead, kinda weird though

```vim
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
```
fix #1637 

## STEPS
```
SHELL=kaka go run .  --preview 'cat {}'
```

## BEFORE:
[preview window is empty]

## AFTER
Preview window:
```
 exec: "kaka": executable file not found in $PATH
```

## Other Testing
test suite pass
```
 make test > /dev/null && echo $?                                   
0
```

### Test existing behavior with return code ~= 0
```
  138   go run .  --preview 'cat {} |grep fzf'
  149   go run .  --preview 'cat {} |grep -v fzf'
  152   go run .  --preview 'cat {} |grep -v fzf'
```