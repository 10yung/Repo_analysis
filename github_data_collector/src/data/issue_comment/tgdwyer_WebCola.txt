`Group` padding is not needed to be set as it is defaulted to 1, however the typescript type makes it required, which is not necessary.

See https://github.com/tgdwyer/WebCola/blob/master/WebCola/src/layout.ts#L235 for where it is defaulted.
Hi

I use WebCola with typescript
we have theese type definitions for Group 
``` 
export interface Group {
    bounds?: Rectangle;
    leaves?: Node[];
    groups?: Group[];
    padding: number;
}
```
but when calling 
```
cola.d3adaptor(d3).nodes(groups)
```
here we should pass leaves as``` number[] ``` of nodes indexes.
If we pass leaves as array of nodes ``` Node[]``` - nothing works properly then
hi,

in the results I get from cola.js it seems like the unconnected nodes could be more neatly packed into the space (images below). Does anyone have any advice about this?

![Screenshot from 2019-11-19 09-13-52](https://user-images.githubusercontent.com/977607/69134840-0c978580-0ab0-11ea-9970-daed0fc76fcd.png)

I'm using the groups function and something similar seems to happen - it seems like some members of the group could be pulled together more:

![Screenshot from 2019-11-19 09-26-21](https://user-images.githubusercontent.com/977607/69135050-5f713d00-0ab0-11ea-8272-2e53d5e14f7e.png)

If you think it should behave differently then there is probably a bug in my code for rendering it.

Any other comments based on what you see appreciated,
thanks,
colin 

Bumps [mixin-deep](https://github.com/jonschlinkert/mixin-deep) from 1.3.1 to 1.3.2.
<details>
<summary>Commits</summary>

- [`754f0c2`](https://github.com/jonschlinkert/mixin-deep/commit/754f0c20e1bc13ea5a21a64fbc7d6ba5f7b359b9) 1.3.2
- [`90ee1fa`](https://github.com/jonschlinkert/mixin-deep/commit/90ee1fab375fccfd9b926df718243339b4976d50) ensure keys are valid when mixing in values
- See full diff in [compare view](https://github.com/jonschlinkert/mixin-deep/compare/1.3.1...1.3.2)
</details>
<details>
<summary>Maintainer changes</summary>

This version was pushed to npm by [doowb](https://www.npmjs.com/~doowb), a new releaser for mixin-deep since your current version.
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=mixin-deep&package-manager=npm_and_yarn&previous-version=1.3.1&new-version=1.3.2)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/tgdwyer/WebCola/network/alerts).

</details>
If some rectangles share the same top/left coordinates (exemple):   

    let r = new Array(4);
    r[0] = new cola.Rectangle(0,179,0,24);
    r[1] = new cola.Rectangle(394,574,26,50);
    r[2] = new cola.Rectangle(394,595,263,287);
    r[3] = new cola.Rectangle(394,580,263,287);

then `removeOverlaps` returns exactly the same rects but:

    r[3] = new cola.Rectangle(393,580,262,287);

works correctly. To make it work, I add a small random value to top and left coordinates
- I used the triple ticks `` ``` `` in the HTML code part so the code has syntax highlighting

- I removed the first link to Github as it's a dead link

- I replaced the second link with a jsDelivr link. GitHub serves files with a `Content-Type` header set to `text/plain`, which can cause errors. Also, jsDelivr is way faster because it's designed to serve that kind of file.

### Before
![image](https://user-images.githubusercontent.com/17952318/66479733-5e0a2900-ea9d-11e9-995c-6208403fc481.png)

### After
![image](https://user-images.githubusercontent.com/17952318/66479700-52b6fd80-ea9d-11e9-9117-456564dc1744.png)

I am using the d3-cola adapter as drop-in replacement for the d3 force directed graph. It is working very well (thanks for this nice project!), except the performance for large graphs. The graph loads and moves slowly, and the CPU load is very high.

With the original D3 simulation, I could ameliorate this problem by putting a counter in the ticked() function and only updating the animation every n ticks. However, this does not help with cola. it seems there is already a heavy CPU load outside the ticks. Any ideas on how to boost performance for large graphs?
WebCola has UMD builds, which is great! This adds `unpkg` and `jsdelivr` fields, so that tools like d3-require and requirejs can easily require these builds - this means that if you depend on `https://unpkg.com/webcola@3`, you'll depend on the UMD build, instead of being redirected to the CommonJS `index.js` file.
I'd like to use webcola as a layout engine only. How do I initialize the coordinates (e.g. from db) and then update them (e.g. on some outside button press or on drag without d3). 
Hey, I have this snippet 
```
private getConstraints(): WebcolaConstraints[] {
    const mainPath = this.pickPathIdentifier(this.paths[0]);
    return [
      {
        type: 'alignment',
        axis: 'x',
        offsets: this.identifiers.map((identifier, index) => ({
          node: index,
          offset: mainPath.indexOf(String(identifier)) !== -1 ? 0 : 150
        }))
      }
    ]
  }
```

and I have output like this
```
[
    {
        type: 'alignment',
        axis: 'x',
        offset: 150
    },
    {
        type: 'alignment',
        axis: 'x',
        offset: 0
    }
   {
        type: 'alignment',
        axis: 'x',
        offset: 0
    }
]
```

The problem is that second and third item are correctly in center but first should be moved to right and it's not. Right after start rendering `cola` changes structure and assigns default offsets to the first node