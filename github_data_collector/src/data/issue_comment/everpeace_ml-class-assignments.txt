Guys request your help!!

Instead of using the code mentioned in code section :

   **p=sigmoid(X*theta)>=0.5;**

which is running perfectly fine. Im using my logic :
 
  **z=sigmoid(X*theta);
  if z>=0.5:
      p=1;
  else
      p=0;
  endif**

The above code is not running.

Please let me know the difference and is there any error in my logic.

Hi,
I am wondering how to derive the logic for prediction 

p = sigmoid(X*theta)>=0.5;

is there any standard formula?
Hello, why is the grid range defined as such? 
https://github.com/everpeace/ml-class-assignments/blob/master/ex2.Logistic_Regression/mlclass-ex2/plotDecisionBoundary.m#L29-L31
J =  (1/2) * sum(sum((R .* ((Theta * X')' ) - Y).^2)) + (lambda/2) * sum(sum(Theta.^2)) + (lambda/2) * sum(sum(X.^2)); 

X_grad = (R .* ((Theta * X')' ) - Y) * Theta + (lambda * X );
Theta_grad = (R .* ((Theta * X')' ) - Y)' * X + (lambda * Theta);
Should be 
J = sum(sum((diff.^2).*(R==1)))/2;
in lieu of
J = sum((diff.^2)(R==1))/2;
Hello! I think that line should be:

> sigma3=a3-Y;

Instead of, ".-" is not supported in matlab:
https://github.com/everpeace/ml-class-assignments/blob/4dbb6e91b2268d83e09885903529486c117f07a0/ex4.Neural_Network_Learning/mlclass-ex4/nnCostFunction.m#L87
Pardon me for asking a trivial question.

Can you help me on calculating the decision boundary line. How it has been "plot_y = (-1./theta(3)).*(theta(2).*plot_x + theta(1));"