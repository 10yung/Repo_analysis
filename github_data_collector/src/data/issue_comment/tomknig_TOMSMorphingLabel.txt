I need to change font but I see an old font in animations.
I fixed it, but can't create pull request.

```
-(void) setFont: (UIFont*)font
{
    [super setFont: font];

    @synchronized(self)
    {
        for (NSMutableDictionary* attributionStage in self.attributionStages)
        {
            UIFont* prevFont = attributionStage[NSFontAttributeName];
            attributionStage[NSFontAttributeName] = [UIFont fontWithName: font.fontName
                                                                    size: prevFont.pointSize];
        }
    }
}
```

Over the last days, I have tried to port this class to OS X. 
The problem is that CADisplayLink is not available on OS X. Its counterpart, CVDisplayLink should work, but I was not able to get to a working solution.

Fix for Issue #19 

Hi,

thanks for your awesome controller.

There is a bug issue when you write emoji. The layout becomes really messy.

Any clue ?

I would love to see UIButton's label support the morphing effect! Great job btw!

I was getting a range exception on longer strings. I fixed it by adding checks for range in the main class and its string category

```
//tomsmorphinglabel Line 342

            if (range.location + range.length < aString.length) {


                NSString *character = [aString substringWithRange:range];
                CGSize characterSize = CGSizeZero;

                if (floor(NSFoundationVersionNumber) <= NSFoundationVersionNumber_iOS_6_1) {
    #ifdef PRECISE_FONT_METRICS
    #define CFAutomatedReferenceCount(CFAnyTypeRef, typeRef, CFCreateOrCopyFunction) CFAnyTypeRef typeRef = ((__bridge CFAnyTypeRef)CFBridgingRelease(CFCreateOrCopyFunction))
                    @autoreleasepool {
                        UIFont *font = attributionStage[NSFontAttributeName];
                        CFAutomatedReferenceCount(CTFontRef, fontRef, CTFontCreateWithName((__bridge CFStringRef)font.fontName, font.pointSize, NULL));
                        CFAutomatedReferenceCount(CFAttributedStringRef, attributed, CFAttributedStringCreate(NULL, (__bridge CFStringRef)character, (__bridge CFDictionaryRef)@{(id)kCTFontAttributeName : (__bridge id)fontRef}));
                        CFAutomatedReferenceCount(CTFramesetterRef, framesetter, CTFramesetterCreateWithAttributedString(attributed));
                        CFAutomatedReferenceCount(CGPathRef, path, CGPathCreateWithRect(CGRectInfinite, NULL));
                        CFAutomatedReferenceCount(CTFrameRef, frame, CTFramesetterCreateFrame(framesetter, CFRangeMake(0, CFAttributedStringGetLength(attributed)), path, NULL));
                        NSArray *lines = (id)CTFrameGetLines(frame);
                        characterSize = CTLineGetBoundsWithOptions((__bridge CTLineRef)[lines firstObject], 0).size;
                    }
    #undef CFAutomatedReferenceCount
    #else
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wdeprecated-declarations"
                    /* Quick and dirty font metrics */
                    characterSize = [character sizeWithFont:attributionStage[NSFontAttributeName]];
    #pragma clang diagnostic pop
    #endif
                }
                else {

                    characterSize = [character sizeWithAttributes:@{NSFontAttributeName: attributionStage[NSFontAttributeName]}];
                }

                attributionStage[NSKernAttributeName] = [NSNumber numberWithFloat:(-kernFactor * characterSize.width)];

                [attributedText setAttributes:attributionStage
                                        range:range];

            }

            else

            {

                //out of range

            }
```

```
//nsstring+morphing line 44
NSInteger e = endLocation - startLocation;

                    if (startLocation + e < string.length) {
                        NSRange  r = NSMakeRange(startLocation, e);

                        [mergeString appendString:[string substringWithRange:r]];
                    }
                    else
                    {
                        //out of range
                    }
```

I want to self-size cells in my collection view, so I need a means of updating the cell's constraints based on the content. The content in this case is a `TOMSMorphingLabel`.

It appears to report a size of `{0, 0}` regardless of what text is set onto it.

This is surprising, considering it is just a UILabel subclass, right.

My UILabel uses attributed text so that I can have a variable number followed by a lower case letter (e.g. 324g). Anyway, your pod is exactly what i was looking for, but it is not working with my attributed text. I'm wondering if there is an easy way to implement this of if not consider this a feature request. Thanks for your work on this pod, it is a very slick and subtle effect!
