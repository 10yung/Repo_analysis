I've just followed the steps in your script to calculate top of atmosphere reflection (toar_planetscope.ipynb). It's really easy to follow. Thank you for providing this!

I think I've found a typo and figured I'd make you aware of it.
In [6] is the section where you set the characteristics of the output file to unint16. Then you rescale the reflectance bands from float so that they can be saved as unint16. 
However, in the call to save the raster file, you define the reflectance file and not the rescaled file as output file. 
If I understand this correctly, this would try to save the float values as unint16, resulting in an output file that has pretty much only 0 values.

I believe the section
with rasterio.open('data/reflectance.tif', 'w', **kwargs) as dst:
        dst.write_band(1, band_blue_reflectance.astype(rasterio.uint16))
        dst.write_band(2, band_green_reflectance.astype(rasterio.uint16))
        dst.write_band(3, band_red_reflectance.astype(rasterio.uint16))
        dst.write_band(4, band_nir_reflectance.astype(rasterio.uint16))

would have to be changed into:
 
with rasterio.open('data/reflectance.tif', 'w', **kwargs) as dst:
        dst.write_band(1, blue_ref_scaled.astype(rasterio.uint16))
        dst.write_band(2, green_ref_scaled .astype(rasterio.uint16))
        dst.write_band(3, red_ref_scaled .astype(rasterio.uint16))
        dst.write_band(4, nir_ref_scaled .astype(rasterio.uint16))
In the [crop-temporal notebook](https://github.com/planetlabs/notebooks/blob/master/jupyter-notebooks/temporal-analysis/crop-temporal.ipynb), in cell 23, gdalwarp vsicurl is called to download a portion of a geotiff. In the current docker image, this process fails with the following message:

```
ERROR 1: PROJ: proj_create_from_wkt: Cannot find proj.db
ERROR 1: PROJ: proj_create_from_wkt: Cannot find proj.db
ERROR 1: PROJ: pj_obj_create: Cannot find proj.db
ERROR 1: PROJ: createGeodeticReferenceFrame: Cannot find proj.db
ERROR 1: PROJ: proj_as_wkt: Cannot find proj.db
ERROR 1: PROJ: createGeodeticReferenceFrame: Cannot find proj.db
ERROR 1: PROJ: pj_obj_create: Cannot find proj.db
ERROR 1: PROJ: proj_as_wkt: Cannot find proj.db
ERROR 1: PROJ: proj_create_from_wkt: Cannot find proj.db
ERROR 1: PROJ: proj_create_from_wkt: Cannot find proj.db
ERROR 1: PROJ: pj_obj_create: Cannot find proj.db
ERROR 1: PROJ: proj_as_wkt: Cannot find proj.db
ERROR 1: PROJ: proj_as_wkt: Cannot find proj.db
ERROR 1: PROJ: proj_create_from_wkt: Cannot find proj.db
ERROR 1: PROJ: proj_create_from_database: Cannot find proj.db
ERROR 1: Cannot compute bounding box of cutline. Cannot find source SRS
```

The current installed version of gdal is 3.0.1. In the past, the version was pinned to 2.4.0.

This may be related to the switch to gdal 3. (ref and possible solutions: https://github.com/PDAL/PDAL/issues/2544)
Both the [crop-classification/classify-cart-l8-ps.ipynb ](https://github.com/planetlabs/notebooks/tree/master/jupyter-notebooks/crop-classification/classify-cart-l8-ps.ipynb)and [crop-classification/classify-cart.ipynb](https://github.com/planetlabs/notebooks/tree/master/jupyter-notebooks/crop-classification/classify-cart.ipynb) throw an error when trying to download the planet data in the 4th cell running` planet data download`

```activating: 0            complete: 0              elapsed: 0                    
paging: False            pending: 0                                             

activating: 0            complete: 0              elapsed: 1                    
paging: False            pending: 0                                             

Error: BadQuery: {"field": {}, "general": [{"message": "invalid_shape_exception: Invalid shape: Hole is not within polygon"}]}
```

I'm running the jupyter notebook directly from the docker container
Hi Everyone:
I had an issue recently trying to follow step-by-step procedure from API Introduction (tutorials)
I can't go further Quick Search section, because my API_KEY is apparently not working.
I got this answer:

{
  "message": "Please enter your API key, or email and password.",
  "errors": []
}
Everything was good for previous sections, but from here (the most important i consider) the code reboots me with that message.

Sorry if my question is too basic, but I tried looking for the answer from another blogs, trying their solutions and without success.
Thanks in advance for your reply!
Mishel.

This makes the repo [Binder](https://mybinder.readthedocs.io/en/latest/) compatible!

See this binder example deployed from this branch: [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/planetlabs/notebooks/binder-dockerfile)

Changes:
- move Dockerfile to repo root
- remove the planet-notebook-docker subdirectory
- make docker build changes to support Binder based on @AAbercrombie0492's https://github.com/planetlabs/notebooks/pull/75 and the [binder docker guide](https://mybinder.readthedocs.io/en/latest/sample_repos.html#minimal-dockerfiles-for-binder)
- update docs


Respec'd Dockerfile so binder can use it following [this tutorial](https://mybinder.readthedocs.io/en/latest/tutorials/dockerfile.html). Removed docker file subdirectory so binder could find the Dockerfile in the project root.
In order to avoid upstream issues like #73, we should push our own base image to dockerhub.
In `datasets-identify.ipynb`, we use fiona to read the shapefile coordinate reference system. The version of fiona that is associated with the version of rasterio we are using, 1.8.0, has a bug where it is unable to open the EPSG support file gcs.csv. This issue is documented [here](https://github.com/Toblerity/Fiona/issues/673). In 1.8.1, this bug will be fixed. Wait for 1.8.1 to go live and fix the installed fiona to that version.
instead of creating a ton of code for parsing landsat qa bands, use [rio-l8qa](https://github.com/mapbox/rio-l8qa)