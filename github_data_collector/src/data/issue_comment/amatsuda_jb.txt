In jbuilder one could reuse partials within the main template either for collections of just for better code organization.

Is this possible with jb?

I haven't been able to find relevant info in the readme.

TIA
Can you tell me why this works:

`render "comments/comment_hide_delete.json.jb"`

but this doesn't

`render "comments/comment_hide_delete"`

and neither does this?

`render partial: "comments/comment_hide_delete.json.jb"`
Hi, I have a common situation: index and show actions both should render an object partial. When I place the code into the corresponding views (index.json.jb and show.json.jb) everything is good, but when I place there any modifications of `render partial: 'object', collection: @objects`, it renders weird output:

````
"<!-- begin: app/views/api/v1/objects/_object.json.jb (from app/views/api/v1/objects/index.json.jb:1) -->\n[{:id=>1, :name=>\"Name 1\", :position=>0, :description=>\"Test 1\"}, {:id=>2, :name=>\"Name 2\", :position=>1, :description=>\"Test 2\"}]<!-- end: app/views/api/v1/objects/_object.json.jb (from app/views/api/v1/objects/index.json.jb:1) -->"
````

Is it me doing something wrong or is it a bug? Thank you.

Btw, I'm on Ruby 2.3.4 Rails 4.1.1
Hi~ First, thank you for this gem. I started to use this gem in my projects because the syntax is enjoyable.

I want to ask, if there is jsonp support with this? so the output can be wrapped in function, defined by params[:callback] for example.


Thank you

Curently I have a template that has the following
```ruby
Rails.cache.fetch( ['v1', assignment] ) do
{
  id: assignment.id,
  description: assignment.description,
  start: assignment.start,
  end: assignment.end
}
end
```

And it caches out nicely.

But when I edit the template contents, say add a new item there, the cache does not invalidate. I know that ActionView::Helpers::CacheHelpers has functionality for this, but how to take advantage of it?

Hello! In ruby we use snake_case everywhere and I suffer when I have to camelCase in any place.
Is there any option to camelKeys automatically all keys right before spitting out the JSON?

I would use it so that my JSON api stays consistent with javascript notation
It sometimes renders an empty string with status 200, or sometimes just raises 404. The app below reproduces the former, though.

The demo is based on Rails5 but I have found this problem on my Rails4 app.

## How to reproduce it

 https://github.com/gfx/test_jb (Rails5)

1. git clone the repo
2. `bundle install`
3. `bundle exec rspec`

will shows:

```
$ bundle exec rspec
F

Failures:

  1) FoosController#index should eq "[]"
     Failure/Error: expect(response.body).to eq("[]")

       expected: "[]"
            got: ""

       (compared using ==)
     # ./spec/controllers/foos_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

Finished in 0.06748 seconds (files took 4.92 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./spec/controllers/foos_controller_spec.rb:5 # FoosController#index should eq "[]"
```

`curl http://localhost:3000/foos.json` with `rails server` does return `[]` as expected.

This PR fixes #7.
it probably keeps the fast performance.
I am using rails 4.2.7.1. Basically when I set `{ id: ''}` value to .jb template file it says `unknown keyword: id`. Then I add `.to_json` at and end of `{ id: ''}` hash expression. But at this stage it produces bad JSON-like string which browsers do not understand. 
```json
"{\"id\":\"\"}\n}\n\n"
```
Due to the fact that there are special characters in this string browsers do not understand whether the string is JSON or not even if the server sends `Content-Type: application/json` header. Maybe there is a proper way but as I read from the documentation I could not find any way. 
Say I have in projects_controller#index action
`@projects = []` 
and I have views/projects/_project.json.rb 
`{
    name: project.name
 }
`
and views/projects/index.json.rb
`render @projects`

whenever @projects = [], I get null as the output json. If, however, I modified index.json.jb to

`render partial: 'projects/project', collection: @projects, as: :project`

it will output [] is this by design? 