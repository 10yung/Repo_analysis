**Is your feature request related to a problem? Please describe.**

- I'd like to use this library in a React project which uses a promise-based API, without rewriting that project to use React hooks. Our data fetching is happening inside of redux thunks, where hooks and JSX components cannot be used.

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

Presently, for a given resource called `get-dogs`, `restful-react` generates
  - a hook called `useGetDogs`
  - a React component called `GetDogs`

We'd be interested in generating an additional function called `fetchGetDogs`, which has the same typed `queryParameters` as an input, and returns a promise with the same `responseType` as the other two pieces of generated code.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

- We could just use the generated types from `restful-react` library, and use with  them another promise-based data fetching library.
- Use the `typescript-fetch` generator instead: https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/typescript-fetch.md (have not tested it yet).

**Additional context**

## Describe the bug

`dist/bin/restful-react.js` does not exist in `9.8.0` leading to install errors (#220 and #221)

## To Reproduce

Install from npm and look in the `node_modules/restful-react/dist/bin/` folder - `restful-react.js` is not in there.

## Expected behavior

It should be there ðŸ˜„

## Additional context

I think that the package has been published without running `yarn build` which would trigger the `build:bin` task. Doing this locally creates the required file:

![image](https://user-images.githubusercontent.com/2154764/72494973-689d4100-388a-11ea-8f9e-c41c13773e46.png)
Hey guys, we found this today, please let us now if you have seen this before. 

Thanks a lot for looking into it!

**Describe the bug**
When installing the with npm the install fails with 
```
41511 verbose stack Error: ENOENT: no such file or directory, chmod '/Users/karolinkas/Documents/pipeline/services/pipeline_repl/app/node_modules/restful-react/dist/bin/restful-react.js'
41512 verbose cwd /Users/karolinkas/Documents/pipeline/services/pipeline_repl/app
41513 verbose Darwin 18.6.0
41514 verbose argv "/Users/karolinkas/.nvm/versions/node/v12.14.0/bin/node" "/Users/karolinkas/.nvm/versions/node/v12.14.0/bin/npm" "install"
41515 verbose node v12.14.0
41516 verbose npm  v6.13.4
41517 error code ENOENT
41518 error syscall chmod
41519 error path /Users/karolinkas/Documents/pipeline/services/pipeline_repl/app/node_modules/restful-react/dist/bin/restful-react.js
41520 error errno -2
41521 error enoent ENOENT: no such file or directory, chmod '/Users/karolinkas/Documents/pipeline/services/pipeline_repl/app/node_modules/restful-react/dist/bin/restful-react.js'
41522 error enoent This is related to npm not being able to find a file.
41523 verbose exit [ -2, true ]
```

**To Reproduce**
Steps to reproduce the behavior:
1. Install the newest version 9.8.0 using the npm install command

**Expected behavior**
Install should succeed

**Desktop (please complete the following information):**
 - OS: Mojave 10.14.5

The v9.8.0 runtime works as a project dependency in my CRA-based app, however if I want to use `nvm` or a global install to run the code generator, it fails. Probably a tiny issue with https://github.com/contiamo/restful-react/pull/215

```
% npm install -g restful-react                                                                                                                                                                 âœ– âœ¹ âœ­
npm ERR! code ENOENT
npm ERR! syscall chmod
npm ERR! path /Users/slafferty/.nvm/versions/node/v12.14.1/lib/node_modules/restful-react/dist/bin/restful-react.js
npm ERR! errno -2
```
# Why

Our app uses `UseGetReturn` and `UseMutateReturn` types but after `9.8.0` we were not longer able to import them without eslint errors. I've added them to the index exports which seems to have fixed it when locally tested in our app.

Also organised the `package.json` and added a few more checks to the `tsconfig.json`
Fixes #205 

I added skip to both get and poll. Not 100% sure we want it on poll. Thoughts?

As a side note, I can't `yarn install` at the moment from the private npm repo- not sure if its just a transient thing or upstream config changed.
```
error An unexpected error occurred: "http://verdaccio.bowerytree.co:4873/handlebars/-/handlebars-4.7.0.tgz: connect ECONNREFUSED 51.15.61.114:4873".
```
**Describe the question**
I'm trying to generate code with this library, but the api needs credentials to access the JSON spec. 

Is there a way to add credentials in the header of the request with the library (using the terminal) or maybe a sessionId, something like that?
I try to achieve something like dependent `useGet` (and save the data to state also) after received the response from the first `useGet`
something similar to this https://github.com/zeit/swr#dependent-fetching
Is it possible now, and how would I do it ?
PS: 
I tried to take advantage of lazy & refetch, eg:
```
{data: user} = useGet({path: pathToGetUser})
{refetch: refecthProject} = useGet({
  path: pathToGetProjectWithUseId, 
  lazy:true, 
  resolve:data=>{
     //save data to state
  }})
if (user && user.id){
  refetchProject() 
}
``` 
That was my idea
but I stuck at how to compose the `pathToGetProjectWithUserId` is ugly and error prone like this
`/api/project/user/{user ? user.id ? -1}`

How would I do the above requirement nicer ?

**Is your feature request related to a problem? Please describe.**

I'd like to use this on OpenAPI Specs that use the `$ref` feature to refer to definitions from other files,  such that large APIs can be split into multiple files for reuse/readability purposes.

Presently, this library only supports `$refs` within the same file.

https://github.com/contiamo/restful-react/blob/45d0ef61b5b0894d3f7da7c66e6fd1c1c98e62b1/src/scripts/import-open-api.ts#L93

**Describe the solution you'd like**

Ability to use multi-file OpenAPI specs, since I'm trying to making them with https://stoplight.io/studio

**Describe alternatives you've considered**

I wonder if there are any OpenAPI tools that can rewrite a spec that uses path based `$refs` such that all the content gets imported into 1 file under the "components" key, for the benefit of tools that aren't designed to work with multi-file OpenAPI specifications such as this one.

**Additional context**
Add any other context or screenshots about the feature request here.

- Related reading about Refs: https://swagger.io/docs/specification/using-ref/

**Describe the bug**
I got a invalid key name after I use code gen function if some symbols exits in the swagger.

**To Reproduce**
Steps to reproduce the behavior:
1. add a line of "- name: X-USERNAME" to the swagger file
2. restful-react import

        