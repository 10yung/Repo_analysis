JQ should distinguish between "falsy" and "nully" values. Alternative operator should replace only nully variables, but not falsy ones!

```
empty // null // false // 5
  # is ==> 5
  # should be ==> false
```
Current `//` behavior makes it usefulness when data contains also booleans, because in such case all `false`es will be replaced by alternative value, if I needed such behavior, I can simply use `if . then "yes" else "no" end`, now instead alternative operator I need to use `if . != null then . else "default" end`.

**Describe the bug**
When you define a function but want value semantics for arguments, you could use the shorthand:

    def function($arg): ...;

which is equivalent to:

    def function(arg): arg as $arg | ...;

https://stedolan.github.io/jq/manual/#DefiningFunctions

This poses a problem if the value-argument name happens to share the name of a function that's in scope, the local argument is used. Can be confusing (see repro).

Instead, some sort of name mangling should be performed so it's equivalent to something along the lines of:

    def function(_function1_arg_): _function1_arg_ as $arg | ...;
    # mangled: _[function name][function arity]_[arg name]_

**To Reproduce**

    def fn($str; $length):
        ($str|length) as $len
        | $len;
    fn("abc"; 99) # would expect to return 3, returns 99

workaround, change arg name:

    def fn2($str; $length_):
        ($str|length) as $len
        | $len;
    fn2("abc"; 99) # would expect to return 3, returns 3

**Expected behavior**
The argument name should not conflict with names in scope when value-argument shorthand is used. Slight semantic change but I'd argue it's less confusing.

**Environment (please complete the following information):**
jq <=1.6

**Additional context**
Was defining some helper functions and wanted to create string padding functions and started with this initially.

```
def rpad($str; $length; $pad): ($str|length) as $len | # <- problem!
    (select($len < $length) | "\($str)\($pad*($length-$len))") // $str
    ;
def rpad($str; $length):
    rpad($str; $length; " ")
    ;
```

Fix using the name `$size` instead of `$length`.
This feels nice, though perhaps the new operator should be `<|` or `<|>` or alike:

```
$ ./jq -n 'true and 5|if .==5 then true else false end')
false
$ ./jq -n 'true and 5>|if .==5 then true else false end'
true
$ 
```

```
diff --git a/src/lexer.l b/src/lexer.l
index c35fceb..c472f0f 100644
--- a/src/lexer.l
+++ b/src/lexer.l
@@ -62,6 +62,7 @@ struct lexer_param;
 "label" { return LABEL; }
 "break" { return BREAK; }
 "__loc__" { return LOC; }
+">|" { return HIGHPRECPIPE; }
 "|=" { return SETPIPE; }
 "+=" { return SETPLUS; }
 "-=" { return SETMINUS; }
diff --git a/src/parser.y b/src/parser.y
index bdb281f..81aa5f8 100644
--- a/src/parser.y
+++ b/src/parser.y
@@ -76,6 +76,7 @@ struct lexer_param;
 %token LABEL "label"
 %token BREAK "break"
 %token LOC "__loc__"
+%token HIGHPRECPIPE ">|"
 %token SETPIPE "|="
 %token SETPLUS "+="
 %token SETMINUS "-="
@@ -112,6 +113,7 @@ struct lexer_param;
 %precedence '?'
 %precedence "try"
 %precedence "catch"
+%right HIGHPRECPIPE


 %type <blk> Exp Term
@@ -449,6 +451,10 @@ Exp '|' Exp {
   $$ = block_join($1, $3);
 } |

+Exp ">|" Exp {
+  $$ = block_join($1, $3);
+} |
+
 Exp ',' Exp {
   $$ = gen_both($1, $3);
 } |
```
**Describe the bug**
jq-1.6 documentation says,

>recurse(f) is identical to recurse(f; . != null) and can be used without concerns about recursion depth.

however, from jq-1.6, the filter for null was abolished, which is good and consistent, I believe.


**To Reproduce**

Just see the documentations and search for definition for the one parameter ```recurse``` function.

- https://stedolan.github.io/jq/manual/v1.6/#Builtinoperatorsandfunctions
- https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions

**Expected behavior**

The description should be like following

> ```recurse(f)``` is identical to ```recurse(f; true)``` and can be used without concerns about recursion depth.

since ```recurse(f)``` is defined ```def recurse(f): def r: ., (f | r); r;``` in ```builtin.jq```

**Environment (please complete the following information):**
 - ALL
 - jq version : 1.6 or leter

**Additional context**
None
<!--
READ THIS FIRST!

If you have a usage question, please ask us on either Stack Overflow (https://stackoverflow.com/questions/tagged/jq) or in the #jq channel (http://irc.lc/freenode/%23jq/) on Freenode (https://webchat.freenode.net/).

-->

**Describe the bug**
'Autoconf -fi' failed to execute in windows.

**To Reproduce**

$ autoreconf -fi
Can't locate Autom4te/ChannelDefs.pm in @INC (you may need to install the Autom4te::ChannelDefs module) (@INC contains: /mingw/share/autoconf /usr/lib/perl5/site_perl /usr/share/perl5/site_perl /usr/lib/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib/perl5/core_perl /usr/share/perl5/core_perl) at /c/MinGW/bin/autoreconf-2.68 line 40.
BEGIN failed--compilation aborted at /c/MinGW/bin/autoreconf-2.68 line 40.

**Environment (please complete the following information):**
 - OS and Version:  Windows 7
 - jq version :1.6


Hi!

Can you consider to add a builtin pad(n) function to jq?

Something like this:
def pad(n): if n==0 then (.) else "0" + (.) | pad(n - 1) end;

Congratulations for this great tool!


**Describe the bug**
add filter does not properly summarize some information


**To Reproduce**
[test.txt](https://github.com/stedolan/jq/files/3946509/test.txt)

run the add filter over the attached dataset
you will get the result 20285.534259709973

**Expected behavior**
The correct result would be 20285.53425971 as no element of the entire array has more than 8 decimals

**Environment (please complete the following information):**
 - Fedora Server 31
 - jq version 1.6

**Additional context**


```
$ time jq ".[0:10000]" < ~/temp/chrisyaydata.json | jq '.[] += {"abc":"test"}' > /dev/null
nc: /home/chris/.config/moscoviumOrange/monitor.soc: Connection refused
jq ".[0:10000]" < ~/temp/chrisyaydata.json  0.81s user 0.06s system 99% cpu 0.876 total
jq '.[] += {"abc":"test"}' > /dev/null  2.24s user 0.01s system 75% cpu 2.986 total
$ time jq ".[0:20000]" < ~/temp/chrisyaydata.json | jq '.[] += {"abc":"test"}' > /dev/null
nc: /home/chris/.config/moscoviumOrange/monitor.soc: Connection refused
jq ".[0:20000]" < ~/temp/chrisyaydata.json  0.85s user 0.06s system 98% cpu 0.924 total
jq '.[] += {"abc":"test"}' > /dev/null  8.64s user 0.02s system 92% cpu 9.399 total
```

Doing 10k records takes 3s while 20k records take 9s. 

I'm trying to append to a file with a very large number of records (300k) and it's taken a very long time (15m+).
**Describe the bug**
Jq does not accept `nan`, but accepts `-nan`.

**To Reproduce**
```
echo nan | jq .
parse error: Invalid literal at line 2, column 0

echo -nan | jq .
null

echo NaN | jq .
null

echo -NaN | jq .
null
```

**Expected behavior**
Not sure if jq should accept `nan`, or reject `-nan`. I would vote for rejecting `-nan`, as some popular applications like MongoDB do.

**Environment (please complete the following information):**
 - OS: Kubuntu 19.04
 - jq version: jq-1.5-1-a5b5cbe

```
$ echo -1\" | jq
-1
jq: parse error: Unfinished string at EOF at line 2, column 0
$ echo $?
0
$
$ echo -1\" | jq -e
-1
jq: parse error: Unfinished string at EOF at line 2, column 0
$ echo $?
0
```
There is no way to detect a parsing error without reading+parsing stderr - which is not reliable at all-, and that makes it really hard to use jq in shell scripts.

---
Reproducible on both `jq-1.6-104-ge74eab8` and `jq-1.5+dfsg-2`.