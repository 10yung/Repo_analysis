Hi there, 

I guess that one aim of a cli is to facilitate adoption of a technology. In this case, graphQL.
I see great potential there, to onboard people... but not in doing everything in one shot! For one shot, it would be more efficient with a boilerplate... you clone, don't really understand what you do and it's working.

Here, the point is to go step by step and understand what is going on. It's almost as fast as cloning a repo... But you will, in addition, understand why and what are you doing.

That's why I suggest to keep it simple in the README.md
>npx graphql-cli@next init

The rest is guided by cli questions... 
At the end of this `init` process, you have then a good skeleton of an app. Next step is to follow a few steps (in the README.md of your new project) to have something running.
To understand each step, you need to know what cmd is affecting what file.
That's why I suggest having an empty skeleton and generate files after files... and really see/understand how the app is building itself cmd after cmd.

Also, I suggest to git init after the graphql-cli init to be able to see _"live"_ your files changing.
Having this kind of view (thx to VSCode):
![image](https://user-images.githubusercontent.com/5312607/72558885-e28df400-38a3-11ea-9224-2c33532781dd.png)

What are your thoughts?


**Describe the bug**
npm-run 4.1.2 results in a security vulnerability. Can we update this to npm-run 5.0.1? The sync-exec sub-dependency is the issue. This library (sync-exec) was essentially deprecated and absorbed into npm itself. The proposed solution is to replace the library calls with the npm native solution. npm-run has removed the vulnerable dependency but with a breaking change. It would be good to see where you are using npm-run and see if this can be updated safely.

Also, we need to update lodash 4.17.11 to 4.17.15 to remove the lodash security vulnerability in lodash 4.17.11

**To Reproduce**
1. run npm audit in any project that uses graphql-cli

**Expected behavior**
No security vulnerabilities.

**Screenshots**
N/A

**Versions (please complete the following information):**
"graphql-cli": "3.0.14",

**Other Context:**
https://www.npmjs.com/advisories/310

The best mitigation currently is to update to Node.js v0.12.0 or later, and migrate all uses of sync-exec to child_process.execSync()

I could submit a PR with the updates to the package versions but I'm wondering if there is a reason it has not been done yet.
At the moment npm doesn't link back to graphql-cli without this information at the package level. Same is true for the other packages but I think most users will go to npm for `graphql-cli`
graphql command without parameters should print list of commands with descriptions. Currently prints long stack trace.
**Is your feature request related to a problem? Please describe.**
It would be nice to be able to request and display metadata along with each GraphQL CLI system. Items like name and description, as well as class, could be specified as required attributes in package.json, or similar. 

**Describe the solution you'd like**
Gatsby does this very well with Starters and with Plugins

**Additional context**
Implementing would likely affect the entire guild ecosystem, but also affect the inquiry system in the CLI script and the packaging of the Template projects

**Describe the bug**
A path in the logic leaves `projectName` uncovered

**To Reproduce**
```
foo:dev peter$ graphql init
? Select the best option for you I have an existing project uses GraphQL.
? Do you want to generate the backend code using data model No
? Where is your schema? https://github.com/octokit/graphql-schema/blob/master/sc
hema.graphql
? projectType: Frontend only
? Where are your operation documents? ./
Error: You must provide a `name` parameter
    at ConfirmPrompt.throwParamError (/Users/peterdresslar/.config/yarn/global/node_modules/inquirer/lib/prompts/base.js:73:11)
    at new Prompt (/Users/peterdresslar/.config/yarn/global/node_modules/inquirer/lib/prompts/base.js:33:12)
    at new ConfirmPrompt 

...

ules/rxjs/internal/InnerSubscriber.js:28:21)
    at InnerSubscriber.Subscriber.next (/Users/peterdresslar/.config/yarn/global/node_modules/rxjs/internal/Subscriber.js:66:18)
```
Hi everyone!

I'm @urigo the founder of [The Guild](http://the-guild.dev).

As recently [been announced](https://www.prisma.io/blog/the-guild-takes-over-oss-libraries-vvluy2i4uevs) on the Prisma blog, we are taking over the maintenance of this library going forward.
I've expressed it in the blog post in more details but I would like to start by thanking Prisma for conceiving, creating and maintaining this library so far and also for doing the selfless act of providing it with fresh life by handing over the maintenance to us. 

We already have a certain plan in mind going forward, some of it we've specified in the blog post, but we want you, the users and community of the library to be part of influencing the roadmap going forward.

One thing to note about [The Guild](http://the-guild.dev) - We place all the open source packages we maintain under individual person's Github profile instead of under a GitHub org or a company.
That is part of our philosophy - it puts more accountability on the maintainer and it also lowers the barrier of creating successful competing forks.
So we will transfer that repository from under its current org as part of the transition.

I'm looking forward to start the discussion here below.
Please share how and why you use the library today, what are your biggest pain points today and ideas and features you would like to see in the future.

I will add points into the description here as we go.

Let's make this happen!
**change app namecha**

How can I change the name of the app (graphql app)?
![deepin screenshot_selecionar area_20181004005731](https://user-images.githubusercontent.com/11314585/46452217-f70eb180-c770-11e8-9b4b-11acaf4bcc84.png)


in the background (```graphql playground```), in order to close the browser and not fetch the connection


Use-case: After fetching a big schema with `get-schema`, it would be awesome to add app specific annotations to that generated SDL. An extension could hook in and manipulate the downloaded SDL of the `graphql get-schema` command.