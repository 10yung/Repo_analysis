The next ruby version won't have rexml as a default gem, so it will need to be explicitly added as a dependency.

See https://bugs.ruby-lang.org/issues/16485#change-83794.
Run the following:

```
s = <<END
<div class="navbar">
<span style="white-space:nowrap" markdown="1">
<span class="parent"><a href="tech">Technical Details</a></span>
</span>
&nbsp;&nbsp;&nbsp;
</div>
END
h = Kramdown::Document.new(
      s, :auto_ids => false, :entity_output => :numeric
).to_html
puts h
```

The output is:

```
<div class="navbar">
<span style="white-space:nowrap">
<span class="parent"><a href="tech">Technical Details</a></span></span>
&lt;/span&gt;
&nbsp;&nbsp;&nbsp;
</div>
```

The bug is the extra `&lt;/span&gt;` inserted into the text.

I can see a way of working around this, and I probably will do so; but this is new behavior that is affecting a longstanding web site of mine (though I can't specify the kramdown update in which the problem started, sorry) so perhaps it counts as a genuine bug.
```
kramdown-1.14.0/lib/kramdown/compatibility.rb:43: warning: method redefined; discarding old <=>

kramdown-1.14.0/lib/kramdown/converter/kramdown.rb:403: warning: previous definition of ial_for_element was here
```
This is my config:

```
markdown: kramdown
highlighter: rouge

kramdown:
  input: GFM
  syntax_highlighter_opts:
    default_lang: shell
    hard_wrap: true
    css_class: 'syntax'
```

And after I set the default language to SHELL, there're problems with line breaks: **It doesn't interpret RETURN / ENTER as link break**. 

For instance, normally a shell script should look like this:

```
for n in {0..4}; do
	if [[ $n == 2 ]]; then
		continue	
	fi
	echo $n
done
```

However, it looks like this in kramdown's renderer:

```
for n in {0..4}; do if [[ $n == 2 ]]; then continue  fi  echo 
$n done
```

I checked my other settings, and once I changed the default lang to almost ANY OTHER language, this problem disappears. Bu every time with SHELL, codes got all messed up.

Thanks!
Just a heads-up for your [MathJax support](https://kramdown.gettalong.org/math_engine/mathjax.html), I tried to add some math to my Jekyll + Kramdown blog, and couldn't figure out why MathJax wasn't rendering Kramdown's emitted `<script type="math/tex">` tags.

Turns out MathJax [released v3.0.0](https://github.com/mathjax/MathJax/releases/tag/3.0.0) a couple weeks ago, and all their "getting started" / installation docs are now pointing to this newer version, which I dutifully followed so am using on my site. It further turns out this version doesn't render the "math/tex" script tags, quietly mentioned in the last bullet point in the [upgrading from v2 to v3 docs here](http://docs.mathjax.org/en/latest/upgrading/v2.html#changes-in-the-mathjax-api).

That bullet point as well as [this example](https://github.com/mathjax/MathJax-demos-web/blob/dfb21d861c13d9e9bcf8b2ad17997973538bdf3c/v2-script-tags.md) in their demos repo provide a configuration snippet that can be slightly modified to make MathJax v3 load Kramdown's `<script type="math/tex">` tags:

```javascript
<script>
  MathJax = {
    options: {
      renderActions: {
        find: [10, function (doc) {
          for (const node of document.querySelectorAll('script[type^="math/tex"]')) {
            const display = !!node.type.match(/; *mode=display/);
            const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display);
            const text = document.createTextNode('');
            node.parentNode.replaceChild(text, node);
            math.start = {node: text, delim: '', n: 0};
            math.end = {node: text, delim: '', n: 0};
            doc.math.push(math);
          }
        }, '']
      }
    }
  };
</script>
```
(note I had to replace the "text/tex" in their snippet with "math/tex")

With that configuration snippet MathJax v3 is now working with Kramdown.
Resolves #624 

/cc @codingthat
An underscore-wrapped phrase immediately after a `---` renders plainly instead of in italics.

E.g. `it---by design---_cannot have side-effects_.` renders like this:

![image](https://user-images.githubusercontent.com/26723818/64153602-7c8e5c00-ce2f-11e9-8d59-ebfc993afef2.png)

But if you replace the latter `---` with `&mdash;`, it works as intended.

So  `it---by design&mdash;_cannot have side-effects_.` renders like this:

![image](https://user-images.githubusercontent.com/26723818/64153713-b65f6280-ce2f-11e9-8581-dca901f1bc98.png)


Given that I have the following configuration:
```yaml
syntax_highlighter_opts:
  formatter: HTMLTable
```
However when I try to convert a code-block, I get the following error:
```
private method `format' called for #<Hash:0x000000000601f440>
```
On bisecting, the issue occurs due to the following:
https://github.com/gettalong/kramdown/blob/2ff9d43f660460e8f6b14624af0adc50731eaa41/lib/kramdown/converter/syntax_highlighter/rouge.rb#L33

The reason being that `Rouge::Formatters::HTMLTable` should be constructed by passing another "formatter" instance:
```ruby
Rouge::Formatters::HTMLTable.new(Rouge::Formatters::HTML.new, opts)
```
You can reproduce the bug like this:

> ```ruby
> html = <<~HTML
> <div>
>   <img src="src.png" alt="alt" />
> </div>
> HTML
> 
> markdown = Kramdown::Document.new(html, input: :html).to_kramdown
> # => "<div>\n![alt](src.png)\n</div>"
> 
> html = Kramdown::Document.new(markdown).to_html
> # => "<div>\n![alt](src.png)\n</div>\n\n"
> ```

The bug is that the call to `to_kramdown` converted the IMG tag but **_did not_** add `markdown="1"` to the DIV tag.

As of Kramdown 2.1.0, the `markdown` attribute is added if the IMG tag is wrapped in a paragraph; and you can see that when the `markdown` attribute is present, the HTML roundtrips successfully:

> ```ruby
> html = <<~HTML
> <div>
>   <p><img src="src.png" alt="alt" /></p>
> </div>
> HTML
> 
> markdown = Kramdown::Document.new(html, input: :html).to_kramdown
> # => "<div markdown=\"1\">\n![alt](src.png)\n</div>"
> 
> html = Kramdown::Document.new(markdown).to_html
> # => "<div>\n  <p><img src=\"src.png\" alt=\"alt\" /></p>\n\n</div>"
> ```
This is a preliminary attempt to resolve #610 
@gettalong If you feel, this route is acceptable, I will try and add tests for the API