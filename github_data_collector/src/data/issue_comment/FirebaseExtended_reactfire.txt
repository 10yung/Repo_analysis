Hello,

I came across an **/issue/** where I am getting charged for double the reads when using useFirestoreDocData to subscribe to data.

I created a custom hook to pass a user object like the below:

```
const useUserData = () => {
  const firestore = useFirestore()
  const userAuth = useUser()

  const user = useFirestoreDocData(firestore().doc(`users/${userAuth.uid}`))
  
  return user
}
```

The way I am testing is only having one trigger to useFirestoreDocData throughout the whole app with the expectation to trigger only 1 read on app init, refreshing 4 extra times to generate 5 total reads, and then checking the firebase Usage tab.

I have changed the useFirestoreDocData to a none ReactFire snapshot subscription and am only getting charged for 1 read as oppose to useFirestoreDocData's 2 **/confirming/** that it has nothing to do with anything else in the app structure.

Any ideas on this?

As a side note I was hoping I could ask on how are ReactFire's subscriptions handled on page refresh / window close. Are they automatically unsubscribed or will they still be running? If they are still running are there any plans to implement a feature that would terminate them on such events / any suggestions on best practices for that?

### Version info

**React:** ^16.12.0
**Firebase:** ^7.6.1
**ReactFire:** ^2.0.0-canary.1fce6b9
This little example demonstrates an, in my opinion, unfortunate behavior.

```tsx
import React, { useEffect, useState } from 'react'
import { useFirestoreDoc, useFirestoreCollection } from 'reactfire'
import { firestore } from 'firebase/app'

export default function Test() {
  useFirestoreDoc<void>(firestore().doc('test/test'))

  useEffect(() => {
    firestore().doc('test/test').set({})
  }, [])

  const [limit, setLimit] = useState(1)
  const snap = useFirestoreCollection<void>(
    firestore()
      .collection('test')
      .limit(limit)
  )

  return (
    <div style={{ width: 300 }}>
      <span>limit: {limit} </span><button
        onClick={() => {
          setLimit(limit => limit % 10 + 1)
        }}
      >
        Load more
      </button>
      {snap.docs.map(doc => (
        <div key={doc.id}>{doc.id}</div>
      ))}
      <div style={{ height: 100 }} />
      <button
        onClick={() => {
          firestore()
            .collection('test')
            .add({ })
        }}
      >
        Add doc
      </button>
    </div>
  )
}
```

Story time: I had a component that was supposed to show a list of documents, and progressively load more documents as the user scrolls. I did the obvious thing and made a limited query, and had the limit in a state. But when I changed this state, the component didn't suspend until the results arrived like I expected, rather it switched momentarily to only showing a single document. Turns out this was because I had subscribed to that particular document from a different component.

I understand if you don't want to make it the default behavior to suspend until the first non-cache response arrives, but there must be some sort of middle ground.
I have a use case where I want to subscribe to two queries simultaneously.
```ts
const aSnap = useFirestoreCollection(aQuery)
const bSnap = useFirestoreCollection(bQuery)
```
This will result in an unnecessary waterfall where we wait for the first query to unsuspend before sending off the next. I resolved this by writing this helper function:
```ts
export interface Resource<T> {
  read(): T
}

/**
 * A higher order function that will call a given function, and wrap the return
 * value in a Resource. If the callback throws (or suspends), we catch that and
 * throw (or suspend) upon Resource.read instead.
 *
 * This makes it easier to have more concurrent requests, and avoid unnecessary
 * waterfalls by suspending too eagerly.
 */
export function resourcify<A extends any[], T>(func: (...args: A) => T) {
  return function(...args: A): Resource<T> {
    try {
      const t = func(...args)
      return {
        read() {
          return t
        }
      }
    } catch (err) {
      return {
        read() {
          throw err
        }
      }
    }
  }
}

function MyComponent() {
  const [aSnap, bSnap] = [
    resourcify(useFirestoreCollection)(aQuery),
    resourcify(useFirestoreCollection)(bQuery),
  ].map(resource => resource.read())
  return null
}
```

But it would be nice if the API nudged us in this direction by default.
<!--

Thank you for contributing to the Firebase community!

Have a usage question?
=======================
We get lots of those and we love helping you, but GitHub is not the best place for them and they
will be closed. Here are some resources to get help:

- Start with the quickstart: https://github.com/firebase/reactfire/blob/master/docs/quickstart.md
- Go through the guide: https://github.com/firebase/reactfire/blob/master/docs/guide.md
- Read the full API reference: https://github.com/firebase/reactfire/blob/master/docs/reference.md
- Try out some examples: https://github.com/firebase/reactfire/blob/master/examples/README.md

If the official documentation doesn't help, try asking through our official support channels:

https://firebase.google.com/support/

*Please avoid double posting across multiple channels!*

Think you found a bug?
=======================
Yeah, we're definitely not perfect! Please use the bug report template below and include a minimal
repro when opening the issue.


Have a feature request?
========================
Great, we love hearing how we can improve our products! Just remove the template below and
provide an explanation of your feature request. Provide code samples if applicable. Try to
think about what it will allow you to do that you can't do today? How will it make current
workarounds straightforward? What potential bugs and edge cases does it help to avoid?

-->


### Version info

<!-- What versions of the following libraries are you using? Note that your issue may already
be fixed in the latest versions. -->

**React:** 16.12.0

**Firebase:** 7.5.2

**ReactFire:** 2.0.0-canary.1fce6b9

### Test case

I want to use role based authentication on documents, so when a document is successfully read in the app and then I change the access of that user, the listener throws an error instead of a Promise.

```ts
const CompanyCheck: React.FC = ({ children }) => {
  const { companyId, setCompany } = useCompanyContext();

  const firestore: Firebase['Firestore'] = useFirestore();

  const companyRef = useRef(
    firestore()
      .collection('companies')
      .doc(companyId)
  );

  useEffect(() => {
    companyRef.current = firestore()
      .collection('companies')
      .doc(companyId);
  }, [companyId, firestore]);

  // This won't throw a promise on permission changes after successfull read.
  const companyDoc = useFirestoreDocData<Company>(companyRef.current);

  useEffect(() => {
    setCompany(companyDoc);
  }, [companyDoc, setCompany]);

  return <>{children}</>;
};
```

### Steps to reproduce

Use a correct example of read operation with role access, then once the data is displayed remove the access to the document and error boundary won't catch any error.

### Expected behavior

Throw a promise like when initial read fails so ErrorBoundary can catch the error.

### Actual behavior

Don't throw a Promise and error can't be handled. Error message is: 'permission-denied'

<!--

Thank you for contributing to the Firebase community!

Have a usage question?
=======================
We get lots of those and we love helping you, but GitHub is not the best place for them and they
will be closed. Here are some resources to get help:

- Start with the quickstart: https://github.com/firebase/reactfire/blob/master/docs/quickstart.md
- Go through the guide: https://github.com/firebase/reactfire/blob/master/docs/guide.md
- Read the full API reference: https://github.com/firebase/reactfire/blob/master/docs/reference.md
- Try out some examples: https://github.com/firebase/reactfire/blob/master/examples/README.md

If the official documentation doesn't help, try asking through our official support channels:

https://firebase.google.com/support/

*Please avoid double posting across multiple channels!*

Think you found a bug?
=======================
Yeah, we're definitely not perfect! Please use the bug report template below and include a minimal
repro when opening the issue.


Have a feature request?
========================
Great, we love hearing how we can improve our products! Just remove the template below and
provide an explanation of your feature request. Provide code samples if applicable. Try to
think about what it will allow you to do that you can't do today? How will it make current
workarounds straightforward? What potential bugs and edge cases does it help to avoid?

-->


### Version info

<!-- What versions of the following libraries are you using? Note that your issue may already
be fixed in the latest versions. -->

**React:** 16.9.0

**Firebase:** 7.2.0

**ReactFire:** 2.0.0-canary.1fce6b9

**Other (e.g. Node, browser, operating system) (if applicable):**

### Issue
<!-- Provide a minimal, complete, and verifiable example (http://stackoverflow.com/help/mcve)
using either Plunker (http://plnkr.co/) or JSFiddle (https://jsfiddle.net/). -->

When I use **useFirestoreDoc**, it has useState hook somewhere inside (I am guessing somewhere inside **useObservable**) and **useFirestoreDoc** is using onSnapshot method of firebase and returns **snapshot** result of queried document.

When I tried to log this snapshot, I am getting the result twice: 
`1. _fromCache: false`
`2. _fromCache: true`

This renders the component 2 times, because useState hook is used inside useObservable.


### My Questions

- Why it is sending 2 results??

- How can I rectify this 2 renders issue?

- `_fromCache: true` is only expected when user is offline, why it is fetching from cache even when user is online??

Remote Config [now supports web](https://firebase.google.com/docs/remote-config/use-config-web)! Let's include it in ReactFire.
Google Analytics for Firebase [now supports web](https://firebase.google.com/docs/analytics/get-started?platform=web)! Let's include this in ReactFire 
Have an example usage of ReactFire that you'd like to share with the world? Post a link to your repository/Stackblitz/Codesandbox here!

It can serve as a learning resource for other ReactFire developers!
Seems like the type definitions for `useFirestoreDoc` and `useFirestoreCollection` are incorrect:

```typescript
export declare function useFirestoreDoc<T = unknown>(ref: firestore.DocumentReference, options?: ReactFireOptions<T>): firestore.DocumentSnapshot | T;
```

[In a union, `unknown` absorbs everything](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#example-3), so if we don't pass a generic type here the return type will always be `unknown`. I tried to find a way to fix this so I could do a PR myself, but I'm afraid my TypeScript knowledge is lacking.

If I understand correctly, what we want here is to make the return type be `firestore.DocumentSnapshot` by default, or `T` if specified. I opened a PR with a way to do this but I'm really not sure if this is how it's supposed to be done.


### Version info

**React:** 16.8.6

**Firebase:** 6.0.4

**ReactFire:** 2.0.0-canary.fc2be5b

**Typescript:** 3.5.3 (on my machine) and 3.3.3 (on CodeSandox) both show the same problem

### Test case
[Test case on Code Sandbox
](https://codesandbox.io/s/reactfire-typescript-wrong-types-4wq4o)

I didn't try to make the project actually run, because the issue is just the type definitions. The issue isn't visible right away, though, because reactfire can't import from `firebase/app` on Code Sandbox for some reason. Follow these steps to see the problem:

### Steps to reproduce

1. Visit https://codesandbox.io/s/reactfire-typescript-wrong-types-4wq4o
2. Open the file `src/withoutOptions.ts`
3. Right-click `useFirestoreDoc` and select "Go To Definition""
4. Check if the `firebase/app` import is failing. If it is, replace with just `firebase`. Don't save the file, but leave it open (important).
5. Go back to `src/withoutOptions.ts` and check the type of `doc` by hovering the mouse over it.

### Expected behavior

The type should be `firestore.DocumentSnapshot` by default

### Actual behavior

The type is `unknown`

Right now, using the `initPerformance` flag in `FirebaseAppProvider` activates Performance Monitoring automatic traces. In addition, `SuspenseWithPerf` creates a custom trace. Are there other places in Reactfire where it would be useful to include Performance Monitoring traces? For example:

- `useFirestoreCollection` could log a custom trace with a custom attribute logging the number of documents returned
- any of the `use*` hooks could log a custom trace