For months I've been searching for a way how to emit whisper events from the client side.
As we all know, in socket.io we can listen to emit events, but I'm missing this feature in laravel-echo.

Here are the changes I made:
- I added the PresenceChannelWhisper publish event to listen to all whisper broadcast client events on the server side.
- Have redis publishing an optional feature. Just like adding the "publishPresence" key, I added  "publishWhisper" key to check for whisper events

Broadcasting not working with v6.11.0. I had to reverted back to laravel/framework 6.10.1


v6.11.0 (2020-01-14)

Added
Added Illuminate\Database\Eloquent\Builder::firstWhere() method (#31089)
**Redis Broadcaster: Broadcast to multiple channels at once (#[31108](https://github.com/laravel/framework/pull/31108))**
I'm trying to connect to my webserver via laravel echo but got the following response
```
32:44/socket.io,"Invalid namespace"
```

I'm using the following configuration
```
location /socket.io {
	    proxy_pass http://127.0.0.1:6001;
	    proxy_http_version 1.1;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection "Upgrade";
	}
```

And laravel echo configuration

```
window.io = require('socket.io-client');

window.Echo = new Echo({
    broadcaster: 'socket.io',
    host: 'https://my-site.com/socket.io',
    auth: {
        headers: {
            'Authorization': 'Bearer some token here'
        }
    }
});

window.Echo.join('channel').joining((user) => {
    console.log('joining');
}).leaving((user) => {
    console.log('leaving');
})
```

Every few minutes a warning appears:

```
(node:1902) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
(node:1902) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
at /usr/lib/node_modules/laravel-echo-server/dist/channels/presence-channel.js:71:31
at Array.filter (<anonymous>)
at /usr/lib/node_modules/laravel-echo-server/dist/channels/presence-channel.js:71:81
(node:1902) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'socketId' of undefined
```

I am using presence channels.

This is what I found here in 71 line:
```
PresenceChannel.prototype.leave = function (socket, channel) {
        var _this = this;
        this.getMembers(channel).then(function (members) {
            members = members || [];
            var member = members.find(function (member) { return member.socketId == socket.id; });
---->   members = members.filter(function (m) { return m.socketId != member.socketId; });
            _this.db.set(channel + ':members', members);
            _this.isMember(channel, member).then(function (is_member) {
                if (!is_member) {
                    delete member.socketId;
                    _this.onLeave(channel, member);
                }
            });
        }, function (error) { return log_1.Log.error(error); });
    };
```

Seems like **member** is undefined.


-----
There is also another warning:
```
(node:3009) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 10)
at /usr/lib/node_modules/laravel-echo-server/dist/channels/presence-channel.js:59:27
at PresenceChannel.onJoin (/usr/lib/node_modules/laravel-echo-server/dist/channels/presence-channel.js:85:14)
(node:3009) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'broadcast' of undefined
```

This is exactly this line:
```
PresenceChannel.prototype.onJoin = function (socket, channel, member) {
        this.io
            .sockets
            .connected[socket.id]
            .broadcast  <----
            .to(channel)
            .emit('presence:joining', channel, member);
    };
```

connected[socket.id] is undefined
After renaming project via command

`php artisan app:name Poker`

listening channels not working! >>>

```
            window.Echo.channel('chat')
                .listen('Message', ({message}) => {
                    console.log(message);
                    this.messages.push(message);
                });
```

After renaming project into default App Laravel name - nice working again

`php artisan app:name App`

How fix this issue?

Thanks.



hello, when I run laravel-echo-server init, it stuck here :
**What do you want this config to be saved as? laravel-echo-server.json**
Even I ctrl + c, it doesnt do anything, still stuck here. 

I am coming across an issue in Ubuntu server configuration.The server is running but not able to authenticate the user.I am using laravel 5.8 and auth session is in database session table. The error is as following:

```
`[5:41:27 AM] - Preparing authentication request to: http://localhost:6001/laravel_app/public
[5:41:27 AM] - Sending auth request to: http://localhost:6001/laravel_app/public/broadcasting/auth

âš  [5:41:27 AM] - tuwKsGTb6P9Qxdb2AAAA could not be authenticated to private-App.User.6854
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Error</title>
</head>
<body>
<pre>Cannot POST /laravel_app/public/broadcasting/auth</pre>
</body>
</html>

Client can not be authenticated, got HTTP status 404
[5:42:10 AM] - Preparing authentication request to: http://localhost:6001/laravel_app/public
[5:42:10 AM] - Sending auth request to: http://localhost:6001/laravel_app/public/broadcasting/auth

[5:42:10 AM] - 7hHWOd5R9Xq0xr2CAAAB could not be authenticated to private-App.User.xyz
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Error</title>
</head>
<body>
<pre>Cannot POST /laravel_app/public/broadcasting/auth</pre>
</body>
</html>

Client can not be authenticated, got HTTP status 404`
```

laravel-echo-server.js

```
{
	"authHost": "http://localhost:6001/laravel_app/public",
	"authEndpoint": "/broadcasting/auth",
	"clients": [
		{
			"appId": "0c611466e43adf14",
			"key": "c5f392fc02bb6b5b7898ccc0b2523829"
		}
	],
	"database": "redis",
	"databaseConfig": {
		"redis": {},
		"sqlite": {
			"databasePath": "/database/laravel-echo-server.sqlite"
		}
	},
	"devMode": true,
	"host": null,
	"port": "6001",
	"protocol": "http",
	"socketio": {},
	"secureOptions": 67108864,
	"sslCertPath": "",
	"sslKeyPath": "",
	"sslCertChainPath": "",
	"sslPassphrase": "",
	"subscribers": {
		"http": true,
		"redis": true
	},
"apiOriginAllow": {
        "allowCors": true,
        "allowOrigin": "*",
        "allowMethods": "GET",
        "allowHeaders": "Origin, Content-Type, X-Auth-Token, X-Requested-With, Accept, Authorization, X-CSRF-TOKEN, X-Socket-Id"
    }
}
```
With out ssl apache2 configuration file is

```
<VirtualHost *:80>
ServerName xyz.abc.domain.com


ProxyPreserveHost On
ProxyPass /socket.io http://localhost:6001/socket.io
ProxyPassReverse /socket.io http://localhost:6001/socket.io


</VirtualHost>
```
Echo Configuration Bootstrape.js

```
window.Echo = new Echo({
    broadcaster: "socket.io",
    host: "http://xyz.abc.domain.com" 
     //host: window.location.hostname 
     //host: window.location.hostname + ":6001"
});
```
Let us know if you need any further details. 

I'm working on `docker-compose.yml` which deploys a Laravel project and its ecosystem. Almost everything works as I wish except the websocket server (laravel-echo-server). It is proxied through my Nginx container on same port than HTTP(S). When I run Docker Compose, laravel-echo-server prints `ready` (so I hope it suceeded to connect to Redis container) but it does not receive any event broadcasted by Laravel app to Redis. I expect the problem being a wrong IP (because of containers) or a namespace but didn't succeed to find out.

```yml
version: '3.7'

services:

  app:
    image: laravel-app
    container_name: laravel-app
    depends_on:
      - database
      - cache
      - queue
      - scheduler
    volumes:
      - .:/var/www/html/
      - app-config-data:/var/www/.config/
    environment:
      CONTAINER_ROLE: app
    restart: on-failure

  scheduler:
    image: laravel-app
    container_name: laravel-scheduler
    depends_on:
      - cache
    volumes:
      - .:/var/www/html/
      - app-config-data:/var/www/.config/
    environment:
      CONTAINER_ROLE: scheduler
    restart: on-failure

  queue:
    image: laravel-app
    container_name: laravel-queue
    depends_on:
      - cache
    volumes:
      - .:/var/www/html/
      - app-config-data:/var/www/.config/
    environment:
      CONTAINER_ROLE: queue
    restart: on-failure

  web:
    container_name: nginx-server
    build:
      context: ./
      dockerfile: docker/nginx-server.dockerfile
      args:
        server_name: ${SERVER_NAME:-localhost}
        server_port: ${SERVER_PORT:-80}
        fpm_service: app
        fpm_port: ${FPM_PORT:-9000}
        ws_endpoint: ${WS_ENDPOINT:-/socket-io}
    depends_on:
      - app
    volumes:
      - .:/var/www/html/:ro
      - ./storage/logs/nginx:/var/log/nginx/
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    restart: on-failure

  database:
    container_name: maria-database
    image: mariadb:10.4
    volumes:
      - db-data:/var/lib/mysql/
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    restart: on-failure

  cache:
    container_name: redis-server
    image: redis:5.0-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - cache-data:/data/
    restart: on-failure

  websocket:
    container_name: laravel-echo-server
    build:
      context: ./
      dockerfile: docker/laravel-echo-server.dockerfile
      args:
        app_url: "web:${HTTP_PORT:-80}"
        echo_redis_host: ${REDIS_HOST}
        echo_redis_port: ${REDIS_PORT}
        echo_redis_password: ${REDIS_PASSWORD}
    depends_on:
      - app
      - cache
    restart: on-failure

volumes:
  db-data:
  cache-data:
  app-config-data:
```

laravel-echo-server.json:

```
{
    "authHost": "web:80",
    "authEndpoint": "/broadcasting/auth",
    "clients": [],
    "database": "redis",
    "databaseConfig": {
        "redis": {
            "host": "cache",
            "port": "6379",
            "password": "********"
        }
    },
    "devMode": "false",
    "host": null,
    "port": "6001",
    "protocol": "http",
    "socketio": {},
    "sslCertPath": "",
    "sslKeyPath": "",
    "sslCertChainPath": "",
    "sslPassphrase": "",
    "apiOriginAllow": {
        "allowCors": true,
        "allowOrigin": "*.*",
        "allowMethods": "GET, POST",
        "allowHeaders": "Origin, Content-Type, X-Auth-Token, X-Requested-With, Accept, Authorization, X-CSRF-TOKEN, X-Socket-Id"
    }
}
```

Nginx vhost

```
server {
    listen 80;
    server_name localhost;
    root /var/www/html/public;

    error_log /var/log/nginx/error.log error;
    access_log  /var/log/nginx/access.log main;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    index index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location /socket.io {
        proxy_pass http://websocket:6001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
       #try_files $uri /index.php =404;
       try_files $uri =404;
       fastcgi_split_path_info ^(.+\.php)(/.+)$;
       fastcgi_pass app:9000;
       fastcgi_index index.php;
       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
       include fastcgi_params;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
```

Laravel Echo setup

```js
const $echo = new Echo({
    broadcaster: 'socket.io',
    host: window.location.host,
    auth: {
        headers: {}
    }
});

$echo.channel('test').listen('TestMessage', function (event) {console.log(event);});
```

Laravel event example

```php
<?php

namespace App\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Queue\SerializesModels;

class TestMessage implements ShouldBroadcast
{
    use SerializesModels, InteractsWithSockets;

    public $message;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct(string $message)
    {
        $this->message = $message;
    }

    /**
     * Get the channels the event should broadcast on.
     *
     * @return Channel|array
     */
    public function broadcastOn()
    {
        return new Channel('test');
    }
}
```

And when I broadcast this event, I get:

```
laravel-queue | [2019-12-10 09:01:23][xqmWLUoAZXVGlaNgfHIP2k9qK7zdZPj5] Processing: App\Events\TestMessage
laravel-queue | [2019-12-10 09:01:23][xqmWLUoAZXVGlaNgfHIP2k9qK7zdZPj5] Processed:  App\Events\TestMessage
```

but nothing appears in my browser console.

Maybe someone will find the problem among my config, if necessary I can share dockerfiles and bash scripts to setup the whole project.

Thanks in advance
Is there any way to trigger an event listener registered in the event provider of my Laravel app using this server?