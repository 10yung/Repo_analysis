**Describe the bug**
When you try to render a recycler with a lot of images and some of them don't exist, the performance of the view is seriously affected.

**Expected behavior**
The performance of the view shouldn't be affected. As an example, the performance for this scenario with Glide works right.

**To Reproduce**
Create a list of urls pointing to a non existing link, create an adapter for a recycler and try to scroll the recyclerview. You will see a problem with the performance.

**Logs/Screenshots**
Not applicable.

**Version**
0.9.0
Hi, first off, thanks for the great work on this library.

We're facing one issue when using Coil for loading images with Exif rotation which are saved on the device, using the `load(Uri)` function. The Exif rotation is not applied at all. This was reproducible on 2 of our test devices, an LG G3 and an LG G2 Mini, both API 21. I'm assuming it's the same on other devices with API 21, though I don't know for sure.

The `ExifInterface.getRotationDegrees()` call used in `BitmapFactoryDecoder.decode()` always returns 0 on these devices.

Here's a small sample app demonstrating the issue:
[https://github.com/dominikgold/CoilExifRotationTest](https://github.com/dominikgold/CoilExifRotationTest)
Some of my favorite candidates for fix are in `RealBitmapPool`:

    if (SDK_INT >= O) {
        configs += Bitmap.Config.RGBA_F16
    }

    require(SDK_INT < O || config != Bitmap.Config.HARDWARE) { "Cannot create a mutable hardware Bitmap." }

Using actual API level values will promote readability, i.e. nobody will have to ponder for minutes why the hell do we check whether SDK_INT is less than, greater than or equal to zero.

See https://twitter.com/jakewharton/status/1049421501559128065 for discussion. Main points:
* [JWh] Just use the numbers. They already convey what you want. `@RequiresApi(21)`, `minSdkVersion 21`, `setWhateverApiLevel(21)`. `CAN_USE_THING_API_LEVEL = 21`.
* [JWa] Agree, though this doesn't solve the practical issue of being unable to find API-specific code reliably. Searching for two digits in a large project is still painful. Searching for `@RequiresApi`, `@SdkSuppress`, `Build.VERSION.SDK_INT`, and comments is less painful but not obvious.
* [JWh] True! Although I rarely need to find all of those at once. Usually it's just one and you always need to use the annotation/field because someone may have used a number or a semantic constant like `FINGERPRINT_ENABLED`.
**Describe the bug**
After updating coil to version 0.9.1, icons downloaded from network are not loading anymore.

**Expected behavior**
Icons should be loading normally, instead, just a transparent element is left (icons targets are not `ImageViews` but `CircularImageView`s instead ([here the library](https://github.com/hdodenhof/CircleImageView)), inside a `RecyclerView`

**To Reproduce**
Try loading URL images inside a `RecyclerView` using a `CircularImageView`

**Logs/Screenshots**
I'm not able to report any logs yet, but I will be following up with more details

**Version**
Android 10, OxygenOS 10.0.7
**Describe the bug**
When using Chris Banes' PhotoView library with Coil + crossfade the pinch-to-zoom is broken. This appears to be due to CrossfadeDrawable updating the loaded drawable's bounds. Unless I'm mistaken I only see two options to get around this. Either disable crossfade for PhotoView or create my own transition.

**Expected behavior**
Pinch-to-zoom continues to function with crossfade enabled and without creating custom transition.

**To Reproduce**
Load an image into a PhotoView using Coil with crossfade enabled.

**Version**
This is with version 0.9.1 of Coil

Signed-off-by: Yu-Hsuan Lin <b95505017@gmail.com>
**Is your feature request related to a problem? Please describe.**
Right now I want to use coil's coil gif extension together with transformations, it seems that Gif extension is ignoring them

I did:
```
Coil.setDefaultImageLoader(ImageLoader(this) {
            componentRegistry {
                add(GifDecoder())
            }
        })
```
and load image with:
```
imageView.load(R.drawable.some_gif_image) {
                placeholder(R.drawable.placeholder)
                transformations(CircleCropTransformation())
                repeatCount(0)
            }
```

**Describe the solution you'd like**
Gid extension should apply transformations 


Hi all,

Had a look at the new Transition API earlier today, and added a draft PR here: https://github.com/chrisbanes/tivi/pull/526

Overall I liked the API and it achieves what I needed it to :smile:. Some small API feedback:

* Is the `Event` class really an event? Looking at the items in it, maybe `LoadResult` is a better name?
* Similarly the naming of `Transition.Adapter` isn't obvious to me. Maybe just `TransitionTarget` which extends `Target`?
* The naming of `Event.CACHED` could be clearer imo. The term `cached` is a very overloaded term, especially for image loading libraries. Maybe be more specific and call it `CACHED_MEMORY`?

Hope that helps!
I am using the code below to load images from a URL into the target imageview
When i try to load the images without internet connection,the error image is displayed,then if i turn on internet connection,unlike Glide, Coil doesn't try to reload the images from the URL.

```
 fun loadImageWithCoil(
        target: ImageView,
        imgUrl: String?,
        placeHolder: Int = R.drawable.profile_pic_placeholder,
        errorImg:Int=R.drawable.ic_terrain_black_24dp
    ) {
        target.load(imgUrl) {
            placeholder(placeHolder)
            crossfade(true)
            error(errorImg)
        }

    }
```
Is this currently not possible or I'm not doing it right?.

### What's the state of this PR?

`MediaMetadataRetriever` requires the ability to read forward/backwards anywhere in the video file. For large video files this isn't feasible to buffer into memory. Also, we can't rely on having a backing file. This isn't feasible to add to Coil since the `Decoder` intentionally has no knowledge of the backing data source.

If you have an idea of how to implement this with no breaking changes please let me know (or comment on this PR)!