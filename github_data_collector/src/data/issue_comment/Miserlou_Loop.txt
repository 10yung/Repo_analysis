This is a really basic one that used to work that appears not to work for me anymore?
Hi,
at the beginning I did not plan to move so much code around, but here we are :smiley: 
Before I go any further it might be a good idea to get some feedback from you and have a conversation to see where things go.

If you don't like my changes, feel happy to take only what you like or nothing at all (I'm not emotional attached to it â€“ coding was just-for-fun). This code should behave exactly like the current master code.

Since the code has no tests, all I did was a quick manual test, through the split-up code structure should it make easier to write tests in future.
It would be nice if `loop-rs` could run the loop body in parallel (using num-cpu).
Suggestion for the flag name: `--parallel` `-p`.
We have a bunch of images that need to be pushed to a registry so often, so we do them all in one big script.  Problem is Gitlab's container registry constantly fails all the time so `loop` is a perfect fit for this.
Trying something like: 

`loop -s --summary -- scripts/push-images.sh` (tried with `-i` as well)

But the problem is that there is zero output. 

Whereas normally our `scripts/push-images.sh` outputs something like:
```
Pushing registry.gitlab.com/thing:prod
The push refers to repository [registry.gitlab.com/thing]
8850e5e866c3: Preparing
6d1eb370deee: Preparing
e6a9e93f2e3d: Preparing
f721b22510f1: Preparing
371e12a4bca7: Preparing
c97278a08a46: Preparing
7bff100f35cb: Preparing
c97278a08a46: Waiting
```
And updates as the scripts progress through each image.

Is there anyway to keep that stdout and print it to term live as `loop` receives it from the subprocess?


Ran `$ cargo build` and rustc **(ver 1.24.1)** output the following:
```
   Compiling loop-rs v0.4.0 (file:///home/um-li/Downloads/Loop)
error: non-reference pattern used to match a reference (see issue #42640)
  --> src/main.rs:99:20
   |
99 |             if let Some(string) = &opt.until_contains {
   |                    ^^^^^^^^^^^^ help: consider using a reference: `&Some(string)`

error: non-reference pattern used to match a reference (see issue #42640)
   --> src/main.rs:106:20
    |
106 |             if let Some(regex) = &opt.until_match {
    |                    ^^^^^^^^^^^ help: consider using a reference: `&Some(regex)`

error: non-reference pattern used to match a reference (see issue #42640)
   --> src/main.rs:114:16
    |
114 |         if let Some(error_code) = &opt.until_error {
    |                ^^^^^^^^^^^^^^^^ help: consider using a reference: `&Some(error_code)`

error: non-reference pattern used to match a reference (see issue #42640)
   --> src/main.rs:116:17
    |
116 |                 ErrorCode::Any => if !result.exit_status.success() {
    |                 ^^^^^^^^^^^^^^ help: consider using a reference: `&ErrorCode::Any`

error: non-reference pattern used to match a reference (see issue #42640)
   --> src/main.rs:119:17
    |
119 |                 ErrorCode::Code(code) =>  {
    |                 ^^^^^^^^^^^^^^^^^^^^^ help: consider using a reference: `&ErrorCode::Code(code)`

error: aborting due to 5 previous errors

error: Could not compile `loop-rs`.
```
I want `loop` to be in Debian and Ubuntu! Let's make that happen!

Required first:
* https://github.com/Miserlou/Loop/issues/16
* Actually write some useful tests

The README makes it seem that `--until-error` does not require an argument:

```
Or until it fails with --until-error (which also accepts an optional error code):
```

But when I try it without an argument, I get this:

```
error: The argument '--until-error <until_error>' requires a value but none was supplied

USAGE:
    loop <input> --count-by <count_by> --every <every> --offset <offset> --until-error <until_error>
```

So I think that maybe `--until-fail` is what I want, based on this:

```
Or, if you have a list of files but need to find the one which causes your program to fail:
$ ls | loop './my_program $ITEM' --until-fail;
```

But I get this:

```
error: Found argument '--until-fail' which wasn't expected, or isn't valid in this context
```

And I still don't know how to run a command until it fails. Seems like it is currently impossible.
The [official recommendation](https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html) is that this should be committed into the repository. Since it's a binary, compatibility with other versions of libraries isn't important and having the lock file around can potentially help avoid annoying breakages in the future.
I thought the shell completions would be very useful in 'loop'. And since the project already uses 'clap' it was very easy to add a 'completions' subcommand to generate them the same way 'rustup' does.
When using the `--until-time` flag the timestamps you use are implicitly in UTC. It would be nice to this default to the computer's local time, or have a flag to specify the timezone.