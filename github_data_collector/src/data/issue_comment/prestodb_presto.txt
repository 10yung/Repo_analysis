```
== RELEASE NOTES ==

General Changes
This change introduces the Alluxio metastore which connects to the Alluxio catalog service. See: https://docs.alluxio.io/os/user/2.1/en/core-services/Catalog.html for more information on the catalog service. In this PR we introduce the bare minimum to configure and use the Alluxio catalog. Reads are the only supported operation at the moment.

```
== NO RELEASE NOTE ==
```


```
== NO RELEASE NOTE ==
```

```
== NO RELEASE NOTE ==
```

```
== RELEASE NOTES ==

General Changes
* Improve built-in function resolution performance by caching function resolution results.
```
Gather some stats to better understand function resolution and function usage.

```
== NO RELEASE NOTE ==
```

â€¦ds max size

When a single row in ```ArrayAggregationFunction``` exceeds the ```MAX_ARRAY_SIZE``` (aka ```INT_MAX - 8```) we return an internal error to the customer from the Airlift precondition checks. This PR changes the behavior to return a ```USER_ERROR``` instead by actively checking for the size of the block being appended to.


```
== NO RELEASE NOTE ==
```

Use Presto to connect to enable mongodb of SSL / TLS. Error is reported. I can connect with studio3t or command line. How can I solve this problem???
JTS isValid and isSimple semantics are closer to the OGC/ISO standards than is Esri -- in fact, Esri gives the same answer for isValid and isSimple.  This means that geometries will need to be checked for both validity and simplicity, and a small set of geometries might have changed their simplicity/validity property.  In addition, the `geometry_invalid_reason` function will return different (but semantically similar) strings.

```
== RELEASE NOTES ==

General Changes
* ST_IsValid and ST_IsSimple adhere to the ISO/OGC standards more closely.  In particular,
previously ST_IsValid and ST_IsSimple always gave the same answer; now they may be different.
Users should check both IsValid and IsSimple to be sure their geometries are well-behaved.
* geometry_invalid_reason will return different but semantically similar strings.  It will return the reason for invalidity if it exists; else it will return the reason for non-simplicity if it exists; else it will return null.
```

Currently, user do not have the ability to see the definition of the SQL functions after they created them. Similar to `SHOW CREATE TABLE` and `SHOW CREATE VIEW`, we should also support a similar (though not specified in SQL-standard) syntax for this functionality.

# Syntax
For `SHOW CREATE TABLE/VIEW`, given a fully-qualified name of a table/view, the object is always unique. However, this is not the case for `SHOW CREATE FUNCTION` as there might be multiple signatures for the same name.

Hence, I'm proposing the following syntax. This is similar to `DROP FUNCTION` and `ALTER FUNCTION` where an optional data type list is allowed.

```
<show create function statement> ::=
    SHOW CREATE <specific routine designator>

<specific routine designator> ::=
    <routine type> <member name>

<routine type> ::=
    FUNCTION

<member name> ::=
    <member name alternatives> [ <data type list> ]

<member name alternatives> ::=
    <schema qualified routine name>

<data type list> ::=
    <left paren> [ <data type> [ { <comma> <data type> }... ] ] <right paren>
```

# Behavior
A `SHOW CREATE FUNCTION` query outputs one column "Create Function", the formatted SQL text that would create the exact same function, for each signature that matches what the query specifies.

cc @rongrong @kaikalur 
```
== RELEASE NOTES ==

General Changes
* Add support to show whether functions are built-in in ``SHOW FUNCTIONS``.
* Add support to show whether functions have variable arity in ``SHOW FUNCTIONS``.
```
