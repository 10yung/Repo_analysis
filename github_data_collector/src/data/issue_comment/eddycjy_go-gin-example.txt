貌似 scratch 没有 sh 或 bash？会报：运行编译好的程序会报：
```
OCI runtime create failed: container_linux.go:346: starting container process caused "exec: \"/bin/sh\": stat /bin/sh: no such file or directory": unknown
```
个人建议，把model与dao层还是分离比较好
在go version go1.12.9 windows/amd64、swag version v1.6.3的环境下使用swag init会报错：ParseComment error in file routers\api\v1\article.go :can not find schema type: "v1.json"，查询了相关的文章后应该将// @Success 200  {string} json "{"code":200,"data":{},"msg":"ok"}"修改为// @Success 200  {string} string "{"code":200,"data":{},"msg":"ok"}"
首先说明下，如果没有获取token，提交POST请求的时候没有添加token参数，会提示{"code":400,"data":null,"msg":"请求参数错误"}
比如：curl -X POST 'http://127.0.0.1:8000/api/v1/articles?tag_id=1&title=test1&desc=test-desc&content=test-content&created_by=test-created&state=1&cover_image_url=http://www.baidu.cn'


1.首先获取token
curl -X GET 'http://127.0.0.1:8000/auth?username=test&password=test123'
{"code":200,"msg":"ok","data":{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjA5OGY2YmNkNDYyMWQzNzNjYWRlNGU4MzI2MjdiNGY2IiwicGFzc3dvcmQiOiJjYzAzZTc0N2E2YWZiYmNiZjhiZTc2NjhhY2ZlYmVlNSIsImV4cCI6MTU3Mjk1NDUwMiwiaXNzIjoiZ2luLWJsb2cifQ.RvRDDP5DCscdsDFex31S6LyH6iAhWUIwTZU_nZEtJXc"}}

2.添加tag
curl -X POST 'http://127.0.0.1:8000/api/v1/tags?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjA5OGY2YmNkNDYyMWQzNzNjYWRlNGU4MzI2MjdiNGY2IiwicGFzc3dvcmQiOiJjYzAzZTc0N2E2YWZiYmNiZjhiZTc2NjhhY2ZlYmVlNSIsImV4cCI6MTU3Mjk1NDUwMiwiaXNzIjoiZ2luLWJsb2cifQ.RvRDDP5DCscdsDFex31S6LyH6iAhWUIwTZU_nZEtJXc&name=tim&state=1&created_by=tim'
{"code":200,"msg":"ok","data":null}
数据库里blog_tag表会插入一行数据

3.使用添加的tag_id 添加article
curl -X POST 'http://127.0.0.1:8000/api/v1/articles?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjA5OGY2YmNkNDYyMWQzNzNjYWRlNGU4MzI2MjdiNGY2IiwicGFzc3dvcmQiOiJjYzAzZTc0N2E2YWZiYmNiZjhiZTc2NjhhY2ZlYmVlNSIsImV4cCI6MTU3Mjk1NDUwMiwiaXNzIjoiZ2luLWJsb2cifQ.RvRDDP5DCscdsDFex31S6LyH6iAhWUIwTZU_nZEtJXc&tag_id=3&title=golanglearning&desc=study&content=gogogo&created_by=lee&state=1&cover_image_url=http://www.baidu.cn'
{"code":200,"msg":"ok","data":null}

4.获取article
curl -X GET 'http://127.0.0.1:8000/api/v1/articles?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjA5OGY2YmNkNDYyMWQzNzNjYWRlNGU4MzI2MjdiNGY2IiwicGFzc3dvcmQiOiJjYzAzZTc0N2E2YWZiYmNiZjhiZTc2NjhhY2ZlYmVlNSIsImV4cCI6MTU3Mjk1NDUwMiwiaXNzIjoiZ2luLWJsb2cifQ.RvRDDP5DCscdsDFex31S6LyH6iAhWUIwTZU_nZEtJXc'

{
code: 200,
msg: "ok",
data: {
lists: [
{
id: 1,
created_on: 1572944291,
modified_on: 1572944291,
deleted_on: 0,
tag_id: 1,
tag: {
id: 1,
created_on: 1572944243,
modified_on: 1572944243,
deleted_on: 0,
name: "li1",
created_by: "test-created",
modified_by: "",
state: 1
},
title: "test1",
desc: "test-desc",
content: "test-content",
cover_image_url: "http://www.baidu.cn",
created_by: "",
modified_by: "",
state: 1
},
{
id: 2,
created_on: 1572945959,
modified_on: 1572945959,
deleted_on: 0,
tag_id: 2,
tag: {
id: 2,
created_on: 1572945705,
modified_on: 1572945705,
deleted_on: 0,
name: "lee",
created_by: "lee",
modified_by: "",
state: 1
},
title: "test1",
desc: "test-desc",
content: "test-content",
cover_image_url: "http://www.baidu.cn",
created_by: "",
modified_by: "",
state: 1
},
{
id: 3,
created_on: 1572954204,
modified_on: 1572954204,
deleted_on: 0,
tag_id: 3,
tag: {
id: 3,
created_on: 1572953649,
modified_on: 1572953649,
deleted_on: 0,
name: "tim",
created_by: "tim",
modified_by: "",
state: 1
},
title: "golanglearning",
desc: "study",
content: "gogogo",
cover_image_url: "http://www.baidu.cn",
created_by: "",
modified_by: "",
state: 1
}
],
total: 3
}
}

欢迎大家一起来讨论！

注解中返回的对象是app.Response，包含了code、msg、data，我想在data中包含详细的结构体应该怎么做呢？
![image](https://user-images.githubusercontent.com/43266490/67223981-db9d4400-f462-11e9-807c-8f294643e398.png)
这个结果我是通过把data中的数据类型改成了对应的结构体，不过我有很多这样的返回类型，不希望每一个返回类型都建立一个相应的Respose去做自动生成

```
 curl -X POST http://127.0.0.1:8000/api/v1/articles  \
            -H "Content-Type: application/json"  \
            -d '{"tag_id":1,"title":"dsfdf","desc":"dsfdf","content":"dsfdf","cover_image_url":"dsfdf","state":1}' -i
```

在 [此处打印](https://github.com/EDDYCJY/go-gin-example/blob/a98c25f2172a74bcf9cd6272a7b0023480cdfa92/pkg/app/form.go#L13)

得到`tag_id`为0



环境mac
```
→ go version
go version go1.13 darwin/amd64


→ go env
GO111MODULE="on"
GOARCH="amd64"
GOBIN="/usr/local/go/bin"
GOCACHE="/Users/yangminghui/Library/Caches/go-build"
GOENV="/Users/yangminghui/Library/Application Support/go/env"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="darwin"
GONOPROXY=""
GONOSUMDB=""
GOOS="darwin"
GOPATH="/Users/yangminghui/go"
GOPRIVATE=""
GOPROXY="https://goproxy.io"
GOROOT="/usr/local/go"
GOSUMDB="sum.golang.org"
GOTMPDIR=""
GOTOOLDIR="/usr/local/go/pkg/tool/darwin_amd64"
GCCGO="gccgo"
AR="ar"
CC="clang"
CXX="clang++"
CGO_ENABLED="1"
GOMOD="/dev/null"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/d3/hm2xv9js389cp62hvzvgpv980000gn/T/go-build504395911=/tmp/go-build -gno-record-gcc-switches -fno-common"

```







auth 应该用 POST，而不是 GET，不符合HTTP标准

https://github.com/EDDYCJY/go-gin-example/blob/a98c25f2172a74bcf9cd6272a7b0023480cdfa92/routers/api/auth.go#L27
1.13 引入了一些 errors 的新方法，现在对于error处理不是很完善。 特别是api返回部分
在models中的tag和article都包含一个
`BeforeCreate(scope *gorm.Scope) error 
 BeforeUpdate(scope *gorm.Scope) error
`
的方法,但是他们都有嵌套Model,所以可以根据go的特性,直接在Model中定义这两个方法
`
func (model *Model) BeforeCreate(scope *gorm.Scope) error
func (model *Model) BeforeUpdate(scope *gorm.Scope) error
`
这样可以简化代码,方便维护