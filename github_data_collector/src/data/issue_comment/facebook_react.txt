Not really a bug but something that bothered/concerned me when writing hooks. Initially, I thought the dispatcher functions for `useState` and `useReducer` retained the same reference, but it wasn't until today when the dispatcher functions caused my `useEffect` hooks to re-run.

I was expecting this:

```js
const [myState, setState] = React.useState(myInitialValue);

React.useEffect(() => {
  console.log("Dispatcher changed!");
}, [setState]);

React.useEffect(() => {
  // Trigger an update on mount
  setState(newValue);
}, []);
```
Not to log "Dispatcher changed!"

I think these dispatcher functions should really retain its references across updates and re-renders (since old dispatcher references can still update the state), or is there any motivation as to why the reference isn't kept?
ðŸ‘‰ Please follow one of these issue templates:
- https://github.com/facebook/react/issues/new/choose

Note: to keep the backlog clean and actionable, issues may be immediately closed if they do not follow one of the above issue templates.

ðŸ‘‰ Please follow one of these issue templates:
- https://github.com/facebook/react/issues/new/choose

Note: to keep the backlog clean and actionable, issues may be immediately closed if they do not follow one of the above issue templates.

I am trying to create a React web app and React-native app with monorepo by using yarn workspaces. So I created web and controllers and it works fine. I was able to make graphql queries to my apollo-express server. But, after adding react-native application I see this:
[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/KbvYG.png

I am 100% that I am not breaking any react hooks rules because before adding react-native application it was work fine.

Is there any way how can I solve it?

Apollo controller

    import { useQuery } from "@apollo/react-hooks";
    import gql from "graphql-tag";
    
    export const useHelloQuery = () => useQuery(
         gql`
             {
                 hello
             }
         `
    )


React component:

    function Test() {
         const data = useHelloQuery();
    
         return (
              <Text>awesoe</Text>
         );
    }
    

before adding react-native it was exactly same
In order to make focus/blur work for Fabric we need to make event targets be a component instance instead of a react tag. 

That PR has landed behind a feature flag. Before we can land this we need that to roll out completely and flip the feature flag on by default.

This PR then updates the Renderer integration with TextInputState to handle instances instead of reactTag.

In order to make that work, we have to have an instance. Which means that components with NativeMethodsMixin and ReactNative.NativeComponent will no longer be able to call `.focus` or `.blur`. This is a breaking change but we are okay with that. For Fabric components implemented with those aren't supported anyways.

This changes the HostComponents, making them pass themselves to TextInputState.

Also added tests.

For Facebook employees: 
This PR will need to land and by synced in conjunction with D19458214
When owner and self are different for string refs, we can't easily convert them to callback refs. This PR adds a warning for string refs (also behind the `warnAboutStringRefs` flag) when owner and self are different to tell users to manually update these refs.
<!--
  Thanks for submitting a pull request!
  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.

  Before submitting a pull request, please make sure the following is done:

  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.
  2. Run `yarn` in the repository root.
  3. If you've fixed a bug or added code that should be tested, add tests!
  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.
  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.
  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press "Inspect".
  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).
  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.
  9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).
  10. If you haven't already, complete the CLA.

  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

Makes `yarn audit` happier

## Test Plan

HTML coverage report still works
In React Fiber implementation everywhere prop objects are checked using "===" operator, which in case of object doesnâ€™t verify using deep equality check, and works like a reference equality.
See below for the code mentions. 

React version:
16.12.0
React-Dom version:
16.11.0

## Steps To Reproduce

1. Write the following code to test it.
2. Check in the console.

```js

const logDifferences = (nameOfComponent) => (oldProps, newProps) => {
  const serializedOldProps = JSON.stringify(oldProps);
  const serializedNewProps = JSON.stringify(newProps);
  console.warn(`[${nameOfComponent}] Differences --> `, "old props :", serializedOldProps, "new props :", serializedNewProps, "verdict : ", serializedOldProps !== serializedNewProps);
};

class Child extends React.Component {
  componentWillReceiveProps (nextProps, nextContext) {
    logDifferences("Child")(this.props, nextProps);
  }

  render () {
    return (<>Child got rendered at : {new Date().toISOString()}</>);
  }
}

class SweetChild extends React.PureComponent {
  componentWillReceiveProps (nextProps, nextContext) {
    logDifferences("SweetChild")(this.props, nextProps);
  }

  render () {
    return (<>Sweet Child got rendered at : {new Date().toISOString()}</>);
  }
}

class Parent extends React.Component {
  state = {currentDate: new Date()};

  componentDidMount() {
    setInterval(()=> this.setState({currentDate: new Date()}), 500);
  }
  
  render() {    
    return (
      <div>
        Parent state updated at : {this.state.currentDate.toISOString()}
        <br />
        <Child a="1" b={4}/>
        <br />
        <SweetChild a="1" b={4}/>
      </div>
    );
  }
} 

ReactDOM.render(<Parent />, document.body);

```

Link to code example:

https://codepen.io/ppanda-beta/pen/gObdvwO?editors=0011


## The current behavior
For Component instances, `componentWillReceiveProps` is  called and component is re rendered
For PureComponent instances, `componentWillReceiveProps` is  called but component is not re rendered when props are `shallowEqual`


## The expected behavior
For both Component and PureComponent, componentWillReceiveProps should not be called, and not rerendered. 


## Possible reasons 
https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L1034
https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L1051-L1056
https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L1052-L1053
https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L1069-L1070
https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L1060-L1063
https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react-reconciler/src/ReactFiberClassComponent.js#L286-L288

## Temporary Solution
Override `  shouldComponentUpdate(nextProps, nextState, nextContext)` to stop extra re-rendering. 

## Steps To Reproduce

1. Hover a component in DevTools
2. *Keep hovering it for a second or so*
3. Quickly move the cursor out of the DevTools without hovering anything else

Expected: DOM highlighting goes away.
Actual: DOM highlighting gets stuck.

![](https://d1sz9tkli0lfjq.cloudfront.net/items/2o2r240l0o3i1B0d1n3J/Screen%20Recording%202020-01-16%20at%2005.14%20PM.gif?v=e1a91e13)
This PR fixes: #17832

* Still inject Global Hook Code in text/plain case. It hasn't been ignored unintentionally in #17739


