Currently, one has to use `with_context` to pass a string that is built out of several components:

```rust
function_returning_result()
   .with_context(|| format!("failed to fetch something with id {}", id))?
```

It would be a nice ergonomic improvement, if we could do:

```rust
function_returning_result()
   .context("failed to fetch something with id {}", id)?
```

I am unaware of a way in Rust to do functions with variadic arguments but something that should be possible is:

```rust
function_returning_result()
   .context(format_args!("failed to fetch something with id {}", id))?
```

`format_args!` avoids heap-allocations, hence it should be fine to invoke this outside of a closure.

Thoughts?
Likely there are even better ways of doing that.

My main usecase is passing a string to `context` that includes arguments from the current scope.
If call macro as: anyhow!("{} not found") - there are no compilation error that argument must be provided for string interpolation. Like in format macro.
First, this crate is awesome. I feel like Rust's error story is starting to feel really ergonomic.
This crate looks like a very nice Error type to reach for when working with a leaf/application crate.

Have you thought about working towards adding it to `std` ?
 
 * `anyhow::Error` could be added as `std::error` ( as a pseudo-primitive ) via the same hack that `i32` and `std::i32` are merged
 * `std::error` could be a very good default for various `Err`, `Error`, and `E` type parameters
 * `std::error` in a future edition could be added to the prelude as just `error` 

