This is a bit similar to #68, but related to time.

I would love to print something like this:

> Your premium subscription expires in 3 weeks.

Trying this one:

```go
fmt.Printf("Your premium subscription expires in %v.\n", username, humanize.RelTime(premiumExpiration, time.Now(), "", ""))
```

But that becomes:

> Your premium subscription expires in 3 weeks .

The reason seem to be the `defaultMagnitudes`, which are:

```go
var defaultMagnitudes = []RelTimeMagnitude{
	{time.Second, "now", time.Second},
	// ...
	{Month, "%d weeks %s", Week},
	// ...
	{math.MaxInt64, "a long while %s", 1},
}
```

Do you think it makes sense to change this so that when the `blbl` parameter is empty, the space is automatically removed?
Fixes #83 
**What:**
When using the functions `Plural`/`PluralWord` with a quantity of 0, those functions return the plural word.

**Why:**
`Plural` function is based on `PluralWord` function. This last one is strictly checking that the [quantity is equal to 1](https://github.com/dustin/go-humanize/blob/master/english/words.go#L30) in order to return the singular word.
However, it should also return the singular word in case the value is 0.

Ex: `2 pending requests`, `1 pending request`, `0 pending request`
You already took the time to put English pluralization in its own folder, it seems to make it more possible to internationalize. So you should also move away from calling it commas for "Thousands Separator", because many countries use "." not comma. Basically it is flipped. You don't have to internationalize yet but it would be much more clear for an international audience if you used the term Thousands Separator over commas. 
Hi,

I am using go-humanize for some backend code and BenjaminVanRyseghem/numbro for frontend code. Unfortunately, these libraries have slightly different semantics when humanizing numbers, resulting in different reports depending on where data is processed.

For example, go-humanize always omits sub-whole digits when applying `SIWithDigits(input, 1, units)`, while `numbro(input).format('0.0a')` always keeps sub-hole digits.

https://github.com/BenjaminVanRyseghem/numbro/issues/434

I have asked numbro to make trailing `.0` optional in the output. That would at least match how go-humanize behaves.

Meanwhile, it would also be helpful for go-humanize to provide an option to keep sub-hole digits in SI text, as another way to get these libraries working in sync.
Currently, `FormatFloat` won't auto remove the trailing zeros at the decimal places

https://play.golang.org/p/pc-_YcJorg9
Related PR: https://github.com/dustin/go-humanize/issues/68
Don't assign values we don't check.
I would like to see functionality for monetary abbreviation.

For example, an application I wrote recently integrates with a game I play. It displays in game currency with abbreviations. $1,000,000 becomes $1m, $150,899 becomes $150.9k, etc.

I already have an implementation that I made, so I was wondering if this functionality would be welcome in this project.
Hi, Dustin.
I like your lib go-humanize. And I want to suggest some improvements.
This changes will allow me to use this library to manage size disk correctly. When we work with bytes to manage size disk we face to some problems with rounding values. For example, if you want to create a disk partition you have to see how much free space disk have. So, if we ask to create 1GB partition however we have 999.99 MB we got an error.
For these cases, I offer to add precision and different rounding functions.
These changes donâ€™t affect for main library functional and maintain compatibility with previous version your lib.
Please, review this code.
With hope to your approvement, Tony.
