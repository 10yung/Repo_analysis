#### Background

<!-- Required background information to understand the PR. Link here any related issues. -->

Following up the discussion here https://github.com/tsenart/vegeta/issues/462

This adds the res.Seq to the target headers with the name "X-Vegeta-Seq".
This also add a new unit test to check that the header is equal to the res.Seq.

#### Checklist

- [x] Git commit messages conform to [community standards](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).
- [x] Each Git commit represents meaningful milestones or atomic units of work.
- [x] Changed or added code is covered by appropriate tests.

#### Question
I wonder whether it is possible if we want to test TWO urls within one stress test, and we may want to distribute different amount of requests to each url every second. How to implement that if we can do? Thanks in advance.
I have latest build vegeta-12.7.0-windows-amd64.zip
when i launch following on Nginx "Welcome to nginx!" page:

`echo "GET http://localhost/" | vegeta attack -duration=12s`
`2019/12/26 01:39:54 bad method: "GET`

oops?
#### Question
I have correctly prepared relevant tools including dep and make, but we cannot access golang.org throughout the nation, so each build ends up with similar mistakes as the following:

The following issues were found in Gopkg.toml:
  ✗ unable to deduce repository and source type for "golang.org/x/net": unable to read metadata: unable to fetch raw metadata: failed HTTP request to URL "http://golang.org/x/net?go-get=1": Get http://golang.org/x/net?go-get=1: dial tcp 216.239.37.1:80: connect: connection timed out

Even though I tried to use a proxy, it seems that dep just cannot use the proxy!

So my question is how to compile vegeta in such a network environment? Thanks a lot in advance.
<!-- ⚠️ If you do not respect this template your issue will be closed. -->
<!-- ⚠️ Make sure to browse the opened and closed issues before submit your issue. -->

#### Proposal

<!-- Write your feature request in the form of a proposal to be considered for implementation -->

**Option 1**:

The proposal is to attach the `Result.Seq` (https://github.com/tsenart/vegeta/blob/master/lib/attack.go#L338-L342) to the `Target` that is passed to the `Targeter` https://github.com/tsenart/vegeta/blob/master/lib/attack.go#L351.
`Result.Seq` is set before the Targeter is called. Therefore, adding the a field `Target.Seq` and set it to the same value is a possibility.
I believe this one can be backward compatible and a low cost option.

**Option 2**:

Add a new option to the `Attacker` that allows the user to provide a correlation ID generator (this can be a function that returns a string). Add the generated correlation ID to the target and the Result in the `Attacker.attack` method.

#### Background

<!-- Describe the background problem or need that led to this feature request -->

We use vegeta for load testing and we report `Result`s for slow queries. We would love to have a way to correlate a `Result` to the request that was made to help us analyze if there is a systematic problem with particular queries that we use.

We use vegeta in library mode and are able to store the requests. We would want to have a correlation id and we believe that the `Result.Seq` could be it.

Note:
I recognized that it may seem related to https://github.com/tsenart/vegeta/issues/205 to which you answer that server logs could be used. However, I see 2 cases where this may be hard. Logging all requests on the server may affect the performances that we trying to test. In other cases, we may not have that possibility. I.E. we are sometimes load testing against vendors and have little visibility into their logs.

#### Workarounds

<!-- Are there any current workarounds that you're using that others in similar positions should know about? -->

By providing a custom http client that intercepts the request and response.
However, this means that the body may be read multiple times.


Add initial support for HTTP3/QUIC. This might or might not work based on the
server in used and should be treated as experimental until the standard stops
being an IETF Draft.

The PR brings it just to the initial state where you can call a server with `--http3` flag, but it might or might not work based on the supported version of QUIC on the server.

As part of the change I also had to check for the type of the `Transport` used, thus removing a possible panic. While it could have been created as a separate PR it is an integral part of this change. Also, most of the changes in `go.mod` are mostly the result of running `go mod tidy`, which was not ran before.

Testing was not fully complete for this PR, but I welcome the discussion on the best course of action on how to do so.

#### Background

QUIC is the underlying communication in uncoming HTTP3. This PR adds the basic functionality based on the latest version of the most common open source quic implementations in Go: https://github.com/lucas-clemente/quic-go

#### Checklist

- [x] Git commit messages conform to [community standards](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).
- [x] Each Git commit represents meaningful milestones or atomic units of work.
- [ ] Changed or added code is covered by appropriate tests.

<!-- ⚠️ If you do not respect this template your bug report issue will be closed. -->

#### Version and Runtime

```
Version: 12.7.0
Commit: 9c95632b3e8562be6df690c639a3f5a6f40d3004
Runtime: go1.12.4 darwin/amd64
Date: 2019-07-21T12:38:16Z"
```

#### Expected Behaviour

I wanted to have `vegeta` issue a "plain text" HTTP/2 call to my example application.  I believe elsewhere this is known as a "prior knowledge" situation.  I ran `echo http://localhost:8080/example/data | vegeta attack -duration 2s -rate 1/2s -h2c | tee results.bin | vegeta report` following the examples, and (hopefully) telling `vegeta` to send only one request through (my `-rate` option is intended to express "one request every two seconds", and two seconds is the duration of the attack).  I expected that from looking at my application's verbose logs I would see the same request as issued by `curl --http2-prior-knowledge http://localhost:8080/example/get`.

#### Actual Behaviour

My application's logs show a different request coming in.  Here is the initial log of the `vegeta` request (I am using a Netty-based server; these logs are what Netty can output to help diagnose issues):

```
FINE: [id: 0x3e6827ab, L:/0:0:0:0:0:0:0:1:8080 - R:/0:0:0:0:0:0:0:1:56563] READ: 119B
         +-------------------------------------------------+
         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |
+--------+-------------------------------------------------+----------------+
|00000000| 50 52 49 20 2a 20 48 54 54 50 2f 32 2e 30 0d 0a |PRI * HTTP/2.0..|
|00000010| 0d 0a 53 4d 0d 0a 0d 0a 00 00 12 04 00 00 00 00 |..SM............|
|00000020| 00 00 02 00 00 00 00 00 04 00 40 00 00 00 06 00 |..........@.....|
|00000030| a0 00 00 00 00 04 08 00 00 00 00 00 40 00 00 00 |............@...|
|00000040| 00 00 2e 01 05 00 00 00 03 41 8a a0 e4 1d 13 9d |.........A......|
|00000050| 09 b8 f0 1e 07 82 45 8a 60 be 47 4d 74 15 89 06 |......E.`.GMt...|
|00000060| 91 ff 86 50 83 9b d9 ab 7a 8d c4 75 a7 4a 6b 58 |...P....z..u.JkX|
|00000070| 94 18 b5 25 81 2e 0f                            |...%...         |
+--------+-------------------------------------------------+----------------+
```
Here are the `curl` logs:
```
FINE: [id: 0x94e667dc, L:/0:0:0:0:0:0:0:1:8080 - R:/0:0:0:0:0:0:0:1:56571] READ: 114B
         +-------------------------------------------------+
         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |
+--------+-------------------------------------------------+----------------+
|00000000| 50 52 49 20 2a 20 48 54 54 50 2f 32 2e 30 0d 0a |PRI * HTTP/2.0..|
|00000010| 0d 0a 53 4d 0d 0a 0d 0a 00 00 12 04 00 00 00 00 |..SM............|
|00000020| 00 00 03 00 00 00 64 00 04 40 00 00 00 00 02 00 |......d..@......|
|00000030| 00 00 00 00 00 04 08 00 00 00 00 00 3f ff 00 01 |............?...|
|00000040| 00 00 29 01 05 00 00 00 01 82 04 8a 60 be 47 4d |..).........`.GM|
|00000050| 74 15 89 06 91 ff 86 41 8a a0 e4 1d 13 9d 09 b8 |t......A........|
|00000060| f0 1e 07 7a 88 25 b6 50 c3 ab b6 d2 e0 53 03 2a |...z.%.P.....S.*|
|00000070| 2f 2a                                           |/*              |
+--------+-------------------------------------------------+----------------+
```

#### Steps to Reproduce

See above; you should be able to see differences with any arbitrary HTTP/2-aware server/endpoint.

#### Additional Context

(No additional Github issues.)

I raise this because `vegeta` reports that there was a timeout while reading the body:
```
Error Set:
net/http: request canceled (Client.Timeout exceeded while reading body)
```
…whereas the `curl` request has no such issues.

I am no kind of HTTP/2 expert so perhaps the problem lies elsewhere.

Thanks for a neat little tool.

I added the headers of a Target that's been hit in the Result on vegeta capture.
Does vegeta sends chunk data when Transfer-Encoding header is set to "chunked" while sending data?