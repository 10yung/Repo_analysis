I think listing anti-patterns with some basic reasoning about "why not" is a good idea.

Example - singleton. Although #256 has "won't fix" label
- it is in PRs section, and people (if searching history at all) are searching issues first. 
- it was misspelled, Singelton instead of Singleton, therefore impossible to find

Listing most popular anti-patterns (without actual implementation) should allow people to find the name from readme 
- immediately assume it was'n just missed by mistake
- see why it is not welcome for python projects

As far as I know almost always coverage is used to see "test coverage".
For unused branches/variables etc there are linters, dead-code finders (such as `vulture` or `dead`).

So I don't think code coverage is important to extent of running `run_all.sh` script.

I would like to 
- remove `run_all.sh`
- collect coverage 
   - only for tests
   - only for one python branch (e.g. 3.7) (although it is possible to do `coverage run -p` and then `coverage combine`)
**update** on idea of testing outputs as docstrings (e.g. with `python -m doctest`):
I couldn't find easy way to generate docstrings for `def main()`


By "testing outputs" I mean to compare script output with `### OUTPUT ###` section at the bottom of the file.
Structuring scripts like that:
```
def main():
    ...

if __name__ == "__main__":
   main()
```

allows imports of `main` in tests to evaluate and compare outputs.

It would also be more convenient to have `### OUTPUT ###` section as variable or docstring, so we do not need to parse file for such comparisons
A common pattern is page object model and loadable component, I have a source code with them
Would you accept PRs about functional programming patterns @faif ? Would probably imply some project restructuring (e.g. putting dirs "behavioral" and "structural" into "oop").
I haven't checked if any of the examples is simply completely copied from the web, when it would need to retain original copyright/license notice, or all of them could be claimed to be owned by contributors to this repository, but the point is that there should some clear statement on copyright/licenses for the files and possibly for the collection as a whole as well.

_3-tier.py_ and _mvc.py_ are almost identical from a high level point of view. The only difference is that in _3-tier.py_ the _logic_ instance and the _ui_ instance may be assigned to the _data_ instance explicitly. In _mvc.py_ the _model_ instance and the _view_ instance is assiged to the _controller_ instance statically during its creation.
