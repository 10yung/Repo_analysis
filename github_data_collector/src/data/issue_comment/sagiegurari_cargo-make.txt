**Describe the bug**
Running a task that launches `npx webpack-dev-server` causes a hang in windows when exiting

**To Reproduce**
1. Install node, npm, etc.
2. Create a minimal webpack project (and install webpack-dev-server)
3. Start the webpack-dev-server via npx directly:
```
npx webpack-dev-server --config webpack.config.js
```
4. Control-C to break out
5. No problem so far.. can type on the console, task manager looks clean - all good
6. Now try via `cargo make`...
7. Create following in Makefile.toml
```
[tasks.webpack-development-server]
script = ["npx webpack-dev-server --config webpack.config.js"]
```
8. Launch it via `cargo make webpack-development-server`
9. Starts fine
10. Control-C to exit
11. Appears to exit but then **terminal is messed up - can't enter text**
12. Also task manager shows additional consoles (this is after hitting control-c in the terminal but before closing the window entirely):

![image](https://user-images.githubusercontent.com/6406986/71633909-0e607700-2c20-11ea-82cb-17bd8cf3b134.png)

**Error Stack**

None - it's just that the terminal becomes unusable
**Features Description**

There is a feature for "additional_profiles" but I think it's a little limited at the moment, or maybe I don't really "get" what they are for. Today, I'm using the `env` section in tasks for specifying a feature set to test. For example, I have `dns-over-openssl` or `dns-over-rustls` features that need to be tested separately.

What I've done today is have an optional FEATURES environment variable that is set on a per task basis, for example:

```toml
[tasks.dns-over-openssl]
description = "Run all with --features=dns-over-openssl"
workspace = false
env = { FEATURES = "--features=dns-over-openssl", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/rustls;crates/https;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }
```

The issue is that this requires a task per feature. This is fine, except that it means that for each task type, say `all` (compile && test) we'd need a counter-part for the code coverage task, which would be a lot of duplicated config.

If the only env var was the FEATURES variable, this could be handled with just the cli parameter for setting environment variables, but then we couldn't also restrict the set of crates to test with CARGO_MAKE_WORKSPACE_SKIP_MEMBERS (since not all of them support the same features).

It seems like this would be a great use for profiles, but it's not clear how to do that at the moment where say you could combine the FEATURE profile with a CI, DEV, or RELEASE profile. Maybe I'm misunderstanding the docs, or possibly I'm trying to solve this problem in the wrong way.

**Describe the solution you'd like**

Allow multiple profiles to be combined via CLI arguments. e.g:

```console
> cargo make all -p ci -p dns-over-openssl
```

Load order would be left most first, to right most (maybe).

**Code Sample**

```toml
[env.ci]
CI = true

[env.dns-over-openssl]
FEATURES = "--features=dns-over-openssl"
CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/rustls;crates/https;tests/compatibility-tests;util"
```
Would you be interested in having debian packaging in the repository?

[Currently maintaining this in a fork for Pop!_OS](https://github.com/pop-os/cargo-make/tree/master/debian).
So, I've noticed a few issues with the kcov-coverage task that is in the default library. I don't feel comfortable putting up a PR against the base makefile toml, but would be happy to if you see it as desirable.

The first is that I believe coverage data is overwritten when multiple tests are run. The next is that the current grep match statement for collecting the tests isn't general enough. And finally, macOS is now supported, though I've personally run into issues with it, so continue to leave it disabled.

1) Overlapping coverage reports: I have two strategies for this. Create a new directory for each kcov run. First is a top coverage report per crate, then also a coverage directory for each test executable run. You'll notice that to facilitate this I broke out a script for kcov as well.
  a) See here for the per crate target: https://github.com/bluejekyll/trust-dns/blob/master/Makefile.toml#L390-L396
  b) See here for the per test crate:  https://github.com/bluejekyll/trust-dns/blob/master/scripts/kcov.sh#L12-L13

2) For the test matching, I grabbed a project `cargo-with` which uses the metadata from cargo to get all the tests. I was thinking, we might want to grab all targets in `cargo-make` and build some ways of filtering those, and offering the ability to wrap those in the same way as `cargo-with`, as I think it would be useful. Now I customized the `cargo-with` project to run all tests with a given command, and that hasn't landed in that project yet.
  a) see install here: https://github.com/bluejekyll/trust-dns/blob/master/Makefile.toml#L98-L103 
  b) see usage here: https://github.com/bluejekyll/trust-dns/blob/master/Makefile.toml#L431-L432
  c) the PR on`cargo-with`: https://github.com/cbourjau/cargo-with/pull/29

3) And finally, mac build, here's the install code I used for that. Now I found it beneficial to split the installer from the kcov task itself to ease testing the build of kcov, not sure if that's something you want: https://github.com/bluejekyll/trust-dns/blob/master/Makefile.toml#L137-L144

Also, thank you so much for this project. I think it's definitely the missing automation tool for Rust, and really fit my needs perfectly. I really appreciate your work on this. Thanks!
**Features Description**
On linux/mac the exe is not locked while running so if the min version is defined, we could also have cargo-make validate and self update if need and configured to do so.
naturally windows is out of scope here.
(this is based on discussion in #265)

**Describe the solution you'd like**
```toml
[config]
min_version = "0.21.0"
self_update = true
```
In case the min version is higher then installed and self_update = true, cargo-make will first trigger self update and then restart.
restarted process would NOT support self update.

Adding documentation example of a working CI build using cirrus-ci.org (.cirrus.yml)
The list all steps throws a list of all steps split by category.
print steps only prints the relevant flow that was asked (execution plan) with a lot more detail.

need to think of a clearer format that passes on more information more clearly.

based on conversation in #225
This is continuation of #196 
seems that the rust env::set_var api is not supporting it as is at the moment.
Closes #131 
<!-- markdownlint-disable first-header-h1 no-multiple-blanks first-line-h1 required-headers -->
#### Problem Description
Rather than only supporting inline code, why not have a path parameter? - How about going further, and making that path one of URL or URI (see [RFC for file URI](https://tools.ietf.org/html/rfc8089))?

If URL, allow for a SHA256 sum to specified.

#### Potential
cargo-make becomes a package manager ðŸ˜® 

---

What do you think? ðŸ˜ƒ 