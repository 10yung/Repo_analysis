## Problem

`sso_auth` is using `go-micro` to manage variable configuration. `sso_proxy` is still using the original, outdated methods and should be updated to also use `go-micro`

## Solution

Update `sso_proxy` to use `go-micro`. 

## Notes

Some additional tests and documentation still needed - hence the current drop in test coverage (which is causing the github checks to fail)
I find some structs are repeat, such as UpstreamConfig struct and  OptionsConfig struct, there are some fields are repeated, and I saw the sso-proxy code , and find it is superfluous, there are other places likes this, Do I not understand clearly? or it is design bug? 

Hey!
I have been reading around about the project and it does look very interesting.
I am trying to understand if it can fit a non-browser flow: if we wanted to integrate SSO in a CLI application, what would the preferred/recommended way to proceed?

In other words, if we want to interact with a server which is behind SSO protection, how do we get back from the browser (after a successful login) the cookies in order to use them in the CLI when making requests against the server?

## Problem

We are still calling `ValidateGroup()` directly within `sso_proxy`, but using the options/validator package elsewhere in the same logic path (originally partially due to circular imports). This makes it increasingly difficult to make sure we were running the right validations at the right time, and certain methods were growing in complexity and responsibility.

## Solution
Attempt to reunite some of the most problematic portions of code in related to the above.

High level overview of included changes:
- Moves `extendDeadline` and `withinGracePeriod` to be part of the sessions package, instead of the providers package. (In fact, a version of `extendDeadline` already exists in the session package. We now use that instead)
- Changes direct calls to `ValidateGroup` within `internal/proxy/providers/sso.go` to options/validator package calls within `internal/proxy/providers/oauthproxy.go`.
   - Introduces the `runValidatorsWithGracePeriod` helper method here to help handle cases where we want to check if the auth provider is unavailable instead of explicitly denying authentication.
- Renames the `ValidateSessionState` method to `ValidateSessionToken`, which seemed to better fit its responsibility. 
- Modify tests to explicitly test new logic

## Notes
The perhaps less obvious change is that within the `Authenticate()` method **we'll now only run  validators when the refresh or validation period has expired**. 
This is instead of running group validations when the refresh or validation period has expired, and domain/email validations on all proxied requests.




**Describe the bug**
Installed docker and docker-compose on my mac following the quick start guide.
Mac OS

> Mojave

Docker version

> Client: Docker Engine - Community
> 
>  Version:           19.03.5
>  API version:       1.40
>  Go version:        go1.12.12
>  Git commit:        633a0ea
>  Built:             Wed Nov 13 07:22:34 2019
>  OS/Arch:           darwin/amd64
>  Experimental:      false
> 
> Server: Docker Engine - Community
>  Engine:
>   Version:          19.03.5
>   API version:      1.40 (minimum version 1.12)
>   Go version:       go1.12.12
>   Git commit:       633a0ea
>   Built:            Wed Nov 13 07:29:19 2019
>   OS/Arch:          linux/amd64
>   Experimental:     false
>  containerd:
>   Version:          v1.2.10
>   GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
>  runc:
>   Version:          1.0.0-rc8+dev
>   GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
>  docker-init:
>   Version:          0.18.0
>   GitCommit:        fec3683

Docker compose version

> docker-compose version 1.24.1, build 4667896b

I'm using Google provider.

Everything works fine except that i get occasional  403 on both the http://hello-world.sso.localtest.me/, http://httpbin.sso.localtest.me/. After every 403, refreshing the page gets to to work. I see `user is no longer in valid groups` message whenever the backends throws the 403 error.


**Is your feature request related to a problem? Please describe.**

We want to use sso for our internal accesses, and also provide access to customer using basic authentication. It's great if the tool can support both mechanisms.

**Describe the solution you'd like**

No idea so far.

**Describe alternatives you've considered**

No idea so far.

**Additional context**

N/A
Signed-off-by: Daniel Sutton <daniel@ducksecops.uk>

## Problem

Not using latest golang

## Solution

update dockerfile to use golang 1.13

## Notes

Other pertinent information. Examples: a walkthrough of how the solution might work, why this solution is optimal compared to other possible solutions, or further TODOs beyond this PR.

## Problem

The current setup of html sign in and sign out pages causes some extra friction with implementing https://github.com/buzzfeed/sso/pull/252 - this change gives us some extra flexibility here. Also, having `sso_proxy` first send requests to `sso_auth`, which subsequently renders the sign in page (and redirects back) results in extra requests and extra complexity (for example, an extra layer of nested redirects needs to be specified).

## Solution

Move the sign_in and sign_out HTML pages to be rendered by sso_proxy instead of sso_auth. In doing so, simplify the flow in part between `sso_proxy` and `sso_authenticator`.

## Notes

This is a big change, so I'm working to add some more detailed descriptions of the changes (and going over any TODO's) to aid in better understanding them, as well as reviewing the PR in general.

**Is your feature request related to a problem? Please describe.**
This feature request will solve a problem we're currently experiencing when the SSO is used for a cross-origin backend server.

Suppose you have the following
api.example.com - This is an API server
app.example.com - This is a web app that performs cross-origin requests to api.example.com

Both are placed behind the SSO proxy. Thus, in order for any requests to be performed to api.example.com, the user must already be signed into the sso-auth service.

The issue is when app.example.com is loaded for the first time, the following occurs
- Request to app.example.com is sent to sso-proxy, the user is not authenticated, so is sent to the SSO sign in page
- After the user signs in successfully, they are redirected back to app.example.com where the HTML page is successfully sent to the browser and the web app begins to render
- During rendering, the web app (app.example.com) sends a cross-origin request to api.example.com. As the user has never loaded api.example.com, there is no session cookie for that request and is thus redirected to sso-auth

This is where the problem occurs, ideally what happens is
- sso-auth sees that the user is already signed in and will redirect them back to api.example.com with the session cookie

But what occurs is
- The request to sso-auth is blocked by the browser, as the preflight response from api.example.com (which is performed by sso-auth) does not include the appropriate `Access-Control-Allow-Origin` header.

**Describe the solution you'd like**
There's many possible solutions to this, from more general to specific we can
- Add the ability to configure headers to add to all sso-auth redirects through environment variables
- Add the ability to configure headers to add to all preflight requests to sso-auth through environment variables
- Add the ability to configure the `Access-Control-Allow-Origin` for the redirect responses by sso-auth

**Describe alternatives you've considered**
All alternatives are also described above. The currently workaround is to directly visit api.example.com before visiting app.example.com, so the session cookie is set for when app.example.com sends a request to api.example.com.

**Additional context**
Add any other context or screenshots about the feature request here.

## Problem

As a follow up to https://github.com/buzzfeed/sso/pull/247, this removes some redundant logic from the sso authenticator, particularly surrounding the `AUTHORIZE_EMAIL_DOMAINS` and `AUTHORIZE_EMAIL_ADDRESSES` configuration variables.

## Solution

`AUTHORIZE_EMAIL_ADDRESSES` was only used for email validation, which is already done in the proxy so this has been removed.

`AUTHORIZE_EMAIL_DOMAINS` was used in two places: email validation (which has also been removed) and population of the sign in page. 

Rather than needing to pass these domains in as configuration variables, (or reducing the usefulness of the sign in page) sso proxy adds the allowed domains to the SignInPage URL as a query parameter, which is then parsed by sso authenticator for use within the sign in page