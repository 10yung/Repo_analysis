I have gone through the page on how to apply css classes programmatically by extending the Stylesheet class. The problem I am having, and I'm sure the solution to correct this is simple, is that when applying the stylesheet to the app, like so:

```kotlin
open class MainApp : App() {
    private var mainWindow: MainWindow? = null
    private lateinit var springContext: AnnotationConfigApplicationContext

    init {
        importStylesheet(Styles::class) // <---- HERE
        reloadStylesheetsOnFocus()
    }
    ...
    private fun showMain() {
        try {
            this.mainWindow = springContext.getBean(MainWindow::class.java)
        } catch (e: BeansException) {
            if (mainWindow == null) {
                LOG.error("Failed to instantiate main window.", e)
                stop()
            }
        }
        val stage = Stage()
        stage.title = "Eve Ore Bust"
        stage.scene = Scene(this.mainWindow?.root)
        stage.isMaximized = true
        stage.isResizable = true
        stage.show()
        stage.toFront()
    }
}
```
With my style class:
```kotlin
class Styles : Stylesheet() {

    companion object {
        val navigation by cssclass()
    }

    init {
        navigation {
            button {
                backgroundColor += Color.RED
                textFill = Color.GREEN
                selected {
                    backgroundColor += Color.BLUE
                }
            }
        }
    }
}
```

And attempt to apply the **navigation** reverence to a button:
```kotlin
class NavMenu : View("Navigation View") {

    override var root = vbox()

    private val btnGeneral = button {
        addClass(Styles.navigation) // <---- HERE
        padding = Insets(5.0, 10.0, 5.0, 10.0)
        imageview("/images/icons/gear.png") {
            fitHeight = 25.0
            fitWidth = 25.0
        }
        alignment = Pos.CENTER_LEFT
        useMaxWidth = true
        graphicTextGap = 20.0
        text = "General"
    }

    init {
        with(root) {
            maxWidth = 150.0
            minWidth = 150.0
            add(btnGeneral)
    }
}
```

The style does not get applied to the button. However, the style properties will display when I apply those style properties directly in the button body.

The **NavMenu** is being added to my main view by:
```kotlin
@Component
class MainWindow @Autowired constructor(
    private val viewModel: MainWindowViewModel
) : View("Main Window") {
    override val root = vbox()

    @PostConstruct
    fun postConstruct() {
        ...
        with(root) {
            ...
            gridpane {
                visibleWhen { loggedIn }
                row {
                    constraintsForRow(0).apply {
                         percentHeight = 100.0
                    }
                    add(NavMenu()) // <---- HERE
                }
            }
        }
    }
}
```
Hi, thank you for this project! I realized it's not possible to have a `tableview` with both `enableDirtyTracking` and `rowExpander`; they both call `setRowFactory`, so one clobbers the other. I'm wondering if there's a simple way to compose the two, or any other suggestions.
I added destructuring operators to `MapChangeListener` to allow usage like this:

```kt
observableMap.addListener(MapChangeListener { (key, added, removed) ->
	// exciting stuff
})
```

This might be more controversial than #1141 since the order is relatively arbitrary (although it feels quite natural to me).
If this addition is not desired feel free to close this pull request, otherwise I should probably also add these operators to the other collection types' listeners.
Fixes #1132
*Disclaimer: this is my first time dealing with JavaFX or Observables in general, so this could be a very stupid question. I'm writing this very late in the evening with English not being my native language, so please bear with me through the couple of inevitable mistakes...*

I'm trying to build a UI that shows the progress of a processing task. There are a couple of variables that represent the progress, like elapsed time, current speed, average speed, etc.
In my original implementation these were `SimpleXProperty`-properties in my model, which I then bound to the labels in my view. However, this approach comes with a very hefty performance cost since these "progress variables" are updated (on the UI-thread) tens of thousands times per second.

I can't slow down these updates (that would slow down the processing itself), so I need a way to slow down the UI-updates. In other words: I need a not-automatically-updated `Binding`: I want to automatically update the values in the UI, but not after every single change.

I don't even remember everything I've tried anymore, but my most promising attempts were messing with the invalidation of a `Binding` (sadly the UI didn't seem update automatically) and using a second "buffer property" like this (pseudo-code):

```kt
var progress = 0;
val progressUI = SimpleIntegerProperty(0);
label.text.bind(progressUI);

runAsync { interestingProcess() } // this updates the 'progress' variable

timeline {
    this += KeyFrame(Duration.ZERO, EventHandler {
        // Synchronization of the UI props
        progressUI.set(progress);
    });

    this += KeyFrame(Duration.seconds(0.2)); // update frequency

    cycleCount = Animation.INDEFINITE;
}
```

Thread-safety issues in this example aside, this approach seems to *work*, but it feels very wrong.
I have to define each property twice (one primitive and one observable) and synchronize them manually in the event handler. This is a lot of boilerplate (especially when dealing with thread-safety) for what I'd think be a not-uncommon use-case.
The use of a timeline (as suggested by [this stackoverflow answer](https://stackoverflow.com/a/9966213/10434371)) for periodic scheduling also feels kindof "backwards", but I can see why it makes sense.

I tried to create a wrapper object to reduce boilerplate, but I ran into problems with the various non-generic (but structurally equivalent) superclasses of the primitive `SimpleXProperty` classes. (For example, both `SimpleIntegerProperty` and `SimpleLongProperty` boil down to a `Property<Number>` instead of their native variants.)

Is there a better way to handle this problem? I feel like I'm missing something very obvious here, since I can't be the first one with this issue. Sadly, after several days of searching I still haven't found a solution.

My latest "hunch" is to use the commit/rollback properties of `ViewModel`, but that doesn't feel right either.
Unfortunately the [guide page](https://edvin.gitbooks.io/tornadofx-guide/part1/11.%20Editing%20Models%20and%20Validation.html) on this topic is kind of confusing to me. To me it looks like everything up to "ItemViewModel" is written as if `PersonModel` extends plain `ViewModel`, but it already extends `ItemViewModel`. Using a plain `ViewModel` is never explained other than that it's used "for more complex situations". The example-code doesn't seem to match up with the text, but maybe that's just me.
I can't find a DSL builder for the `StackedAreaChart`. Are my eyes failing me or is it actually missing?
Is there a plan to create framework that allows to test TornadoFX application, similarly to AssertJ for Swing?
Is there a way to accomplish this using standard tornadofx dialog builder ? 
The only way i accomplished something remotely close to this is , using 
```
 this.layoutX = 200.0 //any double value
 this.layoutX = 200.0 //any double value
```
What this does is the windows shows up on its desired position first, then the settings are applied and dialog is in the position i want it.

Perhaps creating separate dialog then setting up desired position and then calling show method would be better, but still it kinda feels strange that position cant be set before the dialog is shown

I make my view named `MyView`,it extends the class named `View`

I want to add a view in the vbox after pressing a button,but it does't work.

I use this way like following code
```
override val root = hbox {
	button("add view"){
		action{
			println("done this")
			this@hobx+=MyView()
		}
	}
}
```
The console prints the message,but my view no show in the interface.

If i use this way,I can see my view
```
override val root = hbox {
	this+=MyView()
}
```
how to solve this problem?
Is there a reason why only the `piechart` builder has a `data` parameter?
https://github.com/edvin/tornadofx/blob/e63f086a5d56b373db0b058b665bf1221732a584/src/main/java/tornadofx/Charts.kt#L7-L14
https://github.com/edvin/tornadofx/blob/e63f086a5d56b373db0b058b665bf1221732a584/src/main/java/tornadofx/Charts.kt#L33-L37