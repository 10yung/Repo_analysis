I want to use this function in my project ———spl_autoload_register
I think it's more a visual studio help, but i dont know how to start. I'm totaly noob with windows, and trying to compile my extension [php-gtk3](https://github.com/scorninpc/php-gtk3) to windows.

I've compiled php-cpp with cmake, its created a phpcpp-common.lib, but i dont know how to compile first test extension without make

Can anyone help me to compile first example?
As the title says this is the standard behavior.
I cant create constant on interface, like:

```c++
Php::Interface test('Test');
test.property("X", 0, Php::Const);
```
Got error: error: ‘void Php::ClassBase::property(const char*, int32_t, int)’ is protected within this context

How to fix:
Add method(s) `void property(const char *name, int32_t value, int flags = Php::Public) { ClassBase::property(name, value, flags); }` into Php::Interface class
Hi,

Does someone created a hello world example. Connect to a database, sql command and loop to the resultset?

John
Changes to match the internal changes for PHP 7.4
I want to share my extension to my friend, I want
to know how to static compile my extension so that my friend won't install php-cpp library, Thanks
This pull request is related to #426 

For now I just commented these missing files out, now after running `cmake ..` inside of the build directory it configures the project successfully.
**Description**
Many headers are missing from `CMakeLists.txt`

I've created a basic CMakeLists.txt file and setup the required flags with the following configurations:

```
cmake_minimum_required(VERSION 3.10)

project(parent-project CXX)

set(PHPCPP_PHP_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../php-src")
set(PHPCPP_ARCH "x86_64")

add_subdirectory(PHP-CPP)
```

When running: `mkdir build && cd build && cmake ..`

**Expected**
When I run `mkdir build && cd build && cmake ..` on a parent project the cmake configurations does not throw an error.

**Actual**
When I run `mkdir build && cd build && cmake ..` on a parent project the cmake configurations is complaining on missing includes and headers from zend directory as well.

**OS**
Ubuntu 19.04

**Compiler**
C++ (Ubuntu 8.3.0-6ubuntu1) 8.3.0

PHP-CPP implementation of interfaces isn't working very well for me.

This issue comes with a github project of some combined PHP-CPP example classes.
The extension example code  that has problems with adding interfaces is found at
https://github.com/betrixed/Toml-Pun8
(Previous commit branch master 3779b8ce31bdedd0bae42ec348bfbd47134d670a)

The current master commit had its Interface declarations commented out, because php 7.3 will not run if they were compiled in. Commit number 8dc7e75fc473156465d8faf23c0a3e2cb9914216
"Interface initialisation fails - removed". appears to initialise and run a simple php test script.

This sort of worked for earlier php versions, possibly with PHP-CPP 2.1 and php 7.2. At least it didn't stop php from running. 
For what its worth, the project has a string class for utf-8 text processing, features PHP-CPP built in interfaces to implement C++ hash table string keys, KeyTable, and sequential array ValueList, as part of TOML parser, to see how this would go.

To implement the TOML document relations, KeyTable and ValueList derive from a common C++ class, TomlBase, and also multi-inherit the PHP_CPP supplied Php::Countable, ArrayAccess, Traversable, Serialiable.

The examples and documentation on PHP-CPP site are minimal for the interfaces, but then I suppose the source code is all.

So it perhaps stretches the capabilities and complexity of having "implements" user - constructed interfaces by Php::Interface on top of multi-inherited classes. However, the ArrayAccess and others are not declared by Php::Interface construction, they are bolted on deeper in the object works, by classImpl handlers. So checking for interface \ArrayAccess does not work in php code, even if the PHP-CPP extension class has compile this in.

Also  I compiled the extension  with std=c++17, to take advantage of extra template classes, while the installed shared PHP-CPP library defaults to c++11. That is most likely not an issue.

The two commits can be built with the simple Makefiles. The earlier commit code stops php from starting up, so the error occurs at module registration.
