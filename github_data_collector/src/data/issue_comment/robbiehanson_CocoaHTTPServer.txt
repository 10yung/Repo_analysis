Use NSComparisonResult for comparison.
I have created an new project with Xcode(version 10.2) and add CocoaHTTPServer to it,it not work on device.Then i used an old project (created 4 years before) ,it work.
it same like crash with deallock，anyone has the same crash？ 

Operating system: iOS
                  12.0.1 16A404
CPU: arm64
     2 CPUs

Crash reason:  EXC_BREAKPOINT / EXC_ARM_BREAKPOINT
Crash address: 0x1bdae5930
Process uptime: 4802 seconds

Thread 35 (crashed)
 0  libdispatch.dylib!__DISPATCH_WAIT_FOR_QUEUE__ + 0x1bc
 1  libdispatch.dylib!_dispatch_sync_f_slow + 0x8c
     fp = 0x000000017071a860    lr = 0x00000001bdae54cc
     sp = 0x000000017071a7d0    pc = 0x00000001bdae54cc
    Found by: previous frame's frame pointer
 2  libdispatch.dylib!_dispatch_sync_f_slow + 0x8c
     fp = 0x000000017071a8a0    lr = 0x00000001006d29e8
     sp = 0x000000017071a870    pc = 0x00000001bdae54cc
    Found by: previous frame's frame pointer
 3  XXX!-[HTTPServer stop:] [HTTPServer.m : 442 + 0x8]
     fp = 0x000000017071a8d0    lr = 0x00000001006d0ec0
     sp = 0x000000017071a8b0    pc = 0x00000001006d29e8
    Found by: previous frame's frame pointer
 4  XXX!-[HTTPServer dealloc] [HTTPServer.m : 113 + 0xc]
     fp = 0x000000017071a8f0    lr = 0x00000001007dbaa0
     sp = 0x000000017071a8e0    pc = 0x00000001006d0ec0
    Found by: previous frame's frame pointer
 5  XXX!__destroy_helper_block_ [GCDAsyncSocket.m : 2035 + 0x4]
I setup my local server on iPhone.But it just can access my 127.0.0.1:port. I want to use www.mywebsite.com to access it.How i can do?
"(![upgradeHeaderValue caseInsensitiveCompare:@"WebSocket"] == NSOrderedSame)"

Should be

"(!([upgradeHeaderValue caseInsensitiveCompare:@"WebSocket"] == NSOrderedSame))"

,right?

I want to use this library in the Swift ,but I don`t konw how to us ,can write a swift Version？thanks

For my requirement, I need to run two servers in my app. One will run for a long time and another one will do some quick tasks. Is it possible to do?
I was able to create an HTTPS server using https://github.com/robbiehanson/CocoaHTTPServer/tree/master/Samples/iPhoneHTTPServer

I faced the certificate issue while setting up HTTP'S' in iOS and I have resolved as below but I want to know it will not be rejected in the Appstore.

1. Created an SSL certificate using keychain access
2. That is successfully added in the keychain
3. I explicitly marked that certificate as trusted one fro this account so I can see the plus symbol on that certificate
4. I exported this certificate from keychain and named as TestCertificate.p12 and included in the app’s bundle
5. I have made the changes in the code as below to mentioned this as secured server

6. Changed the method to provide the certificate
 * Note: In order to support secure connections, the sslIdentityAndCertificates method must be implemented.
**/
```
- (BOOL)isSecureServer
{
	HTTPLogTrace();
	
	// Override me to create an https server...
	
	return YES;
}

```

7. Changed this method to provide the certificate for the secured connection which is available in the app’s bundle named “TestCertificate”

8. When the HTTPS server is started the certificate will be used as below
```
- (NSArray *)sslIdentityAndCertificates
{
    SecIdentityRef identityRef = NULL;
    SecCertificateRef certificateRef = NULL;
    SecTrustRef trustRef = NULL;
    
    NSString *thePath = [[NSBundle mainBundle] pathForResource:@"TestCertificate" ofType:@"p12"];
    NSData *PKCS12Data = [[NSData alloc] initWithContentsOfFile:thePath];
    CFDataRef inPKCS12Data = (CFDataRef)CFBridgingRetain(PKCS12Data);
    CFStringRef password = CFSTR("test123");
    const void *keys[] = { kSecImportExportPassphrase };
    const void *values[] = { password };
    CFDictionaryRef optionsDictionary = CFDictionaryCreate(NULL, keys, values, 1, NULL, NULL);
    CFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);
    
    OSStatus securityError = errSecSuccess;
    securityError =  SecPKCS12Import(inPKCS12Data, optionsDictionary, &items);
    if (securityError == 0) {
        CFDictionaryRef myIdentityAndTrust = CFArrayGetValueAtIndex (items, 0);
        const void *tempIdentity = NULL;
        tempIdentity = CFDictionaryGetValue (myIdentityAndTrust, kSecImportItemIdentity);
        identityRef = (SecIdentityRef)tempIdentity;
        const void *tempTrust = NULL;
        tempTrust = CFDictionaryGetValue (myIdentityAndTrust, kSecImportItemTrust);
        trustRef = (SecTrustRef)tempTrust;
    } else {
        NSLog(@"Failed with error code %d",(int)securityError);
        return nil;
    }
    
    SecIdentityCopyCertificate(identityRef, &certificateRef);
    NSArray *result = [[NSArray alloc] initWithObjects:(id)CFBridgingRelease(identityRef), (id)CFBridgingRelease(certificateRef), nil];
    
    return result;
}

```

9. Server started successfully and when I start the request from web view to my local HTTPS server I received the authentication challenge I resolved this as below

```
- (void)webView:(WKWebView *)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler
{
    //NSLog(@"Allow all");
    SecTrustRef serverTrust = challenge.protectionSpace.serverTrust;
    CFDataRef exceptions = SecTrustCopyExceptions (serverTrust);
    SecTrustSetExceptions (serverTrust, exceptions);
    CFRelease (exceptions);
    completionHandler (NSURLSessionAuthChallengeUseCredential, [NSURLCredential credentialForTrust:serverTrust]);
}

```
0. My questions are below 
 > Does Apple reject the app which runs an HTTPS server inside of the application? 
 > If Apple doesn’t reject then can I use the COCOAHTTPServer library 
 > In the above implementation,  Whether the SSL certificate enough for production? 
 > If not, then can I use any development/ Appstore certificate created from member centre?
>  If not then how can I get a certificate in order to run the HTTPS server on the iPhone?
 

I am using this library for setting up the local server. Sometimes the server adds the header along with my JSON body in the response and the last piece of JSON is not received in the client side...
   
     NSString *jsonString = [[NSString alloc] initWithData:myResponse 
   encoding:NSStringEncodingConversionAllowLossy];

        HTTPDataResponse *dataResponse = [[HTTPDataResponse alloc]initWithData:responseData];
        dataResponse.contentType = contentType;