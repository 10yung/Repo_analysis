Starting from the _GalaSoft.MvvmLight.Platform.AndroidSupport_ project, it has been created a new project (_GalaSoft.MvvmLight.Platform.AndroidX_) in order to support the `RecyclerView` from the AndroidX library over the one from the Android Support Library.

In my opinion, the _GalaSoft.MvvmLight.Platform.AndroidSupport_ project should be deprecated and not maintained any further. This is why I just duplicated the code, instead of changing the `using` clauses with conditional compiling.

How can we proceed with Nuget package publishing?

Once the Nuget package is published, this pull request closes #80.
Is it planned a migration from Android Support to AndroidX for the `GalaSoft.MvvmLight.Platform.AndroidSupport` package?

In my opinion, this is a really blocking issue because it blocks the migration to AndroidX. The migration is necessary in order to use the latest libraries for the Android Ecosystem.
Add GalaSoft.MvvmLight.Platform for .Net Core WPF (DispatcherHelper).

NOTE: version number still uses 5.4.1.1
Sometimes when sending a message a OutOfMemoryException was thrown.
.net framework 4.0
```
An unhandled exception just occurred|System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.
   at System.Collections.Generic.List`1.set_Capacity(Int32 value)
   at System.Collections.Generic.List`1.EnsureCapacity(Int32 min)
   at System.Collections.Generic.List`1.Add(T item)
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at GalaSoft.MvvmLight.Messaging.Messenger.SendToTargetOrType[TMessage](TMessage message, Type messageTargetType, Object token) in c:\MvvmLight\Source\GalaSoft.MvvmLight\GalaSoft.MvvmLight (PCL)\Messaging\Messenger.cs:line 669
   at GalaSoft.MvvmLight.Messaging.Messenger.Send[TMessage](TMessage message) in c:\MvvmLight\Source\GalaSoft.MvvmLight\GalaSoft.MvvmLight (PCL)\Messaging\Messenger.cs:line 259
```
Projects since .NET4.5 are compiled with **PORTABLE** define, which causes **PropertyChanging** property to be skipped during compilation.

Project `GalaSoft.MvvmLight.Platform (NET45).csproj` only include project `GalaSoft.MvvmLight %28PCL%29.csproj` and doesn't change its define constants
https://github.com/lbugnion/mvvmlight/blob/4cbf77ca6fbe91f83cece8fbf288b166c54202c5/GalaSoft.MvvmLight/GalaSoft.MvvmLight.Platform%20(NET45)/GalaSoft.MvvmLight.Platform%20(NET45).csproj#L70-L73


https://github.com/lbugnion/mvvmlight/blob/4cbf77ca6fbe91f83cece8fbf288b166c54202c5/GalaSoft.MvvmLight/GalaSoft.MvvmLight%20(PCL)/ObservableObject.cs#L56-L72
I need to implement ViewPager in MVVM.
please help.
![123](https://user-images.githubusercontent.com/6141716/61390133-80cfdb80-a8ba-11e9-9616-30b382b210cf.png)

In other runtimes, `SimpleIoc` does not inherit `IServiceLocator` and breaks everything. While it could be fixed with a simple change in the preprocessors here:

```
    public interface ISimpleIoc
#if !NETSTANDARD1_0
        : IServiceLocator
#endif
```

Is dotnet core going to be supported any time soon?
Many firsts for me:
- First "real" use of git
- First time git contribution (fork+pull request)
- First Visual Studio Extension

A good code review will be necessary, lol.

I took the liberty of changing the template of the generated WPF451 project type, to reflect new changes in the CommonServiceLocator namespace, and small changes to make the generated code compile without warning/error.
I am creating project for Xamarin-forms Tizen. I am not able to integrate this lib with Tizen project. It's working perfectly fine with Android and WPF platform.

Is it possible to integrate this lib with Tizen project?
I have a feature idea that I want to run by the community.  

I have a situation where I'm in my application and I'm opening numerous windows (in the View Model (VM) using messages) and I need to listen to messages returned from the VM of the window that I'm opening. Here is a bit of the code that I'm using:


	    Person chosenPerson = null;
            EmployerInfo EmployerInfo = null;
            bool? dialogResult = null;

            try
            {
                MessengerInstance.Register<FindPersonMessage>(this, message => chosenPerson = message.Content, true);
                
                MessengerInstance.Send(new OpenWindowMessage(caseType, result => dialogResult = result), MessageTokens.NewFindPersonFormChannel);

                MessengerInstance.Unregister<FindPersonMessage>(this);

                if (dialogResult.HasValue && dialogResult.Value && chosenPerson != null)
                {
                    MessengerInstance.Register<SelectedEmployerMessage>(this, message => EmployerInfo = message.Content, true);

                    MessengerInstance.Send(new OpenWindowMessage(chosenPerson, result => dialogResult = result), MessageTokens.NewFindEmployerFormChannel);

                    MessengerInstance.Unregister<SelectedEmployerMessage>(this);

                    if (dialogResult.HasValue && dialogResult.Value && EmployerInfo != null)
                    {
                        MessengerInstance.Send(new ShowHideMessage(ShowHideMessage.GoToWindowState.Hide), MessageTokens.FindItemChannel);

                        MessengerInstance.Send(new OpenWindowMessage(chosenPerson, EmployerInfo));

                    }
                }
            }
            finally
            {
                MessengerInstance.Unregister<FindPersonMessage>(this);
                MessengerInstance.Unregister<SelectedEmployerMessage>(this);

                MessengerInstance.Send(new ShowHideMessage(ShowHideMessage.GoToWindowState.Show), MessageTokens.FindItemChannel);
            }`

A command on the main form of my application will call this method on the VM which kicks off the workflow.   Two form gather information by allow a user to search through some database/list and then finally hides the form that started the process and then calls the final form that will capture all the user's data.

I think this demonstrates where an `IDisposible` return would allow you to easily unregister instead of putting your `UnRegister` calls in your finally.  It would still allow for strict adherence to using the Mediator pattern and allow for unit testing to still allow be modular and easy to implement the message handlers. 

Maybe the method could even be called `RegisterScope` to denote that it's only valid for a particular scope in the code.

Any thoughts on this?

Thanks
Scott