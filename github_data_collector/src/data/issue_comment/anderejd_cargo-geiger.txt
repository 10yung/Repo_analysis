Version: `cargo-geiger 0.9.0`

```
$ cargo geiger
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: ()', src/libcore/result.rs:1165:5
stack backtrace:
...
  14: core::result::unwrap_failed
             at src/libcore/result.rs:1165
  15: cargo::util::canonical_url::CanonicalUrl::new
  16: cargo::core::source::source_id::SourceId::new
  17: cargo::util::toml::DetailedTomlDependency::to_dependency
  18: cargo::util::toml::TomlDependency::to_dependency
  19: cargo::util::toml::TomlManifest::to_real_manifest::process_dependencies
  20: cargo::util::toml::TomlManifest::to_real_manifest
  21: cargo::util::toml::read_manifest
  22: cargo::core::workspace::Packages::load
  23: cargo::core::workspace::Workspace::find_root
  24: cargo::core::workspace::Workspace::new
  25: cargo_geiger::cli::get_workspace
  26: cargo_geiger::main
  27: std::rt::lang_start::{{closure}}
  28: std::rt::lang_start_internal::{{closure}}
             at src/libstd/rt.rs:48
  29: std::panicking::try::do_call
             at src/libstd/panicking.rs:287
  30: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:78
  31: std::panicking::try
             at src/libstd/panicking.rs:265
  32: std::panic::catch_unwind
             at src/libstd/panic.rs:396
  33: std::rt::lang_start_internal
             at src/libstd/rt.rs:47
  34: main
  35: __libc_start_main
  36: _start
```

it would be useful to get at least the line number in the `.toml` file that causes the problem.

**EDIT:** I tried eliminating lines in my `Cargo.toml` to find the offending code, but even with my whole `Cargo.toml` commented I got the above error. Weird. `geiger` works fine in some other repos.
Running `cargo-geiger` against `dtoa` v0.4.4 it reports that it has no unsafe code, and uses `forbid(unsafe_code)`, despite neither of these being true.

It appears that parsing the main file is failing, but it seems wrong for this to result in 0 counts rather than some sort of indeterminate status.

```console
> cargo download -x dtoa=0.4.4 && cd dtoa-0.4.4
INFO: cargo-download v0.1.2
INFO: Latest version of crate dtoa=^0.4.4 is 0.4.4
INFO: Crate `dtoa==0.4.4` downloaded successfully
INFO: Crate content extracted to ./dtoa-0.4.4/
> cargo geiger
    Checking dtoa v0.4.4 (/tmp/tmp.VYgoVrZqbY/dtoa-0.4.4)
[...rustc warnings...]
    Finished dev [unoptimized + debuginfo] target(s) in 0.52s
Failed to parse file: /tmp/tmp.VYgoVrZqbY/dtoa-0.4.4/src/lib.rs, Syn(Error("expected `:`"), "/tmp/tmp.VYgoVrZqbY/dtoa-0.4.4/src/lib.rs")
    Scanning done

Metric output format: x/y
    x = unsafe code used by the build
    y = total unsafe code found in the crate

Symbols:
    :) = No `unsafe` usage found, declares #![forbid(unsafe_code)]
    ?  = No `unsafe` usage found, missing #![forbid(unsafe_code)]
    !  = `unsafe` usage found

Functions  Expressions  Impls  Traits  Methods  Dependency

0/0        0/0          0/0    0/0     0/0      :) dtoa 0.4.4

0/0        0/0          0/0    0/0     0/0

WARNING: Dependency file was never scanned: /tmp/tmp.VYgoVrZqbY/dtoa-0.4.4/src/lib.rs
> cargo geiger --version
cargo-geiger 0.9.0
```
Example repository: https://github.com/TyPR124/geigertest

There is a lib, "testlib", which contains `#![forbid(unsafe_code)]`, but a binary (still in "testlib") that does not.

There is also a separate binary, "testbin", which depends on "testlib". In this case, I do not believe there is any possiblity that testbin would be able to see or use unsafe code from testlib (because such code doesn't exist in the lib, only its bin), so ideally cargo geiger, when run on testbin, should detect this and report that testlib includes `#![forbid(unsafe_code)]` (because it does).
Running `cargo geiger` while [Rust Language Server](https://github.com/rust-lang/rls) is watching my source tree in Atom results in the following panic (inconsistently... It is easiest to trigger the panic by stopping the cargo geiger build - Ctrl+C - then start `cargo geiger` while RLS is also rebuilding).

<details><summary>Backtrace</summary>

```
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Cargo("could not remove build directory")', src/libcore/result.rs:1189:5
stack backtrace:
   0: backtrace::backtrace::libunwind::trace
             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized
             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:84
   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt
             at src/libstd/sys_common/backtrace.rs:61
   4: core::fmt::write
             at src/libcore/fmt/mod.rs:1030
   5: std::io::Write::write_fmt
             at src/libstd/io/mod.rs:1412
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:65
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:50
   8: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:188
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:205
  10: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:464
  11: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:373
  12: rust_begin_unwind
             at src/libstd/panicking.rs:302
  13: core::panicking::panic_fmt
             at src/libcore/panicking.rs:82
  14: core::result::unwrap_failed
             at src/libcore/result.rs:1189
  15: core::result::Result<T,E>::unwrap
             at /rustc/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src/libcore/result.rs:957
  16: cargo_geiger::cli::run_scan_mode_default
             at cargo-geiger/src/cli.rs:272
  17: cargo_geiger::real_main
             at cargo-geiger/src/main.rs:314
  18: cargo_geiger::main
             at cargo-geiger/src/main.rs:336
  19: std::rt::lang_start::{{closure}}
             at /rustc/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src/libstd/rt.rs:61
  20: std::rt::lang_start_internal::{{closure}}
             at src/libstd/rt.rs:48
  21: std::panicking::try::do_call
             at src/libstd/panicking.rs:287
  22: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:81
  23: std::panicking::try
             at src/libstd/panicking.rs:265
  24: std::panic::catch_unwind
             at src/libstd/panic.rs:395
  25: std::rt::lang_start_internal
             at src/libstd/rt.rs:47
  26: std::rt::lang_start
             at /rustc/412f43ac5b4ae8c3599e71c6972112e9be4758fa/src/libstd/rt.rs:61
  27: <cargo_geiger::FormatError as core::fmt::Debug>::fmt
```
</details>

https://github.com/anderejd/cargo-geiger/blob/69c6f0e38fc75de614eee29472b722d8b2ee487b/cargo-geiger/src/cli.rs#L272

You can probably reproduce this with RLS in VSCode as well.

The `unwrap` on the `Result` type is definitely not great error handling, but I'm wondering if there is a better way to handle cleaning in general? Specifying the package name will at least fix the problem with RLS, since `cargo clean -p <package-name>` does not remove the `./target/rls` subdirectory, but should still be suitable for geiger's cleaning needs.
The current compile times are a bit painful, mainly caused by [cargo] having a huge number dependencies. The obvious solution could be to reduce the number of dependencies of [cargo].

Another very nice direction could be to use [cargo] as a subprocess, no building cargo at all! Can [cargo] output all the data needed by cargo-geiger? If not, what's missing? Make this list and then open an issue in the cargo repo and ask if a PR adding that missing data export would be welcome.

[cargo]: https://crates.io/crates/cargo
Running `cargo install cargo-geiger` fails on stable Rust 1.37, Linux x86_64 (Fedora 29). I don't know if this is related to #62, but that issue also mentions Git. Most relevant part of the output:

```
$ cargo install cargo-geiger
    Updating crates.io index
  Installing cargo-geiger v0.7.3
...
exit code: 1

--- stderr
fatal: not a git repository (or any parent up to mount point /)
Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).


error occurred: Command "cc" "-O3" "-ffunction-sections" "-fdata-sections" "-fPIC" "-m64" "-I" "/tmp/cargo-installhNL6Hd/release/build/libgit2-sys-9a641799bb5b7d8a/out/include" "-I" "libgit2/src" "-I" "libgit2/deps/http-parser" "-I" "libgit2/deps/pcre" "-I" "/tmp/cargo-installhNL6Hd/release/build/libssh2-sys-e91d621211b414eb/out/include" "-fvisibility=hidden" "-DGIT_REGEX_BUILTIN=1" "-DHAVE_STDINT_H=1" "-DHAVE_MEMMOVE=1" "-DNO_RECURSE=1" "-DNEWLINE=10" "-DPOSIX_MALLOC_THRESHOLD=10" "-DLINK_SIZE=2" "-DPARENS_NEST_LIMIT=250" "-DMATCH_LIMIT=10000000" "-DMATCH_LIMIT_RECURSION=MATCH_LIMIT" "-DMAX_NAME_SIZE=32" "-DMAX_NAME_COUNT=10000" "-DSHA1DC_NO_STANDARD_INCLUDES=1" "-DSHA1DC_CUSTOM_INCLUDE_SHA1_C=\"common.h\"" "-DSHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=\"common.h\"" "-o" "/tmp/cargo-installhNL6Hd/release/build/libgit2-sys-9a641799bb5b7d8a/out/build/libgit2/deps/http-parser/http_parser.o" "-c" "libgit2/deps/http-parser/http_parser.c" with args "cc" did not execute successfully (status code exit code: 1).



warning: build failed, waiting for other jobs to finish...
error: failed to compile `cargo-geiger v0.7.3`, intermediate artifacts can be found at `/tmp/cargo-installhNL6Hd`

Caused by:
  build failed
$
```

This is using stable Rust 1.37:

```
$ cargo -V
cargo 1.37.0 (9edd08916 2019-08-02)
$ 
```

I can provide more details from the build output or the contents of `/tmp/cargo-installhNL6Hd` if necessary.
Hello,

I am getting this error for this project: https://gitlab.com/schmilblick/violetear/web-api/tree/master

```
stack backtrace:
   0:        0x12f63d798 - backtrace::backtrace::libunwind::trace::h1e46ebaf3c192a61
                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/libunwind.rs:88
   1:        0x12f63d798 - backtrace::backtrace::trace_unsynchronized::h406dc4503c6bea17
                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/backtrace/mod.rs:66
   2:        0x12f63d798 - std::sys_common::backtrace::_print::hfff91dd968c7f3aa
                               at src/libstd/sys_common/backtrace.rs:47
   3:        0x12f63d798 - std::sys_common::backtrace::print::h61599dda7cafdedc
                               at src/libstd/sys_common/backtrace.rs:36
   4:        0x12f63d798 - std::panicking::default_hook::{{closure}}::hcdbbe3ff409c703b
                               at src/libstd/panicking.rs:198
   5:        0x12f63d3f0 - std::panicking::default_hook::h73bd90c5564a4dff
                               at src/libstd/panicking.rs:212
   6:        0x12f63e390 - std::panicking::rust_panic_with_hook::h61180669e72fb98d
                               at src/libstd/panicking.rs:479
   7:        0x12f63dca0 - std::panicking::continue_panic_fmt::he6e2cc97c5513e0b
                               at src/libstd/panicking.rs:382
   8:        0x12f63dbac - std::panicking::begin_panic_fmt::haa436764ec57cec8
                               at src/libstd/panicking.rs:337
   9:        0x12ed4dcc0 - cargo_geiger::cli::print_dependency::{{closure}}::h5dc9e66c195c3742
  10:        0x12ed4da54 - cargo_geiger::cli::print_dependency::h46f3075f06ff424a
  11:        0x12ed4bd58 - cargo_geiger::cli::print_tree::h7f449f5529115c9b
  12:        0x12ed5d62c - cargo_geiger::main::h1915c10fea9889c4
  13:        0x12ed28684 - std::rt::lang_start::{{closure}}::hb0c2f6857f3307e8
  14:        0x12f63a374 - std::rt::lang_start_internal::{{closure}}::{{closure}}::h2bd5d433387458b3
                               at src/libstd/rt.rs:49
  15:        0x12f63a374 - std::sys_common::backtrace::__rust_begin_short_backtrace::hbb7e7d113a9b9327
                               at src/libstd/sys_common/backtrace.rs:77
  16:        0x12f63da5c - std::rt::lang_start_internal::{{closure}}::hd11b1fdd2edd2568
                               at src/libstd/rt.rs:49
  17:        0x12f63da5c - std::panicking::try::do_call::h00cc54dc2524a6d6
                               at src/libstd/panicking.rs:294
  18:        0x12f64af74 - __rust_maybe_catch_panic
                               at src/libpanic_unwind/lib.rs:82
  19:        0x12f63e8a0 - std::panicking::try::h4249a8016e0e681a
                               at src/libstd/panicking.rs:273
  20:        0x12f63e8a0 - std::panic::catch_unwind::hbae4173a79ac033c
                               at src/libstd/panic.rs:388
  21:        0x12f63e8a0 - std::rt::lang_start_internal::hece97a8cbd751d93
                               at src/libstd/rt.rs:48
  22:        0x12ed5e4b8 - main
  23:     0x7fffb7a24da8 - generic_start_main
                               at ../csu/libc-start.c:308
  24:     0x7fffb7a24fa4 - __libc_start_main
                               at ../sysdeps/unix/sysv/linux/powerpc/libc-start.c:102
  25:                0x0 - <unknown>
```

Thank you
What?
------

### Dogfooding:
https://en.wikipedia.org/wiki/Eating_your_own_dog_food

###  Continuous Integration:
One of the original goals of this project was and still is to make it simple to use in CI as a pre-build step. `cargo-geiger` should be able verify that no new unsafe usage or any unsafe usage at all, depending on user configuration, slips into production.

TODO
------

### Improve the cargo API integration

Change the details of the cargo API calls to use the proper cargo flags. Most if not all cargo-flags should be properly interpreted to imitate what a normal cargo build invocation does. If the user wants to test `cargo build --release` which would likely be the normal case in CI, then the call to `cargo-geiger` should be `cargo-geiger --release`. This should allow the `cargo build --release` call to reuse most of the intermediate build artifacts produced by `cargo-geiger`. Why is this not already the case? The original idea was to never invoke `rustc` to avoid the heavy build process, but this turned out to be inadequate since cargo itself only knows of the entry point source code files and leaves the rest for `rustc` to resolve.

### Prototype a "fast forbid mode"

The current assumption in cargo-geiger is that cargo is able to resolve all entry point source code files, which means that we could run the `#[forbid(unsafe_code)]` scan without doing a single `rustc` call, which would significantly speed things up, at the cost of disabling the other metrics for this specific mode.

✅ #68 

### Implement a crate (+ version) trustlist

A simple file containing a list of crates (with versons), placed in the application project root, that are trusted to use unsafe code. In other words a list of crates with specific versions that are permitted to not declare `#[forbid(unsafe_code)]`. This is intended to allow CI automatically discover when a dependency that:
 - used to be pure safe rust, introduce unsafe code directly or through a dependency.
 - did previously use unsafe code, publish a new version that is not in the trustlist, awaiting audit and trust list approval.

### Create an example CI test project

 - Create it in this repository or a new one, whatever seems best at that time.
 - Add some free open source CI system to run it. 
The `syn` crate has an unsafe code, according to the `cargo-geiger`, but it will be used only during compilation (afaik). It doesn't affect the resulting binary. 
After `cargo install cargo-geiger` on macOS, trying to run it against a crate with a `rust-toolchain` file ([info](https://github.com/rust-lang/rustup.rs#the-toolchain-file)) in its root fails with a dynamic linking error:

```
$ cargo geiger
dyld: Library not loaded: @rpath/libproc_macro-4f1d545c303aa6cd.dylib
  Referenced from: /Users/.../.cargo/bin/cargo-geiger
  Reason: image not found
Abort trap: 6
```