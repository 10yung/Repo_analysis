User data should be specified inside a <bullet> tag, with a <user-data> tag.
The user-data tag should also specify a 'key' attribute.
First, thanks for the great work you have done and are doing on bullet and pybullet!

According to the PyBullet Quick Start Guide, the implementation of `TORQUE_CONTROL` in  `setJointMotorControl2` relies on external forces/torques. External forces only work when explicitly stepping the simulation.

I assume that `TORQUE_CONTROL` therefore also only works when explicitly stepping the simulation. If this is correct, I think it would be helpful to add a quick note stating this somewhere near the section on `setJointMotorControl2`, such that this info is easier to find.
Hi, 
Dose pybullet share the feature for collision margin or collision distance? since i see my gripper often give the distance which is larger than the actual radius of the cylinder. for example cylinder with radius of 0.04 m, but the two finger gripper distance of 0.0439 m, also actually with position control i can grasp the cylinder .
So, would it be able to adjust the collision margin for my grasping task ?
the visual shape is same as the collision shape in the picture.

![image](https://user-images.githubusercontent.com/46891883/72417122-2c4ae180-37b3-11ea-8556-aa1d0e81c6d6.png)

Thanks very much .
I noticed that the "body_name" argument is not being used in the BodyPart constructor. Is there a particular reason for this or can it be added as a class attribute with the other arguments?
It looks like this is exported to bullet.pc.in but is not done for BulletConfig.cmake.in. Should BULLET_DEFINITIONS in BulletConfig.cmake.in be changed to the argument used in bullet.pc.in?
Hello,

I'm having an issue with changeVisualShape with loaded texture in Direct Mode. The images returned by getCameraImage seems not changing, while it's updated in GUI mode and TinyRenderer. Any ideas why it could be happening? 

Also, is there APIs to change ambient light intensities in Direct Mode? 

Thanks!
Hi @erwincoumans,
I wanted to share my parallel version of the soft body class specialization, It helps a lot to increase soft body instance count in a dynamic scene especially for games or other real-time applications.

Take your time to review it.
Enjoy and happy new year!
See #2117. For now this is only supported for btMultiBody, this is a feature request to atleast give the option to also make this possible for btRigidBody.
In btQuaternion.h the function "btScalar getAngle() const" calculates the angle from the inverse cosine of w.
This gives numerical issues when the angle is almost zero (~1e-8 in case of double). In that case the w term becomes almost 1 in which case a lot of significant digits are lost ( w = 0.9999999999999998) and the calculation of the angle becomes less precise than possible.

This can be solved by calculating the angle from the atan2 instead:

```
btVector3 xyz{ q[0], q[1], q[2] };
double w{ q[3] };

double n = xyz.norm();
double angle{ 2 * atan2(n, abs(q[3])) };
if (w < 0)
{
    angle = -angle;
}
```
This approach can be found in the Eigen and scipy (python) packages.

Removes src/.DS_Store (Apple Finder meta) and updates .gitignore to prevent regression in the future.