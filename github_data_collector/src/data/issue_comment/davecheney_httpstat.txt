Adds an option that allows the user to specify a file of one or more CA certificates that can be used for SSL peer validation. These CA certificates are added to the default pool of CA certificates that are used by Go.

Fixes #146
It would be helpful to allow additional CA certificates to be used for SSL peer validation. Currently the only options are validation against known root CAs or skipping verification using the -k option. 
In some cases, clients need to include a complete certificate chain for a mutual auth transaction. The current implementation of -E and `readClientCert` does not support multiple certificates.
The current implementation does not support multiple certificates in a single PEM file. This PR adds support for reading multiple certificates from the PEM. This use case is necessary when the client needs to pass a complete certificate chain as part of a mutual auth transaction.

Fixes #144 

Note: Sample private keys have been included as part of the test suite. They are example keys only and should never be used as any part of a production implementation.
size_download (The total amount of bytes that were downloaded.)

size_upload (The total amount of bytes that were uploaded.)

speed_download (The average download speed that curl measured for the complete download. Bytes per second.)
Example output (whitespace and carriage returns added for readibility):

    {
      "Address": "128.199.248.140:443",
      "Header": {
        "Connection": [
          "keep-alive"
        ],
        "Content-Type": [
          "text/html; charset=UTF-8"
        ],
        "Date": [
          "Sat, 05 May 2018 03:15:15 GMT"
        ],
        "Link": [
          "<https://dave.cheney.net/wp-json/>; rel=\"https://api.w.org/\""
        ],
        "Server": [
          "nginx/1.2.1"
        ],
        "Strict-Transport-Security": [
          "max-age=15768000"
        ],
        "X-Powered-By": [
          "PHP/5.4.45-0+deb7u11"
        ]
      },
      "Proto": "HTTP/1.1",
      "Status": "200 OK",
      "Timing": {
        "DNS": 98,
        "TCP": 191,
        "TLS": 604,
        "Server": 747,
        "Transfer": 392,
        "Lookup": 98,
        "Connect": 290,
        "PreTransfer": 895,
        "StartTransfer": 1643,
        "Total": 2036
      }
    }
To have accurate measurement of TLS and support skipped steps (DNS, TCP
and TLS reuse), the timing code has been refactored to use Go 1.8
support for TLS tracing as well as a more descriptive variable namings
for steps time.

This commit removes support for Go versions lower than 1.8.
Add an option to repeat the same request multiple times, reusing the
same HTTP connection.

Depends on #128 
When I try to use httpstat on service with HTTP/2 I got following error:
```
http2: server sent GOAWAY and closed the connection; LastStreamID=0, ErrCode=NO_ERROR, debug=""
```

It would be really good to have the SSL/TLS handshake latency.
