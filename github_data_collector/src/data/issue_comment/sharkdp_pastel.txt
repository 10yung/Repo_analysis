I would expect `pastel set lightness 100` to set a color's lab lightness to 100. The code does seem to try and set `lab.l = value` but it doesn't actually result in a lab lightness value of 100. Which seemed odd.

```
 % pastel format lab orange
Lab(75, 24, 79)
 % pastel set lightness 100 orange | pastel format lab
Lab(92, -8, 68)
```

I have no idea if this is an issue with converting between colorspaces or just unavoidable.

At 149, the lab lightness value seems to be shown as 100, but it isn't pure white.
```
 % pastel set lightness 149 orange | pastel format lab
Lab(100, -3, 9)
```

At 156, it finally reaches pure white.
```
 % pastel set lightness 156 orange | pastel format lab
Lab(100, 0, -0)
```

You can keep try setting it to 100 lightness and it will increase slightly which is odd
```
 % pastel set lightness 100 orange | pastel format lab
Lab(92, -8, 68)
 % pastel set lightness 100 orange | pastel set lightness 100 | pastel format lab
Lab(98, -17, 65)
 % pastel set lightness 100 orange | pastel set lightness 100 | pastel set lightness 100 | pastel format lab
Lab(98, -17, 63)
```



Text takes up two "rows" of pixels in the hdcanvas. We could use this to add colored drawn text and treat the first row as the foreground and the second as the background.

As an example usage (not added in this PR):
![image](https://user-images.githubusercontent.com/9531780/67429209-afdaa500-f5ad-11e9-9d22-c7d952da3701.png)

Relates to #12 
This PR adds combinator-based parsing using [nom](https://github.com/Geal/nom).

This allows the code to uniformly handle numerics (percentages, decimals, integers), and can also eventually provide error output in case of parser failure (not implemented yet).

I haven't had a chance to benchmark the differences between the parsers yet.
Closes #89 
This is not as straightforward to implement like the rest of the properties. The way this should be implemented is probably by (only) adjusting the `L`ightness channel in `Lab` space until the luminance has the right value.

If there is no direct way to compute the correct `L` value, we could also perform a (binary) search in `L` space until we have the right luminance value.
Hi,

I was testing **pastel** a bit, very nice tool! I noticed that the values returned by the `rgb-float` format are non-linearly encoded, i.e. they have the **sRGB** inverse EOTF applied, which limit their usefulness:

``` bash
(colour-3.7) Kali:debug kelsolaar$ ./pastel format rgb-float "#808080"
rgb(0.502, 0.502, 0.502)
(colour-3.7) Kali:debug kelsolaar$ python -c "import colour;print(colour.convert('#808080', 'Hexadecimal', 'Scene-Referred RGB'))"
[ 0.2158605  0.2158605  0.2158605]
```

Often, when people are working with floating-point colours, they need to use linear, i.e. scene-referred RGB, colours to drive a shader for example. I would thus suggest adding a new format, e.g. `rgb-linear`, that would yield linear colours.

Cheers,

Thomas
- [x] After the optimization is done, re-arrange the colors such that the minimal difference between a color and any of its predecessors is maximized (https://en.wikipedia.org/wiki/Farthest-first_traversal)
- [ ] add `--max-luminance` (and similar) options in order to generate colors for a white/black background
- [ ] add `--num-iterations-mean`, `--num-iterations-max`, etc to fine-tune the simulated annealing parameters
- [x] support something like `pastel distinct 8 red blue yellow` (fix three colors, generate five new)

optimize:
- [x] do not re-compute all distances (order N^2), but only the once that changed (order N)
- [ ] Is there something we can easily parallelize? The mutual distance-computation?
This could be incredible useful for shell scripts that want easy access to perceptually uniform color scales.
```
pastel sample viridis 0.34
pastel sample blueToRed 0.2
```

Note: this would be quite similar to `pastel mix blue red -f ...` and also `pastel gradient blue red`. We should try to come up with a consistent API.

Basically, `pastel gradient red blue` ~ `pastel sample redToBlue 0.0; pastel sample redToBlue 0.1; ...`.

See: http://sharkdp.github.io/purescript-colors/#scale
In analogy to "mix".


Resources:
* https://www.w3.org/TR/compositing/#blending
* https://en.wikipedia.org/wiki/Blend_modes
* http://sharkdp.github.io/purescript-colors/#blending

Make sure that we can reproduce this: https://stackoverflow.com/questions/13669491/are-there-ways-to-use-additive-color-mixing-in-web-development
https://en.wikipedia.org/wiki/HSL_and_HSV
https://en.wikipedia.org/wiki/HWB_color_model