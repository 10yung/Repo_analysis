I'm working on a `no_std` project and I'd love to use Dyon for scripting, but I can't easily use it without `no_std` support. I might implement the support myself and put in a pull request, but that won't happen any time soon.
I have experienced panic in dyon 0.44.0 in following code:

```
use std::sync::Arc;
use dyon::{load_str, error, Call, Module, Runtime, RustObject};

#[derive(Debug)]
struct Test{}

fn main() {
    let mut module = Module::new();
    error(load_str("main.dyon", Arc::new(r#"
        fn test_func(obj: 'return) -> {
            return obj
        }
    "#.into()), &mut module));
    let ref module = Arc::new(module);

    let j = Test{};

    // Call function that returns Rust object.
    let call = Call::new("test_func").rust(j);
    match call.run_ret::<RustObject>(&mut Runtime::new(), module) {
        Ok(answer) => {println!("{:?}", answer.lock().unwrap().downcast_ref::<Test>());}
        Err(err) => {error(Err(err));}
    }
}
```

> thread 'main' panicked at 'index out of bounds: the len is 0 but the index is 1', dyon-0.44.0/src/runtime/mod.rs:108:32

It may be related to comment in runtime/mod.rs:1371

>                 // TODO: Could return the last value on the stack.
>                 //       Requires .pop_fn delayed after.

Is this a bug, or am I doing something wrong?
https://github.com/PistonDevelopers/dyon/issues/412

how to add variable?
i use v8 before and then i want to change to rust from c++.
 i look for all doc and find way to add function by module.add or module.add_str, but i can't find how to add variable.
dyon support this?
Sometimes it is nice to use Dyon scripts to analyze Dyon code. The lifetime/type checker has a lot of useful knowledge about the source that currently is not available for Dyon scripts.

For example:

- which functions are called
- from where functions are called
- the type of an expression in the code
- the parent/child relationships of expressions
- the kind of an expression (call, call argument, loop etc.)

By adding a `check__in_string_imports`, scripts can access the knowledge that the lifetime/type checker has about the source at the end of inference.
For example:

```rust
fn add(a: any, b: any) -> any { ... }
    all T { (T f64, T f64) -> T f64 }
```

This is needed since addition on ad-hoc types is only valid for the same ad-hoc type.

A "none ad-hoc type" is a type `f64` which ad-hoc type is `T f64`.

The `all` quantifier uses the semantics that "none ad-hoc type" is quantified over. This way, one only needs to write a single rule for all ad-hoc types plus the default case. The normal ad-hoc rule is not involved, since one can simply leave out the case e.g. `(f64, f64) -> f64` and use `all T { (T f64, T f64) -> T f64 }` instead.

The "none ad-hoc type" of the previous arguments is lifted to `T`. This means that for binary operators, you can leave out ad-hoc type of the left argument and still pass the type check.

```rust
fn km(a: f64) -> km f64 {return clone(a)}

fn main() {
    println(2 + km(4)) // Works fine.
    println(km(4) + 2) // ERROR
}
```
```rust
fn main() {
    f := \() = -(3+2)
    println(f) // prints `\() = -3 + 2`
}
```
Related to https://github.com/PistonDevelopers/dyon/issues/636

Sometimes you want to express that a function call will not work for some type.
You also might want to display a custom error message.

```rust
fn foo(a) -> {return a - b}
(str) -> #ERROR "This function does not work with `str`"
```
Got this idea from https://github.com/PistonDevelopers/dyon/issues/640

Look up in arrays:

```rust
b := [1, 2, 3]
a : [_, ...] = b // first (1)
c : [.., _, ...] = b // second (2)
d : [..., _] = b // last (3)
e : [..., _, ..] = b // second last (2)
f : [.., .., _] = b // reports runtime error if `b` has not length `3`
```

```rust
b := ok("hi")
a : ok(_) = b // reports runtime error if `b` is `err`.
```

```rust
b := [1, 2]
a : [1, _] = b // gets second item in list if the first is `1`.
c : [a, _] = b // gets second item in list if the first is equal to `a`.
```