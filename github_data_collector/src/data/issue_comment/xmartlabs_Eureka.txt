The Eureka bundle contained chevron images used in `NavigationAccessoryView`. These chevrons can be replaced by the chevron SF Symbols in iOS 13 and up. For lower iOS versions they are fairly simple to draw in code using a few lines in CoreGraphics, which I've done also.

This should remove the blocker to adding Swift Package Manager support, so I've added a Package.swift file too.

The reimplemented chevrons look as follows (the left simulator uses the manually drawn ones, the right simulator uses SFSymbols):

<img width="913" alt="Simulator screenshot showing chevrons" src="https://user-images.githubusercontent.com/2078225/72664471-34469380-39f6-11ea-92f4-eed53a55a6b1.png">

```
form
+++ Section("Employees")
<<< MultipleSelectorRow<String>() {
$0.tag = "Employees"
$0.title = ""
$0.options = ["George", "John", "Tom"]
$0.value = []
}
.onPresent { from, to in
   to.onDismissCallback = { _ in
      self.dosomething()
   }
}
```

The callback never occurs. What is the intended workflow for a callback?
When tableView is not added to window.

Fixes #1955 

ðŸ˜­ Can I solve it by thread or other ways. Using uitableview directly is not so slow. Thanks.


```
    func generateForm() {
        form.removeAll()
        form +++ Section()

        editSection = Section("Rule".localized())

        for rule in rules { //rules count > 10000 will be very slow 
            insertRule(rule, atIndex: editSection.count)
        }
        form +++ editSection
    }
    
    func insertRule(_ rule: Rule, atIndex index: NSInteger) {
        editSection.insert(LabelRow () {
            $0.title = rule.rowDescription.0 == nil ? "" : "\(rule.rowDescription.0!)"
            $0.value = rule.rowDescription.1 == nil ? "" : "\(rule.rowDescription.1!)"
            $0.disabled = Condition(booleanLiteral: !self.editable)
            }.cellSetup({ (cell, row) -> () in
                cell.accessoryType = .disclosureIndicator
                cell.selectionStyle = .default
            }).cellUpdate({ (cell, row) -> () in
                row.title = rule.rowDescription.0 == nil ? "" : "\(rule.rowDescription.0!)"
                row.value = rule.rowDescription.1 == nil ? "" : "\(rule.rowDescription.1!)"
            }).onCellSelection({ [unowned self] (cell, row) -> () in
                self.showRuleConfiguration(rule)
            }),at: index)
    }
```

I often need to let the user input a date range, and I usually do this with 3 rows:

- A `PickerInlineRow` that allows the user to choose preset date ranges such as "last week" or "last month"
- The `PickerInlineRow` also has a "custom" option, and when this option is selected, two hidden `DateInlineRow`s will appear, allowing the user to select a custom range.

Code:

        section <<< PickerInlineRow<String>(tagRange) {
            row in
            row.title = "Range"
            row.options = [last7Days, last14Days, last30Days, last90Days, last365Days, allTime, custom]
            row.value = last7Days
        }
        
        section <<< DateInlineRow(tagStartDate) {
            row in
            row.title = "From"
            row.value = Date().addingTimeInterval(-86400 * 7)
            row.hidden = .function([tagRange], { ($0.rowBy(tag: tagRange) as! RowOf<String>).value != custom })
        }
        
        section <<< DateInlineRow(tagEndDate) {
            row in
            row.title = "To"
            row.value = Date()
            row.hidden = .function([tagRange], { ($0.rowBy(tag: tagRange) as! RowOf<String>).value != custom })
        }

Now, instead of writing all this every time, I would like to use a custom row, something like:

```
section <<< DateRangeRow(tagDateRange) { ... }
```

Note that this custom row isn't associated with one `Cell`, but is instead composed of 3 "sub-rows, so I can't implement it the way README describes. I believe this is a feature that Eureka doesn't yet supports, hence the feature request.

Essentially, this is kind of like an extension of the idea of [`SplitRow`](https://github.com/EurekaCommunity/SplitRow), but with some key differences:

- instead of limited to 2 sub-rows, a row could be composed of many sub-rows
- instead of having the sub-rows laid out all in one cell, the sub-rows are laid out just like how they normally are

Trying to use Eureka on iPad application with new Mac Catalyst produces all of the "iOS13" deprecated warnings. 
<img width="1643" alt="Screen Shot 2019-12-18 at 2 46 34 PM" src="https://user-images.githubusercontent.com/10172186/71129923-74231c80-21a5-11ea-8328-dce4a370375b.png">

I'd like to make a multivalue section with rows that allow the user to enter three values, similar to the "3 Component Picker" in the "Rows" example, but also have a header and footer.

It would look something like this: 
![Form](https://user-images.githubusercontent.com/2248993/70979335-7b500a80-207f-11ea-9489-22496694ccaa.png)

Is there a better solution than just building custom cells?
Hi - Iâ€™m currently working on project that utilises the Eureka library.

On the FormViewController, I am presenting another VC modally in which the user is required to select an item before returning back to the FormViewController. During the process of returning to the FormVC a swift warning is logged:

*[TableView] Warning once only: UITableView was told to layout its visible cells and other contents without being in the view hierarchy (the table view or one of its superviews has not been added to a window). This may cause bugs by forcing views inside the table view to load and perform layout without accurate information (e.g. table view bounds, trait collection, layout margins, safe area insets, etc), and will also cause unnecessary performance overhead due to extra layout passes. Make a symbolic breakpoint at UITableViewAlertForLayoutOutsideViewHierarchy to catch this in the debugger and see what caused this to occur, so you can avoid this action altogether if possible, or defer it until the table view has been added to a window.*

After inserting the symbolic breakpoint, Iâ€™ve figured out that the warning is being logged after  tableView.reloadRows is called within the reload method of the BaseRow class in Eureka.

I went to examine the example app to see if I could reproduce the warning and I could: 
Steps to reproduce:
1)  Select Rows from the base table view
2) Select any modal selection from the next table view, I used SectionedPushRow
3) Navigate back to the Rows tableView from your modally presented view.
4) The warning will be printed.
5) To view the debug stack, add a symbolic breakpoint for UITableViewAlertForLayoutOutsideViewHierarchy

This has only begun happening since iOS 13.
There is a bug in iOS that causes `UITableView.scrollToRow` to not respect safe area insets. Therefore it does scroll to the wrong position.

A demo and description of the issue can be found here: https://github.com/xmartlabs/Eureka/issues/1952

This PR fixes the issue by using `scrollRectToVisible` instead and adding the safeAreaInset manually.
I discovered an issue with adjusting the form ScrollView `contentInset` and `contentOffset` when the user edits text in a `TextAreaRow`. This becomes a problem as soon as the form is presented as an **page sheet** on iOS 13. It looks like the scrolling does not consider the additional top space added by the new page sheet presentation style.

![2019-12-12 21-31-01 2019-12-12 21_31_58](https://user-images.githubusercontent.com/144173/70746835-e2d82400-1d26-11ea-86cc-0b09c6c486eb.gif)

This only happens when the view is displayed with the page sheet style (space at the top).

Also the behavior is not consistent as you can see in this clip:

![2019-12-12 21-37-07 2019-12-12 21_37_46](https://user-images.githubusercontent.com/144173/70747188-bc66b880-1d27-11ea-9be7-d2d080fe439f.gif)

The same code on iOS 12 without the page sheet presentation style: Also not consistent but does not scroll badly so the first line is invisible:

![2019-12-12 21-40-40 2019-12-12 21_41_07](https://user-images.githubusercontent.com/144173/70747425-4282ff00-1d28-11ea-865c-f8fea979227f.gif)

I guess this is the code that needs some update to fix this:
https://github.com/xmartlabs/Eureka/blob/29242596a2331c4e3be6a2481e8249861e878b6e/Source/Core/Core.swift#L1009-L1037

I tried to figure it out myself, but could not find a solution yet.

Environment: Eureka 5.1.0, Xcode 11.3
