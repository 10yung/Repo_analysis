Hi Tim, I'm working on the stars branch of tmap and trying to get the view mode working. I found your handy function `addStarsImage`.

Two questions:

- Did you consider to add it to `leaflet`? Or a leaflet-add-on package? It would make sense to me...
- It doesn't work as expected with my dataset (tmaps `land`):

```r
library(stars)
library(leaflet)
library(mapview)

data(land, package = "tmap")

# raster
library(raster)
leaflet() %>%
	addProviderTiles("OpenStreetMap") %>%
	addRasterImage(raster(land, layer = 3), project = TRUE)

# stars
leaflet() %>%
	addProviderTiles("OpenStreetMap") %>%
	addStarsImage(st_as_stars(land), band = 3, project = TRUE)
```

The first one overlays the raster image correctly, the second one (`addStarsImage`) produces this:

![Screenshot from 2020-01-17 17-55-40](https://user-images.githubusercontent.com/2444081/72634595-c39a6b00-3952-11ea-8261-44b4441909ee.png)

PS: Not sure if you know this, but is there an easy way to project a stars object from 4326 to 3857 without loosing the offset and delta columns of the st_dimensions instead of the values?

Hi there,

I am struggling to overlay several "large" rasters of 8mio pixels each. I keep getting an error message saying: 
"Error in leaflet::addRasterImage(map = m, x = x, colors = pal, project = FALSE,  : 
  Raster image too large; 7777234 bytes is greater than maximum 4194304 bytes"

To overcome the problem, I have compressed each raster to ~1.5 Mb and set the mapviewOptions to Inf as recommended on the [help page](https://rdrr.io/cran/leaflet/man/addRasterImage.html)
 > mapviewOptions()
platform            : leaflet 
basemaps            : CartoDB.Positron CartoDB.DarkMatter OpenStreetMap Esri.WorldImagery OpenTopoMap 
raster.size         : Inf 
mapview.maxpixels   : Inf 
plainview.maxpixels : Inf 

, but nothing works and I keep getting an error message. Any hint?
Thanks
Ervan
I get the error 
```
Error in .getReactiveEnvironment()$currentContext() : 
  Operation not allowed without an active reactive context. (You tried to do something that can only be done from inside a reactive expression or observer.)
```
when using `mapview` in a Shiny app where the map is based on reactive data. Here is an example:
```
library(shiny)
library(sf)
library(mapview)

ui <- fluidPage(
  sidebarLayout(sidebarPanel(
    selectInput( "county", "County Name",
      choices = c("All", levels(franconia$NAME_ASCI)),
      selected = "All"
    )
  ),
  
  mainPanel(mapviewOutput("mapPlot")))
)

server <- function(input, output) {
  fran <- reactive({
    f <- franconia
    if (input$county != "All")
      f <- franconia %>% filter(NAME_ASCI == input$county)
    f
  })
  
  mapPlot <- reactive({ mapview(fran(), zcol = "NAME_ASCI") })
  
  output$mapPlot <- renderMapview(mapPlot())
}

# Run the application 
shinyApp(ui = ui, server = server)
```

My guess is that the problem is the `mapview2leaflet(expr)` call in `renderMapview`, because the same example works if converted to use `leaflet` instead of `mapview`.

One fix is to enclose the `output$mapPlot` in `observe({ })`. However according to [this discussion](https://github.com/rstudio/shiny/issues/1551) that is not recommended.
If I have two rasters, r1 and r2, the following code throws up an error re: leaflet not handling the mapview S4 class:

    mapview(r1, layer.name = "r1") +
      mapview(r2, layer.name = "r2")  %>%
      leaflet::hideGroup(group = "r2")

It would be nice, however, if this functionality were available, instead of having to use `@map` to push the leaflet map through the pipe, especially as this seems like a common use case.

On that note, it would be really helpful if you all mentioned in your R documentation that layer.name is sent to the group parameter in the leaflet::addRasterImage call. That was not obvious, and I had to dig through your code to find it.

Thanks  in advance! Also, mapview is awesome!
Hi everyone,
I can't run the example from the manual.  It creates an empty map.png.  and returns 
> mapshot(m, file = paste0(getwd(), "/map.png"))
```
TypeError: Attempting to change the setter of an unconfigurable property.
TypeError: Attempting to change the setter of an unconfigurable property.
```
here is map.png:
![map](https://user-images.githubusercontent.com/23444900/69688692-c6848800-1094-11ea-9a8e-939fffb7c152.png)


Any idea?
Full code with version and sessionInfo() below
```
> library(mapview)
> m <- mapview(breweries)
> 
> 
> ## create standalone .html
> mapshot(m, url = paste0(getwd(), "/map.html"))
> 
> ## create standalone .png; temporary .html is removed automatically unless
> ## 'remove_url = FALSE' is specified
> mapshot(m, file = paste0(getwd(), "/map.png"))
TypeError: Attempting to change the setter of an unconfigurable property.
TypeError: Attempting to change the setter of an unconfigurable property.
> 
> version
               _                           
platform       x86_64-pc-linux-gnu         
arch           x86_64                      
os             linux-gnu                   
system         x86_64, linux-gnu           
status                                     
major          3                           
minor          5.1                         
year           2018                        
month          07                          
day            02                          
svn rev        74947                       
language       R                           
version.string R version 3.5.1 (2018-07-02)
nickname       Feather Spray               
> sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.10

Matrix products: default
BLAS: /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3
LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C               LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8     LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8    LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] mapview_2.7.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.3              RColorBrewer_1.1-2      compiler_3.5.1          later_1.0.0             class_7.3-14            base64enc_0.1-3         tools_3.5.1             digest_0.6.23           packrat_0.5.0          
[10] jsonlite_1.6            viridisLite_0.3.0       satellite_1.0.1         evaluate_0.14           lifecycle_0.1.0         lattice_0.20-35         png_0.1-7               rlang_0.4.2             shiny_1.4.0            
[19] DBI_1.0.0               crosstalk_1.0.0         yaml_2.2.0              blogdown_0.11           xfun_0.11               fastmap_1.0.1           e1071_1.7-3             knitr_1.23              raster_3.0-7           
[28] leaflet.providers_1.9.0 htmlwidgets_1.5.1       webshot_0.5.2           classInt_0.4-2          stats4_3.5.1            leaflet_2.0.3           grid_3.5.1              sf_0.8-0                R6_2.4.1               
[37] processx_3.4.1          rmarkdown_1.12          bookdown_0.9            leafpop_0.0.1           sp_1.3-2                callr_3.3.2             magrittr_1.5            ps_1.3.0                units_0.6-5            
[46] scales_1.1.0            promises_1.1.0          codetools_0.2-15        htmltools_0.4.0         mime_0.7                xtable_1.8-4            colorspace_1.4-1        httpuv_1.5.2            KernSmooth_2.23-15     
[55] munsell_0.5.0           leafem_0.0.1      
```
I was wondering if it's possible to switch to viewing order of layers created from mapView(rasterStack)? If I understand correctly, it appears that the viewing dominant layer is the bottom most layer in the layer label list. For example, with:

    library(plainview)
    library(raster)
    
    kili_data <- system.file("extdata", "kiliNDVI.tif", package = "mapview")
    kiliNDVI <- stack(kili_data)
    mapview(x = kiliNDVI[[1:3]], alpha.regions = 1)

the last raster in the stack (kiliNDVI.3) is the top-most viewing raster despite being the bottom-most in the layer label list. Is it possible to change this so that the top-most in the layer label list ((kiliNDVI.1) is also the top-most viewable layer?

I see that this isn't the case though when an object is added to a mapview object (as in the vignette example where poppendorf[[5]] is the bottom-most in the layer label list and is also bottom-most in viewing dominance):

    library(plainview)

    # mapview + object
    mapview(list(franconia, breweries)) + poppendorf[[5]]
mapview adds automaticaaly homebuttons (zoom-buttons) for included layers. I'd like to change the standard position of them as it is possible in this function https://www.rdocumentation.org/packages/leafem/versions/0.0.1/topics/addHomeButton without the necessity of specifying the extents (which up until now I did not manage either...).
Is there already a way to do that?
Hi Tim,
not sure if this is an issue or the bug is in front of the computer ;-)
I want to map factor levels to colors in mapview. As I am frequently mapping only spatial subsets of my dataset where some factor levels are not present I wanted to make sure to display the correct colors by simply adding a col to the dataset with the color value in it. Whereas mapping on the map works fine, the legend is incorrect. Here is a reprex with the breweries dataset:


```
library(mapview)
library(tidyverse)

# adding some random factor
breweries = breweries %>% 
  mutate(FACT = factor(sample(x = c("A", "B", "C", "D"), 
                              size = nrow(breweries), replace = TRUE)))

cols = c("red", "green", "blue", "orange")

breweries %>% 
  mapview(zcol = "FACT", col.regions = cols)
```
As I have created four factor levels and defined four colors, everything is fine:

![image](https://user-images.githubusercontent.com/38189568/67275134-3d40cb00-f4c2-11e9-8494-e1bc716bdfec.png)

Now, if I omit records with factor level "D", the legend is correct ("C" gets blue), whereas records with level "C" on the map are displayed in orange.
```
breweries %>% 
  filter(FACT != "D") %>% 
  mapview(zcol = "FACT", col.regions = cols)
```
![image](https://user-images.githubusercontent.com/38189568/67275356-b6402280-f4c2-11e9-9e71-7f2fea92c6f5.png)

Appending the colors as a new column to the dataset resolves the problem of the wrong assignment on the map, but produces a weird legend:

```
breweries = breweries %>% 
  mutate(COL = cols[match(breweries$FACT, c("A", "B", "C", "D"))])

breweries %>% 
  filter(FACT != "D") %>% 
  mapview(zcol = "FACT", col.regions = .$COL)
```
![image](https://user-images.githubusercontent.com/38189568/67275956-f8b62f00-f4c3-11e9-90a8-fa7cdce081b7.png)


Here´s the session:
```
> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17134)

Matrix products: default

locale:
[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252    LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   
[5] LC_TIME=German_Germany.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] forcats_0.4.0     stringr_1.4.0     dplyr_0.8.3       purrr_0.3.2       readr_1.3.1       tidyr_0.8.99.9000 tibble_2.1.3     
 [8] ggplot2_3.2.1     tidyverse_1.2.1   mapview_2.7.0    

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.2         lubridate_1.7.4    lattice_0.20-38    png_0.1-7          class_7.3-15       assertthat_0.2.1  
 [7] zeallot_0.1.0      digest_0.6.20      mime_0.7           cellranger_1.1.0   R6_2.4.0           backports_1.1.4   
[13] leafpop_0.0.1      stats4_3.6.1       e1071_1.7-2        httr_1.4.1         pillar_1.4.2       rlang_0.4.0       
[19] lazyeval_0.2.2     readxl_1.3.1       rstudioapi_0.10    raster_3.0-2       webshot_0.5.1      htmlwidgets_1.3   
[25] munsell_0.5.0      shiny_1.3.2        broom_0.5.2        compiler_3.6.1     httpuv_1.5.1       modelr_0.1.5      
[31] pkgconfig_2.0.2    base64enc_0.1-3    htmltools_0.3.6    tidyselect_0.2.5   codetools_0.2-16   viridisLite_0.3.0 
[37] withr_2.1.2        crayon_1.3.4       later_0.8.0        sf_0.7-7           grid_3.6.1         nlme_3.1-140      
[43] jsonlite_1.6       satellite_1.0.1    xtable_1.8-4       gtable_0.3.0       lifecycle_0.1.0    DBI_1.0.0         
[49] magrittr_1.5       units_0.6-4        scales_1.0.0       KernSmooth_2.23-15 cli_1.1.0          stringi_1.4.3     
[55] promises_1.0.1     leaflet_2.0.2      sp_1.3-1           xml2_1.2.2         vctrs_0.2.0        generics_0.0.2    
[61] tools_3.6.1        leafem_0.0.1       glue_1.3.1         hms_0.5.1          crosstalk_1.0.0    yaml_2.2.0        
[67] colorspace_1.4-1   rvest_0.3.4        classInt_0.4-1     haven_2.1.1       
```
Again, if there is overall a better way how to do this, feel free to remind me ;-)
Cheers, Hendrik



I would be interesting to have a way to colour the points, but also set the shape of each point. I have a case where it would help a lot to colour the points with a palette, but to shape them differently depending on another variable. Could this be added? 

Quick note: is there a way to add a ggplot graph to mapview? 

![Screen Shot 2019-09-26 at 11 14 16](https://user-images.githubusercontent.com/15717151/65701306-1623e480-e04f-11e9-8400-eff58165e7f9.png)
![Screen Shot 2019-09-26 at 11 14 25](https://user-images.githubusercontent.com/15717151/65701307-1623e480-e04f-11e9-8d0d-09beff1263b7.png)
In order to make mapview a bit nicer to use and more versatile to control on a per-session basis, we're going to refactor the `mapviewOptions` so they include all relevant arguments passable to `mapview`. At the same time we will only leave the most commonly used arguments in the function definition and pass everything else via `...`. This obviously needs some adjustments, namely:

* [ ] add all possible arguments to `mapviewOptions`
* [ ] delete all lesser used arguments from function definition (see [1])
* [ ] use `modifyList` to update these options within the `mapview` call (see below [2])
* [ ] provide proper documentation section for deleted arguments (now accepted via `...`)

Other things to tackle in this major refactoring:

* [ ] convert internal raster stuff to stars (if possible, @edzer I might pick your brains at some stage for this)
* [ ] add support for `mapdeck` as a rendering platform (@SymbolixAU @dcooley I might pick your brains at some stage for this)
* [ ] move remaining functionality to `leafem` - see https://github.com/r-spatial/leafem/issues/3 (@lbusset I haven't forgotten about this)

------

[1] [slide 4](https://github.com/tim-salabim/geostat2018/blob/master/slides/appelhans_geostat2018.pdf)

[2] this (or some variant of it) should be sufficient:
```r
opts = mapviewOptions() # get all (potentially user modified) options
opts = modifyList(opts, list(...)) # override with whatever was passed via ...

garnishMap(mapview, opts) # or whatever function is being called at this stage
```
`garnishMap` should be able to handle pretty much all cases here (incl. `mapdeck` once we allow for it). We might need some sort of look-up function to map `mapview` arguments to `leaflet`/`mapdeck`

