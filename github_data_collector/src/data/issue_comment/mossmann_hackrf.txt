It would be great if I get the supported files of blinky.c (.bin, .xsvf) to update the firmware. 
I would like a compiled copy of this. I don't have the tools needed to compile it myself.
And make sure to compile it for 32bit Windows, not 64bit Windows.
While RXing at sample rates of 16.5 Msps or higher I have observed incorrect sample values that are duplicates of values 16 samples in the future.

Example hex dump excerpt (captured with hackrf_transfer at 20 Msps):
```
00d68070: fd f8  ..
00d68072: fb 01  ..
00d68074: 09 fd  ..
00d68076: 02 f7  ..
00d68078: fa fd  ..
00d6807a: ff 05  ..
00d6807c: 09 02  ..
00d6807e: 07 f8  ..
00d68080: 08 03  ..
00d68082: 07 f9  ..
00d68084: ff f7  ..
00d68086: fa ff  ..
00d68088: 00 06  ..
00d6808a: 09 01  ..
00d6808c: 06 f8  ..
00d6808e: fd f9  ..
00d68090: fb 02  ..
00d68092: 04 05  ..
00d68094: 09 fd  ..
00d68096: 02 f7  ..
00d68098: fa fd  ..
00d6809a: ff 05  ..
00d6809c: 09 02  ..
00d6809e: 07 f8  ..
00d680a0: fd f8  ..
00d680a2: fb 02  ..
```
Six samples (each one byte I followed by one byte Q) in the above example starting at 00d6807a are repeated at 00d6809a.  The samples at 00d6809a are correct.  The duplicated samples at 
00d6807a are incorrect.

I've observed duplication of 2, 4, or 6 samples at a time.  When multiple duplication events occur, they typically happen 8192 (one USB buffer in firmware) samples apart.  This appears to be caused by firmware USB operations delaying execution of sgpio_isr_rx().

This GNU Radio flowgraph can be used to detect duplication events that are 8192 samples apart: https://gist.github.com/mossmann/f8999b0eafc845e95cc166d6f389f4e7

Presumably there is a similar bug on TX.

need bin file for U20 W25Q80BV
usb no longer works dfu mode does not work want to reprogram spi chip need file thanks.

### Steps to reproduce
1.put hackrf in dfu mode - lights show it is in the desired mode
2.run sudo dfu-util -l
3.No devices

### Expected behaviour
listing of DFU device and access to device

### Actual behaviour
Nothing.

I think the device is toast. I purchased a portapack and it was working for some time. All of the sudden it stopped working. with the portapack installed the devices flases the rx yellow light and the portapack will not come one. Cannot program the hackrf back to normal because the usb is not working. It provides power but not data access. Changed the cord to 10 different cords as I read that could be the issue. 3 of the cords were brand new. No suck luck.


Hello!
just yesterday, i was going to try to flash new PortaPackfirmware onto my HackRF has recently decided to not talk with my laptop or PC anymore, in normal and DFU mode as well. 
here's what I've found:

The hackrf still powers up fine and Portapack functions as normal
dfu-util does not flash or list any devices when the hackrf is in dfu
lsusb does not show anything related to the hackrf in normal and dfu mode
dmesg does not change when i plug or unplug the hackrf in normal and dfu mode

I have found the above results with 6(!) separate micro USB cables, including some that i know work with the hackrf, and on two separate computers. This leads me to believe its an issue with the micro usb connector, anything i can do to fix it?
Thanks!
### Steps to reproduce
1. Patch hackrf-transfer.c to include lightweight timestamps
2. Capture at 20Ms some signal at 1Ghz
3. Extract time-stamps and analyze their behaviour

### Expected behaviour
All time-stamps should be constant (at least in average)

### Actual behaviour
Time stamps are not constant and big gaps appear scattered (some as big as 240 milllisecs).

### Version information
**Ubuntu 18.04 - Intel i7-16GiB / Raspian Buster - Raspberry Pi 4-4GiB**:

**hackrf_info version: unknown
libhackrf version: unknown (0.5)
Found HackRF
Index: 0
Serial number: 000000000000000087c867dc2940bb5f
Board ID Number: 2 (HackRF One)
Firmware Version: 2018.01.1 (API:1.02)
Part ID Number: 0xa000cb3c 0x0069474e**

### Output
```
./hackrf_transfer -S 20971520 -r - -f 1030000000 -s 20000000 -a 0 -l 32 -g 6 > IQ.raw 2> IQ.log
```

### Additional information
In the begining we where capturing to an **USB-3 ME hard disk**, but at the end we were using **RAMdisks to discard an storage issue**. We tried also buffering (-S). We got some improvements but still see notable variations in the timestamps.

We are trying to understand this behaviour, if samples are lost, if the USB bus is the problem, if the storage...

**Any advice?**


### Steps to reproduce
1. Please see the [thread on qrz here](https://forums.qrz.com/index.php?threads/hackrf-test-broadcasting-fm-silence.683253/).

### Expected behaviour
I expected a low noise floor on the produced FM signal, but that wasn't the case.

### Actual behaviour
I would expect a low noise floor on a hackRF when producing FM signals (certainly lower than a cheap chinese FM transmitter), but the noise levels are uncomfortably appreciable. 

### Version information
Ubuntu 18.04 running GRC on a thinkpad T440p with a dual core i5 processor.

**hackrf_info output:**
```
hackrf_info version: unknown
libhackrf version: unknown (0.5)
Found HackRF
Index: 0
Serial number: 0000000000000000674068dc38a1881f
Board ID Number: 2 (HackRF One)
Firmware Version: 2018.01.1 (API:1.02)
Part ID Number: 0xa000cb3c 0x00684353
```


GRC version 3.7.11

I would like advice on how to investigate this further. I have a 100MHz oscilloscope handy if that helps. 

Hi all!  Recently we got a HackRF at my lab (USC RPL), and while we're having a really fun time playing around with it, we did have a few issues at the start getting the host software set up -- especially on Windows with MSVC.  It wasn't anything we couldn't deal with, but I did see a few places where the CMake build system could be improved, so I thought I'd try to clean it up a bit.  I incorporated a few bits and pieces from other projects I've worked on (mainly LibraryUtils.cmake, and a much less sophisticated version of FindFFTW), but also wrote a fair amount of new logic from scratch.  Hopefully the build system should run a bit smoother now!

There are a lot of small changes as you can see, but I'll try to list the major things here:
- Clean up and consolidate logic that was split across multiple build files into a single clean block at the top level
  - Compile flags
  - Dependencies
  - Uninstall logic
- Rewrite FindFFTW based on my earlier version.  It's now smart enough to consider libfftw3 vs libfftw3f (as well as all the other fftw3 libraries) as separate components, and to generate good, clear error messages if one of them is missing.
  - Should fix #360
- Clean up FindUSB and FindHACKRF according to CMake find module best practices.  
  - Hopefully the issues where the configuration continues even though libusb was not found (which should have been a fatal error) should stop now!
- Add a proper find module for libm
- Set up hackrf DLL export / import logic to be automatically managed by CMake.  

Hope all this stuff seems useful!  As you can see from the build instructions, it makes the Windows build quite a bit simpler because it enables all libraries to be found correctly just by setting the prefix path to where the libraries are installed.  Hopefully it should improve life on other platforms too.

I'm happy to answer any other questions or make any other changes you need, just let me know.  
Previously, when transmit was triggered, the HackRF would exhaust its SGPIO buffers followed by the first of its USB transfer buffers before requesting more data from the USB host. If the host was using `libhackrf` this would exhaust another four USB transfer buffers before sending samples provided by the transmit callback.

Now, we fill all these buffers with user-provided data as soon as possible so that when transmit is triggered the first sample output is the first user provided sample. We also explicitly try to keep the amount data transmitted or received over USB equivalent to that processed by the RF subsystem, even if some of this data is invalid. This was already the implicit previous behaviour.