There is no way to tell which upgrade upgrades the range of a unit/weapon.
There is no easy way to check which upgrade upgrades the speed of a unit, not even the `upgrades()` function does that. You can get the speed of a unit through the player, but that's obviously a very clunky interface for some usages.
There is currently no way to get the attack speed upgrade status of a unit/weapon. Where does this go to begin with (unit or weapon)?
The unit type doesn't have an easy way to get the attack upgrade for the unit type. You first have to get the ground weapon, then the air weapon if that failed. Then you can check the weapon for the upgrade type.

As far as I know, both the air and ground weapons share upgrade levels.
Resolution Expander stretches the visible field of the StarCraft Window past 640x480. This would be nice to have because the larger field of view makes it easier to see what your bot is doing.

SSCAIT has been using Resolution Expander for years. This also demonstrates that it works correctly with BWAPI draw commands.

https://www.ghoztcraft.net/forums/files/file/1412-resolution-expander/
https://tl.net/forum/brood-war/97122-custom-resolution-hack?page=9#174

![image](https://user-images.githubusercontent.com/116363/68247512-ff2ac780-ffe8-11e9-8221-e96c0add0697.png)

I tried to inject the winner AI from 2019 AIIDE starcraft competition with BWAPI 4.1.2 into SC ver1.6.1, without compilation. Simply by modifying the setting file  in order to redierct tha winner AI .dll path to bwapi won't work. Bot crashes at the very beginning of single game.

It would be very nice if the designers of new BWAPI could include those top AI into the upcoming version and make it possible for common players to enjoy games between AI and human. 

What if remastered SC could have such top AI features?
i.e. maybe https://github.com/OpenCppCoverage/OpenCppCoverage ?
https://github.com/bedatadriven/renjin/tree/master/tools/gcc-bridge

It will be nice to not have to re-implement all of the front-end API.
https://exhale.readthedocs.io/en/latest/index.html
Example:
https://github.com/bwapi/bwapi/blob/456ad612abc84da4103162ba0bf8ec4f053a4b1d/bwapi/BWAPIClient/Source/GameImpl.cpp#L591
Established bots should already check for valid positions and coordinates before calling any of the BWAPI methods. Right now, a bot author checks for a valid TilePosition then calls the relevant BWAPI methods in order to retrieve the state of the game and each of those methods duplicates the slow, redundant checks if a valid tile position, too. This hurts performance. 

Besides, calling a method like isVisible() with an invalid TilePosition could lead to hard to catch logic bugs where `false` is assumed to mean: it's not visible, so send a unit to explore that particular TilePosition.

So my suggestion: either:
1) expose the `data` member variable as `public` (not optimal) 
2) or remove the slow `if ( !TilePosition(x, y) )
      return false;` checks 
3) or create an "unsafe" version of each of those methods, e.g. `isVisibleUnafe()`

P.S. One can always implement their own wrappers around the "unsafe" methods and duplicating the safe check everywhere while removing the check from the "safer" methods is not possible. E.g. the Java wrappers could be more newbie-friendly by adding such checks to the low, level BWAPI methods