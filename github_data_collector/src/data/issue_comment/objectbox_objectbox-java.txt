Windows 10
Android Studio 3.6. RC1
objectboxVersion: 2.5.0
classpath 'com.android.tools.build:gradle:3.6.0-rc01'
![image](https://user-images.githubusercontent.com/12067656/72625979-c7df7c00-3984-11ea-9fc0-d4b0e184a255.png)


When inserting data, the attribute of the entity class is double
The value is 16 digits after the decimal point. Finally, it is displayed in the database as 6 digits after the decimal point. Why?
 i used objectbox-kotilin in androidx in debug model  
 when  i open the browser to see local database 
 i get a toast  in my app browser
 it tips  loading schema failed:Cannot read property 'name' of undefined
 
```
Error:java: java.lang.NoClassDefFoundError: io/objectbox/generator/idsync/IdSyncException
io.objectbox.generator.idsync.IdSyncException

------------------------------------------------------------------
<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>io.objectbox</groupId>
                            <artifactId>objectbox-processor</artifactId>
                            <version>${objectboxVersion}</version>
                        </path>
                    </annotationProcessorPaths>
                    <annotationProcessors>
                        <annotationProcessor>io.objectbox.processor.ObjectBoxProcessorShim</annotationProcessor>
                    </annotationProcessors>
                    <compilerArgs>
                        <arg>-Aobjectbox.modelPath=${project.basedir}/objectbox-models/default.json</arg>
                    </compilerArgs>
                </configuration>
</plugin>
```
Why do you guys recommend this over GreenDao? I feel like it's a step-back. You should explicitly list the numerous problems:

1. I cannot use ToOne and ToMany and such without extensive refactoring in an existing project. My POJO's are tied to databinding too, ergo I need to refactor at multiple points, besides issues with json parsing and internal references

2. Using ToOne and ToMany in my model layer means the model layer is strong-coupled to my database layer...A big no-no and breaks basic encapsulation principles (unlike annotations which are not exposed)

3. As others said huge problems with json parsing: even if you use custom setters, Objectbox WILL need the getters to be the proper type (that is, you need to use ToOne or ToMany again)

4. the lib should not break basic usage over assignable ID's... Again a very common use case where you get all your ID's from a remote server. Relations should be saved wheter you use your own ID's or not.

Annotating 20 POJO's and writing a service layer is work, but its not comparable to refactor every layer which uses the models.


## Issue Basics
- ObjectBox version (are using the latest version?): was seeing `SIGSEGV` on `2.3.4`, changes to `key not found error` if updating past `2.4.0-RC`, including `2.5.0`
- Reproducibility: always

## Reproducing the bug
### Description
Encountered this because we accidentally deleted `default.json` from our repo and the build from our CI service was published. The CI service does not save any files it generates during a build. Our only recourse was to reset UIDs to fix the crashes our users were experiencing, but in doing so we found further problems where the DB still crashes if you reset the UIDs. 

We initially thought it was just that we needed to update objectbox, but upon doing so first to 2.4.0-RC as suggested [here](https://github.com/objectbox/objectbox-java/issues/490) and then to 2.5.0 we found the app still crashed when first calling ObjectBox. We also tried running clean and then rebuild before running the app with the same result.

Deleting the `objectbox` directory before using ObjectBox seems to cause the database to regenerate and thus solve the issue. Currently we are doing this since we use the db simply to cache images, but it would be a huge inconvenience if more important data were being stored.

Steps:
1. After successfully running an app that starts ObjectBox in the main application class, delete `default.json` and run again to create a crashing state.
2. Follow the instructions [here](https://docs.objectbox.io/advanced/data-model-updates#uids) to reset the UIDs for all your entities.
3. Run clean and then rebuild.
4. Run the app. If you are running 2.3.4 you will see a `SIGSEGV`, if you run 2.4.0-RC or later, including 2.5.0, you will see `io.objectbox.exception.DbException: STD out of range: map::at:  key not found`


### Code
```
boxStore = MyObjectBox.builder()
                .androidContext(context.applicationContext)
                .androidReLinker(ReLinker.log {Log.d("OBJECTBOX", it) })
                .build()
```

### Logs & stackstraces
Relevant part of stacktrace running version 2.5.0
```
 Caused by: io.objectbox.exception.DbException: STD out of range: map::at:  key not found
        at io.objectbox.BoxStore.nativeCreate(Native Method)
        at io.objectbox.BoxStore.<init>(BoxStore.java:205)
        at io.objectbox.BoxStoreBuilder.build(BoxStoreBuilder.java:383)
        at com.casenex.skedula.service.ObjectBox.init(ObjectBox.kt:17)
        at com.casenex.skedula.MainApp.onCreate(MainApp.java:101)
        at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1125)
        at android.app.ActivityThread.handleBindApplication(ActivityThread.java:6062)
```

## Entities
File defining Entities:
```
@Entity
@Uid(6460694487792810404L)
data class StudentImageDBModel(val studentId: String = "", var imageDirectory: String? = null,
                               @Id var id: Long = 0) {

    companion object {
        const val IMG_DIRECTORY = "studentImages"
    }

    lateinit var groupedCourseIds: ToMany<GroupedCourse>
    lateinit var courseIds: ToMany<Course>

    .....functions for saving images to disk....
}

@Entity
@Uid(1431033621839945644L)
data class GroupedCourse(@Index @Unique val classroomId: String = "", @Id var dbId: Long = 0) {
    @Backlink
    lateinit var images: ToMany<StudentImageDBModel>
}

@Entity
@Uid(2787201123719742511L)
data class Course(@Index @Unique val courseId: String = "", @Id var dbId: Long = 0) {
    @Backlink
    lateinit var images: ToMany<StudentImageDBModel>
}
```

JSON after UID update:
```
{
  "_note1": "KEEP THIS FILE! Check it into a version control system (VCS) like git.",
  "_note2": "ObjectBox manages crucial IDs for your object model. See docs for details.",
  "_note3": "If you have VCS merge conflicts, you must resolve them according to ObjectBox docs.",
  "entities": [
    {
      "id": "4:1431033621839945644",
      "lastPropertyId": "2:162691606478412876",
      "name": "GroupedCourse",
      "properties": [
        {
          "id": "1:5090861625337095037",
          "name": "classroomId",
          "indexId": "3:7406563955511368738",
          "type": 9,
          "flags": 2080
        },
        {
          "id": "2:162691606478412876",
          "name": "dbId",
          "type": 6,
          "flags": 1
        }
      ],
      "relations": []
    },
    {
      "id": "5:2787201123719742511",
      "lastPropertyId": "2:5860716200551679024",
      "name": "Course",
      "properties": [
        {
          "id": "1:4269405058270986132",
          "name": "courseId",
          "indexId": "4:279327775623903022",
          "type": 9,
          "flags": 2080
        },
        {
          "id": "2:5860716200551679024",
          "name": "dbId",
          "type": 6,
          "flags": 1
        }
      ],
      "relations": []
    },
    {
      "id": "6:6460694487792810404",
      "lastPropertyId": "3:6695869894538364357",
      "name": "StudentImageDBModel",
      "properties": [
        {
          "id": "1:3897875941112880560",
          "name": "studentId",
          "type": 9
        },
        {
          "id": "2:2291056640330746637",
          "name": "imageDirectory",
          "type": 9
        },
        {
          "id": "3:6695869894538364357",
          "name": "id",
          "type": 6,
          "flags": 1
        }
      ],
      "relations": [
        {
          "id": "3:627460102729787294",
          "name": "groupedCourseIds",
          "targetId": "4:1431033621839945644"
        },
        {
          "id": "4:2317646191202819621",
          "name": "courseIds",
          "targetId": "5:2787201123719742511"
        }
      ]
    }
  ],
  "lastEntityId": "6:6460694487792810404",
  "lastIndexId": "4:279327775623903022",
  "lastRelationId": "4:2317646191202819621",
  "lastSequenceId": "0:0",
  "modelVersion": 5,
  "modelVersionParserMinimum": 5,
  "retiredEntityUids": [
    3794028600819710372,
    4642718125494466153,
    7649095607267539718,
    6358682850581800834,
    109493621747237075
  ],
  "retiredIndexUids": [
    9134134614437346086,
    4947043087788255982
  ],
  "retiredPropertyUids": [
    2556793487482023512,
    423016369049669357,
    631902147354736775,
    5136684355501953077,
    3798253950937802252,
    7844415997709045908,
    2815140677304063067
  ],
  "retiredRelationUids": [
    7036404764986467889,
    5192828717223080974
  ],
  "version": 1
}
```

## Misc
Known workaround is to programmatically delete objectbox directory before calling `MyObjectBox.builder().androidContext().build()`


## Issue Basics
- ObjectBox version : 2.5.0
- Reproducibility: *[always]*

## Reproducing the bug
### Description
when I want to convert my object to JSON with gson it returns null for ToOne<PomoSubject> relation.
you can see the result in output: "pomoSubject":{} but actually it's not null.
expected output must be exactly such as PomoSubject Model Map.

### Code
```
        List<Pomodoro> pomodoroList = ObjectBox.get().boxFor(Pomodoro.class)
                                                           .query().equal(Pomodoro_.mongoId, "")
                                                           .eager(Pomodoro_.pomoSubject).build().find();
            Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
            gson.toJson(pomodoroList); //>> output
```


## Entities
 
```
@Entity
public class Pomodoro  {
    @Id
    public long id;
    @SerializedName("_id")
    private String mongoId="";  
    @Expose
    private int pomoDurationMinute;

    @Expose
    private ToOne<PomoSubject> pomoSubject;
}

@Entity
public class PomoSubject   {
    @Id
    public long id;
    @Expose
    private String _id; //mongodb id;
    @Expose
    @Unique
    private String title;
    private int count;
    private long totalTimeMinute;

}
```

##output
`[{"finishTime":1578685347767,"gregDate":"Jan 10, 2020 11:12:27 PM","pomoDurationMinute":2,"pomoSubject":{}},{"finishTime":1578685379891,"gregDate":"Jan 10, 2020 11:12:59 PM","pomoDurationMinute":2,"pomoSubject":{}},{"finishTime":1578685508589,"gregDate":"Jan 10, 2020 11:15:08 PM","pomoDurationMinute":2,"pomoSubject":{}},{"finishTime":1578685543225,"gregDate":"Jan 10, 2020 11:15:43 PM","pomoDurationMinute":2,"pomoSubject":{}}]`

## Misc
gson:2.8.6
gradle:3.5.3
minSdkVersion 16
targetSdkVersion 28

When the dependency library is referenced, the size of the compiled APK file is much larger
*It will be nice to support and have this feature in objectbox too,thanks

Annotation `@Unique` is currently missing ability to mark string unique index case-sensitive/case-insensitive, previously this function was proposed in https://github.com/objectbox/objectbox-java/issues/20#issuecomment-335006482

```java
@Entity public class User {
  @Id public long id;
  @Unique(caseSensitive=true) String username;
  @Unique(caseSensitive=false) String email;
}
```

This might as well be replaced by more manual setting of collate

```java
@Entity public class User {
  @Id public long id;
  @Unique(collate=CollateType.BINARY) String username; // or none, as BINARY is default
  @Unique(collate=CollateType.NOCASE) String email;
}
```


Could this feature be added?

Is it possible to somehow achieve schema setting (`UNIQUE (email COLLATE NOCASE)`) right now with ObjectBox version 2.5.0, or impossible without adding support in the library?