
I've been transitioning my workflow into using tidymodels, but am noticing a lack of `broom:: `coverage.

## Glance Doesn't Work, Tidy Does

```r
# tidymodels_0.0.3
# broom_0.5.2
# parsnip_0.0.4
library(tidymodels)
set.seed(4831)
split <- initial_split(mtcars, props = 9/10)
car_train <- training(split)
car_test  <- testing(split)

car_model <- linear_reg()

lm_car_model <- 
  car_model %>%
  set_engine("lm")

lm_fit <-
  lm_car_model %>%
  fit(mpg ~ ., data = car_train)

# doesnt work, but classic lm does
broom::glance(lm_fit)
lm(mpg ~ ., data = car_train) %>% broom::glance()

# works
broom::tidy(lm_fit)
```
Is this something planning on being ironed out in the future? I've also noticed `discrim` supports no broom operations either. 

Thanks for your feedback


I was browsing through the projects of the `tidymodels` organization and I see that there's a project on "Econometric Tools" and why people flock to Stata on this topic. I'm not sure where to put this comment, feel free to move it elsewhere if it's relevant elsewhere.

I think incorporating econometric models in some way in the `tidymodels` framework would be interesting but it's definitely reinventing the wheel since there's quite some work on econometrics in R. In particular, [zelig](http://docs.zeligproject.org/index.html) is a bit of the "tidymodels" of econometric modelling, wrapping nearly [all](http://docs.zeligproject.org/articles/index.html#section-core-zelig-model-details) standard econometric models into a unified framework. I won't list all of the econometric packages out there because I think `zelig` can be a good starting point to think about this.
Prepare for release: 
 
* [ ] Check [current CRAN check results](https://cran.rstudio.org/web/checks/check_results_tidymodels.html) 
* [x] `devtools::check()` 
* [x] `devtools::check_win_devel()` 
* [x] `rhub::check_for_cran()` 
* [x] `revdepcheck::revdep_check(num_workers = 4)` 
* [ ] Update `cran-comments.md` 
* [ ] [Polish NEWS](https://style.tidyverse.org/news.html#news-release) 
* [ ] Review pkgdown reference index for, e.g., missing topics 
 
Submit to CRAN: 
 
* [ ] `usethis::use_version('patch')` 
* [ ] `devtools::submit_cran()` 
* [ ] Approve email 
 
Wait for CRAN... 
 
* [ ] Accepted :tada: 
* [ ] `usethis::use_github_release()` 
* [ ] `usethis::use_dev_version()` 

I don't know how the author (@fsolt) feels about it, but to me the [dotwhisker](https://github.com/fsolt/dotwhisker) package would be a natural part of the tidymodels ecosystem ...
@topepo 
I heard back this:

"I'm confident this project will get done, it might just take some months to get there."

We should build a centralized site like tidyverse.org. I think the headline announcement needs to be:

- the API is under development and we are going to get things wrong for a while, so don't build on top of this stuff for a while and expect abstractions to change

i.e. we don't want people to bake early mistakes / experiments into their code and then get stuck with them.
As per recent tidyverse [Do not import notice](https://www.tidyverse.org/articles/2018/06/tidyverse-not-for-packages/).

Not sure how this was accomplished on the technical end, but would probably be good to replicate here.
`tidymodels` has a tagging system so that users can easily load other tidy model packages for a specific domain (e.g text analysis, etc). For example, the user could use:

```r
> tag_update("text analysis")
The following packages are out of date:

● reticulate (1.8 -> 1.9)

Start a clean R session then run:
install.packages("reticulate")

> tag_attach("text analysis")
── Attaching packages ────────────────────────
✔ tidytext 0.1.9     ✔ keras    2.1.6
``` 

These extra packages would not be formal dependencies to `tidymodels`. Also, I'm in the process of defining "how tidy a package needs to be" for inclusion, which I'll document somewhere. 

In the meantime, what tidy time series packages (on CRAN) would @mdancho84, @DavisVaughan, and @robjhyndman suggest for inclusion? 

 