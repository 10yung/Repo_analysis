Gem Load Error is: undefined method `alias_method_chain' for #<Class:ActiveRecord::Associations::JoinDependency>
Did you mean?  alias_method
Backtrace for gem load error 

this error arrised  the after i added the gem "Squeel"
Ernie mentioned in mid 2016 that he was happy to put a reference to baby_squeel in the project if the maintainers were no longer willing to maintain this project https://github.com/activerecord-hackery/squeel/issues/412. It's been three years and no new commits. I think this will be helpful to invite more maintainers as well as give information for those upgrading past 4.

Thank you so much to Ernie and the team for the wonderful work on this project over the years! :) 
I have a column of type String in the User model, this column is an array that is saved as a string. I need to check if there is an element in that array with the where clause. How can I do it?

I thought something like this:

`scope :notified, ->(user){ where{array(tags).in [user.id] } }`

But it does not work.
64 open issues, last update more than 1.5 years ago
is gem still maintained?

When a column is referenced in more than one where clause, the group_by and subsequent re-ordering of columns can cause the wrong bound values to be associated with columns. The columns are reordered, but the bound values are attached in their original order.

It looks like the current collapse_wheres in Squeel is based on the one from [Active Record 3](https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/relation/query_methods.rb#L199)

I am unsure why the columns were grouped originally, but this now results in incorrect behavior under certain circumstances. You can see that in [Active Record 4's version of this method](https://github.com/rails/rails/blob/4-0-stable/activerecord/lib/active_record/relation/query_methods.rb#L890), where clauses are no longer grouped.

My change removes the grouping and reordering.

With the original collapse_wheres, you can see the spec I have added failing:

``` ruby
it 'does not reorder binaries' do
  relation = Cat.where(hair_type: "short").where(name: "Crookshanks").where(hair_type: "long")
  relation.to_sql.should eq "SELECT #{Q}cats#{Q}.* FROM #{Q}cats#{Q} WHERE #{Q}cats#{Q}.#{Q}hair_type#{Q} = 'short' AND #{Q}cats#{Q}.#{Q}name#{Q} = 'Crookshanks' AND #{Q}cats#{Q}.#{Q}hair_type#{Q} = 'long'"
end
```

```
Failures:

  1) Squeel::Adapters::ActiveRecord::RelationExtensions#collapse_wheres does not reorder binaries
     Failure/Error: relation.to_sql.should eq "SELECT #{Q}cats#{Q}.* FROM #{Q}cats#{Q} WHERE #{Q}cats#{Q}.#{Q}hair_type#{Q} = 'short' AND #{Q}cats#{Q}.#{Q}name#{Q} = 'Crookshanks' AND #{Q}cats#{Q}.#{Q}hair_type#{Q} = 'long'"

       expected "SELECT \"cats\".* FROM \"cats\" WHERE \"cats\".\"hair_type\" = 'short' AND \"cats\".\"name\" = 'Crookshanks' AND \"cats\".\"hair_type\" = 'long'"
            got "SELECT \"cats\".* FROM \"cats\" WHERE \"cats\".\"hair_type\" = 'short' AND \"cats\".\"hair_type\" = 'Crookshanks' AND \"cats\".\"name\" = 'long'"

       (compared using ==)
     # /Users/farr/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/rspec-expectations-2.6.0/lib/rspec/expectations/fail_with.rb:29:in `fail_with'
     # /Users/farr/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/rspec-expectations-2.6.0/lib/rspec/expectations/handler.rb:19:in `handle_matcher'
     # /Users/farr/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/rspec-expectations-2.6.0/lib/rspec/expectations/extensions/kernel.rb:27:in `should'
     # ./spec/squeel/adapters/active_record/relation_extensions_spec.rb:1007:in `block (3 levels) in <module:ActiveRecord>'

Finished in 1.43 seconds
870 examples, 1 failure, 7 pending

Failed examples:

rspec ./spec/squeel/adapters/active_record/relation_extensions_spec.rb:1005 # Squeel::Adapters::ActiveRecord::RelationExtensions#collapse_wheres does not reorder binaries
~/projects/squeel <master> &
```

Note that as the query was built, it is trying to use "long" as the cat's name instead of "Crookshanks".


I keep getting

NotImplementedError: Squeel does not support Active Record version 5.0.0

on thin server start

Believe it or not, basic `unscope` functionality was broken. I don't know how but with Squeel in play, `where_values` somehow becomes a nested array. Flattening it first fixes the issue.

I have adjusted the 4.1 override to use `super` so that less code is duplicated. This isn't possible for 4.0. I have added a new override for 4.2 because `where_values` should not be mutated in that version.

Can squeel support common table expressions (a.k.a. `WITH` clauses)?

The [postgres_ext](https://github.com/dockyard/postgres_ext) gem provides this functionality with Postgres, but it doesn't play nicely with squeel.

@bigxiang 

This should Resolve #418

Since the 4.1 version of `reverse_order!` is used, an additional check has been
 added to actually reorder the `ORDER BY` clause if there are non-nil elements
within it.

Additionally, a spec has been added to ensure proper ordering takes place.
