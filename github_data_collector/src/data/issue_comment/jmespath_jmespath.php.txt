I get the following exception:

```
JmesPath\SyntaxErrorException : Syntax error at character 23
data.relationships.flow-actions.data[].id
                       ^
Did not reach the end of the token stream
```

With a JSON document like:

```json
{
  "data": {
    "type": "flows",
    "id": "e365203f-b386-4ff0-903e-4c5d275a6988",
    "attributes": {
      "name": "Patient Intake",
      "details": "Intake of a new Dialysis patient.",
      "updated_at": "2020-01-07T16:53:25.174226+00:00",
      "created_at": "2020-01-07T16:53:25.169026+00:00"
    },
    "relationships": {
      "flow-actions": {
        "links": {
          "related": "http://localhost:8080/flows/e365203f-b386-4ff0-903e-4c5d275a6988/flow-actions"
        },
        "data": [
          {
            "type": "flow-actions",
            "id": "6a7f3aae-6bb3-4b80-af4c-cdeb209503d0"
          }
        ]
      }
    },
    "links": {
      "self": "http://localhost:8080/flows/e365203f-b386-4ff0-903e-4c5d275a6988"
    }
  }
}
```

The same expression works correctly with the http://jmespath.org/ demo on the home page.
We currently fail on the following upstream compliance tests:

```
  {
    "comment": "Combined syntax",
    "given": [],
    "cases": [
        {
          "expression": "*||*|*|*",
          "result": null
        },
        {
          "expression": "*[]||[*]",
          "result": []
        },
        {
          "expression": "[*.*]",
          "result": [null]
        }
    ]
  }
```

The first and last case are incorrect, but we handle the middle case correctly at the moment.
Add Arithmetic Operators (describe in README.rst)
Add Root Operator (describe in README.rst)
hi. Does it support to travers object? when data is loaded with json serializer for example, the result data set if fully loaded object.
This adds support for PHP objects that are not `\Array` or `\stdClass`.

Provided your classes implement either `JmesPathableObjectInterface` or `JmesPathableArrayInterface` you will be able use JMESPath expressions to extract information from objects derived from them. The small example below hopefully provides an explanation.

``` php
$product1 = new StdClassLike();
$product1->title = 'Item One';
$product1->price = 4.99;

$product2 = new StdClassLike();
$product2->title = 'Item Two';
$product2->price = 9.99;

$basket = new StdClassLike();
$basket->items = new ArrayLike([
    $product1,
    $product2
]);

$result = JmesPath\Env::search('max_by(items, &price)', $basket);
var_dump($result);

/*
    object(StdClassLike)#7 (1) {
      ["values":"StdClassLike":private]=>
      array(2) {
        ["title"]=>
        string(8) "Item Two"
        ["price"]=>
        float(9.99)
      }
    }
*/
```

Two gists show how `StdClassLike` and `ArrayLike` are implemented.
- [StdClassLike](https://gist.github.com/davidtsadler/cd2e09dbc4455541093f22c3686d4834)
- [ArrayLike](https://gist.github.com/davidtsadler/479786334dbeb3bc8c4d0e80123e4d46)

I've updated the [compliance test](https://github.com/davidtsadler/jmespath.php/blob/support-php-objects/tests/ComplianceTest.php#L114) so that another pass is made through the test suites. This extra pass rebuilds the json [as PHP objects](https://github.com/davidtsadler/jmespath.php/blob/support-php-objects/tests/ComplianceTest.php#L164) before running the compliance test. Extra tests have also been added to cover the changes made to the code.

I perfectly understand if these changes won't be accepted. JMESPath is primarily for extracting information from json. Providing the same functionality for PHP objects may be outside of it's scope and there may not be enough interest from PHP developers to justify maintaining the code. 

Hello ;-)

With envy I have seen that `jmespath.py` added a _custom function_ feature in jmespath/jmespath.py#102 - and that is something I need for the PHP implementation too ;-) so I created this PR that should add this feature - I also added tests and documentation.

let me know if anything is missing.

PS: I also changed the singleton handling a bit in `FnDispatcher` as IMHO the instance should be a defined static class property, not implicitly created in the `getInstance()` method.
