At the moment, the display canvas seems to be anchored as the output of the code cell that creates it.

It would be useful if the canvas could float / be dragged around the notebook so that as a script is built up over several cells, each step can be inspected in turn without having to try to scroll back to the display canvas to see what's happening.

There is an example of a floating canvas in this (old) notebook turtle repo: https://github.com/gkvoelkl/ipython-turtle-widget
Hi guys,

I observed another strange effect, when moving the turtle to close to the edge of the drawing area.
This code example stays away from the borders and looks like I would expect:

![image](https://user-images.githubusercontent.com/41440181/50005712-94753580-ffab-11e8-9462-74472bc4e8b0.png)

If I use the same code - but now extend the line length to hit the edge, funny things occur:

![image](https://user-images.githubusercontent.com/41440181/50005768-d00fff80-ffab-11e8-97d3-8eacdf0dd2e3.png)

As you can see, not only the starting angles of the lines are messed up. They should have almost the same degree between them - which they do not have. Also the 90 degree turn at the end of the first line is far away from being 90 degrees consistently. 

This makes it completely unpredictable, how a drawing will look, when you come close to the border even once during the drawing process.

Any suggestions?

Regards
Pascal
Hi guys,

I observed a problem with the title in the corner.
Moving the turtle closer and closer to the wall results in unpredictable movements.
In the following example I expected three parallel lines - but the closer I move the turtle towards the edge of the drawing board, the higher an angle of error I receive. 

![image](https://user-images.githubusercontent.com/41440181/49989699-6972ed80-ff7b-11e8-8757-13d7d776075a.png)

What makes it even strange - and even more unpredictable - is the fact, that these unexpected angles CHANGE, when I change the length of the forward move. In the next example I reduced the forward-movement to 20 steps - an receive a 45 degree error in the drawing of the line starting at (0,0).

![image](https://user-images.githubusercontent.com/41440181/49989932-1cdbe200-ff7c-11e8-88e8-3fbb84f15a54.png)

Any ideas on this?
Can you solve this - or explain, what should be done in order to circumvent this problem?

Regards
Pascal
I'm curious if anyone has gotten this to work using JupyterLab rather than e.g. jupyter notebooks.

I'm installing it using

cd /opt && \                                                                                             
        git clone https://github.com/dirkcgrunwald/mobilechelonian.git && \                                      
        cd mobilechelonian && \                                                                                  
        python setup.py install 

in my setup (docker / zero2jupyterlab setup). 

When running the example I get "Error creating widget: could not find model" which appears to mean I haven't done a "jupyter labextension install" -- but even if I do that, doesn't work.

Not certain what Fine Manual to read to offer a patch since i haven't authored ipywidgets or jupyterlab widgets before.
I found this module extremely useful for online teaching using Jupyter notebook. However, there are a lot fo turtle functions not supported. It would be great if add more functions to this package. In particular, position(), setx(), sety(), 
If you give it a `left` or `right` command that has lots of decimals, then the turtle performs this action, but hangs and will not respond to commands afterwards.

In my case, I can recreate this by:

*won't work*
```
t.right(40.435435)
t.forward(60)
```

*will work*
```
t.right(np.round(40.435435))
t.forward(60)
```
Hello, maybe I am too new to python. It doesnot do anything in jupyter. When I run the example with

`from turtle import Turtle`

from my python3 installation, it is ok. If I use the same in Jupyter ... `TclError: no display name and no $DISPLAY environment variable`

With `from mobilechelonian import Turtle` it is just silent. On `print(t)` it says
`<mobilechelonian.Turtle object at 0x7fa0dc3eaf60>`, so something happens. Some `%inline` directive is missing maybe? Thank you.
