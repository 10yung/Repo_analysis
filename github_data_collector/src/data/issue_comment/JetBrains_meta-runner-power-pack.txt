This step occasionally fails for us for legitimate reasons, but we want the build to continue because we can add tags manually later as a workaround. It would be great if there was some kind of checkbox to treat errors as warnings or something like that and continue the build.
The previous implementation of the meta-runner didn't consider switch "/EnsureAssemblyInfo" of gitversion.exe
This adds new checkbox which can enable it.
Hi,

I'm completed unable to run GitReleaseNotes. I receive the following:

Unhandled Exception: System.InvalidOperationException: Number of ordinal arguments must at least {0}.
   at Args.ModelBindingDefinition`1.EnsureCorrectNumberOfOrdinalArguments(IEnumerable`1 ordinalArgs)
   at Args.ModelBindingDefinition`1.BindModel(TModel model, IEnumerable`1 args)
   at Args.ModelBindingDefinition`1.CreateAndBind(IEnumerable`1 args)
   at GitReleaseNotes.Program.Main(String[] args) in C:\projects\gitreleasenotes\src\GitReleaseNotes\Program.cs:line 32

I believe I'm passing in the proper command line args, but can't get past this exception.  I also tried to create this on the project page, but it looks like Jake has issues disabled.  Any help is appreciated.

Thanks!
When "Export dotCover report" is enabled and report type is HTML, the html file (dotCoverReport.html) is captured in the artifacts, but the folder containing all the reports assets (css, images, js, etc.) is not.

To have a functional html report we need to capture the assets folder as well.  This worked for me:
```powershell
Write-Output "##teamcity[publishArtifacts '$dotCoverReportFile']"

if ($dotCoverReportType.ToUpper() -eq 'HTML') {
    $dotCoverReportFolder = $dotCoverReportFile.Substring(0, $dotCoverReportFile.LastIndexOf('.'))
    Write-Output "##teamcity[publishArtifacts '$dotCoverReportFolder\ => $dotCoverReportFolder']"
}
```
If xUnit Console NuGet package contains multiple xunit.console.exe files, current code will include them all in the command line causing the xUnit execution to fail.  For example, the standard xunit.runner.console.2.4.1 package contains exe's for net542, net46, net461, net462, etc.

May want to add a parameter for specific framework version or at least check for multiple results and just grab the first one (that's what I ended up doing).

**Original code:**
```powershell
## get xunit runner from nuget package feed
Invoke-Expression "$nugetExe install xunit.runner.console -source $xUnitNuget"
$xunit = Join-Path $workingDir "xunit.runner.console.*\tools\$xUnitExe" | Resolve-Path

if (-not $xunit) {
    # Try finding xunit under framework specific folder
    $xunit = Join-Path $workingDir "xunit.runner.console.*\tools\net4*\$xUnitExe" | Resolve-Path
}
```

**Workaround with check for multiple results (also include fix for space in path mentioned in #135:**
```powershell
## get xunit runner from nuget package feed
Invoke-Expression "& '$nugetExe' install xunit.runner.console -source $xUnitNuget"
$xunit = Join-Path $workingDir "xunit.runner.console.*\tools\$xUnitExe" -Resolve
if ($xunit.Length -gt 0) {$xunit = $xunit[0]}

if (-not $xunit) {
    # Try finding xunit under framework specific folder
    $xunit = Join-Path $workingDir "xunit.runner.console.*\tools\net4*\$xUnitExe" -Resolve
    if ($xunit.Length -gt 0) {$xunit = $xunit[0]}
}
```


The current approach to using Invoke-Expression to launch nuget, xunit and dotCover exe's will fail if there is a space in the working folder path.  It can be fixed by using call operator "&" and single quoted paths in conjunction with Invoke-Expression.  Examples below with original code commented out followed by fixed code:

**NuGet:**
```powershell
#Invoke-Expression "$nugetExe install xunit.runner.console -source $xUnitNuget"
Invoke-Expression "& '$nugetExe' install xunit.runner.console -source $xUnitNuget"
```

**xUnit:**
```powershell
#$xunitOnlyCommand = "$xunit $xunitArg"
$xunitOnlyCommand = "& '$xunit' $xunitArg"
```

**dotCover:**
```powershell
#$command = "$dotCover $dotCoverArgs"
$command = "& '$dotCover' $dotCoverArgs"
```



Retry to add tags 3 times before failing.
The existing MR for GitVersion will set the `FullSemVer` variable as build number in Teamcity, this variable is purely based on the repository and does not take into account the build counter kept by Teamcity.
While in some situations (as described by @RobSmyth in GitTools/GitVersion#1367) this information is considered important or even critical.

At the moment Chocolately does not seem to offer a good way to say 'I want version 4.x, included beta- or pre-releases', so I've just had to pass the --pre parameter to the `choco install` call in these runners, this will result in the next beta release being installed (5.x?) as soon as GitVersion 4.0 is released in production.
We are using the version from July 31 in TC 2018.1.1. We specified particular credentials in the "Add Build Tags" build step. It works 99% of the time, but on rare occasions in random builds we get this:
```
[15:02:23]prepare-internal-credentials:
[15:02:23]
[15:02:23]prepare-custom-credentials:
[15:02:23]     [echo] using custom credentials
[15:02:23]
[15:02:23]prepare-tags:
[15:02:23]
[15:02:23]addTags:
[15:02:23]     [http] HTTP Request
[15:02:23]     [http] ********************
[15:02:23]     [http] URL:		https://buildserver/httpAuth/app/rest/8.0/builds/id:1302210/tags
[15:02:23]     [http] Method:		POST
[15:02:23]     [http] 	Content-Type: application/xml
[15:02:23]     [http] Entity:		yes
[15:02:23]     [http] ------ BEGIN ENTITY ------
[15:02:23]     [http] <tags><tag>ObfuscatedTag1</tag><tag>ObfuscatedTag2</tag></tags>
[15:02:23]     [http] ------- END ENTITY -------
[15:02:23]     [http] 
[15:02:23]     [http] HTTP Response
[15:02:23]     [http] ********************
[15:02:23]     [http] Status:		401
[15:02:23]
[15:02:23]BUILD FAILED
[15:02:23]E:\Obfuscated\Obfuscated\build9079597898286185054.tmp:73: Expected Status [204] but got [401] for URI [https://buildserver/httpAuth/app/rest/8.0/builds/id:1302210/tags]
```

I can't figure out the cause. Credentials in the build steps do not change between builds. Is using "8.0" in the URL a problem? Should it use the most recent endpoint?

Is it possible that TeamCity cannot handle these REST calls if multiple calls happen at the same time?