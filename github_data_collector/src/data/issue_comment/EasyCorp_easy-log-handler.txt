EasyLog formatter try to serialize an unserialazable object.
Indeed, objects based on Resources can't be serialized.

How can I filter this types of object ?

Trace
```
Fatal error: Uncaught Exception: Serialization of 'SplTempFileObject' is not allowed in /srv/http/vendor/symfony/yaml/Inline.php:141
Stack trace:
#0 /srv/http/vendor/symfony/yaml/Inline.php(141): serialize(Object(App\Infrastructure\Component\Notification\Message\Mail\Mail))
#1 /srv/http/vendor/symfony/yaml/Dumper.php(62): Symfony\Component\Yaml\Inline::dump(Object(App\Infrastructure\Component\Notification\Message\Mail\Mail), 1)
#2 /srv/http/vendor/symfony/yaml/Dumper.php(105): Symfony\Component\Yaml\Dumper->dump(Object(App\Infrastructure\Component\Notification\Message\Mail\Mail), 1, 0, 1)
#3 /srv/http/vendor/symfony/yaml/Yaml.php(99): Symfony\Component\Yaml\Dumper->dump(Array, 2, 0, 1)
#4 /srv/http/vendor/easycorp/easy-log-handler/src/EasyLogFormatter.php(369): Symfony\Component\Yaml\Yaml::dump(Array, 2, 2, 1)
#5 /srv/http/vendor/easycorp/easy-log-handler/src/EasyLogFormatter.php(521): EasyCorp\EasyLog\EasyLogFormatter->formatContext(Array)
#6 /srv/http/vendor/easycorp/easy-log-handler/src/EasyLogFormatter.php(84): EasyCo in /srv/http/vendor/symfony/yaml/Inline.php on line 141
```
Hello and thank you for this beautiful handler :-)

In the doc it is advised to define a buffered handler in monolog config but I think this sort of handler is tricky to use for long running process such as Messenger worker no?

I did not try it yes I am considering a solution that would involved having a custom middleware that would flush all Resetable monolog Logger found in the container.

WDYT? Am IÂ missing something?
hi i'm use on project SF 3 and now SF4.3.

i dont know how i can use with my old code : 
```
     grouped_critical:
            type:           group
            members:        [streamed_critical, buffered_critical]

        streamed_critical:
            type:           rotating_file
            max_files:      15
            path:           "%kernel.logs_dir%/%"

        buffered:
            type:     buffer
            handler:  easylog
            channels: ["!event"]
            level:    debug

        easylog:
            type: service
            id:   easycorp.easylog.handler

        buffered_critical:
            type:           buffer
            handler:        swift_critical
            formatter:      monolog.formatter.html

        swift_critical:
            type:           swift_mailer
            from_email:     "%email%"
            to_email:       "webmaster@%web_address%"
            subject:        Une erreur critique est survenue !
            level:          info
            formatter:      monolog.formatter.html
            content_type:   text/html
```
thank for helping


This logger/formatter outputs logs only on request end (probably on `kernel::shutdown`. This is not usable for console workers running indefinitely. In that case nothing is logged to the output at all!

You should allow `stream` type in configuration which solves this problem. 
I got an error on log records with context objects with some internal callables in properties.
My objects implements `\JsonSerializable` interface, so I don't expect this error.

Reproduction script: https://github.com/andrew-demb/easy-log-handler-bug-serialize-closure