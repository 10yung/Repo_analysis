I have a C++ function I'm defining like this:

void the_func(const std::string& arg1, const std::function<void(const std::string& cbarg1, const std::string& cbarg2)>& callback_result)
m.def("the_func", &the_func, R"doc" , py::arg("arg1"), py::arg("callback_result"));

python is calling the_func() into C++ and then C++ is calling callback_result() into python.
Now when the callback arrives in python, I'd like it to be called with kwargs rather than positional args, or atleast have a way to know the name of the argument via inspect.
Is that possible?
Hello,

Just suggesting a small change in the documentation.
In section "_Combining virtual functions and inheritance_", the bindings with trampoline class don't mention the inheritance to parent class.
It may be straightforward for some people, but, as a beginner, it threw me off for a bit.
I suggest showing the bindings as they would look in a complete example.
## Issue description

When attempting to call the function of an inherited class (virtual or otherwise), the program immediately terminates with a segfault. The problem persists even when switching the parent class around, leaving the problem only to be within the binding or the base class. However, the base class behaves appropriately when constructed by itself, therefore I believe something is going wrong during the binding process. I have tested this on the latest master commit (07e225932235ccb0db5271b0874d00f086f28423) on both Windows 10 and macOS Catalina.

## Reproducible example code

[Project link](https://github.com/ksmit799/PyPlayground/tree/events)

The issue centres around two particular classes, both of which can be compiled outside of the project (no internal/external dependencies). `src_cpp/event/event_emitter.h` and `src_cpp/event/event.h`. `event.h` is required by `event_emitter.h` which is the problem file. `src_cpp/render/container.h` and `src_cpp/render/container.cpp` are examples of inheritance where the generated bindings cause a segfault (bindings can be found at the bottom of container.h).

### C++ Inheritance
**container.h**
`class Container : public virtual EventEmitter`

**container.cpp**
```c++
py::class_<Container, EventEmitter>(container, "Container")
    // Constructors.
    .def(py::init<>())
    // Functions & variables.
    .def("destroy", &Container::Destroy, "")
    .def("set_active", &Container::SetActive, "")
    .def("add_child", &Container::AddChild, "")
    .def("remove_child", &Container::RemoveChild, "")
    .def_readwrite("active", &Container::active_);
```

**event_emitter.cpp**
```c++
py::class_<EventEmitter>(event_emitter, "EventEmitter")
    // Constructors.
    .def(py::init<>())
    // Functions & variables.
    .def("on", &EventEmitter::On, "")
    .def("off", &EventEmitter::Off, "")
    .def("once", &EventEmitter::Once, "")
    .def("add_listener", &EventEmitter::AddListener, "")
    .def("remove_listener", &EventEmitter::RemoveListener, "")
    .def("remove_all_listeners", &EventEmitter::RemoveAllListeners, "")
    .def("emit", &EventEmitter::Emit, "")
    .def("emit_now", &EventEmitter::EmitNow, "");
```

**Example Python Calls**
```python
# Prints first argument given.
def test(args):
    print(args[0])

# Works as expected.
self.emitter = EventEmitter()
self.emitter.on("test", test)
self.emitter.emit_now("test", "hello world")

# Crashes with segfault.
self.cont = Container()
self.cont.on("test", test)
self.cont.emit_now("test", "hello world")
```
## Issue description

When trying to return a `py::list` or `PyObject*` that is a list I'm getting a seg fault on Windows. This code works on Linux and MacOS. On Windows I'm using MSVC 2019 and Python3.6.8. The other functions that return vector of ints or other values are working fine. This only manifests when creating a list of py::objects.

I even tried using the native Python C API implementation which ran into the same issue. The logic works with SWIG, I'm porting that code over to pybind11.

My apologies if this is a naive error or trivial mistake I am making.

## Reproducible example code
I modified it a little bit for simplicity. Let's say `py_outputs` is a `std::vector<PyObject*>`

I'm getting that output from an API which I cannot modify.

```
    py::list result;
    for (int i = 0; i < py_outputs.size(); ++i) {
      result.append(py::cast<py::object>(py_outputs[i]));
    }
    return result;
```

```
    PyObject* result = PyList_New(py_outputs.size());
    if (result == nullptr) {
      PyErr_SetString(PyExc_MemoryError, "Failed to create a list.");
      throw py::error_already_set();
    }
    for (int i = 0; i < py_outputs.size(); ++i) {
      PyList_SET_ITEM(result, i, py_outputs.at(i));
    }
    return py::reinterpret_steal<py::object>(result);

```

Output Log on Windows:
```
Windows fatal exception: access violation
....
*** Received signal 11 ***
*** BEGIN STACK TRACE POINTERS ***
.......

*** END STACK TRACE POINTERS ***

0x00007FFA65E5B015	CurrentStackTrace
0x00007FFA65DE19F1	testing::InstallStacktraceHandler
0x00007FFA7CEECFA3	seh_filter_exe
0x000000001CB223D8	(unknown)
0x00007FFA6EE2C090	_C_specific_handler
0x00007FFA8071477F	_chkstk
0x00007FFA80674BEF	RtlWalkFrameChain
0x00007FFA807134EE	KiUserExceptionDispatcher
0x00007FFA5F5266C2	<lambda_56f00d314c6146fba0aa43380d7ba842>::operator()
0x00007FFA5F52A571	<lambda_9043eba65c855751f21d74134c8948ba>::operator()
0x00007FFA5F50AD46	<lambda_9043eba65c855751f21d74134c8948ba>::<lambda_invoker_cdecl>
0x00007FFA5F538373	pybind11::cpp_function::dispatcher
0x0000000067577BCE	PyCFunction_FastCallDict
0x0000000067578119	PyObject_GetAttr
0x0000000067578B4E	PyEval_EvalFrameDefault
0x00000000675782E0	PyObject_GetAttr
0x0000000067578B4E	PyEval_EvalFrameDefault
0x0000000067575728	PyObject_Free
0x0000000067562DF5	PyCompile_OpcodeStackEffect
0x000000006756D7B0	PyObject_IsSubclass
0x0000000067579955	PyEval_EvalFrameDefault
0x0000000067575728	PyObject_Free
0x0000000067578587	PyObject_GetAttr
0x0000000067578B4E	PyEval_EvalFrameDefault
0x0000000067575728	PyObject_Free
0x0000000067578587	PyObject_GetAttr
0x0000000067578B4E	PyEval_EvalFrameDefault
0x00000000675782E0	PyObject_GetAttr
0x0000000067578B4E	PyEval_EvalFrameDefault
0x0000000067575728	PyObject_Free
0x0000000067573C23	PyFunction_FastCallDict
0x0000000067573A06	PyObject_ClearWeakRefs
0x000000006756D7B0	PyObject_IsSubclass
0x0000000067579955	PyEval_EvalFrameDefault
0x0000000067575728	PyObject_Free
0x0000000067578587	PyObject_GetAttr
0x00000000675797A2	PyEval_EvalFrameDefault
0x0000000067575728	PyObject_Free
0x0000000067562DF5	PyCompile_OpcodeStackEffect
0x000000006756D7B0	PyObject_IsSubclass
0x0000000067579955	PyEval_EvalFrameDefault
0x0000000067575728	PyObject_Free
0x0000000067578587	PyObject_GetAttr
0x0000000067578B4E	PyEval_EvalFrameDefault
0x0000000067575728	PyObject_Free
0x0000000067573C23	PyFunction_FastCallDict
0x0000000067573A06	PyObject_ClearWeakRefs
0x000000006756D7B0	PyObject_IsSubclass
0x0000000067579955	PyEval_EvalFrameDefault
0x0000000067575728	PyObject_Free
0x0000000067573C23	PyFunction_FastCallDict
0x0000000067573A06	PyObject_ClearWeakRefs
0x000000006756F99C	PyObject_Call
0x0000000067583FB7	PyUnicode_EqualToASCIIId
0x000000006757846A	PyObject_GetAttr
0x0000000067578B4E	PyEval_EvalFrameDefault
0x0000000067575728	PyObject_Free
0x0000000067573C23	PyFunction_FastCallDict
0x0000000067573A06	PyObject_ClearWeakRefs
0x000000006756D7B0	PyObject_IsSubclass
0x0000000067579955	PyEval_EvalFrameDefault
0x0000000067575728	PyObject_Free
0x0000000067573C23	PyFunction_FastCallDict
0x0000000067573A06	PyObject_ClearWeakRefs


```



Calling a method on a class instance works if constructed as below

`py::object ret = method.call(instance,some_function_argument);`

I wonder if there is a constructor variant (or other mechanism) to make this syntactically sweeter such as shown below?

```
// this call format passes the instance (self) as a hidden argument ...
py::object(instance) ret = method.call(some_function_argument);

```
Just asking :) MTIA.

Full snippet of the existing test:
```
		// load the echo module
		py::object echo_module = py::module::import("echo_test");
		// find the Echo class
		py::object echo = echo_module.attr("Echo");
		// this calls echo.__init__() ...
		if (echo.call())
		{
			// find the integer version
			// in python def:echoi(arg:int) -> None:
			py::object echoi = echo.attr("echoi");
			// in this example 'echo' is the 'self' argument
			// which works as expected ...
			py::object ret = echoi.call(echo,999);
		}
```
with the Python module thus:
```
#
class Echo:
	def __init__(self):
		print("Echo.__init__()")

	def echoi(self,arg:int) -> None:
		print("echoi got:",arg)

```



Hello everyone,

First, thank you everyone for this great tool ! 

## Issue description

Current system:

* Windows 10
* MinGW
* conda 4.8.1 installed on windows
* python version 3.7.4 (the one in conda)
* cmake 3.14.0 installed on windows
* compiler MSVC 14.24.28314

After PR #2053 was merged, our building pipelines on windows started failing. The output message error is `fatal error LNK1181: cannot open input file 'python37.lib`.
After tracking the problem, I found out that `PYTHON_LIBRARY` in file `tools/FindPythonLibsNew.cmake` was not set to the correct path.

* Before PR #2053 `PYTHON_LIBRARY` = `C:/Users/user/Anaconda3/libs/python37.lib`
* After PR #2053 `PYTHON_LIBRARY` = `python37.lib`

Debugging each step of the previous file resulted that:

* `PYTHON_LIBDIR` is empty
* After the patch, it tries to look in a Linux location for the library
* `PYTHON_LIBRARY` is set to `python37.lib`

I found a solution changing some lines in `tools/FindPythonLibsNew.cmake`, without changing the behaviour for Linux or Mac.

I would like to know if you'll be interested for a PR, if yes the only thing is I don't have many more windows system to test on it. To I don't know if other Windows user with their build system could test ?

Or maybe do you have any other suggestion that could help us of course :) ?

## Reproducible example code

1. windows system
2. install mingw
3. install conda for windows
4. import a C++ project using cmake for building process, and of course pybind

In the `CmakeLists.txt` file, we use `add_subdirectory()` to indicate where the folder of pybind11 is located.

Expected error: `fatal error LNK1181: cannot open input file 'python37.lib`

Let me know if you have any questions/suggestion.

Cheers,
Julián
Using `#include <pybind11/chrono.h>` we can define
```py
def(py::init([](const std::chrono::system_clock::time_point& obj)
```
so that we can convert between `std::chrono` and python's `datetime`.

Is there a similar concept for conversions between `std::chrono` and numpy's `datetime64`? I had a look at `pybind11/numpy.h` but couldn't find anything.

I am happy implement it and submit a PR, if someone could point me in the right direction for how to do it. Many thanks!

##  Issue description

When converting a sequence-like argument to an `std::vector<T>`, pybind11 ignores exceptions raised by `len(arg)` and erroneously calls `std::vector<T>::reserve()` with a very large value.  The result is a confusing exception of the following form:
```
Traceback (most recent call last):
  File "./pybind11_repro.py", line 11, in <module>
    my_module.f(a)
ValueError: vector::reserve
```

## Reproducible example code

C++ code:
```
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

#include <vector>

namespace py = pybind11;
using namespace py::literals;

namespace my_module {

void f(const std::vector<int>&) {}

}  // end namespace my_module

PYBIND11_MODULE(my_module, m){
    m.def("f", &my_module::f);
};
```

This C++ code was compiled with:
```
g++-8 -Wall -shared -std=c++17 -fPIC -o my_module$(python3-config --extension-suffix) $(python3-config --ldflags) pybind11_repro.cpp -I.<pybind11 include dir> -I/usr/local/include/python3.8  
```

Python code:
```
import numpy
import my_module

my_module.f([1, 2])  # Okay

a = numpy.array(2.0)
my_module.f(a)       # raises: ValueError: vector::reserve
```

I used a zero-dimensional numpy array to demonstrate this problem, but it actually occurs with any object that is sequence-like (has `__getitem__`) and raises from `__len__`:
```
class BadLen(): 
    def __getitem__(self, i): 
        return i 
           
    def __len__(self): 
        raise Exception() 

my_module.f(BadLen())    # raises: ValueError: vector::reserve
```

## Result and expected result
When running the Python code above, a C++ exception is thrown by `std::vector<int>::reserve()`.  pybind11 propagates this to the Python caller, but this is confusing and does not indicate why the operation failed.
```
Traceback (most recent call last):
  File "./pybind11_repro.py", line 11, in <module>
    my_module.f(a)
ValueError: vector::reserve
```

This exception occurred because `len(a)` in the example above raises a Python exception (see Diagnosis section below):
```
>>> len(a)
Traceback (most recent call last):
  File "pybind11_repro.py", line 9, in <module>
    len(a)
TypeError: len() of unsized object
```
I think that pybind11 should propagate this *original* Python exception to the caller, instead of triggering an unrelated exception at a later point in time.

## Diagnosis

This occurs through the following steps:
1.  `pybind11::sequence::size()` [calls `PySequence_Size(m_ptr)`](https://github.com/pybind/pybind11/blob/07e225932235ccb0db5271b0874d00f086f28423/include/pybind11/pytypes.h#L1242-L1251), which [returns a *signed* `Py_ssize_t` value](https://docs.python.org/3/c-api/sequence.html).  The pybind11 member function unconditionally casts this value to `size_t`.  If `PySequence_Size` returns -1 (indicating failure), `pybind11::sequence::size()` will return `SIZE_MAX`, a very large positive number.
```
class sequence : public object {
public:
    PYBIND11_OBJECT_DEFAULT(sequence, object, PySequence_Check)
    size_t size() const { return (size_t) PySequence_Size(m_ptr); }
    /*  ...   */
};
```

2.  The return value of `size()` is [passed to `vector<T>::reserve()`](https://github.com/pybind/pybind11/blob/07e225932235ccb0db5271b0874d00f086f28423/include/pybind11/stl.h#L143-L165).  The reserve() member function [can throw `std::length_error` or `std::bad_alloc`](https://en.cppreference.com/w/cpp/container/vector/reserve) if the requested size is too large.
```
template <typename Type, typename Value> struct list_caster {
    /*  ...   */
private:
    template <typename T = Type,
              enable_if_t<std::is_same<decltype(std::declval<T>().reserve(0)), void>::value, int> = 0>
    void reserve_maybe(sequence s, Type *) { value.reserve(s.size()); }
    /*  ...   */
};
```

I think this problem could be fixed by checking the return value of `PySequence_Size`, and raising the active CPython exception if that call has failed, as indicated by its return value.

## Issue description

I have a base (pure-abstract) interface that is extended by another (pure abstract) interface.

Then i have an implementation of the base interface and a implementation of the extended interface that derives the extended interface and the base implementation via virtual inheritance (diamond)

Now if i return a reference of type InterfaceExtened i can correctly use it.

If i however delete the object that is being referenced on the c++ side, then i get an error during program exit. I do not get such an error when doing the same using InterfaceBase.

This happens on both windows and linux (Fedora 21) on release 2.4.3

## Reproducible example code

pybind11bug.cpp:
```cpp
#include <pybind11/pybind11.h>
#include <memory>
#include <iostream>

class InterfaceBase {
public:
    virtual ~InterfaceBase() = default;
    virtual void foo() = 0;  
};

class InterfaceExtended: public virtual InterfaceBase {
public:
    virtual ~InterfaceExtended() = default;
    virtual void bar() = 0;  
};

class ImplementationBase: public virtual InterfaceBase {
public:
    virtual void foo() { std::cout << "foo" << std::endl;};  
};

class ImplementationExtended: public ImplementationBase, public InterfaceExtended {
public:
    virtual void bar() { std::cout << "bar" << std::endl; };  
};

class Helper {
public:
    InterfaceBase& createBaseInstance() {
        instanceBase.reset(new ImplementationBase());
        return *instanceBase;
    }
    
    void deletebaseInstance() {
        instanceBase.reset();
    }

    InterfaceExtended& createExtendedInstance() {
        instanceExt.reset(new ImplementationExtended());
        return *instanceExt;
    }

    void deleteBaseInstance() {
        instanceBase.reset();
    }

    void deleteExtendedInstance() {
        instanceExt.reset();
    }

private:
    std::unique_ptr<InterfaceBase> instanceBase;
    std::unique_ptr<InterfaceExtended> instanceExt;
};

namespace py = pybind11;
    
PYBIND11_MODULE(example, m) {
    py::class_<InterfaceBase>(m, "InterfaceBase")
        .def("foo", &InterfaceBase::foo);
    py::class_<InterfaceExtended, InterfaceBase>(m, "InterfaceExtended", py::multiple_inheritance())
        .def("bar", &InterfaceExtended::bar);
    py::class_<Helper>(m, "Helper")
        .def(py::init())
        .def("create_base_instance", &Helper::createBaseInstance, py::return_value_policy::reference)
        .def("create_extended_instance", &Helper::createExtendedInstance, py::return_value_policy::reference)
        .def("delete_base_instance", &Helper::deleteBaseInstance)
        .def("delete_extended_instance", &Helper::deleteExtendedInstance);
}
```


I compile with:
```bash
c++ -O3 -Wall -shared -std=c++11 -fPIC `python3 -m pybind11 --includes` pybind11bug.cpp -o example`python3-config --extension-suffix`
```

Then i run:
```python
import example

helper = example.Helper()
base = helper.create_base_instance()
ext = helper.create_extended_instance()
ext.foo()
ext.bar()
# deleting a return_value_policy::reference on c++ side 
# for the base (non-virtual inheritance class) is fine
helper.delete_base_instance()
# deleting a return_value_policy::reference on c++ side 
# for the extended (virtual inheritance class) generates a segfault on cleanup
# (when commenting out the next line there is no segfault)
helper.delete_extended_instance()
```

The Conda-forge package is reporting the wrong directory. From local testing, the standard way of accessing the directory seems to be working correctly; it's just the injected special logic that is causing issues.

Is the virtualenv logic needed, or could it be removed as well?

Testing this in Conda-forge before making the PR non-draft.