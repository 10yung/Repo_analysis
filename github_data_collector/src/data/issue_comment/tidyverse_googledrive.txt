The more difficult inverse problem addressed by e56b3f5d2e7b3a421115a1858df7456857478f5a. In that commit, I check for and  eliminate any results (file IDs) that appear in more than 1 page. But I fear the opposite can also happen: there can be files that appear in no page.

This is basically a re-opening of #277.

I have seen this myself now. It's hard to make a clean reprex, as the results are stochastic.

Summary: I can do `drive_find()` repeatedly and get a different number of files. Most recently, with my personal Google identity, I saw 972, 988, 988, and 988 files. (Note to self: In 3 out of 4 requests, I saw higher numbers reported in "Items so far", so the filter for duplicates is actually eliminating replicated IDs.)

The "missing" 988 - 972 = 16 files are a _subset_ of the 22 files in one specific folder.

I will attempt to create a clean example of this using curl alone (no R) and, if successful, report/ask upstream.


I am trying to deploy a shinyapp within a docker context and would like to use googledrive to store files but I am unable to connect to it in a non interactive manner. 
---
 I followed these instruction: https://gargle.r-lib.org/articles/non-interactive-auth.html#project-level-oauth-cache
In summary what I did was authorize from my RStudio server manually and stored a cache token file. While building my docker image I made sure I copied the token from the docker image directory. 


I want to know if the method that I am using is the correct one or if there is something I can do to correct getting the error "Error: Can only use oob authentication in an interactive session" when I try to autorize

```r
    options(httr_oob_default=TRUE) 
    
    options(
      gargle_oauth_cache = ".secrets",
      gargle_oauth_email = TRUE
    )
    
    googledrive::drive_auth()
    
   drive_find(n_max = 5)
```

I'm going to do this within googlesheets4 for now because I don't want it to require dev googledrive. But the next googledrive release should definitely include this method.
I'm trying to use googledrive and [googlesheets4](https://github.com/tidyverse/googlesheets4) in Google Colaboratory, but tips about drive_auth found in #276 or #274, did not solve.

Here is the Colab Notebook. [Demo of use GoogleDrive with R in Google Colaboratory](https://colab.research.google.com/drive/1nXsie313OuXjIZMsSOnJULcUpwecsRB-#scrollTo=M5qbBfJn3fc4)
that I'm testing. 

The error is 

> trying token_fetch()
trying credentials_service_account()
Error: Argument 'txt' must be a JSON string, URL or file.
trying credentials_app_default()
trying credentials_gce()
trying credentials_byo_oauth()
Error: inherits(token, "Token2.0") is not TRUE
trying credentials_user_oauth2()
Gargle2.0 initialize
attempt from: googledrive
adding 'userinfo.email' scope
loading token from the cache
no matching token in the cache
Error: Can only use oob authentication in an interactive session
>Error: Can't get Google credentials.
>Are you running googledrive in a non-interactive session? Consider:
>* `drive_deauth()` to prevent the attempt to get credentials.
>* Call `drive_auth()` directly with all necessary specifics.
>
>Traceback:
>
>1. drive_auth(use_oob = TRUE)
>
>2. stop("Can't get Google credentials.\n", "Are you running googledrive in a non-interactive session? Consider:\n", 
> .     "  * `drive_deauth()` to prevent the attempt to get credentials.\n", 
> .     "  * Call `drive_auth()` directly with all necessary specifics.\n", 
> .     call. = FALSE)
Current UI of `drive_rm()` is arguably a case of using `...` to collect metadata.
Email received 2019-04-24

---

Hello G Suite Developer,

We are writing to let you know that we are making changes to Drive API, Drive Activity API and Google Picker API and we identified your app(s) as being impacted.

On April 24, 2019, we introduced a new Drive API resource collection, called Drives, to replace the Team Drives resource collection. The Drives resource collection can help you create, delete, get, list and update your shared drives. It features all the same fields, resources and available methods as the Team Drives resource collection.

Starting June 1, 2020 all related Team Drives fields for Drive API, Drive Activity API and Google Picker API, will be deprecated. Consider migrating and updating your app(s) to the Drives resource collection as soon as possible. Please see the migration guide for further details.

Additionally, starting June 1, 2020, applications will no longer be able to opt-in to support shared drives. This means that shared drive items (including both shared drives and files within shared drives) will be returned in all relevant requests, if applicable for a given user.

If you have additional questions or need assistance, please visit this page.

Sincerely,

The G Suite Team

---

Key hyperlinks:

https://cloud.google.com/blog/products/application-development/upcoming-changes-to-the-google-drive-api-and-google-picker-api

https://developers.google.com/drive/api/v3/reference/drives

"Migration guide":
https://developers.google.com/drive/api/v3/enable-shareddrives
I wish `drive_download(WHATEVER, path = "pre_existing_local_folder/")` would download WHATEVER into `pre_existing_local_folder/WHATEVER` instead of:

```
Error: Path exists and overwrite is FALSE
```
Report progress when we use `purrr::map()` to make one API call per file. For example, `drive_reveal()` can be very slow and it would be good to know what it's doing.
I've been using the following for a little while to quickly share small datasets via Google Drive.

Would love to submit a PR, not sure about the best final form for this:

```r
# upload a data frame to google drive, make it shareable, and
# copy the shareable link into the clipboard
get_shareable_link_to_data <- function(data, path, direct = TRUE) {
  readr::write_csv(data, path)
  df <- googledrive::drive_upload(path, path)
  df <- googledrive::drive_share(df, role = "reader", type = "anyone")

  if (direct)
    link <- paste0("https://drive.google.com/uc?export=download&id=", df$id)
  else
    link <- googledrive::drive_link(df)

  clipr::write_clip(link)
  fs::file_delete(path)
  cat(link)
  invisible(link)
}
```

When `direct = TRUE`, the link can be immediately used in `read_csv()`. When `direct = FALSE`, the link send users to the Google Drive preview of the data.
@benmarwick has agreed to do this based on conversation in https://github.com/tidyverse/googledrive/issues/218