Using third party library is an option but  it would be great to have this feature.

So I have a `CanvasVirtualControl` in my app that I am using to draw ink over, using a standard `InkCanvas` I retrieved a `InkSynchronizer`. Then when the strokes are collected, I invalidate the bounding rect of the stroke inside my CanvasVirtualControl and then handle the RegionsInvalidated event as follows:

```
        private void canvasControl_RegionsInvalidated(CanvasVirtualControl sender, CanvasRegionsInvalidatedEventArgs args)
        {
            foreach (var region in args.InvalidatedRegions)
            {
                using (var ds = sender.CreateDrawingSession(region))
                {
                    List<InkStroke> strokesToDraw = new List<InkStroke>();

                    foreach (var stroke in inkStrokeContainer.GetStrokes())
                    {
                        var regionRect = region;
                        regionRect.Intersect(stroke.BoundingRect);

                        if(!regionRect.IsEmpty)
                        {
                            strokesToDraw.Add(stroke);
                        }
                    }

                    this.wetInkStrokes = null;

                    System.Diagnostics.Debug.WriteLine("Strokes to draw " + strokesToDraw.Count);
                    ds.DrawInk(strokesToDraw);

                    if (strokesToDraw.Count != 0)
                    {
                        this.inkSync.EndDry(); // exceptions gets thrown here (BeginDry() is called in onStrokesCollected
                    }
                }
            }
        }
```

This seems to work ok, but when I can change the DPI of my CanvasVirtualControl I get the following error:

> System.InvalidOperationException
>   HResult=0x8000000E
>   Message=A method was called at an unexpected time. (Exception from HRESULT: 0x8000000E)
>   Source=Windows
>   StackTrace:
>    at Windows.UI.Input.Inking.InkSynchronizer.EndDry()
>    at CanvasTesting.MainPage.canvasControl_RegionsInvalidated(CanvasVirtualControl sender, CanvasRegionsInvalidatedEventArgs args) in
> 
> 

Settting CanvasDrawingSession.EffectTileSize too big will throw an exception. 
That is totally fine. The problem is that it gets thrown in who knows what thread, and basically crashes my app.

(correction - after looking, this happens on the UI thread, but it still crashes my app)

![image](https://user-images.githubusercontent.com/13891601/72001922-18e9c480-324f-11ea-91ef-9a3efac5366f.png)


Is there a way to know the max size I can set here?
Hello. Happy New Year!

Last year I asked a question: [issue](https://github.com/microsoft/Win2D/issues/706) , and your team helped me using a good Win2D approach.

Now, I want to draw 7 ECG channels (**simultaneous**). For a single channel, I have followed @damyanp suggestion, with some mods:

- I have a queue of amplitudes(byte), protected by a lock (enqueuing when new amplitudes arrive from one thread, and dequeuing from a CanvasAnimatedContainer.Draw event handler - OnDraw)
- I have a list of points (to be shown on screen as a polyline). This list is used only in OnDraw.

I am using an additional queue, because I should not keep the entire list of points locked while I am drawing (in OnDraw I just dequeue the additional queue, adding the amplitudes in my list, then I am releasing the lock ... and then I draw).

Now, I need to draw 7 CanvasAnimatedControl (7 ECG channels) but I have to guarantee that they are drawn simultaneously. [photo]. After 4-5-10 minutes of running they are out of sync, if the containers are unrelated to each other. Then, I ask you:

1. **Should I rely on calling 7 (seven) ->  c[i].Invalidate() <-** when receiving the amplitudes for each ECG channel OR
2. Should I model somehow that **one OnDraw event handler modify each CanvasAnimatedControl** ?
Later edit: OR
3. Should I not use OnDraw event handler, instead, creating custom DrawingSession
`using(..) {//draw }`

It would be more elegant to call 7 .Invalidate(), but I don't know if the channel[index].OnDraw() is called immediately (and most important: **simultaneous**).

Thanks!
![execg](https://user-images.githubusercontent.com/11799801/71755006-5c2fe600-2e91-11ea-9a2a-9179cf81c819.png)


Are you trying to include GPU 3D acceleration in my program, but it always seems to run on the CPU, or GPU Support Win2d?

My Code: 

CanvasBitmap^ BitmapMap::CreateMappableBitmap(CanvasDrawingSession^ drawingSession, unsigned int width, unsigned int height)
{
	ComPtr<ID3D11Device> d3dDevice(D3D11Interop::GetD3D11DevicePtr(drawingSession));

	D3D11_TEXTURE2D_DESC texDesc = { 0 };
	texDesc.Width = width;
	texDesc.Height = height;
	texDesc.Format = DXGI_FORMAT_B8G8R8A8_UNORM;
	texDesc.MipLevels = 1;
	texDesc.ArraySize = 1;
	texDesc.SampleDesc.Count = 1;
	texDesc.SampleDesc.Quality = 0;
	texDesc.Usage = D3D11_USAGE_DYNAMIC;
	texDesc.BindFlags = D3D11_BIND_SHADER_RESOURCE;
	texDesc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
	texDesc.MiscFlags = 0;

	ComPtr<ID3D11Texture2D> d3dTexture;
	__abi_ThrowIfFailed(d3dDevice->CreateTexture2D(&texDesc, nullptr, d3dTexture.GetAddressOf()));

	ComPtr<IDXGISurface> d3dSurface;
	__abi_ThrowIfFailed(d3dTexture.As(&d3dSurface));

	auto winRTSurface = CreateDirect3DSurface(d3dSurface.Get());
	auto output = CanvasBitmap::CreateFromDirect3D11Surface(drawingSession, winRTSurface,90);
	return output;
}


in CreateFromDirect3D11Surface is running by CPU and not by GPU

Hi,

I am having an InkCanvas inside the Grid control and I am trying to set the InkPresenter’s InputDeviceTypes property value as Touch or Mouse in the Grid PointerEntered event and I changed the InkPresenter’s InputDeviceTypes to None in the InkPresenter StrokeCollected event.

So, I can enable the drawing on a pointer to enter and disable the drawing after collected the strokes. This is my requirement.

It is working properly on using the mouse, but it is not working on Touch. I can draw the path in touch in the first time only. The second time it is not drawing.

Please help me how to resolve this issue.

Code snippet:

Xaml:

<Grid x:Name="grid" PointerEntered="Grid_PointerEntered" PointerMoved="Grid_PointerMoved" 
          PointerPressed="Grid_PointerPressed">
        <Image Source="Buldingimage1.jpeg"/>
        <InkCanvas x:Name="canvas"/>
    </Grid>
Events

   private void InkPresenter_StrokesCollected(InkPresenter sender, InkStrokesCollectedEventArgs args)
    {
        canvas.InkPresenter.InputDeviceTypes = Windows.UI.Core.CoreInputDeviceTypes.None;
    }


    private void Grid_PointerEntered(object sender, PointerRoutedEventArgs e)
    {
        canvas.InkPresenter.InputDeviceTypes =
       Windows.UI.Core.CoreInputDeviceTypes.Mouse |
       Windows.UI.Core.CoreInputDeviceTypes.Pen | Windows.UI.Core.CoreInputDeviceTypes.Touch;
    }
Sample: https://drive.google.com/open?id=1wT9MvnJyXWR91ifUV3tJZJIaNluhfyK_

Thanks, Santhiya A
I believe it should be somehow possible if you were to use ID2D1RenderTarget::CreateBitmapFromWicBitmap internally (https://github.com/microsoft/microsoft-ui-xaml/issues/1700).

Right now, I'm using a workaround that is a bit expensive, but it does the job -- namely, loading a SoftwareBitmap, and then converting that into a CanvasBitmap.
Hi,

I've managed to make an example of how to get Win2D working in a win32 C++ MFC app!

Here is the link: https://github.com/fobrs/Win2DinMFC

Maybe this can be added in the samples folder?

I started with the tutorial here: [https://docs.microsoft.com/en-us/windows/apps/desktop/modernize/host-custom-control-with-xaml-islands](url). I added a vb project and user control as ultimately, we have a large vb project we would like to move to xaml islands.

For me, it literally works 50% of the time, alternately. First time I run it I get "Cannot create control ...", stop and run, it works and shows the VB control, stop and run, I get "Cannot create control ...",etc. 

My attempt is available here:[ belchamber.net/wpfapp1vb.zip 
](url)

How do I make it work reliably?
This code builds/runs fine on v1.23.0, but I get module not found on the latest nuget update.

winrt::Microsoft::Graphics::Canvas::Effects::GaussianBlurEffect graphicsEffect{};