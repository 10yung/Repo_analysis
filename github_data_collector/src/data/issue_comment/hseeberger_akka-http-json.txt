Updates 
* [com.github.plokhotnyuk.jsoniter-scala:jsoniter-scala-core](https://github.com/plokhotnyuk/jsoniter-scala)
* [com.github.plokhotnyuk.jsoniter-scala:jsoniter-scala-macros](https://github.com/plokhotnyuk/jsoniter-scala)

 [from 2.1.4 to 2.1.5](https://github.com/plokhotnyuk/jsoniter-scala/compare/v2.1.4...v2.1.5).
[Release Notes/Changelog](https://github.com/plokhotnyuk/jsoniter-scala/releases/tag/v2.1.5)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.github.plokhotnyuk.jsoniter-scala" } ]
```
</details>

labels: library-update, semver-patch
Updates [com.lihaoyi:upickle](https://github.com/lihaoyi/upickle) [from 0.9.6 to 0.9.7](https://github.com/lihaoyi/upickle/compare/0.9.6...0.9.7).
[Release Notes/Changelog](https://github.com/lihaoyi/upickle/releases/tag/0.9.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.lihaoyi", artifactId = "upickle" } ]
```
</details>

labels: library-update, semver-patch
Hi,

we discovered an edge-case with `akka-http-circe` the other day. A working reproduction-case and explanation of the problematic mechanism is here: https://github.com/felixbr/akka-circe-nullable-json-repro-case

The short version is: If you have a `null` json value in a `HttpResponse` and try to unmarshal it using something like `Unmarshal(response).to[Option[String]]` you'll get an `DecodingFailure` instead of the expected `None` value.

The reason behind this seems to be a fairly hidden feature of `akka-http` where it interprets the `Option` as you trying to handle the `DecodingFailure` and forwards only the inner type (here `String`) to the implementation (here `circe`). Circe then tries to decode `null` as `String` and correctly fails.

I'm not quite sure what to do about this other than "avoid using Option as root type". The implicit responsible for this is baked into `Unmarshal`, so it's always in scope. It should also be noted that it only happens when unmarshalling `HttpResponse`. `HttpEntity` doesn't seem to have this "feature".

In our case we expected a nullable `List`, so our workaround was to define a custom `Decoder` that avoids `Option` altogether, but this is no general solution.

**Workaround for nullable lists:**
```scala
// Custom decoder which decodes json arrays as lists but falls back to empty List if the json array is null
implicit def decodeNullableList[A: Decoder]: Decoder[List[A]] =
  Decoder.decodeList[A] or Decoder.decodeOption[List[A]].map(_.getOrElse(List.empty))

// Usage
Unmarshal(response).to[List[String]]
```

I'm not sure if this is something that needs to be addressed with `akka-http` directly. In any case I hope this helps other poor souls that happen to stumble over this edge-case.

Cheers
~ Felix
Akka HTTP releases are not tied to a particular Akka version (i.e. the 10.1.x HTTP releases are compatible with the 2.5.x Akka releases) and the user is responsible of providing the actual akka/akka-stream version to be used.

Since this library is mainly tied to a particular akka-http version, it would make sense to mark the other non http related dependencies as provided.

This way a user wanting to adopt this library would only need to find the version compatible with the akka-http version he is running without worrying about the other akka transitive dependencies.
I got server side working, but have problems with the client side.

https://doc.akka.io/docs/akka-http/current/common/json-support.html#consuming-json-streaming-style-apis

The akka-http samples are made with Spray-json. I'm trying to replicate the same, using Circe and akka-http-circe.

Note: This is just an early warning. Looking into what's the problem, precisely (so I can expose a repo that showcases it, in a few days).
Hi, 

Is it possible to unmarshall generic types? Here I've reproduced an example that fails to compile due to:
```
Error:(28, 88) could not find implicit value for parameter um: akka.http.scaladsl.unmarshalling.Unmarshaller[akka.http.scaladsl.model.HttpResponse,Requests.this.SomeResponse[T]]
val unmarshalled: Future[SomeResponse[T]] = response.flatMap(Unmarshal(_).to[SomeResponse[T]])
``` 

full REPL reproduction below. See comment:
```
import akka.actor.ActorSystem
import akka.http.scaladsl.Http
import akka.http.scaladsl.marshalling.Marshal
import akka.http.scaladsl.model.{HttpMethods, HttpRequest, HttpResponse, RequestEntity}
import akka.http.scaladsl.unmarshalling.Unmarshal
import akka.stream.ActorMaterializer
import de.heikoseeberger.akkahttpcirce.FailFastCirceSupport
import io.circe.generic.auto._

import scala.concurrent.duration._
import scala.concurrent.{Await, Future}


trait Requests extends FailFastCirceSupport {

  implicit val system = ActorSystem("testSystem")
  implicit val ec = system.dispatcher
  implicit val mat = ActorMaterializer()

  case class SomeRequest(query: String)
  case class SomeData[T](queryResponse: T)
  case class SomeResponse[T](data: SomeData[T])
  case class SampleData(hello: String)


  def parseContent[T <: SampleData](query: String) = {
    val response: Future[HttpResponse] = requestContent(SomeRequest(query))

// See Comment:
// This line wont compile unless I replace T with an explicit type like SampleData. 
// Why? Is it be possible to use T somehow?
    val unmarshalled: Future[SomeResponse[T]] = response.flatMap(Unmarshal(_).to[SomeResponse[T]])

    val hello: Future[String] = for {
      root <- unmarshalled
    } yield root.data.queryResponse.hello

    Await.result[String](hello, 30 seconds)
  }

  def requestContent(request: SomeRequest): Future[HttpResponse] = {
    for {
      request <- Marshal(request).to[RequestEntity]
      response <- Http().singleRequest(HttpRequest(
        method = HttpMethods.POST,
        uri = "http://localhost:8000/Some",
        entity = request
      ))
    } yield response
  }
}

object OtherRequests extends Requests {
  val query =
    """
        query GetSomething {
          results: getSomething() {
            hello
          }
        }
      """.replaceAll("//\\d+", "")

  def getSome() = {
    parseContent[SampleData](query)
  }
}

OtherRequests.getSome()
```