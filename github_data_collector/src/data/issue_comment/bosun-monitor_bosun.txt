# Description
Nodes with no-checks flag are returning RuleCheck in /api/health as true

```
$ ./main -c node1/bosun.toml -n
2020/01/15 16:57:50 info: migrate.go:138: checking migrations
2020/01/15 16:57:50 info: search.go:208: Loading last datapoints from redis
2020/01/15 16:57:50 info: search.go:215: Done
2020/01/15 16:57:50 info: web.go:216: tsdb host: 127.0.0.1:4242
2020/01/15 16:57:50 info: web.go:220: bosun web listening http on: :8071
...
$ curl -s 127.0.0.1:8071/api/health | jq .RuleCheck
false
$ curl -XPOST 127.0.0.1:8071/api/reload -d '{ "Reload": true }'
"reloaded"
$ curl -s 127.0.0.1:8071/api/health | jq .RuleCheck            
true
```

If node has no-checks flags RuleCheck should be false all time

## Type of change

- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How has this been tested?

- [x] Integration test

no-checks was set:
```
$ ./main -c node1/bosun.toml -n
2020/01/15 17:02:47 info: migrate.go:138: checking migrations
2020/01/15 17:02:47 info: search.go:208: Loading last datapoints from redis
2020/01/15 17:02:47 info: search.go:215: Done
2020/01/15 17:02:47 info: web.go:216: tsdb host: 127.0.0.1:4242
2020/01/15 17:02:47 info: web.go:220: bosun web listening http on: :8071
$ curl -s 127.0.0.1:8071/api/health | jq .RuleCheck
false
$ curl -XPOST 127.0.0.1:8071/api/reload -d '{ "Reload": true }'
"reloaded"
$ curl -s 127.0.0.1:8071/api/health | jq .RuleCheck            
false
```

no-checks is false:
```
$ ./main -c node1/bosun.toml   
2020/01/15 17:05:11 info: migrate.go:138: checking migrations
2020/01/15 17:05:11 info: search.go:208: Loading last datapoints from redis
2020/01/15 17:05:11 info: search.go:215: Done
2020/01/15 17:05:11 info: check.go:561: check alert bosun_uptime start with now set to 2020-01-15 16:05:11.481449306
2020/01/15 17:05:11 info: web.go:216: tsdb host: 127.0.0.1:4242
2020/01/15 17:05:11 info: web.go:220: bosun web listening http on: :8071
2020/01/15 17:05:11 info: check.go:609: check alert bosun_uptime done (3.135856ms): 1 crits, 0 warns, 0 unevaluated, 0 unknown
2020/01/15 17:05:11 info: alertRunner.go:105: runHistory on bosun_uptime took 23.743938ms
2020/01/15 17:05:11 error: notify.go:84: type: alert; name: default; transport: http_POST; dst: http://127.0.0.1:8000/; body: <html><head></head><body>&#39;&#39;</body></html>; error: Post http://127.0.0.1:8000/: dial tcp 127.0.0.1:8000: connect: connection refused
2020/01/15 17:05:19 info: alertRunner.go:86: Stopping alert routine for bosun_uptime
2020/01/15 17:05:19 info: main.go:255: schedule shutdown, loading new schedule
2020/01/15 17:05:19 info: main.go:268: config reload complete
2020/01/15 17:05:19 info: main.go:263: running new schedule
2020/01/15 17:05:19 info: check.go:561: check alert bosun_uptime start with now set to 2020-01-15 16:05:19.184973544
2020/01/15 17:05:19 info: check.go:609: check alert bosun_uptime done (642.76Âµs): 1 crits, 0 warns, 0 unevaluated, 0 unknown
2020/01/15 17:05:19 info: alertRunner.go:105: runHistory on bosun_uptime took 3.392522ms
...
$ curl -s 127.0.0.1:8071/api/health | jq .RuleCheck
true
$ curl -XPOST 127.0.0.1:8071/api/reload -d '{ "Reload": true }'
"reloaded"
$ curl -s 127.0.0.1:8071/api/health | jq .RuleCheck            
true
```

# Checklist:

- [x] This contribution follows the project's [code of conduct](https://github.com/bosun-monitor/bosun/blob/master/CODE_OF_CONDUCT.md)
- [x] This contribution follows the project's [contributing guidelines](https://github.com/bosun-monitor/bosun/blob/master/CONTRIBUTING.md)
- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules

+ Improve some errors logs

# Description

While Redis is down sometimes we are crashing:
```
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x13f6f01]

goroutine 12648760 [running]:
bosun.org/cmd/bosun/sched.(*Schedule).CheckNotifications(0xc0110fc600, 0x0, 0x0, 0x0)
        /builddir/build/BUILD/bosun-0.8.0/GO/src/bosun.org/cmd/bosun/sched/notify.go:68 +0x1e1
bosun.org/cmd/bosun/sched.(*Schedule).dispatchNotifications(0xc0110fc600)
        /builddir/build/BUILD/bosun-0.8.0/GO/src/bosun.org/cmd/bosun/sched/notify.go:30 +0x1ee
created by bosun.org/cmd/bosun/sched.(*Schedule).Run
        /builddir/build/BUILD/bosun-0.8.0/GO/src/bosun.org/cmd/bosun/sched/alertRunner.go:18 +0xa4
```

## Type of change

- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How has this been tested?

- [x] Interaction test with Redis crashing emulation

# Checklist:

- [x] This contribution follows the project's [code of conduct](https://github.com/bosun-monitor/bosun/blob/master/CODE_OF_CONDUCT.md)
- [x] This contribution follows the project's [contributing guidelines](https://github.com/bosun-monitor/bosun/blob/master/CONTRIBUTING.md)
- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules

Looks like after 27ed4e522d8e085447408419806fff5e3101933d global `unknownTemplate` configuration option is not working anymore.
Unknown template validated and assigned to https://github.com/bosun-monitor/bosun/blob/81e993e07efb7cf610b9101bca90db7244b7dff2/cmd/bosun/conf/rule/rule.go#L46, but it seems not used anywhere during the notification.
As a result default notification is sent instead of the one specified in the global `unknownTemplate`.
Either docs/configuration.md should be updated and reference to `unknownTemplate` should be removed or global `unknownTemplate` should be reintroduced.
# Description

Fixes #2444 

## Type of change

From the following, please check the options that are relevant.

- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How has this been tested?

The test is described in issue #2444 

# Checklist:

- [x] This contribution follows the project's [code of conduct](https://github.com/bosun-monitor/bosun/blob/master/CODE_OF_CONDUCT.md)
- [x] This contribution follows the project's [contributing guidelines](https://github.com/bosun-monitor/bosun/blob/master/CONTRIBUTING.md)
- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules

# Expected behavior

API `POST /api/reload -d '{ "Reload": true }'` should reread config and make full restart of scheduler

# Current behaviour
When we run bosun first time we have 1 `dispatchNotifications` routine:
```
goroutine 72 [select]:
bosun.org/cmd/bosun/sched.(*Schedule).dispatchNotifications(0x22d9500)
	bosun.org/cmd/bosun/sched/notify.go:26 +0x140
created by bosun.org/cmd/bosun/sched.(*Schedule).Run
	bosun.org/cmd/bosun/sched/alertRunner.go:18 +0xa4
```

After reload through api `POST /api/reload -d '{ "Reload": true }'`:
```
goroutine 72 [select]:
bosun.org/cmd/bosun/sched.(*Schedule).dispatchNotifications(0x22d9500)
	bosun.org/cmd/bosun/sched/notify.go:26 +0x140
created by bosun.org/cmd/bosun/sched.(*Schedule).Run
	bosun.org/cmd/bosun/sched/alertRunner.go:18 +0xa4
...
goroutine 177 [select]:
bosun.org/cmd/bosun/sched.(*Schedule).dispatchNotifications(0xc00032c000)
	bosun.org/cmd/bosun/sched/notify.go:26 +0x140
created by bosun.org/cmd/bosun/sched.(*Schedule).Run
	bosun.org/cmd/bosun/sched/alertRunner.go:18 +0xa4
```

As result, we have duplicate chained notifications

## Steps to reproduce

> Please provide detailed steps for reproducing the issue.

1. Run `bosun` daemon with system config:
```
...
HTTPListen = ":8071"
EnableReload = true
...
```
And rules definition:
```
alert test {
    template = default_template
    $flapper = ((epoch() % 120 ) >= 60)
    crit = $flapper
    warn = !$flapper
    runEvery = 1
    
    critNotification = default
    warnNotification = default 
}

template default_template {
    subject = Test
    body = ''
    postBody = `{
        "body": "{{.Subject}}"
    }`
}

notification default_notification {
    post = http://127.0.0.1:8000/
    bodyTemplate = body
    next = default_notification
    timeout = 1m
}
```
2. Run notification service:
```
#!/usr/bin/env python3
from http.server import HTTPServer, BaseHTTPRequestHandler

class S(BaseHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(200)
        self.end_headers()
    def do_POST(self):
        # Doesn't do anything with posted data
        self._set_headers()
        self.wfile.write("ok")
def run(server_class=HTTPServer, handler_class=S, addr="localhost", port=8000):
    server_address = (addr, port)
    httpd = server_class(server_address, handler_class)
    print(f"Starting httpd server on {addr}:{port}")
    httpd.serve_forever()

if __name__ == "__main__":
    run()
```
3. Wait for first notification. After that reload config - `curl -XPOST 127.0.0.1:8071/api/reload -d '{ "Reload": true }'`
4. Check duplicate call in notification service output

## Context

Running commit: 81e993e07efb7cf610b9101bca90db7244b7dff2
OS: linux_x64, Linux 5.3.14-300.fc31.x86_64

## Logs

Nothing interesting in logs...

# Short description
Currently, bosun doesn't support any ha and load distribution. We should provide something that will allow us to provide bosun as a high available and scalable service 

# How this feature will help you/your organisation
- Automatic failover then server with bosun became unavailable
- Avoid split-brain problem
- Distribute check execution between multiple servers 

# Possible solution or implementation details
One of working implementation - https://github.com/bosun-monitor/bosun/pull/2441

I offer to use raft clustering implementation from hashicorp.
Possible roundmap:
- [x] Create cluster for improving availability. Have a simple master-slave configuration. We can use silence/nochecks flags to make node as standby. This step without ant snapshots etc. Just simple standby.
- [ ] Add support for snapshot cluster state, rotate snapshots, recover the cluster state
- [ ] Host leader can distribute tasks for checks (by check name as instance) between nodes using consistent hashing distribution. In that step we can stop to use flags as the main instrument for manage nodes within the cluster

Just fix merge from  https://github.com/bosun-monitor/bosun/pull/2427
If you approve this MR, please close  https://github.com/bosun-monitor/bosun/pull/2427

JFYI: @harudark
# Description

As solution for issue https://github.com/bosun-monitor/bosun/issues/2443

Same as https://github.com/bosun-monitor/bosun/pull/2345 with solving conflicts and some new api endpoints

Were added new api endpoints:
`POST /api/cluster/recover_cluster`
Api endpoint Is used to manually force a new configuration in order to recover from a loss of quorum where the current configuration cannot be restored, such as when several servers die at the same time. This works by reading all the current state for this server, creating a snapshot with the supplied configuration, and then truncating the Raft log. This is the only safe way to force a given configuration without actually altering the log to insert any new entries, which could cause conflicts with other servers with a different state.

WARNING! This operation implicitly commits all entries in the Raft log, so in general, this is an extremely unsafe operation. If you've lost your other servers and are performing a manual recovery, then you've also lost the commit information, so this is likely the best you can do, but you should be aware that calling this can cause Raft log entries that were in the process of being replicated but not yet be committed to be committed.

Example:
```
$ curl -s 127.0.0.1:8071/api/cluster/status | jq .
{
  "State": "Candidate",
  "Nodes": [
    {
      "Address": "127.0.0.1:10002",
      "State": "Follower"
    },
    {
      "Address": "127.0.0.1:10014",
      "State": "Follower"
    }
  ],
  "Stats": {
...
  }
}
$ curl -XPOST 127.0.0.1:8071/api/cluster/recover_cluster -d '{"members": [{"address": "127.0.0.1:10002"}]}'
{
  "State": "Leader",
  "Nodes": [
    {
      "Address": "127.0.0.1:10002",
      "State": "Leader"
    }
  ],
  "Stats": {
...
  }
}
```

`POST /api/cluster/change_master` - move leadership to another node in cluster
Example:
```
$ curl -s 127.0.0.1:8071/api/cluster/status | jq .
{
  "State": "Leader",
  "Nodes": [
    {
      "Address": "127.0.0.1:10002",
      "State": "Leader"
    },
    {
      "Address": "127.0.0.1:10014",
      "State": "Follower"
    }
  ],
  "Stats": {
    ...
  }
}
$ curl -XPOST 127.0.0.1:8072/api/cluster/change_master -d '{"id": "127.0.0.1:10014", "address": "127.0.0.1:10014"}'
{"status":"error","error":"cannot transfer leadership to itself"}
$ curl -XPOST 127.0.0.1:8072/api/cluster/change_master -d '{"id": "127.0.0.1:10002", "address": "127.0.0.1:10002"}'
{"status":"error","error":"node is not the leader"}
$ curl -XPOST 127.0.0.1:8071/api/cluster/change_master -d '{"id": "127.0.0.1:10014", "address": "127.0.0.1:10014"}'
{"status":"ok"}
$ curl 127.0.0.1:8071/api/cluster/status | jq .
{
  "State": "Follower",
  "Nodes": [
    {
      "Address": "127.0.0.1:10002",
      "State": "Follower"
    },
    {
      "Address": "127.0.0.1:10014",
      "State": "Leader"
    }
  ],
  "Stats": {
...
  }
}
```

## Type of change

From the following, please check the options that are relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] This change requires a documentation update

# How has this been tested?


# Checklist:

- [x] This contribution follows the project's [code of conduct](https://github.com/bosun-monitor/bosun/blob/master/CODE_OF_CONDUCT.md)
- [x] This contribution follows the project's [contributing guidelines](https://github.com/bosun-monitor/bosun/blob/master/CONTRIBUTING.md)
- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules


# Description
This pull request adds ES 7.x support in Bosun.
I submitted https://github.com/bosun-monitor/bosun/pull/2427 before but that is based on my own go modules migration pull request which is different from what upstream maintainers did. This one is based on upstream go modules migration.

- https://github.com/olivere/elastic/ version 7 client is used.
- Most code are copy-pasted from ES version 6 support.
- The one difference is in ES 7 [mapping types is removed](https://www.elastic.co/guide/en/elasticsearch/reference/master/removal-of-types.html), [Type(docType)](https://github.com/bosun-monitor/bosun/blob/f4392c2a8852b753e7490c27a599c04876c912c7/annotate/backend/elastic6.go#L161) are removed in ES7

## Type of change

From the following, please check the options that are relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How has this been tested?

Tested with ES 7.2 and also ES 6.8 to make sure nothing breaks.
- update the configuration toml file and create some alerts to query ES
- verify alerts can be triggered and no errors in ES query
- verify annotate can work

# Checklist:

- [x] This contribution follows the project's [code of conduct](https://github.com/bosun-monitor/bosun/blob/master/CODE_OF_CONDUCT.md)
- [x] This contribution follows the project's [contributing guidelines](https://github.com/bosun-monitor/bosun/blob/master/CONTRIBUTING.md)
- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules

# Description

Resolves #2438

## Type of change

From the following, please check the options that are relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [x] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] This change requires a documentation update

**_See linked ticket for details on breaking change_**

# How has this been tested?

- [x] Unit tests
- [x] Manual testing of Bosun and SCollector (with OpenTSDB and Redis)

# Checklist:

- [x] This contribution follows the project's [code of conduct](https://github.com/bosun-monitor/bosun/blob/master/CODE_OF_CONDUCT.md)
- [x] This contribution follows the project's [contributing guidelines](https://github.com/bosun-monitor/bosun/blob/master/CONTRIBUTING.md)
- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules
