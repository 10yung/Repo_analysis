Hello, thank you for the awesome library!

We depend on it on one of our libraries and recently we migrated to SPM. We currently need to reference (`master`) branch or commit (`6fec2b`), which does not work well for library dependecies – there are even some issues with SPM.

Could you please just tag the current master HEAD `0.10.0`? (The patch version is required.)
I am using Dwifft with a custom class and I am not getting the expected result. 
It seems that the issue is because some of the variables of the class are changed. 
In order to avoid that I wanted to exclude these unwated property. I hence added the following function but Dwiff nevel calls it. How Dwiff test equality between two objects?

    static func == (lhs: Slide, rhs: Slide) -> Bool {
        return lhs.markdown == rhs.markdown
    }
Hi!
We have started receiving some Crashlytics crash reports in our production app recently. And they all point to some bizarre issue with Dwifft. Now the app has 2k daily active users and the crash happened only 4 times now, so it is not terribly common. None of the QA teams have been able to reproduce it and neither have I. However it happened to three different users. 

The crash always happens when setting new rows for the Dwifft SingleSectionTableViewDiffCalculator. We are using the latest version of Dwifft available via Cocoapods. 

Basically this is what we get:
```
Fatal Exception: NSInternalInconsistencyException
attempt to insert row 20 into section 0, but there are only 10 rows in section 0 after the update
```

Part of the stack trace:
```
Fatal Exception: NSInternalInconsistencyException
0  CoreFoundation                 0x1becc1ea4 __exceptionPreprocess
1  libobjc.A.dylib                0x1bde91a50 objc_exception_throw
2  CoreFoundation                 0x1bebd7a2c +[_CFXNotificationTokenRegistration keyCallbacks]
3  Foundation                     0x1bf6c61d0 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:]
4  UIKitCore                      0x1ec19e150 -[UITableView _endCellAnimationsWithContext:]
5  UIKitCore                      0x1ec1b70a0 -[UITableView endUpdates]
6  Dwifft                         0x101669340 TableViewDiffCalculator.processChanges(newState:diff:) (Dwifft+UIKit.swift:45)
7  Dwifft                         0x101668cdc specialized AbstractDiffCalculator.sectionedValues.setter (AbstractDiffCalculator.swift:78)
8  Dwifft                         0x10166a308 specialized SingleSectionTableViewDiffCalculator.rows.setter (<compiler-generated>)
9  Dwifft                         0x101669be8 SingleSectionTableViewDiffCalculator.rows.setter (<compiler-generated>)
```

This is how dwifft is configured:
```
    private var dataModel: [AppNotification] = []
    private var diffCalculator: SingleSectionTableViewDiffCalculator<AppNotification>?
    ...
    override func viewDidLoad() {
        ...
        diffCalculator = SingleSectionTableViewDiffCalculator<AppNotification>(tableView: self.tableView, initialRows: [], sectionIndex: 0)
        diffCalculator?.insertionAnimation = .top
        diffCalculator?.deletionAnimation = .middle
        ...
    }
```
The crash happens when we fetch the data from network, prepare and then store it to the dataModel property and then set the `self.diffCalculator?.rows = self.dataModel`. 

Any ideas on what could be the reason for this?

…ing heads and tails before using LCS. For example, in the case of single insert, the algorithm changes from O(m*n) to O(m+n). When the arrays contain 1,000 entries, for example, this change reduces the number of comparisons ~1,000,000 to ~2,000 and the size of the table used by the algorithm from ~1,000,000 to 2.
Great work with Dwifft. Thanks for it.

One challenge with the LCS algorithm is that it is `O(m*n)` in both CPU and memory consumption. Though this isn't a problem in practice when the size of the arrays is moderate, it becomes a problem when the arrays are large.

Anything that can be done to reduce the size of the arrays passed to the LCS algorithm has very beneficial results.

This approach, which I've used in the past in another language, is to essentially _trim_ off the matching prefixes and suffixes from the arrays passing only the "middle" of the array to the LCS algorithm.

Of course, if there is a change at both the head and tail of the array, this optimization has no benefit. In the common case, though, the benefit is huge.

Based on the guidelines, I thought it would be good to discuss the idea before opening a PR. Nevertheless, it may be easiest to just see the [code](https://github.com/jflinter/Dwifft/compare/master...epatey:matchingEnds). 

In my previous implementation, I also added change beyond what I've proposed here to pick an upper bound on `m*n` work factor. When that limit is exceeded, a `reloadData` is really the best approach.

How hard would it be to add a completion handler for the diff function so the values don't have to be equatable? A library called Diff does this. 

For example: 

```
        [1,2,3].diff([3,4,5]) { (old, new) -> Bool in
            return old == new
        }
```

This would allow me to pass an array of custom models and only check if certain values are equal. 

Thanks,
Joe

Add watchOS deployment target on podspec.
I've researched a lot regards to fix contentOffset after table dataSource has been updated. I couldn't find a way to do it with Dwifft. When `diffCalculator.row = self.data` is invoked with new values (in my case, new values will be added at front of previous data), it changes contentOffset. I attempted to use `tableView.setContentOffset(offset, animated: false)` after providing new data to diffCalculator which didn't work. Also, when new values (in this case, append to previous data) are added while scrolling, scroll somehow jumps on and off at some weird position. I also noticed, when same values were set to diffCalculator, it treated there were diff. I'd appreciate any advices. Thanks 