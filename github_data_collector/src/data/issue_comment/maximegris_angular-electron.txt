Update the angular cli and `rxjs` libray
Trying to build prod build for web  but fails in runtime with following error

```
Uncaught ReferenceError: require is not defined
    at Object.NLsH (main.7a05e001e00422667788.js:1)
    at c (runtime.e908a189ac2bea1bd5a9.js:1)
    at Object.o7AV (main.7a05e001e00422667788.js:1)
    at c (runtime.e908a189ac2bea1bd5a9.js:1)
    at Module.zUnb (main.7a05e001e00422667788.js:1)
    at c (runtime.e908a189ac2bea1bd5a9.js:1)
    at Object.0 (main.7a05e001e00422667788.js:1)
    at c (runtime.e908a189ac2bea1bd5a9.js:1)
    at t (runtime.e908a189ac2bea1bd5a9.js:1)
    at Array.r [as push] (runtime.e908a189ac2bea1bd5a9.js:1)
```



When I clone and build this repo as is, it does run successfully!

I don't have any require statements in the project except for Conditional Imports in electron service.

Electron service is the same as this repos service, except it has 1-2 additional conditional require statements.

One key difference in the two projects, if I search `require(` in both dist folders, there are no results in original repos build whereas in the project I am building shows 1 result as `NLsH:function(t,e){t.exports=require("electron")}`

Do note, I don't have any require statements apart from these

```
if (this.isElectron) {
      this.path = window.require('path');
      this.ipcRenderer = window.require('electron').ipcRenderer;
      this.webFrame = window.require('electron').webFrame;
      this.remote = window.require('electron').remote;
      this.app = (window.require('electron').app || window.require('electron').remote.app);
      this.fsj = window.require('fs-jetpack');


      this.childProcess = window.require('child_process');
      this.fs = window.require('fs');
      this.edge = window.require('electron-edge-js');
}
```


**angular-electron: 6.4.0**
I'm trying to get the screen size on the renderer site. I was hoping simply updating the _ElectronService_ like below would do it but screen returns undefined. Is this because screen is interpreted as the js window screen or some other reserved screen var? How can I add the screen in this service?


```
import { Injectable } from '@angular/core';

import { ipcRenderer, webFrame, remote, screen } from 'electron';
import * as childProcess from 'child_process';
import * as fs from 'fs';

@Injectable({
  providedIn: 'root'
})
export class ElectronService {
  ipcRenderer: typeof ipcRenderer;
  webFrame: typeof webFrame;
  remote: typeof remote;
  screen: typeof screen;
  childProcess: typeof childProcess;
  fs: typeof fs;


  get isElectron(): boolean {
    return window && window.process && window.process.type;
  }

  constructor() {
    // Conditional imports
    if (this.isElectron) {
      this.ipcRenderer = window.require('electron').ipcRenderer;
      this.webFrame = window.require('electron').webFrame;
      this.remote = window.require('electron').remote;
      this.screen = window.require('electron').screen;

      this.childProcess = window.require('child_process');
      this.fs = window.require('fs');
    }
  }
}

```
I created a `theme.scss` file in `src` with variables:

```
$body-background-color: white;
$body-background-image: url("/assets/images/bg-hexa-gray-flat.png");
$body-background-position: top left;
$body-background-repeat: repeat;

$sidepanel-background-color: white;
$sidepanel-background-image: url("/assets/images/bg-hexa-red-flat.png");
$sidepanel-background-position: top left;
$sidepanel-background-repeat: repeat;
```

It works with `npm start` but once I run electron in prod, I get an error file `file:///assets/images/bg-hexa-gray-flat.png` not found. How do you make your CSS paths work in prod?
Hello,


I was writting a service to load/save the user configuration in a file and I noticed a strange behavior.

The config file was read properly when "force reloading" the application (Ctrl+Shift+R) but, each time I launch the app for the first time (npm start), the configuration was empty.

I noticed that the callback of fs.read() was never hit just after 'npm start'...

Here is a sample project to reproduce the problem: [angular-electron - fs read problem](https://github.com/Booster2ooo/angular-electron/commit/3b5a805f3b7e9b3fc3ef8ff9c57a94c13bb9c1cb)

I modified ElectronService to expose path so I could use path.sep, created a basic ConfigService that reproduce the issue and did a test in the AppComponent that loads the config and, after 5 seconds, verifies the content of the config and writes a new one if it's empty.

The config service:
```javascript
import { Injectable } from '@angular/core';
import { ElectronService } from '../electron/electron.service';

@Injectable({
  providedIn: 'root'
})
export class ConfigService {

  private config: any;
  protected fileName: string = 'application-config.json';
  protected _filePath: string;
  protected get filePath(): string {
    if (this._filePath) return this._filePath;
    const userDataPath = this.electron.remote.app.getPath('userData');
    this._filePath = `${userDataPath}${this.electron.path.sep}${this.fileName}`;
    return this._filePath;
  }

  constructor(
    private electron: ElectronService
  ) { }

  load() {
    console.log('loading config...');
    this.electron.fs.readFile(this.filePath, { encoding: 'utf8'}, (err, data) => {
      console.log('config loaded...');
      if (err) return console.error(err);
      if (!data) return console.warn(`application configuration file '${this.filePath}' exists but is empty`);
      try {
        this.set(JSON.parse(data));
      }
      catch (ex) {
        console.error(`an exception occured while parsing configuration file '${this.filePath}'`, ex);
      }
    });
  }

  set(config: any) {
    this.config = config;
    this.save();
  }

  get() {
    return this.config;
  }

  private save() {
    console.log('saving config...');
    this.electron.fs.writeFile(this.filePath, JSON.stringify(this.config), { encoding: 'utf8', flag: 'w+' }, (err) => {
      console.log('config saved.');
      if (err) return console.error(err);
    });
  }
}
```

The test procedure in AppComponent:
```javascript
    configSvc.load();
    setTimeout(() => {
      const config = configSvc.get();
      if (!config) {
        console.log('no config, setting default');
        configSvc.set({ foo: 'bar'});
      }
      else {
        console.log('got config', config);
      }
    }, 5000);
```

When launching the app for the first time, a config file with '{"foo":"bar"}' should be created. If you reload the app using the developer tools, you should see the config loads properly. But, if you close the app and relaunch it using npm start, you'll notice the log "config loading..." in the console but "loaded config..." will never be displayed and a new mock config will be written.

An even stranger thing is that the Sync version of read doesn't seem to be affected by this behavior. Replacing the config service by the following seem to work as expected:

```javascript
import { Injectable } from '@angular/core';
import { ElectronService } from '../electron/electron.service';

@Injectable({
  providedIn: 'root'
})
export class ConfigService {

  private config: any;
  protected fileName: string = 'application-config.json';
  protected _filePath: string;
  protected get filePath(): string {
    if (this._filePath) return this._filePath;
    const userDataPath = this.electron.remote.app.getPath('userData');
    this._filePath = `${userDataPath}${this.electron.path.sep}${this.fileName}`;
    return this._filePath;
  }

  constructor(
    private electron: ElectronService
  ) { } 

  load() {
    console.log('loading config...');
    try {
      const configStr = this.electron.fs.readFileSync(this.filePath, { encoding: 'utf8'});
      console.log('config loaded...');
      if (configStr) this.set(JSON.parse(configStr));
    }
    catch (ex) {
      console.error(ex);
    }
  }

  set(config: any) {
    this.config = config;
    this.save();
  }

  get() {
    return this.config;
  }

  private save() {
    console.log('saving config...');
    this.electron.fs.writeFileSync(this.filePath, JSON.stringify(this.config), { encoding: 'utf8', flag: 'w+' });
    console.log('config saved.');
  }
}
```

I can't really figure where the issue comes from. Did I miss something or is it a but of some kind?

Thanks for your help, best regards.

i always get in electron from isElectron the String "renderer" (from window.process.type) and in web the type undefined.

is think this 
`return window && window.process && window.process.type;`
should be this:
`return !!(window && window.process && window.process.type);`

pr is incomming, maybe i can write a test for this.
Adding /favicon to the icon path inside the electron builder config resolves the issue where it tries to use a file that is not ment to be an app icon.   

E.g. a small Facebook icon inside the assets folder results in this error while building the app:
`  тип image ...\dist\facebook.06343e03805a95d6b367.png must be at least 256x256            error Command failed with exit code 1.      `
`
      const ret = this.remote.globalShortcut.register('Control+Alt+T', () => {
        console.log(this.webFrame);
        this.remote.app.focus();
      });
`TypeScript
I try to show the app on the top when I click the shortcut,but it failed .
I added sqlite3 native module with TypeORM to my project. Here is my new angular.webpack.json file:

```
/**
 * Custom angular webpack configuration
 */

const path = require('path');

module.exports = (config, options) => {
    config.target = 'electron-renderer';
    if (options.customWebpackConfig.target) {
        config.target = options.customWebpackConfig.target;
    } else if (options.fileReplacements) {
        for(let fileReplacement of options.fileReplacements) {
            if (fileReplacement.replace !== 'src/environments/environment.ts') {
                continue;
            }
            let fileReplacementParts = fileReplacement['with'].split('.');
            if (['dev', 'prod', 'test', 'electron-renderer'].indexOf(fileReplacementParts[1]) < 0) {
                config.target = fileReplacementParts[1];
            }
            break;
        }
    }
    config.externals = {
        'typeorm': "require('typeorm')",
        'sqlite3': "require('sqlite3')",
        'react-native-sqlite-storage': 'react-native-sqlite-storage'
    };
    config.resolve = {
        alias: {
            typeorm: path.resolve(__dirname, '../node_modules/typeorm/typeorm-model-shim')
        }
    };
    return config;
}
```
I get this warning at compile time:

> Electron: Loading non context-aware native modules in the renderer process is deprecated and will stop working at some point in the future, please see https://github.com/electron/electron/issues/18397 for more information

Any clue on how to prevent this?