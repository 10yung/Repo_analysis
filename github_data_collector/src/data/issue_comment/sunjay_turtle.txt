_NB: This is a far future idea at the time of writing, but who knows, maybe we'll get it done sooner than we think! :smile:_

It would be very cool if we added support for allowing turtles to divide up the drawing into layers. The layer stack would behave exactly like layers behave in graphics programs like Photoshop. The base `Drawing` would act as a permanent bottom layer (cannot be reordered). 

Here's the API I'm imagining for this:

```rust
pub struct Layer {
    // ...
}

impl Layer {
    /// Adds a layer to above this layer and returns it. Any drawings created
    /// on this new layer will appear above this layer, and any other layers
    /// below it in the layer stack. Drawings on this new layer will also
    /// appear above the original `Drawing` itself. Other layers and the
    /// `Drawing` can still be used as normal as you use this layer.
    pub fn add_layer_above(&mut self) -> Layer {
        // ...
    }

    /// Creates a new turtle and assigns it to this layer.
    pub fn add_turtle(&mut self) -> Turtle {
        // ...
    }

    /// Merges the drawings of this layer into the layer below it (or
    /// into the `Drawing` if this is the first layer). This layer may not
    /// be used anymore after this point. Any `Turtle`s that have been
    /// assigned to this layer will be reassigned to the layer this was
    /// merged with.
    ///
    /// # Panics
    ///
    /// Panics if there is no lower layer to merge into.
    pub fn merge_down(self) {
        // ...
    }

    /// Moves this layer underneath the given layer in the layer stack.
    /// The drawings of this layer will now be drawn underneath that layer.
    /// Any `Turtle`s assigned to this layer will continue drawing on it
    /// unaffected.
    ///
    /// # Panics
    ///
    /// The base layer (from `Drawing`) cannot be moved. Attempting to do
    /// so will result in a panic.
    pub fn move_under(&mut self, other: &Layer) {
        // ...
    }
    pub fn move_over(&mut self, other: &Layer) { /* ... */ }

    /// Clears all the drawings from this layer. All other layers,
    /// as well as the original `Drawing`, are completely unaffected.
    pub fn clear(&mut self) {
        // ...
    }

    /// Removes this layer from the layer stack, deleting all drawings
    /// on this layer in the process. Any turtles assigned to this layer
    /// are reassigned to the original `Drawing`.
    ///
    /// # Panics
    ///
    /// Trying to remove the base layer (from `Drawing`) will result in
    /// a panic.
    pub fn remove(self) {
        // ...
    }

    /// Duplicates this layer and all of its drawings, leaving any
    /// assigned turtles still assigned to the previous layer.
    /// The new layer is placed above this layer.
    pub fn duplicate(&self) {
        // ...
    }

    /// Sets the clipping rectangle in which this layer will be drawn
    ///
    /// No drawings outside of the given rectangle will show. This can be
    /// useful to accomplish a "picture in picture" effect or even a
    /// "split screen" effect.
    pub fn set_clipping(&mut self, top_left: Point, size: Size) {
        // top_left and size are in turtle world coordinates
        // ...
    }

    /// Clears the clipping rectangle for this layer and allows it to be
    /// drawn across the entire window.
    pub fn clear_clipping(&mut self) {
        // ...
    }

    //TODO: set_background_color
}
```

```rust
impl Drawing {
    /// Creates a new turtle that can draw on this drawing
    pub fn add_turtle(&mut self) -> Turtle {
        // ...
    }

    /// Adds a layer to this drawing and returns it. Any drawings created
    /// on this new layer will appear above any previously created layers
    /// as well as the original `Drawing` itself. Other layers and the
    /// `Drawing` can still be used as normal as you use this layer.
    pub fn add_layer_above(&mut self) -> Layer {
        // ...
    }

    // Clears the drawing and all layers in the layer stack
    pub fn clear_all(&mut self) {
        // ....
    }
}
```

```rust
impl Turtle {
    /// Assigns this turtle to draw on the given layer. You may also
    /// pass the original `Drawing` to this method to assign the turtle
    /// back to the base layer of the layer stack.
    pub fn draw_on<L: AsLayer>(&mut self, layer: L) {
        // ...
    }
}
```

The `add_turtle` methods are specifically a part of the multiple turtles API (#16). Every other part of this can be implemented independent of that.

The `set_clipping` method can become a future extension and a separate GitHub issue if it is too much work to implement it as part of this.

Missing from this API is any way to traverse the layer stack. I have no idea if that is a useful feature or not or how the API should look. The functions above should be sufficient as a starting point.

There should also be more getters in the final API.
A (probably silly) idea I had was that we should think about supporting a mode where instead of drawing a simple 2D triangle we actually draw a full 3D turtle that walks around a plane and draws with a pen tied around its tail.

I thought of this while looking at a screenshot from one of my oldest (10 years ago!) games:

![image](https://user-images.githubusercontent.com/530939/65180398-c3cd3d00-da2a-11e9-96ed-2bea28881db8.png)

The green thing in the center of this screenshot is a turtle. We could have something like that drawing on a white plane.

Other than some method to set the mode, none of the turtle's interface needs to change. This is just a neat way to render the animated drawings. I think it's important to have some sort of mouse controls so you can rotate the view, pan, and zoom around the 3D world while the turtle draws.

I have no idea how we would render the 2D paths (the actual drawings) in 3D. I think the new rendering backend should help with that though because it represents everything in terms of vertices and faces using the lyon crate.

- [ ] Model a simple, low-poly 3D turtle with a pen on its tail
- [ ] Create a new backend for the turtle that draws in 3D instead of 2D
    - [ ] Render a turtle 3D model
    - [ ] Render the plane it walks on (better if very big / infinite sized)
    - [ ] Render the paths being drawn as the turtle moves around
- [ ] Mouse controls for moving around the 3D world
    - [ ] Left mouse button drag - rotate view around center of view
    - [ ] Middle mouse button drag - pan the view
    - [ ] Right mouse button drag - zoom in and out
- [ ] Consider what the control scheme should be for people without a mouse / middle mouse button
- [ ] Bonus points for making it possible to change the color of the 3D pen when the pen color of the `Turtle` struct changes
We should consider implementing the Debug trait for the Turtle struct so that it becomes possible to print out the turtle and immediately see information about it. It wouldn't be useful to just derive the trait automatically because the Turtle struct doesn't actually directly contain any real information about itself. All of that is in the separate renderer process. 

This implementation will probably not be added anytime soon because querying each individual property would just be horrendously slow. Eventually, once we add some low overhead ways to access the other process's memory, we will be able to do this in a reasonably performant way. 

The implementation should print out as if the turtle struct actually had all of these fields as normal fields:

* position
* heading (printed with a unit either "Â°" or "rad" depending on the angle unit)
* speed
* pen properties (printed as a field called `pen` that prints `Pen { thickness: ... }`
* fill color
* visible
* etc. (See getter methods on struct)

We can use the [methods on the `Formatter` struct that specifically allow for printing structs](https://doc.rust-lang.org/std/fmt/struct.Formatter.html#method.debug_struct). Basically we want to totally fake the internal representation just for the sake of making debugging easy. 

While this issue is specific to the turtle struct, this may be applicable to other types in the crate as well.
Updates the requirements on [rand](https://github.com/rust-random/rand) to permit the latest version.
<details>
<summary>Changelog</summary>

*Sourced from [rand's changelog](https://github.com/rust-random/rand/blob/master/CHANGELOG.md).*

> ## [0.7.0] - 2019-06-28
> 
> ### Fixes
> - Fix incorrect pointer usages revealed by Miri testing ([#780](https://github-redirect.dependabot.com/rust-random/rand/issues/780), [#781](https://github-redirect.dependabot.com/rust-random/rand/issues/781))
> - Fix (tiny!) bias in `Uniform` for 8- and 16-bit ints ([#809](https://github-redirect.dependabot.com/rust-random/rand/issues/809))
> 
> ### Crate
> - Bumped MSRV (min supported Rust version) to 1.32.0
> - Updated to Rust Edition 2018  ([#823](https://github-redirect.dependabot.com/rust-random/rand/issues/823), [#824](https://github-redirect.dependabot.com/rust-random/rand/issues/824))
> - Removed dependence on `rand_xorshift`, `rand_isaac`, `rand_jitter` crates ([#759](https://github-redirect.dependabot.com/rust-random/rand/issues/759), [#765](https://github-redirect.dependabot.com/rust-random/rand/issues/765))
> - Remove dependency on `winapi` ([#724](https://github-redirect.dependabot.com/rust-random/rand/issues/724))
> - Removed all `build.rs` files ([#824](https://github-redirect.dependabot.com/rust-random/rand/issues/824))
> - Removed code already deprecated in version 0.6 ([#757](https://github-redirect.dependabot.com/rust-random/rand/issues/757))
> - Removed the serde1 feature (It's still available for backwards compatibility, but it does not do anything. [#830](https://github-redirect.dependabot.com/rust-random/rand/issues/830))
> - Many documentation changes
> 
> ### rand_core
> - Updated to `rand_core` 0.5.0
> - `Error` type redesigned with new API ([#800](https://github-redirect.dependabot.com/rust-random/rand/issues/800))
> - Move `from_entropy` method to `SeedableRng` and remove `FromEntropy` ([#800](https://github-redirect.dependabot.com/rust-random/rand/issues/800))
> - `SeedableRng::from_rng` is now expected to be value-stable ([#815](https://github-redirect.dependabot.com/rust-random/rand/issues/815))
> 
> ### Standard RNGs
> - OS interface moved from `rand_os` to new `getrandom` crate ([#765](https://github-redirect.dependabot.com/rust-random/rand/issues/765), [getrandom](https://github.com/rust-random/getrandom))
> - Use ChaCha for `StdRng` and `ThreadRng` ([#792](https://github-redirect.dependabot.com/rust-random/rand/issues/792))
> - Feature-gate `SmallRng` ([#792](https://github-redirect.dependabot.com/rust-random/rand/issues/792))
> - `ThreadRng` now supports `Copy` ([#758](https://github-redirect.dependabot.com/rust-random/rand/issues/758))
> - Deprecated `EntropyRng` ([#765](https://github-redirect.dependabot.com/rust-random/rand/issues/765))
> - Enable fork protection of ReseedingRng without `std` ([#724](https://github-redirect.dependabot.com/rust-random/rand/issues/724))
> 
> ### Distributions
> - Many distributions have been moved to `rand_distr` ([#761](https://github-redirect.dependabot.com/rust-random/rand/issues/761))
> - `Bernoulli::new` constructor now returns a `Result` ([#803](https://github-redirect.dependabot.com/rust-random/rand/issues/803))
> - `Distribution::sample_iter` adjusted for more flexibility ([#758](https://github-redirect.dependabot.com/rust-random/rand/issues/758))
> - Added `distributions::weighted::alias_method::WeightedIndex` for `O(1)` sampling ([#692](https://github-redirect.dependabot.com/rust-random/rand/issues/692))
> - Support sampling `NonZeroU*` types with the `Standard` distribution ([#728](https://github-redirect.dependabot.com/rust-random/rand/issues/728))
> - Optimised `Binomial` distribution sampling ([#735](https://github-redirect.dependabot.com/rust-random/rand/issues/735), [#740](https://github-redirect.dependabot.com/rust-random/rand/issues/740), [#752](https://github-redirect.dependabot.com/rust-random/rand/issues/752))
> - Optimised SIMD float sampling ([#739](https://github-redirect.dependabot.com/rust-random/rand/issues/739))
> 
> ### Sequences
> - Make results portable across 32- and 64-bit by using `u32` samples for `usize` where possible ([#809](https://github-redirect.dependabot.com/rust-random/rand/issues/809))
> 
> ## [0.6.5] - 2019-01-28
> ### Crates
> - Update `rand_core` to 0.4 ([#703](https://github-redirect.dependabot.com/rust-random/rand/issues/703))
> - Move `JitterRng` to its own crate ([#685](https://github-redirect.dependabot.com/rust-random/rand/issues/685))
> - Add a wasm-bindgen test crate ([#696](https://github-redirect.dependabot.com/rust-random/rand/issues/696))
> 
> ### Platforms
> - Fuchsia: Replaced fuchsia-zircon with fuchsia-cprng
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- See full diff in [compare view](https://github.com/rust-random/rand/commits)
</details>
<br />

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it). To ignore the version in this PR you can just close it
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Pull request limits (per update run and/or open at any time)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)

Finally, you can contact us by mentioning @dependabot.

</details>
We have things in our API that are unstable. Some examples include:

- many methods on Drawing
- everything to do with events

We should make it impossible to use these accidentally by forcing people to use a [cargo feature](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section) called "unstable". This feature will be disabled by default. 

We should make sure that docs.rs still shows these functions and that we have some documentation in each of them to indicate that they shouldn't be used.

One day we might be able to get a working #[unstable] attribute, but until then this will have to do. 
For every type that can be randomized (`Color`, `Point`, `Speed`, etc.) we should add a section `Generating Random X` that documents how to use `random()` and `random_range()` to generate values of that type.

- [ ] Behaviour of `random()` and `random_range()` for each type
- [ ] Examples of using each
- [ ] Examples of the different bounds types supported by each (most of them implement `RandomRange<B>` with `B: Into<X>`)
- [ ] Do this for the scalar types too (`Distance`, etc.)
Need to put some thought into this and then add a note in the README.

Relevant links:

* https://github.com/redox-os/rusttype#minimum-supported-rust-compiler
* https://gist.github.com/alexheretic/d1e98d8433b602e57f5d0a9637927e0c
https://docs.python.org/2/library/turtle.html#turtle.undo

A per-turtle way to support undoing and then potentially redoing the last actions of a given turtle. Since we only have one turtle per drawing right now, it is fine to maintain just a single undo stack, but the idea is that this feature will eventually work well with multiple turtles (#16) as well. 

We can also add something called a "save point" to return an identifier to a particular point in the turtle's state. This can be used to undo/redo the drawing back to a particular point. Then, instead of an undo stack, we could even make an undo graph/tree where you can go back and forth to any arbitrary point in history. Modeling it as a graph is probably a much later extension to what can start as a simpler feature. 

~~This undo/redo functionality is related to the [Push & Pop functionality added to this L-systems workshop](https://github.com/columbus-elst-connection/l-system-prototype) that uses turtle.~~
Hello! Turtle is a great project in so many ways. ðð¢

I noticed that after completing the Rust logo (`cargo run --example rust`), the `cargo` process was using ~100% of a core on my MacBook Pro, while the operating system's `WindowServer` process was using ~15%. This suggests Turtle is still drawing when idle.

I don't know much about the GUI / graphics stacks, so have no idea if this is difficult to fix. ð

(Side note: CPU utilisation is also pretty high while drawing, managing to use all four cores on my laptop. Reducing idle CPU utilisation should help with that too!)
Somewhere, in `CONTRIBUTING.md` or otherwise, we need to document the architecture of the turtle crate. That means talking about its dual-process design, how animations work, drawing commands, interprocess communication, etc.

If this information is not directly in `CONTRIBUTING.md`, it needs to be linked in that file.

This is very important for onboarding new contributors into the turtle codebase.