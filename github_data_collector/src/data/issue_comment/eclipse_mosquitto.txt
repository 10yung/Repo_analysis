Can you please name debug libraries and executables differently to release versions?

The standard way that this is usually achieved is through having a d suffix appended to the end of the name for debug versions:

mosquittod.lib, mosquittod.dll
vs
mosquitto.lib, mosquitto.dll
etc.

This would make integrating to other systems and build processes much simpler.
Hi, 

I'm currently trying to bridge local mosquitto messages to Azure IoT Hub. I gathered the available Information for example here: [https://github.com/eclipse/mosquitto/issues/953](url) 

Unfortunately it won't work in mosquitto version 1.6.8 with the following bridge config. Even with a working mosquitto_pub command.

Pub_Command:

> mosquitto_pub -h mxchipflsei.azure-devices.net -u "mxchipflsei.azure-devices.net/iotoctopibridge/?api-version=2018-06-30" -P "SharedAccessSignature sr=mxchipflsei.azure-devices.net%2Fdevices%2Fiotoctopibridge&sig=***" -t "devices/iotoctopibridge/messages/events/" --cafile /home/pi/baltimore.pem -p 8883 -i iotoctopibridge -V mqttv311 -d  -m '{"id":"123"}'


Bridge_Config:

> # Bridge configuration
> connection azureiot-bridge
> 
> log_type all
> 
> address mxchipflsei.azure-devices.net:8883
> remote_username mxchipflsei.azure-devices.net/iotoctopibridge
> remote_password SharedAccessSignature sr=mxchipflsei.azure-devices.net%2Fdevices%2Fiotoctopibridge&sig=***
> remote_clientid iotoctopibridge
> bridge_cafile /home/pi/baltimore.pem
> try_private false
> cleansession true
> start_type automatic
> bridge_insecure false
> bridge_protocol_version mqttv311
> bridge_tls_version tlsv1.2
> notifications false
> notification_topic events/
> 
> topic devices/iotoctopibridge/messages/events/# out 1

log

> 1579163115: Bridge local.iotoctopibridge doing local SUBSCRIBE on topic devices/iotoctopibridge/messages/events/#
> 1579163115: Connecting bridge (step 1) azureiot-bridge (mxchipflsei.azure-devices.net:8883)
> 1579163115: Connecting bridge (step 2) azureiot-bridge (mxchipflsei.azure-devices.net:8883)
> 1579163115: Bridge iotoctopibridge sending CONNECT
> 1579163116: Received CONNACK on connection local.iotoctopibridge.
> 1579163116: Bridge local.iotoctopibridge sending UNSUBSCRIBE (Mid: 2, Topic: devices/iotoctopibridge/messages/events/#)
> 1579163116: Received UNSUBACK from local.iotoctopibridge

Before I used the remote id "iotoctopibridge" I had the id "iotoctopi" which was qual to the name of my raspberry. There I got Logs with information like:

> 1579162482: Bridge local.iotoctopi doing local SUBSCRIBE on topic devices/iotoctopi/messages/events/#
> 1579162482: Connecting bridge (step 1) azureiot-bridge (mxchipflsei.azure-devices.net:8883)
> 1579162482: Connecting bridge (step 2) azureiot-bridge (mxchipflsei.azure-devices.net:8883)
> 1579162482: Bridge iotoctopi sending CONNECT
> 1579162483: Received CONNACK on connection local.iotoctopi.
> 1579162483: Connection Refused: broker unavailable
> 1579162483: Socket error on client local.iotoctopi, disconnecting.


Any Ideas? 

Thanks in advance and best Regards
Florian
Hello,

Playing with shared subscriptions, it works very well on 1 mosquitto.
But seems not working with two mosquittos bridged together, when subscribers are not connected to the same mosquitto.

Is it planned to implement shared subscriptions over bridging ?
Cheers, Guillaume. 
I have one server running mosquitto 1.4.15, the server has 15G of RAM and 6 CPU's, here is the CPU info: 

```
- Architecture:        x86_64
- CPU op-mode(s):      32-bit, 64-bit
- Byte Order:          Little Endian
- CPU(s):              6
- On-line CPU(s) list: 0-5
- Thread(s) per core:  1
- Core(s) per socket:  1
- Socket(s):           6
- NUMA node(s):        1
- Vendor ID:           GenuineIntel
- CPU family:          6
- Model:               85
- Model name:          Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz
- Stepping:            4
- CPU MHz:             2294.608
- BogoMIPS:            4589.21
- Virtualization:      VT-x
- Hypervisor vendor:   KVM
- Virtualization type: full
- L1d cache:           32K
- L1i cache:           32K
- L2 cache:            1024K
- L3 cache:            25344K
- NUMA node0 CPU(s):   0-5
```

The problem is mosquitto shows it's consuming between 80% and 100% of the CPU, most of the time and it stops sending the messages to the topics, so I have to restart whenever this happens:

<img width="1196" alt="Captura de Pantalla 2020-01-13 a la(s) 9 57 46" src="https://user-images.githubusercontent.com/56493007/72270953-9b75d980-35eb-11ea-83f3-ccc1f60278ac.png">

But on DataDog it says that the highest peak we are using of CPU, is not even 20%:
<img width="1100" alt="Captura de Pantalla 2020-01-13 a la(s) 10 02 01" src="https://user-images.githubusercontent.com/56493007/72271403-733aaa80-35ec-11ea-8f08-f25896bcb91d.png">

So I think mosquitto is only taking advantage of 1 CPU of the 6 the server has.

This is my $SYS :

<img width="647" alt="Captura de Pantalla 2020-01-13 a la(s) 10 03 40" src="https://user-images.githubusercontent.com/56493007/72271188-0de6b980-35ec-11ea-925f-4ce0be21e8ae.png">

Here is my configuration file: 

```
pid_file /var/run/mosquitto.pid
allow_anonymous false
password_file /etc/mosquitto/passwd
listener 2052 0.0.0.0
persistence true
persistence_location /var/lib/mosquitto/

log_dest file /var/log/mosquitto/mosquitto.log

include_dir /etc/mosquitto/conf.d

```

Any help is appreciated :D 
I'm running mosquitto in a docker container. Log files can be stored without problems, but errors occur when trying to save in-memory data on exiting. Below are the logs:

```
2020-01-13T08:02:26: mosquitto version 1.6.8 starting
2020-01-13T08:02:26: Config loaded from /mosquitto/config/mosquitto.conf.
2020-01-13T08:02:26: Opening ipv4 listen socket on port 1883.
2020-01-13T08:02:26: Opening ipv6 listen socket on port 1883.
^C2020-01-13T08:02:28: mosquitto version 1.6.8 terminating
2020-01-13T08:02:28: Saving in-memory database to mosquitto.db.
2020-01-13T08:02:28: Error saving in-memory database, unable to open mosquitto.db.new for writing.
2020-01-13T08:02:28: Error: Invalid argument.
```

Note the last line which says: **Invalid argument**.

I'm not sure what it means nor how to solve it. Tried to change persistence directory, filename and `chown`. Nothing works. It doesn't even work without any binding volume. I don't think it's a permission issue.

Can anyone please help me? Thanks!

Hello!

I am using mosquitto in a production embedded device and some recent changes have prompted me to consider which branch/tag to follow. I infer that the master branch is the most stable, production ready branch, and fixes is a sort of 'next' branch, and so my default choice would be to track the HEAD of master. 

If I were to track master, and was interested in some of the changes that have been added to fixes, is the easiest thing to make a pull request to master of fixes merged into master? Would that suit the mosquitto release/tag schedule? Are there testing and validation procedures to make sure that the wrong things (faulty code) don't get committed to master? Are there any other things I should keep in mind?

Thanks!
This is a stupid question, but I'm not able to find how to set the properties for mqtt_v5, in order to pass it in v5 functions, further is documentation available for setting up the properties.
A) Precondition: 
Successfully connect from mosquitto to a broker and stop the broker service from the server. 
Register a disconnectCallback like "mosquitto_disconnect_callback_set(mosq, disconnectCallback)"

B) Reproduction:
When getting informed about "unexpected disconnect" by disconnectCallback call:
1) mosquitto_disconnect(mosq);
2) mosquitto_loop_stop(mosq, false);

Internally mosquitto_loop_stop() does not return before the reconnect_delay expired (which could be a huge time) and is unnecessary to wait.

C) Possible fix in loop.c:
in mosquitto_loop_forever() use from Line 268:

				// Regularly check state and stop waiting when disconnecting.
				while (reconnect_delay) {
					// Sleep for one second
#ifdef WIN32
					Sleep(1000);
#else
					req.tv_sec = 1;
					req.tv_nsec = 0;
					while(nanosleep(&req, &rem) == -1 && errno == EINTR){
						req = rem;
					}
#endif
					reconnect_delay--;

					// Stop waiting in case of disconnecting.
					pthread_mutex_lock(&mosq->state_mutex);
					if (mosq->state == mosq_cs_disconnecting) {
						reconnect_delay = 0;
					}
					pthread_mutex_unlock(&mosq->state_mutex);
				}



When broker publish an integer type value, the mosquito_sub , example 67 is sent as "C" (ASCII code conversion).
mosquitto_pub --id idname doesn't work (default ID appears in broker logs: mosq-XXXXXXXXXXXXXXXXXX )

mosquitto_pub -i idname works as expected