When applying snap with a threshold of 0.01(number doesn't matter), it doesn't work. The indicator is always at default(half height of window). The threshold does not get applied to the snap via use of the scrollbar. I've tried debugging this but it's a bit of a headache.

Here's hoping someone reads this.

Thanks.
Is this project still alive?
You can help me to fix iScroll issue. It's prevent me to drag google map.
I have tried everything to try and use iScroll via TypeScript. I have install the following

`npm i iscroll --save`
`npm i @types/iscroll --save`

I then imported as follows..
`import { IScroll } from 'iscroll';`

and then use as per the docs...

```
var wrapper = document.getElementById('wrapper');
var myScroll = new IScroll(wrapper);
```

The first error it to do with the typedef not being a module, so I added..

`declare module 'Iscroll';`

and exported the interface and class.

It now builds but when I try to new up `IScroll` it is not defined.

Is there any doco on how to use this in this environment?
I'm seeing a bug in Safari 12.0.2/OSX 10.13.6 in which this condition is not met, and therefore scrollEnd never gets fired. It only happens when the user gets to the end of the scroll pane, goes up a couple pages, then goes back to the end. If I remove the if statement, scrollEnd is always fired and the issue is resolved. Is there a hidden negative to doing that which I've not yet seen?

The packages in the build folder are up to date
    - some bugs in demos event-passthrough, when you are using the  npm package/build/iscroll.js

but NPM packages are not up to date
It will leave a large white space in the bottom of container div when I scroll to bottom.

On smaller resolutions, every 4 pixels, I'm getting one too many pages when using iscroll.pages.length. As a result there is one too many navigation dots in the carousel. The last dot doesn't seem to do much (see attached gif)
![iscroll caorusel pages bug](https://user-images.githubusercontent.com/8929565/43886715-ef8e2056-9bbc-11e8-8b2d-5bcf98d66360.gif)
The issue seems to be related to position calculation, rounding in particular. Inspecting the position of selected items on affected resolutions shows that it increases by 0.5px with each slide:
```
> $0.position()
{top: 0, left: 0}
> $1.position()
{top: 0, left: 0.5}
> $2.position()
{top: 0, left: 1}
```
On unaffected resolution it alternates between `0` and `0.5` or stays `0`

I'm using Chrome 68