73b02f9 implemented `daemon(3)` for systems that don't have it, but the
function prototype was never included in `main.c` where it is
referenced.

@bmah888 
Dear sir,
I use iperf3 to test LAN performance under UDP mode. The commands are as below:
Receiver: Iperf3 –s –p 5200
Sender: Iperf3 –c 192.168.2.1 –p 5200 –P 4(4 is CPU core number) –u –b 10G –l 65507
a. Only add “ –l 65507 “ ,the performance will be arrive at the best. If less than 65507, the results were not as good as set as 65507.
b. for single port test : the single port’s max speed is 10Gbps, the test result was 9.6Gbps.
    if I delete “-l 65507” ,the test results was 8.2Gbps.
Would you please tell me is this right command ,which can set as test standard ? THANKS 

Best regards
Christina


# Context

* Version of iperf3: iperf 3.7 (cJSON 1.5.2)

* Hardware: Darwin Kernel Version 19.2.0

* Operating system (and distribution, if any): macOS 10.15.2 (19C57)

_Please note: iperf3 is supported on Linux, FreeBSD, and macOS.
Support may be provided on a best-effort basis to other UNIX-like
platforms.  We cannot provide support for building and/or running
iperf3 on Windows, iOS, or Android._

* Other relevant information (for example, non-default compilers,
  libraries, cross-compiling, etc.):

_Please fill out one of the "Bug Report" or "Enhancement Request"
sections, as appropriate._

# Bug Report

* Expected Behavior

Parsable JSON for bidirectional test with unique keys.

* Actual Behavior

This JSON cannot be processed:
<img width="439" alt="Screen Shot 2020-01-10 at 1 18 55 AM" src="https://user-images.githubusercontent.com/47128/72141581-fab3bf80-3347-11ea-8a48-7903d64f5c28.png">

Note duplicate keys `sum`, `sum_sent`, `sum_received` in the above JSON.

* Steps to Reproduce

`iperf3 -c hostname --bidir -J`

* Possible Solution

Perhaps a client -> server "TX" key, and a server -> client "RX" key?

Possible fix for #944.


If I may, for the future updates of API I would suggest all strings passed as arguments to API calls to be redesigned for 'const char *' instead of 'char *'. This would make life easier when calling them.

_Originally posted by @oleh-yudin-ring in https://github.com/esnet/iperf/issues/939#issuecomment-568128446_
```
Administrator@WIN12R2DC ~/iperf3-a294bd4ce76ca096a27ac7f0242c55a140f04432
$ uname -a
CYGWIN_NT-6.3 WIN12R2DC 3.1.2(0.340/5/3) 2019-12-21 15:25 x86_64 Cygwin

Administrator@WIN12R2DC ~/iperf3-a294bd4ce76ca096a27ac7f0242c55a140f04432
$ git log
commit a294bd4ce76ca096a27ac7f0242c55a140f04432 (HEAD -> master, origin/master, origin/HEAD)
Author: Bruce A. Mah <bmah@es.net>
Date:   Fri Dec 20 15:39:26 2019 -0800

    fix: Copy some strings passed as API parameters for consistency with CLI. (#943)

    Fixes #939.


Administrator@WIN12R2DC ~/iperf3-a294bd4ce76ca096a27ac7f0242c55a140f04432
$ ./configure
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether to enable maintainer-specific portions of Makefiles... no
checking build system type... x86_64-unknown-cygwin
checking host system type... x86_64-unknown-cygwin
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking whether gcc understands -c and -o together... yes
checking whether make supports the include directive... yes (GNU style)
checking dependency style of gcc... gcc3
checking for ranlib... ranlib
checking whether ln -s works... yes
checking how to print strings... printf
checking for a sed that does not truncate output... /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by gcc... /usr/x86_64-pc-cygwin/bin/ld.exe
checking if the linker (/usr/x86_64-pc-cygwin/bin/ld.exe) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B
checking the name lister (/usr/bin/nm -B) interface... BSD nm
checking the maximum length of command line arguments... 8192
checking how to convert x86_64-unknown-cygwin file names to x86_64-unknown-cygwin format... func_convert_file_noop
checking how to convert x86_64-unknown-cygwin file names to toolchain format... func_convert_file_noop
checking for /usr/x86_64-pc-cygwin/bin/ld.exe option to reload object files... -r
checking for objdump... objdump
checking how to recognize dependent libraries... file_magic ^x86 archive import|^x86 DLL
checking for dlltool... dlltool
checking how to associate runtime and link libraries... func_cygming_dll_for_implib
checking for ar... ar
checking for archiver @FILE support... @
checking for strip... strip
checking for ranlib... (cached) ranlib
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for sysroot... no
checking for a working dd... /usr/bin/dd
checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
checking for mt... no
checking if : is a manifest tool... no
checking how to run the C preprocessor... gcc -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for dlfcn.h... yes
checking for objdir... .libs
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -DDLL_EXPORT -DPIC
checking if gcc PIC flag -DDLL_EXPORT -DPIC works... yes
checking if gcc static flag -static works... yes
checking if gcc supports -c -o file.o... yes
checking if gcc supports -c -o file.o... (cached) yes
checking whether the gcc linker (/usr/x86_64-pc-cygwin/bin/ld.exe) supports shared libraries... yes
checking whether -lc should be explicitly linked in... yes
checking dynamic linker characteristics... Win32 ld.exe
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking for ANSI C header files... (cached) yes
checking for library containing floor... none required
checking for library containing socket... none required
checking for library containing inet_ntop... none required
checking for an ANSI C-conforming const... yes
checking poll.h usability... yes
checking poll.h presence... yes
checking for poll.h... yes
checking sys/socket.h usability... yes
checking sys/socket.h presence... yes
checking for sys/socket.h... yes
checking for netinet/sctp.h... no
checking endian.h usability... yes
checking endian.h presence... yes
checking for endian.h... yes
checking for pkg-config... pkg-config
checking whether compiling and linking against OpenSSL works... no
checking TCP_CONGESTION socket option... no
checking IPv6 flowlabel support... no
checking for cpuset_setaffinity... no
checking for sched_setaffinity... yes
checking for SetProcessAffinityMask... yes
checking for daemon... yes
checking for sendfile... no
checking for getline... yes
checking SO_MAX_PACING_RATE socket option... no
checking for library containing clock_gettime... none required
checking for clock_gettime... yes
checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating src/version.h
config.status: creating examples/Makefile
config.status: creating iperf3.spec
config.status: creating src/iperf_config.h
config.status: src/iperf_config.h is unchanged
config.status: executing depfiles commands
config.status: executing libtool commands

Administrator@WIN12R2DC ~/iperf3-a294bd4ce76ca096a27ac7f0242c55a140f04432
$ make
Making all in src
make[1]: Entering directory '/home/Administrator/iperf3-a294bd4ce76ca096a27ac7f0242c55a140f04432/src'
make  all-am
make[2]: Entering directory '/home/Administrator/iperf3-a294bd4ce76ca096a27ac7f0242c55a140f04432/src'
gcc -DHAVE_CONFIG_H -I.    -g -g -O2 -Wall -MT iperf3-main.o -MD -MP -MF .deps/iperf3-main.Tpo -c -o iperf3-main.o `test -f 'main.c' || echo './'`main.c
mv -f .deps/iperf3-main.Tpo .deps/iperf3-main.Po
/bin/sh ../libtool  --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I.     -g -O2 -Wall -MT cjson.lo -MD -MP -MF .deps/cjson.Tpo -c -o cjson.lo cjson.c
libtool: compile:  gcc -DHAVE_CONFIG_H -I. -g -O2 -Wall -MT cjson.lo -MD -MP -MF .deps/cjson.Tpo -c cjson.c  -DDLL_EXPORT -DPIC -o .libs/cjson.o
libtool: compile:  gcc -DHAVE_CONFIG_H -I. -g -O2 -Wall -MT cjson.lo -MD -MP -MF .deps/cjson.Tpo -c cjson.c -o cjson.o >/dev/null 2>&1
mv -f .deps/cjson.Tpo .deps/cjson.Plo
/bin/sh ../libtool  --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I.     -g -O2 -Wall -MT iperf_api.lo -MD -MP -MF .deps/iperf_api.Tpo -c -o iperf_api.lo iperf_api.c
libtool: compile:  gcc -DHAVE_CONFIG_H -I. -g -O2 -Wall -MT iperf_api.lo -MD -MP -MF .deps/iperf_api.Tpo -c iperf_api.c  -DDLL_EXPORT -DPIC -o .libs/iperf_api.o
iperf_api.c: In function 'iperf_on_connect':
iperf_api.c:772:58: warning: format '%llu' expects argument of type 'long long unsigned int', but argument 3 has type 'uint64_t {aka long unsigned int}' [-Wformat=]
             iperf_printf(test, "      Target Bitrate: %llu\n", test->settings->rate);
                                                       ~~~^     ~~~~~~~~~~~~~~~~~~~~
                                                       %lu
iperf_api.c: In function 'iperf_clearaffinity':
iperf_api.c:4073:21: error: 'CPU_SETSIZE' undeclared (first use in this function); did you mean '__CPU_SETSIZE'?
     for (i = 0; i < CPU_SETSIZE; ++i)
                     ^~~~~~~~~~~
                     __CPU_SETSIZE
iperf_api.c:4073:21: note: each undeclared identifier is reported only once for each function it appears in
make[2]: *** [Makefile:936: iperf_api.lo] Error 1
make[2]: Leaving directory '/home/Administrator/iperf3-a294bd4ce76ca096a27ac7f0242c55a140f04432/src'
make[1]: *** [Makefile:697: all] Error 2
make[1]: Leaving directory '/home/Administrator/iperf3-a294bd4ce76ca096a27ac7f0242c55a140f04432/src'
make: *** [Makefile:387: all-recursive] Error 1
```

how to fix it ?
Computer with **Windows 10** and two network interface one dedicated to client, another to server. The two interface are connected to a router that we want to test (correctly configured).
I launch following commands: 
Server side: iperf3.exe -s -i 1 -p 5001 -B 192.168.1.100 -f k
Client side : iperf3.exe -c 192.168.1.100 -P 1 -i 1 -p 5001 -w 56.0K -B 192.168.2.100 -N -f k -t 10

If I disconnect ethernet cable and connect it again the connection is resetted (Please see picture below displaying server and client windows). 
With Windows 7 it was working fine, the connection was not resetted and client was continuing to perform measures of bandwith.
Please help to fix this issue (any windows 10 configuration to change or timeout setting in iperf client, ... ?).
![iperf error](https://user-images.githubusercontent.com/13380492/71247464-23cccb80-2319-11ea-96af-d93da75d6ed2.JPG)




_NOTE: The iperf3 issue tracker is for registering bugs, enhancement
requests, or submissions of code.  It is not a means for asking
questions about building or using iperf3.  Those are best directed
towards the iperf3 mailing list at iperf-dev@googlegroups.com or
question sites such as Stack Overflow
(http://www.stackoverflow.com/).  A list of frequently-asked questions
regarding iperf3 can be found at http://software.es.net/iperf/faq.html._

# Context

* Version of iperf3:

* Hardware:

* Operating system (and distribution, if any):

_Please note: iperf3 is supported on Linux, FreeBSD, and macOS.
Support may be provided on a best-effort basis to other UNIX-like
platforms.  We cannot provide support for building and/or running
iperf3 on Windows, iOS, or Android._

* Other relevant information (for example, non-default compilers,
  libraries, cross-compiling, etc.):

_Please fill out one of the "Bug Report" or "Enhancement Request"
sections, as appropriate._

# Bug Report

* Expected Behavior

* Actual Behavior

* Steps to Reproduce

* Possible Solution

_Please submit patches or code changes as a pull request._

# Enhancement Request

* Current behavior

* Desired behavior

* Implementation notes

_If submitting a proposed implementation of an enhancement request,
please use the pull request mechanism._

_NOTE: The iperf3 issue tracker is for registering bugs, enhancement
requests, or submissions of code.  It is not a means for asking
questions about building or using iperf3.  Those are best directed
towards the iperf3 mailing list at iperf-dev@googlegroups.com or
question sites such as Stack Overflow
(http://www.stackoverflow.com/).  A list of frequently-asked questions
regarding iperf3 can be found at http://software.es.net/iperf/faq.html._

# Context

* Version of iperf3:
3.1.3 (client and server)

* Hardware:
x86 (QEMU)
* Operating system (and distribution, if any):
Ubuntu 18.04.1 LTS (client and server)

_Please note: iperf3 is supported on Linux, FreeBSD, and macOS.
Support may be provided on a best-effort basis to other UNIX-like
platforms.  We cannot provide support for building and/or running
iperf3 on Windows, iOS, or Android._

* Other relevant information (for example, non-default compilers,
  libraries, cross-compiling, etc.):

_Please fill out one of the "Bug Report" or "Enhancement Request"
sections, as appropriate._

# Bug Report

* Expected Behavior
iperf3 is expected to connect from the client to the server and send packets back and forth between the client and the server.

* Actual Behavior
iperf3 on the client side waits indefinitely. On terminating the client side iperf3 with ctrl+C, the server side shows and output that the size of data read does not correspond to the offered length and it is unable to receive parameters from the client.
Specifically, on the client side:
```
# iperf3 -V -d -c 10.246.128.4
iperf 3.1.3
Linux p-v1-vi2-vps-g 4.15.0-42-generic #45-Ubuntu SMP Thu Nov 15 19:32:57 UTC 2018 x86_64
^C- - - - - - - - - - - - - - - - - - - - - - - - -
Test Complete. Summary Results:
[ ID] Interval           Transfer     Bandwidth       Retr
CPU Utilization: local/sender 0.0% (0.0%u/0.0%s), remote/receiver 0.0% (0.0%u/0.0%s)
iperf3: interrupt - the client has terminated
```
On the server side:
```
# iperf3 -s
-----------------------------------------------------------
Server listening on 5201
-----------------------------------------------------------
WARNING:  Size of data read does not correspond to offered length
iperf3: error - unable to receive parameters from client:
```

* Steps to Reproduce
Start the iperf3 server as:
```
# iperf3 -s
```
On the client side,
```
# iperf3 -V -d <ip of server>
```
The client waits indefinitely.
On terminating the connection on client side, a message is seen on the server side as follows:
WARNING:  Size of data read does not correspond to offered length
iperf3: error - unable to receive parameters from client:

I have reviewed that the versions of iperf3 match on the client and server. 
Further, I have checked that a TCP connection is getting established, using tcpdump output (pl see attached tcpdump file).

[tcpdump_n_host_10_242_128_4_data.txt](https://github.com/esnet/iperf/files/3982127/tcpdump_n_host_10_242_128_4_data.txt)

It appears there is a mismatch in the size of data sent by the client compared with the data expected by the server. Is there a debug option to further identify this gap and what can be done to address it?
If this information is insufficient for a fix, please suggest additional debug data that I need to provide, for analysis.

* Possible Solution

_Please submit patches or code changes as a pull request._

# Enhancement Request

* Current behavior

* Desired behavior

* Implementation notes

_If submitting a proposed implementation of an enhancement request,
please use the pull request mechanism._

# Context

* Version of iperf3:
3.7

# Bug Report

* Expected Behavior
When using iperf_set_test_client_ username/password/rsa_pubkey C API it is expected these data to be passed to server

This is not happening due to load_pubkey_from_base64() doesn't work as expected.
In addition there is a leak of bio pointer allocated data.
Also the same is related to load_privkey_from_base64().

* Actual Behavior
Authentication data is not sent to server (test->settings->authtoken is empty) for the test during test run

* Steps to Reproduce

1. Via C API setup test with iperf_set_test_client_ username/password/rsa_pubkey
2. Run test and see auth failure error

* Possible Solution
There is no need to do Base64Decode() cause PEM_read_bio_PUBKEY() already requires base64 key string in PEM format with corresponding header and footer to work correctly.
Or find a different way to set raw RSA key data into OpenSSL EVP_PKEY
The following solution worked for me:
```
EVP_PKEY *load_pubkey_from_base64(const char *buffer) {
    BIO* bio = BIO_new(BIO_s_mem());
    BIO_puts(bio, "-----BEGIN PUBLIC KEY-----\n");
    BIO_puts(bio, buffer);
    BIO_puts(bio, "\n-----END PUBLIC KEY-----\n");
    EVP_PKEY *pkey = PEM_read_bio_PUBKEY(bio, NULL, NULL, NULL);
    BIO_free(bio);
    return (pkey);
}
```
# Enhancement Request

I would like to see the option to enforce rate-limits on iperf running in Server/Daemon mode. Specifically when using the UDP testing features. Something similar has already been request in #615 as well.

* Current behavior
For UDP testing, only the iperf client can set the bandwidth on this and the server "trusts" the client. However, a misconfigured/misbehaving client (either intentionally or accidentally) can then cause the server to sent UDP packets "as fast as it can". This behaviour can have DoS style effects on networks and as such is not desirable.
As example, the iperf server is on a 10G interface in a backbone network. A client behind a lower rate (e.g. 1G branch) uplink can trigger the server to flood the 1G connection, affecting all clients behind that same uplink _and potentially also causes flapping routing protocols if no QoS is defined_. No routing means the return packets from the client to the server are lost and client side control of the server is lost.

* Desired behavior
What would be great would be to allow the server side to have a configurable maximum rate. Any client requesting higher rate would only get the servers configured max rate. Clients requesting lower rates should still behave as is and get the requested rate. This would allow server-side protection of both the network and the server from misbehaving/malicious iperf users.