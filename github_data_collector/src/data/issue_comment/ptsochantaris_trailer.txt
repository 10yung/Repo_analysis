Happy 2020!

This update adds some new features as well as the groundwork for introducing new ones via the new GitHub v4 API. Since it involves quite a few changes under the hood, a bit of beta testing would be greatly appreciated, links below!

### New features

- Added option to use GitHub v4 API for syncing data. If you sync a large amount of PRs, Repositories, sync status items, responses and/or review statuses/assignments, then turning this option on can result in dramatic speed improvements when syncing (and a reduction in corresponding API usage) since the number of calls Trailer has to make is significantly reduced. Trailer needs to migrate some data before being able to turn this option on, if you have existing data, so you will have to sync all servers at least once before being able to turn this option on.
- v3 API sync also features various improvements and optimisations to speed up some operations.
- Option to display teams that have been assigned to review a PR.
- Option to mark merge conflicts in PRs _(v4 API only)_
- Option to show added/removed line counts in PRs, as well as the ability to sort using that as a criterion _(v4 API only)_
- Option to scan closed and merged items for new events like comments and reactions _(v4 API only)_
- Reaction and status scanning logic has changed to keep syncs sane and help them scale up for larger numbers of items. From now on, Trailer will scan a fixed amount of items for statuses and reactions on every sync, and will round-robin through all items. So if you sync 200 items, and youâ€™ve set 50 items per refresh, then all items will be refreshed within 4 syncs.
- Various minor bug fixes and tweaks across both macOS and iOS.

### macOS
- Improvements to colours and dark mode handling.
- Improvements to keyboard handling in the repository list editor.
- Notarised binary for greater security.

### iOS
- iOS is now mature enough, and has enough handling for windowing and multitasking that it makes no sense to have an in-app web view and split-screen detail view on the iPad. Instead Trailer now works on iOS the same way it works on macOS - i.e. as a directory of items, and leaves opening and handling the URL of each item to the system. For instance, on iPad you can now set up your own split-screen by dragging an entry to the side of the screen and creating a new Safari window.
- Major UI refresh for iOS 13, including improved system appearance support, iOS native system icons, context menus for items, and many miscellaneous UI fixes.

### Installing the beta:
macOS: https://whisper.chat/trailer-beta/Trailer170-beta2.zip
iOS: https://testflight.apple.com/join/Q08QBYax

If you want to be totally safe and be able to rollback to an earlier release, remember to back up your data folder in `~/Library/Application\ Support/com.housetrip.Trailer`
I have a watched repository that's configured to only show my issues/PRs, and if I turn on the auto-snooze feature, it puts all the other issues in that repository into my "snoozed" section
I've noticed, that `~/Library/Application Support/Trailer/.Sparkle` folder on my disk is where all previous app versions are silently placed. They aren't even deleted after update. Over time this folder can grow to a considerable size, because each upgrade adds 2 files (zipped version + unzipped version).

Not sure if you can do something about it.


Hi,

It's an amazing app and I'm wondering if we could add a feature to ignore some of those pull requests in `Participated` section? 
I don't know if this is due to upgrading to Catalina, because it's been a while since I tried running Trailer from the command line.  Anyways, when I do, I'm now seeing this error.  Trailer seems to be running ok, but I just wanted to report this:

```
CoreData: annotation:  Failed to load optimized model at path '/Applications/Trailer.app/Contents/Resources/Trailer.momd/Trailer 39.omo'
```
Environment:
- App Version: 1.6.17 (1497)
- MacOS: 10.15 (19A583)
- standard Github server

It seems like @-mentiones from closed / merged PRs are not coming to the app, while Github e-mail notifications are being sent in such cases. Is there a setting to enable that or it's not supported?
It's a tiny UX bug that I noticed some time ago but never opened an issue.

I am running v 1.6.17 on macOS 10.14.6.

Steps to reproduce:
1. Open Preferences
2. Open Repositories tab
3. Enter some text in the "Group" field for repository
4. Press "Return" key on the keyboard

Expected:
Get out of editing mode, same as most other apps e.g. renaming file in Finder.

Happened:
Adds a space after the group name. Screenshot:

![Screenshot 2019-09-11 at 10 11 22](https://user-images.githubusercontent.com/33914/64679705-8beb5600-d47c-11e9-83cf-05c540f26e26.png)

I'm trying to understand the sync behavior of Trailer. It seems like PRs created before the first sync but updated after are not pulled in. I cracked open the sqlitedb and saw that there's 100 PRs for a repo I'm in, which has at least an order of magnitude more open PRs than that. When I look at the Trailer logs, it seems that it calls the `/pulls` API but does not sort by `updated`, which means it sorts by `created` by default.

This raised some questions in my head:
- It almost seems like Trailer only updates PRs while they are open. If my PR gets a comment after it merges, would Trailer see that?
- Is there some truncation of list of all PRs to 100?
- If I stay offline for a long time (relative to how frequently the repo gets updated), is it possible to miss some PRs?

I tried reading some of the code, but my Swift reading ability is kinder-garden level at best. I'd appreciate any pointers to help my understanding!
The users I set to ignore are all bots. They post predictable responses to URLs, builds, etc. It'd be nice if the badge counts didn't include their comments, since I know for every new PR I create, a bot would add a comment.

Thanks!
Similar to how it's possible to ignore things by a certain user, would it make sense to ignore certain labels and not show them? Some labels may be used for automation and deployment, which may not be as useful when looking at PRs as a set of conversations to have with teammates.