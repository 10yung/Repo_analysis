what's the meaning of this project?

Recently i tried to include the native.h in multiple files in my project. It seems tha guard headers didnt their job, resulting compiling errors like below:

hlrfrwdr/httpserver.o: In function `native::base::_delete_handle(uv_handle_s*)':
/opt/node.native/./native/handle.h:71: multiple definition of`native::base::_delete_handle(uv_handle_s*)'
/tmp/cctxhz6O.o:/opt/node.native/./native/handle.h:71: first defined here

I managed to solve these errors by myself by defining such plain functions as  inline functions in order to be able to include the native, many times in the same project (since the guard headers -ifndef etc arent enough). 

My question is: this is the correct way for solving this? And if true, it would be perfect if you define these as inline these functions also in node.native project here in github.

The closest I've gotten is the header output (https://github.com/SamuelMarks/node.native/blob/master/routes.h#L54):

```
$ http localhost:8080/headers
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/json

{
    "headers": [
        {
            "Accept": "*/*"
        }, 
        {
            "Accept-Encoding": "gzip, deflate, compress"
        }, 
        {
            "Host": "localhost:8080"
        }, 
        {
            "User-Agent": "HTTPie/0.8.0"
        }
    ]
}
```

How do I get the HTTP verb?

Hello everyone!!

I was trying to compile the project but it shows an error that i don't know how to solve.  This is the error:

dani@dani-portatil:~/Documentos/node.native$ make
g++ -std=gnu++0x -g -O0 -Ilibuv/include -Ihttp-parser -I. -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -o webclient webclient.cpp libuv/libuv.a http-parser/http_parser.o -lrt -lm -lpthread
/tmp/ccouJW7h.o: In function `native::base::handle::close(std::function<void ()>)::{lambda(uv_handle_s*)#1}::operator void (*)(uv_handle_s*)() const':
/home/dani/Documentos/node.native/./native/handle.h:57: undefined reference to`native::base::handle::close(std::function<void ()>)::{lambda(uv_handle_s_)#1}::_FUN(uv_handle_s_)'
/tmp/ccouJW7h.o: In function `native::base::stream::write(std::string const&, std::function<void (native::error)>)::{lambda(uv_write_s*, int)#1}::operator void (*)(uv_write_s*, int)() const':
/home/dani/Documentos/node.native/./native/stream.h:89: undefined reference to`native::base::stream::write(std::string const&, std::function<void (native::error)>)::{lambda(uv_write_s_, int)#1}::_FUN(uv_write_s_, int)'
/tmp/ccouJW7h.o: In function `native::net::tcp::connect(std::string const&, int, std::function<void (native::error)>)::{lambda(uv_connect_s*, int)#1}::operator void (*)(uv_connect_s*, int)() const':
/home/dani/Documentos/node.native/./native/tcp.h:58: undefined reference to`native::net::tcp::connect(std::string const&, int, std::function<void (native::error)>)::{lambda(uv_connect_s_, int)#1}::_FUN(uv_connect_s_, int)'
collect2: error: ld returned 1 exit status
make: **\* [webclient] Error 1

what is happening?

Thanks in advance.
Daniel.

Is there currently a way to serve static files via http::response?

libuv is a great abstraction layer replacement for libevent; with a major feature being interoperability. Is there a reason we are using vanilla Makefiles?

I.e.: can we migrate from our vanilla Makefile to CMakeLists?

Thanks for your consideration

How do I setup a separate project that works with node.native (from git, not from install library locations)?

Here is what I have tried:

```
git clone https://github.com/d5/node.native.git
mkdir routing_tests && cd $_
```

Then I created [main.cpp](http://ideone.com/rUUZ20)  and CMakeLists.txt:

```
project(routing_tests)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
cmake_minimum_required(VERSION 2.8)
aux_source_directory(. SRC_LIST)
add_executable(${PROJECT_NAME} ${SRC_LIST})
include_directories(../node.native/ ../node.native/native)
include_directories(../node.native/libuv ../node.native/libuv/include ../node.native/http-parser)
```

But unfortunately I get these errors: [Qt Creator screenshot](http://i.imgur.com/wUrNAmM.png)

How do I fix this? - Also, are you planning on moving from vanilla Makefiles to CMake?

How do I work with URL routing in node.native?

E.g.: I want to expose /foo/ and /bar/ to echo different things.

I want to implement Keep-Alive support in node.native.

I can easily enough set a response to tell the client that the connection should be kept alive.

What I'm having a problem with is executing a callback when a second request comes from the client on the kept-alive connection.

In node.js and luvit, they have an on:data callback. I can't find this event in libuv, so I'm really asking you all if you know if node.js/luvit implement additional events beyond those which libuv provides.
