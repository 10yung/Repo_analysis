### Version
3.0.0-alpha.1

### Reproduction link
[ https://codesandbox.io/s/heuristic-germain-wfv1y?fontsize=14&hidenavigation=1&theme=dark]( https://codesandbox.io/s/heuristic-germain-wfv1y?fontsize=14&hidenavigation=1&theme=dark)



### Steps to reproduce
Module not found: Error: Can't resolve '//n.sinaimg.cn/sinacn20123/213/w2048h1365/20190919/6ded-iewtemz3421520.jpg' in '/root/web/src/site/renwu/vue'

ERROR in ./src/site/renwu/vue/leijun.vue?vue&type=template&id=149fc6f1&scoped=true&lang=pug (./node_modules/vue-loader/dist/templateLoader.js??ref--5!./node_modules/pug-plain-loader!./node_modules/vue-loader/dist??ref--17-0!./src/site/renwu/vue/leijun.vue?vue&type=template&id=149fc6f1&scoped=true&lang=pug)
Module not found: Error: Can't resolve '//n.sinaimg.cn/sinacn20123/213/w2048h1365/20190919/6ded-iewtemz3421520.jpg' in '/root/web/src/site/renwu/vue'
 @ ./src/site/renwu/vue/leijun.vue?vue&type=template&id=149fc6f1&scoped=true&lang=pug (./node_modules/vue-loader/dist/templateLoader.js??ref--5!./node_modules/pug-plain-loader!./node_modules/vue-loader/dist??ref--17-0!./src/site/renwu/vue/leijun.vue?vue&type=template&id=149fc6f1&scoped=true&lang=pug) 2:0-99 145:36-46
 @ ./src/site/renwu/vue/leijun.vue?vue&type=template&id=149fc6f1&scoped=true&lang=pug
 @ ./src/site/renwu/vue/leijun.vue
 @ ./src/site/renwu/vue lazy ^\.\/.*$ namespace object
 @ ./node_modules/coffee-loader!./node_modules/vue-loader/dist??ref--17-0!./src/site/renwu/vue/route.vue?vue&type=script&lang=coffee
 @ ./src/site/renwu/vue/route.vue?vue&type=script&lang=coffee
 @ ./src/site/renwu/vue/route.vue
 @ ./src/site/renwu/coffee/index.coffee

### What is expected?
not require

### What is actually happening?
require

---
maybe this file cause error ?

 compiler-sfc.cjs.js (/root/web/node_modules/@vue/compiler-sfc/dist/compiler-sfc.cjs.js)

<!-- generated by vue-issues. DO NOT REMOVE -->
### What problem does this feature solve?
That can do something after emit eventã€‚

### What does the proposed API look like?
```js
const loading = ref(false)
const onClick = async () =>  {
 // doSomething
  loading.value = false
  // emit event
  await Promise.all(emit('click'))
  // doSomething
  loading.value = false
}
```

<!-- generated by vue-issues. DO NOT REMOVE -->
Remove the repeat `key` in v-if when you set `key` property directly.

Template:
```html
<div>
  <div v-if="xxx" key="2"></div>
</div>
```
Before:
```js
import { openBlock, createVNode, createBlock, createCommentVNode } from "vue"

export function render() {
  const _ctx = this
  return (openBlock(), createBlock("div", null, [
    (openBlock(), (_ctx.xxx)
      ? createBlock("div", {
          // this key is redundant
          key: 0,
          key: "2"
        })
      : createCommentVNode("v-if", true))
  ]))
}
```
After:
```js
import { openBlock, createVNode, createBlock, createCommentVNode } from "vue"

export function render() {
  const _ctx = this
  return (openBlock(), createBlock("div", null, [
    (openBlock(), (_ctx.xxx)
      ? createBlock("div", { key: "2" })
      : createCommentVNode("v-if", true))
  ]))
}
```
Issue first reported in `vue-loader`: https://github.com/vuejs/vue-loader/issues/1632

Absolute asset URLs, such as those that start with a forward-slash `/` or are even `http(s)://` URLs are currently interpreted as relative URLs and their path is transformed into an `import` expression by the SFC compiler.

This PR adds a utility method `isRelativeUrl` and uses it to differentiate between URLs that need to be imported and thus transformed, and those that do not.

I can also imagine other names for the helper method, such as `requiresTransform`.

_I only started looking into the source yesterday, so if the solution presented in this PR does not match with how you would solve this, feel free to give pointers and close this._
We want to support `mixins/extends` options in TS.

Include changes:

- Return type of `defineComponent`: `{new(): ComponentPublicInstance}` -> `{new(): ComponentPublicInstance} & (ComponentOptionsWithoutProps| ComponentOptionsWithArrayProps| ComponentOptionsWithObjectProps)`
- Overloads `defineComponent` and `ComponentOptionsWithoutProps,ComponentOptionsWithArrayProps,ComponentOptionsWithObjectProps` and `ComponentOptionsBase, LegacyOptions `: add new type variable `Mixin` which should be defined by `defineComponent`
- Breaking changes about `h()`: split `h(type: ComponentOptionsWithoutProps|ComponentOptionsWithArrayProps)` because `ComponentOptionsWithArrayProps/ComponentOptionsWithObjectProps extends ComponentOptionsWithoutProps` will be `true`. If the `props` can not match the `ComponentOptionsWithArrayProps`, it will be match the `ComponentOptionsWithoutProps` cases with error type props.


### What problem does this feature solve?
I'm using @vue/reactivity as a low level data service, and there are some heavy computing case in my app. I want to manually check if a reactive object is being used in computed values, so I can do lazy computing when it is not.

### What does the proposed API look like?
export function isTracked(target) {
 return targetMap.has(target)
}

export function onTrack(target, callback) {
  // when a target is being tracked, call callback function.
}

<!-- generated by vue-issues. DO NOT REMOVE -->
This PR uses a few code and adds a simple congestion algorithm for better time schedulering.
### before
1. All tasks are executed in nextick. If there are time-consuming tasks, UI will be blocked.
2. If the lightweight task is blocked, it will cause CPU wastes.
### after
1. Add a very simple algorithm to calculate the blocking threshold. If there is a time-consuming task, it will not block continuously.
2. In most cases (no time-consuming tasks), it is unaffected.
3. For lightweight tasks, the CPU can be occupied continuously.
4. Noneed time slicing.

At present, this implementation is just a prototype. If it is worth adopting, I will continue to commit the code until tests passed and PR merged. Thank you!
This is a type I was really careful not to break anything, I hope I haven't missed anything.

Overall this shouldn't affect much, but it improves when using `Ref` on a generic function.

I'm porting my vue composables library to use the new `reactivity` and because of the nature of the library, my functions are quite generic, and ran into some issues with the typescript type checking.

It works using [@vue/vue-composition](https://github.com/vuejs/composition-api), but when I use `@vue/reactivity` it has some errors, and not really readable errors since the typescript type is quite weird to because of the recursive implementation.

[Full method working with plugin](https://github.com/pikax/vue-composable/blob/master/packages/core/src/promise/promise.ts#L64-L102)


Reproduction code 
```ts
const f = <T extends Promise<any>, TArgs extends Array<any>>(
  fn: (...args: TArgs) => T
) => {
  const t: Ref<T> = {} as any
  const a: TArgs = {} as any
  t.value = fn(...a) // doesn't work, because return value is not Ref<T>
  t.value = fn(...a) as UnwrapRef<T> // doesn't work with prev UnwrapRef but works with this PR
}
```

I don't believe with a recursive approach we will be able to fix this without a cast, because I've raised https://github.com/microsoft/TypeScript/issues/33942 some time ago,  but seems to be a design limitation so I don't expect it to change any time soon.


EDIT: Having issues with Portal and inferring the children on `h`

EDIT2: Still having issues with the portal seems to not be inferred, the issue being with `ref<VNodeChildren<TestNode, TestElement>>` be able to be converted to `RawChildren`  therefor not be able to match with the overload

```log
Argument of type 'UnwrappedArray<string | number | boolean | void | VNodeChildren<TestNode, TestElement> | VNode<TestNode, TestElement> | null>' is not assignable to parameter of type 'RawChildren'.
  Type 'UnwrappedArray<string | number | boolean | void | VNodeChildren<TestNode, TestElement> | VNode<TestNode, TestElement> | null>' is not assignable to type 'VNodeChildren<any, any>'.
    The types returned by 'pop()' are incompatible between these types.
      Type 'string | number | boolean | void | UnwrappedArray<string | number | boolean | void | VNodeChildren<TestNode, TestElement> | VNode<TestNode, TestElement> | null> | UnwrappedObject<...> | null | undefined' is not assignable to type 'string | number | boolean | void | VNodeChildren<any, any> | VNode<any, any> | null | undefined'.
        Type 'UnwrappedArray<string | number | boolean | void | VNodeChildren<TestNode, TestElement> | VNode<TestNode, TestElement> | null>' is not assignable to type 'string | number | boolean | void | VNodeChildren<any, any> | VNode<any, any> | null | undefined'.
          Type 'UnwrappedArray<string | number | boolean | void | VNodeChildren<TestNode, TestElement> | VNode<TestNode, TestElement> | null>' is not assignable to type 'VNodeChildren<any, any>'.
            The types returned by 'pop()' are incompatible between these types.
              Type 'string | number | boolean | void | UnwrappedArray<string | number | boolean | void | VNodeChildren<TestNode, TestElement> | VNode<TestNode, TestElement> | null> | UnwrappedObject<...> | null | undefined' is not assignable to type 'string | number | boolean | void | VNodeChildren<any, any> | VNode<any, any> | null | undefined'.
                Type 'UnwrappedArray<string | number | boolean | void | VNodeChildren<TestNode, TestElement> | VNode<TestNode, TestElement> | null>' is not assignable to type 'string | number | boolean | void | VNodeChildren<any, any> | VNode<any, any> | null | undefined'.
```

EDIT3: It can be fixed by casting to the correct type: 
```ts
h(Portal, { target }, children.value as VNodeChildren<TestNode, TestElement>)
```
### What problem does this feature solve?
https://github.com/vuejs/vue/issues/7178

It seems like this still needs to be implemented, in v3 because currently it passes `slots` as component's prop instead of its children.

https://vue-next-template-explorer.netlify.com/#%7B%22src%22%3A%22%3Cchild%20v-bind%3D%5C%22%7B%20slots%3A%20%24slots%20%7D%5C%22%3E%3C%2Fchild%3E%22%2C%22options%22%3A%7B%22mode%22%3A%22module%22%2C%22prefixIdentifiers%22%3Afalse%2C%22hoistStatic%22%3Atrue%2C%22cacheHandlers%22%3Atrue%2C%22scopeId%22%3Anull%7D%7D

### What does the proposed API look like?
```vue
<child v-bind="{ slots: $slots }"></child>
```


<!-- generated by vue-issues. DO NOT REMOVE -->