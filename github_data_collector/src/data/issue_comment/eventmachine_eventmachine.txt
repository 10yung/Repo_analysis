I'm using [Faye](https://faye.jcoglan.com/ruby/clients.html) to subscribe to a channel every time a user loads up a page. That means that `EM.run` is being called as many times as there are users opening the page. Is it safe or would it cause issues should as reaching a thread limit? (Not so familiar with this). 
This is strange, and I'm hoping I explain it sufficiently - but I've upgraded to ruby 2.7.0 and I'm seeing missing linefeeds in puts outputs from EM that's within a thread.

I did not see this problem when running in ruby 2.6.5's console output - it seems to be related to my move to 2.7.0.

I've simplified this to reproduce this as folllows.   If I run the following EM without being inside of a thread, then I get an OK output - example:

irb(main):042:1* EventMachine.run do
irb(main):043:1*   EM.add_periodic_timer(1) { puts "Tick ..." }
irb(main):044:1*
irb(main):045:2*   EM.add_timer(3) do
irb(main):046:2*     puts "I waited 3 seconds"
irb(main):047:2*     EM.stop_event_loop
irb(main):048:1*   end
irb(main):049:0> end
Tick ...
Tick ...
I waited 3 seconds
=> nil

Note all of the strings that are output from the puts commands within the EM loop are fully left-justified in the output.
But if I wrap this in a thread, the output lines appear to be missing the linefeed, but do have the CR - such that the successive puts strings are not left justified as they sequence, and build from the X-offset that ended the previous puts string output.

irb(main):001:1* Thread.new do
irb(main):002:2*   EventMachine.run do
irb(main):003:2*     EM.add_periodic_timer(1) { puts "Tick ..." }
irb(main):004:2*
irb(main):005:3*     EM.add_timer(3) do
irb(main):006:3*       puts "I waited 3 seconds"
irb(main):007:3*       EM.stop_event_loop
irb(main):008:2*     end
irb(main):009:1*   end
irb(main):010:0> end
=> #<Thread:0x000055cf1a8482c8 (irb):1 run>
irb(main):011:0> Tick ...
_________________________Tick ...
_______________________________ I waited 3 seconds


Is there something that's known to have changed that is causing this?
Can others reproduce this as well?
I can't tell is this is EM's or ruby's - so any help would really be appreciated.

I only see this from puts statements within the EM loop within a Thread.
If the wrapping Thread is not there, there's no issue.
If there's just a sequence of puts in a Thread and no EM loop, there's no issue.

It seems as if there's something about the combo of a Thread wrapping an EM loop that's making the underlying puts misbehave.

Thanks,
-Jim



Getting the following error using Guard:
`Unable to load the EventMachine C extension; To use the pure-ruby reactor, require 'em/pure_ruby'
16:41:38 - ERROR - Could not load 'guard/livereload' or find class Guard::Livereload
16:41:38 - ERROR - Error is: dlopen(/Users/joel/.asdf/installs/ruby/2.6.5/lib/ruby/gems/2.6.0/gems/eventmachine-1.2.7/lib/rubyeventmachine.bundle, 9): Library not loaded: /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib
> [#]   Referenced from: /Users/joel/.asdf/installs/ruby/2.6.5/lib/ruby/gems/2.6.0/gems/eventmachine-1.2.7/lib/rubyeventmachine.bundle
> [#]   Reason: image not found - /Users/joel/.asdf/installs/ruby/2.6.5/lib/ruby/gems/2.6.0/gems/eventmachine-1.2.7/lib/rubyeventmachine.bundle
16:41:38 - ERROR - /Users/joel/.asdf/installs/ruby/2.6.5/lib/ruby/gems/2.6.0/gems/eventmachine-1.2.7/lib/eventmachine.rb:8:in `require'
> [#] /Users/joel/.asdf/installs/ruby/2.6.5/lib/ruby/gems/2.6.0/gems/eventmachine-1.2.7/lib/eventmachine.rb:8:in `<top (required)>'`

Do I need to downgrade my openssl or is there another workaround?
You might want to check http://www.rubyeventmachine.com/ redirecting to a subpage of http://www.inbudapesthotels.com/

Looks like someone fiddled around with your domain and you want to remove the link from the project temporarily.
Is EventMachine usable with truffleruby?  Getting the following error: 
``` bash
#<Thread:0x2368@(irb):2 run> terminated with exception:
/usr/local/rvm/rubies/truffleruby-19.2.0.1/lib/truffle/truffle/cext.rb:1160:in `rb_exc_raise': eventmachine not initialized: evma_release_library (RuntimeError)
        from ruby.c:2089:in `rb_exc_raise'
        from /usr/local/rvm/gems/truffleruby-19.2.0.1/gems/eventmachine-1.3.0.dev.1/ext/cmain.cpp:41:in `ensure_eventmachine'
        from /usr/local/rvm/gems/truffleruby-19.2.0.1/gems/eventmachine-1.3.0.dev.1/ext/cmain.cpp:71:in `evma_release_library'
        from /usr/local/rvm/gems/truffleruby-19.2.0.1/gems/eventmachine-1.3.0.dev.1/ext/rubymain.cpp:884:in `t_release_machine'
        from /usr/local/rvm/rubies/truffleruby-19.2.0.1/lib/truffle/truffle/cext_ruby.rb:37:in `release_machine'                
        from /usr/local/rvm/gems/truffleruby-19.2.0.1/gems/eventmachine-1.3.0.dev.1/lib/eventmachine.rb:204:in `run'            
        from (irb):2:in `block in irb_binding'
```
A simple UDP example is test here, and I can find many code snippets are similar with it:
```ruby
require 'em/pure_ruby'

EM.run do
  puts "EM.run"
  EM.open_datagram_socket '0.0.0.0', 9100 do |server|
    puts "socket open"
    def server.receive_data(data)
      puts "data received: #{data}"
      send_data("sending back: #{data}")
    end
  end
end
```
However, after receive just one packet, it will raise an exception:
```console
EM.run
socket open
data received: hi
Traceback (most recent call last):
        13: from try2.rb:3:in `<main>'
        12: from C:/Ruby25/lib/ruby/gems/2.5.0/gems/eventmachine-1.2.7-x86-mingw32/lib/eventmachine.rb:195:in `run'
        11: from C:/Ruby25/lib/ruby/gems/2.5.0/gems/eventmachine-1.2.7-x86-mingw32/lib/em/pure_ruby.rb:144:in `run_machine'
        10: from C:/Ruby25/lib/ruby/gems/2.5.0/gems/eventmachine-1.2.7-x86-mingw32/lib/em/pure_ruby.rb:547:in `run'
         9: from C:/Ruby25/lib/ruby/gems/2.5.0/gems/eventmachine-1.2.7-x86-mingw32/lib/em/pure_ruby.rb:547:in `loop'
         8: from C:/Ruby25/lib/ruby/gems/2.5.0/gems/eventmachine-1.2.7-x86-mingw32/lib/em/pure_ruby.rb:553:in `block in run'
         7: from C:/Ruby25/lib/ruby/gems/2.5.0/gems/eventmachine-1.2.7-x86-mingw32/lib/em/pure_ruby.rb:598:in `crank_selectables'
         6: from C:/Ruby25/lib/ruby/gems/2.5.0/gems/eventmachine-1.2.7-x86-mingw32/lib/em/pure_ruby.rb:598:in `each'
         5: from C:/Ruby25/lib/ruby/gems/2.5.0/gems/eventmachine-1.2.7-x86-mingw32/lib/em/pure_ruby.rb:598:in `block in crank_selectables'
         4: from C:/Ruby25/lib/ruby/gems/2.5.0/gems/eventmachine-1.2.7-x86-mingw32/lib/em/pure_ruby.rb:1260:in `eventable_read'
         3: from C:/Ruby25/lib/ruby/gems/2.5.0/gems/eventmachine-1.2.7-x86-mingw32/lib/em/pure_ruby.rb:1260:in `times'
         2: from C:/Ruby25/lib/ruby/gems/2.5.0/gems/eventmachine-1.2.7-x86-mingw32/lib/em/pure_ruby.rb:1261:in `block in eventable_read'
         1: from C:/Ruby25/lib/ruby/2.5.0/socket.rb:536:in `recvfrom_nonblock'
C:/Ruby25/lib/ruby/2.5.0/socket.rb:536:in `__recvfrom_nonblock': A non-blocking socket operation could not be completed immediately. - recvfrom(2) would block (IO::EWOULDBLOCKWaitReadable)
```
Version:
  - eventmachine-1.2.7-x86-mingw32
  - Ruby-2.5.7-x86-Windows

Seems that UDP in `eventmachine` use nonblock API.


Three  commits:

1. 'add GitHub Actions' - Add the yml file, all OS's are in one workflow file.

2. 'Darwin updates' - There are Darwin issues.  `TestIPv4#test_ipv4_udp_local_server` errors, and `TestPause#test_pause_resume` fails intermittently.  For a few tests I adjusted the timing, and they seem stable.  I added a `darwin?` helper method.

3. Windows build tools have been updating a lot lately, and a small change was needed for the `extconf.rb` files.  Related to libssp / Stack Smashing Protector...

As to the Darwin failures/errors, please have a look at them.
At present, GitHub Actions allows testing on Ubuntu 18.04, macOS, & Windows for Ruby versions 2.4 thru 2.6.  Using Ubuntu 16.04, Ruby 2.3 can be tested.

Ubuntu & Windows are passing, macOS seems to have issues, some time related.

Interested?  See https://github.com/MSP-Greg/eventmachine/runs/218249167
Since ruby/ruby@5c7c2d9951f2512ca10ea38fecc48d8ac67502e6 installation fails ([log](https://gist.github.com/utilum/fc33f3aba4c4e027f3a02dc749785acd)).
