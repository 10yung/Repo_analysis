This PR is part of  issue #340 

Following links fixed:

[✖] Cryptographic_Storage_Cheat_Sheet.html#rule---use-cryptographically-secure-pseudo-random-number-generators-csprng  → Status: 404
> Typo in url changes .html to .md

[✖] http://blog.spiderlabs.com/2012/03/modsecurity-advanced-topic-of-the-week-automated-virtual-patching-using-owasp-zed-attack-proxy.html → Status: 404
> Replaced with https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/modsecurity-advanced-topic-of-the-week-automated-virtual-patching-using-owasp-zed-attack-proxy

[✖] https://www.ncsc.nl/english/security → Status: 404
> Replaced with https://english.ncsc.nl/contact/reporting-a-vulnerability-cvd

[✖] http://blog.cipher.com/the-6-primary-phases-of-penetration-/  → Status: 404
> Replaced with https://cipher.com/blog/a-complete-guide-to-the-phases-of-penetration-testing/

[✖] http://www.ssllabs.com/projects/best-practises/ → Status: 404
> Replaced with https://www.ssllabs.com/projects/best-practices/index.html

Please make sure that for your contribution:

- [x] All the markdown files do not raise any validation policy violation, see the [policy](https://github.com/OWASP/CheatSheetSeries#editor--validation-policy).
- [x] All the markdown files follow these [format rules](https://github.com/OWASP/CheatSheetSeries#conversion-rules).
- [x] All your assets are stored in the **assets** folder.
- [x] All the images used are in the **PNG** format.
- [x] Any references to websites have been formatted as [TEXT](URL)
- [x] You verified/tested the effectiveness of your contribution (e.g., the defensive code proposed is really effective remediation? Please verify it works!).
- [x] The CI build of your PR pass

**What is wrong?**
We are dependent on 3 CI/CD flows. Travis, Circle, and GH actions.

**What should be done?**
Merge the required tasks and set them in GH actions.

- [x] Old issues + PRs migration to GH-actions.
- [x] Website publishing migration to GH-actions.
- [x] TravisCI clean up. GH-actions markdown lint already set-up.
- [ ] markdown link check GH-actions
- [ ] markdown lint GH-actions
- [ ] gh-pages implemention in GH-actions
This PR covers issue #321 .

This PR is a draft for CSRF CS re-write and also covers the issues #287 and #195

- [x] In case of a new Cheat Sheet, you have used the [Cheat Sheet template](https://github.com/OWASP/CheatSheetSeries/blob/master/templates/New_CheatSheet.md).
- [x] All the markdown files do not raise any validation policy violation, see the [policy](https://github.com/OWASP/CheatSheetSeries#editor--validation-policy).
- [x] All the markdown files follow these [format rules](https://github.com/OWASP/CheatSheetSeries#conversion-rules).
- [x] All your assets are stored in the **assets** folder.
- [x] All the images used are in the **PNG** format.
- [x] Any references to websites have been formatted as [TEXT](URL)
- [x] You verified/tested the effectiveness of your contribution (e.g., the defensive code proposed is really an effective remediation? Please verify it works!).
- [x] The CI build of your PR pass, see the build status [here](https://travis-ci.org/OWASP/CheatSheetSeries/pull_requests).


Various updates to the structure and contents of the cryptographic storage CS, as per discussion in #324  and other known issues with the CS.

Currently draft - do not merge.
Hi guys, how are you :D. I would like to add some opinions on this cheat-sheet that are confusing to read and can confuse non-expert developers.

## What is missing or needs to be updated?
**"Architectural Decision" section**  (I think that this section could confuse non-experienced developers)

- Mentioning RSA (and why not ECC) as the only asymmetric scheme (NOT only used for encryption, as mentioned on this cheat sheet) could confuse a reader that "storage encryption with asymmetric schemes is recommended". 
- Mentioning DH as key exchange scheme on this context is confusing too. 
- HMAC is not the only way to guaranty integrity, asymmetric schemes or symmetric authenticated modes are capable of this too. 
- I would divide the password hashing depending on the hardness, is useful if your threat model says that you need to be more resistant to ASIC's 
    -Argon2 or scrypt (CPU and RAM hard)
    - bcrypt or PBKDF2 (CPU hard only)

**Secure Cryptographic Storage Design**
Is confusing starting to read about digital certificates, that they never has been introduced to the audience and they are mainly used to secure information at transit, not at storage. 

**Rule - Use strong approved Authenticated Encryption**
- As a developer I would ask, approved by who? Who decide what type of encryption to use? And, are we talking about symmetric or asymmetric? 
- Related to the recommendation: "E.g. CCM or GCM are approved Authenticated Encryption modes based on AES algorithm (EAX missing)" This is not true, GCM or CCM are modes of operation that could be implemented on any block cipher by definition, not just related to AES construction.

**Rule - Use strong approved cryptographic algorithms**
You say: "Avoid hashing for password storage, instead use Argon2, PBKDF2, bcrypt or scrypt." You say on the first section that this functions are hash functions, and here you say they are not. On the other hand, we can discuss if Argon2 or the other constructions are not hash based functions :D.

**Rule - Use cryptographically secure pseudo random number generators (CSPRNG)**

When we recommend: "Ensure that random algorithms are seeded with sufficient entropy", this is quite complex to understand and actually achieve. If you speak about this topic you must speak about /dev/random vs /dev/urandom, entropy pool made by physical events or processors specific instructions (Ej. RDRAND) .

**Rule - Ensure that any secret key is protected from unauthorized access**

We could add on this topic the concept of key management and a small mention to the Kerckhoffs principle. Maybe mention the importance of HSM or HSM alike service to store this keys. 

**Rule - Define a key lifecycle**
Agree that crypto-periods are important and must be considered always. Maybe here we can mention something about strategies that need to be implemented in order to re-key all previously encrypted data-sets. 

**Rule - Store unencrypted keys away from the encrypted data**
Unencrypted keys should NEVER be stored unencrypted, here is when HSM or KEK schemes make sense!

Sorry for the long issue! I had a little time on my weekend and I would like to help as much as I could :D.

Tell me what you think!
<!--- Provide a description of the problem with the current Cheat Sheet -->
Following some research on XXE, I came on the following [SO question](https://stackoverflow.com/questions/50386159/resolving-xxe-for-oracle-domparser), and I can see that the XXE CS doesn't cater for Oracle DOM Parser

## How should this be resolved?
We need to validate the need for this to be added or not to the CS.
Hello,
I'm working at Sonarsource and we try to improve our products by raising awareness for developers when they are using libraries in such a way that could make their code vulnerable.

## What is missing or needs to be updated?
In the section C/C++, subsection concerning libxerces-c, about the use of `XercesDOMParser`, it is written that in order to prevent XXE, `setCreateEntityReferenceNodes` should be called with `false` argument.
Correct me if I'm wrong but it seems to me that creating entity reference nodes will prevent the entity to be expanded and therefore will prevent XXE, no?

## How should this be resolved?
Just replacing
`parser->setCreateEntityReferenceNodes(false);`
by
`parser->setCreateEntityReferenceNodes(true);`

Draft PR that takes care of OAuth concepts and best practices, as per #67 #132 

This PR will hold discussions and CS structure, till it is out of draft, where syntatic review will then be conducted.

**What will this CS bring to the reader?**
- OAuth Introduction
- Best practices and security considerations (quick tips)
- Concepts relating to OAuth and how to properly configure and use
- A point of reference for OAuth RFCs to merge and be readable for developers in a short form
Check out the [Unity SSDLC](https://github.com/UnityTech/unity-ssdlc) and consider which best practices can be added to our CSs and which need to be added as new CSs.