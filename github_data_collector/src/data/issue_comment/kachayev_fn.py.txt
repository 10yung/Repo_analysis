Closes #84


There is a small typo in fn/immutable/heap.py.
Should read `pairing` rather than `pairingi`.


nested options can arise in reasonable APIs.

Collapsing options can be done with a separately defined `join` operation.
Could fn.py do something like this functional concatenation?
def f1(a):
     return a
def f2(b):
     return b

def f3(a, b):
     return a+b

([f1, f2] >> f3) (3, 2) = 5
Hi, I wrote a little trampoline decorator for (mutually) recursive functions (using generators). I was going to upload to pypi but I saw your recur.tco is similar, so probably better to contribute here if you're interested. Thanks.
Hi,

I'm not sure whether this is supposed to work:

``` python
from fn import _ as X
X.endswith('tif')('image.tif')
```

This prints "False".

Looking at the tests I see this form:

``` python
from fn import _ as X
X.call('endswith', '.tif')('image.tif')
```

This correctly evaluates to True, but is significantly uglier. What's happening in the first form?

`is_string_or_bytes` checks for `str` instances which is correct only for python3
while in python2 the right type is `basestring`.

Fixes #73 

Bug demo in the build after adding tests.

Has anyone considered starting an active fork of this repo? I see it has been forked a number of times, but no forks are being actively maintained. 

I don't feel qualified to maintain a project like this, but it is such a great library I don't want it to die! If no one else steps up within a month I'll create a fork and pledge to provide active updates. The fork will have to be deployed on PyPi as well.

I tried this code for function currying

``` python
from fn.func import curried
@curried
def sum5(a, b, c, d, e):
    return a + b + c + d + e

sum5(1)(2)(3)(4)(5)
15
sum5(1, 2, 3)(4, 5)
15
```

but when I call the function I get the following error

> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
>   File "fn/func.py", line 83, in  _curried
>     return curried(partial(func, _args, *_kwargs))
>   File "fn/func.py", line 69, in curried
>     @wraps(func)
>   File "/usr/lib/python2.7/functools.py", line 33, in update_wrapper
>     setattr(wrapper, attr, getattr(wrapped, attr))
> AttributeError: 'functools.partial' object has no attribute '**module**'

Following on from pull request 74. I have closed 74 and made this new pull request

I have limited the my pep8'ing to just the func.py file, where I have made 2 separate commits. One to fix the white spacing and one to fix the unused import. (Purely to appease my OCD) 

I have made a new unit test to show exactly which bit of the curried functions where not be wrapped correct by the functools when creating a decorator.

I have applied the same bugfix as before, to use the functools to fix this problem.

The test run.

I hope that covers everything from your feedback.

Thank you.
