Using compiler args, users can configure a placeholder element for paths like:

- placeholder `"deepLink.uriPathPlaceholder": <placeholder>`

with paths:

- `https://www.example.com/<placeholder>/`
- `http://www.example.com/foo/<placeholder>/boop/{param}`

and then an element to substitute for the placeholder:

- `"deepLink.uriPathPlaceholderValue": "beep"`

Resulting in:

- `DeepLinkEntry("https://www.example.com/beep" //...`
- `DeepLinkEntry("http://www.example.com/foo/beep/boop/{param}" //...`


Fairly small change, but potentially even more digestible starting at this [JavaDoc](https://github.com/airbnb/DeepLinkDispatch/compare/configurable-path-placeholders-and-substitutions?expand=1#diff-5b5423e90a1485db2d56cdc814c7fa9bR87)

@rossbacher @BenSchwab 
Hi, I have been facing this issue, with the following log

> Fatal Exception: java.lang.RuntimeException: **Unable to stop activity {app.appId/packagename.DeepLinkDispatchActivity}: java.lang.IllegalStateException: You need to use a Theme.AppCompat theme (or descendant) with this activity.**
       at android.app.ActivityThread.callActivityOnStop(ActivityThread.java:4862)
       at android.app.ActivityThread.performStopActivityInner(ActivityThread.java:4832)
       at android.app.ActivityThread.handleStopActivity(ActivityThread.java:4907)
       at android.app.servertransaction.TransactionExecutor.performLifecycleSequence(TransactionExecutor.java:192)
       at android.app.servertransaction.TransactionExecutor.cycleToPath(TransactionExecutor.java:165)
       at android.app.servertransaction.TransactionExecutor.executeLifecycleState(TransactionExecutor.java:142)
       at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:70)
       at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2199)
       at android.os.Handler.dispatchMessage(Handler.java:112)
       at android.os.Looper.loop(Looper.java:216)
       at android.app.ActivityThread.main(ActivityThread.java:7625)
       at java.lang.reflect.Method.invoke(Method.java)
       at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:524)
       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:987)>

Can someone help me with this, Please see the code in my manifest 
 ```
<activity
            android:name=".deeplink.DeepLinkDispatchActivity"
            android:launchMode="singleTask"
            android:theme="@android:style/Theme.NoDisplay">
            <intent-filter android:autoVerify="true">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />

                <data
                    android:host="@string/WEB_DOMAIN"
                    android:scheme="https" />
            </intent-filter>
            <intent-filter android:autoVerify="true">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />

                <data
                    android:host="@string/WWW_WEB_DOMAIN"
                    android:scheme="https" />
            </intent-filter>

            <intent-filter android:autoVerify="true">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />

                <data
                    android:host="@string/HOUSIE_HOST"
                    android:scheme="https" />
            </intent-filter>

            <intent-filter android:autoVerify="true">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />

                <data
                    android:host="@string/HOUSIE_HOST"
                    android:scheme="@string/SCHEMA" />
            </intent-filter>

            <intent-filter android:autoVerify="true">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />

                <data
                    android:host="@string/WEB_DOMAIN"
                    android:scheme="@string/SCHEMA" />
            </intent-filter>
            <intent-filter android:autoVerify="true">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />

                <data
                    android:host="@string/WWW_WEB_DOMAIN"
                    android:scheme="@string/SCHEMA" />
            </intent-filter>
        </activity>
```

Is there anything special about doing `startActivityForResult` in `DeepLinkActivity`? For some reason, `onActivityResult` is never being called. 

To provide some context, the usecase I'm trying to solve is:
1. Catch the deeplink Uri
2. Start authentication flow with `startActivityForResult`
3. Come back to `onActivityResult` and dispatch the original Uri.
Let say there are multiple external links that resolve to the same app link.
Ex:
`www.foo.com/home -> app://home`
`www.foo.com/dashboard -> app://home`

Yes, we can list them all in `@DeepLink` annotation but in case we have some Uri pattern matching logic in the activity, we'd need to parse all of them. It would be much easier to just rethrow the app link, so it becomes a single source of truth, without `www.foo.com/home` even hitting the activity. Is there elegant way to declare such mapping? So far I can only think of custom handling in `DeepLinkActivity`.
Does DLD have guarantees to prevent registering duplicate `DeepLinkResult`s in its app-wide registry of deep links?

For context, see @rossbacher and my discussion in this [comment](https://github.com/airbnb/DeepLinkDispatch/pull/260/files/7085625781a2b64e8b1c429e96d40d7aa265bf5f#r332197952).
Hi,
I have an issue with an url starting with {param}-

For example : https://domain.app/7-something
I can't catch it with @DeepLink("https://domain.app/{id}-something")

If I change the URL to:
https://domain.app/7/something
I can catch it with @DeepLink("https://domain.app/{id}/something")

Why is that ?

Theo
If I don't check intent key `DeepLink.IS_DEEP_LINK`, how can I safe start a deep link url come from an external app?

```
public class TodoDetailActivity extend Activity {
    private static final String KEY_ID = "id";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // I Can't get `17` from url `todoapp://todos/17`, because the value is a String
        long id = getIntent().getLong(KEY_ID);
    }

    public static Intent actionSeeDetail(Context context, long id) {
        Intent intent = new Intent(context, TodoDetailActivity.class);
        intent.putExtra(KEY_ID, id);  // value type: long
        return intent;
    }

    @AppLink("todos/{id}")
    public static Intent intentForLink(Context context, Bundle extras) {
        return actionSeeDetail(context, safeParseLong(extras.getString("id")));
    }
}
```

How can I prevent `DeepLinkDelegate` override the key `id` to a `String` value?

I have a use case in which I have a url with a special character in its path (something like https://host.com/#/path/{path_id} ). Now if I declare a url with something like this, https://host.com/#/path/{path_id} with @DeepLink annotation , the everything after # is regexed into "$", hence i am not able to separate out the path_id from it. Therefore, it is defeating the entire purpose of using this library as then i have to manually split the url and find out the path id. I suggest that there should be a support to URL encode such urls as well , so that these special charachters ( like "#" in my case) gets removed . 
I'm not sure if this is valid UseCase.  But I essentially want to be able to specify which classes a deeplink module included based on certain runtime configurations(RemoteConfigs).Since the DeeplinkHandlers are picked up per module and the DeeplinkModuleLoader is generated, is there a way I can have swap out `DeeplinkModuleLoaders`(If I can specify which classes to use) to be used