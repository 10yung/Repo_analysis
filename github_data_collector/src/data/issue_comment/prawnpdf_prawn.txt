Starting a new issue for visibility, but this 10 year old issue is also relevant: https://github.com/prawnpdf/prawn/issues/94

I'm using Open Sans from the google font website.

Attached sample PDF. It opens fine in Chrome, Mac Preview, but will not open in Adobe Acrobat (latest mac version)

When opening, the error is: "Cannot extract the embedded font '9ab1c0+OpenSans-Bold'. Some characters may not display or print correctly."

Relevant code from installing custom TTF font:

```
    font_families.update('Open Sans' => {
      normal: Rails.root.join('app', 'fonts', 'OpenSans-Regular.ttf').to_s,
      bold: Rails.root.join('app', 'fonts', 'OpenSans-Bold.ttf').to_s,
      italic: Rails.root.join('app', 'fonts', 'OpenSans-Italic.ttf').to_s,
      bold_italic: Rails.root.join('app', 'fonts', 'OpenSans-BoldItalic.ttf').to_s
    })
    font 'Open Sans', style: :normal
```

Honestly I would be fine using the default system font and not bothering with embedded TTF fonts, but then I lose portability and UTF-8 support. Any ideas?

Environment
Ruby 2.6.5
[Christy Sheppard (1).pdf](https://github.com/prawnpdf/prawn/files/4055647/Christy.Sheppard.1.pdf)


`text_box string1, at: [80, 470] `
`text_box string2, at: [83, 460]`

I have two text boxes like above from top to bottom. I would like to make the boxes dynamic so that when string1 increases it does not overlap string2

Can somebody help me how to do this ?
The font metric cache doesn't work properly in Ruby 2.7. It's not properly considering the font size when resolving the string width, which can lead to incorrect results if the same string with a different size had previously been cached.

This seems to be due to a change in how Ruby uses a Struct for a hash key. It's not calling `#hash` on each property. And since the Font object is mutable, two different font sizes can end up resolving to the same key.

A quick fix is to invoke `#hash` on the font when initializing the CacheEntry:

```rb
CacheEntry.new f.hash, options, encoded_string
```

I'm having a hard time reproducing outside of the application because it highly depends on the call order. But the main issue is that the font size of a font can change, which in turn changes the key in the hash. There's a note in the code that defining a hash method on Font fixes the issue, but that assumption doesn't seem to hold true anymore.
I am using text_box as it allows me to define a box which the text resides in and will never escape from. I also want to change the color of the font. However, the color option is not supported and I have no idea how I would be able to change the color while using text_box. The documentation does not provide a solution to this problem.

I would recommend either to enhance the documentation to explain, how coloring of the text can be achieved or add support for that option to that method.
I'm trying to generate a PDF containing a signed link. The signature strings contains characters that need to be URL encoded for use in the query parameters, e.g. "wJ7OAi7u3WSJtzEq0b+xaoEG9yY=". So my entire (encoded) link should be something like:
`https://www.google.com?signature=wJ7OAi7u3WSJtzEq0b%2BxaoEG9yY%3D` (non-sense link of course, just for illustration purposes).

Now, if I render this link using `text` with `inline_format` the resulting link will have the percent-characters in the already encoded string encoded again, resulting in this invalid link:
`https://www.google.com?signature=wJ7OAi7u3WSJtzEq0b%252BxaoEG9yY%253D`

However, if I pass the un-encoded URL, i.e. `https://www.google.com?signature=wJ7OAi7u3WSJtzEq0b+xaoEG9yY=`, no URL-escaping is happening at all, which also gives me a broken link, because the `+` is interpreted as a space.

Here's some sample code to reproduce the behaviour:
```ruby
require 'cgi'
require 'prawn'

Prawn::Document.generate("url_escaped.pdf") do
  signature = CGI.escape("wJ7OAi7u3WSJtzEq0b+xaoEG9yY=")
  text("<u><color rgb=\"#78c8fa\">\
            <link href=\"https://www.google.com?signature=#{signature}\">Link</link>\
          </color></u>", inline_format: true)
end

Prawn::Document.generate("url_unescaped.pdf") do
  signature = "wJ7OAi7u3WSJtzEq0b+xaoEG9yY="
  text("<u><color rgb=\"#78c8fa\">\
            <link href=\"https://www.google.com?signature=#{signature}\">Link</link>\
          </color></u>", inline_format: true)
end
```

Why is the %-character seemingly escaped by prawn, but nothing else? Is this a legit bug or am I not using this method correctly?
There are at least some changes in master since the release of v2.2.2 in March 2017. 

It's hard to say exactly how many, because there appears to be no tag in the repo for 2.2.2 to compare to master. 

But one change I noticed is that 2.2.2 still expresses a dependency on `pdf-core "~> 0.7.0"`, so won't use the latest pdf-core release 0.8.1.

I came here to report that, but then noticed it was [already fixed in master](https://github.com/prawnpdf/prawn/blob/9cf0955ce93a948185dd7f19911fef2b48ac094f/prawn.gemspec#L39).

Would it be possible to do a new prawn release, so I can update to latest pdf-core as well? (Ideally with a git tag for version for new release!) 
To better discuss #1135
We use different background images for different pages, adding it with a repeater this way:
```
repeat(->(pg) { pg >= 2 }) do
      blend_mode(:Overlay) do
        load_background_image
      end
    end
```
We need to do it in Overlay mode, because the text is rendered behind the image. The overlay affects the rendering so we want to get rid of it.

I think what is happening is that the repeat block (or stamp) is called after the page has been rendered, not before.
When there's not enough height for a line of text on the current page, Prawn advances that line to the next page (handled by `Prawn::Text::Formatted::Wrap`). When this happens, the soft hyphens in that line are stripped. As a result, soft hyphens are absent when the line is rendered. This affects hyphenation. The soft hyphens should be preserved.
Hi, I'm running into some issues trying to get Prawn to render Nepali text, and I'm not sure where the issue might be, any help would be appreciated.

Using Prawn 2.2.2

```
pdf = Prawn::Document.new
pdf.font "lib/TimesNewRoman.ttf"
pdf.font_families.update({'MiedingerBook' => {
  normal: "lib/MiedingerBook.ttf" # https://github.com/CoughDrop/obf/blob/master/lib/MiedingerBook.ttf
}})
pdf.fallback_fonts = ['MiedingerBook']
pdf.text_box "भन्नुहोस्"
pdf.render_file("out/prawn.pdf")
```

When I run this I get:

```
Traceback (most recent call last):
       16: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/text/box.rb:134:in `render'
       15: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/text/formatted/box.rb:212:in `render'
       14: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/font.rb:215:in `save_font'
       13: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/text/formatted/box.rb:213:in `block in render'
       12: from /Users/me/.rvm/gems/ruby-2.6.1/gems/pdf-core-0.7.0/lib/pdf/core/text.rb:214:in `character_spacing'
       11: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/text/formatted/box.rb:214:in `block (2 levels) in render'
       10: from /Users/me/.rvm/gems/ruby-2.6.1/gems/pdf-core-0.7.0/lib/pdf/core/text.rb:190:in `text_rendering_mode'
        9: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/text/formatted/box.rb:219:in `block (3 levels) in render'
        8: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/font.rb:101:in `font_size'
        7: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/text/formatted/box.rb:226:in `block (4 levels) in render'
        6: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/text/formatted/wrap.rb:53:in `wrap'
        5: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/text/formatted/line_wrap.rb:47:in `wrap_line'
        4: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/text/formatted/line_wrap.rb:77:in `apply_font_settings_and_add_fragment_to_line'
        3: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/text/formatted/arranger.rb:166:in `apply_font_settings'
        2: from /Users/me/.rvm/gems/ruby-2.6.1/gems/pdf-core-0.7.0/lib/pdf/core/text.rb:214:in `character_spacing'
        1: from /Users/me/.rvm/gems/ruby-2.6.1/gems/prawn-2.2.2/lib/prawn/text/formatted/arranger.rb:168:in `block in apply_font_settings'
RuntimeError (Bad font family)
```

However if I set the font explicitly instead of using the fallback then the error goes away. I have tested this with multiple Nepali fonts and gotten the same result. However, the issue doesn't come up when using a Thai font as a fallback for Thai strings.