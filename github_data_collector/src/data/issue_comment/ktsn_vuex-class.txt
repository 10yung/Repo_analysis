It will be useful to use your library with es modules in browser.
<!--
PLEASE READ THE ISSUE REPORTING GUIDELINE 
BEFORE SUBMITTING YOUR ISSUE

# Issue Reporting Guideline

## Questions
For general usage question which is not related to vuex-class
should be posted to StackOverflow or other Q&A forum. 
Such questions will be closed without an answer.

## Bug Reports
Please make sure to provide minimal and self-contained reproduction 
when you report a bug. Otherwise the issue will be closed immediately.
-->

I am trying to use `@State` in my vue component, but Vetur gives a hint: `Member 'XXX' implicitly has an 'any' type.Vetur(7008)`.

![image](https://user-images.githubusercontent.com/32949884/69401256-8d17e980-0d2f-11ea-9c9d-500278f36f8d.png)

code like this:

``` js
// store.ts
state: {
    switchFlg: false,
},

// my component
@State private switchFlg;
```

I know it needs declaration type, and I can fix it by `@State switchFlg!: boolean;`. But I think it's too troublesome, I have to write the declaration type twice, or even more.

Is there a better solution?

Currently, the definition is:
```typescript
export type Getter<S, R> = (state: S, getters: any, rootState: R, rootGetters: any) => any;
```

every parameter other than `state: S` is actually optional, and should be declared as such. 

Right now this is keeping me from actually using these types, because using them would make my unit test code messy with extraneous null-valued params.

Also, could you provide some guidance on when these typings are actually useful? As far as I know, these classes are never used directly, but rather by Vuex internals.
This PR adds some generic types to enhance `StateTransformer` and `namespace` for better type inference.
Is it possible to setup @Getter to get the following output?

```javascript
computed: {
    collectionCategoryObjects() {
         return this.$store.getters["entities/collections/getCollectionCategoryObjects"]({
		department: this.department,
		collectionTitle: this.collectionTitle
	})
    }
}
```
How can I create @Getter in a compact format?
Is there a way to setup a getter that is less verbose than this?

```javascript
const Ncollection = namespace('entities/collections')
// ... class .. {
@Ncollection@Getter("getCollectionCategoryObjects") getterCollection: any
get Collection() {
	return this.getterCollection({
		department: this.department,
		collectionTitle: this.collectionTitle
	})
}
```

Hey, I have seen recommendations to use this package. I'm thinking If there is a comparison between this/style and the vanilla style it will help me decide on whether I should adopt this project.
I would like to define the types of mutations as symbol but @Mutation supports just string as argument, is it possible to add support for symbol?
<!--
PLEASE READ THE ISSUE REPORTING GUIDELINE 
BEFORE SUBMITTING YOUR ISSUE

# Issue Reporting Guideline

## Questions
For general usage question which is not related to vuex-class
should be posted to StackOverflow or other Q&A forum. 
Such questions will be closed without an answer.

## Bug Reports
Please make sure to provide minimal and self-contained reproduction 
when you report a bug. Otherwise the issue will be closed immediately.
-->

When combined with a dynamic store registration as described by the vuex docs, the decorators fail as they try use the store before it exists.
## Proposed changes

- Explain how to access to a flat state
- Explain how to access to a nested state

##  Reasons

- Understand more quickly how to use the library

## Issues
Fixes #24 and #28
I am trying to bind a checkbox to my Vuex Store.  My understanding is that I need to use v-model:-

`<b-form-checkbox id="onlyMineFilterCheckbox" v-model="onlyMineFilter">Show only Mine</b-form-checkbox>`

To do the binding, I need to create a computed property on my component class.  I can either do this...
```
export default class MyView extends Vue {
  @Mutation updateOnlyMineFilter;
  @State(state => state.onlyMineFilter) onlyMineFilterState: boolean;
  get onlyMineFilter() {
    return this.onlyMineFilterState;
  }
  set onlyMineFilter(value: boolean) {
    this.updateOnlyMineFilter(value);
  }
```

or, this ..
```
export default class MyView extends Vue {
  $store: any;
  get onlyMineFilter() {
    return this.$store.state.onlyMineFilter;
  }
  set onlyMineFilter(value: boolean) {
    this.$store.commit('updateOnlyMineFilter', value);
  }
```

The first option uses the vuex-class annotations which is consistent with the rest of my component, but it is verbose and the state/mutation members are only used once.  The second option is less verbose but forces me to use $store directly, with the declaration of $store just to fool typescript which I don't like.

What would be best, I think would be if the state accessor and the mutation could be combined into a single annotation... something like this...

```
@Computed(state => state.onlyMineFilter, 'updateOnlyMineFilter') onlyMineFilter: boolean;
```

What do we think?   I am happy to attempt the implementation if we think it is a good design.
