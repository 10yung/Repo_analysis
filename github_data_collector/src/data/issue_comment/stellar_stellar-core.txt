Main issue that I've encountered while running network simulations is our logs being too verbose but not very detailed at the same time. This PR attempts to make a few improvements (such as tracking life cycle of a txset, and consolidating info that used to take multiple logs in different places into a single log entry).

Also added a new metric to record duration of individual items being fetched: problem with `scp.fetch.duration` was that if we had outliers that for some reason got stuck, and then cleaned up, we never surfaced them. The ItemFetcher code is kind of messy (like we don't actually delete trackers right away, so I _think_ there might be some strange edge case where PendingEnvelopes reuses the same tracker object to fetch an item), but we can at least surface the outliers with this metric. 
# Description

Implements https://github.com/stellar/stellar-protocol/blob/master/core/cap-0030.md


# Checklist
- [ ] Reviewed the [contributing](https://github.com/stellar/stellar-core/blob/master/CONTRIBUTING.md#submitting-changes) document
- [ ] Rebased on top of master (no merge commits)
- [ ] Ran `clang-format` v5.0.0 (via `make format` or the Visual Studio extension)
- [ ] Compiles
- [ ] Ran all tests
- [ ] If change impacts performance, include supporting evidence per the [performance document](https://github.com/stellar/stellar-core/blob/master/performance-eval/performance-eval.md)

# Description

Implements https://github.com/stellar/stellar-protocol/blob/master/core/cap-0018.md


# Checklist
- [x] Reviewed the [contributing](https://github.com/stellar/stellar-core/blob/master/CONTRIBUTING.md#submitting-changes) document
- [x] Rebased on top of master (no merge commits)
- [x] Ran `clang-format` v5.0.0 (via `make format` or the Visual Studio extension)
- [x] Compiles
- [x] Ran all tests
- [ ] If change impacts performance, include supporting evidence per the [performance document](https://github.com/stellar/stellar-core/blob/master/performance-eval/performance-eval.md)

# Description

This adds some low-latency signposts to the transaction processing phases. These turn into short writes to the os_log subsystem on MacOS and are surfaced in Instruments.app, helping to show which parts of a profile do what.

They're no-ops on Linux or Windows.

Each signpost costs 1 syscall at about 10us. The finest-grain signpost in this PR is the transaction apply one; currently we're closing something like 100tx/ledger at something like 100ms; this would add 1ms to that close time. If that's still too much I can remove the inner per-tx signpost.

# Checklist
- [x] Reviewed the [contributing](https://github.com/stellar/stellar-core/blob/master/CONTRIBUTING.md#submitting-changes) document
- [x] Rebased on top of master (no merge commits)
- [x] Ran `clang-format` v5.0.0 (via `make format` or the Visual Studio extension)
- [x] Compiles
- [x] Ran all tests
- [x] If change impacts performance, include supporting evidence per the [performance document](https://github.com/stellar/stellar-core/blob/master/performance-eval/performance-eval.md)

# Description

Implements https://github.com/stellar/stellar-protocol/blob/master/core/cap-0028.md

# Checklist
- [x] Reviewed the [contributing](https://github.com/stellar/stellar-core/blob/master/CONTRIBUTING.md#submitting-changes) document
- [x] Rebased on top of master (no merge commits)
- [x] Ran `clang-format` v5.0.0 (via `make format` or the Visual Studio extension)
- [x] Compiles
- [x] Ran all tests
- [ ] If change impacts performance, include supporting evidence per the [performance document](https://github.com/stellar/stellar-core/blob/master/performance-eval/performance-eval.md)

I've had synced node running without any problem for several months. But suddenly it stopped to sync new blocks and show me the following error message:
```
2019-12-31T19:02:49.281 GDRU2 [History ERROR] Bad ledger-header history entry: claimed ledger [seq=27533706, hash=450c7b] does not agree with LCL [seq=27533706, hash=9f1266] [VerifyLedgerChainWork.cpp:160]
2019-12-31T19:02:49.281 GDRU2 [History ERROR] Catchup material failed verification - hash mismatch, propagating failure [VerifyLedgerChainWork.cpp:337]
2019-12-31T19:02:49.281 GDRU2 [History ERROR] One or more of history archives may be corrupted. Update HISTORY configuration entry to only contain valid ones [VerifyLedgerChainWork.cpp:339]
2019-12-31T19:02:51.113 GDRU2 [History ERROR] Bad ledger-header history entry: claimed ledger [seq=27533706, hash=450c7b] does not agree with LCL [seq=27533706, hash=9f1266] [VerifyLedgerChainWork.cpp:160]
2019-12-31T19:02:51.113 GDRU2 [History ERROR] Catchup material failed verification - hash mismatch, propagating failure [VerifyLedgerChainWork.cpp:337]
2019-12-31T19:02:51.113 GDRU2 [History ERROR] One or more of history archives may be corrupted. Update HISTORY configuration entry to only contain valid ones [VerifyLedgerChainWork.cpp:339]
2019-12-31T19:02:52.929 GDRU2 [History ERROR] Bad ledger-header history entry: claimed ledger [seq=27533706, hash=450c7b] does not agree with LCL [seq=27533706, hash=9f1266] [VerifyLedgerChainWork.cpp:160]
2019-12-31T19:02:52.929 GDRU2 [History ERROR] Catchup material failed verification - hash mismatch, propagating failure [VerifyLedgerChainWork.cpp:337]
2019-12-31T19:02:52.930 GDRU2 [History ERROR] One or more of history archives may be corrupted. Update HISTORY configuration entry to only contain valid ones [VerifyLedgerChainWork.cpp:339]
2019-12-31T19:02:56.265 GDRU2 [History ERROR] Bad ledger-header history entry: claimed ledger [seq=27533706, hash=450c7b] does not agree with LCL [seq=27533706, hash=9f1266] [VerifyLedgerChainWork.cpp:160]
2019-12-31T19:02:56.265 GDRU2 [History ERROR] Catchup material failed verification - hash mismatch, propagating failure [VerifyLedgerChainWork.cpp:337]
2019-12-31T19:02:56.265 GDRU2 [History ERROR] One or more of history archives may be corrupted. Update HISTORY configuration entry to only contain valid ones [VerifyLedgerChainWork.cpp:339]
2019-12-31T19:03:11.609 GDRU2 [History ERROR] Bad ledger-header history entry: claimed ledger [seq=27533706, hash=450c7b] does not agree with LCL [seq=27533706, hash=9f1266] [VerifyLedgerChainWork.cpp:160]
2019-12-31T19:03:11.610 GDRU2 [History ERROR] Catchup material failed verification - hash mismatch, propagating failure [VerifyLedgerChainWork.cpp:337]
2019-12-31T19:03:11.610 GDRU2 [History ERROR] One or more of history archives may be corrupted. Update HISTORY configuration entry to only contain valid ones [VerifyLedgerChainWork.cpp:339]
2019-12-31T19:03:14.964 GDRU2 [History ERROR] Bad ledger-header history entry: claimed ledger [seq=27533706, hash=450c7b] does not agree with LCL [seq=27533706, hash=9f1266] [VerifyLedgerChainWork.cpp:160]
2019-12-31T19:03:14.964 GDRU2 [History ERROR] Catchup material failed verification - hash mismatch, propagating failure [VerifyLedgerChainWork.cpp:337]
2019-12-31T19:03:14.964 GDRU2 [History ERROR] One or more of history archives may be corrupted. Update HISTORY configuration entry to only contain valid ones [VerifyLedgerChainWork.cpp:339]
2019-12-31T19:03:14.964 GDRU2 [Ledger ERROR] Catchup will restart at next close. [LedgerManagerImpl.cpp:691]
```  
After restarting node several times but I got the same error everytime:  
<details> <summary>Error</summary>  

```
2019-12-31T18:28:13.208 GDQMO [History ERROR] Catchup material failed verification - hash mismatch, propagating failure [VerifyLedgerChainWork.cpp:337]
2019-12-31T18:28:13.208 GDQMO [History ERROR] One or more of history archives may be corrupted. Update HISTORY configuration entry to only contain valid ones [VerifyLedgerChainWork.cpp:339]
2019-12-31T18:28:18.452 GDQMO [History ERROR] Bad ledger-header history entry: claimed ledger [seq=27533706, hash=450c7b] does not agree with LCL [seq=27533706, hash=9f1266] [VerifyLedgerChainWork.cpp:160]
2019-12-31T18:28:18.452 GDQMO [History ERROR] Catchup material failed verification - hash mismatch, propagating failure [VerifyLedgerChainWork.cpp:337]
2019-12-31T18:28:18.453 GDQMO [History ERROR] One or more of history archives may be corrupted. Update HISTORY configuration entry to only contain valid ones [VerifyLedgerChainWork.cpp:339]
2019-12-31T18:28:19.709 GDQMO [History ERROR] Bad ledger-header history entry: claimed ledger [seq=27533706, hash=450c7b] does not agree with LCL [seq=27533706, hash=9f1266] [VerifyLedgerChainWork.cpp:160]
2019-12-31T18:28:19.709 GDQMO [History ERROR] Catchup material failed verification - hash mismatch, propagating failure [VerifyLedgerChainWork.cpp:337]
2019-12-31T18:28:19.709 GDQMO [History ERROR] One or more of history archives may be corrupted. Update HISTORY configuration entry to only contain valid ones [VerifyLedgerChainWork.cpp:339]
2019-12-31T18:28:33.943 GDQMO [History ERROR] Bad ledger-header history entry: claimed ledger [seq=27533706, hash=450c7b] does not agree with LCL [seq=27533706, hash=9f1266] [VerifyLedgerChainWork.cpp:160]
2019-12-31T18:28:33.944 GDQMO [History ERROR] Catchup material failed verification - hash mismatch, propagating failure [VerifyLedgerChainWork.cpp:337]
2019-12-31T18:28:33.944 GDQMO [History ERROR] One or more of history archives may be corrupted. Update HISTORY configuration entry to only contain valid ones [VerifyLedgerChainWork.cpp:339]
2019-12-31T18:28:33.944 GDQMO [Ledger ERROR] Catchup will restart at next close. [LedgerManagerImpl.cpp:691]

```
</details>

Could not find any solutions, so I initialized new DB with `new-db` command, and started to sync my node from scratch. 
Actually I could not realize what was the problem.
<details> <summary>My node's config </summary>  

```
HTTP_PORT=10000
PUBLIC_HTTP_PORT=false
COMMANDS=[
"ll?level=ERROR"
]
ENTRY_CACHE_SIZE=10
BEST_OFFERS_CACHE_SIZE=10
LOG_FILE_PATH=secret_path_to_log
BUCKET_DIR_PATH=secret_path_to_dir
NETWORK_PASSPHRASE="Public Global Stellar Network ; September 2015"
PEER_PORT=11625
TARGET_PEER_CONNECTIONS=5
MAX_ADDITIONAL_PEER_CONNECTIONS=-1
MAX_PENDING_CONNECTIONS=2
PEER_AUTHENTICATION_TIMEOUT=2
KNOWN_PEERS=[
"core-live-a.stellar.org",
"core-live-b.stellar.org",
"core-live-c.stellar.org",
"au.stellar.ibm.com",
"no.stellar.ibm.com",
"uk.stellar.ibm.com",
"ca.stellar.ibm.com",
]
NODE_IS_VALIDATOR=false
FAILURE_SAFETY=0
UNSAFE_QUORUM=true
CATCHUP_COMPLETE=false
CATCHUP_RECENT=20000
DATABASE= SECRET
MAX_CONCURRENT_SUBPROCESSES=2
AUTOMATIC_MAINTENANCE_PERIOD=14400
AUTOMATIC_MAINTENANCE_COUNT=0
NODE_NAMES=[
"GCKWUQGSVO45ZV3QK7POYL7HMFWDKWJVMFVEGUJKCAEVUITUCTQWFSM6  IBM_Australia",
"GB2HF2NHRKKFZYFDGD7MUENOYROOEK7SWYV2APYOODP6P7BUJTLILKIL  IBM_Canada",
"GDRA72H7JWXAXWJKOONQOPH3JKNSH5MQ6BO5K74C3X6FO2G3OG464BPU  IBM_Norway",
"GAENPO2XRTTMAJXDWM3E3GAALNLG4HVMKJ4QF525TR25RI42YPEDULOW  IBM_UK",
"GCGB2S2KGYARPVIA37HYZXVRM2YZUEXA6S33ZU5BUDC6THSB62LZSTYH  sdf1",
"GCM6QMP3DLRPTAZW2UZPCPX2LF3SXWXKPMP3GKFZBDSF3QZGV2G5QSTK  sdf2",
"GABMKJM6I25XI4K7U6XWMULOUQIQ27BCTMLS6BYYSOWKTBUXVRJSXHYQ  sdf3"]
KNOWN_CURSORS=["HORIZON"]
[QUORUM_SET]
THRESHOLD_PERCENT=66
VALIDATORS=[
"$sdf1", "$sdf2", "$sdf3"
]
[QUORUM_SET.1]
THRESHOLD_PERCENT=67
VALIDATORS=[
"$IBM_UK","$IBM_Australia","$IBM_Norway","$IBM_Canada"
]
[HISTORY.sdf1]
get="curl -sf http://history.stellar.org/prd/core-live/core_live_001/{0} -o {1}"
[HISTORY.sdf2]
get="curl -sf http://history.stellar.org/prd/core-live/core_live_002/{0} -o {1}"
[HISTORY.sdf3]
get="curl -sf http://history.stellar.org/prd/core-live/core_live_003/{0} -o {1}"
```
</details>

### Environment
*  Linux 4.15.0-72-generic # 81-Ubuntu SMP Tue Nov 26 12:20:02 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
* Running from command line
* Did you pass in special parameters when building the app? No.
# Description

Resolves #509 

This PR replaces #2327 

This PR adds wrapper objects to transaction sets and quorum sets, so that herder can keep an exact mapping between those objects and the ones referenced by SCP.

This is the first step in separating the caching strategy between SCP and herder/overlay: this should allow us to be a lot more aggressive in caching data that SCP doesn't strictly need in the future while keeping the strict minimum of data for SCP to continue to function.

# Checklist
- [ ] Reviewed the [contributing](https://github.com/stellar/stellar-core/blob/master/CONTRIBUTING.md#submitting-changes) document
- [ ] Rebased on top of master (no merge commits)
- [ ] Ran `clang-format` v5.0.0 (via `make format` or the Visual Studio extension)
- [ ] Compiles
- [ ] Ran all tests
- [ ] If change impacts performance, include supporting evidence per the [performance document](https://github.com/stellar/stellar-core/blob/master/performance-eval/performance-eval.md)

It looks like sometimes downloading transaction sets take a very long time, even though peers have the data.

NB: this happens around times with slow ledgers, so there could be some strange interaction between systems (nothing in the logs around "dropped peers" from what I could see).

For example, I captured this sequence: message from `LOBSTR1Europe` received at 2019-12-17T19:39:48.578
and only much later the message is processed 2019-12-17T19:39:59.302 (that's 11 seconds just to download a small transaction set).

```
2019-12-17T19:39:48.366 GCM6Q [SCP DEBUG] NominationProtocol::nominate (0) [ SIGNED@sdf_watcher2 txH: 8e1eca, ct: 1576611588, upgrades: [ ] ]
2019-12-17T19:39:48.578 GCM6Q [Herder DEBUG] recvSCPEnvelope from: LOBSTR1Europe s:3 i:27316247 a:Synced!
2019-12-17T19:39:51.368 GCM6Q [SCP DEBUG] NominationProtocol::nominate (2) [ SIGNED@sdf_watcher2 txH: 8e1eca, ct: 1576611588, upgrades: [ ] ]
2019-12-17T19:39:54.369 GCM6Q [SCP DEBUG] NominationProtocol::nominate (3) [ SIGNED@sdf_watcher2 txH: 8e1eca, ct: 1576611588, upgrades: [ ] ]
2019-12-17T19:39:56.829 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@COINQVESTFinland |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:56.831 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@COINQVESTGermany |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:56.854 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@sdf_watcher2 |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:56.885 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@keybase2 |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:56.886 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@COINQVESTHongKong |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:57.061 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@LOBSTR5Australia |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:57.713 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@blockdaemon3 |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:57.852 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@sdf_watcher1 |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:58.056 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@blockdaemon2 |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:58.371 GCM6Q [SCP DEBUG] NominationProtocol::nominate (4) [ SIGNED@sdf_watcher2 txH: 8e1eca, ct: 1576611588, upgrades: [ ] ]
2019-12-17T19:39:58.423 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@sdf_watcher2 |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@sdf_watcher2 txH: 8e1eca, ct: 1576611588, upgrades: [ ] ]' ,'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:58.501 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@blockdaemon1 |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:59.120 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@COINQVESTHongKong |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@LOBSTR1Europe txH: 5334a3, ct: 1576611587, upgrades: [ ] ]' ,'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} } validated: true
2019-12-17T19:39:59.177 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@sdf_watcher2 |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@LOBSTR1Europe txH: 5334a3, ct: 1576611587, upgrades: [ ] ]' ,'[ SIGNED@sdf_watcher2 txH: 8e1eca, ct: 1576611588, upgrades: [ ] ]' ,'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:59.293 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@blockdaemon3 |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@LOBSTR1Europe txH: 5334a3, ct: 1576611587, upgrades: [ ] ]' ,'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} } validated: true
2019-12-17T19:39:59.295 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@sdf_watcher1 |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@LOBSTR1Europe txH: 5334a3, ct: 1576611587, upgrades: [ ] ]' ,'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:59.296 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@COINQVESTFinland |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@LOBSTR1Europe txH: 5334a3, ct: 1576611587, upgrades: [ ] ]' ,'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} } validated: true
2019-12-17T19:39:59.297 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@LOBSTR4Asia |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@LOBSTR1Europe txH: 5334a3, ct: 1576611587, upgrades: [ ] ]' ,'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:59.298 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@LOBSTR5Australia |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@LOBSTR1Europe txH: 5334a3, ct: 1576611587, upgrades: [ ] ]' ,'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:59.300 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@sdf_watcher3 |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@LOBSTR1Europe txH: 5334a3, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
2019-12-17T19:39:59.302 GCM6Q [SCP DEBUG] new statement:  i: 27316247 st: {ENV@LOBSTR1Europe |  i: 27316247 | NOMINATE | D: 7699db | X: {'[ SIGNED@LOBSTR1Europe txH: 5334a3, ct: 1576611587, upgrades: [ ] ]' ,'[ SIGNED@COINQVESTHongKong txH: b13038, ct: 1576611587, upgrades: [ ] ]'} | Y: {} } validated: true
```

I found edited part to be confusing. Maybe because of indentation I understood that one should process fee and then meta of each tx one after another, however you should process fee changes of ALL txs first before processing meta changes.
The TxSetFrame class needs an overhaul. Among its problems:

  - It is stateful, allowing addition and deletion of txs from the set, which corrupts its sort order.
  - It has methods like trimInvalid or checkOrTrim that implicitly call the deletion method.
  - The deletion method is linear in the size of the txset, and is called from linear trimming loops over the txset, with quadratic results.
  - It has a calculated field (the content hash) that's cached, with a validity flag that's flipped when it changes.
  - It has a sortForHash() method that also does a potentially slightly-expensive calculation but _doesn't_ track its state with a validity flag, meaning it potentially re-sorts anytime anyone calls it, even if it's already sorted
  - It has a sortForApply() method which doesn't change the order of the members, even though the name suggests it does, and some tests appear to think it does (see herder/test/HerderTests.cpp)
  - It has a somewhat awkward abstract base class with both full (TxSetFrame) and simulated (SimulationTxSetFrame) subtypes. It's not clear to a reader what the difference is or why there are two.

As a general sketch -- hopefully without disrupting its users too much! -- I'd recommend the following adjustments:

  - [ ] Keep the cached calculated content hash but make it mutable and invalidated by a `const` helper method, revalidated in the `const` hash-getter (copy what TransactionFrame does here)
  - [ ] Make it a (documented) invariant that a `TxSetFrame`'s transactions are always in hash-sorted order:
    - [ ] When constructed from a `TxSet` off-the-wire, pass a boolean saying whether to sort in the ctor (because we're just mucking around in a test) or whether to require the input is pre-sorted and throw if it's not (eg. for values off the wire, which we should reject immediately at `Peer::recvTxSet` level).
    - [ ] Either store values in a sorted form that's always sorted (`std::set`) ...
    - [ ] Or store them in a sorted `std::vector`...
        - [ ] And re-sort eagerly on each change (possibly batching changes)...
        - [ ] Or flip a mutable `mSorted` bit and re-sort before _observation_, as with the hash
    - [ ] Either way, remove the `sortForHash` function from the public API. Callers shouldn't care.
  - [ ] Remove quadratic filtering loop: build a `std::vector` of txs-to-remove during the filter loop, then sort that vector by hash once (unfortuntately it's _processed_ in apply order) and merge-remove it from the remaining sorted type.
  - [ ] Remove the `AbstractTxSetForApply` base type
    - [ ] Rename `SimulationTxFrame` to `TxSetInApplyOrder`; use this in LedgerCloseData.
    - [ ] Rename `TxSet::sortForApply` to `getTxSetInApplyOrder` and make it `const`; make this construct a `TxSetInApplyOrder`.
    - [ ] Keep `TxSetInApplyOrder` immutable but change its contents and constructors slightly:
      - [ ] Replace its `mTransactions` and `mResults` members with a `std::vector<TransactionFramePtr> mTxns` member 
      - [ ] Change its current ctor to take the same args but eagerly expand-out the `mTxns` member
      - [ ] Give it a new ctor that takes networkID, previousLedgerHash, contentsHash, and a `std::vector<TransactionFramePtr>`. This is called from `TxSetFrame::getTxSetInApplyOrder`.
      - [ ] Give it a method to produce a `TxSetFrame` (in hash order). Let users inter-convert, but not wonder which is which. `TxSetFrame` is hash-sorted, `TxSetFrameInApplyOrder` is apply-sorted. Always. The end.
