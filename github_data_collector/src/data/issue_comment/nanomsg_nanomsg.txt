Thank you for sharing this wonderful demo file.
It was very useful for study with nanomsg.

It's nothing important, but I found some issues like this:
1. header file for ntohl, htonl.
2. Compile issue in 'int server(const char *url)' with comparison between pointer and integer.

Thank you.
nanomsg does not build when used as a cmake subproject with FetchContent.
The following error is observed:

`CMake Error: File /Users/<project-path>/bld/_deps/nanomsg-src/src/cmake/nanomsg-config.cmake.in does not exist.
Call Stack (most recent call first):
  bld/_deps/nanomsg-src/src/CMakeLists.txt:395 (configure_package_config_file)
`

This can be rectified using the following change at line number 395:

```
configure_package_config_file(
-    ${CMAKE_SOURCE_DIR}/cmake/${PROJECT_NAME}-config.cmake.in
+    ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/${PROJECT_NAME}-config.cmake.in
     ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake
     INSTALL_DESTINATION ${PACKAGE_INSTALL_DESTINATION}
     PATH_VARS CMAKE_INSTALL_PREFIX

```
The use of comfortaa on the nanomsg website leads to rather poor rendering on some systems (e.g. Windows 10 on my Dell XPS 15).  Probably we should replace with a more mainstream font.
![image](https://user-images.githubusercontent.com/6778018/50469675-71557780-09e8-11e9-89c3-0f63b2e3ec6a.png)

I'm testing the PUSH/PULL socket using TCP transport.
If IPv4only option was disabled, and try to connect with IPv4 address,
the destination address resolved AF_INET, but local address which the socket would bind resolved as AF_INET6.
so nn_usock_start makes the socket AF_INET.
after that nn_ctcp_start_connecting() try to bind the local IPv6 address, it was failed.
the local address lookup code is not working properly.
nn_iface_any determines the bind address only with ipv4only option.

after that, nanomsg try to reconnect and takes a same routine again.
at that time usock->state is not idle, it is NN_USOCK_STATE_STARTING,
so nn_usock_start is assert.

please consider the following three points

1) nn_iface_any should not determine the address with ipv4only option
2) nn_usock_start should consider connection retry case.
3) if ipv4only option is disabled, make the socket as AF_INET6 forced.
My application is running on Windows Platform and Linux Platform at the same time with Pair Mode, the windows platform is running with bind and linux with connect. After few hours, the application running on Windows abort with this error : (Unexpected action: state=2 source=1 action=5 (e:\workspace\nanomsg-1.1.4\src\transports\tcp\atcp.c:228).
Are there efforts to add this to Microsoft's Visual C++ package manager, vcpkg?  It is much easier to get library that way.
Thanks,

Description:
nn_bipc_create will allocate memory for nn_bipc structure and do a lot of stuff to run fsm for that connection.
But if the last call to nn_bipc_listen fails (introduced in #743 and related bug #617) this will produce the memory leak.

How to reproduce:
Build nanomsg with memory sanitizer
`CC=clang CXX=clang++ cmake .. -DCMAKE_C_FLAGS="-g -fsanitize=address -fno-omit-frame-pointer -O1"
`
Run

> $ ./ipc

Report:

> =================================================================
> ==32638==ERROR: LeakSanitizer: detected memory leaks
> 
> Direct leak of 736 byte(s) in 1 object(s) allocated from:
>     #0 0x4f35a6 in malloc llvm/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:67
>     #1 0x7f445508bc13 in nn_bipc_create nanomsg/src/transports/ipc/bipc.c:97:12
>     #2 0x7f4455059ce3 in nn_ep_init nanomsg/src/core/ep.c
>     #3 0x7f4455062516 in nn_sock_add_ep nanomsg/src/core/sock.c:505:10
>     #4 0x7f445505be10 in nn_bind nanomsg/src/core/global.c:616:10
>     #5 0x5271ad in main nanomsg/tests/ipc.c:116:10
>     #6 0x7f4453d31c04 in __libc_start_main /usr/src/debug/glibc-2.17-c758a686/csu/../csu/libc-start.c:274
> 
> SUMMARY: AddressSanitizer: 736 byte(s) leaked in 1 allocation(s).
> 

Note:
Freeing allocated memory right after nn_bipc_listen call, not an option, because it already used in bipc fsm.
Need some advice for clean shutdown of all that stuff.
nanocat looks like an excellent minimal tool for some common use cases I have on the command line. Is there any interest in a PR to provide a mode making it line-oriented when it reads from a file (or stdin)? What I would like is to be able to do is something like `tail -f logfile | nanocat --pub --by-line ...` and receive that elsewhere. It looks like that the moment, all information is read from the data or file at once.
