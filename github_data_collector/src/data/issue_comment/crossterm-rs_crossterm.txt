Environment
    Microsoft Windows [Version 10.0.18363.535] + WSL 1.0
    WSL: Linux 4.4.0-18362-Microsoft #476-Microsoft Fri Nov 01 16:53:00 PST 2019 x86_64

Code
    1 use crossterm::{Result, cursor};
    2
    3 fn main() -> Result<()> {
    4     let pos = cursor::position();
    5     println!("{:?}", pos);
    6     Ok(())
    7 }

Panic
    thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: IoError(Custom { kind: Other, error: "The cursor position could not be read within a normal duration" })', src/libcore/result.rs:1188:5
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.

Steps to Reproduce
    1) open terminal by `cmd` or `powershell`, using WIN+Q shortcut
    2) `ssh user@localhost`
    3) run the prog

Notes
    1) if open terminal by `bash`, using WIN+Q shortcut, the prog works
    2) if putty to user@localhost, the prog works

Priority
     very low. if such environment is not in supported list, just close this issue, and please mention it in document.

Added a small set of reasonable trait implementations (`Debug`, `Copy`, `Clone`, `PartialEq`, and `Eq`) to all of the commands. The largest command is a pair of `u16`, so they're easily copyable.
**Is your feature request related to a problem? Please describe.**
Currently, the terminal::size function is hardcoded (on unix) to read the terminal size from stdout. However, on some applications (like broot), stdout is redirected to something useful and the UI parts are rendered to the terminal on stdout. 

**Describe the solution you'd like**
Either a separate set of _stderr methods should be added, or the exisiting ones should be modified to prefer stderr if it detects that stdout isn't a terminal.

Related to https://github.com/Canop/broot/issues/131

I'm converting some existing code to crossterm, which mixes drawing a progress bar with emitting some messages. 

Is `Print` always guaranteed to wrap to a new line, on all platforms? If so, could that be documented in the API?
**Describe the bug**
In AZERTY keyboards (Belgian french in this case) some common ascii characters ( { ,} , [, ] , #, \ ) are only accessible with the right Alt button pressed. In windows, no event is generated for these characters.

**To Reproduce**
Steps to reproduce the behavior:
1. Run the event-poll-read example on a windows/AZERTY machine and try to get a KeyEvent for any of the above characters

**OS**
 - Windows 10

**Terminal/Shell**
 - CMD/Powershell

In crossterm/src/event/sys/windows/parse.rs there is no differentiation of right or left key pressed

`let alt = state.has_state(LEFT_ALT_PRESSED | RIGHT_ALT_PRESSED);`

while later in the same file, in `parse_key_event_record` function the key code is replaced by the virtual_key_code which no longer corresponds to the right character.

``` Rust
                if modifiers.contains(KeyModifiers::ALT) {
                    // If the ALT key is held down, pressing the A key produces ALT+A, which the system does not treat as a character at all, but rather as a system command.
                    // The pressed command is stored in `virtual_key_code`.
                    let command = key_event.virtual_key_code as u8 as char;

                    if command.is_alphabetic() {
                        character = command;
                    } else {
                        return None;
                    }
```

Here is also an output from the event-poll-read example with some debug information.

```
[src\event\sys\windows\parse.rs:80] character_raw = 93
[src\event\sys\windows\parse.rs:88] command = 'ยบ'
Event::Key(KeyEvent { code: Char('ยบ'), modifiers: CONTROL | ALT })
```

**Describe the bug**
When using sys::exit(), the process ends with an exit code of 256, producing the following error on windows terminals:

> error: process didn't exit successfully: `target\debug\crosstest.exe` (exit code: 256)


**To Reproduce**
Steps to reproduce the behavior:
1. Create a simple binary application with the following main.rs
``` Rust
fn main() {
    crossterm::terminal::exit();
}

```
2. Compile and run the application on a windows terminal (Powershell or cmd)
3. See error

**Expected behavior**
The process should exit successfully with exit code zero.

**OS**
 - Windows

**Terminal/Shell**
 -  CMD, Powershell

**Possible fix**
The exit code 256 is used on sys/windows.rs line 36
``` Rust
pub(crate) fn exit() {
    ::std::process::exit(256);
}
```
This is probably a misreading of std::process::exit() documentation example, where an exit code of 256 is given for demonstration reasons.

**Describe the bug**

When compiling my project I get a warning from cargo wherever the `queue!` macro is used:

    warning: use of deprecated item 'std::error::Error::description': use the Display impl or to_string()

**To Reproduce**

Use the `queue!` macro in a project.

**Expected behavior**

There should be no warning

**OS**
 - Ubuntu 18.04

**Terminal/Shell**

- N/A

**Is your feature request related to a problem? Please describe.**
It'd be nice to have color detection implemented in crossterm. I'm looking at converting my "plain" colorizing to using termimad to render Markdown which would basically means porting to crossterm anyways. It'd be nice to have something like https://docs.rs/termcolor/1.0.5/termcolor/enum.ColorChoice.html to control whether color and styling actually makes any sense.

**Describe the solution you'd like**
A way to construct a buffer that drops colors if the backing pipe doesn't support it, but with the ability to override it.

**Describe alternatives you've considered in any**
Didn't see an API for doing this in the docs. Having to conditionalize all my style commands based on that would be better done at the buffer/output level.

Maybe I'm just not seeing the API call I need to use?
The link "Tested terminals" on https://docs.rs/crossterm/0.14.1/crossterm/ leads to https://github.com/crossterm-rs/crossterm/tree/zrzka/docs-update#tested-terminals when clicked, which 404s.
**Is your feature request related to a problem? Please describe.**
It would be nice to have a function to set the terminal emulator's title in a cross-platform fashion.

**Describe the solution you'd like**
It could be something like `crossterm::terminal::set_title(title: &str)`.
This function would change the window's title from something like `cargo run` or `./my_app` to something like `MyApp` indicated by the `title` parameter.

**Additional context**
I haven't found any crate that would implement this kind of behavior.
I have found something like this from [hunter](https://github.com/rabite0/hunter/blob/17c25221241c61acf6a77967471439775829abe8/src/term.rs#L57), but it seems to work only on Linux.