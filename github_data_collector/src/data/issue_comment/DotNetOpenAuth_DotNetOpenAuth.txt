or is it permanent？
A typical setup (such as in the examples project) produces tokens longer than 500 bytes. Tokens with extra data may be even longer, around 1 KB.. Is there a way to make access tokens smaller? 
In March, Facebook will disallow returnUrls that aren't in a static list: https://developers.facebook.com/docs/facebook-login/security/#strict_mode

DotNetOpenAuth seems to put dynamic parameters into all returnUrls, meaning it will no longer work with Facebook.

Does anyone have a work-around or fix for this?
Received this error when calling google api for a service account using open auth. Cannot seem to track down the root cause.
Error testing email server conn: DotNetOpenAuth.Messaging.ProtocolException: Web request to 'https://accounts.google.com/o/oauth2/token' failed. ---> System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a send. ---> System.IO.IOException: Authentication failed because the remote party has closed the transport stream.
at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)
at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)
at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)
at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)
at System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)
at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult lazyResult)
at System.Net.TlsStream.CallProcessAuthentication(Object state)
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
at System.Net.TlsStream.ProcessAuthentication(LazyAsyncResult result)
at System.Net.TlsStream.Write(Byte[] buffer, Int32 offset, Int32 size)
at System.Net.PooledStream.Write(Byte[] buffer, Int32 offset, Int32 size)
at System.Net.ConnectStream.WriteHeaders(Boolean async)
--- End of inner exception stack trace ---
at System.Net.HttpWebRequest.GetRequestStream(TransportContext& context)
at System.Net.HttpWebRequest.GetRequestStream()
at DotNetOpenAuth.Messaging.StandardWebRequestHandler.GetRequestStreamCore(HttpWebRequest request)
--- End of inner exception stack trace ---
at Google.Apis.Requests.ClientServiceRequest`1.Execute()

Separate exception from the same logs:
DotNetOpenAuth.Messaging.ProtocolException: Web request to 'https://accounts.google.com/o/oauth2/token' failed. ---> System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a send. ---> System.IO.IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host. ---> System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host
at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
--- End of inner exception stack trace ---
at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
at System.Net.FixedSizeReader.ReadPacket(Byte[] buffer, Int32 offset, Int32 count)
at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)
at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)
at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)
at System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)
at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult lazyResult)
at System.Net.TlsStream.CallProcessAuthentication(Object state)
at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
at System.Net.TlsStream.ProcessAuthentication(LazyAsyncResult result)
at System.Net.TlsStream.Write(Byte[] buffer, Int32 offset, Int32 size)
at System.Net.PooledStream.Write(Byte[] buffer, Int32 offset, Int32 size)
at System.Net.ConnectStream.WriteHeaders(Boolean async)
--- End of inner exception stack trace ---
at System.Net.HttpWebRequest.GetRequestStream(TransportContext& context)
at System.Net.HttpWebRequest.GetRequestStream()
at DotNetOpenAuth.Messaging.StandardWebRequestHandler.GetRequestStreamCore(HttpWebRequest request)
--- End of inner exception stack trace ---
at Google.Apis.Requests.ClientServiceRequest`1.Execute()
here is situation:
SSO server site (A): https
web accelerator(B): https
SSO client site(C): http only
try to open C  withing A.  
process goes this way: A--https--> B --http-->C
   and then C --directly--http--> A
for sure this failed because of http communication
is there any approach to make it work without make C with https?
thank you very much in advance
Denny


As on [this link](http://stackoverflow.com/questions/43094777/facebookapplication-verifyauthentication-httpcontext-generatelocalcallbackuri) DotnetOpenAuth in not competible with least available FB version 2.3. 
The two calls to IAuthorizationServerHost.GetClient had mutually exclusive requirements:
1) Throw an exception if the Client is not found, do not return null
2) Return null if the Client is not found, do not throw an Exception

The problem prevented an OAuth2 Authorisation Server implementation from correctly handling an invalid ClientID - either the Authorize request would fail with a ProtocolException, or the Token request would fail with an ArgumentException.

This changes (2) to match the pattern of (1), which is also how the interface is documented.
Hi,

Please, how can I include the "audience"  parameter in OAuth token request?

I read the below page about "Secutiry Scenarios" but I don´t understand.
https://github.com/DotNetOpenAuth/DotNetOpenAuth/wiki/Security-scenarios

Below my code:

`
var server = new AuthorizationServerDescription();
server.TokenEndpoint = new Uri("xxx");
server.ProtocolVersion = DotNetOpenAuth.OAuth2.ProtocolVersion.V20;
                
var client = new UserAgentClient(server, clientIdentifier: "xxx");
client.ClientCredentialApplicator = ClientCredentialApplicator.PostParameter("xxx");

var token = client.ExchangeUserCredentialForToken(
    "xxx", "xxx");

return token.AccessToken;
`
` <messaging>
      <untrustedWebRequest>
        <whitelistHosts>
          <add name="localhost" />
        </whitelistHosts>
      </untrustedWebRequest>
    </messaging>`
In the project after it was unable to dynamically modify the .config file, may I ask how to modify whitelistHosts list when you run the program
THIS REPOSITORY IS DEAD !
THIS REPOSITORY IS DEAD !
THIS REPOSITORY IS DEAD !

Thanks for your interest in DotNetOpenAuth 
