*I have searched extensively, so please excuse me if this has been addressed.*

I'm using `stdweb` api and compiling with `cargo web`.
My `wasm` module panics with a `"not implemented"`.
I have tried all feature options including `default-features = false`, `js-sys` and `wasm-bindgen`. 

(Obviously, with `wasm-bindgen` I get `Error loading Rust wasm module 'calendar': TypeError: "import object field '__wbindgen_placeholder__' is not an Object"`)

It's unclear what exact line of of *my* code produces the panic, but it appears to be the `time` crate causing the panic. 

<img width="1285" alt="Screen Shot 2020-01-18 at 6 02 01 PM" src="https://user-images.githubusercontent.com/6916093/72658936-c1044800-3a1c-11ea-8d5f-968d1570e78d.png">

```rust
// time 0.1.42, line 102
pub fn get_time() -> (i64, i32) {
    unimplemented!()
}
```

The only types I'm using are `use chrono::{Duration, NaiveDate, NaiveDateTime, NaiveTime};`.

What am I missing? Does `chrono` work with `stdweb` or only `wasm-bindgen`? 
Also add the naive versions. These would just be useful to have for completeness in the library.
Closes: #383 

**Draft Stage**
**NOTE**: This is a work in progress, it's not quite ready to be merged yet I don't think.

A NaivePeriod covers the period of time between two NaiveDateTime(s),
inclusive. This data structure can be used to intersect two NaivePeriods to
determine if they overlap.

This is in partial fulfillment of #380, but does not provide necessary code
to handle DateTime objects (with offsets).

Refs #380.
### Context
Back in 2015, a [similar request](https://github.com/chronotope/chrono/issues/29) for a date transition API was closed. I wish to re-open conversation for a more generalized API for the same. Such APIs are utilized extensively in time-series & analytical workloads and with chrono almost being the canonical date-time crate for Rust, there is value to be had by having such APIs within the library.

I am already building this and would like put forth a PR for the same. In the meanwhile, checking if the stance of the team on the issue has changed?

## Public Interface
Support for following methods on a `NaiveDate` instance for the following APIs:

```rust
start_of_year() // Transforms 2019-07-12 to 2019-01-01
end_of_year() // Transforms 2019-07-12 to 2019-31-12
start_of_month()  // Transforms 2019-07-12 to 2019-07-01
end_of_month()  // Transforms 2019-07-12 to 2019-07-31
start_of_week()   // Transforms 2019-07-12 to 2019-07-08
end_of_week() // Transforms 2019-07-12 to 2019-07-14
```

All the APIs can also have `start_of_pred_*` / `end_of_pred_*` / `start_of_succ_*` / `end_of_succ_*` keeping things consistent.

While I am explicitly referring to `NaiveDate`, other structs can also be considered one at a time.
While there are some issues/PRs (#243, #284, etc.) relating to wasm, there is no specific section in documentation properly detailing steps to use it with something like `wasm-pack`.

For now (v0.4.10), the following code fails to compile:

```rust
extern crate wasm_bindgen;

use wasm_bindgen::prelude::*;
use chrono::{NaiveDate};

#[wasm_bindgen]
pub struct Request {
    date: NaiveDate,
}
```

The error message is:
```
   | #[wasm_bindgen]
   | ^^^^^^^^^^^^^^^ the trait `wasm_bindgen::convert::FromWasmAbi` 
   | is not implemented for `chrono::naive::date::NaiveDate`
```
A `Period` data structure is similar to a `Duration`, except that it has a specific start date. For example, one might have a period of 21 days, starting from January 1, 2020, which would have a start date/time of `2020-01-01 00:00:00` and an end date/time of `2020-01-22 00:00:00`.  (Obviously, these don't have timezones/offsets, so they are more likely to be `NaivePeriod` objects.

I am working on an implementation for this in a branch of chrono. The reason I am thinking this might be useful within the chrono library itself is that, given a `NaivePeriod` object, we can then determine if there is overlap with another `NaivePeriod`, or whether it contains a `NaiveDateTime`. I personally am working on a scheduling app, and thus this is a useful use case for me. That said, I'm not sure it belongs within the chrono library - perhaps a separate, add-on library would be more useful.

Thanks for your feedback! 
This code:

```toml
[dependencies]
chrono = "0.4.10"
```

```rust
use chrono::{Local, TimeZone};

fn main() {
    println!("{:?}", Local.ymd_opt(1820, 1, 1));
}
```

results in panic inside time crate:

```
‚ùØ cargo r
   Compiling ymdpanic v0.1.0 (C:\code\ymdpanic)
    Finished dev [unoptimized + debuginfo] target(s) in 0.44s
     Running `target\i686-pc-windows-msvc\debug\ymdpanic.exe`
thread 'main' panicked at 'attempt to subtract with overflow', C:\...\time-0.1.42\src\sys.rs:786:22
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
error: process didn't exit successfully: `target\i686-pc-windows-msvc\debug\ymdpanic.exe` (exit code: 101)
```

The time crate will _hopefully_ have a v0.2 release coinciding with the
release of Rust 1.40. As such, all references to the time crate make
clear that it is the v0.1 crate, not the soon-to-be-released v0.2 crate.
The first line of the README was also changed, as it's not a strict
superset of the new version.
Implementation for a Month enum, allowing -ser|de-rialization.
The implementation mostly mirrors the Weekday enum.
It only adds the enum with minimal integration so as to
not cause any backwards compatibility issue.
A deeper integration should be up to discussion.
Suggested in Issue #202