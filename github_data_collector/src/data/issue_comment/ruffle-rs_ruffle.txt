Bumps [structopt](https://github.com/TeXitoi/structopt) from 0.3.7 to 0.3.8.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href="https://github.com/TeXitoi/structopt/blob/master/CHANGELOG.md">structopt's changelog</a>.</em></p>
<blockquote>
<h1>[Upcoming]</h1>
<ul>
<li>You don't have to apply <code>#[no_version]</code> to every <code>enum</code> variant anymore.
Just annotate the <code>enum</code> and the setting will be propagated down
(<a href="https://github-redirect.dependabot.com/TeXitoi/structopt/issues/242">#242</a>).</li>
<li><a href="https://docs.rs/structopt/0.3/structopt/#default-values">Auto-default</a>.</li>
<li><a href="https://docs.rs/structopt/0.3/structopt/#external-subcommands">External subcommands</a>.</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href="https://github.com/TeXitoi/structopt/commits">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=structopt&package-manager=cargo&previous-version=0.3.7&new-version=0.3.8)](https://dependabot.com/compatibility-score.html?dependency-name=structopt&package-manager=cargo&previous-version=0.3.7&new-version=0.3.8)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in the `.dependabot/config.yml` file in this repo:
- Update frequency
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
@Herschel,

the button for play/pause in https://randomfoo.net/oscon/2002/lessig/free_culture.swf can stop and start the sound again from the start, but not from the the position where it has been paused.

This is common code for the slide transition:

``` js
var i = 1;
var time = 0;
var timing = new Array();
timing[1] = 16.826;
timing[2] = 11.846;
timing[3] = 4.822;
timing[4] = 5.687;
timing[5] = 5.451;
timing[6] = 4.114;
// and so on...

var ptiming = 0;
var ntiming = timing[i];
if(time == "0") {
   time = getTimer() + timing[i] * 1000;
   Slides.gotoAndStop(i);
   lessig = new Sound();
   lessig.attachSound("Lessig_32.mp3");
   lessig.start();
}
```

The AS2 code for that button reads:

``` js
on(release) {
   if(!paused) {
      pause_start = getTimer();
      pause_offset = lessig.position;
      lessig.stop();
      stop();
      paused = 1;
   } else {
      pause_time = getTimer() - pause_start;
      lessig.start(pause_offset / 1000);
      time = time + pause_time;
      play();
      paused = 0;
   }
}
```

But the weird thing is that both the button to advance the slide:

``` js
on(release) {
   if(i < timing.length) {
      if(1 < i) {
         ptiming = ptiming + timing[i - 1];
      }
      i++;
      Slides.gotoAndStop(i);
      lessig.stop();
      lessig.start(ntiming);
      time = getTimer() + timing[i] * 1000;
      if(i < timing.length){
         ntiming = ntiming + timing[i];
      }
   }
}
```

and the button to go to the previous slide work perfectly fine:

``` js
on(release) {
   if(1 < i) {
      ntiming = ntiming - timing[i];
      i--;
      Slides.gotoAndStop(i);
      lessig.stop();
      lessig.start(ptiming);
      time = getTimer() + timing[i] * 1000;
      if(1 < i) {
         ptiming = ptiming - timing[i - 1];
      }
   }
}
```

I wonder whether it might be related to an issue with `Sound.position()` (I guess it has been implemented, but I really donâ€™t know ðŸ˜…).
https://www.newgrounds.com/portal/view/63747

Skullkid is on the screen but doesn't respond to keyboard input.
https://www.newgrounds.com/portal/view/218014

Interactive Buddy is on the screen and makes comments but you can't actually drag them around.
Divine Intervention gets to the title screen but the play button doesn't work:

https://www.newgrounds.com/portal/view/136337
@Herschel,

this comes from #183 & #203:

1. Sound is played too slow in https://www.free-culture.tk/lfc-presentation.swf (downloaded and played with Linux desktop program [since now standard Firefox extension or web, #98]).

    I already reported this in lightspark/lightspark#381. The root of the problem was that (as @dbluelle kindly explained to me):

    > Just FYI: your MP3 has a sampling rate of 16 kHz, but the DefineSoundTag only has flags for 5.5, 11, 22 or 44 kHz.

    This is the reason why this is played too slow. The player from _Adobe_ has no problems with the sound in that SWF file.

2. Sound in https://randomfoo.net/oscon/2002/lessig/free_culture.swf is played distorted. Playing speed is fine and my poor command of the English language doesnâ€™t allow me a more accurate description (Iâ€™m afraid you have to listen to it).

    The sound is MP3, mono, 22kHz and 32kbps.

   Pressing any of the buttons (code in #203) removes distortion. I wonder whether this is related to `Sound.stop()` or `Sound.play(time)`.

Many thanks for your excellent work and your help.
This PR implements automatic value boxing and the `String` class.

It's important to note what "value boxing" actually means: On certain AVM1 opcodes, such as `GetVariable` and `CallMethod`, it is entirely possible to use primitive values as the target object of those opcodes. When you do this, the AVM1 runtime constructs a new object value from the primitive, which we refer to as value boxing. This is what makes things like `"my_string".toUpperCase()` work.

We implement boxing with a new object type called `ValueObject`, which has an additional field for a value. Opcodes which accept boxed objects will call `ValueObject::boxed`, which will construct new objects for primitive values. (Non-primitive objects will be unchanged.)

# Todos

 * [x] `ValueObject` impl
 * [x] Automatic boxing 
 * [x] `String` constructor
 * [x] `String.toUpperCase`
 * [ ] All other `String` methods
 * [ ] `Number` stuff maybe

# Open questions & remarks

 * [ ] Are there any other operations that accept boxed values?
 * [ ] Should we make `as_object` box primitives, or introduce another `Value` method that does so?
 * [ ] Box class coercion methods aren't special. You can call `String.prototype.toString.apply({})` and get `[object Object]`. It may be the case that all objects have an inherent `[[ToString]]` item separate from their `toString` method, and the builtin one on `Object` just references the item. This may be a useful refactor for another time if we feel like getting rid of some other `toString` or `valueOf` impls.
Whenever you do an invalid `tellTarget` (SetTarget opcode), Flash emits this error the trace log:
```
Target not found: Target="INVALID" Base="_level0"
```

Currently we don't do this, so we have to manually remove these lines from expected test output. It'd be nice to emit these to match Flash.
The (now defunct?) project [gnash](https://www.gnu.org/software/gnash/) had a `dump` option in its cli which could play and dump some specified number of frames out to a raw video file. Could this functionality be implemented in the ruffle_desktop cli?

Possible use cases:
- Mass generating thumbnails of flash movies
- Mass convert old static SWF files to PNG serverside. I would dump out the first frame, then use imagemagick to convert it to whatever format I need.
Hi. This is probably far from being worked on, but I wrote a fully complete ByteArray implementation with AMF0/AMF3. It's in Javascript though, but should be easy to be done in Rust. Hoping it's useful.

https://github.com/Zaseth/bytearray-node