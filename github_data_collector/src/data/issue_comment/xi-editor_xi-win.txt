I have just come across this project and think it's great. I would like to help, but many of the issues I don't know how to fix (e.g. how to implement 'Astral Plane Characters'). So, after reading through the code, I realised that adding another colour palette wouldn't be too hard as it would only require changing:
`fg: SolidColorBrush::create(rt).with_color(0xf0f0ea).build().unwrap(),`
`bg: SolidColorBrush::create(rt).with_color(0x272822).build().unwrap(),`
`sel: SolidColorBrush::create(rt).with_color(0x49483e).build().unwrap(),`

So my question is: Is this wanted by the people in charge of this project?

I would understand if it isn't, and I am working on copy and paste functionality, but this seemed like a fun side-feature. 
Trying to use ctrl + c or ctrl + v results in the following being logged (also no copying/pasting happens):
unexpected cmd 262
unexpected cmd 264

with regards to the selected code page:
$ chcp
Active code page: 775
When I use my fancy Compose key to enter üòÄ (or via the Win+. emoji panel), I just get this on stdout:

```
invalid code point 0xd83d
invalid code point 0xde15
```

Not sure whether not supporting unmatched surrogates is a bug or a feature‚Äîfor a text editor I‚Äôd lean towards ‚Äúbug‚Äù. But the two should be joined together, anyway.

https://github.com/vim/vim/issues/2800 may be of assistance in resolving this.
Currently errors emitted by the `error!` macro from core is ignored in xi-win.
According to [the log package](https://crates.io/crates/log), binaries using libraries which use macros from the log package need to have a logger which can receive the logs. The silent errors then make sense, as Core is used as a library by xi-win, which at the present uses no logger itself.

The fix seems to be initializing a logger early in the program.

I suggest just using something simple, like [env_logger](https://crates.io/crates/env_logger) to receive the logs from core until a more complicated solution is needed.

Conveniently, we could also use this logger for tracing of commands, etc.
This is a really small contribution because I am beginning to use xi-win but I decided to change the boundaries for scrolling, not allowing to scroll when the text is smaller than the window size. It seems more normal to me this way. 
Hi! I've just seen your awesome talk about data-driven UI's in Rust, and got intrigued by the problem of traversing a ECS-style tree while borrowing nodes mutably. 

I think I have a similar problem in other domain: structured editing of syntax trees. Don't want to go into details about it, but if you want to code stuff "find or create node X and add A, B and C children to it", you also sort-of want two mutable borrows of different indices. 

I'd like to share my solution, which is different from yours "implement trampoline/state machine by hand". I think it is actually worse for your use case due to interactions with object safety, but it's still interesting. 

The idea is that instead of passing a `&mut Node`, one uses `&mut Tree, NodeId`. That way, it's possible to reborrow `&mut Node` as `&mut tree[node_id]` several times, and use borrowing via other indices in between. Now, this does have to go a number of additional contortions to actually work for `dyn Widget` state: you need to explicitly separate widget's state and behavior, and then introduce an additional trait to make that object safe, but it does work out in the end, and result looks like this:

https://play.rust-lang.org/?gist=2075f9638163ba4e6187238861d15cba&version=stable&mode=debug&edition=2015

```Rust
struct Counter;

impl Widget for Counter {
    type Data = usize;

    fn layout(
        ctx: &mut LayoutCtx, // insead of passing &mut Self, we pass an index and `&mut Ctx`
        me: TypedId<Self>,
        children: &[Id]
    ) -> usize {

        for &id in children.iter() {
            let child_layout = ctx.layout(id);
            *ctx.data_mut(me) += child_layout;
        }

        *ctx.data_mut(me)
    }
}
```

On to re watching Flutter rendering pipeline talk! :) 
Hi,

I've wired up rusttrace(https://github.com/flowerinthenight/rusttrace) crate in xi-win ui.
It's a small mess to setup(can make a powershell script to automate it), but can be handy for debugging, in absence of println!, also ETW events can be used by tools like perfview for profiling.

Was wondering if you see any value in a pull request for this, if not so I could avoid the trouble of signing google license agreements.

Here's an example trace as displayed in the command line by mftrace.

```
Listening to ETW events (CTRL+C to end)
           __M_F_T_R_A_C_E___LOG__

PID, TID    Time (UTC)    TraceMessage
--------- --------------  ------------
19264,5614 20:26:32.28073 RustTrace Generic @xi-win-ui
19264,5614 20:26:32.32400 RustTrace Generic @Request {"method":"client_started","params":{}}
19264,5614 20:26:32.32405 RustTrace Generic @Request {"id":0,"method":"new_view","params":{}}
19264,3F9C 20:26:32.36444 RustTrace Generic @Response {"method":"available_themes","params":{"themes":["InspiredGitHub","Solarized (dark)","Solarized (light)","base16-eighties.dark","base16-mocha.dark","base16-ocean.dark","base16-ocean.light"]}}
19264,3F9C 20:26:32.36506 RustTrace Generic @Response {"id":0,"result":"view-id-1"}
19264,3F9C 20:26:32.36515 RustTrace Generic @Response {"method":"available_plugins","params":{"plugins":[],"view_id":"view-id-1"}}
19264,3F9C 20:26:32.36545 RustTrace Generic @Response {"method":"config_changed","params":{"changes":{"auto_indent":false,"font_face":"InconsolataGo","font_size":14,"line_ending":"\r\n","plugin_search_path":[],"scroll_past_end":false,"tab_size":4,"translate_tabs_to_spaces":true,"use_tab_stops":true,"wrap_width":0},"view_id":"view-id-1"}}
19264,3F9C 20:26:32.36580 RustTrace Generic @Response {"method":"update","params":{"update":{"ops":[{"lines":[{"cursor":[0],"styles":[],"text":""}],"n":1,"op":"ins"}],"pristine":true},"view_id":"view-id-1"}}
19264,3F9C 20:26:32.36585 RustTrace Generic @Response {"method":"scroll_to","params":{"col":0,"line":0,"view_id":"view-id-1"}}
19264,5614 20:26:35.02702 RustTrace Generic @Request {"method":"edit","params":{"method":"insert","params":{"chars":"a"},"view_id":"view-id-1"}}
19264,3F9C 20:26:35.02806 RustTrace Generic @Response {"method":"update","params":{"update":{"ops":[{"lines":[{"cursor":[1],"styles":[],"text":"a"}],"n":1,"op":"ins"}],"pristine":false},"view_id":"view-id-1"}}
19264,3F9C 20:26:35.02812 RustTrace Generic @Response {"method":"scroll_to","params":{"col":1,"line":0,"view_id":"view-id-1"}}
19264,5614 20:26:36.15279 RustTrace Generic @Request {"method":"edit","params":{"method":"insert_newline","params":[],"view_id":"view-id-1"}}
19264,3F9C 20:26:36.15366 RustTrace Generic @Response {"method":"update","params":{"update":{"ops":[{"lines":[{"styles":[],"text":"a\r\n"},{"cursor":[0],"styles":[],"text":""}],"n":2,"op":"ins"}],"pristine":false},"view_id":"view-id-1"}}
19264,3F9C 20:26:36.15371 RustTrace Generic @Response {"method":"scroll_to","params":{"col":0,"line":1,"view_id":"view-id-1"}}
19264,5614 20:26:36.91523 RustTrace Generic @Request {"method":"edit","params":{"method":"delete_backward","params":[],"view_id":"view-id-1"}}
19264,3F9C 20:26:36.91603 RustTrace Generic @Response {"method":"update","params":{"update":{"ops":[{"lines":[{"cursor":[1],"styles":[],"text":"a"}],"n":1,"op":"ins"}],"pristine":false},"view_id":"view-id-1"}}
19264,3F9C 20:26:36.91623 RustTrace Generic @Response {"method":"scroll_to","params":{"col":1,"line":0,"view_id":"view-id-1"}}
19264,5614 20:26:37.50286 RustTrace Generic @Request {"method":"edit","params":{"method":"delete_backward","params":[],"view_id":"view-id-1"}}
19264,3F9C 20:26:37.50363 RustTrace Generic @Response {"method":"update","params":{"update":{"ops":[{"lines":[{"cursor":[0],"styles":[],"text":""}],"n":1,"op":"ins"}],"pristine":true},"view_id":"view-id-1"}}
19264,3F9C 20:26:37.50369 RustTrace Generic @Response {"method":"scroll_to","params":{"col":0,"line":0,"view_id":"view-id-1"}}
19264,5614 20:26:38.98490 RustTrace Generic @cleanup
```
As I've described in #17, I'm trying to figure out how to get good performance on resizing and also scrolling. It turns out to be quite tricky. I have a couple of approaches, and I'm trying to collect data on how close either is to being acceptable. Please test on your hardware and respond as a comment.

## All testers

Let me know OS version, graphics card, monitor size, DPI scaling. Please test master (or #18, if that hasn't been merged yet). The test procedure is:

```
git clone https://github.com/google/xi-win
cd xi-win/xi-win-shell
cargo run --example perftest --release
```

Does the spinner spin smoothly? Does the frame interval hold steady at 16-17ms? Does it still perform well if the window is nearly fullscreen?

Grab the *left* side of the window and resize. Does the window frame track the mouse? Is it smooth or is there jank? Does the diagonal line stay glued to the upper right corner or does it judder?

Don't worry too much about the spinning when resizing - for some reason it can get stuck when starting a move gesture. I also don't expect the frame interval to be consistent while resizing, though smoother is better.

## Windows 8.1 and higher

Also try the `flip_hwnd` branch. Master just uses hwnd render targets, but flip_hwnd uses a more sophisticated approach. In steady state, it uses DXGI swap chains (in the FLIP_SEQUENTIAL swap effect). However, flip presentation is not synchronized with window resize, so it switches to hwnd when resizing, then back to flip.

Do `git checkout flip_hwnd` then the same tests as above. Is there flashing or any artifact when entering and exiting sizing? Is performance roughly comparable?

## Multiple monitors / multiple GPUs

My main laptop is a Gigabyte Aero 14, which has integrated HD 630 and a GTX 1060 in an Optimus configuration. The laptop display is connected to integrated graphics, and the external monitor to discrete. It matters which GPU is selected (which is generally the "make this my main display" in display settings); performance is always degraded when crossing between the two.

Based on testing, I think I always want to draw with discrete graphics, at least in flip mode (in hwnd mode I don't seem to have the choice). How is performance affected when "make this my main display" is selected?

Higher frame rate monitors are also trickier? Does the frame interval hold steady at the faster rate?

Thanks in advance to the testers!
Currently the presentation strategy is hwnd render targets, which are older. A swapchain will provide better performance, but my experiments with swapchains (currently in the dxgi branch) show problems, especially with things like smooth window resizing.

I've [written up](https://raphlinus.github.io/personal/2018/04/08/smooth-resize.html) my explorations, and have also created a [thread](https://www.gamedev.net/forums/topic/696236-trying-to-figure-out-smooth-window-resize-with-direct2d/) on gamedev.net, as I've observed others struggling with this problem. In fact, artifacts and lag on window resize is an extremely common problem.

I'm offering a bounty of $2500 for a complete solution to this problem, see the blog for details. I've spent a lot of time on this (so much so it's gotten in the way of other progress), and, while I've learned a lot, feel like I'm getting to the end of that.
Hey Raph, 
    I've been working on xrl  trying to get it ready to start working on my front end over the next couple of months, but i'd like to see Xrl used by as many front ends as possible, at least the one's written in rust. I found in my early experience's with Xi writing the Update logic to be a bit tedious and error prone. Xrl handle's all of that logic(or it will after my PR is accepted) just requiring the user to pass a 'Update' to there line cache and Xrl handle's it appropriately. Multiple front ends using xrl would reduce duplication of work throughout the Xi community.

  It is already in use by little-dude/xi-tui and i plan on having my front end bytebuddha/Zen running by the end of this year(cant work on it until then, I've got a busy couple of months ), so i'm looking for smaller project's in the Xi ecosystem to work on in my free time.

I chose to try and convert xi-win first because:
    - It is small
    - Not much development going on at the moment
    - It's written in rust
    - As far as i know Xrl has never been tested on any OS other than Linux and i would prefer to get testing on both Mac & Windows.

So with that in mind a have a few question's:

  - What do you think of using Xrl as a common library for xi front ends
             - If not why?
  - Is xi-win in to early a stage to switch to using xrl?
  - Have you ever thought about a seperate(or internal in the xi repo?) library to handle all of xi-core front end protocol? (from a front ends point of view)
        - If you have could you share your thoughts on it?

Thank you so much for creating Xi, I've found it to be the perfect project to play with in my free time and has taught me alot!