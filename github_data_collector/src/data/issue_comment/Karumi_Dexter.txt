### :pushpin: References
* **Issue:** 
   #### Steps to reproduce ####
   Launch two activities consecutively, with each activity asking for any new permission(s) in `onCreate`
 
   #### Bug ####
   Callback for second activity's permission request will not be called sometimes

   #### Issue ####
   After the second activity sets up the `DexterInstance` with new callback, `DexterActivity` fired from the first activity permission request calls `onDestroy` and wipes the callback.

### :tophat: What is the goal?

   Make state clean up synchronous.

### :memo: How is it being implemented?

    

Manually clean up the state by calling `onActivityDestroyed` when there already is a `DexterActivity` that is finishing up. Then, when `DexterActivity` calls `onDestroyed`, no cleaning is needed.

### :robot: How can it be tested?

Since testing this requires mocking activity life cycle events. Suggestions are welcome.

Our Application need to block all the screenshots and Recording of screen. **com.karumi.dexter.DexterActivity** is not having **FLAG_SECURE** for the Screenshot protection. Shall we expect change in next version?


### Version of the library
4.2.0

I implemented this library to my project and now I'm trying to use it in fragment to get camera permission.
### Expected behaviour
After confirming I want to start camera fragment withaout application re-creation.

### Actual behaviour
After confirming I return to last state of application.
I tried to override the `onRequestPermissionsResult` method, but in this method I receive the GRANTED value (i.e. 0) in any cases (independently I click on `cancel` or `ok` button in permission dialog).

### Version of the library
last version (5.0.0)

### Expected behaviour
If any permission has requested on the code but hasn't declared on the manifest. We should provide a proper message to declare permission on manifest

### Actual behaviour
Not showing any message to declare in manifest

### Steps to reproduce
Execute the code without declaring camera permission on the manifest.

```kotlin
     Dexter.withActivity(context)
            .withPermission(Manifest.permission.CAMERA)
            .withListener(object : PermissionListener {
                override fun onPermissionGranted(response: PermissionGrantedResponse) {
                }

                override fun onPermissionDenied(response: PermissionDeniedResponse) {
                }

                override fun onPermissionRationaleShouldBeShown(
                    permission: com.karumi.dexter.listener.PermissionRequest,
                    token: PermissionToken
                ) {
                }
            }).withErrorListener {

            }.check()
```

### Version of the library
5.0.0

### Expected behaviour


### Actual behaviour


### Steps to reproduce
MainActivity permission allow then replace a fragment in activity. From fragment location permission checked with Dexter permission allow dialogue not appeared. 

    Dexter.withActivity(getActivity())
                        .withPermissions(
                                Manifest.permission.ACCESS_COARSE_LOCATION,
                                Manifest.permission.ACCESS_FINE_LOCATION
                        ).withListener(new MultiplePermissionsListener() {
                    @Override
                    public void onPermissionsChecked(MultiplePermissionsReport report) {
                        /* ... */

                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        /* ... */
                        // token.continuePermissionRequest();
                    }
                }).check();

### Version of the library


### Expected behaviour
In order to use MediaProjection you need to request for a permission in this way:
```
mMediaProjectionManager = (MediaProjectionManager) activity.getSystemService(Context.MEDIA_PROJECTION_SERVICE);
startActivityForResult(
                    mMediaProjectionManager.createScreenCaptureIntent(),
                    REQUEST_MEDIA_PROJECTION);
```

And then you're going to receive at
`onActivityResult(int requestCode, int resultCode, Intent data)`

The "data" you need to start mediaprojection; it would be great if this fantastic library add support for this, specially while using it from C++ side, where makes the things a lot easier.

### Actual behaviour
No way to do this.

### Steps to reproduce
No way to do this.


### Version of the library
5.0.0

How does Dexter deal with activity recreation?

By this I mean, I ask for permissions, permission dialog is shown, then I close the app and go to another. Android might kill the app after saving its state. When going back the whole stack is recreated and dialog should still be shown. But I don't see how you would retain the `PermissionListener` object.
Background:
1. The Dexter is a fragment inside ViewPager inside the main activity.
2. Requesting for "Locations" permissions.

Scenarios:
1. [OK] On the first time the app is running, Location is disabled, the dialog is shown up (onPermissionsChecked is activate and confirm the dialog does the work)

2. [OK] In the second time opening the app, Location is already enabled, dialog isn't shown up as it should be, and everything is ok.

3. [The problem] While the app is still running and I turn off the Location permission, when checking the permissions the "onPermissionRationaleShouldBeShown" is activate.
a. Why the dialog isn't shown up again?
b. Why it goes to "onPermissionRationaleShouldBeShown" callback?

4. [Still relates to the problem] In this callback I'm opening the permissions screen of my app, there I'm turn on the Location permission, and then press 'Back' until I return to the app, when checking the permissions again, non of the callbacks is called, neither "onPermissionsChecked" nor "onPermissionRationaleShouldBeShown".
Why?

5. [OK] Only when I clear the data of the app or reinstall it again, the dialog is shown as in (1).  


### Version of the library
5.0.0

### Code
```
    private void registerLocationUpdates() {
        Dexter.withActivity(getActivity())
                .withPermissions(Manifest.permission.ACCESS_COARSE_LOCATION,
                                 Manifest.permission.ACCESS_FINE_LOCATION)
                .withListener(new MultiplePermissionsListener() {
                    @Override public void onPermissionsChecked(MultiplePermissionsReport report) {
                        // check if all permissions are granted
                        if (report.areAllPermissionsGranted()) {
                            getMyLocation();
                        }
                        // check for permanent denial of any permission
                        if (report.isAnyPermissionPermanentlyDenied()) {
                            // permission is denied permenantly, navigate user to app settings
                        }
                    }
                    @Override public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {
                        showSettingsDialog();
                    }
                }).check();
    }

    /**
     * Showing Alert Dialog with Settings option
     * Navigates user to app settings
     * NOTE: Keep proper title and message depending on your app
     */
    private void showSettingsDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setTitle("Need Permissions");
        builder.setMessage("This app needs permission to use this feature. You can grant them in app settings.");
        builder.setPositiveButton("GOTO SETTINGS", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
                openSettings();
            }
        });
        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
            }
        });
        builder.show();

    }

    // navigating user to app settings
    private void openSettings() {
        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        Uri uri = Uri.fromParts("package", MyApp.getContext().getPackageName(), null);
        intent.setData(uri);
        startActivityForResult(intent, 101);
    }
```
### Expected behaviour
Check & listener methods should run as many times as it is called.

### Actual behaviour
Check & listener methods do not run 2nd time they are called.

### Steps to reproduce
Using listener methods to redirect to another activity to show rationale. Calling .check on 2nd time does nothing.

### Version of the library
Latest 5.0

### Expected behaviour
I want to help the user understand why my app needs a permission before showing android permission dialog. I'm using a helper dialog to explain that. I disabled the back press button on the helper dialog so the only way to close the dialog is to press  a button on the dialog. after user press the close button I consume token with token.continuePermissionRequest(); and android permission dialog is shown and everything should continue to be  working fine.

### Actual behaviour
when a helper dialog is displayed to user to explain why permission needed and user press on back button then clicks on dialog close button dexter does not work anymore anywhere and show nothing.

### Steps to reproduce

1. after the helper dialog is shown just press back button then continue.

`
@Override
    public void onPermissionRationaleShouldBeShown(PermissionRequest permission, PermissionToken token)
    {
        new AlertDialog.Builder(context).setTitle("test")
                .setMessage("test")
                .setCancelable(false)
                .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
                    @Override public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        token.continuePermissionRequest();
                    }
                })
                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                    @Override public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        token.continuePermissionRequest();
                    }
                })
                .setOnDismissListener(new DialogInterface.OnDismissListener() {
                    @Override public void onDismiss(DialogInterface dialog) {
                        token.continuePermissionRequest();
                    }
                })
                .show();

    }
`

  

`Dexter.withActivity(this)
                .withPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
                .withListener(dialogPermissionListener)
                .check();
`

### Version of the library

5.0.0