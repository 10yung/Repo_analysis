How to reproduce the issue:
Load the file below with the latest dnlib:
[Crack-Me2.zip](https://github.com/0xd4d/dnlib/files/4075912/Crack-Me2.zip)
save the file with/without modifying it. then OutOfMemoryException will occur after that.
I need help because i don't understand much about dnlib internal functions. The also error occurs when saving the file with dnspy.
Hello

I would like to implement some kind of way for dnlib to auto download missing framework references
from nuget on Linux systems, so before doing anything i just wanted to discuss about what would be 
acceptable way of implementing this.

My initial idea is to implement 2 new properties into resolver class that would be allow nuget downloading and, nuget cache folder that would probably be on temp by default or some folder in same folder as dnlib
and on Resolve method would add some kind of downloaded to get correct dll and place it in cache folder and resolve it
```
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Press Enter to run, otherwise modify assembly.");
        if (Console.ReadKey().Key == ConsoleKey.Enter)
            Console.WriteLine(My<string>.Test());
        else
        {
            var module = ModuleDefMD.Load(typeof(Program).Assembly.Location);
            module.Context = ModuleDef.CreateModuleContext();
            var importer = new Importer(module, ImporterOptions.TryToUseDefs, new GenericParamContext());
            var type = typeof(My<>);
            var fi = type.GetField("aa");
            var iField = importer.Import(fi);
            Console.WriteLine(iField.GetType());
            var instrs = module.FindNormal("My`1").FindMethod("Test").Body.Instructions;
            instrs.Clear();
            instrs.Add(OpCodes.Ldsfld.ToInstruction(iField));
            instrs.Add(OpCodes.Ret.ToInstruction());
            module.Write("output.exe");
            Console.WriteLine("OK");
        }
        Console.ReadKey();
    }
}

class My<T>
{
    public static int aa = 7;

    public static int Test()
    {
        return aa; //7E2B00000A   IL_0001: ldsfld    int32 class My`1<!T>::aa
    }
}
```

Compiler will generate `ldsfld MemberRef` in `Test()`
But when I use `importer.Import(fi)`, I will get a `ldsfld FieldDef`, and the output can't run.
```
var importer = new Importer(module, ImporterOptions.TryToUseDefs, new GenericParamContext(), new AssemblyVersionMapper(module));
importer.Import(mi);
```
After a lot of time, I find the reason: TypeDef.FindMethod failed because of PrivateScope.

I find more and more issues about PrivateScope, what's the meaning of PrivateScope? Why do you always check it? It works fine if don't check it.
Related issue https://github.com/0xd4d/dnlib/issues/209
A good example is ConfuserEx's anti tamper.
Just loading and saving the file with dnlib will remove the extra section injected by ConfuserEx and the assembly cannot be run or deobfuscated any further.
https://github.com/0xd4d/dnlib/blob/f67f9696bfafc119f89eae19d31f5ec48d140810/src/DotNet/Emit/DynamicMethodBodyReader.cs#L456

System.ArgumentException if contains generic

It works with this, but I'm not sure whether it allways works:
```return importer.Import(SR.FieldInfo.GetFieldFromHandle((RuntimeFieldHandle)obj, default(RuntimeTypeHandle)));```
1. What happens  with PrivateScope?
2. Why does TypeDef.FindMethod check PrivateScope even if the name and sig matches?
The most frequent error of dnlib is:
Error calculating max stack value....

Now, dnSpy & de4dot ref dnlib by nuget, not source, everytime I must debug de4dot.exe in dnSpy and breaking in WriteMethodBodies to view the method name. It's so troublesome.

1. Can you restore dnlib source instead of nuget? Not everyone is so skilled as you, we must debug with dnlib source to resolve our problem.

2.Can you show method name when occurs: Error calculating max stack value.... 



dnlib will preserve tokens if IsILOnly is false, that means even if I remove a generic method and all refs to it, dnlib will still write its MethodSpec, this will occur an error: A type was removed that is still referenced by this module.

Of course, I can disable PreserveMethodSpecRids, but I'm not sure whether it's safe? Becuase it won't preserve any MethodSpecs rather than only one MethodSpec.