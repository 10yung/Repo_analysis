Latest version still uses the deprecated "Name" property when creating DSC based requirement:

```powershell
  switch ($PSCmdlet.ParameterSetName) {
    "Script" {
      [Requirement]@{
        Namespace = $Namespace
        Describe  = $Describe
        Test      = $Test
        Set       = $Set
        DependsOn = $DependsOn
      }
    }
    "Dsc" {
      $dscParams = @{
        Name       = $ResourceName
        ModuleName = $ModuleName
        Property   = $Property
      }
      [Requirement]@{
        Name      = $Namespace
        Describe  = $Describe
        Test      = { Invoke-DscResource -Method "Test" @dscParams }.GetNewClosure()
        Set       = { Invoke-DscResource -Method "Set" @dscParams }.GetNewClosure()
        DependsOn = $DependsOn
      }
    }
  }
```

The DSC portion needs to be updated to
```powershell
      [Requirement]@{
        Namespace      = $Namespace
        Describe  = $Describe
        Test      = { Invoke-DscResource -Method "Test" @dscParams }.GetNewClosure()
        Set       = { Invoke-DscResource -Method "Set" @dscParams }.GetNewClosure()
        DependsOn = $DependsOn
      }
```

Would submit PR but don't have CLA...
We heavily rely on classes, which don't integrate well with `Import-Module`, which forces us to dot source a lot.  `using module` should solve our import woes.

Add 2 examples on how to perform IIS setup with the module
Missed some cases where Requirements failed to error correctly.  We should enumerate and test these cases:

| Methods | Scenario |
| - | - |
| `Test` | `Test` outputs a falsey value | 
| `Set` | `Set` throws an error |
| `Test` `Set` | `Test` fails both times it is called |
Right now, indentation seems to thrash between 2 spaces and 4 spaces.
Current error reporting:
![image](https://user-images.githubusercontent.com/3680671/64927095-10aadc80-d7bb-11e9-872b-dbaba4794143.png)

v1 behavior:
* Error is captured and printed after the Requirements output
* Exception callstack is printed with internal `Requirements` calls popped off.
Format-Checklist fails when passing a RequirementEvent[] object as a parameter. It should format the objects as it does when they are passed in from the pipeline.

Error:

```
Format-Checklist : Cannot bind parameter 'Date' to the target. Exception setting "Date": "Cannot convert null to type
"System.DateTime"."
At line:25 char:1
+ Format-Checklist -RequirementEvent $output   # fails
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : WriteError: (:) [Format-Checklist], ParameterBindingException
    + FullyQualifiedErrorId : ParameterBindingFailed,Format-Checklist

```

Code to reproduce:

```
$mySystem = [collections.generic.list[int]]::new()

$requirements = @(
    @{
        Name     = "Resource 1"
        Describe = "Resource 1 is present in the system"
        Test     = { $mySystem -contains 1 }
        Set      = { $mySystem.Add(1) | Out-Null; Start-Sleep 1 }
    },
    @{
        Name     = "Resource 2"
        Describe = "Resource 2 is present in the system"
        Test     = { $mySystem -contains 2 }
        Set      = { $mySystem.Add(2) | Out-Null; Start-Sleep 1 }
    }
)

$output = $requirements | Invoke-Requirement

$output | Format-Table | Out-Host            # works
Format-Table -InputObject $output | Out-Host # works

$output | Format-Checklist | Out-Host        # works
Format-Checklist -RequirementEvent $output   # fails

```
Topics that need to be covered
* What is a Requirement?
    * What does a single Requirement look like?
    * What are all the properties on a Requirement? 
    * Which properties are mandatory/optional?
* What are the major patterns for building Requirements?
    * Dynamically generating Requirements using control flow (`if`, `foreach`, etc)
    * "Getter/setter" pattern for getting properties of your system
    * "Generator function" pattern for returning Requirements from a function based on parameters
`Invoke-Requirement` should have a switch `-Parallel` that allows requirements to be executed in parallel according to the `Name` and `DependsOn` properties of each Requirement.

This opt-in feature would provide a major improvement over DSCâ€™s synchronous execution.