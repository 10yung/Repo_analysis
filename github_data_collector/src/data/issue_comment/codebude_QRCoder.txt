## Type of issue
[ ] Bug  
[ ] Question (e.g. about handling/usage)  
[X] Request for new feature/improvement  

Is it possible to add suport for opacity in hex values when generating qr codes?

## Expected Behavior
Bitmap qrCodeImage = qrCode.GetGraphic(1, #050303c2, #050303c2, true);
Im generating hex codes that come in 8 digits instead of the usual six.
If my tests are correct right now it only allows for 6 digits hex codes resulting in different color generated codes.



## .NET Framework / Registry Settings

Immediately after installing the QRCoder.DLL we have an intermittent (but frequent) issue where an important registry setting is changed by an application or process.  The OnlyUseLatestCLR registry setting (under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework) is getting set to "1" every few days and this is causing many of our SSRS reports to fail (claiming it cannot locate Microsoft.VisualBasic.DLL).  Resetting the flag back to "0" corrects the issue.   We've turned on registry auditing but I'd like to see if anyone is familiar with this issue.

My thoughts are that I may need to re-compile either the QRCoder.DLL using a .NET framework version that matches the server framework version, or recompile the consuming application using this version, or both.  Suggestions will be appreciated.

SQL Server 2012
Windows Server 2008 R2
QRCoder v1.3.6.0 / Runtime version v4.0.30319
Server .NET Frameworks:  v2.0.50727, v3.0, v4.0.30319

## Type of issue
- [ ] Bug  
- [ ] Question (e.g. about handling/usage)  
- [x] Request for new feature/improvement  

## Expected Behavior
Currently there is only a bool `drawQuietZones` to indicate the margin. However the size of the margin is calculated with `pixelsPerModule`
``` C#
var offset = drawQuietZones ? 0 : 4 * pixelsPerModule;
```
It would be great if there is a exact offset can be input and no need to dynamically generate the margin.

e.g.
``` C#
qrCode.GetGraphic(pixelsPerModule: 5, offset: 3);
```

## Your Environment
* Version used:  1.3.6
* Compiled from source or NuGet package?:  NuGet
* Used ECC-level:  L
* Used renderer class:  Base64QRCode
* Environment (.NET 3.5, .NET 4.X, .NETCore, ...):  .NET Core 3.1

From issue #97 there is a validation of the allowed characters in the swiss qr Code for the name field.
From my research i think that the + sign should be allowed.
For example in https://www.six-group.com/interbank-clearing/dam/downloads/en/standardization/iso/swiss-recommendations/archives/implementation-guidelines-ct/implementation-guidelines-ct_v1_6.pdf on Page 44 (Point 2.4.1 Character set).
Currently the - sign is allowed, but not the +
I have not tested it on the qr validation Portal since I don't have an account.
Could you do a change to allow the + sign in the regex Expression in PayloadGenerator.cs Line 924 charsetPattern = ...
## Type of issue
[X] Bug  
[ ] Question (e.g. about handling/usage)  
[ ] Request for new feature/improvement  

## Expected Behavior
The following is with respect to the standard "Schweizer Implementation Guidelines QR-Rechnung" version 2.0. The chapter 4.2.3 mandates that CR + LF separates fields, as opposed to delimit them. The table in chapter 4.3.3 mandates that the field QRCH/RmtInf/AddInf/AstrdBgkInf "Bill information" is an optional field. That is it must be delivered but can be empty. Thus if the field "Bill information" is empty, and the Alternative scheme parameters are not delivered, then the last 5 characters of the payload must be "EPD\r\n": the "\r\n" separates the field "Trailer" from the necessarily delivered field "Bill information", however "Bill information" is empty.

## Current Behavior
In the above-described scenario, the payload ends with "EPD", i.e. the trailing "\r\n" is missing.


Type of issue
[ ] Bug  
[X ] Question (e.g. about handling/usage)  
[ ] Request for new feature/improvement  

Sorry for bothering but im new to the usage of qr code but to my understanding you can enconde only in alphanumeric mode. Does the librabry allow that or only data mix mode? 
<!--
Thanks for submitting a pull request! Please provide enough information so that others can review your pull request.

A similar PR may already be submitted!
Please search among the Pull request before creating one: https://github.com/codebude/QRCoder/pulls?utf8=%E2%9C%93&q=

For more information, see the `CONTRIBUTING` guide.


**Summary**

<!-- Summarize your pull request in a couple of words -->

This PR fixes/implements the following **bugs/features**:

* Upgrade to support .NET Core 3.1

<!-- You can skip this if you're fixing a typo or other minor things -->

What existing problem does the pull request solve?

<!-- Example: When "Adding a function to do X", explain why it is necessary to have a way to do X. -->

**Test plan**
Sorry. Not tested.

Demonstrate that your code is solid. If possible add a short test case/test steps.

**Closing issues**

<!-- Put `closes #XXXX` (XXXX=issue number) in your comment to auto-close the issue that your PR fixes (if such). -->
None.

I generate two-dimensional code in PNG format in Linux container
It works normally, but I get "libpng error:No IDATS written info file" error message occasionally
This error message doesn't appear every time, but it's about one percent of the time
Is there any good solution?
**Summary**

Change the QRCodeGenerator.ModulePlacer.MaskCode so that it does not use reflection anymore. The version with reflection did not work for me in a Xamarin.Android release build (in debug it worked). My proposed version does more accurate type checking and should be faster than the original method too.

This PR fixes/implements the following **bugs/features**:

* [x] Bug: QRCode generation failed in Xamarin.Android release builds (AOT and LLVM optimization on, dont know if it makes a difference).

What existing problem does the pull request solve?

When generating QR codes in a Xamarin.Android release build I got this exception:

    System.NullReferenceException: Object reference not set to an instance of an object
      at QRCoder.QRCodeGenerator+ModulePlacer.MaskCode (QRCoder.QRCodeData& qrCode, System.Int32 version, System.Collections.Generic.List`1[QRCoder.QRCodeGenerator+Rectangle]& blockedModules, QRCoder.QRCodeGenerator+ECCLevel eccLevel) [0x00205] in <934e86b7640b49a4a7cb26c5bed64a9d>:0 
      at QRCoder.QRCodeGenerator.GenerateQrCode (System.String bitString, QRCoder.QRCodeGenerator+ECCLevel eccLevel, System.Int32 version) [0x0036b] in <934e86b7640b49a4a7cb26c5bed64a9d>:0 
      at QRCoder.QRCodeGenerator.GenerateQrCode (System.String plainText, QRCoder.QRCodeGenerator+ECCLevel eccLevel, System.Boolean forceUtf8, System.Boolean utf8BOM, QRCoder.QRCodeGenerator+EciMode eciMode, System.Int32 requestedVersion) [0x00081] in <934e86b7640b49a4a7cb26c5bed64a9d>:0 
      at QRCoder.QRCodeGenerator.CreateQrCode (System.String plainText, QRCoder.QRCodeGenerator+ECCLevel eccLevel, System.Boolean forceUtf8, System.Boolean utf8BOM, QRCoder.QRCodeGenerator+EciMode eciMode, System.Int32 requestedVersion) [0x00000] in <934e86b7640b49a4a7cb26c5bed64a9d>:0 

**Test plan**

I did the release build again and deployed it, now it works.

**Closing issues**

I did not create an issue regarding this yet.
When i call the following:
var ibanObject = new QRCoder.PayloadGenerator.SwissQrCode.Iban("CH3908704016075473007", QRCoder.PayloadGenerator.SwissQrCode.Iban.IbanType.QrIban);

Then, no exception occurs although this is a normal IBAN and not a valid Qr-Iban.
By definition, the swiss qr iban consists of a QR-IID in the range of 30000-31999 at the index 5-9 of the IBAN.
Further Information you can find in this document:
https://www.paymentstandards.ch/dam/downloads/qr-iid_qr-iban-de.pdf
at page 6 and 9

Kind regards,
gmi



