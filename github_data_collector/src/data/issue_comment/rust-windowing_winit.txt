I notice that sometime between version 0.20.0-alpha5 and 0.20.0, some parts of the event loop started reporting physical positions instead of logical ones: `CursorMoved::position` and `Touch::location` (with differing types; this seems okay). Conversely, `MouseScrollDelta::PixelDelta` still uses a `LogicalPostiion` (didn't check whether there are others).

I'm actually fine with this either way; converting is easy and the types catch any errors; it just seems like an oversight being inconsistent.

Additionally, my lib mostly uses physical positions internally (to avoid fractional positions / or limited GUI scaling), and using a physical position here would reduce the number of places the lib needs to track the DPI factor.
Unable to run window example on Windows 10. (Windows Settings -> Personalization -> colors=Light).

cargo run --example window

```
Finished dev [unoptimized + debuginfo] target(s) in 0.23s
Running `target\debug\examples\window.exe`
thread 'main' panicked at 'assertion failed: `(left == right)`
left: `1`,
right: `0`', src\platform_impl\windows\dark_mode.rs:135:13
stack backtrace:
0:     0x7ff6b813a189 - backtrace::backtrace::trace_unsynchronized
at C:\Users\VssAdministrator\.cargo\registry\src\github.com-1ecc6299db9ec823\backtrace-0.3.40\src\backtrace\mod.rs:66
1:     0x7ff6b813a189 - std::sys_common::backtrace::_print_fmt 
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\sys_common\backtrace.rs:77
2:     0x7ff6b813a189 - std::sys_common::backtrace::_print::{{impl}}::fmt
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\sys_common\backtrace.rs:61
3:     0x7ff6b814ea6b - core::fmt::write
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libcore\fmt\mod.rs:1028
4:     0x7ff6b81377e4 - std::io::Write::write_fmt<std::sys::windows::stdio::Stderr>
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\io\mod.rs:1412
5:     0x7ff6b813c929 - std::sys_common::backtrace::_print
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\sys_common\backtrace.rs:65
6:     0x7ff6b813c929 - std::sys_common::backtrace::print
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\sys_common\backtrace.rs:50
7:     0x7ff6b813c929 - std::panicking::default_hook::{{closure}}
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\panicking.rs:188
8:     0x7ff6b813c57c - std::panicking::default_hook
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\panicking.rs:205
9:     0x7ff6b813d17c - std::panicking::rust_panic_with_hook
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\panicking.rs:464
10:     0x7ff6b813ccf0 - std::panicking::continue_panic_fmt
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\panicking.rs:373
11:     0x7ff6b813cc34 - std::panicking::begin_panic_fmt
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\panicking.rs:328
12:     0x7ff6b80dc7e8 - winit::platform_impl::platform::dark_mode::set_dark_mode_for_window
at E:\Projects\Rust\winit\src\platform_impl\windows\dark_mode.rs:135
13:     0x7ff6b80dc456 - winit::platform_impl::platform::dark_mode::try_dark_mode
at E:\Projects\Rust\winit\src\platform_impl\windows\dark_mode.rs:91
14:     0x7ff6b8083ddd - winit::platform_impl::platform::window::init<()>
at E:\Projects\Rust\winit\src\platform_impl\windows\window.rs:754
15:     0x7ff6b80848c8 - winit::platform_impl::platform::window::Window::new<()>
at E:\Projects\Rust\winit\src\platform_impl\windows\window.rs:72
16:     0x7ff6b807e6e4 - winit::window::WindowBuilder::build<()>
at E:\Projects\Rust\winit\src\window.rs:333
17:     0x7ff6b807c25e - window::main
at E:\Projects\Rust\winit\examples\window.rs:11
18:     0x7ff6b807a2f0 - std::rt::lang_start::{{closure}}<()>
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\src\libstd\rt.rs:61
19:     0x7ff6b813cb37 - std::rt::lang_start_internal::{{closure}}
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\rt.rs:48
20:     0x7ff6b813cb37 - std::panicking::try::do_call<closure-0,i32>
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\panicking.rs:287
21:     0x7ff6b813faf2 - panic_unwind::__rust_maybe_catch_panic
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libpanic_unwind\lib.rs:78
22:     0x7ff6b813d4b2 - std::panicking::try
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\panicking.rs:265
23:     0x7ff6b813d4b2 - std::panic::catch_unwind
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\panic.rs:396
24:     0x7ff6b813d4b2 - std::rt::lang_start_internal
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\/src\libstd\rt.rs:47
25:     0x7ff6b807a2cb - std::rt::lang_start<()>
at /rustc/73528e339aae0f17a15ffa49a8ac608f50c6cf14\src\libstd\rt.rs:61
26:     0x7ff6b807c3c0 - main
27:     0x7ff6b81529c4 - invoke_main
at d:\agent\_work\3\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:78
28:     0x7ff6b81529c4 - __scrt_common_main_seh
at d:\agent\_work\3\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:288
29:     0x7ffa93f77bd4 - BaseThreadInitThunk
30:     0x7ffa94ccce71 - RtlUserThreadStart
error: process didn't exit successfully: `target\debug\examples\window.exe` (exit code: 101)
```
Fixing #1293

This change requires x11-dl crate
Also, I should send actual string in IME

- [ ] Tested on all platforms changed
- [ ] Compilation warnings were addressed
- [ ] `cargo fmt` has been run on this branch
- [ ] `cargo doc` builds successfully
- [ ] Added an entry to `CHANGELOG.md` if knowledge of this change could be valuable to users
- [ ] Updated documentation to reflect any user-facing changes, including notes of platform-specific behavior
- [ ] Created or updated an example program if it would help users understand this functionality
- [ ] Updated [feature matrix](https://github.com/rust-windowing/winit/blob/master/FEATURES.md), if new features were added or implemented

Some video drivers could set display metrics to odd values, which can result in
extra large scale factors (e.g. winit is sending 720 for 5k screen on nvidia
binary drivers), so let's just drop them to prevent clients from using them.
The value 20 was picked, because the DPR for 8k @ 5 inch is ~18.36.

- [x] Tested on all platforms changed
- [x] Compilation warnings were addressed
- [x] `cargo fmt` has been run on this branch
- [x] `cargo doc` builds successfully
- [x] Added an entry to `CHANGELOG.md` if knowledge of this change could be valuable to users
- [ ] Updated documentation to reflect any user-facing changes, including notes of platform-specific behavior
- [ ] Created or updated an example program if it would help users understand this functionality
- [ ] Updated [feature matrix](https://github.com/rust-windowing/winit/blob/master/FEATURES.md), if new features were added or implemented


This PR is more of a proposal. The original issue was here https://github.com/alacritty/alacritty/issues/3214 , as you can see in a log, DPR from winit is 718, which is literally insane. I see 2 options on how to fix such issues.

1 - Make winit compute DPI only if a randr value in use, otherwise return just 1 all the time. Qt is probably doing something similar IIRC
2 - Just try to ignore odd values (this PR is doing it).

The proposed `1` change is a breaking change, so I guess `2` option should fix some problems right now, however I feel like we should also implement `1` at some point to be more `native`, since auto DPI adjustments aren't something common for X11.
Right now clippy(stable branch) on `winit` (X11/Wayland backends) produces 1500 lines of warnings/errors, so I think it makes sense to at least take a look on them, since most of the time they actually make sense.
Hi ðŸ™‚ 

Since https://github.com/rust-windowing/winit/commit/6a330a2894873d29fbbfdeebfc1a215577213996 it is not possible to create multiple windows on Windows (10). It can be reproduced with `multiwindow` example. The single `window` example works fine though.

```
PS C:\Users\tester\Documents\GitHub\winit> $ENV:RUST_BACKTRACE = "full"
PS C:\Users\tester\Documents\GitHub\winit> cargo run --example multiwindow
```

```
    Finished dev [unoptimized + debuginfo] target(s) in 0.36s
     Running `target\debug\examples\multiwindow.exe`
thread 'main' panicked at 'already mutably borrowed: BorrowError', src\libcore\result.rs:1165:5
stack backtrace:
   0:     0x7ff6b2f461c9 - backtrace::backtrace::trace_unsynchronized
                               at C:\Users\VssAdministrator\.cargo\registry\src\github.com-1ecc6299db9ec823\backtrace-0.3.37\src\backtrace\mod.rs:66
   1:     0x7ff6b2f461c9 - std::sys_common::backtrace::_print_fmt
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\sys_common\backtrace.rs:76   2:     0x7ff6b2f461c9 - std::sys_common::backtrace::_print::{{impl}}::fmt
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\sys_common\backtrace.rs:60   3:     0x7ff6b2f5adfb - core::fmt::write
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libcore\fmt\mod.rs:1030
   4:     0x7ff6b2f433a4 - std::io::Write::write_fmt<std::sys::windows::stdio::Stderr>
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\io\mod.rs:1412
   5:     0x7ff6b2f48960 - std::sys_common::backtrace::_print
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\sys_common\backtrace.rs:64   6:     0x7ff6b2f48960 - std::sys_common::backtrace::print
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\sys_common\backtrace.rs:49   7:     0x7ff6b2f48960 - std::panicking::default_hook::{{closure}}
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\panicking.rs:196
   8:     0x7ff6b2f4858a - std::panicking::default_hook
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\panicking.rs:210
   9:     0x7ff6b2f491b8 - std::panicking::rust_panic_with_hook
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\panicking.rs:473
  10:     0x7ff6b2f48d24 - std::panicking::continue_panic_fmt
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\panicking.rs:380
  11:     0x7ff6b2f48c09 - std::panicking::rust_begin_panic
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\panicking.rs:307
  12:     0x7ff6b2f57469 - core::panicking::panic_fmt
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libcore\panicking.rs:85
  13:     0x7ff6b2f5756f - core::result::unwrap_failed
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libcore\result.rs:1165
  14:     0x7ff6b2f02aaf - core::result::Result<core::cell::Ref<core::option::Option<winit::platform_impl::platform::event_loop::runner::EventLoopRunner<()>>>, core::cell::BorrowError>::expect<core::cell::Ref<core::option::Option<winit::platform_impl::platform::event_loop::runner::
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\src\libcore\result.rs:960
  15:     0x7ff6b2ef517c - core::cell::RefCell<core::option::Option<winit::platform_impl::platform::event_loop::runner::EventLoopRunner<()>>>::borrow<core::option::Option<winit::platform_impl::platform::event_loop::runner::EventLoopRunner<()>>>
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\src\libcore\cell.rs:788
  16:     0x7ff6b2ef8508 - winit::platform_impl::platform::event_loop::runner::ELRShared<()>::send_event<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop\runner.rs:133
  17:     0x7ff6b2e8196b - winit::platform_impl::platform::event_loop::SubclassInput<()>::send_event<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop.rs:104
  18:     0x7ff6b2e858ec - winit::platform_impl::platform::event_loop::public_window_callback<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop.rs:1367
  19:     0x7ffe8273b88a - DefSubclassProc
  20:     0x7ffe8273b745 - DefSubclassProc
  21:     0x7ffe97117446 - DispatchMessageW
  22:     0x7ffe9711716c - DispatchMessageW
  23:     0x7ffe97120a23 - EnumChildWindows
  24:     0x7ffe99ea3494 - KiUserCallbackDispatcher
  25:     0x7ffe96ed1184 - NtUserMessageCall
  26:     0x7ffe97114b16 - GetWindowTextW
  27:     0x7ffe97114488 - GetWindowTextW
  28:     0x7ffe97117446 - DispatchMessageW
  29:     0x7ffe9711716c - DispatchMessageW
  30:     0x7ffe97120a23 - EnumChildWindows
  31:     0x7ffe99ea3494 - KiUserCallbackDispatcher
  32:     0x7ffe96ed1b84 - NtUserShowWindow
  33:     0x7ff6b2efcf76 - winit::platform_impl::platform::window_state::WindowFlags::apply_diff
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\window_state.rs:245
  34:     0x7ff6b2e8052f - winit::platform_impl::platform::window_state::WindowState::set_window_flags<closure-0>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\window_state.rs:141
  35:     0x7ff6b2e7f722 - winit::platform_impl::platform::window::{{impl}}::set_visible::{{closure}}
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\window.rs:131
  36:     0x7ff6b2e87a1b - winit::platform_impl::platform::event_loop::EventLoopThreadExecutor::execute_in_thread<closure-0>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop.rs:420
  37:     0x7ff6b2e77491 - winit::platform_impl::platform::window::Window::set_visible
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\window.rs:130
  38:     0x7ff6b2e7ef68 - winit::platform_impl::platform::window::init<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\window.rs:779
  39:     0x7ff6b2e7f858 - winit::platform_impl::platform::window::Window::new<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\window.rs:72
  40:     0x7ff6b2e88014 - winit::window::WindowBuilder::build<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\window.rs:333
  41:     0x7ff6b2e8812a - winit::window::Window::new<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\window.rs:359
  42:     0x7ff6b2e72b6b - multiwindow::main::{{closure}}
                               at C:\Users\tester\Documents\GitHub\winit\examples\multiwindow.rs:42
  43:     0x7ff6b2e81834 - winit::platform_impl::platform::event_loop::{{impl}}::run_return::{{closure}}<(),closure-0>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop.rs:207
  44:     0x7ff6b2f06923 - alloc::boxed::{{impl}}::call_mut<(winit::event::Event<()>, mut winit::event_loop::ControlFlow*),FnMut<(winit::event::Event<()>, mut winit::event_loop::ControlFlow*)>>
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\src\liballoc\boxed.rs:929
  45:     0x7ff6b2efadc6 - winit::platform_impl::platform::event_loop::runner::{{impl}}::call_event_handler::{{closure}}<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop\runner.rs:563
  46:     0x7ff6b2f11896 - std::panic::{{impl}}::call_once<(),closure-0>
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\src\libstd\panic.rs:315
  47:     0x7ff6b2f25e02 - std::panicking::try::do_call<std::panic::AssertUnwindSafe<closure-0>,()>
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\src\libstd\panicking.rs:292
  48:     0x7ff6b2f4bcd2 - panic_unwind::__rust_maybe_catch_panic
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libpanic_unwind\lib.rs:80
  49:     0x7ff6b2f25c63 - std::panicking::try<(),std::panic::AssertUnwindSafe<closure-0>>
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\src\libstd\panicking.rs:271
  50:     0x7ff6b2f118d6 - std::panic::catch_unwind<std::panic::AssertUnwindSafe<closure-0>,()>
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\src\libstd\panic.rs:394
  51:     0x7ff6b2efab30 - winit::platform_impl::platform::event_loop::runner::EventLoopRunner<()>::call_event_handler<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop\runner.rs:561
  52:     0x7ff6b2efa091 - winit::platform_impl::platform::event_loop::runner::EventLoopRunner<()>::process_event<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop\runner.rs:437
  53:     0x7ff6b2ef8d9b - winit::platform_impl::platform::event_loop::runner::ELRShared<()>::send_event_unbuffered<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop\runner.rs:161
  54:     0x7ff6b2ef8831 - winit::platform_impl::platform::event_loop::runner::ELRShared<()>::send_event<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop\runner.rs:150
  55:     0x7ff6b2e8196b - winit::platform_impl::platform::event_loop::SubclassInput<()>::send_event<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop.rs:104
  56:     0x7ff6b2e83782 - winit::platform_impl::platform::event_loop::public_window_callback<()>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop.rs:940
  57:     0x7ffe8273b88a - DefSubclassProc
  58:     0x7ffe8273b745 - DefSubclassProc
  59:     0x7ffe97117446 - DispatchMessageW
  60:     0x7ffe97116f62 - DispatchMessageW
  61:     0x7ff6b2e813d8 - winit::platform_impl::platform::event_loop::EventLoop<()>::run_return<(),closure-0>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop.rs:235
  62:     0x7ff6b2e8189e - winit::platform_impl::platform::event_loop::EventLoop<()>::run<(),closure-0>
                               at C:\Users\tester\Documents\GitHub\winit\src\platform_impl\windows\event_loop.rs:192
  63:     0x7ff6b2e88516 - winit::event_loop::EventLoop<()>::run<(),closure-0>
                               at C:\Users\tester\Documents\GitHub\winit\src\event_loop.rs:148
  64:     0x7ff6b2e890f5 - multiwindow::main
                               at C:\Users\tester\Documents\GitHub\winit\examples\multiwindow.rs:18
  65:     0x7ff6b2e7de40 - std::rt::lang_start::{{closure}}<()>
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\src\libstd\rt.rs:64
  66:     0x7ff6b2f48b67 - std::rt::lang_start_internal::{{closure}}
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\rt.rs:49
  67:     0x7ff6b2f48b67 - std::panicking::try::do_call<closure-0,i32>
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\panicking.rs:292
  68:     0x7ff6b2f4bcd2 - panic_unwind::__rust_maybe_catch_panic
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libpanic_unwind\lib.rs:80
  69:     0x7ff6b2f494f2 - std::panicking::try
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\panicking.rs:271
  70:     0x7ff6b2f494f2 - std::panic::catch_unwind
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\panic.rs:394
  71:     0x7ff6b2f494f2 - std::rt::lang_start_internal
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\/src\libstd\rt.rs:48
  72:     0x7ff6b2e7de1b - std::rt::lang_start<()>
                               at /rustc/4560ea788cb760f0a34127156c78e2552949f734\src\libstd\rt.rs:64
  73:     0x7ff6b2e89280 - main
  74:     0x7ff6b2f5ed24 - invoke_main
                               at d:\agent\_work\2\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:78
  75:     0x7ff6b2f5ed24 - __scrt_common_main_seh
                               at d:\agent\_work\2\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:288
  76:     0x7ffe98827974 - BaseThreadInitThunk
  77:     0x7ffe99e6a271 - RtlUserThreadStart
error: process didn't exit successfully: `target\debug\examples\multiwindow.exe` (exit code: 0xc0000409, STATUS_STACK_BUFFER_OVERRUN)
```
Would it be possible to provide glutin with the initial background color to which a Glutin window can be set?

The feature can be very useful to handle the perceived performance of startup time where on some platforms, due to GPU problems, the window starts with an ugly white color then renders.
- [ ] Tested on all platforms changed
- [x] Compilation warnings were addressed
- [x] `cargo fmt` has been run on this branch
- [ ] `cargo doc` builds successfully
- [ ] Added an entry to `CHANGELOG.md` if knowledge of this change could be valuable to users
- [ ] Updated documentation to reflect any user-facing changes, including notes of platform-specific behavior
- [ ] Created or updated an example program if it would help users understand this functionality
- [ ] Updated [feature matrix](https://github.com/rust-windowing/winit/blob/master/FEATURES.md), if new features were added or implemented

Fixes #1386

I'm wondering if it would make sense to add tab support to this project's scope. I think tabs at least Win32 and OSX are tightly coupled to the concept of windows, and it would be a great addition as first class citizen of Winit. 

If interested, I can definitely fork and experiment with the idea. I know at least on Cocoa tabs are straight forward to implement.
It seems like on macOS, not all modifier changes cause a `ModifiersChanged` event, regardless of focus. This has been initially reported to Alacritty in https://github.com/alacritty/alacritty/issues/3206.

Looking at the output of the event log, there seems to be a key event with `modifiers: LOGO` attached, without any prior `ModifiersChanged` event. The Window is in full focus at this point and has not had any modifier or focus changes since then.

The following log contains only the relevant information, full log can be found in the issue. It has been filtered using `grep -E ".*event: (KeyboardInput|ReceivedCharacter|Focused|(DeviceEvent.*ModifiersChanged))"`.

```
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: Focused(true) }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 41, state: Pressed, virtual_keycode: Some(Semicolon), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: ReceivedCharacter(';') }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 41, state: Released, virtual_keycode: Some(Semicolon), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 8, state: Pressed, virtual_keycode: Some(C), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: ReceivedCharacter('c') }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 8, state: Released, virtual_keycode: Some(C), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 37, state: Pressed, virtual_keycode: Some(L), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: ReceivedCharacter('l') }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 51, state: Pressed, virtual_keycode: Some(Back), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: ReceivedCharacter('\u{7f}') }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 51, state: Released, virtual_keycode: Some(Back), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 51, state: Pressed, virtual_keycode: Some(Back), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: ReceivedCharacter('\u{7f}') }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 51, state: Released, virtual_keycode: Some(Back), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 51, state: Pressed, virtual_keycode: Some(Back), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: ReceivedCharacter('\u{7f}') }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 51, state: Released, virtual_keycode: Some(Back), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 37, state: Released, virtual_keycode: Some(L), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 9, state: Pressed, virtual_keycode: Some(V), modifiers: LOGO }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: ReceivedCharacter('v') }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 9, state: Released, virtual_keycode: Some(V), modifiers: LOGO }, is_synthetic: false } }
glutin event: DeviceEvent { device_id: DeviceId(DeviceId), event: ModifiersChanged((empty)) }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 123, state: Pressed, virtual_keycode: Some(Left), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 123, state: Released, virtual_keycode: Some(Left), modifiers: (empty) }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 55, state: Pressed, virtual_keycode: Some(LWin), modifiers: LOGO }, is_synthetic: false } }
glutin event: DeviceEvent { device_id: DeviceId(DeviceId), event: ModifiersChanged(LOGO) }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: KeyboardInput { device_id: DeviceId(DeviceId), input: KeyboardInput { scancode: 13, state: Pressed, virtual_keycode: Some(W), modifiers: LOGO }, is_synthetic: false } }
glutin event: WindowEvent { window_id: WindowId(Id(140354613817120)), event: ReceivedCharacter('w') }
```

There are no synthetic events sent, so that shouldn't be an issue either (they're not implemented on macOS anyways afaik). What surprised me a bit was that there were only two DeviceEvents, since I'm used to a lot more on Linux, but that might be normal.