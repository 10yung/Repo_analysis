Hello, first of all thanks for this great package. I have a problem about turkish characters. For example my title is : "E-Ticaret Güvenlik Önlemleri", my slug is : "e-ticaret-guevenlik-oenlemleri" but it should be "e-ticaret-guvenlik-onlemleri" right ? So how can I fix this problem ? Which file should I edit ?

Thanks for replies guys.
ErrorException
implode(): Passing glue string after array is deprecated. Swap the parameters

Illuminate\Foundation\Bootstrap\HandleExceptions::handleError
:141
C:\xampp\htdocs\foodcash\vendor\cviebrock\eloquent-sluggable\src\Services\SlugService.php:141

This pull request is a backport of #486 to version 4.4.

Since 4.4 is the branch for Laravel 5.5 (LTS) which is still active until [Aug 30th, 2020](https://laravel-news.com/laravel-release-process), this fix enables PHP 7.4 + Laravel 5.5 cohabitance for this package.
hi there,
`unique` and slug `separator ` don't work in options !
My code:
`public function sluggable()
    {
        return [
            'slug' => [
                'source' => 'title',
                'separator' => '/',
            ]
        ];
    }`

when `my post` sent as slug, this converted to `my-post` not `my/post`
Hello,
I'm not getting eloquent-sluggable working correctly. This is my project. 

**UPDATE**
I added all configurations directly to the model. It worked. However I can't find out how to load the config.php.
```php
return [
            'slug' => [
                'source'             => null,
                'maxLength'          => null,
                'maxLengthKeepWords' => true,
                'method'             => null,
                'separator'          => '-',
                'unique'             => true,
                'uniqueSuffix'       => null,
                'includeTrashed'     => false,
                'reserved'           => null,
                'onUpdate'           => false,
                'source' => 'name'
            ]
        ];
```

This is my model:
```php
<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Cviebrock\EloquentSluggable\Sluggable;

class Illustration extends Model
{
    use Sluggable;

    public function sluggable()
    {
        return [
            'slug' => [
                'source' => 'name'
            ]
        ];
    }


    public function collection() {
        return $this->belongsTo(Collection::class);
    }
}
```

This is my factory:
```php
$factory->define(Illustration::class, function (Faker $faker) {
    return [
        'user_id' => rand(1,100) ,
        'collection_id' => rand(1,100) ,
        'name' => $faker->sentence,
        'description' => $faker->realText(200),
        'file' => 'exmaple.png',
        'tags' => 'illustration,modern',
    ];
});
```

If I run `php artisan migrate:fresh --seed` it will give me this error when trying to seed the illustration table. 

```

   ErrorException  : Undefined index: onUpdate

  at C:\xampp2\htdocs\interfacy2\vendor\cviebrock\eloquent-sluggable\src\Services\SlugService.php:106
    102|      */
    103|     protected function needsSlugging(string $attribute, array $config): bool
    104|     {
    105|         if (
  > 106|             $config['onUpdate'] === true ||
    107|             empty($this->model->getAttributeValue($attribute))
    108|         ) {
    109|             return true;
    110|         }

  Exception trace:

  1   Illuminate\Foundation\Bootstrap\HandleExceptions::handleError("Undefined index: onUpdate", "C:\xampp2\htdocs\interfacy2\vendor\cviebrock\eloquent-sluggable\src\Services\SlugService.php", ["slug"])
      C:\xampp2\htdocs\interfacy2\vendor\cviebrock\eloquent-sluggable\src\Services\SlugService.php:106

  2   Cviebrock\EloquentSluggable\Services\SlugService::needsSlugging("slug", ["name"])
      C:\xampp2\htdocs\interfacy2\vendor\cviebrock\eloquent-sluggable\src\Services\SlugService.php:82

  Please use the argument -v to see more details.
```

I think the issue is related to the config but I'm not able to get it working. 

I tried to use following config option 

```
'method' => function( $string, $sep ) {
        $result = str_slug(\Patchwork\Utf8::toAscii($string));
        if(empty($result)){
            $result = "user".time();
        }
        return $result;
    },
```
and I got the following error while caching configuration files.

```
In ConfigCacheCommand.php line 71:
  Your configuration files are not serializable.
In config.php line 566:
  Call to undefined method Closure::__set_state()
```

![image](https://user-images.githubusercontent.com/1541412/67561518-4ed1df00-f71d-11e9-833c-97f05b72e66e.png)

Laravel config cache is not supporting closures. Do you have any ideas to fix this problem?


This allows to specify a custom field separator between sources defined in model's ```sluggable()``` method.

The main use case is to generate slugs for nested models, such as folders or categories, but can be used for anything having more than one source field.

Nothing changes compared to before, except when you define multiple sources:

```
public function sluggable()
{
    return [
        'slug' => [
            'source' => ['parent_slug', 'name'],
            'field_separator' => '/'
        ],
    ];
}
```

Now, ```parent_slug``` and ```name``` will be separated by a customisable character (by default, "/"). Generated slug could look like that:

```
/blog/development/web/php/my_cool_post
```

The *field_separator* can be customised in the _config/sluggable.php_ file, or directly in the model as shown above. 
_I have model in package, which use Sluggable:_

**StarterKit\Core\Models\Category.php**
```php
<?php

namespace StarterKit\Core\Models;

use Illuminate\Database\Eloquent\Model;
use Spatie\Translatable\HasTranslations;
use Cviebrock\EloquentSluggable\Sluggable;
use Kalnoy\Nestedset\NodeTrait;

class Category extends Model
{
    use HasTranslations;
    use NodeTrait, Sluggable {
        Sluggable::replicate as replicateSluggable;
        NodeTrait::replicate insteadof Sluggable;
    }

    public $translatable = ['name'];

    protected $table = 'categories';

    protected $fillable = [
        'name',
        'slug',
        'parent_id',
        'owner'
    ];
    
    public function sluggable()
    {
        return [
            'slug' => [
                'source' => 'name'
            ]
        ];
    }

}
```

When i try to create new record, sluggable won't fill slug field. And i get error:
`SQLSTATE[HY000]: General error: 1364 Field 'slug' doesn't have a default value`
![error](https://user-images.githubusercontent.com/21194702/65792442-92204880-e185-11e9-8c59-b52cddc47b67.png)


**But when i use model Category with same data in App\Models namespace, all work fine..**

**App\Models\Category.php**
```php
<?php
 
namespace App\Models;
 
use Illuminate\Database\Eloquent\Model;
use Spatie\Translatable\HasTranslations;
use Cviebrock\EloquentSluggable\Sluggable;
use Kalnoy\Nestedset\NodeTrait;
 
class Category extends Model
{
    use HasTranslations;
    use NodeTrait, Sluggable {
        Sluggable::replicate as replicateSluggable;
        NodeTrait::replicate insteadof Sluggable;
    }
 
    public $translatable = ['name'];
    protected $table = 'categories';
    protected $fillable = ['name', 'slug', 'parent_id', 'owner'];
 
    public function sluggable()
    {
        return [
            'slug' => [
                'source' => 'name'
            ]
        ];
    }
}
```
![success](https://user-images.githubusercontent.com/21194702/65792476-acf2bd00-e185-11e9-8347-f0f880d885d6.png)

 public function sluggable()
    {
        return [
            'slug' => [
                'source' => 'subject'
            ]
        ];
    }

After doing this and having the slug in my Database, posts appears more than once in my view
Hi Colin,

first: thanks for the great package you created!

Here is my issue:
I would like to **deactivate** the auto lowercase functions when a slug is generated. 
To create the slugs, your package relies on [cocur/slugify](https://github.com/cocur/slugify), correct?

They have an option to deactivate the [lowercase function,](https://github.com/cocur/slugify#more-options) e.g.:

```php
$slugify = new Slugify(['lowercase' => false]);
$slugify->slugify('Hello World'); // -> "Hello-World"
```

How can i set this function in your **customizeSlugEngine** function?

```php
public function customizeSlugEngine(Slugify $engine, $attribute)
{
    $engine->????;

    return $engine;
}
```


**Thank you!**
