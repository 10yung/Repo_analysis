<!--- Provide a general summary of the issue in the Title above, prefixed with (packageName) -->
Unable to install KB3035131 over openssh on Windows-7-x86. This package is a dependency of  vcredist140. openssh is configured to use windows powershell 5.1 as the default shell. I am able to install other packages using choco over openssh. The account being used has administrator privileges. When physically logged (RDP or physically at the machine) onto the machine running `choco install -y KB3035131` works.

This issue appears to be the similar to #1002 and (https://github.com/hashicorp/packer/issues/6156). 

## Expected Behavior
<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->
KB3035131 should install

## Current Behavior
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->
KB3035131 fails to install with given error message. Attached ZIP contains the event log.
[KB3035131.Install.zip](https://github.com/chocolatey-community/chocolatey-coreteampackages/files/4055887/KB3035131.Install.zip)

```ps
PS C:\Users\engineer> choco install kb3035131 -y
Chocolatey v0.10.15                                                                                                                                                                 Installing the following packages:
kb3035131
By installing you accept licenses for the packages.                                                                                                                                 Progress: Downloading KB3035131 1.0.3... 100%

KB3035131 v1.0.3 [Approved]
kb3035131 package files install completed. Performing other installation steps.                                                                                                     Downloading KB3035131 32 bit
  from 'https://download.microsoft.com/download/8/A/3/8A3E90CC-AEC3-4645-8CF3-2BD205E26B5E/Windows6.1-KB3035131-x86.msu'                                                            Progress: 100% - Completed download of C:\Users\engineer\AppData\Local\Temp\chocolatey\KB3035131\1.0.3\Windows6.1-KB3035131-x86.
msu (6.32 MB).
Download of Windows6.1-KB3035131-x86.msu (6.32 MB) completed.                                                                                                                       Hashes match.
Installing KB3035131...
WARNING: User (you) cancelled the installation.                                                                                                                                     WARNING: Update KB3035131 installation failed (exit code 5).
WARNING: More details may be found in the installation log (C:\Users\engineer\AppData\Local\Temp\chocolatey\KB3035131.Install.ev
t) or the system CBS log (C:\Windows\Logs\CBS\CBS.log).                                                                                                                             ERROR: Update KB3035131 installation failed (exit code 5).
The install of kb3035131 was NOT successful.
Error while running 'C:\ProgramData\chocolatey\lib\KB3035131\Tools\ChocolateyInstall.ps1'.
 See log for details.                                                                                                                                                               
Chocolatey installed 0/1 packages. 1 packages failed.
 See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).

Failures
 - kb3035131 (exited 5) - Error while running 'C:\ProgramData\chocolatey\lib\KB3035131\Tools\ChocolateyInstall.ps1'.
 See log for details.                          
```

## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->
Seeing the related issue used an elevated prompt to solve the issue I tried.
`Start-Process powershell -ArgumentList "-Command choco install -y kb3035131 | out-file log.txt" -Verb RunAs -Wait` and `powershell -executionpolicy bypass "Start-Process powershell -ArgumentList '-executionpolicy bypass -Command choco install -y kb3035131 | out-file log.txt' -Verb RunAs -Wait"` with neither working.

## Context
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->
I'm trying to provision Windows 7 x86 computers over openssh using windows powershell.

## Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->
* Package Version used: 1.0.3
* Operating System and version: Windows 7 x86
* Chocolatey version: 0.10.15
* Install/uninstall gist: `choco install -y kb3035131`

C:\windows\system32>cinst gitextensions
Chocolatey v0.10.15 Business
Installing the following packages:
gitextensions
By installing you accept licenses for the packages.
Progress: Downloading gitextensions 3.3.1... 100%

**gitextensions v3.3.1 [Approved]**
gitextensions package files install completed. Performing other installation steps.
**Installing GitExtensions-3.3.0.7886.msi...
GitExtensions-3.3.0.7886.msi has been installed.**
Added C:\ProgramData\chocolatey\bin\gitex.exe shim pointed to 'c:\program files (x86)\gitextensions\gitex.cmd'.
gitextensions may be able to be automatically uninstalled.
Environment Vars (like PATH) have changed. Close/reopen your shell to
see the changes (or in powershell/cmd.exe just type refreshenv).
The install of gitextensions was successful.
Software install location not explicitly set, could be in package or
default install location if installer.

Chocolatey installed 1/1 packages.
See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).
## Expected Behavior
With winscp.portable (and likely winscp.installer too), the file WinSCP.com should get a shim.

## Current Behavior
WinSCP.exe gets a shim during installation, but WinSCP.com doesn't.

## Context
WinSCP.com is the console-only version which can be used in automated scripts, etc.  It's possible to use `WinSCP.exe /console` for some situations, but exit codes don't work the same way.

Very rarely is upgrading to the latest stable release on the day it comes out a good idea, because most python package developers are not preparing for it by testing against the alpha. Most are one major release behind, with Python 3.8 still not supported by any different packages even though it's been out for months now.

Python keeps roughly 3 to 4 major versions up to date all at once due to the major compatibility differences between them, so when a new 3.8 build is out, a new 3.7 build is out on the same day, and you'd only really be able to install it on Chocolatey by removing any pins you may have, verifying the new version in the version history (and 3.7 is so far down now you have to click on 'see more' to see it), installing that exact version manually, and then re-pinning.

So in my opinion it doesn't really make much sense to have a single python3 package, I think it would be better to have python36, python37, python38, python39, etc.
The Firefox Installer support a range of command-line options [1]. This package currently has no support for them. The command-line options are useful i.e for defining if a desktop shortcut should be created, if the configurations set through distribution/policies.json should be kept and a few more.

## Expected Behavior
Command-line Options can be passed to the installer through the --params mechanism.

## Current Behavior
As a workaround command line options can be passed using --install-arguments or -ia. But this does not allow to check for correct input or to set defaults in the package which differ from the installer defaults.

## Possible Solution
Implement package parameters in the package. An example implementation could be seen in the Wazuh agent package [2]. 

1: https://firefox-source-docs.mozilla.org/browser/installer/windows/installer/FullConfig.html
2: https://github.com/itigoag/chocolatey.wazuh-agent/blob/master/package/tools/chocolateyinstall.ps1
update tags

Update description of wps-office-free
Delete old version and turn them into symlinks to new version.

<!-- Provide a general summary of your changes in the Title above, prefixed with (packageName) -->

## Description
<!-- Describe your changes in detail -->
Overwrite old version's directory with symlink to new version's directory.
When there are already symlinks, relink it.
This example illustrates my aim:
```
**First install
C:\tools\vim\vim80

**Updated to vim81
C:\tools\vim\vim80 -> vim81
C:\tools\vim\vim81

**Updated to vim82
C:\tools\vim\vim80 -> vim82
C:\tools\vim\vim81 -> vim82
C:\tools\vim\vim82
```
## Motivation and Context
<!-- Why is this change required? What problem does it solve? -->
Current vim package doesn't delete old version when minor version upgraded.
Vim's minor version has updated recently, and now most users have two versions on their machine.
```
**Current situation
C:\tools\vim\vim81
C:\tools\vim\vim82
```
This is actually my mistake. I overlooked this upgrade scenario when I fixed this package.

This change turns `vim81` into symlink to `vim82` so that we can keep using the old path.
This is very convenient because we don't have to change taskber icon, tile on Start and all other settings which uses vim's path.
<!-- If it fixes an open issue, please link to the issue here. -->
<!-- Use fixes/fixed when referencing the issue -->
In this change, I had to use `mklink` and `rmdir` in `cmd.exe` because `New-Item -ItemType SymbolicLink` fails on test-env and Powershell can't unlink directory symlinks. It will delete link-target directory's
contents too.

## How Has this Been Tested?
<!-- Please describe in detail how you tested your changes. -->
I tested in the chocolatey test environment.
<!-- Include details of your testing environment, and the tests you ran to -->
Install, upgrade scenario. 
<!-- see how your change affects other areas of the script, etc. -->

## Screenshot (if appropriate, usually isn't needed):

## Types of changes
<!-- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [x] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)
- [ ] Migrated package (a package has been migrated from another repository)

## Checklist:
<!-- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!-- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] My code follows the code style of this repository.
- [ ] My change requires a change to documentation (this usually means the notes in the description of a package).
- [ ] I have updated the documentation accordingly (this usually means the notes in the description of a package).
- [x] All files are up to date with the latest [Contributing Guidelines](https://github.com/chocolatey/chocolatey-coreteampackages/blob/master/CONTRIBUTING.md)
- [x] The added/modified package passed install/uninstall in the chocolatey test environment.
- [x] The changes only affect a single package (not including meta package).

<!-- Provide a general summary of your changes in the Title above, prefixed with (packageName) -->
Changed "touch" alias into New-Item to fix #1398 
## Description
<!-- Describe your changes in detail -->
Changed the touch in the after install part of the script, to avoid shimgen
## Motivation and Context
<!-- Why is this change required? What problem does it solve? -->
<!-- If it fixes an open issue, please link to the issue here. -->
<!-- Use fixes/fixed when referencing the issue -->
Fixed it because I received notification from CodeTriage 
## How Has this Been Tested?
<!-- Please describe in detail how you tested your changes. -->
<!-- Include details of your testing environment, and the tests you ran to -->
<!-- see how your change affects other areas of the script, etc. -->
Local install/uninstall test + test env project
## Screenshot (if appropriate, usually isn't needed):

## Types of changes
<!-- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)
- [ ] Migrated package (a package has been migrated from another repository)

## Checklist:
<!-- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!-- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] My code follows the code style of this repository.
- [ ] My change requires a change to documentation (this usually means the notes in the description of a package).
- [ ] I have updated the documentation accordingly (this usually means the notes in the description of a package).
- [x] All files are up to date with the latest [Contributing Guidelines](https://github.com/chocolatey/chocolatey-coreteampackages/blob/master/CONTRIBUTING.md)
- [x] The added/modified package passed install/uninstall in the chocolatey test environment.
- [x] The changes only affect a single package (not including meta package).

<!-- The following section can be removed if the package has not been migrated from another location -->
## Original Location
- [Original Repository](add_link_to_original_repository_location)
- [Open Issues](link_to_the_generic_location_of_open_issues) *Add the different issues underneath, and tick those that are fixed in this PR*
- [x] [(gpg4win) The term 'touch' is not recognized as the name of a cmdlet](https://github.com/chocolatey-community/chocolatey-coreteampackages/issues/1398)
- [ ] *Include the link to the opened PR that removes the package from the original location*
- [ ] The [migration guidelines](https://github.com/chocolatey/chocolatey-coreteampackages/wiki/Package-migration-process) have been followed
