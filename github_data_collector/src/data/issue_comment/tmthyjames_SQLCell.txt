for instance

```
%%sql --hook

tables MSS = USE {0};
SELECT * FROM sys.Tables;

columns_mss MSS = EXEC sp_columns {0};

columns_db1 DB1 = EXEC sp_columns {0};

views mssql+pymssql://username:password@hostname/DB = USE {0};
SELECT * FROM sys.Views;

tables_db1 DB1 = USE {0};
SELECT * FROM sys.Tables;

views_l mssql+pymssql://:@localhost/DB = USE {0};
SELECT * FROM sys.Views;

databases LC = SELECT name FROM master.sys.databases;
```

add server alias as argument so the same shortcut can be used across any server (assuming same sql dialect).



be able to visualize tables/columns and explore  via the openquery functionality
it will currently install to the current working dir, so you could have multiple sqlcell.db instances with different data. 

allow user to control where sqlcell.db gets written to
```
%%sql --cols=100
select top 1000 * from foo
```

current column ordering is done alphabetically. 
By either printing it off above results or using a global var that is set after each query like:

```
%%sql
select foo from bar
```
in another cell print `_CE_` (or something):
```
> print(_CE_)
<engine-string> 
```

Should any other details be printed/returned? Should the object be returned to perform actions on it?
something like:

```
%%sql --current-engine


```
 To return the engine currently being used.