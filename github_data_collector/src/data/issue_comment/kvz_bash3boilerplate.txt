In reference to #131 you find the corresponding PR.

New function:
- add comment
- edit comment (only if key/value is created/modified)
- clean up ini file (remove empty lines)
- ensure every section have empty line above
- ensure comments stay above key/value
Hi, is there a reason why the following won't work?

```sh
$ cat make.sh
#!/usr/bin/env bash

read -r -d '' __usage <<-'EOF' || true
  -p --print_deps  Print dependencies
  -c --clean       Clean project
  -b --build       Build project
  -t --test        Run tests
  -v               Enable verbose mode, print script as it is executed
  -d --debug       Enables debug mode
  -h --help        This page
  -n --no-color    Disable color output
EOF

read -r -d '' __helptext <<-'EOF' || true # exits non-zero when EOF encountered
 This is a script to support the build of Healthbot Projects, it is intended to be used by all projects 
 and provide required boilerplate functions
EOF

source main.sh

# print_deps mode
if [[ "${arg_p:?}" == "1" ]]; then
    info "Print dependencies"
fi

# clean mode
if [[ "${arg_c:?}" == "1" ]]; then
    info "Clean project"
fi

# build mode
if [[ "${arg_b:?}" == "1" ]]; then
    info "Build project"
fi

# test mode
if [[ "${arg_t:?}" == "1" ]]; then
    info "Running Tests"
fi
```

I've left main.sh as is, other than commenting out the Validation and Runtime sections at the bottom of the file. 

```sh
./make.sh -p
2019-09-05 21:32:42 UTC [     info] Print dependencies
```
But the following results in no output.

```sh
./make.sh -h
```

I was expecting that the help mode below in main.sh would work 

```sh
# help mode
if [[ "${arg_h:?}" == "1" ]]; then
  # Help exists with code 1
  help "Help using ${0}"
fi
```

The rationale for this approach, rather than updating main.sh, is that I can pull the latest main.sh (with fixes / new features) and use with minimal changes. 

Any help, much appreciated.
I love and use the other features of bash3boilerplate. But I found https://argbash.io/ and it has completely replaced my usage for argument parsing, it is a vastly superior implementation.
# TL;DR

Travis CI tests are successfully passing for both üêß Linux & üçè OSX.

- [x] assertions
- [x] shellcheck
- [x] `style.pl`

## Changes

- [x] üíö use latest shellcheck binary üçè+üêß
  - no more `cabal` installs

- [x] üî® use `addons: homebrew` for üçè `darwin` (GNU) packages

    ```yaml
    addons:
    apt:
        update: true
    homebrew:
        update: true
        packages:
        - coreutils
        - gnu-sed
        - gnu-tar
        - grep
        - make
        - gawk
        - findutils
        - gnu-which
        - gnu-time
    ```

- [x] üî® üçè add gnubin dirs to $PATH

  - `homebrew` decided to [remove `--with-default-names`][gnu-homebrew]

    ```bash
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      if type brew &>/dev/null; then
        HOMEBREW_PREFIX=$(brew --prefix)  # add gnubin commands to PATH
        for d in ${HOMEBREW_PREFIX}/opt/*/libexec/gnubin; do export PATH=$d:$PATH; done
      fi
    fi
    ```

- [x] üë∑ limit git clone depth (3)
- [x] üî® move `blah --version` debug commands to `before_script`
- [x] üíö remove `cache: apt` because docs
  - https://docs.travis-ci.com/user/caching/#things-not-to-cache
- [ ] ‚≠ïÔ∏è ~~set `dist: trusty` in matrix~~

[gnu-homebrew]: <https://discourse.brew.sh/t/why-was-with-default-names-removed/4405>

## :sparkles: Add colour, function, line numbers to debug mode

- [x] feat(debug): :sparkles: add color to PS4 prompt
  - [x] use `strftime(3)` formatting
  - [x] standardise timestamps to UTC
  - [x] save and restore TZ if sourced
  - [x] perf(debug): do not `xtrace` log function
- [x] refactor(err_report): :hammer: prevent potential ERR trap recursion

- [x] docs(changelog): :memo: changelog entries for debug mode

## Tests

- [ ] :white_check_mark: `main-debug-ps4` scenario and fixture

reworking the tests and fixtures.

- [ ] add "change timezone" adjust

## Closes 

- #103
- #105
- #107

----

PR created with `GitHub Pull Request` inside `vscode` :grin:
Possible implementation here:
https://coderwall.com/p/wil8da/debug-bash-scripts-with-line-numbers-more-info
We use lots of bashisms, for good reason.

Perhaps we should check and bail out if a non-bash shell is running the script?

One way to check: https://askubuntu.com/questions/97522/how-can-my-script-determine-whether-its-being-run-by-bash-or-dash
https://github.com/mvdan/sh
## This is a feature request. ##

Having the script automatically parse some sort of configuration file (json,xml,yaml,bash) that dictates default values for its arguements would nice.

## Why not just use default parameters? ##

Assume a case where the scripts are written for a multitude of runtimes (say for e.g; servers) and the default parameters are meant to be different for each runtime.
See discussion in PR #81 