Definition is:

```
has_reputation :popularity,
    :source => [
      {:reputation => :watched_pointsd},
      {:reputation => :views},
      {:reputation => :payment_reputation, :weight => 2}
    ],
    :aggregated_by => :sum

  has_reputation :payment_reputation,
    :source => :episode,
    :source_of => [{:reputation=>:popularity}]

  has_reputation :views,
    :source=>:user,
    :source_of => [{:reputation=>:popularity}]

	has_reputation :watched_points,
		:source=>:user,
    :source_of => [{:reputation=>:popularity}]

```

Then for a given episode I have
```
def pop e 
 puts "Popularity: #{e.reputation_for(:popularity)}" 
 puts "Watched points: #{e.reputation_for(:watched_points)}"
 puts "Views: #{e.reputation_for(:views)}"
 puts "Payment: #{e.reputation_for(:payment_reputation)}"
end
```

The result for a given episode is:
Popularity: -272.2
Watched points: 0.0
Views: 0.0
Payment: 0.0

How could that be? Where could I even start debugging it?
Adding an evaluation does not result in the aggregated evaluation updating its value
I have:
```
class Article < ActiveRecord::Base

has_reputation :popularity,
  :source => [
    {:reputation => :rep1, :weight => 0.8},
    {:reputation => :rep2},
  ]

has_reputation :rep1,
  :source => :article,
  :source_of => [{:reputation=>:popularity}]

has_reputation :rep2,
  :source=>:comments,
  :source_of => [{:reputation=>:popularity}]

```
The problem is
```
Article.add_evalution(:rep1, 1, Article.first)
Article.reputation_for(:rep1) -> 1.0
Article.reputation_for(:popularity) ->1.0
```

Then 

```
Article.add_evaluation(:rep2, 2, Comment.first)
Arctile.reputation_for(:popularity) ->1 STILL 1.0.
```
Why is it still 1.0 is something I can not understand?


Welcome

i just want to get a rank for current user 
I'am did `current_user.rank _for(:total_points)`

then I get this error when i use postgresql while its work whitout any issue on sqlite3

> PG::WrongObjectType: ERROR:  count(*) must be used to call a parameterless aggregate function
LINE 1: SELECT COUNT() FROM "users" LEFT JOIN rs_reputations ON user...
               ^
: SELECT COUNT() FROM "users" LEFT JOIN rs_reputations ON users.id = rs_reputations.target_id AND rs_reputations.target_type = 'User' AND rs_reputations.reputation_name = 'total_points' AND rs_reputations.active = 't' WHERE (rs_reputations.value > 0.0)
Hi, I would like to enable a source to evaluate the same target more than one time. Inside the source code, it is said the same source can only review the same target once. I wonder there is a good approach to override the gem to make it work in the way the same source can evaluate more than once?

1. In spec, expecting by .raise_error without error type is deprecated as it can cause false positive. So, I added expected error types and replace unnecessary error expectation to attribute checks
2. In Rails4, there's no difference between `.scoped` and `.all`. Both returns active relation. In doing so, we don't need to specify `find_scope` any more for FinderMethods methods. Also the existing behavior for it doesn't give us any benefit. It just calls the scope at the end of query result.

Can anyone tell me what the 'data' column is for in the reputations results?

Can you add your own data to the records?

Hi, Im trying to create nested reputations, however I have a relationship name that is not the default, these are my models and reputation definitions:
## order.rb

``` ruby
    class Order < ActiveRecord::Base
      belongs_to :user
      belongs_to :ofert

      has_reputation :rates, source: :user, source_of: [{reputation: :rates, of: :ofert}]
    end
```
## ofert.rb

``` ruby
    class Ofert < ActiveRecord::Base
      belongs_to :user
      has_many :orders
      has_reputation :rates, source: [{reputation: :rates, of: :orders}], aggregated_by: :average, source_of: [{reputation: :karma, of: :user}]
    end
```
## user.rb

``` ruby
    class User < ActiveRecord::Base
      has_many :orders
      has_many :created_oferts, class_name: 'Ofert'

     has_reputation :karma, source: [{reputation: :rates, of: :created_oferts}], aggregated_by: :average
    end
```

The system should work as follows:
1. User can rate his orders
2. The reputation of an ofert is the average of the reputation of all its orders
3. The reputation of a user is the average of the reputation of all his oferts.

Right now is only working 1 and 2, but the reputation of an user is always 0, as you can see the relationship of users is created using an alias: `has_many :created_oferts, class_name: 'Ofert'`

I tried using 
`has_reputation :total_ofert_rates, source: [{reputation: :rates, of: :oferts}]`

but it is not working.

```
    user.reputation_for(:total_ofert_rates)
    => 0.0
    user.reputation_for(:rates)
    => 0.0
```

It is always returning 0.0 for the reputations of the user. Im I doing something wrong?

Hi, I could not find how to validate the evaluation value in the reputation system definition, for example in my use case reputations can be from 1 to 5 and must be integers, well would be great if we can add those validations in the model level, so far I can only validate that from the controller.

Can we push the latest version to ruby gems?  

evaluation_by does not work in the ruby gems version 3.0.1 

The following error occurs on postgre running on heroku.

PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint "index_rs_evaluations_on_reputation_name_and_source_and_target"
DETAIL:  Key (reputation_name, source_id, source_type, target_id, target_type)=(watched_points, 135, Episode, 3774, User) already exists.
: INSERT INTO "rs_evaluations" ("created_at", "data", "reputation_name", "source_id", "source_type", "target_id", "target_type", "updated_at", "value") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING "id"
  app/models/episode.rb:70:in `block in update_watched_points'

This is the code of the method being called:

```
def update_watched_points percentage, user
    to_be_given = calculate_some_value
    ActiveRecord::Base.transaction do
    current_points = self.evaluation_by :watched_points, user
        current_points = current_points.to_f
        if current_points < to_be_given
            user.add_or_update_evaluation :watched_points, to_be_given, self
            self.add_or_update_evaluation :watched_points, to_be_given, user
        end
    end
end
```

Do you know what might be causing it?
