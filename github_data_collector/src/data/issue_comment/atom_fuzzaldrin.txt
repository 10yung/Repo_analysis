Hi,

`match` usage is not described anywhere else but in the code. It could be nice to give the function signature as long as an example (most common case would be "how to surround with `<strong/>` tag")
See https://github.com/atom/atom/issues/12014#event-698466314

Coming from Sublime Text to Atom, a major stumble for me is, from what I gather, that fuzzaldrin never learns from my usage and returns only results sorted by their match score. However, Sublime both in command palette and autocomplete menu would pre-select the last used result I selected the same input.

I'll illustrate the need with two examples.

---

First up, autocomplete. When writing CSS, I previously would use sort of a shorthand, say, `bco`<kbd>tab</kbd> for `background-color`. When I use the shortcut, the editor should remember the option I picked and the next time I use the exact same input (`bco`) it should pre-select the exact same result (`background-color`).

This is a massive time-saver that lets me have pseudo-snippets of sorts, where I would write CSS properties just by 1-to-3 letter combinations, with results coming straight from autocomplete's memory of my last usage. Fast, easy to remember and, best of all, simple.

---

Second, command palette. There are a couple of commands that aren't used constantly (and I don't want keyboard shortcuts for such commands) but come in handy once or twice a month, like converting the current ~~file~~ buffer from spaces to tabs or the other way around.

To do this, I'd open the command palette, type in "tabs" or "spaces" and choose the appropriate command from the list. In Sublime, I'd already have preselected the command I chose the last time I typed the same input: `tabs` would pre-select "Indentation: Convert to Tabs" and `spaces` would pre-select "Indentation: Convert to Spaces". And even though there are other results for those queries, and some of them may be higher-scoring (as indicated by the order of items), the default command when I hit <kbd>Return</kbd> is the one I actually use out of those results.

Instead, in Atom when I type `tabs` into the command palette, I have to scroll or arrow-down to 10 items lower to get the one I wanted, it's ridiculous.

---

Right now, Atom doesn't do this. Instead every time I run an often-used autocomplete input or search for a command in the command palette, I get the same ordered-by-score results and have to select the one that I want, which in most cases would have been the same one as always. Sublime does this and it's a huge time saver, I'd love to see Atom add this functionality.

And yes, I could add obscure keyboard shortcuts and manually type out snippets for every single shortcut, but that wouldn't be very productive or flexible.

More related to PHP specifically, but it would allow namespaces such as:

```
JMS\Serializer\Annotation
```

to look for

```
JMS/Serializer/Annotation
```

Since 99% of the time, filenames wont have contain " \ " , it would generally improve the results.

We have a quite nice PR #22 which is improving the already existing state of the fuzzy finder.
But it doesn't feel as pertinent and snappy as the Chrome dev tools or Sublime Text one.
Maybe a good starting point for the next step after this PR would be to try to implement the same behaviour as the Chrome dev tools one. 
Thankfully it's open source so we can check the code here:
https://chromium.googlesource.com/chromium/blink/+/master/Source/devtools/front_end/sources

Especially in those files:

```
FilePathScoreFunction.js
```

```
FilteredItemSelectionDialog.js
```

Any suggestion / objections?

I suggest using LCS to rank matches:
https://en.wikipedia.org/wiki/Longest_common_subsequence_problem#Solution_for_two_sequences

Matches with lower number of substrings would come before matches with higher number of substrings.

This would be a lot more generic than the substring() based approach suggested in some PRs.

If you want to play with this, here's an online thing demonstrating the concept (I didn't write this, just found it):
http://lcs-demo.sourceforge.net/

Start by upping the "Max Size" a bit, then type in two strings and press "Execute LCS Lengths" to see how it works.

One real-world use case where this would come in handy is when searching for "git push", note how it's third place even though "git" and "push" are exact matches. Single-word matches would be caught by this as well.
<img width="614" alt="gitpush" src="https://cloud.githubusercontent.com/assets/158201/8523171/f7c8b716-23f3-11e5-97e3-392b5b201bfb.png">

``` javascript
var candidates, filter, results;

filter = require('fuzzaldrin').filter;

candidates = ['test/components/core/application/applicationPageStateServiceSpec.js', 'test/components/core/view/components/actions/actionsServiceSpec.js'];

results = filter(candidates, 'actionsServiceSpec.js');

console.log(results);
```

This is what I get

``` javascript
[ 'test/components/core/application/applicationPageStateServiceSpec.js',
  'test/components/core/view/components/actions/actionsServiceSpec.js' ]
```

This is what I expect

``` javascript
[ 'test/components/core/view/components/actions/actionsServiceSpec.js',
  'test/components/core/application/applicationPageStateServiceSpec.js' ]
```

as `actionsServiceSpec.js` is exact file name match

![2015-06-09-133345_669x461_scrot](https://cloud.githubusercontent.com/assets/667194/8057793/6043f4ca-0eac-11e5-9af1-8fc2747640e7.png) https://github.com/OmniSharp/omnisharp-atom/issues/380

So in this screenshot, I'd like the local variable `diagnostics` to be the first item in the list here as it is the first match that has a prefix with identical case.

Is this something that you might consider adding (maybe via an option) ? 

If there are multiple files with the same filename in a project, typing the filename presents them all but you cannot enter more text to narrow them down by path. For example:
- search/README.md
- database/README.md

If I enter "README" I'll get both files but cannot enter "search" or "database" to select from them. If I enter "search READ" it will narrow it to a single file, but I don't always know I'll have multiple matches until the filenames have been presented. (Think "index.js" or "index.coffee" in a large project.)

By switching the search order, I could enter "README", see there are multiple matches, and start typing "search" to narrow it down to the one I wanted.
