We encountered an issue recently where a proto definition mismatch (breaking change) resulted in the gRPC server failing to decode the request payload. This happens before any method handler can be invoked, which also means that the middleware cannot be invoked.

As a result, the server produced no metrics, traces or logs for the failure, making diagnosing the issue more difficult, as the requests didn't appear to be making it out of the client (based on what information we could observe without those things). In reality, the server was returning a `codes.Internal` error without any of the middleware being able to observe that.

OpenCensus implement their observability handling via a `StatsHandler` instead, which _does_ get invoked even in cases where the server is unable to decode the request (and other issues). While it probably doesn't make sense for _all_ server side interception capabilities to be implemented this way (e.g auth, rate limiting, validation), for observability (metrics, tracing, logging) this needs to be able to record these failures as well.

Given this library is `go-grpc-middlewares`, that may not be deemed in scope of the library, but I'm looking for confirmation about whether this would be the case or not. Based on that, whether I need to look at alternative implementations which do use `StatsHandler` (or roll my own), or if contribution of `StatsHandler` approaches for these would be accepted (and how that support should be integrated)
I'd like to use reflection `google.golang.org/grpc/reflection` with gRPC auth of the middlewares. As the reflection service is defined in the library, it's not possible to override the auth function.

Could you help me the best way to utilize both?

I wanted to exclude `/grpc.reflection.v1alpha.ServerReflection/ServerReflectionInfo` from my authentication logic but it was not possible because the auth func doesn't take method name.
While trying to build package for debian I get following error.
https://paste.debian.net/1105874
* Instead of holding implementations for each logging, tracing, metrics providers, establish interfaces.
* Be clear about it in docs
* Store implementations in... nested go modules? Separate project? To agree.


Hello

When we added the `grpc_retry.StreamClientInterceptor()` and `grpc_retry.UnaryClientInterceptor()`  `grpc.DialOption` to a `grpc.DialContext` we saw our service throw error like:
```
{code = Unauthenticated desc = request missing 'Authorize' credentials}
```
suggesting that header information was being stripped by the middleware.


I recently switched to go modules and go 1.13, and have run into problems with grpc_zap all of a sudden.

I run `go mod init` followed by `go get -u ./...` (or `go build` - same result either way) and I get the error
`undefined: grpc_zap.ReplaceGrpcLoggerV2`

I'm new to go modules so it might just be user error, but I can't for the life of me figure out what I'm doing wrong here, or if it's an issue with go-grpc-middleware itself.

Edit: I'm thinking it might be related to this: https://github.com/grpc-ecosystem/go-grpc-middleware/issues/210
It appears to be working if I specify `go get -u github.com/grpc-ecosystem/go-grpc-middleware@master` so this is probably just inexperience on my part. Sorry!
Inspired from [adrien-f](https://github.com/adrien-f) [PR](https://github.com/grpc-ecosystem/go-grpc-middleware/pull/223), I want to add [Zerolog](https://github.com/rs/zerolog) logging into that project.

For benchmarks, you can visit [logbench](http://hackemist.com/logbench/) site. As seen, Zerolog is much faster than Logrus and Zap.

Greetings ðŸ‘‹ 

I come from the Thanos project where we mostly use the go-kit logging library and [we wanted](https://github.com/thanos-io/thanos/issues/891) some sweet gRPC logging for our users.

I'm not a Go expert, so I mostly copy/pasted the tests from the Zap implementation and wrote the go-kit logging system.

The tests suite is green and it works pretty swell with Thanos:

```level=debug ts=2019-08-09T12:24:01.299184Z caller=client_interceptors.go:49 system=grpc span.kind=client grpc.service=thanos.Store grpc.method=Info msg="finished client unary call" error=null grpc.code=OK grpc.time_ms=4.149
level=debug ts=2019-08-09T12:24:01.299269Z caller=storeset.go:223 component=storeset msg="updating healthy stores" externalLabelOccurrencesInStores="map[string]int{\"\":1}"
level=info ts=2019-08-09T12:24:01.299296Z caller=storeset.go:266 component=storeset msg="adding new store to query storeset" address=127.0.0.1:10904
level=info ts=2019-08-09T12:24:06.300377Z caller=payload_interceptors.go:134 system=grpc span.kind=client grpc.service=thanos.Store grpc.method=Info grpc.request.content={}
level=info ts=2019-08-09T12:24:06.302309Z caller=payload_interceptors.go:134 system=grpc span.kind=client grpc.service=thanos.Store grpc.method=Info grpc.response.content="{\"maxTime\":\"9223372036854775807\",\"storeType\":\"SIDECAR\"}"
level=debug ts=2019-08-09T12:24:06.302375Z caller=client_interceptors.go:49 system=grpc span.kind=client grpc.service=thanos.Store grpc.method=Info msg="finished client unary call" error=null grpc.code=OK grpc.time_ms=2.145```

Let me know if you have any feedback ðŸ˜„ 
The client adds some info such as to request id into request context, how can I extract the value and log it?
Is there a full example?
In some case,service working in master-slave mode,client request must processed by the master. In order to realize this, client side interceptors or server side interceptors may needed. client side interceptors must send the request directly to the master server,server side interceptors must redirect the client request to the master server. Is this a ubiquitous scene? Do we intended to provideï¼Ÿ