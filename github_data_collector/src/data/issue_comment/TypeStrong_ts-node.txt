# Error when trying to create faulty worker

## Description
When trying to create a new worker that has errors, an empty log line is printed to the console instead of the actual error.


## Replication

For replication, see this repository: https://github.com/teh-mICON/ts_worker_error

run via `ts-node start.ts` or `npm run start`

## Error when directly invoking worker.ts
```
$ ts-node worker.ts

/home/micon/.nvm/versions/node/v12.9.1/lib/node_modules/ts-node/src/index.ts:245
    return new TSError(diagnosticText, diagnosticCodes)
           ^
TSError: тип Unable to compile TypeScript:
worker.ts:2:1 - error TS2304: Cannot find name 'asd'.

2 asd();
  ~~~

    at createTSError (/home/micon/.nvm/versions/node/v12.9.1/lib/node_modules/ts-node/src/index.ts:245:12)
    at reportTSError (/home/micon/.nvm/versions/node/v12.9.1/lib/node_modules/ts-node/src/index.ts:249:19)
    at getOutput (/home/micon/.nvm/versions/node/v12.9.1/lib/node_modules/ts-node/src/index.ts:357:34)
    at Object.compile (/home/micon/.nvm/versions/node/v12.9.1/lib/node_modules/ts-node/src/index.ts:415:32)
    at Module.m._compile (/home/micon/.nvm/versions/node/v12.9.1/lib/node_modules/ts-node/src/index.ts:493:43)
    at Module._extensions..js (internal/modules/cjs/loader.js:947:10)
    at Object.require.extensions.<computed> [as .ts] (/home/micon/.nvm/versions/node/v12.9.1/lib/node_modules/ts-node/src/index.ts:496:12)
    at Module.load (internal/modules/cjs/loader.js:790:32)
    at Function.Module._load (internal/modules/cjs/loader.js:703:12)
    at Function.Module.runMain (internal/modules/cjs/loader.js:999:10)
```

## Output when Invoking start.ts
```
$ ts-node start.ts

ts-node start.ts  4.97s user 0.86s system 188% cpu 3.084 total
```

## Additional notes

An empty log line is also created on runtime exception, if code compiled correctly
Fixes #936 
On Linux bash terminal, executing
`echo "console.log('Hello, world!')"`
gives the following error:
`bash: !': event not found`

To fix the issue, changing the log string from
`Hello, world!` to `Hello, world`

Tested on following systems:
* Ubuntu 18.04.3 LTS
* Linux Mint 19
Fixes #703
I am working with bitwise operators. However, when I use the `>>>` operator I do not always get the same result:

Here is my bash session:
```
$ ts-node -v
v8.5.4
$ ts-node
> -5 >>> 0
4294967291
> -5 >>> 0
31
> -5 >>> 0
undefined
>
```

What is going on here?
I basically detailed the issue in this comment: https://github.com/TypeStrong/ts-node/issues/155#issuecomment-570120923

It's a chicken-and-egg-like problem:

- If we use `module: 'commonjs'`, then if any TS files import ES Modules (indirectly in their dependency graph), then Node throws an error because CommonJS modules can not import ES Modules.
- If we change to `module: 'esnext'`, then the errors from the previous point go away, but now the `.js` file that is loading `ts-node` and calling something like `require('typescript-entry-point.ts')` will have a similar issue, because the call to `require('typescript-entry-point.ts')` will try to load an ES Module.
- Finally, if we convert the `.js` file into an ES Module, we can not convert `require('typescript-entry-point.ts')` into `import 'typescript-entry-point.ts'` because now ES Modules don't handle `.ts` extensions (at least not out of the box, and it seems the old require hooks don't operate on these new identifiers)

At the moment, I'm sort of stuck, because I have dependencies in my dependency tree that are ES Modules.

The only workaround I can think of is to compile everything to `.js` files (ES Modules) and avoid to use ts-node.

I wonder if a combination of `allowJs` and `ignore` so that it compiles JS files would help. I haven't tried that yet.
Hello, noob here.

I have some ReactJs project which is run perfectly on every aspect.
But recently I want to make it monorepo and I chose Expo for this job.

I can make most of code works except some custom scripts.
It say `SyntaxError: Cannot use import statement outside a module` and the line of code that lead to this error was `node_modules/expo/AppEntry.js` which is in the `main` parameter in `package.json`.

This is the full log:
```
$ ts-node -r tsconfig-paths/register --project scripts/helpers/tsconfig.json scripts/customScript.ts
/home/username/Workspace/project/node_modules/expo/AppEntry.js:1
import 'expo/build/Expo.fx';
^^^^^^

SyntaxError: Cannot use import statement outside a module
    at wrapSafe (internal/modules/cjs/loader.js:1050:16)
    at Module._compile (internal/modules/cjs/loader.js:1098:27)
    at Module._extensions..js (internal/modules/cjs/loader.js:1167:10)
    at Object.require.extensions.<computed> [as .js] (/home/username/Workspace/project/node_modules/ts-node/src/index.ts:529:44)
    at Module.load (internal/modules/cjs/loader.js:983:32)
    at Function.Module._load (internal/modules/cjs/loader.js:891:14)
    at Module.require (internal/modules/cjs/loader.js:1023:19)
    at require (internal/modules/cjs/helpers.js:72:18)
    at Object.<anonymous> (/home/username/Workspace/project/scripts/helpers/customScript.ts:2:1)
    at Module._compile (internal/modules/cjs/loader.js:1128:30)
error Command failed with exit code 1.
```

and this is the content of `scripts/helpers/tsconfig.json`:

```json
{
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "jsx": "preserve",
    "lib": ["dom", "esnext"],
    "moduleResolution": "node",
    "noEmit": true,
    "skipLibCheck": true,
    "resolveJsonModule": true,
    "target": "es5",
    "allowJs": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "esModuleInterop": true,
    "module": "commonjs",
    "isolatedModules": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "noImplicitThis": false
  },
  "exclude": ["node_modules"],
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"]
}
```

This error not occur on every scripts, just some custom script commands and all error disappear if I remove `main` field from `package.json`.

I tried to search for solution for hours and tried a bunch of methods with no results. T__T
I was thinking about worker_threads in node 11 and wondering if moving the ts-node compiler to a pool of worker threads would ever be faster in `transpile-only` mode.  I'm not sure it's worth it, but I want to share my thoughts anyway.

It'll need `--files` set to eagerly load files instead of waiting for a `require()` call.  If the app loads its entire codebase at startup, then compilation ordering doesn't matter because you need to wait for every file.  But if you're only loading a small subset of the codebase, ts-node's thread worker will somehow need to be smart about compiling the right files first.  It could analyze the files it loads for `import` statements or `require()` calls and prioritize those files for compilation next.  I'm not sure how much of a performance boost you'd get, though.

There's also the issue of moving the *entirety* if ts-node into the worker thread.  Otherwise you have to load `typescript` into the main thread, which seems costly.  But maybe not, since we have to wait for the worker to load it anyway?

Hopefully some day I'll have a chance to prototype this and see if it's any faster.
A follow-up to #921, moved into a separate PR per review comments.  The diff for this will look much better after #921 is merged.

Allows specifying `--require` options via tsconfig.
I'm sharing this here in case anyone else is having speed issues even with transpile-only.

I wrote a new npm module, [typescript-cached-transpile](https://www.npmjs.com/package/typescript-cached-transpile), which monkey-patches typescript's `transpileModule` function to use a disk cache.

Here's the relevant code: https://github.com/cspotcode/personal-monorepo/blob/master/packages/typescript-cached-transpile/src/create.ts#L21-L88

It's very conservative.  It doesn't look at filesystem atimes or mtimes.  The cache key is computed from sha1 sums of both the configuration (typescript version, typescript-cached-transpile version, and all compiler flags) and the filename and source text.  It doesn't work with transformers, and it doesn't cache when the compiler returns diagnostics, because I don't cache the diagnostics. (theoretically we could cache them as JSON pretty easily)

I tested on my team's codebase, where `ts-node --transpile-only` was adding a whopping 13 second(!) to startup.  Even with the overhead of computing sha1 sums, caching reduced the overhead to about a second.

I understand the reasons for not introducing an incomplete caching solution to ts-node.  However, in my case, I need things to be fast, which means I already *need* transpile-only mode, so it makes perfect sense to use a caching solution that requires it.

If you use this, and it works well or you find bugs, please let me know.