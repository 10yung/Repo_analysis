We would like icons for the different engines

Basically small 16x16 px icons that can symbolize the engine in the selection screen. 

The Audio Effects (so far Reverb and Chorus, soon also Delay) are also shown in a different place, so these have the highest priority.
We need graphics for the external input. It is quite simple and should probably be dominated by some non-functional design. Nevertheless. it needs to convey some information. 
It can operate in 3 modes: disabled, stereo and dual mono. Depending on the mode, different controls are available as seen in the pictures below.


![](https://cdn.discordapp.com/attachments/361614705296408577/663391467741642753/external1.png)

![](https://cdn.discordapp.com/attachments/361614705296408577/663391471763849259/external2.png)

![](https://media.discordapp.net/attachments/361614705296408577/663391474515312662/external3.png)

Where the "active send" in the last picture runs over L and R.

The icon design for the external input is a stylized jack, which could serve as initial inspiration for the screen as well
- [x] Set ALSA output volume
- [x] Set ALSA input gain
- [ ] integrate `otto-input` into the main software.

And with lower priority:
 - [ ] Wifi in Settings
 - [ ] Set date/time in settings

Still a work in progress.

I also cleaned up the engine_manager process call a bit.

Most important question is that it seems the external input from RtAudio is always mono? I would expect it to be stereo whenever possible?
Right now, we are using NanoVG, which is not actively maintained. We would like to change this to a more modern alternative, such as Skia.

All calls to NanoVG is wrapped in the small wrapper NanoCanvas, so it should be simple to change out the backend without having to rewrite any graphics code in OTTO. We can then extend the wrapper to expose the more advanced features of Skia.
We need UI for our ARP Engine. It is a fairly regular arpeggiator, with the following features:

 - PlayModes: [up, down, updown, downup, updowninc, downupinc, manual, chord, random]
 - Octave modes: [boring, +1, +2, +1 unison, fifth unison, -1 & +1]
 - Note length: percentage of time to hold notes
 - Subdivision of master clock: [quarter, quartertriplet, eighth, eighthtriplet, sixteenth]

We probably want to visualize the notes in some way, since some combinations of play modes/octave modes are quite complex.

### Inspiration:
![image](https://user-images.githubusercontent.com/3133596/71779923-ed9b7700-2fbb-11ea-810d-9e546b120eeb.png)
Source: Abletons arpeggiator manual
`UIManager` should have a stack of `ScreenEnum`, which lets you push and pop momentary screens. It will make mainly `sends` and `master` a bit nicer to work with in the `EngineManager`
https://github.com/onqtam/doctest
We need new graphics for the sends. This is a screen that all things that make sound has (synth, line in, drum channels, etc.) and it determines how much volume to send to the dry output + the dry pan, as well as how much to send to each effect bus (FX1 and FX2). These used to be set directly, but we have decided to change the control scheme to:
- Dry/Wet mix
- Dry Pan
- Wet Balance between FX1 and FX2
- Overall volume affecting everything else
The colour used for each control is still undecided so we can go with something that looks good on the screen. The screen used to be like this:
![sends](https://user-images.githubusercontent.com/32618198/71556683-cda80880-2a3b-11ea-8140-cc846145ad23.png)
(The _mix_ label was _dry_ before, but this picture was taking while reimplementing the screen)
The screen accomplishes its task in a very functional, but not very flashy way. We need to change this to reflect the new controls.

Functional is probably the way to go with this screen, but minimizing the use of numbers is always good.

For graphical elements, I am thinking something that the mix between dry signal ans sends to the effect busses. Then maybe an arrow the turns between the FX1 and FX2 logos for the Wat Balance? If that is not too stupid.. The Dry Pan has remained the same so no reason to change it unless you think of something better. The last element is something clearly understood as volume.
Id like to write a clang-based custom static analysis tool, to add our own `[[otto::attributes]]`. These should be to enforce things like.

 - [ ] Checking action handlers
 - [ ] Make sure functions on the audio thread only do things functions on the audio thread are allowed to do.

And more...

This checker should then run on travis to be part of our regular CI

It might make sense to wait for c++20 to do this...