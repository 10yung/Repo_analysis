The application is not  compiling due to Reflection pod file on Xcode 10.2

Details below:

Undefined symbols for architecture arm64:
  "_swift_getFieldAt", referenced from:
      closure #1 (Swift.Int) -> (Swift.String, Any.Type) in (extension in Reflection):Reflection.NominalType.fieldNamesAndTypes(for: Any.Type) -> [(Swift.String, Any.Type)]? in NominalType.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)


Merge PR's First, 

1. https://github.com/Zewo/Venice/pull/42
2. https://github.com/Zewo/CLibdill/pull/2
The [cocoapods docs](https://cocoapods.org/pods/Venice#user-content-manually) have outdated instructions for iOS, because there is no Venice.xcodeproj in this repo. 

The pod won't work with Xcode 9.3 since it's Swift 2.

So, I guess we need to create an Xcode proj and compile the latest code here to use it in iOS, does that sound right? Could you let me know about what's the easiest way to get started with Venice in iOS?
Add @testable for  `import Zewo` to fix `./Zewo/Tests/HTTPTests/ServerTest.swift` issue.
Hello i was try the reflection framework and its very good.  How ever i am facing little issue in nested models but with structs. The example structure i was trying
```
struct Person {
    var firstName: String
    var lastName: String
    var age: Int
    
    var classType: SchoolClass
}

// If i use class then it work fine
struct SchoolClass {
    var name: String = ""
    var section: Section = Section(sectionName: "")
    
}

struct Section {
    var sectionName: String
}
```
I wrote some code nested models but if this func already present let me know


```
extension Array{
    
    func split(at index: Int) -> ([Element], [Element]) {
        
        var leftArray = [Element]()
        var rightArray = [Element]()
        for tmpIndex in 0..<self.count {
            
            if tmpIndex <= index {
                leftArray.append(self[tmpIndex])
            }
            else {
                rightArray.append(self[tmpIndex])
            }
        }
        return (leftArray, rightArray)
    }
}

public func getChild<T>(_ key: String, from instance: Any) throws -> T {
    
    let treeList = key.components(separatedBy: ".").split(at: 0)
    guard !treeList.0.isEmpty else {
        return instance as! T
    }
    let currentNode = treeList.0.first!
    let result = try get(currentNode, from: instance)
    
    guard !treeList.1.isEmpty else {
        return result as! T
    }
    let nextNodeString = treeList.1.joined(separator: ".")
    let nextNode: T = try getChild(nextNodeString, from: result)
    return nextNode
}

public func setChild<T>(_ value: Any, key: String, for instance: inout T) throws {
    
    let treeList = key.components(separatedBy: ".").split(at: 0)
    guard !treeList.0.isEmpty else {
        return
    }
    let currentNode = treeList.0.first!
    var result = try get(currentNode, from: instance)
    
    let nextNodeString = treeList.1.joined(separator: ".")
    guard treeList.1.count > 1 else {
        
        do {
            try set(value, key: nextNodeString, for: &result)
        }
        catch (let error) {
            print(error)
        }
        return
    }
    try setChild(value, key: nextNodeString, for: &result)   
}
```
And the starting method

func checking() {
        
        // Reflects the instance properties of type `Person`
        do {
            let props = try properties(Person.self)
            var person = Person(firstName: "John", lastName: "Smith", age: 35, classType: SchoolClass())
            //var person = Person(firstName: "John", lastName: "Smith", age: 35, classType: SchoolClass(name: "Phyics", section: Section(sectionName: "A")))
            
            // Retrieves the value of `person.firstName`
            let firstName: String = try get("firstName", from: person)
            let className: String = try getChild("classType.name", from: person)
            let sectionName: String = try getChild("classType.section.sectionName", from: person)
            
            // Sets the value of `person.age`
            try set(36, key: "age", for: &person)
// Here i use struct i get crash but works for classes, need help here
            try setChild("Chemistry", key: "classType.name", for: &person)
            print("")
    
        }
        catch (let error) {
            print(error)
        }
        
    }
# Array of Mappable Objects nested in a Mappable - Deserialization Case

I am using your Advance Usage case, described in the Readme file of the Reflection Lib, that allows the deserialization of arbitrary nested structures. But I am having a difficult time making it work for this specific case.

```swift
extension Mappable {
    init(dictionary: MappableDictionary) throws {
        self = try construct(constructor: { property in
            
            if let value = dictionary[property.key] {
                
                // When the property type is a Dictionary
                if let type = property.type as? Mappable.Type,
                   let value = value as? MappableDictionary {
                    return try type.init(dictionary: value)
                    
                }
                // When the property type is an Array
                else if let type = property.type as? Array<Mappable>.Type,
                        let values = value as? Array<MappableDictionary> {
                    
                    return try values.map { type.Element.init(dictionary: $0) }
                }
                // When the property type is Type
                else {
                    return value
                }
            } else {
                throw MappableError.missingRequiredValue(key: property.key)
            }
        })
    }
}
```

When the property.type is an `Array<Mappable>`, the conditional unwrapping never happens, so the execution always enters the final else context. Is there any solution to this situation? Thank you.


# The Bug: Matilda (aka., `set`ing Int64's)

Reflection.set fails with an Int64! field in Xcode 8.3.

## Steps to reproduce

The following test code fails with: EXC_BAD_ACCESS (code=EXC_i386_GPFLT)

```
    class TestClass2 : NSObject {
        var fileIndexId: Int64!
    }

    // Crashes using Xcode 8.3
    func testReflectionCrash2() {
        let fileIndex = TestClass2()
        
        let rowFieldValue = Int64(1)
        let key = "fileIndexId"
        
        do {
            try Reflection.set(rowFieldValue, key: key, for: fileIndex)
        } catch {
        }
    }
```
## Possible solutions

Not sure. This was working in Xcode 8.2. Not sure if this a Reflection issue or a compiler issue in Xcode. This appears to be related to optional Int64's. This code sample does not fail:

```
    class TestClass4 : NSObject {
        var fileIndexId: Int64
        
        override init() {
            fileIndexId = 1
            super.init()
        }
    }

    // Does not crash. Something going on with optional Int64's?
    func testReflectionDoesNotCrash2() {
        let fileIndex = TestClass4()
        
        let rowFieldValue = Int64(1)
        let key = "fileIndexId"
        
        do {
            try Reflection.set(rowFieldValue, key: key, for: fileIndex)
        } catch {
        }
    }
```

A further refinement. Also has to do with the NSObject subclassing. This example, which does not subclass, does not crash:

```
    class TestClass5 {
        var fileIndexId: Int64!
    }

    // Does not crash.
    func testReflectionDoesNotCrash3() {
        let fileIndex = TestClass4()
        
        let rowFieldValue = Int64(1)
        let key = "fileIndexId"
        
        do {
            try Reflection.set(rowFieldValue, key: key, for: fileIndex)
        } catch {
        }
    }
```
When I try to set instance value using `for instance: inout Any` or `for instance: AnyObject` signature, both methods fail with signal 11: SIGSEGV. However, using `for instance: inout T` works as expected, though method with `for instance: AnyObject` signature uses exactly the same call.

Many public tests are also failing with recent Xcode 8.3 release. January travis builds appear to be passing with Xcode 8, maybe there's a problem with Swift 3.1?

![image](https://cloud.githubusercontent.com/assets/1086845/24558311/bf2a59b8-164b-11e7-9996-7cd24f908874.png)

# Segmentation Fault of Swift Reflection

I recently use swift reflection to convert json string to a struct, but got "Segmentation Fault" in runtime. As the test code is too much to write here, I committed my test code in github, can you help have a look, thanks.
## Steps to reproduce

$uname -a
    Linux dev 4.4.0-34-generic #53-Ubuntu SMP Wed Jul 27 16:06:39 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux 

$ swift --version
    Swift version 3.0 (swift-3.0.1-PREVIEW-1)
    Target: x86_64-unknown-linux-gnu

$ git clone https://github.com/hikelee/SegmentationFault.git

$ cd SegmentationFault

$ swift build
    Cloning https://github.com/Zewo/Reflection.git
    HEAD is now at 2bc1a76 make mappable tests public on reflection
    Resolved version: 0.14.0
    Compile Swift Module 'Reflection' (23 sources)
    Compile Swift Module 'Main' (1 sources)
    Linking ./.build/debug/Main

$ .build/debug/Main
    Person(firstName: "James")
    Person(firstName: "James")
    Person(firstName: "James")
    Person(firstName: "James")
    ------
    Person(firstName: "James")
    Person(firstName: "pb?\0\0\0\0\0a")
    Person(firstName: "\u{10}\u{10}\0a")
    Segmentation fault

Single threaded programs are easiest to make but we need to be mindful some codebases may struggle to ensure they don't block the main thread when using 3rd party libraries like ZeroMQ.

Passing data across threads is _safe_ with libmill but libmill isn't threadsafe so we must suspend the coroutine and awake it when the worker task is finishedâ€¦

Here's a very rough implementation:

```
func worker<T>(closure: @escaping (Void) throws -> T) throws -> T {
    var reader: unixsock?
    var writer: unixsock?
    unixpair(&reader, &writer)
    let fd = unixdetach(writer)
    var result: T! = nil
    var resultError: Swift.Error? = nil

    DispatchQueue.global().async {
        do {
            result = try closure()
        } catch {
            resultError = error
        }

        let flags = fcntl(fd, F_GETFL)
        _ = fcntl(fd, F_SETFL, flags & ~O_NONBLOCK)

        var done: Byte = 0
        send(fd, &done, 1, 0)
    }
    var byte: Byte = 0
    _ = unixrecv(reader!, &byte, 1, -1)
    unixclose(reader!)

    guard resultError == nil else {
        throw resultError!
    }
    return result
}
```
