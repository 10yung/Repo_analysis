I'm trying to deserialize an enum but with no luck. Following a simple example of what is going wrong:

```
const string incomingStringFromMicroservice = @"{""Name"":""Greg"",""fruit"":""Apple""}";

var newtonsoftFruit = Newtonsoft.Json.JsonConvert.DeserializeObject<FruitPicker>(incomingStringFromMicroservice);

var utf8Fruit = Utf8Json.JsonSerializer.Deserialize<FruitPicker>(incomingStringFromMicroservice);
```
where
```
public class FruitPicker
    {
        public string Name { get; set; }
        public Fruit Fruit { get; set; }
    }
    public enum Fruit
    {
        Orange = 0,
        Apple = 1
    }
```

In the case of utf8json the Fruit is set to the default value. What I'm I doing wrong? Why is my enum not set correctly?

Thanks
Unable to Deserialize a class that inherits a ``dictionary`` when using ``int`` as its key. i.e. ``Dictionary<int, T>``. The use case for this is pulling info from a database and storing the identity in the key and it's object data in the value. Below I'm using a ``string`` as the value for a simple demonstration.

Instances which do serialize and deserialize are:
* Variable defined as ``Dictionary<int, string>`` (_demonstrated below_)
* Class that inherits a dictionary using a string (``class Foo : Dictionary<string, string>``)

## Output
```json
{"1":"Item1-data","2":"Item2-data"}
```
## Exception thrown:
'System.ArgumentException' in System.Private.CoreLib.dll
An exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll but was not handled in user code
The value "1" is not of type "System.Int32" and cannot be used in this generic collection.

## Test Class
```cs
using System.Collections.Generic;
namespace Test.JsonEngines
{
  public class DictIntKey : Dictionary<int, string>
  {
    // No properties here, just helper methods
  }
}
```

## Unit Test - Fails
```cs
    [TestMethod]
    public void Utf8DictIntKeyQuickTest()
    {
      // Assign
      var obj1 = new DictIntKey() { StringA = "Helo", IntB = 34 };
      obj1.Add(1, "Item1-data");
      obj1.Add(2, "Item2-data");

      // Object to string
      string json1 = Utf8Json.JsonSerializer.ToJsonString(obj1);
      Debug.WriteLine($"Utf8 - Before Output:\r\n{json1}");

      // Throws exception when converting string to object
      var obj2 = Utf8Json.JsonSerializer.Deserialize<DictIntKey>(json1);
      string json2 = Utf8Json.JsonSerializer.ToJsonString(obj2);

      Debug.WriteLine($"Utf8 - After Output:\r\n{json2}");
      Assert.AreEqual(json1, json2);
    }
```

Output before exception
```
Utf8 - Before Output:
{"1":"Item1-data","2":"Item2-data"}
```

## Unit Test - Passes
This snip below shows that you **can** use a ``Dictionary<int, T>``.

```cs
    [TestMethod]
    public void Utf8DictIntKeySimpleTest()
    {
      // Assign
      var obj1 = new Dictionary<int, string>();
      obj1.Add(1, "Item1-data");
      obj1.Add(2, "Item2-data");

      string json1 = Utf8Json.JsonSerializer.ToJsonString(obj1);
      var obj2 = Utf8Json.JsonSerializer.Deserialize<Dictionary<int, string>>(json1);
      string json2 = Utf8Json.JsonSerializer.ToJsonString(obj2);

      Debug.WriteLine($"Utf8 - Before Output:\r\n{json1}");
      Debug.WriteLine($"Utf8 - After Output:\r\n{json2}");
      Assert.AreEqual(json1, json2);
    }
```
Output:
```json
Utf8 - Before Output:
{"1":"Item1-data","2":"Item2-data"}
Utf8 - After Output:
{"1":"Item1-data","2":"Item2-data"}
```
Is it possible to use for .net framework 4.5?
I am getting deserialization error , given below , any fix for the below json provided
 

[JsonParsingException: expected:'"', actual:'o', at offset:5]    Utf8Json.JsonReader.ReadStringSegmentRaw() +275    Utf8Json.JsonReader.ReadPropertyNameSegmentRaw() +56    Deserialize(Object[] , JsonReader& , IJsonFormatterResolver ) +298    Utf8Json.Resolvers.Internal.DynamicMethodAnonymousFormatter`1.Deserialize(JsonReader& reader, IJsonFormatterResolver formatterResolver) +205    Utf8Json.JsonSerializer.Deserialize(Byte[] bytes, Int32 offset, IJsonFormatterResolver resolver) +232    Utf8Json.JsonSerializer.Deserialize(Byte[] bytes, IJsonFormatterResolver resolver) +96    Utf8Json.JsonSerializer.Deserialize(String json, IJsonFormatterResolver resolver) +140    Utf8Json.JsonSerializer.Deserialize(String json) +94


And Below is the sample json trying to deserialize this is getting deserialize using newtonsoft

{
  Com: {
    Test: "123"
  }
}

--




The nuget package shouldn't include ValueTuple as a dependency for netstandard2 (see https://github.com/neuecc/Utf8Json/blob/master/src/Utf8Json/Utf8Json.csproj#L63). You can put in a conditional check in the project file to fix this.
When I deserialize json that contains 

`{"address":"an address","amount":null}`

to a target Type like
```
public class Recipient
    {
        public string Address { get; set; }
        public long Amount { get; set; }
    }
```
I get an Exception: expected:'Number Token', actual:'null', at offset:107

My expectation would be, that the long gets initialized to its default value of 0;

Afaik, in json or javascript, it is not wrong to have a number be null. It's just a falsy value.

And I think the least surprise would be if this would not throw and just set the number to 0.

Is there maybe any option I can use to achieve this? This is not so easy to fix if you don't have control of the production of the json you are getting.
Does Utf8json support converting strings to Enums case insensitive? So far it looks like it doesn't but I'm not entirely sure.
```
public enum Pet
{
    Cat,
    ....
}
```

I would like to be able to deserialize `"cat", "CAT", "caT"...` to `Pet.Cat` enum.

I know in Enums `Cat` and `cat` are different, however, its not in my use-case and would like whatever case that comes in the payload to match the only `Cat` in the enum.

Basically, I would like to accomplish something similar to this: `https://stackoverflow.com/questions/2441290/javascriptserializer-json-serialization-of-enum-as-string`

I'd really appreciate any guidance if this is possible.
This did come somewhat unexpected:

```
Did serialize with Json.NET in 2.606s
Did serialize with UTF8Json in 3.998s

```
Code to Test:
```
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace MemoryAllocatedCore
{
    public class BinaryDataWrapper
    {
        public byte[] Data { get; set; }
    }

    public class Program
    {
        static void Main(string[] args)
        {
            BinaryDataWrapper wrapper = new BinaryDataWrapper();
            wrapper.Data = Enumerable.Range(1, 512 * 1024).Select(x => (byte)x).ToArray();

            const int N = 1000;
            var sw =Stopwatch.StartNew();
            for (int i = 0; i < N; i++)
            {
                byte[] newtonSoftBytes = Encoding.UTF8.GetBytes(Newtonsoft.Json.JsonConvert.SerializeObject(wrapper, Newtonsoft.Json.Formatting.Indented));

            }
            sw.Stop();
            GC.Collect();
            Console.WriteLine($"Did serialize with Json.NET in {sw.Elapsed.TotalSeconds:F3}s");
            sw = Stopwatch.StartNew();
            for (int i = 0; i < N; i++)
            {
                byte[] bytes = Utf8Json.JsonSerializer.Serialize(wrapper);
            }
            sw.Stop();
            Console.WriteLine($"Did serialize with UTF8Json in {sw.Elapsed.TotalSeconds:F3}s");
        }
    }
}
```

The main issue is that Json.NET does not try to escape characters in its JsonWriter. But Utf8Json will call in its Json Writer Utf8Json.JsonWriter.WriteString(string value) for an already Base64 encoded string. Json.NET on the other hand does no checking and directly writes the contents to the output. Is this a known issue and would it easy to solve? 
The Utf8Json.JsonSerializer.ToJsonString method is throwing an error when I try to serialize an object of type System.Type under specific circumstances. As follows:
- The System.Type object must be passed to a method in a different project to complete the serialization.
- The method that will serialize the object accepts it as type "object." An example signature: `public string SerializeObject(object anObject)`



### **Example project:**
Utf8JsonError.sln
---Utf8JsonError.csproj (Build Project)
------Program.cs
------Dependencies: Projects/Utf8JsonErrorClassProject
---Utf8JsonErrorClassProject.csproj
------Program.cs

**Utf8JsonError.Program.cs Contents:**
```
using System;
using Utf8JsonErrorClassProject;
namespace Utf8JsonError
{
    class Program
    {
        static void Main(string[] args)
        {
            var serializeClass = new Utf8JsonSerializeClass();
            var typifiedString = ("This is a string").GetType();
            var serializedData = serializeClass.SerializeObject(typifiedString);
            Console.WriteLine(serializedData);
        }
    }
}
```

**Utf8JsonErrorClassProject.Program.cs Contents:**
```
using Utf8Json;
namespace Utf8JsonErrorClassProject
{
    class Program
    {
        static void Main(string[] args)
        {
        }
    }
    public class Utf8JsonSerializeClass
    {
        public string SerializeObject(object anObject)
        {
            return JsonSerializer.ToJsonString(anObject);
        }
    }
}
```

The result is that the line `return JsonSerializer.ToJsonString(anObject);` in Utf8JsonErrorClassProject.Program.cs will throw an exception when the program is run. Making some minor modifications to the test situation will result in the code not throwing an exception. For example, changing the signature of the SerializeObject method to `public string SerializeObject(System.Type anObject)` will resolve the issue and return the expected result, but I'd like to know why the original set up is throwing an exception.

### **Exception Details:**
```
System.Reflection.TargetInvocationException
  HResult=0x80131604
  Message=Exception has been thrown by the target of an invocation.
  Source=System.Private.CoreLib
  StackTrace:
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)
   at Utf8Json.JsonFormatterResolverExtensions.GetFormatterDynamic(IJsonFormatterResolver resolver, Type type)
   at Utf8Json.Formatters.DynamicObjectTypeFallbackFormatter.Serialize(JsonWriter& writer, Object value, IJsonFormatterResolver formatterResolver)
   at Utf8Json.JsonSerializer.ToJsonString[T](T value, IJsonFormatterResolver resolver)
   at Utf8Json.JsonSerializer.ToJsonString[T](T value)
   at Utf8JsonErrorClassProject.Utf8JsonSerializeClass.SerializeObject(Object anObject) in C:\Project\Utf8JsonError\Utf8JsonError\Utf8JsonErrorClassProject\Program.cs:line 15
   at Utf8JsonError.Program.Main(String[] args) in C:\Project\Utf8JsonError\Utf8JsonError\Utf8JsonError\Program.cs:line 12

Inner Exception 1:
TypeInitializationException: The type initializer for 'FormatterCache`1' threw an exception.

Inner Exception 2:
TypeInitializationException: The type initializer for 'FormatterCache`1' threw an exception.

Inner Exception 3:
TypeLoadException: Type 'Utf8Json.Formatters.System_RuntimeTypeFormatter1' from assembly 'Utf8Json.Resolvers.DynamicObjectResolverAllowPrivateFalseExcludeNullFalseNameMutateOriginal, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' is attempting to implement an inaccessible interface.
```
Thanks