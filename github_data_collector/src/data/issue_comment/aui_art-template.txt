<!--
1. 请附带可以 **直接** 重现的 Demo，可以是压缩包、仓库、或者使用在线运行服务，否则直接关闭问题
2. 标题请简短，把内容写在 Issue 内容中，否则直接关闭问题
3. 不欢迎询问使用问题，否则直接关闭问题
-->

我在渲染的时候想把某个值调用我封装的函数处理,他就会报错误,这个怎么解决? 我是art-template@4.13.2 for browser 这个版本

使用art-template如何不把源代码原样输出带浏览器，我使用template.config("escape", false);不好使，我用的是art-template的是3.x，难道这个和版本有关系
src/index.js中判断第二个参数content 是否为 Object，如果此Object来自非当前iframe判断结果将返回false导致渲染失败。

类似此坑的文章：[说说instanceof踩了一个坑](https://www.cnblogs.com/huangxincheng/p/4176860.html)
```
const render = require('./render');
const compile = require('./compile');
const defaults = require('./defaults');

/**
 * 模板引擎
 * @param   {string}            filename 模板名
 * @param   {Object|string}     content  数据或模板内容
 * @return  {string|function}            如果 content 为 string 则编译并缓存模板，否则渲染模板
 */
const template = (filename, content) => {
    return content instanceof Object
        ? render(
              {
                  filename
              },
              content
          )
        : compile({
              filename,
              source: content
          });
};

template.render = render;
template.compile = compile;
template.defaults = defaults;

module.exports = template;
```
src/compile/index.js第30行判断debug模式强制设置cache=false，导致编译并缓存api执行后实际并未被缓存
```
// debug 模式
/* istanbul ignore if */
if (options.debug === true) {
  options.cache = false;
  options.minimize = false;
  options.compileDebug = true;
}
```
以下执行结果报错
```
// compile && cache
template('/welcome.art', 'hi, <%=value%>.');

// use
template('/welcome.art', {
    value: 'aui'
});
```
webpack-dev-server 开发时报错

![image](https://user-images.githubusercontent.com/23187848/59506663-67162f80-8edb-11e9-9499-9a1915ec3f12.png)
![image](https://user-images.githubusercontent.com/23187848/59508120-726b5a00-8edf-11e9-89c4-255ef12e34aa.png)




html 是忽略 \n 标记的，所以目前是需要对\n 转换 为\<br\> 标签，然后将 {{ value }} 改为 {{@ value }},
但是开启原文输出会出现 XSS 的安全问题,需要在代码中对数据进行过滤，增加了很多重复代码。所以能否加入自动转换\n为\<br\>的语法。
{{extend './lay_out.art'}}
{{block ‘block1’}}
  <header class="search">
    {{block 'header1'}}
    {{/block}}
    {{block 'header2'}}
    {{/block}}
    {{block 'header3'}}
    {{/block}}
    {{block 'header4'}}
    {{/block}}
    {{block 'header5'}}
    {{/block}}
  </header>
{{/block}}

在下一个art文件中：content.art
{{block 'header1'}}
  <div class="search_item grow">
    <input class="input border" type="text" placeholder="请输入搜索关键字">
  </div>
  {{/block}}

这么写似乎不生效