<!-- Please be sure to read the [Contribute](https://github.com/reactiveui/reactiveui#contribute) section of the README -->

**What kind of change does this PR introduce?**
It's fixing #545 by making `ApiResponse` implement interface `IApiResponse` and `IApiResponse<T>`. 

The rationale behind it is that `IApiResponse` interface allows to access the `ApiResponse`'s various properties without requiring a strongly typed variable. `IApiResponse<T>` gives the additional access to the content and easier/simpler testing.


**What is the current behavior?**
`ApiResponse<T>` with no interface



**What is the new behavior?**
`ApiResponse<T>` has `IApiResponse<T>` an `IApiResponse` implemented


**What might this PR break?**
Can't think of anything


**Please check if the PR fulfills these requirements**
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been added / updated (for bug fixes / features)

**Other information**:
Not sure what tests or docs should be update since it's a fairly minor change. Anyways not attached the naming of the interfaces. 

While simple, the feature would be really practical in situations where you use a form of dynamic proxy, which right now forces you to use reflection

**Is your feature request related to a problem? Please describe.**
Per discussion on Twitter & Reddit recently, I believe we should switch the codebase from using space-based indentation to tab-based.


**Describe the solution you'd like**
Tabs used in source code instead of spaces, with a .editorconfig update to enforce it in each IDE.

**Describe alternatives you've considered**
N/A

**Describe suggestions on how to achieve the feature**
With each PR, ensure that modified files use tabs instead of spaces. Ideally fail the build if spaces are used (unsure how to enforce, maybe a Stylecop rule?)

**Additional context**
https://twitter.com/BrentO/status/1148211390429184001
https://www.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/
**Describe the bug**
Locations provided to endpoints on a refit interface should seamlessly be appended to the HttpClient provided as long as the result is a valid URL when combined with that client's BaseAddress.

Instead refit throws an ArgumentException when calling RestService.For<T>(httpClient) if the endpoint is not prefixed with "/"

This is a problem because if your remote API has a base URL that includes a path, for example http://example.org/api/, HttpClient strips the "/api" location from its BaseAddress if it does not include a trailing "/". This is in conformance with the URI standard and is therefore rather an issue on refit's end.

**Steps To Reproduce**
- Create a refit endpoint
```
[Get("foo/bar")]
async Task FooAsync();
```
- Configure an HttpClient's BaseAddress to be `http://example.org/` (in the URI standard a trailing / is the correct way to indicate directories, HttpClient will strip out any trailing location for example).
- Attempt to call RestService.For() on your interface
- ArgumentException is thrown

**Expected behavior**
Request should be addressed to https://example.org/foo/bar

Hi guys,
I'm trying to port some code from retrofit2 to refit.
The retrofit version is like this:
@POST("user/me/") @Multipart Observable<UserResponse> getProfile(@Part MultipartBody.Part part, @Part MultipartBody.Part part2);

If I use multipart with strings in my c# code, the request is different that retrofit2 request.
Also by copy pasting retrofit2 request in postman generates an error.
Bellow can find some screenshots.
Thanks.
![Screenshot_20200109-114322_Gallery](https://user-images.githubusercontent.com/7832842/72081528-527e0680-3307-11ea-8c91-71d5ae277b26.jpg)
![20200109_114607](https://user-images.githubusercontent.com/7832842/72081550-5ca00500-3307-11ea-9b7c-9a064dc18d50.jpg)

//Microsoft.Extensions.Http和Microsoft.Extensions.DependencyInjection
`ServiceCollection services = new ServiceCollection();
services.AddTransient(typeof(IDisposable), typeof(AuthenticatedParameterizedHttpClientHandler));
services.AddRefitClient<IApiService>(settings)
       .ConfigureHttpClient(c => {
                                                    c.BaseAddress = new Uri("http://127.0.0.1/:8080" + "/iLab/");
                                                    c.DefaultRequestHeaders.Add("Content-Type", "application/json; charset=UTF-8");
                                                })
                            .AddHttpMessageHandler<AuthenticatedParameterizedHttpClientHandler>()
                            .SetHandlerLifetime(TimeSpan.FromMinutes(2));
var serviceProvider = services.BuildServiceProvider();
object httpClientFactory = serviceProvider.GetRequiredService(typeof(IApiService));`



on the above last statement, the exception is thrown. says no type for 'AuthenticatedParameterizedHttpClientHandler' registered


Does it support for protobuf serialization?
<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->

<!--
Please note although we can't commit to any timeline, priority will be given to those who are [Contributors](https://reactiveui.net/contribute/) to the project. If this is a question please ask on [StackOverflow](https://stackoverflow.com/).
-->

**Describe the bug**
<!-- A clear and concise description of what the bug is. -->
If there were different version refit on my machine, `dotnet build` will throw the error below:
```shell
...
error MSB4062: The "Refit.Generator.Tasks.GenerateStubsTask" task could not be loaded from the assembly 
/Users/Name/.nuget/packages/refit/5.0.23/buildTransitive/netstandard2.0/../../build/MSBuildCore20/InterfaceStubGenerator.BuildTasks.dll. 
Assembly with same name is already loaded Confirm that the <UsingTask> declaration is correct, 
that the assembly and all its dependencies are available, 
and that the task contains a public class that implements Microsoft.Build.Framework.ITask. 
[/Users/Name/Projects/Solution/src/Infrastructure/Roster.ServiceAgent/Roster.ServiceAgent.csproj]
...
```

**Steps To Reproduce**
<!--
Provide the steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error
-->
It may be caused by dotnet cache, I have to restart my machine or restart all dotnet processes to avoid this error. However, if an other project with  different version refit still throw the error.

**Expected behavior**
<!-- A clear and concise description of what you expected to happen. -->
I want to know the reason of this error and fixed this bug will be more excited.


**Screenshots**
<!-- If applicable, add screenshots to help explain your problem. -->



**Environment**
<!-- Please complete the following information. -->
- OS:       MacOS
- Device:   MBP
- Version:   10.15.1
- Working Version: dotnetcore 3.1, 3.0, 2.2

**Additional context**
<!-- Add any other context about the problem here. -->

Retrofit 2 do like this:
> public interface TaskService {  
>    @FormUrlEncoded
>    @POST("tasks")
>    Call<TaskObj> createTask(@Field("title") String title, @Field("message") String message);
>}

while in Refit, we have to do like this:
> public interface TaskService {  
>     [Post("tasks")]
>    Task<TaskObj> createTask([Body(BodySerializationMethod.UrlEncoded)] RequestObj);
>}

which require extra object or dictionary object.
that seems a bit complex for such simple case.

so I think it is better, refit could support similar thing like Retrofit.
<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->

<!--
Please note although we can't commit to any timeline, priority will be given to those who are [Contributors](https://reactiveui.net/contribute/) to the project. If this is a question please ask on [StackOverflow](https://stackoverflow.com/).
-->

**Is your feature request related to a problem? Please describe.**
<!-- A clear and concise description of what the problem is. -->
Currently there isn't a (nice) way to pass data to your pipeline of DelegatingHandler classes. 


**Describe the solution you'd like**
<!-- A clear and concise description of what you want to happen. -->
What I would like to see is the ability to place data into HttpRequestMessage.Properties dictionary on a per-request basis. It should function basically the exact same way the Headers and Header attributes do, except you pass in key value pairs and they get stored in the HttpRequestMessage.Properties. 

**Describe alternatives you've considered**
<!-- A clear and concise description of any alternative solutions or features you've considered. -->
I currently am using the Headers and Header attributes to accomplish this goal, but it's a nasty hack. It works, but it's not a nice solution. It's not what HTTP headers are intended for. I currently have 3 very different logging concerns that I take care of using a series of DelegatingHandler classes and each pulls out the header(s) its looking for and logs the contents if certain criteria are met. For example I need to log a friendly error message in a user facing log so there is one handler for that and the exception message (if the result is non 200) is stored in a header that I pull out and throw an exception which bubbles up to the client. I also need to log a success message in a user facing log if the request succeeded, so there is a header for that. Plus some diagnostics information for instrumenting performance and tracing metrics on the whole pipeline etc.


**Describe suggestions on how to achieve the feature**
<!-- A clear description to how to achieve the feature. -->
It looks like it's not too hard to do, and if you agree with the approach I'd be happy to submit a PR. 
How I would implement it is add two new attributes `PropertiesAttribute` and `PropertyAttribute` and in the constructor of `RestMethodInfo.cs` extract the values present on the MethodInfo and MethodParams pretty much exactly the same as Headers and Header attributes do it and store them on the `RestMethodInfo` class.  

Then inside `RequestBuilderImplementation` take the Properties we saved in `RestMethodInfo` and populate them into the `HttpRequestMessage.Properties`

The one problem I can see is that all the building of those request objects is currently cached.  So, you'd need to be able to opt-out of caching either manually (with an attribute) or automatically (if Property attribute is detected) or update the cache key to include Property parameters key AND value pairs.
<!-- Please be sure to read the [Contribute](https://github.com/reactiveui/reactiveui#contribute) section of the README -->

**What kind of change does this PR introduce?**
<!-- Bug fix, feature, docs update, ... -->
Fixes #802 


**What is the current behavior?**
<!-- You can also link to an open issue here. -->



**What is the new behavior?**
<!-- If this is a feature change -->
Allows any casing in the parameter binding to the object


**What might this PR break?**



**Please check if the PR fulfills these requirements**
- [ x] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been added / updated (for bug fixes / features)

**Other information**:

