See #1710.
Fix using `wxHD_BITMAP_ON_RIGHT`.
Possible fix for [#18245](https://trac.wxwidgets.org/ticket/18245).
Show more columns in widgets sample, redesign page.
Remove the check that the size representation was the same as float and
as double, which was supposed to catch various edge cases (NaNs, huge
numbers etc) but actually caught plenty of perfectly valid font sizes
such as 13.8 that simply lost precision when converting from double to
float.

Just check that the size is positive and less than FLT_MAX to avoid
using values that really don't make sense as font sizes.

Also add a unit test checking that using fractional font sizes in
description string works as expected.

Closes #18590.
This adds an additional `wxWebView` backend based on the upcoming Microsoft Edge (Chromium). 

![image](https://user-images.githubusercontent.com/5075894/72071694-b0512500-32ec-11ea-9d74-0674293965aa.png)


The underlying WebView2 SDK is documented [here](https://docs.microsoft.com/en-us/microsoft-edge/hosting/webview2).

Follow the build instructions in the [wxWebView documentation page](https://github.com/TcT2k/wxWidgets/blob/webview_edgec/interface/wx/webview.h#L282).

This is very similar to my previous attempt #807 where I integrated the (now legacy) Edge which is part of Windows 10.

This backend has currently quite a few features missing but might still be
a better choice than IE when displaying web content. The unsupported
features are the following: virtual filesystems, custom urls.

I've tested building with Visual Studio 2017 Community using CMake on Windows 10.
This is still a work in progress see the list of known todos:

- [x] Deciding on how to integrate
- [x] Document build process
- [x] Add to Visual Studio Projects
- [x] Check nmake builds
- [x] Add RunScript() implementation
- [x] Figure out string parsing from `ExecuteScript()`
Obviously it helps if the users is able to know where their codes went wrong, especially when the codes is lengthy. I was trying to return a JSON.stringify(e), which provides more information, but have difficulty to remove method toJSON from the Error object e. If anyone knows how to do it (without jQuery), please let me know. I personally would like the whole contents of e to be returned, including both line number and column number. Anyway, it's better than nothing to have the callstack. By the way, the property stack of e seems non-standard, but it does exist in both IE 11 and WebKit-based browser.
For example, a newline was escaped to be a backslash followed by a newline, but it actually shall be a backslash followed by a character 'n'. It seemed okay with most of codes until in the case that C++ style comments, i.e. single line comments, in the JavaScript codes. If the newline characters are not escaped correctly, the JavaScript interpreter will ignore everything that goes after the single line comments because the interpreter obviously cannot find the newline where it's supposed to stop treating codes as comments.
CoreServices.h ultimately #includes AssertMacros.h, which by default
on older SDKs (<10.12) introduces various macros whose names very easily
conflict with user code.

For example, if you #included <wx/fswatcher.h> in your own code, and
your code happened to contain a symbol called 'check', or 'verify',
compilation failed.

No other wx header has a dependency on CoreServices.h or AssertMacros.h.
Instead of internal values, `GdkAtom` is now `const char *` pointing to internal strings. For generic `char*`, always call `g_intern_string` to get the internal pointer from gdk, so we can compare pointers instead of doing strcmp.
See [this ticket](https://trac.wxwidgets.org/ticket/18418)
This PR will take care of the ticket 13888.

It makes the PR #1448 obsolete.

Both unmodified sample and and the sample modified with the patch attached to the ticket works.

Please check the ticket, review PR and apply.

Thank you.
