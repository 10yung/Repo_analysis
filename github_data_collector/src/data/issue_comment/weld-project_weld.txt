thx
Hi,
I followed the instructions for Mac installation and ran setup.py for "pyweld" and "grizzly".
Importing **grizzly.grizzly** threw error for me since, inside the **grizzly.py** it was unable to **import utils.py** or **seriesweld.py** etc.  
The imports worked once I manually changed the imports to  --
"import grizzly.utils" 
"import grizzly.seriesweld"
But now, it popped another error saying - 
"dlopen(/usr/local/lib/python3.7/site-packages/grizzly/numpy_weld_convertor.dylib, 6): image not found"
This error also showed up for 'libweld.dylib' which was solved again by manually copying to the path.

Hello, thank you for your work. I'm currently looking for a suitable solution for building Machine Learning foundation libraries in Rust. 

I'm evaluating how Weld could help in this space by generating optimised code for CPU and GPU by leveraging it's IR. However, I couldn't find much information about how to use Weld to generate GPU code. 

Is this something in progress? Where can I find more info about it? 
The license of weld is listed as BSD-3-Clause.  However, the license file is not included in the python sdists as the license requires.  IANAL, but my understanding is that, strictly speaking, nobody can legally use them.
This adds a new SIR optimization pass that removes unnecessary assignment statements in the SIR in loop body functions.

@harumichi can you try this for your use case and make sure its sufficient?

**Note:** Because of various complexities in the way that loop bodies are called and how they reference symbols in the calling process (see comment in the patch), this patch is only applied to innermost loop body functions at the moment. Rather than trying to make this pass interprocedural to support other functions, it will be better to simplify the SIR/code generation by making the loop body function a closure over the values it accesses, and have the code generation access those values as parameters of this closure without requiring specific naming conventions (currently, the variable names in the loop body function must match variable names in the calling function, which makes deleting those variables more complex).
Setting runtime settings for Weld in the Python package requires manually adding parameters to each supported function, so those parameters can be passed into WeldObject's evaluate. A `config` module or a `.config` file would be a nicer way to set settings such as memory usage, compile flags, number of threads, and logging.
The Weld Object class in Python is currently quite clunky, as it requires manually stitching together strings and splicing in types, etc. It can probably be made nicer by (a) using function decorators to mark certain functions as Weld enabled, (b) adding a programmatic API for building expressions and tracking dependencies, and (c) allowing each function to return a Weld function instead of an expression.
Add a getting started guide for newcomers to the Weld package (depends on #479)

As suggested by @wesm in #110 , it would be better to have a single Weld package organized into subpackages that contain integrated libraries. This will also make the package structure more consistent with weld-project/split-annotations, which will eventually be combined with Weld's runtime.
This will make packaging and maintaining code that uses PyO3 easier.