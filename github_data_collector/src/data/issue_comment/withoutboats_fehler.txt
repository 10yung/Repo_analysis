Closes #27

The `throws` macro now takes an optional `as TYPE` argument. If this is
present, instead of transforming the return type to `Result`, it transforms it
to `TYPE` parameterized by the return and error types.

The error type is optional as well: if no error type is present, the wrapper
type is parameterized only by the return type.

This allows you to write `#[throws(as Option)]` to make a throwing function
that returns an option.

It also supports other try types.

Syntactically, these two should both work and be equivalent:
`#[throws(io::Error as Poll<Result>)]`
`#[throws(as Poll<io::Result>)]`

However, these do not work because of the way the return type needs to be
wrapped in poll. More thought needs to go into how to support the Poll types.
Considering renaming this library to `exceptional`. The problem with `fehler` is of course how close the pronunciation is to `failure`. Also, the name `fehler` was based on this being a "successor" to `failure`, but the crate that is a successor to `failure` in my opinion is really `anyhow`.
Would like to support:

```rust
#[throws(as Option)]
```

etc

The problem is with the `throw!` macro. If the try trait were stable, we could instead run this:

```rust
return <_ as core::ops::Try>::from_err(..)
```

But that would make this a nightly only crate.

I'm not sure if 

## Design notes

I'd make the syntax work like this:

```rust
#[throws(as $wrap)]
fn function() -> $ret

// translated to:
fn function() -> $wrap<$ret>
```

Whereas:

```rust
#[throws($err as $wrap)]
fn function() -> $ret

// translates to:

fn function() -> $wrap<$ret, $err>
```

This is why I modified the default error type feature to require an explicit `_`.
Would be nice to have actually good documentation here