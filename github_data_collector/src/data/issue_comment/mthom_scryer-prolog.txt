Scryer Prolog is now very close to supporting CLP(ℤ)!

The remaining issues that need to be resolved before I can create a pull request are:

1. Goal expansion must work for `(\+)/1` (#249). 
2. The most worrying is #255. I need to find out why this fails, and it is hard to tell how complex this is and how long it will take. I am working on it.
3. To debug (2), I need a reliable toplevel that correctly tells us all residual goals. This is #254.
4. Algorithms devised by Prof. Jean-Charles Régin have been a huge motivation for my work in the area of constraints, and I would like to spell his name correctly in the CLP(ℤ) source code. This is #219.
5. Support for the discontiguous directive would be useful (#229) to keep logically connected definitions together in the source file.

Mark, thank you for all the work you have already put in to get this close! Please focus on the more urgent things (such as #95 and other discussed issues), and I am looking forward to filing a pull request that provides CLP(ℤ) for Scryer Prolog as soon as everything above works!
With `clpz9.pl` from https://www.metalevel.at/clpz/scryer/clpz9.pl and the following program:

<pre>
:- use_module(clpz9).
:- use_module(library(lists)).

tasks(Tasks, Starts, End) :-
        Tasks = [task(_,1,_,1,_)],
        maplist(task_start, Tasks, Starts),
        Starts ins 0..1,
        cumulative(Tasks, [limit(2)]),
        foldl(max_end, Tasks, 0, End).

task_start(task(Start,_,_,_,_), Start).

max_end(task(_,_,End,_,_), E0, E) :-
        E #= max(E0, End).
</pre>

I get:

<pre>
<b>?-  tasks(Tasks, Starts, End), label(Starts).</b>
false.
</pre>

This is *incorrect*. The following *more specific* query shows that there is a solution:

<pre>
<b>?-  Starts = [0], tasks(Tasks, Starts, End), label(Starts).</b>
End = 1, Starts = [0], Tasks = [task(0,1,End,End,_103)]  ;
false.
</pre>

I will try to find a smaller test case that exhibits this issue.
Here are several interrelated issues resulting from the desire to correctly show **residual goals** on the toplevel.

Starting with `clpz8.pl` from https://www.metalevel.at/clpz/scryer/clpz8.pl and the following program:

<pre>
:- use_module(clpz8).

puzzle([S,E,N,D] + [M,O,R,E] = [M,O,N,E,Y]) :-
        Vars = [S,E,N,D,M,O,R,Y],
        Vars ins 0..9,
        all_different(Vars),
                  S*1000 + E*100 + N*10 + D +
                  M*1000 + O*100 + R*10 + E #=
        M*10000 + O*1000 + N*100 + E*10 + Y,
        M #\= 0, S #\= 0.
</pre>

I get:

<pre>
<b>?- puzzle(Ps).</b>
Ps = ([9,_751,_1102,_1453]+[1,0,_2506,_751]=[1,0,_1102,_751,_2857]) ;
false.
</pre>

However, these variables are involved in *constraints*, and I therefore expect to see residual constraints.

I can obtain them as a list `Gs` of goals with `copy_term/3`:

<pre>
?- puzzle(Ps), copy_term(Ps, Copy, Gs).
</pre>

In this example, `Copy` is a **fresh copy** of the term Ps, and I therefore expect the following query to *succeed*, although it currently unexpectedly *fails*:

<pre>
<b>?- puzzle(Ps), copy_term(Ps, Copy, Gs), Ps = Copy.</b>
false.
</pre>

In particular, the following should succeed, and the toplevel should use this to obtain the list `Gs` of residual goals:

<pre>
<b>?- puzzle(Ps), copy_term(Ps, Ps, Gs).</b>
</pre>


Currently, it unexpectedly *fails*, and the toplevel does not show the residual goals at all.

*After* this query has failed, the earlier query suddenly yields much more output, and the output also contains terms that are not residual goals, such as:

<pre>
<b>?- puzzle(Ps), copy_term(Ps, Copy, Gs).</b>
..., clpz, u33, ...
</pre>

Please see #253 for a crash that is also related to this.

... not the expected <code>X = Y.</code> (or, alternatively, <code>Y = X.</code>)

-------------

The binding appears to be present, as shown by the following snippet.

<pre>
?- X = Y, X = 1.
X = 1, Y = 1 .
</pre>
((This is for a later moment after #24 #95 is done))

For UTF-8 files not containing a zero-byte (the majority of files to be parsed), `phrase_from_file(Phrase__0, File)` could avoid incremental copying altogether using [`mmap(3)`](http://man7.org/linux/man-pages/man2/mmap.2.html). The file is mapped at once into a fitting memory area of the heap up to the last page, which is written anew with a terminating zero-byte and a nil at the end.
With `clpz7.pl` from https://www.metalevel.at/clpz/scryer/clpz7.pl, I get:

<pre>
<b>?- all_distinct([X,Y,Z]), [X,Y] ins 0..1.</b>
caught: error(existence_error(procedure,get_attr/3),get_attr/3)
</pre>

However, `get_attr/3` is subject to goal expansion and should not occur anywhere as a goal.
It should be possible to apply async-await execution.
Initially at least to the simple case of mutually independent conjunctive subgoals.
For example, with `clpz3.pl` from https://www.metalevel.at/clpz/scryer/clpz3.pl, I get:

<pre>
<b>?- use_module(library(dcgs)).</b>
true.
<b>?- phrase(clpz:cis_goals(X, Y), Ls).</b>
caught: error(existence_error(procedure,(:)/4),call/5)
</pre>

Expected: `X = Y, Ls = []`.
Would be great if Scryer can call libraries written in Rust.
For example, with the following definitions:

<pre>
f(a).
g(a).
f(b).
</pre>

I get:

<pre>
<b>?- f(X).</b>
X = b.
</pre>

whereas I would also like to get `X = a` as a solution.

To support discontiguous clauses, the standard prescribes the discontiguous/1 directive:

<pre>
<b>7.4.2.3 discontiguous/1</b>

A directive discontiguous(PI) where PI is a predicate
indicator, a predicate indicator sequence, or a predicate
indicator list specifies that each user-defined procedure
indicated by PI may be defined by clauses which are not
consecutive read-terms of the Prolog text.

...

All the clauses for a user-defined procedure P shall be
consecutive read-terms of a single Prolog text unless there
is a directive discontiguous(UP) directive indicating P
in that Prolog text.
</pre>

Discontiguous predicate definitions are useful for example to put the definitions of different types of `goal_expansion/2` at separate positions in source files so that they are logically grouped with related predicates.