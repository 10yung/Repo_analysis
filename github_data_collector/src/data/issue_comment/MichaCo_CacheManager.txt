I'm using cache **both in memory and redis**,and I'm trying to reload cache using the following steps:
1.**clear region**(which is already loaded from app start);
2.**add my new cache data**;
It works in most cases,but I got a strange thing for "**Failed to add item because it exists**" sometimes ,
**logs are as below:**
`2020-01-13 16:12:40.2798|TRACE|service:|CacheManager.Core.BaseCacheManager|Clear region: SysRegion.||traceid:|requestid:|GoldDustSyscfgCacheLoader.Load => BaseCacheManager`1.ClearRegion => MicrosoftLoggerAdapter.Log
2020-01-13 16:12:40.2798|TRACE|service:|CacheManager.Core.BaseCacheManager|**Clear region: SysRegion in handle innerMemoryCache**.||traceid:|requestid:|GoldDustSyscfgCacheLoader.Load => BaseCacheManager`1.ClearRegion => MicrosoftLoggerAdapter.Log
2020-01-13 16:12:40.2798|TRACE|service:|CacheManager.Core.BaseCacheManager|**Clear region: SysRegion in handle redisCache**.||traceid:|requestid:|GoldDustSyscfgCacheLoader.Load => BaseCacheManager`1.ClearRegion => MicrosoftLoggerAdapter.Log
2020-01-13 16:12:40.2849|TRACE|service:|CacheManager.Core.BaseCacheManager|**Clear region: SysRegion: notifies backplane [clear region]**.||traceid:|requestid:|GoldDustSyscfgCacheLoader.Load => BaseCacheManager`1.ClearRegion => MicrosoftLoggerAdapter.Log
2020-01-13 16:12:40.2908|TRACE|service:|CacheManager.Core.BaseCacheManager|Add ['SysRegion:c|包装方式_n|1', exp:Default 00:00:00, lastAccess:2020-01-13 08:12:40.289] started.||traceid:|requestid:|CacheManagerHelper.Add => BaseCacheManager`1.AddInternal => MicrosoftLoggerAdapter.Log
2020-01-13 16:12:40.2930|DEBUG|service:|CacheManager.Redis.RedisCacheHandle|DB 3 | Failed to add item ['SysRegion:c|包装方式_n|1', exp:Absolute 7.00:00:00, lastAccess:2020-01-13 08:12:40.289] because it exists.||traceid:|requestid:|RetryHelper.Retry => RedisCacheHandle`1.Set => MicrosoftLoggerAdapter.Log
2020-01-13 16:12:40.2941|TRACE|service:|CacheManager.Core.BaseCacheManager|Evict [SysRegion:c|包装方式_n|1] from other handles excluding handle '1'.||traceid:|requestid:|BaseCacheManager`1.AddInternal => BaseCacheManager`1.EvictFromOtherHandles => MicrosoftLoggerAdapter.Log
2020-01-13 16:12:40.2941|DEBUG|service:|CacheManager.Core.BaseCacheManager|Evicting 'SysRegion:c|包装方式_n|1' from handle 'innerMemoryCache'.||traceid:|requestid:|BaseCacheManager`1.EvictFromOtherHandles => BaseCacheManager`1.EvictFromHandle => MicrosoftLoggerAdapter.Log
2020-01-13 16:12:40.2941|TRACE|service:|CacheManager.Core.BaseCacheManager|Add ['SysRegion:c|包装方式_n|2', exp:Default 00:00:00, lastAccess:2020-01-13 08:12:40.294] started.||traceid:|requestid:|CacheManagerHelper.Add => BaseCacheManager`1.AddInternal => MicrosoftLoggerAdapter.Log
2020-01-13 16:12:40.2954|DEBUG|service:|CacheManager.Redis.RedisCacheBackplane|Backplane is sending 1 messages (0 skipped).||traceid:|requestid:|ExecutionContext.RunInternal => <<SendMessages>b__0>d.MoveNext => MicrosoftLoggerAdapter.Log
2020-01-13 16:12:40.2966|DEBUG|service:|CacheManager.Redis.RedisCacheHandle|DB 3 | Failed to add item ['SysRegion:c|包装方式_n|2', exp:Absolute 7.00:00:00, lastAccess:2020-01-13 08:12:40.294] because it exists.||traceid:|requestid:|RetryHelper.Retry => RedisCacheHandle`1.Set => MicrosoftLoggerAdapter.Log`
I'm using **aspnetcore2.1** with **cachemanager 1.1.2**.
**This is my config code:**
`Manager = CacheFactory.Build("enjoyDefaultCache", options =>
                {
                    options.WithMicrosoftLogging(loggerFactory)//集成log
                           .WithUpdateMode(CacheUpdateMode.Up)//指定与上层缓存进行数据同步
                           .WithMicrosoftMemoryCacheHandle("innerMemoryCache")//一级缓存：内存
                           .WithExpiration(ExpirationMode.Absolute, TimeSpan.FromHours(2))//2小时过期
                           .EnableStatistics() //启用统计
                                               //.EnablePerformanceCounters()
                           .And
                           .WithRedisConfiguration(CONFIG_KEY_REDIS, config =>
                           {
                               var rds = config.WithAllowAdmin()
                                              .WithDatabase(3)
                                              .WithEndpoint(endPoint.Address.ToString(), endPoint.Port);

                               if (!string.IsNullOrWhiteSpace(redisConfigOptions.Password))
                               {
                                   rds.WithPassword(redisConfigOptions.Password);
                               }
                           })
                           //.WithMaxRetries(100)
                           //.WithRetryTimeout(50)
                           .WithJsonSerializer()//添加序列化组件，否则初始化rediscachehandle失败
                           .WithRedisBackplane(CONFIG_KEY_REDIS)//使用redis作为基准缓存
                           .WithRedisCacheHandle(CONFIG_KEY_REDIS, true)//二级缓存：声明redis缓存层，并指定为基准缓存
                           .WithExpiration(ExpirationMode.Absolute, TimeSpan.FromDays(7))//一周过期
                           .EnableStatistics() //启用统计
                                               //.EnablePerformanceCounters()
                           ;
                });
            }`
So please give some help,thanks!
Hello, 
I'm using Cachemanager core (v 1.2.0 )  with the  following config 
```

var definition = new CouchbaseClientDefinition();
            configuration.GetSection("CoucheDb").Bind(definition);
            var clientConfig = new ClientConfiguration(definition);
            ICacheManager<string> CacheInstance = CacheFactory.Build<string>(settings =>
            {
                settings
                 //Memory cach 
                 //.WithMicrosoftMemoryCacheHandle(). WithExpiration(ExpirationMode.Sliding, TimeSpan.FromMinutes(60)) 
                 // .And
                 //couch  cach 
                .WithCouchbaseConfiguration("couchedb", clientConfig)
                 .WithJsonSerializer()
                .WithMaxRetries(5)
                 .WithRetryTimeout(100)   
                 .WithCouchbaseCacheHandle("couchedb"); 


            });
             
                serviceCollection.AddSingleton(CacheInstance);
```


In my code   below ,I use the cache instance to check for a key , if it doesn't exist it's then added to the cache , the _cache.Exists() and _cache.add() are working fine and the the item is added also in the couche db as a json doc (see joined file )  , but the Get function throws a nullReferenceException  and I fail to figure out why.  

**Code snippet :** 
 
```
  if ( _cacheManager.Exists("item_key")  )
       {
        var cachedItem = _cacheManager.Get("item_key"); 
       }
     else                  
       {
   _cacheManager.Add("item_key", "item_value");
       }

```

**Exception :** 
`
{System.NullReferenceException: Object reference not set to an instance of an object.   at CacheManager.Core.Internal.BaseCache`1.Get(String key)`



**couch data :** 
 
![snip_couch](https://user-images.githubusercontent.com/18676932/72157590-9aa93180-33b8-11ea-97d4-b68a2fa19cbd.PNG)

Thanks in advance 



 
I am using CacheManager for 2 layers of caching to increase speed across my applications.
I'm using InMemory cache along with Redis as a back plane.

I'm working with invalidating the local in-memory cache data. I have subscribed to the item update and remove event on redis cache but my application does not receive any events. When I run the command it shows that it has already subscribed to the channel which can be seen from the result of the command given below. 
 

    localhost:6379> pubsub channels *
    1) "__Booksleeve_MasterChanged"
    2) "CacheManagerBackplane"

The event registration code can be seen below:
```
ICacheManager<object> manager = GetCacheInstance();
            manager.OnRemoveByHandle += EventHandlerRemove;
            
```

     public void EventHandlerRemove(object sender, CacheItemRemovedEventArgs e){}


This is cache registration.  

    var manager = CacheFactory.Build<object>(settings => {
                    settings.WithJsonSerializer();
                    settings
                        .WithSystemRuntimeCacheHandle()
                        .And
                        .WithRedisConfiguration("redis", config => {
                            config.WithAllowAdmin()
                                .WithDatabase(0)
                                .WithEndpoint("localhost", 6379);
                        })
                        .WithRedisBackplane("redis")
                        .WithRedisCacheHandle("redis", true);
                    settings.WithUpdateMode(CacheUpdateMode.None);
                });


Is there anything wrong with this code or do I require some additional configuration for this to make it work? 

**what I want to achieve**: 

I have Redis cache and multiple services are using this for invalidating their data using the events of this Redis cache. Each service have its own local in-memory cache related to the data in the main Redis cache. when the data is modified in the Redis cache each local cache will receive an event of data updated or removed from Redis cache and hence they will remove their local copy too to avoid serving stale data. 


Since having that argument means the handle requires a serializer for sure (rather than if it, say, read from the `configuration`), we could provide the same error visibility for handles that miss the attribute just by checking the arguments on the ctor.

https://github.com/maldworth/CacheManager.FileCaching/issues/5
Hi,

I am using AWS Redis service and I have a primary server and 1 readonly replica. In my app, most of the cache usage is readonly, so I tried to configure cache manager to have 2 instances, one for Write and another for Read.

But while instantiating the READONLY one, it fails with the message: "No writeable endpoint found"

Is there a way to achieve what I want?

My main purpose is that the replicas sit there only waiting for the primary to go down. I would like to use those to "free" some of the load of the primary node.

Thanks
I am wrapping the BaseCacheManager<> object to customize key values. Several methods allow overrides (Get, Put, Add, etc). However, there are some really nice helper methods that cannot be overridden.

Example of the wrapper in an external project:
![image](https://user-images.githubusercontent.com/114626/60681492-72ff6c80-9e5d-11e9-9ba5-b1ae7718aab2.png)

Example do flagging addtl helper methods in BaseCacheManager as virtual:
![image](https://user-images.githubusercontent.com/114626/60681557-b8239e80-9e5d-11e9-9522-243feab68ff1.png)

Since I am new to the project, I may be overlooking something. But my goal is to modify the key before any cache requests. At first thought, hooking into the various events for cache operations (OnAdd, OnRemove, etc) I could do this, but they key is readonly here, and that's probably a safety measure. Do you see any issue with marking the additional caching methods in the BaseCacheManager class as virtual?

I could submit a PR *if* not. I only have a few hours of familiarity with this project, so I don't know the implications this may have on the design strategy of the CacheManager project.



.NET Core 3x introduces the new built-in [System.Text.Json](https://github.com/dotnet/corefx/blob/master/src/System.Text.Json/docs/SerializerProgrammingModel.md) namespace which has a higher performance than the `Newtonsoft.Json` dependency of `CacheManager.Serialization.Json`. It would be nice to add it later.
I've just started evaluating this library and I have a couple of questions:

1. Is there a way to control the amount of metadata created in a particular store?For caches of small objects the default metadata is quite large, being able to minimise or reduce the metadata if a feature is not used would be useful.  For a typed cache is the fully qualified type name needed or could it be inferred from the cache type.

2. It would be great to be able to register/inject a functor per type for key construction so that the key can be inferred from the type instance rather than having to explicitly provide it. 


run AspnetCore.WebApp,page error：No instance of ILoggerFactory found in serviceCollection.
change `services.AddCacheManagerConfiguration(Configuration, cfg => cfg.WithMicrosoftLogging(services));` to `services.AddCacheManagerConfiguration(Configuration);` is ok.
I have both in my project anyways, which brings me to the question, does one have an advantage over the other?

Second question, does CacheManager 1.2 work with Microsoft.Extensions.Caching.Memory 2.2?