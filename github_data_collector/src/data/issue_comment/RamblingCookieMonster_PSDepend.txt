Resolves #107  
Added a 'Clean' switch to PSGalleryModule. When specified via parameters:
@{
    PSDependOptions = @{
        Target = 'C:\temp'
    }

    Pester = @{
        DependencyType = 'PSGalleryModule'
        Name = 'Pester'
        Parameters = @{ Clean = $true }
        Version = '4.8.0'
        AddToPath = 'C:\temp'
    }
}

the script will clean out any existing versions of the same module, located within any of the paths defined in $env:PSModulePath. Had to refactor a good amount of the code to accommodate this feature. 
In order to maintain a desired state for your module environment, there needs to be a way to clean out any unexpected module version conflicts. For example, if I already have Pester v4.1.0 installed on my machine and want to additionally define a dependency with v4.9.0, I would want PSDepend to allow me to delete the old v4.1.0 automatically.
Trying to use PSDepend with UniversalDashboard module, but PSRepositoryModule dependency type doesn't support AcceptLicense.

```
WARNING: Parameter [AcceptLicense] with value [True] is not a valid parameter for [PSGalleryModule], ignoring.  Valid params: [AllowClobber Dependency Import PSDependAction Repository SkipPublisherCheck]
```

This PR adds in a AcceptLicense parameter to PSGalleryModule, which defaults to true.

```powershell
@{
    Pester = 'latest'
    UniversalDashboard = @{
        Name = 'UniversalDashboard'
        DependencyType = 'PSGalleryModule'
        Parameters = @{
            AcceptLicense = $true
        }
        Version = '2.7'
    }
}
```
With regard to  #59 

By adjusting the reference to the path variable and adjusting the support property in the [DependMap.psd1](https://github.com/RamblingCookieMonster/PSDepend/blob/master/PSDepend/PSDependMap.psd1) file, the Dependency Handler Git can also run on *nix systems.
This came from #94 

* Added documentation for the Credential dependency property and the Credentials parameter as I couldn't find any information on it;
* Clarified the function based help for Invoke-PSDepend on the Credentials parameter;
* Whitespace changes (tabs to spaces for the code added to Invoke-PSDepend to support the Credentials parameter);

When using the -Credentials parameter when calling `Invoke-PSDepend` for dependencies that don't require credentials, would result in the erroneous warning `WARNING: No credential found for the specified name . Was the dependency misconfigured?`

### Example

```sh
Invoke-PSDepend -Path "./depends.psd1" -Install -Import -Credentials @{
  "repo1WithCredential" = (Get-Credential)
}
```

#### File `depends.psd1`
```sh
@{
    "PSModule1" = @{
        
        "Name"           = "PSModule1"
        "Version"        = "1.0.0"
        "DependencyType" = "PSGalleryModule"
        "Credential"     = "repo1WithCredential"
        "Parameters"     = @{
            "Repository" = "repo1WithCredential"
        }
    }
    "PSModule2" = @{
        "Name"           = "PSModule2"
        "Version"        = "2.1.0"
        "DependencyType" = "PSGalleryModule"
        "Parameters"     = @{
            "Repository" = "repo2WithoutCredential"
        }
```

Would generate the warning when processing the `PSModule2` dependency.

```sh
WARNING: No credential found for the specified name . Was the dependency misconfigured?
```

### Fix

The -Name parameter in `Resolve-Credential` is cast from $null to an empty string "". So now both null and an empty string are checked.

When using a Git repository, if target doesn't exist, the dependency is downloaded in the current directory and the error is silenced, affecting the path sctructure of your proyect. Unless you check the $Errors variable, you'll never now what is happening.

However, when using PowerShell Gallery, the bellow piece of code does the work in the Save-Module function:
**When -Force is specified, Path will be created if not available**

        # When -Force is specified, Path will be created if not available.
        if(-not $Force)
        {
            if($Path)
            {
                $destinationPath = Resolve-PathHelper -Path $Path -CallerPSCmdlet $PSCmdlet | Microsoft.PowerShell.Utility\Select-Object -First 1 -ErrorAction Ignore

                if(-not $destinationPath -or -not (Microsoft.PowerShell.Management\Test-path $destinationPath))
                {
                    $errorMessage = ($LocalizedData.PathNotFound -f $Path)
                    ThrowError  -ExceptionName "System.ArgumentException" `
                                -ExceptionMessage $errorMessage `
                                -ErrorId "PathNotFound" `
                                -CallerPSCmdlet $PSCmdlet `
                                -ExceptionObject $Path `
                                -ErrorCategory InvalidArgument
                }

                $PSBoundParameters['Path'] = $destinationPath
            }
            else
            {
                $destinationPath = Resolve-PathHelper -Path $LiteralPath -IsLiteralPath -CallerPSCmdlet $PSCmdlet | Microsoft.PowerShell.Utility\Select-Object -First 1 -ErrorAction Ignore

                if(-not $destinationPath -or -not (Microsoft.PowerShell.Management\Test-Path -LiteralPath $destinationPath))
                {
                    $errorMessage = ($LocalizedData.PathNotFound -f $LiteralPath)
                    ThrowError  -ExceptionName "System.ArgumentException" `
                                -ExceptionMessage $errorMessage `
                                -ErrorId "PathNotFound" `
                                -CallerPSCmdlet $PSCmdlet `
                                -ExceptionObject $LiteralPath `
                                -ErrorCategory InvalidArgument
                }

                $PSBoundParameters['LiteralPath'] = $destinationPath
            }
        }
I propose then to implement the same behaviour in **Git.ps1** script with the following lines:

else
{
if ($Force) {New-Item -ItemType Directory -Name $Dependency.Target -Force | Out-Null
            Write-Debug "Target folder $($Dependency.Target) created as -Force switch was specified"
            $Target = Join-Path $PWD "$($Dependency.Target)"
            }
    else {
        $Target = $PWD.Path
        Write-Debug "Target defaulted to current dir: $Target"
        }
}
I would think we could just use the web cmdlets [here](https://github.com/RamblingCookieMonster/PSDepend/blob/master/PSDepend/Private/Get-WebFile.ps1)?

I wanted to use FileDownload in a project but sadly can't because it's windows only :( 
Say I have a PSDepend that is:
@{
    BuildHelpers                    = '1.1.4'
}

And I already have buildhelpers 1.1.4 installed. PSDepend should not do a find-module but accept that it is there. This would massively speed up dependency checking when a lot of modules are involved, since PSdepend doesn't run in parallel. If 'latest' is specified it will always find-module regardless.

I'll write a PR if you agree. I can write is as a parameter -FastVersionMatch or something.
Backward compatible.

This should fix #68 adding Pre-release option
Fix #65 by adding a filter like: `-gt 1.2 -and (-le 1.7 -or gt 2.0 )`
Also supports SemVer1/2/NuGet2 versions and filter
Should fix #44 by piping the module to Ipmo -force -scope global

@RamblingCookieMonster might not be 100% for merging, but asking for feedback