Rubocop brings with it a certain amount of maintenence burden and
keeping project level config files means they're always somewhat out of date.
Additionally, we already have [thoughtbot/guides][one] which is the
source of truth.

This removes that to see if we get the right outcome.

[one]: https://github.com/thoughtbot/guides/blob/master/style/ruby/.rubocop.yml
Added a Date Field, where the datepicker lets the admin user select just a date without time.

![Screen Shot 2020-01-16 at 12 49 51 PM](https://user-images.githubusercontent.com/20058206/72539880-c5830200-385e-11ea-922a-58f1d8038373.png)

**Notes:**
- After needing a Date field on the project I'm working, and seeing there were other people that reported their desire to have it (see https://github.com/thoughtbot/administrate/issues/741), I decided to contribute to Administrate with this PR ðŸ˜ƒ 

Issue: https://github.com/thoughtbot/administrate/issues/1213

![Captura de Tela 2020-01-10 aÌ€s 17 29 42](https://user-images.githubusercontent.com/54637230/72184285-dfd85e00-33ce-11ea-97ea-63e5dd581d58.png)

Displays an asterisk beside label on form when field is required

Issue: https://github.com/thoughtbot/administrate/issues/1489

![Captura de Tela 2020-01-09 aÌ€s 17 20 38](https://user-images.githubusercontent.com/54637230/72172195-55363580-33b3-11ea-8475-edb4520b276d.png)

* What were you trying to do?
Showing `HasOne` `association` in Index page. Where `association` doesn't have the corresponding path.
e.g:
`User` has_one `Profile`. But `profile` doesn't have an admin page. 
* What did you end up with (logs, or, even better, example apps are great!)?
It raises undefined method error like `Undefined method admin_profile_path`
* What versions are you running?
  - Rails 6.0
  - Administrate 12.0

I'd like to make a fix on this. If no one has.

Labels:
`bug`, `fields`


Over at https://github.com/thoughtbot/administrate/issues/612, a fair point was made: if field `options` were public, they could be accessed from templates. This would enable users to customize fields without having to create new field types, which I find a bit more cumbersome.

An argument against this change would be that it increases the contact surface of field types, which can be an issue later if we change the interface of fields.

An argument for this change would be that the interface of fields is unlikely to change radically at this point. If it did, probably subclasses would have to change anyway too, possibly forcing more significant changes than that of how to access the options.

I'm not 100% sure about this one. I'd like to hear more opinions, use cases, etc. So here's a PR, which hopefully will bring some feedback.
Working on something else, I saw the following:

```ruby
protected

# ...

def self.field_type
  to_s.split("::").last.underscore
end
```

This code can lead to misunderstanding, as the `protected` modifier doesn't apply to class methods like `self.field_type`.

On this PR, I move two such class methods behind the modifier, near the top of the class, to avoid this confusion.

I also move three other class methods to the top of the class, as I feel class methods should go together in general, in order to clarify interfaces and avoid future instances of this anti-pattern.
This is an experiment to see what would be the simplest way to implement https://github.com/thoughtbot/administrate/issues/278 The idea here is to use database views to render index pages, allowing us to display and sort records in any way we please.

For the moment, I managed to make it work while only having to change Administrate's `ApplicationController`. In this change, new hooks are introduced to allow controller actions to use specific resource classes. Therefore the `index` action can use a model based off a view, while other actions keep using the default model based off a table.

As a result, this code can do three things:

1. Order by a field in a belongs_to association. In the products index, the title of the product meta tag is shown, and it's possible to sort by it.
2. Order by the result of an aggregate function. In the customers index, it's possible to sort customers by lifetime value.
3. Eliminate the N+1 queries provoked by aggregate functions. In the customers index, the lifetime value is rendered from the result of the view. This is a bit more hacky as it involves a new definition for `lifetime_value`.

This is not quite there yet. For one, I managed to make `index` actions to work this way, but not `show` actions. There are new things that break and I need to look into.

Making the `show` action work would allow us to remove the `lifetime_value` methods from `Customer` and `Customer::Index`. The first is redundant with the view, and the second is only there to work around the first and avoid N+1 queries.

I should also add some tests specific to the features listed above.
Working with Pundit, I was seeing this index page:

![Screenshot from 2019-12-13 22-28-37](https://user-images.githubusercontent.com/36066/70836509-3f574400-1df8-11ea-93f6-50cbe6b9ec6e.png)

That was supposed to be 4 records, but they were showing as empty rows. Instead I was expecting to see the following:

![Screenshot from 2019-12-13 22-29-10](https://user-images.githubusercontent.com/36066/70836524-4e3df680-1df8-11ea-9490-9c8cbb979a58.png)

The issue was that the Pundit scope for the model was returning those records, but the per-resource policy was returning `false` for `show?` on each one of them.

This is a bit of an edge case: if the user can't see the resources, surely the scope shouldn't be returning them. Still I can think of a use case where some users can see them listed (with limited information) but can't access the show page (with additional information). In any case, Pundit allows for this, and I think this behaviour is a bug.

The fix itself is just in `app/views/administrate/application/_collection.html.erb`. Apart from that, this PR is mostly me figuring out a way to test this in a disposable way that doesn't affect other specs.

"Mostly", because there's one more thing. While working with this, I came across the `tabindex` settings on the index page. As they stand at the moment, each row is tabbable, as well as each individual cell inside each row. I understand this is because these are links, but it strikes me as very annoying to navigate. On the example above, you need to tab 5 times per row, and you get the same link for all 5 positions. I don't think this is the way `tabindex` is supposed to be used.

The reason I made this other change is because it's related: when applying the authorization fix, I had to also make rows tabbable only if they had a link. While changing this, I noticed the other behaviour.

Can someone who knows more about accessibility than me confirm all this?
Some of this was taken from https://github.com/thoughtbot/administrate/wiki/Field:-RichTextAreaField