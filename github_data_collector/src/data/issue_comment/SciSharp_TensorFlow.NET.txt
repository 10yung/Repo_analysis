Does the package also support [TPUEstimatorAPI](https://www.tensorflow.org/api_docs/python/tf/compat/v1/estimator/tpu/TPUEstimator)? In case, do you have any documented examples or getting started?
Getting the following error when attempting to get input/output operations:

> Unhandled exception. System.Exception: Can not convert a String into a Operation.
   at Tensorflow.Graph._as_graph_element_locked(Object obj, Boolean allow_tensor, Boolean allow_operation)
   at Tensorflow.Graph.as_graph_element(Object obj, Boolean allow_tensor, Boolean allow_operation)
   at Tensorflow.Graph.get_operation_by_name(String name)
   at ArRobotVis.Program.Main(String[] args) in filepath_to_program.cs

The issue arises from:
```
  string input_name = "input_1:0";
  string output_name = "pos_out/BiasAdd:0";
  var input_operation = graph.get_operation_by_name(input_name); 
  var output_operation = graph.get_operation_by_name("pos_out/BiasAdd:0");
```

I've installed the Tensorflow binary and binding packages and have tried various different implementations documented online but cannot seem to get it to work.

Here is the full code:
```

using System;
using System.IO;
using NumSharp;
using Tensorflow;
namespace ArRobotVis
{
    class Program
    {
        static void Main(string[] args)
        {
            // Import trained model (.pb)
            var graph = new Graph();
            string dir = "filepath/to_.pb_model";
            string pbFile = "my_model.pb";
            string output_graph = (Path.Join(dir, pbFile));
            graph.Import(output_graph, "");

            // Select Input/Output layers of model
            string input_name = "input_1:0";
            string output_name = "pos_out/BiasAdd:0";
            var input_operation = graph.get_operation_by_name(input_name);
            var output_operation = graph.get_operation_by_name("pos_out/BiasAdd:0");

            /*  
            //Use model to predict input image
            var results = with<Session, NDArray>(tf.Session(graph),
                sess => sess.run(output_operation.outputs[0], 
                    new FeedItem(input_operation.outputs[0], nd)));

            results = np.squeeze(results);
            */
        }
    }
}

```
I'm learning the exampls of Tensorflow.net in C#, 
as hint info： “Example runner will download all the required files like training data and model pb files.”， but it was not happened when I run the example : Object Detection.
what's wrong with me? where can I find the  proper files？
Any help is great!!
This is needed so that dense layers can be specifically named so that the dense layer variable scope names line up with the pre-trained models.

https://github.com/tensorflow/tensorflow/blob/590d6eef7e91a6a7392c8ffffb7b58f2e0c8bc6b/tensorflow/python/layers/core.py#L185

I don't see the mechanism to do this in the TF.Net keras layer so for now I'll just make my own little dense layer. This is just a heads up that w/o fixing this it may be hard to load some pre-trained models.

I have tried `GraphDef.Parser.ParseFrom(File.ReadAllBytes(model_path))` and `tf.import_graph_def()`. It works fine to import `.pb` file but, at some reason, I want to use `graph.Import()` method.
When I use import method shown as below, there is no imported graph. 
It's not imported to default graph either. I checked the frozen graph model that has operations also.

```csharp

// just simple logistic graph.
var model_path = Path.Combine(model_folder, "frozen_graph_logistic.pb"); 

//var graph_def = GraphDef.Parser.ParseFrom(File.ReadAllBytes(model_path));
//tf.import_graph_def(graph_def);

var graph = tf.Graph();
bool check = graph.Import(model_path);
Debug.Log("" + check); // print true

foreach (var op in graph.get_operations())
    Debug.Log("" + op.name); // print nothing
Debug.Log("Done1");

foreach (var op in tf.get_default_graph().get_operations())
    Debug.Log("" + op.name); // print nothing also
Debug.Log("Done2");
```

I used Tensorflow 1.13 (python) to build frozen graph and Tensorflow.NET 0.12 to run.
I tested in Visual Studio 2017.
Hi, I've tried to reuse a pre-trained model but failed.
Here are the variable and operation definition codes.

```
            var X = tf.placeholder(tf.float32,name:"input_1");
            var Y = tf.placeholder(tf.float32, name: "output_1");
            var W = tf.Variable(winit, name: "weight_1", dtype: tf.float32);
            var b = tf.Variable(binit, name: "bias_1");
            var pred = tf.add(tf.multiply(X, W), b, name:"pred_1");
            var cost = tf.reduce_sum(tf.pow(pred - Y, 2.0f)) / (2.0f * n_samples);
            graph.add_to_collection<Tensor>("cost_1", cost);
            var optimizer = new Tensorflow.Train.AdamOptimizer(learning_rate).minimize(cost);
            graph.add_to_collection<Operation>("optimizer_1", optimizer);
```



After train, I used "saver" and successfully got *.meta file.
To load the pre-trained model, I used tf.train.import_meta_graph() & saver.restore()

```
                graph = new Graph().as_default();
                var saver = tf.train.import_meta_graph(metaFilePath + @"\" + metatFileName + ".meta");
                sess = tf.Session(graph);
                saver.restore(sess, metaFilePath + @"\" + metatFileName);

                var X = graph.OperationByName("input_1");
                var Y = graph.OperationByName("output_1");
                var W = graph.OperationByName("weight_1");
                var b = graph.OperationByName("bias_1");        
                var pred = graph.OperationByName("pred_1");
                var cost = graph.get_collection<Tensor>("cost_1");
```

like this.
variables restored by the method "OperationByName" are done well.

But, after the line "tf.train.import_meta_graph",

![image](https://user-images.githubusercontent.com/50568237/71710129-1bf34800-2e3e-11ea-973a-e02f2b02b1ee.png)

and also the count of "var cost" is 0.

I clearly defined the type of 'cost' as Tensor when add it to the collection.
but, after restoring the meta-model, the type information is missing.
I think, this is bug.

Does anyone have an idea about restoring the pre-trained model including optimizer information?

-----------------------------------------------------------------------------------------------------------

I found that the general type 'var' is a problem when using the loaded tensors.

```
var optimizer = new Tensorflow.Train.AdamOptimizer(learning_rate).minimize(cost,name:"Optimizer_1");

                Tensor X = graph.get_operation_by_name("input_1");
                Tensor Y = graph.get_operation_by_name("output_1");
                Tensor W = graph.get_operation_by_name("weight_1");
                Tensor b = graph.get_operation_by_name("bias_1");
                Tensor pred = graph.get_operation_by_name("pred_1");
                Tensor cost = graph.get_operation_by_name("cost_1");
                Operation optimizer = graph.get_operation_by_name("optimizer_1");
```

With specified types, all tensors work fine.

but, still I have no idea with the method add_to_collection & get_collection

When you have finished training a model and want to deploy it in production, you'll often want to modify it to better run in its final environment. For example if you're targeting a phone you might want to shrink the file size by quantizing the weights, or optimize away batch normalization or other training-only features. The Graph Transform framework offers a suite of tools for modifying computational graphs, and a framework to make it easy to write your own modifications.

https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/graph_transforms/README.md
I've found several places with the code such as:

Console.WriteLine($"Restoring parameters from {save_path}");

This becomes a bit troublesome if I'm using TensorFlow.NET in a Windows Service.

May I suggest something like this instead?

        public void DefaultMessageHandler(string sMessage)
        {
            Console.WriteLine(sMessage);
        }

public delegate void OneStringArgDelegate(string sWhat);
        public OneStringDelegate NonDefaultMessageHandler;

        public void MessageHandler(string sMessage)
        {
            if (NonDefaultMessageHandler == null)
                DefaultMessageHandler(sMessage);
            else
                NonDefaultMessageHandler(sMessage);
        }
Hi!

Running following code:
```F#
[<EntryPoint>]
let main argv =
    let tf = Tensorflow.Binding.tf

    let x = tf.constant (1.0)
    let y = tf.sqrt x
    let g = tf.gradients (y, x)

    use s = tf.Session ()
    let result = s.run (g)
    printf "result = %A" result

    0
```
always yields:
```
Unhandled exception. Tensorflow.LookupError: No gradient defined for operation 'Sqrt' (op type: Sqrt)
```
Analogous python code yields expected result (0.5). If tf.sqrt is replaced with tf.square, for example, code above yields expected result (2.0). Similar issue seems to also be present at least for tf.sin and tf.cos.

Was tested with following fsproj file:
```xml
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp3.0</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="Program.fs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="TensorFlow.NET" Version="0.13.0" />
    <PackageReference Include="SciSharp.TensorFlow.Redist" Version="1.15.0" />
  </ItemGroup>

</Project>
```
   def __init__(self, model_dir, session=None):
        if session:
            self.session = session
        else:
            self.session = tf.get_default_session()
        start = time.time()
        self.model = tf.saved_model.loader.load(self.session, ['serve'], model_dir)  
     self._input_dict,self._output_dict=_signature_def_to_tensors(self.model.signature_def['predictions'])

   