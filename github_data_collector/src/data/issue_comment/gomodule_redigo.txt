Ask questions at https://stackoverflow.com/questions/ask?tags=go+redis

IdleTimeout: 300 * time.Second 

Discover the free redis connection after 300 seconds and it is not automatically closed
add func Uint64Map Uint64s
I have a struct like that
```
type User struct {
	Nickname  *string `json:"nickname"`
	Phone     *string `json:"phone"`
}
```
Values ​​are placed in redis with `HMSET` command. (values ​​can be `nil`)

Now I'm trying to scan values ​​into a structure:

```
values, err := redis.Values(Cache.Do("HMGET", "key", "nickname", "phone" )

var usr User

_, err := redis.Scan(values, &usr.Nickname, &usr.Phone)
```
But I get an error

> redigo.Scan: cannot assign to dest 0: cannot convert from Redis bulk string to *string 

Please tell me what I'm doing wrong?


I see the only way to run **lua** scripts currently is to create an embedded **lua script** and then use the `Script` object to run the function.

Can we introduce a new function which accepts a file path and runs the lua script in redis?
i can use
redisgo.Int64s()
redisgo.Uint64()
But:
without redisgo.UInt64s()
This is an initial PR to address issue #439 
Fixes #366 (I think).

Once merged, [additional tags need to be added](https://github.com/golang/go/wiki/Modules#is-it-possible-to-add-a-module-to-a-multi-module-repository) to the repo:
- `redis/v3.0.0`
- `redisx/v3.0.0`

This will make this repo support go modules, and follows the [official guidance](https://github.com/golang/go/wiki/Modules#incrementing-the-major-version-when-first-adopting-modules-with-v2-packages) of bumping the major version when there are released tags that are not actually for `go mod`.

It maybe worth [considering not having the `redis` and `redisx` modules in the same repo](https://github.com/golang/go/wiki/Modules#should-i-have-multiple-modules-in-a-single-repository). Before taking this change might be a good opportunity to do that since consumers will have to change the import path, anyway.

At the very least, it may be worthwhile to move the `redisx` package out of this repo, since it's intended to be experimental and should probably remain `v0`.
I like to add tracing to my code. This depends on being able to pass a context around. To that end, I wish `TestOnBorrow` was passed the context that's passed to `GetContext`. Perhaps this would require a new function so it's not a breaking change: `TestOnBorrowContext`, or something similar.
```
2019/09/26 15:17:37 [[price \<nil\> imgurlsmall [104 116 116 112 115 58 47 47 115 116 111 114 97 103 101 46 103 111 111 103 108 101 97 112 105 115 46 99 111 109 47 108 119 105 109 103 47 109 104 47 108 47 50 48 49 57 48 54 49 53 47 53 98 99 56 99 100 101 100 51 54 55 52 49 98 102 53 101 50 98 99 101 53 102 97 100 52 49 102 101 54 100 52 46 112 110 103] feed [102 58 116 104 101 109 111 116 111 114 99 97 102 101 110 101 119] _t [49 53 54 48 53 56 57 57 51 51] title [50 48 49 57 32 77 85 76 84 73 83 84 82 65 68 65 32 49 50 54 48 83 32 84 79 85 82 73 78 71 32 45 32 68 117 99 97 116 105] tags [118 109 58 55 55 44 119 58 99 111 117 99 104 114 105 100 101 58 116 58 101 117 114 111 112 101 44 118 109 58 49 52 54 44 119 58 99 111 117 99 104 114 105 100 101 58 116 58 97 100 118 101 110 116 117 114 101 52 50 51 44 118 109 58 49 54 50 44 118 109 58 49 57 49 44 119 58 99 111 117 99 104 114 105 100 101 58 116 58 100 101 97 108 101 114 44 119 58 99 111 117 99 104 114 105 100 101 58 116 58 110 101 119 44 116 58 105 109 97 103 101 44 119 58 99 111 117 99 104 114 105 100 101 58 116 58 104 97 115 118 105 110 44 119 58 99 111 117 99 104 114 105 100 101 58 116 58 116 111 117 114 105 110 103 44 119 58 99 111 117 99 104 114 105 100 101 58 116 58 100 117 99 97 116 105 44 119 58 99 111 117 99 104 114 105 100 101 58 116 58 109 117 108 116 105 115 116 114 97 100 97 44 119 58 99 111 117 99 104 114 105 100 101 58 116 58 109 117 108 116 105 115 116 114 97 100 97 49 50 54 48 44 119 58 99 111 117 99 104 114 105 100 101 58 116 58 109 117 108 116 105 115 116 114 97 100 97 49 50 54 48 115 44 119 58 99 111 117 99 104 114 105 100 101 44 102 58 116 104 101 109 111 116 111 114 99 97 102 101 110 101 119 44 99 102 58 100 58 55 50 57 44 99 102 58 109 58 97 114 105 44 67 65] location [83 117 110 110 121 118 97 108 101 44 32 67 65] geo [45 49 50 50 46 48 51 54 51 52 57 54 32 51 55 46 51 54 56 56 51] created [50 48 49 57 45 48 54 45 49 53 32 48 57 58 49 50 58 49 51] ctitle [50 48 49 57 32 77 85 76 84 73 83 84 82 65 68 65 32 49 50 54 48 83 32 84 79 85 82 73 78 71 32 68 117 99 97 116 105] mpid [99 102 58 109 58 97 114 105] ct [108] year [50 48 49 57] imgurl [104 116 116 112 115 58 47 47 99 100 110 109 101 100 105 97 46 101 110 100 101 97 118 111 114 115 117 105 116 101 46 99 111 109 47 105 109 97 103 101 115 47 84 104 117 109 98 71 101 110 101 114 97 116 111 114 47 84 104 117 109 98 46 97 115 112 120 63 105 109 103 61 104 116 116 112 115 37 51 97 37 50 102 37 50 102 99 100 110 109 101 100 105 97 46 101 110 100 101 97 118 111 114 115 117 105 116 101 46 99 111 109 37 50 102 105 109 97 103 101 115 37 50 102 97 115 115 101 116 115 37 50 102 105 109 103 37 50 102 110 111 45 105 109 97 103 101 45 105 102 46 112 110 103 38 109 119 61 51 53 48 38 109 104 61 50 48 48 38 102 61 49 38 102 122 61 49] vin [122 100 109 97 97 101 107 119 49 107 98 48 48 55 52 56 53] psd [97 114 105] is [10 15 235 64 147 37 18 23 91 218 35 223 151 70 7 5] mileage [48 48 48 48 48 51] ssc [50 50 55 50] st [67 65] did [99 102 58 100 58 55 50 57] ss [56 56 51 50 57] url [104 116 116 112 115 58 47 47 119 119 119 46 116 104 101 109 111 116 111 114 99 97 102 101 46 99 111 109 47 105 110 118 101 110 116 111 114 121 47 50 48 49 57 45 100 117 99 97 116 105 45 109 117 108 116 105 115 116 114 97 100 97 45 49 50 54 48 115 45 116 111 117 114 105 110 103 45 115 117 110 110 121 118 97 108 101 45 99 97 45 57 52 48 56 55 45 50 54 52 51 48 51 54 105] imgurllarge [104 116 116 112 115 58 47 47 115 116 111 114 97 103 101 46 103 111 111 103 108 101 97 112 105 115 46 99 111 109 47 108 119 105 109 103 47 109 104 47 108 47 50 48 49 57 48 54 49 53 47 49 48 53 101 99 56 98 52 102 102 57 52 50 48 54 97 101 52 51 102 100 51 102 100 57 54 49 57 97 97 56 102 46 112 110 103] ssf [57 51 57 57]]]

2019/09/26 15:17:37 redigo.Scan: cannot assign to dest 0: cannot convert from Redis nil to string
```
I get this result back from redisearch so I can't intervene here.

The actual hash doesn't have that field in it. In these situations, it would be useful if redigo would return an empty string - unless there are side-effects of that that I don't understand.
```
127.0.0.1:6379> HGETALL p:734802

"imgurlsmall"
"https://storage.googleapis.com/lwimg/mh/l/20190615/5bc8cded36741bf5e2bce5fad41fe6d4.png"
"feed"
"f:themotorcafenew"
"_t"
"1560589933"
"title"
"2019 MULTISTRADA 1260S TOURING - Ducati"
"tags"
"vm:77,w:couchride:t:europe,vm:146,w:couchride:t:adventure423,vm:162,vm:191,w:couchride:t:dealer,w:couchride:t:new,t:image,w:couchride:t:hasvin,w:couchride:t:touring,w:couchride:t:ducati,w:couchride:t:multistrada,w:couchride:t:multistrada1260,w:couchride:t:multistrada1260s,w:couchride,f:themotorcafenew,cf:d:729,cfⓂ️ari,CA"
"location"
"Sunnyvale, CA"
"geo"
"-122.0363496 37.36883"
"created"
"2019-06-15 09:12:13"
"ctitle"
"2019 MULTISTRADA 1260S TOURING Ducati"
"mpid"
"cfⓂ️ari"
"ct"
"l"
"year"
"2019"
"imgurl"
"https://cdnmedia.endeavorsuite.com/images/ThumbGenerator/Thumb.aspx?img=https%3a%2f%2fcdnmedia.endeavorsuite.com%2fimages%2fassets%2fimg%2fno-image-if.png&mw=350&mh=200&f=1&fz=1"
"vin"
"zdmaaekw1kb007485"
"psd"
"ari"
"is"
"\n\x0f\xeb@\x93%\x12\x17[\xda#\xdf\x97F\a\x05"
"mileage"
"000003"
"ssc"
"2272"
"st"
"CA"
"did"
"cf:d:729"
"ss"
"88329"
"url"
"https://www.themotorcafe.com/inventory/2019-ducati-multistrada-1260s-touring-sunnyvale-ca-94087-2643036i"
"imgurllarge"
"https://storage.googleapis.com/lwimg/mh/l/20190615/105ec8b4ff94206ae43fd3fd9619aa8f.png"
"ssf"
"9399"```
I would like to add some extra functionality to The Redis Pool because it seems to be useful because it prevent the connection leaks:

```go
func (p *Pool) WithConn(cb func(redis.Conn)) (err error) {
	conn := r.pool.Get()
	defer func() {
		err = recover()
		conn.Close()
	} ()
	cb(conn)
	return
}

func (p *Pool) WithConnCtx(ctx context.Context, cb func(redis.Conn)) (err error) {
	conn, err := r.pool.GetContext(ctx)
	if err != nil {
		return
	}
	defer func() {
		err = recover()
		conn.Close()
	} ()
	cb(conn)
	return
}

func (p *Pool) MustWithConn(cb func(redis.Conn)) error {
	conn := r.pool.Get()
	cb(conn)
	conn.Close()
	return nil
}

func (p *Pool) MustWithConnCtx(ctx context.Context, cb func(redis.Conn)) error {
	conn, err := r.pool.GetContext(ctx)
	if err != nil {
		return err
	}
	cb(conn)
	conn.Close()
	return nil
}
```

And tests, of cause.