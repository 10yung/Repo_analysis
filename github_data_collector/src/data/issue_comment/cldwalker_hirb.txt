Looks like a bunch of PRs are sitting for a while, was wondering if this gem is still maintained? Thanks.
##  Description
In a Rails environment with `hirb` and `table_print` installed I get the following error when the call to `table_print` returns. In other words, directly after a Table has printed a `NoMethodError` is called from `hirb`. After a simple query like `tp Book.all` at [Exploration](http://tableprintgem.com/)

After the callstack is a debugger showing the `Float` type while being in `Hirb::String`

```bash
NoMethodError: undefined method `length' for 0.047255062:Float
from /data/bundle/gems/hirb-0.7.3/lib/hirb/string.rb:26:in `size'
	from /data/bundle/gems/hirb-0.7.3/lib/hirb/pager.rb:89:in `activated_by?'
	from /data/bundle/gems/hirb-0.7.3/lib/hirb/view.rb:219:in `page_output'
	from /data/bundle/gems/hirb-0.7.3/lib/hirb/view.rb:201:in `view_or_page_output'
	from /data/bundle/gems/hirb-0.7.3/lib/hirb/view.rb:187:in `output_value'
	from /usr/local/lib/ruby/2.3.0/irb.rb:490:in `block (2 levels) in eval_input'
	from /usr/local/lib/ruby/2.3.0/irb.rb:623:in `signal_status'
	from /usr/local/lib/ruby/2.3.0/irb.rb:486:in `block in eval_input'
	from /usr/local/lib/ruby/2.3.0/irb/ruby-lex.rb:246:in `block (2 levels) in each_top_level_statement'
	from /usr/local/lib/ruby/2.3.0/irb/ruby-lex.rb:232:in `loop'
	from /usr/local/lib/ruby/2.3.0/irb/ruby-lex.rb:232:in `block in each_top_level_statement'
	from /usr/local/lib/ruby/2.3.0/irb/ruby-lex.rb:231:in `catch'
	from /usr/local/lib/ruby/2.3.0/irb/ruby-lex.rb:231:in `each_top_level_statement'
	from /usr/local/lib/ruby/2.3.0/irb.rb:485:in `eval_input'
	from /usr/local/lib/ruby/2.3.0/irb.rb:395:in `block in start'
	from /usr/local/lib/ruby/2.3.0/irb.rb:394:in `catch'
	from /usr/local/lib/ruby/2.3.0/irb.rb:394:in `start'
```

```ruby
[24, 33] in /data/bundle/gems/hirb-0.7.3/lib/hirb/string.rb
   24:     else
   25:       def size(string)
   26:         string.length
   27:       rescue
   28:         byebug
=> 29:       end
   30: 
   31:       def ljust(string, desired_length)
   32:         string.ljust(desired_length)
   33:       end
(byebug) string  # => 0.010400611
(byebug) string.class # => Float
```

## Environment
docker image(ruby:2.3-jessie)
ruby(2.3.7)
rails (4.2.11)
table_print (1.5.6)
hirb (0.7.3)
Putting 2 objects of different active record classes into the same array causes an exception:



```
irb(main):001:0> c1 = MyFirstClass.first
irb(main):002:0> c2 = MySecondClass.first
irb(main):003:0> [c1, c2]
    .../ruby-2.4.4@XXX/gems/activemodel-5.2.0/lib/active_model/attribute_methods.rb:430:in `method_missing'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/helpers/object_table.rb:10:in `block (2 levels) in render'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/helpers/object_table.rb:10:in `each'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/helpers/object_table.rb:10:in `inject'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/helpers/object_table.rb:10:in `block in render'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/helpers/object_table.rb:9:in `each'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/helpers/object_table.rb:9:in `inject'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/helpers/object_table.rb:9:in `render'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/helpers/auto_table.rb:22:in `render'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/formatter.rb:73:in `_format_output'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/formatter.rb:56:in `format_output'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/view.rb:205:in `render_output'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/view.rb:123:in `view_output'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/view.rb:201:in `view_or_page_output'
    .../ruby-2.4.4@XXX/gems/hirb-0.7.3/lib/hirb/view.rb:187:in `output_value'
    .../ruby-2.4.4@XXX/rubies/ruby-2.4.4/lib/ruby/2.4.0/irb.rb:494:in `block (2 levels) in eval_input'   
...
```

rails 5.2.0
ruby 2.4.4
hirb 0.7.3
Fixes issue #103
After requiring `simplecov-console` in my `test_helper.rb`, I ran the tests and got three warnings from your gem. Check the attachment out.

![screen shot 2018-05-20 at 1 19 49 am](https://user-images.githubusercontent.com/1292556/40275730-eba84094-5bce-11e8-84aa-5fa97c8e7920.png)

Can we PrettyPrint Jsonb columns and Hstore columns?

How we can implement it? Any idea?
```
irb(main):043:0> User.find_by_email('exampleuser@example.com')
D, [2017-04-26T15:55:44.739925 #7482] DEBUG -- :   User Load (218.9ms)  EXEC sp_executesql N'SELECT [users].* FROM [users] WHERE (emails LIKE N''%exampleuser@example.com%'') ORDER BY created_at ASC'
+------+------+------+-------+-------+------+-------+------+------+-------+-------+------+------+------+-------+-------+-------+------+------+------+------+-------+------+------+
| id   | emai | crea | up... | na... | firs | st... | city | birt | tl... | zi... | last | crm_ | can_ | ty... | me... | me... | loca | has_ | last | mc_m | mo... | last | guid |
+------+------+------+-------+-------+------+-------+------+------+-------+-------+------+------+------+-------+-------+-------+------+------+------+------+-------+------+------+
| 7018 | lise | 2017 | 20... | true  | Roy  | Sk... | MATH | 1951 | 91... | 5174  | Mykl | 9179 | fals | Me... | 20... | 20... | 8200 | true | 2017 | true | false | 2017 | CA55 |
+------+------+------+-------+-------+------+-------+------+------+-------+-------+------+------+------+-------+-------+-------+------+------+------+------+-------+------+------+
1 row in set
irb(main):044:0> User.find 7018
D, [2017-04-26T15:55:53.044146 #7482] DEBUG -- :   User Load (1.1ms)  EXEC sp_executesql N'SELECT TOP (1) [users].* FROM [users] WHERE [users].[id] = @0', N'@0 int', @0 = 7018  [["id", 7018]]
+------+------+------+-------+-------+------+-------+------+------+-------+-------+------+------+------+-------+-------+-------+------+------+------+------+-------+------+------+
| id   | emai | crea | up... | na... | firs | st... | city | birt | tl... | zi... | last | crm_ | can_ | ty... | me... | me... | loca | has_ | last | mc_m | mo... | last | guid |
+------+------+------+-------+-------+------+-------+------+------+-------+-------+------+------+------+-------+-------+-------+------+------+------+------+-------+------+------+
| 7018 | tore | 2015 | 20... | true  | Tore | Fi... | OSLO | 1957 | 92... | 1182  | Jørg | 6552 | fals | Me... | 19... | 20... | 8200 | true | 2017 | fals | false | 2016 |      |
+------+------+------+-------+-------+------+-------+------+------+-------+-------+------+------+------+-------+-------+-------+------+------+------+------+-------+------+------+
1 row in set
irb(main):045:0> User.where(id: 7018)
D, [2017-04-26T15:56:18.476991 #7482] DEBUG -- :   User Load (2.6ms)  EXEC sp_executesql N'SELECT [users].* FROM [users] WHERE [users].[id] = 7018'
+------+------+------+-------+-------+------+-------+------+------+-------+-------+------+------+------+-------+-------+-------+------+------+------+------+-------+------+------+
| id   | emai | crea | up... | na... | firs | st... | city | birt | tl... | zi... | last | crm_ | can_ | ty... | me... | me... | loca | has_ | last | mc_m | mo... | last | guid |
+------+------+------+-------+-------+------+-------+------+------+-------+-------+------+------+------+-------+-------+-------+------+------+------+------+-------+------+------+
| 7018 | tore | 2015 | 20... | true  | Tore | Fi... | OSLO | 1957 | 92... | 1182  | Jørg | 6552 | fals | Me... | 19... | 20... | 8200 | true | 2017 | fals | false | 2016 |      |
+------+------+------+-------+-------+------+-------+------+------+-------+-------+------+------+------+-------+-------+-------+------+------+------+------+-------+------+------+
1 row in set
irb(main):046:0> User.find_by_email('exampleuser@example.com').id
D, [2017-04-26T15:56:26.473704 #7482] DEBUG -- :   User Load (214.5ms)  EXEC sp_executesql N'SELECT [users].* FROM [users] WHERE (emails LIKE N''%exampleuser@example.com%'') ORDER BY created_at ASC'
=> 70187

```

In this case, the appropriate user's id was shown as 7018, but it was actually 70187.
Another user actually had the id 7018.

So, when looking at the table and/or copy-pasting the ID for further use, you might tread very wrong. It's especially dangerous if you delete the user with that ID, only to discover you had actually deleted the wrong user.

Suggested solution:

Display `70...` or similar, for the ID, when truncating it, like its done in the other columns. So you realize it's been truncated. 

PS: If you inspect the output columns, you see that more columns have the same problem. `emai`, `crea` etc.
The gem needs to be in the Gemfile in order to do require 'hirb'

Doing BasicObject.new , gives this error
Hirb Error: undefined method `respond_to?' for #BasicObject:0x007fa7c4ed23a8

I have a lot of columns in my model.[1] I love Hirb. Now Hirb can't do all of its magic because I have too many columns. But let's face it, I don't want all the columns. I only want certain columns.

I searched a bit in the docs, and tried the following:

``` rb
Hirb.add_dynamic_view("Wadget", helper: :auto_table) do |o| 
  {fields: [:id, :name, :token, :important_columns_only]}
end
```

Though when I called my `Wadget.all`, this spec is still not activated as expected. I suspect it's because `ActiveRecord::Base` is there.

I realize I'm probably expanding Hirb's scope a little by asking this, but this is something I think that's not unreasonable to provide, especially with the prevalence of AR.

I'd like to add this to the wishlist: a way to indicate to Hirb fields I want (and this touches on #96 with fields one doesn't want). Ideally, this could be done in the config file, but I'll leave to the creator the liberty to say what he would accept.

What I would propose is to either make what I tried work (either by having `add_dynamic_view` prepend the list in order of priority, or having Hirb choose a view by the most specific), or being able to specify this in YML config:

``` yml
views:
  fields:
    activerecord/base:
      exclude:
        - updated_at
        - created_at
        - secret_column
    wadget:
      only:
        - id
        - name
        - important_stuff
```

[1]: (It's probably not the ideal structure, but it's an old application with a lot of legacy)
