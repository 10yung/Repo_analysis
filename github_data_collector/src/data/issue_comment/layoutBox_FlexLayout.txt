Bumps [rubyzip](https://github.com/rubyzip/rubyzip) from 1.2.3 to 1.3.0.
<details>
<summary>Release notes</summary>

*Sourced from [rubyzip's releases](https://github.com/rubyzip/rubyzip/releases).*

> ## v1.3.0
> Security
> 
> - Add `validate_entry_sizes` option so that callers can trust an entry's reported size when using `extract` [#403](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/403)
>    - This option defaults to `false` for backward compatibility in this release, but you are strongly encouraged to set it to `true`. It will default to `true` in rubyzip 2.0.
> 
> New Feature
> 
> - Add `add_stored` method to simplify adding entries without compression [#366](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/366)
> 
> Tooling / Documentation
> 
> - Add more gem metadata links [#402](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/402)
> 
> ## v1.2.4
> - Do not rewrite zip files opened with `open_buffer` that have not changed [#360](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/360)
> 
> Tooling / Documentation
> 
> - Update `example_recursive.rb` in README [#397](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/397)
> - Hold CI at `trusty` for now, automatically pick the latest ruby patch version, use rbx-4 and hold jruby at 9.1 [#399](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/399)
</details>
<details>
<summary>Changelog</summary>

*Sourced from [rubyzip's changelog](https://github.com/rubyzip/rubyzip/blob/master/Changelog.md).*

> # 1.3.0 (2019-09-25)
> 
> Security
> 
> - Add `validate_entry_sizes` option so that callers can trust an entry's reported size when using `extract` [#403](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/403)
>    - This option defaults to `false` for backward compatibility in this release, but you are strongly encouraged to set it to `true`. It will default to `true` in rubyzip 2.0.
> 
> New Feature
> 
> - Add `add_stored` method to simplify adding entries without compression [#366](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/366)
> 
> Tooling / Documentation
> 
> - Add more gem metadata links [#402](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/402)
> 
> # 1.2.4 (2019-09-06)
> 
> - Do not rewrite zip files opened with `open_buffer` that have not changed [#360](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/360)
> 
> Tooling / Documentation
> 
> - Update `example_recursive.rb` in README [#397](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/397)
> - Hold CI at `trusty` for now, automatically pick the latest ruby patch version, use rbx-4 and hold jruby at 9.1 [#399](https://github-redirect.dependabot.com/rubyzip/rubyzip/pull/399)
</details>
<details>
<summary>Commits</summary>

- [`e79d9ea`](https://github.com/rubyzip/rubyzip/commit/e79d9ea2922be12db121c20f5dc55bba8a35418a) Merge pull request [#407](https://github-redirect.dependabot.com/rubyzip/rubyzip/issues/407) from rubyzip/v1-3-0
- [`7c65e1e`](https://github.com/rubyzip/rubyzip/commit/7c65e1e3595031392f1050b81fb2b95b0f2ee764) Bump version to 1.3.0
- [`d65fe7b`](https://github.com/rubyzip/rubyzip/commit/d65fe7bd283ec94f9d6dc7605f61a6b0dd00f55e) Merge pull request [#403](https://github-redirect.dependabot.com/rubyzip/rubyzip/issues/403) from rubyzip/check-size
- [`97cb6ae`](https://github.com/rubyzip/rubyzip/commit/97cb6aefe6d12bd2429d7a2e119ccb26f259d71d) Warn when an entry size is invalid
- [`7849f73`](https://github.com/rubyzip/rubyzip/commit/7849f7362ab0cd23d5730ef8b6f2c39252da2285) Default validate_entry_sizes to false for 1.3 release
- [`4167f0c`](https://github.com/rubyzip/rubyzip/commit/4167f0ce67e42b082605bca75c7bdfd01eb23804) Validate entry sizes when extracting
- [`94b7fa2`](https://github.com/rubyzip/rubyzip/commit/94b7fa276992933592d69eb6bb17fc09105f8395) [ci skip] Update changelog
- [`93505ca`](https://github.com/rubyzip/rubyzip/commit/93505ca16f0444bdb04f88f4b8f820ae5d628353) Check expected entry size in add_stored test
- [`6619bf3`](https://github.com/rubyzip/rubyzip/commit/6619bf3a1d779f092481d37d84ea280e3c6f764f) Merge pull request [#366](https://github-redirect.dependabot.com/rubyzip/rubyzip/issues/366) from hainesr/add-stored
- [`ecb2776`](https://github.com/rubyzip/rubyzip/commit/ecb277621852589ecc1557f228665a5338ac0809) Zip::File.add_stored() to add uncompressed files.
- Additional commits viewable in [compare view](https://github.com/rubyzip/rubyzip/compare/v1.2.3...v1.3.0)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rubyzip&package-manager=bundler&previous-version=1.2.3&new-version=1.3.0)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/layoutBox/FlexLayout/network/alerts).

</details>
Resolves #144 

* Isolates all the C & Non-C code
* Adds a swift package manifest with targets for FlexLayout, FlexLayoutYoga, and FlexLayoutYogaKit
* Moves the public headers to the [target]/include/[target] folder per [Apple's documentation](https://github.com/apple/swift-package-manager/blob/master/Documentation/Usage.md#creating-c-language-targets)

`NS_ENUM typedefs` don't seem to be translated to Swift enums when imported via a module. Because of that, static values were added to the various NS_ENUM types as extensions when in the context of a Swift package. Perhaps there's a build setting to eliminate the need for that?
![Στιγμιότυπο 2019-10-30, 9 03 51 μμ](https://user-images.githubusercontent.com/56849179/67890220-f9506480-fb58-11e9-8575-588cc408b779.png)
![Στιγμιότυπο 2019-10-30, 9 03 03 μμ](https://user-images.githubusercontent.com/56849179/67890238-01100900-fb59-11e9-8e98-cb58a880ce1d.png)

I have a selector and when i switch accountypes i want to hide 2certain textFields and the others come to Top. 
Any ideas?

Example: left(), top(), right(), bottom()
You can add small helper to make UIStackView like UI with spacing between items.

```swift
/**
 Set offset from other items in same container.
 Assign same spacing for all items in container to make spacing like in UIStackView.
 This method conflicts with setting vertical padding and margin.
 */
@discardableResult
func spacingVertical(_ value: CGFloat) -> Flex {
	let offset = value / 2.0
	return paddingVertical(-offset).marginVertical(offset)
}

/**
 Set offset from other items in same container.
 Assign same spacing for all items in container to make spacing like in UIStackView.
 This method conflicts with setting horizontal padding and margin.
 */
@discardableResult
func spacingHorizontal(_ value: CGFloat) -> Flex {
	let offset = value / 2.0
	return paddingHorizontal(-offset).marginHorizontal(offset)
}
```

Use like this
```swift
// |view1 - 10 - view2 - 10 - view3|
flex.addItem().direction(.column).define({ (flex) in
	flex.addItem(view1).spacingVertical(10)
	flex.addItem(view2).spacingVertical(10)
	flex.addItem(view3).spacingVertical(10)
})

// |view1|
flex.addItem().direction(.column).define({ (flex) in
	flex.addItem(view1).spacingVertical(10)
})
```
Hello,

any plans to support Swift Package Manager soon?
Just asking. If taking `Bool` as parameter we can use this function as we use `isHidden` property in `UIView`. It will be more convenient I think.
Constraint doesn't work with flex layout.  I tried to add UILabel below flex layout without success. Flex layout with adjusted height.  IntrinsicContentSize of flex container is -1, -1.
Hello,
I made some layout like this
       
       holderView.flex.direction(.column).define { (flex) in
            flex.addItem(imageView).aspectRatio(2.0/3.0)
            
            flex.addItem().marginTop(6).direction(.row).alignItems(.center).define { (flex) in
                flex.addItem(bookmark).width(7).height(11).marginRight(3)
                flex.addItem(titleLabel).grow(1)
            }
        }


And after some time I want to update layout and for example remove  something

       holderView.flex.direction(.column).define { (flex) in
            flex.addItem(imageView).aspectRatio(2.0/3.0)
        }


But in this case removed view `(bookmark, titleLabel)` did not disappear from layout but they continue to layout in flex at the top of holderView.

**Is this a bug/feature or I do something wrong ?**

The only solution I found is 

           holderView.removeAllSubviews()
           holderView.flex.direction .......


More interesting happened if I call initial layout several times. In this case UIView created by `flex.addItem().` duplicate again and again. Old instances become empty but continue to layout in flex.
Currently I am achieving it via combination of margin on inner view and spacer-views
I have following UI structure in a height adjustable `UITableViewCell`.
```
        let textContainer = UIView()
       // .spaceBetween doesn't seem to add any space here. 
        textContainer.flex.direction(.column).alignItems(.start).justifyContent(.start).define { flex in
            flex.addItem(tickerContainer).grow(1)
            flex.addItem(titleLabel).grow(1).marginVertical(8)
            flex.addItem(subtitleLabel).grow(1)
        }

        flex.direction(.row).padding(8).justifyContent(.start).define { flex in
            flex.addItem(imageView).aspectRatio(4.0 / 3)
            flex.addItem().size(8) // Spacer view
            flex.addItem(textContainer).grow(1).shrink(1)
        }
```
Using spacer view is good because if I change the `flex.direction` to `.column` dynamically, the spacer view still works as expected. 
My concern with using spacer-views and margins is that we need the ability to hide certain labels. In that case UI won't be consistent anymore because margins will be hidden and/or spacer view should be hidden as well.

What are some of the easier ways to handle this? 