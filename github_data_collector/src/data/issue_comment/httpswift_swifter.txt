The content length field is parsed without validation in readHttpRequest:
```
        if let contentLength = request.headers["content-length"], let contentLengthValue = Int(contentLength) {
            request.body = try readBody(socket, size: contentLengthValue)
        }
```
If content-length is set to -1, this results in the creation of an UnsafeMutableBufferPointer with a negative count downstream, a fatalError. 
Routing behavior for variable paths has changed in 1.4.7 compared to 1.4.6. The variable path can no longer match multiple sub-paths.

For example, I have this route: 
`"/foo/bar/:path"`

I expect it to be able to match anything after `"foo/bar/"`, such as `"foo/bar/a/b/c"`. As of 1.4.6, the HttpRouter behaved as expected, but [this change](https://github.com/httpswift/swifter/commit/a9551c9bb3e3b804863a7a4621d401f8e3d4f42a) (line 116 of HttpRouter.swift) that was released with 1.4.7 added a new behavior that requires the path to be the same length as the route.

Now, the route will only match on a path such as '"foo/bar/a"' and will not match on '"foo/bar/a/b"', since the path goes deeper than the length of the route.

Was this an intentional change or can this be reverted to the old behavior?
Dear.

Thank you for reading my issue.
I have launched http server on Mac OS using your library.

Your library is working well on Mac OS 10.13.
but when I run http server on Mac OS 10.11, server is not running and 
show bindFailed("Permission denied")

I attached screenshot for my issue.
https://prnt.sc/q0dsx0

I thank if you tell me how to resolve this issue.

Thanks&Regards.

When using Swifter for unit tests, it would be nice to be able to reset all routes in `tearDown()`. Occasionally a request will fail with error `The network connection was lost`, likely due to stopping/starting several servers very quickly that all try to bind to 8080. Being able to keep an instance running but resetting the routes should make this error less likely.
Can i get query parameters from websocket route?

```
let server = HttpServer()

server["/ws"] = websocket(text: { session, text in
    // 
}, connected: { session in
    // get ?some_parameter here
}, disconnected: { session in
    //
})
```
In the WebSocket API for html, they have a bufferedCount property that we can use to determine if we should send more messages or if we should wait.
My app sends image frames from the screen, and I would like to drop frames instead of trying to send them all in case the connected client canâ€™t receive them fast enough.
I'm currently trying to fix an issue where overwriting the handler for `GET/path/to/*` does not give the correct result. While fixing that bug I have encountered issues because I am not familiar with iterators and recursion, and you seem to use `&` where it's not necessary (I think).

I'd like to know the reasoning behind using `inout`, generators and recursion instead of iteration and arrays because I'm thinking of rewriting a few functions to fix some issues I ran into and I don't want my pull request to go to waste.
I try to upload files by WLAN, but the speed is not as fast as expected. 
It looks like `let rv = [UInt8](buffer[0..<bytesRead])` which located in `Socket.swift` cost much time. And the [UInt8] is for request.body.

I wonder why [Uint8] is used as the type of request.body? 
And will there be potential problem if I use another type(like Data) instead of [UInt8]?

I'm new for Swift and not good at English. Wish I have expressed my question properly.
I tried to load local html as follow:
```
        let path = Bundle.main.resourcePath! 
        let server = HttpServer()
        server["/:path"] = directoryBrowser(path)
        
        do {
            try server.start(9080, forceIPv4: true)
            print("Server has started ( port = \(try server.port()) ). Try to connect now...")
        } catch {
            print("Server start error: \(error)")
        }
```
When I visit http://localhost:9080/index.html, it shows some error as follow. The page loading is ok, but no content showing, maybe it's the problem with resource like css and js? 
And when I start a simple http server like 'python -m SimpleHTTPServer', it's working perfectly.

![image](https://user-images.githubusercontent.com/129747/62455597-58e0e300-b7a9-11e9-9575-09627b1715f0.png)
