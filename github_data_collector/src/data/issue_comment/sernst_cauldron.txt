Is it possible to have the ability to save CSVs using Pandas' to.csv function added to Cauldron?  

Or simply a "download CSV or Google Sheets" link right in the dataframe?
When something is writing a progress bar out to the terminal an error message comes up from cauldron. 
```
cauldron_1                | [SYNCED]: File chunk 0 /tmp/cd-remote-project-p10dqizn/plan-update-feature/S05-shap.py
cauldron_1                |
cauldron_1                | === RUNNING ===
cauldron_1                | Traceback (most recent call last):
cauldron_1                |   File "/cauldron_local/cauldron/cli/threads.py", line 62, in run_command
cauldron_1                |     **self.kwargs
cauldron_1                |   File "/cauldron_local/cauldron/cli/commands/run/__init__.py", line 225, in execute
cauldron_1                |     skip_library_reload=skip_library_reload
cauldron_1                |   File "/cauldron_local/cauldron/cli/commands/run/__init__.py", line 303, in run_local
cauldron_1                |     skips=steps_run + []
cauldron_1                |   File "/cauldron_local/cauldron/runner/__init__.py", line 172, in section
cauldron_1                |     if not source.run_step(response, project, ps, force=force):
cauldron_1                |   File "/cauldron_local/cauldron/runner/source.py", line 169, in run_step
cauldron_1                |     ).console_raw(result['message'])
cauldron_1                | KeyError: 'message'
100%|██████████| 200/200 [06:43<00:00,  2.02s/it]
```
This specific trace originated while getting `shap_values` from the `shap` python library using a `KernelExplainer`.
A great feature would be the option to include own css-files to provide some custom styling. Is that something, that's on your roadmap?
Is it possible to save a notebook to an html file without including the code? I can think of many cases where you want to show only the results but keep the way how they were obtained private
Why do you recommend to use an `@` instead of an `\` for displaying latex equations? In my opinion this reduces readabiliy if you're already used to latex and adds an extra step when copy&pasting equations from another source/equation generator. What currently already works is using a raw string. At least I suggest to add this information to the documentation

```
cd.display.latex(r'\alpha @delta')
```

btw, I'm running Windows 10 and Python 3.5.3. I know of some issues between Linux and Windows when it comes to backslashes, but I guess this only true for everything touching the filesystem (?)
If you make a bokeh plot, it will not show the bottom portion or the x-axis unless you put the window in fullscreen mode. Width is okay.
It would be great, especially during early development, to have a button on the UI that collects relevant version information in one place that can be copy-pasted into a bug report.
The button would present a popup with copyable text with version or settings you feel most important to include in issues.  You could even could pre-populate the github issue form with a request to include that config info, along with instructions for how to retrieve it.

[ Also could we get a version number include in cauldron-notebook?  `cauldron.__version__` isn't defined, and there doesn't seem to be any other internal storage of version info.

```
# jinja has version info
$ python -c 'import jinja2; print(jinja2.__version__)'
2.8

# cauldron does not :-(
$ python -c 'import cauldron; print(cauldron.__version__)'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
AttributeError: module 'cauldron' has no attribute '__version__'
```

]

The config info available from the UI might include,

```
ProductName:    Mac OS X
ProductVersion: 10.11.6
BuildVersion:   15G1004

Versions:
python: Python 3.5.2
cauldron UI: 1.270.509
beautifulsoup4 (4.5.1)
cauldron-notebook (0.0.16)
certifi (2016.8.31)
click (6.6)
Flask (0.11.1)
itsdangerous (0.24)
Jinja2 (2.8)
Markdown (2.6.6)
MarkupSafe (0.23)
numpy (1.11.1)
pandas (0.18.1)
pip (8.1.2)
Pygments (2.1.3)
python-dateutil (2.3)
pytz (2016.6.1)
setuptools (26.1.1.post20160901)
six (1.10.0)
Werkzeug (0.11.10)
wheel (0.29.0)
```
