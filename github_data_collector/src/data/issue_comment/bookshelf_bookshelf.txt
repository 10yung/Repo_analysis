https://github.com/knex/knex/blob/master/CHANGELOG.md#0200---25-october-2019

Includes a small lint fix and updates package.json>engines>node to specify 8+.
I looks like Bookshelf already dropped support for Node 6 w/ 735f2ac9bfdef4a, but this config was forgotten.

Fixes https://github.com/bookshelf/bookshelf/issues/2048
I don't see any open issue already.
https://github.com/knex/knex/blob/master/CHANGELOG.md#0200---25-october-2019

Is there an SOP for supporting new Knex versions? I'd be happy to open a PR.

## Introduction
Attempting to perform queries using the withSchema option to target other databases leads to "ER_NO_DB_ERROR: No database selected"

## Issue Description
I encountered this issue when attempting to save models on a separate database using the withSchema option. This issue arose after an upgrade to bookshelf@1.0.1 from an earlier release. I believe it's related to the automatic refreshes of models after queries.

## Steps to reproduce issue


The code being executed is as follows:
```
await bookshelf.model('Customer').forge(fixtures.models.customer)
  .save(null, { method: 'insert', withSchema: customerSchema });
```

The queries being executed from the debug log look as follows:
```
  knex:client acquired connection from pool: __knexUid2 +0ms
  knex:query insert into `customer_db_test`.`customers` (`city`, `country`, `created_at`, `email`, `first_name`, `id`, `last_name`, `mobile_phone`, `move_in_date`, `national_id`, `postal_code`, `street_address`, `updated_at`, `valid_national_id`) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) trx12 +0ms
  knex:bindings [ 'City',
  knex:bindings   'Country',
  knex:bindings   '2019-01-09T11:11:06.000Z',
  knex:bindings   'test@test.com',
  knex:bindings   'Test',
  knex:bindings   1,
  knex:bindings   'Testman',
  knex:bindings   '000012345678',
  knex:bindings   '1970-01-01T00:00:00.000Z',
  knex:bindings   '1234566789123456789',
  knex:bindings   '12345',
  knex:bindings   'Test St. 1',
  knex:bindings   '2020-01-09T11:11:06.000Z',
  knex:bindings   1 ] trx12 +0ms
  knex:client releasing connection to pool: __knexUid2 +0ms
  knex:client acquired connection from pool: __knexUid2 +0ms
  knex:query select `customers`.* from `customers` where `customers`.`id` = ? limit ? trx12 +0ms
  knex:bindings [ 1, 1 ] trx12 +0ms
  knex:client releasing connection to pool: __knexUid2 +0ms
```

In the query log i can see that the insert query inserts into the correct database `"customer_db_test"`, however the following `select`, which i assume refreshes the model, does not target the same database. I believe this to be the root cause of this issue.

## Issue Description

When fetching a collection of models with relations, if we only want to edit a related model and save it, it crashes. This happens at least with `hasOne/belongsTo` relations on SQLite.

## Steps to reproduce issue

Sample code repository: https://github.com/mkalam-alami/bookshelf-crash-save-related

```javascript
const loadedCatsWithTail = await Cat.fetchAll({ withRelated: ["tail"] });
const loadedTail = await loadedCatsWithTail.at(0).related("tail");

/**
 * Error: Undefined binding(s) detected when compiling SELECT
 * Undefined column(s): [tail.id_cat]
 * query: select distinct `tail`.* from `tail` where `tail`.`id` = ? and `tail`.`id_cat` = ? limit ?
 */
await loadedTail.save({ color: "white" })
```

Reproduced on Bookshelf 1.0.1, does not happen anymore when dowgrading to 0.15.1. There's no error either when fetching the parent model through `new Cat({ id: 1 }).fetch({ withRelated: ["tail"] });`.
* Related Issues: #2044 

Adds the ability to disable running the count query on fetchPage

## Introduction

Add an additional option to `fetchPage` called `disableCount`, which fetches the desired page but does not make the additional count query.

## Issue Description

I would like to be able to use fetchPage and not have the second query for getting the count to be run. This is desired for performance. We use fetchPage in our API, and in some cases do not want that additional count query to be run to decrease the loading time of the request. Specifically we use another plugin that helps build the API, which uses fetchPage to get data. Providing a new option to disable this functionality will solve the issues.

By default this would be set to false, and would function as it does today, making it backwards compatible.

I would be happy to work on this and put out a PR.
* Related Issues: _#IssueNumber if necessary_

## Introduction

Your front page example references a non-existent `Posts` variable

## Issue Description

The front page has this code:

    const User = bookshelf.model('User', {
      tableName: 'users',
      posts() {
        return this.hasMany(Posts)
      }
    })

This line specifically:

        return this.hasMany(Posts)

references a variable `Posts`.  However, that variable is never defined anywhere in that code, and indeed the string `Posts` with a capital P appears nowhere on the front page at all except on that line.

It seems like an introductory example should be valid Javascript, and either declare or import `Posts`, or not reference it (and reference `Post` instead?)
## Introduction

When I call my belongsToMany, I have a correct request but my model response is not correct.

## Issue Description
I have got this :
![image](https://user-images.githubusercontent.com/40796173/70317215-a041b380-181d-11ea-920a-9b6a732a0bc6.png)

so I call this on the AlertsConfigs model : 
``` js
tests() {
        return this.belongsToMany('Measure', 'AlertsConfigsMeasures', 'AlertConfigId', 'MeasureId')
            .withPivot(['value', 'comparison'])
            .query((qb) => {
                qb.debug(true);
            });
    },
```
the request is : 
```sql
select distinct `MeasuresV1`.*, `AlertsConfigsMeasures`.`AlertConfigId` as `_pivot_AlertConfigId`, `AlertsConfigsMeasures`.`MeasureId` as `_pivot_MeasureId`, `AlertsConfigsMeasures`.`value` as `_pivot_value`, `AlertsConfigsMeasures`.`comparison` as `_pivot_comparison` from `MeasuresV1` inner join `AlertsConfigsMeasures` on `AlertsConfigsMeasures`.`MeasureId` = `MeasuresV1`.`id` where `AlertsConfigsMeasures`.`AlertConfigId` in (?)
```

If AlertConfigId is the same and MeasureId is different in the AlertsConfigsMeasures table, my belongsToMany works as expected. While if AlertConfigId is identical and MeasureId is also identical in the AlertsConfigsMeasures table, my belongsToMany my model.fetchOne returns only the element in the relationships. But in all case the request works as expected.

So I suspect that bookshelf is doing a transformation between the response of the model request and the response of my fetchOne
## Issue Description

Let's say that I have 2 Bookshelf models: Profiles and Users. Here are the simplified versions of them:
```javascript
Bookshelf.model('User', Bookshelf.Model.extend({
  tableName: 'users',
  hidden: ['password', 'salt'],
  hasTimestamps: true,
  ...
  profile: function () {
    return this.hasOne('Profile', 'id', 'id');
  },
  ...
}));
```

```javascript
Bookshelf.model('Profile', Bookshelf.Model.extend({
  tableName: 'profiles',
  hidden: ['name', 'email'],
  hasTimestamps: true,
  ...
  user() {
    return this.belongsTo('User', 'id', 'id');
  },
  ...
}));
```

What I am trying to do in some controller is:
```javascript
return new User()
  .fetchPage({
    pageSize: PageLimit,
    page: PageNumber,
    withRelated: ['profile']
  })
  .then(result => {
    return res.status(200).send({
      data: result.toJSON({
        hidden: ['name'],
      }),
      pagination: result.pagination
    }));
  })
  .catch(next);
```

So I want to return a list of users with their profiles, but I also want to show the `email` values, for instance. That's why I override the `hidden` list in the `toJSON` call. After that, all other properties show up in the result, including hidden ones from the Users model that I still want to hide. My `email` column, that I have to write even without dot notation (i.e., "table.column") btw., is not there, though.

I was able to trace how this argument is passed down with:
```javascript
serialize(...args) {
    console.log(args);
    return Bookshelf.Model.prototype.serialize.apply(this, args);
},
```
And it's just the array `['name']`, that I gave to the `toJSON` call for all nested models.

I thought, that I could gather all `hidden` members, then exclude the needed columns and utilize this new list. So I came up with this function:
```javascript
function getAllFieldsToHide(model, hidden = []) {
  if (model instanceof Bookshelf.Collection && model.length > 0) {
    return getAllFieldsToHide(model.at(0), hidden);
  } else if (model instanceof Bookshelf.Model) {
    hidden = hidden.concat(model.hidden === null ? [] : model.hidden);
    Object.values(model.relations).forEach(relation => {
      hidden = getAllFieldsToHide(relation, hidden);
    });
    return hidden;
  } else {
    return hidden;
  }
}
```
And then I do:
```javascript
const hiddenFieldsToInclude = ['email'];
const newHiddenList = getAllFieldsToHide(result)
  // exclude column names that we need to show
  .filter(field => hiddenFieldsToInclude.indexOf(field) === -1);
```
It retrieves an array of attributes to remove from the output for the given Bookshelf model and its nested relations. But, name conflict may occur here, if models have columns with the same names. The function works, but maybe there is some more sophisticated way to achieve this? Or it can be an issue request.

Thanks!

* Related Issues: _#IssueNumber if necessary_

## Introduction

When trying to retrieve information using withRelated function the function must contain the foreign key in order to work.

## Issue Description

For example, I noticed that if I have two tables let's say "Ranks" and "Categories", ranks.category_id must match categories.id, and when trying to retrieve ranks from each category using 'withRelated' the query function must select the 'foreign key', otherwise it will return nothing.

## Steps to reproduce issue
This won't work:
` withRelated: [
                    { 'ranks': (qb) => qb.column('id', 'rank_name').debug() }
                ],`
This will:
` withRelated: [
                    { 'ranks': (qb) => qb.column('id', 'category_id', 'rank_name').debug() }
                ],`

## Expected behaviour

To not repeat or even require the foreign key that the model is trying to get.

## Actual behaviour

Foreign Key is required and repeated.
