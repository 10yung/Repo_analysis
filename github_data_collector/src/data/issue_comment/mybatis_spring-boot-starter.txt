**Group Id:**  org.mybatis.spring.boot
**Artifact Id:** mybatis-spring-boot-starter
**Version:** 2.1.1


**Topic:**
Association is not working in a complex result mapping if there is no result variable definition in the mapping.

**Summary:**
What I expect is, if mapping has associations and collections, mybatis has to map them.

**Situation;**

I have a DTO object called BlogDto which contains model aggregations called, Blog, Author and Post
given below

![image](https://user-images.githubusercontent.com/15136174/72316339-e4d72f00-36a6-11ea-8e8c-1ec09def7ee4.png)


![image](https://user-images.githubusercontent.com/15136174/72316344-e7d21f80-36a6-11ea-9463-f45f4167d70e.png)

![image](https://user-images.githubusercontent.com/15136174/72316353-ebfe3d00-36a6-11ea-816e-05140f6faf01.png)


![image](https://user-images.githubusercontent.com/15136174/72316360-ef91c400-36a6-11ea-8544-18ee60ee68c5.png)

so service will return one object BlogDto with related model entities.

If I define my mapping like given below, I get TooManyResultsException. Which means, mybatis could not map associations and collections to BlogDto object


here is the mapping.



![image](https://user-images.githubusercontent.com/15136174/72316373-00423a00-36a7-11ea-9d44-c58834fb5149.png)



mapping what I expect,  a BlogDto object contains one Blog assocication, one Author assocication and Post Collection related to this Blog.
But service throws this exception below


```
org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 3
at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:80)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)1	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)	at com.sun.proxy.$Proxy96.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159)
```

But if I add a variable to BlogDto object and add it to the mybatis mapping , it works like a charm and return the given json from the service.

![image](https://user-images.githubusercontent.com/15136174/72316406-18b25480-36a7-11ea-9713-95d403df8d0d.png)


![image](https://user-images.githubusercontent.com/15136174/72316409-1bad4500-36a7-11ea-8331-d311af766366.png)


This is the service response;


![image](https://user-images.githubusercontent.com/15136174/72316421-2536ad00-36a7-11ea-897c-39c684bab27e.png)


So I think this is a bug, or maybe an enchancement that association and collections are not working under an object map if there is no constructor or result type defined in the mapping.

Thanks.

https://travis-ci.org/mybatis/spring-boot-starter/jobs/626444557

- [x] Apply workaround via gh-410
- [ ] Support JKD 15 on Groovy ([Issue on Groovy](https://issues.apache.org/jira/browse/GROOVY-9349))
https://github.com/mybatis/spring/milestone/14
https://github.com/mybatis/mybatis-3/milestone/24
In a multi-module project, we want to declare versions in the parent POM, and only the dependencies in the data-access modules. The parent POM looks like (excerpt of the relevant parts):

```
<project ...>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.16.RELEASE</version>
		<relativePath />
	</parent>

	<properties>
		<mybatis-spring-boot.version>1.3.2</mybatis-spring-boot.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.mybatis.spring.boot</groupId>
				<artifactId>mybatis-spring-boot</artifactId>
				<version>${mybatis-spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
</project>
```

However, this approach ends up overwriting Spring Boot 1.5.16.RELEASE dependency management with Spring Boot 1.5.10.RELEASE (because it's imported in mybatis-spring-boot).

A separate BOM artifact for dependency management will solve this problem for multi-module projects, and wouldn't impact mybatis-spring-boot-starter users.

[Edit reason: wrong C&P; the dependency I was referring to is mybatis-spring-boot, not mybatis-spring-boot-starter-test]