Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.0 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.0...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.0&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/vscode-org-mode/vscode-org-mode/network/alerts).

</details>
Could the following syntax for per-file todo keyword configuration be supported?

> #+TODO: TODO FEEDBACK VERIFY | DONE CANCELED
>
> You may also write ‘#+SEQ_TODO’ to be explicit about the interpretation, but it means the same as ‘#+TODO’, or
> 
> #+TYP_TODO: Fred Sara Lucy Mike | DONE
>
> A setup for using several sets in parallel would be:
> 
> #+TODO: TODO | DONE
> #+TODO: REPORT BUG KNOWNCAUSE | FIXED
> #+TODO: | CANCELED
>...
> Remember that the keywords after the vertical bar—or the last keyword if no bar is there—must always mean that the item is DONE, although you may use a different word. After changing one of these lines, use C-c C-c with point still in the line to make the changes known to Org mode.

from: https://orgmode.org/manual/Per_002dfile-keywords.html#Per_002dfile-keywords
Function that detects timestamp in cursor context is modified to also collect information, about brackets being used, allowing user to use both [] and <>. 
i used a method identical to TODO state management
- The ability to Fold/Unfold with TAB in Org-Mode
- Hide Leading Stars 

How can we go about implementing these?
It would be nice if property/logbook/... drawers could be folded too:

Example from the orgmode docs: https://orgmode.org/manual/Drawers.html

```org
** This is a headline
Still outside the drawer
:DRAWERNAME:
This is inside the drawer.
:END:
After the drawer.
```
Currently if we apply the "Org: Italic" command on an already in italic text, like:
```
/my text already in italic/
```
we get:
```
//my text already in italic//
```
it would probably be better to revert the text in "normal" mode, so get:
```
my text already in italic
```
The "Org: Italic" command applied on a snippet of text like:
```
first line,
second line,
third line.
```
adds a slash at the beginning and the end of the snippet, so we get:
```
/first line,
second line,
third line./
```
which is not correct because nor "org-*-export-*" command nor "vscode-org-mode plugin" itself handle this snippet as italic text.

We should add slashes at the beginning and the end of each lines, so we should get: 
```
/first line,/
/second line,/
/third line./
```
Seeing two projects marketplace.visualstudio.com with the same user-friendly name but two different names (`tootone.org-mode` vs. `vscode-org-mode.org-mode`) both referring to this github project with no way to differ on what commit they were built from... how should I decide which one to install? Can it be made more clear what is the purpose and status of each of these?

With the new extension release, we need to find a way to reach our userbase to make them switch to the new publisher extension.

One way to do it, would be to publish a version that open a page explaining the user that he need to replace the extension to have latest features.
I start to dig how to implement that, (as bookmark, or gitlens do), and end up on vscode extensions samples.
So far, the current version will open the Upgrade page at start.
**This is still beta and prototypal, focused on the mecanism rather than the message**

Once working this would need to be backport on original extension, and a release with the original publisher should be made

We'll could later use that mecanism to publicize new features.

**Feedback are more than welcome!!**, I wanna know what you think about this :)

🦄 


<img width="995" alt="Capture d'écran 2019-03-20 22 23 25" src="https://user-images.githubusercontent.com/2601132/54720593-0e472d00-4b60-11e9-959a-09dd13b1871a.png">