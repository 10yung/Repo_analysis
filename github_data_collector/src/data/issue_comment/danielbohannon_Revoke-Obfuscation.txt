This patch allows to run Revoke-Obfuscation on both Windows PowerShell and PowerShell Core.
```
> Import-Module Revoke-Obfuscation
Import-Module : The current Windows PowerShell host is: 'Visual Studio Code Host' (version 1.9.0). The module 'C:\Users\home\Documents\WindowsPowerShell\Modules\Revoke-Obfuscation\1.2\Revoke-Obfuscation.psd1'
requires a minimum Windows PowerShell host version of '3.0' to run.
```

Running Powershell 5.1 on Windows 10
1) Two parameters were added:
- **AzureML** to use a web deployed model on Azure ML (API settings are required).
- **Normalized** to pick only normalized and important features. New vectors (weights) were obtained;
> *To normalize every feature, I used the data binning technique. It is a way to group 
> widely distributed (non-linear) features into a smaller number of "bins" (100 by default).
> https://en.wikipedia.org/wiki/Data_binning
> To get rid of unimportant features, I only picked those features where number of unique buckets is more than some specific number (I set 3 by default, in the future it is recommended to compare other values). The full report can be provided upon request.*
2) **settings.json** is used to store the feature bins, indexes of the important features and API settings, as well as the weights and parameterized threshold;
3) Minimum version of the **Windows PowerShell host** was lowered to **1.8.3** so users could use VS Code debugger.
4) Fixed "empty script" bug -> empty script is not obfuscated a priori, no errors need to be thrown.
Hello 
i have generated an obfuscated command using Invoke-Obfuscation. and can see the scriptblock log 4101 in the event log.
![image](https://user-images.githubusercontent.com/5006200/41641653-a5b3291a-746e-11e8-9599-fef5452e6222.png)
i exported the log entry to a separate evtx file, and executed the following commands to test for obfuscation and im getting the following errors
![image](https://user-images.githubusercontent.com/5006200/41641730-ea6c4082-746e-11e8-9b02-6b65e0cc9830.png)
and
![image](https://user-images.githubusercontent.com/5006200/41641759-03a3ae5a-746f-11e8-866e-14c4dec50333.png)

am i missing something here?
 
turn hash code into a function. add hashing to get-rvoscriptblock.

get-rvoscriptblock is helpful for other projects as well. having the hash calculated there makes the function more portable.

also added a check to measure-rvoscriptblock to see if the hash already exists, if not, hash then.
adds support for a file containing hashes to whitelist. I dont want to keep a copy of the whitelisted script, and would like to whitelist based on hash only. the bigger goal is to have Measure-RvoObfuscation send me a message of obfuscated results, with hash and scriptblock. I can determine if I want to WL based on the scriptblock, then update my list of hashes in a tracked repo.
support for file to be stored in Whitelist subfolder, or defined by parameter.
This is what I had to do to make it work with PS Core on Ubuntu. Not sure how you feel about squashing all the .cs files. If nothing else, can leave it for others' reference.
```
PS C:\Program Files (x86)\Microsoft VS Code> (gi .\Code.exe).versioninfo

ProductVersion   FileVersion      FileName
--------------   -----------      --------
1.21.1           1.21.1           C:\Program Files (x86)\Microsoft VS Code\Code.exe


PS C:\Program Files (x86)\Microsoft VS Code> get-host


Name             : Visual Studio Code Host
Version          : 1.6.0
InstanceId       : a7215668-5039-4dcb-a92e-7cf389833cae
UI               : System.Management.Automation.Internal.Host.InternalHostUserInterface
CurrentCulture   : en-US
CurrentUICulture : en-US
PrivateData      :
DebuggerEnabled  : True
IsRunspacePushed : False
Runspace         : System.Management.Automation.Runspaces.LocalRunspace
```
This pull request will add functionality to the 'get-rvoscriptblock' function to support search results from FireEye Helix's API.
First Rev