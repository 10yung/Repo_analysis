â€¦sing

Even when passing the options --disable-lzma and/or --disable-zlib, the build (calling build.sh with the options) fails if lzma.h and/or zlib.h is missing because of undefined stuff in zfile_read

I hope this pull request will be helpful, even if you don't take it as it is

Regards 
I am not sure if this is an `ag` issue or a more general linux issue, but I am noticing it with `ag`, I hope someone has some tips

I have an Ubuntu based Linux installed as VM using VMware player; 

> I am testing with 8GB and 16GB memory in the VM, the host has 24 GB total. Host also has 16 threads in total, it is an AMD Ryzen. Host disk is NVME SSD. Vm and host disks are defragmented.

When I allocate 4 CPU threads in VM settings, some commands take longer to run than when allocating 2 CPU threads.

The files it searches are small files, around 23 000 in total, but only 110 MB.

Notice how first run the command always take longer, then 2nd and 3rd time it runs much faster, but with less threads it is even faster.

**Why is that ?** 

Even worse, if I give it 12 out of 16 CPU threads, it never seems to cache that command, it always takes same amount of time when I repeat the command.
Is this a CPU cache thing or a memory cache thing ? 

Same command on a dedicated machine with 8 threads takes 0.300 sec, that is what I think is ~normal.

Edit: in VM I have a cpu monitor chart, and whenever there are more threads, the charts never reach top (~100% usage) and that is also when repeated commands still run slow. But when I have 2 threads, running the command shows the CPU usage at 100%, and then repeating the command is much faster. Like LINUX would not cache that content or command unless the CPU was under significant load ? It considers it was just some light processing work ?!

```
SEARCH WITH 4 CPU THREADS
=========================

time ag -li 'foo' /my_files

real	0m8.045s
user	0m0.169s
sys	0m7.014s

time ag -li 'foo' /my_files

real	0m1.460s
user	0m0.330s
sys	0m1.907s

time ag -li 'foo' /my_files

real	0m1.466s
user	0m0.315s
sys	0m1.882s


SEARCH WITH 2 CPU THREADS
=========================

time ag -li 'foo' /my_files

real	0m4.438s
user	0m0.039s
sys	0m2.679s

time ag -li 'foo' /my_files

real	0m0.368s
user	0m0.069s
sys	0m0.491s

time ag -li 'foo' /my_files

real	0m0.345s
user	0m0.104s
sys	0m0.429s
```
I use ag installed from chocolatey. When searching like this: `cd E:\ & ag 'somestring' -v` I got a couple of #1056 errors for big files, then after a while ag crashed with a standard 'crash window':

![image](https://user-images.githubusercontent.com/6625123/71322246-cf1a8380-24c5-11ea-8d58-69525c98880f.png)

It crashed while in the middle of printing content of files so I don't think this is a filesystem error.  I have repeated the test and found out the exact file when it crashes is not always the same. It might be a bug in ag.

I have visual studio installed so there is the debug option but I'm not familiar with this kind of debugging and would need some guidance, if needed.
Hello,

This PR adds Zephir support.


Zephir is an open source, high-level/domain specific language designed to ease the creation and maintainability of extensions for PHP, with a focus on type and memory safety. For more see: https://zephir-lang.com/en

Using ag version 2.2.0, whenever I try to search an xlsx file (which I believe is a zip format of some kind), I get a segmentation fault.

% ag --version
ag version 2.2.0

Features:
  +jit +lzma +zlib
% ag TEST test.xlsx 
% ag -z TEST test.xlsx
ERR: Unsupported compression type: 3
Segmentation fault

I encountered the problem with `-z` option not being able to match anything when I installed `ag` on my new MacBook Pro.

Here you can see it is working with the older version.

```
[mbp:logs]$ uname -a 
Darwin mbp.local 19.0.0 Darwin Kernel Version 19.0.0: Thu Oct 17 16:17:15 PDT 2019; root:xnu-6153.41.3~29/RELEASE_X86_64 x86_64 i386 MacBookPro13,3 Darwin
[mbp:logs]$ ag --version
ag version 1.0.2

Features:
  +jit +lzma +zlib
[mbp:logs]$ ag -z adding ./00460893/logstash-plain.log.gz | head -4
2:[2019-11-27T15:28:42,628][DEBUG][logstash.util.decorators ] filters/LogStash::Filters::Grok: adding tag {"tag"=>"1501"}
12:[2019-11-27T15:28:42,628][DEBUG][logstash.util.decorators ] filters/LogStash::Filters::Mutate: adding value to field {"field"=>"date_tmp", "value"=>["%{date_str} %{+YYYY}"]}
20:[2019-11-27T15:28:42,628][DEBUG][logstash.util.decorators ] filters/LogStash::Filters::Mutate: adding value to field {"field"=>"date_tmp", "value"=>["%{date_str} %{+YYYY}"]}
64:[2019-11-27T15:28:42,634][DEBUG][logstash.util.decorators ] filters/LogStash::Filters::Mutate: adding value to field {"field"=>"date_tmp", "value"=>["%{date_str} %{+YYYY}"]}
[mbp:logs]$ 
```

In version 2.2.0

```
[nami:logs]$ ag --version
ag version 2.2.0

Features:
  +jit +lzma +zlib
[nami:logs]$ uname -a
Darwin nami.local 19.0.0 Darwin Kernel Version 19.0.0: Wed Oct 23 18:29:05 PDT 2019; root:xnu-6153.41.3~44/RELEASE_X86_64 x86_64
[nami:logs]$ ag --version
ag version 2.2.0

Features:
  +jit +lzma +zlib
[nami:logs]$ ag -z adding ./00460893/logstash-plain.log.gz
[nami:logs]$ 


```
I'm trying to get ag to stop at the first match because I don't care about the loopback address in ifconfig.  But for some reason it seems to be searching the piped output twice:
```
ifconfig | ag --max-count 1 'inet '
ERR: Too many matches in . Skipping the rest of this file.
        inet 10.0.4.111  netmask 255.255.0.0  broadcast 10.0.255.255
ERR: Too many matches in . Skipping the rest of this file.
        inet 127.0.0.1  netmask 255.0.0.0
```
Is there some parallelization causing ag to read from the pipeline multiple times?  What's going on here?  It's not what I'd expect and it's not how `grep` works:
```
ifconfig | grep -m 1 'inet '       
        inet 10.0.4.111  netmask 255.255.0.0  broadcast 10.0.255.255
```
Version:
```
ag version 2.2.0

Features:
  +jit +lzma +zlib
```
two Makefiles both are "ISO-8859 text" type
![image](https://user-images.githubusercontent.com/17845399/69113746-dc0b1800-0abe-11ea-8f0e-76ce46d0a1ee.png)
ag can search contet in one file but treat other as a binary file (can not found content)

I love `ag` and I am using it extensively since I discovered it few years back as it helps a lot searching big codebases. @ggreer you really created a great tool ... the number of stars does not lie!

Sadly today I realized that the project is not really into a maintained status as the last commit was back in march and is has >100 open PRs, some of them [clearly fixing real bugs](https://github.com/ggreer/the_silver_searcher/pull/940) and passing CI, so clearly not lingering because original contributor failed to address an issue.

Can you please state the maintenance status? Maybe you want to make a call for getting few more contributors to help with its maintenance, it would be really sad to see it perishing. 

Future of such great project should not depend on a single human ;)
Apparently there is no rpm available in centos8, even after enabling epel8.

This makes the documentation misleading.