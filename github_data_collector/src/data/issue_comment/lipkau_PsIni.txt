I used this code and compared the results:

```
Get-IniContent $iniPath\wincmd.ini | Out-IniFile $iniPath\wincmd2.ini
```

The difference, appart from white lines, were in the lines which had values that are within quotes:

```
key="some value"
```

This will become after output:

```
key=some value
```

This is a problem:

`param7=""%n""` ==> `param7="%n"`

because standard ini reader will get `n` instead `"n"`.

I noticed this because custom application I added in Total Commander lost quotes around parameter and consequetlly didn't work any more as expected.
Servus,

I'm working a lot with python and its parser for config files. There are several characteristics of an ini file structure, which are not considered in PSIni:

## Multiline Values

Indented lines enable multiline values, 

```ini
[Multiline Values]
chorus: I'm a lumberjack, and I'm okay
    I sleep all night and I work all day
```

which can be easily considered when insert the evaluation of a `Regex`-string ,e.g., `^( {4,}.*)\s*$,` after inserting a key in `Get-IniContent`.

## Interpolation of values

 It enables values to contain format strings which refer to other values in the same section, or values in the special default section. Additionally extended interpolation enables  to denote a value from a foreign section.

```ini
[BasicInterpolation]
home_dir = /Users
my_dir = %(home_dir)s/lumberjack

[ExtendedInterpolation]
my_pictures = ${BasicInterpolation:my_dir}/Pictures
```

Moreover, there is the oppurtunity to use environment variables as values. 

I have implemented already these functionality but for the last published version in PSGallery 3.1.2. Is there the possibility to open a pull request for version 4.0?

Besides these extensions, there seems to be a misbehaviour when using redundant keys in one section. In `Get-IniContent`, the generation of  `[ArrayList]` overwrites the current key and logically add to this key a empty object of `[ArrayList]`. I think, that behaviour is not intended and can be easily fixed.

I'm looking forward hearing from you!

 
This library would be much more useful to me if we were to separate the concept of converting to/from ini format from reading/writing files - since really these are separate things.

I propose that we create the functions `ConvertTo-Ini` and `ConvertFrom-Ini`, which would match the existing powershell api for JSON, Csv, etc. 
`Out-IniFile` and `Get-IniContent` should then be rewritten to use these new functions.

Pros:
 - More flexible
 - More consistent with similar existing PS functionality

Cons:
 - ???

I need this ability for my project and am working on this.
I'm happy to consider any feedback and send a PR if you agree this would be useful
The following private functions need Unit Tests:
* [ ] Convert-IniCommentToEntry
* [ ] Convert-IniEntryToComment
It would be great if you add [Chocolatey package](https://chocolatey.org/).

- [ ] publish repo to www.powershellgallery.com
- [ ]  document installation steps

# Write content for wiki
- [ ] Home
- [x] Get-IniContent
  - [x] Alias
  - [x] Parameters
  - [x] Examples for parameters
- [ ] Out-IniFile
  - [ ] Alias
  - [ ] Parameters
  - [ ] Examples for parameters
  - [ ] compatible with hashtable and [System.Collections.IDictionary]
- [ ] Unit Tests
