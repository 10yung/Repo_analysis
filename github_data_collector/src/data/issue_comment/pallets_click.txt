â€¦wrong input parameter. #1446

To get an overview of a program's usage, it would be helpful to print help for all commands at once rather than having to run, e.g. `script.py command1 --help`, `script.py command2 --help`, etc.  

This feature is important because the default top-level help doesn't indicate which commands have options, so it doesn't give a good overview of the program's functionality.

I looked through all of the issues, open and closed, and the closest I could find to asking for this feature is #1176.  It points to [this SE answer](https://stackoverflow.com/a/58018765/712624):

```python
def recursive_help(cmd, parent=None):
    ctx = click.core.Context(cmd, info_name=cmd.name, parent=parent)
    print(cmd.get_help(ctx))
    print()
    commands = getattr(cmd, 'commands', {})
    for sub in commands.values():
        recursive_help(sub, ctx)

# Used like:
@cli.command()
def dumphelp():
    recursive_help(cli)
```
It produces output like:
```
$ rubbish.py all-help
Usage: cli [OPTIONS] COMMAND [ARGS]...

Options:
  -v, --verbose
  --help         Show this message and exit.

Commands:
  all-help
  empty     Empty files from trash bin.
  list      Print list of items in trash bin.
  orphans   List or empty orphaned trash files.
  restore   Restore paths from trash bin to original...
  trash     Move paths to trash bin.

Usage: cli restore [OPTIONS] [PATHS]...

  Restore paths from trash bin to original location, or to TO when given.

Options:
  --to PATH  When given, restore to this directory instead of original
             location
  --help     Show this message and exit.

Usage: cli trash [OPTIONS] [PATHS]...

  Move paths to trash bin.

Options:
  --help  Show this message and exit.
```
It seems like a good proof of concept.  Ideally, the output would be more like:
```
$ rubbish.py --help -v
Usage: rubbish.py [OPTIONS] COMMAND [ARGS]...

Options:
  -v, --verbose
  --help         Show this message and exit.

Commands:
  empty     Empty files from trash bin.
  list      Print list of items in trash bin.
  orphans   List or empty orphaned trash files.
  restore   Restore paths from trash bin to original...
  trash     Move paths to trash bin.

Command: restore [OPTIONS] [PATHS]...

  Restore paths from trash bin to original location, or to TO when given.

  Options:
    --to PATH  When given, restore to this directory instead of original
               location
    --help     Show this message and exit.

Command: trash [OPTIONS] [PATHS]...

  Move paths to trash bin.

  Options:
    --help  Show this message and exit.
```
Thanks for Click!  It makes writing Python CLI very pleasant.

Currently click only does startswith match at https://github.com/pallets/click/blob/6c454c88b76f7a0be396dba72513bd316cd141e6/click/parser.py#L328-L329 so a typo like using `--boun` suggests `--bount` but using `--bound` doesn't make any suggestions. Using [difflib.get_close_matches](https://docs.python.org/3/library/difflib.html#difflib.get_close_matches) could get better suggestions and nearest matches.

Sample implementation : https://github.com/tirkarthi/click/tree/difflib-suggestions

```python
import click

@click.option("--count")
@click.option("--bount")
@click.command()
def cli(count, bount):
    click.echo(f"count = {count}, bount = {bount}")

if __name__ == "__main__":
    cli()
```

```shell
python sample.py --boun 1 
Usage: sample.py [OPTIONS]
Try "sample.py --help" for help.

Error: no such option: --boun  Did you mean --bount?
```

```shell
python sample.py --bound 1
Usage: sample.py [OPTIONS]
Try "sample.py --help" for help.

Error: no such option: --bound
```

Using `--bound` with `difflib.get_close_matches`

```shell
python sample.py --bound 1
Usage: sample.py [OPTIONS]
Try "sample.py --help" for help.

Error: no such option: --bound  (Possible options: --bount, --count)
```

Using `--counter` with `difflib.get_close_matches`

```shell
python sample.py --counter 1
Usage: sample.py [OPTIONS]
Try "sample.py --help" for help.

Error: no such option: --counter  (Possible options: --count, --bount)
```
Fixes #1435.
So with current behavior of click, my command has to check whether it is being called directly or from another command, in order to do the right thing: return a value if called from other command, raise `click.ClickException` if called directly. Doesn't make much sense IMO but ok, per #747 that's the way it is.

So what is a robust way to check this? I can't find anything in ctx that jumps out. There is no "is_invoked" property/method. One difference I found between the 2 types of invocations is that if command is called directly, then `ctx.parent.invoked_subcommand` is itself, whereas if it is called via `ctx.invoke`, this property is `None`. But is this defined behavior or could this change in the future?
`mix_stderr` is a parameter of `CliRunner.invoke`.
This is not documented in the docstring as a `:param`.
Simply reading the code (which I did after trying this and seeing no output) shows that this parameter is not used.

`mix_stderr` works on `CliRunner.__init__`.

The `mix_stderr` parameter should be removed, or changed to work and get documented.
I think that allowing the help message to be shown with both `-h` and `--help` is common enough that a basic boolean keyword argument that provides the functionality would be welcome. Currently the easiest way is to [pass custom `context_settings`](https://click.palletsprojects.com/en/7.x/documentation/#help-parameter-customization) like so:

```python3
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

@click.command(context_settings=CONTEXT_SETTINGS)
def cli():
    pass
```

I admit that it is not much, but something like the following would be nice to remove the boilerplate needed to get the functionality:

```python3
@click.command(help_shorthand=True)
def cli():
    pass
```
Currently if an option has autocompletion function that returns a list of paths (reachable from current working directory), then when there is only one path left in list so TAB accepts it, click automatically appends a space after the slash. Say you type ("|" represents the cursor):
```
mycommand.py some/path|TAB
```
and the TAB allows for completion because there is only one option `["some/path_to_file/"]`, you get a space before the cursor:
```
mycommand.py some/path_to_file/ |
```
Needless to say this is non-standard and almost never what user expects or desires. Is there a way to configure a click option to not append space, or to patch click so there is no space inserted after the completion? 