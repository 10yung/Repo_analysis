Solves my immediate issue, but there are other bugs remaining related to broken symlinks.

I was not able to proceed any further due to lack of understanding because unfortunately the code does not document its data structures (eg. `_symlinkPaths`) or what invariants in general it expects to hold.
**Describe the bug**

Symlinks are always watched ignoring matching pattern and `followSymlinks` option.

**Versions (please complete the following information):**
 - Chokidar version 3.3.1
 - Node version v12.12.0
 - OS version: MacOS 10.15

**To Reproduce:**

Create a file named `test.aaa`
Create a file named `test.bbb`
Create a symlink to `test.bbb` named `test.ccc`

```javascript
const chokidar = require('chokidar')

const watcher = chokidar.watch('**/*.aaa')

const log = console.log.bind(console)

watcher
  .on('add', path => log(`File ${path} has been added`))
  .on('change', path => log(`File ${path} has been changed`))
  .on('unlink', path => log(`File ${path} has been removed`))
```

**Expected behavior**
Only `test.aaa` should be watched, but `test.ccc` is watched as well.

**Additional context**
Project: https://github.com/TheNeuronProject/ef.qt
Related code: https://github.com/TheNeuronProject/ef.qt/blob/master/watcher.js#L113
When project includes symlinks, they are no matter how watched and caused issue on code compiling .
**Describe the bug**

When using option `usePolling=true` and copying big files to watched directory with `rsync -a` an `add` event is not triggered for last file in a list.

**Versions (please complete the following information):**
 - Chokidar version 3.3.1
 - Node version 10.17.0
 - OS version: Kubuntu 18.04 & CentOS 7.6

**To Reproduce:**

[Here](https://github.com/ezze/chokidar-issue-961) is a repo to reproduce.

**Expected behavior**

Trigger `add` event for last file copied by rsync.
**Describe the bug**

When I enable the `awaitWriteFinish` (as well as `alwaysStat` and having `followSymlinks` disabled), then when a symlink to a regular file is created the `Stats` parameter passed to the event callback reports that the file is a regular file and not a symlink. This only happens for symlinks created after the `ready` event.

**Versions (please complete the following information):**

 - Chokidar version: 3.3.1
 - Node version: 12.13.1
 - OS version: Linux x86_64

**To Reproduce:**

The following is a minimal example to reproduce this:

```
const chokidar = require("chokidar");
const fs = require("fs");

fs.rmdirSync("test", {recursive: true}); // remove the temp dir from previous runs
fs.mkdirSync("test", {recursive: true}); // create the temp dir

chokidar.watch("test", {
	awaitWriteFinish: true,
	followSymlinks: false,
	alwaysStat: true,
}).on("all", (ev, path, st) => {
	if (path === "test/symlink.txt" && st)
		console.log(ev, st.isSymbolicLink(), st.isFile());
}).on("ready", () => {
	fs.writeFileSync("test/test.txt", "test\n");
	fs.symlinkSync("test.txt", "test/symlink.txt");
});

```

**Expected behavior**

I expected that the above script will print `true false`, but instead it prints `false true`. If I set `awaitWriteFinish` to `true` then it works as expected.
**Describe the bug**

When running in Node 10.x or 12.x and created with `persistent: false`, chokidar does not fire the `ready` event if the watched directory contains a symlink. The `ready` event is fired correctly when running in Node 8.x.

**Versions (please complete the following information):**
 - Chokidar version 3.3.0
 - Node version 10.17.0, 12.13.1
 - OS version: macOS Mojave 10.14.6

**To Reproduce:**

Simple script (`index.js`) that should print out a directory's contents and then print out "READY!!":

```
#!/usr/bin/env node
const chokidar = require('chokidar');
const watchedDirPath = process.argv[2] || '/tmp';
const chokidarInstance = chokidar.watch(watchedDirPath, {
  persistent: false,
  cwd: watchedDirPath,
});
chokidarInstance.on('add', filePath => console.log(filePath));
chokidarInstance.on('ready', () => console.log('READY!!'));
chokidarInstance.on('error', console.error);
```
Let's create a directory `d1` containing a text file, and a directory `d2` containing a symlink:
```
$ mkdir d1 d2
$ cd d1 && echo hello > hello.txt && cd ..
$ cd d2 && ln -s ../d1/hello.txt && cd ..
$ ls -l d1 d2
d1:
total 4
-rw-r--r-- 1 chuan staff 6 Dec 12 15:11 hello.txt

d2:
total 0
lrwxr-xr-x 1 chuan staff 15 Dec 12 15:12 hello.txt -> ../d1/hello.txt
```
The script works as expected on `d1`:
```
$ ./index.js $PWD/d1
hello.txt
READY!!
```
The `ready` event is NOT fired on `d2`:
```
$ ./index.js $PWD/d2
hello.txt
```

However, if we change `persistent: false` to `persistent: true` in the script, then the `ready` event is fired for both directories:
```
$ ./index.js $PWD/d1
hello.txt
READY!!
^C
$ ./index.js $PWD/d2
hello.txt
READY!!
^C
```

We have been able to repro this issue in both Node 10.17.0 and 12.13.1. However, in Node 8.x, the `ready` event DOES fire correctly for `d2` even with `persistent: false`.

**Additional context**

As a workaround, we currently set `persistent: true` when watching, but then call `chokidarInstance.close()` in the `ready` event handler to prevent blocking the Node process from exiting.

When watching a directory with `followSymlinks` off, if the directory contains links for which the target does not exist, chokidar blows up with:

```
UnhandledPromiseRejectionWarning: Error: ENOENT: no such file or directory, stat <path of symlink>
```

This is due to calling `fsrealpath` on the link, which fails (since the link target does not exist) here:
https://github.com/paulmillr/chokidar/blob/7c79e45f83b52084d03940ed882e0279e1c23b5f/lib/nodefs-handler.js#L416

Note the node.js documentation for `fs.realpath`:
> Asynchronously computes the canonical pathname by resolving ., .. and **symbolic links**.

(it does not specify what happens when the link target does not exist, but as reality shows it throws `ENOENT`...)

Perhaps using the `fs.readlink` function would be more appropriate there.
Option `awaitWriteFinish` does not work on Windows, using NTFS file system. When I start the copy, an `add` event is fired, and when it's finished there's one `change` event.
On alpine linux it waits until the copy is finished and fires one `add` event. I guess this is the expected behaviour.
I tried with the latest Node (v12.13.1) and Chokidar (v3.3.0).
When watching a directory on network share ending with `$`, no files are found. Shares ending in `$` are commonly used to hide shares from being listed when browsing on Windows but they work normally otherwise. 

**Versions:**
 - Chokidar version `3.3.0`
 - Node version `electron@4.2.12` ie. `node@10.11.0`
 - OS version: Windows 10

**To Reproduce:**

```
const networkDirectory = '//SOME-PLACE/share-name$/more/path';

chokidar
      .watch(networkDirectory, {
        usePolling: true,
        interval: 1000,
        awaitWriteFinish: { stabilityThreshold: 1000, pollInterval: 1000 },
        disableGlobbing: true
      })

```
Works fine in `chokidar@2.1.8`
I've added `dirent` support to `readdirp v3`.

The initial implementation of the approach resides in branch https://github.com/paulmillr/chokidar/tree/dirent.

We need to make it default, when `alwaysStat: false`
This should speed up things by a huge amount. `recursive: true` option has been around since 2015, or so. It uses effective low-level inferface, although shitty â€” otherwise there'd be no chokidar.

We will need a new watcher class for that, something like `class RecursiveWatchHandler`.

cc @XhmikosR 