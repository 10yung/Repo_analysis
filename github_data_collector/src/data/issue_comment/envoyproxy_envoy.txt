Description: Breaking up #9629 into smaller pieces, just upgrading the `MOCK_` methods for `test/common/` and `test/extensions/.
Risk Level: low
Testing: existing
Docs Changes: n/a
Release Notes: n/a

Signed-off-by: Derek Argueta <dereka@pinterest.com>
Description: as title saysg
Risk Level: low
Testing: existing
Docs Changes: n/a
Release Notes: n/a
Related to issue #6953 cc @dichen16 

Signed-off-by: Derek Argueta <dereka@pinterest.com>
Description: `std::make_unique` is shorter with type deduction, is more consistent with other code in the codebase, and generally [should be preferred](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rh-make_unique).
Risk Level: low
Testing: existing
Docs Changes: n/a
Release Notes: n/a

Signed-off-by: Derek Argueta <dereka@pinterest.com>
Hey!

Today my envoy proxy stopped working after I rebuild my Docker image

I am getting that error using your example:
```
[2020-01-19 03:38:58.528][6][critical][main] [source/server/server.cc:94] error initializing configuration '/etc/envoy.yaml': Proto constraint validation failed (Using deprecated option 'envoy.api.v2.route.CorsPolicy.allow_origin' from file route_components.proto. This configuration will be removed from Envoy soon. Please see https://www.envoyproxy.io/docs/envoy/latest/intro/deprecated for details. If continued use of this field is absolutely necessary, see https://www.envoyproxy.io/docs/envoy/latest/configuration/operations/runtime#using-runtime-overrides-for-deprecated-features for how to apply a temporary and highly discouraged override.): allow_origin: "*"
allow_methods: "GET, PUT, DELETE, POST, OPTIONS"
allow_headers: "keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout"
expose_headers: "custom-header-1,grpc-status,grpc-message"
max_age: "1728000"
```

**Dockerfile**

```
# This configuration will build a Docker container containing
# an Envoy proxy that routes to Google.

FROM envoyproxy/envoy-dev:latest
RUN apt-get update
COPY envoy.yaml /etc/envoy.yaml
CMD /usr/local/bin/envoy -c /etc/envoy.yaml
```

**envoy.yaml**
```
admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 9000 }
      filter_chains:
        - filters:
            - name: envoy.http_connection_manager
              config:
                codec_type: auto
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/" }
                          route:
                            cluster: api_interface
                            max_grpc_timeout: 0s
                      cors:
                        allow_origin:
                          - "*"
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                        max_age: "1728000"
                        expose_headers: custom-header-1,grpc-status,grpc-message
                http_filters:
                  - name: envoy.grpc_web
                  - name: envoy.cors
                  - name: envoy.router
  clusters:
    - name: api_interface
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      hosts: [{ socket_address: { address: host.docker.internal, port_value: 10000 }}]
```
It appears that we've added a custom "Envoy only" pseudo-header,
which is clearly forbidden by the HTTP/2 spec.

It's only used by the Hystrix Dashboard Event Stream, so presumably
it's not widely used, but it's been breaking some intermediaries.

Signed-off-by: Piotr Sikora <piotrsikora@google.com>
Description: use of `std::make_shared` isn't necessary here, just use RAII.
Risk Level: low
Testing: existing
Docs Changes: n/a
Release Notes: n/a

Signed-off-by: Derek Argueta <dereka@pinterest.com>
Initial docs for v3 arrived in https://github.com/envoyproxy/envoy/pull/9719. There is still a large body of existing example configs, either standalone or in configuration fragments, that need to be updated to v3.
https://github.com/envoyproxy/envoy/pull/9719 has a workaround for the inability of protoxform to intelligently follow field renames in RST links (some minor hardcoding is there for now). We should fix this; either put renames in the type database or make protoxform aware of the entire descriptor pool (similar to how the API booster does it).
Wasm modules used in tests are currently generated manually, using tools outside of Bazel build system, making them non-hermetic. This should be fixed, so that all test data is generated using Bazel rules.

@jplevyak and myself are already working this.
Either upstream the `wee8_compile` tool to V8 or move it to a separate repo.