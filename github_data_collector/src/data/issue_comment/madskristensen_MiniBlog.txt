Bumps bootstrap from 3.3.4 to 3.4.1.

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=bootstrap&package-manager=nuget&previous-version=3.3.4&new-version=3.4.1)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/madskristensen/MiniBlog/network/alerts).

</details>
In controllers, in order to display posts, the PubDate of posts is compared with DateTime.UtcNow, only the datetime of the posts is local, even if retrieved from a UTC formatted string. It should be 
post.PubDate <= DateTime.Now or post.PubDate.ToUniversalTime() <= DateTime.UtcNow
This was a strange behaviour, so I discovered that all post is not loaded correctly on startup.
So I added a fix for this to wait for the posts to finish. 

**To recreate the issue:** Start application and add a new post. Restart the application, the new post is not shown or not all posts exists in list.
**Result:** List does not contain all posts.
**Expected result:** All items in list is shown.
**File:** BlogController.cs

```
 public async Task<IActionResult> Index([FromRoute]int page = 0){
            var posts = await _blog.GetPosts(_settings.Value.PostsPerPage, _settings.Value.PostsPerPage * page);
            var result = Task.FromResult(posts).Result; //<----- Wait for the posts to finish

            ViewData["Title"] = _manifest.Name;
            ViewData["Description"] = _manifest.Description;
            ViewData["prev"] = $"/{page + 1}/";
            ViewData["next"] = $"/{(page <= 1 ? null : page - 1 + "/")}";
            return View("~/Views/Blog/Index.cshtml", result);  //<----- result
        }
```
A lot of web hostings still lack the .NET Core support. Is it possible to make it .NET Framework friendly too?
My hosted let me know that memory utilization was high.  Looking at it, it shows memory is between 260-300mb (framework dependent deployment)

Is this to be expected (by .net core?)
Can't insert image. Can't wrap text around it and can't save and view post. So basically not even functional?

Will this continue to be supported if someone doesn't want to make the move to the Core version?
I know I have to turn on local cache to save the xml files.
However I don't have an access to do that so is there another way I can save xml file rather than turning on Local cache? like web.config setting? 
Hi,

I do not know what's your thought, but I prefer don't have nuget binaries in the repository, so I deleted all the DLLs and XMLs from the bin folder, I deleted also the "packages" folder, and moved the last non-nuget dll (ImageCruncher.dll) in "libs" folder referencing from that. This way i changed .gitignore file to not include deleted content but maintaining "*.refresh" files. Visual Studio will download and use DLL from nuget and the repository remains clean.
Obviously this is just a different approach and is not strictly necessary but i prefer it. 
Also take note that, this way anyone who wants to use the project must first download dependencies using visual studio or nuget.exe

I also inserted the nuget.config file into the root of the project so that the packages are placed in the correct folder (just for this project) for those people like me who prefer having "packages" folder in another location. Without this file you will see some VS errors at first compilation.

I finally updated WebMarkupMin, JQuery and Bootstrap to the latest versions, modifying the admin.js file accordingly (use of .done() in place of .success())


This is most likely due to my incompetence on how git works, but I am not that keen on putting my Outlook credentials into the Web.config for everyone to see.

So either there is another way to keep and updated that information in Web.config and still keep it private, or perhaps there is another way to implement this, perhaps using some Azure mail service?

//Thomas
Dear @madskristensen ,

Please add RTL support to Lovely MiniBlog.
