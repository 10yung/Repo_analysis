For me running bbandParameters.R fails. 

```r
> # Parameter example for BBands demo
>      
 ###############################################################################
> 
> require(foreach,quietly=TRUE)
> require(iterators)
> require(quantstrat)
> 
> # example parallel initialization for doParallel. this or doMC, or doRedis are 
> # most probably preferable to doSMP
> #require(doParallel)
> #registerDoParallel() # by default number of physical cores -1
> 
> demo('bbands',ask=FALSE)


	demo(bbands)
	---- ~~~~~~

> require(quantstrat)

> suppressWarnings(rm("order_book.bbands",pos=.strategy))

> suppressWarnings(rm("account.bbands","portfolio.bbands",pos=.blotter))

> suppressWarnings(rm("account.st","portfolio.st","stock.str","stratBBands","startDate","initEq",'start_t','end_t'))

> # some things to set up here
> stock.str='IBM' # what are we trying it on

> # we'll pass these 
> SD = 2 # how many standard deviations, traditionally 2

> N = 20 # how many periods for the moving average, traditionally 20

> currency('USD')
[1] "USD"

> stock(stock.str,currency='USD',multiplier=1)
[1] "IBM"

> startDate='2006-12-31'

> initEq=1000000

> portfolio.st='bbands'

> account.st='bbands'

> initPortf(portfolio.st, symbols=stock.str)
[1] "bbands"

> initAcct(account.st,portfolios='bbands')
[1] "bbands"

> initOrders(portfolio=portfolio.st)

> addPosLimit(portfolio.st, stock.str, startDate, 200, 2 ) #set max pos

> # set up parameters
> maType='SMA'

> n = 20

> sdp = 2

> strat.st<-portfolio.st

> # define the strategy
> strategy(strat.st, store=TRUE)

> #one indicator
> add.indicator(strategy = strat.st, 
+               name = "BBands", 
+               arguments = list(HLC = quote(HLC(mktdata)), 
+                                n=n, 
+                                maType=maType, 
+                                sd=sdp 
+                                ), 
+               label='BBands')
[1] "bbands"

> #add signals:
> add.signal(strategy = strat.st,
+            name="sigCrossover",
+            arguments = list(columns=c("Close","up"),
+                             relationship="gt"),
+            label="Cl.gt.UpperBand")
[1] "bbands"

> add.signal(strategy = strat.st,
+            name="sigCrossover",
+            arguments = list(columns=c("Close","dn"),
+                             relationship="lt"),
+            label="Cl.lt.LowerBand")
[1] "bbands"

> add.signal(strategy = strat.st,name="sigCrossover",
+            arguments = list(columns=c("High","Low","mavg"),
+                             relationship="op"),
+            label="Cross.Mid")
[1] "bbands"

> # lets add some rules
> add.rule(strategy = strat.st,name='ruleSignal',
+          arguments = list(sigcol="Cl.gt.UpperBand",
+                           sigval=TRUE,
+                           orderqty=-100, 
+                           ordertype='market',
+                           orderside=NULL,
+                           threshold=NULL,
+                           osFUN=osMaxPos),
+          type='enter')
[1] "bbands"

> add.rule(strategy = strat.st,name='ruleSignal',
+          arguments = list(sigcol="Cl.lt.LowerBand",
+                           sigval=TRUE,
+                           orderqty= 100, 
+                           ordertype='market',
+                           orderside=NULL,
+                           threshold=NULL,
+                           osFUN=osMaxPos),
+          type='enter')
[1] "bbands"

> add.rule(strategy = strat.st,name='ruleSignal',
+          arguments = list(sigcol="Cross.Mid",
+                           sigval=TRUE,
+                           orderqty= 'all',
+                           ordertype='market',
+                           orderside=NULL,
+                           threshold=NULL,
+                           osFUN=osMaxPos),
+          label='exitMid',
+          type='exit')
[1] "bbands"

> #alternately, to exit at the opposite band, the rules would be...
> #add.rule(strategy = strat.st,name='ruleSignal', arguments = list(data=quote(mktdata),sigcol="Lo.gt.UpperBand",sigval=TRUE, orderqty= 'all', ordertype='market', orderside=NULL, threshold=NULL),type='exit')
> #add.rule(strategy = strat.st,name='ruleSignal', arguments = list(data=quote(mktdata),sigcol="Hi.lt.LowerBand",sigval=TRUE, orderqty= 'all', ordertype='market', orderside=NULL, threshold=NULL),type='exit')
> 
> #TODO add thresholds and stop-entry and stop-exit handling to test
> 
> getSymbols(stock.str,from=startDate,index.class=c('POSIXt','POSIXct'), src='yahoo')
[1] "IBM"

> start_t<-Sys.time()

> out<-try(applyStrategy(strategy='bbands' , portfolios='bbands',parameters=list(sd=SD,n=N)) )
[1] "2007-02-27 00:00:00 IBM 100 @ 93.959999"
[1] "2007-03-21 00:00:00 IBM -100 @ 95.360001"
[1] "2007-04-04 00:00:00 IBM -100 @ 96.209999"
[1] "2007-04-13 00:00:00 IBM 100 @ 94.93"
[1] "2007-04-18 00:00:00 IBM -100 @ 94.800003"
[1] "2007-04-19 00:00:00 IBM 100 @ 94.290001"
[1] "2007-04-25 00:00:00 IBM -100 @ 101.459999"
[1] "2007-05-25 00:00:00 IBM 100 @ 105.18"
[1] "2007-06-07 00:00:00 IBM 100 @ 101.800003"
[1] "2007-06-18 00:00:00 IBM -100 @ 105.330002"
[1] "2007-07-06 00:00:00 IBM -100 @ 109.029999"
[1] "2007-07-18 00:00:00 IBM -100 @ 111.080002"
[1] "2007-08-01 00:00:00 IBM 200 @ 112.040001"
[1] "2007-08-31 00:00:00 IBM -100 @ 116.690002"
[1] "2007-09-18 00:00:00 IBM 100 @ 116.629997"
[1] "2007-10-02 00:00:00 IBM -100 @ 118.360001"
[1] "2007-10-04 00:00:00 IBM 100 @ 115.690002"
[1] "2007-10-17 00:00:00 IBM -100 @ 115.779999"
[1] "2007-10-18 00:00:00 IBM 100 @ 114.800003"
[1] "2007-10-19 00:00:00 IBM 100 @ 112.279999"
[1] "2007-11-01 00:00:00 IBM -100 @ 113.650002"
[1] "2007-11-09 00:00:00 IBM 100 @ 100.25"
[1] "2007-11-29 00:00:00 IBM -100 @ 107.5"
[1] "2007-12-07 00:00:00 IBM -100 @ 108.860001"
[1] "2007-12-17 00:00:00 IBM 100 @ 104.529999"
[1] "2007-12-24 00:00:00 IBM -100 @ 111.650002"
[1] "2008-01-02 00:00:00 IBM 100 @ 104.690002"
[1] "2008-01-07 00:00:00 IBM 100 @ 100.050003"
[1] "2008-01-15 00:00:00 IBM -100 @ 101.830002"
[1] "2008-02-04 00:00:00 IBM -100 @ 107.93"
[1] "2008-02-07 00:00:00 IBM 100 @ 102.339996"
[1] "2008-02-26 00:00:00 IBM -100 @ 114.379997"
[1] "2008-03-27 00:00:00 IBM 100 @ 115.519997"
[1] "2008-04-11 00:00:00 IBM -100 @ 116"
[1] "2008-04-14 00:00:00 IBM 100 @ 117.279999"
[1] "2008-04-17 00:00:00 IBM -100 @ 123.080002"
[1] "2008-05-07 00:00:00 IBM 100 @ 124.139999"
[1] "2008-05-14 00:00:00 IBM -100 @ 127.519997"
[1] "2008-05-22 00:00:00 IBM 100 @ 124.699997"
[1] "2008-05-29 00:00:00 IBM -100 @ 129.710007"
[1] "2008-06-05 00:00:00 IBM 100 @ 128.470001"
[1] "2008-06-12 00:00:00 IBM 100 @ 123.849998"
[1] "2008-06-16 00:00:00 IBM -100 @ 126.709999"
[1] "2008-06-27 00:00:00 IBM 100 @ 120.050003"
[1] "2008-07-09 00:00:00 IBM -100 @ 120.400002"
[1] "2008-07-17 00:00:00 IBM -100 @ 126.519997"
[1] "2008-08-12 00:00:00 IBM 100 @ 125.220001"
[1] "2008-08-13 00:00:00 IBM 100 @ 125.800003"
[1] "2008-08-15 00:00:00 IBM -100 @ 126.360001"
[1] "2008-08-19 00:00:00 IBM 100 @ 122.559998"
[1] "2008-09-03 00:00:00 IBM 100 @ 118.339996"
[1] "2008-09-22 00:00:00 IBM -200 @ 116.209999"
[1] "2008-10-02 00:00:00 IBM 100 @ 104.739998"
[1] "2008-10-31 00:00:00 IBM -100 @ 92.970001"
[1] "2008-11-21 00:00:00 IBM 100 @ 74.879997"
[1] "2008-12-04 00:00:00 IBM -100 @ 77.440002"
[1] "2008-12-17 00:00:00 IBM -100 @ 85.839996"
[1] "2008-12-23 00:00:00 IBM 100 @ 80.599998"
[1] "2009-01-05 00:00:00 IBM -100 @ 86.82"
[1] "2009-01-07 00:00:00 IBM -100 @ 87.790001"
[1] "2009-01-15 00:00:00 IBM 200 @ 84.120003"
[1] "2009-01-22 00:00:00 IBM -100 @ 90.07"
[1] "2009-01-27 00:00:00 IBM -100 @ 91.660004"
[1] "2009-02-18 00:00:00 IBM 200 @ 91.510002"
[1] "2009-02-24 00:00:00 IBM 100 @ 86.400002"
[1] "2009-03-02 00:00:00 IBM -100 @ 89.050003"
[1] "2009-03-24 00:00:00 IBM -100 @ 98.300003"
[1] "2009-04-16 00:00:00 IBM 100 @ 101.43"
[1] "2009-04-30 00:00:00 IBM -100 @ 103.209999"
[1] "2009-05-04 00:00:00 IBM -100 @ 106.190002"
[1] "2009-05-08 00:00:00 IBM 200 @ 101.489998"
[1] "2009-06-02 00:00:00 IBM -100 @ 106.830002"
[1] "2009-06-19 00:00:00 IBM 100 @ 105.889999"
[1] "2009-07-06 00:00:00 IBM 100 @ 101.650002"
[1] "2009-07-16 00:00:00 IBM -100 @ 110.639999"
[1] "2009-07-17 00:00:00 IBM -100 @ 115.419998"
[1] "2009-08-17 00:00:00 IBM 100 @ 116.860001"
[1] "2009-09-02 00:00:00 IBM 100 @ 116.089996"
[1] "2009-09-09 00:00:00 IBM -100 @ 116.760002"
[1] "2009-09-17 00:00:00 IBM -100 @ 121.879997"
[1] "2009-09-29 00:00:00 IBM 100 @ 118.809998"
[1] "2009-10-12 00:00:00 IBM -100 @ 127.040001"
[1] "2009-10-19 00:00:00 IBM 100 @ 123.059998"
[1] "2009-11-12 00:00:00 IBM -100 @ 126.260002"
[1] "2009-11-17 00:00:00 IBM -100 @ 128.630005"
[1] "2009-11-30 00:00:00 IBM 200 @ 126.349998"
[1] "2009-12-11 00:00:00 IBM -100 @ 129.679993"
[1] "2009-12-18 00:00:00 IBM 100 @ 127.910004"
[1] "2009-12-29 00:00:00 IBM -100 @ 131.850006"
[1] "2010-01-08 00:00:00 IBM 100 @ 130.850006"
[1] "2010-01-20 00:00:00 IBM -100 @ 130.25"
[1] "2010-01-21 00:00:00 IBM 100 @ 129"
[1] "2010-01-25 00:00:00 IBM 100 @ 126.120003"
[1] "2010-01-29 00:00:00 IBM 100 @ 122.389999"
[1] "2010-02-18 00:00:00 IBM -200 @ 127.809998"
[1] "2010-03-17 00:00:00 IBM -100 @ 127.760002"
[1] "2010-03-22 00:00:00 IBM 100 @ 127.980003"
[1] "2010-03-24 00:00:00 IBM -100 @ 128.529999"
[1] "2010-04-01 00:00:00 IBM 100 @ 128.25"
[1] "2010-04-15 00:00:00 IBM -100 @ 130.889999"
[1] "2010-04-20 00:00:00 IBM -100 @ 129.690002"
[1] "2010-04-21 00:00:00 IBM 200 @ 128.990005"
[1] "2010-05-07 00:00:00 IBM 100 @ 122.099998"
[1] "2010-05-13 00:00:00 IBM -100 @ 131.479996"
[1] "2010-06-17 00:00:00 IBM -100 @ 130.979996"
[1] "2010-06-28 00:00:00 IBM 100 @ 128.979996"
[1] "2010-08-25 00:00:00 IBM 100 @ 125.269997"
[1] "2010-08-27 00:00:00 IBM 100 @ 124.730003"
[1] "2010-09-07 00:00:00 IBM -200 @ 125.949997"
[1] "2010-09-21 00:00:00 IBM -100 @ 131.979996"
[1] "2010-10-20 00:00:00 IBM 100 @ 139.070007"
[1] "2010-11-01 00:00:00 IBM -100 @ 143.320007"
[1] "2010-11-17 00:00:00 IBM 100 @ 141.949997"
[1] "2010-12-01 00:00:00 IBM 100 @ 144.410004"
[1] "2010-12-02 00:00:00 IBM -100 @ 145.179993"
[1] "2010-12-30 00:00:00 IBM -100 @ 146.669998"
[1] "2011-01-07 00:00:00 IBM -100 @ 147.929993"
[1] "2011-02-23 00:00:00 IBM 200 @ 160.179993"
[1] "2011-03-02 00:00:00 IBM 100 @ 160.160004"
[1] "2011-03-04 00:00:00 IBM -100 @ 161.830002"
[1] "2011-03-10 00:00:00 IBM -100 @ 162.020004"
[1] "2011-03-11 00:00:00 IBM 100 @ 162.429993"
[1] "2011-03-17 00:00:00 IBM 100 @ 154.179993"
[1] "2011-03-25 00:00:00 IBM -100 @ 162.179993"
[1] "2011-04-25 00:00:00 IBM -100 @ 167.669998"
[1] "2011-05-03 00:00:00 IBM -100 @ 172.869995"
[1] "2011-05-12 00:00:00 IBM 200 @ 172.240005"
[1] "2011-06-02 00:00:00 IBM 100 @ 166.089996"
[1] "2011-06-21 00:00:00 IBM -100 @ 166.220001"
[1] "2011-06-29 00:00:00 IBM -100 @ 170.539993"
[1] "2011-07-20 00:00:00 IBM -100 @ 183.649994"
[1] "2011-08-02 00:00:00 IBM 200 @ 178.050003"
[1] "2011-08-09 00:00:00 IBM 100 @ 170.610001"
[1] "2011-08-11 00:00:00 IBM 100 @ 166.729996"
[1] "2011-08-29 00:00:00 IBM -200 @ 172.619995"
[1] "2011-10-11 00:00:00 IBM -100 @ 185"
[1] "2011-10-17 00:00:00 IBM -100 @ 186.589996"
[1] "2011-10-19 00:00:00 IBM 200 @ 177.389999"
[1] "2011-11-25 00:00:00 IBM 100 @ 177.059998"
[1] "2011-12-01 00:00:00 IBM -100 @ 189.449997"
[1] "2012-01-23 00:00:00 IBM -100 @ 189.979996"
[1] "2012-02-16 00:00:00 IBM 100 @ 193.020004"
[1] "2012-02-24 00:00:00 IBM -100 @ 197.759995"
[1] "2012-03-06 00:00:00 IBM -100 @ 197.259995"
[1] "2012-04-05 00:00:00 IBM 200 @ 205.470001"
[1] "2012-04-11 00:00:00 IBM 100 @ 202.580002"
[1] "2012-04-17 00:00:00 IBM -100 @ 207.449997"
[1] "2012-04-19 00:00:00 IBM 100 @ 199.509995"
[1] "2012-04-27 00:00:00 IBM -100 @ 206.809998"
[1] "2012-06-04 00:00:00 IBM 100 @ 188.539993"
[1] "2012-06-08 00:00:00 IBM -100 @ 195.139999"
[1] "2012-07-11 00:00:00 IBM 100 @ 185.25"
[1] "2012-07-20 00:00:00 IBM -100 @ 192.449997"
[1] "2012-08-31 00:00:00 IBM 100 @ 194.850006"
[1] "2012-09-07 00:00:00 IBM -100 @ 199.5"
[1] "2012-09-12 00:00:00 IBM -100 @ 203.770004"
[1] "2012-10-11 00:00:00 IBM 100 @ 205.759995"
[1] "2012-10-18 00:00:00 IBM 100 @ 194.960007"
[1] "2012-11-26 00:00:00 IBM -100 @ 192.880005"
[1] "2012-12-19 00:00:00 IBM -100 @ 195.080002"
[1] "2012-12-24 00:00:00 IBM 100 @ 192.399994"
[1] "2013-01-03 00:00:00 IBM -100 @ 195.270004"
[1] "2013-01-07 00:00:00 IBM 100 @ 193.139999"
[1] "2013-01-23 00:00:00 IBM -100 @ 204.720001"
[1] "2013-02-08 00:00:00 IBM 100 @ 201.679993"
[1] "2013-03-05 00:00:00 IBM -100 @ 206.529999"
[1] "2013-03-15 00:00:00 IBM -100 @ 214.919998"
[1] "2013-03-28 00:00:00 IBM 200 @ 213.300003"
[1] "2013-04-19 00:00:00 IBM 100 @ 190"
[1] "2013-05-06 00:00:00 IBM -100 @ 202.779999"
[1] "2013-06-13 00:00:00 IBM 100 @ 203.770004"
[1] "2013-06-19 00:00:00 IBM -100 @ 201.940002"
[1] "2013-06-21 00:00:00 IBM 100 @ 195.460007"
[1] "2013-07-01 00:00:00 IBM 100 @ 191.279999"
[1] "2013-07-18 00:00:00 IBM -200 @ 197.990005"
[1] "2013-08-07 00:00:00 IBM 100 @ 188.559998"
[1] "2013-09-10 00:00:00 IBM -100 @ 186.600006"
[1] "2013-09-12 00:00:00 IBM -100 @ 190.729996"
[1] "2013-09-19 00:00:00 IBM -100 @ 193.389999"
[1] "2013-09-30 00:00:00 IBM 200 @ 185.179993"
[1] "2013-10-08 00:00:00 IBM 100 @ 178.720001"
[1] "2013-10-17 00:00:00 IBM -100 @ 174.830002"
[1] "2013-10-18 00:00:00 IBM 100 @ 173.779999"
[1] "2013-10-30 00:00:00 IBM -100 @ 180.149994"
[1] "2013-12-24 00:00:00 IBM -100 @ 183.220001"
[1] "2014-01-15 00:00:00 IBM 100 @ 187.740005"
[1] "2014-01-27 00:00:00 IBM 100 @ 177.899994"
[1] "2014-02-04 00:00:00 IBM 100 @ 172.839996"
[1] "2014-02-12 00:00:00 IBM -200 @ 180.240005"
[1] "2014-03-26 00:00:00 IBM -100 @ 192.619995"
[1] "2014-04-02 00:00:00 IBM -100 @ 193.550003"
[1] "2014-04-21 00:00:00 IBM 200 @ 192.270004"
[1] "2014-05-16 00:00:00 IBM 100 @ 187.059998"
[1] "2014-05-21 00:00:00 IBM 100 @ 186.389999"
[1] "2014-06-09 00:00:00 IBM -200 @ 186.220001"
[1] "2014-06-12 00:00:00 IBM 100 @ 181.220001"
[1] "2014-06-20 00:00:00 IBM -100 @ 181.550003"
[1] "2014-07-03 00:00:00 IBM -100 @ 188.529999"
[1] "2014-07-17 00:00:00 IBM -100 @ 192.490005"
[1] "2014-08-04 00:00:00 IBM 200 @ 189.639999"
[1] "2014-08-08 00:00:00 IBM 100 @ 186.630005"
[1] "2014-08-20 00:00:00 IBM -100 @ 190.100006"
[1] "2014-09-19 00:00:00 IBM -100 @ 194"
[1] "2014-09-24 00:00:00 IBM 100 @ 192.309998"
[1] "2014-09-26 00:00:00 IBM 100 @ 190.059998"
[1] "2014-10-02 00:00:00 IBM 100 @ 186.910004"
[1] "2014-11-17 00:00:00 IBM -200 @ 164.160004"
[1] "2014-11-21 00:00:00 IBM 100 @ 160.919998"
[1] "2014-11-25 00:00:00 IBM -100 @ 161.759995"
[1] "2014-12-04 00:00:00 IBM -100 @ 164.050003"
[1] "2014-12-09 00:00:00 IBM 100 @ 162.990005"
[1] "2014-12-11 00:00:00 IBM 100 @ 161.070007"
[1] "2014-12-15 00:00:00 IBM 100 @ 153.059998"
[1] "2014-12-22 00:00:00 IBM -200 @ 161.440002"
[1] "2015-01-22 00:00:00 IBM 100 @ 155.389999"
[1] "2015-01-27 00:00:00 IBM -100 @ 153.669998"
[1] "2015-01-29 00:00:00 IBM 100 @ 155.479996"
[1] "2015-02-04 00:00:00 IBM -100 @ 156.960007"
[1] "2015-02-17 00:00:00 IBM -100 @ 160.960007"
[1] "2015-03-03 00:00:00 IBM 100 @ 161.029999"
[1] "2015-03-12 00:00:00 IBM 100 @ 157.979996"
[1] "2015-03-16 00:00:00 IBM 100 @ 157.080002"
[1] "2015-03-19 00:00:00 IBM -200 @ 159.809998"
[1] "2015-04-21 00:00:00 IBM -100 @ 164.259995"
[1] "2015-04-24 00:00:00 IBM -100 @ 169.779999"
[1] "2015-05-13 00:00:00 IBM 200 @ 172.279999"
[1] "2015-05-27 00:00:00 IBM 100 @ 172"
[1] "2015-06-01 00:00:00 IBM 100 @ 170.179993"
[1] "2015-06-24 00:00:00 IBM -200 @ 166.970001"
[1] "2015-06-30 00:00:00 IBM 100 @ 162.660004"
[1] "2015-07-13 00:00:00 IBM -100 @ 169.380005"
[1] "2015-07-17 00:00:00 IBM -100 @ 172.509995"
[1] "2015-07-22 00:00:00 IBM 100 @ 160.350006"
[1] "2015-08-24 00:00:00 IBM 100 @ 143.470001"
[1] "2015-09-16 00:00:00 IBM -100 @ 148.410004"
[1] "2015-09-29 00:00:00 IBM 100 @ 142.470001"
[1] "2015-10-01 00:00:00 IBM -100 @ 143.589996"
[1] "2015-10-08 00:00:00 IBM -100 @ 152.279999"
[1] "2015-10-21 00:00:00 IBM 100 @ 140.919998"
[1] "2015-10-28 00:00:00 IBM 100 @ 140.830002"
[1] "2015-11-16 00:00:00 IBM 100 @ 133.710007"
[1] "2015-11-23 00:00:00 IBM -200 @ 138.460007"
[1] "2015-12-21 00:00:00 IBM 100 @ 135.5"
[1] "2015-12-23 00:00:00 IBM -100 @ 138.539993"
[1] "2016-01-08 00:00:00 IBM 100 @ 131.630005"
[1] "2016-01-14 00:00:00 IBM 100 @ 132.910004"
[1] "2016-02-05 00:00:00 IBM -200 @ 128.570007"
[1] "2016-02-19 00:00:00 IBM -100 @ 133.080002"
[1] "2016-03-18 00:00:00 IBM -100 @ 147.089996"
[1] "2016-04-20 00:00:00 IBM 100 @ 146.110001"
[1] "2016-04-22 00:00:00 IBM 100 @ 148.5"
[1] "2016-05-26 00:00:00 IBM -100 @ 152.440002"
[1] "2016-06-14 00:00:00 IBM 100 @ 151.059998"
[1] "2016-06-24 00:00:00 IBM -100 @ 146.589996"
[1] "2016-06-27 00:00:00 IBM 100 @ 143.5"
[1] "2016-07-15 00:00:00 IBM -100 @ 159.779999"
[1] "2016-08-12 00:00:00 IBM -100 @ 161.949997"
[1] "2016-08-17 00:00:00 IBM 200 @ 160.440002"
[1] "2016-08-25 00:00:00 IBM 100 @ 158.630005"
[1] "2016-09-07 00:00:00 IBM -100 @ 161.639999"
[1] "2016-09-12 00:00:00 IBM 100 @ 158.289993"
[1] "2016-09-14 00:00:00 IBM 100 @ 154.050003"
[1] "2016-09-29 00:00:00 IBM -200 @ 158.110001"
[1] "2016-10-19 00:00:00 IBM 100 @ 151.259995"
[1] "2016-10-24 00:00:00 IBM 100 @ 150.570007"
[1] "2016-10-31 00:00:00 IBM -200 @ 153.690002"
[1] "2016-11-11 00:00:00 IBM -100 @ 161.270004"
[1] "2016-12-02 00:00:00 IBM 100 @ 160.020004"
[1] "2016-12-09 00:00:00 IBM -100 @ 166.520004"
[1] "2016-12-14 00:00:00 IBM -100 @ 168.509995"
[1] "2017-01-03 00:00:00 IBM 200 @ 167.190002"
[1] "2017-01-09 00:00:00 IBM -100 @ 167.649994"
[1] "2017-01-11 00:00:00 IBM 100 @ 167.75"
[1] "2017-01-23 00:00:00 IBM -100 @ 171.029999"
[1] "2017-03-07 00:00:00 IBM 100 @ 180.380005"
[1] "2017-03-10 00:00:00 IBM 100 @ 177.830002"
[1] "2017-03-22 00:00:00 IBM 100 @ 174.779999"
[1] "2017-04-06 00:00:00 IBM -200 @ 172.449997"
[1] "2017-04-11 00:00:00 IBM 100 @ 170.580002"
[1] "2017-04-17 00:00:00 IBM 100 @ 171.100006"
[1] "2017-06-02 00:00:00 IBM -200 @ 152.050003"
[1] "2017-06-12 00:00:00 IBM -100 @ 155.179993"
[1] "2017-06-19 00:00:00 IBM -100 @ 154.839996"
[1] "2017-06-30 00:00:00 IBM 200 @ 153.830002"
[1] "2017-07-07 00:00:00 IBM 100 @ 152.940002"
[1] "2017-07-13 00:00:00 IBM -100 @ 153.630005"
[1] "2017-07-20 00:00:00 IBM 100 @ 147.660004"
[1] "2017-08-21 00:00:00 IBM 100 @ 140.330002"
[1] "2017-08-24 00:00:00 IBM -200 @ 142.940002"
[1] "2017-09-13 00:00:00 IBM -100 @ 145.990005"
[1] "2017-09-29 00:00:00 IBM 100 @ 145.080002"
[1] "2017-10-10 00:00:00 IBM -100 @ 148.5"
[1] "2017-10-18 00:00:00 IBM 100 @ 159.529999"
[1] "2017-10-19 00:00:00 IBM -100 @ 160.899994"
[1] "2017-11-06 00:00:00 IBM 100 @ 150.839996"
[1] "2017-12-04 00:00:00 IBM -100 @ 156.460007"
[1] "2017-12-18 00:00:00 IBM 100 @ 153.330002"
[1] "2018-01-04 00:00:00 IBM -100 @ 161.699997"
[1] "2018-01-31 00:00:00 IBM 100 @ 163.699997"
[1] "2018-02-05 00:00:00 IBM 100 @ 152.529999"
[1] "2018-02-27 00:00:00 IBM -100 @ 156.550003"
[1] "2018-03-13 00:00:00 IBM -100 @ 159.320007"
[1] "2018-03-20 00:00:00 IBM 100 @ 156.199997"
[1] "2018-03-23 00:00:00 IBM 100 @ 148.889999"
[1] "2018-04-11 00:00:00 IBM -100 @ 155.360001"
[1] "2018-04-18 00:00:00 IBM -100 @ 148.789993"
[1] "2018-04-19 00:00:00 IBM 100 @ 147.699997"
[1] "2018-04-23 00:00:00 IBM 100 @ 145.860001"
[1] "2018-05-17 00:00:00 IBM -100 @ 144.5"
[1] "2018-05-30 00:00:00 IBM 100 @ 142.619995"
[1] "2018-06-06 00:00:00 IBM -100 @ 144.710007"
[1] "2018-06-26 00:00:00 IBM 100 @ 139.080002"
[1] "2018-06-28 00:00:00 IBM 100 @ 140.039993"
[1] "2018-07-09 00:00:00 IBM -200 @ 144.389999"
[1] "2018-07-20 00:00:00 IBM -100 @ 146.350006"
[1] "2018-07-31 00:00:00 IBM 100 @ 144.929993"
[1] "2018-09-14 00:00:00 IBM -100 @ 148.330002"
[1] "2018-09-20 00:00:00 IBM -100 @ 151.149994"
[1] "2018-10-08 00:00:00 IBM 200 @ 148.389999"
[1] "2018-10-11 00:00:00 IBM 100 @ 139.020004"
[1] "2018-10-18 00:00:00 IBM 100 @ 130.550003"
[1] "2018-11-20 00:00:00 IBM -200 @ 117.199997"
[1] "2018-12-18 00:00:00 IBM 100 @ 116.650002"
[1] "2018-12-21 00:00:00 IBM 100 @ 110.940002"
[1] "2019-01-07 00:00:00 IBM -200 @ 118.150002"
[1] "2019-01-24 00:00:00 IBM -100 @ 132.529999"
[1] "2019-03-07 00:00:00 IBM 100 @ 135.360001"
[1] "2019-04-02 00:00:00 IBM -100 @ 143"
[1] "2019-04-18 00:00:00 IBM 100 @ 140.330002"
[1] "2019-05-10 00:00:00 IBM 100 @ 135.320007"
[1] "2019-05-14 00:00:00 IBM 100 @ 133.309998"
[1] "2019-06-06 00:00:00 IBM -200 @ 132.220001"
[1] "2019-07-16 00:00:00 IBM -100 @ 143.529999"
[1] "2019-07-19 00:00:00 IBM -100 @ 149.679993"
[1] "2019-08-05 00:00:00 IBM 200 @ 140.759995"
[1] "2019-08-12 00:00:00 IBM 100 @ 133.669998"
[1] "2019-08-15 00:00:00 IBM 100 @ 131.919998"
[1] "2019-08-30 00:00:00 IBM -200 @ 135.529999"
[1] "2019-09-06 00:00:00 IBM -100 @ 140.570007"
[1] "2019-10-03 00:00:00 IBM 100 @ 142.020004"
[1] "2019-10-09 00:00:00 IBM 100 @ 139.669998"
[1] "2019-10-14 00:00:00 IBM -100 @ 142.039993"
[1] "2019-10-18 00:00:00 IBM 100 @ 134.089996"

> # look at the order book
> #getOrderBook('bbands')
> end_t<-Sys.time()

> print("strat execution time:")
[1] "strat execution time:"

> print(end_t-start_t)
Time difference of 4.697281 secs

> start_t<-Sys.time()

> updatePortf(Portfolio='bbands',Dates=paste('::',as.Date(Sys.time()),sep=''))
[1] "bbands"

> end_t<-Sys.time()

> print("updatePortf execution time:")
[1] "updatePortf execution time:"

> print(end_t-start_t)
Time difference of 0.04851031 secs

> chart.Posn(Portfolio='bbands',Symbol=stock.str)

> plot(add_BBands(on=1,sd=SD,n=N))

> ###############################################################################
> # R (http://r-project.org/) Quantitative Strategy Model Framework
> #
> # Copyright (c) 2009-2012
> # Peter Carl, Dirk Eddelbuettel, Brian G. Peterson, Jeffrey Ryan, and Joshua Ulrich 
> #
> # This library is distributed under the terms of the GNU Public License (GPL)
> # for full details see the file COPYING
> #
> # $Id$
> #
> ###############################################################################
Warning message:
In .updatePosPL(Portfolio = pname, Symbol = as.character(symbol),  :
  Could not parse ::2019-10-28 as ISO8601 string, or one/bothends of the range were outside the available prices: 2007-01-03/2019-10-25. Using all data instead.
> strategy.st='bbands'
> 
> ### User Set up pf parameter ranges to test
> .nlist  = 10:40
> .sdlist = 1:4
> 
> # number of random samples of the parameter distribution to use for random run
> .nsamples = 10 
> 
> add.distribution(strategy.st,
+                  paramset.label = 'BBparams',
+                  component.type = 'indicator',
+                  component.label = 'BBands', #this is the label given to the indicator in the strat
+                  variable = list(n = .nlist),
+                  label = 'nFAST'
+ )
[1] "bbands"
> 
> add.distribution(strategy.st,
+                  paramset.label = 'BBparams',
+                  component.type = 'indicator',
+                  component.label = 'BBands', #this is the label given to the indicator in the strat
+                  variable = list(sd = .sdlist),
+                  label = 'nSLOW'
+ )
[1] "bbands"
> 
> 
> results <- apply.paramset(strategy.st, 
+                           paramset.label='BBparams', 
+                           portfolio.st=portfolio.st, 
+                           account.st=account.st, 
+                           nsamples=.nsamples, 
+                           verbose=TRUE)
numValues: 10, numResults: 0, stopped: TRUE
got results for task 1
numValues: 10, numResults: 1, stopped: TRUE
returning status FALSE
got results for task 2
numValues: 10, numResults: 2, stopped: TRUE
returning status FALSE
got results for task 3
numValues: 10, numResults: 3, stopped: TRUE
returning status FALSE
got results for task 4
numValues: 10, numResults: 4, stopped: TRUE
returning status FALSE
got results for task 5
numValues: 10, numResults: 5, stopped: TRUE
returning status FALSE
got results for task 6
numValues: 10, numResults: 6, stopped: TRUE
returning status FALSE
got results for task 7
numValues: 10, numResults: 7, stopped: TRUE
returning status FALSE
got results for task 8
numValues: 10, numResults: 8, stopped: TRUE
returning status FALSE
got results for task 9
numValues: 10, numResults: 9, stopped: TRUE
returning status FALSE
got results for task 10
numValues: 10, numResults: 10, stopped: TRUE
first call to combine function
evaluating call object to combine results:
  fun(result.1, result.2, result.3, result.4, result.5, result.6, 
    result.7, result.8, result.9, result.10)
returning status TRUE
> 
> stats <- results$tradeStats
> 
> print(stats)
NULL
> 
> 
> 
> ##### PLACE THIS BLOCK AT END OF DEMO SCRIPT ################### 
> # book  = getOrderBook(port)
> # stats = tradeStats(port)
> # rets  = PortfReturns(acct)
> ################################################################
> 
> ###############################################################################
> # R (http://r-project.org/) Quantitative Strategy Model Framework
> #
> # Copyright (c) 2009-2012
> # Peter Carl, Dirk Eddelbuettel, Brian G. Peterson, Jeffrey Ryan, and Joshua Ulrich 
> #
> # This library is distributed under the terms of the GNU Public License (GPL)
> # for full details see the file COPYING
> #
> # $Id: bbands.R 1097 2012-07-01 00:30:39Z braverock $
> #
> ###############################################################################
> print(results)
<environment: 0x7f15cd51f788>
> print(results$error)
[[1]]
<simpleError in mget(symbols, Portfolio$symbols): second argument must be an environment>

[[2]]
<simpleError in mget(symbols, Portfolio$symbols): second argument must be an environment>

[[3]]
<simpleError in mget(symbols, Portfolio$symbols): second argument must be an environment>

[[4]]
<simpleError in mget(symbols, Portfolio$symbols): second argument must be an environment>

[[5]]
<simpleError in mget(symbols, Portfolio$symbols): second argument must be an environment>

[[6]]
<simpleError in mget(symbols, Portfolio$symbols): second argument must be an environment>

[[7]]
<simpleError in mget(symbols, Portfolio$symbols): second argument must be an environment>

[[8]]
<simpleError in mget(symbols, Portfolio$symbols): second argument must be an environment>

[[9]]
<simpleError in mget(symbols, Portfolio$symbols): second argument must be an environment>

[[10]]
<simpleError in mget(symbols, Portfolio$symbols): second argument must be an environment>
```
De Prado (https://www.amazon.com/Advances-Financial-Machine-Learning-Marcos/dp/1119482089) introduces the Triple Barrier Method concept for labeling observations in a potential ML model for time series. The 3 barriers are 2 horizontal bars (representing profit-taking and stop-loss prices) and one vertical bar (representing an expiration timespan, ie. x number of bars). Where the top horizontal bar is touched first, the observation gets a label of +1. If the lower horizontal bar is touched first, the observation gets a label of -1. If the vertical bar is touched first, De Prado suggests 2 options...either give the observation the sign of the return or a zero. Your choice should depend on the problem you are trying to solve. 

De Prado says the output from the function should be a dataframe containing the timestamps at which any barrier was touched. De Prado also mentions 8 possible configurations of the "barrier triplet" in which the barriers are enabled or disabled reflecting different objectives and constraints. For our replication of the method, we should consider all configurations, some of which share some overlap with the trading strategy posed by Olsen et al in https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2951348.

There could be a few applications of this method in `quantstrat` but our initial focus will be for extending it to signal analysis for any periodicity.

TODO: Add more info?
Liberally edited from a prior email from @braverock: 

"Survival models measure the probability that some event 
transition will happen in the future.

For signal analysis, the transitions would likely be trading relevant 
things like pullbacks (so you could us resting limits), up x%, down x%, 
etc. within some specific time horizon.

This is called a 'competing risks' model, appropriately enough.

Survival models also have a set of 'progression' states (they were 
developed for modeling disease progression) that could tie up-1%, up-2% 
etc states together.

Maybe we can get it into 
quantstrat eventually."
In my trading strategies class, I have been trying to demonstrate Walk Forward Efficiency (WFE), as discussed in Ch 11 of Pardo's book, which is calculated by dividing the annual Net P/L from the OOS test period by that from the preceding optimized training period.

I am running a three-year optimization, followed by a one-year test period, and I am able to determine the annualized Net P/L from the optimized training period from `results$20120103T000000.20141231T000000$apply.paramset$tradeStats`, by locating the highest Net P/L value and dividing by three.

However, I am not able to find the `tradeStats` for the corresponding OOS test.  The best I've been able to find are the `tradeStats` for the entire three-year test period which is formed by appending each one-year period to the previous (so, three years total).  I can get the Net P/L from `results$tradeStats$Net.Trading.PL` and then divide by three, but this is not going to be as informative as calculating the WFE over each train/test interval.  Is there some way to retrieve each individual test period `tradeStats`?  I've been looking through all the environments generated by `walk.forward(.)` and data contained within, but to no avail.

Below is the code I used (again, the simple Bollinger Bands example), with some commentary added.  

```
library(quantstrat)

stock.st = c("SPY")
currency("USD")
stock(stock.st, currency="USD",multiplier=1)
Sys.setenv(TZ="UTC") 
initDate = '2011-12-31'
startDate = '2012-01-01'
endDate = '2017-12-31'    
initEq=1e6
tradeSize = initEq/10
getSymbols(stock.st,from=startDate,to=endDate,index.class="POSIXct",adjust=T)

strat.st <- "bbands"
suppressWarnings(rm.strat(strat.st))
strategy(strat.st, store=TRUE)

add.indicator(strat.st, name = "BBands",
              arguments = list(HLC = quote(HLC(mktdata)), maType='SMA'), label='BBands')

add.signal(strat.st, name="sigCrossover",
           arguments=list(columns=c("Close","up"),relationship="gt"),
           label="Cl.gt.UpperBand")

add.signal(strat.st, name="sigCrossover",
           arguments=list(columns=c("Close","dn"),relationship="lt"),
           label="Cl.lt.LowerBand")

add.signal(strat.st, name="sigCrossover",
           arguments=list(columns=c("High","Low","mavg"),relationship="op"),
           label="Cross.Mid")

add.rule(strategy = strat.st, name='ruleSignal',
         arguments=list(sigcol="Cl.gt.UpperBand",sigval=TRUE, orderqty=-100,
                        ordertype='market', orderside=NULL, threshold=NULL),
         type='enter', label = "Enter.Short")

add.rule(strategy = strat.st, name='ruleSignal',
         arguments=list(sigcol="Cl.lt.LowerBand",sigval=TRUE, orderqty=100,
                        ordertype='market', orderside=NULL, threshold=NULL),
         type='enter', label = "Enter.Long")

add.rule(strategy = strat.st, name='ruleSignal',
         arguments=list(sigcol="Cross.Mid",sigval=TRUE, orderqty= 'all',
                        ordertype='market', orderside=NULL, threshold=NULL),
         type='exit', label = "Exit.All")

add.distribution(strat.st,
                 paramset.label = 'BBOPT',
                 component.type = 'indicator',
                 component.label = 'BBands',
                 variable = list(n = seq(10,30,by=10)),     # 2 steps total
                 label = 'n'
)

add.distribution(strat.st,
                 paramset.label = 'BBOPT',
                 component.type = 'indicator',
                 component.label = 'BBands',
                 variable = list(sd = seq(1,3,by=1)),    # 2 steps total
                 label = 'sd'
)

suppressWarnings(rm.strat("opt"))
initPortf(name="opt", stock.st, initDate=initDate)
initAcct(name="opt", portfolios="opt",
         initDate=initDate, initEq=initEq)
initOrders(portfolio="opt", initDate=initDate)

# These will also be used after running WFA, so 
# define once here:
yrsTrain <- 3   # Years in each train/optimization period     
yrsTest <- 1    # Years in each test/OOS period

results <- walk.forward(
  strategy.st=strat.st,
  paramset.label='BBOPT',
  portfolio.st="opt",
  account.st="opt",
  period='years',
  k.training=yrsTrain,
  k.testing=yrsTest,
  nsamples=0,
  audit.prefix='wfa',
  anchored=FALSE,
  verbose=TRUE,
  savewf=TRUE
)

# Now, let's check the Walk Forward Efficiency for the objective,
# namely annual Net Trading P/L (default).  As each training period 
# is three years, we will need to divide the figure by three to get the 
# mean annual Net Trading P/L (later).  
# This is an attempt to demonstrate the approach discussed in Pardo, Ch 11. 

# Training data are stored in the following environments:
tr1 <- results$`20120103T000000.20141231T000000`
tr2 <- results$`20130102T000000.20151231T000000`
tr3 <- results$`20140102T000000.20161230T000000`

# Now, focusing on the first training period, we can get the 
# index of the optimized training period, as follows:
(optComboIdx <- tr1$testing.param.combo.idx)    # Get 6

# Next, we can locate the trade stats for the optimized
# training run, as follows (this works, as long as the
# rows of trainStats are in numerical order - see row numbers):

trainStats <- tr1$apply.paramset$tradeStats
optTrainStats <- trainStats[optComboIdx, ]

# Now, get the annual (averaged) Net P/L for both optimized
# training and OOS test periods.  We can get the annualized
# value as follows:
annNetTradePL.train <- optTrainStats$Net.Trading.PL/yrsTrain

# Now, how do we get the test trade stats for the same period? 
# This is the issue.  Without being able to get the test run results
# corresponding to each optimized training backtest, the best
# we can do is take the mean of the Net Trading P/L over the
# entire combined three-year test period, but this leaves 
# something to be desired.  We really should be able to get the 
# Net Trading P/L for each individual test period.

# Note: We can get the total number of test runs, in general from
# results$testing.parameters:

annNetTradePL.test <- results$tradeStats$Net.Trading.PL/(yrsTest * 
                          nrow(results$testing.parameters))

# The WFE is then:
(wfeNetTradePl <- annNetTradePL.test/annNetTradePL.train)

# The result is 76.3%, which is above the 75% threshold 
# recommended by Pardo.

# Next step would be to repeat the process for tr2 and tr3.
```
Allows to fix the position limit in percentage of the current portfolio equity. Also I didn't quite understood, why I cannot pass the tests at package check, but can do it manually. I'll be happy to contribute, I use your packages at my every day work. Please write me any questions.
I am getting the following err on apply.paramset():

> Error in if (nrow(results$tradeStats) > 0 && nrow(results$tradeStats) ==  : 
  missing value where TRUE/FALSE needed

```
#Load libraries
library(quantstrat)
library(lubridate)
library(dplyr)

#Run multi cores
library(parallel)
library(doMC)
registerDoMC(cores = detectCores())

#source functions
source("home/alan/R finance/chartFunction.R")

#Set currency and timezone
Sys.setenv(TZ='UTC')
currency("BRL")

#set paramenters to download data and for setting up account
start_date <- ymd("2017-01-01")
end_date <- ymd("2018-06-28")
init_date <- ymd("2016-12-31")
init_equity <- "6000"
stock_string <- "BBDC4.SA"

#Download and clean data
getSymbols(Symbols = stock_string, src = "yahoo", from = start_date, to = end_date, adjust =TRUE)
i <- get(stock_string)[,4]!=0
assign(stock_string, get(stock_string)[i])

#Define setting for strategy
portfolio.st <- "basic_portfolio"
account.st <- "basic_account"
strategy.st <- "OBV_strat"

#Clear hipothetical previous runs
rm.strat(portfolio.st)
rm.strat(account.st)

#Strategy setup
stock(stock_string, currency = "BRL", multiplier = 1) #Define currency for stock
initPortf(name = portfolio.st, symbols = stock_string, initDate = init_date)
initAcct(name = account.st, portfolios = portfolio.st, initDate = init_date, initEq =init_equity)
initOrders(portfolio.st, stock_string, init_date)
strategy(strategy.st, store = TRUE)

#Add indicators
nn=12
sma_string <- paste0("sma",nn,"_obv")
add.indicator(strategy.st, name = "OBV", arguments = list(price = quote(Cl(mktdata)), volume = quote(Vo(mktdata))), label = "obv")
add.indicator(strategy.st, name = "SMA", arguments = list(x = quote(mktdata$obv), n=nn), label =sma_string)

#Add Signals
add.signal(strategy.st, name = "sigCrossover", arguments = list(columns = c("obv", sma_string), relationship = "gt"), label = "long")
add.signal(strategy.st, name = "sigCrossover", arguments = list(columns = c("obv", sma_string), relationship = "lt"), label = "short")

#Add rules for entering positions
#enter long position
add.rule(strategy.st, 
         name = "ruleSignal", 
         arguments = list(sigcol = "long",
                          sigval = TRUE,
                          orderqty = 100,
                          ordertype = "market",
                          orderside = "long",
                          #threshold = 0.0005,
                          #prefer = "Open",
                          TxnFees = -.8,
                          replace = FALSE),
         type = "enter",
         label = "EnterLong")

#enter short position
add.rule(strategy.st,
         name = "ruleSignal",
         arguments = list(sigcol = "short",
                          sigval = TRUE,
                          orderqty = -100,
                          ordertype = "market",
                          #threshold = -0.0005,
                          orderside = "short", 
                          replace = FALSE, 
                          TxnFees = -.8), 
                          #prefer = "Open"),
         type = "enter",
         label = "EnterShort")

#Add rules for exiting opened postions
#exit long positions
add.rule(strategy.st, 
         name = "ruleSignal", 
         arguments = list(sigcol = "short", 
                          sigval = TRUE, 
                          orderside = "long", 
                          ordertype = "market", 
                          orderqty = "all", 
                          TxnFees = -.8, 
                          replace = TRUE), 
         type = "exit", 
         label = "ExitLong")

#exit short positions
add.rule(strategy.st, 
         name = "ruleSignal", 
         arguments = list(sigcol = "long", 
                          sigval = TRUE, 
                          orderside = "short", 
                          ordertype = "market", 
                          orderqty = "all", 
                          TxnFees = -.8, 
                          replace = TRUE), 
         type = "exit", 
         label = "ExitShort")

#Add Distribution
.nSMA <- c(4,8,12,16,20,26,32)
add.distribution(strategy.st,
                 paramset.label = "SMA",
                 component.type = "indicator",
                 component.label = sma_string,
                 variable = list(n = .nSMA),
                 label = "nSMA")

#Apply paramset
apply.paramset(strategy.st,
               paramset.label = "SMA",
               portfolio.st = portfolio.st,
               account.st = account.st)
```
>Error in if (nrow(results$tradeStats) > 0 && nrow(results$tradeStats) ==  : 
  missing value where TRUE/FALSE needed``` 

```
sessionInfo()

```
>R version 3.4.4 (2018-03-15) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 18.04 LTS  Matrix products: default BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1 LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1  locale:  [1] LC_CTYPE=pt_BR.UTF-8       LC_NUMERIC=C                [3] LC_TIME=pt_BR.UTF-8        LC_COLLATE=en_US.UTF-8      [5] LC_MONETARY=pt_BR.UTF-8    LC_MESSAGES=en_US.UTF-8     [7] LC_PAPER=pt_BR.UTF-8       LC_NAME=C                   [9] LC_ADDRESS=C               LC_TELEPHONE=C             [11] LC_MEASUREMENT=pt_BR.UTF-8 LC_IDENTIFICATION=C         attached base packages: [1] parallel  stats     graphics  grDevices utils     datasets  [7] methods   base       other attached packages:  [1] doMC_1.3.5                   iterators_1.0.9               [3] dplyr_0.7.5                  lubridate_1.7.4               [5] quantstrat_0.14.6            foreach_1.4.4                 [7] blotter_0.14.2               PerformanceAnalytics_1.5.2.2  [9] FinancialInstrument_1.3.0    quantmod_0.4-13              [11] TTR_0.23-3                   xts_0.10-2                   [13] zoo_1.8-2                     loaded via a namespace (and not attached):  [1] Rcpp_0.12.17     bindr_0.1.1      magrittr_1.5      [4] MASS_7.3-49      tidyselect_0.2.4 lattice_0.20-35   [7] R6_2.2.2         rlang_0.2.0      quadprog_1.5-5   [10] stringr_1.3.1    tools_3.4.4      grid_3.4.4       [13] yaml_2.1.19      assertthat_0.2.0 tibble_1.4.2     [16] bindrcpp_0.2.2   purrr_0.2.4      codetools_0.2-15 [19] curl_3.2         glue_1.2.0       stringi_1.2.2    [22] pillar_1.2.2     compiler_3.4.4   boot_1.3-20      [25] pkgconfig_2.0.1
 


When i create my own Symbol data in minutes, my `periodicity(R)$units` is ` 'mins' `.
as a result the function throws follwing Error:
```
Error in if (units == "months" && nrow(R) > 500) units <- "years" : 
  missing value where TRUE/FALSE needed
```
I would propose to add "mins" to the units (starting row 111 in chart.forward.R):
 ```
 units <- switch(units,
                  mins="hours",
                  seconds = 'hours',
                  minutes = 'hours',
                  hours = 'days',
                  days = 'months',
                  weeks = 'years',
                  months = 'years',
                  quarters = 'years',
                  years = 'years')
```
I dont know if this counts as a Bug.
when i run the demo "/demo/luxor.8.walk.forward.R" i get following Error:
`Error in `[.xts`(symbol.data, testing.start.v) : subscript out of bounds`

I looked into "walk.forward.R" and narrowed the "problem" down. I seemd to me as if walk.forward() is deviding the preiods wrong. In my case the Ending point of the  is nrows(mktdata)+1

`testing.start.v  <- 1+training.end.v`
I think here is the "problem" in row 141 in walk.forward.R
I am having problem with running apply.paramset with doParallel/doSnow, i have tried it in Windows 10 and Linux. Reproducible example as follow:

```library(quantstrat)


Sys.setenv(TZ = "UTC")

currency(c('USD'))

symbols <- "AAPL"
getSymbols(symbols)

stock(symbols, currency = "USD")


AAPL <- AAPL["2016/"]

init_date <- "2017-01-07"
start_date <- "2018-01-31"
end_date <- "2018-01-31"
init_equity <- 1e8 # $100,000,000
adjustment <- FALSE


portfolio.st <- "Luxor.Opt"  
account.st <- "Luxor.Opt"
strategy.st <- "Luxor.Opt"

rm.strat(name = portfolio.st)   

initPortf(name = portfolio.st, 
          symbols = symbols)

initAcct(name = account.st,
         portfolios = portfolio.st,
         initEq = init_equity)

initOrders(portfolio = portfolio.st,
           symbols = symbols)

strategy(strategy.st, store = TRUE) 


fastMA_custom2 = 12

slowMA_custom2 = 26

signalMA_custom2 = 9
maType="EMA"
MAforest = 3

forest <- function(x, fastMA_custom, slowMA_custom, signalMA_custom){
  step1 <- EMA(x,fastMA_custom)
  step2 <- EMA(x,slowMA_custom)
  step3 <- step1-step2
  step4 <- EMA(step3,signalMA_custom)
  step5 <- step3-step4
  return(step5)
}

smaforest <- function(x){
  step1 <- EMA(x,fastMA_custom2)
  step2 <- EMA(x,slowMA_custom2)
  step3 <- step1-step2
  step4 <- EMA(step3,signalMA_custom2)
  step5 <- step3-step4
  step6 <- EMA(step5,MAforest)
  return(step6)
}

add.indicator(strategy = strategy.st,
              name ="forest",
              arguments = list(x=quote(Cl(mktdata)),
                               fastMA_custom = 12,
                               slowMA_custom = 26,
                               signalMA_custom = 9
              ),
              label="forest")

add.indicator(strategy=strategy.st,
              name ="smaforest",
              arguments = list(x=quote(Cl(mktdata))),
              label="smaforest")


add.signal(strategy = strategy.st,
           name="sigCrossover",
           arguments = list(columns = c("forest", "smaforest"),
                            relationship = "gte"),
           label = "long")

add.signal(strategy = strategy.st,
           name="sigCrossover",
           arguments = list(columns = c("forest", "smaforest"),
                            relationship = "lte"),
           label = "short")

add.rule(strategy.st,
         name = "ruleSignal",
         arguments = list(sigcol = "long",
                          sigval = TRUE,
                          orderqty = 100000,
                          ordertype = "market",
                          orderside = "long", 
                          TxnFees = -1, 
                          replace = FALSE),
         type = "enter",
         label = "EnterLONG")

add.rule(strategy.st,
         name = "ruleSignal",
         arguments = list(sigcol = "short",
                          sigval = TRUE,
                          orderqty = -100000,
                          ordertype = "market",
                          orderside = "short", 
                          replace = FALSE, 
                          TxnFees = -1
         ),
         type = "enter",
         label = "EnterSHORT")

add.rule(strategy.st, 
         name = "ruleSignal", 
         arguments = list(sigcol = "short", 
                          sigval = TRUE, 
                          orderside = "long", 
                          ordertype = "market", 
                          orderqty = "all", 
                          TxnFees = -1, 
                          replace = TRUE), 
         type = "exit", 
         label = "Exit2SHORT")


add.rule(strategy.st, 
         name = "ruleSignal", 
         arguments = list(sigcol = "long", 
                          sigval = TRUE, 
                          orderside = "short", 
                          ordertype = "market", 
                          orderqty = "all", 
                          TxnFees = -1, 
                          replace = TRUE), 
         type = "exit", 
         label = "Exit2LONG")

addPosLimit(portfolio.st, symbols[], timestamp=init_date, maxpos=500, minpos=0)

# applyStrategy(strategy.st, portfolio.st)
# 
# updatePortf(portfolio.st)
# tradeStats(portfolio.st, symbols)


# Portfolio Symbol Num.Txns Num.Trades Net.Trading.PL Avg.Trade.PL Med.Trade.PL Largest.Winner Largest.Loser Gross.Profits Gross.Losses Std.Dev.Trade.PL Std.Err.Trade.PL Percent.Positive Percent.Negative Profit.Factor
# AAPL Luxor.Opt   AAPL      127         63       -45123.5    -28493.01     -46000.1        1328999      -1047001      10371975    -12167035           474783         59817.04         42.85714         57.14286     0.8524653
# Avg.Win.Trade Med.Win.Trade Avg.Losing.Trade Med.Losing.Trade Avg.Daily.PL Med.Daily.PL Std.Dev.Daily.PL Std.Err.Daily.PL Ann.Sharpe Max.Drawdown Profit.To.Max.Draw Avg.WinLoss.Ratio Med.WinLoss.Ratio Max.Equity Min.Equity
# AAPL      384147.2      305999.5        -337973.2        -298000.6    -28493.01     -46000.1           474783         59817.04  -0.952672     -3182097        -0.01418043           1.13662          1.026842   985976.4   -2196121
# End.Equity
# AAPL   -45123.5

add.distribution(strategy.st,
                 paramset.label = "forestopt",  #The label we will use when we want to run this optimisation in paramset
                 component.type = "indicator", # The custom function is of indicator type (not other alternatives including signal or rule)
                 component.label = "forest", #this is the name of your custom function
                 variable = list(fastMA_custom = seq(8, 12, by = 2)),
                 label = "myForestOptLabel") #choose whatever you want
library(doSNOW)
# cl = makeCluster(2,type C= "SOCK")
# registerDoSNOW(cl)
resultsopt <- apply.paramset(strategy.st,
                             paramset.label = "forestopt",
                             portfolio.st = portfolio.st,
                             account.st = account.st, 
                             nsamples = 0)
# stopCluster(cl)


resultsopt$tradeStats
```
This is the result run in sequentiel(without having registerDoSnow):
```  myForestOptLabel   Portfolio Symbol Num.Txns Num.Trades Net.Trading.PL Avg.Trade.PL Med.Trade.PL Largest.Winner Largest.Loser Gross.Profits Gross.Losses Std.Dev.Trade.PL
1                8 Luxor.Opt.1   AAPL      113         56      2650885.5    47123.955    -34500.75        1405999      -1133001      13463971    -10825029         559261.7
2               10 Luxor.Opt.2   AAPL      121         60       -31124.3    -2701.052    -52500.75        1405999      -1133001      12520972    -12683035         553068.9
3               12 Luxor.Opt.3   AAPL      147         73      3143859.3    43656.611    -46000.10        2188999      -1047001      16946972    -13760039         596202.7
  Std.Err.Trade.PL Percent.Positive Percent.Negative Profit.Factor Avg.Win.Trade Med.Win.Trade Avg.Losing.Trade Med.Losing.Trade Avg.Daily.PL Med.Daily.PL Std.Dev.Daily.PL
1         74734.49         44.64286         55.35714     1.2437815      538558.8      513998.9        -349194.5        -239001.0    47123.955    -34500.75         559261.7
2         71400.88         41.66667         58.33333     0.9872221      500838.9      386998.5        -362372.4        -259001.4    -2701.052    -52500.75         553068.9
3         69780.25         43.83562         56.16438     1.2316078      529592.9      309999.6        -335610.7        -308000.4    43656.611    -46000.10         596202.7
  Std.Err.Daily.PL  Ann.Sharpe Max.Drawdown Profit.To.Max.Draw Avg.WinLoss.Ratio Med.WinLoss.Ratio Max.Equity Min.Equity End.Equity
1         74734.49  1.33760201     -2675006        0.990982974          1.542289          2.150614    4271893   -1122012  2650885.5
2         71400.88 -0.07752717     -3152090       -0.009874178          1.382111          1.494195    1351885   -1808107   -31124.3
3         69780.25  1.16240196     -3182097        0.987983397          1.577998          1.006491    3546860   -2196121  3143859.3
```
where as the following are the results with registerDoSNOW:
```
myForestOptLabel   Portfolio Symbol Num.Txns Num.Trades Total.Net.Profit Avg.Trade.PL Med.Trade.PL Std.Err.Trade.PL Largest.Winner Largest.Loser Gross.Profits Gross.Losses Std.Dev.Trade.PL Percent.Positive
1                8 Luxor.Opt.1      0        0          0                0            0            0                0              0             0             0            0                0                0
2               10 Luxor.Opt.2      0        0          0                0            0            0                0              0             0             0            0                0                0
3               12 Luxor.Opt.3      0        0          0                0            0            0                0              0             0             0            0                0                0
  Percent.Negative Profit.Factor Avg.Win.Trade Med.Win.Trade Avg.Losing.Trade Med.Losing.Trade Avg.Daily.PL Med.Daily.PL Std.Dev.Daily.PL Std.Err.Daily.PL Ann.Sharpe Max.Drawdown Profit.To.Max.Draw Avg.WinLoss.Ratio
1                0             0             0             0                0                0            0            0                0                0          0            0                  0                 0
2                0             0             0             0                0                0            0            0                0                0          0            0                  0                 0
3                0             0             0             0                0                0            0            0                0                0          0            0                  0                 0
  Med.WinLoss.Ratio Max.Equity Min.Equity End.Equity
1                 0          0          0          0
2                 0          0          0          0
3                 0          0          0          0
```

SessionInfo
```
R version 3.4.2 (2017-09-28)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 17.10

Matrix products: default
BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] doSNOW_1.0.16              snow_0.4-2                 iterators_1.0.9            quantstrat_0.14.3          foreach_1.4.4              blotter_0.14.2             PerformanceAnalytics_1.5.2
 [8] FinancialInstrument_1.3.1  quantmod_0.4-13            TTR_0.23-3                 xts_0.10-2                 zoo_1.8-1                 

loaded via a namespace (and not attached):
[1] quadprog_1.5-5   lattice_0.20-35  codetools_0.2-15 MASS_7.3-47      grid_3.4.2       curl_3.2         boot_1.3-20      tools_3.4.2      compiler_3.4.2  
```
