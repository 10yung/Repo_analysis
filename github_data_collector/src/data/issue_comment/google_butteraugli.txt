Greetings butteraugli developers and contributors,

We’re reaching out because your project is an important part of the open source ecosystem, and we’d like to invite you to integrate with our [fuzzing](https://www.owasp.org/index.php/Fuzzing) service, [OSS-Fuzz]( https://opensource.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html ). OSS-Fuzz is a free fuzzing infrastructure you can use to identify security vulnerabilities and stability bugs in your project. OSS-Fuzz will:

- Continuously run at scale all the fuzzers you write.
- Alert you when it finds issues.
- Automatically close issues after they’ve been fixed by a commit.

Many widely used [open source projects]( https://github.com/google/oss-fuzz/tree/master/projects ) like OpenSSL, FFmpeg, LibreOffice, and ImageMagick are fuzzing via OSS-Fuzz, which helps them find and remediate [critical issues]( https://bugs.chromium.org/p/oss-fuzz/issues/list?can=1&q=status%3AFixed%2CVerified+Type%3ABug%2CBug-Security+-component%3AInfra+ ). 

Even though typical integrations can be done in < 100 LoC, we have a [reward program]( https://www.google.com/about/appsecurity/patch-rewards/ ) in place which aims to recognize folks who are not just contributing to open source, but are also working hard to make it more secure.

We want to stress that anyone who meets the eligibility criteria and integrates a project with OSS-Fuzz is eligible for a reward.

To help you getting started, we can attach our internal fuzzer for your project that you are welcome to use directly, or to use it as a starting point.

If you're not interested in integrating with OSS-Fuzz, it would be helpful for us to understand why—lack of interest, lack of time, or something else—so we can better support projects like yours in the future.

If we’ve missed your question in our [FAQ]( https://google.github.io/oss-fuzz/faq/ ), feel free to reply or reach out to us at oss-fuzz-outreach@googlegroups.com.


Thanks!

Tommy
OSS-Fuzz Team

I am using g++ (Debian 6.3.0-18+deb9u1) 6.3.0 20170516
I get the following error while trying to build using MakeFile

butteraugli_main.cc:190:65: error: invalid conversion from ‘JSAMPROW {aka char*}’ to ‘const uint8_t* {aka const unsigned char*}’ [-fpermissive]
         const uint8_t* const BUTTERAUGLI_RESTRICT row = buffer[0];
                                                         ~~~~~~~~^
butteraugli_main.cc:209:65: error: invalid conversion from ‘JSAMPROW {aka char*}’ to ‘const uint8_t* {aka const unsigned char*}’ [-fpermissive]
         const uint8_t* const BUTTERAUGLI_RESTRICT row = buffer[0];
This change enables multi-file input mode, similar to what dssim has. Sample use:

![image](https://user-images.githubusercontent.com/1614246/42742980-b698644c-8874-11e8-9de2-9ad23bc35841.png)

I tried to make the change in a way so that the diff is less intrusive. If you find that the multi-file mode is useful for butteraugli and want it refactored differently, let me know, and I'll update the PR.
The issues with the change:
 - heatmap input filename somewhat collides with image2. `isMultiFileMode` tries to avoid any possible issues.
 - `ProcessFile` possibly adds alpha to `rgb1`, so, `image1` and `image2` could be rgb24, but `image3` could be rgba, which would change `rgb1` to rgba.

In any case, it was quite inconvenient to constantly run butteraugli with different filenames that I constantly needed to compare that I find this option to be a must-have :)

 - corrected printf modifier for size_t (replaced %lu with %zu)
 - missing &lt;algorith&gt; include added (needed by std::min/max)
 - added static_cast<uint8_t*> for nullptr to be able to resolve ctor for bytes_
Hi, I get a butteraugli 0 score when processing this images.
Butteraugli can be in a range between 1.0 and 1.5 (when quality is 95), but I think 0.0 is wrong.
What's wrong?

my terminal
<img width="529" alt="2018-03-09 17 40 32" src="https://user-images.githubusercontent.com/19744782/37198641-52e61e56-23c2-11e8-99a3-29ba4c2ddb45.png">

input image
![image_1024](https://user-images.githubusercontent.com/19744782/37198598-2d42ce6a-23c2-11e8-977d-52da42c05d61.jpg)

guetzli output image (-q 95)
![oimage1024](https://user-images.githubusercontent.com/19744782/37198620-438ba9c6-23c2-11e8-8f59-2e652f0d2c92.jpg)


Fixes #43
@skohlmann /cc

Output format: `<name> version <commit index> (commit hash)`
Example output: `butteraugli version 33 (cc686a769d8063aca8f54b5bfb0d15d73c653b48)`
Please add a command line parameter to print the version of butteraugli.
Version 1.2.11 has these key improvements over 1.2.10:
-Fix deflate stored bug when pulling last block from window
-Permit immediate deflateParams changes before any deflate input