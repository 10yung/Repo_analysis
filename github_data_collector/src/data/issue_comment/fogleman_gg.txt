Pretty self-explanatory. This lib only supports TrueType fonts and it would be nice if it also supported OpenType.
```
+ cd gg-72436a171bf31757dc87fb8fa9f7485307350307
+ LDFLAGS='-X github.com/fogleman/gg/version=1.3.0 -X github.com/fogleman/gg/version.commit=72436a171bf31757dc87fb8fa9f7485307350307'
+ GO_TEST_FLAGS='-buildmode pie -compiler gc'
+ GO_TEST_EXT_LD_FLAGS='-Wl,-z,relro -Wl,--as-needed  -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld '
+ go-rpm-integration check -i github.com/fogleman/gg -b /builddir/build/BUILD/gg-72436a171bf31757dc87fb8fa9f7485307350307/_build/bin -s /builddir/build/BUILD/gg-72436a171bf31757dc87fb8fa9f7485307350307/_build -V 1.3.0-3.20190516git72436a1.fc32 -C 72436a171bf31757dc87fb8fa9f7485307350307 -p /builddir/build/BUILDROOT/golang-github-fogleman-gg-1.3.0-3.20190516git72436a1.fc32.x86_64 -g /usr/share/gocode -r '.*example.*'
Testing    in: /builddir/build/BUILD/gg-72436a171bf31757dc87fb8fa9f7485307350307/_build/src
         PATH: /builddir/build/BUILD/gg-72436a171bf31757dc87fb8fa9f7485307350307/_build/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/sbin
       GOPATH: /builddir/build/BUILD/gg-72436a171bf31757dc87fb8fa9f7485307350307/_build:/usr/share/gocode
  GO111MODULE: off
      command: go test -buildmode pie -compiler gc -ldflags "-X github.com/fogleman/gg/version=1.3.0 -X github.com/fogleman/gg/version.commit=72436a171bf31757dc87fb8fa9f7485307350307 -extldflags '-Wl,-z,relro -Wl,--as-needed  -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld '"
      testing: github.com/fogleman/gg
github.com/fogleman/gg
flag provided but not defined: -test.timeout
Usage of /tmp/go-build023867409/b001/gg.test:
  -save
    	save PNG output for each test case
```

It can be worked around with the method mentioned in:
https://github.com/golang/go/issues/31859#issuecomment-489889428
How to load svg file to draw image?
`DrawStringWrapped` break line by english space currently, is possible break line by the word width?`fontFace` should able to return width of each word.
I want to set the outline style for text, but it looks like I cannot set the path by text. If I can do that, I think the stroke and fill method can work just like the outline and text color.
I'm creating an Image based on an incoming error message. Ideally, I'd like the height of the image to be something like `number of lines + line spacing + padding` 

Is there a way of getting the number of lines or the height of the boundry for this so I can pass that to the img context?
hi there,

running the following program:

```go
package main

import (
	"flag"

	"github.com/fogleman/gg"
)

func main() {
	const (
		W = 1024.0
		H = 1024.0
	)

	nn := flag.Int("n", 1000, "number of lines")
	flag.Parse()

	var (
		N  = float64(*nn)
		dx = float64(W) / float64(*nn)

		ylow = H / 3.0
		yhi  = 2.0 * H / 3.0
	)

	dc := gg.NewContext(W, H)
	dc.SetRGB(1, 1, 1)
	dc.Clear()
	dc.SetRGB(0, 0, 0)
	dc.SetLineWidth(1)
	var (
		x = 0.0
		y = ylow
	)
	dc.MoveTo(x, y)
	for i := 1; i < *nn; i++ {
		j := float64(i)
		x += dx
		switch {
		case j < 0.1*N:
			y = ylow
		case 0.1*N <= j && j < 0.5*N:
			y = yhi
		case 0.5*N <= j && j < 0.55*N:
			y = ylow
		case 0.55*N <= j && j < 0.9*N:
			y = yhi
		default:
			y = ylow
		}

		dc.LineTo(x, y)
	}
	dc.Stroke()
	dc.SavePNG("out.png")
}
```

with `-n=1000` draws the following plot:
![out-1000](https://user-images.githubusercontent.com/1070920/65427522-c2c55280-de12-11e9-9bc1-9f1d6cd6c6fc.png)

but when increasing to _e.g._ 10000, it gives the following one:
![out-10000](https://user-images.githubusercontent.com/1070920/65427538-cc4eba80-de12-11e9-9790-379bc4ab9ddd.png)

behaviour uncovered in gonum/plot#559
I would like to write underline text but I'm not sure if that is something I need to define with an external package like https://github.com/golang/freetype or something I have to manually calculate and DrawLine() for.

Looking at the [source more](https://github.com/fogleman/gg/blob/master/context.go#L760), it seems functions for calculating the width and hight of each line of text already exist. These could be used to draw lines from `x,y` to `x+w,y` for each `fontsize * lineheight`.

```go

	var maxTextWidth float64 = 120

	dc.DrawStringWrapped(myText, P, H/2, 0, 0.5, maxTextWidth, 2, gg.AlignLeft)

	var lineStrokeWidth float64 = 1
	var lineSpacing float64 = 2

	// How many lines does the text take-up?
	lines := dc.WordWrap(myText, maxTextWidth)
	textWidth, textHeight := dc.MeasureMultilineString(strings.Join(lines, "\n"), lineSpacing)
	fmt.Printf("%q\n", lines)
	fmt.Println(textWidth, textHeight)

	lineHeight := textHeight / float64(len(lines)-1)
	fmt.Printf("LineHeight: %f\n", lineHeight)
	// dc.DrawLine(P, H/2-(textHeight/2), P+textWidth, H/2-(textHeight/2))

	dc.SetLineWidth(lineStrokeWidth)
	for i := 1; i <= len(lines); i++ {
		textY := float64(i) * lineHeight
		fmt.Printf("\t%f of %f\n", textY, textHeight)

		if i > 1 {
		textY += lineHeight/lineSpacing - (float64(i) * lineStrokeWidth)
		}

		dc.DrawLine(P, H/2-(textHeight/2)+textY, P+textWidth, H/2-(textHeight/2)+textY)
	}
	dc.Stroke()
```

I updated my  fogleman/gg version, but there was a error,
which is type *gg.Context has no field or method SetFontSize
