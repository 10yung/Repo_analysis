rustc-serialize would not compile.
![error](https://user-images.githubusercontent.com/32802421/31578866-c8cfa902-b121-11e7-936b-c0c2742b9e48.jpg)

Can anyone help?
Due to the instruction pipeline in the R4300 the delay slot writeback will happen after the next instruction has done a register fetch, and before the next instruction`s writeback.

![image](https://cloud.githubusercontent.com/assets/1404886/15777229/e1a66bd6-298d-11e6-905f-31dd6d2f96e2.png)
(from 4.1 in the NEC VR4300 datasheet)

This is also the case on MIPS R3000, which is the cpu that I am familiar with. However, reading the datasheet for R4300 it can actually insert delay cycles if an instruction depends on the writeback, please have a look at 4.3 Load Delay in the NEC VR4300 datasheet

Needed a "cargo update" since the currently selected version of num needs a libc version that rustyline doesn't want to work with.

Notes:
- No completion yet.
- Making all errors while loading/saving the history file silent was intentional, if it's your preference to print warnings that can be changed of course.
- Both Ctrl-C and Ctrl-D will exit, I found that helpful since rapid start-break-edit code-restart cycles are common. Later it can be changed to match the gdb behavior of just giving a new prompt on interrupt.
- The history file path is hardcoded to the XDG standard directory, I'll leave it to some Windows/Mac experts to find the right crate to make this do the right thing on these OS.

So I figured out the issues I was having yesterday. I checked my sha1 against yours, and it matches perfectly with yours. Investigating further, I figured out that there was an integer overflow occurring in the addi instruction. I don't know why your rust didn't catch it, while mine did, but the code, pif, and rom are exactly the same.

In any case, I was forced to implement some small amount of overflow handling in #51. It might help anyone else out there who has the same issue. I'm not sure why rust was overflowing - I think it was because it was trying to add two u64's that represented negative numbers. Not sure if that means i64 would have been more appropriate, or i32, or whatever. I just implemented it bit-wise, checking for overflow manually.

Now that I think about it, I think my implementation breaks the 64bit-mode. I don't know. Thoughts?

The `kseg0_cache_enabled` value is ambiguous when reading the RegConfig register.

There are many combinations of three bits that cause the bool to be false, but the bool type is not descriptive enough to tell which of these combinations has actually been stored in the RegConfig register, when the program wants to read it.

In addition, there are several other bits of RegConfig that aren't being handled whatsoever, which is obviously going to be a problem when reading.

I don't know if any code ever actually _reads_ from the RegConfig register, but this will be a problem if some code does.

I'm sorry for being zealous and making an issue for this, which might be an overreaction. I'm watching the series for the first time, and I noticed this problem just now. Just wanted to make sure this is properly addressed in orderly fashion.

Suggestion from @CryZe .

https://github.com/kbknapp/clap-rs
