Just wondering if anybody had taken a look at how/if scala-async might work in Scala 3, given that the Scala 2 macro system as we know it will not survive? Is it still too soon to say?

It would be good to get some vibes about how confident we can be that the library might survive in some form into Scala 3, for deciding whether it's worth adopting it in an application.
None
None
We tried to upgrade our project to 0.10.0, but all compilation now fails with 

```
scala.ScalaReflectionException: object scala.reflect.internal.annotations.uncheckedBounds in compiler mirror not found.
    at scala.reflect.internal.Mirrors$RootsBase.staticClass(Mirrors.scala:129)
    at scala.reflect.internal.Mirrors$RootsBase.staticClass(Mirrors.scala:29)
    at scala.async.internal.TransformUtils.scala$async$internal$TransformUtils$$UncheckedBoundsClass(TransformUtils.scala:393)
    at scala.async.internal.TransformUtils.scala$async$internal$TransformUtils$$UncheckedBoundsClass$(TransformUtils.scala:392)
    at scala.async.internal.AsyncMacro$$anon$1.scala$async$internal$TransformUtils$$UncheckedBoundsClass$lzycompute(AsyncMacro.scala:25)
    at scala.async.internal.AsyncMacro$$anon$1.scala$async$internal$TransformUtils$$UncheckedBoundsClass(AsyncMacro.scala:25)
    at scala.async.internal.TransformUtils.uncheckedBounds(TransformUtils.scala:396)
    at scala.async.internal.TransformUtils.uncheckedBounds$(TransformUtils.scala:394)
    at scala.async.internal.AsyncMacro$$anon$1.uncheckedBounds(AsyncMacro.scala:25)
    at scala.async.internal.AsyncTransform.asyncTransform(AsyncTransform.scala:30)
    at scala.async.internal.AsyncTransform.asyncTransform$(AsyncTransform.scala:24)
    at scala.async.internal.AsyncMacro$$anon$1.asyncTransform(AsyncMacro.scala:25)
    at scala.async.internal.AsyncBase.asyncImpl(AsyncBase.scala:56)
    at scala.async.internal.ScalaConcurrentAsync$.asyncImpl(ScalaConcurrentAsync.scala:27)
```

Scala version is 2.12.8 and sbt 1.2.8.

    

Suggested versioning scheme for https://github.com/scala/scala-async/issues/205
Hi,

Rather than manually publishing to a maven repository (there's an open [issue](https://github.com/scala/scala-async/issues/201) asking for 0.10 for a while now), would it be possible to auto-publish on every commit?  The version for automatically published artifacts could follow a different scheme like `0.0.$date.$commit` or `0.0.$(git rev-list HEAD --count)` if you also want to continue having manual releases.

Similar to scala/scala-async/issues/74

Here's the code snippet:
```
import scala.async.Async._
import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global


def doStuff(v: Any): Any = {
  v
}

def main() {
  async {
    val s = if (1 == 1) {
      await(Future{doStuff(true)})
      await(Future{doStuff(10)})
      s"true"
    } else {
      s"false"
    }
    println(s)
  }
}

main()
```

Assigning the futures to a val will not throw the warning.
Before #195, the master branch was cross built for Scala 2.11 and 2.12, which incurred a large number of deprecation warnings in the `scala.reflect`.

Now that we've dropped 2.11 support from that branch, we can and should heed these warnings.

Could scala-async handle some of use cases describe in https://github.com/jedesah/computation-expressions?

I think it would be a relatively small modification to our macro to offer a fail-fast mode. The user would need to opt in to this, perhaps by importing a different `async` macro.

In this flavour of the async, we'd immediately register the state machine as an `onFailure` callback on each future that is started. The first throwable received would be used to fail the result promise of the async block. Some care would be needed to avoid races, e.g. by making the existing and new code that fulfils that `Promise` obtain a lock when doing so.

