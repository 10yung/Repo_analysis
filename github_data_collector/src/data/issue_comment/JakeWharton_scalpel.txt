Hi

Is there any way that the library to this for you?
It helps to use it everywhere painless.

after I import the project and found this error:

```
Error:Gradle DSL method not found: 'getBootClasspath()'
```

It seem that the build.gradle config is too old, please update the build.gradle

Added drawing class names functionality described in #21 and build configuration was updated for latest versions of used tools.
##### Drawing class names

When it is enabled, simple class name is rendered for view. When there is id as well, class name is rendered under it.
![screen](https://cloud.githubusercontent.com/assets/6277721/8968995/efb33812-3640-11e5-8140-b2ad8a3e67d1.png)
##### Gradle build update

Update Gradle configuration for newest Gradle distribution and Android Gradle plugin.
Updated and tested new Travis configuration.

In addition to drawing ids I would like to see the ability to toggle class names of the views. 

ex "android.widget.TextView" or even just "TextView".

I've started using scalpel in my app, and I've been seing a bug (I guess) where setting translation values in views doesn't have any effect. I didn't know which was the cause, but I have now confirmed that is due to using ScalpelLayout (with the Debug Drawer from u2020, thanks a lot for that Jake). 

I don't have enough knowledge to debug the issue, so I'm reporting it. I hope it's fixable. 
Thanks anyways :)

Currently siblings are always drawn on the same layer. This is actually bad if you have overlapping views as they and their children can draw over each other on the same level.

A second child which overlaps need to be prompted to a layer higher than its sibling (and all its children).

Use the animation APIs for performing the hierarchy transformation.

Pros:
- Hardware accelerated.
- Could have a super-sexy enabled/disabled transition.
- Views would still be interactive.
- Doesn't require being in the view hierarchy (unless we want to intercept touch events)

Cons:
- Other animations using absolute positioning would break the effect.

It sucks having to put this in your hierarchy. What if we walked up the tree and attached ourself at the end of the `ViewRootImpl` automatically? It could even be idempotent so you always just call:

``` java
Scalpel.obtain(this /* <-- activity */).someControl()
```

The 3D implementation is fairly wonky as a result from being iterated on rapidly rather than thought out initially. On the rotation extremes, you can clearly see that the layers are being translated along the rotated x/y axes to perceive z-axis movement. While this creates visual separation that looks like spacing, it makes the layer's appear smaller. We need true 3D manipulation where the layers are rotated with the model and moved along the true z-axis.

Note: It's important that the model be perfectly flat when viewed from straight on. Otherwise, the z-axis spacing would cause perceived sizes to be wrong. That is, a control that's a few levels up would appear much larger than if it were on the "ground" layer. This is honored now by scaling the x/y translation by the rotation percentage. For example, a 30 degree rotation is 50% of the max therefore we only separate the layers by 50% of their spacing.
