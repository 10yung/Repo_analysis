**Feature Request or Bug**
It seems that using mimikatz kills the listener

**Describe the feature request or bug**
Using mimikatz with some dumping options (like sekurlsa::logonpassword and others) make the Grunt (tested only with HTTP one) crash/die.
Once thing i've noticed is that on normal Windows 10 it works (elvated), but on Windows Server 20XX it doesn't and crashes.
Note that if i wrote a command in a wrong way, the task became complete and i have the output of mimikats.

**To Reproduce**
1) Getting a new Grunt (by GruntHTTP)
2) Interact with him
3) Run whoami (everything fine)
4) Run Mimikats sekurlsa:logonpasswords (or start it from tasks)
4) Grunt just dies (On own machine with powershell payload and windows 10, it works without problems)

**Expected behavior**
I would expect Mimikats to work and to have the output into the task window

**Screenshots**
1) Died grunts: ![img](https://imgur.com/CpCvNX4.png)
2) Grunt task tasked forever: ![img](https://imgur.com/bw5NMpx.png)
3) Grunt tasking: ![img](https://imgur.com/eRRcYU5.png)
4) Grunt output empty: ![img](https://imgur.com/V84qwT0.png)

**Covenant Server Information:**
 - OS: Vagrant with Ubuntu 19-04
 - Docker or Native: Native with dotnet core installed

**Browser Information:**
 - Browser: Chrome, from Windows 10 machine
 - Version: Latest

**Target Information (System that implant is running on):**
 - OS: Windows 2012 (Microsoft Windows NT 6.3.9600.0)

**Additional context**
Idk honestly, maybe we'll get more after.

Adds the task "BypassUACRegistry" to use either the fodhelper or eventvwr UAC bypasses to execute a command
**Unhandled exception (NullReferenceException) on some endpoints of the panel**

**Describe the feature request or bug**
Exception on Dashboard and Taskings page

**To Reproduce**
Steps to reproduce the behavior:
1. Go to main page of the panel (port 7443)
2. Error:

```
System.NullReferenceException: Object reference not set to an instance of an object.
   at Covenant.Views.GruntTasking.Views_GruntTasking__GruntTaskingTable.ExecuteAsync() in /opt/Covenant/Covenant/Views/GruntTasking/_GruntTaskingTable.cshtml:line 44
   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderPageCoreAsync(IRazorPage page, ViewContext context)
   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderPageAsync(IRazorPage page, ViewContext context, Boolean invokeViewStarts)
   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderAsync(ViewContext context)
   at Microsoft.AspNetCore.Mvc.ViewFeatures.HtmlHelper.RenderPartialCoreAsync(String partialViewName, Object model, ViewDataDictionary viewData, TextWriter writer)
   at Covenant.Views.Home.Views_Home_Index.ExecuteAsync() in /opt/Covenant/Covenant/Views/Home/Index.cshtml:line 36
   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderPageCoreAsync(IRazorPage page, ViewContext context)
   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderPageAsync(IRazorPage page, ViewContext context, Boolean invokeViewStarts)
   at Microsoft.AspNetCore.Mvc.Razor.RazorView.RenderAsync(ViewContext context)
   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ViewContext viewContext, String contentType, Nullable`1 statusCode)
   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ActionContext actionContext, IView view, ViewDataDictionary viewData, ITempDataDictionary tempData, String contentType, Nullable`1 statusCode)
   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.ExecuteAsync(ActionContext context, ViewResult result)
   at Microsoft.AspNetCore.Mvc.ViewResult.ExecuteResultAsync(ActionContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()
   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
```

**Covenant Server Information:**
 - OS: Ubuntu 19.10
 - Docker or Native: Native

**Browser Information:**
 - Browser: Chrome, Firefox
 - Version: 79.0.3945.88, 71

**Target Information (System that implant is running on):**
 - OS: N/A
 - Version: N/A

**Additional context**
All other pages work as expected (/grunt, /data etc)

A simple update to the `PowerShellRemoting` Task to reflect the new output provided by SharpSploit v1.5.

![image](https://user-images.githubusercontent.com/7346521/71536464-8882ba00-2907-11ea-991d-a44da2dcc41b.png)

**Feature Request or Bug**
Feature Request

**Describe the feature request or bug**
The compiler will not currently allow the inclusion of additional libraries within an ImplantTemplate.

My use case was to include a reference to `System.ServiceProcess`, to create a Service Binary capable of being used with PsExec.

Of course there are lots of other "useful" possibilities such as UnmanagedExports, ConfuserEx / Obfuscar and more, to create more exoteric templates.
I created dark mode for covenant. This should cover the most minimal requirements to implement a Dark Mode toggle. There is room to grow with this code also. I tried to follow patterns within Covenant. I tested this and should be checked again with standard/admin users, pulled multiple times to make sure data was re-created correctly in database, updated all colors and custom css fields, tested creation, deletion and selection of active themes.
**Feature Request or Bug**
Bug

**Describe the feature request or bug**
When defining multiple Connect Addresses for the Listener only one gets saved in the listener configuration.

**To Reproduce**
1. Add a new Listener.
2. Specify multiple ConnectAddress fields.
3. Create the listener.
4. Select the newly created listener, only one IP address is visible.

**Expected behavior**
There should be multiple connect addresses present in the listener properties, as well as in the launcher code.

**Screenshots**
IP addresses are removed from the screenshots.

![c2](https://user-images.githubusercontent.com/58169987/70948758-37540a00-206d-11ea-85b4-9410038d6040.png)

![2](https://user-images.githubusercontent.com/58169987/70948776-420e9f00-206d-11ea-8474-c9aac0f14726.png)

**Covenant Server Information:**
 - OS: Ubuntu LTS 18.04
 - Docker or Native: Native

**Browser Information:**
 - Browser Firefox
 - Version 71.0 64 bit.

**Target Information (System that implant is running on):**
 - OS: Windows 10 64 bit.

**Additional context**
N/A.

**Feature Request or Bug**
Bug

**Describe the feature request or bug**
some Launcher 'views' seems to not care about user edit.

**To Reproduce (Powershell):**
Steps to reproduce the behavior:
1. Go to Launchers
2. Click on Powershell
3. Edit ParameterString
4. Click on Generate
5. See both 'Launcher' and 'EncodedLauncher': don't contain user input.

**To Reproduce (MSBuild)**
Steps to reproduce the behavior:
1. Go to Launchers
2. Click on MSBuild
3. Edit TargetName and/or Taskname
4. Click on Generate
5. See xml file: doesn't contain user input.

**Expected behavior**
Click on generate should consider input field edit.

**Screenshots**
![powershell_bug_1](https://user-images.githubusercontent.com/57483641/69822739-67935000-1207-11ea-840b-c05db759bf13.png)

and

![msbuild_bug_crop](https://user-images.githubusercontent.com/57483641/69822751-6cf09a80-1207-11ea-8768-5bae9e768c92.png)


**Covenant Server Information:**
 - OS: WINDOWS
 - Docker or Native: [Native]

**Browser Information:**
 - Browser [Firefox]
 - Version [Latest]

**Additional context**
May Other launcher type could be affected too

**Feature Request or Bug**
Bug

**Describe the feature request or bug**
Loading SharpSploit and Sharpup Reference Libraries in the same custom task generates an error: "Syntax Tree already Present"

**To Reproduce**
Steps to reproduce the behavior:
1. Create a new task called "MyTask" with "SharpUp" and "Sharpsploit" reference libraries
2. Add the attached code below to the custom task - this is just some test code but the issue is likely to occur with any other code too.
```


using System;

using System.IO;

using System.Linq;

using SharpUp;

using SharpSploit;

public static class Task

{

    public static bool shouldExecModule(string userInput, string moduleId) {

    // Function to validate whether the module should be executed or not...

        return userInput.Contains("all") || userInput.Contains(moduleId);

    }   

    public static string Execute()

    {

        string output = "";

        string command = "";

        string serverip = "";

        string modulesToExec= "sharpup";

        string moduleId = "";

        string title = "";

        try

        {             

            moduleId = "sharpup";

            title = "Running SharpUp: Privilege Escalation Checks";

            if (shouldExecModule(modulesToExec, moduleId)) {

                Console.WriteLine("[*] " + title);

                Program.PrivescChecks(true);

            }

        }

        catch (Exception e) { output += e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace; }

        return output;

    }

}
```
3. Go to a grunt and type in the task name `MyTask`
4. See error "Syntax Tree Already Found" in Interact tab.

**Expected behavior**
The task should work and SharpUp must execute when `MyTask` is launched

**Screenshots**
![Screenshot from 2019-11-28 01-46-39](https://user-images.githubusercontent.com/2260634/69733418-67507180-1181-11ea-9a7c-0e6f028ccf31.png)

**Covenant Server Information:**
 - OS: Kali Linux Rolling
 - Docker or Native: Docker

**Browser Information:**
 - Browser Firefox 
 - Version 60.6.3esr

**Target Information (System that implant is running on):**
 - OS: Windows 7

**Feature Request or Bug**
Bug

**Describe the feature request or bug**
I created a Task which had some bugs in it - due to which C# compilation failed on the Grunt when I ran it. Now, when I attempt to execute any other task including a valid shellCmd on a grunt, I am stuck with "CompilerException: CompilationErrors: " errors and the previous C# compilation errors are shown. Is there a way to reset the Grunt so it does not attempt to compile the old task and just executes the specified command?

**To Reproduce**
Steps to reproduce the behavior:
1. Go to Tasks
2. Click on Create
3. Create the task below which has C# bugs in it with a single optional param called 'serverIP': 

```
using SharpUp;
using SharpSploit.Execution;

public static class Task
{
    public static string Execute(string serverIp = "")
    {
        string output = "";
        string command = "";
        try
        {   
            output += "\n"
            output += "\n"
            output += "==== Get hostname via 'hostname' command ===="
            output += "\n"
            output += "\n"
            command = "hostname";
            output += Shell.ShellCmdExecute(command);

            output += "\n"
            output += "\n"
            output += "==== Get current user and permissions via 'whoami' command===="
            output += "\n"
            output += "\n"
            command = "whoami /all";
            output += Shell.ShellCmdExecute(command);

            output += "\n"
            output += "\n"
            output += "=== SharpUp: Running Privilege Escalation Checks similar to PowerUp from Powersploit ==="
            output += "\n"
            output += "\n"
            TextWriter realStdOut = Console.Out;
            TextWriter realStdErr = Console.Error;
            TextWriter stdOutWriter = new StringWriter();
            TextWriter stdErrWriter = new StringWriter();
            Console.SetOut(stdOutWriter);
            Console.SetError(stdErrWriter);
            bool auditMode = args.Contains("audit", StringComparer.CurrentCultureIgnoreCase);
            Program.PrivescChecks(auditMode);
            Console.Out.Flush();
            Console.Error.Flush();
            Console.SetOut(realStdOut);
            Console.SetError(realStdErr);

            output += stdOutWriter.ToString();
            output += stdErrWriter.ToString();
        }
        catch (Exception e) { output += e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace; }
        return output;
    }
}
```
4. Now go to interact for a Grunt and run the task above a couple of times.
5. Subsequent execution of any other task including 'WhoAmI' show the compilation errors  for the task above.

**Expected behavior**
The task should abort if it has bugs in it and other tasks should not be affected.

**Screenshots**
Attached below.

**Covenant Server Information:**
 - OS: Kali Linux Rolling
 - Docker or Native: Docker

**Browser Information:**
 - Browser: Firefox 
 - Version: 60.6.3esr(64bit)

**Target Information (System that implant is running on):**
 - OS: Windows 7 SP1
 - Version [e.g. 22]: 6.1.7600
