As you likely have noticed, Oracle is in the process of transitioning Java EE and related projects to the Eclipse Foundation [1]. Jersey is included in this list of projects and we are pleased to announce that the initial contribution has taken place. Jersey is being contributed to Eclipse Foundation as Eclipse Jersey[2].

We would like to take this opportunity to thank all of our community members for their effort and dedication to Jersey for these many years. Thank you for your many contributions and assistance improving the quality of the project, the documentation, and identifying issues.

We intend to transition this Jersey project repository to Archive status -- which will render it "Read Only." All issues will be migrated to the Eclipse Jersey project. All pending PRs will be closed. Any remaining PRs that are still relevant will be migrated to the new Eclipse Jersey project repository at GitHub [3].

We hope that you will join us as we continue evolving the new Eclipse Jersey project. Jersey will use the Eclipse developer mailing list for product announcements and updates [4]. If you want to track issues, don't forget to follow Eclipse Jersey at it's new GitHub location. The new process for contributions under Eclipse Foundation is described under "Contributing file" at this link [5].

We look forward to your continued contributions as part of the Eclipse Foundation. We hope that this transition is easy and smooth.

Thank you again for making Jersey the best that it can be.

[1] https://blogs.oracle.com/theaquarium/ee4j%3a-an-update
[2] https://projects.eclipse.org/projects/ee4j.jersey
[3] https://github.com/eclipse-ee4j/jersey
[4] mailto:jersey-dev[at]eclipse.org, subscribe at https://accounts.eclipse.org/mailing-list/jersey-dev
[5] https://www.eclipse.org/projects/tools/about.php?id=ee4j.jersey
That would be a brilliant aggregate
```
@Value
@Builder(toBuilder = true)
@NoArgsConstructor(force = true)
@AllArgsConstructor
public class Changes {

    @Context
    Locale locale;

    @HeaderParam("Authorization")
    String token;

    @QueryParam("rewrite")
    String rewrite;

    @PathParam("id")
    String id;
    
    @JsonProperty
    @NotNull
    @Valid
    AddressDTO three;

}
```
Now AddressDTO is null, of course

so instead, 
```
@POST
UserDTO dostuff(@BeanParam Changes changes, @NotNull @Valid UserDTO)
```
you could just
```
@POST
UserDTO dostuff(@BeanParam Changes changes)
```
and of course deep nesting would allow even more.
Especially with some libraries like mapstruct, where all that hierarchy automatically would be remapped to any other bunch of objects with possibly completely different topology. This would allow very convenient transitioning from web-specific layer data to , say, db/persistence layer.
Working queries:

`http://localhost:8080/dscs/v1/targetTypes/`

`[
    {
        "description": "ORACLE CORPORATION DATABASE",
        "name": "Oracle Database",
        "resourceGroupId": 1,
        "resourceGroupName": "Oracle Built-in",
        "targetTypeClass": "Database"
    }
]`


`http://localhost:8080/dscs/v1/targetTypes/?fields=name`

`[
    {
        "name": "Oracle Database"
    }
]`



`http://localhost:8080/dscs/v1/targetTypes/?fields=name,description`

`[
    {
        "description": "ORACLE CORPORATION DATABASE",
        "name": "Oracle Database"
    }
]`


We see a issue when we specify . as a character we get the error seen below:

`http://localhost:8080/dscs/v1/targetTypes/?fields=.`

`[2018-04-09T23:22:05.787+0000] [org.glassfish.grizzly.servlet.ServletHandler] [ERROR:1] [] [org.glassfish.grizzly.servlet.ServletHandler] [ecid: test20Marc] [userTenant: dscs-tenant01] [resourceTenant: null] [serviceId: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1] [userId: test99] [host: den01cfc] [pid: 66438] [tid: Thread name=Grizzly-worker(3) Thread id=46] service exception:
 @@  javax.servlet.ServletException: javax.servlet.ServletException: javax.servlet.ServletException: java.lang.ArrayIndexOutOfBoundsException: 0
 @@     at org.glassfish.grizzly.servlet.FilterChainImpl.doFilter(FilterChainImpl.java:139)
 @@     at org.glassfish.grizzly.servlet.FilterChainImpl.invokeFilterChain(FilterChainImpl.java:106)
 @@     at org.glassfish.grizzly.servlet.ServletHandler.doServletService(ServletHandler.java:226)
 @@     at org.glassfish.grizzly.servlet.ServletHandler.service(ServletHandler.java:178)
 @@     at org.glassfish.grizzly.osgi.httpservice.OSGiMainHandler.service(OSGiMainHandler.java:126)
 @@     at org.glassfish.grizzly.http.server.HttpHandler$1.run(HttpHandler.java:224)
 @@     at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:593)
 @@     at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:573)
 @@     at java.lang.Thread.run(Thread.java:745)
 @@  Caused by: javax.servlet.ServletException: javax.servlet.ServletException: java.lang.ArrayIndexOutOfBoundsException: 0
 @@     at org.glassfish.grizzly.servlet.FilterChainImpl.doFilter(FilterChainImpl.java:151)
 @@     at org.glassfish.grizzly.osgi.httpservice.OSGiAuthFilter.doFilter(OSGiAuthFilter.java:86)
 @@     at org.glassfish.grizzly.servlet.FilterChainImpl.doFilter(FilterChainImpl.java:137)
 @@     ... 8 more
 @@  Caused by: javax.servlet.ServletException: java.lang.ArrayIndexOutOfBoundsException: 0
 @@     at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:489)
 @@     at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)
 @@     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)
 @@     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)
 @@     at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)
 @@     at org.glassfish.grizzly.servlet.FilterChainImpl.doFilter(FilterChainImpl.java:147)
 @@     ... 10 more
 @@  Caused by: java.lang.ArrayIndexOutOfBoundsException: 0
 @@     at org.glassfish.jersey.message.filtering.SelectableScopeResolver.getScopesForField(SelectableScopeResolver.java:112)
 @@     at org.glassfish.jersey.message.filtering.SelectableScopeResolver.resolve(SelectableScopeResolver.java:96)
 @@     at org.glassfish.jersey.message.filtering.CommonScopeProvider.getFilteringScopes(CommonScopeProvider.java:133)
 @@     at org.glassfish.jersey.message.filtering.CommonScopeProvider.getFilteringScopes(CommonScopeProvider.java:100)
 @@     at org.glassfish.jersey.message.filtering.ServerScopeProvider.getFilteringScopes(ServerScopeProvider.java:98)
 @@     at org.glassfish.jersey.message.filtering.spi.AbstractObjectProvider.getFilteringObject(AbstractObjectProvider.java:94)
 @@     at org.glassfish.jersey.message.filtering.spi.AbstractObjectProvider.getFilteringObject(AbstractObjectProvider.java:85)
 @@     at org.glassfish.jersey.moxy.json.internal.FilteringMoxyJsonProvider.preWriteTo(FilteringMoxyJsonProvider.java:80)
 @@     at org.eclipse.persistence.jaxb.rs.MOXyJsonProvider.writeTo(MOXyJsonProvider.java:955)
 @@     at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.invokeWriteTo(WriterInterceptorExecutor.java:265)
 @@     at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:250)
 @@     at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162)
 @@     at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:106)`
                                                                                                                                                        
To calculate the authentication string in org.glassfish.jersey.client.authentication.BasicAuthenticator the method org.glassfish.jersey.internal.util.Base64.encodeAsString() is used to do the Base64 encoding.
Unfortunately this results in a ArrayIndexOutOfBoundException when the password contains non ASCII characters like ยง (the paragraph sign) or a German Umlaut.

Some examples:
  * Base64.encodeAsString(new byte[]{(byte)128})
  * Base64.encodeAsString("ยง")

https://github.com/jersey/jersey/tree/master/examples/exception-mapping

The link to the 'WebApplicationException and Mapping Exceptions to Responses' is wrong.

https://jersey.github.io/documentation/latest/representations.html#d0e6352 is correct.

Regards,
Claudio
Jersey doesn't allow me to inject CDI bean into my custom Validator. 

Sample code:
```
@ApplicationScoped
public class AllowedWeightsValidator implements ConstraintValidator<AllowedWeights, Map<String, Integer>> {

    @Inject
    private Localizer localizer;

    @Override
    public void initialize(AllowedWeights allowedWeights) {
        // ...
    }

    @Override
    public boolean isValid(Map<String, Integer> weights, ConstraintValidatorContext context) {
        // ...
    }

}
```

The exception is:
```
<org.glassfish.jersey.server.internal.JerseyResourceContext> <BEA-000000> <Lookup and initialization failed for a resource class: class package.AllowedWeightsValidator.
A MultiException has 1 exceptions.  They are:
1. org.glassfish.hk2.api.UnsatisfiedDependencyException: There was no object available for injection at SystemInjecteeImpl(requiredType=Localizer,parent=AllowedWeightsValidator,qualifiers={},position=-1,optional=false,self=false,unqualified=null,1451781908)

        at org.jvnet.hk2.internal.ThreeThirtyResolver.resolve(ThreeThirtyResolver.java:75)
        at org.jvnet.hk2.internal.Utilities.justInject(Utilities.java:941)
        at org.jvnet.hk2.internal.ServiceLocatorImpl.inject(ServiceLocatorImpl.java:980)
        at org.jvnet.hk2.internal.ServiceLocatorImpl.createAndInitialize(ServiceLocatorImpl.java:1055)
        at org.jvnet.hk2.internal.ServiceLocatorImpl.createAndInitialize(ServiceLocatorImpl.java:1046)
        at org.glassfish.jersey.internal.inject.Injections.getOrCreate(Injections.java:173)
        at org.glassfish.jersey.server.internal.JerseyResourceContext.getResource(JerseyResourceContext.java:102)
        at org.glassfish.jersey.server.validation.internal.InjectingConstraintValidatorFactory.getInstance(InjectingConstraintValidatorFactory.java:61)
        at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.createAndInitializeValidator(ConstraintValidatorManager.java:141)
        at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:101)
        at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:125)
        at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:91)
        at org.hibernate.validator.internal.metadata.core.MetaConstraint.validateConstraint(MetaConstraint.java:83)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraint(ValidatorImpl.java:547)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForDefaultGroup(ValidatorImpl.java:487)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForCurrentGroup(ValidatorImpl.java:451)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:403)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:723)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:601)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:412)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:723)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:601)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateParametersInContext(ValidatorImpl.java:992)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateParameters(ValidatorImpl.java:300)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateParameters(ValidatorImpl.java:254)
        at org.glassfish.jersey.server.validation.internal.DefaultConfiguredValidator.onValidate(DefaultConfiguredValidator.java:175)
        at org.glassfish.jersey.server.validation.internal.ValidationInterceptorExecutor.proceed(ValidationInterceptorExecutor.java:113)
        at org.glassfish.jersey.server.validation.internal.DefaultConfiguredValidator.validateResourceAndInputParams(DefaultConfiguredValidator.java:146)
        at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:134)
        at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$TypeOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:205)
        at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)
        at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)
        at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)
        at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)
        at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)
```

Such injection should be according to Beans Validation spec (1.1, section 10.3.2) supported:
> If no custom ConstraintValidatorFactory is requested by the user, the ValidatorFactory must be configured with a custom ConstraintValidatorFactory instance that returns CDI managed beans representing the requested ConstraintValidator types

When I inject (via  ``@javax.inject.Inject``) the Validator manually, everything works as expected. The problem occurs when I have a JAX-RS ``@POST`` method accepting POJO with my custom validation annotation.

This problem can be workarounded by registering the following ContextResolver:
```
public class ValidationConfigResolver implements ContextResolver<ValidationConfig> {

    @Context
    private ResourceContext resourceContext;

    @Override
    public ValidationConfig getContext(Class<?> aClass) {
        return new ValidationConfig().constraintValidatorFactory(new CDIConstraintValidatorFactory(resourceContext));
    }

    private static class CDIConstraintValidatorFactory implements ConstraintValidatorFactory {

        private final ResourceContext resourceContext;

        public CDIConstraintValidatorFactory(ResourceContext resourceContext) {
            this.resourceContext = resourceContext;
        }

        @Override
        public <T extends ConstraintValidator<?, ?>> T getInstance(Class<T> clazz) {
            Instance<T> cdiInstance = CDI.current().select(clazz);
            return cdiInstance.isUnsatisfied() ? resourceContext.getResource(clazz) : cdiInstance.get();
        }

        @Override
        public void releaseInstance(ConstraintValidator<?, ?> constraintValidator) {
            try {
                CDI.current().destroy(constraintValidator);
            } catch (UnsupportedOperationException ignored) {
                // If CDI cannot destroy the validator, that's perfectly fine.
                // It could have been created by HK2 (ResourceContext).
            }
        }
    }

}
```

As part of the upgrade path from Dropwizard 0.x -> 1.x the jersey version was bumped to 2.25.1

What we've noticed is that across a number of our production services, we're seeing threads randomly moving from a `RUNNABLE` to a `WAITING` state and staying in that waiting state. This seems to occur randomly, but mostly centered around higher throughput paths that can sometimes incur higher latency. As these blocked threads increase over time, the thread pool is eventually starved and the service topples over.

This seems somewhat related to this previous issue (targeted for 2.26+ milestone) https://github.com/jersey/jersey/issues/3207

Here's an example from a recent thread dump. We see something similar for each stuck thread and the entries in the thread dump slowly increase over time as they're not evicted from the thread pool. 

```
"dw-2113 - GET /path/being/called..." id=2113 state=WAITING
    - waiting on <0x1f2f7a6b> (a jersey.repackaged.com.google.common.util.concurrent.AbstractFuture$Sync)
    - locked <0x1f2f7a6b> (a jersey.repackaged.com.google.common.util.concurrent.AbstractFuture$Sync)
    at sun.misc.Unsafe.park(Native Method)
    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)
    at jersey.repackaged.com.google.common.util.concurrent.AbstractFuture$Sync.get(AbstractFuture.java:285)
    at jersey.repackaged.com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:116)
    at org.glassfish.jersey.servlet.internal.ResponseWriter.getResponseContext(ResponseWriter.java:299)
    at org.glassfish.jersey.servlet.internal.ResponseWriter.callSendError(ResponseWriter.java:215)
    at org.glassfish.jersey.servlet.internal.ResponseWriter.commit(ResponseWriter.java:194)
    at org.glassfish.jersey.server.ContainerResponse.close(ContainerResponse.java:413)
    at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:784)
    at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:444)
    at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:490)
    at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:334)
    at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)
    at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)
    at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
    at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
    at org.glassfish.jersey.internal.Errors.process(Errors.java:267)
    at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)
    at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)
    at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)
    at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)
    at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)
    at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)
    at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)
    at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)
    at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49)
    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650)
    at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34)
    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)
    at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:45)
    at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39)
    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)
    at com.amazonaws.xray.javax.servlet.AWSXRayServletFilter.doFilter(AWSXRayServletFilter.java:151)
    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637)
    at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533)
    at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:188)
    at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253)
    at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:168)
    at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473)
    at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:166)
    at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155)
    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
    at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:241)
    at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:52)
    at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:527)
    at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:68)
    at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56)
    at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)
    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132)
    at org.eclipse.jetty.server.Server.handle(Server.java:561)
    at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:334)
    at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)
    at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279)
    at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:104)
    at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:289)
    at org.eclipse.jetty.io.ssl.SslConnection$3.succeeded(SslConnection.java:149)
    at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:104)
    at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124)
    at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:247)
    at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:140)
    at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:131)
    at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:243)
    at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:679)
    at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:597)
    at java.lang.Thread.run(Thread.java:748)
```
I'am working on a project using Client API,the webservice API provided by other company use a DELETE request with body.

what can I do with it?
by this?: method("DELETE",Entity.entity(json.toString(),MediaType.APPLICATION_JSON_TYPE));
The [template parameter syntax](https://javaee.github.io/javaee-spec/javadocs/javax/ws/rs/Path.html#value--) allows the regex to have one level of braces, as long as they are evenly matched, arbitrarily many times.

However, `JerseyUriBuilder` does not currently handle this correctly: all the non-URL-safe characters (such as backslashes) after the first closing brace gets encoded, making the regex unable to be compiled successfully.
JAX-RS Specification 2.1 Chapter 4.1 Line 1: "By default **a _single_ instance of each provider _class_** is instantiated for each JAX-RS application."

Jersey clearly violates this rule as it creates one instance of such a class per _provider interface_ this class implements. For example, in case a class is annotated with ```@Provider``` and implements both ```ContainerRequestFilter``` and ```ContainerResponseFilter``` then Jersey creates two instances, instead one instance. In case this class additionally implements ```Feature``` then Jersey even creates a _third_ instance.

Can be reproduce using the following code:
```
@Provider
public class MyProvider implements Feature, ContainerRequestFilter, ContainerResponseFilter {
	@Override
	public boolean configure(FeatureContext context) {
		System.out.println("Feature.this = " + this);
		return true;
	}
	@Override
	public void filter(ContainerRequestContext requestContext) {
		System.out.println("ContainerRequestFilter.this = " + this);
	}
	@Override
	public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {
		System.out.println("ContainerResponseFilter.this = " + this);
	}

}
```

Here is the result it prints after the first invocation finished:
```
Feature.this = eu.headcrashing.bugs.MyProvider@6cee903a
...
ContainerRequestFilter.this = eu.headcrashing.bugs.MyProvider@575a86ae
ContainerResponseFilter.this = eu.headcrashing.bugs.MyProvider@69767b65
```

To be compliant to the mentioned chapter of the spec, the result MUST be this instead:
```
Feature.this = eu.headcrashing.bugs.MyProvider@6cee903a
...
ContainerRequestFilter.this = eu.headcrashing.bugs.MyProvider@6cee903a
ContainerResponseFilter.this = eu.headcrashing.bugs.MyProvider@6cee903a
```
