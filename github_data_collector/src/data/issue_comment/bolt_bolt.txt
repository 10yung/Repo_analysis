Hi ,

I'm using bolt framework , I need to open a modal to display some data  without any action .so how can i remove the submit  button without getting errors ?

Regards ,
Marwa

A brief description of your feature request goes here.

<!--
If you open a "request for comment" (or "RFC" for short) please prefix your
title with [RFC]. It is expected that you are willing to help out in the
implementation of said feature request. Other appropiate labels will be applied
by the Bolt team, when assessing issues.
-->

How can you help?
-------------------------------

<!--
The resources (read: available time and effort) of Bolt's core team is limited.
If we're going to consider your request, please describe how you are willing
to help out, to see the new feature become a reality.

If we can not work on your suggestion, please don't take it personally. Most
likely, it's either:

 - We think your idea is valid, but we can't find the time to work on it.
 - Your idea might be better suited as an extension, if it's not suitable for
   the majority of users.
-->
again, as in #7805 
Bolt doesn't rename tag (from taxonomy).
If I want to rename a tag with lowercase/uppercase, Bolt do nothing.

Details
-------

| Question                      | Answer
|----------------- | ------
| Relevant Bolt Version | 3.6
| Install type                   |  Composer install
| PHP version                 | 7.0
| Web server                  | Apache


Reproduction
------------

### Bug summary

When we create a tag from "Taxonomies" tab in content type, if tag already exist (lowercase/uppercase/mix), bolt get this tag from bolt_taxonomies (from slug)

### Steps to reproduce

- Add taxonomy (tags) to content type
- Add new tag in content type (eg : "TeSt")
- Save
- Delete old tag ("TeSt"), and create new tag "TesT"
- Save

Bolt find tag by slug but the name isn't the same...
**1. **Bug Summary:****

**Stored Cross-Site Scripting:**

Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.


**Scenario:**

When an end user is searching (http://hostname/search?search=term) for any results logs are being generated in admin panel (http://hostname/_profiler/).When an end-user inputs malicious payload such as 
URL-Encoded: **%3Cimg%20src%3Dx%20onerror%3Djavascript%3Aconfirm%28113%29%3E**
Decoded: **<**img** src=x onerror=javascript:confirm(113)>**
Javascript is being executed on Database page of the admin panel (http://hostname/_profiler/token?panel=db) and unauthenticated attacker can use such malicious payloads to perform various exploits and phishing,Implement keylogger, CSRF Token Stealth,Session Aware Keylogger,etc.

**2. Steps to Reproduce:**

Navigate to http://host/
Click on Search
Input payload from above

![end-user-payload](https://user-images.githubusercontent.com/16994452/70997637-8c3e6180-20fb-11ea-93ed-ff4b7ab4c609.png)


To validate the finding login to admin console and navigate to http://hostname/_profiler and select the log with payload navigate to database (http://hostname/_profiler/token?panel=db)
Selecting Logs: 

![admin-logs](https://user-images.githubusercontent.com/16994452/70997673-9ceed780-20fb-11ea-874f-3f527baa1d30.png)

Navigating to Database: 

![admin-logs2](https://user-images.githubusercontent.com/16994452/70997691-a4ae7c00-20fb-11ea-8c8c-09f9bd2804af.png)

Payload Executed: 

![admin-logs3-paylod-reflected](https://user-images.githubusercontent.com/16994452/70997702-a8da9980-20fb-11ea-9274-9d9a7af9dd18.png)


**3. Mitigation:**

- Encode data on output. At the point where user-controllable data is output in HTTP responses, encode the output to prevent it from being interpreted as active content. Depending on the output context, this might require applying combinations of HTML, URL, JavaScript, and CSS encoding.
- Filter input on arrival. At the point where user input is received, filter as strictly as possible based on what is expected or valid input.
- Content Security Policy. As a last line of defense, you can use Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities that still occur.

References:
[https://portswigger.net/web-security/cross-site-scripting/](url)
[https://portswigger.net/web-security/cross-site-scripting/stored](url)
[https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)](url)
[https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](url)
[https://www.checkmarx.com/2017/10/09/3-ways-prevent-xss/](url)

label_heading: true / false

In #7812 I managed to fix the breaking error that occurred during exports. However, as it stands, exports still won't always work for all cases.

If your setup has a contenttype with a `select` field that pulls content from another contenttype, those values will be stored by ID by default. It's optional to use a different field for storage. That means this content might break during export-import, since those IDs might not stay the same.

The ways around this, as I see them:

* Actually store the IDs in the export (and use them when importing, too

  Pro: makes the whole process more predictable and "safe"
  Con: Will bork things up when importing into a database when there's already content there.

* On export, do a special song and dance for select content where the linking field is ID, and use that for the export data

  Pro: retain the functionality of importing into an existing database
  Con: hell of a lot more work and it feels a bit kludg-y to me

* Just not support it and notify export users of this, giving them the hint to maybe use another field for the link if they are going to use export/import in the future

  Pro: least work of all the options, no changes to possibly already used workflows so no BC break for anyone
  Con: not user friendly

Personally I'm leaning towards the first option, but I'd like some input on the matter, or maybe some insight that I might've missed.
Hi, 
We use the `maintenance_mode: true` often to block a site from visibility from the public, e.g. when it's still under development. 

Up until recently i didn't notice, but if you have a maintenance site, and you trigger a 404 (examplesite.org/hfhfhf) you see the 404 template, instead of the maintenance notice. 
I would expect the maintenance mode to block any views to any pages whatsoever, but probably, since the 404 routing is different, you see the 404 template instead.


### Steps to reproduce

- Set site config to `maintenance_mode: true`
- Refresh homepage -> you get the maintenance notice
- Trigger a 404 -> you get the 404 template

### Expected result

- Triggering the 404 would still show me the maintenance notice

Thanks for listening!

See https://github.com/bolt/bolt/pull/7743#issuecomment-463970841
A brief description of the issue goes here.

On a clean install of Bolt it keeps complaining about the database tables being out of date. Running the "update DB" command does nothing. Running the suggested SQL directly on the DB does nothing either (suggested structure is the same as the actual structure).


Details
-------

Looking at the proposed changes they're all like this:
changedColumns: array:6 [▼
    "user_id" => ColumnDiff {#2429 ▼
      +oldColumnName: "user_id"
      +column: Column {#1523 ▼  
        #_default: null
      }
      +changedProperties: array:1 [▼
        0 => "default"
      ]
      +fromColumn: Column {#2120 ▼
        #_default: "NULL"
      }
    }

As you can see it wishes to changes the default from null to "NULL". Probably some change in how MariaDB 10.3 reports datatypes.


| Question                      | Answer
|----------------- | ------
| Relevant Bolt Version | 3.6
| Install type                   |  Composer install 
| BC Break                     | no
| PHP version                 | 7.2
| Web server                  |  Nginx, version [ 1.14.2]
| For UX/UI issues        | Browser name and version


Reproduction
------------

If you're filing a bug, please describe how to reproduce it. Include as much
relevant information as possible, such as:

### Bug summary

Install Bolt with a MariaDB 10.3 database

### Specifics

Bug can be seen when accessing the backend

### Steps to reproduce

Install Bolt

### Expected result

I expect the database schema to be correct, and Bolt not to show any warnings

### Actual result

Bolt shows a message to update the DB structure

Hello,
I think adding 2FA support would significantly improve the security of websites hosted with Bolt. I don't know for sure how complicated it is to integrate.