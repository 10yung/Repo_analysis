
Brought to you by your friendly [Repository Gardener](https://github.com/GoogleCloudPlatform/repository-gardener).
#### Description
I have an application which allows the user to to sign in anonymously during on-boarding. The user can sign in at a later time using Google/Facebook/Apple Sign In. When starting and cancelling the auto upgrade process using Apple Sign In, the user account is deleted and the user is forced to sign in again, effectively losing their data. I have not found a workaround other than disabling/hiding the Apple Sign In button during the auto upgrade process, which may be against Apple guidelines. I have not attempted to release the application with the button hidden/disabled. I have verified that Apple Sign In works otherwise.

#### Environment:
Objective C or Swift: Swift
iOS version: 13.1.2
FirebaseUI version: 8.4
CocoaPods Version: 1.8.4

#### Steps to reproduce:
1. Sign in via Anonymous Auth.
2. Show FirebaseUI auth controller with Apple Sign In option, `shouldAutoUpgradeAnonymousUsers=true`.
3. Click 'Apple Sign In' option.
4. On the first Apple Sign In prompt, click cancel. 
5. Cancel auth controller to return to the app.
6. Close and restart the app.

#### Observed Results:

User is deleted. User must sign in again. Their previous data is effectively lost.
Never receive callback that login was cancelled.
  
#### Expected Results:

User should not be signed out if the sign in process was cancelled. I've verified that cancelling Google or Facebook sign in flow has no such effect.
Should receive callback that login was cancelled.

#### Relevant Code:
Looks to me that`FUIOAuth.signOut` is called when the sign in flow is initiated, which in turn calls `FIRUser.deleteWithCompletion`. 

  * Xcode version: Version 11.3 (11C29)
  * Firebase SDK version: deepens on component, not using the full sdk
  * Firebase Component: FirebaseAnalytics, FirebaseUI/Auth, FirebaseUI/Email, Crashlytics( ~> 3.12.0), FirebasePerformance( ~> 2.2), Firebase/Core

  * Component version: * see above. this is installed via cocoaPods

Description: 
The console log are showing many very invasive and frequent logs...
2020-01-10 13:42:26.428211-0500 notio[6974:2438880] [Assert] Unsupported use of UIKit API off the main thread: UIAccessibilityIsGuidedAccessEnabled()
2020-01-10 13:42:26.431560-0500 notio[6974:2438880] [Assert] Unsupported use of UIKit API off the main thread: UIAccessibilityIsAssistiveTouchRunning()

 Steps to reproduce:
Install the cocoaPods component and use them. Un able to pinpoint why this is happening

The problem is as said previously, extremely invasive logs that are making debugging difficult to read. 

2020-01-10 13:42:26.428211-0500 notio[6974:2438880] [Assert] Unsupported use of UIKit API off the main thread: UIAccessibilityIsGuidedAccessEnabled()
2020-01-10 13:42:26.431560-0500 notio[6974:2438880] [Assert] Unsupported use of UIKit API off the main thread: UIAccessibilityIsAssistiveTouchRunning()


pod installation 

platform :ios, '11.0'
target 'MyAppThing' do
  use_frameworks!
  pod 'SwiftLint'
  pod 'Firebase/Core'
  pod 'FirebaseAnalytics'
  pod 'FirebaseUI/Auth'
  pod 'FirebaseUI/Email'
  pod 'Crashlytics', '~> 3.12.0'
  pod 'FirebasePerformance', '~> 2.2'
  pod 'iOSDFULibrary'
end
Hi - I am trying to submit my app to the App Store but it got rejected by the App Review Team here is what they wrote:
 
"Guideline 2.5.13 - Performance - Software Requirements:
The Apple Sign-in authentication method does not use LocalAuthentication as the App's primary authentication mechanism. LocalAuthentication must be your app's primary biometric authentication method, and any other custom facial recognition mechanism should be optional for login and cannot replace LocalAuthentication."

I have implemented the new FUIOAuth.appleAuthProvider() method to comply with the new rule that requires developers to provide sign-in with Apple in their App. As it stands if we cannot use FUIOAuth.appleAuthProvider() to implement "sign-in with Apple" then we can't use the FUIAuth at all. 

My only option for now is to implement Apple sign-in only outside of FUIAuth and implement the required LocaAuthentication protocol myself.

Could you please suggest any workaround this issue? Did it happen to anyone besides me?

Thanks
  

I am trying to Integrate `FirebaseUI` and implemented  `FUIAuthDelegate` but unfortunately I am getting this warning 

<img width="725" alt="Screenshot 2019-12-23 at 7 16 49 PM" src="https://user-images.githubusercontent.com/18505536/71472313-50d71d80-27f4-11ea-836a-b0314c231d10.png">


and delegates method are not working 

I have check `8.4`, `8.0` both version but getting same issue 
using Xcode 11.2.1



### Step 1: Are you in the right place?

  * For issues or feature requests related to the code **in this repository** file a GitHub issue.
  * For general technical questions, post a question on [StackOverflow](http://stackoverflow.com/) tagged appropriately.
  * For general Firebase discussion, use the [firebase-talk google group](https://groups.google.com/forum/#!forum/firebase-talk)
  * For help troubleshooting your application that does not fall under one of the above categories, reach out to the [personalized Firebase support channel](https://firebase.google.com/support/contact/troubleshooting/)

### Step 2: Describe your environment

  * Objective C or Swift: Swift
  * iOS version: 13
  * Firebase SDK version: 6.14
  * FirebaseUI version: 8.4
  * CocoaPods Version: 1.8.4
  
### Step 3: Describe the problem:

#### Steps to reproduce:

  1. Sign in using Sign In With Apple for the first time
  
#### Observed Results:

  * What happened? 

Auth.auth().currentUser?.displayName in nil
  
#### Expected Results:

  * What did you expect to happen?

For Auth.auth().currentUser?.displayName to be set to the fullName value of the ASAuthorizationAppleIDCredential passed into the authorizationController:didCompleteWithAuthorization method of the ASAuthorizationControllerDelegate

Welcome to FirebaseUI and thanks for submitting an issue!

If not, please feel free to fill in the following info so we can help faster!

### Step 1: Are you in the right place?

Yes.

### Step 2: Describe your environment

  * Objective C or Swift: Swift
  * iOS version: iOS 13
  * Firebase SDK version: Unrelated
  * FirebaseUI version: 8.4.0
  * CocoaPods Version: N/A
  
### Step 3: Describe the problem:

When using `FUIEmailAuth` where `allowNewEmailAccounts` is set to `NO`, the user is unable to tap the email textfield to enter an email.

#### Steps to reproduce:

  1. Instantiate an instance of `FUIEmailAuth` with `allowNewEmailAccounts` as `NO`
  2. Instantiate an instance of `FUIAuth` and add the above as a provider
  3. Run the app and tap `Sign in with email`
  
#### Observed Results:

  * Unable to enter email address.
  
#### Expected Results:

  * Should be able to enter email address.
  
#### Relevant Code:

  ```
https://github.com/firebase/FirebaseUI-iOS/blob/master/EmailAuth/FirebaseEmailAuthUI/FUIPasswordSignInViewController.m#L262
  ```

I think that `cell.textField.enabled` should only be `NO` when the `_email` property of the `FUIPasswordSignInViewController` class is non-null.

For a better experience, the email textfield should always be enabled in case the user wants to use a different email to sign in.
It'll be helpful to add a swiftUI example that uses the standard FirebaseUI.  Here's skeleton code that works for me:

```
import SwiftUI
import FirebaseUI
import Firebase

public var screenWidth: CGFloat {
	return UIScreen.main.bounds.width
}

public var screenHeight: CGFloat {
	return UIScreen.main.bounds.height
}

struct LoginView : View {
	
    @State private var viewState = CGSize(width: 0, height: screenHeight)
    @State private var MainviewState = CGSize.zero
	
	var body : some View {
		ZStack {
			CustomLoginViewController { (error) in
				if error == nil {
					self.status()
				}
			}.offset(y: self.MainviewState.height).animation(.spring())
			MainView().environmentObject(DataStore()).offset(y: self.viewState.height).animation(.spring())
		}
	}
	
	func status() {
		self.viewState = CGSize(width: 0, height: 0)
		self.MainviewState = CGSize(width: 0, height: screenHeight)
	}
}

struct LoginView_Previews : PreviewProvider {
	static var previews : some View {
		LoginView()
	}
}

struct CustomLoginViewController : UIViewControllerRepresentable {
	
	var dismiss : (_ error : Error? ) -> Void
	
	func makeCoordinator() -> CustomLoginViewController.Coordinator {
		Coordinator(self)
	}
	
	func makeUIViewController(context: Context) -> UIViewController
	{
		let authUI = FUIAuth.defaultAuthUI()
		
		let providers : [FUIAuthProvider] = [
			FUIEmailAuth(),
			FUIGoogleAuth(),
			FUIOAuth.appleAuthProvider()
		]

		authUI?.providers = providers
		authUI?.delegate = context.coordinator
		
		let authViewController = authUI?.authViewController()

		return authViewController!
	}
	
	func updateUIViewController(_ uiViewController: UIViewController, context: UIViewControllerRepresentableContext<CustomLoginViewController>)
	{
		
	}
	
	//coordinator
	class Coordinator : NSObject, FUIAuthDelegate {
		var parent : CustomLoginViewController
		
		init(_ customLoginViewController : CustomLoginViewController) {
			self.parent = customLoginViewController
		}
		
		// MARK: FUIAuthDelegate
		func authUI(_ authUI: FUIAuth, didSignInWith authDataResult: AuthDataResult?, error: Error?)
		{
			if let error = error {
				parent.dismiss(error)
			}
			else {
				parent.dismiss(nil)
			}
		}
		
		func authUI(_ authUI: FUIAuth, didFinish operation: FUIAccountSettingsOperationType, error: Error?)
		{
		}
	}
}

```

In my SceneDelegate.swift, I'm calling the following in scene:willConnectTo:

```
// Use a UIHostingController as window root view controller.
if let windowScene = scene as? UIWindowScene {
    let window = UIWindow(windowScene: windowScene)
    if Auth.auth().currentUser == nil {
        window.rootViewController = UIHostingController(rootView: LoginView())
    }
    else {
        window.rootViewController = UIHostingController(rootView:MainView().environmentObject(DataStore()))
    }
			
    self.window = window
    window.makeKeyAndVisible()
}
```

Hope this helps.



I'm getting `No such module 'FirebaseUI'` on Xcode 11.3.  I'm using SwiftUI, and this should be working right?  

Here's my pod file:

```
pod 'Firebase/Core'
pod 'Firebase/Firestore'
pod 'Firebase/Auth'
pod 'Firebase/Storage'
pod 'Firebase/Analytics'
#pod 'GoogleSignIn'
pod 'FirebaseUI', '~> 5.0'  
```

Looks like Facebook has issues:

`No known class method for selector 'objectForJSONString:error:'`

for line:

NSDictionary *clientState = [FBSDKInternalUtility objectForJSONString:parameters[FBSDKLoginManagerLoggingClientStateKey] error:NULL];

Thanks