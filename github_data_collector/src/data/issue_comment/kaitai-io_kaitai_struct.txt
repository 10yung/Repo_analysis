Since recent updates of sbt, it started to give this warning:

```
/home/travis/build/kaitai-io/kaitai_struct/compiler/build.sbt:22: warning: method crossProjectFromBuilder in trait CrossProjectExtra is deprecated (since 0.6.23): The built-in cross-project feature of sbt-scalajs is deprecated. Use the separate sbt plugin sbt-crossproject instead: https://github.com/portable-scala/sbt-crossproject
lazy val compiler = crossProject.in(file(".")).
                    ^
```

It looks like we need to migrate to https://github.com/portable-scala/sbt-crossproject
Hi,

  I would be interesting to have some kind of templated, or parametrized, type name. Some kind of:

`- id: some_field`
` type: templated_type(param_1, param_2)`

then I have a templated_type.ksy, something like this:

`imports:`
`  - some_type_<selector>`

`params:`
`  - id: version`
`     type: str`
`  - id: other_param`
`    type: u4`

`seq:`
` - id: a_field`
`.   type: a_type`
` - id: final_field`
`    type: some_type_<selector>(a_field.some_data)`

Then we could have a bunch of some_type_*.ksy files which could do:

`  some_type_one:`
`    params:`
`      - id: some_param`
`      .....`

`  some_type_two:`
`    params:`
`     - id: some_param`
`     ....`

A switch is what I'm using today, but it requires modifying templated_type.ksy for ever new selector of some_type, on imports and case select. The procol I'm working, have lot of versions as selectors, for diferent categories which is also a possible selector.




File contains some count of fixed size blocks
Data entry may consist of 1..n block, last block marked with magic signature

The objective is:
step 1: Use array & repeat-until to locate data entries
step 2: Create instance and if necessary, substream to handle variable size data

Is it possible to get array io object?
Or is there a way to handle structure other way (mb pos?)

```
seq:
  - id: entries
    type: entry_t
    repeat: eos
    
types:
  entry_t:
    seq:
      - id: blocks
        type: block_simplified
        size: 1024
        repeat: until
        repeat-until: _.sign == 'EndMarker____'
        
    instances:
      data_processed:
        io: blocks._io   # if it would be possible to get io of all array this will work
		type: entry_ext_t
        size: 1024 * blocks.size # specify size to create substream

  block_simplified: # simple block description just to find end marker
    seq:
      - id: filler
        size: 1024 - (13)
      - id: sign
        type: str
        size: 13

  entry_ext_t: # ext blocks description to handle data
    seq:
   # ....... struct fields - data will be handled here
```


Script is mentioned in updated documentation in the https://github.com/kaitai-io/kaitai_struct_doc/pull/31
Any plans? Not having buster packages is a showstopper for me at least; the kaitai build toolchain is a bit too esoteric for me to dig into.
Python 3 (2 is EOL) allows to add some type hints. They are not enforced without special measures, but can be used by linters (like `mypy`), REPLs and langservers.

1. `import typing` to the top of a file
2. Output type of a function is shown by an `->` before `:`
3. Types of arguments are shown by adding `: TypeOfArg` right after arg name
4. Union types are `typing.Union[T1, T2]`
5. Lists are `typing.List[T]`, or maybe even more generic `typing.Iterable[T]`
6. type of `self` is usually not marked as a type of an arg
7. If a func returns nothing, use `-> None`
8. You need to set the types as strings containing their names if the type is not yet defined:

```python
def a(b: "A") -> "A":
  return b
class A:
  def __init__(self, asdf: typing.Optional["A"] = None) -> None:
    pass
class B:
  def __init__(self, asdf: A) -> None:
    pass

```
In the financial industry the [ISO 8583](https://en.wikipedia.org/wiki/ISO_8583) protocol is widely used. This protocol consist of:
1. A _bitmap_ -- several bytes, each bit in their determines, that fields present in the message
2. Message fields

For example, first 2 fields of many ISO 8583 implementations can be described by the following `ksy` schema:
```yaml
meta:
  id: iso8583
  endian: be
types:
  str2:
    seq:
      - id: length
        type: u2
      - id: value
        size: length
        type: str
        encoding: ASCII
seq:
  - id: bitmap
    type: b1
    repeat: expr
    repeat-expr: 64
  - id: secondary_bitmap
    type: b1
    repeat: expr
    repeat-expr: 64
    if: bitmap[0]
  - id: pan
    doc: n..19
    type: str2
    if: bitmap[1]
```

Protocol itself is not describes, how to determine field length. So it is not backward-compatible, if you add new field between already defined fields, because old clients will not known, how to skip unknown field -- they do not known its length. That means, that parsers must throws an exception, when it comes with unknown field.

How to express that in `ksy`? Right now, if delete `secondary_bitmap` member from definition and try to parse message, that contains both, `secondary_bitmap` and `pan` fields, `ksy` will parse bytes from `secondary_bitmap`, as `pan` field
In some cases you may want to enhance generated classes with custom stuff. The easiest way to do that -- supply custom base class. Expected result (for Java):
```yaml
meta:
  id: format
  …
```
```java
// Generated by ksc
public class Format extends MyBaseFormat {
  ...
}
// somewhere in the codebase, handwrited class
class MyBaseFormat extends KaitaiStruct {
  ...
}
```
In #670 you can notice, that with different case types in `switch-on` node resulting field type can be reduced to very generic type (for example, `Object` in Java). In order to improve user experience, we can add additional information to field documentation, that will contain all types, that field can contain. For specified example, Javadoc can be supplemented with text:
```java
/**
 * …Javadoc from `doc` attribute...
 *
 * <p>Field can have values of following classes:
 * <ul>
 * <li>{@link Inner}</li>
 * <li>{@code byte[]}</li>
 * </ul>
 */
```

Such addition do not required for languages, that can express returned type in their types. For now that will be useful at least for Java and C#
When `ksc` produces error it won't tell in what line it is originated.

Also, most errors are very obscure