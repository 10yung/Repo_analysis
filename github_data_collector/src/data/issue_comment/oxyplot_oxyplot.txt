### Steps to reproduce

1. Create a histogram chart using mapped objects in the ItemsSource
2. Set the TrackerString to use a property of the mapped objects
3. Observe that when mousing over the chart an exception is thrown

Platform:
.NET version:

### Expected behaviour

No exception should be thrown

### Actual behaviour

The problem is in HistogramSeries.GetNearestPoint() 

`return new TrackerHitResult
                        {
                            Series = this,
                            DataPoint = p,
                            Position = point,
                            Item = null,
                            Index = -1,
                            Text = StringHelper.Format(
                            this.ActualCulture,
                            this.TrackerFormatString,
                            null,
                            this.Title,
                            this.XAxis.Title ?? DefaultXAxisTitle,
                            this.XAxis.GetValue(p.X),
                            this.YAxis.Title ?? DefaultYAxisTitle,
                            this.YAxis.GetValue(p.Y),
                            item.RangeStart,
                            item.RangeEnd,
                            item.Value,
                            item.Area,
                            item.Count),
                        };`

The Item = null is wrong, as is the Index = -1 and the StringHelper being passed null.
Both null objects should instead be set to the item from the ItemsSource (or GetItem(index)) and the index should be set. This appears to be merely unfinished code that someone forgot to come back to

 
As a feature it would be great if it was possible to render lines ( dashed or solid )  with the possibility to configure if I want the dots to be represented or not. looks like even if I select solid Style the dots are always rendered. 


### Feature description

It should be possible to decimate the number of shown points in more ways. If a plot consists of many points (platform dependent) this results in a poor performance. However most of the time it is not needed to display every point of the series as neither the human eye can't distinguish between all the points on the screen nor the resolution of the usual displays is high enough.

For example a cosinus curve off 100000 points looks like this.
![image](https://user-images.githubusercontent.com/5380109/71726600-e5b2ca00-2e37-11ea-8e92-595c37a79ae2.png)
But in this image only every 50th point (every "x") is displayed.

For a steadily curve without any spikes or jumps this seems sufficient.

At the company, I am working in, we have the issue that we want to display line series which consists of many points. But if you look at the complete series it is sufficient to see how the data is shaped - without every tiny detail.

Sometimes we have spikes in those line series. With equally spaced points you wont see those spikes. But this is easy to overcome if one always chooses the min/max point for displaying, which is shown in the following image.
![image](https://user-images.githubusercontent.com/5380109/71726638-011dd500-2e38-11ea-889d-69ed8f8fce04.png)

By zooming in one can then better see how the curve is shaped in a specific area.
![image](https://user-images.githubusercontent.com/5380109/71726718-30ccdd00-2e38-11ea-8837-40a04dae42f0.png)


<!-- IF THE ISSUE IS A NEW FEATURE REQUEST, INCLUDE THIS PART: -->

### Again support .NET 4.0 for WinForms and WPF

As discussed by email, I believe really good libraries should not be limited to the latest bells and whistles, as not all applications can keep up with Microsoft release cycles and support deadlines. .NET 4.0 is the last version of .NET supported on WinXP, and a tool e.g. used on an autonomous machine in a production environment may be tied to the OS version used on that machine. So I ask for maintaining support for .NET 4.0 for WinForms and WPF, even knowing that Microsoft officially ended support for .NET 4.0. (Note that if the Microsoft dates were strictly followed, .NET 3.5 SP1 would still have to be supported.  .NET 3.5 SP1 is officially supported until 2023/2028.)
I was wondering if the following is a bug.

**Environment**
-  Oxyplot.Core 2.0
-  Oxyplot.Wpf 2.0
-  .Net 4.6.1

**How to reproduce**

**1. Model Definition**
 
            var dataPoints = Enumerable.Range(1, 10).Select(x => new DataPoint(x, x * 10));
            GraphModel = new PlotModel();
            GraphModel.Title = "Sample Test";
            GraphModel.Series.Add(new LineSeries
            {
                ItemsSource = dataPoints,
                Color = OxyColors.Blue,
                MarkerType = MarkerType.Square,
                TrackerFormatString = $"{{ 0 }}\n\n\n\n\n\n\n{{ 1 }}:  {{2:0.###}}\n\n\n\n\n\n\n\n{{3}}: {{4:0.###}}"
            }); ;
            GraphModel.InvalidatePlot(true);


**2. Xaml**

                    <UserControl.Resources>
                                    <popups:ScreenPointToOffSetScreenPointConverter x:Key="ScreenPointToOffSetScreenPointConverter"/>
                                </UserControl.Resources>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="3*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                            <oxy:PlotView Grid.Row="0" Model="{Binding GraphModel}">
                                <oxy:PlotView.DefaultTrackerTemplate>
                                    <ControlTemplate>
                                        <oxy:TrackerControl Position="{Binding Position,Converter={StaticResource ScreenPointToOffSetScreenPointConverter}}" LineExtents="{Binding PlotModel.PlotArea}">
                                            <oxy:TrackerControl.Background>
                                                <LinearGradientBrush EndPoint="0,1">
                                                    <GradientStop Color="#f0e0e0ff" />
                                                    <GradientStop Offset="1" Color="#f0ffffff" />
                                                </LinearGradientBrush>
                                            </oxy:TrackerControl.Background>
                                            <oxy:TrackerControl.Content>
                                                <TextBlock Text="{Binding}" Margin="7" />
                                            </oxy:TrackerControl.Content>
                                        </oxy:TrackerControl>
                                    </ControlTemplate>
                                </oxy:PlotView.DefaultTrackerTemplate>
                            </oxy:PlotView>
                            <TextBlock Grid.Row="1" Background="AliceBlue" Text="Test Control" />
                        </Grid>                          


Where _ScreenPointToOffSetScreenPointConverter_ is defined as

```
public class ScreenPointToOffSetScreenPointConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is ScreenPoint screenPoint)
            {
                return new ScreenPoint(screenPoint.X, screenPoint.Y + 100);
            }
            return value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // TODO: Implement
            throw new NotImplementedException();
        }
    }
```

Please note the sole point of having _ScreenPointToOffSetScreenPointConverter_ is to ensure the tooltip extends beyond the bottom of chart for lowest point.

**Actual Behavior**

![image](https://user-images.githubusercontent.com/24619049/71651897-2383f580-2d47-11ea-95b4-e6b816271f30.png)

The TextBlock control which lies in the second row of the Grid, overlays the tooltip as seen in the screenshot. Please note, for the given example, setting `Panel.ZIndex` for the PlotView Control would solve the issue. 

However, if the controls is being dynamically added to the scene and there is another control below the control (which  was added before this control), then the issue surfaces again.

Is this a bug or intended behavior ? Is there a workaround ? 

Thanks
Anu


<!-- 
Please see https://github.com/oxyplot/oxyplot/wiki/Contributing before creating issues.
For issues related to Xamarin, please use https://github.com/oxyplot/oxyplot-xamarin/issues
For issues related to other platforms, please add to the correct repository.

PLEASE DO NOT USE THE ISSUES TO ADD QUESTIONS ABOUT HOW TO USE THE LIBRARY.
YOU SHOULD FORMULATE THE ISSUE AS A "BUG REPORT" OR "NEW FEATURE REQUEST",
PLEASE USE ONE OF THE SECTIONS BELOW:
-->

<!-- IF THE ISSUE IS A BUG, INCLUDE THIS PART: -->
Using v1.0.0 of OxyPlot and OxyPlot.WindowsForms in VS2013 I used to be able to add a scaling factor to the line series using the ScaleFactor member. Now if I upgrade to v2.0.0 this is no longer available. 

### Steps to reproduce

1. Add a code line such as lineSeries.ScaleFactor = 0.1; and the new version says it's not available.

Platform:
.NET version: 4.5

### Expected behaviour

When I used v1.0.0 this used to work and all the points in the individual line series would be scaled accordingly.

### Actual behaviour

From the Output window in VS:
Error	1	'OxyPlot.Series.LineSeries' does not contain a definition for 'ScaleFactor' and no extension method 'ScaleFactor' accepting a first argument of type 'OxyPlot.Series.LineSeries' could be found (are you missing a using directive or an assembly reference?)	G:\Development\BuildReleases\Main\Source\DiagnosticChartingTool\Graph.cs	356	18	DiagnosticChartingTool




<!-- IF THE ISSUE IS A NEW FEATURE REQUEST, INCLUDE THIS PART: -->

Hello,
I've found a bug.

### Steps to reproduce
1. Open documentation, Getting started section, WPF (XAML) chapter
2. Follow steps in "Create the view" part regarding how to add Plot control at Toolbox
3. Browse OxyPlot.Wpf.dll in solution folder and add it to Toolbox

Platform: Windows 10, Visual Studio 16.4.1
.NET version: Core 3.0
OxyPlot version: OxyPlot.Wpf 2.0.0

### Expected behaviour
Plot control added at Toolbox so it could be used in design view.

### Actual behaviour
Following error message appears:

![devenv_5MCWrAP1aB](https://user-images.githubusercontent.com/24947452/70704464-185b1e00-1ce3-11ea-8bc7-884e8be2029f.png)

I tried different versions of this dll from neighbour subfolders in "packages" folder - none helped.
Hello, 
I found the following weird behaviour and it may is a bug.

### Environment
- .Net Core 3.0 WPF
- OxyPlot.Core 2.0.0
- OxyPlot.Wpf 2.0.0

### How to reproduce
1. Add the following line to your XAML
```CSharp
<oxy:PlotView x:Name="OxyPlotView" Width="250" Height="250" Margin="0,30,0,0" />
```
2. Add this method [https://pastebin.com/NDZsXsuL](https://pastebin.com/NDZsXsuL) that corresponding window/page .cs file
3. Call `OxyPlotTesting();` at the constructor

Run the program. Then it should look similar to this
![image](https://user-images.githubusercontent.com/19890733/70488093-e174e480-1af7-11ea-91d7-cb8336065cf1.png)

As you can see the points that lay directly on the edges are cut off.

### The next step
If I now add a title to my model like so `OxyPlotView.Model = new PlotModel() { Title = "TestPlot" };` the behaviour is different.
![image](https://user-images.githubusercontent.com/19890733/70488500-306f4980-1af9-11ea-9611-c7856d999b71.png)

### The step after
Now I remove the `Position = AxisPosition.Bottom` line on my axis. And now I see all marker by the cost of one axis.
![image](https://user-images.githubusercontent.com/19890733/70488638-a2e02980-1af9-11ea-8700-bf09e5adfda3.png)

### Expected behaviour 
I expect the result of "The set after" but at the configuration of the raw pastebin code. I could cheat and set the properties `AbsoluteMinimum` and `AbsoluteMaximum` to something like +/-1.000000001. But I need that exact +/- 1.

Now the question to the developers. Is that behaviour like you would expect it or would you agree to my assumption?
Hi there

I am using Oxyplot in my C# application.

in this diagram, does the axis disappear when I zoom in on the diagram?

**Diagram with zoom-out**

![axisdefault](https://user-images.githubusercontent.com/23260197/70244824-6c12b800-1775-11ea-84c1-7fcad57ad630.PNG)

**Diagram  zoom-in**
![Axis2](https://user-images.githubusercontent.com/23260197/70244876-7fbe1e80-1775-11ea-88e4-3121a98d3202.PNG)



I have tried to set the Shift property for all my axes, but it has no effect.

Any ideas? Thank you in advance!

<!-- 

Please see https://github.com/oxyplot/oxyplot/wiki/Contributing before creating issues.
For issues related to Xamarin, please use https://github.com/oxyplot/oxyplot-xamarin/issues
For issues related to other platforms, please add to the correct repository.

PLEASE DO NOT USE THE ISSUES TO ADD QUESTIONS ABOUT HOW TO USE THE LIBRARY.
YOU SHOULD FORMULATE THE ISSUE AS A "BUG REPORT" OR "NEW FEATURE REQUEST",
PLEASE USE ONE OF THE SECTIONS BELOW:
-->

<!-- IF THE ISSUE IS A BUG, INCLUDE THIS PART: -->

Platform:
.NET version:
WPF
Oxyplot.wpf Version 1.0.0


Example Code  : 

 

   public void TestModel()
        {
 
            XAxis = new LinearAxis
            {
                Key = "xAxisKeyPositive",
                Position = AxisPosition.Top,
                PositionTier = 0,
                AxislineStyle = LineStyle.Solid,
                Minimum = 0,
                StartPosition = 0.5,
                EndPosition = 1,
                PositionAtZeroCrossing = true,
                AbsoluteMinimum = 0,
                Title ="X1",

            };
            Model.Axes.Add(XAxis);

            XAxis2 = new LinearAxis
            {
                Key = "xAxisKeyNegative",
                Position = AxisPosition.Top,
                PositionTier = 0,
                AxislineStyle = LineStyle.Solid,
                Minimum = 0,
                AxislineColor = OxyColors.Gold,
                StartPosition = 0.5,
                EndPosition = 0,
                PositionAtZeroCrossing = true,
                IsAxisVisible = true,
                AbsoluteMinimum = 0,
                Title = "X",

            };
            Model.Axes.Add(XAxis2);
            YAxis = new LinearAxis
            {
                Key = "yAxisKeyPositive",
                Position = AxisPosition.Left,
                AxislineStyle = LineStyle.Solid,
                Minimum = 0,
                AxislineColor = OxyColors.Green,
                PositionTier = 0,
                StartPosition = 0.5,
                EndPosition = 1,
                PositionAtZeroCrossing = true,
                AbsoluteMinimum = 0,
                AbsoluteMaximum = 1000,
                Title = "Y",

            };
            Model.Axes.Add(YAxis);
            YAxis2 = new LinearAxis
            {
                Key = _yAxisKeyNegative,
                Position = AxisPosition.Right,
                AxislineStyle = LineStyle.Solid,
                Minimum = 0,
                AxislineColor = OxyColors.Violet,
                PositionTier = 0,
                StartPosition = 0.5,
                EndPosition = 0,
                PositionAtZeroCrossing = true,
                AbsoluteMinimum = 0,
             
            };
            Model.Axes.Add(YAxis2);

        
            Model.PlotAreaBorderThickness = new OxyThickness(1, 1, 1, 1);
          
	
	}
	
Hi there

We use OxyPlot in my app and we move the focused element via command and tab key. Now we noticed that if we include a plot to a view the plot is foocuable by default and 3 tab downs are needed to go over the plot. 

I set Focucable to false in WPF but there is still a ContentControl which takes over the focus. I think If i set, Focusable to False no item within the plot control should be focusable, isn't it?

Thx for information!
Regards Guenter
