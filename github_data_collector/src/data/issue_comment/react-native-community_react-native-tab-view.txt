<!-- Please provide enough information so that others can review your pull request. -->
<!-- Keep pull requests small and focused on a single change. -->

### Motivation

Run the example project in the browser. This will help provide a way for easily adding web features.

<!-- What existing problem does the pull request solve? Can you solve the issue with a different approach? -->

### Test plan

Run `expo start:web` or `yarn web` in the example folder.

<!-- List the steps with which we can test this change. Provide screenshots if this changes anything visual. -->

### Notes

Thanks to @satya164 for helping to troubleshoot getting this running.

- Changing `.babelrc` to `babel.config.js` fixed TypeScript support.
- Adding an extra babel loader added TypeScript support in the `src/` folder while working on the example.


renderScene method render to many times. and content is the webview, can`t scroll
<!-- Issues that don't use this template are likely to be closed. -->

### Current behaviour

<!-- What's currently happening? -->

### Expected behaviour

<!-- What do you expect to happen? If there is an error, provide the complete error message with stack trace. -->

### Code sample

For Syntax Highlighting check this [link](https://help.github.com/en/articles/creating-and-highlighting-code-blocks)

<!-- Provide a complete code sample that could be run to reproduce the issue, ideally on snack.expo.io or in a github repo. -->

### Screenshots (if applicable)

<!-- Include screenshots if there's a bug in the layout. -->

### What have you tried

<!-- List down the steps you have tried to fix or identify the issue and links to any related issues you found. -->

### Your Environment

| software                     | version
| ---------------------------- | -------
| ios or android               |
| react-native                 |
| react-native-tab-view        |
| react-native-gesture-handler |
| react-native-reanimated      |
| node                         |
| npm or yarn                  |

# Current behaviour

I'm trying to create the following UI for the TabBar, but am having trouble with centering the indicator below the tabs.

Expected result (ignore the icons):
![image](https://user-images.githubusercontent.com/167339/71445831-e9eb3300-2725-11ea-8c2a-e350f3095f98.png)
 
Actual result (with the code below):
![image](https://user-images.githubusercontent.com/167339/71445907-9cbb9100-2726-11ea-89e5-e8d626563eaa.png)




### Expected behaviour

The indicator tab should be aligned with the tabs, even if they're centered.

### Code sample

```typescript
<TabBar
  {...props}
  style={{
    backgroundColor: 'white',
  }}
  tabStyle={{
    width: 80,
    marginHorizontal: 8,
  }}
  contentContainerStyle={{
    justifyContent: 'center',
  }}
  labelStyle={{
    fontSize: 13,
    fontWeight: '600',
    textTransform: 'capitalize',
  }}
  indicatorStyle={{
    height: 3,
    bottom: 6,
    backgroundColor: 'rgb(107,132,243)',
  }}
  activeColor={'rgb(107,132,243)'}
  inactiveColor={'rgb(168,170,199)'}
/>
```

### Your Environment

| software                     | version
| ---------------------------- | -------
| ios or android               | either
| react-native                 |  0.61.4
| react-native-tab-view        | 2.11.0
| react-native-gesture-handler | 1.5.2
| react-native-reanimated      | 1.4.0
| node                         | 12.3
| npm or yarn                  | npm

NOTE: I am aware that this is not a bug in the conventional sense, but there is only one issue template available!

### Current behaviour

`TabView` does not "bounce" on iOS (that effect that happens when you over-scroll) when scrolling past the view's edge.

### Expected behaviour

`TabView` should support bouncing on iOS. Perhaps it should expose a `bounces` prop like [`TabBar`](https://github.com/react-native-community/react-native-tab-view#bounces) and [`ScrollView` ](https://facebook.github.io/react-native/docs/scrollview#bounces) do.

### What I have tried

In earlier versions of this library, I was able to add bouncing by creating a fork and exposing the `bounces` prop of `TabViewPagerScroll`. This cannot be done with the new pager because it does not use `ScrollView`. Is there a way to achieve the same effect with the current `Pager` (via `PanGestureHandler` and `Animated.View`)?

### My Environment

| software                     | version
| ---------------------------- | -------
| ios or android               | ios 12.1 
| react-native                 | 0.61.2
| react-native-tab-view        | 2.10.0
| react-native-gesture-handler | 1.5.0
| react-native-reanimated      | 1.3.0
| node                         | 11.14.0
| npm or yarn                  | npm 6.9.0

<!-- Please provide enough information so that others can review your pull request. -->
<!-- Keep pull requests small and focused on a single change. -->

### Motivation

<!-- What existing problem does the pull request solve? Can you solve the issue with a different approach? -->
exposed TabView Props and TabBar Props for external use.
This will help when one wants to make a customized TabView and TabBar with fixed props to use for their projects.

### Test plan

<!-- List the steps with which we can test this change. Provide screenshots if this changes anything visual. -->

# Can't use renderPager function in TabView

## Specifications

  - React Native Version: 0.60.5
  - Platform: Android & iOS
  - tab-view version : ^2.11.0

As the title mention.. I keep having this problem whenever i'm using renderPager.. I need to use this renderPager because of this problem cause at #243 .. So I need to use the renderPage no matter what.. 

Here's the code:
```
import * as React from 'react';
import { View, StyleSheet, Dimensions,Text } from 'react-native';
import { TabView, TabBar, SceneMap,TabViewPagerPan,TabViewPagerScroll } from 'react-native-tab-view';
import { Table, Row, Rows } from 'react-native-table-component';


const initialLayout = { width: Dimensions.get('window').width };

export default class TabViewExample extends React.Component {

  constructor(props) {
    super(props);

    this.state = {
      index: 0,
      routes: [
        { key: 'first', title: 'Current' },
        { key: 'second', title: 'History' },
      ],
      tableHead: ['Book Title', 'Borrowed', 'Due'],
      tableData: [],
      tableHead2: ['Book Title', 'Borrowed', 'Due'],
      tableData2: [],
      isLoading:true,
      tabflex:6,
      thislang:'english',    
            noRecord:false,
            runIndicator:true
    }
  }

  FirstRoute = () => {
    views=[]
      views.push(
        <View style={{

          margin:10,
        }} key='tb'>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>

        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>

        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>
        <Text>HELLO</Text>

        </View>
      )
    return views
  }

  SecondRoute = () => {
    views=[]
      views.push(
        <View style={{
          margin:10,
        }} key='tb'>
          <Table borderStyle={{
            borderWidth: 10, 
            borderColor: '#FBAA30'
          }}>
          <Row data={this.state.tableHead2} style={styles.head} textStyle={styles.rowtext}/>
          <Rows data={this.state.tableData2} textStyle={styles.texts}/>
          </Table>
        </View>
      )
    return views
  }
  
  _handleIndexChange = index => this.setState({ index });
 
  _renderHeader = props => <TabBar 
    style={{ backgroundColor: 'transparent',}}
    labelStyle={{ 
      color: 'red',
      fontWeight:'bold',
      fontSize:20
    }}
    indicatorStyle={{ backgroundColor: 'red'}} 
    {...props} />;
 
  _renderScene = SceneMap({
    first: this.FirstRoute,
    second: this.SecondRoute,
  });
  
  _renderPager = (props) => {
    return (Platform.OS === 'ios') ? <TabViewPagerScroll {...props} /> : <TabViewPagerPan {...props} />
    }
    
    renderTabBar(props) {
        return (
            <TabBar
                style={{backgroundColor: 'transparent', elevation: 0, borderColor: '#000000', borderBottomWidth: 1, height:50}}
                labelStyle={{color: 'orange', fontSize: 18, fontWeight: 'bold'}}
                {...props}
                indicatorStyle={{backgroundColor: 'red', height: 2.5}}
            />
        );
    }

  render() {
    return (
     <TabView
        key='tva'
        navigationState={this.state}
        renderScene={this._renderScene}
        renderHeader={this._renderHeader}
        onIndexChange={this._handleIndexChange}
        initialLayout={initialLayout}
        scrollEnabled={true}
        renderPager={this._renderPager}
        renderTabBar={this.renderTabBar}
        />
    );
  }
}

const styles = StyleSheet.create({
  scene: {
    flex: 1,
  },
});
```

Attach the screenshot with the related error. This error both appear in android and ios.. 
![Screenshot_1576723620](https://user-images.githubusercontent.com/11284989/71144023-8e1d3780-2257-11ea-9ce1-460ca656abfd.png)

Please help me.. Really need some highlight for this problem.. Thanks in advance


### Current behaviour

Started using this tabs in our application, and during profiling noticed that AnimatedComponent takes ~70ms to be rendered

### Expected behaviour

Would like to make it faster OR an option to disable animation at all.

### Code sample

Nothing special, it could be reproduced on any tab.
```
 <TabView
          lazy
          swipeEnabled={false}
          renderLazyPlaceholder={this._renderLazyPlaceholder}
          navigationState={this.state}
          renderScene={this._renderScene}
          onIndexChange={this._handleIndexChange}
          initialLayout={{ width: Dimensions.get('window').width }}
          renderTabBar={this.renderTabBar} // don't render a tabbar from react-native-tab-view
        />
```

```
 _renderScene = ({ route }) => {
    const children = React.Children.toArray(this.props.children)
    const tabNames = this.props.tabs
    return children[parseInt(route.key, 10)]
  }
```

### Screenshots (if applicable)

![Снимок экрана 2019-12-13 в 11 48 07](https://user-images.githubusercontent.com/5869863/70792050-148dd100-1da1-11ea-86c9-f4525c7a929b.png)
![Снимок экрана 2019-12-13 в 11 47 13](https://user-images.githubusercontent.com/5869863/70792055-15befe00-1da1-11ea-800a-5ef9fd7fad31.png)
![Снимок экрана 2019-12-13 в 11 43 27](https://user-images.githubusercontent.com/5869863/70792065-18b9ee80-1da1-11ea-826e-9f93fc325c1c.png)


### Your Environment

| software                     | version
| ---------------------------- | -------
| ios                | ios simulator 12.2
| react-native                 | 0.61.4
| react-native-tab-view        | 2.11.0
| react-native-gesture-handler | 1.5.2
| react-native-reanimated      | 1.4.0
| node                         | 8.12.0
| npm or yarn                  | npm

<!-- Issues that don't use this template are likely to be closed. -->

### Current behaviour

<!-- What's currently happening? -->

### Expected behaviour

<!-- What do you expect to happen? If there is an error, provide the complete error message with stack trace. -->

### Code sample

For Syntax Highlighting check this [link](https://help.github.com/en/articles/creating-and-highlighting-code-blocks)

<!-- Provide a complete code sample that could be run to reproduce the issue, ideally on snack.expo.io or in a github repo. -->

### Screenshots (if applicable)

<!-- Include screenshots if there's a bug in the layout. -->

### What have you tried

<!-- List down the steps you have tried to fix or identify the issue and links to any related issues you found. -->

### Your Environment

| software                     | version
| ---------------------------- | -------
| ios or android               |
| react-native                 |
| react-native-tab-view        |
| react-native-gesture-handler |
| react-native-reanimated      |
| node                         |
| npm or yarn                  |

<!-- Issues that don't use this template are likely to be closed. -->

### Problem

How to stop scrolling sliding when switching to another tab?

### Example

When I scroll the content and remove my finger from the screen, the content continues to scroll, that is, slide. I need that when I switch to another tab, this scroll slide stops instantly. That is, the content in that tab did not scroll in the background.

[GIF](https://i.stack.imgur.com/AXaZt.gif)

### Code sample

#### App.js

```
import * as React from 'react';
import {FlatList, Text, View, StyleSheet, Dimensions} from 'react-native';
import {TabView, SceneMap} from 'react-native-tab-view';

const DATA = Array.from(Array(1000).keys());

const renderFlatList = () => {
  const renderItem = ({item, index}) => {
    return <Text>{index}</Text>;
  };

  const keyExtractor = (item, index) => index.toString();

  return (
    <FlatList data={DATA} renderItem={renderItem} keyExtractor={keyExtractor} />
  );
};
const FirstRoute = () => (
  <View style={[styles.scene, {backgroundColor: '#ff4081'}]}>
    {renderFlatList()}
  </View>
);

const SecondRoute = () => (
  <View style={[styles.scene, {backgroundColor: '#673ab7'}]}>
    {renderFlatList()}
  </View>
);

export default class TabViewExample extends React.Component {
  state = {
    index: 0,
    routes: [{key: 'first', title: 'First'}, {key: 'second', title: 'Second'}],
  };

  render() {
    return (
      <View style={styles.container}>
        <TabView
          navigationState={this.state}
          renderScene={SceneMap({
            first: FirstRoute,
            second: SecondRoute,
          })}
          onIndexChange={index => this.setState({index})}
          initialLayout={{width: Dimensions.get('window').width}}
        />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 36,
  },
  scene: {
    flex: 1,
  },
});
```

### Your Environment

| software                     | version
| ---------------------------- | -------
| ios or android               | ios / android
| react-native                 | 0.61.5
| react-native-tab-view        | 2.11.0
| react-native-gesture-handler | 1.5.2
| react-native-reanimated      | 1.4.0
| node                         | 12.12.0
| npm or yarn                  | yarn
