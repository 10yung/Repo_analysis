# PR Summary

Fixes outstanding issues in several koan files. Some changes are relatively minor, others are a bit more extensive depending on the scope of the issue(s) in the file.

## Context

Fixes #342 
Fixes #341 
Fixes #340 
Fixes #339 
Fixes #337 
Fixes #334 
Fixes #335 
Fixes #332 
Fixes #330 

Many thanks to @joewatts, @jeffchristman, @scottone, and @figueroaDavid for finding these issues; feel free to leave a review / comment on this PR if you feel the solution could use more. 

## Changes

Fixes issues in:

- AboutModules
- AboutTeeObject
- AboutMeasureObject
- AboutSelectObject
- AboutAssignmentAndArithmetic
- AboutDiscovery
- AboutArrays

## Checklist

- [x] Pull Request has a meaningful title.
- [x] Summarised changes.
- [x] Pull Request is ready to merge & is not WIP.
- [x] Added tests / only testable interactively.
  - Make sure you add a new test if old tests do not effectively test the code changed.
- [ ] Added documentation / opened issue to track adding documentation at a later date.

# PR Summary

Add functionality for opening current koan _file_ instead of just the overall PSKoanLocation from `Show-Karma`

## Context

This PR supersedes #317, all credit for initial idea goes to @arefg -- thank you so much for the work you put in on this already, it really made this a hundred times easier. ðŸ˜Š ðŸ’– 

## Changes

- Moves the "open koan folder" functionality to `-Library` switch.
- Modifies `-Contemplate` switch to work as an "open current file in the set editor" with capability to recognise `code` and `code-insiders` as well as `atom` and pass correct arguments for these editors to also go to the relevant line in the file.
- Updates tests to verify new functionality.

## Checklist

- [x] Pull Request has a meaningful title.
- [x] Summarised changes.
- [x] Pull Request is ready to merge & is not WIP.
- [x] Added tests / only testable interactively.
  - Make sure you add a new test if old tests do not effectively test the code changed.
- [x] Added documentation / opened issue to track adding documentation at a later date.

# PR Summary

Fixes #282 

## Context

A draft for bug fixing kata's. This is going to take a little time. Please add a WIP.

I would, however, appreciate any feedback as and when anyone feels like commenting :)

## Changes

Adds Bug fixing kata

## Checklist

- [x] Pull Request has a meaningful title.
- [x] Summarised changes.
- [ ] Pull Request is ready to merge & is not WIP.
- [ ] Added tests / only testable interactively.
  - Make sure you add a new test if old tests do not effectively test the code changed.
- [ ] Added documentation / opened issue to track adding documentation at a later date.

**ISSUE 1**

**Original Line 36**

$TypeOf6thModule = $Modules[5].ModuleType

**Modified Line 36**

$TypeOf6thModule = $Modules[$Modules.Count-1].ModuleType

Let's start with, I am trying to get comfortable with VS Code.
So IMHO Get-Module is VERY system dependent, it turns out when running Show-Karma it only returns 5 Modules. Lots of trial and error to establish this, so there was never a 6th Module to get the type of.

When I run the command "Get-Module | Sort-Object -Property Name -Unique" in the PowerShell console I will get $Modules with a count of 8.
When I run the command "Get-Module | Sort-Object -Property Name -Unique" in the PowerShell Integrated console I get a count of 8.
The actual modules identified are different in each console.
If I restart VS Code and run the command "Get-Module | Sort-Object -Property Name -Unique" before I run Show-Karma, I get different results from what I got before.

So in conclusion evaluating $TypeOf6thModule can be a bit of challenge. At least with the modified line, you aren't hitting a $null record.

I am sure that on some systems this works just fine.

I'm not actually sure what can be done about this, to make it more solid and reliable, but knowing it can be an issue may help someone in the future.


**ISSUE 2**  -ArgumentList parameter not needed.

**Original Line 120**  

$Module = New-Module -Name 'PSKoans_TestModule' -ScriptBlock {} -ArgumentList

**Modified Line 120**

$Module = New-Module -Name 'PSKoans_TestModule' -ScriptBlock {} 

System throws error if an argument list is not provided.  Removing the ArgumentList parameter solves the problem.


**ISSUE 3**  Typo, there was a space in the wrong spot.

**Original Line 182**

Import-Module 'TestDrive:\TestModule.psm1' | Should -**Be NullOrEmpty**

**Modified Line 182**

Import-Module 'TestDrive:\TestModule.psm1' | Should -**BeNullOrEmpty**
**ISSUE 1**  'can store the object(s) into a variable'

**Original Line 22**

$Values = 'alpha', 'beta', 'gamma'
@(  '`____`', '`____`', '`____`', '`____`') | Tee-Object -Variable 'Numbers' | Should -Be $Values

**Modified Line 22**

$Values = 'alpha', 'beta', 'gamma'
@(  '`____`', '`____`', '`____`') | Tee-Object -Variable 'Numbers' | Should -Be $Values

Once again depending on the intent of the developer.  

If the intent was to only supply enough slots for the values located in $Values then there needs to be one **less** placeholder.
If the intent is to keep the individual working through the tests on their toes so they realize that there is one too many place holders then this is good to go.  However, you may have folk searching the Issues to see if this has been reported.

**ISSUE 2** 'can also store the object(s) into a file'

**Original Line 33**

@( '`__`','`__`','3','`__`','`__`') | Should -Be $Stored

**Modified Line 33 and add a line 34**

@('`__`','`__`', '0.33', '`__`','`__`',) | Should -Be $Stored
Remove-Item -$File -Force -ErrorAction SilentlyContinue

When dividing 1 by a number the only way to get a whole number is to divide by 1,  All other values are going to be fractions, so a whole value of 3 doesn't work
Also we really should be good citizens and clean up after ourselves.
**ISSUE 1:**  'can operate on object properties' 

Well Averages can be challenging especially when the resulting average can have a seemingly endless number of significant digits.  I would propose that you limit the number of significant digits in some manner otherwise it is going to be hit and miss for passing this test. 

**Original Line 80:**

__ | Should -Be $Data.Average

**Modified Line 80:**

__ | Should -Be Should -Be ([math]::Round($Data.Average,4))

**ISSUE 2:** 'can measure text lines, characters, and words of strings'

**EXCEPT** when the file does not exist, then the answers are always zero (0).  If this was your intent then this isn't an issue, otherwise it might be wise to have a file that exists as part of the data.  I just picked a file and plugged it in.

**Original line 84:**

$Text = Get-Content "$(Get-PSKoanLocation)/Foundations/AboutTheStockChallenge.Koans.ps1"

**Modified line 84**

Depends on the intent of the developers.
# Describe "Koan Bug, Issue, or Help Request"

**ISSUE 1:**  Value to be evaluated in the Pester test was null, and type for Pester test is incorrect.

Original Line 53:

$Selected.GetType().FullName | Should -BeOfType [System.IO.Directoryinfo]

Modified Line 53:

$Folder.GetType().FullName | Should -BeOfType [System.String]

**ISSUE 2:** Code presented did not contain a property that would satisfy the associated Pester test.
Previous examples of $Selected contain references to a property that would satisfy the Pester test, so adding the appropriate code and using the abbreviations for Name and Element to get the code to fit with the current example is needed.

Original at line 244:

        $Selected = Get-Process -Id $PID | Select-Object @(
            'Name'
            'Id'
            @{ n = 'Size'; e = { (Get-Item $_.Path).Length } }
        )

Modified at Line 244

        $Selected = Get-Process -Id $PID | Select-Object @(
            'Name'
            'Id'
            @{ n = 'RunningTime'; e = { (Get-Date) - $_.StartTime } }
            @{ n = 'Size'; e = { (Get-Item $_.Path).Length } }
        )

So that the line at what is now 251 makes sense

$Selected.____ | Should -BeOfType [TimeSpan]


**ISSUE 3: ** Depending on the intent of the developer. 
 Given what I understand to be the intent, you may have wanted the student to explore PSCustomObject to discover how it is a System.Management.Automation.PSObject, however things were a bit ambiguous as to exactly how you wanted to have the student demonstrate that they had done the exploration.  I have provide a tweak/suggestion that may prevent others from posting an issue with the code. 

Original at line 297 or 298 if previous changes have been made:

[PSCustomObject] | Should -Be [System.Management.Automation.PSObject]

Modified at line 297 0r 298

Could be
[PSCustomObject].____ | Should -Be System.Management.Automation.PSObject

With the solution being 
[PSCustomObject].FullName | Should -Be System.Management.Automation.PSObject


Missing 's' in cmdlt on line 21 in AboutSelectObject.ps1

Original line:
`$Selected = Get-Proces -Id $PID | Select-Object Name, ID, Path`

Should be:
`$Selected = Get-Process -Id $PID | Select-Object Name, ID, Path`

The Get-Process cmdlet is missing an "s" 






# Backup/Restore existing Pester module; PSKoans uninstall and cleanup instructions

## Instructions or a separate script should be provided regarding the steps needed to backup/restore the build-in Pester module, and the process of uninstalling the PSKoans module and the files it adds to the user profile to restore the system to a pre-PSKoans state.
# Describe "Koan Bug, Issue, or Help Request"

<!-- List the koan file(s) you're experiencing issues with, as well as the folder(s) they're contained in. -->

## Context "The Problematic Assertions"
```
It 'can look for commands by module' {
        $KoanCommands = Get-Command -Module 'PSKoans' |
            Sort-Object -Property Name
        $First4Commands = $KoanCommands | Select-Object -First 4

        __ | Should -Be $KoanCommands.Count
        @('__', '____', '____', '____') | Should -Be $KoanCommands.Name
    }
```
## Context "Your Attempts"
The assertion could only pass if there were 4 commands in the PSKoans module.
Correction:
`@('__', '____', '____', '____') | Should -Be $First4Commands.Name` 
<!-- List possible solutions, or any cases where you feel you _did_ get it right but it was not recognised, and anything else you've tried. -->

## Context "Additional Information"

<!-- Add any other context or references you think would be helpful. -->
