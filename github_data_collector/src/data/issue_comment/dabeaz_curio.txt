1. there was a failed attempt of `contextvars` support:
* https://github.com/dabeaz/curio/pull/276
* https://github.com/dabeaz/curio/commit/26f795300c032a3a88b4c4601de6307a74b4e6f8

2. with a promise "to revisit" :-)
https://github.com/dabeaz/curio/pull/276#issuecomment-437637540

3. please revisit

@dabeaz David:

1. given all your deep GIL hacking experience
https://www.youtube.com/watch?v=Obt-vMVdM8s

2. say, an application is running `curio` in main thread
as an **orchestration framework** only (no heavy i/o, no heavy math), 
then pushing bytes via `asyncio`, and doing heavy math via `threading` -
all in separate threads,

3. do you think `curio` kernel thread priority elevation approaches such as
`pthread_setschedparam()` for Linux and `SetThreadPriority()` for Windows
can prevent main thread starvation,
i.e. protection against both heavy i/o threads and heavy math threads?

hi i just found this powerful library.and i had noticed that there were async file read/write methods, but they were all bound to the async fileobj , so if i had a file descriptor , how could i wrap it into these async fileobj?  

PS my file descriptor came from `pty.openpty()` in case you might say why not use your api to open the file and got the fileobj
fix typo abrubtly to abruptly
Output: https://travis-ci.com/cclauss/curio
if you download the source from pypi, and do `pytest test/` you will get something similar to

```
ImportError while loading conftest '/build/curio-0.9/tests/conftest.py'.
py._path.local.LocalPath.ImportMismatchError: ('conftest', '/Users/beazley/Desktop/Projects/junk/curio/tests/conftest.py', local('/build/curio-0.9/tests/conftest.py'))
```
the tests are picking up the __pycache__ directory and reading invalid information.
Looking at the documentation here: https://github.com/dabeaz/curio/blob/0ac46615a2c009f327aba0632b193eb36df3695e/docs/devel.rst#synchronousasynchronous-queuing it suggests I should be able to use `curio.Queue.put` from a sync context without using await.

I'm still new to `curio` so maybe I've missed something, but I was unable to make this work (though it does work if I use a `curio.UniversalQueue`.  Wanted to confirm that I'm not missing something here.
The following code

```python
import curio

async def to_cancel():
    try:
        await curio.sleep(10)
    except curio.TaskCancelled:
        1/0

async def main():
    async with curio.TaskGroup() as tg:
        await tg.spawn(to_cancel)
        await tg.cancel_remaining()


curio.run(main)
print("Success...?")
```

will print the `ZeroDivisionError` in the exception handler, but otherwise it will appear to exit successfully.

```
$ python xx.py
Task Crash: Task(id=3, name='to_cancel', state='TERMINATED')
Traceback (most recent call last):
  File "xx.py", line 5, in to_cancel
    await curio.sleep(10)
  File "/home/zah/anaconda3/lib/python3.7/site-packages/curio/task.py", line 600, in sleep
    return await _sleep(seconds, False)
  File "/home/zah/anaconda3/lib/python3.7/site-packages/curio/traps.py", line 82, in _sleep
    return (yield (_trap_sleep, clock, absolute))
curio.errors.TaskCancelled: TaskCancelled

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/zah/anaconda3/lib/python3.7/site-packages/curio/kernel.py", line 747, in _run_coro
    trap = current._throw(current.next_exc)
  File "/home/zah/anaconda3/lib/python3.7/site-packages/curio/task.py", line 166, in _task_runner
    self.next_value = await coro
  File "xx.py", line 7, in to_cancel
    1/0
ZeroDivisionError: division by zero
Success...?

$ echo $status
0
```

I think the exception should be propagated in the implicit `tg.join` at the exit of the context manager, and from there all the way to `curio.run`.
Hello,

I have a piece of code that looks like this:

```py
async def checker():
    ...

async def client(conn):
  c = await curio.spawn(check)
  while True:
    try:
      data = await curio.timeout_after(1, conn.recv(4096)
      ...
    except curio.TaskTimeout:
         if c.terminated:
             await c.join()
             break
```

Couple of things in this code:
1. `client` is spawning another task called `checker`. `client` periodically checks the status of  `client` and if it has been terminated, joins on the task and breaks. Is this the best way of checking on the status of a task when you yourself might be awaiting on something. (in this case `client` is awaiting on a socket object's recv function)

2. The above code 'works'. I occassionally get the above WARNING:

```
curio.task:Task(id=6, name='client', state='RUNNING'). Timeout occurred, but was uncaught. Ignored.
```

What does this warning mean? Nothing bad seems to be happening, but I am curious why this is happening. Note that if I increase the timeout to 2secs, I don't see this WARNING anymore.
There's some good stuff in the meta module. Especially the `awaitable` decorator was something that I was wanting. But, I'm worried I might die. What are the odds of it being stable enough that I won't die? :-)