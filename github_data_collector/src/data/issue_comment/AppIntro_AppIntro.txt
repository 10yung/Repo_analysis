<!-- What version of AppIntro you're running, for example: 4.1.0 | 4.0.0
It's essentially the version number from your build.gradle: `dependencies { compile '...:x.y.z' }` -->
**AppIntro Version**: 6.0.0-alpha3

<!-- What devices you managed to get the issue to come up on? For example:
fails on Galaxy S4/GT-I9500 4.4.2, works fine on Nexus 6P 5.1 and Genymotion Nexus 5 5.0.1 -->
**Device/Android Version**: One Plus 5, Android 9

<!-- Share the details of your issue in prose, detailing actual and expected behavior. It also helps if you give some info **why** you are trying to do something as opposed to **what** is not working. -->
**Issue details / Repro steps / Use case background**: Done button shows up with grey background, not sure how to customize it. Pretty sure I can only change the text color?


`showDoneButton` is deprecated, but the documentes replacement does not exist.

<!-- Please include code snippets or whole files as necessary including XML layouts if applicable. If no code is being used, please explain why. Failure to do so will result in your issue being closed. We shouldn't have to ask you for code snippets later on in the issue. -->
**Your Code**: https://gitlab.com/carstenhag/android-mosbach-map/blob/develop/app/src/main/java/de/chagemann/stadtplanmosbach/IntroActivity.kt

<img width="635" alt="Bildschirmfoto 2020-01-18 um 22 45 42" src="https://user-images.githubusercontent.com/3776997/72670982-46e7b980-3a44-11ea-8173-7cccb64f3bf6.png">

Update ktlint to 9.1.1
Update detekt to 1.4.0
Update target&compile sdk to 29
Update appcompat to 1.1.0
Update kotlin stdlib to 1.3.61
Updated detekt-default-config file
Fix code to be compliant with ktlint and detekt
Altered PagerAdapter to simplify code and solve error
Let's use this issue to keep track of the things we need to do before releasing AppIntro 6.0.0

If you have the feeling you have a feature or a fix that is worth being included in the upcoming release, please comment here asap.

To give an ETA: ideally we should be able to release 6.x within the next 2/3 weeks.

- [ ] Merge #686 
- [ ] Prepare a Release note document
- [ ] Prepare a migration document (either from 4.x or from 6.x).
- [ ] Update the screenshots on the README
- [ ] Update the README to have examples of the newer API
- [ ] Update the README from Java to Kotlin
- [ ] Bump all the third party dependencies (Kotlin, Gradle, Support lib, etc.)
My class 

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val sliderPage1 = SliderPage()
        sliderPage1.titleTypefaceFontRes = R.font.mystery_quest
        sliderPage1.description = resources.getString(R.string.description1)
        sliderPage1.descTypefaceFontRes = R.font.mystery_quest
        sliderPage1.imageDrawable = R.drawable.tibiamonsters_logo
        sliderPage1.bgColor = Color.parseColor("#000000")
        addSlide(AppIntroFragment.newInstance(sliderPage1))

        val sliderPage2 = SliderPage()
        sliderPage2.titleTypefaceFontRes = R.font.mystery_quest
        sliderPage2.description = resources.getString(R.string.description2)
        sliderPage2.descTypefaceFontRes = R.font.mystery_quest
        sliderPage2.imageDrawable = R.drawable.tibiadragon
        sliderPage2.bgColor = Color.parseColor("#000000")
        addSlide(AppIntroFragment.newInstance(sliderPage2))

        val sliderPage3 = SliderPage()
        sliderPage3.titleTypefaceFontRes = R.font.mystery_quest
        sliderPage3.title = resources.getString(R.string.monsters_categories)
        sliderPage3.description = resources.getString(R.string.description3)
        sliderPage3.descTypefaceFontRes = R.font.mystery_quest
        random(sliderPage3)
        sliderPage3.bgColor = Color.parseColor("#000000")
        addSlide(AppIntroFragment.newInstance(sliderPage3))

        isSkipButtonEnabled = false
        isVibrateOn = true
        setFadeAnimation()
        vibrateDuration = 60
    }

    override fun onDonePressed(currentFragment: androidx.fragment.app.Fragment?) {
        super.onDonePressed(currentFragment)
        val intent = Intent(this, HomeActivity::class.java)
        intent.flags = Intent.FLAG_ACTIVITY_SINGLE_TOP
        startActivity(intent)
        finish()
    }

    private fun random(slider: SliderPage) {
        val random = (0..5).random()
        when (random) {
            0 -> slider.imageDrawable = R.drawable.poi_bosses_fixed
            1 -> slider.imageDrawable = R.drawable.roshamuul
            2 -> slider.imageDrawable = R.drawable.dream_court
            3 -> slider.imageDrawable = R.drawable.library
            4 -> slider.imageDrawable = R.drawable.weak_bosses
            5 -> slider.imageDrawable = R.drawable.issavi
        }
    }

<!-- What version of AppIntro you're running -->
**implementation 'com.github.AppIntro:appintro:6.0.0-alpha3'**:

<!-- What devices you managed to get the issue to come up on? For example:
fails on Galaxy S4/GT-I9500 4.4.2, works fine on Nexus 6P 5.1 and Genymotion Nexus 5 5.0.1 -->
**Galaxy On7 Pro / Android 6.0.1**:

**Stack trace / LogCat**:
```
Fatal Exception: android.content.res.Resources$NotFoundException
Font resource ID #0x7f090005 could not be retrieved.
androidx.core.content.res.ResourcesCompat.getDrawable (ResourcesCompat.java)
androidx.core.content.res.ResourcesCompat.getDrawable (ResourcesCompat.java)
com.github.paolorotolo.appintro.internal.TypefaceContainer.applyTo (TypefaceContainer.java)
com.github.paolorotolo.appintro.AppIntroBaseFragment.onCreateView (AppIntroBaseFragment.java)
androidx.fragment.app.Fragment.performCreateView (Fragment.java)
androidx.fragment.app.FragmentManagerImpl.addAddedFragments (FragmentManagerImpl.java)
androidx.fragment.app.FragmentManagerImpl.dispatchPrimaryNavigationFragmentChanged (FragmentManagerImpl.java)
androidx.fragment.app.FragmentManagerImpl.addAddedFragments (FragmentManagerImpl.java)
androidx.fragment.app.BackStackRecord.executeOps (BackStackRecord.java)
androidx.fragment.app.FragmentManagerImpl.addAddedFragments (FragmentManagerImpl.java)
androidx.fragment.app.FragmentManagerImpl.allocBackStackIndex (FragmentManagerImpl.java)
androidx.fragment.app.FragmentManagerImpl.completeShowHideFragment (FragmentManagerImpl.java)
androidx.fragment.app.FragmentManagerImpl.allocBackStackIndex (FragmentManagerImpl.java)
androidx.fragment.app.BackStackRecord.commitNowAllowingStateLoss (BackStackRecord.java)
androidx.fragment.app.FragmentPagerAdapter.finishUpdate (FragmentPagerAdapter.java)
androidx.viewpager.widget.ViewPager.populate (ViewPager.java)
androidx.viewpager.widget.ViewPager.populate (ViewPager.java)
androidx.viewpager.widget.ViewPager.onMeasure (ViewPager.java)
android.view.View.measure (View.java:20236)
androidx.constraintlayout.widget.ConstraintLayout.onMeasure (ConstraintLayout.java)
android.view.View.measure (View.java:20236)
android.view.ViewGroup.measureChildWithMargins (ViewGroup.java:6333)
android.widget.FrameLayout.onMeasure (FrameLayout.java:194)
androidx.appcompat.widget.ContentFrameLayout.onMeasure (ContentFrameLayout.java)
android.view.View.measure (View.java:20236)
android.view.ViewGroup.measureChildWithMargins (ViewGroup.java:6333)
android.widget.LinearLayout.measureChildBeforeLayout (LinearLayout.java:1464)
android.widget.LinearLayout.measureVertical (LinearLayout.java:747)
android.widget.LinearLayout.onMeasure (LinearLayout.java:629)
android.view.View.measure (View.java:20236)
android.view.ViewGroup.measureChildWithMargins (ViewGroup.java:6333)
android.widget.FrameLayout.onMeasure (FrameLayout.java:194)
android.view.View.measure (View.java:20236)
android.view.ViewGroup.measureChildWithMargins (ViewGroup.java:6333)
android.widget.LinearLayout.measureChildBeforeLayout (LinearLayout.java:1464)
android.widget.LinearLayout.measureVertical (LinearLayout.java:747)
android.widget.LinearLayout.onMeasure (LinearLayout.java:629)
android.view.View.measure (View.java:20236)
android.view.ViewGroup.measureChildWithMargins (ViewGroup.java:6333)
android.widget.FrameLayout.onMeasure (FrameLayout.java:194)
com.android.internal.policy.PhoneWindow$DecorView.onMeasure (PhoneWindow.java:3140)
android.view.View.measure (View.java:20236)
android.view.ViewRootImpl.performMeasure (ViewRootImpl.java:2704)
android.view.ViewRootImpl.measureHierarchy (ViewRootImpl.java:1656)
android.view.ViewRootImpl.performTraversals (ViewRootImpl.java:1948)
android.view.ViewRootImpl.doTraversal (ViewRootImpl.java:1544)
android.view.ViewRootImpl$TraversalRunnable.run (ViewRootImpl.java:7607)
android.view.Choreographer$CallbackRecord.run (Choreographer.java:911)
android.view.Choreographer.doCallbacks (Choreographer.java:686)
android.view.Choreographer.doFrame (Choreographer.java:622)
android.view.Choreographer$FrameDisplayEventReceiver.run (Choreographer.java:897)
android.os.Handler.handleCallback (Handler.java:739)
android.os.Handler.dispatchMessage (Handler.java:95)
android.os.Looper.loop (Looper.java:148)
android.app.ActivityThread.main (ActivityThread.java:7331)
java.lang.reflect.Method.invoke (Method.java)
com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run (ZygoteInit.java:1230)
com.android.internal.os.ZygoteInit.main (ZygoteInit.java:1120)
```

Unfortunately still got same problem like it was in version 5.1.0
Would you like to help me how can I fix it OR can you fix it?
Hi everyone
I'm updating to latest 6.x.x beta version (as suggested in #716). Seems like some sort of regression was introduced, since the aforementioned methods `goToNextSlide()` and `goToPreviousSlide()` and `showSkipButton(boolean)` (as shown in #475, #498 and #531) are not publicly accessible anymore. Would it be possible to make them publicly available again? 

ref. https://github.com/AppIntro/AppIntro/blob/master/appintro/src/main/java/com/github/paolorotolo/appintro/AppIntroBase.kt#L167

thanks
nicola
**AppIntro Version**: 5.1.0

**Device/Android Version**: Android emulator, API 28

**Issue details**: 
When switching to AndroidX and updating lib version to 5.1.0, the following error is thrown while compiling

`Caused by: org.gradle.internal.resolve.ModuleVersionResolveException: Could not resolve org.jetbrains.kotlin:kotlin-stdlib:1.2.71.`

**Tried to solve**:
```
implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.2.71'
```

and 

`ext.kotlin_version = '1.2.71'`

in `build.gradle` (top level, buildscript) where `maven { url 'https://jitpack.io' }` is available already

Hey, i wanted to ask how to remove a slide, because in my AppIntro the user can login and after it i want to show some other screens like: "Please ckeck your crendentials" or "Your login was successfull". If the login wasn't successfull, the slide automatically goes back, but it is still there if you swipe from right to left. Here is a part of my code:

> 

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        addSlide(SampleSlide.newInstance(R.layout.slide_1));
        addSlide(SampleSlide.newInstance(R.layout.slide_2));
        addSlide(SampleSlide.newInstance(R.layout.slide_3));
        setVibrate(true);
        setVibrateIntensity(40);
        setColorDoneText(getResources().getColor(R.color.colorIntromenu));
        setColorSkipButton(getResources().getColor(R.color.colorIntromenu));
        setNextArrowColor(getResources().getColor(R.color.colorIntromenu));
        setIndicatorColor(R.color.colorAccent, R.color.colorIntromenu);
        showSkipButton(false);
        setDoneText("Login");
    }

And this is a part of my login in "onDonePressed":

> 

    runOnUiThread(new Runnable(){
       public void run() {
            addSlide(SampleSlide.newInstance(R.layout.slide_4_servererror));
            pager.goToNextSlide();
             final Handler handler = new Handler();
             handler.postDelayed(new Runnable() {
             @Override
                  public void run() {
                        // Do something after 4s = 4000ms
                        pager.setCurrentItem(2);
                        }
                    }, 4000);
               }
        });
Hello I am using App Intro version 4.2.3 and  in my app i am using 7 slides and 2 language so i need to access the second slide views .
in case english lang it's ok there is no problem but in case RTL language i cannot access to view in second slide it says : object null so i tried to access fifth index and it's working but i had to check app lang in onSlideChange override method
<!--
Please fill in the below fields with some data to help us best diagnose the issue.
The more specific you are, the better! You can help a lot by not making us ask these questions.
Any HTML comment like this will be stripped when rendering markdown, no need to delete them.
If an issue does not have the following template filled out, it will be closed without discussion.
-->

<!-- What version of AppIntro you're running, for example: 4.1.0 | 4.0.0
It's essentially the version number from your build.gradle: `dependencies { compile '...:x.y.z' }` -->

<!-- What devices you managed to get the issue to come up on? For example:
fails on Galaxy S4/GT-I9500 4.4.2, works fine on Nexus 6P 5.1 and Genymotion Nexus 5 5.0.1 -->

<!-- Share the details of your issue in prose, detailing actual and expected behavior. It also helps if you give some info **why** you are trying to do something as opposed to **what** is not working. -->
**Issue details / Repro steps / Use case background**: In this library, handling the memory used by images is not managed at all, which leads to OOMs on several devices(e.g. #551 )I would like to discuss, how we can improve the image handling on our library. I have a few ideas:
1. Scaling drawables(as Bitmaps) before setting them to their respective imageviews.***


2. For even better support you can take a look at these links:

a) https://developer.android.com/topic/performance/graphics/manage-memory

b) https://developer.android.com/topic/performance/graphics/cache-bitmap

c) https://blog.booking.com/android-reuse-bitmaps.html

OR

3. We provide separate modules that use Image loading libraries like Glide, Picasso for loading images as optional dependencies along with our library (probably the easiest).


OR

4. We could provide a way for the user to get imageviews so that an image loading library can be used(probably not recommended).

***: Highly recommended regardless of approach taken.

Tell me your thoughts on which approach is better and if you know of any other alternative.

<!-- Please include code snippets or whole files as necessary including XML Layou if applicable. If no code is being used, please explain why. Failure to do so will result in your issue being closed. We shouldn't have to ask you for code snippets later on in the issue. -->

<!--
What is the error message that you got in the log?
-->

<!-- Bonus points if you attach a relevant screenshot, screen recording or a small demo project -->

Fixes #347

New approach to request permissions.

This PR is more or less complete and ready to merge. I have tested it against various scenarios and it should work fine.


Output: https://drive.google.com/file/d/15K_4EXmh0aq-QYkG9zJ3L7sefnfZYoRJ/view?usp=drivesdk