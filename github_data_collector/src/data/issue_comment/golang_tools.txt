A few months ago I migrated internal errors to xerrors, since it is part of go 1.13 now, I thought it might make sense to use the latest feature directly from the std lib and use also correct error wrapping.
This change adds command line support for prepare_rename.

Updates golang/go#32875

Both of determineEnv and determineRootDirs calls take 100-200ms on
MacBook Pro. Right now they are needed in most cases only for
overlay processing. Optimize: call them only when overlays are set.
Don't load deps by go list if NeedDeps wasn't set. Before that
deps were loading if NeedImports was set.
fix jsonrpc result no pending[id] always waits for a response
### What this PR does
Add a new flag `repair-group`. If true, forcing to repair imports group regardless of how they were originally grouped

Fixed https://github.com/golang/go/issues/20818

## Why
### What goimports does not do
example:
```
import (
	"testing"

	"context"

	"github.com/Sirupsen/logrus"
)
```
The imports will keep intact because `"testing"` and `"context"` are considered in two different sections.

### Manually correct
If we delete the blank line, goimports will re-sort imports correctly.

input:
```
import (
	"testing"
	"context"

	"github.com/Sirupsen/logrus"
)
```
after formatting:
```
import (
	"context"
	"testing"

	"github.com/Sirupsen/logrus"
)
```

### Root case
When goimports formats the imports, it puts imports into different sections by successive lines, and sorts them in each section. It turns out that sorting will only happens in the same section.

In order to solve this problem, we only need to consider all imports in one group regardless of how they were originally grouped

## Result of use repair-group
input:
```
package foo // github.com/org/repo1/foo

import (
    "context"

    "os"

    "github.com/org/repo1/foo/bar"
 
    "github.com/org/repo1/foo/baz"

    "github.com/org/repo2/quux"

    "github.com/thirdparty/repo"
)
```

runs
```
goimports -repair-group -local github.com/org/repo1
```

output:
```
package foo // github.com/org/repo1/foo

import (
    "context" 
    "os"

    "github.com/org/repo2/quux"
    "github.com/thirdparty/repo"

    "github.com/org/repo1/foo/bar"
    "github.com/org/repo1/foo/baz"
)
```


Added two flags to optionally convert the generated constant names to upper or lower case. 

Not sure if this is within the scope of stringer or not. But I have encountered multiple occasions where this could be useful. 
This pull request adds support for a `%param` directive to `goyacc`.

Per [this StackExchange](https://stackoverflow.com/questions/55897562/goyacc-getting-context-to-the-yacc-parser-no-param) question, it's currently hard to pars some form of context to the `yacc` parser in [`goyacc`][1], i.e. emulate the [`%param`][2] command in traditional `yacc`. A typical use case would be to parse the `.Parse` function to context as to where to build its parse tree.

This patch attempts to remedy this in an idiomatic manner by adding the facility to add multiple fields to the `$$ParserImpl` struct, as specified in a `%param` directive. IE

    `%param foo bar`

adds the line `foo bar` to the `$$ParserImpl` struct, which can be referred to as `$$rcvr`.

The `goyacc` `.Parse` function is [declared][3]
    
    func ($$rcvr *$$ParserImpl) Parse($$lex $$Lexer) int {

Things I've thought of other than this patch:

* `$$ParserImpl` [cannot be changed][4] by the `.y` file, so the obvious solution (to add fields to it) is (before this patch) right out, which is a pity.
* As `$$Lexer` is an interface, I could stuff the parser context into the Lexer implementation, then force type convert `$$lex` to that implementation (assuming my parser always used the same lexer), but this seems pretty disgusting (for which read non-idiomatic). Moreover there is (seemingly) no way to put a user-generated line at the top of the `Parse` function like `c := yylex.(*lexer).c`, so in the many tens of places I want to refer to this variable, I have to use the rather ugly form `yylex.(*lexer).c` rather than just `c`.
*  Normally I'd use [`%param`][2] in normal `yacc` / C (well, `bison` anyway), but that doesn't exist in `goyacc` (before this patch).
* I'd like to avoid postprocessing my generated `.go` file with `sed` or `perl` for what are hopefully obvious reasons.
*  I want to be able to (go)yacc parse more than one file at once, so a global variable is not possible (and global variables are hardly idiomatic).

  [1]: https://godoc.org/golang.org/x/tools/cmd/goyacc
  [2]: https://www.gnu.org/software/bison/manual/html_node/Pure-Calling.html
  [3]: https://github.com/golang/tools/blob/master/cmd/goyacc/yacc.go#L3416
  [4]: https://github.com/golang/tools/blob/master/cmd/goyacc/yacc.go#L3279

(commit message follows)

Add support for a %param option similar to Bison's in a golang idiomatic
manner. Each %param option specified adds a field to the ParserImpl
struct. If none are specified, output is byte-for-byte identical to
goyacc's output before this commit.

Signed-off-by: Alex Bligh <alex@alex.org.uk>
