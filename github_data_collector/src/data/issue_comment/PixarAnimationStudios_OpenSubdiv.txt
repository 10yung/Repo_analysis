Please expose a flag to build opensubdiv ONLY as a static library. Currently both static and dynamics are built and we have to patch some files in order to do so and it's a bit inconvenient. Building as static should be exposed in the make process, something like `-DBUILD_SHARED_LIBS=OFF` would be perfect. Thanks! 
I get the following stream of errors when running the glViewer example on a Windows 10 machine running a Nvidie GeForce 960M ( OpenGL 4.6, Nvidia Driver 436.48), with OSD built using VS2017.

OpenSubdiv Error: 4
    Error compiling GLSL shader: 0(1951) : error C1103: too few parameters in function call
For a very long complicated reason, I have to use Cuda v10.0. The default toolset vc142 in VS2019 is not compatible with v10.0, therefore I am forced to use toolset vc141 (which is the compiler that comes with VS2017, but can also be installed into VS2019).

However, there is a strange error. Despite, settings up the whole solution with toolset vc141, there seems to be some strange mismatch in the Cmake file used when building osd_static_gpu.

```
1>Building NVCC (Device) object opensubdiv/CMakeFiles/osd_static_gpu.dir/osd/Release/osd_static_gpu_generated_cudaKernel.cu.obj
1>cudaKernel.cu
1>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.23.28105\include\yvals_core.h(378): fatal error C1189: #error:  STL1001: Unexpected compiler version, expected MSVC 19.22 or newer.
1>-ccbinC:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64
1>CMake Error at osd_static_gpu_generated_cudaKernel.cu.obj.Release.cmake:226 (message):
1>  Error generating
1> ...opensubdiv/CMakeFiles/osd_static_gpu.dir/osd/Release/osd_static_gpu_generated_cudaKernel.cu.obj 
```

As you can see despite ccbin using 14.16 i.e toolset vc141, for some reason a header file in vc142 is being checked.
I don’t know if this is appropriate for OpenSubDiv, but I thought this is at least a good place to ask.

I’m wanting to add an option (in Blender) to be able to set edge creases from a bevel radius approximation and vise versa. (The main benefit of this is that you may wish to set similar curvatures with diverse geometries. This would allow calculating the correct crease value for a given curvature for each edge.) Given the relative angle of the edge faces and the distance between the limit surface and the control edge (at the edge midpoint) calculating the bevel radius to approximate it is fairly straightforward. Unfortunately I’m having trouble determining the distance between the limit surface and the control edge from the edge crease, and vise versa.

* Is there a straightforward way to bidirectionally compute this relationship?
* Is this already implemented in OSD?
* Would it make a useful addition to OSD?

For comparison, the rough algorithm to determine the approximate bevel radius from the distance i’m looking for:

* Take the unit-length normals of the two faces adjacent to the edge.
* The arc-cosine of the dot product of these normals to get the angle between these surfaces.
* Inscribe a circle with the desired bevel radius in the calculated angle.
* The distance between the circle center and the angle minus the bevel radius is how far the surface lies from the control edge.
* Given:
    * ![_&alpha;_](https://tex.s2cms.ru/svg/%5Calpha "_&alpha;_") the angle computed above
    * ![_d_](https://tex.s2cms.ru/svg/d "_d_") the distance from the limit surface to the control edge
    * ![_r_](https://tex.s2cms.ru/svg/r "_r_") the bevel radius approximating the SS limit surface:
    *  ![\frac{d}{r} = \frac{1}{\sin{\frac{\alpha}{2}}} - 1](https://tex.s2cms.ru/svg/%5Cfrac%7Bd%7D%7Br%7D%20%3D%20%5Cfrac%7B1%7D%7B%5Csin%7B%5Cfrac%7B%5Calpha%7D%7B2%7D%7D%7D%20-%201 "\frac{d}{r} = \frac{1}{\sin{\frac{\alpha}{2}}} - 1")

I realize there are all sorts of edge cases where this has divide by zero issues and other range errors and discontinuities, and I think I neglected to say that one of the normals should have been negated, but this is intended to give the general idea.


TL;DR: how do I compute the crease value from the distance between the control edge (midpoint) and the SS limit surface, and vise versa?
Hi, my apologies for bothering you with something so trivial.

I'm getting a CMake configuration error trying to build OpenSubdiv on Windows.

The reason is, I'm trying to use Microsoft's vcpkg to deal with the dependencies: the idea is that I can easily build the necessary dependencies using vcpkg, then I can simply point CMake to the right toolchain file (provided by vcpkg), so that CMake scripts for OpenSubdiv can easily find what they need, as per [vcpkg integration docs](https://github.com/microsoft/vcpkg/blob/master/docs/users/integration.md)). 

Works amazingly well, apart from one little gotcha: the main CMakeLists.txt in OpenSubdiv defines a macro `_add_executable` [macro](https://github.com/PixarAnimationStudios/OpenSubdiv/blob/9be5a298270a42d89d7925c8cdd9e335869ec6ce/CMakeLists.txt#L677), which clashes with custom scripts used by vcpkg: apparently, when overriding a function implementation in CMake, the original version gets renamed by adding the underscore prefix, and it happens that vcpkg overrides `add_executable` in order to do its thing -- that ends up clashing with the custom macro defined by OpenSubdiv. I tried renaming the macro to `osd_add_executable` and that fixed the issue for me (I also had to edit CMakeLists.txt in [stringify](https://github.com/PixarAnimationStudios/OpenSubdiv/blob/9be5a298270a42d89d7925c8cdd9e335869ec6ce/opensubdiv/tools/stringify/CMakeLists.txt#L32)).

I could create a vcpkg port of OpenSubdiv and patch it there, but it's such a tiny change and it's probably not a good idea to name your macro `_add_executable` in the first place, so I thought I should open a new issue.
Hey,

I've got compilation complications when trying to compile dxPtexViewer for Windows 10.


Error	LNK2019	Reference to undefined symbol ""public: void __cdecl OpenSubdiv::v3_4_0::Osd::CLD3D11VertexBuffer::UpdateData(float const *,int,int,struct _cl_command_queue *)" (?UpdateData@CLD3D11VertexBuffer@Osd@v3_4_0@OpenSubdiv@@QEAAXPEBMHHPEAU_cl_command_queue@@@Z)" in Funktion ""public: virtual void __cdecl OpenSubdiv::v3_4_0::Osd::Mesh<class OpenSubdiv::v3_4_0::Osd::CLD3D11VertexBuffer,class OpenSubdiv::v3_4_0::Osd::CLStencilTable,class OpenSubdiv::v3_4_0::Osd::CLEvaluator,class OpenSubdiv::v3_4_0::Osd::D3D11PatchTable,class CLD3D11DeviceContext>::UpdateVaryingBuffer(float const *,int,int)" (?UpdateVaryingBuffer@?$Mesh@VCLD3D11VertexBuffer@Osd@v3_4_0@OpenSubdiv@@VCLStencilTable@234@VCLEvaluator@234@VD3D11PatchTable@234@VCLD3D11DeviceContext@@@Osd@v3_4_0@OpenSubdiv@@UEAAXPEBMHH@Z)".	dxPtexViewer	D:\Bibliotheken\OpenSubdiv\build\examples\dxPtexViewer\dxPtexViewer.obj	1	

Error	LNK2019	Reference to undefined symbol ""public: struct _cl_mem * __cdecl OpenSubdiv::v3_4_0::Osd::CLD3D11VertexBuffer::BindCLBuffer(struct _cl_command_queue *)" (?BindCLBuffer@CLD3D11VertexBuffer@Osd@v3_4_0@OpenSubdiv@@QEAAPEAU_cl_mem@@PEAU_cl_command_queue@@@Z)" in Funktion ""public: bool __cdecl OpenSubdiv::v3_4_0::Osd::CLEvaluator::EvalStencils<class OpenSubdiv::v3_4_0::Osd::CLD3D11VertexBuffer,class OpenSubdiv::v3_4_0::Osd::CLD3D11VertexBuffer,class OpenSubdiv::v3_4_0::Osd::CLStencilTable>(class OpenSubdiv::v3_4_0::Osd::CLD3D11VertexBuffer *,struct OpenSubdiv::v3_4_0::Osd::BufferDescriptor const &,class OpenSubdiv::v3_4_0::Osd::CLD3D11VertexBuffer *,struct OpenSubdiv::v3_4_0::Osd::BufferDescriptor const &,class OpenSubdiv::v3_4_0::Osd::CLStencilTable const *,unsigned int,struct _cl_event * const *,struct _cl_event * *)const " (??$EvalStencils@VCLD3D11VertexBuffer@Osd@v3_4_0@OpenSubdiv@@V1234@VCLStencilTable@234@@CLEvaluator@Osd@v3_4_0@OpenSubdiv@@QEBA_NPEAVCLD3D11VertexBuffer@123@AEBUBufferDescriptor@123@01PEBVCLStencilTable@123@IPEBQEAU_cl_event@@PEAPEAU7@@Z)".	dxPtexViewer	D:\Bibliotheken\OpenSubdiv\build\examples\dxPtexViewer\dxPtexViewer.obj	1	

Error	LNK2019	Reference to undefined symbol ""public: struct ID3D11Buffer * __cdecl OpenSubdiv::v3_4_0::Osd::CLD3D11VertexBuffer::BindD3D11Buffer(struct ID3D11DeviceContext *)" (?BindD3D11Buffer@CLD3D11VertexBuffer@Osd@v3_4_0@OpenSubdiv@@QEAAPEAUID3D11Buffer@@PEAUID3D11DeviceContext@@@Z)" in Funktion ""public: virtual struct ID3D11Buffer * __cdecl OpenSubdiv::v3_4_0::Osd::Mesh<class OpenSubdiv::v3_4_0::Osd::CLD3D11VertexBuffer,class OpenSubdiv::v3_4_0::Osd::CLStencilTable,class OpenSubdiv::v3_4_0::Osd::CLEvaluator,class OpenSubdiv::v3_4_0::Osd::D3D11PatchTable,class CLD3D11DeviceContext>::BindVaryingBuffer(void)" (?BindVaryingBuffer@?$Mesh@VCLD3D11VertexBuffer@Osd@v3_4_0@OpenSubdiv@@VCLStencilTable@234@VCLEvaluator@234@VD3D11PatchTable@234@VCLD3D11DeviceContext@@@Osd@v3_4_0@OpenSubdiv@@UEAAPEAUID3D11Buffer@@XZ)".	dxPtexViewer	D:\Bibliotheken\OpenSubdiv\build\examples\dxPtexViewer\dxPtexViewer.obj	1	

Error	LNK2019	Reference to undefined symbol ""public: static class OpenSubdiv::v3_4_0::Osd::CLD3D11VertexBuffer * __cdecl OpenSubdiv::v3_4_0::Osd::CLD3D11VertexBuffer::Create(int,int,struct _cl_context *,struct ID3D11DeviceContext *)" (?Create@CLD3D11VertexBuffer@Osd@v3_4_0@OpenSubdiv@@SAPEAV1234@HHPEAU_cl_context@@PEAUID3D11DeviceContext@@@Z)" in Funktion ""void __cdecl createOsdMesh(int,int)" (?createOsdMesh@@YAXHH@Z)".	dxPtexViewer	D:\Bibliotheken\OpenSubdiv\build\examples\dxPtexViewer\dxPtexViewer.obj	1	


I'm not quite sure if it's a general problem or just a wrong setup in my system. 

Best
Jonas
I see there's no Vulkan back-end, but I believe it would be a great idea in many aspects:

- It's an API with concepts targeted to current gfx hardware designs, closer to Metal than to OpenGL.
- It's available on Windows, Linux, and MacOS (on MacOS you need the MoltenVK lib, which works on top of Metal, but I tried it and it works really great).
- Performance of OpenSubdiv should be better than with OpenGL.
- Gfx developers are progressively turning their eyes to Vulkan (just to put an example, even [ImGui](https://github.com/ocornut/imgui) has a Vulkan back-end).

I'm going to start Vulkan back-ends for my projects in the upcoming months, so I'd like that OpenSubdiv will be supported on them too.

Python 2 is mere months away from becoming a museum piece, so time to move on!

[ldo-python3-doc.patch.txt](https://github.com/PixarAnimationStudios/OpenSubdiv/files/3360667/ldo-python3-doc.patch.txt)

Just wondering if it is possible to build OpenSubDiv as a dynamic library (.DLL) / shared object (.SO). I wish to use OpenSubDiv with another library, which only allows interaction with a third party library via calling a load command for a dll.
As far as I understood [1](https://www.threadingbuildingblocks.org/docs/help/tbb_userguide/Linux_C_Dynamic_Memory_Interface_Replacement.html) [2](https://software.intel.com/en-us/forums/intel-threading-building-blocks/topic/297307),  `libtbbmalloc_proxy.so` is used on Linux to replace so glibc functions. To do so, one must load such library before any other shared module, by using `LD_PRELOAD`. 

I had a crash in glibc's `free` function when `tbbmalloc_proxy` was a shared module loaded by an application but not pre-loaded. The crash immediately disappeared when I removed `tbbmalloc_proxy` from the loaded modules or when I pre-loaded it.

Currently, `FindTBB.cmake` adds `tbbmalloc_proxy` and `tbbmalloc_proxy_debug` into `TBB_LIBRARIES`. Should it be fixed?