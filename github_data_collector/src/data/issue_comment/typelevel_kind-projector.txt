Updates [com.github.gseitz:sbt-release](https://github.com/sbt/sbt-release) [from 1.0.12 to 1.0.13](https://github.com/sbt/sbt-release/compare/v1.0.12...v1.0.13).
[Release Notes/Changelog](https://github.com/sbt/sbt-release/releases/tag/v1.0.13)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.github.gseitz", artifactId = "sbt-release" } ]
```
</details>

labels: sbt-plugin-update, semver-patch
Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
Since dotty/Scala 3 is going to swap the meaning of these two (already does with a flag), would it be possible to support it in kind-projector, to be able to cross-compile Scala 2 / dotty projects with new syntax directly, without going through intermediate `*` period.

That would be convenient for those projects that are more comfortable making 1 syntax jump right now, instead of 2 syntax jumps in the future.
would a volunteer like to assemble release notes? to help call attention to interesting changes
I think it would be useful to implement a Scalafix rewrite that rewrote code to use the improved syntax kind-projector provides.
```scala
[check: kind-projector] 1 new symbols.
[check: kind-projector] package scala
Caught java.lang.AssertionError: assertion failed: <none>
semigroup.scala
java.lang.AssertionError: assertion failed: <none>
	at scala.reflect.internal.SymbolTable.throwAssertionError(SymbolTable.scala:163)
	at scala.tools.nsc.typechecker.Typers$Typer.typedPackageDef$1(Typers.scala:5260)
	at scala.tools.nsc.typechecker.Typers$Typer.typedMemberDef$1(Typers.scala:5555)
	at scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5602)
	at scala.tools.nsc.typechecker.Typers$Typer.runTyper$1(Typers.scala:5640)
	at scala.tools.nsc.typechecker.Typers$Typer.typedInternal(Typers.scala:5672)
	at scala.tools.nsc.typechecker.Typers$Typer.body$2(Typers.scala:5613)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5618)
	at scala.tools.nsc.typechecker.TreeCheckers$TreeChecker.typed(TreeCheckers.scala:256)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5699)
	at scala.tools.nsc.typechecker.TreeCheckers.$anonfun$check$1(TreeCheckers.scala:213)
	at scala.tools.nsc.typechecker.TreeCheckers.runWithUnit(TreeCheckers.scala:200)
	at scala.tools.nsc.typechecker.TreeCheckers.check(TreeCheckers.scala:211)
	at scala.tools.nsc.typechecker.TreeCheckers.$anonfun$checkTrees$3(TreeCheckers.scala:194)
	at scala.tools.nsc.typechecker.TreeCheckers.$anonfun$checkTrees$1(TreeCheckers.scala:181)
	at scala.tools.nsc.typechecker.TreeCheckers.$anonfun$checkTrees$1$adapted(TreeCheckers.scala:194)
	at scala.collection.Iterator.foreach(Iterator.scala:944)
	at scala.collection.Iterator.foreach$(Iterator.scala:944)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1432)
	at scala.tools.nsc.typechecker.TreeCheckers.checkTrees(TreeCheckers.scala:194)
	at scala.tools.nsc.Global$Run.runCheckers(Global.scala:1366)
	at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1477)
	at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1430)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:1423)
	at scala.tools.nsc.Global$Run.compile(Global.scala:1539)
	at xsbt.CachedCompiler0.run(CompilerInterface.scala:130)
	at xsbt.CachedCompiler0.run(CompilerInterface.scala:105)
	at xsbt.CompilerInterface.run(CompilerInterface.scala:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sbt.internal.inc.AnalyzingCompiler.call(AnalyzingCompiler.scala:237)
	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:111)
	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:90)
	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$3(MixedAnalyzingCompiler.scala:83)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
	at sbt.internal.inc.MixedAnalyzingCompiler.timed(MixedAnalyzingCompiler.scala:134)
	at sbt.internal.inc.MixedAnalyzingCompiler.compileScala$1(MixedAnalyzingCompiler.scala:74)
	at sbt.internal.inc.MixedAnalyzingCompiler.compile(MixedAnalyzingCompiler.scala:117)
	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1(IncrementalCompilerImpl.scala:305)
	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1$adapted(IncrementalCompilerImpl.scala:305)
	at sbt.internal.inc.Incremental$.doCompile(Incremental.scala:101)
	at sbt.internal.inc.Incremental$.$anonfun$compile$4(Incremental.scala:82)
	at sbt.internal.inc.IncrementalCommon.recompileClasses(IncrementalCommon.scala:110)
	at sbt.internal.inc.IncrementalCommon.cycle(IncrementalCommon.scala:57)
	at sbt.internal.inc.Incremental$.$anonfun$compile$3(Incremental.scala:84)
	at sbt.internal.inc.Incremental$.manageClassfiles(Incremental.scala:129)
	at sbt.internal.inc.Incremental$.compile(Incremental.scala:75)
	at sbt.internal.inc.IncrementalCompile$.apply(Compile.scala:61)
	at sbt.internal.inc.IncrementalCompilerImpl.compileInternal(IncrementalCompilerImpl.scala:309)
	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileIncrementally$1(IncrementalCompilerImpl.scala:267)
	at sbt.internal.inc.IncrementalCompilerImpl.handleCompilationError(IncrementalCompilerImpl.scala:158)
	at sbt.internal.inc.IncrementalCompilerImpl.compileIncrementally(IncrementalCompilerImpl.scala:237)
	at sbt.internal.inc.IncrementalCompilerImpl.compile(IncrementalCompilerImpl.scala:68)
	at sbt.Defaults$.compileIncrementalTaskImpl(Defaults.scala:1443)
	at sbt.Defaults$.$anonfun$compileIncrementalTask$1(Defaults.scala:1417)
	at scala.Function1.$anonfun$compose$1(Function1.scala:44)
	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:39)
	at sbt.std.Transform$$anon$4.work(System.scala:66)
	at sbt.Execute.$anonfun$submit$2(Execute.scala:263)
	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:16)
	at sbt.Execute.work(Execute.scala:272)
	at sbt.Execute.$anonfun$submit$1(Execute.scala:263)
	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:174)
	at sbt.CompletionService$$anon$2.call(CompletionService.scala:37)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
```
Ideally, the poly λ value syntax could support multiple arguments, so instead of this -

```scala
implicit val functorOption: Functor[Option] = new Functor[Option] {
  override def map[A, B](f: A => B)(fa: Option[A]): Option[B] = fa.map(f)
}
```

we could write this -

```scala
implicit val functorOption: Functor[Option] = λ[Functor[Option]](f => fa => fa.map(f))
```

It would be even better if type inference could figure out the type arg to λ, but I have a feeling that's a baked in limitation at the moment.

```scala
implicit val functorOption: Functor[Option] = λ(f => fa => fa.map(f))

```
1. it seems `-D` options no longer work
2. please consider migration to `-P` plugin options
3. see https://github.com/random-maven/scalor-maven-plugin/issues/11
 

I happen to be stuck with a build pipeline that uses gradle and its scala plugin. Is there a way to use this with gradle?
Hi,

is it possible to encode higher order type lambdas like `λ[A => B => A]` or `λ[A => λ[B => A]]` ?

I tried but end up with `not found: type B` and `not found: type λ`.

Thanks