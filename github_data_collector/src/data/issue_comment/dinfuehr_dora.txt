
Implements the three examples from #117.
Kept files nil1.dora - nil9.dora for now, they can
be deleted when the feature is removed for good.
We should list all functions that throw exceptions on failure and think how we can make them not do that.

In some cases it might be as easy as change the return from `T|throws` to `Option[T]` or `Result[T]`.

In other cases it might be necessary to think of how to provide the functionality in a different way (e. g. encouraging the use of iterators or higher-order functions instead of indexing into an array).

The goal of this issue is to gather the insight first, such that considerations can cover the complete list of functions in question.

The overarching motivation is to reduce the number of control flow constructs a user has to keep in mind when reading code.
... similar to {Int,Long,Float,Double,Bool}#toStringBinary (see #121).
```
(5.0).compareTo(7.0)
```

fails with

```
thread 'main' panicked at 'unknown intrinsic DoubleCmp',
  dora/src/baseline/codegen.rs:2050:18
```

because the intrinsic is missing there.

This issue should be tackled after #115 is merged to avoid unnecessary merge conflicts.
(This is probably a good beginner issue.)

There are a few operations that operate on integers that can be implemented manually, but could profit a lot from directly using the CPU's specially-built instruction for it.
All operations listed here have a direct counterpart in assembly.

The goal is to provide a method for these operations that make use of the special CPU instruction:

- [x] [POPCNT](https://www.felixcloutier.com/x86/popcnt) — Return the Count of Number of Bits Set to 1 (https://github.com/dinfuehr/dora/pull/131)
- [x] [LZCNT](https://www.felixcloutier.com/x86/lzcnt) — Count the Number of Leading Zero Bits (https://github.com/dinfuehr/dora/pull/131)
- [x] [TZCNT](https://www.felixcloutier.com/x86/tzcnt) — Count the Number of Trailing Zero Bits (https://github.com/dinfuehr/dora/pull/131)
- [ ] <your idea here?>

For each of then instructions the following steps can be taken:

1. Add the method to `Int.dora`/`Long.dora` and mark it as `@internal`.
2. Add the method to the list of intrinsic functions in `prelude.rs`.
3. From there, you can use existing functions as an example of where and how to wire things up in `codegen.rs`.
4. Write tests to verify that the function works as expected. Make sure to identify and cover corner cases as well!

---

[Bit Manipulation Instruction Sets](https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets) gives a good overview of additional operations that could be of interest.
This is the last part of the changes from #88.

After this, I will work on the approach you outlined, beginning with the first point:

> The first PR could simply introduce modules and only allow static functions in it. Making <module>::<fctname>() calls work should be relatively easy. Do not allow modules and classes with the same name for now.
I gave #99 a try, what do you think?
Extracted from https://github.com/dinfuehr/dora/issues/39:

I'd like to get rid of those two control-flow keywords. Reasoning:

- The alternative of using an additional method feels only a slightly bit clunkier to write and vastly easier to read and understand when coming back after a month.¹
- In my experience the implementation complexity and the mental complexity for users has never been worth the "convenience".
- There aren't much reasons for `break` and `continue` to exist in general – it feels like this is something that got copied from C and keeps getting copied without anyone questioning it much. I certainly think that if `break` and `continue` didn't exist today, we wouldn't invent it.

Prior art:

One language that did away with `continue` is Scala; and in the last 10 years I never heard a single complaint about it. (`break` in Scala is done as a library (that throws exceptions) – I rather not go this way either.)


---

¹ I ported Java's `java.time` implementation from Java to Scala and had to deal with a lot of `break`s and `continue`s, and the replacements were never too bad. Replacing `break`s is almost trivial – `continue` is a bit more involved, but barely ever used.

The biggest trouble was always understanding what the `break` or `continue` was trying to do in the first place – a problem we won't have without `break` and `continue` in the first place.