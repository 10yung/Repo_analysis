proxygen is available as a port in vcpkg, a C++ library manager that simplifies installation for proxygen and other project dependencies. Documenting the install process here will help users get started by providing a single set of commands to build proxygen, ready to be included in their projects.

We also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.

I'm a maintainer for vcpkg, and [here is what the port script looks like](https://github.com/microsoft/vcpkg/blob/master/ports/proxygen/portfile.cmake). We try to keep the library maintained as close as possible to the original library.
Hi, when transferring large file (eg. 5G, connect successfully), client threw out an error : [CurlClient.cpp]Got error=LocalError:No Error, Exceeded max PTO. 
**So the first question is that what causes PTO timeout.**
However if I test mvfst alone instead of proxygen, there's no such exception.

The strange thing is that if I modify the codes in SampleHandlers.h:

> folly::getCPUExecutor()->add(std::bind(&StaticFileHandler::readFile, this, folly::EventBaseManager::get()->getEventBase()));

into:

> readFile();

that is to say  I skip the CPUExecutor, I can transfer the large file no matter what size it is. **I wonder whether  such modification will leave some hidden troubles skipping the CPUExecutor or do you guys have any other good idea of transferring large files? Thanks!**
Hello!
When onError, core dump occurs; How to fix it?
Thanks!

Program terminated with signal 11, Segmentation fault.
#0  0x0000000000636fd6 in proxygen::Filter::sendHeaders(proxygen::HTTPMessage&) ()
Missing separate debuginfos, use: debuginfo-install bzip2-libs-1.0.6-13.el7.x86_64 elfutils-libelf-0.168-8.el7.x86_64 glibc-2.17-106.el7_2.8.x86_64 keyutils-libs-1.5.8-3.el7.x86_64 krb5-libs-1.13.2-12.el7_2.x86_64 libcom_err-1.42.9-7.el7.x86_64 libgcc-4.8.5-36.el7_6.1.x86_64 libselinux-2.2.2-6.el7.x86_64 openssl-libs-1.0.2k-16.el7.x86_64 pcre-8.32-15.el7_2.1.x86_64 snappy-1.1.0-3.el7.x86_64 xz-libs-5.2.2-1.el7.x86_64 zlib-1.2.7-17.el7.x86_64
(gdb) bt
#0  0x0000000000636fd6 in proxygen::Filter::sendHeaders(proxygen::HTTPMessage&) ()
#1  0x00000000006385f2 in proxygen::CompressionFilter::sendHeaders(proxygen::HTTPMessage&) ()
#2  0x000000000052aac3 in proxygen::ResponseBuilder::send (this=0x7fcc8179f290) at ../proxygenlib/proxygen/include/proxygen/httpserver/ResponseBuilder.h:164
#3  0x000000000052a8bc in proxygen::ResponseBuilder::sendWithEOM (this=0x7fcc8179f290) at ../proxygenlib/proxygen/include/proxygen/httpserver/ResponseBuilder.h:136
#4  0x0000000000528505 in broalgo::shield::PushRequestHandler::onError (this=0x7fcc74022a30, err=proxygen::kErrorRead) at server/shield_request_handler.cc:393
#5  0x0000000000636ee5 in proxygen::Filter::onError(proxygen::ProxygenError) ()
#6  0x0000000000687139 in proxygen::RequestHandlerAdaptor::setError(proxygen::ProxygenError) ()
#7  0x0000000000686b84 in proxygen::RequestHandlerAdaptor::onError(proxygen::HTTPException const&) ()
#8  0x00000000006e3b2f in proxygen::HTTPTransaction::onError(proxygen::HTTPException const&) ()
#9  0x00000000006bc44c in proxygen::HTTPSession::onError(unsigned long, proxygen::HTTPException const&, bool) ()
#10 0x000000000071583b in proxygen::PassThroughHTTPCodecFilter::onError(unsigned long, proxygen::HTTPException const&, bool) ()
#11 0x000000000072eb43 in proxygen::HTTP1xCodec::onParserError(char const*) ()
#12 0x000000000072e8a8 in proxygen::HTTP1xCodec::onIngressEOF() ()
#13 0x0000000000715f33 in proxygen::PassThroughHTTPCodecFilter::onIngressEOF() ()
#14 0x00000000006c5c12 in proxygen::HTTPSession::shutdownTransport(bool, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) ()
#15 0x00000000006b89cd in proxygen::HTTPSession::readEOF() ()
#16 0x00007fcd020e41d0 in ?? ()
#17 0x00007fcc74010f68 in ?? ()
#18 0x00007fcc74001ca0 in ?? ()
#19 0x00007fcc8179f9e0 in ?? ()
#20 0x00000000006cf8b0 in folly::detail::ScopeGuardImpl<folly::IOBufQueue::updateGuard()::{lambda()#1}, true>::~ScopeGuardImpl() ()
#21 0x00007fcd020e25ca in ?? ()
#22 0x00000002817a2700 in ?? ()
#23 0x00007fcc74001ca0 in ?? ()
#24 0x00007fcc74001fa8 in ?? ()
#25 0x0000000038a00914 in ?? ()
#26 0x00007fcc8179fd50 in ?? ()
#27 0x00007fcd020fe946 in ?? ()
#28 0x00007fcc74000e40 in ?? ()
#29 0x00007fcc74000b90 in ?? ()
#30 0x00007fcc740010d0 in ?? ()
#31 0x00000000008abe42 in event_active_nolock (ev=0x0, res=<optimized out>, ncalls=<optimized out>) at event.c:2341
#32 0x00007fcc74001e28 in ?? ()
#33 0x00007fcc8179fd50 in ?? ()
#34 0x00007fcd020e9fa7 in ?? ()
#35 0x0000000200000054 in ?? ()
#36 0x00007fcc74001e28 in ?? ()
#37 0x00007fcc8179fd80 in ?? ()
#38 0x00007fcd02111ced in ?? ()
#39 0x00007fcc74001e28 in ?? ()
#40 0x0000005400070002 in ?? ()
#41 0x0000000000000000 in ?? ()

My code:
383 void PushRequestHandler::onError(ProxygenError err) noexcept {
384     LOG_ERROR( "Client error: %s", proxygen::getErrorString(err));
385     gPushBody_="version=0.0.2|r=|d=";
386     if (body_)
387         LOG_ERROR( "Client error: %s", body_->data());
388     ResponseBuilder(downstream_)
389         .status(200, "OK")
390         .header("Request-Number",
391                 folly::to<std::string>(stats_->getRequestCount()))
392         .body(gPushBody_)
393         .sendWithEOM();
394     if (this != NULL) {
395         delete this;
396     }
397 }
When I test the proxygen under 1Gbps bandwidth、0.22ms delay and 0 packet loss rate, the results shows that speed of QUIC and FTP are 70M/S and 110M/s. Furthermore, when delay is 40ms, loss rate is 0.01%, the speed of QUIC is 0.8M/s and 60M/s. The file transferred is 500MB in these two tests, applying BBR as CC algorithm. So I am curious of the reasons resulting in such phenomenon, could you please give me some advice? Thanks !(BTW I set the params “-congestion=bbr -connect_udp=true -early_data=true")
hello!

i want build hq in qt 

my qt project is add httpserver/samples/hq files and link all library file in proxygen folder 
 (libproxygen.a, libmvfst_client.a, libmvfst_server.a, libfolly.a, libfizz.a, libwangle.a, ...)

but fail to build and issue message is

/home/wg/proxygen/proxygen/httpclient/samples/curl/CurlClient.cpp:169: error: undefined reference to `proxygen::HTTP2Codec::requestUpgrade(proxygen::HTTPMessage&)'

/home/wg/proxygen/proxygen/httpclient/samples/curl/CurlClient.cpp:154: error: undefined reference to `proxygen::HTTPUpstreamSession::newTransaction(proxygen::HTTPTransactionHandler*)'
...

I wonder if there is any documentation to build
release: proxygen-2019.09.23.00
O/S: MacOS 10.13.6

I get a couple of unit test failures :

```
 99% tests passed, 2 tests failed out of 935

Total Test time (real) =  33.45 sec

The following tests FAILED:
	850 - HTTPTimeTests.ReallyOldTimeTest (Failed)
	887 - TimeTest.GetDateTimeStr (Failed)

$ uname -a
Darwin Kernel Version 17.7.0: Sun Jun  2 20:31:42 PDT 2019; root:xnu-4570.71.46~1/RELEASE_X86_64 x86_64
```
Hey guys,

I am trying to create a small test app to play with proxygen and see how it works. So I copied [the static sample](https://github.com/facebook/proxygen/tree/master/proxygen/httpserver/samples/static) into a new folder and configured cmake to install external dependencies. But for some reason, when I compile it, I get the following errors:

```
[ 83%] Building CXX object CMakeFiles/StaticApp.dir/StaticServer.cpp.o
In file included from sample-proxygen-static/build/external/include/folly/DefaultKeepAliveExecutor.h:21,
                 from sample-proxygen-static/build/external/include/folly/executors/ThreadPoolExecutor.h:22,
                 from sample-proxygen-static/build/external/include/folly/executors/CPUThreadPoolExecutor.h:19,
                 from sample-proxygen-static/StaticServer.cpp:13:
sample-proxygen-static/build/external/include/glog/logging.h: In instantiation of ‘std::__cxx11::string* google::Check_EQImpl(const T1&, const T2&, const char*) [with T1 = long unsigned int; T2 = int; std::__cxx11::string = std::__cxx11::basic_string<char>]’:
sample-proxygen-static/build/external/include/folly/io/async/AsyncSSLSocket.h:172:7:   required from here
sample-proxygen-static/build/external/include/glog/logging.h:717:32: error: comparison of integer expressions of different signedness: ‘const long unsigned int’ and ‘const int’ [-Werror=sign-compare]
 DEFINE_CHECK_OP_IMPL(Check_EQ, ==)  // Compilation error with CHECK_EQ(NULL, x)?
                                ^
sample-proxygen-static/build/external/include/glog/logging.h:148:53: note: in definition of macro ‘GOOGLE_PREDICT_TRUE’
 #define GOOGLE_PREDICT_TRUE(x) (__builtin_expect(!!(x), 1))
                                                     ^
sample-proxygen-static/build/external/include/glog/logging.h:717:1: note: in expansion of macro ‘DEFINE_CHECK_OP_IMPL’
 DEFINE_CHECK_OP_IMPL(Check_EQ, ==)  // Compilation error with CHECK_EQ(NULL, x)?
 ^~~~~~~~~~~~~~~~~~~~
sample-proxygen-static/build/external/include/glog/logging.h: In instantiation of ‘std::__cxx11::string* google::Check_GTImpl(const T1&, const T2&, const char*) [with T1 = unsigned int; T2 = int; std::__cxx11::string = std::__cxx11::basic_string<char>]’:
sample-proxygen-static/build/external/include/proxygen/lib/http/session/HTTPSessionBase.h:334:5:   required from here
sample-proxygen-static/build/external/include/glog/logging.h:722:32: error: comparison of integer expressions of different signedness: ‘const unsigned int’ and ‘const int’ [-Werror=sign-compare]
 DEFINE_CHECK_OP_IMPL(Check_GT, > )
                                ^
sample-proxygen-static/build/external/include/glog/logging.h:148:53: note: in definition of macro ‘GOOGLE_PREDICT_TRUE’
 #define GOOGLE_PREDICT_TRUE(x) (__builtin_expect(!!(x), 1))
                                                     ^
sample-proxygen-static/build/external/include/glog/logging.h:722:1: note: in expansion of macro ‘DEFINE_CHECK_OP_IMPL’
 DEFINE_CHECK_OP_IMPL(Check_GT, > )
 ^~~~~~~~~~~~~~~~~~~~
cc1plus: all warnings being treated as errors
make[2]: *** [CMakeFiles/StaticApp.dir/build.make:63: CMakeFiles/StaticApp.dir/StaticServer.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:298: CMakeFiles/StaticApp.dir/all] Error 2
make: *** [Makefile:84: all] Error 2
```

Am I doing something wrong? Here is my repo with this sample: https://github.com/eugene-manuilov/sample-proxygen-static

Thanks in advance!


As per afrind's suggestion, opening an issue:

#######################################################

Is there a plan to "fold" HQ into HTTPServer proper ?

Borrowing from sample EchoServer.cpp code, would love to have something like example below.

With 0 changes to existing app, incorporate support for QUIC and later on, H3, in part related to HTTP .

###################
using Protocol = HTTPServer::Protocol;

DEFINE_int32(http_port, 11000, "Port to listen on with HTTP protocol");
DEFINE_int32(spdy_port, 11001, "Port to listen on with SPDY protocol");
DEFINE_int32(h2_port, 11002, "Port to listen on with HTTP/2 protocol");
DEFINE_int32(h3_port, 11003, "Port to listen on with HTTP/3 protocol");**

...
HTTPServer server(std::move(options));
server.bind(IPs);

// Start HTTPServer mainloop in a separate thread
std::thread t([&] () {
server.start();
});
please help, when I run a demo, it always print these information, why?

`
proxygen_server: /work/code/proxygen-2019.07.01.00/proxygen/folly/folly/io/async/EventHandler.cpp:43: bool folly::EventHandler::registerImpl(uint16_t, bool): Assertion `event_.ev_base != nullptr' failed.
*** Aborted at 1562667593 (unix time) try "date -d @1562667593" if you are using GNU date ***
PC: @                0x0 (unknown)
*** SIGABRT (@0x3e900000759) received by PID 1881 (TID 0x7fca99213700) from PID 1881; stack trace: ***
    @     0x7fca9c880390 (unknown)
    @     0x7fca9c4da428 gsignal
    @     0x7fca9c4dc02a abort
    @     0x7fca9c4d2bd7 (unknown)
    @     0x7fca9c4d2c82 __assert_fail
    @     0x7fca9e24bf4b folly::EventHandler::registerImpl()
    @     0x7fca9e23a927 folly::EventHandler::registerInternalHandler()
    @     0x7fca9e23c5c6 folly::NotificationQueue<>::Consumer::startConsumingInternal()
    @     0x7fca9e23809e folly::EventBase::initNotificationQueue()
    @     0x7fca9e233296 folly::EventBase::EventBase()
    @     0x7fca9e1bff27 folly::EventBase::EventBase()
    @     0x7fca9e24909a folly::EventBaseManager::EventBaseInfo::EventBaseInfo()
    @     0x7fca9e248e3d folly::EventBaseManager::getEventBase()
    @     0x7fca9e9d1cd1 proxygen::HTTPServer::start()
    @           0x431190 _ZZ4mainENKUlvE_clEv
    @           0x4329b2 _ZNSt12_Bind_simpleIFZ4mainEUlvE_vEE9_M_invokeIJEEEvSt12_Index_tupleIJXspT_EEE
    @           0x432908 _ZNSt12_Bind_simpleIFZ4mainEUlvE_vEEclEv
    @           0x432898 _ZNSt6thread5_ImplISt12_Bind_simpleIFZ4mainEUlvE_vEEE6_M_runEv
    @     0x7fca9cd5ac80 (unknown)
    @     0x7fca9c8766ba start_thread
    @     0x7fca9c5ac41d clone
    @                0x0 (unknown)
`


`
/*
 *  Copyright (c) 2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */
#include <gflags/gflags.h>
#include <folly/Memory.h>
#include <folly/init/Init.h>
#include <folly/Portability.h>
#include <folly/io/async/EventBaseManager.h>
#include <proxygen/httpserver/HTTPServer.h>
#include <proxygen/httpserver/RequestHandlerFactory.h>
#include <unistd.h>

#include "DemoHandler.h"

using namespace DemoService;
using namespace proxygen;

using folly::EventBase;
using folly::EventBaseManager;
using folly::SocketAddress;

using Protocol = HTTPServer::Protocol;

DEFINE_int32(http_port, 10086, "Port to listen on with HTTP protocol");
DEFINE_string(ip, "localhost", "IP/Hostname to bind to");
DEFINE_int32(threads, 10, "Number of threads to listen on. Numbers <= 0 "
             "will use the number of cores on this machine.");

class DemoHandlerFactory : public RequestHandlerFactory {
 public:
  void onServerStart(folly::EventBase* evb) noexcept override {
      printf("on server start\n");
  }

  void onServerStop() noexcept override {
  }

  RequestHandler* onRequest(RequestHandler*  handler, HTTPMessage* msg) noexcept override {
    printf("%s\n", msg->getURL().c_str() );
    return new DemoHandler();
  }

 private:
};

int main(int argc, char* argv[]) {
  folly::init(&argc, &argv, true);

  std::vector<HTTPServer::IPConfig> IPs = {
    {SocketAddress(FLAGS_ip, FLAGS_http_port, true), Protocol::HTTP},
  };

  if (FLAGS_threads <= 0) {
    FLAGS_threads = sysconf(_SC_NPROCESSORS_ONLN);
    CHECK(FLAGS_threads > 0);
  }

  HTTPServerOptions options;
  options.threads = static_cast<size_t>(FLAGS_threads);
  options.idleTimeout = std::chrono::milliseconds(60000);
  options.shutdownOn = {SIGINT, SIGTERM};
  options.enableContentCompression = true;
  options.handlerFactories = RequestHandlerChain()
      .addThen<DemoHandlerFactory>()
      .build();

  HTTPServer server(std::move(options));
  server.bind(IPs);

  // Start HTTPServer mainloop in a separate thread
  std::thread t([&] () {
    server.start();
  });

  t.join();
  return 0;
}

`
Hi All,

  I am lookin for a Dockerfile for proxygen, I found one in github docker jrandall/proxygen, this docker works fine but the Dockerfile inside the same is giving error. Please let me know if any Dockerfile available for the same. Btw do we have rpm for Centos 7 ?.

rgds
Balaji