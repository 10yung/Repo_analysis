Hello, I am creating an application which can connect to a multiple websocket servers. I have successfully implemented scarlet which I am able to connect and received events also the response messages..

Then here's my question:

Is it possible to know or determine if in which server did the message came from..

here is my code..

```
if(event instanceof WebSocket.Event.OnMessageReceived){
                                      WebSocket.Event.OnMessageReceived e = (WebSocket.Event.OnMessageReceived) event;
                                      Log.d(TAG,"New Message!: " + e.getMessage());
                                  }
```

Thank you.



When someone tries to open a Websocket connection without using TLS (ie "ws:" instead of "wss:") on Android 9 and newer, the connection will fail and Scarlet will not provide any information about this to the developer. This confused me as well as the author of [this](https://stackoverflow.com/q/57675908/859277) post. 

Okhttp has a similar check [here](https://github.com/square/okhttp/blob/7a641531c8e03b10dc4fbf9f2465775d7ecc7649/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.kt#L160). 

I check for a ClassNotFoundException, so it should not cause any issues for non-Android apps that use Scarlet.
Hi, I'm using the following initialization for Scarlet, but the interceptor only logs information regarding connection and not content. This means that I can only log connection opened, closed, failed, etc. but I can't log the request to the websocket:

```
       val logging = HttpLoggingInterceptor(object : HttpLoggingInterceptor.Logger {
            override fun log(message: String) {
                Log.d("WebSocketEvent", message)
            }
        })

        logging.level = HttpLoggingInterceptor.Level.BODY
        val okHttpClient = OkHttpClient.Builder()
            .addInterceptor(logging)
            .build()

        val protocol = OkHttpWebSocket(
            okHttpClient,
            OkHttpWebSocket.SimpleRequestFactory(
                { Request.Builder().url("MY_URL").build() },
                { ShutdownReason.GRACEFUL }
            )
        )
        val configuration = Scarlet.Configuration(
            lifecycle,
            listOf(RxJava2StreamAdapterFactory()),
            listOf(GsonMessageAdapter.Factory()),
        )
        val socket = Scarlet(protocol, configuration).create()
```
Is Tinder/Scarlet alive? 

- Last commit in master was 4 monthes ago
- PR are not merged
- v.0.2.x is not published (I have to use 0.2.5-SNAPSHOT).

Who is responsible for approving PRs? I've spent a lot of time for adding this library in my project, but now I'm stuck with some critical issues:
- can't initiate reconnection when server closes WS connection (lifecycleRegistry.onNext(LifecycleState.Started) does nothing in this case).
- in case of no network (turned off WiFi), scarlet continues to reconnect even is app is paused (and establishes connection in foreground when wifi is swithed on!)

I much appreciate greate work that was done here, gson adapter, coroutines, retrofit-like config, but now I'm very doubt of using it in production.
I'm using:
`AndroidLifecycle.ofLifecycleOwnerForeground(application, activity, THROTTLE_TIMEOUT)`
as my lifecycle and passing this into scarlet via `::lifecycle()` builder method.  However, when my activity is paused/stopped scarlet continues to attempt reconnection.  Is there lterally no way to shutdown Scarlet manually?  I've tried with a `LifecyleRegistry` and setting the state manually, which also does nothing...
Is there any way for me to send it as raw data instead of gson? 
Can someone help me with an example of Scarlet with Stomp protocol ?
