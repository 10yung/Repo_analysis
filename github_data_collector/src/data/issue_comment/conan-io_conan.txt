I am working on a cross-platform C++ project, exploring if we can use Conan to manage our library dependencies. Each library is pre-built and has the following folder structure.
```
MyLib/
├── Lib
│   ├── Mac
│   │   ├── Debug
│   │   │   └── x86_64
│   │   │       └── MyLib.a
│   │   └── Release
│   │       └── x86_64
│   │           └── MyLib.a
│   └── Win
│       ├── Debug
│       │   ├── Win32
│       │   │   └── MyLib.lib
│       │   └── x86_64
│       │       └── MyLib.lib
│       └── Release
│           ├── Win32
│           │   └── MyLib.lib
│           └── x86_64
│               └── MyLib.lib
└── include
    └── *.h
```
We have multiple Xcode and Visual Studio projects (not generated using CMake) that consume these libraries. 
What is the best way to package these libraries such that I can switch between the Debug/Release or Win32/X64 configurations in Xcode/Visual Studio without having to run Conan again?

- [x] I've read the [CONTRIBUTING guide](https://github.com/conan-io/conan/blob/develop/.github/CONTRIBUTING.md).
When my package is marked "editable," and I `conan install` a package that requires the "editable" package, the .lib filename does not get added to cpp_info.libs if the editable package uses `tools.collect_libs(self)` in `def package_info(self)`.

I am using a layout when making the package "editable" in order to define the libdir since the .lib file is generated under `$(SolutionDir)$(Configuration)\`, which is the default location assigned by Visual Studio, and one I'd prefer not to change.  This location is not the same as where the recipe puts the .lib file, which is under the "lib" folder.

Layouts file:
```
[libdirs]
{{settings.build_type}}
```

I would expect `collect_libs` to search the libdir defined in the layout in this case.

I can easily workaround this by specifying the lib name, rather than use the utility function.


### Environment Details (include every applicable attribute)
  * Windows 10 Version 1809
  * Microsoft Visual Studio 2017 Version 15.9.17
  * Conan version 1.21.1
  * Python 3.7.0

This feature is very useful (mostly?) for Android as it supports multiple ABIs in the same apk/aab.

Starting with Qt 5.14.0, Qt for Android provides a way to build the apps for all Android ABIs in one go, and without a `multiarch/Any/None` in arch settings it's impossible to create an Android multilib Qt package for conan.

### Environment Details (include every applicable attribute)
  * Operating System+version: Ubuntu 19.10
  * Conan version: 1.19.2 - 1.21.1
  * Python version: 3.6

### Steps to reproduce

Consider the following tree and files:

```
.
├── ffmpeg
│   ├── conanfile.py
└── variant
    └── conanfile.py
```

variant/conanfile.py:

```py
class Meta(ConanFile):
  name = "nano"
  settings = "os", "arch", "compiler"
  version = "1.0"

  requires = (
    "ffmpeg/1.0",
  )

  default_options = {"ffmpeg:variation": "nano"}
```

ffmpeg/conanfile.py (shortened):

```py
class FfmpegConan(ConanFile):
    name = "ffmpeg"
    version = "1.0"
    settings = "os", "compiler", "build_type", "arch"
    options = {"variation": ["standard", "nano"]}
    default_options = {"variation": "standard"}

    def requirements(self):
        variation = str(self.options.variation)
        print(f"(requirements) variation = {variation}")
```

Script:

```
$ conan export ffmpeg
$ conan export variant
$ conan graph lock --build --lockfile . variant
$ conan graph build-order --build cascade --build outdated .
$ cat conan.lock
$ conan create --build ffmpeg/1.0 --test-folder=None -ne --lockfile . ffmpeg
```

#### What I would expect to happen:

Since in the root package ("variant") the ffmpeg `variation` option is overridden, I would expect it to take effect in the lockfile (it does) and to be applied when `conan create` is called (it isn't). 

The following should be printed:

```
(requirements) variation = nano
```

#### What actually happens

```
(requirements) variation = standard
```

is printed; even though

  * I can see the correct value captured in the lockfile
  * In other methods (if I print it similarly) the correct value is applied) 
  * When other commands are called (`conan graph lock` and `conan graph build-order`) I also see the correct value.

Repro: https://github.com/sztomi/default_options_not_applied



There is one huge feature that I miss in conan, or maybe I just did not understand how to achieve this sort of usage.

In our artifactory we have various of binaries packages, however they can only ever be used one at a time because of the need to load the environments.  

in cargo for example you have an ability to do cargo install 'package' and it will jump into ~/.cargo/bin and you can use the binaries without any additional steps. 
I do understand that there is a need for environments to run packages apps but I think it still could be possible to provide a generator that would mimic this simplicity my proposal is as follows:

Given application named 'potato-producer' a new generator would be available called lets say 'app_gen' 

after doing conan install -g app_gen ~/bin  potato-producer/1.0.0
It would create a:
1) directory ~/bin/potato-producer.dir
2) a script ~/bin/potato-producer 
Script would present itself as the target application, in the simplest aproach it could be something as simple as:
```
#!/bin/bash
source ~/bin/potato-producer.dir/activate.sh
source ~/bin/potato-producer.dir/activate_run.sh
~/bin/potato-producer "${@}"
```

This would allow to install various packages from conan and have them as usable binaries without any hussle of dealing with environments.




- [X] I've read the [CONTRIBUTING guide](https://github.com/conan-io/conan/blob/develop/.github/CONTRIBUTING.md).

Changelog: Fix: Cleaning ``LD_LIBRARY_PATH`` environment in ``SCM`` commands for "pyinstaller" installations, as SSL can fail due to using old SSL stuff from Conan instead from git/svn

Docs: Omit

It contains mostly a refactor, centralizing executions and subprocess stuff (not all of it, but most of it from production code). The only functional change is to introduce the pyinstaller fix in the SCM run() method.

Close #6161

#tags: slow

After reading https://docs.conan.io/en/latest/reference/env_vars.html#conan-user-home-short
i thought i can now set  CONAN_USER_HOME_SHORT to None and override conanfile.py setting short_path=True. 
However, doing this after already having installed packages with short_paths =true and trying to install the same packages again gives me this error, which i do not understand:

```
Traceback (most recent call last):
  File "c:\venvs\py38-test\lib\site-packages\conans\client\command.py", line 1947, in run
    method(args[0][1:])
  File "c:\venvs\py38-test\lib\site-packages\conans\client\command.py", line 470, in install
    info = self._conan.install(path=args.path_or_reference,
  File "c:\venvs\py38-test\lib\site-packages\conans\client\conan_api.py", line 81, in wrapper
    return f(api, *args, **kwargs)
  File "c:\venvs\py38-test\lib\site-packages\conans\client\conan_api.py", line 553, in install
    deps_install(app=self.app,
  File "c:\venvs\py38-test\lib\site-packages\conans\client\manager.py", line 46, in deps_install
    deps_graph = graph_manager.load_graph(ref_or_path, create_reference, graph_info, build_modes,
  File "c:\venvs\py38-test\lib\site-packages\conans\client\graph\graph_manager.py", line 109, in load_graph
    return self._resolve_graph(root_node, graph_info, build_mode, check_updates, update, remotes,
  File "c:\venvs\py38-test\lib\site-packages\conans\client\graph\graph_manager.py", line 230, in _resolve_graph
    deps_graph = self._load_graph(root_node, check_updates, update,
  File "c:\venvs\py38-test\lib\site-packages\conans\client\graph\graph_manager.py", line 340, in _load_graph
    self._recurse_build_requires(graph, builder, check_updates, update, build_mode,
  File "c:\venvs\py38-test\lib\site-packages\conans\client\graph\graph_manager.py", line 277, in _recurse_build_requires
    self._binary_analyzer.evaluate_graph(graph, build_mode, update, remotes, nodes_subset, root)
  File "c:\venvs\py38-test\lib\site-packages\conans\client\graph\graph_binaries.py", line 321, in evaluate_graph
    self._evaluate_node(node, build_mode, update, remotes)
  File "c:\venvs\py38-test\lib\site-packages\conans\client\graph\graph_binaries.py", line 167, in _evaluate_node
    self._process_node(node, pref, build_mode, update, remotes)
  File "c:\venvs\py38-test\lib\site-packages\conans\client\graph\graph_binaries.py", line 220, in _process_node
    self._evaluate_cache_pkg(node, package_layout, pref, metadata,  remote, remotes, update,
  File "c:\venvs\py38-test\lib\site-packages\conans\client\graph\graph_binaries.py", line 97, in _evaluate_cache_pkg
    assert node.prev, "PREV for %s is None: %s" % (str(pref), metadata.dumps())
AssertionError: PREV for test/test@test/test:ed4555d8a4e47e416cd9741d38e3e08abdd319f7 is None: {"recipe": {"revision": "0", "remote": "conan-local", "properties": {}, "checksums": {"conanmanifest.txt": {"md5": "21f3722a32c628942a1e5764f5f889d3", "sha1": "43d3f1180c97426756fd40e90c1b31e37aae788f"}, "conanfile.py": {"md5": "79b0f834bde95b6e170325a0234641e9", "sha1": "859bf52706552dee9e553aeb92543867485686ce"}}}, "packages": {"ed4555d8a4e47e416cd9741d38e3e08abdd319f7": {"revision": null, "recipe_revision": null, "remote": null, "properties": {}, "checksums": {}}}}
```

Note that the problem is gone when i delete the cache before installing.
Hi,

I am trying to add an artifactory repository in my VM. When I run the "conan user" command, I keep getting the error

**ERROR: Codepoint U+003F at position 4 of 'com?' not allowed. [Remote: <remote name>]**

But this works OK when I run it on windows. I assumed somehow files in .conan folder might have gotten corrupted, so tried using new ".conan" folder, but outcome didn't change. I also have latest conan installed in VM.

Any ideas how to fix this? Please let me know if you need any more information.
### Environment Details (include every applicable attribute)
  * Operating System+version: Mac Catalina
  * Compiler+version: Clang (built-in)
  * Conan version: 1.21.0
  * Python version: 3

### Description

Hi,

I made a repository to reproduce the problem:
https://github.com/prsolucoes/conan-cmake-test

And put all log and description here:
https://github.com/prsolucoes/conan-cmake-test/issues/1

But basically when i change on conanfile.py the generator to xcode it don't build. I tried a lot of things from internet/stackoverflow but without success.

Without the generator it works without problems.

### Logs (Include/Attach if Applicable)
<details><summary>Click to expand log</summary>

```
conanfile.py (ios_framework/1.0.0): Running build()
-- The C compiler identification is AppleClang 11.0.0.11000033
-- The CXX compiler identification is AppleClang 11.0.0.11000033
-- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang
-- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -- broken
CMake Error at /usr/local/Cellar/cmake/3.16.2/share/cmake/Modules/CMakeTestCCompiler.cmake:60 (message):
  The C compiler

    "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"

  is not able to compile a simple test program.

  It fails with the following output:

    Change Dir: /Users/paulo/Developer/workspaces/cpp/conan-cmake-test/out/build/CMakeFiles/CMakeTmp
    
    Run Build Command(s):/usr/bin/xcodebuild -project CMAKE_TRY_COMPILE.xcodeproj build -target cmTC_90580 -configuration Debug -hideShellScriptEnvironment && User defaults from command line:
        HideShellScriptEnvironment = YES
    
    Prepare build
    note: Using legacy build system
    === BUILD TARGET cmTC_90580 OF PROJECT CMAKE_TRY_COMPILE WITH CONFIGURATION Debug ===
    
    Check dependencies
    target specifies product type 'com.apple.product-type.tool', but there's no such product type for the 'iphoneos' platform
    
    ** BUILD FAILED **
    
    
    The following build commands failed:
    	Check dependencies
    (1 failure)
    
    

  

  CMake will not be able to correctly generate this project.
Call Stack (most recent call first):
  CMakeLists.txt:28 (project)


-- Configuring incomplete, errors occurred!
See also "/Users/paulo/Developer/workspaces/cpp/conan-cmake-test/out/build/CMakeFiles/CMakeOutput.log".
See also "/Users/paulo/Developer/workspaces/cpp/conan-cmake-test/out/build/CMakeFiles/CMakeError.log".
ERROR: conanfile.py (ios_framework/1.0.0): Error in build() method, line 23
	cmake.configure()
	ConanException: Error 1 while executing cd '/Users/paulo/Developer/workspaces/cpp/conan-cmake-test/out/build' && cmake -G "Xcode" -DCMAKE_TOOLCHAIN_FILE="/Users/paulo/.conan/data/darwin-toolchain/1.1.0/ezored/stable/package/5ab84d6acfe1f23c4fae0ab88f26e3a396351ac9/darwin-toolchain.cmake" -DCONAN_IN_LOCAL_CACHE="OFF" -DCONAN_COMPILER="apple-clang" -DCONAN_COMPILER_VERSION="11.0" -DCONAN_LIBCXX="libc++" -DBUILD_SHARED_LIBS="OFF" -DCMAKE_INSTALL_PREFIX="/Users/paulo/Developer/workspaces/cpp/conan-cmake-test/out/build/package" -DCMAKE_INSTALL_BINDIR="bin" -DCMAKE_INSTALL_SBINDIR="bin" -DCMAKE_INSTALL_LIBEXECDIR="bin" -DCMAKE_INSTALL_LIBDIR="lib" -DCMAKE_INSTALL_INCLUDEDIR="include" -DCMAKE_INSTALL_OLDINCLUDEDIR="include" -DCMAKE_INSTALL_DATAROOTDIR="share" -DCONAN_CMAKE_POSITION_INDEPENDENT_CODE="ON" -DCMAKE_EXPORT_NO_PACKAGE_REGISTRY="ON" -DCONAN_EXPORTED="1" -DCMAKE_BUILD_TYPE="Debug" -DPROJECT_CONFIG_ARCH="armv7" -DPROJECT_CONFIG_GROUP="" -Wno-dev '/Users/paulo/Developer/workspaces/cpp/conan-cmake-test/cmake'
make: *** [build] Error 1
```

</details>



Changelog: omit
Docs: omit

This test was failing in Windows due to hardcoded path
