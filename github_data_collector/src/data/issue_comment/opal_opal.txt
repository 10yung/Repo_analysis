Given this test.rb:

```rb
require 'opal-parser'
eval("# „Åì„Çì„Å´„Å°„ÅØ
p 1")
```

Opal 0.11.4 works fine.

```
% opal _0.11.4_ test.rb
Object freezing is not supported by Opal
1
```

Opal >= 1.0 raises the following error.

```
% opal _1.0.0_ test.rb
Failed to load WithCLexer, using pure Ruby lexer
Object freezing is not supported by Opal

/private/var/folders/01/8_5tmzpj66z4fp1y27j2q9dw0000gn/T/opal-nodejs-runner-20200118-48507-o2uodj:4665
      throw exception;
      ^
(eval):in `p 1'
encode: undefined method `encode' for nil
    at constructor.$$method_missing (/private/var/folders/01/8_5tmzpj66z4fp1y27j2q9dw0000gn/T/opal-nodejs-runner-20200118-48507-o2uodj:3907:56)
    at constructor.method_missing_stub (/private/var/folders/01/8_5tmzpj66z4fp1y27j2q9dw0000gn/T/opal-nodejs-runner-20200118-48507-o2uodj:1310:35)
    at constructor.$$slice (/private/var/folders/01/8_5tmzpj66z4fp1y27j2q9dw0000gn/T/opal-nodejs-runner-20200118-48507-o2uodj:26680:52)
    at constructor.$$tok (/private/var/folders/01/8_5tmzpj66z4fp1y27j2q9dw0000gn/T/opal-nodejs-runner-20200118-48507-o2uodj:38128:33)
    at constructor.$$advance (/private/var/folders/01/8_5tmzpj66z4fp1y27j2q9dw0000gn/T/opal-nodejs-runner-20200118-48507-o2uodj:30171:30)
    at constructor.$$next_token (/private/var/folders/01/8_5tmzpj66z4fp1y27j2q9dw0000gn/T/opal-nodejs-runner-20200118-48507-o2uodj:40836:28)
    at $$7 (/private/var/folders/01/8_5tmzpj66z4fp1y27j2q9dw0000gn/T/opal-nodejs-runner-20200118-48507-o2uodj:25876:29)
    at Object.Opal.yieldX (/private/var/folders/01/8_5tmzpj66z4fp1y27j2q9dw0000gn/T/opal-nodejs-runner-20200118-48507-o2uodj:1475:18)
    at constructor.$Kernel_catch$64 (/private/var/folders/01/8_5tmzpj66z4fp1y27j2q9dw0000gn/T/opal-nodejs-runner-20200118-48507-o2uodj:4845:21)
    at Opal.send (/private/var/folders/01/8_5tmzpj66z4fp1y27j2q9dw0000gn/T/opal-nodejs-runner-20200118-48507-o2uodj:1671:19)
```
Along with the recent changes to the node stacktrace this PR should be making the development experience both of opal itself and of opal apps much better.
resolves #2060
Consider the following code:

```rb
require 'strscan'

stream = StringScanner.new('cat builder.rb')
if stream.skip(/cat/)
  puts stream[0].inspect
end
```
**MRI 2.6.3**

```
$ ruby test.rb  
"cat"
```

**Opal master (01f63335)**

```
$ bundle exec opal test.rb  
nil
```
Hello,
there's a problem call a method of a class if this method exist outside the class the method is call here is an example :
`
def my_fct()
  puts "function 'my_fct' should not be called"
end

class My_class
  def another_meth()
	puts "dummy meth"
  end
end

my_var=My_class.new
my_var.my_fct()
`
Kernel#require was masked by Opal.require via Object#require.
This patch makes sure require is passed to Kernel#require, which can then be overwritten.
Overwriting Kernel#require is used by the (opal-)zeitwerk autoloader.
This PR improves autoload support and makes most of the autoload specs pass (~40, 15 left to go).

Behavior:
- Compiler, when finding a autoload, adds file to require.
- If specified is not found in the file system, compiler issues a warning.
- Autoload is resolved at runtime.
- `require_tree "a_dir", :autoload` will not require files at runtime, delegating it to a autoloader

- Runtime const_get_name, const_lookup_nesting and const_lookup_ancestors check for autoloads and resolve them.
- Module#const_missing no longer checks autoloads, because the runtime does it.
- const.$$autoload moved to const.$$prototype.$$autoload

Specs:
- Because ruby specs for autoload/module use dynamic file names, they won't work, as Opal can't resolve those at runtime.
- So all ruby/core/module specs are copied to opal/core/module and adapted to use fixed file names for autoloads.
- Copied specs are now blocked from running within ruby specs.
- Some specs require the module code to be reevaluated on subsequent autoloads. This is solved in part by providing another autoload file (see opal/core/module/fixtures/autoload_callback_?_.rb and autoload_o_1.rb), but that does not work for other cases still left to do. This may need a better strategy.

Other issues:
- `defined? Bla::Foo::Bar` uses const_get for Bar, which triggers a autoload for Bar, which it should not. it should use const_defined? for Bar.
- There is some code duplication left (duplication intentional for now for easier experimentation).
- Also the autoload code needs some compaction (expansion intentional for now for easier experimentation).

Comments and suggestions how to improve further much appreciated üëç 


Superseeds #1984 
As the title says, with enabled specs.
TracePoint support for the :class event
https://ruby-doc.org/core-2.6/TracePoint.html

However, in ruby, when passing the class to the block, the method .self is available, but not in Opal:

Ruby:
https://github.com/fxn/zeitwerk/blob/ad26cb0521cfb88fd8fee687dca7eb10e4ccf1bc/lib/zeitwerk/explicit_namespace.rb#L62

Opal:
https://github.com/isomorfeus/opal-zeitwerk/blob/25d6dad02f9d4add101ca4e26220ca2a91bcea46/opal/zeitwerk/explicit_namespace.rb#L54

Otherwise usage is just as in ruby:
https://github.com/isomorfeus/opal-zeitwerk/blob/25d6dad02f9d4add101ca4e26220ca2a91bcea46/opal/zeitwerk/explicit_namespace.rb#L69