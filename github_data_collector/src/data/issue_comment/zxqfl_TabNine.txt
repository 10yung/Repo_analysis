Running vim and tabnine on Fedora 31. 

Directly after start tabnine doesn't use much memory:

```
USER         PID %CPU %MEM    VSZ   RSS TTY
manfred    17596 2.8  0.4 284108 80516 ?        Sl
```

But after some hours it could happen that it really uses much memory and many cores.

```
USER         PID %CPU %MEM    VSZ   RSS TTY
manfred    17596  3.0 19.4 3424100 3173640 ?     Sl
```
Is there anything I could do to debug?


![图片](https://user-images.githubusercontent.com/28727933/71538342-50f62b00-2964-11ea-90da-af4fb90fba3f.png)

As shown in the figure above, a very simple syntax completion is implemented

Once tabNine is enabled, the above extension will not work
Hello, i am trying to present plugin internally in the company 

In our organization working 5K+ employs, and local restrictions prohibit to download any .exe files or .exe that are packed by zip.

After the first download plugins is trying to update itself by downloading tabnine.exe and fails 

Is it possible to deliver plugin updates by sending .7-zip archive instead?
I noticed in TabNine logs that it tries to read files like `.DS_Store` and any font and image files.

This doesn't make sense. Especially for `.DS_Store` (and for `Thumbs.db` if Windows still uses these)

This should be ignored by default.

I use Sublime Text 3.

Related issues:
https://github.com/zxqfl/TabNine/issues/15
https://github.com/zxqfl/TabNine/issues/38

I have OS X and am trying to use it with Python, but it says:
```
Establishing connection to TabNine Cloud...
TabNine was unable to install the python semantic completion backend.
The command that failed was: `pip install python-language-server`
For help, see tabnine.com/semantic.
Or, type TabNine::no_sem to disable semantic completion for Python.
(TabNine works well even without semantic completion.)
```

This is with VS Code. I suspect the culprit is `pyenv`, but am not sure. Anyone else come across this?
So I had left sublime open while doing other things, and when doing something else noticed that tabnine was sitting using 100% of a core continually when I hadn't been interacting with the editor at all for some hours.

Closing sublime doesn't appear to cause it to close either. It's been dangling for about 5 minutes after I closed sublime as well. 

I have deep tabnine enabled. 

I store `tabnine_config.json` in my dotfiles. The tool I use to manage my dotfiles happens to make them symlinks to a read-only file, which works fine for me in many other programs. However, TabNine silently deletes the symlink and replaces with a regular file

I would like to manage the configuration on my own (in a text editor) without TabNine deciding to change it for me. TabNine should not do anything to the config file if it is read-only. Anything that should not be modified by a human should be in a separate file and stored elsewhere (not in `XDG_CONFIG_HOME` or equivalent).
This is the email I sent to another extension development team:
"
I fount the fucking bug. (sorry for being rude, I'm angry.)TabNine extension, when enabled, automatically sets
 "auto_complete": false,
in Preferences.sublime-settings
without any notice.

It took me more than 6 hours. I thought it was because of my other poor extensions! #ThinkOutofTheBox
However I still find TabNine extremely useful.
"
Thank you for your efforts, but a simple ignorance can cause 6 hours of debugging in many devs schedule.
java.net.ConnectException: Connection timed out: connect
	at java.net.TwoStacksPlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:666)
	at sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:173)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:180)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:264)
	at sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:367)
	 
        at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:191)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1156)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1050)
	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:177)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1564)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1492)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:263)
	at TabNineFinder.download(TabNineFinder.java:60)
	at TabNineFinder.downloadTabNine(TabNineFinder.java:36)
	at TabNineFinder.getTabNinePath(TabNineFinder.java:32)
	at TabNineProcess.startTabNine(TabNineProcess.java:29)
	at TabNineProcess.<init>(TabNineProcess.java:19)
	at TabNineCompletionContributor.lambda$new$0(TabNineCompletionContributor.java:26)
	at java.lang.Thread.run(Thread.java:748)
I am using deoplete-tabnine autocompletion in vim with cloud support.
Sometimes tabnine uses almost 800% of CPU