Fixed the following typos:

- occured --> occurred

- comparsion --> comparison

- braceOccurenceCount --> braceOccurrenceCount

- occurence --> occurrence
### Describe the bug
TraceSourceLoggerProvider is for ILogger to write messages to a TraceListener object attached to a TraceSource object created internally,

The provider works well with ConsoleTraceListener, however, does nothing with TextWriterTraceListener.

Also, the same TextWriterTraceListener attached to the other TraceSource objects created in the application codes is not working either, while it is working when the listener is not associated with TraceSourceLoggerProvider.

### To Reproduce

I had created a few demo projects at https://github.com/zijianhuang/TraceSourceNetCore

And please focus on ConsoleApptraceSourceLogger.csproj.


### Expected behavior

1. TraceSourceLoggerProvider  should be working with TextWriterTraceListener .
2. TraceSourceLoggerProvider  should be working with TextWriterTraceListener shared with other TraceSource objects in the application codes.


I detected changes in the release/3.1 branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.

This PR merges commits made on release/3.1 by the following committers:

* @wtgodbe

## Instructions for merging from UI

This PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.

<img alt="merge button instructions" src="https://i.imgur.com/GepcNJV.png" width="300" />

If this repo does not allow creating merge commits from the GitHub UI, use command line instructions.

## Instructions for merging via command line

Run these commands to merge this pull request from the command line.

``` sh
git fetch
git checkout release/3.1
git pull --ff-only
git checkout master
git pull --ff-only
git merge --no-ff release/3.1

# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge
# Pushing the changes to the PR branch will re-trigger PR validation.
git push https://github.com/dotnet-maestro-bot/Common HEAD:merge/release/3.1-to-master
```

<details>
<summary>or if you are using SSH</summary>

```
git push git@github.com:dotnet-maestro-bot/Common HEAD:merge/release/3.1-to-master
```

</details>


After PR checks are complete push the branch
```
git push
```

## Instructions for resolving conflicts

:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].

[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/
[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/

## Instructions for updating this pull request

Contributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.

```
git checkout -b merge/release/3.1-to-master master
git pull https://github.com/dotnet-maestro-bot/Common merge/release/3.1-to-master
(make changes)
git commit -m "Updated PR with my changes"
git push https://github.com/dotnet-maestro-bot/Common HEAD:merge/release/3.1-to-master
```

<details>
    <summary>or if you are using SSH</summary>

```
git checkout -b merge/release/3.1-to-master master
git pull git@github.com:dotnet-maestro-bot/Common merge/release/3.1-to-master
(make changes)
git commit -m "Updated PR with my changes"
git push git@github.com:dotnet-maestro-bot/Common HEAD:merge/release/3.1-to-master
```

</details>

Contact .NET Core Engineering if you have questions or issues.
Also, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.

### Describe the bug
The user secrets for a worker service are not accessible inside docker container.

### To Reproduce
Steps to reproduce the behavior:
1. Create a new .NET Core 3.0/3.1 WorkerService project using Visual Studio. (Or just clone [this](https://github.com/pratiksanglikar/WorkerService3) repo and jump to step 5)
2. Right click on the project, click "Add Docker Support" select "Linux".
3. Edit the project file and add -
        a. Package reference to `Microsoft.Extensions.Configuration.UserSecrets` as following `<PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" Version="3.1.1" /> `
Because of this issue [#2743](https://github.com/dotnet/extensions/issues/2743)
        b. A volume mapping of the user secrets directory inside the container by adding following line to the property group - 
`<DockerfileRunArguments>-v "$(AppData)/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro"</DockerfileRunArguments>`
4. Modify the file `Worker.cs` to access the user secrets - 
```
 public class Worker : BackgroundService
    {
        private readonly ILogger<Worker> _logger;
        private readonly IConfiguration configuration;

        public Worker(ILogger<Worker> logger, IConfiguration configuration)
        {
            _logger = logger;
            this.configuration = configuration;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                _logger.LogInformation("The secret - {}", this.configuration["secretKey"]);
                await Task.Delay(1000, stoppingToken);
            }
        }
    }
```
5. On powershell or command prompt, navigate to the project directory and add user secrets using the command -
`dotnet user-secrets set "secretKey" "secretValue"`

6. hit F5 with the Docker debug profile and monitor the output window. Notice that the value of the user secret is null.

**Note:** You can open the Containers window in the VS to check the file contents of the container. 
If you check the path - `/root/.microsoft/usersecrets` you will notice the user-secrets directory with `secrets.json` inside it.

### Expected behavior
The output should print the value of the user-secret.

### Screenshots
![Filesystem and output of the program](https://user-images.githubusercontent.com/1625492/72640926-c0d15300-391d-11ea-842e-085c9095a162.jpg)

![UserSecretIDAttribute in the assembly](https://user-images.githubusercontent.com/1625492/72640973-de062180-391d-11ea-8de9-a4f5a9000ee8.jpg)


### Additional context
Same program with WorkerService debug profile works well.

### Describe the bug
Hi,
I'm using .Net Core app 2.2 with explicit reference to Netstandard 2.0.3 library.

For some reason there is no IOCP and WORKER stats in log when timeout occur. 
From documentation the log part should be present 
> IOCP and WORKER threads will not be shown on .NET Core if using netstandard < 2.0

I'm using Netstandard 2.0.3 which is latest available. Microsoft.Extensions.Caching.Redis SDK version in use is 2.2.0 
And here is log that i get

ExceptionStackExchange.Redis.RedisTimeoutException: Timeout performing EVAL, inst: 14, queue: 42, qu: 0, qs: 42, qc: 0, wr: 0, wq: 0, in: 11373, ar: 0, clientName: ActivityService, serverEndpoint: Unspecified/cache.amazonaws.com:6379, keyHashSlot: 15753 (Please take a look at this article for some common client-side issues that can cause timeouts: http://stackexchange.github.io/StackExchange.Redis/Timeouts)

### Expected behavior
IOCP and WORKER threads should be in log

Can you advise me or point me in right direction

### Describe the bug
Having the following `StringValues` value:
```c#
var a = new StringValues("", "");
var b = new StringValues(" ", " ");
var c = new StringValues("", " ");
```
When calling `string.IsNullOrWhitespace(x)` or `StringValues.IsNullOrEmpty(x)` or `string.IsNullOrEmpty(x)` I'm seeing inconsistent (unexpected) results.


### To Reproduce
Steps to reproduce the behavior:
```c#
var a = new StringValues(new string[] { "", "" });
var b = new StringValues(new string[] { " ", " " });
var c = new StringValues(new string[] { "", " " });

Console.WriteLine("--------------------------------------------------");
Console.WriteLine($"A {{\"\", \"\"}} Expected True: {StringValues.IsNullOrEmpty(a)}");
Console.WriteLine($"A {{\"\", \"\"}} Expected True: {string.IsNullOrEmpty(a)}");
Console.WriteLine($"A {{\"\", \"\"}} Expected True: {string.IsNullOrWhiteSpace(a)}");
Console.WriteLine("--------------------------------------------------");
Console.WriteLine($"B {{\" \", \" \"}} Expected False: {StringValues.IsNullOrEmpty(b)}");
Console.WriteLine($"B {{\" \", \" \"}} Expected False: {string.IsNullOrEmpty(b)}");
Console.WriteLine($"B {{\" \", \" \"}} Expected True: {string.IsNullOrWhiteSpace(b)}");
Console.WriteLine("--------------------------------------------------");
Console.WriteLine($"C {{\"\", \" \"}} Expected False: {StringValues.IsNullOrEmpty(c)}");
Console.WriteLine($"C {{\"\", \" \"}} Expected False: {string.IsNullOrEmpty(c)}");
Console.WriteLine($"C {{\"\", \" \"}} Expected True: {string.IsNullOrWhiteSpace(c)}");
```
### Expected behavior
```c#
--------------------------------------------------
StringValues.IsNullOrEmpty A {"", ""}     Expected True:  False
string.IsNullOrEmpty       A {"", ""}     Expected True:  True
string.IsNullOrWhiteSpace  A {"", ""}     Expected True:  True
--------------------------------------------------
StringValues.IsNullOrEmpty B {" ", " "}   Expected False: False
string.IsNullOrEmpty       B {" ", " "}   Expected False: False
string.IsNullOrWhiteSpace  B {" ", " "}   Expected True:  False
--------------------------------------------------
StringValues.IsNullOrEmpty C {"", " "}    Expected False: False
string.IsNullOrEmpty       C {"", " "}    Expected False: False
string.IsNullOrWhiteSpace  C {"", " "}    Expected True:  True
```

### Additional context
One of the offending lines that makes the `StringValues` inconsistency:
https://github.com/dotnet/extensions/blob/master/src/Primitives/src/StringValues.cs#L436

I have the following simple background service
```
public class Worker : BackgroundService
{
    private readonly ILogger<Worker> _logger;

    public Worker(ILogger<Worker> logger)
    {
        _logger = logger;
    }

    public override async Task StopAsync(CancellationToken cancellationToken)
    {
        await Task.Delay(TimeSpan.FromSeconds(30));
        await base.StopAsync(cancellationToken);
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        while (!stoppingToken.IsCancellationRequested)
        {				
            _logger.LogInformation("Worker running at: {time}", DateTimeOffset.Now);
            await Task.Delay(10000, stoppingToken);
        }
    }
}
```

My use case is that I want to carry out cleanup work in the `StopAsync` method, and the cleanup may take some time to finish (e.g. more than 30 seconds, etc).

I am trying to simulate that using the `Task.Delay` function.

What I noticed is if I run the app and click `Ctrl+C`, the app stays in `StopAsync` for 30 seconds and closes after. However, if I close the whole CMD window (i.e. click the X button on the command line), the app closes completely after around few seconds, rather than the 30 seconds specified. In both instances the `StopAsync` method is called.

Is there a reason for the difference in behaviour, or a way to make sure the app only closes after `StopAsync` completes, regardless of how it is closed?
### Is your feature request related to a problem? Please describe.
One consistent problem my team and I keep running into is with dependency injection. More specifically: forgetting to register a service---or more recently: injecting a class that has more rigid constraints than the interface (through open generics)---causing runtime exceptions.

### Describe the solution you'd like
If there already is a solution for this, please feel free to point me to it. I have tried searching around, but haven't found any solutions to this. However, I am quite open to the idea that I may just not have looked closely enough.

The ideal solution to this would be compile-time checks to avoid the runtime exceptions, but this seems unlikely. Another way would be to have some standardized tests that run across all classes and check that they can resolve all the dependencies and that the public API works as expected. 

Thanks!

### Describe the bug
The current Version 3.1.0 of multiple packages (Microsoft.Extensions.FileSystemGlobbing, .ObjectPool we've found by now) have the packageIcon.png included twice, which results in a failure when extracting the zip file.  
Perhaps this doesn't error in VS because the important files like dlls have already extracted at that point?

### To Reproduce
Steps to reproduce the behavior:
1. Download the package file for version 3.1.0 of Microsoft.Extensions.FileSystemGlobbing
2. Extract the zip file
4. See error

### Expected behavior
All files extracted without error

### Screenshots
On cli:
![image](https://user-images.githubusercontent.com/684180/72245711-71bfb100-35f1-11ea-8c00-2e2ab6439d69.png)
![image](https://user-images.githubusercontent.com/684180/72245891-d549de80-35f1-11ea-8818-b53cbf9ab68f.png)

Using Paket:
![image](https://user-images.githubusercontent.com/684180/72245774-9582f700-35f1-11ea-9a23-4adc020926ee.png)
(Bottom error in German, says: The file "...packageIcon.png" already exists)

 ``` 
    /// <summary>
    /// Summary description for IServiceCallSite
    /// </summary>
    internal abstract class ServiceCallSite
```
to 
```
    /// <summary>
    /// Summary description for ServiceCallSite
    /// </summary>
    internal abstract class ServiceCallSite
```