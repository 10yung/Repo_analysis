(updated)

- add this debug target to `Makefile`
- quick documentation in `README.md`
- _add sql-asm-memory-growth-debug to npm test_

This PR is assuming that we do want to continue actively supporting the asm.js build targets and do not want to enable the memory growth in the existing `dist/sql-asm-debug.js` build target.

originally proposed as part of PR #319
Running the following statement,
```sql
SELECT 1.7976931348623157e+308
```

On this,
http://kripken.github.io/sql.js/examples/GUI/

Gives me this result set,

|1.7976931348623157e+308|
|--|
Infinity

-----

I know it's not supposed to be `Infinity` because of this DB Fiddle,

**Schema (SQLite v3.30)**

    

---

**Query 1**

    SELECT 1.7976931348623157e+308;

| 1.7976931348623157e+308 |
| ----------------------- |
| 1.7976931348623157e+308 |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/smqdPpiHHGs2oUyJhGeWky/0)

-----

This isn't the only example of doubles being lossy for some reason unknown to me.
I've seen cases where I had decimal places being cut off, numbers being rounded up and down, etc.
Is there a workaround for this?
This is just an idea of how it may be possible to support developers who need to build with non-standard functions. Here is an example where I support UPPER and LOWER functions that can handle many EU characters properly: https://github.com/brodybits/sql.js/tree/custom-eu-string-functions

This idea includes some comments that I think should be considered in `src/api.coffee` that can help make it easier for people like myself to add custom functions in the future.

I suspect there should be a much smarter way to do this, by using an array of FuncDef structures like they do in `extension-functions.c` for example.

I will very likely continue with the kind of solution proposed here to support the needs of my customer, with hope for a more standardized solution (someday).
Hi, great project!

Is there a way to configure `initSqlJs` to look for an embedded arraybuffer of the wasm file, and thus avoid the extra fetch?

I know this may sound strange, but I have a use case where I'm embedding a full app in a single html file, and that's obviously how it's run as well, but simply loading the html file in a browser. Thus, an extra fetch isn't really possible for several reasons, but I can't seem to figure out if there's a supported way to do this. I worked around it by doing something like this:

```javascript
// sql.js embedded in another script element
// sqlWASM is loaded as a buffer, converted to a simple array of numbers, and then a Uin8array is built from this array, and used as the return from our `fetch` override below

const sqlWASM = Uint8Array.from([${sqlWASM}])

config = {
  locateFile: filename => 'embedded'
}

const actualFetch = window.fetch
window.fetch = (url, ...rest) => {
  if (url === 'embedded') {
    return Promise.resolve({
      ok: true,
      arrayBuffer: () => sqlWASM.buffer
    })
  } else {
    actualFetch(url, ...rest)
  }
}
```

This works, really well actually. I can now load a single html file that has sql.js fully embedded, with no additional dependencies. Load time is pretty good too, about half a second on average â€“ worst timing I've seen was around 750ms. Since bandwidth isn't an issue, it comes down to initialization time. Anything sub-second is magical, anything <5 seconds is fully acceptable, and only at 5+ seconds do we consider there being an issue with load time.

Anyway, it's obviously a bit of an edge case, but if there's some kind of supported way of doing this I'd probably rather do that. Penny for your thoughts!
I'm working on combining between sql.js, IndexedDB, and Angular 8 here. everything was so normal until I found this under my desk.
```
core.js:4799 ERROR Error: Uncaught (in promise): TypeError: Cannot set property 'SQL' of undefined
TypeError: Cannot set property 'SQL' of undefined
    at sql-wasm-debug.js:913
    at doRun (sql-wasm-debug.js:7612)
    at run (sql-wasm-debug.js:7629)
    at runCaller (sql-wasm-debug.js:7578)
    at removeRunDependency (sql-wasm-debug.js:2507)
    at receiveInstance (sql-wasm-debug.js:2607)
    at receiveInstantiatedSource (sql-wasm-debug.js:2624)
    at ZoneDelegate.invoke (zone-evergreen.js:359)
    at Object.onInvoke (core.js:32838)
    at ZoneDelegate.invoke (zone-evergreen.js:358)
    at resolvePromise (zone-evergreen.js:797)
    at zone-evergreen.js:707
    at zone-evergreen.js:723
    at ZoneDelegate.invoke (zone-evergreen.js:359)
    at Object.onInvoke (core.js:32838)
    at ZoneDelegate.invoke (zone-evergreen.js:358)
    at Zone.run (zone-evergreen.js:124)
    at zone-evergreen.js:855
    at ZoneDelegate.invokeTask (zone-evergreen.js:391)
    at Object.onInvokeTask (core.js:32819)
```

After some frustrating night, I managed to dig deep to the source (thanks for providing the `sql-wasm-debug.js`, btw) and found this on [line 913](https://github.com/kripken/sql.js/blob/dda3553f9b71fd91fe45dd5488a081c5e24e8e65/dist/sql-wasm-debug.js#L913).

```javascript
this['SQL'] = {
  'Database': Database
};
```

As far as I know about ['this' keyword](https://vojtechruzicka.com/javascript-this-keyword/), the keyword was very trivial.
> Alright, so far so good. This in functions calls points to the global object. It is not so simple though. This behavior only applies when not in strict mode. When in strict mode, this in functions is undefined.

Curiously, I've made some speculation that `this` in [line 913](https://github.com/kripken/sql.js/blob/dda3553f9b71fd91fe45dd5488a081c5e24e8e65/dist/sql-wasm-debug.js#L913) was referring to `window` global object (which I found the `SQL` sub-object under `window` object in your [native html template](https://github.com/kripken/sql.js/blob/dda3553f9b71fd91fe45dd5488a081c5e24e8e65/examples/simple.html)).

I made a 'dirty' workaround here, and found my code was running successfully (finally!). Here's the workaround in [line 913 to Line 919](https://github.com/kripken/sql.js/blob/dda3553f9b71fd91fe45dd5488a081c5e24e8e65/dist/sql-wasm-debug.js#L913-L919).

```javascript
window['SQL'] = {
  'Database': Database
};

for (i in window['SQL']) {
  Module[i] = window['SQL'][i];
}
```

As for conclusion, would you mind to manage this module on "strict" mode?
Thank you so much for this great library!
I wrote a c function and compiled using the command 

`emcc lib/alternate_case.c -s WASM=1 -s EXPORTED_FUNCTIONS="['_alternatecase']" -s EXTRA_EXPORTED_RUNTIME_METHODS='["ccall", "cwrap"]' -s ASSERTIONS=1 -o public/alternate_case.js`

Here is my C function

```
#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<emscripten.h>

int main() {
  return 1;
}

char * alternatecase(char *str) {
    char *initial_ptr;
    initial_ptr = str;
    for (int i=0; i < *str!='\0' ; i++){
        if( (i % 2) == 0)
            *str = tolower(*str);
        else
            *str = toupper(*str);
        str++;
    }
    return initial_ptr;
}
```

Index.html

```
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>My first Web Assembly Demo</title>
  </head>
  <body>
    <h1> MY first web assembly demo</h1>
    Output is in Javascript console
    <main>
      <button id="execute" class="button">Execute</button>
      <pre id="output"> Results will be displayed here </pre>
    </main>
  </body>
  <script src='/dist/sql-wasm.js'></script>
  <script src='alternate_case.js'></script>
  <script type="text/javascript" src="exporting-c-function.js"></script>
</html>

```

I took the sql-wasm.js from this repository. alternate_case.js is the compiled file from emcc.
This is the exporting-c-function.js

```
config = {
      locateFile: filename => `dist/sql-wasm.wasm`
    }

    initSqlJs(config).then(function(SQL){
      //Create the database
      var db = new SQL.Database();
      // Run a query without reading the results

      const func = cwrap('alternatecase','string', ['string']);
      db.create_function("altcase" , func)

      sqlstr = "CREATE TABLE hello (a int, b char);";
      sqlstr += "INSERT INTO hello VALUES (0, 'hello');"
      sqlstr += "INSERT INTO hello VALUES (1, 'world');"
      db.run(sqlstr); // Run the query without returning anything

      //db.run("INSERT INTO hello VALUES (alternatecase('awdqwdq'));"); // Inserts 10 and 'Hello world'
       db.run('SELECT altcase(b) from hello;');
});
```

It is throwing this error in the console 
**Error: wrong number of arguments to function altcase()**

And it accepts only 0 arguments.
Note: if I try from browser console , I am able to use the function and get the output.
How to use this as custom function? 
Also how to create custom function in web workers and use it ?



# Bug report

## Describe the bug

Trying to use `sql.js` in a nextjs project throws an error, while trying to initialize the module.

## To Reproduce

Steps to reproduce the behavior, please provide code snippets or a repository:

1. `npx create-next-app next-sql.js`
2. `cd next-sql.js/`
3. `npm i sql.js`
4. Inside `pages/index.js`:
```js
import initSQL from "sql.js";

const Page = () => {
  console.log(initSQL);
  console.log(initSQL());
  initSQL().then(SQL => {
    console.log(SQL);
    const db = new SQL.Database();
    console.log(db);
  });

  return null;
};

export default Page;
```
5. `npm run dev`
6. See Error in Console

## Expected behavior

Ability to import and use sql.js like in the [example provided here.](https://github.com/kripken/sql.js#examples)

## Screenshots

![Mozilla-Console](https://i.imgur.com/c2tjsrC.png)
![Chrome-Console](https://i.imgur.com/Cle3wbm.png)

## Additional context

Also, without defining `fs` in `next.config.js`, `sql-wasm.js` throws a module not found error about the `fs` module.
My guess is that I should change my config settings to support `wasm`, but I'm not really familiar with that.

Issue in [next.js repo](https://github.com/zeit/next.js/issues/9454).
I get an error with `sql-wasm.js` while `sql-asm.js` works fine.
```
both async and sync fetching of the wasm failed
failed to asynchronously prepare wasm: abort(both async and sync fetching of the wasm failed) at Error
    at jsStackTrace (/node_modules/sql.js/dist/sql-wasm-debug.js:2762:17)
    at jsStackTrace (/node_modules/sql.js/dist/sql-wasm-debug.js:2762:17)
```

My environment:
* sql.js: `v1.0.1`
* Node.js: `v8.16.0`
* MacOS: `v10.14.6`

My code:
```javascript
require('sql.js'); // fails
require('../node_modules/sql.js/dist/sql-wasm.js'); // fails
require('../node_modules/sql.js/dist/sql-asm.js');  // works
```
I am currently having to call export every time I need to save to indexedDB for persistence. The problem is export greatly increases the save time taken and I cannot save just the SQLJS object due to the new SQL.database constructor not being able to handle that? Is there any way around this or could this be a possible enhancement.
Hi there . I am pretty new to SQL . 
Can anyone help me with my question ?

Is it possible to use this library in android with html and javascript (in web-view ) and my db as Sqllite ( default android Db)
If not is there any other way 

Thanks in advance:relaxed:
