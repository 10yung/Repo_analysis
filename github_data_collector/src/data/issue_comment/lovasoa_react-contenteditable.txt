I tried the library using this codesandbox: https://codesandbox.io/s/l91xvkox9l

If I use `Shift + Enter` to add a new line it works.
If I use `Enter` to add a new line, then click away to on blur it, it removes lines that were created.
Basically: 
"AAAAA
aa
AA"
becomes "AAAAAaaAA"

browser: `Chrome - version 78.0.3904.97`
Alternative implementation to: https://github.com/lovasoa/react-contenteditable/pull/85

Please let me know if I can do anything more to get this feature added
I've created a new version that works with legacy react. It can be maintained in a different branch. Check out `react-legacy` branch. The trickiest part would be versioning :). I'd like to see how you'd handle that.
# Overview
When a function is passed as innerRef, typing Japanese text (and probably other texts that require text conversion) does not work properly.

# Detail
The animation below is the expected behavior. Japanese uses several kinds of characters (hiragana, katakana, and kanji; kanji is basically Chinese character). When we want to type Kanji we first type hiragana and then convert it to kanji from the list of possible candidates. 
The animation below is working example. As I type hiragana I see a box appears which shows the list of candidate conversions to kanji.
![japanes_input_working](https://user-images.githubusercontent.com/6002787/64353384-a4044500-d038-11e9-9804-76197de8a404.gif)

But when a function is passed as innerRef, the conversion box does not appear and the characters are automatically converted to the sequence of alphabets and hiragana, as you can see in the animation below.
![japanese_input_strange](https://user-images.githubusercontent.com/6002787/64353390-a6669f00-d038-11e9-9d04-94399ce69a8b.gif)

# Reproducing the problem
Reproducing code is available from [here](https://codesandbox.io/embed/white-glitter-l8pr4).

# Possible solution
I found that removing [`props.innerRef !== nextProps.innerRef`](https://github.com/lovasoa/react-contenteditable/blob/master/src/react-contenteditable.tsx#L88) part in `componentShouldUpdate` solves this problem.
But I am pretty sure this line is there because it is needed, so I doubt removing this line is the correct measure.
onChange() is not triggered when initial html prop has the same value with the first edited text of the editable component.

Use case:
1. component is initialised with `html` prop equal to ''
2. in constructor, this.lastHtml = '';
3. component's prop `html` is changed to 'a';
4. render function is called, a new editable div is created with innerHTML = 'a'
5. componentDidUpdate() is called, but `this.props.html === el.innerHTML`, thus `this.lastHtml` is will go out of sync.
6. hit backspace -> innnerHTML becomes '' -> `emitChange()` is called, but props.onChange is not called because `el.innerHtml === _this.lastHtml`.
interface React.SyntheticEvent<T = Element>
Generic type 'SyntheticEvent<T>' requires between 0 and 1 type arguments.ts.
The cause of this bug is related to #161. In the following minimal example,

```jsx
import React, { Component, ChangeEvent, KeyboardEvent } from 'react';
import ContentEditable from 'react-contenteditable';

class TestContentEditable extends Component {
  public readonly state = {
    html: 'text',
  };

  public readonly render = () => {
    const { html } = this.state;
    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
      console.log(html);
      console.log(this.state.html);
      this.setState({ html: e.target.value });
    }
    const handleKeyPress = (e: KeyboardEvent<HTMLDivElement>) => {
      const { key } = e;
      if (key === 'Enter') {
        e.preventDefault();
        console.log(html);
        console.log(this.state.html);
      }
    };
    return (
      <ContentEditable
        html={html}
        onChange={handleChange}
        onKeyDown={handleKeyPress}
      />
    );
  }
}
export default TestContentEditable;
```

we should expect the output of `console.log(html);` in `handleKeyPress` to be equal to `console.log(this.state.html);`. However, it is not, and the old `handleKeyPress` handler is used that sees the initial `html` value in its context. On the other hand, `onChange` is correctly updated.
Hey, very useful component, thanks!

I ran into an issue when trying to use this component in a functional component combined with useState. The issue is that not all prop changes lead to an update of the component, therefore an onBlur like in my example would return the old initial `content` value.

The issue resides in the current implementation of `shouldComponentUpdate`.

Please look at this [example Codesandbox](https://codesandbox.io/s/k6nrk57no). I copied this component's current source code over there and just return true in the `shouldComponentUpdate` and everything works fine. To see the issue, comment the return true and uncomment the original code. If you type something and look in the console, you'll see the following logs:

```
render log: 
render log: a
render log: as
render log: asd
onBlur log: 
```

To fix this, I'd suggest going with a return true or make it a PureComponent to make updates based on prop changes.
I've ran into an issue where I had validations like allowing only n characters in the `ContentEditable`, so I had a code like:

```
onTextChange({ target }) {
  if (target.value.length > 300) return;
  this.setState({ editableText: target.value })
}
```
and `render` method:

```
<ContentEditable
   innerRef={ this.contentEditableRef }
   html={ this.state.editableText }
   onChange={ this.onTextChange }
/>
```

Now I expected that `ContentEditable` is depending on `editableText`, so if I don't change the state, it won't reflect. But it did not work, `ContentEditable` was rendering content event if `editableText` was not changed.

Same thing happened with Pasting large content.
Is it possible to disable mulitline Input?
Meaning, no breaks. And when the user presses `return` while typing, nothing happens.