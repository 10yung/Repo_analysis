Hi all,

Is there a way to encrypt the configuration for the tenants?

Regards,

Use Case:

Tenant 1 has ValuesController and UsersController registered in its own container.
Tenant 2 only has UsersController in its own container.

If I access the ValuesController (ex. via /api/values route), how dow I handle the DI exception so that I can return a 404 response?
Hi all.
I have this tenant which is allowed to CRUD other tenants. Currently tenants's data can be persisted in a separate database.
When a new tenant is created, the application should create and populate a new database.
I'd like that behaviour to be transparent to all my per-tenant entities that are created using Manager-like classes which inject the tenant using DI.

Id like to have a way of creating a new IServiceScope and override the tenant for that scope only.
To achieve it, I have overriden the provider for `TenantContext` to return a "forced" tenant instead of the one in the `HttpContext`.

```
public class CurrentTenantForcer
{
    public Tenant ForceTenant { get; private set; }

    public void ForceTenantForCurrentScope(Tenant newTenant)
    {
        ForceTenant = newTenant;
    }
}
```

```
services.AddScoped<CurrentTenantForcer>();

// Override the provider for TenantContexts in order to be able
// to override the current tenant being provided
services.AddScoped(serviceProvider =>
{
    var resolver = serviceProvider.GetRequiredService<CurrentTenantForcer>();
    if (resolver.ForceTenant != null)
    {
        return new TenantContext<CurrentTenantInfo>(resolver.ForceTenant);
    }
    else
    {
        return serviceProvider.GetService<IHttpContextAccessor>()?.HttpContext?.GetTenantContext<CurrentTenantInfo>();
    }
});

```

Which allows me to do:

```
using (var scope = serviceProvider.CreateScope())
{
    var serviceProvider = scope.ServiceProvider;

    // Set the tenant before configuration
    var tenantForcer = serviceProvider.GetRequiredService<CurrentTenantForcer>();

    // the resolver is scoped so we are modifying a scoped instance
    tenantForcer.ForceTenantForCurrentScope(creationInfo.Tenant);

    var tenantDbContext = serviceProvider.GetRequiredService<TenantDbContext>();
    await tenantDbContext.Database.MigrateAsync();
    await SeedTenantData(serviceProvider, creationInfo);
}
```
I'm also using that method to seed initial databases before calling `IWebHost.Run()` for development.

Is there a better way of doing this? If not, are there any issues with the provided approach?

Thank you very much,
Leo.
Upgraded SaasKit to netcoreapp2.0
I am trying to specify different social accounts per tenant 
in  .net core 2.0 UsePerTenant not working anymore becouse UseGoogleAuthentication obselete..


       app.UsePerTenant<AppTenant>((ctx, builder) =>             
       {			 
          builder.UseGoogleAuthentication(options =>
          {
             options.AuthenticationScheme = "Google";
             options.SignInScheme = "Cookies";               
             options.ClientId = Configuration[$"{ctx.Tenant.Id}:GoogleClientId"];
             options.ClientSecret = Configuration[$"{ctx.Tenant.Id}:GoogleClientSecret"];
          });
		});
As of `Microsoft.AspNetCore.Authentication.Cookies v.2` the method `builder.UseCookieAuthentication(new CookieAuthenticationOptions()` from `app.UsePerTenant<AppTenant>((ctx, builder) => ...` is obsolete.

https://github.com/aspnet/Security/issues/1310

Any chance cookie name can be moved into `ConfigureServices` and keep the same pattern per tenant?
ITenantResolver.ResolveAsync is missing support for CancellationTokens:

`Task<TenantContext<TTenant>> ResolveAsync( HttpContext context );`

Has anyone implemented multitenancy with a console application?  Nothing specific, just a proof of concept.
can I use it for .net core 2?
