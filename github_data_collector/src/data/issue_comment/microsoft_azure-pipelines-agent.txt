
Fixes #2421 

Send back whether the agent is going to be shutting down as soon as we report work is finished.

This way the server will know not to send new work to the agent in the time between the JobCompletedEvent and process shutdown.
This PR has two goals:

1. Make IExecutionContext and AgentTaskPluginExecutionContext share a common interface
2. Update GitCliManager and GitCommandManger to use this common interface


Minor fix of a string for ID CreateUserWithSameUIDInsideContainer.

In a few cases users have had issues putting tar onto their path.  This would let them specify the location of a tar executable directly via an environment variable.
Unable to access build variables with more than one "."

i have a build pipeline and am unable to access vars that have more than one period. in the example below I can see the vars
- SourceBranch
- DefinitionName

but RepositoryName is null

```
variables:
  SourceBranch: $[variables['Build.SourceBranch']]
  DefinitionName: $[variables['Build.DefinitionName']]
  repo:  $[variables['Build.Repository.Name']]
```


I know the value is not null because if i print out the vars using I can see it there
```
Get-ChildItem Env:
```

 ## Pdbstr creates corrupt pdbs for mixed mode assemblies
There is a known issue at MS which causes e.g. WPA to crash at
```
04 000000db`1d0ff1d8 00007fff`6dc44051 msdia140!GSI1::fixHashIn+0x70 [f:\dd\vctools\pdb\dbi\gsi.cpp @ 570] 
05 000000db`1d0ff1e0 00007fff`6dc4421b msdia140!GSI1::readHash+0x261 [f:\dd\vctools\pdb\dbi\gsi.cpp @ 180] 
06 000000db`1d0ff280 00007fff`6dc41cf2 msdia140!PSGSI1::readStream+0xeb [f:\dd\vctools\pdb\dbi\gsi.cpp @ 1647] 
07 000000db`1d0ff2c0 00007fff`6dc26230 msdia140!PSGSI1::fInit+0x72 [f:\dd\vctools\pdb\dbi\gsi.cpp @ 1612] 
08 000000db`1d0ff2f0 00007fff`6dbb7094 msdia140!DBI1::OpenPublics+0x70 [f:\dd\vctools\pdb\dbi\dbi.cpp @ 1447] 

```

for managed C++ targets. The solution is to use a recent pdbstr version and not that ancient one which breaks pdbs and causes issues when someone actually tries to debug source server indexed binaries. 


## Agent Version and Platform
Version of your agent? 2.0.16
OS of the machine running the agent? Windows

## Azure DevOps Type and Version
TFS

## What's not working?
Source indexing creates corrupt pdbs

## Agent and Worker's Diagnostic Logs
2020-01-08T10:33:45.3026321Z Unable to index one or more source files for symbols file 'D:\B\a1\1725\s\bin\x64\Debug\IvtGPUResourceServer.pdb'.


## Agent Version and Platform
Agent version: '2.164.1' on macOS and Windows.

## Azure DevOps Type and Version
https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3368518

## What's not working?
​I'm using the ​Multi repo checkout feature in a YAML pipeline with the following syntax:

```yaml
- checkout: foo
  clean: true  
  submodules: recursive  
  path: s/bar/external/foo
  persistCredentials: true
```

The post-job step which cleans up credentials in this repo is failing on both macOS and Windows. With diagnostic output enabled, you can see that the `targetPath` is incorrect. The clean up attempt tries to execute a git command in the default checkout location `s/foo` rather than the custom path I have specified `s/bar/external/foo`.

```
##[command]git config --unset-all http.https://github.com/org/foo.extraheader
##[debug]Starting process:
##[debug]  File name: '/usr/bin/git'
##[debug]  Arguments: 'config --unset-all http.https://github.com/org/foo.extraheader'
##[debug]  Working directory: '/Users/azdo/_work/5/s/foo'
...
##[debug]Exited process 26852 with exit code 2
##[debug]Finished process 26852 with exit code 2, and elapsed time 00:00:00.0027457.
```

This produces an error on Windows that causes the entire job to fail. On macOS this is only treated as a warning.

#### macOS:
```
##[warning]An unsuccessful attempt was made using git command line to remove "http.extraheader" from the git config. Attempting to modify the git config file directly to remove the credential.
```

#### Windows:
```
##[error]The directory name is invalid
##[debug]Processed: ##vso[task.logissue type=error;]The directory name is invalid
##[debug]Processed: ##vso[task.complete result=Failed;]
##[debug]   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)
   at System.Diagnostics.Process.Start()
   at Microsoft.VisualStudio.Services.Agent.Util.ProcessInvoker.ExecuteAsync(String workingDirectory, String fileName, String arguments, IDictionary`2 environment, Boolean requireExitCodeZero, Encoding outputEncoding, Boolean killProcessOnCancel, InputQueue`1 redirectStandardIn, Boolean inheritConsoleHandler, Boolean keepStandardInOpen, Boolean highPriorityProcess, CancellationToken cancellationToken)
   at Agent.Plugins.Repository.GitCliManager.ExecuteGitCommandAsync(AgentTaskPluginExecutionContext context, String repoRoot, String command, String options, CancellationToken cancellationToken)
   at Agent.Plugins.Repository.GitCliManager.GitConfigUnset(AgentTaskPluginExecutionContext context, String repositoryPath, String configKey)
   at Agent.Plugins.Repository.GitSourceProvider.RemoveGitConfig(AgentTaskPluginExecutionContext executionContext, GitCliManager gitCommandManager, String targetPath, String configKey, String configValue)
   at Agent.Plugins.Repository.GitSourceProvider.PostJobCleanupAsync(AgentTaskPluginExecutionContext executionContext, RepositoryResource repository)
   at Agent.Plugins.Repository.CleanupTask.RunAsync(AgentTaskPluginExecutionContext executionContext, CancellationToken token)
   at Agent.PluginHost.Program.Main(String[] args)
```


