The work I am doing for my project deals with decompressing a file (like 10MB to a 40MB stream) and then running those streams through some patch program which in turn may output a 40MB stream that is then fed once again into a patch program many times. In this instance it means I am using like 5 or 6 40MB streams with a few seconds.

I've found this library significantly reduces memory usage but I can't really figure out what the options do. the only documentation specified is a blog post but it doesn't really explain what any of the options actually do (I don't deal with a lot of memory-related things). I have also found that the memory allocated for the pools doesn't seem to be returned, or returnable, unless I'm missing something. E.g. the app seems to allocate about 600MB of data (on top of 200 idle) but after it ends the app still sits at 800MB used. I understand you want to keep these pools around and allocated but is there a way to get rid of them? I only use them for a certain task, so once that task has finished, keeping it around is not beneficial. But the documentation has nothing that even looks at this kind of scenario.

The lack of intellisense makes using this library extremely difficult as I have almost no idea what some of the options do.
After spending some time reading the code, it appears default behavior is to pool everything with no upper limit.  I wasn't able to find that information in the documentation.

Can you check my understanding?

`MaximumFreeLargePoolBytes` is never set, so the buffer gets added to the pool on dispose [here](https://github.com/microsoft/Microsoft.IO.RecyclableMemoryStream/blob/master/src/RecyclableMemoryStreamManager.cs#L441).

The max potential memory usage of the large pool is

> (maximumBufferSize/largeBufferMultiple) * MaximumFreeLargePoolBytes

or, stated another way:

> the number of pools * MaximumFreeLargePoolBytes

If I don't call GetBuffer() and I don't call GetStream(asContiguousBuffer=true), I will only ever use small blocks.

So, if you rarely call GetBuffer(), a valid sizing strategy would be to create medium-sized small blocks (say 1/4 of the size of your expected common stream size), a large `MaximumFreeSmallPoolBytes`, and a `MaximumFreeLargePoolBytes `size of 1 byte to force unpooled large buffer allocation in the rare case you need it (if it was set to 0 large buffers would be pooled and retained indefinitely).
This replaces the implementation of the WriteByte method with a manual implementation, that doesn't forward calls to Write(byte[]) via a byte[1] field.

Optimization was identified in issue #48 

Benchmark: Writing 1MB using WriteByte (via Benchmark.NET, using x64 only)


|       Method |        Job | Runtime |     Toolchain |     Mean |     Error |    StdDev |
|------------- |----------- |-------- |-------------- |---------:|----------:|----------:|
| WriteByteNew |      Net47 |     Clr |   CsProjnet47 | 24.89 ms | 0.0104 ms | 0.0097 ms |
| WriteByteOld |      Net47 |     Clr |   CsProjnet47 | 56.09 ms | 0.0703 ms | 0.0623 ms |
| WriteByteNew | NetCore1.1 |    Core | .NET Core 1.1 | 31.25 ms | 0.0448 ms | 0.0419 ms |
| WriteByteOld | NetCore1.1 |    Core | .NET Core 1.1 | 61.21 ms | 0.0311 ms | 0.0276 ms |
| WriteByteNew | NetCore2.0 |    Core | .NET Core 2.0 | 21.31 ms | 0.0039 ms | 0.0037 ms |
| WriteByteOld | NetCore2.0 |    Core | .NET Core 2.0 | 50.01 ms | 0.0243 ms | 0.0215 ms |


```
BenchmarkDotNet=v0.10.12, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.214)
Intel Core i7-6800K CPU 3.40GHz (Skylake), 1 CPU, 12 logical cores and 6 physical cores
Frequency=3326080 Hz, Resolution=300.6542 ns, Timer=TSC
.NET Core SDK=2.1.300-preview2-008065
  [Host]     : .NET Core 2.0.5 (Framework 4.6.26020.03), 64bit RyuJIT
  Net47      : .NET Framework 4.7 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2633.0
  NetCore1.1 : .NET Core 1.1.5 (Framework 4.6.25815.04), 64bit RyuJIT
  NetCore2.0 : .NET Core 2.0.5 (Framework 4.6.26020.03), 64bit RyuJIT

Jit=RyuJit  Platform=X64
```

Issue: https://github.com/Microsoft/Microsoft.IO.RecyclableMemoryStream/issues/53
Hi,

When installing RMS from NuGet in VS the IntelliSense doesn't show the comments/documentation. I think this is just a case of enabling the XML Documentation file in the Project Settings.

Cheers,
Indy