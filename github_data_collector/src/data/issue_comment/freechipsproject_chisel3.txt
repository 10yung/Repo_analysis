<!-- Note: for support questions, you are strongly advised to use [Stack Overflow](https://stackoverflow.com/questions/tagged/chisel). -->
<!--
This repository's issues are reserved for feature requests and bug reports.
Please select the item best describing the issue in each category and delete the other items.
-->
<!-- choose all that apply -->
**Type of issue**: bug report

<!-- choose one -->
**Impact**: no functional change

<!-- choose one -->
**Development Phase**: request

**Other information**
 <!-- include detailed explanation, stacktraces, related issues, suggestions how to fix, links for us to have context, eg. Stack Overflow, gitter, etc -->
For fixed-width `FixedPoint` addition, the frontend calls `tail()` on the result of FixedPoint addition, which returns a `UInt`. It then casts to a `FixedPoint`, but this requires knowing the binary point. If the binary point is unknown (e.g. inferred by FIRRTL), this will fail.

**If the current behavior is a bug, please provide the steps to reproduce the problem:**
See #1301 for a test demonstrating the problem.

**What is the current behavior?**
`a +% b` crashes when `a` or `b` has unknown binary point.

**What is the expected behavior?**
`a +% b` should work.

**Please tell us about your environment:**
<!--    (examples)
    - version: `3.0-SNAPSHOT`
    - OS: `Linux knight 4.4.0-92-generic #115-Ubuntu SMP Thu Aug 10 09:04:33 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux`
-->
**What is the use case for changing the behavior?**
This is a weird limitation that would be very confusing to unsophisticated users.
This is a failing test! It shouldn't fail, though.

The way that fixed-width addition works relies on having a defined binary point. This is an unfortunate limitation, and should be fixed.

<!--
Please select the item best describing the pull request in each category and delete the other items.
-->
**Related issue**: <!-- if applicable -->

<!-- choose one -->
**Type of change**: bug report

<!-- choose one -->
**Impact**: no functional change

<!-- choose one -->
**Development Phase**: test demonstrating bug

**Release Notes**
<!--
Text from here to the end of the body will be considered for inclusion in the release notes for the version containing this pull request.
-->

I am a beginner in chisel3.
AS a first step, i installed chisel3 env.
and when i test it with Hello example i got this warning:
`hounaida@hounaida-X541UVK:~/Desktop/flexpret-chisel3/examples$ sbt "runMain HelloScala"
[warn] No sbt.version set in project/build.properties, base directory: /home/hounaida/Desktop/flexpret-chisel3/examples
[info] Set current project to examples (in build file:/home/hounaida/Desktop/flexpret-chisel3/examples/)
[info] Compiling 1 Scala source to /home/hounaida/Desktop/flexpret-chisel3/examples/target/scala-2.12/classes ...
[info] running HelloScala 
hello chisel3
[success] Total time: 3 s, completed Jan 13, 2020, 3:39:08 PM
`
I try to fix it by modifying the version of sbt in build.properties from 1.3.2 to 1.3.6 but i got the same warning:
My sbt version:
`hounaida@hounaida-X541UVK:~/Desktop/flexpret-chisel3/examples$ sbt --version
sbt version in this project: 1.3.6
sbt script version: 1.3.6
`
I can't see why i obtain this problem !!!! 
Thanks for your help
I've turned some Scala warnings on, and nested `when/.elsewhen` statements are showing warnings. An example:

In build.sbt:

```scalacOptions ++= Seq("-Ywarn-value-discard")```

And this test case:

```
import chisel3._

class Test extends Module {
  val io = IO(new Bundle {
    val a = Input(Bool())
    val b = Input(Bool())
    val c = Input(Bool())
    val d = Output(Bool())
  })

  when (io.a) {
    when (io.b) {
      io.d := true.B
    } .elsewhen (io.c) {
      io.d := false.B
    }
  }
}

object TestObj extends App {
  chisel3.Driver.execute(Array[String](), () => new Test)
}
```

I see:

```
[warn] main/scala/Test.scala:14:24: discarded non-Unit value
[warn]     } .elsewhen (io.c) {
[warn]                        ^
```
<!-- Note: for support questions, you are strongly advised to use [Stack Overflow](https://stackoverflow.com/questions/tagged/chisel). -->
<!--
This repository's issues are reserved for feature requests and bug reports.
Please select the item best describing the issue in each category and delete the other items.
-->
<!-- choose all that apply -->
**Type of issue**: bug report | other enhancement

<!-- choose one -->
**Impact**: API modification

<!-- choose one -->
**Development Phase**: request

**Other information**
 <!-- include detailed explanation, stacktraces, related issues, suggestions how to fix, links for us to have context, eg. Stack Overflow, gitter, etc -->
I would expect `asUInt` to give results that honor the width of the `Bundle` so that I can use it to convert a bundle literal to UInt consistently.

That said, in the following test won't pass. `bundleLitUInt` should have the same `litValue` as `anotherBundleLitUInt` because the two bundle literals both have `a=3, b=3`.
```scala
  class MyMultipleWidthBundle extends Bundle {
    val a = UInt(2.W) // was UInt(3.W)
    val b = UInt(3.W) // was UInt(2.W)
  }
  "bundle literals asUInt" should "work" in {
    assertTesterPasses(new BasicTester {
      val wire = Wire(UInt(5.W))
      val anotherWire = Wire(UInt(5.W))
      val bundleLitUInt = new MyMultipleWidthBundle().Lit(
        _.a -> 3.U(2.W), _.b -> 3.U(3.W)
      ).asUInt
      val anotherBundleLitUInt = new MyMultipleWidthBundle().Lit(
        _.a -> 3.U, _.b -> 3.U
      ).asUInt

      wire := bundleLitUInt
      anotherWire := anotherBundleLitUInt
      chisel3.assert(wire === anotherWire)
      stop()
    })
```

**If the current behavior is a bug, please provide the steps to reproduce the problem:**

**What is the current behavior?**
Consider `MyMultipleWidthBundle` in the above example: 
- Bundle literals created as `anotherBundleLitUInt`, in which we don't specify the widths of `UInt` in `Lit()`, will not honor the field widths of the bundle. The resultant UInt in the above example is thus 15 (`11 11` in binary).
- Bundle literals created as `bundleLitUInt` will honor the widths. The resultant UInt in the above example is thus 27 (`11 011` in binary).

**What is the expected behavior?**
Both `anotherBundleLitUInt` and `bundleLitUInt` should be 27.

**Please tell us about your environment:**
- version: `3.3-SNAPSHOT`, `3.2-SNAPSHOT`
- OS: `Darwin sy 18.7.0 Darwin Kernel Version 18.7.0: Thu Jun 20 18:42:21 PDT 2019; root:xnu-4903.270.47~4/RELEASE_X86_64 x86_64`
<!--    (examples)
    - version: `3.0-SNAPSHOT`
    - OS: `Linux knight 4.4.0-92-generic #115-Ubuntu SMP Thu Aug 10 09:04:33 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux`
-->
**What is the use case for changing the behavior?**
This can be helpful when I use bundle literals as the input to a Verilog module. This way I don't need to use a wrapper to slice the ports.
<!-- choose one -->
**Type of change**: other enhancement

<!-- choose one -->
**Impact**: no functional change

<!-- choose one -->
**Development Phase**: implementation

`super.nameIds`  has already added `io`, `clock` and `reset` in `names` by reflection.

```scala
protected override def nameIds(rootClass: Class[_]): HashMap[HasId, String] = {
  val names = super.nameIds(rootClass)

  // Allow IO naming without reflection
  println(s"{names(io)}")
  println(s"{names(clock)}")
  println(s"{names(reset)}")

  names.put(io, "io")
  names.put(clock, "clock")
  names.put(reset, "reset")

  names
}
```

Output:

```
[info] [0.005] Elaborating design...
io
clock
reset
[info] [1.177] Done elaborating.
Total FIRRTL Compile Time: 740.5 ms
```

I have noticed some common mistakes result in huge backtraces. One example is an incorrectly sized Enum:

```
import chisel3._
import chisel3.util._

class Bar extends Module {
  val io = IO(new Bundle {
  })

  val a :: b :: c :: d :: Nil = Enum(3)
}

object BarObj extends App {
  chisel3.Driver.execute(Array[String](), () => new Bar)
}
```

Gives the following error message:

```
[info] [0.002] Elaborating design...
[error] (run-main-0) firrtl.options.OptionsException: Exception thrown when elaborating ChiselGeneratorAnnotation
[error] firrtl.options.OptionsException: Exception thrown when elaborating ChiselGeneratorAnnotation
[error]         at chisel3.stage.ChiselGeneratorAnnotation.elaborate(ChiselAnnotations.scala:55)
[error]         at chisel3.stage.phases.Elaborate.$anonfun$transform$1(Elaborate.scala:19)
[error]         at scala.collection.TraversableLike.$anonfun$flatMap$1(TraversableLike.scala:245)
[error]         at scala.collection.immutable.List.foreach(List.scala:392)
[error]         at scala.collection.TraversableLike.flatMap(TraversableLike.scala:245)
[error] oo / Comat scala.collection.TraversableLike.flatMap$(TraversableLike.scala:242)
[error] 	at scala.collection.immutable.List.flatMap(List.scala:355)
[error] 	at chisel3.stage.phases.Elaborate.transform(Elaborate.scala:18)
[error] 	at chisel3.stage.phases.Elaborate.transform(Elaborate.scala:16)
[error] 	at firrtl.options.phases.DeletedWrapper.internalTransform(DeletedWrapper.scala:32)
[error] 	at firrtl.options.phases.DeletedWrapper.internalTransform(DeletedWrapper.scala:15)
[error] 	at firrtl.options.Translator.transform(Phase.scala:140)
[error] 	at firrtl.options.Translator.transform$(Phase.scala:140)
[error] 	at firrtl.options.phases.DeletedWrapper.transform(DeletedWrapper.scala:15)
[error] 	at chisel3.stage.ChiselStage.$anonfun$run$2(ChiselStage.scala:33)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:126)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:122)
[error] 	at scala.collection.immutable.List.foldLeft(List.scala:89)
[error] 	at chisel3.stage.ChiselStage.run(ChiselStage.scala:33)
[error] 	at firrtl.options.Stage$$anon$1.transform(Stage.scala:43)
[error] 	at firrtl.options.Stage$$anon$1.transform(Stage.scala:43)
[error] 	at firrtl.options.phases.DeletedWrapper.internalTransform(DeletedWrapper.scala:32)
[error] 	at firrtl.options.phases.DeletedWrapper.internalTransform(DeletedWrapper.scala:15)
[error] 	at firrtl.options.Translator.transform(Phase.scala:140)
[error] 	at firrtl.options.Translator.transform$(Phase.scala:140)
[error] 	at firrtl.options.phases.DeletedWrapper.transform(DeletedWrapper.scala:15)
[error] 	at firrtl.options.Stage.$anonfun$transform$5(Stage.scala:46)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:126)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:122)
[error] 	at scala.collection.immutable.List.foldLeft(List.scala:89)
[error] 	at firrtl.options.Stage.$anonfun$transform$3(Stage.scala:46)
[error] 	at logger.Logger$.$anonfun$makeScope$2(Logger.scala:168)
[error] 	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)
[error] 	at logger.Logger$.makeScope(Logger.scala:166)
[error] 	at firrtl.options.Stage.transform(Stage.scala:46)
[error] 	at firrtl.options.Stage.transform(Stage.scala:17)
[error] 	at chisel3.Driver$.$anonfun$execute$1(Driver.scala:226)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:126)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:122)
[error] 	at scala.collection.immutable.List.foldLeft(List.scala:89)
[error] 	at chisel3.Driver$.execute(Driver.scala:226)
[error] 	at chisel3.Driver$.execute(Driver.scala:249)
[error] 	at BarObj$.delayedEndpoint$BarObj$1(Bar.scala:12)
[error] 	at BarObj$delayedInit$body.apply(Bar.scala:11)
[error] 	at scala.Function0.apply$mcV$sp(Function0.scala:39)
[error] 	at scala.Function0.apply$mcV$sp$(Function0.scala:39)
[error] 	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:17)
[error] 	at scala.App.$anonfun$main$1$adapted(App.scala:80)
[error] 	at scala.collection.immutable.List.foreach(List.scala:392)
[error] 	at scala.App.main(App.scala:80)
[error] 	at scala.App.main$(App.scala:78)
[error] 	at BarObj$.main(Bar.scala:11)
[error] 	at BarObj.main(Bar.scala)
[error] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[error] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[error] 	at java.lang.reflect.Method.invoke(Method.java:498)
[error] Caused by: scala.MatchError: List(UInt<2>(0), UInt<2>(1), UInt<2>(2)) (of class scala.collection.immutable.$colon$colon)
[error] 	at Bar.<init>(Bar.scala:8)
[error] 	at BarObj$.$anonfun$new$1(Bar.scala:12)
[error] 	at chisel3.Module$.do_apply(Module.scala:52)
[error] 	at chisel3.stage.ChiselGeneratorAnnotation.$anonfun$elaborate$1(ChiselAnnotations.scala:50)
[error] 	at chisel3.internal.Builder$.$anonfun$build$2(Builder.scala:406)
[error] 	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)
[error] 	at chisel3.internal.Builder$.$anonfun$build$1(Builder.scala:404)
[error] 	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)
[error] 	at chisel3.internal.Builder$.build(Builder.scala:404)
[error] 	at chisel3.stage.ChiselGeneratorAnnotation.elaborate(ChiselAnnotations.scala:50)
[error] 	at chisel3.stage.phases.Elaborate.$anonfun$transform$1(Elaborate.scala:19)
[error] 	at scala.collection.TraversableLike.$anonfun$flatMap$1(TraversableLike.scala:245)
[error] 	at scala.collection.immutable.List.foreach(List.scala:392)
[error] 	at scala.collection.TraversableLike.flatMap(TraversableLike.scala:245)
[error] 	at scala.collection.TraversableLike.flatMap$(TraversableLike.scala:242)
[error] 	at scala.collection.immutable.List.flatMap(List.scala:355)
[error] 	at chisel3.stage.phases.Elaborate.transform(Elaborate.scala:18)
[error] 	at chisel3.stage.phases.Elaborate.transform(Elaborate.scala:16)
[error] 	at firrtl.options.phases.DeletedWrapper.internalTransform(DeletedWrapper.scala:32)
[error] 	at firrtl.options.phases.DeletedWrapper.internalTransform(DeletedWrapper.scala:15)
[error] 	at firrtl.options.Translator.transform(Phase.scala:140)
[error] 	at firrtl.options.Translator.transform$(Phase.scala:140)
[error] 	at firrtl.options.phases.DeletedWrapper.transform(DeletedWrapper.scala:15)
[error] 	at chisel3.stage.ChiselStage.$anonfun$run$2(ChiselStage.scala:33)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:126)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:122)
[error] 	at scala.collection.immutable.List.foldLeft(List.scala:89)
[error] 	at chisel3.stage.ChiselStage.run(ChiselStage.scala:33)
[error] 	at firrtl.options.Stage$$anon$1.transform(Stage.scala:43)
[error] 	at firrtl.options.Stage$$anon$1.transform(Stage.scala:43)
[error] 	at firrtl.options.phases.DeletedWrapper.internalTransform(DeletedWrapper.scala:32)
[error] 	at firrtl.options.phases.DeletedWrapper.internalTransform(DeletedWrapper.scala:15)
[error] 	at firrtl.options.Translator.transform(Phase.scala:140)
[error] 	at firrtl.options.Translator.transform$(Phase.scala:140)
[error] 	at firrtl.options.phases.DeletedWrapper.transform(DeletedWrapper.scala:15)
[error] 	at firrtl.options.Stage.$anonfun$transform$5(Stage.scala:46)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:126)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:122)
[error] 	at scala.collection.immutable.List.foldLeft(List.scala:89)
[error] 	at firrtl.options.Stage.$anonfun$transform$3(Stage.scala:46)
[error] 	at logger.Logger$.$anonfun$makeScope$2(Logger.scala:168)
[error] 	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)
[error] 	at logger.Logger$.makeScope(Logger.scala:166)
[error] 	at firrtl.options.Stage.transform(Stage.scala:46)
[error] 	at firrtl.options.Stage.transform(Stage.scala:17)
[error] 	at chisel3.Driver$.$anonfun$execute$1(Driver.scala:226)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:126)
[error] 	at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:122)
[error] 	at scala.collection.immutable.List.foldLeft(List.scala:89)
[error] 	at chisel3.Driver$.execute(Driver.scala:226)
[error] 	at chisel3.Driver$.execute(Driver.scala:249)
[error] 	at BarObj$.delayedEndpoint$BarObj$1(Bar.scala:12)
[error] 	at BarObj$delayedInit$body.apply(Bar.scala:11)
[error] 	at scala.Function0.apply$mcV$sp(Function0.scala:39)
[error] 	at scala.Function0.apply$mcV$sp$(Function0.scala:39)
[error] 	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:17)
[error] 	at scala.App.$anonfun$main$1$adapted(App.scala:80)
[error] 	at scala.collection.immutable.List.foreach(List.scala:392)
[error] 	at scala.App.main(App.scala:80)
[error] 	at scala.App.main$(App.scala:78)
[error] 	at BarObj$.main(Bar.scala:11)
[error] 	at BarObj.main(Bar.scala)
[error] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[error] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[error] 	at java.lang.reflect.Method.invoke(Method.java:498)
```

The answer to the problem is there, but it's hiding 54 deep in the backtrace:

```Bar.scala:11```

It would be also nice to have a more specific error, eg `Enum is too small to fit values defined`
<!-- choose one -->
**Type of change**: bug report
<!-- choose one -->
**Impact**: no functional change

<!-- choose one -->
**Development Phase**: implementation

`loadMemoryFromFile()` creates a separate file and uses a SV bind statement. A simple example:

```
import chisel3._
import chisel3.util.experimental.loadMemoryFromFile

class Foo(val bits: Int, val size: Int, filename: String) extends Module {
  val io = IO(new Bundle {
    val nia = Input(UInt(bits.W))
    val insn = Output(UInt(32.W))
  })

  val memory = Mem(size, UInt(32.W))
  io.insn := memory(io.nia >> 2);
  loadMemoryFromFile(memory, filename)
}

object FooObj extends App {
  chisel3.Driver.execute(Array[String](), () => new Foo(32, 1024, "insns.hex"))
}
```

```
# cat Foo.Foo.memory.v
module BindsTo_0_Foo(
  input         clock,
  input         reset,
  input  [31:0] io_nia,
  output [31:0] io_insn
);

initial begin
  $readmemh("insns.hex", Foo.memory);
end
                      endmodule

bind Foo BindsTo_0_Foo BindsTo_0_Foo_Inst(.*);
```

Yosys doesn't like this, and likely there are other tools that don't either. Is there any reason we don't just place it inline?
I'd like to build my project with `verilator -Wall`, but chisel creates `_RAND_*` regs. A simple example:

```
import chisel3._

class Foo extends Module {
  val io = IO(new Bundle {
    val a = Input(UInt(1.W))
    val b = Output(UInt(1.W))
  })

  val r = RegInit(0.U(1.W))
  r := io.a
  io.b := r
}

object FooObj extends App {
  chisel3.Driver.execute(Array[String](), () => new Foo)
}
```

Results in:

```
module Foo(
  input   clock,
  input   reset,
  input   io_a,
  output  io_b
);
  reg  r; // @[Foo.scala 9:18]
  reg [31:0] _RAND_0;
  assign io_b = r; // @[Foo.scala 11:8]
`ifdef RANDOMIZE_GARBAGE_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_INVALID_ASSIGN
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_REG_INIT
`define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
`define RANDOMIZE
`endif
`ifndef RANDOM
`define RANDOM $random
`endif
`ifdef RANDOMIZE_MEM_INIT
  integer initvar;
`endif
`ifndef SYNTHESIS
initial begin
  `ifdef RANDOMIZE
    `ifdef INIT_RANDOM
      `INIT_RANDOM
    `endif
    `ifndef VERILATOR
      `ifdef RANDOMIZE_DELAY
        #`RANDOMIZE_DELAY begin end
      `else
        #0.002 begin end
      `endif
    `endif
  `ifdef RANDOMIZE_REG_INIT
  _RAND_0 = {1{`RANDOM}};
  r = _RAND_0[0:0];
  `endif // RANDOMIZE_REG_INIT
  `endif // RANDOMIZE
end // initial
`endif // SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      r <= 1'h0;
    end else begin
      r <= io_a;
    end
  end
endmodule
```

Using an empty verilator driver:

```
int main(int argc, char **argv)
{
}
```

and building with:

```
verilator -O3 -Wall --assert --cc Foo.v --exe Foo.cpp
```

we hit the following error:

```
%Warning-UNUSED: Foo.v:8: Signal is not driven, nor used: _RAND_0
                 ... Use "/* verilator lint_off UNUSED */" and lint_on around source to disable this message.
%Error: Exiting due to 1 warning(s)
%Error: Command Failed /usr/bin/verilator_bin -O3 -Wall --assert --cc Foo.v --exe Foo.cpp
```

We are already wrapping everything in `ifdef RANDOMIZE_MEM_INIT` etc, so we should just wrap the reg with an ifdef too.