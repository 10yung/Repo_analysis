This is a reproduction project: https://github.com/Jasperav/WebsocketRust, this is main.rs:
```
use ws::{listen, connect};
use std::thread::{spawn, sleep};
use std::time::Duration;

fn main() {
    run_ws();

    connect("ws://127.0.0.1:3042", |c| {
        c.send(""); // Don't know why something needs to be send to open up the connection
        sleep(Duration::from_secs(1));
        move |m| {
            c.shutdown().unwrap();
            Ok(())
        }
    }).unwrap();

    run_ws();
}

fn run_ws() {
    let _ = spawn(|| {
        listen("127.0.0.1:3042", |c| {
            move |msg| {
                c.send(""); // Send something back
                // Not sure why I can not shutdown the websocket on the instance of the websocket itself.
                Ok(())
            }
        }).unwrap();
    });

    sleep(Duration::from_secs(1)); // Let server startup
}
```

Why isn't the shutdown method working? The program crashes because the connection isn't closed.
Uses the method `SslAcceptorBuilder::mozilla_intermediate` which has been deprecated in the `ssl` package since `0.9.14`
With the closing of #202 came support for `native-tls`. This is great because my use case requires cross-platform builds and `native-tls` fits that requirement very nicely.

Unfortunately I'm having a rough time migrating [this example](https://github.com/housleyjk/ws-rs/blob/90ab38da6823de1e949ddc481e3e0874beebe5a2/examples/unsafe-ssl-client.rs) to using native-tls. 

I've been able to get it to build, but when I run the process, I get this error:

```
[2019-12-17T21:55:22Z ERROR ws::handler] WS Error <Internal>: Failed to upgrade client to SSL: the handshake process was interrupted
```

The relevant diff can be found [here](https://github.com/cloudflare/wrangler/pull/970). 

If I get this working I would love to submit a PR that adds this example to the docs!

Thanks so much for your help on this ðŸ˜„ 
Is this project currently being worked on? The docs hosted on ws-rs.org and docs.rs are both out of date, and PRs seemed to have stalled.

```connect```will block the thread, Can I handle multiple connections in one thread?
I've scoured the docs and haven't found a way to terminate a single connection between a ws Rust server and a client. I'm trying to do this from the server-side. 

Sending a close message is nice when the client is still connected, but I am interested in handling the case when the client's network connection drops out. In this case, sending a close message won't actually close the connection because the client is disconnected and can't sent a response.

The ws library in Node.js provides `ws.terminate()` to forcibly terminate a connection with a client. Does the ws library in Rust have a similar method or some way to terminate a connection?
Hi,

I am trying to make a wss server. I use the examle ssl-server code:

``` rust
extern crate ws;
extern crate openssl;
extern crate env_logger;

use std::rc::Rc;
use std::io::Read;
use std::fs::File;

use openssl::ssl::{SslAcceptor, SslAcceptorBuilder, SslMethod, SslStream};
use openssl::pkey::PKey;
use openssl::x509::{X509, X509Ref};

use ws::util::TcpStream;

struct Server {
    out: ws::Sender,
    ssl: Rc<SslAcceptor>,
}


impl ws::Handler for Server {

    fn on_message(&mut self, msg: ws::Message) -> ws::Result<()> {
        self.out.send(msg)
    }

    fn upgrade_ssl_server(&mut self, sock: TcpStream) -> ws::Result<SslStream<TcpStream>> {
        println!("new connection!");
        
        self.ssl.accept(sock).map_err(From::from)
    }
}


fn main () {
    // Setup logging
    env_logger::init();

    let cert = {
        let data = read_file("certificate.crt").unwrap();
        X509::from_pem(data.as_ref()).unwrap()
    };

    let pkey = {
        let data = read_file("private.key").unwrap();
        PKey::private_key_from_pem(data.as_ref()).unwrap()
    };

     let acceptor = Rc::new({
        let mut builder = SslAcceptor::mozilla_intermediate(SslMethod::tls()).unwrap();
        builder.set_private_key(&pkey).unwrap();
        builder.set_certificate(&cert).unwrap();

        builder.build()
    });

    let ws_settings = ws::Settings {
        max_connections: 100,
        queue_size: 50,
        panic_on_new_connection: false,
        panic_on_shutdown: false,
        fragments_capacity: 10,
        fragments_grow: true,
        fragment_size: u16::max_value() as usize,
        max_fragment_size: usize::max_value(),
        in_buffer_capacity: 2048,
        in_buffer_grow: true,
        out_buffer_capacity: 2048,
        out_buffer_grow: true,
        panic_on_internal: true,
        panic_on_capacity: false,
        panic_on_protocol: false,
        panic_on_encoding: false,
        panic_on_queue: false,
        panic_on_io: false,
        panic_on_timeout: false,
        shutdown_on_interrupt: true,
        masking_strict: false,
        key_strict: true,
        method_strict: false,
        encrypt_server: true,
        tcp_nodelay: true,
    };
    println!("max: {}", usize::max_value());

    assert!(ws_settings.queue_size * ws_settings.max_connections <= usize::max_value(), "overflow!");

    ws::Builder::new().with_settings(ws_settings).build(|out: ws::Sender| {
        Server {
            out: out,
            ssl: acceptor.clone(),
        }
    }).unwrap().listen("spaceio.csteenhuis.com:3012").unwrap();
}


fn read_file(name: &str) -> std::io::Result<Vec<u8>> {
    let mut file = r#try!(File::open(name));
    let mut buf = Vec::new();
    r#try!(file.read_to_end(&mut buf));
    Ok(buf)
}

```

But when I try to connect to it using 

``` javascript


  var wsUri = "wss://spaceio.csteenhuis.com:3012";
  var output;

  function init()
  {
    output = document.getElementById("output");
    testWebSocket();
  }

  function testWebSocket()
  {
    websocket = new WebSocket(wsUri);
    websocket.onopen = function(evt) { onOpen(evt) };
    websocket.onclose = function(evt) { onClose(evt) };
    websocket.onmessage = function(evt) { onMessage(evt) };
    websocket.onerror = function(evt) { onError(evt) };
  }

  function onOpen(evt)
  {
    writeToScreen("CONNECTED");
    doSend("WebSocket rocks");
  }

  function onClose(evt)
  {
    writeToScreen("DISCONNECTED");
  }

  function onMessage(evt)
  {
    writeToScreen('<span style="color: blue;">RESPONSE: ' + evt.data+'</span>');
    websocket.close();
  }

  function onError(evt)
  {
    writeToScreen('<span style="color: red;">ERROR:</span> ' + evt.data);
  }

  function doSend(message)
  {
    writeToScreen("SENT: " + message);
    websocket.send(message);
  }

  function writeToScreen(message)
  {
    var pre = document.createElement("p");
    pre.style.wordWrap = "break-word";
    pre.innerHTML = message;
    output.appendChild(pre);
  }

  window.addEventListener("load", init, false);
```

but most of the time I get ```Connection closed before receiving a handshake response``` from the chrome console.

and sometimes it connects without a problem.

it's super random and I have no clue why this happens.

The application is build using the OpenSSL build I got using vcpkg on Windows and runs on windows server 2016.
The X-Forwarded-For header is implicitly untrustworthy, the need may arise to get the last trusted address in a reverse proxy chain.

This adds `Handshake::forwarded_addr(trusted)` and `Request::forwarded_addr(trusted)`
to get a address at exactly specified `trusted` proxy depth.

E.g. in the common example of a service behind a Apache or Nginx reverse proxy use `forwarded_addr(1)` to get the rightmost X-Forwarded-For header address.
Using `forwarded_addr(0)` will always return the direct peer address.

I'm currently using this as extension trait and it's confirmed to work well.
When the client fails to resolve an IP/domain, instead of returning an error when calling `ws::connect`, it results a `Result::Ok(())` and logs an error with `Unable to establish connection to wss://example.com/: WS Error <Io(Custom { kind: Other, error: "failed to lookup address information: Name or service not known" })>`.