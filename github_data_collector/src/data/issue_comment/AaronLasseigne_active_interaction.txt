Allows an `ActiveInteraction::InvalidInteractionError` to behave in a similar way as `ActiveRecord::RecordInvalid` which exposes the failed `#record`.

`ActiveInteraction::InvalidInteractionError` exposes `#interaction` attribute which includes failing interaction. This feature allows for better inspection of why interaction failed and therefore makes feedback to consumers of interaction errors more flexible.

Take for example a Rails controller action which might need to be rescued and whose error details need to be passed to the frontend.

```ruby
class FooController < ApplicationController
  rescue_from ActiveInteraction::InvalidInteractionError do |exception|
    render json: { errors: exception.interaction.errors.details }, status: :unprocessable_entity
  end

  def update
    result = Foos::Update.run! permitted_params

    render json: result, serializer: FooSerializer, status: :updated
  end
end
```
Currently, the `given?` method can only check values on top-level filters or hash filters. https://github.com/AaronLasseigne/active_interaction/blob/8a6ac5233258170b0a3c95349181beb04e36099f/lib/active_interaction/base.rb#L235-L247

Given a set of filters like this
```
array :line_items do
  hash do
    integer :amount
    string :description, default: nil
  end
end
```

I would love to be able to do something like
```
given?(:line_items, 0, :description)
```

I've hacked together a rudimentary version of this for now
```
def given_line_item_field?(index, field)
  @_interaction_inputs.dig(:line_items, index).key?(field)
end
```
I am trying to use the [predicate methods](https://github.com/AaronLasseigne/active_interaction#predicates) to conditionally validate inputs in a Rails 5 app. I copied the exact [UpdateAccount](https://github.com/AaronLasseigne/active_interaction#edit) class to manually test the example you have there (just in case I had a weird syntax issue, etc) and got an undefined error: 

```
undefined method `first_name?' for #<UpdateAccount>
Did you mean?  first_name
               first_name=

````

The documentation seemed to suggest that these methods are automatically generated for all of the inputs given -- is that correct or am I misunderstanding the proper way to access these?

I am using `active_interaction (3.7.0)` in a Rails 5.2 instance.
When we pass params from controller action to an interaction, ActionController::Parameters (indifferent access) becomes a hash with symbolized keys for the first level values and stringified keys for the 2nd + level values:
```
h = {
  'a' => 1,
  'b' => { 'c' => 2 }
}
```

```
before:
h[:b][:c] # => 2
h['b']['c'] # => 2

h[:a] # => 1
h['a'] # => 1

after:
h['b']['c'] # => error
h['a'] # => nil
```
Hello,

I'm migrating some old (3.0.1) codebase, and I encountered one unexpected issue.

on 3.0.1 this interactor works just fine:
```ruby
Class.new(ActiveInteraction::Base) { boolean :open, default: false }
```

Whereas on 3.7 (actually on anything >= 3.2.1) it fails:

```ruby
[2] pry(main)> Class.new(ActiveInteraction::Base) { boolean :open, default: false } 
ActiveInteraction::InvalidFilterError: "open" is a reserved name
```

I investigated that a bit, and it comes from <a href="https://github.com/AaronLasseigne/active_interaction/blob/master/lib/active_interaction/modules/input_processor.rb#L21">this particular check in InputProcessor</a>.

While I understand why it might be potentially dangerous to have such collisions, I'm wondering if there shouldn't be an option to allow me to have a filter with _reserved name_. I'm totally fine with keeping current behaviour as default, of course, so this should be more like a enhancement than a breaking change - wdyt?

There is a test for showing #468 issue (failing so far).
I have an interaction, that uses `compose` in its callback. If there are some errors, returned from inner interaction - the `ActiveInteraction::Interrupt` exception is thrown and caught nowhere.

Example:

```
class ChildFailingInteraction < ActiveInteraction::Base       
  def execute
    errors.add(:base)
  end
end

class ParentInteraction < ActiveInteraction::Base
  set_callback :execute, :before, :composing_failing_interaction

  def composing_failing_interaction
    compose(ChildFailingInteraction)
  end
        
  def execute; end
end
```

Calling `ParentInteraction.run` leads to `ActiveInteraction::Interrupt` exception.
If the `compose(ChildFailingInteraction)` is placed in the `execute` - it's okay and the exception is caught.
Fixes nested attribute errors (see #466 ), if the name is corresponding.

Reason why it was not working is, that the array is not directly addressed via the attribute name:

```ruby
    def attribute?(attribute)
      @base.respond_to?(attribute.to_s.gsub(/\[(\d)+\]\z/, ""))
    end

attribute
=> :"data[1]" # even though the attribute data is existing
```

My fix corrects this behaviour and test are running fine.

I didn't create so many PR in my life until now, so please feel free to correct me :)
I dunno why, but as far as I know since Rails 5 error messages are nestable (see https://blog.bigbinary.com/2016/07/07/errors-can-be-indexed-with-nested-attrbutes-in-rails-5.html) and it looks like it's not working correctly?

ActiveInteractor is merging them to base though, which is wrong in my opinion.. 

Please correct me, but for me this seems like a bug (which prevents a certain use case for me right now)?

```ruby
class ChildInteraction < ActiveInteraction::Base
  array :data do
    object class: Fixnum
  end

  def execute
    errors.add("data[1]", "tessst")
  end
end

class RootInteraction < ActiveInteraction::Base
  array :data do
    object class: Fixnum
  end

  def execute
    compose(ChildInteraction, data: data)
  end
end

RootInteraction.run(data: [1,2,3]).errors.to_h

=> {:base=>"Data[1] tessst"}

instead of

=> {"data[1]"=>"tessst"}
```

I tried it by setting ```config.active_record.index_nested_attribute_errors =  true``` like mentioned in the link above, but it doesn't work either..?
https://github.com/AaronLasseigne/active_interaction/issues/462