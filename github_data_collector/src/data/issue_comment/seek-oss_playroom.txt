Currently in my `playroom.config.js`, I am only able to specify a single directory for my components:

```js
module.exports = {
  components: './components/src/',
...
}
```
However, it would be useful that I could point to a number of component sources by passing an array of paths like this:

```js
module.exports = {
  components: [
  './components/src/',
  './additional-components/src/'
 ],
...
}
```

Hi,

1. I use Next.js for my application, so  I need to write `<img src="/image.jpeg">` and `background-image: url("/image.jpeg")` to display an image stored at `public/image.jpeg` relative to the project root. ([reference to docs on this](https://nextjs.org/docs#static-file-serving-eg-images))

2. However, Playroom appears to resolve `<img>` `src` paths and `background-image: url(...)` paths from the root of the project. I need to use either `<img src="public/image.jpeg"/>` or `background-image: url('public/image.jpeg')` to display the image stored at `public/image.jpeg`

3. This makes the paths for my images in the Playroom environment incompatible with the paths that images need to resolve properly in the Next.js environment. 

Ideally, I would like all image paths starting with `/` to resolve to paths starting with `/public` in the Playroom environment. For example, `/image.jpeg` would resolve to `/public/image.jpeg`

What's the best way to accomplish this? 
Im using CRA + TypeScript and wanted to test out playroom but immediately run into this error: 
`
(node:39309) UnhandledPromiseRejectionWarning: Error: Cannot find module './src/Components'
`

**playroom.config.js**
```js
module.exports = {
  components: './src/Components',
  outputPath: './build/playroom',
  typeScriptFiles: [
    'src/Components/**/*.{ts,tsx}',
    '!**/node_modules',
  ],
};
```

**tsconfig.json**
```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve"
  },
  "include": [
    "src"
  ]
}
```

Any ideas about this? 😞 
After running `yarn add --dev playroom` and adding the two scripts to my `package.json`, I get the following error:

```
$ yarn playroom:start
yarn run v1.17.3
$ playroom start
ℹ ｢wds｣: Project is running at http://localhost:12345/
ℹ ｢wds｣: webpack output is served from undefined
ℹ ｢wds｣: Content not from webpack is served from /Users/npresta/wave/src/lighthouse
Browserslist: caniuse-lite is outdated. Please run next command `yarn upgrade`


 ERROR  Failed to compile with 11 errors                                                                                                     2:44:32 PM

This dependency was not found:

* webpack-dev-server/client?http://localhost:12345 in multi webpack-dev-server/client?http://localhost:12345 webpack/hot/dev-server ./node_modules/playroom/src/frame.js, multi (webpack)-dev-server/client?http://localhost (webpack)/hot/dev-server.js webpack-dev-server/client?http://localhost:12345 webpack/hot/dev-server ./node_modules/playroom/src/frame.js and 2 others

To install it, you can run: npm install --save webpack-dev-server/client?http://localhost:12345
```

here is my `playroom.config.js`:

```javascript
module.exports = {
  components: './src/lighthouse.ts',
  outputPath: './dist/playroom',

  // Optional:
  title: 'Lighthouse Component Library',
  widths: [320, 375, 768, 1024],
  port: 12345,
  openBrowser: true,
  exampleCode: `
    <WaveButton>
      Hello World!
    </WaveButton>
  `,
};
```

I'm somewhat confused by the error message (about missing `webpack-dev-server`) given that `yarn` thinks it's installed:

```
$ yarn why webpack-dev-server
yarn why v1.17.3
[1/4] 🤔  Why do we have the module "webpack-dev-server"...?
[2/4] 🚚  Initialising dependency graph...
[3/4] 🔍  Finding dependency...
[4/4] 🚡  Calculating file sizes...
=> Found "webpack-dev-server@3.9.0"
info Reasons this module exists
   - "playroom" depends on it
   - Hoisted from "playroom#webpack-dev-server"
✨  Done in 0.98s.
```

The project itself ("lighthouse") doesn't actually use `webpack-dev-server` and uses `webpack-serve` instead. If I explicitly install `yarn add --dev webpack-dev-server@3.9.0` the error goes away.

I would've thought that [explicitly adding `webpack-dev-server` to `playroom`'s dependencies](https://github.com/seek-oss/playroom/blob/5c3329b127f06f409f4f9ec6ae59df21afc70a4a/package.json#L98) would be enough, but it isn't in this case. I'm not sure why.










Hi, Firstly thanks for this super awesome tool. I really loved how simple it is and how simply it works. 

I just wanted to share a fork, https://github.com/nksaraf/playroom, that I have been working on for my own use cases. You can see examples of some of the cool things that managed to work in playroom at the end of this comment.

So I integrated the Monaco editor and migrated some of the core Playroom react code to Typescript and hooks because I found it easier to work with. The last and probably the collest thing I was able to make work was being able to use React hooks and that means probably all of React's functionality from the playroom editor. The JSX is still formatted and interpreted correctly even if its has multiple parents tags because we wrap it in a fragment. And no return statement is necessary so its kinda svelte-ish in its look and simplicity. It makes a lot of cool stuff possible. You can also import your own hooks with your components, no additional code is required (probably should add config though). I also have tried useEffect and fetched data all correctly.

All of this works on its own just like the old playroom. But another cool integration that I made is with this library I wrote https://github.com/nksaraf/react-box (not yet published). But its essentially some React primitives (mainly the Box) that wrap functionality from styled-components, styled-system, framer-motion to allow styling and animations declaratively through just props. And with hooks, now writing almost anything should be possible treating the playroom as a functional components. I have deployed this integration at https://playroom.now.sh if anyone wants to give it a try.

Also, if the contributors would want to discuss integrating some of this with the playroom library,  I would love to make a pull request but I probably broke a lot of the CI/CD stuff because I am not well versed on it. (Sorry, I am not certain of what the process for this is because this is my first time contributing to open source).

Also @markdalgleish loved your talk on design systems, would love to hear what you think about some of this.

PS: There are still a lot of any's in my typescript but I was just trying to make it work. I haven't got intellisense to work correctly with the user types in Monaco, but I see a path where the types generated by react-docgen can be put into a .d.ts file and fed into the monaco editor that I did with the React types which worked.

Here are some examples of things that becomes possible. You can directly use the links and play around with the code thanks to the sandboxing and how the creators made the code part of the url!

## React hooks
<img src="https://github.com/nksaraf/playroom/raw/master/images/hooks.gif" alt="Hooks in Playroom Demo" title="Hooks in Playroom Demo" />

[playroom link - hooks](https://playroom.now.sh/#?code=N4Igxg9gJgpiBc4IDsDOAXABAbUgV2XRgCcAaTVGdAYQgKOIF1MBeTAJRgEMx0A6PJQDK6LkQAUABgCUAbgA6ySGiwBLJcRgBbGIVr0SrTOOmsAfBSr7CJcfhvFzmew0wBqTAEY5ixQB4AITx0dBRnPGJUCGIWeRAABwh1BjjMFAAVLniWYHUwTR09OgcAXzNFTExM+IB6agAbVTAAa0xQzC0IADcYTC4AC24oPn8aoJCUcuRAiAAPTAAzFHQhVQAvGByAJgAWMoBNOj7NPqwMGHjMYBcSEr4-MbmpkBKgA)

## Animation and stlying props with @nksaraf/react-box

<img src="https://github.com/nksaraf/playroom/raw/master/images/animation.gif" alt="Animations with Framer Motion in Playroom Demo" title="Animations with Framer Motion in Playroom Demo" />

[playroom link - animation and styling](https://playroom.now.sh/#?code=N4Igxg9gJgpiBc4IDsDOAXABAbQwQ3RgBpNUZ0BldAmAXUwF5MAlGPMdAOgFcyqaAFAB0QeEQEoA3EOQyAPACEIADxmZMANzwAnAJZ5k6VA2DBMeeJjMAbGADN0lgAyYAviQBGlm-ceYAjE4urm6uaphg3NqoENoMIgAOELqGMNoi4Umouui6KPEg2jDWBLoaMBnI6igAKngJJgLijAB8pOT8hAL4hK2Y3dS9DEwiYiCYAPyYIh4imJajEuJhVebIugC2NCY9MCst4QASxdYQmADqsdZQAITyAPRKygfIIK5AA)

## Data fetching with useEffect

<img src="https://github.com/nksaraf/playroom/raw/master/images/effect.gif" alt="Data fetching in Playroom Demo" title="Data fetching in Playroom Demo" />

[playroom link - Data fetching](https://playroom.now.sh/#?code=N4Igxg9gJgpiBc4IDsDOAXABAbQA4QGsYBbFAGk1RnQAVCSUBdTAXkwCUYBDMdAOgCuVAMrou6GAAoAOiHQAnGDDAEIsgJQBuackhos2AJbEuAcxgUqteqWQBJE+eZtOPfkJijxU2Ru3JXXkEqAFEAMzDldElJdVYAPkxgHUxMPQxMRVQBABssNkj0MAALSQADYvR0XFR4AHo6-CIuXEM+SDqWwzqANwAmRpsUOoASYCaGZABfMvUU1Mw+dGKYZEkocS4EzA2xPgArVBRYueQFxeXV9c3tqzoiWwczKV2uPlRceUMJVD4w+RQ6AA+rAwlxcuh1Kdzu1xCVJDB5AD5LdqPdJk9zDIQBotDophQ8ENkIw8cgdAAeOzIXACdDzHpcHICGAscbEqbzFAAYWKXGQ5jZjOZMFR1gex2FLPaAiRq3QABUuPJzPwpTB1JzkHV4pTMaLUPIwGzjM8ppgdToQFMgA)

## Forms with Formik

<img src="https://github.com/nksaraf/playroom/raw/master/images/forms.gif" alt="Forms with Formik Demo" title="Forms with Formik Demo" />

[playroom link - Forms with Formik](https://playroom.now.sh/#?code=N4Igxg9gJgpiBc4IDsDOAXABMTA3AhgDYCuMqANJgBb7JSEwDCNyA5jJgL6YC8mxqGADEIAJwC2ASwDWACmAAdZJkyTkk9JKIA1IqVTxsSlSuT5xMQwpABldDAAOVGMmvGu5dyhvEARlPRDWQBKXgA+bE4lTmCAbiUlAB4w90SASWQHYiwCEhgeYFz9ADozC24UZlp2ApZ6JhZ2bjL86xbrTAB6FOVMRIAhCAAPTDBiUVQxHmsHCDV7UQ7IQinrXzzigFYABm3rHpNMAAkYQhXsIrJS8xhOAEJUzsGhnsTupRBOIA)


Here is where className and children are ignored:

https://github.com/seek-oss/playroom/pull/4#diff-496e4121bdcb4e68cfdb4cdd488b8ebdR155-R156

I would like to ignore more props that are being injected by libraries like material UI such as `classes`, and `innerRef`

I wouldn't mind taking a stab at a PR. Anyone have an idea of an ideal API you'd like to see for this?

Thanks for the great library 🚀 
I don't want to have to specify a custom webpack and use our default react scripts. Is this possible?
Putting this here as i'll probably implement this, but, It would be nice to have an ability to copy a shortURL (instead of base64 links) for pasting in Slack/etc.

I was pairing with another dev the other day and we passed 4-5 links back and forth taking over our slack convo with huge link blocks. (I ended up just using bit.ly, but it would be nice if I could copy a short-link right from the playroom)
I'm using playroom as part of a design system and encountered an issue with playroom running out of memory. We recently added a  SVG icon component, which includes ~190 possible SVGs which are about 186kb when loaded all at once.

I've verified the entry file we pass to playroom is all correct, but now playroom runs out of JS memory while building. I haven't had a chance to look at the source yet, but if anyone has any ideas where this might be happening I could use the help.

Thanks!

```
<--- Last few GCs --->

[45624:0x102644000]    30303 ms: Mark-sweep 1388.1 (1424.9) -> 1388.1 (1425.9) MB, 994.5 / 0.0 ms  (average mu = 0.075, current mu = 0.001) allocation failure scavenge might not succeed
[45624:0x102644000]    31351 ms: Mark-sweep 1389.0 (1425.9) -> 1389.1 (1426.4) MB, 1045.9 / 0.0 ms  (average mu = 0.038, current mu = 0.002) allocation failure scavenge might not succeed


<--- JS stacktrace --->

==== JS stack trace =========================================

    0: ExitFrame [pc: 0x3480c84dbe3d]
Security context: 0x060a8e21e6e1 <JSObject>
    1: /* anonymous */ [0x60a436a8181] [/Users/node_modules/acorn/dist/acorn.js:~2169] [pc=0x3480c8d17244](this=0x060a50986ea9 <Parser map = 0x60acb469039>,refDestructuringErrors=0x060a3b4026f1 <undefined>)
    2: arguments adaptor frame: 0->1
    3: /* anonymous */ [0x60a436a84b9] [/Users/node_modules/acorn/dist/acorn.j...

FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory
 1: 0x10003b1db node::Abort() [/Users/node/v10.15.1/bin/node]
 2: 0x10003b3e5 node::OnFatalError(char const*, char const*) [/Usersv10.15.1/bin/node]
 3: 0x1001a86b5 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [/Usersnode/v10.15.1/bin/node]
 4: 0x100573ad2 v8::internal::Heap::FatalProcessOutOfMemory(char const*) [/Users/node/v10.15.1/bin/node]
 5: 0x1005765a5 v8::internal::Heap::CheckIneffectiveMarkCompact(unsigned long, double) [/Users/node/v10.15.1/bin/node]
 6: 0x10057244f v8::internal::Heap::PerformGarbageCollection(v8::internal::GarbageCollector, v8::GCCallbackFlags) [/Users/node/v10.15.1/bin/node]
 7: 0x100570624 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [/Users/node/v10.15.1/bin/node]
 8: 0x10057cebc v8::internal::Heap::AllocateRawWithLigthRetry(int, v8::internal::AllocationSpace, v8::internal::AllocationAlignment) [/Users/node/v10.15.1/bin/node]
 9: 0x10057cf3f v8::internal::Heap::AllocateRawWithRetryOrFail(int, v8::internal::AllocationSpace, v8::internal::AllocationAlignment) [/Users/node/v10.15.1/bin/node]
10: 0x10054c884 v8::internal::Factory::NewFillerObject(int, bool, v8::internal::AllocationSpace) [/Users/node/v10.15.1/bin/node]
11: 0x1007d4894 v8::internal::Runtime_AllocateInNewSpace(int, v8::internal::Object**, v8::internal::Isolate*) [/Users/node/v10.15.1/bin/node]
12: 0x3480c84dbe3d
13: 0x3480c8d17244
error Command failed with signal "SIGABRT".
``` 
Thanks for creating Playroom, its a tool that I use every day!

**What changes does this PR bring?**
Adds new playroom config option for `customStyles`. Accepts a string of CSS that will be inserted into the head of the Playroom page. Will allow consumers to make visual tweaks to things like code-editor height, font-size and line-height.

Any critique is welcome! 😄 