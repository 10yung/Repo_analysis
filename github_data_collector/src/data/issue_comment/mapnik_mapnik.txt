I did:

```
git clone https://github.com/mapnik/mapnik.git
cd mapnik
git submodule update --init
./configure
make
```

but it fails with:

```
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
scons: *** [src/libmapnik.dylib] Error 1
scons: building terminated because of errors.
make: *** [mapnik] Error 2
```

The last line before the failure is:

`bool mapnik::grammar::parse_rule<std::__1::__wrap_iter<...>`

The reason I'm trying to build from source is that python-mapnik appears to be broken in the sense that you cannot put text into the maps (see https://github.com/mapnik/python-mapnik/issues/218 ).

I've tried installing mapnik with homebrew and running mapnik-render, but it cannot find "mapnik-config", so it can't find the data source plugins, which means it's basically not usable, either. I haven't been able to figure out a way to get it to detect the data source plugins, but [online comments](https://github.com/mapnik/mapnik/issues/3373#issuecomment-199444945) suggested building from source was the best way.
current mapnik-master (2019-12-19, can't find a readable version number somewhere) failes to compile:

```
[...]
x86_64-pc-linux-gnu-g++ -o plugins/input/csv/csv_datasource.os -c -std=c++14 -DU_USING_ICU_NAMESPACE=0 -fvisibility=hidden -fvisibility-inlines-hidden -Wall -pthread -ftemplate-depth-300 -Wsign-compare -O3 -fPIC -DMAPNIK_MEMORY_MAPPED_FILE -DMAPNIK_HAS_DLCFN -DBIGINT -DBOOST_REGEX_HAS_ICU -DHAVE_JPEG -DMAPNIK_USE_PROJ4 -DHAVE_PNG -DHAVE_WEBP -DHAVE_TIFF -DLINUX -DMAPNIK_THREADSAFE -DBOOST_SPIRIT_NO_PREDEFINED_TERMINALS=1 -DBOOST_PHOENIX_NO_PREDEFINED_TERMINALS=1 -DBOOST_SPIRIT_USE_PHOENIX_V3=1 -DNDEBUG -Ideps -Ideps/mapbox/polylabel/include -Ideps/mapbox/protozero/include -Ideps/mapbox/geometry/include -Ideps/mapbox/variant/include -Ideps/agg/include -Iinclude -I/usr/include -I/usr/include/freetype2 -I/usr/include/libxml2 -I/usr/include/gdal -I/usr/include/postgresql-11 plugins/input/csv/csv_datasource.cpp
In file included from include/mapnik/geometry.hpp:27,
                 from plugins/input/csv/csv_utils.hpp:28,
                 from plugins/input/csv/csv_datasource.cpp:23:
include/mapnik/geometry/point.hpp:26:10: fatal error: mapbox/geometry/point.hpp: No such file or directory
   26 | #include <mapbox/geometry/point.hpp>
      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
scons: *** [plugins/input/csv/csv_datasource.os] Error 1
scons: building terminated because of errors.
```

Configuration was
```
./scons/scons.py CC=x86_64-pc-linux-gnu-gcc CXX=x86_64-pc-linux-gnu-g++ INPUT_PLUGINS=shape,csv,raster,geojson,gdal,ogr,postgis,sqlite PREFIX=/usr DESTDIR=/mnt/gentoo/tmp/portage/sci-geosciences/mapnik-3.0.22-r1/image/ XMLPARSER=libxml2 LINKING=shared RUNTIME_LINK=shared PROJ_INCLUDES=/usr/include PROJ_LIBS=/usr/lib64 LIBDIR_SCHEMA=lib64 FREETYPE_INCLUDES=/usr/include/freetype2 FREETYPE_LIBS=/usr/lib64 SYSTEM_FONTS=/usr/share/fonts CAIRO=1 DEBUG=0 XML_DEBUG=0 DEMO=0 SAMPLE_INPUT_PLUGINS=0 CUSTOM_LDFLAGS=-Wl,-O1 -Wl,--as-needed CUSTOM_LDFLAGS+=-L/mnt/gentoo/tmp/portage/sci-geosciences/mapnik-3.0.22-r1/image//usr/lib64 configure
```

system's scons (v3.1.1) couldn't even run configure, but failed on a key error:
```
Checking for dlfcn.h support ... yes
KeyError: 'LIBPATH':
  File "/tmp/mapnik-master/SConstruct", line 1584:
    conf.prioritize_paths(silent=True)
  File "/usr/lib64/python2.7/site-packages/SCons/SConf.py", line 691:
    ret = self.test(context, *args, **kw)
  File "/tmp/mapnik-master/SConstruct", line 646:
    env['LIBPATH'] = sort_paths(env['LIBPATH'], prefs)
  File "/usr/lib64/python2.7/site-packages/SCons/Environment.py", line 410:
    return self._dict[key]
```

boost on the system is v1.71.0
Currently, it looks like mapnik doesn't handle GDAL datasources where north is not up.  A long time ago, an error was thrown for this condition, but as the transform matrix could be nearly orthogonal, that was commented out.  It would be nice to support datasources where GDAL's getGeoTransform returns a rotated or skewed data source.

If I manually compute the extents of the rotated datasource, mapnik will render the data in a rotated manner (that is, rendering the image as if it were north-up).

Looking at the code, it looks like the full transform would need to be passed to the gdal featureset.  Alternately, perhaps there is a clever way to modify the layer srs to do this.
Hello,

I've been trying to accomplish something using polygon pattern symbolizer but it's clear it's not designed to do what I want to do.  I think what I'm after could be done with changes to polygon pattern or polygon symbolizer.

You can read more at there two issues:
https://github.com/mapnik/mapnik-support/issues/129
https://github.com/mapnik/mapnik/issues/4097

I'm a longtime software developer but c++ isn't my language.

Would a core mapnik developer, someone familiar with its internals and symbolizers, be willing to develop the feature I need or coach me through it?  We are willing to discuss compensation but at this point it's clear that I need help.

Thanks,
-Rob
We have both TravisCI and CircleCI enabled. Lets reduce heat production by disabling CircleCI as TravisCI is adequate enough and is running well currently.  We can revisit this at the later stage.
/cc @springmeyer     
Hey guys, 

we study at the htw berlin (university of applied sience) and we're currently working on a project with the mapnik.

our task is to make the mapnik time sensitive.

time sensitive means: you can add a specific date and, the map only displays data (buildings, streets, ..) which exist at this time.

- i wonder if there is any interest in this feature? 
- has someone already tried to implement a time sensitive feature?
Trying to build mapnik v3.0.22 with boost v1.71.0 failes:

```
x86_64-pc-linux-gnu-g++ -o src/json/mapnik_geometry_to_geojson.o -c -std=c++11 -DU_USING_ICU_NAMESPACE=0 -fvisibility=hidden -fvisibility-inlines-hidden -Wall -pthread -ftemplate-depth-300 -Wsign-compare -Wshadow -O2 -pipe -fPIC -DMAPNIK_MEMORY_MAPPED_FILE -DMAPNIK_HAS_DLCFN -DBIGINT -DBOOST_REGEX_HAS_ICU -DHAVE_JPEG -DMAPNIK_USE_PROJ4 -DHAVE_PNG -DHAVE_WEBP -DHAVE_TIFF -DLINUX -DMAPNIK_THREADSAFE -DBOOST_SPIRIT_NO_PREDEFINED_TERMINALS=1 -DBOOST_PHOENIX_NO_PREDEFINED_TERMINALS=1 -DBOOST_SPIRIT_USE_PHOENIX_V3=1 -DNDEBUG -Ideps -Ideps/mapbox/variant/include -Ideps/agg/include -Iinclude -I/usr/include -I/usr/include/freetype2 -I/usr/include/libxml2 -I/usr/include/gdal -I/usr/include/postgresql-12 src/json/mapnik_geometry_to_geojson.cpp
In file included from /usr/include/boost/type_traits/is_convertible.hpp:20,
                 from /usr/include/boost/proto/matches.hpp:38,
                 from /usr/include/boost/phoenix/core/domain.hpp:12,
                 from /usr/include/boost/phoenix/core/actor.hpp:18,
                 from /usr/include/boost/phoenix/core.hpp:12,
                 from /usr/include/boost/spirit/include/phoenix_core.hpp:11,
                 from /usr/include/boost/spirit/home/support/terminal.hpp:17,
                 from /usr/include/boost/spirit/home/support/common_terminals.hpp:15,
                 from /usr/include/boost/spirit/home/karma/char/char.hpp:14,
                 from /usr/include/boost/spirit/home/karma/char.hpp:13,
                 from /usr/include/boost/spirit/home/karma.hpp:13,
                 from /usr/include/boost/spirit/include/karma.hpp:16,
                 from include/mapnik/json/geometry_generator_grammar.hpp:33,
                 from src/json/mapnik_geometry_to_geojson.cpp:25:
/usr/include/boost/spirit/home/support/attributes.hpp: In instantiation of 'struct boost::spirit::traits::transform_attribute<const mapnik::geometry::geometry<double>, const mapnik::geometry::geometry<double>&, boost::spirit::karma::domain, void>':
/usr/include/boost/spirit/home/karma/nonterminal/rule.hpp:293:42:   required from 'bool boost::spirit::karma::rule<OutputIterator, T1, T2, T3, T4>::generate(boost::spirit::karma::rule<OutputIterator, T1, T2, T3, T4>::output_iterator&, Context&, const Delimiter&, const Attribute&) const [with Context = boost::spirit::context<boost::fusion::cons<const mapnik::geometry::geometry<double>&, boost::fusion::nil_>, boost::spirit::locals<> >; Delimiter = boost::spirit::unused_type; Attribute = mapnik::geometry::geometry<double>; OutputIterator = std::back_insert_iterator<std::__cxx11::basic_string<char> >; T1 = const mapnik::geometry::geometry<double>&(); T2 = boost::spirit::unused_type; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type; boost::spirit::karma::rule<OutputIterator, T1, T2, T3, T4>::output_iterator = boost::spirit::karma::detail::output_iterator<std::back_insert_iterator<std::__cxx11::basic_string<char> >, mpl_::int_<15>, boost::spirit::unused_type>]'
/usr/include/boost/spirit/home/karma/reference.hpp:46:65:   required from 'bool boost::spirit::karma::reference<Subject>::generate(OutputIterator&, Context&, const Delimiter&, const Attribute&) const [with OutputIterator = boost::spirit::karma::detail::output_iterator<std::back_insert_iterator<std::__cxx11::basic_string<char> >, mpl_::int_<15>, boost::spirit::unused_type>; Context = boost::spirit::context<boost::fusion::cons<const mapnik::geometry::geometry<double>&, boost::fusion::nil_>, boost::spirit::locals<> >; Delimiter = boost::spirit::unused_type; Attribute = mapnik::geometry::geometry<double>; Subject = const boost::spirit::karma::rule<std::back_insert_iterator<std::__cxx11::basic_string<char> >, const mapnik::geometry::geometry<double>&(), boost::spirit::unused_type, boost::spirit::unused_type, boost::spirit::unused_type>]'
/usr/include/boost/spirit/home/karma/generate.hpp:69:81:   required from 'bool boost::spirit::karma::generate(boost::spirit::karma::detail::output_iterator<OutputIterator, Derived>&, const Expr&, const Attr&) [with OutputIterator = std::back_insert_iterator<std::__cxx11::basic_string<char> >; Properties = mpl_::int_<15>; Expr = mapnik::json::geometry_generator_grammar<std::back_insert_iterator<std::__cxx11::basic_string<char> >, mapnik::geometry::geometry<double> >; Attr = mapnik::geometry::geometry<double>]'
/usr/include/boost/spirit/home/karma/generate.hpp:91:31:   required from 'bool boost::spirit::karma::generate(OutputIterator&, const Expr&, const Attr&) [with OutputIterator = std::back_insert_iterator<std::__cxx11::basic_string<char> >; Expr = mapnik::json::geometry_generator_grammar<std::back_insert_iterator<std::__cxx11::basic_string<char> >, mapnik::geometry::geometry<double> >; Attr = mapnik::geometry::geometry<double>]'
src/json/mapnik_geometry_to_geojson.cpp:34:62:   required from here
/usr/include/boost/spirit/home/support/attributes.hpp:963:9: error: static assertion failed: Transformed cannot be a reference type
         BOOST_STATIC_ASSERT_MSG(!is_reference<Transformed>::value,
         ^~~~~~~~~~~~~~~~~~~~~~~
```

boost is on version 1.71.0 (current stable on gentoo linux)

Hi everyone.  I have a thread about this over on [mapnik-support](https://github.com/mapnik/mapnik-support/issues/129) about this but there's not a lot of activity over there.

I've ran the tests but the test transformations are only for svg.  The png test only does geometry-transform.  Any attempt at using transform (doesn't matter if scale, rotate, or translate) simply fails without error.

Png transformations do work with the point symbolizer.  Are they just not implemented in polygon pattern symbolizer?

FYI in my use case I'm aiming to use a png image scaled large enough so that it doesn't tile, with local alignment, but translated so its centre in roughly on my polygon's centroid.

Thanks for any help you can provide.  I'd like to first confirm (or not) that this is a bug then take steps to achieve my goal.

-Rob
Please add an option to TextSymbolizer (and ShieldSymbolizer) to underscore text.
This can be useful e.g. for showing labels for capital cities with an underscore.
Seeing errors like this when running make. 
```
/modules/gcc/9.2.0/bin/g++ -o utils/mapnik-index/mapnik-index utils/mapnik-index/mapnik-index.o utils/mapnik-index/process_csv_file.o utils/mapnik-index/process_geojson_file.o plugins/input/csv/csv_utils.o -Ldeps/agg -Lsrc -Lsrc/json -Lsrc/wkt -Lmason_packages/.link/lib -Lmason_packages/linux-x86_64/libgdal/2.1.3/lib -lmapnik -lboost_program_options-mt-1_69 -lboost_system-mt-1_69 -lmapnik-json -lmapnik-wkt -licuuc -lboost_filesystem-mt-1_69 -lboost_regex-mt-1_69 -lcairo -lpixman-1 -lpng -lproj -ltiff -lwebp -licui18n -lboost_system-mt-1_69 -lharfbuzz -ljpeg -licuuc -lfreetype -licudata -lz -ldl -ldl
/bin/ld: warning: libicuuc.so.64, needed by //usr/local/lib/libboost_regex-mt-1_69.so, may conflict with libicuuc.so.50
/bin/ld: warning: libicuuc.so.64, needed by //usr/local/lib/libboost_regex-mt-1_69.so, may conflict with libicuuc.so.50
/bin/ld: src/libmapnik.so: undefined reference to symbol '_ZN6icu_6413UnicodeStringC1EOS0_'
/usr/local/lib/libicuuc.so.64: error adding symbols: DSO missing from command line
collect2: error: ld returned 1 exit status
scons: *** [utils/mapnik-index/mapnik-index] Error 1
scons: building terminated because of errors.
make: *** [mapnik] Error 2
```

According to this issue - https://github.com/mapnik/mapnik/issues/2771 - It could be related to library order, but I'm really sure where to change things. Currently blocked and unsure of how to proceed. 

CentOS 7
manually build boost 1.69.0 in /usr/local/lib/
manually build icu 1.64.2 in /usr/local/lib/
gcc 9.2.0
Configure with `./configure BOOST_INCLUDES=/usr/local/include BOOST_LIBS=/usr/local/lib BOOST_VERSION=1_69 ICU_LIBS=/usr/local/lib ICU_INCLUDES=/usr/local/include`