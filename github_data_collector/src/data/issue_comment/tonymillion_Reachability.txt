Fix #176 by creating `Package.swift`

@tonymillion, please merge or comment on some of these PRs, this is a useful repository.
please add support to swift package manager as soon as possible.
thank you.
I use this library for years for production. Recently I found this bug on iOS 13.2.3, iPad Mini4 connect over wifi.
**How to produce the bug**: Connect the iPad to the wifi network and then disconnect optical cable (simulate lost internet connection). But it continue to "REACHABLE".
I have not test this on the iPhone.
Code test on Xcode 11.2.1, MacOS 10.14.4:
```
// Allocate a reachability object
Reachability* reach = [Reachability reachabilityWithHostname:@"www.google.com"];

// Set the blocks
reach.reachableBlock = ^(Reachability*reach)
{
    // keep in mind this is called on a background thread
    // and if you are updating the UI it needs to happen
    // on the main thread, like this:

    dispatch_async(dispatch_get_main_queue(), ^{
        NSLog(@"REACHABLE!");
    });
};

reach.unreachableBlock = ^(Reachability*reach)
{
    NSLog(@"UNREACHABLE!");
};

// Start the notifier, which will cause the reachability object to retain itself!
[reach startNotifier];
```
My app is crashing oftenly for users PFA crashatics logs.
I am using block based notifier and starting it on app launch


Method called on didfinishlaunching ----->>>>
 func listenInternetConnection () {
    self.reach = Reachability.forLocalWiFi();
    
    self.reach!.reachableBlock = {
      (reach: Reachability?) -> Void in
      self.checkAndUploadPendingConsultations();
    }
    
    self.reach!.unreachableBlock = {
      (reach: Reachability?) -> Void in
      //print("UNREACHABLE!")
    }
    
    
    self.reach!.startNotifier()
    
  }

Please find logs ------->>>>>>

#19. Crashed: com.tonymillion.reachability
0  myapp                        0x1025c51d4 specialized AppDelegate.checkAndUploadPendingConsultations() (AppDelegate.swift:118)
1  myapp                        0x1025c3758 thunk for @escaping @callee_guaranteed (@guaranteed Reachability?) -> () (<compiler-generated>)
2  Arctern                        0x102587f74 -[Reachability reachabilityChanged:] (Reachability.m:450)
3  Arctern                        0x1025879fc TMReachabilityCallback (Reachability.m:83)
4  SystemConfiguration            0x193a6fa14 reachPerformAndUnlock + 540
5  libdispatch.dylib              0x1926ed6c8 _dispatch_call_block_and_release + 24
6  libdispatch.dylib              0x1926ee484 _dispatch_client_callout + 16
7  libdispatch.dylib              0x192695bd0 _dispatch_lane_serial_drain$VARIANT$mp + 592
8  libdispatch.dylib              0x192696718 _dispatch_lane_invoke$VARIANT$mp + 432
9  libdispatch.dylib              0x19269eeb8 _dispatch_workloop_worker_thread + 600
10 libsystem_pthread.dylib        0x1928d10dc _pthread_wqthread + 312
11 libsystem_pthread.dylib        0x1928d3cec start_wqthread + 4

```
0 libobjc.A.dylib | objc_retain + 16
1 xxx | TMReachabilityCallback (Reachability.m:76)
2 SystemConfiguration | _reachPerformAndUnlock + 540
3 SystemConfiguration | _____SCNetworkReachabilityRestartResolver_block_invoke_2 + 472
4 libnetwork.dylib | ___nw_resolver_update_client_block_invoke + 104
5 libdispatch.dylib | __dispatch_call_block_and_release + 24
6 libdispatch.dylib | __dispatch_client_callout + 16
7 libdispatch.dylib | __dispatch_lane_serial_drain$VARIANT$mp + 592
8 libdispatch.dylib | __dispatch_lane_invoke$VARIANT$mp + 432
9 libdispatch.dylib | __dispatch_workloop_worker_thread + 600
10 libsystem_pthread.dylib | _pthread_wqthread + 312
```

When my phone open airplane mode and shadowsocks is on，reachablity will return reachable to me 
mac environment, simulator ios12, when I shortdown the WIFI,  Reachability calback NotReachable.
then i connect to WIFI, Reachability cannot callback any more!
I set breakpoint in Reachability.m to monior
`static void ReachabilityCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags flags, void* info)
{
#pragma unused (target, flags)
	NSCAssert(info != NULL, @"info was NULL in ReachabilityCallback");
	NSCAssert([(__bridge NSObject*) info isKindOfClass: [Reachability class]], @"info was wrong class in ReachabilityCallback");

    Reachability* noteObject = (__bridge Reachability *)info;
    // Post a notification to notify the client that the network reachability changed.
    [[NSNotificationCenter defaultCenter] postNotificationName: kReachabilityChangedNotification object: noteObject];
}`
the bug just appears in ios12, it totally seems fine in my ios10 simulator...
Could you please explain the reason for this mismatch ?

[tonymillion/Reachability - Reachability.h](https://github.com/tonymillion/Reachability/blob/master/Reachability.h#L48)
```
typedef NS_ENUM(NSInteger, NetworkStatus) {
    // Apple NetworkStatus Compatible Names.
    NotReachable = 0,
    ReachableViaWiFi = 2,
    ReachableViaWWAN = 1
};
```

[Apple's Reachability sample code - Reachability.h](https://developer.apple.com/library/content/samplecode/Reachability/Listings/Reachability_Reachability_h.html#//apple_ref/doc/uid/DTS40007324-Reachability_Reachability_h-DontLinkElementID_8)
```
typedef enum : NSInteger {
    NotReachable = 0,
    ReachableViaWiFi,  //=1
    ReachableViaWWAN  //=2
} NetworkStatus;
```
Using Reachability via Cocoapods in swift project. Sometimes catching a crash like this:
![reachability m 2018-03-26 20-18-11](https://user-images.githubusercontent.com/2203199/37921859-a0df89a2-3133-11e8-840d-49a4f022e24d.jpg)

Cannot reproduce this crash, but I catch it on device only.
Could it happen because I call stopNotifier in instance owner deinit? 

Probably, the object has been already deallocated, but a block in `reachabilitySerialQueue` is still executed. Wouldn't it be better to pass self in `context.info` using `__bridge_retained` so no garbage will pass in the callback?
+(instancetype)reachabilityWithHostname:(NSString*)hostname
{
    SCNetworkReachabilityRef ref = SCNetworkReachabilityCreateWithName(NULL, [hostname UTF8String]);
    if (ref) 
    {
        id reachability = [[self alloc] initWithReachabilityRef:ref];

        return reachability;
    }
    
    return nil;
}
Call to function 'SCNetworkReachabilityCreateWithName' returns a Core Foundation object of type SCNetworkReachabilityRef _Nullable with a +1 retain count
Assuming 'ref' is non-
Object leaked: object allocated and stored into 'ref' is not referenced later in this execution path and has a retain count of +1

i get the above error messages when analysing my project, and have no idea if this is a serious issue or not

please advise

thanks
