Added float version of GetPickRay to allow sub pixel selection.  Have deprecated the integer version.
Hi @xoofx ,

Due to inactivity of SharpDX I've decided to start new DirectX bindings but with some standard stuff.
- I target net standard 2.0 and use mathematics from System.Numerics (Vector2, Vector3, etc).
- Use Unsafe instead of Interop patching.
- API strict to native C++ API so porting will be easy.
- Won't bind Direct3D9 probably nor Direct3D10.
- Not sure about XAudio or Multimedia framework.
- No DirectInput, DirectSound, DirectManipulation, DirectComposition or RawInput.
- Will support recent Windows 10 SDK and I plan to add raytracing support as well.
- I took some approach from SharpDX for some bindings part.

The repo is here: https://github.com/amerkoleci/SharpWindows
And here you can see some example of API usage: https://github.com/amerkoleci/SharpWindows/tree/master/src/samples/Vortice.SampleFramework

If you want you can update README with links to thoose bindings.
`Matrix3x2.ScaleVector` returns `new Vector2(M11, M22)`. This is only correct if M12 == M21 == 0. Here's an easy test:

```
var transform = Matrix3x2.Scaling(3.0f, 2.0f);
Debug.WriteLine($"Scaling: {transform.ScaleVector}");
// prints "Scaling: X:3 Y:2"
transform *= Matrix3x2.Rotation((float)(Math.PI / 2.0));
Debug.WriteLine($"Scaling: {transform.ScaleVector}");
// prints "Scaling: X:-1.311342E-07 Y:-8.742278E-08"
```

As explained in [This Mathematics Stack Exchange answer](https://math.stackexchange.com/a/2990389), there is no real answer to "What is the scale vector of this matrix?". If you ignore the fact that the scaling can be the negative version of the rotation A + 180 degrees, you can calculate scale like this:

```
var scaleX = Math.Sqrt(transform.M11 * transform.M11 + transform.M12 * transform.M12);
var scaleY = Math.Sqrt(transform.M21 * transform.M21 + transform.M22 * transform.M22);
var cosA = transform.M11 / scaleX;
var cosB = transform.M22 / scaleY;
var sinA = transform.M21 / scaleY;
var sinB = transform.M12 / scaleX;
```
At this point, scaleX and scaleY are valid only if cosA == cosB and sinA == -sinB (within tolerance).

I run [CustomFont](https://github.com/sharpdx/SharpDX-Samples/tree/master/Desktop/DirectWrite/CustomFont) sample, and I use NuGet to install SharpDx, if I install 4.0.1 version all good, but if I install 4.2 version I get the following error:

> Unexpected error. Reason : System.ObjectDisposedException: Cannot access a disposed object.
> 
> שם אובייקט: 'Cannot add a reference to a nonreferenced item'.
> 
>    ב-  SharpDX.CallbackBase.AddReference()
> 
>    ב-  SharpDX.ComObjectShadow.AddRefImpl()
> 
>    ב-  SharpDX.ComObjectShadow.ComObjectVtbl.AddRefImpl(IntPtr thisObject)
> 
>    ב-  SharpDX.Direct2D1.RenderTarget.DrawTextLayout(RawVector2 origin, TextLayout textLayout, Brush defaultFillBrush, DrawTextOptions options)
> 
>    ב-  SharpDX.Direct2D1.RenderTarget.DrawTextLayout(RawVector2 origin, TextLayout textLayout, Brush defaultForegroundBrush)
> 
>    ב-  FontsFromFolder.CustomFont.renderControl_Paint(Object sender, PaintEventArgs e) ב- K:\SharpDX-master\Samples\SharpDX-Samples-master\Desktop\DirectWrite\CustomFont\CustomFont.cs:שורה 159
> 


I have project that shows the world map but I was having issues with the memory so I have created a new empty project, currently I only have the following:

MainWindow.xaml

```
<Window x:Class="WorldMap.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"   
        xmlns:dxc="clr-namespace:SharpDX.WPF;assembly=SharpDX.WPF"
        xmlns:local="clr-namespace:WorldMap.Scenario"
        Title="World Map"        
        Height="1080" Width="1920"
        WindowStartupLocation="CenterScreen">
    <Grid Background="LightGray">
        <dxc:DXElement Grid.Column="0" x:Name="m_Dxelement">
            <dxc:DXElement.Renderer>
                <local:Scene_Map x:Name="m_Scene_Map"/>
            </dxc:DXElement.Renderer>
        </dxc:DXElement>
    </Grid>
</Window>
```

MainWindow.xaml.cs

```
using System.Windows;
namespace WorldMap
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
        }
    }
}
```

Scene_Map.cs

```
using SharpDX.WPF;
namespace WorldMap.Scenario
{
    public class Scene_Map : D3D11
    {
        public Scene_Map()
        {
        }
    }
}
```

When I execute it, the memory increases really fast (around 6MB each minute), what am I doing wrong?
I am new into SharpDX so I really appreciate any help.

Thanks in advance.
Hello, just a small change in Direct3D11.

* Fix GetUnorderedAccess view call in case no depth buffer is bound
* Add ComArray binding for CSSetUnorderedAccessViews (same as Constant buffer/SRV counterpart)

Thanks
Since `MapSubresource` returns the mapped subresource rather than taking a destination pointer, there is no way to pass `pMappedResource = NULL` to `Map`, which is required for the `ReadFromSubresource` operation.

Relevant docs:

- https://docs.microsoft.com/en-us/windows/desktop/api/d3d11/nf-d3d11-id3d11devicecontext-map#null-pointers-for-pmappedresource
- https://docs.microsoft.com/en-us/windows/desktop/api/d3d11_3/nf-d3d11_3-id3d11device3-readfromsubresource#remarks
Some MediaFoundation classes return UInt64. Example: https://docs.microsoft.com/en-us/windows/desktop/medfound/mf-mt-frame-rate-attribute

However in the autogenerated Interfaces.cs of SharpDX I could not find any GetULong() instead the GetLong() is used which casts ulong to long and therefore might cause troubles with overflows.

I am suspecting this, because the following call returns wrong framerate values in certain videos which have fractional framerates:

var mediaType = sourceReader.GetCurrentMediaType(_videoStreamIndex);
var rate = mediaType.Get(MediaTypeAttributeKeys.FrameRate); //returns  42949672960497499
I'm trying to read back a texture to CPU, so I created a staging texture. The problem is that this texture may have an arbitrary size, so I create it with something like:

`stagingTextureDesc.Width = 643;`
            `stagingTextureDesc.Height = 427;`
            `stagingTextureDesc.CpuAccessFlags = SharpDX.Direct3D11.CpuAccessFlags.Read;`
            `stagingTextureDesc.BindFlags = SharpDX.Direct3D11.BindFlags.None;`
            `stagingTextureDesc.OptionFlags = SharpDX.Direct3D11.ResourceOptionFlags.None;`
            `stagingTextureDesc.Usage = SharpDX.Direct3D11.ResourceUsage.Staging;`
            `_texIntfData.m_IntermediateStagingTexture = new SharpDX.Direct3D11.Texture2D(_texIntfData.m_IntermediateDevice, stagingTextureDesc);`
            `_texIntfData.m_IntermediateStagingShaderResourceView = new SharpDX.Direct3D11.ShaderResourceView(_texIntfData.m_IntermediateDevice, _texIntfData.m_IntermediateMipMapTexture);`

Now when I read it back later, it reports me this size, however, internally it is definitely has a width of 1024, because the data I read back (Marshal.Copy(...) is aligned to 1024 and not 643.

It does not matter if the texture is multiple of 2, 4 or 8 or an uneven number - it seems to be always the larger power of 2 in the end. The problem is, there is no way to really query the size of the texture, or am I wrong?


