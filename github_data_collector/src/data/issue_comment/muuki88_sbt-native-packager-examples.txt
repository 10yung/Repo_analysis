On the example **multi-module-build**, we are using the _'sbt universal:packageBin'_ on the root project.
Can you make a example of building each module separately (create 3 zip, one for each project) 

I want to be able to do something like: _'sbt backend/universal:packageBin'_  ?
Because i'm trying an equivalent thing on my projects and i'm getting:

```
[error] No such setting/task
[error] universal:packageBin
```

I tried simple-rpm project and it fails with error. Please advice how to fix

[error] + umask 022
[error] + cd /opt/sbt-native-packager-examples/simple-rpm/target/rpm/BUILD
[error] + '[' /opt/sbt-native-packager-examples/simple-rpm/target/rpm/buildroot '!=' / ']'
[error] + rm -rf /opt/sbt-native-packager-examples/simple-rpm/target/rpm/buildroot
[error] ++ dirname /opt/sbt-native-packager-examples/simple-rpm/target/rpm/buildroot
[error] + mkdir -p /opt/sbt-native-packager-examples/simple-rpm/target/rpm
[error] + mkdir /opt/sbt-native-packager-examples/simple-rpm/target/rpm/buildroot
[error] + LANG=C
[error] + export LANG
[error] + unset DISPLAY
[error] + '[' -e /opt/sbt-native-packager-examples/simple-rpm/target/rpm/buildroot ']'
[error] + mv /opt/sbt-native-packager-examples/simple-rpm/target/rpm/tmp-buildroot/etc /opt/sbt-native-packager-examples/simple-rpm/target/rpm/tmp-buildroot/usr /opt/sbt-native-packager-examples/simple-rpm/target/rpm/tmp-buildroot/var /opt/sbt-native-packager-examples/simple-rpm/target/rpm/buildroot
[error] + /usr/lib/rpm/check-buildroot
[error] + /usr/lib/rpm/amazon/brp-compress
[error] + /usr/lib/rpm/amazon/brp-strip /usr/bin/strip
[error] + /usr/lib/rpm/amazon/brp-strip-static-archive /usr/bin/strip
[error] + /usr/lib/rpm/amazon/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump
[error] + /usr/lib/rpm/brp-python-bytecompile
[error] + /usr/lib/rpm/amazon/brp-python-hardlink
[error] + /usr/lib/rpm/amazon/brp-python-shebang
[error] + /usr/lib/rpm/amazon/brp-java-repack-jars

I am new to `sbt-native-packager`. I see examples in `sbt-native-packager-examples` with variables using in `application.ini` file (simple-web-example). Docs says: 

> This  file currently doesnâ€™t has any variable substitution. We recommend using the build.sbt if you need any information from your build.  [docs](http://www.scala-sbt.org/sbt-native-packager/archetypes/java_app/customize.html)

I've tried to use application.ini with variables and it doesn't work variables are not substituted.  

These examples helped me a lot with working out how to setup a multi project build. I was missing the dependsOn on the root project which makes a big difference.

However there is one thing that I was hoping this example would include which is: how to exclude the artifact from the root project?

In `multi-module-build` if I run `universal:packageBin` and look in the lib folder within the ZIP there is still that pesky `de.mukis.mukis-fullstack-1.0.jar` which has nothing but a MANIFEST.
