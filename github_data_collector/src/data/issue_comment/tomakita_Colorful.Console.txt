I am attempting to publish my .net core 3.1 application single file including Colorful.Console and it is causing "Detecting package downgrade errors". This should be due to Colorful.Console not supporting certain newer libraries like System.Runtime.InteropServices v4.3. I have attached a copy paste from a publish command

`C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605: Detected package downgrade: System.Runtime.InteropServices from 4.3.0 to 4.1.0. Reference the package directly from the project to select a different version. C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605:  ProtocolBase -> Colorful.Console 1.2.9 -> System.Console 4.0.0 -> runtime.win.System.Console 4.3.0 -> System.Runtime.InteropServices (>= 4.3.0)               C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605:  ProtocolBase -> Colorful.Console 1.2.9 -> System.Runtime.InteropServices (>= 4.1.0)                                                                           C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605: Detected package downgrade: System.Collections from 4.3.0 to 4.0.11. Reference the package directly from the project to select a different version.            C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605:  ProtocolBase -> Colorful.Console 1.2.9 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.Collections (>= 4.3.0)               C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605:  ProtocolBase -> Colorful.Console 1.2.9 -> System.Collections (>= 4.0.11)                                                                                      C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605: Detected package downgrade: System.Diagnostics.Debug from 4.3.0 to 4.0.11. Reference the package directly from the project to select a different version.      C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605:  ProtocolBase -> Colorful.Console 1.2.9 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.Diagnostics.Debug (>= 4.3.0)         C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605:  ProtocolBase -> Colorful.Console 1.2.9 -> System.Diagnostics.Debug (>= 4.0.11)                                                                                C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605: Detected package downgrade: System.Runtime.Handles from 4.3.0 to 4.0.1. Reference the package directly from the project to select a different version.         C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605:  ProtocolBase -> Colorful.Console 1.2.9 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.Runtime.Handles (>= 4.3.0)           C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605:  ProtocolBase -> Colorful.Console 1.2.9 -> System.IO.FileSystem 4.0.1 -> System.Runtime.Handles (>= 4.0.1)                                                     C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605: Detected package downgrade: System.Runtime.InteropServices from 4.3.0 to 4.1.0. Reference the package directly from the project to select a different version. C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605:  ProtocolBase -> Colorful.Console 1.2.9 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.Runtime.InteropServices (>= 4.3.0)   C:\Users\siriu\source\repos\itemcoin-desktop\ProtocolBase.csproj : error NU1605:  ProtocolBase -> Colorful.Console 1.2.9 -> System.Runtime.InteropServices (>= 4.1.0) `
Hello! I was wondering if you can add support for ConsoleColor to have a list of more default options.

Like, is it just me or is ConsoleColor.Blue different from Color.Blue?

There are so many blue options, and this one I choose one type of blue in one project and use another in another? The patterns of these projects will be lost.
It seems that from Win10 TH2 onwards, the console supports escape sequences (which could be used for formatting):
- https://stackoverflow.com/a/35864976/3902603
- https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences?redirectedfrom=MSDN
- https://docs.microsoft.com/en-us/windows/console/setconsolemode

Could this maybe be the solution for the future without having to rely on color palettes?
Where in the source code would you suggest I update so the Console.Write method does not emit a carriage return.

```
FigletFont font = FigletFont.Load(Path.Combine(Environment.CurrentDirectory, @"FigletFonts\big.flf"));
  Figlet big = new Figlet(font);

  font = FigletFont.Load(Path.Combine(Environment.CurrentDirectory, @"FigletFonts\small.flf"));
  Figlet small = new Figlet(font);

  Console.Write(big.ToAscii("T"), ColorTranslator.FromHtml("#8AFFEF"));
  Console.Write(small.ToAscii("imothy"), ColorTranslator.FromHtml("#8AFFEF"));
```


**emits**

T
imothy

**instead of**
Timothy
Just doing `Console.ForegroundColor = Color.<any_color_here>` will reset the console window to default size.

EDIT: Happens with `Console.Write(obj, color)`
I have the following code in .net core (version 2.2) console application, including examples provided in main page:

```
using Console = Colorful.Console;

...

static void Main(string[] args)
{
  string[] storyFragments = new[] { "test123", "asdasdasdasdasd" };
  int r = 225;
  int g = 255;
  int b = 250;
  for (int i = 0; i < storyFragments.Length; i++)
  {
	Console.WriteLine(storyFragments[i], Color.FromArgb(r, g, b));

	r -= 18;
	b -= 9;
  } // no colorful here, all are white

  List<char> chars = new List<char>()
  {
	'r', 'e', 'x', 's', 'z', 'q', 'j', 'w', 't', 'a', 'b', 'c', 'l', 'm',
	'r', 'e', 'x', 's', 'z', 'q', 'j', 'w', 't', 'a', 'b', 'c', 'l', 'm',
	'r', 'e', 'x', 's', 'z', 'q', 'j', 'w', 't', 'a', 'b', 'c', 'l', 'm',
	'r', 'e', 'x', 's', 'z', 'q', 'j', 'w', 't', 'a', 'b', 'c', 'l', 'm'
  };

  Console.WriteWithGradient(chars, Color.Yellow, Color.Fuchsia, 14); // latest colors are not supported and they are white
  Console.WriteLine();

  Console.WriteLine("test #0E72CA", FromHex("#0E72CA")); //this must be blue
  Console.Read();

}

static Color FromHex(string color)
{
  int argb = Int32.Parse(color.Replace("#", ""), NumberStyles.HexNumber);
  return Color.FromArgb(argb);
}
```

How it looks like:

![image](https://user-images.githubusercontent.com/6311947/65576384-857bd480-df7a-11e9-8ad5-cf11c0648711.png)


Seems that final result is not same with you provided ... What I missed ?
I guess this is something to do with the max 16 colours supported by Windows (although I heard they upped it to 256 in Win10 Anniversary edition), but when I use the example code (or any of my own) that uses ``Console.WriteLineWithGradient``, the console colours don't revert back to default after. I can do ``Console.ReplaceAllColorsWithDefaults()`` after but it ruins the gradient effect.
Here is the result from this code
```csharp
List<int> ints = new List<int>()
{
    7,
    70,
    700,
    7000,
    70000,
    700000,
    7000000,
    -7000000,
    -700000,
    -70000,
    -7000,
    -700,
    -70,
    -7
};
Console.WriteLineWithGradient(ints.OrderBy(x => x).ToList(), Color.MediumSpringGreen, Color.BlueViolet, 14);
//Console.ReplaceAllColorsWithDefaults();
Console.WriteLine("why is this a weird colour?");
```
![image](https://user-images.githubusercontent.com/32690103/64885620-8482a300-d65c-11e9-8861-826b3c980fd7.png)
My ``"why is this a weird colour?"`` print should be in the LightGray colour, should it not?
If I uncomment the ``Console.ReplaceAllColorsWithDefaults();`` then run the code again, I get this output
![image](https://user-images.githubusercontent.com/32690103/64885716-b6940500-d65c-11e9-8f61-227f6aa95a2c.png)
which prints the correct colour for ``"why is this a weird colour?"`` but it ruins the gradient.

I can fix this by commenting the ``Console.ReplaceAllColorsWithDefaults();`` line and then on all future ``WriteLine``s after the gradient I have to add ``Color.LightGray`` or else it prints in the wrong colour for the rest of program execution, is there any solution to this? Or is it something I am doing wrong?
When making Console.Error calls, the console is not colored.

ie `Console.Error.WriteLine("An Error Has Occurred", Color.Red)` is the default color scheme. but  `Console.WriteLine("An Error Has Occurred", Color.Red)` is red.
```cs
using System.Drawing;
using Console = Colorful.Console;

 internal class Program
    {
        /// <summary>
        /// Defines the entry point of the application.
        /// </summary>
        /// <param name="args">The arguments.</param>
        private static void Main(string[] args)
        {
            if (!EnableConsoleColors())
                return;
     
          Console.WriteLine("Test", Color.Red);
          Console.WriteLine("\u001b[31mHello World!\u001b[0m");
        }

        #region "Interoperability"

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool SetConsoleMode(IntPtr hConsoleHandle, int mode);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool GetConsoleMode(IntPtr handle, out int mode);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr GetStdHandle(int handle);

        public static bool EnableConsoleColors()
        {
            var handle = GetStdHandle(-11);
            int mode;
            return GetConsoleMode(handle, out mode) &&
                SetConsoleMode(handle, mode | 0x4);
        }

        #endregion "Interoperability"
}
```


This makes the `Color.Red` to extend to the entire output.

Any workaround?
So I'm using AllocConsole in my C# WPF application and did this:
`Console.WriteLine("Results have finished. Review any warnings or errors you are getting above to make sure running the process works well.", Color.Yellow);`

Though, it's still in the standard color. Any help with this?