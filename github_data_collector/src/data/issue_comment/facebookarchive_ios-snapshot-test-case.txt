Hello.

I am testing FBSnapshot for adjusting our project.
I found an issue about setting `Edit Scheme` on Xcode9.

When I set the path with `$(PROJECT_NAME)`, the testing is always fail without creating recording images.
```
/Users/gibong.kim.ts/Downloads/RxSwiftSignup/RxSwiftSignupTests/UITest.swift:28: error: -[RxSwiftSignupTests.UITest testExample] : failed - Test ran in record mode. Reference image is now saved. Disable record mode to perform an actual snapshot comparison!
deinit SignUpViewController
```

So I've set paths without `$(PROJECT_NAME)`. It is working well.
I don't understand why it is not working.

I think it is better to check this issue or modify about setting path of `Edit Scheme` in [README.md](https://github.com/facebookarchive/ios-snapshot-test-case/blob/master/README.md) file.

Hi,
I am trying to update carthage using "carthage update --platform iOS" . It works well for sometime until it reaches to clone "*** Cloning ios-snapshot-test-case". At this point , carthage hangs and no response. don't know why it always sticks at ios-snapshot-test-case.

Carthage version which i am using is 0.11.0
Is there anyways to test snapshot against multiple device and iOS version?

I want to snap view controller on multiple dimensions.
Running the same test in the same version of Xcode (8E3004b) and same version of Simulator (10.3.1) on two different machines can produce slightly different images (e.g. certain views being 1px taller).

This causes our snapshot tests to fail. Do you have insight why this could be happening and if there are recommendations on how to work around this?
Hey, just tried to add this to my project but noticed that all the tests produced square reference images of size 1200x1200. After a long couple hours trying to figure out and comparing to test projects, I noticed that the deployment target was the issue. 

Raising the deployment target of the project to iOS 9.1, would solve this, but that’s not possible yet.
Raising the test target’s deployment has no effect.

Here’s an example project I created: https://github.com/pahnev/SnapshotTestProject

As you can see the reference image is 1800x1800, even though it should be from iPhone7plus
https://github.com/pahnev/SnapshotTestProject/blob/master/SnapshotTestTests/ReferenceImages_64/SnapshotTestTests.SnapshotTestTests/testSnapshot_iPhone10_3_1_414x736%403x.png
In our testing, host applications are not a hard requirement for snapshot tests. @bgerstle added this in #137. Would you object to me changing this code to not raise an exception?

In our setup, we have thousands of snapshot tests without host applications. But we cannot use `deviceAgnostic` to have OS–specific snapshot file names because `fb_strictKeyWindow` raises an exception if there is no key window.

From what I can tell, this window is used only to get the bounds to use in the file name. But when it is removed, the bounds used for the file name is `0x0`.

Alternatively instead of removing the exception we can split `deviceAgnostic` into `deviceAgnostic` and `osAgnostic`, which would allow for leaving the exception since it might make sense to have non–zero sizes in those file names while still having the OS version in the path without the exception.
my test is to capture screen during Animation screens using ``FBSnapshotVerifyView(currentVC.view, identifier: "\(element)") ``
Animation screens are having three screens using single view but last one not able to hit using any identifier
Hi there,

I wanted to run snapshot test cases on a simple new project created with Xcode 9 beta 3. 

The project includes both `XCTestCase` test cases and `FBSnapshotTestCase` test cases. The problem is that when I run all the tests of the test target, only the `XCTestCase` test cases are ran (a bug very similar to #229). The only project setting I changed after I created, aside from adding the `FBSnapshotTestCase` dependency as a pod, was setting the deployment target to 9.0 

Here is my test suite : 

```
import XCTest
@testable import SnapshotTest

class SnapshotTestTests: XCTestCase {
    
    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }
    
    func testExample() {
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }
    
    func testPerformanceExample() {
        // This is an example of a performance test case.
        self.measure {
            // Put the code you want to measure the time of here.
        }
    }
    
}

import FBSnapshotTestCase

class FBSnapshotTestCaseSwiftTest: FBSnapshotTestCase {
    override func setUp() {
        super.setUp()
        recordMode = false
    }
    
    func testExample() {
        let view = UIView(frame: CGRect(x: 0, y: 0, width: 64, height: 64))
        view.backgroundColor = UIColor.blue
        FBSnapshotVerifyView(view)
        FBSnapshotVerifyLayer(view.layer)
    }
}
```

and below are the test execution logs :

```
Test Suite 'All tests' started at 2017-07-18 22:06:24.584
Test Suite 'FBSnapshotTestCase.framework' started at 2017-07-18 22:06:24.586
Test Suite 'FBSnapshotTestCase.framework' passed at 2017-07-18 22:06:24.586.
	 Executed 0 tests, with 0 failures (0 unexpected) in 0.000 (0.001) seconds
Test Suite 'SnapshotTestTests.xctest' started at 2017-07-18 22:06:24.587
Test Suite 'SnapshotTestTests' started at 2017-07-18 22:06:24.587
Test Case '-[SnapshotTestTests.SnapshotTestTests testExample]' started.
Test Case '-[SnapshotTestTests.SnapshotTestTests testExample]' passed (0.001 seconds).
Test Case '-[SnapshotTestTests.SnapshotTestTests testPerformanceExample]' started.
/Users/robsonrazafindramary/projects/SnapshotTest/SnapshotTestTests/SnapshotTestTests.swift:33: Test Case '-[SnapshotTestTests.SnapshotTestTests testPerformanceExample]' measured [Time, seconds] average: 0.000, relative standard deviation: 163.118%, values: [0.000004, 0.000001, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000], performanceMetricID:com.apple.XCTPerformanceMetric_WallClockTime, baselineName: "", baselineAverage: , maxPercentRegression: 10.000%, maxPercentRelativeStandardDeviation: 10.000%, maxRegression: 0.100, maxStandardDeviation: 0.100
Test Case '-[SnapshotTestTests.SnapshotTestTests testPerformanceExample]' passed (0.257 seconds).
Test Suite 'SnapshotTestTests' passed at 2017-07-18 22:06:24.848.
	 Executed 2 tests, with 0 failures (0 unexpected) in 0.258 (0.260) seconds
Test Suite 'SnapshotTestTests.xctest' passed at 2017-07-18 22:06:24.849.
	 Executed 2 tests, with 0 failures (0 unexpected) in 0.258 (0.262) seconds
Test Suite 'All tests' passed at 2017-07-18 22:06:24.849.
	 Executed 2 tests, with 0 failures (0 unexpected) in 0.258 (0.265) seconds


Test session log:
	/var/folders/mk/23vxwvgs54x4vd34p400q4kc0000gq/T/com.apple.dt.XCTest/IDETestRunSession-F1D1A1C0-60B5-4DCB-8AE1-6D581FB8319B/SnapshotTestTests-E599428C-6562-42FB-ACFF-D5A30C902227/Session-SnapshotTestTests-2017-07-18_220623-UqyHEr.log

Program ended with exit code: 0
```

The problem seems to be xcode 9 specific. I tried reproducing the same error by creating another project on XCode 8.3.3 and the snapshot test cases ran fine.

The version of cocoapods I used was 1.2.1. You can find an zip of the project [here](https://github.com/facebook/ios-snapshot-test-case/files/1157863/SnapshotTests.zip)

That's it, let me know if you have any questions !

Thanks.
At the moment the framework renders test images in the device-specific resolution (dpi / context scale).

```
// the scale factor is set to the scale factor of the device’s main screen
UIGraphicsBeginImageContextWithOptions(bounds.size, NO, 0);
```

To allow snapshot-tests to run on both 2x and 3x devices we record and store snapshots for both 2x and 3x devices. This takes time and loads the repository with snapshots identical up to dpi.

I wonder whether the framework will work correctly with a fixed context scale (e.g. 2x)? Are there any pitfalls and/or performance issues?

I appreciate any comments regarding the question.
I know in the Realm UI and Snapshot Testing [Video](https://news.realm.io/news/cmdu-conf-luis-ascorbe-ui-and-snapshottesting/) Luis mentioned that we can test views across devices (iPhone5 vs iPhone 6+ etc).

I want to know which device I am running on within simulator, but when I print out the model name
```
let modelName = UIDevice.current.modelName
```
It would just say I am running in Simulator.

I was following this Stack Overflow post [How to determine the device running in the simulator?
](https://stackoverflow.com/questions/26044221/how-to-determine-the-device-running-in-the-simulator) but using FBSnapshotTestCase is not necessarily related to "functionalities available".  Has anyone ran into a similar problem?