- [x] I have read CONTRIBUTING.rst

- [x] I have tried with the latest pre-release version and I still can reproduce the issue.

##### Tribler version/branch+revision: #####
`devel`
##### Expected behavior: #####
Use the index value from `enumerate` or directly iterate the object.
##### Actual behavior: #####
Use of `enumerate` without using the `index` value.
```python
async def load_checkpoints(self):
    for i, filename in enumerate(self.get_checkpoint_dir().glob('*.conf')):
        self.load_checkpoint(filename)
        await sleep(.01)
```

https://github.com/Tribler/tribler/blob/devel/src/tribler-core/tribler_core/modules/libtorrent/libtorrent_mgr.py#L730
It seems that anonymous downloads are not working on `devel`. To test this, I setup a few tunnel helpers on our testing machine that run the latest commit on the `devel` branch. I use the `run_tunnel_helper.py` script to deploy a few exit nodes, just for testing.

However, when running Tribler (again, latest commit on `devel` and running it with the `--testnet` flag), there is no download progress when starting a download. Re-adding the download also does not address the issue. The file downloads correctly, however, when not running Tribler with testnet.

So I guess that problem is somewhere in our exit nodes that are now using `asyncio`?
Fixes #5057, fixes #5058
I just updated our tunnel infrastructure and I observe the following error when trying to perform anonymous downloading:

```
Jan 17 19:51:38 prxmx3 python3[5915]: Traceback (most recent call last):
Jan 17 19:51:38 prxmx3 python3[5915]:   File "/opt/tribler/src/pyipv8/ipv8/community.py", line 324, in on_packet
Jan 17 19:51:38 prxmx3 python3[5915]:     result = handler(source_address, data)
Jan 17 19:51:38 prxmx3 python3[5915]:   File "/opt/tribler/src/pyipv8/ipv8/lazy_community.py", line 39, in wrapper
Jan 17 19:51:38 prxmx3 python3[5915]:     return func(self, Peer(auth.public_key_bin, source_address), *unpacked)
Jan 17 19:51:38 prxmx3 python3[5915]:   File "/opt/tribler/src/pyipv8/ipv8/messaging/anonymization/community.py", line 927, in on_destroy
Jan 17 19:51:38 prxmx3 python3[5915]:     self.remove_exit_socket(circuit_id, "Got destroy")
Jan 17 19:51:38 prxmx3 python3[5915]:   File "/opt/tribler/src/tribler-core/tribler_core/modules/tunnel/community/triblertunnel_community.py", line 428, in remove_exit_socket
Jan 17 19:51:38 prxmx3 python3[5915]:     self.tribler_session.notifier.notify(NTFY.TUNNEL_REMOVE, exit_socket, additional_info)
Jan 17 19:51:38 prxmx3 python3[5915]:   File "/opt/tribler/src/tribler-core/tribler_core/notifier.py", line 28, in notify
Jan 17 19:51:38 prxmx3 python3[5915]:     callback(*args)
Jan 17 19:51:38 prxmx3 python3[5915]: TypeError: circuit_removed() missing 2 required positional arguments: 'circuit' and 'additional_info'
```

The only nodes deployed are on testnet and controlled by me. They run the latest commit on `devel`.

This seems to be some kind of error in the notifier?
When running the tunnel helper script on our infrastructure (latest `devel` commit), I get the following error:

```
Jan 17 17:17:37 prxmx3 python3[28437]: Traceback (most recent call last):
Jan 17 17:17:37 prxmx3 python3[28437]:   File "src/tribler-core/run_tribler_headless.py", line 16, in <module>
Jan 17 17:17:37 prxmx3 python3[28437]:     from tribler_core.session import Session
Jan 17 17:17:37 prxmx3 python3[28437]:   File "/opt/tribler/src/tribler-core/tribler_core/session.py", line 47, in <module>
Jan 17 17:17:37 prxmx3 python3[28437]:     from tribler_core.modules.metadata_store.gigachannel_manager import GigaChannelManager
Jan 17 17:17:37 prxmx3 python3[28437]:   File "/opt/tribler/src/tribler-core/tribler_core/modules/metadata_store/gigachannel_manager.py", line 4, in <module>
Jan 17 17:17:37 prxmx3 python3[28437]:     from ipv8.taskmanager import TaskManager, task
Jan 17 17:17:37 prxmx3 python3[28437]: ImportError: cannot import name 'task' from 'ipv8.taskmanager' (/opt/tribler/src/anydex/anydex/../pyipv8/ipv8/taskmanager.py)
```

Most likely, the IPv8 of AnyDex gets prioritised over the one that Tribler provides.
Adds breadcrumbs for navigation and fixes some bugs.
With the introduction of the new directory structure, logging was broken. To fix that, I refactored the way logging is set up and also changed the logger config file to YAML format for better readability.

**How logging set up works now?**
Each tribler module (eg. tribler-core, tribler-gui) now includes a method `load_logger_config()`  in `__init__.py` which specifically loads the logging configuration for that module. This allows each module to have its own independent configuration. See `logger.conf` in both `tribler-core` and `tribler-gui` modules. There is also a sample configuration file in `tribler-common` module explaining the logger file itself.

After defining the appropriate `logger.conf` in the module, it can be enabled by simply calling `<tribler-module>.load_logger_config()` from the main execution file. See an example in `run_tribler.py` file.

**YAML dependency**
```
pip3 install pyyaml
```
[Fuzzing](https://en.wikipedia.org/wiki/Fuzzing) is the most efficient method of testing complex GUIs. However, implementing one can be a tricky task, especially in the case of desktop applications that are written in more than one language and splitted into several parts (hello, Tribler, I'm looking at you!).

To implement fuzzing in Tribler, we'll need:
 * [a framework for Qt scripting](https://github.com/linotex/quelenium), or [a bridge](https://github.com/cisco-open-source/qtwebdriver) to [a popular GUI testing platform](https://en.wikipedia.org/wiki/Selenium_(software)).
 * a way to automatically build an FSM for the GUI.
 * a [library](https://en.wikipedia.org/wiki/American_fuzzy_lop_(fuzzer)) to fuzz and explore the GUI FSM.

Good read on the topic:
https://www.fuzzingbook.org/html/GUIFuzzer.html#
devel, bcf03e0ea696ce0c704426a5b4120bc5c675d6de
Arch, python 3.8.1

Install dependencies for Arch, create venv, activate, install dependencies for ipv8, install dependencies via pip, try to start tribler with `env PYTHONPATH=src/tribler-core:src/tribler-gui:src/tribler-common:src/anydex:src/pyipv8 python3 src/run_tribler.py`.
```
Traceback (most recent call last):
  File "/home/bram/git/tribler/src/tribler-core/tribler_core/dependencies.py", line 40, in _show_system_popup
    import win32api
ModuleNotFoundError: No module named 'win32api'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "src/run_tribler.py", line 101, in <module>
    check_for_missing_dependencies(scope='both')
  File "/home/bram/git/tribler/src/tribler-core/tribler_core/dependencies.py", line 71, in check_for_missing_dependencies
    _show_system_popup("Dependencies missing!",
  File "/home/bram/git/tribler/src/tribler-core/tribler_core/dependencies.py", line 44, in _show_system_popup
    subprocess.Popen(['xmessage', '-center', text], shell=False)
  File "/usr/lib/python3.8/subprocess.py", line 854, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/lib/python3.8/subprocess.py", line 1702, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'xmessage'
```
- [x] I have read CONTRIBUTING.rst

- [x] I have tried with the latest pre-release version and I still can reproduce the issue.
Of course!
##### Tribler version/branch+revision: #####
7.4.0. Noodle
##### Operating system and version: #####
Windows 10 inside 19041
##### Steps to reproduce the behavior: #####
Upgrade from 7.4.0. to noodle
##### Expected behavior: #####
Import previous Library
##### Actual behavior: #####
Library is empty
##### Relevant log file output: #####
