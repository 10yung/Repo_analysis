Tests failed on rails 5.2.1:
```
Failures:
  1) Versionist::CopyApiVersionGenerator v1 => V1 api version exists test_framework: test_unit should copy old controller tests to new controller tests
     Failure/Error:
       parser.enumerator.first.traverse do |node|
         existing_routes = node.source if node.type == :fcall && node.source =~ /api_version.*:?module\s*(=>|:)\s*("|')#{module_name_for_route(old_module_name)}("|')/
       end
     
     NoMethodError:
       undefined method `enumerator' for true:TrueClass
       Did you mean?  enum_for
     # ./lib/generators/versionist/copy_api_version/copy_api_version_generator.rb:25:in `block in copy_routes'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/actions.rb:198:in `block in in_root'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/actions.rb:188:in `block in inside'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/actions.rb:188:in `inside'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/actions.rb:198:in `in_root'
     # ./lib/generators/versionist/copy_api_version/copy_api_version_generator.rb:18:in `copy_routes'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/command.rb:27:in `run'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/invocation.rb:126:in `invoke_command'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/invocation.rb:133:in `block in invoke_all'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/invocation.rb:133:in `each'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/invocation.rb:133:in `map'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/invocation.rb:133:in `invoke_all'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/group.rb:232:in `dispatch'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/thor-0.20.3/lib/thor/base.rb:466:in `start'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/railties-5.2.1/lib/rails/generators/testing/behaviour.rb:70:in `block in run_generator'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/activesupport-5.2.1/lib/active_support/testing/stream.rb:33:in `capture'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/railties-5.2.1/lib/rails/generators/testing/behaviour.rb:68:in `run_generator'
     # /home/travis/.rvm/gems/ruby-2.4.1/gems/generator_spec-0.9.4/lib/generator_spec/test_case.rb:37:in `method_missing'
     # ./spec/generators/copy_api_version_generator_spec.rb:271:in `block (6 levels) in <top (required)>'

```

Full log:
 https://travis-ci.org/alee-ccu/versionist/jobs/458655944
Hi, I am trying to use the http header to specify the version.


## version 11 and version 1 are the same

``` ruby
MyApi::Application.routes.draw do
  api_version(:module => "V1", :header => {:name => "Accept", :value => "application/vnd.mycompany.com; version=1"}) do
    match '/foos.(:format)' => 'foos#index', :via => :get
    match '/foos_no_format' => 'foos#index', :via => :get
    resources :bars
  end
end
```

I am following the example and find out if I have a header named "application/vnd.mycompany.com; version=11", the application will still return 200 instead of 404 since I specify a higher version.

## 

``` ruby
MyApi::Application.routes.draw do
  api_version(:module => "V20120317", :header => {:name => "API-VERSION", :value => "1"}, :default => true) do
    match '/foos.(:format)' => 'foos#index', :via => :get
    match '/foos_no_format' => 'foos#index', :via => :get
    resources :bars
  end
end
```
With this example, I specifiy "1" as the defaulth version. If I have a invalid header like "API-VERSION: 9" which is not supported yet, but the application is still going to return 200 which I guess it will use the default version. Should this return 404 since we specify an unsupported version?

My use case is like below:

```
controllers/
    v1/
        stores/
            some_store_controller.rb
        users/
            some_user_controller.rb
```

I use the generator to do this like: 

rails g versionist:new_controller stores/registrations V1

But it will not count that stores as a module. Is it possible to support this use case? Or there is other better way to organize the structure? Thanks. 

It would be nice if it generates the same structure of controllers inside serializers folder when we also use active_model_serializers gem. 

Its working with the rails 4.0.2 app except `:default => true` options.

In the README, there is an expected behaviour Policy that says the routes get output twice when running rake. In 4.0.2 rails, it errors out with:

```
/Users/millisami/asset-management/.bundle/gems/actionpack-4.0.2/lib/action_dispatch/routing/route_set.rb:434:in `add_route': Invalid route name, already in use: 'api_gps_positions'  (ArgumentError)
You may have defined two routes with the same name using the `:as` option, or you may be overriding a route already defined by a resource with the same naming. For the latter, you can restrict the routes created with `resources` as explained here:
http://guides.rubyonrails.org/routing.html#restricting-the-routes-created
  from /Users/millisami/asset-management/.bundle/gems/actionpack-4.0.2/lib/action_dispatch/routing/mapper.rb:1445:in `add_route'
```

Is there any patch to make the `default` option true?

I'm just wondering why this is the case and whether the generator should even be creating the controller spec?

Would it be possible to have an option allowing a route to have an alias for one or more api_version values possible.

For example.
My API has a version 0.1.1, 0.1.2 and 0.1.3. And I would like that when I called version 0.1, it puts me in the scope of version 0.1.3.

``` ruby
  api_version(:module => "V0__1__1", :header => "API-VERSION", :value => "v0.1.1") do
    ...
  end

  api_version(:module => "V0__1__2", :header => "API-VERSION", :value => "v0.1.2") do
    ...
  end

  api_version(:module => "V0__1__3", :header => "API-VERSION", :values => ["v0.1.3", "v0.1"]) do
    ...
  end
```
