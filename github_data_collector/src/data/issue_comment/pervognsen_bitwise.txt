Hi author,

I subscribed your youtube channel, and this repository. However, I haven't seen any activities on this project since last 4 months. 

Can you let me know: will you continue on this project? 
The ion/ionvcproj.py script wasn't working for me.  I made changes to the pre-build event which allow me to build and debug my ion code.  The only thing I have to do now after running this script is 'retarget solution'.

You can see I added packagepathparent and ioncmd to the substitution variables.  ioncmd assumes that the ion executable is named 'ion'.  
```xml
    <PreBuildEvent>
      <Command>
        set IONHOME=$ionhome
        cd $packagepathparent 
        $ioncmd $flags $package
      </Command>
    </PreBuildEvent>
```

I believe my issues with the script were related to the VS terminal not picking up my IONHOME and also my perhaps nonstandard ion setup where I have an ion.bat in my path which points to %IONHOME%/ion.exe .  This solution navigates instead to the directory above packagepath (rather than ionhome) and uses an absolute path to ion (ioncmd).  
I started reading rattle.py and noticed a couple of apparent mistakes. I'm still getting acquainted with the code, and I'm using Python 3.5 which won't run all of rattle, so take this with a grain of salt.
Merge branch 'add-enum-typeinfos'

This introduces type information for enum types.

The ion program can now know that a type is an enum, and what is its base
type and size as well as the values of available constants in the enum
(see enum_items and num_enum_items)

This allows user programs to print the friendly enumeration constant
associated with a value, or validate that a value is a legal one.

The name of the constant is the external C name, i.e. as mangled into
the C symbols, similarly to how type names are also introspected. This
guarantees unicity, however means that a ion program looking to generate
new ion programs would have to reverse the manging somehow. The same issue
is true for existing type names however.

Note that this creates a distinction between enum constants and plain
constants: enum constants are known to the program and can be shared
outside. This matches my experience of using enumerations in applications.

Initially I wanted to supply sorted arrays for an enumeration type by 
ame and value, to make lookups more efficient. However to do this at
compile time would necessitate the ion compiler to evaluate the enum
expression. Right now the value of the expression is only known to the ion program
(after the C compiler has done its job)

So fast lookups (sub-O(n)) for large enumerations will have to be done by hand in
the ion program using raw type infos for now.


```ion
struct A
{
  b: B;
}
// says Unresolved type name 'B'
#static_assert(sizeof(A) == 4)

struct B
{
  data: int32;
}
```

The workaround is to rearrange declarations so that B is defined before A.
 

With the following:

```
struct FooArray
{
    x : int[3];
}

struct FooWithConstArray
{
    array : FooArray const*;
}


func test_const_members() {
    foo := FooWithConstArray{};
    #assert(foo.array.x[0] == 0);
}
```

Then when TypeInfo gets written, ion generates:
```
    [53] = &(TypeInfo){TYPE_CONST, .size = sizeof(int (const [3])), .align = alignof(int (const [3])), .base = TYPEID(50, TYPE_ARRAY, int [3])},
```
the `int (const [3])` is not parsed as a valid type expression

Somehow the type entry seems invalid to me, as all arrays in C are const. So the type info should probably not be generated at all (TYPE_CONST with base TYPE_ARRAY)

`type_to_cdecl` could be instrumented to assert that a TYPE_CONST should not be an array




See repro at: https://github.com/uucidl/bitwise/commit/a96b0369f8fe062953906e1a3471a73bb910d582

```sh
ion -os osx -arch x64 bugs && \
  cc out_bugs.c -o bugs.elf && \
  ./bugs.elf ; echo "rc:$?"
```

Expected:
```
Processed 101 symbols in 2 packages
Generated out_bugs.c
rc:42
```

Got:
```
Processed 101 symbols in 2 packages
Generated out_bugs.c
<foo>/Desktop/bitwise/ion/bugs/size_bug.ion:10:25: warning:
      incompatible pointer types passing 'ullong *' (aka 'unsigned long long *')
      to parameter of type 'size_t *' (aka 'unsigned long *')
      [-Wincompatible-pointer-types]
    fetch_value(&(num), &(num_size));
                        ^~~~~~~~~~~
<foo>/Desktop/bitwise/ion/bugs/size_bug.h:3:41: note: passing argument
      to parameter 'dest_size_ptr' here
int fetch_value(void* dest_ptr, size_t* dest_size_ptr);
                                        ^
1 warning generated.
rc:42
```

I would have expected C apis expressed in terms of size_t to be
exposed in ion via usize. It appears that on Macos at least:

```sh
cc -E out_bugs.c | grep -E '(typedef.* uint64_t;|typedef.* size_t;)'
```

```C
typedef unsigned long long uint64_t;
typedef long unsigned int size_t;
```

Since usize is defined as uint64, we see that these types differ.

https://github.com/pervognsen/bitwise/issues/24#issuecomment-394119274

I'm currently a bit behind your schedule so I might have missed some information, but are there news about

- defer statement
- no `;` needed
- formatter
- C output/ C single header output
- completion plugins/ output
- renaming
.. being added to ion?

thanks