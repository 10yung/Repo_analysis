**Describe the bug**

I've upgraded my project to lvgl 6.1.1 and observed that #230 is happening again: A text area in an invisible container causes periodic calls to the driver's flush_cb due to the blinking cursor.

**To Reproduce**

See in the discussion of #230

**Expected behavior**

Text areas in invisible containers don't cause screen updates.

**Screenshots**
Not applicable.

**Additional context**
I believe the problem is that `cursor_blink_anim` calls `lv_inv_area` nowadays. It used to call `lv_obj_invalidate` in older versions and that function checked if the object is visible before invalidating the area.

Good Day, 

When I used "lv_btnm_get_active_btn_text" in the code as in the example https://docs.littlevgl.com/en/html/object-types/btnm.html
The esp32 would crash if you drag your finger across multiple buttons. What happens is the output string starts to concatenate and go outside the array limits if specified and the esp trow a load prohibited error. To fix this I had to use:

```c
static void event_handler(lv_obj_t * obj, lv_event_t event)
{
    if(event == LV_EVENT_VALUE_CHANGED) {
        uint16_t keypress = lv_btnm_get_active_btn(obj);
        if(keypress < 15){ //Remove any outide values due to screen drag causing value to jump to65K
        printf("%s was pressed\n", lv_btnm_get_btn_text(obj,keypress););
        }
    }
}
```
hopes this helps anyone that may also have this problem
Hi, I'm using micropython porting for ESP32 with ili9341, XPT2046.

**Describe the bug**

After few touches on a text area, system crash

**To Reproduce**
Here's the code, taken from sample on https://docs.littlevgl.com/en/html/object-types/ta.html:
```python
import lvgl as lv
from ili9341 import ili9341
disp = ili9341(miso=19, mosi=23, clk=18, cs=5, dc=4, rst=22, power=14, backlight=15, mhz=40, factor=4,
               height=240, width=320,rot=ili9341.LANDSCAPE, hybrid=True)
import xpt2046
touch = xpt2046.xpt2046(cs=14,transpose = False,cal_y1 = 3808, cal_x1 = 3664, cal_y0 = 336, cal_x0 = 256)

def event_handler(obj, event):
    print(event)
    if event == lv.EVENT.VALUE_CHANGED:
        print("Value: %s" % obj.get_text())
    elif event == lv.EVENT.LONG_PRESSED_REPEAT:
        # For simple test: Long press the Text are to add the text below
        ta1.add_text("\n\nYou can scroll it if the text is long enough.\n")

ta1 = lv.ta(lv.scr_act())
ta1.set_size(200, 100)
ta1.align(None, lv.ALIGN.CENTER, 0, 0)
ta1.set_cursor_type(lv.CURSOR.BLOCK)
ta1.set_text("A text in a Text Area")     # Set an initial text
ta1.set_event_cb(event_handler)
```

**Expected behavior**
//

**Screenshots**
Following the console output along with crash report:
```
>>> %Run -c $EDITOR_CONTENT
ILI9341 initialization completed
Enable backlight
Double buffer
>>> Event received: 0
Event received: 1
Event received: 1
Event received: 1
Event received: 1
Event received: 1
Event received: 3
Event received: 6
Event received: 7
Event received: 12
Guru Meditation Error: Core  1 panic'ed (LoadStoreError). Exception was unhandled.
Core 1 register dump:
PC      : 0x40104a19  PS      : 0x00060530  A0      : 0x8011464a  A1      : 0x3ffccf10  
A2      : 0x400014bf  A3      : 0x3fff14c0  A4      : 0x00000000  A5      : 0x00000000  
A6      : 0x00000000  A7      : 0x00000000  A8      : 0x00000000  A9      : 0x3ffccee0  
A10     : 0x00000000  A11     : 0x3ffb00d4  A12     : 0x3f4312d4  A13     : 0x00000023  
A14     : 0x00000000  A15     : 0x00000004  SAR     : 0x0000001e  EXCCAUSE: 0x00000003  
EXCVADDR: 0x400014bf  LBEG    : 0x4000c46c  LEND    : 0x4000c477  LCOUNT  : 0x00000000  

ELF file SHA256: 0000000000000000000000000000000000000000000000000000000000000000

Backtrace: 0x40104a19:0x3ffccf10 0x40114647:0x3ffccf70 0x4011c9c1:0x3ffccfd0 0x4011e123:0x3ffcd020 0x400f94c3:0x3ffcd040 0x400f9d21:0x3ffcd080 0x40105bda:0x3ffcd0d0 0x40105c90:0x3ffcd0f0 0x4014293b:0x3ffcd110 0x400e306e:0x3ffcd130 0x400df06d:0x3ffcd150 0x400df0b1:0x3ffcd170 0x400dff90:0x3ffcd1a0 0x400e005d:0x3ffcd220 0x400e00ab:0x3ffcd240 0x400f4141:0x3ffcd260 0x401425e2:0x3ffcd280 0x400f3fb0:0x3ffcd2b0 0x4008e26d:0x3ffcd2e0

Rebooting...
ets Jun  8 2016 00:22:57

rst:0xc (SW_CPU_RESET),boot:0x1b (SPI_FAST_FLASH_BOOT)
configsip: 0, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DIO, clock div:2
load:0x3fff0018,len:4
load:0x3fff001c,len:4876
load:0x40078000,len:9652
load:0x40080400,len:6200
entry 0x400806f0
W (314) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.
MicroPython v1.9.4-2072-gf89c8c48c-dirty on 2020-01-04; ESP32 module with ESP32
Type "help()" for more information.
>>> 
```



**Describe the bug**

With dev-7.0, lists don't get centered when you call `lv_obj_align(list, LV_ALIGN_CENTER, 0, 0)`.

**To Reproduce**

```c
lv_obj_t * list = lv_list_create(lv_scr_act(), NULL);
lv_list_add_btn(list, LV_SYMBOL_FILE, "New");
lv_list_add_btn(list, LV_SYMBOL_DIRECTORY, "Open");
lv_obj_align(list, NULL, LV_ALIGN_CENTER, 0, 0);
```

**Expected behavior**

The list should have been centered properly.

**Screenshots**

![Screenshot from 2020-01-09 19-34-02](https://user-images.githubusercontent.com/42941056/72116066-05099580-3317-11ea-8e9a-9e422f00ec9d.png)

Hi
As the @kisvegabor suggested, I opened this issue to talk about the CMake-based build for the library or/and simulator repository.
Here is the list of questions:
- CMakeLists for lvgl library

- CMakeLists for examples

- CMakeLists for simulator( this achieves the possibility of using IDE's that support CMakeLists such as Qt Creator, CLion and other )


I've provided the sample of CMake-based bulild of Simulator in my repository:
https://github.com/ValentiWorkLearning/GradWork/tree/dev/lvgl_implementation/Simulator
https://github.com/ValentiWorkLearning/GradWork/blob/dev/lvgl_implementation/Simulator/graphics/CMakeLists.txt

So, if these options are acceptable, I can start from implementation of Simulator CMake-build.


Hi
As the @kisvegabor [suggested](https://forum.littlevgl.com/t/add-track-cursor-to-chart-object/1425/7?u=ali_rostami), I opened this issue to talk about the features we want to add to the chart object.

here is the list until now and AFAIK:

-  Add track cursor to the `chart` object
-  support different series types on one chart
- X/Y mode
- maybe rework the existing chart types? Maybe some of them can be combined or dropped.
- [Assign the range to the series](https://forum.littlevgl.com/t/assign-the-range-to-the-series/1417)

Let's start with the first one :)
AFAIK @embeddedt did something about it. so maybe it's not a bad idea to open a new branch for the chart and put those codes there.
what do you think?
The [MicroPython simulator](https://sim.littlevgl.com/micropython/ports/javascript/lvgl_editor.html) is online and ready to use, but needs to be polished further.

Here is a list of improvements compiled by @amirgon:

- [ ] Monaco Editor
- [ ] Allow changing the lvgl screen size
- [ ] Try to improve Frame-Rate
- [ ] Host SnippetBin backend on LittlevGL server instead of Heroku
- [ ] Improve styling of the html, Bootstrap, change frame sizes by dragging etc.  
- [ ] Support loading fonts on runtime on lvgl. This would allow sharing snippets with custom fonts
For a long time, I'm considering to improve the style system of LittlevGL.

**The issues I see**
- the styles are to complex: you need to create a style to change only one parameter, e.g. label color
- there is no way to easily change something locally for only one object (you need to create a whole new style)
- it's difficult to describe uncommon properties: e.g. the line length on a line meter comes from a padding (in lack of better property) 

**So the goals would be**
- support local (per object) style change too
- still support style inheritance
- make the styles smaller

**The idea**
My idea is inspired by CSS. 
- Have a list of enums such as `LV_STYLE_RADIUS`, `LV_STYLE_BORDER_COLOR`
- In `lv_style_t` create some kind of a lists where property names and their values are stored
- Create this list dynamically. I.e. add a new element only if it's explicitly set.
- When a property (e.g. radius) is queried, check if it's set in the object and if so return it. If not check the parent, and so on. 
- Object types can also have custom properties. E.g. `LV_LMETER_STYLE_LINE_LENGTH`.
- In `lv_obj_t` have `lv_style_class_t` where styles can be chained. E.g. 
```c
lv_obj_add_style_class(obj, &btn);     //Button-like appearnce
lv_obj_add_style_class(obj, &btn_lg) //Overwrite only paddings
lv_obj_add_style_class(obj, &btn_red) //Overvrite only colors
```  
- Besides `lv_style_class_t` have a simple `lv_style_t *` in `lv_obj_t` where the object's local style modifications are storder. E.g.
```c
lv_obj_set_style_property(obj, LV_STYLE_RADIUS, 20); //Overwrite radius from classes
```

**What I have so far**
- I made an initial, very minimal implementation and it's working
```c
    static lv_style_t style;
    lv_style_init(&style);
    lv_style_set_color(&style, LV_STYLE_BG_COLOR, LV_COLOR_RED);
    lv_style_set_value(&style, LV_STYLE_BG_RADIUS, 5);

    lv_obj_t * obj = lv_obj_create(lv_scr_act(), NULL);
    lv_obj_set_pos(obj, 100, 30);
    obj->style_p = &style;
```
- Now there are 4 set/get functions for opa, value (int16_t), color and pointer types. It's ok but there could be `lv_style_set(&style, TYPE, value)` macro which can call the corrent function based on `TYPE`. However, the macros can't be used from Micropython so I don't know what to do with this part. @amirgon ?



It's a huge rework, but I think it's worth it because finally, it will be much easier to use the styles and they will be smaller.

Please, let me know what you think about it. I hope I explained it in an understandable way. :slightly_smiling_face: 
  


The release policy of lvgl should be reconsidered to avoid immediate hotfix releases after a minor/major release.

My current idea:
1. Before minor/major release, release an `rc` (release candidate) version directly into `master`. E.g. `x.y-rc`
2. Allow 1 week to get feedback and fix warnings, forgotten things, etc.  
3. After 1 week remove the `rc` tag and make a normal release. E.g. `x.y`.
4. After the normal release change the version to `x.y.1-dev` to indicate that the next bugfix version is under development in `master`
5. Push bugfixes to `master`
6. Every month (near to 1st) make a bugfix release.  E.g. `x.y.1`
7. After bug fix releases add `dev` tag to the version. E.g. `x.y.2-dev`

TODO list before release:
- create a demo with all object types and try it
- test groups: keyboard, encoder
- run stress test
- test with 1,8,16,16 swapped, 32 bit color depth
- test with disabled animations and/or groups
- test with -O0, -Os and -O3 optimization.
- test with the MicroPython binding
- be sure library.json is updated

It'd be nice to set up an automatic test environment (Travis?) for the tests above and see if at least it can be compiled and run successfully (even without a display dirver). 
Writing tests for the whole library is out of scope but we can test some core modules' functionality (e.g. lv_mem, lv_ll, lv_task, lv_color).

Ideas are very welcome. So please let me know what you think.

**Describe the bug**
The border part of the cell type doesn't seem to act correctly.
The types LV_BORDER_FULL, LV_BORDER_TOP and LV_BORDER_LEFT seems to work as expected but not the types LV_BORDER_BOTTOM, LV_BORDER_RIGHT, LV_BORDER_INTERNAL. When I use these types no borders appear at all on my table.

**To Reproduce**
I took the example from the documentation and changed the fields for border.part
In this example I used LV_BORDER_INTERNAL and we see that no border appears at all.
I am using a stm32F429I-DISC1 and I have the same behavior with the simulator.

```
  static lv_style_t style_cell1;
  lv_style_copy(&style_cell1, &lv_style_plain);
  style_cell1.body.border.width = 1;
  style_cell1.body.border.color = LV_COLOR_BLACK;
  style_cell1.body.border.part = LV_BORDER_INTERNAL;

  /*Crealte a header cell style*/
  static lv_style_t style_cell2;
  lv_style_copy(&style_cell2, &lv_style_plain);
  style_cell2.body.border.width = 1;
  style_cell2.body.border.color = LV_COLOR_BLACK;
  style_cell2.body.main_color = LV_COLOR_SILVER;
  style_cell2.body.grad_color = LV_COLOR_SILVER;
  style_cell2.body.border.part = LV_BORDER_INTERNAL;

  lv_obj_t *table = lv_table_create(lv_scr_act(), NULL);
  lv_table_set_style(table, LV_TABLE_STYLE_CELL1, &style_cell1);
  lv_table_set_style(table, LV_TABLE_STYLE_CELL2, &style_cell2);
  lv_table_set_style(table, LV_TABLE_STYLE_BG, &lv_style_transp_tight);
  lv_table_set_col_cnt(table, 2);
  lv_table_set_row_cnt(table, 4);
  lv_obj_align(table, NULL, LV_ALIGN_CENTER, 0, 0);

  /*Make the cells of the first row center aligned */
  lv_table_set_cell_align(table, 0, 0, LV_LABEL_ALIGN_CENTER);
  lv_table_set_cell_align(table, 0, 1, LV_LABEL_ALIGN_CENTER);

  /*Make the cells of the first row TYPE = 2 (use `style_cell2`) */
  lv_table_set_cell_type(table, 0, 0, 2);
  lv_table_set_cell_type(table, 0, 1, 2);

  /*Fill the first column*/
  lv_table_set_cell_value(table, 0, 0, "Name");
  lv_table_set_cell_value(table, 1, 0, "Apple");
  lv_table_set_cell_value(table, 2, 0, "Banana");
  lv_table_set_cell_value(table, 3, 0, "Citron");

  /*Fill the second column*/
  lv_table_set_cell_value(table, 0, 1, "Price");
  lv_table_set_cell_value(table, 1, 1, "$7");
  lv_table_set_cell_value(table, 2, 1, "$4");
  lv_table_set_cell_value(table, 3, 1, "$6");
```
![image](https://user-images.githubusercontent.com/8058486/69924728-320f9080-14ad-11ea-9e96-4db399776271.png)

**Expected behavior**

I was expecting to see internals borders of the table for  LV_BORDER_INTERNAL, bottom borders for LV_BORDER_BOTTOM, etc.

**Additional context**
I am working under ubuntu 18.04
littlevGL V6.1
