There's a couple of broken images on: https://marketplace.visualstudio.com/items?itemName=gittools.gitversion

Both of these 404

https://raw.githubusercontent.com/GitTools/GitVersion/master/src/GitVersionTfsTask/images/build-task.png

https://raw.githubusercontent.com/GitTools/GitVersion/master/src/GitVersionTfsTask/images/builds.png
Hello. Please, help me. I use GitVersion 5.
1. I have master, feature/#XXX, release/1.2.3 and feature/sprintY branches.
2. feature/sprintY is analogue for develop branch, but I recreate it every 2 weeks from master (on sprint).
3. I deploy every commit in feature/sprintY to test environment (teamcity + octopus deploy), so I turned on feature:  mode: ContinuousDeployment
4. Everyting is ok, build metadata number increased constantly, for example 1.35.0-sprint7.263 -> 1.35.0-sprint7.265.
5. I create release branch release/1.34.0 (from feature branches, because not all features from sprint branch are releasing), build it (1.34.0-beta7.+156), deploy to production and then merge to master.
6. I merge master branch to feature/sprint7 branch.
6. After this point, "build metadata counter" resets for feature/sprintY branch. So I have decreased version number and octopus deploys wrong package! 1.35.0-sprint7.265 -> 1.35.0-sprint7.**4**.

Can I do something? I need always increase my version number for "ContinuousDeployment" branch.
![GitVersionHelp](https://user-images.githubusercontent.com/41330560/72510680-ecd7d000-385a-11ea-9c19-82c86c160778.png)

When I execute Gitversion on my master branch I get

```json
{
  "Major":0,
  "Minor":1,
  "Patch":13,
  "PreReleaseTag":".13",
  "PreReleaseTagWithDash":"",
  "PreReleaseLabel":"",
  "PreReleaseNumber":"",
  "BuildMetaData":"",
  "BuildMetaDataPadded":"",
  "FullBuildMetaData":"Branch.master.Sha.ce85b17df91b56a80e995627a8c26a8e2cef2b22",
  "MajorMinorPatch":"0.1.13",
  "SemVer":"0.1.13",
  "LegacySemVer":"0.1.13",
  "LegacySemVerPadded":"0.1.13",
  "AssemblySemVer":"0.0.0.0",
  "AssemblySemFileVer":"0.1.13.0",
  "FullSemVer":"0.1.13",
  "InformationalVersion":"0.1.13+Branch.master.Sha.ce85b17df91b56a80e995627a8c26a8e2cef2b22",
  "BranchName":"master",
  "Sha":"ce85b17df91b56a80e995627a8c26a8e2cef2b22",
  "NuGetVersionV2":"0.1.13",
  "NuGetVersion":"0.1.13",
  "NuGetPreReleaseTagV2":"",
  "NuGetPreReleaseTag":"",
  "CommitsSinceVersionSource":13,
  "CommitsSinceVersionSourcePadded":"0013",
  "CommitDate":"2020-01-14"
}
```

If I go back to a revision using git checkout, 

```bash
git checkout 44d74cdf0 
```

Then execute Gitversion, I still get the same SemVer.

```json
{
  "Major":0,
  "Minor":1,
  "Patch":13,
  "PreReleaseTag":".12",
  "PreReleaseTagWithDash":"",
  "PreReleaseLabel":"",
  "PreReleaseNumber":"",
  "BuildMetaData":"",
  "BuildMetaDataPadded":"",
  "FullBuildMetaData":"Branch.master.Sha.44d74cdf0991522fd58a8b4dc9accf1a0efafbae",
  "MajorMinorPatch":"0.1.13",
  "SemVer":"0.1.13",
  "LegacySemVer":"0.1.13",
  "LegacySemVerPadded":"0.1.13",
  "AssemblySemVer":"0.0.0.0",
  "AssemblySemFileVer":"0.1.13.0",
  "FullSemVer":"0.1.13",
  "InformationalVersion":"0.1.13+Branch.master.Sha.44d74cdf0991522fd58a8b4dc9accf1a0efafbae",
  "BranchName":"master",
  "Sha":"44d74cdf0991522fd58a8b4dc9accf1a0efafbae",
  "NuGetVersionV2":"0.1.13",
  "NuGetVersion":"0.1.13",
  "NuGetPreReleaseTagV2":"",
  "NuGetPreReleaseTag":"",
  "CommitsSinceVersionSource":12,
  "CommitsSinceVersionSourcePadded":"0012",
  "CommitDate":"2020-01-14"
}
```

Is this expected?
# Issue
Versioning seems to be wonkey when using Azure Dev Ops CI pipeline

# Explanation
I have got a simple GitVersion.yml file that was generated by the GitVersion.exe:

``` yaml
mode: ContinuousDeployment
branches: {}
ignore:
  sha: []
merge-message-formats: {}
```

- I am following a GitFlow brancing strategy. Initially everything was working fine. I created a feature branch and the resulting NuGet package was published 0.1.0-feature-Myfeature name.
- I then did a managed pull request into develop and the resulting build made a build version "0.1.0-alpha0049". 
I then created a RELEASE branch called release/0.1.0. This resulted in a build "0.1.0-beta0050".
-  I then did 2 pull requests from the release branch. 1 to go to master that resulted in a build number "0.1.0-ci0051", the other went into develop and the version number went to 1.1.0-alpha0006.
- I have subsequently noticed that there is a bug so i created a bug branch which resulted in a build "0.2.0-bug-mybug0007".

What am I doing wrong as the versioning from the last release does not correlate to the next beta. And how do I remove the build numbers from the build.

For extra, here is the build pipeline I am using
![Annotation 2020-01-14 095632](https://user-images.githubusercontent.com/7193913/72333955-8913a280-36b4-11ea-9207-c48d6bc34674.png)

Hello,

I encountered an issue while using the latest beta version GitVersion v5.1.4-beta1.48.
The problem is that, the GitVersion task falls into stack overflow after the following scenario:

1. There are two branches **master** and **dev** (**master** is the source branch for **dev**)
2. Push some change-set into the **master** branch. **master** increments version patch number
3. Merge changes from **master** into **dev**
4. Run GitVersion.exe onto **dev** branch -> **stack overflow** exception

My GitVersion.yml:
```
assembly-versioning-scheme: MajorMinorPatch
mode: Mainline
tag-prefix: '[vV]'
major-version-bump-message: '\+semver:\s?(breaking|major)'
minor-version-bump-message: '\+semver:\s?(feature|minor)'
patch-version-bump-message: '\+semver:\s?(fix|patch)'
commit-message-incrementing: Enabled
branches:
  hotfix:
    regex: hotfix?[/-]
    tag: useBranchName
  feature:
    regex: feature?[/-]
  develop:
    regex: ^dev(elop)?(ment)?$
    tag: alpha
    increment: Inherit
    prevent-increment-of-merged-branch-version: false
    track-merge-target: true
  master:
    increment: Patch
    prevent-increment-of-merged-branch-version: true
    track-merge-target: false
ignore:
  sha: []
merge-message-formats: {}

```
I've tried both GitVersion.exe as well as GitVersion MSBuild task.
Log:
```
GitVersionTask.targets(10,9): warning : 2020-01-13 15:51:53		    WARN [01/13/20 15:51:53:30] Failed to inherit Increment branch configuration, no branches found.
GitVersionTask.targets(10,9): warning : 
GitVersionTask.targets(10,9): warning : Falling back to dev branch config
GitVersionTask.targets(10,9): warning :
GitVersionTask.targets(10,9): warning : 2020-01-13 15:51:53		      WARN [01/13/20 15:51:53:31] Failed to inherit Increment branch configuration, no branches found.
GitVersionTask.targets(10,9): warning : 
GitVersionTask.targets(10,9): warning : Falling back to dev branch config
GitVersionTask.targets(10,9): warning :
GitVersionTask.targets(10,9): warning : 2020-01-13 15:51:53		        WARN [01/13/20 15:51:53:32] Failed to inherit Increment branch configuration, no branches found.
GitVersionTask.targets(10,9): warning : 
GitVersionTask.targets(10,9): warning : Falling back to dev branch config
GitVersionTask.targets(10,9): warning :
GitVersionTask.targets(10,9): warning : 2020-01-13 15:51:53		          WARN [01/13/20 15:51:53:32] Failed to inherit Increment branch configuration, no branches found.
GitVersionTask.targets(10,9): warning : 
GitVersionTask.targets(10,9): warning : Falling back to dev branch config
GitVersionTask.targets(10,9): warning :
GitVersionTask.targets(10,9): warning : 2020-01-13 15:51:53		            WARN [01/13/20 15:51:53:33] Failed to inherit Increment branch configuration, no branches found.
...
```
An image of my Git graph:
![git-history](https://user-images.githubusercontent.com/14121985/72261016-11e2fd80-3625-11ea-991a-3920a86848a1.png)

P.S. There is a workaround, if I disable inheritance on develop branch:
```
develop:
    increment: **None**
```
But this case the develop branch don't use a version number from master.

After selecting "Update AssemblyInfo files" on the Azure DevOps Build Task (v5), the parameter for "Update Assembly File" becomes available. I can't work out how to pass multiple paths to this or if it is indeed possible. Documentation in Read The Docs and the Task Tooltip don't offer any further clarity.

If it is infact only capable of taking a single path, what's the best practice for updating a number of these in a targeted fashion? Considering the case where there are Solutions containing SDK style csproj files and the odd old style project with Assembly.cs files.

Cheers!
Googling for [gitversion](https://www.google.com/search?q=gitversion) or [gitversion docs](https://www.google.com/search?q=gitversion+docs), the first hit is to [gitversion.readthedocs.io](https://gitversion.readthedocs.io/en/latest/) that has no index, etc...

I don't know the reason, maybe the docs were published there originally and they moved?  But it probably feels like a bit of a dead-end for it to be the first hit for someone trying to figure out what gitversion is.
The newly introduced dependency on `Microsoft.Extensions.DependencyInjection (>= 3.0.1)` prevents the package from installing in projects which use older SDKs!

![grafik](https://user-images.githubusercontent.com/15836594/71972846-cc31c980-320d-11ea-9f96-d7a81acddbfc.png)

![grafik](https://user-images.githubusercontent.com/15836594/71972962-0ac78400-320e-11ea-8272-2c561aba5947.png)

Since the App packages are explicitly referenced by the SDK, you cannot simply upgrade to v3.0.1.

Therefore the targeted builds should reference the proper version of this dependency, i.e. `.NETCoreApp,Version=v2.1 => Microsoft.Extensions.DependencyInjection (>=2.1.0)`

Is it possible to ignore/skip a range of versions?

I'm currently on version 0.1.1 and want to skip 0.2.1-0.2.5.

I could possibly write a commit message when I reach version 0.2.1 to bump to 0.3.0, but is it possible to do it in the yml file so I dont have to remember when to do the commit message hack?