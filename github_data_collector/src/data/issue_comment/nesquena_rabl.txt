Bumps [lodash.template](https://github.com/lodash/lodash) from 4.4.0 to 4.5.0.
<details>
<summary>Commits</summary>

- [`ab73503`](https://github.com/lodash/lodash/commit/ab73503859a2d2f7f603bc8a293ce93ecc071e83) Bump to v4.5.0.
- [`a4f7d4c`](https://github.com/lodash/lodash/commit/a4f7d4cc2a3b6d3a43f6c27beadbf90410eecdcd) Rebuild lodash and docs.
- [`cca5ac6`](https://github.com/lodash/lodash/commit/cca5ac60d61a2f786eeafadb674d6e12fc6179c8) Fix npm-test by removing the call to test-docs.
- [`9f7f9fc`](https://github.com/lodash/lodash/commit/9f7f9fc3c5f1a4db9a2134950872440c792ee8bb) Adjust heading order. [ci skip]
- [`6e2fb92`](https://github.com/lodash/lodash/commit/6e2fb92e9a2fd29ef630f71bd571afcdf0f2e206) Remove unused `baseArity`.
- [`4f702e2`](https://github.com/lodash/lodash/commit/4f702e238183444ff392c3c7be5b48f1a7271519) Specify utf8 encoding.
- [`b188f90`](https://github.com/lodash/lodash/commit/b188f903ce41e624d6169f47a0c9e5091c178160) Add fp tests for iteratee shorthands.
- [`7b93dc9`](https://github.com/lodash/lodash/commit/7b93dc9c3253c342a45881392d2308374a8909b3) Ensure clone methods clone expando properties of boolean, number, & string ob...
- [`664d66a`](https://github.com/lodash/lodash/commit/664d66a89ec553438d5560239eba24d30867e580) Make string tests more consistent.
- [`d9dc0e6`](https://github.com/lodash/lodash/commit/d9dc0e6fd13c030029964b5ba468e0df3e2de3b2) Add `_.invertBy` tests.
- Additional commits viewable in [compare view](https://github.com/lodash/lodash/compare/4.4.0...4.5.0)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash.template&package-manager=npm_and_yarn&previous-version=4.4.0&new-version=4.5.0)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/nesquena/rabl/network/alerts).

</details>
To give a brief intro, the relationships between models used here are: 'Classification' has many 'Standards' and 'Standard' has many 'Sections'. I wanted to use a single rabl file for selecting all sections as well as for selecting a single section. Here, @section = nil indicates that we are selecting all sections.

I tried something like this:

```
collection @classifications, root: 'classifications', object_root: false
 node do |classification|
	partial('feed/shared/addressable_basic_info', :object => classification)
end
 node (:standards) do |classification|
	standard = @section.standard if @section != nil
 	classification.find_standards_by(standard).map do |standard|
 		partial('feed/shared/addressable_basic_info', :object => standard)
 		node(:sections) do
 			standard.find_sections_by(@section).map do |section|
				partial('feed/shared/addressable_basic_info', :object => section)
				node(:audience_type) { 'student'}
 			end
 		end
        end
end
```

and it gave me an output like: 

```
{"classifications"=>[{"addressable_type"=>"Classification", "addressable_id"=>1, "audience_name"=>"classification name 1", "audience_type"=>"student", "standards"=>[[{"name"=>nil, "options"=>{}, "block"=>"#<Proc:0x0000555e68fd1c60@(eval):18>"}, {"name"=>"audience_type", "options"=>{}, "block"=>"#<Proc:0x0000555e68fd1be8@(eval):21>"}, {"name"=>"standards", "options"=>{}, "block"=>"#<Proc:0x0000555e68fd1b70@(eval):29>"}, {"name"=>"audience_type", "options"=>{}, "block"=>"#<Proc:0x0000555e68ff5a48@(eval):33>"}, {"name"=>"sections", "options"=>{}, "block"=>"#<Proc:0x0000555e68ff59d0@(eval):35>"}, {"name"=>"audience_type", "options"=>{}, "block"=>"#<Proc:0x0000555e69007298@(eval):38>"}, {"name"=>"audience_type", "options"=>{}, "block"=>"#<Proc:0x0000555e69006460@(eval):38>"}]], "sections"=>[[{"name"=>nil, "options"=>{}, "block"=>"#<Proc:0x0000555e68fd1c60@(eval):18>"}, ..........
```

But this works well with a single map.

When I use 'each' in place of 'map', it prints out the looped object as such and it does not care about node or partials present within.

The output while using 'each' is something like:

```
{"classifications"=>[{"addressable_type"=>"Classification", "addressable_id"=>1, "audience_name"=>"classification name 1", "audience_type"=>"student", "standards"=>["#<Standard:0x000055a4468e3308>"], "sections"=>["#<Section:0x000055a4468edcb8>", "#<Section:0x000055a4468ed998>"]}]}
```

I might be completely wrong with the usage of map. Is my approach wrong here? If so, how can I go about this?
Hi,

I'm struggling with some issue and not sure how to get out of it:
Here is my `labels/index.rabl`

```
collection @labels

attribute :id, :name
```

When I do next 
```
renderer = Rabl::Renderer.new('labels/index', Label.limit(4), { :format => 'json', :view_path => 'app/views/api/pro/v2' }).render
 =>  "{\"name\":\"Label\"}"
```
which is totally wrong as it should display collection as an array of 4 hashes with proper id & name. 

I'm not sure why it does like this. 

So I'm using rails 4.2.11 & rabl 0.14.1 

Wdyt? 
I have 2 different rabl templates and their actual outputs are provided below.

### File 1: test.rabl
```ruby
object false

child @test_objects => :test_objects do
  attribute :object_id
end

node(false) do
  node(:total)   { 10 }
  node(:pages)   { 10 }
  node(:page_no) { 1 }
end
```

This works as expected

```ruby
> puts Rabl::Renderer.new('test', nil, format: :json, locals: { test_objects: [OpenStruct.new] }).render
{"test_objects":[{"test_object":{"object_id":70186699097320}}],"total":10,"pages":10,"page_no":1}

## With test_objects as empty array 
> puts Rabl::Renderer.new('test', nil, format: :json, locals: { test_objects: [] }).render
{"test_objects":[],"total":10,"pages":10,"page_no":1}
```

### File 2: test2.rabl
```ruby
object false

child @test_objects, :root => :test_objects, :object_root => false do
  attribute :object_id
end

node(false) do
  node(:total)   { 10 }
  node(:pages)   { 10 }
  node(:page_no) { 1 }
end
```

The issue occurs when @test_objects is an empty array (2nd case). The `test_objects` attribute doesn't make it to the final response.
 
```ruby
> puts Rabl::Renderer.new('test2', nil, format: :json, locals: { test_objects: [OpenStruct.new] }).render
{"test_objects":[{"object_id":70186677972660}],"total":10,"pages":10,"page_no":1}

## With test_objects as empty array 
> puts Rabl::Renderer.new('test2', nil, format: :json, locals: { test_objects: [] }).render
{"total":10,"pages":10,"page_no":1}
```

The only work around / hack that seems to work is if we change the definition of `child` block to something like this

```ruby
child(@test_objects => :test_objects, {:root => :test_objects, :object_root => false}) do
```

In case this is accepted as a bug, the line that causes this behavior is here
https://github.com/nesquena/rabl/blob/master/lib/rabl/builder.rb#L171

When first argument is hash (with empty array as the value), the `data.present?` won't fail. This behavior is different obviously as it fails when empty array is passed as first argument.

I found that this check was introduced around 8 years back and I am not sure if it should be removed or not, so filing issue to discuss a better way to handle this scenario. 



Having the following setup in an older app running on `ruby 2.4.6` and `rails 4.2.11.1`

```ruby
# index.json.rabl
node :foo do
  partial('foos/list', object: @foos)
end
```

```ruby
# list.json.rabl
collection @foos, root: false, object_root: false
extends('foos/show')
```

```ruby
# show.json.rabl
object @foo => nil
attributes :id, :name
```

```ruby
# foos_controller.rb
def index
  @foos = Foo.all
  render 'foos/index'
end
```

With Rabl `0.14.0` this renders properly:
```json
{
    "foos": [
        { "id": 1, "name": "foo one"},
        { "id": 2, "name": "foo two"},
    ]
}
```

Upgrading to `0.14.1` it just renders nothing, no error raised:
```json
{
    "foos": {}
}
```

I am not very familiar with Rabl, to be honest, are the views here just basically wrong and working by chance in this setup, or did we find a breaking change that slipped in a minor version bump?
I am trying to get the rendered result in Rails console.

`Rabl.render(@post, 'api/v1/posts/show', view_path: 'app/views', format: :xml)`

But it fails due to this issue:
**NameError (undefined local variable or method `request' for #<Rabl::Engine:0x000...>)**

I can't figure out what this means.

Please help me to fix it so that I can get the result.
We are migrating to Ruby on Rails 5, and upgrading to rabl >= 0.13.

Everything looks good except this one request that is returning a stringyfied object instead of a view.

```
JSON::ParserError:
       784: unexpected token at '#<ReferenceNumber::ActiveRecord_Relation:0x00007fda690fedd0>'
```

We are using `grape` and `grape-rabl` and the request looks like so:

```
desc 'Deletes a reference ID'
params do
  requires :device_id, type: String, desc: 'Device Identifier.'
  requires :cardnumber, type: String, desc: 'Card number.'
  requires :reference_number, type: String, desc: 'Reference ID'
end
delete '/reference_numbers', rabl: 'devices/cardholder/reference_numbers', http_codes: [
  [...business errors...]
  [401, 'Unauthorized'],
  [403, 'Forbidden - trying to access resource that is not authorized for this merchant']
] do
    ... business logic ...
    @reference_numbers = ReferenceNumber.by_card_number(params[:cardnumber])
    	.by_participating_businesses(@device.participating_business)
end
```

The rabl view file looks like this:

```
node(:reference_numbers) do
  @reference_numbers.map do |reference_number|
    {
      number: reference_number.number,
      business: reference_number.participating_business.name
    }
  end
end
```

Where `@reference_numbers` is equal to an empty `ActiveRecord_Relation`, the view returns that object.

Whenever `@reference_numbers` has results then everything works properly.

Might not be understanding the changes between Rabl 0.12 and 0.13, if anyone understands whats going on or has any suggestions, please let me know!


# EDIT

I've tried testing very similar requests and to no avail cannot reproduce this issue.

Then I tried commenting out the `@reference_numbers =` line and the rabl file is rendered.

Strange since if it were that line, then you'd expect the same kind of issue throughout where this line appears, but this is not the case.
I have the following hash in my controller. 
```ruby
@order = {
  :id => "somestringid",
  :user_id => "someotherstringid",
  :amount => 19.99,
  :metadata => [
    {
      :type => :shipping_data,
      :address => "line 1 of address, line 2 of address, city, state, pincode"
    },
    {
      :type => :payment,
      :stripe_customer_id => "somestringid",
      :stripe_card_id => "someotherstringid"
    },
    {
      :type => :contact,
      :email => "someone@example.com",
      :phone => "1231231231"
    }
  ]
}
# the "metadata" is a list of objects. 
# There can be 0, 1 or more metadata objects. 
# each metadata object has a different structure. 
# the only common key for all metadata objects is the "type" key. 
```
_Note: I have simplified the hash to make this question easier to write out._

I want to be able to render this hash to json using rabl but cannot figure out how. 
The json that I want to render should be as below

```json
{
  "id": "somestringid",
  "user_id": "someotherstringid",
  "amount": 19.99,
  "metadata": [
    {
      "type": "shipping_data",
      "address": "line 1 of address, line 2 of address, city, state, pincode"
    },
    {
      "type": "payment",
      "stripe_customer_id": "somestringid",
      "stripe_card_id": "someotherstringid"
    },
    {
      "type": "contact",
      "email": "someone@example.com",
      "phone": "1231231231"
    }
  ]
}
```
I have the following in my controller
```ruby
@somedata = [
  {:key1 => 'hello', :key2 => 'world'},
  {:key1 => 'bye', :key2 => 'world'},
  {:key1 => 'greetings', :key2 => 'universe'},
]
```
and the following in my template
```ruby
collection @somedata
attributes :key1, :key2
```

From what I understand, this should give me the following json
```js
[
  {"key1": "hello", "key2": "world"},
  {"key1": "bye", "key2": "world"},
  {"key1": "greetings", "key2": "universe"}
]
```
but what I do get in the json is
```js
[
  {},
  {},
  {}
]
```
Quick question for anyone out there: the latest version on Rubygems is from October 2016. There's been a lot of work done in the `master` branch since then. Should we be using the master branch, or stick with that old version?