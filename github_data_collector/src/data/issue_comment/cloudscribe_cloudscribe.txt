Long user names and email addresses are causing the user management table to drop to the bottom of the screen, leaving lots of white space.

![image](https://user-images.githubusercontent.com/10956017/68754535-c9946880-05fe-11ea-9a9f-ddc1c306328a.png)

There is nothing in the markup that allows a developer to write css rules to address this behaviour, e.g. use word-break to force the columns concerned to wrap their content.

I suggest adding a css class to the table so that a developer can write css rules targeting it.

A better long term fix might be to look at rendering markup that flows better than a table.
/useradmin page Search function with PGSQL database is case sensitive. So can fail to find an existing user if search for jimk@gmail.com instead of JimK@gmail.com.  But if you then proceed to try to create a user as jimk@gmail.com it will fail saying the email already exists.
This search should not be case-sensitive, and it is not case-sensitive when using SQL Server.
Noticing the search is also case sensitive using NoDB. Therefore possibly other storage options too.
In testing social auth via Facebook, I found my new account had this for Date Of Birth and the field was not editable:
![image](https://user-images.githubusercontent.com/10574730/65822500-108bf180-e23d-11e9-909e-bcc01a529dd0.png)

Following on from #367 it would be really nice to be able to add a role to a user rather than having to go to the role management page.
Similar pattern (to adding a user to a role) would be good: click "Add" > modal list of roles each with "Add" button, and a Close button bottom right.  The number of roles should not be large, but the list needs to accommodate paging for when it is. I don't think it needs a search capability.
Currently the FileManager uses file system storage on the web server. It would be nice if it could be configured to use Azure blob storage or Amazon s3 storage.

There will be several challenges for implementing this. The flow would be different as we would want to upload directly to blob storage, not post to the web server and then send the file to blob storage. It probably involves getting a token from the web server that allows client side code to upload to blob storage.

Given that users upload large image files that typically need to be resized for use in web pages, the solution would also require handling of file resizing, probably through serverless functions or webjobs or some other approach. These 2 articles seem relevant:


https://docs.microsoft.com/en-us/azure/storage/blobs/storage-upload-process-images?tabs=dotnet

https://docs.microsoft.com/en-us/azure/event-grid/resize-images-on-storage-blob-upload-event?tabs=dotnet

followup related to #646

It would be nice to support new account notification even when not requiring account approval.
The same setting for notification email csv could be used, but sending a different message just notifying that a new user has registered.
Having this functionality could provide a better user experience than requiring approval for new accounts because the user could be allowed immediate access with minimal permissions and the the admins once notified could grant the user additional roles if they 'approve' of the user. From the user's point of view this would seem less obnoxious than making them wait for account approval before they can login,
You may notice there is very little at this point in the way of unit tests in this project. I acknowledge that I am not very experienced with TDD (Test Driven Development) and have not been working with that as my process. Much of the code was existing code migrated and refactored from mojoportal.

With this project I am trying to develop testable code and would like to add more and more test coverage over time. I would specifically welcome collaborators who are more experienced with TDD to help get the ball rolling by implementing tests, pointing out any areas where code is not testable currently, making pull requests that refactor code to become more testable, etc. I learn quickly from other people's examples and believe that with help and collaboration I could become proficient in TDD.

I'm not sure yet what mocking framework to use for example or which ones are compatible with the new .NET frameworks.

In short, please don't beat me up about lack of tests, instead help me move forward in making sure things are testable and adding to test coverage.
