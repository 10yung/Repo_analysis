Hi!

I recently tried to create a game on dots and I used Unty Physics Sample as reference for few things.
I found collider event example there which can be incorrect.

I am talking about sample below:
`[UpdateAfter(typeof(EndFramePhysicsSystem))]
unsafe public class CollisionEventImpulseSystem : JobComponentSystem
{
    BuildPhysicsWorld m_BuildPhysicsWorldSystem;
    StepPhysicsWorld m_StepPhysicsWorldSystem;

    EntityQuery ImpulseGroup;
    protected override void OnCreate()
    {
        m_BuildPhysicsWorldSystem = World.GetOrCreateSystem<BuildPhysicsWorld>();
        m_StepPhysicsWorldSystem = World.GetOrCreateSystem<StepPhysicsWorld>();
        ImpulseGroup = GetEntityQuery(new EntityQueryDesc
        {
            All = new ComponentType[] { typeof(CollisionEventImpulse), }
        });
    }

    [BurstCompile]
    struct CollisionEventImpulseJob : ICollisionEventsJob
    {
        [ReadOnly] public ComponentDataFromEntity<CollisionEventImpulse> ColliderEventImpulseGroup;
        public ComponentDataFromEntity<PhysicsVelocity> PhysicsVelocityGroup;

        public void Execute(CollisionEvent collisionEvent)
        {
            Entity entityA = collisionEvent.Entities.EntityA;
            Entity entityB = collisionEvent.Entities.EntityB;

            bool isBodyADynamic = PhysicsVelocityGroup.Exists(entityA);
            bool isBodyBDynamic = PhysicsVelocityGroup.Exists(entityB);

            bool isBodyARepulser = ColliderEventImpulseGroup.Exists(entityA);
            bool isBodyBRepulser = ColliderEventImpulseGroup.Exists(entityB);

            if(isBodyARepulser && isBodyBDynamic)
            {
                var impulseComponent = ColliderEventImpulseGroup[entityA];
                var velocityComponent = PhysicsVelocityGroup[entityB];
                velocityComponent.Linear = impulseComponent.Impulse;
                PhysicsVelocityGroup[entityB] = velocityComponent;
            }
            if (isBodyBRepulser && isBodyADynamic)
            {
                var impulseComponent = ColliderEventImpulseGroup[entityB];
                var velocityComponent = PhysicsVelocityGroup[entityA];
                velocityComponent.Linear = impulseComponent.Impulse;
                PhysicsVelocityGroup[entityA] = velocityComponent;
            }
        }
    }

    protected override JobHandle OnUpdate(JobHandle inputDeps)
    {
        JobHandle jobHandle = new CollisionEventImpulseJob
        {
            ColliderEventImpulseGroup = GetComponentDataFromEntity<CollisionEventImpulse>(true),
            PhysicsVelocityGroup = GetComponentDataFromEntity<PhysicsVelocity>(),
        }.Schedule(m_StepPhysicsWorldSystem.Simulation, 
                    ref m_BuildPhysicsWorldSystem.PhysicsWorld, inputDeps);

        return jobHandle;
    }
} `

It may produce job dependency problems. You can look at this post on unity forum about this problems: [Post on Unity Forum](https://forum.unity.com/threads/how-to-detect-collisions-with-unity-physics.743534/#post-5377194)
After the standalone build, the subscene is not loading while runs in the windows system. But it works fine in the editor. Why, what is the problem?
Updated UnityPhysicsSamples

Running HelloCube/3.SubScene or StreeTests/LODSubSceneTest will freeze unity version 2019.3.0f1
After importing Entities (v1.1.1) into unity through the package manager, the console was being repeatedly logged with the following errors:

`Library\PackageCache\com.unity.burst@1.1.2\Runtime\BurstCompiler.cs(50,83): error CS0117: 'BurstCompilerService' does not contain a definition for 'GetCurrentExecutionMode'`

`Library\PackageCache\com.unity.burst@1.1.2\Runtime\BurstCompiler.cs(42,49): error CS0117: 'BurstCompilerService' does not contain a definition for 'SetCurrentExecutionMode'`
Hi, I'm trying to create a custom ecs physics joint

I see the following metadata in the Unity.Physics.dll : `JointData.Create( Math.MTransform aFromJoint, Math.MTransform bFromJoint, Constraint[] constraints )` 

Which is being used in `LimitDOFJoint` and in there there is this line in the comments:
> `...This is achieved by combining the appropriate lower level 'constraint atoms' to form the higher level Joint.`

What do the atoms mean ? where can i read more the constraints * input argument ? Is there an easier way creating custom joints instead ?
error:
```
Internal: JobTempAlloc has allocations that are more than 4 frames old - this is not allowed and likely a leak
To Debug, enable the define: TLA_DEBUG_STACK_LEAK in ThreadsafeLinearAllocator.cpp. This will output the callstacks of the leaked allocations
```

There have been numerous reports of this issue over the past two years, but no answers on how to actually either
1. Enable this flag to report what allocation is suspected of having a leak.
2. Some other workaround to find the actual cause of leaks.

Suggestions have ranged from "restart unity" to "it's harmless". Restarting occasionally fixes some leaks, but that's not going to help me debug in general. Specific code is not what this issue is about, but in my case my game is working fine, but my unit tests were flaky because _one_ of my unit tests had a leak and it caused a random unit test later on to fail. It was a one line fix that took forever to find. It would have been five minutes if Unity had allowed me to enable debugging on _which_ allocation is having an issue.

Happy to open an issue somewhere else if this is not the correct forum.
In  	Spawner_ForEachWithEntityChanges.cs the following code:

for (int x = 0; x < CountX; x++)
            {
                for (int y = 0; y < CountX; y++)
                {

The second for loop should go to CountY rather than CountX. I changed values and it was wrong because of the y loop error.

use boidexample as scene 0, build master build, game frozen with high cpu usage, no visual, not responding

runs fine if it's il2cpp release build.

call stack of the dump

 	ntdll.dll!NtReleaseSemaphore()	Unknown
 	KERNELBASE.dll!ReleaseSemaphore()	Unknown
 	UnityPlayer.dll!CappedSemaphore::Signal(int)	Unknown
 	UnityPlayer.dll!JobBatchDispatcher::~JobBatchDispatcher(void)	Unknown
 	UnityPlayer.dll!JobHandle_CUSTOM_ScheduleBatchedJobsAndComplete(struct JobFence &)	Unknown
 	[Inline Frame] GameAssembly.dll!JobHandle_ScheduleBatchedJobsAndComplete_mF69F070E0ADFDD88FE72B57143BF6BF29B27F80D(JobHandle_tDA498A2E49AEDE014468F416A8A98A6B258D73D1 *) Line 15396	C++
 	[Inline Frame] GameAssembly.dll!JobHandle_Complete_m5EFD637001D6A9E0528E60C294FCA5354FD1E797(JobHandle_tDA498A2E49AEDE014468F416A8A98A6B258D73D1 *) Line 15367	C++
 	GameAssembly.dll!EntityManager_AddComponent_m7D2A036C596FD40842206A709019AE9CF4C70150(EntityManager_tD03BBAE8A03BE6E803E142278B44DADB1F999C14 * __this, UnsafeMatchingArchetypePtrList_t35177C957F260B440EBFE45DD90F42639DDFAA18 ___archetypeList0, EntityQueryFilter_t8094C471CFB0EB9B8AEAA945A46E183CEDEC79AB ___filter1, ComponentType_tC4D03CEDBA5BCBA47001797965E7CF939CFBDAF1 ___componentType2, const MethodInfo * method) Line 15781	C++
 	GameAssembly.dll!EntityManager_AddComponent_m75599D8A5FFF4D7C41616F915EB68B8710C229FB(EntityManager_tD03BBAE8A03BE6E803E142278B44DADB1F999C14 * __this, EntityQuery_t76BED15925C813EF17FA4A29A4D9262AB62AD76A * ___entityQuery0, ComponentType_tC4D03CEDBA5BCBA47001797965E7CF939CFBDAF1 ___componentType1, const MethodInfo * method) Line 15348	C++
 	[Inline Frame] GameAssembly.dll!EntityManager_AddComponent_TisDeclaredReferenceObjectsTag_tF14F574CD666A3022D4E02555AF6DEF93BF40911_mE5C3305D03F03A292FB3DD98DF6B8CCC1E9CB24B_gshared(EntityManager_tD03BBAE8A03BE6E803E142278B44DADB1F999C14 *) Line 25932	C++
 	[Inline Frame] GameAssembly.dll!EntityManager_AddComponent_TisDeclaredReferenceObjectsTag_tF14F574CD666A3022D4E02555AF6DEF93BF40911_mE5C3305D03F03A292FB3DD98DF6B8CCC1E9CB24B(EntityManager_tD03BBAE8A03BE6E803E142278B44DADB1F999C14 *) Line 11281	C++
 	GameAssembly.dll!GameObjectConversionUtility_DeclareReferencedObjects_m86BDCC1A908C7016335A33B423FA49299338B354(World_tEEA075348FAEC96EE224554FCDED78254768804E * ___gameObjectWorld0, GameObjectConversionMappingSystem_t6A9AECD0692DEAB55D3D7628E85BE03B1BBA1812 * ___mappingSystem1, const MethodInfo * method) Line 19682	C++
 	GameAssembly.dll!GameObjectConversionUtility_Convert_m02676BCB0DB177EF55173F8CCF1C69263863F7F1(World_tEEA075348FAEC96EE224554FCDED78254768804E * ___gameObjectWorld0, const MethodInfo * method) Line 19810	C++
>	GameAssembly.dll!ConvertToEntity_ConvertHierarchy_mB53322FB042977C5F126434561BBA8EE4EE28373(GameObject_tBD1244AD56B4E59AAD76E5E7C9282EC5CE434F0F * ___root0, const MethodInfo * method) Line 17190	C++
 	GameAssembly.dll!RuntimeInvoker_TrueVoid_t22962CB4C05B1D89B55A6E1139F0E87A90987017(void(*)() methodPointer, const MethodInfo * methodMetadata, void * obj, void * * args) Line 41897	C++
