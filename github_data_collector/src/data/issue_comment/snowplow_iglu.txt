All components migrated to their own repositories. We need to list these repos and figure out what to do with this umbrella repository.

Fixed dead link
Right now if client requests `1-0-1`, but it does not exist, entity just fails with "schema not found". @dilyand is wondering if instead it can fallback to `1-0-0`.

A counterargument: client defined `1-0-0` schema with some keys. Then sends an event with `1-0-1`  unkown `bar` key of length 30, it falls back to `1-0-0`. Then client uploads `1-0-1` with `bar` `maxLength` 10. We have a falsely valid entity.

A counterargument to  conterargument: if `1-0-0` validates this unknown `bar` it must have `additionalProperties: true`. In that case next schema with defined `bar` should not be an ADDITION.
Just updated a schema in one of embedded registries and realized how easy it can get out of sync with main Iglu registry.

Illustrative scenario: we have some schema-ed `Foo(enum: Bar | Baz)` entity in a spark job that needs to be:

1. Parsed from JSON
2. Validated by Iglu client
3. Decoded into `Foo(Bar)` or `Foo(Baz)` class

Decoder knows that `Bar` and `Baz` are acceptable values. However once we add `Qux` to list of acceptable values - schema will get out of sync.

With `sbt-iglu-push` we can configure an SBT task to derive schema from decoder and push it to Iglu Server during CI/CD.

Kind of reverse of https://github.com/snowplow/iglu/issues/88 (which is Schema -> Class definition, while we have Class definition -> Schema, which is much more approachable)

I tried to follow up with the first step for proposed plan in #371 . 

There is no serious logic change. It is just moving codes around. Please support with your comments.

cc: @nafid @zakipatel
https://spacetelescope.github.io/understanding-json-schema/structuring.html

This was raised multiple times, mostly in order to reduce boilerplate code, but we never actually considered it closely enough. Now @dilyand found another good application for it in data-modeling with graph-oriented DBs.

Wondering if this should classic JSON Schema `$ref` or we can use `iglu:`-protocol to link schemas.
Several applications group schemas by `vendor` field, but there's two different behaviours.

1. `com.acme.marketing`-schemas are subset of `com.acme`
2. `com.acme.marketing` is independent of `com.acme`

I believe first behavior is correct. The whole point of vendor is to provide proper namespacing and namespacing assumes hierarchy.

- [ ] Documentation
- [ ] Scala Iglu Client
- [ ] Scala Repo Server
- [ ] (probably) Schema DDL
