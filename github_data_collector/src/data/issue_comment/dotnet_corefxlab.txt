Updates for #2788.

Also added the `OrderByDescending` function.
I’ve had time to check some of the APIs now and this is my feedback. Sorry if I have missed something that already exists. I just tested this yesterday so please forgive any mistakes.

Before saying anything else, I would just like to say that I think this whole initiative is awesome! So happy to see these ideas coming to dotnet. **Great job**.

Quick background on me is that I work in the finance industry dealing heavily with time series data of all kinds. Currently we use a mix of dotnet, python, R and MATLAB. My favored dotnet language for data analysis is F# (which will be reflected below).

## Fsharp Interface
Is there an F# tailored interface?

I didn’t see one and while it’s possible to use all features the differences between F# and C# really stand out for some operations. Example (grid approximation of posterior distribution):

```F#
let l2 = ps1 |> Array.map (fun p -> Binomial.PMFLn(p, n2, k2))
let p2 = ps1 |> Array.map (fun p -> ContinuousUniform.PDFLn(0., 1., p))
let l2Col = PrimitiveDataFrameColumn(“Likelihood”, l2)
let p2Col = PrimitiveDataFrameColumn(“Prior”, p2)
let bdf2 = DataFrame(l2Col, p2Col)

// The unstandardized likelihood.
bdf2.[“UnstdPostLn”] <- bdf2.[“Likelihood”] + bdf2.[“Prior”]

// What I really want to do is the equivalent of pandas “assign” operation. I want to create a new column based on existing columns
// in a non-trivial way. The only alternative I found was to clone and then apply elementwise.
bdf2.[“UnstdPost”] <- bdf2.[“UnstdPostLn”].Clone()

// Here, type information is lost so I have to cast. Then I have to work with nullable which is a pain.
// F# has good support for a lot of nullable operators but no support for when you want to apply functions like exp.
(bdf2.[“UnstdPost”] :?> PrimitiveDataFrameColumn).ApplyElementwise(fun (x: Nullable) i -> Nullable(exp x.Value))

// Normalizing constant
let evidence2 = bdf2.[“UnstdPost”].Sum() :?> float
bdf2.[“StdPostLn”] <- bdf2.[“UnstdPost”] – log evidence2

// Final, standardized posterior approximation. Same issues as before.
bdf2.[“StdPost”] PrimitiveDataFrameColumn).ApplyElementwise(fun x i -> Nullable(exp x.Value))
```

I don’t think this code is that nice from an F# perspective. I would hope that some of these quirks can be done away with either by tailoring an interface for F# or by making some other adjustments, discussed below.

## Extend the concept of an index

In other dataframe solutions the concept of an index column takes a central role. Usually this is an integer or a datetime. This then enables easy joins and with new timeseries and other operations. One example for timeseries data is resampling. That is, given data on a millisecond basis I may want to resample that data to seconds and perform a custom aggregation in doing so (see pandas resample).

In the NET implementation, there is an index but it’s always integer based and you can’t supply it when creating a series (data frame column). This makes it harder than would have to be to quickly put together a dataframe from disparate data sources. Requiring the length
of all columns to be the same is not good enough for production use and inhibits productivity.

See pandas or deedle:

[index](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.html)
[series](https://pandas.pydata.org/pandas-docs/stable/reference/series.html)

## Missing values treatment

On the dataframe there is a DropNulls operation but not when working on individual columns?

From my previous code example, what I could have been OK with would have been to drop all nulls from the column and then call Apply with my custom function, not having to deal with Nullable. This would have given me a new column where I have my index info (datetime) together with my new values. Then I would assign that to a new column in my dataframe. For the indices where I am missing values, the dataframe would just know that.

Currently that’s not possible (?) and it makes anything non-trivial a hassle.

## Time series operations

The dataframe comes from the world of time series analysis in different forms. I think the design and implementation should recognize and honour that. Otherwise I don’t see the point as that’s where practically all applications lie.

This means out-of-the-box support for standard calculations such as moving averages. Much of this can of course be done in a third-party library but at least the necessary concepts have to exist. As I see it this is primarily what’s called “window”-functionality. In deedle and pandas it’s possible to perform windowed calculations. Either a moving window of a fixed size or an expanding window that adds a new row for each iteration. This is really useful for smoothing data and the expanding functionality is very powerful for making sure that all computations are done in a chronologically consistent way (no benefit of hindsight).

See pandas or deedle:

[windowing](https://pandas.pydata.org/pandas-docs/stable/reference/window.html)

## Summary

Great initiative. Please improve F# experience, introduce concept of an index (usually datetime-based) and put time series analysis in center-stage.

The MultiValueDictionary should have extension method to convert a collection to MultivalueDictionary
I have a very basic question, which in my opinion didn't get covered in the annoucement.
https://devblogs.microsoft.com/dotnet/an-introduction-to-dataframe/

Why should one use DataFrame?
I don't understand in what cases should I move from DataTable or Classes?

I currently only see a use case for https://github.com/dotnet/spark
but why would I only use DataFrame, instead of existing stuff?

And even with Spark I would question, why did DataFrame get introduced at all? Why not DataTable? Or a class eg. Data<T1, T2, T3, T4> (T1...T4 as an example for four columns)

I believe everything that was demonstrated in the annoucement can be achieved with a simple class and LINQ queries, to make it more dynamically one could use ExpandoObject.

If possible could you provide me some sort of guidline that IMHO should cover those questions atleast.

- In what cases would one use DataFrame, what are the advantages and disadvantages?
- How does it compare to existing tools?
- When to use DataFrame with or without Spark?
- How does DataFrame and/or Spark interact with an SQL Server? When should you use "standard" SQL queries, and when to use Spark SQL or load data into DataFrame and call Filter? eg. does Spark translate Spark SQL to "standard" SQL query, or does it basically get everything (selct * from foo) on SQL Server and than exectue its query in-memory without the SQL Server? Without Spark, should you read everything (select * from foo) and fill the DataFrame with every row and afterwards call Filter on the DataFrame to get the subset, or filter on SQL Server? If the filter should happen on SQL Server, isn't the Filter method on DataFrame useless in the combination with SQL Server?
- How does DataFrame work with an ORM eg. EntityFramework?
- How would this new DataSource be introduced into exsting controls? eg. bind DataFrame with DataGrid
- What is the roadmap? Only found one for Spark https://github.com/dotnet/spark/blob/master/ROADMAP.md
- Is DataFrame and/or Spark equally good for small (as little as 1) and big data (as big as you can dream)?
- If DataFrame is in anyway more efficient in memory/performance of querying your data in memory, will it at some point in the future supersede a "simple" List and LINQ queries? Or will LINQ queries run DataFrame operations in the Background? eg. fooList.Where(x => x.Foo == "HelloWorld") -> will instead of foreach the enumerate, transform the fooList to a DataFrame than execute the query on this, and than build and return a new list?
I added static factory methods only for the constructor overloads where type inference is possible. 

I experimented with adding overloads for all constructors, but for the overloads where `values` are not provided it didn't feel helpful. It seemed weird to do `DataFrameColumn.Create("foo")` and get back `StringDataFrameColumn`. (Also seemed like a bad idea because it would preclude adding any other "special" DataFrameColumn types in the future).

I also thought it would be inconsistent to allow `DataFrameColumn.Create<int>("Foo")` but not have any counterpart for `String`. Please let me know if you disagree, if so I can add the other overloads back in.
Hello,

The `Sample` method in `DataFrame` (code [here](https://github.com/dotnet/corefxlab/blob/master/src/Microsoft.Data.Analysis/DataFrame.cs#L325)) does not check if an index was already generated by `rand`. Most of the time I get duplicate rows because of it.
I'm trying out the `Microsoft.Data.Analysis` and was looking for a method that applies a `Func<,>` but returns the result as an array of values (maybe not efficient) or a column, just like in Pandas.

Here's what I'm currently doing:
```csharp
public static PrimitiveDataFrameColumn<TResult> Apply<T, TResult>(this PrimitiveDataFrameColumn<T> column, 
    Func<T, TResult> func) 
    where T : unmanaged
    where TResult : unmanaged
{
    var resultColumn = new PrimitiveDataFrameColumn<TResult>(string.Empty, 0);

    foreach (var row in column)
        resultColumn.Append(func(row.Value));

    return resultColumn;
}
```

Example usage:
```csharp
var birthdayColumn = df["Birthday"] as PrimitiveDataFrameColumn<DateTime>;
var currentYear = DateTime.Now.Year;
df["Age"] = birthdayColumn.Apply(d => currentYear - d.Year);
df.PrettyPrint();
```

Thank you!
I attempted to install the latest System.IO.FileSystem.Watcher.Polling nuget preview (0.1.1-preview2-190117-2) into my .net Core library and was getting a Rollback due to Signing issues. Is this package going to rebuilt for later .net core versions ? or is it no longer maintained with no planned future?

> Error	NU3027	Package 'System.IO.FileSystem.Watcher.Polling 0.1.1-preview2-190117-2' from source 'https://dotnet.myget.org/F/dotnet-corefxlab/api/v3/index.json': The signature should be timestamped to enable long-term signature validity after the certificate has expired.	

> Error	NU3018	Package 'System.IO.FileSystem.Watcher.Polling 0.1.1-preview2-190117-2' from source 'https://dotnet.myget.org/F/dotnet-corefxlab/api/v3/index.json': The author primary signature found a chain building issue: A certificate chain processed, but terminated in a root certificate which is not trusted by the trust provider.	

If I switch to the previous version I then get:
Severity	Code	Description	Project	File	Line	Suppression State	Suppression State
Error	NU1202	Package System.IO.FileSystem.Watcher.Polling 0.1.1-preview2-190117-1 is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Package System.IO.FileSystem.Watcher.Polling 0.1.1-preview2-190117-1 supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1)
At the moment, the generic binary operations APIs check `value` and call the overload that takes in a `DataFrameColumn` when appropriate. 2 things need to be done:

1. The `ReverseBinaryOperations` need to support the same pattern
2. The binary operations APIs that take a `DataFrameColumn` should become protected. 
We are using `Unsafe.As` to cast a `Memory<byte>` to a `Memory<T>`, and on .NET Framework this doesn't work.

https://github.com/dotnet/corefxlab/blob/86fa8eeb25d8e730ff204e3f017e230b802c9b50/src/Microsoft.Data.Analysis/ReadOnlyDataFrameBuffer.cs#L26-L33

Later, when we use this memory object, it throws:

```
System.InvalidCastException : Unable to cast object of type 'System.Byte[]' to type 'System.Int32[]'.
  Stack Trace: 
    ReadOnlyMemory`1.get_Span()
    BufferTests.TestArrowStringColumnGetReadOnlyBuffers() line 264
```

We need to figure out a better way to implement this method.