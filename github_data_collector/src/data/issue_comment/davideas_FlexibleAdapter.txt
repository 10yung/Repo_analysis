Does the library support shared recycledViewPools ?

I have a tablayout with FragmentPagerAdapter and several tabs that each use the same FlexibleAdapter which consists of AbstractExpandableItem as items with AbstractFlexibleItem as subitems.
 
The ExpandableViewHolder toggles the expansion on item click:

                view.setOnClickListener(v ->
                {
                    toggleExpansion();
                });

which works without problems.

Since the ViewHolders in each tab/adapter are the same, I decided to use a shared ViewPool for the RecyclerView that gets initialized in the parent fragment to reduce the calls to onCreateViewHolder().
Now I have the problem though, that sometimes when toggleExpansion() gets called, nothing happens at all. The item is not collapsed or expanded. I guess it's the case when the adapter uses a viewholder from another tab because without the recycledViewPool, everything is working fine.

Hi, is there a better way to implement countdown timer for multiple views and dispose them once adapter is dumped?

 java.lang.IndexOutOfBoundsException: Index: -1, Size: 8
        at java.util.ArrayList.addAll(ArrayList.java:613)
        at eu.davidea.flexibleadapter.FlexibleAdapter.performInsert(FlexibleAdapter.java:2954)
        at eu.davidea.flexibleadapter.FlexibleAdapter.showHeaderOf(FlexibleAdapter.java:1560)
        at eu.davidea.flexibleadapter.FlexibleAdapter.showOrUpdateHeaders(FlexibleAdapter.java:2980)
        at eu.davidea.flexibleadapter.FlexibleAdapter.addItems(FlexibleAdapter.java:2943)
        at eu.davidea.flexibleadapter.FlexibleAdapter.addItem(FlexibleAdapter.java:2911)
        at eu.davidea.flexibleadapter.FlexibleAdapter.addItemToSection(FlexibleAdapter.java:3204)
How can i implement swipe menu like in IOS.
Is there a way using this library ?
And if not, this can be added feature to this library.

I am creating a messaging screen and am using the Endless Scroll Listener to lazy load old messages. Here is my problem.  Currently the callback for `onLoadMore` is only called when you hit the last item minus the threshold. This works great in most cases but imagine this scenario:

Message API Limit = 10 messages

I am saving my messages to disk. I have a conversation with 50 messages in it.  Then I don't use the app for months. Let's say 50 more messages have been sent to me since I last opened the app. I now have 100 total messages in the server.  I open the app again and go to this conversation. The 50 messages that were saved to disk will show. Then I will pull down the latest 10 messages, but I won't try loading more messages until I reach the end of the list.  So I have in effect missed out on 40 messages. (10 messages from initial load, plus the 50 stored in the database) 

Is there a way to be notified every time I scroll 10 messages so I can download the next 10 messages, whether they are needed to be downloaded or not? Is there a better way to solve this problem that I am not seeing? 




Correct me if I'm wrong with there isn't seem to be a scrollToPosition method. I have a list with over 5K items and I'd like to scroll to top quickly. Smooth Scroll is not a good option for me.

How would one achieve this?

- Checked on 5.1.0 version of library with android 6.0 (emulator)
- I have single times exapandable items containing lists of not expandable sub items in FlexibleAdapter.
- All items there are static once added they are not reordered during lifetime of `FlexibleAdapter`
- Whenever user inputs filter into `TextView filterInput`  `TextWatcher.afterTextChanged ` is calling `FlexibleAdapter.filter`. All expandable filtered views are expanded (this is correct behavior), it is done automatically by library. 
-  Then, I have a button which clears filter input. Whenever button is clicked `filterInpt` text is set to `""` and  `TextWatcher.afterTextChanged ` is also called, so filter again occurs. It finishes with all closed restored views. 
- I need now to expand all expandable views to show sub items, but whenever i call `Flexible.expandAll` after filter is finished it is not working. I tried with delay to expand views (500 ms) but this either do not expand views (for some items they are expanded but not all ). 
- I also tried with `FlexibleAdapter.OnFilterListener ` (with delay or without) but this does behave the same.
- This seems like expand does work as, when i click on expandable item it is shown as expanded. but There are not subitems there so i need to collapse it and expand manually and then subitems are there agian
- Calling `FlexibleAdapter.collapseAll` and then `FlexibleAdapter.expandAll` with delay workarounds the issue.

Hi @davideas! Seems like this NPE issue is still not addressed after the [c2be014](https://github.com/davideas/FlexibleAdapter/commit/c2be014d677f9fda08b0b507ca17dacd1d3fdecf). Its still throwing NPE's. Now at the line [4470 of FlexibleAdapter.applyAndAnimateRemovals()](https://github.com/davideas/FlexibleAdapter/blob/10933e8501a15f6fc9c6ecdfafc4bb8732a58e34/flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java#L4470).

For the background: I cloned this repository master branch with the commit having hash identifier 10933e8, and built the library as .aar, and included that to our project. This NPE crash at FlexibleAdapter.applyAndAnimateRemovals is top 1 crash for our app. I wished that  [c2be014](https://github.com/davideas/FlexibleAdapter/commit/c2be014d677f9fda08b0b507ca17dacd1d3fdecf) would have fixed this issue, but it didn't. It still happens randomly to users. There doesn't seem to be any connecting pattern based on device model or brand or Android OS version.

Here is stack trace from the crash reporting for the NPE crash: 

`Fatal Exception: java.lang.RuntimeException: An error occurred while executing doInBackground()
       at android.os.AsyncTask$3.done + 318(AsyncTask.java:318)
       at java.util.concurrent.FutureTask.finishCompletion + 354(FutureTask.java:354)
       at java.util.concurrent.FutureTask.setException + 223(FutureTask.java:223)
       at java.util.concurrent.FutureTask.run + 242(FutureTask.java:242)
       at java.util.concurrent.ThreadPoolExecutor.runWorker + 1133(ThreadPoolExecutor.java:1133)
       at java.util.concurrent.ThreadPoolExecutor$Worker.run + 607(ThreadPoolExecutor.java:607)
       at java.lang.Thread.run + 762(Thread.java:762)`

`Caused by java.lang.NullPointerException: Attempt to invoke virtual method 'int java.lang.Integer.intValue()' on a null object reference
       at eu.davidea.flexibleadapter.FlexibleAdapter.applyAndAnimateRemovals + 4470(FlexibleAdapter.java:4470)
       at eu.davidea.flexibleadapter.FlexibleAdapter.animateTo + 4404(FlexibleAdapter.java:4404)
       at eu.davidea.flexibleadapter.FlexibleAdapter.animateDiff + 4380(FlexibleAdapter.java:4380)
       at eu.davidea.flexibleadapter.FlexibleAdapter.access$1900 + 90(FlexibleAdapter.java:90)
       at eu.davidea.flexibleadapter.FlexibleAdapter$FilterAsyncTask.doInBackground + 5625(FlexibleAdapter.java:5625)
       at eu.davidea.flexibleadapter.FlexibleAdapter$FilterAsyncTask.doInBackground + 5584(FlexibleAdapter.java:5584)
       at android.os.AsyncTask$2.call + 304(AsyncTask.java:304)
       at java.util.concurrent.FutureTask.run + 237(FutureTask.java:237)
       at java.util.concurrent.ThreadPoolExecutor.runWorker + 1133(ThreadPoolExecutor.java:1133)
       at java.util.concurrent.ThreadPoolExecutor$Worker.run + 607(ThreadPoolExecutor.java:607)
       at java.lang.Thread.run + 762(Thread.java:762)`
Android 10
- [ ] Increase the SDK to 29 because Android 10 has just been released.
