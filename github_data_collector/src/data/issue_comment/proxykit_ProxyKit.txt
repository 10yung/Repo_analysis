## ProxyKit 2.3.0 on ASP.NET Core 3.1

Implement a typed `ProxyHanlder` and inject a scoped service inside its constructor:
```c#
public class ProxyHandler : IProxyHandler
{
    private IScopedService _scopedService;

    public ProxyHandler(IScopedService scopedService)
    {
        _scopedService = scopedService;
    }
}
```
```c#
services.AddSingleton<ProxyHandler>();
```
Alright we'll get the expected result:

```
Error while validating the service descriptor 'Service`
Type: App.ProxyHandler Lifetime: Singleton ImplementationType: 'App.ProxyHandler': Cannot consume scoped service 'App.IScopedService ' from singleton 'App.ProxyHandler'.
```

To resolve the issue we going to change the `ProxyHanlder` to scoped lifetime:

```c#
services.AddScoped<ProxyHandler>();
services.AddScoped<IProxyHandler,ProxyHandler>();
```
And again we'll face another issue:

```
 Cannot resolve scoped service 'App.ProxyHandler' from root provider.
```
This issue made by this [line](https://github.com/proxykit/ProxyKit/blob/master/src/ProxyKit/ProxyMiddleware.cs#L17) in the `ProxyMiddleware`. Only the singleton lifetime services are allowed to inject in a middleware constructor.

We could resolve this issue by injecting the `ProxyHanlder` in the `Invoke` method instead of the constructor.  

I could open a PR.



adds https://github.com/SimonCropp/MarkdownSnippets 

@damianh i am weary to propose the addition of one of my libs to someone else projects, but figured you might find this useful? if not happy to abandon this one.

I converted half the snippets. if you like the idea i will finish the rest
Support set timeout dynamically.
## Use case(s)

I want to leverage [endpoint routing](https://rolandguijt.com/endpoint-routing-in-asp-net-core-2-2-explained/) internally and on additional capabilities on ProxyKit APIs.

## Description

- Endpoint routing will allow embeddeding of ProxyKit into the routing table rather than just being a terminating middleware. It will allow for interesting additional scenarios such as extrating route parameters for use in proxying decisions.
- AspNetCore2.2 introduced endpoint routing. However ANC2.2 required netcoreapp2.2 which is not LTS. ProxyKit aligns with _latest_ LTS version of AspNetCore(and dotnet core as they are now shipped together).
- netcoreapp3.0 is not LTS so will drop that now that netcoreapp3.1 is released.

## Alternatives

None

## Additional context

None
## Use case(s)

When a proxied request fails (eg, returns an internal server error), I would like to see this in my logs as a warning or error.

## Description

To reduce noise I only log warnings and above.
When the forwarded request fails (eg, anything but 2XX level http codes), I would like to have an easy way to log it without having to drop my log level to info or create custom Logging filter. Currently it seems to log any response, regardless of the response code, at the info level. 

## Alternatives

Could potentially use NLog filtering to log the messages I'm interested in:

    <logger name="System.Net.Http.HttpClient.ProxyKitClient.*" minlevel="Info" writeTo="database">
      <filters>
        <when condition="ends-with('${message}','- OK') or not contains('${message}', 'End Processing')" action="Ignore" />
      </filters>
    </logger>
## Version(s) 2.2.1

## To reproduce

1. start websocket server in localhost:88
2. create a mvc project, proxy websoket to localhost:88

## Expected behavior

The agent functions normally 

## Actual behavior

The current websocket agent will disconnect immediately upon success to localhost:88 

## Workarounds

chang the localhost to ip(127.0.0.1)  is work


Can we use polly : https://github.com/App-vNext/Polly  to create resilience and transient-fault-handling
at WebSocketProxyMiddleware.cs
private Task ProxyOutToWebSocket(HttpContext context)
{
    var relativePath = context.Request.Path.ToString().TrimStart('/');
    var upstreamUri = _getUpstreamHost(context);
    var uriWithPath = new Uri(
        upstreamUri.Uri,
        relativePath.Length >= 0 ? relativePath : "");

    var uriBuilder = new UriBuilder(uriWithPath)
    {
        Query = context.Request.QueryString.ToUriComponent()
    };

    _logger.LogInformation("Forwarding websocket connection to {0}", uriBuilder.Uri);

    return AcceptProxyWebSocketRequest(context, uriBuilder.Uri);
}

if this line:
var upstreamUri = _getUpstreamHost(context);
move to above the:
var relativePath = context.Request.Path.ToString().TrimStart('/');
Will give proxykit to do some custom routing things ability by change context.Request.Path property at outside.
Could you modify this code please?
Thank you.
Forward the request to the specified upstream uri.
AspNetCore3.0 shipped with a feature to propagate headers. Add a recipe that shows how it can be used with ProxyKit.

Also add example of doing same with an extension method (which would allow finer control than the ANC middleware).

https://github.com/alefranz/HeaderPropagation
https://www.nuget.org/packages/Microsoft.AspNetCore.HeaderPropagation/
https://github.com/aspnet/AspNetCore/pull/7921