https://github.com/zxh0/jvm.go/blob/58a552e9517d340e1147f32db2761d7dd8423ecb/jvmgo/rtda/heap/class_loader.go#L256

This line of code should count the instance fields recursively. While the class.superClass.instanceSlotCount hasn't been initialized, its value is 0.
I just developed an interesting JVM with Java which can run itself. The most important part of the bytecode interpreter is a switch statement. Is your approach different?

Here is my implementation:
https://gitlab.com/neoexpert/jvm
maybe jvmgo can run it? Can jvmgo run a jar file?
With my implementation you can do:
`java -jar java.jar -jar java.jar HelloWorldClass
`
Here is the bytecode interpreter:
https://gitlab.com/neoexpert/jvm/blob/master/jvm/src/main/java/com/neoexpert/jvm/executor/RawByteCodeExecutorNativeLong.java
hi, i want to build a project about lightweight java vm for blockchain.  who has interesting in it?

Currently, there is no support for invokedynamic, I know that is a bit hard to implement, but since Java 8/lambdas, invokedynamic is very present in Bytecode.

Useful references for implementation:
- [Invoke dynamic specification](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.invokedynamic)


Question, has anyone successfully developed and deployed an app written in go on the jvm using websockets? 

my test class

``` java
public class Main{
    public static void main(String args[]){
        System.out.println("Hello World");
    }   
}
```

and my java version

> work@work-desktop:~/workspace/tmp$ echo $JAVA_HOME
> /usr/local/etc/jdk1.8.0_45

and i run javac Main.java and java Main,it succ

> work@work-desktop:~/workspace/tmp$ javac Main.java
> work@work-desktop:~/workspace/tmp$ java Main
> Hello World

but when i run 

> jvmgo -XuseJavaHome -cp ./ Main

it fail with such error

> panic: runtime error: invalid memory address or nil pointer dereference
> [signal 0xb code=0x1 addr=0x1 pc=0x80cca78]
> goroutine 1 [running]:
> github.com/zxh0/jvm.go/jvmgo/classpath.funcÂ·001(0x1850be90, 0x23, 0x0, 0x0, 0xb7714c70, 0x18538940, 0x0, 0x0)
>     /home/work/workspace/go/src/github.com/zxh0/jvm.go/jvmgo/classpath/entry_wildcard.go:18 +0x58
> path/filepath.Walk(0x1850be90, 0x23, 0x1851b668, 0x0, 0x0)
>     /usr/local/go/src/path/filepath/path.go:392 +0x97
> github.com/zxh0/jvm.go/jvmgo/classpath.newWildcardEntry(0x1850be90, 0x24, 0x4)
>     /home/work/workspace/go/src/github.com/zxh0/jvm.go/jvmgo/classpath/entry_wildcard.go:28 +0xa9
> github.com/zxh0/jvm.go/jvmgo/classpath.(*ClassPath).parseBootAndExtClassPath(0x185300b0)
>     /home/work/workspace/go/src/github.com/zxh0/jvm.go/jvmgo/classpath/class_path.go:28 +0x252
> github.com/zxh0/jvm.go/jvmgo/classpath.Parse(0xbfaab4ab, 0x2, 0x831af40)
>     /home/work/workspace/go/src/github.com/zxh0/jvm.go/jvmgo/classpath/class_path.go:16 +0x4c
> github.com/zxh0/jvm.go/jvmgo/jvm.Startup(0x18538920)
>     /home/work/workspace/go/src/github.com/zxh0/jvm.go/jvmgo/jvm/jvm.go:32 +0xfe
> main.main()
>     /home/work/workspace/go/src/github.com/zxh0/jvm.go/jvmgo/main.go:15 +0x68
> goroutine 2 [runnable]:
> runtime.forcegchelper()
>     /usr/local/go/src/runtime/proc.go:90
> runtime.goexit()
>     /usr/local/go/src/runtime/asm_386.s:2287 +0x1
> goroutine 3 [runnable]:
> runtime.bgsweep()
>     /usr/local/go/src/runtime/mgc0.go:82
> runtime.goexit()
>     /usr/local/go/src/runtime/asm_386.s:2287 +0x1
> goroutine 4 [runnable]:
> runtime.runfinq()
>     /usr/local/go/src/runtime/malloc.go:712
> runtime.goexit()
>     /usr/local/go/src/runtime/asm_386.s:2287 +0x1

am i wrong? and how to fix that problem?
thank you!

Hi, how's support for cross platform GUO e.g. swing?

I tried to execute this code using `jvmgo`

```
import java.util.*;
class prime {
        public static void main(String[] args) {
                ArrayList<Integer> res = new ArrayList<Integer>();
                int last = 3;
                res.add(last);
                while(true) {
                        last = last + 2;
                        boolean prime = true;
                        for(int v : res) {
                                if(v*v>last) break;
                                if(last%v == 0) {
                                        prime = false;
                                        break;
                                }
                        }
                        if(prime) {
                                res.add(last);
                                if(res.size()%100000 == 0) System.out.println(last);
                                if(last>9999999) break;
                        }
                }
        }
}
```

but it took too much time, more than `578.62`s (I terminate execution because it took too long), for comparison openjdk 8u40 gives complete output within `1.23`s

OS: 64-bit ArchLinux
Kernel version: `3.18.7-1`
Processor: `i3-4150`
RAM: `16GB`

It would be good to clarify the legal status of using this JVM implementation and whether it is a clean room implementation of Java (http://stackoverflow.com/questions/2575362/java-jce-providers-what-does-clean-room-implementation-mean) or not.

Also it would be interesting to look at pure open source (i.e. without patent nightmares!) rt.jar to package with your VM.

One thing I've been wishing for - for an age - is a lightweight Java alternative. I.e. Java 8 syntax - but only that - different rt.jar different memory management options, everything else redesigned to allow for no bloat and fast initialization. I suppose basically Android on the desktop :-) :-) Java 9 is making some improvements but still there's a design emphasis that 'resources are cheap' - which if you're hosting in the cloud they ain't!

Anyway good luck, I hope you know what you've gotten yourself into :-)
