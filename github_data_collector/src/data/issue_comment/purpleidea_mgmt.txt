## Tips:

* please read the style guide before submitting your patch:
[docs/style-guide.md](../docs/style-guide.md)

* commit message titles must be in the form:

```topic: Capitalized message with no trailing period```

or:

```topic, topic2: Capitalized message with no trailing period```

* golang code must be formatted according to the standard, please run:

```
make gofmt		# formats the entire project correctly
```

or format a single golang file correctly:

```
gofmt -w yourcode.go
```

* please rebase your patch against current git master:

```
git checkout master
git pull origin master
git checkout your-feature
git rebase master
git push your-remote your-feature
hub pull-request	# or submit with the github web ui
```

* after a patch review, please ping @purpleidea so we know to re-review:

```
# make changes based on reviews...
git add -p		# add new changes
git commit --amend	# combine with existing commit
git push your-remote your-feature -f
# now ping @purpleidea in the github PR since it doesn't notify us automatically
```

## Thanks for contributing to mgmt and welcome to the team!

I think it would be great for `mgmt` community and Debian users to have `mgmt` in the Debian archive, because then it can be easily installed with `apt install mgmt`. This would probably increase testing and adoption of `mgmt` and make users like me happy because we'd get cryptographic verification of the binaries and no extra work would be needed to have `mgmt` running on Debian systems. Another benefit is we'd also get the package into Ubuntu without any extra effort.

One possible workflow to get this done is:

- Coordinate with [current package maintainer](https://github.com/purpleidea/mgmt/blob/master/debian/control), check if he already has plans for this (ping @aequitas).
- Create an [ITP](https://wiki.debian.org/ITP) in the [Debian bug tracking system](https://www.debian.org/Bugs/).
- Review [the current package](https://github.com/purpleidea/mgmt/tree/master/debian) with regards to [Debian Go Packaging Team standards](https://go-team.pages.debian.net/packaging.html).
- Review the state of `mgmt` [Go dependencies](https://github.com/purpleidea/mgmt/tree/master/vendor) in Debian. Recurse these very same steps into them.
- Coordinate the upload with [Debian Go Packaging Team](https://lists.debian.org/debian-go/) to upload the package.

Depending on the state of dependencies packaging, we might have enough time to get this into the next Debian stable (version 11 codename `bullseye`), which should be released in 2021.

I am willing to help with this, if this is something this community is interested in doing.
Resources should be able to export "constants" which would be made available in the language. Perhaps under some global "const.res.file.state.exists" type namespace. Naming TBD.

In addition we *may* want to consider also telling the user about the defaults. Not sure if it's very important though. That idea came from here:

https://github.com/purpleidea/mgmt/issues/333

Relevant text:

<blockquote>
"Default values": A simpler subset of this problem is one of specifying the "default value" for a particular param. If we have a way to undef a parameter, then omitting it that way is a simple way to cause the default value to be used. If it turns out that we want to actually know those values, then it would be relatively easy to export a const.res.file.mode type variable which contains the default value for the mode for the file resource. Other constants could also be exported.
</blockquote>
## Tips:

* please read the style guide before submitting your patch:
[docs/style-guide.md](../docs/style-guide.md)

* commit message titles must be in the form:

```topic: Capitalized message with no trailing period```

or:

```topic, topic2: Capitalized message with no trailing period```

* golang code must be formatted according to the standard, please run:

```
make gofmt		# formats the entire project correctly
```

or format a single golang file correctly:

```
gofmt -w yourcode.go
```

* please rebase your patch against current git master:

```
git checkout master
git pull origin master
git checkout your-feature
git rebase master
git push your-remote your-feature
hub pull-request	# or submit with the github web ui
```

* after a patch review, please ping @purpleidea so we know to re-review:

```
# make changes based on reviews...
git add -p		# add new changes
git commit --amend	# combine with existing commit
git push your-remote your-feature -f
# now ping @purpleidea in the github PR since it doesn't notify us automatically
```

## Thanks for contributing to mgmt and welcome to the team!

Basically we're in the DAG, so make sure we've let all the other resources (like files) get built (that might be used for the file server) before the server sends anything out. We could either block or just not return anything yet.

As an aside, does the rf.ReadFrom bit not get cancelled properly on close??
## Versions:

* mgmt version 0.0.21-44-g590a4d0-dirty

* Ubuntu LTS 18.04.1

* go version go1.12.9 linux/amd64

## Description:
When creating an exec resource in mcl, if the same field is defined more than once, it is not immediately prohibited. This causes errors down the line. 

Here is a simple example file to demonstrate:
```
exec "exec2" {
	shell => "/bin/bash",
	ifcmd => "/bin/true",
	ifshell => "/bin/bash",
        cmd => "/usr/bin/env",
	cmd => "/usr/bin",
}
```
running this example produces the following output:
```
2019-12-18 14:24:34.006325 I | cli: lang: lexing/parsing...
2019-12-18 14:24:34.010397 I | cli: lang: init...
2019-12-18 14:24:34.010432 I | cli: lang: interpolating...
2019-12-18 14:24:34.010514 I | cli: lang: building scope...
2019-12-18 14:24:34.010660 I | cli: lang: running type unification...
2019-12-18 14:24:34.011103 I | cli: lang: input: examples/lang/exec_duplicate_field.mcl
2019-12-18 14:24:34.011128 I | cli: lang: tree:
.
├── exec_duplicate_field.mcl
└── metadata.yaml
This is: mgmt, version: 0.0.21-44-g590a4d0-dirty
Copyright (C) 2013-2019+ James Shubin and the project contributors
Written by James Shubin <james@shubin.ca> and the project contributors
14:24:34 main: start: 1576639474011281688
14:24:34 main: warning: working prefix directory is temporary!
14:24:34 main: working prefix is: /tmp/mgmt-compy-250335721
14:24:34 PGP: Created key: 4CD81B74
14:24:34 main: no seeds specified!
14:24:34 etcd: running...
14:24:34 etcd: watching chooser...
14:24:34 etcd: bootstrapping...
14:24:34 etcd: nominated: compy=http://localhost:2380
14:24:34 etcd: waiting for server...
14:24:34 etcd: server: runServer: (newCluster=true): compy=http://localhost:2380
14:24:34 etcd: server: starting...
14:24:35 etcd: server: ready
14:24:35 etcd: connect...
14:24:35 etcd: connected!
14:24:35 etcd: chooser: set dynamic cluster size to: 5
14:24:35 etcd: watching nominees...
14:24:35 etcd: nominated: compy=http://localhost:2380
14:24:35 etcd: watching volunteers...
14:24:35 etcd: volunteering...
14:24:35 etcd: watching endpoints...
14:24:35 main: etcd is ready!
14:24:35 main: waiting...
14:24:35 etcd: volunteers: compy=http://localhost:2380
14:24:35 etcd: chooser: (compy=http://localhost:2380)/(compy=http://localhost:2380)
14:24:35 etcd: chooser result(+/-): []/[]
14:24:35 main: running...
14:24:35 main: waiting...
14:24:35 gapi: generating new graph...
14:24:35 gapi: swap!
14:24:35 gapi: lang: lexing/parsing...
14:24:35 etcd: volunteers: compy=http://localhost:2380
14:24:35 etcd: chooser: (compy=http://localhost:2380)/(compy=http://localhost:2380)
14:24:35 etcd: chooser result(+/-): []/[]
14:24:35 gapi: lang: init...
14:24:35 gapi: lang: interpolating...
14:24:35 gapi: lang: building scope...
14:24:35 gapi: lang: running type unification...
14:24:35 gapi: lang: building function graph...
14:24:35 gapi: lang: function engine initializing...
14:24:35 gapi: lang: function engine validating...
14:24:35 gapi: lang: function engine starting...
14:24:35 gapi: lang: stream...
14:24:35 gapi: lang: loop...
14:24:35 gapi: lang: funcs: func `str("/bin/true")` started
14:24:35 gapi: lang: funcs: func `str("/usr/bin")` started
14:24:35 gapi: lang: funcs: func `str("/bin/bash")` started
14:24:35 gapi: lang: funcs: func `str("/bin/true")` changed
14:24:35 gapi: lang: funcs: func `str("/bin/true")` stopped
14:24:35 gapi: lang: funcs: func `str("/bin/bash")` started
14:24:35 gapi: lang: funcs: func `str("/usr/bin/env")` started
14:24:35 gapi: lang: funcs: func `str("/bin/bash")` changed
14:24:35 gapi: lang: funcs: func `str("exec2")` started
14:24:35 gapi: lang: funcs: func `str("/usr/bin")` changed
14:24:35 gapi: lang: funcs: func `str("/usr/bin")` stopped
14:24:35 gapi: lang: funcs: func `str("/bin/bash")` stopped
14:24:35 gapi: lang: funcs: func `str("exec2")` changed
14:24:35 gapi: lang: funcs: func `str("exec2")` stopped
14:24:35 gapi: lang: funcs: func `str("/bin/bash")` changed
14:24:35 gapi: lang: funcs: func `str("/bin/bash")` stopped
14:24:35 gapi: lang: funcs: func `str("/usr/bin/env")` changed
14:24:35 gapi: lang: funcs: func `str("/usr/bin/env")` stopped
14:24:35 gapi: generating new graph...
14:24:35 gapi: generating new graph...
14:24:35 gapi: lang: running interpret...
14:24:35 engine: autoedge: adding autoedges...
14:24:35 engine: autogroup: algorithm: wrappedGrouper: NonReachabilityGrouper...
14:24:35 main: commit...
14:24:35 engine: graph sync...
14:24:35 main: graph: Vertices(1), Edges(0)
14:24:35 main: waiting...
14:24:35 gapi: lang: running interpret...
14:24:35 engine: autoedge: adding autoedges...
14:24:35 engine: autogroup: algorithm: wrappedGrouper: NonReachabilityGrouper...
14:24:35 engine: Worker(exec[exec2])
14:24:35 main: commit...
14:24:35 engine: graph sync...
14:24:35 main: graph: Vertices(1), Edges(0)
14:24:35 main: waiting...
14:24:35 engine: Watch(exec[exec2])
14:24:35 engine: exec[exec2]: CheckApply(true)
14:24:35 engine: exec[exec2]: resource: ifcmd output is empty!
14:24:35 engine: exec[exec2]: resource: Apply
14:24:35 engine: exec[exec2]: CheckApply(true): Return(false, exit status 126
cmd error, exit status: 126
github.com/purpleidea/mgmt/util/errwrap.Wrapf
	/home/<user>/go/src/github.com/purpleidea/mgmt/util/errwrap/errwrap.go:29
github.com/purpleidea/mgmt/engine/resources.(*ExecRes).CheckApply
	/home/<user>/go/src/github.com/purpleidea/mgmt/engine/resources/exec.go:453
github.com/purpleidea/mgmt/engine/graph.(*Engine).Process
	/home/<user>/go/src/github.com/purpleidea/mgmt/engine/graph/actions.go:157
github.com/purpleidea/mgmt/engine/graph.(*Engine).Worker
	/home/<user>/go/src/github.com/purpleidea/mgmt/engine/graph/actions.go:522
github.com/purpleidea/mgmt/engine/graph.(*Engine).Commit.func1.2.1
	/home/<user>/go/src/github.com/purpleidea/mgmt/engine/graph/engine.go:232
runtime.goexit
	/usr/local/go/src/runtime/asm_amd64.s:1337)
14:24:35 engine: Watch(exec[exec2]): Exited(<nil>)
14:24:35 engine: Worker(exec[exec2]): Exited(exit status 126
cmd error, exit status: 126
github.com/purpleidea/mgmt/util/errwrap.Wrapf
	/home/<user>/go/src/github.com/purpleidea/mgmt/util/errwrap/errwrap.go:29
github.com/purpleidea/mgmt/engine/resources.(*ExecRes).CheckApply
	/home/<user>/go/src/github.com/purpleidea/mgmt/engine/resources/exec.go:453
github.com/purpleidea/mgmt/engine/graph.(*Engine).Process
	/home/<user>/go/src/github.com/purpleidea/mgmt/engine/graph/actions.go:157
github.com/purpleidea/mgmt/engine/graph.(*Engine).Worker
	/home/<user>/go/src/github.com/purpleidea/mgmt/engine/graph/actions.go:522
github.com/purpleidea/mgmt/engine/graph.(*Engine).Commit.func1.2.1
	/home/<user>/go/src/github.com/purpleidea/mgmt/engine/graph/engine.go:232
runtime.goexit
	/usr/local/go/src/runtime/asm_amd64.s:1337
error during Process()
github.com/purpleidea/mgmt/util/errwrap.Wrapf
	/home/<user>/go/src/github.com/purpleidea/mgmt/util/errwrap/errwrap.go:29
github.com/purpleidea/mgmt/engine/graph.(*Engine).Process
	/home/<user>/go/src/github.com/purpleidea/mgmt/engine/graph/actions.go:238
github.com/purpleidea/mgmt/engine/graph.(*Engine).Worker
	/home/<user>/go/src/github.com/purpleidea/mgmt/engine/graph/actions.go:522
github.com/purpleidea/mgmt/engine/graph.(*Engine).Commit.func1.2.1
	/home/<user>/go/src/github.com/purpleidea/mgmt/engine/graph/engine.go:232
runtime.goexit
	/usr/local/go/src/runtime/asm_amd64.s:1337)
```
This is a very basic, non functioning port to OpenBSD 6.6-current, related to issue #567 

Before trying to build, you will need to install the following dependencies

	pkg_add go
	pkg_add augeas
	pkg_add ruby

I am unsure of the importance of the ruby dependency, but follow
their respective pkg_readmes to set them up.

The following list of go packages should all be installed, but I'm
not yet sure if some of these are optional.

	go get $pkg

github.com/aws/aws-sdk-go/aws
github.com/aws/aws-sdk-go/aws/awserr
github.com/aws/aws-sdk-go/aws/request
github.com/aws/aws-sdk-go/aws/session
github.com/aws/aws-sdk-go/service/cloudwatchevents
github.com/aws/aws-sdk-go/service/ec2
github.com/aws/aws-sdk-go/service/sns
github.com/coreos/bbolt
github.com/coreos/go-semver/semver
github.com/coreos/go-systemd/dbus
github.com/coreos/go-systemd/journal
github.com/coreos/go-systemd/machine1
github.com/coreos/go-systemd/unit
github.com/coreos/go-systemd/util
github.com/coreos/pkg/capnslog
github.com/deniswernert/go-fstab
github.com/dgrijalva/jwt-go
github.com/ghodss/yaml
github.com/godbus/dbus
github.com/gogo/protobuf/gogoproto
github.com/gogo/protobuf/proto
github.com/golang/protobuf/jsonpb
github.com/golang/protobuf/proto
github.com/golang/protobuf/ptypes
github.com/google/btree
github.com/hashicorp/consul/api
github.com/hashicorp/go-multierror
github.com/hashicorp/hil
github.com/hashicorp/hil/ast
github.com/iancoleman/strcase
github.com/jonboulle/clockwork
github.com/pborman/uuid
github.com/pkg/errors
github.com/prometheus/client_golang/prometheus
github.com/prometheus/client_golang/prometheus/promhttp
github.com/soheilhy/cmux
github.com/spf13/afero
github.com/tmc/grpc-websocket-proxy/wsproxy
github.com/urfave/cli
github.com/vishvananda/netlink
github.com/xiang90/probing
go.uber.org/zap
golang.org/x/crypto/bcrypt
golang.org/x/crypto/openpgp
golang.org/x/crypto/openpgp/packet
golang.org/x/net/context
golang.org/x/net/http2
golang.org/x/net/http2/hpack
golang.org/x/net/trace
golang.org/x/sys/unix
golang.org/x/time/rate
google.golang.org/genproto/googleapis/rpc/status
gopkg.in/src-d/go-git.v4
gopkg.in/yaml.v2

Afterwards, you can try a build with

	GOTAGS='novirt nodocker' gmake build

Fair warning though, this does not work yet.

The dependency stuff could be moved over to the make deps
step, but I'm unsure this works well with OpenBSD porting guidelines
and I might need to make separate ports for every dependency. I
will have to look at other ports of go projects. Finally, it's probably
not a good idea to hardcode the path for bash in misc/header.sh,
but I'll cross that bridge later.

## Tips:

* please read the style guide before submitting your patch:
[docs/style-guide.md](../docs/style-guide.md)

* commit message titles must be in the form:

```topic: Capitalized message with no trailing period```

or:

```topic, topic2: Capitalized message with no trailing period```

* golang code must be formatted according to the standard, please run:

```
make gofmt		# formats the entire project correctly
```

or format a single golang file correctly:

```
gofmt -w yourcode.go
```

* please rebase your patch against current git master:

```
git checkout master
git pull origin master
git checkout your-feature
git rebase master
git push your-remote your-feature
hub pull-request	# or submit with the github web ui
```

* after a patch review, please ping @purpleidea so we know to re-review:

```
# make changes based on reviews...
git add -p		# add new changes
git commit --amend	# combine with existing commit
git push your-remote your-feature -f
# now ping @purpleidea in the github PR since it doesn't notify us automatically
```

## Thanks for contributing to mgmt and welcome to the team!

I would really love to see git modules go away in favour of golang modules.

I am trying to build mgmt inside $customer infra and will have to maintain an internal fork of mgmt with modules to be able to build it.

Go modules enable more reproducible builds, and they are pushed by golang upstream, we should use them.
## Tips:

* please read the style guide before submitting your patch:
[docs/style-guide.md](../docs/style-guide.md)

* commit message titles must be in the form:

```topic: Capitalized message with no trailing period```

or:

```topic, topic2: Capitalized message with no trailing period```

* golang code must be formatted according to the standard, please run:

```
make gofmt		# formats the entire project correctly
```

or format a single golang file correctly:

```
gofmt -w yourcode.go
```

* please rebase your patch against current git master:

```
git checkout master
git pull origin master
git checkout your-feature
git rebase master
git push your-remote your-feature
hub pull-request	# or submit with the github web ui
```

* after a patch review, please ping @purpleidea so we know to re-review:

```
# make changes based on reviews...
git add -p		# add new changes
git commit --amend	# combine with existing commit
git push your-remote your-feature -f
# now ping @purpleidea in the github PR since it doesn't notify us automatically
```

## Thanks for contributing to mgmt and welcome to the team!

## Versions:

* mgmt version (eg: `mgmt --version`):
git master

* operating system/distribution (eg: `uname -a`):
OpenBSD 6.6 GENERIC.MP#402 amd64

* golang version (eg: `go version`):
go version go1.13.3 openbsd/amd64
## Description:

I'd like to create a port of mgmt for OpenBSD
