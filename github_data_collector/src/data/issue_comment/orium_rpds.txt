

See 6af0922233a97575867f09d4d18598349e713753.
* [ ] `List`
* [ ] `Stack`
* [ ] `Queue`
* [ ] `Vector`
* [ ] `HashTrieMap`
* [ ] `HashTrieSet`
* [ ] `RedBlackTreeMap`
* [ ] `RedBlackTreeSet`
* [ ] Add info to the `README.md` and maybe to the documentation of the data structures.

Ref #22, #7.
I was experimenting with using a `RedBlackTree` as a priority queue and ended up with:
```rust
let next_work = queue.first();
if let Some(k) = next_work {
    queue.remove_mut(k);
}
```
It would be nice to have a `pop_first` that removed the first item and returned it in one.
- [ ] impl
- [ ] utest
- [ ] bench

See https://arxiv.org/pdf/1312.4666.pdf

Empty data structures should need no heap allocation.

- [ ] `Vector` (See #28)
- [ ] `HashTrieMap`

See #24 

This is bad because it involves more heap allocations and also more efford when `Vec`s need to expand.

To not lose the ability to configure the branching factor this is better done when https://github.com/rust-lang/rust/issues/44580 is ready and stable.  If we need this before const-generics stabilize then we can use the smallvec crate + some type aliases.
- [ ] impl
- [ ] utest
- [ ] bench

See https://www.westpoint.edu/eecs/SiteAssets/SitePages/Faculty%20Publication%20Documents/Okasaki/jfp95queue.pdf