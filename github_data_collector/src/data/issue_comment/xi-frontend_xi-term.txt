This isn't finished code, but I think I'll take the leap and learn emacs properly instead and thus this project is a bit dead for me.

No matter that I have spent a few hours designing a config format that both supports emacs and vim style layers as well as more simplistic nano-like bindings. The parsing of that file format is done and functional, but the conversion from event, to string, to command is eluding me (along with how one would include the default keymap, (there is a commented out section of how to code it in)). As such I hope someone more familiar with the application structure will slaughter this code and make something useful out of it.
I have this:

```bash
$ cat ~/.config/xi/preferences.xiconfig 
theme = "InspiredGitHub"
```

Setting theme manualy works:

`:t InspiredGitHub`

[logfile.txt](https://github.com/xi-frontend/xi-term/files/3672480/logfile.txt)

[logfile.rpc.txt](https://github.com/xi-frontend/xi-term/files/3672481/logfile.rpc.txt)

I have installed `xi-core` and `xi-term` in `/usr/bin`, and `syntect` in `/usr/share/xi/plugins/`.

When I open file in xi-term I didn't get syntax highlight.

[xi-term.log](https://github.com/xi-frontend/xi-term/files/3371275/xi-term.log)

[xi-term.rpc.log](https://github.com/xi-frontend/xi-term/files/3371276/xi-term.rpc.log)

[xi-core.log](https://github.com/xi-frontend/xi-term/files/3371278/xi-core.log)


I would love to have a more sublime-text like terminal editor. 
This project seems to drift more towards vim.
It might be possible to get both, if keybindings where completely user-configurable with a config-file like sublime does it. 
Would you be interested in a pull request for something like this?

## Goals:
1. Be able to simply copy&paste a sublime-keybindings file (of course most actions are not yet supported).
2. Generate one for the current state as well and make default
3. Safe those and user-defined overwrites (future step) under XDG-paths
4. Make all possible commands available via keybindings or Command prompt

## Rough overview
*Simple keybinding*
```
	{ "keys": ["ctrl+q"], "command": "exit" },
```

*More complex keybinding*
```
	{ "keys": ["left"], "command": "move", "args": {"by": "characters", "forward": false} },
	{ "keys": ["ctrl+left"], "command": "move", "args": {"by": "words", "forward": false} },
	{ "keys": ["shift+left"], "command": "move", "args": {"by": "characters", "forward": false, "extend": true} },
	{ "keys": ["ctrl+shift+left"], "command": "move", "args": {"by": "words", "forward": false, "extend": true} },
```

This seems to be very flexible and I *think* would allow for a vim-like binding as well as sublime-like or maybe even emacs. 

## Code changes
For now, I would stick with the simple bindings first (although `args` is not hard to do with rust Enums):
1. Have a function that parses the value of "keys" to map to `Event::Key(...)`
2. Have a function that parses the value of "command" to enum `Command`
3. Enhance `Command` to encompass all possible commands
4. Create a global `HashMap<Event::Key, Command>` out of steps 1 and 2.
5. Rewrite the match-statements in Tui, Editor and Command to all map to the same functions

This might not be the direction you want to go, which is fine. If so, I would simply create a hard fork and diverge, if thats ok with you.
Currently, you can run `^c` and exit with unsaved work, and `xi-term` will exit without warning.

Ideally, the "normal" exit should not work with unsaved text. I think vim handles this nicely, where one usually exits with `:q`, but this does not work with unsaved work. Instead, vim warns you of this but also lets you use `:q!` instead.
It's entirely reasonable to want to open an empty view, e.g. to create a new document

I guess this also needs a way to specify the filename during save though.
- Select all
-  Undo Redo 
Hello,

It is possible to have syntect-plugin as a feature in Cargo.toml like, e.g.:

[features]
default = ["dist-client", "s3"]
all = ["dist-client", "redis", "s3", "memcached", "gcs", "azure"]
azure = ["chrono", "hyper", "hyperx", "rust-crypto", "url"]

(example from sccache Cargo.toml project)

I'm asking this because I'm porting xi-term to FreeBSD and it will be more easy to me to use:
.
CARGO_FEATURES= syntect-plugin
or 
CARGO_FEATURES= all
if there are more features that we like to have activated in a port.

I have not ported your project yet but I am using/testing it and it works very well.

Thanks,

Nuno Teixeira
Afaik Xi has support of multicursors, does xi-term support it?