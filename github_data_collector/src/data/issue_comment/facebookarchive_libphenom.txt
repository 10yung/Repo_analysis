Fix ph_memory_realloc error if orig_size == size;
Adapt ck 0.6.0 version;
Summary: Port to the new opaque types in openssl-1.1.0
This was build against both openssl-1.1.0 and openssl-1.0.2
[#84](https://github.com/facebook/libphenom/issues/84)
I got the following compile error when doing `./autogen.sh; ./configure; make`.
I did a git clone on this repo and the github repo on concurrencyKit.

Any ideas?  Thanks.
```
libtool: compile:  gcc -DHAVE_CONFIG_H -Ithirdparty/ck/include -Iinclude -I. -DPHENOM_IMPL=1 -Werror -m64 -fno-omit-frame-pointer -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -D__x86_64__ -I/usr/local/include -std=gnu1x -pedantic -Wall -Wextra -Wno-declaration-after-statement -W -Wundef -Wendif-labels -Wshadow -Wpointer-arith -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wno-nested-externs -Winline -Wdisabled-optimization -fstrict-aliasing -pipe -Wno-parentheses -O2 -g -gdwarf-2 -MT corelib/libphenom_la-counter.lo -MD -MP -MF corelib/.deps/libphenom_la-counter.Tpo -c corelib/counter.c  -fPIC -DPIC -o corelib/.libs/libphenom_la-counter.o
In file included from include/phenom/counter.h:81:0,
                 from corelib/counter.c:17:
include/phenom/defs.h:368:41: error: static assertion failed: "counter_iterator_definition_bad"
 #  define ph_static_assert(expr, msg)   _Static_assert(expr, #msg)
                                         ^
corelib/counter.c:170:1: note: in expansion of macro 'ph_static_assert'
 ph_static_assert(sizeof(struct ph_counter_scope_iterator)

```
Hello,

It’d be very helpful if you could tag a release so we know the code there is stable and can be used. I work on [Homebrew](http://brew.sh/) and we provide a way to install `libphenom` but we rely on the git HEAD so can’t provide checksums and can’t ensure users will always get the same code depending on the time they install it, making it harder for us to debug issues.

Thanks!

I haven't dug into this yet.  I'm not getting these consistently, sometime the run will be successful.  The affinity failed message is always present ("nbio" and "job" in the message were added by me).

<pre>
1387793688.893 err: /1 nbio failed to set thread 0x80240e200 affinity
1387793688.893 err: /2 nbio failed to set thread 0x80280e200 affinity
1387793688.893 err: /3 nbio failed to set thread 0x802c0e200 affinity
1387793688.894 err: /4 nbio failed to set thread 0x80300e200 affinity
1387793688.894 err: /5 nbio failed to set thread 0x80340e200 affinity
1387793688.894 err: /6 nbio failed to set thread 0x80380e200 affinity
1387793688.894 err: /7 nbio failed to set thread 0x803c0e200 affinity
1387793688.894 err: /8 nbio failed to set thread 0x80400e200 affinity
1387793688.894 err: /9 nbio failed to set thread 0x80440e200 affinity
1387793688.894 err: /10 nbio failed to set thread 0x80480e200 affinity
1387793688.894 err: /11 nbio failed to set thread 0x804c0e200 affinity
1387793688.895 err: dns/13 job failed to set thread 0x80540e200 affinity
1387793688.895 err: dns/12 job failed to set thread 0x80500e200 affinity
1387793688.893 err: phenom:sched/0 nbio failed to set thread 0x80209a200 affinity
#     Failed test (tests/timer.c:record_tick() at line 38)
#     Failed test (tests/timer.c:record_tick() at line 38)
# Looks like you failed 2 tests of 8.
# ELAPSED: 749ms

1..8
ok 1 - PH_OK == ph_nbio_init(0)
ok 2 - PH_OK == ph_job_init(&timer)
ok 3 - PH_OK == ph_job_set_timer_at(&timer, last_tick)
ok 4 - 100ms resolution: diff=106
ok 5 - 100ms resolution: diff=106
not ok 6 - 100ms resolution: diff=213
not ok 7 - 100ms resolution: diff=214
ok 8 - PH_OK == ph_sched_run()
</pre>

Make it easy to create a multi-handle that is wired up to our event handling.

Throwing this one out there for folks that want to dive in.

In the bufq API we have `ph_bufq_consume_record` which searches the bufq for a matching record delimiter.

For many internet protocols this delimiter is CRLF.  For many other applications, we're likely to be looking for LF.

There are a couple of optimizations that could be investigated.
- Can we accelerate the `memmem` call using the `sse3_memchr` function from here? http://repnop.org/carte/snippets/simd/.  The performance.data file indicates that this performs consistently better than the darwin libc.  To adopt this, we'd need to detect sse3 either at runtime or compile time
- are there specializations of `sse3_memchr` that can be made for detecting CRLF?
- are there specializations of string matching algorithms with a constant, known needle that we could use?
- is there a more efficient way to match needles across the "straddle" point in cases where the delimiter straddles discontiguous memory regions?
- for long records, we make repeated calls and search across the same memory regions repeatedly.  We can surely cache the last searched offset and improve efficiency.  We'd need to make sure that we invalidate this offset in the appropriate circumstances (mostly when we've consumed past that point)

BSER is a local-IPC only serialization format for dynamic data:
https://github.com/facebook/watchman/blob/master/BSER.markdown

Adding support for this to Phenom requires adding load/dump APIs similar to the JSON load/dump API.

It also means adding API support for "Array of Templated Objects".  In Watchman, this is achieved simply by storing the template definition as a special property of the object type.
