<!--- Questions: If you have questions about how to use Realm, please ask on -->
<!--- StackOverflow: http://stackoverflow.com/questions/ask?tags=realm -->
<!--- We monitor the `realm` tag. -->

<!--- Feature Request: Just fill in the first two sections below. -->

<!--- Bugs: To help you as fast as possible with an issue please describe your issue  -->

<!--- and the steps you have taken to reproduce it in as much detail as possible.  -->



<!--- Thanks for helping us help you! :-)  -->

## Goals
<!--- What are you trying to achieve? -->
Using DLR and dynamic realm to dump a realm database

## Expected Results
The output should be identical on both .NET Core 2.1 and .NET Core 3.0

## Actual Results
.NET Core 3 output appears different and wrong
[RealmDlrTest.zip](https://github.com/realm/realm-dotnet/files/4055722/RealmDlrTest.zip)


## Steps to Reproduce
Attached visual studio 2019 solution - RealmDlrTest, comprising two projects: one NETSTANDARD2.0 class library project (RealmDlrLib) with the realm stuff that exposes a static method DumpJson() and a test driver console application project (RealmDlrTest) that simply invokes the above method to dump json from a realm database. Sample realm database test.realm is also included.

Build the solution first my modifying the RealmDlrTest.csproj TargetFramework to netcoreapp2.1. Rebuild yet again by modifying the RealmDlrTest.csproj TargetFramework to netcoreapp3.0. You will find the binaries under respective publish sub-folders under the root path RealmDlrTest\RealmDlrTest\bin\Debug.....

Change directory (CD command) to RealmDlrTest\RealmDlrTest\bin\Debug\netcoreapp2.1\publish and launch the test:
dotnet RealmDlrTest.dll RealmDlrTest\test.realm
You will see json output that exactly matches the realm database as viewed in realm studio

Next change directory to the netcoreapp3.0\publish folder and launch the test again.
You will see json output that appears different on the second table dump. Due to the matching column name between the two tables in the test sample database, the second table output appears to miss the first column output and next two column data appear to shift in the output.
## Code Sample
Attached zip

## Version of Realm and Tooling
4.2.0
Windows 10
Mac OS Catalina 10.15.1

Hello! I want to make the code ready if I need to migrate the database, using a version variable to check if it needs to be migrated but I cannot set the Realm instance with the new schemaVersion. 
I'm getting a "realm at path already opened with different schema version" exception.
I don't know if it is related to #1668 
More details below. Thanks in advance.

## Goals
I'm trying to check if the realm schemaVersion is older than current and migrate database if so.

## Expected Results
Migrate the old database and get a new realm instance with the new schemaVersion.

## Actual Results
Exception: realm at path already opened with different schema version

## Steps to Reproduce
Run the sample code.

## Code Sample
`
public const ulong FIRST_VERSION = 1;
public static Realm CreateRealmInstance()
{
    Realm oldRealm;
    ulong oldVersion = FIRST_VERSION;

// The value of this variable is 2
    ulong newVersion = (ulong)Properties.Settings.Default["DatabaseVersion"];

    try
    {
        oldRealm = Realm.GetInstance();
        oldVersion = oldRealm.Config.SchemaVersion;
    }
    catch (Exception e)
    {
        throw new Exception(e.Message);
    }

    var configNew = new RealmConfiguration
    {
        SchemaVersion = newVersion,
        MigrationCallback = (migration, oldSchemaVersion) =>
        {
            if (oldSchemaVersion < newVersion)
            {
                MigrateDatabase();
                
            }
            oldRealm.Dispose();
        },
        ShouldCompactOnLaunch = (totalBytes, usedBytes) =>
        {
            ulong oneHundredMB = 100 * 1024 * 1024;
            return totalBytes > oneHundredMB && (double)usedBytes / totalBytes < 0.5;
        }
    };

    try
    {
// The exception happens on this line
        Realm realmInstance = Realm.GetInstance(configNew);

        return realmInstance;
    }
    catch (Exception e)
    {
        throw new Exception(e.Message);
    }
}
`


## Version of Realm and Tooling
- Flavor:
  - [X] Self-Hosted
- OS & Version: Windows 10 Pro 1909
- SDK Version: 4.2.0

See RPM-68 for details.


See RPM-72 for details.


The author of Fody [made us aware](https://github.com/realm/realm-dotnet/issues/1928) that Fody has changed it's license so it's expected that each and every user of realm-dotnet [supports Fody as a Patron on OpenCollective](https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md#do-all-developers-in-a-organization-need-to-become-patrons). That's not desirable as we want to stay a free open source library.

Forking Fody will initially be the fastest way to ensure the Fody maintainer do not get loaded by support or users gets confused with not getting support for Fody.

Later the use of Fody can be replaced with custom build scripts.


This is the same as closed issue #1461. This time it is on 4.2.0 version of Realm..

When I assign a IRealmCollection to ListView.ItemsSource, ListView populates initial items, however further updates, additions/deletions are not reflected to the list.. I observed CollectionChanged event, it is called with correct arguments.. I suspect that ListView does not listen CollectionChanged event if the ItemsSource is IReadOnlyCollection.. When I place an ObservableCollection in the middle and add remove items in the callback, list is updated correctly..
When I use IList<> to create one-to-many relation, Realm requires 4.2.1 version of the System.Collections assembly… The UWP application uses 4.6.x. Visual Studio 2019 does not solve the binding by itself… I got the following error when I try accessing the IList<> property:

![ceedd7527b8aed8a9fc9c2b475507dec9827130e](https://user-images.githubusercontent.com/1451003/71243561-ac4f6a00-2321-11ea-96f0-5ebdcbf05c89.jpg)



<!--
 Make sure to assign one and only one Type (`T:`) label.
 Select reviewers if ready for review. Our bot will automatically assign you.
 -->

## Description

Fixes #

##  TODO

* [ ] Changelog entry
* [ ] Tests (if applicable)

Implement support for Core6.

