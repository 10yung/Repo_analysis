Dependencies are starting to bump their required node version (#19187 and #19299) since 8.x has reached its end of life. 10.x is now active LTS. We still officially support 8.x but to keep our test environment fast and safe we're switching to 10.x as should everybody else. If we start seeing regressions due to features being released that require 10.x we need to rethink our testing environment.

Azure pipeline was already using node 10. [Netlify is controlled via environment variables](https://docs.netlify.com/configure-builds/manage-dependencies/#node-js-environment).
Bumps [jsdom](https://github.com/jsdom/jsdom) from 15.2.1 to 16.0.0.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/jsdom/jsdom/releases">jsdom's releases</a>.</em></p>
<blockquote>
<h2>Version 16.0.0</h2>
<p>For this release we'd like to welcome <a href="https://github.com/jsdom/jsdom/commits?author=pmdartus">@pmdartus</a> to the core team. Among other work, he's driven the heroic effort of constructor prototype and reform in jsdom and its dependencies over the last few months, to allow us to move away from shared constructors and prototypes, and set the groundwork for custom elements support (<a href="https://github-redirect.dependabot.com/jsdom/jsdom/pull/2548">coming soon</a>!).</p>
<p>Breaking changes:</p>
<ul>
<li>Node v10 is now the minimum supported version.</li>
<li>The <code>dom.runVMScript()</code> API has been replaced with the more general <code>dom.getInternalVMContext()</code> API.</li>
<li>Each jsdom <code>Window</code> now creates new instances of all the web platform globals. That is, our old <a href="https://github.com/jsdom/jsdom/blob/35894a6703ed1f4de98942780bd99244ac27f600/README.md#shared-constructors-and-prototypes">shared constructor and prototypes</a> caveat is no longer in play.</li>
<li>Each jsdom <code>Window</code> now exposes all JavaScript-spec-defined globals uniformly. When <code>runScripts</code> is disabled, it exposes them as aliases of the ones from the outer Node.js environment. Whereas when <code>runScripts</code> is enabled, it exposes fresh copies of each global from the new scripting environment. (Previously, a few typed array classes would always be aliased, and with <code>runScripts</code> disabled, the other classes would not be exposed at all.)</li>
</ul>
<p>Other changes:</p>
<ul>
<li>Added the <code>AbstractRange</code>, <code>Range</code>, <code>StaticRange</code>, <code>Selection</code>, and <code>window.getSelection()</code> APIs.</li>
<li>Added working constructors for <code>Comment</code>, <code>Text</code>, and <code>DocumentFragment</code>.</li>
<li>Added <code>valueAsDate</code>, <code>valueAsNumber</code>, <code>stepUp()</code> and <code>stepDown()</code> to <code>&lt;input&gt;</code> elements. (kraynel)</li>
<li>Added <code>window.origin</code>.</li>
<li>Removed <code>document.origin</code>.</li>
<li>Fixed <code>\&lt;template&gt;</code> to work correctly inside XML documents.</li>
<li>Fixed some bugs which would cause jsdom to choose the wrong character encoding because it was failing to detect <code>&lt;meta charset&gt;</code> or <code>&lt;meta http-equiv=&quot;charset&quot;&gt;</code> elements.</li>
<li>Fixed <code>input.type</code> to default to <code>&quot;text&quot;</code>. (connormeredith)</li>
<li>Fixed incorrect validation errors for <code>&lt;input&gt;</code> with fractional values for their <code>step=&quot;&quot;</code> attribute. (kontomondo)</li>
<li>Fixed incorrect validation errors on readonly <code>&lt;input&gt;</code> elements.</li>
<li>Fixed <code>&lt;input type=&quot;email&quot; multiple pattern=&quot;...&quot;&gt;</code> validation.</li>
<li>Fixed <code>fileReader.readAsDataURL()</code> to always base64-encode the result. (ytetsuro)</li>
<li>Fixed inserting <code>&lt;img&gt;</code> elements into documents without a browsing context to no longer crash when the <code>canvas</code> package is installed.</li>
<li>Fixed a memory leak when using <code>window.setTimeout()</code> or <code>window.setInterval()</code>.</li>
<li>Improved the performance of <code>getComputedStyle()</code>. (eps1lon)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href="https://github.com/jsdom/jsdom/blob/master/Changelog.md">jsdom's changelog</a>.</em></p>
<blockquote>
<h2>16.0.0</h2>
<p>For this release we'd like to welcome <a href="https://github.com/jsdom/jsdom/commits?author=pmdartus">@pmdartus</a> to the core team. Among other work, he's driven the heroic effort of constructor prototype and reform in jsdom and its dependencies over the last few months, to allow us to move away from shared constructors and prototypes, and set the groundwork for custom elements support (<a href="https://github-redirect.dependabot.com/jsdom/jsdom/pull/2548">coming soon</a>!).</p>
<p>Breaking changes:</p>
<ul>
<li>Node v10 is now the minimum supported version.</li>
<li>The <code>dom.runVMScript()</code> API has been replaced with the more general <code>dom.getInternalVMContext()</code> API.</li>
<li>Each jsdom <code>Window</code> now creates new instances of all the web platform globals. That is, our old <a href="https://github.com/jsdom/jsdom/blob/35894a6703ed1f4de98942780bd99244ac27f600/README.md#shared-constructors-and-prototypes">shared constructor and prototypes</a> caveat is no longer in play.</li>
<li>Each jsdom <code>Window</code> now exposes all JavaScript-spec-defined globals uniformly. When <code>runScripts</code> is disabled, it exposes them as aliases of the ones from the outer Node.js environment. Whereas when <code>runScripts</code> is enabled, it exposes fresh copies of each global from the new scripting environment. (Previously, a few typed array classes would always be aliased, and with <code>runScripts</code> disabled, the other classes would not be exposed at all.)</li>
</ul>
<p>Other changes:</p>
<ul>
<li>Added the <code>AbstractRange</code>, <code>Range</code>, <code>StaticRange</code>, <code>Selection</code>, and <code>window.getSelection()</code> APIs.</li>
<li>Added working constructors for <code>Comment</code>, <code>Text</code>, and <code>DocumentFragment</code>.</li>
<li>Added <code>valueAsDate</code>, <code>valueAsNumber</code>, <code>stepUp()</code> and <code>stepDown()</code> to <code>&lt;input&gt;</code> elements. (kraynel)</li>
<li>Added <code>window.origin</code>.</li>
<li>Removed <code>document.origin</code>.</li>
<li>Fixed <code>\&lt;template&gt;</code> to work correctly inside XML documents.</li>
<li>Fixed some bugs which would cause jsdom to choose the wrong character encoding because it was failing to detect <code>&lt;meta charset&gt;</code> or <code>&lt;meta http-equiv=&quot;charset&quot;&gt;</code> elements.</li>
<li>Fixed <code>input.type</code> to default to <code>&quot;text&quot;</code>. (connormeredith)</li>
<li>Fixed incorrect validation errors for <code>&lt;input&gt;</code> with fractional values for their <code>step=&quot;&quot;</code> attribute. (kontomondo)</li>
<li>Fixed incorrect validation errors on readonly <code>&lt;input&gt;</code> elements.</li>
<li>Fixed <code>&lt;input type=&quot;email&quot; multiple pattern=&quot;...&quot;&gt;</code> validation.</li>
<li>Fixed <code>fileReader.readAsDataURL()</code> to always base64-encode the result. (ytetsuro)</li>
<li>Fixed inserting <code>&lt;img&gt;</code> elements into documents without a browsing context to no longer crash when the <code>canvas</code> package is installed.</li>
<li>Fixed a memory leak when using <code>window.setTimeout()</code> or <code>window.setInterval()</code>.</li>
<li>Improved the performance of <code>getComputedStyle()</code>. (eps1lon)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/jsdom/jsdom/commit/902b69e15ac4af23c1407305d343939dfe062a2d"><code>902b69e</code></a> Version 16.0.0</li>
<li><a href="https://github.com/jsdom/jsdom/commit/020539ed3f46720fe526ecf55a3a2d2a889c94b4"><code>020539e</code></a> Remove document.origin and add window.origin</li>
<li><a href="https://github.com/jsdom/jsdom/commit/678141f58ecd4a8cc9f68b1e938c3869dea0c461"><code>678141f</code></a> Use mutability as a measure for valueMissing constraint</li>
<li><a href="https://github.com/jsdom/jsdom/commit/5f8e2abcdbda282851f85b432cb0494a8fa6e9c5"><code>5f8e2ab</code></a> Fix pattern constraint with &lt;input type=email multiple&gt;</li>
<li><a href="https://github.com/jsdom/jsdom/commit/ef5c316f4cbb50f672b8c27dceb0990a3e21041d"><code>ef5c316</code></a> Check that &lt;input pattern&gt; is valid</li>
<li><a href="https://github.com/jsdom/jsdom/commit/8c97f99c9d67dcde1f5b6e1e903530b6c253d21d"><code>8c97f99</code></a> Update WPT</li>
<li><a href="https://github.com/jsdom/jsdom/commit/5a3cc393358356efffe9195884e5b2c07b80974f"><code>5a3cc39</code></a> Fix documentation on globals installed on window</li>
<li><a href="https://github.com/jsdom/jsdom/commit/ffb4e0cad397db42b93d10794258bfd2053154ba"><code>ffb4e0c</code></a> Refactor XMLHttpRequest to use webidl2js</li>
<li><a href="https://github.com/jsdom/jsdom/commit/e6e18e2a37bad20bd20a0cb1ee2aedb6c06d1a99"><code>e6e18e2</code></a> Use high precision modulo for stepMismatch</li>
<li><a href="https://github.com/jsdom/jsdom/commit/af122e6e902fda742d7e7b4bfeec2bb8b5881216"><code>af122e6</code></a> Update dependencies</li>
<li>Additional commits viewable in <a href="https://github.com/jsdom/jsdom/compare/15.2.1...16.0.0">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=jsdom&package-manager=npm_and_yarn&previous-version=15.2.1&new-version=16.0.0)](https://dependabot.com/compatibility-score.html?dependency-name=jsdom&package-manager=npm_and_yarn&previous-version=15.2.1&new-version=16.0.0)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in the `.dependabot/config.yml` file in this repo:
- Update frequency
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
Resolves #19112

This pr makes a Snackbar show whenever a use copies code or links to the code.

<!-- Provide a general summary of the issue in the Title above -->

<!--
  Thank you very much for contributing to Material-UI by creating an issue! ❤️
  To avoid duplicate issues we ask you to check off the following list.
-->

<!-- Checked checkbox should look like this: [x] -->

- [x] The issue is present in the latest release.
- [x] I have searched the [issues](https://github.com/mui-org/material-ui/issues) of this repository and believe that this is not a duplicate.

## Current Behavior 😯

<!-- Describe what happens instead of the expected behavior. -->

When the [FormControl] component is rendered with the `disabled={true}` prop, the children [Checkbox], [Radio], and [Switch] components remains enabled

## Expected Behavior 🤔

<!-- Describe what should happen. -->

All the children components of [FormControl] that use [FormControlContext] should be disabled if the [FormControl] components is disabled

## Steps to Reproduce 🕹

<!--
  Provide a link to a live example (you can use codesandbox.io) and an unambiguous set of steps to reproduce this bug.
  Include code to reproduce, if relevant (which it most likely is).

  This codesandbox.io template _may_ be a good starting point:
  https://codesandbox.io/s/github/mui-org/material-ui/tree/master/examples/create-react-app

  If you're using typescript a better starting point would be
  https://codesandbox.io/s/github/mui-org/material-ui/tree/master/examples/create-react-app-with-typescript

  If YOU DO NOT take time to provide a codesandbox.io reproduction, should the COMMUNITY take time to help you?
-->

[This sandbox](https://codesandbox.io/s/formcontrol-disable-bug-qprsl) demonstrates the issue that appeared from v4.6.1 due to [this pull request](https://github.com/mui-org/material-ui/pull/17797).

[This sandbox](https://codesandbox.io/s/formcontrol-disables-children-9gfhg) clearly shows that everything was working correctly in v4.6.0

## Context 🔦

<!--
  What are you trying to accomplish? How has this issue affected you?
  Providing context helps us come up with a solution that is most useful in the real world.
-->

The [SwitchBase] component checks whether it has own `disabled` prop. If it doesn't have it, the `disabled` from [FormControlContext] is used (please see [source code](https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/internal/SwitchBase.js#L99))

The issue is that the [Checkbox], [Radio], and [Switch] components were configured to use the `disabled` prop set to `false` by default (please see [checkbox](https://github.com/mui-org/material-ui/pull/17797/files#diff-e5fc95b4f68fc5563fe04f150ea25edbR67), [radio](https://github.com/mui-org/material-ui/pull/17797/files#diff-61bde05b4a573662450c08a4e1b7b5cfR64), and [switch](https://github.com/mui-org/material-ui/pull/17797/files#diff-8d33bd694cc029cf64dd1749dfc57438R151) changes).

Therefore, the [SwitchBase] component never receives the `disabled={undefined}` prop, which leads to non-usage of the `disabled` value from [FormControlContext]

## Your Environment 🌎

<!--
  Include as many relevant details about the environment with which you experienced the bug.
  If you encounter issues with typescript please include version and tsconfig.
-->

| Tech        | Version |
| ----------- | ------- |
| Material-UI | v4.8.3  |
| React       | v16.12.0  |

- [x] I have followed (at least) the [PR section of the contributing guide](https://github.com/mui-org/material-ui/blob/master/CONTRIBUTING.md#sending-a-pull-request).

Updated `@babel/cli` to make use of https://babeljs.io/docs/en/babel-cli#set-file-extensions when building the ESM version of the packages.
Thanks @eps1lon 

This enables treeshaking on all levels and simplifies the build script since we don't need to create a `package.json` file in the subfolders anymore.
Even though we consider 3rd level imports private, there is nothing stopping people from using them, so they do. This will benefit them with reduced bundle sizes

For backwards compatability it still builds the `esm` folder which we can remove in v5
Seems like the `createGenerateClassName` function is specifically looking for classes with the prefix `Mui`, while some generated classes are actually in the form of `PrivateSwitchBase-...`.

The result are a mix of classes with and without keys, depending on if `disableGlobal` is true.

- [ X] The issue is present in the latest release.
- [ X] I have searched the [issues](https://github.com/mui-org/material-ui/issues) of this repository and believe that this is not a duplicate.

## Current Behavior 😯

```
class="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-93 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
```

## Expected Behavior 🤔

```
class="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
```

## Steps to Reproduce 🕹

Steps:

1. Go to the following link:
https://codesandbox.io/s/naughty-butterfly-2fvpt

2. Inspect the switch button. Notice the class names. Even the MuiBox has a suffix key for some reason.

## Context 🔦

Disable randomly generated class keys in jest tests. Turning off styles completely results in a bunch of "Elevation not applied" errors. Also, would still like the jest tests to have the generated class names, however am trying to prevent the snapshot tests from thinking there are "changes" when they suffix key simply changes

## Your Environment 🌎

| Tech        | Version |
| ----------- | ------- |
| Material-UI | v4.8.3  |
| React       | ^16.8.0|

Fixes https://github.com/mui-org/material-ui/issues/10870#issuecomment-575590341
- [x] I have searched the [issues](https://github.com/mui-org/material-ui/issues) of this repository and believe that this is not a duplicate.

## Summary

Providing two base Codesandboxes (one for javascript, one for Typescript) in the issue templates. For example, [Fabric.js](https://github.com/fabricjs/fabric.js/issues/new?template=bug_report.md) and [Prosemirror](https://github.com/ProseMirror/prosemirror/issues/new) already do it and it makes submitting a bug a pleasing process.

## Motivation

Everytime I wanted to report a bug in the library I had to create a Codesandbox from scratch. This is problematic because:
- it is not trivial to correctly setup a base Codesandbox, i.e. it takes time and this is the least thing you want to do when you are angry because you discovered a bug in the library. Moreover, for reporting TypeScript bugs, I can't even figure out how to setup a base Codesandbox
- everybody that wants to report a bug has to do the exact same thing again and again. This is a big waste of time

If you provide such base codesandboxes, people will be much more inclined to attach repros to their bug reports, but also (and this is the more important), will be much more inclined to submit the bugs they encounter.

For AutoComplete, on Blur when multiple and freeSolo is set.

It will be nice that the value of the input field, validate, like when we hit Enter.

- [x] I have searched the [issues](https://github.com/mui-org/material-ui/issues) of this repository and believe that this is not a duplicate.

## Summary 💡

On multiple and freeSolo, on blur the value in the input is automatically validated

## Motivation 🔦

When you have multiple input and one is auto complete, the user expected that when he leave the filed the value is taking care of.



<!-- Provide a general summary of the issue in the Title above -->

<!--
  Thank you very much for contributing to Material-UI by creating an issue! ❤️
  To avoid duplicate issues we ask you to check off the following list.
-->

<!-- Checked checkbox should look like this: [x] -->

- [x] The issue is present in the latest release.
- [x] I have searched the [issues](https://github.com/mui-org/material-ui/issues) of this repository and believe that this is not a duplicate.

## Current Behavior 😯

<!-- Describe what happens instead of the expected behavior. -->
![image](https://user-images.githubusercontent.com/43670376/72603270-61754200-3921-11ea-82e0-00d54e271e1a.png)


## Expected Behavior 🤔

<!-- Describe what should happen. -->

## Steps to Reproduce 🕹

<!--
  Provide a link to a live example (you can use codesandbox.io) and an unambiguous set of steps to reproduce this bug.
  Include code to reproduce, if relevant (which it most likely is).

  This codesandbox.io template _may_ be a good starting point:
  https://codesandbox.io/s/github/mui-org/material-ui/tree/master/examples/create-react-app

  If you're using typescript a better starting point would be
  https://codesandbox.io/s/github/mui-org/material-ui/tree/master/examples/create-react-app-with-typescript

  If YOU DO NOT take time to provide a codesandbox.io reproduction, should the COMMUNITY take time to help you?
-->

Steps:

1. Go to https://material-ui.com/components/autocomplete/#customized-hook
2. Change to dark theme
3. Click on the input
4. Choose a value and click on it

## Context 🔦

<!--
  What are you trying to accomplish? How has this issue affected you?
  Providing context helps us come up with a solution that is most useful in the real world.
-->

## Your Environment 🌎

<!--
  Include as many relevant details about the environment with which you experienced the bug.
  If you encounter issues with typescript please include version and tsconfig.
-->

| Tech        | Version |
| ----------- | ------- |
| Material-UI | v4.8.3  |
| Browser     |     chrome 79    |
