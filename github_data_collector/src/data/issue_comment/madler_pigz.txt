This functionality didn't make sense and makes it difficult as a drop in replacement.  Could this be reprogrammed to mimic the legacy gzip? 
```

(star_env) -bash-4.1$ echo "hello" > test.txt
(star_env) -bash-4.1$ gzip -f test.txt ; ls
test.txt.gz
(star_env) -bash-4.1$ gzip -f test.txt.gz ; ls
gzip: test.txt.gz already has .gz suffix -- unchanged
test.txt.gz
(star_env) -bash-4.1$ pigz -f test.txt.gz ; ls
test.txt.gz.gz
```
Tested on Fedora 29 and CentOS 6.
The compilers are OS-provided (8.3.1 on Fedora 29, 4.4.7 on CentOS 6).
The IPP version tested is 2019 update 4, which can be obtained from Intel freely.
The zlib I used here is 1.2.11.

Steps to reproduce the error:
1. build the patched zlib with the instructions here:
[](https://software.intel.com/en-us/articles/how-to-use-zlib-with-intel-ipp-optimization)
1. set LD_LIBRARY_PATH to make pigz (dnf install pigz) link to the patched zlib
2. ldd `which pigz` to confirm the link
3. use pigz to compress some file; no error at this stage
4. try to decompress the compressed file will give error like:
"invalid compressed data--format violated" (gzip -t), or
"corrupted -- invalid deflate data (invalid stored block lengths)" (pigz -t)
The same error happens on source-built pigz 2.4.
The zlib linking type to IPP (shared / static) did not change the behavior.

However, I've tried that said patched zlib do works with other libraries, such as HDF5.
These tools are serial, anyway; I'm not sure where the problem comes in.
Avoid using pigz with the IPP patched zlib for now.
Improve makefile compatibility. Such as building ipk for openwrt.
Signed-off-by: kenwong <mdzz@xm1s.com>
Hello,
 
on my server (Xeon 8164, Suse Linux Enterprise 15, HP ProLiant DL380 Gen10).

When I use pigz and specify the number of threads (4 in this example)
`zcat AmP1_R1.fastq.gz | pigz -p 4 > out.fastq.gz `

I get this error (5 out of 10 times):
`pigz: abort: internal threads error`

Strace log says:

```
write(1, "T\nTCACCGTGCCAGACTAGAGTCAAGCTCAAC"..., 32644) = 32644
read(10, "\254Ml@\344\300\351;\216%\356\v\253Ce\26Q\306\250\324\265\f\350\312\362\301 #F\353\313\341"..., 32768) = 32768
pigz: abort: internal threads error
write(1, "@NB551369:35:H3VGYBGX9:2:21304:1"..., 32768) = 32768
write(1, "ATGCCTCGTCATCTAATTAGTGACGCGCATGA"..., 32638) = 32638
write(1, "@NB551369:35:H3VGYBGX9:2:21304:1"..., 32768) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=67738, si_uid=1030} ---
rt_sigprocmask(SIG_BLOCK, [HUP INT PIPE TERM XCPU XFSZ], [HUP INT PIPE TERM XCPU XFSZ], 8) = 0
rt_sigprocmask(SIG_SETMASK, [HUP INT PIPE TERM XCPU XFSZ], NULL, 8) = 0
rt_sigaction(SIGPIPE, {sa_handler=SIG_DFL, sa_mask=[PIPE], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7fb5a0713160}, {sa_handler=0x55bc0c4beb2c, sa_mask=[HUP INT PIPE TERM XCPU XFSZ], sa_flags=SA_RESTORER, sa_restorer=0x7fb5a0713160}, 8) = 0
rt_sigprocmask(SIG_BLOCK, ~[RTMIN RT_1], [HUP INT PIPE TERM XCPU XFSZ], 8) = 0
getpid()                                = 67738
gettid()                                = 67738
tgkill(67738, 67738, SIGPIPE)           = 0
rt_sigprocmask(SIG_SETMASK, [HUP INT PIPE TERM XCPU XFSZ], NULL, 8) = 0
rt_sigreturn({mask=[]})                 = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_TKILL, si_pid=67738, si_uid=1030} ---
+++ killed by SIGPIPE +++
```


If I dont specify the number of threads, it runs like a charm. 
Also a different zip-tool like pbzip2 doesn't have any problem at all. 
Prime95 runs without any problems for 24h, no bad sector detected, ram has been tested and is okay.
I think there is no hardware-failure.
Also, on another server (same Software and OS - different hardware), there is no problem at all.

Can you help me with this issue? 

Thanks

Are there any tests that go along with pigz?
We'd be interested in using pigz as a library in [our application](slicer.org) and would want to support Windows, Linux, and Mac with a uniform build system that supports native compilers (e.g. Visual Studio, not mingw).  CMake has been our go-to solution for that so it would be great if pigz had CMake support.

Has anyone looked into CMake for pigz before?
 
Added a define block for _AIX to call 64-bit version of open and stat. Fixes issue #56 
on AIX to compress files larger than 2G the opne/stat calls need to be replaced with stat64/open64.  I will try to attach a pull request with a fix.
When running pigz without a terminal (for example via crontab) and a compressed file already exists, it's not possible for pigz to ask the user to overwrite or not. This  causes pigz to fail with an error message:

pigz: abort: write error on 001.txt.gz (Inappropriate ioctl for device)

It would be more useful with something along the lines of

pigz: abort: compressed file exists: 001.txt.gz
or perhaps better?
pigz: skipping 001.txt: compressed file exists: 001.txt.gz

It would also be useful to have a --no-overwrite option.

pigz 2.4, Fedora 27, x64
I tried to compile pigz on windows (mingw) and successfully done it with some effort but the solution turned out to be simple - implement fsync() using windows native functions. I attach patch file so you can check it out. Hope you will find it useful. There are two versions of fsync() - one using FlushFileBuffers() and second using _commit(). You can choose whichever you find appropriate- there seem to be no difference in performance. Files are somewhat excessively commented so should be no problem reading them.
Both versions of fsync() work well - I tested them on over 6k+ files of all sizes - from 1B to 6GiB. Compressed, tested with gzip and pigz and decompressed to make sure they are not corrupted and they were fine.
Hope you will like it and use it in future release.
[pigz-2.4.win_fsync-2.diff.gz](https://github.com/madler/pigz/files/1904492/pigz-2.4.win_fsync-2.diff.gz)
