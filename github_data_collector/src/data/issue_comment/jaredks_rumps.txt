Hi,

passing data to the notification center does not work. The sample app:

```
import rumps

@rumps.notifications
def notification_center(info):
    print(info)

class TestApp(rumps.App):
    @rumps.clicked('Test Notification')
    def testing(self, sender):
        test = 'test string'
        rumps.notification("Foo", "Bar", "Baz", data={'foo': 'bar'}, action_button='Action', other_button='Dismiss')

if __name__ == "__main__":
    app = TestApp('Test')
    app.run()
```

throws the following exception:

```
2019-11-29 18:03:11.936 Python[74881:1454881] -[OC_BuiltinPythonData fastestEncoding]: unrecognized selector sent to instance 0x7fa05ed3e910
/Users/rejsmont/src/rumps_test/venv/lib/python3.7/site-packages/rumps/rumps.py:185: UninitializedDeallocWarning: leaking an uninitialized object of type NSPlaceholderString
  ns_string = NSString.alloc().initWithString_(dumped)
```

Python version:
```
# python -V
Python 3.7.5
```

PIP packages installed:
```
Package                Version
---------------------- -------
Cython                 0.29.14
pathtools              0.1.2
pip                    19.3.1
pyobjc-core            6.1
pyobjc-framework-Cocoa 6.1
PyYAML                 5.1.2
rumps                  0.3.0
setuptools             42.0.0
```




I want to make status bar app and app GUI also together using rumps and tkinter but these are crashing the app.
When showing a notification with `has_reply_button=True`, the user's reply is now included in the dict passed to the `@rumps.notifications` handler in the `response` key.

Also fixes a crash due to `data` not always being initialised properly in `userNotificationCenter_didActivateNotification_`.
I would like to save preferences (eg. API key), What's the best way to do that?
The repo switch would need to be turned on at https://travis-ci.com/jaredks/rumps to enable free automated testing of all code changes.
A simplification of my application is a web server controlled by the Rumps menu. I cannot combine Rumps main loop and asyncio (or any other similar web server lib)'s event loop. In a way that doesn't lock up the Rumps GUI. 

Based on some of the examples below, (I am not much of a MacOS internals person) do you think it would be possible to add some functionality to integrate two event loops in some sort of co-routine with Rumps?

For more info, please look here:
https://www.reddit.com/r/Python/comments/33ecpl/neat_discovery_how_to_combine_asyncio_and_tkinter/
https://github.com/harvimt/quamash
https://pypi.org/project/async_gui/0.1.1/
https://docs.python.org/3/library/asyncio-task.html

It's possible to use color icons, but is it also possible to change the text color in the menubar?
Hi! I've added a few lines so the application and menu items could now be initialized more conveniently. Here is an example, also committed as `examples/example_init.py`:
```
import rumps

@rumps.clicked('Switch next')
def switch_next(_):
    switch_previous.menuitem.state = not switch_previous.menuitem.state

@rumps.clicked('Switch previous')
def switch_previous(_):
    switch_next.menuitem.state = not switch_next.menuitem.state

def init_app():
    switch_next.menuitem.state = True

if __name__ == "__main__":
    rumps.App('First item should be checked', on_before_event_loop=init_app).run()
```

My intention was to solve my problem around item state initialization. However it looks like it could be used for little bit more purposes as I tried to demonstrate in the example above.