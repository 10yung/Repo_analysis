I'm trying to use trace event to collect structured logs from a running process and I noticed that some data is being exposed from the wrong payload names.

As an example, here's an MVC project that logs using ILogger:

```
HasStack="True", 
ThreadID="18,028",
ProcessorNumber="0",
Level="2" 
FactoryID="1" 
LoggerName="Microsoft.AspNetCore.Hosting.Diagnostics" 
EventId="1" 
EventName="Request starting HTTP/1.1 GET http://localhost:7000/  " 
FormattedMessage=""
```

```
HasStack="True" 
ThreadID="18,028"
ProcessorNumber="0" 
Level="2" 
FactoryID="1" 
LoggerName="Microsoft.AspNetCore.Routing.EndpointMiddleware" 
EventId="0" 
EventName="ExecutingEndpoint" 
FormattedMessage="Executing endpoint '/Index'"
```

```
HasStack="True" 
ThreadID="18,028" 
ProcessorNumber="0" 
Level="2" 
FactoryID="1"
LoggerName="Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker"
EventId="3" 
EventName="PageExecuting" 
FormattedMessage="Route matched with {page = "/Index"}. Executing page /Index"
```

Notice that the first event has EventName as `Request starting HTTP/1.1 GET http://localhost:7000/  ` and FormattedMessage as empty string. It seem as though there's an issue when event name is null or empty then the formatted message becomes the event name. This also reproduces with other logging events so I'd imagine it's the same bug.

Here's the code that produces one of the events:

https://github.com/dotnet/extensions/blob/dbf7b645e573670da7ba9567c41ec14298573260/src/Logging/Logging.EventSource/src/LoggingEventSource.cs#L128-L142

https://github.com/dotnet/extensions/blob/dbf7b645e573670da7ba9567c41ec14298573260/src/Logging/Logging.EventSource/src/LoggingEventSource.cs#L448-L475

cc @brianrob @noahfalk @shirhatti 

On a piece of code that generates background GC collections every time it runs (adding 10 mil int values to an ArrayList), I'm seeing different outcomes whether the ".NET Alloc" checkbox in the Advanced Options is set or not.

First, ".NET Alloc" checkbox is NOT set, as follows:
![image](https://user-images.githubusercontent.com/31319583/71763199-ce301b80-2ee1-11ea-9b1e-712189fc81a4.png)

The corresponding output is below. Note 3 background GCs (`2B`) happening:
![image](https://user-images.githubusercontent.com/31319583/71763084-59101680-2ee0-11ea-923e-c15d951b4490.png)

Next "GC Collect Only" is unchecked and ".NET Alloc" is set. Notice the outcome, and the fact that this time there's no longer any `2B` instance:
![image](https://user-images.githubusercontent.com/31319583/71763086-5e6d6100-2ee0-11ea-9eaf-6e361b29e303.png)

The results above are reproducible every time.


Platform specifics:

- PerfView v2.0.43
- Windows 10 v1903 (build 10.0.18362)
- .NET Framework 4.7.2, 32-bit LegacyJIT-v4.8.3752.0
This event is large, but unused. Removing it allows for a substantial increase in the amount of GC allocation data that can be analyzed in one trace.
Can anyone verify DotNetCalls actually work ? I can't see any CallEnter events even though I start my processes after the collection.
This change ensures the GC finalization table contains type information alongside the existing object counts.
This PR is currently a work in progress, the remaining work required for this change is commented in the code as TODO.

This PR has a brother PR in the runtime repo [here](https://github.com/dotnet/runtime/pull/1042) so that the information recorded here is decoded

The PR is meant for fixing the decoding aspect of https://github.com/dotnet/coreclr/issues/26665

When the GC decide which generation to condemn, it uses `generation_to_condemn(...)`. However, after that, we have another call to `joined_generation_to_condemn()` which could potentially veto the decision because of various reasons, this PR is meant to record them so that we can use those information to diagnose the decision better.

@maoni0, @vsadov, @ivdiazsa
Add a CPU samples view of various runtime operations and a hierarchical text view.

The current runtime ops captured are JIT, R2R, and Assembly load events. The Assembly load events do not capture start/stop data so they are invisible in the CPU samples. Future work should add type load events to the runtime and tweak the placement of the R2R entrypoint event for better view of loading behavior.
Hi all,

I have a Windows 7 x64 system where I'm trying to debug a managed memory leak. I can only observe it in production, over a fairly long time, so I'd like to use PerfView to get a heap dump of the situation while the problem is happening.

The problem is, if I attempt to get a heap dump with ETL, no file is generated and PerfView displays a message saying "error: HeapDump failed with exit code 1".

What does that mean? Is there anything I can do to get a heap dump with ETL? I'm using 2.0.48.

The dump works with no ETL, but then I'm missing crucial information (i.e. within ReferredFrom, many objects appear to only be referenced by "[not reachable from roots]", not sure why).
I'm following along with [the sample code](https://github.com/dotnet/diagnostics/blob/master/documentation/design-docs/diagnostics-client-library.md#1-attaching-to-a-process-and-dumping-out-all-the-runtime-gc-events-in-real-time-to-the-console) included in the dotnet/Diagnostics repository.  This code uses an EventPipe attachment to a second process to monitor events in real time.

I'm experiencing a problem where the events that appear do not resolve to EventName/TaskName, and instead display `Task(044973cd-251f-4dff-a3e9-9d6307286b05)`, which is the GUID for the Task (GarbageCollection) the sample utilizes.

I expected to see actual event names such as `GCStart`/`GCEnd`.

Having opened https://github.com/dotnet/diagnostics/issues/685 and been redirected to this repository, I'm wondering if you can offer some insight into this behavior.

Note that subscribing to `EventPipeEventSource.Clr.All`, as shown in [samples here](https://github.com/microsoft/perfview/blob/master/src/TraceEvent/Samples/31_KernelAndClrMonitor.cs), does not exhibit this issue.  Only `EventPipeEventSource.Dynamic.All`.  Additionally, resolving names works fine with custom EventSources, but not with CLR sources.

It sounds like there was an issue with `Dyamic.All` here, but it looks like it was resolved?
https://github.com/microsoft/perfview/issues/461
I have used these methods to get a list of providers on my machine:

- `logman query providers` : 1108 providers
- `TraceEventProviders.GetPublishedProviders()` : 1104 providers
- `TraceEventProviders.GetRegisteredOrEnabledProviders()` : ~2540 providers (fluctuates consistently around this number)

The documentation for `GetRegisteredOrEnabledProviders()` states:

> This is a relatively small list (less than 1000), unlike GetPublishedProviders.

I am not getting a "small list". What is causing this inconsistency?

It's also worth noting that calling `TraceEventProviders.GetProviderName()` on each of these >2000 provider GUIDs only yields ~790 names that can be mapped.