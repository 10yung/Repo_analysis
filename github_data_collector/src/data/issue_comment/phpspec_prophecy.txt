Prophesizing [this class](https://github.com/symfony/symfony/blob/06076919ac27694b23a7f78269873c593779b569/src/Symfony/Component/Messenger/MessageBusInterface.php#L27) will result in `could not reflect class Symfony\Component\Messenger\Envelope as it is marked final.`

cc @ciaranmcnulty
I was working in some exercises using TDD and I needed to write an example like this:

```php
$rule = $this->prophesize(MultipleThreeRule::class);
                                                                        
$rule->condition(Argument::that(function($arg) {
    return in_array($arg, [3, 6, 9, 12]);
}))->willReturn(true);
```
The idea is guarantee that a value is in array.

```php
$rule->condition(12); // returns true
``` 
Then, I implemented an easier way to get to same result:

```php
$rule = $this->prophesize(MultipleThreeRule::class);
                                                                        
$rule->condition(Argument::in([3, 6, 9, 12]))->willReturn(true);
```

And I also I implemented the opposite way, when value is not in array:

```php
$rule = $this->prophesize(MultipleThreeRule::class);
                                                                        
$rule->condition(Argument::notIn([3, 6, 9, 12]))->willReturn(false);
```
Something in 1.10.0 broke PhpSpec functionality

https://github.com/phpspec/phpspec/pull/1291

I can't look at it right now, it may be due to the changes we made to ExactToken 

# Summary

When you want to use `\DateTime` object in **PHPSpec** tests as dummy object, then the test fails with the following error message:
```
err:Error("Call to a member function sub() on null")
```

## The Problem

Let's suppose we have two classes `Subject` and `Collaborator` and we are writing spec for the former.
Source code looks like this:
```php
<?php
// spec/SubjectSpec.php

namespace spec;

use PhpSpec\ObjectBehavior;
use Subject;

class SubjectSpec extends ObjectBehavior
{
    function it_can_handle_date_time_dummies(\DateTime $date, \Collaborator $c)
    {
	$this->beConstructedWith($c);

	$c->takeADate($date)->willReturn(true);

        $this->doSomething($date)->shouldReturn(true);
    }
}
```

```php
<?php
// src/Subject.php

class Subject
{
    private $c;

    public function __construct(Collaborator $c)
    {
        $this->c = $c;
    }

    public function doSomething(\DateTime $date)
    {
    	return $this->c->takeADate($date);
    }
}
```

```php
<?php
// src/Collaborator.php

interface Collaborator
{
    public function takeADate(\DateTime $date);
}
```

_composer.json_
```json
{
    "name": "gbuza/spec-test",
    "authors": [
        {
            "name": "Géza Búza",
            "email": "bghome@gmail.com"
        }
    ],
    "require": {
        "phpspec/phpspec": "^6.1"
    },
    "autoload": {
        "psr-0": {
            "": "src"
        }
    }
}
```

Finally execute the tests: `vendor/bin/phpspec run`

### Actual Result

```
Subject                                                                         
  10  - it can handle date time dummies
      exception [err:Error("Call to a member function sub() on null")] has been thrown.

                                      100%                                       1
1 specs
1 example (1 broken)
```

### Expected Result

```
1 specs
1 example (1 passed)
```

## Explanation

Prophecy uses the `DateTimeComparator` class from `sebastian/comparator` package from the `ExactValueToken` class in order to compare the actual date argument with the argument of the promise object. That worked fine before [2.1.1](https://github.com/sebastianbergmann/comparator/blob/2.1.1/src/DateTimeComparator.php) or earlier versions. But in [2.1.2](https://github.com/sebastianbergmann/comparator/blob/2.1.2/src/DateTimeComparator.php#L53-L55) methods of the `\DateTime` class are chained like `$expected->setTimezone()->sub()`. Since `$expected` is not a real `\DateTime` object, but actually a dummy test double, all of the methods will return `null` by definition. Therefore `$expected->setTimezone()` becomes `null`, that's why `sub()` cannot be called on that.

Since our compared object is not a real `\DateTime`, it should not be compared by the `DateTimeComparator`. The condition to support an object is to [check the inheritance chain](https://github.com/sebastianbergmann/comparator/blob/2.1.2/src/DateTimeComparator.php#L26-L30), it will be accepted for comparison which is fine when the real `\DateTime` class is extended. 


Hi,

There is an issue in `sebastian/comparator` version `1.1.0` until version `1.2.2`.

`PHP Fatal error:  Declaration of SebastianBergmann\Comparator\DOMNodeComparator::assertEquals($expected, $actual, $delta = 0, $canonicalize = false, $ignoreCase = false) must be compatible with SebastianBergmann\Comparator\ObjectComparator::assertEquals($expected, $actual, $delta = 0, $canonicalize = false, $ignoreCase = false, array &$processed = Array) in /home/pol/dev/git/psrcas/vendor/sebastian/comparator/src/DOMNodeComparator.php on line 149`

The issue comes from version `1.1.0` of `sebastian/comparator`.

See those two files:

* https://github.com/sebastianbergmann/comparator/blob/c484a80f97573ab934e37826dba0135a3301b26a/src/DOMNodeComparator.php#L87
* https://github.com/sebastianbergmann/comparator/blob/c484a80f97573ab934e37826dba0135a3301b26a/src/ObjectComparator.php#L85

Their signature is different and when installing using composer flag `--prefer-lowest`, it fails.

That issue has been fixed in [version 1.2.3](https://github.com/sebastianbergmann/comparator/blob/1.2.3/src/DOMNodeComparator.php) ([see commit](https://github.com/sebastianbergmann/comparator/commit/9d9ede5a25938443d697a92551d031e83ed62856))

Therefore I propose to raise the minimal version to `1.2.3` instead of `1.1.0`.

Link to PR: #452 
I love prophecy I use this library a lot.
I have seen strange behavior when trying to mock method like this `__methodName` so I looked in code base and I found that exist a whitelist of reflectable methods. I would mock these methods like `__doRequest` from soap ext-library for example with `__` in the name.  If this behavior can be changed, it would be a great thing, if you agree I could make a PR. 

Example 
```php
class Test {
   void function __test() {
   }
}
```
```php
$test = $this->prophesize(Test::class);
$test->__test()->shouldBeCalled();

$testReveal = $test->reveal();
$testReveal->__test();

```
Output
```php
Double\Test\P1:              
   ├ No calls have been made that match:                    
   ├     Double\Test\P1->__test()
   ├   but expected at least one.                           
```

Class in prophecy that contains a whitelist 
```php
class ClassMirror
{
    public static $reflectableMethods = array(
        '__construct',
        '__destruct',
        '__sleep',
        '__wakeup',
        '__toString',
        '__call',
        '__invoke',
    );
...
    private function reflectClassToNode(ReflectionClass $class, Node\ClassNode $node)
    {
      ...
            foreach ($class->getMethods(ReflectionMethod::IS_PUBLIC) as $method) {
            if (0 === strpos($method->getName(), '_')
                && !in_array($method->getName(), self::$reflectableMethods)) {
                continue;
            }
      ...
    }
```



Reproduce with:
php php-cs-fixer --rules=native_function_invocation fix ./ --allow-risky=yes
(php-cs-fixer from : https://cs.symfony.com/)

Details:
https://veewee.github.io/blog/optimizing-php-performance-by-fq-function-calls/
I am using PHPStorm and using prophecy (via PHPUnit) cause a lot of warning because on wrong argument when using the reveal return value directly.

What I end up doing it this:

```PHP

$prophecy = $this->prophesize(Connection::class);
// ...
/** @var Connection $connection */
$connection = $prophecy->reveal();
$object = new Object($connection);
```
To do this a bit "cleaner" a and using the phpstorm.meta this could be change to

```PHP

$prophecy = $this->prophesize(Connection::class);
// ...
$object = new Object($ $prophecy->reveal(Connection::class));
```
This work but I have a warning because the reveal method doesn't have any argument.

Adding a file .phpstorm.meta.php with this would solve that
```PHP
<?php namespace PHPSTORM_META {

    $STATIC_METHOD_TYPES = [
        \Prophecy\Prophecy\ObjectProphecy::reveal('') => [
            "" == "@",
        ],
    ];
}

namespace Prophecy\Prophecy {
    class ObjectProphecy
    {
        public function reveal(string $class = null)
        {

        }
    }
}
```



When in PHP 7.4 a mocked object get serialized e.g.:

```php
$metadataMock = $this->prophesize(Test::class);
$metadata = $metadataMock->reveal(); // some call to a function which does the following:
serialize($metadata)
``` 

The following exception is thrown:

> Exception: Serialization of 'ReflectionParameter' is not allowed

Related PHP migration: https://www.php.net/manual/de/migration74.incompatible.php