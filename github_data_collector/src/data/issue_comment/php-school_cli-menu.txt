An attempt at resizing the menu when the terminal is resized. It seems to be a bit jittery, some resizes work, some do not.

It works when first being resized, storing the width of the menu. Every time it is resized, we will attempt to set the original width, which will either shrink the menu if the terminal is too small to display it, or if the terminal is enlarged, it will attempt to display the menu at its original width.

Needs https://github.com/php-school/terminal/pull/12

And is based on top off #220 so can be rebased when that is merged to reduce the diff.
SplitItem radio works well:

```
<?php

use PhpSchool\CliMenu\Builder\SplitItemBuilder;
use PhpSchool\CliMenu\CliMenu;
use PhpSchool\CliMenu\Builder\CliMenuBuilder;

require_once(__DIR__ . '/../vendor/autoload.php');

$menu = (new CliMenuBuilder)
    ->setTitle('Header 1')
    ->addSplitItem(function (SplitItemBuilder $b) use ($itemCallable) {
        $b->addRadioItem('Item 1-A', function() {})
            ->addRadioItem('Item 1-B', function() {})
            ->addRadioItem('Item 1-C', function() {})
        ;
    })
    ->build();

$menu->open();
```

But it's not possible to have multiple groups of RadioItem within the same menu level:

```
$menu = (new CliMenuBuilder)
    ->addStaticItem('Header 1')
    ->addRadioItem('Item 1-A', function() {})
    ->addRadioItem('Item 1-B', function() {})
    ->addRadioItem('Item 1-C', function() {})
    ->addLineBreak('---')
    ->addStaticItem('Header 2')
    ->addRadioItem('Item 2-A', function() {})
    ->addRadioItem('Item 2-B', function() {})
    ->addRadioItem('Item 2-C', function() {})
    ->build();

$menu->open();
```

![Peek 2019-12-20 19-15](https://user-images.githubusercontent.com/589398/71300748-66b09280-235d-11ea-914e-ab1cbf3ec1bc.gif)

Similarly, I want to be able to group non-RadioItem items together.

I'm thinking a non-styled container item that can take any number of `MenuItemInterface` items.

It has the following API:

* `addItem()`
* `addItems()`
* `setItems()`
* `removeItem()`

If it contains no items, the parent `CliMenu` displays nothing - it is only a container of items and has no styling of its own, nor does it affect the UI.

If it has items, it behaves as if those items were defined in-line with the parent menu.

Example:

```
$menu = (new CliMenuBuilder)
    ->addStaticItem('Header 1')
    ->addGroup(function (CliMenuBuilder $b) {
        $b->addRadioItem('Item 1-A', function() {})
            ->addRadioItem('Item 1-B', function() {})
            ->addRadioItem('Item 1-C', function() {})
        ;
    })
    ->addLineBreak('---')
    ->addStaticItem('Header 2')
    ->addGroup(function (CliMenuBuilder $b) {
        $b->addRadioItem('Item 2-A', function() {})
            ->addRadioItem('Item 2-B', function() {})
            ->addRadioItem('Item 2-C', function() {})
        ;
    })
    ->build();

$menu->open();
```

This would look identical to the GIF above.

If no items are defined,

```
$menu = (new CliMenuBuilder)
    ->addStaticItem('Header 1')
    ->addGroup(function (CliMenuBuilder $b) {
        $b->addRadioItem('Item 1-A', function() {})
            ->addRadioItem('Item 1-B', function() {})
            ->addRadioItem('Item 1-C', function() {})
        ;
    })
    ->addLineBreak('---')
    ->addStaticItem('Header 2')
    ->addGroup(function (CliMenuBuilder $b) {
    })
    ->build();

$menu->open();
```

then it acts as if the group isn't defined at all:

![image](https://user-images.githubusercontent.com/589398/71300820-1554d300-235e-11ea-8f26-af4627645391.png)

This will help group RadioItems in a vertical manner (without needing to use `SplitItem`), and allow grouping other item types for non-Menu work.

In addition, I would suggest changing `RadioItem::getSelectAction()` to use this group feature to disable other items within the same group, vs using `SplitItem`.

If the radio item does not belong to a group, behave as it already does and toggle off other radio items within the same `CliMenu` object.

edit:

Thinking about this, for initial PR it would be good to keep it simple and not give this class any styling at all. Simply a container, nothing else, but I could see it expending to keeping its own copy of styles and applying them to any children items.

So this would basically end up being a submenu that's visible on the current menu without needing to select an item to view the children items within.
Currently all items are on the same vertical level:

```
    Example Title                                                                              
    ================================================================================================  
                                                                                                      
    Static Item #1                                                                                    
    ○ Item 1                                                                                          
    ○ Item 2                                                                                          
    ○ Item 3                                                                                          
    ○ Item 4                                                                                          
    Static Item #2                                                                                    
    ○ Item 1                                                                                          
    ○ Item 2                                                                                          
    ○ Item 3                                                                                          
    ○ Item 4                                                                                          
    Static Item #3                                                                                    
    [○] Item 1                      [○] Item 2                      [○] Item 3                        
                                                                                                      
    ------------------------------------------------------------------------------------------------  
    ● Exit                                                                                            
```

Using line breaks makes it a little easier to separate elements:

```
    Example Title                                                                              
    ================================================================================================  
                                                                                                      
    Static Item #1                                                                                    
    ○ Item 1                                                                                          
    ○ Item 2                                                                                          
    ○ Item 3                                                                                          
    ○ Item 4                                                                                          

    Static Item #2                                                                                    
    ○ Item 1                                                                                          
    ○ Item 2                                                                                          
    ○ Item 3                                                                                          
    ○ Item 4                                                                                          

    Static Item #3                                                                                    
    [○] Item 1                      [○] Item 2                      [○] Item 3                        
                                                                                                      
    ------------------------------------------------------------------------------------------------  
    ● Exit                                                                                            
```

This works fine but could be better. What do you think about an "itemIndent" vlaue in the `MenuStyle` that is applied only to `SelectItem`, `RadioItem` and `CheckableItem`?

```
    Example Title                                                                                     
    ================================================================================================  
                                                                                                      
    Static Item #1                                                                                    
       ○ Item 1                                                                                       
       ○ Item 2                                                                                       
       ○ Item 3                                                                                       
       ○ Item 4                                                                                       
    Static Item #2                                                                                    
       ○ Item 1                                                                                       
       ○ Item 2                                                                                       
       ○ Item 3                                                                                       
       ● Item 4                                                                                       
    Static Item #3                                                                                    
       [○] Item 1                   [○] Item 2                      [○] Item 3                        
                                                                                                      
    ------------------------------------------------------------------------------------------------  
    ○ Exit                                                                                            
```

The indentation helps visually separate what is an actionable item and what is mostly text description:

![Peek 2019-12-17 21-39](https://user-images.githubusercontent.com/589398/71053943-cb79ac00-2115-11ea-9aab-a09a09cb8072.gif)

Let me know if this is something that would be interesting. I've got it implemented but needs some testing for the `StringUtil::wordwrap()` function that calculates terminal width and breaks up lines.
Seems like the naming of items is a bit weird. I'm new to the project so maybe I simply need to become acquainted a bit more to understand.

I will be talking specifically about these items: https://github.com/php-school/cli-menu#items

* Static Item - Seems a "Text" name would be more accurate. Non-selectable, just displays whatever is defined and prints a new line.
* Ascii Art Item - "Block"? I'm trying to map these names out to more common elements in HTML or otherwise. The current name seems far too restrictive for what it can actually be used for.

These two are pretty simple, but they're more structure type elements. I feel having everything named "* Item" can be confusing to a developer.

-----

Sub Menu Item - Why not rename this to simply Menu Item? This makes it clear that a menu is completely made up of menus. Instead of `CliMenuBuilder::addSubMenu()` it seems clearer when it is called `CliMenuBuilder::addMenu()`.

While I'm on the subject, `CliMenuBuilder` should be renamed `MenuBuilder`. The whole project is CLI-based, calling it a `CliMenuBuilder` adds confusion.

------

Split Item - This one is the toughest to wrap your mind around. You have both a `SplitItemBuilder` and `SplitItem`. Why not make it so `SplitItem` creates a horizontal-style menu. Any items added are displayed on a horizontal line, vs vertical.

Right now you've blacklisted the following:

* AsciiArtItem
* LineBreakItem
* SplitItem

But making it so `SplitItem` is simply a direction directive (display the contained items horizontally vs vertically) there'd be no reason you couldn't add any other type of item that the normal `CliMenu` can contain. `LineBreakItem` could be made to repeat vertically vs horizontally.

----

I think that `SplitItem`'s responsibilities should also be ... split up, or a new element type created to allow creating new side-by-side blocks.

The way the menu works is very much in a vertical manner:

```
    Awesome Vertical Menu
    ==========================================  
    ● Item #1
    ○ Item #2
    ○ Item #3
    ○ Go Back
    ○ Exit
```

This makes sense. CLI tools go up and down.

When you add a `SplitItem` it changes it to be completely horizontal:

```
   Awesome Horizontal Menu
   ===========================================
   Sub Item
   [ ] #1     [ ] #2     [ ] #3     [ ] #4
   ○ Go Back
   ○ Exit
```

So instead of having an either/or horizontal/vertical, you can actually start defining blocks of menus:

```
   Awesome Mixed Menu
   ==================================================
   Section 1     Section 2     Section 3
   ● Item #1     [ ] #1        [ ] #1        _ __ _
   ○ Item #2     [ ] #2        [✔] #2       / |..| \
   ○ Item #3     [✔] #3        [ ] #3       \/ || \/
                 [ ] #4        [ ] #4        |_''_|
   
   ○ Go Back
   ○ Exit
```

I've not tried implementing this last feature, but reading through your `Terminal` and `SplitItem` classes it seems you've got at least most of the groundwork down. You'd basically create side-by-side blocks that contain vertical elements.

Thoughts?
Hello!

I'm trying to set up the width of an input without luck.

Any idea how to achieve this?
```

$style = (new MenuStyle())
            ->setBg('yellow')
            ->setFg('black')
            ->setWidth('300');

 return function (phps_cliMenu $menu) use($style,$options){
            $result = $menu->askText($style)
                ->setPromptText($options['prompt_text'])
                ->setPlaceholderText($options['placeholder_text'])
                ->setValidationFailedText($options['validation_fail_text'])
                ->ask();

        };
```
Hello, when calling the setWidth function it checks if the passed value is greater than the total width of the terminal, but in my case the maximum width of the terminal always returns zero, for some reason the getWidth function can not get the actual width of the terminal .

I suggest setting a default maximum value, if the getWidth function returns zero.

Screenshots

without changing
![terminal](https://user-images.githubusercontent.com/43446349/54133506-f56aa900-43f4-11e9-8b77-394b956659e1.jpg)

with change

File: MenuStyle.php
line 390: $width = ($this->terminal->getWidth() != 0) ? $this->terminal->getWidth() : 75 ;
![corrigido](https://user-images.githubusercontent.com/43446349/54133957-d0c30100-43f5-11e9-93e8-799255e1f17d.jpg)


Hello! I'm trying to use your cli which is very nice tool but I'm having a problem. When I'm pasting a text, it is being reduced. For example if I paste CSLAD00000334, the cli return CSLAD0000033. The weird thing is that if I press space, the last character appears. Can anyone help me with this issue?
- [ ] Allow each menu item to have custom bg/fg colours
- [ ] Allow each menu item to have their own custom marker/extra
- [ ] Add a position argument to all Items, to center them or put them on the right
- [ ] Allow user-defined width for each cell of a SplitItem (number of cols or %)
- [ ] Add a width to LineBreakItems (number of cols or %) just to make things a bit more easy (I prefer `LineBreakItem('-', 20)` than `StaticItem(str_repeat('-', 20))`)
- [ ] Markdown (or something else) support for bold/underline (italic isn't supported much unfortunatly and oftens turn out "dimmed" instead)
- [ ] Method to disable/modify default controls (arrows and such, not everyone wants `Space` to work as `Enter`)
- [ ] Add an easy way to select a specific item from a menu (currently having to use the correct index from `getItems()`)
- [ ] Add disable() and enable() methods to SelectableTrait
See https://jonasjacek.github.io/colors/
