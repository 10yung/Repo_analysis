The following program `sample.go` triggers a panic:

```go
package main

import "net"

var lookupHost = net.DefaultResolver.LookupHost

func main() {
    println(lookupHost != nil)
}
```

Expected result:
```console
$ go run ./sample.go
true
```

Got:
```console
$ yaegi ./sample.go
./sample.go:7:18: panic
panic: reflect.Set: value of type func(context.Context, string) ([]string, error) is not assignable to type func(*net.Resolver, context.Context, string) ([]string, error) [recovered]
        panic: reflect.Set: value of type func(context.Context, string) ([]string, error) is not assignable to type func(*net.Resolver, context.Context, string) ([]string, error)

goroutine 1 [running]:
github.com/containous/yaegi/interp.runCfg.func1(0xc000256000, 0xc000170b00)
        /home/marc/go/src/github.com/containous/yaegi/interp/run.go:114 +0x218
panic(0xc9da60, 0xc00015e5b0)
        /usr/lib/go/src/runtime/panic.go:679 +0x1b2
reflect.Value.assignTo(0xdbf8a0, 0x15269d8, 0xa93, 0xddc278, 0xb, 0xc000164280, 0x0, 0x2b, 0x0, 0x0)
        /usr/lib/go/src/reflect/value.go:2403 +0x432
reflect.Value.Set(0xc000164280, 0xc000160120, 0x193, 0xdbf8a0, 0x15269d8, 0xa93)
        /usr/lib/go/src/reflect/value.go:1537 +0xbd
github.com/containous/yaegi/interp.assign.func3(0xc000256000, 0xc0002543c0)
        /home/marc/go/src/github.com/containous/yaegi/interp/run.go:304 +0x14f
github.com/containous/yaegi/interp.runCfg(0xc000170b00, 0xc000256000)
        /home/marc/go/src/github.com/containous/yaegi/interp/run.go:120 +0x7a
github.com/containous/yaegi/interp.(*Interpreter).run(0xc00024a6e0, 0xc000170200, 0x0)
        /home/marc/go/src/github.com/containous/yaegi/interp/run.go:98 +0x239
github.com/containous/yaegi/interp.(*Interpreter).Eval(0xc00024a6e0, 0xc00025e000, 0x7e, 0x27e, 0xc00025e000, 0x7e, 0x0, 0x1)
        /home/marc/go/src/github.com/containous/yaegi/interp/interp.go:364 +0x3ef
main.main()
        /home/marc/go/src/github.com/containous/yaegi/cmd/yaegi/yaegi.go:82 +0x42e
```

The following program `sample.go` triggers a panic:

```go
package main

func main() {
	panic("fail")
}
```

Eval will panic in the callstack of Eval.

EvalWithContext panics on a goroutine. causing a crash.

I'm unsure if this is a good thing or not.

```golang
package main

import (
	"log"
)

func main() {
	log.Fatalln("fail")
}
```

I wrote this toy example to illustrate my question - when I run this I get an error from Yaegi (`incomplete type`)...  How do I fix this?
```
package main

import "github.com/containous/yaegi/interp"

const src = `package foo
func Bar(d *main.Data) string { return d.Message + "-Foo" }`

type Data struct {
	Message string
}

func main() {
	d := Data{
		Message: "Kung",
	}
	
	i := interp.New(interp.Options{})

	_, err := i.Eval(src)
	if err != nil {
		panic(err)
	}

	v, err := i.Eval("foo.Bar")
	if err != nil {
		panic(err)
	}

	bar := v.Interface().(func(*Data) string)

	r := bar(&d)
	println(r)
}
```

I get the followinf stack trace on the go playground:
```
panic: 2:12: incomplete type 

goroutine 1 [running]:
github.com/containous/yaegi/interp.(*itype).frameType(0x849ab0, 0x499264, 0x0, 0x0)
	/tmp/gopath259824945/pkg/mod/github.com/containous/yaegi@v0.7.2/interp/type.go:948 +0x260
github.com/containous/yaegi/interp.(*scope).add(0x83e9a0, 0x849ab0, 0x85a630, 0x0)
	/tmp/gopath259824945/pkg/mod/github.com/containous/yaegi@v0.7.2/interp/scope.go:151 +0x40
github.com/containous/yaegi/interp.(*Interpreter).cfg.func1(0x85a240, 0x3, 0x849501, 0x6b01)
	/tmp/gopath259824945/pkg/mod/github.com/containous/yaegi@v0.7.2/interp/cfg.go:295 +0x3580
github.com/containous/yaegi/interp.(*node).Walk(0x85a240, 0x82be88, 0x82bea4, 0x0)
	/tmp/gopath259824945/pkg/mod/github.com/containous/yaegi@v0.7.2/interp/interp.go:164 +0x120
github.com/containous/yaegi/interp.(*node).Walk(0x85a120, 0x82be88, 0x82bea4, 0x80e0d7)
	/tmp/gopath259824945/pkg/mod/github.com/containous/yaegi@v0.7.2/interp/interp.go:168 +0x80
github.com/containous/yaegi/interp.(*Interpreter).cfg(0x872180, 0x85a120, 0x80e0d7, 0x3, 0x0, 0x0, 0x0, 0x0)
	/tmp/gopath259824945/pkg/mod/github.com/containous/yaegi@v0.7.2/interp/cfg.go:48 +0x180
github.com/containous/yaegi/interp.(*Interpreter).Eval(0x872180, 0x2ee867, 0x47, 0x0, 0x0, 0x6bb6, 0x872180, 0x16, 0x0, 0x6bb6)
	/tmp/gopath259824945/pkg/mod/github.com/containous/yaegi@v0.7.2/interp/interp.go:322 +0x1e0
main.main()
	/tmp/sandbox574545050/prog.go:19 +0xe0
```

Go Playground link: https://play.golang.org/p/udc3O_4fT5C
The following program `sample.go` triggers a panic:
```go
package main

import "github.com/containous/yaegi/interp"

const src = `package foo
func Bar(s string, fn func(string)string) string { return fn(s) }`

func main() {
	i := interp.New(interp.Options{})

	_, err := i.Eval(src)
	if err != nil {
		panic(err)
	}

	v, err := i.Eval("foo.Bar")
	if err != nil {
		panic(err)
	}

	bar := v.Interface().(func(string, func(string)string) string)

	r := bar("Kung", addS)
	println(r)
}
func addS(s string) string {
return s + "s"
}
```
See https://play.golang.org/p/jcXKEMrXgZr

Expected result:
```
Kungs
```
See https://play.golang.org/p/yJ3AdY_tSej

Got:
```
panic: reflect.Set: value of type func(string) string is not assignable to type *interp.node

goroutine 1 [running]:
reflect.Value.assignTo(0x2ad720, 0x31d8e8, 0x13, 0x2e54ea, 0xb, 0x2d5980, 0x0, 0x2d1100, 0x2b0620, 0x80c6c0, ...)
	/usr/local/go/src/reflect/value.go:2403 +0x420
reflect.Value.Set(0x2d5980, 0x80c6d8, 0x196, 0x2ad720, 0x31d8e8, 0x13)
	/usr/local/go/src/reflect/value.go:1537 +0xc0
github.com/containous/yaegi/interp.genFunctionWrapper.func2.1(0x83ee20, 0x2, 0x2, 0x83ee00, 0x83ee20, 0x8582a0, 0x1, 0x358280)
	/tmp/gopath845216020/pkg/mod/github.com/containous/yaegi@v0.7.1/interp/run.go:512 +0x400
reflect.callReflect(0x83ee00, 0x82bf58, 0x82bf4c, 0x0)
	/usr/local/go/src/reflect/value.go:549 +0x380
reflect.makeFuncStub(0x2e386d, 0x4, 0x31d8e8, 0x1, 0x2af9a0, 0x83ee00, 0x13, 0x0, 0x0, 0x78ce, ...)
	/usr/local/go/src/reflect/asm_amd64p32.s:20 +0x40
main.main()
	/tmp/sandbox709996617/prog.go:23 +0x160

```

<!-- ⚠️ If you do not respect this template your issue will be closed. -->
<!-- ⚠️ Make sure to browse the opened and closed issues before submit your issue. -->

#### Proposal

I'm a big fan of `ipython`. `ipython` has syntax highlighting. It looks like this:

![ipython screenshot](https://ipython.readthedocs.io/en/stable/_images/ipython-6-screenshot.png)

Would be cool if yaegi could support this as well, although It hink that this will maybe crash when rlwrap is being used.

#### Background

Colors are nice.. mhhhhkaaay.

#### Workarounds

No, current workaround.

The following program `sample.go` outputs the wrong value:
```go
package main
import "fmt"
func main() {
	const huge = 1 << 100
	const large = huge>>38
	fmt.Println(int64(large))
}
```

Expected result:
```console
$ go run ./sample.go
4611686018427387904
```

Got:
```console
$ yaegi ./sample.go
0
```
It seems that untyped constants are truncated if they overflow int64, instead of being arbitrary precision (see https://golang.org/ref/spec#Constants)
The following program `sample.go` does not trigger any error:

```go
package main

import "fmt"

func Bar() string {
	return
}

func main() {
	fmt.Println(Bar())
}
```

Expected result:
```console
$ go run ./sample.go

# command-line-arguments
./sample.go:6:2: not enough arguments to return
	want (string)
```

Got:
```console
$ yaegi ./sample.go
// Empty output, should trigger an error
```
The following program `sample.go` has wrong output:

```go
package main

import (
	"fmt"
)

type Foo int

func (Foo) String() string {
	return "foo"
}

func print(arg interface{}) {
	fmt.Println(arg)
}

func main() {
	var arg Foo
	var f = print
	f(arg)
}
```

Expected result:
```console
$ go run ./sample.go
foo
```

Got:
```console
$ yaegi ./sample.go
0
```

It appears that `fmt.Println` does not see that `Foo` declared in the interpreter implements `fmt.Stringer` and simply outputs the int value.

I met the same problem with my interpreter gomacro and I have no idea how to fix this - except by "cheating" (i.e. replacing `fmt.Println` with an interpreter-aware implementation)
Several months ago, before my project switched over to Go modules, I did an experimental integration of yaegi. I used the interp package to instantiate a VM and run yaegi scripts. In order to make some of my project's internal packages available, I used `goexports` to generate symbol files, e.g.:
```
goexports project/pkg/base
```
This worked fine originally, but having switched over to Go modules and Go 1.13, I find that goexports no longer works properly. Here is a (slightly edited for clarity) error message:

```
	 goexports project/pkg/base
2019/10/24 09:20:34 type-checking package "project/pkg/base" failed (/home/john/go/src/project/pkg/base/base.go:26:2: could not import project/pkg/resourcemanager (type-checking package "project/pkg/resourcemanager" failed
[... elided ...]
could not import github.com/victorspringer/http-cache/adapter/memory (type-checking package "github.com/victorspringer/http-cache/adapter/memory" failed (/home/john/go/pkg/mod/github.com/victorspringer/http-cache@v0.0.0-20190721184638-fe78e97af707/adapter/memory/memory.go:33:2: could not import github.com/victorspringer/http-cache (cannot find package "github.com/victorspringer/http-cache" in any of:
	/usr/local/go/src/github.com/victorspringer/http-cache (from $GOROOT)
	/home/john/go/src/github.com/victorspringer/http-cache (from $GOPATH)))))))))))))
```

Basically, it seems as though once it got out of the packages in *my* repo and started to descend into external imports such as github.com/victorspringer/http-cache, it got lost.

I believe the problem may be related to this code in goexports.go:

```
func genContent(dest, pkgName, license string) ([]byte, error) {
	p, err := importer.ForCompiler(token.NewFileSet(), "source", nil).Import(pkgName)
```
The documentation for ForCompiler states:

> A lookup function must be provided for correct module-aware operation. Deprecated: If lookup is nil, for backwards-compatibility, the importer will attempt to resolve imports in the $GOPATH workspace.

I'm afraid I don't know enough about the Go build process, particularly about modules, to be able to suggest an actual solution.