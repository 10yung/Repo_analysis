I am trying to use an ivyDep (included via dependencies):
  com.helger / ph-jaxb-pom / 1.0.3

In its pom.xml file at
  https://github.com/phax/ph-jaxb-pom/blob/master/pom.xml

it has the following section near the bottom:
```
      <dependency>
        <groupId>org.glassfish.jaxb</groupId>
        <artifactId>jaxb-bom</artifactId>
        <version>${jaxb.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
```

which gives:

```
--------------------------------------------
  org.glassfish.jaxb:jaxb-bom:${jaxb.version} 
	not found: /home/dennis/.ivy2/local/org.glassfish.jaxb/jaxb-bom/${jaxb.version}/ivys/ivy.xml
	not found: https://repo1.maven.org/maven2/org/glassfish/jaxb/jaxb-bom/${jaxb.version}/jaxb-bom-${jaxb.version}.pom
	download error: Caught java.net.URISyntaxException: Illegal character in path at index 84: https://oss.sonatype.org/content/repositories/releases/org/glassfish/jaxb/jaxb-bom/${jaxb.version}/jaxb-bom-${jaxb.version}.pom (Illegal character in path at index 84: https://oss.sonatype.org/content/repositories/releases/org/glassfish/jaxb/jaxb-bom/${jaxb.version}/jaxb-bom-${jaxb.version}.pom) while downloading https://oss.sonatype.org/content/repositories/releases/org/glassfish/jaxb/jaxb-bom/${jaxb.version}/jaxb-bom-${jaxb.version}.pom

```

I don't know enough about maven to say if the problem is in the (generated?) pom.xml file, or if mill should be able to resolve this.

Making my project directly depend on the latest version of `org.glassfish.jaxb / jaxb.com` (which is fetched succesfully) does not solve the problem as it will still try to fetch `${jaxb.version}`.

Mill has a convenient task to check for the availability of newer versions of dependencies `mill.scalalib.Dependency/updates`.

Unfortunately this task only prints the output (in human readable form), but does not persist it in a machine-readable format. This makes it very difficult to reuse the output in other tasks, essentially requiring regex parsing of strings.

The changes proposed here change the `updates` task to expose the underlying data structures representing the upgrade path. An additional task, `showUpdates` is added, implementing the original, human readable, output of updates.
This first popped up in gitter: https://gitter.im/lihaoyi/mill?at=5e16ff37e52f635378ad933a

The initial stack trace:

```

[1585/1733] framework.rmfApp.allSourceFiles 
1 targets failed
framework.rmfApp.allSourceFiles java.nio.file.FileSystemException: <redacted>/framework/rmf.app/src/main/java: Zu viele offene Dateien
    sun.nio.fs.UnixException.translateToIOException(UnixException.java:91)
    sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)
    sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)
    sun.nio.fs.UnixFileSystemProvider.newDirectoryStream(UnixFileSystemProvider.java:427)
    java.nio.file.Files.newDirectoryStream(Files.java:457)
    os.walk$stream$$anon$2.generate(ListOps.scala:225)
    geny.Generator$Mapped.generate(Generator.scala:283)
    geny.Generator.foreach(Generator.scala:49)
    geny.Generator.foreach$(Generator.scala:49)
    geny.Generator$Mapped.foreach(Generator.scala:281)
    geny.Generator.toBuffer(Generator.scala:127)
    geny.Generator.toBuffer$(Generator.scala:125)
    geny.Generator$Mapped.toBuffer(Generator.scala:281)
    geny.Generator.toArray(Generator.scala:131)
    geny.Generator.toArray$(Generator.scala:131)
    geny.Generator$Mapped.toArray(Generator.scala:281)
    os.walk$.apply(ListOps.scala:95)
    mill.scalalib.JavaModule.$anonfun$allSourceFiles$4(JavaModule.scala:193)
    scala.collection.TraversableLike$WithFilter.$anonfun$flatMap$2(TraversableLike.scala:773)
    scala.collection.Iterator.foreach(Iterator.scala:941)
    scala.collection.Iterator.foreach$(Iterator.scala:941)
    scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
    scala.collection.IterableLike.foreach(IterableLike.scala:74)
    scala.collection.IterableLike.foreach$(IterableLike.scala:73)
    scala.collection.AbstractIterable.foreach(Iterable.scala:56)
    scala.collection.TraversableLike$WithFilter.flatMap(TraversableLike.scala:772)
    mill.scalalib.JavaModule.$anonfun$allSourceFiles$2(JavaModule.scala:191)
    mill.define.Task$MappedDest.evaluate(Task.scala:365)
```

A short run of `lsof -p` (on Linux) on the mill server process after mill client finished suggests, that mill keeps all `meta.json` files open. 

Run in mill repo with mill 0.5.7:
```
23:42:01 ⌁0% θ74° lefou:~/work/opensource/mill master(1)+* ± mill assembly; lsof -p 7552 | wc
[2/301] publishVersion 
[274/301] dev.sources 
   3622   32598  523167
23:42:03 ⌁0% θ74° lefou:~/work/opensource/mill master(1)+* ± mill assembly; lsof -p 7552 | wc
[2/301] publishVersion 
[274/301] dev.sources 
   3911   35199  564671
23:42:05 ⌁0% θ74° lefou:~/work/opensource/mill master(1)+* ± mill assembly; lsof -p 7552 | wc
[2/301] publishVersion 
[281/301] dev.unmanagedClasspath 
Exception in thread "MillServerActionRunner" 
   4178   37602  603159
23:42:07 ⌁0% θ74° lefou:~/work/opensource/mill master(1)+* ± mill assembly; lsof -p 7552 | wc
java.io.FileNotFoundException: out/mill-worker-to2CVwVb3b2Ba/50wr+rtQIqC2I=-1/run (Zu viele offene Dateien)
        at java.io.FileInputStream.open0(Native Method)
        at java.io.FileInputStream.open(FileInputStream.java:195)
        at java.io.FileInputStream.<init>(FileInputStream.java:138)
        at java.io.FileInputStream.<init>(FileInputStream.java:93)
        at mill.main.Server.handleRun(MillServerMain.scala:124)
        at mill.main.Server.$anonfun$run$2(MillServerMain.scala:105)
        at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
        at mill.main.Server$.lockBlock(MillServerMain.scala:198)
        at mill.main.Server.$anonfun$run$1(MillServerMain.scala:84)
        at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
        at mill.main.Server$.tryLockBlock(MillServerMain.scala:205)
        at mill.main.Server.run(MillServerMain.scala:81)
        at mill.main.MillServerMain$.main(MillServerMain.scala:45)
        at mill.main.MillServerMain.main(MillServerMain.scala)
Exception in thread "main" java.io.IOException: com.sun.jna.LastErrorException: [24] Zu viele offene Dateien
        at org.scalasbt.ipcsocket.UnixDomainServerSocket.<init>(UnixDomainServerSocket.java:112)
        at org.scalasbt.ipcsocket.UnixDomainServerSocket.<init>(UnixDomainServerSocket.java:93)
        at mill.main.Server.$anonfun$run$2(MillServerMain.scala:91)
        at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
        at mill.main.Server$.lockBlock(MillServerMain.scala:198)
        at mill.main.Server.$anonfun$run$1(MillServerMain.scala:84)
        at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
        at mill.main.Server$.tryLockBlock(MillServerMain.scala:205)
        at mill.main.Server.run(MillServerMain.scala:81)
        at mill.main.MillServerMain$.main(MillServerMain.scala:45)
        at mill.main.MillServerMain.main(MillServerMain.scala)
Caused by: com.sun.jna.LastErrorException: [24] Zu viele offene Dateien
        at org.scalasbt.ipcsocket.UnixDomainSocketLibrary.socket(Native Method)
        at org.scalasbt.ipcsocket.UnixDomainServerSocket.<init>(UnixDomainServerSocket.java:103)
        ... 10 more
      0       0       0
```

This does not happen with mill 0.5.3 and 0.5.3-13-4f4fab
Sets flag `--pinentry-mode` to `loopback`, to prevent `gpg` from interactively asking for
the gpg passphrase. This flag is necessary for newer versions of  `gpg`.

The flag has been available in `gpg` since version `1.4.0 `, so this patch should be compatible with `gpg` versions `1.4.0` and up.

See: https://www.gnupg.org/%28de%29/documentation/manuals/gpgme/Pinentry-Mode.html
```
import mill._
import scalalib._
import publish._
import $ivy.`com.lihaoyi::mill-contrib-bsp:$MILL_VERSION`

object myproj extends ScalaModule {
  def scalaVersion = "2.12.10"

  override def ivyDeps = Agg(
    ivy"com.lihaoyi::os-lib:0.4.0",
    ivy"com.lihaoyi::upickle:0.8.0",
  )

  object tests extends Tests {
    def ivyDeps = Agg(
      ivy"com.lihaoyi::ammonite-ops:1.8.1",
      ivy"com.lihaoyi::utest:0.7.2"
    )

    def testFrameworks = Seq("utest.runner.Framework")
  }
}
```
`ammonite` and `utest` can not be accessed by Intellij. 
Hey @lihaoyi,

I spoke to you on gitter about remote caching maybe a month or so ago and here's my attempt.
I have a remote caching server implementation and a write up here: https://github.com/psilospore/mill-remote-cache-server

This was a fun exercise! Let me know how I could improve this.

In addition to the information found in the readme linked above, on the mill front I wrote:
* A remote caching client that talks to my remote caching server RemoteCacher
* It uses some dependencies that are only there for the proof of concept I could do it differently if you'd like.
* It checks what tasks are cached, uploads tasks in a gzipped tar, and fetches tasks by uncompromising it and moving it to it's proper place in `out`.
* You mentioned I should first make mill work with relative paths. I did struggle with that a bit but another method I thought about was just making it relative when I upload it. There are probably some problems with that approach I'll mention it later.
* Not sure if I should use apache commons compress or call our to `tar` with `ammonite.ops.%%`.


This only upgrades Mill's core modules; a lot of the worker modules are left on 2.12, which is fine because they're classloader isolated anyway

Most of the `foo.api` modules needed to be cross-built, so they can be used with both the `foo` modules running on 2.13.1 and the `foo.worker` modules running on 2.12.10
Document purpose, users and who defines them.

E.g.

* `MILL_VERSION`
* `MILL_BUILD_LIBRARIES`
* ...
I have forked the a [Maven project](https://github.com/hmf/graal-js-jdk11-maven-demo) that demonstrates the use of the GraalVM. It also includes a set of tests that confirm that the GraalVM JS engine is faster than the Nashorn engine. These tests work correctly. 

I set-up the same project using Mill. The example executes correctly - Nashorn is nearly twice as slow as Graal.js. However the tests fail due to class loading. In order for this to work we need to pass parameters to the JVM and add the libraries to the classpath. Due to issue #690 I created both a [JUnit version](https://github.com/hmf/graal-js-jdk11-maven-demo/tree/mill_maven) and a [uTest version](https://github.com/hmf/graal-js-jdk11-maven-demo/tree/mill_utest). The former uses the same directory structure as the original project (intended for contribution), the latter uses the Mill standard directory structure.   

I tried to track the issue that leads me to the [test call](https://github.com/lihaoyi/mill/blob/ed8ea584c67f1ab83c488441779356a36d8fa3bb/scalalib/src/JavaModule.scala#L570). which then executes a [subprocess](https://github.com/lihaoyi/mill/blob/ca1def4d6f5c829701e04f86dacb720bb57f036f/main/src/modules/Jvm.scala#L54) call that ends in the call to [TestRunner](https://github.com/lihaoyi/mill/blob/9ba4cb69331386dfde9bac69dc2d5b22401face3/scalalib/src/TestRunner.scala). I see that this last execution takes the classpath passed to it as an argument and sets it according. However when I print the classpath (see [this example](https://github.com/hmf/graal-js-jdk11-maven-demo/blob/mill_maven/src/main/java/com/mycompany/app/App.java#L180)), it does not list the required libraries. Nevertheless I have confirmed that the classpath argument is passed on correctly.

Because the problem manifests itself in both test frameworks I suspect the problem is in the `TestRunner` and not for example in the [JUnitRunner](https://github.com/sbt/junit-interface/blob/20183572cb15cc302199b48824bd1812a5d4941e/src/main/java/com/novocode/junit/JUnitRunner.java). 

I have also seen issues #302 and #370 that seem to be related. These class loading issues seem to be tricky and at this point I do not know what other steps can be taken to diagnose and solve the problem. 

Any suggestions are welcome. 



If you pass invalid parameters to the `test` command it fails silently - no tests are executed. For example: 

```
 mill -i graaljs.test error
```

gives me: 

```
Test run started
Test run finished: 0 failed, 0 ignored, 0 total, 0.001s
```

However this will work correctly:

```
 mill -i graaljs.test +v
```

Tested with Mill 0.5.1, JDK 11 + Linux
