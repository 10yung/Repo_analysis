**TL;DR: Is a function for getting the default network interface needed/wanted?**

I'm working on a project where I use `libpnet` for packet sniffing. While porting from `pcap` (https://github.com/ebfull/pcap) to `libpnet`, I was missing an implementation to get the default network interface (capable of capturing packets).

With some research I found out that `pcap` uses a call to the `pcap_lookupdev` function[<sup>1</sup>]. Looking at the C code, I saw that they deprecated it anyway and use the first interface capable available that is not loopback[<sup>2</sup>].

With this in mind, I implemented the following naive helper-function in my project that works well. Filtering for valid IPs was necessary for me but I don't know if this is the general case or only for sniffing.

```rust
/// Tries to find the best suitable candidate for the default network interface:
/// It should be the first interface that is up, not loopback and has an ip.
fn default_interface(interfaces: &Vec<NetworkInterface>) -> Option<&NetworkInterface> {
    interfaces
        .iter()
        .filter(|e| e.is_up() && !e.is_loopback() && e.ips.len() > 0)
        .next()
}
```

 I wondered if you may want/need/plan a helper like this in the library? If this is the case and if you tell me a good place for adding it, I'd add a PR.

---

1: https://github.com/ebfull/pcap/blob/master/src/lib.rs#L201
2: https://github.com/the-tcpdump-group/libpcap/blob/master/pcap/pcap.h#L372

[<sup>1</sup>]: https://github.com/ebfull/pcap/blob/master/src/lib.rs#L201
[<sup>2</sup>]: https://github.com/the-tcpdump-group/libpcap/blob/master/pcap/pcap.h#L372
This fixes the panic (#399) that was happening when the memory used in checksum calculations was not 16-bit aligned.  The code no longer uses raw pointers so we don't need any checks for alignment.  I ran the pnet_packet unit tests.
Fixes #274 

### Problem:
- Types imported from `ipnetwork` are in the public interface of `pnet`, but are not reexported.
- This forces users to manually add `ipnetwork` to their dependencies to use those parts of `pnet`'s interface

### Changes:
- the crate `ipnetwork` is reexported

### Benefits:
- Usability: Users won't have to manually add their own `ipnetwork` dependency to their Cargo.toml
- Compatibility: Avoids versioning conflicts if users already use an incompatible version of `ipnetwork`

I can't think of any downsides for this change tbf.
Updates the requirements on [ipnetwork](https://github.com/achanda/ipnetwork) to permit the latest version.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/achanda/ipnetwork/releases">ipnetwork's releases</a>.</em></p>
<blockquote>
<h2>Release v0.16.0</h2>
<p>Changelog:
<a href="https://github-redirect.dependabot.com/achanda/ipnetwork/pull/103">achanda/ipnetwork#103</a>
<a href="https://github-redirect.dependabot.com/achanda/ipnetwork/pull/108">achanda/ipnetwork#108</a>
<a href="https://github-redirect.dependabot.com/achanda/ipnetwork/pull/109">achanda/ipnetwork#109</a>
<a href="https://github-redirect.dependabot.com/achanda/ipnetwork/pull/110">achanda/ipnetwork#110</a>
<a href="https://github-redirect.dependabot.com/achanda/ipnetwork/pull/112">achanda/ipnetwork#112</a>
<a href="https://github-redirect.dependabot.com/achanda/ipnetwork/pull/113">achanda/ipnetwork#113</a>
<a href="https://github-redirect.dependabot.com/achanda/ipnetwork/pull/114">achanda/ipnetwork#114</a>
<a href="https://github-redirect.dependabot.com/achanda/ipnetwork/pull/115">achanda/ipnetwork#115</a>
<a href="https://github-redirect.dependabot.com/achanda/ipnetwork/pull/116">achanda/ipnetwork#116</a></p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/achanda/ipnetwork/commit/ca2da8ae30e2c94e590c630890549a52cd0a794c"><code>ca2da8a</code></a> Uprev for a new release</li>
<li><a href="https://github.com/achanda/ipnetwork/commit/156ae55da0825968c148a2af8e3b95694e1d0f31"><code>156ae55</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/achanda/ipnetwork/issues/116">#116</a> from achanda/cleanup</li>
<li><a href="https://github.com/achanda/ipnetwork/commit/4dfdf142d0e4f451da6813deea5ab66f55d5a9e7"><code>4dfdf14</code></a> Cleanup comment on IPv6 implementation</li>
<li><a href="https://github.com/achanda/ipnetwork/commit/6851a0b272c086eb5fe50294a2f9114c596bbfca"><code>6851a0b</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/achanda/ipnetwork/issues/115">#115</a> from achanda/maintenance</li>
<li><a href="https://github.com/achanda/ipnetwork/commit/00256cf88526a8f83c0c8605d09a05296a4de3d0"><code>00256cf</code></a> Set a maintenance status</li>
<li><a href="https://github.com/achanda/ipnetwork/commit/80c67948296db458f77d59e872d77fb138d33257"><code>80c6794</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/achanda/ipnetwork/issues/114">#114</a> from achanda/ipv6-netmask</li>
<li><a href="https://github.com/achanda/ipnetwork/commit/18677e3b69c5d1217d314de69c2e09093d1de277"><code>18677e3</code></a> Run cargo fmt</li>
<li><a href="https://github.com/achanda/ipnetwork/commit/986ee0ba1cf16f2b6a1905825a30a9fcedd1ad2f"><code>986ee0b</code></a> Check against specific errors in parsing test</li>
<li><a href="https://github.com/achanda/ipnetwork/commit/f3ac9ba3feb50253c36559f65df1fe8ca8a155a1"><code>f3ac9ba</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/achanda/ipnetwork/issues/113">#113</a> from achanda/bench-netmask</li>
<li><a href="https://github.com/achanda/ipnetwork/commit/bc1064e5f04006526cbbfc369b57b4a45120180f"><code>bc1064e</code></a> Add a benchmark for parsing IPv4 netmask</li>
<li>Additional commits viewable in <a href="https://github.com/achanda/ipnetwork/compare/v0.15.0...v0.16.0">compare view</a></li>
</ul>
</details>
<br />


Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
Updates the requirements on [pnet_base](https://github.com/libpnet/libpnet) to permit the latest version.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/libpnet/libpnet/releases">pnet_base's releases</a>.</em></p>
<blockquote>
<h2>v0.25.0</h2>
<p>Fixes <a href="https://github-redirect.dependabot.com/libpnet/libpnet/issues/391">#391</a> and <a href="https://github-redirect.dependabot.com/libpnet/libpnet/issues/394">#394</a></p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href="https://github.com/libpnet/libpnet/commits/v0.25.0">compare view</a></li>
</ul>
</details>
<br />


Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
Upgrade to 0.25 broke things, for ex I got a panic in ipv4::checksum:
```
thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `0`,                                                                                                                                                           
 right: `1`: Cannot sum mis-aligned words at 0x7b2145203865', /home/pollux/.cargo/registry/src/github.com-1ecc6299db9ec823/pnet_packet-0.25.0/src/util.rs:71:5
stack backtrace:         
   0: backtrace::backtrace::libunwind::trace 
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized                                                                                                                       
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:77
   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt
             at src/libstd/sys_common/backtrace.rs:61
   4: core::fmt::write                                                             
             at src/libcore/fmt/mod.rs:1028
   5: std::io::Write::write_fmt                                                    
             at src/libstd/io/mod.rs:1412 
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:65
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:50
   8: std::panicking::default_hook::{{closure}}                                                                                                                        
             at src/libstd/panicking.rs:188
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:205
  10: std::panicking::rust_panic_with_hook                                                                                                                             
             at src/libstd/panicking.rs:464                   
  11: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:373
  12: std::panicking::begin_panic_fmt
             at src/libstd/panicking.rs:328
  13: pnet_packet::util::checksum
             at /home/pollux/.cargo/registry/src/github.com-1ecc6299db9ec823/pnet_packet-0.25.0/src/util.rs:71
  14: pnet_packet::ipv4::checksum
             at ./target/debug/build/pnet_packet-a197587747d07883/out/ipv4.rs:1226
```

The same code works with 0.23

Unfortunately, I cannot downgrade my dependencies to 0.23 because of #398 
Hi,
In latest release 0.25, there are several crates depending on `pnet_base` 0.22.0. This breaks crates including for ex `pnet_packet` and `pnet_base`, since they will end up including multiple and conflicting versions.
Example of build error caused by these problems:
```
   --> libpcap-analyzer/src/analyzer.rs:103:17
    |
98  |                 match dest {
    |                       ---- this match expression has type `pnet_base::macaddr::MacAddr`
...
103 |                 MacAddr(0x01, 0x00, 0x0c, 0xcd, 0xcd, 0xd0) => {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `pnet_base::macaddr::MacAddr`, found a different struct `pnet_base::macaddr::MacAddr`
    |
    = note: expected type `pnet_base::macaddr::MacAddr` (struct `pnet_base::macaddr::MacAddr`)
               found type `pnet_base::macaddr::MacAddr` (struct `pnet_base::macaddr::MacAddr`)
note: Perhaps two different versions of crate `pnet_base` are being used?

```

This PR updates all dependencies to 0.25.0
Hey @JuxhinDB - possibly related to the conversation here: https://github.com/imsnif/bandwhich/issues/101

I'm trying (make a PR) to upgrade `libpnet` on https://github.com/hughesac/packet_builder and not really managing.

The farthest I've got is with these dependencies:
```
[dependencies]
derive-new = "0.5"
ipnetwork = "0.12.8"
pnet = "0.25.0"
pnet_datalink = "0.25.0"
pnet_base = "0.22.0"
pnet_macros_support = "0.25.0"
```
At which point when I do `cargo test` I get:
```
⋊> ~/c/packet_builder on master ⨯ cargo test                                                                                                                                                                                           22:43:01
   Compiling packet-builder v0.4.0 (/home/aram/code/packet_builder)
    Finished dev [unoptimized + debuginfo] target(s) in 0.83s
     Running target/debug/deps/packet_builder-eff724336d4d9e8c

running 7 tests
test arp::tests::macro_arp_basic ... ok
test ethernet::tests::macro_ether_basic ... ok
test icmp::tests::macro_icmp_basic ... ok
test tcp::tests::macro_tcp_basic ... ok
test udp::tests::macro_udp_basic ... ok
test vlan::tests::macro_vlan_basic ... ok
test ipv4::tests::macro_ipv4_basic ... FAILED

failures:

---- ipv4::tests::macro_ipv4_basic stdout ----
thread 'ipv4::tests::macro_ipv4_basic' panicked at 'assertion failed: `(left == right)`
  left: `0`,
 right: `1`: Cannot sum mis-aligned words at 0x7fb7f5ed4fe7', /home/aram/.cargo/registry/src/github.com-1ecc6299db9ec823/pnet_packet-0.25.0/src/util.rs:71:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.


failures:
    ipv4::tests::macro_ipv4_basic

test result: FAILED. 6 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out

error: test failed, to rerun pass '--lib'
```

Do you have a suggestion for a direction?
Hi,
This pull request adds initial support for the Dhcp packet
Dhcp options are not yet supported as I wasn't sure what the best method to do this would be, as such they are in the payload at this moment in time
Feedback welcome
This is WIP. I'm still planning to test it on Windows and FreeBSD, but haven't done so yet. And there're a couple of TODOs in the code.

But what bothers me the most is how to name new enum value. The existing `Layer3` is IPv4, and I wasn't able to solve this without either breaking compatibility (by refactoring layer 3 related enum values into something similar to what already exists for layer 4), or introducing badly named identifiers. This WIP has the latter - the new value is `Ipv6Layer3`.

Something that I've observed that might worth mentioning in the docs:
* Unlike IPv4, source address is not filled in automatically for IPv6 layer 3 packets.
* `HDRINC` (aka Layer3) has no effect for receiving IPv6 on Linux. IPv6 header is always stripped. If this is also the case with other OS, then there is no point adding `Ipv6TransportChannelIterator`

By the way, is there a way to construct an iterator over raw packets? Like `ipv4_iterator`, but with byte slice instead of `Ipv4Packet`. With `HDRINC` not working, it seems to be crucial for IPv6. Not to mention that it's generally useful for layer 4 protocols.

See #344 
ping @JuxhinDB 