<!--
If you are new to the project get yourself familiar with https://www.mono-project.com/community/bugs/make-a-good-bug-report/ before filling the issue
-->

## Steps to Reproduce

These steps are using the attached test app that demonstrates the issue.

1. Have a form with ComboBox controls that can be hidden (Visible=false) as well as a context menu that can be displayed.
2. Set a ComboBox to be hidden (Visible=false).
3. Right-click to open the context menu.
4. Left-click in the area where the hidden ComboBox is.
5. Observe that the ComboBox lists pops up even though the combo box itself is hidden.

## Screenshots

I hid most of the combo boxes in my test app and then clicked on the location of the bottom one when the context menu was displayed:

![Screenshot 2020-01-18 at 5 51 53 PM](https://user-images.githubusercontent.com/56554927/72671662-9f569100-3a1b-11ea-847f-52b2e209f1ba.png)

You can open any number of hidden combo boxes at once:

![Screenshot 2020-01-18 at 5 51 15 PM](https://user-images.githubusercontent.com/56554927/72671665-b4332480-3a1b-11ea-9cc3-eac6db0303cf.png)



## Sample Code

```
using System;
using System.Drawing;
using System.Windows.Forms;
namespace SnippetTest
{
    public class ComboBoxTest
    {
        private class ComboBoxContainer : Control
        {
            private ComboBox comboBox = new ComboBox() { Location = new Point(0, 0), Width = 200, DropDownStyle = ComboBoxStyle.DropDownList };
            private Button toggle1 = new Button() { Location = new Point(200, 0), Width = 100, Text = "Hide" };

            public ComboBoxContainer()
            {
                Size = new Size(300, 25);
                Controls.Add(comboBox);
                Controls.Add(toggle1);

                comboBox.Items.AddRange(new object[] { "Lorem ipsum", "dolor sit", "amet, consectetur", "adipiscing elit." });
                comboBox.SelectedIndex = 0;

                toggle1.Click += (sender, e) =>
                {
                    if (toggle1.Text == "Hide")
                    {
                        comboBox.Visible = false;
                        toggle1.Text = "Show";
                    }
                    else
                    {
                        comboBox.Visible = true;
                        toggle1.Text = "Hide";
                    }
                };
            }
        }

        public static void Main(string[] args)
        {
            Form form = new Form() { Width = 500, Height = 250 };
            Label contextMenuArea = new Label()
            {
                Location = new Point(form.Width - 200 , 0),
                Size = new Size(200, form.Height),
                Text = "Click here to display context menu",
                ContextMenu = new ContextMenu(new MenuItem[]
                {
                    new MenuItem("Lorem ipsum"),
                    new MenuItem("dolor sit"),
                    new MenuItem("amet, consectetur"),
                    new MenuItem("adipiscing elit."),
                })
            };
            form.Controls.Add(contextMenuArea);

            for (int i = 0; i < 10; i++)
            {
                form.Controls.Add(new ComboBoxContainer() { Location = new Point(0, i * 25) });
            }
            Application.Run(form);
        }
    }
}

```


<!--
You may drag & drop the attachment (repro code/solution, screenshot, etc.) onto the issue.
-->

### Current Behavior

<!--
What is the current behavior?
-->

Clicking on a hidden ComboBox will cause its list to pop up if a ContextMenu is displayed. If a ContextMenu isn't displayed then the issue doesn't occur.

### Expected Behavior

Clicking on a hidden ComboBox will never cause its list to pop up.

<!--
Please describe the behavior you are expecting
-->

## On which platforms did you notice this

[ ] macOS
[X] Linux
[ ] Windows

**Version Used**:

Mono JIT compiler version 6.8.0.96 (tarball Wed Jan 15 10:20:48 UTC 2020)
<!--
You can use `mono --version` or About dialog to obtain this information.
-->



<!--
You can join us at https://gitter.im/mono/mono to discuss your reported issue
-->

None
If a thread was suspended and doesn't have any managed stack, it was considered as terminated, but it wasn't really terminated because it can execute managed code again, and stop in a breakpoint so if the execution arrives in debugger_agent_breakpoint_from_context we reset the flag terminated to FALSE.


Fixes #18106 

Backport of #18501.

/cc @thaystg 
If a thread was suspended and doesn't have any managed stack, it was considered as terminated, but it wasn't really terminated because it can execute managed code again, and stop in a breakpoint so if the execution arrives in debugger_agent_breakpoint_from_context we reset the flag terminated to FALSE.


Fixes #18106 

Backport of #18501.

/cc @thaystg 
Creating test for issue #18106.
Waiting to create an infrastructure to compile C files from mcs tests.

If a thread was suspended and doesn't have any managed stack, it was considered as terminated, but it wasn't really terminated because it can execute managed code again, and stop in a breakpoint so if the execution arrives in debugger_agent_breakpoint_from_context we reset the flag terminated to FALSE.


Fixes #18106 
## Steps to Reproduce

1. Install or update Mono 6.8.0 and XSP
2. execute: xsp

### Current Behavior
Fails with this error:
Unhandled Exception:
System.TypeLoadException: Could not load type of field 'Mono.WebServer.XSP.Server:<>f__mg$cache1' (3) due to: Could not resolve type with token 0100000b from typeref (expected class 'Mono.Security.Protocol.Tls.PrivateKeySelectionCallback' in assembly 'Mono.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756') assembly:Mono.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756 type:Mono.Security.Protocol.Tls.PrivateKeySelectionCallback member:(null)
[ERROR] FATAL UNHANDLED EXCEPTION: System.TypeLoadException: Could not load type of field 'Mono.WebServer.XSP.Server:<>f__mg$cache1' (3) due to: Could not resolve type with token 0100000b from typeref (expected class 'Mono.Security.Protocol.Tls.PrivateKeySelectionCallback' in assembly 'Mono.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756') assembly:Mono.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756 type:Mono.Security.Protocol.Tls.PrivateKeySelectionCallback member:(null)

### Expected Behavior
Start without errors.

## On which platforms did you notice this

[X ] Linux

**Version Used**:

Mono JIT compiler version 6.8.0.96 (tarball Wed Jan 15 10:08:18 UTC 2020)

parsing fully qualified method name using a`MonoMethodDesc` struct
<!--
Thank you for your Pull Request!

If you are new to contributing to Mono, please try to do your best at conforming to our coding guidelines http://www.mono-project.com/community/contributing/coding-guidelines/ but don't worry if you get something wrong. One of the project members will help you to get things landed.

Does your pull request fix any of the existing issues? Please use the following format: Fixes #issue-number
-->

Here is an extremely simple VS2017 project that has only one form. It will not build with Mono msbuild. This is with the Linux version of Mono on a Raspberry Pi 3 running Raspbian Buster.
**_Please NOTE:  This is the same VS2017 solution as presented in Issue 18400._**
-->

## Steps to Reproduce

1.  tar -xvf mono.tar.gz
2. msbuild Mono-test.sln
3. OR
4. msbuild-test.bat
[mono.tar.gz](https://github.com/mono/mono/files/4077100/mono.tar.gz)


<!--
You may drag & drop the attachment (repro code/solution, screenshot, etc.) onto the issue.
-->

### Current Behavior
ron@multus:~/src/mono/test $ ./msbuild-test.bat
Microsoft (R) Build Engine version 16.5.0-ci for Mono
Copyright (C) Microsoft Corporation. All rights reserved.

/usr/lib/mono/msbuild/15.0/bin/MSBuild.dll -t:Rebuild -verbosity:diag /p:CscToolPath=c:\Program Files (x86)\Mono\bin /p:CscToolExe=csc.bat -p:Configuration=Release /p:DebugType=portable Mono-test.sln
MSBUILD : Configuration error MSB4136: Error reading the toolset information from the configuration file "System.Configuration (6)". Unrecognized configuration section <startup>
ron@multus:~/src/mono/test $
<!--
What is the current behavior?
-->

### Expected Behavior

<!--
Please describe the behavior you are expecting
-->

## On which platforms did you notice this

[ ] macOS
[x ] Linux
[ ] Windows

**Version Used**:
You can use `mono --version` or About dialog to obtain this information.
ron@multus:~/src/mono/test $ msbuild -version
Microsoft (R) Build Engine version 16.5.0-ci for Mono
Copyright (C) Microsoft Corporation. All rights reserved.

16.5.0.6501ron@multus:~/src/mono/test $ mono -V
Mono JIT compiler version 6.8.0.96 (tarball Wed Jan 15 10:23:49 UTC 2020)
Copyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com
        TLS:           __thread
        SIGSEGV:       normal
        Notifications: epoll
        Architecture:  armel,vfp+hard
        Disabled:      none
        Misc:          softdebug
        Interpreter:   yes
        LLVM:          yes(610)
        Suspend:       preemptive
        GC:            sgen (concurrent by default)
ron@multus:~/src/mono/test $

## Stacktrace

```
Please paste the stack trace here if available.
```

<!--
You can join us at https://gitter.im/mono/mono to discuss your reported issue
-->

When calling a generic class we need to make sure it has been initilized. This is done by calling generic_class_init. Since the need to check if the method has been executed happens frequently, but will only run once, it should be put out of line, assisting branch predictor, preventing misspredictions (in all places but the first).

Currently this is not the case, since we will generate code like this:

```
0000000000000484: cmp         byte ptr [rcx+2Dh],0
0000000000000488: jne         000000000000048F
000000000000048A: call        p_3_plt_EmptyGame__jit_icall_mono_generic_class_init_llvm
000000000000048F: mov         rax,qword ptr [mono_aot_EmptyGame_llvm_got+0C8h]
```

Where we will always (except for first call) take the forward branch.

Instead we should mark the call to the method as out of line, at least giving the code generator the information so it can move it out of line and preventing a jmp, unless when it needs to init, the slow path. Doing that will generate the following code:

```
0000000000000484: cmp         byte ptr [rcx+2Dh],0
0000000000000488: je          00000000000004C1
000000000000048A: mov         rax,qword ptr [mono_aot_EmptyGame_llvm_got+0C8h]
...
00000000000004C1: call        p_3_plt_EmptyGame__jit_icall_mono_generic_class_init_llvm
00000000000004C6: jmp         000000000000048A

```