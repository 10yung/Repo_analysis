Based on discussion in https://github.com/node-webrtc/node-webrtc/issues/586, it seems we can enable this test. It passes locally. Let's see if it passes in CI.
When I try this without docker it works fine. 
But when I use the docker image of the same code the video doesn't connect. 

`
a=candidate:1637539657 1 udp 2122260223 172.29.0.3 35090 typ host generation 0 network-id 1
a=candidate:790176697 1 tcp 1518280447 172.29.0.3 35197 typ host tcptype passive generation 0 
`

I am getting only one ice candidate with the docker IP and not the host machine IP. 

Any workaround will be highly appreciated. 

Twinme has posted [a workaround](https://bugs.chromium.org/p/webrtc/issues/detail?id=7585#c14) for the PhysicalSocketServer issue wherein an RTCPeerConnection could end up using more than `FD_SETSIZE` sockets, leading to a crash. We should try to apply this patch when building.

Check out #362 for context. This would also likely fix #540, and an issue I've noticed with at least one of the WPT tests ([RTCConfiguration-iceCandidatePoolSize.html](https://github.com/node-webrtc/node-webrtc/blob/e0e929c536494e2baeb16e480dae8b20fd675e62/test/web-platform-tests/to-run.yaml#L34)).

Whoever takes this will need to adapt our [CMakeLists.txt](https://github.com/node-webrtc/node-webrtc/blob/82a88fc0ad5f34ca4e52b0fd85235c8ef4c2de0c/CMakeLists.txt) to apply the patch before building the webrtc.org code.
RTCSdpType "rollback" type is not supported by node-webrtc.
According to [https://w3c.github.io/webrtc-pc/#dfn-update-the-negotiation-needed-flag](https://w3c.github.io/webrtc-pc/#dfn-update-the-negotiation-needed-flag), `negotiationneeded` event shouldn't be fired when `signalingState` is not `stable`.

By receiving `offer`, setting it with `localDescription` and then calling `addTrack`, you can check `negotiationneeded` is fired even when `signalingState` is `have-remote-offer`.

I checked google webrtc native source and it seems it fires `negotiationneeded` event whenever `direction` property of `RtpTransceiver`, which does not comply with  [https://w3c.github.io/webrtc-pc/#dfn-update-the-negotiation-needed-flag](https://w3c.github.io/webrtc-pc/#dfn-update-the-negotiation-needed-flag), 
AddTrack part of [https://w3c.github.io/webrtc-pc/#rtcpeerconnection-interface-extensions](https://w3c.github.io/webrtc-pc/#rtcpeerconnection-interface-extensions)
Refer to crash issue: 
https://github.com/node-webrtc/node-webrtc/issues/576
```
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Core was generated by `/home/yhu/workspace/xxxxx/node_modules/electron/dist/electron --inspect=5858 /'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007f0811b56f49 in node_webrtc::RTCDataChannel::CleanupInternals() () from /home/yhu/workspace/xxxxxx/node_modules/wrtc/build/Release/wrtc.node
[Current thread is 1 (Thread 0x7f0829ba0b40 (LWP 26624))]
(gdb) bt
#0  0x00007f0811b56f49 in node_webrtc::RTCDataChannel::CleanupInternals() () from /home/yhu/workspace/xxxxx/node_modules/wrtc/build/Release/wrtc.node
#1  0x00007f0811b5b8e8 in node_webrtc::RTCDataChannel::OnPeerConnectionClosed() () from /home/yhu/workspace/xxxxx/node_modules/wrtc/build/Release/wrtc.node
#2  0x00007f0811b7c1ec in node_webrtc::RTCPeerConnection::Close(Napi::CallbackInfo const&) () from /home/yhu/workspace/xxxxx/node_modules/wrtc/build/Release/wrtc.node
#3  0x00007f0811b8828d in Napi::ObjectWrap<node_webrtc::RTCPeerConnection>::InstanceMethodCallbackWrapper(napi_env__*, napi_callback_info__*) ()
   from /home/yhu/workspace/xxxxx/node_modules/wrtc/build/Release/wrtc.node
#4  0x00005578c04e8041 in ?? ()
#5  0x00005578c09df3a0 in ?? ()
#6  0x00007ffec6f0db20 in ?? ()
#7  0x0000000000000000 in ?? ()
(gdb) 
```
```
var pc = new RTCPeerConnection(options);
pc.ondatachannel = function(event) {
   var channel = event.channel;
﻿   channel.onopen = function(event) {
   channel.send('Hi back!');// after this point, we close offer side software,  and
                            // periodically check channel.readyState, it's always `'open'`
  }
  channel.onmessage = function(event) {
    console.log(event.data);
  }
}
```
When I create a peer connection in the browser and send an offer to connect to another peer on the server, everything works fine. However, when I create a peer on server first and send the offer over to the browser, ice gathering is never triggered. 

Server.js 

```
let remoteRTCpeer = new RTCPeerConnection(configuration)
// setup icehandler
  getUserMedia({audio: true,video: true})
        .then( stream => {
            stream.getTracks().forEach((track)=>{
                remoteRTCpeer .addTrack(track, stream)
            }

 let offer = null
        try {
            offer = await remoteRTCpeer.createOffer()
        } catch (err) {
            console.error("error in offer", err)
        }
        remoteRTCpeer .setLocalDescription(offer)
//send offer to browser
`
```

browser.js
`
// set up ice handler
// create answer from offer and set it as localdescription
`

The offer and answer is created seemingly correct but ice gathering is not being triggered.

Example of an offer created from the server :
`
{type: "offer", sdp: "v=0
↵o=- 3324652858265797703 2 IN IP4 127.0.0.1
↵s=-
↵t=0 0
↵a=msid-semantic: WMS
↵"}
`
Ref: https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescription/toJSON