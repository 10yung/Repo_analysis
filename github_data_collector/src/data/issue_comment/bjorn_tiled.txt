QJSEngine can pass a nullptr to a `Q_INVOKABLE` or `Q_PROPERTY` function if the argument is either `undefined` or the wrong type.
Closes #2665

Re-do of #2731 
Users could have previously had custom properties of type int that
referenced objects by ID. Registering a converter for ObjectRef to
and from int should help migration to the new object reference type.

Updates #707
__TL;DR__
With the JS API, is there a way to get a tileset image's size in pixels?

---

Before `v1.3` and the JS API / extensions feature, I was using python export scripts to create custom export formats.
I noticed a missing feature/property with the JS API, that was available with the python scripts:
__Getting a tileset's real image size in pixels__
You could do this with python scripts with ...
```python
width = tileset.imageWidth()
height = tileset.imageHeight()
```
(see https://github.com/bjorn/tiled/blob/master/src/plugins/python/tiledbinding.py#L139)

The JS API doesn't seem to provide that information...
So I'm asking, is there a way to get this currently? If not, is this maybe a feature worth implementing?

Sadly I need this functionality to generate custom config files for the tilesets.
It would be very convenient for me to have this feature in the JS API,
otherwise I'll probably need to generate those files outside of the Tiled extension.

Thanks!
Currently it enumerates all objects recursively until an object matches. In #2712 @bjorn pointed out that this is kinda silly for an ID field. We should add a map<ID, object*> of some kind.
It doesn't appear possible to test the scripting API in its current state. We'd either have to rip it out into its own module (which defeats the purpose) or have some way to set it up via the command line.

It might be possible to have a few test scripts that, when loaded, begin to test various parts of the API. However, we'd need to extract from tiled whether the test passed or failed. We'd also have to set up a test harness that can start up tiled with the correct scripting directory.

We could make it work with some command line options:
- [ ] Connect the logging to stdout. That lets us parse js errors, and we can require tests that succeed to print a final message through `tiled.log()`. Name it `--log-to-stdout`?
- [ ] An option to manually specify a script directory. Or to manually specify a preferences file, though then our test harness would have to generate a preferences file... Name it `--script-dir`?
- [ ] An option to quit once all scripts are evaluated?
- [ ] A test harness that can run tiled and listen to its stdout to check the tests.

This assumes that running a windowed application on travis/appveyor even works. The UI needs to be running for a lot of the scripting commands to work, even if we never actually use it. At least, I think it does?
I was confused why I couldn't make a folder starting with a dot on windows7 and had to do some searching to solve, hope this will help other noobs figure this out quicker
When opening a new map, the stamp tool will work immediately. But the erase tool will not work until you've selected a layer.

I *think* this behavior issue only applies to maps with exactly one layer (e.g. when creating a new map).

It's caused me confusion in the past, and someone else recently: https://discourse.mapeditor.org/t/very-newbie-eraser-tip/4271
I'm making a macro for an addon that walks me through set paths in a game, using map coordinates. Planning the path is easy but checking the coordinates and copying them one by one to a text file is painful. The macro will have hundreds of coordinates through dozens of maps, and that won't be the last macro either for me.

Now I suggest that you'd make a simple path tool for stuff like this (for example NPC patrol paths etc could probably benefit from it?) that'd let you for example click on the coordinates you need and then copy the selected coordinates to a text box or something.
When the "Repeat last export on save" option is enabled, the "Save map before executing" option in custom commands should also repeat the last export after saving.

Related to this, the `assetAboutToBeSaved` and `assetSaved` signals are also not emitted in case the file is saved as part of executing a custom command.