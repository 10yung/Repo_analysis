Xcodebuild supports dry runs with the `-n` flag. That seems like it'd speed things up
When I try to run periphery on my Xcode 11.3 Swift project, it aborts quickly with this error message.
```
jakob@mkwnh Pix % periphery scan
Welcome to Periphery!
This guided setup will help you select the appropriate configuration for your project.

* Inspecting project configuration...

error: The element XCSwiftPackageProductDependency is not supported.
```
after installing from HomeBrew on Catalina 10.15.1, I get this error when I try to run periphery:

![image](https://user-images.githubusercontent.com/464574/68411191-00c6cd80-0158-11ea-97fa-776f510daa7f.png)

Guessing itâ€™s something to do with code signing?
Projects are not found within a workspace if they're inside a container group backed by a folder.

`.xcworkspace`
- **Parent Project:** `Periphery Bug Report.xcodeproj`
- **Group:** `Modules`
    - **Nested Project:** `Nested Framework Module.xcodeproj`

## Steps to reproduce

1. Download [periphery-bug-nested-projects.zip](https://github.com/peripheryapp/periphery/files/3749064/periphery-bug-nested-projects.zip)
1. Unarchive ZIP file
1. Run `periphery scan` within the uncompressed same folder (containing `Periphery Bug Report.xcworkspace`)

## Expected result

`periphery` to pick up all targets across both projects:
- `Periphery Bug Report/Periphery Bug Report.xcodeproj`
- `Modules/Nested Framework Module/Nested Framework Module.xcodeproj`

## Actual result

`periphery` fails with an error, not finding `Nested Framework Module.xcodeproj`.

```log
warning: No such project exists at '/periphery-bug-nested-projects/Nested Framework Module/Nested Framework Module.xcodeproj', referenced by /periphery-bug-nested-projects/Periphery Bug Report.xcworkspace/'.
```

The path is incorrect, missing the `Modules` group container location as part of the full path to the project. Instead it should look as follows:

```patch
- /periphery-bug-nested-projects/Nested Framework Module/Nested Framework Module.xcodeproj
+ /periphery-bug-nested-projects/Modules/Nested Framework Module/Nested Framework Module.xcodeproj
```
`error: The element XCSwiftPackageProductDependency is not supported.`
 `* Inspecting project configuration...`

Xcode 11.0
error: SourceKit index request failed for file  Loader.swift': Loader.swift' is not part of the input files

What to do for resolved this error?
Example code:
```
class MyClass {
    var myVar: AnotherClass?

    func callback(_ sender: AnotherClass?) {
        if sender === myVar {
            doOnMatch()
        } else {
            doOnMismatch()
        }
    }

    func doOnMatch() {} // reported as unused
    func doOnMismatch() {} // reported as unused
}
```
It's hard to say what exactly triggers the warning in the example below. There is a static generic function on a protocol extension checking for a type and based on the type return an instance of UIViewController either from XIB or Storyboard.

The result stays the same if I have those XIB and Storyboard defined, of course. When I execute this code in my example project it prints descriptions of all 3 views, which proves they were loaded.

```
protocol P1 {
    static func instantiate<T: UIViewController>() -> T where T: P1
    static var identifier: String { get }  //// Warning here
}

protocol P2: P1 {
    static var storyboard: String { get }  //// Warning here
}

extension P1 {
    static var identifier: String {    //// Warning here
        return String(describing: self)
    }
}

extension P1 {
    static func instantiate<T: UIViewController>() -> T where T: P1 {
        guard let storyboard = (T.self as? P2.Type)?.storyboard else {
            return T(nibName: T.identifier, bundle: nil)
        }
        guard let result = UIStoryboard(name: storyboard, bundle: nil).instantiateViewController(withIdentifier: T.identifier) as? T  else {
            fatalError("No expected controller found")
        }
        return result
    }
}

class C1: UIViewController, P1 {
}

class C2: UIViewController, P2 {
    static var storyboard: String { return "Main" }  //// Warning here
}

class C3: UIViewController, P2 {
    static var storyboard: String { return "Main" }  //// Warning here
}

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()

        let c1: C1 = C1.instantiate()

        let c2: C2 = C2.instantiate()

        let c3: C3 = C3.instantiate()

        print(c1.view)
        print(c2.view)
        print(c3.view)
    }

}
```
I am getting warnings for both unused `tableView` and `section` when implementing UITableViewDataSource method `tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int`.  
Great tool!  However, I am finding some issues with functions called from optionals...

 if let container: DetailContainerView = parent as? DetailContainerView {
   container.updateToolbar(enable: enable)
 }

updateToolbar(enable: Bool) function on DetailContainerView is marked as unused.

