Since being migrated to the DSC Community, this module must be updated to use the new CI process and repository structure.
I have a job as following, but it reports the state as incorrect because of the credential. It appears I am setting it as 'username' but then the scheduled task is taking that and just setting it as DOMAIN\username, leading to a mismatch.  I think I can probably hack it to work somehow, but ideally the scheduledtask resource should probably evaluate DOMAIN\username the same as username.

ScheduledTask 'DRBackup' {
            TaskName = 'DRBackup'
            TaskPath = '\8203Jobs\'
            ActionExecutable = 'C:\windows\system32\WindowsPowerShell\v1.0\powershell.exe'
            ActionArguments = "-Command $BackupJob_Cmd1 $BackupJob_Cmd2"
            ScheduleType = 'Daily'
            StartTime = Get-Date '3am'
            ExecuteAsCredential = $DomainAdminCred
            RunLevel = 'Highest'
            DependsOn = '[cPowerShellModuleManagement]EventLogTools','[xEventLog]CustomLog','[cPowerShellModuleManagement]DRBackupTools'
        }



Verbose Output from Test
VERBOSE: [NOAA8203-MGMT1]: LCM:  [ Start  Resource ]  [[ScheduledTask]DRBackup]
VERBOSE: [NOAA8203-MGMT1]: LCM:  [ Start  Test     ]  [[ScheduledTask]DRBackup]
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] Testing scheduled task 'DRBackup' in '\8203Jobs\'.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] Getting current scheduled task values for task 'DRBackup' in '\8203Jobs\'.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] Task 'DRBackup' found in '\8203Jobs\'. Retrieving settings, first action, first trigger and repetition
settings.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] Detected schedule type 'Daily' for first trigger.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] Current scheduled task values for task 'DRBackup' in '\8203Jobs\' retrieved.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] Testing DSC parameter state.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] MATCH: Value (type 'System.String') for property 'StartTime' does match. Current state is
'2019-12-02T03:00:00' and desired state is '2019-12-02T03:00:00'.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] MATCH: Value (type 'System.String') for property 'ActionExecutable' does match. Current state is
'C:\windows\system32\WindowsPowerShell\v1.0\powershell.exe' and desired state is 'C:\windows\system32\WindowsPowerShell\v1.0\powershell.exe'.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] MATCH: Value (type 'System.String') for property 'ActionArguments' does match. Current state is '-Command
Start-DRBackup -DPMProtectionGroupName DisasterRecovery -Destination \\noaa8203-ds1817\DRBackup -Verbose *>&1 | % {$i++;Write-StreamToEventLog -ID $i -Stream $_ -Logname Application
-Source DRBackupTools}' and desired state is '-Command Start-DRBackup -DPMProtectionGroupName DisasterRecovery -Destination \\noaa8203-ds1817\DRBackup -Verbose *>&1 | %
{$i++;Write-StreamToEventLog -ID $i -Stream $_ -Logname Application -Source DRBackupTools}'.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] NOTMATCH: Value **(type 'System.String') for property 'ExecuteAsCredential' does not match. Current state is
 'NOAA8203\powershelljobs_svc' and desired state is 'powershelljobs_svc'.**
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] MATCH: Value (type 'System.String') for property 'TaskPath' does match. Current state is '\8203Jobs\' and
desired state is '\8203Jobs\'.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] MATCH: Value (type 'System.String') for property 'ScheduleType' does match. Current state is 'Daily' and
desired state is 'Daily'.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] MATCH: Value (type 'System.String') for property 'TaskName' does match. Current state is 'DRBackup' and
desired state is 'DRBackup'.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] MATCH: Value (type 'System.String') for property 'RunLevel' does match. Current state is 'Highest' and
desired state is 'Highest'.
VERBOSE: [NOAA8203-MGMT1]:                            [[ScheduledTask]DRBackup] Test-DscParameter result is 'False'.
VERBOSE: [NOAA8203-MGMT1]: LCM:  [ End    Test     ]  [[ScheduledTask]DRBackup] False in 0.5940 seconds.



<!--
    Your feedback and support is greatly appreciated, thanks for contributing!

    ISSUE TITLE:
    Please prefix the issue title with the resource name, e.g.
    'ResourceName: Short description of my issue'

    ISSUE DESCRIPTION (this template):
    Please provide information regarding your issue under each header below.
    Write N/A under any headers that do not apply to your issue, or if the
    information is not available.

    NOTE! Sensitive information should be obfuscated.

    PLEASE KEEP THE HEADERS.

    You may remove this comment block, and the other comment blocks,
    but please keep the headers.
-->
#### Details of the scenario you tried and the problem that is occurring

#### Verbose logs showing the problem

#### Suggested solution to the issue

#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
```powershell
# insert configuration here
```

#### The operating system the target node is running
<!--
    Please provide as much as possible about the target node, for example
    edition, version, build and language.
    On OS with WMF 5.1 the following command can help get this information.

    Get-ComputerInfo -Property @(
        'OsName',
        'OsOperatingSystemSKU',
        'OSArchitecture',
        'WindowsVersion',
        'WindowsBuildLabEx',
        'OsLanguage',
        'OsMuiLanguages')
-->

#### Version and build of PowerShell the target node is running
<!--
    To help with this information, please run this command:
    $PSVersionTable
-->

#### Version of the DSC module that was used ('dev' if using current dev branch)

This is to fix Hash Table validation check false failures.
<!--
    Your feedback and support is greatly appreciated, thanks for contributing!

    ISSUE TITLE:
    Please prefix the issue title with the resource name, e.g.
    'ResourceName: Short description of my issue'

    ISSUE DESCRIPTION (this template):
    Please provide information regarding your issue under each header below.
    Write N/A under any headers that do not apply to your issue, or if the
    information is not available.

    NOTE! Sensitive information should be obfuscated.

    PLEASE KEEP THE HEADERS.

    You may remove this comment block, and the other comment blocks,
    but please keep the headers.
-->
#### Details of the scenario you tried and the problem that is occurring
The resource fails because it cannot find an unnamed file on Windows 2019 and a TMP file on Windows 2016.

#### Verbose logs showing the problem

On Windows 2016 computers Core or GUI
```powershell
VERBOSE: [ComputerName]: LCM:  [ Start  Resource ]  [[PowerPlan]Highperformance_1475074047]
VERBOSE: [ComputerName]: LCM:  [ Start  Test     ]  [[PowerPlan]Highperformance_1475074047]
VERBOSE: [ComputerName]:                            [[PowerPlan]Highperformance_1475074047] Validating power plan 'High performance'.
VERBOSE: [ComputerName]: LCM:  [ End    Test     ]  [[PowerPlan]Highperformance_1475074047]  in 0.4530 seconds.
PowerShell DSC resource MSFT_PowerPlan  failed to execute Test-TargetResource functionality with error message: Could not find a part of the path 'C:\Windows\system32\config\systemprofile\AppData\Local\Temp\kc2hwjb1.tmp'. 
    + CategoryInfo          : InvalidOperation: (:) [], CimException
    + FullyQualifiedErrorId : ProviderOperationExecutionFailure
    + PSComputerName        : ComputerName
```

On Windows 2019 computers Core or GUI
```powershell
VERBOSE: [ComputerName]: LCM:  [ Start  Resource ]  [[PowerPlan]Highperformance_1278334551]
VERBOSE: [ComputerName]: LCM:  [ Start  Test     ]  [[PowerPlan]Highperformance_1278334551]
VERBOSE: [ComputerName]:                            [[PowerPlan]Highperformance_1278334551] Validating power plan 'High performance'.
VERBOSE: [ComputerName]: LCM:  [ End    Test     ]  [[PowerPlan]Highperformance_1278334551]  in 0.7300 seconds.
PowerShell DSC resource MSFT_PowerPlan  failed to execute Test-TargetResource functionality with error message: The system cannot find the path specified 
    + CategoryInfo          : InvalidOperation: (:) [], CimException
    + FullyQualifiedErrorId : ProviderOperationExecutionFailure
    + PSComputerName        : ComputerName
```
#### Suggested solution to the issue

Unfortunately no idea...

#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
Configuration in YAML format for Datum
```powershell
ComputerManagementDsc:
  PowerPlan:
    Name: High performance
    IsSingleInstance: Yes
```

#### The operating system the target node is running
<!--
    Please provide as much as possible about the target node, for example
    edition, version, build and language.
    On OS with WMF 5.1 the following command can help get this information.

    Get-ComputerInfo -Property @(
        'OsName',
        'OsOperatingSystemSKU',
        'OSArchitecture',
        'WindowsVersion',
        'WindowsBuildLabEx',
        'OsLanguage',
        'OsMuiLanguages')
-->
```powershell
OsName               : Microsoft Windows Server 2016 Datacenter
OsOperatingSystemSKU : DatacenterServerEdition
OsArchitecture       : 64-bit
WindowsBuildLabEx    : 14393.1794.amd64fre.rs1_release.171008-1615
OsLanguage           : en-US
OsMuiLanguages       : {en-US}
```

```powershell
OsName               : Microsoft Windows Server 2019 Datacenter
OsOperatingSystemSKU : DatacenterServerEdition
OsArchitecture       : 64-bit
WindowsVersion       : 1809
WindowsBuildLabEx    : 17763.1.amd64fre.rs5_release.180914-1434
OsLanguage           : en-US
OsMuiLanguages       : {en-US}
```
#### Version and build of PowerShell the target node is running
<!--
    To help with this information, please run this command:
    $PSVersionTable
-->
```powershell
PSVersion                      5.1.14393.1884                                                                                                                                                                                          
PSEdition                      Desktop                                                                                                                                                                                                 
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                                                                 
BuildVersion                   10.0.14393.1884                                                                                                                                                                                         
CLRVersion                     4.0.30319.42000                                                                                                                                                                                         
WSManStackVersion              3.0                                                                                                                                                                                                     
PSRemotingProtocolVersion      2.3                                                                                                                                                                                                     
SerializationVersion           1.1.0.1 
```

```powershell
PSVersion                      5.1.17763.316                                                                                                                                                                                           
PSEdition                      Desktop                                                                                                                                                                                                 
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                                                                 
BuildVersion                   10.0.17763.316                                                                                                                                                                                          
CLRVersion                     4.0.30319.42000                                                                                                                                                                                         
WSManStackVersion              3.0                                                                                                                                                                                                     
PSRemotingProtocolVersion      2.3                                                                                                                                                                                                     
SerializationVersion           1.1.0.1  
```
#### Version of the DSC module that was used ('dev' if using current dev branch)

ComputerManagementDsc 7.0.0.0
Hello, 

I have copied the example of Set Timezone within ComputerManagementDSC module. 
I saved this as a PS script and whenever i run this via azure automation services then it throws me an Error that Timezone is not a valid parameter. 


Configuration TimeZone_SetTimeZone_Config
{
    Import-DSCResource -ModuleName ComputerManagementDsc

    Node localhost
    {
        TimeZone TimeZoneExample
        {
            IsSingleInstance = 'Yes'
            TimeZone         = 'W. Europe Standard Time'
        }
    }
}

Request you to kindly help me on this. 
I am new to Powershell and trying to get more into this. 

Exception calling "NewScriptBlock" with "1" argument(s): "At line:8 char:9 + TimeZone TimeZoneExample + ~~~~~~~~ Undefined DSC resource 'TimeZone'. Use Import-DSCResource to import the resource." (At line:8 char:9 + TimeZone TimeZoneExample + ~~~~~~~~ Undefined DSC resource 'TimeZone'. Use Import-DSCResource to import the resource.)
Hi, 
How do I get the scheduled task to start immediately and only once? Im using the ScheduledTask resource, but I can't get it to start and only run once?
<!--
    Your feedback and support is greatly appreciated, thanks for contributing!
-->

#### This Pull Request (PR) fixes the following issues
The former value of 4096kb in the example does not work. And it's the same for any size unit like kb, mb, gb, ...

It generates the following error message:

> Compilation errors occurred while processing configuration 'DscConfigurationName'. Please review the errors reported in error stream and modify your configuration code appropriately.
>     + CategoryInfo          : InvalidOperation: (DscConfiguration:String) [], InvalidOperationException
>     + FullyQualifiedErrorId : FailToProcessConfiguration

Entering only a number works fine.

#### Task list
- [ ] Added an entry under the Unreleased section of the change log in the CHANGELOG.md.
      Entry should say what was changed, and how that affects users (if applicable).
- [ ] Resource documentation added/updated in README.md in the resource folder.
- [ ] Resource parameter descriptions added/updated in schema.mof
      and comment-based help.
- [ ] Comment-based help added/updated.
- [ ] Localization strings added/updated in all localization files as appropriate.
- [x] Examples appropriately added/updated.
- [ ] Unit tests added/updated. See [DSC Resource Testing Guidelines](https://github.com/PowerShell/DscResources/blob/master/TestsGuidelines.md).
- [ ] Integration tests added/updated (where possible). See [DSC Resource Testing Guidelines](https://github.com/PowerShell/DscResources/blob/master/TestsGuidelines.md).
- [ ] New/changed code adheres to [DSC Resource Style Guidelines](https://github.com/PowerShell/DscResources/blob/master/StyleGuidelines.md) and [Best Practices](https://github.com/PowerShell/DscResources/blob/master/BestPractices.md).

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/powershell/computermanagementdsc/278)
<!-- Reviewable:end -->

#### Pull Request (PR) description

Fix WindowsEventLog: Evaluation of event log differ

#### This Pull Request (PR) fixes the following issues
    - Fixes #229 


#### Task list
- [x] Added an entry under the Unreleased section of the change log in the CHANGELOG.md.
      Entry should say what was changed, and how that affects users (if applicable).
- [ ] Resource documentation added/updated in README.md in the resource folder.
- [ ] Resource parameter descriptions added/updated in schema.mof
      and comment-based help.
- [ ] Comment-based help added/updated.
- [ ] Localization strings added/updated in all localization files as appropriate.
- [ ] Examples appropriately added/updated.
- [ ] Unit tests added/updated. See [DSC Resource Testing Guidelines](https://github.com/PowerShell/DscResources/blob/master/TestsGuidelines.md).
- [ ] Integration tests added/updated (where possible). See [DSC Resource Testing Guidelines](https://github.com/PowerShell/DscResources/blob/master/TestsGuidelines.md).
- [x] New/changed code adheres to [DSC Resource Style Guidelines](https://github.com/PowerShell/DscResources/blob/master/StyleGuidelines.md) and [Best Practices](https://github.com/PowerShell/DscResources/blob/master/BestPractices.md).

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/powershell/computermanagementdsc/277)
<!-- Reviewable:end -->

# Description
The **PendingReboot** resource would be perfect if a maintenance windows could be added.

# Proposed properties

**MondayNumber**: 1-5
**MondayStartTime**: Time
**MondayDuration**: Timespan

**TuesdayNumber**: 1-5 
**TuesdayStartTime**: Time
**TuesdayDuration**: Timespan

**WednesdayNumber**: 1-5
**WednesdayStartTime**: Time
**WednesdayDuration**: Timespan

**ThursayNumber**: 1-5
**ThursdayStartTime**: Time
**ThursdayDuration**: Timespan

**FridayNumber**: 1-5
**FridayStartTime**: Time
**FridayDuration**: Timespan

**SaturdayNumber**: 1-5
**SaturdayStartTime**: Time
**SaturdayDuration**: Timespan

**SundayNumber**: 1-5
**SundayStartTime**: Time
**SundayDuration**: Timespan

The number can be a collection. For example 1st and 3rd monday every month.
Or also for exemple 1st ,2nd, 3rd, 4th and 5th Sunday of every month, which makes it weekly.