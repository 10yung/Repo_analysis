This is a **specific problem**

Problem: is_string_permutable_to_palindrome : Problem 13.1 in the book

- Please **classify issues**
(3.) Buggy test or buggy code, e.g.,  [tests for permutation problem have nonpermutation inputs](https://github.com/adnanaziz/EPIJudge/issues/57)

This is a strange issue, The test tsv file in the master branch does not seem to match what I can see in the web browser. As if the repo is some how corrupt? I've never seen something like this before.

This test sample is incorrect, as it is an odd length of valid characters, with 1 character having an odd count.

acpaa mnn aa alpaaanl    man    false   TODO

```
bryanloz@xsjfislx22:~/EPIJudge$ git branch
  dev
* master
bryanloz@xsjfislx22:~/EPIJudge$ head test_data/is_string_permutable_to_palindrome.tsv
string  bool
itnrsg  false   TODO
a    planaamnnaaa mcpaala n     true    TODO
 ibaal b  awr lsewesei ea       true    TODO
ya a rrya       true    TODO
c  raacrea      false   TODO
        true    TODO
srr  sro a ewaieo ssew ie       true    TODO
acpaa mnn aa alpaaanl    man    false   TODO
 erao tonateff evoorn  ev       true    TODO
```



By better solution we mean something that is (1.) more **idiomatic**; (2.) **faster** (from a complexity perspective, or in practical settings); or  (3.) easier to **understand**.
 - If you have a complete solution that is better solution, please consider using a [pull request](https://github.com/adnanaziz/EPIJudge/pulls). (If possible, please provide the solution for C++, Java, and Python.)
 - If the problem is with installation or execution, please give system information, i.e., OS, and language and build environment (including versions).
 - Please describe the behavior you see, including screenshots (you can use Google Drive, GitHub, or [Imgur](https://imgur.com/) to upload images and link to them); as well as the expected behavior.
 - For bugs, if possible please provide a reproducible test case that is the bare minimum necessary to generate the problem.

Because of our build process we cannot **directly accept PRs** by merging into the master branch. Instead please send PRs against the dev branch.
  - The reason for this is that we have a single source of truth, which is the complete solution that we annotate with markers that are used to generate the solution that goes inline in the book as well as the skeleton for the judge. (Here is a [snippet](https://imgur.com/nN6nbVL) of a source program, note the markers.)

Using map's getOrDefault significantly reduces conditional checks required. I have also modified the solution a bit to only require a single pass. Further, since we're adding the results in a single pass, we don't care about swapping/changing indexes before the current index, which also halves hash table modifications required.

This is my first pull request, so I apologize in advance if I made a mistake.
You are given two sorted arrays and a positive integer k. Design an algorithm for computing the kth smallest element in an array consisting of the elements of the initial two arrays arranged in sorted order. Array elements may be duplicated within and across the input arrays.

The problem statement doesn't specify if it should be kth smallest distinct element or kth element in combined sorted order of two arrays. For me the last statement makes it lean more towards kth smallest distinct element by mentioning presence of duplicates across two arrays.
Updated code to use a  list of characters instead of a string to represent an added word for Problem 24.8 in order to avoid the extra time complexity associated with string concatentations

> $ python3.7 epi_judge_python_solutions/left_right_justify_text.py 
> Test PASSED (30/30) [  15 us]
> Average running time:   37 us
> 
The time complexity for the problem `Justify Text` is stated to be O(n), where n is the sum of lengths of  the string in A.

But if we take a look at Line 14: 
https://github.com/adnanaziz/EPIJudge/blob/f2c94dc79c9b7b162c48dff6b83a7c33f654d9aa/epi_judge_python_solutions/left_right_justify_text.py#L14

We are performing string concatenation by concatenating a space to the string `curr_line[i % max(len(curr_line) - 1, 1)]` , which will cause a new string to be build for each character, which will cause our time complexity to go up to roughly  `O(maxWidth*n)`, since we can create `maxWidth` no of new strings per character by our concatenations.

Please notice that this might not be the correct time complexity computation but it will surely not be `O(n)`
`The interval covering problem` was written in place of `The 2-sum problem`. Fixed.
Increment "b" if "a" crosses it.

M(a,b) is defined in text to be the minimum possible sum of a subarray beginning at a and extending to b or beyond. If a crosses b this gets a little confusing to analyse, even though it works and can be proved additionally.
For the problem "NearestRepeatedEntries", it is mentioned that the solution provided has a time complexity of O(n). I believe this should be O(n*m), where m is the length of longest string among n entries because updating value of a key in hashmap will need to first check for key equality.
Please clarify.
This solution is just more simpler with dfs. I am not sure if the bfs solution was given for any specific reason.
In problem 19.5: Deadlock, there is a code snippet provided and according to the explanation that follows, the code snippet causes a deadlock. But I am unable to see how a deadlock is happening here

The explanation says

> Suppose U1 initiates a transfer to U2, and immediately afterwards, U2 initiates a transfer
> to U1. Since each transfer takes place in a separate thread, it's possible for the first thread to lock
> U1 and then the second thread to be scheduled in and take the lock U2. The program is now
> deadlocked--each of the two threads is waiting for the lock held by the other thread.

If U1 and U2 have separate locks, and the two threads only locks U1's and U2's lock in `_move`, how is there a deadlock being achieved here.

A similar question was asked on stack overflow, but no answer was provided. https://stackoverflow.com/questions/52237227/deadlock-question-19-5-in-elements-of-programming-interviews.

The following might be a deadlock though

   ```
 def _move(self, acc_to, amount):

        with self._lock:
            time.sleep(random.random())
            with acc_to._lock:
                if amount > self._balance:
                    return False
                acc_to._balance += amount
                self._balance -= amount
                logging.debug('returning True')
                return True
```
If we have two accounts a1 and a2, and thread t1 transfers from a1 to a2, and thread t2 transfers from a2 to a1, the following might lead to deadlock

1. t1 locks a1 and goes to sleep
2. t2 locks a2 and goes to sleep
3. After they wake up from sleep, t1 locks a2 and t2 locks a1, which will then cause a deadlock since neither a1 nor a2 can be unlocked.

And this deadlock can surely be resolved by the posted solution as follows

```
def _move(self, acc_to, amount):

    lock1, lock2 = (self._lock, acc_to._lock) if self._id < acc_to._id else (acc_to._lock, self._lock)

    with lock1:
        time.sleep(random.random())
        with lock2:
            if amount > self._balance:
                return False
            acc_to._balance += amount
            self._balance -= amount
            logging.debug('returning True')
            return True
```

since now t1 and t2 will always lock a1 and a2 in order, if a1's account id is smaller than a2's.