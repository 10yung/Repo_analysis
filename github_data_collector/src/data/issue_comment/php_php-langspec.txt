There is a missing dollar sign.
Line 257 reads "$b = &colors[100];", but should be "$b = &$colors[100];".
Some arrow diagrams are rendered as `&lt;--` instead of `<--`.
The specification currently states that use declarations bring a name into a scope, but that's not exactly true, as imports are not available prior to the use declaration.

```php
namespace A {
    class C {}
}
namespace B {
    // Same scope, 'A\C' should be available right?!
    $c = new C();
    use A\C;
}
```

Without this restriction, an engine could theoretically make an initial pass to import names from all use declarations, and therefore prevent a name resolution error from occurring.

**18-namespaces.md**
> A namespace-use-declaration imports — that is, makes available — one or more names into a scope, optionally giving them each an alias.
In the grammar, the `string-variable` production rule is not used.

Looking at https://github.com/php/php-src/blob/0720313bd452adf451173574e97fd761f90623a2/Zend/zend_language_parser.y#L1223, I think it should be a summand of `dq-char`.
Split off from #208:

Currently [array-element-initializer](https://github.com/php/php-langspec/blob/master/spec/10-expressions.md#grammar-array-element-initializer) specifies that the key and value are both ordinary expressions. As specified, this is ambiguous with [yield-expression](https://github.com/php/php-langspec/blob/master/spec/10-expressions.md#grammar-yield-expression).

PHP resolves this as follows:

```php
[yield "foo" => "bar"]
// is
[(yield "foo" => "bar")]
// rather than
[(yield "foo") => "bar"]
```

However, I'm not sure how this can be specified in grammar form.
Hi, it seems `use function` statement is not tested in `tests/namespaces`.
`$x instanceof $y instanceof $z` is a nonsense expression, but is successfully parsed in PHP 5.6-7.3 (see https://3v4l.org/QWYZJ)

- This contradicts what is mentioned in https://secure.php.net/manual/en/language.operators.precedence.php (the website says it's non-associative. However, other non-associative expressions do what would make sense: They cause Parse errors (e.g. `2 == 3 != 4`)

Either of the following would make sense:

1. Mention that this is non-associative in php-langspec (to reflect php.net) (It seems like that's probably a consequence of the current CFG, so maybe nothing needs to be done)

     Additionally, **try to make that a syntax error in php 8.x or 7.4,** to reflect the documentation on php.net: https://secure.php.net/manual/en/language.operators.precedence.php
2. Update the specification to allow it, and update php.net (it seems like it's currently parsed as `($x instanceof $y) instanceof $z` according to `ast\parse_code()`) - I'm opposed to that, and it seems like the spec in this repo forbids that

I'm not quite sure what repo to file this in, or the process to request the change to php implementation's syntax, or if this has been mentioned elsewhere.
It is impossible to claim conformance to an ever evolving language specification without referring to a certain version/edition or whatever it will be called. There are open pull request and issues which cannot be sensibly addressed due to this issue, unless we're claiming this spec is still a draft, in which case it is not really helpful for alternative implementations at all.
See, for instance, list_007.phpt:
https://github.com/php/php-langspec/blob/7d350634b44d0688d8dda9f3599b086ad48ada6f/tests/expressions/list/list_007.phpt#L1-L15
The test obviously expects a certain error message including a certain message and stack trace format, although the [spec merely mentions](https://github.com/php/php-langspec/blob/dc3290165ea3fd5b0422ddca63f464c6bd6855c7/spec/10-expressions.md#list-intrinsic):
> the right-hand operand must be an expression that designates an array or object implementing the ArrayAccess interface

Furthermore, the test uses `var_dump` which is only mentioned, but not specified in the langspec (particularly it's output format may differ).

If the tests should be useful for language implementations other than the php.net implementation, they should be written with portability in mind. Otherwise we could as well get rid of the test suite altogether (and merge possibly missing tests to the php.net test suite).