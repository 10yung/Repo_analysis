Dear all,

Thank you for this amazing framework, first of all.

I am trying to inline 2 buttons, but can't do it correctly. Somehow I can't apply a section inside a section, to then add 2 columns there.

This is the final result I want to achieve (inside the yellow box):

![image](https://user-images.githubusercontent.com/34269950/72211621-966f3800-34ce-11ea-949d-8b34234b1185.png)

Do you have any suggestions?

Thank you in advance for the help!
**Describe the bug**
I did `yarn upgrade` of mjml dependencies, and suddenly all `<img alt="" src="..." />` turned into `<img alt src="..." />` in the output. Is this an intended change? Will this shorthand alt attribute be valid for all email clients?

I run mjml with `--config.keepComments=0 --config.validationLevel=strict --config.beautify=false` arguments.

**To Reproduce**
Steps to reproduce the behavior:
1. Create a file with this MJML code: `<mjml><mj-body><mj-text><img alt="" src="..." /></mj-text></mj-body></mjml>`
2. Render it to HTML by doing 'mjml --config.keepComments=0 --config.validationLevel=strict --config.beautify=false`

**MJML environment (please complete the following information):**
 - OS: MacOS
 - MJML Version: 4.5.1
 - MJML tool used: mjml cli


Added [usemap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map) attribute to image tag.
It can be used with `map` tag inside of the `mj-raw` component.
Hi, 
i found a problem on Outlook 16 windows 7/10 & Outlook 19 windows 10. On each main tables,  a gap displays. It works well on other platform.

How can i fix it ?

 - MJML tool used : Email editor on Mailjet website

 - Platform used to test the email: EOA

**Screenshots**

<img width="614" alt="test" src="https://user-images.githubusercontent.com/59564781/71819034-0030b180-308b-11ea-8445-017fde5bf4ee.png">


Thanks,



Fixes mjml/mjml#1763
This is to fix outlook 2016 bug. I have no idea why but it just ignore background-color at top div.
**Bug description:**
So it really is just a mistake in the docs or maybe an unintended behaviour of the code, but the docs of `mj-text` say `font-weight` is supposed to be a `number` while it actually can also be a `string` like "bold" for example just like in the browser. So I guess the docs need to be adjusted to reflect that behaviour.

**Steps to reproduce:**
Steps to reproduce the behavior:
1. Create a file with this MJML code: 
```
<mjml>
  <mj-body>
    <mj-section>
      <mj-column>
        <mj-text font-weight="bold">
          Bold text
        </mj-text>
      </mj-column>
    </mj-section>
  </mj-body>
</mjml>
```

2. Preview the result
3. Text is bold

**MJML environment:**
 - OS: MacOS 10.15.1
 - MJML Version: 4.5.1
 - MJML tool used: MJML App

**Describe the bug**
`Docs` > `Basic layout example` > `Social Icons` includes,

```
By default, every social network is enabled. To disable some of them,
just use their names as an attribute with a false value.
```

This wording is not consistent with `Docs` > `Standard Body components` > `mjml-social`, which mentions nothing similar.

I asked Cedric about it in Slack DM. He indicated, "Actually this comment seems to refer to the use of mj-social in mjml3, where you had to specify which networks you wanted directly in the `mj-social` attributes."

**To Reproduce**
`Docs` > `Basic layout example` > `Social Icons`

**Expected behavior**
Delete the subject text. The paragraph would now read,

```
The MJML standard components library comes with a `mj-social` component.
Here, we're going to use facebook only.
```

**MJML environment (please complete the following information):**
 not applicable

**Email sending environment(for rendering issues)**:
 not applicable

**Affected email clients (for rendering issues):**
 not applicable

**Screenshots**
 not applicable

**Additional context**
 not applicable
**Describe the bug**
Reported by @audio on Thu 2019-11-11, mjml.slack.com/archives/C12HESC2G/p1574395717431700, #general channel:

```
Anyone know anything about the mj-hero-content component mentioned
in comment in the mj-hero docs?
...
It's not mentioned anywhere else in the docs
```


**To Reproduce**

https://mjml.io/documentation/#mjml-hero > second block of MJML code > comment just before the only `mj-text` tag:

```
<!-- To add content like mj-image, mj-text, mj-button ...
use the mj-hero-content component -->
```


**Expected behavior**

Response from @cedric on Fri 2019-11-22, mjml.slack.com/archives/C12HESC2G/p1574416395436100:

```
Hi @audio actually the mj-hero-content component in no longer needed in mjml4,
this comment should be removed from the doc
```


**MJML environment (please complete the following information):**
 - not applicable

**Email sending environment(for rendering issues)**
 - not applicable 

**Affected email clients (for rendering issues):**
 - not applicable

**Screenshots**
- none included

**Additional context**
- none included
# Tag `fix-1480_docs_only` #

In Issue #1480, @KempWatson reported,

```
The MJML documentation is rife with description of elements/components such as 
"mjml-column" when the components are actually like "mj-column". 
There are many dozens of such incorrect references, 
as a matter of fact every single component is mislabelled.

Very confusing...
```

Discussion there captures that the `mjml-` notation is fully comfortable to MJML programmers, because it matches the names of the modules/components they write. At the same time, many such modules support one or more tags supporting the `mj-` syntax. (e.g., The `mjml-button` module/component supports the `mj-button` tag in the MJML language.)

The above report captures a user perspective. Yet, parts of our documentation are best to use the programmers' language.

**This PR proposes places in the documentation at which to use the `mj-` notation.**

* It intends to change each reference to an MJML tag to the `mj-` notation, recognizing the information is most directed to users.

* It intends to _not change_ any reference not used as a tag. (e.g., The documentation indicates no support in the `mjml-cli` module/component for an `mj-cli` tag.)

* It intends to _not change_ any reference in a `*.js` or `package.json` file. These refer to items fully in the programmers' domain.


