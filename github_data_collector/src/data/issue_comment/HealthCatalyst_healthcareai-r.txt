Will continue adding to this.

Update this to use db_write in the primary examples. Move anything RODBC-related to an appendix.
Have at it!

Please test connecting and writing to tables. You should be able to specify schemas and not get strange errors or behavior. Docs and error messages should make sense across the board.
Create an evaluate method multiclass so that a confusion matrix is printed as a tibble. I think most of the code to do this is already in `plot.multiclass_multiclass_df`
Make it so the print method returns the ignored columns specified in prep_data.
Currently `get_best_levels` and `add_best_levels` only combine two datasets that have the exact same column name. This could be improved to be like dplyr's `by` parameter.
It works for Catalyst data where all date or datetime columns will end with DTS, but otherwise I don't think there's a way to declare or get datetime columns noticed, which feels pretty limiting if use beyond Catalyst is desirable. posix time columns error, and character timestamps get removed as all-unique:

``` r
library(healthcareai)
pima_diabetes$admit_timestamp <- as.POSIXlt(rnorm(nrow(pima_diabetes), sd = 3600 * 24 * 365), origin = Sys.time())
prep_data(pima_diabetes, patient_id, outcome = diabetes)
#> Error in model.frame.default(formula, data): invalid type (list) for variable 'admit_timestamp'
```

``` r
library(healthcareai)
pima_diabetes$admit_timestamp <- as.character(as.POSIXlt(rnorm(nrow(pima_diabetes), sd = 3600 * 24 * 365), origin = Sys.time()))
prep_data(pima_diabetes, patient_id, outcome = diabetes)
#> Warning in find_columns_to_ignore(d, c(rlang::quo_name(outcome), ignored)):
#> The following column(s) have a unique value for every row so will be
#> ignored: admit_timestamp
#> Warning in prep_data(pima_diabetes, patient_id, outcome = diabetes): The
#> following variable(s) look a lot like identifiers: They are character-type
#> and have a unique value on every row. They will be ignored: admit_timestamp
#> Training new data prep recipe...
```

Whenever a column has only one value, when it gets centered and scaled, the step converts that column to all NAs. And if NAs are fed into the PCA step, it fails. Removing near zero variance columns before centering and scaling would fix this.

They seem to switch if newdata is provided or not:

``` r
library(healthcareai)
m <- machine_learn(pima_diabetes, patient_id, outcome = diabetes, 
                   tune = FALSE, models = "xgb")
plot(predict(m))
```

![](https://i.imgur.com/YuXy5pM.png)

``` r
plot(predict(m, pima_diabetes))
```

![](https://i.imgur.com/qLuRKQ1.png)

Created on 2018-08-27 by the [reprex package](http://reprex.tidyverse.org) (v0.2.0).