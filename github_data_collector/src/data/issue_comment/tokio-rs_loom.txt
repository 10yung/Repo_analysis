Data race is undetected in code below (curiously, with additional release
operations the issue is reported as expected):

```rust
use loom::sync::Arc;
use loom::sync::atomic::AtomicUsize;
use loom::sync::atomic::Ordering::*;
use loom::thread;

fn main() {
    loom::model(|| {
        let a = Arc::new(AtomicUsize::new(0));
        let b = a.clone();

        let thread = thread::spawn(move || {
            unsafe { a.unsync_load() };
        });
        
        // b.store(1, Release);
        b.store(1, Relaxed);
        // b.store(1, Release);

        thread.join().unwrap();
    });
}
```
Fixes #21

This branch adds support for mock `RwLock`s. This PR is the same as PR
#88, but updated to build against the current master. All credit is due
to @pop.
Conceptually Path is a stack that gets pushed and popped a lot of times during the test run. Elements of this stack contain small Vecs and VecDeques which are allocated/deallocated a lot of times. We can reduce the number of these allocations by storing thread states and writes in a "SliceVec" - a container that can store slices of different lengths in a single chunk of memory with random access, pushing and popping. After these SliceVecs quickly grow to appropriate size there are no more allocations.

### Performance impact

Using tokio-executor loom tests at revision https://github.com/tokio-rs/tokio/commit/03a9378297c73c2e56a6d6b55db22b92427b850a as a benchmark, execution time compared to loom master fell 15.3s -> 13.6s (11%).
Main changes:
* To deal with the lifetime requirements `Execution` is now re-created for each iteration (only `Path` is created once in the beginning).
* Every bump-allocated object now has a lifetime which can be annoying :(
* `CausalCell` state is moved to the object `Store`.

Apart from that the changes are mostly mechanical.

The remaining big source of periodic allocations is https://github.com/tokio-rs/loom/blob/3fb6e6efb4403c14ce7963b5b7f6574710153440/src/sync/atomic/atomic.rs#L12 but it doesn't seem worth the effort to move it inside the `object::Store`.

Again using tokio executor loom tests as a benchmark (`LOOM_MAX_PREEMPTIONS=2 RUSTFLAGS="--cfg loom" cargo test --release --lib` in the `tokio/tokio-executor` dir), execution time went down from 15.2s to 10.9s compared to master  ðŸŽ‰
> Instead of logging a large header, what do you think about creating a separate `tracing` [span](https://docs.rs/tracing/0.1.10/tracing/#spans) representing each iteration, with the iteration number as a field? That way, everything recorded during that iteration will be annotated with the iteration number.
>
> This isn't necessarily a blocker for merging this PR, so it might be worth doing in a follow-up branch.
>
> _Originally posted by @hawkw in https://github.com/tokio-rs/loom/pull/91_

Follow-up from #91.

I think ideally, it would be fantastic if we had a span structure like this for all events loom records:
```
test{name=my_loom_test}:execution{iter=15}:thread{id=1}: something happened...
```
(note that recording the test name may be difficult without asking the user to provide it, or providing a test macro...)


Fixes #21 

Oh snap when did this move to the Tokio org? Well, all the same: I added support for RwLock!

I don't know if this is done, but the tests (which I got from the RwLock docs) pass so I'm happy.

I would love some feedback. The `is_read_locked()` and `is_write_locked()` functions cause "Already Locked" panics so I am not using them at the moment. Let me know if you want more info on that.

cc: @pickfire ?
I'm interested in providing "choice" to the model-checker. I'm doing this so I can simulate a lossy channel: each message can either be delivered, or lost. From what I understand of this library, it may be possible to do this using the existing primitives. However, I don't know what the idiomatic approach would be. Does anyone have guidance on how to do this?

Thanks!
@josevalim kindly pointed me to another paper on stateless model checking: [Optimal dynamic partial order reduction](http://user.it.uu.se/~bengt/Papers/Full/popl14.pdf). We probably should investigate to see how it fits.