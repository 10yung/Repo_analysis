Is this achievable? Does adding this might change the project behaviour?

I'm trying to observe a key, but it seems like there can only be one observer per key at a time. Is this true? I'm doing something like this:

1. VC1 adds observer for "myKey". I make a change to "myKey", and the closure runs. Good.
2. VC2 is pushed, and adds an observer for "myKey". I make a change to "myKey" here, VC2's observer closure runs, but VC1's closure doesn't.

Is this the way it's supposed to work? I figured VC2's closure was overwriting VC1's, but I'm further confused because once I navigate back to VC1, if I edit "myKey" again, VC1's closure runs again, even though I haven't re-added the observer.
* Swift 5 in podspec
* Swift 5 for project file
* fix warnings

![497d-905d](https://user-images.githubusercontent.com/7984517/61992939-8639dc80-b097-11e9-9522-628be83301f5.png)


I got crash when was trying to get data from cache.
ERROR: 
`EXC_BAD_ACCESS KERN_PROTECTION_FAILURE 0x000000016b7dffc0`
Here is the log:
```
Crashed: Cache.SyncStorage.SerialQueue
0  CoreFoundation                 0x1ecac2cfc CFBasicHashFindBucket + 4
1  CoreFoundation                 0x1eca655bc __CFGetConverter + 232
2  CoreFoundation                 0x1eca65b38 CFStringEncodingIsValidEncoding + 12
3  CoreFoundation                 0x1eca67fc0 __CFStringEncodeByteStream + 1268
4  Foundation                     0x1ed3f880c -[NSString(NSStringOtherEncodings) lengthOfBytesUsingEncoding:] + 164
5  Foundation                     0x1ed44afa0 -[NSPlaceholderString initWithString:] + 252
6  Cache                          0x1049ba3d4 @nonobjc NSString.init(string:) (<compiler-generated>)
7  Cache                          0x1049b8388 NSString.__allocating_init(string:) (<compiler-generated>)
8  Cache                          0x1049b851c MemoryStorage.entry(forKey:) (MemoryStorage.swift:48)
9  Cache                          0x10499ce8c HybridStorage.entry(forKey:) (HybridStorage.swift:31)
10 Cache                          0x1049c08f8 closure #1 in SyncStorage.entry(forKey:) (SyncStorage.swift:20)
11 Cache                          0x1049c0a14 partial apply for closure #1 in SyncStorage.entry(forKey:) (<compiler-generated>)
12 Cache                          0x1049c0a44 thunk for @callee_guaranteed () -> (@error @owned Error) (<compiler-generated>)
13 Cache                          0x1049c0b00 partial apply for thunk for @callee_guaranteed () -> (@error @owned Error) (<compiler-generated>)
14 libswiftDispatch.dylib         0x21a0d5450 partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error) + 20
15 libswiftDispatch.dylib         0x21a0ce7ac closure #1 in closure #1 in OS_dispatch_queue._syncHelper<A>(fn:execute:rescue:) + 104
16 libswiftDispatch.dylib         0x21a0d5234 partial apply for thunk for @callee_guaranteed () -> () + 20
17 libswiftDispatch.dylib         0x21a0c8930 thunk for @escaping @callee_guaranteed () -> () + 20
18 libdispatch.dylib              0x1ec4dd7d4 _dispatch_client_callout + 16
19 libdispatch.dylib              0x1ec48bc18 _dispatch_lane_barrier_sync_invoke_and_complete + 56
20 libswiftDispatch.dylib         0x21a0ced94 @nonobjc OS_dispatch_queue.sync(execute:) + 156
21 libswiftDispatch.dylib         0x21a0d2da0 partial apply for @nonobjc  + 20
22 libswiftDispatch.dylib         0x21a0ce638 OS_dispatch_queue._syncHelper<A>(fn:execute:rescue:) + 264
23 libswiftDispatch.dylib         0x21a0cecc8 OS_dispatch_queue.sync<A>(execute:) + 164
24 Cache                          0x1049bfe54 SyncStorage.entry(forKey:) (SyncStorage.swift:19)
25 Cache                          0x1049bc1a8 Storage.entry(forKey:) (Storage.swift:47)
26 Cache                          0x1049bc454 protocol witness for StorageAware.entry(forKey:) in conformance Storage<A> (<compiler-generated>)
27 Cache                          0x1049bd9dc StorageAware.object(forKey:) (StorageAware.swift:59)
28 ProjectName                         0x1045884c4 specialized CacheRepository.get(forKey:) + 4302210244
```
Code with GET request:
```
func get(forKey: String) -> [T]? {
        do {
            let data = try self.storage.object(forKey: forKey)
            print("Storage -> GET -> Key: '\(forKey)' -> Result: \(String(describing: data))")
            return data
        } catch {
            print("Error on get storage data: " + error.localizedDescription)
            return nil
        }
    }
```

We cannot build this project in Swift 5, we get compiler errors.

```
Module compiled with Swift 4.2.1 cannot be imported by the Swift 5.0 compiler: /Users/davidyork/academia/academia-ios/Carthage/Build/iOS/Cache.framework/Modules/Cache.swiftmodule/x86_64.swiftmodule
```

Also (from a Carthage build attempt)

```
*** Building scheme "Cache-iOS" in Cache.xcodeproj
Build Failed
	Task failed with exit code 65:
	/usr/bin/xcrun xcodebuild -project /Users/davidyork/academia/academia-ios/Carthage/Checkouts/Cache/Cache.xcodeproj -scheme Cache-iOS -configuration Release -derivedDataPath /Users/davidyork/Library/Caches/org.carthage.CarthageKit/DerivedData/10.2_10E125/Cache/5.2.0 -sdk iphoneos ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath /var/folders/_l/t8shcn813_1d8_y26wjyfrgw0000gn/T/Cache SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO STRIP_INSTALLED_PRODUCT=NO (launched in /Users/davidyork/academia/academia-ios/Carthage/Checkouts/Cache)

This usually indicates that project itself failed to compile. Please check the xcodebuild log for more details: /var/folders/_l/t8shcn813_1d8_y26wjyfrgw0000gn/T/carthage-xcodebuild.vjdGjk.log
```

What's the general procedure for updating to newer XCode/Swift versions? I'd be happy to help.

I am using a custom codable that inherits from a super (codable class). I am using a convenience init to load from decoder using container and call the super.init to instantiate the values of the super class . When I try to save and retreive the codable Object (classB) I get an error saying keynotfound : CodingKeys(stringValue: "object", intValue: nil).
Can anyone help with this error , I have resolved it at the moment by removing the inheritance though am curious how to make it work with it.

ex :  
ClassA:Codable {
let dataA = "some data of class A"
}
ClassB : ClassA {
 let dataB = "SomeData"

init(dataB: String ,dataA:String) {
    self.dataB = dataB
super.init(dataA:dataA)
}
enum CodingKeys: String, CodingKey {
        case dataA, dataB
   }

    required convenience init(from decoder: Decoder) throws {
      let container = try decoder.container(keyedBy: CodingKeys.self)  
      let dataB: String = try container.decode(String.self, forKey: .dataB) 
      let dataA: String = try container.decode(String.self, forKey: .dataB) 
  
      self.init(dataA:dataA,  dataB:dataB)
 }
}
Hey guys! Am I the only one who can't get storage observations to work? 

`let diskConfig = DiskConfig(name: "UserCache")
        let memoryConfig = MemoryConfig(expiry: .never, countLimit: 10, totalCostLimit: 10)
        
        let storage = try! Storage(
            diskConfig: diskConfig,
            memoryConfig: memoryConfig,
            transformer: TransformerFactory.forData()
        )
        
        let string = "This is a string"
        
        
        let stringStorage = storage.transformCodable(ofType: String.self)
        
        let token = storage.addStorageObserver(self) { observer, storage, change in
            switch change {
            case .add(let key):
                print("Added \(key)")
            case .remove(let key):
                print("Removed \(key)")
            case .removeAll:
                print("Removed all")
            case .removeExpired:
                print("Removed expired")
            }
        }
        
        try? stringStorage.setObject(string, forKey: "string")`


Nothing gets printed out. Thanks
I have migrated the source code, including the test cases to Swift 5. Please review the code and merge it. 