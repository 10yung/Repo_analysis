Hello matz,

Sorry to misuse the issue tracker for this; please feel free to close it.

I just noticed:

https://www.nushell.sh/

When i was reading this part:

> Commands that work in the pipeline fit into one of three categories:

>     Commands that produce a stream (eg, ls)
>     Commands that filter a stream (eg, where type == "Directory")
>     Commands that consume the output of the pipeline (eg, autoview)

> Commands are separated by the pipe symbol (|) to denote a pipeline flowing left to right.

And I had to think about streem.

You have a lot of things to do already, so no need to add any more ideas to
the stack; but I think if you get to think about streem again in the future (perhaps
one day), a shell that showcases what streem can do, or how it can be used,
may be useful, similar to what the rushell.sh example shows. (Others can do
the video; for example, for pry, someone else did a video + intro showcase. 
But before the video the idea may have to be formalized in code that works,
if any useful idea can be extracted from the above link - so I just wanted to
make sure that this was known to you. Thanks!)
Hey @matz, I have an early-stage prototype of the spawn function. 
The code is not meant to be merged, it's just to know what do you think about it.
 
This works:
```
spawn("ls") | stdout                           # can be a producer
```

These don't (yet):
```
stream | spawn("grep foo") | stdout  # and also be a filter
stream | spawn("cat > /tmp/a")         # and a consumer
```

Any feedback would be very welcomed.



I modifed order of streming in 07netcat.strm because windows can't poll stdin in non-main thread. it should poll input with ReadConsoleInput or ReadFile. So this is a temporary workaround .

When I run examples/08chat.strm, a error happened.

``` sh
$: bin/streem examples/08chat.strm
examples/08chat.strm:2:failed to assign
```

Git commit: 81c6ad9
System: Mac OSX 10.11
Clang: clang-703.0.29

or

System: CentOS7
GCC: 4.8.5

As a shell script, is there a function to execute a shell command (e.g. "ls", "pwd", etc.), already?

@matz I watched the Full Stack Fest 2015 on youTube just minutes ago and hurried to see what exciting things you are up to :)

Perusing the examples got me thinking if the *nix stream descriptors could come in handy (and be (mis)used) ?

Like

```
[ 1,2,3 ] | > ( { |x| [ x, x*x, x*x*x ] } |1> { |x| puts x } |2> { |x| puts x } |3> { |x| puts x } ) | stdout
# 
# output would be
1 
1 
1
2
4
8
3
9
27
```

In that sense you would build your own concurrency and leave it to the interpreter to hand each stream to what core resources would be available -- in the above example 1,2 or 3 cores might be used depending upon availability - and the parenthesis(es) would indicate scopes of concurrency, heck you could even (given some pre-knowledge of the computational challenges throw a seeding value into the mix like

```
| stream_description, resource_allocation_weight >

 |1,1> { |x| puts x } |2,2> { |x| puts x } |3,3> { |x| puts x }
```

I cannot wait for you to 'build' this streem (and apply it to Ruby) in effect providing us with some relief when we do:

```
- resources.each do | resource |
  = render partial 'item', locals: { item: resource }
```

(and resources is a 10,000 row SQL select ActiveRecord::Relation object)

---

The stream descriptors would obviously have to work the other way around too. Think about a ticket system in the subway

```
ticket_verifier 1< reader1 2< reader2 3< reader3 .... N< readerN |1> big_screen 2> logfile
```

with no one using the reader24 - reader32 they are (today) just sitting there eating up cycles - with your streem, they stop becoming an embarrassment :)

Full 'steem' ahead Matz :D 

oh - and thank you so much for Ruby!!!!

cheers
Walther

ps: if this entire post is just about the dumbest you have ever read - please excuse me for waisting your bandwidth!

Would you like to add more error handling for return values from functions like the following?
- [malloc](http://pubs.opengroup.org/onlinepubs/9699919799/functions/malloc.html) ⇒ [node_pair_new](https://github.com/matz/streem/blob/ee3edae904188893941828a31e8665b41160e6a5/src/node.c#L69)
- [fputs](http://pubs.opengroup.org/onlinepubs/9699919799/functions/fputs.html) ⇒ [print_id](https://github.com/matz/streem/blob/34645324a2fb23f44c9ada1aef0e0728e4ba45db/src/main.c#L5)

I was thinking it would be useful to either have the ability to create operators or have macros. I know macros are controversial and hard to understand for some people, but I think at least being able to create operators as functions (a poor man's macro) would be useful. I don't really have any ideas about syntax though...
