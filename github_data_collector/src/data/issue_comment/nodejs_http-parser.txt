
After installing http-parser 2.9.2, calling in nodejs `./configure --shared-http-parser` prints
```
Package http_parser was not found in the pkg-config search path.
Perhaps you should add the directory containing `http_parser.pc'
to the PKG_CONFIG_PATH environment variable
No package 'http_parser' found
```
Hi, I've fixed 4 dependencies missing and 1 dependency excessive reported.
Those issues can cause incorrect results when http-parser is incrementally built.
For example, any changes in "http-parser.h" will not cause "url_parser" to be rebuilt, which is incorrect. The changes in "http-parser.h" will cause an unnecessary rebuild of "test_fast".
I've tested it on my computer, the fixed version worked as expected.
Looking forward to your confirmation.

Thanks
Vemake
## Problem Description

I got a conflict with http_parser.h, which uses the same macro name:

#define XX() 

## Code to reproduce this issue

#define XX(x) something

## Proposed solution

Never use non-descript unqualified macro-names in libs, as these identifier belong to the user and end up breaking their code. So either qualify the define and rename it HTTP_PARSER_XX(), or use the standard X-macro name convention ENTRY().
implement support (with tests) for the following:

- File URLS (no host part) `file:///tmp/some_file.txt`
- magnet URLS (scheme:?query) `magnet:?t=urn:btih:c12fe1c06bba254a9dc9f519b335aa7c1367a88a&dn `
- Opaque URLS: `mailto:admin@nodejs.com`
When parsing URLs, treat an empty port (eg `http://hostname:/`) as if it were unspecified.  RFC 3986 says:

> URI producers and normalizers **SHOULD** omit the port component and its ":" delimiter if port is empty or if its value would be the same as that of the scheme's default.

(Emphasis mine.)  This indicates that URIs MAY be produced with an empty port and the `:` delimiter.

Thus, we stop failing if we end host parsing at the port delimiter.
http_parser_parse_url quietly fails to parse very long URLs. Instead it will return invalid `off` and `len` values. There could be a security impact in this issue in situations where the parse result data would be used to make security related decisions (for example the parsed path might be different in actual URL vs the parsed one).

PR #480 is a proposed fix to this issue. Alternatively if the existing ABI must be maintained, the code should be changed to return an error if `off` or `len` overflow (become > `UINT16_MAX`).
Earlier http_parser_parse_url would incorrectly parse very long URLs: The resulting off and len parameters would just get truncated. Even though very long URLs are typically considered invalid by servers they could still end up being parsed by http_parser_parse_url. Thus it's better handle this situation gracefully.

This change is unfortunately not backwards ABI compatible due to changes in http_parser_url structure field types, hence the major version number bump.
The search for body parsers took a lot of time. For convenience, a list of some libraries for parsing various body types in the same ideology has been added.
Currently the on_headers_complete callback can return 0 to proceed
with the response body, 1 to skip the body, and 2 to skip the body
and stop looking for further messages, and this decision on what to do
with the body can only be made inside the on_headers_complete callback.

This PR adds an ability to alter the parser behaviour later
after on_headers_complete pauses the parser and returns 0.

To be honest I'm not very fond of the preprocessor usage or the name http_parser_continue_after_on_headers_complete.